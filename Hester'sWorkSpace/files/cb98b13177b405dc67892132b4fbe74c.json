{"author": "nvbn", "code": "import pytest\nfrom thefuck.rules.sudo_command_from_user_path import match, get_new_command\nfrom thefuck.types import Command\n\n\noutput = 'sudo: {}: command not found'\n\n\n@pytest.fixture(autouse=True)\ndef which(mocker):\n    return mocker.patch('thefuck.rules.sudo_command_from_user_path.which',\n                        return_value='/usr/bin/app')\n\n\n@pytest.mark.parametrize('script, output', [\n    ('sudo npm install -g react-native-cli', output.format('npm')),\n    ('sudo -u app appcfg update .', output.format('appcfg'))])\ndef test_match(script, output):\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, output, which_result', [\n    ('npm --version', output.format('npm'), '/usr/bin/npm'),\n    ('sudo npm --version', '', '/usr/bin/npm'),\n    ('sudo npm --version', output.format('npm'), None)])\ndef test_not_match(which, script, output, which_result):\n    which.return_value = which_result\n    assert not match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, output, result', [\n    ('sudo npm install -g react-native-cli',\n     output.format('npm'),\n     'sudo env \"PATH=$PATH\" npm install -g react-native-cli'),\n    ('sudo -u app appcfg update .',\n     output.format('appcfg'),\n     'sudo -u app env \"PATH=$PATH\" appcfg update .')])\ndef test_get_new_command(script, output, result):\n    assert get_new_command(Command(script, output)) == result\n", "comments": "", "content": "import pytest\nfrom thefuck.rules.sudo_command_from_user_path import match, get_new_command\nfrom thefuck.types import Command\n\n\noutput = 'sudo: {}: command not found'\n\n\n@pytest.fixture(autouse=True)\ndef which(mocker):\n    return mocker.patch('thefuck.rules.sudo_command_from_user_path.which',\n                        return_value='/usr/bin/app')\n\n\n@pytest.mark.parametrize('script, output', [\n    ('sudo npm install -g react-native-cli', output.format('npm')),\n    ('sudo -u app appcfg update .', output.format('appcfg'))])\ndef test_match(script, output):\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, output, which_result', [\n    ('npm --version', output.format('npm'), '/usr/bin/npm'),\n    ('sudo npm --version', '', '/usr/bin/npm'),\n    ('sudo npm --version', output.format('npm'), None)])\ndef test_not_match(which, script, output, which_result):\n    which.return_value = which_result\n    assert not match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, output, result', [\n    ('sudo npm install -g react-native-cli',\n     output.format('npm'),\n     'sudo env \"PATH=$PATH\" npm install -g react-native-cli'),\n    ('sudo -u app appcfg update .',\n     output.format('appcfg'),\n     'sudo -u app env \"PATH=$PATH\" appcfg update .')])\ndef test_get_new_command(script, output, result):\n    assert get_new_command(Command(script, output)) == result\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_sudo_command_from_user_path.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_sudo_command_from_user_path.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}