{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    qualities,\n    unescapeHTML,\n)\n\n\nclass YapFilesIE(InfoExtractor):\n    _YAPFILES_URL = r'//(?:(?:www|api)\\.)?yapfiles\\.ru/get_player/*\\?.*?\\bv=(?P<id>\\w+)'\n    _VALID_URL = r'https?:%s' % _YAPFILES_URL\n    _TESTS = [{\n        \n        'url': 'http://www.yapfiles.ru/get_player/?v=vMDE1NjcyNDUt0413',\n        'md5': '2db19e2bfa2450568868548a1aa1956c',\n        'info_dict': {\n            'id': 'vMDE1NjcyNDUt0413',\n            'ext': 'mp4',\n            'title': '\u0421\u0430\u043c\u044b\u0439 \u0445\u0443\u0434\u0448\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c WIFI',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 72,\n        },\n    }, {\n        \n        'url': 'https://api.yapfiles.ru/get_player/?uid=video_player_1872528&plroll=1&adv=1&v=vMDE4NzI1Mjgt690b',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [unescapeHTML(mobj.group('url')) for mobj in re.finditer(\n            r'<iframe\\b[^>]+\\bsrc=([\"\\'])(?P<url>(?:https?:)?%s.*?)\\1'\n            % YapFilesIE._YAPFILES_URL, webpage)]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id, fatal=False)\n\n        player_url = None\n        query = {}\n        if webpage:\n            player_url = self._search_regex(\n                r'player\\.init\\s*\\(\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', webpage,\n                'player url', default=None, group='url')\n\n        if not player_url:\n            player_url = 'http://api.yapfiles.ru/load/%s/' % video_id\n            query = {\n                'md5': 'ded5f369be61b8ae5f88e2eeb2f3caff',\n                'type': 'json',\n                'ref': url,\n            }\n\n        player = self._download_json(\n            player_url, video_id, query=query)['player']\n\n        playlist_url = player['playlist']\n        title = player['title']\n        thumbnail = player.get('poster')\n\n        if title == '\u0420\u043e\u043b\u0438\u043a \u0443\u0434\u0430\u043b\u0435\u043d' or 'deleted.jpg' in (thumbnail or ''):\n            raise ExtractorError(\n                'Video %s has been removed' % video_id, expected=True)\n\n        playlist = self._download_json(\n            playlist_url, video_id)['player']['main']\n\n        hd_height = int_or_none(player.get('hd'))\n\n        QUALITIES = ('sd', 'hd')\n        quality_key = qualities(QUALITIES)\n        formats = []\n        for format_id in QUALITIES:\n            is_hd = format_id == 'hd'\n            format_url = playlist.get(\n                'file%s' % ('_hd' if is_hd else ''))\n            if not format_url or not isinstance(format_url, compat_str):\n                continue\n            formats.append({\n                'url': format_url,\n                'format_id': format_id,\n                'quality': quality_key(format_id),\n                'height': hd_height if is_hd else None,\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': int_or_none(player.get('length')),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# with hd\n# without hd\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    qualities,\n    unescapeHTML,\n)\n\n\nclass YapFilesIE(InfoExtractor):\n    _YAPFILES_URL = r'//(?:(?:www|api)\\.)?yapfiles\\.ru/get_player/*\\?.*?\\bv=(?P<id>\\w+)'\n    _VALID_URL = r'https?:%s' % _YAPFILES_URL\n    _TESTS = [{\n        # with hd\n        'url': 'http://www.yapfiles.ru/get_player/?v=vMDE1NjcyNDUt0413',\n        'md5': '2db19e2bfa2450568868548a1aa1956c',\n        'info_dict': {\n            'id': 'vMDE1NjcyNDUt0413',\n            'ext': 'mp4',\n            'title': '\u0421\u0430\u043c\u044b\u0439 \u0445\u0443\u0434\u0448\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c WIFI',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 72,\n        },\n    }, {\n        # without hd\n        'url': 'https://api.yapfiles.ru/get_player/?uid=video_player_1872528&plroll=1&adv=1&v=vMDE4NzI1Mjgt690b',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [unescapeHTML(mobj.group('url')) for mobj in re.finditer(\n            r'<iframe\\b[^>]+\\bsrc=([\"\\'])(?P<url>(?:https?:)?%s.*?)\\1'\n            % YapFilesIE._YAPFILES_URL, webpage)]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id, fatal=False)\n\n        player_url = None\n        query = {}\n        if webpage:\n            player_url = self._search_regex(\n                r'player\\.init\\s*\\(\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', webpage,\n                'player url', default=None, group='url')\n\n        if not player_url:\n            player_url = 'http://api.yapfiles.ru/load/%s/' % video_id\n            query = {\n                'md5': 'ded5f369be61b8ae5f88e2eeb2f3caff',\n                'type': 'json',\n                'ref': url,\n            }\n\n        player = self._download_json(\n            player_url, video_id, query=query)['player']\n\n        playlist_url = player['playlist']\n        title = player['title']\n        thumbnail = player.get('poster')\n\n        if title == '\u0420\u043e\u043b\u0438\u043a \u0443\u0434\u0430\u043b\u0435\u043d' or 'deleted.jpg' in (thumbnail or ''):\n            raise ExtractorError(\n                'Video %s has been removed' % video_id, expected=True)\n\n        playlist = self._download_json(\n            playlist_url, video_id)['player']['main']\n\n        hd_height = int_or_none(player.get('hd'))\n\n        QUALITIES = ('sd', 'hd')\n        quality_key = qualities(QUALITIES)\n        formats = []\n        for format_id in QUALITIES:\n            is_hd = format_id == 'hd'\n            format_url = playlist.get(\n                'file%s' % ('_hd' if is_hd else ''))\n            if not format_url or not isinstance(format_url, compat_str):\n                continue\n            formats.append({\n                'url': format_url,\n                'format_id': format_id,\n                'quality': quality_key(format_id),\n                'height': hd_height if is_hd else None,\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': int_or_none(player.get('length')),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "yapfiles.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/yapfiles.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}