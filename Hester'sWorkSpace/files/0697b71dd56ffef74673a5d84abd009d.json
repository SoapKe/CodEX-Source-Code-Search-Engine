{"author": "sympy", "code": "from sympy.multipledispatch import dispatch, Dispatcher\nfrom sympy.core import Basic, Expr, Function, Add, Mul, Pow, Dummy, Integer\nfrom sympy import Min, Max, Set, sympify, Lambda, symbols, exp, log, S, oo\nfrom sympy.sets import (imageset, Interval, FiniteSet, Union, ImageSet,\n    ProductSet, EmptySet, Intersection)\nfrom sympy.core.function import FunctionClass\nfrom sympy.logic.boolalg import And, Or, Not, true, false\n\n\n_x, _y = symbols(\"x y\")\n\n\n@dispatch(Basic, Basic)\ndef _set_mul(x, y):\n    return None\n\n@dispatch(Set, Set)\ndef _set_mul(x, y):\n    return None\n\n@dispatch(Expr, Expr)\ndef _set_mul(x, y):\n    return x*y\n\n@dispatch(Interval, Interval)\ndef _set_mul(x, y):\n    \"\"\"\n    Multiplications in interval arithmetic\n    https://en.wikipedia.org/wiki/Interval_arithmetic\n    \"\"\"\n    # TODO: some intervals containing 0 and oo will fail as 0*oo returns nan.\n    comvals = (\n        (x.start * y.start, bool(x.left_open or y.left_open)),\n        (x.start * y.end, bool(x.left_open or y.right_open)),\n        (x.end * y.start, bool(x.right_open or y.left_open)),\n        (x.end * y.end, bool(x.right_open or y.right_open)),\n    )\n    \n    minval, minopen = min(comvals)\n    maxval, maxopen = max(comvals)\n    return Interval(\n        minval,\n        maxval,\n        minopen,\n        maxopen\n    )\n    return SetExpr(Interval(start, end))\n\n\n@dispatch(Basic, Basic)\ndef _set_div(x, y):\n    return None\n\n@dispatch(Expr, Expr)\ndef _set_div(x, y):\n    return x/y\n\n@dispatch(Set, Set)\ndef _set_div(x, y):\n    return None\n\n@dispatch(Interval, Interval)\ndef _set_div(x, y):\n    \"\"\"\n    Divisions in interval arithmetic\n    https://en.wikipedia.org/wiki/Interval_arithmetic\n    \"\"\"\n    from sympy.sets.setexpr import set_mul\n    from sympy import oo\n    if (y.start*y.end).is_negative:\n        return Interval(-oo, oo)\n    if y.start == 0:\n        s2 = oo\n    else:\n        s2 = 1/y.start\n    if y.end == 0:\n        s1 = -oo\n    else:\n        s1 = 1/y.end\n    return set_mul(x, Interval(s1, s2, y.right_open, y.left_open))\n", "comments": "        multiplications interval arithmetic     https   en wikipedia org wiki interval arithmetic               todo  intervals containing 0 oo fail 0 oo returns nan      comvals   (         (x start   start  bool(x left open left open))          (x start   end  bool(x left open right open))          (x end   start  bool(x right open left open))          (x end   end  bool(x right open right open))      )       todo  handle symbolic intervals     minval  minopen   min(comvals)     maxval  maxopen   max(comvals)     return interval(         minval          maxval          minopen          maxopen     )     return setexpr(interval(start  end))    dispatch(basic  basic) def  set div(x  y)      return none   dispatch(expr  expr) def  set div(x  y)      return x   dispatch(set  set) def  set div(x  y)      return none   dispatch(interval  interval) def  set div(x  y)              divisions interval arithmetic     https   en wikipedia org wiki interval arithmetic            todo  intervals containing 0 oo fail 0 oo returns nan     todo  handle symbolic intervals ", "content": "from sympy.multipledispatch import dispatch, Dispatcher\nfrom sympy.core import Basic, Expr, Function, Add, Mul, Pow, Dummy, Integer\nfrom sympy import Min, Max, Set, sympify, Lambda, symbols, exp, log, S, oo\nfrom sympy.sets import (imageset, Interval, FiniteSet, Union, ImageSet,\n    ProductSet, EmptySet, Intersection)\nfrom sympy.core.function import FunctionClass\nfrom sympy.logic.boolalg import And, Or, Not, true, false\n\n\n_x, _y = symbols(\"x y\")\n\n\n@dispatch(Basic, Basic)\ndef _set_mul(x, y):\n    return None\n\n@dispatch(Set, Set)\ndef _set_mul(x, y):\n    return None\n\n@dispatch(Expr, Expr)\ndef _set_mul(x, y):\n    return x*y\n\n@dispatch(Interval, Interval)\ndef _set_mul(x, y):\n    \"\"\"\n    Multiplications in interval arithmetic\n    https://en.wikipedia.org/wiki/Interval_arithmetic\n    \"\"\"\n    # TODO: some intervals containing 0 and oo will fail as 0*oo returns nan.\n    comvals = (\n        (x.start * y.start, bool(x.left_open or y.left_open)),\n        (x.start * y.end, bool(x.left_open or y.right_open)),\n        (x.end * y.start, bool(x.right_open or y.left_open)),\n        (x.end * y.end, bool(x.right_open or y.right_open)),\n    )\n    # TODO: handle symbolic intervals\n    minval, minopen = min(comvals)\n    maxval, maxopen = max(comvals)\n    return Interval(\n        minval,\n        maxval,\n        minopen,\n        maxopen\n    )\n    return SetExpr(Interval(start, end))\n\n\n@dispatch(Basic, Basic)\ndef _set_div(x, y):\n    return None\n\n@dispatch(Expr, Expr)\ndef _set_div(x, y):\n    return x/y\n\n@dispatch(Set, Set)\ndef _set_div(x, y):\n    return None\n\n@dispatch(Interval, Interval)\ndef _set_div(x, y):\n    \"\"\"\n    Divisions in interval arithmetic\n    https://en.wikipedia.org/wiki/Interval_arithmetic\n    \"\"\"\n    from sympy.sets.setexpr import set_mul\n    from sympy import oo\n    if (y.start*y.end).is_negative:\n        return Interval(-oo, oo)\n    if y.start == 0:\n        s2 = oo\n    else:\n        s2 = 1/y.start\n    if y.end == 0:\n        s1 = -oo\n    else:\n        s1 = 1/y.end\n    return set_mul(x, Interval(s1, s2, y.right_open, y.left_open))\n", "description": "A computer algebra system written in pure Python", "file_name": "mul.py", "id": "0697b71dd56ffef74673a5d84abd009d", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/sets/handlers/mul.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}