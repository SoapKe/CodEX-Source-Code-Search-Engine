{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipa_role\nauthor: Thomas Krahn (@Nosmoht)\nshort_description: Manage FreeIPA role\ndescription:\n- Add, modify and delete a role within FreeIPA server using FreeIPA API\noptions:\n  cn:\n    description:\n    - Role name.\n    - Can not be changed as it is the unique identifier.\n    required: true\n    aliases: ['name']\n  description:\n    description:\n    - A description of this role-group.\n  group:\n    description:\n    - List of group names assign to this role.\n    - If an empty list is passed all assigned groups will be unassigned from the role.\n    - If option is omitted groups will not be checked or changed.\n    - If option is passed all assigned groups that are not passed will be unassigned from the role.\n  host:\n    description:\n    - List of host names to assign.\n    - If an empty list is passed all assigned hosts will be unassigned from the role.\n    - If option is omitted hosts will not be checked or changed.\n    - If option is passed all assigned hosts that are not passed will be unassigned from the role.\n  hostgroup:\n    description:\n    - List of host group names to assign.\n    - If an empty list is passed all assigned host groups will be removed from the role.\n    - If option is omitted host groups will not be checked or changed.\n    - If option is passed all assigned hostgroups that are not passed will be unassigned from the role.\n  privilege:\n    description:\n    - List of privileges granted to the role.\n    - If an empty list is passed all assigned privileges will be removed.\n    - If option is omitted privileges will not be checked or changed.\n    - If option is passed all assigned privileges that are not passed will be removed.\n    version_added: \"2.4\"\n  service:\n    description:\n    - List of service names to assign.\n    - If an empty list is passed all assigned services will be removed from the role.\n    - If option is omitted services will not be checked or changed.\n    - If option is passed all assigned services that are not passed will be removed from the role.\n  state:\n    description: State to ensure\n    default: \"present\"\n    choices: [\"present\", \"absent\"]\n  user:\n    description:\n    - List of user names to assign.\n    - If an empty list is passed all assigned users will be removed from the role.\n    - If option is omitted users will not be checked or changed.\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.3\"\n'''\n\nEXAMPLES = '''\n\n- ipa_role:\n    name: dba\n    description: Database Administrators\n    state: present\n    user:\n    - pinky\n    - brain\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n\n- ipa_role:\n    name: another-role\n    description: Just another role\n    group:\n    - editors\n    host:\n    - host01.example.com\n    hostgroup:\n    - hostgroup01\n    privilege:\n    - Group Administrators\n    - User Administrators\n    service:\n    - service01\n\n\n- ipa_role:\n    name: dba\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n'''\n\nRETURN = '''\nrole:\n  description: Role as returned by IPA API.\n  returned: always\n  type: dict\n'''\n\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass RoleIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(RoleIPAClient, self).__init__(module, host, port, protocol)\n\n    def role_find(self, name):\n        return self._post_json(method='role_find', name=None, item={'all': True, 'cn': name})\n\n    def role_add(self, name, item):\n        return self._post_json(method='role_add', name=name, item=item)\n\n    def role_mod(self, name, item):\n        return self._post_json(method='role_mod', name=name, item=item)\n\n    def role_del(self, name):\n        return self._post_json(method='role_del', name=name)\n\n    def role_add_member(self, name, item):\n        return self._post_json(method='role_add_member', name=name, item=item)\n\n    def role_add_group(self, name, item):\n        return self.role_add_member(name=name, item={'group': item})\n\n    def role_add_host(self, name, item):\n        return self.role_add_member(name=name, item={'host': item})\n\n    def role_add_hostgroup(self, name, item):\n        return self.role_add_member(name=name, item={'hostgroup': item})\n\n    def role_add_service(self, name, item):\n        return self.role_add_member(name=name, item={'service': item})\n\n    def role_add_user(self, name, item):\n        return self.role_add_member(name=name, item={'user': item})\n\n    def role_remove_member(self, name, item):\n        return self._post_json(method='role_remove_member', name=name, item=item)\n\n    def role_remove_group(self, name, item):\n        return self.role_remove_member(name=name, item={'group': item})\n\n    def role_remove_host(self, name, item):\n        return self.role_remove_member(name=name, item={'host': item})\n\n    def role_remove_hostgroup(self, name, item):\n        return self.role_remove_member(name=name, item={'hostgroup': item})\n\n    def role_remove_service(self, name, item):\n        return self.role_remove_member(name=name, item={'service': item})\n\n    def role_remove_user(self, name, item):\n        return self.role_remove_member(name=name, item={'user': item})\n\n    def role_add_privilege(self, name, item):\n        return self._post_json(method='role_add_privilege', name=name, item={'privilege': item})\n\n    def role_remove_privilege(self, name, item):\n        return self._post_json(method='role_remove_privilege', name=name, item={'privilege': item})\n\n\ndef get_role_dict(description=None):\n    data = {}\n    if description is not None:\n        data['description'] = description\n    return data\n\n\ndef get_role_diff(client, ipa_role, module_role):\n    return client.get_diff(ipa_data=ipa_role, module_data=module_role)\n\n\ndef ensure(module, client):\n    state = module.params['state']\n    name = module.params['cn']\n    group = module.params['group']\n    host = module.params['host']\n    hostgroup = module.params['hostgroup']\n    privilege = module.params['privilege']\n    service = module.params['service']\n    user = module.params['user']\n\n    module_role = get_role_dict(description=module.params['description'])\n    ipa_role = client.role_find(name=name)\n\n    changed = False\n    if state == 'present':\n        if not ipa_role:\n            changed = True\n            if not module.check_mode:\n                ipa_role = client.role_add(name=name, item=module_role)\n        else:\n            diff = get_role_diff(client, ipa_role, module_role)\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    data = {}\n                    for key in diff:\n                        data[key] = module_role.get(key)\n                    client.role_mod(name=name, item=data)\n\n        if group is not None:\n            changed = client.modify_if_diff(name, ipa_role.get('member_group', []), group,\n                                            client.role_add_group,\n                                            client.role_remove_group) or changed\n        if host is not None:\n            changed = client.modify_if_diff(name, ipa_role.get('member_host', []), host,\n                                            client.role_add_host,\n                                            client.role_remove_host) or changed\n\n        if hostgroup is not None:\n            changed = client.modify_if_diff(name, ipa_role.get('member_hostgroup', []), hostgroup,\n                                            client.role_add_hostgroup,\n                                            client.role_remove_hostgroup) or changed\n\n        if privilege is not None:\n            changed = client.modify_if_diff(name, ipa_role.get('memberof_privilege', []), privilege,\n                                            client.role_add_privilege,\n                                            client.role_remove_privilege) or changed\n        if service is not None:\n            changed = client.modify_if_diff(name, ipa_role.get('member_service', []), service,\n                                            client.role_add_service,\n                                            client.role_remove_service) or changed\n        if user is not None:\n            changed = client.modify_if_diff(name, ipa_role.get('member_user', []), user,\n                                            client.role_add_user,\n                                            client.role_remove_user) or changed\n\n    else:\n        if ipa_role:\n            changed = True\n            if not module.check_mode:\n                client.role_del(name)\n\n    return changed, client.role_find(name=name)\n\n\ndef main():\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(cn=dict(type='str', required=True, aliases=['name']),\n                         description=dict(type='str'),\n                         group=dict(type='list'),\n                         host=dict(type='list'),\n                         hostgroup=dict(type='list'),\n                         privilege=dict(type='list'),\n                         service=dict(type='list'),\n                         state=dict(type='str', default='present', choices=['present', 'absent']),\n                         user=dict(type='list'))\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True)\n\n    client = RoleIPAClient(module=module,\n                           host=module.params['ipa_host'],\n                           port=module.params['ipa_port'],\n                           protocol=module.params['ipa_prot'])\n\n    try:\n        client.login(username=module.params['ipa_user'],\n                     password=module.params['ipa_pass'])\n        changed, role = ensure(module, client)\n        module.exit_json(changed=changed, role=role)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  ipa role author  thomas krahn ( nosmoht) short description  manage freeipa role description    add  modify delete role within freeipa server using freeipa api options    cn      description        role name        can changed unique identifier      required  true     aliases    name     description      description        a description role group    group      description        list group names assign role        if empty list passed assigned groups unassigned role        if option omitted groups checked changed        if option passed assigned groups passed unassigned role    host      description        list host names assign        if empty list passed assigned hosts unassigned role        if option omitted hosts checked changed        if option passed assigned hosts passed unassigned role    hostgroup      description        list host group names assign        if empty list passed assigned host groups removed role        if option omitted host groups checked changed        if option passed assigned hostgroups passed unassigned role    privilege      description        list privileges granted role        if empty list passed assigned privileges removed        if option omitted privileges checked changed        if option passed assigned privileges passed removed      version added   2 4    service      description        list service names assign        if empty list passed assigned services removed role        if option omitted services checked changed        if option passed assigned services passed removed role    state      description  state ensure     default   present      choices    present    absent     user      description        list user names assign        if empty list passed assigned users removed role        if option omitted users checked changed  extends documentation fragment  ipa documentation version added   2 3       examples         ensure role present   ipa role      name  dba     description  database administrators     state  present     user        pinky       brain     ipa host  ipa example com     ipa user  admin     ipa pass  topsecret    ensure role certain details   ipa role      name  another role     description  just another role     group        editors     host        host01 example com     hostgroup        hostgroup01     privilege        group administrators       user administrators     service        service01    ensure role absent   ipa role      name  dba     state  absent     ipa host  ipa example com     ipa user  admin     ipa pass  topsecret      return       role    description  role returned ipa api    returned  always   type  dict         usr bin python        coding  utf 8        copyright  (c) 2017  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    ensure role present    ensure role certain details    ensure role absent ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipa_role\nauthor: Thomas Krahn (@Nosmoht)\nshort_description: Manage FreeIPA role\ndescription:\n- Add, modify and delete a role within FreeIPA server using FreeIPA API\noptions:\n  cn:\n    description:\n    - Role name.\n    - Can not be changed as it is the unique identifier.\n    required: true\n    aliases: ['name']\n  description:\n    description:\n    - A description of this role-group.\n  group:\n    description:\n    - List of group names assign to this role.\n    - If an empty list is passed all assigned groups will be unassigned from the role.\n    - If option is omitted groups will not be checked or changed.\n    - If option is passed all assigned groups that are not passed will be unassigned from the role.\n  host:\n    description:\n    - List of host names to assign.\n    - If an empty list is passed all assigned hosts will be unassigned from the role.\n    - If option is omitted hosts will not be checked or changed.\n    - If option is passed all assigned hosts that are not passed will be unassigned from the role.\n  hostgroup:\n    description:\n    - List of host group names to assign.\n    - If an empty list is passed all assigned host groups will be removed from the role.\n    - If option is omitted host groups will not be checked or changed.\n    - If option is passed all assigned hostgroups that are not passed will be unassigned from the role.\n  privilege:\n    description:\n    - List of privileges granted to the role.\n    - If an empty list is passed all assigned privileges will be removed.\n    - If option is omitted privileges will not be checked or changed.\n    - If option is passed all assigned privileges that are not passed will be removed.\n    version_added: \"2.4\"\n  service:\n    description:\n    - List of service names to assign.\n    - If an empty list is passed all assigned services will be removed from the role.\n    - If option is omitted services will not be checked or changed.\n    - If option is passed all assigned services that are not passed will be removed from the role.\n  state:\n    description: State to ensure\n    default: \"present\"\n    choices: [\"present\", \"absent\"]\n  user:\n    description:\n    - List of user names to assign.\n    - If an empty list is passed all assigned users will be removed from the role.\n    - If option is omitted users will not be checked or changed.\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.3\"\n'''\n\nEXAMPLES = '''\n# Ensure role is present\n- ipa_role:\n    name: dba\n    description: Database Administrators\n    state: present\n    user:\n    - pinky\n    - brain\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n# Ensure role with certain details\n- ipa_role:\n    name: another-role\n    description: Just another role\n    group:\n    - editors\n    host:\n    - host01.example.com\n    hostgroup:\n    - hostgroup01\n    privilege:\n    - Group Administrators\n    - User Administrators\n    service:\n    - service01\n\n# Ensure role is absent\n- ipa_role:\n    name: dba\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n'''\n\nRETURN = '''\nrole:\n  description: Role as returned by IPA API.\n  returned: always\n  type: dict\n'''\n\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass RoleIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(RoleIPAClient, self).__init__(module, host, port, protocol)\n\n    def role_find(self, name):\n        return self._post_json(method='role_find', name=None, item={'all': True, 'cn': name})\n\n    def role_add(self, name, item):\n        return self._post_json(method='role_add', name=name, item=item)\n\n    def role_mod(self, name, item):\n        return self._post_json(method='role_mod', name=name, item=item)\n\n    def role_del(self, name):\n        return self._post_json(method='role_del', name=name)\n\n    def role_add_member(self, name, item):\n        return self._post_json(method='role_add_member', name=name, item=item)\n\n    def role_add_group(self, name, item):\n        return self.role_add_member(name=name, item={'group': item})\n\n    def role_add_host(self, name, item):\n        return self.role_add_member(name=name, item={'host': item})\n\n    def role_add_hostgroup(self, name, item):\n        return self.role_add_member(name=name, item={'hostgroup': item})\n\n    def role_add_service(self, name, item):\n        return self.role_add_member(name=name, item={'service': item})\n\n    def role_add_user(self, name, item):\n        return self.role_add_member(name=name, item={'user': item})\n\n    def role_remove_member(self, name, item):\n        return self._post_json(method='role_remove_member', name=name, item=item)\n\n    def role_remove_group(self, name, item):\n        return self.role_remove_member(name=name, item={'group': item})\n\n    def role_remove_host(self, name, item):\n        return self.role_remove_member(name=name, item={'host': item})\n\n    def role_remove_hostgroup(self, name, item):\n        return self.role_remove_member(name=name, item={'hostgroup': item})\n\n    def role_remove_service(self, name, item):\n        return self.role_remove_member(name=name, item={'service': item})\n\n    def role_remove_user(self, name, item):\n        return self.role_remove_member(name=name, item={'user': item})\n\n    def role_add_privilege(self, name, item):\n        return self._post_json(method='role_add_privilege', name=name, item={'privilege': item})\n\n    def role_remove_privilege(self, name, item):\n        return self._post_json(method='role_remove_privilege', name=name, item={'privilege': item})\n\n\ndef get_role_dict(description=None):\n    data = {}\n    if description is not None:\n        data['description'] = description\n    return data\n\n\ndef get_role_diff(client, ipa_role, module_role):\n    return client.get_diff(ipa_data=ipa_role, module_data=module_role)\n\n\ndef ensure(module, client):\n    state = module.params['state']\n    name = module.params['cn']\n    group = module.params['group']\n    host = module.params['host']\n    hostgroup = module.params['hostgroup']\n    privilege = module.params['privilege']\n    service = module.params['service']\n    user = module.params['user']\n\n    module_role = get_role_dict(description=module.params['description'])\n    ipa_role = client.role_find(name=name)\n\n    changed = False\n    if state == 'present':\n        if not ipa_role:\n            changed = True\n            if not module.check_mode:\n                ipa_role = client.role_add(name=name, item=module_role)\n        else:\n            diff = get_role_diff(client, ipa_role, module_role)\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    data = {}\n                    for key in diff:\n                        data[key] = module_role.get(key)\n                    client.role_mod(name=name, item=data)\n\n        if group is not None:\n            changed = client.modify_if_diff(name, ipa_role.get('member_group', []), group,\n                                            client.role_add_group,\n                                            client.role_remove_group) or changed\n        if host is not None:\n            changed = client.modify_if_diff(name, ipa_role.get('member_host', []), host,\n                                            client.role_add_host,\n                                            client.role_remove_host) or changed\n\n        if hostgroup is not None:\n            changed = client.modify_if_diff(name, ipa_role.get('member_hostgroup', []), hostgroup,\n                                            client.role_add_hostgroup,\n                                            client.role_remove_hostgroup) or changed\n\n        if privilege is not None:\n            changed = client.modify_if_diff(name, ipa_role.get('memberof_privilege', []), privilege,\n                                            client.role_add_privilege,\n                                            client.role_remove_privilege) or changed\n        if service is not None:\n            changed = client.modify_if_diff(name, ipa_role.get('member_service', []), service,\n                                            client.role_add_service,\n                                            client.role_remove_service) or changed\n        if user is not None:\n            changed = client.modify_if_diff(name, ipa_role.get('member_user', []), user,\n                                            client.role_add_user,\n                                            client.role_remove_user) or changed\n\n    else:\n        if ipa_role:\n            changed = True\n            if not module.check_mode:\n                client.role_del(name)\n\n    return changed, client.role_find(name=name)\n\n\ndef main():\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(cn=dict(type='str', required=True, aliases=['name']),\n                         description=dict(type='str'),\n                         group=dict(type='list'),\n                         host=dict(type='list'),\n                         hostgroup=dict(type='list'),\n                         privilege=dict(type='list'),\n                         service=dict(type='list'),\n                         state=dict(type='str', default='present', choices=['present', 'absent']),\n                         user=dict(type='list'))\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True)\n\n    client = RoleIPAClient(module=module,\n                           host=module.params['ipa_host'],\n                           port=module.params['ipa_port'],\n                           protocol=module.params['ipa_prot'])\n\n    try:\n        client.login(username=module.params['ipa_user'],\n                     password=module.params['ipa_pass'])\n        changed, role = ensure(module, client)\n        module.exit_json(changed=changed, role=role)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "ipa_role.py", "id": "89799b65d8c042c8e7c90cc98d60f5f9", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/identity/ipa/ipa_role.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}