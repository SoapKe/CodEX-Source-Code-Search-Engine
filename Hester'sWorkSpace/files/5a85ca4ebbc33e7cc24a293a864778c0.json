{"author": "deepfakes", "code": " License (Modified BSD)\n Copyright (C) 2011, the scikit-image team All rights reserved.\n\n Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n Neither the name of skimage nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n\nimport numpy as np\n\n\ndef umeyama(src, dst, estimate_scale):\n    \"\"\"Estimate N-D similarity transformation with or without scaling.\n    Parameters\n    ----------\n    src : (M, N) array\n        Source coordinates.\n    dst : (M, N) array\n        Destination coordinates.\n    estimate_scale : bool\n        Whether to estimate scaling factor.\n    Returns\n    -------\n    T : (N + 1, N + 1)\n        The homogeneous similarity transformation matrix. The matrix contains\n        NaN values only if the problem is not well-conditioned.\n    References\n    ----------\n    .. [1] \"Least-squares estimation of transformation parameters between two\n            point patterns\", Shinji Umeyama, PAMI 1991, DOI: 10.1109/34.88573\n    \"\"\"\n\n    num = src.shape[0]\n    dim = src.shape[1]\n\n    \n    src_mean = src.mean(axis=0)\n    dst_mean = dst.mean(axis=0)\n\n    \n    src_demean = src - src_mean\n    dst_demean = dst - dst_mean\n\n    # Eq. (38).\n    A = np.dot(dst_demean.T, src_demean) / num\n\n    # Eq. (39).\n    d = np.ones((dim,), dtype=np.double)\n    if np.linalg.det(A) < 0:\n        d[dim - 1] = -1\n\n    T = np.eye(dim + 1, dtype=np.double)\n\n    U, S, V = np.linalg.svd(A)\n\n    # Eq. (40) and (43).\n    rank = np.linalg.matrix_rank(A)\n    if rank == 0:\n        return np.nan * T\n    elif rank == dim - 1:\n        if np.linalg.det(U) * np.linalg.det(V) > 0:\n            T[:dim, :dim] = np.dot(U, V)\n        else:\n            s = d[dim - 1]\n            d[dim - 1] = -1\n            T[:dim, :dim] = np.dot(U, np.dot(np.diag(d), V))\n            d[dim - 1] = s\n    else:\n        T[:dim, :dim] = np.dot(U, np.dot(np.diag(d), V.T))\n\n    if estimate_scale:\n        # Eq. (41) and (42).\n        scale = 1.0 / src_demean.var(axis=0).sum() * np.dot(S, d)\n    else:\n        scale = 1.0\n\n    T[:dim, dim] = dst_mean - scale * np.dot(T[:dim, :dim], src_mean.T)\n    T[:dim, :dim] *= scale\n\n    return T\n", "comments": "   estimate n d similarity transformation without scaling      parameters                    src   (m  n) array         source coordinates      dst   (m  n) array         destination coordinates      estimate scale   bool         whether estimate scaling factor      returns                 t   (n   1  n   1)         the homogeneous similarity transformation matrix  the matrix contains         nan values problem well conditioned      references                        1   least squares estimation transformation parameters two             point patterns   shinji umeyama  pami 1991  doi  10 1109 34 88573             license (modified bsd)     copyright (c) 2011  scikit image team all rights reserved          redistribution use source binary forms  without modification  permitted provided following conditions met          redistributions source code must retain copyright notice  list conditions following disclaimer      redistributions binary form must reproduce copyright notice  list conditions following disclaimer documentation materials provided distribution      neither name skimage names contributors may used endorse promote products derived software without specific prior written permission      this software is provided by the author   as is   and any express or implied warranties  including  but not limited to  the implied warranties of merchantability and fitness for a particular purpose are disclaimed  in no event shall the author be liable for any direct  indirect  incidental  special  exemplary  or consequential damages (including  but not limited to  procurement of substitute goods or services  loss of use  data  or profits  or business interruption) however caused and on any theory of liability  whether in contract  strict liability  or tort (including negligence or otherwise) arising in any way out of the use of this software  even if advised of the possibility of such damage     umeyama function scikit image skimage transform  geometric py    compute mean src dst     subtract mean src dst     eq  (38)     eq  (39)     eq  (40) (43)     eq  (41) (42)  ", "content": "## License (Modified BSD)\n## Copyright (C) 2011, the scikit-image team All rights reserved.\n##\n## Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n##\n## Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n## Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n## Neither the name of skimage nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n## THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# umeyama function from scikit-image/skimage/transform/_geometric.py\n\nimport numpy as np\n\n\ndef umeyama(src, dst, estimate_scale):\n    \"\"\"Estimate N-D similarity transformation with or without scaling.\n    Parameters\n    ----------\n    src : (M, N) array\n        Source coordinates.\n    dst : (M, N) array\n        Destination coordinates.\n    estimate_scale : bool\n        Whether to estimate scaling factor.\n    Returns\n    -------\n    T : (N + 1, N + 1)\n        The homogeneous similarity transformation matrix. The matrix contains\n        NaN values only if the problem is not well-conditioned.\n    References\n    ----------\n    .. [1] \"Least-squares estimation of transformation parameters between two\n            point patterns\", Shinji Umeyama, PAMI 1991, DOI: 10.1109/34.88573\n    \"\"\"\n\n    num = src.shape[0]\n    dim = src.shape[1]\n\n    # Compute mean of src and dst.\n    src_mean = src.mean(axis=0)\n    dst_mean = dst.mean(axis=0)\n\n    # Subtract mean from src and dst.\n    src_demean = src - src_mean\n    dst_demean = dst - dst_mean\n\n    # Eq. (38).\n    A = np.dot(dst_demean.T, src_demean) / num\n\n    # Eq. (39).\n    d = np.ones((dim,), dtype=np.double)\n    if np.linalg.det(A) < 0:\n        d[dim - 1] = -1\n\n    T = np.eye(dim + 1, dtype=np.double)\n\n    U, S, V = np.linalg.svd(A)\n\n    # Eq. (40) and (43).\n    rank = np.linalg.matrix_rank(A)\n    if rank == 0:\n        return np.nan * T\n    elif rank == dim - 1:\n        if np.linalg.det(U) * np.linalg.det(V) > 0:\n            T[:dim, :dim] = np.dot(U, V)\n        else:\n            s = d[dim - 1]\n            d[dim - 1] = -1\n            T[:dim, :dim] = np.dot(U, np.dot(np.diag(d), V))\n            d[dim - 1] = s\n    else:\n        T[:dim, :dim] = np.dot(U, np.dot(np.diag(d), V.T))\n\n    if estimate_scale:\n        # Eq. (41) and (42).\n        scale = 1.0 / src_demean.var(axis=0).sum() * np.dot(S, d)\n    else:\n        scale = 1.0\n\n    T[:dim, dim] = dst_mean - scale * np.dot(T[:dim, :dim], src_mean.T)\n    T[:dim, :dim] *= scale\n\n    return T\n", "description": "Non official project based on original /r/Deepfakes thread. Many thanks to him!", "file_name": "umeyama.py", "id": "5a85ca4ebbc33e7cc24a293a864778c0", "language": "Python", "project_name": "faceswap", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/deepfakes-faceswap/deepfakes-faceswap-6ff64ef/lib/umeyama.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:27:43Z", "url": "https://github.com/deepfakes/faceswap", "wiki": true}