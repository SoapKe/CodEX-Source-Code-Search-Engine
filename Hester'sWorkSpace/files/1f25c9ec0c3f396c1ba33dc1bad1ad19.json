{"author": "tensorflow", "code": "\"\"\"Function for computing a robust mean estimate in the presence of outliers.\n\nThis is a modified Python implementation of this file:\nhttps://idlastro.gsfc.nasa.gov/ftp/pro/robust/resistant_mean.pro\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport numpy as np\n\n\ndef robust_mean(y, cut):\n  \"\"\"Computes a robust mean estimate in the presence of outliers.\n\n  Args:\n    y: 1D numpy array. Assumed to be normally distributed with outliers.\n    cut: Points more than this number of standard deviations from the median are\n        ignored.\n\n  Returns:\n    mean: A robust estimate of the mean of y.\n    mean_stddev: The standard deviation of the mean.\n    mask: Boolean array with the same length as y. Values corresponding to\n        outliers in y are False. All other values are True.\n  \"\"\"\n  \n  \n  \n  \n  absdev = np.abs(y - np.median(y))\n  sigma = 1.4826 * np.median(absdev)\n\n  \n  \n  \n  \n  if sigma < 1.0e-24:\n    sigma = 1.253 * np.mean(absdev)\n\n  \n  mask = absdev <= cut * sigma\n\n  \n  \n  sigma = np.std(y[mask])\n\n  \n  \n  \n  sc = np.max([cut, 1.0])\n  if sc <= 4.5:\n    sigma /= (-0.15405 + 0.90723 * sc - 0.23584 * sc**2 + 0.020142 * sc**3)\n\n  \n  mask = absdev <= cut * sigma\n\n  \n  \n  sigma = np.std(y[mask])\n\n  \n  sc = np.max([cut, 1.0])\n  if sc <= 4.5:\n    sigma /= (-0.15405 + 0.90723 * sc - 0.23584 * sc**2 + 0.020142 * sc**3)\n\n  \n  mean = np.mean(y[mask])\n  mean_stddev = sigma / np.sqrt(len(y) - 1.0)\n\n  return mean, mean_stddev, mask\n", "comments": "   function computing robust mean estimate presence outliers   this modified python implementation file  https   idlastro gsfc nasa gov ftp pro robust resistant mean pro        future   import absolute import   future   import division   future   import print function  import numpy np   def robust mean(y  cut)       computes robust mean estimate presence outliers     args       1d numpy array  assumed normally distributed outliers      cut  points number standard deviations median         ignored     returns      mean  a robust estimate mean      mean stddev  the standard deviation mean      mask  boolean array length  values corresponding         outliers false  all values true           first  make robust estimate standard deviation  assuming    normally distributed  the conversion factor 1 4826 takes median    absolute deviation standard deviation normal distribution     see  e g  https   www mathworks com help stats mad html     if previous estimate standard deviation using median absolute    deviation zero  fall back robust estimate using mean absolute    deviation  this estimator different conversion factor 1 253     see  e g  https   www mathworks com help stats mad html     identify outliers using estimate standard deviation     now  recompute standard deviation  using sample standard deviation    non outlier points     compensate estimate sigma due trimming away outliers  the    following formula approximation  see    http   w astro berkeley edu  johnjohn idlprocs robust mean pro     identify outliers using second estimate standard deviation     now  recompute standard deviation  using sample standard deviation    non outlier points     compensate estimate sigma due trimming away outliers     final estimate sample mean outliers removed  ", "content": "\"\"\"Function for computing a robust mean estimate in the presence of outliers.\n\nThis is a modified Python implementation of this file:\nhttps://idlastro.gsfc.nasa.gov/ftp/pro/robust/resistant_mean.pro\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport numpy as np\n\n\ndef robust_mean(y, cut):\n  \"\"\"Computes a robust mean estimate in the presence of outliers.\n\n  Args:\n    y: 1D numpy array. Assumed to be normally distributed with outliers.\n    cut: Points more than this number of standard deviations from the median are\n        ignored.\n\n  Returns:\n    mean: A robust estimate of the mean of y.\n    mean_stddev: The standard deviation of the mean.\n    mask: Boolean array with the same length as y. Values corresponding to\n        outliers in y are False. All other values are True.\n  \"\"\"\n  # First, make a robust estimate of the standard deviation of y, assuming y is\n  # normally distributed. The conversion factor of 1.4826 takes the median\n  # absolute deviation to the standard deviation of a normal distribution.\n  # See, e.g. https://www.mathworks.com/help/stats/mad.html.\n  absdev = np.abs(y - np.median(y))\n  sigma = 1.4826 * np.median(absdev)\n\n  # If the previous estimate of the standard deviation using the median absolute\n  # deviation is zero, fall back to a robust estimate using the mean absolute\n  # deviation. This estimator has a different conversion factor of 1.253.\n  # See, e.g. https://www.mathworks.com/help/stats/mad.html.\n  if sigma < 1.0e-24:\n    sigma = 1.253 * np.mean(absdev)\n\n  # Identify outliers using our estimate of the standard deviation of y.\n  mask = absdev <= cut * sigma\n\n  # Now, recompute the standard deviation, using the sample standard deviation\n  # of non-outlier points.\n  sigma = np.std(y[mask])\n\n  # Compensate the estimate of sigma due to trimming away outliers. The\n  # following formula is an approximation, see\n  # http://w.astro.berkeley.edu/~johnjohn/idlprocs/robust_mean.pro.\n  sc = np.max([cut, 1.0])\n  if sc <= 4.5:\n    sigma /= (-0.15405 + 0.90723 * sc - 0.23584 * sc**2 + 0.020142 * sc**3)\n\n  # Identify outliers using our second estimate of the standard deviation of y.\n  mask = absdev <= cut * sigma\n\n  # Now, recompute the standard deviation, using the sample standard deviation\n  # with non-outlier points.\n  sigma = np.std(y[mask])\n\n  # Compensate the estimate of sigma due to trimming away outliers.\n  sc = np.max([cut, 1.0])\n  if sc <= 4.5:\n    sigma /= (-0.15405 + 0.90723 * sc - 0.23584 * sc**2 + 0.020142 * sc**3)\n\n  # Final estimate is the sample mean with outliers removed.\n  mean = np.mean(y[mask])\n  mean_stddev = sigma / np.sqrt(len(y) - 1.0)\n\n  return mean, mean_stddev, mask\n", "description": "Models and examples built with TensorFlow", "file_name": "robust_mean.py", "id": "1f25c9ec0c3f396c1ba33dc1bad1ad19", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/research/astronet/third_party/robust_mean/robust_mean.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}