{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom .xstream import XstreamIE\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    try_get,\n)\n\n\nclass VGTVIE(XstreamIE):\n    IE_DESC = 'VGTV, BTTV, FTV, Aftenposten and Aftonbladet'\n    _GEO_BYPASS = False\n\n    _HOST_TO_APPNAME = {\n        'vgtv.no': 'vgtv',\n        'bt.no/tv': 'bttv',\n        'aftenbladet.no/tv': 'satv',\n        'fvn.no/fvntv': 'fvntv',\n        'aftenposten.no/webtv': 'aptv',\n        'ap.vgtv.no/webtv': 'aptv',\n        'tv.aftonbladet.se/abtv': 'abtv',\n    }\n\n    _APP_NAME_TO_VENDOR = {\n        'vgtv': 'vgtv',\n        'bttv': 'bt',\n        'satv': 'sa',\n        'fvntv': 'fvn',\n        'aptv': 'ap',\n        'abtv': 'ab',\n    }\n\n    _VALID_URL = r % ('|'.join(_HOST_TO_APPNAME.keys()), '|'.join(_APP_NAME_TO_VENDOR.keys()))\n\n    _TESTS = [\n        {\n            \n            'url': 'http://www.vgtv.no/\n            'md5': 'b8be7a234cebb840c0d512c78013e02f',\n            'info_dict': {\n                'id': '84196',\n                'ext': 'mp4',\n                'title': 'Hevnen er s\u00f8t: Episode 10 - Abu',\n                'description': 'md5:e25e4badb5f544b04341e14abdc72234',\n                'thumbnail': r're:^https?://.*\\.jpg',\n                'duration': 648.000,\n                'timestamp': 1404626400,\n                'upload_date': '20140706',\n                'view_count': int,\n            },\n        },\n        {\n            \n            'url': 'http://www.vgtv.no/\n            'info_dict': {\n                'id': '100764',\n                'ext': 'flv',\n                'title': 'OPPTAK: VGTV f\u00f8lger EM-kvalifiseringen',\n                'description': 'md5:3772d9c0dc2dff92a886b60039a7d4d3',\n                'thumbnail': r're:^https?://.*\\.jpg',\n                'duration': 9103.0,\n                'timestamp': 1410113864,\n                'upload_date': '20140907',\n                'view_count': int,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n            'skip': 'Video is no longer available',\n        },\n        {\n            \n            'url': 'http://www.vgtv.no/\n            'info_dict': {\n                'id': '113063',\n                'ext': 'mp4',\n                'title': 'V75 fra Solvalla 30.05.15',\n                'description': 'md5:b3743425765355855f88e096acc93231',\n                'thumbnail': r're:^https?://.*\\.jpg',\n                'duration': 25966,\n                'timestamp': 1432975582,\n                'upload_date': '20150530',\n                'view_count': int,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.aftenposten.no/webtv/\n            'md5': 'fd828cd29774a729bf4d4425fe192972',\n            'info_dict': {\n                'id': '21039',\n                'ext': 'mp4',\n                'title': 'TRAILER: \u00abSWEATSHOP\u00bb - I can\u00b4t take any more',\n                'description': 'md5:21891f2b0dd7ec2f78d84a50e54f8238',\n                'duration': 66,\n                'timestamp': 1417002452,\n                'upload_date': '20141126',\n                'view_count': int,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.bt.no/tv/\n            'only_matching': True,\n        },\n        {\n            'url': 'http://ap.vgtv.no/webtv\n            'only_matching': True,\n        },\n        {\n            \n            'url': 'http://www.vgtv.no/\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv.aftonbladet.se/abtv/articles/36015',\n            'only_matching': True,\n        },\n        {\n            'url': 'abtv:140026',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.vgtv.no/video/84196/hevnen-er-soet-episode-10-abu',\n            'only_matching': True,\n        },\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        host = mobj.group('host')\n        appname = self._HOST_TO_APPNAME[host] if host else mobj.group('appname')\n        vendor = self._APP_NAME_TO_VENDOR[appname]\n\n        data = self._download_json(\n            'http://svp.vg.no/svp/api/v1/%s/assets/%s?appName=%s-website'\n            % (vendor, video_id, appname),\n            video_id, 'Downloading media JSON')\n\n        if data.get('status') == 'inactive':\n            raise ExtractorError(\n                'Video %s is no longer available' % video_id, expected=True)\n\n        info = {\n            'formats': [],\n        }\n        if len(video_id) == 5:\n            if appname == 'bttv':\n                info = self._extract_video_info('btno', video_id)\n\n        streams = data['streamUrls']\n        stream_type = data.get('streamType')\n\n        formats = []\n\n        hls_url = streams.get('hls')\n        if hls_url:\n            formats.extend(self._extract_m3u8_formats(\n                hls_url, video_id, 'mp4', m3u8_id='hls', fatal=False))\n\n        hds_url = streams.get('hds')\n        if hds_url:\n            hdcore_sign = 'hdcore=3.7.0'\n            f4m_formats = self._extract_f4m_formats(\n                hds_url + '?%s' % hdcore_sign, video_id, f4m_id='hds', fatal=False)\n            if f4m_formats:\n                for entry in f4m_formats:\n                    \n                    entry.update({'extra_param_to_segment_url': hdcore_sign})\n                    formats.append(entry)\n\n        mp4_urls = streams.get('pseudostreaming') or []\n        mp4_url = streams.get('mp4')\n        if mp4_url:\n            mp4_urls.append(mp4_url)\n        for mp4_url in mp4_urls:\n            format_info = {\n                'url': mp4_url,\n            }\n            mobj = re.search(r'(\\d+)_(\\d+)_(\\d+)', mp4_url)\n            if mobj:\n                tbr = int(mobj.group(3))\n                format_info.update({\n                    'width': int(mobj.group(1)),\n                    'height': int(mobj.group(2)),\n                    'tbr': tbr,\n                    'format_id': 'mp4-%s' % tbr,\n                })\n            formats.append(format_info)\n\n        info['formats'].extend(formats)\n\n        if not info['formats']:\n            properties = try_get(\n                data, lambda x: x['streamConfiguration']['properties'], list)\n            if properties and 'geoblocked' in properties:\n                raise self.raise_geo_restricted(\n                    countries=[host.rpartition('.')[-1].partition('/')[0].upper()])\n\n        self._sort_formats(info['formats'])\n\n        info.update({\n            'id': video_id,\n            'title': self._live_title(data['title']) if stream_type == 'live' else data['title'],\n            'description': data['description'],\n            'thumbnail': data['images']['main'] + '?t[]=900x506q80',\n            'timestamp': data['published'],\n            'duration': float_or_none(data['duration'], 1000),\n            'view_count': data['displays'],\n            'is_live': True if stream_type == 'live' else False,\n        })\n        return info\n\n\nclass BTArticleIE(InfoExtractor):\n    IE_NAME = 'bt:article'\n    IE_DESC = 'Bergens Tidende Articles'\n    _VALID_URL = r'https?://(?:www\\.)?bt\\.no/(?:[^/]+/)+(?P<id>[^/]+)-\\d+\\.html'\n    _TEST = {\n        'url': 'http://www.bt.no/nyheter/lokalt/Kjemper-for-internatet-1788214.html',\n        'md5': '2acbe8ad129b3469d5ae51b1158878df',\n        'info_dict': {\n            'id': '23199',\n            'ext': 'mp4',\n            'title': 'Alrekstad internat',\n            'description': 'md5:dc81a9056c874fedb62fc48a300dac58',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 191,\n            'timestamp': 1289991323,\n            'upload_date': '20101117',\n            'view_count': int,\n        },\n    }\n\n    def _real_extract(self, url):\n        webpage = self._download_webpage(url, self._match_id(url))\n        video_id = self._search_regex(\n            r'<video[^>]+data-id=\"(\\d+)\"', webpage, 'video id')\n        return self.url_result('bttv:%s' % video_id, 'VGTV')\n\n\nclass BTVestlendingenIE(InfoExtractor):\n    IE_NAME = 'bt:vestlendingen'\n    IE_DESC = 'Bergens Tidende - Vestlendingen'\n    _VALID_URL = r'https?://(?:www\\.)?bt\\.no/spesial/vestlendingen/\n    _TESTS = [{\n        'url': 'http://www.bt.no/spesial/vestlendingen/\n        'md5': 'd7d17e3337dc80de6d3a540aefbe441b',\n        'info_dict': {\n            'id': '86588',\n            'ext': 'mov',\n            'title': 'Otto Wollertsen',\n            'description': 'Vestlendingen Otto Fredrik Wollertsen',\n            'timestamp': 1430473209,\n            'upload_date': '20150501',\n        },\n        'skip': '404 Error',\n    }, {\n        'url': 'http://www.bt.no/spesial/vestlendingen/\n        'md5': 'a2893f8632e96389f4bdf36aa9463ceb',\n        'info_dict': {\n            'id': '86255',\n            'ext': 'mov',\n            'title': 'Du m\u00e5 t\u00e5le \u00e5 fryse og v\u00e6re sulten',\n            'description': 'md5:b8046f4d022d5830ddab04865791d063',\n            'upload_date': '20150321',\n            'timestamp': 1426942023,\n        },\n    }]\n\n    def _real_extract(self, url):\n        return self.url_result('bttv:%s' % self._match_id(url), 'VGTV')\n", "comments": "(?x)\n                    (?:https?://(?:www\\.)?\n                    (?P<host>\n                        %s\n                    )\n                    /?\n                    (?:\n                        (?:\\#!/)?(?:video|live)/|\n                        embed?.*id=|\n                        articles/\n                    )|\n                    (?P<appname>\n                        %s\n                    ):)\n                    (?P<id>\\d+)\n                    \n \n# coding: utf-8\n# streamType: vod\n#!/video/84196/hevnen-er-soet-episode-10-abu',\n# streamType: wasLive\n#!/live/100764/opptak-vgtv-foelger-em-kvalifiseringen',\n# m3u8 download\n# streamType: wasLive\n#!/live/113063/direkte-v75-fra-solvalla',\n# m3u8 download\n#!/video/21039/trailer-sweatshop-i-can-t-take-any-more',\n# m3u8 download\n#!/video/100250/norling-dette-er-forskjellen-paa-1-divisjon-og-eliteserien',\n#!/video/111084/de-nye-bysyklene-lettere-bedre-gir-stoerre-hjul-og-feste-til-mobil',\n# geoblocked\n#!/video/127205/inside-the-mind-of-favela-funk',\n# URLs without the extra param induce an 404 error\n#!/(?P<id>\\d+)'\n#!/86588',\n#!/86255',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom .xstream import XstreamIE\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    try_get,\n)\n\n\nclass VGTVIE(XstreamIE):\n    IE_DESC = 'VGTV, BTTV, FTV, Aftenposten and Aftonbladet'\n    _GEO_BYPASS = False\n\n    _HOST_TO_APPNAME = {\n        'vgtv.no': 'vgtv',\n        'bt.no/tv': 'bttv',\n        'aftenbladet.no/tv': 'satv',\n        'fvn.no/fvntv': 'fvntv',\n        'aftenposten.no/webtv': 'aptv',\n        'ap.vgtv.no/webtv': 'aptv',\n        'tv.aftonbladet.se/abtv': 'abtv',\n    }\n\n    _APP_NAME_TO_VENDOR = {\n        'vgtv': 'vgtv',\n        'bttv': 'bt',\n        'satv': 'sa',\n        'fvntv': 'fvn',\n        'aptv': 'ap',\n        'abtv': 'ab',\n    }\n\n    _VALID_URL = r'''(?x)\n                    (?:https?://(?:www\\.)?\n                    (?P<host>\n                        %s\n                    )\n                    /?\n                    (?:\n                        (?:\\#!/)?(?:video|live)/|\n                        embed?.*id=|\n                        articles/\n                    )|\n                    (?P<appname>\n                        %s\n                    ):)\n                    (?P<id>\\d+)\n                    ''' % ('|'.join(_HOST_TO_APPNAME.keys()), '|'.join(_APP_NAME_TO_VENDOR.keys()))\n\n    _TESTS = [\n        {\n            # streamType: vod\n            'url': 'http://www.vgtv.no/#!/video/84196/hevnen-er-soet-episode-10-abu',\n            'md5': 'b8be7a234cebb840c0d512c78013e02f',\n            'info_dict': {\n                'id': '84196',\n                'ext': 'mp4',\n                'title': 'Hevnen er s\u00f8t: Episode 10 - Abu',\n                'description': 'md5:e25e4badb5f544b04341e14abdc72234',\n                'thumbnail': r're:^https?://.*\\.jpg',\n                'duration': 648.000,\n                'timestamp': 1404626400,\n                'upload_date': '20140706',\n                'view_count': int,\n            },\n        },\n        {\n            # streamType: wasLive\n            'url': 'http://www.vgtv.no/#!/live/100764/opptak-vgtv-foelger-em-kvalifiseringen',\n            'info_dict': {\n                'id': '100764',\n                'ext': 'flv',\n                'title': 'OPPTAK: VGTV f\u00f8lger EM-kvalifiseringen',\n                'description': 'md5:3772d9c0dc2dff92a886b60039a7d4d3',\n                'thumbnail': r're:^https?://.*\\.jpg',\n                'duration': 9103.0,\n                'timestamp': 1410113864,\n                'upload_date': '20140907',\n                'view_count': int,\n            },\n            'params': {\n                # m3u8 download\n                'skip_download': True,\n            },\n            'skip': 'Video is no longer available',\n        },\n        {\n            # streamType: wasLive\n            'url': 'http://www.vgtv.no/#!/live/113063/direkte-v75-fra-solvalla',\n            'info_dict': {\n                'id': '113063',\n                'ext': 'mp4',\n                'title': 'V75 fra Solvalla 30.05.15',\n                'description': 'md5:b3743425765355855f88e096acc93231',\n                'thumbnail': r're:^https?://.*\\.jpg',\n                'duration': 25966,\n                'timestamp': 1432975582,\n                'upload_date': '20150530',\n                'view_count': int,\n            },\n            'params': {\n                # m3u8 download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.aftenposten.no/webtv/#!/video/21039/trailer-sweatshop-i-can-t-take-any-more',\n            'md5': 'fd828cd29774a729bf4d4425fe192972',\n            'info_dict': {\n                'id': '21039',\n                'ext': 'mp4',\n                'title': 'TRAILER: \u00abSWEATSHOP\u00bb - I can\u00b4t take any more',\n                'description': 'md5:21891f2b0dd7ec2f78d84a50e54f8238',\n                'duration': 66,\n                'timestamp': 1417002452,\n                'upload_date': '20141126',\n                'view_count': int,\n            },\n            'params': {\n                # m3u8 download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.bt.no/tv/#!/video/100250/norling-dette-er-forskjellen-paa-1-divisjon-og-eliteserien',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://ap.vgtv.no/webtv#!/video/111084/de-nye-bysyklene-lettere-bedre-gir-stoerre-hjul-og-feste-til-mobil',\n            'only_matching': True,\n        },\n        {\n            # geoblocked\n            'url': 'http://www.vgtv.no/#!/video/127205/inside-the-mind-of-favela-funk',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv.aftonbladet.se/abtv/articles/36015',\n            'only_matching': True,\n        },\n        {\n            'url': 'abtv:140026',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.vgtv.no/video/84196/hevnen-er-soet-episode-10-abu',\n            'only_matching': True,\n        },\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        host = mobj.group('host')\n        appname = self._HOST_TO_APPNAME[host] if host else mobj.group('appname')\n        vendor = self._APP_NAME_TO_VENDOR[appname]\n\n        data = self._download_json(\n            'http://svp.vg.no/svp/api/v1/%s/assets/%s?appName=%s-website'\n            % (vendor, video_id, appname),\n            video_id, 'Downloading media JSON')\n\n        if data.get('status') == 'inactive':\n            raise ExtractorError(\n                'Video %s is no longer available' % video_id, expected=True)\n\n        info = {\n            'formats': [],\n        }\n        if len(video_id) == 5:\n            if appname == 'bttv':\n                info = self._extract_video_info('btno', video_id)\n\n        streams = data['streamUrls']\n        stream_type = data.get('streamType')\n\n        formats = []\n\n        hls_url = streams.get('hls')\n        if hls_url:\n            formats.extend(self._extract_m3u8_formats(\n                hls_url, video_id, 'mp4', m3u8_id='hls', fatal=False))\n\n        hds_url = streams.get('hds')\n        if hds_url:\n            hdcore_sign = 'hdcore=3.7.0'\n            f4m_formats = self._extract_f4m_formats(\n                hds_url + '?%s' % hdcore_sign, video_id, f4m_id='hds', fatal=False)\n            if f4m_formats:\n                for entry in f4m_formats:\n                    # URLs without the extra param induce an 404 error\n                    entry.update({'extra_param_to_segment_url': hdcore_sign})\n                    formats.append(entry)\n\n        mp4_urls = streams.get('pseudostreaming') or []\n        mp4_url = streams.get('mp4')\n        if mp4_url:\n            mp4_urls.append(mp4_url)\n        for mp4_url in mp4_urls:\n            format_info = {\n                'url': mp4_url,\n            }\n            mobj = re.search(r'(\\d+)_(\\d+)_(\\d+)', mp4_url)\n            if mobj:\n                tbr = int(mobj.group(3))\n                format_info.update({\n                    'width': int(mobj.group(1)),\n                    'height': int(mobj.group(2)),\n                    'tbr': tbr,\n                    'format_id': 'mp4-%s' % tbr,\n                })\n            formats.append(format_info)\n\n        info['formats'].extend(formats)\n\n        if not info['formats']:\n            properties = try_get(\n                data, lambda x: x['streamConfiguration']['properties'], list)\n            if properties and 'geoblocked' in properties:\n                raise self.raise_geo_restricted(\n                    countries=[host.rpartition('.')[-1].partition('/')[0].upper()])\n\n        self._sort_formats(info['formats'])\n\n        info.update({\n            'id': video_id,\n            'title': self._live_title(data['title']) if stream_type == 'live' else data['title'],\n            'description': data['description'],\n            'thumbnail': data['images']['main'] + '?t[]=900x506q80',\n            'timestamp': data['published'],\n            'duration': float_or_none(data['duration'], 1000),\n            'view_count': data['displays'],\n            'is_live': True if stream_type == 'live' else False,\n        })\n        return info\n\n\nclass BTArticleIE(InfoExtractor):\n    IE_NAME = 'bt:article'\n    IE_DESC = 'Bergens Tidende Articles'\n    _VALID_URL = r'https?://(?:www\\.)?bt\\.no/(?:[^/]+/)+(?P<id>[^/]+)-\\d+\\.html'\n    _TEST = {\n        'url': 'http://www.bt.no/nyheter/lokalt/Kjemper-for-internatet-1788214.html',\n        'md5': '2acbe8ad129b3469d5ae51b1158878df',\n        'info_dict': {\n            'id': '23199',\n            'ext': 'mp4',\n            'title': 'Alrekstad internat',\n            'description': 'md5:dc81a9056c874fedb62fc48a300dac58',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 191,\n            'timestamp': 1289991323,\n            'upload_date': '20101117',\n            'view_count': int,\n        },\n    }\n\n    def _real_extract(self, url):\n        webpage = self._download_webpage(url, self._match_id(url))\n        video_id = self._search_regex(\n            r'<video[^>]+data-id=\"(\\d+)\"', webpage, 'video id')\n        return self.url_result('bttv:%s' % video_id, 'VGTV')\n\n\nclass BTVestlendingenIE(InfoExtractor):\n    IE_NAME = 'bt:vestlendingen'\n    IE_DESC = 'Bergens Tidende - Vestlendingen'\n    _VALID_URL = r'https?://(?:www\\.)?bt\\.no/spesial/vestlendingen/#!/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.bt.no/spesial/vestlendingen/#!/86588',\n        'md5': 'd7d17e3337dc80de6d3a540aefbe441b',\n        'info_dict': {\n            'id': '86588',\n            'ext': 'mov',\n            'title': 'Otto Wollertsen',\n            'description': 'Vestlendingen Otto Fredrik Wollertsen',\n            'timestamp': 1430473209,\n            'upload_date': '20150501',\n        },\n        'skip': '404 Error',\n    }, {\n        'url': 'http://www.bt.no/spesial/vestlendingen/#!/86255',\n        'md5': 'a2893f8632e96389f4bdf36aa9463ceb',\n        'info_dict': {\n            'id': '86255',\n            'ext': 'mov',\n            'title': 'Du m\u00e5 t\u00e5le \u00e5 fryse og v\u00e6re sulten',\n            'description': 'md5:b8046f4d022d5830ddab04865791d063',\n            'upload_date': '20150321',\n            'timestamp': 1426942023,\n        },\n    }]\n\n    def _real_extract(self, url):\n        return self.url_result('bttv:%s' % self._match_id(url), 'VGTV')\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vgtv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vgtv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}