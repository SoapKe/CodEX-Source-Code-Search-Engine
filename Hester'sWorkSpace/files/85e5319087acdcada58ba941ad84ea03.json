{"author": "ansible", "code": "\n\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: oneandone_public_ip\nshort_description: Configure 1&1 public IPs.\ndescription:\n     - Create, update, and remove public IPs.\n       This module has a dependency on 1and1 >= 1.0\nversion_added: \"2.5\"\noptions:\n  state:\n    description:\n      - Define a public ip state to create, remove, or update.\n    required: false\n    default: 'present'\n    choices: [ \"present\", \"absent\", \"update\" ]\n  auth_token:\n    description:\n      - Authenticating API token provided by 1&1.\n    required: true\n  api_url:\n    description:\n      - Custom API URL. Overrides the\n        ONEANDONE_API_URL environement variable.\n    required: false\n  reverse_dns:\n    description:\n      - Reverse DNS name. maxLength=256\n    required: false\n  datacenter:\n    description:\n      - ID of the datacenter where the IP will be created (only for unassigned IPs).\n    required: false\n  type:\n    description:\n      - Type of IP. Currently, only IPV4 is available.\n    choices: [\"IPV4\", \"IPV6\"]\n    default: 'IPV4'\n    required: false\n  public_ip_id:\n    description:\n      - The ID of the public IP used with update and delete states.\n    required: true\n  wait:\n    description:\n      - wait for the instance to be in state 'running' before returning\n    required: false\n    default: \"yes\"\n    choices: [ \"yes\", \"no\" ]\n  wait_timeout:\n    description:\n      - how long before wait gives up, in seconds\n    default: 600\n  wait_interval:\n    description:\n      - Defines the number of seconds to wait when using the _wait_for methods\n    default: 5\n\nrequirements:\n     - \"1and1\"\n     - \"python >= 2.6\"\n\nauthor:\n  - Amel Ajdinovic (@aajdinov)\n  - Ethan Devenport (@edevenport)\n'''\n\nEXAMPLES = '''\n\n Create a public IP.\n\n- oneandone_public_ip:\n    auth_token: oneandone_private_api_key\n    reverse_dns: example.com\n    datacenter: US\n    type: IPV4\n\n Update a public IP.\n\n- oneandone_public_ip:\n    auth_token: oneandone_private_api_key\n    public_ip_id: public ip id\n    reverse_dns: secondexample.com\n    state: update\n\n\n Delete a public IP\n\n- oneandone_public_ip:\n    auth_token: oneandone_private_api_key\n    public_ip_id: public ip id\n    state: absent\n\n'''\n\nRETURN = '''\npublic_ip:\n    description: Information about the public ip that was processed\n    type: dict\n    sample: '{\"id\": \"F77CC589EBC120905B4F4719217BFF6D\", \"ip\": \"10.5.132.106\"}'\n    returned: always\n'''\n\nimport os\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.oneandone import (\n    get_datacenter,\n    get_public_ip,\n    OneAndOneResources,\n    wait_for_resource_creation_completion\n)\n\nHAS_ONEANDONE_SDK = True\n\ntry:\n    import oneandone.client\nexcept ImportError:\n    HAS_ONEANDONE_SDK = False\n\nDATACENTERS = ['US', 'ES', 'DE', 'GB']\n\nTYPES = ['IPV4', 'IPV6']\n\n\ndef _check_mode(module, result):\n    if module.check_mode:\n        module.exit_json(\n            changed=result\n        )\n\n\ndef create_public_ip(module, oneandone_conn):\n    \"\"\"\n    Create new public IP\n\n    module : AnsibleModule object\n    oneandone_conn: authenticated oneandone object\n\n    Returns a dictionary containing a 'changed' attribute indicating whether\n    any public IP was added.\n    \"\"\"\n    reverse_dns = module.params.get('reverse_dns')\n    datacenter = module.params.get('datacenter')\n    ip_type = module.params.get('type')\n    wait = module.params.get('wait')\n    wait_timeout = module.params.get('wait_timeout')\n    wait_interval = module.params.get('wait_interval')\n\n    if datacenter is not None:\n        datacenter_id = get_datacenter(oneandone_conn, datacenter)\n        if datacenter_id is None:\n            _check_mode(module, False)\n            module.fail_json(\n                msg='datacenter %s not found.' % datacenter)\n\n    try:\n        _check_mode(module, True)\n        public_ip = oneandone_conn.create_public_ip(\n            reverse_dns=reverse_dns,\n            ip_type=ip_type,\n            datacenter_id=datacenter_id)\n\n        if wait:\n            wait_for_resource_creation_completion(oneandone_conn,\n                                                  OneAndOneResources.public_ip,\n                                                  public_ip['id'],\n                                                  wait_timeout,\n                                                  wait_interval)\n            public_ip = oneandone_conn.get_public_ip(public_ip['id'])\n\n        changed = True if public_ip else False\n\n        return (changed, public_ip)\n    except Exception as e:\n        module.fail_json(msg=str(e))\n\n\ndef update_public_ip(module, oneandone_conn):\n    \"\"\"\n    Update a public IP\n\n    module : AnsibleModule object\n    oneandone_conn: authenticated oneandone object\n\n    Returns a dictionary containing a 'changed' attribute indicating whether\n    any public IP was changed.\n    \"\"\"\n    reverse_dns = module.params.get('reverse_dns')\n    public_ip_id = module.params.get('public_ip_id')\n    wait = module.params.get('wait')\n    wait_timeout = module.params.get('wait_timeout')\n    wait_interval = module.params.get('wait_interval')\n\n    public_ip = get_public_ip(oneandone_conn, public_ip_id, True)\n    if public_ip is None:\n        _check_mode(module, False)\n        module.fail_json(\n            msg='public IP %s not found.' % public_ip_id)\n\n    try:\n        _check_mode(module, True)\n        public_ip = oneandone_conn.modify_public_ip(\n            ip_id=public_ip['id'],\n            reverse_dns=reverse_dns)\n\n        if wait:\n            wait_for_resource_creation_completion(oneandone_conn,\n                                                  OneAndOneResources.public_ip,\n                                                  public_ip['id'],\n                                                  wait_timeout,\n                                                  wait_interval)\n            public_ip = oneandone_conn.get_public_ip(public_ip['id'])\n\n        changed = True if public_ip else False\n\n        return (changed, public_ip)\n    except Exception as e:\n        module.fail_json(msg=str(e))\n\n\ndef delete_public_ip(module, oneandone_conn):\n    \"\"\"\n    Delete a public IP\n\n    module : AnsibleModule object\n    oneandone_conn: authenticated oneandone object\n\n    Returns a dictionary containing a 'changed' attribute indicating whether\n    any public IP was deleted.\n    \"\"\"\n    public_ip_id = module.params.get('public_ip_id')\n\n    public_ip = get_public_ip(oneandone_conn, public_ip_id, True)\n    if public_ip is None:\n        _check_mode(module, False)\n        module.fail_json(\n            msg='public IP %s not found.' % public_ip_id)\n\n    try:\n        _check_mode(module, True)\n        deleted_public_ip = oneandone_conn.delete_public_ip(\n            ip_id=public_ip['id'])\n\n        changed = True if deleted_public_ip else False\n\n        return (changed, {\n            'id': public_ip['id']\n        })\n    except Exception as e:\n        module.fail_json(msg=str(e))\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            auth_token=dict(\n                type='str',\n                default=os.environ.get('ONEANDONE_AUTH_TOKEN')),\n            api_url=dict(\n                type='str',\n                default=os.environ.get('ONEANDONE_API_URL')),\n            public_ip_id=dict(type='str'),\n            reverse_dns=dict(type='str'),\n            datacenter=dict(\n                choices=DATACENTERS,\n                default='US'),\n            type=dict(\n                choices=TYPES,\n                default='IPV4'),\n            wait=dict(type='bool', default=True),\n            wait_timeout=dict(type='int', default=600),\n            wait_interval=dict(type='int', default=5),\n            state=dict(type='str', default='present', choices=['present', 'absent', 'update']),\n        ),\n        supports_check_mode=True\n    )\n\n    if not HAS_ONEANDONE_SDK:\n        module.fail_json(msg='1and1 required for this module')\n\n    if not module.params.get('auth_token'):\n        module.fail_json(\n            msg='auth_token parameter is required.')\n\n    if not module.params.get('api_url'):\n        oneandone_conn = oneandone.client.OneAndOneService(\n            api_token=module.params.get('auth_token'))\n    else:\n        oneandone_conn = oneandone.client.OneAndOneService(\n            api_token=module.params.get('auth_token'), api_url=module.params.get('api_url'))\n\n    state = module.params.get('state')\n\n    if state == 'absent':\n        if not module.params.get('public_ip_id'):\n            module.fail_json(\n                msg=\"'public_ip_id' parameter is required to delete a public ip.\")\n        try:\n            (changed, public_ip) = delete_public_ip(module, oneandone_conn)\n        except Exception as e:\n            module.fail_json(msg=str(e))\n    elif state == 'update':\n        if not module.params.get('public_ip_id'):\n            module.fail_json(\n                msg=\"'public_ip_id' parameter is required to update a public ip.\")\n        try:\n            (changed, public_ip) = update_public_ip(module, oneandone_conn)\n        except Exception as e:\n            module.fail_json(msg=str(e))\n\n    elif state == 'present':\n        try:\n            (changed, public_ip) = create_public_ip(module, oneandone_conn)\n        except Exception as e:\n            module.fail_json(msg=str(e))\n\n    module.exit_json(changed=changed, public_ip=public_ip)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        create new public ip      module   ansiblemodule object     oneandone conn  authenticated oneandone object      returns dictionary containing  changed  attribute indicating whether     public ip added              reverse dns   module params get( reverse dns )     datacenter   module params get( datacenter )     ip type   module params get( type )     wait   module params get( wait )     wait timeout   module params get( wait timeout )     wait interval   module params get( wait interval )      datacenter none          datacenter id   get datacenter(oneandone conn  datacenter)         datacenter id none               check mode(module  false)             module fail json(                 msg  datacenter  found     datacenter)      try           check mode(module  true)         public ip   oneandone conn create public ip(             reverse dns reverse dns              ip type ip type              datacenter id datacenter id)          wait              wait resource creation completion(oneandone conn                                                    oneandoneresources public ip                                                    public ip  id                                                      wait timeout                                                    wait interval)             public ip   oneandone conn get public ip(public ip  id  )          changed   true public ip else false          return (changed  public ip)     except exception e          module fail json(msg str(e))   def update public ip(module  oneandone conn)              update public ip      module   ansiblemodule object     oneandone conn  authenticated oneandone object      returns dictionary containing  changed  attribute indicating whether     public ip changed              reverse dns   module params get( reverse dns )     public ip id   module params get( public ip id )     wait   module params get( wait )     wait timeout   module params get( wait timeout )     wait interval   module params get( wait interval )      public ip   get public ip(oneandone conn  public ip id  true)     public ip none           check mode(module  false)         module fail json(             msg  public ip  found     public ip id)      try           check mode(module  true)         public ip   oneandone conn modify public ip(             ip id public ip  id                reverse dns reverse dns)          wait              wait resource creation completion(oneandone conn                                                    oneandoneresources public ip                                                    public ip  id                                                      wait timeout                                                    wait interval)             public ip   oneandone conn get public ip(public ip  id  )          changed   true public ip else false          return (changed  public ip)     except exception e          module fail json(msg str(e))   def delete public ip(module  oneandone conn)              delete public ip      module   ansiblemodule object     oneandone conn  authenticated oneandone object      returns dictionary containing  changed  attribute indicating whether     public ip deleted                   module  oneandone public ip short description  configure 1 1 public ips  description         create  update  remove public ips         this module dependency 1and1    1 0 version added   2 5  options    state      description          define public ip state create  remove  update      required  false     default   present      choices     present    absent    update      auth token      description          authenticating api token provided 1 1      required  true   api url      description          custom api url  overrides         oneandone api url environement variable      required  false   reverse dns      description          reverse dns name  maxlength 256     required  false   datacenter      description          id datacenter ip created (only unassigned ips)      required  false   type      description          type ip  currently  ipv4 available      choices    ipv4    ipv6       default   ipv4      required  false   public ip id      description          the id public ip used update delete states      required  true   wait      description          wait instance state  running  returning     required  false     default   yes      choices     yes         wait timeout      description          long wait gives  seconds     default  600   wait interval      description          defines number seconds wait using  wait methods     default  5  requirements          1and1          python    2 6   author      amel ajdinovic ( aajdinov)     ethan devenport ( edevenport)      examples          create public ip     oneandone public ip      auth token  oneandone private api key     reverse dns  example com     datacenter  us     type  ipv4    update public ip     oneandone public ip      auth token  oneandone private api key     public ip id  public ip id     reverse dns  secondexample com     state  update     delete public ip    oneandone public ip      auth token  oneandone private api key     public ip id  public ip id     state  absent       return       public ip      description  information public ip processed     type  dict     sample     id    f77cc589ebc120905b4f4719217bff6d    ip    10 5 132 106        returned  always         usr bin python    this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       create public ip     update public ip     delete public ip ", "content": "#!/usr/bin/python\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: oneandone_public_ip\nshort_description: Configure 1&1 public IPs.\ndescription:\n     - Create, update, and remove public IPs.\n       This module has a dependency on 1and1 >= 1.0\nversion_added: \"2.5\"\noptions:\n  state:\n    description:\n      - Define a public ip state to create, remove, or update.\n    required: false\n    default: 'present'\n    choices: [ \"present\", \"absent\", \"update\" ]\n  auth_token:\n    description:\n      - Authenticating API token provided by 1&1.\n    required: true\n  api_url:\n    description:\n      - Custom API URL. Overrides the\n        ONEANDONE_API_URL environement variable.\n    required: false\n  reverse_dns:\n    description:\n      - Reverse DNS name. maxLength=256\n    required: false\n  datacenter:\n    description:\n      - ID of the datacenter where the IP will be created (only for unassigned IPs).\n    required: false\n  type:\n    description:\n      - Type of IP. Currently, only IPV4 is available.\n    choices: [\"IPV4\", \"IPV6\"]\n    default: 'IPV4'\n    required: false\n  public_ip_id:\n    description:\n      - The ID of the public IP used with update and delete states.\n    required: true\n  wait:\n    description:\n      - wait for the instance to be in state 'running' before returning\n    required: false\n    default: \"yes\"\n    choices: [ \"yes\", \"no\" ]\n  wait_timeout:\n    description:\n      - how long before wait gives up, in seconds\n    default: 600\n  wait_interval:\n    description:\n      - Defines the number of seconds to wait when using the _wait_for methods\n    default: 5\n\nrequirements:\n     - \"1and1\"\n     - \"python >= 2.6\"\n\nauthor:\n  - Amel Ajdinovic (@aajdinov)\n  - Ethan Devenport (@edevenport)\n'''\n\nEXAMPLES = '''\n\n# Create a public IP.\n\n- oneandone_public_ip:\n    auth_token: oneandone_private_api_key\n    reverse_dns: example.com\n    datacenter: US\n    type: IPV4\n\n# Update a public IP.\n\n- oneandone_public_ip:\n    auth_token: oneandone_private_api_key\n    public_ip_id: public ip id\n    reverse_dns: secondexample.com\n    state: update\n\n\n# Delete a public IP\n\n- oneandone_public_ip:\n    auth_token: oneandone_private_api_key\n    public_ip_id: public ip id\n    state: absent\n\n'''\n\nRETURN = '''\npublic_ip:\n    description: Information about the public ip that was processed\n    type: dict\n    sample: '{\"id\": \"F77CC589EBC120905B4F4719217BFF6D\", \"ip\": \"10.5.132.106\"}'\n    returned: always\n'''\n\nimport os\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.oneandone import (\n    get_datacenter,\n    get_public_ip,\n    OneAndOneResources,\n    wait_for_resource_creation_completion\n)\n\nHAS_ONEANDONE_SDK = True\n\ntry:\n    import oneandone.client\nexcept ImportError:\n    HAS_ONEANDONE_SDK = False\n\nDATACENTERS = ['US', 'ES', 'DE', 'GB']\n\nTYPES = ['IPV4', 'IPV6']\n\n\ndef _check_mode(module, result):\n    if module.check_mode:\n        module.exit_json(\n            changed=result\n        )\n\n\ndef create_public_ip(module, oneandone_conn):\n    \"\"\"\n    Create new public IP\n\n    module : AnsibleModule object\n    oneandone_conn: authenticated oneandone object\n\n    Returns a dictionary containing a 'changed' attribute indicating whether\n    any public IP was added.\n    \"\"\"\n    reverse_dns = module.params.get('reverse_dns')\n    datacenter = module.params.get('datacenter')\n    ip_type = module.params.get('type')\n    wait = module.params.get('wait')\n    wait_timeout = module.params.get('wait_timeout')\n    wait_interval = module.params.get('wait_interval')\n\n    if datacenter is not None:\n        datacenter_id = get_datacenter(oneandone_conn, datacenter)\n        if datacenter_id is None:\n            _check_mode(module, False)\n            module.fail_json(\n                msg='datacenter %s not found.' % datacenter)\n\n    try:\n        _check_mode(module, True)\n        public_ip = oneandone_conn.create_public_ip(\n            reverse_dns=reverse_dns,\n            ip_type=ip_type,\n            datacenter_id=datacenter_id)\n\n        if wait:\n            wait_for_resource_creation_completion(oneandone_conn,\n                                                  OneAndOneResources.public_ip,\n                                                  public_ip['id'],\n                                                  wait_timeout,\n                                                  wait_interval)\n            public_ip = oneandone_conn.get_public_ip(public_ip['id'])\n\n        changed = True if public_ip else False\n\n        return (changed, public_ip)\n    except Exception as e:\n        module.fail_json(msg=str(e))\n\n\ndef update_public_ip(module, oneandone_conn):\n    \"\"\"\n    Update a public IP\n\n    module : AnsibleModule object\n    oneandone_conn: authenticated oneandone object\n\n    Returns a dictionary containing a 'changed' attribute indicating whether\n    any public IP was changed.\n    \"\"\"\n    reverse_dns = module.params.get('reverse_dns')\n    public_ip_id = module.params.get('public_ip_id')\n    wait = module.params.get('wait')\n    wait_timeout = module.params.get('wait_timeout')\n    wait_interval = module.params.get('wait_interval')\n\n    public_ip = get_public_ip(oneandone_conn, public_ip_id, True)\n    if public_ip is None:\n        _check_mode(module, False)\n        module.fail_json(\n            msg='public IP %s not found.' % public_ip_id)\n\n    try:\n        _check_mode(module, True)\n        public_ip = oneandone_conn.modify_public_ip(\n            ip_id=public_ip['id'],\n            reverse_dns=reverse_dns)\n\n        if wait:\n            wait_for_resource_creation_completion(oneandone_conn,\n                                                  OneAndOneResources.public_ip,\n                                                  public_ip['id'],\n                                                  wait_timeout,\n                                                  wait_interval)\n            public_ip = oneandone_conn.get_public_ip(public_ip['id'])\n\n        changed = True if public_ip else False\n\n        return (changed, public_ip)\n    except Exception as e:\n        module.fail_json(msg=str(e))\n\n\ndef delete_public_ip(module, oneandone_conn):\n    \"\"\"\n    Delete a public IP\n\n    module : AnsibleModule object\n    oneandone_conn: authenticated oneandone object\n\n    Returns a dictionary containing a 'changed' attribute indicating whether\n    any public IP was deleted.\n    \"\"\"\n    public_ip_id = module.params.get('public_ip_id')\n\n    public_ip = get_public_ip(oneandone_conn, public_ip_id, True)\n    if public_ip is None:\n        _check_mode(module, False)\n        module.fail_json(\n            msg='public IP %s not found.' % public_ip_id)\n\n    try:\n        _check_mode(module, True)\n        deleted_public_ip = oneandone_conn.delete_public_ip(\n            ip_id=public_ip['id'])\n\n        changed = True if deleted_public_ip else False\n\n        return (changed, {\n            'id': public_ip['id']\n        })\n    except Exception as e:\n        module.fail_json(msg=str(e))\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            auth_token=dict(\n                type='str',\n                default=os.environ.get('ONEANDONE_AUTH_TOKEN')),\n            api_url=dict(\n                type='str',\n                default=os.environ.get('ONEANDONE_API_URL')),\n            public_ip_id=dict(type='str'),\n            reverse_dns=dict(type='str'),\n            datacenter=dict(\n                choices=DATACENTERS,\n                default='US'),\n            type=dict(\n                choices=TYPES,\n                default='IPV4'),\n            wait=dict(type='bool', default=True),\n            wait_timeout=dict(type='int', default=600),\n            wait_interval=dict(type='int', default=5),\n            state=dict(type='str', default='present', choices=['present', 'absent', 'update']),\n        ),\n        supports_check_mode=True\n    )\n\n    if not HAS_ONEANDONE_SDK:\n        module.fail_json(msg='1and1 required for this module')\n\n    if not module.params.get('auth_token'):\n        module.fail_json(\n            msg='auth_token parameter is required.')\n\n    if not module.params.get('api_url'):\n        oneandone_conn = oneandone.client.OneAndOneService(\n            api_token=module.params.get('auth_token'))\n    else:\n        oneandone_conn = oneandone.client.OneAndOneService(\n            api_token=module.params.get('auth_token'), api_url=module.params.get('api_url'))\n\n    state = module.params.get('state')\n\n    if state == 'absent':\n        if not module.params.get('public_ip_id'):\n            module.fail_json(\n                msg=\"'public_ip_id' parameter is required to delete a public ip.\")\n        try:\n            (changed, public_ip) = delete_public_ip(module, oneandone_conn)\n        except Exception as e:\n            module.fail_json(msg=str(e))\n    elif state == 'update':\n        if not module.params.get('public_ip_id'):\n            module.fail_json(\n                msg=\"'public_ip_id' parameter is required to update a public ip.\")\n        try:\n            (changed, public_ip) = update_public_ip(module, oneandone_conn)\n        except Exception as e:\n            module.fail_json(msg=str(e))\n\n    elif state == 'present':\n        try:\n            (changed, public_ip) = create_public_ip(module, oneandone_conn)\n        except Exception as e:\n            module.fail_json(msg=str(e))\n\n    module.exit_json(changed=changed, public_ip=public_ip)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "oneandone_public_ip.py", "id": "85e5319087acdcada58ba941ad84ea03", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/oneandone/oneandone_public_ip.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}