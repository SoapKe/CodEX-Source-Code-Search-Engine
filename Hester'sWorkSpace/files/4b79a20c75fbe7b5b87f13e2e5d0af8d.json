{"author": "jakubroztocil", "code": "import sys\ntry:\n    import curses\nexcept ImportError:\n    curses = None  \n\nfrom httpie.compat import is_windows\nfrom httpie.config import DEFAULT_CONFIG_DIR, Config\n\nfrom httpie.utils import repr_dict_nice\n\n\nclass Environment(object):\n    \n        assert all(hasattr(type(self), attr) for attr in kwargs.keys())\n        self.__dict__.update(**kwargs)\n\n        \n        if self.stdin_encoding is None:\n            self.stdin_encoding = getattr(\n                self.stdin, 'encoding', None) or 'utf8'\n        if self.stdout_encoding is None:\n            actual_stdout = self.stdout\n            if is_windows:\n                \n                from colorama import AnsiToWin32\n                if isinstance(self.stdout, AnsiToWin32):\n                    actual_stdout = self.stdout.wrapped\n            self.stdout_encoding = getattr(\n                actual_stdout, 'encoding', None) or 'utf8'\n\n    @property\n    def config(self):\n        if not hasattr(self, '_config'):\n            self._config = Config(directory=self.config_dir)\n            if self._config.is_new():\n                self._config.save()\n            else:\n                self._config.load()\n        return self._config\n\n    def __str__(self):\n        defaults = dict(type(self).__dict__)\n        actual = dict(defaults)\n        actual.update(self.__dict__)\n        actual['config'] = self.config\n        return repr_dict_nice(dict(\n            (key, value)\n            for key, value in actual.items()\n            if not key.startswith('_'))\n        )\n\n    def __repr__(self):\n        return '<{0} {1}>'.format(type(self).__name__, str(self))\n", "comments": "\n    Information about the execution context\n    (standard streams, config directory, etc).\n\n    By default, it represents the actual environment.\n    All of the attributes can be overwritten though, which\n    is used by the test suite to simulate various scenarios.\n\n    \"\"\"\n    is_windows = is_windows\n    config_dir = DEFAULT_CONFIG_DIR\n    stdin = sys.stdin\n    stdin_isatty = stdin.isatty()\n    stdin_encoding = None\n    stdout = sys.stdout\n    stdout_isatty = stdout.isatty()\n    stdout_encoding = None\n    stderr = sys.stderr\n    stderr_isatty = stderr.isatty()\n    colors = 256\n    if not is_windows:\n        if curses:\n            try:\n                curses.setupterm()\n                colors = curses.tigetnum('colors')\n            except curses.error:\n                pass\n    else:\n        # noinspection PyUnresolvedReferences\n        import colorama.initialise\n        stdout = colorama.initialise.wrap_stream(\n            stdout, convert=None, strip=None,\n            autoreset=True, wrap=True\n        )\n        stderr = colorama.initialise.wrap_stream(\n            stderr, convert=None, strip=None,\n            autoreset=True, wrap=True\n        )\n        del colorama\n\n    def __init__(self, **kwargs):\n        \"\"\"\n        Use keyword arguments to overwrite\n        any of the class attributes for this instance.\n\n        \n \n# Compiled w/o curses\n# Keyword arguments > stream.encoding > default utf8\n# noinspection PyUnresolvedReferences\n", "content": "import sys\ntry:\n    import curses\nexcept ImportError:\n    curses = None  # Compiled w/o curses\n\nfrom httpie.compat import is_windows\nfrom httpie.config import DEFAULT_CONFIG_DIR, Config\n\nfrom httpie.utils import repr_dict_nice\n\n\nclass Environment(object):\n    \"\"\"\n    Information about the execution context\n    (standard streams, config directory, etc).\n\n    By default, it represents the actual environment.\n    All of the attributes can be overwritten though, which\n    is used by the test suite to simulate various scenarios.\n\n    \"\"\"\n    is_windows = is_windows\n    config_dir = DEFAULT_CONFIG_DIR\n    stdin = sys.stdin\n    stdin_isatty = stdin.isatty()\n    stdin_encoding = None\n    stdout = sys.stdout\n    stdout_isatty = stdout.isatty()\n    stdout_encoding = None\n    stderr = sys.stderr\n    stderr_isatty = stderr.isatty()\n    colors = 256\n    if not is_windows:\n        if curses:\n            try:\n                curses.setupterm()\n                colors = curses.tigetnum('colors')\n            except curses.error:\n                pass\n    else:\n        # noinspection PyUnresolvedReferences\n        import colorama.initialise\n        stdout = colorama.initialise.wrap_stream(\n            stdout, convert=None, strip=None,\n            autoreset=True, wrap=True\n        )\n        stderr = colorama.initialise.wrap_stream(\n            stderr, convert=None, strip=None,\n            autoreset=True, wrap=True\n        )\n        del colorama\n\n    def __init__(self, **kwargs):\n        \"\"\"\n        Use keyword arguments to overwrite\n        any of the class attributes for this instance.\n\n        \"\"\"\n        assert all(hasattr(type(self), attr) for attr in kwargs.keys())\n        self.__dict__.update(**kwargs)\n\n        # Keyword arguments > stream.encoding > default utf8\n        if self.stdin_encoding is None:\n            self.stdin_encoding = getattr(\n                self.stdin, 'encoding', None) or 'utf8'\n        if self.stdout_encoding is None:\n            actual_stdout = self.stdout\n            if is_windows:\n                # noinspection PyUnresolvedReferences\n                from colorama import AnsiToWin32\n                if isinstance(self.stdout, AnsiToWin32):\n                    actual_stdout = self.stdout.wrapped\n            self.stdout_encoding = getattr(\n                actual_stdout, 'encoding', None) or 'utf8'\n\n    @property\n    def config(self):\n        if not hasattr(self, '_config'):\n            self._config = Config(directory=self.config_dir)\n            if self._config.is_new():\n                self._config.save()\n            else:\n                self._config.load()\n        return self._config\n\n    def __str__(self):\n        defaults = dict(type(self).__dict__)\n        actual = dict(defaults)\n        actual.update(self.__dict__)\n        actual['config'] = self.config\n        return repr_dict_nice(dict(\n            (key, value)\n            for key, value in actual.items()\n            if not key.startswith('_'))\n        )\n\n    def __repr__(self):\n        return '<{0} {1}>'.format(type(self).__name__, str(self))\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "context.py", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil_httpie/jakubroztocil-httpie-0f4dce9/httpie/context.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:20:06Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}