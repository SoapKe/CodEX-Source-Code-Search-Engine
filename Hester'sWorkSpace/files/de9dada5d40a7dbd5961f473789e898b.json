{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_b64decode\nfrom ..utils import (\n    ExtractorError,\n    HEADRequest,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass HotNewHipHopIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hotnewhiphop\\.com/.*\\.(?P<id>.*)\\.html'\n    _TEST = {\n        'url': 'http://www.hotnewhiphop.com/freddie-gibbs-lay-it-down-song.1435540.html',\n        'md5': '2c2cd2f76ef11a9b3b581e8b232f3d96',\n        'info_dict': {\n            'id': '1435540',\n            'ext': 'mp3',\n            'title': 'Freddie Gibbs - Lay It Down'\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        video_url_base64 = self._search_regex(\n            r'data-path=\"(.*?)\"', webpage, 'video URL', default=None)\n\n        if video_url_base64 is None:\n            video_url = self._search_regex(\n                r'\"contentUrl\" content=\"(.*?)\"', webpage, 'content URL')\n            return self.url_result(video_url, ie='Youtube')\n\n        reqdata = urlencode_postdata([\n            ('mediaType', 's'),\n            ('mediaId', video_id),\n        ])\n        r = sanitized_Request(\n            'http://www.hotnewhiphop.com/ajax/media/getActions/', data=reqdata)\n        r.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        mkd = self._download_json(\n            r, video_id, note='Requesting media key',\n            errnote='Could not download media key')\n        if 'mediaKey' not in mkd:\n            raise ExtractorError('Did not get a media key')\n\n        redirect_url = compat_b64decode(video_url_base64).decode('utf-8')\n        redirect_req = HEADRequest(redirect_url)\n        req = self._request_webpage(\n            redirect_req, video_id,\n            note='Resolving final URL', errnote='Could not resolve final URL')\n        video_url = req.geturl()\n        if video_url.endswith('.html'):\n            raise ExtractorError('Redirect failed')\n\n        video_title = self._og_search_title(webpage).strip()\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': video_title,\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_b64decode\nfrom ..utils import (\n    ExtractorError,\n    HEADRequest,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass HotNewHipHopIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hotnewhiphop\\.com/.*\\.(?P<id>.*)\\.html'\n    _TEST = {\n        'url': 'http://www.hotnewhiphop.com/freddie-gibbs-lay-it-down-song.1435540.html',\n        'md5': '2c2cd2f76ef11a9b3b581e8b232f3d96',\n        'info_dict': {\n            'id': '1435540',\n            'ext': 'mp3',\n            'title': 'Freddie Gibbs - Lay It Down'\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        video_url_base64 = self._search_regex(\n            r'data-path=\"(.*?)\"', webpage, 'video URL', default=None)\n\n        if video_url_base64 is None:\n            video_url = self._search_regex(\n                r'\"contentUrl\" content=\"(.*?)\"', webpage, 'content URL')\n            return self.url_result(video_url, ie='Youtube')\n\n        reqdata = urlencode_postdata([\n            ('mediaType', 's'),\n            ('mediaId', video_id),\n        ])\n        r = sanitized_Request(\n            'http://www.hotnewhiphop.com/ajax/media/getActions/', data=reqdata)\n        r.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        mkd = self._download_json(\n            r, video_id, note='Requesting media key',\n            errnote='Could not download media key')\n        if 'mediaKey' not in mkd:\n            raise ExtractorError('Did not get a media key')\n\n        redirect_url = compat_b64decode(video_url_base64).decode('utf-8')\n        redirect_req = HEADRequest(redirect_url)\n        req = self._request_webpage(\n            redirect_req, video_id,\n            note='Resolving final URL', errnote='Could not resolve final URL')\n        video_url = req.geturl()\n        if video_url.endswith('.html'):\n            raise ExtractorError('Redirect failed')\n\n        video_title = self._og_search_title(webpage).strip()\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': video_title,\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "hotnewhiphop.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/hotnewhiphop.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}