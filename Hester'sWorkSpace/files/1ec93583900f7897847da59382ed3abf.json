{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport mock\n\nfrom datetime import timedelta\nfrom django.utils import timezone\nfrom sentry.buffer.base import Buffer\nfrom sentry.models import Group, Organization, Project, Release, ReleaseProject, Team\nfrom sentry.testutils import TestCase\n\n\nclass BufferTest(TestCase):\n    def setUp(self):\n        self.buf = Buffer()\n\n    @mock.patch('sentry.buffer.base.process_incr')\n    def test_incr_delays_task(self, process_incr):\n        model = mock.Mock()\n        columns = {'times_seen': 1}\n        filters = {'id': 1}\n        self.buf.incr(model, columns, filters)\n        kwargs = dict(model=model, columns=columns, filters=filters, extra=None)\n        process_incr.apply_async.assert_called_once_with(kwargs=kwargs)\n\n    def test_process_saves_data(self):\n        group = Group.objects.create(project=Project(id=1))\n        columns = {'times_seen': 1}\n        filters = {'id': group.id, 'project_id': 1}\n        self.buf.process(Group, columns, filters)\n        assert Group.objects.get(id=group.id).times_seen == group.times_seen + 1\n\n    def test_process_saves_data_without_existing_row(self):\n        columns = {'times_seen': 1}\n        filters = {'message': 'foo bar', 'project_id': 1}\n        self.buf.process(Group, columns, filters)\n        group = Group.objects.get(message='foo bar')\n        \n        \n        assert group.times_seen == 2\n        assert group.project_id == 1\n\n    def test_process_saves_extra(self):\n        group = Group.objects.create(project=Project(id=1))\n        columns = {'times_seen': 1}\n        filters = {'id': group.id, 'project_id': 1}\n        \n        the_date = (timezone.now() + timedelta(days=5)).replace(microsecond=0)\n        self.buf.process(Group, columns, filters, {'last_seen': the_date})\n        group_ = Group.objects.get(id=group.id)\n        assert group_.times_seen == group.times_seen + 1\n        assert group_.last_seen.replace(microsecond=0) == the_date\n\n    def test_increments_when_null(self):\n        org = Organization.objects.create(slug='test-org')\n        team = Team.objects.create(organization=org, slug='test-team')\n        project = Project.objects.create(organization=org, slug='test-project')\n        project.add_team(team)\n        release = Release.objects.create(organization=org, version='abcdefg')\n        release_project = ReleaseProject.objects.create(project=project, release=release)\n        assert release_project.new_groups == 0\n\n        columns = {'new_groups': 1}\n        filters = {'id': release_project.id}\n        self.buf.process(ReleaseProject, columns, filters)\n        release_project_ = ReleaseProject.objects.get(id=release_project.id)\n        assert release_project_.new_groups == 1\n", "comments": "      coding  utf 8        default value times seen 1  actually end    incrementing 2    strip micrseconds mysql seem handle correctly ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport mock\n\nfrom datetime import timedelta\nfrom django.utils import timezone\nfrom sentry.buffer.base import Buffer\nfrom sentry.models import Group, Organization, Project, Release, ReleaseProject, Team\nfrom sentry.testutils import TestCase\n\n\nclass BufferTest(TestCase):\n    def setUp(self):\n        self.buf = Buffer()\n\n    @mock.patch('sentry.buffer.base.process_incr')\n    def test_incr_delays_task(self, process_incr):\n        model = mock.Mock()\n        columns = {'times_seen': 1}\n        filters = {'id': 1}\n        self.buf.incr(model, columns, filters)\n        kwargs = dict(model=model, columns=columns, filters=filters, extra=None)\n        process_incr.apply_async.assert_called_once_with(kwargs=kwargs)\n\n    def test_process_saves_data(self):\n        group = Group.objects.create(project=Project(id=1))\n        columns = {'times_seen': 1}\n        filters = {'id': group.id, 'project_id': 1}\n        self.buf.process(Group, columns, filters)\n        assert Group.objects.get(id=group.id).times_seen == group.times_seen + 1\n\n    def test_process_saves_data_without_existing_row(self):\n        columns = {'times_seen': 1}\n        filters = {'message': 'foo bar', 'project_id': 1}\n        self.buf.process(Group, columns, filters)\n        group = Group.objects.get(message='foo bar')\n        # the default value for times_seen is 1, so we actually end up\n        # incrementing it to 2 here\n        assert group.times_seen == 2\n        assert group.project_id == 1\n\n    def test_process_saves_extra(self):\n        group = Group.objects.create(project=Project(id=1))\n        columns = {'times_seen': 1}\n        filters = {'id': group.id, 'project_id': 1}\n        # strip micrseconds because MySQL doesn't seem to handle them correctly\n        the_date = (timezone.now() + timedelta(days=5)).replace(microsecond=0)\n        self.buf.process(Group, columns, filters, {'last_seen': the_date})\n        group_ = Group.objects.get(id=group.id)\n        assert group_.times_seen == group.times_seen + 1\n        assert group_.last_seen.replace(microsecond=0) == the_date\n\n    def test_increments_when_null(self):\n        org = Organization.objects.create(slug='test-org')\n        team = Team.objects.create(organization=org, slug='test-team')\n        project = Project.objects.create(organization=org, slug='test-project')\n        project.add_team(team)\n        release = Release.objects.create(organization=org, version='abcdefg')\n        release_project = ReleaseProject.objects.create(project=project, release=release)\n        assert release_project.new_groups == 0\n\n        columns = {'new_groups': 1}\n        filters = {'id': release_project.id}\n        self.buf.process(ReleaseProject, columns, filters)\n        release_project_ = ReleaseProject.objects.get(id=release_project.id)\n        assert release_project_.new_groups == 1\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "tests.py", "id": "1ec93583900f7897847da59382ed3abf", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/buffer/base/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}