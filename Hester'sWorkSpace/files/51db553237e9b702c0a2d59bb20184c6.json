{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_chr\nfrom ..utils import (\n    decode_packed_codes,\n    ExtractorError,\n)\n\n\nclass VShareIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vshare\\.io/[dv]/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'https://vshare.io/d/0f64ce6',\n        'md5': '17b39f55b5497ae8b59f5fbce8e35886',\n        'info_dict': {\n            'id': '0f64ce6',\n            'title': 'vl14062007715967',\n            'ext': 'mp4',\n        }\n    }, {\n        'url': 'https://vshare.io/v/0f64ce6/width-650/height-430/1',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+?src=[\"\\'](?P<url>(?:https?:)?//(?:www\\.)?vshare\\.io/v/[^/?\n            webpage)\n\n    def _extract_packed(self, webpage):\n        packed = self._search_regex(\n            r'(eval\\(function.+)', webpage, 'packed code')\n        unpacked = decode_packed_codes(packed)\n        digits = self._search_regex(r'\\[((?:\\d+,?)+)\\]', unpacked, 'digits')\n        digits = [int(digit) for digit in digits.split(',')]\n        key_digit = self._search_regex(\n            r'fromCharCode\\(.+?(\\d+)\\)}', unpacked, 'key digit')\n        chars = [compat_chr(d - int(key_digit)) for d in digits]\n        return ''.join(chars)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'https://vshare.io/v/%s/width-650/height-430/1' % video_id,\n            video_id)\n\n        title = self._html_search_regex(\n            r'<title>([^<]+)</title>', webpage, 'title')\n        title = title.split(' - ')[0]\n\n        error = self._html_search_regex(\n            r'(?s)<div[^>]+\\bclass=[\"\\']xxx-error[^>]+>(.+?)</div', webpage,\n            'error', default=None)\n        if error:\n            raise ExtractorError(error, expected=True)\n\n        info = self._parse_html5_media_entries(\n            url, '<video>%s</video>' % self._extract_packed(webpage),\n            video_id)[0]\n\n        self._sort_formats(info['formats'])\n\n        info.update({\n            'id': video_id,\n            'title': title,\n        })\n\n        return info\n", "comments": "# coding: utf-8\n#&]+)'\n#&]+)',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_chr\nfrom ..utils import (\n    decode_packed_codes,\n    ExtractorError,\n)\n\n\nclass VShareIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vshare\\.io/[dv]/(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'https://vshare.io/d/0f64ce6',\n        'md5': '17b39f55b5497ae8b59f5fbce8e35886',\n        'info_dict': {\n            'id': '0f64ce6',\n            'title': 'vl14062007715967',\n            'ext': 'mp4',\n        }\n    }, {\n        'url': 'https://vshare.io/v/0f64ce6/width-650/height-430/1',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+?src=[\"\\'](?P<url>(?:https?:)?//(?:www\\.)?vshare\\.io/v/[^/?#&]+)',\n            webpage)\n\n    def _extract_packed(self, webpage):\n        packed = self._search_regex(\n            r'(eval\\(function.+)', webpage, 'packed code')\n        unpacked = decode_packed_codes(packed)\n        digits = self._search_regex(r'\\[((?:\\d+,?)+)\\]', unpacked, 'digits')\n        digits = [int(digit) for digit in digits.split(',')]\n        key_digit = self._search_regex(\n            r'fromCharCode\\(.+?(\\d+)\\)}', unpacked, 'key digit')\n        chars = [compat_chr(d - int(key_digit)) for d in digits]\n        return ''.join(chars)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'https://vshare.io/v/%s/width-650/height-430/1' % video_id,\n            video_id)\n\n        title = self._html_search_regex(\n            r'<title>([^<]+)</title>', webpage, 'title')\n        title = title.split(' - ')[0]\n\n        error = self._html_search_regex(\n            r'(?s)<div[^>]+\\bclass=[\"\\']xxx-error[^>]+>(.+?)</div', webpage,\n            'error', default=None)\n        if error:\n            raise ExtractorError(error, expected=True)\n\n        info = self._parse_html5_media_entries(\n            url, '<video>%s</video>' % self._extract_packed(webpage),\n            video_id)[0]\n\n        self._sort_formats(info['formats'])\n\n        info.update({\n            'id': video_id,\n            'title': title,\n        })\n\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vshare.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vshare.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}