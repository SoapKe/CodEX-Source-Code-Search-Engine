{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\ntry:\n    from itertools import zip_longest\nexcept ImportError:\n    from itertools import izip_longest as zip_longest\n\nimport unittest\nfrom lxml import etree as ET, html\nfrom lxml.html import builder as h\n\nfrom odoo.tests import common\n\n\ndef attrs(**kwargs):\n    return {'data-oe-%s' % key: str(value) for key, value in kwargs.items()}\n\n\nclass TestViewSaving(common.TransactionCase):\n\n    def eq(self, a, b):\n        self.assertEqual(a.tag, b.tag)\n        self.assertEqual(a.attrib, b.attrib)\n        self.assertEqual((a.text or '').strip(), (b.text or '').strip())\n        self.assertEqual((a.tail or '').strip(), (b.tail or '').strip())\n        for ca, cb in zip_longest(a, b):\n            self.eq(ca, cb)\n\n    def setUp(self):\n        super(TestViewSaving, self).setUp()\n        self.arch = h.DIV(\n            h.DIV(\n                h.H3(\"Column 1\"),\n                h.UL(\n                    h.LI(\"Item 1\"),\n                    h.LI(\"Item 2\"),\n                    h.LI(\"Item 3\"))),\n            h.DIV(\n                h.H3(\"Column 2\"),\n                h.UL(\n                    h.LI(\"Item 1\"),\n                    h.LI(h.SPAN(\"My Company\", attrs(model='res.company', id=1, field='name', type='char'))),\n                    h.LI(h.SPAN(\"+00 00 000 00 0 000\", attrs(model='res.company', id=1, field='phone', type='char')))\n                ))\n        )\n        self.view_id = self.env['ir.ui.view'].create({\n            'name': \"Test View\",\n            'type': 'qweb',\n            'arch': ET.tostring(self.arch, encoding='unicode')\n        })\n\n    def test_embedded_extraction(self):\n        fields = self.env['ir.ui.view'].extract_embedded_fields(self.arch)\n\n        expect = [\n            h.SPAN(\"My Company\", attrs(model='res.company', id=1, field='name', type='char')),\n            h.SPAN(\"+00 00 000 00 0 000\", attrs(model='res.company', id=1, field='phone', type='char')),\n        ]\n        for actual, expected in zip_longest(fields, expect):\n            self.eq(actual, expected)\n\n    def test_embedded_save(self):\n        embedded = h.SPAN(\"+00 00 000 00 0 000\", attrs(\n            model='res.company', id=1, field='phone', type='char'))\n\n        self.env['ir.ui.view'].save_embedded_field(embedded)\n\n        company = self.env['res.company'].browse(1)\n        self.assertEqual(company.phone, \"+00 00 000 00 0 000\")\n\n    @unittest.skip(\"save conflict for embedded (saved by third party or previous version in page) not implemented\")\n    def test_embedded_conflict(self):\n        e1 = h.SPAN(\"My Company\", attrs(model='res.company', id=1, field='name'))\n        e2 = h.SPAN(\"Leeroy Jenkins\", attrs(model='res.company', id=1, field='name'))\n\n        View = self.env['ir.ui.view']\n\n        View.save_embedded_field(e1)\n        \n        with self.assertRaises(Exception):\n            View.save_embedded_field(e2)\n\n    def test_embedded_to_field_ref(self):\n        View = self.env['ir.ui.view']\n        embedded = h.SPAN(\"My Company\", attrs(expression=\"bob\"))\n        self.eq(\n            View.to_field_ref(embedded),\n            h.SPAN({'t-field': 'bob'})\n        )\n\n    def test_to_field_ref_keep_attributes(self):\n        View = self.env['ir.ui.view']\n\n        att = attrs(expression=\"bob\", model=\"res.company\", id=1, field=\"name\")\n        att['id'] = \"whop\"\n        att['class'] = \"foo bar\"\n        embedded = h.SPAN(\"My Company\", att)\n\n        self.eq(View.to_field_ref(embedded), h.SPAN({'t-field': 'bob', 'class': 'foo bar', 'id': 'whop'}))\n\n    def test_replace_arch(self):\n        replacement = h.P(\"Wheee\")\n\n        result = self.view_id.replace_arch_section(None, replacement)\n\n        self.eq(result, h.DIV(\"Wheee\"))\n\n    def test_replace_arch_2(self):\n        replacement = h.DIV(h.P(\"Wheee\"))\n\n        result = self.view_id.replace_arch_section(None, replacement)\n\n        self.eq(result, replacement)\n\n    def test_fixup_arch(self):\n        replacement = h.H1(\"I am the greatest title alive!\")\n\n        result = self.view_id.replace_arch_section('/div/div[1]/h3', replacement)\n\n        self.eq(result, h.DIV(\n            h.DIV(\n                h.H3(\"I am the greatest title alive!\"),\n                h.UL(\n                    h.LI(\"Item 1\"),\n                    h.LI(\"Item 2\"),\n                    h.LI(\"Item 3\"))),\n            h.DIV(\n                h.H3(\"Column 2\"),\n                h.UL(\n                    h.LI(\"Item 1\"),\n                    h.LI(h.SPAN(\"My Company\", attrs(model='res.company', id=1, field='name', type='char'))),\n                    h.LI(h.SPAN(\"+00 00 000 00 0 000\", attrs(model='res.company', id=1, field='phone', type='char')))\n                ))\n        ))\n\n    def test_multiple_xpath_matches(self):\n        with self.assertRaises(ValueError):\n            self.view_id.replace_arch_section('/div/div/h3', h.H6(\"Lol nope\"))\n\n    def test_save(self):\n        Company = self.env['res.company']\n        View = self.env['ir.ui.view']\n\n        \n        imd = self.env['ir.model.data'].create({\n            'module': 'website',\n            'name': 'test_view',\n            'model': self.view_id._name,\n            'res_id': self.view_id.id,\n        })\n        self.assertEqual(self.view_id.model_data_id, imd)\n        self.assertFalse(imd.noupdate)\n\n        replacement = ET.tostring(h.DIV(\n            h.H3(\"Column 2\"),\n            h.UL(\n                h.LI(\"wob wob wob\"),\n                h.LI(h.SPAN(\"Acme Corporation\", attrs(model='res.company', id=1, field='name', expression=\"bob\", type='char'))),\n                h.LI(h.SPAN(\"+12 3456789\", attrs(model='res.company', id=1, field='phone', expression=\"edmund\", type='char'))),\n            )\n        ), encoding='unicode')\n        self.view_id.save(value=replacement, xpath='/div/div[2]')\n\n        \n        self.assertTrue(imd.noupdate)\n\n        company = Company.browse(1)\n        self.assertEqual(company.name, \"Acme Corporation\")\n        self.assertEqual(company.phone, \"+12 3456789\")\n        self.eq(\n            ET.fromstring(self.view_id.arch),\n            h.DIV(\n                h.DIV(\n                    h.H3(\"Column 1\"),\n                    h.UL(\n                        h.LI(\"Item 1\"),\n                        h.LI(\"Item 2\"),\n                        h.LI(\"Item 3\"))),\n                h.DIV(\n                    h.H3(\"Column 2\"),\n                    h.UL(\n                        h.LI(\"wob wob wob\"),\n                        h.LI(h.SPAN({'t-field': \"bob\"})),\n                        h.LI(h.SPAN({'t-field': \"edmund\"}))\n                    ))\n            )\n        )\n\n    def test_save_escaped_text(self):\n        \n        view = self.env['ir.ui.view'].create({\n            'arch': u'<t t-name=\"dummy\"><p><h1>hello world</h1></p></t>',\n            'type': 'qweb'\n        })\n        \n        replacement = u'<script>1 && \"hello & world\"</script>'\n        view.save(replacement, xpath='/t/p/h1')\n        self.assertIn(\n            replacement.replace(u'&', u'&amp;'),\n            view.arch,\n            'inline script should be escaped server side'\n        )\n        self.assertIn(\n            replacement,\n            view.render().decode('utf-8'),\n            'inline script should not be escaped when rendering'\n        )\n        \n        replacement = u'world &amp;amp; &amp;lt;b&amp;gt;cie'\n        view.save(replacement, xpath='/t/p')\n        self.assertIn(replacement, view.arch, 'common text node should not be escaped server side')\n        self.assertIn(\n            replacement,\n            view.render().decode('utf-8').replace(u'&', u'&amp;'),\n            'text node characters wrongly unescaped when rendering'\n        )\n\n    def test_save_only_embedded(self):\n        Company = self.env['res.company']\n        company_id = 1\n        company = Company.browse(company_id)\n        company.write({'name': \"Foo Corporation\"})\n\n        node = html.tostring(h.SPAN(\n            \"Acme Corporation\",\n            attrs(model='res.company', id=company_id, field=\"name\", expression='bob', type='char')),\n        encoding='unicode')\n        View = self.env['ir.ui.view']\n        View.browse(company_id).save(value=node)\n        self.assertEqual(company.name, \"Acme Corporation\")\n\n    def test_field_tail(self):\n        View = self.env['ir.ui.view']\n        replacement = ET.tostring(\n            h.LI(h.SPAN(\"+12 3456789\", attrs(\n                        model='res.company', id=1, type='char',\n                        field='phone', expression=\"edmund\")),\n                 \"whop whop\"\n        ), encoding=\"utf-8\")\n        self.view_id.save(value=replacement, xpath='/div/div[2]/ul/li[3]')\n\n        self.eq(\n            ET.fromstring(self.view_id.arch.encode('utf-8')),\n            h.DIV(\n                h.DIV(\n                    h.H3(\"Column 1\"),\n                    h.UL(\n                        h.LI(\"Item 1\"),\n                        h.LI(\"Item 2\"),\n                        h.LI(\"Item 3\"))),\n                h.DIV(\n                    h.H3(\"Column 2\"),\n                    h.UL(\n                        h.LI(\"Item 1\"),\n                        h.LI(h.SPAN(\"My Company\", attrs(model='res.company', id=1, field='name', type='char'))),\n                        h.LI(h.SPAN({'t-field': \"edmund\"}), \"whop whop\"),\n                    ))\n            )\n        )\n", "comments": "    test saving html special chars text nodes            coding  utf 8        part odoo  see license file full copyright licensing details     fixme  precise exception    create xmlid view    xml id view flagged  noupdate     script style text nodes escaped client side    common text nodes escaped client side ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\ntry:\n    from itertools import zip_longest\nexcept ImportError:\n    from itertools import izip_longest as zip_longest\n\nimport unittest\nfrom lxml import etree as ET, html\nfrom lxml.html import builder as h\n\nfrom odoo.tests import common\n\n\ndef attrs(**kwargs):\n    return {'data-oe-%s' % key: str(value) for key, value in kwargs.items()}\n\n\nclass TestViewSaving(common.TransactionCase):\n\n    def eq(self, a, b):\n        self.assertEqual(a.tag, b.tag)\n        self.assertEqual(a.attrib, b.attrib)\n        self.assertEqual((a.text or '').strip(), (b.text or '').strip())\n        self.assertEqual((a.tail or '').strip(), (b.tail or '').strip())\n        for ca, cb in zip_longest(a, b):\n            self.eq(ca, cb)\n\n    def setUp(self):\n        super(TestViewSaving, self).setUp()\n        self.arch = h.DIV(\n            h.DIV(\n                h.H3(\"Column 1\"),\n                h.UL(\n                    h.LI(\"Item 1\"),\n                    h.LI(\"Item 2\"),\n                    h.LI(\"Item 3\"))),\n            h.DIV(\n                h.H3(\"Column 2\"),\n                h.UL(\n                    h.LI(\"Item 1\"),\n                    h.LI(h.SPAN(\"My Company\", attrs(model='res.company', id=1, field='name', type='char'))),\n                    h.LI(h.SPAN(\"+00 00 000 00 0 000\", attrs(model='res.company', id=1, field='phone', type='char')))\n                ))\n        )\n        self.view_id = self.env['ir.ui.view'].create({\n            'name': \"Test View\",\n            'type': 'qweb',\n            'arch': ET.tostring(self.arch, encoding='unicode')\n        })\n\n    def test_embedded_extraction(self):\n        fields = self.env['ir.ui.view'].extract_embedded_fields(self.arch)\n\n        expect = [\n            h.SPAN(\"My Company\", attrs(model='res.company', id=1, field='name', type='char')),\n            h.SPAN(\"+00 00 000 00 0 000\", attrs(model='res.company', id=1, field='phone', type='char')),\n        ]\n        for actual, expected in zip_longest(fields, expect):\n            self.eq(actual, expected)\n\n    def test_embedded_save(self):\n        embedded = h.SPAN(\"+00 00 000 00 0 000\", attrs(\n            model='res.company', id=1, field='phone', type='char'))\n\n        self.env['ir.ui.view'].save_embedded_field(embedded)\n\n        company = self.env['res.company'].browse(1)\n        self.assertEqual(company.phone, \"+00 00 000 00 0 000\")\n\n    @unittest.skip(\"save conflict for embedded (saved by third party or previous version in page) not implemented\")\n    def test_embedded_conflict(self):\n        e1 = h.SPAN(\"My Company\", attrs(model='res.company', id=1, field='name'))\n        e2 = h.SPAN(\"Leeroy Jenkins\", attrs(model='res.company', id=1, field='name'))\n\n        View = self.env['ir.ui.view']\n\n        View.save_embedded_field(e1)\n        # FIXME: more precise exception\n        with self.assertRaises(Exception):\n            View.save_embedded_field(e2)\n\n    def test_embedded_to_field_ref(self):\n        View = self.env['ir.ui.view']\n        embedded = h.SPAN(\"My Company\", attrs(expression=\"bob\"))\n        self.eq(\n            View.to_field_ref(embedded),\n            h.SPAN({'t-field': 'bob'})\n        )\n\n    def test_to_field_ref_keep_attributes(self):\n        View = self.env['ir.ui.view']\n\n        att = attrs(expression=\"bob\", model=\"res.company\", id=1, field=\"name\")\n        att['id'] = \"whop\"\n        att['class'] = \"foo bar\"\n        embedded = h.SPAN(\"My Company\", att)\n\n        self.eq(View.to_field_ref(embedded), h.SPAN({'t-field': 'bob', 'class': 'foo bar', 'id': 'whop'}))\n\n    def test_replace_arch(self):\n        replacement = h.P(\"Wheee\")\n\n        result = self.view_id.replace_arch_section(None, replacement)\n\n        self.eq(result, h.DIV(\"Wheee\"))\n\n    def test_replace_arch_2(self):\n        replacement = h.DIV(h.P(\"Wheee\"))\n\n        result = self.view_id.replace_arch_section(None, replacement)\n\n        self.eq(result, replacement)\n\n    def test_fixup_arch(self):\n        replacement = h.H1(\"I am the greatest title alive!\")\n\n        result = self.view_id.replace_arch_section('/div/div[1]/h3', replacement)\n\n        self.eq(result, h.DIV(\n            h.DIV(\n                h.H3(\"I am the greatest title alive!\"),\n                h.UL(\n                    h.LI(\"Item 1\"),\n                    h.LI(\"Item 2\"),\n                    h.LI(\"Item 3\"))),\n            h.DIV(\n                h.H3(\"Column 2\"),\n                h.UL(\n                    h.LI(\"Item 1\"),\n                    h.LI(h.SPAN(\"My Company\", attrs(model='res.company', id=1, field='name', type='char'))),\n                    h.LI(h.SPAN(\"+00 00 000 00 0 000\", attrs(model='res.company', id=1, field='phone', type='char')))\n                ))\n        ))\n\n    def test_multiple_xpath_matches(self):\n        with self.assertRaises(ValueError):\n            self.view_id.replace_arch_section('/div/div/h3', h.H6(\"Lol nope\"))\n\n    def test_save(self):\n        Company = self.env['res.company']\n        View = self.env['ir.ui.view']\n\n        # create an xmlid for the view\n        imd = self.env['ir.model.data'].create({\n            'module': 'website',\n            'name': 'test_view',\n            'model': self.view_id._name,\n            'res_id': self.view_id.id,\n        })\n        self.assertEqual(self.view_id.model_data_id, imd)\n        self.assertFalse(imd.noupdate)\n\n        replacement = ET.tostring(h.DIV(\n            h.H3(\"Column 2\"),\n            h.UL(\n                h.LI(\"wob wob wob\"),\n                h.LI(h.SPAN(\"Acme Corporation\", attrs(model='res.company', id=1, field='name', expression=\"bob\", type='char'))),\n                h.LI(h.SPAN(\"+12 3456789\", attrs(model='res.company', id=1, field='phone', expression=\"edmund\", type='char'))),\n            )\n        ), encoding='unicode')\n        self.view_id.save(value=replacement, xpath='/div/div[2]')\n\n        # the xml_id of the view should be flagged as 'noupdate'\n        self.assertTrue(imd.noupdate)\n\n        company = Company.browse(1)\n        self.assertEqual(company.name, \"Acme Corporation\")\n        self.assertEqual(company.phone, \"+12 3456789\")\n        self.eq(\n            ET.fromstring(self.view_id.arch),\n            h.DIV(\n                h.DIV(\n                    h.H3(\"Column 1\"),\n                    h.UL(\n                        h.LI(\"Item 1\"),\n                        h.LI(\"Item 2\"),\n                        h.LI(\"Item 3\"))),\n                h.DIV(\n                    h.H3(\"Column 2\"),\n                    h.UL(\n                        h.LI(\"wob wob wob\"),\n                        h.LI(h.SPAN({'t-field': \"bob\"})),\n                        h.LI(h.SPAN({'t-field': \"edmund\"}))\n                    ))\n            )\n        )\n\n    def test_save_escaped_text(self):\n        \"\"\" Test saving html special chars in text nodes \"\"\"\n        view = self.env['ir.ui.view'].create({\n            'arch': u'<t t-name=\"dummy\"><p><h1>hello world</h1></p></t>',\n            'type': 'qweb'\n        })\n        # script and style text nodes should not escaped client side\n        replacement = u'<script>1 && \"hello & world\"</script>'\n        view.save(replacement, xpath='/t/p/h1')\n        self.assertIn(\n            replacement.replace(u'&', u'&amp;'),\n            view.arch,\n            'inline script should be escaped server side'\n        )\n        self.assertIn(\n            replacement,\n            view.render().decode('utf-8'),\n            'inline script should not be escaped when rendering'\n        )\n        # common text nodes should be be escaped client side\n        replacement = u'world &amp;amp; &amp;lt;b&amp;gt;cie'\n        view.save(replacement, xpath='/t/p')\n        self.assertIn(replacement, view.arch, 'common text node should not be escaped server side')\n        self.assertIn(\n            replacement,\n            view.render().decode('utf-8').replace(u'&', u'&amp;'),\n            'text node characters wrongly unescaped when rendering'\n        )\n\n    def test_save_only_embedded(self):\n        Company = self.env['res.company']\n        company_id = 1\n        company = Company.browse(company_id)\n        company.write({'name': \"Foo Corporation\"})\n\n        node = html.tostring(h.SPAN(\n            \"Acme Corporation\",\n            attrs(model='res.company', id=company_id, field=\"name\", expression='bob', type='char')),\n        encoding='unicode')\n        View = self.env['ir.ui.view']\n        View.browse(company_id).save(value=node)\n        self.assertEqual(company.name, \"Acme Corporation\")\n\n    def test_field_tail(self):\n        View = self.env['ir.ui.view']\n        replacement = ET.tostring(\n            h.LI(h.SPAN(\"+12 3456789\", attrs(\n                        model='res.company', id=1, type='char',\n                        field='phone', expression=\"edmund\")),\n                 \"whop whop\"\n        ), encoding=\"utf-8\")\n        self.view_id.save(value=replacement, xpath='/div/div[2]/ul/li[3]')\n\n        self.eq(\n            ET.fromstring(self.view_id.arch.encode('utf-8')),\n            h.DIV(\n                h.DIV(\n                    h.H3(\"Column 1\"),\n                    h.UL(\n                        h.LI(\"Item 1\"),\n                        h.LI(\"Item 2\"),\n                        h.LI(\"Item 3\"))),\n                h.DIV(\n                    h.H3(\"Column 2\"),\n                    h.UL(\n                        h.LI(\"Item 1\"),\n                        h.LI(h.SPAN(\"My Company\", attrs(model='res.company', id=1, field='name', type='char'))),\n                        h.LI(h.SPAN({'t-field': \"edmund\"}), \"whop whop\"),\n                    ))\n            )\n        )\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_views.py", "id": "fe8e8ce44791b0aa47dfb4c914a4004d", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website/tests/test_views.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}