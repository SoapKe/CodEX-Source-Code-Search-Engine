{"author": "django", "code": "import json\n\nfrom django.db.models.expressions import F, Value\nfrom django.test.testcases import skipUnlessDBFeature\nfrom django.test.utils import Approximate\n\nfrom . import PostgreSQLTestCase\nfrom .models import AggregateTestModel, StatTestModel\n\ntry:\n    from django.contrib.postgres.aggregates import (\n        ArrayAgg, BitAnd, BitOr, BoolAnd, BoolOr, Corr, CovarPop, JSONBAgg,\n        RegrAvgX, RegrAvgY, RegrCount, RegrIntercept, RegrR2, RegrSlope,\n        RegrSXX, RegrSXY, RegrSYY, StatAggregate, StringAgg,\n    )\nexcept ImportError:\n    pass  \n\n\nclass TestGeneralAggregate(PostgreSQLTestCase):\n    @classmethod\n    def setUpTestData(cls):\n        AggregateTestModel.objects.create(boolean_field=True, char_field='Foo1', integer_field=0)\n        AggregateTestModel.objects.create(boolean_field=False, char_field='Foo2', integer_field=1)\n        AggregateTestModel.objects.create(boolean_field=False, char_field='Foo3', integer_field=2)\n        AggregateTestModel.objects.create(boolean_field=True, char_field='Foo4', integer_field=0)\n\n    def test_array_agg_charfield(self):\n        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('char_field'))\n        self.assertEqual(values, {'arrayagg': ['Foo1', 'Foo2', 'Foo3', 'Foo4']})\n\n    def test_array_agg_integerfield(self):\n        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('integer_field'))\n        self.assertEqual(values, {'arrayagg': [0, 1, 2, 0]})\n\n    def test_array_agg_booleanfield(self):\n        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('boolean_field'))\n        self.assertEqual(values, {'arrayagg': [True, False, False, True]})\n\n    def test_array_agg_empty_result(self):\n        AggregateTestModel.objects.all().delete()\n        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('char_field'))\n        self.assertEqual(values, {'arrayagg': []})\n        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('integer_field'))\n        self.assertEqual(values, {'arrayagg': []})\n        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('boolean_field'))\n        self.assertEqual(values, {'arrayagg': []})\n\n    def test_array_agg_lookups(self):\n        aggr1 = AggregateTestModel.objects.create()\n        aggr2 = AggregateTestModel.objects.create()\n        StatTestModel.objects.create(related_field=aggr1, int1=1, int2=0)\n        StatTestModel.objects.create(related_field=aggr1, int1=2, int2=0)\n        StatTestModel.objects.create(related_field=aggr2, int1=3, int2=0)\n        StatTestModel.objects.create(related_field=aggr2, int1=4, int2=0)\n        qs = StatTestModel.objects.values('related_field').annotate(\n            array=ArrayAgg('int1')\n        ).filter(array__overlap=[2]).values_list('array', flat=True)\n        self.assertCountEqual(qs.get(), [1, 2])\n\n    def test_bit_and_general(self):\n        values = AggregateTestModel.objects.filter(\n            integer_field__in=[0, 1]).aggregate(bitand=BitAnd('integer_field'))\n        self.assertEqual(values, {'bitand': 0})\n\n    def test_bit_and_on_only_true_values(self):\n        values = AggregateTestModel.objects.filter(\n            integer_field=1).aggregate(bitand=BitAnd('integer_field'))\n        self.assertEqual(values, {'bitand': 1})\n\n    def test_bit_and_on_only_false_values(self):\n        values = AggregateTestModel.objects.filter(\n            integer_field=0).aggregate(bitand=BitAnd('integer_field'))\n        self.assertEqual(values, {'bitand': 0})\n\n    def test_bit_and_empty_result(self):\n        AggregateTestModel.objects.all().delete()\n        values = AggregateTestModel.objects.aggregate(bitand=BitAnd('integer_field'))\n        self.assertEqual(values, {'bitand': None})\n\n    def test_bit_or_general(self):\n        values = AggregateTestModel.objects.filter(\n            integer_field__in=[0, 1]).aggregate(bitor=BitOr('integer_field'))\n        self.assertEqual(values, {'bitor': 1})\n\n    def test_bit_or_on_only_true_values(self):\n        values = AggregateTestModel.objects.filter(\n            integer_field=1).aggregate(bitor=BitOr('integer_field'))\n        self.assertEqual(values, {'bitor': 1})\n\n    def test_bit_or_on_only_false_values(self):\n        values = AggregateTestModel.objects.filter(\n            integer_field=0).aggregate(bitor=BitOr('integer_field'))\n        self.assertEqual(values, {'bitor': 0})\n\n    def test_bit_or_empty_result(self):\n        AggregateTestModel.objects.all().delete()\n        values = AggregateTestModel.objects.aggregate(bitor=BitOr('integer_field'))\n        self.assertEqual(values, {'bitor': None})\n\n    def test_bool_and_general(self):\n        values = AggregateTestModel.objects.aggregate(booland=BoolAnd('boolean_field'))\n        self.assertEqual(values, {'booland': False})\n\n    def test_bool_and_empty_result(self):\n        AggregateTestModel.objects.all().delete()\n        values = AggregateTestModel.objects.aggregate(booland=BoolAnd('boolean_field'))\n        self.assertEqual(values, {'booland': None})\n\n    def test_bool_or_general(self):\n        values = AggregateTestModel.objects.aggregate(boolor=BoolOr('boolean_field'))\n        self.assertEqual(values, {'boolor': True})\n\n    def test_bool_or_empty_result(self):\n        AggregateTestModel.objects.all().delete()\n        values = AggregateTestModel.objects.aggregate(boolor=BoolOr('boolean_field'))\n        self.assertEqual(values, {'boolor': None})\n\n    def test_string_agg_requires_delimiter(self):\n        with self.assertRaises(TypeError):\n            AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field'))\n\n    def test_string_agg_charfield(self):\n        values = AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field', delimiter=';'))\n        self.assertEqual(values, {'stringagg': 'Foo1;Foo2;Foo3;Foo4'})\n\n    def test_string_agg_empty_result(self):\n        AggregateTestModel.objects.all().delete()\n        values = AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field', delimiter=';'))\n        self.assertEqual(values, {'stringagg': ''})\n\n    @skipUnlessDBFeature('has_jsonb_agg')\n    def test_json_agg(self):\n        values = AggregateTestModel.objects.aggregate(jsonagg=JSONBAgg('char_field'))\n        self.assertEqual(values, {'jsonagg': ['Foo1', 'Foo2', 'Foo3', 'Foo4']})\n\n    @skipUnlessDBFeature('has_jsonb_agg')\n    def test_json_agg_empty(self):\n        values = AggregateTestModel.objects.none().aggregate(jsonagg=JSONBAgg('integer_field'))\n        self.assertEqual(values, json.loads('{\"jsonagg\": []}'))\n\n\nclass TestAggregateDistinct(PostgreSQLTestCase):\n    @classmethod\n    def setUpTestData(cls):\n        AggregateTestModel.objects.create(char_field='Foo')\n        AggregateTestModel.objects.create(char_field='Foo')\n        AggregateTestModel.objects.create(char_field='Bar')\n\n    def test_string_agg_distinct_false(self):\n        values = AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field', delimiter=' ', distinct=False))\n        self.assertEqual(values['stringagg'].count('Foo'), 2)\n        self.assertEqual(values['stringagg'].count('Bar'), 1)\n\n    def test_string_agg_distinct_true(self):\n        values = AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field', delimiter=' ', distinct=True))\n        self.assertEqual(values['stringagg'].count('Foo'), 1)\n        self.assertEqual(values['stringagg'].count('Bar'), 1)\n\n    def test_array_agg_distinct_false(self):\n        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('char_field', distinct=False))\n        self.assertEqual(sorted(values['arrayagg']), ['Bar', 'Foo', 'Foo'])\n\n    def test_array_agg_distinct_true(self):\n        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('char_field', distinct=True))\n        self.assertEqual(sorted(values['arrayagg']), ['Bar', 'Foo'])\n\n\nclass TestStatisticsAggregate(PostgreSQLTestCase):\n    @classmethod\n    def setUpTestData(cls):\n        StatTestModel.objects.create(\n            int1=1,\n            int2=3,\n            related_field=AggregateTestModel.objects.create(integer_field=0),\n        )\n        StatTestModel.objects.create(\n            int1=2,\n            int2=2,\n            related_field=AggregateTestModel.objects.create(integer_field=1),\n        )\n        StatTestModel.objects.create(\n            int1=3,\n            int2=1,\n            related_field=AggregateTestModel.objects.create(integer_field=2),\n        )\n\n    # Tests for base class (StatAggregate)\n\n    def test_missing_arguments_raises_exception(self):\n        with self.assertRaisesMessage(ValueError, 'Both y and x must be provided.'):\n            StatAggregate(x=None, y=None)\n\n    def test_correct_source_expressions(self):\n        func = StatAggregate(x='test', y=13)\n        self.assertIsInstance(func.source_expressions[0], Value)\n        self.assertIsInstance(func.source_expressions[1], F)\n\n    def test_alias_is_required(self):\n        class SomeFunc(StatAggregate):\n            function = 'TEST'\n        with self.assertRaisesMessage(TypeError, 'Complex aggregates require an alias'):\n            StatTestModel.objects.aggregate(SomeFunc(y='int2', x='int1'))\n\n    \n\n    def test_corr_general(self):\n        values = StatTestModel.objects.aggregate(corr=Corr(y='int2', x='int1'))\n        self.assertEqual(values, {'corr': -1.0})\n\n    def test_corr_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(corr=Corr(y='int2', x='int1'))\n        self.assertEqual(values, {'corr': None})\n\n    def test_covar_pop_general(self):\n        values = StatTestModel.objects.aggregate(covarpop=CovarPop(y='int2', x='int1'))\n        self.assertEqual(values, {'covarpop': Approximate(-0.66, places=1)})\n\n    def test_covar_pop_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(covarpop=CovarPop(y='int2', x='int1'))\n        self.assertEqual(values, {'covarpop': None})\n\n    def test_covar_pop_sample(self):\n        values = StatTestModel.objects.aggregate(covarpop=CovarPop(y='int2', x='int1', sample=True))\n        self.assertEqual(values, {'covarpop': -1.0})\n\n    def test_covar_pop_sample_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(covarpop=CovarPop(y='int2', x='int1', sample=True))\n        self.assertEqual(values, {'covarpop': None})\n\n    def test_regr_avgx_general(self):\n        values = StatTestModel.objects.aggregate(regravgx=RegrAvgX(y='int2', x='int1'))\n        self.assertEqual(values, {'regravgx': 2.0})\n\n    def test_regr_avgx_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regravgx=RegrAvgX(y='int2', x='int1'))\n        self.assertEqual(values, {'regravgx': None})\n\n    def test_regr_avgy_general(self):\n        values = StatTestModel.objects.aggregate(regravgy=RegrAvgY(y='int2', x='int1'))\n        self.assertEqual(values, {'regravgy': 2.0})\n\n    def test_regr_avgy_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regravgy=RegrAvgY(y='int2', x='int1'))\n        self.assertEqual(values, {'regravgy': None})\n\n    def test_regr_count_general(self):\n        values = StatTestModel.objects.aggregate(regrcount=RegrCount(y='int2', x='int1'))\n        self.assertEqual(values, {'regrcount': 3})\n\n    def test_regr_count_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regrcount=RegrCount(y='int2', x='int1'))\n        self.assertEqual(values, {'regrcount': 0})\n\n    def test_regr_intercept_general(self):\n        values = StatTestModel.objects.aggregate(regrintercept=RegrIntercept(y='int2', x='int1'))\n        self.assertEqual(values, {'regrintercept': 4})\n\n    def test_regr_intercept_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regrintercept=RegrIntercept(y='int2', x='int1'))\n        self.assertEqual(values, {'regrintercept': None})\n\n    def test_regr_r2_general(self):\n        values = StatTestModel.objects.aggregate(regrr2=RegrR2(y='int2', x='int1'))\n        self.assertEqual(values, {'regrr2': 1})\n\n    def test_regr_r2_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regrr2=RegrR2(y='int2', x='int1'))\n        self.assertEqual(values, {'regrr2': None})\n\n    def test_regr_slope_general(self):\n        values = StatTestModel.objects.aggregate(regrslope=RegrSlope(y='int2', x='int1'))\n        self.assertEqual(values, {'regrslope': -1})\n\n    def test_regr_slope_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regrslope=RegrSlope(y='int2', x='int1'))\n        self.assertEqual(values, {'regrslope': None})\n\n    def test_regr_sxx_general(self):\n        values = StatTestModel.objects.aggregate(regrsxx=RegrSXX(y='int2', x='int1'))\n        self.assertEqual(values, {'regrsxx': 2.0})\n\n    def test_regr_sxx_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regrsxx=RegrSXX(y='int2', x='int1'))\n        self.assertEqual(values, {'regrsxx': None})\n\n    def test_regr_sxy_general(self):\n        values = StatTestModel.objects.aggregate(regrsxy=RegrSXY(y='int2', x='int1'))\n        self.assertEqual(values, {'regrsxy': -2.0})\n\n    def test_regr_sxy_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regrsxy=RegrSXY(y='int2', x='int1'))\n        self.assertEqual(values, {'regrsxy': None})\n\n    def test_regr_syy_general(self):\n        values = StatTestModel.objects.aggregate(regrsyy=RegrSYY(y='int2', x='int1'))\n        self.assertEqual(values, {'regrsyy': 2.0})\n\n    def test_regr_syy_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regrsyy=RegrSYY(y='int2', x='int1'))\n        self.assertEqual(values, {'regrsyy': None})\n\n    def test_regr_avgx_with_related_obj_and_number_as_argument(self):\n        \n        values = StatTestModel.objects.aggregate(complex_regravgx=RegrAvgX(y=5, x='related_field__integer_field'))\n        self.assertEqual(values, {'complex_regravgx': 1.0})\n", "comments": "            this complex test check join field         number argument works expected                 psycopg2 installed    tests base class (stataggregate)    test aggregates ", "content": "import json\n\nfrom django.db.models.expressions import F, Value\nfrom django.test.testcases import skipUnlessDBFeature\nfrom django.test.utils import Approximate\n\nfrom . import PostgreSQLTestCase\nfrom .models import AggregateTestModel, StatTestModel\n\ntry:\n    from django.contrib.postgres.aggregates import (\n        ArrayAgg, BitAnd, BitOr, BoolAnd, BoolOr, Corr, CovarPop, JSONBAgg,\n        RegrAvgX, RegrAvgY, RegrCount, RegrIntercept, RegrR2, RegrSlope,\n        RegrSXX, RegrSXY, RegrSYY, StatAggregate, StringAgg,\n    )\nexcept ImportError:\n    pass  # psycopg2 is not installed\n\n\nclass TestGeneralAggregate(PostgreSQLTestCase):\n    @classmethod\n    def setUpTestData(cls):\n        AggregateTestModel.objects.create(boolean_field=True, char_field='Foo1', integer_field=0)\n        AggregateTestModel.objects.create(boolean_field=False, char_field='Foo2', integer_field=1)\n        AggregateTestModel.objects.create(boolean_field=False, char_field='Foo3', integer_field=2)\n        AggregateTestModel.objects.create(boolean_field=True, char_field='Foo4', integer_field=0)\n\n    def test_array_agg_charfield(self):\n        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('char_field'))\n        self.assertEqual(values, {'arrayagg': ['Foo1', 'Foo2', 'Foo3', 'Foo4']})\n\n    def test_array_agg_integerfield(self):\n        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('integer_field'))\n        self.assertEqual(values, {'arrayagg': [0, 1, 2, 0]})\n\n    def test_array_agg_booleanfield(self):\n        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('boolean_field'))\n        self.assertEqual(values, {'arrayagg': [True, False, False, True]})\n\n    def test_array_agg_empty_result(self):\n        AggregateTestModel.objects.all().delete()\n        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('char_field'))\n        self.assertEqual(values, {'arrayagg': []})\n        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('integer_field'))\n        self.assertEqual(values, {'arrayagg': []})\n        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('boolean_field'))\n        self.assertEqual(values, {'arrayagg': []})\n\n    def test_array_agg_lookups(self):\n        aggr1 = AggregateTestModel.objects.create()\n        aggr2 = AggregateTestModel.objects.create()\n        StatTestModel.objects.create(related_field=aggr1, int1=1, int2=0)\n        StatTestModel.objects.create(related_field=aggr1, int1=2, int2=0)\n        StatTestModel.objects.create(related_field=aggr2, int1=3, int2=0)\n        StatTestModel.objects.create(related_field=aggr2, int1=4, int2=0)\n        qs = StatTestModel.objects.values('related_field').annotate(\n            array=ArrayAgg('int1')\n        ).filter(array__overlap=[2]).values_list('array', flat=True)\n        self.assertCountEqual(qs.get(), [1, 2])\n\n    def test_bit_and_general(self):\n        values = AggregateTestModel.objects.filter(\n            integer_field__in=[0, 1]).aggregate(bitand=BitAnd('integer_field'))\n        self.assertEqual(values, {'bitand': 0})\n\n    def test_bit_and_on_only_true_values(self):\n        values = AggregateTestModel.objects.filter(\n            integer_field=1).aggregate(bitand=BitAnd('integer_field'))\n        self.assertEqual(values, {'bitand': 1})\n\n    def test_bit_and_on_only_false_values(self):\n        values = AggregateTestModel.objects.filter(\n            integer_field=0).aggregate(bitand=BitAnd('integer_field'))\n        self.assertEqual(values, {'bitand': 0})\n\n    def test_bit_and_empty_result(self):\n        AggregateTestModel.objects.all().delete()\n        values = AggregateTestModel.objects.aggregate(bitand=BitAnd('integer_field'))\n        self.assertEqual(values, {'bitand': None})\n\n    def test_bit_or_general(self):\n        values = AggregateTestModel.objects.filter(\n            integer_field__in=[0, 1]).aggregate(bitor=BitOr('integer_field'))\n        self.assertEqual(values, {'bitor': 1})\n\n    def test_bit_or_on_only_true_values(self):\n        values = AggregateTestModel.objects.filter(\n            integer_field=1).aggregate(bitor=BitOr('integer_field'))\n        self.assertEqual(values, {'bitor': 1})\n\n    def test_bit_or_on_only_false_values(self):\n        values = AggregateTestModel.objects.filter(\n            integer_field=0).aggregate(bitor=BitOr('integer_field'))\n        self.assertEqual(values, {'bitor': 0})\n\n    def test_bit_or_empty_result(self):\n        AggregateTestModel.objects.all().delete()\n        values = AggregateTestModel.objects.aggregate(bitor=BitOr('integer_field'))\n        self.assertEqual(values, {'bitor': None})\n\n    def test_bool_and_general(self):\n        values = AggregateTestModel.objects.aggregate(booland=BoolAnd('boolean_field'))\n        self.assertEqual(values, {'booland': False})\n\n    def test_bool_and_empty_result(self):\n        AggregateTestModel.objects.all().delete()\n        values = AggregateTestModel.objects.aggregate(booland=BoolAnd('boolean_field'))\n        self.assertEqual(values, {'booland': None})\n\n    def test_bool_or_general(self):\n        values = AggregateTestModel.objects.aggregate(boolor=BoolOr('boolean_field'))\n        self.assertEqual(values, {'boolor': True})\n\n    def test_bool_or_empty_result(self):\n        AggregateTestModel.objects.all().delete()\n        values = AggregateTestModel.objects.aggregate(boolor=BoolOr('boolean_field'))\n        self.assertEqual(values, {'boolor': None})\n\n    def test_string_agg_requires_delimiter(self):\n        with self.assertRaises(TypeError):\n            AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field'))\n\n    def test_string_agg_charfield(self):\n        values = AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field', delimiter=';'))\n        self.assertEqual(values, {'stringagg': 'Foo1;Foo2;Foo3;Foo4'})\n\n    def test_string_agg_empty_result(self):\n        AggregateTestModel.objects.all().delete()\n        values = AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field', delimiter=';'))\n        self.assertEqual(values, {'stringagg': ''})\n\n    @skipUnlessDBFeature('has_jsonb_agg')\n    def test_json_agg(self):\n        values = AggregateTestModel.objects.aggregate(jsonagg=JSONBAgg('char_field'))\n        self.assertEqual(values, {'jsonagg': ['Foo1', 'Foo2', 'Foo3', 'Foo4']})\n\n    @skipUnlessDBFeature('has_jsonb_agg')\n    def test_json_agg_empty(self):\n        values = AggregateTestModel.objects.none().aggregate(jsonagg=JSONBAgg('integer_field'))\n        self.assertEqual(values, json.loads('{\"jsonagg\": []}'))\n\n\nclass TestAggregateDistinct(PostgreSQLTestCase):\n    @classmethod\n    def setUpTestData(cls):\n        AggregateTestModel.objects.create(char_field='Foo')\n        AggregateTestModel.objects.create(char_field='Foo')\n        AggregateTestModel.objects.create(char_field='Bar')\n\n    def test_string_agg_distinct_false(self):\n        values = AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field', delimiter=' ', distinct=False))\n        self.assertEqual(values['stringagg'].count('Foo'), 2)\n        self.assertEqual(values['stringagg'].count('Bar'), 1)\n\n    def test_string_agg_distinct_true(self):\n        values = AggregateTestModel.objects.aggregate(stringagg=StringAgg('char_field', delimiter=' ', distinct=True))\n        self.assertEqual(values['stringagg'].count('Foo'), 1)\n        self.assertEqual(values['stringagg'].count('Bar'), 1)\n\n    def test_array_agg_distinct_false(self):\n        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('char_field', distinct=False))\n        self.assertEqual(sorted(values['arrayagg']), ['Bar', 'Foo', 'Foo'])\n\n    def test_array_agg_distinct_true(self):\n        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg('char_field', distinct=True))\n        self.assertEqual(sorted(values['arrayagg']), ['Bar', 'Foo'])\n\n\nclass TestStatisticsAggregate(PostgreSQLTestCase):\n    @classmethod\n    def setUpTestData(cls):\n        StatTestModel.objects.create(\n            int1=1,\n            int2=3,\n            related_field=AggregateTestModel.objects.create(integer_field=0),\n        )\n        StatTestModel.objects.create(\n            int1=2,\n            int2=2,\n            related_field=AggregateTestModel.objects.create(integer_field=1),\n        )\n        StatTestModel.objects.create(\n            int1=3,\n            int2=1,\n            related_field=AggregateTestModel.objects.create(integer_field=2),\n        )\n\n    # Tests for base class (StatAggregate)\n\n    def test_missing_arguments_raises_exception(self):\n        with self.assertRaisesMessage(ValueError, 'Both y and x must be provided.'):\n            StatAggregate(x=None, y=None)\n\n    def test_correct_source_expressions(self):\n        func = StatAggregate(x='test', y=13)\n        self.assertIsInstance(func.source_expressions[0], Value)\n        self.assertIsInstance(func.source_expressions[1], F)\n\n    def test_alias_is_required(self):\n        class SomeFunc(StatAggregate):\n            function = 'TEST'\n        with self.assertRaisesMessage(TypeError, 'Complex aggregates require an alias'):\n            StatTestModel.objects.aggregate(SomeFunc(y='int2', x='int1'))\n\n    # Test aggregates\n\n    def test_corr_general(self):\n        values = StatTestModel.objects.aggregate(corr=Corr(y='int2', x='int1'))\n        self.assertEqual(values, {'corr': -1.0})\n\n    def test_corr_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(corr=Corr(y='int2', x='int1'))\n        self.assertEqual(values, {'corr': None})\n\n    def test_covar_pop_general(self):\n        values = StatTestModel.objects.aggregate(covarpop=CovarPop(y='int2', x='int1'))\n        self.assertEqual(values, {'covarpop': Approximate(-0.66, places=1)})\n\n    def test_covar_pop_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(covarpop=CovarPop(y='int2', x='int1'))\n        self.assertEqual(values, {'covarpop': None})\n\n    def test_covar_pop_sample(self):\n        values = StatTestModel.objects.aggregate(covarpop=CovarPop(y='int2', x='int1', sample=True))\n        self.assertEqual(values, {'covarpop': -1.0})\n\n    def test_covar_pop_sample_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(covarpop=CovarPop(y='int2', x='int1', sample=True))\n        self.assertEqual(values, {'covarpop': None})\n\n    def test_regr_avgx_general(self):\n        values = StatTestModel.objects.aggregate(regravgx=RegrAvgX(y='int2', x='int1'))\n        self.assertEqual(values, {'regravgx': 2.0})\n\n    def test_regr_avgx_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regravgx=RegrAvgX(y='int2', x='int1'))\n        self.assertEqual(values, {'regravgx': None})\n\n    def test_regr_avgy_general(self):\n        values = StatTestModel.objects.aggregate(regravgy=RegrAvgY(y='int2', x='int1'))\n        self.assertEqual(values, {'regravgy': 2.0})\n\n    def test_regr_avgy_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regravgy=RegrAvgY(y='int2', x='int1'))\n        self.assertEqual(values, {'regravgy': None})\n\n    def test_regr_count_general(self):\n        values = StatTestModel.objects.aggregate(regrcount=RegrCount(y='int2', x='int1'))\n        self.assertEqual(values, {'regrcount': 3})\n\n    def test_regr_count_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regrcount=RegrCount(y='int2', x='int1'))\n        self.assertEqual(values, {'regrcount': 0})\n\n    def test_regr_intercept_general(self):\n        values = StatTestModel.objects.aggregate(regrintercept=RegrIntercept(y='int2', x='int1'))\n        self.assertEqual(values, {'regrintercept': 4})\n\n    def test_regr_intercept_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regrintercept=RegrIntercept(y='int2', x='int1'))\n        self.assertEqual(values, {'regrintercept': None})\n\n    def test_regr_r2_general(self):\n        values = StatTestModel.objects.aggregate(regrr2=RegrR2(y='int2', x='int1'))\n        self.assertEqual(values, {'regrr2': 1})\n\n    def test_regr_r2_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regrr2=RegrR2(y='int2', x='int1'))\n        self.assertEqual(values, {'regrr2': None})\n\n    def test_regr_slope_general(self):\n        values = StatTestModel.objects.aggregate(regrslope=RegrSlope(y='int2', x='int1'))\n        self.assertEqual(values, {'regrslope': -1})\n\n    def test_regr_slope_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regrslope=RegrSlope(y='int2', x='int1'))\n        self.assertEqual(values, {'regrslope': None})\n\n    def test_regr_sxx_general(self):\n        values = StatTestModel.objects.aggregate(regrsxx=RegrSXX(y='int2', x='int1'))\n        self.assertEqual(values, {'regrsxx': 2.0})\n\n    def test_regr_sxx_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regrsxx=RegrSXX(y='int2', x='int1'))\n        self.assertEqual(values, {'regrsxx': None})\n\n    def test_regr_sxy_general(self):\n        values = StatTestModel.objects.aggregate(regrsxy=RegrSXY(y='int2', x='int1'))\n        self.assertEqual(values, {'regrsxy': -2.0})\n\n    def test_regr_sxy_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regrsxy=RegrSXY(y='int2', x='int1'))\n        self.assertEqual(values, {'regrsxy': None})\n\n    def test_regr_syy_general(self):\n        values = StatTestModel.objects.aggregate(regrsyy=RegrSYY(y='int2', x='int1'))\n        self.assertEqual(values, {'regrsyy': 2.0})\n\n    def test_regr_syy_empty_result(self):\n        StatTestModel.objects.all().delete()\n        values = StatTestModel.objects.aggregate(regrsyy=RegrSYY(y='int2', x='int1'))\n        self.assertEqual(values, {'regrsyy': None})\n\n    def test_regr_avgx_with_related_obj_and_number_as_argument(self):\n        \"\"\"\n        This is more complex test to check if JOIN on field and\n        number as argument works as expected.\n        \"\"\"\n        values = StatTestModel.objects.aggregate(complex_regravgx=RegrAvgX(y=5, x='related_field__integer_field'))\n        self.assertEqual(values, {'complex_regravgx': 1.0})\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_aggregates.py", "id": "85ddd0ba58771ac6aad78135ee9bfc15", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/postgres_tests/test_aggregates.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}