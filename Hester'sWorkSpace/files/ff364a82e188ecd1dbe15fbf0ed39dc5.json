{"author": "audreyr", "code": "# -*- coding: utf-8 -*-\n\n\"\"\"\ntest_generate_hooks\n-------------------\n\nTests formerly known from a unittest residing in test_generate.py named\nTestHooks.test_ignore_hooks_dirs\nTestHooks.test_run_python_hooks\nTestHooks.test_run_python_hooks_cwd\nTestHooks.test_run_shell_hooks\n\"\"\"\n\nfrom __future__ import unicode_literals\nimport errno\nimport os\nimport sys\nimport stat\nimport pytest\n\nfrom cookiecutter import generate\nfrom cookiecutter import utils\nfrom cookiecutter.exceptions import FailedHookException\n\nWINDOWS = sys.platform.startswith('win')\n\n\n@pytest.fixture(scope='function')\ndef remove_additional_folders(request):\n    \"\"\"\n    Remove some special folders which are created by the tests.\n    \"\"\"\n    def fin_remove_additional_folders():\n        directories_to_delete = [\n            'tests/test-pyhooks/inputpyhooks',\n            'inputpyhooks',\n            'inputhooks',\n            'tests/test-shellhooks',\n            'tests/test-hooks',\n        ]\n        for directory in directories_to_delete:\n            if os.path.exists(directory):\n                utils.rmtree(directory)\n    request.addfinalizer(fin_remove_additional_folders)\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')\ndef test_ignore_hooks_dirs():\n    generate.generate_files(\n        context={\n            'cookiecutter': {'pyhooks': 'pyhooks'}\n        },\n        repo_dir='tests/test-pyhooks/',\n        output_dir='tests/test-pyhooks/'\n    )\n    assert not os.path.exists('tests/test-pyhooks/inputpyhooks/hooks')\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')\ndef test_run_python_hooks():\n    generate.generate_files(\n        context={\n            'cookiecutter': {'pyhooks': 'pyhooks'}\n        },\n        repo_dir='tests/test-pyhooks/'.replace(\"/\", os.sep),\n        output_dir='tests/test-pyhooks/'.replace(\"/\", os.sep)\n    )\n    assert os.path.exists('tests/test-pyhooks/inputpyhooks/python_pre.txt')\n    assert os.path.exists('tests/test-pyhooks/inputpyhooks/python_post.txt')\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')\ndef test_run_python_hooks_cwd():\n    generate.generate_files(\n        context={\n            'cookiecutter': {'pyhooks': 'pyhooks'}\n        },\n        repo_dir='tests/test-pyhooks/'\n    )\n    assert os.path.exists('inputpyhooks/python_pre.txt')\n    assert os.path.exists('inputpyhooks/python_post.txt')\n\n\n@pytest.mark.skipif(WINDOWS, reason='OSError.errno=8 is not thrown on Windows')\n@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')\ndef test_empty_hooks():\n    \n    \n    with pytest.raises(FailedHookException) as excinfo:\n        generate.generate_files(\n            context={\n                'cookiecutter': {'shellhooks': 'shellhooks'}\n            },\n            repo_dir='tests/test-shellhooks-empty/',\n            overwrite_if_exists=True\n        )\n    assert 'shebang' in str(excinfo.value)\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')\ndef test_oserror_hooks(mocker):\n\n    message = 'Out of memory'\n\n    err = OSError(message)\n    err.errno = errno.ENOMEM\n\n    prompt = mocker.patch('subprocess.Popen')\n    prompt.side_effect = err\n\n    with pytest.raises(FailedHookException) as excinfo:\n        generate.generate_files(\n            context={\n                'cookiecutter': {'shellhooks': 'shellhooks'}\n            },\n            repo_dir='tests/test-shellhooks-empty/',\n            overwrite_if_exists=True\n        )\n    assert message in str(excinfo.value)\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')\ndef test_run_failing_hook_removes_output_directory():\n    repo_path = os.path.abspath('tests/test-hooks/')\n    hooks_path = os.path.abspath('tests/test-hooks/hooks')\n\n    hook_dir = os.path.join(repo_path, 'hooks')\n    template = os.path.join(repo_path, 'input{{cookiecutter.hooks}}')\n    os.mkdir(repo_path)\n    os.mkdir(hook_dir)\n    os.mkdir(template)\n\n    hook_path = os.path.join(hooks_path, 'pre_gen_project.py')\n\n    with open(hook_path, 'w') as f:\n        f.write(\"#!/usr/bin/env python\\n\")\n        f.write(\"import sys; sys.exit(1)\\n\")\n\n    with pytest.raises(FailedHookException) as excinfo:\n        generate.generate_files(\n            context={\n                'cookiecutter': {'hooks': 'hooks'}\n            },\n            repo_dir='tests/test-hooks/',\n            overwrite_if_exists=True\n        )\n\n    assert 'Hook script failed' in str(excinfo.value)\n    assert not os.path.exists('inputhooks')\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')\ndef test_run_failing_hook_preserves_existing_output_directory():\n    repo_path = os.path.abspath('tests/test-hooks/')\n    hooks_path = os.path.abspath('tests/test-hooks/hooks')\n\n    hook_dir = os.path.join(repo_path, 'hooks')\n    template = os.path.join(repo_path, 'input{{cookiecutter.hooks}}')\n    os.mkdir(repo_path)\n    os.mkdir(hook_dir)\n    os.mkdir(template)\n\n    hook_path = os.path.join(hooks_path, 'pre_gen_project.py')\n\n    with open(hook_path, 'w') as f:\n        f.write(\"#!/usr/bin/env python\\n\")\n        f.write(\"import sys; sys.exit(1)\\n\")\n\n    os.mkdir('inputhooks')\n    with pytest.raises(FailedHookException) as excinfo:\n        generate.generate_files(\n            context={\n                'cookiecutter': {'hooks': 'hooks'}\n            },\n            repo_dir='tests/test-hooks/',\n            overwrite_if_exists=True\n        )\n\n    assert 'Hook script failed' in str(excinfo.value)\n    assert os.path.exists('inputhooks')\n\n\ndef make_test_repo(name):\n    hooks = os.path.join(name, 'hooks')\n    template = os.path.join(name, 'input{{cookiecutter.shellhooks}}')\n    os.mkdir(name)\n    os.mkdir(hooks)\n    os.mkdir(template)\n\n    with open(os.path.join(template, 'README.rst'), 'w') as f:\n        f.write(\"foo\\n===\\n\\nbar\\n\")\n\n    if sys.platform.startswith('win'):\n        filename = os.path.join(hooks, 'pre_gen_project.bat')\n        with open(filename, 'w') as f:\n            f.write(\"@echo off\\n\")\n            f.write(\"\\n\")\n            f.write(\"echo pre generation hook\\n\")\n            f.write(\"echo. >shell_pre.txt\\n\")\n\n        filename = os.path.join(hooks, 'post_gen_project.bat')\n        with open(filename, 'w') as f:\n            f.write(\"@echo off\\n\")\n            f.write(\"\\n\")\n            f.write(\"echo post generation hook\\n\")\n            f.write(\"echo. >shell_post.txt\\n\")\n    else:\n        filename = os.path.join(hooks, 'pre_gen_project.sh')\n        with open(filename, 'w') as f:\n            f.write(\"#!/bin/bash\\n\")\n            f.write(\"\\n\")\n            f.write(\"echo 'pre generation hook';\\n\")\n            f.write(\"touch 'shell_pre.txt'\\n\")\n        \n        os.chmod(filename, os.stat(filename).st_mode | stat.S_IXUSR)\n\n        filename = os.path.join(hooks, 'post_gen_project.sh')\n        with open(filename, 'w') as f:\n            f.write(\"#!/bin/bash\\n\")\n            f.write(\"\\n\")\n            f.write(\"echo 'post generation hook';\\n\")\n            f.write(\"touch 'shell_post.txt'\\n\")\n        \n        os.chmod(filename, os.stat(filename).st_mode | stat.S_IXUSR)\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')\ndef test_run_shell_hooks():\n    make_test_repo('tests/test-shellhooks')\n    generate.generate_files(\n        context={\n            'cookiecutter': {'shellhooks': 'shellhooks'}\n        },\n        repo_dir='tests/test-shellhooks/',\n        output_dir='tests/test-shellhooks/'\n    )\n    shell_pre_file = 'tests/test-shellhooks/inputshellhooks/shell_pre.txt'\n    shell_post_file = 'tests/test-shellhooks/inputshellhooks/shell_post.txt'\n    assert os.path.exists(shell_pre_file)\n    assert os.path.exists(shell_post_file)\n", "comments": "    test generate hooks                      tests formerly known unittest residing test generate py named testhooks test ignore hooks dirs testhooks test run python hooks testhooks test run python hooks cwd testhooks test run shell hooks        future   import unicode literals import errno import os import sys import stat import pytest  cookiecutter import generate cookiecutter import utils cookiecutter exceptions import failedhookexception  windows   sys platform startswith( win )    pytest fixture(scope  function ) def remove additional folders(request)              remove special folders created tests                 coding  utf 8        oserror errno 8 thrown windows script empty    always runs shell instead needing shebang     set execute bit    set execute bit ", "content": "# -*- coding: utf-8 -*-\n\n\"\"\"\ntest_generate_hooks\n-------------------\n\nTests formerly known from a unittest residing in test_generate.py named\nTestHooks.test_ignore_hooks_dirs\nTestHooks.test_run_python_hooks\nTestHooks.test_run_python_hooks_cwd\nTestHooks.test_run_shell_hooks\n\"\"\"\n\nfrom __future__ import unicode_literals\nimport errno\nimport os\nimport sys\nimport stat\nimport pytest\n\nfrom cookiecutter import generate\nfrom cookiecutter import utils\nfrom cookiecutter.exceptions import FailedHookException\n\nWINDOWS = sys.platform.startswith('win')\n\n\n@pytest.fixture(scope='function')\ndef remove_additional_folders(request):\n    \"\"\"\n    Remove some special folders which are created by the tests.\n    \"\"\"\n    def fin_remove_additional_folders():\n        directories_to_delete = [\n            'tests/test-pyhooks/inputpyhooks',\n            'inputpyhooks',\n            'inputhooks',\n            'tests/test-shellhooks',\n            'tests/test-hooks',\n        ]\n        for directory in directories_to_delete:\n            if os.path.exists(directory):\n                utils.rmtree(directory)\n    request.addfinalizer(fin_remove_additional_folders)\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')\ndef test_ignore_hooks_dirs():\n    generate.generate_files(\n        context={\n            'cookiecutter': {'pyhooks': 'pyhooks'}\n        },\n        repo_dir='tests/test-pyhooks/',\n        output_dir='tests/test-pyhooks/'\n    )\n    assert not os.path.exists('tests/test-pyhooks/inputpyhooks/hooks')\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')\ndef test_run_python_hooks():\n    generate.generate_files(\n        context={\n            'cookiecutter': {'pyhooks': 'pyhooks'}\n        },\n        repo_dir='tests/test-pyhooks/'.replace(\"/\", os.sep),\n        output_dir='tests/test-pyhooks/'.replace(\"/\", os.sep)\n    )\n    assert os.path.exists('tests/test-pyhooks/inputpyhooks/python_pre.txt')\n    assert os.path.exists('tests/test-pyhooks/inputpyhooks/python_post.txt')\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')\ndef test_run_python_hooks_cwd():\n    generate.generate_files(\n        context={\n            'cookiecutter': {'pyhooks': 'pyhooks'}\n        },\n        repo_dir='tests/test-pyhooks/'\n    )\n    assert os.path.exists('inputpyhooks/python_pre.txt')\n    assert os.path.exists('inputpyhooks/python_post.txt')\n\n\n@pytest.mark.skipif(WINDOWS, reason='OSError.errno=8 is not thrown on Windows')\n@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')\ndef test_empty_hooks():\n    # OSError.errno=8 is not thrown on Windows when the script is empty\n    # because it always runs through shell instead of needing a shebang.\n    with pytest.raises(FailedHookException) as excinfo:\n        generate.generate_files(\n            context={\n                'cookiecutter': {'shellhooks': 'shellhooks'}\n            },\n            repo_dir='tests/test-shellhooks-empty/',\n            overwrite_if_exists=True\n        )\n    assert 'shebang' in str(excinfo.value)\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')\ndef test_oserror_hooks(mocker):\n\n    message = 'Out of memory'\n\n    err = OSError(message)\n    err.errno = errno.ENOMEM\n\n    prompt = mocker.patch('subprocess.Popen')\n    prompt.side_effect = err\n\n    with pytest.raises(FailedHookException) as excinfo:\n        generate.generate_files(\n            context={\n                'cookiecutter': {'shellhooks': 'shellhooks'}\n            },\n            repo_dir='tests/test-shellhooks-empty/',\n            overwrite_if_exists=True\n        )\n    assert message in str(excinfo.value)\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')\ndef test_run_failing_hook_removes_output_directory():\n    repo_path = os.path.abspath('tests/test-hooks/')\n    hooks_path = os.path.abspath('tests/test-hooks/hooks')\n\n    hook_dir = os.path.join(repo_path, 'hooks')\n    template = os.path.join(repo_path, 'input{{cookiecutter.hooks}}')\n    os.mkdir(repo_path)\n    os.mkdir(hook_dir)\n    os.mkdir(template)\n\n    hook_path = os.path.join(hooks_path, 'pre_gen_project.py')\n\n    with open(hook_path, 'w') as f:\n        f.write(\"#!/usr/bin/env python\\n\")\n        f.write(\"import sys; sys.exit(1)\\n\")\n\n    with pytest.raises(FailedHookException) as excinfo:\n        generate.generate_files(\n            context={\n                'cookiecutter': {'hooks': 'hooks'}\n            },\n            repo_dir='tests/test-hooks/',\n            overwrite_if_exists=True\n        )\n\n    assert 'Hook script failed' in str(excinfo.value)\n    assert not os.path.exists('inputhooks')\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')\ndef test_run_failing_hook_preserves_existing_output_directory():\n    repo_path = os.path.abspath('tests/test-hooks/')\n    hooks_path = os.path.abspath('tests/test-hooks/hooks')\n\n    hook_dir = os.path.join(repo_path, 'hooks')\n    template = os.path.join(repo_path, 'input{{cookiecutter.hooks}}')\n    os.mkdir(repo_path)\n    os.mkdir(hook_dir)\n    os.mkdir(template)\n\n    hook_path = os.path.join(hooks_path, 'pre_gen_project.py')\n\n    with open(hook_path, 'w') as f:\n        f.write(\"#!/usr/bin/env python\\n\")\n        f.write(\"import sys; sys.exit(1)\\n\")\n\n    os.mkdir('inputhooks')\n    with pytest.raises(FailedHookException) as excinfo:\n        generate.generate_files(\n            context={\n                'cookiecutter': {'hooks': 'hooks'}\n            },\n            repo_dir='tests/test-hooks/',\n            overwrite_if_exists=True\n        )\n\n    assert 'Hook script failed' in str(excinfo.value)\n    assert os.path.exists('inputhooks')\n\n\ndef make_test_repo(name):\n    hooks = os.path.join(name, 'hooks')\n    template = os.path.join(name, 'input{{cookiecutter.shellhooks}}')\n    os.mkdir(name)\n    os.mkdir(hooks)\n    os.mkdir(template)\n\n    with open(os.path.join(template, 'README.rst'), 'w') as f:\n        f.write(\"foo\\n===\\n\\nbar\\n\")\n\n    if sys.platform.startswith('win'):\n        filename = os.path.join(hooks, 'pre_gen_project.bat')\n        with open(filename, 'w') as f:\n            f.write(\"@echo off\\n\")\n            f.write(\"\\n\")\n            f.write(\"echo pre generation hook\\n\")\n            f.write(\"echo. >shell_pre.txt\\n\")\n\n        filename = os.path.join(hooks, 'post_gen_project.bat')\n        with open(filename, 'w') as f:\n            f.write(\"@echo off\\n\")\n            f.write(\"\\n\")\n            f.write(\"echo post generation hook\\n\")\n            f.write(\"echo. >shell_post.txt\\n\")\n    else:\n        filename = os.path.join(hooks, 'pre_gen_project.sh')\n        with open(filename, 'w') as f:\n            f.write(\"#!/bin/bash\\n\")\n            f.write(\"\\n\")\n            f.write(\"echo 'pre generation hook';\\n\")\n            f.write(\"touch 'shell_pre.txt'\\n\")\n        # Set the execute bit\n        os.chmod(filename, os.stat(filename).st_mode | stat.S_IXUSR)\n\n        filename = os.path.join(hooks, 'post_gen_project.sh')\n        with open(filename, 'w') as f:\n            f.write(\"#!/bin/bash\\n\")\n            f.write(\"\\n\")\n            f.write(\"echo 'post generation hook';\\n\")\n            f.write(\"touch 'shell_post.txt'\\n\")\n        # Set the execute bit\n        os.chmod(filename, os.stat(filename).st_mode | stat.S_IXUSR)\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_additional_folders')\ndef test_run_shell_hooks():\n    make_test_repo('tests/test-shellhooks')\n    generate.generate_files(\n        context={\n            'cookiecutter': {'shellhooks': 'shellhooks'}\n        },\n        repo_dir='tests/test-shellhooks/',\n        output_dir='tests/test-shellhooks/'\n    )\n    shell_pre_file = 'tests/test-shellhooks/inputshellhooks/shell_pre.txt'\n    shell_post_file = 'tests/test-shellhooks/inputshellhooks/shell_post.txt'\n    assert os.path.exists(shell_pre_file)\n    assert os.path.exists(shell_post_file)\n", "description": "A command-line utility that creates projects from cookiecutters (project templates). E.g. Python package projects, jQuery plugin projects.", "file_name": "test_generate_hooks.py", "id": "ff364a82e188ecd1dbe15fbf0ed39dc5", "language": "Python", "project_name": "cookiecutter", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/audreyr-cookiecutter/audreyr-cookiecutter-7154cf2/tests/test_generate_hooks.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:52:22Z", "url": "https://github.com/audreyr/cookiecutter", "wiki": true}