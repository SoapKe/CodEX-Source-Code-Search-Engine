{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestPalindrome(object):\n\n    def test_palindrome(self):\n        print('Test: Empty list')\n        linked_list = MyLinkedList()\n        assert_equal(linked_list.is_palindrome(), False)\n\n        print('Test: Single element list')\n        head = Node(1)\n        linked_list = MyLinkedList(head)\n        assert_equal(linked_list.is_palindrome(), False)\n\n        print('Test: Two element list, not a palindrome')\n        linked_list.append(2)\n        assert_equal(linked_list.is_palindrome(), False)\n\n        print('Test: General case: Palindrome with even length')\n        head = Node('a')\n        linked_list = MyLinkedList(head)\n        linked_list.append('b')\n        linked_list.append('b')\n        linked_list.append('a')\n        assert_equal(linked_list.is_palindrome(), True)\n\n        print('Test: General case: Palindrome with odd length')\n        head = Node(1)\n        linked_list = MyLinkedList(head)\n        linked_list.append(2)\n        linked_list.append(3)\n        linked_list.append(2)\n        linked_list.append(1)\n        assert_equal(linked_list.is_palindrome(), True)\n\n        print('Success: test_palindrome')\n\n\ndef main():\n    test = TestPalindrome()\n    test.test_palindrome()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\n\nclass TestPalindrome(object):\n\n    def test_palindrome(self):\n        print('Test: Empty list')\n        linked_list = MyLinkedList()\n        assert_equal(linked_list.is_palindrome(), False)\n\n        print('Test: Single element list')\n        head = Node(1)\n        linked_list = MyLinkedList(head)\n        assert_equal(linked_list.is_palindrome(), False)\n\n        print('Test: Two element list, not a palindrome')\n        linked_list.append(2)\n        assert_equal(linked_list.is_palindrome(), False)\n\n        print('Test: General case: Palindrome with even length')\n        head = Node('a')\n        linked_list = MyLinkedList(head)\n        linked_list.append('b')\n        linked_list.append('b')\n        linked_list.append('a')\n        assert_equal(linked_list.is_palindrome(), True)\n\n        print('Test: General case: Palindrome with odd length')\n        head = Node(1)\n        linked_list = MyLinkedList(head)\n        linked_list.append(2)\n        linked_list.append(3)\n        linked_list.append(2)\n        linked_list.append(1)\n        assert_equal(linked_list.is_palindrome(), True)\n\n        print('Success: test_palindrome')\n\n\ndef main():\n    test = TestPalindrome()\n    test.test_palindrome()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_palindrome.py", "id": "318bc55a8547a0305cdfe6524279dadd", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/linked_lists/palindrome/test_palindrome.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}