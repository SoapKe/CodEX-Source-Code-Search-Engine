{"author": "ansible", "code": " (c) 2016 Red Hat Inc.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.iosxr import iosxr_command\nfrom units.modules.utils import set_module_args\nfrom .iosxr_module import TestIosxrModule, load_fixture\n\n\nclass TestIosxrCommandModule(TestIosxrModule):\n\n    module = iosxr_command\n\n    def setUp(self):\n        super(TestIosxrCommandModule, self).setUp()\n\n        self.mock_run_command = patch('ansible.modules.network.iosxr.iosxr_command.run_command')\n        self.run_command = self.mock_run_command.start()\n\n    def tearDown(self):\n        super(TestIosxrCommandModule, self).tearDown()\n\n        self.mock_run_command.stop()\n\n    def load_fixtures(self, commands=None):\n\n        def load_from_file(*args, **kwargs):\n            module, commands = args\n            output = list()\n\n            for item in commands:\n                try:\n                    command = item['command']\n                except Exception:\n                    command = item\n                filename = str(command).replace(' ', '_')\n                output.append(load_fixture(filename))\n            return output\n\n        self.run_command.side_effect = load_from_file\n\n    def test_iosxr_command_simple(self):\n        set_module_args(dict(commands=['show version']))\n        result = self.execute_module()\n        self.assertEqual(len(result['stdout']), 1)\n        self.assertTrue(result['stdout'][0].startswith('Cisco IOS XR Software'))\n\n    def test_iosxr_command_multiple(self):\n        set_module_args(dict(commands=['show version', 'show version']))\n        result = self.execute_module()\n        self.assertEqual(len(result['stdout']), 2)\n        self.assertTrue(result['stdout'][0].startswith('Cisco IOS XR Software'))\n\n    def test_iosxr_command_wait_for(self):\n        wait_for = 'result[0] contains \"Cisco IOS\"'\n        set_module_args(dict(commands=['show version'], wait_for=wait_for))\n        self.execute_module()\n\n    def test_iosxr_command_wait_for_fails(self):\n        wait_for = 'result[0] contains \"test string\"'\n        set_module_args(dict(commands=['show version'], wait_for=wait_for))\n        self.execute_module(failed=True)\n        self.assertEqual(self.run_command.call_count, 10)\n\n    def test_iosxr_command_retries(self):\n        wait_for = 'result[0] contains \"test string\"'\n        set_module_args(dict(commands=['show version'], wait_for=wait_for, retries=2))\n        self.execute_module(failed=True)\n        self.assertEqual(self.run_command.call_count, 2)\n\n    def test_iosxr_command_match_any(self):\n        wait_for = ['result[0] contains \"Cisco IOS\"',\n                    'result[0] contains \"test string\"']\n        set_module_args(dict(commands=['show version'], wait_for=wait_for, match='any'))\n        self.execute_module()\n\n    def test_iosxr_command_match_all(self):\n        wait_for = ['result[0] contains \"Cisco IOS\"',\n                    'result[0] contains \"XR Software\"']\n        set_module_args(dict(commands=['show version'], wait_for=wait_for, match='all'))\n        self.execute_module()\n\n    def test_iosxr_command_match_all_failure(self):\n        wait_for = ['result[0] contains \"Cisco IOS\"',\n                    'result[0] contains \"test string\"']\n        commands = ['show version', 'show version']\n        set_module_args(dict(commands=commands, wait_for=wait_for, match='all'))\n        self.execute_module(failed=True)\n", "comments": "  (c) 2016 red hat inc        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish ", "content": "# (c) 2016 Red Hat Inc.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.iosxr import iosxr_command\nfrom units.modules.utils import set_module_args\nfrom .iosxr_module import TestIosxrModule, load_fixture\n\n\nclass TestIosxrCommandModule(TestIosxrModule):\n\n    module = iosxr_command\n\n    def setUp(self):\n        super(TestIosxrCommandModule, self).setUp()\n\n        self.mock_run_command = patch('ansible.modules.network.iosxr.iosxr_command.run_command')\n        self.run_command = self.mock_run_command.start()\n\n    def tearDown(self):\n        super(TestIosxrCommandModule, self).tearDown()\n\n        self.mock_run_command.stop()\n\n    def load_fixtures(self, commands=None):\n\n        def load_from_file(*args, **kwargs):\n            module, commands = args\n            output = list()\n\n            for item in commands:\n                try:\n                    command = item['command']\n                except Exception:\n                    command = item\n                filename = str(command).replace(' ', '_')\n                output.append(load_fixture(filename))\n            return output\n\n        self.run_command.side_effect = load_from_file\n\n    def test_iosxr_command_simple(self):\n        set_module_args(dict(commands=['show version']))\n        result = self.execute_module()\n        self.assertEqual(len(result['stdout']), 1)\n        self.assertTrue(result['stdout'][0].startswith('Cisco IOS XR Software'))\n\n    def test_iosxr_command_multiple(self):\n        set_module_args(dict(commands=['show version', 'show version']))\n        result = self.execute_module()\n        self.assertEqual(len(result['stdout']), 2)\n        self.assertTrue(result['stdout'][0].startswith('Cisco IOS XR Software'))\n\n    def test_iosxr_command_wait_for(self):\n        wait_for = 'result[0] contains \"Cisco IOS\"'\n        set_module_args(dict(commands=['show version'], wait_for=wait_for))\n        self.execute_module()\n\n    def test_iosxr_command_wait_for_fails(self):\n        wait_for = 'result[0] contains \"test string\"'\n        set_module_args(dict(commands=['show version'], wait_for=wait_for))\n        self.execute_module(failed=True)\n        self.assertEqual(self.run_command.call_count, 10)\n\n    def test_iosxr_command_retries(self):\n        wait_for = 'result[0] contains \"test string\"'\n        set_module_args(dict(commands=['show version'], wait_for=wait_for, retries=2))\n        self.execute_module(failed=True)\n        self.assertEqual(self.run_command.call_count, 2)\n\n    def test_iosxr_command_match_any(self):\n        wait_for = ['result[0] contains \"Cisco IOS\"',\n                    'result[0] contains \"test string\"']\n        set_module_args(dict(commands=['show version'], wait_for=wait_for, match='any'))\n        self.execute_module()\n\n    def test_iosxr_command_match_all(self):\n        wait_for = ['result[0] contains \"Cisco IOS\"',\n                    'result[0] contains \"XR Software\"']\n        set_module_args(dict(commands=['show version'], wait_for=wait_for, match='all'))\n        self.execute_module()\n\n    def test_iosxr_command_match_all_failure(self):\n        wait_for = ['result[0] contains \"Cisco IOS\"',\n                    'result[0] contains \"test string\"']\n        commands = ['show version', 'show version']\n        set_module_args(dict(commands=commands, wait_for=wait_for, match='all'))\n        self.execute_module(failed=True)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_iosxr_command.py", "id": "efedffb465d57de3762bb56a0ef858d0", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/iosxr/test_iosxr_command.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}