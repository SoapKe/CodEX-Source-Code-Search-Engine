{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass VesselIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vessel\\.com/(?:videos|embed)/(?P<id>[0-9a-zA-Z-_]+)'\n    _API_URL_TEMPLATE = 'https://www.vessel.com/api/view/items/%s'\n    _LOGIN_URL = 'https://www.vessel.com/api/account/login'\n    _NETRC_MACHINE = 'vessel'\n    _TESTS = [{\n        'url': 'https://www.vessel.com/videos/HDN7G5UMs',\n        'md5': '455cdf8beb71c6dd797fd2f3818d05c4',\n        'info_dict': {\n            'id': 'HDN7G5UMs',\n            'ext': 'mp4',\n            'title': 'Nvidia GeForce GTX Titan X - The Best Video Card on the Market?',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20150317',\n            'description': 'Did Nvidia pull out all the stops on the Titan X, or does its performance leave something to be desired?',\n            'timestamp': int,\n        },\n    }, {\n        'url': 'https://www.vessel.com/embed/G4U7gUJ6a?w=615&h=346',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.vessel.com/videos/F01_dsLj1',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.vessel.com/videos/RRX-sir-J',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [url for _, url in re.findall(\n            r'<iframe[^>]+src=([\"\\'])((?:https?:)?//(?:www\\.)?vessel\\.com/embed/[0-9a-zA-Z-_]+.*?)\\1',\n            webpage)]\n\n    @staticmethod\n    def make_json_request(url, data):\n        payload = json.dumps(data).encode('utf-8')\n        req = sanitized_Request(url, payload)\n        req.add_header('Content-Type', 'application/json; charset=utf-8')\n        return req\n\n    @staticmethod\n    def find_assets(data, asset_type, asset_id=None):\n        for asset in data.get('assets', []):\n            if not asset.get('type') == asset_type:\n                continue\n            elif asset_id is not None and not asset.get('id') == asset_id:\n                continue\n            else:\n                yield asset\n\n    def _check_access_rights(self, data):\n        access_info = data.get('__view', {})\n        if not access_info.get('allow_access', True):\n            err_code = access_info.get('error_code') or ''\n            if err_code == 'ITEM_PAID_ONLY':\n                raise ExtractorError(\n                    'This video requires subscription.', expected=True)\n            else:\n                raise ExtractorError(\n                    'Access to this content is restricted. (%s said: %s)' % (self.IE_NAME, err_code), expected=True)\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n        self.report_login()\n        data = {\n            'client_id': 'web',\n            'type': 'password',\n            'user_key': username,\n            'password': password,\n        }\n        login_request = VesselIE.make_json_request(self._LOGIN_URL, data)\n        self._download_webpage(login_request, None, False, 'Wrong login info')\n\n    def _real_initialize(self):\n        self._login()\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n        data = self._parse_json(self._search_regex(\n            r'App\\.bootstrapData\\((.*?)\\);', webpage, 'data'), video_id)\n        asset_id = data['model']['data']['id']\n\n        req = VesselIE.make_json_request(\n            self._API_URL_TEMPLATE % asset_id, {'client': 'web'})\n        data = self._download_json(req, video_id)\n        video_asset_id = data.get('main_video_asset')\n\n        self._check_access_rights(data)\n\n        try:\n            video_asset = next(\n                VesselIE.find_assets(data, 'video', asset_id=video_asset_id))\n        except StopIteration:\n            raise ExtractorError('No video assets found')\n\n        formats = []\n        for f in video_asset.get('sources', []):\n            location = f.get('location')\n            if not location:\n                continue\n            name = f.get('name')\n            if name == 'hls-index':\n                formats.extend(self._extract_m3u8_formats(\n                    location, video_id, ext='mp4',\n                    entry_protocol='m3u8_native', m3u8_id='m3u8', fatal=False))\n            elif name == 'dash-index':\n                formats.extend(self._extract_mpd_formats(\n                    location, video_id, mpd_id='dash', fatal=False))\n            else:\n                formats.append({\n                    'format_id': name,\n                    'tbr': f.get('bitrate'),\n                    'height': f.get('height'),\n                    'width': f.get('width'),\n                    'url': location,\n                })\n        self._sort_formats(formats)\n\n        thumbnails = []\n        for im_asset in VesselIE.find_assets(data, 'image'):\n            thumbnails.append({\n                'url': im_asset['location'],\n                'width': im_asset.get('width', 0),\n                'height': im_asset.get('height', 0),\n            })\n\n        return {\n            'id': video_id,\n            'title': data['title'],\n            'formats': formats,\n            'thumbnails': thumbnails,\n            'description': data.get('short_description'),\n            'duration': data.get('duration'),\n            'comment_count': data.get('comment_count'),\n            'like_count': data.get('like_count'),\n            'view_count': data.get('view_count'),\n            'timestamp': parse_iso8601(data.get('released_at')),\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass VesselIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vessel\\.com/(?:videos|embed)/(?P<id>[0-9a-zA-Z-_]+)'\n    _API_URL_TEMPLATE = 'https://www.vessel.com/api/view/items/%s'\n    _LOGIN_URL = 'https://www.vessel.com/api/account/login'\n    _NETRC_MACHINE = 'vessel'\n    _TESTS = [{\n        'url': 'https://www.vessel.com/videos/HDN7G5UMs',\n        'md5': '455cdf8beb71c6dd797fd2f3818d05c4',\n        'info_dict': {\n            'id': 'HDN7G5UMs',\n            'ext': 'mp4',\n            'title': 'Nvidia GeForce GTX Titan X - The Best Video Card on the Market?',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20150317',\n            'description': 'Did Nvidia pull out all the stops on the Titan X, or does its performance leave something to be desired?',\n            'timestamp': int,\n        },\n    }, {\n        'url': 'https://www.vessel.com/embed/G4U7gUJ6a?w=615&h=346',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.vessel.com/videos/F01_dsLj1',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.vessel.com/videos/RRX-sir-J',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [url for _, url in re.findall(\n            r'<iframe[^>]+src=([\"\\'])((?:https?:)?//(?:www\\.)?vessel\\.com/embed/[0-9a-zA-Z-_]+.*?)\\1',\n            webpage)]\n\n    @staticmethod\n    def make_json_request(url, data):\n        payload = json.dumps(data).encode('utf-8')\n        req = sanitized_Request(url, payload)\n        req.add_header('Content-Type', 'application/json; charset=utf-8')\n        return req\n\n    @staticmethod\n    def find_assets(data, asset_type, asset_id=None):\n        for asset in data.get('assets', []):\n            if not asset.get('type') == asset_type:\n                continue\n            elif asset_id is not None and not asset.get('id') == asset_id:\n                continue\n            else:\n                yield asset\n\n    def _check_access_rights(self, data):\n        access_info = data.get('__view', {})\n        if not access_info.get('allow_access', True):\n            err_code = access_info.get('error_code') or ''\n            if err_code == 'ITEM_PAID_ONLY':\n                raise ExtractorError(\n                    'This video requires subscription.', expected=True)\n            else:\n                raise ExtractorError(\n                    'Access to this content is restricted. (%s said: %s)' % (self.IE_NAME, err_code), expected=True)\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n        self.report_login()\n        data = {\n            'client_id': 'web',\n            'type': 'password',\n            'user_key': username,\n            'password': password,\n        }\n        login_request = VesselIE.make_json_request(self._LOGIN_URL, data)\n        self._download_webpage(login_request, None, False, 'Wrong login info')\n\n    def _real_initialize(self):\n        self._login()\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n        data = self._parse_json(self._search_regex(\n            r'App\\.bootstrapData\\((.*?)\\);', webpage, 'data'), video_id)\n        asset_id = data['model']['data']['id']\n\n        req = VesselIE.make_json_request(\n            self._API_URL_TEMPLATE % asset_id, {'client': 'web'})\n        data = self._download_json(req, video_id)\n        video_asset_id = data.get('main_video_asset')\n\n        self._check_access_rights(data)\n\n        try:\n            video_asset = next(\n                VesselIE.find_assets(data, 'video', asset_id=video_asset_id))\n        except StopIteration:\n            raise ExtractorError('No video assets found')\n\n        formats = []\n        for f in video_asset.get('sources', []):\n            location = f.get('location')\n            if not location:\n                continue\n            name = f.get('name')\n            if name == 'hls-index':\n                formats.extend(self._extract_m3u8_formats(\n                    location, video_id, ext='mp4',\n                    entry_protocol='m3u8_native', m3u8_id='m3u8', fatal=False))\n            elif name == 'dash-index':\n                formats.extend(self._extract_mpd_formats(\n                    location, video_id, mpd_id='dash', fatal=False))\n            else:\n                formats.append({\n                    'format_id': name,\n                    'tbr': f.get('bitrate'),\n                    'height': f.get('height'),\n                    'width': f.get('width'),\n                    'url': location,\n                })\n        self._sort_formats(formats)\n\n        thumbnails = []\n        for im_asset in VesselIE.find_assets(data, 'image'):\n            thumbnails.append({\n                'url': im_asset['location'],\n                'width': im_asset.get('width', 0),\n                'height': im_asset.get('height', 0),\n            })\n\n        return {\n            'id': video_id,\n            'title': data['title'],\n            'formats': formats,\n            'thumbnails': thumbnails,\n            'description': data.get('short_description'),\n            'duration': data.get('duration'),\n            'comment_count': data.get('comment_count'),\n            'like_count': data.get('like_count'),\n            'view_count': data.get('view_count'),\n            'timestamp': parse_iso8601(data.get('released_at')),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vessel.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vessel.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}