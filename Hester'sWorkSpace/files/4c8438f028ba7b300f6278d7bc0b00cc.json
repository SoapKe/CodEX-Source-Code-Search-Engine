{"author": "sympy", "code": "from sympy.stats.drv_types import (PoissonDistribution, GeometricDistribution,\n        Poisson, Geometric)\nfrom sympy.abc import x\nfrom sympy import S, Sum\nfrom sympy.stats import P, E, variance, density, characteristic_function\nfrom sympy.stats.rv import sample\nfrom sympy.core.relational import Eq, Ne\nfrom sympy.functions.elementary.exponential import exp\n\ndef test_PoissonDistribution():\n    l = 3\n    p = PoissonDistribution(l)\n    assert abs(p.cdf(10).evalf() - 1) < .001\n    assert p.expectation(x, x) == l\n    assert p.expectation(x**2, x) - p.expectation(x, x)**2 == l\n\ndef test_Poisson():\n    l = 3\n    x = Poisson('x', l)\n    assert E(x) == l\n    assert variance(x) == l\n    assert density(x) == PoissonDistribution(l)\n    assert isinstance(E(x, evaluate=False), Sum)\n    assert isinstance(E(2*x, evaluate=False), Sum)\n    assert characteristic_function(x)(0).doit() == 1\n\ndef test_GeometricDistribution():\n    p = S.One / 5\n    d = GeometricDistribution(p)\n    assert d.expectation(x, x) == 1/p\n    assert d.expectation(x**2, x) - d.expectation(x, x)**2 == (1-p)/p**2\n    assert abs(d.cdf(20000).evalf() - 1) < .001\n    assert d.characteristic_function(0).doit() == 1\n\ndef test_sample():\n    X, Y, Z = Geometric('X', S(1)/2), Poisson('Y', 4), Poisson('Z', 1000)\n    W = Poisson('W', S(1)/100)\n    assert sample(X) in X.pspace.domain.set\n    assert sample(Y) in Y.pspace.domain.set\n    assert sample(Z) in Z.pspace.domain.set\n    assert sample(W) in W.pspace.domain.set\n\ndef test_discrete_probability():\n    X = Geometric('X', S(1)/5)\n    Y = Poisson('Y', 4)\n    G = Geometric('e', x)\n    assert P(Eq(X, 3)) == S(16)/125\n    assert P(X < 3) == S(9)/25\n    assert P(X > 3) == S(64)/125\n    assert P(X >= 3) == S(16)/25\n    assert P(X <= 3) == S(61)/125\n    assert P(Ne(X, 3)) == S(109)/125\n    assert P(Eq(Y, 3)) == 32*exp(-4)/3\n    assert P(Y < 3) == 13*exp(-4)\n    assert P(Y > 3).equals(32*(-S(71)/32 + 3*exp(4)/32)*exp(-4)/3)\n    assert P(Y >= 3).equals(32*(-39/32 + 3*exp(4)/32)*exp(-4)/3)\n    assert P(Y <= 3) == 71*exp(-4)/3\n    assert P(Ne(Y, 3)).equals(\n        13*exp(-4) + 32*(-71/32 + 3*exp(4)/32)*exp(-4)/3)\n    assert P(X < S.Infinity) is S.One\n    assert P(X > S.Infinity) is S.Zero\n    assert P(G < 3) == x*(-x + 1) + x\n    assert P(Eq(G, 3)) == x*(-x + 1)**2\n", "comments": "", "content": "from sympy.stats.drv_types import (PoissonDistribution, GeometricDistribution,\n        Poisson, Geometric)\nfrom sympy.abc import x\nfrom sympy import S, Sum\nfrom sympy.stats import P, E, variance, density, characteristic_function\nfrom sympy.stats.rv import sample\nfrom sympy.core.relational import Eq, Ne\nfrom sympy.functions.elementary.exponential import exp\n\ndef test_PoissonDistribution():\n    l = 3\n    p = PoissonDistribution(l)\n    assert abs(p.cdf(10).evalf() - 1) < .001\n    assert p.expectation(x, x) == l\n    assert p.expectation(x**2, x) - p.expectation(x, x)**2 == l\n\ndef test_Poisson():\n    l = 3\n    x = Poisson('x', l)\n    assert E(x) == l\n    assert variance(x) == l\n    assert density(x) == PoissonDistribution(l)\n    assert isinstance(E(x, evaluate=False), Sum)\n    assert isinstance(E(2*x, evaluate=False), Sum)\n    assert characteristic_function(x)(0).doit() == 1\n\ndef test_GeometricDistribution():\n    p = S.One / 5\n    d = GeometricDistribution(p)\n    assert d.expectation(x, x) == 1/p\n    assert d.expectation(x**2, x) - d.expectation(x, x)**2 == (1-p)/p**2\n    assert abs(d.cdf(20000).evalf() - 1) < .001\n    assert d.characteristic_function(0).doit() == 1\n\ndef test_sample():\n    X, Y, Z = Geometric('X', S(1)/2), Poisson('Y', 4), Poisson('Z', 1000)\n    W = Poisson('W', S(1)/100)\n    assert sample(X) in X.pspace.domain.set\n    assert sample(Y) in Y.pspace.domain.set\n    assert sample(Z) in Z.pspace.domain.set\n    assert sample(W) in W.pspace.domain.set\n\ndef test_discrete_probability():\n    X = Geometric('X', S(1)/5)\n    Y = Poisson('Y', 4)\n    G = Geometric('e', x)\n    assert P(Eq(X, 3)) == S(16)/125\n    assert P(X < 3) == S(9)/25\n    assert P(X > 3) == S(64)/125\n    assert P(X >= 3) == S(16)/25\n    assert P(X <= 3) == S(61)/125\n    assert P(Ne(X, 3)) == S(109)/125\n    assert P(Eq(Y, 3)) == 32*exp(-4)/3\n    assert P(Y < 3) == 13*exp(-4)\n    assert P(Y > 3).equals(32*(-S(71)/32 + 3*exp(4)/32)*exp(-4)/3)\n    assert P(Y >= 3).equals(32*(-39/32 + 3*exp(4)/32)*exp(-4)/3)\n    assert P(Y <= 3) == 71*exp(-4)/3\n    assert P(Ne(Y, 3)).equals(\n        13*exp(-4) + 32*(-71/32 + 3*exp(4)/32)*exp(-4)/3)\n    assert P(X < S.Infinity) is S.One\n    assert P(X > S.Infinity) is S.Zero\n    assert P(G < 3) == x*(-x + 1) + x\n    assert P(Eq(G, 3)) == x*(-x + 1)**2\n", "description": "A computer algebra system written in pure Python", "file_name": "test_discrete_rv.py", "id": "4c8438f028ba7b300f6278d7bc0b00cc", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/stats/tests/test_discrete_rv.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}