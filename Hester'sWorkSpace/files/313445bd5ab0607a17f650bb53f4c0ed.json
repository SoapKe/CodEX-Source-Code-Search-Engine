{"author": "ansible", "code": "\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nfrom __future__ import absolute_import, division, print_function\n\n__metaclass__ = type\n\nANSIBLE_METADATA = {'status': ['preview'],\n                    'supported_by': 'community',\n                    'metadata_version': '1.1'}\n\nDOCUMENTATION = '''\n---\nmodule: fmgr_script\nversion_added: \"2.5\"\nauthor: Andrew Welsh\nshort_description: Add/Edit/Delete and execute scripts\ndescription: Create/edit/delete scripts and execute the scripts on the FortiManager using jsonrpc API\n\noptions:\n  adom:\n    description:\n      - The administrative domain (admon) the configuration belongs to\n    required: true\n  vdom:\n    description:\n      - The virtual domain (vdom) the configuration belongs to\n  host:\n    description:\n      - The FortiManager's Address.\n    required: true\n  username:\n    description:\n      - The username to log into the FortiManager\n    required: true\n  password:\n    description:\n      - The password associated with the username account.\n    required: false\n  state:\n    description:\n      - The desired state of the specified object.\n      - present - will create a script.\n      - execute - execute the scipt.\n      - delete - delete the script.\n    required: false\n    default: present\n    choices: [\"present\", \"execute\", \"delete\"]\n  script_name:\n    description:\n      - The name of the script.\n    required: True\n  script_type:\n    description:\n      - The type of script (CLI or TCL).\n    required: false\n  script_target:\n    description:\n      - The target of the script to be run.\n    required: false\n  script_description:\n    description:\n      - The description of the script.\n    required: false\n  script_content:\n    description:\n      - The script content that will be executed.\n    required: false\n  script_scope:\n    description:\n      - (datasource) The devices that the script will run on, can have both device member and device group member.\n    required: false\n  script_package:\n    description:\n      - (datasource) Policy package object to run the script against\n    required: false\n'''\n\nEXAMPLES = '''\n- name: CREATE SCRIPT\n  fmgr_script:\n    host: \"{{inventory_hostname}}\"\n    username: \"{{ username }}\"\n    password: \"{{ password }}\"\n    adom: \"root\"\n    script_name: \"TestScript\"\n    script_type: \"cli\"\n    script_target: \"remote_device\"\n    script_description: \"Create by Ansible\"\n    script_content: \"get system status\"\n\n- name: EXECUTE SCRIPT\n  fmgr_script:\n    host: \"{{inventory_hostname}}\"\n    username: \"{{ username }}\"\n    password: \"{{ password }}\"\n    adom: \"root\"\n    script_name: \"TestScript\"\n    state: \"execute\"\n    script_scope: \"FGT1,FGT2\"\n\n- name: DELETE SCRIPT\n  fmgr_script:\n    host: \"{{inventory_hostname}}\"\n    username: \"{{ username }}\"\n    password: \"{{ password }}\"\n    adom: \"root\"\n    script_name: \"TestScript\"\n    state: \"delete\"\n'''\n\nRETURN = \"\"\"\napi_result:\n  description: full API response, includes status code and message\n  returned: always\n  type: string\n\"\"\"\n\nfrom ansible.module_utils.basic import AnsibleModule, env_fallback\nfrom ansible.module_utils.network.fortimanager.fortimanager import AnsibleFortiManager\n\n check for pyFMG lib\ntry:\n    from pyFMG.fortimgr import FortiManager\n    HAS_PYFMGR = True\nexcept ImportError:\n    HAS_PYFMGR = False\n\n\ndef set_script(fmg, script_name, script_type, script_content, script_desc, script_target, adom):\n    \"\"\"\n    This method sets a script.\n    \"\"\"\n\n    datagram = {\n        'content': script_content,\n        'desc': script_desc,\n        'name': script_name,\n        'target': script_target,\n        'type': script_type,\n    }\n\n    url = '/dvmdb/adom/{adom}/script/'.format(adom=adom)\n    response = fmg.set(url, datagram)\n    return response\n\n\ndef delete_script(fmg, script_name, adom):\n    \"\"\"\n    This method deletes a script.\n    \"\"\"\n\n    datagram = {\n        'name': script_name,\n    }\n\n    url = '/dvmdb/adom/{adom}/script/{script_name}'.format(adom=adom, script_name=script_name)\n    response = fmg.delete(url, datagram)\n    return response\n\n\ndef execute_script(fmg, script_name, scope, package, adom, vdom):\n    \"\"\"\n    This method will execute a specific script.\n    \"\"\"\n\n    scope_list = list()\n    scope = scope.replace(' ', '')\n    scope = scope.split(',')\n    for dev_name in scope:\n        scope_list.append({'name': dev_name, 'vdom': vdom})\n\n    datagram = {\n        'adom': adom,\n        'script': script_name,\n        'package': package,\n        'scope': scope_list,\n    }\n\n    url = '/dvmdb/adom/{adom}/script/execute'.format(adom=adom)\n    response = fmg.execute(url, datagram)\n    return response\n\n\ndef main():\n    argument_spec = dict(\n        adom=dict(required=False, type=\"str\"),\n        vdom=dict(required=False, type=\"str\"),\n        host=dict(required=True, type=\"str\"),\n        password=dict(fallback=(env_fallback, [\"ANSIBLE_NET_PASSWORD\"]), no_log=True),\n        username=dict(fallback=(env_fallback, [\"ANSIBLE_NET_USERNAME\"])),\n        state=dict(choices=[\"execute\", \"delete\", \"present\"], type=\"str\"),\n\n        script_name=dict(required=True, type=\"str\"),\n        script_type=dict(required=False, type=\"str\"),\n        script_target=dict(required=False, type=\"str\"),\n        script_description=dict(required=False, type=\"str\"),\n        script_content=dict(required=False, type=\"str\"),\n        script_scope=dict(required=False, type=\"str\"),\n        script_package=dict(required=False, type=\"str\"),\n    )\n\n    module = AnsibleModule(argument_spec, supports_check_mode=True,)\n\n     check if params are set\n    if module.params[\"host\"] is None or module.params[\"username\"] is None:\n        module.fail_json(msg=\"Host and username are required for connection\")\n\n     check if login failed\n    fmg = AnsibleFortiManager(module, module.params[\"host\"], module.params[\"username\"], module.params[\"password\"])\n    response = fmg.login()\n\n    if \"FortiManager instance connnected\" not in str(response):\n        module.fail_json(msg=\"Connection to FortiManager Failed\")\n    else:\n        adom = module.params[\"adom\"]\n        if adom is None:\n            adom = \"root\"\n        vdom = module.params[\"vdom\"]\n        if vdom is None:\n            vdom = \"root\"\n        state = module.params[\"state\"]\n        if state is None:\n            state = \"present\"\n\n        script_name = module.params[\"script_name\"]\n        script_type = module.params[\"script_type\"]\n        script_target = module.params[\"script_target\"]\n        script_description = module.params[\"script_description\"]\n        script_content = module.params[\"script_content\"]\n        script_scope = module.params[\"script_scope\"]\n        script_package = module.params[\"script_package\"]\n\n         if state is present (default), then add the script\n        if state == \"present\":\n            results = set_script(fmg, script_name, script_type, script_content, script_description, script_target, adom)\n            if not results[0] == 0:\n                if isinstance(results[1], list):\n                    module.fail_json(msg=\"Adding Script Failed\", **results)\n                else:\n                    module.fail_json(msg=\"Adding Script Failed\")\n        elif state == \"execute\":\n            results = execute_script(fmg, script_name, script_scope, script_package, adom, vdom)\n            if not results[0] == 0:\n                module.fail_json(msg=\"Script Execution Failed\", **results)\n        elif state == \"delete\":\n            results = delete_script(fmg, script_name, adom)\n            if not results[0] == 0:\n                module.fail_json(msg=\"Script Deletion Failed\", **results)\n\n        fmg.logout()\n\n         results is returned as a tuple\n        return module.exit_json(**results[1])\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "    api result    description  full api response  includes status code message   returned  always   type  string      ansible module utils basic import ansiblemodule  env fallback ansible module utils network fortimanager fortimanager import ansiblefortimanager    check pyfmg lib try      pyfmg fortimgr import fortimanager     has pyfmgr   true except importerror      has pyfmgr   false   def set script(fmg  script name  script type  script content  script desc  script target  adom)              this method sets script               datagram              content   script content           desc   script desc           name   script name           target   script target           type   script type             url     dvmdb adom  adom  script   format(adom adom)     response   fmg set(url  datagram)     return response   def delete script(fmg  script name  adom)              this method deletes script               datagram              name   script name             url     dvmdb adom  adom  script  script name   format(adom adom  script name script name)     response   fmg delete(url  datagram)     return response   def execute script(fmg  script name  scope  package  adom  vdom)              this method execute specific script                   module  fmgr script version added   2 5  author  andrew welsh short description  add edit delete execute scripts description  create edit delete scripts execute scripts fortimanager using jsonrpc api  options    adom      description          the administrative domain (admon) configuration belongs     required  true   vdom      description          the virtual domain (vdom) configuration belongs   host      description          the fortimanager address      required  true   username      description          the username log fortimanager     required  true   password      description          the password associated username account      required  false   state      description          the desired state specified object          present   create script          execute   execute scipt          delete   delete script      required  false     default  present     choices    present    execute    delete     script name      description          the name script      required  true   script type      description          the type script (cli tcl)      required  false   script target      description          the target script run      required  false   script description      description          the description script      required  false   script content      description          the script content executed      required  false   script scope      description          (datasource) the devices script run  device member device group member      required  false   script package      description          (datasource) policy package object run script     required  false      examples         name  create script   fmgr script      host     inventory hostname        username      username         password      password         adom   root      script name   testscript      script type   cli      script target   remote device      script description   create ansible      script content   get system status     name  execute script   fmgr script      host     inventory hostname        username      username         password      password         adom   root      script name   testscript      state   execute      script scope   fgt1 fgt2     name  delete script   fmgr script      host     inventory hostname        username      username         password      password         adom   root      script name   testscript      state   delete          usr bin python       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          check pyfmg lib    check params set    check login failed    state present (default)  add script    results returned tuple ", "content": "#!/usr/bin/python\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nfrom __future__ import absolute_import, division, print_function\n\n__metaclass__ = type\n\nANSIBLE_METADATA = {'status': ['preview'],\n                    'supported_by': 'community',\n                    'metadata_version': '1.1'}\n\nDOCUMENTATION = '''\n---\nmodule: fmgr_script\nversion_added: \"2.5\"\nauthor: Andrew Welsh\nshort_description: Add/Edit/Delete and execute scripts\ndescription: Create/edit/delete scripts and execute the scripts on the FortiManager using jsonrpc API\n\noptions:\n  adom:\n    description:\n      - The administrative domain (admon) the configuration belongs to\n    required: true\n  vdom:\n    description:\n      - The virtual domain (vdom) the configuration belongs to\n  host:\n    description:\n      - The FortiManager's Address.\n    required: true\n  username:\n    description:\n      - The username to log into the FortiManager\n    required: true\n  password:\n    description:\n      - The password associated with the username account.\n    required: false\n  state:\n    description:\n      - The desired state of the specified object.\n      - present - will create a script.\n      - execute - execute the scipt.\n      - delete - delete the script.\n    required: false\n    default: present\n    choices: [\"present\", \"execute\", \"delete\"]\n  script_name:\n    description:\n      - The name of the script.\n    required: True\n  script_type:\n    description:\n      - The type of script (CLI or TCL).\n    required: false\n  script_target:\n    description:\n      - The target of the script to be run.\n    required: false\n  script_description:\n    description:\n      - The description of the script.\n    required: false\n  script_content:\n    description:\n      - The script content that will be executed.\n    required: false\n  script_scope:\n    description:\n      - (datasource) The devices that the script will run on, can have both device member and device group member.\n    required: false\n  script_package:\n    description:\n      - (datasource) Policy package object to run the script against\n    required: false\n'''\n\nEXAMPLES = '''\n- name: CREATE SCRIPT\n  fmgr_script:\n    host: \"{{inventory_hostname}}\"\n    username: \"{{ username }}\"\n    password: \"{{ password }}\"\n    adom: \"root\"\n    script_name: \"TestScript\"\n    script_type: \"cli\"\n    script_target: \"remote_device\"\n    script_description: \"Create by Ansible\"\n    script_content: \"get system status\"\n\n- name: EXECUTE SCRIPT\n  fmgr_script:\n    host: \"{{inventory_hostname}}\"\n    username: \"{{ username }}\"\n    password: \"{{ password }}\"\n    adom: \"root\"\n    script_name: \"TestScript\"\n    state: \"execute\"\n    script_scope: \"FGT1,FGT2\"\n\n- name: DELETE SCRIPT\n  fmgr_script:\n    host: \"{{inventory_hostname}}\"\n    username: \"{{ username }}\"\n    password: \"{{ password }}\"\n    adom: \"root\"\n    script_name: \"TestScript\"\n    state: \"delete\"\n'''\n\nRETURN = \"\"\"\napi_result:\n  description: full API response, includes status code and message\n  returned: always\n  type: string\n\"\"\"\n\nfrom ansible.module_utils.basic import AnsibleModule, env_fallback\nfrom ansible.module_utils.network.fortimanager.fortimanager import AnsibleFortiManager\n\n# check for pyFMG lib\ntry:\n    from pyFMG.fortimgr import FortiManager\n    HAS_PYFMGR = True\nexcept ImportError:\n    HAS_PYFMGR = False\n\n\ndef set_script(fmg, script_name, script_type, script_content, script_desc, script_target, adom):\n    \"\"\"\n    This method sets a script.\n    \"\"\"\n\n    datagram = {\n        'content': script_content,\n        'desc': script_desc,\n        'name': script_name,\n        'target': script_target,\n        'type': script_type,\n    }\n\n    url = '/dvmdb/adom/{adom}/script/'.format(adom=adom)\n    response = fmg.set(url, datagram)\n    return response\n\n\ndef delete_script(fmg, script_name, adom):\n    \"\"\"\n    This method deletes a script.\n    \"\"\"\n\n    datagram = {\n        'name': script_name,\n    }\n\n    url = '/dvmdb/adom/{adom}/script/{script_name}'.format(adom=adom, script_name=script_name)\n    response = fmg.delete(url, datagram)\n    return response\n\n\ndef execute_script(fmg, script_name, scope, package, adom, vdom):\n    \"\"\"\n    This method will execute a specific script.\n    \"\"\"\n\n    scope_list = list()\n    scope = scope.replace(' ', '')\n    scope = scope.split(',')\n    for dev_name in scope:\n        scope_list.append({'name': dev_name, 'vdom': vdom})\n\n    datagram = {\n        'adom': adom,\n        'script': script_name,\n        'package': package,\n        'scope': scope_list,\n    }\n\n    url = '/dvmdb/adom/{adom}/script/execute'.format(adom=adom)\n    response = fmg.execute(url, datagram)\n    return response\n\n\ndef main():\n    argument_spec = dict(\n        adom=dict(required=False, type=\"str\"),\n        vdom=dict(required=False, type=\"str\"),\n        host=dict(required=True, type=\"str\"),\n        password=dict(fallback=(env_fallback, [\"ANSIBLE_NET_PASSWORD\"]), no_log=True),\n        username=dict(fallback=(env_fallback, [\"ANSIBLE_NET_USERNAME\"])),\n        state=dict(choices=[\"execute\", \"delete\", \"present\"], type=\"str\"),\n\n        script_name=dict(required=True, type=\"str\"),\n        script_type=dict(required=False, type=\"str\"),\n        script_target=dict(required=False, type=\"str\"),\n        script_description=dict(required=False, type=\"str\"),\n        script_content=dict(required=False, type=\"str\"),\n        script_scope=dict(required=False, type=\"str\"),\n        script_package=dict(required=False, type=\"str\"),\n    )\n\n    module = AnsibleModule(argument_spec, supports_check_mode=True,)\n\n    # check if params are set\n    if module.params[\"host\"] is None or module.params[\"username\"] is None:\n        module.fail_json(msg=\"Host and username are required for connection\")\n\n    # check if login failed\n    fmg = AnsibleFortiManager(module, module.params[\"host\"], module.params[\"username\"], module.params[\"password\"])\n    response = fmg.login()\n\n    if \"FortiManager instance connnected\" not in str(response):\n        module.fail_json(msg=\"Connection to FortiManager Failed\")\n    else:\n        adom = module.params[\"adom\"]\n        if adom is None:\n            adom = \"root\"\n        vdom = module.params[\"vdom\"]\n        if vdom is None:\n            vdom = \"root\"\n        state = module.params[\"state\"]\n        if state is None:\n            state = \"present\"\n\n        script_name = module.params[\"script_name\"]\n        script_type = module.params[\"script_type\"]\n        script_target = module.params[\"script_target\"]\n        script_description = module.params[\"script_description\"]\n        script_content = module.params[\"script_content\"]\n        script_scope = module.params[\"script_scope\"]\n        script_package = module.params[\"script_package\"]\n\n        # if state is present (default), then add the script\n        if state == \"present\":\n            results = set_script(fmg, script_name, script_type, script_content, script_description, script_target, adom)\n            if not results[0] == 0:\n                if isinstance(results[1], list):\n                    module.fail_json(msg=\"Adding Script Failed\", **results)\n                else:\n                    module.fail_json(msg=\"Adding Script Failed\")\n        elif state == \"execute\":\n            results = execute_script(fmg, script_name, script_scope, script_package, adom, vdom)\n            if not results[0] == 0:\n                module.fail_json(msg=\"Script Execution Failed\", **results)\n        elif state == \"delete\":\n            results = delete_script(fmg, script_name, adom)\n            if not results[0] == 0:\n                module.fail_json(msg=\"Script Deletion Failed\", **results)\n\n        fmg.logout()\n\n        # results is returned as a tuple\n        return module.exit_json(**results[1])\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "fmgr_script.py", "id": "313445bd5ab0607a17f650bb53f4c0ed", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/fortimanager/fmgr_script.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}