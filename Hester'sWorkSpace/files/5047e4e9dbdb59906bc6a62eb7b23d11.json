{"author": "yandex", "code": "from nose.tools import assert_equals, assert_true, assert_false\nfrom tests.asserts import assert_is_instance, assert_is_none, assert_is_not_none\nfrom gixy.parser.nginx_parser import NginxParser\nfrom gixy.directives.block import *\n\n# TODO(buglloc): what about include block?\n\n\ndef _get_parsed(config):\n    root = NginxParser(cwd='', allow_includes=False).parse(config)\n    return root.children[0]\n\n\ndef test_block():\n    config = 'some {some;}'\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, Block)\n    assert_true(directive.is_block)\n    assert_true(directive.self_context)\n    assert_false(directive.provide_variables)\n\n\ndef test_http():\n    config = '''\nhttp {\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n}\n    '''\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, HttpBlock)\n    assert_true(directive.is_block)\n    assert_true(directive.self_context)\n    assert_false(directive.provide_variables)\n\n\ndef test_server():\n    config = '''\nserver {\n    listen 80;\n    server_name _;\n    server_name cool.io;\n}\n\n    '''\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, ServerBlock)\n    assert_true(directive.is_block)\n    assert_true(directive.self_context)\n    assert_equals([d.args[0] for d in directive.get_names()], ['_', 'cool.io'])\n    assert_false(directive.provide_variables)\n\n\ndef test_location():\n    config = '''\nlocation / {\n}\n    '''\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, LocationBlock)\n    assert_true(directive.is_block)\n    assert_true(directive.self_context)\n    assert_true(directive.provide_variables)\n    assert_is_none(directive.modifier)\n    assert_equals(directive.path, '/')\n    assert_false(directive.is_internal)\n\n\ndef test_location_internal():\n    config = '''\nlocation / {\n    internal;\n}\n    '''\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, LocationBlock)\n    assert_true(directive.is_internal)\n\n\ndef test_location_modifier():\n    config = '''\nlocation = / {\n}\n    '''\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, LocationBlock)\n    assert_equals(directive.modifier, '=')\n    assert_equals(directive.path, '/')\n\n\ndef test_if():\n    config = '''\nif ($some) {\n}\n    '''\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, IfBlock)\n    assert_true(directive.is_block)\n    assert_false(directive.self_context)\n    assert_false(directive.provide_variables)\n    assert_equals(directive.variable, '$some')\n    assert_is_none(directive.operand)\n    assert_is_none(directive.value)\n\n\ndef test_if_modifier():\n    config = '''\nif (-f /some) {\n}\n    '''\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, IfBlock)\n    assert_equals(directive.operand, '-f')\n    assert_equals(directive.value, '/some')\n    assert_is_none(directive.variable)\n\n\ndef test_if_variable():\n    config = '''\nif ($http_some = '/some') {\n}\n    '''\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, IfBlock)\n    assert_equals(directive.variable, '$http_some')\n    assert_equals(directive.operand, '=')\n    assert_equals(directive.value, '/some')\n\n\ndef test_block_some_flat():\n    config = '''\n    some {\n        default_type  application/octet-stream;\n        sendfile        on;\n        if (-f /some/) {\n            keepalive_timeout  65;\n        }\n    }\n        '''\n\n    directive = _get_parsed(config)\n    for d in ['default_type', 'sendfile', 'keepalive_timeout']:\n        c = directive.some(d, flat=True)\n        assert_is_not_none(c)\n        assert_equals(c.name, d)\n\n\ndef test_block_some_not_flat():\n    config = '''\n    some {\n        default_type  application/octet-stream;\n        sendfile        on;\n        if (-f /some/) {\n            keepalive_timeout  65;\n        }\n    }\n        '''\n\n    directive = _get_parsed(config)\n    c = directive.some('keepalive_timeout', flat=False)\n    assert_is_none(c)\n\n\ndef test_block_find_flat():\n    config = '''\n    some {\n        directive 1;\n        if (-f /some/) {\n            directive 2;\n        }\n    }\n        '''\n\n    directive = _get_parsed(config)\n    finds = directive.find('directive', flat=True)\n    assert_equals(len(finds), 2)\n    assert_equals([x.name for x in finds], ['directive', 'directive'])\n    assert_equals([x.args[0] for x in finds], ['1', '2'])\n\n\ndef test_block_find_not_flat():\n    config = '''\n    some {\n        directive 1;\n        if (-f /some/) {\n            directive 2;\n        }\n    }\n        '''\n\n    directive = _get_parsed(config)\n    finds = directive.find('directive', flat=False)\n    assert_equals(len(finds), 1)\n    assert_equals([x.name for x in finds], ['directive'])\n    assert_equals([x.args[0] for x in finds], ['1'])\n", "comments": "    http       default type  application octet stream      sendfile             keepalive timeout  65                 directive    get parsed(config)     assert instance(directive  httpblock)     assert true(directive block)     assert true(directive self context)     assert false(directive provide variables)   def test server()      config       server       listen 80      server name        server name cool io                  directive    get parsed(config)     assert instance(directive  serverblock)     assert true(directive block)     assert true(directive self context)     assert equals( args 0  directive get names()          cool io  )     assert false(directive provide variables)   def test location()      config       location                    directive    get parsed(config)     assert instance(directive  locationblock)     assert true(directive block)     assert true(directive self context)     assert true(directive provide variables)     assert none(directive modifier)     assert equals(directive path     )     assert false(directive internal)   def test location internal()      config       location         internal                 directive    get parsed(config)     assert instance(directive  locationblock)     assert true(directive internal)   def test location modifier()      config       location                      directive    get parsed(config)     assert instance(directive  locationblock)     assert equals(directive modifier     )     assert equals(directive path     )   def test if()      config       ( some)                  directive    get parsed(config)     assert instance(directive  ifblock)     assert true(directive block)     assert false(directive self context)     assert false(directive provide variables)     assert equals(directive variable    )     assert none(directive operand)     assert none(directive value)   def test modifier()      config       ( f  some)                  directive    get parsed(config)     assert instance(directive  ifblock)     assert equals(directive operand    f )     assert equals(directive value    )     assert none(directive variable)   def test variable()      config       ( http     )                  directive    get parsed(config)     assert instance(directive  ifblock)     assert equals(directive variable    http )     assert equals(directive operand     )     assert equals(directive value    )   def test block flat()      config                     default type  application octet stream          sendfile                 ( f  )               keepalive timeout  65                                   directive    get parsed(config)       default type    sendfile    keepalive timeout            c   directive some(d  flat true)         assert none(c)         assert equals(c name  d)   def test block flat()      config                     default type  application octet stream          sendfile                 ( f  )               keepalive timeout  65                                   directive    get parsed(config)     c   directive some( keepalive timeout   flat false)     assert none(c)   def test block find flat()      config                     directive 1          ( f  )               directive 2                                   directive    get parsed(config)     finds   directive find( directive   flat true)     assert equals(len(finds)  2)     assert equals( x name x finds     directive    directive  )     assert equals( x args 0  x finds     1    2  )   def test block find flat()      config                     directive 1          ( f  )               directive 2                                 todo(buglloc)  include block  ", "content": "from nose.tools import assert_equals, assert_true, assert_false\nfrom tests.asserts import assert_is_instance, assert_is_none, assert_is_not_none\nfrom gixy.parser.nginx_parser import NginxParser\nfrom gixy.directives.block import *\n\n# TODO(buglloc): what about include block?\n\n\ndef _get_parsed(config):\n    root = NginxParser(cwd='', allow_includes=False).parse(config)\n    return root.children[0]\n\n\ndef test_block():\n    config = 'some {some;}'\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, Block)\n    assert_true(directive.is_block)\n    assert_true(directive.self_context)\n    assert_false(directive.provide_variables)\n\n\ndef test_http():\n    config = '''\nhttp {\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n}\n    '''\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, HttpBlock)\n    assert_true(directive.is_block)\n    assert_true(directive.self_context)\n    assert_false(directive.provide_variables)\n\n\ndef test_server():\n    config = '''\nserver {\n    listen 80;\n    server_name _;\n    server_name cool.io;\n}\n\n    '''\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, ServerBlock)\n    assert_true(directive.is_block)\n    assert_true(directive.self_context)\n    assert_equals([d.args[0] for d in directive.get_names()], ['_', 'cool.io'])\n    assert_false(directive.provide_variables)\n\n\ndef test_location():\n    config = '''\nlocation / {\n}\n    '''\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, LocationBlock)\n    assert_true(directive.is_block)\n    assert_true(directive.self_context)\n    assert_true(directive.provide_variables)\n    assert_is_none(directive.modifier)\n    assert_equals(directive.path, '/')\n    assert_false(directive.is_internal)\n\n\ndef test_location_internal():\n    config = '''\nlocation / {\n    internal;\n}\n    '''\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, LocationBlock)\n    assert_true(directive.is_internal)\n\n\ndef test_location_modifier():\n    config = '''\nlocation = / {\n}\n    '''\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, LocationBlock)\n    assert_equals(directive.modifier, '=')\n    assert_equals(directive.path, '/')\n\n\ndef test_if():\n    config = '''\nif ($some) {\n}\n    '''\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, IfBlock)\n    assert_true(directive.is_block)\n    assert_false(directive.self_context)\n    assert_false(directive.provide_variables)\n    assert_equals(directive.variable, '$some')\n    assert_is_none(directive.operand)\n    assert_is_none(directive.value)\n\n\ndef test_if_modifier():\n    config = '''\nif (-f /some) {\n}\n    '''\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, IfBlock)\n    assert_equals(directive.operand, '-f')\n    assert_equals(directive.value, '/some')\n    assert_is_none(directive.variable)\n\n\ndef test_if_variable():\n    config = '''\nif ($http_some = '/some') {\n}\n    '''\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, IfBlock)\n    assert_equals(directive.variable, '$http_some')\n    assert_equals(directive.operand, '=')\n    assert_equals(directive.value, '/some')\n\n\ndef test_block_some_flat():\n    config = '''\n    some {\n        default_type  application/octet-stream;\n        sendfile        on;\n        if (-f /some/) {\n            keepalive_timeout  65;\n        }\n    }\n        '''\n\n    directive = _get_parsed(config)\n    for d in ['default_type', 'sendfile', 'keepalive_timeout']:\n        c = directive.some(d, flat=True)\n        assert_is_not_none(c)\n        assert_equals(c.name, d)\n\n\ndef test_block_some_not_flat():\n    config = '''\n    some {\n        default_type  application/octet-stream;\n        sendfile        on;\n        if (-f /some/) {\n            keepalive_timeout  65;\n        }\n    }\n        '''\n\n    directive = _get_parsed(config)\n    c = directive.some('keepalive_timeout', flat=False)\n    assert_is_none(c)\n\n\ndef test_block_find_flat():\n    config = '''\n    some {\n        directive 1;\n        if (-f /some/) {\n            directive 2;\n        }\n    }\n        '''\n\n    directive = _get_parsed(config)\n    finds = directive.find('directive', flat=True)\n    assert_equals(len(finds), 2)\n    assert_equals([x.name for x in finds], ['directive', 'directive'])\n    assert_equals([x.args[0] for x in finds], ['1', '2'])\n\n\ndef test_block_find_not_flat():\n    config = '''\n    some {\n        directive 1;\n        if (-f /some/) {\n            directive 2;\n        }\n    }\n        '''\n\n    directive = _get_parsed(config)\n    finds = directive.find('directive', flat=False)\n    assert_equals(len(finds), 1)\n    assert_equals([x.name for x in finds], ['directive'])\n    assert_equals([x.args[0] for x in finds], ['1'])\n", "description": "Nginx configuration static analyzer", "file_name": "test_block.py", "id": "5047e4e9dbdb59906bc6a62eb7b23d11", "language": "Python", "project_name": "gixy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/yandex-gixy/yandex-gixy-86b5e60/tests/directives/test_block.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:01:42Z", "url": "https://github.com/yandex/gixy", "wiki": true}