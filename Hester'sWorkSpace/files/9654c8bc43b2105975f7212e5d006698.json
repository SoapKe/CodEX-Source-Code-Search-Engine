{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom uuid import uuid4\nfrom six.moves.urllib.parse import urlencode\nfrom django.core.urlresolvers import reverse\nfrom sentry.utils.signing import sign\nfrom sentry.models import Project\n\nfrom sentry.testutils import TestCase, PermissionTestCase\n\n\nclass AcceptTransferProjectPermissionTest(PermissionTestCase):\n    def setUp(self):\n        super(AcceptTransferProjectPermissionTest, self).setUp()\n        self.project = self.create_project(teams=[self.team])\n        self.path = reverse('sentry-accept-project-transfer')\n\n    def test_team_admin_cannot_load(self):\n        self.assert_team_admin_cannot_access(self.path)\n\n\nclass AcceptTransferProjectTest(TestCase):\n    def setUp(self):\n        super(AcceptTransferProjectTest, self).setUp()\n        self.owner = self.create_user(email='example@example.com', is_superuser=False)\n        self.from_organization = self.create_organization(name='love', owner=self.owner)\n        self.to_organization = self.create_organization(name='lust', owner=self.owner)\n        self.from_team = self.create_team(name='bar', organization=self.from_organization)\n        self.to_team = self.create_team(name='bub', organization=self.to_organization)\n        user = self.create_user('admin@example.com')\n        self.member = self.create_member(\n            organization=self.from_organization,\n            user=user,\n            role='admin',\n            teams=[self.from_team],\n        )\n        self.project = self.create_project(name='proj', teams=[self.from_team])\n        self.transaction_id = uuid4().hex\n        self.path = reverse('sentry-accept-project-transfer')\n\n    def test_requires_authentication(self):\n        self.assertRequiresAuthentication(self.path, 'POST')\n\n    def test_handle_incorrect_url_data(self):\n        self.login_as(self.owner)\n        url_data = sign(\n            actor_id=self.member.id,\n            \n            from_organization_id=9999999,\n            project_id=self.project.id,\n            user_id=self.owner.id,\n            transaction_id=self.transaction_id)\n        resp = self.client.get(self.path + '?' + urlencode({'data': url_data}))\n        assert resp.status_code == 302\n        resp = self.client.get(self.path)\n        assert resp.status_code == 404\n\n    def test_renders_template_with_signed_link(self):\n        self.login_as(self.owner)\n        url_data = sign(\n            actor_id=self.member.user_id,\n            from_organization_id=self.from_organization.id,\n            project_id=self.project.id,\n            user_id=self.owner.id,\n            transaction_id=self.transaction_id)\n\n        resp = self.client.get(self.path + '?' + urlencode({'data': url_data}))\n        assert resp.status_code == 200\n        self.assertTemplateUsed(resp, 'sentry/projects/accept_project_transfer.html')\n        assert resp.context['project'] == self.project\n\n    def test_transfers_project_to_correct_organization(self):\n        self.login_as(self.owner)\n        url_data = sign(\n            actor_id=self.member.user_id,\n            from_organization_id=self.from_organization.id,\n            project_id=self.project.id,\n            user_id=self.owner.id,\n            transaction_id=self.transaction_id)\n\n        url = self.path + '?' + urlencode({'data': url_data})\n        resp = self.client.post(url, data={'team': self.to_team.id})\n        assert resp['location'] == 'http://testserver' + \\\n            reverse('sentry-organization-home', args=[self.to_team.organization.slug])\n\n        p = Project.objects.get(id=self.project.id)\n        assert p.organization_id == self.to_organization.id\n        assert p.teams.first() == self.to_team\n\n    def test_non_owner_cannot_transfer_project(self):\n        rando_user = self.create_user(email='blipp@bloop.com', is_superuser=False)\n        rando_org = self.create_organization(name='supreme beans')\n\n        self.login_as(rando_user)\n        url_data = sign(\n            actor_id=self.member.user_id,\n            from_organization_id=rando_org.id,\n            project_id=self.project.id,\n            user_id=rando_user.id,\n            transaction_id=self.transaction_id)\n\n        url = self.path + '?' + urlencode({'data': url_data})\n        resp = self.client.post(url, data={'team': self.to_team.id})\n        assert resp.status_code == 302\n        p = Project.objects.get(id=self.project.id)\n        assert p.organization_id == self.from_organization.id\n\n    def test_cannot_transfer_project_twice_from_same_org(self):\n        self.login_as(self.owner)\n        url_data = sign(\n            actor_id=self.member.user_id,\n            from_organization_id=self.from_organization.id,\n            project_id=self.project.id,\n            user_id=self.owner.id,\n            transaction_id=self.transaction_id)\n\n        url = self.path + '?' + urlencode({'data': url_data})\n        resp = self.client.post(url, data={'team': self.to_team.id})\n        assert resp['location'] == 'http://testserver' + \\\n            reverse('sentry-organization-home', args=[self.to_team.organization.slug])\n        resp = self.client.get(url)\n        assert resp.status_code == 302\n", "comments": "  this bad data ", "content": "from __future__ import absolute_import\n\nfrom uuid import uuid4\nfrom six.moves.urllib.parse import urlencode\nfrom django.core.urlresolvers import reverse\nfrom sentry.utils.signing import sign\nfrom sentry.models import Project\n\nfrom sentry.testutils import TestCase, PermissionTestCase\n\n\nclass AcceptTransferProjectPermissionTest(PermissionTestCase):\n    def setUp(self):\n        super(AcceptTransferProjectPermissionTest, self).setUp()\n        self.project = self.create_project(teams=[self.team])\n        self.path = reverse('sentry-accept-project-transfer')\n\n    def test_team_admin_cannot_load(self):\n        self.assert_team_admin_cannot_access(self.path)\n\n\nclass AcceptTransferProjectTest(TestCase):\n    def setUp(self):\n        super(AcceptTransferProjectTest, self).setUp()\n        self.owner = self.create_user(email='example@example.com', is_superuser=False)\n        self.from_organization = self.create_organization(name='love', owner=self.owner)\n        self.to_organization = self.create_organization(name='lust', owner=self.owner)\n        self.from_team = self.create_team(name='bar', organization=self.from_organization)\n        self.to_team = self.create_team(name='bub', organization=self.to_organization)\n        user = self.create_user('admin@example.com')\n        self.member = self.create_member(\n            organization=self.from_organization,\n            user=user,\n            role='admin',\n            teams=[self.from_team],\n        )\n        self.project = self.create_project(name='proj', teams=[self.from_team])\n        self.transaction_id = uuid4().hex\n        self.path = reverse('sentry-accept-project-transfer')\n\n    def test_requires_authentication(self):\n        self.assertRequiresAuthentication(self.path, 'POST')\n\n    def test_handle_incorrect_url_data(self):\n        self.login_as(self.owner)\n        url_data = sign(\n            actor_id=self.member.id,\n            # This is bad data\n            from_organization_id=9999999,\n            project_id=self.project.id,\n            user_id=self.owner.id,\n            transaction_id=self.transaction_id)\n        resp = self.client.get(self.path + '?' + urlencode({'data': url_data}))\n        assert resp.status_code == 302\n        resp = self.client.get(self.path)\n        assert resp.status_code == 404\n\n    def test_renders_template_with_signed_link(self):\n        self.login_as(self.owner)\n        url_data = sign(\n            actor_id=self.member.user_id,\n            from_organization_id=self.from_organization.id,\n            project_id=self.project.id,\n            user_id=self.owner.id,\n            transaction_id=self.transaction_id)\n\n        resp = self.client.get(self.path + '?' + urlencode({'data': url_data}))\n        assert resp.status_code == 200\n        self.assertTemplateUsed(resp, 'sentry/projects/accept_project_transfer.html')\n        assert resp.context['project'] == self.project\n\n    def test_transfers_project_to_correct_organization(self):\n        self.login_as(self.owner)\n        url_data = sign(\n            actor_id=self.member.user_id,\n            from_organization_id=self.from_organization.id,\n            project_id=self.project.id,\n            user_id=self.owner.id,\n            transaction_id=self.transaction_id)\n\n        url = self.path + '?' + urlencode({'data': url_data})\n        resp = self.client.post(url, data={'team': self.to_team.id})\n        assert resp['location'] == 'http://testserver' + \\\n            reverse('sentry-organization-home', args=[self.to_team.organization.slug])\n\n        p = Project.objects.get(id=self.project.id)\n        assert p.organization_id == self.to_organization.id\n        assert p.teams.first() == self.to_team\n\n    def test_non_owner_cannot_transfer_project(self):\n        rando_user = self.create_user(email='blipp@bloop.com', is_superuser=False)\n        rando_org = self.create_organization(name='supreme beans')\n\n        self.login_as(rando_user)\n        url_data = sign(\n            actor_id=self.member.user_id,\n            from_organization_id=rando_org.id,\n            project_id=self.project.id,\n            user_id=rando_user.id,\n            transaction_id=self.transaction_id)\n\n        url = self.path + '?' + urlencode({'data': url_data})\n        resp = self.client.post(url, data={'team': self.to_team.id})\n        assert resp.status_code == 302\n        p = Project.objects.get(id=self.project.id)\n        assert p.organization_id == self.from_organization.id\n\n    def test_cannot_transfer_project_twice_from_same_org(self):\n        self.login_as(self.owner)\n        url_data = sign(\n            actor_id=self.member.user_id,\n            from_organization_id=self.from_organization.id,\n            project_id=self.project.id,\n            user_id=self.owner.id,\n            transaction_id=self.transaction_id)\n\n        url = self.path + '?' + urlencode({'data': url_data})\n        resp = self.client.post(url, data={'team': self.to_team.id})\n        assert resp['location'] == 'http://testserver' + \\\n            reverse('sentry-organization-home', args=[self.to_team.organization.slug])\n        resp = self.client.get(url)\n        assert resp.status_code == 302\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_accept_project_transfer.py", "id": "9654c8bc43b2105975f7212e5d006698", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/web/frontend/test_accept_project_transfer.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}