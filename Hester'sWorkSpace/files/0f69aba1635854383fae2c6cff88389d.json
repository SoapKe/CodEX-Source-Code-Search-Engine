{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\n\n\nclass OktoberfestTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?oktoberfest-tv\\.de/[^/]+/[^/]+/video/(?P<id>[^/?\n\n    _TEST = {\n        'url': 'http://www.oktoberfest-tv.de/de/kameras/video/hb-zelt',\n        'info_dict': {\n            'id': 'hb-zelt',\n            'ext': 'mp4',\n            'title': 're:^Live-Kamera: Hofbr\u00e4uzelt [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._live_title(self._html_search_regex(\n            r'<h1><strong>.*?</strong>(.*?)</h1>', webpage, 'title'))\n\n        clip = self._search_regex(\n            r\"clip:\\s*\\{\\s*url:\\s*'([^']+)'\", webpage, 'clip')\n        ncurl = self._search_regex(\n            r\"netConnectionUrl:\\s*'([^']+)'\", webpage, 'rtmp base')\n        video_url = ncurl + clip\n        thumbnail = self._search_regex(\n            r\"canvas:\\s*\\{\\s*backgroundImage:\\s*'url\\(([^)]+)\\)'\", webpage,\n            'thumbnail', fatal=False)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'url': video_url,\n            'ext': 'mp4',\n            'is_live': True,\n            'thumbnail': thumbnail,\n        }\n", "comments": "# coding: utf-8\n#]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\n\n\nclass OktoberfestTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?oktoberfest-tv\\.de/[^/]+/[^/]+/video/(?P<id>[^/?#]+)'\n\n    _TEST = {\n        'url': 'http://www.oktoberfest-tv.de/de/kameras/video/hb-zelt',\n        'info_dict': {\n            'id': 'hb-zelt',\n            'ext': 'mp4',\n            'title': 're:^Live-Kamera: Hofbr\u00e4uzelt [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._live_title(self._html_search_regex(\n            r'<h1><strong>.*?</strong>(.*?)</h1>', webpage, 'title'))\n\n        clip = self._search_regex(\n            r\"clip:\\s*\\{\\s*url:\\s*'([^']+)'\", webpage, 'clip')\n        ncurl = self._search_regex(\n            r\"netConnectionUrl:\\s*'([^']+)'\", webpage, 'rtmp base')\n        video_url = ncurl + clip\n        thumbnail = self._search_regex(\n            r\"canvas:\\s*\\{\\s*backgroundImage:\\s*'url\\(([^)]+)\\)'\", webpage,\n            'thumbnail', fatal=False)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'url': video_url,\n            'ext': 'mp4',\n            'is_live': True,\n            'thumbnail': thumbnail,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "oktoberfesttv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/oktoberfesttv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}