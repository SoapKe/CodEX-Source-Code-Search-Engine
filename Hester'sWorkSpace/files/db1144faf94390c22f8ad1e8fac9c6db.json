{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom .youtube import YoutubeIE\nfrom ..compat import compat_b64decode\nfrom ..utils import (\n    clean_html,\n    ExtractorError\n)\n\n\nclass ChilloutzoneIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?chilloutzone\\.net/video/(?P<id>[\\w|-]+)\\.html'\n    _TESTS = [{\n        'url': 'http://www.chilloutzone.net/video/enemene-meck-alle-katzen-weg.html',\n        'md5': 'a76f3457e813ea0037e5244f509e66d1',\n        'info_dict': {\n            'id': 'enemene-meck-alle-katzen-weg',\n            'ext': 'mp4',\n            'title': 'Enemene Meck - Alle Katzen weg',\n            'description': 'Ist das der Umkehrschluss des Niesenden Panda-Babys?',\n        },\n    }, {\n        'note': 'Video hosted at YouTube',\n        'url': 'http://www.chilloutzone.net/video/eine-sekunde-bevor.html',\n        'info_dict': {\n            'id': '1YVQaAgHyRU',\n            'ext': 'mp4',\n            'title': '16 Photos Taken 1 Second Before Disaster',\n            'description': 'md5:58a8fcf6a459fe0a08f54140f0ad1814',\n            'uploader': 'BuzzFeedVideo',\n            'uploader_id': 'BuzzFeedVideo',\n            'upload_date': '20131105',\n        },\n    }, {\n        'note': 'Video hosted at Vimeo',\n        'url': 'http://www.chilloutzone.net/video/icon-blending.html',\n        'md5': '2645c678b8dc4fefcc0e1b60db18dac1',\n        'info_dict': {\n            'id': '85523671',\n            'ext': 'mp4',\n            'title': 'The Sunday Times - Icons',\n            'description': 're:(?s)^Watch the making of - makingoficons.com.{300,}',\n            'uploader': 'Us',\n            'uploader_id': 'usfilms',\n            'upload_date': '20140131'\n        },\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, video_id)\n\n        base64_video_info = self._html_search_regex(\n            r'var cozVidData = \"(.+?)\";', webpage, 'video data')\n        decoded_video_info = compat_b64decode(base64_video_info).decode('utf-8')\n        video_info_dict = json.loads(decoded_video_info)\n\n        \n        video_url = video_info_dict['mediaUrl']\n        description = clean_html(video_info_dict.get('description'))\n        title = video_info_dict['title']\n        native_platform = video_info_dict['nativePlatform']\n        native_video_id = video_info_dict['nativeVideoId']\n        source_priority = video_info_dict['sourcePriority']\n\n        \n        if native_platform is None:\n            youtube_url = YoutubeIE._extract_url(webpage)\n            if youtube_url:\n                return self.url_result(youtube_url, ie=YoutubeIE.ie_key())\n\n        \n        \n        if source_priority == 'native':\n            if native_platform == 'youtube':\n                return self.url_result(native_video_id, ie='Youtube')\n            if native_platform == 'vimeo':\n                return self.url_result(\n                    'http://vimeo.com/' + native_video_id, ie='Vimeo')\n\n        if not video_url:\n            raise ExtractorError('No video found')\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'ext': 'mp4',\n            'title': title,\n            'description': description,\n        }\n", "comments": "# get video information from dict\n# If nativePlatform is None a fallback mechanism is used (i.e. youtube embed)\n# Non Fallback: Decide to use native source (e.g. youtube or vimeo) or\n# the own CDN\n", "content": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom .youtube import YoutubeIE\nfrom ..compat import compat_b64decode\nfrom ..utils import (\n    clean_html,\n    ExtractorError\n)\n\n\nclass ChilloutzoneIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?chilloutzone\\.net/video/(?P<id>[\\w|-]+)\\.html'\n    _TESTS = [{\n        'url': 'http://www.chilloutzone.net/video/enemene-meck-alle-katzen-weg.html',\n        'md5': 'a76f3457e813ea0037e5244f509e66d1',\n        'info_dict': {\n            'id': 'enemene-meck-alle-katzen-weg',\n            'ext': 'mp4',\n            'title': 'Enemene Meck - Alle Katzen weg',\n            'description': 'Ist das der Umkehrschluss des Niesenden Panda-Babys?',\n        },\n    }, {\n        'note': 'Video hosted at YouTube',\n        'url': 'http://www.chilloutzone.net/video/eine-sekunde-bevor.html',\n        'info_dict': {\n            'id': '1YVQaAgHyRU',\n            'ext': 'mp4',\n            'title': '16 Photos Taken 1 Second Before Disaster',\n            'description': 'md5:58a8fcf6a459fe0a08f54140f0ad1814',\n            'uploader': 'BuzzFeedVideo',\n            'uploader_id': 'BuzzFeedVideo',\n            'upload_date': '20131105',\n        },\n    }, {\n        'note': 'Video hosted at Vimeo',\n        'url': 'http://www.chilloutzone.net/video/icon-blending.html',\n        'md5': '2645c678b8dc4fefcc0e1b60db18dac1',\n        'info_dict': {\n            'id': '85523671',\n            'ext': 'mp4',\n            'title': 'The Sunday Times - Icons',\n            'description': 're:(?s)^Watch the making of - makingoficons.com.{300,}',\n            'uploader': 'Us',\n            'uploader_id': 'usfilms',\n            'upload_date': '20140131'\n        },\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, video_id)\n\n        base64_video_info = self._html_search_regex(\n            r'var cozVidData = \"(.+?)\";', webpage, 'video data')\n        decoded_video_info = compat_b64decode(base64_video_info).decode('utf-8')\n        video_info_dict = json.loads(decoded_video_info)\n\n        # get video information from dict\n        video_url = video_info_dict['mediaUrl']\n        description = clean_html(video_info_dict.get('description'))\n        title = video_info_dict['title']\n        native_platform = video_info_dict['nativePlatform']\n        native_video_id = video_info_dict['nativeVideoId']\n        source_priority = video_info_dict['sourcePriority']\n\n        # If nativePlatform is None a fallback mechanism is used (i.e. youtube embed)\n        if native_platform is None:\n            youtube_url = YoutubeIE._extract_url(webpage)\n            if youtube_url:\n                return self.url_result(youtube_url, ie=YoutubeIE.ie_key())\n\n        # Non Fallback: Decide to use native source (e.g. youtube or vimeo) or\n        # the own CDN\n        if source_priority == 'native':\n            if native_platform == 'youtube':\n                return self.url_result(native_video_id, ie='Youtube')\n            if native_platform == 'vimeo':\n                return self.url_result(\n                    'http://vimeo.com/' + native_video_id, ie='Vimeo')\n\n        if not video_url:\n            raise ExtractorError('No video found')\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'ext': 'mp4',\n            'title': title,\n            'description': description,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "chilloutzone.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/chilloutzone.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}