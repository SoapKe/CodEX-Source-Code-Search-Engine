{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlparse,\n    compat_parse_qs,\n)\nfrom ..utils import (\n    clean_html,\n    remove_start,\n)\n\n\nclass Varzesh3IE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?video\\.varzesh3\\.com/(?:[^/]+/)+(?P<id>[^/]+)/?'\n    _TESTS = [{\n        'url': 'http://video.varzesh3.com/germany/bundesliga/5-%D9%88%D8%A7%DA%A9%D9%86%D8%B4-%D8%A8%D8%B1%D8%AA%D8%B1-%D8%AF%D8%B1%D9%88%D8%A7%D8%B2%D9%87%E2%80%8C%D8%A8%D8%A7%D9%86%D8%A7%D9%86%D8%9B%D9%87%D9%81%D8%AA%D9%87-26-%D8%A8%D9%88%D9%86%D8%AF%D8%B3/',\n        'md5': '2a933874cb7dce4366075281eb49e855',\n        'info_dict': {\n            'id': '76337',\n            'ext': 'mp4',\n            'title': '\u06f5 \u0648\u0627\u06a9\u0646\u0634 \u0628\u0631\u062a\u0631 \u062f\u0631\u0648\u0627\u0632\u0647\u200c\u0628\u0627\u0646\u0627\u0646\u061b\u0647\u0641\u062a\u0647 \u06f2\u06f6 \u0628\u0648\u0646\u062f\u0633\u0644\u06cc\u06af\u0627',\n            'description': '\u0641\u0635\u0644 \u06f2\u06f0\u06f1\u06f5-\u06f2\u06f0\u06f1\u06f4',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n        'skip': 'HTTP 404 Error',\n    }, {\n        'url': 'http://video.varzesh3.com/video/112785/%D8%AF%D9%84%D9%87-%D8%B9%D9%84%DB%8C%D8%9B-%D8%B3%D8%AA%D8%A7%D8%B1%D9%87-%D9%86%D9%88%D8%B8%D9%87%D9%88%D8%B1-%D9%84%DB%8C%DA%AF-%D8%A8%D8%B1%D8%AA%D8%B1-%D8%AC%D8%B2%DB%8C%D8%B1%D9%87',\n        'md5': '841b7cd3afbc76e61708d94e53a4a4e7',\n        'info_dict': {\n            'id': '112785',\n            'ext': 'mp4',\n            'title': '\u062f\u0644\u0647 \u0639\u0644\u06cc\u061b \u0633\u062a\u0627\u0631\u0647 \u0646\u0648\u0638\u0647\u0648\u0631 \u0644\u06cc\u06af \u0628\u0631\u062a\u0631 \u062c\u0632\u06cc\u0631\u0647',\n            'description': '\u0641\u0648\u062a\u0628\u0627\u0644 120',\n        },\n        'expected_warnings': ['description'],\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        video_url = self._search_regex(\n            r'<source[^>]+src=\"([^\"]+)\"', webpage, 'video url')\n\n        title = remove_start(self._html_search_regex(\n            r'<title>([^<]+)</title>', webpage, 'title'), '\u0648\u06cc\u062f\u06cc\u0648 \u0648\u0631\u0632\u0634 3 | ')\n\n        description = self._html_search_regex(\n            r'(?s)<div class=\"matn\">(.+?)</div>',\n            webpage, 'description', default=None)\n        if description is None:\n            description = clean_html(self._html_search_meta('description', webpage))\n\n        thumbnail = self._og_search_thumbnail(webpage, default=None)\n        if thumbnail is None:\n            fb_sharer_url = self._search_regex(\n                r'<a[^>]+href=\"(https?://www\\.facebook\\.com/sharer/sharer\\.php?[^\"]+)\"',\n                webpage, 'facebook sharer URL', fatal=False)\n            sharer_params = compat_parse_qs(compat_urllib_parse_urlparse(fb_sharer_url).query)\n            thumbnail = sharer_params.get('p[images][0]', [None])[0]\n\n        video_id = self._search_regex(\n            r\"<link[^>]+rel='(?:canonical|shortlink)'[^>]+href='/\\?p=([^']+)'\",\n            webpage, display_id, default=None)\n        if video_id is None:\n            video_id = self._search_regex(\n                r'var\\s+VideoId\\s*=\\s*(\\d+);', webpage, 'video id',\n                default=display_id)\n\n        return {\n            'url': video_url,\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlparse,\n    compat_parse_qs,\n)\nfrom ..utils import (\n    clean_html,\n    remove_start,\n)\n\n\nclass Varzesh3IE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?video\\.varzesh3\\.com/(?:[^/]+/)+(?P<id>[^/]+)/?'\n    _TESTS = [{\n        'url': 'http://video.varzesh3.com/germany/bundesliga/5-%D9%88%D8%A7%DA%A9%D9%86%D8%B4-%D8%A8%D8%B1%D8%AA%D8%B1-%D8%AF%D8%B1%D9%88%D8%A7%D8%B2%D9%87%E2%80%8C%D8%A8%D8%A7%D9%86%D8%A7%D9%86%D8%9B%D9%87%D9%81%D8%AA%D9%87-26-%D8%A8%D9%88%D9%86%D8%AF%D8%B3/',\n        'md5': '2a933874cb7dce4366075281eb49e855',\n        'info_dict': {\n            'id': '76337',\n            'ext': 'mp4',\n            'title': '\u06f5 \u0648\u0627\u06a9\u0646\u0634 \u0628\u0631\u062a\u0631 \u062f\u0631\u0648\u0627\u0632\u0647\u200c\u0628\u0627\u0646\u0627\u0646\u061b\u0647\u0641\u062a\u0647 \u06f2\u06f6 \u0628\u0648\u0646\u062f\u0633\u0644\u06cc\u06af\u0627',\n            'description': '\u0641\u0635\u0644 \u06f2\u06f0\u06f1\u06f5-\u06f2\u06f0\u06f1\u06f4',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n        'skip': 'HTTP 404 Error',\n    }, {\n        'url': 'http://video.varzesh3.com/video/112785/%D8%AF%D9%84%D9%87-%D8%B9%D9%84%DB%8C%D8%9B-%D8%B3%D8%AA%D8%A7%D8%B1%D9%87-%D9%86%D9%88%D8%B8%D9%87%D9%88%D8%B1-%D9%84%DB%8C%DA%AF-%D8%A8%D8%B1%D8%AA%D8%B1-%D8%AC%D8%B2%DB%8C%D8%B1%D9%87',\n        'md5': '841b7cd3afbc76e61708d94e53a4a4e7',\n        'info_dict': {\n            'id': '112785',\n            'ext': 'mp4',\n            'title': '\u062f\u0644\u0647 \u0639\u0644\u06cc\u061b \u0633\u062a\u0627\u0631\u0647 \u0646\u0648\u0638\u0647\u0648\u0631 \u0644\u06cc\u06af \u0628\u0631\u062a\u0631 \u062c\u0632\u06cc\u0631\u0647',\n            'description': '\u0641\u0648\u062a\u0628\u0627\u0644 120',\n        },\n        'expected_warnings': ['description'],\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        video_url = self._search_regex(\n            r'<source[^>]+src=\"([^\"]+)\"', webpage, 'video url')\n\n        title = remove_start(self._html_search_regex(\n            r'<title>([^<]+)</title>', webpage, 'title'), '\u0648\u06cc\u062f\u06cc\u0648 \u0648\u0631\u0632\u0634 3 | ')\n\n        description = self._html_search_regex(\n            r'(?s)<div class=\"matn\">(.+?)</div>',\n            webpage, 'description', default=None)\n        if description is None:\n            description = clean_html(self._html_search_meta('description', webpage))\n\n        thumbnail = self._og_search_thumbnail(webpage, default=None)\n        if thumbnail is None:\n            fb_sharer_url = self._search_regex(\n                r'<a[^>]+href=\"(https?://www\\.facebook\\.com/sharer/sharer\\.php?[^\"]+)\"',\n                webpage, 'facebook sharer URL', fatal=False)\n            sharer_params = compat_parse_qs(compat_urllib_parse_urlparse(fb_sharer_url).query)\n            thumbnail = sharer_params.get('p[images][0]', [None])[0]\n\n        video_id = self._search_regex(\n            r\"<link[^>]+rel='(?:canonical|shortlink)'[^>]+href='/\\?p=([^']+)'\",\n            webpage, display_id, default=None)\n        if video_id is None:\n            video_id = self._search_regex(\n                r'var\\s+VideoId\\s*=\\s*(\\d+);', webpage, 'video id',\n                default=display_id)\n\n        return {\n            'url': video_url,\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "varzesh3.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/varzesh3.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}