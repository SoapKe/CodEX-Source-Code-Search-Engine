{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\nfrom ..utils import (\n    ExtractorError,\n    sanitized_Request,\n    std_headers,\n    urlencode_postdata,\n    update_url_query,\n)\n\n\nclass SafariBaseIE(InfoExtractor):\n    _LOGIN_URL = 'https://www.safaribooksonline.com/accounts/login/'\n    _NETRC_MACHINE = 'safari'\n\n    _API_BASE = 'https://www.safaribooksonline.com/api/v1'\n    _API_FORMAT = 'json'\n\n    LOGGED_IN = False\n\n    def _real_initialize(self):\n        self._login()\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n\n        headers = std_headers.copy()\n        if 'Referer' not in headers:\n            headers['Referer'] = self._LOGIN_URL\n\n        login_page = self._download_webpage(\n            self._LOGIN_URL, None, 'Downloading login form', headers=headers)\n\n        def is_logged(webpage):\n            return any(re.search(p, webpage) for p in (\n                r'href=[\"\\']/accounts/logout/', r'>Sign Out<'))\n\n        if is_logged(login_page):\n            self.LOGGED_IN = True\n            return\n\n        csrf = self._html_search_regex(\n            r\"name='csrfmiddlewaretoken'\\s+value='([^']+)'\",\n            login_page, 'csrf token')\n\n        login_form = {\n            'csrfmiddlewaretoken': csrf,\n            'email': username,\n            'password1': password,\n            'login': 'Sign In',\n            'next': '',\n        }\n\n        request = sanitized_Request(\n            self._LOGIN_URL, urlencode_postdata(login_form), headers=headers)\n        login_page = self._download_webpage(\n            request, None, 'Logging in')\n\n        if not is_logged(login_page):\n            raise ExtractorError(\n                'Login failed; make sure your credentials are correct and try again.',\n                expected=True)\n\n        self.LOGGED_IN = True\n\n\nclass SafariIE(SafariBaseIE):\n    IE_NAME = 'safari'\n    IE_DESC = 'safaribooksonline.com online video'\n    _VALID_URL = r'https?://(?:www\\.)?safaribooksonline\\.com/library/view/[^/]+/(?P<course_id>[^/]+)/(?P<part>[^/?\n\n    _TESTS = [{\n        'url': 'https://www.safaribooksonline.com/library/view/hadoop-fundamentals-livelessons/9780133392838/part00.html',\n        'md5': 'dcc5a425e79f2564148652616af1f2a3',\n        'info_dict': {\n            'id': '0_qbqx90ic',\n            'ext': 'mp4',\n            'title': 'Introduction to Hadoop Fundamentals LiveLessons',\n            'timestamp': 1437758058,\n            'upload_date': '20150724',\n            'uploader_id': 'stork',\n        },\n    }, {\n        \n        'url': 'https://www.safaribooksonline.com/library/view/create-a-nodejs/100000006A0210/part00.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.safaribooksonline.com/library/view/learning-path-red/9780134664057/RHCE_Introduction.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = '%s/%s' % (mobj.group('course_id'), mobj.group('part'))\n\n        webpage = self._download_webpage(url, video_id)\n        reference_id = self._search_regex(\n            r'data-reference-id=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1',\n            webpage, 'kaltura reference id', group='id')\n        partner_id = self._search_regex(\n            r'data-partner-id=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1',\n            webpage, 'kaltura widget id', group='id')\n        ui_id = self._search_regex(\n            r'data-ui-id=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1',\n            webpage, 'kaltura uiconf id', group='id')\n\n        query = {\n            'wid': '_%s' % partner_id,\n            'uiconf_id': ui_id,\n            'flashvars[referenceId]': reference_id,\n        }\n\n        if self.LOGGED_IN:\n            kaltura_session = self._download_json(\n                '%s/player/kaltura_session/?reference_id=%s' % (self._API_BASE, reference_id),\n                video_id, 'Downloading kaltura session JSON',\n                'Unable to download kaltura session JSON', fatal=False)\n            if kaltura_session:\n                session = kaltura_session.get('session')\n                if session:\n                    query['flashvars[ks]'] = session\n\n        return self.url_result(update_url_query(\n            'https://cdnapisec.kaltura.com/html5/html5lib/v2.37.1/mwEmbedFrame.php', query),\n            'Kaltura')\n\n\nclass SafariApiIE(SafariBaseIE):\n    IE_NAME = 'safari:api'\n    _VALID_URL = r'https?://(?:www\\.)?safaribooksonline\\.com/api/v1/book/(?P<course_id>[^/]+)/chapter(?:-content)?/(?P<part>[^/?\n\n    _TESTS = [{\n        'url': 'https://www.safaribooksonline.com/api/v1/book/9780133392838/chapter/part00.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.safaribooksonline.com/api/v1/book/9780134664057/chapter/RHCE_Introduction.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        part = self._download_json(\n            url, '%s/%s' % (mobj.group('course_id'), mobj.group('part')),\n            'Downloading part JSON')\n        return self.url_result(part['web_url'], SafariIE.ie_key())\n\n\nclass SafariCourseIE(SafariBaseIE):\n    IE_NAME = 'safari:course'\n    IE_DESC = 'safaribooksonline.com online courses'\n\n    _VALID_URL = r\n\n    _TESTS = [{\n        'url': 'https://www.safaribooksonline.com/library/view/hadoop-fundamentals-livelessons/9780133392838/',\n        'info_dict': {\n            'id': '9780133392838',\n            'title': 'Hadoop Fundamentals LiveLessons',\n        },\n        'playlist_count': 22,\n        'skip': 'Requires safaribooksonline account credentials',\n    }, {\n        'url': 'https://www.safaribooksonline.com/api/v1/book/9781449396459/?override_format=json',\n        'only_matching': True,\n    }, {\n        'url': 'http://techbus.safaribooksonline.com/9780134426365',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        course_id = self._match_id(url)\n\n        course_json = self._download_json(\n            '%s/book/%s/?override_format=%s' % (self._API_BASE, course_id, self._API_FORMAT),\n            course_id, 'Downloading course JSON')\n\n        if 'chapters' not in course_json:\n            raise ExtractorError(\n                'No chapters found for course %s' % course_id, expected=True)\n\n        entries = [\n            self.url_result(chapter, SafariApiIE.ie_key())\n            for chapter in course_json['chapters']]\n\n        course_title = course_json['title']\n\n        return self.playlist_result(entries, course_id, course_title)\n", "comments": "(?x)\n                    https?://\n                        (?:\n                            (?:www\\.)?safaribooksonline\\.com/(?:library/view/[^/]+|api/v1/book)|\n                            techbus\\.safaribooksonline\\.com\n                        )\n                        /(?P<id>[^/]+)/?(?:[#?]|$)\n                    \n \n# coding: utf-8\n#&]+)\\.html'\n# non-digits in course id\n#&]+)\\.html'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\nfrom ..utils import (\n    ExtractorError,\n    sanitized_Request,\n    std_headers,\n    urlencode_postdata,\n    update_url_query,\n)\n\n\nclass SafariBaseIE(InfoExtractor):\n    _LOGIN_URL = 'https://www.safaribooksonline.com/accounts/login/'\n    _NETRC_MACHINE = 'safari'\n\n    _API_BASE = 'https://www.safaribooksonline.com/api/v1'\n    _API_FORMAT = 'json'\n\n    LOGGED_IN = False\n\n    def _real_initialize(self):\n        self._login()\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n\n        headers = std_headers.copy()\n        if 'Referer' not in headers:\n            headers['Referer'] = self._LOGIN_URL\n\n        login_page = self._download_webpage(\n            self._LOGIN_URL, None, 'Downloading login form', headers=headers)\n\n        def is_logged(webpage):\n            return any(re.search(p, webpage) for p in (\n                r'href=[\"\\']/accounts/logout/', r'>Sign Out<'))\n\n        if is_logged(login_page):\n            self.LOGGED_IN = True\n            return\n\n        csrf = self._html_search_regex(\n            r\"name='csrfmiddlewaretoken'\\s+value='([^']+)'\",\n            login_page, 'csrf token')\n\n        login_form = {\n            'csrfmiddlewaretoken': csrf,\n            'email': username,\n            'password1': password,\n            'login': 'Sign In',\n            'next': '',\n        }\n\n        request = sanitized_Request(\n            self._LOGIN_URL, urlencode_postdata(login_form), headers=headers)\n        login_page = self._download_webpage(\n            request, None, 'Logging in')\n\n        if not is_logged(login_page):\n            raise ExtractorError(\n                'Login failed; make sure your credentials are correct and try again.',\n                expected=True)\n\n        self.LOGGED_IN = True\n\n\nclass SafariIE(SafariBaseIE):\n    IE_NAME = 'safari'\n    IE_DESC = 'safaribooksonline.com online video'\n    _VALID_URL = r'https?://(?:www\\.)?safaribooksonline\\.com/library/view/[^/]+/(?P<course_id>[^/]+)/(?P<part>[^/?#&]+)\\.html'\n\n    _TESTS = [{\n        'url': 'https://www.safaribooksonline.com/library/view/hadoop-fundamentals-livelessons/9780133392838/part00.html',\n        'md5': 'dcc5a425e79f2564148652616af1f2a3',\n        'info_dict': {\n            'id': '0_qbqx90ic',\n            'ext': 'mp4',\n            'title': 'Introduction to Hadoop Fundamentals LiveLessons',\n            'timestamp': 1437758058,\n            'upload_date': '20150724',\n            'uploader_id': 'stork',\n        },\n    }, {\n        # non-digits in course id\n        'url': 'https://www.safaribooksonline.com/library/view/create-a-nodejs/100000006A0210/part00.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.safaribooksonline.com/library/view/learning-path-red/9780134664057/RHCE_Introduction.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = '%s/%s' % (mobj.group('course_id'), mobj.group('part'))\n\n        webpage = self._download_webpage(url, video_id)\n        reference_id = self._search_regex(\n            r'data-reference-id=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1',\n            webpage, 'kaltura reference id', group='id')\n        partner_id = self._search_regex(\n            r'data-partner-id=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1',\n            webpage, 'kaltura widget id', group='id')\n        ui_id = self._search_regex(\n            r'data-ui-id=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1',\n            webpage, 'kaltura uiconf id', group='id')\n\n        query = {\n            'wid': '_%s' % partner_id,\n            'uiconf_id': ui_id,\n            'flashvars[referenceId]': reference_id,\n        }\n\n        if self.LOGGED_IN:\n            kaltura_session = self._download_json(\n                '%s/player/kaltura_session/?reference_id=%s' % (self._API_BASE, reference_id),\n                video_id, 'Downloading kaltura session JSON',\n                'Unable to download kaltura session JSON', fatal=False)\n            if kaltura_session:\n                session = kaltura_session.get('session')\n                if session:\n                    query['flashvars[ks]'] = session\n\n        return self.url_result(update_url_query(\n            'https://cdnapisec.kaltura.com/html5/html5lib/v2.37.1/mwEmbedFrame.php', query),\n            'Kaltura')\n\n\nclass SafariApiIE(SafariBaseIE):\n    IE_NAME = 'safari:api'\n    _VALID_URL = r'https?://(?:www\\.)?safaribooksonline\\.com/api/v1/book/(?P<course_id>[^/]+)/chapter(?:-content)?/(?P<part>[^/?#&]+)\\.html'\n\n    _TESTS = [{\n        'url': 'https://www.safaribooksonline.com/api/v1/book/9780133392838/chapter/part00.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.safaribooksonline.com/api/v1/book/9780134664057/chapter/RHCE_Introduction.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        part = self._download_json(\n            url, '%s/%s' % (mobj.group('course_id'), mobj.group('part')),\n            'Downloading part JSON')\n        return self.url_result(part['web_url'], SafariIE.ie_key())\n\n\nclass SafariCourseIE(SafariBaseIE):\n    IE_NAME = 'safari:course'\n    IE_DESC = 'safaribooksonline.com online courses'\n\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:\n                            (?:www\\.)?safaribooksonline\\.com/(?:library/view/[^/]+|api/v1/book)|\n                            techbus\\.safaribooksonline\\.com\n                        )\n                        /(?P<id>[^/]+)/?(?:[#?]|$)\n                    '''\n\n    _TESTS = [{\n        'url': 'https://www.safaribooksonline.com/library/view/hadoop-fundamentals-livelessons/9780133392838/',\n        'info_dict': {\n            'id': '9780133392838',\n            'title': 'Hadoop Fundamentals LiveLessons',\n        },\n        'playlist_count': 22,\n        'skip': 'Requires safaribooksonline account credentials',\n    }, {\n        'url': 'https://www.safaribooksonline.com/api/v1/book/9781449396459/?override_format=json',\n        'only_matching': True,\n    }, {\n        'url': 'http://techbus.safaribooksonline.com/9780134426365',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        course_id = self._match_id(url)\n\n        course_json = self._download_json(\n            '%s/book/%s/?override_format=%s' % (self._API_BASE, course_id, self._API_FORMAT),\n            course_id, 'Downloading course JSON')\n\n        if 'chapters' not in course_json:\n            raise ExtractorError(\n                'No chapters found for course %s' % course_id, expected=True)\n\n        entries = [\n            self.url_result(chapter, SafariApiIE.ie_key())\n            for chapter in course_json['chapters']]\n\n        course_title = course_json['title']\n\n        return self.playlist_result(entries, course_id, course_title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "safari.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/safari.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}