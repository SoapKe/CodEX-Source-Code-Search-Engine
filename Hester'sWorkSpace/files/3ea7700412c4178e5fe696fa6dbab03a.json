{"author": "ansible", "code": "\n# -*- coding: UTF-8 -*-\n\n# Copyright (c) 2016, Adfinis SyGroup AG\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: udm_dns_record\nversion_added: \"2.2\"\nauthor: \"Tobias Rueetschi (@2-B)\"\nshort_description: Manage dns entries on a univention corporate server\ndescription:\n    - \"This module allows to manage dns records on a univention corporate server (UCS).\n       It uses the python API of the UCS to create a new object or edit it.\"\nrequirements:\n    - Python >= 2.6\n    - Univention\noptions:\n    state:\n        required: false\n        default: \"present\"\n        choices: [ present, absent ]\n        description:\n            - Whether the dns record is present or not.\n    name:\n        required: true\n        description:\n            - \"Name of the record, this is also the DNS record. E.g. www for\n               www.example.com.\"\n    zone:\n        required: true\n        description:\n            - Corresponding DNS zone for this record, e.g. example.com.\n    type:\n        required: true\n        choices: [ host_record, alias, ptr_record, srv_record, txt_record ]\n        description:\n            - \"Define the record type. C(host_record) is a A or AAAA record,\n               C(alias) is a CNAME, C(ptr_record) is a PTR record, C(srv_record)\n               is a SRV record and C(txt_record) is a TXT record.\"\n    data:\n        required: false\n        default: []\n        description:\n            - \"Additional data for this record, e.g. ['a': '192.0.2.1'].\n               Required if C(state=present).\"\n'''\n\n\nEXAMPLES = '''\n\n- udm_dns_zone:\n    name: www\n    zone: example.com\n    type: host_record\n    data:\n      - a: 192.0.2.1\n'''\n\n\nRETURN = '''# '''\n\nHAVE_UNIVENTION = False\ntry:\n    from univention.admin.handlers.dns import (\n        forward_zone,\n        reverse_zone,\n    )\n    HAVE_UNIVENTION = True\nexcept ImportError:\n    pass\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.univention_umc import (\n    umc_module_for_add,\n    umc_module_for_edit,\n    ldap_search,\n    base_dn,\n    config,\n    uldap,\n)\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            type=dict(required=True,\n                      type='str'),\n            zone=dict(required=True,\n                      type='str'),\n            name=dict(required=True,\n                      type='str'),\n            data=dict(default=[],\n                      type='dict'),\n            state=dict(default='present',\n                       choices=['present', 'absent'],\n                       type='str')\n        ),\n        supports_check_mode=True,\n        required_if=([\n            ('state', 'present', ['data'])\n        ])\n    )\n\n    if not HAVE_UNIVENTION:\n        module.fail_json(msg=\"This module requires univention python bindings\")\n\n    type = module.params['type']\n    zone = module.params['zone']\n    name = module.params['name']\n    data = module.params['data']\n    state = module.params['state']\n    changed = False\n\n    obj = list(ldap_search(\n        '(&(objectClass=dNSZone)(zoneName={})(relativeDomainName={}))'.format(zone, name),\n        attr=['dNSZone']\n    ))\n\n    exists = bool(len(obj))\n    container = 'zoneName={},cn=dns,{}'.format(zone, base_dn())\n    dn = 'relativeDomainName={},{}'.format(name, container)\n\n    if state == 'present':\n        try:\n            if not exists:\n                so = forward_zone.lookup(\n                    config(),\n                    uldap(),\n                    '(zone={})'.format(zone),\n                    scope='domain',\n                ) or reverse_zone.lookup(\n                    config(),\n                    uldap(),\n                    '(zone={})'.format(zone),\n                    scope='domain',\n                )\n                obj = umc_module_for_add('dns/{}'.format(type), container, superordinate=so[0])\n            else:\n                obj = umc_module_for_edit('dns/{}'.format(type), dn)\n            obj['name'] = name\n            for k, v in data.items():\n                obj[k] = v\n            diff = obj.diff()\n            changed = obj.diff() != []\n            if not module.check_mode:\n                if not exists:\n                    obj.create()\n                else:\n                    obj.modify()\n        except BaseException as e:\n            module.fail_json(\n                msg='Creating/editing dns entry {} in {} failed: {}'.format(name, container, e)\n            )\n\n    if state == 'absent' and exists:\n        try:\n            obj = umc_module_for_edit('dns/{}'.format(type), dn)\n            if not module.check_mode:\n                obj.remove()\n            changed = True\n        except BaseException as e:\n            module.fail_json(\n                msg='Removing dns entry {} in {} failed: {}'.format(name, container, e)\n            )\n\n    module.exit_json(\n        changed=changed,\n        name=name,\n        diff=diff,\n        container=container\n    )\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  udm dns record version added   2 2  author   tobias rueetschi ( 2 b)  short description  manage dns entries univention corporate server description         this module allows manage dns records univention corporate server (ucs)         it uses python api ucs create new object edit   requirements        python    2 6       univention options      state          required  false         default   present          choices    present  absent           description                whether dns record present      name          required  true         description                 name record  also dns record  e g  www                www example com       zone          required  true         description                corresponding dns zone record  e g  example com      type          required  true         choices    host record  alias  ptr record  srv record  txt record           description                 define record type  c(host record) a aaaa record                 c(alias) cname  c(ptr record) ptr record  c(srv record)                srv record c(txt record) txt record       data          required  false         default             description                 additional data record  e g       192 0 2 1                   required c(state present)         examples         create dns record ucs   udm dns zone      name  www     zone  example com     type  host record     data           192 0 2 1       return                usr bin python        coding  utf 8        copyright (c) 2016  adfinis sygroup ag    tobias rueetschi  tobias ruetschi adfinis sygroup ch     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    create dns record ucs ", "content": "#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\n# Copyright (c) 2016, Adfinis SyGroup AG\n# Tobias Rueetschi <tobias.ruetschi@adfinis-sygroup.ch>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: udm_dns_record\nversion_added: \"2.2\"\nauthor: \"Tobias Rueetschi (@2-B)\"\nshort_description: Manage dns entries on a univention corporate server\ndescription:\n    - \"This module allows to manage dns records on a univention corporate server (UCS).\n       It uses the python API of the UCS to create a new object or edit it.\"\nrequirements:\n    - Python >= 2.6\n    - Univention\noptions:\n    state:\n        required: false\n        default: \"present\"\n        choices: [ present, absent ]\n        description:\n            - Whether the dns record is present or not.\n    name:\n        required: true\n        description:\n            - \"Name of the record, this is also the DNS record. E.g. www for\n               www.example.com.\"\n    zone:\n        required: true\n        description:\n            - Corresponding DNS zone for this record, e.g. example.com.\n    type:\n        required: true\n        choices: [ host_record, alias, ptr_record, srv_record, txt_record ]\n        description:\n            - \"Define the record type. C(host_record) is a A or AAAA record,\n               C(alias) is a CNAME, C(ptr_record) is a PTR record, C(srv_record)\n               is a SRV record and C(txt_record) is a TXT record.\"\n    data:\n        required: false\n        default: []\n        description:\n            - \"Additional data for this record, e.g. ['a': '192.0.2.1'].\n               Required if C(state=present).\"\n'''\n\n\nEXAMPLES = '''\n# Create a DNS record on a UCS\n- udm_dns_zone:\n    name: www\n    zone: example.com\n    type: host_record\n    data:\n      - a: 192.0.2.1\n'''\n\n\nRETURN = '''# '''\n\nHAVE_UNIVENTION = False\ntry:\n    from univention.admin.handlers.dns import (\n        forward_zone,\n        reverse_zone,\n    )\n    HAVE_UNIVENTION = True\nexcept ImportError:\n    pass\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.univention_umc import (\n    umc_module_for_add,\n    umc_module_for_edit,\n    ldap_search,\n    base_dn,\n    config,\n    uldap,\n)\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            type=dict(required=True,\n                      type='str'),\n            zone=dict(required=True,\n                      type='str'),\n            name=dict(required=True,\n                      type='str'),\n            data=dict(default=[],\n                      type='dict'),\n            state=dict(default='present',\n                       choices=['present', 'absent'],\n                       type='str')\n        ),\n        supports_check_mode=True,\n        required_if=([\n            ('state', 'present', ['data'])\n        ])\n    )\n\n    if not HAVE_UNIVENTION:\n        module.fail_json(msg=\"This module requires univention python bindings\")\n\n    type = module.params['type']\n    zone = module.params['zone']\n    name = module.params['name']\n    data = module.params['data']\n    state = module.params['state']\n    changed = False\n\n    obj = list(ldap_search(\n        '(&(objectClass=dNSZone)(zoneName={})(relativeDomainName={}))'.format(zone, name),\n        attr=['dNSZone']\n    ))\n\n    exists = bool(len(obj))\n    container = 'zoneName={},cn=dns,{}'.format(zone, base_dn())\n    dn = 'relativeDomainName={},{}'.format(name, container)\n\n    if state == 'present':\n        try:\n            if not exists:\n                so = forward_zone.lookup(\n                    config(),\n                    uldap(),\n                    '(zone={})'.format(zone),\n                    scope='domain',\n                ) or reverse_zone.lookup(\n                    config(),\n                    uldap(),\n                    '(zone={})'.format(zone),\n                    scope='domain',\n                )\n                obj = umc_module_for_add('dns/{}'.format(type), container, superordinate=so[0])\n            else:\n                obj = umc_module_for_edit('dns/{}'.format(type), dn)\n            obj['name'] = name\n            for k, v in data.items():\n                obj[k] = v\n            diff = obj.diff()\n            changed = obj.diff() != []\n            if not module.check_mode:\n                if not exists:\n                    obj.create()\n                else:\n                    obj.modify()\n        except BaseException as e:\n            module.fail_json(\n                msg='Creating/editing dns entry {} in {} failed: {}'.format(name, container, e)\n            )\n\n    if state == 'absent' and exists:\n        try:\n            obj = umc_module_for_edit('dns/{}'.format(type), dn)\n            if not module.check_mode:\n                obj.remove()\n            changed = True\n        except BaseException as e:\n            module.fail_json(\n                msg='Removing dns entry {} in {} failed: {}'.format(name, container, e)\n            )\n\n    module.exit_json(\n        changed=changed,\n        name=name,\n        diff=diff,\n        container=container\n    )\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "udm_dns_record.py", "id": "3ea7700412c4178e5fe696fa6dbab03a", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/univention/udm_dns_record.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}