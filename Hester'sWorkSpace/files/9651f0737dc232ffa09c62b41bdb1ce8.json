{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\nimport re\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    InAdvancePagedList,\n    int_or_none,\n    NO_DEFAULT,\n    RegexNotFoundError,\n    sanitized_Request,\n    smuggle_url,\n    std_headers,\n    try_get,\n    unified_timestamp,\n    unsmuggle_url,\n    urlencode_postdata,\n    unescapeHTML,\n    parse_filesize,\n)\n\n\nclass VimeoBaseInfoExtractor(InfoExtractor):\n    _NETRC_MACHINE = 'vimeo'\n    _LOGIN_REQUIRED = False\n    _LOGIN_URL = 'https://vimeo.com/log_in'\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            if self._LOGIN_REQUIRED:\n                raise ExtractorError('No login info available, needed for using %s.' % self.IE_NAME, expected=True)\n            return\n        webpage = self._download_webpage(\n            self._LOGIN_URL, None, 'Downloading login page')\n        token, vuid = self._extract_xsrft_and_vuid(webpage)\n        data = {\n            'action': 'login',\n            'email': username,\n            'password': password,\n            'service': 'vimeo',\n            'token': token,\n        }\n        self._set_vimeo_cookie('vuid', vuid)\n        try:\n            self._download_webpage(\n                self._LOGIN_URL, None, 'Logging in',\n                data=urlencode_postdata(data), headers={\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'Referer': self._LOGIN_URL,\n                })\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 418:\n                raise ExtractorError(\n                    'Unable to log in: bad username or password',\n                    expected=True)\n            raise ExtractorError('Unable to log in')\n\n    def _verify_video_password(self, url, video_id, webpage):\n        password = self._downloader.params.get('videopassword')\n        if password is None:\n            raise ExtractorError('This video is protected by a password, use the --video-password option', expected=True)\n        token, vuid = self._extract_xsrft_and_vuid(webpage)\n        data = urlencode_postdata({\n            'password': password,\n            'token': token,\n        })\n        if url.startswith('http://'):\n            \n            url = url.replace('http://', 'https://')\n        password_request = sanitized_Request(url + '/password', data)\n        password_request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        password_request.add_header('Referer', url)\n        self._set_vimeo_cookie('vuid', vuid)\n        return self._download_webpage(\n            password_request, video_id,\n            'Verifying the password', 'Wrong password')\n\n    def _extract_xsrft_and_vuid(self, webpage):\n        xsrft = self._search_regex(\n            r'(?:(?P<q1>[\"\\'])xsrft(?P=q1)\\s*:|xsrft\\s*[=:])\\s*(?P<q>[\"\\'])(?P<xsrft>.+?)(?P=q)',\n            webpage, 'login token', group='xsrft')\n        vuid = self._search_regex(\n            r'[\"\\']vuid[\"\\']\\s*:\\s*([\"\\'])(?P<vuid>.+?)\\1',\n            webpage, 'vuid', group='vuid')\n        return xsrft, vuid\n\n    def _set_vimeo_cookie(self, name, value):\n        self._set_cookie('vimeo.com', name, value)\n\n    def _vimeo_sort_formats(self, formats):\n        \n        \n        self._sort_formats(formats, field_preference=('preference', 'height', 'width', 'fps', 'tbr', 'format_id'))\n\n    def _parse_config(self, config, video_id):\n        video_data = config['video']\n        \n        video_title = video_data['title']\n\n        \n        video_uploader = video_data.get('owner', {}).get('name')\n        video_uploader_url = video_data.get('owner', {}).get('url')\n        video_uploader_id = video_uploader_url.split('/')[-1] if video_uploader_url else None\n\n        \n        video_thumbnail = video_data.get('thumbnail')\n        if video_thumbnail is None:\n            video_thumbs = video_data.get('thumbs')\n            if video_thumbs and isinstance(video_thumbs, dict):\n                _, video_thumbnail = sorted((int(width if width.isdigit() else 0), t_url) for (width, t_url) in video_thumbs.items())[-1]\n\n        \n        video_duration = int_or_none(video_data.get('duration'))\n\n        formats = []\n        config_files = video_data.get('files') or config['request'].get('files', {})\n        for f in config_files.get('progressive', []):\n            video_url = f.get('url')\n            if not video_url:\n                continue\n            formats.append({\n                'url': video_url,\n                'format_id': 'http-%s' % f.get('quality'),\n                'width': int_or_none(f.get('width')),\n                'height': int_or_none(f.get('height')),\n                'fps': int_or_none(f.get('fps')),\n                'tbr': int_or_none(f.get('bitrate')),\n            })\n\n        for files_type in ('hls', 'dash'):\n            for cdn_name, cdn_data in config_files.get(files_type, {}).get('cdns', {}).items():\n                manifest_url = cdn_data.get('url')\n                if not manifest_url:\n                    continue\n                format_id = '%s-%s' % (files_type, cdn_name)\n                if files_type == 'hls':\n                    formats.extend(self._extract_m3u8_formats(\n                        manifest_url, video_id, 'mp4',\n                        'm3u8_native', m3u8_id=format_id,\n                        note='Downloading %s m3u8 information' % cdn_name,\n                        fatal=False))\n                elif files_type == 'dash':\n                    mpd_pattern = r'/%s/(?:sep/)?video/' % video_id\n                    mpd_manifest_urls = []\n                    if re.search(mpd_pattern, manifest_url):\n                        for suffix, repl in (('', 'video'), ('_sep', 'sep/video')):\n                            mpd_manifest_urls.append((format_id + suffix, re.sub(\n                                mpd_pattern, '/%s/%s/' % (video_id, repl), manifest_url)))\n                    else:\n                        mpd_manifest_urls = [(format_id, manifest_url)]\n                    for f_id, m_url in mpd_manifest_urls:\n                        mpd_formats = self._extract_mpd_formats(\n                            m_url.replace('/master.json', '/master.mpd'), video_id, f_id,\n                            'Downloading %s MPD information' % cdn_name,\n                            fatal=False)\n                        for f in mpd_formats:\n                            if f.get('vcodec') == 'none':\n                                f['preference'] = -50\n                            elif f.get('acodec') == 'none':\n                                f['preference'] = -40\n                        formats.extend(mpd_formats)\n\n        subtitles = {}\n        text_tracks = config['request'].get('text_tracks')\n        if text_tracks:\n            for tt in text_tracks:\n                subtitles[tt['lang']] = [{\n                    'ext': 'vtt',\n                    'url': 'https://vimeo.com' + tt['url'],\n                }]\n\n        return {\n            'title': video_title,\n            'uploader': video_uploader,\n            'uploader_id': video_uploader_id,\n            'uploader_url': video_uploader_url,\n            'thumbnail': video_thumbnail,\n            'duration': video_duration,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass VimeoIE(VimeoBaseInfoExtractor):\n    \n\n    \n    _VALID_URL = r, webpage, 'page count'),\n            'page count', fatal=True)\n        PAGE_SIZE = 12\n        title = self._html_search_regex(\n            r'(?s)<h1>(.+?)</h1>', webpage, 'title', fatal=False)\n        description = self._html_search_meta('description', webpage)\n\n        def _get_page(idx):\n            page_url = 'https://vimeo.com/user%s/likes/page:%d/sort:date' % (\n                user_id, idx + 1)\n            webpage = self._download_webpage(\n                page_url, user_id,\n                note='Downloading page %d/%d' % (idx + 1, page_count))\n            video_list = self._search_regex(\n                r'(?s)<ol class=\"js-browse_list[^\"]+\"[^>]*>(.*?)</ol>',\n                webpage, 'video content')\n            paths = re.findall(\n                r'<li[^>]*>\\s*<a\\s+href=\"([^\"]+)\"', video_list)\n            for path in paths:\n                yield {\n                    '_type': 'url',\n                    'url': compat_urlparse.urljoin(page_url, path),\n                }\n\n        pl = InAdvancePagedList(_get_page, page_count, PAGE_SIZE)\n\n        return {\n            '_type': 'playlist',\n            'id': 'user%s_likes' % user_id,\n            'title': title,\n            'description': description,\n            'entries': pl,\n        }\n", "comments": "Information extractor for vimeo.com.\n.\n(?x)\n                    https?://\n                        (?:\n                            (?:\n                                www|\n                                (?P<player>player)\n                            )\n                            \\.\n                        )?\n                        vimeo(?P<pro>pro)?\\.com/\n                        (?!(?:channels|album)/[^/?#]+/?(?:$|[?#])|[^/]+/review/|ondemand/)\n                        (?:.*?/)?\n                        (?:\n                            (?:\n                                play_redirect_hls|\n                                moogaloop\\.swf)\\?clip_id=\n                            )?\n                        (?:videos?/)?\n                        (?P<id>[0-9]+)\n                        (?:/[\\da-f]+)?\n                        /?(?:[?&].*)?(?:[#].*)?$\n                    '''\n    IE_NAME = 'vimeo'\n    _TESTS = [\n        {\n            'url': 'http://vimeo.com/56015672#at=0',\n            'md5': '8879b6cc097e987f02484baf890129e5',\n            'info_dict': {\n                'id': '56015672',\n                'ext': 'mp4',\n                'title': \"youtube-dl test video - \\u2605 \\\" ' \\u5e78 / \\\\ \\u00e4 \\u21ad \\U0001d550\",\n                'description': 'md5:509a9ad5c9bf97c60faee9203aca4479',\n                'timestamp': 1355990239,\n                'upload_date': '20121220',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/user7108434',\n                'uploader_id': 'user7108434',\n                'uploader': 'Filippo Valsorda',\n                'duration': 10,\n                'license': 'by-sa',\n            },\n        },\n        {\n            'url': 'http://vimeopro.com/openstreetmapus/state-of-the-map-us-2013/video/68093876',\n            'md5': '3b5ca6aa22b60dfeeadf50b72e44ed82',\n            'note': 'Vimeo Pro video (#1197)',\n            'info_dict': {\n                'id': '68093876',\n                'ext': 'mp4',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/openstreetmapus',\n                'uploader_id': 'openstreetmapus',\n                'uploader': 'OpenStreetMap US',\n                'title': 'Andy Allan - Putting the Carto into OpenStreetMap Cartography',\n                'description': 'md5:fd69a7b8d8c34a4e1d2ec2e4afd6ec30',\n                'duration': 1595,\n            },\n        },\n        {\n            'url': 'http://player.vimeo.com/video/54469442',\n            'md5': '619b811a4417aa4abe78dc653becf511',\n            'note': 'Videos that embed the url in the player page',\n            'info_dict': {\n                'id': '54469442',\n                'ext': 'mp4',\n                'title': 'Kathy Sierra: Building the minimum Badass User, Business of Software 2012',\n                'uploader': 'The BLN & Business of Software',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/theblnbusinessofsoftware',\n                'uploader_id': 'theblnbusinessofsoftware',\n                'duration': 3610,\n                'description': None,\n            },\n        },\n        {\n            'url': 'http://vimeo.com/68375962',\n            'md5': 'aaf896bdb7ddd6476df50007a0ac0ae7',\n            'note': 'Video protected with password',\n            'info_dict': {\n                'id': '68375962',\n                'ext': 'mp4',\n                'title': 'youtube-dl password protected test video',\n                'timestamp': 1371200155,\n                'upload_date': '20130614',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/user18948128',\n                'uploader_id': 'user18948128',\n                'uploader': 'Jaime Marqu\u00ednez Ferr\u00e1ndiz',\n                'duration': 10,\n                'description': 'md5:dca3ea23adb29ee387127bc4ddfce63f',\n            },\n            'params': {\n                'videopassword': 'youtube-dl',\n            },\n        },\n        {\n            'url': 'http://vimeo.com/channels/keypeele/75629013',\n            'md5': '2f86a05afe9d7abc0b9126d229bbe15d',\n            'info_dict': {\n                'id': '75629013',\n                'ext': 'mp4',\n                'title': 'Key & Peele: Terrorist Interrogation',\n                'description': 'md5:8678b246399b070816b12313e8b4eb5c',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/atencio',\n                'uploader_id': 'atencio',\n                'uploader': 'Peter Atencio',\n                'timestamp': 1380339469,\n                'upload_date': '20130928',\n                'duration': 187,\n            },\n        },\n        {\n            'url': 'http://vimeo.com/76979871',\n            'note': 'Video with subtitles',\n            'info_dict': {\n                'id': '76979871',\n                'ext': 'mp4',\n                'title': 'The New Vimeo Player (You Know, For Videos)',\n                'description': 'md5:2ec900bf97c3f389378a96aee11260ea',\n                'timestamp': 1381846109,\n                'upload_date': '20131015',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/staff',\n                'uploader_id': 'staff',\n                'uploader': 'Vimeo Staff',\n                'duration': 62,\n            }\n        },\n        {\n            # from https://www.ouya.tv/game/Pier-Solar-and-the-Great-Architects/\n            'url': 'https://player.vimeo.com/video/98044508',\n            'note': 'The js code contains assignments to the same variable as the config',\n            'info_dict': {\n                'id': '98044508',\n                'ext': 'mp4',\n                'title': 'Pier Solar OUYA Official Trailer',\n                'uploader': 'Tulio Gon\u00e7alves',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/user28849593',\n                'uploader_id': 'user28849593',\n            },\n        },\n        {\n            # contains original format\n            'url': 'https://vimeo.com/33951933',\n            'md5': '53c688fa95a55bf4b7293d37a89c5c53',\n            'info_dict': {\n                'id': '33951933',\n                'ext': 'mp4',\n                'title': 'FOX CLASSICS - Forever Classic ID - A Full Minute',\n                'uploader': 'The DMCI',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/dmci',\n                'uploader_id': 'dmci',\n                'timestamp': 1324343742,\n                'upload_date': '20111220',\n                'description': 'md5:ae23671e82d05415868f7ad1aec21147',\n            },\n        },\n        {\n            # only available via https://vimeo.com/channels/tributes/6213729 and\n            # not via https://vimeo.com/6213729\n            'url': 'https://vimeo.com/channels/tributes/6213729',\n            'info_dict': {\n                'id': '6213729',\n                'ext': 'mov',\n                'title': 'Vimeo Tribute: The Shining',\n                'uploader': 'Casey Donahue',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/caseydonahue',\n                'uploader_id': 'caseydonahue',\n                'timestamp': 1250886430,\n                'upload_date': '20090821',\n                'description': 'md5:bdbf314014e58713e6e5b66eb252f4a6',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'expected_warnings': ['Unable to download JSON metadata'],\n        },\n        {\n            # redirects to ondemand extractor and should be passed through it\n            # for successful extraction\n            'url': 'https://vimeo.com/73445910',\n            'info_dict': {\n                'id': '73445910',\n                'ext': 'mp4',\n                'title': 'The Reluctant Revolutionary',\n                'uploader': '10Ft Films',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/tenfootfilms',\n                'uploader_id': 'tenfootfilms',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://vimeo.com/moogaloop.swf?clip_id=2539741',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://vimeo.com/109815029',\n            'note': 'Video not completely processed, \"failed\" seed status',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://vimeo.com/groups/travelhd/videos/22439234',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://vimeo.com/album/2632481/video/79010983',\n            'only_matching': True,\n        },\n        {\n            # source file returns 403: Forbidden\n            'url': 'https://vimeo.com/7809605',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://vimeo.com/160743502/abd0e13fb4',\n            'only_matching': True,\n        }\n    ]\n\n    @staticmethod\n    def _smuggle_referrer(url, referrer_url):\n        return smuggle_url(url, {'http_headers': {'Referer': referrer_url}})\n\n    @staticmethod\n    def _extract_urls(url, webpage):\n        urls = []\n        # Look for embedded (iframe) Vimeo player\n        for mobj in re.finditer(\n                r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//player\\.vimeo\\.com/video/\\d+.*?)\\1',\n                webpage):\n            urls.append(VimeoIE._smuggle_referrer(unescapeHTML(mobj.group('url')), url))\n        PLAIN_EMBED_RE = (\n            # Look for embedded (swf embed) Vimeo player\n            r'<embed[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?vimeo\\.com/moogaloop\\.swf.+?)\\1',\n            # Look more for non-standard embedded Vimeo player\n            r'<video[^>]+src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?vimeo\\.com/[0-9]+)\\1',\n        )\n        for embed_re in PLAIN_EMBED_RE:\n            for mobj in re.finditer(embed_re, webpage):\n                urls.append(mobj.group('url'))\n        return urls\n\n    @staticmethod\n    def _extract_url(url, webpage):\n        urls = VimeoIE._extract_urls(url, webpage)\n        return urls[0] if urls else None\n\n    def _verify_player_video_password(self, url, video_id):\n        password = self._downloader.params.get('videopassword')\n        if password is None:\n            raise ExtractorError('This video is protected by a password, use the --video-password option')\n        data = urlencode_postdata({'password': password})\n        pass_url = url + '/check-password'\n        password_request = sanitized_Request(pass_url, data)\n        password_request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        password_request.add_header('Referer', url)\n        return self._download_json(\n            password_request, video_id,\n            'Verifying the password', 'Wrong password')\n\n    def _real_initialize(self):\n        self._login()\n\n    def _real_extract(self, url):\n        url, data = unsmuggle_url(url, {})\n        headers = std_headers.copy()\n        if 'http_headers' in data:\n            headers.update(data['http_headers'])\n        if 'Referer' not in headers:\n            headers['Referer'] = url\n\n        # Extract ID from URL\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        orig_url = url\n        if mobj.group('pro') or mobj.group('player'):\n            url = 'https://player.vimeo.com/video/' + video_id\n        elif any(p in url for p in ('play_redirect_hls', 'moogaloop.swf')):\n            url = 'https://vimeo.com/' + video_id\n\n        # Retrieve video webpage to extract further information\n        request = sanitized_Request(url, headers=headers)\n        try:\n            webpage, urlh = self._download_webpage_handle(request, video_id)\n            redirect_url = compat_str(urlh.geturl())\n            # Some URLs redirect to ondemand can't be extracted with\n            # this extractor right away thus should be passed through\n            # ondemand extractor (e.g. https://vimeo.com/73445910)\n            if VimeoOndemandIE.suitable(redirect_url):\n                return self.url_result(redirect_url, VimeoOndemandIE.ie_key())\n        except ExtractorError as ee:\n            if isinstance(ee.cause, compat_HTTPError) and ee.cause.code == 403:\n                errmsg = ee.cause.read()\n                if b'Because of its privacy settings, this video cannot be played here' in errmsg:\n                    raise ExtractorError(\n                        'Cannot download embed-only video without embedding '\n                        'URL. Please call youtube-dl with the URL of the page '\n                        'that embeds this video.',\n                        expected=True)\n            raise\n\n        # Now we begin extracting as much information as we can from what we\n        # retrieved. First we extract the information common to all extractors,\n        # and latter we extract those that are Vimeo specific.\n        self.report_extraction(video_id)\n\n        vimeo_config = self._search_regex(\n            r'vimeo\\.config\\s*=\\s*(?:({.+?})|_extend\\([^,]+,\\s+({.+?})\\));', webpage,\n            'vimeo config', default=None)\n        if vimeo_config:\n            seed_status = self._parse_json(vimeo_config, video_id).get('seed_status', {})\n            if seed_status.get('state') == 'failed':\n                raise ExtractorError(\n                    '%s said: %s' % (self.IE_NAME, seed_status['title']),\n                    expected=True)\n\n        cc_license = None\n        timestamp = None\n\n        # Extract the config JSON\n        try:\n            try:\n                config_url = self._html_search_regex(\n                    r' data-config-url=\"(.+?)\"', webpage,\n                    'config URL', default=None)\n                if not config_url:\n                    # Sometimes new react-based page is served instead of old one that require\n                    # different config URL extraction approach (see\n                    # https://github.com/rg3/youtube-dl/pull/7209)\n                    vimeo_clip_page_config = self._search_regex(\n                        r'vimeo\\.clip_page_config\\s*=\\s*({.+?});', webpage,\n                        'vimeo clip page config')\n                    page_config = self._parse_json(vimeo_clip_page_config, video_id)\n                    config_url = page_config['player']['config_url']\n                    cc_license = page_config.get('cc_license')\n                    timestamp = try_get(\n                        page_config, lambda x: x['clip']['uploaded_on'],\n                        compat_str)\n                config_json = self._download_webpage(config_url, video_id)\n                config = json.loads(config_json)\n            except RegexNotFoundError:\n                # For pro videos or player.vimeo.com urls\n                # We try to find out to which variable is assigned the config dic\n                m_variable_name = re.search(r'(\\w)\\.video\\.id', webpage)\n                if m_variable_name is not None:\n                    config_re = r'%s=({[^}].+?});' % re.escape(m_variable_name.group(1))\n                else:\n                    config_re = [r' = {config:({.+?}),assets:', r'(?:[abc])=({.+?});']\n                config = self._search_regex(config_re, webpage, 'info section',\n                                            flags=re.DOTALL)\n                config = json.loads(config)\n        except Exception as e:\n            if re.search('The creator of this video has not given you permission to embed it on this domain.', webpage):\n                raise ExtractorError('The author has restricted the access to this video, try with the \"--referer\" option')\n\n            if re.search(r'<form[^>]+?id=\"pw_form\"', webpage) is not None:\n                if '_video_password_verified' in data:\n                    raise ExtractorError('video password verification failed!')\n                self._verify_video_password(redirect_url, video_id, webpage)\n                return self._real_extract(\n                    smuggle_url(redirect_url, {'_video_password_verified': 'verified'}))\n            else:\n                raise ExtractorError('Unable to extract info section',\n                                     cause=e)\n        else:\n            if config.get('view') == 4:\n                config = self._verify_player_video_password(redirect_url, video_id)\n\n        def is_rented():\n            if '>You rented this title.<' in webpage:\n                return True\n            if config.get('user', {}).get('purchased'):\n                return True\n            label = try_get(\n                config, lambda x: x['video']['vod']['purchase_options'][0]['label_string'], compat_str)\n            if label and label.startswith('You rented this'):\n                return True\n            return False\n\n        if is_rented():\n            feature_id = config.get('video', {}).get('vod', {}).get('feature_id')\n            if feature_id and not data.get('force_feature_id', False):\n                return self.url_result(smuggle_url(\n                    'https://player.vimeo.com/player/%s' % feature_id,\n                    {'force_feature_id': True}), 'Vimeo')\n\n        # Extract video description\n\n        video_description = self._html_search_regex(\n            r'(?s)<div\\s+class=\"[^\"]*description[^\"]*\"[^>]*>(.*?)</div>',\n            webpage, 'description', default=None)\n        if not video_description:\n            video_description = self._html_search_meta(\n                'description', webpage, default=None)\n        if not video_description and mobj.group('pro'):\n            orig_webpage = self._download_webpage(\n                orig_url, video_id,\n                note='Downloading webpage for description',\n                fatal=False)\n            if orig_webpage:\n                video_description = self._html_search_meta(\n                    'description', orig_webpage, default=None)\n        if not video_description and not mobj.group('player'):\n            self._downloader.report_warning('Cannot find video description')\n\n        # Extract upload date\n        if not timestamp:\n            timestamp = self._search_regex(\n                r'<time[^>]+datetime=\"([^\"]+)\"', webpage,\n                'timestamp', default=None)\n\n        try:\n            view_count = int(self._search_regex(r'UserPlays:(\\d+)', webpage, 'view count'))\n            like_count = int(self._search_regex(r'UserLikes:(\\d+)', webpage, 'like count'))\n            comment_count = int(self._search_regex(r'UserComments:(\\d+)', webpage, 'comment count'))\n        except RegexNotFoundError:\n            # This info is only available in vimeo.com/{id} urls\n            view_count = None\n            like_count = None\n            comment_count = None\n\n        formats = []\n        download_request = sanitized_Request('https://vimeo.com/%s?action=load_download_config' % video_id, headers={\n            'X-Requested-With': 'XMLHttpRequest'})\n        download_data = self._download_json(download_request, video_id, fatal=False)\n        if download_data:\n            source_file = download_data.get('source_file')\n            if isinstance(source_file, dict):\n                download_url = source_file.get('download_url')\n                if download_url and not source_file.get('is_cold') and not source_file.get('is_defrosting'):\n                    source_name = source_file.get('public_name', 'Original')\n                    if self._is_valid_url(download_url, video_id, '%s video' % source_name):\n                        ext = (try_get(\n                            source_file, lambda x: x['extension'],\n                            compat_str) or determine_ext(\n                            download_url, None) or 'mp4').lower()\n                        formats.append({\n                            'url': download_url,\n                            'ext': ext,\n                            'width': int_or_none(source_file.get('width')),\n                            'height': int_or_none(source_file.get('height')),\n                            'filesize': parse_filesize(source_file.get('size')),\n                            'format_id': source_name,\n                            'preference': 1,\n                        })\n\n        info_dict = self._parse_config(config, video_id)\n        formats.extend(info_dict['formats'])\n        self._vimeo_sort_formats(formats)\n\n        if not cc_license:\n            cc_license = self._search_regex(\n                r'<link[^>]+rel=[\"\\']license[\"\\'][^>]+href=([\"\\'])(?P<license>(?:(?!\\1).)+)\\1',\n                webpage, 'license', default=None, group='license')\n\n        info_dict.update({\n            'id': video_id,\n            'formats': formats,\n            'timestamp': unified_timestamp(timestamp),\n            'description': video_description,\n            'webpage_url': url,\n            'view_count': view_count,\n            'like_count': like_count,\n            'comment_count': comment_count,\n            'license': cc_license,\n        })\n\n        return info_dict\n\n\nclass VimeoOndemandIE(VimeoBaseInfoExtractor):\n    IE_NAME = 'vimeo:ondemand'\n    _VALID_URL = r'https?://(?:www\\.)?vimeo\\.com/ondemand/(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        # ondemand video not available via https://vimeo.com/id\n        'url': 'https://vimeo.com/ondemand/20704',\n        'md5': 'c424deda8c7f73c1dfb3edd7630e2f35',\n        'info_dict': {\n            'id': '105442900',\n            'ext': 'mp4',\n            'title': '\u05d4\u05de\u05e2\u05d1\u05d3\u05d4 - \u05d1\u05de\u05d0\u05d9 \u05d9\u05d5\u05ea\u05dd \u05e4\u05dc\u05d3\u05de\u05df',\n            'uploader': '\u05d2\u05dd \u05e1\u05e8\u05d8\u05d9\u05dd',\n            'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/gumfilms',\n            'uploader_id': 'gumfilms',\n        },\n        'params': {\n            'format': 'best[protocol=https]',\n        },\n    }, {\n        # requires Referer to be passed along with og:video:url\n        'url': 'https://vimeo.com/ondemand/36938/126682985',\n        'info_dict': {\n            'id': '126682985',\n            'ext': 'mp4',\n            'title': 'R\u00e4vlock, r\u00e4tt l\u00e4te p\u00e5 r\u00e4tt plats',\n            'uploader': 'Lindroth & Norin',\n            'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/user14430847',\n            'uploader_id': 'user14430847',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://vimeo.com/ondemand/nazmaalik',\n        'only_matching': True,\n    }, {\n        'url': 'https://vimeo.com/ondemand/141692381',\n        'only_matching': True,\n    }, {\n        'url': 'https://vimeo.com/ondemand/thelastcolony/150274832',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        return self.url_result(\n            # Some videos require Referer to be passed along with og:video:url\n            # similarly to generic vimeo embeds (e.g.\n            # https://vimeo.com/ondemand/36938/126682985).\n            VimeoIE._smuggle_referrer(self._og_search_video_url(webpage), url),\n            VimeoIE.ie_key())\n\n\nclass VimeoChannelIE(VimeoBaseInfoExtractor):\n    IE_NAME = 'vimeo:channel'\n    _VALID_URL = r'https://vimeo\\.com/channels/(?P<id>[^/?#]+)/?(?:$|[?#])'\n    _MORE_PAGES_INDICATOR = r'<a.+?rel=\"next\"'\n    _TITLE = None\n    _TITLE_RE = r'<link rel=\"alternate\"[^>]+?title=\"(.*?)\"'\n    _TESTS = [{\n        'url': 'https://vimeo.com/channels/tributes',\n        'info_dict': {\n            'id': 'tributes',\n            'title': 'Vimeo Tributes',\n        },\n        'playlist_mincount': 25,\n    }]\n\n    def _page_url(self, base_url, pagenum):\n        return '%s/videos/page:%d/' % (base_url, pagenum)\n\n    def _extract_list_title(self, webpage):\n        return self._TITLE or self._html_search_regex(self._TITLE_RE, webpage, 'list title')\n\n    def _login_list_password(self, page_url, list_id, webpage):\n        login_form = self._search_regex(\n            r'(?s)<form[^>]+?id=\"pw_form\"(.*?)</form>',\n            webpage, 'login form', default=None)\n        if not login_form:\n            return webpage\n\n        password = self._downloader.params.get('videopassword')\n        if password is None:\n            raise ExtractorError('This album is protected by a password, use the --video-password option', expected=True)\n        fields = self._hidden_inputs(login_form)\n        token, vuid = self._extract_xsrft_and_vuid(webpage)\n        fields['token'] = token\n        fields['password'] = password\n        post = urlencode_postdata(fields)\n        password_path = self._search_regex(\n            r'action=\"([^\"]+)\"', login_form, 'password URL')\n        password_url = compat_urlparse.urljoin(page_url, password_path)\n        password_request = sanitized_Request(password_url, post)\n        password_request.add_header('Content-type', 'application/x-www-form-urlencoded')\n        self._set_vimeo_cookie('vuid', vuid)\n        self._set_vimeo_cookie('xsrft', token)\n\n        return self._download_webpage(\n            password_request, list_id,\n            'Verifying the password', 'Wrong password')\n\n    def _title_and_entries(self, list_id, base_url):\n        for pagenum in itertools.count(1):\n            page_url = self._page_url(base_url, pagenum)\n            webpage = self._download_webpage(\n                page_url, list_id,\n                'Downloading page %s' % pagenum)\n\n            if pagenum == 1:\n                webpage = self._login_list_password(page_url, list_id, webpage)\n                yield self._extract_list_title(webpage)\n\n            # Try extracting href first since not all videos are available via\n            # short https://vimeo.com/id URL (e.g. https://vimeo.com/channels/tributes/6213729)\n            clips = re.findall(\n                r'id=\"clip_(\\d+)\"[^>]*>\\s*<a[^>]+href=\"(/(?:[^/]+/)*\\1)(?:[^>]+\\btitle=\"([^\"]+)\")?', webpage)\n            if clips:\n                for video_id, video_url, video_title in clips:\n                    yield self.url_result(\n                        compat_urlparse.urljoin(base_url, video_url),\n                        VimeoIE.ie_key(), video_id=video_id, video_title=video_title)\n            # More relaxed fallback\n            else:\n                for video_id in re.findall(r'id=[\"\\']clip_(\\d+)', webpage):\n                    yield self.url_result(\n                        'https://vimeo.com/%s' % video_id,\n                        VimeoIE.ie_key(), video_id=video_id)\n\n            if re.search(self._MORE_PAGES_INDICATOR, webpage, re.DOTALL) is None:\n                break\n\n    def _extract_videos(self, list_id, base_url):\n        title_and_entries = self._title_and_entries(list_id, base_url)\n        list_title = next(title_and_entries)\n        return self.playlist_result(title_and_entries, list_id, list_title)\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        channel_id = mobj.group('id')\n        return self._extract_videos(channel_id, 'https://vimeo.com/channels/%s' % channel_id)\n\n\nclass VimeoUserIE(VimeoChannelIE):\n    IE_NAME = 'vimeo:user'\n    _VALID_URL = r'https://vimeo\\.com/(?!(?:[0-9]+|watchlater)(?:$|[?#/]))(?P<name>[^/]+)(?:/videos|[#?]|$)'\n    _TITLE_RE = r'<a[^>]+?class=\"user\">([^<>]+?)</a>'\n    _TESTS = [{\n        'url': 'https://vimeo.com/nkistudio/videos',\n        'info_dict': {\n            'title': 'Nki',\n            'id': 'nkistudio',\n        },\n        'playlist_mincount': 66,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        name = mobj.group('name')\n        return self._extract_videos(name, 'https://vimeo.com/%s' % name)\n\n\nclass VimeoAlbumIE(VimeoChannelIE):\n    IE_NAME = 'vimeo:album'\n    _VALID_URL = r'https://vimeo\\.com/album/(?P<id>\\d+)(?:$|[?#]|/(?!video))'\n    _TITLE_RE = r'<header id=\"page_header\">\\n\\s*<h1>(.*?)</h1>'\n    _TESTS = [{\n        'url': 'https://vimeo.com/album/2632481',\n        'info_dict': {\n            'id': '2632481',\n            'title': 'Staff Favorites: November 2013',\n        },\n        'playlist_mincount': 13,\n    }, {\n        'note': 'Password-protected album',\n        'url': 'https://vimeo.com/album/3253534',\n        'info_dict': {\n            'title': 'test',\n            'id': '3253534',\n        },\n        'playlist_count': 1,\n        'params': {\n            'videopassword': 'youtube-dl',\n        }\n    }, {\n        'url': 'https://vimeo.com/album/2632481/sort:plays/format:thumbnail',\n        'only_matching': True,\n    }, {\n        # TODO: respect page number\n        'url': 'https://vimeo.com/album/2632481/page:2/sort:plays/format:thumbnail',\n        'only_matching': True,\n    }]\n\n    def _page_url(self, base_url, pagenum):\n        return '%s/page:%d/' % (base_url, pagenum)\n\n    def _real_extract(self, url):\n        album_id = self._match_id(url)\n        return self._extract_videos(album_id, 'https://vimeo.com/album/%s' % album_id)\n\n\nclass VimeoGroupsIE(VimeoAlbumIE):\n    IE_NAME = 'vimeo:group'\n    _VALID_URL = r'https://vimeo\\.com/groups/(?P<name>[^/]+)(?:/(?!videos?/\\d+)|$)'\n    _TESTS = [{\n        'url': 'https://vimeo.com/groups/rolexawards',\n        'info_dict': {\n            'id': 'rolexawards',\n            'title': 'Rolex Awards for Enterprise',\n        },\n        'playlist_mincount': 73,\n    }]\n\n    def _extract_list_title(self, webpage):\n        return self._og_search_title(webpage)\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        name = mobj.group('name')\n        return self._extract_videos(name, 'https://vimeo.com/groups/%s' % name)\n\n\nclass VimeoReviewIE(VimeoBaseInfoExtractor):\n    IE_NAME = 'vimeo:review'\n    IE_DESC = 'Review pages on vimeo'\n    _VALID_URL = r'https://vimeo\\.com/[^/]+/review/(?P<id>[^/]+)'\n    _TESTS = [{\n        'url': 'https://vimeo.com/user21297594/review/75524534/3c257a1b5d',\n        'md5': 'c507a72f780cacc12b2248bb4006d253',\n        'info_dict': {\n            'id': '75524534',\n            'ext': 'mp4',\n            'title': \"DICK HARDWICK 'Comedian'\",\n            'uploader': 'Richard Hardwick',\n            'uploader_id': 'user21297594',\n        }\n    }, {\n        'note': 'video player needs Referer',\n        'url': 'https://vimeo.com/user22258446/review/91613211/13f927e053',\n        'md5': '6295fdab8f4bf6a002d058b2c6dce276',\n        'info_dict': {\n            'id': '91613211',\n            'ext': 'mp4',\n            'title': 're:(?i)^Death by dogma versus assembling agile . Sander Hoogendoorn',\n            'uploader': 'DevWeek Events',\n            'duration': 2773,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader_id': 'user22258446',\n        }\n    }, {\n        'note': 'Password protected',\n        'url': 'https://vimeo.com/user37284429/review/138823582/c4d865efde',\n        'info_dict': {\n            'id': '138823582',\n            'ext': 'mp4',\n            'title': 'EFFICIENT PICKUP MASTERCLASS MODULE 1',\n            'uploader': 'TMB',\n            'uploader_id': 'user37284429',\n        },\n        'params': {\n            'videopassword': 'holygrail',\n        },\n        'skip': 'video gone',\n    }]\n\n    def _real_initialize(self):\n        self._login()\n\n    def _get_config_url(self, webpage_url, video_id, video_password_verified=False):\n        webpage = self._download_webpage(webpage_url, video_id)\n        config_url = self._html_search_regex(\n            r'data-config-url=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', webpage,\n            'config URL', default=None, group='url')\n        if not config_url:\n            data = self._parse_json(self._search_regex(\n                r'window\\s*=\\s*_extend\\(window,\\s*({.+?})\\);', webpage, 'data',\n                default=NO_DEFAULT if video_password_verified else '{}'), video_id)\n            config_url = data.get('vimeo_esi', {}).get('config', {}).get('configUrl')\n        if config_url is None:\n            self._verify_video_password(webpage_url, video_id, webpage)\n            config_url = self._get_config_url(\n                webpage_url, video_id, video_password_verified=True)\n        return config_url\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        config_url = self._get_config_url(url, video_id)\n        config = self._download_json(config_url, video_id)\n        info_dict = self._parse_config(config, video_id)\n        self._vimeo_sort_formats(info_dict['formats'])\n        info_dict['id'] = video_id\n        return info_dict\n\n\nclass VimeoWatchLaterIE(VimeoChannelIE):\n    IE_NAME = 'vimeo:watchlater'\n    IE_DESC = 'Vimeo watch later list, \"vimeowatchlater\" keyword (requires authentication)'\n    _VALID_URL = r'https://vimeo\\.com/(?:home/)?watchlater|:vimeowatchlater'\n    _TITLE = 'Watch Later'\n    _LOGIN_REQUIRED = True\n    _TESTS = [{\n        'url': 'https://vimeo.com/watchlater',\n        'only_matching': True,\n    }]\n\n    def _real_initialize(self):\n        self._login()\n\n    def _page_url(self, base_url, pagenum):\n        url = '%s/page:%d/' % (base_url, pagenum)\n        request = sanitized_Request(url)\n        # Set the header to get a partial html page with the ids,\n        # the normal page doesn't contain them.\n        request.add_header('X-Requested-With', 'XMLHttpRequest')\n        return request\n\n    def _real_extract(self, url):\n        return self._extract_videos('watchlater', 'https://vimeo.com/watchlater')\n\n\nclass VimeoLikesIE(InfoExtractor):\n    _VALID_URL = r'https://(?:www\\.)?vimeo\\.com/user(?P<id>[0-9]+)/likes/?(?:$|[?#]|sort:)'\n    IE_NAME = 'vimeo:likes'\n    IE_DESC = 'Vimeo user likes'\n    _TEST = {\n        'url': 'https://vimeo.com/user755559/likes/',\n        'playlist_mincount': 293,\n        'info_dict': {\n            'id': 'user755559_likes',\n            'description': 'See all the videos urza likes',\n            'title': 'Videos urza likes',\n        },\n    }\n\n    def _real_extract(self, url):\n        user_id = self._match_id(url)\n        webpage = self._download_webpage(url, user_id)\n        page_count = self._int(\n            self._search_regex(\n                r'''(?x)<li><a\\s+href=\"[^\"]+\"\\s+data-page=\"([0-9]+)\">\n                    .*?</a></li>\\s*<li\\s+class=\"pagination_next\">\n                \n \n# coding: utf-8\n# vimeo only supports https now, but the user can give an http url\n# Bitrates are completely broken. Single m3u8 may contain entries in kbps and bps\n# at the same time without actual units specified. This lead to wrong sorting.\n# Extract title\n# Extract uploader, uploader_url and uploader_id\n# Extract video thumbnail\n# Extract video duration\n# _VALID_URL matches Vimeo URLs\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\nimport re\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    InAdvancePagedList,\n    int_or_none,\n    NO_DEFAULT,\n    RegexNotFoundError,\n    sanitized_Request,\n    smuggle_url,\n    std_headers,\n    try_get,\n    unified_timestamp,\n    unsmuggle_url,\n    urlencode_postdata,\n    unescapeHTML,\n    parse_filesize,\n)\n\n\nclass VimeoBaseInfoExtractor(InfoExtractor):\n    _NETRC_MACHINE = 'vimeo'\n    _LOGIN_REQUIRED = False\n    _LOGIN_URL = 'https://vimeo.com/log_in'\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            if self._LOGIN_REQUIRED:\n                raise ExtractorError('No login info available, needed for using %s.' % self.IE_NAME, expected=True)\n            return\n        webpage = self._download_webpage(\n            self._LOGIN_URL, None, 'Downloading login page')\n        token, vuid = self._extract_xsrft_and_vuid(webpage)\n        data = {\n            'action': 'login',\n            'email': username,\n            'password': password,\n            'service': 'vimeo',\n            'token': token,\n        }\n        self._set_vimeo_cookie('vuid', vuid)\n        try:\n            self._download_webpage(\n                self._LOGIN_URL, None, 'Logging in',\n                data=urlencode_postdata(data), headers={\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'Referer': self._LOGIN_URL,\n                })\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 418:\n                raise ExtractorError(\n                    'Unable to log in: bad username or password',\n                    expected=True)\n            raise ExtractorError('Unable to log in')\n\n    def _verify_video_password(self, url, video_id, webpage):\n        password = self._downloader.params.get('videopassword')\n        if password is None:\n            raise ExtractorError('This video is protected by a password, use the --video-password option', expected=True)\n        token, vuid = self._extract_xsrft_and_vuid(webpage)\n        data = urlencode_postdata({\n            'password': password,\n            'token': token,\n        })\n        if url.startswith('http://'):\n            # vimeo only supports https now, but the user can give an http url\n            url = url.replace('http://', 'https://')\n        password_request = sanitized_Request(url + '/password', data)\n        password_request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        password_request.add_header('Referer', url)\n        self._set_vimeo_cookie('vuid', vuid)\n        return self._download_webpage(\n            password_request, video_id,\n            'Verifying the password', 'Wrong password')\n\n    def _extract_xsrft_and_vuid(self, webpage):\n        xsrft = self._search_regex(\n            r'(?:(?P<q1>[\"\\'])xsrft(?P=q1)\\s*:|xsrft\\s*[=:])\\s*(?P<q>[\"\\'])(?P<xsrft>.+?)(?P=q)',\n            webpage, 'login token', group='xsrft')\n        vuid = self._search_regex(\n            r'[\"\\']vuid[\"\\']\\s*:\\s*([\"\\'])(?P<vuid>.+?)\\1',\n            webpage, 'vuid', group='vuid')\n        return xsrft, vuid\n\n    def _set_vimeo_cookie(self, name, value):\n        self._set_cookie('vimeo.com', name, value)\n\n    def _vimeo_sort_formats(self, formats):\n        # Bitrates are completely broken. Single m3u8 may contain entries in kbps and bps\n        # at the same time without actual units specified. This lead to wrong sorting.\n        self._sort_formats(formats, field_preference=('preference', 'height', 'width', 'fps', 'tbr', 'format_id'))\n\n    def _parse_config(self, config, video_id):\n        video_data = config['video']\n        # Extract title\n        video_title = video_data['title']\n\n        # Extract uploader, uploader_url and uploader_id\n        video_uploader = video_data.get('owner', {}).get('name')\n        video_uploader_url = video_data.get('owner', {}).get('url')\n        video_uploader_id = video_uploader_url.split('/')[-1] if video_uploader_url else None\n\n        # Extract video thumbnail\n        video_thumbnail = video_data.get('thumbnail')\n        if video_thumbnail is None:\n            video_thumbs = video_data.get('thumbs')\n            if video_thumbs and isinstance(video_thumbs, dict):\n                _, video_thumbnail = sorted((int(width if width.isdigit() else 0), t_url) for (width, t_url) in video_thumbs.items())[-1]\n\n        # Extract video duration\n        video_duration = int_or_none(video_data.get('duration'))\n\n        formats = []\n        config_files = video_data.get('files') or config['request'].get('files', {})\n        for f in config_files.get('progressive', []):\n            video_url = f.get('url')\n            if not video_url:\n                continue\n            formats.append({\n                'url': video_url,\n                'format_id': 'http-%s' % f.get('quality'),\n                'width': int_or_none(f.get('width')),\n                'height': int_or_none(f.get('height')),\n                'fps': int_or_none(f.get('fps')),\n                'tbr': int_or_none(f.get('bitrate')),\n            })\n\n        for files_type in ('hls', 'dash'):\n            for cdn_name, cdn_data in config_files.get(files_type, {}).get('cdns', {}).items():\n                manifest_url = cdn_data.get('url')\n                if not manifest_url:\n                    continue\n                format_id = '%s-%s' % (files_type, cdn_name)\n                if files_type == 'hls':\n                    formats.extend(self._extract_m3u8_formats(\n                        manifest_url, video_id, 'mp4',\n                        'm3u8_native', m3u8_id=format_id,\n                        note='Downloading %s m3u8 information' % cdn_name,\n                        fatal=False))\n                elif files_type == 'dash':\n                    mpd_pattern = r'/%s/(?:sep/)?video/' % video_id\n                    mpd_manifest_urls = []\n                    if re.search(mpd_pattern, manifest_url):\n                        for suffix, repl in (('', 'video'), ('_sep', 'sep/video')):\n                            mpd_manifest_urls.append((format_id + suffix, re.sub(\n                                mpd_pattern, '/%s/%s/' % (video_id, repl), manifest_url)))\n                    else:\n                        mpd_manifest_urls = [(format_id, manifest_url)]\n                    for f_id, m_url in mpd_manifest_urls:\n                        mpd_formats = self._extract_mpd_formats(\n                            m_url.replace('/master.json', '/master.mpd'), video_id, f_id,\n                            'Downloading %s MPD information' % cdn_name,\n                            fatal=False)\n                        for f in mpd_formats:\n                            if f.get('vcodec') == 'none':\n                                f['preference'] = -50\n                            elif f.get('acodec') == 'none':\n                                f['preference'] = -40\n                        formats.extend(mpd_formats)\n\n        subtitles = {}\n        text_tracks = config['request'].get('text_tracks')\n        if text_tracks:\n            for tt in text_tracks:\n                subtitles[tt['lang']] = [{\n                    'ext': 'vtt',\n                    'url': 'https://vimeo.com' + tt['url'],\n                }]\n\n        return {\n            'title': video_title,\n            'uploader': video_uploader,\n            'uploader_id': video_uploader_id,\n            'uploader_url': video_uploader_url,\n            'thumbnail': video_thumbnail,\n            'duration': video_duration,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass VimeoIE(VimeoBaseInfoExtractor):\n    \"\"\"Information extractor for vimeo.com.\"\"\"\n\n    # _VALID_URL matches Vimeo URLs\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:\n                            (?:\n                                www|\n                                (?P<player>player)\n                            )\n                            \\.\n                        )?\n                        vimeo(?P<pro>pro)?\\.com/\n                        (?!(?:channels|album)/[^/?#]+/?(?:$|[?#])|[^/]+/review/|ondemand/)\n                        (?:.*?/)?\n                        (?:\n                            (?:\n                                play_redirect_hls|\n                                moogaloop\\.swf)\\?clip_id=\n                            )?\n                        (?:videos?/)?\n                        (?P<id>[0-9]+)\n                        (?:/[\\da-f]+)?\n                        /?(?:[?&].*)?(?:[#].*)?$\n                    '''\n    IE_NAME = 'vimeo'\n    _TESTS = [\n        {\n            'url': 'http://vimeo.com/56015672#at=0',\n            'md5': '8879b6cc097e987f02484baf890129e5',\n            'info_dict': {\n                'id': '56015672',\n                'ext': 'mp4',\n                'title': \"youtube-dl test video - \\u2605 \\\" ' \\u5e78 / \\\\ \\u00e4 \\u21ad \\U0001d550\",\n                'description': 'md5:509a9ad5c9bf97c60faee9203aca4479',\n                'timestamp': 1355990239,\n                'upload_date': '20121220',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/user7108434',\n                'uploader_id': 'user7108434',\n                'uploader': 'Filippo Valsorda',\n                'duration': 10,\n                'license': 'by-sa',\n            },\n        },\n        {\n            'url': 'http://vimeopro.com/openstreetmapus/state-of-the-map-us-2013/video/68093876',\n            'md5': '3b5ca6aa22b60dfeeadf50b72e44ed82',\n            'note': 'Vimeo Pro video (#1197)',\n            'info_dict': {\n                'id': '68093876',\n                'ext': 'mp4',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/openstreetmapus',\n                'uploader_id': 'openstreetmapus',\n                'uploader': 'OpenStreetMap US',\n                'title': 'Andy Allan - Putting the Carto into OpenStreetMap Cartography',\n                'description': 'md5:fd69a7b8d8c34a4e1d2ec2e4afd6ec30',\n                'duration': 1595,\n            },\n        },\n        {\n            'url': 'http://player.vimeo.com/video/54469442',\n            'md5': '619b811a4417aa4abe78dc653becf511',\n            'note': 'Videos that embed the url in the player page',\n            'info_dict': {\n                'id': '54469442',\n                'ext': 'mp4',\n                'title': 'Kathy Sierra: Building the minimum Badass User, Business of Software 2012',\n                'uploader': 'The BLN & Business of Software',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/theblnbusinessofsoftware',\n                'uploader_id': 'theblnbusinessofsoftware',\n                'duration': 3610,\n                'description': None,\n            },\n        },\n        {\n            'url': 'http://vimeo.com/68375962',\n            'md5': 'aaf896bdb7ddd6476df50007a0ac0ae7',\n            'note': 'Video protected with password',\n            'info_dict': {\n                'id': '68375962',\n                'ext': 'mp4',\n                'title': 'youtube-dl password protected test video',\n                'timestamp': 1371200155,\n                'upload_date': '20130614',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/user18948128',\n                'uploader_id': 'user18948128',\n                'uploader': 'Jaime Marqu\u00ednez Ferr\u00e1ndiz',\n                'duration': 10,\n                'description': 'md5:dca3ea23adb29ee387127bc4ddfce63f',\n            },\n            'params': {\n                'videopassword': 'youtube-dl',\n            },\n        },\n        {\n            'url': 'http://vimeo.com/channels/keypeele/75629013',\n            'md5': '2f86a05afe9d7abc0b9126d229bbe15d',\n            'info_dict': {\n                'id': '75629013',\n                'ext': 'mp4',\n                'title': 'Key & Peele: Terrorist Interrogation',\n                'description': 'md5:8678b246399b070816b12313e8b4eb5c',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/atencio',\n                'uploader_id': 'atencio',\n                'uploader': 'Peter Atencio',\n                'timestamp': 1380339469,\n                'upload_date': '20130928',\n                'duration': 187,\n            },\n        },\n        {\n            'url': 'http://vimeo.com/76979871',\n            'note': 'Video with subtitles',\n            'info_dict': {\n                'id': '76979871',\n                'ext': 'mp4',\n                'title': 'The New Vimeo Player (You Know, For Videos)',\n                'description': 'md5:2ec900bf97c3f389378a96aee11260ea',\n                'timestamp': 1381846109,\n                'upload_date': '20131015',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/staff',\n                'uploader_id': 'staff',\n                'uploader': 'Vimeo Staff',\n                'duration': 62,\n            }\n        },\n        {\n            # from https://www.ouya.tv/game/Pier-Solar-and-the-Great-Architects/\n            'url': 'https://player.vimeo.com/video/98044508',\n            'note': 'The js code contains assignments to the same variable as the config',\n            'info_dict': {\n                'id': '98044508',\n                'ext': 'mp4',\n                'title': 'Pier Solar OUYA Official Trailer',\n                'uploader': 'Tulio Gon\u00e7alves',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/user28849593',\n                'uploader_id': 'user28849593',\n            },\n        },\n        {\n            # contains original format\n            'url': 'https://vimeo.com/33951933',\n            'md5': '53c688fa95a55bf4b7293d37a89c5c53',\n            'info_dict': {\n                'id': '33951933',\n                'ext': 'mp4',\n                'title': 'FOX CLASSICS - Forever Classic ID - A Full Minute',\n                'uploader': 'The DMCI',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/dmci',\n                'uploader_id': 'dmci',\n                'timestamp': 1324343742,\n                'upload_date': '20111220',\n                'description': 'md5:ae23671e82d05415868f7ad1aec21147',\n            },\n        },\n        {\n            # only available via https://vimeo.com/channels/tributes/6213729 and\n            # not via https://vimeo.com/6213729\n            'url': 'https://vimeo.com/channels/tributes/6213729',\n            'info_dict': {\n                'id': '6213729',\n                'ext': 'mov',\n                'title': 'Vimeo Tribute: The Shining',\n                'uploader': 'Casey Donahue',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/caseydonahue',\n                'uploader_id': 'caseydonahue',\n                'timestamp': 1250886430,\n                'upload_date': '20090821',\n                'description': 'md5:bdbf314014e58713e6e5b66eb252f4a6',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'expected_warnings': ['Unable to download JSON metadata'],\n        },\n        {\n            # redirects to ondemand extractor and should be passed through it\n            # for successful extraction\n            'url': 'https://vimeo.com/73445910',\n            'info_dict': {\n                'id': '73445910',\n                'ext': 'mp4',\n                'title': 'The Reluctant Revolutionary',\n                'uploader': '10Ft Films',\n                'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/tenfootfilms',\n                'uploader_id': 'tenfootfilms',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://vimeo.com/moogaloop.swf?clip_id=2539741',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://vimeo.com/109815029',\n            'note': 'Video not completely processed, \"failed\" seed status',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://vimeo.com/groups/travelhd/videos/22439234',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://vimeo.com/album/2632481/video/79010983',\n            'only_matching': True,\n        },\n        {\n            # source file returns 403: Forbidden\n            'url': 'https://vimeo.com/7809605',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://vimeo.com/160743502/abd0e13fb4',\n            'only_matching': True,\n        }\n    ]\n\n    @staticmethod\n    def _smuggle_referrer(url, referrer_url):\n        return smuggle_url(url, {'http_headers': {'Referer': referrer_url}})\n\n    @staticmethod\n    def _extract_urls(url, webpage):\n        urls = []\n        # Look for embedded (iframe) Vimeo player\n        for mobj in re.finditer(\n                r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//player\\.vimeo\\.com/video/\\d+.*?)\\1',\n                webpage):\n            urls.append(VimeoIE._smuggle_referrer(unescapeHTML(mobj.group('url')), url))\n        PLAIN_EMBED_RE = (\n            # Look for embedded (swf embed) Vimeo player\n            r'<embed[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?vimeo\\.com/moogaloop\\.swf.+?)\\1',\n            # Look more for non-standard embedded Vimeo player\n            r'<video[^>]+src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?vimeo\\.com/[0-9]+)\\1',\n        )\n        for embed_re in PLAIN_EMBED_RE:\n            for mobj in re.finditer(embed_re, webpage):\n                urls.append(mobj.group('url'))\n        return urls\n\n    @staticmethod\n    def _extract_url(url, webpage):\n        urls = VimeoIE._extract_urls(url, webpage)\n        return urls[0] if urls else None\n\n    def _verify_player_video_password(self, url, video_id):\n        password = self._downloader.params.get('videopassword')\n        if password is None:\n            raise ExtractorError('This video is protected by a password, use the --video-password option')\n        data = urlencode_postdata({'password': password})\n        pass_url = url + '/check-password'\n        password_request = sanitized_Request(pass_url, data)\n        password_request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        password_request.add_header('Referer', url)\n        return self._download_json(\n            password_request, video_id,\n            'Verifying the password', 'Wrong password')\n\n    def _real_initialize(self):\n        self._login()\n\n    def _real_extract(self, url):\n        url, data = unsmuggle_url(url, {})\n        headers = std_headers.copy()\n        if 'http_headers' in data:\n            headers.update(data['http_headers'])\n        if 'Referer' not in headers:\n            headers['Referer'] = url\n\n        # Extract ID from URL\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        orig_url = url\n        if mobj.group('pro') or mobj.group('player'):\n            url = 'https://player.vimeo.com/video/' + video_id\n        elif any(p in url for p in ('play_redirect_hls', 'moogaloop.swf')):\n            url = 'https://vimeo.com/' + video_id\n\n        # Retrieve video webpage to extract further information\n        request = sanitized_Request(url, headers=headers)\n        try:\n            webpage, urlh = self._download_webpage_handle(request, video_id)\n            redirect_url = compat_str(urlh.geturl())\n            # Some URLs redirect to ondemand can't be extracted with\n            # this extractor right away thus should be passed through\n            # ondemand extractor (e.g. https://vimeo.com/73445910)\n            if VimeoOndemandIE.suitable(redirect_url):\n                return self.url_result(redirect_url, VimeoOndemandIE.ie_key())\n        except ExtractorError as ee:\n            if isinstance(ee.cause, compat_HTTPError) and ee.cause.code == 403:\n                errmsg = ee.cause.read()\n                if b'Because of its privacy settings, this video cannot be played here' in errmsg:\n                    raise ExtractorError(\n                        'Cannot download embed-only video without embedding '\n                        'URL. Please call youtube-dl with the URL of the page '\n                        'that embeds this video.',\n                        expected=True)\n            raise\n\n        # Now we begin extracting as much information as we can from what we\n        # retrieved. First we extract the information common to all extractors,\n        # and latter we extract those that are Vimeo specific.\n        self.report_extraction(video_id)\n\n        vimeo_config = self._search_regex(\n            r'vimeo\\.config\\s*=\\s*(?:({.+?})|_extend\\([^,]+,\\s+({.+?})\\));', webpage,\n            'vimeo config', default=None)\n        if vimeo_config:\n            seed_status = self._parse_json(vimeo_config, video_id).get('seed_status', {})\n            if seed_status.get('state') == 'failed':\n                raise ExtractorError(\n                    '%s said: %s' % (self.IE_NAME, seed_status['title']),\n                    expected=True)\n\n        cc_license = None\n        timestamp = None\n\n        # Extract the config JSON\n        try:\n            try:\n                config_url = self._html_search_regex(\n                    r' data-config-url=\"(.+?)\"', webpage,\n                    'config URL', default=None)\n                if not config_url:\n                    # Sometimes new react-based page is served instead of old one that require\n                    # different config URL extraction approach (see\n                    # https://github.com/rg3/youtube-dl/pull/7209)\n                    vimeo_clip_page_config = self._search_regex(\n                        r'vimeo\\.clip_page_config\\s*=\\s*({.+?});', webpage,\n                        'vimeo clip page config')\n                    page_config = self._parse_json(vimeo_clip_page_config, video_id)\n                    config_url = page_config['player']['config_url']\n                    cc_license = page_config.get('cc_license')\n                    timestamp = try_get(\n                        page_config, lambda x: x['clip']['uploaded_on'],\n                        compat_str)\n                config_json = self._download_webpage(config_url, video_id)\n                config = json.loads(config_json)\n            except RegexNotFoundError:\n                # For pro videos or player.vimeo.com urls\n                # We try to find out to which variable is assigned the config dic\n                m_variable_name = re.search(r'(\\w)\\.video\\.id', webpage)\n                if m_variable_name is not None:\n                    config_re = r'%s=({[^}].+?});' % re.escape(m_variable_name.group(1))\n                else:\n                    config_re = [r' = {config:({.+?}),assets:', r'(?:[abc])=({.+?});']\n                config = self._search_regex(config_re, webpage, 'info section',\n                                            flags=re.DOTALL)\n                config = json.loads(config)\n        except Exception as e:\n            if re.search('The creator of this video has not given you permission to embed it on this domain.', webpage):\n                raise ExtractorError('The author has restricted the access to this video, try with the \"--referer\" option')\n\n            if re.search(r'<form[^>]+?id=\"pw_form\"', webpage) is not None:\n                if '_video_password_verified' in data:\n                    raise ExtractorError('video password verification failed!')\n                self._verify_video_password(redirect_url, video_id, webpage)\n                return self._real_extract(\n                    smuggle_url(redirect_url, {'_video_password_verified': 'verified'}))\n            else:\n                raise ExtractorError('Unable to extract info section',\n                                     cause=e)\n        else:\n            if config.get('view') == 4:\n                config = self._verify_player_video_password(redirect_url, video_id)\n\n        def is_rented():\n            if '>You rented this title.<' in webpage:\n                return True\n            if config.get('user', {}).get('purchased'):\n                return True\n            label = try_get(\n                config, lambda x: x['video']['vod']['purchase_options'][0]['label_string'], compat_str)\n            if label and label.startswith('You rented this'):\n                return True\n            return False\n\n        if is_rented():\n            feature_id = config.get('video', {}).get('vod', {}).get('feature_id')\n            if feature_id and not data.get('force_feature_id', False):\n                return self.url_result(smuggle_url(\n                    'https://player.vimeo.com/player/%s' % feature_id,\n                    {'force_feature_id': True}), 'Vimeo')\n\n        # Extract video description\n\n        video_description = self._html_search_regex(\n            r'(?s)<div\\s+class=\"[^\"]*description[^\"]*\"[^>]*>(.*?)</div>',\n            webpage, 'description', default=None)\n        if not video_description:\n            video_description = self._html_search_meta(\n                'description', webpage, default=None)\n        if not video_description and mobj.group('pro'):\n            orig_webpage = self._download_webpage(\n                orig_url, video_id,\n                note='Downloading webpage for description',\n                fatal=False)\n            if orig_webpage:\n                video_description = self._html_search_meta(\n                    'description', orig_webpage, default=None)\n        if not video_description and not mobj.group('player'):\n            self._downloader.report_warning('Cannot find video description')\n\n        # Extract upload date\n        if not timestamp:\n            timestamp = self._search_regex(\n                r'<time[^>]+datetime=\"([^\"]+)\"', webpage,\n                'timestamp', default=None)\n\n        try:\n            view_count = int(self._search_regex(r'UserPlays:(\\d+)', webpage, 'view count'))\n            like_count = int(self._search_regex(r'UserLikes:(\\d+)', webpage, 'like count'))\n            comment_count = int(self._search_regex(r'UserComments:(\\d+)', webpage, 'comment count'))\n        except RegexNotFoundError:\n            # This info is only available in vimeo.com/{id} urls\n            view_count = None\n            like_count = None\n            comment_count = None\n\n        formats = []\n        download_request = sanitized_Request('https://vimeo.com/%s?action=load_download_config' % video_id, headers={\n            'X-Requested-With': 'XMLHttpRequest'})\n        download_data = self._download_json(download_request, video_id, fatal=False)\n        if download_data:\n            source_file = download_data.get('source_file')\n            if isinstance(source_file, dict):\n                download_url = source_file.get('download_url')\n                if download_url and not source_file.get('is_cold') and not source_file.get('is_defrosting'):\n                    source_name = source_file.get('public_name', 'Original')\n                    if self._is_valid_url(download_url, video_id, '%s video' % source_name):\n                        ext = (try_get(\n                            source_file, lambda x: x['extension'],\n                            compat_str) or determine_ext(\n                            download_url, None) or 'mp4').lower()\n                        formats.append({\n                            'url': download_url,\n                            'ext': ext,\n                            'width': int_or_none(source_file.get('width')),\n                            'height': int_or_none(source_file.get('height')),\n                            'filesize': parse_filesize(source_file.get('size')),\n                            'format_id': source_name,\n                            'preference': 1,\n                        })\n\n        info_dict = self._parse_config(config, video_id)\n        formats.extend(info_dict['formats'])\n        self._vimeo_sort_formats(formats)\n\n        if not cc_license:\n            cc_license = self._search_regex(\n                r'<link[^>]+rel=[\"\\']license[\"\\'][^>]+href=([\"\\'])(?P<license>(?:(?!\\1).)+)\\1',\n                webpage, 'license', default=None, group='license')\n\n        info_dict.update({\n            'id': video_id,\n            'formats': formats,\n            'timestamp': unified_timestamp(timestamp),\n            'description': video_description,\n            'webpage_url': url,\n            'view_count': view_count,\n            'like_count': like_count,\n            'comment_count': comment_count,\n            'license': cc_license,\n        })\n\n        return info_dict\n\n\nclass VimeoOndemandIE(VimeoBaseInfoExtractor):\n    IE_NAME = 'vimeo:ondemand'\n    _VALID_URL = r'https?://(?:www\\.)?vimeo\\.com/ondemand/(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        # ondemand video not available via https://vimeo.com/id\n        'url': 'https://vimeo.com/ondemand/20704',\n        'md5': 'c424deda8c7f73c1dfb3edd7630e2f35',\n        'info_dict': {\n            'id': '105442900',\n            'ext': 'mp4',\n            'title': '\u05d4\u05de\u05e2\u05d1\u05d3\u05d4 - \u05d1\u05de\u05d0\u05d9 \u05d9\u05d5\u05ea\u05dd \u05e4\u05dc\u05d3\u05de\u05df',\n            'uploader': '\u05d2\u05dd \u05e1\u05e8\u05d8\u05d9\u05dd',\n            'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/gumfilms',\n            'uploader_id': 'gumfilms',\n        },\n        'params': {\n            'format': 'best[protocol=https]',\n        },\n    }, {\n        # requires Referer to be passed along with og:video:url\n        'url': 'https://vimeo.com/ondemand/36938/126682985',\n        'info_dict': {\n            'id': '126682985',\n            'ext': 'mp4',\n            'title': 'R\u00e4vlock, r\u00e4tt l\u00e4te p\u00e5 r\u00e4tt plats',\n            'uploader': 'Lindroth & Norin',\n            'uploader_url': r're:https?://(?:www\\.)?vimeo\\.com/user14430847',\n            'uploader_id': 'user14430847',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://vimeo.com/ondemand/nazmaalik',\n        'only_matching': True,\n    }, {\n        'url': 'https://vimeo.com/ondemand/141692381',\n        'only_matching': True,\n    }, {\n        'url': 'https://vimeo.com/ondemand/thelastcolony/150274832',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        return self.url_result(\n            # Some videos require Referer to be passed along with og:video:url\n            # similarly to generic vimeo embeds (e.g.\n            # https://vimeo.com/ondemand/36938/126682985).\n            VimeoIE._smuggle_referrer(self._og_search_video_url(webpage), url),\n            VimeoIE.ie_key())\n\n\nclass VimeoChannelIE(VimeoBaseInfoExtractor):\n    IE_NAME = 'vimeo:channel'\n    _VALID_URL = r'https://vimeo\\.com/channels/(?P<id>[^/?#]+)/?(?:$|[?#])'\n    _MORE_PAGES_INDICATOR = r'<a.+?rel=\"next\"'\n    _TITLE = None\n    _TITLE_RE = r'<link rel=\"alternate\"[^>]+?title=\"(.*?)\"'\n    _TESTS = [{\n        'url': 'https://vimeo.com/channels/tributes',\n        'info_dict': {\n            'id': 'tributes',\n            'title': 'Vimeo Tributes',\n        },\n        'playlist_mincount': 25,\n    }]\n\n    def _page_url(self, base_url, pagenum):\n        return '%s/videos/page:%d/' % (base_url, pagenum)\n\n    def _extract_list_title(self, webpage):\n        return self._TITLE or self._html_search_regex(self._TITLE_RE, webpage, 'list title')\n\n    def _login_list_password(self, page_url, list_id, webpage):\n        login_form = self._search_regex(\n            r'(?s)<form[^>]+?id=\"pw_form\"(.*?)</form>',\n            webpage, 'login form', default=None)\n        if not login_form:\n            return webpage\n\n        password = self._downloader.params.get('videopassword')\n        if password is None:\n            raise ExtractorError('This album is protected by a password, use the --video-password option', expected=True)\n        fields = self._hidden_inputs(login_form)\n        token, vuid = self._extract_xsrft_and_vuid(webpage)\n        fields['token'] = token\n        fields['password'] = password\n        post = urlencode_postdata(fields)\n        password_path = self._search_regex(\n            r'action=\"([^\"]+)\"', login_form, 'password URL')\n        password_url = compat_urlparse.urljoin(page_url, password_path)\n        password_request = sanitized_Request(password_url, post)\n        password_request.add_header('Content-type', 'application/x-www-form-urlencoded')\n        self._set_vimeo_cookie('vuid', vuid)\n        self._set_vimeo_cookie('xsrft', token)\n\n        return self._download_webpage(\n            password_request, list_id,\n            'Verifying the password', 'Wrong password')\n\n    def _title_and_entries(self, list_id, base_url):\n        for pagenum in itertools.count(1):\n            page_url = self._page_url(base_url, pagenum)\n            webpage = self._download_webpage(\n                page_url, list_id,\n                'Downloading page %s' % pagenum)\n\n            if pagenum == 1:\n                webpage = self._login_list_password(page_url, list_id, webpage)\n                yield self._extract_list_title(webpage)\n\n            # Try extracting href first since not all videos are available via\n            # short https://vimeo.com/id URL (e.g. https://vimeo.com/channels/tributes/6213729)\n            clips = re.findall(\n                r'id=\"clip_(\\d+)\"[^>]*>\\s*<a[^>]+href=\"(/(?:[^/]+/)*\\1)(?:[^>]+\\btitle=\"([^\"]+)\")?', webpage)\n            if clips:\n                for video_id, video_url, video_title in clips:\n                    yield self.url_result(\n                        compat_urlparse.urljoin(base_url, video_url),\n                        VimeoIE.ie_key(), video_id=video_id, video_title=video_title)\n            # More relaxed fallback\n            else:\n                for video_id in re.findall(r'id=[\"\\']clip_(\\d+)', webpage):\n                    yield self.url_result(\n                        'https://vimeo.com/%s' % video_id,\n                        VimeoIE.ie_key(), video_id=video_id)\n\n            if re.search(self._MORE_PAGES_INDICATOR, webpage, re.DOTALL) is None:\n                break\n\n    def _extract_videos(self, list_id, base_url):\n        title_and_entries = self._title_and_entries(list_id, base_url)\n        list_title = next(title_and_entries)\n        return self.playlist_result(title_and_entries, list_id, list_title)\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        channel_id = mobj.group('id')\n        return self._extract_videos(channel_id, 'https://vimeo.com/channels/%s' % channel_id)\n\n\nclass VimeoUserIE(VimeoChannelIE):\n    IE_NAME = 'vimeo:user'\n    _VALID_URL = r'https://vimeo\\.com/(?!(?:[0-9]+|watchlater)(?:$|[?#/]))(?P<name>[^/]+)(?:/videos|[#?]|$)'\n    _TITLE_RE = r'<a[^>]+?class=\"user\">([^<>]+?)</a>'\n    _TESTS = [{\n        'url': 'https://vimeo.com/nkistudio/videos',\n        'info_dict': {\n            'title': 'Nki',\n            'id': 'nkistudio',\n        },\n        'playlist_mincount': 66,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        name = mobj.group('name')\n        return self._extract_videos(name, 'https://vimeo.com/%s' % name)\n\n\nclass VimeoAlbumIE(VimeoChannelIE):\n    IE_NAME = 'vimeo:album'\n    _VALID_URL = r'https://vimeo\\.com/album/(?P<id>\\d+)(?:$|[?#]|/(?!video))'\n    _TITLE_RE = r'<header id=\"page_header\">\\n\\s*<h1>(.*?)</h1>'\n    _TESTS = [{\n        'url': 'https://vimeo.com/album/2632481',\n        'info_dict': {\n            'id': '2632481',\n            'title': 'Staff Favorites: November 2013',\n        },\n        'playlist_mincount': 13,\n    }, {\n        'note': 'Password-protected album',\n        'url': 'https://vimeo.com/album/3253534',\n        'info_dict': {\n            'title': 'test',\n            'id': '3253534',\n        },\n        'playlist_count': 1,\n        'params': {\n            'videopassword': 'youtube-dl',\n        }\n    }, {\n        'url': 'https://vimeo.com/album/2632481/sort:plays/format:thumbnail',\n        'only_matching': True,\n    }, {\n        # TODO: respect page number\n        'url': 'https://vimeo.com/album/2632481/page:2/sort:plays/format:thumbnail',\n        'only_matching': True,\n    }]\n\n    def _page_url(self, base_url, pagenum):\n        return '%s/page:%d/' % (base_url, pagenum)\n\n    def _real_extract(self, url):\n        album_id = self._match_id(url)\n        return self._extract_videos(album_id, 'https://vimeo.com/album/%s' % album_id)\n\n\nclass VimeoGroupsIE(VimeoAlbumIE):\n    IE_NAME = 'vimeo:group'\n    _VALID_URL = r'https://vimeo\\.com/groups/(?P<name>[^/]+)(?:/(?!videos?/\\d+)|$)'\n    _TESTS = [{\n        'url': 'https://vimeo.com/groups/rolexawards',\n        'info_dict': {\n            'id': 'rolexawards',\n            'title': 'Rolex Awards for Enterprise',\n        },\n        'playlist_mincount': 73,\n    }]\n\n    def _extract_list_title(self, webpage):\n        return self._og_search_title(webpage)\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        name = mobj.group('name')\n        return self._extract_videos(name, 'https://vimeo.com/groups/%s' % name)\n\n\nclass VimeoReviewIE(VimeoBaseInfoExtractor):\n    IE_NAME = 'vimeo:review'\n    IE_DESC = 'Review pages on vimeo'\n    _VALID_URL = r'https://vimeo\\.com/[^/]+/review/(?P<id>[^/]+)'\n    _TESTS = [{\n        'url': 'https://vimeo.com/user21297594/review/75524534/3c257a1b5d',\n        'md5': 'c507a72f780cacc12b2248bb4006d253',\n        'info_dict': {\n            'id': '75524534',\n            'ext': 'mp4',\n            'title': \"DICK HARDWICK 'Comedian'\",\n            'uploader': 'Richard Hardwick',\n            'uploader_id': 'user21297594',\n        }\n    }, {\n        'note': 'video player needs Referer',\n        'url': 'https://vimeo.com/user22258446/review/91613211/13f927e053',\n        'md5': '6295fdab8f4bf6a002d058b2c6dce276',\n        'info_dict': {\n            'id': '91613211',\n            'ext': 'mp4',\n            'title': 're:(?i)^Death by dogma versus assembling agile . Sander Hoogendoorn',\n            'uploader': 'DevWeek Events',\n            'duration': 2773,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader_id': 'user22258446',\n        }\n    }, {\n        'note': 'Password protected',\n        'url': 'https://vimeo.com/user37284429/review/138823582/c4d865efde',\n        'info_dict': {\n            'id': '138823582',\n            'ext': 'mp4',\n            'title': 'EFFICIENT PICKUP MASTERCLASS MODULE 1',\n            'uploader': 'TMB',\n            'uploader_id': 'user37284429',\n        },\n        'params': {\n            'videopassword': 'holygrail',\n        },\n        'skip': 'video gone',\n    }]\n\n    def _real_initialize(self):\n        self._login()\n\n    def _get_config_url(self, webpage_url, video_id, video_password_verified=False):\n        webpage = self._download_webpage(webpage_url, video_id)\n        config_url = self._html_search_regex(\n            r'data-config-url=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', webpage,\n            'config URL', default=None, group='url')\n        if not config_url:\n            data = self._parse_json(self._search_regex(\n                r'window\\s*=\\s*_extend\\(window,\\s*({.+?})\\);', webpage, 'data',\n                default=NO_DEFAULT if video_password_verified else '{}'), video_id)\n            config_url = data.get('vimeo_esi', {}).get('config', {}).get('configUrl')\n        if config_url is None:\n            self._verify_video_password(webpage_url, video_id, webpage)\n            config_url = self._get_config_url(\n                webpage_url, video_id, video_password_verified=True)\n        return config_url\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        config_url = self._get_config_url(url, video_id)\n        config = self._download_json(config_url, video_id)\n        info_dict = self._parse_config(config, video_id)\n        self._vimeo_sort_formats(info_dict['formats'])\n        info_dict['id'] = video_id\n        return info_dict\n\n\nclass VimeoWatchLaterIE(VimeoChannelIE):\n    IE_NAME = 'vimeo:watchlater'\n    IE_DESC = 'Vimeo watch later list, \"vimeowatchlater\" keyword (requires authentication)'\n    _VALID_URL = r'https://vimeo\\.com/(?:home/)?watchlater|:vimeowatchlater'\n    _TITLE = 'Watch Later'\n    _LOGIN_REQUIRED = True\n    _TESTS = [{\n        'url': 'https://vimeo.com/watchlater',\n        'only_matching': True,\n    }]\n\n    def _real_initialize(self):\n        self._login()\n\n    def _page_url(self, base_url, pagenum):\n        url = '%s/page:%d/' % (base_url, pagenum)\n        request = sanitized_Request(url)\n        # Set the header to get a partial html page with the ids,\n        # the normal page doesn't contain them.\n        request.add_header('X-Requested-With', 'XMLHttpRequest')\n        return request\n\n    def _real_extract(self, url):\n        return self._extract_videos('watchlater', 'https://vimeo.com/watchlater')\n\n\nclass VimeoLikesIE(InfoExtractor):\n    _VALID_URL = r'https://(?:www\\.)?vimeo\\.com/user(?P<id>[0-9]+)/likes/?(?:$|[?#]|sort:)'\n    IE_NAME = 'vimeo:likes'\n    IE_DESC = 'Vimeo user likes'\n    _TEST = {\n        'url': 'https://vimeo.com/user755559/likes/',\n        'playlist_mincount': 293,\n        'info_dict': {\n            'id': 'user755559_likes',\n            'description': 'See all the videos urza likes',\n            'title': 'Videos urza likes',\n        },\n    }\n\n    def _real_extract(self, url):\n        user_id = self._match_id(url)\n        webpage = self._download_webpage(url, user_id)\n        page_count = self._int(\n            self._search_regex(\n                r'''(?x)<li><a\\s+href=\"[^\"]+\"\\s+data-page=\"([0-9]+)\">\n                    .*?</a></li>\\s*<li\\s+class=\"pagination_next\">\n                ''', webpage, 'page count'),\n            'page count', fatal=True)\n        PAGE_SIZE = 12\n        title = self._html_search_regex(\n            r'(?s)<h1>(.+?)</h1>', webpage, 'title', fatal=False)\n        description = self._html_search_meta('description', webpage)\n\n        def _get_page(idx):\n            page_url = 'https://vimeo.com/user%s/likes/page:%d/sort:date' % (\n                user_id, idx + 1)\n            webpage = self._download_webpage(\n                page_url, user_id,\n                note='Downloading page %d/%d' % (idx + 1, page_count))\n            video_list = self._search_regex(\n                r'(?s)<ol class=\"js-browse_list[^\"]+\"[^>]*>(.*?)</ol>',\n                webpage, 'video content')\n            paths = re.findall(\n                r'<li[^>]*>\\s*<a\\s+href=\"([^\"]+)\"', video_list)\n            for path in paths:\n                yield {\n                    '_type': 'url',\n                    'url': compat_urlparse.urljoin(page_url, path),\n                }\n\n        pl = InAdvancePagedList(_get_page, page_count, PAGE_SIZE)\n\n        return {\n            '_type': 'playlist',\n            'id': 'user%s_likes' % user_id,\n            'title': title,\n            'description': description,\n            'entries': pl,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vimeo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vimeo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}