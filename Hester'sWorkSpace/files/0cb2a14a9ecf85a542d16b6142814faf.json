{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models\n\n\nclass StockLocationRoute(models.Model):\n    _inherit = \"stock.location.route\"\n    sale_selectable = fields.Boolean(\"Selectable on Sales Order Line\")\n\n\nclass StockMove(models.Model):\n    _inherit = \"stock.move\"\n    sale_line_id = fields.Many2one('sale.order.line', 'Sale Line')\n\n    @api.model\n    def _prepare_merge_moves_distinct_fields(self):\n        distinct_fields = super(StockMove, self)._prepare_merge_moves_distinct_fields()\n        distinct_fields.append('sale_line_id')\n        return distinct_fields\n\n    @api.model\n    def _prepare_merge_move_sort_method(self, move):\n        move.ensure_one()\n        keys_sorted = super(StockMove, self)._prepare_merge_move_sort_method(move)\n        keys_sorted.append(move.sale_line_id.id)\n        return keys_sorted\n\n    def _action_done(self):\n        result = super(StockMove, self)._action_done()\n        for line in self.mapped('sale_line_id'):\n            line.qty_delivered = line._get_delivered_qty()\n        return result\n\n    @api.multi\n    def write(self, vals):\n        res = super(StockMove, self).write(vals)\n        if 'product_uom_qty' in vals:\n            for move in self:\n                if move.state == 'done':\n                    sale_order_lines = self.filtered(lambda move: move.sale_line_id and move.product_id.expense_policy == 'no').mapped('sale_line_id')\n                    for line in sale_order_lines:\n                        line.qty_delivered = line._get_delivered_qty()\n        return res\n\n\nclass ProcurementGroup(models.Model):\n    _inherit = 'procurement.group'\n\n    sale_id = fields.Many2one('sale.order', 'Sale Order')\n\n\nclass ProcurementRule(models.Model):\n    _inherit = 'procurement.rule'\n\n    def _get_stock_move_values(self, product_id, product_qty, product_uom, location_id, name, origin, values, group_id):\n        result = super(ProcurementRule, self)._get_stock_move_values(product_id, product_qty, product_uom, location_id, name, origin, values, group_id)\n        if values.get('sale_line_id', False):\n            result['sale_line_id'] = values['sale_line_id']\n        return result\n\n\nclass StockPicking(models.Model):\n    _inherit = 'stock.picking'\n\n    sale_id = fields.Many2one(related=\"group_id.sale_id\", string=\"Sales Order\", store=True)\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models\n\n\nclass StockLocationRoute(models.Model):\n    _inherit = \"stock.location.route\"\n    sale_selectable = fields.Boolean(\"Selectable on Sales Order Line\")\n\n\nclass StockMove(models.Model):\n    _inherit = \"stock.move\"\n    sale_line_id = fields.Many2one('sale.order.line', 'Sale Line')\n\n    @api.model\n    def _prepare_merge_moves_distinct_fields(self):\n        distinct_fields = super(StockMove, self)._prepare_merge_moves_distinct_fields()\n        distinct_fields.append('sale_line_id')\n        return distinct_fields\n\n    @api.model\n    def _prepare_merge_move_sort_method(self, move):\n        move.ensure_one()\n        keys_sorted = super(StockMove, self)._prepare_merge_move_sort_method(move)\n        keys_sorted.append(move.sale_line_id.id)\n        return keys_sorted\n\n    def _action_done(self):\n        result = super(StockMove, self)._action_done()\n        for line in self.mapped('sale_line_id'):\n            line.qty_delivered = line._get_delivered_qty()\n        return result\n\n    @api.multi\n    def write(self, vals):\n        res = super(StockMove, self).write(vals)\n        if 'product_uom_qty' in vals:\n            for move in self:\n                if move.state == 'done':\n                    sale_order_lines = self.filtered(lambda move: move.sale_line_id and move.product_id.expense_policy == 'no').mapped('sale_line_id')\n                    for line in sale_order_lines:\n                        line.qty_delivered = line._get_delivered_qty()\n        return res\n\n\nclass ProcurementGroup(models.Model):\n    _inherit = 'procurement.group'\n\n    sale_id = fields.Many2one('sale.order', 'Sale Order')\n\n\nclass ProcurementRule(models.Model):\n    _inherit = 'procurement.rule'\n\n    def _get_stock_move_values(self, product_id, product_qty, product_uom, location_id, name, origin, values, group_id):\n        result = super(ProcurementRule, self)._get_stock_move_values(product_id, product_qty, product_uom, location_id, name, origin, values, group_id)\n        if values.get('sale_line_id', False):\n            result['sale_line_id'] = values['sale_line_id']\n        return result\n\n\nclass StockPicking(models.Model):\n    _inherit = 'stock.picking'\n\n    sale_id = fields.Many2one(related=\"group_id.sale_id\", string=\"Sales Order\", store=True)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "stock.py", "id": "0cb2a14a9ecf85a542d16b6142814faf", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/sale_stock/models/stock.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}