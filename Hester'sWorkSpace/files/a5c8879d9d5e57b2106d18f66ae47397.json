{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models\n\n\nclass MakeInvoice(models.TransientModel):\n    _name = 'mrp.repair.make_invoice'\n    _description = 'Make Invoice'\n\n    group = fields.Boolean('Group by partner invoice address')\n\n    @api.multi\n    def make_invoices(self):\n        if not self._context.get('active_ids'):\n            return {'type': 'ir.actions.act_window_close'}\n        new_invoice = {}\n        for wizard in self:\n            repairs = self.env['mrp.repair'].browse(self._context['active_ids'])\n            new_invoice = repairs.action_invoice_create(group=wizard.group)\n\n            \n            \n            \n            repairs.action_repair_invoice_create()\n        return {\n            'domain': [('id', 'in', list(new_invoice.values()))],\n            'name': 'Invoices',\n            'view_type': 'form',\n            'view_mode': 'tree,form',\n            'res_model': 'account.invoice',\n            'view_id': False,\n            'views': [(self.env.ref('account.invoice_tree').id, 'tree'), (self.env.ref('account.invoice_form').id, 'form')],\n            'context': \"{'type':'out_invoice'}\",\n            'type': 'ir.actions.act_window'\n        }\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     we udpate state given repairs  otherwise remain  invoiced      note trigger another call method  action invoice create      second call anything  since repairs already invoiced  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models\n\n\nclass MakeInvoice(models.TransientModel):\n    _name = 'mrp.repair.make_invoice'\n    _description = 'Make Invoice'\n\n    group = fields.Boolean('Group by partner invoice address')\n\n    @api.multi\n    def make_invoices(self):\n        if not self._context.get('active_ids'):\n            return {'type': 'ir.actions.act_window_close'}\n        new_invoice = {}\n        for wizard in self:\n            repairs = self.env['mrp.repair'].browse(self._context['active_ids'])\n            new_invoice = repairs.action_invoice_create(group=wizard.group)\n\n            # We have to udpate the state of the given repairs, otherwise they remain 'to be invoiced'.\n            # Note that this will trigger another call to the method 'action_invoice_create',\n            # but that second call will not do anything, since the repairs are already invoiced.\n            repairs.action_repair_invoice_create()\n        return {\n            'domain': [('id', 'in', list(new_invoice.values()))],\n            'name': 'Invoices',\n            'view_type': 'form',\n            'view_mode': 'tree,form',\n            'res_model': 'account.invoice',\n            'view_id': False,\n            'views': [(self.env.ref('account.invoice_tree').id, 'tree'), (self.env.ref('account.invoice_form').id, 'form')],\n            'context': \"{'type':'out_invoice'}\",\n            'type': 'ir.actions.act_window'\n        }\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "mrp_repair_make_invoice.py", "id": "a5c8879d9d5e57b2106d18f66ae47397", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/mrp_repair/wizard/mrp_repair_make_invoice.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}