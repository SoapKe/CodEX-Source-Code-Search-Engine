{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2018, Dag Wieers (dagwieers) <dag@wieers.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_firmware_source\nshort_description: Manage firmware image sources (firmware:OSource)\ndescription:\n- Manage firmware image sources on Cisco ACI fabrics.\nauthor:\n- Dag Wieers (@dagwieers)\nversion_added: '2.5'\nnotes:\n- More information about the internal APIC class B(firmware:OSource) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\noptions:\n  source:\n    description:\n    - The identifying name for the outside source of images, such as an HTTP or SCP server.\n    required: yes\n    aliases: [ name, source_name ]\n  polling_interval:\n    description:\n    - Polling interval in minutes.\n  url_protocol:\n    description:\n    - The Firmware download protocol.\n    choices: [ http, local, scp, usbkey ]\n    default: scp\n    aliases: [ url_proto ]\n  url:\n    description:\n      The firmware URL for the image(s) on the source.\n  url_password:\n    description:\n      The Firmware password or key string.\n  url_username:\n    description:\n      The username for the source.\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add firmware source\n  aci_firmware_source:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    source: aci-msft-pkg-3.1.1i.zip\n    url: foo.bar.cisco.com/download/cisco/aci/aci-msft-pkg-3.1.1i.zip\n    url_protocol: http\n    state: present\n\n- name: Remove firmware source\n  aci_firmware_source:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    source: aci-msft-pkg-3.1.1i.zip\n    state: absent\n\n- name: Query a specific firmware source\n  aci_firmware_source:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    source: aci-msft-pkg-3.1.1i.zip\n    state: query\n\n- name: Query all firmware sources\n  aci_firmware_source:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        source=dict(type='str', aliases=['name', 'source_name']),  \n        polling_interval=dict(type='int'),\n        url=dict(type='str'),\n        url_username=dict(type='str'),\n        url_password=dict(type='str', no_log=True),\n        url_protocol=dict(type='str', default='scp', choices=['http', 'local', 'scp', 'usbkey'], aliases=['url_proto']),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['source']],\n            ['state', 'present', ['url_protocol', 'source', 'url']],\n        ],\n    )\n\n    polling_interval = module.params['polling_interval']\n    url_protocol = module.params['url_protocol']\n    state = module.params['state']\n    source = module.params['source']\n    url = module.params['url']\n    url_password = module.params['url_password']\n    url_username = module.params['url_username']\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class='firmwareOSource',\n            aci_rn='fabric/fwrepop',\n            filter_target='eq(firmwareOSource.name, \"{0}\")'.format(source),\n            module_object=source,\n        ),\n    )\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='firmwareOSource',\n            class_config=dict(\n                name=source,\n                url=url,\n                password=url_password,\n                pollingInterval=polling_interval,\n                proto=url_protocol,\n                user=url_username,\n            ),\n        )\n\n        aci.get_diff(aci_class='firmwareOSource')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  aci firmware source short description  manage firmware image sources (firmware osource) description    manage firmware image sources cisco aci fabrics  author    dag wieers ( dagwieers) version added   2 5  notes    more information internal apic class b(firmware osource)   l(the apic management information model reference https   developer cisco com docs apic mim ref )  options    source      description        the identifying name outside source images  http scp server      required  yes     aliases    name  source name     polling interval      description        polling interval minutes    url protocol      description        the firmware download protocol      choices    http  local  scp  usbkey       default  scp     aliases    url proto     url      description        the firmware url image(s) source    url password      description        the firmware password key string    url username      description        the username source    state      description        use c(present) c(absent) adding removing        use c(query) listing object multiple objects      choices    absent  present  query       default  present extends documentation fragment  aci      examples   r      name  add firmware source   aci firmware source      host  apic     username  admin     password  somesecretpassword     source  aci msft pkg 3 1 1i zip     url  foo bar cisco com download cisco aci aci msft pkg 3 1 1i zip     url protocol  http     state  present    name  remove firmware source   aci firmware source      host  apic     username  admin     password  somesecretpassword     source  aci msft pkg 3 1 1i zip     state  absent    name  query specific firmware source   aci firmware source      host  apic     username  admin     password  somesecretpassword     source  aci msft pkg 3 1 1i zip     state  query    name  query firmware sources   aci firmware source      host  apic     username  admin     password  somesecretpassword     state  query      return   r    current    description  the existing configuration apic module finished   returned  success   type  list   sample                               fvtenant                      attributes                          descr    production environment                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      error    description  the error information returned apic   returned  failure   type  dict   sample                 code    122            text    unknown managed object class foo        raw    description  the raw output returned apic rest api (xml json)   returned  parse error   type  string   sample     xml version  1 0  encoding  utf 8    imdata totalcount  1   error code  122  text  unknown managed object class foo     imdata   sent    description  the actual minimal configuration pushed apic   returned  info   type  list   sample                 fvtenant                  attributes                      descr    production environment                                previous    description  the original configuration apic module started   returned  info   type  list   sample                               fvtenant                      attributes                          descr    production                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      proposed    description  the assembled configuration user provided parameters   returned  info   type  dict   sample                 fvtenant                  attributes                      descr    production environment                    name    production                                filter string    description  the filter string used request   returned  failure debug   type  string   sample   rsp prop include config method    description  the http method used request apic   returned  failure debug   type  string   sample  post response    description  the http response apic   returned  failure debug   type  string   sample  ok (30 bytes) status    description  the http status apic   returned  failure debug   type  int   sample  200 url    description  the http url used request apic   returned  failure debug   type  string   sample  https   10 11 12 13 api mo uni tn production json         usr bin python        coding  utf 8        copyright  (c) 2018  dag wieers (dagwieers)  dag wieers com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    not required querying objects ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2018, Dag Wieers (dagwieers) <dag@wieers.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_firmware_source\nshort_description: Manage firmware image sources (firmware:OSource)\ndescription:\n- Manage firmware image sources on Cisco ACI fabrics.\nauthor:\n- Dag Wieers (@dagwieers)\nversion_added: '2.5'\nnotes:\n- More information about the internal APIC class B(firmware:OSource) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\noptions:\n  source:\n    description:\n    - The identifying name for the outside source of images, such as an HTTP or SCP server.\n    required: yes\n    aliases: [ name, source_name ]\n  polling_interval:\n    description:\n    - Polling interval in minutes.\n  url_protocol:\n    description:\n    - The Firmware download protocol.\n    choices: [ http, local, scp, usbkey ]\n    default: scp\n    aliases: [ url_proto ]\n  url:\n    description:\n      The firmware URL for the image(s) on the source.\n  url_password:\n    description:\n      The Firmware password or key string.\n  url_username:\n    description:\n      The username for the source.\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add firmware source\n  aci_firmware_source:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    source: aci-msft-pkg-3.1.1i.zip\n    url: foo.bar.cisco.com/download/cisco/aci/aci-msft-pkg-3.1.1i.zip\n    url_protocol: http\n    state: present\n\n- name: Remove firmware source\n  aci_firmware_source:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    source: aci-msft-pkg-3.1.1i.zip\n    state: absent\n\n- name: Query a specific firmware source\n  aci_firmware_source:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    source: aci-msft-pkg-3.1.1i.zip\n    state: query\n\n- name: Query all firmware sources\n  aci_firmware_source:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        source=dict(type='str', aliases=['name', 'source_name']),  # Not required for querying all objects\n        polling_interval=dict(type='int'),\n        url=dict(type='str'),\n        url_username=dict(type='str'),\n        url_password=dict(type='str', no_log=True),\n        url_protocol=dict(type='str', default='scp', choices=['http', 'local', 'scp', 'usbkey'], aliases=['url_proto']),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['source']],\n            ['state', 'present', ['url_protocol', 'source', 'url']],\n        ],\n    )\n\n    polling_interval = module.params['polling_interval']\n    url_protocol = module.params['url_protocol']\n    state = module.params['state']\n    source = module.params['source']\n    url = module.params['url']\n    url_password = module.params['url_password']\n    url_username = module.params['url_username']\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class='firmwareOSource',\n            aci_rn='fabric/fwrepop',\n            filter_target='eq(firmwareOSource.name, \"{0}\")'.format(source),\n            module_object=source,\n        ),\n    )\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='firmwareOSource',\n            class_config=dict(\n                name=source,\n                url=url,\n                password=url_password,\n                pollingInterval=polling_interval,\n                proto=url_protocol,\n                user=url_username,\n            ),\n        )\n\n        aci.get_diff(aci_class='firmwareOSource')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "aci_firmware_source.py", "id": "602aef2819f5357f6d2cb1f593301fab", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aci/aci_firmware_source.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}