{"author": "nvbn", "code": "import pytest\nfrom io import BytesIO\nfrom thefuck.rules.git_checkout import match, get_branches, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture\ndef did_not_match(target, did_you_forget=False):\n    error = (\"error: pathspec '{}' did not match any \"\n             \"file(s) known to git.\".format(target))\n    if did_you_forget:\n        error = (\"{}\\nDid you forget to 'git add'?'\".format(error))\n    return error\n\n\n@pytest.fixture\ndef git_branch(mocker, branches):\n    mock = mocker.patch('subprocess.Popen')\n    mock.return_value.stdout = BytesIO(branches)\n    return mock\n\n\n@pytest.mark.parametrize('command', [\n    Command('git checkout unknown', did_not_match('unknown')),\n    Command('git commit unknown', did_not_match('unknown'))])\ndef test_match(command):\n    assert match(command)\n\n\n@pytest.mark.parametrize('command', [\n    Command('git submodule update unknown',\n            did_not_match('unknown', True)),\n    Command('git checkout known', ''),\n    Command('git commit known', '')])\ndef test_not_match(command):\n    assert not match(command)\n\n\n@pytest.mark.parametrize('branches, branch_list', [\n    (b'', []),\n    (b'* master', ['master']),\n    (b'  remotes/origin/master', ['master']),\n    (b'  just-another-branch', ['just-another-branch']),\n    (b'* master\\n  just-another-branch', ['master', 'just-another-branch']),\n    (b'* master\\n  remotes/origin/master\\n  just-another-branch',\n     ['master', 'master', 'just-another-branch'])])\ndef test_get_branches(branches, branch_list, git_branch):\n    git_branch(branches)\n    assert list(get_branches()) == branch_list\n\n\n@pytest.mark.parametrize('branches, command, new_command', [\n    (b'',\n     Command('git checkout unknown', did_not_match('unknown')),\n     'git checkout -b unknown'),\n    (b'',\n     Command('git commit unknown', did_not_match('unknown')),\n     'git branch unknown && git commit unknown'),\n    (b'  test-random-branch-123',\n     Command('git checkout tst-rdm-brnch-123',\n             did_not_match('tst-rdm-brnch-123')),\n     'git checkout test-random-branch-123'),\n    (b'  test-random-branch-123',\n     Command('git commit tst-rdm-brnch-123',\n             did_not_match('tst-rdm-brnch-123')),\n     'git commit test-random-branch-123')])\ndef test_get_new_command(branches, command, new_command, git_branch):\n    git_branch(branches)\n    assert get_new_command(command) == new_command\n", "comments": "", "content": "import pytest\nfrom io import BytesIO\nfrom thefuck.rules.git_checkout import match, get_branches, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture\ndef did_not_match(target, did_you_forget=False):\n    error = (\"error: pathspec '{}' did not match any \"\n             \"file(s) known to git.\".format(target))\n    if did_you_forget:\n        error = (\"{}\\nDid you forget to 'git add'?'\".format(error))\n    return error\n\n\n@pytest.fixture\ndef git_branch(mocker, branches):\n    mock = mocker.patch('subprocess.Popen')\n    mock.return_value.stdout = BytesIO(branches)\n    return mock\n\n\n@pytest.mark.parametrize('command', [\n    Command('git checkout unknown', did_not_match('unknown')),\n    Command('git commit unknown', did_not_match('unknown'))])\ndef test_match(command):\n    assert match(command)\n\n\n@pytest.mark.parametrize('command', [\n    Command('git submodule update unknown',\n            did_not_match('unknown', True)),\n    Command('git checkout known', ''),\n    Command('git commit known', '')])\ndef test_not_match(command):\n    assert not match(command)\n\n\n@pytest.mark.parametrize('branches, branch_list', [\n    (b'', []),\n    (b'* master', ['master']),\n    (b'  remotes/origin/master', ['master']),\n    (b'  just-another-branch', ['just-another-branch']),\n    (b'* master\\n  just-another-branch', ['master', 'just-another-branch']),\n    (b'* master\\n  remotes/origin/master\\n  just-another-branch',\n     ['master', 'master', 'just-another-branch'])])\ndef test_get_branches(branches, branch_list, git_branch):\n    git_branch(branches)\n    assert list(get_branches()) == branch_list\n\n\n@pytest.mark.parametrize('branches, command, new_command', [\n    (b'',\n     Command('git checkout unknown', did_not_match('unknown')),\n     'git checkout -b unknown'),\n    (b'',\n     Command('git commit unknown', did_not_match('unknown')),\n     'git branch unknown && git commit unknown'),\n    (b'  test-random-branch-123',\n     Command('git checkout tst-rdm-brnch-123',\n             did_not_match('tst-rdm-brnch-123')),\n     'git checkout test-random-branch-123'),\n    (b'  test-random-branch-123',\n     Command('git commit tst-rdm-brnch-123',\n             did_not_match('tst-rdm-brnch-123')),\n     'git commit test-random-branch-123')])\ndef test_get_new_command(branches, command, new_command, git_branch):\n    git_branch(branches)\n    assert get_new_command(command) == new_command\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_git_checkout.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_git_checkout.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}