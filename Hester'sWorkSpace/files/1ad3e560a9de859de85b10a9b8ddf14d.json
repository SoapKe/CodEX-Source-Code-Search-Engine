{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport os.path\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    remove_start,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass MonikerIE(InfoExtractor):\n    IE_DESC = 'allmyvideos.net and vidspot.net'\n    _VALID_URL = r'https?://(?:www\\.)?(?:allmyvideos|vidspot)\\.net/(?:(?:2|v)/v-)?(?P<id>[a-zA-Z0-9_-]+)'\n\n    _TESTS = [{\n        'url': 'http://allmyvideos.net/jih3nce3x6wn',\n        'md5': '710883dee1bfc370ecf9fa6a89307c88',\n        'info_dict': {\n            'id': 'jih3nce3x6wn',\n            'ext': 'mp4',\n            'title': 'youtube-dl test video',\n        },\n    }, {\n        'url': 'http://allmyvideos.net/embed-jih3nce3x6wn',\n        'md5': '710883dee1bfc370ecf9fa6a89307c88',\n        'info_dict': {\n            'id': 'jih3nce3x6wn',\n            'ext': 'mp4',\n            'title': 'youtube-dl test video',\n        },\n    }, {\n        'url': 'http://vidspot.net/l2ngsmhs8ci5',\n        'md5': '710883dee1bfc370ecf9fa6a89307c88',\n        'info_dict': {\n            'id': 'l2ngsmhs8ci5',\n            'ext': 'mp4',\n            'title': 'youtube-dl test video',\n        },\n    }, {\n        'url': 'https://www.vidspot.net/l2ngsmhs8ci5',\n        'only_matching': True,\n    }, {\n        'url': 'http://vidspot.net/2/v-ywDf99',\n        'md5': '5f8254ce12df30479428b0152fb8e7ba',\n        'info_dict': {\n            'id': 'ywDf99',\n            'ext': 'mp4',\n            'title': 'IL FAIT LE MALIN EN PORSHE CAYENNE ( mais pas pour longtemps)',\n            'description': 'IL FAIT LE MALIN EN PORSHE CAYENNE.',\n        },\n    }, {\n        'url': 'http://allmyvideos.net/v/v-HXZm5t',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        orig_video_id = self._match_id(url)\n        video_id = remove_start(orig_video_id, 'embed-')\n        url = url.replace(orig_video_id, video_id)\n        assert re.match(self._VALID_URL, url) is not None\n        orig_webpage = self._download_webpage(url, video_id)\n\n        if '>File Not Found<' in orig_webpage:\n            raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n\n        error = self._search_regex(\n            r'class=\"err\">([^<]+)<', orig_webpage, 'error', default=None)\n        if error:\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, error), expected=True)\n\n        builtin_url = self._search_regex(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>.+?/builtin-.+?)\\1',\n            orig_webpage, 'builtin URL', default=None, group='url')\n\n        if builtin_url:\n            req = sanitized_Request(builtin_url)\n            req.add_header('Referer', url)\n            webpage = self._download_webpage(req, video_id, 'Downloading builtin page')\n            title = self._og_search_title(orig_webpage).strip()\n            description = self._og_search_description(orig_webpage).strip()\n        else:\n            fields = re.findall(r'type=\"hidden\" name=\"(.+?)\"\\s* value=\"?(.+?)\">', orig_webpage)\n            data = dict(fields)\n\n            post = urlencode_postdata(data)\n            headers = {\n                b'Content-Type': b'application/x-www-form-urlencoded',\n            }\n            req = sanitized_Request(url, post, headers)\n            webpage = self._download_webpage(\n                req, video_id, note='Downloading video page ...')\n\n            title = os.path.splitext(data['fname'])[0]\n            description = None\n\n        \n        links = re.findall(r'\"file\" : \"?(.+?)\",', webpage)\n        \n        formats = [{\n            'url': l,\n            'quality': i,\n        } for i, l in enumerate(links)]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# Could be several links with different quality\n# Assume the links are ordered in quality\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport os.path\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    remove_start,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass MonikerIE(InfoExtractor):\n    IE_DESC = 'allmyvideos.net and vidspot.net'\n    _VALID_URL = r'https?://(?:www\\.)?(?:allmyvideos|vidspot)\\.net/(?:(?:2|v)/v-)?(?P<id>[a-zA-Z0-9_-]+)'\n\n    _TESTS = [{\n        'url': 'http://allmyvideos.net/jih3nce3x6wn',\n        'md5': '710883dee1bfc370ecf9fa6a89307c88',\n        'info_dict': {\n            'id': 'jih3nce3x6wn',\n            'ext': 'mp4',\n            'title': 'youtube-dl test video',\n        },\n    }, {\n        'url': 'http://allmyvideos.net/embed-jih3nce3x6wn',\n        'md5': '710883dee1bfc370ecf9fa6a89307c88',\n        'info_dict': {\n            'id': 'jih3nce3x6wn',\n            'ext': 'mp4',\n            'title': 'youtube-dl test video',\n        },\n    }, {\n        'url': 'http://vidspot.net/l2ngsmhs8ci5',\n        'md5': '710883dee1bfc370ecf9fa6a89307c88',\n        'info_dict': {\n            'id': 'l2ngsmhs8ci5',\n            'ext': 'mp4',\n            'title': 'youtube-dl test video',\n        },\n    }, {\n        'url': 'https://www.vidspot.net/l2ngsmhs8ci5',\n        'only_matching': True,\n    }, {\n        'url': 'http://vidspot.net/2/v-ywDf99',\n        'md5': '5f8254ce12df30479428b0152fb8e7ba',\n        'info_dict': {\n            'id': 'ywDf99',\n            'ext': 'mp4',\n            'title': 'IL FAIT LE MALIN EN PORSHE CAYENNE ( mais pas pour longtemps)',\n            'description': 'IL FAIT LE MALIN EN PORSHE CAYENNE.',\n        },\n    }, {\n        'url': 'http://allmyvideos.net/v/v-HXZm5t',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        orig_video_id = self._match_id(url)\n        video_id = remove_start(orig_video_id, 'embed-')\n        url = url.replace(orig_video_id, video_id)\n        assert re.match(self._VALID_URL, url) is not None\n        orig_webpage = self._download_webpage(url, video_id)\n\n        if '>File Not Found<' in orig_webpage:\n            raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n\n        error = self._search_regex(\n            r'class=\"err\">([^<]+)<', orig_webpage, 'error', default=None)\n        if error:\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, error), expected=True)\n\n        builtin_url = self._search_regex(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>.+?/builtin-.+?)\\1',\n            orig_webpage, 'builtin URL', default=None, group='url')\n\n        if builtin_url:\n            req = sanitized_Request(builtin_url)\n            req.add_header('Referer', url)\n            webpage = self._download_webpage(req, video_id, 'Downloading builtin page')\n            title = self._og_search_title(orig_webpage).strip()\n            description = self._og_search_description(orig_webpage).strip()\n        else:\n            fields = re.findall(r'type=\"hidden\" name=\"(.+?)\"\\s* value=\"?(.+?)\">', orig_webpage)\n            data = dict(fields)\n\n            post = urlencode_postdata(data)\n            headers = {\n                b'Content-Type': b'application/x-www-form-urlencoded',\n            }\n            req = sanitized_Request(url, post, headers)\n            webpage = self._download_webpage(\n                req, video_id, note='Downloading video page ...')\n\n            title = os.path.splitext(data['fname'])[0]\n            description = None\n\n        # Could be several links with different quality\n        links = re.findall(r'\"file\" : \"?(.+?)\",', webpage)\n        # Assume the links are ordered in quality\n        formats = [{\n            'url': l,\n            'quality': i,\n        } for i, l in enumerate(links)]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "moniker.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/moniker.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}