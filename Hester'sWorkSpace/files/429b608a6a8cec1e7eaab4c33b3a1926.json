{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models\nfrom odoo.tools.translate import html_translate\nfrom odoo.addons import decimal_precision as dp\n\n\nclass SaleQuoteTemplate(models.Model):\n    _name = \"sale.quote.template\"\n    _description = \"Sale Quotation Template\"\n\n    name = fields.Char('Quotation Template', required=True)\n    website_description = fields.Html('Description', translate=html_translate, sanitize_attributes=False)\n    quote_line = fields.One2many('sale.quote.line', 'quote_id', 'Quotation Template Lines', copy=True)\n    note = fields.Text('Terms and conditions')\n    options = fields.One2many('sale.quote.option', 'template_id', 'Optional Products Lines', copy=True)\n    number_of_days = fields.Integer('Quotation Duration',\n        help='Number of days for the validity date computation of the quotation')\n    require_payment = fields.Selection([\n        (0, 'Online Signature'),\n        (1, 'Online Payment')], default=0, string='Confirmation Mode',\n        help=\"Choose how you want to confirm an order to launch the delivery process. You can either \"\n             \"request a digital signature or an upfront payment. With a digital signature, you can \"\n             \"request the payment when issuing the invoice.\")\n    mail_template_id = fields.Many2one(\n        'mail.template', 'Confirmation Mail',\n        domain=[('model', '=', 'sale.order')],\n        help=\"This e-mail template will be sent on confirmation. Leave empty to send nothing.\")\n    active = fields.Boolean(default=True, help=\"If unchecked, it will allow you to hide the quotation template without removing it.\")\n    \n    @api.multi\n    def open_template(self):\n        self.ensure_one()\n        return {\n            'type': 'ir.actions.act_url',\n            'target': 'self',\n            'url': '/quote/template/%d' % self.id\n        }\n\n\nclass SaleQuoteLine(models.Model):\n    _name = \"sale.quote.line\"\n    _description = \"Quotation Template Lines\"\n    _order = 'sequence, id'\n\n    sequence = fields.Integer('Sequence', help=\"Gives the sequence order when displaying a list of sale quote lines.\",\n        default=10)\n    quote_id = fields.Many2one('sale.quote.template', 'Quotation Template Reference', required=True,\n        ondelete='cascade', index=True)\n    name = fields.Text('Description', required=True, translate=True)\n    product_id = fields.Many2one('product.product', 'Product', domain=[('sale_ok', '=', True)], required=True)\n    layout_category_id = fields.Many2one('sale.layout_category', string='Section')\n    website_description = fields.Html('Line Description', related='product_id.product_tmpl_id.quote_description',\n        translate=html_translate)\n    price_unit = fields.Float('Unit Price', required=True, digits=dp.get_precision('Product Price'))\n    discount = fields.Float('Discount (%)', digits=dp.get_precision('Discount'), default=0.0)\n    product_uom_qty = fields.Float('Quantity', required=True, digits=dp.get_precision('Product UoS'), default=1)\n    product_uom_id = fields.Many2one('product.uom', 'Unit of Measure ', required=True)\n\n    @api.onchange('product_id')\n    def _onchange_product_id(self):\n        self.ensure_one()\n        if self.product_id:\n            name = self.product_id.name_get()[0][1]\n            if self.product_id.description_sale:\n                name += '\\n' + self.product_id.description_sale\n            self.name = name\n            self.price_unit = self.product_id.lst_price\n            self.product_uom_id = self.product_id.uom_id.id\n            self.website_description = self.product_id.quote_description or self.product_id.website_description or ''\n            domain = {'product_uom_id': [('category_id', '=', self.product_id.uom_id.category_id.id)]}\n            return {'domain': domain}\n\n    @api.onchange('product_uom_id')\n    def _onchange_product_uom(self):\n        if self.product_id and self.product_uom_id:\n            self.price_unit = self.product_id.uom_id._compute_price(self.product_id.lst_price, self.product_uom_id)\n\n    @api.model\n    def create(self, values):\n        values = self._inject_quote_description(values)\n        return super(SaleQuoteLine, self).create(values)\n\n    @api.multi\n    def write(self, values):\n        values = self._inject_quote_description(values)\n        return super(SaleQuoteLine, self).write(values)\n\n    def _inject_quote_description(self, values):\n        values = dict(values or {})\n        if not values.get('website_description') and values.get('product_id'):\n            product = self.env['product.product'].browse(values['product_id'])\n            values['website_description'] = product.quote_description or product.website_description or ''\n        return values\n\n\nclass SaleQuoteOption(models.Model):\n    _name = \"sale.quote.option\"\n    _description = \"Quotation Option\"\n\n    template_id = fields.Many2one('sale.quote.template', 'Quotation Template Reference', ondelete='cascade',\n        index=True, required=True)\n    name = fields.Text('Description', required=True, translate=True)\n    product_id = fields.Many2one('product.product', 'Product', domain=[('sale_ok', '=', True)], required=True)\n    layout_category_id = fields.Many2one('sale.layout_category', string='Section')\n    website_description = fields.Html('Option Description', translate=html_translate, sanitize_attributes=False)\n    price_unit = fields.Float('Unit Price', required=True, digits=dp.get_precision('Product Price'))\n    discount = fields.Float('Discount (%)', digits=dp.get_precision('Discount'))\n    uom_id = fields.Many2one('product.uom', 'Unit of Measure ', required=True)\n    quantity = fields.Float('Quantity', required=True, digits=dp.get_precision('Product UoS'), default=1)\n\n    @api.onchange('product_id')\n    def _onchange_product_id(self):\n        if not self.product_id:\n            return\n        product = self.product_id\n        self.price_unit = product.list_price\n        self.website_description = product.product_tmpl_id.quote_description\n        self.name = product.name\n        self.uom_id = product.uom_id\n        domain = {'uom_id': [('category_id', '=', self.product_id.uom_id.category_id.id)]}\n        return {'domain': domain}\n\n    @api.onchange('uom_id')\n    def _onchange_product_uom(self):\n        if not self.product_id:\n            return\n        if not self.uom_id:\n            self.price_unit = 0.0\n            return\n        if self.uom_id.id != self.product_id.uom_id.id:\n            self.price_unit = self.product_id.uom_id._compute_price(self.price_unit, self.uom_id)\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models\nfrom odoo.tools.translate import html_translate\nfrom odoo.addons import decimal_precision as dp\n\n\nclass SaleQuoteTemplate(models.Model):\n    _name = \"sale.quote.template\"\n    _description = \"Sale Quotation Template\"\n\n    name = fields.Char('Quotation Template', required=True)\n    website_description = fields.Html('Description', translate=html_translate, sanitize_attributes=False)\n    quote_line = fields.One2many('sale.quote.line', 'quote_id', 'Quotation Template Lines', copy=True)\n    note = fields.Text('Terms and conditions')\n    options = fields.One2many('sale.quote.option', 'template_id', 'Optional Products Lines', copy=True)\n    number_of_days = fields.Integer('Quotation Duration',\n        help='Number of days for the validity date computation of the quotation')\n    require_payment = fields.Selection([\n        (0, 'Online Signature'),\n        (1, 'Online Payment')], default=0, string='Confirmation Mode',\n        help=\"Choose how you want to confirm an order to launch the delivery process. You can either \"\n             \"request a digital signature or an upfront payment. With a digital signature, you can \"\n             \"request the payment when issuing the invoice.\")\n    mail_template_id = fields.Many2one(\n        'mail.template', 'Confirmation Mail',\n        domain=[('model', '=', 'sale.order')],\n        help=\"This e-mail template will be sent on confirmation. Leave empty to send nothing.\")\n    active = fields.Boolean(default=True, help=\"If unchecked, it will allow you to hide the quotation template without removing it.\")\n    \n    @api.multi\n    def open_template(self):\n        self.ensure_one()\n        return {\n            'type': 'ir.actions.act_url',\n            'target': 'self',\n            'url': '/quote/template/%d' % self.id\n        }\n\n\nclass SaleQuoteLine(models.Model):\n    _name = \"sale.quote.line\"\n    _description = \"Quotation Template Lines\"\n    _order = 'sequence, id'\n\n    sequence = fields.Integer('Sequence', help=\"Gives the sequence order when displaying a list of sale quote lines.\",\n        default=10)\n    quote_id = fields.Many2one('sale.quote.template', 'Quotation Template Reference', required=True,\n        ondelete='cascade', index=True)\n    name = fields.Text('Description', required=True, translate=True)\n    product_id = fields.Many2one('product.product', 'Product', domain=[('sale_ok', '=', True)], required=True)\n    layout_category_id = fields.Many2one('sale.layout_category', string='Section')\n    website_description = fields.Html('Line Description', related='product_id.product_tmpl_id.quote_description',\n        translate=html_translate)\n    price_unit = fields.Float('Unit Price', required=True, digits=dp.get_precision('Product Price'))\n    discount = fields.Float('Discount (%)', digits=dp.get_precision('Discount'), default=0.0)\n    product_uom_qty = fields.Float('Quantity', required=True, digits=dp.get_precision('Product UoS'), default=1)\n    product_uom_id = fields.Many2one('product.uom', 'Unit of Measure ', required=True)\n\n    @api.onchange('product_id')\n    def _onchange_product_id(self):\n        self.ensure_one()\n        if self.product_id:\n            name = self.product_id.name_get()[0][1]\n            if self.product_id.description_sale:\n                name += '\\n' + self.product_id.description_sale\n            self.name = name\n            self.price_unit = self.product_id.lst_price\n            self.product_uom_id = self.product_id.uom_id.id\n            self.website_description = self.product_id.quote_description or self.product_id.website_description or ''\n            domain = {'product_uom_id': [('category_id', '=', self.product_id.uom_id.category_id.id)]}\n            return {'domain': domain}\n\n    @api.onchange('product_uom_id')\n    def _onchange_product_uom(self):\n        if self.product_id and self.product_uom_id:\n            self.price_unit = self.product_id.uom_id._compute_price(self.product_id.lst_price, self.product_uom_id)\n\n    @api.model\n    def create(self, values):\n        values = self._inject_quote_description(values)\n        return super(SaleQuoteLine, self).create(values)\n\n    @api.multi\n    def write(self, values):\n        values = self._inject_quote_description(values)\n        return super(SaleQuoteLine, self).write(values)\n\n    def _inject_quote_description(self, values):\n        values = dict(values or {})\n        if not values.get('website_description') and values.get('product_id'):\n            product = self.env['product.product'].browse(values['product_id'])\n            values['website_description'] = product.quote_description or product.website_description or ''\n        return values\n\n\nclass SaleQuoteOption(models.Model):\n    _name = \"sale.quote.option\"\n    _description = \"Quotation Option\"\n\n    template_id = fields.Many2one('sale.quote.template', 'Quotation Template Reference', ondelete='cascade',\n        index=True, required=True)\n    name = fields.Text('Description', required=True, translate=True)\n    product_id = fields.Many2one('product.product', 'Product', domain=[('sale_ok', '=', True)], required=True)\n    layout_category_id = fields.Many2one('sale.layout_category', string='Section')\n    website_description = fields.Html('Option Description', translate=html_translate, sanitize_attributes=False)\n    price_unit = fields.Float('Unit Price', required=True, digits=dp.get_precision('Product Price'))\n    discount = fields.Float('Discount (%)', digits=dp.get_precision('Discount'))\n    uom_id = fields.Many2one('product.uom', 'Unit of Measure ', required=True)\n    quantity = fields.Float('Quantity', required=True, digits=dp.get_precision('Product UoS'), default=1)\n\n    @api.onchange('product_id')\n    def _onchange_product_id(self):\n        if not self.product_id:\n            return\n        product = self.product_id\n        self.price_unit = product.list_price\n        self.website_description = product.product_tmpl_id.quote_description\n        self.name = product.name\n        self.uom_id = product.uom_id\n        domain = {'uom_id': [('category_id', '=', self.product_id.uom_id.category_id.id)]}\n        return {'domain': domain}\n\n    @api.onchange('uom_id')\n    def _onchange_product_uom(self):\n        if not self.product_id:\n            return\n        if not self.uom_id:\n            self.price_unit = 0.0\n            return\n        if self.uom_id.id != self.product_id.uom_id.id:\n            self.price_unit = self.product_id.uom_id._compute_price(self.price_unit, self.uom_id)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "sale_quote.py", "id": "429b608a6a8cec1e7eaab4c33b3a1926", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_quote/models/sale_quote.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}