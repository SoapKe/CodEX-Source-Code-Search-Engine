{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo.tests import common\n\n\nclass test_challenge(common.TransactionCase):\n\n    def test_00_join_challenge(self):\n        employees_group = self.env.ref('base.group_user')\n        user_ids = employees_group.users\n        challenge = self.env.ref('gamification.challenge_base_discover')\n\n        self.assertGreaterEqual(len(challenge.user_ids), len(user_ids), \"Not enough users in base challenge\")\n\n        self.env['res.users'].with_context(no_reset_password=True).create({\n            'name': 'R2D2',\n            'login': 'r2d2@openerp.com',\n            'email': 'r2d2@openerp.com',\n            'groups_id': [(6, 0, [employees_group.id])]\n        })\n\n        challenge._update_all()\n        self.assertGreaterEqual(len(challenge.user_ids), len(user_ids)+1, \"These are not droids you are looking for\")\n\n    def test_10_reach_challenge(self):\n        Goals = self.env['gamification.goal']\n        challenge = self.env.ref('gamification.challenge_base_discover')\n\n        challenge.state = 'inprogress'\n        self.assertEqual(challenge.state, 'inprogress', \"Challenge failed the change of state\")\n\n        goal_ids = Goals.search([('challenge_id', '=', challenge.id), ('state', '!=', 'draft')])\n        self.assertEqual(len(goal_ids), len(challenge.line_ids) * len(challenge.user_ids.ids), \"Incorrect number of goals generated, should be 1 goal per user, per challenge line\")\n\n        demo = self.env.ref('base.user_demo')\n        \n        demo.tz = \"Europe/Brussels\"\n        goal_ids = Goals.search([('user_id', '=', demo.id), ('definition_id', '=', self.env.ref('gamification.definition_base_timezone').id)])\n\n        goal_ids.update_goal()\n\n        missed = goal_ids.filtered(lambda g: g.state != 'reached')\n        self.assertFalse(missed, \"Not every goal was reached after changing timezone\")\n\n        \n        badge_id = self.env.ref('gamification.badge_good_job').id\n        challenge.write({'reward_first_id': badge_id, 'reward_second_id': badge_id})\n        challenge.state = 'done'\n\n        badge_ids = self.env['gamification.badge.user'].search([('badge_id', '=', badge_id), ('user_id', '=', demo.id)])\n        self.assertEqual(len(badge_ids), 1, \"Demo user has not received the badge\")\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     demo user set timezone    reward two firsts admin may timezone ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.tests import common\n\n\nclass test_challenge(common.TransactionCase):\n\n    def test_00_join_challenge(self):\n        employees_group = self.env.ref('base.group_user')\n        user_ids = employees_group.users\n        challenge = self.env.ref('gamification.challenge_base_discover')\n\n        self.assertGreaterEqual(len(challenge.user_ids), len(user_ids), \"Not enough users in base challenge\")\n\n        self.env['res.users'].with_context(no_reset_password=True).create({\n            'name': 'R2D2',\n            'login': 'r2d2@openerp.com',\n            'email': 'r2d2@openerp.com',\n            'groups_id': [(6, 0, [employees_group.id])]\n        })\n\n        challenge._update_all()\n        self.assertGreaterEqual(len(challenge.user_ids), len(user_ids)+1, \"These are not droids you are looking for\")\n\n    def test_10_reach_challenge(self):\n        Goals = self.env['gamification.goal']\n        challenge = self.env.ref('gamification.challenge_base_discover')\n\n        challenge.state = 'inprogress'\n        self.assertEqual(challenge.state, 'inprogress', \"Challenge failed the change of state\")\n\n        goal_ids = Goals.search([('challenge_id', '=', challenge.id), ('state', '!=', 'draft')])\n        self.assertEqual(len(goal_ids), len(challenge.line_ids) * len(challenge.user_ids.ids), \"Incorrect number of goals generated, should be 1 goal per user, per challenge line\")\n\n        demo = self.env.ref('base.user_demo')\n        # demo user will set a timezone\n        demo.tz = \"Europe/Brussels\"\n        goal_ids = Goals.search([('user_id', '=', demo.id), ('definition_id', '=', self.env.ref('gamification.definition_base_timezone').id)])\n\n        goal_ids.update_goal()\n\n        missed = goal_ids.filtered(lambda g: g.state != 'reached')\n        self.assertFalse(missed, \"Not every goal was reached after changing timezone\")\n\n        # reward for two firsts as admin may have timezone\n        badge_id = self.env.ref('gamification.badge_good_job').id\n        challenge.write({'reward_first_id': badge_id, 'reward_second_id': badge_id})\n        challenge.state = 'done'\n\n        badge_ids = self.env['gamification.badge.user'].search([('badge_id', '=', badge_id), ('user_id', '=', demo.id)])\n        self.assertEqual(len(badge_ids), 1, \"Demo user has not received the badge\")\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_challenge.py", "id": "bade34ed4f68eee7dae01e4e37ead788", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/gamification/tests/test_challenge.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}