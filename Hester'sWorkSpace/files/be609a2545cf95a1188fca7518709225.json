{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport os\n\nfrom odoo.tools import config, test_reports\nfrom odoo.addons.hr_payroll.tests.common import TestPayslipBase\n\n\nclass TestPayslipFlow(TestPayslipBase):\n\n    def test_00_payslip_flow(self):\n        \n        \n        richard_payslip = self.env['hr.payslip'].create({\n            'name': 'Payslip of Richard',\n            'employee_id': self.richard_emp.id\n        })\n\n        payslip_input = self.env['hr.payslip.input'].search([('payslip_id', '=', richard_payslip.id)])\n        \n        payslip_input.write({'amount': 5.0})\n\n        \n        self.assertEqual(richard_payslip.state, 'draft', 'State not changed!')\n\n        context = {\n            \"lang\": \"en_US\", \"tz\": False, \"active_model\": \"ir.ui.menu\",\n            \"department_id\": False, \"section_id\": False,\n            \"active_ids\": [self.ref(\"hr_payroll.menu_department_tree\")],\n            \"active_id\": self.ref(\"hr_payroll.menu_department_tree\")\n        }\n        \n        richard_payslip.with_context(context).compute_sheet()\n\n        \n        richard_payslip.action_payslip_done()\n\n        \n        self.assertEqual(richard_payslip.state, 'done', 'State not changed!')\n\n        \n        richard_payslip.refund_sheet()\n\n        \n        payslip_refund = self.env['hr.payslip'].search([('name', 'like', 'Refund: '+ richard_payslip.name), ('credit_note', '=', True)])\n        self.assertTrue(bool(payslip_refund), \"Payslip not refunded!\")\n\n        \n        payslip_run = self.env['hr.payslip.run'].create({\n            'date_end': '2011-09-30',\n            'date_start': '2011-09-01',\n            'name': 'Payslip for Employee'\n        })\n\n        \n\n        payslip_employee = self.env['hr.payslip.employees'].create({\n            'employee_ids': [(4, self.richard_emp.id)]\n        })\n\n        \n        payslip_employee.with_context(active_id=payslip_run.id).compute_sheet()\n\n        \n        self.env['payslip.lines.contribution.register'].create({\n            'date_from': '2011-09-30',\n            'date_to': '2011-09-01'\n        })\n\n        \n        data, data_format = self.env.ref('hr_payroll.action_report_payslip').render(richard_payslip.ids)\n        if config.get('test_report_directory'):\n            open(os.path.join(config['test_report_directory'], 'hr_payroll-payslip.'+ data_format), 'wb+').write(data)\n\n        \n        data, data_format = self.env.ref('hr_payroll.payslip_details_report').render(richard_payslip.ids)\n        if config.get('test_report_directory'):\n            open(os.path.join(config['test_report_directory'], 'hr_payroll-payslipdetails.'+ data_format), 'wb+').write(data)\n\n        \n        context = {'model': 'hr.contribution.register', 'active_ids': [self.ref('hr_payroll.hr_houserent_register')]}\n        test_reports.try_report_action(self.env.cr, self.env.uid, 'action_payslip_lines_contribution_register', context=context, our_module='hr_payroll')\n", "comments": "    testing payslip flow report printing            coding  utf 8        part odoo  see license file full copyright licensing details     i create employee payslip    i assign amount input data    i verify payslip draft state    i click  compute sheet  button payslip    then i click  confirm  button payslip    i verify payslip done state    i want check refund payslip i click refund button     i check new payslip credit note checked     i want generate payslip payslip run     i create record generating payslip payslip run     i generate payslip clicking generat button wizard     i open contribution register i print payslip lines report     i print payslip report    i print payslip details report    i print contribution register report ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport os\n\nfrom odoo.tools import config, test_reports\nfrom odoo.addons.hr_payroll.tests.common import TestPayslipBase\n\n\nclass TestPayslipFlow(TestPayslipBase):\n\n    def test_00_payslip_flow(self):\n        \"\"\" Testing payslip flow and report printing \"\"\"\n        # I create an employee Payslip\n        richard_payslip = self.env['hr.payslip'].create({\n            'name': 'Payslip of Richard',\n            'employee_id': self.richard_emp.id\n        })\n\n        payslip_input = self.env['hr.payslip.input'].search([('payslip_id', '=', richard_payslip.id)])\n        # I assign the amount to Input data\n        payslip_input.write({'amount': 5.0})\n\n        # I verify the payslip is in draft state\n        self.assertEqual(richard_payslip.state, 'draft', 'State not changed!')\n\n        context = {\n            \"lang\": \"en_US\", \"tz\": False, \"active_model\": \"ir.ui.menu\",\n            \"department_id\": False, \"section_id\": False,\n            \"active_ids\": [self.ref(\"hr_payroll.menu_department_tree\")],\n            \"active_id\": self.ref(\"hr_payroll.menu_department_tree\")\n        }\n        # I click on 'Compute Sheet' button on payslip\n        richard_payslip.with_context(context).compute_sheet()\n\n        # Then I click on the 'Confirm' button on payslip\n        richard_payslip.action_payslip_done()\n\n        # I verify that the payslip is in done state\n        self.assertEqual(richard_payslip.state, 'done', 'State not changed!')\n\n        # I want to check refund payslip so I click on refund button.\n        richard_payslip.refund_sheet()\n\n        # I check on new payslip Credit Note is checked or not.\n        payslip_refund = self.env['hr.payslip'].search([('name', 'like', 'Refund: '+ richard_payslip.name), ('credit_note', '=', True)])\n        self.assertTrue(bool(payslip_refund), \"Payslip not refunded!\")\n\n        # I want to generate a payslip from Payslip run.\n        payslip_run = self.env['hr.payslip.run'].create({\n            'date_end': '2011-09-30',\n            'date_start': '2011-09-01',\n            'name': 'Payslip for Employee'\n        })\n\n        # I create record for generating the payslip for this Payslip run.\n\n        payslip_employee = self.env['hr.payslip.employees'].create({\n            'employee_ids': [(4, self.richard_emp.id)]\n        })\n\n        # I generate the payslip by clicking on Generat button wizard.\n        payslip_employee.with_context(active_id=payslip_run.id).compute_sheet()\n\n        # I open Contribution Register and from there I print the Payslip Lines report.\n        self.env['payslip.lines.contribution.register'].create({\n            'date_from': '2011-09-30',\n            'date_to': '2011-09-01'\n        })\n\n        # I print the payslip report\n        data, data_format = self.env.ref('hr_payroll.action_report_payslip').render(richard_payslip.ids)\n        if config.get('test_report_directory'):\n            open(os.path.join(config['test_report_directory'], 'hr_payroll-payslip.'+ data_format), 'wb+').write(data)\n\n        # I print the payslip details report\n        data, data_format = self.env.ref('hr_payroll.payslip_details_report').render(richard_payslip.ids)\n        if config.get('test_report_directory'):\n            open(os.path.join(config['test_report_directory'], 'hr_payroll-payslipdetails.'+ data_format), 'wb+').write(data)\n\n        # I print the contribution register report\n        context = {'model': 'hr.contribution.register', 'active_ids': [self.ref('hr_payroll.hr_houserent_register')]}\n        test_reports.try_report_action(self.env.cr, self.env.uid, 'action_payslip_lines_contribution_register', context=context, our_module='hr_payroll')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_payslip_flow.py", "id": "be609a2545cf95a1188fca7518709225", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_payroll/tests/test_payslip_flow.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}