{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport logging\nimport time\nfrom os import listdir\nfrom os.path import join\ntry:\n    from queue import Queue, Empty\nexcept ImportError:\n    from Queue import Queue, Empty \nfrom select import select\nfrom threading import Thread, Lock\n\nfrom odoo import http\n\nfrom odoo.addons.hw_proxy.controllers import main as hw_proxy\n\n_logger = logging.getLogger(__name__)\n\ntry:\n    import evdev\nexcept ImportError:\n    _logger.error('Odoo module hw_scanner depends on the evdev python module')\n    evdev = None\n\nclass ScannerDevice():\n    def __init__(self, path):\n        self.evdev = evdev.InputDevice(path)\n        self.evdev.grab()\n\n        self.barcode = []\n        self.shift = False\n\nclass Scanner(Thread):\n    def __init__(self):\n        Thread.__init__(self)\n        self.lock = Lock()\n        self.status = {'status':'connecting', 'messages':[]}\n        self.input_dir = '/dev/input/by-id/'\n        self.open_devices = []\n        self.barcodes = Queue()\n        self.keymap = {\n            2: (\"1\",\"!\"),\n            3: (\"2\",\"@\"),\n            4: (\"3\",\"#\"),\n            5: (\"4\",\"$\"),\n            6: (\"5\",\"%\"),\n            7: (\"6\",\"^\"),\n            8: (\"7\",\"&\"),\n            9: (\"8\",\"*\"),\n            10:(\"9\",\"(\"), \n            11:(\"0\",\")\"), \n            12:(\"-\",\"_\"), \n            13:(\"=\",\"+\"), \n            \n            \n            16:(\"q\",\"Q\"), \n            17:(\"w\",\"W\"),\n            18:(\"e\",\"E\"),\n            19:(\"r\",\"R\"),\n            20:(\"t\",\"T\"),\n            21:(\"y\",\"Y\"),\n            22:(\"u\",\"U\"),\n            23:(\"i\",\"I\"),\n            24:(\"o\",\"O\"),\n            25:(\"p\",\"P\"),\n            26:(\"[\",\"{\"),\n            27:(\"]\",\"}\"),\n            \n            \n            30:(\"a\",\"A\"),\n            31:(\"s\",\"S\"),\n            32:(\"d\",\"D\"),\n            33:(\"f\",\"F\"),\n            34:(\"g\",\"G\"),\n            35:(\"h\",\"H\"),\n            36:(\"j\",\"J\"),\n            37:(\"k\",\"K\"),\n            38:(\"l\",\"L\"),\n            39:(\";\",\":\"),\n            40:(\"'\",\"\\\"\"),\n            41:(\"`\",\"~\"),\n            \n            43:(\"\\\\\",\"|\"),\n            44:(\"z\",\"Z\"),\n            45:(\"x\",\"X\"),\n            46:(\"c\",\"C\"),\n            47:(\"v\",\"V\"),\n            48:(\"b\",\"B\"),\n            49:(\"n\",\"N\"),\n            50:(\"m\",\"M\"),\n            51:(\",\",\"<\"),\n            52:(\".\",\">\"),\n            53:(\"/\",\"?\"),\n            \n            57:(\" \",\" \"),\n        }\n\n    def lockedstart(self):\n        with self.lock:\n            if not self.isAlive():\n                self.daemon = True\n                self.start()\n\n    def set_status(self, status, message = None):\n        if status == self.status['status']:\n            if message != None and message != self.status['messages'][-1]:\n                self.status['messages'].append(message)\n        else:\n            self.status['status'] = status\n            if message:\n                self.status['messages'] = [message]\n            else:\n                self.status['messages'] = []\n\n        if status == 'error' and message:\n            _logger.error('Barcode Scanner Error: '+message)\n        elif status == 'disconnected' and message:\n            _logger.info('Disconnected Barcode Scanner: %s', message)\n\n    def get_devices(self):\n        try:\n            if not evdev:\n                return []\n\n            if not os.path.isdir(self.input_dir):\n                return []\n\n            new_devices = [device for device in listdir(self.input_dir)\n                           if join(self.input_dir, device) not in [dev.evdev.fn for dev in self.open_devices]]\n            scanners = [device for device in new_devices\n                        if (('kbd' in device) and ('keyboard' not in device.lower()))\n                        or ('barcode' in device.lower()) or ('scanner' in device.lower())]\n\n            for device in scanners:\n                _logger.debug('opening device %s', join(self.input_dir,device))\n                self.open_devices.append(ScannerDevice(join(self.input_dir,device)))\n\n            if self.open_devices:\n                self.set_status('connected','Connected to '+ str([dev.evdev.name for dev in self.open_devices]))\n            else:\n                self.set_status('disconnected','Barcode Scanner Not Found')\n\n            return self.open_devices\n        except Exception as e:\n            self.set_status('error',str(e))\n            return []\n\n    def release_device(self, dev):\n        self.open_devices.remove(dev)\n\n    def get_barcode(self):\n        \"\"\" Returns a scanned barcode. Will wait at most 5 seconds to get a barcode, and will\n            return barcode scanned in the past if they are not older than 5 seconds and have not\n            been returned before. This is necessary to catch barcodes scanned while the POS is\n            busy reading another barcode\n        \"\"\"\n\n        self.lockedstart()\n\n        while True:\n            try:\n                timestamp, barcode = self.barcodes.get(True, 5)\n                if timestamp > time.time() - 5: \n                    return barcode\n            except Empty:\n                return ''\n    \n    def get_status(self):\n        self.lockedstart()\n        return self.status\n\n    def _get_open_device_by_fd(self, fd):\n        for dev in self.open_devices:\n            if dev.evdev.fd == fd:\n                return dev\n\n    def run(self):\n        \"\"\" This will start a loop that catches all keyboard events, parse barcode\n            sequences and put them on a timestamped queue that can be consumed by\n            the point of sale's requests for barcode events \n        \"\"\"\n        \n        self.barcodes = Queue()\n        \n        barcode  = []\n        shift    = False\n        devices  = None\n\n        while True: \n            devices = self.get_devices()\n\n            try:\n                while True: \n                    r,w,x = select({dev.fd: dev for dev in [d.evdev for d in devices]},[],[],5)\n                    if len(r) == 0: \n                        break\n\n                    for fd in r:\n                        device = self._get_open_device_by_fd(fd)\n\n                        if not evdev.util.is_device(device.evdev.fn):\n                            _logger.info('%s disconnected', str(device.evdev))\n                            self.release_device(device)\n                            break\n\n                        events = device.evdev.read()\n\n                        for event in events:\n                            if event.type == evdev.ecodes.EV_KEY:\n                                # _logger.debug('Evdev Keyboard event %s',evdev.categorize(event))\n                                if event.value == 1: \n                                    if event.code in self.keymap:\n                                        if device.shift:\n                                            device.barcode.append(self.keymap[event.code][1])\n                                        else:\n                                            device.barcode.append(self.keymap[event.code][0])\n                                    elif event.code == 42 or event.code == 54: \n                                        device.shift = True\n                                    elif event.code == 28: \n                                        _logger.debug('pushing barcode %s from %s', ''.join(device.barcode), str(device.evdev))\n                                        self.barcodes.put( (time.time(),''.join(device.barcode)) )\n                                        device.barcode = []\n                                elif event.value == 0: \n                                    if event.code == 42 or event.code == 54: \n                                        device.shift = False\n\n            except Exception as e:\n                self.set_status('error',str(e))\n\nscanner_thread = None\nif evdev:\n    scanner_thread = Scanner()\n    hw_proxy.drivers['scanner'] = scanner_thread\n\nclass ScannerDriver(hw_proxy.Proxy):\n    @http.route('/hw_proxy/scanner', type='json', auth='none', cors='*')\n    def scanner(self):\n        return scanner_thread.get_barcode() if scanner_thread else None\n", "comments": "    returns scanned barcode  will wait 5 seconds get barcode              return barcode scanned past older 5 seconds             returned  this necessary catch barcodes scanned pos             busy reading another barcode                      self lockedstart()          true              try                  timestamp  barcode   self barcodes get(true  5)                 timestamp   time time()   5                       return barcode             except empty                  return             def get status(self)          self lockedstart()         return self status      def  get open device fd(self  fd)          dev self open devices              dev evdev fd    fd                  return dev      def run(self)              this start loop catches keyboard events  parse barcode             sequences put timestamped queue consumed             point sale requests barcode events                     coding  utf 8        part odoo  see license file full copyright licensing details     pylint  disable deprecated module    14 backspace    15 tab     28 enter    29 left ctrl    42 left shift    54 right shift    barcodes loop    keycode loop    timeout     logger debug( evdev keyboard event   evdev categorize(event))    keydown events    shift    enter  end barcode   keyup events    left shift ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport logging\nimport time\nfrom os import listdir\nfrom os.path import join\ntry:\n    from queue import Queue, Empty\nexcept ImportError:\n    from Queue import Queue, Empty # pylint: disable=deprecated-module\nfrom select import select\nfrom threading import Thread, Lock\n\nfrom odoo import http\n\nfrom odoo.addons.hw_proxy.controllers import main as hw_proxy\n\n_logger = logging.getLogger(__name__)\n\ntry:\n    import evdev\nexcept ImportError:\n    _logger.error('Odoo module hw_scanner depends on the evdev python module')\n    evdev = None\n\nclass ScannerDevice():\n    def __init__(self, path):\n        self.evdev = evdev.InputDevice(path)\n        self.evdev.grab()\n\n        self.barcode = []\n        self.shift = False\n\nclass Scanner(Thread):\n    def __init__(self):\n        Thread.__init__(self)\n        self.lock = Lock()\n        self.status = {'status':'connecting', 'messages':[]}\n        self.input_dir = '/dev/input/by-id/'\n        self.open_devices = []\n        self.barcodes = Queue()\n        self.keymap = {\n            2: (\"1\",\"!\"),\n            3: (\"2\",\"@\"),\n            4: (\"3\",\"#\"),\n            5: (\"4\",\"$\"),\n            6: (\"5\",\"%\"),\n            7: (\"6\",\"^\"),\n            8: (\"7\",\"&\"),\n            9: (\"8\",\"*\"),\n            10:(\"9\",\"(\"), \n            11:(\"0\",\")\"), \n            12:(\"-\",\"_\"), \n            13:(\"=\",\"+\"), \n            # 14 BACKSPACE\n            # 15 TAB \n            16:(\"q\",\"Q\"), \n            17:(\"w\",\"W\"),\n            18:(\"e\",\"E\"),\n            19:(\"r\",\"R\"),\n            20:(\"t\",\"T\"),\n            21:(\"y\",\"Y\"),\n            22:(\"u\",\"U\"),\n            23:(\"i\",\"I\"),\n            24:(\"o\",\"O\"),\n            25:(\"p\",\"P\"),\n            26:(\"[\",\"{\"),\n            27:(\"]\",\"}\"),\n            # 28 ENTER\n            # 29 LEFT_CTRL\n            30:(\"a\",\"A\"),\n            31:(\"s\",\"S\"),\n            32:(\"d\",\"D\"),\n            33:(\"f\",\"F\"),\n            34:(\"g\",\"G\"),\n            35:(\"h\",\"H\"),\n            36:(\"j\",\"J\"),\n            37:(\"k\",\"K\"),\n            38:(\"l\",\"L\"),\n            39:(\";\",\":\"),\n            40:(\"'\",\"\\\"\"),\n            41:(\"`\",\"~\"),\n            # 42 LEFT SHIFT\n            43:(\"\\\\\",\"|\"),\n            44:(\"z\",\"Z\"),\n            45:(\"x\",\"X\"),\n            46:(\"c\",\"C\"),\n            47:(\"v\",\"V\"),\n            48:(\"b\",\"B\"),\n            49:(\"n\",\"N\"),\n            50:(\"m\",\"M\"),\n            51:(\",\",\"<\"),\n            52:(\".\",\">\"),\n            53:(\"/\",\"?\"),\n            # 54 RIGHT SHIFT\n            57:(\" \",\" \"),\n        }\n\n    def lockedstart(self):\n        with self.lock:\n            if not self.isAlive():\n                self.daemon = True\n                self.start()\n\n    def set_status(self, status, message = None):\n        if status == self.status['status']:\n            if message != None and message != self.status['messages'][-1]:\n                self.status['messages'].append(message)\n        else:\n            self.status['status'] = status\n            if message:\n                self.status['messages'] = [message]\n            else:\n                self.status['messages'] = []\n\n        if status == 'error' and message:\n            _logger.error('Barcode Scanner Error: '+message)\n        elif status == 'disconnected' and message:\n            _logger.info('Disconnected Barcode Scanner: %s', message)\n\n    def get_devices(self):\n        try:\n            if not evdev:\n                return []\n\n            if not os.path.isdir(self.input_dir):\n                return []\n\n            new_devices = [device for device in listdir(self.input_dir)\n                           if join(self.input_dir, device) not in [dev.evdev.fn for dev in self.open_devices]]\n            scanners = [device for device in new_devices\n                        if (('kbd' in device) and ('keyboard' not in device.lower()))\n                        or ('barcode' in device.lower()) or ('scanner' in device.lower())]\n\n            for device in scanners:\n                _logger.debug('opening device %s', join(self.input_dir,device))\n                self.open_devices.append(ScannerDevice(join(self.input_dir,device)))\n\n            if self.open_devices:\n                self.set_status('connected','Connected to '+ str([dev.evdev.name for dev in self.open_devices]))\n            else:\n                self.set_status('disconnected','Barcode Scanner Not Found')\n\n            return self.open_devices\n        except Exception as e:\n            self.set_status('error',str(e))\n            return []\n\n    def release_device(self, dev):\n        self.open_devices.remove(dev)\n\n    def get_barcode(self):\n        \"\"\" Returns a scanned barcode. Will wait at most 5 seconds to get a barcode, and will\n            return barcode scanned in the past if they are not older than 5 seconds and have not\n            been returned before. This is necessary to catch barcodes scanned while the POS is\n            busy reading another barcode\n        \"\"\"\n\n        self.lockedstart()\n\n        while True:\n            try:\n                timestamp, barcode = self.barcodes.get(True, 5)\n                if timestamp > time.time() - 5: \n                    return barcode\n            except Empty:\n                return ''\n    \n    def get_status(self):\n        self.lockedstart()\n        return self.status\n\n    def _get_open_device_by_fd(self, fd):\n        for dev in self.open_devices:\n            if dev.evdev.fd == fd:\n                return dev\n\n    def run(self):\n        \"\"\" This will start a loop that catches all keyboard events, parse barcode\n            sequences and put them on a timestamped queue that can be consumed by\n            the point of sale's requests for barcode events \n        \"\"\"\n        \n        self.barcodes = Queue()\n        \n        barcode  = []\n        shift    = False\n        devices  = None\n\n        while True: # barcodes loop\n            devices = self.get_devices()\n\n            try:\n                while True: # keycode loop\n                    r,w,x = select({dev.fd: dev for dev in [d.evdev for d in devices]},[],[],5)\n                    if len(r) == 0: # timeout\n                        break\n\n                    for fd in r:\n                        device = self._get_open_device_by_fd(fd)\n\n                        if not evdev.util.is_device(device.evdev.fn):\n                            _logger.info('%s disconnected', str(device.evdev))\n                            self.release_device(device)\n                            break\n\n                        events = device.evdev.read()\n\n                        for event in events:\n                            if event.type == evdev.ecodes.EV_KEY:\n                                # _logger.debug('Evdev Keyboard event %s',evdev.categorize(event))\n                                if event.value == 1: # keydown events\n                                    if event.code in self.keymap:\n                                        if device.shift:\n                                            device.barcode.append(self.keymap[event.code][1])\n                                        else:\n                                            device.barcode.append(self.keymap[event.code][0])\n                                    elif event.code == 42 or event.code == 54: # SHIFT\n                                        device.shift = True\n                                    elif event.code == 28: # ENTER, end of barcode\n                                        _logger.debug('pushing barcode %s from %s', ''.join(device.barcode), str(device.evdev))\n                                        self.barcodes.put( (time.time(),''.join(device.barcode)) )\n                                        device.barcode = []\n                                elif event.value == 0: #keyup events\n                                    if event.code == 42 or event.code == 54: # LEFT SHIFT\n                                        device.shift = False\n\n            except Exception as e:\n                self.set_status('error',str(e))\n\nscanner_thread = None\nif evdev:\n    scanner_thread = Scanner()\n    hw_proxy.drivers['scanner'] = scanner_thread\n\nclass ScannerDriver(hw_proxy.Proxy):\n    @http.route('/hw_proxy/scanner', type='json', auth='none', cors='*')\n    def scanner(self):\n        return scanner_thread.get_barcode() if scanner_thread else None\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "d120a9bf0a9cc92d18a962d90a764c06", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hw_scanner/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}