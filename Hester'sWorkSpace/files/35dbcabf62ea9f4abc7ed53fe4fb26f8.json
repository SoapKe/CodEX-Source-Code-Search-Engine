{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport random\nimport re\nimport string\nimport time\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    get_element_by_class,\n    js_to_json,\n    str_or_none,\n    strip_jsonp,\n)\n\n\nclass YoukuIE(InfoExtractor):\n    IE_NAME = 'youku'\n    IE_DESC = '\u4f18\u9177'\n    _VALID_URL = r\n\n    _TESTS = [{\n        \n        'url': 'http://v.youku.com/v_show/id_XMTc1ODE5Njcy.html',\n        'info_dict': {\n            'id': 'XMTc1ODE5Njcy',\n            'title': '\u2605Smile\ufe57\u2661 Git Fresh -Booty Music\u821e\u8e48.',\n            'ext': 'mp4',\n            'duration': 74.73,\n            'thumbnail': r're:^https?://.*',\n            'uploader': '\u3002\u8eb2\u732b\u732b\u3001',\n            'uploader_id': '36017967',\n            'uploader_url': 'http://i.youku.com/u/UMTQ0MDcxODY4',\n            'tags': list,\n        }\n    }, {\n        'url': 'http://player.youku.com/player.php/sid/XNDgyMDQ2NTQw/v.swf',\n        'only_matching': True,\n    }, {\n        'url': 'http://v.youku.com/v_show/id_XODgxNjg1Mzk2_ev_1.html',\n        'info_dict': {\n            'id': 'XODgxNjg1Mzk2',\n            'ext': 'mp4',\n            'title': '\u6b66\u5a9a\u5a18\u4f20\u5947 85',\n            'duration': 1999.61,\n            'thumbnail': r're:^https?://.*',\n            'uploader': '\u75af\u72c2\u8c46\u82b1',\n            'uploader_id': '62583473',\n            'uploader_url': 'http://i.youku.com/u/UMjUwMzMzODky',\n            'tags': list,\n        },\n    }, {\n        'url': 'http://v.youku.com/v_show/id_XMTI1OTczNDM5Mg==.html',\n        'info_dict': {\n            'id': 'XMTI1OTczNDM5Mg',\n            'ext': 'mp4',\n            'title': '\u82b1\u5343\u9aa8 04',\n            'duration': 2363,\n            'thumbnail': r're:^https?://.*',\n            'uploader': '\u653e\u5267\u573a-\u82b1\u5343\u9aa8',\n            'uploader_id': '772849359',\n            'uploader_url': 'http://i.youku.com/u/UMzA5MTM5NzQzNg==',\n            'tags': list,\n        },\n    }, {\n        'url': 'http://v.youku.com/v_show/id_XNjA1NzA2Njgw.html',\n        'note': 'Video protected with password',\n        'info_dict': {\n            'id': 'XNjA1NzA2Njgw',\n            'ext': 'mp4',\n            'title': '\u90a2\u7fa9\u7530\u590d\u65e6\u8bb2\u5ea7\u4e4b\u60f3\u8c61\u4e2d\u7684\u80e1\u4eba\u2014\u4ece\u201c\u5de6\u887d\u5b54\u5b50\u201d\u8bf4\u8d77',\n            'duration': 7264.5,\n            'thumbnail': r're:^https?://.*',\n            'uploader': 'FoxJin1006',\n            'uploader_id': '322014285',\n            'uploader_url': 'http://i.youku.com/u/UMTI4ODA1NzE0MA==',\n            'tags': list,\n        },\n        'params': {\n            'videopassword': '100600',\n        },\n    }, {\n        \n        'url': 'http://v.youku.com/v_show/id_XOTUxMzg4NDMy.html',\n        'info_dict': {\n            'id': 'XOTUxMzg4NDMy',\n            'ext': 'mp4',\n            'title': '\u6211\u7684\u4e16\u754c\u2606\u660e\u6708\u5e84\u4e3b\u2606\u8f66\u9707\u730e\u6740\u2606\u6740\u4eba\u827a\u672fMinecraft',\n            'duration': 702.08,\n            'thumbnail': r're:^https?://.*',\n            'uploader': '\u660e\u6708\u5e84\u4e3bmoon',\n            'uploader_id': '38465621',\n            'uploader_url': 'http://i.youku.com/u/UMTUzODYyNDg0',\n            'tags': list,\n        },\n    }, {\n        'url': 'http://video.tudou.com/v/XMjIyNzAzMTQ4NA==.html?f=46177805',\n        'info_dict': {\n            'id': 'XMjIyNzAzMTQ4NA',\n            'ext': 'mp4',\n            'title': '\u5361\u9a6c\u4e54\u56fd\u8db3\u5f00\u5927\u811a\u957f\u4f20\u51b2\u540a\u96c6\u9526',\n            'duration': 289,\n            'thumbnail': r're:^https?://.*',\n            'uploader': '\u963f\u535c\u675c\u62c9\u4e4b\u661f',\n            'uploader_id': '2382249',\n            'uploader_url': 'http://i.youku.com/u/UOTUyODk5Ng==',\n            'tags': list,\n        },\n    }, {\n        'url': 'http://video.tudou.com/v/XMjE4ODI3OTg2MA==.html',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def get_ysuid():\n        return '%d%s' % (int(time.time()), ''.join([\n            random.choice(string.ascii_letters) for i in range(3)]))\n\n    def get_format_name(self, fm):\n        _dict = {\n            '3gp': 'h6',\n            '3gphd': 'h5',\n            'flv': 'h4',\n            'flvhd': 'h4',\n            'mp4': 'h3',\n            'mp4hd': 'h3',\n            'mp4hd2': 'h4',\n            'mp4hd3': 'h4',\n            'hd2': 'h2',\n            'hd3': 'h1',\n        }\n        return _dict.get(fm)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        self._set_cookie('youku.com', '__ysuid', self.get_ysuid())\n        self._set_cookie('youku.com', 'xreferrer', 'http://www.youku.com')\n\n        _, urlh = self._download_webpage_handle(\n            'https://log.mmstat.com/eg.js', video_id, 'Retrieving cna info')\n        \n        cna = urlh.headers['etag'][1:-1]\n\n        \n        basic_data_params = {\n            'vid': video_id,\n            'ccode': '0507',\n            'client_ip': '192.168.1.1',\n            'utid': cna,\n            'client_ts': time.time() / 1000,\n        }\n\n        video_password = self._downloader.params.get('videopassword')\n        if video_password:\n            basic_data_params['password'] = video_password\n\n        headers = {\n            'Referer': url,\n        }\n        headers.update(self.geo_verification_headers())\n        data = self._download_json(\n            'https://ups.youku.com/ups/get.json', video_id,\n            'Downloading JSON metadata',\n            query=basic_data_params, headers=headers)['data']\n\n        error = data.get('error')\n        if error:\n            error_note = error.get('note')\n            if error_note is not None and '\u56e0\u7248\u6743\u539f\u56e0\u65e0\u6cd5\u89c2\u770b\u6b64\u89c6\u9891' in error_note:\n                raise ExtractorError(\n                    'Youku said: Sorry, this video is available in China only', expected=True)\n            elif error_note and '\u8be5\u89c6\u9891\u88ab\u8bbe\u4e3a\u79c1\u5bc6' in error_note:\n                raise ExtractorError(\n                    'Youku said: Sorry, this video is private', expected=True)\n            else:\n                msg = 'Youku server reported error %i' % error.get('code')\n                if error_note is not None:\n                    msg += ': ' + error_note\n                raise ExtractorError(msg)\n\n        \n        video_data = data['video']\n        title = video_data['title']\n\n        formats = [{\n            'url': stream['m3u8_url'],\n            'format_id': self.get_format_name(stream.get('stream_type')),\n            'ext': 'mp4',\n            'protocol': 'm3u8_native',\n            'filesize': int(stream.get('size')),\n            'width': stream.get('width'),\n            'height': stream.get('height'),\n        } for stream in data['stream'] if stream.get('channel_type') != 'tail']\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'duration': video_data.get('seconds'),\n            'thumbnail': video_data.get('logo'),\n            'uploader': video_data.get('username'),\n            'uploader_id': str_or_none(video_data.get('userid')),\n            'uploader_url': data.get('uploader', {}).get('homepage'),\n            'tags': video_data.get('tags'),\n        }\n\n\nclass YoukuShowIE(InfoExtractor):\n    _VALID_URL = r'https?://list\\.youku\\.com/show/id_(?P<id>[0-9a-z]+)\\.html'\n    IE_NAME = 'youku:show'\n\n    _TESTS = [{\n        'url': 'http://list.youku.com/show/id_zc7c670be07ff11e48b3f.html',\n        'info_dict': {\n            'id': 'zc7c670be07ff11e48b3f',\n            'title': '\u82b1\u5343\u9aa8 DVD\u7248',\n            'description': 'md5:a1ae6f5618571bbeb5c9821f9c81b558',\n        },\n        'playlist_count': 50,\n    }, {\n        \n        'url': 'http://list.youku.com/show/id_zefbfbd70efbfbd780bef.html',\n        'info_dict': {\n            'id': 'zefbfbd70efbfbd780bef',\n            'title': '\u8d85\u7ea7\u98de\u4fa03',\n            'description': 'md5:275715156abebe5ccc2a1992e9d56b98',\n        },\n        'playlist_count': 24,\n    }, {\n        \n        'url': 'http://list.youku.com/show/id_za7c275ecd7b411e1a19e.html',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://list.youku.com/show/id_zefbfbd61237fefbfbdef.html',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://list.youku.com/show/id_z20eb4acaf5c211e3b2ad.html',\n        'only_matching': True,\n    }]\n\n    def _extract_entries(self, playlist_data_url, show_id, note, query):\n        query['callback'] = 'cb'\n        playlist_data = self._download_json(\n            playlist_data_url, show_id, query=query, note=note,\n            transform_source=lambda s: js_to_json(strip_jsonp(s))).get('html')\n        if playlist_data is None:\n            return [None, None]\n        drama_list = (get_element_by_class('p-drama-grid', playlist_data) or\n                      get_element_by_class('p-drama-half-row', playlist_data))\n        if drama_list is None:\n            raise ExtractorError('No episodes found')\n        video_urls = re.findall(r'<a[^>]+href=\"([^\"]+)\"', drama_list)\n        return playlist_data, [\n            self.url_result(self._proto_relative_url(video_url, 'http:'), YoukuIE.ie_key())\n            for video_url in video_urls]\n\n    def _real_extract(self, url):\n        show_id = self._match_id(url)\n        webpage = self._download_webpage(url, show_id)\n\n        entries = []\n        page_config = self._parse_json(self._search_regex(\n            r'var\\s+PageConfig\\s*=\\s*({.+});', webpage, 'page config'),\n            show_id, transform_source=js_to_json)\n        first_page, initial_entries = self._extract_entries(\n            'http://list.youku.com/show/module', show_id,\n            note='Downloading initial playlist data page',\n            query={\n                'id': page_config['showid'],\n                'tab': 'showInfo',\n            })\n        first_page_reload_id = self._html_search_regex(\n            r'<div[^>]+id=\"(reload_\\d+)', first_page, 'first page reload id')\n        \n        reload_ids = re.findall('<li[^>]+data-id=\"([^\"]+)\">', first_page)\n        entries.extend(initial_entries)\n        for idx, reload_id in enumerate(reload_ids):\n            if reload_id == first_page_reload_id:\n                continue\n            _, new_entries = self._extract_entries(\n                'http://list.youku.com/show/episode', show_id,\n                note='Downloading playlist data page %d' % (idx + 1),\n                query={\n                    'id': page_config['showid'],\n                    'stage': reload_id,\n                })\n            if new_entries is not None:\n                entries.extend(new_entries)\n        desc = self._html_search_meta('description', webpage, fatal=False)\n        playlist_title = desc.split(',')[0] if desc else None\n        detail_li = get_element_by_class('p-intro', webpage)\n        playlist_description = get_element_by_class(\n            'intro-more', detail_li) if detail_li else None\n\n        return self.playlist_result(\n            entries, show_id, playlist_title, playlist_description)\n", "comments": "(?x)\n        (?:\n            https?://(\n                (?:v|player)\\.youku\\.com/(?:v_show/id_|player\\.php/sid/)|\n                video\\.tudou\\.com/v/)|\n            youku:)\n        (?P<id>[A-Za-z0-9]+)(?:\\.html|/v\\.swf|)\n    \n \n# coding: utf-8\n# MD5 is unstable\n# /play/get.json contains streams with \"channel_type\":\"tail\"\n# The etag header is '\"foobar\"'; let's remove the double quotes\n# request basic data\n# get video title\n# Episode number not starting from 1\n# Ongoing playlist. The initial page is the last one\n#  No data-id value.\n#  Wrong number of reload_id.\n# The first reload_id has the same items as first_page\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport random\nimport re\nimport string\nimport time\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    get_element_by_class,\n    js_to_json,\n    str_or_none,\n    strip_jsonp,\n)\n\n\nclass YoukuIE(InfoExtractor):\n    IE_NAME = 'youku'\n    IE_DESC = '\u4f18\u9177'\n    _VALID_URL = r'''(?x)\n        (?:\n            https?://(\n                (?:v|player)\\.youku\\.com/(?:v_show/id_|player\\.php/sid/)|\n                video\\.tudou\\.com/v/)|\n            youku:)\n        (?P<id>[A-Za-z0-9]+)(?:\\.html|/v\\.swf|)\n    '''\n\n    _TESTS = [{\n        # MD5 is unstable\n        'url': 'http://v.youku.com/v_show/id_XMTc1ODE5Njcy.html',\n        'info_dict': {\n            'id': 'XMTc1ODE5Njcy',\n            'title': '\u2605Smile\ufe57\u2661 Git Fresh -Booty Music\u821e\u8e48.',\n            'ext': 'mp4',\n            'duration': 74.73,\n            'thumbnail': r're:^https?://.*',\n            'uploader': '\u3002\u8eb2\u732b\u732b\u3001',\n            'uploader_id': '36017967',\n            'uploader_url': 'http://i.youku.com/u/UMTQ0MDcxODY4',\n            'tags': list,\n        }\n    }, {\n        'url': 'http://player.youku.com/player.php/sid/XNDgyMDQ2NTQw/v.swf',\n        'only_matching': True,\n    }, {\n        'url': 'http://v.youku.com/v_show/id_XODgxNjg1Mzk2_ev_1.html',\n        'info_dict': {\n            'id': 'XODgxNjg1Mzk2',\n            'ext': 'mp4',\n            'title': '\u6b66\u5a9a\u5a18\u4f20\u5947 85',\n            'duration': 1999.61,\n            'thumbnail': r're:^https?://.*',\n            'uploader': '\u75af\u72c2\u8c46\u82b1',\n            'uploader_id': '62583473',\n            'uploader_url': 'http://i.youku.com/u/UMjUwMzMzODky',\n            'tags': list,\n        },\n    }, {\n        'url': 'http://v.youku.com/v_show/id_XMTI1OTczNDM5Mg==.html',\n        'info_dict': {\n            'id': 'XMTI1OTczNDM5Mg',\n            'ext': 'mp4',\n            'title': '\u82b1\u5343\u9aa8 04',\n            'duration': 2363,\n            'thumbnail': r're:^https?://.*',\n            'uploader': '\u653e\u5267\u573a-\u82b1\u5343\u9aa8',\n            'uploader_id': '772849359',\n            'uploader_url': 'http://i.youku.com/u/UMzA5MTM5NzQzNg==',\n            'tags': list,\n        },\n    }, {\n        'url': 'http://v.youku.com/v_show/id_XNjA1NzA2Njgw.html',\n        'note': 'Video protected with password',\n        'info_dict': {\n            'id': 'XNjA1NzA2Njgw',\n            'ext': 'mp4',\n            'title': '\u90a2\u7fa9\u7530\u590d\u65e6\u8bb2\u5ea7\u4e4b\u60f3\u8c61\u4e2d\u7684\u80e1\u4eba\u2014\u4ece\u201c\u5de6\u887d\u5b54\u5b50\u201d\u8bf4\u8d77',\n            'duration': 7264.5,\n            'thumbnail': r're:^https?://.*',\n            'uploader': 'FoxJin1006',\n            'uploader_id': '322014285',\n            'uploader_url': 'http://i.youku.com/u/UMTI4ODA1NzE0MA==',\n            'tags': list,\n        },\n        'params': {\n            'videopassword': '100600',\n        },\n    }, {\n        # /play/get.json contains streams with \"channel_type\":\"tail\"\n        'url': 'http://v.youku.com/v_show/id_XOTUxMzg4NDMy.html',\n        'info_dict': {\n            'id': 'XOTUxMzg4NDMy',\n            'ext': 'mp4',\n            'title': '\u6211\u7684\u4e16\u754c\u2606\u660e\u6708\u5e84\u4e3b\u2606\u8f66\u9707\u730e\u6740\u2606\u6740\u4eba\u827a\u672fMinecraft',\n            'duration': 702.08,\n            'thumbnail': r're:^https?://.*',\n            'uploader': '\u660e\u6708\u5e84\u4e3bmoon',\n            'uploader_id': '38465621',\n            'uploader_url': 'http://i.youku.com/u/UMTUzODYyNDg0',\n            'tags': list,\n        },\n    }, {\n        'url': 'http://video.tudou.com/v/XMjIyNzAzMTQ4NA==.html?f=46177805',\n        'info_dict': {\n            'id': 'XMjIyNzAzMTQ4NA',\n            'ext': 'mp4',\n            'title': '\u5361\u9a6c\u4e54\u56fd\u8db3\u5f00\u5927\u811a\u957f\u4f20\u51b2\u540a\u96c6\u9526',\n            'duration': 289,\n            'thumbnail': r're:^https?://.*',\n            'uploader': '\u963f\u535c\u675c\u62c9\u4e4b\u661f',\n            'uploader_id': '2382249',\n            'uploader_url': 'http://i.youku.com/u/UOTUyODk5Ng==',\n            'tags': list,\n        },\n    }, {\n        'url': 'http://video.tudou.com/v/XMjE4ODI3OTg2MA==.html',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def get_ysuid():\n        return '%d%s' % (int(time.time()), ''.join([\n            random.choice(string.ascii_letters) for i in range(3)]))\n\n    def get_format_name(self, fm):\n        _dict = {\n            '3gp': 'h6',\n            '3gphd': 'h5',\n            'flv': 'h4',\n            'flvhd': 'h4',\n            'mp4': 'h3',\n            'mp4hd': 'h3',\n            'mp4hd2': 'h4',\n            'mp4hd3': 'h4',\n            'hd2': 'h2',\n            'hd3': 'h1',\n        }\n        return _dict.get(fm)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        self._set_cookie('youku.com', '__ysuid', self.get_ysuid())\n        self._set_cookie('youku.com', 'xreferrer', 'http://www.youku.com')\n\n        _, urlh = self._download_webpage_handle(\n            'https://log.mmstat.com/eg.js', video_id, 'Retrieving cna info')\n        # The etag header is '\"foobar\"'; let's remove the double quotes\n        cna = urlh.headers['etag'][1:-1]\n\n        # request basic data\n        basic_data_params = {\n            'vid': video_id,\n            'ccode': '0507',\n            'client_ip': '192.168.1.1',\n            'utid': cna,\n            'client_ts': time.time() / 1000,\n        }\n\n        video_password = self._downloader.params.get('videopassword')\n        if video_password:\n            basic_data_params['password'] = video_password\n\n        headers = {\n            'Referer': url,\n        }\n        headers.update(self.geo_verification_headers())\n        data = self._download_json(\n            'https://ups.youku.com/ups/get.json', video_id,\n            'Downloading JSON metadata',\n            query=basic_data_params, headers=headers)['data']\n\n        error = data.get('error')\n        if error:\n            error_note = error.get('note')\n            if error_note is not None and '\u56e0\u7248\u6743\u539f\u56e0\u65e0\u6cd5\u89c2\u770b\u6b64\u89c6\u9891' in error_note:\n                raise ExtractorError(\n                    'Youku said: Sorry, this video is available in China only', expected=True)\n            elif error_note and '\u8be5\u89c6\u9891\u88ab\u8bbe\u4e3a\u79c1\u5bc6' in error_note:\n                raise ExtractorError(\n                    'Youku said: Sorry, this video is private', expected=True)\n            else:\n                msg = 'Youku server reported error %i' % error.get('code')\n                if error_note is not None:\n                    msg += ': ' + error_note\n                raise ExtractorError(msg)\n\n        # get video title\n        video_data = data['video']\n        title = video_data['title']\n\n        formats = [{\n            'url': stream['m3u8_url'],\n            'format_id': self.get_format_name(stream.get('stream_type')),\n            'ext': 'mp4',\n            'protocol': 'm3u8_native',\n            'filesize': int(stream.get('size')),\n            'width': stream.get('width'),\n            'height': stream.get('height'),\n        } for stream in data['stream'] if stream.get('channel_type') != 'tail']\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'duration': video_data.get('seconds'),\n            'thumbnail': video_data.get('logo'),\n            'uploader': video_data.get('username'),\n            'uploader_id': str_or_none(video_data.get('userid')),\n            'uploader_url': data.get('uploader', {}).get('homepage'),\n            'tags': video_data.get('tags'),\n        }\n\n\nclass YoukuShowIE(InfoExtractor):\n    _VALID_URL = r'https?://list\\.youku\\.com/show/id_(?P<id>[0-9a-z]+)\\.html'\n    IE_NAME = 'youku:show'\n\n    _TESTS = [{\n        'url': 'http://list.youku.com/show/id_zc7c670be07ff11e48b3f.html',\n        'info_dict': {\n            'id': 'zc7c670be07ff11e48b3f',\n            'title': '\u82b1\u5343\u9aa8 DVD\u7248',\n            'description': 'md5:a1ae6f5618571bbeb5c9821f9c81b558',\n        },\n        'playlist_count': 50,\n    }, {\n        # Episode number not starting from 1\n        'url': 'http://list.youku.com/show/id_zefbfbd70efbfbd780bef.html',\n        'info_dict': {\n            'id': 'zefbfbd70efbfbd780bef',\n            'title': '\u8d85\u7ea7\u98de\u4fa03',\n            'description': 'md5:275715156abebe5ccc2a1992e9d56b98',\n        },\n        'playlist_count': 24,\n    }, {\n        # Ongoing playlist. The initial page is the last one\n        'url': 'http://list.youku.com/show/id_za7c275ecd7b411e1a19e.html',\n        'only_matching': True,\n    }, {\n        #  No data-id value.\n        'url': 'http://list.youku.com/show/id_zefbfbd61237fefbfbdef.html',\n        'only_matching': True,\n    }, {\n        #  Wrong number of reload_id.\n        'url': 'http://list.youku.com/show/id_z20eb4acaf5c211e3b2ad.html',\n        'only_matching': True,\n    }]\n\n    def _extract_entries(self, playlist_data_url, show_id, note, query):\n        query['callback'] = 'cb'\n        playlist_data = self._download_json(\n            playlist_data_url, show_id, query=query, note=note,\n            transform_source=lambda s: js_to_json(strip_jsonp(s))).get('html')\n        if playlist_data is None:\n            return [None, None]\n        drama_list = (get_element_by_class('p-drama-grid', playlist_data) or\n                      get_element_by_class('p-drama-half-row', playlist_data))\n        if drama_list is None:\n            raise ExtractorError('No episodes found')\n        video_urls = re.findall(r'<a[^>]+href=\"([^\"]+)\"', drama_list)\n        return playlist_data, [\n            self.url_result(self._proto_relative_url(video_url, 'http:'), YoukuIE.ie_key())\n            for video_url in video_urls]\n\n    def _real_extract(self, url):\n        show_id = self._match_id(url)\n        webpage = self._download_webpage(url, show_id)\n\n        entries = []\n        page_config = self._parse_json(self._search_regex(\n            r'var\\s+PageConfig\\s*=\\s*({.+});', webpage, 'page config'),\n            show_id, transform_source=js_to_json)\n        first_page, initial_entries = self._extract_entries(\n            'http://list.youku.com/show/module', show_id,\n            note='Downloading initial playlist data page',\n            query={\n                'id': page_config['showid'],\n                'tab': 'showInfo',\n            })\n        first_page_reload_id = self._html_search_regex(\n            r'<div[^>]+id=\"(reload_\\d+)', first_page, 'first page reload id')\n        # The first reload_id has the same items as first_page\n        reload_ids = re.findall('<li[^>]+data-id=\"([^\"]+)\">', first_page)\n        entries.extend(initial_entries)\n        for idx, reload_id in enumerate(reload_ids):\n            if reload_id == first_page_reload_id:\n                continue\n            _, new_entries = self._extract_entries(\n                'http://list.youku.com/show/episode', show_id,\n                note='Downloading playlist data page %d' % (idx + 1),\n                query={\n                    'id': page_config['showid'],\n                    'stage': reload_id,\n                })\n            if new_entries is not None:\n                entries.extend(new_entries)\n        desc = self._html_search_meta('description', webpage, fatal=False)\n        playlist_title = desc.split(',')[0] if desc else None\n        detail_li = get_element_by_class('p-intro', webpage)\n        playlist_description = get_element_by_class(\n            'intro-more', detail_li) if detail_li else None\n\n        return self.playlist_result(\n            entries, show_id, playlist_title, playlist_description)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "youku.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/youku.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}