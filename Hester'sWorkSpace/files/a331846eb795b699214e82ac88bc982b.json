{"author": "littlecodersh", "code": "import os, time, re, io\nimport json\nimport mimetypes, hashlib\nimport logging\nfrom collections import OrderedDict\n\nimport requests\n\nfrom .. import config, utils\nfrom ..returnvalues import ReturnValue\nfrom ..storage import templates\nfrom .contact import update_local_uin\n\nlogger = logging.getLogger('itchat')\n\ndef load_messages(core):\n    core.send_raw_msg = send_raw_msg\n    core.send_msg     = send_msg\n    core.upload_file  = upload_file\n    core.send_file    = send_file\n    core.send_image   = send_image\n    core.send_video   = send_video\n    core.send         = send\n    core.revoke       = revoke\n\ndef get_download_fn(core, url, msgId):\n    def download_fn(downloadDir=None):\n        params = {\n            'msgid': msgId,\n            'skey': core.loginInfo['skey'],}\n        headers = { 'User-Agent' : config.USER_AGENT }\n        r = core.s.get(url, params=params, stream=True, headers = headers)\n        tempStorage = io.BytesIO()\n        for block in r.iter_content(1024):\n            tempStorage.write(block)\n        if downloadDir is None:\n            return tempStorage.getvalue()\n        with open(downloadDir, 'wb') as f:\n            f.write(tempStorage.getvalue())\n        tempStorage.seek(0)\n        return ReturnValue({'BaseResponse': {\n            'ErrMsg': 'Successfully downloaded',\n            'Ret': 0, },\n            'PostFix': utils.get_image_postfix(tempStorage.read(20)), })\n    return download_fn\n\ndef produce_msg(core, msgList):\n    ''' for messages types\n     * 40 msg, 43 videochat, 50 VOIPMSG, 52 voipnotifymsg\n     * 53 webwxvoipnotifymsg, 9999 sysnotice\n    '''\n    rl = []\n    srl = [40, 43, 50, 52, 53, 9999]\n    for m in msgList:\n        \n        if m['FromUserName'] == core.storageClass.userName:\n            actualOpposite = m['ToUserName']\n        else:\n            actualOpposite = m['FromUserName']\n        \n        if '@@' in m['FromUserName'] or '@@' in m['ToUserName']:\n            produce_group_chat(core, m)\n        else:\n            utils.msg_formatter(m, 'Content')\n        \n        if '@@' in actualOpposite:\n            m['User'] = core.search_chatrooms(userName=actualOpposite) or \\\n                templates.Chatroom({'UserName': actualOpposite})\n            \n            \n        elif actualOpposite in ('filehelper', 'fmessage'):\n            m['User'] = templates.User({'UserName': actualOpposite})\n        else:\n            m['User'] = core.search_mps(userName=actualOpposite) or \\\n                core.search_friends(userName=actualOpposite) or \\\n                templates.User(userName=actualOpposite)\n            \n        m['User'].core = core\n        if m['MsgType'] == 1: \n            if m['Url']:\n                regx = r'(.+?\\(.+?\\))'\n                data = re.search(regx, m['Content'])\n                data = 'Map' if data is None else data.group(1)\n                msg = {\n                    'Type': 'Map',\n                    'Text': data,}\n            else:\n                msg = {\n                    'Type': 'Text',\n                    'Text': m['Content'],}\n        elif m['MsgType'] == 3 or m['MsgType'] == 47: \n            download_fn = get_download_fn(core,\n                '%s/webwxgetmsgimg' % core.loginInfo['url'], m['NewMsgId'])\n            msg = {\n                'Type'     : 'Picture',\n                'FileName' : '%s.%s' % (time.strftime('%y%m%d-%H%M%S', time.localtime()),\n                    'png' if m['MsgType'] == 3 else 'gif'),\n                'Text'     : download_fn, }\n        elif m['MsgType'] == 34: \n            download_fn = get_download_fn(core,\n                '%s/webwxgetvoice' % core.loginInfo['url'], m['NewMsgId'])\n            msg = {\n                'Type': 'Recording',\n                'FileName' : '%s.mp3' % time.strftime('%y%m%d-%H%M%S', time.localtime()),\n                'Text': download_fn,}\n        elif m['MsgType'] == 37: \n            m['User']['UserName'] = m['RecommendInfo']['UserName']\n            msg = {\n                'Type': 'Friends',\n                'Text': {\n                    'status'        : m['Status'],\n                    'userName'      : m['RecommendInfo']['UserName'],\n                    'verifyContent' : m['Ticket'],\n                    'autoUpdate'    : m['RecommendInfo'], }, }\n            m['User'].verifyDict = msg['Text']\n        elif m['MsgType'] == 42: \n            msg = {\n                'Type': 'Card',\n                'Text': m['RecommendInfo'], }\n        elif m['MsgType'] in (43, 62): \n            msgId = m['MsgId']\n            def download_video(videoDir=None):\n                url = '%s/webwxgetvideo' % core.loginInfo['url']\n                params = {\n                    'msgid': msgId,\n                    'skey': core.loginInfo['skey'],}\n                headers = {'Range': 'bytes=0-', 'User-Agent' : config.USER_AGENT }\n                r = core.s.get(url, params=params, headers=headers, stream=True)\n                tempStorage = io.BytesIO()\n                for block in r.iter_content(1024):\n                    tempStorage.write(block)\n                if videoDir is None:\n                    return tempStorage.getvalue()\n                with open(videoDir, 'wb') as f:\n                    f.write(tempStorage.getvalue())\n                return ReturnValue({'BaseResponse': {\n                    'ErrMsg': 'Successfully downloaded',\n                    'Ret': 0, }})\n            msg = {\n                'Type': 'Video',\n                'FileName' : '%s.mp4' % time.strftime('%y%m%d-%H%M%S', time.localtime()),\n                'Text': download_video, }\n        elif m['MsgType'] == 49: \n            if m['AppMsgType'] == 0: \n                msg = {\n                    'Type': 'Note',\n                    'Text': m['Content'], }\n            elif m['AppMsgType'] == 6:\n                rawMsg = m\n                cookiesList = {name:data for name,data in core.s.cookies.items()}\n                def download_atta(attaDir=None):\n                    url = core.loginInfo['fileUrl'] + '/webwxgetmedia'\n                    params = {\n                        'sender': rawMsg['FromUserName'],\n                        'mediaid': rawMsg['MediaId'],\n                        'filename': rawMsg['FileName'],\n                        'fromuser': core.loginInfo['wxuin'],\n                        'pass_ticket': 'undefined',\n                        'webwx_data_ticket': cookiesList['webwx_data_ticket'],}\n                    headers = { 'User-Agent' : config.USER_AGENT }\n                    r = core.s.get(url, params=params, stream=True, headers=headers)\n                    tempStorage = io.BytesIO()\n                    for block in r.iter_content(1024):\n                        tempStorage.write(block)\n                    if attaDir is None:\n                        return tempStorage.getvalue()\n                    with open(attaDir, 'wb') as f:\n                        f.write(tempStorage.getvalue())\n                    return ReturnValue({'BaseResponse': {\n                        'ErrMsg': 'Successfully downloaded',\n                        'Ret': 0, }})\n                msg = {\n                    'Type': 'Attachment',\n                    'Text': download_atta, }\n            elif m['AppMsgType'] == 8:\n                download_fn = get_download_fn(core,\n                    '%s/webwxgetmsgimg' % core.loginInfo['url'], m['NewMsgId'])\n                msg = {\n                    'Type'     : 'Picture',\n                    'FileName' : '%s.gif' % (\n                        time.strftime('%y%m%d-%H%M%S', time.localtime())),\n                    'Text'     : download_fn, }\n            elif m['AppMsgType'] == 17:\n                msg = {\n                    'Type': 'Note',\n                    'Text': m['FileName'], }\n            elif m['AppMsgType'] == 2000:\n                regx = r'\\[CDATA\\[(.+?)\\][\\s\\S]+?\\[CDATA\\[(.+?)\\]'\n                data = re.search(regx, m['Content'])\n                if data:\n                    data = data.group(2).split(u'\\u3002')[0]\n                else:\n                    data = 'You may found detailed info in Content key.'\n                msg = {\n                    'Type': 'Note',\n                    'Text': data, }\n            else:\n                msg = {\n                    'Type': 'Sharing',\n                    'Text': m['FileName'], }\n        elif m['MsgType'] == 51: \n            msg = update_local_uin(core, m)\n        elif m['MsgType'] == 10000:\n            msg = {\n                'Type': 'Note',\n                'Text': m['Content'],}\n        elif m['MsgType'] == 10002:\n            regx = r'\\[CDATA\\[(.+?)\\]\\]'\n            data = re.search(regx, m['Content'])\n            data = 'System message' if data is None else data.group(1).replace('\\\\', '')\n            msg = {\n                'Type': 'Note',\n                'Text': data, }\n        elif m['MsgType'] in srl:\n            msg = {\n                'Type': 'Useless',\n                'Text': 'UselessMsg', }\n        else:\n            logger.debug('Useless message received: %s\\n%s' % (m['MsgType'], str(m)))\n            msg = {\n                'Type': 'Useless',\n                'Text': 'UselessMsg', }\n        m = dict(m, **msg)\n        rl.append(m)\n    return rl\n\ndef produce_group_chat(core, msg):\n    r = re.match('(@[0-9a-z]*?):<br/>(.*)$', msg['Content'])\n    if r:\n        actualUserName, content = r.groups()\n        chatroomUserName = msg['FromUserName']\n    elif msg['FromUserName'] == core.storageClass.userName:\n        actualUserName = core.storageClass.userName\n        content = msg['Content']\n        chatroomUserName = msg['ToUserName']\n    else:\n        msg['ActualUserName'] = core.storageClass.userName\n        msg['ActualNickName'] = core.storageClass.nickName\n        msg['IsAt'] = False\n        utils.msg_formatter(msg, 'Content')\n        return\n    chatroom = core.storageClass.search_chatrooms(userName=chatroomUserName)\n    member = utils.search_dict_list((chatroom or {}).get(\n        'MemberList') or [], 'UserName', actualUserName)\n    if member is None:\n        chatroom = core.update_chatroom(chatroomUserName)\n        member = utils.search_dict_list((chatroom or {}).get(\n            'MemberList') or [], 'UserName', actualUserName)\n    if member is None:\n        logger.debug('chatroom member fetch failed with %s' % actualUserName)\n        msg['ActualNickName'] = ''\n        msg['IsAt'] = False\n    else:\n        msg['ActualNickName'] = member.get('DisplayName', '') or member['NickName']\n        atFlag = '@' + (chatroom['Self'].get('DisplayName', '') or core.storageClass.nickName)\n        msg['IsAt'] = (\n            (atFlag + (u'\\u2005' if u'\\u2005' in msg['Content'] else ' '))\n            in msg['Content'] or msg['Content'].endswith(atFlag))\n    msg['ActualUserName'] = actualUserName\n    msg['Content']        = content\n    utils.msg_formatter(msg, 'Content')\n\ndef send_raw_msg(self, msgType, content, toUserName):\n    url = '%s/webwxsendmsg' % self.loginInfo['url']\n    data = {\n        'BaseRequest': self.loginInfo['BaseRequest'],\n        'Msg': {\n            'Type': msgType,\n            'Content': content,\n            'FromUserName': self.storageClass.userName,\n            'ToUserName': (toUserName if toUserName else self.storageClass.userName),\n            'LocalID': int(time.time() * 1e4),\n            'ClientMsgId': int(time.time() * 1e4),\n            },\n        'Scene': 0, }\n    headers = { 'ContentType': 'application/json; charset=UTF-8', 'User-Agent' : config.USER_AGENT }\n    r = self.s.post(url, headers=headers,\n        data=json.dumps(data, ensure_ascii=False).encode('utf8'))\n    return ReturnValue(rawResponse=r)\n\ndef send_msg(self, msg='Test Message', toUserName=None):\n    logger.debug('Request to send a text message to %s: %s' % (toUserName, msg))\n    r = self.send_raw_msg(1, msg, toUserName)\n    return r\n\ndef _prepare_file(fileDir, file_=None):\n    fileDict = {}\n    if file_:\n        if hasattr(file_, 'read'):\n            file_ = file_.read()\n        else:\n            return ReturnValue({'BaseResponse': {\n                'ErrMsg': 'file_ param should be opened file',\n                'Ret': -1005, }})\n    else:\n        if not utils.check_file(fileDir):\n            return ReturnValue({'BaseResponse': {\n                'ErrMsg': 'No file found in specific dir',\n                'Ret': -1002, }})\n        with open(fileDir, 'rb') as f:\n            file_ = f.read()\n    fileDict['fileSize'] = len(file_)\n    fileDict['fileMd5'] = hashlib.md5(file_).hexdigest()\n    fileDict['file_'] = io.BytesIO(file_)\n    return fileDict\n\ndef upload_file(self, fileDir, isPicture=False, isVideo=False,\n        toUserName='filehelper', file_=None, preparedFile=None):\n    logger.debug('Request to upload a %s: %s' % (\n        'picture' if isPicture else 'video' if isVideo else 'file', fileDir))\n    if not preparedFile:\n        preparedFile = _prepare_file(fileDir, file_)\n        if not preparedFile:\n            return preparedFile\n    fileSize, fileMd5, file_ = \\\n        preparedFile['fileSize'], preparedFile['fileMd5'], preparedFile['file_']\n    fileSymbol = 'pic' if isPicture else 'video' if isVideo else'doc'\n    chunks = int((fileSize - 1) / 524288) + 1\n    clientMediaId = int(time.time() * 1e4)\n    uploadMediaRequest = json.dumps(OrderedDict([\n        ('UploadType', 2),\n        ('BaseRequest', self.loginInfo['BaseRequest']),\n        ('ClientMediaId', clientMediaId),\n        ('TotalLen', fileSize),\n        ('StartPos', 0),\n        ('DataLen', fileSize),\n        ('MediaType', 4),\n        ('FromUserName', self.storageClass.userName),\n        ('ToUserName', toUserName),\n        ('FileMd5', fileMd5)]\n        ), separators = (',', ':'))\n    r = {'BaseResponse': {'Ret': -1005, 'ErrMsg': 'Empty file detected'}}\n    for chunk in range(chunks):\n        r = upload_chunk_file(self, fileDir, fileSymbol, fileSize,\n            file_, chunk, chunks, uploadMediaRequest)\n    file_.close()\n    if isinstance(r, dict):\n        return ReturnValue(r)\n    return ReturnValue(rawResponse=r)\n\ndef upload_chunk_file(core, fileDir, fileSymbol, fileSize,\n        file_, chunk, chunks, uploadMediaRequest):\n    url = core.loginInfo.get('fileUrl', core.loginInfo['url']) + \\\n        '/webwxuploadmedia?f=json'\n    \n    cookiesList = {name:data for name,data in core.s.cookies.items()}\n    fileType = mimetypes.guess_type(fileDir)[0] or 'application/octet-stream'\n    fileName = utils.quote(os.path.basename(fileDir))\n    files = OrderedDict([\n        ('id', (None, 'WU_FILE_0')),\n        ('name', (None, fileName)),\n        ('type', (None, fileType)),\n        ('lastModifiedDate', (None, time.strftime('%a %b %d %Y %H:%M:%S GMT+0800 (CST)'))),\n        ('size', (None, str(fileSize))),\n        ('chunks', (None, None)),\n        ('chunk', (None, None)),\n        ('mediatype', (None, fileSymbol)),\n        ('uploadmediarequest', (None, uploadMediaRequest)),\n        ('webwx_data_ticket', (None, cookiesList['webwx_data_ticket'])),\n        ('pass_ticket', (None, core.loginInfo['pass_ticket'])),\n        ('filename' , (fileName, file_.read(524288), 'application/octet-stream'))])\n    if chunks == 1:\n        del files['chunk']; del files['chunks']\n    else:\n        files['chunk'], files['chunks'] = (None, str(chunk)), (None, str(chunks))\n    headers = { 'User-Agent' : config.USER_AGENT }\n    return core.s.post(url, files=files, headers=headers)\n\ndef send_file(self, fileDir, toUserName=None, mediaId=None, file_=None):\n    logger.debug('Request to send a file(mediaId: %s) to %s: %s' % (\n        mediaId, toUserName, fileDir))\n    if hasattr(fileDir, 'read'):\n        return ReturnValue({'BaseResponse': {\n            'ErrMsg': 'fileDir param should not be an opened file in send_file',\n            'Ret': -1005, }})\n    if toUserName is None:\n        toUserName = self.storageClass.userName\n    preparedFile = _prepare_file(fileDir, file_)\n    if not preparedFile:\n        return preparedFile\n    fileSize = preparedFile['fileSize']\n    if mediaId is None:\n        r = self.upload_file(fileDir, preparedFile=preparedFile)\n        if r:\n            mediaId = r['MediaId']\n        else:\n            return r\n    url = '%s/webwxsendappmsg?fun=async&f=json' % self.loginInfo['url']\n    data = {\n        'BaseRequest': self.loginInfo['BaseRequest'],\n        'Msg': {\n            'Type': 6,\n            'Content': (\"<appmsg appid='wxeb7ec651dd0aefa9' sdkver=''><title>%s</title>\" % os.path.basename(fileDir) +\n                \"<des></des><action></action><type>6</type><content></content><url></url><lowurl></lowurl>\" +\n                \"<appattach><totallen>%s</totallen><attachid>%s</attachid>\" % (str(fileSize), mediaId) +\n                \"<fileext>%s</fileext></appattach><extinfo></extinfo></appmsg>\" % os.path.splitext(fileDir)[1].replace('.','')),\n            'FromUserName': self.storageClass.userName,\n            'ToUserName': toUserName,\n            'LocalID': int(time.time() * 1e4),\n            'ClientMsgId': int(time.time() * 1e4), },\n        'Scene': 0, }\n    headers = {\n        'User-Agent': config.USER_AGENT,\n        'Content-Type': 'application/json;charset=UTF-8', }\n    r = self.s.post(url, headers=headers,\n        data=json.dumps(data, ensure_ascii=False).encode('utf8'))\n    return ReturnValue(rawResponse=r)\n\ndef send_image(self, fileDir=None, toUserName=None, mediaId=None, file_=None):\n    logger.debug('Request to send a image(mediaId: %s) to %s: %s' % (\n        mediaId, toUserName, fileDir))\n    if fileDir or file_:\n        if hasattr(fileDir, 'read'):\n            file_, fileDir = fileDir, None\n        if fileDir is None:\n            fileDir = 'tmp.jpg' \n    else:\n        return ReturnValue({'BaseResponse': {\n            'ErrMsg': 'Either fileDir or file_ should be specific',\n            'Ret': -1005, }})\n    if toUserName is None:\n        toUserName = self.storageClass.userName\n    if mediaId is None:\n        r = self.upload_file(fileDir, isPicture=not fileDir[-4:] == '.gif', file_=file_)\n        if r:\n            mediaId = r['MediaId']\n        else:\n            return r\n    url = '%s/webwxsendmsgimg?fun=async&f=json' % self.loginInfo['url']\n    data = {\n        'BaseRequest': self.loginInfo['BaseRequest'],\n        'Msg': {\n            'Type': 3,\n            'MediaId': mediaId,\n            'FromUserName': self.storageClass.userName,\n            'ToUserName': toUserName,\n            'LocalID': int(time.time() * 1e4),\n            'ClientMsgId': int(time.time() * 1e4), },\n        'Scene': 0, }\n    if fileDir[-4:] == '.gif':\n        url = '%s/webwxsendemoticon?fun=sys' % self.loginInfo['url']\n        data['Msg']['Type'] = 47\n        data['Msg']['EmojiFlag'] = 2\n    headers = {\n        'User-Agent': config.USER_AGENT,\n        'Content-Type': 'application/json;charset=UTF-8', }\n    r = self.s.post(url, headers=headers,\n        data=json.dumps(data, ensure_ascii=False).encode('utf8'))\n    return ReturnValue(rawResponse=r)\n\ndef send_video(self, fileDir=None, toUserName=None, mediaId=None, file_=None):\n    logger.debug('Request to send a video(mediaId: %s) to %s: %s' % (\n        mediaId, toUserName, fileDir))\n    if fileDir or file_:\n        if hasattr(fileDir, 'read'):\n            file_, fileDir = fileDir, None\n        if fileDir is None:\n            fileDir = 'tmp.mp4' \n    else:\n        return ReturnValue({'BaseResponse': {\n            'ErrMsg': 'Either fileDir or file_ should be specific',\n            'Ret': -1005, }})\n    if toUserName is None:\n        toUserName = self.storageClass.userName\n    if mediaId is None:\n        r = self.upload_file(fileDir, isVideo=True, file_=file_)\n        if r:\n            mediaId = r['MediaId']\n        else:\n            return r\n    url = '%s/webwxsendvideomsg?fun=async&f=json&pass_ticket=%s' % (\n        self.loginInfo['url'], self.loginInfo['pass_ticket'])\n    data = {\n        'BaseRequest': self.loginInfo['BaseRequest'],\n        'Msg': {\n            'Type'         : 43,\n            'MediaId'      : mediaId,\n            'FromUserName' : self.storageClass.userName,\n            'ToUserName'   : toUserName,\n            'LocalID'      : int(time.time() * 1e4),\n            'ClientMsgId'  : int(time.time() * 1e4), },\n        'Scene': 0, }\n    headers = {\n        'User-Agent' : config.USER_AGENT,\n        'Content-Type': 'application/json;charset=UTF-8', }\n    r = self.s.post(url, headers=headers,\n        data=json.dumps(data, ensure_ascii=False).encode('utf8'))\n    return ReturnValue(rawResponse=r)\n\ndef send(self, msg, toUserName=None, mediaId=None):\n    if not msg:\n        r = ReturnValue({'BaseResponse': {\n            'ErrMsg': 'No message.',\n            'Ret': -1005, }})\n    elif msg[:5] == '@fil@':\n        if mediaId is None:\n            r = self.send_file(msg[5:], toUserName)\n        else:\n            r = self.send_file(msg[5:], toUserName, mediaId)\n    elif msg[:5] == '@img@':\n        if mediaId is None:\n            r = self.send_image(msg[5:], toUserName)\n        else:\n            r = self.send_image(msg[5:], toUserName, mediaId)\n    elif msg[:5] == '@msg@':\n        r = self.send_msg(msg[5:], toUserName)\n    elif msg[:5] == '@vid@':\n        if mediaId is None:\n            r = self.send_video(msg[5:], toUserName)\n        else:\n            r = self.send_video(msg[5:], toUserName, mediaId)\n    else:\n        r = self.send_msg(msg, toUserName)\n    return r\n\ndef revoke(self, msgId, toUserName, localId=None):\n    url = '%s/webwxrevokemsg' % self.loginInfo['url']\n    data = {\n        'BaseRequest': self.loginInfo['BaseRequest'],\n        \"ClientMsgId\": localId or str(time.time() * 1e3),\n        \"SvrMsgId\": msgId,\n        \"ToUserName\": toUserName}\n    headers = {\n        'ContentType': 'application/json; charset=UTF-8',\n        'User-Agent' : config.USER_AGENT }\n    r = self.s.post(url, headers=headers,\n        data=json.dumps(data, ensure_ascii=False).encode('utf8'))\n    return ReturnValue(rawResponse=r)\n", "comments": "    messages types        40 msg  43 videochat  50 voipmsg  52 voipnotifymsg        53 webwxvoipnotifymsg  9999 sysnotice            get actual opposite    produce basic message    set user msg    need update chatroom    updated producing basic message    default think may user missing mp    words    picture    voice    friends    name card    tiny video    sharing    chat history    phone init    save server    specific filedir send gifs    specific filedir send formats ", "content": "import os, time, re, io\nimport json\nimport mimetypes, hashlib\nimport logging\nfrom collections import OrderedDict\n\nimport requests\n\nfrom .. import config, utils\nfrom ..returnvalues import ReturnValue\nfrom ..storage import templates\nfrom .contact import update_local_uin\n\nlogger = logging.getLogger('itchat')\n\ndef load_messages(core):\n    core.send_raw_msg = send_raw_msg\n    core.send_msg     = send_msg\n    core.upload_file  = upload_file\n    core.send_file    = send_file\n    core.send_image   = send_image\n    core.send_video   = send_video\n    core.send         = send\n    core.revoke       = revoke\n\ndef get_download_fn(core, url, msgId):\n    def download_fn(downloadDir=None):\n        params = {\n            'msgid': msgId,\n            'skey': core.loginInfo['skey'],}\n        headers = { 'User-Agent' : config.USER_AGENT }\n        r = core.s.get(url, params=params, stream=True, headers = headers)\n        tempStorage = io.BytesIO()\n        for block in r.iter_content(1024):\n            tempStorage.write(block)\n        if downloadDir is None:\n            return tempStorage.getvalue()\n        with open(downloadDir, 'wb') as f:\n            f.write(tempStorage.getvalue())\n        tempStorage.seek(0)\n        return ReturnValue({'BaseResponse': {\n            'ErrMsg': 'Successfully downloaded',\n            'Ret': 0, },\n            'PostFix': utils.get_image_postfix(tempStorage.read(20)), })\n    return download_fn\n\ndef produce_msg(core, msgList):\n    ''' for messages types\n     * 40 msg, 43 videochat, 50 VOIPMSG, 52 voipnotifymsg\n     * 53 webwxvoipnotifymsg, 9999 sysnotice\n    '''\n    rl = []\n    srl = [40, 43, 50, 52, 53, 9999]\n    for m in msgList:\n        # get actual opposite\n        if m['FromUserName'] == core.storageClass.userName:\n            actualOpposite = m['ToUserName']\n        else:\n            actualOpposite = m['FromUserName']\n        # produce basic message\n        if '@@' in m['FromUserName'] or '@@' in m['ToUserName']:\n            produce_group_chat(core, m)\n        else:\n            utils.msg_formatter(m, 'Content')\n        # set user of msg\n        if '@@' in actualOpposite:\n            m['User'] = core.search_chatrooms(userName=actualOpposite) or \\\n                templates.Chatroom({'UserName': actualOpposite})\n            # we don't need to update chatroom here because we have\n            # updated once when producing basic message\n        elif actualOpposite in ('filehelper', 'fmessage'):\n            m['User'] = templates.User({'UserName': actualOpposite})\n        else:\n            m['User'] = core.search_mps(userName=actualOpposite) or \\\n                core.search_friends(userName=actualOpposite) or \\\n                templates.User(userName=actualOpposite)\n            # by default we think there may be a user missing not a mp\n        m['User'].core = core\n        if m['MsgType'] == 1: # words\n            if m['Url']:\n                regx = r'(.+?\\(.+?\\))'\n                data = re.search(regx, m['Content'])\n                data = 'Map' if data is None else data.group(1)\n                msg = {\n                    'Type': 'Map',\n                    'Text': data,}\n            else:\n                msg = {\n                    'Type': 'Text',\n                    'Text': m['Content'],}\n        elif m['MsgType'] == 3 or m['MsgType'] == 47: # picture\n            download_fn = get_download_fn(core,\n                '%s/webwxgetmsgimg' % core.loginInfo['url'], m['NewMsgId'])\n            msg = {\n                'Type'     : 'Picture',\n                'FileName' : '%s.%s' % (time.strftime('%y%m%d-%H%M%S', time.localtime()),\n                    'png' if m['MsgType'] == 3 else 'gif'),\n                'Text'     : download_fn, }\n        elif m['MsgType'] == 34: # voice\n            download_fn = get_download_fn(core,\n                '%s/webwxgetvoice' % core.loginInfo['url'], m['NewMsgId'])\n            msg = {\n                'Type': 'Recording',\n                'FileName' : '%s.mp3' % time.strftime('%y%m%d-%H%M%S', time.localtime()),\n                'Text': download_fn,}\n        elif m['MsgType'] == 37: # friends\n            m['User']['UserName'] = m['RecommendInfo']['UserName']\n            msg = {\n                'Type': 'Friends',\n                'Text': {\n                    'status'        : m['Status'],\n                    'userName'      : m['RecommendInfo']['UserName'],\n                    'verifyContent' : m['Ticket'],\n                    'autoUpdate'    : m['RecommendInfo'], }, }\n            m['User'].verifyDict = msg['Text']\n        elif m['MsgType'] == 42: # name card\n            msg = {\n                'Type': 'Card',\n                'Text': m['RecommendInfo'], }\n        elif m['MsgType'] in (43, 62): # tiny video\n            msgId = m['MsgId']\n            def download_video(videoDir=None):\n                url = '%s/webwxgetvideo' % core.loginInfo['url']\n                params = {\n                    'msgid': msgId,\n                    'skey': core.loginInfo['skey'],}\n                headers = {'Range': 'bytes=0-', 'User-Agent' : config.USER_AGENT }\n                r = core.s.get(url, params=params, headers=headers, stream=True)\n                tempStorage = io.BytesIO()\n                for block in r.iter_content(1024):\n                    tempStorage.write(block)\n                if videoDir is None:\n                    return tempStorage.getvalue()\n                with open(videoDir, 'wb') as f:\n                    f.write(tempStorage.getvalue())\n                return ReturnValue({'BaseResponse': {\n                    'ErrMsg': 'Successfully downloaded',\n                    'Ret': 0, }})\n            msg = {\n                'Type': 'Video',\n                'FileName' : '%s.mp4' % time.strftime('%y%m%d-%H%M%S', time.localtime()),\n                'Text': download_video, }\n        elif m['MsgType'] == 49: # sharing\n            if m['AppMsgType'] == 0: # chat history\n                msg = {\n                    'Type': 'Note',\n                    'Text': m['Content'], }\n            elif m['AppMsgType'] == 6:\n                rawMsg = m\n                cookiesList = {name:data for name,data in core.s.cookies.items()}\n                def download_atta(attaDir=None):\n                    url = core.loginInfo['fileUrl'] + '/webwxgetmedia'\n                    params = {\n                        'sender': rawMsg['FromUserName'],\n                        'mediaid': rawMsg['MediaId'],\n                        'filename': rawMsg['FileName'],\n                        'fromuser': core.loginInfo['wxuin'],\n                        'pass_ticket': 'undefined',\n                        'webwx_data_ticket': cookiesList['webwx_data_ticket'],}\n                    headers = { 'User-Agent' : config.USER_AGENT }\n                    r = core.s.get(url, params=params, stream=True, headers=headers)\n                    tempStorage = io.BytesIO()\n                    for block in r.iter_content(1024):\n                        tempStorage.write(block)\n                    if attaDir is None:\n                        return tempStorage.getvalue()\n                    with open(attaDir, 'wb') as f:\n                        f.write(tempStorage.getvalue())\n                    return ReturnValue({'BaseResponse': {\n                        'ErrMsg': 'Successfully downloaded',\n                        'Ret': 0, }})\n                msg = {\n                    'Type': 'Attachment',\n                    'Text': download_atta, }\n            elif m['AppMsgType'] == 8:\n                download_fn = get_download_fn(core,\n                    '%s/webwxgetmsgimg' % core.loginInfo['url'], m['NewMsgId'])\n                msg = {\n                    'Type'     : 'Picture',\n                    'FileName' : '%s.gif' % (\n                        time.strftime('%y%m%d-%H%M%S', time.localtime())),\n                    'Text'     : download_fn, }\n            elif m['AppMsgType'] == 17:\n                msg = {\n                    'Type': 'Note',\n                    'Text': m['FileName'], }\n            elif m['AppMsgType'] == 2000:\n                regx = r'\\[CDATA\\[(.+?)\\][\\s\\S]+?\\[CDATA\\[(.+?)\\]'\n                data = re.search(regx, m['Content'])\n                if data:\n                    data = data.group(2).split(u'\\u3002')[0]\n                else:\n                    data = 'You may found detailed info in Content key.'\n                msg = {\n                    'Type': 'Note',\n                    'Text': data, }\n            else:\n                msg = {\n                    'Type': 'Sharing',\n                    'Text': m['FileName'], }\n        elif m['MsgType'] == 51: # phone init\n            msg = update_local_uin(core, m)\n        elif m['MsgType'] == 10000:\n            msg = {\n                'Type': 'Note',\n                'Text': m['Content'],}\n        elif m['MsgType'] == 10002:\n            regx = r'\\[CDATA\\[(.+?)\\]\\]'\n            data = re.search(regx, m['Content'])\n            data = 'System message' if data is None else data.group(1).replace('\\\\', '')\n            msg = {\n                'Type': 'Note',\n                'Text': data, }\n        elif m['MsgType'] in srl:\n            msg = {\n                'Type': 'Useless',\n                'Text': 'UselessMsg', }\n        else:\n            logger.debug('Useless message received: %s\\n%s' % (m['MsgType'], str(m)))\n            msg = {\n                'Type': 'Useless',\n                'Text': 'UselessMsg', }\n        m = dict(m, **msg)\n        rl.append(m)\n    return rl\n\ndef produce_group_chat(core, msg):\n    r = re.match('(@[0-9a-z]*?):<br/>(.*)$', msg['Content'])\n    if r:\n        actualUserName, content = r.groups()\n        chatroomUserName = msg['FromUserName']\n    elif msg['FromUserName'] == core.storageClass.userName:\n        actualUserName = core.storageClass.userName\n        content = msg['Content']\n        chatroomUserName = msg['ToUserName']\n    else:\n        msg['ActualUserName'] = core.storageClass.userName\n        msg['ActualNickName'] = core.storageClass.nickName\n        msg['IsAt'] = False\n        utils.msg_formatter(msg, 'Content')\n        return\n    chatroom = core.storageClass.search_chatrooms(userName=chatroomUserName)\n    member = utils.search_dict_list((chatroom or {}).get(\n        'MemberList') or [], 'UserName', actualUserName)\n    if member is None:\n        chatroom = core.update_chatroom(chatroomUserName)\n        member = utils.search_dict_list((chatroom or {}).get(\n            'MemberList') or [], 'UserName', actualUserName)\n    if member is None:\n        logger.debug('chatroom member fetch failed with %s' % actualUserName)\n        msg['ActualNickName'] = ''\n        msg['IsAt'] = False\n    else:\n        msg['ActualNickName'] = member.get('DisplayName', '') or member['NickName']\n        atFlag = '@' + (chatroom['Self'].get('DisplayName', '') or core.storageClass.nickName)\n        msg['IsAt'] = (\n            (atFlag + (u'\\u2005' if u'\\u2005' in msg['Content'] else ' '))\n            in msg['Content'] or msg['Content'].endswith(atFlag))\n    msg['ActualUserName'] = actualUserName\n    msg['Content']        = content\n    utils.msg_formatter(msg, 'Content')\n\ndef send_raw_msg(self, msgType, content, toUserName):\n    url = '%s/webwxsendmsg' % self.loginInfo['url']\n    data = {\n        'BaseRequest': self.loginInfo['BaseRequest'],\n        'Msg': {\n            'Type': msgType,\n            'Content': content,\n            'FromUserName': self.storageClass.userName,\n            'ToUserName': (toUserName if toUserName else self.storageClass.userName),\n            'LocalID': int(time.time() * 1e4),\n            'ClientMsgId': int(time.time() * 1e4),\n            },\n        'Scene': 0, }\n    headers = { 'ContentType': 'application/json; charset=UTF-8', 'User-Agent' : config.USER_AGENT }\n    r = self.s.post(url, headers=headers,\n        data=json.dumps(data, ensure_ascii=False).encode('utf8'))\n    return ReturnValue(rawResponse=r)\n\ndef send_msg(self, msg='Test Message', toUserName=None):\n    logger.debug('Request to send a text message to %s: %s' % (toUserName, msg))\n    r = self.send_raw_msg(1, msg, toUserName)\n    return r\n\ndef _prepare_file(fileDir, file_=None):\n    fileDict = {}\n    if file_:\n        if hasattr(file_, 'read'):\n            file_ = file_.read()\n        else:\n            return ReturnValue({'BaseResponse': {\n                'ErrMsg': 'file_ param should be opened file',\n                'Ret': -1005, }})\n    else:\n        if not utils.check_file(fileDir):\n            return ReturnValue({'BaseResponse': {\n                'ErrMsg': 'No file found in specific dir',\n                'Ret': -1002, }})\n        with open(fileDir, 'rb') as f:\n            file_ = f.read()\n    fileDict['fileSize'] = len(file_)\n    fileDict['fileMd5'] = hashlib.md5(file_).hexdigest()\n    fileDict['file_'] = io.BytesIO(file_)\n    return fileDict\n\ndef upload_file(self, fileDir, isPicture=False, isVideo=False,\n        toUserName='filehelper', file_=None, preparedFile=None):\n    logger.debug('Request to upload a %s: %s' % (\n        'picture' if isPicture else 'video' if isVideo else 'file', fileDir))\n    if not preparedFile:\n        preparedFile = _prepare_file(fileDir, file_)\n        if not preparedFile:\n            return preparedFile\n    fileSize, fileMd5, file_ = \\\n        preparedFile['fileSize'], preparedFile['fileMd5'], preparedFile['file_']\n    fileSymbol = 'pic' if isPicture else 'video' if isVideo else'doc'\n    chunks = int((fileSize - 1) / 524288) + 1\n    clientMediaId = int(time.time() * 1e4)\n    uploadMediaRequest = json.dumps(OrderedDict([\n        ('UploadType', 2),\n        ('BaseRequest', self.loginInfo['BaseRequest']),\n        ('ClientMediaId', clientMediaId),\n        ('TotalLen', fileSize),\n        ('StartPos', 0),\n        ('DataLen', fileSize),\n        ('MediaType', 4),\n        ('FromUserName', self.storageClass.userName),\n        ('ToUserName', toUserName),\n        ('FileMd5', fileMd5)]\n        ), separators = (',', ':'))\n    r = {'BaseResponse': {'Ret': -1005, 'ErrMsg': 'Empty file detected'}}\n    for chunk in range(chunks):\n        r = upload_chunk_file(self, fileDir, fileSymbol, fileSize,\n            file_, chunk, chunks, uploadMediaRequest)\n    file_.close()\n    if isinstance(r, dict):\n        return ReturnValue(r)\n    return ReturnValue(rawResponse=r)\n\ndef upload_chunk_file(core, fileDir, fileSymbol, fileSize,\n        file_, chunk, chunks, uploadMediaRequest):\n    url = core.loginInfo.get('fileUrl', core.loginInfo['url']) + \\\n        '/webwxuploadmedia?f=json'\n    # save it on server\n    cookiesList = {name:data for name,data in core.s.cookies.items()}\n    fileType = mimetypes.guess_type(fileDir)[0] or 'application/octet-stream'\n    fileName = utils.quote(os.path.basename(fileDir))\n    files = OrderedDict([\n        ('id', (None, 'WU_FILE_0')),\n        ('name', (None, fileName)),\n        ('type', (None, fileType)),\n        ('lastModifiedDate', (None, time.strftime('%a %b %d %Y %H:%M:%S GMT+0800 (CST)'))),\n        ('size', (None, str(fileSize))),\n        ('chunks', (None, None)),\n        ('chunk', (None, None)),\n        ('mediatype', (None, fileSymbol)),\n        ('uploadmediarequest', (None, uploadMediaRequest)),\n        ('webwx_data_ticket', (None, cookiesList['webwx_data_ticket'])),\n        ('pass_ticket', (None, core.loginInfo['pass_ticket'])),\n        ('filename' , (fileName, file_.read(524288), 'application/octet-stream'))])\n    if chunks == 1:\n        del files['chunk']; del files['chunks']\n    else:\n        files['chunk'], files['chunks'] = (None, str(chunk)), (None, str(chunks))\n    headers = { 'User-Agent' : config.USER_AGENT }\n    return core.s.post(url, files=files, headers=headers)\n\ndef send_file(self, fileDir, toUserName=None, mediaId=None, file_=None):\n    logger.debug('Request to send a file(mediaId: %s) to %s: %s' % (\n        mediaId, toUserName, fileDir))\n    if hasattr(fileDir, 'read'):\n        return ReturnValue({'BaseResponse': {\n            'ErrMsg': 'fileDir param should not be an opened file in send_file',\n            'Ret': -1005, }})\n    if toUserName is None:\n        toUserName = self.storageClass.userName\n    preparedFile = _prepare_file(fileDir, file_)\n    if not preparedFile:\n        return preparedFile\n    fileSize = preparedFile['fileSize']\n    if mediaId is None:\n        r = self.upload_file(fileDir, preparedFile=preparedFile)\n        if r:\n            mediaId = r['MediaId']\n        else:\n            return r\n    url = '%s/webwxsendappmsg?fun=async&f=json' % self.loginInfo['url']\n    data = {\n        'BaseRequest': self.loginInfo['BaseRequest'],\n        'Msg': {\n            'Type': 6,\n            'Content': (\"<appmsg appid='wxeb7ec651dd0aefa9' sdkver=''><title>%s</title>\" % os.path.basename(fileDir) +\n                \"<des></des><action></action><type>6</type><content></content><url></url><lowurl></lowurl>\" +\n                \"<appattach><totallen>%s</totallen><attachid>%s</attachid>\" % (str(fileSize), mediaId) +\n                \"<fileext>%s</fileext></appattach><extinfo></extinfo></appmsg>\" % os.path.splitext(fileDir)[1].replace('.','')),\n            'FromUserName': self.storageClass.userName,\n            'ToUserName': toUserName,\n            'LocalID': int(time.time() * 1e4),\n            'ClientMsgId': int(time.time() * 1e4), },\n        'Scene': 0, }\n    headers = {\n        'User-Agent': config.USER_AGENT,\n        'Content-Type': 'application/json;charset=UTF-8', }\n    r = self.s.post(url, headers=headers,\n        data=json.dumps(data, ensure_ascii=False).encode('utf8'))\n    return ReturnValue(rawResponse=r)\n\ndef send_image(self, fileDir=None, toUserName=None, mediaId=None, file_=None):\n    logger.debug('Request to send a image(mediaId: %s) to %s: %s' % (\n        mediaId, toUserName, fileDir))\n    if fileDir or file_:\n        if hasattr(fileDir, 'read'):\n            file_, fileDir = fileDir, None\n        if fileDir is None:\n            fileDir = 'tmp.jpg' # specific fileDir to send gifs\n    else:\n        return ReturnValue({'BaseResponse': {\n            'ErrMsg': 'Either fileDir or file_ should be specific',\n            'Ret': -1005, }})\n    if toUserName is None:\n        toUserName = self.storageClass.userName\n    if mediaId is None:\n        r = self.upload_file(fileDir, isPicture=not fileDir[-4:] == '.gif', file_=file_)\n        if r:\n            mediaId = r['MediaId']\n        else:\n            return r\n    url = '%s/webwxsendmsgimg?fun=async&f=json' % self.loginInfo['url']\n    data = {\n        'BaseRequest': self.loginInfo['BaseRequest'],\n        'Msg': {\n            'Type': 3,\n            'MediaId': mediaId,\n            'FromUserName': self.storageClass.userName,\n            'ToUserName': toUserName,\n            'LocalID': int(time.time() * 1e4),\n            'ClientMsgId': int(time.time() * 1e4), },\n        'Scene': 0, }\n    if fileDir[-4:] == '.gif':\n        url = '%s/webwxsendemoticon?fun=sys' % self.loginInfo['url']\n        data['Msg']['Type'] = 47\n        data['Msg']['EmojiFlag'] = 2\n    headers = {\n        'User-Agent': config.USER_AGENT,\n        'Content-Type': 'application/json;charset=UTF-8', }\n    r = self.s.post(url, headers=headers,\n        data=json.dumps(data, ensure_ascii=False).encode('utf8'))\n    return ReturnValue(rawResponse=r)\n\ndef send_video(self, fileDir=None, toUserName=None, mediaId=None, file_=None):\n    logger.debug('Request to send a video(mediaId: %s) to %s: %s' % (\n        mediaId, toUserName, fileDir))\n    if fileDir or file_:\n        if hasattr(fileDir, 'read'):\n            file_, fileDir = fileDir, None\n        if fileDir is None:\n            fileDir = 'tmp.mp4' # specific fileDir to send other formats\n    else:\n        return ReturnValue({'BaseResponse': {\n            'ErrMsg': 'Either fileDir or file_ should be specific',\n            'Ret': -1005, }})\n    if toUserName is None:\n        toUserName = self.storageClass.userName\n    if mediaId is None:\n        r = self.upload_file(fileDir, isVideo=True, file_=file_)\n        if r:\n            mediaId = r['MediaId']\n        else:\n            return r\n    url = '%s/webwxsendvideomsg?fun=async&f=json&pass_ticket=%s' % (\n        self.loginInfo['url'], self.loginInfo['pass_ticket'])\n    data = {\n        'BaseRequest': self.loginInfo['BaseRequest'],\n        'Msg': {\n            'Type'         : 43,\n            'MediaId'      : mediaId,\n            'FromUserName' : self.storageClass.userName,\n            'ToUserName'   : toUserName,\n            'LocalID'      : int(time.time() * 1e4),\n            'ClientMsgId'  : int(time.time() * 1e4), },\n        'Scene': 0, }\n    headers = {\n        'User-Agent' : config.USER_AGENT,\n        'Content-Type': 'application/json;charset=UTF-8', }\n    r = self.s.post(url, headers=headers,\n        data=json.dumps(data, ensure_ascii=False).encode('utf8'))\n    return ReturnValue(rawResponse=r)\n\ndef send(self, msg, toUserName=None, mediaId=None):\n    if not msg:\n        r = ReturnValue({'BaseResponse': {\n            'ErrMsg': 'No message.',\n            'Ret': -1005, }})\n    elif msg[:5] == '@fil@':\n        if mediaId is None:\n            r = self.send_file(msg[5:], toUserName)\n        else:\n            r = self.send_file(msg[5:], toUserName, mediaId)\n    elif msg[:5] == '@img@':\n        if mediaId is None:\n            r = self.send_image(msg[5:], toUserName)\n        else:\n            r = self.send_image(msg[5:], toUserName, mediaId)\n    elif msg[:5] == '@msg@':\n        r = self.send_msg(msg[5:], toUserName)\n    elif msg[:5] == '@vid@':\n        if mediaId is None:\n            r = self.send_video(msg[5:], toUserName)\n        else:\n            r = self.send_video(msg[5:], toUserName, mediaId)\n    else:\n        r = self.send_msg(msg, toUserName)\n    return r\n\ndef revoke(self, msgId, toUserName, localId=None):\n    url = '%s/webwxrevokemsg' % self.loginInfo['url']\n    data = {\n        'BaseRequest': self.loginInfo['BaseRequest'],\n        \"ClientMsgId\": localId or str(time.time() * 1e3),\n        \"SvrMsgId\": msgId,\n        \"ToUserName\": toUserName}\n    headers = {\n        'ContentType': 'application/json; charset=UTF-8',\n        'User-Agent' : config.USER_AGENT }\n    r = self.s.post(url, headers=headers,\n        data=json.dumps(data, ensure_ascii=False).encode('utf8'))\n    return ReturnValue(rawResponse=r)\n", "description": "A complete and graceful API for Wechat. \u5fae\u4fe1\u4e2a\u4eba\u53f7\u63a5\u53e3\u3001\u5fae\u4fe1\u673a\u5668\u4eba\u53ca\u547d\u4ee4\u884c\u5fae\u4fe1\uff0c\u4e09\u5341\u884c\u5373\u53ef\u81ea\u5b9a\u4e49\u4e2a\u4eba\u53f7\u673a\u5668\u4eba\u3002", "file_name": "messages.py", "id": "a331846eb795b699214e82ac88bc982b", "language": "Python", "project_name": "ItChat", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/littlecodersh-ItChat/littlecodersh-ItChat-8622c3c/itchat/components/messages.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:54:42Z", "url": "https://github.com/littlecodersh/ItChat", "wiki": true}