{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2016, Gregory Shulov (gregory.shulov@gmail.com)\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: infini_export_client\nversion_added: 2.3\nshort_description: Create, Delete or Modify NFS Client(s) for existing exports on Infinibox\ndescription:\n    - This module creates, deletes or modifys NFS client(s) for existing exports on Infinibox.\nauthor: Gregory Shulov (@GR360RY)\noptions:\n  client:\n    description:\n      - Client IP or Range. Ranges can be defined as follows\n        192.168.0.1-192.168.0.254.\n    aliases: ['name']\n    required: true\n  state:\n    description:\n      - Creates/Modifies client when present and removes when absent.\n    required: false\n    default: \"present\"\n    choices: [ \"present\", \"absent\" ]\n  access_mode:\n    description:\n      - Read Write or Read Only Access.\n    choices: [ \"RW\", \"RO\" ]\n    default: RW\n    required: false\n  no_root_squash:\n    description:\n      - Don't squash root user to anonymous. Will be set to \"no\" on creation if not specified explicitly.\n    choices: [ \"yes\", \"no\" ]\n    default: no\n    required: false\n  export:\n    description:\n      - Name of the export.\n    required: true\nextends_documentation_fragment:\n    - infinibox\nrequirements:\n    - munch\n'''\n\nEXAMPLES = '''\n- name: Make sure nfs client 10.0.0.1 is configured for export. Allow root access\n  infini_export_client:\n    client: 10.0.0.1\n    access_mode: RW\n    no_root_squash: yes\n    export: /data\n    user: admin\n    password: secret\n    system: ibox001\n\n- name: Add multiple clients with RO access. Squash root privileges\n  infini_export_client:\n    client: \"{{ item }}\"\n    access_mode: RO\n    no_root_squash: no\n    export: /data\n    user: admin\n    password: secret\n    system: ibox001\n  with_items:\n    - 10.0.0.2\n    - 10.0.0.3\n'''\n\nRETURN = '''\n'''\n\ntry:\n    from munch import Munch, unmunchify\n    HAS_MUNCH = True\nexcept ImportError:\n    HAS_MUNCH = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.infinibox import HAS_INFINISDK, api_wrapper, get_system, infinibox_argument_spec\n\n\ndef transform(d):\n    return frozenset(d.items())\n\n\n@api_wrapper\ndef get_export(module, system):\n    \"\"\"Retrun export if found. Fail module if not found\"\"\"\n\n    try:\n        export = system.exports.get(export_path=module.params['export'])\n    except:\n        module.fail_json(msg=\"Export with export path {} not found\".format(module.params['export']))\n\n    return export\n\n\n@api_wrapper\ndef update_client(module, export):\n    \"\"\"Update export client list\"\"\"\n\n    changed = False\n\n    client = module.params['client']\n    access_mode = module.params['access_mode']\n    no_root_squash = module.params['no_root_squash']\n\n    client_list = export.get_permissions()\n    client_not_in_list = True\n\n    for index, item in enumerate(client_list):\n        if item.client == client:\n            client_not_in_list = False\n            if item.access != access_mode:\n                item.access = access_mode\n                changed = True\n            if item.no_root_squash is not no_root_squash:\n                item.no_root_squash = no_root_squash\n                changed = True\n\n    \n    \n    if client_not_in_list:\n        changed = True\n        client_list.append(Munch(client=client, access=access_mode, no_root_squash=no_root_squash))\n\n    if changed:\n        for index, item in enumerate(client_list):\n            client_list[index] = unmunchify(item)\n        if not module.check_mode:\n            export.update_permissions(client_list)\n\n    module.exit_json(changed=changed)\n\n\n@api_wrapper\ndef delete_client(module, export):\n    \"\"\"Update export client list\"\"\"\n\n    changed = False\n\n    client = module.params['client']\n    client_list = export.get_permissions()\n\n    for index, item in enumerate(client_list):\n        if item.client == client:\n            changed = True\n            del client_list[index]\n\n    if changed:\n        for index, item in enumerate(client_list):\n            client_list[index] = unmunchify(item)\n        if not module.check_mode:\n            export.update_permissions(client_list)\n\n    module.exit_json(changed=changed)\n\n\ndef main():\n    argument_spec = infinibox_argument_spec()\n    argument_spec.update(\n        dict(\n            client=dict(required=True),\n            access_mode=dict(choices=['RO', 'RW'], default='RW'),\n            no_root_squash=dict(type='bool', default='no'),\n            state=dict(default='present', choices=['present', 'absent']),\n            export=dict(required=True)\n        )\n    )\n\n    module = AnsibleModule(argument_spec, supports_check_mode=True)\n\n    if not HAS_INFINISDK:\n        module.fail_json(msg='infinisdk is required for this module')\n    if not HAS_MUNCH:\n        module.fail_json(msg='the python munch library is required for this module')\n\n    system = get_system(module)\n    export = get_export(module, system)\n\n    if module.params['state'] == 'present':\n        update_client(module, export)\n    else:\n        delete_client(module, export)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "   retrun export found  fail module found         try          export   system exports get(export path module params  export  )     except          module fail json(msg  export export path    found  format(module params  export  ))      return export    api wrapper def update client(module  export)         update export client list         changed   false      client   module params  client       access mode   module params  access mode       root squash   module params  root squash        client list   export get permissions()     client list   true      index  item enumerate(client list)          item client    client              client list   false             item access    access mode                  item access   access mode                 changed   true             item root squash root squash                  item root squash   root squash                 changed   true        if access mode root squash passed arguments module        use access mode rw value set root squash false     client list          changed   true         client list append(munch(client client  access access mode  root squash root squash))      changed          index  item enumerate(client list)              client list index    unmunchify(item)         module check mode              export update permissions(client list)      module exit json(changed changed)    api wrapper def delete client(module  export)         update export client list             module  infini export client version added  2 3 short description  create  delete modify nfs client(s) existing exports infinibox description        this module creates  deletes modifys nfs client(s) existing exports infinibox  author  gregory shulov ( gr360ry) options    client      description          client ip range  ranges defined follows         192 168 0 1 192 168 0 254      aliases    name       required  true   state      description          creates modifies client present removes absent      required  false     default   present      choices     present    absent      access mode      description          read write read only access      choices     rw    ro        default  rw     required  false   root squash      description          don squash root user anonymous  will set   creation specified explicitly      choices     yes           default      required  false   export      description          name export      required  true extends documentation fragment        infinibox requirements        munch      examples         name  make sure nfs client 10 0 0 1 configured export  allow root access   infini export client      client  10 0 0 1     access mode  rw     root squash  yes     export   data     user  admin     password  secret     system  ibox001    name  add multiple clients ro access  squash root privileges   infini export client      client      item         access mode  ro     root squash      export   data     user  admin     password  secret     system  ibox001   items        10 0 0 2       10 0 0 3      return               usr bin python        coding  utf 8        (c) 2016  gregory shulov (gregory shulov gmail com)    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    if access mode root squash passed arguments module     use access mode rw value set root squash false ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2016, Gregory Shulov (gregory.shulov@gmail.com)\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: infini_export_client\nversion_added: 2.3\nshort_description: Create, Delete or Modify NFS Client(s) for existing exports on Infinibox\ndescription:\n    - This module creates, deletes or modifys NFS client(s) for existing exports on Infinibox.\nauthor: Gregory Shulov (@GR360RY)\noptions:\n  client:\n    description:\n      - Client IP or Range. Ranges can be defined as follows\n        192.168.0.1-192.168.0.254.\n    aliases: ['name']\n    required: true\n  state:\n    description:\n      - Creates/Modifies client when present and removes when absent.\n    required: false\n    default: \"present\"\n    choices: [ \"present\", \"absent\" ]\n  access_mode:\n    description:\n      - Read Write or Read Only Access.\n    choices: [ \"RW\", \"RO\" ]\n    default: RW\n    required: false\n  no_root_squash:\n    description:\n      - Don't squash root user to anonymous. Will be set to \"no\" on creation if not specified explicitly.\n    choices: [ \"yes\", \"no\" ]\n    default: no\n    required: false\n  export:\n    description:\n      - Name of the export.\n    required: true\nextends_documentation_fragment:\n    - infinibox\nrequirements:\n    - munch\n'''\n\nEXAMPLES = '''\n- name: Make sure nfs client 10.0.0.1 is configured for export. Allow root access\n  infini_export_client:\n    client: 10.0.0.1\n    access_mode: RW\n    no_root_squash: yes\n    export: /data\n    user: admin\n    password: secret\n    system: ibox001\n\n- name: Add multiple clients with RO access. Squash root privileges\n  infini_export_client:\n    client: \"{{ item }}\"\n    access_mode: RO\n    no_root_squash: no\n    export: /data\n    user: admin\n    password: secret\n    system: ibox001\n  with_items:\n    - 10.0.0.2\n    - 10.0.0.3\n'''\n\nRETURN = '''\n'''\n\ntry:\n    from munch import Munch, unmunchify\n    HAS_MUNCH = True\nexcept ImportError:\n    HAS_MUNCH = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.infinibox import HAS_INFINISDK, api_wrapper, get_system, infinibox_argument_spec\n\n\ndef transform(d):\n    return frozenset(d.items())\n\n\n@api_wrapper\ndef get_export(module, system):\n    \"\"\"Retrun export if found. Fail module if not found\"\"\"\n\n    try:\n        export = system.exports.get(export_path=module.params['export'])\n    except:\n        module.fail_json(msg=\"Export with export path {} not found\".format(module.params['export']))\n\n    return export\n\n\n@api_wrapper\ndef update_client(module, export):\n    \"\"\"Update export client list\"\"\"\n\n    changed = False\n\n    client = module.params['client']\n    access_mode = module.params['access_mode']\n    no_root_squash = module.params['no_root_squash']\n\n    client_list = export.get_permissions()\n    client_not_in_list = True\n\n    for index, item in enumerate(client_list):\n        if item.client == client:\n            client_not_in_list = False\n            if item.access != access_mode:\n                item.access = access_mode\n                changed = True\n            if item.no_root_squash is not no_root_squash:\n                item.no_root_squash = no_root_squash\n                changed = True\n\n    # If access_mode and/or no_root_squash not passed as arguments to the module,\n    # use access_mode with RW value and set no_root_squash to False\n    if client_not_in_list:\n        changed = True\n        client_list.append(Munch(client=client, access=access_mode, no_root_squash=no_root_squash))\n\n    if changed:\n        for index, item in enumerate(client_list):\n            client_list[index] = unmunchify(item)\n        if not module.check_mode:\n            export.update_permissions(client_list)\n\n    module.exit_json(changed=changed)\n\n\n@api_wrapper\ndef delete_client(module, export):\n    \"\"\"Update export client list\"\"\"\n\n    changed = False\n\n    client = module.params['client']\n    client_list = export.get_permissions()\n\n    for index, item in enumerate(client_list):\n        if item.client == client:\n            changed = True\n            del client_list[index]\n\n    if changed:\n        for index, item in enumerate(client_list):\n            client_list[index] = unmunchify(item)\n        if not module.check_mode:\n            export.update_permissions(client_list)\n\n    module.exit_json(changed=changed)\n\n\ndef main():\n    argument_spec = infinibox_argument_spec()\n    argument_spec.update(\n        dict(\n            client=dict(required=True),\n            access_mode=dict(choices=['RO', 'RW'], default='RW'),\n            no_root_squash=dict(type='bool', default='no'),\n            state=dict(default='present', choices=['present', 'absent']),\n            export=dict(required=True)\n        )\n    )\n\n    module = AnsibleModule(argument_spec, supports_check_mode=True)\n\n    if not HAS_INFINISDK:\n        module.fail_json(msg='infinisdk is required for this module')\n    if not HAS_MUNCH:\n        module.fail_json(msg='the python munch library is required for this module')\n\n    system = get_system(module)\n    export = get_export(module, system)\n\n    if module.params['state'] == 'present':\n        update_client(module, export)\n    else:\n        delete_client(module, export)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "infini_export_client.py", "id": "40225b3bd5558c425f4a2da2583d60a0", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/storage/infinidat/infini_export_client.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}