{"author": "faif", "code": "\n# -*- coding: utf-8 -*-\n\n\"\"\"\nReference: https://en.wikipedia.org/wiki/Delegation_pattern\nAuthor: https://github.com/IuryAlves\n\n*TL;DR80\nAllows object composition to achieve the same code reuse as inheritance.\n\"\"\"\n\n\nclass Delegator(object):\n    \"\"\"\n    >>> delegator = Delegator(Delegate())\n    >>> delegator.do_something(\"nothing\")\n    'Doing nothing'\n    >>> delegator.do_anything()\n\n    \"\"\"\n\n    def __init__(self, delegate):\n        self.delegate = delegate\n\n    def __getattr__(self, name):\n        def wrapper(*args, **kwargs):\n            if hasattr(self.delegate, name):\n                attr = getattr(self.delegate, name)\n                if callable(attr):\n                    return attr(*args, **kwargs)\n        return wrapper\n\n\nclass Delegate(object):\n\n    def do_something(self, something):\n        return \"Doing %s\" % something\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "comments": "    reference  https   en wikipedia org wiki delegation pattern author  https   github com iuryalves   tl dr80 allows object composition achieve code reuse inheritance        class delegator(object)                  delegator   delegator(delegate())         delegator something( nothing )      doing nothing          delegator anything()              usr bin env python        coding  utf 8     ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nReference: https://en.wikipedia.org/wiki/Delegation_pattern\nAuthor: https://github.com/IuryAlves\n\n*TL;DR80\nAllows object composition to achieve the same code reuse as inheritance.\n\"\"\"\n\n\nclass Delegator(object):\n    \"\"\"\n    >>> delegator = Delegator(Delegate())\n    >>> delegator.do_something(\"nothing\")\n    'Doing nothing'\n    >>> delegator.do_anything()\n\n    \"\"\"\n\n    def __init__(self, delegate):\n        self.delegate = delegate\n\n    def __getattr__(self, name):\n        def wrapper(*args, **kwargs):\n            if hasattr(self.delegate, name):\n                attr = getattr(self.delegate, name)\n                if callable(attr):\n                    return attr(*args, **kwargs)\n        return wrapper\n\n\nclass Delegate(object):\n\n    def do_something(self, something):\n        return \"Doing %s\" % something\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "description": "A collection of design patterns/idioms in Python", "file_name": "delegation_pattern.py", "id": "964b914c21bd542c611a26bc875c1e38", "language": "Python", "project_name": "python-patterns", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/faif-python-patterns/faif-python-patterns-e9a08d0/fundamental/delegation_pattern.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:55:31Z", "url": "https://github.com/faif/python-patterns", "wiki": true}