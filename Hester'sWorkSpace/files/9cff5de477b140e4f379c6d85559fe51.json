{"author": "nvbn", "code": "\n\nimport pytest\nfrom thefuck.shells import Fish\n\n\n@pytest.mark.usefixtures('isfile', 'no_memoize', 'no_cache')\nclass TestFish(object):\n    @pytest.fixture\n    def shell(self):\n        return Fish()\n\n    @pytest.fixture(autouse=True)\n    def Popen(self, mocker):\n        mock = mocker.patch('thefuck.shells.fish.Popen')\n        mock.return_value.stdout.read.side_effect = [(\n            b'cd\\nfish_config\\nfuck\\nfunced\\nfuncsave\\ngrep\\nhistory\\nll\\nls\\n'\n            b'man\\nmath\\npopd\\npushd\\nruby'),\n            b'alias fish_key_reader /usr/bin/fish_key_reader\\nalias g git']\n        return mock\n\n    @pytest.mark.parametrize('key, value', [\n        ('TF_OVERRIDDEN_ALIASES', 'cut,git,sed'),  \n        ('THEFUCK_OVERRIDDEN_ALIASES', 'cut,git,sed'),\n        ('THEFUCK_OVERRIDDEN_ALIASES', 'cut, git, sed'),\n        ('THEFUCK_OVERRIDDEN_ALIASES', ' cut,\\tgit,sed\\n'),\n        ('THEFUCK_OVERRIDDEN_ALIASES', '\\ncut,\\n\\ngit,\\tsed\\r')])\n    def test_get_overridden_aliases(self, shell, os_environ, key, value):\n        os_environ[key] = value\n        assert shell._get_overridden_aliases() == {'cd', 'cut', 'git', 'grep',\n                                                   'ls', 'man', 'open', 'sed'}\n\n    @pytest.mark.parametrize('before, after', [\n        ('cd', 'cd'),\n        ('pwd', 'pwd'),\n        ('fuck', 'fish -ic \"fuck\"'),\n        ('find', 'find'),\n        ('funced', 'fish -ic \"funced\"'),\n        ('grep', 'grep'),\n        ('awk', 'awk'),\n        ('math \"2 + 2\"', r'fish -ic \"math \\\"2 + 2\\\"\"'),\n        ('man', 'man'),\n        ('open', 'open'),\n        ('vim', 'vim'),\n        ('ll', 'fish -ic \"ll\"'),\n        ('ls', 'ls'),\n        ('g', 'git')])\n    def test_from_shell(self, before, after, shell):\n        assert shell.from_shell(before) == after\n\n    def test_to_shell(self, shell):\n        assert shell.to_shell('pwd') == 'pwd'\n\n    def test_and_(self, shell):\n        assert shell.and_('foo', 'bar') == 'foo; and bar'\n\n    def test_or_(self, shell):\n        assert shell.or_('foo', 'bar') == 'foo; or bar'\n\n    def test_get_aliases(self, shell):\n        assert shell.get_aliases() == {'fish_config': 'fish_config',\n                                       'fuck': 'fuck',\n                                       'funced': 'funced',\n                                       'funcsave': 'funcsave',\n                                       'history': 'history',\n                                       'll': 'll',\n                                       'math': 'math',\n                                       'popd': 'popd',\n                                       'pushd': 'pushd',\n                                       'ruby': 'ruby',\n                                       'g': 'git',\n                                       'fish_key_reader': '/usr/bin/fish_key_reader'}\n\n    def test_app_alias(self, shell):\n        assert 'function fuck' in shell.app_alias('fuck')\n        assert 'function FUCK' in shell.app_alias('FUCK')\n        assert 'thefuck' in shell.app_alias('fuck')\n        assert 'TF_SHELL=fish' in shell.app_alias('fuck')\n        assert 'TF_ALIAS=fuck PYTHONIOENCODING' in shell.app_alias('fuck')\n        assert 'PYTHONIOENCODING=utf-8 thefuck' in shell.app_alias('fuck')\n\n    def test_app_alias_alter_history(self, settings, shell):\n        settings.alter_history = True\n        assert 'builtin history delete' in shell.app_alias('FUCK')\n        assert 'builtin history merge' in shell.app_alias('FUCK')\n        settings.alter_history = False\n        assert 'builtin history delete' not in shell.app_alias('FUCK')\n        assert 'builtin history merge' not in shell.app_alias('FUCK')\n\n    def test_get_history(self, history_lines, shell):\n        history_lines(['- cmd: ls', '  when: 1432613911',\n                       '- cmd: rm', '  when: 1432613916'])\n        assert list(shell.get_history()) == ['ls', 'rm']\n\n    @pytest.mark.parametrize('entry, entry_utf8', [\n        ('ls', '- cmd: ls\\n   when: 1430707243\\n'),\n        (u'echo caf\u00e9', '- cmd: echo caf\u00e9\\n   when: 1430707243\\n')])\n    def test_put_to_history(self, entry, entry_utf8, builtins_open, mocker, shell):\n        mocker.patch('thefuck.shells.fish.time', return_value=1430707243.3517463)\n        shell.put_to_history(entry)\n        builtins_open.return_value.__enter__.return_value. \\\n            write.assert_called_once_with(entry_utf8)\n\n    def test_how_to_configure(self, shell, config_exists):\n        config_exists.return_value = True\n        assert shell.how_to_configure().can_configure_automatically\n\n    def test_how_to_configure_when_config_not_found(self, shell,\n                                                    config_exists):\n        config_exists.return_value = False\n        assert not shell.how_to_configure().can_configure_automatically\n", "comments": "# -*- coding: utf-8 -*-\n# legacy\n", "content": "# -*- coding: utf-8 -*-\n\nimport pytest\nfrom thefuck.shells import Fish\n\n\n@pytest.mark.usefixtures('isfile', 'no_memoize', 'no_cache')\nclass TestFish(object):\n    @pytest.fixture\n    def shell(self):\n        return Fish()\n\n    @pytest.fixture(autouse=True)\n    def Popen(self, mocker):\n        mock = mocker.patch('thefuck.shells.fish.Popen')\n        mock.return_value.stdout.read.side_effect = [(\n            b'cd\\nfish_config\\nfuck\\nfunced\\nfuncsave\\ngrep\\nhistory\\nll\\nls\\n'\n            b'man\\nmath\\npopd\\npushd\\nruby'),\n            b'alias fish_key_reader /usr/bin/fish_key_reader\\nalias g git']\n        return mock\n\n    @pytest.mark.parametrize('key, value', [\n        ('TF_OVERRIDDEN_ALIASES', 'cut,git,sed'),  # legacy\n        ('THEFUCK_OVERRIDDEN_ALIASES', 'cut,git,sed'),\n        ('THEFUCK_OVERRIDDEN_ALIASES', 'cut, git, sed'),\n        ('THEFUCK_OVERRIDDEN_ALIASES', ' cut,\\tgit,sed\\n'),\n        ('THEFUCK_OVERRIDDEN_ALIASES', '\\ncut,\\n\\ngit,\\tsed\\r')])\n    def test_get_overridden_aliases(self, shell, os_environ, key, value):\n        os_environ[key] = value\n        assert shell._get_overridden_aliases() == {'cd', 'cut', 'git', 'grep',\n                                                   'ls', 'man', 'open', 'sed'}\n\n    @pytest.mark.parametrize('before, after', [\n        ('cd', 'cd'),\n        ('pwd', 'pwd'),\n        ('fuck', 'fish -ic \"fuck\"'),\n        ('find', 'find'),\n        ('funced', 'fish -ic \"funced\"'),\n        ('grep', 'grep'),\n        ('awk', 'awk'),\n        ('math \"2 + 2\"', r'fish -ic \"math \\\"2 + 2\\\"\"'),\n        ('man', 'man'),\n        ('open', 'open'),\n        ('vim', 'vim'),\n        ('ll', 'fish -ic \"ll\"'),\n        ('ls', 'ls'),\n        ('g', 'git')])\n    def test_from_shell(self, before, after, shell):\n        assert shell.from_shell(before) == after\n\n    def test_to_shell(self, shell):\n        assert shell.to_shell('pwd') == 'pwd'\n\n    def test_and_(self, shell):\n        assert shell.and_('foo', 'bar') == 'foo; and bar'\n\n    def test_or_(self, shell):\n        assert shell.or_('foo', 'bar') == 'foo; or bar'\n\n    def test_get_aliases(self, shell):\n        assert shell.get_aliases() == {'fish_config': 'fish_config',\n                                       'fuck': 'fuck',\n                                       'funced': 'funced',\n                                       'funcsave': 'funcsave',\n                                       'history': 'history',\n                                       'll': 'll',\n                                       'math': 'math',\n                                       'popd': 'popd',\n                                       'pushd': 'pushd',\n                                       'ruby': 'ruby',\n                                       'g': 'git',\n                                       'fish_key_reader': '/usr/bin/fish_key_reader'}\n\n    def test_app_alias(self, shell):\n        assert 'function fuck' in shell.app_alias('fuck')\n        assert 'function FUCK' in shell.app_alias('FUCK')\n        assert 'thefuck' in shell.app_alias('fuck')\n        assert 'TF_SHELL=fish' in shell.app_alias('fuck')\n        assert 'TF_ALIAS=fuck PYTHONIOENCODING' in shell.app_alias('fuck')\n        assert 'PYTHONIOENCODING=utf-8 thefuck' in shell.app_alias('fuck')\n\n    def test_app_alias_alter_history(self, settings, shell):\n        settings.alter_history = True\n        assert 'builtin history delete' in shell.app_alias('FUCK')\n        assert 'builtin history merge' in shell.app_alias('FUCK')\n        settings.alter_history = False\n        assert 'builtin history delete' not in shell.app_alias('FUCK')\n        assert 'builtin history merge' not in shell.app_alias('FUCK')\n\n    def test_get_history(self, history_lines, shell):\n        history_lines(['- cmd: ls', '  when: 1432613911',\n                       '- cmd: rm', '  when: 1432613916'])\n        assert list(shell.get_history()) == ['ls', 'rm']\n\n    @pytest.mark.parametrize('entry, entry_utf8', [\n        ('ls', '- cmd: ls\\n   when: 1430707243\\n'),\n        (u'echo caf\u00e9', '- cmd: echo caf\u00e9\\n   when: 1430707243\\n')])\n    def test_put_to_history(self, entry, entry_utf8, builtins_open, mocker, shell):\n        mocker.patch('thefuck.shells.fish.time', return_value=1430707243.3517463)\n        shell.put_to_history(entry)\n        builtins_open.return_value.__enter__.return_value. \\\n            write.assert_called_once_with(entry_utf8)\n\n    def test_how_to_configure(self, shell, config_exists):\n        config_exists.return_value = True\n        assert shell.how_to_configure().can_configure_automatically\n\n    def test_how_to_configure_when_config_not_found(self, shell,\n                                                    config_exists):\n        config_exists.return_value = False\n        assert not shell.how_to_configure().can_configure_automatically\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_fish.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/shells/test_fish.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}