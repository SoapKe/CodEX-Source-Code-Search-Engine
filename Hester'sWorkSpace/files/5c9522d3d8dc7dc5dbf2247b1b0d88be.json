{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\n\n\nclass KaraoketvIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?karaoketv\\.co\\.il/[^/]+/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.karaoketv.co.il/%D7%A9%D7%99%D7%A8%D7%99_%D7%A7%D7%A8%D7%99%D7%95%D7%A7%D7%99/58356/%D7%90%D7%99%D7%96%D7%95%D7%9F',\n        'info_dict': {\n            'id': '58356',\n            'ext': 'flv',\n            'title': '\u05e7\u05e8\u05d9\u05d5\u05e7\u05d9 \u05e9\u05dc \u05d0\u05d9\u05d6\u05d5\u05df',\n        },\n        'params': {\n            \n            'skip_download': True,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n        api_page_url = self._search_regex(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>https?://www\\.karaoke\\.co\\.il/api_play\\.php\\?.+?)\\1',\n            webpage, 'API play URL', group='url')\n\n        api_page = self._download_webpage(api_page_url, video_id)\n        video_cdn_url = self._search_regex(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>https?://www\\.video-cdn\\.com/embed/iframe/.+?)\\1',\n            api_page, 'video cdn URL', group='url')\n\n        video_cdn = self._download_webpage(video_cdn_url, video_id)\n        play_path = self._parse_json(\n            self._search_regex(\n                r'var\\s+options\\s*=\\s*({.+?});', video_cdn, 'options'),\n            video_id)['clip']['url']\n\n        settings = self._parse_json(\n            self._search_regex(\n                r'var\\s+settings\\s*=\\s*({.+?});', video_cdn, 'servers', default='{}'),\n            video_id, fatal=False) or {}\n\n        servers = settings.get('servers')\n        if not servers or not isinstance(servers, list):\n            servers = ('wowzail.video-cdn.com:80/vodcdn', )\n\n        formats = [{\n            'url': 'rtmp://%s' % server if not server.startswith('rtmp') else server,\n            'play_path': play_path,\n            'app': 'vodcdn',\n            'page_url': video_cdn_url,\n            'player_url': 'http://www.video-cdn.com/assets/flowplayer/flowplayer.commercial-3.2.18.swf',\n            'rtmp_real_time': True,\n            'ext': 'flv',\n        } for server in servers]\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# rtmp download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\n\n\nclass KaraoketvIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?karaoketv\\.co\\.il/[^/]+/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.karaoketv.co.il/%D7%A9%D7%99%D7%A8%D7%99_%D7%A7%D7%A8%D7%99%D7%95%D7%A7%D7%99/58356/%D7%90%D7%99%D7%96%D7%95%D7%9F',\n        'info_dict': {\n            'id': '58356',\n            'ext': 'flv',\n            'title': '\u05e7\u05e8\u05d9\u05d5\u05e7\u05d9 \u05e9\u05dc \u05d0\u05d9\u05d6\u05d5\u05df',\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n        api_page_url = self._search_regex(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>https?://www\\.karaoke\\.co\\.il/api_play\\.php\\?.+?)\\1',\n            webpage, 'API play URL', group='url')\n\n        api_page = self._download_webpage(api_page_url, video_id)\n        video_cdn_url = self._search_regex(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>https?://www\\.video-cdn\\.com/embed/iframe/.+?)\\1',\n            api_page, 'video cdn URL', group='url')\n\n        video_cdn = self._download_webpage(video_cdn_url, video_id)\n        play_path = self._parse_json(\n            self._search_regex(\n                r'var\\s+options\\s*=\\s*({.+?});', video_cdn, 'options'),\n            video_id)['clip']['url']\n\n        settings = self._parse_json(\n            self._search_regex(\n                r'var\\s+settings\\s*=\\s*({.+?});', video_cdn, 'servers', default='{}'),\n            video_id, fatal=False) or {}\n\n        servers = settings.get('servers')\n        if not servers or not isinstance(servers, list):\n            servers = ('wowzail.video-cdn.com:80/vodcdn', )\n\n        formats = [{\n            'url': 'rtmp://%s' % server if not server.startswith('rtmp') else server,\n            'play_path': play_path,\n            'app': 'vodcdn',\n            'page_url': video_cdn_url,\n            'player_url': 'http://www.video-cdn.com/assets/flowplayer/flowplayer.commercial-3.2.18.swf',\n            'rtmp_real_time': True,\n            'ext': 'flv',\n        } for server in servers]\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "karaoketv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/karaoketv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}