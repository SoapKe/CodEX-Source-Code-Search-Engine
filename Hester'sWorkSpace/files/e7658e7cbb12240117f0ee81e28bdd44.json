{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2015, Alejandro Guirao <lekumberri@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: taiga_issue\nshort_description: Creates/deletes an issue in a Taiga Project Management Platform\ndescription:\n  - Creates/deletes an issue in a Taiga Project Management Platform (U(https://taiga.io)).\n  - An issue is identified by the combination of project, issue subject and issue type.\n  - This module implements the creation or deletion of issues (not the update).\nversion_added: \"2.0\"\noptions:\n  taiga_host:\n    description:\n      - The hostname of the Taiga instance.\n    default: https://api.taiga.io\n  project:\n    description:\n      - Name of the project containing the issue. Must exist previously.\n    required: True\n  subject:\n    description:\n      - The issue subject.\n    required: True\n  issue_type:\n    description:\n      - The issue type. Must exist previously.\n    required: True\n  priority:\n    description:\n      - The issue priority. Must exist previously.\n    default: Normal\n  status:\n    description:\n      - The issue status. Must exist previously.\n    default: New\n  severity:\n    description:\n      - The issue severity. Must exist previously.\n    default: Normal\n  description:\n    description:\n      - The issue description.\n    default: \"\"\n  attachment:\n    description:\n      - Path to a file to be attached to the issue.\n  attachment_description:\n    description:\n      - A string describing the file to be attached to the issue.\n    default: \"\"\n  tags:\n    description:\n      - A lists of tags to be assigned to the issue.\n    default: []\n  state:\n    description:\n      - Whether the issue should be present or not.\n    choices: [\"present\", \"absent\"]\n    default: present\nauthor: Alejandro Guirao (@lekum)\nrequirements: [python-taiga]\nnotes:\n- The authentication is achieved either by the environment variable TAIGA_TOKEN or by the pair of environment variables TAIGA_USERNAME and TAIGA_PASSWORD\n'''\n\nEXAMPLES = '''\n\n- taiga_issue:\n    taiga_host: https://mytaigahost.example.com\n    project: myproject\n    subject: An error has been found\n    issue_type: Bug\n    priority: High\n    status: New\n    severity: Important\n    description: An error has been found. Please check the attached error log for details.\n    attachment: /path/to/error.log\n    attachment_description: Error log file\n    tags:\n      - Error\n      - Needs manual check\n    state: present\n\n\n- taiga_issue:\n    taiga_host: https://mytaigahost.example.com\n    project: myproject\n    subject: An error has been found\n    issue_type: Bug\n    state: absent\n'''\n\nRETURN = '''# '''\nfrom os import getenv\nfrom os.path import isfile\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\ntry:\n    from taiga import TaigaAPI\n    from taiga.exceptions import TaigaException\n    TAIGA_MODULE_IMPORTED = True\nexcept ImportError:\n    TAIGA_MODULE_IMPORTED = False\n\n\ndef manage_issue(module, taiga_host, project_name, issue_subject, issue_priority,\n                 issue_status, issue_type, issue_severity, issue_description,\n                 issue_attachment, issue_attachment_description,\n                 issue_tags, state, check_mode=False):\n    \n\n    changed = False\n\n    try:\n        token = getenv('TAIGA_TOKEN')\n        if token:\n            api = TaigaAPI(host=taiga_host, token=token)\n        else:\n            api = TaigaAPI(host=taiga_host)\n            username = getenv('TAIGA_USERNAME')\n            password = getenv('TAIGA_PASSWORD')\n            if not any([username, password]):\n                return (False, changed, \"Missing credentials\", {})\n            api.auth(username=username, password=password)\n\n        user_id = api.me().id\n        project_list = filter(lambda x: x.name == project_name, api.projects.list(member=user_id))\n        if len(project_list) != 1:\n            return (False, changed, \"Unable to find project %s\" % project_name, {})\n        project = project_list[0]\n        project_id = project.id\n\n        priority_list = filter(lambda x: x.name == issue_priority, api.priorities.list(project=project_id))\n        if len(priority_list) != 1:\n            return (False, changed, \"Unable to find issue priority %s for project %s\" % (issue_priority, project_name), {})\n        priority_id = priority_list[0].id\n\n        status_list = filter(lambda x: x.name == issue_status, api.issue_statuses.list(project=project_id))\n        if len(status_list) != 1:\n            return (False, changed, \"Unable to find issue status %s for project %s\" % (issue_status, project_name), {})\n        status_id = status_list[0].id\n\n        type_list = filter(lambda x: x.name == issue_type, project.list_issue_types())\n        if len(type_list) != 1:\n            return (False, changed, \"Unable to find issue type %s for project %s\" % (issue_type, project_name), {})\n        type_id = type_list[0].id\n\n        severity_list = filter(lambda x: x.name == issue_severity, project.list_severities())\n        if len(severity_list) != 1:\n            return (False, changed, \"Unable to find severity %s for project %s\" % (issue_severity, project_name), {})\n        severity_id = severity_list[0].id\n\n        issue = {\n            \"project\": project_name,\n            \"subject\": issue_subject,\n            \"priority\": issue_priority,\n            \"status\": issue_status,\n            \"type\": issue_type,\n            \"severity\": issue_severity,\n            \"description\": issue_description,\n            \"tags\": issue_tags,\n        }\n\n        \n        matching_issue_list = filter(lambda x: x.subject == issue_subject and x.type == type_id, project.list_issues())\n        matching_issue_list_len = len(matching_issue_list)\n\n        if matching_issue_list_len == 0:\n            \n            if state == \"present\":\n                \n                changed = True\n                if not check_mode:\n                    \n                    new_issue = project.add_issue(issue_subject, priority_id, status_id, type_id, severity_id, tags=issue_tags, description=issue_description)\n                    if issue_attachment:\n                        new_issue.attach(issue_attachment, description=issue_attachment_description)\n                        issue[\"attachment\"] = issue_attachment\n                        issue[\"attachment_description\"] = issue_attachment_description\n                return (True, changed, \"Issue created\", issue)\n\n            else:\n                \n                return (True, changed, \"Issue does not exist\", {})\n\n        elif matching_issue_list_len == 1:\n            \n            if state == \"absent\":\n                \n                changed = True\n                if not check_mode:\n                    \n                    matching_issue_list[0].delete()\n                return (True, changed, \"Issue deleted\", {})\n\n            else:\n                \n                return (True, changed, \"Issue already exists\", {})\n\n        else:\n            \n            return (False, changed, \"More than one issue with subject %s in project %s\" % (issue_subject, project_name), {})\n\n    except TaigaException as exc:\n        msg = \"An exception happened: %s\" % to_native(exc)\n        return (False, changed, msg, {})\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            taiga_host=dict(required=False, default=\"https://api.taiga.io\"),\n            project=dict(required=True),\n            subject=dict(required=True),\n            issue_type=dict(required=True),\n            priority=dict(required=False, default=\"Normal\"),\n            status=dict(required=False, default=\"New\"),\n            severity=dict(required=False, default=\"Normal\"),\n            description=dict(required=False, default=\"\"),\n            attachment=dict(required=False, default=None),\n            attachment_description=dict(required=False, default=\"\"),\n            tags=dict(required=False, default=[], type='list'),\n            state=dict(required=False, choices=['present', 'absent'],\n                       default='present'),\n        ),\n        supports_check_mode=True\n    )\n\n    if not TAIGA_MODULE_IMPORTED:\n        msg = \"This module needs python-taiga module\"\n        module.fail_json(msg=msg)\n\n    taiga_host = module.params['taiga_host']\n    project_name = module.params['project']\n    issue_subject = module.params['subject']\n    issue_priority = module.params['priority']\n    issue_status = module.params['status']\n    issue_type = module.params['issue_type']\n    issue_severity = module.params['severity']\n    issue_description = module.params['description']\n    issue_attachment = module.params['attachment']\n    issue_attachment_description = module.params['attachment_description']\n    if issue_attachment:\n        if not isfile(issue_attachment):\n            msg = \"%s is not a file\" % issue_attachment\n            module.fail_json(msg=msg)\n    issue_tags = module.params['tags']\n    state = module.params['state']\n\n    return_status, changed, msg, issue_attr_dict = manage_issue(\n        module,\n        taiga_host,\n        project_name,\n        issue_subject,\n        issue_priority,\n        issue_status,\n        issue_type,\n        issue_severity,\n        issue_description,\n        issue_attachment,\n        issue_attachment_description,\n        issue_tags,\n        state,\n        check_mode=module.check_mode\n    )\n    if return_status:\n        if len(issue_attr_dict) > 0:\n            module.exit_json(changed=changed, msg=msg, issue=issue_attr_dict)\n        else:\n            module.exit_json(changed=changed, msg=msg)\n    else:\n        module.fail_json(msg=msg)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        method creates deletes issues depending whether exist state desired      the credentials passed via environment variables            taiga token           taiga username taiga password      returns tuple elements            a boolean representing success operation           a descriptive message           a dict issue attributes  case issue creation  otherwise empty dict                  module  taiga issue short description  creates deletes issue taiga project management platform description      creates deletes issue taiga project management platform (u(https   taiga io))      an issue identified combination project  issue subject issue type      this module implements creation deletion issues (not update)  version added   2 0  options    taiga host      description          the hostname taiga instance      default  https   api taiga io   project      description          name project containing issue  must exist previously      required  true   subject      description          the issue subject      required  true   issue type      description          the issue type  must exist previously      required  true   priority      description          the issue priority  must exist previously      default  normal   status      description          the issue status  must exist previously      default  new   severity      description          the issue severity  must exist previously      default  normal   description      description          the issue description      default       attachment      description          path file attached issue    attachment description      description          a string describing file attached issue      default       tags      description          a lists tags assigned issue      default       state      description          whether issue present      choices    present    absent       default  present author  alejandro guirao ( lekum) requirements   python taiga  notes    the authentication achieved either environment variable taiga token pair environment variables taiga username taiga password      examples         create issue hosted taiga environment attach error log   taiga issue      taiga host  https   mytaigahost example com     project  myproject     subject  an error found     issue type  bug     priority  high     status  new     severity  important     description  an error found  please check attached error log details      attachment   path error log     attachment description  error log file     tags          error         needs manual check     state  present    deletes previously created issue   taiga issue      taiga host  https   mytaigahost example com     project  myproject     subject  an error found     issue type  bug     state  absent      return                usr bin python        coding  utf 8        (c) 2015  alejandro guirao  lekumberri gmail com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    create issue hosted taiga environment attach error log    deletes previously created issue    an issue identified project name  issue subject issue type    the issue exist project    this implies change    create issue    if exist  nothing    the issue exists project    this implies change    delete issue    do nothing    more 1 matching issue ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2015, Alejandro Guirao <lekumberri@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: taiga_issue\nshort_description: Creates/deletes an issue in a Taiga Project Management Platform\ndescription:\n  - Creates/deletes an issue in a Taiga Project Management Platform (U(https://taiga.io)).\n  - An issue is identified by the combination of project, issue subject and issue type.\n  - This module implements the creation or deletion of issues (not the update).\nversion_added: \"2.0\"\noptions:\n  taiga_host:\n    description:\n      - The hostname of the Taiga instance.\n    default: https://api.taiga.io\n  project:\n    description:\n      - Name of the project containing the issue. Must exist previously.\n    required: True\n  subject:\n    description:\n      - The issue subject.\n    required: True\n  issue_type:\n    description:\n      - The issue type. Must exist previously.\n    required: True\n  priority:\n    description:\n      - The issue priority. Must exist previously.\n    default: Normal\n  status:\n    description:\n      - The issue status. Must exist previously.\n    default: New\n  severity:\n    description:\n      - The issue severity. Must exist previously.\n    default: Normal\n  description:\n    description:\n      - The issue description.\n    default: \"\"\n  attachment:\n    description:\n      - Path to a file to be attached to the issue.\n  attachment_description:\n    description:\n      - A string describing the file to be attached to the issue.\n    default: \"\"\n  tags:\n    description:\n      - A lists of tags to be assigned to the issue.\n    default: []\n  state:\n    description:\n      - Whether the issue should be present or not.\n    choices: [\"present\", \"absent\"]\n    default: present\nauthor: Alejandro Guirao (@lekum)\nrequirements: [python-taiga]\nnotes:\n- The authentication is achieved either by the environment variable TAIGA_TOKEN or by the pair of environment variables TAIGA_USERNAME and TAIGA_PASSWORD\n'''\n\nEXAMPLES = '''\n# Create an issue in the my hosted Taiga environment and attach an error log\n- taiga_issue:\n    taiga_host: https://mytaigahost.example.com\n    project: myproject\n    subject: An error has been found\n    issue_type: Bug\n    priority: High\n    status: New\n    severity: Important\n    description: An error has been found. Please check the attached error log for details.\n    attachment: /path/to/error.log\n    attachment_description: Error log file\n    tags:\n      - Error\n      - Needs manual check\n    state: present\n\n# Deletes the previously created issue\n- taiga_issue:\n    taiga_host: https://mytaigahost.example.com\n    project: myproject\n    subject: An error has been found\n    issue_type: Bug\n    state: absent\n'''\n\nRETURN = '''# '''\nfrom os import getenv\nfrom os.path import isfile\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\ntry:\n    from taiga import TaigaAPI\n    from taiga.exceptions import TaigaException\n    TAIGA_MODULE_IMPORTED = True\nexcept ImportError:\n    TAIGA_MODULE_IMPORTED = False\n\n\ndef manage_issue(module, taiga_host, project_name, issue_subject, issue_priority,\n                 issue_status, issue_type, issue_severity, issue_description,\n                 issue_attachment, issue_attachment_description,\n                 issue_tags, state, check_mode=False):\n    \"\"\"\n    Method that creates/deletes issues depending whether they exist and the state desired\n\n    The credentials should be passed via environment variables:\n        - TAIGA_TOKEN\n        - TAIGA_USERNAME and TAIGA_PASSWORD\n\n    Returns a tuple with these elements:\n        - A boolean representing the success of the operation\n        - A descriptive message\n        - A dict with the issue attributes, in case of issue creation, otherwise empty dict\n    \"\"\"\n\n    changed = False\n\n    try:\n        token = getenv('TAIGA_TOKEN')\n        if token:\n            api = TaigaAPI(host=taiga_host, token=token)\n        else:\n            api = TaigaAPI(host=taiga_host)\n            username = getenv('TAIGA_USERNAME')\n            password = getenv('TAIGA_PASSWORD')\n            if not any([username, password]):\n                return (False, changed, \"Missing credentials\", {})\n            api.auth(username=username, password=password)\n\n        user_id = api.me().id\n        project_list = filter(lambda x: x.name == project_name, api.projects.list(member=user_id))\n        if len(project_list) != 1:\n            return (False, changed, \"Unable to find project %s\" % project_name, {})\n        project = project_list[0]\n        project_id = project.id\n\n        priority_list = filter(lambda x: x.name == issue_priority, api.priorities.list(project=project_id))\n        if len(priority_list) != 1:\n            return (False, changed, \"Unable to find issue priority %s for project %s\" % (issue_priority, project_name), {})\n        priority_id = priority_list[0].id\n\n        status_list = filter(lambda x: x.name == issue_status, api.issue_statuses.list(project=project_id))\n        if len(status_list) != 1:\n            return (False, changed, \"Unable to find issue status %s for project %s\" % (issue_status, project_name), {})\n        status_id = status_list[0].id\n\n        type_list = filter(lambda x: x.name == issue_type, project.list_issue_types())\n        if len(type_list) != 1:\n            return (False, changed, \"Unable to find issue type %s for project %s\" % (issue_type, project_name), {})\n        type_id = type_list[0].id\n\n        severity_list = filter(lambda x: x.name == issue_severity, project.list_severities())\n        if len(severity_list) != 1:\n            return (False, changed, \"Unable to find severity %s for project %s\" % (issue_severity, project_name), {})\n        severity_id = severity_list[0].id\n\n        issue = {\n            \"project\": project_name,\n            \"subject\": issue_subject,\n            \"priority\": issue_priority,\n            \"status\": issue_status,\n            \"type\": issue_type,\n            \"severity\": issue_severity,\n            \"description\": issue_description,\n            \"tags\": issue_tags,\n        }\n\n        # An issue is identified by the project_name, the issue_subject and the issue_type\n        matching_issue_list = filter(lambda x: x.subject == issue_subject and x.type == type_id, project.list_issues())\n        matching_issue_list_len = len(matching_issue_list)\n\n        if matching_issue_list_len == 0:\n            # The issue does not exist in the project\n            if state == \"present\":\n                # This implies a change\n                changed = True\n                if not check_mode:\n                    # Create the issue\n                    new_issue = project.add_issue(issue_subject, priority_id, status_id, type_id, severity_id, tags=issue_tags, description=issue_description)\n                    if issue_attachment:\n                        new_issue.attach(issue_attachment, description=issue_attachment_description)\n                        issue[\"attachment\"] = issue_attachment\n                        issue[\"attachment_description\"] = issue_attachment_description\n                return (True, changed, \"Issue created\", issue)\n\n            else:\n                # If does not exist, do nothing\n                return (True, changed, \"Issue does not exist\", {})\n\n        elif matching_issue_list_len == 1:\n            # The issue exists in the project\n            if state == \"absent\":\n                # This implies a change\n                changed = True\n                if not check_mode:\n                    # Delete the issue\n                    matching_issue_list[0].delete()\n                return (True, changed, \"Issue deleted\", {})\n\n            else:\n                # Do nothing\n                return (True, changed, \"Issue already exists\", {})\n\n        else:\n            # More than 1 matching issue\n            return (False, changed, \"More than one issue with subject %s in project %s\" % (issue_subject, project_name), {})\n\n    except TaigaException as exc:\n        msg = \"An exception happened: %s\" % to_native(exc)\n        return (False, changed, msg, {})\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            taiga_host=dict(required=False, default=\"https://api.taiga.io\"),\n            project=dict(required=True),\n            subject=dict(required=True),\n            issue_type=dict(required=True),\n            priority=dict(required=False, default=\"Normal\"),\n            status=dict(required=False, default=\"New\"),\n            severity=dict(required=False, default=\"Normal\"),\n            description=dict(required=False, default=\"\"),\n            attachment=dict(required=False, default=None),\n            attachment_description=dict(required=False, default=\"\"),\n            tags=dict(required=False, default=[], type='list'),\n            state=dict(required=False, choices=['present', 'absent'],\n                       default='present'),\n        ),\n        supports_check_mode=True\n    )\n\n    if not TAIGA_MODULE_IMPORTED:\n        msg = \"This module needs python-taiga module\"\n        module.fail_json(msg=msg)\n\n    taiga_host = module.params['taiga_host']\n    project_name = module.params['project']\n    issue_subject = module.params['subject']\n    issue_priority = module.params['priority']\n    issue_status = module.params['status']\n    issue_type = module.params['issue_type']\n    issue_severity = module.params['severity']\n    issue_description = module.params['description']\n    issue_attachment = module.params['attachment']\n    issue_attachment_description = module.params['attachment_description']\n    if issue_attachment:\n        if not isfile(issue_attachment):\n            msg = \"%s is not a file\" % issue_attachment\n            module.fail_json(msg=msg)\n    issue_tags = module.params['tags']\n    state = module.params['state']\n\n    return_status, changed, msg, issue_attr_dict = manage_issue(\n        module,\n        taiga_host,\n        project_name,\n        issue_subject,\n        issue_priority,\n        issue_status,\n        issue_type,\n        issue_severity,\n        issue_description,\n        issue_attachment,\n        issue_attachment_description,\n        issue_tags,\n        state,\n        check_mode=module.check_mode\n    )\n    if return_status:\n        if len(issue_attr_dict) > 0:\n            module.exit_json(changed=changed, msg=msg, issue=issue_attr_dict)\n        else:\n            module.exit_json(changed=changed, msg=msg)\n    else:\n        module.fail_json(msg=msg)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "taiga_issue.py", "id": "e7658e7cbb12240117f0ee81e28bdd44", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/web_infrastructure/taiga_issue.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}