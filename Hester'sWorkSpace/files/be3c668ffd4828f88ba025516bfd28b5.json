{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    ExtractorError,\n)\n\n\nclass UplynkIE(InfoExtractor):\n    IE_NAME = 'uplynk'\n    _VALID_URL = r'https?://.*?\\.uplynk\\.com/(?P<path>ext/[0-9a-f]{32}/(?P<external_id>[^/?&]+)|(?P<id>[0-9a-f]{32}))\\.(?:m3u8|json)(?:.*?\\bpbs=(?P<session_id>[^&]+))?'\n    _TEST = {\n        'url': 'http://content.uplynk.com/e89eaf2ce9054aa89d92ddb2d817a52e.m3u8',\n        'info_dict': {\n            'id': 'e89eaf2ce9054aa89d92ddb2d817a52e',\n            'ext': 'mp4',\n            'title': '030816-kgo-530pm-solar-eclipse-vid_web.mp4',\n            'uploader_id': '4413701bf5a1488db55b767f8ae9d4fa',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }\n\n    def _extract_uplynk_info(self, uplynk_content_url):\n        path, external_id, video_id, session_id = re.match(UplynkIE._VALID_URL, uplynk_content_url).groups()\n        display_id = video_id or external_id\n        formats = self._extract_m3u8_formats(\n            'http://content.uplynk.com/%s.m3u8' % path,\n            display_id, 'mp4', 'm3u8_native')\n        if session_id:\n            for f in formats:\n                f['extra_param_to_segment_url'] = 'pbs=' + session_id\n        self._sort_formats(formats)\n        asset = self._download_json('http://content.uplynk.com/player/assetinfo/%s.json' % path, display_id)\n        if asset.get('error') == 1:\n            raise ExtractorError('% said: %s' % (self.IE_NAME, asset['msg']), expected=True)\n\n        return {\n            'id': asset['asset'],\n            'title': asset['desc'],\n            'thumbnail': asset.get('default_poster_url'),\n            'duration': float_or_none(asset.get('duration')),\n            'uploader_id': asset.get('owner'),\n            'formats': formats,\n        }\n\n    def _real_extract(self, url):\n        return self._extract_uplynk_info(url)\n\n\nclass UplynkPreplayIE(UplynkIE):\n    IE_NAME = 'uplynk:preplay'\n    _VALID_URL = r'https?://.*?\\.uplynk\\.com/preplay2?/(?P<path>ext/[0-9a-f]{32}/(?P<external_id>[^/?&]+)|(?P<id>[0-9a-f]{32}))\\.json'\n    _TEST = None\n\n    def _real_extract(self, url):\n        path, external_id, video_id = re.match(self._VALID_URL, url).groups()\n        display_id = video_id or external_id\n        preplay = self._download_json(url, display_id)\n        content_url = 'http://content.uplynk.com/%s.m3u8' % path\n        session_id = preplay.get('sid')\n        if session_id:\n            content_url += '?pbs=' + session_id\n        return self._extract_uplynk_info(content_url)\n", "comments": "# coding: utf-8\n# m3u8 download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    ExtractorError,\n)\n\n\nclass UplynkIE(InfoExtractor):\n    IE_NAME = 'uplynk'\n    _VALID_URL = r'https?://.*?\\.uplynk\\.com/(?P<path>ext/[0-9a-f]{32}/(?P<external_id>[^/?&]+)|(?P<id>[0-9a-f]{32}))\\.(?:m3u8|json)(?:.*?\\bpbs=(?P<session_id>[^&]+))?'\n    _TEST = {\n        'url': 'http://content.uplynk.com/e89eaf2ce9054aa89d92ddb2d817a52e.m3u8',\n        'info_dict': {\n            'id': 'e89eaf2ce9054aa89d92ddb2d817a52e',\n            'ext': 'mp4',\n            'title': '030816-kgo-530pm-solar-eclipse-vid_web.mp4',\n            'uploader_id': '4413701bf5a1488db55b767f8ae9d4fa',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }\n\n    def _extract_uplynk_info(self, uplynk_content_url):\n        path, external_id, video_id, session_id = re.match(UplynkIE._VALID_URL, uplynk_content_url).groups()\n        display_id = video_id or external_id\n        formats = self._extract_m3u8_formats(\n            'http://content.uplynk.com/%s.m3u8' % path,\n            display_id, 'mp4', 'm3u8_native')\n        if session_id:\n            for f in formats:\n                f['extra_param_to_segment_url'] = 'pbs=' + session_id\n        self._sort_formats(formats)\n        asset = self._download_json('http://content.uplynk.com/player/assetinfo/%s.json' % path, display_id)\n        if asset.get('error') == 1:\n            raise ExtractorError('% said: %s' % (self.IE_NAME, asset['msg']), expected=True)\n\n        return {\n            'id': asset['asset'],\n            'title': asset['desc'],\n            'thumbnail': asset.get('default_poster_url'),\n            'duration': float_or_none(asset.get('duration')),\n            'uploader_id': asset.get('owner'),\n            'formats': formats,\n        }\n\n    def _real_extract(self, url):\n        return self._extract_uplynk_info(url)\n\n\nclass UplynkPreplayIE(UplynkIE):\n    IE_NAME = 'uplynk:preplay'\n    _VALID_URL = r'https?://.*?\\.uplynk\\.com/preplay2?/(?P<path>ext/[0-9a-f]{32}/(?P<external_id>[^/?&]+)|(?P<id>[0-9a-f]{32}))\\.json'\n    _TEST = None\n\n    def _real_extract(self, url):\n        path, external_id, video_id = re.match(self._VALID_URL, url).groups()\n        display_id = video_id or external_id\n        preplay = self._download_json(url, display_id)\n        content_url = 'http://content.uplynk.com/%s.m3u8' % path\n        session_id = preplay.get('sid')\n        if session_id:\n            content_url += '?pbs=' + session_id\n        return self._extract_uplynk_info(content_url)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "uplynk.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/uplynk.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}