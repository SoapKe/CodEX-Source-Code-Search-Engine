{"author": "faif", "code": "\n# -*- coding: utf-8 -*-\n\n\"\"\"\nLazily-evaluated property pattern in Python.\n\nhttps://en.wikipedia.org/wiki/Lazy_evaluation\n\n*References:\nbottle\nhttps://github.com/bottlepy/bottle/blob/cafc15419cbb4a6cb748e6ecdccf92893bb25ce5/bottle.py\ndjango\nhttps://github.com/django/django/blob/ffd18732f3ee9e6f0374aff9ccf350d85187fac2/django/utils/functional.py\npip\nhttps://github.com/pypa/pip/blob/cb75cca785629e15efb46c35903827b3eae13481/pip/utils/__init__.py\npyramimd\nhttps://github.com/Pylons/pyramid/blob/7909e9503cdfc6f6e84d2c7ace1d3c03ca1d8b73/pyramid/decorator.py\nwerkzeug\nhttps://github.com/pallets/werkzeug/blob/5a2bf35441006d832ab1ed5a31963cbc366c99ac/werkzeug/utils.py\n\n*TL;DR80\nDelays the eval of an expr until its value is needed and avoids repeated evals.\n\"\"\"\n\nfrom __future__ import print_function\nimport functools\n\n\nclass lazy_property(object):\n\n    def __init__(self, function):\n        self.function = function\n        functools.update_wrapper(self, function)\n\n    def __get__(self, obj, type_):\n        if obj is None:\n            return self\n        val = self.function(obj)\n        obj.__dict__[self.function.__name__] = val\n        return val\n\n\ndef lazy_property2(fn):\n    attr = '_lazy__' + fn.__name__\n\n    @property\n    def _lazy_property(self):\n        if not hasattr(self, attr):\n            setattr(self, attr, fn(self))\n        return getattr(self, attr)\n    return _lazy_property\n\n\nclass Person(object):\n\n    def __init__(self, name, occupation):\n        self.name = name\n        self.occupation = occupation\n        self.call_count2 = 0\n\n    @lazy_property\n    def relatives(self):\n        \n        relatives = \"Many relatives.\"\n        return relatives\n\n    @lazy_property2\n    def parents(self):\n        self.call_count2 += 1\n        return \"Father and mother\"\n\n\ndef main():\n    Jhon = Person('Jhon', 'Coder')\n    print(u\"Name: {0}    Occupation: {1}\".format(Jhon.name, Jhon.occupation))\n    print(u\"Before we access `relatives`:\")\n    print(Jhon.__dict__)\n    print(u\"Jhon's relatives: {0}\".format(Jhon.relatives))\n    print(u\"After we've accessed `relatives`:\")\n    print(Jhon.__dict__)\n    print(Jhon.parents)\n    print(Jhon.__dict__)\n    print(Jhon.parents)\n    print(Jhon.call_count2)\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n", "comments": "    lazily evaluated property pattern python   https   en wikipedia org wiki lazy evaluation   references  bottle https   github com bottlepy bottle blob cafc15419cbb4a6cb748e6ecdccf92893bb25ce5 bottle py l270 django https   github com django django blob ffd18732f3ee9e6f0374aff9ccf350d85187fac2 django utils functional py l19 pip https   github com pypa pip blob cb75cca785629e15efb46c35903827b3eae13481 pip utils   init   py l821 pyramimd https   github com pylons pyramid blob 7909e9503cdfc6f6e84d2c7ace1d3c03ca1d8b73 pyramid decorator py l4 werkzeug https   github com pallets werkzeug blob 5a2bf35441006d832ab1ed5a31963cbc366c99ac werkzeug utils py l35   tl dr80 delays eval expr value needed avoids repeated evals          usr bin env python        coding  utf 8       l270   l19   l821   l4   l35    get relatives  let assume costs much time       output        name  jhon    occupation  coder    before access  relatives        call count2   0   name    jhon    occupation    coder      jhon relatives  many relatives     after accessed  relatives        relatives    many relatives     call count2   0   name    jhon    occupation    coder      father mother       lazy  parents    father mother    relatives    many relatives     call count2   1   name    jhon    occupation    coder      father mother    1 ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nLazily-evaluated property pattern in Python.\n\nhttps://en.wikipedia.org/wiki/Lazy_evaluation\n\n*References:\nbottle\nhttps://github.com/bottlepy/bottle/blob/cafc15419cbb4a6cb748e6ecdccf92893bb25ce5/bottle.py#L270\ndjango\nhttps://github.com/django/django/blob/ffd18732f3ee9e6f0374aff9ccf350d85187fac2/django/utils/functional.py#L19\npip\nhttps://github.com/pypa/pip/blob/cb75cca785629e15efb46c35903827b3eae13481/pip/utils/__init__.py#L821\npyramimd\nhttps://github.com/Pylons/pyramid/blob/7909e9503cdfc6f6e84d2c7ace1d3c03ca1d8b73/pyramid/decorator.py#L4\nwerkzeug\nhttps://github.com/pallets/werkzeug/blob/5a2bf35441006d832ab1ed5a31963cbc366c99ac/werkzeug/utils.py#L35\n\n*TL;DR80\nDelays the eval of an expr until its value is needed and avoids repeated evals.\n\"\"\"\n\nfrom __future__ import print_function\nimport functools\n\n\nclass lazy_property(object):\n\n    def __init__(self, function):\n        self.function = function\n        functools.update_wrapper(self, function)\n\n    def __get__(self, obj, type_):\n        if obj is None:\n            return self\n        val = self.function(obj)\n        obj.__dict__[self.function.__name__] = val\n        return val\n\n\ndef lazy_property2(fn):\n    attr = '_lazy__' + fn.__name__\n\n    @property\n    def _lazy_property(self):\n        if not hasattr(self, attr):\n            setattr(self, attr, fn(self))\n        return getattr(self, attr)\n    return _lazy_property\n\n\nclass Person(object):\n\n    def __init__(self, name, occupation):\n        self.name = name\n        self.occupation = occupation\n        self.call_count2 = 0\n\n    @lazy_property\n    def relatives(self):\n        # Get all relatives, let's assume that it costs much time.\n        relatives = \"Many relatives.\"\n        return relatives\n\n    @lazy_property2\n    def parents(self):\n        self.call_count2 += 1\n        return \"Father and mother\"\n\n\ndef main():\n    Jhon = Person('Jhon', 'Coder')\n    print(u\"Name: {0}    Occupation: {1}\".format(Jhon.name, Jhon.occupation))\n    print(u\"Before we access `relatives`:\")\n    print(Jhon.__dict__)\n    print(u\"Jhon's relatives: {0}\".format(Jhon.relatives))\n    print(u\"After we've accessed `relatives`:\")\n    print(Jhon.__dict__)\n    print(Jhon.parents)\n    print(Jhon.__dict__)\n    print(Jhon.parents)\n    print(Jhon.call_count2)\n\n\nif __name__ == '__main__':\n    main()\n\n### OUTPUT ###\n# Name: Jhon    Occupation: Coder\n# Before we access `relatives`:\n# {'call_count2': 0, 'name': 'Jhon', 'occupation': 'Coder'}\n# Jhon's relatives: Many relatives.\n# After we've accessed `relatives`:\n# {'relatives': 'Many relatives.', 'call_count2': 0, 'name': 'Jhon', 'occupation': 'Coder'}\n# Father and mother\n# {'_lazy__parents': 'Father and mother', 'relatives': 'Many relatives.', 'call_count2': 1, 'name': 'Jhon', 'occupation': 'Coder'}\n# Father and mother\n# 1\n", "description": "A collection of design patterns/idioms in Python", "file_name": "lazy_evaluation.py", "id": "3ba5fe1e402031ceab2abef8ded4a713", "language": "Python", "project_name": "python-patterns", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/faif-python-patterns/faif-python-patterns-20bd570/creational/lazy_evaluation.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:52:50Z", "url": "https://github.com/faif/python-patterns", "wiki": true}