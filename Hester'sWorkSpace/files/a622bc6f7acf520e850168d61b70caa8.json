{"author": "facebookresearch", "code": "\n\n Copyright (c) 2017-present, Facebook, Inc.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\n\"\"\"Given a full set of results (boxes, masks, or keypoints) on the 2017 COCO\ntest set, this script extracts the results subset that corresponds to 2017\ntest-dev. The test-dev subset can then be submitted to the COCO evaluation\nserver.\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport argparse\nimport json\nimport os\nimport sys\n\nfrom datasets.dataset_catalog import ANN_FN\nfrom datasets.dataset_catalog import DATASETS\nfrom utils.timer import Timer\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        '--json', dest='json_file',\n        help='detections json file',\n        default='', type=str)\n    parser.add_argument(\n        '--output-dir', dest='output_dir',\n        help='output directory',\n        default='/tmp', type=str)\n    if len(sys.argv) == 1:\n        parser.print_help()\n        sys.exit(1)\n    args = parser.parse_args()\n    return args\n\n\ndef convert(json_file, output_dir):\n    print('Reading: {}'.format(json_file))\n    with open(json_file, 'r') as fid:\n        dt = json.load(fid)\n    print('done!')\n\n    test_image_info = DATASETS['coco_2017_test'][ANN_FN]\n    with open(test_image_info, 'r') as fid:\n        info_test = json.load(fid)\n    image_test = info_test['images']\n    image_test_id = [i['id'] for i in image_test]\n    print('{} has {} images'.format(test_image_info, len(image_test_id)))\n\n    test_dev_image_info = DATASETS['coco_2017_test-dev'][ANN_FN]\n    with open(test_dev_image_info, 'r') as fid:\n        info_testdev = json.load(fid)\n    image_testdev = info_testdev['images']\n    image_testdev_id = [i['id'] for i in image_testdev]\n    print('{} has {} images'.format(test_dev_image_info, len(image_testdev_id)))\n\n    dt_testdev = []\n    print('Filtering test-dev from test...')\n    t = Timer()\n    t.tic()\n    for i in range(len(dt)):\n        if i % 1000 == 0:\n            print('{}/{}'.format(i, len(dt)))\n        if dt[i]['image_id'] in image_testdev_id:\n            dt_testdev.append(dt[i])\n    print('Done filtering ({:2}s)!'.format(t.toc()))\n\n    filename, file_extension = os.path.splitext(os.path.basename(json_file))\n    filename = filename + '_test-dev'\n    filename = os.path.join(output_dir, filename + file_extension)\n    with open(filename, 'w') as fid:\n        info_test = json.dump(dt_testdev, fid)\n    print('Done writing: {}!'.format(filename))\n\n\nif __name__ == '__main__':\n    opts = parse_args()\n    convert(opts.json_file, opts.output_dir)\n", "comments": "   given full set results (boxes  masks  keypoints) 2017 coco test set  script extracts results subset corresponds 2017 test dev  the test dev subset submitted coco evaluation server          usr bin env python2    copyright (c) 2017 present  facebook  inc        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                  ", "content": "#!/usr/bin/env python2\n\n# Copyright (c) 2017-present, Facebook, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n##############################################################################\n\n\"\"\"Given a full set of results (boxes, masks, or keypoints) on the 2017 COCO\ntest set, this script extracts the results subset that corresponds to 2017\ntest-dev. The test-dev subset can then be submitted to the COCO evaluation\nserver.\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport argparse\nimport json\nimport os\nimport sys\n\nfrom datasets.dataset_catalog import ANN_FN\nfrom datasets.dataset_catalog import DATASETS\nfrom utils.timer import Timer\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        '--json', dest='json_file',\n        help='detections json file',\n        default='', type=str)\n    parser.add_argument(\n        '--output-dir', dest='output_dir',\n        help='output directory',\n        default='/tmp', type=str)\n    if len(sys.argv) == 1:\n        parser.print_help()\n        sys.exit(1)\n    args = parser.parse_args()\n    return args\n\n\ndef convert(json_file, output_dir):\n    print('Reading: {}'.format(json_file))\n    with open(json_file, 'r') as fid:\n        dt = json.load(fid)\n    print('done!')\n\n    test_image_info = DATASETS['coco_2017_test'][ANN_FN]\n    with open(test_image_info, 'r') as fid:\n        info_test = json.load(fid)\n    image_test = info_test['images']\n    image_test_id = [i['id'] for i in image_test]\n    print('{} has {} images'.format(test_image_info, len(image_test_id)))\n\n    test_dev_image_info = DATASETS['coco_2017_test-dev'][ANN_FN]\n    with open(test_dev_image_info, 'r') as fid:\n        info_testdev = json.load(fid)\n    image_testdev = info_testdev['images']\n    image_testdev_id = [i['id'] for i in image_testdev]\n    print('{} has {} images'.format(test_dev_image_info, len(image_testdev_id)))\n\n    dt_testdev = []\n    print('Filtering test-dev from test...')\n    t = Timer()\n    t.tic()\n    for i in range(len(dt)):\n        if i % 1000 == 0:\n            print('{}/{}'.format(i, len(dt)))\n        if dt[i]['image_id'] in image_testdev_id:\n            dt_testdev.append(dt[i])\n    print('Done filtering ({:2}s)!'.format(t.toc()))\n\n    filename, file_extension = os.path.splitext(os.path.basename(json_file))\n    filename = filename + '_test-dev'\n    filename = os.path.join(output_dir, filename + file_extension)\n    with open(filename, 'w') as fid:\n        info_test = json.dump(dt_testdev, fid)\n    print('Done writing: {}!'.format(filename))\n\n\nif __name__ == '__main__':\n    opts = parse_args()\n    convert(opts.json_file, opts.output_dir)\n", "description": "FAIR's research platform for object detection research, implementing popular algorithms like Mask R-CNN and RetinaNet.", "file_name": "generate_testdev_from_test.py", "id": "a622bc6f7acf520e850168d61b70caa8", "language": "Python", "project_name": "Detectron", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/facebookresearch-Detectron/facebookresearch-Detectron-958b0ad/tools/generate_testdev_from_test.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:01:25Z", "url": "https://github.com/facebookresearch/Detectron", "wiki": false}