{"author": "tgalal", "code": "from .message_media import MediaMessageProtocolEntity\nfrom yowsup.common.tools import WATools\nfrom yowsup.common.tools import MimeTools\nimport os\nclass DownloadableMediaMessageProtocolEntity(MediaMessageProtocolEntity):\n    '''\n    <message t=\"{{TIME_STAMP}}\" from=\"{{CONTACT_JID}}\"\n        offline=\"{{OFFLINE}}\" type=\"text\" id=\"{{MESSAGE_ID}}\" notify=\"{{NOTIFY_NAME}}\">\n        <media type=\"{{DOWNLOADABLE_MEDIA_TYPE: (image | audio | video)}}\"\n            mimetype=\"{{MIME_TYPE}}\"\n            filehash=\"{{FILE_HASH}}\"\n            url=\"{{DOWNLOAD_URL}}\"\n            ip=\"{{IP}}\"\n            size=\"{{MEDIA SIZE}}\"\n            file=\"{{FILENAME}}\"\n\n            > {{THUMBNAIL_RAWDATA (JPEG?)}}\n        </media>\n    </message>\n    '''\n    def __init__(self, mediaType,\n            mimeType, fileHash, url, ip, size, fileName, mediaKey = None,\n            _id = None, _from = None, to = None, notify = None, timestamp = None,\n            participant = None, preview = None, offline = None, retry = None):\n\n        super(DownloadableMediaMessageProtocolEntity, self).__init__(mediaType, _id, _from, to, notify, timestamp, participant, preview, offline, retry)\n        self.setDownloadableMediaProps(mimeType, fileHash, url, ip, size, fileName, mediaKey)\n\n    def __str__(self):\n        out  = super(DownloadableMediaMessageProtocolEntity, self).__str__()\n        out += \"MimeType: %s\\n\" % self.mimeType\n        out += \"File Hash: %s\\n\" % self.fileHash.encode('hex')\n        out += \"URL: %s\\n\" % self.url\n        out += \"IP: %s\\n\" % self.ip\n        out += \"File Size: %s\\n\" % self.size\n        out += \"File name: %s\\n\" % self.fileName\n        return out\n\n    def getMediaSize(self):\n        return self.size\n\n    def getMediaUrl(self):\n        return self.url\n\n    def getMimeType(self):\n        return self.mimeType\n\n    def setDownloadableMediaProps(self, mimeType, fileHash, url, ip, size, fileName, mediaKey):\n        self.mimeType   = mimeType\n        self.fileHash   = fileHash\n        self.url        = url\n        self.ip         = ip\n        self.size       = int(size)\n        self.fileName   = fileName\n        self.mediaKey   = mediaKey\n\n    def toProtocolTreeNode(self):\n        node = super(DownloadableMediaMessageProtocolEntity, self).toProtocolTreeNode()\n        mediaNode = node.getChild(\"media\")\n        mediaNode.setAttribute(\"mimetype\",  self.mimeType)\n        mediaNode.setAttribute(\"filehash\",  self.fileHash)\n        mediaNode.setAttribute(\"url\",       self.url)\n        if self.ip:\n            mediaNode.setAttribute(\"ip\",        self.ip)\n        mediaNode.setAttribute(\"size\",      str(self.size))\n        mediaNode.setAttribute(\"file\",      self.fileName)\n        if self.mediaKey:\n            mediaNode.setAttribute(\"mediakey\", self.mediaKey)\n\n        return node\n\n    def isEncrypted(self):\n        return self.mediaKey is not None\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        entity = MediaMessageProtocolEntity.fromProtocolTreeNode(node)\n        entity.__class__ = DownloadableMediaMessageProtocolEntity\n        mediaNode = node.getChild(\"media\")\n        entity.setDownloadableMediaProps(\n            mediaNode.getAttributeValue(\"mimetype\"),\n            mediaNode.getAttributeValue(\"filehash\"),\n            mediaNode.getAttributeValue(\"url\"),\n            mediaNode.getAttributeValue(\"ip\"),\n            mediaNode.getAttributeValue(\"size\"),\n            mediaNode.getAttributeValue(\"file\"),\n            mediaNode.getAttributeValue(\"mediakey\")\n            )\n        return entity\n\n    @staticmethod\n    def fromBuilder(builder):\n        url = builder.get(\"url\")\n        ip = builder.get(\"ip\")\n        assert url, \"Url is required\"\n        mimeType = builder.get(\"mimetype\", MimeTools.getMIME(builder.getOriginalFilepath())[0])\n        filehash = WATools.getFileHashForUpload(builder.getFilepath())\n        size = os.path.getsize(builder.getFilepath())\n        fileName = os.path.basename(builder.getFilepath())\n        return DownloadableMediaMessageProtocolEntity(builder.mediaType, mimeType, filehash, url, ip, size, fileName, to = builder.jid, preview = builder.get(\"preview\"))\n", "comments": "         message    time stamp       contact jid            offline    offline    type  text  id    message id    notify    notify name              media type    downloadable media type  (image   audio   video)                mimetype    mime type                filehash    file hash                url    download url                ip    ip                size    media size                file    filename                     thumbnail rawdata (jpeg )             media        message          ", "content": "from .message_media import MediaMessageProtocolEntity\nfrom yowsup.common.tools import WATools\nfrom yowsup.common.tools import MimeTools\nimport os\nclass DownloadableMediaMessageProtocolEntity(MediaMessageProtocolEntity):\n    '''\n    <message t=\"{{TIME_STAMP}}\" from=\"{{CONTACT_JID}}\"\n        offline=\"{{OFFLINE}}\" type=\"text\" id=\"{{MESSAGE_ID}}\" notify=\"{{NOTIFY_NAME}}\">\n        <media type=\"{{DOWNLOADABLE_MEDIA_TYPE: (image | audio | video)}}\"\n            mimetype=\"{{MIME_TYPE}}\"\n            filehash=\"{{FILE_HASH}}\"\n            url=\"{{DOWNLOAD_URL}}\"\n            ip=\"{{IP}}\"\n            size=\"{{MEDIA SIZE}}\"\n            file=\"{{FILENAME}}\"\n\n            > {{THUMBNAIL_RAWDATA (JPEG?)}}\n        </media>\n    </message>\n    '''\n    def __init__(self, mediaType,\n            mimeType, fileHash, url, ip, size, fileName, mediaKey = None,\n            _id = None, _from = None, to = None, notify = None, timestamp = None,\n            participant = None, preview = None, offline = None, retry = None):\n\n        super(DownloadableMediaMessageProtocolEntity, self).__init__(mediaType, _id, _from, to, notify, timestamp, participant, preview, offline, retry)\n        self.setDownloadableMediaProps(mimeType, fileHash, url, ip, size, fileName, mediaKey)\n\n    def __str__(self):\n        out  = super(DownloadableMediaMessageProtocolEntity, self).__str__()\n        out += \"MimeType: %s\\n\" % self.mimeType\n        out += \"File Hash: %s\\n\" % self.fileHash.encode('hex')\n        out += \"URL: %s\\n\" % self.url\n        out += \"IP: %s\\n\" % self.ip\n        out += \"File Size: %s\\n\" % self.size\n        out += \"File name: %s\\n\" % self.fileName\n        return out\n\n    def getMediaSize(self):\n        return self.size\n\n    def getMediaUrl(self):\n        return self.url\n\n    def getMimeType(self):\n        return self.mimeType\n\n    def setDownloadableMediaProps(self, mimeType, fileHash, url, ip, size, fileName, mediaKey):\n        self.mimeType   = mimeType\n        self.fileHash   = fileHash\n        self.url        = url\n        self.ip         = ip\n        self.size       = int(size)\n        self.fileName   = fileName\n        self.mediaKey   = mediaKey\n\n    def toProtocolTreeNode(self):\n        node = super(DownloadableMediaMessageProtocolEntity, self).toProtocolTreeNode()\n        mediaNode = node.getChild(\"media\")\n        mediaNode.setAttribute(\"mimetype\",  self.mimeType)\n        mediaNode.setAttribute(\"filehash\",  self.fileHash)\n        mediaNode.setAttribute(\"url\",       self.url)\n        if self.ip:\n            mediaNode.setAttribute(\"ip\",        self.ip)\n        mediaNode.setAttribute(\"size\",      str(self.size))\n        mediaNode.setAttribute(\"file\",      self.fileName)\n        if self.mediaKey:\n            mediaNode.setAttribute(\"mediakey\", self.mediaKey)\n\n        return node\n\n    def isEncrypted(self):\n        return self.mediaKey is not None\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        entity = MediaMessageProtocolEntity.fromProtocolTreeNode(node)\n        entity.__class__ = DownloadableMediaMessageProtocolEntity\n        mediaNode = node.getChild(\"media\")\n        entity.setDownloadableMediaProps(\n            mediaNode.getAttributeValue(\"mimetype\"),\n            mediaNode.getAttributeValue(\"filehash\"),\n            mediaNode.getAttributeValue(\"url\"),\n            mediaNode.getAttributeValue(\"ip\"),\n            mediaNode.getAttributeValue(\"size\"),\n            mediaNode.getAttributeValue(\"file\"),\n            mediaNode.getAttributeValue(\"mediakey\")\n            )\n        return entity\n\n    @staticmethod\n    def fromBuilder(builder):\n        url = builder.get(\"url\")\n        ip = builder.get(\"ip\")\n        assert url, \"Url is required\"\n        mimeType = builder.get(\"mimetype\", MimeTools.getMIME(builder.getOriginalFilepath())[0])\n        filehash = WATools.getFileHashForUpload(builder.getFilepath())\n        size = os.path.getsize(builder.getFilepath())\n        fileName = os.path.basename(builder.getFilepath())\n        return DownloadableMediaMessageProtocolEntity(builder.mediaType, mimeType, filehash, url, ip, size, fileName, to = builder.jid, preview = builder.get(\"preview\"))\n", "description": "The python WhatsApp library", "file_name": "message_media_downloadable.py", "id": "ebf26136ffabbb3f988900a5dd5f90e0", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_media/protocolentities/message_media_downloadable.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}