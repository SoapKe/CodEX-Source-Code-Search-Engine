{"author": "sympy", "code": "from sympy import (S, Symbol, pi, I, oo, zoo, sin, sqrt, tan, gamma,\n    atanh, hyper, meijerg, O)\nfrom sympy.functions.special.elliptic_integrals import (elliptic_k as K,\n    elliptic_f as F, elliptic_e as E, elliptic_pi as P)\nfrom sympy.utilities.randtest import (test_derivative_numerically as td,\n                                      random_complex_number as randcplx,\n                                      verify_numerically as tn)\nfrom sympy.abc import z, m, n\n\ni = Symbol('i', integer=True)\nj = Symbol('k', integer=True, positive=True)\n\ndef test_K():\n    assert K(0) == pi/2\n    assert K(S(1)/2) == 8*pi**(S(3)/2)/gamma(-S(1)/4)**2\n    assert K(1) == zoo\n    assert K(-1) == gamma(S(1)/4)**2/(4*sqrt(2*pi))\n    assert K(oo) == 0\n    assert K(-oo) == 0\n    assert K(I*oo) == 0\n    assert K(-I*oo) == 0\n    assert K(zoo) == 0\n\n    assert K(z).diff(z) == (E(z) - (1 - z)*K(z))/(2*z*(1 - z))\n    assert td(K(z), z)\n\n    zi = Symbol('z', real=False)\n    assert K(zi).conjugate() == K(zi.conjugate())\n    zr = Symbol('z', real=True, negative=True)\n    assert K(zr).conjugate() == K(zr)\n\n    assert K(z).rewrite(hyper) == \\\n        (pi/2)*hyper((S.Half, S.Half), (S.One,), z)\n    assert tn(K(z), (pi/2)*hyper((S.Half, S.Half), (S.One,), z))\n    assert K(z).rewrite(meijerg) == \\\n        meijerg(((S.Half, S.Half), []), ((S.Zero,), (S.Zero,)), -z)/2\n    assert tn(K(z), meijerg(((S.Half, S.Half), []), ((S.Zero,), (S.Zero,)), -z)/2)\n\n    assert K(z).series(z) == pi/2 + pi*z/8 + 9*pi*z**2/128 + \\\n        25*pi*z**3/512 + 1225*pi*z**4/32768 + 3969*pi*z**5/131072 + O(z**6)\n\n\ndef test_F():\n    assert F(z, 0) == z\n    assert F(0, m) == 0\n    assert F(pi*i/2, m) == i*K(m)\n    assert F(z, oo) == 0\n    assert F(z, -oo) == 0\n\n    assert F(-z, m) == -F(z, m)\n\n    assert F(z, m).diff(z) == 1/sqrt(1 - m*sin(z)**2)\n    assert F(z, m).diff(m) == E(z, m)/(2*m*(1 - m)) - F(z, m)/(2*m) - \\\n        sin(2*z)/(4*(1 - m)*sqrt(1 - m*sin(z)**2))\n    r = randcplx()\n    assert td(F(z, r), z)\n    assert td(F(r, m), m)\n\n    mi = Symbol('m', real=False)\n    assert F(z, mi).conjugate() == F(z.conjugate(), mi.conjugate())\n    mr = Symbol('m', real=True, negative=True)\n    assert F(z, mr).conjugate() == F(z.conjugate(), mr)\n\n    assert F(z, m).series(z) == \\\n        z + z**5*(3*m**2/40 - m/30) + m*z**3/6 + O(z**6)\n\n\ndef test_E():\n    assert E(z, 0) == z\n    assert E(0, m) == 0\n    assert E(i*pi/2, m) == i*E(m)\n    assert E(z, oo) == zoo\n    assert E(z, -oo) == zoo\n    assert E(0) == pi/2\n    assert E(1) == 1\n    assert E(oo) == I*oo\n    assert E(-oo) == oo\n    assert E(zoo) == zoo\n\n    assert E(-z, m) == -E(z, m)\n\n    assert E(z, m).diff(z) == sqrt(1 - m*sin(z)**2)\n    assert E(z, m).diff(m) == (E(z, m) - F(z, m))/(2*m)\n    assert E(z).diff(z) == (E(z) - K(z))/(2*z)\n    r = randcplx()\n    assert td(E(r, m), m)\n    assert td(E(z, r), z)\n    assert td(E(z), z)\n\n    mi = Symbol('m', real=False)\n    assert E(z, mi).conjugate() == E(z.conjugate(), mi.conjugate())\n    assert E(mi).conjugate() == E(mi.conjugate())\n    mr = Symbol('m', real=True, negative=True)\n    assert E(z, mr).conjugate() == E(z.conjugate(), mr)\n    assert E(mr).conjugate() == E(mr)\n\n    assert E(z).rewrite(hyper) == (pi/2)*hyper((-S.Half, S.Half), (S.One,), z)\n    assert tn(E(z), (pi/2)*hyper((-S.Half, S.Half), (S.One,), z))\n    assert E(z).rewrite(meijerg) == \\\n        -meijerg(((S.Half, S(3)/2), []), ((S.Zero,), (S.Zero,)), -z)/4\n    assert tn(E(z), -meijerg(((S.Half, S(3)/2), []), ((S.Zero,), (S.Zero,)), -z)/4)\n\n    assert E(z, m).series(z) == \\\n        z + z**5*(-m**2/40 + m/30) - m*z**3/6 + O(z**6)\n    assert E(z).series(z) == pi/2 - pi*z/8 - 3*pi*z**2/128 - \\\n        5*pi*z**3/512 - 175*pi*z**4/32768 - 441*pi*z**5/131072 + O(z**6)\n\n\ndef test_P():\n    assert P(0, z, m) == F(z, m)\n    assert P(1, z, m) == F(z, m) + \\\n        (sqrt(1 - m*sin(z)**2)*tan(z) - E(z, m))/(1 - m)\n    assert P(n, i*pi/2, m) == i*P(n, m)\n    assert P(n, z, 0) == atanh(sqrt(n - 1)*tan(z))/sqrt(n - 1)\n    assert P(n, z, n) == F(z, n) - P(1, z, n) + tan(z)/sqrt(1 - n*sin(z)**2)\n    assert P(oo, z, m) == 0\n    assert P(-oo, z, m) == 0\n    assert P(n, z, oo) == 0\n    assert P(n, z, -oo) == 0\n    assert P(0, m) == K(m)\n    assert P(1, m) == zoo\n    assert P(n, 0) == pi/(2*sqrt(1 - n))\n    assert P(2, 1) == -oo\n    assert P(-1, 1) == oo\n    assert P(n, n) == E(n)/(1 - n)\n\n    assert P(n, -z, m) == -P(n, z, m)\n\n    ni, mi = Symbol('n', real=False), Symbol('m', real=False)\n    assert P(ni, z, mi).conjugate() == \\\n        P(ni.conjugate(), z.conjugate(), mi.conjugate())\n    nr, mr = Symbol('n', real=True, negative=True), \\\n        Symbol('m', real=True, negative=True)\n    assert P(nr, z, mr).conjugate() == P(nr, z.conjugate(), mr)\n    assert P(n, m).conjugate() == P(n.conjugate(), m.conjugate())\n\n    assert P(n, z, m).diff(n) == (E(z, m) + (m - n)*F(z, m)/n +\n        (n**2 - m)*P(n, z, m)/n - n*sqrt(1 -\n            m*sin(z)**2)*sin(2*z)/(2*(1 - n*sin(z)**2)))/(2*(m - n)*(n - 1))\n    assert P(n, z, m).diff(z) == 1/(sqrt(1 - m*sin(z)**2)*(1 - n*sin(z)**2))\n    assert P(n, z, m).diff(m) == (E(z, m)/(m - 1) + P(n, z, m) -\n        m*sin(2*z)/(2*(m - 1)*sqrt(1 - m*sin(z)**2)))/(2*(n - m))\n    assert P(n, m).diff(n) == (E(m) + (m - n)*K(m)/n +\n        (n**2 - m)*P(n, m)/n)/(2*(m - n)*(n - 1))\n    assert P(n, m).diff(m) == (E(m)/(m - 1) + P(n, m))/(2*(n - m))\n    rx, ry = randcplx(), randcplx()\n    assert td(P(n, rx, ry), n)\n    assert td(P(rx, z, ry), z)\n    assert td(P(rx, ry, m), m)\n\n    assert P(n, z, m).series(z) == z + z**3*(m/6 + n/3) + \\\n        z**5*(3*m**2/40 + m*n/10 - m/30 + n**2/5 - n/15) + O(z**6)\n", "comments": "", "content": "from sympy import (S, Symbol, pi, I, oo, zoo, sin, sqrt, tan, gamma,\n    atanh, hyper, meijerg, O)\nfrom sympy.functions.special.elliptic_integrals import (elliptic_k as K,\n    elliptic_f as F, elliptic_e as E, elliptic_pi as P)\nfrom sympy.utilities.randtest import (test_derivative_numerically as td,\n                                      random_complex_number as randcplx,\n                                      verify_numerically as tn)\nfrom sympy.abc import z, m, n\n\ni = Symbol('i', integer=True)\nj = Symbol('k', integer=True, positive=True)\n\ndef test_K():\n    assert K(0) == pi/2\n    assert K(S(1)/2) == 8*pi**(S(3)/2)/gamma(-S(1)/4)**2\n    assert K(1) == zoo\n    assert K(-1) == gamma(S(1)/4)**2/(4*sqrt(2*pi))\n    assert K(oo) == 0\n    assert K(-oo) == 0\n    assert K(I*oo) == 0\n    assert K(-I*oo) == 0\n    assert K(zoo) == 0\n\n    assert K(z).diff(z) == (E(z) - (1 - z)*K(z))/(2*z*(1 - z))\n    assert td(K(z), z)\n\n    zi = Symbol('z', real=False)\n    assert K(zi).conjugate() == K(zi.conjugate())\n    zr = Symbol('z', real=True, negative=True)\n    assert K(zr).conjugate() == K(zr)\n\n    assert K(z).rewrite(hyper) == \\\n        (pi/2)*hyper((S.Half, S.Half), (S.One,), z)\n    assert tn(K(z), (pi/2)*hyper((S.Half, S.Half), (S.One,), z))\n    assert K(z).rewrite(meijerg) == \\\n        meijerg(((S.Half, S.Half), []), ((S.Zero,), (S.Zero,)), -z)/2\n    assert tn(K(z), meijerg(((S.Half, S.Half), []), ((S.Zero,), (S.Zero,)), -z)/2)\n\n    assert K(z).series(z) == pi/2 + pi*z/8 + 9*pi*z**2/128 + \\\n        25*pi*z**3/512 + 1225*pi*z**4/32768 + 3969*pi*z**5/131072 + O(z**6)\n\n\ndef test_F():\n    assert F(z, 0) == z\n    assert F(0, m) == 0\n    assert F(pi*i/2, m) == i*K(m)\n    assert F(z, oo) == 0\n    assert F(z, -oo) == 0\n\n    assert F(-z, m) == -F(z, m)\n\n    assert F(z, m).diff(z) == 1/sqrt(1 - m*sin(z)**2)\n    assert F(z, m).diff(m) == E(z, m)/(2*m*(1 - m)) - F(z, m)/(2*m) - \\\n        sin(2*z)/(4*(1 - m)*sqrt(1 - m*sin(z)**2))\n    r = randcplx()\n    assert td(F(z, r), z)\n    assert td(F(r, m), m)\n\n    mi = Symbol('m', real=False)\n    assert F(z, mi).conjugate() == F(z.conjugate(), mi.conjugate())\n    mr = Symbol('m', real=True, negative=True)\n    assert F(z, mr).conjugate() == F(z.conjugate(), mr)\n\n    assert F(z, m).series(z) == \\\n        z + z**5*(3*m**2/40 - m/30) + m*z**3/6 + O(z**6)\n\n\ndef test_E():\n    assert E(z, 0) == z\n    assert E(0, m) == 0\n    assert E(i*pi/2, m) == i*E(m)\n    assert E(z, oo) == zoo\n    assert E(z, -oo) == zoo\n    assert E(0) == pi/2\n    assert E(1) == 1\n    assert E(oo) == I*oo\n    assert E(-oo) == oo\n    assert E(zoo) == zoo\n\n    assert E(-z, m) == -E(z, m)\n\n    assert E(z, m).diff(z) == sqrt(1 - m*sin(z)**2)\n    assert E(z, m).diff(m) == (E(z, m) - F(z, m))/(2*m)\n    assert E(z).diff(z) == (E(z) - K(z))/(2*z)\n    r = randcplx()\n    assert td(E(r, m), m)\n    assert td(E(z, r), z)\n    assert td(E(z), z)\n\n    mi = Symbol('m', real=False)\n    assert E(z, mi).conjugate() == E(z.conjugate(), mi.conjugate())\n    assert E(mi).conjugate() == E(mi.conjugate())\n    mr = Symbol('m', real=True, negative=True)\n    assert E(z, mr).conjugate() == E(z.conjugate(), mr)\n    assert E(mr).conjugate() == E(mr)\n\n    assert E(z).rewrite(hyper) == (pi/2)*hyper((-S.Half, S.Half), (S.One,), z)\n    assert tn(E(z), (pi/2)*hyper((-S.Half, S.Half), (S.One,), z))\n    assert E(z).rewrite(meijerg) == \\\n        -meijerg(((S.Half, S(3)/2), []), ((S.Zero,), (S.Zero,)), -z)/4\n    assert tn(E(z), -meijerg(((S.Half, S(3)/2), []), ((S.Zero,), (S.Zero,)), -z)/4)\n\n    assert E(z, m).series(z) == \\\n        z + z**5*(-m**2/40 + m/30) - m*z**3/6 + O(z**6)\n    assert E(z).series(z) == pi/2 - pi*z/8 - 3*pi*z**2/128 - \\\n        5*pi*z**3/512 - 175*pi*z**4/32768 - 441*pi*z**5/131072 + O(z**6)\n\n\ndef test_P():\n    assert P(0, z, m) == F(z, m)\n    assert P(1, z, m) == F(z, m) + \\\n        (sqrt(1 - m*sin(z)**2)*tan(z) - E(z, m))/(1 - m)\n    assert P(n, i*pi/2, m) == i*P(n, m)\n    assert P(n, z, 0) == atanh(sqrt(n - 1)*tan(z))/sqrt(n - 1)\n    assert P(n, z, n) == F(z, n) - P(1, z, n) + tan(z)/sqrt(1 - n*sin(z)**2)\n    assert P(oo, z, m) == 0\n    assert P(-oo, z, m) == 0\n    assert P(n, z, oo) == 0\n    assert P(n, z, -oo) == 0\n    assert P(0, m) == K(m)\n    assert P(1, m) == zoo\n    assert P(n, 0) == pi/(2*sqrt(1 - n))\n    assert P(2, 1) == -oo\n    assert P(-1, 1) == oo\n    assert P(n, n) == E(n)/(1 - n)\n\n    assert P(n, -z, m) == -P(n, z, m)\n\n    ni, mi = Symbol('n', real=False), Symbol('m', real=False)\n    assert P(ni, z, mi).conjugate() == \\\n        P(ni.conjugate(), z.conjugate(), mi.conjugate())\n    nr, mr = Symbol('n', real=True, negative=True), \\\n        Symbol('m', real=True, negative=True)\n    assert P(nr, z, mr).conjugate() == P(nr, z.conjugate(), mr)\n    assert P(n, m).conjugate() == P(n.conjugate(), m.conjugate())\n\n    assert P(n, z, m).diff(n) == (E(z, m) + (m - n)*F(z, m)/n +\n        (n**2 - m)*P(n, z, m)/n - n*sqrt(1 -\n            m*sin(z)**2)*sin(2*z)/(2*(1 - n*sin(z)**2)))/(2*(m - n)*(n - 1))\n    assert P(n, z, m).diff(z) == 1/(sqrt(1 - m*sin(z)**2)*(1 - n*sin(z)**2))\n    assert P(n, z, m).diff(m) == (E(z, m)/(m - 1) + P(n, z, m) -\n        m*sin(2*z)/(2*(m - 1)*sqrt(1 - m*sin(z)**2)))/(2*(n - m))\n    assert P(n, m).diff(n) == (E(m) + (m - n)*K(m)/n +\n        (n**2 - m)*P(n, m)/n)/(2*(m - n)*(n - 1))\n    assert P(n, m).diff(m) == (E(m)/(m - 1) + P(n, m))/(2*(n - m))\n    rx, ry = randcplx(), randcplx()\n    assert td(P(n, rx, ry), n)\n    assert td(P(rx, z, ry), z)\n    assert td(P(rx, ry, m), m)\n\n    assert P(n, z, m).series(z) == z + z**3*(m/6 + n/3) + \\\n        z**5*(3*m**2/40 + m*n/10 - m/30 + n**2/5 - n/15) + O(z**6)\n", "description": "A computer algebra system written in pure Python", "file_name": "test_elliptic_integrals.py", "id": "2980788f114bc457f86137d2d183492d", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/functions/special/tests/test_elliptic_integrals.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}