{"author": "odoo", "code": "\n\nfrom odoo import api, fields, models, _\n\n\nclass Job(models.Model):\n    _name = \"hr.job\"\n    _inherit = [\"mail.alias.mixin\", \"hr.job\"]\n\n    @api.model\n    def _default_address_id(self):\n        return self.env.user.company_id.partner_id\n\n    address_id = fields.Many2one(\n        'res.partner', \"Job Location\", default=_default_address_id,\n        help=\"Address where employees are working\")\n    application_ids = fields.One2many('hr.applicant', 'job_id', \"Applications\")\n    application_count = fields.Integer(compute='_compute_application_count', string=\"Applications\")\n    manager_id = fields.Many2one(\n        'hr.employee', related='department_id.manager_id', string=\"Department Manager\",\n        readonly=True, store=True)\n    user_id = fields.Many2one('res.users', \"Recruitment Responsible\", track_visibility='onchange')\n    hr_responsible_id = fields.Many2one('res.users', \"HR Responsible\", track_visibility='onchange',\n        help=\"Person responsible of validating the employee's contracts.\")\n    document_ids = fields.One2many('ir.attachment', compute='_compute_document_ids', string=\"Applications\")\n    documents_count = fields.Integer(compute='_compute_document_ids', string=\"Documents\")\n    alias_id = fields.Many2one(\n        'mail.alias', \"Alias\", ondelete=\"restrict\", required=True,\n        help=\"Email alias for this job position. New emails will automatically create new applicants for this job position.\")\n    color = fields.Integer(\"Color Index\")\n\n    def _compute_document_ids(self):\n        applicants = self.mapped('application_ids').filtered(lambda self: not self.emp_id)\n        app_to_job = dict((applicant.id, applicant.job_id.id) for applicant in applicants)\n        attachments = self.env['ir.attachment'].search([\n            '|',\n            '&', ('res_model', '=', 'hr.job'), ('res_id', 'in', self.ids),\n            '&', ('res_model', '=', 'hr.applicant'), ('res_id', 'in', applicants.ids)])\n        result = dict.fromkeys(self.ids, self.env['ir.attachment'])\n        for attachment in attachments:\n            if attachment.res_model == 'hr.applicant':\n                result[app_to_job[attachment.res_id]] |= attachment\n            else:\n                result[attachment.res_id] |= attachment\n\n        for job in self:\n            job.document_ids = result[job.id]\n            job.documents_count = len(job.document_ids)\n\n    @api.multi\n    def _compute_application_count(self):\n        read_group_result = self.env['hr.applicant'].read_group([('job_id', 'in', self.ids)], ['job_id'], ['job_id'])\n        result = dict((data['job_id'][0], data['job_id_count']) for data in read_group_result)\n        for job in self:\n            job.application_count = result.get(job.id, 0)\n\n    def get_alias_model_name(self, vals):\n        return 'hr.applicant'\n\n    def get_alias_values(self):\n        values = super(Job, self).get_alias_values()\n        values['alias_defaults'] = {'job_id': self.id}\n        return values\n\n    @api.model\n    def create(self, vals):\n        return super(Job, self.with_context(mail_create_nolog=True)).create(vals)\n\n    @api.multi\n    def _track_subtype(self, init_values):\n        if 'state' in init_values and self.state == 'open':\n            return 'hr_recruitment.mt_job_new'\n        return super(Job, self)._track_subtype(init_values)\n\n    @api.multi\n    def action_get_attachment_tree_view(self):\n        action = self.env.ref('base.action_attachment').read()[0]\n        action['context'] = {\n            'default_res_model': self._name,\n            'default_res_id': self.ids[0]\n        }\n        action['search_view_id'] = (self.env.ref('hr_recruitment.ir_attachment_view_search_inherit_hr_recruitment').id, )\n        action['domain'] = ['|', '&', ('res_model', '=', 'hr.job'), ('res_id', 'in', self.ids), '&', ('res_model', '=', 'hr.applicant'), ('res_id', 'in', self.mapped('application_ids').ids)]\n        return action\n\n    @api.multi\n    def close_dialog(self):\n        return {'type': 'ir.actions.act_window_close'}\n\n    @api.multi\n    def edit_dialog(self):\n        form_view = self.env.ref('hr.view_hr_job_form')\n        return {\n            'name': _('Job'),\n            'res_model': 'hr.job',\n            'res_id': self.id,\n            'views': [(form_view.id, 'form'),],\n            'type': 'ir.actions.act_window',\n            'target': 'inline'\n        }\n", "comments": "  part odoo  see license file full copyright licensing details  ", "content": "# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models, _\n\n\nclass Job(models.Model):\n    _name = \"hr.job\"\n    _inherit = [\"mail.alias.mixin\", \"hr.job\"]\n\n    @api.model\n    def _default_address_id(self):\n        return self.env.user.company_id.partner_id\n\n    address_id = fields.Many2one(\n        'res.partner', \"Job Location\", default=_default_address_id,\n        help=\"Address where employees are working\")\n    application_ids = fields.One2many('hr.applicant', 'job_id', \"Applications\")\n    application_count = fields.Integer(compute='_compute_application_count', string=\"Applications\")\n    manager_id = fields.Many2one(\n        'hr.employee', related='department_id.manager_id', string=\"Department Manager\",\n        readonly=True, store=True)\n    user_id = fields.Many2one('res.users', \"Recruitment Responsible\", track_visibility='onchange')\n    hr_responsible_id = fields.Many2one('res.users', \"HR Responsible\", track_visibility='onchange',\n        help=\"Person responsible of validating the employee's contracts.\")\n    document_ids = fields.One2many('ir.attachment', compute='_compute_document_ids', string=\"Applications\")\n    documents_count = fields.Integer(compute='_compute_document_ids', string=\"Documents\")\n    alias_id = fields.Many2one(\n        'mail.alias', \"Alias\", ondelete=\"restrict\", required=True,\n        help=\"Email alias for this job position. New emails will automatically create new applicants for this job position.\")\n    color = fields.Integer(\"Color Index\")\n\n    def _compute_document_ids(self):\n        applicants = self.mapped('application_ids').filtered(lambda self: not self.emp_id)\n        app_to_job = dict((applicant.id, applicant.job_id.id) for applicant in applicants)\n        attachments = self.env['ir.attachment'].search([\n            '|',\n            '&', ('res_model', '=', 'hr.job'), ('res_id', 'in', self.ids),\n            '&', ('res_model', '=', 'hr.applicant'), ('res_id', 'in', applicants.ids)])\n        result = dict.fromkeys(self.ids, self.env['ir.attachment'])\n        for attachment in attachments:\n            if attachment.res_model == 'hr.applicant':\n                result[app_to_job[attachment.res_id]] |= attachment\n            else:\n                result[attachment.res_id] |= attachment\n\n        for job in self:\n            job.document_ids = result[job.id]\n            job.documents_count = len(job.document_ids)\n\n    @api.multi\n    def _compute_application_count(self):\n        read_group_result = self.env['hr.applicant'].read_group([('job_id', 'in', self.ids)], ['job_id'], ['job_id'])\n        result = dict((data['job_id'][0], data['job_id_count']) for data in read_group_result)\n        for job in self:\n            job.application_count = result.get(job.id, 0)\n\n    def get_alias_model_name(self, vals):\n        return 'hr.applicant'\n\n    def get_alias_values(self):\n        values = super(Job, self).get_alias_values()\n        values['alias_defaults'] = {'job_id': self.id}\n        return values\n\n    @api.model\n    def create(self, vals):\n        return super(Job, self.with_context(mail_create_nolog=True)).create(vals)\n\n    @api.multi\n    def _track_subtype(self, init_values):\n        if 'state' in init_values and self.state == 'open':\n            return 'hr_recruitment.mt_job_new'\n        return super(Job, self)._track_subtype(init_values)\n\n    @api.multi\n    def action_get_attachment_tree_view(self):\n        action = self.env.ref('base.action_attachment').read()[0]\n        action['context'] = {\n            'default_res_model': self._name,\n            'default_res_id': self.ids[0]\n        }\n        action['search_view_id'] = (self.env.ref('hr_recruitment.ir_attachment_view_search_inherit_hr_recruitment').id, )\n        action['domain'] = ['|', '&', ('res_model', '=', 'hr.job'), ('res_id', 'in', self.ids), '&', ('res_model', '=', 'hr.applicant'), ('res_id', 'in', self.mapped('application_ids').ids)]\n        return action\n\n    @api.multi\n    def close_dialog(self):\n        return {'type': 'ir.actions.act_window_close'}\n\n    @api.multi\n    def edit_dialog(self):\n        form_view = self.env.ref('hr.view_hr_job_form')\n        return {\n            'name': _('Job'),\n            'res_model': 'hr.job',\n            'res_id': self.id,\n            'views': [(form_view.id, 'form'),],\n            'type': 'ir.actions.act_window',\n            'target': 'inline'\n        }\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "hr_job.py", "id": "3efcccc9f42bad2e6062170243db0da2", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_recruitment/models/hr_job.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}