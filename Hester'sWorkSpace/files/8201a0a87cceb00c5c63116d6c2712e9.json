{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\n\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom test.helper import FakeYDL\n\n\nfrom youtube_dl.extractor import (\n    YoutubePlaylistIE,\n    YoutubeIE,\n)\n\n\nclass TestYoutubeLists(unittest.TestCase):\n    def assertIsPlaylist(self, info):\n        \n        self.assertEqual(info['_type'], 'playlist')\n\n    def test_youtube_playlist_noplaylist(self):\n        dl = FakeYDL()\n        dl.params['noplaylist'] = True\n        ie = YoutubePlaylistIE(dl)\n        result = ie.extract('https://www.youtube.com/watch?v=FXxLjLQi3Fg&list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re')\n        self.assertEqual(result['_type'], 'url')\n        self.assertEqual(YoutubeIE().extract_id(result['url']), 'FXxLjLQi3Fg')\n\n    def test_youtube_course(self):\n        dl = FakeYDL()\n        ie = YoutubePlaylistIE(dl)\n        \n        result = ie.extract('https://www.youtube.com/course?list=ECUl4u3cNGP61MdtwGTqZA0MreSaDybji8')\n        entries = list(result['entries'])\n        self.assertEqual(YoutubeIE().extract_id(entries[0]['url']), 'j9WZyLZCBzs')\n        self.assertEqual(len(entries), 25)\n        self.assertEqual(YoutubeIE().extract_id(entries[-1]['url']), 'rYefUsYuEp0')\n\n    def test_youtube_mix(self):\n        dl = FakeYDL()\n        ie = YoutubePlaylistIE(dl)\n        result = ie.extract('https://www.youtube.com/watch?v=W01L70IGBgE&index=2&list=RDOQpdSVF_k_w')\n        entries = result['entries']\n        self.assertTrue(len(entries) >= 50)\n        original_video = entries[0]\n        self.assertEqual(original_video['id'], 'OQpdSVF_k_w')\n\n    def test_youtube_toptracks(self):\n        print('Skipping: The playlist page gives error 500')\n        return\n        dl = FakeYDL()\n        ie = YoutubePlaylistIE(dl)\n        result = ie.extract('https://www.youtube.com/playlist?list=MCUS')\n        entries = result['entries']\n        self.assertEqual(len(entries), 100)\n\n    def test_youtube_flat_playlist_titles(self):\n        dl = FakeYDL()\n        dl.params['extract_flat'] = True\n        ie = YoutubePlaylistIE(dl)\n        result = ie.extract('https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re')\n        self.assertIsPlaylist(result)\n        for entry in result['entries']:\n            self.assertTrue(entry.get('title'))\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "Make sure the info has '_type' set to 'playlist'\n'\n#!/usr/bin/env python\n# Allow direct execution\n# TODO find a > 100 (paginating?) videos course\n", "content": "#!/usr/bin/env python\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom test.helper import FakeYDL\n\n\nfrom youtube_dl.extractor import (\n    YoutubePlaylistIE,\n    YoutubeIE,\n)\n\n\nclass TestYoutubeLists(unittest.TestCase):\n    def assertIsPlaylist(self, info):\n        \"\"\"Make sure the info has '_type' set to 'playlist'\"\"\"\n        self.assertEqual(info['_type'], 'playlist')\n\n    def test_youtube_playlist_noplaylist(self):\n        dl = FakeYDL()\n        dl.params['noplaylist'] = True\n        ie = YoutubePlaylistIE(dl)\n        result = ie.extract('https://www.youtube.com/watch?v=FXxLjLQi3Fg&list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re')\n        self.assertEqual(result['_type'], 'url')\n        self.assertEqual(YoutubeIE().extract_id(result['url']), 'FXxLjLQi3Fg')\n\n    def test_youtube_course(self):\n        dl = FakeYDL()\n        ie = YoutubePlaylistIE(dl)\n        # TODO find a > 100 (paginating?) videos course\n        result = ie.extract('https://www.youtube.com/course?list=ECUl4u3cNGP61MdtwGTqZA0MreSaDybji8')\n        entries = list(result['entries'])\n        self.assertEqual(YoutubeIE().extract_id(entries[0]['url']), 'j9WZyLZCBzs')\n        self.assertEqual(len(entries), 25)\n        self.assertEqual(YoutubeIE().extract_id(entries[-1]['url']), 'rYefUsYuEp0')\n\n    def test_youtube_mix(self):\n        dl = FakeYDL()\n        ie = YoutubePlaylistIE(dl)\n        result = ie.extract('https://www.youtube.com/watch?v=W01L70IGBgE&index=2&list=RDOQpdSVF_k_w')\n        entries = result['entries']\n        self.assertTrue(len(entries) >= 50)\n        original_video = entries[0]\n        self.assertEqual(original_video['id'], 'OQpdSVF_k_w')\n\n    def test_youtube_toptracks(self):\n        print('Skipping: The playlist page gives error 500')\n        return\n        dl = FakeYDL()\n        ie = YoutubePlaylistIE(dl)\n        result = ie.extract('https://www.youtube.com/playlist?list=MCUS')\n        entries = result['entries']\n        self.assertEqual(len(entries), 100)\n\n    def test_youtube_flat_playlist_titles(self):\n        dl = FakeYDL()\n        dl.params['extract_flat'] = True\n        ie = YoutubePlaylistIE(dl)\n        result = ie.extract('https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re')\n        self.assertIsPlaylist(result)\n        for entry in result['entries']:\n            self.assertTrue(entry.get('title'))\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "test_youtube_lists.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/test/test_youtube_lists.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}