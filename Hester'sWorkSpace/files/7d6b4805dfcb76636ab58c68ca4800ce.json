{"author": "nvbn", "code": "from io import BytesIO\nimport pytest\nfrom thefuck.types import Command\nfrom thefuck.rules.apt_invalid_operation import match, get_new_command, \\\n    _get_operations\n\ninvalid_operation = 'E: Invalid operation {}'.format\napt_help = b\napt_get_operations = ['update', 'upgrade', 'install', 'remove', 'autoremove',\n                      'purge', 'source', 'build-dep', 'dist-upgrade',\n                      'dselect-upgrade', 'clean', 'autoclean', 'check',\n                      'changelog', 'download']\n\n\n@pytest.mark.parametrize('script, output', [\n    ('apt', invalid_operation('saerch')),\n    ('apt-get', invalid_operation('isntall')),\n    ('apt-cache', invalid_operation('rumove'))])\ndef test_match(script, output):\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, output', [\n    ('vim', invalid_operation('vim')),\n    ('apt-get', \"\")])\ndef test_not_match(script, output):\n    assert not match(Command(script, output))\n\n\n@pytest.fixture\ndef set_help(mocker):\n    mock = mocker.patch('subprocess.Popen')\n\n    def _set_text(text):\n        mock.return_value.stdout = BytesIO(text)\n\n    return _set_text\n\n\n@pytest.mark.parametrize('app, help_text, operations', [\n    ('apt', apt_help, apt_operations),\n    ('apt-get', apt_get_help, apt_get_operations)\n])\ndef test_get_operations(set_help, app, help_text, operations):\n    set_help(help_text)\n    assert _get_operations(app) == operations\n\n\n@pytest.mark.parametrize('script, output, help_text, result', [\n    ('apt-get isntall vim', invalid_operation('isntall'),\n     apt_get_help, 'apt-get install vim'),\n    ('apt saerch vim', invalid_operation('saerch'),\n     apt_help, 'apt search vim'),\n])\ndef test_get_new_command(set_help, output, script, help_text, result):\n    set_help(help_text)\n    assert get_new_command(Command(script, output))[0] == result\n", "comments": "apt 1.0.10.2ubuntu1 for amd64 compiled on Oct  5 2015 15:55:05\nUsage: apt [options] command\n\nCLI for apt.\nBasic commands:\n list - list packages based on package names\n search - search in package descriptions\n show - show package details\n\n update - update list of available packages\n\n install - install packages\n remove  - remove packages\n\n upgrade - upgrade the system by installing/upgrading packages\n full-upgrade - upgrade the system by removing/installing/upgrading packages\n\n edit-sources - edit the source information file\n'''\napt_operations = ['list', 'search', 'show', 'update', 'install', 'remove',\n                  'upgrade', 'full-upgrade', 'edit-sources']\n\napt_get_help = b'''apt 1.0.10.2ubuntu1 for amd64 compiled on Oct  5 2015 15:55:05\nUsage: apt-get [options] command\n       apt-get [options] install|remove pkg1 [pkg2 ...]\n       apt-get [options] source pkg1 [pkg2 ...]\n\napt-get is a simple command line interface for downloading and\ninstalling packages. The most frequently used commands are update\nand install.\n\nCommands:\n   update - Retrieve new lists of packages\n   upgrade - Perform an upgrade\n   install - Install new packages (pkg is libc6 not libc6.deb)\n   remove - Remove packages\n   autoremove - Remove automatically all unused packages\n   purge - Remove packages and config files\n   source - Download source archives\n   build-dep - Configure build-dependencies for source packages\n   dist-upgrade - Distribution upgrade, see apt-get(8)\n   dselect-upgrade - Follow dselect selections\n   clean - Erase downloaded archive files\n   autoclean - Erase old downloaded archive files\n   check - Verify that there are no broken dependencies\n   changelog - Download and display the changelog for the given package\n   download - Download the binary package into the current directory\n\nOptions:\n  -h  This help text.\n  -q  Loggable output - no progress indicator\n  -qq No output except for errors\n  -d  Download only - do NOT install or unpack archives\n  -s  No-act. Perform ordering simulation\n  -y  Assume Yes to all queries and do not prompt\n  -f  Attempt to correct a system with broken dependencies in place\n  -m  Attempt to continue if archives are unlocatable\n  -u  Show a list of upgraded packages as well\n  -b  Build the source package after fetching it\n  -V  Show verbose version numbers\n  -c=? Read this configuration file\n  -o=? Set an arbitrary configuration option, eg -o dir::cache=/tmp\nSee the apt-get(8), sources.list(5) and apt.conf(5) manual\npages for more information and options.\n                       This APT has Super Cow Powers.\n\n\n\n", "content": "from io import BytesIO\nimport pytest\nfrom thefuck.types import Command\nfrom thefuck.rules.apt_invalid_operation import match, get_new_command, \\\n    _get_operations\n\ninvalid_operation = 'E: Invalid operation {}'.format\napt_help = b'''apt 1.0.10.2ubuntu1 for amd64 compiled on Oct  5 2015 15:55:05\nUsage: apt [options] command\n\nCLI for apt.\nBasic commands:\n list - list packages based on package names\n search - search in package descriptions\n show - show package details\n\n update - update list of available packages\n\n install - install packages\n remove  - remove packages\n\n upgrade - upgrade the system by installing/upgrading packages\n full-upgrade - upgrade the system by removing/installing/upgrading packages\n\n edit-sources - edit the source information file\n'''\napt_operations = ['list', 'search', 'show', 'update', 'install', 'remove',\n                  'upgrade', 'full-upgrade', 'edit-sources']\n\napt_get_help = b'''apt 1.0.10.2ubuntu1 for amd64 compiled on Oct  5 2015 15:55:05\nUsage: apt-get [options] command\n       apt-get [options] install|remove pkg1 [pkg2 ...]\n       apt-get [options] source pkg1 [pkg2 ...]\n\napt-get is a simple command line interface for downloading and\ninstalling packages. The most frequently used commands are update\nand install.\n\nCommands:\n   update - Retrieve new lists of packages\n   upgrade - Perform an upgrade\n   install - Install new packages (pkg is libc6 not libc6.deb)\n   remove - Remove packages\n   autoremove - Remove automatically all unused packages\n   purge - Remove packages and config files\n   source - Download source archives\n   build-dep - Configure build-dependencies for source packages\n   dist-upgrade - Distribution upgrade, see apt-get(8)\n   dselect-upgrade - Follow dselect selections\n   clean - Erase downloaded archive files\n   autoclean - Erase old downloaded archive files\n   check - Verify that there are no broken dependencies\n   changelog - Download and display the changelog for the given package\n   download - Download the binary package into the current directory\n\nOptions:\n  -h  This help text.\n  -q  Loggable output - no progress indicator\n  -qq No output except for errors\n  -d  Download only - do NOT install or unpack archives\n  -s  No-act. Perform ordering simulation\n  -y  Assume Yes to all queries and do not prompt\n  -f  Attempt to correct a system with broken dependencies in place\n  -m  Attempt to continue if archives are unlocatable\n  -u  Show a list of upgraded packages as well\n  -b  Build the source package after fetching it\n  -V  Show verbose version numbers\n  -c=? Read this configuration file\n  -o=? Set an arbitrary configuration option, eg -o dir::cache=/tmp\nSee the apt-get(8), sources.list(5) and apt.conf(5) manual\npages for more information and options.\n                       This APT has Super Cow Powers.\n'''\napt_get_operations = ['update', 'upgrade', 'install', 'remove', 'autoremove',\n                      'purge', 'source', 'build-dep', 'dist-upgrade',\n                      'dselect-upgrade', 'clean', 'autoclean', 'check',\n                      'changelog', 'download']\n\n\n@pytest.mark.parametrize('script, output', [\n    ('apt', invalid_operation('saerch')),\n    ('apt-get', invalid_operation('isntall')),\n    ('apt-cache', invalid_operation('rumove'))])\ndef test_match(script, output):\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, output', [\n    ('vim', invalid_operation('vim')),\n    ('apt-get', \"\")])\ndef test_not_match(script, output):\n    assert not match(Command(script, output))\n\n\n@pytest.fixture\ndef set_help(mocker):\n    mock = mocker.patch('subprocess.Popen')\n\n    def _set_text(text):\n        mock.return_value.stdout = BytesIO(text)\n\n    return _set_text\n\n\n@pytest.mark.parametrize('app, help_text, operations', [\n    ('apt', apt_help, apt_operations),\n    ('apt-get', apt_get_help, apt_get_operations)\n])\ndef test_get_operations(set_help, app, help_text, operations):\n    set_help(help_text)\n    assert _get_operations(app) == operations\n\n\n@pytest.mark.parametrize('script, output, help_text, result', [\n    ('apt-get isntall vim', invalid_operation('isntall'),\n     apt_get_help, 'apt-get install vim'),\n    ('apt saerch vim', invalid_operation('saerch'),\n     apt_help, 'apt search vim'),\n])\ndef test_get_new_command(set_help, output, script, help_text, result):\n    set_help(help_text)\n    assert get_new_command(Command(script, output))[0] == result\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_apt_invalid_operation.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_apt_invalid_operation.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}