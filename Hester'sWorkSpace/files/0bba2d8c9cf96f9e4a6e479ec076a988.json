{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport functools\n\nimport mock\nfrom django.template.loader import render_to_string\nfrom exam import fixture\n\nfrom sentry.interfaces.base import InterfaceValidationError\nfrom sentry.interfaces.stacktrace import (Frame, Stacktrace, get_context, is_url, slim_frame_data)\nfrom sentry.models import Event\nfrom sentry.testutils import TestCase\n\n\ndef test_is_url():\n    assert is_url('http://example.org/') is True\n    assert is_url('https://example.org/') is True\n    assert is_url('file:///tmp/filename') is True\n    assert is_url('applewebdata://00000000-0000-1000-8080-808080808080') is True\n    assert is_url('app:///index.bundle') is False   \n    assert is_url('webpack:///./app/index.jsx') is False  \n    assert is_url('data:,') is False\n    assert is_url('blob:\\x00') is False\n\n\nclass GetContextTest(TestCase):\n    def test_works_with_empty_filename(self):\n        result = get_context(0, 'hello world')\n        assert result == [(0, 'hello world')]\n\n\nclass StacktraceTest(TestCase):\n    @fixture\n    def interface(self):\n        return Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'filename': 'foo/bar.py'\n                    }, {\n                        'filename': 'foo/baz.py',\n                        'lineno': 1,\n                        'in_app': True,\n                    }\n                ]\n            )\n        )\n\n    def test_legacy_interface(self):\n        \n        \n        event = self.event\n        interface = Stacktrace.to_python(event.data['sentry.interfaces.Stacktrace'])\n        assert len(interface.frames) == 2\n        assert interface == event.interfaces['sentry.interfaces.Stacktrace']\n\n    def test_requires_filename(self):\n        with self.assertRaises(InterfaceValidationError):\n            Stacktrace.to_python(dict(frames=[{}]))\n\n        Stacktrace.to_python(dict(frames=[{\n            'filename': 'foo.py',\n        }]))\n        Stacktrace.to_python(dict(frames=[{\n            'lineno': 1,\n            'filename': 'foo.py',\n        }]))\n\n    def test_requires_frames(self):\n        with self.assertRaises(InterfaceValidationError):\n            Stacktrace.to_python({})\n\n        with self.assertRaises(InterfaceValidationError):\n            Stacktrace.to_python(dict(frames=[]))\n\n        with self.assertRaises(InterfaceValidationError):\n            Stacktrace.to_python(dict(frames=1))\n\n    def test_allows_abs_path_without_filename(self):\n        interface = Stacktrace.to_python(\n            dict(frames=[{\n                'lineno': 1,\n                'abs_path': 'foo/bar/baz.py',\n            }])\n        )\n        frame = interface.frames[0]\n        assert frame.filename == 'foo/bar/baz.py'\n        assert frame.abs_path == frame.filename\n\n    def test_coerces_url_filenames(self):\n        interface = Stacktrace.to_python(\n            dict(frames=[{\n                'lineno': 1,\n                'filename': 'http://foo.com/foo.js',\n            }])\n        )\n        frame = interface.frames[0]\n        assert frame.filename == '/foo.js'\n        assert frame.abs_path == 'http://foo.com/foo.js'\n\n    def test_does_not_overwrite_filename(self):\n        interface = Stacktrace.to_python(\n            dict(\n                frames=[{\n                    'lineno': 1,\n                    'filename': 'foo.js',\n                    'abs_path': 'http://foo.com/foo.js',\n                }]\n            )\n        )\n        frame = interface.frames[0]\n        assert frame.filename == 'foo.js'\n        assert frame.abs_path == 'http://foo.com/foo.js'\n\n    def test_ignores_results_with_empty_path(self):\n        interface = Stacktrace.to_python(\n            dict(frames=[{\n                'lineno': 1,\n                'filename': 'http://foo.com',\n            }])\n        )\n        frame = interface.frames[0]\n        assert frame.filename == 'http://foo.com'\n        assert frame.abs_path == frame.filename\n\n    def test_serialize_returns_frames(self):\n        interface = Stacktrace.to_python(dict(frames=[{\n            'lineno': 1,\n            'filename': 'foo.py',\n        }]))\n        result = interface.to_json()\n        assert 'frames' in result\n\n    def test_hash_without_system_frames(self):\n        interface = Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'lineno': 1,\n                        'filename': 'foo.py',\n                        'in_app': True,\n                    }, {\n                        'lineno': 1,\n                        'filename': 'bar.py',\n                        'in_app': None,\n                    }\n                ]\n            )\n        )\n        result = interface.get_hash(system_frames=False)\n        assert result == ['foo.py', 1]\n\n        result = interface.get_hash(system_frames=True)\n        assert result == ['foo.py', 1, 'bar.py', 1]\n\n    def test_compute_hashes(self):\n        interface = Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'lineno': 1,\n                        'filename': 'a/foo.py',\n                        'in_app': True,\n                    }, {\n                        'lineno': 1,\n                        'filename': 'a/bar.py',\n                        'in_app': None,\n                    }\n                ]\n            )\n        )\n        result = interface.compute_hashes('python')\n        assert result == [['a/foo.py', 1, 'a/bar.py', 1], ['a/foo.py', 1]]\n\n    def test_compute_hashes_cocoa(self):\n        interface = Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'lineno': 1,\n                        'filename': '/foo/bar/bar.m',\n                        'in_app': True,\n                    }, {\n                        'lineno': 1,\n                        'filename': '/foo/bar/baz.m',\n                        'in_app': None,\n                    }\n                ]\n            )\n        )\n        result = interface.compute_hashes('cocoa')\n        assert result == [['bar.m', 1, 'baz.m', 1], ['bar.m', 1]]\n\n    def test_get_hash_with_minimal_app_frames(self):\n        frames = [{\n            'lineno': 1,\n            'filename': 'foo.py',\n            'in_app': True,\n        }] + [{\n            'lineno': 1,\n            'filename': 'bar.py',\n            'in_app': False,\n        } for _ in range(11)]\n        interface = Stacktrace.to_python(dict(frames=frames))\n        result = interface.get_hash(system_frames=False)\n        assert not result\n\n    def test_get_hash_with_only_required_vars(self):\n        interface = Frame.to_python({\n            'lineno': 1,\n            'filename': 'foo.py',\n        })\n        result = interface.get_hash()\n        self.assertEquals(result, ['foo.py', 1])\n\n    def test_get_hash_sanitizes_block_functions(self):\n        \n        interface = Frame.to_python(\n            {\n                'filename': 'foo.py',\n                'function': 'block in _conditional_callback_around_233',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, ['foo.py', 'block'])\n\n    def test_get_hash_sanitizes_versioned_filenames(self):\n        \n        interface = Frame.to_python(\n            {\n                'filename': '/data/foo/releases/20140114151955/app/views/foo.html.erb',\n                'context_line': '<% if @hotels.size > 0 %>',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(\n            result, [\n                '/data/foo/releases/<version>/app/views/foo.html.erb',\n                '<% if @hotels.size > 0 %>',\n            ]\n        )\n\n        interface = Frame.to_python(\n            {\n                'filename': '20140114151955/app/views/foo.html.erb',\n                'context_line': '<% if @hotels.size > 0 %>',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(\n            result, [\n                '<version>/app/views/foo.html.erb',\n                '<% if @hotels.size > 0 %>',\n            ]\n        )\n\n    def test_get_hash_ignores_java8_lambda_module(self):\n        interface = Frame.to_python(\n            {\n                'module': 'foo.bar.Baz$$Lambda$40/1673859467',\n                'function': 'call',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, [\n            '<module>',\n            'call',\n        ])\n\n    def test_get_hash_ignores_java8_lambda_function(self):\n        interface = Frame.to_python({\n            'module': 'foo.bar.Baz',\n            'function': 'lambda$work$1',\n        })\n        result = interface.get_hash()\n        self.assertEquals(result, [\n            'foo.bar.Baz',\n            '<function>',\n        ])\n\n    def test_get_hash_ignores_ENHANCED_clojure_classes(self):\n        interface = Frame.to_python(\n            {\n                'module': 'sentry_clojure_example.core$_main$fn__1539',\n                'function': 'invoke'\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, [\n            'sentry_clojure_example.core$_main$fn__<auto>',\n            'invoke',\n        ])\n\n    def test_get_hash_ignores_extra_ENHANCED_clojure_classes(self):\n        interface = Frame.to_python(\n            {\n                'module': 'sentry_clojure_example.core$_main$fn__1539$fn__1540',\n                'function': 'invoke'\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(\n            result, [\n                'sentry_clojure_example.core$_main$fn__<auto>$fn__<auto>',\n                'invoke',\n            ]\n        )\n\n    def test_get_hash_ignores_ENHANCED_spring_classes(self):\n        interface = Frame.to_python(\n            {\n                'module':\n                'invalid.gruml.talkytalkyhub.common.config.'\n                'JipJipConfig$$EnhancerBySpringCGLIB$$1ebdddb0',\n                'function':\n                'jipJipManagementApplication'\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(\n            result, [\n                'invalid.gruml.talkytalkyhub.common.config.JipJipConfig'\n                '$$EnhancerBySpringCGLIB$$<auto>',\n                'jipJipManagementApplication',\n            ]\n        )\n\n    def test_get_hash_ignores_extra_ENHANCED_spring_classes(self):\n        interface = Frame.to_python(\n            {\n                'module':\n                'invalid.gruml.talkytalkyhub.common.config.'\n                'JipJipConfig$$EnhancerBySpringCGLIB$$1ebdddb0'\n                '$$EnhancerBySpringCGLIB$$8219cd38'\n                '$$FastClassBySpringCGLIB$$6c0b35d1',\n                'function':\n                'jipJipManagementApplication'\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(\n            result, [\n                'invalid.gruml.talkytalkyhub.common.config.JipJipConfig'\n                '$$EnhancerBySpringCGLIB$$<auto>$$EnhancerBySpringCGLIB$$<auto>'\n                '$$FastClassBySpringCGLIB$$<auto>',\n                'jipJipManagementApplication',\n            ]\n        )\n\n    def test_get_hash_ignores_sun_java_generated_methods(self):\n        interface = Frame.to_python(\n            {\n                'module': 'sun.reflect.GeneratedMethodAccessor12345',\n                'function': 'invoke',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, [\n            'sun.reflect.GeneratedMethodAccessor',\n            'invoke',\n        ])\n\n    def test_get_hash_sanitizes_erb_templates(self):\n        \n        interface = Frame.to_python(\n            {\n                'filename': 'foo.html.erb',\n                'function': '_foo_html_erb__3327151541118998292_70361296749460',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, [\n            'foo.html.erb',\n            '_foo_html_erb__<anon>_<anon>',\n        ])\n\n    def test_get_hash_ignores_filename_if_blob(self):\n        interface = Frame.to_python(\n            {\n                'filename': 'blob:http://example.com/7f7aaadf-a006-4217-9ed5-5fbf8585c6c0',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, [])\n\n    def test_get_hash_ignores_filename_if_http(self):\n        interface = Frame.to_python(\n            {\n                'context_line': 'hello world',\n                'filename': 'http://foo.com/foo.py',\n                'function': 'test',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, ['hello world'])\n\n    def test_get_hash_ignores_filename_if_https(self):\n        interface = Frame.to_python(\n            {\n                'context_line': 'hello world',\n                'filename': 'https://foo.com/foo.py',\n                'function': 'test',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, ['hello world'])\n\n    def test_get_hash_ignores_filename_if_abs_path_is_http(self):\n        interface = Frame.to_python(\n            {\n                'context_line': 'hello world',\n                'abs_path': 'https://foo.com/foo.py',\n                'function': 'test',\n                'filename': 'foo.py',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, ['hello world'])\n\n    def test_get_hash_uses_module_over_filename(self):\n        interface = Frame.to_python({'lineno': 1, 'filename': 'foo.py', 'module': 'foo'})\n        result = interface.get_hash()\n        self.assertEquals(result, ['foo', 1])\n\n    def test_get_hash_uses_function_over_lineno(self):\n        interface = Frame.to_python({'lineno': 1, 'filename': 'foo.py', 'function': 'bar'})\n        result = interface.get_hash()\n        self.assertEquals(result, ['foo.py', 'bar'])\n\n    def test_get_hash_uses_context_line_over_function(self):\n        interface = Frame.to_python(\n            {\n                'context_line': 'foo bar',\n                'lineno': 1,\n                'filename': 'foo.py',\n                'function': 'bar'\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, ['foo.py', 'foo bar'])\n\n    def test_get_hash_discards_seemingly_useless_stack(self):\n        interface = Stacktrace.to_python(\n            {\n                'frames': [\n                    {\n                        'context_line': '<HTML>',\n                        'lineno': 1,\n                        'abs_path': 'http://example.com/foo',\n                        'filename': 'foo',\n                        'function': '?',\n                    }\n                ],\n            }\n        )\n        result = interface.get_hash()\n        assert result == []\n\n    def test_get_hash_does_not_discard_non_urls(self):\n        interface = Stacktrace.to_python(\n            {\n                'frames': [\n                    {\n                        'context_line': '<HTML>',\n                        'lineno': 1,\n                        'abs_path': 'foo',\n                        'filename': 'foo',\n                        'function': '?',\n                    }\n                ],\n            }\n        )\n        result = interface.get_hash()\n        assert result != []\n\n    def test_get_hash_excludes_single_frame_urls(self):\n        \"\"\"\n        Browser JS will often throw errors (from inlined code in an HTML page)\n        which contain only a single frame, no function name, and have the HTML\n        document as the filename.\n\n        In this case the hash is often not usable as the context cannot be\n        trusted and the URL is dynamic.\n        \"\"\"\n        interface = Stacktrace.to_python(\n            {\n                'frames': [\n                    {\n                        'context_line': 'hello world',\n                        'abs_path': 'http://foo.com/bar/',\n                        'lineno': 107,\n                        'filename': '/bar/',\n                        'module': '<unknown module>',\n                    }\n                ],\n            }\n        )\n        result = interface.get_hash()\n        assert result == []\n\n    def test_collapse_recursion(self):\n        interface = Stacktrace.to_python(\n            {\n                'frames': [\n                    {\n                        'abs_path': 'Application.java',\n                        'filename': 'Application.java',\n                        'function': 'main',\n                        'in_app': False,\n                        'lineno': 13,\n                        'module': 'io.sentry.example.Application'\n                    },\n                    {\n                        'abs_path': 'Application.java',\n                        'filename': 'Application.java',\n                        'function': 'normalFunc',\n                        'in_app': False,\n                        'lineno': 20,\n                        'module': 'io.sentry.example.Application'\n                    },\n                    {\n                        'abs_path': 'Application.java',\n                        'filename': 'Application.java',\n                        'function': 'recurFunc',\n                        'in_app': False,\n                        'lineno': 27,\n                        'module': 'io.sentry.example.Application'\n                    },\n                    {\n                        'abs_path': 'Application.java',\n                        'filename': 'Application.java',\n                        'function': 'recurFunc',\n                        'in_app': False,\n                        'lineno': 27,\n                        'module': 'io.sentry.example.Application'\n                    },\n                    {\n                        'abs_path': 'Application.java',\n                        'filename': 'Application.java',\n                        'function': 'recurFunc',\n                        'in_app': False,\n                        'lineno': 27,\n                        'module': 'io.sentry.example.Application'\n                    },\n                    {\n                        'abs_path': 'Application.java',\n                        'filename': 'Application.java',\n                        'function': 'recurFunc',\n                        'in_app': False,\n                        'lineno': 25,\n                        'module': 'io.sentry.example.Application'\n                    },\n                    {\n                        'abs_path': 'Application.java',\n                        'filename': 'Application.java',\n                        'function': 'throwError',\n                        'in_app': False,\n                        'lineno': 32,\n                        'module': 'io.sentry.example.Application'\n                    }\n                ]\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, [\n            'io.sentry.example.Application', 'main',\n            'io.sentry.example.Application', 'normalFunc',\n            \n            'io.sentry.example.Application', 'recurFunc',\n            # (exact) recursive frames omitted here\n            # call from *different location* in recursive function\n            'io.sentry.example.Application', 'recurFunc',\n            'io.sentry.example.Application', 'throwError'\n        ])\n\n    def test_get_hash_ignores_safari_native_code(self):\n        interface = Frame.to_python(\n            {\n                'abs_path': '[native code]',\n                'filename': '[native code]',\n                'function': 'forEach',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, [])\n\n    def test_cocoa_culprit(self):\n        stacktrace = Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'filename': 'foo/baz.c',\n                        'package': '/foo/bar/baz.dylib',\n                        'lineno': 1,\n                        'in_app': True,\n                        'function': '-[CRLCrashAsyncSafeThread crash]',\n                    }\n                ]\n            )\n        )\n        assert stacktrace.get_culprit_string(platform='cocoa') == '-[CRLCrashAsyncSafeThread crash]'\n\n    def test_emoji_culprit(self):\n        stacktrace = Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'filename': 'foo/baz.c',\n                        'package': '/foo/bar/baz.dylib',\n                        'module': u'\\U0001f62d',\n                        'lineno': 1,\n                        'in_app': True,\n                        'function': u'\\U0001f60d',\n                    }\n                ]\n            )\n        )\n        assert stacktrace.get_culprit_string(platform='javascript') == u'\\U0001f60d(\\U0001f62d)'\n\n    def test_cocoa_strict_stacktrace(self):\n        stacktrace = Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'filename': 'foo/baz.c',\n                        'package': '/foo/bar/libswiftCore.dylib',\n                        'lineno': 1,\n                        'in_app': False,\n                        'function': 'fooBar',\n                    }, {\n                        'package': '/foo/bar/MyApp',\n                        'in_app': True,\n                        'function': 'fooBar2',\n                    }, {\n                        'filename': 'Mycontroller.swift',\n                        'package': '/foo/bar/MyApp',\n                        'in_app': True,\n                        'function': '-[CRLCrashAsyncSafeThread crash]',\n                    }\n                ]\n            )\n        )\n        assert stacktrace.get_culprit_string(platform='cocoa') == '-[CRLCrashAsyncSafeThread crash]'\n\n    def test_get_hash_does_not_group_different_js_errors(self):\n        interface = Stacktrace.to_python(\n            {\n                'frames': [\n                    {\n                        'context_line': '{snip}',\n                        'lineno': 20,\n                        'filename': 'https://foo.com/index.js',\n                        'function': '?',\n                    }\n                ],\n            }\n        )\n        result = interface.get_hash()\n        assert result == []\n\n    def test_get_hash_uses_symbol_instead_of_function(self):\n        interface = Frame.to_python(\n            {\n                'module': 'libfoo',\n                'function': 'int main()',\n                'symbol': '_main',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, [\n            'libfoo',\n            '_main',\n        ])\n\n    def test_get_hash_skips_symbol_if_unknown(self):\n        interface = Frame.to_python({\n            'module': 'libfoo',\n            'function': 'main',\n            'symbol': '?',\n        })\n        result = interface.get_hash()\n        self.assertEquals(result, [\n            'libfoo',\n            'main',\n        ])\n\n    @mock.patch('sentry.interfaces.stacktrace.Stacktrace.get_stacktrace')\n    def test_to_string_returns_stacktrace(self, get_stacktrace):\n        event = mock.Mock(spec=Event())\n        interface = Stacktrace(frames=[])\n        result = interface.to_string(event)\n        get_stacktrace.assert_called_once_with(event, system_frames=False, max_frames=10)\n        self.assertEquals(result, get_stacktrace.return_value)\n\n    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))\n    @mock.patch('sentry.interfaces.stacktrace.Stacktrace.get_stacktrace')\n    def test_get_traceback_response(self, get_stacktrace):\n        event = mock.Mock(spec=Event())\n        event.message = 'foo'\n        get_stacktrace.return_value = 'bar'\n        interface = Stacktrace.to_python(dict(frames=[{'lineno': 1, 'filename': 'foo.py'}]))\n        result = interface.get_traceback(event)\n        get_stacktrace.assert_called_once_with(event, newest_first=None)\n        self.assertEquals(result, 'foo\\n\\nbar')\n\n    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))\n    def test_get_stacktrace_with_only_filename(self):\n        event = mock.Mock(spec=Event())\n        interface = Stacktrace.to_python(dict(frames=[{'filename': 'foo'}, {'filename': 'bar'}]))\n        result = interface.get_stacktrace(event)\n        self.assertEquals(\n            result, 'Stacktrace (most recent call last):\\n\\n  File \"foo\"\\n  File \"bar\"'\n        )\n\n    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))\n    def test_get_stacktrace_with_module(self):\n        event = mock.Mock(spec=Event())\n        interface = Stacktrace.to_python(dict(frames=[{'module': 'foo'}, {'module': 'bar'}]))\n        result = interface.get_stacktrace(event)\n        self.assertEquals(\n            result, 'Stacktrace (most recent call last):\\n\\n  Module \"foo\"\\n  Module \"bar\"'\n        )\n\n    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))\n    def test_get_stacktrace_with_filename_and_function(self):\n        event = mock.Mock(spec=Event())\n        interface = Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'filename': 'foo',\n                        'function': 'biz'\n                    }, {\n                        'filename': 'bar',\n                        'function': 'baz'\n                    }\n                ]\n            )\n        )\n        result = interface.get_stacktrace(event)\n        self.assertEquals(\n            result,\n            'Stacktrace (most recent call last):\\n\\n  File \"foo\", in biz\\n  File \"bar\", in baz'\n        )\n\n    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))\n    def test_get_stacktrace_with_filename_function_lineno_and_context(self):\n        event = mock.Mock(spec=Event())\n        interface = Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'filename': 'foo',\n                        'function': 'biz',\n                        'lineno': 3,\n                        'context_line': '  def foo(r):'\n                    },\n                    {\n                        'filename': 'bar',\n                        'function': 'baz',\n                        'lineno': 5,\n                        'context_line': '    return None'\n                    },\n                ]\n            )\n        )\n        result = interface.get_stacktrace(event)\n        self.assertEquals(\n            result,\n            'Stacktrace (most recent call last):\\n\\n  File \"foo\", line 3, in biz\\n    def foo(r):\\n  File \"bar\", line 5, in baz\\n    return None'\n        )\n\n    def test_bad_input(self):\n        with self.assertRaises(InterfaceValidationError):\n            Frame.to_python({\n                'filename': 1,\n            })\n\n        with self.assertRaises(InterfaceValidationError):\n            Frame.to_python({\n                'filename': 'foo',\n                'abs_path': 1,\n            })\n\n        with self.assertRaises(InterfaceValidationError):\n            Frame.to_python({\n                'function': 1,\n            })\n\n        with self.assertRaises(InterfaceValidationError):\n            Frame.to_python({\n                'module': 1,\n            })\n\n        with self.assertRaises(InterfaceValidationError):\n            Frame.to_python({\n                'function': '?',\n            })\n\n    def test_context_with_nan(self):\n        self.assertEquals(\n            Frame.to_python({\n                'filename': 'x',\n                'vars': {\n                    'x': float('inf')\n                },\n            }).vars,\n            {'x': '<inf>'},\n        )\n        self.assertEquals(\n            Frame.to_python({\n                'filename': 'x',\n                'vars': {\n                    'x': float('-inf')\n                },\n            }).vars,\n            {'x': '<-inf>'},\n        )\n        self.assertEquals(\n            Frame.to_python({\n                'filename': 'x',\n                'vars': {\n                    'x': float('nan')\n                },\n            }).vars,\n            {'x': '<nan>'},\n        )\n\n    def test_address_normalization(self):\n        interface = Frame.to_python(\n            {\n                'lineno': 1,\n                'filename': 'blah.c',\n                'function': 'main',\n                'instruction_addr': 123456,\n                'symbol_addr': '123450',\n                'image_addr': '0x0',\n            }\n        )\n        assert interface.instruction_addr == '0x1e240'\n        assert interface.symbol_addr == '0x1e23a'\n        assert interface.image_addr == '0x0'\n\n\nclass SlimFrameDataTest(TestCase):\n    def test_under_max(self):\n        interface = Stacktrace.to_python({'frames': [{'filename': 'foo'}]})\n        slim_frame_data(interface, 4)\n        assert len(interface.frames) == 1\n        assert not interface.frames_omitted\n\n    def test_over_max(self):\n        values = []\n        for n in range(5):\n            values.append(\n                {\n                    'filename': 'frame %d' % n,\n                    'vars': {\n                        'foo': 'bar'\n                    },\n                    'context_line': 'b',\n                    'pre_context': ['a'],\n                    'post_context': ['c'],\n                }\n            )\n        interface = Stacktrace.to_python({'frames': values})\n        slim_frame_data(interface, 4)\n\n        assert len(interface.frames) == 5\n\n        for value, num in zip(interface.frames[:2], range(2)):\n            assert value.filename == 'frame %d' % num\n            assert value.vars is not None\n            assert value.pre_context is not None\n            assert value.post_context is not None\n\n        for value, num in zip(interface.frames[3:], range(3, 5)):\n            assert value.filename == 'frame %d' % num\n            assert value.vars is not None\n            assert value.pre_context is not None\n            assert value.post_context is not None\n\n        value = interface.frames[2]\n        assert value.filename == 'frame 2'\n        assert not value.vars\n        assert not value.pre_context\n        assert not value.post_context\n\n\ndef test_java_frame_rendering():\n    render = functools.partial(render_to_string, 'sentry/partial/frames/java.txt')\n\n    \n    assert render(\n        {\n            'module': 'com.getsentry.example.Example',\n            'function': 'test',\n            'filename': 'Example.java',\n            'lineno': 1,\n        }\n    ).strip() == 'at com.getsentry.example.Example.test(Example.java:1)'\n\n    \n    assert render({\n        'module': 'com.getsentry.example.Example',\n        'function': 'test',\n        'lineno': 1,\n    }).strip() == 'at com.getsentry.example.Example.test'\n\n    # (This shouldn't happen, but...)\n    assert render(\n        {\n            'module': 'com.getsentry.example.Example',\n            'function': 'test',\n            'filename': 'foo/bar/Example.java',\n            'lineno': 1,\n        }\n    ).strip() == 'at com.getsentry.example.Example.test(Example.java:1)'\n\n    \n    assert render({\n        'function': 'test',\n        'filename': 'Example.java',\n        'lineno': -2,\n    }).strip() == 'at test(Example.java)'\n\n    assert render({\n        'function': 'test',\n        'filename': 'Example.java',\n        'lineno': 1,\n    }).strip() == 'at test(Example.java:1)'\n", "comments": "            browser js often throw errors (from inlined code html page)         contain single frame  function name  html         document filename           in case hash often usable context cannot         trusted url dynamic                     coding  utf 8        react native    webpack bundle    simple test ensure legacy data works correctly   frame      objects    this ruby specific    this ruby specific    this ruby specific    first call recursive function    (exact) recursive frames omitted    call  different location  recursive function    this ideal case     legacy support frames without filename     (this happen    )    native methods line numbers  ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport functools\n\nimport mock\nfrom django.template.loader import render_to_string\nfrom exam import fixture\n\nfrom sentry.interfaces.base import InterfaceValidationError\nfrom sentry.interfaces.stacktrace import (Frame, Stacktrace, get_context, is_url, slim_frame_data)\nfrom sentry.models import Event\nfrom sentry.testutils import TestCase\n\n\ndef test_is_url():\n    assert is_url('http://example.org/') is True\n    assert is_url('https://example.org/') is True\n    assert is_url('file:///tmp/filename') is True\n    assert is_url('applewebdata://00000000-0000-1000-8080-808080808080') is True\n    assert is_url('app:///index.bundle') is False   # react native\n    assert is_url('webpack:///./app/index.jsx') is False  # webpack bundle\n    assert is_url('data:,') is False\n    assert is_url('blob:\\x00') is False\n\n\nclass GetContextTest(TestCase):\n    def test_works_with_empty_filename(self):\n        result = get_context(0, 'hello world')\n        assert result == [(0, 'hello world')]\n\n\nclass StacktraceTest(TestCase):\n    @fixture\n    def interface(self):\n        return Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'filename': 'foo/bar.py'\n                    }, {\n                        'filename': 'foo/baz.py',\n                        'lineno': 1,\n                        'in_app': True,\n                    }\n                ]\n            )\n        )\n\n    def test_legacy_interface(self):\n        # Simple test to ensure legacy data works correctly with the ``Frame``\n        # objects\n        event = self.event\n        interface = Stacktrace.to_python(event.data['sentry.interfaces.Stacktrace'])\n        assert len(interface.frames) == 2\n        assert interface == event.interfaces['sentry.interfaces.Stacktrace']\n\n    def test_requires_filename(self):\n        with self.assertRaises(InterfaceValidationError):\n            Stacktrace.to_python(dict(frames=[{}]))\n\n        Stacktrace.to_python(dict(frames=[{\n            'filename': 'foo.py',\n        }]))\n        Stacktrace.to_python(dict(frames=[{\n            'lineno': 1,\n            'filename': 'foo.py',\n        }]))\n\n    def test_requires_frames(self):\n        with self.assertRaises(InterfaceValidationError):\n            Stacktrace.to_python({})\n\n        with self.assertRaises(InterfaceValidationError):\n            Stacktrace.to_python(dict(frames=[]))\n\n        with self.assertRaises(InterfaceValidationError):\n            Stacktrace.to_python(dict(frames=1))\n\n    def test_allows_abs_path_without_filename(self):\n        interface = Stacktrace.to_python(\n            dict(frames=[{\n                'lineno': 1,\n                'abs_path': 'foo/bar/baz.py',\n            }])\n        )\n        frame = interface.frames[0]\n        assert frame.filename == 'foo/bar/baz.py'\n        assert frame.abs_path == frame.filename\n\n    def test_coerces_url_filenames(self):\n        interface = Stacktrace.to_python(\n            dict(frames=[{\n                'lineno': 1,\n                'filename': 'http://foo.com/foo.js',\n            }])\n        )\n        frame = interface.frames[0]\n        assert frame.filename == '/foo.js'\n        assert frame.abs_path == 'http://foo.com/foo.js'\n\n    def test_does_not_overwrite_filename(self):\n        interface = Stacktrace.to_python(\n            dict(\n                frames=[{\n                    'lineno': 1,\n                    'filename': 'foo.js',\n                    'abs_path': 'http://foo.com/foo.js',\n                }]\n            )\n        )\n        frame = interface.frames[0]\n        assert frame.filename == 'foo.js'\n        assert frame.abs_path == 'http://foo.com/foo.js'\n\n    def test_ignores_results_with_empty_path(self):\n        interface = Stacktrace.to_python(\n            dict(frames=[{\n                'lineno': 1,\n                'filename': 'http://foo.com',\n            }])\n        )\n        frame = interface.frames[0]\n        assert frame.filename == 'http://foo.com'\n        assert frame.abs_path == frame.filename\n\n    def test_serialize_returns_frames(self):\n        interface = Stacktrace.to_python(dict(frames=[{\n            'lineno': 1,\n            'filename': 'foo.py',\n        }]))\n        result = interface.to_json()\n        assert 'frames' in result\n\n    def test_hash_without_system_frames(self):\n        interface = Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'lineno': 1,\n                        'filename': 'foo.py',\n                        'in_app': True,\n                    }, {\n                        'lineno': 1,\n                        'filename': 'bar.py',\n                        'in_app': None,\n                    }\n                ]\n            )\n        )\n        result = interface.get_hash(system_frames=False)\n        assert result == ['foo.py', 1]\n\n        result = interface.get_hash(system_frames=True)\n        assert result == ['foo.py', 1, 'bar.py', 1]\n\n    def test_compute_hashes(self):\n        interface = Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'lineno': 1,\n                        'filename': 'a/foo.py',\n                        'in_app': True,\n                    }, {\n                        'lineno': 1,\n                        'filename': 'a/bar.py',\n                        'in_app': None,\n                    }\n                ]\n            )\n        )\n        result = interface.compute_hashes('python')\n        assert result == [['a/foo.py', 1, 'a/bar.py', 1], ['a/foo.py', 1]]\n\n    def test_compute_hashes_cocoa(self):\n        interface = Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'lineno': 1,\n                        'filename': '/foo/bar/bar.m',\n                        'in_app': True,\n                    }, {\n                        'lineno': 1,\n                        'filename': '/foo/bar/baz.m',\n                        'in_app': None,\n                    }\n                ]\n            )\n        )\n        result = interface.compute_hashes('cocoa')\n        assert result == [['bar.m', 1, 'baz.m', 1], ['bar.m', 1]]\n\n    def test_get_hash_with_minimal_app_frames(self):\n        frames = [{\n            'lineno': 1,\n            'filename': 'foo.py',\n            'in_app': True,\n        }] + [{\n            'lineno': 1,\n            'filename': 'bar.py',\n            'in_app': False,\n        } for _ in range(11)]\n        interface = Stacktrace.to_python(dict(frames=frames))\n        result = interface.get_hash(system_frames=False)\n        assert not result\n\n    def test_get_hash_with_only_required_vars(self):\n        interface = Frame.to_python({\n            'lineno': 1,\n            'filename': 'foo.py',\n        })\n        result = interface.get_hash()\n        self.assertEquals(result, ['foo.py', 1])\n\n    def test_get_hash_sanitizes_block_functions(self):\n        # This is Ruby specific\n        interface = Frame.to_python(\n            {\n                'filename': 'foo.py',\n                'function': 'block in _conditional_callback_around_233',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, ['foo.py', 'block'])\n\n    def test_get_hash_sanitizes_versioned_filenames(self):\n        # This is Ruby specific\n        interface = Frame.to_python(\n            {\n                'filename': '/data/foo/releases/20140114151955/app/views/foo.html.erb',\n                'context_line': '<% if @hotels.size > 0 %>',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(\n            result, [\n                '/data/foo/releases/<version>/app/views/foo.html.erb',\n                '<% if @hotels.size > 0 %>',\n            ]\n        )\n\n        interface = Frame.to_python(\n            {\n                'filename': '20140114151955/app/views/foo.html.erb',\n                'context_line': '<% if @hotels.size > 0 %>',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(\n            result, [\n                '<version>/app/views/foo.html.erb',\n                '<% if @hotels.size > 0 %>',\n            ]\n        )\n\n    def test_get_hash_ignores_java8_lambda_module(self):\n        interface = Frame.to_python(\n            {\n                'module': 'foo.bar.Baz$$Lambda$40/1673859467',\n                'function': 'call',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, [\n            '<module>',\n            'call',\n        ])\n\n    def test_get_hash_ignores_java8_lambda_function(self):\n        interface = Frame.to_python({\n            'module': 'foo.bar.Baz',\n            'function': 'lambda$work$1',\n        })\n        result = interface.get_hash()\n        self.assertEquals(result, [\n            'foo.bar.Baz',\n            '<function>',\n        ])\n\n    def test_get_hash_ignores_ENHANCED_clojure_classes(self):\n        interface = Frame.to_python(\n            {\n                'module': 'sentry_clojure_example.core$_main$fn__1539',\n                'function': 'invoke'\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, [\n            'sentry_clojure_example.core$_main$fn__<auto>',\n            'invoke',\n        ])\n\n    def test_get_hash_ignores_extra_ENHANCED_clojure_classes(self):\n        interface = Frame.to_python(\n            {\n                'module': 'sentry_clojure_example.core$_main$fn__1539$fn__1540',\n                'function': 'invoke'\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(\n            result, [\n                'sentry_clojure_example.core$_main$fn__<auto>$fn__<auto>',\n                'invoke',\n            ]\n        )\n\n    def test_get_hash_ignores_ENHANCED_spring_classes(self):\n        interface = Frame.to_python(\n            {\n                'module':\n                'invalid.gruml.talkytalkyhub.common.config.'\n                'JipJipConfig$$EnhancerBySpringCGLIB$$1ebdddb0',\n                'function':\n                'jipJipManagementApplication'\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(\n            result, [\n                'invalid.gruml.talkytalkyhub.common.config.JipJipConfig'\n                '$$EnhancerBySpringCGLIB$$<auto>',\n                'jipJipManagementApplication',\n            ]\n        )\n\n    def test_get_hash_ignores_extra_ENHANCED_spring_classes(self):\n        interface = Frame.to_python(\n            {\n                'module':\n                'invalid.gruml.talkytalkyhub.common.config.'\n                'JipJipConfig$$EnhancerBySpringCGLIB$$1ebdddb0'\n                '$$EnhancerBySpringCGLIB$$8219cd38'\n                '$$FastClassBySpringCGLIB$$6c0b35d1',\n                'function':\n                'jipJipManagementApplication'\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(\n            result, [\n                'invalid.gruml.talkytalkyhub.common.config.JipJipConfig'\n                '$$EnhancerBySpringCGLIB$$<auto>$$EnhancerBySpringCGLIB$$<auto>'\n                '$$FastClassBySpringCGLIB$$<auto>',\n                'jipJipManagementApplication',\n            ]\n        )\n\n    def test_get_hash_ignores_sun_java_generated_methods(self):\n        interface = Frame.to_python(\n            {\n                'module': 'sun.reflect.GeneratedMethodAccessor12345',\n                'function': 'invoke',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, [\n            'sun.reflect.GeneratedMethodAccessor',\n            'invoke',\n        ])\n\n    def test_get_hash_sanitizes_erb_templates(self):\n        # This is Ruby specific\n        interface = Frame.to_python(\n            {\n                'filename': 'foo.html.erb',\n                'function': '_foo_html_erb__3327151541118998292_70361296749460',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, [\n            'foo.html.erb',\n            '_foo_html_erb__<anon>_<anon>',\n        ])\n\n    def test_get_hash_ignores_filename_if_blob(self):\n        interface = Frame.to_python(\n            {\n                'filename': 'blob:http://example.com/7f7aaadf-a006-4217-9ed5-5fbf8585c6c0',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, [])\n\n    def test_get_hash_ignores_filename_if_http(self):\n        interface = Frame.to_python(\n            {\n                'context_line': 'hello world',\n                'filename': 'http://foo.com/foo.py',\n                'function': 'test',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, ['hello world'])\n\n    def test_get_hash_ignores_filename_if_https(self):\n        interface = Frame.to_python(\n            {\n                'context_line': 'hello world',\n                'filename': 'https://foo.com/foo.py',\n                'function': 'test',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, ['hello world'])\n\n    def test_get_hash_ignores_filename_if_abs_path_is_http(self):\n        interface = Frame.to_python(\n            {\n                'context_line': 'hello world',\n                'abs_path': 'https://foo.com/foo.py',\n                'function': 'test',\n                'filename': 'foo.py',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, ['hello world'])\n\n    def test_get_hash_uses_module_over_filename(self):\n        interface = Frame.to_python({'lineno': 1, 'filename': 'foo.py', 'module': 'foo'})\n        result = interface.get_hash()\n        self.assertEquals(result, ['foo', 1])\n\n    def test_get_hash_uses_function_over_lineno(self):\n        interface = Frame.to_python({'lineno': 1, 'filename': 'foo.py', 'function': 'bar'})\n        result = interface.get_hash()\n        self.assertEquals(result, ['foo.py', 'bar'])\n\n    def test_get_hash_uses_context_line_over_function(self):\n        interface = Frame.to_python(\n            {\n                'context_line': 'foo bar',\n                'lineno': 1,\n                'filename': 'foo.py',\n                'function': 'bar'\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, ['foo.py', 'foo bar'])\n\n    def test_get_hash_discards_seemingly_useless_stack(self):\n        interface = Stacktrace.to_python(\n            {\n                'frames': [\n                    {\n                        'context_line': '<HTML>',\n                        'lineno': 1,\n                        'abs_path': 'http://example.com/foo',\n                        'filename': 'foo',\n                        'function': '?',\n                    }\n                ],\n            }\n        )\n        result = interface.get_hash()\n        assert result == []\n\n    def test_get_hash_does_not_discard_non_urls(self):\n        interface = Stacktrace.to_python(\n            {\n                'frames': [\n                    {\n                        'context_line': '<HTML>',\n                        'lineno': 1,\n                        'abs_path': 'foo',\n                        'filename': 'foo',\n                        'function': '?',\n                    }\n                ],\n            }\n        )\n        result = interface.get_hash()\n        assert result != []\n\n    def test_get_hash_excludes_single_frame_urls(self):\n        \"\"\"\n        Browser JS will often throw errors (from inlined code in an HTML page)\n        which contain only a single frame, no function name, and have the HTML\n        document as the filename.\n\n        In this case the hash is often not usable as the context cannot be\n        trusted and the URL is dynamic.\n        \"\"\"\n        interface = Stacktrace.to_python(\n            {\n                'frames': [\n                    {\n                        'context_line': 'hello world',\n                        'abs_path': 'http://foo.com/bar/',\n                        'lineno': 107,\n                        'filename': '/bar/',\n                        'module': '<unknown module>',\n                    }\n                ],\n            }\n        )\n        result = interface.get_hash()\n        assert result == []\n\n    def test_collapse_recursion(self):\n        interface = Stacktrace.to_python(\n            {\n                'frames': [\n                    {\n                        'abs_path': 'Application.java',\n                        'filename': 'Application.java',\n                        'function': 'main',\n                        'in_app': False,\n                        'lineno': 13,\n                        'module': 'io.sentry.example.Application'\n                    },\n                    {\n                        'abs_path': 'Application.java',\n                        'filename': 'Application.java',\n                        'function': 'normalFunc',\n                        'in_app': False,\n                        'lineno': 20,\n                        'module': 'io.sentry.example.Application'\n                    },\n                    {\n                        'abs_path': 'Application.java',\n                        'filename': 'Application.java',\n                        'function': 'recurFunc',\n                        'in_app': False,\n                        'lineno': 27,\n                        'module': 'io.sentry.example.Application'\n                    },\n                    {\n                        'abs_path': 'Application.java',\n                        'filename': 'Application.java',\n                        'function': 'recurFunc',\n                        'in_app': False,\n                        'lineno': 27,\n                        'module': 'io.sentry.example.Application'\n                    },\n                    {\n                        'abs_path': 'Application.java',\n                        'filename': 'Application.java',\n                        'function': 'recurFunc',\n                        'in_app': False,\n                        'lineno': 27,\n                        'module': 'io.sentry.example.Application'\n                    },\n                    {\n                        'abs_path': 'Application.java',\n                        'filename': 'Application.java',\n                        'function': 'recurFunc',\n                        'in_app': False,\n                        'lineno': 25,\n                        'module': 'io.sentry.example.Application'\n                    },\n                    {\n                        'abs_path': 'Application.java',\n                        'filename': 'Application.java',\n                        'function': 'throwError',\n                        'in_app': False,\n                        'lineno': 32,\n                        'module': 'io.sentry.example.Application'\n                    }\n                ]\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, [\n            'io.sentry.example.Application', 'main',\n            'io.sentry.example.Application', 'normalFunc',\n            # first call to recursive function\n            'io.sentry.example.Application', 'recurFunc',\n            # (exact) recursive frames omitted here\n            # call from *different location* in recursive function\n            'io.sentry.example.Application', 'recurFunc',\n            'io.sentry.example.Application', 'throwError'\n        ])\n\n    def test_get_hash_ignores_safari_native_code(self):\n        interface = Frame.to_python(\n            {\n                'abs_path': '[native code]',\n                'filename': '[native code]',\n                'function': 'forEach',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, [])\n\n    def test_cocoa_culprit(self):\n        stacktrace = Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'filename': 'foo/baz.c',\n                        'package': '/foo/bar/baz.dylib',\n                        'lineno': 1,\n                        'in_app': True,\n                        'function': '-[CRLCrashAsyncSafeThread crash]',\n                    }\n                ]\n            )\n        )\n        assert stacktrace.get_culprit_string(platform='cocoa') == '-[CRLCrashAsyncSafeThread crash]'\n\n    def test_emoji_culprit(self):\n        stacktrace = Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'filename': 'foo/baz.c',\n                        'package': '/foo/bar/baz.dylib',\n                        'module': u'\\U0001f62d',\n                        'lineno': 1,\n                        'in_app': True,\n                        'function': u'\\U0001f60d',\n                    }\n                ]\n            )\n        )\n        assert stacktrace.get_culprit_string(platform='javascript') == u'\\U0001f60d(\\U0001f62d)'\n\n    def test_cocoa_strict_stacktrace(self):\n        stacktrace = Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'filename': 'foo/baz.c',\n                        'package': '/foo/bar/libswiftCore.dylib',\n                        'lineno': 1,\n                        'in_app': False,\n                        'function': 'fooBar',\n                    }, {\n                        'package': '/foo/bar/MyApp',\n                        'in_app': True,\n                        'function': 'fooBar2',\n                    }, {\n                        'filename': 'Mycontroller.swift',\n                        'package': '/foo/bar/MyApp',\n                        'in_app': True,\n                        'function': '-[CRLCrashAsyncSafeThread crash]',\n                    }\n                ]\n            )\n        )\n        assert stacktrace.get_culprit_string(platform='cocoa') == '-[CRLCrashAsyncSafeThread crash]'\n\n    def test_get_hash_does_not_group_different_js_errors(self):\n        interface = Stacktrace.to_python(\n            {\n                'frames': [\n                    {\n                        'context_line': '{snip}',\n                        'lineno': 20,\n                        'filename': 'https://foo.com/index.js',\n                        'function': '?',\n                    }\n                ],\n            }\n        )\n        result = interface.get_hash()\n        assert result == []\n\n    def test_get_hash_uses_symbol_instead_of_function(self):\n        interface = Frame.to_python(\n            {\n                'module': 'libfoo',\n                'function': 'int main()',\n                'symbol': '_main',\n            }\n        )\n        result = interface.get_hash()\n        self.assertEquals(result, [\n            'libfoo',\n            '_main',\n        ])\n\n    def test_get_hash_skips_symbol_if_unknown(self):\n        interface = Frame.to_python({\n            'module': 'libfoo',\n            'function': 'main',\n            'symbol': '?',\n        })\n        result = interface.get_hash()\n        self.assertEquals(result, [\n            'libfoo',\n            'main',\n        ])\n\n    @mock.patch('sentry.interfaces.stacktrace.Stacktrace.get_stacktrace')\n    def test_to_string_returns_stacktrace(self, get_stacktrace):\n        event = mock.Mock(spec=Event())\n        interface = Stacktrace(frames=[])\n        result = interface.to_string(event)\n        get_stacktrace.assert_called_once_with(event, system_frames=False, max_frames=10)\n        self.assertEquals(result, get_stacktrace.return_value)\n\n    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))\n    @mock.patch('sentry.interfaces.stacktrace.Stacktrace.get_stacktrace')\n    def test_get_traceback_response(self, get_stacktrace):\n        event = mock.Mock(spec=Event())\n        event.message = 'foo'\n        get_stacktrace.return_value = 'bar'\n        interface = Stacktrace.to_python(dict(frames=[{'lineno': 1, 'filename': 'foo.py'}]))\n        result = interface.get_traceback(event)\n        get_stacktrace.assert_called_once_with(event, newest_first=None)\n        self.assertEquals(result, 'foo\\n\\nbar')\n\n    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))\n    def test_get_stacktrace_with_only_filename(self):\n        event = mock.Mock(spec=Event())\n        interface = Stacktrace.to_python(dict(frames=[{'filename': 'foo'}, {'filename': 'bar'}]))\n        result = interface.get_stacktrace(event)\n        self.assertEquals(\n            result, 'Stacktrace (most recent call last):\\n\\n  File \"foo\"\\n  File \"bar\"'\n        )\n\n    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))\n    def test_get_stacktrace_with_module(self):\n        event = mock.Mock(spec=Event())\n        interface = Stacktrace.to_python(dict(frames=[{'module': 'foo'}, {'module': 'bar'}]))\n        result = interface.get_stacktrace(event)\n        self.assertEquals(\n            result, 'Stacktrace (most recent call last):\\n\\n  Module \"foo\"\\n  Module \"bar\"'\n        )\n\n    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))\n    def test_get_stacktrace_with_filename_and_function(self):\n        event = mock.Mock(spec=Event())\n        interface = Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'filename': 'foo',\n                        'function': 'biz'\n                    }, {\n                        'filename': 'bar',\n                        'function': 'baz'\n                    }\n                ]\n            )\n        )\n        result = interface.get_stacktrace(event)\n        self.assertEquals(\n            result,\n            'Stacktrace (most recent call last):\\n\\n  File \"foo\", in biz\\n  File \"bar\", in baz'\n        )\n\n    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))\n    def test_get_stacktrace_with_filename_function_lineno_and_context(self):\n        event = mock.Mock(spec=Event())\n        interface = Stacktrace.to_python(\n            dict(\n                frames=[\n                    {\n                        'filename': 'foo',\n                        'function': 'biz',\n                        'lineno': 3,\n                        'context_line': '  def foo(r):'\n                    },\n                    {\n                        'filename': 'bar',\n                        'function': 'baz',\n                        'lineno': 5,\n                        'context_line': '    return None'\n                    },\n                ]\n            )\n        )\n        result = interface.get_stacktrace(event)\n        self.assertEquals(\n            result,\n            'Stacktrace (most recent call last):\\n\\n  File \"foo\", line 3, in biz\\n    def foo(r):\\n  File \"bar\", line 5, in baz\\n    return None'\n        )\n\n    def test_bad_input(self):\n        with self.assertRaises(InterfaceValidationError):\n            Frame.to_python({\n                'filename': 1,\n            })\n\n        with self.assertRaises(InterfaceValidationError):\n            Frame.to_python({\n                'filename': 'foo',\n                'abs_path': 1,\n            })\n\n        with self.assertRaises(InterfaceValidationError):\n            Frame.to_python({\n                'function': 1,\n            })\n\n        with self.assertRaises(InterfaceValidationError):\n            Frame.to_python({\n                'module': 1,\n            })\n\n        with self.assertRaises(InterfaceValidationError):\n            Frame.to_python({\n                'function': '?',\n            })\n\n    def test_context_with_nan(self):\n        self.assertEquals(\n            Frame.to_python({\n                'filename': 'x',\n                'vars': {\n                    'x': float('inf')\n                },\n            }).vars,\n            {'x': '<inf>'},\n        )\n        self.assertEquals(\n            Frame.to_python({\n                'filename': 'x',\n                'vars': {\n                    'x': float('-inf')\n                },\n            }).vars,\n            {'x': '<-inf>'},\n        )\n        self.assertEquals(\n            Frame.to_python({\n                'filename': 'x',\n                'vars': {\n                    'x': float('nan')\n                },\n            }).vars,\n            {'x': '<nan>'},\n        )\n\n    def test_address_normalization(self):\n        interface = Frame.to_python(\n            {\n                'lineno': 1,\n                'filename': 'blah.c',\n                'function': 'main',\n                'instruction_addr': 123456,\n                'symbol_addr': '123450',\n                'image_addr': '0x0',\n            }\n        )\n        assert interface.instruction_addr == '0x1e240'\n        assert interface.symbol_addr == '0x1e23a'\n        assert interface.image_addr == '0x0'\n\n\nclass SlimFrameDataTest(TestCase):\n    def test_under_max(self):\n        interface = Stacktrace.to_python({'frames': [{'filename': 'foo'}]})\n        slim_frame_data(interface, 4)\n        assert len(interface.frames) == 1\n        assert not interface.frames_omitted\n\n    def test_over_max(self):\n        values = []\n        for n in range(5):\n            values.append(\n                {\n                    'filename': 'frame %d' % n,\n                    'vars': {\n                        'foo': 'bar'\n                    },\n                    'context_line': 'b',\n                    'pre_context': ['a'],\n                    'post_context': ['c'],\n                }\n            )\n        interface = Stacktrace.to_python({'frames': values})\n        slim_frame_data(interface, 4)\n\n        assert len(interface.frames) == 5\n\n        for value, num in zip(interface.frames[:2], range(2)):\n            assert value.filename == 'frame %d' % num\n            assert value.vars is not None\n            assert value.pre_context is not None\n            assert value.post_context is not None\n\n        for value, num in zip(interface.frames[3:], range(3, 5)):\n            assert value.filename == 'frame %d' % num\n            assert value.vars is not None\n            assert value.pre_context is not None\n            assert value.post_context is not None\n\n        value = interface.frames[2]\n        assert value.filename == 'frame 2'\n        assert not value.vars\n        assert not value.pre_context\n        assert not value.post_context\n\n\ndef test_java_frame_rendering():\n    render = functools.partial(render_to_string, 'sentry/partial/frames/java.txt')\n\n    # This is the ideal case.\n    assert render(\n        {\n            'module': 'com.getsentry.example.Example',\n            'function': 'test',\n            'filename': 'Example.java',\n            'lineno': 1,\n        }\n    ).strip() == 'at com.getsentry.example.Example.test(Example.java:1)'\n\n    # Legacy support for frames without filename.\n    assert render({\n        'module': 'com.getsentry.example.Example',\n        'function': 'test',\n        'lineno': 1,\n    }).strip() == 'at com.getsentry.example.Example.test'\n\n    # (This shouldn't happen, but...)\n    assert render(\n        {\n            'module': 'com.getsentry.example.Example',\n            'function': 'test',\n            'filename': 'foo/bar/Example.java',\n            'lineno': 1,\n        }\n    ).strip() == 'at com.getsentry.example.Example.test(Example.java:1)'\n\n    # Native methods don't have line numbers.\n    assert render({\n        'function': 'test',\n        'filename': 'Example.java',\n        'lineno': -2,\n    }).strip() == 'at test(Example.java)'\n\n    assert render({\n        'function': 'test',\n        'filename': 'Example.java',\n        'lineno': 1,\n    }).strip() == 'at test(Example.java:1)'\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_stacktrace.py", "id": "0bba2d8c9cf96f9e4a6e479ec076a988", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/interfaces/test_stacktrace.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}