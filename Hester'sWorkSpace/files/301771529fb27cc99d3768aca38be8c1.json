{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import unified_strdate\n\n\nclass DFBIE(InfoExtractor):\n    IE_NAME = 'tv.dfb.de'\n    _VALID_URL = r'https?://tv\\.dfb\\.de/video/(?P<display_id>[^/]+)/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://tv.dfb.de/video/u-19-em-stimmen-zum-spiel-gegen-russland/11633/',\n        'md5': 'ac0f98a52a330f700b4b3034ad240649',\n        'info_dict': {\n            'id': '11633',\n            'display_id': 'u-19-em-stimmen-zum-spiel-gegen-russland',\n            'ext': 'mp4',\n            'title': 'U 19-EM: Stimmen zum Spiel gegen Russland',\n            'upload_date': '20150714',\n        },\n    }\n\n    def _real_extract(self, url):\n        display_id, video_id = re.match(self._VALID_URL, url).groups()\n\n        player_info = self._download_xml(\n            'http://tv.dfb.de/server/hd_video.php?play=%s' % video_id,\n            display_id)\n        video_info = player_info.find('video')\n        stream_access_url = self._proto_relative_url(video_info.find('url').text.strip())\n\n        formats = []\n        \n        for sa_url in (stream_access_url, stream_access_url + '&area=&format=iphone'):\n            stream_access_info = self._download_xml(sa_url, display_id)\n            token_el = stream_access_info.find('token')\n            manifest_url = token_el.attrib['url'] + '?' + 'hdnea=' + token_el.attrib['auth']\n            if '.f4m' in manifest_url:\n                formats.extend(self._extract_f4m_formats(\n                    manifest_url + '&hdcore=3.2.0',\n                    display_id, f4m_id='hds', fatal=False))\n            else:\n                formats.extend(self._extract_m3u8_formats(\n                    manifest_url, display_id, 'mp4',\n                    'm3u8_native', m3u8_id='hls', fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': video_info.find('title').text,\n            'thumbnail': 'http://tv.dfb.de/images/%s_640x360.jpg' % video_id,\n            'upload_date': unified_strdate(video_info.find('time_date').text),\n            'formats': formats,\n        }\n", "comments": "# see http://tv.dfb.de/player/js/ajax.js for the method to extract m3u8 formats\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import unified_strdate\n\n\nclass DFBIE(InfoExtractor):\n    IE_NAME = 'tv.dfb.de'\n    _VALID_URL = r'https?://tv\\.dfb\\.de/video/(?P<display_id>[^/]+)/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://tv.dfb.de/video/u-19-em-stimmen-zum-spiel-gegen-russland/11633/',\n        'md5': 'ac0f98a52a330f700b4b3034ad240649',\n        'info_dict': {\n            'id': '11633',\n            'display_id': 'u-19-em-stimmen-zum-spiel-gegen-russland',\n            'ext': 'mp4',\n            'title': 'U 19-EM: Stimmen zum Spiel gegen Russland',\n            'upload_date': '20150714',\n        },\n    }\n\n    def _real_extract(self, url):\n        display_id, video_id = re.match(self._VALID_URL, url).groups()\n\n        player_info = self._download_xml(\n            'http://tv.dfb.de/server/hd_video.php?play=%s' % video_id,\n            display_id)\n        video_info = player_info.find('video')\n        stream_access_url = self._proto_relative_url(video_info.find('url').text.strip())\n\n        formats = []\n        # see http://tv.dfb.de/player/js/ajax.js for the method to extract m3u8 formats\n        for sa_url in (stream_access_url, stream_access_url + '&area=&format=iphone'):\n            stream_access_info = self._download_xml(sa_url, display_id)\n            token_el = stream_access_info.find('token')\n            manifest_url = token_el.attrib['url'] + '?' + 'hdnea=' + token_el.attrib['auth']\n            if '.f4m' in manifest_url:\n                formats.extend(self._extract_f4m_formats(\n                    manifest_url + '&hdcore=3.2.0',\n                    display_id, f4m_id='hds', fatal=False))\n            else:\n                formats.extend(self._extract_m3u8_formats(\n                    manifest_url, display_id, 'mp4',\n                    'm3u8_native', m3u8_id='hls', fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': video_info.find('title').text,\n            'thumbnail': 'http://tv.dfb.de/images/%s_640x360.jpg' % video_id,\n            'upload_date': unified_strdate(video_info.find('time_date').text),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "dfb.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/dfb.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}