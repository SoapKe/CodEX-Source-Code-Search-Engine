{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestQueue(object):\n\n    \n    \n    def test_end_to_end(self):\n        print('Test: Dequeue an empty queue')\n        queue = Queue()\n        assert_equal(queue.dequeue(), None)\n\n        print('Test: Enqueue to an empty queue')\n        queue.enqueue(1)\n\n        print('Test: Dequeue a queue with one element')\n        assert_equal(queue.dequeue(), 1)\n\n        print('Test: Enqueue to a non-empty queue')\n        queue.enqueue(2)\n        queue.enqueue(3)\n        queue.enqueue(4)\n\n        print('Test: Dequeue a queue with more than one element')\n        assert_equal(queue.dequeue(), 2)\n        assert_equal(queue.dequeue(), 3)\n        assert_equal(queue.dequeue(), 4)\n\n        print('Success: test_end_to_end')\n\n\ndef main():\n    test = TestQueue()\n    test.test_end_to_end()\n\n\nif __name__ == '__main__':\n    main()", "comments": "  todo  it would better unit tests    method addition following end end test ", "content": "from nose.tools import assert_equal\n\n\nclass TestQueue(object):\n\n    # TODO: It would be better if we had unit tests for each\n    # method in addition to the following end-to-end test\n    def test_end_to_end(self):\n        print('Test: Dequeue an empty queue')\n        queue = Queue()\n        assert_equal(queue.dequeue(), None)\n\n        print('Test: Enqueue to an empty queue')\n        queue.enqueue(1)\n\n        print('Test: Dequeue a queue with one element')\n        assert_equal(queue.dequeue(), 1)\n\n        print('Test: Enqueue to a non-empty queue')\n        queue.enqueue(2)\n        queue.enqueue(3)\n        queue.enqueue(4)\n\n        print('Test: Dequeue a queue with more than one element')\n        assert_equal(queue.dequeue(), 2)\n        assert_equal(queue.dequeue(), 3)\n        assert_equal(queue.dequeue(), 4)\n\n        print('Success: test_end_to_end')\n\n\ndef main():\n    test = TestQueue()\n    test.test_end_to_end()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_queue_list.py", "id": "4c53676a25ba3939139b17b59b6abded", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/stacks_queues/queue_list/test_queue_list.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}