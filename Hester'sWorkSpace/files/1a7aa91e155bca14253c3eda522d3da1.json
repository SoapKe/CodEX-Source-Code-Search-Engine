{"author": "nvbn", "code": "from thefuck.utils import eager, get_closest, for_app\n\n\n@for_app('fab')\ndef match(command):\n    return 'Warning: Command(s) not found:' in command.output\n\n\n\n@eager\ndef _get_between(content, start, end=None):\n    should_yield = False\n    for line in content.split('\\n'):\n        if start in line:\n            should_yield = True\n            continue\n\n        if end and end in line:\n            return\n\n        if should_yield and line:\n            yield line.strip().split(' ')[0]\n\n\ndef get_new_command(command):\n    not_found_commands = _get_between(\n        command.output, 'Warning: Command(s) not found:',\n        'Available commands:')\n    possible_commands = _get_between(\n        command.output, 'Available commands:')\n\n    script = command.script\n    for not_found in not_found_commands:\n        fix = get_closest(not_found, possible_commands)\n        script = script.replace(' {}'.format(not_found),\n                                ' {}'.format(fix))\n\n    return script\n", "comments": "# We need different behavior then in get_all_matched_commands.\n", "content": "from thefuck.utils import eager, get_closest, for_app\n\n\n@for_app('fab')\ndef match(command):\n    return 'Warning: Command(s) not found:' in command.output\n\n\n# We need different behavior then in get_all_matched_commands.\n@eager\ndef _get_between(content, start, end=None):\n    should_yield = False\n    for line in content.split('\\n'):\n        if start in line:\n            should_yield = True\n            continue\n\n        if end and end in line:\n            return\n\n        if should_yield and line:\n            yield line.strip().split(' ')[0]\n\n\ndef get_new_command(command):\n    not_found_commands = _get_between(\n        command.output, 'Warning: Command(s) not found:',\n        'Available commands:')\n    possible_commands = _get_between(\n        command.output, 'Available commands:')\n\n    script = command.script\n    for not_found in not_found_commands:\n        fix = get_closest(not_found, possible_commands)\n        script = script.replace(' {}'.format(not_found),\n                                ' {}'.format(fix))\n\n    return script\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "fab_command_not_found.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/rules/fab_command_not_found.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}