{"author": "eliangcs", "code": "import os\nimport shutil\nimport sys\nimport tempfile\nimport unittest\n\nimport six\n\n\nclass TempAppDirTestCase(unittest.TestCase):\n    \"\"\"Set up temporary app data and config directories before every test\n    method, and delete them afterwards.\n    \"\"\"\n    def setUp(self):\n        \n        self.temp_dir = tempfile.mkdtemp()\n\n        if sys.platform == 'win32':\n            self.homes = {\n                \n                'data': 'LOCALAPPDATA',\n                'config': 'LOCALAPPDATA'\n            }\n        else:\n            self.homes = {\n                \n                'data': 'XDG_DATA_HOME',\n                'config': 'XDG_CONFIG_HOME'\n            }\n\n        \n        self.orig_envvars = {}\n\n        for subdir_name, envvar_name in self.homes.items():\n            if envvar_name in os.environ:\n                self.orig_envvars[envvar_name] = os.environ[envvar_name]\n            os.environ[envvar_name] = os.path.join(self.temp_dir, subdir_name)\n\n    def tearDown(self):\n        \n        for name in self.homes.values():\n            if name in self.orig_envvars:\n                os.environ[name] = self.orig_envvars[name]\n            else:\n                del os.environ[name]\n\n        shutil.rmtree(self.temp_dir)\n\n    def make_tempfile(self, data='', subdir_name=''):\n        \"\"\"Create a file under self.temp_dir and return the path.\"\"\"\n        full_tempdir = os.path.join(self.temp_dir, subdir_name)\n        if not os.path.exists(full_tempdir):\n            os.makedirs(full_tempdir)\n\n        if isinstance(data, six.text_type):\n            data = data.encode('utf-8')\n\n        with tempfile.NamedTemporaryFile(dir=full_tempdir, delete=False) as f:\n            f.write(data)\n            return f.name\n", "comments": "   set temporary app data config directories every test     method  delete afterwards              def setup(self)            create temp dir contain data config directories         self temp dir   tempfile mkdtemp()          sys platform     win32               self homes                       subdir name  envvar name                  data    localappdata                    config    localappdata                        else              self homes                       subdir name  envvar name                  data    xdg data home                    config    xdg config home                           used restore         self orig envvars               subdir name  envvar name self homes items()              envvar name os environ                  self orig envvars envvar name    os environ envvar name              os environ envvar name    os path join(self temp dir  subdir name)      def teardown(self)            restore envvar values         name self homes values()              name self orig envvars                  os environ name    self orig envvars name              else                  del os environ name           shutil rmtree(self temp dir)      def make tempfile(self  data     subdir name   )             create file self temp dir return path        create temp dir contain data config directories    subdir name  envvar name    subdir name  envvar name    used restore    restore envvar values ", "content": "import os\nimport shutil\nimport sys\nimport tempfile\nimport unittest\n\nimport six\n\n\nclass TempAppDirTestCase(unittest.TestCase):\n    \"\"\"Set up temporary app data and config directories before every test\n    method, and delete them afterwards.\n    \"\"\"\n    def setUp(self):\n        # Create a temp dir that will contain data and config directories\n        self.temp_dir = tempfile.mkdtemp()\n\n        if sys.platform == 'win32':\n            self.homes = {\n                # subdir_name: envvar_name\n                'data': 'LOCALAPPDATA',\n                'config': 'LOCALAPPDATA'\n            }\n        else:\n            self.homes = {\n                # subdir_name: envvar_name\n                'data': 'XDG_DATA_HOME',\n                'config': 'XDG_CONFIG_HOME'\n            }\n\n        # Used to restore\n        self.orig_envvars = {}\n\n        for subdir_name, envvar_name in self.homes.items():\n            if envvar_name in os.environ:\n                self.orig_envvars[envvar_name] = os.environ[envvar_name]\n            os.environ[envvar_name] = os.path.join(self.temp_dir, subdir_name)\n\n    def tearDown(self):\n        # Restore envvar values\n        for name in self.homes.values():\n            if name in self.orig_envvars:\n                os.environ[name] = self.orig_envvars[name]\n            else:\n                del os.environ[name]\n\n        shutil.rmtree(self.temp_dir)\n\n    def make_tempfile(self, data='', subdir_name=''):\n        \"\"\"Create a file under self.temp_dir and return the path.\"\"\"\n        full_tempdir = os.path.join(self.temp_dir, subdir_name)\n        if not os.path.exists(full_tempdir):\n            os.makedirs(full_tempdir)\n\n        if isinstance(data, six.text_type):\n            data = data.encode('utf-8')\n\n        with tempfile.NamedTemporaryFile(dir=full_tempdir, delete=False) as f:\n            f.write(data)\n            return f.name\n", "description": "HTTPie + prompt_toolkit = an interactive command-line HTTP client featuring autocomplete and syntax highlighting", "file_name": "base.py", "id": "a818b19e701c9256be76301528bc31d2", "language": "Python", "project_name": "http-prompt", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/eliangcs-http-prompt/eliangcs-http-prompt-87f1e9d/tests/base.py", "save_time": "", "source": "", "update_at": "2018-03-17T18:26:33Z", "url": "https://github.com/eliangcs/http-prompt", "wiki": true}