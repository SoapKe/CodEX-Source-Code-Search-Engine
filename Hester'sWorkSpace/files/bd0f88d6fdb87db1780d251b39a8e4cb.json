{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    try_get,\n    unified_timestamp,\n)\n\n\nclass EggheadCourseIE(InfoExtractor):\n    IE_DESC = 'egghead.io course'\n    IE_NAME = 'egghead:course'\n    _VALID_URL = r'https://egghead\\.io/courses/(?P<id>[^/?\n    _TEST = {\n        'url': 'https://egghead.io/courses/professor-frisby-introduces-composable-functional-javascript',\n        'playlist_count': 29,\n        'info_dict': {\n            'id': '72',\n            'title': 'Professor Frisby Introduces Composable Functional JavaScript',\n            'description': 're:(?s)^This course teaches the ubiquitous.*You\\'ll start composing functionality before you know it.$',\n        },\n    }\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        lessons = self._download_json(\n            'https://egghead.io/api/v1/series/%s/lessons' % playlist_id,\n            playlist_id, 'Downloading course lessons JSON')\n\n        entries = []\n        for lesson in lessons:\n            lesson_url = lesson.get('http_url')\n            if not lesson_url or not isinstance(lesson_url, compat_str):\n                continue\n            lesson_id = lesson.get('id')\n            if lesson_id:\n                lesson_id = compat_str(lesson_id)\n            entries.append(self.url_result(\n                lesson_url, ie=EggheadLessonIE.ie_key(), video_id=lesson_id))\n\n        course = self._download_json(\n            'https://egghead.io/api/v1/series/%s' % playlist_id,\n            playlist_id, 'Downloading course JSON', fatal=False) or {}\n\n        playlist_id = course.get('id')\n        if playlist_id:\n            playlist_id = compat_str(playlist_id)\n\n        return self.playlist_result(\n            entries, playlist_id, course.get('title'),\n            course.get('description'))\n\n\nclass EggheadLessonIE(InfoExtractor):\n    IE_DESC = 'egghead.io lesson'\n    IE_NAME = 'egghead:lesson'\n    _VALID_URL = r'https://egghead\\.io/(?:api/v1/)?lessons/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'https://egghead.io/lessons/javascript-linear-data-flow-with-container-style-types-box',\n        'info_dict': {\n            'id': '1196',\n            'display_id': 'javascript-linear-data-flow-with-container-style-types-box',\n            'ext': 'mp4',\n            'title': 'Create linear data flow with container style types (Box)',\n            'description': 'md5:9aa2cdb6f9878ed4c39ec09e85a8150e',\n            'thumbnail': r're:^https?:.*\\.jpg$',\n            'timestamp': 1481296768,\n            'upload_date': '20161209',\n            'duration': 304,\n            'view_count': 0,\n            'tags': ['javascript', 'free'],\n        },\n        'params': {\n            'skip_download': True,\n            'format': 'bestvideo',\n        },\n    }, {\n        'url': 'https://egghead.io/api/v1/lessons/react-add-redux-to-a-react-application',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        lesson = self._download_json(\n            'https://egghead.io/api/v1/lessons/%s' % display_id, display_id)\n\n        lesson_id = compat_str(lesson['id'])\n        title = lesson['title']\n\n        formats = []\n        for _, format_url in lesson['media_urls'].items():\n            if not format_url or not isinstance(format_url, compat_str):\n                continue\n            ext = determine_ext(format_url)\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, lesson_id, 'mp4', entry_protocol='m3u8',\n                    m3u8_id='hls', fatal=False))\n            elif ext == 'mpd':\n                formats.extend(self._extract_mpd_formats(\n                    format_url, lesson_id, mpd_id='dash', fatal=False))\n            else:\n                formats.append({\n                    'url': format_url,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': lesson_id,\n            'display_id': display_id,\n            'title': title,\n            'description': lesson.get('summary'),\n            'thumbnail': lesson.get('thumb_nail'),\n            'timestamp': unified_timestamp(lesson.get('published_at')),\n            'duration': int_or_none(lesson.get('duration')),\n            'view_count': int_or_none(lesson.get('plays_count')),\n            'tags': try_get(lesson, lambda x: x['tag_list'], list),\n            'series': try_get(\n                lesson, lambda x: x['series']['title'], compat_str),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#&]+)'\n#&]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    try_get,\n    unified_timestamp,\n)\n\n\nclass EggheadCourseIE(InfoExtractor):\n    IE_DESC = 'egghead.io course'\n    IE_NAME = 'egghead:course'\n    _VALID_URL = r'https://egghead\\.io/courses/(?P<id>[^/?#&]+)'\n    _TEST = {\n        'url': 'https://egghead.io/courses/professor-frisby-introduces-composable-functional-javascript',\n        'playlist_count': 29,\n        'info_dict': {\n            'id': '72',\n            'title': 'Professor Frisby Introduces Composable Functional JavaScript',\n            'description': 're:(?s)^This course teaches the ubiquitous.*You\\'ll start composing functionality before you know it.$',\n        },\n    }\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        lessons = self._download_json(\n            'https://egghead.io/api/v1/series/%s/lessons' % playlist_id,\n            playlist_id, 'Downloading course lessons JSON')\n\n        entries = []\n        for lesson in lessons:\n            lesson_url = lesson.get('http_url')\n            if not lesson_url or not isinstance(lesson_url, compat_str):\n                continue\n            lesson_id = lesson.get('id')\n            if lesson_id:\n                lesson_id = compat_str(lesson_id)\n            entries.append(self.url_result(\n                lesson_url, ie=EggheadLessonIE.ie_key(), video_id=lesson_id))\n\n        course = self._download_json(\n            'https://egghead.io/api/v1/series/%s' % playlist_id,\n            playlist_id, 'Downloading course JSON', fatal=False) or {}\n\n        playlist_id = course.get('id')\n        if playlist_id:\n            playlist_id = compat_str(playlist_id)\n\n        return self.playlist_result(\n            entries, playlist_id, course.get('title'),\n            course.get('description'))\n\n\nclass EggheadLessonIE(InfoExtractor):\n    IE_DESC = 'egghead.io lesson'\n    IE_NAME = 'egghead:lesson'\n    _VALID_URL = r'https://egghead\\.io/(?:api/v1/)?lessons/(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'https://egghead.io/lessons/javascript-linear-data-flow-with-container-style-types-box',\n        'info_dict': {\n            'id': '1196',\n            'display_id': 'javascript-linear-data-flow-with-container-style-types-box',\n            'ext': 'mp4',\n            'title': 'Create linear data flow with container style types (Box)',\n            'description': 'md5:9aa2cdb6f9878ed4c39ec09e85a8150e',\n            'thumbnail': r're:^https?:.*\\.jpg$',\n            'timestamp': 1481296768,\n            'upload_date': '20161209',\n            'duration': 304,\n            'view_count': 0,\n            'tags': ['javascript', 'free'],\n        },\n        'params': {\n            'skip_download': True,\n            'format': 'bestvideo',\n        },\n    }, {\n        'url': 'https://egghead.io/api/v1/lessons/react-add-redux-to-a-react-application',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        lesson = self._download_json(\n            'https://egghead.io/api/v1/lessons/%s' % display_id, display_id)\n\n        lesson_id = compat_str(lesson['id'])\n        title = lesson['title']\n\n        formats = []\n        for _, format_url in lesson['media_urls'].items():\n            if not format_url or not isinstance(format_url, compat_str):\n                continue\n            ext = determine_ext(format_url)\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, lesson_id, 'mp4', entry_protocol='m3u8',\n                    m3u8_id='hls', fatal=False))\n            elif ext == 'mpd':\n                formats.extend(self._extract_mpd_formats(\n                    format_url, lesson_id, mpd_id='dash', fatal=False))\n            else:\n                formats.append({\n                    'url': format_url,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': lesson_id,\n            'display_id': display_id,\n            'title': title,\n            'description': lesson.get('summary'),\n            'thumbnail': lesson.get('thumb_nail'),\n            'timestamp': unified_timestamp(lesson.get('published_at')),\n            'duration': int_or_none(lesson.get('duration')),\n            'view_count': int_or_none(lesson.get('plays_count')),\n            'tags': try_get(lesson, lambda x: x['tag_list'], list),\n            'series': try_get(\n                lesson, lambda x: x['series']['title'], compat_str),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "egghead.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/egghead.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}