{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    mimetype2ext,\n)\n\n\nclass MusicPlayOnIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:.+?\\.)?musicplayon\\.com/play(?:-touch)?\\?(?:v|pl=\\d+&play)=(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://en.musicplayon.com/play?v=433377',\n        'md5': '00cdcdea1726abdf500d1e7fd6dd59bb',\n        'info_dict': {\n            'id': '433377',\n            'ext': 'mp4',\n            'title': 'Rick Ross - Interview On Chelsea Lately (2014)',\n            'description': 'Rick Ross Interview On Chelsea Lately',\n            'duration': 342,\n            'uploader': 'ultrafish',\n        },\n    }, {\n        'url': 'http://en.musicplayon.com/play?pl=102&play=442629',\n        'only_matching': True,\n    }]\n\n    _URL_TEMPLATE = 'http://en.musicplayon.com/play?v=%s'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        url = self._URL_TEMPLATE % video_id\n\n        page = self._download_webpage(url, video_id)\n\n        title = self._og_search_title(page)\n        description = self._og_search_description(page)\n        thumbnail = self._og_search_thumbnail(page)\n        duration = self._html_search_meta('video:duration', page, 'duration', fatal=False)\n        view_count = self._og_search_property('count', page, fatal=False)\n        uploader = self._html_search_regex(\n            r'<div>by&nbsp;<a href=\"[^\"]+\" class=\"purple\">([^<]+)</a></div>', page, 'uploader', fatal=False)\n\n        sources = self._parse_json(\n            self._search_regex(r'setup\\[\\'_sources\\'\\]\\s*=\\s*([^;]+);', page, 'video sources'),\n            video_id, transform_source=js_to_json)\n        formats = [{\n            'url': compat_urlparse.urljoin(url, source['src']),\n            'ext': mimetype2ext(source.get('type')),\n            'format_note': source.get('data-res'),\n        } for source in sources]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'duration': int_or_none(duration),\n            'view_count': int_or_none(view_count),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    mimetype2ext,\n)\n\n\nclass MusicPlayOnIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:.+?\\.)?musicplayon\\.com/play(?:-touch)?\\?(?:v|pl=\\d+&play)=(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://en.musicplayon.com/play?v=433377',\n        'md5': '00cdcdea1726abdf500d1e7fd6dd59bb',\n        'info_dict': {\n            'id': '433377',\n            'ext': 'mp4',\n            'title': 'Rick Ross - Interview On Chelsea Lately (2014)',\n            'description': 'Rick Ross Interview On Chelsea Lately',\n            'duration': 342,\n            'uploader': 'ultrafish',\n        },\n    }, {\n        'url': 'http://en.musicplayon.com/play?pl=102&play=442629',\n        'only_matching': True,\n    }]\n\n    _URL_TEMPLATE = 'http://en.musicplayon.com/play?v=%s'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        url = self._URL_TEMPLATE % video_id\n\n        page = self._download_webpage(url, video_id)\n\n        title = self._og_search_title(page)\n        description = self._og_search_description(page)\n        thumbnail = self._og_search_thumbnail(page)\n        duration = self._html_search_meta('video:duration', page, 'duration', fatal=False)\n        view_count = self._og_search_property('count', page, fatal=False)\n        uploader = self._html_search_regex(\n            r'<div>by&nbsp;<a href=\"[^\"]+\" class=\"purple\">([^<]+)</a></div>', page, 'uploader', fatal=False)\n\n        sources = self._parse_json(\n            self._search_regex(r'setup\\[\\'_sources\\'\\]\\s*=\\s*([^;]+);', page, 'video sources'),\n            video_id, transform_source=js_to_json)\n        formats = [{\n            'url': compat_urlparse.urljoin(url, source['src']),\n            'ext': mimetype2ext(source.get('type')),\n            'format_note': source.get('data-res'),\n        } for source in sources]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'duration': int_or_none(duration),\n            'view_count': int_or_none(view_count),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "musicplayon.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/musicplayon.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}