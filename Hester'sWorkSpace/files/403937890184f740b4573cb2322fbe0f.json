{"author": "mitmproxy", "code": "import io\nimport pytest\nfrom unittest import mock\n\nfrom pathod import pathoc_cmdline as cmdline\n\nfrom mitmproxy.test import tutils\n\n\n@mock.patch(\"argparse.ArgumentParser.error\")\ndef test_pathoc(perror):\n    assert cmdline.args_pathoc([\"pathoc\", \"foo.com\", \"get:/\"])\n    s = io.StringIO()\n    with pytest.raises(SystemExit):\n        cmdline.args_pathoc([\"pathoc\", \"--show-uas\"], s, s)\n\n    a = cmdline.args_pathoc([\"pathoc\", \"foo.com:8888\", \"get:/\"])\n    assert a.port == 8888\n\n    a = cmdline.args_pathoc([\"pathoc\", \"foo.com:xxx\", \"get:/\"])\n    assert perror.called\n    perror.reset_mock()\n\n    a = cmdline.args_pathoc([\"pathoc\", \"-I\", \"10, 20\", \"foo.com:8888\", \"get:/\"])\n    assert a.ignorecodes == [10, 20]\n\n    a = cmdline.args_pathoc([\"pathoc\", \"-I\", \"xx, 20\", \"foo.com:8888\", \"get:/\"])\n    assert perror.called\n    perror.reset_mock()\n\n    a = cmdline.args_pathoc([\"pathoc\", \"-c\", \"foo:10\", \"foo.com:8888\", \"get:/\"])\n    assert a.connect_to == [\"foo\", 10]\n\n    a = cmdline.args_pathoc([\"pathoc\", \"foo.com\", \"get:/\", \"--http2\"])\n    assert a.use_http2 is True\n    assert a.ssl is True\n\n    a = cmdline.args_pathoc([\"pathoc\", \"foo.com\", \"get:/\", \"--http2-skip-connection-preface\"])\n    assert a.use_http2 is True\n    assert a.ssl is True\n    assert a.http2_skip_connection_preface is True\n\n    a = cmdline.args_pathoc([\"pathoc\", \"-c\", \"foo\", \"foo.com:8888\", \"get:/\"])\n    assert perror.called\n    perror.reset_mock()\n\n    a = cmdline.args_pathoc(\n        [\"pathoc\", \"-c\", \"foo:bar\", \"foo.com:8888\", \"get:/\"])\n    assert perror.called\n    perror.reset_mock()\n\n    a = cmdline.args_pathoc(\n        [\n            \"pathoc\",\n            \"foo.com:8888\",\n            tutils.test_data.path(\"pathod/data/request\")\n        ]\n    )\n    assert len(list(a.requests)) == 1\n\n    with pytest.raises(SystemExit):\n        cmdline.args_pathoc([\"pathoc\", \"foo.com\", \"invalid\"], s, s)\n", "comments": "", "content": "import io\nimport pytest\nfrom unittest import mock\n\nfrom pathod import pathoc_cmdline as cmdline\n\nfrom mitmproxy.test import tutils\n\n\n@mock.patch(\"argparse.ArgumentParser.error\")\ndef test_pathoc(perror):\n    assert cmdline.args_pathoc([\"pathoc\", \"foo.com\", \"get:/\"])\n    s = io.StringIO()\n    with pytest.raises(SystemExit):\n        cmdline.args_pathoc([\"pathoc\", \"--show-uas\"], s, s)\n\n    a = cmdline.args_pathoc([\"pathoc\", \"foo.com:8888\", \"get:/\"])\n    assert a.port == 8888\n\n    a = cmdline.args_pathoc([\"pathoc\", \"foo.com:xxx\", \"get:/\"])\n    assert perror.called\n    perror.reset_mock()\n\n    a = cmdline.args_pathoc([\"pathoc\", \"-I\", \"10, 20\", \"foo.com:8888\", \"get:/\"])\n    assert a.ignorecodes == [10, 20]\n\n    a = cmdline.args_pathoc([\"pathoc\", \"-I\", \"xx, 20\", \"foo.com:8888\", \"get:/\"])\n    assert perror.called\n    perror.reset_mock()\n\n    a = cmdline.args_pathoc([\"pathoc\", \"-c\", \"foo:10\", \"foo.com:8888\", \"get:/\"])\n    assert a.connect_to == [\"foo\", 10]\n\n    a = cmdline.args_pathoc([\"pathoc\", \"foo.com\", \"get:/\", \"--http2\"])\n    assert a.use_http2 is True\n    assert a.ssl is True\n\n    a = cmdline.args_pathoc([\"pathoc\", \"foo.com\", \"get:/\", \"--http2-skip-connection-preface\"])\n    assert a.use_http2 is True\n    assert a.ssl is True\n    assert a.http2_skip_connection_preface is True\n\n    a = cmdline.args_pathoc([\"pathoc\", \"-c\", \"foo\", \"foo.com:8888\", \"get:/\"])\n    assert perror.called\n    perror.reset_mock()\n\n    a = cmdline.args_pathoc(\n        [\"pathoc\", \"-c\", \"foo:bar\", \"foo.com:8888\", \"get:/\"])\n    assert perror.called\n    perror.reset_mock()\n\n    a = cmdline.args_pathoc(\n        [\n            \"pathoc\",\n            \"foo.com:8888\",\n            tutils.test_data.path(\"pathod/data/request\")\n        ]\n    )\n    assert len(list(a.requests)) == 1\n\n    with pytest.raises(SystemExit):\n        cmdline.args_pathoc([\"pathoc\", \"foo.com\", \"invalid\"], s, s)\n", "description": "An interactive TLS-capable intercepting HTTP proxy for penetration testers and software developers.", "file_name": "test_pathoc_cmdline.py", "id": "403937890184f740b4573cb2322fbe0f", "language": "Python", "project_name": "mitmproxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mitmproxy-mitmproxy/mitmproxy-mitmproxy-3c7725a/test/pathod/test_pathoc_cmdline.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:30:56Z", "url": "https://github.com/mitmproxy/mitmproxy", "wiki": false}