{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urllib_parse_urlencode,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    try_get,\n)\n\n\nclass SohuIE(InfoExtractor):\n    _VALID_URL = r'https?://(?P<mytv>my\\.)?tv\\.sohu\\.com/.+?/(?(mytv)|n)(?P<id>\\d+)\\.shtml.*?'\n\n    \n    _TESTS = [{\n        'note': 'This video is available only in Mainland China',\n        'url': 'http://tv.sohu.com/20130724/n382479172.shtml\n        'info_dict': {\n            'id': '382479172',\n            'ext': 'mp4',\n            'title': 'MV\uff1aFar East Movement\u300aThe Illest\u300b',\n        },\n        'skip': 'On available in China',\n    }, {\n        'url': 'http://tv.sohu.com/20150305/n409385080.shtml',\n        'info_dict': {\n            'id': '409385080',\n            'ext': 'mp4',\n            'title': '\u300a2015\u6e56\u5357\u536b\u89c6\u7f8a\u5e74\u5143\u5bb5\u665a\u4f1a\u300b\u5510\u5ae3\u300a\u82b1\u597d\u6708\u5706\u300b',\n        }\n    }, {\n        'url': 'http://my.tv.sohu.com/us/232799889/78693464.shtml',\n        'info_dict': {\n            'id': '78693464',\n            'ext': 'mp4',\n            'title': '\u3010\u7231\u8303\u54c1\u3011\u7b2c31\u671f\uff1aMWC\u89c1\u4e0d\u5230\u7684\u5947\u8469\u624b\u673a',\n        }\n    }, {\n        'note': 'Multipart video',\n        'url': 'http://my.tv.sohu.com/pl/8384802/78910339.shtml',\n        'info_dict': {\n            'id': '78910339',\n            'title': '\u3010\u795e\u63a2\u82cd\u5b9e\u6218\u79d8\u7c4d\u3011\u7b2c13\u671f \u6218\u4e89\u4e4b\u5f71 \u8d6b\u5361\u91cc\u59c6',\n        },\n        'playlist': [{\n            'info_dict': {\n                'id': '78910339_part1',\n                'ext': 'mp4',\n                'duration': 294,\n                'title': '\u3010\u795e\u63a2\u82cd\u5b9e\u6218\u79d8\u7c4d\u3011\u7b2c13\u671f \u6218\u4e89\u4e4b\u5f71 \u8d6b\u5361\u91cc\u59c6',\n            }\n        }, {\n            'info_dict': {\n                'id': '78910339_part2',\n                'ext': 'mp4',\n                'duration': 300,\n                'title': '\u3010\u795e\u63a2\u82cd\u5b9e\u6218\u79d8\u7c4d\u3011\u7b2c13\u671f \u6218\u4e89\u4e4b\u5f71 \u8d6b\u5361\u91cc\u59c6',\n            }\n        }, {\n            'info_dict': {\n                'id': '78910339_part3',\n                'ext': 'mp4',\n                'duration': 150,\n                'title': '\u3010\u795e\u63a2\u82cd\u5b9e\u6218\u79d8\u7c4d\u3011\u7b2c13\u671f \u6218\u4e89\u4e4b\u5f71 \u8d6b\u5361\u91cc\u59c6',\n            }\n        }]\n    }, {\n        'note': 'Video with title containing dash',\n        'url': 'http://my.tv.sohu.com/us/249884221/78932792.shtml',\n        'info_dict': {\n            'id': '78932792',\n            'ext': 'mp4',\n            'title': 'youtube-dl testing video',\n        },\n        'params': {\n            'skip_download': True\n        }\n    }]\n\n    def _real_extract(self, url):\n\n        def _fetch_data(vid_id, mytv=False):\n            if mytv:\n                base_data_url = 'http://my.tv.sohu.com/play/videonew.do?vid='\n            else:\n                base_data_url = 'http://hot.vrs.sohu.com/vrs_flash.action?vid='\n\n            return self._download_json(\n                base_data_url + vid_id, video_id,\n                'Downloading JSON data for %s' % vid_id,\n                headers=self.geo_verification_headers())\n\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        mytv = mobj.group('mytv') is not None\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = re.sub(r' - \u641c\u72d0\u89c6\u9891$', '', self._og_search_title(webpage))\n\n        vid = self._html_search_regex(\n            r'var vid ?= ?[\"\\'](\\d+)[\"\\']',\n            webpage, 'video path')\n        vid_data = _fetch_data(vid, mytv)\n        if vid_data['play'] != 1:\n            if vid_data.get('status') == 12:\n                raise ExtractorError(\n                    '%s said: There\\'s something wrong in the video.' % self.IE_NAME,\n                    expected=True)\n            else:\n                self.raise_geo_restricted(\n                    '%s said: The video is only licensed to users in Mainland China.' % self.IE_NAME)\n\n        formats_json = {}\n        for format_id in ('nor', 'high', 'super', 'ori', 'h2644k', 'h2654k'):\n            vid_id = vid_data['data'].get('%sVid' % format_id)\n            if not vid_id:\n                continue\n            vid_id = compat_str(vid_id)\n            formats_json[format_id] = vid_data if vid == vid_id else _fetch_data(vid_id, mytv)\n\n        part_count = vid_data['data']['totalBlocks']\n\n        playlist = []\n        for i in range(part_count):\n            formats = []\n            for format_id, format_data in formats_json.items():\n                allot = format_data['allot']\n\n                data = format_data['data']\n                clips_url = data['clipsURL']\n                su = data['su']\n\n                video_url = 'newflv.sohu.ccgslb.net'\n                cdnId = None\n                retries = 0\n\n                while 'newflv.sohu.ccgslb.net' in video_url:\n                    params = {\n                        'prot': 9,\n                        'file': clips_url[i],\n                        'new': su[i],\n                        'prod': 'flash',\n                        'rb': 1,\n                    }\n\n                    if cdnId is not None:\n                        params['idc'] = cdnId\n\n                    download_note = 'Downloading %s video URL part %d of %d' % (\n                        format_id, i + 1, part_count)\n\n                    if retries > 0:\n                        download_note += ' (retry \n                    part_info = self._parse_json(self._download_webpage(\n                        'http://%s/?%s' % (allot, compat_urllib_parse_urlencode(params)),\n                        video_id, download_note), video_id)\n\n                    video_url = part_info['url']\n                    cdnId = part_info.get('nid')\n\n                    retries += 1\n                    if retries > 5:\n                        raise ExtractorError('Failed to get video URL')\n\n                formats.append({\n                    'url': video_url,\n                    'format_id': format_id,\n                    'filesize': int_or_none(\n                        try_get(data, lambda x: x['clipsBytes'][i])),\n                    'width': int_or_none(data.get('width')),\n                    'height': int_or_none(data.get('height')),\n                    'fps': int_or_none(data.get('fps')),\n                })\n            self._sort_formats(formats)\n\n            playlist.append({\n                'id': '%s_part%d' % (video_id, i + 1),\n                'title': title,\n                'duration': vid_data['data']['clipsDuration'][i],\n                'formats': formats,\n            })\n\n        if len(playlist) == 1:\n            info = playlist[0]\n            info['id'] = video_id\n        else:\n            info = {\n                '_type': 'multi_video',\n                'entries': playlist,\n                'id': video_id,\n                'title': title,\n            }\n\n        return info\n", "comments": "# coding: utf-8\n# Sohu videos give different MD5 sums on Travis CI and my machine\n#super',\n#%d)' % retries\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urllib_parse_urlencode,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    try_get,\n)\n\n\nclass SohuIE(InfoExtractor):\n    _VALID_URL = r'https?://(?P<mytv>my\\.)?tv\\.sohu\\.com/.+?/(?(mytv)|n)(?P<id>\\d+)\\.shtml.*?'\n\n    # Sohu videos give different MD5 sums on Travis CI and my machine\n    _TESTS = [{\n        'note': 'This video is available only in Mainland China',\n        'url': 'http://tv.sohu.com/20130724/n382479172.shtml#super',\n        'info_dict': {\n            'id': '382479172',\n            'ext': 'mp4',\n            'title': 'MV\uff1aFar East Movement\u300aThe Illest\u300b',\n        },\n        'skip': 'On available in China',\n    }, {\n        'url': 'http://tv.sohu.com/20150305/n409385080.shtml',\n        'info_dict': {\n            'id': '409385080',\n            'ext': 'mp4',\n            'title': '\u300a2015\u6e56\u5357\u536b\u89c6\u7f8a\u5e74\u5143\u5bb5\u665a\u4f1a\u300b\u5510\u5ae3\u300a\u82b1\u597d\u6708\u5706\u300b',\n        }\n    }, {\n        'url': 'http://my.tv.sohu.com/us/232799889/78693464.shtml',\n        'info_dict': {\n            'id': '78693464',\n            'ext': 'mp4',\n            'title': '\u3010\u7231\u8303\u54c1\u3011\u7b2c31\u671f\uff1aMWC\u89c1\u4e0d\u5230\u7684\u5947\u8469\u624b\u673a',\n        }\n    }, {\n        'note': 'Multipart video',\n        'url': 'http://my.tv.sohu.com/pl/8384802/78910339.shtml',\n        'info_dict': {\n            'id': '78910339',\n            'title': '\u3010\u795e\u63a2\u82cd\u5b9e\u6218\u79d8\u7c4d\u3011\u7b2c13\u671f \u6218\u4e89\u4e4b\u5f71 \u8d6b\u5361\u91cc\u59c6',\n        },\n        'playlist': [{\n            'info_dict': {\n                'id': '78910339_part1',\n                'ext': 'mp4',\n                'duration': 294,\n                'title': '\u3010\u795e\u63a2\u82cd\u5b9e\u6218\u79d8\u7c4d\u3011\u7b2c13\u671f \u6218\u4e89\u4e4b\u5f71 \u8d6b\u5361\u91cc\u59c6',\n            }\n        }, {\n            'info_dict': {\n                'id': '78910339_part2',\n                'ext': 'mp4',\n                'duration': 300,\n                'title': '\u3010\u795e\u63a2\u82cd\u5b9e\u6218\u79d8\u7c4d\u3011\u7b2c13\u671f \u6218\u4e89\u4e4b\u5f71 \u8d6b\u5361\u91cc\u59c6',\n            }\n        }, {\n            'info_dict': {\n                'id': '78910339_part3',\n                'ext': 'mp4',\n                'duration': 150,\n                'title': '\u3010\u795e\u63a2\u82cd\u5b9e\u6218\u79d8\u7c4d\u3011\u7b2c13\u671f \u6218\u4e89\u4e4b\u5f71 \u8d6b\u5361\u91cc\u59c6',\n            }\n        }]\n    }, {\n        'note': 'Video with title containing dash',\n        'url': 'http://my.tv.sohu.com/us/249884221/78932792.shtml',\n        'info_dict': {\n            'id': '78932792',\n            'ext': 'mp4',\n            'title': 'youtube-dl testing video',\n        },\n        'params': {\n            'skip_download': True\n        }\n    }]\n\n    def _real_extract(self, url):\n\n        def _fetch_data(vid_id, mytv=False):\n            if mytv:\n                base_data_url = 'http://my.tv.sohu.com/play/videonew.do?vid='\n            else:\n                base_data_url = 'http://hot.vrs.sohu.com/vrs_flash.action?vid='\n\n            return self._download_json(\n                base_data_url + vid_id, video_id,\n                'Downloading JSON data for %s' % vid_id,\n                headers=self.geo_verification_headers())\n\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        mytv = mobj.group('mytv') is not None\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = re.sub(r' - \u641c\u72d0\u89c6\u9891$', '', self._og_search_title(webpage))\n\n        vid = self._html_search_regex(\n            r'var vid ?= ?[\"\\'](\\d+)[\"\\']',\n            webpage, 'video path')\n        vid_data = _fetch_data(vid, mytv)\n        if vid_data['play'] != 1:\n            if vid_data.get('status') == 12:\n                raise ExtractorError(\n                    '%s said: There\\'s something wrong in the video.' % self.IE_NAME,\n                    expected=True)\n            else:\n                self.raise_geo_restricted(\n                    '%s said: The video is only licensed to users in Mainland China.' % self.IE_NAME)\n\n        formats_json = {}\n        for format_id in ('nor', 'high', 'super', 'ori', 'h2644k', 'h2654k'):\n            vid_id = vid_data['data'].get('%sVid' % format_id)\n            if not vid_id:\n                continue\n            vid_id = compat_str(vid_id)\n            formats_json[format_id] = vid_data if vid == vid_id else _fetch_data(vid_id, mytv)\n\n        part_count = vid_data['data']['totalBlocks']\n\n        playlist = []\n        for i in range(part_count):\n            formats = []\n            for format_id, format_data in formats_json.items():\n                allot = format_data['allot']\n\n                data = format_data['data']\n                clips_url = data['clipsURL']\n                su = data['su']\n\n                video_url = 'newflv.sohu.ccgslb.net'\n                cdnId = None\n                retries = 0\n\n                while 'newflv.sohu.ccgslb.net' in video_url:\n                    params = {\n                        'prot': 9,\n                        'file': clips_url[i],\n                        'new': su[i],\n                        'prod': 'flash',\n                        'rb': 1,\n                    }\n\n                    if cdnId is not None:\n                        params['idc'] = cdnId\n\n                    download_note = 'Downloading %s video URL part %d of %d' % (\n                        format_id, i + 1, part_count)\n\n                    if retries > 0:\n                        download_note += ' (retry #%d)' % retries\n                    part_info = self._parse_json(self._download_webpage(\n                        'http://%s/?%s' % (allot, compat_urllib_parse_urlencode(params)),\n                        video_id, download_note), video_id)\n\n                    video_url = part_info['url']\n                    cdnId = part_info.get('nid')\n\n                    retries += 1\n                    if retries > 5:\n                        raise ExtractorError('Failed to get video URL')\n\n                formats.append({\n                    'url': video_url,\n                    'format_id': format_id,\n                    'filesize': int_or_none(\n                        try_get(data, lambda x: x['clipsBytes'][i])),\n                    'width': int_or_none(data.get('width')),\n                    'height': int_or_none(data.get('height')),\n                    'fps': int_or_none(data.get('fps')),\n                })\n            self._sort_formats(formats)\n\n            playlist.append({\n                'id': '%s_part%d' % (video_id, i + 1),\n                'title': title,\n                'duration': vid_data['data']['clipsDuration'][i],\n                'formats': formats,\n            })\n\n        if len(playlist) == 1:\n            info = playlist[0]\n            info['id'] = video_id\n        else:\n            info = {\n                '_type': 'multi_video',\n                'entries': playlist,\n                'id': video_id,\n                'title': title,\n            }\n\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "sohu.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/sohu.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}