{"author": "ansible", "code": "\n# Copyright (c) 2016-2017 Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: oneview_san_manager\nshort_description: Manage OneView SAN Manager resources\ndescription:\n    - Provides an interface to manage SAN Manager resources. Can create, update, or delete.\nversion_added: \"2.4\"\nrequirements:\n    - hpOneView >= 3.1.1\nauthor:\n    - Felipe Bulsoni (@fgbulsoni)\n    - Thiago Miotto (@tmiotto)\n    - Adriane Cardozo (@adriane-cardozo)\noptions:\n    state:\n        description:\n            - Indicates the desired state for the Uplink Set resource.\n                - C(present) ensures data properties are compliant with OneView.\n                - C(absent) removes the resource from OneView, if it exists.\n                - C(connection_information_set) updates the connection information for the SAN Manager. This operation is non-idempotent.\n        default: present\n        choices: [present, absent, connection_information_set]\n    data:\n      description:\n        - List with SAN Manager properties.\n      required: true\n\nextends_documentation_fragment:\n    - oneview\n    - oneview.validateetag\n'''\n\nEXAMPLES = '''\n- name: Creates a Device Manager for the Brocade SAN provider with the given hostname and credentials\n  oneview_san_manager:\n    config: /etc/oneview/oneview_config.json\n    state: present\n    data:\n      providerDisplayName: Brocade Network Advisor\n      connectionInfo:\n        - name: Host\n          value: 172.18.15.1\n        - name: Port\n          value: 5989\n        - name: Username\n          value: username\n        - name: Password\n          value: password\n        - name: UseSsl\n          value: true\n  delegate_to: localhost\n\n- name: Ensure a Device Manager for the Cisco SAN Provider is present\n  oneview_san_manager:\n    config: /etc/oneview/oneview_config.json\n    state: present\n    data:\n      name: 172.18.20.1\n      providerDisplayName: Cisco\n      connectionInfo:\n        - name: Host\n          value: 172.18.20.1\n        - name: SnmpPort\n          value: 161\n        - name: SnmpUserName\n          value: admin\n        - name: SnmpAuthLevel\n          value: authnopriv\n        - name: SnmpAuthProtocol\n          value: sha\n        - name: SnmpAuthString\n          value: password\n  delegate_to: localhost\n\n- name: Sets the SAN Manager connection information\n  oneview_san_manager:\n    config: /etc/oneview/oneview_config.json\n    state: connection_information_set\n    data:\n      connectionInfo:\n        - name: Host\n          value: '172.18.15.1'\n        - name: Port\n          value: '5989'\n        - name: Username\n          value: 'username'\n        - name: Password\n          value: 'password'\n        - name: UseSsl\n          value: true\n  delegate_to: localhost\n\n- name: Refreshes the SAN Manager\n  oneview_san_manager:\n    config: /etc/oneview/oneview_config.json\n    state: present\n    data:\n      name: 172.18.15.1\n      refreshState: RefreshPending\n  delegate_to: localhost\n\n- name: Delete the SAN Manager recently created\n  oneview_san_manager:\n    config: /etc/oneview/oneview_config.json\n    state: absent\n    data:\n      name: '172.18.15.1'\n  delegate_to: localhost\n'''\n\nRETURN = '''\nsan_manager:\n    description: Has the OneView facts about the SAN Manager.\n    returned: On state 'present'. Can be null.\n    type: dict\n'''\n\nfrom ansible.module_utils.oneview import OneViewModuleBase, OneViewModuleValueError\n\n\nclass SanManagerModule(OneViewModuleBase):\n    MSG_CREATED = 'SAN Manager created successfully.'\n    MSG_UPDATED = 'SAN Manager updated successfully.'\n    MSG_DELETED = 'SAN Manager deleted successfully.'\n    MSG_ALREADY_PRESENT = 'SAN Manager is already present.'\n    MSG_ALREADY_ABSENT = 'SAN Manager is already absent.'\n    MSG_SAN_MANAGER_PROVIDER_DISPLAY_NAME_NOT_FOUND = \"The provider '{0}' was not found.\"\n\n    argument_spec = dict(\n        state=dict(type='str', default='present', choices=['absent', 'present', 'connection_information_set']),\n        data=dict(type='dict', required=True)\n    )\n\n    def __init__(self):\n        super(SanManagerModule, self).__init__(additional_arg_spec=self.argument_spec, validate_etag_support=True)\n        self.resource_client = self.oneview_client.san_managers\n\n    def execute_module(self):\n        if self.data.get('connectionInfo'):\n            for connection_hash in self.data.get('connectionInfo'):\n                if connection_hash.get('name') == 'Host':\n                    resource_name = connection_hash.get('value')\n        elif self.data.get('name'):\n            resource_name = self.data.get('name')\n        else:\n            msg = 'A \"name\" or \"connectionInfo\" must be provided inside the \"data\" field for this operation. '\n            msg += 'If a \"connectionInfo\" is provided, the \"Host\" name is considered as the \"name\" for the resource.'\n            raise OneViewModuleValueError(msg.format())\n\n        resource = self.resource_client.get_by_name(resource_name)\n\n        if self.state == 'present':\n            changed, msg, san_manager = self._present(resource)\n            return dict(changed=changed, msg=msg, ansible_facts=dict(san_manager=san_manager))\n\n        elif self.state == 'absent':\n            return self.resource_absent(resource, method='remove')\n\n        elif self.state == 'connection_information_set':\n            changed, msg, san_manager = self._connection_information_set(resource)\n            return dict(changed=changed, msg=msg, ansible_facts=dict(san_manager=san_manager))\n\n    def _present(self, resource):\n        if not resource:\n            provider_uri = self.data.get('providerUri', self._get_provider_uri_by_display_name(self.data))\n            return True, self.MSG_CREATED, self.resource_client.add(self.data, provider_uri)\n        else:\n            merged_data = resource.copy()\n            merged_data.update(self.data)\n\n            \n            resource.pop('connectionInfo', None)\n            merged_data.pop('connectionInfo', None)\n\n            if self.compare(resource, merged_data):\n                return False, self.MSG_ALREADY_PRESENT, resource\n            else:\n                updated_san_manager = self.resource_client.update(resource=merged_data, id_or_uri=resource['uri'])\n                return True, self.MSG_UPDATED, updated_san_manager\n\n    def _connection_information_set(self, resource):\n        if not resource:\n            return self._present(resource)\n        else:\n            merged_data = resource.copy()\n            merged_data.update(self.data)\n            merged_data.pop('refreshState', None)\n            if not self.data.get('connectionInfo', None):\n                raise OneViewModuleValueError('A connectionInfo field is required for this operation.')\n            updated_san_manager = self.resource_client.update(resource=merged_data, id_or_uri=resource['uri'])\n            return True, self.MSG_UPDATED, updated_san_manager\n\n    def _get_provider_uri_by_display_name(self, data):\n        display_name = data.get('providerDisplayName')\n        provider_uri = self.resource_client.get_provider_uri(display_name)\n\n        if not provider_uri:\n            raise OneViewModuleValueError(self.MSG_SAN_MANAGER_PROVIDER_DISPLAY_NAME_NOT_FOUND.format(display_name))\n\n        return provider_uri\n\n\ndef main():\n    SanManagerModule().run()\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  oneview san manager short description  manage oneview san manager resources description        provides interface manage san manager resources  can create  update  delete  version added   2 4  requirements        hponeview    3 1 1 author        felipe bulsoni ( fgbulsoni)       thiago miotto ( tmiotto)       adriane cardozo ( adriane cardozo) options      state          description                indicates desired state uplink set resource                    c(present) ensures data properties compliant oneview                    c(absent) removes resource oneview  exists                    c(connection information set) updates connection information san manager  this operation non idempotent          default  present         choices   present  absent  connection information set      data        description            list san manager properties        required  true  extends documentation fragment        oneview       oneview validateetag      examples         name  creates device manager brocade san provider given hostname credentials   oneview san manager      config   etc oneview oneview config json     state  present     data        providerdisplayname  brocade network advisor       connectioninfo            name  host           value  172 18 15 1           name  port           value  5989           name  username           value  username           name  password           value  password           name  usessl           value  true   delegate  localhost    name  ensure device manager cisco san provider present   oneview san manager      config   etc oneview oneview config json     state  present     data        name  172 18 20 1       providerdisplayname  cisco       connectioninfo            name  host           value  172 18 20 1           name  snmpport           value  161           name  snmpusername           value  admin           name  snmpauthlevel           value  authnopriv           name  snmpauthprotocol           value  sha           name  snmpauthstring           value  password   delegate  localhost    name  sets san manager connection information   oneview san manager      config   etc oneview oneview config json     state  connection information set     data        connectioninfo            name  host           value   172 18 15 1            name  port           value   5989            name  username           value   username            name  password           value   password            name  usessl           value  true   delegate  localhost    name  refreshes san manager   oneview san manager      config   etc oneview oneview config json     state  present     data        name  172 18 15 1       refreshstate  refreshpending   delegate  localhost    name  delete san manager recently created   oneview san manager      config   etc oneview oneview config json     state  absent     data        name   172 18 15 1    delegate  localhost      return       san manager      description  has oneview facts san manager      returned  on state  present   can null      type  dict         usr bin python    copyright (c) 2016 2017 hewlett packard enterprise development lp    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    remove  connectioninfo  comparison  since possible validate  ", "content": "#!/usr/bin/python\n# Copyright (c) 2016-2017 Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: oneview_san_manager\nshort_description: Manage OneView SAN Manager resources\ndescription:\n    - Provides an interface to manage SAN Manager resources. Can create, update, or delete.\nversion_added: \"2.4\"\nrequirements:\n    - hpOneView >= 3.1.1\nauthor:\n    - Felipe Bulsoni (@fgbulsoni)\n    - Thiago Miotto (@tmiotto)\n    - Adriane Cardozo (@adriane-cardozo)\noptions:\n    state:\n        description:\n            - Indicates the desired state for the Uplink Set resource.\n                - C(present) ensures data properties are compliant with OneView.\n                - C(absent) removes the resource from OneView, if it exists.\n                - C(connection_information_set) updates the connection information for the SAN Manager. This operation is non-idempotent.\n        default: present\n        choices: [present, absent, connection_information_set]\n    data:\n      description:\n        - List with SAN Manager properties.\n      required: true\n\nextends_documentation_fragment:\n    - oneview\n    - oneview.validateetag\n'''\n\nEXAMPLES = '''\n- name: Creates a Device Manager for the Brocade SAN provider with the given hostname and credentials\n  oneview_san_manager:\n    config: /etc/oneview/oneview_config.json\n    state: present\n    data:\n      providerDisplayName: Brocade Network Advisor\n      connectionInfo:\n        - name: Host\n          value: 172.18.15.1\n        - name: Port\n          value: 5989\n        - name: Username\n          value: username\n        - name: Password\n          value: password\n        - name: UseSsl\n          value: true\n  delegate_to: localhost\n\n- name: Ensure a Device Manager for the Cisco SAN Provider is present\n  oneview_san_manager:\n    config: /etc/oneview/oneview_config.json\n    state: present\n    data:\n      name: 172.18.20.1\n      providerDisplayName: Cisco\n      connectionInfo:\n        - name: Host\n          value: 172.18.20.1\n        - name: SnmpPort\n          value: 161\n        - name: SnmpUserName\n          value: admin\n        - name: SnmpAuthLevel\n          value: authnopriv\n        - name: SnmpAuthProtocol\n          value: sha\n        - name: SnmpAuthString\n          value: password\n  delegate_to: localhost\n\n- name: Sets the SAN Manager connection information\n  oneview_san_manager:\n    config: /etc/oneview/oneview_config.json\n    state: connection_information_set\n    data:\n      connectionInfo:\n        - name: Host\n          value: '172.18.15.1'\n        - name: Port\n          value: '5989'\n        - name: Username\n          value: 'username'\n        - name: Password\n          value: 'password'\n        - name: UseSsl\n          value: true\n  delegate_to: localhost\n\n- name: Refreshes the SAN Manager\n  oneview_san_manager:\n    config: /etc/oneview/oneview_config.json\n    state: present\n    data:\n      name: 172.18.15.1\n      refreshState: RefreshPending\n  delegate_to: localhost\n\n- name: Delete the SAN Manager recently created\n  oneview_san_manager:\n    config: /etc/oneview/oneview_config.json\n    state: absent\n    data:\n      name: '172.18.15.1'\n  delegate_to: localhost\n'''\n\nRETURN = '''\nsan_manager:\n    description: Has the OneView facts about the SAN Manager.\n    returned: On state 'present'. Can be null.\n    type: dict\n'''\n\nfrom ansible.module_utils.oneview import OneViewModuleBase, OneViewModuleValueError\n\n\nclass SanManagerModule(OneViewModuleBase):\n    MSG_CREATED = 'SAN Manager created successfully.'\n    MSG_UPDATED = 'SAN Manager updated successfully.'\n    MSG_DELETED = 'SAN Manager deleted successfully.'\n    MSG_ALREADY_PRESENT = 'SAN Manager is already present.'\n    MSG_ALREADY_ABSENT = 'SAN Manager is already absent.'\n    MSG_SAN_MANAGER_PROVIDER_DISPLAY_NAME_NOT_FOUND = \"The provider '{0}' was not found.\"\n\n    argument_spec = dict(\n        state=dict(type='str', default='present', choices=['absent', 'present', 'connection_information_set']),\n        data=dict(type='dict', required=True)\n    )\n\n    def __init__(self):\n        super(SanManagerModule, self).__init__(additional_arg_spec=self.argument_spec, validate_etag_support=True)\n        self.resource_client = self.oneview_client.san_managers\n\n    def execute_module(self):\n        if self.data.get('connectionInfo'):\n            for connection_hash in self.data.get('connectionInfo'):\n                if connection_hash.get('name') == 'Host':\n                    resource_name = connection_hash.get('value')\n        elif self.data.get('name'):\n            resource_name = self.data.get('name')\n        else:\n            msg = 'A \"name\" or \"connectionInfo\" must be provided inside the \"data\" field for this operation. '\n            msg += 'If a \"connectionInfo\" is provided, the \"Host\" name is considered as the \"name\" for the resource.'\n            raise OneViewModuleValueError(msg.format())\n\n        resource = self.resource_client.get_by_name(resource_name)\n\n        if self.state == 'present':\n            changed, msg, san_manager = self._present(resource)\n            return dict(changed=changed, msg=msg, ansible_facts=dict(san_manager=san_manager))\n\n        elif self.state == 'absent':\n            return self.resource_absent(resource, method='remove')\n\n        elif self.state == 'connection_information_set':\n            changed, msg, san_manager = self._connection_information_set(resource)\n            return dict(changed=changed, msg=msg, ansible_facts=dict(san_manager=san_manager))\n\n    def _present(self, resource):\n        if not resource:\n            provider_uri = self.data.get('providerUri', self._get_provider_uri_by_display_name(self.data))\n            return True, self.MSG_CREATED, self.resource_client.add(self.data, provider_uri)\n        else:\n            merged_data = resource.copy()\n            merged_data.update(self.data)\n\n            # Remove 'connectionInfo' from comparison, since it is not possible to validate it.\n            resource.pop('connectionInfo', None)\n            merged_data.pop('connectionInfo', None)\n\n            if self.compare(resource, merged_data):\n                return False, self.MSG_ALREADY_PRESENT, resource\n            else:\n                updated_san_manager = self.resource_client.update(resource=merged_data, id_or_uri=resource['uri'])\n                return True, self.MSG_UPDATED, updated_san_manager\n\n    def _connection_information_set(self, resource):\n        if not resource:\n            return self._present(resource)\n        else:\n            merged_data = resource.copy()\n            merged_data.update(self.data)\n            merged_data.pop('refreshState', None)\n            if not self.data.get('connectionInfo', None):\n                raise OneViewModuleValueError('A connectionInfo field is required for this operation.')\n            updated_san_manager = self.resource_client.update(resource=merged_data, id_or_uri=resource['uri'])\n            return True, self.MSG_UPDATED, updated_san_manager\n\n    def _get_provider_uri_by_display_name(self, data):\n        display_name = data.get('providerDisplayName')\n        provider_uri = self.resource_client.get_provider_uri(display_name)\n\n        if not provider_uri:\n            raise OneViewModuleValueError(self.MSG_SAN_MANAGER_PROVIDER_DISPLAY_NAME_NOT_FOUND.format(display_name))\n\n        return provider_uri\n\n\ndef main():\n    SanManagerModule().run()\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "oneview_san_manager.py", "id": "02e1876ab6cf10c4feeef95ec8a412e9", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/remote_management/oneview/oneview_san_manager.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}