{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\r\n\r\nimport re\r\n\r\nfrom .common import InfoExtractor\r\nfrom ..compat import compat_str\r\nfrom ..utils import (\r\n    int_or_none,\r\n    js_to_json,\r\n    try_get,\r\n)\r\n\r\n\r\nclass JojIE(InfoExtractor):\r\n    _VALID_URL = r\r\n    _TESTS = [{\r\n        'url': 'https://media.joj.sk/embed/a388ec4c-6019-4a4a-9312-b1bee194e932',\r\n        'info_dict': {\r\n            'id': 'a388ec4c-6019-4a4a-9312-b1bee194e932',\r\n            'ext': 'mp4',\r\n            'title': 'NOV\u00c9 B\u00ddVANIE',\r\n            'thumbnail': r're:^https?://.*\\.jpg$',\r\n            'duration': 3118,\r\n        }\r\n    }, {\r\n        'url': 'joj:a388ec4c-6019-4a4a-9312-b1bee194e932',\r\n        'only_matching': True,\r\n    }]\r\n\r\n    @staticmethod\r\n    def _extract_urls(webpage):\r\n        return re.findall(\r\n            r'<iframe\\b[^>]+\\bsrc=[\"\\'](?P<url>(?:https?:)?//media\\.joj\\.sk/embed/[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})',\r\n            webpage)\r\n\r\n    def _real_extract(self, url):\r\n        video_id = self._match_id(url)\r\n\r\n        webpage = self._download_webpage(\r\n            'https://media.joj.sk/embed/%s' % video_id, video_id)\r\n\r\n        title = self._search_regex(\r\n            (r'videoTitle\\s*:\\s*([\"\\'])(?P<title>(?:(?!\\1).)+)\\1',\r\n             r'<title>(?P<title>[^<]+)'), webpage, 'title',\r\n            default=None, group='title') or self._og_search_title(webpage)\r\n\r\n        bitrates = self._parse_json(\r\n            self._search_regex(\r\n                r'(?s)bitrates\\s*=\\s*({.+?});', webpage, 'bitrates',\r\n                default='{}'),\r\n            video_id, transform_source=js_to_json, fatal=False)\r\n\r\n        formats = []\r\n        for format_url in try_get(bitrates, lambda x: x['mp4'], list) or []:\r\n            if isinstance(format_url, compat_str):\r\n                height = self._search_regex(\r\n                    r'(\\d+)[pP]\\.', format_url, 'height', default=None)\r\n                formats.append({\r\n                    'url': format_url,\r\n                    'format_id': '%sp' % height if height else None,\r\n                    'height': int(height),\r\n                })\r\n        if not formats:\r\n            playlist = self._download_xml(\r\n                'https://media.joj.sk/services/Video.php?clip=%s' % video_id,\r\n                video_id)\r\n            for file_el in playlist.findall('./files/file'):\r\n                path = file_el.get('path')\r\n                if not path:\r\n                    continue\r\n                format_id = file_el.get('id') or file_el.get('label')\r\n                formats.append({\r\n                    'url': 'http://n16.joj.sk/storage/%s' % path.replace(\r\n                        'dat/', '', 1),\r\n                    'format_id': format_id,\r\n                    'height': int_or_none(self._search_regex(\r\n                        r'(\\d+)[pP]', format_id or path, 'height',\r\n                        default=None)),\r\n                })\r\n        self._sort_formats(formats)\r\n\r\n        thumbnail = self._og_search_thumbnail(webpage)\r\n\r\n        duration = int_or_none(self._search_regex(\r\n            r'videoDuration\\s*:\\s*(\\d+)', webpage, 'duration', fatal=False))\r\n\r\n        return {\r\n            'id': video_id,\r\n            'title': title,\r\n            'thumbnail': thumbnail,\r\n            'duration': duration,\r\n            'formats': formats,\r\n        }\r\n", "comments": "(?x)\r\n                    (?:\r\n                        joj:|\r\n                        https?://media\\.joj\\.sk/embed/\r\n                    )\r\n                    (?P<id>[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})\r\n                \n \n# coding: utf-8\r\n", "content": "# coding: utf-8\r\nfrom __future__ import unicode_literals\r\n\r\nimport re\r\n\r\nfrom .common import InfoExtractor\r\nfrom ..compat import compat_str\r\nfrom ..utils import (\r\n    int_or_none,\r\n    js_to_json,\r\n    try_get,\r\n)\r\n\r\n\r\nclass JojIE(InfoExtractor):\r\n    _VALID_URL = r'''(?x)\r\n                    (?:\r\n                        joj:|\r\n                        https?://media\\.joj\\.sk/embed/\r\n                    )\r\n                    (?P<id>[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})\r\n                '''\r\n    _TESTS = [{\r\n        'url': 'https://media.joj.sk/embed/a388ec4c-6019-4a4a-9312-b1bee194e932',\r\n        'info_dict': {\r\n            'id': 'a388ec4c-6019-4a4a-9312-b1bee194e932',\r\n            'ext': 'mp4',\r\n            'title': 'NOV\u00c9 B\u00ddVANIE',\r\n            'thumbnail': r're:^https?://.*\\.jpg$',\r\n            'duration': 3118,\r\n        }\r\n    }, {\r\n        'url': 'joj:a388ec4c-6019-4a4a-9312-b1bee194e932',\r\n        'only_matching': True,\r\n    }]\r\n\r\n    @staticmethod\r\n    def _extract_urls(webpage):\r\n        return re.findall(\r\n            r'<iframe\\b[^>]+\\bsrc=[\"\\'](?P<url>(?:https?:)?//media\\.joj\\.sk/embed/[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})',\r\n            webpage)\r\n\r\n    def _real_extract(self, url):\r\n        video_id = self._match_id(url)\r\n\r\n        webpage = self._download_webpage(\r\n            'https://media.joj.sk/embed/%s' % video_id, video_id)\r\n\r\n        title = self._search_regex(\r\n            (r'videoTitle\\s*:\\s*([\"\\'])(?P<title>(?:(?!\\1).)+)\\1',\r\n             r'<title>(?P<title>[^<]+)'), webpage, 'title',\r\n            default=None, group='title') or self._og_search_title(webpage)\r\n\r\n        bitrates = self._parse_json(\r\n            self._search_regex(\r\n                r'(?s)bitrates\\s*=\\s*({.+?});', webpage, 'bitrates',\r\n                default='{}'),\r\n            video_id, transform_source=js_to_json, fatal=False)\r\n\r\n        formats = []\r\n        for format_url in try_get(bitrates, lambda x: x['mp4'], list) or []:\r\n            if isinstance(format_url, compat_str):\r\n                height = self._search_regex(\r\n                    r'(\\d+)[pP]\\.', format_url, 'height', default=None)\r\n                formats.append({\r\n                    'url': format_url,\r\n                    'format_id': '%sp' % height if height else None,\r\n                    'height': int(height),\r\n                })\r\n        if not formats:\r\n            playlist = self._download_xml(\r\n                'https://media.joj.sk/services/Video.php?clip=%s' % video_id,\r\n                video_id)\r\n            for file_el in playlist.findall('./files/file'):\r\n                path = file_el.get('path')\r\n                if not path:\r\n                    continue\r\n                format_id = file_el.get('id') or file_el.get('label')\r\n                formats.append({\r\n                    'url': 'http://n16.joj.sk/storage/%s' % path.replace(\r\n                        'dat/', '', 1),\r\n                    'format_id': format_id,\r\n                    'height': int_or_none(self._search_regex(\r\n                        r'(\\d+)[pP]', format_id or path, 'height',\r\n                        default=None)),\r\n                })\r\n        self._sort_formats(formats)\r\n\r\n        thumbnail = self._og_search_thumbnail(webpage)\r\n\r\n        duration = int_or_none(self._search_regex(\r\n            r'videoDuration\\s*:\\s*(\\d+)', webpage, 'duration', fatal=False))\r\n\r\n        return {\r\n            'id': video_id,\r\n            'title': title,\r\n            'thumbnail': thumbnail,\r\n            'duration': duration,\r\n            'formats': formats,\r\n        }\r\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "joj.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/joj.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}