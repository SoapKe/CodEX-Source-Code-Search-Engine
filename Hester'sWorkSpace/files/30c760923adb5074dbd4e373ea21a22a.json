{"author": "python-telegram-bot", "code": "\n# -*- coding: utf-8 -*-\n\n\"\"\"Simple Bot to reply to Telegram messages.\n\nThis program is dedicated to the public domain under the CC0 license.\n\nThis Bot uses the Updater class to handle the bot.\n\nFirst, a few handler functions are defined. Then, those functions are passed to\nthe Dispatcher and registered at their respective places.\nThen, the bot is started and runs until we press Ctrl-C on the command line.\n\nUsage:\nBasic inline bot example. Applies different text transformations.\nPress Ctrl-C on the command line or send a signal to the process to stop the\nbot.\n\"\"\"\nfrom uuid import uuid4\n\nfrom telegram.utils.helpers import escape_markdown\n\nfrom telegram import InlineQueryResultArticle, ParseMode, \\\n    InputTextMessageContent\nfrom telegram.ext import Updater, InlineQueryHandler, CommandHandler\nimport logging\n\n\nlogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n                    level=logging.INFO)\n\nlogger = logging.getLogger(__name__)\n\n\n\n\ndef start(bot, update):\n    \"\"\"Send a message when the command /start is issued.\"\"\"\n    update.message.reply_text('Hi!')\n\n\ndef help(bot, update):\n    \"\"\"Send a message when the command /help is issued.\"\"\"\n    update.message.reply_text('Help!')\n\n\ndef inlinequery(bot, update):\n    \"\"\"Handle the inline query.\"\"\"\n    query = update.inline_query.query\n    results = [\n        InlineQueryResultArticle(\n            id=uuid4(),\n            title=\"Caps\",\n            input_message_content=InputTextMessageContent(\n                query.upper())),\n        InlineQueryResultArticle(\n            id=uuid4(),\n            title=\"Bold\",\n            input_message_content=InputTextMessageContent(\n                \"*{}*\".format(escape_markdown(query)),\n                parse_mode=ParseMode.MARKDOWN)),\n        InlineQueryResultArticle(\n            id=uuid4(),\n            title=\"Italic\",\n            input_message_content=InputTextMessageContent(\n                \"_{}_\".format(escape_markdown(query)),\n                parse_mode=ParseMode.MARKDOWN))]\n\n    update.inline_query.answer(results)\n\n\ndef error(bot, update, error):\n    \"\"\"Log Errors caused by Updates.\"\"\"\n    logger.warning('Update \"%s\" caused error \"%s\"', update, error)\n\n\ndef main():\n    \n    updater = Updater(\"TOKEN\")\n\n    \n    dp = updater.dispatcher\n\n    \n    dp.add_handler(CommandHandler(\"start\", start))\n    dp.add_handler(CommandHandler(\"help\", help))\n\n    \n    dp.add_handler(InlineQueryHandler(inlinequery))\n\n    \n    dp.add_error_handler(error)\n\n    \n    updater.start_polling()\n\n    \n    \n    # start_polling() is non-blocking and will stop the bot gracefully.\n    updater.idle()\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "   simple bot reply telegram messages   this program dedicated public domain cc0 license   this bot uses updater class handle bot   first  handler functions defined  then  functions passed dispatcher registered respective places  then  bot started runs press ctrl c command line   usage  basic inline bot example  applies different text transformations  press ctrl c command line send signal process stop bot      uuid import uuid4  telegram utils helpers import escape markdown  telegram import inlinequeryresultarticle  parsemode        inputtextmessagecontent telegram ext import updater  inlinequeryhandler  commandhandler import logging    enable logging logging basicconfig(format   (asctime)s    (name)s    (levelname)s    (message)s                       level logging info)  logger   logging getlogger(  name  )     define command handlers  these usually take two arguments bot   update  error handlers also receive raised telegramerror object error  def start(bot  update)         send message command  start issued         update message reply text( hi  )   def help(bot  update)         send message command  help issued         update message reply text( help  )   def inlinequery(bot  update)         handle inline query         query   update inline query query     results             inlinequeryresultarticle(             id uuid4()              title  caps               input message content inputtextmessagecontent(                 query upper()))          inlinequeryresultarticle(             id uuid4()              title  bold               input message content inputtextmessagecontent(                        format(escape markdown(query))                  parse mode parsemode markdown))          inlinequeryresultarticle(             id uuid4()              title  italic               input message content inputtextmessagecontent(                        format(escape markdown(query))                  parse mode parsemode markdown))       update inline query answer(results)   def error(bot  update  error)         log errors caused updates         usr bin env python        coding  utf 8        enable logging    define command handlers  these usually take two arguments bot    update  error handlers also receive raised telegramerror object error     create updater pass bot token     get dispatcher register handlers    different commands   answer telegram    noncommand e message   echo message telegram    log errors    start bot    block user presses ctrl c process receives sigint     sigterm sigabrt  this used time  since    start polling() non blocking stop bot gracefully  ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"Simple Bot to reply to Telegram messages.\n\nThis program is dedicated to the public domain under the CC0 license.\n\nThis Bot uses the Updater class to handle the bot.\n\nFirst, a few handler functions are defined. Then, those functions are passed to\nthe Dispatcher and registered at their respective places.\nThen, the bot is started and runs until we press Ctrl-C on the command line.\n\nUsage:\nBasic inline bot example. Applies different text transformations.\nPress Ctrl-C on the command line or send a signal to the process to stop the\nbot.\n\"\"\"\nfrom uuid import uuid4\n\nfrom telegram.utils.helpers import escape_markdown\n\nfrom telegram import InlineQueryResultArticle, ParseMode, \\\n    InputTextMessageContent\nfrom telegram.ext import Updater, InlineQueryHandler, CommandHandler\nimport logging\n\n# Enable logging\nlogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n                    level=logging.INFO)\n\nlogger = logging.getLogger(__name__)\n\n\n# Define a few command handlers. These usually take the two arguments bot and\n# update. Error handlers also receive the raised TelegramError object in error.\ndef start(bot, update):\n    \"\"\"Send a message when the command /start is issued.\"\"\"\n    update.message.reply_text('Hi!')\n\n\ndef help(bot, update):\n    \"\"\"Send a message when the command /help is issued.\"\"\"\n    update.message.reply_text('Help!')\n\n\ndef inlinequery(bot, update):\n    \"\"\"Handle the inline query.\"\"\"\n    query = update.inline_query.query\n    results = [\n        InlineQueryResultArticle(\n            id=uuid4(),\n            title=\"Caps\",\n            input_message_content=InputTextMessageContent(\n                query.upper())),\n        InlineQueryResultArticle(\n            id=uuid4(),\n            title=\"Bold\",\n            input_message_content=InputTextMessageContent(\n                \"*{}*\".format(escape_markdown(query)),\n                parse_mode=ParseMode.MARKDOWN)),\n        InlineQueryResultArticle(\n            id=uuid4(),\n            title=\"Italic\",\n            input_message_content=InputTextMessageContent(\n                \"_{}_\".format(escape_markdown(query)),\n                parse_mode=ParseMode.MARKDOWN))]\n\n    update.inline_query.answer(results)\n\n\ndef error(bot, update, error):\n    \"\"\"Log Errors caused by Updates.\"\"\"\n    logger.warning('Update \"%s\" caused error \"%s\"', update, error)\n\n\ndef main():\n    # Create the Updater and pass it your bot's token.\n    updater = Updater(\"TOKEN\")\n\n    # Get the dispatcher to register handlers\n    dp = updater.dispatcher\n\n    # on different commands - answer in Telegram\n    dp.add_handler(CommandHandler(\"start\", start))\n    dp.add_handler(CommandHandler(\"help\", help))\n\n    # on noncommand i.e message - echo the message on Telegram\n    dp.add_handler(InlineQueryHandler(inlinequery))\n\n    # log all errors\n    dp.add_error_handler(error)\n\n    # Start the Bot\n    updater.start_polling()\n\n    # Block until the user presses Ctrl-C or the process receives SIGINT,\n    # SIGTERM or SIGABRT. This should be used most of the time, since\n    # start_polling() is non-blocking and will stop the bot gracefully.\n    updater.idle()\n\n\nif __name__ == '__main__':\n    main()\n", "description": "We have made you a wrapper you can't refuse", "file_name": "inlinebot.py", "id": "30c760923adb5074dbd4e373ea21a22a", "language": "Python", "project_name": "python-telegram-bot", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/python-telegram-bot-python-telegram-bot/python-telegram-bot-python-telegram-bot-3ccf40e/examples/inlinebot.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:32:55Z", "url": "https://github.com/python-telegram-bot/python-telegram-bot", "wiki": true}