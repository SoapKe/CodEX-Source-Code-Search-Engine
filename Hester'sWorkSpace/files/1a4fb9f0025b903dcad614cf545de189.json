{"author": "yandex", "code": "from gixy.core.variable import Variable\nfrom gixy.core.regexp import Regexp\n\n\ndef get_overrides():\n    result = {}\n    for klass in Directive.__subclasses__():\n        if not klass.nginx_name:\n            continue\n\n        if not klass.__name__.endswith('Directive'):\n            continue\n\n        result[klass.nginx_name] = klass\n    return result\n\n\nclass Directive(object):\n    nginx_name = None\n    is_block = False\n    provide_variables = False\n\n    def __init__(self, name, args, raw=None):\n        self.name = name\n        self.parent = None\n        self.args = args\n        self._raw = raw\n\n    def set_parent(self, parent):\n        self.parent = parent\n\n    @property\n    def parents(self):\n        parent = self.parent\n        while parent:\n            yield parent\n            parent = parent.parent\n\n    @property\n    def variables(self):\n        raise NotImplementedError()\n\n    def __str__(self):\n        return '{name} {args};'.format(name=self.name, args=' '.join(self.args))\n\n\nclass AddHeaderDirective(Directive):\n    nginx_name = 'add_header'\n\n    def __init__(self, name, args):\n        super(AddHeaderDirective, self).__init__(name, args)\n        self.header = args[0].lower()\n        self.value = args[1]\n        self.always = False\n        if len(args) > 2 and args[2] == 'always':\n            self.always = True\n\n\nclass SetDirective(Directive):\n    nginx_name = 'set'\n    provide_variables = True\n\n    def __init__(self, name, args):\n        super(SetDirective, self).__init__(name, args)\n        self.variable = args[0].strip('$')\n        self.value = args[1]\n\n    @property\n    def variables(self):\n        return [Variable(name=self.variable, value=self.value, provider=self)]\n\n\nclass AuthRequestSetDirective(Directive):\n    nginx_name = 'auth_request_set'\n    provide_variables = True\n\n    def __init__(self, name, args):\n        super(AuthRequestSetDirective, self).__init__(name, args)\n        self.variable = args[0].strip('$')\n        self.value = args[1]\n\n    @property\n    def variables(self):\n        return [Variable(name=self.variable, value=self.value, provider=self)]\n\n\nclass SetByLuaDirective(Directive):\n    nginx_name = 'set_by_lua'\n    provide_variables = True\n\n    def __init__(self, name, args):\n        super(SetByLuaDirective, self).__init__(name, args)\n        self.variable = args[0].strip('$')\n        self.value = args[1]\n\n    @property\n    def variables(self):\n        return [Variable(name=self.variable, provider=self, have_script=False)]\n\n\nclass RewriteDirective(Directive):\n    nginx_name = 'rewrite'\n    provide_variables = True\n    boundary = Regexp('[^\\s\\r\\n]')\n\n    def __init__(self, name, args):\n        super(RewriteDirective, self).__init__(name, args)\n        self.pattern = args[0]\n        self.replace = args[1]\n        self.flag = None\n        if len(args) > 2:\n            self.flag = args[2]\n\n    @property\n    def variables(self):\n        regexp = Regexp(self.pattern, case_sensitive=True)\n        result = []\n        for name, group in regexp.groups.items():\n            result.append(Variable(name=name, value=group, boundary=self.boundary, provider=self))\n        return result\n\n\nclass RootDirective(Directive):\n    nginx_name = 'root'\n    provide_variables = True\n\n    def __init__(self, name, args):\n        super(RootDirective, self).__init__(name, args)\n        self.path = args[0]\n\n    @property\n    def variables(self):\n        return [Variable(name='document_root', value=self.path, provider=self)]\n\n\nclass AliasDirective(Directive):\n    nginx_name = 'alias'\n\n    def __init__(self, name, args):\n        super(AliasDirective, self).__init__(name, args)\n        self.path = args[0]\n", "comments": "", "content": "from gixy.core.variable import Variable\nfrom gixy.core.regexp import Regexp\n\n\ndef get_overrides():\n    result = {}\n    for klass in Directive.__subclasses__():\n        if not klass.nginx_name:\n            continue\n\n        if not klass.__name__.endswith('Directive'):\n            continue\n\n        result[klass.nginx_name] = klass\n    return result\n\n\nclass Directive(object):\n    nginx_name = None\n    is_block = False\n    provide_variables = False\n\n    def __init__(self, name, args, raw=None):\n        self.name = name\n        self.parent = None\n        self.args = args\n        self._raw = raw\n\n    def set_parent(self, parent):\n        self.parent = parent\n\n    @property\n    def parents(self):\n        parent = self.parent\n        while parent:\n            yield parent\n            parent = parent.parent\n\n    @property\n    def variables(self):\n        raise NotImplementedError()\n\n    def __str__(self):\n        return '{name} {args};'.format(name=self.name, args=' '.join(self.args))\n\n\nclass AddHeaderDirective(Directive):\n    nginx_name = 'add_header'\n\n    def __init__(self, name, args):\n        super(AddHeaderDirective, self).__init__(name, args)\n        self.header = args[0].lower()\n        self.value = args[1]\n        self.always = False\n        if len(args) > 2 and args[2] == 'always':\n            self.always = True\n\n\nclass SetDirective(Directive):\n    nginx_name = 'set'\n    provide_variables = True\n\n    def __init__(self, name, args):\n        super(SetDirective, self).__init__(name, args)\n        self.variable = args[0].strip('$')\n        self.value = args[1]\n\n    @property\n    def variables(self):\n        return [Variable(name=self.variable, value=self.value, provider=self)]\n\n\nclass AuthRequestSetDirective(Directive):\n    nginx_name = 'auth_request_set'\n    provide_variables = True\n\n    def __init__(self, name, args):\n        super(AuthRequestSetDirective, self).__init__(name, args)\n        self.variable = args[0].strip('$')\n        self.value = args[1]\n\n    @property\n    def variables(self):\n        return [Variable(name=self.variable, value=self.value, provider=self)]\n\n\nclass SetByLuaDirective(Directive):\n    nginx_name = 'set_by_lua'\n    provide_variables = True\n\n    def __init__(self, name, args):\n        super(SetByLuaDirective, self).__init__(name, args)\n        self.variable = args[0].strip('$')\n        self.value = args[1]\n\n    @property\n    def variables(self):\n        return [Variable(name=self.variable, provider=self, have_script=False)]\n\n\nclass RewriteDirective(Directive):\n    nginx_name = 'rewrite'\n    provide_variables = True\n    boundary = Regexp('[^\\s\\r\\n]')\n\n    def __init__(self, name, args):\n        super(RewriteDirective, self).__init__(name, args)\n        self.pattern = args[0]\n        self.replace = args[1]\n        self.flag = None\n        if len(args) > 2:\n            self.flag = args[2]\n\n    @property\n    def variables(self):\n        regexp = Regexp(self.pattern, case_sensitive=True)\n        result = []\n        for name, group in regexp.groups.items():\n            result.append(Variable(name=name, value=group, boundary=self.boundary, provider=self))\n        return result\n\n\nclass RootDirective(Directive):\n    nginx_name = 'root'\n    provide_variables = True\n\n    def __init__(self, name, args):\n        super(RootDirective, self).__init__(name, args)\n        self.path = args[0]\n\n    @property\n    def variables(self):\n        return [Variable(name='document_root', value=self.path, provider=self)]\n\n\nclass AliasDirective(Directive):\n    nginx_name = 'alias'\n\n    def __init__(self, name, args):\n        super(AliasDirective, self).__init__(name, args)\n        self.path = args[0]\n", "description": "Nginx configuration static analyzer", "file_name": "directive.py", "id": "1a4fb9f0025b903dcad614cf545de189", "language": "Python", "project_name": "gixy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/yandex-gixy/yandex-gixy-86b5e60/gixy/directives/directive.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:01:42Z", "url": "https://github.com/yandex/gixy", "wiki": true}