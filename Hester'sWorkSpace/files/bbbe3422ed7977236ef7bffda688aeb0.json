{"author": "ansible", "code": "# Copyright (c) 2016-2017 Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom ansible.compat.tests import unittest, mock\nfrom hpe_test_utils import OneViewBaseTestCase\nfrom oneview_module_loader import NetworkSetModule\n\nFAKE_MSG_ERROR = 'Fake message error'\n\nNETWORK_SET = dict(\n    name='OneViewSDK Test Network Set',\n    networkUris=['/rest/ethernet-networks/aaa-bbb-ccc']\n)\n\nNETWORK_SET_WITH_NEW_NAME = dict(name='OneViewSDK Test Network Set - Renamed')\n\nPARAMS_FOR_PRESENT = dict(\n    config='config.json',\n    state='present',\n    data=dict(name=NETWORK_SET['name'],\n              networkUris=['/rest/ethernet-networks/aaa-bbb-ccc'])\n)\n\nPARAMS_WITH_CHANGES = dict(\n    config='config.json',\n    state='present',\n    data=dict(name=NETWORK_SET['name'],\n              newName=NETWORK_SET['name'] + \" - Renamed\",\n              networkUris=['/rest/ethernet-networks/aaa-bbb-ccc', 'Name of a Network'])\n)\n\nPARAMS_FOR_ABSENT = dict(\n    config='config.json',\n    state='absent',\n    data=dict(name=NETWORK_SET['name'])\n)\n\n\nclass NetworkSetModuleSpec(unittest.TestCase,\n                           OneViewBaseTestCase):\n    \n\n    def setUp(self):\n        self.configure_mocks(self, NetworkSetModule)\n        self.resource = self.mock_ov_client.network_sets\n        self.ethernet_network_client = self.mock_ov_client.ethernet_networks\n\n    def test_should_create_new_network_set(self):\n        self.resource.get_by.return_value = []\n        self.resource.create.return_value = NETWORK_SET\n\n        self.mock_ansible_module.params = PARAMS_FOR_PRESENT\n\n        NetworkSetModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=NetworkSetModule.MSG_CREATED,\n            ansible_facts=dict(network_set=NETWORK_SET)\n        )\n\n    def test_should_not_update_when_data_is_equals(self):\n        self.resource.get_by.return_value = [NETWORK_SET]\n\n        self.mock_ansible_module.params = PARAMS_FOR_PRESENT\n\n        NetworkSetModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            msg=NetworkSetModule.MSG_ALREADY_PRESENT,\n            ansible_facts=dict(network_set=NETWORK_SET)\n        )\n\n    def test_update_when_data_has_modified_attributes(self):\n        data_merged = dict(name=NETWORK_SET['name'] + \" - Renamed\",\n                           networkUris=['/rest/ethernet-networks/aaa-bbb-ccc',\n                                        '/rest/ethernet-networks/ddd-eee-fff']\n                           )\n\n        self.resource.get_by.side_effect = [NETWORK_SET], []\n        self.resource.update.return_value = data_merged\n        self.ethernet_network_client.get_by.return_value = [{'uri': '/rest/ethernet-networks/ddd-eee-fff'}]\n\n        self.mock_ansible_module.params = PARAMS_WITH_CHANGES\n\n        NetworkSetModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=NetworkSetModule.MSG_UPDATED,\n            ansible_facts=dict(network_set=data_merged)\n        )\n\n    def test_should_raise_exception_when_ethernet_network_not_found(self):\n        self.resource.get_by.side_effect = [NETWORK_SET], []\n        self.ethernet_network_client.get_by.return_value = []\n\n        self.mock_ansible_module.params = PARAMS_WITH_CHANGES\n\n        NetworkSetModule().run()\n\n        self.mock_ansible_module.fail_json.assert_called_once_with(\n            exception=mock.ANY,\n            msg=NetworkSetModule.MSG_ETHERNET_NETWORK_NOT_FOUND + \"Name of a Network\"\n        )\n\n    def test_should_remove_network(self):\n        self.resource.get_by.return_value = [NETWORK_SET]\n\n        self.mock_ansible_module.params = PARAMS_FOR_ABSENT\n\n        NetworkSetModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=NetworkSetModule.MSG_DELETED\n        )\n\n    def test_should_do_nothing_when_network_set_not_exist(self):\n        self.resource.get_by.return_value = []\n\n        self.mock_ansible_module.params = PARAMS_FOR_ABSENT\n\n        NetworkSetModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            msg=NetworkSetModule.MSG_ALREADY_ABSENT\n        )\n\n    def test_update_scopes_when_different(self):\n        params_to_scope = PARAMS_FOR_PRESENT.copy()\n        params_to_scope['data']['scopeUris'] = ['test']\n        self.mock_ansible_module.params = params_to_scope\n\n        resource_data = NETWORK_SET.copy()\n        resource_data['scopeUris'] = ['fake']\n        resource_data['uri'] = 'rest/network-sets/fake'\n        self.resource.get_by.return_value = [resource_data]\n\n        patch_return = resource_data.copy()\n        patch_return['scopeUris'] = ['test']\n        self.resource.patch.return_value = patch_return\n\n        NetworkSetModule().run()\n\n        self.resource.patch.assert_called_once_with('rest/network-sets/fake',\n                                                    operation='replace',\n                                                    path='/scopeUris',\n                                                    value=['test'])\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            ansible_facts=dict(network_set=patch_return),\n            msg=NetworkSetModule.MSG_UPDATED\n        )\n\n    def test_should_do_nothing_when_scopes_are_the_same(self):\n        params_to_scope = PARAMS_FOR_PRESENT.copy()\n        params_to_scope['data']['scopeUris'] = ['test']\n        self.mock_ansible_module.params = params_to_scope\n\n        resource_data = NETWORK_SET.copy()\n        resource_data['scopeUris'] = ['test']\n        self.resource.get_by.return_value = [resource_data]\n\n        NetworkSetModule().run()\n\n        self.resource.patch.not_been_called()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(network_set=resource_data),\n            msg=NetworkSetModule.MSG_ALREADY_PRESENT\n        )\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "        oneviewbasetestcase common tests class constructor main function      also provides mocks used test case             copyright (c) 2016 2017 hewlett packard enterprise development lp    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "# Copyright (c) 2016-2017 Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom ansible.compat.tests import unittest, mock\nfrom hpe_test_utils import OneViewBaseTestCase\nfrom oneview_module_loader import NetworkSetModule\n\nFAKE_MSG_ERROR = 'Fake message error'\n\nNETWORK_SET = dict(\n    name='OneViewSDK Test Network Set',\n    networkUris=['/rest/ethernet-networks/aaa-bbb-ccc']\n)\n\nNETWORK_SET_WITH_NEW_NAME = dict(name='OneViewSDK Test Network Set - Renamed')\n\nPARAMS_FOR_PRESENT = dict(\n    config='config.json',\n    state='present',\n    data=dict(name=NETWORK_SET['name'],\n              networkUris=['/rest/ethernet-networks/aaa-bbb-ccc'])\n)\n\nPARAMS_WITH_CHANGES = dict(\n    config='config.json',\n    state='present',\n    data=dict(name=NETWORK_SET['name'],\n              newName=NETWORK_SET['name'] + \" - Renamed\",\n              networkUris=['/rest/ethernet-networks/aaa-bbb-ccc', 'Name of a Network'])\n)\n\nPARAMS_FOR_ABSENT = dict(\n    config='config.json',\n    state='absent',\n    data=dict(name=NETWORK_SET['name'])\n)\n\n\nclass NetworkSetModuleSpec(unittest.TestCase,\n                           OneViewBaseTestCase):\n    \"\"\"\n    OneViewBaseTestCase has common tests for class constructor and main function,\n    also provides the mocks used in this test case.\n    \"\"\"\n\n    def setUp(self):\n        self.configure_mocks(self, NetworkSetModule)\n        self.resource = self.mock_ov_client.network_sets\n        self.ethernet_network_client = self.mock_ov_client.ethernet_networks\n\n    def test_should_create_new_network_set(self):\n        self.resource.get_by.return_value = []\n        self.resource.create.return_value = NETWORK_SET\n\n        self.mock_ansible_module.params = PARAMS_FOR_PRESENT\n\n        NetworkSetModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=NetworkSetModule.MSG_CREATED,\n            ansible_facts=dict(network_set=NETWORK_SET)\n        )\n\n    def test_should_not_update_when_data_is_equals(self):\n        self.resource.get_by.return_value = [NETWORK_SET]\n\n        self.mock_ansible_module.params = PARAMS_FOR_PRESENT\n\n        NetworkSetModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            msg=NetworkSetModule.MSG_ALREADY_PRESENT,\n            ansible_facts=dict(network_set=NETWORK_SET)\n        )\n\n    def test_update_when_data_has_modified_attributes(self):\n        data_merged = dict(name=NETWORK_SET['name'] + \" - Renamed\",\n                           networkUris=['/rest/ethernet-networks/aaa-bbb-ccc',\n                                        '/rest/ethernet-networks/ddd-eee-fff']\n                           )\n\n        self.resource.get_by.side_effect = [NETWORK_SET], []\n        self.resource.update.return_value = data_merged\n        self.ethernet_network_client.get_by.return_value = [{'uri': '/rest/ethernet-networks/ddd-eee-fff'}]\n\n        self.mock_ansible_module.params = PARAMS_WITH_CHANGES\n\n        NetworkSetModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=NetworkSetModule.MSG_UPDATED,\n            ansible_facts=dict(network_set=data_merged)\n        )\n\n    def test_should_raise_exception_when_ethernet_network_not_found(self):\n        self.resource.get_by.side_effect = [NETWORK_SET], []\n        self.ethernet_network_client.get_by.return_value = []\n\n        self.mock_ansible_module.params = PARAMS_WITH_CHANGES\n\n        NetworkSetModule().run()\n\n        self.mock_ansible_module.fail_json.assert_called_once_with(\n            exception=mock.ANY,\n            msg=NetworkSetModule.MSG_ETHERNET_NETWORK_NOT_FOUND + \"Name of a Network\"\n        )\n\n    def test_should_remove_network(self):\n        self.resource.get_by.return_value = [NETWORK_SET]\n\n        self.mock_ansible_module.params = PARAMS_FOR_ABSENT\n\n        NetworkSetModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=NetworkSetModule.MSG_DELETED\n        )\n\n    def test_should_do_nothing_when_network_set_not_exist(self):\n        self.resource.get_by.return_value = []\n\n        self.mock_ansible_module.params = PARAMS_FOR_ABSENT\n\n        NetworkSetModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            msg=NetworkSetModule.MSG_ALREADY_ABSENT\n        )\n\n    def test_update_scopes_when_different(self):\n        params_to_scope = PARAMS_FOR_PRESENT.copy()\n        params_to_scope['data']['scopeUris'] = ['test']\n        self.mock_ansible_module.params = params_to_scope\n\n        resource_data = NETWORK_SET.copy()\n        resource_data['scopeUris'] = ['fake']\n        resource_data['uri'] = 'rest/network-sets/fake'\n        self.resource.get_by.return_value = [resource_data]\n\n        patch_return = resource_data.copy()\n        patch_return['scopeUris'] = ['test']\n        self.resource.patch.return_value = patch_return\n\n        NetworkSetModule().run()\n\n        self.resource.patch.assert_called_once_with('rest/network-sets/fake',\n                                                    operation='replace',\n                                                    path='/scopeUris',\n                                                    value=['test'])\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            ansible_facts=dict(network_set=patch_return),\n            msg=NetworkSetModule.MSG_UPDATED\n        )\n\n    def test_should_do_nothing_when_scopes_are_the_same(self):\n        params_to_scope = PARAMS_FOR_PRESENT.copy()\n        params_to_scope['data']['scopeUris'] = ['test']\n        self.mock_ansible_module.params = params_to_scope\n\n        resource_data = NETWORK_SET.copy()\n        resource_data['scopeUris'] = ['test']\n        self.resource.get_by.return_value = [resource_data]\n\n        NetworkSetModule().run()\n\n        self.resource.patch.not_been_called()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(network_set=resource_data),\n            msg=NetworkSetModule.MSG_ALREADY_PRESENT\n        )\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_oneview_network_set.py", "id": "bbbe3422ed7977236ef7bffda688aeb0", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/remote_management/oneview/test_oneview_network_set.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}