{"author": "USArmyResearchLab", "code": "import dshell\nimport dpkt\n\n\nclass DshellDecoder(dshell.IPDecoder):\n\n    \"\"\"\n    Simple TCP syn/rst filter (ipv4) only\n    \"\"\"\n\n    def __init__(self):\n        dshell.IPDecoder.__init__(self,\n                                  name='synrst',\n                                  description='detect failed attempts to connect (SYN followed by a RST/ACK)',\n                                  filter=\"tcp[13]=2 or tcp[13]=20\",\n                                  author='bg'\n                                  )\n        self.tracker = {}       # key = (srcip,srcport,seqnum,dstip,dstport)\n\n    def packetHandler(self, ip=None):\n        tcp = dpkt.ip.IP(ip.pkt).data\n\n        if tcp.flags & 2:  \n            seqnum = tcp.seq\n            key = '%s:%s:%d:%s:%s' % (\n                ip.sip, ip.sport, seqnum, ip.dip, ip.dport)\n            self.tracker[key] = ''\n        elif tcp.flags & 20:  \n            acknum = tcp.ack - 1\n            tmpkey = '%s:%s:%d:%s:%s' % (\n                ip.dip, ip.dport, acknum, ip.sip, ip.sport)\n            if self.tracker.__contains__(tmpkey):\n                self.alert('Failed connection', **ip.info())\n                del self.tracker[tmpkey]\n\n\nif __name__ == '__main__':\n    dObj = DshellDecoder()\n    print dObj\nelse:\n    dObj = DshellDecoder()\n", "comments": "        simple tcp syn rst filter (ipv4)            key   (srcip srcport seqnum dstip dstport)    check syn flag    check rst ack flags ", "content": "import dshell\nimport dpkt\n\n\nclass DshellDecoder(dshell.IPDecoder):\n\n    \"\"\"\n    Simple TCP syn/rst filter (ipv4) only\n    \"\"\"\n\n    def __init__(self):\n        dshell.IPDecoder.__init__(self,\n                                  name='synrst',\n                                  description='detect failed attempts to connect (SYN followed by a RST/ACK)',\n                                  filter=\"tcp[13]=2 or tcp[13]=20\",\n                                  author='bg'\n                                  )\n        self.tracker = {}       # key = (srcip,srcport,seqnum,dstip,dstport)\n\n    def packetHandler(self, ip=None):\n        tcp = dpkt.ip.IP(ip.pkt).data\n\n        if tcp.flags & 2:  # check for SYN flag\n            seqnum = tcp.seq\n            key = '%s:%s:%d:%s:%s' % (\n                ip.sip, ip.sport, seqnum, ip.dip, ip.dport)\n            self.tracker[key] = ''\n        elif tcp.flags & 20:  # check for RST/ACK flags\n            acknum = tcp.ack - 1\n            tmpkey = '%s:%s:%d:%s:%s' % (\n                ip.dip, ip.dport, acknum, ip.sip, ip.sport)\n            if self.tracker.__contains__(tmpkey):\n                self.alert('Failed connection', **ip.info())\n                del self.tracker[tmpkey]\n\n\nif __name__ == '__main__':\n    dObj = DshellDecoder()\n    print dObj\nelse:\n    dObj = DshellDecoder()\n", "description": "Dshell is a network forensic analysis framework.", "file_name": "synrst.py", "id": "10d5c38e490be54fe39c4d6f631962de", "language": "Python", "project_name": "Dshell", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/USArmyResearchLab-Dshell/USArmyResearchLab-Dshell-5850adf/decoders/misc/synrst.py", "save_time": "", "source": "", "update_at": "2018-03-18T10:01:29Z", "url": "https://github.com/USArmyResearchLab/Dshell", "wiki": true}