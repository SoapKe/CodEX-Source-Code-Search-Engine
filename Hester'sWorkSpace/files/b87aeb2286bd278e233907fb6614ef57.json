{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models\n\n\nclass AccountAnalyticTag(models.Model):\n    _name = 'account.analytic.tag'\n    _description = 'Analytic Tags'\n    name = fields.Char(string='Analytic Tag', index=True, required=True)\n    color = fields.Integer('Color Index', default=10)\n    active = fields.Boolean(default=True, help=\"Set active to false to hide the Analytic Tag without removing it.\")\n\n\nclass AccountAnalyticAccount(models.Model):\n    _name = 'account.analytic.account'\n    _inherit = ['mail.thread']\n    _description = 'Analytic Account'\n    _order = 'code, name asc'\n\n    @api.multi\n    def _compute_debit_credit_balance(self):\n        analytic_line_obj = self.env['account.analytic.line']\n        domain = [('account_id', 'in', self.mapped('id'))]\n        if self._context.get('from_date', False):\n            domain.append(('date', '>=', self._context['from_date']))\n        if self._context.get('to_date', False):\n            domain.append(('date', '<=', self._context['to_date']))\n\n        account_amounts = analytic_line_obj.search_read(domain, ['account_id', 'amount'])\n        account_ids = set([line['account_id'][0] for line in account_amounts])\n        data_debit = {account_id: 0.0 for account_id in account_ids}\n        data_credit = {account_id: 0.0 for account_id in account_ids}\n        for account_amount in account_amounts:\n            if account_amount['amount'] < 0.0:\n                data_debit[account_amount['account_id'][0]] += account_amount['amount']\n            else:\n                data_credit[account_amount['account_id'][0]] += account_amount['amount']\n\n        for account in self:\n            account.debit = abs(data_debit.get(account.id, 0.0))\n            account.credit = data_credit.get(account.id, 0.0)\n            account.balance = account.credit - account.debit\n\n    name = fields.Char(string='Analytic Account', index=True, required=True, track_visibility='onchange')\n    code = fields.Char(string='Reference', index=True, track_visibility='onchange')\n    active = fields.Boolean('Active', help=\"If the active field is set to False, it will allow you to hide the account without removing it.\", default=True)\n\n    tag_ids = fields.Many2many('account.analytic.tag', 'account_analytic_account_tag_rel', 'account_id', 'tag_id', string='Tags', copy=True)\n    line_ids = fields.One2many('account.analytic.line', 'account_id', string=\"Analytic Lines\")\n\n    company_id = fields.Many2one('res.company', string='Company', required=True, default=lambda self: self.env.user.company_id)\n\n    \n    partner_id = fields.Many2one('res.partner', string='Customer', auto_join=True, track_visibility='onchange')\n\n    balance = fields.Monetary(compute='_compute_debit_credit_balance', string='Balance')\n    debit = fields.Monetary(compute='_compute_debit_credit_balance', string='Debit')\n    credit = fields.Monetary(compute='_compute_debit_credit_balance', string='Credit')\n\n    currency_id = fields.Many2one(related=\"company_id.currency_id\", string=\"Currency\", readonly=True)\n\n    @api.multi\n    def name_get(self):\n        res = []\n        for analytic in self:\n            name = analytic.name\n            if analytic.code:\n                name = '['+analytic.code+'] '+name\n            if analytic.partner_id:\n                name = name +' - '+analytic.partner_id.commercial_partner_id.name\n            res.append((analytic.id, name))\n        return res\n\n    @api.model\n    def name_search(self, name='', args=None, operator='ilike', limit=100):\n        if operator not in ('ilike', 'like', '=', '=like', '=ilike'):\n            return super(AccountAnalyticAccount, self).name_search(name, args, operator, limit)\n        args = args or []\n        domain = ['|', ('code', operator, name), ('name', operator, name)]\n        partners = self.env['res.partner'].search([('name', operator, name)], limit=limit)\n        if partners:\n            domain = ['|'] + domain + [('partner_id', 'in', partners.ids)]\n        recs = self.search(domain + args, limit=limit)\n        return recs.name_get()\n\n\nclass AccountAnalyticLine(models.Model):\n    _name = 'account.analytic.line'\n    _description = 'Analytic Line'\n    _order = 'date desc, id desc'\n\n    @api.model\n    def _default_user(self):\n        return self.env.context.get('user_id', self.env.user.id)\n\n    name = fields.Char('Description', required=True)\n    date = fields.Date('Date', required=True, index=True, default=fields.Date.context_today)\n    amount = fields.Monetary('Amount', required=True, default=0.0)\n    unit_amount = fields.Float('Quantity', default=0.0)\n    account_id = fields.Many2one('account.analytic.account', 'Analytic Account', required=True, ondelete='restrict', index=True)\n    partner_id = fields.Many2one('res.partner', string='Partner')\n    user_id = fields.Many2one('res.users', string='User', default=_default_user)\n\n    tag_ids = fields.Many2many('account.analytic.tag', 'account_analytic_line_tag_rel', 'line_id', 'tag_id', string='Tags', copy=True)\n\n    company_id = fields.Many2one(related='account_id.company_id', string='Company', store=True, readonly=True)\n    currency_id = fields.Many2one(related=\"company_id.currency_id\", string=\"Currency\", readonly=True)\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     use auto join speed name search call ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models\n\n\nclass AccountAnalyticTag(models.Model):\n    _name = 'account.analytic.tag'\n    _description = 'Analytic Tags'\n    name = fields.Char(string='Analytic Tag', index=True, required=True)\n    color = fields.Integer('Color Index', default=10)\n    active = fields.Boolean(default=True, help=\"Set active to false to hide the Analytic Tag without removing it.\")\n\n\nclass AccountAnalyticAccount(models.Model):\n    _name = 'account.analytic.account'\n    _inherit = ['mail.thread']\n    _description = 'Analytic Account'\n    _order = 'code, name asc'\n\n    @api.multi\n    def _compute_debit_credit_balance(self):\n        analytic_line_obj = self.env['account.analytic.line']\n        domain = [('account_id', 'in', self.mapped('id'))]\n        if self._context.get('from_date', False):\n            domain.append(('date', '>=', self._context['from_date']))\n        if self._context.get('to_date', False):\n            domain.append(('date', '<=', self._context['to_date']))\n\n        account_amounts = analytic_line_obj.search_read(domain, ['account_id', 'amount'])\n        account_ids = set([line['account_id'][0] for line in account_amounts])\n        data_debit = {account_id: 0.0 for account_id in account_ids}\n        data_credit = {account_id: 0.0 for account_id in account_ids}\n        for account_amount in account_amounts:\n            if account_amount['amount'] < 0.0:\n                data_debit[account_amount['account_id'][0]] += account_amount['amount']\n            else:\n                data_credit[account_amount['account_id'][0]] += account_amount['amount']\n\n        for account in self:\n            account.debit = abs(data_debit.get(account.id, 0.0))\n            account.credit = data_credit.get(account.id, 0.0)\n            account.balance = account.credit - account.debit\n\n    name = fields.Char(string='Analytic Account', index=True, required=True, track_visibility='onchange')\n    code = fields.Char(string='Reference', index=True, track_visibility='onchange')\n    active = fields.Boolean('Active', help=\"If the active field is set to False, it will allow you to hide the account without removing it.\", default=True)\n\n    tag_ids = fields.Many2many('account.analytic.tag', 'account_analytic_account_tag_rel', 'account_id', 'tag_id', string='Tags', copy=True)\n    line_ids = fields.One2many('account.analytic.line', 'account_id', string=\"Analytic Lines\")\n\n    company_id = fields.Many2one('res.company', string='Company', required=True, default=lambda self: self.env.user.company_id)\n\n    # use auto_join to speed up name_search call\n    partner_id = fields.Many2one('res.partner', string='Customer', auto_join=True, track_visibility='onchange')\n\n    balance = fields.Monetary(compute='_compute_debit_credit_balance', string='Balance')\n    debit = fields.Monetary(compute='_compute_debit_credit_balance', string='Debit')\n    credit = fields.Monetary(compute='_compute_debit_credit_balance', string='Credit')\n\n    currency_id = fields.Many2one(related=\"company_id.currency_id\", string=\"Currency\", readonly=True)\n\n    @api.multi\n    def name_get(self):\n        res = []\n        for analytic in self:\n            name = analytic.name\n            if analytic.code:\n                name = '['+analytic.code+'] '+name\n            if analytic.partner_id:\n                name = name +' - '+analytic.partner_id.commercial_partner_id.name\n            res.append((analytic.id, name))\n        return res\n\n    @api.model\n    def name_search(self, name='', args=None, operator='ilike', limit=100):\n        if operator not in ('ilike', 'like', '=', '=like', '=ilike'):\n            return super(AccountAnalyticAccount, self).name_search(name, args, operator, limit)\n        args = args or []\n        domain = ['|', ('code', operator, name), ('name', operator, name)]\n        partners = self.env['res.partner'].search([('name', operator, name)], limit=limit)\n        if partners:\n            domain = ['|'] + domain + [('partner_id', 'in', partners.ids)]\n        recs = self.search(domain + args, limit=limit)\n        return recs.name_get()\n\n\nclass AccountAnalyticLine(models.Model):\n    _name = 'account.analytic.line'\n    _description = 'Analytic Line'\n    _order = 'date desc, id desc'\n\n    @api.model\n    def _default_user(self):\n        return self.env.context.get('user_id', self.env.user.id)\n\n    name = fields.Char('Description', required=True)\n    date = fields.Date('Date', required=True, index=True, default=fields.Date.context_today)\n    amount = fields.Monetary('Amount', required=True, default=0.0)\n    unit_amount = fields.Float('Quantity', default=0.0)\n    account_id = fields.Many2one('account.analytic.account', 'Analytic Account', required=True, ondelete='restrict', index=True)\n    partner_id = fields.Many2one('res.partner', string='Partner')\n    user_id = fields.Many2one('res.users', string='User', default=_default_user)\n\n    tag_ids = fields.Many2many('account.analytic.tag', 'account_analytic_line_tag_rel', 'line_id', 'tag_id', string='Tags', copy=True)\n\n    company_id = fields.Many2one(related='account_id.company_id', string='Company', store=True, readonly=True)\n    currency_id = fields.Many2one(related=\"company_id.currency_id\", string=\"Currency\", readonly=True)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "analytic_account.py", "id": "b87aeb2286bd278e233907fb6614ef57", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/analytic/models/analytic_account.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}