{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: atomic_host\nshort_description: Manage the atomic host platform\ndescription:\n    - Manage the atomic host platform.\n    - Rebooting of Atomic host platform should be done outside this module.\nversion_added: \"2.2\"\nauthor:\n- Saravanan KR (@krsacme)\nnotes:\n    - Host should be an atomic platform (verified by existence of '/run/ostree-booted' file).\nrequirements:\n  - atomic\n  - python >= 2.6\noptions:\n    revision:\n        description:\n          - The version number of the atomic host to be deployed. Providing C(latest) will upgrade to the latest available version.\n        default: latest\n        aliases: [ version ]\n'''\n\nEXAMPLES = '''\n- name: Upgrade the atomic host platform to the latest version (atomic host upgrade)\n  atomic_host:\n    revision: latest\n\n- name: Deploy a specific revision as the atomic host (atomic host deploy 23.130)\n  atomic_host:\n    revision: 23.130\n'''\n\nRETURN = '''\nmsg:\n    description: The command standard output\n    returned: always\n    type: string\n    sample: 'Already on latest'\n'''\nimport os\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\n\n\ndef core(module):\n    revision = module.params['revision']\n    args = []\n\n    module.run_command_environ_update = dict(LANG='C', LC_ALL='C', LC_MESSAGES='C')\n\n    if revision == 'latest':\n        args = ['atomic', 'host', 'upgrade']\n    else:\n        args = ['atomic', 'host', 'deploy', revision]\n\n    out = {}\n    err = {}\n    rc = 0\n\n    rc, out, err = module.run_command(args, check_rc=False)\n\n    if rc == 77 and revision == 'latest':\n        module.exit_json(msg=\"Already on latest\", changed=False)\n    elif rc != 0:\n        module.fail_json(rc=rc, msg=err)\n    else:\n        module.exit_json(msg=out, changed=True)\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            revision=dict(type='str', default='latest', aliases=[\"version\"]),\n        ),\n    )\n\n    \n    if not os.path.exists(\"/run/ostree-booted\"):\n        module.fail_json(msg=\"Module atomic_host is applicable for Atomic Host Platforms only\")\n\n    try:\n        core(module)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  atomic host short description  manage atomic host platform description        manage atomic host platform        rebooting atomic host platform done outside module  version added   2 2  author    saravanan kr ( krsacme) notes        host atomic platform (verified existence   run ostree booted  file)  requirements      atomic     python    2 6 options      revision          description              the version number atomic host deployed  providing c(latest) upgrade latest available version          default  latest         aliases    version        examples         name  upgrade atomic host platform latest version (atomic host upgrade)   atomic host      revision  latest    name  deploy specific revision atomic host (atomic host deploy 23 130)   atomic host      revision  23 130      return       msg      description  the command standard output     returned  always     type  string     sample   already latest          usr bin python        coding  utf 8        copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    verify platform atomic host ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: atomic_host\nshort_description: Manage the atomic host platform\ndescription:\n    - Manage the atomic host platform.\n    - Rebooting of Atomic host platform should be done outside this module.\nversion_added: \"2.2\"\nauthor:\n- Saravanan KR (@krsacme)\nnotes:\n    - Host should be an atomic platform (verified by existence of '/run/ostree-booted' file).\nrequirements:\n  - atomic\n  - python >= 2.6\noptions:\n    revision:\n        description:\n          - The version number of the atomic host to be deployed. Providing C(latest) will upgrade to the latest available version.\n        default: latest\n        aliases: [ version ]\n'''\n\nEXAMPLES = '''\n- name: Upgrade the atomic host platform to the latest version (atomic host upgrade)\n  atomic_host:\n    revision: latest\n\n- name: Deploy a specific revision as the atomic host (atomic host deploy 23.130)\n  atomic_host:\n    revision: 23.130\n'''\n\nRETURN = '''\nmsg:\n    description: The command standard output\n    returned: always\n    type: string\n    sample: 'Already on latest'\n'''\nimport os\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\n\n\ndef core(module):\n    revision = module.params['revision']\n    args = []\n\n    module.run_command_environ_update = dict(LANG='C', LC_ALL='C', LC_MESSAGES='C')\n\n    if revision == 'latest':\n        args = ['atomic', 'host', 'upgrade']\n    else:\n        args = ['atomic', 'host', 'deploy', revision]\n\n    out = {}\n    err = {}\n    rc = 0\n\n    rc, out, err = module.run_command(args, check_rc=False)\n\n    if rc == 77 and revision == 'latest':\n        module.exit_json(msg=\"Already on latest\", changed=False)\n    elif rc != 0:\n        module.fail_json(rc=rc, msg=err)\n    else:\n        module.exit_json(msg=out, changed=True)\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            revision=dict(type='str', default='latest', aliases=[\"version\"]),\n        ),\n    )\n\n    # Verify that the platform is atomic host\n    if not os.path.exists(\"/run/ostree-booted\"):\n        module.fail_json(msg=\"Module atomic_host is applicable for Atomic Host Platforms only\")\n\n    try:\n        core(module)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "atomic_host.py", "id": "b47d0c3d712fb642149a75c454b601bd", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/atomic/atomic_host.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}