{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    unified_strdate,\n    HEADRequest,\n    int_or_none,\n)\n\n\nclass WatIE(InfoExtractor):\n    _VALID_URL = r'(?:wat:|https?://(?:www\\.)?wat\\.tv/video/.*-)(?P<id>[0-9a-z]+)'\n    IE_NAME = 'wat.tv'\n    _TESTS = [\n        {\n            'url': 'http://www.wat.tv/video/soupe-figues-l-orange-aux-epices-6z1uz_2hvf7_.html',\n            'md5': '83d882d9de5c9d97f0bb2c6273cde56a',\n            'info_dict': {\n                'id': '11713067',\n                'ext': 'mp4',\n                'title': 'Soupe de figues \u00e0 l\\'orange et aux \u00e9pices',\n                'description': 'Retrouvez l\\'\u00e9mission \"Petits plats en \u00e9quilibre\", diffus\u00e9e le 18 ao\u00fbt 2014.',\n                'upload_date': '20140819',\n                'duration': 120,\n            },\n        },\n        {\n            'url': 'http://www.wat.tv/video/gregory-lemarchal-voix-ange-6z1v7_6ygkj_.html',\n            'md5': '34bdfa5ca9fd3c7eb88601b635b0424c',\n            'info_dict': {\n                'id': '11713075',\n                'ext': 'mp4',\n                'title': 'Gr\u00e9gory Lemarchal, une voix d\\'ange depuis 10 ans (1/3)',\n                'upload_date': '20140816',\n            },\n            'expected_warnings': [\"Ce contenu n'est pas disponible pour l'instant.\"],\n        },\n    ]\n\n    _FORMATS = (\n        (200, 416, 234),\n        (400, 480, 270),\n        (600, 640, 360),\n        (1200, 640, 360),\n        (1800, 960, 540),\n        (2500, 1280, 720),\n    )\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_id = video_id if video_id.isdigit() and len(video_id) > 6 else compat_str(int(video_id, 36))\n\n        \n        \n        video_data = self._download_json(\n            'http://www.wat.tv/interface/contentv4s/' + video_id, video_id)\n        video_info = video_data['media']\n\n        error_desc = video_info.get('error_desc')\n        if error_desc:\n            self.report_warning(\n                '%s returned error: %s' % (self.IE_NAME, error_desc))\n\n        chapters = video_info['chapters']\n        if chapters:\n            first_chapter = chapters[0]\n\n            def video_id_for_chapter(chapter):\n                return chapter['tc_start'].split('-')[0]\n\n            if video_id_for_chapter(first_chapter) != video_id:\n                self.to_screen('Multipart video detected')\n                entries = [self.url_result('wat:%s' % video_id_for_chapter(chapter)) for chapter in chapters]\n                return self.playlist_result(entries, video_id, video_info['title'])\n            \n            \n        else:\n            first_chapter = video_info\n\n        title = first_chapter['title']\n\n        def extract_url(path_template, url_type):\n            req_url = 'http://www.wat.tv/get/%s' % (path_template % video_id)\n            head = self._request_webpage(HEADRequest(req_url), video_id, 'Extracting %s url' % url_type, fatal=False)\n            if head:\n                red_url = head.geturl()\n                if req_url != red_url:\n                    return red_url\n            return None\n\n        def remove_bitrate_limit(manifest_url):\n            return re.sub(r'(?:max|min)_bitrate=\\d+&?', '', manifest_url)\n\n        formats = []\n        try:\n            manifest_urls = self._download_json(\n                'http://www.wat.tv/get/webhtml/' + video_id, video_id)\n            m3u8_url = manifest_urls.get('hls')\n            if m3u8_url:\n                m3u8_url = remove_bitrate_limit(m3u8_url)\n                m3u8_formats = self._extract_m3u8_formats(\n                    m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False)\n                if m3u8_formats:\n                    formats.extend(m3u8_formats)\n                    formats.extend(self._extract_f4m_formats(\n                        m3u8_url.replace('ios', 'web').replace('.m3u8', '.f4m'),\n                        video_id, f4m_id='hds', fatal=False))\n                    http_url = extract_url('android5/%s.mp4', 'http')\n                    if http_url:\n                        for m3u8_format in m3u8_formats:\n                            vbr, abr = m3u8_format.get('vbr'), m3u8_format.get('abr')\n                            if not vbr or not abr:\n                                continue\n                            format_id = m3u8_format['format_id'].replace('hls', 'http')\n                            fmt_url = re.sub(r'%s-\\d+00-\\d+' % video_id, '%s-%d00-%d' % (video_id, round(vbr / 100), round(abr)), http_url)\n                            if self._is_valid_url(fmt_url, video_id, format_id):\n                                f = m3u8_format.copy()\n                                f.update({\n                                    'url': fmt_url,\n                                    'format_id': format_id,\n                                    'protocol': 'http',\n                                })\n                                formats.append(f)\n            mpd_url = manifest_urls.get('mpd')\n            if mpd_url:\n                formats.extend(self._extract_mpd_formats(remove_bitrate_limit(\n                    mpd_url), video_id, mpd_id='dash', fatal=False))\n            self._sort_formats(formats)\n        except ExtractorError:\n            abr = 64\n            for vbr, width, height in self._FORMATS:\n                tbr = vbr + abr\n                format_id = 'http-%s' % tbr\n                fmt_url = 'http://dnl.adv.tf1.fr/2/USP-0x0/%s/%s/%s/ssm/%s-%s-64k.mp4' % (video_id[-4:-2], video_id[-2:], video_id, video_id, vbr)\n                if self._is_valid_url(fmt_url, video_id, format_id):\n                    formats.append({\n                        'format_id': format_id,\n                        'url': fmt_url,\n                        'vbr': vbr,\n                        'abr': abr,\n                        'width': width,\n                        'height': height,\n                    })\n\n        date_diffusion = first_chapter.get('date_diffusion') or video_data.get('configv4', {}).get('estatS4')\n        upload_date = unified_strdate(date_diffusion) if date_diffusion else None\n        duration = None\n        files = video_info['files']\n        if files:\n            duration = int_or_none(files[0].get('duration'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': first_chapter.get('preview'),\n            'description': first_chapter.get('description'),\n            'view_count': int_or_none(video_info.get('views')),\n            'upload_date': upload_date,\n            'duration': duration,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# 'contentv4' is used in the website, but it also returns the related\n# videos, we don't need them\n# Otherwise we can continue and extract just one part, we have to use\n# the video id for getting the video url\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    unified_strdate,\n    HEADRequest,\n    int_or_none,\n)\n\n\nclass WatIE(InfoExtractor):\n    _VALID_URL = r'(?:wat:|https?://(?:www\\.)?wat\\.tv/video/.*-)(?P<id>[0-9a-z]+)'\n    IE_NAME = 'wat.tv'\n    _TESTS = [\n        {\n            'url': 'http://www.wat.tv/video/soupe-figues-l-orange-aux-epices-6z1uz_2hvf7_.html',\n            'md5': '83d882d9de5c9d97f0bb2c6273cde56a',\n            'info_dict': {\n                'id': '11713067',\n                'ext': 'mp4',\n                'title': 'Soupe de figues \u00e0 l\\'orange et aux \u00e9pices',\n                'description': 'Retrouvez l\\'\u00e9mission \"Petits plats en \u00e9quilibre\", diffus\u00e9e le 18 ao\u00fbt 2014.',\n                'upload_date': '20140819',\n                'duration': 120,\n            },\n        },\n        {\n            'url': 'http://www.wat.tv/video/gregory-lemarchal-voix-ange-6z1v7_6ygkj_.html',\n            'md5': '34bdfa5ca9fd3c7eb88601b635b0424c',\n            'info_dict': {\n                'id': '11713075',\n                'ext': 'mp4',\n                'title': 'Gr\u00e9gory Lemarchal, une voix d\\'ange depuis 10 ans (1/3)',\n                'upload_date': '20140816',\n            },\n            'expected_warnings': [\"Ce contenu n'est pas disponible pour l'instant.\"],\n        },\n    ]\n\n    _FORMATS = (\n        (200, 416, 234),\n        (400, 480, 270),\n        (600, 640, 360),\n        (1200, 640, 360),\n        (1800, 960, 540),\n        (2500, 1280, 720),\n    )\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_id = video_id if video_id.isdigit() and len(video_id) > 6 else compat_str(int(video_id, 36))\n\n        # 'contentv4' is used in the website, but it also returns the related\n        # videos, we don't need them\n        video_data = self._download_json(\n            'http://www.wat.tv/interface/contentv4s/' + video_id, video_id)\n        video_info = video_data['media']\n\n        error_desc = video_info.get('error_desc')\n        if error_desc:\n            self.report_warning(\n                '%s returned error: %s' % (self.IE_NAME, error_desc))\n\n        chapters = video_info['chapters']\n        if chapters:\n            first_chapter = chapters[0]\n\n            def video_id_for_chapter(chapter):\n                return chapter['tc_start'].split('-')[0]\n\n            if video_id_for_chapter(first_chapter) != video_id:\n                self.to_screen('Multipart video detected')\n                entries = [self.url_result('wat:%s' % video_id_for_chapter(chapter)) for chapter in chapters]\n                return self.playlist_result(entries, video_id, video_info['title'])\n            # Otherwise we can continue and extract just one part, we have to use\n            # the video id for getting the video url\n        else:\n            first_chapter = video_info\n\n        title = first_chapter['title']\n\n        def extract_url(path_template, url_type):\n            req_url = 'http://www.wat.tv/get/%s' % (path_template % video_id)\n            head = self._request_webpage(HEADRequest(req_url), video_id, 'Extracting %s url' % url_type, fatal=False)\n            if head:\n                red_url = head.geturl()\n                if req_url != red_url:\n                    return red_url\n            return None\n\n        def remove_bitrate_limit(manifest_url):\n            return re.sub(r'(?:max|min)_bitrate=\\d+&?', '', manifest_url)\n\n        formats = []\n        try:\n            manifest_urls = self._download_json(\n                'http://www.wat.tv/get/webhtml/' + video_id, video_id)\n            m3u8_url = manifest_urls.get('hls')\n            if m3u8_url:\n                m3u8_url = remove_bitrate_limit(m3u8_url)\n                m3u8_formats = self._extract_m3u8_formats(\n                    m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False)\n                if m3u8_formats:\n                    formats.extend(m3u8_formats)\n                    formats.extend(self._extract_f4m_formats(\n                        m3u8_url.replace('ios', 'web').replace('.m3u8', '.f4m'),\n                        video_id, f4m_id='hds', fatal=False))\n                    http_url = extract_url('android5/%s.mp4', 'http')\n                    if http_url:\n                        for m3u8_format in m3u8_formats:\n                            vbr, abr = m3u8_format.get('vbr'), m3u8_format.get('abr')\n                            if not vbr or not abr:\n                                continue\n                            format_id = m3u8_format['format_id'].replace('hls', 'http')\n                            fmt_url = re.sub(r'%s-\\d+00-\\d+' % video_id, '%s-%d00-%d' % (video_id, round(vbr / 100), round(abr)), http_url)\n                            if self._is_valid_url(fmt_url, video_id, format_id):\n                                f = m3u8_format.copy()\n                                f.update({\n                                    'url': fmt_url,\n                                    'format_id': format_id,\n                                    'protocol': 'http',\n                                })\n                                formats.append(f)\n            mpd_url = manifest_urls.get('mpd')\n            if mpd_url:\n                formats.extend(self._extract_mpd_formats(remove_bitrate_limit(\n                    mpd_url), video_id, mpd_id='dash', fatal=False))\n            self._sort_formats(formats)\n        except ExtractorError:\n            abr = 64\n            for vbr, width, height in self._FORMATS:\n                tbr = vbr + abr\n                format_id = 'http-%s' % tbr\n                fmt_url = 'http://dnl.adv.tf1.fr/2/USP-0x0/%s/%s/%s/ssm/%s-%s-64k.mp4' % (video_id[-4:-2], video_id[-2:], video_id, video_id, vbr)\n                if self._is_valid_url(fmt_url, video_id, format_id):\n                    formats.append({\n                        'format_id': format_id,\n                        'url': fmt_url,\n                        'vbr': vbr,\n                        'abr': abr,\n                        'width': width,\n                        'height': height,\n                    })\n\n        date_diffusion = first_chapter.get('date_diffusion') or video_data.get('configv4', {}).get('estatS4')\n        upload_date = unified_strdate(date_diffusion) if date_diffusion else None\n        duration = None\n        files = video_info['files']\n        if files:\n            duration = int_or_none(files[0].get('duration'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': first_chapter.get('preview'),\n            'description': first_chapter.get('description'),\n            'view_count': int_or_none(video_info.get('views')),\n            'upload_date': upload_date,\n            'duration': duration,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "wat.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/wat.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}