{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom django.core.urlresolvers import reverse\nfrom exam import fixture\n\nfrom sentry.testutils import TestCase\n\n\nclass HomeTest(TestCase):\n    @fixture\n    def path(self):\n        return reverse('sentry')\n\n    def test_redirects_to_login(self):\n        resp = self.client.get(self.path)\n\n        assert resp.status_code == 302\n        assert resp['Location'] == 'http://testserver/auth/login/'\n\n    def test_redirects_to_create_org(self):\n        self.login_as(self.user)\n\n        with self.feature('organizations:create'):\n            resp = self.client.get(self.path)\n\n        assert resp.status_code == 302\n        assert resp['Location'] == 'http://testserver/organizations/new/'\n\n    def test_shows_no_access(self):\n        self.login_as(self.user)\n\n        with self.feature({'organizations:create': False}):\n            resp = self.client.get(self.path)\n\n        assert resp.status_code == 403\n        self.assertTemplateUsed('sentry/no-organization-access.html')\n\n    def test_redirects_to_org_home(self):\n        self.login_as(self.user)\n        org = self.create_organization(owner=self.user)\n\n        with self.feature('organizations:create'):\n            resp = self.client.get(self.path)\n\n        assert resp.status_code == 302\n        assert resp['Location'] == 'http://testserver/{}/'.format(org.slug)\n", "comments": "", "content": "from __future__ import absolute_import\n\nfrom django.core.urlresolvers import reverse\nfrom exam import fixture\n\nfrom sentry.testutils import TestCase\n\n\nclass HomeTest(TestCase):\n    @fixture\n    def path(self):\n        return reverse('sentry')\n\n    def test_redirects_to_login(self):\n        resp = self.client.get(self.path)\n\n        assert resp.status_code == 302\n        assert resp['Location'] == 'http://testserver/auth/login/'\n\n    def test_redirects_to_create_org(self):\n        self.login_as(self.user)\n\n        with self.feature('organizations:create'):\n            resp = self.client.get(self.path)\n\n        assert resp.status_code == 302\n        assert resp['Location'] == 'http://testserver/organizations/new/'\n\n    def test_shows_no_access(self):\n        self.login_as(self.user)\n\n        with self.feature({'organizations:create': False}):\n            resp = self.client.get(self.path)\n\n        assert resp.status_code == 403\n        self.assertTemplateUsed('sentry/no-organization-access.html')\n\n    def test_redirects_to_org_home(self):\n        self.login_as(self.user)\n        org = self.create_organization(owner=self.user)\n\n        with self.feature('organizations:create'):\n            resp = self.client.get(self.path)\n\n        assert resp.status_code == 302\n        assert resp['Location'] == 'http://testserver/{}/'.format(org.slug)\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_home.py", "id": "c022cf0841ebc9b9a6b49b64f8252403", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/web/frontend/test_home.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}