{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .turner import TurnerBaseIE\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    strip_or_none,\n)\n\n\nclass TBSIE(TurnerBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?(?P<site>tbs|tntdrama)\\.com/(?:movies|shows/[^/]+/(?:clips|season-\\d+/episode-\\d+))/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'http://www.tntdrama.com/shows/the-alienist/clips/monster',\n        'info_dict': {\n            'id': '8d384cde33b89f3a43ce5329de42903ed5099887',\n            'ext': 'mp4',\n            'title': 'Monster',\n            'description': 'Get a first look at the theatrical trailer for TNT\u2019s highly anticipated new psychological thriller The Alienist, which premieres January 22 on TNT.',\n            'timestamp': 1508175329,\n            'upload_date': '20171016',\n        },\n        'params': {\n            \n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://www.tbs.com/shows/search-party/season-1/episode-1/explicit-the-mysterious-disappearance-of-the-girl-no-one-knew',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tntdrama.com/movies/star-wars-a-new-hope',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        site, display_id = re.match(self._VALID_URL, url).groups()\n        webpage = self._download_webpage(url, display_id)\n        video_data = self._parse_json(self._search_regex(\n            r'<script[^>]+?data-drupal-selector=\"drupal-settings-json\"[^>]*?>({.+?})</script>',\n            webpage, 'drupal setting'), display_id)['turner_playlist'][0]\n\n        media_id = video_data['mediaID']\n        title = video_data['title']\n\n        streams_data = self._download_json(\n            'http://medium.ngtv.io/media/%s/tv' % media_id,\n            media_id)['media']['tv']\n        duration = None\n        chapters = []\n        formats = []\n        for supported_type in ('unprotected', 'bulkaes'):\n            stream_data = streams_data.get(supported_type, {})\n            m3u8_url = stream_data.get('secureUrl') or stream_data.get('url')\n            if not m3u8_url:\n                continue\n            if stream_data.get('playlistProtection') == 'spe':\n                m3u8_url = self._add_akamai_spe_token(\n                    'http://token.vgtf.net/token/token_spe',\n                    m3u8_url, media_id, {\n                        'url': url,\n                        'site_name': site[:3].upper(),\n                        'auth_required': video_data.get('authRequired') == '1',\n                    })\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, media_id, 'mp4', m3u8_id='hls', fatal=False))\n\n            duration = float_or_none(stream_data.get('totalRuntime') or video_data.get('duration'))\n\n            if not chapters:\n                for chapter in stream_data.get('contentSegments', []):\n                    start_time = float_or_none(chapter.get('start'))\n                    duration = float_or_none(chapter.get('duration'))\n                    if start_time is None or duration is None:\n                        continue\n                    chapters.append({\n                        'start_time': start_time,\n                        'end_time': start_time + duration,\n                    })\n        self._sort_formats(formats)\n\n        thumbnails = []\n        for image_id, image in video_data.get('images', {}).items():\n            image_url = image.get('url')\n            if not image_url or image.get('type') != 'video':\n                continue\n            i = {\n                'id': image_id,\n                'url': image_url,\n            }\n            mobj = re.search(r'(\\d+)x(\\d+)', image_url)\n            if mobj:\n                i.update({\n                    'width': int(mobj.group(1)),\n                    'height': int(mobj.group(2)),\n                })\n            thumbnails.append(i)\n\n        return {\n            'id': media_id,\n            'title': title,\n            'description': strip_or_none(video_data.get('descriptionNoTags') or video_data.get('shortDescriptionNoTags')),\n            'duration': duration,\n            'timestamp': int_or_none(video_data.get('created')),\n            'season_number': int_or_none(video_data.get('season')),\n            'episode_number': int_or_none(video_data.get('episode')),\n            'cahpters': chapters,\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#]+)'\n# m3u8 download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .turner import TurnerBaseIE\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    strip_or_none,\n)\n\n\nclass TBSIE(TurnerBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?(?P<site>tbs|tntdrama)\\.com/(?:movies|shows/[^/]+/(?:clips|season-\\d+/episode-\\d+))/(?P<id>[^/?#]+)'\n    _TESTS = [{\n        'url': 'http://www.tntdrama.com/shows/the-alienist/clips/monster',\n        'info_dict': {\n            'id': '8d384cde33b89f3a43ce5329de42903ed5099887',\n            'ext': 'mp4',\n            'title': 'Monster',\n            'description': 'Get a first look at the theatrical trailer for TNT\u2019s highly anticipated new psychological thriller The Alienist, which premieres January 22 on TNT.',\n            'timestamp': 1508175329,\n            'upload_date': '20171016',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://www.tbs.com/shows/search-party/season-1/episode-1/explicit-the-mysterious-disappearance-of-the-girl-no-one-knew',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tntdrama.com/movies/star-wars-a-new-hope',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        site, display_id = re.match(self._VALID_URL, url).groups()\n        webpage = self._download_webpage(url, display_id)\n        video_data = self._parse_json(self._search_regex(\n            r'<script[^>]+?data-drupal-selector=\"drupal-settings-json\"[^>]*?>({.+?})</script>',\n            webpage, 'drupal setting'), display_id)['turner_playlist'][0]\n\n        media_id = video_data['mediaID']\n        title = video_data['title']\n\n        streams_data = self._download_json(\n            'http://medium.ngtv.io/media/%s/tv' % media_id,\n            media_id)['media']['tv']\n        duration = None\n        chapters = []\n        formats = []\n        for supported_type in ('unprotected', 'bulkaes'):\n            stream_data = streams_data.get(supported_type, {})\n            m3u8_url = stream_data.get('secureUrl') or stream_data.get('url')\n            if not m3u8_url:\n                continue\n            if stream_data.get('playlistProtection') == 'spe':\n                m3u8_url = self._add_akamai_spe_token(\n                    'http://token.vgtf.net/token/token_spe',\n                    m3u8_url, media_id, {\n                        'url': url,\n                        'site_name': site[:3].upper(),\n                        'auth_required': video_data.get('authRequired') == '1',\n                    })\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, media_id, 'mp4', m3u8_id='hls', fatal=False))\n\n            duration = float_or_none(stream_data.get('totalRuntime') or video_data.get('duration'))\n\n            if not chapters:\n                for chapter in stream_data.get('contentSegments', []):\n                    start_time = float_or_none(chapter.get('start'))\n                    duration = float_or_none(chapter.get('duration'))\n                    if start_time is None or duration is None:\n                        continue\n                    chapters.append({\n                        'start_time': start_time,\n                        'end_time': start_time + duration,\n                    })\n        self._sort_formats(formats)\n\n        thumbnails = []\n        for image_id, image in video_data.get('images', {}).items():\n            image_url = image.get('url')\n            if not image_url or image.get('type') != 'video':\n                continue\n            i = {\n                'id': image_id,\n                'url': image_url,\n            }\n            mobj = re.search(r'(\\d+)x(\\d+)', image_url)\n            if mobj:\n                i.update({\n                    'width': int(mobj.group(1)),\n                    'height': int(mobj.group(2)),\n                })\n            thumbnails.append(i)\n\n        return {\n            'id': media_id,\n            'title': title,\n            'description': strip_or_none(video_data.get('descriptionNoTags') or video_data.get('shortDescriptionNoTags')),\n            'duration': duration,\n            'timestamp': int_or_none(video_data.get('created')),\n            'season_number': int_or_none(video_data.get('season')),\n            'episode_number': int_or_none(video_data.get('episode')),\n            'cahpters': chapters,\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tbs.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tbs.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}