{"author": "tflearn", "code": "# -*- coding: utf-8 -*-\n\n\n\nfrom __future__ import division, print_function, absolute_import\n\nimport tflearn\nfrom tflearn.layers.core import input_data, dropout, fully_connected\nfrom tflearn.layers.conv import conv_2d, max_pool_2d\nfrom tflearn.layers.estimator import regression\n\n\nimport tflearn.datasets.oxflower17 as oxflower17\nX, Y = oxflower17.load_data(one_hot=True)\n\n\nnetwork = input_data(shape=[None, 224, 224, 3])\n\nnetwork = conv_2d(network, 64, 3, activation='relu')\nnetwork = conv_2d(network, 64, 3, activation='relu')\nnetwork = max_pool_2d(network, 2, strides=2)\n\nnetwork = conv_2d(network, 128, 3, activation='relu')\nnetwork = conv_2d(network, 128, 3, activation='relu')\nnetwork = max_pool_2d(network, 2, strides=2)\n\nnetwork = conv_2d(network, 256, 3, activation='relu')\nnetwork = conv_2d(network, 256, 3, activation='relu')\nnetwork = conv_2d(network, 256, 3, activation='relu')\nnetwork = max_pool_2d(network, 2, strides=2)\n\nnetwork = conv_2d(network, 512, 3, activation='relu')\nnetwork = conv_2d(network, 512, 3, activation='relu')\nnetwork = conv_2d(network, 512, 3, activation='relu')\nnetwork = max_pool_2d(network, 2, strides=2)\n\nnetwork = conv_2d(network, 512, 3, activation='relu')\nnetwork = conv_2d(network, 512, 3, activation='relu')\nnetwork = conv_2d(network, 512, 3, activation='relu')\nnetwork = max_pool_2d(network, 2, strides=2)\n\nnetwork = fully_connected(network, 4096, activation='relu')\nnetwork = dropout(network, 0.5)\nnetwork = fully_connected(network, 4096, activation='relu')\nnetwork = dropout(network, 0.5)\nnetwork = fully_connected(network, 17, activation='softmax')\n\nnetwork = regression(network, optimizer='rmsprop',\n                     loss='categorical_crossentropy',\n                     learning_rate=0.0001)\n\n\nmodel = tflearn.DNN(network, checkpoint_path='model_vgg',\n                    max_checkpoints=1, tensorboard_verbose=0)\nmodel.fit(X, Y, n_epoch=500, shuffle=True,\n          show_metric=True, batch_size=32, snapshot_step=500,\n          snapshot_epoch=False, run_id='vgg_oxflowers17')\n", "comments": "    very deep convolutional networks large scale visual recognition   applying vgg 16 layers convolutional network oxford 17 category flower dataset classification task   references      very deep convolutional networks large scale image recognition      k  simonyan  a  zisserman  arxiv technical report  2014   links      http   arxiv org pdf 1409 1556             coding  utf 8        data loading preprocessing    building  vgg network     training ", "content": "# -*- coding: utf-8 -*-\n\n\"\"\" Very Deep Convolutional Networks for Large-Scale Visual Recognition.\n\nApplying VGG 16-layers convolutional network to Oxford's 17 Category Flower\nDataset classification task.\n\nReferences:\n    Very Deep Convolutional Networks for Large-Scale Image Recognition.\n    K. Simonyan, A. Zisserman. arXiv technical report, 2014.\n\nLinks:\n    http://arxiv.org/pdf/1409.1556\n\n\"\"\"\n\nfrom __future__ import division, print_function, absolute_import\n\nimport tflearn\nfrom tflearn.layers.core import input_data, dropout, fully_connected\nfrom tflearn.layers.conv import conv_2d, max_pool_2d\nfrom tflearn.layers.estimator import regression\n\n# Data loading and preprocessing\nimport tflearn.datasets.oxflower17 as oxflower17\nX, Y = oxflower17.load_data(one_hot=True)\n\n# Building 'VGG Network'\nnetwork = input_data(shape=[None, 224, 224, 3])\n\nnetwork = conv_2d(network, 64, 3, activation='relu')\nnetwork = conv_2d(network, 64, 3, activation='relu')\nnetwork = max_pool_2d(network, 2, strides=2)\n\nnetwork = conv_2d(network, 128, 3, activation='relu')\nnetwork = conv_2d(network, 128, 3, activation='relu')\nnetwork = max_pool_2d(network, 2, strides=2)\n\nnetwork = conv_2d(network, 256, 3, activation='relu')\nnetwork = conv_2d(network, 256, 3, activation='relu')\nnetwork = conv_2d(network, 256, 3, activation='relu')\nnetwork = max_pool_2d(network, 2, strides=2)\n\nnetwork = conv_2d(network, 512, 3, activation='relu')\nnetwork = conv_2d(network, 512, 3, activation='relu')\nnetwork = conv_2d(network, 512, 3, activation='relu')\nnetwork = max_pool_2d(network, 2, strides=2)\n\nnetwork = conv_2d(network, 512, 3, activation='relu')\nnetwork = conv_2d(network, 512, 3, activation='relu')\nnetwork = conv_2d(network, 512, 3, activation='relu')\nnetwork = max_pool_2d(network, 2, strides=2)\n\nnetwork = fully_connected(network, 4096, activation='relu')\nnetwork = dropout(network, 0.5)\nnetwork = fully_connected(network, 4096, activation='relu')\nnetwork = dropout(network, 0.5)\nnetwork = fully_connected(network, 17, activation='softmax')\n\nnetwork = regression(network, optimizer='rmsprop',\n                     loss='categorical_crossentropy',\n                     learning_rate=0.0001)\n\n# Training\nmodel = tflearn.DNN(network, checkpoint_path='model_vgg',\n                    max_checkpoints=1, tensorboard_verbose=0)\nmodel.fit(X, Y, n_epoch=500, shuffle=True,\n          show_metric=True, batch_size=32, snapshot_step=500,\n          snapshot_epoch=False, run_id='vgg_oxflowers17')\n", "description": "Deep learning library featuring a higher-level API for TensorFlow.", "file_name": "vgg_network.py", "id": "d4665eab471aa5a1d94ebdc8d817d2fa", "language": "Python", "project_name": "tflearn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tflearn-tflearn/tflearn-tflearn-70fb38a/examples/images/vgg_network.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:15:41Z", "url": "https://github.com/tflearn/tflearn", "wiki": true}