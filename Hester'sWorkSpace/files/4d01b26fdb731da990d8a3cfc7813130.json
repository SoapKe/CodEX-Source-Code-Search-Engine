{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass RockstarGamesIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?rockstargames\\.com/videos(?:/video/|\n    _TESTS = [{\n        'url': 'https://www.rockstargames.com/videos/video/11544/',\n        'md5': '03b5caa6e357a4bd50e3143fc03e5733',\n        'info_dict': {\n            'id': '11544',\n            'ext': 'mp4',\n            'title': 'Further Adventures in Finance and Felony Trailer',\n            'description': 'md5:6d31f55f30cb101b5476c4a379e324a3',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'timestamp': 1464876000,\n            'upload_date': '20160602',\n        }\n    }, {\n        'url': 'http://www.rockstargames.com/videos\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://www.rockstargames.com/videoplayer/videos/get-video.json',\n            video_id, query={\n                'id': video_id,\n                'locale': 'en_us',\n            })['video']\n\n        title = video['title']\n\n        formats = []\n        for video in video['files_processed']['video/mp4']:\n            if not video.get('src'):\n                continue\n            resolution = video.get('resolution')\n            height = int_or_none(self._search_regex(\n                r'^(\\d+)[pP]$', resolution or '', 'height', default=None))\n            formats.append({\n                'url': self._proto_relative_url(video['src']),\n                'format_id': resolution,\n                'height': height,\n            })\n\n        if not formats:\n            youtube_id = video.get('youtube_id')\n            if youtube_id:\n                return self.url_result(youtube_id, 'Youtube')\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'thumbnail': self._proto_relative_url(video.get('screencap')),\n            'timestamp': parse_iso8601(video.get('created')),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#?/?\\?.*\\bvideo=)(?P<id>\\d+)'\n#/?video=48',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass RockstarGamesIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?rockstargames\\.com/videos(?:/video/|#?/?\\?.*\\bvideo=)(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://www.rockstargames.com/videos/video/11544/',\n        'md5': '03b5caa6e357a4bd50e3143fc03e5733',\n        'info_dict': {\n            'id': '11544',\n            'ext': 'mp4',\n            'title': 'Further Adventures in Finance and Felony Trailer',\n            'description': 'md5:6d31f55f30cb101b5476c4a379e324a3',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'timestamp': 1464876000,\n            'upload_date': '20160602',\n        }\n    }, {\n        'url': 'http://www.rockstargames.com/videos#/?video=48',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://www.rockstargames.com/videoplayer/videos/get-video.json',\n            video_id, query={\n                'id': video_id,\n                'locale': 'en_us',\n            })['video']\n\n        title = video['title']\n\n        formats = []\n        for video in video['files_processed']['video/mp4']:\n            if not video.get('src'):\n                continue\n            resolution = video.get('resolution')\n            height = int_or_none(self._search_regex(\n                r'^(\\d+)[pP]$', resolution or '', 'height', default=None))\n            formats.append({\n                'url': self._proto_relative_url(video['src']),\n                'format_id': resolution,\n                'height': height,\n            })\n\n        if not formats:\n            youtube_id = video.get('youtube_id')\n            if youtube_id:\n                return self.url_result(youtube_id, 'Youtube')\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'thumbnail': self._proto_relative_url(video.get('screencap')),\n            'timestamp': parse_iso8601(video.get('created')),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "rockstargames.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/rockstargames.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}