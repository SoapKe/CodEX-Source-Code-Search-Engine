{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, models\n\nfrom odoo.addons.calendar.models.calendar import get_real_ids\n\nfrom odoo.tools import pycompat\n\n\nclass Message(models.Model):\n\n    _inherit = \"mail.message\"\n\n    @api.model\n    def search(self, args, offset=0, limit=0, order=None, count=False):\n        \"\"\" Convert the search on real ids in the case it was asked on virtual ids, then call super() \"\"\"\n        args = list(args)\n        for index in range(len(args)):\n            if args[index][0] == \"res_id\":\n                if isinstance(args[index][2], pycompat.string_types):\n                    args[index] = (args[index][0], args[index][1], get_real_ids(args[index][2]))\n                elif isinstance(args[index][2], list):\n                    args[index] = (args[index][0], args[index][1], [get_real_ids(x) for x in args[index][2]])\n        return super(Message, self).search(args, offset=offset, limit=limit, order=order, count=count)\n\n    @api.model\n    def _find_allowed_model_wise(self, doc_model, doc_dict):\n        if doc_model == 'calendar.event':\n            order = self._context.get('order', self.env[doc_model]._order)\n            for virtual_id in self.env[doc_model].browse(doc_dict).get_recurrent_ids([], order=order):\n                doc_dict.setdefault(virtual_id, doc_dict[get_real_ids(virtual_id)])\n        return super(Message, self)._find_allowed_model_wise(doc_model, doc_dict)\n", "comments": "    convert search real ids case asked virtual ids  call super()            coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, models\n\nfrom odoo.addons.calendar.models.calendar import get_real_ids\n\nfrom odoo.tools import pycompat\n\n\nclass Message(models.Model):\n\n    _inherit = \"mail.message\"\n\n    @api.model\n    def search(self, args, offset=0, limit=0, order=None, count=False):\n        \"\"\" Convert the search on real ids in the case it was asked on virtual ids, then call super() \"\"\"\n        args = list(args)\n        for index in range(len(args)):\n            if args[index][0] == \"res_id\":\n                if isinstance(args[index][2], pycompat.string_types):\n                    args[index] = (args[index][0], args[index][1], get_real_ids(args[index][2]))\n                elif isinstance(args[index][2], list):\n                    args[index] = (args[index][0], args[index][1], [get_real_ids(x) for x in args[index][2]])\n        return super(Message, self).search(args, offset=offset, limit=limit, order=order, count=count)\n\n    @api.model\n    def _find_allowed_model_wise(self, doc_model, doc_dict):\n        if doc_model == 'calendar.event':\n            order = self._context.get('order', self.env[doc_model]._order)\n            for virtual_id in self.env[doc_model].browse(doc_dict).get_recurrent_ids([], order=order):\n                doc_dict.setdefault(virtual_id, doc_dict[get_real_ids(virtual_id)])\n        return super(Message, self)._find_allowed_model_wise(doc_model, doc_dict)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "mail_message.py", "id": "e1e02edd9a6b507d22a7107bd7608d90", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/calendar/models/mail_message.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}