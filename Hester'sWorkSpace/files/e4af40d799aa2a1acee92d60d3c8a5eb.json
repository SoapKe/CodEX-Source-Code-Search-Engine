{"author": "ansible", "code": "\n# -*- coding: UTF-8 -*-\n\n# Copyright (c) 2016, Adfinis SyGroup AG\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: udm_user\nversion_added: \"2.2\"\nauthor: \"Tobias Rueetschi (@2-B)\"\nshort_description: Manage posix users on a univention corporate server\ndescription:\n    - \"This module allows to manage posix users on a univention corporate\n       server (UCS).\n       It uses the python API of the UCS to create a new object or edit it.\"\nrequirements:\n    - Python >= 2.6\noptions:\n    state:\n        default: \"present\"\n        choices: [ present, absent ]\n        description:\n            - Whether the user is present or not.\n    username:\n        required: true\n        description:\n            - User name\n        aliases: ['name']\n    firstname:\n        description:\n            - First name. Required if C(state=present).\n    lastname:\n        description:\n            - Last name. Required if C(state=present).\n    password:\n        description:\n            - Password. Required if C(state=present).\n    birthday:\n        description:\n            - Birthday\n    city:\n        description:\n            - City of users business address.\n    country:\n        description:\n            - Country of users business address.\n    department_number:\n        description:\n            - Department number of users business address.\n        aliases: [ departmentNumber ]\n    description:\n        description:\n            - Description (not gecos)\n    display_name:\n        description:\n            - Display name (not gecos)\n        aliases: [ displayName ]\n    email:\n        default: []\n        description:\n            - A list of e-mail addresses.\n    employee_number:\n        description:\n            - Employee number\n        aliases: [ employeeNumber ]\n    employee_type:\n        description:\n            - Employee type\n        aliases: [ employeeType ]\n    gecos:\n        description:\n            - GECOS\n    groups:\n        default: []\n        description:\n            - \"POSIX groups, the LDAP DNs of the groups will be found with the\n               LDAP filter for each group as $GROUP:\n               C((&(objectClass=posixGroup)(cn=$GROUP))).\"\n    home_share:\n        description:\n            - \"Home NFS share. Must be a LDAP DN, e.g.\n               C(cn=home,cn=shares,ou=school,dc=example,dc=com).\"\n        aliases: [ homeShare ]\n    home_share_path:\n        description:\n            - Path to home NFS share, inside the homeShare.\n        aliases: [ homeSharePath ]\n    home_telephone_number:\n        default: []\n        description:\n            - List of private telephone numbers.\n        aliases: [ homeTelephoneNumber ]\n    homedrive:\n        description:\n            - Windows home drive, e.g. C(\"H:\").\n    mail_alternative_address:\n        default: []\n        description:\n            - List of alternative e-mail addresses.\n        aliases: [ mailAlternativeAddress ]\n    mail_home_server:\n        description:\n            - FQDN of mail server\n        aliases: [ mailHomeServer ]\n    mail_primary_address:\n        description:\n            - Primary e-mail address\n        aliases: [ mailPrimaryAddress ]\n    mobile_telephone_number:\n        default: []\n        description:\n            - Mobile phone number\n        aliases: [ mobileTelephoneNumber ]\n    organisation:\n        description:\n            - Organisation\n    override_pw_history:\n        type: bool\n        default: 'no'\n        description:\n            - Override password history\n        aliases: [ overridePWHistory ]\n    override_pw_length:\n        type: bool\n        default: 'no'\n        description:\n            - Override password check\n        aliases: [ overridePWLength ]\n    pager_telephonenumber:\n        default: []\n        description:\n            - List of pager telephone numbers.\n        aliases: [ pagerTelephonenumber ]\n    phone:\n        description:\n            - List of telephone numbers.\n    postcode:\n        description:\n            - Postal code of users business address.\n    primary_group:\n        default: cn=Domain Users,cn=groups,$LDAP_BASE_DN\n        description:\n            - Primary group. This must be the group LDAP DN.\n        aliases: [ primaryGroup ]\n    profilepath:\n        description:\n            - Windows profile directory\n    pwd_change_next_login:\n        choices: [ '0', '1' ]\n        description:\n            - Change password on next login.\n        aliases: [ pwdChangeNextLogin ]\n    room_number:\n        description:\n            - Room number of users business address.\n        aliases: [ roomNumber ]\n    samba_privileges:\n        description:\n            - \"Samba privilege, like allow printer administration, do domain\n               join.\"\n        aliases: [ sambaPrivileges ]\n    samba_user_workstations:\n        description:\n            - Allow the authentication only on this Microsoft Windows host.\n        aliases: [ sambaUserWorkstations ]\n    sambahome:\n        description:\n            - Windows home path, e.g. C('\\\\\\\\$FQDN\\\\$USERNAME').\n    scriptpath:\n        description:\n            - Windows logon script.\n    secretary:\n        default: []\n        description:\n            - A list of superiors as LDAP DNs.\n    serviceprovider:\n        default: []\n        description:\n            - Enable user for the following service providers.\n    shell:\n        default: '/bin/bash'\n        description:\n            - Login shell\n    street:\n        description:\n            - Street of users business address.\n    title:\n        description:\n            - Title, e.g. C(Prof.).\n    unixhome:\n        default: '/home/$USERNAME'\n        description:\n            - Unix home directory\n    userexpiry:\n        default: Today + 1 year\n        description:\n            - Account expiry date, e.g. C(1999-12-31).\n    position:\n        default: ''\n        description:\n            - \"Define the whole position of users object inside the LDAP tree,\n               e.g. C(cn=employee,cn=users,ou=school,dc=example,dc=com).\"\n    update_password:\n        default: always\n        description:\n            - \"C(always) will update passwords if they differ.\n               C(on_create) will only set the password for newly created users.\"\n        version_added: \"2.3\"\n    ou:\n        default: ''\n        description:\n            - \"Organizational Unit inside the LDAP Base DN, e.g. C(school) for\n               LDAP OU C(ou=school,dc=example,dc=com).\"\n    subpath:\n        default: 'cn=users'\n        description:\n            - \"LDAP subpath inside the organizational unit, e.g.\n               C(cn=teachers,cn=users) for LDAP container\n               C(cn=teachers,cn=users,dc=example,dc=com).\"\n'''\n\n\nEXAMPLES = '''\n\n- udm_user:\n    name: FooBar\n    password: secure_password\n    firstname: Foo\n    lastname: Bar\n\n\n# C(uid=foo,cn=teachers,cn=users,ou=school,dc=school,dc=example,dc=com)\n- udm_user:\n    name: foo\n    password: secure_password\n    firstname: Foo\n    lastname: Bar\n    ou: school\n    subpath: 'cn=teachers,cn=users'\n\n- udm_user:\n    name: foo\n    password: secure_password\n    firstname: Foo\n    lastname: Bar\n    position: 'cn=teachers,cn=users,ou=school,dc=school,dc=example,dc=com'\n'''\n\n\nRETURN = '''# '''\n\nimport crypt\nfrom datetime import date, timedelta\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.univention_umc import (\n    umc_module_for_add,\n    umc_module_for_edit,\n    ldap_search,\n    base_dn,\n)\n\n\ndef main():\n    expiry = date.strftime(date.today() + timedelta(days=365), \"%Y-%m-%d\")\n    module = AnsibleModule(\n        argument_spec=dict(\n            birthday=dict(default=None,\n                          type='str'),\n            city=dict(default=None,\n                      type='str'),\n            country=dict(default=None,\n                         type='str'),\n            department_number=dict(default=None,\n                                   type='str',\n                                   aliases=['departmentNumber']),\n            description=dict(default=None,\n                             type='str'),\n            display_name=dict(default=None,\n                              type='str',\n                              aliases=['displayName']),\n            email=dict(default=[''],\n                       type='list'),\n            employee_number=dict(default=None,\n                                 type='str',\n                                 aliases=['employeeNumber']),\n            employee_type=dict(default=None,\n                               type='str',\n                               aliases=['employeeType']),\n            firstname=dict(default=None,\n                           type='str'),\n            gecos=dict(default=None,\n                       type='str'),\n            groups=dict(default=[],\n                        type='list'),\n            home_share=dict(default=None,\n                            type='str',\n                            aliases=['homeShare']),\n            home_share_path=dict(default=None,\n                                 type='str',\n                                 aliases=['homeSharePath']),\n            home_telephone_number=dict(default=[],\n                                       type='list',\n                                       aliases=['homeTelephoneNumber']),\n            homedrive=dict(default=None,\n                           type='str'),\n            lastname=dict(default=None,\n                          type='str'),\n            mail_alternative_address=dict(default=[],\n                                          type='list',\n                                          aliases=['mailAlternativeAddress']),\n            mail_home_server=dict(default=None,\n                                  type='str',\n                                  aliases=['mailHomeServer']),\n            mail_primary_address=dict(default=None,\n                                      type='str',\n                                      aliases=['mailPrimaryAddress']),\n            mobile_telephone_number=dict(default=[],\n                                         type='list',\n                                         aliases=['mobileTelephoneNumber']),\n            organisation=dict(default=None,\n                              type='str'),\n            overridePWHistory=dict(default=False,\n                                   type='bool',\n                                   aliases=['override_pw_history']),\n            overridePWLength=dict(default=False,\n                                  type='bool',\n                                  aliases=['override_pw_length']),\n            pager_telephonenumber=dict(default=[],\n                                       type='list',\n                                       aliases=['pagerTelephonenumber']),\n            password=dict(default=None,\n                          type='str',\n                          no_log=True),\n            phone=dict(default=[],\n                       type='list'),\n            postcode=dict(default=None,\n                          type='str'),\n            primary_group=dict(default=None,\n                               type='str',\n                               aliases=['primaryGroup']),\n            profilepath=dict(default=None,\n                             type='str'),\n            pwd_change_next_login=dict(default=None,\n                                       type='str',\n                                       choices=['0', '1'],\n                                       aliases=['pwdChangeNextLogin']),\n            room_number=dict(default=None,\n                             type='str',\n                             aliases=['roomNumber']),\n            samba_privileges=dict(default=[],\n                                  type='list',\n                                  aliases=['sambaPrivileges']),\n            samba_user_workstations=dict(default=[],\n                                         type='list',\n                                         aliases=['sambaUserWorkstations']),\n            sambahome=dict(default=None,\n                           type='str'),\n            scriptpath=dict(default=None,\n                            type='str'),\n            secretary=dict(default=[],\n                           type='list'),\n            serviceprovider=dict(default=[''],\n                                 type='list'),\n            shell=dict(default='/bin/bash',\n                       type='str'),\n            street=dict(default=None,\n                        type='str'),\n            title=dict(default=None,\n                       type='str'),\n            unixhome=dict(default=None,\n                          type='str'),\n            userexpiry=dict(default=expiry,\n                            type='str'),\n            username=dict(required=True,\n                          aliases=['name'],\n                          type='str'),\n            position=dict(default='',\n                          type='str'),\n            update_password=dict(default='always',\n                                 choices=['always', 'on_create'],\n                                 type='str'),\n            ou=dict(default='',\n                    type='str'),\n            subpath=dict(default='cn=users',\n                         type='str'),\n            state=dict(default='present',\n                       choices=['present', 'absent'],\n                       type='str')\n        ),\n        supports_check_mode=True,\n        required_if=([\n            ('state', 'present', ['firstname', 'lastname', 'password'])\n        ])\n    )\n    username = module.params['username']\n    position = module.params['position']\n    ou = module.params['ou']\n    subpath = module.params['subpath']\n    state = module.params['state']\n    changed = False\n\n    users = list(ldap_search(\n        '(&(objectClass=posixAccount)(uid={}))'.format(username),\n        attr=['uid']\n    ))\n    if position != '':\n        container = position\n    else:\n        if ou != '':\n            ou = 'ou={},'.format(ou)\n        if subpath != '':\n            subpath = '{},'.format(subpath)\n        container = '{}{}{}'.format(subpath, ou, base_dn())\n    user_dn = 'uid={},{}'.format(username, container)\n\n    exists = bool(len(users))\n\n    if state == 'present':\n        try:\n            if not exists:\n                obj = umc_module_for_add('users/user', container)\n            else:\n                obj = umc_module_for_edit('users/user', user_dn)\n\n            if module.params['displayName'] is None:\n                module.params['displayName'] = '{} {}'.format(\n                    module.params['firstname'],\n                    module.params['lastname']\n                )\n            if module.params['unixhome'] is None:\n                module.params['unixhome'] = '/home/{}'.format(\n                    module.params['username']\n                )\n            for k in obj.keys():\n                if (k != 'password' and\n                        k != 'groups' and\n                        k != 'overridePWHistory' and\n                        k in module.params and\n                        module.params[k] is not None):\n                    obj[k] = module.params[k]\n            \n            obj['e-mail'] = module.params['email']\n            password = module.params['password']\n            if obj['password'] is None:\n                obj['password'] = password\n            if module.params['update_password'] == 'always':\n                old_password = obj['password'].split('}', 2)[1]\n                if crypt.crypt(password, old_password) != old_password:\n                    obj['overridePWHistory'] = module.params['overridePWHistory']\n                    obj['overridePWLength'] = module.params['overridePWLength']\n                    obj['password'] = password\n\n            diff = obj.diff()\n            if exists:\n                for k in obj.keys():\n                    if obj.hasChanged(k):\n                        changed = True\n            else:\n                changed = True\n            if not module.check_mode:\n                if not exists:\n                    obj.create()\n                elif changed:\n                    obj.modify()\n        except:\n            module.fail_json(\n                msg=\"Creating/editing user {} in {} failed\".format(\n                    username,\n                    container\n                )\n            )\n        try:\n            groups = module.params['groups']\n            if groups:\n                filter = '(&(objectClass=posixGroup)(|(cn={})))'.format(\n                    ')(cn='.join(groups)\n                )\n                group_dns = list(ldap_search(filter, attr=['dn']))\n                for dn in group_dns:\n                    grp = umc_module_for_edit('groups/group', dn[0])\n                    if user_dn not in grp['users']:\n                        grp['users'].append(user_dn)\n                        if not module.check_mode:\n                            grp.modify()\n                        changed = True\n        except:\n            module.fail_json(\n                msg=\"Adding groups to user {} failed\".format(username)\n            )\n\n    if state == 'absent' and exists:\n        try:\n            obj = umc_module_for_edit('users/user', user_dn)\n            if not module.check_mode:\n                obj.remove()\n            changed = True\n        except:\n            module.fail_json(\n                msg=\"Removing user {} failed\".format(username)\n            )\n\n    module.exit_json(\n        changed=changed,\n        username=username,\n        diff=diff,\n        container=container\n    )\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  udm user version added   2 2  author   tobias rueetschi ( 2 b)  short description  manage posix users univention corporate server description         this module allows manage posix users univention corporate        server (ucs)         it uses python api ucs create new object edit   requirements        python    2 6 options      state          default   present          choices    present  absent           description                whether user present      username          required  true         description                user name         aliases    name       firstname          description                first name  required c(state present)      lastname          description                last name  required c(state present)      password          description                password  required c(state present)      birthday          description                birthday     city          description                city users business address      country          description                country users business address      department number          description                department number users business address          aliases    departmentnumber       description          description                description (not gecos)     display name          description                display name (not gecos)         aliases    displayname       email          default             description                a list e mail addresses      employee number          description                employee number         aliases    employeenumber       employee type          description                employee type         aliases    employeetype       gecos          description                gecos     groups          default             description                 posix groups  ldap dns groups found                ldap filter group  group                 c(( (objectclass posixgroup)(cn  group)))       home share          description                 home nfs share  must ldap dn  e g                 c(cn home cn shares ou school dc example dc com)           aliases    homeshare       home share path          description                path home nfs share  inside homeshare          aliases    homesharepath       home telephone number          default             description                list private telephone numbers          aliases    hometelephonenumber       homedrive          description                windows home drive  e g  c( h  )      mail alternative address          default             description                list alternative e mail addresses          aliases    mailalternativeaddress       mail home server          description                fqdn mail server         aliases    mailhomeserver       mail primary address          description                primary e mail address         aliases    mailprimaryaddress       mobile telephone number          default             description                mobile phone number         aliases    mobiletelephonenumber       organisation          description                organisation     override pw history          type  bool         default            description                override password history         aliases    overridepwhistory       override pw length          type  bool         default            description                override password check         aliases    overridepwlength       pager telephonenumber          default             description                list pager telephone numbers          aliases    pagertelephonenumber       phone          description                list telephone numbers      postcode          description                postal code users business address      primary group          default  cn domain users cn groups  ldap base dn         description                primary group  this must group ldap dn          aliases    primarygroup       profilepath          description                windows profile directory     pwd change next login          choices     0    1            description                change password next login          aliases    pwdchangenextlogin       room number          description                room number users business address          aliases    roomnumber       samba privileges          description                 samba privilege  like allow printer administration  domain                join           aliases    sambaprivileges       samba user workstations          description                allow authentication microsoft windows host          aliases    sambauserworkstations       sambahome          description                windows home path  e g  c(      fqdn   username )      scriptpath          description                windows logon script      secretary          default             description                a list superiors ldap dns      serviceprovider          default             description                enable user following service providers      shell          default    bin bash          description                login shell     street          description                street users business address      title          description                title  e g  c(prof )      unixhome          default    home  username          description                unix home directory     userexpiry          default  today   1 year         description                account expiry date  e g  c(1999 12 31)      position          default             description                 define whole position users object inside ldap tree                 e g  c(cn employee cn users ou school dc example dc com)       update password          default  always         description                 c(always) update passwords differ                 c(on create) set password newly created users           version added   2 3      ou          default             description                 organizational unit inside ldap base dn  e g  c(school)                ldap ou c(ou school dc example dc com)       subpath          default   cn users          description                 ldap subpath inside organizational unit  e g                 c(cn teachers cn users) ldap container                c(cn teachers cn users dc example dc com)         examples         create user ucs   udm user      name  foobar     password  secure password     firstname  foo     lastname  bar    create user dn   c(uid foo cn teachers cn users ou school dc school dc example dc com)   udm user      name  foo     password  secure password     firstname  foo     lastname  bar     ou  school     subpath   cn teachers cn users    define position   udm user      name  foo     password  secure password     firstname  foo     lastname  bar     position   cn teachers cn users ou school dc school dc example dc com        return                usr bin python        coding  utf 8        copyright (c) 2016  adfinis sygroup ag    tobias rueetschi  tobias ruetschi adfinis sygroup ch     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    create user ucs    create user dn    c(uid foo cn teachers cn users ou school dc school dc example dc com)    define position    handle special values ", "content": "#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\n# Copyright (c) 2016, Adfinis SyGroup AG\n# Tobias Rueetschi <tobias.ruetschi@adfinis-sygroup.ch>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: udm_user\nversion_added: \"2.2\"\nauthor: \"Tobias Rueetschi (@2-B)\"\nshort_description: Manage posix users on a univention corporate server\ndescription:\n    - \"This module allows to manage posix users on a univention corporate\n       server (UCS).\n       It uses the python API of the UCS to create a new object or edit it.\"\nrequirements:\n    - Python >= 2.6\noptions:\n    state:\n        default: \"present\"\n        choices: [ present, absent ]\n        description:\n            - Whether the user is present or not.\n    username:\n        required: true\n        description:\n            - User name\n        aliases: ['name']\n    firstname:\n        description:\n            - First name. Required if C(state=present).\n    lastname:\n        description:\n            - Last name. Required if C(state=present).\n    password:\n        description:\n            - Password. Required if C(state=present).\n    birthday:\n        description:\n            - Birthday\n    city:\n        description:\n            - City of users business address.\n    country:\n        description:\n            - Country of users business address.\n    department_number:\n        description:\n            - Department number of users business address.\n        aliases: [ departmentNumber ]\n    description:\n        description:\n            - Description (not gecos)\n    display_name:\n        description:\n            - Display name (not gecos)\n        aliases: [ displayName ]\n    email:\n        default: []\n        description:\n            - A list of e-mail addresses.\n    employee_number:\n        description:\n            - Employee number\n        aliases: [ employeeNumber ]\n    employee_type:\n        description:\n            - Employee type\n        aliases: [ employeeType ]\n    gecos:\n        description:\n            - GECOS\n    groups:\n        default: []\n        description:\n            - \"POSIX groups, the LDAP DNs of the groups will be found with the\n               LDAP filter for each group as $GROUP:\n               C((&(objectClass=posixGroup)(cn=$GROUP))).\"\n    home_share:\n        description:\n            - \"Home NFS share. Must be a LDAP DN, e.g.\n               C(cn=home,cn=shares,ou=school,dc=example,dc=com).\"\n        aliases: [ homeShare ]\n    home_share_path:\n        description:\n            - Path to home NFS share, inside the homeShare.\n        aliases: [ homeSharePath ]\n    home_telephone_number:\n        default: []\n        description:\n            - List of private telephone numbers.\n        aliases: [ homeTelephoneNumber ]\n    homedrive:\n        description:\n            - Windows home drive, e.g. C(\"H:\").\n    mail_alternative_address:\n        default: []\n        description:\n            - List of alternative e-mail addresses.\n        aliases: [ mailAlternativeAddress ]\n    mail_home_server:\n        description:\n            - FQDN of mail server\n        aliases: [ mailHomeServer ]\n    mail_primary_address:\n        description:\n            - Primary e-mail address\n        aliases: [ mailPrimaryAddress ]\n    mobile_telephone_number:\n        default: []\n        description:\n            - Mobile phone number\n        aliases: [ mobileTelephoneNumber ]\n    organisation:\n        description:\n            - Organisation\n    override_pw_history:\n        type: bool\n        default: 'no'\n        description:\n            - Override password history\n        aliases: [ overridePWHistory ]\n    override_pw_length:\n        type: bool\n        default: 'no'\n        description:\n            - Override password check\n        aliases: [ overridePWLength ]\n    pager_telephonenumber:\n        default: []\n        description:\n            - List of pager telephone numbers.\n        aliases: [ pagerTelephonenumber ]\n    phone:\n        description:\n            - List of telephone numbers.\n    postcode:\n        description:\n            - Postal code of users business address.\n    primary_group:\n        default: cn=Domain Users,cn=groups,$LDAP_BASE_DN\n        description:\n            - Primary group. This must be the group LDAP DN.\n        aliases: [ primaryGroup ]\n    profilepath:\n        description:\n            - Windows profile directory\n    pwd_change_next_login:\n        choices: [ '0', '1' ]\n        description:\n            - Change password on next login.\n        aliases: [ pwdChangeNextLogin ]\n    room_number:\n        description:\n            - Room number of users business address.\n        aliases: [ roomNumber ]\n    samba_privileges:\n        description:\n            - \"Samba privilege, like allow printer administration, do domain\n               join.\"\n        aliases: [ sambaPrivileges ]\n    samba_user_workstations:\n        description:\n            - Allow the authentication only on this Microsoft Windows host.\n        aliases: [ sambaUserWorkstations ]\n    sambahome:\n        description:\n            - Windows home path, e.g. C('\\\\\\\\$FQDN\\\\$USERNAME').\n    scriptpath:\n        description:\n            - Windows logon script.\n    secretary:\n        default: []\n        description:\n            - A list of superiors as LDAP DNs.\n    serviceprovider:\n        default: []\n        description:\n            - Enable user for the following service providers.\n    shell:\n        default: '/bin/bash'\n        description:\n            - Login shell\n    street:\n        description:\n            - Street of users business address.\n    title:\n        description:\n            - Title, e.g. C(Prof.).\n    unixhome:\n        default: '/home/$USERNAME'\n        description:\n            - Unix home directory\n    userexpiry:\n        default: Today + 1 year\n        description:\n            - Account expiry date, e.g. C(1999-12-31).\n    position:\n        default: ''\n        description:\n            - \"Define the whole position of users object inside the LDAP tree,\n               e.g. C(cn=employee,cn=users,ou=school,dc=example,dc=com).\"\n    update_password:\n        default: always\n        description:\n            - \"C(always) will update passwords if they differ.\n               C(on_create) will only set the password for newly created users.\"\n        version_added: \"2.3\"\n    ou:\n        default: ''\n        description:\n            - \"Organizational Unit inside the LDAP Base DN, e.g. C(school) for\n               LDAP OU C(ou=school,dc=example,dc=com).\"\n    subpath:\n        default: 'cn=users'\n        description:\n            - \"LDAP subpath inside the organizational unit, e.g.\n               C(cn=teachers,cn=users) for LDAP container\n               C(cn=teachers,cn=users,dc=example,dc=com).\"\n'''\n\n\nEXAMPLES = '''\n# Create a user on a UCS\n- udm_user:\n    name: FooBar\n    password: secure_password\n    firstname: Foo\n    lastname: Bar\n\n# Create a user with the DN\n# C(uid=foo,cn=teachers,cn=users,ou=school,dc=school,dc=example,dc=com)\n- udm_user:\n    name: foo\n    password: secure_password\n    firstname: Foo\n    lastname: Bar\n    ou: school\n    subpath: 'cn=teachers,cn=users'\n# or define the position\n- udm_user:\n    name: foo\n    password: secure_password\n    firstname: Foo\n    lastname: Bar\n    position: 'cn=teachers,cn=users,ou=school,dc=school,dc=example,dc=com'\n'''\n\n\nRETURN = '''# '''\n\nimport crypt\nfrom datetime import date, timedelta\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.univention_umc import (\n    umc_module_for_add,\n    umc_module_for_edit,\n    ldap_search,\n    base_dn,\n)\n\n\ndef main():\n    expiry = date.strftime(date.today() + timedelta(days=365), \"%Y-%m-%d\")\n    module = AnsibleModule(\n        argument_spec=dict(\n            birthday=dict(default=None,\n                          type='str'),\n            city=dict(default=None,\n                      type='str'),\n            country=dict(default=None,\n                         type='str'),\n            department_number=dict(default=None,\n                                   type='str',\n                                   aliases=['departmentNumber']),\n            description=dict(default=None,\n                             type='str'),\n            display_name=dict(default=None,\n                              type='str',\n                              aliases=['displayName']),\n            email=dict(default=[''],\n                       type='list'),\n            employee_number=dict(default=None,\n                                 type='str',\n                                 aliases=['employeeNumber']),\n            employee_type=dict(default=None,\n                               type='str',\n                               aliases=['employeeType']),\n            firstname=dict(default=None,\n                           type='str'),\n            gecos=dict(default=None,\n                       type='str'),\n            groups=dict(default=[],\n                        type='list'),\n            home_share=dict(default=None,\n                            type='str',\n                            aliases=['homeShare']),\n            home_share_path=dict(default=None,\n                                 type='str',\n                                 aliases=['homeSharePath']),\n            home_telephone_number=dict(default=[],\n                                       type='list',\n                                       aliases=['homeTelephoneNumber']),\n            homedrive=dict(default=None,\n                           type='str'),\n            lastname=dict(default=None,\n                          type='str'),\n            mail_alternative_address=dict(default=[],\n                                          type='list',\n                                          aliases=['mailAlternativeAddress']),\n            mail_home_server=dict(default=None,\n                                  type='str',\n                                  aliases=['mailHomeServer']),\n            mail_primary_address=dict(default=None,\n                                      type='str',\n                                      aliases=['mailPrimaryAddress']),\n            mobile_telephone_number=dict(default=[],\n                                         type='list',\n                                         aliases=['mobileTelephoneNumber']),\n            organisation=dict(default=None,\n                              type='str'),\n            overridePWHistory=dict(default=False,\n                                   type='bool',\n                                   aliases=['override_pw_history']),\n            overridePWLength=dict(default=False,\n                                  type='bool',\n                                  aliases=['override_pw_length']),\n            pager_telephonenumber=dict(default=[],\n                                       type='list',\n                                       aliases=['pagerTelephonenumber']),\n            password=dict(default=None,\n                          type='str',\n                          no_log=True),\n            phone=dict(default=[],\n                       type='list'),\n            postcode=dict(default=None,\n                          type='str'),\n            primary_group=dict(default=None,\n                               type='str',\n                               aliases=['primaryGroup']),\n            profilepath=dict(default=None,\n                             type='str'),\n            pwd_change_next_login=dict(default=None,\n                                       type='str',\n                                       choices=['0', '1'],\n                                       aliases=['pwdChangeNextLogin']),\n            room_number=dict(default=None,\n                             type='str',\n                             aliases=['roomNumber']),\n            samba_privileges=dict(default=[],\n                                  type='list',\n                                  aliases=['sambaPrivileges']),\n            samba_user_workstations=dict(default=[],\n                                         type='list',\n                                         aliases=['sambaUserWorkstations']),\n            sambahome=dict(default=None,\n                           type='str'),\n            scriptpath=dict(default=None,\n                            type='str'),\n            secretary=dict(default=[],\n                           type='list'),\n            serviceprovider=dict(default=[''],\n                                 type='list'),\n            shell=dict(default='/bin/bash',\n                       type='str'),\n            street=dict(default=None,\n                        type='str'),\n            title=dict(default=None,\n                       type='str'),\n            unixhome=dict(default=None,\n                          type='str'),\n            userexpiry=dict(default=expiry,\n                            type='str'),\n            username=dict(required=True,\n                          aliases=['name'],\n                          type='str'),\n            position=dict(default='',\n                          type='str'),\n            update_password=dict(default='always',\n                                 choices=['always', 'on_create'],\n                                 type='str'),\n            ou=dict(default='',\n                    type='str'),\n            subpath=dict(default='cn=users',\n                         type='str'),\n            state=dict(default='present',\n                       choices=['present', 'absent'],\n                       type='str')\n        ),\n        supports_check_mode=True,\n        required_if=([\n            ('state', 'present', ['firstname', 'lastname', 'password'])\n        ])\n    )\n    username = module.params['username']\n    position = module.params['position']\n    ou = module.params['ou']\n    subpath = module.params['subpath']\n    state = module.params['state']\n    changed = False\n\n    users = list(ldap_search(\n        '(&(objectClass=posixAccount)(uid={}))'.format(username),\n        attr=['uid']\n    ))\n    if position != '':\n        container = position\n    else:\n        if ou != '':\n            ou = 'ou={},'.format(ou)\n        if subpath != '':\n            subpath = '{},'.format(subpath)\n        container = '{}{}{}'.format(subpath, ou, base_dn())\n    user_dn = 'uid={},{}'.format(username, container)\n\n    exists = bool(len(users))\n\n    if state == 'present':\n        try:\n            if not exists:\n                obj = umc_module_for_add('users/user', container)\n            else:\n                obj = umc_module_for_edit('users/user', user_dn)\n\n            if module.params['displayName'] is None:\n                module.params['displayName'] = '{} {}'.format(\n                    module.params['firstname'],\n                    module.params['lastname']\n                )\n            if module.params['unixhome'] is None:\n                module.params['unixhome'] = '/home/{}'.format(\n                    module.params['username']\n                )\n            for k in obj.keys():\n                if (k != 'password' and\n                        k != 'groups' and\n                        k != 'overridePWHistory' and\n                        k in module.params and\n                        module.params[k] is not None):\n                    obj[k] = module.params[k]\n            # handle some special values\n            obj['e-mail'] = module.params['email']\n            password = module.params['password']\n            if obj['password'] is None:\n                obj['password'] = password\n            if module.params['update_password'] == 'always':\n                old_password = obj['password'].split('}', 2)[1]\n                if crypt.crypt(password, old_password) != old_password:\n                    obj['overridePWHistory'] = module.params['overridePWHistory']\n                    obj['overridePWLength'] = module.params['overridePWLength']\n                    obj['password'] = password\n\n            diff = obj.diff()\n            if exists:\n                for k in obj.keys():\n                    if obj.hasChanged(k):\n                        changed = True\n            else:\n                changed = True\n            if not module.check_mode:\n                if not exists:\n                    obj.create()\n                elif changed:\n                    obj.modify()\n        except:\n            module.fail_json(\n                msg=\"Creating/editing user {} in {} failed\".format(\n                    username,\n                    container\n                )\n            )\n        try:\n            groups = module.params['groups']\n            if groups:\n                filter = '(&(objectClass=posixGroup)(|(cn={})))'.format(\n                    ')(cn='.join(groups)\n                )\n                group_dns = list(ldap_search(filter, attr=['dn']))\n                for dn in group_dns:\n                    grp = umc_module_for_edit('groups/group', dn[0])\n                    if user_dn not in grp['users']:\n                        grp['users'].append(user_dn)\n                        if not module.check_mode:\n                            grp.modify()\n                        changed = True\n        except:\n            module.fail_json(\n                msg=\"Adding groups to user {} failed\".format(username)\n            )\n\n    if state == 'absent' and exists:\n        try:\n            obj = umc_module_for_edit('users/user', user_dn)\n            if not module.check_mode:\n                obj.remove()\n            changed = True\n        except:\n            module.fail_json(\n                msg=\"Removing user {} failed\".format(username)\n            )\n\n    module.exit_json(\n        changed=changed,\n        username=username,\n        diff=diff,\n        container=container\n    )\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "udm_user.py", "id": "e4af40d799aa2a1acee92d60d3c8a5eb", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/univention/udm_user.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}