{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo.tests import common\nfrom odoo.tools import float_compare\n\n\n@common.at_install(False)\n@common.post_install(True)\nclass TestDeliveryCost(common.TransactionCase):\n\n    def setUp(self):\n        super(TestDeliveryCost, self).setUp()\n        self.SaleOrder = self.env['sale.order']\n        self.SaleOrderLine = self.env['sale.order.line']\n        self.AccountAccount = self.env['account.account']\n        self.SaleConfigSetting = self.env['res.config.settings']\n        self.Product = self.env['product.product']\n\n        self.partner_18 = self.env.ref('base.res_partner_18')\n        self.pricelist = self.env.ref('product.list0')\n        self.product_4 = self.env.ref('product.product_product_4')\n        self.product_uom_unit = self.env.ref('product.product_uom_unit')\n        self.normal_delivery = self.env.ref('delivery.normal_delivery_carrier')\n        self.partner_4 = self.env.ref('base.res_partner_4')\n        self.partner_address_13 = self.env.ref('base.res_partner_address_13')\n        self.product_uom_hour = self.env.ref('product.product_uom_hour')\n        self.account_data = self.env.ref('account.data_account_type_revenue')\n        self.account_tag_operating = self.env.ref('account.account_tag_operating')\n        self.product_2 = self.env.ref('product.product_product_2')\n        self.product_category = self.env.ref('product.product_category_all')\n        self.free_delivery = self.env.ref('delivery.free_delivery_carrier')\n        \n        \n        self.env.user.company_id.write({'currency_id': self.env.ref('base.USD').id})\n\n    def test_00_delivery_cost(self):\n        \n        \n\n        self.sale_normal_delivery_charges = self.SaleOrder.create({\n            'partner_id': self.partner_18.id,\n            'partner_invoice_id': self.partner_18.id,\n            'partner_shipping_id': self.partner_18.id,\n            'pricelist_id': self.pricelist.id,\n            'order_line': [(0, 0, {\n                'name': 'PC Assamble + 2GB RAM',\n                'product_id': self.product_4.id,\n                'product_uom_qty': 1,\n                'product_uom': self.product_uom_unit.id,\n                'price_unit': 750.00,\n            })],\n            'carrier_id': self.normal_delivery.id\n        })\n        \n\n        self.a_sale = self.AccountAccount.create({\n            'code': 'X2020',\n            'name': 'Product Sales - (test)',\n            'user_type_id': self.account_data.id,\n            'tag_ids': [(6, 0, {\n                self.account_tag_operating.id\n            })]\n        })\n\n        self.product_consultant = self.Product.create({\n            'sale_ok': True,\n            'list_price': 75.0,\n            'standard_price': 30.0,\n            'uom_id': self.product_uom_hour.id,\n            'uom_po_id': self.product_uom_hour.id,\n            'name': 'Service',\n            'categ_id': self.product_category.id,\n            'type': 'service'\n        })\n\n        \n        self.sale_normal_delivery_charges.get_delivery_price()\n        self.sale_normal_delivery_charges.set_delivery_line()\n\n        \n\n        line = self.SaleOrderLine.search([('order_id', '=', self.sale_normal_delivery_charges.id),\n            ('product_id', '=', self.sale_normal_delivery_charges.carrier_id.product_id.id)])\n        self.assertEqual(len(line), 1, \"Delivery cost is not Added\")\n\n        self.assertEqual(float_compare(line.price_subtotal, 10.0, precision_digits=2), 0,\n            \"Delivery cost is not correspond.\")\n\n        \n\n        self.sale_normal_delivery_charges.action_confirm()\n\n        \n\n        self.delivery_sale_order_cost = self.SaleOrder.create({\n            'partner_id': self.partner_4.id,\n            'partner_invoice_id': self.partner_address_13.id,\n            'partner_shipping_id': self.partner_address_13.id,\n            'pricelist_id': self.pricelist.id,\n            'order_line': [(0, 0, {\n                'name': 'Service on demand',\n                'product_id': self.product_consultant.id,\n                'product_uom_qty': 24,\n                'product_uom': self.product_uom_hour.id,\n                'price_unit': 75.00,\n            }), (0, 0, {\n                'name': 'On Site Assistance',\n                'product_id': self.product_2.id,\n                'product_uom_qty': 30,\n                'product_uom': self.product_uom_hour.id,\n                'price_unit': 38.25,\n            })],\n            'carrier_id': self.free_delivery.id\n        })\n\n        \n        self.delivery_sale_order_cost.get_delivery_price()\n        self.delivery_sale_order_cost.set_delivery_line()\n\n        \n        line = self.SaleOrderLine.search([('order_id', '=', self.delivery_sale_order_cost.id),\n            ('product_id', '=', self.delivery_sale_order_cost.carrier_id.product_id.id)])\n\n        self.assertEqual(len(line), 1, \"Delivery cost is not Added\")\n        self.assertEqual(float_compare(line.price_subtotal, 0, precision_digits=2), 0,\n            \"Delivery cost is not correspond.\")\n\n        \n\n        self.default_delivery_policy = self.SaleConfigSetting.create({})\n\n        self.default_delivery_policy.execute()\n", "comments": "      coding  utf 8        tests hereunder assume prices usd  must ensure    company actually uses usd    in order test carrier cost    create sales order normal delivery charges    i add delivery cost sales order    i add delivery cost sales order    i check sales order added delivery cost    i confirm sales order    create one sales order free delivery charges    i add free delivery cost sales order    i check sales order adding delivery cost    i set default delivery policy ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo.tests import common\nfrom odoo.tools import float_compare\n\n\n@common.at_install(False)\n@common.post_install(True)\nclass TestDeliveryCost(common.TransactionCase):\n\n    def setUp(self):\n        super(TestDeliveryCost, self).setUp()\n        self.SaleOrder = self.env['sale.order']\n        self.SaleOrderLine = self.env['sale.order.line']\n        self.AccountAccount = self.env['account.account']\n        self.SaleConfigSetting = self.env['res.config.settings']\n        self.Product = self.env['product.product']\n\n        self.partner_18 = self.env.ref('base.res_partner_18')\n        self.pricelist = self.env.ref('product.list0')\n        self.product_4 = self.env.ref('product.product_product_4')\n        self.product_uom_unit = self.env.ref('product.product_uom_unit')\n        self.normal_delivery = self.env.ref('delivery.normal_delivery_carrier')\n        self.partner_4 = self.env.ref('base.res_partner_4')\n        self.partner_address_13 = self.env.ref('base.res_partner_address_13')\n        self.product_uom_hour = self.env.ref('product.product_uom_hour')\n        self.account_data = self.env.ref('account.data_account_type_revenue')\n        self.account_tag_operating = self.env.ref('account.account_tag_operating')\n        self.product_2 = self.env.ref('product.product_product_2')\n        self.product_category = self.env.ref('product.product_category_all')\n        self.free_delivery = self.env.ref('delivery.free_delivery_carrier')\n        # as the tests hereunder assume all the prices in USD, we must ensure\n        # that the company actually uses USD\n        self.env.user.company_id.write({'currency_id': self.env.ref('base.USD').id})\n\n    def test_00_delivery_cost(self):\n        # In order to test Carrier Cost\n        # Create sales order with Normal Delivery Charges\n\n        self.sale_normal_delivery_charges = self.SaleOrder.create({\n            'partner_id': self.partner_18.id,\n            'partner_invoice_id': self.partner_18.id,\n            'partner_shipping_id': self.partner_18.id,\n            'pricelist_id': self.pricelist.id,\n            'order_line': [(0, 0, {\n                'name': 'PC Assamble + 2GB RAM',\n                'product_id': self.product_4.id,\n                'product_uom_qty': 1,\n                'product_uom': self.product_uom_unit.id,\n                'price_unit': 750.00,\n            })],\n            'carrier_id': self.normal_delivery.id\n        })\n        # I add delivery cost in Sales order\n\n        self.a_sale = self.AccountAccount.create({\n            'code': 'X2020',\n            'name': 'Product Sales - (test)',\n            'user_type_id': self.account_data.id,\n            'tag_ids': [(6, 0, {\n                self.account_tag_operating.id\n            })]\n        })\n\n        self.product_consultant = self.Product.create({\n            'sale_ok': True,\n            'list_price': 75.0,\n            'standard_price': 30.0,\n            'uom_id': self.product_uom_hour.id,\n            'uom_po_id': self.product_uom_hour.id,\n            'name': 'Service',\n            'categ_id': self.product_category.id,\n            'type': 'service'\n        })\n\n        # I add delivery cost in Sales order\n        self.sale_normal_delivery_charges.get_delivery_price()\n        self.sale_normal_delivery_charges.set_delivery_line()\n\n        # I check sales order after added delivery cost\n\n        line = self.SaleOrderLine.search([('order_id', '=', self.sale_normal_delivery_charges.id),\n            ('product_id', '=', self.sale_normal_delivery_charges.carrier_id.product_id.id)])\n        self.assertEqual(len(line), 1, \"Delivery cost is not Added\")\n\n        self.assertEqual(float_compare(line.price_subtotal, 10.0, precision_digits=2), 0,\n            \"Delivery cost is not correspond.\")\n\n        # I confirm the sales order\n\n        self.sale_normal_delivery_charges.action_confirm()\n\n        # Create one more sales order with Free Delivery Charges\n\n        self.delivery_sale_order_cost = self.SaleOrder.create({\n            'partner_id': self.partner_4.id,\n            'partner_invoice_id': self.partner_address_13.id,\n            'partner_shipping_id': self.partner_address_13.id,\n            'pricelist_id': self.pricelist.id,\n            'order_line': [(0, 0, {\n                'name': 'Service on demand',\n                'product_id': self.product_consultant.id,\n                'product_uom_qty': 24,\n                'product_uom': self.product_uom_hour.id,\n                'price_unit': 75.00,\n            }), (0, 0, {\n                'name': 'On Site Assistance',\n                'product_id': self.product_2.id,\n                'product_uom_qty': 30,\n                'product_uom': self.product_uom_hour.id,\n                'price_unit': 38.25,\n            })],\n            'carrier_id': self.free_delivery.id\n        })\n\n        # I add free delivery cost in Sales order\n        self.delivery_sale_order_cost.get_delivery_price()\n        self.delivery_sale_order_cost.set_delivery_line()\n\n        # I check sales order after adding delivery cost\n        line = self.SaleOrderLine.search([('order_id', '=', self.delivery_sale_order_cost.id),\n            ('product_id', '=', self.delivery_sale_order_cost.carrier_id.product_id.id)])\n\n        self.assertEqual(len(line), 1, \"Delivery cost is not Added\")\n        self.assertEqual(float_compare(line.price_subtotal, 0, precision_digits=2), 0,\n            \"Delivery cost is not correspond.\")\n\n        # I set default delivery policy\n\n        self.default_delivery_policy = self.SaleConfigSetting.create({})\n\n        self.default_delivery_policy.execute()\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_delivery_cost.py", "id": "4bc06ff3f321bc7fad1d0fe72d08d149", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/delivery/tests/test_delivery_cost.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}