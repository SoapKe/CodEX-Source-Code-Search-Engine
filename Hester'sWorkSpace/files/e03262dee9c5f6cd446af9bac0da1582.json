{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_str,\n)\nfrom ..utils import (\n    int_or_none,\n    try_get,\n    unified_timestamp,\n)\n\n\nclass PornFlipIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?pornflip\\.com/(?:v|embed)/(?P<id>[0-9A-Za-z-]{11})'\n    _TESTS = [{\n        'url': 'https://www.pornflip.com/v/wz7DfNhMmep',\n        'md5': '98c46639849145ae1fd77af532a9278c',\n        'info_dict': {\n            'id': 'wz7DfNhMmep',\n            'ext': 'mp4',\n            'title': '2 Amateurs swallow make his dream cumshots true',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 112,\n            'timestamp': 1481655502,\n            'upload_date': '20161213',\n            'uploader_id': '106786',\n            'uploader': 'figifoto',\n            'view_count': int,\n            'age_limit': 18,\n        }\n    }, {\n        'url': 'https://www.pornflip.com/embed/wz7DfNhMmep',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.pornflip.com/v/EkRD6-vS2-s',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.pornflip.com/embed/EkRD6-vS2-s',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'https://www.pornflip.com/v/%s' % video_id, video_id)\n\n        flashvars = compat_parse_qs(self._search_regex(\n            r'<embed[^>]+flashvars=([\"\\'])(?P<flashvars>(?:(?!\\1).)+)\\1',\n            webpage, 'flashvars', group='flashvars'))\n\n        title = flashvars['video_vars[title]'][0]\n\n        def flashvar(kind):\n            return try_get(\n                flashvars, lambda x: x['video_vars[%s]' % kind][0], compat_str)\n\n        formats = []\n        for key, value in flashvars.items():\n            if not (value and isinstance(value, list)):\n                continue\n            format_url = value[0]\n            if key == 'video_vars[hds_manifest]':\n                formats.extend(self._extract_mpd_formats(\n                    format_url, video_id, mpd_id='dash', fatal=False))\n                continue\n            height = self._search_regex(\n                r'video_vars\\[video_urls\\]\\[(\\d+)', key, 'height', default=None)\n            if not height:\n                continue\n            formats.append({\n                'url': format_url,\n                'format_id': 'http-%s' % height,\n                'height': int_or_none(height),\n            })\n        self._sort_formats(formats)\n\n        uploader = self._html_search_regex(\n            (r'<span[^>]+class=\"name\"[^>]*>\\s*<a[^>]+>\\s*<strong>(?P<uploader>[^<]+)',\n             r'<meta[^>]+content=([\"\\'])[^>]*\\buploaded by (?P<uploader>.+?)\\1'),\n            webpage, 'uploader', fatal=False, group='uploader')\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'thumbnail': flashvar('big_thumb'),\n            'duration': int_or_none(flashvar('duration')),\n            'timestamp': unified_timestamp(self._html_search_meta(\n                'uploadDate', webpage, 'timestamp')),\n            'uploader_id': flashvar('author_id'),\n            'uploader': uploader,\n            'view_count': int_or_none(flashvar('views')),\n            'age_limit': 18,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_str,\n)\nfrom ..utils import (\n    int_or_none,\n    try_get,\n    unified_timestamp,\n)\n\n\nclass PornFlipIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?pornflip\\.com/(?:v|embed)/(?P<id>[0-9A-Za-z-]{11})'\n    _TESTS = [{\n        'url': 'https://www.pornflip.com/v/wz7DfNhMmep',\n        'md5': '98c46639849145ae1fd77af532a9278c',\n        'info_dict': {\n            'id': 'wz7DfNhMmep',\n            'ext': 'mp4',\n            'title': '2 Amateurs swallow make his dream cumshots true',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 112,\n            'timestamp': 1481655502,\n            'upload_date': '20161213',\n            'uploader_id': '106786',\n            'uploader': 'figifoto',\n            'view_count': int,\n            'age_limit': 18,\n        }\n    }, {\n        'url': 'https://www.pornflip.com/embed/wz7DfNhMmep',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.pornflip.com/v/EkRD6-vS2-s',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.pornflip.com/embed/EkRD6-vS2-s',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'https://www.pornflip.com/v/%s' % video_id, video_id)\n\n        flashvars = compat_parse_qs(self._search_regex(\n            r'<embed[^>]+flashvars=([\"\\'])(?P<flashvars>(?:(?!\\1).)+)\\1',\n            webpage, 'flashvars', group='flashvars'))\n\n        title = flashvars['video_vars[title]'][0]\n\n        def flashvar(kind):\n            return try_get(\n                flashvars, lambda x: x['video_vars[%s]' % kind][0], compat_str)\n\n        formats = []\n        for key, value in flashvars.items():\n            if not (value and isinstance(value, list)):\n                continue\n            format_url = value[0]\n            if key == 'video_vars[hds_manifest]':\n                formats.extend(self._extract_mpd_formats(\n                    format_url, video_id, mpd_id='dash', fatal=False))\n                continue\n            height = self._search_regex(\n                r'video_vars\\[video_urls\\]\\[(\\d+)', key, 'height', default=None)\n            if not height:\n                continue\n            formats.append({\n                'url': format_url,\n                'format_id': 'http-%s' % height,\n                'height': int_or_none(height),\n            })\n        self._sort_formats(formats)\n\n        uploader = self._html_search_regex(\n            (r'<span[^>]+class=\"name\"[^>]*>\\s*<a[^>]+>\\s*<strong>(?P<uploader>[^<]+)',\n             r'<meta[^>]+content=([\"\\'])[^>]*\\buploaded by (?P<uploader>.+?)\\1'),\n            webpage, 'uploader', fatal=False, group='uploader')\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'thumbnail': flashvar('big_thumb'),\n            'duration': int_or_none(flashvar('duration')),\n            'timestamp': unified_timestamp(self._html_search_meta(\n                'uploadDate', webpage, 'timestamp')),\n            'uploader_id': flashvar('author_id'),\n            'uploader': uploader,\n            'view_count': int_or_none(flashvar('views')),\n            'age_limit': 18,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "pornflip.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/pornflip.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}