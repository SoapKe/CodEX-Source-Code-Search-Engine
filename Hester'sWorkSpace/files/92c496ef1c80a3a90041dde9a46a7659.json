{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import int_or_none\n\n\nclass MGTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?mgtv\\.com/(v|b)/(?:[^/]+/)*(?P<id>\\d+)\\.html'\n    IE_DESC = '\u8292\u679cTV'\n\n    _TESTS = [{\n        'url': 'http://www.mgtv.com/v/1/290525/f/3116640.html',\n        'md5': 'b1ffc0fc163152acf6beaa81832c9ee7',\n        'info_dict': {\n            'id': '3116640',\n            'ext': 'mp4',\n            'title': '\u6211\u662f\u6b4c\u624b\u7b2c\u56db\u5b63\u53cc\u5e74\u5dc5\u5cf0\u4f1a\uff1a\u97e9\u7ea2\u674e\u739f\u201c\u53cc\u738b\u201d\u9886\u519b\u5bf9\u6297',\n            'description': '\u6211\u662f\u6b4c\u624b\u7b2c\u56db\u5b63\u53cc\u5e74\u5dc5\u5cf0\u4f1a',\n            'duration': 7461,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n    }, {\n        'url': 'http://www.mgtv.com/b/301817/3826653.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        api_data = self._download_json(\n            'http://pcweb.api.mgtv.com/player/video', video_id,\n            query={'video_id': video_id},\n            headers=self.geo_verification_headers())['data']\n        info = api_data['info']\n        title = info['title'].strip()\n        stream_domain = api_data['stream_domain'][0]\n\n        formats = []\n        for idx, stream in enumerate(api_data['stream']):\n            stream_path = stream.get('url')\n            if not stream_path:\n                continue\n            format_data = self._download_json(\n                stream_domain + stream_path, video_id,\n                note='Download video info for format \n            format_url = format_data.get('info')\n            if not format_url:\n                continue\n            tbr = int_or_none(self._search_regex(\n                r'_(\\d+)_mp4/', format_url, 'tbr', default=None))\n            formats.append({\n                'format_id': compat_str(tbr or idx),\n                'url': format_url,\n                'ext': 'mp4',\n                'tbr': tbr,\n                'protocol': 'm3u8_native',\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': info.get('desc'),\n            'duration': int_or_none(info.get('duration')),\n            'thumbnail': info.get('thumb'),\n        }\n", "comments": "# coding: utf-8\n#%d' % idx)\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import int_or_none\n\n\nclass MGTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?mgtv\\.com/(v|b)/(?:[^/]+/)*(?P<id>\\d+)\\.html'\n    IE_DESC = '\u8292\u679cTV'\n\n    _TESTS = [{\n        'url': 'http://www.mgtv.com/v/1/290525/f/3116640.html',\n        'md5': 'b1ffc0fc163152acf6beaa81832c9ee7',\n        'info_dict': {\n            'id': '3116640',\n            'ext': 'mp4',\n            'title': '\u6211\u662f\u6b4c\u624b\u7b2c\u56db\u5b63\u53cc\u5e74\u5dc5\u5cf0\u4f1a\uff1a\u97e9\u7ea2\u674e\u739f\u201c\u53cc\u738b\u201d\u9886\u519b\u5bf9\u6297',\n            'description': '\u6211\u662f\u6b4c\u624b\u7b2c\u56db\u5b63\u53cc\u5e74\u5dc5\u5cf0\u4f1a',\n            'duration': 7461,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n    }, {\n        'url': 'http://www.mgtv.com/b/301817/3826653.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        api_data = self._download_json(\n            'http://pcweb.api.mgtv.com/player/video', video_id,\n            query={'video_id': video_id},\n            headers=self.geo_verification_headers())['data']\n        info = api_data['info']\n        title = info['title'].strip()\n        stream_domain = api_data['stream_domain'][0]\n\n        formats = []\n        for idx, stream in enumerate(api_data['stream']):\n            stream_path = stream.get('url')\n            if not stream_path:\n                continue\n            format_data = self._download_json(\n                stream_domain + stream_path, video_id,\n                note='Download video info for format #%d' % idx)\n            format_url = format_data.get('info')\n            if not format_url:\n                continue\n            tbr = int_or_none(self._search_regex(\n                r'_(\\d+)_mp4/', format_url, 'tbr', default=None))\n            formats.append({\n                'format_id': compat_str(tbr or idx),\n                'url': format_url,\n                'ext': 'mp4',\n                'tbr': tbr,\n                'protocol': 'm3u8_native',\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': info.get('desc'),\n            'duration': int_or_none(info.get('duration')),\n            'thumbnail': info.get('thumb'),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "mgtv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/mgtv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}