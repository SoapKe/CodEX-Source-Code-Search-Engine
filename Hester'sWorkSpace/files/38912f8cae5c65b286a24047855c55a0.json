{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    remove_end,\n    remove_start,\n    str_to_int,\n    unified_strdate,\n)\n\n\nclass PinkbikeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www\\.)?pinkbike\\.com/video/|es\\.pinkbike\\.org/i/kvid/kvid-y5\\.swf\\?id=)(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.pinkbike.com/video/402811/',\n        'md5': '4814b8ca7651034cd87e3361d5c2155a',\n        'info_dict': {\n            'id': '402811',\n            'ext': 'mp4',\n            'title': 'Brandon Semenuk - RAW 100',\n            'description': 'Official release: www.redbull.ca/rupertwalker',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 100,\n            'upload_date': '20150406',\n            'uploader': 'revelco',\n            'location': 'Victoria, British Columbia, Canada',\n            'view_count': int,\n            'comment_count': int,\n        }\n    }, {\n        'url': 'http://es.pinkbike.org/i/kvid/kvid-y5.swf?id=406629',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'http://www.pinkbike.com/video/%s' % video_id, video_id)\n\n        formats = []\n        for _, format_id, src in re.findall(\n                r'data-quality=((?:\\\\)?[\"\\'])(.+?)\\1[^>]+src=\\1(.+?)\\1', webpage):\n            height = int_or_none(self._search_regex(\n                r'^(\\d+)[pP]$', format_id, 'height', default=None))\n            formats.append({\n                'url': src,\n                'format_id': format_id,\n                'height': height,\n            })\n        self._sort_formats(formats)\n\n        title = remove_end(self._og_search_title(webpage), ' Video - Pinkbike')\n        description = self._html_search_regex(\n            r'(?s)id=\"media-description\"[^>]*>(.+?)<',\n            webpage, 'description', default=None) or remove_start(\n            self._og_search_description(webpage), title + '. ')\n        thumbnail = self._og_search_thumbnail(webpage)\n        duration = int_or_none(self._html_search_meta(\n            'video:duration', webpage, 'duration'))\n\n        uploader = self._search_regex(\n            r'<a[^>]+\\brel=[\"\\']author[^>]+>([^<]+)', webpage,\n            'uploader', fatal=False)\n        upload_date = unified_strdate(self._search_regex(\n            r'class=\"fullTime\"[^>]+title=\"([^\"]+)\"',\n            webpage, 'upload date', fatal=False))\n\n        location = self._html_search_regex(\n            r'(?s)<dt>Location</dt>\\s*<dd>(.+?)<',\n            webpage, 'location', fatal=False)\n\n        def extract_count(webpage, label):\n            return str_to_int(self._search_regex(\n                r'<span[^>]+class=\"stat-num\"[^>]*>([\\d,.]+)</span>\\s*<span[^>]+class=\"stat-label\"[^>]*>%s' % label,\n                webpage, label, fatal=False))\n\n        view_count = extract_count(webpage, 'Views')\n        comment_count = extract_count(webpage, 'Comments')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'upload_date': upload_date,\n            'uploader': uploader,\n            'location': location,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'formats': formats\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    remove_end,\n    remove_start,\n    str_to_int,\n    unified_strdate,\n)\n\n\nclass PinkbikeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www\\.)?pinkbike\\.com/video/|es\\.pinkbike\\.org/i/kvid/kvid-y5\\.swf\\?id=)(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.pinkbike.com/video/402811/',\n        'md5': '4814b8ca7651034cd87e3361d5c2155a',\n        'info_dict': {\n            'id': '402811',\n            'ext': 'mp4',\n            'title': 'Brandon Semenuk - RAW 100',\n            'description': 'Official release: www.redbull.ca/rupertwalker',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 100,\n            'upload_date': '20150406',\n            'uploader': 'revelco',\n            'location': 'Victoria, British Columbia, Canada',\n            'view_count': int,\n            'comment_count': int,\n        }\n    }, {\n        'url': 'http://es.pinkbike.org/i/kvid/kvid-y5.swf?id=406629',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'http://www.pinkbike.com/video/%s' % video_id, video_id)\n\n        formats = []\n        for _, format_id, src in re.findall(\n                r'data-quality=((?:\\\\)?[\"\\'])(.+?)\\1[^>]+src=\\1(.+?)\\1', webpage):\n            height = int_or_none(self._search_regex(\n                r'^(\\d+)[pP]$', format_id, 'height', default=None))\n            formats.append({\n                'url': src,\n                'format_id': format_id,\n                'height': height,\n            })\n        self._sort_formats(formats)\n\n        title = remove_end(self._og_search_title(webpage), ' Video - Pinkbike')\n        description = self._html_search_regex(\n            r'(?s)id=\"media-description\"[^>]*>(.+?)<',\n            webpage, 'description', default=None) or remove_start(\n            self._og_search_description(webpage), title + '. ')\n        thumbnail = self._og_search_thumbnail(webpage)\n        duration = int_or_none(self._html_search_meta(\n            'video:duration', webpage, 'duration'))\n\n        uploader = self._search_regex(\n            r'<a[^>]+\\brel=[\"\\']author[^>]+>([^<]+)', webpage,\n            'uploader', fatal=False)\n        upload_date = unified_strdate(self._search_regex(\n            r'class=\"fullTime\"[^>]+title=\"([^\"]+)\"',\n            webpage, 'upload date', fatal=False))\n\n        location = self._html_search_regex(\n            r'(?s)<dt>Location</dt>\\s*<dd>(.+?)<',\n            webpage, 'location', fatal=False)\n\n        def extract_count(webpage, label):\n            return str_to_int(self._search_regex(\n                r'<span[^>]+class=\"stat-num\"[^>]*>([\\d,.]+)</span>\\s*<span[^>]+class=\"stat-label\"[^>]*>%s' % label,\n                webpage, label, fatal=False))\n\n        view_count = extract_count(webpage, 'Views')\n        comment_count = extract_count(webpage, 'Comments')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'upload_date': upload_date,\n            'uploader': uploader,\n            'location': location,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'formats': formats\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "pinkbike.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/pinkbike.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}