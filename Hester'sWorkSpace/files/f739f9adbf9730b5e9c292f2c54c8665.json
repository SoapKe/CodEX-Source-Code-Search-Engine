{"author": "ansible", "code": "\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = | rax_mon_entity -> rax_mon_check ->\n  rax_mon_notification -> *rax_mon_notification_plan* -> rax_mon_alarm\nversion_added: \"2.0\"\noptions:\n  state:\n    description:\n    - Ensure that the notification plan with this C(label) exists or does not\n      exist.\n    choices: ['present', 'absent']\n  label:\n    description:\n    - Defines a friendly name for this notification plan. String between 1 and\n      255 characters long.\n    required: true\n  critical_state:\n    description:\n    - Notification list to use when the alarm state is CRITICAL. Must be an\n      array of valid rax_mon_notification ids.\n  warning_state:\n    description:\n    - Notification list to use when the alarm state is WARNING. Must be an array\n      of valid rax_mon_notification ids.\n  ok_state:\n    description:\n    - Notification list to use when the alarm state is OK. Must be an array of\n      valid rax_mon_notification ids.\nauthor: Ash Wilson\nextends_documentation_fragment: rackspace.openstack\n'''\n\nEXAMPLES = '''\n- name: Example notification plan\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n  - name: Establish who gets called when.\n    rax_mon_notification_plan:\n      credentials: ~/.rax_pub\n      state: present\n      label: defcon1\n      critical_state:\n      - \"{{ everyone['notification']['id'] }}\"\n      warning_state:\n      - \"{{ opsfloor['notification']['id'] }}\"\n    register: defcon1\n'''\n\ntry:\n    import pyrax\n    HAS_PYRAX = True\nexcept ImportError:\n    HAS_PYRAX = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.rax import rax_argument_spec, rax_required_together, setup_rax_module\n\n\ndef notification_plan(module, state, label, critical_state, warning_state, ok_state):\n\n    if len(label) < 1 or len(label) > 255:\n        module.fail_json(msg='label must be between 1 and 255 characters long')\n\n    changed = False\n    notification_plan = None\n\n    cm = pyrax.cloud_monitoring\n    if not cm:\n        module.fail_json(msg='Failed to instantiate client. This typically '\n                             'indicates an invalid region or an incorrectly '\n                             'capitalized region name.')\n\n    existing = []\n    for n in cm.list_notification_plans():\n        if n.label == label:\n            existing.append(n)\n\n    if existing:\n        notification_plan = existing[0]\n\n    if state == 'present':\n        should_create = False\n        should_delete = False\n\n        if len(existing) > 1:\n            module.fail_json(msg='%s notification plans are labelled %s.' %\n                                 (len(existing), label))\n\n        if notification_plan:\n            should_delete = (critical_state and critical_state != notification_plan.critical_state) or \\\n                (warning_state and warning_state != notification_plan.warning_state) or \\\n                (ok_state and ok_state != notification_plan.ok_state)\n\n            if should_delete:\n                notification_plan.delete()\n                should_create = True\n        else:\n            should_create = True\n\n        if should_create:\n            notification_plan = cm.create_notification_plan(label=label,\n                                                            critical_state=critical_state,\n                                                            warning_state=warning_state,\n                                                            ok_state=ok_state)\n            changed = True\n    else:\n        for np in existing:\n            np.delete()\n            changed = True\n\n    if notification_plan:\n        notification_plan_dict = {\n            \"id\": notification_plan.id,\n            \"critical_state\": notification_plan.critical_state,\n            \"warning_state\": notification_plan.warning_state,\n            \"ok_state\": notification_plan.ok_state,\n            \"metadata\": notification_plan.metadata\n        }\n        module.exit_json(changed=changed, notification_plan=notification_plan_dict)\n    else:\n        module.exit_json(changed=changed)\n\n\ndef main():\n    argument_spec = rax_argument_spec()\n    argument_spec.update(\n        dict(\n            state=dict(default='present', choices=['present', 'absent']),\n            label=dict(required=True),\n            critical_state=dict(type='list'),\n            warning_state=dict(type='list'),\n            ok_state=dict(type='list')\n        )\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        required_together=rax_required_together()\n    )\n\n    if not HAS_PYRAX:\n        module.fail_json(msg='pyrax is required for this module')\n\n    state = module.params.get('state')\n\n    label = module.params.get('label')\n    critical_state = module.params.get('critical_state')\n    warning_state = module.params.get('warning_state')\n    ok_state = module.params.get('ok_state')\n\n    setup_rax_module(module, pyrax)\n\n    notification_plan(module, state, label, critical_state, warning_state, ok_state)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  rax mon notification plan short description  create delete rackspace cloud monitoring notification                    plan  description    create delete rackspace cloud monitoring notification plan   associating existing rax mon notifications severity levels  rackspace   monitoring module flow   rax mon entity    rax mon check      rax mon notification     rax mon notification plan     rax mon alarm version added   2 0  options    state      description        ensure notification plan c(label) exists       exist      choices    present    absent     label      description        defines friendly name notification plan  string 1       255 characters long      required  true   critical state      description        notification list use alarm state critical  must       array valid rax mon notification ids    warning state      description        notification list use alarm state warning  must array       valid rax mon notification ids    ok state      description        notification list use alarm state ok  must array       valid rax mon notification ids  author  ash wilson extends documentation fragment  rackspace openstack      examples         name  example notification plan   gather facts  false   hosts  local   connection  local   tasks      name  establish gets called      rax mon notification plan        credentials     rax pub       state  present       label  defcon1       critical state              everyone  notification    id             warning state              opsfloor  notification    id           register  defcon1         usr bin python    copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "#!/usr/bin/python\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rax_mon_notification_plan\nshort_description: Create or delete a Rackspace Cloud Monitoring notification\n                   plan.\ndescription:\n- Create or delete a Rackspace Cloud Monitoring notification plan by\n  associating existing rax_mon_notifications with severity levels. Rackspace\n  monitoring module flow | rax_mon_entity -> rax_mon_check ->\n  rax_mon_notification -> *rax_mon_notification_plan* -> rax_mon_alarm\nversion_added: \"2.0\"\noptions:\n  state:\n    description:\n    - Ensure that the notification plan with this C(label) exists or does not\n      exist.\n    choices: ['present', 'absent']\n  label:\n    description:\n    - Defines a friendly name for this notification plan. String between 1 and\n      255 characters long.\n    required: true\n  critical_state:\n    description:\n    - Notification list to use when the alarm state is CRITICAL. Must be an\n      array of valid rax_mon_notification ids.\n  warning_state:\n    description:\n    - Notification list to use when the alarm state is WARNING. Must be an array\n      of valid rax_mon_notification ids.\n  ok_state:\n    description:\n    - Notification list to use when the alarm state is OK. Must be an array of\n      valid rax_mon_notification ids.\nauthor: Ash Wilson\nextends_documentation_fragment: rackspace.openstack\n'''\n\nEXAMPLES = '''\n- name: Example notification plan\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n  - name: Establish who gets called when.\n    rax_mon_notification_plan:\n      credentials: ~/.rax_pub\n      state: present\n      label: defcon1\n      critical_state:\n      - \"{{ everyone['notification']['id'] }}\"\n      warning_state:\n      - \"{{ opsfloor['notification']['id'] }}\"\n    register: defcon1\n'''\n\ntry:\n    import pyrax\n    HAS_PYRAX = True\nexcept ImportError:\n    HAS_PYRAX = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.rax import rax_argument_spec, rax_required_together, setup_rax_module\n\n\ndef notification_plan(module, state, label, critical_state, warning_state, ok_state):\n\n    if len(label) < 1 or len(label) > 255:\n        module.fail_json(msg='label must be between 1 and 255 characters long')\n\n    changed = False\n    notification_plan = None\n\n    cm = pyrax.cloud_monitoring\n    if not cm:\n        module.fail_json(msg='Failed to instantiate client. This typically '\n                             'indicates an invalid region or an incorrectly '\n                             'capitalized region name.')\n\n    existing = []\n    for n in cm.list_notification_plans():\n        if n.label == label:\n            existing.append(n)\n\n    if existing:\n        notification_plan = existing[0]\n\n    if state == 'present':\n        should_create = False\n        should_delete = False\n\n        if len(existing) > 1:\n            module.fail_json(msg='%s notification plans are labelled %s.' %\n                                 (len(existing), label))\n\n        if notification_plan:\n            should_delete = (critical_state and critical_state != notification_plan.critical_state) or \\\n                (warning_state and warning_state != notification_plan.warning_state) or \\\n                (ok_state and ok_state != notification_plan.ok_state)\n\n            if should_delete:\n                notification_plan.delete()\n                should_create = True\n        else:\n            should_create = True\n\n        if should_create:\n            notification_plan = cm.create_notification_plan(label=label,\n                                                            critical_state=critical_state,\n                                                            warning_state=warning_state,\n                                                            ok_state=ok_state)\n            changed = True\n    else:\n        for np in existing:\n            np.delete()\n            changed = True\n\n    if notification_plan:\n        notification_plan_dict = {\n            \"id\": notification_plan.id,\n            \"critical_state\": notification_plan.critical_state,\n            \"warning_state\": notification_plan.warning_state,\n            \"ok_state\": notification_plan.ok_state,\n            \"metadata\": notification_plan.metadata\n        }\n        module.exit_json(changed=changed, notification_plan=notification_plan_dict)\n    else:\n        module.exit_json(changed=changed)\n\n\ndef main():\n    argument_spec = rax_argument_spec()\n    argument_spec.update(\n        dict(\n            state=dict(default='present', choices=['present', 'absent']),\n            label=dict(required=True),\n            critical_state=dict(type='list'),\n            warning_state=dict(type='list'),\n            ok_state=dict(type='list')\n        )\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        required_together=rax_required_together()\n    )\n\n    if not HAS_PYRAX:\n        module.fail_json(msg='pyrax is required for this module')\n\n    state = module.params.get('state')\n\n    label = module.params.get('label')\n    critical_state = module.params.get('critical_state')\n    warning_state = module.params.get('warning_state')\n    ok_state = module.params.get('ok_state')\n\n    setup_rax_module(module, pyrax)\n\n    notification_plan(module, state, label, critical_state, warning_state, ok_state)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "rax_mon_notification_plan.py", "id": "f739f9adbf9730b5e9c292f2c54c8665", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/rackspace/rax_mon_notification_plan.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}