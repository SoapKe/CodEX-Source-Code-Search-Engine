{"author": "spotify", "code": " -*- coding: utf-8 -*-\n\n Copyright 2012-2015 Spotify AB\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\nimport logging\nimport os\n\nimport luigi\nimport luigi.contrib.hadoop_jar\nimport luigi.contrib.hdfs\n\nlogger = logging.getLogger('luigi-interface')\n\n\ndef hadoop_examples_jar():\n    config = luigi.configuration.get_config()\n    examples_jar = config.get('hadoop', 'examples-jar')\n    if not examples_jar:\n        logger.error(\"You must specify hadoop:examples-jar in luigi.cfg\")\n        raise\n    if not os.path.exists(examples_jar):\n        logger.error(\"Can't find example jar: \" + examples_jar)\n        raise\n    return examples_jar\n\n\nDEFAULT_TERASORT_IN = '/tmp/terasort-in'\nDEFAULT_TERASORT_OUT = '/tmp/terasort-out'\n\n\nclass TeraGen(luigi.contrib.hadoop_jar.HadoopJarJobTask):\n    \"\"\"\n    Runs TeraGen, by default with 1TB of data (10B records)\n    \"\"\"\n\n    records = luigi.Parameter(default=\"10000000000\",\n                              description=\"Number of records, each record is 100 Bytes\")\n    terasort_in = luigi.Parameter(default=DEFAULT_TERASORT_IN,\n                                  description=\"directory to store terasort input into.\")\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, a successful execution of this task will create a file in HDFS.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`~luigi.target.Target`)\n        \"\"\"\n        return luigi.contrib.hdfs.HdfsTarget(self.terasort_in)\n\n    def jar(self):\n        return hadoop_examples_jar()\n\n    def main(self):\n        return \"teragen\"\n\n    def args(self):\n         First arg is 10B -- each record is 100bytes\n        return [self.records, self.output()]\n\n\nclass TeraSort(luigi.contrib.hadoop_jar.HadoopJarJobTask):\n    \"\"\"\n    Runs TeraGent, by default using\n    \"\"\"\n\n    terasort_in = luigi.Parameter(default=DEFAULT_TERASORT_IN,\n                                  description=\"directory to store terasort input into.\")\n    terasort_out = luigi.Parameter(default=DEFAULT_TERASORT_OUT,\n                                   description=\"directory to store terasort output into.\")\n\n    def requires(self):\n        \"\"\"\n        This task's dependencies:\n\n        * :py:class:`~.TeraGen`\n\n        :return: object (:py:class:`luigi.task.Task`)\n        \"\"\"\n        return TeraGen(terasort_in=self.terasort_in)\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, a successful execution of this task will create a file in HDFS.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`~luigi.target.Target`)\n        \"\"\"\n        return luigi.contrib.hdfs.HdfsTarget(self.terasort_out)\n\n    def jar(self):\n        return hadoop_examples_jar()\n\n    def main(self):\n        return \"terasort\"\n\n    def args(self):\n        return [self.input(), self.output()]\n", "comments": "        runs teragen  default 1tb data (10b records)              records   luigi parameter(default  10000000000                                 description  number records  record 100 bytes )     terasort   luigi parameter(default default terasort in                                    description  directory store terasort input  )      def output(self)                      returns target output task          in case  successful execution task create file hdfs            return  target output task           rtype  object ( py class   luigi target target )                     return luigi contrib hdfs hdfstarget(self terasort in)      def jar(self)          return hadoop examples jar()      def main(self)          return  teragen       def args(self)            first arg 10b    record 100bytes         return  self records  self output()    class terasort(luigi contrib hadoop jar hadoopjarjobtask)              runs teragent  default using              terasort   luigi parameter(default default terasort in                                    description  directory store terasort input  )     terasort   luigi parameter(default default terasort out                                     description  directory store terasort output  )      def requires(self)                      this task dependencies              py class    teragen            return  object ( py class  luigi task task )                     return teragen(terasort self terasort in)      def output(self)                      returns target output task          in case  successful execution task create file hdfs            return  target output task           rtype  object ( py class   luigi target target )                    coding  utf 8           copyright 2012 2015 spotify ab       licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license       http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license        first arg 10b    record 100bytes ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright 2012-2015 Spotify AB\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nimport logging\nimport os\n\nimport luigi\nimport luigi.contrib.hadoop_jar\nimport luigi.contrib.hdfs\n\nlogger = logging.getLogger('luigi-interface')\n\n\ndef hadoop_examples_jar():\n    config = luigi.configuration.get_config()\n    examples_jar = config.get('hadoop', 'examples-jar')\n    if not examples_jar:\n        logger.error(\"You must specify hadoop:examples-jar in luigi.cfg\")\n        raise\n    if not os.path.exists(examples_jar):\n        logger.error(\"Can't find example jar: \" + examples_jar)\n        raise\n    return examples_jar\n\n\nDEFAULT_TERASORT_IN = '/tmp/terasort-in'\nDEFAULT_TERASORT_OUT = '/tmp/terasort-out'\n\n\nclass TeraGen(luigi.contrib.hadoop_jar.HadoopJarJobTask):\n    \"\"\"\n    Runs TeraGen, by default with 1TB of data (10B records)\n    \"\"\"\n\n    records = luigi.Parameter(default=\"10000000000\",\n                              description=\"Number of records, each record is 100 Bytes\")\n    terasort_in = luigi.Parameter(default=DEFAULT_TERASORT_IN,\n                                  description=\"directory to store terasort input into.\")\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, a successful execution of this task will create a file in HDFS.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`~luigi.target.Target`)\n        \"\"\"\n        return luigi.contrib.hdfs.HdfsTarget(self.terasort_in)\n\n    def jar(self):\n        return hadoop_examples_jar()\n\n    def main(self):\n        return \"teragen\"\n\n    def args(self):\n        # First arg is 10B -- each record is 100bytes\n        return [self.records, self.output()]\n\n\nclass TeraSort(luigi.contrib.hadoop_jar.HadoopJarJobTask):\n    \"\"\"\n    Runs TeraGent, by default using\n    \"\"\"\n\n    terasort_in = luigi.Parameter(default=DEFAULT_TERASORT_IN,\n                                  description=\"directory to store terasort input into.\")\n    terasort_out = luigi.Parameter(default=DEFAULT_TERASORT_OUT,\n                                   description=\"directory to store terasort output into.\")\n\n    def requires(self):\n        \"\"\"\n        This task's dependencies:\n\n        * :py:class:`~.TeraGen`\n\n        :return: object (:py:class:`luigi.task.Task`)\n        \"\"\"\n        return TeraGen(terasort_in=self.terasort_in)\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, a successful execution of this task will create a file in HDFS.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`~luigi.target.Target`)\n        \"\"\"\n        return luigi.contrib.hdfs.HdfsTarget(self.terasort_out)\n\n    def jar(self):\n        return hadoop_examples_jar()\n\n    def main(self):\n        return \"terasort\"\n\n    def args(self):\n        return [self.input(), self.output()]\n", "description": "Luigi is a Python module that helps you build complex pipelines of batch jobs. It handles dependency resolution, workflow management, visualization etc. It also comes with Hadoop support built in. ", "file_name": "terasort.py", "id": "06755fd80903446977df3894afd5a200", "language": "Python", "project_name": "luigi", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/spotify-luigi/spotify-luigi-3cf763d/examples/terasort.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:09:25Z", "url": "https://github.com/spotify/luigi", "wiki": false}