{"author": "django", "code": "import re\nfrom unittest import TestCase\n\nfrom django import forms\nfrom django.core import validators\nfrom django.core.exceptions import ValidationError\n\n\nclass TestFieldWithValidators(TestCase):\n    def test_all_errors_get_reported(self):\n        class UserForm(forms.Form):\n            full_name = forms.CharField(\n                max_length=50,\n                validators=[\n                    validators.validate_integer,\n                    validators.validate_email,\n                ]\n            )\n            string = forms.CharField(\n                max_length=50,\n                validators=[\n                    validators.RegexValidator(\n                        regex='^[a-zA-Z]*$',\n                        message=\"Letters only.\",\n                    )\n                ]\n            )\n            ignore_case_string = forms.CharField(\n                max_length=50,\n                validators=[\n                    validators.RegexValidator(\n                        regex='^[a-z]*$',\n                        message=\"Letters only.\",\n                        flags=re.IGNORECASE,\n                    )\n                ]\n            )\n\n        form = UserForm({\n            'full_name': 'not int nor mail',\n            'string': '2 is not correct',\n            'ignore_case_string': \"IgnORE Case strIng\",\n        })\n        with self.assertRaises(ValidationError) as e:\n            form.fields['full_name'].clean('not int nor mail')\n        self.assertEqual(2, len(e.exception.messages))\n\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['string'], [\"Letters only.\"])\n        self.assertEqual(form.errors['string'], [\"Letters only.\"])\n\n    def test_field_validators_can_be_any_iterable(self):\n        class UserForm(forms.Form):\n            full_name = forms.CharField(\n                max_length=50,\n                validators=(\n                    validators.validate_integer,\n                    validators.validate_email,\n                )\n            )\n\n        form = UserForm({'full_name': 'not int nor mail'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['full_name'], ['Enter a valid integer.', 'Enter a valid email address.'])\n", "comments": "", "content": "import re\nfrom unittest import TestCase\n\nfrom django import forms\nfrom django.core import validators\nfrom django.core.exceptions import ValidationError\n\n\nclass TestFieldWithValidators(TestCase):\n    def test_all_errors_get_reported(self):\n        class UserForm(forms.Form):\n            full_name = forms.CharField(\n                max_length=50,\n                validators=[\n                    validators.validate_integer,\n                    validators.validate_email,\n                ]\n            )\n            string = forms.CharField(\n                max_length=50,\n                validators=[\n                    validators.RegexValidator(\n                        regex='^[a-zA-Z]*$',\n                        message=\"Letters only.\",\n                    )\n                ]\n            )\n            ignore_case_string = forms.CharField(\n                max_length=50,\n                validators=[\n                    validators.RegexValidator(\n                        regex='^[a-z]*$',\n                        message=\"Letters only.\",\n                        flags=re.IGNORECASE,\n                    )\n                ]\n            )\n\n        form = UserForm({\n            'full_name': 'not int nor mail',\n            'string': '2 is not correct',\n            'ignore_case_string': \"IgnORE Case strIng\",\n        })\n        with self.assertRaises(ValidationError) as e:\n            form.fields['full_name'].clean('not int nor mail')\n        self.assertEqual(2, len(e.exception.messages))\n\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['string'], [\"Letters only.\"])\n        self.assertEqual(form.errors['string'], [\"Letters only.\"])\n\n    def test_field_validators_can_be_any_iterable(self):\n        class UserForm(forms.Form):\n            full_name = forms.CharField(\n                max_length=50,\n                validators=(\n                    validators.validate_integer,\n                    validators.validate_email,\n                )\n            )\n\n        form = UserForm({'full_name': 'not int nor mail'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['full_name'], ['Enter a valid integer.', 'Enter a valid email address.'])\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_validators.py", "id": "7e0c60da9a03c8dc113f3b83e26dcc47", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/forms_tests/tests/test_validators.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}