{"author": "wangshub", "code": "import time\nimport math\n\nimport numpy as np\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\n\nimport settings\nfrom connector import Connector\nfrom algos import get_press_time\n\n\nclass ManualBot(Connector):\n\n    def __init__(self, params=settings.get_bot_params()):\n        \n        super(ManualBot, self).__init__()\n\n        \n        self.figure = plt.figure()\n\n        \n        self.steps = 0\n        self.params = params\n        self.coords = []\n        self.ix = [0, 0]\n        self.iy = [0, 0]\n        self.click_counter = 0\n        self.status = True\n\n\n    def run(self):\n        self.connector_screenshot()\n        self.image = plt.imshow(self._read_image(), animated=True)\n        self.action()\n\n    def action(self):\n        self.figure.canvas.mpl_connect('button_press_event', self._onclick)\n        ani = animation.FuncAnimation(self.figure, self._update_figure, interval=50, blit=True)\n        plt.show()\n\n\n    def _onclick(self, event):\n        coord = []\n        self.ix, self.iy = event.xdata, event.ydata\n        coord.append((self.ix, self.iy))\n        print(\"coordinate = \", coord)\n        self.coords.append(coord)\n        self.click_counter += 1\n\n        if self.click_counter > 1:\n            self.click_counter = 0\n            \n            coord1 = self.coords.pop()\n            coord2 = self.coords.pop()\n            press_time = get_press_time(coord1[0][0], coord1[0][1],\n                                        coord2[0][0], coord2[0][1], \n                                        self.params[\"TIME_COEFF\"])\n            self.steps += 1\n            print(\"Step: \", self.steps)\n            print(\"- coord1: \", coord1)\n            print(\"- coord2: \", coord2)\n            print(\"- press_time: \", press_time)\n            self.connector_taphold(press_time)\n            self.status = True\n\n\n    def _update_figure(self, *args):\n        if self.status:\n            time.sleep(1)\n            self.connector_screenshot()\n            self.image.set_array(self._read_image())\n            self.status = False\n        return self.image,\n\n\n    def _read_image(self):\n        return np.array(Image.open(self.image_dir))\n", "comments": "  init connector    init figure    actions    next screen ", "content": "import time\nimport math\n\nimport numpy as np\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\n\nimport settings\nfrom connector import Connector\nfrom algos import get_press_time\n\n\nclass ManualBot(Connector):\n\n    def __init__(self, params=settings.get_bot_params()):\n        # init connector\n        super(ManualBot, self).__init__()\n\n        # init figure\n        self.figure = plt.figure()\n\n        # actions\n        self.steps = 0\n        self.params = params\n        self.coords = []\n        self.ix = [0, 0]\n        self.iy = [0, 0]\n        self.click_counter = 0\n        self.status = True\n\n\n    def run(self):\n        self.connector_screenshot()\n        self.image = plt.imshow(self._read_image(), animated=True)\n        self.action()\n\n    def action(self):\n        self.figure.canvas.mpl_connect('button_press_event', self._onclick)\n        ani = animation.FuncAnimation(self.figure, self._update_figure, interval=50, blit=True)\n        plt.show()\n\n\n    def _onclick(self, event):\n        coord = []\n        self.ix, self.iy = event.xdata, event.ydata\n        coord.append((self.ix, self.iy))\n        print(\"coordinate = \", coord)\n        self.coords.append(coord)\n        self.click_counter += 1\n\n        if self.click_counter > 1:\n            self.click_counter = 0\n            # next screen\n            coord1 = self.coords.pop()\n            coord2 = self.coords.pop()\n            press_time = get_press_time(coord1[0][0], coord1[0][1],\n                                        coord2[0][0], coord2[0][1], \n                                        self.params[\"TIME_COEFF\"])\n            self.steps += 1\n            print(\"Step: \", self.steps)\n            print(\"- coord1: \", coord1)\n            print(\"- coord2: \", coord2)\n            print(\"- press_time: \", press_time)\n            self.connector_taphold(press_time)\n            self.status = True\n\n\n    def _update_figure(self, *args):\n        if self.status:\n            time.sleep(1)\n            self.connector_screenshot()\n            self.image.set_array(self._read_image())\n            self.status = False\n        return self.image,\n\n\n    def _read_image(self):\n        return np.array(Image.open(self.image_dir))\n", "description": "python \u5fae\u4fe1\u300a\u8df3\u4e00\u8df3\u300b\u8f85\u52a9", "file_name": "manual.py", "id": "822f91596045b4e30d79acf3e61c43f2", "language": "Python", "project_name": "wechat_jump_game", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/wangshub-wechat_jump_game/wangshub-wechat_jump_game-748e4b9/jump_bot/jumpbot/manual.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:35:59Z", "url": "https://github.com/wangshub/wechat_jump_game", "wiki": true}