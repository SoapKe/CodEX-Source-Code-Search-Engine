{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    unified_strdate,\n)\n\n\nclass KhanAcademyIE(InfoExtractor):\n    _VALID_URL = r'^https?://(?:(?:www|api)\\.)?khanacademy\\.org/(?P<key>[^/]+)/(?:[^/]+/){,2}(?P<id>[^?\n    IE_NAME = 'KhanAcademy'\n\n    _TESTS = [{\n        'url': 'http://www.khanacademy.org/video/one-time-pad',\n        'md5': '7b391cce85e758fb94f763ddc1bbb979',\n        'info_dict': {\n            'id': 'one-time-pad',\n            'ext': 'webm',\n            'title': 'The one-time pad',\n            'description': 'The perfect cipher',\n            'duration': 176,\n            'uploader': 'Brit Cruise',\n            'uploader_id': 'khanacademy',\n            'upload_date': '20120411',\n        },\n        'add_ie': ['Youtube'],\n    }, {\n        'url': 'https://www.khanacademy.org/math/applied-math/cryptography',\n        'info_dict': {\n            'id': 'cryptography',\n            'title': 'Journey into cryptography',\n            'description': 'How have humans protected their secret messages through history? What has changed today?',\n        },\n        'playlist_mincount': 3,\n    }]\n\n    def _real_extract(self, url):\n        m = re.match(self._VALID_URL, url)\n        video_id = m.group('id')\n\n        if m.group('key') == 'video':\n            data = self._download_json(\n                'http://api.khanacademy.org/api/v1/videos/' + video_id,\n                video_id, 'Downloading video info')\n\n            upload_date = unified_strdate(data['date_added'])\n            uploader = ', '.join(data['author_names'])\n            return {\n                '_type': 'url_transparent',\n                'url': data['url'],\n                'id': video_id,\n                'title': data['title'],\n                'thumbnail': data['image_url'],\n                'duration': data['duration'],\n                'description': data['description'],\n                'uploader': uploader,\n                'upload_date': upload_date,\n            }\n        else:\n            \n            data = self._download_json(\n                'http://api.khanacademy.org/api/v1/topic/' + video_id,\n                video_id, 'Downloading topic info')\n\n            entries = [\n                {\n                    '_type': 'url',\n                    'url': c['url'],\n                    'id': c['id'],\n                    'title': c['title'],\n                }\n                for c in data['children'] if c['kind'] in ('Video', 'Topic')]\n\n            return {\n                '_type': 'playlist',\n                'id': video_id,\n                'title': data['title'],\n                'description': data['description'],\n                'entries': entries,\n            }\n", "comments": "#/]+)(?:$|[?#])'\n# topic\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    unified_strdate,\n)\n\n\nclass KhanAcademyIE(InfoExtractor):\n    _VALID_URL = r'^https?://(?:(?:www|api)\\.)?khanacademy\\.org/(?P<key>[^/]+)/(?:[^/]+/){,2}(?P<id>[^?#/]+)(?:$|[?#])'\n    IE_NAME = 'KhanAcademy'\n\n    _TESTS = [{\n        'url': 'http://www.khanacademy.org/video/one-time-pad',\n        'md5': '7b391cce85e758fb94f763ddc1bbb979',\n        'info_dict': {\n            'id': 'one-time-pad',\n            'ext': 'webm',\n            'title': 'The one-time pad',\n            'description': 'The perfect cipher',\n            'duration': 176,\n            'uploader': 'Brit Cruise',\n            'uploader_id': 'khanacademy',\n            'upload_date': '20120411',\n        },\n        'add_ie': ['Youtube'],\n    }, {\n        'url': 'https://www.khanacademy.org/math/applied-math/cryptography',\n        'info_dict': {\n            'id': 'cryptography',\n            'title': 'Journey into cryptography',\n            'description': 'How have humans protected their secret messages through history? What has changed today?',\n        },\n        'playlist_mincount': 3,\n    }]\n\n    def _real_extract(self, url):\n        m = re.match(self._VALID_URL, url)\n        video_id = m.group('id')\n\n        if m.group('key') == 'video':\n            data = self._download_json(\n                'http://api.khanacademy.org/api/v1/videos/' + video_id,\n                video_id, 'Downloading video info')\n\n            upload_date = unified_strdate(data['date_added'])\n            uploader = ', '.join(data['author_names'])\n            return {\n                '_type': 'url_transparent',\n                'url': data['url'],\n                'id': video_id,\n                'title': data['title'],\n                'thumbnail': data['image_url'],\n                'duration': data['duration'],\n                'description': data['description'],\n                'uploader': uploader,\n                'upload_date': upload_date,\n            }\n        else:\n            # topic\n            data = self._download_json(\n                'http://api.khanacademy.org/api/v1/topic/' + video_id,\n                video_id, 'Downloading topic info')\n\n            entries = [\n                {\n                    '_type': 'url',\n                    'url': c['url'],\n                    'id': c['id'],\n                    'title': c['title'],\n                }\n                for c in data['children'] if c['kind'] in ('Video', 'Topic')]\n\n            return {\n                '_type': 'playlist',\n                'id': video_id,\n                'title': data['title'],\n                'description': data['description'],\n                'entries': entries,\n            }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "khanacademy.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/khanacademy.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}