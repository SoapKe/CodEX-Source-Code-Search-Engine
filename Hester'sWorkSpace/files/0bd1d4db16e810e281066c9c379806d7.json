{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestGridPath(object):\n\n    def test_grid_path(self):\n        grid = Grid()\n        assert_equal(grid.find_path(None), None)\n        assert_equal(grid.find_path([[]]), None)\n        max_rows = 8\n        max_cols = 4\n        matrix = [[1] * max_cols for _ in range(max_rows)]\n        matrix[1][1] = 0\n        matrix[2][2] = 0\n        matrix[3][0] = 0\n        matrix[4][2] = 0\n        matrix[5][3] = 0\n        matrix[6][1] = 0\n        matrix[6][3] = 0\n        matrix[7][1] = 0\n        result = grid.find_path(matrix)\n        expected = [(0, 0), (1, 0), (2, 0),\n                    (2, 1), (3, 1), (4, 1),\n                    (5, 1), (5, 2), (6, 2), \n                    (7, 2), (7, 3)]\n        assert_equal(result, expected)\n        matrix[7][2] = 0\n        result = grid.find_path(matrix)\n        assert_equal(result, None)\n        print('Success: test_grid_path')\n\n\ndef main():\n    test = TestGridPath()\n    test.test_grid_path()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\n\nclass TestGridPath(object):\n\n    def test_grid_path(self):\n        grid = Grid()\n        assert_equal(grid.find_path(None), None)\n        assert_equal(grid.find_path([[]]), None)\n        max_rows = 8\n        max_cols = 4\n        matrix = [[1] * max_cols for _ in range(max_rows)]\n        matrix[1][1] = 0\n        matrix[2][2] = 0\n        matrix[3][0] = 0\n        matrix[4][2] = 0\n        matrix[5][3] = 0\n        matrix[6][1] = 0\n        matrix[6][3] = 0\n        matrix[7][1] = 0\n        result = grid.find_path(matrix)\n        expected = [(0, 0), (1, 0), (2, 0),\n                    (2, 1), (3, 1), (4, 1),\n                    (5, 1), (5, 2), (6, 2), \n                    (7, 2), (7, 3)]\n        assert_equal(result, expected)\n        matrix[7][2] = 0\n        result = grid.find_path(matrix)\n        assert_equal(result, None)\n        print('Success: test_grid_path')\n\n\ndef main():\n    test = TestGridPath()\n    test.test_grid_path()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_grid_path.py", "id": "0bd1d4db16e810e281066c9c379806d7", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/recursion_dynamic/grid_path/test_grid_path.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}