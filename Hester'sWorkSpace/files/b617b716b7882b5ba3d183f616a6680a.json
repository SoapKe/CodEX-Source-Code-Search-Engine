{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    ExtractorError,\n    NO_DEFAULT,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass NovaMovIE(InfoExtractor):\n    IE_NAME = 'novamov'\n    IE_DESC = 'NovaMov'\n\n    _VALID_URL_TEMPLATE = r\n    _VALID_URL = _VALID_URL_TEMPLATE % {'host': r'novamov\\.com'}\n\n    _HOST = 'www.novamov.com'\n\n    _FILE_DELETED_REGEX = r'This file no longer exists on our servers!</h2>'\n    _FILEKEY_REGEX = r'flashvars\\.filekey=(?P<filekey>\"?[^\"]+\"?);'\n    _TITLE_REGEX = r'(?s)<div class=\"v_tab blockborder rounded5\" id=\"v_tab1\">\\s*<h3>([^<]+)</h3>'\n    _DESCRIPTION_REGEX = r'(?s)<div class=\"v_tab blockborder rounded5\" id=\"v_tab1\">\\s*<h3>[^<]+</h3><p>([^<]+)</p>'\n    _URL_TEMPLATE = 'http://%s/video/%s'\n\n    _TEST = None\n\n    def _check_existence(self, webpage, video_id):\n        if re.search(self._FILE_DELETED_REGEX, webpage) is not None:\n            raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        url = self._URL_TEMPLATE % (self._HOST, video_id)\n\n        webpage = self._download_webpage(\n            url, video_id, 'Downloading video page')\n\n        self._check_existence(webpage, video_id)\n\n        def extract_filekey(default=NO_DEFAULT):\n            filekey = self._search_regex(\n                self._FILEKEY_REGEX, webpage, 'filekey', default=default)\n            if filekey is not default and (filekey[0] != '\"' or filekey[-1] != '\"'):\n                return self._search_regex(\n                    r'var\\s+%s\\s*=\\s*\"([^\"]+)\"' % re.escape(filekey), webpage, 'filekey', default=default)\n            else:\n                return filekey\n\n        filekey = extract_filekey(default=None)\n\n        if not filekey:\n            fields = self._hidden_inputs(webpage)\n            post_url = self._search_regex(\n                r'<form[^>]+action=([\"\\'])(?P<url>.+?)\\1', webpage,\n                'post url', default=url, group='url')\n            if not post_url.startswith('http'):\n                post_url = compat_urlparse.urljoin(url, post_url)\n            request = sanitized_Request(\n                post_url, urlencode_postdata(fields))\n            request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n            request.add_header('Referer', post_url)\n            webpage = self._download_webpage(\n                request, video_id, 'Downloading continue to the video page')\n            self._check_existence(webpage, video_id)\n\n        filekey = extract_filekey()\n\n        title = self._html_search_regex(self._TITLE_REGEX, webpage, 'title')\n        description = self._html_search_regex(self._DESCRIPTION_REGEX, webpage, 'description', default='', fatal=False)\n\n        api_response = self._download_webpage(\n            'http://%s/api/player.api.php?key=%s&file=%s' % (self._HOST, filekey, video_id), video_id,\n            'Downloading video api response')\n\n        response = compat_urlparse.parse_qs(api_response)\n\n        if 'error_msg' in response:\n            raise ExtractorError('%s returned error: %s' % (self.IE_NAME, response['error_msg'][0]), expected=True)\n\n        video_url = response['url'][0]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': description\n        }\n\n\nclass WholeCloudIE(NovaMovIE):\n    IE_NAME = 'wholecloud'\n    IE_DESC = 'WholeCloud'\n\n    _VALID_URL = NovaMovIE._VALID_URL_TEMPLATE % {'host': r'(?:wholecloud\\.net|movshare\\.(?:net|sx|ag))'}\n\n    _HOST = 'www.wholecloud.net'\n\n    _FILE_DELETED_REGEX = r'>This file no longer exists on our servers.<'\n    _TITLE_REGEX = r'<strong>Title:</strong> ([^<]+)</p>'\n    _DESCRIPTION_REGEX = r'<strong>Description:</strong> ([^<]+)</p>'\n\n    _TEST = {\n        'url': 'http://www.wholecloud.net/video/559e28be54d96',\n        'md5': 'abd31a2132947262c50429e1d16c1bfd',\n        'info_dict': {\n            'id': '559e28be54d96',\n            'ext': 'flv',\n            'title': 'dissapeared image',\n            'description': 'optical illusion  dissapeared image  magic illusion',\n        }\n    }\n\n\nclass NowVideoIE(NovaMovIE):\n    IE_NAME = 'nowvideo'\n    IE_DESC = 'NowVideo'\n\n    _VALID_URL = NovaMovIE._VALID_URL_TEMPLATE % {'host': r'nowvideo\\.(?:to|ch|ec|sx|eu|at|ag|co|li)'}\n\n    _HOST = 'www.nowvideo.to'\n\n    _FILE_DELETED_REGEX = r'>This file no longer exists on our servers.<'\n    _TITLE_REGEX = r'<h4>([^<]+)</h4>'\n    _DESCRIPTION_REGEX = r'</h4>\\s*<p>([^<]+)</p>'\n\n    _TEST = {\n        'url': 'http://www.nowvideo.sx/video/f1d6fce9a968b',\n        'md5': '12c82cad4f2084881d8bc60ee29df092',\n        'info_dict': {\n            'id': 'f1d6fce9a968b',\n            'ext': 'flv',\n            'title': 'youtubedl test video BaWjenozKc',\n            'description': 'Description',\n        },\n    }\n\n\nclass VideoWeedIE(NovaMovIE):\n    IE_NAME = 'videoweed'\n    IE_DESC = 'VideoWeed'\n\n    _VALID_URL = NovaMovIE._VALID_URL_TEMPLATE % {'host': r'videoweed\\.(?:es|com)'}\n\n    _HOST = 'www.videoweed.es'\n\n    _FILE_DELETED_REGEX = r'>This file no longer exists on our servers.<'\n    _TITLE_REGEX = r'<h1 class=\"text_shadow\">([^<]+)</h1>'\n    _URL_TEMPLATE = 'http://%s/file/%s'\n\n    _TEST = {\n        'url': 'http://www.videoweed.es/file/b42178afbea14',\n        'md5': 'abd31a2132947262c50429e1d16c1bfd',\n        'info_dict': {\n            'id': 'b42178afbea14',\n            'ext': 'flv',\n            'title': 'optical illusion  dissapeared image magic illusion',\n            'description': ''\n        },\n    }\n\n\nclass CloudTimeIE(NovaMovIE):\n    IE_NAME = 'cloudtime'\n    IE_DESC = 'CloudTime'\n\n    _VALID_URL = NovaMovIE._VALID_URL_TEMPLATE % {'host': r'cloudtime\\.to'}\n\n    _HOST = 'www.cloudtime.to'\n\n    _FILE_DELETED_REGEX = r'>This file no longer exists on our servers.<'\n    _TITLE_REGEX = r'<div[^>]+class=[\"\\']video_det[\"\\'][^>]*>\\s*<strong>([^<]+)</strong>'\n\n    _TEST = None\n\n\nclass AuroraVidIE(NovaMovIE):\n    IE_NAME = 'auroravid'\n    IE_DESC = 'AuroraVid'\n\n    _VALID_URL = NovaMovIE._VALID_URL_TEMPLATE % {'host': r'auroravid\\.to'}\n\n    _HOST = 'www.auroravid.to'\n\n    _FILE_DELETED_REGEX = r'This file no longer exists on our servers!<'\n\n    _TESTS = [{\n        'url': 'http://www.auroravid.to/video/4rurhn9x446jj',\n        'md5': '7205f346a52bbeba427603ba10d4b935',\n        'info_dict': {\n            'id': '4rurhn9x446jj',\n            'ext': 'flv',\n            'title': 'search engine optimization',\n            'description': 'search engine optimization is used to rank the web page in the google search engine'\n        },\n        'skip': '\"Invalid token\" errors abound (in web interface as well as youtube-dl, there is nothing we can do about it.)'\n    }, {\n        'url': 'http://www.auroravid.to/embed/?v=4rurhn9x446jj',\n        'only_matching': True,\n    }]\n", "comments": "(?x)\n                            http://\n                                (?:\n                                    (?:www\\.)?%(host)s/(?:file|video|mobile/\\#/videos)/|\n                                    (?:(?:embed|www)\\.)%(host)s/embed(?:\\.php|/)?\\?(?:.*?&)?\\bv=\n                                )\n                                (?P<id>[a-z\\d]{13})\n                            \n \n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    ExtractorError,\n    NO_DEFAULT,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass NovaMovIE(InfoExtractor):\n    IE_NAME = 'novamov'\n    IE_DESC = 'NovaMov'\n\n    _VALID_URL_TEMPLATE = r'''(?x)\n                            http://\n                                (?:\n                                    (?:www\\.)?%(host)s/(?:file|video|mobile/\\#/videos)/|\n                                    (?:(?:embed|www)\\.)%(host)s/embed(?:\\.php|/)?\\?(?:.*?&)?\\bv=\n                                )\n                                (?P<id>[a-z\\d]{13})\n                            '''\n    _VALID_URL = _VALID_URL_TEMPLATE % {'host': r'novamov\\.com'}\n\n    _HOST = 'www.novamov.com'\n\n    _FILE_DELETED_REGEX = r'This file no longer exists on our servers!</h2>'\n    _FILEKEY_REGEX = r'flashvars\\.filekey=(?P<filekey>\"?[^\"]+\"?);'\n    _TITLE_REGEX = r'(?s)<div class=\"v_tab blockborder rounded5\" id=\"v_tab1\">\\s*<h3>([^<]+)</h3>'\n    _DESCRIPTION_REGEX = r'(?s)<div class=\"v_tab blockborder rounded5\" id=\"v_tab1\">\\s*<h3>[^<]+</h3><p>([^<]+)</p>'\n    _URL_TEMPLATE = 'http://%s/video/%s'\n\n    _TEST = None\n\n    def _check_existence(self, webpage, video_id):\n        if re.search(self._FILE_DELETED_REGEX, webpage) is not None:\n            raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        url = self._URL_TEMPLATE % (self._HOST, video_id)\n\n        webpage = self._download_webpage(\n            url, video_id, 'Downloading video page')\n\n        self._check_existence(webpage, video_id)\n\n        def extract_filekey(default=NO_DEFAULT):\n            filekey = self._search_regex(\n                self._FILEKEY_REGEX, webpage, 'filekey', default=default)\n            if filekey is not default and (filekey[0] != '\"' or filekey[-1] != '\"'):\n                return self._search_regex(\n                    r'var\\s+%s\\s*=\\s*\"([^\"]+)\"' % re.escape(filekey), webpage, 'filekey', default=default)\n            else:\n                return filekey\n\n        filekey = extract_filekey(default=None)\n\n        if not filekey:\n            fields = self._hidden_inputs(webpage)\n            post_url = self._search_regex(\n                r'<form[^>]+action=([\"\\'])(?P<url>.+?)\\1', webpage,\n                'post url', default=url, group='url')\n            if not post_url.startswith('http'):\n                post_url = compat_urlparse.urljoin(url, post_url)\n            request = sanitized_Request(\n                post_url, urlencode_postdata(fields))\n            request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n            request.add_header('Referer', post_url)\n            webpage = self._download_webpage(\n                request, video_id, 'Downloading continue to the video page')\n            self._check_existence(webpage, video_id)\n\n        filekey = extract_filekey()\n\n        title = self._html_search_regex(self._TITLE_REGEX, webpage, 'title')\n        description = self._html_search_regex(self._DESCRIPTION_REGEX, webpage, 'description', default='', fatal=False)\n\n        api_response = self._download_webpage(\n            'http://%s/api/player.api.php?key=%s&file=%s' % (self._HOST, filekey, video_id), video_id,\n            'Downloading video api response')\n\n        response = compat_urlparse.parse_qs(api_response)\n\n        if 'error_msg' in response:\n            raise ExtractorError('%s returned error: %s' % (self.IE_NAME, response['error_msg'][0]), expected=True)\n\n        video_url = response['url'][0]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': description\n        }\n\n\nclass WholeCloudIE(NovaMovIE):\n    IE_NAME = 'wholecloud'\n    IE_DESC = 'WholeCloud'\n\n    _VALID_URL = NovaMovIE._VALID_URL_TEMPLATE % {'host': r'(?:wholecloud\\.net|movshare\\.(?:net|sx|ag))'}\n\n    _HOST = 'www.wholecloud.net'\n\n    _FILE_DELETED_REGEX = r'>This file no longer exists on our servers.<'\n    _TITLE_REGEX = r'<strong>Title:</strong> ([^<]+)</p>'\n    _DESCRIPTION_REGEX = r'<strong>Description:</strong> ([^<]+)</p>'\n\n    _TEST = {\n        'url': 'http://www.wholecloud.net/video/559e28be54d96',\n        'md5': 'abd31a2132947262c50429e1d16c1bfd',\n        'info_dict': {\n            'id': '559e28be54d96',\n            'ext': 'flv',\n            'title': 'dissapeared image',\n            'description': 'optical illusion  dissapeared image  magic illusion',\n        }\n    }\n\n\nclass NowVideoIE(NovaMovIE):\n    IE_NAME = 'nowvideo'\n    IE_DESC = 'NowVideo'\n\n    _VALID_URL = NovaMovIE._VALID_URL_TEMPLATE % {'host': r'nowvideo\\.(?:to|ch|ec|sx|eu|at|ag|co|li)'}\n\n    _HOST = 'www.nowvideo.to'\n\n    _FILE_DELETED_REGEX = r'>This file no longer exists on our servers.<'\n    _TITLE_REGEX = r'<h4>([^<]+)</h4>'\n    _DESCRIPTION_REGEX = r'</h4>\\s*<p>([^<]+)</p>'\n\n    _TEST = {\n        'url': 'http://www.nowvideo.sx/video/f1d6fce9a968b',\n        'md5': '12c82cad4f2084881d8bc60ee29df092',\n        'info_dict': {\n            'id': 'f1d6fce9a968b',\n            'ext': 'flv',\n            'title': 'youtubedl test video BaWjenozKc',\n            'description': 'Description',\n        },\n    }\n\n\nclass VideoWeedIE(NovaMovIE):\n    IE_NAME = 'videoweed'\n    IE_DESC = 'VideoWeed'\n\n    _VALID_URL = NovaMovIE._VALID_URL_TEMPLATE % {'host': r'videoweed\\.(?:es|com)'}\n\n    _HOST = 'www.videoweed.es'\n\n    _FILE_DELETED_REGEX = r'>This file no longer exists on our servers.<'\n    _TITLE_REGEX = r'<h1 class=\"text_shadow\">([^<]+)</h1>'\n    _URL_TEMPLATE = 'http://%s/file/%s'\n\n    _TEST = {\n        'url': 'http://www.videoweed.es/file/b42178afbea14',\n        'md5': 'abd31a2132947262c50429e1d16c1bfd',\n        'info_dict': {\n            'id': 'b42178afbea14',\n            'ext': 'flv',\n            'title': 'optical illusion  dissapeared image magic illusion',\n            'description': ''\n        },\n    }\n\n\nclass CloudTimeIE(NovaMovIE):\n    IE_NAME = 'cloudtime'\n    IE_DESC = 'CloudTime'\n\n    _VALID_URL = NovaMovIE._VALID_URL_TEMPLATE % {'host': r'cloudtime\\.to'}\n\n    _HOST = 'www.cloudtime.to'\n\n    _FILE_DELETED_REGEX = r'>This file no longer exists on our servers.<'\n    _TITLE_REGEX = r'<div[^>]+class=[\"\\']video_det[\"\\'][^>]*>\\s*<strong>([^<]+)</strong>'\n\n    _TEST = None\n\n\nclass AuroraVidIE(NovaMovIE):\n    IE_NAME = 'auroravid'\n    IE_DESC = 'AuroraVid'\n\n    _VALID_URL = NovaMovIE._VALID_URL_TEMPLATE % {'host': r'auroravid\\.to'}\n\n    _HOST = 'www.auroravid.to'\n\n    _FILE_DELETED_REGEX = r'This file no longer exists on our servers!<'\n\n    _TESTS = [{\n        'url': 'http://www.auroravid.to/video/4rurhn9x446jj',\n        'md5': '7205f346a52bbeba427603ba10d4b935',\n        'info_dict': {\n            'id': '4rurhn9x446jj',\n            'ext': 'flv',\n            'title': 'search engine optimization',\n            'description': 'search engine optimization is used to rank the web page in the google search engine'\n        },\n        'skip': '\"Invalid token\" errors abound (in web interface as well as youtube-dl, there is nothing we can do about it.)'\n    }, {\n        'url': 'http://www.auroravid.to/embed/?v=4rurhn9x446jj',\n        'only_matching': True,\n    }]\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "novamov.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/novamov.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}