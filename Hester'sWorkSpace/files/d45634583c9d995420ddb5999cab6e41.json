{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_unquote\nfrom ..utils import (\n    clean_html,\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n)\n\n\nclass XVideosIE(InfoExtractor):\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'http://www.xvideos.com/video4588838/biker_takes_his_girl',\n        'md5': '14cea69fcb84db54293b1e971466c2e1',\n        'info_dict': {\n            'id': '4588838',\n            'ext': 'mp4',\n            'title': 'Biker Takes his Girl',\n            'duration': 108,\n            'age_limit': 18,\n        }\n    }, {\n        'url': 'https://flashservice.xvideos.com/embedframe/4588838',\n        'only_matching': True,\n    }, {\n        'url': 'http://static-hw.xvideos.com/swf/xv-player.swf?id_video=4588838',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'http://www.xvideos.com/video%s/' % video_id, video_id)\n\n        mobj = re.search(r'<h1 class=\"inlineError\">(.+?)</h1>', webpage)\n        if mobj:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, clean_html(mobj.group(1))), expected=True)\n\n        title = self._html_search_regex(\n            (r'<title>(?P<title>.+?)\\s+-\\s+XVID',\n             r'setVideoTitle\\s*\\(\\s*([\"\\'])(?P<title>(?:(?!\\1).)+)\\1'),\n            webpage, 'title', default=None,\n            group='title') or self._og_search_title(webpage)\n\n        thumbnail = self._search_regex(\n            r'url_bigthumb=(.+?)&amp', webpage, 'thumbnail', fatal=False)\n        duration = int_or_none(self._og_search_property(\n            'duration', webpage, default=None)) or parse_duration(\n            self._search_regex(\n                r'<span[^>]+class=[\"\\']duration[\"\\'][^>]*>.*?(\\d[^<]+)',\n                webpage, 'duration', fatal=False))\n\n        formats = []\n\n        video_url = compat_urllib_parse_unquote(self._search_regex(\n            r'flv_url=(.+?)&', webpage, 'video URL', default=''))\n        if video_url:\n            formats.append({\n                'url': video_url,\n                'format_id': 'flv',\n            })\n\n        for kind, _, format_url in re.findall(\n                r'setVideo([^(]+)\\(([\"\\'])(http.+?)\\2\\)', webpage):\n            format_id = kind.lower()\n            if format_id == 'hls':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4',\n                    entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n            elif format_id in ('urllow', 'urlhigh'):\n                formats.append({\n                    'url': format_url,\n                    'format_id': '%s-%s' % (determine_ext(format_url, 'mp4'), format_id[3:]),\n                    'quality': -2 if format_id.endswith('low') else None,\n                })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'duration': duration,\n            'thumbnail': thumbnail,\n            'age_limit': 18,\n        }\n", "comments": "(?x)\n                    https?://\n                        (?:\n                            (?:www\\.)?xvideos\\.com/video|\n                            flashservice\\.xvideos\\.com/embedframe/|\n                            static-hw\\.xvideos\\.com/swf/xv-player\\.swf\\?.*?\\bid_video=\n                        )\n                        (?P<id>[0-9]+)\n                    \n \n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_unquote\nfrom ..utils import (\n    clean_html,\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n)\n\n\nclass XVideosIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:\n                            (?:www\\.)?xvideos\\.com/video|\n                            flashservice\\.xvideos\\.com/embedframe/|\n                            static-hw\\.xvideos\\.com/swf/xv-player\\.swf\\?.*?\\bid_video=\n                        )\n                        (?P<id>[0-9]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.xvideos.com/video4588838/biker_takes_his_girl',\n        'md5': '14cea69fcb84db54293b1e971466c2e1',\n        'info_dict': {\n            'id': '4588838',\n            'ext': 'mp4',\n            'title': 'Biker Takes his Girl',\n            'duration': 108,\n            'age_limit': 18,\n        }\n    }, {\n        'url': 'https://flashservice.xvideos.com/embedframe/4588838',\n        'only_matching': True,\n    }, {\n        'url': 'http://static-hw.xvideos.com/swf/xv-player.swf?id_video=4588838',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'http://www.xvideos.com/video%s/' % video_id, video_id)\n\n        mobj = re.search(r'<h1 class=\"inlineError\">(.+?)</h1>', webpage)\n        if mobj:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, clean_html(mobj.group(1))), expected=True)\n\n        title = self._html_search_regex(\n            (r'<title>(?P<title>.+?)\\s+-\\s+XVID',\n             r'setVideoTitle\\s*\\(\\s*([\"\\'])(?P<title>(?:(?!\\1).)+)\\1'),\n            webpage, 'title', default=None,\n            group='title') or self._og_search_title(webpage)\n\n        thumbnail = self._search_regex(\n            r'url_bigthumb=(.+?)&amp', webpage, 'thumbnail', fatal=False)\n        duration = int_or_none(self._og_search_property(\n            'duration', webpage, default=None)) or parse_duration(\n            self._search_regex(\n                r'<span[^>]+class=[\"\\']duration[\"\\'][^>]*>.*?(\\d[^<]+)',\n                webpage, 'duration', fatal=False))\n\n        formats = []\n\n        video_url = compat_urllib_parse_unquote(self._search_regex(\n            r'flv_url=(.+?)&', webpage, 'video URL', default=''))\n        if video_url:\n            formats.append({\n                'url': video_url,\n                'format_id': 'flv',\n            })\n\n        for kind, _, format_url in re.findall(\n                r'setVideo([^(]+)\\(([\"\\'])(http.+?)\\2\\)', webpage):\n            format_id = kind.lower()\n            if format_id == 'hls':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4',\n                    entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n            elif format_id in ('urllow', 'urlhigh'):\n                formats.append({\n                    'url': format_url,\n                    'format_id': '%s-%s' % (determine_ext(format_url, 'mp4'), format_id[3:]),\n                    'quality': -2 if format_id.endswith('low') else None,\n                })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'duration': duration,\n            'thumbnail': thumbnail,\n            'age_limit': 18,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "xvideos.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/xvideos.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}