{"author": "yandex", "code": "from nose.tools import assert_true, assert_false, assert_equals\nfrom gixy.core.regexp import Regexp\n\n\n\n\ndef test_positive_contains():\n    cases = (\n        (r'[a-z]', 'a'),\n        (r'[a-z]*', 'a'),\n        (r'[a-z]*?', 'a'),\n        (r'[a-z]+?', 'a'),\n        (r'[a-z]', 'z'),\n        (r'(?:a|b)', 'b'),\n        (r'(/|:|[a-z])', 'g'),\n        (r'[^a-z]', '/'),\n        (r'[^a-z]', '\\n'),\n        (r'[^0]', '9'),\n        (r'[^0-2]', '3'),\n        (r'[^0123a-z]', '9'),\n        (r'\\s', '\\x20'),\n        (r'[^\\s]', 'a'),\n        (r'\\d', '1'),\n        (r'[^\\d]', 'b'),\n        (r'\\w', '_'),\n        (r'[^\\w]', '\\n'),\n        (r'\\W', '\\n'),\n        (r'[^\\W]', 'a'),\n        (r'.', 'a')\n    )\n    for case in cases:\n        regexp, char = case\n        yield check_positive_contain, regexp, char\n\n\ndef test_negative_contains():\n    cases = (\n        ('[a-z]', '1'),\n        ('[a-z]*', '2'),\n        ('[a-z]*?', '3'),\n        ('[a-z]+?', '4'),\n        ('[a-z]', '\\n'),\n        ('(?:a|b)', 'c'),\n        ('(/|:|[a-z])', '\\n'),\n        ('[^a-z]', 'a'),\n        ('[^0]', '0'),\n        ('[^0-2]', '0'),\n        ('[^0123a-z]', 'z'),\n        (r'\\s', 'a'),\n        (r'[^\\s]', '\\n'),\n        (r'\\d', 'f'),\n        (r'[^\\d]', '2'),\n        (r'\\w', '\\n'),\n        (r'[^\\w]', '_'),\n        (r'\\W', 'a'),\n        (r'[^\\W]', '\\n'),\n        (r'.', '\\n')\n    )\n    for case in cases:\n        regexp, char = case\n        yield check_negative_contain, regexp, char\n\n\ndef test_groups_names():\n    cases = (\n        ('foo', [0]),\n        ('(1)(2)(?:3)', [0, 1, 2]),\n        ('(1)((2)|(?:3))', [0, 1, 2, 3]),\n        (\"(?'pcre_7'1as)(?P<outer>(?<inner>2)|(?:3))\", [0, 1, 2, 3, 'pcre_7', 'outer', 'inner']),\n        ('/proxy/(?<proxy>.*)$', [0, 1, 'proxy'])\n    )\n    for case in cases:\n        regexp, groups = case\n        yield check_groups_names, regexp, groups\n\n\ndef test_to_string():\n    cases = (\n        (r'foo', 'foo'),\n        (r'(1)(2)(?:3)', '(1)(2)(?:3)'),\n        (r'(1)((2)|(?:3))', '(1)((?:(2)|(?:3)))'),\n        (r'\\w|1|3-5|[a-z]', '(?:[\\w]|1|3\\\\-5|[a-z])'),\n        (r'(1|(?:3)|([4-6]))', '((?:1|(?:3)|([4-6])))'),\n        (r'(1|(?:3)|(?P<aaa>[4-6]))', '((?:1|(?:3)|([4-6])))'),\n        (r'^sss', '^sss'),\n        (r'(^bb|11)$', '((?:^bb|11))$'),\n        (r'(http|https)', '(http(?:|s))'),\n        (r'1*', '1*'),\n        (r'1*?', '1*?'),\n        (r'1+', '1+'),\n    )\n    for case in cases:\n        regexp, string = case\n        yield check_to_string, regexp, string\n\n\ndef test_positive_startswith():\n    cases = (\n        (r'foo', 'q', False),\n        (r'foo', 'f', True),\n        (r'^foo', 'f', False),\n        (r'(^foo)', 'f', False),\n        (r'(^foo)', 'f', True),\n        (r'(^foo|g)', 'f', True),\n        (r'(^foo|g)', 'g', True),\n        (r'(^foo|g)', 'q', False),\n        (r'^[^/]+', '\\n', True),\n        (r'/[^/]+', '/', True),\n        (r'((a))', 'a', False),\n        (r'((a))', 'b', False),\n        (r'^[a-z]{0}0', '0', False),\n        (r'^[a-z]{1}0', 'a', False),\n    )\n    for case in cases:\n        regexp, check, strict = case\n        yield check_positive_startswith, regexp, check, strict\n\n\ndef test_negative_startswith():\n    cases = (\n        (r'foo', '\\n', False),\n        (r'foo', 'o', True),\n        (r'^foo', 'o', False),\n        (r'(^foo)', 'q', False),\n        (r'(^foo)', 'q', True),\n        (r'(^foo|g)', 'q', True),\n        (r'(^foo|g)', 'o', True),\n        (r'(^foo|g)', '\\n', False),\n        (r'^[^/]+', '/', True),\n        (r'/[^/]+', 'a', True),\n        (r'((abc)|(ss))', 'b', True),\n        (r'^[a-z]{0}0', 'a', False),\n        (r'^[a-z]{0}0', 'g', False),\n    )\n    for case in cases:\n        regexp, check, strict = case\n        yield check_negative_startswith, regexp, check, strict\n\n\ndef test_positive_must_contain():\n    cases = (\n        (r'abc', 'a'),\n        (r'abc', 'b'),\n        (r'abc', 'c'),\n        (r'3+', '3'),\n        (r'[0]', '0'),\n        (r'([0])', '0'),\n        (r'(?:[0])', '0'),\n        (r'(?:[0])|0|((((0))))', '0'),\n    )\n    for case in cases:\n        regexp, char = case\n        yield check_positive_must_contain, regexp, char\n\n\ndef test_negative_must_contain():\n    cases = (\n        (r'[a-z]', '1'),\n        (r'2{0}1', '2'),\n        (r'3?', '3'),\n        (r'3*', '3'),\n        (r'3*?', '3'),\n        (r'3+a', 'b'),\n        (r'[a-z]', 'a'),\n        (r'(?:a|b)', 'a'),\n        (r'(?:a|b)', 'b'),\n        (r'(/|:|[a-z])', '/'),\n        (r'(/|:|[a-z])', 'z'),\n        (r'[^a-z]', '\\n'),\n        (r'[^0]', '0'),\n        (r'[^0-2]', '0'),\n        (r'[^0123a-z]', 'z'),\n        (r'\\s', '\\x20'),\n        (r'[^\\s]', '\\n'),\n        (r'\\d', '3'),\n        (r'[^\\d]', 'a'),\n        (r'\\w', 'a'),\n        (r'[^\\w]', '\\n'),\n        (r'\\W', '\\n'),\n        (r'[^\\W]', 'a'),\n        (r'.', '\\n')\n    )\n    for case in cases:\n        regexp, char = case\n        yield check_negative_must_contain, regexp, char\n\n\ndef test_positive_must_startswith():\n    cases = (\n        (r'foo', 'f', True),\n        (r'^foo', 'f', False),\n        (r'(^foo)', 'f', True),\n        (r'^((a))', 'a', False),\n        (r'((a))', 'a', True),\n        (r'^[a-z]{0}0', '0', False),\n        (r'^a{1}0', 'a', False),\n    )\n    for case in cases:\n        regexp, check, strict = case\n        yield check_positive_must_startswith, regexp, check, strict\n\n\ndef test_negative_must_startswith():\n    cases = (\n        (r'foo', 'o', False),\n        (r'^foo', 'o', False),\n        (r'(^foo)', 'o', False),\n        (r'[a-z]', '1', True),\n        (r'[a-z]', 'a', True),\n        (r'/[^/]+', 'a', True),\n        (r'3?', '3', True),\n        (r'3*', '3', True),\n        (r'3*?', '3', True),\n        (r'3+a', 'b', True),\n        (r'^((a))', 'b', False),\n        (r'((a))', 'a', False),\n        (r'^a{0}0', 'a', False),\n    )\n    for case in cases:\n        regexp, check, strict = case\n        yield check_negative_must_startswith, regexp, check, strict\n\n\ndef test_generate():\n    cases = (\n        (r'foo', ['foo']),\n        (r'^sss', ['^sss']),\n        (r'(1)(2)(3)', ['123']),\n        (r'(1)((2)|(?:3))', ['12', '13']),\n        (r'(^1?2?|aa/)', ['^', '^1', '^2', '^12', 'aa/']),\n        (r'^https?://yandex.ru', ['^http://yandex|ru', '^https://yandex|ru']),\n        (r'(^bb|11)$', ['^bb$', '11$']),\n        (r'(http|https)', ['http', 'https']),\n        (r'1*', ['', '11111']),\n        (r'1*?', ['', '11111']),\n        (r'1[0]?2', ['102', '12']),\n        (r'1[0]2', ['102']),\n        (r'1+', ['11111']),\n        (r'[^/]?', ['', '|']),\n        (r'^http://(foo|bar)|baz', ['^http://foo', '^http://bar', 'baz']),\n        (r'[^\\x00-\\x7b|\\x7e-\\xff]', ['\\x7d']),\n        (r'(a|b|c)', ['a', 'b', 'c']),\n        (r'[xyz]', ['x', 'y', 'z'])\n    )\n    for case in cases:\n        regexp, values = case\n        yield check_generate, regexp, values\n\n\ndef test_strict_generate():\n    reg = Regexp('^foo|bar', strict=True)\n    assert_equals(sorted(reg.generate('|', anchored=True)), sorted(['^foo', '^bar']))\n\n\ndef test_gen_anchor():\n\n    reg = Regexp('^some$')\n    val = next(reg.generate('', anchored=False))\n    assert_equals(val, 'some')\n\n    reg = Regexp('^some$')\n    val = next(reg.generate('', anchored=True))\n    assert_equals(val, '^some$')\n\n    reg = Regexp('^some$', strict=True)\n    val = next(reg.generate('', anchored=False))\n    assert_equals(val, 'some')\n\n    reg = Regexp('^some$', strict=True)\n    val = next(reg.generate('', anchored=True))\n    assert_equals(val, '^some$')\n\n\ndef test_group_can_contains():\n    source = '/some/(?P<action>[^/:.]+)/'\n    reg = Regexp(source)\n    assert_true(reg.can_contain('\\n'),\n                'Whole regex \"{src}\" can contains {sym!r}'.format(src=source, sym='\\\\n'))\n\n    assert_true(reg.group(0).can_contain('\\n'),\n                'Group 0 from regex \"{src}\" can contains {sym!r}'.format(src=source, sym='\\\\n'))\n\n    assert_true(reg.group('action').can_contain('\\n'),\n                'Group \"action\" from regex \"{src}\" can contains {sym!r}'.format(src=source, sym='\\\\n'))\n\n    assert_true(reg.group(1).can_contain('\\n'),\n                'Group 1 from regex \"{src}\" can contains {sym!r}'.format(src=source, sym='\\\\n'))\n\n    assert_false(reg.group('action').can_contain('/'),\n                 'Group \"action\" from regex \"{src}\" CAN\\'T (!) contain {sym!r}'.format(src=source, sym='/'))\n\n\ndef check_positive_contain(regexp, char):\n    reg = Regexp(regexp, case_sensitive=True)\n    assert_true(reg.can_contain(char),\n                '{reg!r} should contain {chr!r}'.format(reg=regexp, chr=char))\n\n    reg = Regexp(regexp, case_sensitive=False)\n    char = char.upper()\n    assert_true(reg.can_contain(char),\n                '{reg!r} (case insensitive) should contain {chr!r}'.format(reg=regexp, chr=char))\n\n\ndef check_negative_contain(regexp, char):\n    reg = Regexp(regexp, case_sensitive=True)\n    assert_false(reg.can_contain(char),\n                 '{reg!r} should not contain {chr!r}'.format(reg=regexp, chr=char))\n\n    reg = Regexp(regexp, case_sensitive=False)\n    char = char.upper()\n    assert_false(reg.can_contain(char),\n                 '{reg!r} (case insensitive) should not contain {chr!r}'.format(reg=regexp, chr=char))\n\n\ndef check_positive_startswith(regexp, char, strict):\n    reg = Regexp(regexp, case_sensitive=True, strict=strict)\n    assert_true(reg.can_startswith(char),\n                '{reg!r} can start\\'s with {chr!r}'.format(reg=regexp, chr=char))\n\n    reg = Regexp(regexp, case_sensitive=False, strict=strict)\n    char = char.upper()\n    assert_true(reg.can_startswith(char),\n                '{reg!r} (case insensitive) can start\\'s with {chr!r}'.format(reg=regexp, chr=char))\n\n\ndef check_negative_startswith(regexp, char, strict):\n    reg = Regexp(regexp, case_sensitive=True, strict=strict)\n    assert_false(reg.can_startswith(char),\n                 '{reg!r} can\\'t start\\'s with {chr!r}'.format(reg=regexp, chr=char))\n\n    reg = Regexp(regexp, case_sensitive=False, strict=strict)\n    char = char.upper()\n    assert_false(reg.can_startswith(char),\n                 '{reg!r} (case insensitive) can\\'t start\\'s with {chr!r}'.format(reg=regexp, chr=char))\n\n\ndef check_groups_names(regexp, groups):\n    reg = Regexp(regexp)\n    assert_equals(set(reg.groups.keys()), set(groups))\n\n\ndef check_to_string(regexp, string):\n    reg = Regexp(regexp)\n    assert_equals(str(reg), string)\n\n\ndef check_positive_must_contain(regexp, char):\n    reg = Regexp(regexp, case_sensitive=True)\n    assert_true(reg.must_contain(char),\n                '{reg!r} must contain with {chr!r}'.format(reg=regexp, chr=char))\n\n    reg = Regexp(regexp, case_sensitive=False)\n    char = char.upper()\n    assert_true(reg.must_contain(char),\n                '{reg!r} (case insensitive) must contain with {chr!r}'.format(reg=regexp, chr=char))\n\n\ndef check_negative_must_contain(regexp, char):\n    reg = Regexp(regexp, case_sensitive=True)\n    assert_false(reg.must_contain(char),\n                 '{reg!r} must NOT contain with {chr!r}'.format(reg=regexp, chr=char))\n\n    reg = Regexp(regexp, case_sensitive=False)\n    char = char.upper()\n    assert_false(reg.must_contain(char),\n                 '{reg!r} (case insensitive) must NOT contain with {chr!r}'.format(reg=regexp, chr=char))\n\n\ndef check_positive_must_startswith(regexp, char, strict):\n    reg = Regexp(regexp, case_sensitive=True, strict=strict)\n    assert_true(reg.must_startswith(char),\n                '{reg!r} MUST start\\'s with {chr!r}'.format(reg=regexp, chr=char))\n\n    reg = Regexp(regexp, case_sensitive=False, strict=strict)\n    char = char.upper()\n    assert_true(reg.must_startswith(char),\n                '{reg!r} (case insensitive) MUST start\\'s with {chr!r}'.format(reg=regexp, chr=char))\n\n\ndef check_negative_must_startswith(regexp, char, strict):\n    reg = Regexp(regexp, case_sensitive=True, strict=strict)\n    assert_false(reg.must_startswith(char),\n                 '{reg!r} MUST NOT start\\'s with {chr!r}'.format(reg=regexp, chr=char))\n\n    reg = Regexp(regexp, case_sensitive=False, strict=strict)\n    char = char.upper()\n    assert_false(reg.must_startswith(char),\n                 '{reg!r} (case insensitive) MUST NOT start\\'s with {chr!r}'.format(reg=regexp, chr=char))\n\n\ndef check_generate(regexp, values):\n    reg = Regexp(regexp)\n    assert_equals(sorted(reg.generate('|', anchored=True)), sorted(values))\n", "comments": "    categories      sre parse category space     sre parse category not space     sre parse category digit     sre parse category not digit     sre parse category word     sre parse category not word     any     ", "content": "from nose.tools import assert_true, assert_false, assert_equals\nfrom gixy.core.regexp import Regexp\n\n'''\nCATEGORIES:\n    sre_parse.CATEGORY_SPACE\n    sre_parse.CATEGORY_NOT_SPACE\n    sre_parse.CATEGORY_DIGIT\n    sre_parse.CATEGORY_NOT_DIGIT\n    sre_parse.CATEGORY_WORD\n    sre_parse.CATEGORY_NOT_WORD\n    ANY\n'''\n\n\ndef test_positive_contains():\n    cases = (\n        (r'[a-z]', 'a'),\n        (r'[a-z]*', 'a'),\n        (r'[a-z]*?', 'a'),\n        (r'[a-z]+?', 'a'),\n        (r'[a-z]', 'z'),\n        (r'(?:a|b)', 'b'),\n        (r'(/|:|[a-z])', 'g'),\n        (r'[^a-z]', '/'),\n        (r'[^a-z]', '\\n'),\n        (r'[^0]', '9'),\n        (r'[^0-2]', '3'),\n        (r'[^0123a-z]', '9'),\n        (r'\\s', '\\x20'),\n        (r'[^\\s]', 'a'),\n        (r'\\d', '1'),\n        (r'[^\\d]', 'b'),\n        (r'\\w', '_'),\n        (r'[^\\w]', '\\n'),\n        (r'\\W', '\\n'),\n        (r'[^\\W]', 'a'),\n        (r'.', 'a')\n    )\n    for case in cases:\n        regexp, char = case\n        yield check_positive_contain, regexp, char\n\n\ndef test_negative_contains():\n    cases = (\n        ('[a-z]', '1'),\n        ('[a-z]*', '2'),\n        ('[a-z]*?', '3'),\n        ('[a-z]+?', '4'),\n        ('[a-z]', '\\n'),\n        ('(?:a|b)', 'c'),\n        ('(/|:|[a-z])', '\\n'),\n        ('[^a-z]', 'a'),\n        ('[^0]', '0'),\n        ('[^0-2]', '0'),\n        ('[^0123a-z]', 'z'),\n        (r'\\s', 'a'),\n        (r'[^\\s]', '\\n'),\n        (r'\\d', 'f'),\n        (r'[^\\d]', '2'),\n        (r'\\w', '\\n'),\n        (r'[^\\w]', '_'),\n        (r'\\W', 'a'),\n        (r'[^\\W]', '\\n'),\n        (r'.', '\\n')\n    )\n    for case in cases:\n        regexp, char = case\n        yield check_negative_contain, regexp, char\n\n\ndef test_groups_names():\n    cases = (\n        ('foo', [0]),\n        ('(1)(2)(?:3)', [0, 1, 2]),\n        ('(1)((2)|(?:3))', [0, 1, 2, 3]),\n        (\"(?'pcre_7'1as)(?P<outer>(?<inner>2)|(?:3))\", [0, 1, 2, 3, 'pcre_7', 'outer', 'inner']),\n        ('/proxy/(?<proxy>.*)$', [0, 1, 'proxy'])\n    )\n    for case in cases:\n        regexp, groups = case\n        yield check_groups_names, regexp, groups\n\n\ndef test_to_string():\n    cases = (\n        (r'foo', 'foo'),\n        (r'(1)(2)(?:3)', '(1)(2)(?:3)'),\n        (r'(1)((2)|(?:3))', '(1)((?:(2)|(?:3)))'),\n        (r'\\w|1|3-5|[a-z]', '(?:[\\w]|1|3\\\\-5|[a-z])'),\n        (r'(1|(?:3)|([4-6]))', '((?:1|(?:3)|([4-6])))'),\n        (r'(1|(?:3)|(?P<aaa>[4-6]))', '((?:1|(?:3)|([4-6])))'),\n        (r'^sss', '^sss'),\n        (r'(^bb|11)$', '((?:^bb|11))$'),\n        (r'(http|https)', '(http(?:|s))'),\n        (r'1*', '1*'),\n        (r'1*?', '1*?'),\n        (r'1+', '1+'),\n    )\n    for case in cases:\n        regexp, string = case\n        yield check_to_string, regexp, string\n\n\ndef test_positive_startswith():\n    cases = (\n        (r'foo', 'q', False),\n        (r'foo', 'f', True),\n        (r'^foo', 'f', False),\n        (r'(^foo)', 'f', False),\n        (r'(^foo)', 'f', True),\n        (r'(^foo|g)', 'f', True),\n        (r'(^foo|g)', 'g', True),\n        (r'(^foo|g)', 'q', False),\n        (r'^[^/]+', '\\n', True),\n        (r'/[^/]+', '/', True),\n        (r'((a))', 'a', False),\n        (r'((a))', 'b', False),\n        (r'^[a-z]{0}0', '0', False),\n        (r'^[a-z]{1}0', 'a', False),\n    )\n    for case in cases:\n        regexp, check, strict = case\n        yield check_positive_startswith, regexp, check, strict\n\n\ndef test_negative_startswith():\n    cases = (\n        (r'foo', '\\n', False),\n        (r'foo', 'o', True),\n        (r'^foo', 'o', False),\n        (r'(^foo)', 'q', False),\n        (r'(^foo)', 'q', True),\n        (r'(^foo|g)', 'q', True),\n        (r'(^foo|g)', 'o', True),\n        (r'(^foo|g)', '\\n', False),\n        (r'^[^/]+', '/', True),\n        (r'/[^/]+', 'a', True),\n        (r'((abc)|(ss))', 'b', True),\n        (r'^[a-z]{0}0', 'a', False),\n        (r'^[a-z]{0}0', 'g', False),\n    )\n    for case in cases:\n        regexp, check, strict = case\n        yield check_negative_startswith, regexp, check, strict\n\n\ndef test_positive_must_contain():\n    cases = (\n        (r'abc', 'a'),\n        (r'abc', 'b'),\n        (r'abc', 'c'),\n        (r'3+', '3'),\n        (r'[0]', '0'),\n        (r'([0])', '0'),\n        (r'(?:[0])', '0'),\n        (r'(?:[0])|0|((((0))))', '0'),\n    )\n    for case in cases:\n        regexp, char = case\n        yield check_positive_must_contain, regexp, char\n\n\ndef test_negative_must_contain():\n    cases = (\n        (r'[a-z]', '1'),\n        (r'2{0}1', '2'),\n        (r'3?', '3'),\n        (r'3*', '3'),\n        (r'3*?', '3'),\n        (r'3+a', 'b'),\n        (r'[a-z]', 'a'),\n        (r'(?:a|b)', 'a'),\n        (r'(?:a|b)', 'b'),\n        (r'(/|:|[a-z])', '/'),\n        (r'(/|:|[a-z])', 'z'),\n        (r'[^a-z]', '\\n'),\n        (r'[^0]', '0'),\n        (r'[^0-2]', '0'),\n        (r'[^0123a-z]', 'z'),\n        (r'\\s', '\\x20'),\n        (r'[^\\s]', '\\n'),\n        (r'\\d', '3'),\n        (r'[^\\d]', 'a'),\n        (r'\\w', 'a'),\n        (r'[^\\w]', '\\n'),\n        (r'\\W', '\\n'),\n        (r'[^\\W]', 'a'),\n        (r'.', '\\n')\n    )\n    for case in cases:\n        regexp, char = case\n        yield check_negative_must_contain, regexp, char\n\n\ndef test_positive_must_startswith():\n    cases = (\n        (r'foo', 'f', True),\n        (r'^foo', 'f', False),\n        (r'(^foo)', 'f', True),\n        (r'^((a))', 'a', False),\n        (r'((a))', 'a', True),\n        (r'^[a-z]{0}0', '0', False),\n        (r'^a{1}0', 'a', False),\n    )\n    for case in cases:\n        regexp, check, strict = case\n        yield check_positive_must_startswith, regexp, check, strict\n\n\ndef test_negative_must_startswith():\n    cases = (\n        (r'foo', 'o', False),\n        (r'^foo', 'o', False),\n        (r'(^foo)', 'o', False),\n        (r'[a-z]', '1', True),\n        (r'[a-z]', 'a', True),\n        (r'/[^/]+', 'a', True),\n        (r'3?', '3', True),\n        (r'3*', '3', True),\n        (r'3*?', '3', True),\n        (r'3+a', 'b', True),\n        (r'^((a))', 'b', False),\n        (r'((a))', 'a', False),\n        (r'^a{0}0', 'a', False),\n    )\n    for case in cases:\n        regexp, check, strict = case\n        yield check_negative_must_startswith, regexp, check, strict\n\n\ndef test_generate():\n    cases = (\n        (r'foo', ['foo']),\n        (r'^sss', ['^sss']),\n        (r'(1)(2)(3)', ['123']),\n        (r'(1)((2)|(?:3))', ['12', '13']),\n        (r'(^1?2?|aa/)', ['^', '^1', '^2', '^12', 'aa/']),\n        (r'^https?://yandex.ru', ['^http://yandex|ru', '^https://yandex|ru']),\n        (r'(^bb|11)$', ['^bb$', '11$']),\n        (r'(http|https)', ['http', 'https']),\n        (r'1*', ['', '11111']),\n        (r'1*?', ['', '11111']),\n        (r'1[0]?2', ['102', '12']),\n        (r'1[0]2', ['102']),\n        (r'1+', ['11111']),\n        (r'[^/]?', ['', '|']),\n        (r'^http://(foo|bar)|baz', ['^http://foo', '^http://bar', 'baz']),\n        (r'[^\\x00-\\x7b|\\x7e-\\xff]', ['\\x7d']),\n        (r'(a|b|c)', ['a', 'b', 'c']),\n        (r'[xyz]', ['x', 'y', 'z'])\n    )\n    for case in cases:\n        regexp, values = case\n        yield check_generate, regexp, values\n\n\ndef test_strict_generate():\n    reg = Regexp('^foo|bar', strict=True)\n    assert_equals(sorted(reg.generate('|', anchored=True)), sorted(['^foo', '^bar']))\n\n\ndef test_gen_anchor():\n\n    reg = Regexp('^some$')\n    val = next(reg.generate('', anchored=False))\n    assert_equals(val, 'some')\n\n    reg = Regexp('^some$')\n    val = next(reg.generate('', anchored=True))\n    assert_equals(val, '^some$')\n\n    reg = Regexp('^some$', strict=True)\n    val = next(reg.generate('', anchored=False))\n    assert_equals(val, 'some')\n\n    reg = Regexp('^some$', strict=True)\n    val = next(reg.generate('', anchored=True))\n    assert_equals(val, '^some$')\n\n\ndef test_group_can_contains():\n    source = '/some/(?P<action>[^/:.]+)/'\n    reg = Regexp(source)\n    assert_true(reg.can_contain('\\n'),\n                'Whole regex \"{src}\" can contains {sym!r}'.format(src=source, sym='\\\\n'))\n\n    assert_true(reg.group(0).can_contain('\\n'),\n                'Group 0 from regex \"{src}\" can contains {sym!r}'.format(src=source, sym='\\\\n'))\n\n    assert_true(reg.group('action').can_contain('\\n'),\n                'Group \"action\" from regex \"{src}\" can contains {sym!r}'.format(src=source, sym='\\\\n'))\n\n    assert_true(reg.group(1).can_contain('\\n'),\n                'Group 1 from regex \"{src}\" can contains {sym!r}'.format(src=source, sym='\\\\n'))\n\n    assert_false(reg.group('action').can_contain('/'),\n                 'Group \"action\" from regex \"{src}\" CAN\\'T (!) contain {sym!r}'.format(src=source, sym='/'))\n\n\ndef check_positive_contain(regexp, char):\n    reg = Regexp(regexp, case_sensitive=True)\n    assert_true(reg.can_contain(char),\n                '{reg!r} should contain {chr!r}'.format(reg=regexp, chr=char))\n\n    reg = Regexp(regexp, case_sensitive=False)\n    char = char.upper()\n    assert_true(reg.can_contain(char),\n                '{reg!r} (case insensitive) should contain {chr!r}'.format(reg=regexp, chr=char))\n\n\ndef check_negative_contain(regexp, char):\n    reg = Regexp(regexp, case_sensitive=True)\n    assert_false(reg.can_contain(char),\n                 '{reg!r} should not contain {chr!r}'.format(reg=regexp, chr=char))\n\n    reg = Regexp(regexp, case_sensitive=False)\n    char = char.upper()\n    assert_false(reg.can_contain(char),\n                 '{reg!r} (case insensitive) should not contain {chr!r}'.format(reg=regexp, chr=char))\n\n\ndef check_positive_startswith(regexp, char, strict):\n    reg = Regexp(regexp, case_sensitive=True, strict=strict)\n    assert_true(reg.can_startswith(char),\n                '{reg!r} can start\\'s with {chr!r}'.format(reg=regexp, chr=char))\n\n    reg = Regexp(regexp, case_sensitive=False, strict=strict)\n    char = char.upper()\n    assert_true(reg.can_startswith(char),\n                '{reg!r} (case insensitive) can start\\'s with {chr!r}'.format(reg=regexp, chr=char))\n\n\ndef check_negative_startswith(regexp, char, strict):\n    reg = Regexp(regexp, case_sensitive=True, strict=strict)\n    assert_false(reg.can_startswith(char),\n                 '{reg!r} can\\'t start\\'s with {chr!r}'.format(reg=regexp, chr=char))\n\n    reg = Regexp(regexp, case_sensitive=False, strict=strict)\n    char = char.upper()\n    assert_false(reg.can_startswith(char),\n                 '{reg!r} (case insensitive) can\\'t start\\'s with {chr!r}'.format(reg=regexp, chr=char))\n\n\ndef check_groups_names(regexp, groups):\n    reg = Regexp(regexp)\n    assert_equals(set(reg.groups.keys()), set(groups))\n\n\ndef check_to_string(regexp, string):\n    reg = Regexp(regexp)\n    assert_equals(str(reg), string)\n\n\ndef check_positive_must_contain(regexp, char):\n    reg = Regexp(regexp, case_sensitive=True)\n    assert_true(reg.must_contain(char),\n                '{reg!r} must contain with {chr!r}'.format(reg=regexp, chr=char))\n\n    reg = Regexp(regexp, case_sensitive=False)\n    char = char.upper()\n    assert_true(reg.must_contain(char),\n                '{reg!r} (case insensitive) must contain with {chr!r}'.format(reg=regexp, chr=char))\n\n\ndef check_negative_must_contain(regexp, char):\n    reg = Regexp(regexp, case_sensitive=True)\n    assert_false(reg.must_contain(char),\n                 '{reg!r} must NOT contain with {chr!r}'.format(reg=regexp, chr=char))\n\n    reg = Regexp(regexp, case_sensitive=False)\n    char = char.upper()\n    assert_false(reg.must_contain(char),\n                 '{reg!r} (case insensitive) must NOT contain with {chr!r}'.format(reg=regexp, chr=char))\n\n\ndef check_positive_must_startswith(regexp, char, strict):\n    reg = Regexp(regexp, case_sensitive=True, strict=strict)\n    assert_true(reg.must_startswith(char),\n                '{reg!r} MUST start\\'s with {chr!r}'.format(reg=regexp, chr=char))\n\n    reg = Regexp(regexp, case_sensitive=False, strict=strict)\n    char = char.upper()\n    assert_true(reg.must_startswith(char),\n                '{reg!r} (case insensitive) MUST start\\'s with {chr!r}'.format(reg=regexp, chr=char))\n\n\ndef check_negative_must_startswith(regexp, char, strict):\n    reg = Regexp(regexp, case_sensitive=True, strict=strict)\n    assert_false(reg.must_startswith(char),\n                 '{reg!r} MUST NOT start\\'s with {chr!r}'.format(reg=regexp, chr=char))\n\n    reg = Regexp(regexp, case_sensitive=False, strict=strict)\n    char = char.upper()\n    assert_false(reg.must_startswith(char),\n                 '{reg!r} (case insensitive) MUST NOT start\\'s with {chr!r}'.format(reg=regexp, chr=char))\n\n\ndef check_generate(regexp, values):\n    reg = Regexp(regexp)\n    assert_equals(sorted(reg.generate('|', anchored=True)), sorted(values))\n", "description": "Nginx configuration static analyzer", "file_name": "test_regexp.py", "id": "ad876160509b4bb93c3e8e111b960d36", "language": "Python", "project_name": "gixy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/yandex-gixy/yandex-gixy-86b5e60/tests/core/test_regexp.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:01:42Z", "url": "https://github.com/yandex/gixy", "wiki": true}