{"author": "nvbn", "code": "import os\nimport pytest\nimport tarfile\nfrom thefuck.rules.dirty_untar import match, get_new_command, side_effect, \\\n                                      tar_extensions  \nfrom thefuck.types import Command\n\n\n@pytest.fixture\ndef tar_error(tmpdir):\n    def fixture(filename):\n        path = os.path.join(str(tmpdir), filename)\n\n        def reset(path):\n            os.mkdir('d')\n            with tarfile.TarFile(path, 'w') as archive:\n                for file in ('a', 'b', 'c', 'd/e'):\n                    with open(file, 'w') as f:\n                        f.write('*')\n\n                    archive.add(file)\n\n                    os.remove(file)\n\n            with tarfile.TarFile(path, 'r') as archive:\n                archive.extractall()\n\n        os.chdir(str(tmpdir))\n        reset(path)\n\n        assert set(os.listdir('.')) == {filename, 'a', 'b', 'c', 'd'}\n        assert set(os.listdir('./d')) == {'e'}\n\n    return fixture\n\n\nparametrize_extensions = pytest.mark.parametrize('ext', tar_extensions)\n\n\nparametrize_filename = pytest.mark.parametrize('filename, unquoted, quoted', [\n    ('foo{}', 'foo{}', 'foo{}'),\n    ('\"foo bar{}\"', 'foo bar{}', \"'foo bar{}'\")])\n\nparametrize_script = pytest.mark.parametrize('script, fixed', [\n    ('tar xvf {}', 'mkdir -p {dir} && tar xvf {filename} -C {dir}'),\n    ('tar -xvf {}', 'mkdir -p {dir} && tar -xvf {filename} -C {dir}'),\n    ('tar --extract -f {}', 'mkdir -p {dir} && tar --extract -f {filename} -C {dir}')])\n\n\n@parametrize_extensions\n@parametrize_filename\n@parametrize_script\ndef test_match(ext, tar_error, filename, unquoted, quoted, script, fixed):\n    tar_error(unquoted.format(ext))\n    assert match(Command(script.format(filename.format(ext)), ''))\n\n\n@parametrize_extensions\n@parametrize_filename\n@parametrize_script\ndef test_side_effect(ext, tar_error, filename, unquoted, quoted, script, fixed):\n    tar_error(unquoted.format(ext))\n    side_effect(Command(script.format(filename.format(ext)), ''), None)\n    assert set(os.listdir('.')) == {unquoted.format(ext), 'd'}\n\n\n@parametrize_extensions\n@parametrize_filename\n@parametrize_script\ndef test_get_new_command(ext, tar_error, filename, unquoted, quoted, script, fixed):\n    tar_error(unquoted.format(ext))\n    assert (get_new_command(Command(script.format(filename.format(ext)), ''))\n            == fixed.format(dir=quoted.format(''), filename=filename.format(ext)))\n", "comments": "# noqa: E126\n# (filename as typed by the user, unquoted filename, quoted filename as per shells.quote)\n", "content": "import os\nimport pytest\nimport tarfile\nfrom thefuck.rules.dirty_untar import match, get_new_command, side_effect, \\\n                                      tar_extensions  # noqa: E126\nfrom thefuck.types import Command\n\n\n@pytest.fixture\ndef tar_error(tmpdir):\n    def fixture(filename):\n        path = os.path.join(str(tmpdir), filename)\n\n        def reset(path):\n            os.mkdir('d')\n            with tarfile.TarFile(path, 'w') as archive:\n                for file in ('a', 'b', 'c', 'd/e'):\n                    with open(file, 'w') as f:\n                        f.write('*')\n\n                    archive.add(file)\n\n                    os.remove(file)\n\n            with tarfile.TarFile(path, 'r') as archive:\n                archive.extractall()\n\n        os.chdir(str(tmpdir))\n        reset(path)\n\n        assert set(os.listdir('.')) == {filename, 'a', 'b', 'c', 'd'}\n        assert set(os.listdir('./d')) == {'e'}\n\n    return fixture\n\n\nparametrize_extensions = pytest.mark.parametrize('ext', tar_extensions)\n\n# (filename as typed by the user, unquoted filename, quoted filename as per shells.quote)\nparametrize_filename = pytest.mark.parametrize('filename, unquoted, quoted', [\n    ('foo{}', 'foo{}', 'foo{}'),\n    ('\"foo bar{}\"', 'foo bar{}', \"'foo bar{}'\")])\n\nparametrize_script = pytest.mark.parametrize('script, fixed', [\n    ('tar xvf {}', 'mkdir -p {dir} && tar xvf {filename} -C {dir}'),\n    ('tar -xvf {}', 'mkdir -p {dir} && tar -xvf {filename} -C {dir}'),\n    ('tar --extract -f {}', 'mkdir -p {dir} && tar --extract -f {filename} -C {dir}')])\n\n\n@parametrize_extensions\n@parametrize_filename\n@parametrize_script\ndef test_match(ext, tar_error, filename, unquoted, quoted, script, fixed):\n    tar_error(unquoted.format(ext))\n    assert match(Command(script.format(filename.format(ext)), ''))\n\n\n@parametrize_extensions\n@parametrize_filename\n@parametrize_script\ndef test_side_effect(ext, tar_error, filename, unquoted, quoted, script, fixed):\n    tar_error(unquoted.format(ext))\n    side_effect(Command(script.format(filename.format(ext)), ''), None)\n    assert set(os.listdir('.')) == {unquoted.format(ext), 'd'}\n\n\n@parametrize_extensions\n@parametrize_filename\n@parametrize_script\ndef test_get_new_command(ext, tar_error, filename, unquoted, quoted, script, fixed):\n    tar_error(unquoted.format(ext))\n    assert (get_new_command(Command(script.format(filename.format(ext)), ''))\n            == fixed.format(dir=quoted.format(''), filename=filename.format(ext)))\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_dirty_untar.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_dirty_untar.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}