{"author": "ansible", "code": "\n Copyright: Ansible Project\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.onyx import onyx_magp\nfrom units.modules.utils import set_module_args\nfrom .onyx_module import TestOnyxModule, load_fixture\n\n\nclass TestOnyxMagpModule(TestOnyxModule):\n\n    module = onyx_magp\n\n    def setUp(self):\n        super(TestOnyxMagpModule, self).setUp()\n        self.mock_get_config = patch.object(\n            onyx_magp.OnyxMagpModule,\n            \"_get_magp_config\")\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch(\n            'ansible.module_utils.network.onyx.onyx.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestOnyxMagpModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def load_fixtures(self, commands=None, transport='cli'):\n        config_file = 'onyx_magp_show.cfg'\n        self.get_config.return_value = load_fixture(config_file)\n        self.load_config.return_value = None\n\n    def test_magp_absent_no_change(self):\n        set_module_args(dict(interface='Vlan 1002', magp_id=110,\n                             state='absent'))\n        self.execute_module(changed=False)\n\n    def test_magp_no_change(self):\n        set_module_args(dict(interface='Vlan 1200', magp_id=103,\n                             state='disabled'))\n        self.execute_module(changed=False)\n\n    def test_magp_present_no_change(self):\n        set_module_args(dict(interface='Vlan 1200', magp_id=103))\n        self.execute_module(changed=False)\n\n    def test_magp_enable(self):\n        set_module_args(dict(interface='Vlan 1200', magp_id=103,\n                             state='enabled'))\n        commands = ['interface vlan 1200 magp 103 no shutdown']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_magp_disable(self):\n        set_module_args(dict(interface='Vlan 1243', magp_id=102,\n                             state='disabled', router_ip='10.0.0.43',\n                             router_mac='01:02:03:04:05:06'))\n        commands = ['interface vlan 1243 magp 102 shutdown']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_magp_change_address(self):\n        set_module_args(dict(interface='Vlan 1243', magp_id=102,\n                             router_ip='10.0.0.44',\n                             router_mac='01:02:03:04:05:07'))\n        commands = [\n            'interface vlan 1243 magp 102 ip virtual-router address 10.0.0.44',\n            'interface vlan 1243 magp 102 ip virtual-router mac-address 01:02:03:04:05:07']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_magp_remove_address(self):\n        set_module_args(dict(interface='Vlan 1243', magp_id=102))\n        commands = [\n            'interface vlan 1243 magp 102 no ip virtual-router address',\n            'interface vlan 1243 magp 102 no ip virtual-router mac-address']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_magp_add(self):\n        set_module_args(dict(interface='Vlan 1244', magp_id=104,\n                             router_ip='10.0.0.44',\n                             router_mac='01:02:03:04:05:07'))\n        commands = [\n            'interface vlan 1244 magp 104',\n            'exit',\n            'interface vlan 1244 magp 104 ip virtual-router address 10.0.0.44',\n            'interface vlan 1244 magp 104 ip virtual-router mac-address 01:02:03:04:05:07']\n        self.execute_module(changed=True, commands=commands, sort=False)\n\n    def test_magp_change_vlan(self):\n        set_module_args(dict(interface='Vlan 1244', magp_id=102,\n                             router_ip='10.0.0.43',\n                             router_mac='01:02:03:04:05:06'))\n        commands = [\n            'interface vlan 1243 no magp 102',\n            'interface vlan 1244 magp 102',\n            'exit',\n            'interface vlan 1244 magp 102 ip virtual-router address 10.0.0.43',\n            'interface vlan 1244 magp 102 ip virtual-router mac-address 01:02:03:04:05:06']\n        self.execute_module(changed=True, commands=commands)\n", "comments": "     copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    make coding python3 ish ", "content": "#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.onyx import onyx_magp\nfrom units.modules.utils import set_module_args\nfrom .onyx_module import TestOnyxModule, load_fixture\n\n\nclass TestOnyxMagpModule(TestOnyxModule):\n\n    module = onyx_magp\n\n    def setUp(self):\n        super(TestOnyxMagpModule, self).setUp()\n        self.mock_get_config = patch.object(\n            onyx_magp.OnyxMagpModule,\n            \"_get_magp_config\")\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch(\n            'ansible.module_utils.network.onyx.onyx.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestOnyxMagpModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def load_fixtures(self, commands=None, transport='cli'):\n        config_file = 'onyx_magp_show.cfg'\n        self.get_config.return_value = load_fixture(config_file)\n        self.load_config.return_value = None\n\n    def test_magp_absent_no_change(self):\n        set_module_args(dict(interface='Vlan 1002', magp_id=110,\n                             state='absent'))\n        self.execute_module(changed=False)\n\n    def test_magp_no_change(self):\n        set_module_args(dict(interface='Vlan 1200', magp_id=103,\n                             state='disabled'))\n        self.execute_module(changed=False)\n\n    def test_magp_present_no_change(self):\n        set_module_args(dict(interface='Vlan 1200', magp_id=103))\n        self.execute_module(changed=False)\n\n    def test_magp_enable(self):\n        set_module_args(dict(interface='Vlan 1200', magp_id=103,\n                             state='enabled'))\n        commands = ['interface vlan 1200 magp 103 no shutdown']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_magp_disable(self):\n        set_module_args(dict(interface='Vlan 1243', magp_id=102,\n                             state='disabled', router_ip='10.0.0.43',\n                             router_mac='01:02:03:04:05:06'))\n        commands = ['interface vlan 1243 magp 102 shutdown']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_magp_change_address(self):\n        set_module_args(dict(interface='Vlan 1243', magp_id=102,\n                             router_ip='10.0.0.44',\n                             router_mac='01:02:03:04:05:07'))\n        commands = [\n            'interface vlan 1243 magp 102 ip virtual-router address 10.0.0.44',\n            'interface vlan 1243 magp 102 ip virtual-router mac-address 01:02:03:04:05:07']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_magp_remove_address(self):\n        set_module_args(dict(interface='Vlan 1243', magp_id=102))\n        commands = [\n            'interface vlan 1243 magp 102 no ip virtual-router address',\n            'interface vlan 1243 magp 102 no ip virtual-router mac-address']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_magp_add(self):\n        set_module_args(dict(interface='Vlan 1244', magp_id=104,\n                             router_ip='10.0.0.44',\n                             router_mac='01:02:03:04:05:07'))\n        commands = [\n            'interface vlan 1244 magp 104',\n            'exit',\n            'interface vlan 1244 magp 104 ip virtual-router address 10.0.0.44',\n            'interface vlan 1244 magp 104 ip virtual-router mac-address 01:02:03:04:05:07']\n        self.execute_module(changed=True, commands=commands, sort=False)\n\n    def test_magp_change_vlan(self):\n        set_module_args(dict(interface='Vlan 1244', magp_id=102,\n                             router_ip='10.0.0.43',\n                             router_mac='01:02:03:04:05:06'))\n        commands = [\n            'interface vlan 1243 no magp 102',\n            'interface vlan 1244 magp 102',\n            'exit',\n            'interface vlan 1244 magp 102 ip virtual-router address 10.0.0.43',\n            'interface vlan 1244 magp 102 ip virtual-router mac-address 01:02:03:04:05:06']\n        self.execute_module(changed=True, commands=commands)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_onyx_magp.py", "id": "888f79591521d8266a530b522c749d06", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/onyx/test_onyx_magp.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}