{"author": "mitmproxy", "code": "\nfrom mitmproxy.tools.console.commander import commander\nfrom mitmproxy.test import taddons\n\n\nclass TestListCompleter:\n    def test_cycle(self):\n        tests = [\n            [\n                \"\",\n                [\"a\", \"b\", \"c\"],\n                [\"a\", \"b\", \"c\", \"a\"]\n            ],\n            [\n                \"xxx\",\n                [\"a\", \"b\", \"c\"],\n                [\"xxx\", \"xxx\", \"xxx\"]\n            ],\n            [\n                \"b\",\n                [\"a\", \"b\", \"ba\", \"bb\", \"c\"],\n                [\"b\", \"ba\", \"bb\", \"b\"]\n            ],\n        ]\n        for start, options, cycle in tests:\n            c = commander.ListCompleter(start, options)\n            for expected in cycle:\n                assert c.cycle() == expected\n\n\nclass TestCommandBuffer:\n\n    def test_backspace(self):\n        tests = [\n            [(\"\", 0), (\"\", 0)],\n            [(\"1\", 0), (\"1\", 0)],\n            [(\"1\", 1), (\"\", 0)],\n            [(\"123\", 3), (\"12\", 2)],\n            [(\"123\", 2), (\"13\", 1)],\n            [(\"123\", 0), (\"123\", 0)],\n        ]\n        with taddons.context() as tctx:\n            for start, output in tests:\n                cb = commander.CommandBuffer(tctx.master)\n                cb.text, cb.cursor = start[0], start[1]\n                cb.backspace()\n                assert cb.text == output[0]\n                assert cb.cursor == output[1]\n\n    def test_left(self):\n        cursors = [3, 2, 1, 0, 0]\n        with taddons.context() as tctx:\n            cb = commander.CommandBuffer(tctx.master)\n            cb.text, cb.cursor = \"abcd\", 4\n            for c in cursors:\n                cb.left()\n                assert cb.cursor == c\n\n    def test_right(self):\n        cursors = [1, 2, 3, 4, 4]\n        with taddons.context() as tctx:\n            cb = commander.CommandBuffer(tctx.master)\n            cb.text, cb.cursor = \"abcd\", 0\n            for c in cursors:\n                cb.right()\n                assert cb.cursor == c\n\n    def test_insert(self):\n        tests = [\n            [(\"\", 0), (\"x\", 1)],\n            [(\"a\", 0), (\"xa\", 1)],\n            [(\"xa\", 2), (\"xax\", 3)],\n        ]\n        with taddons.context() as tctx:\n            for start, output in tests:\n                cb = commander.CommandBuffer(tctx.master)\n                cb.text, cb.cursor = start[0], start[1]\n                cb.insert(\"x\")\n                assert cb.text == output[0]\n                assert cb.cursor == output[1]\n\n    def test_cycle_completion(self):\n        with taddons.context() as tctx:\n            cb = commander.CommandBuffer(tctx.master)\n            cb.text = \"foo bar\"\n            cb.cursor = len(cb.text)\n            cb.cycle_completion()\n\n    def test_render(self):\n        with taddons.context() as tctx:\n            cb = commander.CommandBuffer(tctx.master)\n            cb.text = \"foo\"\n            assert cb.render()\n\n    def test_flatten(self):\n        with taddons.context() as tctx:\n            cb = commander.CommandBuffer(tctx.master)\n            assert cb.flatten(\"foo  bar\") == \"foo bar\"\n", "comments": "", "content": "\nfrom mitmproxy.tools.console.commander import commander\nfrom mitmproxy.test import taddons\n\n\nclass TestListCompleter:\n    def test_cycle(self):\n        tests = [\n            [\n                \"\",\n                [\"a\", \"b\", \"c\"],\n                [\"a\", \"b\", \"c\", \"a\"]\n            ],\n            [\n                \"xxx\",\n                [\"a\", \"b\", \"c\"],\n                [\"xxx\", \"xxx\", \"xxx\"]\n            ],\n            [\n                \"b\",\n                [\"a\", \"b\", \"ba\", \"bb\", \"c\"],\n                [\"b\", \"ba\", \"bb\", \"b\"]\n            ],\n        ]\n        for start, options, cycle in tests:\n            c = commander.ListCompleter(start, options)\n            for expected in cycle:\n                assert c.cycle() == expected\n\n\nclass TestCommandBuffer:\n\n    def test_backspace(self):\n        tests = [\n            [(\"\", 0), (\"\", 0)],\n            [(\"1\", 0), (\"1\", 0)],\n            [(\"1\", 1), (\"\", 0)],\n            [(\"123\", 3), (\"12\", 2)],\n            [(\"123\", 2), (\"13\", 1)],\n            [(\"123\", 0), (\"123\", 0)],\n        ]\n        with taddons.context() as tctx:\n            for start, output in tests:\n                cb = commander.CommandBuffer(tctx.master)\n                cb.text, cb.cursor = start[0], start[1]\n                cb.backspace()\n                assert cb.text == output[0]\n                assert cb.cursor == output[1]\n\n    def test_left(self):\n        cursors = [3, 2, 1, 0, 0]\n        with taddons.context() as tctx:\n            cb = commander.CommandBuffer(tctx.master)\n            cb.text, cb.cursor = \"abcd\", 4\n            for c in cursors:\n                cb.left()\n                assert cb.cursor == c\n\n    def test_right(self):\n        cursors = [1, 2, 3, 4, 4]\n        with taddons.context() as tctx:\n            cb = commander.CommandBuffer(tctx.master)\n            cb.text, cb.cursor = \"abcd\", 0\n            for c in cursors:\n                cb.right()\n                assert cb.cursor == c\n\n    def test_insert(self):\n        tests = [\n            [(\"\", 0), (\"x\", 1)],\n            [(\"a\", 0), (\"xa\", 1)],\n            [(\"xa\", 2), (\"xax\", 3)],\n        ]\n        with taddons.context() as tctx:\n            for start, output in tests:\n                cb = commander.CommandBuffer(tctx.master)\n                cb.text, cb.cursor = start[0], start[1]\n                cb.insert(\"x\")\n                assert cb.text == output[0]\n                assert cb.cursor == output[1]\n\n    def test_cycle_completion(self):\n        with taddons.context() as tctx:\n            cb = commander.CommandBuffer(tctx.master)\n            cb.text = \"foo bar\"\n            cb.cursor = len(cb.text)\n            cb.cycle_completion()\n\n    def test_render(self):\n        with taddons.context() as tctx:\n            cb = commander.CommandBuffer(tctx.master)\n            cb.text = \"foo\"\n            assert cb.render()\n\n    def test_flatten(self):\n        with taddons.context() as tctx:\n            cb = commander.CommandBuffer(tctx.master)\n            assert cb.flatten(\"foo  bar\") == \"foo bar\"\n", "description": "An interactive TLS-capable intercepting HTTP proxy for penetration testers and software developers.", "file_name": "test_commander.py", "id": "1f3cd6b664d32b2310c042a9a254df1b", "language": "Python", "project_name": "mitmproxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mitmproxy-mitmproxy/mitmproxy-mitmproxy-3c7725a/test/mitmproxy/tools/console/test_commander.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:30:56Z", "url": "https://github.com/mitmproxy/mitmproxy", "wiki": false}