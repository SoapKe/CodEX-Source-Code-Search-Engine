{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    determine_ext,\n    dict_get,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    try_get,\n    unified_strdate,\n)\n\n\nclass XHamsterIE(InfoExtractor):\n    _VALID_URL = r],\n            webpage, 'thumbnail', fatal=False, group='thumbnail')\n\n        duration = parse_duration(self._search_regex(\n            [r'<[^<]+\\bitemprop=[\"\\']duration[\"\\'][^<]+\\bcontent=[\"\\'](.+?)[\"\\']',\n             r'Runtime:\\s*</span>\\s*([\\d:]+)'], webpage,\n            'duration', fatal=False))\n\n        view_count = int_or_none(self._search_regex(\n            r'content=[\"\\']User(?:View|Play)s:(\\d+)',\n            webpage, 'view count', fatal=False))\n\n        mobj = re.search(r'hint=[\\'\"](?P<likecount>\\d+) Likes / (?P<dislikecount>\\d+) Dislikes', webpage)\n        (like_count, dislike_count) = (mobj.group('likecount'), mobj.group('dislikecount')) if mobj else (None, None)\n\n        mobj = re.search(r'</label>Comments \\((?P<commentcount>\\d+)\\)</div>', webpage)\n        comment_count = mobj.group('commentcount') if mobj else 0\n\n        categories_html = self._search_regex(\n            r'(?s)<table.+?(<span>Categories:.+?)</table>', webpage,\n            'categories', default=None)\n        categories = [clean_html(category) for category in re.findall(\n            r'<a[^>]+>(.+?)</a>', categories_html)] if categories_html else None\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'upload_date': upload_date,\n            'uploader': uploader,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'view_count': view_count,\n            'like_count': int_or_none(like_count),\n            'dislike_count': int_or_none(dislike_count),\n            'comment_count': int_or_none(comment_count),\n            'age_limit': age_limit,\n            'categories': categories,\n            'formats': formats,\n        }\n\n\nclass XHamsterEmbedIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:.+?\\.)?xhamster\\.com/xembed\\.php\\?video=(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://xhamster.com/xembed.php?video=3328539',\n        'info_dict': {\n            'id': '3328539',\n            'ext': 'mp4',\n            'title': 'Pen Masturbation',\n            'timestamp': 1406581861,\n            'upload_date': '20140728',\n            'uploader': 'ManyakisArt',\n            'duration': 5,\n            'age_limit': 18,\n        }\n    }\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [url for _, url in re.findall(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?xhamster\\.com/xembed\\.php\\?video=\\d+)\\1',\n            webpage)]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_url = self._search_regex(\n            r'href=\"(https?://xhamster\\.com/(?:movies/{0}/[^\"]*\\.html|videos/[^/]*-{0})[^\"]*)\"'.format(video_id),\n            webpage, 'xhamster url', default=None)\n\n        if not video_url:\n            vars = self._parse_json(\n                self._search_regex(r'vars\\s*:\\s*({.+?})\\s*,\\s*\\n', webpage, 'vars'),\n                video_id)\n            video_url = dict_get(vars, ('downloadLink', 'homepageLink', 'commentsLink', 'shareUrl'))\n\n        return self.url_result(video_url, 'XHamster')\n", "comments": "(?x)\n                    https?://\n                        (?:.+?\\.)?xhamster\\.com/\n                        (?:\n                            movies/(?P<id>\\d+)/(?P<display_id>[^/]*)\\.html|\n                            videos/(?P<display_id_2>[^/]*)-(?P<id_2>\\d+)\n                        )\n                    '''\n\n    _TESTS = [{\n        'url': 'http://xhamster.com/movies/1509445/femaleagent_shy_beauty_takes_the_bait.html',\n        'md5': '8281348b8d3c53d39fffb377d24eac4e',\n        'info_dict': {\n            'id': '1509445',\n            'display_id': 'femaleagent_shy_beauty_takes_the_bait',\n            'ext': 'mp4',\n            'title': 'FemaleAgent Shy beauty takes the bait',\n            'timestamp': 1350194821,\n            'upload_date': '20121014',\n            'uploader': 'Ruseful2011',\n            'duration': 893,\n            'age_limit': 18,\n            'categories': ['Fake Hub', 'Amateur', 'MILFs', 'POV', 'Beauti', 'Beauties', 'Beautiful', 'Boss', 'Office', 'Oral', 'Reality', 'Sexy', 'Taking'],\n        },\n    }, {\n        'url': 'http://xhamster.com/movies/2221348/britney_spears_sexy_booty.html?hd',\n        'info_dict': {\n            'id': '2221348',\n            'display_id': 'britney_spears_sexy_booty',\n            'ext': 'mp4',\n            'title': 'Britney Spears  Sexy Booty',\n            'timestamp': 1379123460,\n            'upload_date': '20130914',\n            'uploader': 'jojo747400',\n            'duration': 200,\n            'age_limit': 18,\n            'categories': ['Britney Spears', 'Celebrities', 'HD Videos', 'Sexy', 'Sexy Booty'],\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # empty seo\n        'url': 'http://xhamster.com/movies/5667973/.html',\n        'info_dict': {\n            'id': '5667973',\n            'ext': 'mp4',\n            'title': '....',\n            'timestamp': 1454948101,\n            'upload_date': '20160208',\n            'uploader': 'parejafree',\n            'duration': 72,\n            'age_limit': 18,\n            'categories': ['Amateur', 'Blowjobs'],\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # mobile site\n        'url': 'https://m.xhamster.com/videos/cute-teen-jacqueline-solo-masturbation-8559111',\n        'only_matching': True,\n    }, {\n        'url': 'https://xhamster.com/movies/2272726/amber_slayed_by_the_knight.html',\n        'only_matching': True,\n    }, {\n        # This video is visible for marcoalfa123456's friends only\n        'url': 'https://it.xhamster.com/movies/7263980/la_mia_vicina.html',\n        'only_matching': True,\n    }, {\n        # new URL schema\n        'url': 'https://pt.xhamster.com/videos/euro-pedal-pumping-7937821',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id') or mobj.group('id_2')\n        display_id = mobj.group('display_id') or mobj.group('display_id_2')\n\n        desktop_url = re.sub(r'^(https?://(?:.+?\\.)?)m\\.', r'\\1', url)\n        webpage = self._download_webpage(desktop_url, video_id)\n\n        error = self._html_search_regex(\n            r'<div[^>]+id=[\"\\']videoClosed[\"\\'][^>]*>(.+?)</div>',\n            webpage, 'error', default=None)\n        if error:\n            raise ExtractorError(error, expected=True)\n\n        age_limit = self._rta_search(webpage)\n\n        def get_height(s):\n            return int_or_none(self._search_regex(\n                r'^(\\d+)[pP]', s, 'height', default=None))\n\n        initials = self._parse_json(\n            self._search_regex(\n                r'window\\.initials\\s*=\\s*({.+?})\\s*;\\s*\\n', webpage, 'initials',\n                default='{}'),\n            video_id, fatal=False)\n        if initials:\n            video = initials['videoModel']\n            title = video['title']\n            formats = []\n            for format_id, formats_dict in video['sources'].items():\n                if not isinstance(formats_dict, dict):\n                    continue\n                for quality, format_item in formats_dict.items():\n                    if format_id == 'download':\n                        # Download link takes some time to be generated,\n                        # skipping for now\n                        continue\n                        if not isinstance(format_item, dict):\n                            continue\n                        format_url = format_item.get('link')\n                        filesize = int_or_none(\n                            format_item.get('size'), invscale=1000000)\n                    else:\n                        format_url = format_item\n                        filesize = None\n                    if not isinstance(format_url, compat_str):\n                        continue\n                    formats.append({\n                        'format_id': '%s-%s' % (format_id, quality),\n                        'url': format_url,\n                        'ext': determine_ext(format_url, 'mp4'),\n                        'height': get_height(quality),\n                        'filesize': filesize,\n                    })\n            self._sort_formats(formats)\n\n            categories_list = video.get('categories')\n            if isinstance(categories_list, list):\n                categories = []\n                for c in categories_list:\n                    if not isinstance(c, dict):\n                        continue\n                    c_name = c.get('name')\n                    if isinstance(c_name, compat_str):\n                        categories.append(c_name)\n            else:\n                categories = None\n\n            return {\n                'id': video_id,\n                'display_id': display_id,\n                'title': title,\n                'description': video.get('description'),\n                'timestamp': int_or_none(video.get('created')),\n                'uploader': try_get(\n                    video, lambda x: x['author']['name'], compat_str),\n                'thumbnail': video.get('thumbURL'),\n                'duration': int_or_none(video.get('duration')),\n                'view_count': int_or_none(video.get('views')),\n                'like_count': int_or_none(try_get(\n                    video, lambda x: x['rating']['likes'], int)),\n                'dislike_count': int_or_none(try_get(\n                    video, lambda x: x['rating']['dislikes'], int)),\n                'comment_count': int_or_none(video.get('views')),\n                'age_limit': age_limit,\n                'categories': categories,\n                'formats': formats,\n            }\n\n        # Old layout fallback\n\n        title = self._html_search_regex(\n            [r'<h1[^>]*>([^<]+)</h1>',\n             r'<meta[^>]+itemprop=\".*?caption.*?\"[^>]+content=\"(.+?)\"',\n             r'<title[^>]*>(.+?)(?:,\\s*[^,]*?\\s*Porn\\s*[^,]*?:\\s*xHamster[^<]*| - xHamster\\.com)</title>'],\n            webpage, 'title')\n\n        formats = []\n        format_urls = set()\n\n        sources = self._parse_json(\n            self._search_regex(\n                r'sources\\s*:\\s*({.+?})\\s*,?\\s*\\n', webpage, 'sources',\n                default='{}'),\n            video_id, fatal=False)\n        for format_id, format_url in sources.items():\n            if not isinstance(format_url, compat_str):\n                continue\n            if format_url in format_urls:\n                continue\n            format_urls.add(format_url)\n            formats.append({\n                'format_id': format_id,\n                'url': format_url,\n                'height': get_height(format_id),\n            })\n\n        video_url = self._search_regex(\n            [r'''file\\s*:\\s*(?P<q>[\"'])(?P<mp4>.+?)(?P=q)''',\n             r'''<a\\s+href=(?P<q>[\"'])(?P<mp4>.+?)(?P=q)\\s+class=[\"']mp4Thumb''',\n             r'''<video[^>]+file=(?P<q>[\"'])(?P<mp4>.+?)(?P=q)[^>]*>'''],\n            webpage, 'video url', group='mp4', default=None)\n        if video_url and video_url not in format_urls:\n            formats.append({\n                'url': video_url,\n            })\n\n        self._sort_formats(formats)\n\n        # Only a few videos have an description\n        mobj = re.search(r'<span>Description: </span>([^<]+)', webpage)\n        description = mobj.group(1) if mobj else None\n\n        upload_date = unified_strdate(self._search_regex(\n            r'hint=[\"\\'](\\d{4}-\\d{2}-\\d{2}) \\d{2}:\\d{2}:\\d{2} [A-Z]{3,4}',\n            webpage, 'upload date', fatal=False))\n\n        uploader = self._html_search_regex(\n            r'<span[^>]+itemprop=[\"\\']author[^>]+><a[^>]+><span[^>]+>([^<]+)',\n            webpage, 'uploader', default='anonymous')\n\n        thumbnail = self._search_regex(\n            [r'''[\"']thumbUrl[\"']\\s*:\\s*(?P<q>[\"'])(?P<thumbnail>.+?)(?P=q)''',\n             r'''<video[^>]+\"poster\"=(?P<q>[\"'])(?P<thumbnail>.+?)(?P=q)[^>]*>\n>\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    determine_ext,\n    dict_get,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    try_get,\n    unified_strdate,\n)\n\n\nclass XHamsterIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:.+?\\.)?xhamster\\.com/\n                        (?:\n                            movies/(?P<id>\\d+)/(?P<display_id>[^/]*)\\.html|\n                            videos/(?P<display_id_2>[^/]*)-(?P<id_2>\\d+)\n                        )\n                    '''\n\n    _TESTS = [{\n        'url': 'http://xhamster.com/movies/1509445/femaleagent_shy_beauty_takes_the_bait.html',\n        'md5': '8281348b8d3c53d39fffb377d24eac4e',\n        'info_dict': {\n            'id': '1509445',\n            'display_id': 'femaleagent_shy_beauty_takes_the_bait',\n            'ext': 'mp4',\n            'title': 'FemaleAgent Shy beauty takes the bait',\n            'timestamp': 1350194821,\n            'upload_date': '20121014',\n            'uploader': 'Ruseful2011',\n            'duration': 893,\n            'age_limit': 18,\n            'categories': ['Fake Hub', 'Amateur', 'MILFs', 'POV', 'Beauti', 'Beauties', 'Beautiful', 'Boss', 'Office', 'Oral', 'Reality', 'Sexy', 'Taking'],\n        },\n    }, {\n        'url': 'http://xhamster.com/movies/2221348/britney_spears_sexy_booty.html?hd',\n        'info_dict': {\n            'id': '2221348',\n            'display_id': 'britney_spears_sexy_booty',\n            'ext': 'mp4',\n            'title': 'Britney Spears  Sexy Booty',\n            'timestamp': 1379123460,\n            'upload_date': '20130914',\n            'uploader': 'jojo747400',\n            'duration': 200,\n            'age_limit': 18,\n            'categories': ['Britney Spears', 'Celebrities', 'HD Videos', 'Sexy', 'Sexy Booty'],\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # empty seo\n        'url': 'http://xhamster.com/movies/5667973/.html',\n        'info_dict': {\n            'id': '5667973',\n            'ext': 'mp4',\n            'title': '....',\n            'timestamp': 1454948101,\n            'upload_date': '20160208',\n            'uploader': 'parejafree',\n            'duration': 72,\n            'age_limit': 18,\n            'categories': ['Amateur', 'Blowjobs'],\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # mobile site\n        'url': 'https://m.xhamster.com/videos/cute-teen-jacqueline-solo-masturbation-8559111',\n        'only_matching': True,\n    }, {\n        'url': 'https://xhamster.com/movies/2272726/amber_slayed_by_the_knight.html',\n        'only_matching': True,\n    }, {\n        # This video is visible for marcoalfa123456's friends only\n        'url': 'https://it.xhamster.com/movies/7263980/la_mia_vicina.html',\n        'only_matching': True,\n    }, {\n        # new URL schema\n        'url': 'https://pt.xhamster.com/videos/euro-pedal-pumping-7937821',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id') or mobj.group('id_2')\n        display_id = mobj.group('display_id') or mobj.group('display_id_2')\n\n        desktop_url = re.sub(r'^(https?://(?:.+?\\.)?)m\\.', r'\\1', url)\n        webpage = self._download_webpage(desktop_url, video_id)\n\n        error = self._html_search_regex(\n            r'<div[^>]+id=[\"\\']videoClosed[\"\\'][^>]*>(.+?)</div>',\n            webpage, 'error', default=None)\n        if error:\n            raise ExtractorError(error, expected=True)\n\n        age_limit = self._rta_search(webpage)\n\n        def get_height(s):\n            return int_or_none(self._search_regex(\n                r'^(\\d+)[pP]', s, 'height', default=None))\n\n        initials = self._parse_json(\n            self._search_regex(\n                r'window\\.initials\\s*=\\s*({.+?})\\s*;\\s*\\n', webpage, 'initials',\n                default='{}'),\n            video_id, fatal=False)\n        if initials:\n            video = initials['videoModel']\n            title = video['title']\n            formats = []\n            for format_id, formats_dict in video['sources'].items():\n                if not isinstance(formats_dict, dict):\n                    continue\n                for quality, format_item in formats_dict.items():\n                    if format_id == 'download':\n                        # Download link takes some time to be generated,\n                        # skipping for now\n                        continue\n                        if not isinstance(format_item, dict):\n                            continue\n                        format_url = format_item.get('link')\n                        filesize = int_or_none(\n                            format_item.get('size'), invscale=1000000)\n                    else:\n                        format_url = format_item\n                        filesize = None\n                    if not isinstance(format_url, compat_str):\n                        continue\n                    formats.append({\n                        'format_id': '%s-%s' % (format_id, quality),\n                        'url': format_url,\n                        'ext': determine_ext(format_url, 'mp4'),\n                        'height': get_height(quality),\n                        'filesize': filesize,\n                    })\n            self._sort_formats(formats)\n\n            categories_list = video.get('categories')\n            if isinstance(categories_list, list):\n                categories = []\n                for c in categories_list:\n                    if not isinstance(c, dict):\n                        continue\n                    c_name = c.get('name')\n                    if isinstance(c_name, compat_str):\n                        categories.append(c_name)\n            else:\n                categories = None\n\n            return {\n                'id': video_id,\n                'display_id': display_id,\n                'title': title,\n                'description': video.get('description'),\n                'timestamp': int_or_none(video.get('created')),\n                'uploader': try_get(\n                    video, lambda x: x['author']['name'], compat_str),\n                'thumbnail': video.get('thumbURL'),\n                'duration': int_or_none(video.get('duration')),\n                'view_count': int_or_none(video.get('views')),\n                'like_count': int_or_none(try_get(\n                    video, lambda x: x['rating']['likes'], int)),\n                'dislike_count': int_or_none(try_get(\n                    video, lambda x: x['rating']['dislikes'], int)),\n                'comment_count': int_or_none(video.get('views')),\n                'age_limit': age_limit,\n                'categories': categories,\n                'formats': formats,\n            }\n\n        # Old layout fallback\n\n        title = self._html_search_regex(\n            [r'<h1[^>]*>([^<]+)</h1>',\n             r'<meta[^>]+itemprop=\".*?caption.*?\"[^>]+content=\"(.+?)\"',\n             r'<title[^>]*>(.+?)(?:,\\s*[^,]*?\\s*Porn\\s*[^,]*?:\\s*xHamster[^<]*| - xHamster\\.com)</title>'],\n            webpage, 'title')\n\n        formats = []\n        format_urls = set()\n\n        sources = self._parse_json(\n            self._search_regex(\n                r'sources\\s*:\\s*({.+?})\\s*,?\\s*\\n', webpage, 'sources',\n                default='{}'),\n            video_id, fatal=False)\n        for format_id, format_url in sources.items():\n            if not isinstance(format_url, compat_str):\n                continue\n            if format_url in format_urls:\n                continue\n            format_urls.add(format_url)\n            formats.append({\n                'format_id': format_id,\n                'url': format_url,\n                'height': get_height(format_id),\n            })\n\n        video_url = self._search_regex(\n            [r'''file\\s*:\\s*(?P<q>[\"'])(?P<mp4>.+?)(?P=q)''',\n             r'''<a\\s+href=(?P<q>[\"'])(?P<mp4>.+?)(?P=q)\\s+class=[\"']mp4Thumb''',\n             r'''<video[^>]+file=(?P<q>[\"'])(?P<mp4>.+?)(?P=q)[^>]*>'''],\n            webpage, 'video url', group='mp4', default=None)\n        if video_url and video_url not in format_urls:\n            formats.append({\n                'url': video_url,\n            })\n\n        self._sort_formats(formats)\n\n        # Only a few videos have an description\n        mobj = re.search(r'<span>Description: </span>([^<]+)', webpage)\n        description = mobj.group(1) if mobj else None\n\n        upload_date = unified_strdate(self._search_regex(\n            r'hint=[\"\\'](\\d{4}-\\d{2}-\\d{2}) \\d{2}:\\d{2}:\\d{2} [A-Z]{3,4}',\n            webpage, 'upload date', fatal=False))\n\n        uploader = self._html_search_regex(\n            r'<span[^>]+itemprop=[\"\\']author[^>]+><a[^>]+><span[^>]+>([^<]+)',\n            webpage, 'uploader', default='anonymous')\n\n        thumbnail = self._search_regex(\n            [r'''[\"']thumbUrl[\"']\\s*:\\s*(?P<q>[\"'])(?P<thumbnail>.+?)(?P=q)''',\n             r'''<video[^>]+\"poster\"=(?P<q>[\"'])(?P<thumbnail>.+?)(?P=q)[^>]*>'''],\n            webpage, 'thumbnail', fatal=False, group='thumbnail')\n\n        duration = parse_duration(self._search_regex(\n            [r'<[^<]+\\bitemprop=[\"\\']duration[\"\\'][^<]+\\bcontent=[\"\\'](.+?)[\"\\']',\n             r'Runtime:\\s*</span>\\s*([\\d:]+)'], webpage,\n            'duration', fatal=False))\n\n        view_count = int_or_none(self._search_regex(\n            r'content=[\"\\']User(?:View|Play)s:(\\d+)',\n            webpage, 'view count', fatal=False))\n\n        mobj = re.search(r'hint=[\\'\"](?P<likecount>\\d+) Likes / (?P<dislikecount>\\d+) Dislikes', webpage)\n        (like_count, dislike_count) = (mobj.group('likecount'), mobj.group('dislikecount')) if mobj else (None, None)\n\n        mobj = re.search(r'</label>Comments \\((?P<commentcount>\\d+)\\)</div>', webpage)\n        comment_count = mobj.group('commentcount') if mobj else 0\n\n        categories_html = self._search_regex(\n            r'(?s)<table.+?(<span>Categories:.+?)</table>', webpage,\n            'categories', default=None)\n        categories = [clean_html(category) for category in re.findall(\n            r'<a[^>]+>(.+?)</a>', categories_html)] if categories_html else None\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'upload_date': upload_date,\n            'uploader': uploader,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'view_count': view_count,\n            'like_count': int_or_none(like_count),\n            'dislike_count': int_or_none(dislike_count),\n            'comment_count': int_or_none(comment_count),\n            'age_limit': age_limit,\n            'categories': categories,\n            'formats': formats,\n        }\n\n\nclass XHamsterEmbedIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:.+?\\.)?xhamster\\.com/xembed\\.php\\?video=(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://xhamster.com/xembed.php?video=3328539',\n        'info_dict': {\n            'id': '3328539',\n            'ext': 'mp4',\n            'title': 'Pen Masturbation',\n            'timestamp': 1406581861,\n            'upload_date': '20140728',\n            'uploader': 'ManyakisArt',\n            'duration': 5,\n            'age_limit': 18,\n        }\n    }\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [url for _, url in re.findall(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?xhamster\\.com/xembed\\.php\\?video=\\d+)\\1',\n            webpage)]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_url = self._search_regex(\n            r'href=\"(https?://xhamster\\.com/(?:movies/{0}/[^\"]*\\.html|videos/[^/]*-{0})[^\"]*)\"'.format(video_id),\n            webpage, 'xhamster url', default=None)\n\n        if not video_url:\n            vars = self._parse_json(\n                self._search_regex(r'vars\\s*:\\s*({.+?})\\s*,\\s*\\n', webpage, 'vars'),\n                video_id)\n            video_url = dict_get(vars, ('downloadLink', 'homepageLink', 'commentsLink', 'shareUrl'))\n\n        return self.url_result(video_url, 'XHamster')\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "xhamster.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/xhamster.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}