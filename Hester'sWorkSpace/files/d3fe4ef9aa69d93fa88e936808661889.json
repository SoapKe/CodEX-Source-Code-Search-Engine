{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_vlan import ApiParameters\n    from library.bigip_vlan import ModuleParameters\n    from library.bigip_vlan import ModuleManager\n    from library.bigip_vlan import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_vlan import ApiParameters\n        from ansible.modules.network.f5.bigip_vlan import ModuleParameters\n        from ansible.modules.network.f5.bigip_vlan import ModuleManager\n        from ansible.modules.network.f5.bigip_vlan import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass BigIpObj(object):\n    def __init__(self, **kwargs):\n        self.__dict__.update(kwargs)\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            name='somevlan',\n            tag=213,\n            description='fakevlan',\n            untagged_interfaces=['1.1'],\n        )\n        p = ModuleParameters(params=args)\n\n        assert p.name == 'somevlan'\n        assert p.tag == 213\n        assert p.description == 'fakevlan'\n        assert p.untagged_interfaces == ['1.1']\n\n    def test_api_parameters(self):\n        args = dict(\n            name='somevlan',\n            description='fakevlan',\n            tag=213\n        )\n\n        p = ApiParameters(params=args)\n\n        assert p.name == 'somevlan'\n        assert p.tag == 213\n        assert p.description == 'fakevlan'\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_vlan(self, *args):\n        set_module_args(dict(\n            name='somevlan',\n            description='fakevlan',\n            server='localhost',\n            password='password',\n            user='admin',\n            partition='Common'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['description'] == 'fakevlan'\n\n    def test_create_vlan_tagged_interface(self, *args):\n        set_module_args(dict(\n            name='somevlan',\n            tagged_interface=['2.1'],\n            tag=213,\n            server='localhost',\n            password='password',\n            user='admin',\n            partition='Common'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['tagged_interfaces'] == ['2.1']\n        assert results['tag'] == 213\n\n    def test_create_vlan_untagged_interface(self, *args):\n        set_module_args(dict(\n            name='somevlan',\n            untagged_interface=['2.1'],\n            server='localhost',\n            password='password',\n            user='admin',\n            partition='Common'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['untagged_interfaces'] == ['2.1']\n\n    def test_create_vlan_tagged_interfaces(self, *args):\n        set_module_args(dict(\n            name='somevlan',\n            tagged_interface=['2.1', '1.1'],\n            tag=213,\n            server='localhost',\n            password='password',\n            user='admin',\n            partition='Common'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['tagged_interfaces'] == ['1.1', '2.1']\n        assert results['tag'] == 213\n\n    def test_create_vlan_untagged_interfaces(self, *args):\n        set_module_args(dict(\n            name='somevlan',\n            untagged_interface=['2.1', '1.1'],\n            server='localhost',\n            password='password',\n            user='admin',\n            partition='Common',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['untagged_interfaces'] == ['1.1', '2.1']\n\n    def test_update_vlan_untag_interface(self, *args):\n        set_module_args(dict(\n            name='somevlan',\n            untagged_interface=['2.1'],\n            server='localhost',\n            password='password',\n            user='admin',\n            partition='Common',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n\n        current = ApiParameters(params=load_fixture('load_vlan.json'))\n        interfaces = load_fixture('load_vlan_interfaces.json')\n        current.update({'interfaces': interfaces})\n\n        mm.update_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['untagged_interfaces'] == ['2.1']\n\n    def test_update_vlan_tag_interface(self, *args):\n        set_module_args(dict(\n            name='somevlan',\n            tagged_interface=['2.1'],\n            server='localhost',\n            password='password',\n            user='admin',\n            partition='Common',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n\n        current = ApiParameters(params=load_fixture('load_vlan.json'))\n\n        mm.update_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['tagged_interfaces'] == ['2.1']\n\n    def test_update_vlan_description(self, *args):\n        set_module_args(dict(\n            name='somevlan',\n            description='changed_that',\n            server='localhost',\n            password='password',\n            user='admin',\n            partition='Common',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n\n        current = ApiParameters(params=load_fixture('update_vlan_description.json'))\n\n        mm.update_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['description'] == 'changed_that'\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_vlan import ApiParameters\n    from library.bigip_vlan import ModuleParameters\n    from library.bigip_vlan import ModuleManager\n    from library.bigip_vlan import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_vlan import ApiParameters\n        from ansible.modules.network.f5.bigip_vlan import ModuleParameters\n        from ansible.modules.network.f5.bigip_vlan import ModuleManager\n        from ansible.modules.network.f5.bigip_vlan import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass BigIpObj(object):\n    def __init__(self, **kwargs):\n        self.__dict__.update(kwargs)\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            name='somevlan',\n            tag=213,\n            description='fakevlan',\n            untagged_interfaces=['1.1'],\n        )\n        p = ModuleParameters(params=args)\n\n        assert p.name == 'somevlan'\n        assert p.tag == 213\n        assert p.description == 'fakevlan'\n        assert p.untagged_interfaces == ['1.1']\n\n    def test_api_parameters(self):\n        args = dict(\n            name='somevlan',\n            description='fakevlan',\n            tag=213\n        )\n\n        p = ApiParameters(params=args)\n\n        assert p.name == 'somevlan'\n        assert p.tag == 213\n        assert p.description == 'fakevlan'\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_vlan(self, *args):\n        set_module_args(dict(\n            name='somevlan',\n            description='fakevlan',\n            server='localhost',\n            password='password',\n            user='admin',\n            partition='Common'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['description'] == 'fakevlan'\n\n    def test_create_vlan_tagged_interface(self, *args):\n        set_module_args(dict(\n            name='somevlan',\n            tagged_interface=['2.1'],\n            tag=213,\n            server='localhost',\n            password='password',\n            user='admin',\n            partition='Common'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['tagged_interfaces'] == ['2.1']\n        assert results['tag'] == 213\n\n    def test_create_vlan_untagged_interface(self, *args):\n        set_module_args(dict(\n            name='somevlan',\n            untagged_interface=['2.1'],\n            server='localhost',\n            password='password',\n            user='admin',\n            partition='Common'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['untagged_interfaces'] == ['2.1']\n\n    def test_create_vlan_tagged_interfaces(self, *args):\n        set_module_args(dict(\n            name='somevlan',\n            tagged_interface=['2.1', '1.1'],\n            tag=213,\n            server='localhost',\n            password='password',\n            user='admin',\n            partition='Common'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['tagged_interfaces'] == ['1.1', '2.1']\n        assert results['tag'] == 213\n\n    def test_create_vlan_untagged_interfaces(self, *args):\n        set_module_args(dict(\n            name='somevlan',\n            untagged_interface=['2.1', '1.1'],\n            server='localhost',\n            password='password',\n            user='admin',\n            partition='Common',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['untagged_interfaces'] == ['1.1', '2.1']\n\n    def test_update_vlan_untag_interface(self, *args):\n        set_module_args(dict(\n            name='somevlan',\n            untagged_interface=['2.1'],\n            server='localhost',\n            password='password',\n            user='admin',\n            partition='Common',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n\n        current = ApiParameters(params=load_fixture('load_vlan.json'))\n        interfaces = load_fixture('load_vlan_interfaces.json')\n        current.update({'interfaces': interfaces})\n\n        mm.update_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['untagged_interfaces'] == ['2.1']\n\n    def test_update_vlan_tag_interface(self, *args):\n        set_module_args(dict(\n            name='somevlan',\n            tagged_interface=['2.1'],\n            server='localhost',\n            password='password',\n            user='admin',\n            partition='Common',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n\n        current = ApiParameters(params=load_fixture('load_vlan.json'))\n\n        mm.update_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['tagged_interfaces'] == ['2.1']\n\n    def test_update_vlan_description(self, *args):\n        set_module_args(dict(\n            name='somevlan',\n            description='changed_that',\n            server='localhost',\n            password='password',\n            user='admin',\n            partition='Common',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n\n        current = ApiParameters(params=load_fixture('update_vlan_description.json'))\n\n        mm.update_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['description'] == 'changed_that'\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_vlan.py", "id": "d3fe4ef9aa69d93fa88e936808661889", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_vlan.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}