{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    str_or_none,\n)\n\n\nclass VVVVIDIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vvvvid\\.it/\n    _TESTS = [{\n        \n        'url': 'https://www.vvvvid.it/\n        'md5': 'b8d3cecc2e981adc3835adf07f6df91b',\n        'info_dict': {\n            'id': '489048',\n            'ext': 'mp4',\n            'title': 'Ping Pong',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        \n        'url': 'https://www.vvvvid.it/\n        'md5': '33e0edfba720ad73a8782157fdebc648',\n        'info_dict': {\n            'id': '482493',\n            'ext': 'mp4',\n            'title': 'Episodio 01',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n    _conn_id = None\n\n    def _real_initialize(self):\n        self._conn_id = self._download_json(\n            'https://www.vvvvid.it/user/login',\n            None, headers=self.geo_verification_headers())['data']['conn_id']\n\n    def _real_extract(self, url):\n        show_id, season_id, video_id = re.match(self._VALID_URL, url).groups()\n        response = self._download_json(\n            'https://www.vvvvid.it/vvvvid/ondemand/%s/season/%s' % (show_id, season_id),\n            video_id, headers=self.geo_verification_headers(), query={\n                'conn_id': self._conn_id,\n            })\n        if response['result'] == 'error':\n            raise ExtractorError('%s said: %s' % (\n                self.IE_NAME, response['message']), expected=True)\n\n        vid = int(video_id)\n        video_data = list(filter(\n            lambda episode: episode.get('video_id') == vid, response['data']))[0]\n        formats = []\n\n        \n        def ds(h):\n            g = \"MNOPIJKL89+/4567UVWXQRSTEFGHABCDcdefYZabstuvopqr0123wxyzklmnghij\"\n\n            def f(m):\n                l = []\n                o = 0\n                b = False\n                m_len = len(m)\n                while ((not b) and o < m_len):\n                    n = m[o] << 2\n                    o += 1\n                    k = -1\n                    j = -1\n                    if o < m_len:\n                        n += m[o] >> 4\n                        o += 1\n                        if o < m_len:\n                            k = (m[o - 1] << 4) & 255\n                            k += m[o] >> 2\n                            o += 1\n                            if o < m_len:\n                                j = (m[o - 1] << 6) & 255\n                                j += m[o]\n                                o += 1\n                            else:\n                                b = True\n                        else:\n                            b = True\n                    else:\n                        b = True\n                    l.append(n)\n                    if k != -1:\n                        l.append(k)\n                    if j != -1:\n                        l.append(j)\n                return l\n\n            c = []\n            for e in h:\n                c.append(g.index(e))\n\n            c_len = len(c)\n            for e in range(c_len * 2 - 1, -1, -1):\n                a = c[e % c_len] ^ c[(e + 1) % c_len]\n                c[e % c_len] = a\n\n            c = f(c)\n            d = ''\n            for e in c:\n                d += chr(e)\n\n            return d\n\n        for quality in ('_sd', ''):\n            embed_code = video_data.get('embed_info' + quality)\n            if not embed_code:\n                continue\n            embed_code = ds(embed_code)\n            video_type = video_data.get('video_type')\n            if video_type in ('video/rcs', 'video/kenc'):\n                embed_code = re.sub(r'https?://([^/]+)/z/', r'https://\\1/i/', embed_code).replace('/manifest.f4m', '/master.m3u8')\n                if video_type == 'video/kenc':\n                    kenc = self._download_json(\n                        'https://www.vvvvid.it/kenc', video_id, query={\n                            'action': 'kt',\n                            'conn_id': self._conn_id,\n                            'url': embed_code,\n                        }, fatal=False) or {}\n                    kenc_message = kenc.get('message')\n                    if kenc_message:\n                        embed_code += '?' + ds(kenc_message)\n                formats.extend(self._extract_m3u8_formats(\n                    embed_code, video_id, 'mp4',\n                    m3u8_id='hls', fatal=False))\n            else:\n                formats.extend(self._extract_wowza_formats(\n                    'http://sb.top-ix.org/videomg/_definst_/mp4:%s/playlist.m3u8' % embed_code, video_id))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video_data['title'],\n            'formats': formats,\n            'thumbnail': video_data.get('thumbnail'),\n            'duration': int_or_none(video_data.get('length')),\n            'series': video_data.get('show_title'),\n            'season_id': season_id,\n            'season_number': video_data.get('season_number'),\n            'episode_id': str_or_none(video_data.get('id')),\n            'episode_number': int_or_none(video_data.get('number')),\n            'episode_title': video_data['title'],\n            'view_count': int_or_none(video_data.get('views')),\n            'like_count': int_or_none(video_data.get('video_likes')),\n        }\n", "comments": "# coding: utf-8\n#!(?:show|anime|film|series)/(?P<show_id>\\d+)/[^/]+/(?P<season_id>\\d+)/(?P<id>[0-9]+)'\n# video_type == 'video/vvvvid'\n#!show/434/perche-dovrei-guardarlo-di-dario-moccia/437/489048/ping-pong',\n# video_type == 'video/rcs'\n#!show/376/death-note-live-action/377/482493/episodio-01',\n# vvvvid embed_info decryption algorithm is reverse engineered from function $ds(h) at vvvvid.js\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    str_or_none,\n)\n\n\nclass VVVVIDIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vvvvid\\.it/#!(?:show|anime|film|series)/(?P<show_id>\\d+)/[^/]+/(?P<season_id>\\d+)/(?P<id>[0-9]+)'\n    _TESTS = [{\n        # video_type == 'video/vvvvid'\n        'url': 'https://www.vvvvid.it/#!show/434/perche-dovrei-guardarlo-di-dario-moccia/437/489048/ping-pong',\n        'md5': 'b8d3cecc2e981adc3835adf07f6df91b',\n        'info_dict': {\n            'id': '489048',\n            'ext': 'mp4',\n            'title': 'Ping Pong',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # video_type == 'video/rcs'\n        'url': 'https://www.vvvvid.it/#!show/376/death-note-live-action/377/482493/episodio-01',\n        'md5': '33e0edfba720ad73a8782157fdebc648',\n        'info_dict': {\n            'id': '482493',\n            'ext': 'mp4',\n            'title': 'Episodio 01',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n    _conn_id = None\n\n    def _real_initialize(self):\n        self._conn_id = self._download_json(\n            'https://www.vvvvid.it/user/login',\n            None, headers=self.geo_verification_headers())['data']['conn_id']\n\n    def _real_extract(self, url):\n        show_id, season_id, video_id = re.match(self._VALID_URL, url).groups()\n        response = self._download_json(\n            'https://www.vvvvid.it/vvvvid/ondemand/%s/season/%s' % (show_id, season_id),\n            video_id, headers=self.geo_verification_headers(), query={\n                'conn_id': self._conn_id,\n            })\n        if response['result'] == 'error':\n            raise ExtractorError('%s said: %s' % (\n                self.IE_NAME, response['message']), expected=True)\n\n        vid = int(video_id)\n        video_data = list(filter(\n            lambda episode: episode.get('video_id') == vid, response['data']))[0]\n        formats = []\n\n        # vvvvid embed_info decryption algorithm is reverse engineered from function $ds(h) at vvvvid.js\n        def ds(h):\n            g = \"MNOPIJKL89+/4567UVWXQRSTEFGHABCDcdefYZabstuvopqr0123wxyzklmnghij\"\n\n            def f(m):\n                l = []\n                o = 0\n                b = False\n                m_len = len(m)\n                while ((not b) and o < m_len):\n                    n = m[o] << 2\n                    o += 1\n                    k = -1\n                    j = -1\n                    if o < m_len:\n                        n += m[o] >> 4\n                        o += 1\n                        if o < m_len:\n                            k = (m[o - 1] << 4) & 255\n                            k += m[o] >> 2\n                            o += 1\n                            if o < m_len:\n                                j = (m[o - 1] << 6) & 255\n                                j += m[o]\n                                o += 1\n                            else:\n                                b = True\n                        else:\n                            b = True\n                    else:\n                        b = True\n                    l.append(n)\n                    if k != -1:\n                        l.append(k)\n                    if j != -1:\n                        l.append(j)\n                return l\n\n            c = []\n            for e in h:\n                c.append(g.index(e))\n\n            c_len = len(c)\n            for e in range(c_len * 2 - 1, -1, -1):\n                a = c[e % c_len] ^ c[(e + 1) % c_len]\n                c[e % c_len] = a\n\n            c = f(c)\n            d = ''\n            for e in c:\n                d += chr(e)\n\n            return d\n\n        for quality in ('_sd', ''):\n            embed_code = video_data.get('embed_info' + quality)\n            if not embed_code:\n                continue\n            embed_code = ds(embed_code)\n            video_type = video_data.get('video_type')\n            if video_type in ('video/rcs', 'video/kenc'):\n                embed_code = re.sub(r'https?://([^/]+)/z/', r'https://\\1/i/', embed_code).replace('/manifest.f4m', '/master.m3u8')\n                if video_type == 'video/kenc':\n                    kenc = self._download_json(\n                        'https://www.vvvvid.it/kenc', video_id, query={\n                            'action': 'kt',\n                            'conn_id': self._conn_id,\n                            'url': embed_code,\n                        }, fatal=False) or {}\n                    kenc_message = kenc.get('message')\n                    if kenc_message:\n                        embed_code += '?' + ds(kenc_message)\n                formats.extend(self._extract_m3u8_formats(\n                    embed_code, video_id, 'mp4',\n                    m3u8_id='hls', fatal=False))\n            else:\n                formats.extend(self._extract_wowza_formats(\n                    'http://sb.top-ix.org/videomg/_definst_/mp4:%s/playlist.m3u8' % embed_code, video_id))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video_data['title'],\n            'formats': formats,\n            'thumbnail': video_data.get('thumbnail'),\n            'duration': int_or_none(video_data.get('length')),\n            'series': video_data.get('show_title'),\n            'season_id': season_id,\n            'season_number': video_data.get('season_number'),\n            'episode_id': str_or_none(video_data.get('id')),\n            'episode_number': int_or_none(video_data.get('number')),\n            'episode_title': video_data['title'],\n            'view_count': int_or_none(video_data.get('views')),\n            'like_count': int_or_none(video_data.get('video_likes')),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vvvvid.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vvvvid.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}