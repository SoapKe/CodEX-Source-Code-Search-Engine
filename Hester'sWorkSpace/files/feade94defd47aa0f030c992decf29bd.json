{"author": "tflearn", "code": "import tensorflow as tf\nimport tflearn\nimport unittest\nimport os\n\nclass TestHelpers(unittest.TestCase):\n    \n\n    def test_variable(self):\n        \n        with tf.Graph().as_default():\n            W = tflearn.variable(name='W1', shape=[784, 256],\n                     initializer='uniform_scaling',\n                     regularizer='L2')\n            W = tflearn.variable(name='W2', shape=[784, 256],\n                     initializer='uniform_scaling',\n                     regularizer='L2')\n\n    def test_regularizer(self):\n        \n        with tf.Graph().as_default():\n            x = tf.placeholder(\"float\", [None, 4])\n            W = tf.Variable(tf.random_normal([4, 4]))\n            x = tf.nn.tanh(tf.matmul(x, W))\n            tflearn.add_weights_regularizer(W, 'L2', weight_decay=0.001)\n\n    def test_summarizer(self):\n        \n        with tf.Graph().as_default():\n            x = tf.placeholder(\"float\", [None, 4])\n            W = tf.Variable(tf.random_normal([4, 4]))\n            x = tf.nn.tanh(tf.matmul(x, W))\n            tf.add_to_collection(tf.GraphKeys.ACTIVATIONS, x)\n            import tflearn.helpers.summarizer as s\n            s.summarize_variables([W])\n            s.summarize_activations(tf.get_collection(tf.GraphKeys.ACTIVATIONS))\n            s.summarize(x, 'histogram', \"test_summary\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n", "comments": "        testing helper functions tflearn helpers            bulk tests    bulk tests    bulk tests ", "content": "import tensorflow as tf\nimport tflearn\nimport unittest\nimport os\n\nclass TestHelpers(unittest.TestCase):\n    \"\"\"\n    Testing helper functions from tflearn/helpers\n    \"\"\"\n\n    def test_variable(self):\n        # Bulk Tests\n        with tf.Graph().as_default():\n            W = tflearn.variable(name='W1', shape=[784, 256],\n                     initializer='uniform_scaling',\n                     regularizer='L2')\n            W = tflearn.variable(name='W2', shape=[784, 256],\n                     initializer='uniform_scaling',\n                     regularizer='L2')\n\n    def test_regularizer(self):\n        # Bulk Tests\n        with tf.Graph().as_default():\n            x = tf.placeholder(\"float\", [None, 4])\n            W = tf.Variable(tf.random_normal([4, 4]))\n            x = tf.nn.tanh(tf.matmul(x, W))\n            tflearn.add_weights_regularizer(W, 'L2', weight_decay=0.001)\n\n    def test_summarizer(self):\n        # Bulk Tests\n        with tf.Graph().as_default():\n            x = tf.placeholder(\"float\", [None, 4])\n            W = tf.Variable(tf.random_normal([4, 4]))\n            x = tf.nn.tanh(tf.matmul(x, W))\n            tf.add_to_collection(tf.GraphKeys.ACTIVATIONS, x)\n            import tflearn.helpers.summarizer as s\n            s.summarize_variables([W])\n            s.summarize_activations(tf.get_collection(tf.GraphKeys.ACTIVATIONS))\n            s.summarize(x, 'histogram', \"test_summary\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n", "description": "Deep learning library featuring a higher-level API for TensorFlow.", "file_name": "test_helpers.py", "id": "feade94defd47aa0f030c992decf29bd", "language": "Python", "project_name": "tflearn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tflearn-tflearn/tflearn-tflearn-70fb38a/tests/test_helpers.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:15:41Z", "url": "https://github.com/tflearn/tflearn", "wiki": true}