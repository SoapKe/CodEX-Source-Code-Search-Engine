{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\nimport sys\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n Bit of a hack to parse the version string stored in version.py without\n executing __init__.py, which will end up requiring a bunch of dependencies to\n execute (e.g., tensorflow, pretty_midi, etc.).\n Makes the __version__ variable available.\nwith open('magenta/version.py') as in_file:\n  exec(in_file.read())   pylint: disable=exec-used\n\nif '--gpu' in sys.argv:\n  gpu_mode = True\n  sys.argv.remove('--gpu')\nelse:\n  gpu_mode = False\n\nREQUIRED_PACKAGES = [\n    'IPython',\n    'Pillow >= 3.4.2',\n    'bokeh >= 0.12.0',\n    'futures',\n    'intervaltree >= 2.1.0',\n    'librosa >= 0.6.0',\n    'matplotlib >= 1.5.3',\n    'mido == 1.2.6',\n    'mir_eval >= 0.4',\n    'numpy >= 1.11.0',\n    'pandas >= 0.18.1',\n    'pretty_midi >= 0.2.6',\n    'python-rtmidi',\n    'scipy >= 0.18.1',\n    'wheel',\n]\n\nif gpu_mode:\n  REQUIRED_PACKAGES.append('tensorflow-gpu >= 1.4.0')\nelse:\n  REQUIRED_PACKAGES.append('tensorflow >= 1.4.0')\n\nCONSOLE_SCRIPTS = [\n    'magenta.interfaces.midi.magenta_midi',\n    'magenta.interfaces.midi.midi_clock',\n    'magenta.models.drums_rnn.drums_rnn_create_dataset',\n    'magenta.models.drums_rnn.drums_rnn_generate',\n    'magenta.models.drums_rnn.drums_rnn_train',\n    'magenta.models.image_stylization.image_stylization_create_dataset',\n    'magenta.models.image_stylization.image_stylization_evaluate',\n    'magenta.models.image_stylization.image_stylization_finetune',\n    'magenta.models.image_stylization.image_stylization_train',\n    'magenta.models.image_stylization.image_stylization_transform',\n    'magenta.models.improv_rnn.improv_rnn_create_dataset',\n    'magenta.models.improv_rnn.improv_rnn_generate',\n    'magenta.models.improv_rnn.improv_rnn_train',\n    'magenta.models.melody_rnn.melody_rnn_create_dataset',\n    'magenta.models.melody_rnn.melody_rnn_generate',\n    'magenta.models.melody_rnn.melody_rnn_train',\n    'magenta.models.music_vae.music_vae_train',\n    'magenta.models.nsynth.wavenet.nsynth_generate',\n    'magenta.models.nsynth.wavenet.nsynth_save_embeddings',\n    'magenta.models.onsets_frames_transcription.'\n    'onsets_frames_transcription_create_dataset',\n    'magenta.models.onsets_frames_transcription.'\n    'onsets_frames_transcription_infer',\n    'magenta.models.onsets_frames_transcription.'\n    'onsets_frames_transcription_train',\n    'magenta.models.performance_rnn.performance_rnn_create_dataset',\n    'magenta.models.performance_rnn.performance_rnn_generate',\n    'magenta.models.performance_rnn.performance_rnn_train',\n    'magenta.models.pianoroll_rnn_nade.pianoroll_rnn_nade_create_dataset',\n    'magenta.models.pianoroll_rnn_nade.pianoroll_rnn_nade_generate',\n    'magenta.models.pianoroll_rnn_nade.pianoroll_rnn_nade_train',\n    'magenta.models.polyphony_rnn.polyphony_rnn_create_dataset',\n    'magenta.models.polyphony_rnn.polyphony_rnn_generate',\n    'magenta.models.polyphony_rnn.polyphony_rnn_train',\n    'magenta.models.rl_tuner.rl_tuner_train',\n    'magenta.models.sketch_rnn.sketch_rnn_train',\n    'magenta.scripts.convert_dir_to_note_sequences',\n]\n\nsetup(\n    name='magenta-gpu' if gpu_mode else 'magenta',\n    version=__version__,   pylint: disable=undefined-variable\n    description='Use machine learning to create art and music',\n    long_description='',\n    url='https://magenta.tensorflow.org/',\n    author='Google Inc.',\n    author_email='opensource@google.com',\n    license='Apache 2',\n     PyPI package information.\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Education',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Topic :: Scientific/Engineering :: Mathematics',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Libraries',\n    ],\n    keywords='tensorflow machine learning magenta music art',\n\n    packages=find_packages(),\n    install_requires=REQUIRED_PACKAGES,\n    entry_points={\n        'console_scripts': ['%s = %s:console_entry_point' % (n, p) for n, p in\n                            ((s.split('.')[-1], s) for s in CONSOLE_SCRIPTS)],\n    },\n\n    include_package_data=True,\n    package_data={\n        'magenta': ['models/image_stylization/evaluation_images/*.jpg'],\n    },\n)\n", "comments": "   a setuptools based setup module magenta        copyright 2016 google inc  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license          http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license     bit hack parse version string stored version py without    executing   init   py  end requiring bunch dependencies    execute (e g   tensorflow  pretty midi  etc )     makes   version   variable available     pylint  disable exec used    pylint  disable undefined variable    pypi package information  ", "content": "# Copyright 2016 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"A setuptools based setup module for magenta.\"\"\"\n\nimport sys\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n# Bit of a hack to parse the version string stored in version.py without\n# executing __init__.py, which will end up requiring a bunch of dependencies to\n# execute (e.g., tensorflow, pretty_midi, etc.).\n# Makes the __version__ variable available.\nwith open('magenta/version.py') as in_file:\n  exec(in_file.read())  # pylint: disable=exec-used\n\nif '--gpu' in sys.argv:\n  gpu_mode = True\n  sys.argv.remove('--gpu')\nelse:\n  gpu_mode = False\n\nREQUIRED_PACKAGES = [\n    'IPython',\n    'Pillow >= 3.4.2',\n    'bokeh >= 0.12.0',\n    'futures',\n    'intervaltree >= 2.1.0',\n    'librosa >= 0.6.0',\n    'matplotlib >= 1.5.3',\n    'mido == 1.2.6',\n    'mir_eval >= 0.4',\n    'numpy >= 1.11.0',\n    'pandas >= 0.18.1',\n    'pretty_midi >= 0.2.6',\n    'python-rtmidi',\n    'scipy >= 0.18.1',\n    'wheel',\n]\n\nif gpu_mode:\n  REQUIRED_PACKAGES.append('tensorflow-gpu >= 1.4.0')\nelse:\n  REQUIRED_PACKAGES.append('tensorflow >= 1.4.0')\n\nCONSOLE_SCRIPTS = [\n    'magenta.interfaces.midi.magenta_midi',\n    'magenta.interfaces.midi.midi_clock',\n    'magenta.models.drums_rnn.drums_rnn_create_dataset',\n    'magenta.models.drums_rnn.drums_rnn_generate',\n    'magenta.models.drums_rnn.drums_rnn_train',\n    'magenta.models.image_stylization.image_stylization_create_dataset',\n    'magenta.models.image_stylization.image_stylization_evaluate',\n    'magenta.models.image_stylization.image_stylization_finetune',\n    'magenta.models.image_stylization.image_stylization_train',\n    'magenta.models.image_stylization.image_stylization_transform',\n    'magenta.models.improv_rnn.improv_rnn_create_dataset',\n    'magenta.models.improv_rnn.improv_rnn_generate',\n    'magenta.models.improv_rnn.improv_rnn_train',\n    'magenta.models.melody_rnn.melody_rnn_create_dataset',\n    'magenta.models.melody_rnn.melody_rnn_generate',\n    'magenta.models.melody_rnn.melody_rnn_train',\n    'magenta.models.music_vae.music_vae_train',\n    'magenta.models.nsynth.wavenet.nsynth_generate',\n    'magenta.models.nsynth.wavenet.nsynth_save_embeddings',\n    'magenta.models.onsets_frames_transcription.'\n    'onsets_frames_transcription_create_dataset',\n    'magenta.models.onsets_frames_transcription.'\n    'onsets_frames_transcription_infer',\n    'magenta.models.onsets_frames_transcription.'\n    'onsets_frames_transcription_train',\n    'magenta.models.performance_rnn.performance_rnn_create_dataset',\n    'magenta.models.performance_rnn.performance_rnn_generate',\n    'magenta.models.performance_rnn.performance_rnn_train',\n    'magenta.models.pianoroll_rnn_nade.pianoroll_rnn_nade_create_dataset',\n    'magenta.models.pianoroll_rnn_nade.pianoroll_rnn_nade_generate',\n    'magenta.models.pianoroll_rnn_nade.pianoroll_rnn_nade_train',\n    'magenta.models.polyphony_rnn.polyphony_rnn_create_dataset',\n    'magenta.models.polyphony_rnn.polyphony_rnn_generate',\n    'magenta.models.polyphony_rnn.polyphony_rnn_train',\n    'magenta.models.rl_tuner.rl_tuner_train',\n    'magenta.models.sketch_rnn.sketch_rnn_train',\n    'magenta.scripts.convert_dir_to_note_sequences',\n]\n\nsetup(\n    name='magenta-gpu' if gpu_mode else 'magenta',\n    version=__version__,  # pylint: disable=undefined-variable\n    description='Use machine learning to create art and music',\n    long_description='',\n    url='https://magenta.tensorflow.org/',\n    author='Google Inc.',\n    author_email='opensource@google.com',\n    license='Apache 2',\n    # PyPI package information.\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Education',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Topic :: Scientific/Engineering :: Mathematics',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Libraries',\n    ],\n    keywords='tensorflow machine learning magenta music art',\n\n    packages=find_packages(),\n    install_requires=REQUIRED_PACKAGES,\n    entry_points={\n        'console_scripts': ['%s = %s:console_entry_point' % (n, p) for n, p in\n                            ((s.split('.')[-1], s) for s in CONSOLE_SCRIPTS)],\n    },\n\n    include_package_data=True,\n    package_data={\n        'magenta': ['models/image_stylization/evaluation_images/*.jpg'],\n    },\n)\n", "description": "Magenta: Music and Art Generation with Machine Intelligence", "file_name": "setup.py", "id": "f2375931707d6b976794a4e94b5af4bf", "language": "Python", "project_name": "magenta", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-magenta/tensorflow-magenta-ca73164/magenta/tools/pip/setup.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:00:14Z", "url": "https://github.com/tensorflow/magenta", "wiki": false}