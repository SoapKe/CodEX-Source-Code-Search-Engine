{"author": "rg3", "code": "\n\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass JeuxVideoIE(InfoExtractor):\n    _VALID_URL = r'https?://.*?\\.jeuxvideo\\.com/.*/(.*?)\\.htm'\n\n    _TESTS = [{\n        'url': 'http://www.jeuxvideo.com/reportages-videos-jeux/0004/00046170/tearaway-playstation-vita-gc-2013-tearaway-nous-presente-ses-papiers-d-identite-00115182.htm',\n        'md5': '046e491afb32a8aaac1f44dd4ddd54ee',\n        'info_dict': {\n            'id': '114765',\n            'ext': 'mp4',\n            'title': 'Tearaway : GC 2013 : Tearaway nous pr\u00e9sente ses papiers d\\'identit\u00e9',\n            'description': 'Lorsque les d\u00e9veloppeurs de LittleBigPlanet proposent un nouveau titre, on ne peut que s\\'attendre \u00e0 un r\u00e9sultat original et fort attrayant.',\n        },\n    }, {\n        'url': 'http://www.jeuxvideo.com/videos/chroniques/434220/l-histoire-du-jeu-video-la-saturn.htm',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        title = mobj.group(1)\n        webpage = self._download_webpage(url, title)\n        title = self._html_search_meta('name', webpage) or self._og_search_title(webpage)\n        config_url = self._html_search_regex(\n            r'data-src(?:set-video)?=\"(/contenu/medias/video\\.php.*?)\"',\n            webpage, 'config URL')\n        config_url = 'http://www.jeuxvideo.com' + config_url\n\n        video_id = self._search_regex(\n            r'id=(\\d+)',\n            config_url, 'video ID')\n\n        config = self._download_json(\n            config_url, title, 'Downloading JSON config')\n\n        formats = [{\n            'url': source['file'],\n            'format_id': source['label'],\n            'resolution': source['label'],\n        } for source in reversed(config['sources'])]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': self._og_search_description(webpage),\n            'thumbnail': config.get('image'),\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\n\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass JeuxVideoIE(InfoExtractor):\n    _VALID_URL = r'https?://.*?\\.jeuxvideo\\.com/.*/(.*?)\\.htm'\n\n    _TESTS = [{\n        'url': 'http://www.jeuxvideo.com/reportages-videos-jeux/0004/00046170/tearaway-playstation-vita-gc-2013-tearaway-nous-presente-ses-papiers-d-identite-00115182.htm',\n        'md5': '046e491afb32a8aaac1f44dd4ddd54ee',\n        'info_dict': {\n            'id': '114765',\n            'ext': 'mp4',\n            'title': 'Tearaway : GC 2013 : Tearaway nous pr\u00e9sente ses papiers d\\'identit\u00e9',\n            'description': 'Lorsque les d\u00e9veloppeurs de LittleBigPlanet proposent un nouveau titre, on ne peut que s\\'attendre \u00e0 un r\u00e9sultat original et fort attrayant.',\n        },\n    }, {\n        'url': 'http://www.jeuxvideo.com/videos/chroniques/434220/l-histoire-du-jeu-video-la-saturn.htm',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        title = mobj.group(1)\n        webpage = self._download_webpage(url, title)\n        title = self._html_search_meta('name', webpage) or self._og_search_title(webpage)\n        config_url = self._html_search_regex(\n            r'data-src(?:set-video)?=\"(/contenu/medias/video\\.php.*?)\"',\n            webpage, 'config URL')\n        config_url = 'http://www.jeuxvideo.com' + config_url\n\n        video_id = self._search_regex(\n            r'id=(\\d+)',\n            config_url, 'video ID')\n\n        config = self._download_json(\n            config_url, title, 'Downloading JSON config')\n\n        formats = [{\n            'url': source['file'],\n            'format_id': source['label'],\n            'resolution': source['label'],\n        } for source in reversed(config['sources'])]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': self._og_search_description(webpage),\n            'thumbnail': config.get('image'),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "jeuxvideo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/jeuxvideo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}