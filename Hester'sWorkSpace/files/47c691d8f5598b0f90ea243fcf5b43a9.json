{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_filter\nshort_description: Manages top level filter objects (vz:Filter)\ndescription:\n- Manages top level filter objects on Cisco ACI fabrics.\n- This modules does not manage filter entries, see M(aci_filter_entry) for this functionality.\nnotes:\n- The C(tenant) used must exist before using this module in your playbook.\n  The M(aci_tenant) module can be used for this.\n- More information about the internal APIC class B(vz:Filter) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Dag Wieers (@dagwieers)\nversion_added: '2.4'\noptions:\n  filter:\n    description:\n    - The name of the filter.\n    required: yes\n    aliases: [ filter_name, name ]\n  description:\n    description:\n    - Description for the filter.\n    aliases: [ descr ]\n  tenant:\n    description:\n    - The name of the tenant.\n    required: yes\n    aliases: [ tenant_name ]\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add a new filter to a tenant\n  aci_filter:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    filter: web_filter\n    description: Filter for web protocols\n    tenant: production\n    state: present\n\n- name: Remove a filter for a tenant\n  aci_filter:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    filter: web_filter\n    tenant: production\n    state: absent\n\n- name: Query a filter of a tenant\n  aci_filter:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    filter: web_filter\n    tenant: production\n    state: query\n\n- name: Query all filters for a tenant\n  aci_filter:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: production\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        filter=dict(type='str', required=False, aliases=['name', 'filter_name']),  \n        tenant=dict(type='str', required=False, aliases=['tenant_name']),  \n        description=dict(type='str', aliases=['descr']),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n        method=dict(type='str', choices=['delete', 'get', 'post'], aliases=['action'], removed_in_version='2.6'),  \n        protocol=dict(type='str', removed_in_version='2.6'),  \n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['filter', 'tenant']],\n            ['state', 'present', ['filter', 'tenant']],\n        ],\n    )\n\n    filter_name = module.params['filter']\n    description = module.params['description']\n    state = module.params['state']\n    tenant = module.params['tenant']\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class='fvTenant',\n            aci_rn='tn-{0}'.format(tenant),\n            filter_target='eq(fvTenant.name, \"{0}\")'.format(tenant),\n            module_object=tenant,\n        ),\n        subclass_1=dict(\n            aci_class='vzFilter',\n            aci_rn='flt-{0}'.format(filter_name),\n            filter_target='eq(vzFilter.name, \"{0}\")'.format(filter_name),\n            module_object=filter_name,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='vzFilter',\n            class_config=dict(\n                name=filter_name,\n                descr=description,\n            ),\n        )\n\n        aci.get_diff(aci_class='vzFilter')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  aci filter short description  manages top level filter objects (vz filter) description    manages top level filter objects cisco aci fabrics    this modules manage filter entries  see m(aci filter entry) functionality  notes    the c(tenant) used must exist using module playbook    the m(aci tenant) module used    more information internal apic class b(vz filter)   l(the apic management information model reference https   developer cisco com docs apic mim ref )  author    dag wieers ( dagwieers) version added   2 4  options    filter      description        the name filter      required  yes     aliases    filter name  name     description      description        description filter      aliases    descr     tenant      description        the name tenant      required  yes     aliases    tenant name     state      description        use c(present) c(absent) adding removing        use c(query) listing object multiple objects      choices    absent  present  query       default  present extends documentation fragment  aci      examples   r      name  add new filter tenant   aci filter      host  apic     username  admin     password  somesecretpassword     filter  web filter     description  filter web protocols     tenant  production     state  present    name  remove filter tenant   aci filter      host  apic     username  admin     password  somesecretpassword     filter  web filter     tenant  production     state  absent    name  query filter tenant   aci filter      host  apic     username  admin     password  somesecretpassword     filter  web filter     tenant  production     state  query    name  query filters tenant   aci filter      host  apic     username  admin     password  somesecretpassword     tenant  production     state  query      return   r    current    description  the existing configuration apic module finished   returned  success   type  list   sample                               fvtenant                      attributes                          descr    production environment                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      error    description  the error information returned apic   returned  failure   type  dict   sample                 code    122            text    unknown managed object class foo        raw    description  the raw output returned apic rest api (xml json)   returned  parse error   type  string   sample     xml version  1 0  encoding  utf 8    imdata totalcount  1   error code  122  text  unknown managed object class foo     imdata   sent    description  the actual minimal configuration pushed apic   returned  info   type  list   sample                 fvtenant                  attributes                      descr    production environment                                previous    description  the original configuration apic module started   returned  info   type  list   sample                               fvtenant                      attributes                          descr    production                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      proposed    description  the assembled configuration user provided parameters   returned  info   type  dict   sample                 fvtenant                  attributes                      descr    production environment                    name    production                                filter string    description  the filter string used request   returned  failure debug   type  string   sample   rsp prop include config method    description  the http method used request apic   returned  failure debug   type  string   sample  post response    description  the http response apic   returned  failure debug   type  string   sample  ok (30 bytes) status    description  the http status apic   returned  failure debug   type  int   sample  200 url    description  the http url used request apic   returned  failure debug   type  string   sample  https   10 11 12 13 api mo uni tn production json         usr bin python        coding  utf 8        gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    not required querying objects    not required querying objects    deprecated starting v2 6    deprecated v2 6 ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_filter\nshort_description: Manages top level filter objects (vz:Filter)\ndescription:\n- Manages top level filter objects on Cisco ACI fabrics.\n- This modules does not manage filter entries, see M(aci_filter_entry) for this functionality.\nnotes:\n- The C(tenant) used must exist before using this module in your playbook.\n  The M(aci_tenant) module can be used for this.\n- More information about the internal APIC class B(vz:Filter) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Dag Wieers (@dagwieers)\nversion_added: '2.4'\noptions:\n  filter:\n    description:\n    - The name of the filter.\n    required: yes\n    aliases: [ filter_name, name ]\n  description:\n    description:\n    - Description for the filter.\n    aliases: [ descr ]\n  tenant:\n    description:\n    - The name of the tenant.\n    required: yes\n    aliases: [ tenant_name ]\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add a new filter to a tenant\n  aci_filter:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    filter: web_filter\n    description: Filter for web protocols\n    tenant: production\n    state: present\n\n- name: Remove a filter for a tenant\n  aci_filter:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    filter: web_filter\n    tenant: production\n    state: absent\n\n- name: Query a filter of a tenant\n  aci_filter:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    filter: web_filter\n    tenant: production\n    state: query\n\n- name: Query all filters for a tenant\n  aci_filter:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: production\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        filter=dict(type='str', required=False, aliases=['name', 'filter_name']),  # Not required for querying all objects\n        tenant=dict(type='str', required=False, aliases=['tenant_name']),  # Not required for querying all objects\n        description=dict(type='str', aliases=['descr']),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n        method=dict(type='str', choices=['delete', 'get', 'post'], aliases=['action'], removed_in_version='2.6'),  # Deprecated starting from v2.6\n        protocol=dict(type='str', removed_in_version='2.6'),  # Deprecated in v2.6\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['filter', 'tenant']],\n            ['state', 'present', ['filter', 'tenant']],\n        ],\n    )\n\n    filter_name = module.params['filter']\n    description = module.params['description']\n    state = module.params['state']\n    tenant = module.params['tenant']\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class='fvTenant',\n            aci_rn='tn-{0}'.format(tenant),\n            filter_target='eq(fvTenant.name, \"{0}\")'.format(tenant),\n            module_object=tenant,\n        ),\n        subclass_1=dict(\n            aci_class='vzFilter',\n            aci_rn='flt-{0}'.format(filter_name),\n            filter_target='eq(vzFilter.name, \"{0}\")'.format(filter_name),\n            module_object=filter_name,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='vzFilter',\n            class_config=dict(\n                name=filter_name,\n                descr=description,\n            ),\n        )\n\n        aci.get_diff(aci_class='vzFilter')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "aci_filter.py", "id": "47c691d8f5598b0f90ea243fcf5b43a9", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aci/aci_filter.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}