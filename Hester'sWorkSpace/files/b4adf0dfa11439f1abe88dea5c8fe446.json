{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_etree_fromstring,\n    compat_parse_qs,\n    compat_urllib_parse_unquote,\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    unified_strdate,\n    int_or_none,\n    qualities,\n    unescapeHTML,\n    urlencode_postdata,\n)\n\n\nclass OdnoklassnikiIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www|m|mobile)\\.)?(?:odnoklassniki|ok)\\.ru/(?:video(?:embed)?|web-api/video/moviePlayer|live)/(?P<id>[\\d-]+)'\n    _TESTS = [{\n        \n        'url': 'http://ok.ru/video/20079905452',\n        'md5': '0b62089b479e06681abaaca9d204f152',\n        'info_dict': {\n            'id': '20079905452',\n            'ext': 'mp4',\n            'title': '\u041a\u0443\u043b\u044c\u0442\u0443\u0440\u0430 \u043c\u0435\u043d\u044f\u0435\u0442 \u043d\u0430\u0441 (\u043f\u0440\u0435\u043a\u0440\u0430\u0441\u043d\u044b\u0439 \u0440\u043e\u043b\u0438\u043a!))',\n            'duration': 100,\n            'upload_date': '20141207',\n            'uploader_id': '330537914540',\n            'uploader': '\u0412\u0438\u0442\u0430\u043b\u0438\u0439 \u0414\u043e\u0431\u0440\u043e\u0432\u043e\u043b\u044c\u0441\u043a\u0438\u0439',\n            'like_count': int,\n            'age_limit': 0,\n        },\n    }, {\n        \n        'url': 'http://ok.ru/video/63567059965189-0?fromTime=5',\n        'md5': '6ff470ea2dd51d5d18c295a355b0b6bc',\n        'info_dict': {\n            'id': '63567059965189-0',\n            'ext': 'mp4',\n            'title': '\u0414\u0435\u0432\u0443\u0448\u043a\u0430 \u0431\u0435\u0437 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043e\u0432 ...',\n            'duration': 191,\n            'upload_date': '20150518',\n            'uploader_id': '534380003155',\n            'uploader': '\u262d \u0410\u043d\u0434\u0440\u0435\u0439 \u041c\u0435\u0449\u0430\u043d\u0438\u043d\u043e\u0432 \u262d',\n            'like_count': int,\n            'age_limit': 0,\n            'start_time': 5,\n        },\n    }, {\n        \n        'url': 'http://ok.ru/video/64211978996595-1',\n        'md5': '2f206894ffb5dbfcce2c5a14b909eea5',\n        'info_dict': {\n            'id': 'V_VztHT5BzY',\n            'ext': 'mp4',\n            'title': '\u041a\u043e\u0441\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0440\u0435\u0434\u0430 \u043e\u0442 26 \u0430\u0432\u0433\u0443\u0441\u0442\u0430 2015',\n            'description': 'md5:848eb8b85e5e3471a3a803dae1343ed0',\n            'duration': 440,\n            'upload_date': '20150826',\n            'uploader_id': 'tvroscosmos',\n            'uploader': '\u0422\u0435\u043b\u0435\u0441\u0442\u0443\u0434\u0438\u044f \u0420\u043e\u0441\u043a\u043e\u0441\u043c\u043e\u0441\u0430',\n            'age_limit': 0,\n        },\n    }, {\n        \n        'url': 'http://ok.ru/video/62036049272859-0',\n        'info_dict': {\n            'id': '62036049272859-0',\n            'ext': 'mp4',\n            'title': '\u041c\u0423\u0417\u042b\u041a\u0410     \u0414\u041e\u0416\u0414\u042f .',\n            'description': 'md5:6f1867132bd96e33bf53eda1091e8ed0',\n            'upload_date': '20120106',\n            'uploader_id': '473534735899',\n            'uploader': '\u041cARINA D',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Video has not been found',\n    }, {\n        'url': 'http://ok.ru/web-api/video/moviePlayer/20079905452',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.ok.ru/video/20648036891',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.ok.ru/videoembed/20648036891',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.ok.ru/video/20079905452',\n        'only_matching': True,\n    }, {\n        'url': 'http://mobile.ok.ru/video/20079905452',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.ok.ru/live/484531969818',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        start_time = int_or_none(compat_parse_qs(\n            compat_urllib_parse_urlparse(url).query).get('fromTime', [None])[0])\n\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'http://ok.ru/video/%s' % video_id, video_id)\n\n        error = self._search_regex(\n            r'[^>]+class=\"vp_video_stub_txt\"[^>]*>([^<]+)<',\n            webpage, 'error', default=None)\n        if error:\n            raise ExtractorError(error, expected=True)\n\n        player = self._parse_json(\n            unescapeHTML(self._search_regex(\n                r'data-options=(?P<quote>[\"\\'])(?P<player>{.+?%s.+?})(?P=quote)' % video_id,\n                webpage, 'player', group='player')),\n            video_id)\n\n        flashvars = player['flashvars']\n\n        metadata = flashvars.get('metadata')\n        if metadata:\n            metadata = self._parse_json(metadata, video_id)\n        else:\n            data = {}\n            st_location = flashvars.get('location')\n            if st_location:\n                data['st.location'] = st_location\n            metadata = self._download_json(\n                compat_urllib_parse_unquote(flashvars['metadataUrl']),\n                video_id, 'Downloading metadata JSON',\n                data=urlencode_postdata(data))\n\n        movie = metadata['movie']\n\n        \n        \n        \n        \n        provider = metadata.get('provider')\n        title = movie['title'] if provider == 'UPLOADED_ODKL' else movie.get('title')\n\n        thumbnail = movie.get('poster')\n        duration = int_or_none(movie.get('duration'))\n\n        author = metadata.get('author', {})\n        uploader_id = author.get('id')\n        uploader = author.get('name')\n\n        upload_date = unified_strdate(self._html_search_meta(\n            'ya:ovs:upload_date', webpage, 'upload date', default=None))\n\n        age_limit = None\n        adult = self._html_search_meta(\n            'ya:ovs:adult', webpage, 'age limit', default=None)\n        if adult:\n            age_limit = 18 if adult == 'true' else 0\n\n        like_count = int_or_none(metadata.get('likeCount'))\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'upload_date': upload_date,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'like_count': like_count,\n            'age_limit': age_limit,\n            'start_time': start_time,\n        }\n\n        if provider == 'USER_YOUTUBE':\n            info.update({\n                '_type': 'url_transparent',\n                'url': movie['contentId'],\n            })\n            return info\n\n        assert title\n        if provider == 'LIVE_TV_APP':\n            info['title'] = self._live_title(title)\n\n        quality = qualities(('4', '0', '1', '2', '3', '5'))\n\n        formats = [{\n            'url': f['url'],\n            'ext': 'mp4',\n            'format_id': f['name'],\n        } for f in metadata['videos']]\n\n        m3u8_url = metadata.get('hlsManifestUrl')\n        if m3u8_url:\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', 'm3u8_native',\n                m3u8_id='hls', fatal=False))\n\n        dash_manifest = metadata.get('metadataEmbedded')\n        if dash_manifest:\n            formats.extend(self._parse_mpd_formats(\n                compat_etree_fromstring(dash_manifest), 'mpd'))\n\n        for fmt in formats:\n            fmt_type = self._search_regex(\n                r'\\btype[/=](\\d)', fmt['url'],\n                'format type', default=None)\n            if fmt_type:\n                fmt['quality'] = quality(fmt_type)\n\n        \n        m3u8_url = metadata.get('hlsMasterPlaylistUrl')\n        if m3u8_url:\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', entry_protocol='m3u8',\n                m3u8_id='hls', fatal=False))\n        rtmp_url = metadata.get('rtmpUrl')\n        if rtmp_url:\n            formats.append({\n                'url': rtmp_url,\n                'format_id': 'rtmp',\n                'ext': 'flv',\n            })\n\n        self._sort_formats(formats)\n\n        info['formats'] = formats\n        return info\n", "comments": "# coding: utf-8\n# metadata in JSON\n# metadataUrl\n# YouTube embed (metadataUrl, provider == USER_YOUTUBE)\n# YouTube embed (metadata, provider == USER_YOUTUBE, no metadata.movie.title field)\n# Some embedded videos may not contain title in movie dict (e.g.\n# http://ok.ru/video/62036049272859-0) thus we allow missing title\n# here and it's going to be extracted later by an extractor that\n# will process the actual embed.\n# Live formats\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_etree_fromstring,\n    compat_parse_qs,\n    compat_urllib_parse_unquote,\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    unified_strdate,\n    int_or_none,\n    qualities,\n    unescapeHTML,\n    urlencode_postdata,\n)\n\n\nclass OdnoklassnikiIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www|m|mobile)\\.)?(?:odnoklassniki|ok)\\.ru/(?:video(?:embed)?|web-api/video/moviePlayer|live)/(?P<id>[\\d-]+)'\n    _TESTS = [{\n        # metadata in JSON\n        'url': 'http://ok.ru/video/20079905452',\n        'md5': '0b62089b479e06681abaaca9d204f152',\n        'info_dict': {\n            'id': '20079905452',\n            'ext': 'mp4',\n            'title': '\u041a\u0443\u043b\u044c\u0442\u0443\u0440\u0430 \u043c\u0435\u043d\u044f\u0435\u0442 \u043d\u0430\u0441 (\u043f\u0440\u0435\u043a\u0440\u0430\u0441\u043d\u044b\u0439 \u0440\u043e\u043b\u0438\u043a!))',\n            'duration': 100,\n            'upload_date': '20141207',\n            'uploader_id': '330537914540',\n            'uploader': '\u0412\u0438\u0442\u0430\u043b\u0438\u0439 \u0414\u043e\u0431\u0440\u043e\u0432\u043e\u043b\u044c\u0441\u043a\u0438\u0439',\n            'like_count': int,\n            'age_limit': 0,\n        },\n    }, {\n        # metadataUrl\n        'url': 'http://ok.ru/video/63567059965189-0?fromTime=5',\n        'md5': '6ff470ea2dd51d5d18c295a355b0b6bc',\n        'info_dict': {\n            'id': '63567059965189-0',\n            'ext': 'mp4',\n            'title': '\u0414\u0435\u0432\u0443\u0448\u043a\u0430 \u0431\u0435\u0437 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043e\u0432 ...',\n            'duration': 191,\n            'upload_date': '20150518',\n            'uploader_id': '534380003155',\n            'uploader': '\u262d \u0410\u043d\u0434\u0440\u0435\u0439 \u041c\u0435\u0449\u0430\u043d\u0438\u043d\u043e\u0432 \u262d',\n            'like_count': int,\n            'age_limit': 0,\n            'start_time': 5,\n        },\n    }, {\n        # YouTube embed (metadataUrl, provider == USER_YOUTUBE)\n        'url': 'http://ok.ru/video/64211978996595-1',\n        'md5': '2f206894ffb5dbfcce2c5a14b909eea5',\n        'info_dict': {\n            'id': 'V_VztHT5BzY',\n            'ext': 'mp4',\n            'title': '\u041a\u043e\u0441\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0440\u0435\u0434\u0430 \u043e\u0442 26 \u0430\u0432\u0433\u0443\u0441\u0442\u0430 2015',\n            'description': 'md5:848eb8b85e5e3471a3a803dae1343ed0',\n            'duration': 440,\n            'upload_date': '20150826',\n            'uploader_id': 'tvroscosmos',\n            'uploader': '\u0422\u0435\u043b\u0435\u0441\u0442\u0443\u0434\u0438\u044f \u0420\u043e\u0441\u043a\u043e\u0441\u043c\u043e\u0441\u0430',\n            'age_limit': 0,\n        },\n    }, {\n        # YouTube embed (metadata, provider == USER_YOUTUBE, no metadata.movie.title field)\n        'url': 'http://ok.ru/video/62036049272859-0',\n        'info_dict': {\n            'id': '62036049272859-0',\n            'ext': 'mp4',\n            'title': '\u041c\u0423\u0417\u042b\u041a\u0410     \u0414\u041e\u0416\u0414\u042f .',\n            'description': 'md5:6f1867132bd96e33bf53eda1091e8ed0',\n            'upload_date': '20120106',\n            'uploader_id': '473534735899',\n            'uploader': '\u041cARINA D',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Video has not been found',\n    }, {\n        'url': 'http://ok.ru/web-api/video/moviePlayer/20079905452',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.ok.ru/video/20648036891',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.ok.ru/videoembed/20648036891',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.ok.ru/video/20079905452',\n        'only_matching': True,\n    }, {\n        'url': 'http://mobile.ok.ru/video/20079905452',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.ok.ru/live/484531969818',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        start_time = int_or_none(compat_parse_qs(\n            compat_urllib_parse_urlparse(url).query).get('fromTime', [None])[0])\n\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'http://ok.ru/video/%s' % video_id, video_id)\n\n        error = self._search_regex(\n            r'[^>]+class=\"vp_video_stub_txt\"[^>]*>([^<]+)<',\n            webpage, 'error', default=None)\n        if error:\n            raise ExtractorError(error, expected=True)\n\n        player = self._parse_json(\n            unescapeHTML(self._search_regex(\n                r'data-options=(?P<quote>[\"\\'])(?P<player>{.+?%s.+?})(?P=quote)' % video_id,\n                webpage, 'player', group='player')),\n            video_id)\n\n        flashvars = player['flashvars']\n\n        metadata = flashvars.get('metadata')\n        if metadata:\n            metadata = self._parse_json(metadata, video_id)\n        else:\n            data = {}\n            st_location = flashvars.get('location')\n            if st_location:\n                data['st.location'] = st_location\n            metadata = self._download_json(\n                compat_urllib_parse_unquote(flashvars['metadataUrl']),\n                video_id, 'Downloading metadata JSON',\n                data=urlencode_postdata(data))\n\n        movie = metadata['movie']\n\n        # Some embedded videos may not contain title in movie dict (e.g.\n        # http://ok.ru/video/62036049272859-0) thus we allow missing title\n        # here and it's going to be extracted later by an extractor that\n        # will process the actual embed.\n        provider = metadata.get('provider')\n        title = movie['title'] if provider == 'UPLOADED_ODKL' else movie.get('title')\n\n        thumbnail = movie.get('poster')\n        duration = int_or_none(movie.get('duration'))\n\n        author = metadata.get('author', {})\n        uploader_id = author.get('id')\n        uploader = author.get('name')\n\n        upload_date = unified_strdate(self._html_search_meta(\n            'ya:ovs:upload_date', webpage, 'upload date', default=None))\n\n        age_limit = None\n        adult = self._html_search_meta(\n            'ya:ovs:adult', webpage, 'age limit', default=None)\n        if adult:\n            age_limit = 18 if adult == 'true' else 0\n\n        like_count = int_or_none(metadata.get('likeCount'))\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'upload_date': upload_date,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'like_count': like_count,\n            'age_limit': age_limit,\n            'start_time': start_time,\n        }\n\n        if provider == 'USER_YOUTUBE':\n            info.update({\n                '_type': 'url_transparent',\n                'url': movie['contentId'],\n            })\n            return info\n\n        assert title\n        if provider == 'LIVE_TV_APP':\n            info['title'] = self._live_title(title)\n\n        quality = qualities(('4', '0', '1', '2', '3', '5'))\n\n        formats = [{\n            'url': f['url'],\n            'ext': 'mp4',\n            'format_id': f['name'],\n        } for f in metadata['videos']]\n\n        m3u8_url = metadata.get('hlsManifestUrl')\n        if m3u8_url:\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', 'm3u8_native',\n                m3u8_id='hls', fatal=False))\n\n        dash_manifest = metadata.get('metadataEmbedded')\n        if dash_manifest:\n            formats.extend(self._parse_mpd_formats(\n                compat_etree_fromstring(dash_manifest), 'mpd'))\n\n        for fmt in formats:\n            fmt_type = self._search_regex(\n                r'\\btype[/=](\\d)', fmt['url'],\n                'format type', default=None)\n            if fmt_type:\n                fmt['quality'] = quality(fmt_type)\n\n        # Live formats\n        m3u8_url = metadata.get('hlsMasterPlaylistUrl')\n        if m3u8_url:\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', entry_protocol='m3u8',\n                m3u8_id='hls', fatal=False))\n        rtmp_url = metadata.get('rtmpUrl')\n        if rtmp_url:\n            formats.append({\n                'url': rtmp_url,\n                'format_id': 'rtmp',\n                'ext': 'flv',\n            })\n\n        self._sort_formats(formats)\n\n        info['formats'] = formats\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "odnoklassniki.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/odnoklassniki.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}