{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    clean_html,\n    get_element_by_attribute,\n    ExtractorError,\n)\n\n\nclass TVPIE(InfoExtractor):\n    IE_NAME = 'tvp'\n    IE_DESC = 'Telewizja Polska'\n    _VALID_URL = r'https?://[^/]+\\.tvp\\.(?:pl|info)/(?:video/(?:[^,\\s]*,)*|(?:(?!\\d+/)[^/]+/)*)(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'https://vod.tvp.pl/video/czas-honoru,i-seria-odc-13,194536',\n        'md5': '8aa518c15e5cc32dfe8db400dc921fbb',\n        'info_dict': {\n            'id': '194536',\n            'ext': 'mp4',\n            'title': 'Czas honoru, I seria \u2013 odc. 13',\n            'description': 'md5:381afa5bca72655fe94b05cfe82bf53d',\n        },\n    }, {\n        'url': 'http://www.tvp.pl/there-can-be-anything-so-i-shortened-it/17916176',\n        'md5': 'b0005b542e5b4de643a9690326ab1257',\n        'info_dict': {\n            'id': '17916176',\n            'ext': 'mp4',\n            'title': 'TVP Gorz\u00f3w poka\u017ce filmy student\u00f3w z podro\u017cy dooko\u0142a \u015bwiata',\n            'description': 'TVP Gorz\u00f3w poka\u017ce filmy student\u00f3w z podro\u017cy dooko\u0142a \u015bwiata',\n        },\n    }, {\n        \n        'url': 'https://wiadomosci.tvp.pl/33908820/28092017-1930',\n        'md5': '84cd3c8aec4840046e5ab712416b73d0',\n        'info_dict': {\n            'id': '33908820',\n            'ext': 'mp4',\n            'title': 'Wiadomo\u015bci, 28.09.2017, 19:30',\n            'description': 'Wydanie g\u0142\u00f3wne codziennego serwisu informacyjnego.'\n        },\n    }, {\n        'url': 'http://vod.tvp.pl/seriale/obyczajowe/na-sygnale/sezon-2-27-/odc-39/17834272',\n        'only_matching': True,\n    }, {\n        'url': 'http://wiadomosci.tvp.pl/25169746/24052016-1200',\n        'only_matching': True,\n    }, {\n        'url': 'http://krakow.tvp.pl/25511623/25lecie-mck-wyjatkowe-miejsce-na-mapie-krakowa',\n        'only_matching': True,\n    }, {\n        'url': 'http://teleexpress.tvp.pl/25522307/wierni-wzieli-udzial-w-procesjach',\n        'only_matching': True,\n    }, {\n        'url': 'http://sport.tvp.pl/25522165/krychowiak-uspokaja-w-sprawie-kontuzji-dwa-tygodnie-to-maksimum',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tvp.info/25511919/trwa-rewolucja-wladza-zdecydowala-sie-na-pogwalcenie-konstytucji',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        page_id = self._match_id(url)\n        webpage = self._download_webpage(url, page_id)\n        video_id = self._search_regex([\n            r'<iframe[^>]+src=\"[^\"]*?object_id=(\\d+)',\n            r\"object_id\\s*:\\s*'(\\d+)'\",\n            r'data-video-id=\"(\\d+)\"'], webpage, 'video id', default=page_id)\n        return {\n            '_type': 'url_transparent',\n            'url': 'tvp:' + video_id,\n            'description': self._og_search_description(webpage, default=None),\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'ie_key': 'TVPEmbed',\n        }\n\n\nclass TVPEmbedIE(InfoExtractor):\n    IE_NAME = 'tvp:embed'\n    IE_DESC = 'Telewizja Polska'\n    _VALID_URL = r'(?:tvp:|https?://[^/]+\\.tvp\\.(?:pl|info)/sess/tvplayer\\.php\\?.*?object_id=)(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://www.tvp.pl/sess/tvplayer.php?object_id=22670268',\n        'md5': '8c9cd59d16edabf39331f93bf8a766c7',\n        'info_dict': {\n            'id': '22670268',\n            'ext': 'mp4',\n            'title': 'Panorama, 07.12.2015, 15:40',\n        },\n    }, {\n        'url': 'tvp:22670268',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'http://www.tvp.pl/sess/tvplayer.php?object_id=%s' % video_id, video_id)\n\n        error_massage = get_element_by_attribute('class', 'msg error', webpage)\n        if error_massage:\n            raise ExtractorError('%s said: %s' % (\n                self.IE_NAME, clean_html(error_massage)), expected=True)\n\n        title = self._search_regex(\n            r'name\\s*:\\s*([\\'\"])Title\\1\\s*,\\s*value\\s*:\\s*\\1(?P<title>.+?)\\1',\n            webpage, 'title', group='title')\n        series_title = self._search_regex(\n            r'name\\s*:\\s*([\\'\"])SeriesTitle\\1\\s*,\\s*value\\s*:\\s*\\1(?P<series>.+?)\\1',\n            webpage, 'series', group='series', default=None)\n        if series_title:\n            title = '%s, %s' % (series_title, title)\n\n        thumbnail = self._search_regex(\n            r\"poster\\s*:\\s*'([^']+)'\", webpage, 'thumbnail', default=None)\n\n        video_url = self._search_regex(\n            r'0:{src:([\\'\"])(?P<url>.*?)\\1', webpage,\n            'formats', group='url', default=None)\n        if not video_url or 'material_niedostepny.mp4' in video_url:\n            video_url = self._download_json(\n                'http://www.tvp.pl/pub/stat/videofileinfo?video_id=%s' % video_id,\n                video_id)['video_url']\n\n        formats = []\n        video_url_base = self._search_regex(\n            r'(https?://.+?/video)(?:\\.(?:ism|f4m|m3u8)|-\\d+\\.mp4)',\n            video_url, 'video base url', default=None)\n        if video_url_base:\n            \n            \n            \n            \n            \n            formats.extend(self._extract_ism_formats(\n                video_url_base + '.ism/Manifest',\n                video_id, 'mss', fatal=False))\n            formats.extend(self._extract_f4m_formats(\n                video_url_base + '.ism/video.f4m',\n                video_id, f4m_id='hds', fatal=False))\n            m3u8_formats = self._extract_m3u8_formats(\n                video_url_base + '.ism/video.m3u8', video_id,\n                'mp4', 'm3u8_native', m3u8_id='hls', fatal=False)\n            self._sort_formats(m3u8_formats)\n            m3u8_formats = list(filter(\n                lambda f: f.get('vcodec') != 'none', m3u8_formats))\n            formats.extend(m3u8_formats)\n            for i, m3u8_format in enumerate(m3u8_formats, 2):\n                http_url = '%s-%d.mp4' % (video_url_base, i)\n                if self._is_valid_url(http_url, video_id):\n                    f = m3u8_format.copy()\n                    f.update({\n                        'url': http_url,\n                        'format_id': f['format_id'].replace('hls', 'http'),\n                        'protocol': 'http',\n                    })\n                    formats.append(f)\n        else:\n            formats = [{\n                'format_id': 'direct',\n                'url': video_url,\n                'ext': determine_ext(video_url, 'mp4'),\n            }]\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n\n\nclass TVPSeriesIE(InfoExtractor):\n    IE_NAME = 'tvp:series'\n    _VALID_URL = r'https?://vod\\.tvp\\.pl/(?:[^/]+/){2}(?P<id>[^/]+)/?$'\n\n    _TESTS = [{\n        'url': 'http://vod.tvp.pl/filmy-fabularne/filmy-za-darmo/ogniem-i-mieczem',\n        'info_dict': {\n            'title': 'Ogniem i mieczem',\n            'id': '4278026',\n        },\n        'playlist_count': 4,\n    }, {\n        'url': 'http://vod.tvp.pl/audycje/podroze/boso-przez-swiat',\n        'info_dict': {\n            'title': 'Boso przez \u015bwiat',\n            'id': '9329207',\n        },\n        'playlist_count': 86,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id, tries=5)\n\n        title = self._html_search_regex(\n            r'(?s) id=[\\'\"]path[\\'\"]>(?:.*? / ){2}(.*?)</span>', webpage, 'series')\n        playlist_id = self._search_regex(r'nodeId:\\s*(\\d+)', webpage, 'playlist id')\n        playlist = self._download_webpage(\n            'http://vod.tvp.pl/vod/seriesAjax?type=series&nodeId=%s&recommend'\n            'edId=0&sort=&page=0&pageSize=10000' % playlist_id, display_id, tries=5,\n            note='Downloading playlist')\n\n        videos_paths = re.findall(\n            '(?s)class=\"shortTitle\">.*?href=\"(/[^\"]+)', playlist)\n        entries = [\n            self.url_result('http://vod.tvp.pl%s' % v_path, ie=TVPIE.ie_key())\n            for v_path in videos_paths]\n\n        return {\n            '_type': 'playlist',\n            'id': playlist_id,\n            'display_id': display_id,\n            'title': title,\n            'entries': entries,\n        }\n", "comments": "# coding: utf-8\n# page id is not the same as video id(#7799)\n# TODO: <Group> found instead of <AdaptationSet> in MPD manifest.\n# It's not mentioned in MPEG-DASH standard. Figure that out.\n# formats.extend(self._extract_mpd_formats(\n#     video_url_base + '.ism/video.mpd',\n#     video_id, mpd_id='dash', fatal=False))\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    clean_html,\n    get_element_by_attribute,\n    ExtractorError,\n)\n\n\nclass TVPIE(InfoExtractor):\n    IE_NAME = 'tvp'\n    IE_DESC = 'Telewizja Polska'\n    _VALID_URL = r'https?://[^/]+\\.tvp\\.(?:pl|info)/(?:video/(?:[^,\\s]*,)*|(?:(?!\\d+/)[^/]+/)*)(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'https://vod.tvp.pl/video/czas-honoru,i-seria-odc-13,194536',\n        'md5': '8aa518c15e5cc32dfe8db400dc921fbb',\n        'info_dict': {\n            'id': '194536',\n            'ext': 'mp4',\n            'title': 'Czas honoru, I seria \u2013 odc. 13',\n            'description': 'md5:381afa5bca72655fe94b05cfe82bf53d',\n        },\n    }, {\n        'url': 'http://www.tvp.pl/there-can-be-anything-so-i-shortened-it/17916176',\n        'md5': 'b0005b542e5b4de643a9690326ab1257',\n        'info_dict': {\n            'id': '17916176',\n            'ext': 'mp4',\n            'title': 'TVP Gorz\u00f3w poka\u017ce filmy student\u00f3w z podro\u017cy dooko\u0142a \u015bwiata',\n            'description': 'TVP Gorz\u00f3w poka\u017ce filmy student\u00f3w z podro\u017cy dooko\u0142a \u015bwiata',\n        },\n    }, {\n        # page id is not the same as video id(#7799)\n        'url': 'https://wiadomosci.tvp.pl/33908820/28092017-1930',\n        'md5': '84cd3c8aec4840046e5ab712416b73d0',\n        'info_dict': {\n            'id': '33908820',\n            'ext': 'mp4',\n            'title': 'Wiadomo\u015bci, 28.09.2017, 19:30',\n            'description': 'Wydanie g\u0142\u00f3wne codziennego serwisu informacyjnego.'\n        },\n    }, {\n        'url': 'http://vod.tvp.pl/seriale/obyczajowe/na-sygnale/sezon-2-27-/odc-39/17834272',\n        'only_matching': True,\n    }, {\n        'url': 'http://wiadomosci.tvp.pl/25169746/24052016-1200',\n        'only_matching': True,\n    }, {\n        'url': 'http://krakow.tvp.pl/25511623/25lecie-mck-wyjatkowe-miejsce-na-mapie-krakowa',\n        'only_matching': True,\n    }, {\n        'url': 'http://teleexpress.tvp.pl/25522307/wierni-wzieli-udzial-w-procesjach',\n        'only_matching': True,\n    }, {\n        'url': 'http://sport.tvp.pl/25522165/krychowiak-uspokaja-w-sprawie-kontuzji-dwa-tygodnie-to-maksimum',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tvp.info/25511919/trwa-rewolucja-wladza-zdecydowala-sie-na-pogwalcenie-konstytucji',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        page_id = self._match_id(url)\n        webpage = self._download_webpage(url, page_id)\n        video_id = self._search_regex([\n            r'<iframe[^>]+src=\"[^\"]*?object_id=(\\d+)',\n            r\"object_id\\s*:\\s*'(\\d+)'\",\n            r'data-video-id=\"(\\d+)\"'], webpage, 'video id', default=page_id)\n        return {\n            '_type': 'url_transparent',\n            'url': 'tvp:' + video_id,\n            'description': self._og_search_description(webpage, default=None),\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'ie_key': 'TVPEmbed',\n        }\n\n\nclass TVPEmbedIE(InfoExtractor):\n    IE_NAME = 'tvp:embed'\n    IE_DESC = 'Telewizja Polska'\n    _VALID_URL = r'(?:tvp:|https?://[^/]+\\.tvp\\.(?:pl|info)/sess/tvplayer\\.php\\?.*?object_id=)(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://www.tvp.pl/sess/tvplayer.php?object_id=22670268',\n        'md5': '8c9cd59d16edabf39331f93bf8a766c7',\n        'info_dict': {\n            'id': '22670268',\n            'ext': 'mp4',\n            'title': 'Panorama, 07.12.2015, 15:40',\n        },\n    }, {\n        'url': 'tvp:22670268',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'http://www.tvp.pl/sess/tvplayer.php?object_id=%s' % video_id, video_id)\n\n        error_massage = get_element_by_attribute('class', 'msg error', webpage)\n        if error_massage:\n            raise ExtractorError('%s said: %s' % (\n                self.IE_NAME, clean_html(error_massage)), expected=True)\n\n        title = self._search_regex(\n            r'name\\s*:\\s*([\\'\"])Title\\1\\s*,\\s*value\\s*:\\s*\\1(?P<title>.+?)\\1',\n            webpage, 'title', group='title')\n        series_title = self._search_regex(\n            r'name\\s*:\\s*([\\'\"])SeriesTitle\\1\\s*,\\s*value\\s*:\\s*\\1(?P<series>.+?)\\1',\n            webpage, 'series', group='series', default=None)\n        if series_title:\n            title = '%s, %s' % (series_title, title)\n\n        thumbnail = self._search_regex(\n            r\"poster\\s*:\\s*'([^']+)'\", webpage, 'thumbnail', default=None)\n\n        video_url = self._search_regex(\n            r'0:{src:([\\'\"])(?P<url>.*?)\\1', webpage,\n            'formats', group='url', default=None)\n        if not video_url or 'material_niedostepny.mp4' in video_url:\n            video_url = self._download_json(\n                'http://www.tvp.pl/pub/stat/videofileinfo?video_id=%s' % video_id,\n                video_id)['video_url']\n\n        formats = []\n        video_url_base = self._search_regex(\n            r'(https?://.+?/video)(?:\\.(?:ism|f4m|m3u8)|-\\d+\\.mp4)',\n            video_url, 'video base url', default=None)\n        if video_url_base:\n            # TODO: <Group> found instead of <AdaptationSet> in MPD manifest.\n            # It's not mentioned in MPEG-DASH standard. Figure that out.\n            # formats.extend(self._extract_mpd_formats(\n            #     video_url_base + '.ism/video.mpd',\n            #     video_id, mpd_id='dash', fatal=False))\n            formats.extend(self._extract_ism_formats(\n                video_url_base + '.ism/Manifest',\n                video_id, 'mss', fatal=False))\n            formats.extend(self._extract_f4m_formats(\n                video_url_base + '.ism/video.f4m',\n                video_id, f4m_id='hds', fatal=False))\n            m3u8_formats = self._extract_m3u8_formats(\n                video_url_base + '.ism/video.m3u8', video_id,\n                'mp4', 'm3u8_native', m3u8_id='hls', fatal=False)\n            self._sort_formats(m3u8_formats)\n            m3u8_formats = list(filter(\n                lambda f: f.get('vcodec') != 'none', m3u8_formats))\n            formats.extend(m3u8_formats)\n            for i, m3u8_format in enumerate(m3u8_formats, 2):\n                http_url = '%s-%d.mp4' % (video_url_base, i)\n                if self._is_valid_url(http_url, video_id):\n                    f = m3u8_format.copy()\n                    f.update({\n                        'url': http_url,\n                        'format_id': f['format_id'].replace('hls', 'http'),\n                        'protocol': 'http',\n                    })\n                    formats.append(f)\n        else:\n            formats = [{\n                'format_id': 'direct',\n                'url': video_url,\n                'ext': determine_ext(video_url, 'mp4'),\n            }]\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n\n\nclass TVPSeriesIE(InfoExtractor):\n    IE_NAME = 'tvp:series'\n    _VALID_URL = r'https?://vod\\.tvp\\.pl/(?:[^/]+/){2}(?P<id>[^/]+)/?$'\n\n    _TESTS = [{\n        'url': 'http://vod.tvp.pl/filmy-fabularne/filmy-za-darmo/ogniem-i-mieczem',\n        'info_dict': {\n            'title': 'Ogniem i mieczem',\n            'id': '4278026',\n        },\n        'playlist_count': 4,\n    }, {\n        'url': 'http://vod.tvp.pl/audycje/podroze/boso-przez-swiat',\n        'info_dict': {\n            'title': 'Boso przez \u015bwiat',\n            'id': '9329207',\n        },\n        'playlist_count': 86,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id, tries=5)\n\n        title = self._html_search_regex(\n            r'(?s) id=[\\'\"]path[\\'\"]>(?:.*? / ){2}(.*?)</span>', webpage, 'series')\n        playlist_id = self._search_regex(r'nodeId:\\s*(\\d+)', webpage, 'playlist id')\n        playlist = self._download_webpage(\n            'http://vod.tvp.pl/vod/seriesAjax?type=series&nodeId=%s&recommend'\n            'edId=0&sort=&page=0&pageSize=10000' % playlist_id, display_id, tries=5,\n            note='Downloading playlist')\n\n        videos_paths = re.findall(\n            '(?s)class=\"shortTitle\">.*?href=\"(/[^\"]+)', playlist)\n        entries = [\n            self.url_result('http://vod.tvp.pl%s' % v_path, ie=TVPIE.ie_key())\n            for v_path in videos_paths]\n\n        return {\n            '_type': 'playlist',\n            'id': playlist_id,\n            'display_id': display_id,\n            'title': title,\n            'entries': entries,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tvp.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tvp.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}