{"author": "pyeve", "code": "# -*- coding: utf-8 -*-\nfrom __future__ import print_function\n\n\"\"\"\n    Custom event notifications\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Flask supports callback functions via decorators such as\n    `before_request` and `after_request`. Being a subclass of Flask, Eve\n    supports this mechanism too, and it's pretty darn powerful. The catch is\n    that you need to be quite familiar with Flask internals, so for example if\n    you want to inspect the `request` object you have to explicitly import it\n    from flask.\n\n    Checkout Eve at https://github.com/pyeve/eve\n\n    This snippet by Nicola Iarocci can be used freely for anything you like.\n    Consider it public domain.\n\"\"\"\nfrom flask import request\nfrom eve import Eve\nfrom notifications_settings import SETTINGS\n\napp = Eve(auth=None, settings=SETTINGS)\n\n\n@app.before_request\ndef before():\n    print('the request object ready to be processed:', request)\n\n\n@app.after_request\ndef after(response):\n    \"\"\"\n    Your function must take one parameter, a `response_class` object and return\n    a new response object or the same (see Flask documentation).\n    \"\"\"\n    print('and here we have the response object instead:', response)\n    return response\n\nif __name__ == '__main__':\n    app.run()\n", "comments": "        custom event notifications                                     flask supports callback functions via decorators      request   request   being subclass flask  eve     supports mechanism  pretty darn powerful  the catch     need quite familiar flask internals  example     want inspect  request  object explicitly import     flask       checkout eve https   github com pyeve eve      this snippet nicola iarocci used freely anything like      consider public domain      flask import request eve import eve notifications settings import settings  app   eve(auth none  settings settings)    app request def before()      print( request object ready processed    request)    app request def after(response)              your function must take one parameter   response class  object return     new response object (see flask documentation)                 coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\nfrom __future__ import print_function\n\n\"\"\"\n    Custom event notifications\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Flask supports callback functions via decorators such as\n    `before_request` and `after_request`. Being a subclass of Flask, Eve\n    supports this mechanism too, and it's pretty darn powerful. The catch is\n    that you need to be quite familiar with Flask internals, so for example if\n    you want to inspect the `request` object you have to explicitly import it\n    from flask.\n\n    Checkout Eve at https://github.com/pyeve/eve\n\n    This snippet by Nicola Iarocci can be used freely for anything you like.\n    Consider it public domain.\n\"\"\"\nfrom flask import request\nfrom eve import Eve\nfrom notifications_settings import SETTINGS\n\napp = Eve(auth=None, settings=SETTINGS)\n\n\n@app.before_request\ndef before():\n    print('the request object ready to be processed:', request)\n\n\n@app.after_request\ndef after(response):\n    \"\"\"\n    Your function must take one parameter, a `response_class` object and return\n    a new response object or the same (see Flask documentation).\n    \"\"\"\n    print('and here we have the response object instead:', response)\n    return response\n\nif __name__ == '__main__':\n    app.run()\n", "description": "REST API framework designed for human beings", "file_name": "notifications.py", "id": "b0efd7dbdfcf8c49c71eaf21e32178c4", "language": "Python", "project_name": "eve", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/pyeve-eve/pyeve-eve-53e4bb9/examples/notifications.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:55:13Z", "url": "https://github.com/pyeve/eve", "wiki": false}