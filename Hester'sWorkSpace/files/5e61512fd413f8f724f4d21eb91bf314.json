{"author": "geekcomputers", "code": "'''Conway's Game Of Life, Author Anurag Kumar(mailto:anuragkumarak95@gmail.com) \n\nRequirements:\n  - numpy\n  - random\n  - time\n  - matplotlib\n\nPython:\n  - 3.5\n\nUsage:\n  - $python3 game_o_life <canvas_size:int>\n\nGame-Of-Life Rules:\n \n 1.\n Any live cell with fewer than two live neighbours\n dies, as if caused by under-population.\n 2.\n Any live cell with two or three live neighbours lives\n on to the next generation.\n 3.\n Any live cell with more than three live neighbours\n dies, as if by over-population.\n 4.\n Any dead cell with exactly three live neighbours be-\n comes a live cell, as if by reproduction.\n '''\nimport numpy as np\nimport random, time, sys\nfrom matplotlib import pyplot as plt\nimport matplotlib.animation as animation\nfrom matplotlib.colors import ListedColormap\n\nusage_doc='Usage of script: script_nama <size_of_canvas:int>'\n\nchoice = [0]*100 + [1]*10\nrandom.shuffle(choice)\n\ndef create_canvas(size):\n    canvas = [ [False for i in range(size)] for j in range(size)]\n    return canvas\n\ndef seed(canvas):\n    for i,row in enumerate(canvas):\n        for j,_ in enumerate(row):\n            canvas[i][j]=bool(random.getrandbits(1))\n\ndef run(canvas):\n    ''' This  function runs the rules of game through all points, and changes their status accordingly.(in the same canvas)\n    @Args:\n    --\n    canvas : canvas of population to run the rules on.\n\n    @returns:\n    --\n    None\n    '''\n    canvas = np.array(canvas)\n    next_gen_canvas = np.array(create_canvas(canvas.shape[0]))\n    for r, row in enumerate(canvas):\n        for c, pt in enumerate(row):\n            # print(r-1,r+2,c-1,c+2)\n            next_gen_canvas[r][c] = __judge_point(pt,canvas[r-1:r+2,c-1:c+2])\n    \n    canvas = next_gen_canvas\n    del next_gen_canvas \n    return canvas.tolist()   \n\ndef __judge_point(pt,neighbours):\n    dead  = 0\n    alive = 0\n    \n    for i in neighbours:\n        for status in i:\n            if status: alive+=1\n            else: dead+=1\n\n    \n    if pt : alive-=1\n    else : dead-=1\n    \n    \n    state = pt\n    if pt:\n        if alive<2:\n            state=False\n        elif alive==2 or alive==3:\n            state=True\n        elif alive>3:\n            state=False\n    else:\n        if alive==3:\n            state=True\n\n    return state\n\n\nif __name__=='__main__':\n    if len(sys.argv) != 2: raise Exception(usage_doc)\n   \n    canvas_size = int(sys.argv[1])\n    \n    c=create_canvas(canvas_size)\n    seed(c)\n    fig, ax = plt.subplots()\n    fig.show() \n    cmap = ListedColormap(['w','k'])\n    try:\n        while True:\n            c = run(c)            \n            ax.matshow(c,cmap=cmap)\n            fig.canvas.draw()\n            ax.cla() \n    except KeyboardInterrupt:\n        \n        pass\n", "comments": "   conway game of life  author anurag kumar(mailto anuragkumarak95 gmail com)   requirements      numpy     random     time     matplotlib  python      3 5  usage       python3 game life  canvas size int   game of life rules     1   any live cell fewer two live neighbours  dies  caused population   2   any live cell two three live neighbours lives  next generation   3   any live cell three live neighbours  dies  population   4   any dead cell exactly three live neighbours   comes live cell  reproduction       import numpy np import random  time  sys matplotlib import pyplot plt import matplotlib animation animation matplotlib colors import listedcolormap  usage doc  usage script  script nama  size canvas int    choice    0  100    1  10 random shuffle(choice)  def create canvas(size)      canvas      false range(size)  j range(size)      return canvas  def seed(canvas)      row enumerate(canvas)          j   enumerate(row)              canvas  j  bool(random getrandbits(1))  def run(canvas)          this  function runs rules game points  changes status accordingly (in canvas)      args             canvas   canvas population run rules        returns             none            print(r 1 r 2 c 1 c 2)    cleaning memory move     finding dead alive neighbours count     handling duplicate entry focus pt     running rules game     main working structure module     nothing  ", "content": "'''Conway's Game Of Life, Author Anurag Kumar(mailto:anuragkumarak95@gmail.com) \n\nRequirements:\n  - numpy\n  - random\n  - time\n  - matplotlib\n\nPython:\n  - 3.5\n\nUsage:\n  - $python3 game_o_life <canvas_size:int>\n\nGame-Of-Life Rules:\n \n 1.\n Any live cell with fewer than two live neighbours\n dies, as if caused by under-population.\n 2.\n Any live cell with two or three live neighbours lives\n on to the next generation.\n 3.\n Any live cell with more than three live neighbours\n dies, as if by over-population.\n 4.\n Any dead cell with exactly three live neighbours be-\n comes a live cell, as if by reproduction.\n '''\nimport numpy as np\nimport random, time, sys\nfrom matplotlib import pyplot as plt\nimport matplotlib.animation as animation\nfrom matplotlib.colors import ListedColormap\n\nusage_doc='Usage of script: script_nama <size_of_canvas:int>'\n\nchoice = [0]*100 + [1]*10\nrandom.shuffle(choice)\n\ndef create_canvas(size):\n    canvas = [ [False for i in range(size)] for j in range(size)]\n    return canvas\n\ndef seed(canvas):\n    for i,row in enumerate(canvas):\n        for j,_ in enumerate(row):\n            canvas[i][j]=bool(random.getrandbits(1))\n\ndef run(canvas):\n    ''' This  function runs the rules of game through all points, and changes their status accordingly.(in the same canvas)\n    @Args:\n    --\n    canvas : canvas of population to run the rules on.\n\n    @returns:\n    --\n    None\n    '''\n    canvas = np.array(canvas)\n    next_gen_canvas = np.array(create_canvas(canvas.shape[0]))\n    for r, row in enumerate(canvas):\n        for c, pt in enumerate(row):\n            # print(r-1,r+2,c-1,c+2)\n            next_gen_canvas[r][c] = __judge_point(pt,canvas[r-1:r+2,c-1:c+2])\n    \n    canvas = next_gen_canvas\n    del next_gen_canvas # cleaning memory as we move on.\n    return canvas.tolist()   \n\ndef __judge_point(pt,neighbours):\n    dead  = 0\n    alive = 0\n    # finding dead or alive neighbours count.\n    for i in neighbours:\n        for status in i:\n            if status: alive+=1\n            else: dead+=1\n\n    # handling duplicate entry for focus pt.\n    if pt : alive-=1\n    else : dead-=1\n    \n    # running the rules of game here.\n    state = pt\n    if pt:\n        if alive<2:\n            state=False\n        elif alive==2 or alive==3:\n            state=True\n        elif alive>3:\n            state=False\n    else:\n        if alive==3:\n            state=True\n\n    return state\n\n\nif __name__=='__main__':\n    if len(sys.argv) != 2: raise Exception(usage_doc)\n   \n    canvas_size = int(sys.argv[1])\n    # main working structure of this module.\n    c=create_canvas(canvas_size)\n    seed(c)\n    fig, ax = plt.subplots()\n    fig.show() \n    cmap = ListedColormap(['w','k'])\n    try:\n        while True:\n            c = run(c)            \n            ax.matshow(c,cmap=cmap)\n            fig.canvas.draw()\n            ax.cla() \n    except KeyboardInterrupt:\n        # do nothing.\n        pass\n", "description": "My Python Examples", "file_name": "game_o_life.py", "id": "5e61512fd413f8f724f4d21eb91bf314", "language": "Python", "project_name": "Python", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/geekcomputers-Python/geekcomputers-Python-ef88c96/game_of_life/game_o_life.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:41:16Z", "url": "https://github.com/geekcomputers/Python", "wiki": true}