{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n# (c) 2015, Mathew Davies <thepixeldeveloper@googlemail.com>\n# (c) 2017, Sam Doran <sdoran@redhat.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\n\nDOCUMENTATION = '''\n---\nmodule: elasticsearch_plugin\nshort_description: Manage Elasticsearch plugins\ndescription:\n    - Manages Elasticsearch plugins.\nversion_added: \"2.0\"\nauthor:\n    - Mathew Davies (@ThePixelDeveloper)\n    - Sam Doran (@samdoran)\noptions:\n    name:\n        description:\n            - Name of the plugin to install. In Eleasticsearch >= 2.0, the name can be an URL or file location.\n        required: True\n    state:\n        description:\n            - Desired state of a plugin.\n        choices: [\"present\", \"absent\"]\n        default: present\n    url:\n        description:\n            - Set exact URL to download the plugin from (Only works for ES 1.x)\n    timeout:\n        description:\n            - \"Timeout setting: 30s, 1m, 1h...\"\n            - Only valid for Elasticsearch < 5.0. This option is ignored for Elasticsearch > 5.0.\n        default: 1m\n    plugin_bin:\n        description:\n            - Location of the plugin binary. If this file is not found, the default plugin binaries will be used.\n            - The default changed in Ansible 2.4 to None.\n    plugin_dir:\n        description:\n            - Your configured plugin directory specified in Elasticsearch\n        default: /usr/share/elasticsearch/plugins/\n    proxy_host:\n        description:\n            - Proxy host to use during plugin installation\n        version_added: \"2.1\"\n    proxy_port:\n        description:\n            - Proxy port to use during plugin installation\n        version_added: \"2.1\"\n    version:\n        description:\n            - Version of the plugin to be installed.\n              If plugin exists with previous version, it will NOT be updated\n'''\n\nEXAMPLES = '''\n\n- elasticsearch_plugin:\n    name: mobz/elasticsearch-head\n    state: present\n\n\n- elasticsearch_plugin:\n    name: mobz/elasticsearch-head\n    version: 2.0.0\n\n\n- elasticsearch_plugin:\n    name: mobz/elasticsearch-head\n    state: absent\n\n\n- elasticsearch_plugin:\n    name: analysis-icu\n    state: present\n'''\n\nimport os\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nPACKAGE_STATE_MAP = dict(\n    present=\"install\",\n    absent=\"remove\"\n)\n\nPLUGIN_BIN_PATHS = tuple([\n    '/usr/share/elasticsearch/bin/elasticsearch-plugin',\n    '/usr/share/elasticsearch/bin/plugin'\n])\n\n\ndef parse_plugin_repo(string):\n    elements = string.split(\"/\")\n\n    \n    repo = elements[0]\n\n    \n    if len(elements) > 1:\n        repo = elements[1]\n\n    \n    \n    for string in (\"elasticsearch-\", \"es-\"):\n        if repo.startswith(string):\n            return repo[len(string):]\n\n    return repo\n\n\ndef is_plugin_present(plugin_dir, working_dir):\n    return os.path.isdir(os.path.join(working_dir, plugin_dir))\n\n\ndef parse_error(string):\n    reason = \"ERROR: \"\n    try:\n        return string[string.index(reason) + len(reason):].strip()\n    except ValueError:\n        return string\n\n\ndef install_plugin(module, plugin_bin, plugin_name, version, url, proxy_host, proxy_port, timeout):\n    cmd_args = [plugin_bin, PACKAGE_STATE_MAP[\"present\"], plugin_name]\n\n    \n    if os.path.basename(plugin_bin) == 'plugin':\n        if timeout:\n            cmd_args.append(\"--timeout %s\" % timeout)\n\n        if version:\n            plugin_name = plugin_name + '/' + version\n            cmd_args[2] = plugin_name\n\n    if proxy_host and proxy_port:\n        cmd_args.append(\"-DproxyHost=%s -DproxyPort=%s\" % (proxy_host, proxy_port))\n\n    if url:\n        cmd_args.append(\"--url %s\" % url)\n\n    cmd = \" \".join(cmd_args)\n\n    if module.check_mode:\n        rc, out, err = 0, \"check mode\", \"\"\n    else:\n        rc, out, err = module.run_command(cmd)\n\n    if rc != 0:\n        reason = parse_error(out)\n        module.fail_json(msg='Is %s a valid plugin name?' % plugin_name, err=reason)\n\n    return True, cmd, out, err\n\n\ndef remove_plugin(module, plugin_bin, plugin_name):\n    cmd_args = [plugin_bin, PACKAGE_STATE_MAP[\"absent\"], parse_plugin_repo(plugin_name)]\n\n    cmd = \" \".join(cmd_args)\n\n    if module.check_mode:\n        rc, out, err = 0, \"check mode\", \"\"\n    else:\n        rc, out, err = module.run_command(cmd)\n\n    if rc != 0:\n        reason = parse_error(out)\n        module.fail_json(msg=reason)\n\n    return True, cmd, out, err\n\n\ndef get_plugin_bin(module, plugin_bin=None):\n    \n    valid_plugin_bin = None\n    if plugin_bin and os.path.isfile(plugin_bin):\n        valid_plugin_bin = plugin_bin\n\n    else:\n        \n        \n        bin_paths = list(PLUGIN_BIN_PATHS)\n        if plugin_bin and plugin_bin not in bin_paths:\n            bin_paths.insert(0, plugin_bin)\n\n        \n        \n        plugin_dirs = list(set([os.path.dirname(x) for x in bin_paths]))\n        plugin_bins = list(set([os.path.basename(x) for x in bin_paths]))\n\n        \n        \n        for bin_file in plugin_bins:\n            valid_plugin_bin = module.get_bin_path(bin_file, opt_dirs=plugin_dirs)\n            if valid_plugin_bin:\n                break\n\n    if not valid_plugin_bin:\n        module.fail_json(msg='%s does not exist and no other valid plugin installers were found. Make sure Elasticsearch is installed.' % plugin_bin)\n\n    return valid_plugin_bin\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            state=dict(default=\"present\", choices=PACKAGE_STATE_MAP.keys()),\n            url=dict(default=None),\n            timeout=dict(default=\"1m\"),\n            plugin_bin=dict(type=\"path\"),\n            plugin_dir=dict(default=\"/usr/share/elasticsearch/plugins/\", type=\"path\"),\n            proxy_host=dict(default=None),\n            proxy_port=dict(default=None),\n            version=dict(default=None)\n        ),\n        supports_check_mode=True\n    )\n\n    name = module.params[\"name\"]\n    state = module.params[\"state\"]\n    url = module.params[\"url\"]\n    timeout = module.params[\"timeout\"]\n    plugin_bin = module.params[\"plugin_bin\"]\n    plugin_dir = module.params[\"plugin_dir\"]\n    proxy_host = module.params[\"proxy_host\"]\n    proxy_port = module.params[\"proxy_port\"]\n    version = module.params[\"version\"]\n\n    \n    plugin_bin = get_plugin_bin(module, plugin_bin)\n\n    present = is_plugin_present(parse_plugin_repo(name), plugin_dir)\n\n    \n    if (present and state == \"present\") or (state == \"absent\" and not present):\n        module.exit_json(changed=False, name=name, state=state)\n\n    if state == \"present\":\n        changed, cmd, out, err = install_plugin(module, plugin_bin, name, version, url, proxy_host, proxy_port, timeout)\n\n    elif state == \"absent\":\n        changed, cmd, out, err = remove_plugin(module, plugin_bin, name)\n\n    module.exit_json(changed=changed, cmd=cmd, name=name, state=state, url=url, timeout=timeout, stdout=out, stderr=err)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  elasticsearch plugin short description  manage elasticsearch plugins description        manages elasticsearch plugins  version added   2 0  author        mathew davies ( thepixeldeveloper)       sam doran ( samdoran) options      name          description                name plugin install  in eleasticsearch    2 0  name url file location          required  true     state          description                desired state plugin          choices    present    absent           default  present     url          description                set exact url download plugin (only works es 1 x)     timeout          description                 timeout setting  30s  1m  1h                   only valid elasticsearch   5 0  this option ignored elasticsearch   5 0          default  1m     plugin bin          description                location plugin binary  if file found  default plugin binaries used                the default changed ansible 2 4 none      plugin dir          description                your configured plugin directory specified elasticsearch         default   usr share elasticsearch plugins      proxy host          description                proxy host use plugin installation         version added   2 1      proxy port          description                proxy port use plugin installation         version added   2 1      version          description                version plugin installed                if plugin exists previous version  not updated      examples         install elasticsearch head plugin elasticsearch 2 x   elasticsearch plugin      name  mobz elasticsearch head     state  present    install specific version elasticsearch head elasticsearch 2 x   elasticsearch plugin      name  mobz elasticsearch head     version  2 0 0    uninstall elasticsearch head plugin elasticsearch 2 x   elasticsearch plugin      name  mobz elasticsearch head     state  absent    install specific plugin elasticsearch    5 0   elasticsearch plugin      name  analysis icu     state  present         usr bin python        coding  utf 8        (c) 2015  mathew davies  thepixeldeveloper googlemail com     (c) 2017  sam doran  sdoran redhat com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    install elasticsearch head plugin elasticsearch 2 x    install specific version elasticsearch head elasticsearch 2 x    uninstall elasticsearch head plugin elasticsearch 2 x    install specific plugin elasticsearch    5 0    we first consider simplest form  pluginname    we consider form  username pluginname    remove elasticsearch  prefix    remove es  prefix    timeout version valid plugin  elasticsearch plugin    use plugin bin supplied first trying options    add plugin bin passed module top list paths test     testing binary name first falling back default paths     get separate lists dirs binary names full paths    plugin binaries     check binary names default system paths well path    specified module arguments     search provided path system paths valid binary    skip state correct ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# (c) 2015, Mathew Davies <thepixeldeveloper@googlemail.com>\n# (c) 2017, Sam Doran <sdoran@redhat.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\n\nDOCUMENTATION = '''\n---\nmodule: elasticsearch_plugin\nshort_description: Manage Elasticsearch plugins\ndescription:\n    - Manages Elasticsearch plugins.\nversion_added: \"2.0\"\nauthor:\n    - Mathew Davies (@ThePixelDeveloper)\n    - Sam Doran (@samdoran)\noptions:\n    name:\n        description:\n            - Name of the plugin to install. In Eleasticsearch >= 2.0, the name can be an URL or file location.\n        required: True\n    state:\n        description:\n            - Desired state of a plugin.\n        choices: [\"present\", \"absent\"]\n        default: present\n    url:\n        description:\n            - Set exact URL to download the plugin from (Only works for ES 1.x)\n    timeout:\n        description:\n            - \"Timeout setting: 30s, 1m, 1h...\"\n            - Only valid for Elasticsearch < 5.0. This option is ignored for Elasticsearch > 5.0.\n        default: 1m\n    plugin_bin:\n        description:\n            - Location of the plugin binary. If this file is not found, the default plugin binaries will be used.\n            - The default changed in Ansible 2.4 to None.\n    plugin_dir:\n        description:\n            - Your configured plugin directory specified in Elasticsearch\n        default: /usr/share/elasticsearch/plugins/\n    proxy_host:\n        description:\n            - Proxy host to use during plugin installation\n        version_added: \"2.1\"\n    proxy_port:\n        description:\n            - Proxy port to use during plugin installation\n        version_added: \"2.1\"\n    version:\n        description:\n            - Version of the plugin to be installed.\n              If plugin exists with previous version, it will NOT be updated\n'''\n\nEXAMPLES = '''\n# Install Elasticsearch Head plugin in Elasticsearch 2.x\n- elasticsearch_plugin:\n    name: mobz/elasticsearch-head\n    state: present\n\n# Install a specific version of Elasticsearch Head in Elasticsearch 2.x\n- elasticsearch_plugin:\n    name: mobz/elasticsearch-head\n    version: 2.0.0\n\n# Uninstall Elasticsearch head plugin in Elasticsearch 2.x\n- elasticsearch_plugin:\n    name: mobz/elasticsearch-head\n    state: absent\n\n# Install a specific plugin in Elasticsearch >= 5.0\n- elasticsearch_plugin:\n    name: analysis-icu\n    state: present\n'''\n\nimport os\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nPACKAGE_STATE_MAP = dict(\n    present=\"install\",\n    absent=\"remove\"\n)\n\nPLUGIN_BIN_PATHS = tuple([\n    '/usr/share/elasticsearch/bin/elasticsearch-plugin',\n    '/usr/share/elasticsearch/bin/plugin'\n])\n\n\ndef parse_plugin_repo(string):\n    elements = string.split(\"/\")\n\n    # We first consider the simplest form: pluginname\n    repo = elements[0]\n\n    # We consider the form: username/pluginname\n    if len(elements) > 1:\n        repo = elements[1]\n\n    # remove elasticsearch- prefix\n    # remove es- prefix\n    for string in (\"elasticsearch-\", \"es-\"):\n        if repo.startswith(string):\n            return repo[len(string):]\n\n    return repo\n\n\ndef is_plugin_present(plugin_dir, working_dir):\n    return os.path.isdir(os.path.join(working_dir, plugin_dir))\n\n\ndef parse_error(string):\n    reason = \"ERROR: \"\n    try:\n        return string[string.index(reason) + len(reason):].strip()\n    except ValueError:\n        return string\n\n\ndef install_plugin(module, plugin_bin, plugin_name, version, url, proxy_host, proxy_port, timeout):\n    cmd_args = [plugin_bin, PACKAGE_STATE_MAP[\"present\"], plugin_name]\n\n    # Timeout and version are only valid for plugin, not elasticsearch-plugin\n    if os.path.basename(plugin_bin) == 'plugin':\n        if timeout:\n            cmd_args.append(\"--timeout %s\" % timeout)\n\n        if version:\n            plugin_name = plugin_name + '/' + version\n            cmd_args[2] = plugin_name\n\n    if proxy_host and proxy_port:\n        cmd_args.append(\"-DproxyHost=%s -DproxyPort=%s\" % (proxy_host, proxy_port))\n\n    if url:\n        cmd_args.append(\"--url %s\" % url)\n\n    cmd = \" \".join(cmd_args)\n\n    if module.check_mode:\n        rc, out, err = 0, \"check mode\", \"\"\n    else:\n        rc, out, err = module.run_command(cmd)\n\n    if rc != 0:\n        reason = parse_error(out)\n        module.fail_json(msg='Is %s a valid plugin name?' % plugin_name, err=reason)\n\n    return True, cmd, out, err\n\n\ndef remove_plugin(module, plugin_bin, plugin_name):\n    cmd_args = [plugin_bin, PACKAGE_STATE_MAP[\"absent\"], parse_plugin_repo(plugin_name)]\n\n    cmd = \" \".join(cmd_args)\n\n    if module.check_mode:\n        rc, out, err = 0, \"check mode\", \"\"\n    else:\n        rc, out, err = module.run_command(cmd)\n\n    if rc != 0:\n        reason = parse_error(out)\n        module.fail_json(msg=reason)\n\n    return True, cmd, out, err\n\n\ndef get_plugin_bin(module, plugin_bin=None):\n    # Use the plugin_bin that was supplied first before trying other options\n    valid_plugin_bin = None\n    if plugin_bin and os.path.isfile(plugin_bin):\n        valid_plugin_bin = plugin_bin\n\n    else:\n        # Add the plugin_bin passed into the module to the top of the list of paths to test,\n        # testing for that binary name first before falling back to the default paths.\n        bin_paths = list(PLUGIN_BIN_PATHS)\n        if plugin_bin and plugin_bin not in bin_paths:\n            bin_paths.insert(0, plugin_bin)\n\n        # Get separate lists of dirs and binary names from the full paths to the\n        # plugin binaries.\n        plugin_dirs = list(set([os.path.dirname(x) for x in bin_paths]))\n        plugin_bins = list(set([os.path.basename(x) for x in bin_paths]))\n\n        # Check for the binary names in the default system paths as well as the path\n        # specified in the module arguments.\n        for bin_file in plugin_bins:\n            valid_plugin_bin = module.get_bin_path(bin_file, opt_dirs=plugin_dirs)\n            if valid_plugin_bin:\n                break\n\n    if not valid_plugin_bin:\n        module.fail_json(msg='%s does not exist and no other valid plugin installers were found. Make sure Elasticsearch is installed.' % plugin_bin)\n\n    return valid_plugin_bin\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            state=dict(default=\"present\", choices=PACKAGE_STATE_MAP.keys()),\n            url=dict(default=None),\n            timeout=dict(default=\"1m\"),\n            plugin_bin=dict(type=\"path\"),\n            plugin_dir=dict(default=\"/usr/share/elasticsearch/plugins/\", type=\"path\"),\n            proxy_host=dict(default=None),\n            proxy_port=dict(default=None),\n            version=dict(default=None)\n        ),\n        supports_check_mode=True\n    )\n\n    name = module.params[\"name\"]\n    state = module.params[\"state\"]\n    url = module.params[\"url\"]\n    timeout = module.params[\"timeout\"]\n    plugin_bin = module.params[\"plugin_bin\"]\n    plugin_dir = module.params[\"plugin_dir\"]\n    proxy_host = module.params[\"proxy_host\"]\n    proxy_port = module.params[\"proxy_port\"]\n    version = module.params[\"version\"]\n\n    # Search provided path and system paths for valid binary\n    plugin_bin = get_plugin_bin(module, plugin_bin)\n\n    present = is_plugin_present(parse_plugin_repo(name), plugin_dir)\n\n    # skip if the state is correct\n    if (present and state == \"present\") or (state == \"absent\" and not present):\n        module.exit_json(changed=False, name=name, state=state)\n\n    if state == \"present\":\n        changed, cmd, out, err = install_plugin(module, plugin_bin, name, version, url, proxy_host, proxy_port, timeout)\n\n    elif state == \"absent\":\n        changed, cmd, out, err = remove_plugin(module, plugin_bin, name)\n\n    module.exit_json(changed=changed, cmd=cmd, name=name, state=state, url=url, timeout=timeout, stdout=out, stderr=err)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "elasticsearch_plugin.py", "id": "dc4e754eb5a4071d9dfc2f70bf87d840", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/database/misc/elasticsearch_plugin.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}