{"author": "nvbn", "code": "from itertools import dropwhile, takewhile, islice\nimport re\nimport subprocess\nfrom thefuck.utils import replace_command, for_app, which, cache\nfrom thefuck.specific.sudo import sudo_support\n\n\n@sudo_support\n@for_app('docker')\ndef match(command):\n    return 'is not a docker command' in command.output\n\n\ndef get_docker_commands():\n    proc = subprocess.Popen('docker', stdout=subprocess.PIPE)\n    lines = [line.decode('utf-8') for line in proc.stdout.readlines()]\n    lines = dropwhile(lambda line: not line.startswith('Commands:'), lines)\n    lines = islice(lines, 1, None)\n    lines = list(takewhile(lambda line: line != '\\n', lines))\n    return [line.strip().split(' ')[0] for line in lines]\n\n\nif which('docker'):\n    get_docker_commands = cache(which('docker'))(get_docker_commands)\n\n\n@sudo_support\ndef get_new_command(command):\n    wrong_command = re.findall(\n        r\"docker: '(\\w+)' is not a docker command.\", command.output)[0]\n    return replace_command(command, wrong_command, get_docker_commands())\n", "comments": "", "content": "from itertools import dropwhile, takewhile, islice\nimport re\nimport subprocess\nfrom thefuck.utils import replace_command, for_app, which, cache\nfrom thefuck.specific.sudo import sudo_support\n\n\n@sudo_support\n@for_app('docker')\ndef match(command):\n    return 'is not a docker command' in command.output\n\n\ndef get_docker_commands():\n    proc = subprocess.Popen('docker', stdout=subprocess.PIPE)\n    lines = [line.decode('utf-8') for line in proc.stdout.readlines()]\n    lines = dropwhile(lambda line: not line.startswith('Commands:'), lines)\n    lines = islice(lines, 1, None)\n    lines = list(takewhile(lambda line: line != '\\n', lines))\n    return [line.strip().split(' ')[0] for line in lines]\n\n\nif which('docker'):\n    get_docker_commands = cache(which('docker'))(get_docker_commands)\n\n\n@sudo_support\ndef get_new_command(command):\n    wrong_command = re.findall(\n        r\"docker: '(\\w+)' is not a docker command.\", command.output)[0]\n    return replace_command(command, wrong_command, get_docker_commands())\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "docker_not_command.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/rules/docker_not_command.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}