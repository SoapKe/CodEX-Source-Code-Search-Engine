{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os.path\nfrom absl import flags\nfrom absl.testing import absltest\n\nfrom light_curve_util import kepler_io\n\nFLAGS = flags.FLAGS\n\n_DATA_DIR = \"light_curve_util/test_data/\"\n\n\nclass KeplerIoTest(absltest.TestCase):\n\n  def setUp(self):\n    self.data_dir = os.path.join(FLAGS.test_srcdir, _DATA_DIR)\n\n  def testKeplerFilenames(self):\n     All quarters.\n    filenames = kepler_io.kepler_filenames(\n        \"/my/dir/\", 1234567, check_existence=False)\n    self.assertItemsEqual([\n        \"/my/dir/0012/001234567/kplr001234567-2009131105131_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2009166043257_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2009259160929_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2009350155506_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010078095331_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010009091648_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010174085026_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010265121752_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010355172524_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2011073133259_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2011177032512_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2011271113734_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2012004120508_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2012088054726_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2012179063303_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2012277125453_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2013011073258_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2013098041711_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2013131215648_llc.fits\"\n    ], filenames)\n\n     Subset of quarters.\n    filenames = kepler_io.kepler_filenames(\n        \"/my/dir/\", 1234567, quarters=[3, 4], check_existence=False)\n    self.assertItemsEqual([\n        \"/my/dir/0012/001234567/kplr001234567-2009350155506_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010078095331_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010009091648_llc.fits\"\n    ], filenames)\n\n     Injected group.\n    filenames = kepler_io.kepler_filenames(\n        \"/my/dir/\",\n        1234567,\n        quarters=[3, 4],\n        injected_group=\"inj1\",\n        check_existence=False)\n     pylint:disable=line-too-long\n    self.assertItemsEqual([\n        \"/my/dir/0012/001234567/kplr001234567-2009350155506_INJECTED-inj1_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010078095331_INJECTED-inj1_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010009091648_INJECTED-inj1_llc.fits\"\n    ], filenames)\n     pylint:enable=line-too-long\n\n     Short cadence.\n    filenames = kepler_io.kepler_filenames(\n        \"/my/dir/\",\n        1234567,\n        long_cadence=False,\n        quarters=[0, 1],\n        check_existence=False)\n    self.assertItemsEqual([\n        \"/my/dir/0012/001234567/kplr001234567-2009131110544_slc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2009166044711_slc.fits\"\n    ], filenames)\n\n     Check existence.\n    filenames = kepler_io.kepler_filenames(\n        self.data_dir, 11442793, check_existence=True)\n    expected_filenames = [\n        os.path.join(self.data_dir, \"0114/011442793/kplr011442793-%s_llc.fits\")\n        % q for q in [\"2009350155506\", \"2010009091648\", \"2010174085026\"]\n    ]\n    self.assertItemsEqual(expected_filenames, filenames)\n\n  def testReadKeplerLightCurve(self):\n    filenames = [\n        os.path.join(self.data_dir, \"0114/011442793/kplr011442793-%s_llc.fits\")\n        % q for q in [\"2009350155506\", \"2010009091648\", \"2010174085026\"]\n    ]\n    all_time, all_flux = kepler_io.read_kepler_light_curve(filenames)\n    self.assertLen(all_time, 3)\n    self.assertLen(all_flux, 3)\n    self.assertLen(all_time[0], 4134)\n    self.assertLen(all_flux[0], 4134)\n    self.assertLen(all_time[1], 1008)\n    self.assertLen(all_flux[1], 1008)\n    self.assertLen(all_time[2], 4486)\n    self.assertLen(all_flux[2], 4486)\n\n\nif __name__ == \"__main__\":\n  FLAGS.test_srcdir = \"\"\n  absltest.main()\n", "comments": "   tests kepler io py        copyright 2018 the tensorflow authors        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license     all quarters     subset quarters     injected group     pylint disable line long    pylint enable line long    short cadence     check existence  ", "content": "# Copyright 2018 The TensorFlow Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Tests for kepler_io.py.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os.path\nfrom absl import flags\nfrom absl.testing import absltest\n\nfrom light_curve_util import kepler_io\n\nFLAGS = flags.FLAGS\n\n_DATA_DIR = \"light_curve_util/test_data/\"\n\n\nclass KeplerIoTest(absltest.TestCase):\n\n  def setUp(self):\n    self.data_dir = os.path.join(FLAGS.test_srcdir, _DATA_DIR)\n\n  def testKeplerFilenames(self):\n    # All quarters.\n    filenames = kepler_io.kepler_filenames(\n        \"/my/dir/\", 1234567, check_existence=False)\n    self.assertItemsEqual([\n        \"/my/dir/0012/001234567/kplr001234567-2009131105131_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2009166043257_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2009259160929_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2009350155506_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010078095331_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010009091648_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010174085026_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010265121752_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010355172524_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2011073133259_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2011177032512_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2011271113734_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2012004120508_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2012088054726_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2012179063303_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2012277125453_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2013011073258_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2013098041711_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2013131215648_llc.fits\"\n    ], filenames)\n\n    # Subset of quarters.\n    filenames = kepler_io.kepler_filenames(\n        \"/my/dir/\", 1234567, quarters=[3, 4], check_existence=False)\n    self.assertItemsEqual([\n        \"/my/dir/0012/001234567/kplr001234567-2009350155506_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010078095331_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010009091648_llc.fits\"\n    ], filenames)\n\n    # Injected group.\n    filenames = kepler_io.kepler_filenames(\n        \"/my/dir/\",\n        1234567,\n        quarters=[3, 4],\n        injected_group=\"inj1\",\n        check_existence=False)\n    # pylint:disable=line-too-long\n    self.assertItemsEqual([\n        \"/my/dir/0012/001234567/kplr001234567-2009350155506_INJECTED-inj1_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010078095331_INJECTED-inj1_llc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2010009091648_INJECTED-inj1_llc.fits\"\n    ], filenames)\n    # pylint:enable=line-too-long\n\n    # Short cadence.\n    filenames = kepler_io.kepler_filenames(\n        \"/my/dir/\",\n        1234567,\n        long_cadence=False,\n        quarters=[0, 1],\n        check_existence=False)\n    self.assertItemsEqual([\n        \"/my/dir/0012/001234567/kplr001234567-2009131110544_slc.fits\",\n        \"/my/dir/0012/001234567/kplr001234567-2009166044711_slc.fits\"\n    ], filenames)\n\n    # Check existence.\n    filenames = kepler_io.kepler_filenames(\n        self.data_dir, 11442793, check_existence=True)\n    expected_filenames = [\n        os.path.join(self.data_dir, \"0114/011442793/kplr011442793-%s_llc.fits\")\n        % q for q in [\"2009350155506\", \"2010009091648\", \"2010174085026\"]\n    ]\n    self.assertItemsEqual(expected_filenames, filenames)\n\n  def testReadKeplerLightCurve(self):\n    filenames = [\n        os.path.join(self.data_dir, \"0114/011442793/kplr011442793-%s_llc.fits\")\n        % q for q in [\"2009350155506\", \"2010009091648\", \"2010174085026\"]\n    ]\n    all_time, all_flux = kepler_io.read_kepler_light_curve(filenames)\n    self.assertLen(all_time, 3)\n    self.assertLen(all_flux, 3)\n    self.assertLen(all_time[0], 4134)\n    self.assertLen(all_flux[0], 4134)\n    self.assertLen(all_time[1], 1008)\n    self.assertLen(all_flux[1], 1008)\n    self.assertLen(all_time[2], 4486)\n    self.assertLen(all_flux[2], 4486)\n\n\nif __name__ == \"__main__\":\n  FLAGS.test_srcdir = \"\"\n  absltest.main()\n", "description": "Models and examples built with TensorFlow", "file_name": "kepler_io_test.py", "id": "b7f18790688b5c662dc69ad495252d33", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/astronet/light_curve_util/kepler_io_test.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}