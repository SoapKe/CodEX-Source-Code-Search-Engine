{"author": "HelloZeroNet", "code": "import logging\nimport time\nimport threading\n\nfrom Config import config\n\nif config.debug:  \n    try:\n        from fs.osfs import OSFS\n        pyfilesystem = OSFS(\"src\")\n        pyfilesystem_plugins = OSFS(\"plugins\")\n        logging.debug(\"Pyfilesystem detected, source code autoreload enabled\")\n    except Exception, err:\n        pyfilesystem = False\nelse:\n    pyfilesystem = False\n\n\nclass DebugReloader:\n\n    def __init__(self, callback, directory=\"/\"):\n        self.last_chaged = 0\n        if pyfilesystem:\n            self.directory = directory\n            self.callback = callback\n            if config.action == \"main\":\n                logging.debug(\"Adding autoreload: %s, cb: %s\" % (directory, callback))\n                thread = threading.Thread(target=self.addWatcher)\n                thread.daemon = True\n                thread.start()\n\n    def addWatcher(self, recursive=True):\n        try:\n            time.sleep(1)  \n            pyfilesystem.add_watcher(self.changed, path=self.directory, events=None, recursive=recursive)\n            pyfilesystem_plugins.add_watcher(self.changed, path=self.directory, events=None, recursive=recursive)\n        except Exception, err:\n            print \"File system watcher failed: %s (on linux pyinotify not gevent compatible yet :( )\" % err\n\n    def changed(self, evt):\n        if (\n            not evt.path or \"%s/\" % config.data_dir in evt.path or\n            (not evt.path.endswith(\"py\") and not evt.path.endswith(\"json\")) or\n            \"Test\" in evt.path or\n            time.time() - self.last_chaged < 1\n        ):\n            return False  # Ignore *.pyc changes and no reload within 1 sec\n        time.sleep(0.1)  \n        self.callback()\n        self.last_chaged = time.time()\n", "comments": "  only load pyfilesytem using debug mode    wait  pyc compiles    ignore   pyc changes reload within 1 sec    wait lock release ", "content": "import logging\nimport time\nimport threading\n\nfrom Config import config\n\nif config.debug:  # Only load pyfilesytem if using debug mode\n    try:\n        from fs.osfs import OSFS\n        pyfilesystem = OSFS(\"src\")\n        pyfilesystem_plugins = OSFS(\"plugins\")\n        logging.debug(\"Pyfilesystem detected, source code autoreload enabled\")\n    except Exception, err:\n        pyfilesystem = False\nelse:\n    pyfilesystem = False\n\n\nclass DebugReloader:\n\n    def __init__(self, callback, directory=\"/\"):\n        self.last_chaged = 0\n        if pyfilesystem:\n            self.directory = directory\n            self.callback = callback\n            if config.action == \"main\":\n                logging.debug(\"Adding autoreload: %s, cb: %s\" % (directory, callback))\n                thread = threading.Thread(target=self.addWatcher)\n                thread.daemon = True\n                thread.start()\n\n    def addWatcher(self, recursive=True):\n        try:\n            time.sleep(1)  # Wait for .pyc compiles\n            pyfilesystem.add_watcher(self.changed, path=self.directory, events=None, recursive=recursive)\n            pyfilesystem_plugins.add_watcher(self.changed, path=self.directory, events=None, recursive=recursive)\n        except Exception, err:\n            print \"File system watcher failed: %s (on linux pyinotify not gevent compatible yet :( )\" % err\n\n    def changed(self, evt):\n        if (\n            not evt.path or \"%s/\" % config.data_dir in evt.path or\n            (not evt.path.endswith(\"py\") and not evt.path.endswith(\"json\")) or\n            \"Test\" in evt.path or\n            time.time() - self.last_chaged < 1\n        ):\n            return False  # Ignore *.pyc changes and no reload within 1 sec\n        time.sleep(0.1)  # Wait for lock release\n        self.callback()\n        self.last_chaged = time.time()\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "DebugReloader.py", "id": "653b0fa81c64417e9333eb966b334c77", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/Debug/DebugReloader.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}