{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass OnceIE(InfoExtractor):\n    _VALID_URL = r'https?://.+?\\.unicornmedia\\.com/now/(?:ads/vmap/)?[^/]+/[^/]+/(?P<domain_id>[^/]+)/(?P<application_id>[^/]+)/(?:[^/]+/)?(?P<media_item_id>[^/]+)/content\\.(?:once|m3u8|mp4)'\n    ADAPTIVE_URL_TEMPLATE = 'http://once.unicornmedia.com/now/master/playlist/%s/%s/%s/content.m3u8'\n    PROGRESSIVE_URL_TEMPLATE = 'http://once.unicornmedia.com/now/media/progressive/%s/%s/%s/%s/content.mp4'\n\n    def _extract_once_formats(self, url, http_formats_preference=None):\n        domain_id, application_id, media_item_id = re.match(\n            OnceIE._VALID_URL, url).groups()\n        formats = self._extract_m3u8_formats(\n            self.ADAPTIVE_URL_TEMPLATE % (\n                domain_id, application_id, media_item_id),\n            media_item_id, 'mp4', m3u8_id='hls', fatal=False)\n        progressive_formats = []\n        for adaptive_format in formats:\n            \n            \n            adaptive_format['url'] = re.sub(\n                r'\\badsegmentlength=\\d+', r'adsegmentlength=0', adaptive_format['url'])\n            rendition_id = self._search_regex(\n                r'/now/media/playlist/[^/]+/[^/]+/([^/]+)',\n                adaptive_format['url'], 'redition id', default=None)\n            if rendition_id:\n                progressive_format = adaptive_format.copy()\n                progressive_format.update({\n                    'url': self.PROGRESSIVE_URL_TEMPLATE % (\n                        domain_id, application_id, rendition_id, media_item_id),\n                    'format_id': adaptive_format['format_id'].replace(\n                        'hls', 'http'),\n                    'protocol': 'http',\n                    'preference': http_formats_preference,\n                })\n                progressive_formats.append(progressive_format)\n        self._check_formats(progressive_formats, media_item_id)\n        formats.extend(progressive_formats)\n        return formats\n", "comments": "# coding: utf-8\n# Prevent advertisement from embedding into m3u8 playlist (see\n# https://github.com/rg3/youtube-dl/issues/8893#issuecomment-199912684)\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass OnceIE(InfoExtractor):\n    _VALID_URL = r'https?://.+?\\.unicornmedia\\.com/now/(?:ads/vmap/)?[^/]+/[^/]+/(?P<domain_id>[^/]+)/(?P<application_id>[^/]+)/(?:[^/]+/)?(?P<media_item_id>[^/]+)/content\\.(?:once|m3u8|mp4)'\n    ADAPTIVE_URL_TEMPLATE = 'http://once.unicornmedia.com/now/master/playlist/%s/%s/%s/content.m3u8'\n    PROGRESSIVE_URL_TEMPLATE = 'http://once.unicornmedia.com/now/media/progressive/%s/%s/%s/%s/content.mp4'\n\n    def _extract_once_formats(self, url, http_formats_preference=None):\n        domain_id, application_id, media_item_id = re.match(\n            OnceIE._VALID_URL, url).groups()\n        formats = self._extract_m3u8_formats(\n            self.ADAPTIVE_URL_TEMPLATE % (\n                domain_id, application_id, media_item_id),\n            media_item_id, 'mp4', m3u8_id='hls', fatal=False)\n        progressive_formats = []\n        for adaptive_format in formats:\n            # Prevent advertisement from embedding into m3u8 playlist (see\n            # https://github.com/rg3/youtube-dl/issues/8893#issuecomment-199912684)\n            adaptive_format['url'] = re.sub(\n                r'\\badsegmentlength=\\d+', r'adsegmentlength=0', adaptive_format['url'])\n            rendition_id = self._search_regex(\n                r'/now/media/playlist/[^/]+/[^/]+/([^/]+)',\n                adaptive_format['url'], 'redition id', default=None)\n            if rendition_id:\n                progressive_format = adaptive_format.copy()\n                progressive_format.update({\n                    'url': self.PROGRESSIVE_URL_TEMPLATE % (\n                        domain_id, application_id, rendition_id, media_item_id),\n                    'format_id': adaptive_format['format_id'].replace(\n                        'hls', 'http'),\n                    'protocol': 'http',\n                    'preference': http_formats_preference,\n                })\n                progressive_formats.append(progressive_format)\n        self._check_formats(progressive_formats, media_item_id)\n        formats.extend(progressive_formats)\n        return formats\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "once.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/once.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}