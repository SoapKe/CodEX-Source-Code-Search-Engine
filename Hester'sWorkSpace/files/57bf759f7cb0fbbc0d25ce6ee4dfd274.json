{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass MySpaceIE(InfoExtractor):\n    _VALID_URL = r % name,\n                    song_data, name, default='', group='data')\n            formats = formats_from_stream_urls(\n                search_data('stream-url'), search_data('hls-stream-url'),\n                search_data('http-stream-url'))\n            if not formats:\n                vevo_id = search_data('vevo-id')\n                youtube_id = search_data('youtube-id')\n                if vevo_id:\n                    self.to_screen('Vevo video detected: %s' % vevo_id)\n                    return self.url_result('vevo:%s' % vevo_id, ie='Vevo')\n                elif youtube_id:\n                    self.to_screen('Youtube video detected: %s' % youtube_id)\n                    return self.url_result(youtube_id, ie='Youtube')\n                else:\n                    raise ExtractorError(\n                        'Found song but don\\'t know how to download it')\n            self._sort_formats(formats)\n            return {\n                'id': video_id,\n                'title': self._og_search_title(webpage),\n                'uploader': search_data('artist-name'),\n                'uploader_id': search_data('artist-username'),\n                'thumbnail': self._og_search_thumbnail(webpage),\n                'duration': int_or_none(search_data('duration')),\n                'formats': formats,\n            }\n        else:\n            video = self._parse_json(self._search_regex(\n                r'context = ({.*?});', webpage, 'context'),\n                video_id)['video']\n            formats = formats_from_stream_urls(\n                video.get('streamUrl'), video.get('hlsStreamUrl'),\n                video.get('mp4StreamUrl'), int_or_none(video.get('width')),\n                int_or_none(video.get('height')))\n            self._sort_formats(formats)\n            return {\n                'id': video_id,\n                'title': video['title'],\n                'description': video.get('description'),\n                'thumbnail': video.get('imageUrl'),\n                'uploader': video.get('artistName'),\n                'uploader_id': video.get('artistUsername'),\n                'duration': int_or_none(video.get('duration')),\n                'timestamp': parse_iso8601(video.get('dateAdded')),\n                'formats': formats,\n            }\n\n\nclass MySpaceAlbumIE(InfoExtractor):\n    IE_NAME = 'MySpace:album'\n    _VALID_URL = r'https?://myspace\\.com/([^/]+)/music/album/(?P<title>.*-)(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'https://myspace.com/starset2/music/album/transmissions-19455773',\n        'info_dict': {\n            'title': 'Transmissions',\n            'id': '19455773',\n        },\n        'playlist_count': 14,\n        'skip': 'this album is only available in some countries',\n    }, {\n        'url': 'https://myspace.com/killsorrow/music/album/the-demo-18596029',\n        'info_dict': {\n            'title': 'The Demo',\n            'id': '18596029',\n        },\n        'playlist_count': 5,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        playlist_id = mobj.group('id')\n        display_id = mobj.group('title') + playlist_id\n        webpage = self._download_webpage(url, display_id)\n        tracks_paths = re.findall(r'\"music:song\" content=\"(.*?)\"', webpage)\n        if not tracks_paths:\n            raise ExtractorError(\n                '%s: No songs found, try using proxy' % display_id,\n                expected=True)\n        entries = [\n            self.url_result(t_path, ie=MySpaceIE.ie_key())\n            for t_path in tracks_paths]\n        return {\n            '_type': 'playlist',\n            'id': playlist_id,\n            'display_id': display_id,\n            'title': self._og_search_title(webpage),\n            'entries': entries,\n        }\n", "comments": "(?x)\n                    https?://\n                        myspace\\.com/[^/]+/\n                        (?P<mediatype>\n                            video/[^/]+/(?P<video_id>\\d+)|\n                            music/song/[^/?#&]+-(?P<song_id>\\d+)-\\d+(?:[/?#&]|$)\n                        )\n                    '''\n\n    _TESTS = [{\n        'url': 'https://myspace.com/fiveminutestothestage/video/little-big-town/109594919',\n        'md5': '9c1483c106f4a695c47d2911feed50a7',\n        'info_dict': {\n            'id': '109594919',\n            'ext': 'mp4',\n            'title': 'Little Big Town',\n            'description': 'This country quartet was all smiles\u00a0while\u00a0playing a sold out show at the Pacific\u00a0Amphitheatre\u00a0in Orange County, California.',\n            'uploader': 'Five Minutes to the Stage',\n            'uploader_id': 'fiveminutestothestage',\n            'timestamp': 1414108751,\n            'upload_date': '20141023',\n        },\n    }, {\n        # songs\n        'url': 'https://myspace.com/killsorrow/music/song/of-weakened-soul...-93388656-103880681',\n        'md5': '1d7ee4604a3da226dd69a123f748b262',\n        'info_dict': {\n            'id': '93388656',\n            'ext': 'm4a',\n            'title': 'Of weakened soul...',\n            'uploader': 'Killsorrow',\n            'uploader_id': 'killsorrow',\n        },\n    }, {\n        'add_ie': ['Youtube'],\n        'url': 'https://myspace.com/threedaysgrace/music/song/animal-i-have-become-28400208-28218041',\n        'info_dict': {\n            'id': 'xqds0B_meys',\n            'ext': 'webm',\n            'title': 'Three Days Grace - Animal I Have Become',\n            'description': 'md5:8bd86b3693e72a077cf863a8530c54bb',\n            'uploader': 'ThreeDaysGraceVEVO',\n            'uploader_id': 'ThreeDaysGraceVEVO',\n            'upload_date': '20091002',\n        },\n    }, {\n        'url': 'https://myspace.com/starset2/music/song/first-light-95799905-106964426',\n        'only_matching': True,\n    }, {\n        'url': 'https://myspace.com/thelargemouthbassband/music/song/02-pure-eyes.mp3-94422330-105113388',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('video_id') or mobj.group('song_id')\n        is_song = mobj.group('mediatype').startswith('music/song')\n        webpage = self._download_webpage(url, video_id)\n        player_url = self._search_regex(\n            r'videoSwf\":\"([^\"?]*)', webpage, 'player URL', fatal=False)\n\n        def formats_from_stream_urls(stream_url, hls_stream_url, http_stream_url, width=None, height=None):\n            formats = []\n            vcodec = 'none' if is_song else None\n            if hls_stream_url:\n                formats.append({\n                    'format_id': 'hls',\n                    'url': hls_stream_url,\n                    'protocol': 'm3u8_native',\n                    'ext': 'm4a' if is_song else 'mp4',\n                    'vcodec': vcodec,\n                })\n            if stream_url and player_url:\n                rtmp_url, play_path = stream_url.split(';', 1)\n                formats.append({\n                    'format_id': 'rtmp',\n                    'url': rtmp_url,\n                    'play_path': play_path,\n                    'player_url': player_url,\n                    'protocol': 'rtmp',\n                    'ext': 'flv',\n                    'width': width,\n                    'height': height,\n                    'vcodec': vcodec,\n                })\n            if http_stream_url:\n                formats.append({\n                    'format_id': 'http',\n                    'url': http_stream_url,\n                    'width': width,\n                    'height': height,\n                    'vcodec': vcodec,\n                })\n            return formats\n\n        if is_song:\n            # songs don't store any useful info in the 'context' variable\n            song_data = self._search_regex(\n                r'''<button.*data-song-id=([\"\\'])%s\\1.*''' % video_id,\n                webpage, 'song_data', default=None, group=0)\n            if song_data is None:\n                # some songs in an album are not playable\n                self.report_warning(\n                    '%s: No downloadable song on this page' % video_id)\n                return\n\n            def search_data(name):\n                return self._search_regex(\n                    r'''data-%s=([\\'\"])(?P<data>.*?)\\1\n1\n# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass MySpaceIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        myspace\\.com/[^/]+/\n                        (?P<mediatype>\n                            video/[^/]+/(?P<video_id>\\d+)|\n                            music/song/[^/?#&]+-(?P<song_id>\\d+)-\\d+(?:[/?#&]|$)\n                        )\n                    '''\n\n    _TESTS = [{\n        'url': 'https://myspace.com/fiveminutestothestage/video/little-big-town/109594919',\n        'md5': '9c1483c106f4a695c47d2911feed50a7',\n        'info_dict': {\n            'id': '109594919',\n            'ext': 'mp4',\n            'title': 'Little Big Town',\n            'description': 'This country quartet was all smiles\u00a0while\u00a0playing a sold out show at the Pacific\u00a0Amphitheatre\u00a0in Orange County, California.',\n            'uploader': 'Five Minutes to the Stage',\n            'uploader_id': 'fiveminutestothestage',\n            'timestamp': 1414108751,\n            'upload_date': '20141023',\n        },\n    }, {\n        # songs\n        'url': 'https://myspace.com/killsorrow/music/song/of-weakened-soul...-93388656-103880681',\n        'md5': '1d7ee4604a3da226dd69a123f748b262',\n        'info_dict': {\n            'id': '93388656',\n            'ext': 'm4a',\n            'title': 'Of weakened soul...',\n            'uploader': 'Killsorrow',\n            'uploader_id': 'killsorrow',\n        },\n    }, {\n        'add_ie': ['Youtube'],\n        'url': 'https://myspace.com/threedaysgrace/music/song/animal-i-have-become-28400208-28218041',\n        'info_dict': {\n            'id': 'xqds0B_meys',\n            'ext': 'webm',\n            'title': 'Three Days Grace - Animal I Have Become',\n            'description': 'md5:8bd86b3693e72a077cf863a8530c54bb',\n            'uploader': 'ThreeDaysGraceVEVO',\n            'uploader_id': 'ThreeDaysGraceVEVO',\n            'upload_date': '20091002',\n        },\n    }, {\n        'url': 'https://myspace.com/starset2/music/song/first-light-95799905-106964426',\n        'only_matching': True,\n    }, {\n        'url': 'https://myspace.com/thelargemouthbassband/music/song/02-pure-eyes.mp3-94422330-105113388',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('video_id') or mobj.group('song_id')\n        is_song = mobj.group('mediatype').startswith('music/song')\n        webpage = self._download_webpage(url, video_id)\n        player_url = self._search_regex(\n            r'videoSwf\":\"([^\"?]*)', webpage, 'player URL', fatal=False)\n\n        def formats_from_stream_urls(stream_url, hls_stream_url, http_stream_url, width=None, height=None):\n            formats = []\n            vcodec = 'none' if is_song else None\n            if hls_stream_url:\n                formats.append({\n                    'format_id': 'hls',\n                    'url': hls_stream_url,\n                    'protocol': 'm3u8_native',\n                    'ext': 'm4a' if is_song else 'mp4',\n                    'vcodec': vcodec,\n                })\n            if stream_url and player_url:\n                rtmp_url, play_path = stream_url.split(';', 1)\n                formats.append({\n                    'format_id': 'rtmp',\n                    'url': rtmp_url,\n                    'play_path': play_path,\n                    'player_url': player_url,\n                    'protocol': 'rtmp',\n                    'ext': 'flv',\n                    'width': width,\n                    'height': height,\n                    'vcodec': vcodec,\n                })\n            if http_stream_url:\n                formats.append({\n                    'format_id': 'http',\n                    'url': http_stream_url,\n                    'width': width,\n                    'height': height,\n                    'vcodec': vcodec,\n                })\n            return formats\n\n        if is_song:\n            # songs don't store any useful info in the 'context' variable\n            song_data = self._search_regex(\n                r'''<button.*data-song-id=([\"\\'])%s\\1.*''' % video_id,\n                webpage, 'song_data', default=None, group=0)\n            if song_data is None:\n                # some songs in an album are not playable\n                self.report_warning(\n                    '%s: No downloadable song on this page' % video_id)\n                return\n\n            def search_data(name):\n                return self._search_regex(\n                    r'''data-%s=([\\'\"])(?P<data>.*?)\\1''' % name,\n                    song_data, name, default='', group='data')\n            formats = formats_from_stream_urls(\n                search_data('stream-url'), search_data('hls-stream-url'),\n                search_data('http-stream-url'))\n            if not formats:\n                vevo_id = search_data('vevo-id')\n                youtube_id = search_data('youtube-id')\n                if vevo_id:\n                    self.to_screen('Vevo video detected: %s' % vevo_id)\n                    return self.url_result('vevo:%s' % vevo_id, ie='Vevo')\n                elif youtube_id:\n                    self.to_screen('Youtube video detected: %s' % youtube_id)\n                    return self.url_result(youtube_id, ie='Youtube')\n                else:\n                    raise ExtractorError(\n                        'Found song but don\\'t know how to download it')\n            self._sort_formats(formats)\n            return {\n                'id': video_id,\n                'title': self._og_search_title(webpage),\n                'uploader': search_data('artist-name'),\n                'uploader_id': search_data('artist-username'),\n                'thumbnail': self._og_search_thumbnail(webpage),\n                'duration': int_or_none(search_data('duration')),\n                'formats': formats,\n            }\n        else:\n            video = self._parse_json(self._search_regex(\n                r'context = ({.*?});', webpage, 'context'),\n                video_id)['video']\n            formats = formats_from_stream_urls(\n                video.get('streamUrl'), video.get('hlsStreamUrl'),\n                video.get('mp4StreamUrl'), int_or_none(video.get('width')),\n                int_or_none(video.get('height')))\n            self._sort_formats(formats)\n            return {\n                'id': video_id,\n                'title': video['title'],\n                'description': video.get('description'),\n                'thumbnail': video.get('imageUrl'),\n                'uploader': video.get('artistName'),\n                'uploader_id': video.get('artistUsername'),\n                'duration': int_or_none(video.get('duration')),\n                'timestamp': parse_iso8601(video.get('dateAdded')),\n                'formats': formats,\n            }\n\n\nclass MySpaceAlbumIE(InfoExtractor):\n    IE_NAME = 'MySpace:album'\n    _VALID_URL = r'https?://myspace\\.com/([^/]+)/music/album/(?P<title>.*-)(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'https://myspace.com/starset2/music/album/transmissions-19455773',\n        'info_dict': {\n            'title': 'Transmissions',\n            'id': '19455773',\n        },\n        'playlist_count': 14,\n        'skip': 'this album is only available in some countries',\n    }, {\n        'url': 'https://myspace.com/killsorrow/music/album/the-demo-18596029',\n        'info_dict': {\n            'title': 'The Demo',\n            'id': '18596029',\n        },\n        'playlist_count': 5,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        playlist_id = mobj.group('id')\n        display_id = mobj.group('title') + playlist_id\n        webpage = self._download_webpage(url, display_id)\n        tracks_paths = re.findall(r'\"music:song\" content=\"(.*?)\"', webpage)\n        if not tracks_paths:\n            raise ExtractorError(\n                '%s: No songs found, try using proxy' % display_id,\n                expected=True)\n        entries = [\n            self.url_result(t_path, ie=MySpaceIE.ie_key())\n            for t_path in tracks_paths]\n        return {\n            '_type': 'playlist',\n            'id': playlist_id,\n            'display_id': display_id,\n            'title': self._og_search_title(webpage),\n            'entries': entries,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "myspace.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/myspace.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}