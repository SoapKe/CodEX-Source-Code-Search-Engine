{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom .common import KARMA, TestForumCommon\nfrom ..models.forum import KarmaError\nfrom odoo.exceptions import UserError, AccessError\nfrom odoo.tools import mute_logger\n\n\nclass TestForum(TestForumCommon):\n\n    @mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\n    def test_ask(self):\n        Post = self.env['forum.post']\n\n        \n        with self.assertRaises(AccessError):\n            Post.sudo(self.user_public).create({\n                'name': \" Question ?\",\n                'forum_id': self.forum.id,\n            })\n\n        \n        with self.assertRaises(KarmaError):\n            Post.sudo(self.user_portal).create({\n                'name': \" Q_0\",\n                'forum_id': self.forum.id,\n                'tag_ids': [(0, 0, {'name': 'Tag0', 'forum_id': self.forum.id})]\n            })\n\n        \n        self.user_portal.karma = KARMA['tag_create']\n        Post.sudo(self.user_portal).create({\n            'name': \" Q0\",\n            'forum_id': self.forum.id,\n            'tag_ids': [(0, 0, {'name': 'Tag1', 'forum_id': self.forum.id})]\n        })\n        self.assertEqual(self.user_portal.karma, KARMA['tag_create'], 'website_forum: wrong karma generation when asking question')\n\n        self.user_portal.karma = KARMA['post']\n        Post.sudo(self.user_portal).create({\n            'name': \" Q0\",\n            'forum_id': self.forum.id,\n            'tag_ids': [(0, 0, {'name': 'Tag42', 'forum_id': self.forum.id})]\n        })\n        self.assertEqual(self.user_portal.karma, KARMA['post'] + KARMA['gen_que_new'], 'website_forum: wrong karma generation when asking question')\n\n    @mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\n    def test_answer(self):\n        Post = self.env['forum.post']\n\n        \n        with self.assertRaises(KarmaError):\n            Post.sudo(self.user_employee).create({\n                'name': \" A0\",\n                'forum_id': self.forum.id,\n                'parent_id': self.post.id,\n            })\n\n        \n        self.user_employee.karma = KARMA['ans']\n        Post.sudo(self.user_employee).create({\n            'name': \" A0\",\n            'forum_id': self.forum.id,\n            'parent_id': self.post.id,\n        })\n        self.assertEqual(self.user_employee.karma, KARMA['ans'], 'website_forum: wrong karma generation when answering question')\n\n    @mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\n    def test_vote_crash(self):\n        Post = self.env['forum.post']\n        self.user_employee.karma = KARMA['ans']\n        emp_answer = Post.sudo(self.user_employee).create({\n            'name': 'TestAnswer',\n            'forum_id': self.forum.id,\n            'parent_id': self.post.id})\n\n        \n        with self.assertRaises(UserError):\n            emp_answer.vote(upvote=True)\n\n        \n        with self.assertRaises(KarmaError):\n            self.post.sudo(self.user_portal).vote(upvote=True)\n\n    def test_vote(self):\n        self.post.create_uid.karma = KARMA['ask']\n        self.user_portal.karma = KARMA['upv']\n        self.post.sudo(self.user_portal).vote(upvote=True)\n        self.assertEqual(self.post.create_uid.karma, KARMA['ask'] + KARMA['gen_que_upv'], 'website_forum: wrong karma generation of upvoted question author')\n\n    @mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\n    def test_downvote_crash(self):\n        Post = self.env['forum.post']\n        self.user_employee.karma = KARMA['ans']\n        emp_answer = Post.sudo(self.user_employee).create({\n            'name': 'TestAnswer',\n            'forum_id': self.forum.id,\n            'parent_id': self.post.id})\n\n        \n        with self.assertRaises(UserError):\n            emp_answer.vote(upvote=False)\n\n        \n        with self.assertRaises(KarmaError):\n            self.post.sudo(self.user_portal).vote(upvote=False)\n\n    def test_downvote(self):\n        self.post.create_uid.karma = 50\n        self.user_portal.karma = KARMA['dwv']\n        self.post.sudo(self.user_portal).vote(upvote=False)\n        self.assertEqual(self.post.create_uid.karma, 50 + KARMA['gen_que_dwv'], 'website_forum: wrong karma generation of downvoted question author')\n\n    def test_comment_crash(self):\n        with self.assertRaises(KarmaError):\n            self.post.sudo(self.user_portal).message_post(body='Should crash', message_type='comment')\n\n    def test_comment(self):\n        self.post.sudo(self.user_employee).message_post(body='Test0', message_type='notification')\n        self.user_employee.karma = KARMA['com_all']\n        self.post.sudo(self.user_employee).message_post(body='Test1', message_type='comment')\n        self.assertEqual(len(self.post.message_ids), 4, 'website_forum: wrong behavior of message_post')\n\n    def test_flag_a_post(self):\n        Post = self.env['forum.post']\n        self.user_portal.karma = KARMA['ask']\n        post = Post.sudo(self.user_portal).create({\n            'name': \"Q0\",\n            'forum_id': self.forum.id,\n        })\n\n        \n        with self.assertRaises(KarmaError):\n            post.sudo(self.user_portal).flag()\n\n        \n        self.user_portal.karma = KARMA['flag']\n        post.state = 'active'\n        post.sudo(self.user_portal).flag()\n        self.assertEqual(post.state, 'flagged', 'website_forum: wrong state when flagging a post')\n\n    def test_validate_a_post(self):\n        Post = self.env['forum.post']\n        self.user_portal.karma = KARMA['ask']\n        post = Post.sudo(self.user_portal).create({\n            'name': \"Q0\",\n            'forum_id': self.forum.id,\n        })\n\n        \n        with self.assertRaises(KarmaError):\n            post.sudo(self.user_portal).validate()\n\n        \n        self.user_portal.karma = KARMA['moderate']\n        post.state = 'pending'\n        init_karma = post.create_uid.karma\n        post.sudo(self.user_portal).validate()\n        self.assertEqual(post.state, 'active', 'website_forum: wrong state when validate a post after pending')\n        self.assertEqual(post.create_uid.karma, init_karma + KARMA['gen_que_new'], 'website_forum: wrong karma when validate a post after pending')\n\n        \n        self.user_portal.karma = KARMA['moderate']\n        post.state = 'flagged'\n        post.sudo(self.user_portal).validate()\n        self.assertEqual(post.state, 'active', 'website_forum: wrong state when validate a post after flagged')\n\n        \n        self.user_portal.karma = KARMA['moderate']\n        post.state = 'offensive'\n        init_karma = post.create_uid.karma\n        post.sudo(self.user_portal).validate()\n        self.assertEqual(post.state, 'active', 'website_forum: wrong state when validate a post after offensive')\n\n    def test_refuse_a_post(self):\n        Post = self.env['forum.post']\n        self.user_portal.karma = KARMA['ask']\n        post = Post.sudo(self.user_portal).create({\n            'name': \"Q0\",\n            'forum_id': self.forum.id,\n        })\n\n        \n        with self.assertRaises(KarmaError):\n            post.sudo(self.user_portal).refuse()\n\n        \n        self.user_portal.karma = KARMA['moderate']\n        post.state = 'pending'\n        init_karma = post.create_uid.karma\n        post.sudo(self.user_portal).refuse()\n        self.assertEqual(post.moderator_id, self.user_portal, 'website_forum: wrong moderator_id when refusing')\n        self.assertEqual(post.create_uid.karma, init_karma, 'website_forum: wrong karma when refusing a post')\n\n    def test_mark_a_post_as_offensive(self):\n        Post = self.env['forum.post']\n        self.user_portal.karma = KARMA['ask']\n        post = Post.sudo(self.user_portal).create({\n            'name': \"Q0\",\n            'forum_id': self.forum.id,\n        })\n\n        \n        with self.assertRaises(KarmaError):\n            post.sudo(self.user_portal).mark_as_offensive(12)\n\n        \n        self.user_portal.karma = KARMA['moderate']\n        post.state = 'flagged'\n        init_karma = post.create_uid.karma\n        post.sudo(self.user_portal).mark_as_offensive(12)\n        self.assertEqual(post.state, 'offensive', 'website_forum: wrong state when marking a post as offensive')\n        self.assertEqual(post.create_uid.karma, init_karma + KARMA['gen_ans_flag'], 'website_forum: wrong karma when marking a post as offensive')\n\n    def test_convert_answer_to_comment_crash(self):\n        Post = self.env['forum.post']\n\n        \n        new_msg = self.post.sudo(self.user_portal).convert_answer_to_comment()\n        self.assertEqual(new_msg.id, False, 'website_forum: question to comment conversion failed')\n        self.assertEqual(Post.search([('name', '=', 'TestQuestion')])[0].forum_id.name, 'TestForum', 'website_forum: question to comment conversion failed')\n\n        with self.assertRaises(KarmaError):\n            self.answer.sudo(self.user_portal).convert_answer_to_comment()\n\n    def test_convert_answer_to_comment(self):\n        self.user_portal.karma = KARMA['com_conv_all']\n        post_author = self.answer.create_uid.partner_id\n        new_msg = self.answer.sudo(self.user_portal).convert_answer_to_comment()\n        self.assertEqual(len(new_msg), 1, 'website_forum: wrong answer to comment conversion')\n        self.assertEqual(new_msg.author_id, post_author, 'website_forum: wrong answer to comment conversion')\n        self.assertIn('I am an anteater', new_msg.body, 'website_forum: wrong answer to comment conversion')\n\n    def test_edit_post_crash(self):\n        with self.assertRaises(KarmaError):\n            self.post.sudo(self.user_portal).write({'name': 'I am not your father.'})\n\n    def test_edit_post(self):\n        self.post.create_uid.karma = KARMA['edit_own']\n        self.post.write({'name': 'Actually I am your dog.'})\n        self.user_portal.karma = KARMA['edit_all']\n        self.post.sudo(self.user_portal).write({'name': 'Actually I am your cat.'})\n\n    def test_close_post_crash(self):\n        with self.assertRaises(KarmaError):\n            self.post.sudo(self.user_portal).close(None)\n\n    def test_close_post_own(self):\n        self.post.create_uid.karma = KARMA['close_own']\n        self.post.close(None)\n\n    def test_close_post_all(self):\n        self.user_portal.karma = KARMA['close_all']\n        self.post.sudo(self.user_portal).close(None)\n\n    def test_deactivate_post_crash(self):\n        with self.assertRaises(KarmaError):\n            self.post.sudo(self.user_portal).write({'active': False})\n\n    def test_deactivate_post_own(self):\n        self.post.create_uid.karma = KARMA['unlink_own']\n        self.post.write({'active': False})\n\n    def test_deactivate_post_all(self):\n        self.user_portal.karma = KARMA['unlink_all']\n        self.post.sudo(self.user_portal).write({'active': False})\n\n    def test_unlink_post_crash(self):\n        with self.assertRaises(KarmaError):\n            self.post.sudo(self.user_portal).unlink()\n\n    def test_unlink_post_own(self):\n        self.post.create_uid.karma = KARMA['unlink_own']\n        self.post.unlink()\n\n    def test_unlink_post_all(self):\n        self.user_portal.karma = KARMA['unlink_all']\n        self.post.sudo(self.user_portal).unlink()\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     public user asks question  allowed    portal user asks question tags  allowed  unsufficient karma    portal user asks question tags  ok enough karma    answers question  allowed  unsufficient karma    answers question  ok enough karma    upvote post    enough karma    downvote post    enough karma    portal user flags post  allowed  unsufficient karma    portal user flags post  ok enough karma    portal user validate post  allowed  unsufficient karma    portal user validate pending post    portal user validate flagged post  ok enough karma    portal user validate offensive post  ok enough karma    portal user validate post  allowed  unsufficient karma    portal user validate pending post    portal user mark post offensive  allowed  unsufficient karma    portal user mark post offensive    converting question nothing ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom .common import KARMA, TestForumCommon\nfrom ..models.forum import KarmaError\nfrom odoo.exceptions import UserError, AccessError\nfrom odoo.tools import mute_logger\n\n\nclass TestForum(TestForumCommon):\n\n    @mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\n    def test_ask(self):\n        Post = self.env['forum.post']\n\n        # Public user asks a question: not allowed\n        with self.assertRaises(AccessError):\n            Post.sudo(self.user_public).create({\n                'name': \" Question ?\",\n                'forum_id': self.forum.id,\n            })\n\n        # Portal user asks a question with tags: not allowed, unsufficient karma\n        with self.assertRaises(KarmaError):\n            Post.sudo(self.user_portal).create({\n                'name': \" Q_0\",\n                'forum_id': self.forum.id,\n                'tag_ids': [(0, 0, {'name': 'Tag0', 'forum_id': self.forum.id})]\n            })\n\n        # Portal user asks a question with tags: ok if enough karma\n        self.user_portal.karma = KARMA['tag_create']\n        Post.sudo(self.user_portal).create({\n            'name': \" Q0\",\n            'forum_id': self.forum.id,\n            'tag_ids': [(0, 0, {'name': 'Tag1', 'forum_id': self.forum.id})]\n        })\n        self.assertEqual(self.user_portal.karma, KARMA['tag_create'], 'website_forum: wrong karma generation when asking question')\n\n        self.user_portal.karma = KARMA['post']\n        Post.sudo(self.user_portal).create({\n            'name': \" Q0\",\n            'forum_id': self.forum.id,\n            'tag_ids': [(0, 0, {'name': 'Tag42', 'forum_id': self.forum.id})]\n        })\n        self.assertEqual(self.user_portal.karma, KARMA['post'] + KARMA['gen_que_new'], 'website_forum: wrong karma generation when asking question')\n\n    @mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\n    def test_answer(self):\n        Post = self.env['forum.post']\n\n        # Answers its own question: not allowed, unsufficient karma\n        with self.assertRaises(KarmaError):\n            Post.sudo(self.user_employee).create({\n                'name': \" A0\",\n                'forum_id': self.forum.id,\n                'parent_id': self.post.id,\n            })\n\n        # Answers on question: ok if enough karma\n        self.user_employee.karma = KARMA['ans']\n        Post.sudo(self.user_employee).create({\n            'name': \" A0\",\n            'forum_id': self.forum.id,\n            'parent_id': self.post.id,\n        })\n        self.assertEqual(self.user_employee.karma, KARMA['ans'], 'website_forum: wrong karma generation when answering question')\n\n    @mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\n    def test_vote_crash(self):\n        Post = self.env['forum.post']\n        self.user_employee.karma = KARMA['ans']\n        emp_answer = Post.sudo(self.user_employee).create({\n            'name': 'TestAnswer',\n            'forum_id': self.forum.id,\n            'parent_id': self.post.id})\n\n        # upvote its own post\n        with self.assertRaises(UserError):\n            emp_answer.vote(upvote=True)\n\n        # not enough karma\n        with self.assertRaises(KarmaError):\n            self.post.sudo(self.user_portal).vote(upvote=True)\n\n    def test_vote(self):\n        self.post.create_uid.karma = KARMA['ask']\n        self.user_portal.karma = KARMA['upv']\n        self.post.sudo(self.user_portal).vote(upvote=True)\n        self.assertEqual(self.post.create_uid.karma, KARMA['ask'] + KARMA['gen_que_upv'], 'website_forum: wrong karma generation of upvoted question author')\n\n    @mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\n    def test_downvote_crash(self):\n        Post = self.env['forum.post']\n        self.user_employee.karma = KARMA['ans']\n        emp_answer = Post.sudo(self.user_employee).create({\n            'name': 'TestAnswer',\n            'forum_id': self.forum.id,\n            'parent_id': self.post.id})\n\n        # downvote its own post\n        with self.assertRaises(UserError):\n            emp_answer.vote(upvote=False)\n\n        # not enough karma\n        with self.assertRaises(KarmaError):\n            self.post.sudo(self.user_portal).vote(upvote=False)\n\n    def test_downvote(self):\n        self.post.create_uid.karma = 50\n        self.user_portal.karma = KARMA['dwv']\n        self.post.sudo(self.user_portal).vote(upvote=False)\n        self.assertEqual(self.post.create_uid.karma, 50 + KARMA['gen_que_dwv'], 'website_forum: wrong karma generation of downvoted question author')\n\n    def test_comment_crash(self):\n        with self.assertRaises(KarmaError):\n            self.post.sudo(self.user_portal).message_post(body='Should crash', message_type='comment')\n\n    def test_comment(self):\n        self.post.sudo(self.user_employee).message_post(body='Test0', message_type='notification')\n        self.user_employee.karma = KARMA['com_all']\n        self.post.sudo(self.user_employee).message_post(body='Test1', message_type='comment')\n        self.assertEqual(len(self.post.message_ids), 4, 'website_forum: wrong behavior of message_post')\n\n    def test_flag_a_post(self):\n        Post = self.env['forum.post']\n        self.user_portal.karma = KARMA['ask']\n        post = Post.sudo(self.user_portal).create({\n            'name': \"Q0\",\n            'forum_id': self.forum.id,\n        })\n\n        # portal user flags a post: not allowed, unsufficient karma\n        with self.assertRaises(KarmaError):\n            post.sudo(self.user_portal).flag()\n\n        # portal user flags a post: ok if enough karma\n        self.user_portal.karma = KARMA['flag']\n        post.state = 'active'\n        post.sudo(self.user_portal).flag()\n        self.assertEqual(post.state, 'flagged', 'website_forum: wrong state when flagging a post')\n\n    def test_validate_a_post(self):\n        Post = self.env['forum.post']\n        self.user_portal.karma = KARMA['ask']\n        post = Post.sudo(self.user_portal).create({\n            'name': \"Q0\",\n            'forum_id': self.forum.id,\n        })\n\n        # portal user validate a post: not allowed, unsufficient karma\n        with self.assertRaises(KarmaError):\n            post.sudo(self.user_portal).validate()\n\n        # portal user validate a pending post\n        self.user_portal.karma = KARMA['moderate']\n        post.state = 'pending'\n        init_karma = post.create_uid.karma\n        post.sudo(self.user_portal).validate()\n        self.assertEqual(post.state, 'active', 'website_forum: wrong state when validate a post after pending')\n        self.assertEqual(post.create_uid.karma, init_karma + KARMA['gen_que_new'], 'website_forum: wrong karma when validate a post after pending')\n\n        # portal user validate a flagged post: ok if enough karma\n        self.user_portal.karma = KARMA['moderate']\n        post.state = 'flagged'\n        post.sudo(self.user_portal).validate()\n        self.assertEqual(post.state, 'active', 'website_forum: wrong state when validate a post after flagged')\n\n        # portal user validate an offensive post: ok if enough karma\n        self.user_portal.karma = KARMA['moderate']\n        post.state = 'offensive'\n        init_karma = post.create_uid.karma\n        post.sudo(self.user_portal).validate()\n        self.assertEqual(post.state, 'active', 'website_forum: wrong state when validate a post after offensive')\n\n    def test_refuse_a_post(self):\n        Post = self.env['forum.post']\n        self.user_portal.karma = KARMA['ask']\n        post = Post.sudo(self.user_portal).create({\n            'name': \"Q0\",\n            'forum_id': self.forum.id,\n        })\n\n        # portal user validate a post: not allowed, unsufficient karma\n        with self.assertRaises(KarmaError):\n            post.sudo(self.user_portal).refuse()\n\n        # portal user validate a pending post\n        self.user_portal.karma = KARMA['moderate']\n        post.state = 'pending'\n        init_karma = post.create_uid.karma\n        post.sudo(self.user_portal).refuse()\n        self.assertEqual(post.moderator_id, self.user_portal, 'website_forum: wrong moderator_id when refusing')\n        self.assertEqual(post.create_uid.karma, init_karma, 'website_forum: wrong karma when refusing a post')\n\n    def test_mark_a_post_as_offensive(self):\n        Post = self.env['forum.post']\n        self.user_portal.karma = KARMA['ask']\n        post = Post.sudo(self.user_portal).create({\n            'name': \"Q0\",\n            'forum_id': self.forum.id,\n        })\n\n        # portal user mark a post as offensive: not allowed, unsufficient karma\n        with self.assertRaises(KarmaError):\n            post.sudo(self.user_portal).mark_as_offensive(12)\n\n        # portal user mark a post as offensive\n        self.user_portal.karma = KARMA['moderate']\n        post.state = 'flagged'\n        init_karma = post.create_uid.karma\n        post.sudo(self.user_portal).mark_as_offensive(12)\n        self.assertEqual(post.state, 'offensive', 'website_forum: wrong state when marking a post as offensive')\n        self.assertEqual(post.create_uid.karma, init_karma + KARMA['gen_ans_flag'], 'website_forum: wrong karma when marking a post as offensive')\n\n    def test_convert_answer_to_comment_crash(self):\n        Post = self.env['forum.post']\n\n        # converting a question does nothing\n        new_msg = self.post.sudo(self.user_portal).convert_answer_to_comment()\n        self.assertEqual(new_msg.id, False, 'website_forum: question to comment conversion failed')\n        self.assertEqual(Post.search([('name', '=', 'TestQuestion')])[0].forum_id.name, 'TestForum', 'website_forum: question to comment conversion failed')\n\n        with self.assertRaises(KarmaError):\n            self.answer.sudo(self.user_portal).convert_answer_to_comment()\n\n    def test_convert_answer_to_comment(self):\n        self.user_portal.karma = KARMA['com_conv_all']\n        post_author = self.answer.create_uid.partner_id\n        new_msg = self.answer.sudo(self.user_portal).convert_answer_to_comment()\n        self.assertEqual(len(new_msg), 1, 'website_forum: wrong answer to comment conversion')\n        self.assertEqual(new_msg.author_id, post_author, 'website_forum: wrong answer to comment conversion')\n        self.assertIn('I am an anteater', new_msg.body, 'website_forum: wrong answer to comment conversion')\n\n    def test_edit_post_crash(self):\n        with self.assertRaises(KarmaError):\n            self.post.sudo(self.user_portal).write({'name': 'I am not your father.'})\n\n    def test_edit_post(self):\n        self.post.create_uid.karma = KARMA['edit_own']\n        self.post.write({'name': 'Actually I am your dog.'})\n        self.user_portal.karma = KARMA['edit_all']\n        self.post.sudo(self.user_portal).write({'name': 'Actually I am your cat.'})\n\n    def test_close_post_crash(self):\n        with self.assertRaises(KarmaError):\n            self.post.sudo(self.user_portal).close(None)\n\n    def test_close_post_own(self):\n        self.post.create_uid.karma = KARMA['close_own']\n        self.post.close(None)\n\n    def test_close_post_all(self):\n        self.user_portal.karma = KARMA['close_all']\n        self.post.sudo(self.user_portal).close(None)\n\n    def test_deactivate_post_crash(self):\n        with self.assertRaises(KarmaError):\n            self.post.sudo(self.user_portal).write({'active': False})\n\n    def test_deactivate_post_own(self):\n        self.post.create_uid.karma = KARMA['unlink_own']\n        self.post.write({'active': False})\n\n    def test_deactivate_post_all(self):\n        self.user_portal.karma = KARMA['unlink_all']\n        self.post.sudo(self.user_portal).write({'active': False})\n\n    def test_unlink_post_crash(self):\n        with self.assertRaises(KarmaError):\n            self.post.sudo(self.user_portal).unlink()\n\n    def test_unlink_post_own(self):\n        self.post.create_uid.karma = KARMA['unlink_own']\n        self.post.unlink()\n\n    def test_unlink_post_all(self):\n        self.user_portal.karma = KARMA['unlink_all']\n        self.post.sudo(self.user_portal).unlink()\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_forum.py", "id": "620f7be074fa86e8459017d2af5f66bc", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_forum/tests/test_forum.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}