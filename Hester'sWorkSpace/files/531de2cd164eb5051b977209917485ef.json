{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom ..utils import (\n    int_or_none,\n    str_to_int,\n)\nfrom .keezmovies import KeezMoviesIE\n\n\nclass Tube8IE(KeezMoviesIE):\n    _VALID_URL = r'https?://(?:www\\.)?tube8\\.com/(?:[^/]+/)+(?P<display_id>[^/]+)/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.tube8.com/teen/kasia-music-video/229795/',\n        'md5': '65e20c48e6abff62ed0c3965fff13a39',\n        'info_dict': {\n            'id': '229795',\n            'display_id': 'kasia-music-video',\n            'ext': 'mp4',\n            'description': 'hot teen Kasia grinding',\n            'uploader': 'unknown',\n            'title': 'Kasia music video',\n            'age_limit': 18,\n            'duration': 230,\n            'categories': ['Teen'],\n            'tags': ['dancing'],\n        },\n    }, {\n        'url': 'http://www.tube8.com/shemale/teen/blonde-cd-gets-kidnapped-by-two-blacks-and-punished-for-being-a-slutty-girl/19569151/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        webpage, info = self._extract_info(url)\n\n        if not info['title']:\n            info['title'] = self._html_search_regex(\n                r'videoTitle\\s*=\\s*\"([^\"]+)', webpage, 'title')\n\n        description = self._html_search_regex(\n            r'>Description:</strong>\\s*(.+?)\\s*<', webpage, 'description', fatal=False)\n        uploader = self._html_search_regex(\n            r'<span class=\"username\">\\s*(.+?)\\s*<',\n            webpage, 'uploader', fatal=False)\n\n        like_count = int_or_none(self._search_regex(\n            r'rupVar\\s*=\\s*\"(\\d+)\"', webpage, 'like count', fatal=False))\n        dislike_count = int_or_none(self._search_regex(\n            r'rdownVar\\s*=\\s*\"(\\d+)\"', webpage, 'dislike count', fatal=False))\n        view_count = str_to_int(self._search_regex(\n            r'<strong>Views: </strong>([\\d,\\.]+)\\s*</li>',\n            webpage, 'view count', fatal=False))\n        comment_count = str_to_int(self._search_regex(\n            r'<span id=\"allCommentsCount\">(\\d+)</span>',\n            webpage, 'comment count', fatal=False))\n\n        category = self._search_regex(\n            r'Category:\\s*</strong>\\s*<a[^>]+href=[^>]+>([^<]+)',\n            webpage, 'category', fatal=False)\n        categories = [category] if category else None\n\n        tags_str = self._search_regex(\n            r'(?s)Tags:\\s*</strong>(.+?)</(?!a)',\n            webpage, 'tags', fatal=False)\n        tags = [t for t in re.findall(\n            r'<a[^>]+href=[^>]+>([^<]+)', tags_str)] if tags_str else None\n\n        info.update({\n            'description': description,\n            'uploader': uploader,\n            'view_count': view_count,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'comment_count': comment_count,\n            'categories': categories,\n            'tags': tags,\n        })\n\n        return info\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom ..utils import (\n    int_or_none,\n    str_to_int,\n)\nfrom .keezmovies import KeezMoviesIE\n\n\nclass Tube8IE(KeezMoviesIE):\n    _VALID_URL = r'https?://(?:www\\.)?tube8\\.com/(?:[^/]+/)+(?P<display_id>[^/]+)/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.tube8.com/teen/kasia-music-video/229795/',\n        'md5': '65e20c48e6abff62ed0c3965fff13a39',\n        'info_dict': {\n            'id': '229795',\n            'display_id': 'kasia-music-video',\n            'ext': 'mp4',\n            'description': 'hot teen Kasia grinding',\n            'uploader': 'unknown',\n            'title': 'Kasia music video',\n            'age_limit': 18,\n            'duration': 230,\n            'categories': ['Teen'],\n            'tags': ['dancing'],\n        },\n    }, {\n        'url': 'http://www.tube8.com/shemale/teen/blonde-cd-gets-kidnapped-by-two-blacks-and-punished-for-being-a-slutty-girl/19569151/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        webpage, info = self._extract_info(url)\n\n        if not info['title']:\n            info['title'] = self._html_search_regex(\n                r'videoTitle\\s*=\\s*\"([^\"]+)', webpage, 'title')\n\n        description = self._html_search_regex(\n            r'>Description:</strong>\\s*(.+?)\\s*<', webpage, 'description', fatal=False)\n        uploader = self._html_search_regex(\n            r'<span class=\"username\">\\s*(.+?)\\s*<',\n            webpage, 'uploader', fatal=False)\n\n        like_count = int_or_none(self._search_regex(\n            r'rupVar\\s*=\\s*\"(\\d+)\"', webpage, 'like count', fatal=False))\n        dislike_count = int_or_none(self._search_regex(\n            r'rdownVar\\s*=\\s*\"(\\d+)\"', webpage, 'dislike count', fatal=False))\n        view_count = str_to_int(self._search_regex(\n            r'<strong>Views: </strong>([\\d,\\.]+)\\s*</li>',\n            webpage, 'view count', fatal=False))\n        comment_count = str_to_int(self._search_regex(\n            r'<span id=\"allCommentsCount\">(\\d+)</span>',\n            webpage, 'comment count', fatal=False))\n\n        category = self._search_regex(\n            r'Category:\\s*</strong>\\s*<a[^>]+href=[^>]+>([^<]+)',\n            webpage, 'category', fatal=False)\n        categories = [category] if category else None\n\n        tags_str = self._search_regex(\n            r'(?s)Tags:\\s*</strong>(.+?)</(?!a)',\n            webpage, 'tags', fatal=False)\n        tags = [t for t in re.findall(\n            r'<a[^>]+href=[^>]+>([^<]+)', tags_str)] if tags_str else None\n\n        info.update({\n            'description': description,\n            'uploader': uploader,\n            'view_count': view_count,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'comment_count': comment_count,\n            'categories': categories,\n            'tags': tags,\n        })\n\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tube8.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tube8.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}