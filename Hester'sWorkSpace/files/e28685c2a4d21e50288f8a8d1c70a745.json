{"author": "tgalal", "code": "from yowsup.common import YowConstants\nfrom yowsup.layers import YowLayerEvent, YowProtocolLayer, EventCallback\nfrom .keystream import KeyStream\nfrom yowsup.common.tools import TimeTools\nfrom .layer_crypt import YowCryptLayer\nfrom yowsup.layers.network import YowNetworkLayer\nfrom .autherror import AuthError\nfrom .protocolentities import *\nfrom yowsup.common.tools import StorageTools\nfrom yowsup.env import YowsupEnv\nfrom .layer_interface_authentication import YowAuthenticationProtocolLayerInterface\nfrom .protocolentities import StreamErrorProtocolEntity\nimport base64\n\nclass YowAuthenticationProtocolLayer(YowProtocolLayer):\n    EVENT_LOGIN      = \"org.openwhatsapp.yowsup.event.auth.login\"\n    EVENT_AUTHED  = \"org.openwhatsapp.yowsup.event.auth.authed\"\n    PROP_CREDENTIALS = \"org.openwhatsapp.yowsup.prop.auth.credentials\"\n    PROP_PASSIVE = \"org.openwhatsapp.yowsup.prop.auth.passive\"\n\n    def __init__(self):\n        handleMap = {\n            \"stream:features\": (self.handleStreamFeatures, None),\n            \"failure\": (self.handleFailure, None),\n            \"success\": (self.handleSuccess, None),\n            \"challenge\": (self.handleChallenge, None),\n            \"stream:error\": (self.handleStreamError, None),\n        }\n        super(YowAuthenticationProtocolLayer, self).__init__(handleMap)\n        self.interface = YowAuthenticationProtocolLayerInterface(self)\n        self.credentials = None \n        self._credentials = None \n\n    def __str__(self):\n        return \"Authentication Layer\"\n\n    def __getCredentials(self, credentials = None):\n        u, pb64 = credentials or self.getProp(YowAuthenticationProtocolLayer.PROP_CREDENTIALS)\n        if type(pb64) is str:\n            pb64 = pb64.encode()\n        password = base64.b64decode(pb64)\n        return (u, bytearray(password))\n\n    def setCredentials(self, credentials):\n        self.setProp(YowAuthenticationProtocolLayer.PROP_CREDENTIALS, credentials) \n        self._credentials = self.__getCredentials(credentials)\n\n    def getUsername(self, full = False):\n        if self._credentials:\n            return self._credentials[0] if not full else (\"%s@%s\" % (self._credentials[0], YowConstants.WHATSAPP_SERVER))\n        else:\n            prop = self.getProp(YowAuthenticationProtocolLayer.PROP_CREDENTIALS)\n            return prop[0] if prop else None\n\n    @EventCallback(YowNetworkLayer.EVENT_STATE_CONNECTED)\n    def onConnected(self, yowLayerEvent):\n        self.login()\n\n    \n    def login(self):\n        self.credentials = self._credentials or self.__getCredentials()\n        self._sendFeatures()\n        self._sendAuth()\n\n    \n    def handleStreamFeatures(self, node):\n        nodeEntity = StreamFeaturesProtocolEntity.fromProtocolTreeNode(node)\n        self.toUpper(nodeEntity)\n\n    def handleSuccess(self, node):\n        if(node.data != None): StorageTools.writeNonce(self.credentials[0],node.data)\n        successEvent = YowLayerEvent(self.__class__.EVENT_AUTHED, passive = self.getProp(self.__class__.PROP_PASSIVE))\n        self.broadcastEvent(successEvent)\n        nodeEntity = SuccessProtocolEntity.fromProtocolTreeNode(node)\n        self.toUpper(nodeEntity)\n\n    def handleFailure(self, node):\n        nodeEntity = FailureProtocolEntity.fromProtocolTreeNode(node)\n        self.toUpper(nodeEntity)\n        self.broadcastEvent(YowLayerEvent(YowNetworkLayer.EVENT_STATE_DISCONNECT, reason = \"Authentication Failure\"))\n        raise AuthError(nodeEntity.getReason())\n\n    def handleChallenge(self, node):\n        nodeEntity = ChallengeProtocolEntity.fromProtocolTreeNode(node)\n        self._sendResponse(nodeEntity.getNonce())\n\n    def handleStreamError(self, node):\n        nodeEntity = StreamErrorProtocolEntity.fromProtocolTreeNode(node)\n        errorType = nodeEntity.getErrorType()\n\n        if not errorType:\n            raise AuthError(\"Unhandled stream:error node:\\n%s\" % node)\n\n        self.toUpper(nodeEntity)\n\n    \n    def _sendFeatures(self):\n        self.entityToLower(StreamFeaturesProtocolEntity([]))\n\n    def _sendAuth(self):\n        passive = self.getProp(self.__class__.PROP_PASSIVE, False)\n        nonce = StorageTools.getNonce(self.credentials[0])\n\n        if nonce == None:\n            self.entityToLower(AuthProtocolEntity(self.credentials[0], passive=passive))\n        else:\n            inputKey, outputKey, authBlob = self.generateAuthBlob(nonce)\n            \n            self.broadcastEvent(YowLayerEvent(YowCryptLayer.EVENT_KEYS_READY, keys = (inputKey, None)))\n            self.entityToLower(AuthProtocolEntity(self.credentials[0], passive=passive, nonce=authBlob))\n            self.broadcastEvent(YowLayerEvent(YowCryptLayer.EVENT_KEYS_READY, keys = (inputKey, outputKey)))\n\n\n    def _sendResponse(self,nonce):\n        inputKey, outputKey, authBlob = self.generateAuthBlob(nonce)\n        responseEntity = ResponseProtocolEntity(authBlob)\n\n        \n        self.broadcastEvent(YowLayerEvent(YowCryptLayer.EVENT_KEYS_READY, keys = (inputKey, None)))\n        self.entityToLower(responseEntity)\n        self.broadcastEvent(YowLayerEvent(YowCryptLayer.EVENT_KEYS_READY, keys = (inputKey, outputKey)))\n        #YowCryptLayer.setProp(\"outputKey\", outputKey)\n\n\n    def generateAuthBlob(self, nonce):\n        keys = KeyStream.generateKeys(self.credentials[1], nonce)\n        currentEnv = YowsupEnv.getCurrent()\n\n        inputKey = KeyStream(keys[2], keys[3])\n        outputKey = KeyStream(keys[0], keys[1])\n\n        #YowCryptLayer.setProp(\"inputKey\", inputKey)\n\n\n        nums = bytearray(4)\n\n        #nums = [0] * 4\n\n\n        username_bytes = list(map(ord, self.credentials[0]))\n        nums.extend(username_bytes)\n        nums.extend(nonce)\n\n        utcNow = str(int(TimeTools.utcTimestamp()))\n        time_bytes =  list(map(ord, utcNow))\n        nums.extend(time_bytes)\n\n        strCat = \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n        strCat += currentEnv.getOSVersion() + \"\\x00\"\n        strCat += currentEnv.getManufacturer() + \"\\x00\"\n        strCat += currentEnv.getDeviceName() + \"\\x00\"\n        strCat += currentEnv.getBuildVersion()\n        nums.extend(list(map(ord, strCat)))\n\n        encoded = outputKey.encodeMessage(nums, 0, 4, len(nums) - 4)\n        authBlob = \"\".join(map(chr, encoded))\n\n        return (inputKey, outputKey, authBlob)\n", "comments": " left backwards compat   new style set   keep     general methods     recieved node handlers handlers    senders   prevent enr whole response   prevent enr whole response   yowcryptlayer setprop( outputkey   outputkey)   yowcryptlayer setprop( inputkey   inputkey)   nums    0    4 ", "content": "from yowsup.common import YowConstants\nfrom yowsup.layers import YowLayerEvent, YowProtocolLayer, EventCallback\nfrom .keystream import KeyStream\nfrom yowsup.common.tools import TimeTools\nfrom .layer_crypt import YowCryptLayer\nfrom yowsup.layers.network import YowNetworkLayer\nfrom .autherror import AuthError\nfrom .protocolentities import *\nfrom yowsup.common.tools import StorageTools\nfrom yowsup.env import YowsupEnv\nfrom .layer_interface_authentication import YowAuthenticationProtocolLayerInterface\nfrom .protocolentities import StreamErrorProtocolEntity\nimport base64\n\nclass YowAuthenticationProtocolLayer(YowProtocolLayer):\n    EVENT_LOGIN      = \"org.openwhatsapp.yowsup.event.auth.login\"\n    EVENT_AUTHED  = \"org.openwhatsapp.yowsup.event.auth.authed\"\n    PROP_CREDENTIALS = \"org.openwhatsapp.yowsup.prop.auth.credentials\"\n    PROP_PASSIVE = \"org.openwhatsapp.yowsup.prop.auth.passive\"\n\n    def __init__(self):\n        handleMap = {\n            \"stream:features\": (self.handleStreamFeatures, None),\n            \"failure\": (self.handleFailure, None),\n            \"success\": (self.handleSuccess, None),\n            \"challenge\": (self.handleChallenge, None),\n            \"stream:error\": (self.handleStreamError, None),\n        }\n        super(YowAuthenticationProtocolLayer, self).__init__(handleMap)\n        self.interface = YowAuthenticationProtocolLayerInterface(self)\n        self.credentials = None #left for backwards-compat\n        self._credentials = None #new style set\n\n    def __str__(self):\n        return \"Authentication Layer\"\n\n    def __getCredentials(self, credentials = None):\n        u, pb64 = credentials or self.getProp(YowAuthenticationProtocolLayer.PROP_CREDENTIALS)\n        if type(pb64) is str:\n            pb64 = pb64.encode()\n        password = base64.b64decode(pb64)\n        return (u, bytearray(password))\n\n    def setCredentials(self, credentials):\n        self.setProp(YowAuthenticationProtocolLayer.PROP_CREDENTIALS, credentials) #keep for now\n        self._credentials = self.__getCredentials(credentials)\n\n    def getUsername(self, full = False):\n        if self._credentials:\n            return self._credentials[0] if not full else (\"%s@%s\" % (self._credentials[0], YowConstants.WHATSAPP_SERVER))\n        else:\n            prop = self.getProp(YowAuthenticationProtocolLayer.PROP_CREDENTIALS)\n            return prop[0] if prop else None\n\n    @EventCallback(YowNetworkLayer.EVENT_STATE_CONNECTED)\n    def onConnected(self, yowLayerEvent):\n        self.login()\n\n    ## general methods\n    def login(self):\n        self.credentials = self._credentials or self.__getCredentials()\n        self._sendFeatures()\n        self._sendAuth()\n\n    ###recieved node handlers handlers\n    def handleStreamFeatures(self, node):\n        nodeEntity = StreamFeaturesProtocolEntity.fromProtocolTreeNode(node)\n        self.toUpper(nodeEntity)\n\n    def handleSuccess(self, node):\n        if(node.data != None): StorageTools.writeNonce(self.credentials[0],node.data)\n        successEvent = YowLayerEvent(self.__class__.EVENT_AUTHED, passive = self.getProp(self.__class__.PROP_PASSIVE))\n        self.broadcastEvent(successEvent)\n        nodeEntity = SuccessProtocolEntity.fromProtocolTreeNode(node)\n        self.toUpper(nodeEntity)\n\n    def handleFailure(self, node):\n        nodeEntity = FailureProtocolEntity.fromProtocolTreeNode(node)\n        self.toUpper(nodeEntity)\n        self.broadcastEvent(YowLayerEvent(YowNetworkLayer.EVENT_STATE_DISCONNECT, reason = \"Authentication Failure\"))\n        raise AuthError(nodeEntity.getReason())\n\n    def handleChallenge(self, node):\n        nodeEntity = ChallengeProtocolEntity.fromProtocolTreeNode(node)\n        self._sendResponse(nodeEntity.getNonce())\n\n    def handleStreamError(self, node):\n        nodeEntity = StreamErrorProtocolEntity.fromProtocolTreeNode(node)\n        errorType = nodeEntity.getErrorType()\n\n        if not errorType:\n            raise AuthError(\"Unhandled stream:error node:\\n%s\" % node)\n\n        self.toUpper(nodeEntity)\n\n    ##senders\n    def _sendFeatures(self):\n        self.entityToLower(StreamFeaturesProtocolEntity([]))\n\n    def _sendAuth(self):\n        passive = self.getProp(self.__class__.PROP_PASSIVE, False)\n        nonce = StorageTools.getNonce(self.credentials[0])\n\n        if nonce == None:\n            self.entityToLower(AuthProtocolEntity(self.credentials[0], passive=passive))\n        else:\n            inputKey, outputKey, authBlob = self.generateAuthBlob(nonce)\n            #to prevent enr whole response\n            self.broadcastEvent(YowLayerEvent(YowCryptLayer.EVENT_KEYS_READY, keys = (inputKey, None)))\n            self.entityToLower(AuthProtocolEntity(self.credentials[0], passive=passive, nonce=authBlob))\n            self.broadcastEvent(YowLayerEvent(YowCryptLayer.EVENT_KEYS_READY, keys = (inputKey, outputKey)))\n\n\n    def _sendResponse(self,nonce):\n        inputKey, outputKey, authBlob = self.generateAuthBlob(nonce)\n        responseEntity = ResponseProtocolEntity(authBlob)\n\n        #to prevent enr whole response\n        self.broadcastEvent(YowLayerEvent(YowCryptLayer.EVENT_KEYS_READY, keys = (inputKey, None)))\n        self.entityToLower(responseEntity)\n        self.broadcastEvent(YowLayerEvent(YowCryptLayer.EVENT_KEYS_READY, keys = (inputKey, outputKey)))\n        #YowCryptLayer.setProp(\"outputKey\", outputKey)\n\n\n    def generateAuthBlob(self, nonce):\n        keys = KeyStream.generateKeys(self.credentials[1], nonce)\n        currentEnv = YowsupEnv.getCurrent()\n\n        inputKey = KeyStream(keys[2], keys[3])\n        outputKey = KeyStream(keys[0], keys[1])\n\n        #YowCryptLayer.setProp(\"inputKey\", inputKey)\n\n\n        nums = bytearray(4)\n\n        #nums = [0] * 4\n\n\n        username_bytes = list(map(ord, self.credentials[0]))\n        nums.extend(username_bytes)\n        nums.extend(nonce)\n\n        utcNow = str(int(TimeTools.utcTimestamp()))\n        time_bytes =  list(map(ord, utcNow))\n        nums.extend(time_bytes)\n\n        strCat = \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n        strCat += currentEnv.getOSVersion() + \"\\x00\"\n        strCat += currentEnv.getManufacturer() + \"\\x00\"\n        strCat += currentEnv.getDeviceName() + \"\\x00\"\n        strCat += currentEnv.getBuildVersion()\n        nums.extend(list(map(ord, strCat)))\n\n        encoded = outputKey.encodeMessage(nums, 0, 4, len(nums) - 4)\n        authBlob = \"\".join(map(chr, encoded))\n\n        return (inputKey, outputKey, authBlob)\n", "description": "The python WhatsApp library", "file_name": "layer_authentication.py", "id": "e28685c2a4d21e50288f8a8d1c70a745", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/auth/layer_authentication.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}