{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    extract_attributes,\n    int_or_none,\n)\n\n\nclass PokemonIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?pokemon\\.com/[a-z]{2}(?:.*?play=(?P<id>[a-z0-9]{32})|/(?:[^/]+/)+(?P<display_id>[^/?\n    _TESTS = [{\n        'url': 'https://www.pokemon.com/us/pokemon-episodes/20_30-the-ol-raise-and-switch/',\n        'md5': '2fe8eaec69768b25ef898cda9c43062e',\n        'info_dict': {\n            'id': 'afe22e30f01c41f49d4f1d9eab5cd9a4',\n            'ext': 'mp4',\n            'title': 'The Ol\u2019 Raise and Switch!',\n            'description': 'md5:7db77f7107f98ba88401d3adc80ff7af',\n            'timestamp': 1511824728,\n            'upload_date': '20171127',\n        },\n        'add_id': ['LimelightMedia'],\n    }, {\n        \n        'url': 'https://www.pokemon.com/us/pokemon-episodes/pokemon-movies/pokemon-the-rise-of-darkrai-2008',\n        'info_dict': {\n            'id': '99f3bae270bf4e5097274817239ce9c8',\n            'ext': 'mp4',\n            'title': 'Pok\u00e9mon: The Rise of Darkrai',\n            'description': 'md5:ea8fbbf942e1e497d54b19025dd57d9d',\n            'timestamp': 1417778347,\n            'upload_date': '20141205',\n        },\n        'add_id': ['LimelightMedia'],\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.pokemon.com/uk/pokemon-episodes/?play=2e8b5c761f1d4a9286165d7748c1ece2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.pokemon.com/fr/episodes-pokemon/18_09-un-hiver-inattendu/',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.pokemon.com/de/pokemon-folgen/01_20-bye-bye-smettbo/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id, display_id = re.match(self._VALID_URL, url).groups()\n        webpage = self._download_webpage(url, video_id or display_id)\n        video_data = extract_attributes(self._search_regex(\n            r'(<[^>]+data-video-id=\"%s\"[^>]*>)' % (video_id if video_id else '[a-z0-9]{32}'),\n            webpage, 'video data element'))\n        video_id = video_data['data-video-id']\n        title = video_data.get('data-video-title') or self._html_search_meta(\n            'pkm-title', webpage, ' title', default=None) or self._search_regex(\n            r'<h1[^>]+\\bclass=[\"\\']us-title[^>]+>([^<]+)', webpage, 'title')\n        return {\n            '_type': 'url_transparent',\n            'id': video_id,\n            'url': 'limelight:media:%s' % video_id,\n            'title': title,\n            'description': video_data.get('data-video-summary'),\n            'thumbnail': video_data.get('data-video-poster'),\n            'series': 'Pok\u00e9mon',\n            'season_number': int_or_none(video_data.get('data-video-season')),\n            'episode': title,\n            'episode_number': int_or_none(video_data.get('data-video-episode')),\n            'ie_key': 'LimelightMedia',\n        }\n", "comments": "# coding: utf-8\n#&]+))'\n# no data-video-title\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    extract_attributes,\n    int_or_none,\n)\n\n\nclass PokemonIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?pokemon\\.com/[a-z]{2}(?:.*?play=(?P<id>[a-z0-9]{32})|/(?:[^/]+/)+(?P<display_id>[^/?#&]+))'\n    _TESTS = [{\n        'url': 'https://www.pokemon.com/us/pokemon-episodes/20_30-the-ol-raise-and-switch/',\n        'md5': '2fe8eaec69768b25ef898cda9c43062e',\n        'info_dict': {\n            'id': 'afe22e30f01c41f49d4f1d9eab5cd9a4',\n            'ext': 'mp4',\n            'title': 'The Ol\u2019 Raise and Switch!',\n            'description': 'md5:7db77f7107f98ba88401d3adc80ff7af',\n            'timestamp': 1511824728,\n            'upload_date': '20171127',\n        },\n        'add_id': ['LimelightMedia'],\n    }, {\n        # no data-video-title\n        'url': 'https://www.pokemon.com/us/pokemon-episodes/pokemon-movies/pokemon-the-rise-of-darkrai-2008',\n        'info_dict': {\n            'id': '99f3bae270bf4e5097274817239ce9c8',\n            'ext': 'mp4',\n            'title': 'Pok\u00e9mon: The Rise of Darkrai',\n            'description': 'md5:ea8fbbf942e1e497d54b19025dd57d9d',\n            'timestamp': 1417778347,\n            'upload_date': '20141205',\n        },\n        'add_id': ['LimelightMedia'],\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.pokemon.com/uk/pokemon-episodes/?play=2e8b5c761f1d4a9286165d7748c1ece2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.pokemon.com/fr/episodes-pokemon/18_09-un-hiver-inattendu/',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.pokemon.com/de/pokemon-folgen/01_20-bye-bye-smettbo/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id, display_id = re.match(self._VALID_URL, url).groups()\n        webpage = self._download_webpage(url, video_id or display_id)\n        video_data = extract_attributes(self._search_regex(\n            r'(<[^>]+data-video-id=\"%s\"[^>]*>)' % (video_id if video_id else '[a-z0-9]{32}'),\n            webpage, 'video data element'))\n        video_id = video_data['data-video-id']\n        title = video_data.get('data-video-title') or self._html_search_meta(\n            'pkm-title', webpage, ' title', default=None) or self._search_regex(\n            r'<h1[^>]+\\bclass=[\"\\']us-title[^>]+>([^<]+)', webpage, 'title')\n        return {\n            '_type': 'url_transparent',\n            'id': video_id,\n            'url': 'limelight:media:%s' % video_id,\n            'title': title,\n            'description': video_data.get('data-video-summary'),\n            'thumbnail': video_data.get('data-video-poster'),\n            'series': 'Pok\u00e9mon',\n            'season_number': int_or_none(video_data.get('data-video-season')),\n            'episode': title,\n            'episode_number': int_or_none(video_data.get('data-video-episode')),\n            'ie_key': 'LimelightMedia',\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "pokemon.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/pokemon.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}