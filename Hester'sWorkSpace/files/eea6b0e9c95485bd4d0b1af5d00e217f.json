{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    extract_attributes,\n    ExtractorError,\n    get_element_by_class,\n    js_to_json,\n)\n\n\nclass SteamIE(InfoExtractor):\n    _VALID_URL = r\n    _VIDEO_PAGE_TEMPLATE = 'http://store.steampowered.com/video/%s/'\n    _AGECHECK_TEMPLATE = 'http://store.steampowered.com/agecheck/video/%s/?snr=1_agecheck_agecheck__age-gate&ageDay=1&ageMonth=January&ageYear=1970'\n    _TESTS = [{\n        'url': 'http://store.steampowered.com/video/105600/',\n        'playlist': [\n            {\n                'md5': '6a294ee0c4b1f47f5bb76a65e31e3592',\n                'info_dict': {\n                    'id': '2040428',\n                    'ext': 'mp4',\n                    'title': 'Terraria 1.3 Trailer',\n                    'playlist_index': 1,\n                }\n            },\n            {\n                'md5': '911672b20064ca3263fa89650ba5a7aa',\n                'info_dict': {\n                    'id': '2029566',\n                    'ext': 'mp4',\n                    'title': 'Terraria 1.2 Trailer',\n                    'playlist_index': 2,\n                }\n            }\n        ],\n        'info_dict': {\n            'id': '105600',\n            'title': 'Terraria',\n        },\n        'params': {\n            'playlistend': 2,\n        }\n    }, {\n        'url': 'http://steamcommunity.com/sharedfiles/filedetails/?id=242472205',\n        'info_dict': {\n            'id': 'X8kpJBlzD2E',\n            'ext': 'mp4',\n            'upload_date': '20140617',\n            'title': 'FRONTIERS - Trapping',\n            'description': 'md5:bf6f7f773def614054089e5769c12a6e',\n            'uploader': 'AAD Productions',\n            'uploader_id': 'AtomicAgeDogGames',\n        }\n    }]\n\n    def _real_extract(self, url):\n        m = re.match(self._VALID_URL, url)\n        fileID = m.group('fileID')\n        if fileID:\n            videourl = url\n            playlist_id = fileID\n        else:\n            gameID = m.group('gameID')\n            playlist_id = gameID\n            videourl = self._VIDEO_PAGE_TEMPLATE % playlist_id\n        webpage = self._download_webpage(videourl, playlist_id)\n\n        if re.search('<h2>Please enter your birth date to continue:</h2>', webpage) is not None:\n            videourl = self._AGECHECK_TEMPLATE % playlist_id\n            self.report_age_confirmation()\n            webpage = self._download_webpage(videourl, playlist_id)\n\n        flash_vars = self._parse_json(self._search_regex(\n            r'(?s)rgMovieFlashvars\\s*=\\s*({.+?});', webpage,\n            'flash vars'), playlist_id, js_to_json)\n\n        playlist_title = None\n        entries = []\n        if fileID:\n            playlist_title = get_element_by_class('workshopItemTitle', webpage)\n            for movie in flash_vars.values():\n                if not movie:\n                    continue\n                youtube_id = movie.get('YOUTUBE_VIDEO_ID')\n                if not youtube_id:\n                    continue\n                entries.append({\n                    '_type': 'url',\n                    'url': youtube_id,\n                    'ie_key': 'Youtube',\n                })\n        else:\n            playlist_title = get_element_by_class('apphub_AppName', webpage)\n            for movie_id, movie in flash_vars.items():\n                if not movie:\n                    continue\n                video_id = self._search_regex(r'movie_(\\d+)', movie_id, 'video id', fatal=False)\n                title = movie.get('MOVIE_NAME')\n                if not title or not video_id:\n                    continue\n                entry = {\n                    'id': video_id,\n                    'title': title.replace('+', ' '),\n                }\n                formats = []\n                flv_url = movie.get('FILENAME')\n                if flv_url:\n                    formats.append({\n                        'format_id': 'flv',\n                        'url': flv_url,\n                    })\n                highlight_element = self._search_regex(\n                    r'(<div[^>]+id=\"highlight_movie_%s\"[^>]+>)' % video_id,\n                    webpage, 'highlight element', fatal=False)\n                if highlight_element:\n                    highlight_attribs = extract_attributes(highlight_element)\n                    if highlight_attribs:\n                        entry['thumbnail'] = highlight_attribs.get('data-poster')\n                        for quality in ('', '-hd'):\n                            for ext in ('webm', 'mp4'):\n                                video_url = highlight_attribs.get('data-%s%s-source' % (ext, quality))\n                                if video_url:\n                                    formats.append({\n                                        'format_id': ext + quality,\n                                        'url': video_url,\n                                    })\n                if not formats:\n                    continue\n                entry['formats'] = formats\n                entries.append(entry)\n        if not entries:\n            raise ExtractorError('Could not find any videos')\n\n        return self.playlist_result(entries, playlist_id, playlist_title)\n", "comments": "(?x)\n        https?://store\\.steampowered\\.com/\n            (agecheck/)?\n            (?P<urltype>video|app)/ #If the page is only for videos or for a game\n            (?P<gameID>\\d+)/?\n            (?P<videoID>\\d*)(?P<extra>\\??) # For urltype == video we sometimes get the videoID\n        |\n        https?://(?:www\\.)?steamcommunity\\.com/sharedfiles/filedetails/\\?id=(?P<fileID>[0-9]+)\n    \n \n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    extract_attributes,\n    ExtractorError,\n    get_element_by_class,\n    js_to_json,\n)\n\n\nclass SteamIE(InfoExtractor):\n    _VALID_URL = r\"\"\"(?x)\n        https?://store\\.steampowered\\.com/\n            (agecheck/)?\n            (?P<urltype>video|app)/ #If the page is only for videos or for a game\n            (?P<gameID>\\d+)/?\n            (?P<videoID>\\d*)(?P<extra>\\??) # For urltype == video we sometimes get the videoID\n        |\n        https?://(?:www\\.)?steamcommunity\\.com/sharedfiles/filedetails/\\?id=(?P<fileID>[0-9]+)\n    \"\"\"\n    _VIDEO_PAGE_TEMPLATE = 'http://store.steampowered.com/video/%s/'\n    _AGECHECK_TEMPLATE = 'http://store.steampowered.com/agecheck/video/%s/?snr=1_agecheck_agecheck__age-gate&ageDay=1&ageMonth=January&ageYear=1970'\n    _TESTS = [{\n        'url': 'http://store.steampowered.com/video/105600/',\n        'playlist': [\n            {\n                'md5': '6a294ee0c4b1f47f5bb76a65e31e3592',\n                'info_dict': {\n                    'id': '2040428',\n                    'ext': 'mp4',\n                    'title': 'Terraria 1.3 Trailer',\n                    'playlist_index': 1,\n                }\n            },\n            {\n                'md5': '911672b20064ca3263fa89650ba5a7aa',\n                'info_dict': {\n                    'id': '2029566',\n                    'ext': 'mp4',\n                    'title': 'Terraria 1.2 Trailer',\n                    'playlist_index': 2,\n                }\n            }\n        ],\n        'info_dict': {\n            'id': '105600',\n            'title': 'Terraria',\n        },\n        'params': {\n            'playlistend': 2,\n        }\n    }, {\n        'url': 'http://steamcommunity.com/sharedfiles/filedetails/?id=242472205',\n        'info_dict': {\n            'id': 'X8kpJBlzD2E',\n            'ext': 'mp4',\n            'upload_date': '20140617',\n            'title': 'FRONTIERS - Trapping',\n            'description': 'md5:bf6f7f773def614054089e5769c12a6e',\n            'uploader': 'AAD Productions',\n            'uploader_id': 'AtomicAgeDogGames',\n        }\n    }]\n\n    def _real_extract(self, url):\n        m = re.match(self._VALID_URL, url)\n        fileID = m.group('fileID')\n        if fileID:\n            videourl = url\n            playlist_id = fileID\n        else:\n            gameID = m.group('gameID')\n            playlist_id = gameID\n            videourl = self._VIDEO_PAGE_TEMPLATE % playlist_id\n        webpage = self._download_webpage(videourl, playlist_id)\n\n        if re.search('<h2>Please enter your birth date to continue:</h2>', webpage) is not None:\n            videourl = self._AGECHECK_TEMPLATE % playlist_id\n            self.report_age_confirmation()\n            webpage = self._download_webpage(videourl, playlist_id)\n\n        flash_vars = self._parse_json(self._search_regex(\n            r'(?s)rgMovieFlashvars\\s*=\\s*({.+?});', webpage,\n            'flash vars'), playlist_id, js_to_json)\n\n        playlist_title = None\n        entries = []\n        if fileID:\n            playlist_title = get_element_by_class('workshopItemTitle', webpage)\n            for movie in flash_vars.values():\n                if not movie:\n                    continue\n                youtube_id = movie.get('YOUTUBE_VIDEO_ID')\n                if not youtube_id:\n                    continue\n                entries.append({\n                    '_type': 'url',\n                    'url': youtube_id,\n                    'ie_key': 'Youtube',\n                })\n        else:\n            playlist_title = get_element_by_class('apphub_AppName', webpage)\n            for movie_id, movie in flash_vars.items():\n                if not movie:\n                    continue\n                video_id = self._search_regex(r'movie_(\\d+)', movie_id, 'video id', fatal=False)\n                title = movie.get('MOVIE_NAME')\n                if not title or not video_id:\n                    continue\n                entry = {\n                    'id': video_id,\n                    'title': title.replace('+', ' '),\n                }\n                formats = []\n                flv_url = movie.get('FILENAME')\n                if flv_url:\n                    formats.append({\n                        'format_id': 'flv',\n                        'url': flv_url,\n                    })\n                highlight_element = self._search_regex(\n                    r'(<div[^>]+id=\"highlight_movie_%s\"[^>]+>)' % video_id,\n                    webpage, 'highlight element', fatal=False)\n                if highlight_element:\n                    highlight_attribs = extract_attributes(highlight_element)\n                    if highlight_attribs:\n                        entry['thumbnail'] = highlight_attribs.get('data-poster')\n                        for quality in ('', '-hd'):\n                            for ext in ('webm', 'mp4'):\n                                video_url = highlight_attribs.get('data-%s%s-source' % (ext, quality))\n                                if video_url:\n                                    formats.append({\n                                        'format_id': ext + quality,\n                                        'url': video_url,\n                                    })\n                if not formats:\n                    continue\n                entry['formats'] = formats\n                entries.append(entry)\n        if not entries:\n            raise ExtractorError('Could not find any videos')\n\n        return self.playlist_result(entries, playlist_id, playlist_title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "steam.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/steam.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}