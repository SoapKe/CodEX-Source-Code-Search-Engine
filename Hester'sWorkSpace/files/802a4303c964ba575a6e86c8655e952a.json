{"author": "kivy", "code": "print('main.py was successfully called')\n\nimport os\nprint('imported os')\n\nfrom kivy import platform\n\nif platform == 'android':\n    print('contents of ./lib/python2.7/site-packages/ etc.')\n    print(os.listdir('./lib'))\n    print(os.listdir('./lib/python2.7'))\n    print(os.listdir('./lib/python2.7/site-packages'))\n\n    print('this dir is', os.path.abspath(os.curdir))\n\n    print('contents of this dir', os.listdir('./'))\n\n    with open('./lib/python2.7/site-packages/kivy/app.pyo', 'rb') as fileh:\n        print('app.pyo size is', len(fileh.read()))\n\nimport sys\nprint('pythonpath is', sys.path)\n\nimport kivy\nprint('imported kivy')\nprint('file is', kivy.__file__)\n\nfrom kivy.app import App\n\nfrom kivy.lang import Builder\nfrom kivy.properties import StringProperty\n\nfrom kivy.uix.popup import Popup\nfrom kivy.clock import Clock\n\nprint('Imported kivy')\nfrom kivy.utils import platform\nprint('platform is', platform)\n\n\nkv = '''\n\n\n\n<FixedSizeButton@Button>:\n    size_hint_y: None\n    height: dp(60)\n\n\nBoxLayout:\n    orientation: 'vertical'\n    BoxLayout:\n        size_hint_y: None\n        height: dp(50)\n        orientation: 'horizontal'\n        Button:\n            text: 'None'\n            on_press: Window.softinput_mode = ''\n        Button:\n            text: 'pan'\n            on_press: Window.softinput_mode = 'pan'\n        Button:\n            text: 'below_target'\n            on_press: Window.softinput_mode = 'below_target'\n        Button:\n            text: 'resize'\n            on_press: Window.softinput_mode = 'resize'\n    Widget:\n        Scatter:\n            id: scatter\n            size_hint: None, None\n            size: dp(300), dp(80)\n            on_parent: self.pos = (300, 100)\n            BoxLayout:\n                size: scatter.size\n                orientation: 'horizontal'\n                canvas:\n                    Color:\n                        rgba: 1, 0, 0, 1\n                    Rectangle:\n                        pos: 0, 0\n                        size: self.size\n                Widget:\n                    size_hint_x: None\n                    width: dp(30)\n                TextInput:\n                    text: 'type in me'\n'''\n\n\nclass ErrorPopup(Popup):\n    error_text = StringProperty('')\n\ndef raise_error(error):\n    print('ERROR:',  error)\n    ErrorPopup(error_text=error).open()\n\nclass TestApp(App):\n    def build(self):\n        root = Builder.load_string(kv)\n        Clock.schedule_interval(self.print_something, 2)\n        # Clock.schedule_interval(self.test_pyjnius, 5)\n        print('testing metrics')\n        from kivy.metrics import Metrics\n        print('dpi is', Metrics.dpi)\n        print('density is', Metrics.density)\n        print('fontscale is', Metrics.fontscale)\n        return root\n\n    def print_something(self, *args):\n        print('App print tick', Clock.get_boottime())\n\n    def on_pause(self):\n        return True\n\n    def test_pyjnius(self, *args):\n        try:\n            from jnius import autoclass\n        except ImportError:\n            raise_error('Could not import pyjnius')\n            return\n        \n        print('Attempting to vibrate with pyjnius')\n        # PythonActivity = autoclass('org.renpy.android.PythonActivity')\n        \n        PythonActivity = autoclass('org.kivy.android.PythonActivity')\n        activity = PythonActivity.mActivity\n        Intent = autoclass('android.content.Intent')\n        Context = autoclass('android.content.Context')\n        vibrator = activity.getSystemService(Context.VIBRATOR_SERVICE)\n\n        vibrator.vibrate(1000)\n\n    def test_ctypes(self, *args):\n        import ctypes\n            \n    def test_numpy(self, *args):\n        import numpy\n\n        print(numpy.zeros(5))\n        print(numpy.arange(5))\n        print(numpy.random.random((3, 3)))\n\nTestApp().run()\n", "comments": "      import metrics kivy metrics metrics   import window kivy core window window   fixedsizebutton button       size hint  none     height  dp(60)   boxlayout      orientation   vertical      boxlayout          size hint  none         height  dp(50)         orientation   horizontal          button              text   none              press  window softinput mode              button              text   pan              press  window softinput mode    pan          button              text   target              press  window softinput mode    target          button              text   resize              press  window softinput mode    resize      widget          scatter              id  scatter             size hint  none  none             size  dp(300)  dp(80)             parent  self pos   (300  100)             boxlayout                  size  scatter size                 orientation   horizontal                  canvas                      color                          rgba  1  0  0  1                     rectangle                          pos  0  0                         size  self size                 widget                      size hint x  none                     width  dp(30)                 textinput                      text   type         import metrics kivy metrics metrics    import window kivy core window window    clock schedule interval(self test pyjnius  5)    pythonactivity   autoclass( org renpy android pythonactivity )    activity   pythonactivity mactivity ", "content": "print('main.py was successfully called')\n\nimport os\nprint('imported os')\n\nfrom kivy import platform\n\nif platform == 'android':\n    print('contents of ./lib/python2.7/site-packages/ etc.')\n    print(os.listdir('./lib'))\n    print(os.listdir('./lib/python2.7'))\n    print(os.listdir('./lib/python2.7/site-packages'))\n\n    print('this dir is', os.path.abspath(os.curdir))\n\n    print('contents of this dir', os.listdir('./'))\n\n    with open('./lib/python2.7/site-packages/kivy/app.pyo', 'rb') as fileh:\n        print('app.pyo size is', len(fileh.read()))\n\nimport sys\nprint('pythonpath is', sys.path)\n\nimport kivy\nprint('imported kivy')\nprint('file is', kivy.__file__)\n\nfrom kivy.app import App\n\nfrom kivy.lang import Builder\nfrom kivy.properties import StringProperty\n\nfrom kivy.uix.popup import Popup\nfrom kivy.clock import Clock\n\nprint('Imported kivy')\nfrom kivy.utils import platform\nprint('platform is', platform)\n\n\nkv = '''\n#:import Metrics kivy.metrics.Metrics\n#:import Window kivy.core.window.Window\n\n<FixedSizeButton@Button>:\n    size_hint_y: None\n    height: dp(60)\n\n\nBoxLayout:\n    orientation: 'vertical'\n    BoxLayout:\n        size_hint_y: None\n        height: dp(50)\n        orientation: 'horizontal'\n        Button:\n            text: 'None'\n            on_press: Window.softinput_mode = ''\n        Button:\n            text: 'pan'\n            on_press: Window.softinput_mode = 'pan'\n        Button:\n            text: 'below_target'\n            on_press: Window.softinput_mode = 'below_target'\n        Button:\n            text: 'resize'\n            on_press: Window.softinput_mode = 'resize'\n    Widget:\n        Scatter:\n            id: scatter\n            size_hint: None, None\n            size: dp(300), dp(80)\n            on_parent: self.pos = (300, 100)\n            BoxLayout:\n                size: scatter.size\n                orientation: 'horizontal'\n                canvas:\n                    Color:\n                        rgba: 1, 0, 0, 1\n                    Rectangle:\n                        pos: 0, 0\n                        size: self.size\n                Widget:\n                    size_hint_x: None\n                    width: dp(30)\n                TextInput:\n                    text: 'type in me'\n'''\n\n\nclass ErrorPopup(Popup):\n    error_text = StringProperty('')\n\ndef raise_error(error):\n    print('ERROR:',  error)\n    ErrorPopup(error_text=error).open()\n\nclass TestApp(App):\n    def build(self):\n        root = Builder.load_string(kv)\n        Clock.schedule_interval(self.print_something, 2)\n        # Clock.schedule_interval(self.test_pyjnius, 5)\n        print('testing metrics')\n        from kivy.metrics import Metrics\n        print('dpi is', Metrics.dpi)\n        print('density is', Metrics.density)\n        print('fontscale is', Metrics.fontscale)\n        return root\n\n    def print_something(self, *args):\n        print('App print tick', Clock.get_boottime())\n\n    def on_pause(self):\n        return True\n\n    def test_pyjnius(self, *args):\n        try:\n            from jnius import autoclass\n        except ImportError:\n            raise_error('Could not import pyjnius')\n            return\n        \n        print('Attempting to vibrate with pyjnius')\n        # PythonActivity = autoclass('org.renpy.android.PythonActivity')\n        # activity = PythonActivity.mActivity\n        PythonActivity = autoclass('org.kivy.android.PythonActivity')\n        activity = PythonActivity.mActivity\n        Intent = autoclass('android.content.Intent')\n        Context = autoclass('android.content.Context')\n        vibrator = activity.getSystemService(Context.VIBRATOR_SERVICE)\n\n        vibrator.vibrate(1000)\n\n    def test_ctypes(self, *args):\n        import ctypes\n            \n    def test_numpy(self, *args):\n        import numpy\n\n        print(numpy.zeros(5))\n        print(numpy.arange(5))\n        print(numpy.random.random((3, 3)))\n\nTestApp().run()\n", "description": "Turn your Python application into an Android APK", "file_name": "main.py", "id": "802a4303c964ba575a6e86c8655e952a", "language": "Python", "project_name": "python-for-android", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/kivy-python-for-android/kivy-python-for-android-a036f44/testapps/testapp_keyboard/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:42:42Z", "url": "https://github.com/kivy/python-for-android", "wiki": false}