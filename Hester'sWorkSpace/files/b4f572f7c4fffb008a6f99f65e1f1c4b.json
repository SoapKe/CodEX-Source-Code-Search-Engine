{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport six\n\nfrom django.core.urlresolvers import reverse\n\nfrom sentry.models import AuthIdentity, AuthProvider\nfrom sentry.testutils import AuthProviderTestCase\nfrom sentry.utils.auth import SSO_SESSION_KEY\nfrom sentry.utils.linksign import generate_signed_link\n\n\nclass AuthenticationTest(AuthProviderTestCase):\n    def test_sso_auth_required(self):\n        user = self.create_user('foo@example.com', is_superuser=False)\n        organization = self.create_organization(name='foo')\n        team = self.create_team(name='bar', organization=organization)\n        project = self.create_project(\n            name='baz', organization=organization, teams=[team])\n        member = self.create_member(\n            user=user, organization=organization, teams=[team])\n        setattr(member.flags, 'sso:linked', True)\n        member.save()\n        group = self.create_group(project=project)\n        self.create_event(group=group)\n\n        auth_provider = AuthProvider.objects.create(\n            organization=organization,\n            provider='dummy',\n            flags=0,\n        )\n\n        AuthIdentity.objects.create(\n            auth_provider=auth_provider,\n            user=user,\n        )\n\n        self.login_as(user)\n\n        paths = (\n            '/api/0/organizations/{}/'.format(organization.slug),\n            '/api/0/projects/{}/{}/'.format(organization.slug, project.slug),\n            '/api/0/teams/{}/{}/'.format(organization.slug, team.slug),\n            '/api/0/issues/{}/'.format(group.id),\n            \n            '/api/0/issues/{}/events/latest/'.format(group.id),\n        )\n\n        for path in paths:\n            \n            \n            resp = self.client.get(path)\n            assert resp.status_code == 401, (resp.status_code, resp.content)\n\n        \n        user.update(is_superuser=True)\n        for path in paths:\n            resp = self.client.get(path)\n            assert resp.status_code == 401, (resp.status_code, resp.content)\n\n        # XXX(dcramer): using internal API as exposing a request object is hard\n        self.session[SSO_SESSION_KEY] = six.text_type(organization.id)\n        self.save_session()\n\n        \n        for path in paths:\n            resp = self.client.get(path)\n            assert resp.status_code == 200, (path,\n                                             resp.status_code, resp.content)\n\n    def test_sso_auth_required_signed_link(self):\n        user = self.create_user('foo@example.com', is_superuser=False)\n        organization = self.create_organization(name='foo')\n        team = self.create_team(name='bar', organization=organization)\n        project = self.create_project(\n            name='baz', organization=organization, teams=[team])\n        member = self.create_member(\n            user=user, organization=organization, teams=[team])\n        setattr(member.flags, 'sso:linked', True)\n        member.save()\n        group = self.create_group(project=project)\n        self.create_event(group=group)\n\n        auth_provider = AuthProvider.objects.create(\n            organization=organization,\n            provider='dummy',\n            flags=0,\n        )\n\n        AuthIdentity.objects.create(\n            auth_provider=auth_provider,\n            user=user,\n        )\n\n        self.login_as(user)\n\n        unsigned_link = reverse(\n            'sentry-api-0-project-fix-processing-issues',\n            kwargs={\n                'project_slug': project.slug,\n                'organization_slug': organization.slug,\n            }\n        )\n\n        resp = self.client.get(unsigned_link)\n        assert resp.status_code == 401, (resp.status_code, resp.content)\n\n        signed_link = generate_signed_link(\n            user,\n            'sentry-api-0-project-fix-processing-issues',\n            kwargs={\n                'project_slug': project.slug,\n                'organization_slug': organization.slug,\n            }\n        )\n\n        resp = self.client.get(signed_link)\n        assert resp.status_code == 200\n", "comments": "  uses internal api  upon time broken    redirecting user authentication form    verified specific organization    superuser still require sso member org    xxx(dcramer)  using internal api exposing request object hard    sso marked complete  able access dash ", "content": "from __future__ import absolute_import\n\nimport six\n\nfrom django.core.urlresolvers import reverse\n\nfrom sentry.models import AuthIdentity, AuthProvider\nfrom sentry.testutils import AuthProviderTestCase\nfrom sentry.utils.auth import SSO_SESSION_KEY\nfrom sentry.utils.linksign import generate_signed_link\n\n\nclass AuthenticationTest(AuthProviderTestCase):\n    def test_sso_auth_required(self):\n        user = self.create_user('foo@example.com', is_superuser=False)\n        organization = self.create_organization(name='foo')\n        team = self.create_team(name='bar', organization=organization)\n        project = self.create_project(\n            name='baz', organization=organization, teams=[team])\n        member = self.create_member(\n            user=user, organization=organization, teams=[team])\n        setattr(member.flags, 'sso:linked', True)\n        member.save()\n        group = self.create_group(project=project)\n        self.create_event(group=group)\n\n        auth_provider = AuthProvider.objects.create(\n            organization=organization,\n            provider='dummy',\n            flags=0,\n        )\n\n        AuthIdentity.objects.create(\n            auth_provider=auth_provider,\n            user=user,\n        )\n\n        self.login_as(user)\n\n        paths = (\n            '/api/0/organizations/{}/'.format(organization.slug),\n            '/api/0/projects/{}/{}/'.format(organization.slug, project.slug),\n            '/api/0/teams/{}/{}/'.format(organization.slug, team.slug),\n            '/api/0/issues/{}/'.format(group.id),\n            # this uses the internal API, which once upon a time was broken\n            '/api/0/issues/{}/events/latest/'.format(group.id),\n        )\n\n        for path in paths:\n            # we should be redirecting the user to the authentication form as they\n            # haven't verified this specific organization\n            resp = self.client.get(path)\n            assert resp.status_code == 401, (resp.status_code, resp.content)\n\n        # superuser should still require SSO as they're a member of the org\n        user.update(is_superuser=True)\n        for path in paths:\n            resp = self.client.get(path)\n            assert resp.status_code == 401, (resp.status_code, resp.content)\n\n        # XXX(dcramer): using internal API as exposing a request object is hard\n        self.session[SSO_SESSION_KEY] = six.text_type(organization.id)\n        self.save_session()\n\n        # now that SSO is marked as complete, we should be able to access dash\n        for path in paths:\n            resp = self.client.get(path)\n            assert resp.status_code == 200, (path,\n                                             resp.status_code, resp.content)\n\n    def test_sso_auth_required_signed_link(self):\n        user = self.create_user('foo@example.com', is_superuser=False)\n        organization = self.create_organization(name='foo')\n        team = self.create_team(name='bar', organization=organization)\n        project = self.create_project(\n            name='baz', organization=organization, teams=[team])\n        member = self.create_member(\n            user=user, organization=organization, teams=[team])\n        setattr(member.flags, 'sso:linked', True)\n        member.save()\n        group = self.create_group(project=project)\n        self.create_event(group=group)\n\n        auth_provider = AuthProvider.objects.create(\n            organization=organization,\n            provider='dummy',\n            flags=0,\n        )\n\n        AuthIdentity.objects.create(\n            auth_provider=auth_provider,\n            user=user,\n        )\n\n        self.login_as(user)\n\n        unsigned_link = reverse(\n            'sentry-api-0-project-fix-processing-issues',\n            kwargs={\n                'project_slug': project.slug,\n                'organization_slug': organization.slug,\n            }\n        )\n\n        resp = self.client.get(unsigned_link)\n        assert resp.status_code == 401, (resp.status_code, resp.content)\n\n        signed_link = generate_signed_link(\n            user,\n            'sentry-api-0-project-fix-processing-issues',\n            kwargs={\n                'project_slug': project.slug,\n                'organization_slug': organization.slug,\n            }\n        )\n\n        resp = self.client.get(signed_link)\n        assert resp.status_code == 200\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_api.py", "id": "b4f572f7c4fffb008a6f99f65e1f1c4b", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/integration/test_api.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}