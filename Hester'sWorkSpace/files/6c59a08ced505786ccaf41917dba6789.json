{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: ucs_mac_pool\nshort_description: Configures MAC address pools on Cisco UCS Manager\ndescription:\n- Configures MAC address pools and MAC address blocks on Cisco UCS Manager.\n- Examples can be used with the UCS Platform Emulator U(https://communities.cisco.com/ucspe).\nextends_documentation_fragment: ucs\noptions:\n  state:\n    description:\n    - If C(present), will verify MAC pool is present and will create if needed.\n    - If C(absent), will verify MAC pool is absent and will delete if needed.\n    choices: [present, absent]\n    default: present\n  name:\n    description:\n    - The name of the MAC pool.\n    - This name can be between 1 and 32 alphanumeric characters.\n    - \"You cannot use spaces or any special characters other than - (hyphen), \\\"_\\\" (underscore), : (colon), and . (period).\"\n    - You cannot change this name after the MAC pool is created.\n    required: yes\n  descrption:\n    description:\n    - A description of the MAC pool.\n    - Enter up to 256 characters.\n    - \"You can use any characters or spaces except the following:\"\n    - \"` (accent mark), \\ (backslash), ^ (carat), \\\" (double quote), = (equal sign), > (greater than), < (less than), or ' (single quote).\"\n    aliases: [ descr ]\n  order:\n    description:\n    - The Assignment Order field.\n    - \"This can be one of the following:\"\n    - \"default - Cisco UCS Manager selects a random identity from the pool.\"\n    - \"sequential - Cisco UCS Manager selects the lowest available identity from the pool.\"\n    choices: [default, sequential]\n    default: default\n  first_addr:\n    description:\n    - The first MAC address in the block of addresses.\n    - This is the From field in the UCS Manager MAC Blocks menu.\n  last_addr:\n    description:\n    - The last MAC address in the block of addresses.\n    - This is the To field in the UCS Manager Add MAC Blocks menu.\n  org_dn:\n    description:\n    - The distinguished name (dn) of the organization where the resource is assigned.\n    default: org-root\nrequirements:\n- ucsmsdk\nauthor:\n- David Soper (@dsoper2)\n- CiscoUcs (@CiscoUcs)\nversion_added: '2.5'\n'''\n\nEXAMPLES = r'''\n- name: Configure MAC address pool\n  ucs_mac_pool:\n    hostname: 172.16.143.150\n    username: admin\n    password: password\n    name: mac-A\n    first_addr: 00:25:B5:00:66:00\n    last_addr: 00:25:B5:00:67:F3\n    order: sequential\n\n- name: Remove MAC address pool\n  ucs_mac_pool:\n    hostname: 172.16.143.150\n    username: admin\n    password: password\n    name: mac-A\n    state: absent\n'''\n\nRETURN = r'''\n\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.remote_management.ucs import UCSModule, ucs_argument_spec\n\n\ndef main():\n    argument_spec = ucs_argument_spec\n    argument_spec.update(\n        org_dn=dict(type='str', default='org-root'),\n        name=dict(type='str', required=True),\n        descr=dict(type='str', default=''),\n        order=dict(type='str', default='default', choices=['default', 'sequential']),\n        first_addr=dict(type='str'),\n        last_addr=dict(type='str'),\n        state=dict(default='present', choices=['present', 'absent'], type='str'),\n    )\n    module = AnsibleModule(\n        argument_spec,\n        supports_check_mode=True,\n    )\n     UCSModule verifies ucsmsdk is present and exits on failure.  Imports are below ucs object creation.\n    ucs = UCSModule(module)\n\n    err = False\n\n    from ucsmsdk.mometa.macpool.MacpoolPool import MacpoolPool\n    from ucsmsdk.mometa.macpool.MacpoolBlock import MacpoolBlock\n\n    changed = False\n    try:\n        mo_exists = False\n        props_match = False\n         dn is <org_dn>/mac-pool-<name>\n        dn = module.params['org_dn'] + '/mac-pool-' + module.params['name']\n        mo = ucs.login_handle.query_dn(dn)\n        if mo:\n            mo_exists = True\n\n        if module.params['state'] == 'absent':\n            if mo_exists:\n                if not module.check_mode:\n                    ucs.login_handle.remove_mo(mo)\n                    ucs.login_handle.commit()\n                changed = True\n        else:\n            if mo_exists:\n                 check top-level mo props\n                kwargs = dict(assignment_order=module.params['order'])\n                kwargs['descr'] = module.params['descr']\n                if (mo.check_prop_match(**kwargs)):\n                     top-level props match, check next level mo/props\n                    if module.params['last_addr'] and module.params['first_addr']:\n                         mac address block specified, check properties\n                        block_dn = dn + '/block-' + module.params['first_addr'].upper() + '-' + module.params['last_addr'].upper()\n                        mo_1 = ucs.login_handle.query_dn(block_dn)\n                        if mo_1:\n                            props_match = True\n                    else:\n                         no MAC address block specified, but top-level props matched\n                        props_match = True\n\n            if not props_match:\n                if not module.check_mode:\n                     create if mo does not already exist\n                    mo = MacpoolPool(\n                        parent_mo_or_dn=module.params['org_dn'],\n                        name=module.params['name'],\n                        descr=module.params['descr'],\n                        assignment_order=module.params['order'],\n                    )\n\n                    if module.params['last_addr'] and module.params['first_addr']:\n                        mo_1 = MacpoolBlock(\n                            parent_mo_or_dn=mo,\n                            to=module.params['last_addr'],\n                            r_from=module.params['first_addr'],\n                        )\n\n                    ucs.login_handle.add_mo(mo, True)\n                    ucs.login_handle.commit()\n                changed = True\n\n    except Exception as e:\n        err = True\n        ucs.result['msg'] = \"setup error: %s \" % str(e)\n\n    ucs.result['changed'] = changed\n    if err:\n        module.fail_json(**ucs.result)\n    module.exit_json(**ucs.result)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  ucs mac pool short description  configures mac address pools cisco ucs manager description    configures mac address pools mac address blocks cisco ucs manager    examples used ucs platform emulator u(https   communities cisco com ucspe)  extends documentation fragment  ucs options    state      description        if c(present)  verify mac pool present create needed        if c(absent)  verify mac pool absent delete needed      choices   present  absent      default  present   name      description        the name mac pool        this name 1 32 alphanumeric characters         you cannot use spaces special characters   (hyphen)        (underscore)    (colon)    (period)         you cannot change name mac pool created      required  yes   descrption      description        a description mac pool        enter 256 characters         you use characters spaces except following            (accent mark)    (backslash)    (carat)     (double quote)    (equal sign)    (greater than)    (less than)    (single quote)       aliases    descr     order      description        the assignment order field         this one following          default   cisco ucs manager selects random identity pool          sequential   cisco ucs manager selects lowest available identity pool       choices   default  sequential      default  default   first addr      description        the first mac address block addresses        this from field ucs manager mac blocks menu    last addr      description        the last mac address block addresses        this to field ucs manager add mac blocks menu    org dn      description        the distinguished name (dn) organization resource assigned      default  org root requirements    ucsmsdk author    david soper ( dsoper2)   ciscoucs ( ciscoucs) version added   2 5       examples   r      name  configure mac address pool   ucs mac pool      hostname  172 16 143 150     username  admin     password  password     name  mac a     first addr  00 25 b5 00 66 00     last addr  00 25 b5 00 67 f3     order  sequential    name  remove mac address pool   ucs mac pool      hostname  172 16 143 150     username  admin     password  password     name  mac a     state  absent      return   r              usr bin python        coding  utf 8        gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)       ucsmodule verifies ucsmsdk present exits failure   imports ucs object creation     dn  org dn  mac pool  name     check top level mo props    top level props match  check next level mo props    mac address block specified  check properties    mac address block specified  top level props matched    create mo already exist ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: ucs_mac_pool\nshort_description: Configures MAC address pools on Cisco UCS Manager\ndescription:\n- Configures MAC address pools and MAC address blocks on Cisco UCS Manager.\n- Examples can be used with the UCS Platform Emulator U(https://communities.cisco.com/ucspe).\nextends_documentation_fragment: ucs\noptions:\n  state:\n    description:\n    - If C(present), will verify MAC pool is present and will create if needed.\n    - If C(absent), will verify MAC pool is absent and will delete if needed.\n    choices: [present, absent]\n    default: present\n  name:\n    description:\n    - The name of the MAC pool.\n    - This name can be between 1 and 32 alphanumeric characters.\n    - \"You cannot use spaces or any special characters other than - (hyphen), \\\"_\\\" (underscore), : (colon), and . (period).\"\n    - You cannot change this name after the MAC pool is created.\n    required: yes\n  descrption:\n    description:\n    - A description of the MAC pool.\n    - Enter up to 256 characters.\n    - \"You can use any characters or spaces except the following:\"\n    - \"` (accent mark), \\ (backslash), ^ (carat), \\\" (double quote), = (equal sign), > (greater than), < (less than), or ' (single quote).\"\n    aliases: [ descr ]\n  order:\n    description:\n    - The Assignment Order field.\n    - \"This can be one of the following:\"\n    - \"default - Cisco UCS Manager selects a random identity from the pool.\"\n    - \"sequential - Cisco UCS Manager selects the lowest available identity from the pool.\"\n    choices: [default, sequential]\n    default: default\n  first_addr:\n    description:\n    - The first MAC address in the block of addresses.\n    - This is the From field in the UCS Manager MAC Blocks menu.\n  last_addr:\n    description:\n    - The last MAC address in the block of addresses.\n    - This is the To field in the UCS Manager Add MAC Blocks menu.\n  org_dn:\n    description:\n    - The distinguished name (dn) of the organization where the resource is assigned.\n    default: org-root\nrequirements:\n- ucsmsdk\nauthor:\n- David Soper (@dsoper2)\n- CiscoUcs (@CiscoUcs)\nversion_added: '2.5'\n'''\n\nEXAMPLES = r'''\n- name: Configure MAC address pool\n  ucs_mac_pool:\n    hostname: 172.16.143.150\n    username: admin\n    password: password\n    name: mac-A\n    first_addr: 00:25:B5:00:66:00\n    last_addr: 00:25:B5:00:67:F3\n    order: sequential\n\n- name: Remove MAC address pool\n  ucs_mac_pool:\n    hostname: 172.16.143.150\n    username: admin\n    password: password\n    name: mac-A\n    state: absent\n'''\n\nRETURN = r'''\n#\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.remote_management.ucs import UCSModule, ucs_argument_spec\n\n\ndef main():\n    argument_spec = ucs_argument_spec\n    argument_spec.update(\n        org_dn=dict(type='str', default='org-root'),\n        name=dict(type='str', required=True),\n        descr=dict(type='str', default=''),\n        order=dict(type='str', default='default', choices=['default', 'sequential']),\n        first_addr=dict(type='str'),\n        last_addr=dict(type='str'),\n        state=dict(default='present', choices=['present', 'absent'], type='str'),\n    )\n    module = AnsibleModule(\n        argument_spec,\n        supports_check_mode=True,\n    )\n    # UCSModule verifies ucsmsdk is present and exits on failure.  Imports are below ucs object creation.\n    ucs = UCSModule(module)\n\n    err = False\n\n    from ucsmsdk.mometa.macpool.MacpoolPool import MacpoolPool\n    from ucsmsdk.mometa.macpool.MacpoolBlock import MacpoolBlock\n\n    changed = False\n    try:\n        mo_exists = False\n        props_match = False\n        # dn is <org_dn>/mac-pool-<name>\n        dn = module.params['org_dn'] + '/mac-pool-' + module.params['name']\n        mo = ucs.login_handle.query_dn(dn)\n        if mo:\n            mo_exists = True\n\n        if module.params['state'] == 'absent':\n            if mo_exists:\n                if not module.check_mode:\n                    ucs.login_handle.remove_mo(mo)\n                    ucs.login_handle.commit()\n                changed = True\n        else:\n            if mo_exists:\n                # check top-level mo props\n                kwargs = dict(assignment_order=module.params['order'])\n                kwargs['descr'] = module.params['descr']\n                if (mo.check_prop_match(**kwargs)):\n                    # top-level props match, check next level mo/props\n                    if module.params['last_addr'] and module.params['first_addr']:\n                        # mac address block specified, check properties\n                        block_dn = dn + '/block-' + module.params['first_addr'].upper() + '-' + module.params['last_addr'].upper()\n                        mo_1 = ucs.login_handle.query_dn(block_dn)\n                        if mo_1:\n                            props_match = True\n                    else:\n                        # no MAC address block specified, but top-level props matched\n                        props_match = True\n\n            if not props_match:\n                if not module.check_mode:\n                    # create if mo does not already exist\n                    mo = MacpoolPool(\n                        parent_mo_or_dn=module.params['org_dn'],\n                        name=module.params['name'],\n                        descr=module.params['descr'],\n                        assignment_order=module.params['order'],\n                    )\n\n                    if module.params['last_addr'] and module.params['first_addr']:\n                        mo_1 = MacpoolBlock(\n                            parent_mo_or_dn=mo,\n                            to=module.params['last_addr'],\n                            r_from=module.params['first_addr'],\n                        )\n\n                    ucs.login_handle.add_mo(mo, True)\n                    ucs.login_handle.commit()\n                changed = True\n\n    except Exception as e:\n        err = True\n        ucs.result['msg'] = \"setup error: %s \" % str(e)\n\n    ucs.result['changed'] = changed\n    if err:\n        module.fail_json(**ucs.result)\n    module.exit_json(**ucs.result)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "ucs_mac_pool.py", "id": "6c59a08ced505786ccaf41917dba6789", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/remote_management/ucs/ucs_mac_pool.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}