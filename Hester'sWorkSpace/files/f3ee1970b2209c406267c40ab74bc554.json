{"author": "ansible", "code": "\n  Copyright (c) 2017 Citrix Systems\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nfrom ansible.compat.tests.mock import patch, Mock, MagicMock, call\nfrom units.modules.utils import set_module_args\nfrom .netscaler_module import TestModule, nitro_base_patcher\n\nimport sys\n\nif sys.version_info[:2] != (2, 6):\n    import requests\n\n\nclass TestNetscalerSSLCertkeyModule(TestModule):\n\n    @classmethod\n    def setUpClass(cls):\n        class MockException(Exception):\n            pass\n\n        cls.MockException = MockException\n\n        m = MagicMock()\n        cls.server_mock = MagicMock()\n        cls.server_mock.__class__ = MagicMock(add=Mock())\n        nssrc_modules_mock = {\n            'nssrc.com.citrix.netscaler.nitro.resource.config.ssl': m,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.ssl.sslcertkey': m,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.ssl.sslcertkey.sslcertkey': m,\n        }\n\n        cls.nitro_specific_patcher = patch.dict(sys.modules, nssrc_modules_mock)\n        cls.nitro_base_patcher = nitro_base_patcher\n\n    @classmethod\n    def tearDownClass(cls):\n        cls.nitro_base_patcher.stop()\n        cls.nitro_specific_patcher.stop()\n\n    def setUp(self):\n        super(TestNetscalerSSLCertkeyModule, self).setUp()\n        self.nitro_base_patcher.start()\n        self.nitro_specific_patcher.start()\n\n         Setup minimal required arguments to pass AnsibleModule argument parsing\n\n    def tearDown(self):\n        super(TestNetscalerSSLCertkeyModule, self).tearDown()\n        self.nitro_base_patcher.stop()\n        self.nitro_specific_patcher.stop()\n\n    def test_graceful_nitro_api_import_error(self):\n         Stop nitro api patching to cause ImportError\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        self.nitro_base_patcher.stop()\n        self.nitro_specific_patcher.stop()\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n        self.module = netscaler_ssl_certkey\n        result = self.failed()\n        self.assertEqual(result['msg'], 'Could not load nitro python sdk')\n\n    def test_graceful_nitro_error_on_login(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        class MockException(Exception):\n            def __init__(self, *args, **kwargs):\n                self.errorcode = 0\n                self.message = ''\n\n        client_mock = Mock()\n        client_mock.login = Mock(side_effect=MockException)\n        m = Mock(return_value=client_mock)\n        with patch('ansible.modules.network.netscaler.netscaler_ssl_certkey.get_nitro_client', m):\n            with patch('ansible.modules.network.netscaler.netscaler_ssl_certkey.nitro_exception', MockException):\n                self.module = netscaler_ssl_certkey\n                result = self.failed()\n                self.assertTrue(result['msg'].startswith('nitro exception'), msg='nitro exception during login not handled properly')\n\n    def test_graceful_no_connection_error(self):\n\n        if sys.version_info[:2] == (2, 6):\n            self.skipTest('requests library not available under python2.6')\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        class MockException(Exception):\n            pass\n        client_mock = Mock()\n        attrs = {'login.side_effect': requests.exceptions.ConnectionError}\n        client_mock.configure_mock(**attrs)\n        m = Mock(return_value=client_mock)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            nitro_exception=MockException,\n        ):\n            self.module = netscaler_ssl_certkey\n            result = self.failed()\n            self.assertTrue(result['msg'].startswith('Connection error'), msg='Connection error was not handled gracefully')\n\n    def test_graceful_login_error(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        if sys.version_info[:2] == (2, 6):\n            self.skipTest('requests library not available under python2.6')\n\n        class MockException(Exception):\n            pass\n        client_mock = Mock()\n        attrs = {'login.side_effect': requests.exceptions.SSLError}\n        client_mock.configure_mock(**attrs)\n        m = Mock(return_value=client_mock)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            nitro_exception=MockException,\n        ):\n            self.module = netscaler_ssl_certkey\n            result = self.failed()\n            self.assertTrue(result['msg'].startswith('SSL Error'), msg='SSL Error was not handled gracefully')\n\n    def test_save_config_called_on_state_present(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_mock = Mock()\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            key_exists=Mock(side_effect=[False, True]),\n            key_identical=Mock(side_effect=[True]),\n            ConfigProxy=Mock(return_value=ssl_certkey_proxy_mock),\n            nitro_exception=self.MockException,\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            self.assertIn(call.save_config(), client_mock.mock_calls)\n\n    def test_save_config_called_on_state_absent(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='absent',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_mock = Mock()\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            key_exists=Mock(side_effect=[True, False]),\n            ConfigProxy=Mock(return_value=ssl_certkey_proxy_mock),\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            self.assertIn(call.save_config(), client_mock.mock_calls)\n\n    def test_save_config_not_called_on_state_present(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n            save_config=False,\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_mock = Mock()\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            key_exists=Mock(side_effect=[False, True]),\n            key_identical=Mock(side_effect=[True]),\n            ConfigProxy=Mock(return_value=ssl_certkey_proxy_mock),\n            nitro_exception=self.MockException,\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            self.assertNotIn(call.save_config(), client_mock.mock_calls)\n\n    def test_save_config_not_called_on_state_absent(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='absent',\n            save_config=False,\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_mock = Mock()\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            key_exists=Mock(side_effect=[True, False]),\n            ConfigProxy=Mock(return_value=ssl_certkey_proxy_mock),\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            self.assertNotIn(call.save_config(), client_mock.mock_calls)\n\n    def test_new_ssl_certkey_execution_flow(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            key_exists=Mock(side_effect=[False, True]),\n            key_identical=Mock(side_effect=[True]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            ssl_certkey_proxy_mock.assert_has_calls([call.add()])\n\n    def test_modified_server_execution_flow(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            diff_list=Mock(return_value={}),\n            get_immutables_intersection=Mock(return_value=[]),\n            key_exists=Mock(side_effect=[True, True]),\n            key_identical=Mock(side_effect=[False, True]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            ssl_certkey_proxy_mock.assert_has_calls([call.update()])\n\n    def test_absent_server_execution_flow(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='absent',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            diff_list=Mock(return_value={}),\n            get_immutables_intersection=Mock(return_value=[]),\n            key_exists=Mock(side_effect=[True, False]),\n            key_identical=Mock(side_effect=[False, True]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            ssl_certkey_proxy_mock.assert_has_calls([call.delete()])\n\n    def test_present_key_identical_flow(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            diff_list=Mock(return_value={}),\n            get_immutables_intersection=Mock(return_value=[]),\n            key_exists=Mock(side_effect=[True, True]),\n            key_identical=Mock(side_effect=[True, True]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            ssl_certkey_proxy_mock.assert_not_called()\n\n    def test_absent_server_noop_flow(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='absent',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            diff_list=Mock(return_value={}),\n            get_immutables_intersection=Mock(return_value=[]),\n            key_exists=Mock(side_effect=[False, False]),\n            key_identical=Mock(side_effect=[False, False]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            ssl_certkey_proxy_mock.assert_not_called()\n\n    def test_present_server_failed_update(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            nitro_exception=self.MockException,\n            get_nitro_client=m,\n            diff_list=Mock(return_value={}),\n            get_immutables_intersection=Mock(return_value=[]),\n            key_exists=Mock(side_effect=[True, True]),\n            key_identical=Mock(side_effect=[False, False]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            result = self.failed()\n            self.assertEqual(result['msg'], 'SSL certkey differs from configured')\n            self.assertTrue(result['failed'])\n\n    def test_present_server_failed_create(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            nitro_exception=self.MockException,\n            get_nitro_client=m,\n            diff_list=Mock(return_value={}),\n            get_immutables_intersection=Mock(return_value=[]),\n            key_exists=Mock(side_effect=[False, False]),\n            key_identical=Mock(side_effect=[False, False]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            result = self.failed()\n            self.assertEqual(result['msg'], 'SSL certkey does not exist')\n            self.assertTrue(result['failed'])\n\n    def test_present_server_update_immutable_attribute(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            nitro_exception=self.MockException,\n            get_nitro_client=m,\n            diff_list=Mock(return_value={}),\n            get_immutables_intersection=Mock(return_value=['domain']),\n            key_exists=Mock(side_effect=[True, True]),\n            key_identical=Mock(side_effect=[False, False]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            result = self.failed()\n            self.assertEqual(result['msg'], 'Cannot update immutable attributes [\\'domain\\']')\n            self.assertTrue(result['failed'])\n\n    def test_absent_server_failed_delete(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='absent',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            nitro_exception=self.MockException,\n            get_nitro_client=m,\n            diff_list=Mock(return_value={}),\n            get_immutables_intersection=Mock(return_value=[]),\n            key_exists=Mock(side_effect=[True, True]),\n            key_identical=Mock(side_effect=[False, False]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            result = self.failed()\n            self.assertEqual(result['msg'], 'SSL certkey still exists')\n            self.assertTrue(result['failed'])\n\n    def test_graceful_nitro_exception_state_present(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        class MockException(Exception):\n            def __init__(self, *args, **kwargs):\n                self.errorcode = 0\n                self.message = ''\n\n        m = Mock(side_effect=MockException)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            key_exists=m,\n            nitro_exception=MockException\n        ):\n            self.module = netscaler_ssl_certkey\n            result = self.failed()\n            self.assertTrue(\n                result['msg'].startswith('nitro exception'),\n                msg='Nitro exception not caught on operation absent'\n            )\n\n    def test_graceful_nitro_exception_state_absent(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='absent',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        class MockException(Exception):\n            def __init__(self, *args, **kwargs):\n                self.errorcode = 0\n                self.message = ''\n\n        m = Mock(side_effect=MockException)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            key_exists=m,\n            nitro_exception=MockException\n        ):\n            self.module = netscaler_ssl_certkey\n            result = self.failed()\n            self.assertTrue(\n                result['msg'].startswith('nitro exception'),\n                msg='Nitro exception not caught on operation absent'\n            )\n", "comments": "   copyright (c) 2017 citrix systems       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          setup minimal required arguments pass ansiblemodule argument parsing    stop nitro api patching cause importerror ", "content": "\n#  Copyright (c) 2017 Citrix Systems\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nfrom ansible.compat.tests.mock import patch, Mock, MagicMock, call\nfrom units.modules.utils import set_module_args\nfrom .netscaler_module import TestModule, nitro_base_patcher\n\nimport sys\n\nif sys.version_info[:2] != (2, 6):\n    import requests\n\n\nclass TestNetscalerSSLCertkeyModule(TestModule):\n\n    @classmethod\n    def setUpClass(cls):\n        class MockException(Exception):\n            pass\n\n        cls.MockException = MockException\n\n        m = MagicMock()\n        cls.server_mock = MagicMock()\n        cls.server_mock.__class__ = MagicMock(add=Mock())\n        nssrc_modules_mock = {\n            'nssrc.com.citrix.netscaler.nitro.resource.config.ssl': m,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.ssl.sslcertkey': m,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.ssl.sslcertkey.sslcertkey': m,\n        }\n\n        cls.nitro_specific_patcher = patch.dict(sys.modules, nssrc_modules_mock)\n        cls.nitro_base_patcher = nitro_base_patcher\n\n    @classmethod\n    def tearDownClass(cls):\n        cls.nitro_base_patcher.stop()\n        cls.nitro_specific_patcher.stop()\n\n    def setUp(self):\n        super(TestNetscalerSSLCertkeyModule, self).setUp()\n        self.nitro_base_patcher.start()\n        self.nitro_specific_patcher.start()\n\n        # Setup minimal required arguments to pass AnsibleModule argument parsing\n\n    def tearDown(self):\n        super(TestNetscalerSSLCertkeyModule, self).tearDown()\n        self.nitro_base_patcher.stop()\n        self.nitro_specific_patcher.stop()\n\n    def test_graceful_nitro_api_import_error(self):\n        # Stop nitro api patching to cause ImportError\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        self.nitro_base_patcher.stop()\n        self.nitro_specific_patcher.stop()\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n        self.module = netscaler_ssl_certkey\n        result = self.failed()\n        self.assertEqual(result['msg'], 'Could not load nitro python sdk')\n\n    def test_graceful_nitro_error_on_login(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        class MockException(Exception):\n            def __init__(self, *args, **kwargs):\n                self.errorcode = 0\n                self.message = ''\n\n        client_mock = Mock()\n        client_mock.login = Mock(side_effect=MockException)\n        m = Mock(return_value=client_mock)\n        with patch('ansible.modules.network.netscaler.netscaler_ssl_certkey.get_nitro_client', m):\n            with patch('ansible.modules.network.netscaler.netscaler_ssl_certkey.nitro_exception', MockException):\n                self.module = netscaler_ssl_certkey\n                result = self.failed()\n                self.assertTrue(result['msg'].startswith('nitro exception'), msg='nitro exception during login not handled properly')\n\n    def test_graceful_no_connection_error(self):\n\n        if sys.version_info[:2] == (2, 6):\n            self.skipTest('requests library not available under python2.6')\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        class MockException(Exception):\n            pass\n        client_mock = Mock()\n        attrs = {'login.side_effect': requests.exceptions.ConnectionError}\n        client_mock.configure_mock(**attrs)\n        m = Mock(return_value=client_mock)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            nitro_exception=MockException,\n        ):\n            self.module = netscaler_ssl_certkey\n            result = self.failed()\n            self.assertTrue(result['msg'].startswith('Connection error'), msg='Connection error was not handled gracefully')\n\n    def test_graceful_login_error(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        if sys.version_info[:2] == (2, 6):\n            self.skipTest('requests library not available under python2.6')\n\n        class MockException(Exception):\n            pass\n        client_mock = Mock()\n        attrs = {'login.side_effect': requests.exceptions.SSLError}\n        client_mock.configure_mock(**attrs)\n        m = Mock(return_value=client_mock)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            nitro_exception=MockException,\n        ):\n            self.module = netscaler_ssl_certkey\n            result = self.failed()\n            self.assertTrue(result['msg'].startswith('SSL Error'), msg='SSL Error was not handled gracefully')\n\n    def test_save_config_called_on_state_present(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_mock = Mock()\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            key_exists=Mock(side_effect=[False, True]),\n            key_identical=Mock(side_effect=[True]),\n            ConfigProxy=Mock(return_value=ssl_certkey_proxy_mock),\n            nitro_exception=self.MockException,\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            self.assertIn(call.save_config(), client_mock.mock_calls)\n\n    def test_save_config_called_on_state_absent(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='absent',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_mock = Mock()\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            key_exists=Mock(side_effect=[True, False]),\n            ConfigProxy=Mock(return_value=ssl_certkey_proxy_mock),\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            self.assertIn(call.save_config(), client_mock.mock_calls)\n\n    def test_save_config_not_called_on_state_present(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n            save_config=False,\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_mock = Mock()\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            key_exists=Mock(side_effect=[False, True]),\n            key_identical=Mock(side_effect=[True]),\n            ConfigProxy=Mock(return_value=ssl_certkey_proxy_mock),\n            nitro_exception=self.MockException,\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            self.assertNotIn(call.save_config(), client_mock.mock_calls)\n\n    def test_save_config_not_called_on_state_absent(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='absent',\n            save_config=False,\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_mock = Mock()\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            key_exists=Mock(side_effect=[True, False]),\n            ConfigProxy=Mock(return_value=ssl_certkey_proxy_mock),\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            self.assertNotIn(call.save_config(), client_mock.mock_calls)\n\n    def test_new_ssl_certkey_execution_flow(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            key_exists=Mock(side_effect=[False, True]),\n            key_identical=Mock(side_effect=[True]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            ssl_certkey_proxy_mock.assert_has_calls([call.add()])\n\n    def test_modified_server_execution_flow(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            diff_list=Mock(return_value={}),\n            get_immutables_intersection=Mock(return_value=[]),\n            key_exists=Mock(side_effect=[True, True]),\n            key_identical=Mock(side_effect=[False, True]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            ssl_certkey_proxy_mock.assert_has_calls([call.update()])\n\n    def test_absent_server_execution_flow(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='absent',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            diff_list=Mock(return_value={}),\n            get_immutables_intersection=Mock(return_value=[]),\n            key_exists=Mock(side_effect=[True, False]),\n            key_identical=Mock(side_effect=[False, True]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            ssl_certkey_proxy_mock.assert_has_calls([call.delete()])\n\n    def test_present_key_identical_flow(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            diff_list=Mock(return_value={}),\n            get_immutables_intersection=Mock(return_value=[]),\n            key_exists=Mock(side_effect=[True, True]),\n            key_identical=Mock(side_effect=[True, True]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            ssl_certkey_proxy_mock.assert_not_called()\n\n    def test_absent_server_noop_flow(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='absent',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            get_nitro_client=m,\n            diff_list=Mock(return_value={}),\n            get_immutables_intersection=Mock(return_value=[]),\n            key_exists=Mock(side_effect=[False, False]),\n            key_identical=Mock(side_effect=[False, False]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            self.exited()\n            ssl_certkey_proxy_mock.assert_not_called()\n\n    def test_present_server_failed_update(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            nitro_exception=self.MockException,\n            get_nitro_client=m,\n            diff_list=Mock(return_value={}),\n            get_immutables_intersection=Mock(return_value=[]),\n            key_exists=Mock(side_effect=[True, True]),\n            key_identical=Mock(side_effect=[False, False]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            result = self.failed()\n            self.assertEqual(result['msg'], 'SSL certkey differs from configured')\n            self.assertTrue(result['failed'])\n\n    def test_present_server_failed_create(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            nitro_exception=self.MockException,\n            get_nitro_client=m,\n            diff_list=Mock(return_value={}),\n            get_immutables_intersection=Mock(return_value=[]),\n            key_exists=Mock(side_effect=[False, False]),\n            key_identical=Mock(side_effect=[False, False]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            result = self.failed()\n            self.assertEqual(result['msg'], 'SSL certkey does not exist')\n            self.assertTrue(result['failed'])\n\n    def test_present_server_update_immutable_attribute(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            nitro_exception=self.MockException,\n            get_nitro_client=m,\n            diff_list=Mock(return_value={}),\n            get_immutables_intersection=Mock(return_value=['domain']),\n            key_exists=Mock(side_effect=[True, True]),\n            key_identical=Mock(side_effect=[False, False]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            result = self.failed()\n            self.assertEqual(result['msg'], 'Cannot update immutable attributes [\\'domain\\']')\n            self.assertTrue(result['failed'])\n\n    def test_absent_server_failed_delete(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='absent',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        client_mock = Mock()\n\n        m = Mock(return_value=client_mock)\n\n        ssl_certkey_proxy_attrs = {\n            'diff_object.return_value': {},\n        }\n        ssl_certkey_proxy_mock = Mock()\n        ssl_certkey_proxy_mock.configure_mock(**ssl_certkey_proxy_attrs)\n        config_proxy_mock = Mock(return_value=ssl_certkey_proxy_mock)\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            nitro_exception=self.MockException,\n            get_nitro_client=m,\n            diff_list=Mock(return_value={}),\n            get_immutables_intersection=Mock(return_value=[]),\n            key_exists=Mock(side_effect=[True, True]),\n            key_identical=Mock(side_effect=[False, False]),\n            ConfigProxy=config_proxy_mock,\n        ):\n            self.module = netscaler_ssl_certkey\n            result = self.failed()\n            self.assertEqual(result['msg'], 'SSL certkey still exists')\n            self.assertTrue(result['failed'])\n\n    def test_graceful_nitro_exception_state_present(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='present',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        class MockException(Exception):\n            def __init__(self, *args, **kwargs):\n                self.errorcode = 0\n                self.message = ''\n\n        m = Mock(side_effect=MockException)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            key_exists=m,\n            nitro_exception=MockException\n        ):\n            self.module = netscaler_ssl_certkey\n            result = self.failed()\n            self.assertTrue(\n                result['msg'].startswith('nitro exception'),\n                msg='Nitro exception not caught on operation absent'\n            )\n\n    def test_graceful_nitro_exception_state_absent(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state='absent',\n        ))\n        from ansible.modules.network.netscaler import netscaler_ssl_certkey\n\n        class MockException(Exception):\n            def __init__(self, *args, **kwargs):\n                self.errorcode = 0\n                self.message = ''\n\n        m = Mock(side_effect=MockException)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_ssl_certkey',\n            key_exists=m,\n            nitro_exception=MockException\n        ):\n            self.module = netscaler_ssl_certkey\n            result = self.failed()\n            self.assertTrue(\n                result['msg'].startswith('nitro exception'),\n                msg='Nitro exception not caught on operation absent'\n            )\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_netscaler_ssl_certkey.py", "id": "f3ee1970b2209c406267c40ab74bc554", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/netscaler/test_netscaler_ssl_certkey.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}