{"author": "nvbn", "code": "import pytest\nfrom thefuck.types import Command\nfrom thefuck.rules.chmod_x import match, get_new_command\n\n\n@pytest.fixture\ndef file_exists(mocker):\n    return mocker.patch('os.path.exists', return_value=True)\n\n\n@pytest.fixture\ndef file_access(mocker):\n    return mocker.patch('os.access', return_value=False)\n\n\n@pytest.mark.usefixtures('file_exists', 'file_access')\n@pytest.mark.parametrize('script, output', [\n    ('./gradlew build', 'gradlew: Permission denied'),\n    ('./install.sh --help', 'install.sh: permission denied')])\ndef test_match(script, output):\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, output, exists, callable', [\n    ('./gradlew build', 'gradlew: Permission denied', True, True),\n    ('./gradlew build', 'gradlew: Permission denied', False, False),\n    ('./gradlew build', 'gradlew: error', True, False),\n    ('gradlew build', 'gradlew: Permission denied', True, False)])\ndef test_not_match(file_exists, file_access, script, output, exists, callable):\n    file_exists.return_value = exists\n    file_access.return_value = callable\n    assert not match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, result', [\n    ('./gradlew build', 'chmod +x gradlew && ./gradlew build'),\n    ('./install.sh --help', 'chmod +x install.sh && ./install.sh --help')])\ndef test_get_new_command(script, result):\n    assert get_new_command(Command(script, '')) == result\n", "comments": "", "content": "import pytest\nfrom thefuck.types import Command\nfrom thefuck.rules.chmod_x import match, get_new_command\n\n\n@pytest.fixture\ndef file_exists(mocker):\n    return mocker.patch('os.path.exists', return_value=True)\n\n\n@pytest.fixture\ndef file_access(mocker):\n    return mocker.patch('os.access', return_value=False)\n\n\n@pytest.mark.usefixtures('file_exists', 'file_access')\n@pytest.mark.parametrize('script, output', [\n    ('./gradlew build', 'gradlew: Permission denied'),\n    ('./install.sh --help', 'install.sh: permission denied')])\ndef test_match(script, output):\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, output, exists, callable', [\n    ('./gradlew build', 'gradlew: Permission denied', True, True),\n    ('./gradlew build', 'gradlew: Permission denied', False, False),\n    ('./gradlew build', 'gradlew: error', True, False),\n    ('gradlew build', 'gradlew: Permission denied', True, False)])\ndef test_not_match(file_exists, file_access, script, output, exists, callable):\n    file_exists.return_value = exists\n    file_access.return_value = callable\n    assert not match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, result', [\n    ('./gradlew build', 'chmod +x gradlew && ./gradlew build'),\n    ('./install.sh --help', 'chmod +x install.sh && ./install.sh --help')])\ndef test_get_new_command(script, result):\n    assert get_new_command(Command(script, '')) == result\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_chmod_x.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_chmod_x.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}