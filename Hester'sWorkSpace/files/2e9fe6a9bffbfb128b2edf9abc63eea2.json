{"author": "django", "code": "\n\nfrom django.db import models\n\n\nclass Author(models.Model):\n    Author_ID = models.AutoField(primary_key=True, db_column='Author ID')\n    first_name = models.CharField(max_length=30, db_column='firstname')\n    last_name = models.CharField(max_length=30, db_column='last')\n\n    def __str__(self):\n        return '%s %s' % (self.first_name, self.last_name)\n\n    class Meta:\n        db_table = 'my_author_table'\n        ordering = ('last_name', 'first_name')\n\n\nclass Article(models.Model):\n    Article_ID = models.AutoField(primary_key=True, db_column='Article ID')\n    headline = models.CharField(max_length=100)\n    authors = models.ManyToManyField(Author, db_table='my_m2m_table')\n    primary_author = models.ForeignKey(\n        Author,\n        models.SET_NULL,\n        db_column='Author ID',\n        related_name='primary_set',\n        null=True,\n    )\n\n    def __str__(self):\n        return self.headline\n\n    class Meta:\n        ordering = ('headline',)\n", "comments": "    custom column table names  if database column name different model attribute  use   db column   parameter  note use field name  column name  api usage   if database table name different model name  use   db table   meta attribute  this effect api used query database   if need use table name many many relationship differs default generated name  use   db table   parameter   manytomanyfield    this effect api querying database       ", "content": "\"\"\"\nCustom column/table names\n\nIf your database column name is different than your model attribute, use the\n``db_column`` parameter. Note that you'll use the field's name, not its column\nname, in API usage.\n\nIf your database table name is different than your model name, use the\n``db_table`` Meta attribute. This has no effect on the API used to\nquery the database.\n\nIf you need to use a table name for a many-to-many relationship that differs\nfrom the default generated name, use the ``db_table`` parameter on the\n``ManyToManyField``. This has no effect on the API for querying the database.\n\n\"\"\"\n\nfrom django.db import models\n\n\nclass Author(models.Model):\n    Author_ID = models.AutoField(primary_key=True, db_column='Author ID')\n    first_name = models.CharField(max_length=30, db_column='firstname')\n    last_name = models.CharField(max_length=30, db_column='last')\n\n    def __str__(self):\n        return '%s %s' % (self.first_name, self.last_name)\n\n    class Meta:\n        db_table = 'my_author_table'\n        ordering = ('last_name', 'first_name')\n\n\nclass Article(models.Model):\n    Article_ID = models.AutoField(primary_key=True, db_column='Article ID')\n    headline = models.CharField(max_length=100)\n    authors = models.ManyToManyField(Author, db_table='my_m2m_table')\n    primary_author = models.ForeignKey(\n        Author,\n        models.SET_NULL,\n        db_column='Author ID',\n        related_name='primary_set',\n        null=True,\n    )\n\n    def __str__(self):\n        return self.headline\n\n    class Meta:\n        ordering = ('headline',)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "2e9fe6a9bffbfb128b2edf9abc63eea2", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/custom_columns/models.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}