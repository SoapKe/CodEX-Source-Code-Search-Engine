{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\nr\"\"\"LSUN dataset formatting.\n\nDownload and format the LSUN dataset as follow:\ngit clone https://github.com/fyu/lsun.git\ncd lsun\npython2.7 download.py -c [CATEGORY]\n\nThen unzip the downloaded .zip files before executing:\npython2.7 data.py export [IMAGE_DB_PATH] --out_dir [LSUN_FOLDER] --flat\n\nThen use the script as follow:\npython lsun_formatting.py \\\n    --file_out [OUTPUT_FILE_PATH_PREFIX] \\\n    --fn_root [LSUN_FOLDER]\n\n\"\"\"\nfrom __future__ import print_function\n\nimport os\nimport os.path\n\nimport numpy\nimport skimage.transform\nfrom PIL import Image\nimport tensorflow as tf\n\n\ntf.flags.DEFINE_string(\"file_out\", \"\",\n                       \"Filename of the output .tfrecords file.\")\ntf.flags.DEFINE_string(\"fn_root\", \"\", \"Name of root file path.\")\n\nFLAGS = tf.flags.FLAGS\n\n\ndef _int64_feature(value):\n    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\n\ndef _bytes_feature(value):\n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\n\ndef main():\n    \"\"\"Main converter function.\"\"\"\n    fn_root = FLAGS.fn_root\n    img_fn_list = os.listdir(fn_root)\n    img_fn_list = [img_fn for img_fn in img_fn_list\n                   if img_fn.endswith('.webp')]\n    num_examples = len(img_fn_list)\n\n    n_examples_per_file = 10000\n    for example_idx, img_fn in enumerate(img_fn_list):\n        if example_idx % n_examples_per_file == 0:\n            file_out = \"%s_%05d.tfrecords\"\n            file_out = file_out % (FLAGS.file_out,\n                                   example_idx // n_examples_per_file)\n            print(\"Writing on:\", file_out)\n            writer = tf.python_io.TFRecordWriter(file_out)\n        if example_idx % 1000 == 0:\n            print(example_idx, \"/\", num_examples)\n        image_raw = numpy.array(Image.open(os.path.join(fn_root, img_fn)))\n        rows = image_raw.shape[0]\n        cols = image_raw.shape[1]\n        depth = image_raw.shape[2]\n        downscale = min(rows / 96., cols / 96.)\n        image_raw = skimage.transform.pyramid_reduce(image_raw, downscale)\n        image_raw *= 255.\n        image_raw = image_raw.astype(\"uint8\")\n        rows = image_raw.shape[0]\n        cols = image_raw.shape[1]\n        depth = image_raw.shape[2]\n        image_raw = image_raw.tostring()\n        example = tf.train.Example(\n            features=tf.train.Features(\n                feature={\n                    \"height\": _int64_feature(rows),\n                    \"width\": _int64_feature(cols),\n                    \"depth\": _int64_feature(depth),\n                    \"image_raw\": _bytes_feature(image_raw)\n                }\n            )\n        )\n        writer.write(example.SerializeToString())\n        if example_idx % n_examples_per_file == (n_examples_per_file - 1):\n            writer.close()\n    writer.close()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "   lsun dataset formatting   download format lsun dataset follow  git clone https   github com fyu lsun git cd lsun python2 7 download py  c  category   then unzip downloaded  zip files executing  python2 7 data py export  image db path    dir  lsun folder    flat  then use script follow  python lsun formatting py         file  output file path prefix          fn root  lsun folder         future   import print function  import os import os path  import numpy import skimage transform pil import image import tensorflow tf   tf flags define string( file                               filename output  tfrecords file  ) tf flags define string( fn root        name root file path  )  flags   tf flags flags   def  int64 feature(value)      return tf train feature(int64 list tf train int64list(value  value ))   def  bytes feature(value)      return tf train feature(bytes list tf train byteslist(value  value ))   def main()         main converter function        copyright 2016 google inc  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                    ", "content": "# Copyright 2016 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\nr\"\"\"LSUN dataset formatting.\n\nDownload and format the LSUN dataset as follow:\ngit clone https://github.com/fyu/lsun.git\ncd lsun\npython2.7 download.py -c [CATEGORY]\n\nThen unzip the downloaded .zip files before executing:\npython2.7 data.py export [IMAGE_DB_PATH] --out_dir [LSUN_FOLDER] --flat\n\nThen use the script as follow:\npython lsun_formatting.py \\\n    --file_out [OUTPUT_FILE_PATH_PREFIX] \\\n    --fn_root [LSUN_FOLDER]\n\n\"\"\"\nfrom __future__ import print_function\n\nimport os\nimport os.path\n\nimport numpy\nimport skimage.transform\nfrom PIL import Image\nimport tensorflow as tf\n\n\ntf.flags.DEFINE_string(\"file_out\", \"\",\n                       \"Filename of the output .tfrecords file.\")\ntf.flags.DEFINE_string(\"fn_root\", \"\", \"Name of root file path.\")\n\nFLAGS = tf.flags.FLAGS\n\n\ndef _int64_feature(value):\n    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\n\ndef _bytes_feature(value):\n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\n\ndef main():\n    \"\"\"Main converter function.\"\"\"\n    fn_root = FLAGS.fn_root\n    img_fn_list = os.listdir(fn_root)\n    img_fn_list = [img_fn for img_fn in img_fn_list\n                   if img_fn.endswith('.webp')]\n    num_examples = len(img_fn_list)\n\n    n_examples_per_file = 10000\n    for example_idx, img_fn in enumerate(img_fn_list):\n        if example_idx % n_examples_per_file == 0:\n            file_out = \"%s_%05d.tfrecords\"\n            file_out = file_out % (FLAGS.file_out,\n                                   example_idx // n_examples_per_file)\n            print(\"Writing on:\", file_out)\n            writer = tf.python_io.TFRecordWriter(file_out)\n        if example_idx % 1000 == 0:\n            print(example_idx, \"/\", num_examples)\n        image_raw = numpy.array(Image.open(os.path.join(fn_root, img_fn)))\n        rows = image_raw.shape[0]\n        cols = image_raw.shape[1]\n        depth = image_raw.shape[2]\n        downscale = min(rows / 96., cols / 96.)\n        image_raw = skimage.transform.pyramid_reduce(image_raw, downscale)\n        image_raw *= 255.\n        image_raw = image_raw.astype(\"uint8\")\n        rows = image_raw.shape[0]\n        cols = image_raw.shape[1]\n        depth = image_raw.shape[2]\n        image_raw = image_raw.tostring()\n        example = tf.train.Example(\n            features=tf.train.Features(\n                feature={\n                    \"height\": _int64_feature(rows),\n                    \"width\": _int64_feature(cols),\n                    \"depth\": _int64_feature(depth),\n                    \"image_raw\": _bytes_feature(image_raw)\n                }\n            )\n        )\n        writer.write(example.SerializeToString())\n        if example_idx % n_examples_per_file == (n_examples_per_file - 1):\n            writer.close()\n    writer.close()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Models and examples built with TensorFlow", "file_name": "lsun_formatting.py", "id": "5fbb0b7e9e11f54cfb8fa80e8fc24e0a", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/research/real_nvp/lsun_formatting.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}