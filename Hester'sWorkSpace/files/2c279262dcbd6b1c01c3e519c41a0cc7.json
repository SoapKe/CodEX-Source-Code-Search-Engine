{"author": "ansible", "code": "# Copyright (c) 2017 Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nimport sys\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import patch, MagicMock\n\nfrom ansible.module_utils.six.moves import builtins\nfrom ansible.module_utils._text import to_native\n\n\nimport pprint\n\nrealimport = builtins.__import__\n\n\nclass TestPostgres(unittest.TestCase):\n    def clear_modules(self, mods):\n        for mod in mods:\n            if mod in sys.modules:\n                del sys.modules[mod]\n\n    @patch.object(builtins, '__import__')\n    def test_postgres_pg2_missing_ensure_libs(self, mock_import):\n        def _mock_import(name, *args, **kwargs):\n            if name == 'psycopg2':\n                raise ImportError\n            return realimport(name, *args, **kwargs)\n\n        self.clear_modules(['psycopg2', 'ansible.module_utils.postgres'])\n        mock_import.side_effect = _mock_import\n        mod = builtins.__import__('ansible.module_utils.postgres')\n\n        self.assertFalse(mod.module_utils.postgres.HAS_PSYCOPG2)\n\n        with self.assertRaises(mod.module_utils.postgres.LibraryError) as context:\n            mod.module_utils.postgres.ensure_libs(sslrootcert=None)\n        self.assertIn('psycopg2 is not installed', to_native(context.exception))\n\n    @patch.object(builtins, '__import__')\n    def test_postgres_pg2_found_ensure_libs(self, mock_import):\n        def _mock_import(name, *args, **kwargs):\n            if 'psycopg2' in name:\n                return MagicMock()\n            return realimport(name, *args, **kwargs)\n\n        self.clear_modules(['psycopg2', 'ansible.module_utils.postgres'])\n        mock_import.side_effect = _mock_import\n        mod = builtins.__import__('ansible.module_utils.postgres')\n\n        self.assertTrue(mod.module_utils.postgres.HAS_PSYCOPG2)\n\n        ensure_ret = mod.module_utils.postgres.ensure_libs(sslrootcert=None)\n        self.assertFalse(ensure_ret)\n        pprint.pprint(ensure_ret)\n\n    @patch.object(builtins, '__import__')\n    def test_postgres_pg2_found_ensure_libs_old_version(self, mock_import):\n        def _mock_import(name, *args, **kwargs):\n            if 'psycopg2' in name:\n                m = MagicMock()\n                m.__version__ = '2.4.1'\n                return m\n            return realimport(name, *args, **kwargs)\n\n        self.clear_modules(['psycopg2', 'ansible.module_utils.postgres'])\n        mock_import.side_effect = _mock_import\n        mod = builtins.__import__('ansible.module_utils.postgres')\n\n        self.assertTrue(mod.module_utils.postgres.HAS_PSYCOPG2)\n\n        with self.assertRaises(mod.module_utils.postgres.LibraryError) as context:\n            mod.module_utils.postgres.ensure_libs(sslrootcert='yes')\n        self.assertIn('psycopg2 must be at least 2.4.3 in order to use', to_native(context.exception))\n", "comments": "  copyright (c) 2017 ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "# Copyright (c) 2017 Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nimport sys\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import patch, MagicMock\n\nfrom ansible.module_utils.six.moves import builtins\nfrom ansible.module_utils._text import to_native\n\n\nimport pprint\n\nrealimport = builtins.__import__\n\n\nclass TestPostgres(unittest.TestCase):\n    def clear_modules(self, mods):\n        for mod in mods:\n            if mod in sys.modules:\n                del sys.modules[mod]\n\n    @patch.object(builtins, '__import__')\n    def test_postgres_pg2_missing_ensure_libs(self, mock_import):\n        def _mock_import(name, *args, **kwargs):\n            if name == 'psycopg2':\n                raise ImportError\n            return realimport(name, *args, **kwargs)\n\n        self.clear_modules(['psycopg2', 'ansible.module_utils.postgres'])\n        mock_import.side_effect = _mock_import\n        mod = builtins.__import__('ansible.module_utils.postgres')\n\n        self.assertFalse(mod.module_utils.postgres.HAS_PSYCOPG2)\n\n        with self.assertRaises(mod.module_utils.postgres.LibraryError) as context:\n            mod.module_utils.postgres.ensure_libs(sslrootcert=None)\n        self.assertIn('psycopg2 is not installed', to_native(context.exception))\n\n    @patch.object(builtins, '__import__')\n    def test_postgres_pg2_found_ensure_libs(self, mock_import):\n        def _mock_import(name, *args, **kwargs):\n            if 'psycopg2' in name:\n                return MagicMock()\n            return realimport(name, *args, **kwargs)\n\n        self.clear_modules(['psycopg2', 'ansible.module_utils.postgres'])\n        mock_import.side_effect = _mock_import\n        mod = builtins.__import__('ansible.module_utils.postgres')\n\n        self.assertTrue(mod.module_utils.postgres.HAS_PSYCOPG2)\n\n        ensure_ret = mod.module_utils.postgres.ensure_libs(sslrootcert=None)\n        self.assertFalse(ensure_ret)\n        pprint.pprint(ensure_ret)\n\n    @patch.object(builtins, '__import__')\n    def test_postgres_pg2_found_ensure_libs_old_version(self, mock_import):\n        def _mock_import(name, *args, **kwargs):\n            if 'psycopg2' in name:\n                m = MagicMock()\n                m.__version__ = '2.4.1'\n                return m\n            return realimport(name, *args, **kwargs)\n\n        self.clear_modules(['psycopg2', 'ansible.module_utils.postgres'])\n        mock_import.side_effect = _mock_import\n        mod = builtins.__import__('ansible.module_utils.postgres')\n\n        self.assertTrue(mod.module_utils.postgres.HAS_PSYCOPG2)\n\n        with self.assertRaises(mod.module_utils.postgres.LibraryError) as context:\n            mod.module_utils.postgres.ensure_libs(sslrootcert='yes')\n        self.assertIn('psycopg2 must be at least 2.4.3 in order to use', to_native(context.exception))\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_postgresql.py", "id": "2c279262dcbd6b1c01c3e519c41a0cc7", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/module_utils/test_postgresql.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}