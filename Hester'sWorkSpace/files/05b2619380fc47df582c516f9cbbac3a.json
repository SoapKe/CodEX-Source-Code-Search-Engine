{"author": "gunthercox", "code": "\"\"\"\nTest ChatterBot's statement comparison algorithms.\n\"\"\"\n\nfrom unittest import TestCase, SkipTest\nfrom chatterbot.conversation import Statement\nfrom chatterbot import comparisons\n\n\nclass LevenshteinDistanceTestCase(TestCase):\n\n    def test_levenshtein_distance_statement_false(self):\n        \"\"\"\n        Falsy values should match by zero.\n        \"\"\"\n        statement = Statement('')\n        other_statement = Statement('Hello')\n\n        value = comparisons.levenshtein_distance(statement, other_statement)\n\n        self.assertEqual(value, 0)\n\n    def test_levenshtein_distance_other_statement_false(self):\n        \"\"\"\n        Falsy values should match by zero.\n        \"\"\"\n        statement = Statement('Hello')\n        other_statement = Statement('')\n\n        value = comparisons.levenshtein_distance(statement, other_statement)\n\n        self.assertEqual(value, 0)\n\n    def test_levenshtein_distance_statement_integer(self):\n        \"\"\"\n        Test that an exception is not raised if a statement is initialized\n        with an integer value as its text attribute.\n        \"\"\"\n        statement = Statement(2)\n        other_statement = Statement('Hello')\n\n        value = comparisons.levenshtein_distance(statement, other_statement)\n\n        self.assertEqual(value, 0)\n\n    def test_exact_match_different_capitalization(self):\n        \"\"\"\n        Test that text capitalization is ignored.\n        \"\"\"\n        statement = Statement('Hi HoW ArE yOu?')\n        other_statement = Statement('hI hOw are YoU?')\n\n        value = comparisons.levenshtein_distance(statement, other_statement)\n\n        self.assertEqual(value, 1)\n\n\nclass SynsetDistanceTestCase(TestCase):\n\n    def test_get_initialization_functions(self):\n        \"\"\"\n        Test that the initialization functions are returned.\n        \"\"\"\n        functions = comparisons.synset_distance.get_initialization_functions()\n\n        self.assertIn('initialize_nltk_wordnet', functions)\n\n    def test_exact_match_different_capitalization(self):\n        \"\"\"\n        Test that text capitalization is ignored.\n        \"\"\"\n        raise SkipTest('This test needs to be created.')\n\n\nclass SentimentComparisonTestCase(TestCase):\n\n    def test_exact_match_different_capitalization(self):\n        \"\"\"\n        Test that text capitalization is ignored.\n        \"\"\"\n        statement = Statement('Hi HoW ArE yOu?')\n        other_statement = Statement('hI hOw are YoU?')\n\n        \n        functions = comparisons.sentiment_comparison.get_initialization_functions()\n        for function in functions.values():\n            function()\n\n        value = comparisons.sentiment_comparison(statement, other_statement)\n\n        self.assertEqual(value, 1)\n\n\nclass JaccardSimilarityTestCase(TestCase):\n\n    def test_exact_match_different_capitalization(self):\n        \"\"\"\n        Test that text capitalization is ignored.\n        \"\"\"\n        raise SkipTest('This test needs to be created.')\n", "comments": "    test chatterbot statement comparison algorithms       unittest import testcase  skiptest chatterbot conversation import statement chatterbot import comparisons   class levenshteindistancetestcase(testcase)       def test levenshtein distance statement false(self)                      falsy values match zero                      statement   statement(  )         statement   statement( hello )          value   comparisons levenshtein distance(statement  statement)          self assertequal(value  0)      def test levenshtein distance statement false(self)                      falsy values match zero                      statement   statement( hello )         statement   statement(  )          value   comparisons levenshtein distance(statement  statement)          self assertequal(value  0)      def test levenshtein distance statement integer(self)                      test exception raised statement initialized         integer value text attribute                      statement   statement(2)         statement   statement( hello )          value   comparisons levenshtein distance(statement  statement)          self assertequal(value  0)      def test exact match different capitalization(self)                      test text capitalization ignored                      statement   statement( hi how are you  )         statement   statement( hi how you  )          value   comparisons levenshtein distance(statement  statement)          self assertequal(value  1)   class synsetdistancetestcase(testcase)       def test get initialization functions(self)                      test initialization functions returned                      functions   comparisons synset distance get initialization functions()          self assertin( initialize nltk wordnet   functions)      def test exact match different capitalization(self)                      test text capitalization ignored                      raise skiptest( this test needs created  )   class sentimentcomparisontestcase(testcase)       def test exact match different capitalization(self)                      test text capitalization ignored                      statement   statement( hi how are you  )         statement   statement( hi how you  )            prepare comparison         functions   comparisons sentiment comparison get initialization functions()         function functions values()              function()          value   comparisons sentiment comparison(statement  statement)          self assertequal(value  1)   class jaccardsimilaritytestcase(testcase)       def test exact match different capitalization(self)                      test text capitalization ignored                 prepare comparison ", "content": "\"\"\"\nTest ChatterBot's statement comparison algorithms.\n\"\"\"\n\nfrom unittest import TestCase, SkipTest\nfrom chatterbot.conversation import Statement\nfrom chatterbot import comparisons\n\n\nclass LevenshteinDistanceTestCase(TestCase):\n\n    def test_levenshtein_distance_statement_false(self):\n        \"\"\"\n        Falsy values should match by zero.\n        \"\"\"\n        statement = Statement('')\n        other_statement = Statement('Hello')\n\n        value = comparisons.levenshtein_distance(statement, other_statement)\n\n        self.assertEqual(value, 0)\n\n    def test_levenshtein_distance_other_statement_false(self):\n        \"\"\"\n        Falsy values should match by zero.\n        \"\"\"\n        statement = Statement('Hello')\n        other_statement = Statement('')\n\n        value = comparisons.levenshtein_distance(statement, other_statement)\n\n        self.assertEqual(value, 0)\n\n    def test_levenshtein_distance_statement_integer(self):\n        \"\"\"\n        Test that an exception is not raised if a statement is initialized\n        with an integer value as its text attribute.\n        \"\"\"\n        statement = Statement(2)\n        other_statement = Statement('Hello')\n\n        value = comparisons.levenshtein_distance(statement, other_statement)\n\n        self.assertEqual(value, 0)\n\n    def test_exact_match_different_capitalization(self):\n        \"\"\"\n        Test that text capitalization is ignored.\n        \"\"\"\n        statement = Statement('Hi HoW ArE yOu?')\n        other_statement = Statement('hI hOw are YoU?')\n\n        value = comparisons.levenshtein_distance(statement, other_statement)\n\n        self.assertEqual(value, 1)\n\n\nclass SynsetDistanceTestCase(TestCase):\n\n    def test_get_initialization_functions(self):\n        \"\"\"\n        Test that the initialization functions are returned.\n        \"\"\"\n        functions = comparisons.synset_distance.get_initialization_functions()\n\n        self.assertIn('initialize_nltk_wordnet', functions)\n\n    def test_exact_match_different_capitalization(self):\n        \"\"\"\n        Test that text capitalization is ignored.\n        \"\"\"\n        raise SkipTest('This test needs to be created.')\n\n\nclass SentimentComparisonTestCase(TestCase):\n\n    def test_exact_match_different_capitalization(self):\n        \"\"\"\n        Test that text capitalization is ignored.\n        \"\"\"\n        statement = Statement('Hi HoW ArE yOu?')\n        other_statement = Statement('hI hOw are YoU?')\n\n        # Prepare to do the comparison\n        functions = comparisons.sentiment_comparison.get_initialization_functions()\n        for function in functions.values():\n            function()\n\n        value = comparisons.sentiment_comparison(statement, other_statement)\n\n        self.assertEqual(value, 1)\n\n\nclass JaccardSimilarityTestCase(TestCase):\n\n    def test_exact_match_different_capitalization(self):\n        \"\"\"\n        Test that text capitalization is ignored.\n        \"\"\"\n        raise SkipTest('This test needs to be created.')\n", "description": "ChatterBot is a machine learning, conversational dialog engine for creating chat bots", "file_name": "test_comparisons.py", "id": "05b2619380fc47df582c516f9cbbac3a", "language": "Python", "project_name": "ChatterBot", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/gunthercox-ChatterBot/gunthercox-ChatterBot-f20c412/tests/test_comparisons.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:44:53Z", "url": "https://github.com/gunthercox/ChatterBot", "wiki": true}