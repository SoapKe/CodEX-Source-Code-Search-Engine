{"author": "tgalal", "code": "from yowsup.layers import YowLayer, YowLayerEvent, EventCallback\nfrom yowsup.layers.network import YowNetworkLayer\nclass YowStanzaRegulator(YowLayer):\n    \n\n    def __init__(self):\n        super(YowStanzaRegulator, self).__init__()\n        self.buf = bytearray()\n        self.enabled = False\n        \n    @EventCallback(YowNetworkLayer.EVENT_STATE_CONNECTED)\n    def onConnected(self, yowLayerEvent):\n        self.enabled = True\n        self.buf = bytearray()\n    \n    @EventCallback(YowNetworkLayer.EVENT_STATE_DISCONNECTED)\n    def onDisconnected(self, yowLayerEvent):\n        self.enabled = False\n\n    def send(self, data):\n        self.toLower(data)\n\n    def receive(self, data):\n        if self.enabled:\n            self.buf.extend(data)\n            self.processReceived()\n        else:\n            self.toLower(data)\n\n\n    def processReceived(self):\n        metaData = self.buf[:3]\n        recvData = self.buf[3:]\n\n        firstByte = metaData[0]\n        stanzaFlag = (firstByte & 0xF0) >> 4\n        stanzaSize =  ((metaData[1] << 8) + metaData[2])  | ((firstByte & 0x0F) << 16)\n\n        if len(recvData) < stanzaSize:\n            \n            return\n\n        oneMessageData = metaData + recvData[:stanzaSize]\n        self.buf = self.buf[len(oneMessageData):]\n\n        self.toUpper(oneMessageData)\n\n        if len(self.buf) > 3: \n            self.processReceived()\n\n    def __str__(self):\n        return \"Stanza Regulator Layer\"\n\n\n\n\n\n\n\n", "comments": "            send        bytearray    bytearray         receive     bytearray    bytearray           leave buf till receive remaining data   min required processable data yet ", "content": "from yowsup.layers import YowLayer, YowLayerEvent, EventCallback\nfrom yowsup.layers.network import YowNetworkLayer\nclass YowStanzaRegulator(YowLayer):\n    '''\n        send:       bytearray -> bytearray\n        receive:    bytearray -> bytearray\n    '''\n\n    def __init__(self):\n        super(YowStanzaRegulator, self).__init__()\n        self.buf = bytearray()\n        self.enabled = False\n        \n    @EventCallback(YowNetworkLayer.EVENT_STATE_CONNECTED)\n    def onConnected(self, yowLayerEvent):\n        self.enabled = True\n        self.buf = bytearray()\n    \n    @EventCallback(YowNetworkLayer.EVENT_STATE_DISCONNECTED)\n    def onDisconnected(self, yowLayerEvent):\n        self.enabled = False\n\n    def send(self, data):\n        self.toLower(data)\n\n    def receive(self, data):\n        if self.enabled:\n            self.buf.extend(data)\n            self.processReceived()\n        else:\n            self.toLower(data)\n\n\n    def processReceived(self):\n        metaData = self.buf[:3]\n        recvData = self.buf[3:]\n\n        firstByte = metaData[0]\n        stanzaFlag = (firstByte & 0xF0) >> 4\n        stanzaSize =  ((metaData[1] << 8) + metaData[2])  | ((firstByte & 0x0F) << 16)\n\n        if len(recvData) < stanzaSize:\n            #will in leave in buf till receive remaining data\n            return\n\n        oneMessageData = metaData + recvData[:stanzaSize]\n        self.buf = self.buf[len(oneMessageData):]\n\n        self.toUpper(oneMessageData)\n\n        if len(self.buf) > 3: #min required if has processable data yet\n            self.processReceived()\n\n    def __str__(self):\n        return \"Stanza Regulator Layer\"\n\n\n\n\n\n\n\n", "description": "The python WhatsApp library", "file_name": "layer.py", "id": "b93a66164c5826bd34394ccf80216087", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/stanzaregulator/layer.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}