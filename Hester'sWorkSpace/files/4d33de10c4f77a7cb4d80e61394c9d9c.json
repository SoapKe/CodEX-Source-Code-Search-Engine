{"author": "Zulko", "code": "# -*- coding: utf-8 -*-\n\"\"\"Pull request tests meant to be run with pytest.\"\"\"\nimport os\nimport sys\n\nimport pytest\nfrom moviepy.video.fx.scroll import scroll\nfrom moviepy.video.io.VideoFileClip import VideoFileClip\nfrom moviepy.video.tools.interpolators import Trajectory\nfrom moviepy.video.VideoClip import ColorClip, ImageClip, TextClip\nfrom moviepy.video.compositing.CompositeVideoClip import CompositeVideoClip\n\n\nsys.path.append(\"tests\")\nfrom test_helper import TMP_DIR, TRAVIS, FONT\n\n\n\ndef test_download_media(capsys):\n    \"\"\"Test downloading.\"\"\"\n    import download_media\n    with capsys.disabled():\n       download_media.download()\n\ndef test_PR_306():\n    if TRAVIS:\n       return\n\n    \n    assert TextClip.list('font') != []\n    assert TextClip.list('color') != []\n\n    with pytest.raises(Exception, message=\"Expecting Exception\"):\n         TextClip.list('blah')\n\ndef test_PR_339():\n    if TRAVIS:\n       return\n\n    \n    TextClip(txt='foo', color='white', font=FONT, size=(640, 480),\n             method='caption', align='center', fontsize=25).close()\n\n    \n    TextClip(txt='foo', font=FONT, method='label').close()\n\ndef test_PR_373():\n    result = Trajectory.load_list(\"media/traj.txt\")\n\n    Trajectory.save_list(result, os.path.join(TMP_DIR, \"traj1.txt\"))\n\n    result1 = Trajectory.load_list(os.path.join(TMP_DIR,\"traj1.txt\"))\n\n    assert len(result[0].tt) == len(result1[0].tt)\n    for i in range(len(result[0].tt)):\n        assert result[0].tt[i] == result1[0].tt[i]\n\n    assert len(result[0].xx) == len(result1[0].xx)\n    for i in range(len(result[0].xx)):\n        assert result[0].xx[i] == result1[0].xx[i]\n\n    assert len(result[0].yy) == len(result1[0].yy)\n    for i in range(len(result[0].yy)):\n        assert result[0].yy[i] == result1[0].yy[i]\n\ndef test_PR_424():\n    \"\"\"Ensure deprecation and user warnings are triggered.\"\"\"\n    import warnings\n    warnings.simplefilter('always') \n\n    \n    ColorClip([1000, 600], color=(60, 60, 60), duration=10).close()\n\n    with pytest.warns(DeprecationWarning):\n        \n        ColorClip([1000, 600], col=(60, 60, 60), duration=10).close()\n\n    \n    with pytest.warns(None) as record:\n        \n        ColorClip([1000, 600], color=(60, 60, 60), duration=10, col=(2,2,2)).close()\n\n    message1 = 'The `ColorClip` parameter `col` has been deprecated. ' + \\\n               'Please use `color` instead.'\n    message2 = 'The arguments `color` and `col` have both been passed to ' + \\\n               '`ColorClip` so `col` has been ignored.'\n\n    \n    assert len(record) == 2\n    assert str(record[0].message) == message1\n    assert str(record[1].message) == message2\n\ndef test_PR_458():\n    clip = ColorClip([1000, 600], color=(60, 60, 60), duration=10)\n    clip.write_videofile(os.path.join(TMP_DIR, \"test.mp4\"),\n                         progress_bar=False, fps=30)\n    clip.close()\n\ndef test_PR_515():\n    \n    with VideoFileClip(\"media/fire2.mp4\", fps_source='tbr') as clip:\n        assert clip.fps == 90000\n    with VideoFileClip(\"media/fire2.mp4\", fps_source='fps') as clip:\n        assert clip.fps == 10.51\n\n\ndef test_PR_528():\n    with ImageClip(\"media/vacation_2017.jpg\") as clip:\n        new_clip = scroll(clip, w=1000, x_speed=50)\n        new_clip = new_clip.set_duration(20)\n        new_clip.fps = 24\n        new_clip.write_videofile(os.path.join(TMP_DIR, \"pano.mp4\"))\n\n\ndef test_PR_529():\n    with VideoFileClip(\"media/fire2.mp4\") as video_clip:\n        assert video_clip.rotation == 180\n\n\ndef test_PR_610():\n    \"\"\"\n    Test that the max fps of the video clips is used for the composite video clip\n    \"\"\"\n    clip1 = ColorClip((640, 480), color=(255, 0, 0)).set_duration(1)\n    clip2 = ColorClip((640, 480), color=(0, 255, 0)).set_duration(1)\n    clip1.fps = 24\n    clip2.fps = 25\n    composite = CompositeVideoClip([clip1, clip2])\n\n    assert composite.fps == 25\n\n\nif __name__ == '__main__':\n   pytest.main()\n", "comments": "   pull request tests meant run pytest     import os import sys  import pytest moviepy video fx scroll import scroll moviepy video io videofileclip import videofileclip moviepy video tools interpolators import trajectory moviepy video videoclip import colorclip  imageclip  textclip moviepy video compositing compositevideoclip import compositevideoclip   sys path append( tests ) test helper import tmp dir  travis  font    def test download media(capsys)         test downloading         import download media     capsys disabled()         download media download()  def test pr 306()      travis         return       put back get imagemagick working travis ci     assert textclip list( font )           assert textclip list( color )            pytest raises(exception  message  expecting exception )           textclip list( blah )  def test pr 339()      travis         return        in caption mode      textclip(txt  foo   color  white   font font  size (640  480)               method  caption   align  center   fontsize 25) close()        in label mode      textclip(txt  foo   font font  method  label ) close()  def test pr 373()      result   trajectory load list( media traj txt )      trajectory save list(result  os path join(tmp dir   traj1 txt ))      result1   trajectory load list(os path join(tmp dir  traj1 txt ))      assert len(result 0  tt)    len(result1 0  tt)     range(len(result 0  tt))          assert result 0  tt     result1 0  tt       assert len(result 0  xx)    len(result1 0  xx)     range(len(result 0  xx))          assert result 0  xx     result1 0  xx       assert len(result 0  yy)    len(result1 0  yy)     range(len(result 0  yy))          assert result 0  yy     result1 0  yy   def test pr 424()         ensure deprecation user warnings triggered         import warnings     warnings simplefilter( always )   alert us deprecation warnings         recommended use     colorclip( 1000  600   color (60  60  60)  duration 10) close()      pytest warns(deprecationwarning)            uses  col  work  give warning          colorclip( 1000  600   col (60  60  60)  duration 10) close()        catch warnings record      pytest warns(none) record            should give 2 warnings use  color    col          colorclip( 1000  600   color (60  60  60)  duration 10  col (2 2 2)) close()      message1    the  colorclip  parameter  col  deprecated                        please use  color  instead       message2    the arguments  color   col  passed                        colorclip   col  ignored          assert two warnings popped validate message text      assert len(record)    2     assert str(record 0  message)    message1     assert str(record 1  message)    message2  def test pr 458()      clip   colorclip( 1000  600   color (60  60  60)  duration 10)     clip write videofile(os path join(tmp dir   test mp4 )                           progress bar false  fps 30)     clip close()  def test pr 515()        won actually work video download media     videofileclip( media fire2 mp4   fps source  tbr ) clip          assert clip fps    90000     videofileclip( media fire2 mp4   fps source  fps ) clip          assert clip fps    10 51   def test pr 528()      imageclip( media vacation 2017 jpg ) clip          new clip   scroll(clip  w 1000  x speed 50)         new clip   new clip set duration(20)         new clip fps   24         new clip write videofile(os path join(tmp dir   pano mp4 ))   def test pr 529()      videofileclip( media fire2 mp4 ) video clip          assert video clip rotation    180   def test pr 610()              test max fps video clips used composite video clip                coding  utf 8       put back get imagemagick working travis ci    in caption mode     in label mode     alert us deprecation warnings     recommended use    uses  col  work  give warning     catch warnings record     should give 2 warnings use  color    col     assert two warnings popped validate message text     won actually work video download media ", "content": "# -*- coding: utf-8 -*-\n\"\"\"Pull request tests meant to be run with pytest.\"\"\"\nimport os\nimport sys\n\nimport pytest\nfrom moviepy.video.fx.scroll import scroll\nfrom moviepy.video.io.VideoFileClip import VideoFileClip\nfrom moviepy.video.tools.interpolators import Trajectory\nfrom moviepy.video.VideoClip import ColorClip, ImageClip, TextClip\nfrom moviepy.video.compositing.CompositeVideoClip import CompositeVideoClip\n\n\nsys.path.append(\"tests\")\nfrom test_helper import TMP_DIR, TRAVIS, FONT\n\n\n\ndef test_download_media(capsys):\n    \"\"\"Test downloading.\"\"\"\n    import download_media\n    with capsys.disabled():\n       download_media.download()\n\ndef test_PR_306():\n    if TRAVIS:\n       return\n\n    #put this back in once we get ImageMagick working on travis-ci\n    assert TextClip.list('font') != []\n    assert TextClip.list('color') != []\n\n    with pytest.raises(Exception, message=\"Expecting Exception\"):\n         TextClip.list('blah')\n\ndef test_PR_339():\n    if TRAVIS:\n       return\n\n    # In caption mode.\n    TextClip(txt='foo', color='white', font=FONT, size=(640, 480),\n             method='caption', align='center', fontsize=25).close()\n\n    # In label mode.\n    TextClip(txt='foo', font=FONT, method='label').close()\n\ndef test_PR_373():\n    result = Trajectory.load_list(\"media/traj.txt\")\n\n    Trajectory.save_list(result, os.path.join(TMP_DIR, \"traj1.txt\"))\n\n    result1 = Trajectory.load_list(os.path.join(TMP_DIR,\"traj1.txt\"))\n\n    assert len(result[0].tt) == len(result1[0].tt)\n    for i in range(len(result[0].tt)):\n        assert result[0].tt[i] == result1[0].tt[i]\n\n    assert len(result[0].xx) == len(result1[0].xx)\n    for i in range(len(result[0].xx)):\n        assert result[0].xx[i] == result1[0].xx[i]\n\n    assert len(result[0].yy) == len(result1[0].yy)\n    for i in range(len(result[0].yy)):\n        assert result[0].yy[i] == result1[0].yy[i]\n\ndef test_PR_424():\n    \"\"\"Ensure deprecation and user warnings are triggered.\"\"\"\n    import warnings\n    warnings.simplefilter('always') # Alert us of deprecation warnings.\n\n    # Recommended use\n    ColorClip([1000, 600], color=(60, 60, 60), duration=10).close()\n\n    with pytest.warns(DeprecationWarning):\n        # Uses `col` so should work the same as above, but give warning.\n        ColorClip([1000, 600], col=(60, 60, 60), duration=10).close()\n\n    # Catch all warnings as record.\n    with pytest.warns(None) as record:\n        # Should give 2 warnings and use `color`, not `col`\n        ColorClip([1000, 600], color=(60, 60, 60), duration=10, col=(2,2,2)).close()\n\n    message1 = 'The `ColorClip` parameter `col` has been deprecated. ' + \\\n               'Please use `color` instead.'\n    message2 = 'The arguments `color` and `col` have both been passed to ' + \\\n               '`ColorClip` so `col` has been ignored.'\n\n    # Assert that two warnings popped and validate the message text.\n    assert len(record) == 2\n    assert str(record[0].message) == message1\n    assert str(record[1].message) == message2\n\ndef test_PR_458():\n    clip = ColorClip([1000, 600], color=(60, 60, 60), duration=10)\n    clip.write_videofile(os.path.join(TMP_DIR, \"test.mp4\"),\n                         progress_bar=False, fps=30)\n    clip.close()\n\ndef test_PR_515():\n    # Won't actually work until video is in download_media\n    with VideoFileClip(\"media/fire2.mp4\", fps_source='tbr') as clip:\n        assert clip.fps == 90000\n    with VideoFileClip(\"media/fire2.mp4\", fps_source='fps') as clip:\n        assert clip.fps == 10.51\n\n\ndef test_PR_528():\n    with ImageClip(\"media/vacation_2017.jpg\") as clip:\n        new_clip = scroll(clip, w=1000, x_speed=50)\n        new_clip = new_clip.set_duration(20)\n        new_clip.fps = 24\n        new_clip.write_videofile(os.path.join(TMP_DIR, \"pano.mp4\"))\n\n\ndef test_PR_529():\n    with VideoFileClip(\"media/fire2.mp4\") as video_clip:\n        assert video_clip.rotation == 180\n\n\ndef test_PR_610():\n    \"\"\"\n    Test that the max fps of the video clips is used for the composite video clip\n    \"\"\"\n    clip1 = ColorClip((640, 480), color=(255, 0, 0)).set_duration(1)\n    clip2 = ColorClip((640, 480), color=(0, 255, 0)).set_duration(1)\n    clip1.fps = 24\n    clip2.fps = 25\n    composite = CompositeVideoClip([clip1, clip2])\n\n    assert composite.fps == 25\n\n\nif __name__ == '__main__':\n   pytest.main()\n", "description": "Video editing with Python", "file_name": "test_PR.py", "id": "4d33de10c4f77a7cb4d80e61394c9d9c", "language": "Python", "project_name": "moviepy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/Zulko-moviepy/Zulko-moviepy-6cbd4f3/tests/test_PR.py", "save_time": "", "source": "", "update_at": "2018-03-18T10:21:24Z", "url": "https://github.com/Zulko/moviepy", "wiki": true}