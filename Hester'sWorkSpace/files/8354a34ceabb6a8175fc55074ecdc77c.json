{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_duration,\n    int_or_none,\n    qualities,\n    determine_ext,\n)\n\n\nclass SunPornoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www\\.)?sunporno\\.com/videos|embeds\\.sunporno\\.com/embed)/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.sunporno.com/videos/807778/',\n        'md5': '507887e29033502f29dba69affeebfc9',\n        'info_dict': {\n            'id': '807778',\n            'ext': 'mp4',\n            'title': 'md5:0a400058e8105d39e35c35e7c5184164',\n            'description': 'md5:a31241990e1bd3a64e72ae99afb325fb',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 302,\n            'age_limit': 18,\n        }\n    }, {\n        'url': 'http://embeds.sunporno.com/embed/807778',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'http://www.sunporno.com/videos/%s' % video_id, video_id)\n\n        title = self._html_search_regex(\n            r'<title>([^<]+)</title>', webpage, 'title')\n        description = self._html_search_meta(\n            'description', webpage, 'description')\n        thumbnail = self._html_search_regex(\n            r'poster=\"([^\"]+)\"', webpage, 'thumbnail', fatal=False)\n\n        duration = parse_duration(self._search_regex(\n            (r'itemprop=\"duration\"[^>]*>\\s*(\\d+:\\d+)\\s*<',\n             r'>Duration:\\s*<span[^>]+>\\s*(\\d+:\\d+)\\s*<'),\n            webpage, 'duration', fatal=False))\n\n        view_count = int_or_none(self._html_search_regex(\n            r'class=\"views\">(?:<noscript>)?\\s*(\\d+)\\s*<',\n            webpage, 'view count', fatal=False))\n        comment_count = int_or_none(self._html_search_regex(\n            r'(\\d+)</b> Comments?',\n            webpage, 'comment count', fatal=False, default=None))\n\n        formats = []\n        quality = qualities(['mp4', 'flv'])\n        for video_url in re.findall(r'<(?:source|video) src=\"([^\"]+)\"', webpage):\n            video_ext = determine_ext(video_url)\n            formats.append({\n                'url': video_url,\n                'format_id': video_ext,\n                'quality': quality(video_ext),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'formats': formats,\n            'age_limit': 18,\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_duration,\n    int_or_none,\n    qualities,\n    determine_ext,\n)\n\n\nclass SunPornoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www\\.)?sunporno\\.com/videos|embeds\\.sunporno\\.com/embed)/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.sunporno.com/videos/807778/',\n        'md5': '507887e29033502f29dba69affeebfc9',\n        'info_dict': {\n            'id': '807778',\n            'ext': 'mp4',\n            'title': 'md5:0a400058e8105d39e35c35e7c5184164',\n            'description': 'md5:a31241990e1bd3a64e72ae99afb325fb',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 302,\n            'age_limit': 18,\n        }\n    }, {\n        'url': 'http://embeds.sunporno.com/embed/807778',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'http://www.sunporno.com/videos/%s' % video_id, video_id)\n\n        title = self._html_search_regex(\n            r'<title>([^<]+)</title>', webpage, 'title')\n        description = self._html_search_meta(\n            'description', webpage, 'description')\n        thumbnail = self._html_search_regex(\n            r'poster=\"([^\"]+)\"', webpage, 'thumbnail', fatal=False)\n\n        duration = parse_duration(self._search_regex(\n            (r'itemprop=\"duration\"[^>]*>\\s*(\\d+:\\d+)\\s*<',\n             r'>Duration:\\s*<span[^>]+>\\s*(\\d+:\\d+)\\s*<'),\n            webpage, 'duration', fatal=False))\n\n        view_count = int_or_none(self._html_search_regex(\n            r'class=\"views\">(?:<noscript>)?\\s*(\\d+)\\s*<',\n            webpage, 'view count', fatal=False))\n        comment_count = int_or_none(self._html_search_regex(\n            r'(\\d+)</b> Comments?',\n            webpage, 'comment count', fatal=False, default=None))\n\n        formats = []\n        quality = qualities(['mp4', 'flv'])\n        for video_url in re.findall(r'<(?:source|video) src=\"([^\"]+)\"', webpage):\n            video_ext = determine_ext(video_url)\n            formats.append({\n                'url': video_url,\n                'format_id': video_ext,\n                'quality': quality(video_ext),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'formats': formats,\n            'age_limit': 18,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "sunporno.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/sunporno.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}