{"author": "ansible", "code": "\n\"\"\" PN-CLI vrouter-ospf-add/remove \"\"\"\n\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_ospf\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to add/remove ospf protocol to a vRouter.\ndescription:\n  - Execute vrouter-ospf-add, vrouter-ospf-remove command.\n  - This command adds/removes Open Shortest Path First(OSPF) routing\n    protocol to a virtual router(vRouter) service.\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch to run the CLI on.\n    required: False\n  state:\n    description:\n      - Assert the state of the ospf. Use 'present' to add ospf\n        and 'absent' to remove ospf.\n    required: True\n    default: present\n    choices: ['present', 'absent']\n  pn_vrouter_name:\n    description:\n      - Specify the name of the vRouter.\n    required: True\n  pn_network_ip:\n    description:\n      - Specify the network IP (IPv4 or IPv6) address.\n    required: True\n  pn_ospf_area:\n    description:\n    - Stub area number for the configuration. Required for vrouter-ospf-add.\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: \"Add OSPF to vrouter\"\n  pn_ospf:\n    state: present\n    pn_vrouter_name: name-string\n    pn_network_ip: 192.168.11.2/24\n    pn_ospf_area: 1.0.0.0\n\n- name: \"Remove OSPF from vrouter\"\n  pn_ospf:\n    state: absent\n    pn_vrouter_name: name-string\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the ospf command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the ospf command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\nVROUTER_EXISTS = None\nNETWORK_EXISTS = None\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch == 'local':\n        cli += ' switch-local '\n    else:\n        cli += ' switch ' + cliswitch\n    return cli\n\n\ndef check_cli(module, cli):\n    \"\"\"\n    This method checks if vRouter exists on the target node.\n    This method also checks for idempotency using the vrouter-ospf-show command.\n    If the given vRouter exists, return VROUTER_EXISTS as True else False.\n    If an OSPF network with the given ip exists on the given vRouter,\n    return NETWORK_EXISTS as True else False.\n\n    :param module: The Ansible module to fetch input parameters\n    :param cli: The CLI string\n    :return Global Booleans: VROUTER_EXISTS, NETWORK_EXISTS\n    \"\"\"\n    vrouter_name = module.params['pn_vrouter_name']\n    network_ip = module.params['pn_network_ip']\n     Global flags\n    global VROUTER_EXISTS, NETWORK_EXISTS\n\n     Check for vRouter\n    check_vrouter = cli + ' vrouter-show format name no-show-headers '\n    check_vrouter = shlex.split(check_vrouter)\n    out = module.run_command(check_vrouter)[1]\n    out = out.split()\n\n    if vrouter_name in out:\n        VROUTER_EXISTS = True\n    else:\n        VROUTER_EXISTS = False\n\n     Check for OSPF networks\n    show = cli + ' vrouter-ospf-show vrouter-name %s ' % vrouter_name\n    show += 'format network no-show-headers'\n    show = shlex.split(show)\n    out = module.run_command(show)[1]\n    out = out.split()\n\n    if network_ip in out:\n        NETWORK_EXISTS = True\n    else:\n        NETWORK_EXISTS = False\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    command = get_command_from_state(state)\n    cmd = shlex.split(cli)\n\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n     Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            stderr=err.strip(),\n            msg=\"%s operation failed\" % command,\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            stdout=out.strip(),\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n    else:\n        module.exit_json(\n            command=print_cli,\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'vrouter-ospf-add'\n    if state == 'absent':\n        command = 'vrouter-ospf-remove'\n    return command\n\n\ndef main():\n    \"\"\" This section is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=False, type='str'),\n            pn_clipassword=dict(required=False, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str', default='local'),\n            state=dict(type='str', default='present', choices=['present',\n                                                               'absent']),\n            pn_vrouter_name=dict(required=True, type='str'),\n            pn_network_ip=dict(required=True, type='str'),\n            pn_ospf_area=dict(type='str')\n        ),\n        required_if=(\n            ['state', 'present',\n             ['pn_network_ip', 'pn_ospf_area']],\n            ['state', 'absent', ['pn_network_ip']]\n        )\n    )\n\n     Accessing the arguments\n    state = module.params['state']\n    vrouter_name = module.params['pn_vrouter_name']\n    network_ip = module.params['pn_network_ip']\n    ospf_area = module.params['pn_ospf_area']\n\n    command = get_command_from_state(state)\n\n     Building the CLI command string\n    cli = pn_cli(module)\n    check_cli(module, cli)\n\n    if state == 'present':\n        if VROUTER_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='vRouter %s does not exist' % vrouter_name\n            )\n        if NETWORK_EXISTS is True:\n            module.exit_json(\n                skipped=True,\n                msg=('OSPF with network ip %s already exists on %s'\n                     % (network_ip, vrouter_name))\n            )\n        cli += (' %s vrouter-name %s network %s ospf-area %s'\n                % (command, vrouter_name, network_ip, ospf_area))\n\n    if state == 'absent':\n        if VROUTER_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='vRouter %s does not exist' % vrouter_name\n            )\n        if NETWORK_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg=('OSPF with network ip %s already exists on %s'\n                     % (network_ip, vrouter_name))\n            )\n        cli += (' %s vrouter-name %s network %s'\n                % (command, vrouter_name, network_ip))\n\n    run_cli(module, cli)\n AnsibleModule boilerplate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "comments": "    pn cli vrouter ospf add remove          this file part ansible     ansible free software  redistribute modify   terms gnu general public license published   free software foundation  either version 3 license    (at option) later version      ansible distributed hope useful    without any warranty  without even implied warranty   merchantability fitness for a particular purpose   see   gnu general public license details      you received copy gnu general public license   along ansible   if  see  http   www gnu org licenses       ansible metadata     metadata version    1 1                        status     preview                         supported    community     documentation           module  pn ospf author   pluribus networks ( amitsi)  version added   2 2  short description  cli command add remove ospf protocol vrouter  description      execute vrouter ospf add  vrouter ospf remove command      this command adds removes open shortest path first(ospf) routing     protocol virtual router(vrouter) service  options    pn cliusername      description          provide login username user root      required  false   pn clipassword      description          provide login password user root      required  false   pn cliswitch      description          target switch run cli      required  false   state      description          assert state ospf  use  present  add ospf          absent  remove ospf      required  true     default  present     choices    present    absent     pn vrouter name      description          specify name vrouter      required  true   pn network ip      description          specify network ip (ipv4 ipv6) address      required  true   pn ospf area      description        stub area number configuration  required vrouter ospf add       examples         name   add ospf vrouter    pn ospf      state  present     pn vrouter name  name string     pn network ip  192 168 11 2 24     pn ospf area  1 0 0 0    name   remove ospf vrouter    pn ospf      state  absent     pn vrouter name  name string      return       command    description  the cli command run target node(s)    returned  always   type  str stdout    description  the set responses ospf command    returned  always   type  list stderr    description  the set error responses ospf command    returned  error   type  list changed    description  indicates whether cli caused changes target    returned  always   type  bool      import shlex  vrouter exists   none network exists   none   def pn cli(module)              this method generate cli portion launch netvisor cli      it parses username  password  switch parameters module       param module  the ansible module fetch username  password switch      return  returns cli string processing             username   module params  pn cliusername       password   module params  pn clipassword       cliswitch   module params  pn cliswitch        username password          cli     usr bin cli   quiet   user       (username  password)     else          cli     usr bin cli   quiet        cliswitch     local           cli      switch local       else          cli      switch     cliswitch     return cli   def check cli(module  cli)              this method checks vrouter exists target node      this method also checks idempotency using vrouter ospf show command      if given vrouter exists  return vrouter exists true else false      if ospf network given ip exists given vrouter      return network exists true else false        param module  the ansible module fetch input parameters      param cli  the cli string      return global booleans  vrouter exists  network exists             vrouter name   module params  pn vrouter name       network ip   module params  pn network ip         global flags     global vrouter exists  network exists        check vrouter     check vrouter   cli     vrouter show format name show headers       check vrouter   shlex split(check vrouter)       module run command(check vrouter) 1        split()      vrouter name          vrouter exists   true     else          vrouter exists   false        check ospf networks     show   cli     vrouter ospf show vrouter name      vrouter name     show     format network show headers      show   shlex split(show)       module run command(show) 1        split()      network ip          network exists   true     else          network exists   false   def run cli(module  cli)              this method executes cli command target node(s) returns     output  the module exits based output       param cli  complete cli string executed target node(s)       param module  the ansible module fetch command             cliswitch   module params  pn cliswitch       state   module params  state       command   get command state(state)     cmd   shlex split(cli)      result   err   module run command(cmd)      print cli   cli split(cliswitch) 1         response json format     result    0          module exit json(             command print cli              stderr err strip()              msg   operation failed    command              changed false         )               module exit json(             command print cli              stdout strip()              msg   operation completed    command              changed true         )      else          module exit json(             command print cli              msg   operation completed    command              changed true         )   def get command state(state)              this method gets appropriate command name state specified  it     returns command name specified state       param state  the state respective command name required              command   none     state     present           command    vrouter ospf add      state     absent           command    vrouter ospf remove      return command   def main()          this section arguments parsing         usr bin python       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          global flags    check vrouter    check ospf networks    response json format    accessing arguments    building cli command string    ansiblemodule boilerplate ", "content": "#!/usr/bin/python\n\"\"\" PN-CLI vrouter-ospf-add/remove \"\"\"\n\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_ospf\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to add/remove ospf protocol to a vRouter.\ndescription:\n  - Execute vrouter-ospf-add, vrouter-ospf-remove command.\n  - This command adds/removes Open Shortest Path First(OSPF) routing\n    protocol to a virtual router(vRouter) service.\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch to run the CLI on.\n    required: False\n  state:\n    description:\n      - Assert the state of the ospf. Use 'present' to add ospf\n        and 'absent' to remove ospf.\n    required: True\n    default: present\n    choices: ['present', 'absent']\n  pn_vrouter_name:\n    description:\n      - Specify the name of the vRouter.\n    required: True\n  pn_network_ip:\n    description:\n      - Specify the network IP (IPv4 or IPv6) address.\n    required: True\n  pn_ospf_area:\n    description:\n    - Stub area number for the configuration. Required for vrouter-ospf-add.\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: \"Add OSPF to vrouter\"\n  pn_ospf:\n    state: present\n    pn_vrouter_name: name-string\n    pn_network_ip: 192.168.11.2/24\n    pn_ospf_area: 1.0.0.0\n\n- name: \"Remove OSPF from vrouter\"\n  pn_ospf:\n    state: absent\n    pn_vrouter_name: name-string\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the ospf command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the ospf command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\nVROUTER_EXISTS = None\nNETWORK_EXISTS = None\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch == 'local':\n        cli += ' switch-local '\n    else:\n        cli += ' switch ' + cliswitch\n    return cli\n\n\ndef check_cli(module, cli):\n    \"\"\"\n    This method checks if vRouter exists on the target node.\n    This method also checks for idempotency using the vrouter-ospf-show command.\n    If the given vRouter exists, return VROUTER_EXISTS as True else False.\n    If an OSPF network with the given ip exists on the given vRouter,\n    return NETWORK_EXISTS as True else False.\n\n    :param module: The Ansible module to fetch input parameters\n    :param cli: The CLI string\n    :return Global Booleans: VROUTER_EXISTS, NETWORK_EXISTS\n    \"\"\"\n    vrouter_name = module.params['pn_vrouter_name']\n    network_ip = module.params['pn_network_ip']\n    # Global flags\n    global VROUTER_EXISTS, NETWORK_EXISTS\n\n    # Check for vRouter\n    check_vrouter = cli + ' vrouter-show format name no-show-headers '\n    check_vrouter = shlex.split(check_vrouter)\n    out = module.run_command(check_vrouter)[1]\n    out = out.split()\n\n    if vrouter_name in out:\n        VROUTER_EXISTS = True\n    else:\n        VROUTER_EXISTS = False\n\n    # Check for OSPF networks\n    show = cli + ' vrouter-ospf-show vrouter-name %s ' % vrouter_name\n    show += 'format network no-show-headers'\n    show = shlex.split(show)\n    out = module.run_command(show)[1]\n    out = out.split()\n\n    if network_ip in out:\n        NETWORK_EXISTS = True\n    else:\n        NETWORK_EXISTS = False\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    command = get_command_from_state(state)\n    cmd = shlex.split(cli)\n\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n    # Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            stderr=err.strip(),\n            msg=\"%s operation failed\" % command,\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            stdout=out.strip(),\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n    else:\n        module.exit_json(\n            command=print_cli,\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'vrouter-ospf-add'\n    if state == 'absent':\n        command = 'vrouter-ospf-remove'\n    return command\n\n\ndef main():\n    \"\"\" This section is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=False, type='str'),\n            pn_clipassword=dict(required=False, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str', default='local'),\n            state=dict(type='str', default='present', choices=['present',\n                                                               'absent']),\n            pn_vrouter_name=dict(required=True, type='str'),\n            pn_network_ip=dict(required=True, type='str'),\n            pn_ospf_area=dict(type='str')\n        ),\n        required_if=(\n            ['state', 'present',\n             ['pn_network_ip', 'pn_ospf_area']],\n            ['state', 'absent', ['pn_network_ip']]\n        )\n    )\n\n    # Accessing the arguments\n    state = module.params['state']\n    vrouter_name = module.params['pn_vrouter_name']\n    network_ip = module.params['pn_network_ip']\n    ospf_area = module.params['pn_ospf_area']\n\n    command = get_command_from_state(state)\n\n    # Building the CLI command string\n    cli = pn_cli(module)\n    check_cli(module, cli)\n\n    if state == 'present':\n        if VROUTER_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='vRouter %s does not exist' % vrouter_name\n            )\n        if NETWORK_EXISTS is True:\n            module.exit_json(\n                skipped=True,\n                msg=('OSPF with network ip %s already exists on %s'\n                     % (network_ip, vrouter_name))\n            )\n        cli += (' %s vrouter-name %s network %s ospf-area %s'\n                % (command, vrouter_name, network_ip, ospf_area))\n\n    if state == 'absent':\n        if VROUTER_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='vRouter %s does not exist' % vrouter_name\n            )\n        if NETWORK_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg=('OSPF with network ip %s already exists on %s'\n                     % (network_ip, vrouter_name))\n            )\n        cli += (' %s vrouter-name %s network %s'\n                % (command, vrouter_name, network_ip))\n\n    run_cli(module, cli)\n# AnsibleModule boilerplate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "pn_ospf.py", "id": "7596a899d756185cfa12b8fb1980226d", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/netvisor/pn_ospf.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}