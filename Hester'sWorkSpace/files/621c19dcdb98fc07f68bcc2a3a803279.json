{"author": "USArmyResearchLab", "code": "import dshell\nimport dpkt\n\n\ntry:\n    PROTOCOL_MAP = dict((v, k[9:]) for k, v in dpkt.ip.__dict__.iteritems() if type(\n        v) == int and k.startswith('IP_PROTO_') and k != 'IP_PROTO_HOPOPTS')\nexcept:\n    PROTOCOL_MAP = {}\n\n\nclass DshellDecoder(dshell.IPDecoder):\n\n    \"\"\"\n    protocol.py\n\n    Identifies non-standard protocols (not tcp, udp or icmp)\n\n    References:\n            http://www.networksorcery.com/enp/protocol/ip.htm\n    \"\"\"\n\n    def __init__(self):\n        dshell.IPDecoder.__init__(self,\n                                  name='protocol',\n                                  description='Identifies non-standard protocols (not tcp, udp or icmp)',\n                                  filter='(ip and not tcp and not udp and not icmp)',\n                                  author='bg',\n                                  )\n\n    def packetHandler(self, ip):\n        p = PROTOCOL_MAP.get(ip.proto, ip.proto)\n        self.alert('PROTOCOL: %s (%d)' %\n                   (p, ip.proto), sip=ip.sip, dip=ip.dip, ts=ip.ts)\n\nif __name__ == '__main__':\n    dObj = DshellDecoder()\n    print dObj\nelse:\n    dObj = DshellDecoder()\n", "comments": "        protocol py      identifies non standard protocols (not tcp  udp icmp)      references              http   www networksorcery com enp protocol ip htm            build list known ip protocols dpkt ", "content": "import dshell\nimport dpkt\n\n# Build a list of known IP protocols from dpkt\ntry:\n    PROTOCOL_MAP = dict((v, k[9:]) for k, v in dpkt.ip.__dict__.iteritems() if type(\n        v) == int and k.startswith('IP_PROTO_') and k != 'IP_PROTO_HOPOPTS')\nexcept:\n    PROTOCOL_MAP = {}\n\n\nclass DshellDecoder(dshell.IPDecoder):\n\n    \"\"\"\n    protocol.py\n\n    Identifies non-standard protocols (not tcp, udp or icmp)\n\n    References:\n            http://www.networksorcery.com/enp/protocol/ip.htm\n    \"\"\"\n\n    def __init__(self):\n        dshell.IPDecoder.__init__(self,\n                                  name='protocol',\n                                  description='Identifies non-standard protocols (not tcp, udp or icmp)',\n                                  filter='(ip and not tcp and not udp and not icmp)',\n                                  author='bg',\n                                  )\n\n    def packetHandler(self, ip):\n        p = PROTOCOL_MAP.get(ip.proto, ip.proto)\n        self.alert('PROTOCOL: %s (%d)' %\n                   (p, ip.proto), sip=ip.sip, dip=ip.dip, ts=ip.ts)\n\nif __name__ == '__main__':\n    dObj = DshellDecoder()\n    print dObj\nelse:\n    dObj = DshellDecoder()\n", "description": "Dshell is a network forensic analysis framework.", "file_name": "protocol.py", "id": "621c19dcdb98fc07f68bcc2a3a803279", "language": "Python", "project_name": "Dshell", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/USArmyResearchLab-Dshell/USArmyResearchLab-Dshell-5850adf/decoders/protocol/protocol.py", "save_time": "", "source": "", "update_at": "2018-03-18T10:01:29Z", "url": "https://github.com/USArmyResearchLab/Dshell", "wiki": true}