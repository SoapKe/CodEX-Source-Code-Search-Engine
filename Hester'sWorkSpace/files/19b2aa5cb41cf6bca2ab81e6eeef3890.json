{"author": "ansible", "code": "\n  Copyright (c) 2017 Citrix Systems\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\n\n\nfrom ansible.module_utils.network.netscaler.netscaler import ConfigProxy, get_immutables_intersection, ensure_feature_is_enabled, log, loglines\n\n\nclass TestNetscalerConfigProxy(unittest.TestCase):\n\n    def test_values_copied_to_actual(self):\n        actual = Mock()\n        client = Mock()\n        values = {\n            'some_key': 'some_value',\n        }\n        ConfigProxy(\n            actual=actual,\n            client=client,\n            attribute_values_dict=values,\n            readwrite_attrs=['some_key']\n        )\n        self.assertEqual(actual.some_key, values['some_key'], msg='Failed to pass correct value from values dict')\n\n    def test_none_values_not_copied_to_actual(self):\n        actual = Mock()\n        client = Mock()\n        actual.key_for_none = 'initial'\n        print('actual %s' % actual.key_for_none)\n        values = {\n            'key_for_none': None,\n        }\n        print('value %s' % actual.key_for_none)\n        ConfigProxy(\n            actual=actual,\n            client=client,\n            attribute_values_dict=values,\n            readwrite_attrs=['key_for_none']\n        )\n        self.assertEqual(actual.key_for_none, 'initial')\n\n    def test_missing_from_values_dict_not_copied_to_actual(self):\n        actual = Mock()\n        client = Mock()\n        values = {\n            'irrelevant_key': 'irrelevant_value',\n        }\n        print('value %s' % actual.key_for_none)\n        ConfigProxy(\n            actual=actual,\n            client=client,\n            attribute_values_dict=values,\n            readwrite_attrs=['key_for_none']\n        )\n        print('none %s' % getattr(actual, 'key_for_none'))\n        self.assertIsInstance(actual.key_for_none, Mock)\n\n    def test_bool_yes_no_transform(self):\n        actual = Mock()\n        client = Mock()\n        values = {\n            'yes_key': True,\n            'no_key': False,\n        }\n        transforms = {\n            'yes_key': ['bool_yes_no'],\n            'no_key': ['bool_yes_no']\n        }\n        ConfigProxy(\n            actual=actual,\n            client=client,\n            attribute_values_dict=values,\n            readwrite_attrs=['yes_key', 'no_key'],\n            transforms=transforms,\n        )\n        actual_values = [actual.yes_key, actual.no_key]\n        self.assertListEqual(actual_values, ['YES', 'NO'])\n\n    def test_bool_on_off_transform(self):\n        actual = Mock()\n        client = Mock()\n        values = {\n            'on_key': True,\n            'off_key': False,\n        }\n        transforms = {\n            'on_key': ['bool_on_off'],\n            'off_key': ['bool_on_off']\n        }\n        ConfigProxy(\n            actual=actual,\n            client=client,\n            attribute_values_dict=values,\n            readwrite_attrs=['on_key', 'off_key'],\n            transforms=transforms,\n        )\n        actual_values = [actual.on_key, actual.off_key]\n        self.assertListEqual(actual_values, ['ON', 'OFF'])\n\n    def test_callable_transform(self):\n        actual = Mock()\n        client = Mock()\n        values = {\n            'transform_key': 'hello',\n            'transform_chain': 'hello',\n        }\n        transforms = {\n            'transform_key': [lambda v: v.upper()],\n            'transform_chain': [lambda v: v.upper(), lambda v: v[:4]]\n        }\n        ConfigProxy(\n            actual=actual,\n            client=client,\n            attribute_values_dict=values,\n            readwrite_attrs=['transform_key', 'transform_chain'],\n            transforms=transforms,\n        )\n        actual_values = [actual.transform_key, actual.transform_chain]\n        self.assertListEqual(actual_values, ['HELLO', 'HELL'])\n\n\nclass TestNetscalerModuleUtils(unittest.TestCase):\n\n    def test_immutables_intersection(self):\n        actual = Mock()\n        client = Mock()\n        values = {\n            'mutable_key': 'some value',\n            'immutable_key': 'some other value',\n        }\n        proxy = ConfigProxy(\n            actual=actual,\n            client=client,\n            attribute_values_dict=values,\n            readwrite_attrs=['mutable_key', 'immutable_key'],\n            immutable_attrs=['immutable_key'],\n        )\n        keys_to_check = ['mutable_key', 'immutable_key', 'non_existant_key']\n        result = get_immutables_intersection(proxy, keys_to_check)\n        self.assertListEqual(result, ['immutable_key'])\n\n    def test_ensure_feature_is_enabled(self):\n        client = Mock()\n        attrs = {'get_enabled_features.return_value': ['GSLB']}\n        client.configure_mock(**attrs)\n        ensure_feature_is_enabled(client, 'GSLB')\n        ensure_feature_is_enabled(client, 'LB')\n        client.enable_features.assert_called_once_with('LB')\n\n    def test_log_function(self):\n        messages = [\n            'First message',\n            'Second message',\n        ]\n        log(messages[0])\n        log(messages[1])\n        self.assertListEqual(messages, loglines, msg='Log messages not recorded correctly')\n", "comments": "   copyright (c) 2017 citrix systems       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       ", "content": "\n#  Copyright (c) 2017 Citrix Systems\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\n\n\nfrom ansible.module_utils.network.netscaler.netscaler import ConfigProxy, get_immutables_intersection, ensure_feature_is_enabled, log, loglines\n\n\nclass TestNetscalerConfigProxy(unittest.TestCase):\n\n    def test_values_copied_to_actual(self):\n        actual = Mock()\n        client = Mock()\n        values = {\n            'some_key': 'some_value',\n        }\n        ConfigProxy(\n            actual=actual,\n            client=client,\n            attribute_values_dict=values,\n            readwrite_attrs=['some_key']\n        )\n        self.assertEqual(actual.some_key, values['some_key'], msg='Failed to pass correct value from values dict')\n\n    def test_none_values_not_copied_to_actual(self):\n        actual = Mock()\n        client = Mock()\n        actual.key_for_none = 'initial'\n        print('actual %s' % actual.key_for_none)\n        values = {\n            'key_for_none': None,\n        }\n        print('value %s' % actual.key_for_none)\n        ConfigProxy(\n            actual=actual,\n            client=client,\n            attribute_values_dict=values,\n            readwrite_attrs=['key_for_none']\n        )\n        self.assertEqual(actual.key_for_none, 'initial')\n\n    def test_missing_from_values_dict_not_copied_to_actual(self):\n        actual = Mock()\n        client = Mock()\n        values = {\n            'irrelevant_key': 'irrelevant_value',\n        }\n        print('value %s' % actual.key_for_none)\n        ConfigProxy(\n            actual=actual,\n            client=client,\n            attribute_values_dict=values,\n            readwrite_attrs=['key_for_none']\n        )\n        print('none %s' % getattr(actual, 'key_for_none'))\n        self.assertIsInstance(actual.key_for_none, Mock)\n\n    def test_bool_yes_no_transform(self):\n        actual = Mock()\n        client = Mock()\n        values = {\n            'yes_key': True,\n            'no_key': False,\n        }\n        transforms = {\n            'yes_key': ['bool_yes_no'],\n            'no_key': ['bool_yes_no']\n        }\n        ConfigProxy(\n            actual=actual,\n            client=client,\n            attribute_values_dict=values,\n            readwrite_attrs=['yes_key', 'no_key'],\n            transforms=transforms,\n        )\n        actual_values = [actual.yes_key, actual.no_key]\n        self.assertListEqual(actual_values, ['YES', 'NO'])\n\n    def test_bool_on_off_transform(self):\n        actual = Mock()\n        client = Mock()\n        values = {\n            'on_key': True,\n            'off_key': False,\n        }\n        transforms = {\n            'on_key': ['bool_on_off'],\n            'off_key': ['bool_on_off']\n        }\n        ConfigProxy(\n            actual=actual,\n            client=client,\n            attribute_values_dict=values,\n            readwrite_attrs=['on_key', 'off_key'],\n            transforms=transforms,\n        )\n        actual_values = [actual.on_key, actual.off_key]\n        self.assertListEqual(actual_values, ['ON', 'OFF'])\n\n    def test_callable_transform(self):\n        actual = Mock()\n        client = Mock()\n        values = {\n            'transform_key': 'hello',\n            'transform_chain': 'hello',\n        }\n        transforms = {\n            'transform_key': [lambda v: v.upper()],\n            'transform_chain': [lambda v: v.upper(), lambda v: v[:4]]\n        }\n        ConfigProxy(\n            actual=actual,\n            client=client,\n            attribute_values_dict=values,\n            readwrite_attrs=['transform_key', 'transform_chain'],\n            transforms=transforms,\n        )\n        actual_values = [actual.transform_key, actual.transform_chain]\n        self.assertListEqual(actual_values, ['HELLO', 'HELL'])\n\n\nclass TestNetscalerModuleUtils(unittest.TestCase):\n\n    def test_immutables_intersection(self):\n        actual = Mock()\n        client = Mock()\n        values = {\n            'mutable_key': 'some value',\n            'immutable_key': 'some other value',\n        }\n        proxy = ConfigProxy(\n            actual=actual,\n            client=client,\n            attribute_values_dict=values,\n            readwrite_attrs=['mutable_key', 'immutable_key'],\n            immutable_attrs=['immutable_key'],\n        )\n        keys_to_check = ['mutable_key', 'immutable_key', 'non_existant_key']\n        result = get_immutables_intersection(proxy, keys_to_check)\n        self.assertListEqual(result, ['immutable_key'])\n\n    def test_ensure_feature_is_enabled(self):\n        client = Mock()\n        attrs = {'get_enabled_features.return_value': ['GSLB']}\n        client.configure_mock(**attrs)\n        ensure_feature_is_enabled(client, 'GSLB')\n        ensure_feature_is_enabled(client, 'LB')\n        client.enable_features.assert_called_once_with('LB')\n\n    def test_log_function(self):\n        messages = [\n            'First message',\n            'Second message',\n        ]\n        log(messages[0])\n        log(messages[1])\n        self.assertListEqual(messages, loglines, msg='Log messages not recorded correctly')\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_netscaler_module_utils.py", "id": "19b2aa5cb41cf6bca2ab81e6eeef3890", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/netscaler/test_netscaler_module_utils.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}