{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    dict_get,\n    int_or_none,\n    unescapeHTML,\n    parse_iso8601,\n)\n\n\nclass PikselIE(InfoExtractor):\n    _VALID_URL = r'https?://player\\.piksel\\.com/v/(?P<id>[a-z0-9]+)'\n    _TESTS = [\n        {\n            'url': 'http://player.piksel.com/v/nv60p12f',\n            'md5': 'd9c17bbe9c3386344f9cfd32fad8d235',\n            'info_dict': {\n                'id': 'nv60p12f',\n                'ext': 'mp4',\n                'title': '\u0641\u0646 \u0627\u0644\u062d\u064a\u0627\u0629  - \u0627\u0644\u062d\u0644\u0642\u0629 1',\n                'description': '\u0627\u062d\u062f\u062b \u0628\u0631\u0627\u0645\u062c \u0627\u0644\u062f\u0627\u0639\u064a\u0629 \u0627\u0644\u0627\u0633\u0644\u0627\u0645\u064a \" \u0645\u0635\u0637\u0641\u064a \u062d\u0633\u0646\u064a \" \u0641\u0649 \u0631\u0645\u0636\u0627\u0646 2016\u0639\u0644\u064a \u0627\u0644\u0646\u0647\u0627\u0631 \u0646\u0648\u0631',\n                'timestamp': 1465231790,\n                'upload_date': '20160606',\n            }\n        },\n        {\n            \n            'url': 'https://player.piksel.com/v/v80kqp41',\n            'md5': '753ddcd8cc8e4fa2dda4b7be0e77744d',\n            'info_dict': {\n                'id': 'v80kqp41',\n                'ext': 'mp4',\n                'title': 'WAW- State of Washington vs. Donald J. Trump, et al',\n                'description': 'State of Washington vs. Donald J. Trump, et al, Case Number 17-CV-00141-JLR, TRO Hearing, Civil Rights Case, 02/3/2017, 1:00 PM (PST), Seattle Federal Courthouse, Seattle, WA, Judge James L. Robart presiding.',\n                'timestamp': 1486171129,\n                'upload_date': '20170204',\n            }\n        }\n    ]\n\n    @staticmethod\n    def _extract_url(webpage):\n        mobj = re.search(\n            r'<iframe[^>]+src=[\"\\'](?P<url>(?:https?:)?//player\\.piksel\\.com/v/[a-z0-9]+)',\n            webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        app_token = self._search_regex([\n            r'clientAPI\\s*:\\s*\"([^\"]+)\"',\n            r'data-de-api-key\\s*=\\s*\"([^\"]+)\"'\n        ], webpage, 'app token')\n        response = self._download_json(\n            'http://player.piksel.com/ws/ws_program/api/%s/mode/json/apiv/5' % app_token,\n            video_id, query={\n                'v': video_id\n            })['response']\n        failure = response.get('failure')\n        if failure:\n            raise ExtractorError(response['failure']['reason'], expected=True)\n        video_data = response['WsProgramResponse']['program']['asset']\n        title = video_data['title']\n\n        formats = []\n\n        m3u8_url = dict_get(video_data, [\n            'm3u8iPadURL',\n            'ipadM3u8Url',\n            'm3u8AndroidURL',\n            'm3u8iPhoneURL',\n            'iphoneM3u8Url'])\n        if m3u8_url:\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', 'm3u8_native',\n                m3u8_id='hls', fatal=False))\n\n        asset_type = dict_get(video_data, ['assetType', 'asset_type'])\n        for asset_file in video_data.get('assetFiles', []):\n            \n            http_url = asset_file.get('http_url')\n            if not http_url:\n                continue\n            tbr = None\n            vbr = int_or_none(asset_file.get('videoBitrate'), 1024)\n            abr = int_or_none(asset_file.get('audioBitrate'), 1024)\n            if asset_type == 'video':\n                tbr = vbr + abr\n            elif asset_type == 'audio':\n                tbr = abr\n\n            format_id = ['http']\n            if tbr:\n                format_id.append(compat_str(tbr))\n\n            formats.append({\n                'format_id': '-'.join(format_id),\n                'url': unescapeHTML(http_url),\n                'vbr': vbr,\n                'abr': abr,\n                'width': int_or_none(asset_file.get('videoWidth')),\n                'height': int_or_none(asset_file.get('videoHeight')),\n                'filesize': int_or_none(asset_file.get('filesize')),\n                'tbr': tbr,\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'thumbnail': video_data.get('thumbnailUrl'),\n            'timestamp': parse_iso8601(video_data.get('dateadd')),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# Original source: http://www.uscourts.gov/cameras-courts/state-washington-vs-donald-j-trump-et-al\n# TODO: extract rtmp formats\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    dict_get,\n    int_or_none,\n    unescapeHTML,\n    parse_iso8601,\n)\n\n\nclass PikselIE(InfoExtractor):\n    _VALID_URL = r'https?://player\\.piksel\\.com/v/(?P<id>[a-z0-9]+)'\n    _TESTS = [\n        {\n            'url': 'http://player.piksel.com/v/nv60p12f',\n            'md5': 'd9c17bbe9c3386344f9cfd32fad8d235',\n            'info_dict': {\n                'id': 'nv60p12f',\n                'ext': 'mp4',\n                'title': '\u0641\u0646 \u0627\u0644\u062d\u064a\u0627\u0629  - \u0627\u0644\u062d\u0644\u0642\u0629 1',\n                'description': '\u0627\u062d\u062f\u062b \u0628\u0631\u0627\u0645\u062c \u0627\u0644\u062f\u0627\u0639\u064a\u0629 \u0627\u0644\u0627\u0633\u0644\u0627\u0645\u064a \" \u0645\u0635\u0637\u0641\u064a \u062d\u0633\u0646\u064a \" \u0641\u0649 \u0631\u0645\u0636\u0627\u0646 2016\u0639\u0644\u064a \u0627\u0644\u0646\u0647\u0627\u0631 \u0646\u0648\u0631',\n                'timestamp': 1465231790,\n                'upload_date': '20160606',\n            }\n        },\n        {\n            # Original source: http://www.uscourts.gov/cameras-courts/state-washington-vs-donald-j-trump-et-al\n            'url': 'https://player.piksel.com/v/v80kqp41',\n            'md5': '753ddcd8cc8e4fa2dda4b7be0e77744d',\n            'info_dict': {\n                'id': 'v80kqp41',\n                'ext': 'mp4',\n                'title': 'WAW- State of Washington vs. Donald J. Trump, et al',\n                'description': 'State of Washington vs. Donald J. Trump, et al, Case Number 17-CV-00141-JLR, TRO Hearing, Civil Rights Case, 02/3/2017, 1:00 PM (PST), Seattle Federal Courthouse, Seattle, WA, Judge James L. Robart presiding.',\n                'timestamp': 1486171129,\n                'upload_date': '20170204',\n            }\n        }\n    ]\n\n    @staticmethod\n    def _extract_url(webpage):\n        mobj = re.search(\n            r'<iframe[^>]+src=[\"\\'](?P<url>(?:https?:)?//player\\.piksel\\.com/v/[a-z0-9]+)',\n            webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        app_token = self._search_regex([\n            r'clientAPI\\s*:\\s*\"([^\"]+)\"',\n            r'data-de-api-key\\s*=\\s*\"([^\"]+)\"'\n        ], webpage, 'app token')\n        response = self._download_json(\n            'http://player.piksel.com/ws/ws_program/api/%s/mode/json/apiv/5' % app_token,\n            video_id, query={\n                'v': video_id\n            })['response']\n        failure = response.get('failure')\n        if failure:\n            raise ExtractorError(response['failure']['reason'], expected=True)\n        video_data = response['WsProgramResponse']['program']['asset']\n        title = video_data['title']\n\n        formats = []\n\n        m3u8_url = dict_get(video_data, [\n            'm3u8iPadURL',\n            'ipadM3u8Url',\n            'm3u8AndroidURL',\n            'm3u8iPhoneURL',\n            'iphoneM3u8Url'])\n        if m3u8_url:\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', 'm3u8_native',\n                m3u8_id='hls', fatal=False))\n\n        asset_type = dict_get(video_data, ['assetType', 'asset_type'])\n        for asset_file in video_data.get('assetFiles', []):\n            # TODO: extract rtmp formats\n            http_url = asset_file.get('http_url')\n            if not http_url:\n                continue\n            tbr = None\n            vbr = int_or_none(asset_file.get('videoBitrate'), 1024)\n            abr = int_or_none(asset_file.get('audioBitrate'), 1024)\n            if asset_type == 'video':\n                tbr = vbr + abr\n            elif asset_type == 'audio':\n                tbr = abr\n\n            format_id = ['http']\n            if tbr:\n                format_id.append(compat_str(tbr))\n\n            formats.append({\n                'format_id': '-'.join(format_id),\n                'url': unescapeHTML(http_url),\n                'vbr': vbr,\n                'abr': abr,\n                'width': int_or_none(asset_file.get('videoWidth')),\n                'height': int_or_none(asset_file.get('videoHeight')),\n                'filesize': int_or_none(asset_file.get('filesize')),\n                'tbr': tbr,\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'thumbnail': video_data.get('thumbnailUrl'),\n            'timestamp': parse_iso8601(video_data.get('dateadd')),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "piksel.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/piksel.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}