{"author": "django", "code": "from django.test import TestCase\n\nfrom .models import Organiser, Pool, PoolStyle, Tournament\n\n\nclass ExistingRelatedInstancesTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.t1 = Tournament.objects.create(name='Tourney 1')\n        cls.t2 = Tournament.objects.create(name='Tourney 2')\n        cls.o1 = Organiser.objects.create(name='Organiser 1')\n        cls.p1 = Pool.objects.create(name='T1 Pool 1', tournament=cls.t1, organiser=cls.o1)\n        cls.p2 = Pool.objects.create(name='T1 Pool 2', tournament=cls.t1, organiser=cls.o1)\n        cls.p3 = Pool.objects.create(name='T2 Pool 1', tournament=cls.t2, organiser=cls.o1)\n        cls.p4 = Pool.objects.create(name='T2 Pool 2', tournament=cls.t2, organiser=cls.o1)\n        cls.ps1 = PoolStyle.objects.create(name='T1 Pool 2 Style', pool=cls.p2)\n        cls.ps2 = PoolStyle.objects.create(name='T2 Pool 1 Style', pool=cls.p3)\n\n    def test_foreign_key(self):\n        with self.assertNumQueries(2):\n            tournament = Tournament.objects.get(pk=self.t1.pk)\n            pool = tournament.pool_set.all()[0]\n            self.assertIs(tournament, pool.tournament)\n\n    def test_foreign_key_prefetch_related(self):\n        with self.assertNumQueries(2):\n            tournament = (Tournament.objects.prefetch_related('pool_set').get(pk=self.t1.pk))\n            pool = tournament.pool_set.all()[0]\n            self.assertIs(tournament, pool.tournament)\n\n    def test_foreign_key_multiple_prefetch(self):\n        with self.assertNumQueries(2):\n            tournaments = list(Tournament.objects.prefetch_related('pool_set').order_by('pk'))\n            pool1 = tournaments[0].pool_set.all()[0]\n            self.assertIs(tournaments[0], pool1.tournament)\n            pool2 = tournaments[1].pool_set.all()[0]\n            self.assertIs(tournaments[1], pool2.tournament)\n\n    def test_queryset_or(self):\n        tournament_1 = self.t1\n        tournament_2 = self.t2\n        with self.assertNumQueries(1):\n            pools = tournament_1.pool_set.all() | tournament_2.pool_set.all()\n            related_objects = {pool.tournament for pool in pools}\n            self.assertEqual(related_objects, {tournament_1, tournament_2})\n\n    def test_queryset_or_different_cached_items(self):\n        tournament = self.t1\n        organiser = self.o1\n        with self.assertNumQueries(1):\n            pools = tournament.pool_set.all() | organiser.pool_set.all()\n            first = pools.filter(pk=self.p1.pk)[0]\n            self.assertIs(first.tournament, tournament)\n            self.assertIs(first.organiser, organiser)\n\n    def test_queryset_or_only_one_with_precache(self):\n        tournament_1 = self.t1\n        tournament_2 = self.t2\n        \n        with self.assertNumQueries(2):\n            pools = tournament_1.pool_set.all() | Pool.objects.filter(pk=self.p3.pk)\n            related_objects = {pool.tournament for pool in pools}\n            self.assertEqual(related_objects, {tournament_1, tournament_2})\n        \n        with self.assertNumQueries(2):\n            pools = Pool.objects.filter(pk=self.p3.pk) | tournament_1.pool_set.all()\n            related_objects = {pool.tournament for pool in pools}\n            self.assertEqual(related_objects, {tournament_1, tournament_2})\n\n    def test_queryset_and(self):\n        tournament = self.t1\n        organiser = self.o1\n        with self.assertNumQueries(1):\n            pools = tournament.pool_set.all() & organiser.pool_set.all()\n            first = pools.filter(pk=self.p1.pk)[0]\n            self.assertIs(first.tournament, tournament)\n            self.assertIs(first.organiser, organiser)\n\n    def test_one_to_one(self):\n        with self.assertNumQueries(2):\n            style = PoolStyle.objects.get(pk=self.ps1.pk)\n            pool = style.pool\n            self.assertIs(style, pool.poolstyle)\n\n    def test_one_to_one_select_related(self):\n        with self.assertNumQueries(1):\n            style = PoolStyle.objects.select_related('pool').get(pk=self.ps1.pk)\n            pool = style.pool\n            self.assertIs(style, pool.poolstyle)\n\n    def test_one_to_one_multi_select_related(self):\n        with self.assertNumQueries(1):\n            poolstyles = list(PoolStyle.objects.select_related('pool').order_by('pk'))\n            self.assertIs(poolstyles[0], poolstyles[0].pool.poolstyle)\n            self.assertIs(poolstyles[1], poolstyles[1].pool.poolstyle)\n\n    def test_one_to_one_prefetch_related(self):\n        with self.assertNumQueries(2):\n            style = PoolStyle.objects.prefetch_related('pool').get(pk=self.ps1.pk)\n            pool = style.pool\n            self.assertIs(style, pool.poolstyle)\n\n    def test_one_to_one_multi_prefetch_related(self):\n        with self.assertNumQueries(2):\n            poolstyles = list(PoolStyle.objects.prefetch_related('pool').order_by('pk'))\n            self.assertIs(poolstyles[0], poolstyles[0].pool.poolstyle)\n            self.assertIs(poolstyles[1], poolstyles[1].pool.poolstyle)\n\n    def test_reverse_one_to_one(self):\n        with self.assertNumQueries(2):\n            pool = Pool.objects.get(pk=self.p2.pk)\n            style = pool.poolstyle\n            self.assertIs(pool, style.pool)\n\n    def test_reverse_one_to_one_select_related(self):\n        with self.assertNumQueries(1):\n            pool = Pool.objects.select_related('poolstyle').get(pk=self.p2.pk)\n            style = pool.poolstyle\n            self.assertIs(pool, style.pool)\n\n    def test_reverse_one_to_one_prefetch_related(self):\n        with self.assertNumQueries(2):\n            pool = Pool.objects.prefetch_related('poolstyle').get(pk=self.p2.pk)\n            style = pool.poolstyle\n            self.assertIs(pool, style.pool)\n\n    def test_reverse_one_to_one_multi_select_related(self):\n        with self.assertNumQueries(1):\n            pools = list(Pool.objects.select_related('poolstyle').order_by('pk'))\n            self.assertIs(pools[1], pools[1].poolstyle.pool)\n            self.assertIs(pools[2], pools[2].poolstyle.pool)\n\n    def test_reverse_one_to_one_multi_prefetch_related(self):\n        with self.assertNumQueries(2):\n            pools = list(Pool.objects.prefetch_related('poolstyle').order_by('pk'))\n            self.assertIs(pools[1], pools[1].poolstyle.pool)\n            self.assertIs(pools[2], pools[2].poolstyle.pool)\n", "comments": "  2 queries pool 3 tournament 2  cached    direction ", "content": "from django.test import TestCase\n\nfrom .models import Organiser, Pool, PoolStyle, Tournament\n\n\nclass ExistingRelatedInstancesTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.t1 = Tournament.objects.create(name='Tourney 1')\n        cls.t2 = Tournament.objects.create(name='Tourney 2')\n        cls.o1 = Organiser.objects.create(name='Organiser 1')\n        cls.p1 = Pool.objects.create(name='T1 Pool 1', tournament=cls.t1, organiser=cls.o1)\n        cls.p2 = Pool.objects.create(name='T1 Pool 2', tournament=cls.t1, organiser=cls.o1)\n        cls.p3 = Pool.objects.create(name='T2 Pool 1', tournament=cls.t2, organiser=cls.o1)\n        cls.p4 = Pool.objects.create(name='T2 Pool 2', tournament=cls.t2, organiser=cls.o1)\n        cls.ps1 = PoolStyle.objects.create(name='T1 Pool 2 Style', pool=cls.p2)\n        cls.ps2 = PoolStyle.objects.create(name='T2 Pool 1 Style', pool=cls.p3)\n\n    def test_foreign_key(self):\n        with self.assertNumQueries(2):\n            tournament = Tournament.objects.get(pk=self.t1.pk)\n            pool = tournament.pool_set.all()[0]\n            self.assertIs(tournament, pool.tournament)\n\n    def test_foreign_key_prefetch_related(self):\n        with self.assertNumQueries(2):\n            tournament = (Tournament.objects.prefetch_related('pool_set').get(pk=self.t1.pk))\n            pool = tournament.pool_set.all()[0]\n            self.assertIs(tournament, pool.tournament)\n\n    def test_foreign_key_multiple_prefetch(self):\n        with self.assertNumQueries(2):\n            tournaments = list(Tournament.objects.prefetch_related('pool_set').order_by('pk'))\n            pool1 = tournaments[0].pool_set.all()[0]\n            self.assertIs(tournaments[0], pool1.tournament)\n            pool2 = tournaments[1].pool_set.all()[0]\n            self.assertIs(tournaments[1], pool2.tournament)\n\n    def test_queryset_or(self):\n        tournament_1 = self.t1\n        tournament_2 = self.t2\n        with self.assertNumQueries(1):\n            pools = tournament_1.pool_set.all() | tournament_2.pool_set.all()\n            related_objects = {pool.tournament for pool in pools}\n            self.assertEqual(related_objects, {tournament_1, tournament_2})\n\n    def test_queryset_or_different_cached_items(self):\n        tournament = self.t1\n        organiser = self.o1\n        with self.assertNumQueries(1):\n            pools = tournament.pool_set.all() | organiser.pool_set.all()\n            first = pools.filter(pk=self.p1.pk)[0]\n            self.assertIs(first.tournament, tournament)\n            self.assertIs(first.organiser, organiser)\n\n    def test_queryset_or_only_one_with_precache(self):\n        tournament_1 = self.t1\n        tournament_2 = self.t2\n        # 2 queries here as pool 3 has tournament 2, which is not cached\n        with self.assertNumQueries(2):\n            pools = tournament_1.pool_set.all() | Pool.objects.filter(pk=self.p3.pk)\n            related_objects = {pool.tournament for pool in pools}\n            self.assertEqual(related_objects, {tournament_1, tournament_2})\n        # and the other direction\n        with self.assertNumQueries(2):\n            pools = Pool.objects.filter(pk=self.p3.pk) | tournament_1.pool_set.all()\n            related_objects = {pool.tournament for pool in pools}\n            self.assertEqual(related_objects, {tournament_1, tournament_2})\n\n    def test_queryset_and(self):\n        tournament = self.t1\n        organiser = self.o1\n        with self.assertNumQueries(1):\n            pools = tournament.pool_set.all() & organiser.pool_set.all()\n            first = pools.filter(pk=self.p1.pk)[0]\n            self.assertIs(first.tournament, tournament)\n            self.assertIs(first.organiser, organiser)\n\n    def test_one_to_one(self):\n        with self.assertNumQueries(2):\n            style = PoolStyle.objects.get(pk=self.ps1.pk)\n            pool = style.pool\n            self.assertIs(style, pool.poolstyle)\n\n    def test_one_to_one_select_related(self):\n        with self.assertNumQueries(1):\n            style = PoolStyle.objects.select_related('pool').get(pk=self.ps1.pk)\n            pool = style.pool\n            self.assertIs(style, pool.poolstyle)\n\n    def test_one_to_one_multi_select_related(self):\n        with self.assertNumQueries(1):\n            poolstyles = list(PoolStyle.objects.select_related('pool').order_by('pk'))\n            self.assertIs(poolstyles[0], poolstyles[0].pool.poolstyle)\n            self.assertIs(poolstyles[1], poolstyles[1].pool.poolstyle)\n\n    def test_one_to_one_prefetch_related(self):\n        with self.assertNumQueries(2):\n            style = PoolStyle.objects.prefetch_related('pool').get(pk=self.ps1.pk)\n            pool = style.pool\n            self.assertIs(style, pool.poolstyle)\n\n    def test_one_to_one_multi_prefetch_related(self):\n        with self.assertNumQueries(2):\n            poolstyles = list(PoolStyle.objects.prefetch_related('pool').order_by('pk'))\n            self.assertIs(poolstyles[0], poolstyles[0].pool.poolstyle)\n            self.assertIs(poolstyles[1], poolstyles[1].pool.poolstyle)\n\n    def test_reverse_one_to_one(self):\n        with self.assertNumQueries(2):\n            pool = Pool.objects.get(pk=self.p2.pk)\n            style = pool.poolstyle\n            self.assertIs(pool, style.pool)\n\n    def test_reverse_one_to_one_select_related(self):\n        with self.assertNumQueries(1):\n            pool = Pool.objects.select_related('poolstyle').get(pk=self.p2.pk)\n            style = pool.poolstyle\n            self.assertIs(pool, style.pool)\n\n    def test_reverse_one_to_one_prefetch_related(self):\n        with self.assertNumQueries(2):\n            pool = Pool.objects.prefetch_related('poolstyle').get(pk=self.p2.pk)\n            style = pool.poolstyle\n            self.assertIs(pool, style.pool)\n\n    def test_reverse_one_to_one_multi_select_related(self):\n        with self.assertNumQueries(1):\n            pools = list(Pool.objects.select_related('poolstyle').order_by('pk'))\n            self.assertIs(pools[1], pools[1].poolstyle.pool)\n            self.assertIs(pools[2], pools[2].poolstyle.pool)\n\n    def test_reverse_one_to_one_multi_prefetch_related(self):\n        with self.assertNumQueries(2):\n            pools = list(Pool.objects.prefetch_related('poolstyle').order_by('pk'))\n            self.assertIs(pools[1], pools[1].poolstyle.pool)\n            self.assertIs(pools[2], pools[2].poolstyle.pool)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "0146122745f2d817cad7f670833c3dd4", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/known_related_objects/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}