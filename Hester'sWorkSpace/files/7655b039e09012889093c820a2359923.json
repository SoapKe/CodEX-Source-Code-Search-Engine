{"author": "ansible", "code": "# Copyright (c) 2016-2017 Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom ansible.compat.tests import unittest\nfrom oneview_module_loader import SanManagerFactsModule\nfrom hpe_test_utils import FactsParamsTestCase\n\n\nclass SanManagerFactsSpec(unittest.TestCase, FactsParamsTestCase):\n    ERROR_MSG = 'Fake message error'\n\n    PARAMS_GET_ALL = dict(\n        config='config.json',\n        provider_display_name=None\n    )\n\n    PARAMS_GET_BY_PROVIDER_DISPLAY_NAME = dict(\n        config='config.json',\n        provider_display_name=\"Brocade Network Advisor\"\n    )\n\n    PRESENT_SAN_MANAGERS = [{\n        \"providerDisplayName\": \"Brocade Network Advisor\",\n        \"uri\": \"/rest/fc-sans/device-managers//d60efc8a-15b8-470c-8470-738d16d6b319\"\n    }]\n\n    def setUp(self):\n        self.configure_mocks(self, SanManagerFactsModule)\n        self.san_managers = self.mock_ov_client.san_managers\n\n        FactsParamsTestCase.configure_client_mock(self, self.san_managers)\n\n    def test_should_get_all(self):\n        self.san_managers.get_all.return_value = self.PRESENT_SAN_MANAGERS\n        self.mock_ansible_module.params = self.PARAMS_GET_ALL\n\n        SanManagerFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(san_managers=self.PRESENT_SAN_MANAGERS)\n        )\n\n    def test_should_get_by_display_name(self):\n        self.san_managers.get_by_provider_display_name.return_value = self.PRESENT_SAN_MANAGERS[0]\n        self.mock_ansible_module.params = self.PARAMS_GET_BY_PROVIDER_DISPLAY_NAME\n\n        SanManagerFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(san_managers=self.PRESENT_SAN_MANAGERS)\n        )\n\n    def test_should_return_empty_list_when_get_by_display_name_is_null(self):\n        self.san_managers.get_by_provider_display_name.return_value = None\n        self.mock_ansible_module.params = self.PARAMS_GET_BY_PROVIDER_DISPLAY_NAME\n\n        SanManagerFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(san_managers=[])\n        )\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "  copyright (c) 2016 2017 hewlett packard enterprise development lp    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "# Copyright (c) 2016-2017 Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom ansible.compat.tests import unittest\nfrom oneview_module_loader import SanManagerFactsModule\nfrom hpe_test_utils import FactsParamsTestCase\n\n\nclass SanManagerFactsSpec(unittest.TestCase, FactsParamsTestCase):\n    ERROR_MSG = 'Fake message error'\n\n    PARAMS_GET_ALL = dict(\n        config='config.json',\n        provider_display_name=None\n    )\n\n    PARAMS_GET_BY_PROVIDER_DISPLAY_NAME = dict(\n        config='config.json',\n        provider_display_name=\"Brocade Network Advisor\"\n    )\n\n    PRESENT_SAN_MANAGERS = [{\n        \"providerDisplayName\": \"Brocade Network Advisor\",\n        \"uri\": \"/rest/fc-sans/device-managers//d60efc8a-15b8-470c-8470-738d16d6b319\"\n    }]\n\n    def setUp(self):\n        self.configure_mocks(self, SanManagerFactsModule)\n        self.san_managers = self.mock_ov_client.san_managers\n\n        FactsParamsTestCase.configure_client_mock(self, self.san_managers)\n\n    def test_should_get_all(self):\n        self.san_managers.get_all.return_value = self.PRESENT_SAN_MANAGERS\n        self.mock_ansible_module.params = self.PARAMS_GET_ALL\n\n        SanManagerFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(san_managers=self.PRESENT_SAN_MANAGERS)\n        )\n\n    def test_should_get_by_display_name(self):\n        self.san_managers.get_by_provider_display_name.return_value = self.PRESENT_SAN_MANAGERS[0]\n        self.mock_ansible_module.params = self.PARAMS_GET_BY_PROVIDER_DISPLAY_NAME\n\n        SanManagerFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(san_managers=self.PRESENT_SAN_MANAGERS)\n        )\n\n    def test_should_return_empty_list_when_get_by_display_name_is_null(self):\n        self.san_managers.get_by_provider_display_name.return_value = None\n        self.mock_ansible_module.params = self.PARAMS_GET_BY_PROVIDER_DISPLAY_NAME\n\n        SanManagerFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(san_managers=[])\n        )\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_oneview_san_manager_facts.py", "id": "7655b039e09012889093c820a2359923", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/remote_management/oneview/test_oneview_san_manager_facts.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}