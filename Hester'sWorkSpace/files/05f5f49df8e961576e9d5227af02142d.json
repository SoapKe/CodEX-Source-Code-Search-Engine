{"author": "keon", "code": "\n\n\n\n\n     \n   \n  \n \n\n           \n            \n\n\n\nclass Node:\n    def __init__(self, val = None):\n        self.left = None\n        self.right = None\n        self.val = val\n\nclass DeepestLeft:\n    def __init__(self):\n        self.depth = 0\n        self.Node = None\n\ndef find_deepest_left(root, is_left, depth, res):\n    if not root:\n        return\n    if is_left and depth > res.depth:\n        res.depth = depth\n        res.Node = root\n    find_deepest_left(root.left, True, depth + 1, res)\n    find_deepest_left(root.right, False, depth + 1, res)\n\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\nroot.right.right = Node(6)\nroot.right.right.right = Node(7)\n\nres = DeepestLeft()\nfind_deepest_left(root, True, 1, res)\nif res.Node:\n    print(res.Node.val)\n", "comments": "given binary tree find deepest node left child parent node example: 1 / \\ 2 3 / \\ \\ 4 5 6 \\ 7 return 4", "content": "# Given a binary tree, find the deepest node\n# that is the left child of its parent node.\n\n# Example:\n\n     # 1\n   # /   \\\n  # 2     3\n # / \\     \\\n# 4   5     6\n           # \\\n            # 7\n# should return 4.\n\n\nclass Node:\n    def __init__(self, val = None):\n        self.left = None\n        self.right = None\n        self.val = val\n\nclass DeepestLeft:\n    def __init__(self):\n        self.depth = 0\n        self.Node = None\n\ndef find_deepest_left(root, is_left, depth, res):\n    if not root:\n        return\n    if is_left and depth > res.depth:\n        res.depth = depth\n        res.Node = root\n    find_deepest_left(root.left, True, depth + 1, res)\n    find_deepest_left(root.right, False, depth + 1, res)\n\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\nroot.right.right = Node(6)\nroot.right.right.right = Node(7)\n\nres = DeepestLeft()\nfind_deepest_left(root, True, 1, res)\nif res.Node:\n    print(res.Node.val)\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "deepest_left.py", "id": "05f5f49df8e961576e9d5227af02142d", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/keon-algorithms/keon-algorithms-abe4cb1/tree/deepest_left.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:56:36Z", "url": "https://github.com/keon/algorithms", "wiki": true}