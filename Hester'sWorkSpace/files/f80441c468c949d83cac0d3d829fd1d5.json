{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestQueueFromStacks(object):\n\n    def test_queue_from_stacks(self):\n        print('Test: Dequeue on empty stack')\n        queue = QueueFromStacks()\n        assert_equal(queue.dequeue(), None)\n\n        print('Test: Enqueue on empty stack')\n        print('Test: Enqueue on non-empty stack')\n        print('Test: Multiple enqueue in a row')\n        num_items = 3\n        for i in range(0, num_items):\n            queue.enqueue(i)\n\n        print('Test: Dequeue on non-empty stack')\n        print('Test: Dequeue after an enqueue')\n        assert_equal(queue.dequeue(), 0)\n\n        print('Test: Multiple dequeue in a row')\n        assert_equal(queue.dequeue(), 1)\n        assert_equal(queue.dequeue(), 2)\n\n        print('Test: Enqueue after a dequeue')\n        queue.enqueue(5)\n        assert_equal(queue.dequeue(), 5)\n\n        print('Success: test_queue_from_stacks')\n\n\ndef main():\n    test = TestQueueFromStacks()\n    test.test_queue_from_stacks()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\n\nclass TestQueueFromStacks(object):\n\n    def test_queue_from_stacks(self):\n        print('Test: Dequeue on empty stack')\n        queue = QueueFromStacks()\n        assert_equal(queue.dequeue(), None)\n\n        print('Test: Enqueue on empty stack')\n        print('Test: Enqueue on non-empty stack')\n        print('Test: Multiple enqueue in a row')\n        num_items = 3\n        for i in range(0, num_items):\n            queue.enqueue(i)\n\n        print('Test: Dequeue on non-empty stack')\n        print('Test: Dequeue after an enqueue')\n        assert_equal(queue.dequeue(), 0)\n\n        print('Test: Multiple dequeue in a row')\n        assert_equal(queue.dequeue(), 1)\n        assert_equal(queue.dequeue(), 2)\n\n        print('Test: Enqueue after a dequeue')\n        queue.enqueue(5)\n        assert_equal(queue.dequeue(), 5)\n\n        print('Success: test_queue_from_stacks')\n\n\ndef main():\n    test = TestQueueFromStacks()\n    test.test_queue_from_stacks()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_queue_from_stacks.py", "id": "f80441c468c949d83cac0d3d829fd1d5", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/stacks_queues/queue_from_stacks/test_queue_from_stacks.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}