{"author": "odoo", "code": "\n\n\n\nimport json\nimport logging\nfrom hashlib import sha256\n\nfrom werkzeug import urls\n\nfrom odoo import models, fields, api\nfrom odoo.tools.float_utils import float_compare\nfrom odoo.tools.translate import _\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.addons.payment_sips.controllers.main import SipsController\n\n_logger = logging.getLogger(__name__)\n\n\nCURRENCY_CODES = {\n    'EUR': '978',\n    'USD': '840',\n    'CHF': '756',\n    'GBP': '826',\n    'CAD': '124',\n    'JPY': '392',\n    'MXN': '484',\n    'TRY': '949',\n    'AUD': '036',\n    'NZD': '554',\n    'NOK': '578',\n    'BRL': '986',\n    'ARS': '032',\n    'KHR': '116',\n    'TWD': '901',\n}\n\n\nclass AcquirerSips(models.Model):\n    _inherit = 'payment.acquirer'\n\n    provider = fields.Selection(selection_add=[('sips', 'Sips')])\n    sips_merchant_id = fields.Char('Merchant ID', help=\"Used for production only\", required_if_provider='sips', groups='base.group_user')\n    sips_secret = fields.Char('Secret Key', size=64, required_if_provider='sips', groups='base.group_user')\n    sips_test_url = fields.Char(\"Test's url\", required_if_provider='sips', groups='base.group_no_one', default='https://payment-webinit.sips-atos.com/paymentInit')\n    sips_prod_url = fields.Char(\"Prod's url\", required_if_provider='sips', groups='base.group_no_one', default='https://payment-webinit.simu.sips-atos.com/paymentInit')\n    sips_version = fields.Char(\"Interface Version\", required_if_provider='sips', groups='base.group_no_one', default='HP_2.3')\n\n    def _sips_generate_shasign(self, values):\n        \"\"\" Generate the shasign for incoming or outgoing communications.\n        :param dict values: transaction values\n        :return string: shasign\n        \"\"\"\n        if self.provider != 'sips':\n            raise ValidationError(_('Incorrect payment acquirer provider'))\n        data = values['Data']\n\n        \n        key = u'002001000000001_KEY1'\n\n        if self.environment == 'prod':\n            key = getattr(self, 'sips_secret')\n\n        shasign = sha256((data + key).encode('utf-8'))\n        return shasign.hexdigest()\n\n    @api.multi\n    def sips_form_generate_values(self, values):\n        self.ensure_one()\n        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        currency = self.env['res.currency'].sudo().browse(values['currency_id'])\n        currency_code = CURRENCY_CODES.get(currency.name, False)\n        if not currency_code:\n            raise ValidationError(_('Currency not supported by Wordline'))\n        amount = int(values['amount'] * 100)\n        if self.environment == 'prod':\n            \n            merchant_id = getattr(self, 'sips_merchant_id')\n            key_version = self.env['ir.config_parameter'].sudo().get_param('sips.key_version', '2')\n        else:\n            \n            merchant_id = '002001000000001'\n            key_version = '1'\n\n        sips_tx_values = dict(values)\n        sips_tx_values.update({\n            'Data': u'amount=%s|' % amount +\n                    u'currencyCode=%s|' % currency_code +\n                    u'merchantId=%s|' % merchant_id +\n                    u'normalReturnUrl=%s|' % urls.url_join(base_url, SipsController._return_url) +\n                    u'automaticResponseUrl=%s|' % urls.url_join(base_url, SipsController._return_url) +\n                    u'transactionReference=%s|' % values['reference'] +\n                    u'statementReference=%s|' % values['reference'] +\n                    u'keyVersion=%s' % key_version,\n            'InterfaceVersion': self.sips_version,\n        })\n\n        return_context = {}\n        if sips_tx_values.get('return_url'):\n            return_context[u'return_url'] = u'%s' % sips_tx_values.pop('return_url')\n        return_context[u'reference'] = u'%s' % sips_tx_values['reference']\n        sips_tx_values['Data'] += u'|returnContext=%s' % (json.dumps(return_context))\n\n        shasign = self._sips_generate_shasign(sips_tx_values)\n        sips_tx_values['Seal'] = shasign\n        return sips_tx_values\n\n    @api.multi\n    def sips_get_form_action_url(self):\n        self.ensure_one()\n        return self.environment == 'prod' and self.sips_prod_url or self.sips_test_url\n\n\nclass TxSips(models.Model):\n    _inherit = 'payment.transaction'\n\n    _sips_valid_tx_status = ['00']\n    _sips_wait_tx_status = ['90', '99']\n    _sips_refused_tx_status = ['05', '14', '34', '54', '75', '97']\n    _sips_error_tx_status = ['03', '12', '24', '25', '30', '40', '51', '63', '94']\n    _sips_pending_tx_status = ['60']\n    _sips_cancel_tx_status = ['17']\n\n    \n    \n    \n\n    def _sips_data_to_object(self, data):\n        res = {}\n        for element in data.split('|'):\n            element_split = element.split('=')\n            res[element_split[0]] = element_split[1]\n        return res\n\n    @api.model\n    def _sips_form_get_tx_from_data(self, data):\n        \"\"\" Given a data dict coming from sips, verify it and find the related\n        transaction record. \"\"\"\n\n        data = self._sips_data_to_object(data.get('Data'))\n        reference = data.get('transactionReference')\n\n        if not reference:\n            custom = json.loads(data.pop('returnContext', False) or '{}')\n            reference = custom.get('reference')\n\n        payment_tx = self.search([('reference', '=', reference)])\n        if not payment_tx or len(payment_tx) > 1:\n            error_msg = _('Sips: received data for reference %s') % reference\n            if not payment_tx:\n                error_msg += _('; no order found')\n            else:\n                error_msg += _('; multiple order found')\n            _logger.error(error_msg)\n            raise ValidationError(error_msg)\n        return payment_tx\n\n    @api.multi\n    def _sips_form_get_invalid_parameters(self, data):\n        invalid_parameters = []\n\n        data = self._sips_data_to_object(data.get('Data'))\n\n        \n        if self.acquirer_reference and data.get('transactionReference') != self.acquirer_reference:\n            invalid_parameters.append(('transactionReference', data.get('transactionReference'), self.acquirer_reference))\n        \n        if float_compare(float(data.get('amount', '0.0')) / 100, self.amount, 2) != 0:\n            invalid_parameters.append(('amount', data.get('amount'), '%.2f' % self.amount))\n\n        return invalid_parameters\n\n    @api.multi\n    def _sips_form_validate(self, data):\n        data = self._sips_data_to_object(data.get('Data'))\n        status = data.get('responseCode')\n        data = {\n            'acquirer_reference': data.get('transactionReference'),\n            'partner_reference': data.get('customerId'),\n            'date_validate': data.get('transactionDateTime',\n                                      fields.Datetime.now())\n        }\n        res = False\n        if status in self._sips_valid_tx_status:\n            msg = 'Payment for tx ref: %s, got response [%s], set as done.' % \\\n                  (self.reference, status)\n            _logger.info(msg)\n            data.update(state='done', state_message=msg)\n            res = True\n        elif status in self._sips_error_tx_status:\n            msg = 'Payment for tx ref: %s, got response [%s], set as ' \\\n                  'error.' % (self.reference, status)\n            data.update(state='error', state_message=msg)\n        elif status in self._sips_wait_tx_status:\n            msg = 'Received wait status for payment ref: %s, got response ' \\\n                  '[%s], set as error.' % (self.reference, status)\n            data.update(state='error', state_message=msg)\n        elif status in self._sips_refused_tx_status:\n            msg = 'Received refused status for payment ref: %s, got response' \\\n                  ' [%s], set as error.' % (self.reference, status)\n            data.update(state='error', state_message=msg)\n        elif status in self._sips_pending_tx_status:\n            msg = 'Payment ref: %s, got response [%s] set as pending.' \\\n                  % (self.reference, status)\n            data.update(state='pending', state_message=msg)\n        elif status in self._sips_cancel_tx_status:\n            msg = 'Received notification for payment ref: %s, got response ' \\\n                  '[%s], set as cancel.' % (self.reference, status)\n            data.update(state='cancel', state_message=msg)\n        else:\n            msg = 'Received unrecognized status for payment ref: %s, got ' \\\n                  'response [%s], set as error.' % (self.reference, status)\n            data.update(state='error', state_message=msg)\n\n        _logger.info(msg)\n        self.write(data)\n        return res\n", "comments": "    generate shasign incoming outgoing communications           param dict values  transaction values          return string  shasign                     self provider     sips               raise validationerror( ( incorrect payment acquirer provider ))         data   values  data              test key provided worldine         key   u 002001000000001 key1           self environment     prod               key   getattr(self   sips secret )          shasign   sha256((data   key) encode( utf 8 ))         return shasign hexdigest()       api multi     def sips form generate values(self  values)          self ensure one()         base url   self env  ir config parameter   sudo() get param( web base url )         currency   self env  res currency   sudo() browse(values  currency id  )         currency code   currency codes get(currency name  false)         currency code              raise validationerror( ( currency supported wordline ))         amount   int(values  amount     100)         self environment     prod                 for production environment  key version 2 required             merchant id   getattr(self   sips merchant id )             key version   self env  ir config parameter   sudo() get param( sips key version    2 )         else                test key provided atos wordline works version 1             merchant id    002001000000001              key version    1           sips tx values   dict(values)         sips tx values update(               data   u amount      amount                       u currencycode      currency code                       u merchantid      merchant id                       u normalreturnurl      urls url join(base url  sipscontroller  return url)                       u automaticresponseurl      urls url join(base url  sipscontroller  return url)                       u transactionreference      values  reference                         u statementreference      values  reference                         u keyversion     key version               interfaceversion   self sips version           )          return context              sips tx values get( return url )              return context u return url     u     sips tx values pop( return url )         return context u reference     u     sips tx values  reference           sips tx values  data      u  returncontext     (json dumps(return context))          shasign   self  sips generate shasign(sips tx values)         sips tx values  seal     shasign         return sips tx values       api multi     def sips get form action url(self)          self ensure one()         return self environment     prod  self sips prod url self sips test url   class txsips(models model)       inherit    payment transaction        sips valid tx status     00        sips wait tx status     90    99        sips refused tx status     05    14    34    54    75    97        sips error tx status     03    12    24    25    30    40    51    63    94        sips pending tx status     60        sips cancel tx status     17                                                                   form related methods                                                               def  sips data object(self  data)          res              element data split(   )              element split   element split(   )             res element split 0     element split 1          return res       api model     def  sips form get tx data(self  data)              given data dict coming sips  verify find related         transaction record         coding  utf 8    copyright 2015 eezee it    test key provided worldine    for production environment  key version 2 required    test key provided atos wordline works version 1                                                          form related methods                                                          todo  txn id  false draft  set afterwards  verified txn details    check bought ", "content": "# coding: utf-8\n\n# Copyright 2015 Eezee-It\n\nimport json\nimport logging\nfrom hashlib import sha256\n\nfrom werkzeug import urls\n\nfrom odoo import models, fields, api\nfrom odoo.tools.float_utils import float_compare\nfrom odoo.tools.translate import _\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.addons.payment_sips.controllers.main import SipsController\n\n_logger = logging.getLogger(__name__)\n\n\nCURRENCY_CODES = {\n    'EUR': '978',\n    'USD': '840',\n    'CHF': '756',\n    'GBP': '826',\n    'CAD': '124',\n    'JPY': '392',\n    'MXN': '484',\n    'TRY': '949',\n    'AUD': '036',\n    'NZD': '554',\n    'NOK': '578',\n    'BRL': '986',\n    'ARS': '032',\n    'KHR': '116',\n    'TWD': '901',\n}\n\n\nclass AcquirerSips(models.Model):\n    _inherit = 'payment.acquirer'\n\n    provider = fields.Selection(selection_add=[('sips', 'Sips')])\n    sips_merchant_id = fields.Char('Merchant ID', help=\"Used for production only\", required_if_provider='sips', groups='base.group_user')\n    sips_secret = fields.Char('Secret Key', size=64, required_if_provider='sips', groups='base.group_user')\n    sips_test_url = fields.Char(\"Test's url\", required_if_provider='sips', groups='base.group_no_one', default='https://payment-webinit.sips-atos.com/paymentInit')\n    sips_prod_url = fields.Char(\"Prod's url\", required_if_provider='sips', groups='base.group_no_one', default='https://payment-webinit.simu.sips-atos.com/paymentInit')\n    sips_version = fields.Char(\"Interface Version\", required_if_provider='sips', groups='base.group_no_one', default='HP_2.3')\n\n    def _sips_generate_shasign(self, values):\n        \"\"\" Generate the shasign for incoming or outgoing communications.\n        :param dict values: transaction values\n        :return string: shasign\n        \"\"\"\n        if self.provider != 'sips':\n            raise ValidationError(_('Incorrect payment acquirer provider'))\n        data = values['Data']\n\n        # Test key provided by Worldine\n        key = u'002001000000001_KEY1'\n\n        if self.environment == 'prod':\n            key = getattr(self, 'sips_secret')\n\n        shasign = sha256((data + key).encode('utf-8'))\n        return shasign.hexdigest()\n\n    @api.multi\n    def sips_form_generate_values(self, values):\n        self.ensure_one()\n        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        currency = self.env['res.currency'].sudo().browse(values['currency_id'])\n        currency_code = CURRENCY_CODES.get(currency.name, False)\n        if not currency_code:\n            raise ValidationError(_('Currency not supported by Wordline'))\n        amount = int(values['amount'] * 100)\n        if self.environment == 'prod':\n            # For production environment, key version 2 is required\n            merchant_id = getattr(self, 'sips_merchant_id')\n            key_version = self.env['ir.config_parameter'].sudo().get_param('sips.key_version', '2')\n        else:\n            # Test key provided by Atos Wordline works only with version 1\n            merchant_id = '002001000000001'\n            key_version = '1'\n\n        sips_tx_values = dict(values)\n        sips_tx_values.update({\n            'Data': u'amount=%s|' % amount +\n                    u'currencyCode=%s|' % currency_code +\n                    u'merchantId=%s|' % merchant_id +\n                    u'normalReturnUrl=%s|' % urls.url_join(base_url, SipsController._return_url) +\n                    u'automaticResponseUrl=%s|' % urls.url_join(base_url, SipsController._return_url) +\n                    u'transactionReference=%s|' % values['reference'] +\n                    u'statementReference=%s|' % values['reference'] +\n                    u'keyVersion=%s' % key_version,\n            'InterfaceVersion': self.sips_version,\n        })\n\n        return_context = {}\n        if sips_tx_values.get('return_url'):\n            return_context[u'return_url'] = u'%s' % sips_tx_values.pop('return_url')\n        return_context[u'reference'] = u'%s' % sips_tx_values['reference']\n        sips_tx_values['Data'] += u'|returnContext=%s' % (json.dumps(return_context))\n\n        shasign = self._sips_generate_shasign(sips_tx_values)\n        sips_tx_values['Seal'] = shasign\n        return sips_tx_values\n\n    @api.multi\n    def sips_get_form_action_url(self):\n        self.ensure_one()\n        return self.environment == 'prod' and self.sips_prod_url or self.sips_test_url\n\n\nclass TxSips(models.Model):\n    _inherit = 'payment.transaction'\n\n    _sips_valid_tx_status = ['00']\n    _sips_wait_tx_status = ['90', '99']\n    _sips_refused_tx_status = ['05', '14', '34', '54', '75', '97']\n    _sips_error_tx_status = ['03', '12', '24', '25', '30', '40', '51', '63', '94']\n    _sips_pending_tx_status = ['60']\n    _sips_cancel_tx_status = ['17']\n\n    # --------------------------------------------------\n    # FORM RELATED METHODS\n    # --------------------------------------------------\n\n    def _sips_data_to_object(self, data):\n        res = {}\n        for element in data.split('|'):\n            element_split = element.split('=')\n            res[element_split[0]] = element_split[1]\n        return res\n\n    @api.model\n    def _sips_form_get_tx_from_data(self, data):\n        \"\"\" Given a data dict coming from sips, verify it and find the related\n        transaction record. \"\"\"\n\n        data = self._sips_data_to_object(data.get('Data'))\n        reference = data.get('transactionReference')\n\n        if not reference:\n            custom = json.loads(data.pop('returnContext', False) or '{}')\n            reference = custom.get('reference')\n\n        payment_tx = self.search([('reference', '=', reference)])\n        if not payment_tx or len(payment_tx) > 1:\n            error_msg = _('Sips: received data for reference %s') % reference\n            if not payment_tx:\n                error_msg += _('; no order found')\n            else:\n                error_msg += _('; multiple order found')\n            _logger.error(error_msg)\n            raise ValidationError(error_msg)\n        return payment_tx\n\n    @api.multi\n    def _sips_form_get_invalid_parameters(self, data):\n        invalid_parameters = []\n\n        data = self._sips_data_to_object(data.get('Data'))\n\n        # TODO: txn_id: should be false at draft, set afterwards, and verified with txn details\n        if self.acquirer_reference and data.get('transactionReference') != self.acquirer_reference:\n            invalid_parameters.append(('transactionReference', data.get('transactionReference'), self.acquirer_reference))\n        # check what is bought\n        if float_compare(float(data.get('amount', '0.0')) / 100, self.amount, 2) != 0:\n            invalid_parameters.append(('amount', data.get('amount'), '%.2f' % self.amount))\n\n        return invalid_parameters\n\n    @api.multi\n    def _sips_form_validate(self, data):\n        data = self._sips_data_to_object(data.get('Data'))\n        status = data.get('responseCode')\n        data = {\n            'acquirer_reference': data.get('transactionReference'),\n            'partner_reference': data.get('customerId'),\n            'date_validate': data.get('transactionDateTime',\n                                      fields.Datetime.now())\n        }\n        res = False\n        if status in self._sips_valid_tx_status:\n            msg = 'Payment for tx ref: %s, got response [%s], set as done.' % \\\n                  (self.reference, status)\n            _logger.info(msg)\n            data.update(state='done', state_message=msg)\n            res = True\n        elif status in self._sips_error_tx_status:\n            msg = 'Payment for tx ref: %s, got response [%s], set as ' \\\n                  'error.' % (self.reference, status)\n            data.update(state='error', state_message=msg)\n        elif status in self._sips_wait_tx_status:\n            msg = 'Received wait status for payment ref: %s, got response ' \\\n                  '[%s], set as error.' % (self.reference, status)\n            data.update(state='error', state_message=msg)\n        elif status in self._sips_refused_tx_status:\n            msg = 'Received refused status for payment ref: %s, got response' \\\n                  ' [%s], set as error.' % (self.reference, status)\n            data.update(state='error', state_message=msg)\n        elif status in self._sips_pending_tx_status:\n            msg = 'Payment ref: %s, got response [%s] set as pending.' \\\n                  % (self.reference, status)\n            data.update(state='pending', state_message=msg)\n        elif status in self._sips_cancel_tx_status:\n            msg = 'Received notification for payment ref: %s, got response ' \\\n                  '[%s], set as cancel.' % (self.reference, status)\n            data.update(state='cancel', state_message=msg)\n        else:\n            msg = 'Received unrecognized status for payment ref: %s, got ' \\\n                  'response [%s], set as error.' % (self.reference, status)\n            data.update(state='error', state_message=msg)\n\n        _logger.info(msg)\n        self.write(data)\n        return res\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "payment.py", "id": "048820d715f1bb5413bffa62649ca8c2", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/payment_sips/models/payment.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}