{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestDeleteNode(object):\n\n    def test_delete_node(self):\n        print('Test: Empty list, null node to delete')\n        linked_list = MyLinkedList(None)\n        linked_list.delete_node(None)\n        assert_equal(linked_list.get_all_data(), [])\n\n        print('Test: One node')\n        head = Node(2)\n        linked_list = MyLinkedList(head)\n        linked_list.delete_node(head)\n        assert_equal(linked_list.get_all_data(), [None])\n\n        print('Test: Multiple nodes')\n        linked_list = MyLinkedList(None)\n        node0 = linked_list.insert_to_front(2)\n        node1 = linked_list.insert_to_front(3)\n        node2 = linked_list.insert_to_front(4)\n        node3 = linked_list.insert_to_front(1)\n        linked_list.delete_node(node1)\n        assert_equal(linked_list.get_all_data(), [1, 4, 2])\n\n        print('Test: Multiple nodes, delete last element')\n        linked_list = MyLinkedList(None)\n        node0 = linked_list.insert_to_front(2)\n        node1 = linked_list.insert_to_front(3)\n        node2 = linked_list.insert_to_front(4)\n        node3 = linked_list.insert_to_front(1)\n        linked_list.delete_node(node0)\n        assert_equal(linked_list.get_all_data(), [1, 4, 3, None])\n\n        print('Success: test_delete_node')\n\n\ndef main():\n    test = TestDeleteNode()\n    test.test_delete_node()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\n\nclass TestDeleteNode(object):\n\n    def test_delete_node(self):\n        print('Test: Empty list, null node to delete')\n        linked_list = MyLinkedList(None)\n        linked_list.delete_node(None)\n        assert_equal(linked_list.get_all_data(), [])\n\n        print('Test: One node')\n        head = Node(2)\n        linked_list = MyLinkedList(head)\n        linked_list.delete_node(head)\n        assert_equal(linked_list.get_all_data(), [None])\n\n        print('Test: Multiple nodes')\n        linked_list = MyLinkedList(None)\n        node0 = linked_list.insert_to_front(2)\n        node1 = linked_list.insert_to_front(3)\n        node2 = linked_list.insert_to_front(4)\n        node3 = linked_list.insert_to_front(1)\n        linked_list.delete_node(node1)\n        assert_equal(linked_list.get_all_data(), [1, 4, 2])\n\n        print('Test: Multiple nodes, delete last element')\n        linked_list = MyLinkedList(None)\n        node0 = linked_list.insert_to_front(2)\n        node1 = linked_list.insert_to_front(3)\n        node2 = linked_list.insert_to_front(4)\n        node3 = linked_list.insert_to_front(1)\n        linked_list.delete_node(node0)\n        assert_equal(linked_list.get_all_data(), [1, 4, 3, None])\n\n        print('Success: test_delete_node')\n\n\ndef main():\n    test = TestDeleteNode()\n    test.test_delete_node()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_delete_mid.py", "id": "1ce9ac50e2092e17fd3cef3f267d182f", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/linked_lists/delete_mid/test_delete_mid.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}