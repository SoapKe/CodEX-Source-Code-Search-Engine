{"author": "ansible", "code": "from __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nDOCUMENTATION = \nimport ansible.constants as C\nfrom ansible.errors import AnsibleError\nfrom ansible.plugins.connection import ConnectionBase\n\n\nclass Connection(ConnectionBase):\n\n    transport = 'dummy'\n    has_pipelining = True\n    become_methods = frozenset(C.BECOME_METHODS)\n\n    def __init__(self, play_context, new_stdin, *args, **kwargs):\n        super(Connection, self).__init__(play_context, new_stdin, *args, **kwargs)\n\n        raise AnsibleError('an error with {{ some Jinja }}')\n\n    def transport(self):\n        pass\n\n    def _connect(self):\n        pass\n\n    def exec_command(self, cmd, in_data=None, sudoable=True):\n        pass\n\n    def put_file(self, in_path, out_path):\n        pass\n\n    def fetch_file(self, in_path, out_path):\n        pass\n\n    def close(self):\n        pass\n", "comments": "        author            john doe     connection  dummy     short description  defective connection plugin     description            defective connection plugin     version added   2 0      options         ", "content": "from __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nDOCUMENTATION = \"\"\"\n    author:\n        - John Doe\n    connection: dummy\n    short_description: defective connection plugin\n    description:\n        - defective connection plugin\n    version_added: \"2.0\"\n    options: {}\n\"\"\"\nimport ansible.constants as C\nfrom ansible.errors import AnsibleError\nfrom ansible.plugins.connection import ConnectionBase\n\n\nclass Connection(ConnectionBase):\n\n    transport = 'dummy'\n    has_pipelining = True\n    become_methods = frozenset(C.BECOME_METHODS)\n\n    def __init__(self, play_context, new_stdin, *args, **kwargs):\n        super(Connection, self).__init__(play_context, new_stdin, *args, **kwargs)\n\n        raise AnsibleError('an error with {{ some Jinja }}')\n\n    def transport(self):\n        pass\n\n    def _connect(self):\n        pass\n\n    def exec_command(self, cmd, in_data=None, sudoable=True):\n        pass\n\n    def put_file(self, in_path, out_path):\n        pass\n\n    def fetch_file(self, in_path, out_path):\n        pass\n\n    def close(self):\n        pass\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "dummy.py", "id": "5dd8a324f5503bacb2ca87cab764c71d", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/integration/targets/connection/plugin/dummy.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}