{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n internal imports\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom magenta.models.onsets_frames_transcription import constants\nfrom magenta.models.onsets_frames_transcription import infer_util\nfrom magenta.protobuf import music_pb2\n\nDEFAULT_FRAMES_PER_SECOND = 16000 / 512\n\n\nclass InferUtilTest(tf.test.TestCase):\n\n  def testSequenceToValuedIntervals(self):\n    sequence = music_pb2.NoteSequence()\n    sequence.notes.add(pitch=60, start_time=1.0, end_time=2.0)\n     Should be dropped because it is 0 duration.\n    sequence.notes.add(pitch=60, start_time=3.0, end_time=3.0)\n\n    intervals, pitches = infer_util.sequence_to_valued_intervals(\n        sequence, min_duration_ms=0)\n    np.testing.assert_array_equal([[1., 2.]], intervals)\n    np.testing.assert_array_equal([60], pitches)\n\n  def testPianorollToNoteSequence(self):\n     100 frames of notes.\n    frames = np.zeros((100, constants.MIDI_PITCHES), np.bool)\n     Activate key 39 for the middle 50 frames.\n    frames[25:75, 39] = True\n    sequence = infer_util.pianoroll_to_note_sequence(\n        frames,\n        frames_per_second=DEFAULT_FRAMES_PER_SECOND,\n        min_duration_ms=0)\n    self.assertEqual(1, len(sequence.notes))\n    self.assertEqual(60, sequence.notes[0].pitch)\n    self.assertEqual(25 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[0].start_time)\n    self.assertEqual(75 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[0].end_time)\n\n  def testPianorollToNoteSequenceWithOnsets(self):\n     100 frames of notes and onsets.\n    frames = np.zeros((100, constants.MIDI_PITCHES), np.bool)\n    onsets = np.zeros((100, constants.MIDI_PITCHES), np.bool)\n     Activate key 39 for the middle 50 frames and last 10 frames.\n    frames[25:75, 39] = True\n    frames[90:100, 39] = True\n     Add an onset for the first occurrence.\n    onsets[25, 39] = True\n     Add an onset for a note that doesn't have an active frame.\n    onsets[80, 49] = True\n    sequence = infer_util.pianoroll_to_note_sequence(\n        frames,\n        frames_per_second=DEFAULT_FRAMES_PER_SECOND,\n        min_duration_ms=0,\n        onset_predictions=onsets)\n    self.assertEqual(2, len(sequence.notes))\n\n    self.assertEqual(60, sequence.notes[0].pitch)\n    self.assertEqual(25 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[0].start_time)\n    self.assertEqual(75 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[0].end_time)\n\n    self.assertEqual(70, sequence.notes[1].pitch)\n    self.assertEqual(80 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[1].start_time)\n    self.assertEqual(81 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[1].end_time)\n\n  def testPianorollToNoteSequenceWithOnsetsOverlappingFrames(self):\n     100 frames of notes and onsets.\n    frames = np.zeros((100, constants.MIDI_PITCHES), np.bool)\n    onsets = np.zeros((100, constants.MIDI_PITCHES), np.bool)\n     Activate key 39 for the middle 50 frames.\n    frames[25:75, 39] = True\n     Add multiple onsets within those frames.\n    onsets[25, 39] = True\n    onsets[30, 39] = True\n     If an onset lasts for multiple frames, it should create only 1 note.\n    onsets[35, 39] = True\n    onsets[36, 39] = True\n    sequence = infer_util.pianoroll_to_note_sequence(\n        frames,\n        frames_per_second=DEFAULT_FRAMES_PER_SECOND,\n        min_duration_ms=0,\n        onset_predictions=onsets)\n    self.assertEqual(3, len(sequence.notes))\n\n    self.assertEqual(60, sequence.notes[0].pitch)\n    self.assertEqual(25 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[0].start_time)\n    self.assertEqual(30 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[0].end_time)\n\n    self.assertEqual(60, sequence.notes[1].pitch)\n    self.assertEqual(30 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[1].start_time)\n    self.assertEqual(35 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[1].end_time)\n\n    self.assertEqual(60, sequence.notes[2].pitch)\n    self.assertEqual(35 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[2].start_time)\n    self.assertEqual(75 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[2].end_time)\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "comments": "   tests infer util        copyright 2017 google inc  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license          http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license     internal imports    should dropped 0 duration     100 frames notes     activate key 39 middle 50 frames     100 frames notes onsets     activate key 39 middle 50 frames last 10 frames     add onset first occurrence     add onset note active frame     100 frames notes onsets     activate key 39 middle 50 frames     add multiple onsets within frames     if onset lasts multiple frames  create 1 note  ", "content": "# Copyright 2017 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Tests for infer_util.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n# internal imports\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom magenta.models.onsets_frames_transcription import constants\nfrom magenta.models.onsets_frames_transcription import infer_util\nfrom magenta.protobuf import music_pb2\n\nDEFAULT_FRAMES_PER_SECOND = 16000 / 512\n\n\nclass InferUtilTest(tf.test.TestCase):\n\n  def testSequenceToValuedIntervals(self):\n    sequence = music_pb2.NoteSequence()\n    sequence.notes.add(pitch=60, start_time=1.0, end_time=2.0)\n    # Should be dropped because it is 0 duration.\n    sequence.notes.add(pitch=60, start_time=3.0, end_time=3.0)\n\n    intervals, pitches = infer_util.sequence_to_valued_intervals(\n        sequence, min_duration_ms=0)\n    np.testing.assert_array_equal([[1., 2.]], intervals)\n    np.testing.assert_array_equal([60], pitches)\n\n  def testPianorollToNoteSequence(self):\n    # 100 frames of notes.\n    frames = np.zeros((100, constants.MIDI_PITCHES), np.bool)\n    # Activate key 39 for the middle 50 frames.\n    frames[25:75, 39] = True\n    sequence = infer_util.pianoroll_to_note_sequence(\n        frames,\n        frames_per_second=DEFAULT_FRAMES_PER_SECOND,\n        min_duration_ms=0)\n    self.assertEqual(1, len(sequence.notes))\n    self.assertEqual(60, sequence.notes[0].pitch)\n    self.assertEqual(25 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[0].start_time)\n    self.assertEqual(75 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[0].end_time)\n\n  def testPianorollToNoteSequenceWithOnsets(self):\n    # 100 frames of notes and onsets.\n    frames = np.zeros((100, constants.MIDI_PITCHES), np.bool)\n    onsets = np.zeros((100, constants.MIDI_PITCHES), np.bool)\n    # Activate key 39 for the middle 50 frames and last 10 frames.\n    frames[25:75, 39] = True\n    frames[90:100, 39] = True\n    # Add an onset for the first occurrence.\n    onsets[25, 39] = True\n    # Add an onset for a note that doesn't have an active frame.\n    onsets[80, 49] = True\n    sequence = infer_util.pianoroll_to_note_sequence(\n        frames,\n        frames_per_second=DEFAULT_FRAMES_PER_SECOND,\n        min_duration_ms=0,\n        onset_predictions=onsets)\n    self.assertEqual(2, len(sequence.notes))\n\n    self.assertEqual(60, sequence.notes[0].pitch)\n    self.assertEqual(25 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[0].start_time)\n    self.assertEqual(75 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[0].end_time)\n\n    self.assertEqual(70, sequence.notes[1].pitch)\n    self.assertEqual(80 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[1].start_time)\n    self.assertEqual(81 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[1].end_time)\n\n  def testPianorollToNoteSequenceWithOnsetsOverlappingFrames(self):\n    # 100 frames of notes and onsets.\n    frames = np.zeros((100, constants.MIDI_PITCHES), np.bool)\n    onsets = np.zeros((100, constants.MIDI_PITCHES), np.bool)\n    # Activate key 39 for the middle 50 frames.\n    frames[25:75, 39] = True\n    # Add multiple onsets within those frames.\n    onsets[25, 39] = True\n    onsets[30, 39] = True\n    # If an onset lasts for multiple frames, it should create only 1 note.\n    onsets[35, 39] = True\n    onsets[36, 39] = True\n    sequence = infer_util.pianoroll_to_note_sequence(\n        frames,\n        frames_per_second=DEFAULT_FRAMES_PER_SECOND,\n        min_duration_ms=0,\n        onset_predictions=onsets)\n    self.assertEqual(3, len(sequence.notes))\n\n    self.assertEqual(60, sequence.notes[0].pitch)\n    self.assertEqual(25 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[0].start_time)\n    self.assertEqual(30 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[0].end_time)\n\n    self.assertEqual(60, sequence.notes[1].pitch)\n    self.assertEqual(30 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[1].start_time)\n    self.assertEqual(35 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[1].end_time)\n\n    self.assertEqual(60, sequence.notes[2].pitch)\n    self.assertEqual(35 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[2].start_time)\n    self.assertEqual(75 / DEFAULT_FRAMES_PER_SECOND,\n                     sequence.notes[2].end_time)\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "description": "Magenta: Music and Art Generation with Machine Intelligence", "file_name": "infer_util_test.py", "id": "79fb2f72f820519e4b9347fe4da3209f", "language": "Python", "project_name": "magenta", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-magenta/tensorflow-magenta-c3eda3d/magenta/models/onsets_frames_transcription/infer_util_test.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:52:33Z", "url": "https://github.com/tensorflow/magenta", "wiki": false}