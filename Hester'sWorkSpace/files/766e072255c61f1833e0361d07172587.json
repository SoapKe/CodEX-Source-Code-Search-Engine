{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_virtual_address import Parameters\n    from library.bigip_virtual_address import ModuleManager\n    from library.bigip_virtual_address import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_virtual_address import Parameters\n        from ansible.modules.network.f5.bigip_virtual_address import ModuleManager\n        from ansible.modules.network.f5.bigip_virtual_address import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            state='present',\n            address='1.1.1.1',\n            netmask='2.2.2.2',\n            connection_limit='10',\n            arp_state='enabled',\n            auto_delete='enabled',\n            icmp_echo='enabled',\n            advertise_route='always',\n            use_route_advertisement='yes'\n        )\n        p = Parameters(params=args)\n        assert p.state == 'present'\n        assert p.address == '1.1.1.1'\n        assert p.netmask == '2.2.2.2'\n        assert p.connection_limit == 10\n        assert p.arp_state == 'enabled'\n        assert p.auto_delete is True\n        assert p.icmp_echo == 'enabled'\n        assert p.advertise_route == 'none'\n        assert p.use_route_advertisement == 'enabled'\n\n    def test_api_parameters(self):\n        args = load_fixture('load_ltm_virtual_address_default.json')\n        p = Parameters(params=args)\n        assert p.name == '1.1.1.1'\n        assert p.address == '1.1.1.1'\n        assert p.arp_state == 'enabled'\n        assert p.auto_delete is True\n        assert p.connection_limit == 0\n        assert p.state == 'enabled'\n        assert p.icmp_echo == 'enabled'\n        assert p.netmask == '255.255.255.255'\n        assert p.use_route_advertisement == 'disabled'\n        assert p.advertise_route == 'any'\n\n    def test_module_parameters_advertise_route_all(self):\n        args = dict(\n            advertise_route='when_all_available'\n        )\n        p = Parameters(params=args)\n        assert p.advertise_route == 'all'\n\n    def test_module_parameters_advertise_route_any(self):\n        args = dict(\n            advertise_route='when_any_available'\n        )\n        p = Parameters(params=args)\n        assert p.advertise_route == 'any'\n\n    def test_module_parameters_icmp_echo_disabled(self):\n        args = dict(\n            icmp_echo='disabled'\n        )\n        p = Parameters(params=args)\n        assert p.icmp_echo == 'disabled'\n\n    def test_module_parameters_icmp_echo_selective(self):\n        args = dict(\n            icmp_echo='selective'\n        )\n        p = Parameters(params=args)\n        assert p.icmp_echo == 'selective'\n\n    def test_module_parameters_auto_delete_disabled(self):\n        args = dict(\n            auto_delete='disabled'\n        )\n        p = Parameters(params=args)\n        assert p.auto_delete is False\n\n    def test_module_parameters_arp_state_disabled(self):\n        args = dict(\n            arp_state='disabled'\n        )\n        p = Parameters(params=args)\n        assert p.arp_state == 'disabled'\n\n    def test_module_parameters_use_route_advert_disabled(self):\n        args = dict(\n            use_route_advertisement='no'\n        )\n        p = Parameters(params=args)\n        assert p.use_route_advertisement == 'disabled'\n\n    def test_module_parameters_state_present(self):\n        args = dict(\n            state='present'\n        )\n        p = Parameters(params=args)\n        assert p.state == 'present'\n        assert p.enabled == 'yes'\n\n    def test_module_parameters_state_absent(self):\n        args = dict(\n            state='absent'\n        )\n        p = Parameters(params=args)\n        assert p.state == 'absent'\n\n    def test_module_parameters_state_enabled(self):\n        args = dict(\n            state='enabled'\n        )\n        p = Parameters(params=args)\n        assert p.state == 'enabled'\n        assert p.enabled == 'yes'\n\n    def test_module_parameters_state_disabled(self):\n        args = dict(\n            state='disabled'\n        )\n        p = Parameters(params=args)\n        assert p.state == 'disabled'\n        assert p.enabled == 'no'\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_virtual_address(self, *args):\n        set_module_args(dict(\n            state='present',\n            address='1.1.1.1',\n            netmask='2.2.2.2',\n            connection_limit='10',\n            arp_state='enabled',\n            auto_delete='enabled',\n            icmp_echo='enabled',\n            advertise_route='always',\n            use_route_advertisement='yes',\n            password='admin',\n            server='localhost',\n            user='admin',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.exists = Mock(side_effect=[False, True])\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n\n    def test_delete_virtual_address(self, *args):\n        set_module_args(dict(\n            state='absent',\n            address='1.1.1.1',\n            password='admin',\n            server='localhost',\n            user='admin',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.exists = Mock(side_effect=[True, False])\n        mm.remove_from_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    override methods force specific logic module happen    override methods force specific logic module happen ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_virtual_address import Parameters\n    from library.bigip_virtual_address import ModuleManager\n    from library.bigip_virtual_address import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_virtual_address import Parameters\n        from ansible.modules.network.f5.bigip_virtual_address import ModuleManager\n        from ansible.modules.network.f5.bigip_virtual_address import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            state='present',\n            address='1.1.1.1',\n            netmask='2.2.2.2',\n            connection_limit='10',\n            arp_state='enabled',\n            auto_delete='enabled',\n            icmp_echo='enabled',\n            advertise_route='always',\n            use_route_advertisement='yes'\n        )\n        p = Parameters(params=args)\n        assert p.state == 'present'\n        assert p.address == '1.1.1.1'\n        assert p.netmask == '2.2.2.2'\n        assert p.connection_limit == 10\n        assert p.arp_state == 'enabled'\n        assert p.auto_delete is True\n        assert p.icmp_echo == 'enabled'\n        assert p.advertise_route == 'none'\n        assert p.use_route_advertisement == 'enabled'\n\n    def test_api_parameters(self):\n        args = load_fixture('load_ltm_virtual_address_default.json')\n        p = Parameters(params=args)\n        assert p.name == '1.1.1.1'\n        assert p.address == '1.1.1.1'\n        assert p.arp_state == 'enabled'\n        assert p.auto_delete is True\n        assert p.connection_limit == 0\n        assert p.state == 'enabled'\n        assert p.icmp_echo == 'enabled'\n        assert p.netmask == '255.255.255.255'\n        assert p.use_route_advertisement == 'disabled'\n        assert p.advertise_route == 'any'\n\n    def test_module_parameters_advertise_route_all(self):\n        args = dict(\n            advertise_route='when_all_available'\n        )\n        p = Parameters(params=args)\n        assert p.advertise_route == 'all'\n\n    def test_module_parameters_advertise_route_any(self):\n        args = dict(\n            advertise_route='when_any_available'\n        )\n        p = Parameters(params=args)\n        assert p.advertise_route == 'any'\n\n    def test_module_parameters_icmp_echo_disabled(self):\n        args = dict(\n            icmp_echo='disabled'\n        )\n        p = Parameters(params=args)\n        assert p.icmp_echo == 'disabled'\n\n    def test_module_parameters_icmp_echo_selective(self):\n        args = dict(\n            icmp_echo='selective'\n        )\n        p = Parameters(params=args)\n        assert p.icmp_echo == 'selective'\n\n    def test_module_parameters_auto_delete_disabled(self):\n        args = dict(\n            auto_delete='disabled'\n        )\n        p = Parameters(params=args)\n        assert p.auto_delete is False\n\n    def test_module_parameters_arp_state_disabled(self):\n        args = dict(\n            arp_state='disabled'\n        )\n        p = Parameters(params=args)\n        assert p.arp_state == 'disabled'\n\n    def test_module_parameters_use_route_advert_disabled(self):\n        args = dict(\n            use_route_advertisement='no'\n        )\n        p = Parameters(params=args)\n        assert p.use_route_advertisement == 'disabled'\n\n    def test_module_parameters_state_present(self):\n        args = dict(\n            state='present'\n        )\n        p = Parameters(params=args)\n        assert p.state == 'present'\n        assert p.enabled == 'yes'\n\n    def test_module_parameters_state_absent(self):\n        args = dict(\n            state='absent'\n        )\n        p = Parameters(params=args)\n        assert p.state == 'absent'\n\n    def test_module_parameters_state_enabled(self):\n        args = dict(\n            state='enabled'\n        )\n        p = Parameters(params=args)\n        assert p.state == 'enabled'\n        assert p.enabled == 'yes'\n\n    def test_module_parameters_state_disabled(self):\n        args = dict(\n            state='disabled'\n        )\n        p = Parameters(params=args)\n        assert p.state == 'disabled'\n        assert p.enabled == 'no'\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_virtual_address(self, *args):\n        set_module_args(dict(\n            state='present',\n            address='1.1.1.1',\n            netmask='2.2.2.2',\n            connection_limit='10',\n            arp_state='enabled',\n            auto_delete='enabled',\n            icmp_echo='enabled',\n            advertise_route='always',\n            use_route_advertisement='yes',\n            password='admin',\n            server='localhost',\n            user='admin',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.exists = Mock(side_effect=[False, True])\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n\n    def test_delete_virtual_address(self, *args):\n        set_module_args(dict(\n            state='absent',\n            address='1.1.1.1',\n            password='admin',\n            server='localhost',\n            user='admin',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.exists = Mock(side_effect=[True, False])\n        mm.remove_from_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_virtual_address.py", "id": "766e072255c61f1833e0361d07172587", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_virtual_address.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}