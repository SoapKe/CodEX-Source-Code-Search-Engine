{"author": "jakubroztocil", "code": "\n\n    error_exit_ok = kwargs.pop('error_exit_ok', False)\n    env = kwargs.get('env')\n    if not env:\n        env = kwargs['env'] = MockEnvironment()\n\n    stdout = env.stdout\n    stderr = env.stderr\n\n    args = list(args)\n    args_with_config_defaults = args + env.config.default_options\n    add_to_args = []\n    if '--debug' not in args_with_config_defaults:\n        if not error_exit_ok and '--traceback' not in args_with_config_defaults:\n            add_to_args.append('--traceback')\n        if not any('--timeout' in arg for arg in args_with_config_defaults):\n            add_to_args.append('--timeout=3')\n    args = add_to_args + args\n\n    def dump_stderr():\n        stderr.seek(0)\n        sys.stderr.write(stderr.read())\n\n    try:\n        try:\n            exit_status = main(args=args, **kwargs)\n            if '--download' in args:\n                \n                time.sleep(.5)\n        except SystemExit:\n            if error_exit_ok:\n                exit_status = ExitStatus.ERROR\n            else:\n                dump_stderr()\n                raise\n        except Exception:\n            stderr.seek(0)\n            sys.stderr.write(stderr.read())\n            raise\n        else:\n            if not error_exit_ok and exit_status != ExitStatus.OK:\n                dump_stderr()\n                raise ExitStatusError(\n                    'httpie.core.main() unexpectedly returned'\n                    ' a non-zero exit status: {0} ({1})'.format(\n                        exit_status,\n                        EXIT_STATUS_LABELS[exit_status]\n                    )\n                )\n\n        stdout.seek(0)\n        stderr.seek(0)\n        output = stdout.read()\n        try:\n            output = output.decode('utf8')\n        except UnicodeDecodeError:\n            \n            r = BytesCLIResponse(output)\n        else:\n            \n            r = StrCLIResponse(output)\n        r.stderr = stderr.read()\n        r.exit_status = exit_status\n\n        if r.exit_status != ExitStatus.OK:\n            sys.stderr.write(r.stderr)\n\n        return r\n\n    finally:\n        stdout.close()\n        stderr.close()\n        env.cleanup()\n", "comments": "Utilities for HTTPie test suite.\"\"\"\nimport os\nimport sys\nimport time\nimport json\nimport tempfile\n\nfrom httpie import ExitStatus, EXIT_STATUS_LABELS\nfrom httpie.context import Environment\nfrom httpie.core import main\nfrom httpie.compat import bytes, str\n\n\nTESTS_ROOT = os.path.abspath(os.path.dirname(__file__))\nCRLF = '\\r\\n'\nCOLOR = '\\x1b['\nHTTP_OK = '200 OK'\nHTTP_OK_COLOR = (\n    'HTTP\\x1b[39m\\x1b[38;5;245m/\\x1b[39m\\x1b'\n    '[38;5;37m1.1\\x1b[39m\\x1b[38;5;245m \\x1b[39m\\x1b[38;5;37m200'\n    '\\x1b[39m\\x1b[38;5;245m \\x1b[39m\\x1b[38;5;136mOK'\n)\n\n\ndef mk_config_dir():\n    dirname = tempfile.mkdtemp(prefix='httpie_config_')\n    return dirname\n\n\ndef add_auth(url, auth):\n    proto, rest = url.split('://', 1)\n    return proto + '://' + auth + '@' + rest\n\n\nclass MockEnvironment(Environment):\n    \"\"\"Environment subclass with reasonable defaults for testing.\"\"\"\n    colors = 0\n    stdin_isatty = True,\n    stdout_isatty = True\n    is_windows = False\n\n    def __init__(self, **kwargs):\n        if 'stdout' not in kwargs:\n            kwargs['stdout'] = tempfile.TemporaryFile(\n                mode='w+b',\n                prefix='httpie_stdout'\n            )\n        if 'stderr' not in kwargs:\n            kwargs['stderr'] = tempfile.TemporaryFile(\n                mode='w+t',\n                prefix='httpie_stderr'\n            )\n        super(MockEnvironment, self).__init__(**kwargs)\n        self._delete_config_dir = False\n\n    @property\n    def config(self):\n        if not self.config_dir.startswith(tempfile.gettempdir()):\n            self.config_dir = mk_config_dir()\n            self._delete_config_dir = True\n        return super(MockEnvironment, self).config\n\n    def cleanup(self):\n        if self._delete_config_dir:\n            assert self.config_dir.startswith(tempfile.gettempdir())\n            from shutil import rmtree\n            rmtree(self.config_dir)\n\n    def __del__(self):\n        try:\n            self.cleanup()\n        except Exception:\n            pass\n\n\nclass BaseCLIResponse(object):\n    \"\"\"\n    Represents the result of simulated `$ http' invocation  via `http()`.\n\n    Holds and provides access to:\n\n        - stdout output: print(self)\n        - stderr output: print(self.stderr)\n        - exit_status output: print(self.exit_status)\n\n    \"\"\"\n    stderr = None\n    json = None\n    exit_status = None\n\n\nclass BytesCLIResponse(bytes, BaseCLIResponse):\n    \"\"\"\n    Used as a fallback when a StrCLIResponse cannot be used.\n\n    E.g. when the output contains binary data or when it is colorized.\n\n    `.json` will always be None.\n\n    \"\"\"\n\n\nclass StrCLIResponse(str, BaseCLIResponse):\n\n    @property\n    def json(self):\n        \"\"\"\n        Return deserialized JSON body, if one included in the output\n        and is parseable.\n\n        \"\"\"\n        if not hasattr(self, '_json'):\n            self._json = None\n            # De-serialize JSON body if possible.\n            if COLOR in self:\n                # Colorized output cannot be parsed.\n                pass\n            elif self.strip().startswith('{'):\n                # Looks like JSON body.\n                self._json = json.loads(self)\n            elif (self.count('Content-Type:') == 1 and\n                    'application/json' in self):\n                # Looks like a whole JSON HTTP message,\n                # try to extract its body.\n                try:\n                    j = self.strip()[self.strip().rindex('\\r\\n\\r\\n'):]\n                except ValueError:\n                    pass\n                else:\n                    try:\n                        self._json = json.loads(j)\n                    except ValueError:\n                        pass\n        return self._json\n\n\nclass ExitStatusError(Exception):\n    pass\n\n\ndef http(*args, **kwargs):\n    # noinspection PyUnresolvedReferences\n    \"\"\"\n    Run HTTPie and capture stderr/out and exit status.\n\n    Invoke `httpie.core.main()` with `args` and `kwargs`,\n    and return a `CLIResponse` subclass instance.\n\n    The return value is either a `StrCLIResponse`, or `BytesCLIResponse`\n    if unable to decode the output.\n\n    The response has the following attributes:\n\n        `stdout` is represented by the instance itself (print r)\n        `stderr`: text written to stderr\n        `exit_status`: the exit status\n        `json`: decoded JSON (if possible) or `None`\n\n    Exceptions are propagated.\n\n    If you pass ``error_exit_ok=True``, then error exit statuses\n    won't result into an exception.\n\n    Example:\n\n    $ http --auth=user:password GET httpbin.org/basic-auth/user/password\n\n        >>> httpbin = getfixture('httpbin')\n        >>> r = http('-a', 'user:pw', httpbin.url + '/basic-auth/user/pw')\n        >>> type(r) == StrCLIResponse\n        True\n        >>> r.exit_status\n        0\n        >>> r.stderr\n        ''\n        >>> 'HTTP/1.1 200 OK' in r\n        True\n        >>> r.json == {'authenticated': True, 'user': 'user'}\n        True\n\n    \n \n# coding=utf-8\n# Let the progress reporter thread finish.\n# noinspection PyArgumentList\n# noinspection PyArgumentList\n", "content": "# coding=utf-8\n\"\"\"Utilities for HTTPie test suite.\"\"\"\nimport os\nimport sys\nimport time\nimport json\nimport tempfile\n\nfrom httpie import ExitStatus, EXIT_STATUS_LABELS\nfrom httpie.context import Environment\nfrom httpie.core import main\nfrom httpie.compat import bytes, str\n\n\nTESTS_ROOT = os.path.abspath(os.path.dirname(__file__))\nCRLF = '\\r\\n'\nCOLOR = '\\x1b['\nHTTP_OK = '200 OK'\nHTTP_OK_COLOR = (\n    'HTTP\\x1b[39m\\x1b[38;5;245m/\\x1b[39m\\x1b'\n    '[38;5;37m1.1\\x1b[39m\\x1b[38;5;245m \\x1b[39m\\x1b[38;5;37m200'\n    '\\x1b[39m\\x1b[38;5;245m \\x1b[39m\\x1b[38;5;136mOK'\n)\n\n\ndef mk_config_dir():\n    dirname = tempfile.mkdtemp(prefix='httpie_config_')\n    return dirname\n\n\ndef add_auth(url, auth):\n    proto, rest = url.split('://', 1)\n    return proto + '://' + auth + '@' + rest\n\n\nclass MockEnvironment(Environment):\n    \"\"\"Environment subclass with reasonable defaults for testing.\"\"\"\n    colors = 0\n    stdin_isatty = True,\n    stdout_isatty = True\n    is_windows = False\n\n    def __init__(self, **kwargs):\n        if 'stdout' not in kwargs:\n            kwargs['stdout'] = tempfile.TemporaryFile(\n                mode='w+b',\n                prefix='httpie_stdout'\n            )\n        if 'stderr' not in kwargs:\n            kwargs['stderr'] = tempfile.TemporaryFile(\n                mode='w+t',\n                prefix='httpie_stderr'\n            )\n        super(MockEnvironment, self).__init__(**kwargs)\n        self._delete_config_dir = False\n\n    @property\n    def config(self):\n        if not self.config_dir.startswith(tempfile.gettempdir()):\n            self.config_dir = mk_config_dir()\n            self._delete_config_dir = True\n        return super(MockEnvironment, self).config\n\n    def cleanup(self):\n        if self._delete_config_dir:\n            assert self.config_dir.startswith(tempfile.gettempdir())\n            from shutil import rmtree\n            rmtree(self.config_dir)\n\n    def __del__(self):\n        try:\n            self.cleanup()\n        except Exception:\n            pass\n\n\nclass BaseCLIResponse(object):\n    \"\"\"\n    Represents the result of simulated `$ http' invocation  via `http()`.\n\n    Holds and provides access to:\n\n        - stdout output: print(self)\n        - stderr output: print(self.stderr)\n        - exit_status output: print(self.exit_status)\n\n    \"\"\"\n    stderr = None\n    json = None\n    exit_status = None\n\n\nclass BytesCLIResponse(bytes, BaseCLIResponse):\n    \"\"\"\n    Used as a fallback when a StrCLIResponse cannot be used.\n\n    E.g. when the output contains binary data or when it is colorized.\n\n    `.json` will always be None.\n\n    \"\"\"\n\n\nclass StrCLIResponse(str, BaseCLIResponse):\n\n    @property\n    def json(self):\n        \"\"\"\n        Return deserialized JSON body, if one included in the output\n        and is parseable.\n\n        \"\"\"\n        if not hasattr(self, '_json'):\n            self._json = None\n            # De-serialize JSON body if possible.\n            if COLOR in self:\n                # Colorized output cannot be parsed.\n                pass\n            elif self.strip().startswith('{'):\n                # Looks like JSON body.\n                self._json = json.loads(self)\n            elif (self.count('Content-Type:') == 1 and\n                    'application/json' in self):\n                # Looks like a whole JSON HTTP message,\n                # try to extract its body.\n                try:\n                    j = self.strip()[self.strip().rindex('\\r\\n\\r\\n'):]\n                except ValueError:\n                    pass\n                else:\n                    try:\n                        self._json = json.loads(j)\n                    except ValueError:\n                        pass\n        return self._json\n\n\nclass ExitStatusError(Exception):\n    pass\n\n\ndef http(*args, **kwargs):\n    # noinspection PyUnresolvedReferences\n    \"\"\"\n    Run HTTPie and capture stderr/out and exit status.\n\n    Invoke `httpie.core.main()` with `args` and `kwargs`,\n    and return a `CLIResponse` subclass instance.\n\n    The return value is either a `StrCLIResponse`, or `BytesCLIResponse`\n    if unable to decode the output.\n\n    The response has the following attributes:\n\n        `stdout` is represented by the instance itself (print r)\n        `stderr`: text written to stderr\n        `exit_status`: the exit status\n        `json`: decoded JSON (if possible) or `None`\n\n    Exceptions are propagated.\n\n    If you pass ``error_exit_ok=True``, then error exit statuses\n    won't result into an exception.\n\n    Example:\n\n    $ http --auth=user:password GET httpbin.org/basic-auth/user/password\n\n        >>> httpbin = getfixture('httpbin')\n        >>> r = http('-a', 'user:pw', httpbin.url + '/basic-auth/user/pw')\n        >>> type(r) == StrCLIResponse\n        True\n        >>> r.exit_status\n        0\n        >>> r.stderr\n        ''\n        >>> 'HTTP/1.1 200 OK' in r\n        True\n        >>> r.json == {'authenticated': True, 'user': 'user'}\n        True\n\n    \"\"\"\n    error_exit_ok = kwargs.pop('error_exit_ok', False)\n    env = kwargs.get('env')\n    if not env:\n        env = kwargs['env'] = MockEnvironment()\n\n    stdout = env.stdout\n    stderr = env.stderr\n\n    args = list(args)\n    args_with_config_defaults = args + env.config.default_options\n    add_to_args = []\n    if '--debug' not in args_with_config_defaults:\n        if not error_exit_ok and '--traceback' not in args_with_config_defaults:\n            add_to_args.append('--traceback')\n        if not any('--timeout' in arg for arg in args_with_config_defaults):\n            add_to_args.append('--timeout=3')\n    args = add_to_args + args\n\n    def dump_stderr():\n        stderr.seek(0)\n        sys.stderr.write(stderr.read())\n\n    try:\n        try:\n            exit_status = main(args=args, **kwargs)\n            if '--download' in args:\n                # Let the progress reporter thread finish.\n                time.sleep(.5)\n        except SystemExit:\n            if error_exit_ok:\n                exit_status = ExitStatus.ERROR\n            else:\n                dump_stderr()\n                raise\n        except Exception:\n            stderr.seek(0)\n            sys.stderr.write(stderr.read())\n            raise\n        else:\n            if not error_exit_ok and exit_status != ExitStatus.OK:\n                dump_stderr()\n                raise ExitStatusError(\n                    'httpie.core.main() unexpectedly returned'\n                    ' a non-zero exit status: {0} ({1})'.format(\n                        exit_status,\n                        EXIT_STATUS_LABELS[exit_status]\n                    )\n                )\n\n        stdout.seek(0)\n        stderr.seek(0)\n        output = stdout.read()\n        try:\n            output = output.decode('utf8')\n        except UnicodeDecodeError:\n            # noinspection PyArgumentList\n            r = BytesCLIResponse(output)\n        else:\n            # noinspection PyArgumentList\n            r = StrCLIResponse(output)\n        r.stderr = stderr.read()\n        r.exit_status = exit_status\n\n        if r.exit_status != ExitStatus.OK:\n            sys.stderr.write(r.stderr)\n\n        return r\n\n    finally:\n        stdout.close()\n        stderr.close()\n        env.cleanup()\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "utils.py", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil_httpie/jakubroztocil-httpie-0f4dce9/tests/utils.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:20:06Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}