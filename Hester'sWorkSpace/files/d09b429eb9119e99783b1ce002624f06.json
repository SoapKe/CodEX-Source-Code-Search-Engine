{"author": "ansible", "code": "\n\"\"\" PN CLI show commands \"\"\"\n\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_show\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: Run show commands on nvOS device.\ndescription:\n  - Execute show command in the nodes and returns the results\n    read from the device.\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch(es) to run the cli on.\n    required: False\n  pn_command:\n    description:\n      - The C(pn_command) takes a CLI show command as value.\n    required: true\n  pn_parameters:\n    description:\n      - Display output using a specific parameter. Use 'all' to display possible\n        output. List of comma separated parameters.\n  pn_options:\n    description:\n      - Specify formatting options.\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: run the vlan-show command\n  pn_show:\n    pn_command: 'vlan-show'\n    pn_parameters: id,scope,ports\n    pn_options: 'layout vertical'\n\n- name: run the vlag-show command\n  pn_show:\n    pn_command: 'vlag-show'\n    pn_parameters: 'id,name,cluster,mode'\n    pn_options: 'no-show-headers'\n\n- name: run the cluster-show command\n  pn_show:\n    pn_command: 'cluster-show'\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the show command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the show command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused any change on the target.\n  returned: always(False)\n  type: bool\n\"\"\"\n\nimport shlex\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch:\n        if cliswitch == 'local':\n            cli += ' switch-local '\n        else:\n            cli += ' switch ' + cliswitch\n    return cli\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    command = module.params['pn_command']\n    cmd = shlex.split(cli)\n\n     'out' contains the output\n     'err' contains the error messages\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n     Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            msg='%s: ' % command,\n            stderr=err.strip(),\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            msg='%s: ' % command,\n            stdout=out.strip(),\n            changed=False\n        )\n\n    else:\n        module.exit_json(\n            command=cli,\n            msg='%s: Nothing to display!!!' % command,\n            changed=False\n        )\n\n\ndef main():\n    \"\"\" This section is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=True, type='str'),\n            pn_clipassword=dict(required=True, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str'),\n            pn_command=dict(required=True, type='str'),\n            pn_parameters=dict(default='all', type='str'),\n            pn_options=dict(type='str')\n        )\n    )\n\n     Accessing the arguments\n    command = module.params['pn_command']\n    parameters = module.params['pn_parameters']\n    options = module.params['pn_options']\n\n     Building the CLI command string\n    cli = pn_cli(module)\n\n    cli += ' %s format %s ' % (command, parameters)\n\n    if options:\n        cli += options\n\n    run_cli(module, cli)\n\n AnsibleModule boilerplate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "comments": "    pn cli show commands          this file part ansible     ansible free software  redistribute modify   terms gnu general public license published   free software foundation  either version 3 license    (at option) later version      ansible distributed hope useful    without any warranty  without even implied warranty   merchantability fitness for a particular purpose   see   gnu general public license details      you received copy gnu general public license   along ansible   if  see  http   www gnu org licenses       ansible metadata     metadata version    1 1                        status     preview                         supported    community     documentation           module  pn show author   pluribus networks ( amitsi)  version added   2 2  short description  run show commands nvos device  description      execute show command nodes returns results     read device  options    pn cliusername      description          provide login username user root      required  false   pn clipassword      description          provide login password user root      required  false   pn cliswitch      description          target switch(es) run cli      required  false   pn command      description          the c(pn command) takes cli show command value      required  true   pn parameters      description          display output using specific parameter  use   display possible         output  list comma separated parameters    pn options      description          specify formatting options       examples         name  run vlan show command   pn show      pn command   vlan show      pn parameters  id scope ports     pn options   layout vertical     name  run vlag show command   pn show      pn command   vlag show      pn parameters   id name cluster mode      pn options   show headers     name  run cluster show command   pn show      pn command   cluster show       return       command    description  the cli command run target node(s)    returned  always   type  str stdout    description  the set responses show command    returned  always   type  list stderr    description  the set error responses show command    returned  error   type  list changed    description  indicates whether cli caused change target    returned  always(false)   type  bool      import shlex   def pn cli(module)              this method generate cli portion launch netvisor cli      it parses username  password  switch parameters module       param module  the ansible module fetch username  password switch      return  returns cli string processing             username   module params  pn cliusername       password   module params  pn clipassword       cliswitch   module params  pn cliswitch        username password          cli     usr bin cli   quiet   user       (username  password)     else          cli     usr bin cli   quiet        cliswitch          cliswitch     local               cli      switch local           else              cli      switch     cliswitch     return cli   def run cli(module  cli)              this method executes cli command target node(s) returns     output  the module exits based output       param cli  complete cli string executed target node(s)       param module  the ansible module fetch command             cliswitch   module params  pn cliswitch       command   module params  pn command       cmd   shlex split(cli)          contains output        err  contains error messages     result   err   module run command(cmd)      print cli   cli split(cliswitch) 1         response json format     result    0          module exit json(             command print cli              msg        command              stderr err strip()              changed false         )               module exit json(             command print cli              msg        command              stdout strip()              changed false         )      else          module exit json(             command cli              msg    nothing display       command              changed false         )   def main()          this section arguments parsing         usr bin python       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses            contains output     err  contains error messages    response json format    accessing arguments    building cli command string    ansiblemodule boilerplate ", "content": "#!/usr/bin/python\n\"\"\" PN CLI show commands \"\"\"\n\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_show\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: Run show commands on nvOS device.\ndescription:\n  - Execute show command in the nodes and returns the results\n    read from the device.\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch(es) to run the cli on.\n    required: False\n  pn_command:\n    description:\n      - The C(pn_command) takes a CLI show command as value.\n    required: true\n  pn_parameters:\n    description:\n      - Display output using a specific parameter. Use 'all' to display possible\n        output. List of comma separated parameters.\n  pn_options:\n    description:\n      - Specify formatting options.\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: run the vlan-show command\n  pn_show:\n    pn_command: 'vlan-show'\n    pn_parameters: id,scope,ports\n    pn_options: 'layout vertical'\n\n- name: run the vlag-show command\n  pn_show:\n    pn_command: 'vlag-show'\n    pn_parameters: 'id,name,cluster,mode'\n    pn_options: 'no-show-headers'\n\n- name: run the cluster-show command\n  pn_show:\n    pn_command: 'cluster-show'\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the show command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the show command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused any change on the target.\n  returned: always(False)\n  type: bool\n\"\"\"\n\nimport shlex\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch:\n        if cliswitch == 'local':\n            cli += ' switch-local '\n        else:\n            cli += ' switch ' + cliswitch\n    return cli\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    command = module.params['pn_command']\n    cmd = shlex.split(cli)\n\n    # 'out' contains the output\n    # 'err' contains the error messages\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n    # Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            msg='%s: ' % command,\n            stderr=err.strip(),\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            msg='%s: ' % command,\n            stdout=out.strip(),\n            changed=False\n        )\n\n    else:\n        module.exit_json(\n            command=cli,\n            msg='%s: Nothing to display!!!' % command,\n            changed=False\n        )\n\n\ndef main():\n    \"\"\" This section is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=True, type='str'),\n            pn_clipassword=dict(required=True, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str'),\n            pn_command=dict(required=True, type='str'),\n            pn_parameters=dict(default='all', type='str'),\n            pn_options=dict(type='str')\n        )\n    )\n\n    # Accessing the arguments\n    command = module.params['pn_command']\n    parameters = module.params['pn_parameters']\n    options = module.params['pn_options']\n\n    # Building the CLI command string\n    cli = pn_cli(module)\n\n    cli += ' %s format %s ' % (command, parameters)\n\n    if options:\n        cli += options\n\n    run_cli(module, cli)\n\n# AnsibleModule boilerplate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "pn_show.py", "id": "d09b429eb9119e99783b1ce002624f06", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/netvisor/pn_show.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}