{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestTreeLevelLists(object):\n\n    def test_tree_level_lists(self):\n        bst = BstLevelLists(Node(5))\n        bst.insert(3)\n        bst.insert(8)\n        bst.insert(2)\n        bst.insert(4)\n        bst.insert(1)\n        bst.insert(7)\n        bst.insert(6)\n        bst.insert(9)\n        bst.insert(10)\n        bst.insert(11)\n\n        levels = bst.create_level_lists()\n        results_list = []\n        for level in levels:\n            results = Results()\n            for node in level:\n                results.add_result(node)\n            results_list.append(results)\n\n        assert_equal(str(results_list[0]), '[5]')\n        assert_equal(str(results_list[1]), '[3, 8]')\n        assert_equal(str(results_list[2]), '[2, 4, 7, 9]')\n        assert_equal(str(results_list[3]), '[1, 6, 10]')\n        assert_equal(str(results_list[4]), '[11]')\n\n        print('Success: test_tree_level_lists')\n\n\ndef main():\n    test = TestTreeLevelLists()\n    test.test_tree_level_lists()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\n\nclass TestTreeLevelLists(object):\n\n    def test_tree_level_lists(self):\n        bst = BstLevelLists(Node(5))\n        bst.insert(3)\n        bst.insert(8)\n        bst.insert(2)\n        bst.insert(4)\n        bst.insert(1)\n        bst.insert(7)\n        bst.insert(6)\n        bst.insert(9)\n        bst.insert(10)\n        bst.insert(11)\n\n        levels = bst.create_level_lists()\n        results_list = []\n        for level in levels:\n            results = Results()\n            for node in level:\n                results.add_result(node)\n            results_list.append(results)\n\n        assert_equal(str(results_list[0]), '[5]')\n        assert_equal(str(results_list[1]), '[3, 8]')\n        assert_equal(str(results_list[2]), '[2, 4, 7, 9]')\n        assert_equal(str(results_list[3]), '[1, 6, 10]')\n        assert_equal(str(results_list[4]), '[11]')\n\n        print('Success: test_tree_level_lists')\n\n\ndef main():\n    test = TestTreeLevelLists()\n    test.test_tree_level_lists()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_tree_level_lists.py", "id": "f67498af0f590a19583f3d10f44c643e", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/graphs_trees/tree_level_lists/test_tree_level_lists.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}