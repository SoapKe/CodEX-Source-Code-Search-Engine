{"author": "nvbn", "code": "import pytest\nfrom thefuck.rules.git_flag_after_filename import match, get_new_command\nfrom thefuck.types import Command\n\ncommand1 = Command('git log README.md -p',\n                   \"fatal: bad flag '-p' used after filename\")\ncommand2 = Command('git log README.md -p CONTRIBUTING.md',\n                   \"fatal: bad flag '-p' used after filename\")\ncommand3 = Command('git log -p README.md --name-only',\n                   \"fatal: bad flag '--name-only' used after filename\")\ncommand4 = Command('git log README.md -p',\n                   \"fatal: option '-p' must come before non-option arguments\")\ncommand5 = Command('git log README.md -p CONTRIBUTING.md',\n                   \"fatal: option '-p' must come before non-option arguments\")\ncommand6 = Command('git log -p README.md --name-only',\n                   \"fatal: option '--name-only' must come before non-option arguments\")\n\n\n@pytest.mark.parametrize('command', [\n    command1, command2, command3, command4, command5, command6])\ndef test_match(command):\n    assert match(command)\n\n\n@pytest.mark.parametrize('command', [\n    Command('git log README.md', ''),\n    Command('git log -p README.md', '')])\ndef test_not_match(command):\n    assert not match(command)\n\n\n@pytest.mark.parametrize('command, result', [\n    (command1, \"git log -p README.md\"),\n    (command2, \"git log -p README.md CONTRIBUTING.md\"),\n    (command3, \"git log -p --name-only README.md\"),\n    (command4, \"git log -p README.md\"),\n    (command5, \"git log -p README.md CONTRIBUTING.md\"),\n    (command6, \"git log -p --name-only README.md\")])\ndef test_get_new_command(command, result):\n    assert get_new_command(command) == result\n", "comments": "", "content": "import pytest\nfrom thefuck.rules.git_flag_after_filename import match, get_new_command\nfrom thefuck.types import Command\n\ncommand1 = Command('git log README.md -p',\n                   \"fatal: bad flag '-p' used after filename\")\ncommand2 = Command('git log README.md -p CONTRIBUTING.md',\n                   \"fatal: bad flag '-p' used after filename\")\ncommand3 = Command('git log -p README.md --name-only',\n                   \"fatal: bad flag '--name-only' used after filename\")\ncommand4 = Command('git log README.md -p',\n                   \"fatal: option '-p' must come before non-option arguments\")\ncommand5 = Command('git log README.md -p CONTRIBUTING.md',\n                   \"fatal: option '-p' must come before non-option arguments\")\ncommand6 = Command('git log -p README.md --name-only',\n                   \"fatal: option '--name-only' must come before non-option arguments\")\n\n\n@pytest.mark.parametrize('command', [\n    command1, command2, command3, command4, command5, command6])\ndef test_match(command):\n    assert match(command)\n\n\n@pytest.mark.parametrize('command', [\n    Command('git log README.md', ''),\n    Command('git log -p README.md', '')])\ndef test_not_match(command):\n    assert not match(command)\n\n\n@pytest.mark.parametrize('command, result', [\n    (command1, \"git log -p README.md\"),\n    (command2, \"git log -p README.md CONTRIBUTING.md\"),\n    (command3, \"git log -p --name-only README.md\"),\n    (command4, \"git log -p README.md\"),\n    (command5, \"git log -p README.md CONTRIBUTING.md\"),\n    (command6, \"git log -p --name-only README.md\")])\ndef test_get_new_command(command, result):\n    assert get_new_command(command) == result\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_git_flag_after_filename.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_git_flag_after_filename.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}