{"author": "ansible", "code": "\n (c) Quentin Stafford-Fraser 2015\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n Create Webfaction website using Ansible and the Webfaction API\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: webfaction_site\nshort_description: Add or remove a website on a Webfaction host\ndescription:\n    - Add or remove a website on a Webfaction host.  Further documentation at http://github.com/quentinsf/ansible-webfaction.\nauthor: Quentin Stafford-Fraser (@quentinsf)\nversion_added: \"2.0\"\nnotes:\n    - Sadly, you I(do) need to know your webfaction hostname for the C(host) parameter.  But at least, unlike the API, you don't need to know the IP\n      address. You can use a DNS name.\n    - If a site of the same name exists in the account but on a different host, the operation will exit.\n    - >\n      You can run playbooks that use this on a local machine, or on a Webfaction host, or elsewhere, since the scripts use the remote webfaction API.\n      The location is not important. However, running them on multiple hosts I(simultaneously) is best avoided. If you don't specify I(localhost) as\n      your host, you may want to add C(serial: 1) to the plays.\n    - See `the webfaction API <http://docs.webfaction.com/xmlrpc-api/>`_ for more info.\n\noptions:\n\n    name:\n        description:\n            - The name of the website\n        required: true\n\n    state:\n        description:\n            - Whether the website should exist\n        choices: ['present', 'absent']\n        default: \"present\"\n\n    host:\n        description:\n            - The webfaction host on which the site should be created.\n        required: true\n\n    https:\n        description:\n            - Whether or not to use HTTPS\n        type: bool\n        default: 'no'\n\n    site_apps:\n        description:\n            - A mapping of URLs to apps\n        default: []\n\n    subdomains:\n        description:\n            - A list of subdomains associated with this site.\n        default: []\n\n    login_name:\n        description:\n            - The webfaction account to use\n        required: true\n\n    login_password:\n        description:\n            - The webfaction password to use\n        required: true\n'''\n\nEXAMPLES = '''\n  - name: create website\n    webfaction_site:\n      name: testsite1\n      state: present\n      host: myhost.webfaction.com\n      subdomains:\n        - 'testsite1.my_domain.org'\n      site_apps:\n        - ['testapp1', '/']\n      https: no\n      login_name: \"{{webfaction_user}}\"\n      login_password: \"{{webfaction_passwd}}\"\n'''\n\nimport socket\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six.moves import xmlrpc_client\n\n\nwebfaction = xmlrpc_client.ServerProxy('https://api.webfaction.com/')\n\n\ndef main():\n\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            state=dict(required=False, choices=['present', 'absent'], default='present'),\n             You can specify an IP address or hostname.\n            host=dict(required=True),\n            https=dict(required=False, type='bool', default=False),\n            subdomains=dict(required=False, type='list', default=[]),\n            site_apps=dict(required=False, type='list', default=[]),\n            login_name=dict(required=True),\n            login_password=dict(required=True, no_log=True),\n        ),\n        supports_check_mode=True\n    )\n    site_name = module.params['name']\n    site_state = module.params['state']\n    site_host = module.params['host']\n    site_ip = socket.gethostbyname(site_host)\n\n    session_id, account = webfaction.login(\n        module.params['login_name'],\n        module.params['login_password']\n    )\n\n    site_list = webfaction.list_websites(session_id)\n    site_map = dict([(i['name'], i) for i in site_list])\n    existing_site = site_map.get(site_name)\n\n    result = {}\n\n     Here's where the real stuff happens\n\n    if site_state == 'present':\n\n         Does a site with this name already exist?\n        if existing_site:\n\n             If yes, but it's on a different IP address, then fail.\n             If we wanted to allow relocation, we could add a 'relocate=true' option\n             which would get the existing IP address, delete the site there, and create it\n             at the new address.  A bit dangerous, perhaps, so for now we'll require manual\n             deletion if it's on another host.\n\n            if existing_site['ip'] != site_ip:\n                module.fail_json(msg=\"Website already exists with a different IP address. Please fix by hand.\")\n\n             If it's on this host and the key parameters are the same, nothing needs to be done.\n\n            if (existing_site['https'] == module.boolean(module.params['https'])) and \\\n               (set(existing_site['subdomains']) == set(module.params['subdomains'])) and \\\n               (dict(existing_site['website_apps']) == dict(module.params['site_apps'])):\n                module.exit_json(\n                    changed=False\n                )\n\n        positional_args = [\n            session_id, site_name, site_ip,\n            module.boolean(module.params['https']),\n            module.params['subdomains'],\n        ]\n        for a in module.params['site_apps']:\n            positional_args.append((a[0], a[1]))\n\n        if not module.check_mode:\n             If this isn't a dry run, create or modify the site\n            result.update(\n                webfaction.create_website(\n                    *positional_args\n                ) if not existing_site else webfaction.update_website(\n                    *positional_args\n                )\n            )\n\n    elif site_state == 'absent':\n\n         If the site's already not there, nothing changed.\n        if not existing_site:\n            module.exit_json(\n                changed=False,\n            )\n\n        if not module.check_mode:\n             If this isn't a dry run, delete the site\n            result.update(\n                webfaction.delete_website(session_id, site_name, site_ip)\n            )\n\n    else:\n        module.fail_json(msg=\"Unknown state specified: {}\".format(site_state))\n\n    module.exit_json(\n        changed=True,\n        result=result\n    )\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  webfaction site short description  add remove website webfaction host description        add remove website webfaction host   further documentation http   github com quentinsf ansible webfaction  author  quentin stafford fraser ( quentinsf) version added   2 0  notes        sadly  i(do) need know webfaction hostname c(host) parameter   but least  unlike api  need know ip       address  you use dns name        if site name exists account different host  operation exit                you run playbooks use local machine  webfaction host  elsewhere  since scripts use remote webfaction api        the location important  however  running multiple hosts i(simultaneously) best avoided  if specify i(localhost)       host  may want add c(serial  1) plays        see  webfaction api  http   docs webfaction com xmlrpc api     info   options       name          description                the name website         required  true      state          description                whether website exist         choices    present    absent           default   present       host          description                the webfaction host site created          required  true      https          description                whether use https         type  bool         default         site apps          description                a mapping urls apps         default          subdomains          description                a list subdomains associated site          default          login name          description                the webfaction account use         required  true      login password          description                the webfaction password use         required  true      examples           name  create website     webfaction site        name  testsite1       state  present       host  myhost webfaction com       subdomains             testsite1 domain org        site apps              testapp1              https        login name     webfaction user          login password     webfaction passwd            usr bin python    (c) quentin stafford fraser 2015    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)       create webfaction website using ansible webfaction api    you specify ip address hostname     here real stuff happens    does site name already exist     if yes  different ip address  fail     if wanted allow relocation  could add  relocate true  option    would get existing ip address  delete site  create    new address   a bit dangerous  perhaps  require manual    deletion another host     if host key parameters  nothing needs done     if dry run  create modify site    if site already  nothing changed     if dry run  delete site ", "content": "#!/usr/bin/python\n# (c) Quentin Stafford-Fraser 2015\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n#\n# Create Webfaction website using Ansible and the Webfaction API\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: webfaction_site\nshort_description: Add or remove a website on a Webfaction host\ndescription:\n    - Add or remove a website on a Webfaction host.  Further documentation at http://github.com/quentinsf/ansible-webfaction.\nauthor: Quentin Stafford-Fraser (@quentinsf)\nversion_added: \"2.0\"\nnotes:\n    - Sadly, you I(do) need to know your webfaction hostname for the C(host) parameter.  But at least, unlike the API, you don't need to know the IP\n      address. You can use a DNS name.\n    - If a site of the same name exists in the account but on a different host, the operation will exit.\n    - >\n      You can run playbooks that use this on a local machine, or on a Webfaction host, or elsewhere, since the scripts use the remote webfaction API.\n      The location is not important. However, running them on multiple hosts I(simultaneously) is best avoided. If you don't specify I(localhost) as\n      your host, you may want to add C(serial: 1) to the plays.\n    - See `the webfaction API <http://docs.webfaction.com/xmlrpc-api/>`_ for more info.\n\noptions:\n\n    name:\n        description:\n            - The name of the website\n        required: true\n\n    state:\n        description:\n            - Whether the website should exist\n        choices: ['present', 'absent']\n        default: \"present\"\n\n    host:\n        description:\n            - The webfaction host on which the site should be created.\n        required: true\n\n    https:\n        description:\n            - Whether or not to use HTTPS\n        type: bool\n        default: 'no'\n\n    site_apps:\n        description:\n            - A mapping of URLs to apps\n        default: []\n\n    subdomains:\n        description:\n            - A list of subdomains associated with this site.\n        default: []\n\n    login_name:\n        description:\n            - The webfaction account to use\n        required: true\n\n    login_password:\n        description:\n            - The webfaction password to use\n        required: true\n'''\n\nEXAMPLES = '''\n  - name: create website\n    webfaction_site:\n      name: testsite1\n      state: present\n      host: myhost.webfaction.com\n      subdomains:\n        - 'testsite1.my_domain.org'\n      site_apps:\n        - ['testapp1', '/']\n      https: no\n      login_name: \"{{webfaction_user}}\"\n      login_password: \"{{webfaction_passwd}}\"\n'''\n\nimport socket\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six.moves import xmlrpc_client\n\n\nwebfaction = xmlrpc_client.ServerProxy('https://api.webfaction.com/')\n\n\ndef main():\n\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            state=dict(required=False, choices=['present', 'absent'], default='present'),\n            # You can specify an IP address or hostname.\n            host=dict(required=True),\n            https=dict(required=False, type='bool', default=False),\n            subdomains=dict(required=False, type='list', default=[]),\n            site_apps=dict(required=False, type='list', default=[]),\n            login_name=dict(required=True),\n            login_password=dict(required=True, no_log=True),\n        ),\n        supports_check_mode=True\n    )\n    site_name = module.params['name']\n    site_state = module.params['state']\n    site_host = module.params['host']\n    site_ip = socket.gethostbyname(site_host)\n\n    session_id, account = webfaction.login(\n        module.params['login_name'],\n        module.params['login_password']\n    )\n\n    site_list = webfaction.list_websites(session_id)\n    site_map = dict([(i['name'], i) for i in site_list])\n    existing_site = site_map.get(site_name)\n\n    result = {}\n\n    # Here's where the real stuff happens\n\n    if site_state == 'present':\n\n        # Does a site with this name already exist?\n        if existing_site:\n\n            # If yes, but it's on a different IP address, then fail.\n            # If we wanted to allow relocation, we could add a 'relocate=true' option\n            # which would get the existing IP address, delete the site there, and create it\n            # at the new address.  A bit dangerous, perhaps, so for now we'll require manual\n            # deletion if it's on another host.\n\n            if existing_site['ip'] != site_ip:\n                module.fail_json(msg=\"Website already exists with a different IP address. Please fix by hand.\")\n\n            # If it's on this host and the key parameters are the same, nothing needs to be done.\n\n            if (existing_site['https'] == module.boolean(module.params['https'])) and \\\n               (set(existing_site['subdomains']) == set(module.params['subdomains'])) and \\\n               (dict(existing_site['website_apps']) == dict(module.params['site_apps'])):\n                module.exit_json(\n                    changed=False\n                )\n\n        positional_args = [\n            session_id, site_name, site_ip,\n            module.boolean(module.params['https']),\n            module.params['subdomains'],\n        ]\n        for a in module.params['site_apps']:\n            positional_args.append((a[0], a[1]))\n\n        if not module.check_mode:\n            # If this isn't a dry run, create or modify the site\n            result.update(\n                webfaction.create_website(\n                    *positional_args\n                ) if not existing_site else webfaction.update_website(\n                    *positional_args\n                )\n            )\n\n    elif site_state == 'absent':\n\n        # If the site's already not there, nothing changed.\n        if not existing_site:\n            module.exit_json(\n                changed=False,\n            )\n\n        if not module.check_mode:\n            # If this isn't a dry run, delete the site\n            result.update(\n                webfaction.delete_website(session_id, site_name, site_ip)\n            )\n\n    else:\n        module.fail_json(msg=\"Unknown state specified: {}\".format(site_state))\n\n    module.exit_json(\n        changed=True,\n        result=result\n    )\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "webfaction_site.py", "id": "86de597a9df95e35938fe3a72d51ad4c", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/webfaction/webfaction_site.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}