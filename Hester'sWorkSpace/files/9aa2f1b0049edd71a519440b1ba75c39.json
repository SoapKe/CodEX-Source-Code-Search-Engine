{"author": "odoo", "code": "\n\nfrom __future__ import print_function\nimport serial\nimport socket\nimport usb.core\nimport usb.util\n\nfrom .escpos import *\nfrom .constants import *\nfrom .exceptions import *\nfrom time import sleep\n\nclass Usb(Escpos):\n    \"\"\" Define USB printer \"\"\"\n\n    def __init__(self, idVendor, idProduct, interface=0, in_ep=None, out_ep=None):\n        \"\"\"\n        @param idVendor  : Vendor ID\n        @param idProduct : Product ID\n        @param interface : USB device interface\n        @param in_ep     : Input end point\n        @param out_ep    : Output end point\n        \"\"\"\n\n        self.errorText = \"ERROR PRINTER\\n\\n\\n\\n\\n\\n\"+PAPER_FULL_CUT\n\n        self.idVendor  = idVendor\n        self.idProduct = idProduct\n        self.interface = interface\n        self.in_ep     = in_ep\n        self.out_ep    = out_ep\n        self.open()\n\n    def open(self):\n        \"\"\" Search device on USB tree and set is as escpos device \"\"\"\n        \n        self.device = usb.core.find(idVendor=self.idVendor, idProduct=self.idProduct)\n        if self.device is None:\n            raise NoDeviceError()\n        try:\n            if self.device.is_kernel_driver_active(self.interface):\n                self.device.detach_kernel_driver(self.interface) \n            self.device.set_configuration()\n            usb.util.claim_interface(self.device, self.interface)\n\n            cfg = self.device.get_active_configuration()\n            intf = cfg[(0,0)] \n            if self.in_ep is None:\n                \n                try:\n                    is_IN = lambda e: usb.util.endpoint_direction(e.bEndpointAddress) == usb.util.ENDPOINT_IN\n                    is_OUT = lambda e: usb.util.endpoint_direction(e.bEndpointAddress) == usb.util.ENDPOINT_OUT\n                    endpoint_in = usb.util.find_descriptor(intf, custom_match=is_IN)\n                    endpoint_out = usb.util.find_descriptor(intf, custom_match=is_OUT)\n                    self.in_ep = endpoint_in.bEndpointAddress\n                    self.out_ep = endpoint_out.bEndpointAddress\n                except usb.core.USBError:\n                    \n                    self.in_ep = 0x82\n                    self.out_ep = 0x01\n\n        except usb.core.USBError as e:\n            raise HandleDeviceError(e)\n\n    def close(self):\n        i = 0\n        while True:\n            try:\n                if not self.device.is_kernel_driver_active(self.interface):\n                    usb.util.release_interface(self.device, self.interface)\n                    self.device.attach_kernel_driver(self.interface)\n                    usb.util.dispose_resources(self.device)\n                else:\n                    self.device = None\n                    return True\n            except usb.core.USBError as e:\n                i += 1\n                if i > 10:\n                    return False\n        \n            sleep(0.1)\n\n    def _raw(self, msg):\n        \"\"\" Print any command sent in raw format \"\"\"\n        if len(msg) != self.device.write(self.out_ep, msg, self.interface, timeout=5000):\n            self.device.write(self.out_ep, self.errorText, self.interface)\n            raise TicketNotPrinted()\n    \n    def __extract_status(self):\n        maxiterate = 0\n        rep = None\n        while rep == None:\n            maxiterate += 1\n            if maxiterate > 10000:\n                raise NoStatusError()\n            r = self.device.read(self.in_ep, 20, self.interface).tolist()\n            while len(r):\n                rep = r.pop()\n        return rep\n\n    def get_printer_status(self):\n        status = {\n            'printer': {}, \n            'offline': {}, \n            'error'  : {}, \n            'paper'  : {},\n        }\n\n        self.device.write(self.out_ep, DLE_EOT_PRINTER, self.interface)\n        printer = self.__extract_status()    \n        self.device.write(self.out_ep, DLE_EOT_OFFLINE, self.interface)\n        offline = self.__extract_status()\n        self.device.write(self.out_ep, DLE_EOT_ERROR, self.interface)\n        error = self.__extract_status()\n        self.device.write(self.out_ep, DLE_EOT_PAPER, self.interface)\n        paper = self.__extract_status()\n            \n        status['printer']['status_code']     = printer\n        status['printer']['status_error']    = not ((printer & 147) == 18)\n        status['printer']['online']          = not bool(printer & 8)\n        status['printer']['recovery']        = bool(printer & 32)\n        status['printer']['paper_feed_on']   = bool(printer & 64)\n        status['printer']['drawer_pin_high'] = bool(printer & 4)\n        status['offline']['status_code']     = offline\n        status['offline']['status_error']    = not ((offline & 147) == 18)\n        status['offline']['cover_open']      = bool(offline & 4)\n        status['offline']['paper_feed_on']   = bool(offline & 8)\n        status['offline']['paper']           = not bool(offline & 32)\n        status['offline']['error']           = bool(offline & 64)\n        status['error']['status_code']       = error\n        status['error']['status_error']      = not ((error & 147) == 18)\n        status['error']['recoverable']       = bool(error & 4)\n        status['error']['autocutter']        = bool(error & 8)\n        status['error']['unrecoverable']     = bool(error & 32)\n        status['error']['auto_recoverable']  = not bool(error & 64)\n        status['paper']['status_code']       = paper\n        status['paper']['status_error']      = not ((paper & 147) == 18)\n        status['paper']['near_end']          = bool(paper & 12)\n        status['paper']['present']           = not bool(paper & 96)\n\n        return status\n\n    def __del__(self):\n        \"\"\" Release USB interface \"\"\"\n        if self.device:\n            self.close()\n        self.device = None\n\n\n\nclass Serial(Escpos):\n    \"\"\" Define Serial printer \"\"\"\n\n    def __init__(self, devfile=\"/dev/ttyS0\", baudrate=9600, bytesize=8, timeout=1):\n        \"\"\"\n        @param devfile  : Device file under dev filesystem\n        @param baudrate : Baud rate for serial transmission\n        @param bytesize : Serial buffer size\n        @param timeout  : Read/Write timeout\n        \"\"\"\n        self.devfile  = devfile\n        self.baudrate = baudrate\n        self.bytesize = bytesize\n        self.timeout  = timeout\n        self.open()\n\n\n    def open(self):\n        \"\"\" Setup serial port and set is as escpos device \"\"\"\n        self.device = serial.Serial(port=self.devfile, baudrate=self.baudrate, bytesize=self.bytesize, parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, timeout=self.timeout, dsrdtr=True)\n\n        if self.device is not None:\n            print(\"Serial printer enabled\")\n        else:\n            print(\"Unable to open serial printer on: %s\" % self.devfile)\n\n\n    def _raw(self, msg):\n        \"\"\" Print any command sent in raw format \"\"\"\n        self.device.write(msg)\n\n\n    def __del__(self):\n        \"\"\" Close Serial interface \"\"\"\n        if self.device is not None:\n            self.device.close()\n\n\n\nclass Network(Escpos):\n    \"\"\" Define Network printer \"\"\"\n\n    def __init__(self,host,port=9100):\n        \"\"\"\n        @param host : Printer's hostname or IP address\n        @param port : Port to write to\n        \"\"\"\n        self.host = host\n        self.port = port\n        self.open()\n\n\n    def open(self):\n        \"\"\" Open TCP socket and set it as escpos device \"\"\"\n        self.device = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.device.connect((self.host, self.port))\n\n        if self.device is None:\n            print(\"Could not open socket for %s\" % self.host)\n\n\n    def _raw(self, msg):\n        self.device.send(msg)\n\n\n    def __del__(self):\n        \"\"\" Close TCP connection \"\"\"\n        self.device.close()\n\n", "comments": "    define usb printer          def   init  (self  idvendor  idproduct  interface 0  ep none  ep none)                       param idvendor    vendor id          param idproduct   product id          param interface   usb device interface          param ep       input end point          param ep      output end point                      self errortext    error printer n n n n n n  paper full cut          self idvendor    idvendor         self idproduct   idproduct         self interface   interface         self ep       ep         self ep      ep         self open()      def open(self)              search device usb tree set escpos device                      self device   usb core find(idvendor self idvendor  idproduct self idproduct)         self device none              raise nodeviceerror()         try              self device kernel driver active(self interface)                  self device detach kernel driver(self interface)              self device set configuration()             usb util claim interface(self device  self interface)              cfg   self device get active configuration()             intf   cfg (0 0)    first interface             self ep none                    attempt detect in out endpoint addresses                 try                      in   lambda e  usb util endpoint direction(e bendpointaddress)    usb util endpoint in                     out   lambda e  usb util endpoint direction(e bendpointaddress)    usb util endpoint out                     endpoint   usb util find descriptor(intf  custom match in)                     endpoint   usb util find descriptor(intf  custom match out)                     self ep   endpoint bendpointaddress                     self ep   endpoint bendpointaddress                 except usb core usberror                        default values officially supported printers                     self ep   0x82                     self ep   0x01          except usb core usberror e              raise handledeviceerror(e)      def close(self)            0         true              try                  self device kernel driver active(self interface)                      usb util release interface(self device  self interface)                     self device attach kernel driver(self interface)                     usb util dispose resources(self device)                 else                      self device   none                     return true             except usb core usberror e                     1                   10                      return false                      sleep(0 1)      def  raw(self  msg)              print command sent raw format             len(msg)    self device write(self ep  msg  self interface  timeout 5000)              self device write(self ep  self errortext  self interface)             raise ticketnotprinted()          def   extract status(self)          maxiterate   0         rep   none         rep    none              maxiterate    1             maxiterate   10000                  raise nostatuserror()             r   self device read(self ep  20  self interface) tolist()             len(r)                  rep   r pop()         return rep      def get printer status(self)          status                  printer                     offline                     error                       paper                            self device write(self ep  dle eot printer  self interface)         printer   self   extract status()             self device write(self ep  dle eot offline  self interface)         offline   self   extract status()         self device write(self ep  dle eot error  self interface)         error   self   extract status()         self device write(self ep  dle eot paper  self interface)         paper   self   extract status()                      status  printer    status code         printer         status  printer    status error        ((printer   147)    18)         status  printer    online              bool(printer   8)         status  printer    recovery            bool(printer   32)         status  printer    paper feed       bool(printer   64)         status  printer    drawer pin high     bool(printer   4)         status  offline    status code         offline         status  offline    status error        ((offline   147)    18)         status  offline    cover open          bool(offline   4)         status  offline    paper feed       bool(offline   8)         status  offline    paper               bool(offline   32)         status  offline    error               bool(offline   64)         status  error    status code           error         status  error    status error          ((error   147)    18)         status  error    recoverable           bool(error   4)         status  error    autocutter            bool(error   8)         status  error    unrecoverable         bool(error   32)         status  error    auto recoverable      bool(error   64)         status  paper    status code           paper         status  paper    status error          ((paper   147)    18)         status  paper    near end              bool(paper   12)         status  paper    present               bool(paper   96)          return status      def   del  (self)              release usb interface             self device              self close()         self device   none    class serial(escpos)          define serial printer          def   init  (self  devfile   dev ttys0   baudrate 9600  bytesize 8  timeout 1)                       param devfile    device file dev filesystem          param baudrate   baud rate serial transmission          param bytesize   serial buffer size          param timeout    read write timeout                     self devfile    devfile         self baudrate   baudrate         self bytesize   bytesize         self timeout    timeout         self open()       def open(self)              setup serial port set escpos device             self device   serial serial(port self devfile  baudrate self baudrate  bytesize self bytesize  parity serial parity none  stopbits serial stopbits one  timeout self timeout  dsrdtr true)          self device none              print( serial printer enabled )         else              print( unable open serial printer      self devfile)       def  raw(self  msg)              print command sent raw format             self device write(msg)       def   del  (self)              close serial interface             self device none              self device close()    class network(escpos)          define network printer          def   init  (self host port 9100)                       param host   printer hostname ip address          param port   port write                     self host   host         self port   port         self open()       def open(self)              open tcp socket set escpos device             self device   socket socket(socket af inet  socket sock stream)         self device connect((self host  self port))          self device none              print( could open socket     self host)       def  raw(self  msg)          self device send(msg)       def   del  (self)              close tcp connection         usr bin python    first interface    attempt detect in out endpoint addresses    default values officially supported printers ", "content": "#!/usr/bin/python\n\nfrom __future__ import print_function\nimport serial\nimport socket\nimport usb.core\nimport usb.util\n\nfrom .escpos import *\nfrom .constants import *\nfrom .exceptions import *\nfrom time import sleep\n\nclass Usb(Escpos):\n    \"\"\" Define USB printer \"\"\"\n\n    def __init__(self, idVendor, idProduct, interface=0, in_ep=None, out_ep=None):\n        \"\"\"\n        @param idVendor  : Vendor ID\n        @param idProduct : Product ID\n        @param interface : USB device interface\n        @param in_ep     : Input end point\n        @param out_ep    : Output end point\n        \"\"\"\n\n        self.errorText = \"ERROR PRINTER\\n\\n\\n\\n\\n\\n\"+PAPER_FULL_CUT\n\n        self.idVendor  = idVendor\n        self.idProduct = idProduct\n        self.interface = interface\n        self.in_ep     = in_ep\n        self.out_ep    = out_ep\n        self.open()\n\n    def open(self):\n        \"\"\" Search device on USB tree and set is as escpos device \"\"\"\n        \n        self.device = usb.core.find(idVendor=self.idVendor, idProduct=self.idProduct)\n        if self.device is None:\n            raise NoDeviceError()\n        try:\n            if self.device.is_kernel_driver_active(self.interface):\n                self.device.detach_kernel_driver(self.interface) \n            self.device.set_configuration()\n            usb.util.claim_interface(self.device, self.interface)\n\n            cfg = self.device.get_active_configuration()\n            intf = cfg[(0,0)] # first interface\n            if self.in_ep is None:\n                # Attempt to detect IN/OUT endpoint addresses\n                try:\n                    is_IN = lambda e: usb.util.endpoint_direction(e.bEndpointAddress) == usb.util.ENDPOINT_IN\n                    is_OUT = lambda e: usb.util.endpoint_direction(e.bEndpointAddress) == usb.util.ENDPOINT_OUT\n                    endpoint_in = usb.util.find_descriptor(intf, custom_match=is_IN)\n                    endpoint_out = usb.util.find_descriptor(intf, custom_match=is_OUT)\n                    self.in_ep = endpoint_in.bEndpointAddress\n                    self.out_ep = endpoint_out.bEndpointAddress\n                except usb.core.USBError:\n                    # default values for officially supported printers\n                    self.in_ep = 0x82\n                    self.out_ep = 0x01\n\n        except usb.core.USBError as e:\n            raise HandleDeviceError(e)\n\n    def close(self):\n        i = 0\n        while True:\n            try:\n                if not self.device.is_kernel_driver_active(self.interface):\n                    usb.util.release_interface(self.device, self.interface)\n                    self.device.attach_kernel_driver(self.interface)\n                    usb.util.dispose_resources(self.device)\n                else:\n                    self.device = None\n                    return True\n            except usb.core.USBError as e:\n                i += 1\n                if i > 10:\n                    return False\n        \n            sleep(0.1)\n\n    def _raw(self, msg):\n        \"\"\" Print any command sent in raw format \"\"\"\n        if len(msg) != self.device.write(self.out_ep, msg, self.interface, timeout=5000):\n            self.device.write(self.out_ep, self.errorText, self.interface)\n            raise TicketNotPrinted()\n    \n    def __extract_status(self):\n        maxiterate = 0\n        rep = None\n        while rep == None:\n            maxiterate += 1\n            if maxiterate > 10000:\n                raise NoStatusError()\n            r = self.device.read(self.in_ep, 20, self.interface).tolist()\n            while len(r):\n                rep = r.pop()\n        return rep\n\n    def get_printer_status(self):\n        status = {\n            'printer': {}, \n            'offline': {}, \n            'error'  : {}, \n            'paper'  : {},\n        }\n\n        self.device.write(self.out_ep, DLE_EOT_PRINTER, self.interface)\n        printer = self.__extract_status()    \n        self.device.write(self.out_ep, DLE_EOT_OFFLINE, self.interface)\n        offline = self.__extract_status()\n        self.device.write(self.out_ep, DLE_EOT_ERROR, self.interface)\n        error = self.__extract_status()\n        self.device.write(self.out_ep, DLE_EOT_PAPER, self.interface)\n        paper = self.__extract_status()\n            \n        status['printer']['status_code']     = printer\n        status['printer']['status_error']    = not ((printer & 147) == 18)\n        status['printer']['online']          = not bool(printer & 8)\n        status['printer']['recovery']        = bool(printer & 32)\n        status['printer']['paper_feed_on']   = bool(printer & 64)\n        status['printer']['drawer_pin_high'] = bool(printer & 4)\n        status['offline']['status_code']     = offline\n        status['offline']['status_error']    = not ((offline & 147) == 18)\n        status['offline']['cover_open']      = bool(offline & 4)\n        status['offline']['paper_feed_on']   = bool(offline & 8)\n        status['offline']['paper']           = not bool(offline & 32)\n        status['offline']['error']           = bool(offline & 64)\n        status['error']['status_code']       = error\n        status['error']['status_error']      = not ((error & 147) == 18)\n        status['error']['recoverable']       = bool(error & 4)\n        status['error']['autocutter']        = bool(error & 8)\n        status['error']['unrecoverable']     = bool(error & 32)\n        status['error']['auto_recoverable']  = not bool(error & 64)\n        status['paper']['status_code']       = paper\n        status['paper']['status_error']      = not ((paper & 147) == 18)\n        status['paper']['near_end']          = bool(paper & 12)\n        status['paper']['present']           = not bool(paper & 96)\n\n        return status\n\n    def __del__(self):\n        \"\"\" Release USB interface \"\"\"\n        if self.device:\n            self.close()\n        self.device = None\n\n\n\nclass Serial(Escpos):\n    \"\"\" Define Serial printer \"\"\"\n\n    def __init__(self, devfile=\"/dev/ttyS0\", baudrate=9600, bytesize=8, timeout=1):\n        \"\"\"\n        @param devfile  : Device file under dev filesystem\n        @param baudrate : Baud rate for serial transmission\n        @param bytesize : Serial buffer size\n        @param timeout  : Read/Write timeout\n        \"\"\"\n        self.devfile  = devfile\n        self.baudrate = baudrate\n        self.bytesize = bytesize\n        self.timeout  = timeout\n        self.open()\n\n\n    def open(self):\n        \"\"\" Setup serial port and set is as escpos device \"\"\"\n        self.device = serial.Serial(port=self.devfile, baudrate=self.baudrate, bytesize=self.bytesize, parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, timeout=self.timeout, dsrdtr=True)\n\n        if self.device is not None:\n            print(\"Serial printer enabled\")\n        else:\n            print(\"Unable to open serial printer on: %s\" % self.devfile)\n\n\n    def _raw(self, msg):\n        \"\"\" Print any command sent in raw format \"\"\"\n        self.device.write(msg)\n\n\n    def __del__(self):\n        \"\"\" Close Serial interface \"\"\"\n        if self.device is not None:\n            self.device.close()\n\n\n\nclass Network(Escpos):\n    \"\"\" Define Network printer \"\"\"\n\n    def __init__(self,host,port=9100):\n        \"\"\"\n        @param host : Printer's hostname or IP address\n        @param port : Port to write to\n        \"\"\"\n        self.host = host\n        self.port = port\n        self.open()\n\n\n    def open(self):\n        \"\"\" Open TCP socket and set it as escpos device \"\"\"\n        self.device = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.device.connect((self.host, self.port))\n\n        if self.device is None:\n            print(\"Could not open socket for %s\" % self.host)\n\n\n    def _raw(self, msg):\n        self.device.send(msg)\n\n\n    def __del__(self):\n        \"\"\" Close TCP connection \"\"\"\n        self.device.close()\n\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "printer.py", "id": "9aa2f1b0049edd71a519440b1ba75c39", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hw_escpos/escpos/printer.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}