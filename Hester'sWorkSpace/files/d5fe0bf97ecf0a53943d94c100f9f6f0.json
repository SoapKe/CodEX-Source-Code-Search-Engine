{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import unescapeHTML\n\n\nclass BaiduVideoIE(InfoExtractor):\n    IE_DESC = '\u767e\u5ea6\u89c6\u9891'\n    _VALID_URL = r'https?://v\\.baidu\\.com/(?P<type>[a-z]+)/(?P<id>\\d+)\\.htm'\n    _TESTS = [{\n        'url': 'http://v.baidu.com/comic/1069.htm?frp=bdbrand&q=%E4%B8%AD%E5%8D%8E%E5%B0%8F%E5%BD%93%E5%AE%B6',\n        'info_dict': {\n            'id': '1069',\n            'title': '\u4e2d\u534e\u5c0f\u5f53\u5bb6 TV\u7248\u56fd\u8bed',\n            'description': 'md5:51be07afe461cf99fa61231421b5397c',\n        },\n        'playlist_count': 52,\n    }, {\n        'url': 'http://v.baidu.com/show/11595.htm?frp=bdbrand',\n        'info_dict': {\n            'id': '11595',\n            'title': 're:^\u5954\u8dd1\u5427\u5144\u5f1f',\n            'description': 'md5:1bf88bad6d850930f542d51547c089b8',\n        },\n        'playlist_mincount': 12,\n    }]\n\n    def _call_api(self, path, category, playlist_id, note):\n        return self._download_json('http://app.video.baidu.com/%s/?worktype=adnative%s&id=%s' % (\n            path, category, playlist_id), playlist_id, note)\n\n    def _real_extract(self, url):\n        category, playlist_id = re.match(self._VALID_URL, url).groups()\n        if category == 'show':\n            category = 'tvshow'\n        if category == 'tv':\n            category = 'tvplay'\n\n        playlist_detail = self._call_api(\n            'xqinfo', category, playlist_id, 'Download playlist JSON metadata')\n\n        playlist_title = playlist_detail['title']\n        playlist_description = unescapeHTML(playlist_detail.get('intro'))\n\n        episodes_detail = self._call_api(\n            'xqsingle', category, playlist_id, 'Download episodes JSON metadata')\n\n        entries = [self.url_result(\n            episode['url'], video_title=episode['title']\n        ) for episode in episodes_detail['videos']]\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import unescapeHTML\n\n\nclass BaiduVideoIE(InfoExtractor):\n    IE_DESC = '\u767e\u5ea6\u89c6\u9891'\n    _VALID_URL = r'https?://v\\.baidu\\.com/(?P<type>[a-z]+)/(?P<id>\\d+)\\.htm'\n    _TESTS = [{\n        'url': 'http://v.baidu.com/comic/1069.htm?frp=bdbrand&q=%E4%B8%AD%E5%8D%8E%E5%B0%8F%E5%BD%93%E5%AE%B6',\n        'info_dict': {\n            'id': '1069',\n            'title': '\u4e2d\u534e\u5c0f\u5f53\u5bb6 TV\u7248\u56fd\u8bed',\n            'description': 'md5:51be07afe461cf99fa61231421b5397c',\n        },\n        'playlist_count': 52,\n    }, {\n        'url': 'http://v.baidu.com/show/11595.htm?frp=bdbrand',\n        'info_dict': {\n            'id': '11595',\n            'title': 're:^\u5954\u8dd1\u5427\u5144\u5f1f',\n            'description': 'md5:1bf88bad6d850930f542d51547c089b8',\n        },\n        'playlist_mincount': 12,\n    }]\n\n    def _call_api(self, path, category, playlist_id, note):\n        return self._download_json('http://app.video.baidu.com/%s/?worktype=adnative%s&id=%s' % (\n            path, category, playlist_id), playlist_id, note)\n\n    def _real_extract(self, url):\n        category, playlist_id = re.match(self._VALID_URL, url).groups()\n        if category == 'show':\n            category = 'tvshow'\n        if category == 'tv':\n            category = 'tvplay'\n\n        playlist_detail = self._call_api(\n            'xqinfo', category, playlist_id, 'Download playlist JSON metadata')\n\n        playlist_title = playlist_detail['title']\n        playlist_description = unescapeHTML(playlist_detail.get('intro'))\n\n        episodes_detail = self._call_api(\n            'xqsingle', category, playlist_id, 'Download episodes JSON metadata')\n\n        entries = [self.url_result(\n            episode['url'], video_title=episode['title']\n        ) for episode in episodes_detail['videos']]\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "baidu.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/baidu.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}