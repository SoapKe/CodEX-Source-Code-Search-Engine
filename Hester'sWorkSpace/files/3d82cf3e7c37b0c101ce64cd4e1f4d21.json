{"author": "mopidy", "code": "from __future__ import absolute_import, unicode_literals\n\nimport unittest\n\nfrom mopidy.internal import path\nfrom mopidy.models import Album, Artist, Playlist, TlTrack, Track\nfrom mopidy.mpd import translator\n\n\nclass TrackMpdFormatTest(unittest.TestCase):\n    track = Track(\n        uri='a uri',\n        artists=[Artist(name='an artist')],\n        name='a name',\n        album=Album(\n            name='an album', num_tracks=13,\n            artists=[Artist(name='an other artist')],\n            uri='urischeme:album:12345', images=['image1']),\n        track_no=7,\n        composers=[Artist(name='a composer')],\n        performers=[Artist(name='a performer')],\n        genre='a genre',\n        date='1977-01-01',\n        disc_no=1,\n        comment='a comment',\n        length=137000,\n    )\n\n    def setUp(self):  \n        self.media_dir = '/dir/subdir'\n        path.mtime.set_fake_time(1234567)\n\n    def tearDown(self):  \n        path.mtime.undo_fake()\n\n    def test_track_to_mpd_format_for_empty_track(self):\n        result = translator.track_to_mpd_format(\n            Track(uri='a uri', length=137000)\n        )\n        self.assertIn(('file', 'a uri'), result)\n        self.assertIn(('Time', 137), result)\n        self.assertNotIn(('Artist', ''), result)\n        self.assertNotIn(('Title', ''), result)\n        self.assertNotIn(('Album', ''), result)\n        self.assertNotIn(('Track', 0), result)\n        self.assertNotIn(('Date', ''), result)\n        self.assertEqual(len(result), 2)\n\n    def test_track_to_mpd_format_with_position(self):\n        result = translator.track_to_mpd_format(Track(), position=1)\n        self.assertNotIn(('Pos', 1), result)\n\n    def test_track_to_mpd_format_with_tlid(self):\n        result = translator.track_to_mpd_format(TlTrack(1, Track()))\n        self.assertNotIn(('Id', 1), result)\n\n    def test_track_to_mpd_format_with_position_and_tlid(self):\n        result = translator.track_to_mpd_format(\n            TlTrack(2, Track(uri='a uri')), position=1)\n        self.assertIn(('Pos', 1), result)\n        self.assertIn(('Id', 2), result)\n\n    def test_track_to_mpd_format_for_nonempty_track(self):\n        result = translator.track_to_mpd_format(\n            TlTrack(122, self.track), position=9)\n        self.assertIn(('file', 'a uri'), result)\n        self.assertIn(('Time', 137), result)\n        self.assertIn(('Artist', 'an artist'), result)\n        self.assertIn(('Title', 'a name'), result)\n        self.assertIn(('Album', 'an album'), result)\n        self.assertIn(('AlbumArtist', 'an other artist'), result)\n        self.assertIn(('Composer', 'a composer'), result)\n        self.assertIn(('Performer', 'a performer'), result)\n        self.assertIn(('Genre', 'a genre'), result)\n        self.assertIn(('Track', '7/13'), result)\n        self.assertIn(('Date', '1977-01-01'), result)\n        self.assertIn(('Disc', 1), result)\n        self.assertIn(('Pos', 9), result)\n        self.assertIn(('Id', 122), result)\n        self.assertIn(('X-AlbumUri', 'urischeme:album:12345'), result)\n        self.assertIn(('X-AlbumImage', 'image1'), result)\n        self.assertNotIn(('Comment', 'a comment'), result)\n        self.assertEqual(len(result), 16)\n\n    def test_track_to_mpd_format_with_last_modified(self):\n        track = self.track.replace(last_modified=995303899000)\n        result = translator.track_to_mpd_format(track)\n        self.assertIn(('Last-Modified', '2001-07-16T17:18:19Z'), result)\n\n    def test_track_to_mpd_format_with_last_modified_of_zero(self):\n        track = self.track.replace(last_modified=0)\n        result = translator.track_to_mpd_format(track)\n        keys = [k for k, v in result]\n        self.assertNotIn('Last-Modified', keys)\n\n    def test_track_to_mpd_format_musicbrainz_trackid(self):\n        track = self.track.replace(musicbrainz_id='foo')\n        result = translator.track_to_mpd_format(track)\n        self.assertIn(('MUSICBRAINZ_TRACKID', 'foo'), result)\n\n    def test_track_to_mpd_format_musicbrainz_albumid(self):\n        album = self.track.album.replace(musicbrainz_id='foo')\n        track = self.track.replace(album=album)\n        result = translator.track_to_mpd_format(track)\n        self.assertIn(('MUSICBRAINZ_ALBUMID', 'foo'), result)\n\n    def test_track_to_mpd_format_musicbrainz_albumartistid(self):\n        artist = list(self.track.artists)[0].replace(musicbrainz_id='foo')\n        album = self.track.album.replace(artists=[artist])\n        track = self.track.replace(album=album)\n        result = translator.track_to_mpd_format(track)\n        self.assertIn(('MUSICBRAINZ_ALBUMARTISTID', 'foo'), result)\n\n    def test_track_to_mpd_format_musicbrainz_artistid(self):\n        artist = list(self.track.artists)[0].replace(musicbrainz_id='foo')\n        track = self.track.replace(artists=[artist])\n        result = translator.track_to_mpd_format(track)\n        self.assertIn(('MUSICBRAINZ_ARTISTID', 'foo'), result)\n\n    def test_concat_multi_values(self):\n        artists = [Artist(name='ABBA'), Artist(name='Beatles')]\n        translated = translator.concat_multi_values(artists, 'name')\n        self.assertEqual(translated, 'ABBA;Beatles')\n\n    def test_concat_multi_values_artist_with_no_name(self):\n        artists = [Artist(name=None)]\n        translated = translator.concat_multi_values(artists, 'name')\n        self.assertEqual(translated, '')\n\n    def test_concat_multi_values_artist_with_no_musicbrainz_id(self):\n        artists = [Artist(name='Jah Wobble')]\n        translated = translator.concat_multi_values(artists, 'musicbrainz_id')\n        self.assertEqual(translated, '')\n\n    def test_track_to_mpd_format_with_stream_title(self):\n        result = translator.track_to_mpd_format(self.track, stream_title='foo')\n        self.assertIn(('Name', 'a name'), result)\n        self.assertIn(('Title', 'foo'), result)\n\n    def test_track_to_mpd_format_with_empty_stream_title(self):\n        result = translator.track_to_mpd_format(self.track, stream_title='')\n        self.assertIn(('Name', 'a name'), result)\n        self.assertNotIn(('Title', ''), result)\n\n    def test_track_to_mpd_format_with_stream_and_no_track_name(self):\n        track = self.track.replace(name=None)\n        result = translator.track_to_mpd_format(track, stream_title='foo')\n        self.assertNotIn(('Name', ''), result)\n        self.assertIn(('Title', 'foo'), result)\n\n\nclass PlaylistMpdFormatTest(unittest.TestCase):\n\n    def test_mpd_format(self):\n        playlist = Playlist(tracks=[\n            Track(uri='foo', track_no=1),\n            Track(uri='bar', track_no=2),\n            Track(uri='baz', track_no=3)])\n        result = translator.playlist_to_mpd_format(playlist)\n        self.assertEqual(len(result), 3)\n\n    def test_mpd_format_with_range(self):\n        playlist = Playlist(tracks=[\n            Track(uri='foo', track_no=1),\n            Track(uri='bar', track_no=2),\n            Track(uri='baz', track_no=3)])\n        result = translator.playlist_to_mpd_format(playlist, 1, 2)\n        self.assertEqual(len(result), 1)\n        self.assertEqual(dict(result[0])['Track'], 2)\n", "comments": "  noqa  n802    noqa  n802 ", "content": "from __future__ import absolute_import, unicode_literals\n\nimport unittest\n\nfrom mopidy.internal import path\nfrom mopidy.models import Album, Artist, Playlist, TlTrack, Track\nfrom mopidy.mpd import translator\n\n\nclass TrackMpdFormatTest(unittest.TestCase):\n    track = Track(\n        uri='a uri',\n        artists=[Artist(name='an artist')],\n        name='a name',\n        album=Album(\n            name='an album', num_tracks=13,\n            artists=[Artist(name='an other artist')],\n            uri='urischeme:album:12345', images=['image1']),\n        track_no=7,\n        composers=[Artist(name='a composer')],\n        performers=[Artist(name='a performer')],\n        genre='a genre',\n        date='1977-01-01',\n        disc_no=1,\n        comment='a comment',\n        length=137000,\n    )\n\n    def setUp(self):  # noqa: N802\n        self.media_dir = '/dir/subdir'\n        path.mtime.set_fake_time(1234567)\n\n    def tearDown(self):  # noqa: N802\n        path.mtime.undo_fake()\n\n    def test_track_to_mpd_format_for_empty_track(self):\n        result = translator.track_to_mpd_format(\n            Track(uri='a uri', length=137000)\n        )\n        self.assertIn(('file', 'a uri'), result)\n        self.assertIn(('Time', 137), result)\n        self.assertNotIn(('Artist', ''), result)\n        self.assertNotIn(('Title', ''), result)\n        self.assertNotIn(('Album', ''), result)\n        self.assertNotIn(('Track', 0), result)\n        self.assertNotIn(('Date', ''), result)\n        self.assertEqual(len(result), 2)\n\n    def test_track_to_mpd_format_with_position(self):\n        result = translator.track_to_mpd_format(Track(), position=1)\n        self.assertNotIn(('Pos', 1), result)\n\n    def test_track_to_mpd_format_with_tlid(self):\n        result = translator.track_to_mpd_format(TlTrack(1, Track()))\n        self.assertNotIn(('Id', 1), result)\n\n    def test_track_to_mpd_format_with_position_and_tlid(self):\n        result = translator.track_to_mpd_format(\n            TlTrack(2, Track(uri='a uri')), position=1)\n        self.assertIn(('Pos', 1), result)\n        self.assertIn(('Id', 2), result)\n\n    def test_track_to_mpd_format_for_nonempty_track(self):\n        result = translator.track_to_mpd_format(\n            TlTrack(122, self.track), position=9)\n        self.assertIn(('file', 'a uri'), result)\n        self.assertIn(('Time', 137), result)\n        self.assertIn(('Artist', 'an artist'), result)\n        self.assertIn(('Title', 'a name'), result)\n        self.assertIn(('Album', 'an album'), result)\n        self.assertIn(('AlbumArtist', 'an other artist'), result)\n        self.assertIn(('Composer', 'a composer'), result)\n        self.assertIn(('Performer', 'a performer'), result)\n        self.assertIn(('Genre', 'a genre'), result)\n        self.assertIn(('Track', '7/13'), result)\n        self.assertIn(('Date', '1977-01-01'), result)\n        self.assertIn(('Disc', 1), result)\n        self.assertIn(('Pos', 9), result)\n        self.assertIn(('Id', 122), result)\n        self.assertIn(('X-AlbumUri', 'urischeme:album:12345'), result)\n        self.assertIn(('X-AlbumImage', 'image1'), result)\n        self.assertNotIn(('Comment', 'a comment'), result)\n        self.assertEqual(len(result), 16)\n\n    def test_track_to_mpd_format_with_last_modified(self):\n        track = self.track.replace(last_modified=995303899000)\n        result = translator.track_to_mpd_format(track)\n        self.assertIn(('Last-Modified', '2001-07-16T17:18:19Z'), result)\n\n    def test_track_to_mpd_format_with_last_modified_of_zero(self):\n        track = self.track.replace(last_modified=0)\n        result = translator.track_to_mpd_format(track)\n        keys = [k for k, v in result]\n        self.assertNotIn('Last-Modified', keys)\n\n    def test_track_to_mpd_format_musicbrainz_trackid(self):\n        track = self.track.replace(musicbrainz_id='foo')\n        result = translator.track_to_mpd_format(track)\n        self.assertIn(('MUSICBRAINZ_TRACKID', 'foo'), result)\n\n    def test_track_to_mpd_format_musicbrainz_albumid(self):\n        album = self.track.album.replace(musicbrainz_id='foo')\n        track = self.track.replace(album=album)\n        result = translator.track_to_mpd_format(track)\n        self.assertIn(('MUSICBRAINZ_ALBUMID', 'foo'), result)\n\n    def test_track_to_mpd_format_musicbrainz_albumartistid(self):\n        artist = list(self.track.artists)[0].replace(musicbrainz_id='foo')\n        album = self.track.album.replace(artists=[artist])\n        track = self.track.replace(album=album)\n        result = translator.track_to_mpd_format(track)\n        self.assertIn(('MUSICBRAINZ_ALBUMARTISTID', 'foo'), result)\n\n    def test_track_to_mpd_format_musicbrainz_artistid(self):\n        artist = list(self.track.artists)[0].replace(musicbrainz_id='foo')\n        track = self.track.replace(artists=[artist])\n        result = translator.track_to_mpd_format(track)\n        self.assertIn(('MUSICBRAINZ_ARTISTID', 'foo'), result)\n\n    def test_concat_multi_values(self):\n        artists = [Artist(name='ABBA'), Artist(name='Beatles')]\n        translated = translator.concat_multi_values(artists, 'name')\n        self.assertEqual(translated, 'ABBA;Beatles')\n\n    def test_concat_multi_values_artist_with_no_name(self):\n        artists = [Artist(name=None)]\n        translated = translator.concat_multi_values(artists, 'name')\n        self.assertEqual(translated, '')\n\n    def test_concat_multi_values_artist_with_no_musicbrainz_id(self):\n        artists = [Artist(name='Jah Wobble')]\n        translated = translator.concat_multi_values(artists, 'musicbrainz_id')\n        self.assertEqual(translated, '')\n\n    def test_track_to_mpd_format_with_stream_title(self):\n        result = translator.track_to_mpd_format(self.track, stream_title='foo')\n        self.assertIn(('Name', 'a name'), result)\n        self.assertIn(('Title', 'foo'), result)\n\n    def test_track_to_mpd_format_with_empty_stream_title(self):\n        result = translator.track_to_mpd_format(self.track, stream_title='')\n        self.assertIn(('Name', 'a name'), result)\n        self.assertNotIn(('Title', ''), result)\n\n    def test_track_to_mpd_format_with_stream_and_no_track_name(self):\n        track = self.track.replace(name=None)\n        result = translator.track_to_mpd_format(track, stream_title='foo')\n        self.assertNotIn(('Name', ''), result)\n        self.assertIn(('Title', 'foo'), result)\n\n\nclass PlaylistMpdFormatTest(unittest.TestCase):\n\n    def test_mpd_format(self):\n        playlist = Playlist(tracks=[\n            Track(uri='foo', track_no=1),\n            Track(uri='bar', track_no=2),\n            Track(uri='baz', track_no=3)])\n        result = translator.playlist_to_mpd_format(playlist)\n        self.assertEqual(len(result), 3)\n\n    def test_mpd_format_with_range(self):\n        playlist = Playlist(tracks=[\n            Track(uri='foo', track_no=1),\n            Track(uri='bar', track_no=2),\n            Track(uri='baz', track_no=3)])\n        result = translator.playlist_to_mpd_format(playlist, 1, 2)\n        self.assertEqual(len(result), 1)\n        self.assertEqual(dict(result[0])['Track'], 2)\n", "description": "Mopidy is an extensible music server that plays music from local disk, Spotify, SoundCloud, Google Play Music, and more. You edit the playlist from any phone, tablet, or computer using a range of MPD and web clients.", "file_name": "test_translator.py", "id": "3d82cf3e7c37b0c101ce64cd4e1f4d21", "language": "Python", "project_name": "mopidy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mopidy-mopidy/mopidy-mopidy-79d42c3/tests/mpd/test_translator.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:12:51Z", "url": "https://github.com/mopidy/mopidy", "wiki": false}