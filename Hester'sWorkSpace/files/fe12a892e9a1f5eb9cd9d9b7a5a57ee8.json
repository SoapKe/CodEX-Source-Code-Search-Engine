{"author": "ansible", "code": "# -*- coding: utf-8 -*-\n# (c) 2015, Michael Scherer <mscherer@redhat.com>\n# Copyright (c) 2017 Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport json\nimport os.path\n\nimport pytest\n\nfrom ansible.module_utils import known_hosts\n\n\nURLS = {\n    'ssh://one.example.org/example.git': {\n        'is_ssh_url': True,\n        'get_fqdn': 'one.example.org',\n        'add_host_key_cmd': \" -t rsa one.example.org\",\n        'port': None,\n    },\n    'ssh+git://two.example.org/example.git': {\n        'is_ssh_url': True,\n        'get_fqdn': 'two.example.org',\n        'add_host_key_cmd': \" -t rsa two.example.org\",\n        'port': None,\n    },\n    'rsync://three.example.org/user/example.git': {\n        'is_ssh_url': False,\n        'get_fqdn': 'three.example.org',\n        'add_host_key_cmd': None,  \n        'port': None,\n    },\n    'git@four.example.org:user/example.git': {\n        'is_ssh_url': True,\n        'get_fqdn': 'four.example.org',\n        'add_host_key_cmd': \" -t rsa four.example.org\",\n        'port': None,\n    },\n    'git+ssh://five.example.org/example.git': {\n        'is_ssh_url': True,\n        'get_fqdn': 'five.example.org',\n        'add_host_key_cmd': \" -t rsa five.example.org\",\n        'port': None,\n    },\n    'ssh://six.example.org:21/example.org': {\n        ?\n        'is_ssh_url': True,\n        'get_fqdn': 'six.example.org',\n        'add_host_key_cmd': \" -t rsa -p 21 six.example.org\",\n        'port': '21',\n    },\n    'ssh://[2001:DB8::abcd:abcd]/example.git': {\n        'is_ssh_url': True,\n        'get_fqdn': '[2001:DB8::abcd:abcd]',\n        'add_host_key_cmd': \" -t rsa [2001:DB8::abcd:abcd]\",\n        'port': None,\n    },\n    'ssh://[2001:DB8::abcd:abcd]:22/example.git': {\n        'is_ssh_url': True,\n        'get_fqdn': '[2001:DB8::abcd:abcd]',\n        'add_host_key_cmd': \" -t rsa -p 22 [2001:DB8::abcd:abcd]\",\n        'port': '22',\n    },\n    'username@[2001:DB8::abcd:abcd]/example.git': {\n        'is_ssh_url': True,\n        'get_fqdn': '[2001:DB8::abcd:abcd]',\n        'add_host_key_cmd': \" -t rsa [2001:DB8::abcd:abcd]\",\n        'port': None,\n    },\n    'username@[2001:DB8::abcd:abcd]:path/example.git': {\n        'is_ssh_url': True,\n        'get_fqdn': '[2001:DB8::abcd:abcd]',\n        'add_host_key_cmd': \" -t rsa [2001:DB8::abcd:abcd]\",\n        'port': None,\n    },\n    'ssh://internal.git.server:7999/repos/repo.git': {\n        'is_ssh_url': True,\n        'get_fqdn': 'internal.git.server',\n        'add_host_key_cmd': \" -t rsa -p 7999 internal.git.server\",\n        'port': '7999',\n    },\n}\n\n\n@pytest.mark.parametrize('url, is_ssh_url', ((k, v['is_ssh_url']) for k, v in URLS.items()))\ndef test_is_ssh_url(url, is_ssh_url):\n    assert known_hosts.is_ssh_url(url) == is_ssh_url\n\n\n@pytest.mark.parametrize('url, fqdn, port', ((k, v['get_fqdn'], v['port']) for k, v in URLS.items()))\ndef test_get_fqdn_and_port(url, fqdn, port):\n    assert known_hosts.get_fqdn_and_port(url) == (fqdn, port)\n\n\n@pytest.mark.parametrize('fqdn, port, add_host_key_cmd, stdin',\n                         ((v['get_fqdn'], v['port'], v['add_host_key_cmd'], {})\n                          for v in URLS.values() if v['is_ssh_url']),\n                         indirect=['stdin'])\ndef test_add_host_key(am, mocker, fqdn, port, add_host_key_cmd):\n    get_bin_path = mocker.MagicMock()\n    get_bin_path.return_value = keyscan_cmd = \"/custom/path/ssh-keyscan\"\n    am.get_bin_path = get_bin_path\n\n    run_command = mocker.MagicMock()\n    run_command.return_value = (0, \"Needs output, otherwise thinks ssh-keyscan timed out'\", \"\")\n    am.run_command = run_command\n\n    append_to_file = mocker.MagicMock()\n    append_to_file.return_value = (None,)\n    am.append_to_file = append_to_file\n\n    mocker.patch('os.path.isdir', return_value=True)\n    mocker.patch('os.path.exists', return_value=True)\n\n    known_hosts.add_host_key(am, fqdn, port=port)\n    run_command.assert_called_with(keyscan_cmd + add_host_key_cmd)\n", "comments": "      coding  utf 8        (c) 2015  michael scherer  mscherer redhat com     copyright (c) 2017 ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    called non ssh urls    ssh ftp port  ", "content": "# -*- coding: utf-8 -*-\n# (c) 2015, Michael Scherer <mscherer@redhat.com>\n# Copyright (c) 2017 Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport json\nimport os.path\n\nimport pytest\n\nfrom ansible.module_utils import known_hosts\n\n\nURLS = {\n    'ssh://one.example.org/example.git': {\n        'is_ssh_url': True,\n        'get_fqdn': 'one.example.org',\n        'add_host_key_cmd': \" -t rsa one.example.org\",\n        'port': None,\n    },\n    'ssh+git://two.example.org/example.git': {\n        'is_ssh_url': True,\n        'get_fqdn': 'two.example.org',\n        'add_host_key_cmd': \" -t rsa two.example.org\",\n        'port': None,\n    },\n    'rsync://three.example.org/user/example.git': {\n        'is_ssh_url': False,\n        'get_fqdn': 'three.example.org',\n        'add_host_key_cmd': None,  # not called for non-ssh urls\n        'port': None,\n    },\n    'git@four.example.org:user/example.git': {\n        'is_ssh_url': True,\n        'get_fqdn': 'four.example.org',\n        'add_host_key_cmd': \" -t rsa four.example.org\",\n        'port': None,\n    },\n    'git+ssh://five.example.org/example.git': {\n        'is_ssh_url': True,\n        'get_fqdn': 'five.example.org',\n        'add_host_key_cmd': \" -t rsa five.example.org\",\n        'port': None,\n    },\n    'ssh://six.example.org:21/example.org': {\n        # ssh on FTP Port?\n        'is_ssh_url': True,\n        'get_fqdn': 'six.example.org',\n        'add_host_key_cmd': \" -t rsa -p 21 six.example.org\",\n        'port': '21',\n    },\n    'ssh://[2001:DB8::abcd:abcd]/example.git': {\n        'is_ssh_url': True,\n        'get_fqdn': '[2001:DB8::abcd:abcd]',\n        'add_host_key_cmd': \" -t rsa [2001:DB8::abcd:abcd]\",\n        'port': None,\n    },\n    'ssh://[2001:DB8::abcd:abcd]:22/example.git': {\n        'is_ssh_url': True,\n        'get_fqdn': '[2001:DB8::abcd:abcd]',\n        'add_host_key_cmd': \" -t rsa -p 22 [2001:DB8::abcd:abcd]\",\n        'port': '22',\n    },\n    'username@[2001:DB8::abcd:abcd]/example.git': {\n        'is_ssh_url': True,\n        'get_fqdn': '[2001:DB8::abcd:abcd]',\n        'add_host_key_cmd': \" -t rsa [2001:DB8::abcd:abcd]\",\n        'port': None,\n    },\n    'username@[2001:DB8::abcd:abcd]:path/example.git': {\n        'is_ssh_url': True,\n        'get_fqdn': '[2001:DB8::abcd:abcd]',\n        'add_host_key_cmd': \" -t rsa [2001:DB8::abcd:abcd]\",\n        'port': None,\n    },\n    'ssh://internal.git.server:7999/repos/repo.git': {\n        'is_ssh_url': True,\n        'get_fqdn': 'internal.git.server',\n        'add_host_key_cmd': \" -t rsa -p 7999 internal.git.server\",\n        'port': '7999',\n    },\n}\n\n\n@pytest.mark.parametrize('url, is_ssh_url', ((k, v['is_ssh_url']) for k, v in URLS.items()))\ndef test_is_ssh_url(url, is_ssh_url):\n    assert known_hosts.is_ssh_url(url) == is_ssh_url\n\n\n@pytest.mark.parametrize('url, fqdn, port', ((k, v['get_fqdn'], v['port']) for k, v in URLS.items()))\ndef test_get_fqdn_and_port(url, fqdn, port):\n    assert known_hosts.get_fqdn_and_port(url) == (fqdn, port)\n\n\n@pytest.mark.parametrize('fqdn, port, add_host_key_cmd, stdin',\n                         ((v['get_fqdn'], v['port'], v['add_host_key_cmd'], {})\n                          for v in URLS.values() if v['is_ssh_url']),\n                         indirect=['stdin'])\ndef test_add_host_key(am, mocker, fqdn, port, add_host_key_cmd):\n    get_bin_path = mocker.MagicMock()\n    get_bin_path.return_value = keyscan_cmd = \"/custom/path/ssh-keyscan\"\n    am.get_bin_path = get_bin_path\n\n    run_command = mocker.MagicMock()\n    run_command.return_value = (0, \"Needs output, otherwise thinks ssh-keyscan timed out'\", \"\")\n    am.run_command = run_command\n\n    append_to_file = mocker.MagicMock()\n    append_to_file.return_value = (None,)\n    am.append_to_file = append_to_file\n\n    mocker.patch('os.path.isdir', return_value=True)\n    mocker.patch('os.path.exists', return_value=True)\n\n    known_hosts.add_host_key(am, fqdn, port=port)\n    run_command.assert_called_with(keyscan_cmd + add_host_key_cmd)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_known_hosts.py", "id": "fe12a892e9a1f5eb9cd9d9b7a5a57ee8", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/module_utils/test_known_hosts.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}