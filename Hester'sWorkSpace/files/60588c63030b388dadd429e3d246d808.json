{"author": "odoo", "code": "# -*- coding:utf-8 -*-\n\n\nfrom odoo import api, fields, models\n\n\nclass HrContract(models.Model):\n    _inherit = 'hr.contract'\n\n    car_id = fields.Many2one('fleet.vehicle', string='Company Car',\n        domain=lambda self: self._get_available_cars_domain(),\n        default=lambda self: self.env['fleet.vehicle'].search([('driver_id', '=', self.employee_id.address_home_id.id)], limit=1),\n        help=\"Employee's company car.\")\n    car_atn = fields.Float(compute='_compute_car_atn_and_costs', string='ATN Company Car', store=True)\n    company_car_total_depreciated_cost = fields.Float(compute='_compute_car_atn_and_costs', store=True)\n    available_cars_amount = fields.Integer(compute='_compute_available_cars_amount', string='Number of available cars')\n    new_car = fields.Boolean('Request a new car')\n    new_car_model_id = fields.Many2one('fleet.vehicle.model', string=\"Model\", domain=lambda self: self._get_possible_model_domain())\n    max_unused_cars = fields.Integer(compute='_compute_max_unused_cars')\n\n    @api.depends('car_id', 'new_car', 'new_car_model_id')\n    def _compute_car_atn_and_costs(self):\n        for contract in self:\n            if not contract.new_car and contract.car_id:\n                contract.car_atn = contract.car_id.atn\n                contract.company_car_total_depreciated_cost = contract.car_id.total_depreciated_cost\n            elif contract.new_car and contract.new_car_model_id:\n                contract.car_atn = contract.new_car_model_id.default_atn\n                contract.company_car_total_depreciated_cost = contract.new_car_model_id.default_total_depreciated_cost\n\n    @api.depends('name')\n    def _compute_available_cars_amount(self):\n        for contract in self:\n            contract.available_cars_amount = self.env['fleet.vehicle'].search_count([('driver_id', '=', False)])\n\n    @api.depends('name')\n    def _compute_max_unused_cars(self):\n        params = self.env['ir.config_parameter'].sudo()\n        max_unused_cars = params.get_param('l10n_be_hr_payroll_fleet.max_unused_cars', default=1000)\n        for contract in self:\n            contract.max_unused_cars = int(max_unused_cars)\n\n    @api.onchange('employee_id')\n    def _onchange_employee_id(self):\n        super(HrContract, self)._onchange_employee_id()\n        self.car_id = self.env['fleet.vehicle'].search([('driver_id', '=', self.employee_id.address_home_id.id)], limit=1)\n        return {'domain': {'car_id': self._get_available_cars_domain()}}\n\n    @api.onchange('transport_mode')\n    def _onchange_transport_mode(self):\n        super(HrContract, self)._onchange_transport_mode()\n        if self.transport_mode != 'company_car':\n            self.car_id = False\n            self.new_car_model_id = False\n\n    def _get_available_cars_domain(self):\n        return ['|', ('driver_id', '=', False), ('driver_id', '=', self.employee_id.address_home_id.id)]\n\n    def _get_possible_model_domain(self):\n        return [('can_be_requested', '=', True)]\n", "comments": "      coding utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding:utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models\n\n\nclass HrContract(models.Model):\n    _inherit = 'hr.contract'\n\n    car_id = fields.Many2one('fleet.vehicle', string='Company Car',\n        domain=lambda self: self._get_available_cars_domain(),\n        default=lambda self: self.env['fleet.vehicle'].search([('driver_id', '=', self.employee_id.address_home_id.id)], limit=1),\n        help=\"Employee's company car.\")\n    car_atn = fields.Float(compute='_compute_car_atn_and_costs', string='ATN Company Car', store=True)\n    company_car_total_depreciated_cost = fields.Float(compute='_compute_car_atn_and_costs', store=True)\n    available_cars_amount = fields.Integer(compute='_compute_available_cars_amount', string='Number of available cars')\n    new_car = fields.Boolean('Request a new car')\n    new_car_model_id = fields.Many2one('fleet.vehicle.model', string=\"Model\", domain=lambda self: self._get_possible_model_domain())\n    max_unused_cars = fields.Integer(compute='_compute_max_unused_cars')\n\n    @api.depends('car_id', 'new_car', 'new_car_model_id')\n    def _compute_car_atn_and_costs(self):\n        for contract in self:\n            if not contract.new_car and contract.car_id:\n                contract.car_atn = contract.car_id.atn\n                contract.company_car_total_depreciated_cost = contract.car_id.total_depreciated_cost\n            elif contract.new_car and contract.new_car_model_id:\n                contract.car_atn = contract.new_car_model_id.default_atn\n                contract.company_car_total_depreciated_cost = contract.new_car_model_id.default_total_depreciated_cost\n\n    @api.depends('name')\n    def _compute_available_cars_amount(self):\n        for contract in self:\n            contract.available_cars_amount = self.env['fleet.vehicle'].search_count([('driver_id', '=', False)])\n\n    @api.depends('name')\n    def _compute_max_unused_cars(self):\n        params = self.env['ir.config_parameter'].sudo()\n        max_unused_cars = params.get_param('l10n_be_hr_payroll_fleet.max_unused_cars', default=1000)\n        for contract in self:\n            contract.max_unused_cars = int(max_unused_cars)\n\n    @api.onchange('employee_id')\n    def _onchange_employee_id(self):\n        super(HrContract, self)._onchange_employee_id()\n        self.car_id = self.env['fleet.vehicle'].search([('driver_id', '=', self.employee_id.address_home_id.id)], limit=1)\n        return {'domain': {'car_id': self._get_available_cars_domain()}}\n\n    @api.onchange('transport_mode')\n    def _onchange_transport_mode(self):\n        super(HrContract, self)._onchange_transport_mode()\n        if self.transport_mode != 'company_car':\n            self.car_id = False\n            self.new_car_model_id = False\n\n    def _get_available_cars_domain(self):\n        return ['|', ('driver_id', '=', False), ('driver_id', '=', self.employee_id.address_home_id.id)]\n\n    def _get_possible_model_domain(self):\n        return [('can_be_requested', '=', True)]\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "hr_contract.py", "id": "60588c63030b388dadd429e3d246d808", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/l10n_be_hr_payroll_fleet/models/hr_contract.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}