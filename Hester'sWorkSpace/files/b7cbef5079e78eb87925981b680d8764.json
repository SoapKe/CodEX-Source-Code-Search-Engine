{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo import models, fields, api\n\n\nclass IrModelFields(models.Model):\n    _inherit = 'ir.model.fields'\n\n    ttype = fields.Selection(selection_add=[('serialized', 'serialized')])\n    serialization_field_id = fields.Many2one('ir.model.fields', string='Serialization Field',\n        ondelete='cascade', domain=\"[('ttype','=','serialized')]\",\n        help=\"If set, this field will be stored in the sparse structure of the \"\n             \"serialization field, instead of having its own database column. \"\n             \"This cannot be changed after creation.\",\n    )\n\n    @api.multi\n    def write(self, vals):\n        \n        \n        if 'serialization_field_id' in vals or 'name' in vals:\n            for field in self:\n                if 'serialization_field_id' in vals and field.serialization_field_id.id != vals['serialization_field_id']:\n                    raise UserError(_('Changing the storing system for field \"%s\" is not allowed.') % field.name)\n                if field.serialization_field_id and (field.name != vals['name']):\n                    raise UserError(_('Renaming sparse field \"%s\" is not allowed') % field.name)\n\n        return super(IrModelFields, self).write(vals)\n\n    def _reflect_field_params(self, field):\n        params = super(IrModelFields, self)._reflect_field_params(field)\n\n        params['serialization_field_id'] = None\n        if getattr(field, 'sparse', None):\n            model = self.env[field.model_name]\n            serialization_field = model._fields.get(field.sparse)\n            if serialization_field is None:\n                raise UserError(_(\"Serialization field `%s` not found for sparse field `%s`!\") % (field.sparse, field.name))\n            serialization_record = self._reflect_field(serialization_field)\n            params['serialization_field_id'] = serialization_record.id\n\n        return params\n\n    def _instanciate_attrs(self, field_data):\n        attrs = super(IrModelFields, self)._instanciate_attrs(field_data)\n        if field_data.get('serialization_field_id'):\n            serialization_record = self.browse(field_data['serialization_field_id'])\n            attrs['sparse'] = serialization_record.name\n        return attrs\n\n\nclass TestSparse(models.TransientModel):\n    _name = 'sparse_fields.test'\n\n    data = fields.Serialized()\n    boolean = fields.Boolean(sparse='data')\n    integer = fields.Integer(sparse='data')\n    float = fields.Float(sparse='data')\n    char = fields.Char(sparse='data')\n    selection = fields.Selection([('one', 'One'), ('two', 'Two')], sparse='data')\n    partner = fields.Many2one('res.partner', sparse='data')\n", "comments": "      coding  utf 8        limitation  renaming sparse field changing storing system    currently allowed ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo import models, fields, api\n\n\nclass IrModelFields(models.Model):\n    _inherit = 'ir.model.fields'\n\n    ttype = fields.Selection(selection_add=[('serialized', 'serialized')])\n    serialization_field_id = fields.Many2one('ir.model.fields', string='Serialization Field',\n        ondelete='cascade', domain=\"[('ttype','=','serialized')]\",\n        help=\"If set, this field will be stored in the sparse structure of the \"\n             \"serialization field, instead of having its own database column. \"\n             \"This cannot be changed after creation.\",\n    )\n\n    @api.multi\n    def write(self, vals):\n        # Limitation: renaming a sparse field or changing the storing system is\n        # currently not allowed\n        if 'serialization_field_id' in vals or 'name' in vals:\n            for field in self:\n                if 'serialization_field_id' in vals and field.serialization_field_id.id != vals['serialization_field_id']:\n                    raise UserError(_('Changing the storing system for field \"%s\" is not allowed.') % field.name)\n                if field.serialization_field_id and (field.name != vals['name']):\n                    raise UserError(_('Renaming sparse field \"%s\" is not allowed') % field.name)\n\n        return super(IrModelFields, self).write(vals)\n\n    def _reflect_field_params(self, field):\n        params = super(IrModelFields, self)._reflect_field_params(field)\n\n        params['serialization_field_id'] = None\n        if getattr(field, 'sparse', None):\n            model = self.env[field.model_name]\n            serialization_field = model._fields.get(field.sparse)\n            if serialization_field is None:\n                raise UserError(_(\"Serialization field `%s` not found for sparse field `%s`!\") % (field.sparse, field.name))\n            serialization_record = self._reflect_field(serialization_field)\n            params['serialization_field_id'] = serialization_record.id\n\n        return params\n\n    def _instanciate_attrs(self, field_data):\n        attrs = super(IrModelFields, self)._instanciate_attrs(field_data)\n        if field_data.get('serialization_field_id'):\n            serialization_record = self.browse(field_data['serialization_field_id'])\n            attrs['sparse'] = serialization_record.name\n        return attrs\n\n\nclass TestSparse(models.TransientModel):\n    _name = 'sparse_fields.test'\n\n    data = fields.Serialized()\n    boolean = fields.Boolean(sparse='data')\n    integer = fields.Integer(sparse='data')\n    float = fields.Float(sparse='data')\n    char = fields.Char(sparse='data')\n    selection = fields.Selection([('one', 'One'), ('two', 'Two')], sparse='data')\n    partner = fields.Many2one('res.partner', sparse='data')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "models.py", "id": "b7cbef5079e78eb87925981b680d8764", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/base_sparse_field/models/models.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}