{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_str,\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    find_xpath_attr,\n    get_element_by_attribute,\n    int_or_none,\n    NO_DEFAULT,\n    qualities,\n    try_get,\n    unified_strdate,\n)\n\n\n\n\n\n\nclass ArteTvIE(InfoExtractor):\n    _VALID_URL = r'https?://videos\\.arte\\.tv/(?P<lang>fr|de|en|es)/.*-(?P<id>.*?)\\.html'\n    IE_NAME = 'arte.tv'\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        lang = mobj.group('lang')\n        video_id = mobj.group('id')\n\n        ref_xml_url = url.replace('/videos/', '/do_delegate/videos/')\n        ref_xml_url = ref_xml_url.replace('.html', ',view,asPlayerXml.xml')\n        ref_xml_doc = self._download_xml(\n            ref_xml_url, video_id, note='Downloading metadata')\n        config_node = find_xpath_attr(ref_xml_doc, './/video', 'lang', lang)\n        config_xml_url = config_node.attrib['ref']\n        config = self._download_xml(\n            config_xml_url, video_id, note='Downloading configuration')\n\n        formats = [{\n            'format_id': q.attrib['quality'],\n            \n            \n            'url': q.text.split('mp4:', 1)[0],\n            'play_path': 'mp4:' + q.text.split('mp4:', 1)[1],\n            'ext': 'flv',\n            'quality': 2 if q.attrib['quality'] == 'hd' else 1,\n        } for q in config.findall('./urls/url')]\n        self._sort_formats(formats)\n\n        title = config.find('.//name').text\n        thumbnail = config.find('.//firstThumbnailUrl').text\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n\n\nclass ArteTVBaseIE(InfoExtractor):\n    @classmethod\n    def _extract_url_info(cls, url):\n        mobj = re.match(cls._VALID_URL, url)\n        lang = mobj.group('lang')\n        query = compat_parse_qs(compat_urllib_parse_urlparse(url).query)\n        if 'vid' in query:\n            video_id = query['vid'][0]\n        else:\n            \n            \n            video_id = mobj.group('id')\n        return video_id, lang\n\n    def _extract_from_json_url(self, json_url, video_id, lang, title=None):\n        info = self._download_json(json_url, video_id)\n        player_info = info['videoJsonPlayer']\n\n        vsr = try_get(player_info, lambda x: x['VSR'], dict)\n        if not vsr:\n            error = None\n            if try_get(player_info, lambda x: x['custom_msg']['type']) == 'error':\n                error = try_get(\n                    player_info, lambda x: x['custom_msg']['msg'], compat_str)\n            if not error:\n                error = 'Video %s is not available' % player_info.get('VID') or video_id\n            raise ExtractorError(error, expected=True)\n\n        upload_date_str = player_info.get('shootingDate')\n        if not upload_date_str:\n            upload_date_str = (player_info.get('VRA') or player_info.get('VDA') or '').split(' ')[0]\n\n        title = (player_info.get('VTI') or title or player_info['VID']).strip()\n        subtitle = player_info.get('VSU', '').strip()\n        if subtitle:\n            title += ' - %s' % subtitle\n\n        info_dict = {\n            'id': player_info['VID'],\n            'title': title,\n            'description': player_info.get('VDE'),\n            'upload_date': unified_strdate(upload_date_str),\n            'thumbnail': player_info.get('programImage') or player_info.get('VTU', {}).get('IUR'),\n        }\n        qfunc = qualities(['HQ', 'MQ', 'EQ', 'SQ'])\n\n        LANGS = {\n            'fr': 'F',\n            'de': 'A',\n            'en': 'E[ANG]',\n            'es': 'E[ESP]',\n        }\n\n        langcode = LANGS.get(lang, lang)\n\n        formats = []\n        for format_id, format_dict in vsr.items():\n            f = dict(format_dict)\n            versionCode = f.get('versionCode')\n            l = re.escape(langcode)\n\n            \n            \n            \n            PREFERENCES = (\n                \n                r'VO{0}$'.format(l),\n                \n                r'VO{0}-ST{0}$'.format(l),\n                \n                r'VO{0}-STM{0}$'.format(l),\n                \n                r'V{0}$'.format(l),\n                \n                r'V{0}-ST{0}$'.format(l),\n                \n                r'V{0}-STM{0}$'.format(l),\n                \n                r'VO{0}-ST(?!{0}).+?$'.format(l),\n                \n                r'VO{0}-STM(?!{0}).+?$'.format(l),\n                \n                r'VO(?:(?!{0}).+?)?-ST{0}$'.format(l),\n                \n                r'VO(?:(?!{0}).+?)?-STM{0}$'.format(l),\n                \n                r'VO(?:(?!{0}))?$'.format(l),\n                \n                r'VO(?:(?!{0}).+?)?-ST(?!{0}).+?$'.format(l),\n                \n                r'VO(?:(?!{0}).+?)?-STM(?!{0}).+?$'.format(l),\n            )\n\n            for pref, p in enumerate(PREFERENCES):\n                if re.match(p, versionCode):\n                    lang_pref = len(PREFERENCES) - pref\n                    break\n            else:\n                lang_pref = -1\n\n            format = {\n                'format_id': format_id,\n                'preference': -10 if f.get('videoFormat') == 'M3U8' else None,\n                'language_preference': lang_pref,\n                'format_note': '%s, %s' % (f.get('versionCode'), f.get('versionLibelle')),\n                'width': int_or_none(f.get('width')),\n                'height': int_or_none(f.get('height')),\n                'tbr': int_or_none(f.get('bitrate')),\n                'quality': qfunc(f.get('quality')),\n            }\n\n            if f.get('mediaType') == 'rtmp':\n                format['url'] = f['streamer']\n                format['play_path'] = 'mp4:' + f['url']\n                format['ext'] = 'flv'\n            else:\n                format['url'] = f['url']\n\n            formats.append(format)\n\n        self._check_formats(formats, video_id)\n        self._sort_formats(formats)\n\n        info_dict['formats'] = formats\n        return info_dict\n\n\nclass ArteTVPlus7IE(ArteTVBaseIE):\n    IE_NAME = 'arte.tv:+7'\n    _VALID_URL = r'https?://(?:(?:www|sites)\\.)?arte\\.tv/(?:[^/]+/)?(?P<lang>fr|de|en|es)/(?:videos/)?(?:[^/]+/)*(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'http://www.arte.tv/guide/de/sendungen/XEN/xenius/?vid=055918-015_PLUS7-D',\n        'only_matching': True,\n    }, {\n        'url': 'http://sites.arte.tv/karambolage/de/video/karambolage-22',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.arte.tv/de/videos/048696-000-A/der-kluge-bauch-unser-zweites-gehirn',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if ArteTVPlaylistIE.suitable(url) else super(ArteTVPlus7IE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        video_id, lang = self._extract_url_info(url)\n        webpage = self._download_webpage(url, video_id)\n        return self._extract_from_webpage(webpage, video_id, lang)\n\n    def _extract_from_webpage(self, webpage, video_id, lang):\n        patterns_templates = (r'arte_vp_url=[\"\\'](.*?%s.*?)[\"\\']', r'data-url=[\"\\']([^\"]+%s[^\"]+)[\"\\']')\n        ids = (video_id, '')\n        \n        \n        \n        \n        patterns = [t % re.escape(_id) for _id in ids for t in patterns_templates]\n        json_url = self._html_search_regex(\n            patterns, webpage, 'json vp url', default=None)\n        if not json_url:\n            def find_iframe_url(webpage, default=NO_DEFAULT):\n                return self._html_search_regex(\n                    r'<iframe[^>]+src=([\"\\'])(?P<url>.+\\bjson_url=.+?)\\1',\n                    webpage, 'iframe url', group='url', default=default)\n\n            iframe_url = find_iframe_url(webpage, None)\n            if not iframe_url:\n                embed_url = self._html_search_regex(\n                    r'arte_vp_url_oembed=\\'([^\\']+?)\\'', webpage, 'embed url', default=None)\n                if embed_url:\n                    player = self._download_json(\n                        embed_url, video_id, 'Downloading player page')\n                    iframe_url = find_iframe_url(player['html'])\n            \n            \n            if not iframe_url:\n                program = self._search_regex(\n                    r'program\\s*:\\s*({.+?[\"\\']embed_html[\"\\'].+?}),?\\s*\\n',\n                    webpage, 'program', default=None)\n                if program:\n                    embed_html = self._parse_json(program, video_id)\n                    if embed_html:\n                        iframe_url = find_iframe_url(embed_html['embed_html'])\n            if iframe_url:\n                json_url = compat_parse_qs(\n                    compat_urllib_parse_urlparse(iframe_url).query)['json_url'][0]\n        if json_url:\n            title = self._search_regex(\n                r'<h3[^>]+title=([\"\\'])(?P<title>.+?)\\1',\n                webpage, 'title', default=None, group='title')\n            return self._extract_from_json_url(json_url, video_id, lang, title=title)\n        \n        \n        entries = [\n            self.url_result(url)\n            for _, url in re.findall(r'<iframe[^>]+src=([\"\\'])(?P<url>.+?)\\1', webpage)]\n        return self.playlist_result(entries)\n\n\n\nclass ArteTVCreativeIE(ArteTVPlus7IE):\n    IE_NAME = 'arte.tv:creative'\n    _VALID_URL = r'https?://creative\\.arte\\.tv/(?P<lang>fr|de|en|es)/(?:[^/]+/)*(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'http://creative.arte.tv/fr/episode/osmosis-episode-1',\n        'info_dict': {\n            'id': '057405-001-A',\n            'ext': 'mp4',\n            'title': 'OSMOSIS - N\\'AYEZ PLUS PEUR D\\'AIMER (1)',\n            'upload_date': '20150716',\n        },\n    }, {\n        'url': 'http://creative.arte.tv/fr/Monty-Python-Reunion',\n        'playlist_count': 11,\n        'add_ie': ['Youtube'],\n    }, {\n        'url': 'http://creative.arte.tv/de/episode/agentur-amateur-4-der-erste-kunde',\n        'only_matching': True,\n    }]\n\n\nclass ArteTVInfoIE(ArteTVPlus7IE):\n    IE_NAME = 'arte.tv:info'\n    _VALID_URL = r'https?://info\\.arte\\.tv/(?P<lang>fr|de|en|es)/(?:[^/]+/)*(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'http://info.arte.tv/fr/service-civique-un-cache-misere',\n        'info_dict': {\n            'id': '067528-000-A',\n            'ext': 'mp4',\n            'title': 'Service civique, un cache mis\u00e8re ?',\n            'upload_date': '20160403',\n        },\n    }]\n\n\nclass ArteTVFutureIE(ArteTVPlus7IE):\n    IE_NAME = 'arte.tv:future'\n    _VALID_URL = r'https?://future\\.arte\\.tv/(?P<lang>fr|de|en|es)/(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'http://future.arte.tv/fr/info-sciences/les-ecrevisses-aussi-sont-anxieuses',\n        'info_dict': {\n            'id': '050940-028-A',\n            'ext': 'mp4',\n            'title': 'Les \u00e9crevisses aussi peuvent \u00eatre anxieuses',\n            'upload_date': '20140902',\n        },\n    }, {\n        'url': 'http://future.arte.tv/fr/la-science-est-elle-responsable',\n        'only_matching': True,\n    }]\n\n\nclass ArteTVDDCIE(ArteTVPlus7IE):\n    IE_NAME = 'arte.tv:ddc'\n    _VALID_URL = r'https?://ddc\\.arte\\.tv/(?P<lang>emission|folge)/(?P<id>[^/?\n\n    _TESTS = []\n\n    def _real_extract(self, url):\n        video_id, lang = self._extract_url_info(url)\n        if lang == 'folge':\n            lang = 'de'\n        elif lang == 'emission':\n            lang = 'fr'\n        webpage = self._download_webpage(url, video_id)\n        scriptElement = get_element_by_attribute('class', 'visu_video_block', webpage)\n        script_url = self._html_search_regex(r'src=\"(.*?)\"', scriptElement, 'script url')\n        javascriptPlayerGenerator = self._download_webpage(script_url, video_id, 'Download javascript player generator')\n        json_url = self._search_regex(r\"json_url=(.*)&rendering_place.*\", javascriptPlayerGenerator, 'json url')\n        return self._extract_from_json_url(json_url, video_id, lang)\n\n\nclass ArteTVConcertIE(ArteTVPlus7IE):\n    IE_NAME = 'arte.tv:concert'\n    _VALID_URL = r'https?://concert\\.arte\\.tv/(?P<lang>fr|de|en|es)/(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'http://concert.arte.tv/de/notwist-im-pariser-konzertclub-divan-du-monde',\n        'md5': '9ea035b7bd69696b67aa2ccaaa218161',\n        'info_dict': {\n            'id': '186',\n            'ext': 'mp4',\n            'title': 'The Notwist im Pariser Konzertclub \"Divan du Monde\"',\n            'upload_date': '20140128',\n            'description': 'md5:486eb08f991552ade77439fe6d82c305',\n        },\n    }]\n\n\nclass ArteTVCinemaIE(ArteTVPlus7IE):\n    IE_NAME = 'arte.tv:cinema'\n    _VALID_URL = r'https?://cinema\\.arte\\.tv/(?P<lang>fr|de|en|es)/(?P<id>.+)'\n\n    _TESTS = [{\n        'url': 'http://cinema.arte.tv/fr/article/les-ailes-du-desir-de-julia-reck',\n        'md5': 'a5b9dd5575a11d93daf0e3f404f45438',\n        'info_dict': {\n            'id': '062494-000-A',\n            'ext': 'mp4',\n            'title': 'Film laur\u00e9at du concours web - \"Les ailes du d\u00e9sir\" de Julia Reck',\n            'upload_date': '20150807',\n        },\n    }]\n\n\nclass ArteTVMagazineIE(ArteTVPlus7IE):\n    IE_NAME = 'arte.tv:magazine'\n    _VALID_URL = r'https?://(?:www\\.)?arte\\.tv/magazine/[^/]+/(?P<lang>fr|de|en|es)/(?P<id>[^/?\n\n    _TESTS = [{\n        \n        'url': 'http://www.arte.tv/magazine/trepalium/fr/entretien-avec-le-realisateur-vincent-lannoo-trepalium',\n        'md5': '2a9369bcccf847d1c741e51416299f25',\n        'info_dict': {\n            'id': '065965-000-A',\n            'ext': 'mp4',\n            'title': 'Trepalium - Extrait Ep.01',\n            'upload_date': '20160121',\n        },\n    }, {\n        \n        'url': 'http://www.arte.tv/magazine/trepalium/fr/episode-0406-replay-trepalium',\n        'md5': 'fedc64fc7a946110fe311634e79782ca',\n        'info_dict': {\n            'id': '054813-004_PLUS7-F',\n            'ext': 'mp4',\n            'title': 'Trepalium (4/6)',\n            'description': 'md5:10057003c34d54e95350be4f9b05cb40',\n            'upload_date': '20160218',\n        },\n    }, {\n        'url': 'http://www.arte.tv/magazine/metropolis/de/frank-woeste-german-paris-metropolis',\n        'only_matching': True,\n    }]\n\n\nclass ArteTVEmbedIE(ArteTVPlus7IE):\n    IE_NAME = 'arte.tv:embed'\n    _VALID_URL = r\n\n    _TESTS = []\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        lang = mobj.group('lang')\n        json_url = mobj.group('json_url')\n        return self._extract_from_json_url(json_url, video_id, lang)\n\n\nclass TheOperaPlatformIE(ArteTVPlus7IE):\n    IE_NAME = 'theoperaplatform'\n    _VALID_URL = r'https?://(?:www\\.)?theoperaplatform\\.eu/(?P<lang>fr|de|en|es)/(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'http://www.theoperaplatform.eu/de/opera/verdi-otello',\n        'md5': '970655901fa2e82e04c00b955e9afe7b',\n        'info_dict': {\n            'id': '060338-009-A',\n            'ext': 'mp4',\n            'title': 'Verdi - OTELLO',\n            'upload_date': '20160927',\n        },\n    }]\n\n\nclass ArteTVPlaylistIE(ArteTVBaseIE):\n    IE_NAME = 'arte.tv:playlist'\n    _VALID_URL = r'https?://(?:www\\.)?arte\\.tv/guide/(?P<lang>fr|de|en|es)/[^\n\n    _TESTS = [{\n        'url': 'http://www.arte.tv/guide/de/plus7/?country=DE\n        'info_dict': {\n            'id': 'PL-013263',\n            'title': 'Areva & Uramin',\n            'description': 'md5:a1dc0312ce357c262259139cfd48c9bf',\n        },\n        'playlist_mincount': 6,\n    }, {\n        'url': 'http://www.arte.tv/guide/de/playlists?country=DE\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        playlist_id, lang = self._extract_url_info(url)\n        collection = self._download_json(\n            'https://api.arte.tv/api/player/v1/collectionData/%s/%s?source=videos'\n            % (lang, playlist_id), playlist_id)\n        title = collection.get('title')\n        description = collection.get('shortDescription') or collection.get('teaserText')\n        entries = [\n            self._extract_from_json_url(\n                video['jsonUrl'], video.get('programId') or playlist_id, lang)\n            for video in collection['videos'] if video.get('jsonUrl')]\n        return self.playlist_result(entries, playlist_id, title, description)\n", "comments": "(?x)\n        http://www\\.arte\\.tv\n        /(?:playerv2/embed|arte_vp/index)\\.php\\?json_url=\n        (?P<json_url>\n            http://arte\\.tv/papi/tvguide/videos/stream/player/\n            (?P<lang>[^/]+)/(?P<id>[^/]+)[^&]*\n        )\n    \n \n# coding: utf-8\n# There are different sources of video in arte.tv, the extraction process\n# is different for each one. The videos usually expire in 7 days, so we can't\n# add tests.\n# The playpath starts at 'mp4:', if we don't manually\n# split the url, rtmpdump will incorrectly parse them\n# This is not a real id, it can be for example AJT for the news\n# http://www.arte.tv/guide/fr/emissions/AJT/arte-journal\n# Language preference from most to least priority\n# Reference: section 5.6.3 of\n# http://www.arte.tv/sites/en/corporate/files/complete-technical-guidelines-arte-geie-v1-05.pdf\n# original version in requested language, without subtitles\n# original version in requested language, with partial subtitles in requested language\n# original version in requested language, with subtitles for the deaf and hard-of-hearing in requested language\n# non-original (dubbed) version in requested language, without subtitles\n# non-original (dubbed) version in requested language, with subtitles partial subtitles in requested language\n# non-original (dubbed) version in requested language, with subtitles for the deaf and hard-of-hearing in requested language\n# original version in requested language, with partial subtitles in different language\n# original version in requested language, with subtitles for the deaf and hard-of-hearing in different language\n# original version in different language, with partial subtitles in requested language\n# original version in different language, with subtitles for the deaf and hard-of-hearing in requested language\n# original version in different language, without subtitles\n# original version in different language, with partial subtitles in different language\n# original version in different language, with subtitles for the deaf and hard-of-hearing in different language\n#&]+)'\n# some pages contain multiple videos (like\n# http://www.arte.tv/guide/de/sendungen/XEN/xenius/?vid=055918-015_PLUS7-D),\n# so we first try to look for json URLs that contain the video id from\n# the 'vid' parameter.\n# en and es URLs produce react-based pages with different layout (e.g.\n# http://www.arte.tv/guide/en/053330-002-A/carnival-italy?zone=world)\n# Different kind of embed URL (e.g.\n# http://www.arte.tv/magazine/trepalium/fr/episode-0406-replay-trepalium)\n# It also uses the arte_vp_url url from the webpage to extract the information\n#&]+)'\n#&]+)'\n#&]+)'\n#&]+)'\n#&]+)'\n#&]+)'\n# Embedded via <iframe src=\"http://www.arte.tv/arte_vp/index.php?json_url=...\"\n# Embedded via <iframe src=\"http://www.arte.tv/guide/fr/embed/054813-004-A/medium\"\n#&]+)'\n#]*#collection/(?P<id>PL-\\d+)'\n#collection/PL-013263/ARTETV',\n#collection/PL-013190/ARTETV',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_str,\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    find_xpath_attr,\n    get_element_by_attribute,\n    int_or_none,\n    NO_DEFAULT,\n    qualities,\n    try_get,\n    unified_strdate,\n)\n\n# There are different sources of video in arte.tv, the extraction process\n# is different for each one. The videos usually expire in 7 days, so we can't\n# add tests.\n\n\nclass ArteTvIE(InfoExtractor):\n    _VALID_URL = r'https?://videos\\.arte\\.tv/(?P<lang>fr|de|en|es)/.*-(?P<id>.*?)\\.html'\n    IE_NAME = 'arte.tv'\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        lang = mobj.group('lang')\n        video_id = mobj.group('id')\n\n        ref_xml_url = url.replace('/videos/', '/do_delegate/videos/')\n        ref_xml_url = ref_xml_url.replace('.html', ',view,asPlayerXml.xml')\n        ref_xml_doc = self._download_xml(\n            ref_xml_url, video_id, note='Downloading metadata')\n        config_node = find_xpath_attr(ref_xml_doc, './/video', 'lang', lang)\n        config_xml_url = config_node.attrib['ref']\n        config = self._download_xml(\n            config_xml_url, video_id, note='Downloading configuration')\n\n        formats = [{\n            'format_id': q.attrib['quality'],\n            # The playpath starts at 'mp4:', if we don't manually\n            # split the url, rtmpdump will incorrectly parse them\n            'url': q.text.split('mp4:', 1)[0],\n            'play_path': 'mp4:' + q.text.split('mp4:', 1)[1],\n            'ext': 'flv',\n            'quality': 2 if q.attrib['quality'] == 'hd' else 1,\n        } for q in config.findall('./urls/url')]\n        self._sort_formats(formats)\n\n        title = config.find('.//name').text\n        thumbnail = config.find('.//firstThumbnailUrl').text\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n\n\nclass ArteTVBaseIE(InfoExtractor):\n    @classmethod\n    def _extract_url_info(cls, url):\n        mobj = re.match(cls._VALID_URL, url)\n        lang = mobj.group('lang')\n        query = compat_parse_qs(compat_urllib_parse_urlparse(url).query)\n        if 'vid' in query:\n            video_id = query['vid'][0]\n        else:\n            # This is not a real id, it can be for example AJT for the news\n            # http://www.arte.tv/guide/fr/emissions/AJT/arte-journal\n            video_id = mobj.group('id')\n        return video_id, lang\n\n    def _extract_from_json_url(self, json_url, video_id, lang, title=None):\n        info = self._download_json(json_url, video_id)\n        player_info = info['videoJsonPlayer']\n\n        vsr = try_get(player_info, lambda x: x['VSR'], dict)\n        if not vsr:\n            error = None\n            if try_get(player_info, lambda x: x['custom_msg']['type']) == 'error':\n                error = try_get(\n                    player_info, lambda x: x['custom_msg']['msg'], compat_str)\n            if not error:\n                error = 'Video %s is not available' % player_info.get('VID') or video_id\n            raise ExtractorError(error, expected=True)\n\n        upload_date_str = player_info.get('shootingDate')\n        if not upload_date_str:\n            upload_date_str = (player_info.get('VRA') or player_info.get('VDA') or '').split(' ')[0]\n\n        title = (player_info.get('VTI') or title or player_info['VID']).strip()\n        subtitle = player_info.get('VSU', '').strip()\n        if subtitle:\n            title += ' - %s' % subtitle\n\n        info_dict = {\n            'id': player_info['VID'],\n            'title': title,\n            'description': player_info.get('VDE'),\n            'upload_date': unified_strdate(upload_date_str),\n            'thumbnail': player_info.get('programImage') or player_info.get('VTU', {}).get('IUR'),\n        }\n        qfunc = qualities(['HQ', 'MQ', 'EQ', 'SQ'])\n\n        LANGS = {\n            'fr': 'F',\n            'de': 'A',\n            'en': 'E[ANG]',\n            'es': 'E[ESP]',\n        }\n\n        langcode = LANGS.get(lang, lang)\n\n        formats = []\n        for format_id, format_dict in vsr.items():\n            f = dict(format_dict)\n            versionCode = f.get('versionCode')\n            l = re.escape(langcode)\n\n            # Language preference from most to least priority\n            # Reference: section 5.6.3 of\n            # http://www.arte.tv/sites/en/corporate/files/complete-technical-guidelines-arte-geie-v1-05.pdf\n            PREFERENCES = (\n                # original version in requested language, without subtitles\n                r'VO{0}$'.format(l),\n                # original version in requested language, with partial subtitles in requested language\n                r'VO{0}-ST{0}$'.format(l),\n                # original version in requested language, with subtitles for the deaf and hard-of-hearing in requested language\n                r'VO{0}-STM{0}$'.format(l),\n                # non-original (dubbed) version in requested language, without subtitles\n                r'V{0}$'.format(l),\n                # non-original (dubbed) version in requested language, with subtitles partial subtitles in requested language\n                r'V{0}-ST{0}$'.format(l),\n                # non-original (dubbed) version in requested language, with subtitles for the deaf and hard-of-hearing in requested language\n                r'V{0}-STM{0}$'.format(l),\n                # original version in requested language, with partial subtitles in different language\n                r'VO{0}-ST(?!{0}).+?$'.format(l),\n                # original version in requested language, with subtitles for the deaf and hard-of-hearing in different language\n                r'VO{0}-STM(?!{0}).+?$'.format(l),\n                # original version in different language, with partial subtitles in requested language\n                r'VO(?:(?!{0}).+?)?-ST{0}$'.format(l),\n                # original version in different language, with subtitles for the deaf and hard-of-hearing in requested language\n                r'VO(?:(?!{0}).+?)?-STM{0}$'.format(l),\n                # original version in different language, without subtitles\n                r'VO(?:(?!{0}))?$'.format(l),\n                # original version in different language, with partial subtitles in different language\n                r'VO(?:(?!{0}).+?)?-ST(?!{0}).+?$'.format(l),\n                # original version in different language, with subtitles for the deaf and hard-of-hearing in different language\n                r'VO(?:(?!{0}).+?)?-STM(?!{0}).+?$'.format(l),\n            )\n\n            for pref, p in enumerate(PREFERENCES):\n                if re.match(p, versionCode):\n                    lang_pref = len(PREFERENCES) - pref\n                    break\n            else:\n                lang_pref = -1\n\n            format = {\n                'format_id': format_id,\n                'preference': -10 if f.get('videoFormat') == 'M3U8' else None,\n                'language_preference': lang_pref,\n                'format_note': '%s, %s' % (f.get('versionCode'), f.get('versionLibelle')),\n                'width': int_or_none(f.get('width')),\n                'height': int_or_none(f.get('height')),\n                'tbr': int_or_none(f.get('bitrate')),\n                'quality': qfunc(f.get('quality')),\n            }\n\n            if f.get('mediaType') == 'rtmp':\n                format['url'] = f['streamer']\n                format['play_path'] = 'mp4:' + f['url']\n                format['ext'] = 'flv'\n            else:\n                format['url'] = f['url']\n\n            formats.append(format)\n\n        self._check_formats(formats, video_id)\n        self._sort_formats(formats)\n\n        info_dict['formats'] = formats\n        return info_dict\n\n\nclass ArteTVPlus7IE(ArteTVBaseIE):\n    IE_NAME = 'arte.tv:+7'\n    _VALID_URL = r'https?://(?:(?:www|sites)\\.)?arte\\.tv/(?:[^/]+/)?(?P<lang>fr|de|en|es)/(?:videos/)?(?:[^/]+/)*(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'http://www.arte.tv/guide/de/sendungen/XEN/xenius/?vid=055918-015_PLUS7-D',\n        'only_matching': True,\n    }, {\n        'url': 'http://sites.arte.tv/karambolage/de/video/karambolage-22',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.arte.tv/de/videos/048696-000-A/der-kluge-bauch-unser-zweites-gehirn',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if ArteTVPlaylistIE.suitable(url) else super(ArteTVPlus7IE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        video_id, lang = self._extract_url_info(url)\n        webpage = self._download_webpage(url, video_id)\n        return self._extract_from_webpage(webpage, video_id, lang)\n\n    def _extract_from_webpage(self, webpage, video_id, lang):\n        patterns_templates = (r'arte_vp_url=[\"\\'](.*?%s.*?)[\"\\']', r'data-url=[\"\\']([^\"]+%s[^\"]+)[\"\\']')\n        ids = (video_id, '')\n        # some pages contain multiple videos (like\n        # http://www.arte.tv/guide/de/sendungen/XEN/xenius/?vid=055918-015_PLUS7-D),\n        # so we first try to look for json URLs that contain the video id from\n        # the 'vid' parameter.\n        patterns = [t % re.escape(_id) for _id in ids for t in patterns_templates]\n        json_url = self._html_search_regex(\n            patterns, webpage, 'json vp url', default=None)\n        if not json_url:\n            def find_iframe_url(webpage, default=NO_DEFAULT):\n                return self._html_search_regex(\n                    r'<iframe[^>]+src=([\"\\'])(?P<url>.+\\bjson_url=.+?)\\1',\n                    webpage, 'iframe url', group='url', default=default)\n\n            iframe_url = find_iframe_url(webpage, None)\n            if not iframe_url:\n                embed_url = self._html_search_regex(\n                    r'arte_vp_url_oembed=\\'([^\\']+?)\\'', webpage, 'embed url', default=None)\n                if embed_url:\n                    player = self._download_json(\n                        embed_url, video_id, 'Downloading player page')\n                    iframe_url = find_iframe_url(player['html'])\n            # en and es URLs produce react-based pages with different layout (e.g.\n            # http://www.arte.tv/guide/en/053330-002-A/carnival-italy?zone=world)\n            if not iframe_url:\n                program = self._search_regex(\n                    r'program\\s*:\\s*({.+?[\"\\']embed_html[\"\\'].+?}),?\\s*\\n',\n                    webpage, 'program', default=None)\n                if program:\n                    embed_html = self._parse_json(program, video_id)\n                    if embed_html:\n                        iframe_url = find_iframe_url(embed_html['embed_html'])\n            if iframe_url:\n                json_url = compat_parse_qs(\n                    compat_urllib_parse_urlparse(iframe_url).query)['json_url'][0]\n        if json_url:\n            title = self._search_regex(\n                r'<h3[^>]+title=([\"\\'])(?P<title>.+?)\\1',\n                webpage, 'title', default=None, group='title')\n            return self._extract_from_json_url(json_url, video_id, lang, title=title)\n        # Different kind of embed URL (e.g.\n        # http://www.arte.tv/magazine/trepalium/fr/episode-0406-replay-trepalium)\n        entries = [\n            self.url_result(url)\n            for _, url in re.findall(r'<iframe[^>]+src=([\"\\'])(?P<url>.+?)\\1', webpage)]\n        return self.playlist_result(entries)\n\n\n# It also uses the arte_vp_url url from the webpage to extract the information\nclass ArteTVCreativeIE(ArteTVPlus7IE):\n    IE_NAME = 'arte.tv:creative'\n    _VALID_URL = r'https?://creative\\.arte\\.tv/(?P<lang>fr|de|en|es)/(?:[^/]+/)*(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'http://creative.arte.tv/fr/episode/osmosis-episode-1',\n        'info_dict': {\n            'id': '057405-001-A',\n            'ext': 'mp4',\n            'title': 'OSMOSIS - N\\'AYEZ PLUS PEUR D\\'AIMER (1)',\n            'upload_date': '20150716',\n        },\n    }, {\n        'url': 'http://creative.arte.tv/fr/Monty-Python-Reunion',\n        'playlist_count': 11,\n        'add_ie': ['Youtube'],\n    }, {\n        'url': 'http://creative.arte.tv/de/episode/agentur-amateur-4-der-erste-kunde',\n        'only_matching': True,\n    }]\n\n\nclass ArteTVInfoIE(ArteTVPlus7IE):\n    IE_NAME = 'arte.tv:info'\n    _VALID_URL = r'https?://info\\.arte\\.tv/(?P<lang>fr|de|en|es)/(?:[^/]+/)*(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'http://info.arte.tv/fr/service-civique-un-cache-misere',\n        'info_dict': {\n            'id': '067528-000-A',\n            'ext': 'mp4',\n            'title': 'Service civique, un cache mis\u00e8re ?',\n            'upload_date': '20160403',\n        },\n    }]\n\n\nclass ArteTVFutureIE(ArteTVPlus7IE):\n    IE_NAME = 'arte.tv:future'\n    _VALID_URL = r'https?://future\\.arte\\.tv/(?P<lang>fr|de|en|es)/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'http://future.arte.tv/fr/info-sciences/les-ecrevisses-aussi-sont-anxieuses',\n        'info_dict': {\n            'id': '050940-028-A',\n            'ext': 'mp4',\n            'title': 'Les \u00e9crevisses aussi peuvent \u00eatre anxieuses',\n            'upload_date': '20140902',\n        },\n    }, {\n        'url': 'http://future.arte.tv/fr/la-science-est-elle-responsable',\n        'only_matching': True,\n    }]\n\n\nclass ArteTVDDCIE(ArteTVPlus7IE):\n    IE_NAME = 'arte.tv:ddc'\n    _VALID_URL = r'https?://ddc\\.arte\\.tv/(?P<lang>emission|folge)/(?P<id>[^/?#&]+)'\n\n    _TESTS = []\n\n    def _real_extract(self, url):\n        video_id, lang = self._extract_url_info(url)\n        if lang == 'folge':\n            lang = 'de'\n        elif lang == 'emission':\n            lang = 'fr'\n        webpage = self._download_webpage(url, video_id)\n        scriptElement = get_element_by_attribute('class', 'visu_video_block', webpage)\n        script_url = self._html_search_regex(r'src=\"(.*?)\"', scriptElement, 'script url')\n        javascriptPlayerGenerator = self._download_webpage(script_url, video_id, 'Download javascript player generator')\n        json_url = self._search_regex(r\"json_url=(.*)&rendering_place.*\", javascriptPlayerGenerator, 'json url')\n        return self._extract_from_json_url(json_url, video_id, lang)\n\n\nclass ArteTVConcertIE(ArteTVPlus7IE):\n    IE_NAME = 'arte.tv:concert'\n    _VALID_URL = r'https?://concert\\.arte\\.tv/(?P<lang>fr|de|en|es)/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'http://concert.arte.tv/de/notwist-im-pariser-konzertclub-divan-du-monde',\n        'md5': '9ea035b7bd69696b67aa2ccaaa218161',\n        'info_dict': {\n            'id': '186',\n            'ext': 'mp4',\n            'title': 'The Notwist im Pariser Konzertclub \"Divan du Monde\"',\n            'upload_date': '20140128',\n            'description': 'md5:486eb08f991552ade77439fe6d82c305',\n        },\n    }]\n\n\nclass ArteTVCinemaIE(ArteTVPlus7IE):\n    IE_NAME = 'arte.tv:cinema'\n    _VALID_URL = r'https?://cinema\\.arte\\.tv/(?P<lang>fr|de|en|es)/(?P<id>.+)'\n\n    _TESTS = [{\n        'url': 'http://cinema.arte.tv/fr/article/les-ailes-du-desir-de-julia-reck',\n        'md5': 'a5b9dd5575a11d93daf0e3f404f45438',\n        'info_dict': {\n            'id': '062494-000-A',\n            'ext': 'mp4',\n            'title': 'Film laur\u00e9at du concours web - \"Les ailes du d\u00e9sir\" de Julia Reck',\n            'upload_date': '20150807',\n        },\n    }]\n\n\nclass ArteTVMagazineIE(ArteTVPlus7IE):\n    IE_NAME = 'arte.tv:magazine'\n    _VALID_URL = r'https?://(?:www\\.)?arte\\.tv/magazine/[^/]+/(?P<lang>fr|de|en|es)/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        # Embedded via <iframe src=\"http://www.arte.tv/arte_vp/index.php?json_url=...\"\n        'url': 'http://www.arte.tv/magazine/trepalium/fr/entretien-avec-le-realisateur-vincent-lannoo-trepalium',\n        'md5': '2a9369bcccf847d1c741e51416299f25',\n        'info_dict': {\n            'id': '065965-000-A',\n            'ext': 'mp4',\n            'title': 'Trepalium - Extrait Ep.01',\n            'upload_date': '20160121',\n        },\n    }, {\n        # Embedded via <iframe src=\"http://www.arte.tv/guide/fr/embed/054813-004-A/medium\"\n        'url': 'http://www.arte.tv/magazine/trepalium/fr/episode-0406-replay-trepalium',\n        'md5': 'fedc64fc7a946110fe311634e79782ca',\n        'info_dict': {\n            'id': '054813-004_PLUS7-F',\n            'ext': 'mp4',\n            'title': 'Trepalium (4/6)',\n            'description': 'md5:10057003c34d54e95350be4f9b05cb40',\n            'upload_date': '20160218',\n        },\n    }, {\n        'url': 'http://www.arte.tv/magazine/metropolis/de/frank-woeste-german-paris-metropolis',\n        'only_matching': True,\n    }]\n\n\nclass ArteTVEmbedIE(ArteTVPlus7IE):\n    IE_NAME = 'arte.tv:embed'\n    _VALID_URL = r'''(?x)\n        http://www\\.arte\\.tv\n        /(?:playerv2/embed|arte_vp/index)\\.php\\?json_url=\n        (?P<json_url>\n            http://arte\\.tv/papi/tvguide/videos/stream/player/\n            (?P<lang>[^/]+)/(?P<id>[^/]+)[^&]*\n        )\n    '''\n\n    _TESTS = []\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        lang = mobj.group('lang')\n        json_url = mobj.group('json_url')\n        return self._extract_from_json_url(json_url, video_id, lang)\n\n\nclass TheOperaPlatformIE(ArteTVPlus7IE):\n    IE_NAME = 'theoperaplatform'\n    _VALID_URL = r'https?://(?:www\\.)?theoperaplatform\\.eu/(?P<lang>fr|de|en|es)/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'http://www.theoperaplatform.eu/de/opera/verdi-otello',\n        'md5': '970655901fa2e82e04c00b955e9afe7b',\n        'info_dict': {\n            'id': '060338-009-A',\n            'ext': 'mp4',\n            'title': 'Verdi - OTELLO',\n            'upload_date': '20160927',\n        },\n    }]\n\n\nclass ArteTVPlaylistIE(ArteTVBaseIE):\n    IE_NAME = 'arte.tv:playlist'\n    _VALID_URL = r'https?://(?:www\\.)?arte\\.tv/guide/(?P<lang>fr|de|en|es)/[^#]*#collection/(?P<id>PL-\\d+)'\n\n    _TESTS = [{\n        'url': 'http://www.arte.tv/guide/de/plus7/?country=DE#collection/PL-013263/ARTETV',\n        'info_dict': {\n            'id': 'PL-013263',\n            'title': 'Areva & Uramin',\n            'description': 'md5:a1dc0312ce357c262259139cfd48c9bf',\n        },\n        'playlist_mincount': 6,\n    }, {\n        'url': 'http://www.arte.tv/guide/de/playlists?country=DE#collection/PL-013190/ARTETV',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        playlist_id, lang = self._extract_url_info(url)\n        collection = self._download_json(\n            'https://api.arte.tv/api/player/v1/collectionData/%s/%s?source=videos'\n            % (lang, playlist_id), playlist_id)\n        title = collection.get('title')\n        description = collection.get('shortDescription') or collection.get('teaserText')\n        entries = [\n            self._extract_from_json_url(\n                video['jsonUrl'], video.get('programId') or playlist_id, lang)\n            for video in collection['videos'] if video.get('jsonUrl')]\n        return self.playlist_result(entries, playlist_id, title, description)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "arte.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/arte.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}