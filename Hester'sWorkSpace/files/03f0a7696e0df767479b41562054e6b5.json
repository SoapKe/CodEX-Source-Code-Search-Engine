{"author": "odoo", "code": "\n\nimport base64\nimport json\nimport binascii\nfrom collections import OrderedDict\nimport hashlib\nimport hmac\nimport logging\nfrom itertools import chain\n\nfrom werkzeug import urls\n\nfrom odoo import api, fields, models, tools, _\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.addons.payment_adyen.controllers.main import AdyenController\n\n_logger = logging.getLogger(__name__)\n\n\nclass AcquirerAdyen(models.Model):\n    _inherit = 'payment.acquirer'\n\n    provider = fields.Selection(selection_add=[('adyen', 'Adyen')])\n    adyen_merchant_account = fields.Char('Merchant Account', required_if_provider='adyen', groups='base.group_user')\n    adyen_skin_code = fields.Char('Skin Code', required_if_provider='adyen', groups='base.group_user')\n    adyen_skin_hmac_key = fields.Char('Skin HMAC Key', required_if_provider='adyen', groups='base.group_user')\n\n    @api.model\n    def _get_adyen_urls(self, environment):\n        \"\"\" Adyen URLs: yhpp: hosted payment page: pay.shtml for single, select.shtml for multiple \"\"\"\n        return {\n            'adyen_form_url': 'https://%s.adyen.com/hpp/pay.shtml' % ('live' if environment == 'prod' else environment),\n        }\n\n    @api.multi\n    def _adyen_generate_merchant_sig_sha256(self, inout, values):\n        \"\"\" Generate the shasign for incoming or outgoing communications., when using the SHA-256\n        signature.\n\n        :param string inout: 'in' (odoo contacting ogone) or 'out' (adyen\n                             contacting odoo). In this last case only some\n                             fields should be contained (see e-Commerce basic)\n        :param dict values: transaction values\n        :return string: shasign\n        \"\"\"\n        def escapeVal(val):\n            return val.replace('\\\\', '\\\\\\\\').replace(':', '\\\\:')\n\n        def signParams(parms):\n            signing_string = ':'.join(\n                escapeVal(v)\n                for v in chain(parms.keys(), parms.values())\n            )\n            hm = hmac.new(hmac_key, signing_string.encode('utf-8'), hashlib.sha256)\n            return base64.b64encode(hm.digest())\n\n        assert inout in ('in', 'out')\n        assert self.provider == 'adyen'\n\n        if inout == 'in':\n            \n            \n            \n            \n            keys = [\n                'merchantReference', 'paymentAmount', 'currencyCode', 'shipBeforeDate', 'skinCode',\n                'merchantAccount', 'sessionValidity', 'merchantReturnData', 'shopperEmail',\n                'shopperReference', 'allowedMethods', 'blockedMethods', 'offset',\n                'shopperStatement', 'recurringContract', 'billingAddressType',\n                'deliveryAddressType', 'brandCode', 'countryCode', 'shopperLocale', 'orderData',\n                'offerEmail', 'resURL',\n            ]\n        else:\n            keys = [\n                'authResult', 'merchantReference', 'merchantReturnData', 'paymentMethod',\n                'pspReference', 'shopperLocale', 'skinCode',\n            ]\n\n        hmac_key = binascii.a2b_hex(self.adyen_skin_hmac_key.encode('ascii'))\n        raw_values = {k: values.get(k.encode('ascii'), '') for k in keys if k in values}\n        raw_values_ordered = OrderedDict(sorted(raw_values.items(), key=lambda t: t[0]))\n\n        return signParams(raw_values_ordered)\n\n    @api.multi\n    def _adyen_generate_merchant_sig(self, inout, values):\n        \"\"\" Generate the shasign for incoming or outgoing communications, when using the SHA-1\n        signature (deprecated by Adyen).\n\n        :param string inout: 'in' (odoo contacting ogone) or 'out' (adyen\n                             contacting odoo). In this last case only some\n                             fields should be contained (see e-Commerce basic)\n        :param dict values: transaction values\n\n        :return string: shasign\n        \"\"\"\n        assert inout in ('in', 'out')\n        assert self.provider == 'adyen'\n\n        if inout == 'in':\n            keys = \"paymentAmount currencyCode shipBeforeDate merchantReference skinCode merchantAccount sessionValidity shopperEmail shopperReference recurringContract allowedMethods blockedMethods shopperStatement merchantReturnData billingAddressType deliveryAddressType offset\".split()\n        else:\n            keys = \"authResult pspReference merchantReference skinCode merchantReturnData\".split()\n\n        def get_value(key):\n            if values.get(key):\n                return values[key]\n            return ''\n\n        sign = ''.join('%s' % get_value(k) for k in keys).encode('ascii')\n        key = self.adyen_skin_hmac_key.encode('ascii')\n        return base64.b64encode(hmac.new(key, sign, hashlib.sha1).digest())\n\n    @api.multi\n    def adyen_form_generate_values(self, values):\n        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        \n        import datetime\n        from dateutil import relativedelta\n\n        if self.provider == 'adyen' and len(self.adyen_skin_hmac_key) == 64:\n            tmp_date = datetime.datetime.today() + relativedelta.relativedelta(days=1)\n\n            values.update({\n                'merchantReference': values['reference'],\n                'paymentAmount': '%d' % int(tools.float_round(values['amount'], 2) * 100),\n                'currencyCode': values['currency'] and values['currency'].name or '',\n                'shipBeforeDate': tmp_date.strftime('%Y-%m-%d'),\n                'skinCode': self.adyen_skin_code,\n                'merchantAccount': self.adyen_merchant_account,\n                'shopperLocale': values.get('partner_lang', ''),\n                'sessionValidity': tmp_date.isoformat('T')[:19] + \"Z\",\n                'resURL': urls.url_join(base_url, AdyenController._return_url),\n                'merchantReturnData': json.dumps({'return_url': '%s' % values.pop('return_url')}) if values.get('return_url', '') else False,\n                'shopperEmail': values.get('partner_email', ''),\n            })\n            values['merchantSig'] = self._adyen_generate_merchant_sig_sha256('in', values)\n\n        else:\n            tmp_date = datetime.date.today() + relativedelta.relativedelta(days=1)\n\n            values.update({\n                'merchantReference': values['reference'],\n                'paymentAmount': '%d' % int(tools.float_round(values['amount'], 2) * 100),\n                'currencyCode': values['currency'] and values['currency'].name or '',\n                'shipBeforeDate': tmp_date,\n                'skinCode': self.adyen_skin_code,\n                'merchantAccount': self.adyen_merchant_account,\n                'shopperLocale': values.get('partner_lang'),\n                'sessionValidity': tmp_date,\n                'resURL': urls.url_join(base_url, AdyenController._return_url),\n                'merchantReturnData': json.dumps({'return_url': '%s' % values.pop('return_url')}) if values.get('return_url') else False,\n                'merchantSig': self._adyen_generate_merchant_sig('in', values),\n            })\n\n        return values\n\n    @api.multi\n    def adyen_get_form_action_url(self):\n        return self._get_adyen_urls(self.environment)['adyen_form_url']\n\n\nclass TxAdyen(models.Model):\n    _inherit = 'payment.transaction'\n\n    \n    \n    \n\n    @api.model\n    def _adyen_form_get_tx_from_data(self, data):\n        reference, pspReference = data.get('merchantReference'), data.get('pspReference')\n        if not reference or not pspReference:\n            error_msg = _('Adyen: received data with missing reference (%s) or missing pspReference (%s)') % (reference, pspReference)\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        ?\n        tx = self.env['payment.transaction'].search([('reference', '=', reference)])\n        if not tx or len(tx) > 1:\n            error_msg = _('Adyen: received data for reference %s') % (reference)\n            if not tx:\n                error_msg += _('; no order found')\n            else:\n                error_msg += _('; multiple order found')\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        \n        if len(tx.acquirer_id.adyen_skin_hmac_key) == 64:\n            shasign_check = tx.acquirer_id._adyen_generate_merchant_sig_sha256('out', data)\n        else:\n            shasign_check = tx.acquirer_id._adyen_generate_merchant_sig('out', data)\n        if shasign_check != data.get('merchantSig'):\n            error_msg = _('Adyen: invalid merchantSig, received %s, computed %s') % (data.get('merchantSig'), shasign_check)\n            _logger.warning(error_msg)\n            raise ValidationError(error_msg)\n\n        return tx\n\n    def _adyen_form_get_invalid_parameters(self, data):\n        invalid_parameters = []\n\n        \n        if self.acquirer_reference and data.get('pspReference') != self.acquirer_reference:\n            invalid_parameters.append(('pspReference', data.get('pspReference'), self.acquirer_reference))\n        \n        if data.get('skinCode') != self.acquirer_id.adyen_skin_code:\n            invalid_parameters.append(('skinCode', data.get('skinCode'), self.acquirer_id.adyen_skin_code))\n        \n        if not data.get('authResult'):\n            invalid_parameters.append(('authResult', data.get('authResult'), 'something'))\n\n        return invalid_parameters\n\n    def _adyen_form_validate(self, data):\n        status = data.get('authResult', 'PENDING')\n        if status == 'AUTHORISED':\n            self.write({\n                'state': 'done',\n                'acquirer_reference': data.get('pspReference'),\n                # 'date_validate': data.get('payment_date', fields.datetime.now()),\n                # 'paypal_txn_type': data.get('express_checkout')\n            })\n            return True\n        elif status == 'PENDING':\n            self.write({\n                'state': 'pending',\n                'acquirer_reference': data.get('pspReference'),\n            })\n            return True\n        else:\n            error = _('Adyen: feedback error')\n            _logger.info(error)\n            self.write({\n                'state': 'error',\n                'state_message': error\n            })\n            return False\n", "comments": "    adyen urls  yhpp  hosted payment page  pay shtml single  select shtml multiple             return                adyen form url    https    adyen com hpp pay shtml    ( live  environment     prod  else environment)                  api multi     def  adyen generate merchant sig sha256(self  inout  values)              generate shasign incoming outgoing communications   using sha 256         signature            param string inout    (odoo contacting ogone)   (adyen                              contacting odoo)  in last case                              fields contained (see e commerce basic)          param dict values  transaction values          return string  shasign                     def escapeval(val)              return val replace(            ) replace(          )          def signparams(parms)              signing string       join(                 escapeval(v)                 v chain(parms keys()  parms values())             )             hm   hmac new(hmac key  signing string encode( utf 8 )  hashlib sha256)             return base64 b64encode(hm digest())          assert inout (    )         assert self provider     adyen           inout                     all fields sent adyen must included signature  all fucking               fields  despite claimed documentation  for example                https   docs adyen com developers hpp manual  stated   the resurl parameter               need included signature   it trap  must included well              keys                      merchantreference    paymentamount    currencycode    shipbeforedate    skincode                    merchantaccount    sessionvalidity    merchantreturndata    shopperemail                    shopperreference    allowedmethods    blockedmethods    offset                    shopperstatement    recurringcontract    billingaddresstype                    deliveryaddresstype    brandcode    countrycode    shopperlocale    orderdata                    offeremail    resurl                         else              keys                      authresult    merchantreference    merchantreturndata    paymentmethod                    pspreference    shopperlocale    skincode                          hmac key   binascii a2b hex(self adyen skin hmac key encode( ascii ))         raw values    k  values get(k encode( ascii )    ) k keys k values          raw values ordered   ordereddict(sorted(raw values items()  key lambda  0 ))          return signparams(raw values ordered)       api multi     def  adyen generate merchant sig(self  inout  values)              generate shasign incoming outgoing communications  using sha 1         signature (deprecated adyen)            param string inout    (odoo contacting ogone)   (adyen                              contacting odoo)  in last case                              fields contained (see e commerce basic)          param dict values  transaction values           return string  shasign                coding  utf 8    all fields sent adyen must included signature  all fucking    fields  despite claimed documentation  for example     https   docs adyen com developers hpp manual  stated   the resurl parameter    need included signature   it trap  must included well     tmp                                                          form related methods                                                          find tx     tdenote use pspreference      verify shasign    reference acquirer  pspreference    seller    result     date validate   data get( payment date   fields datetime now())      paypal txn type   data get( express checkout ) ", "content": "# coding: utf-8\n\nimport base64\nimport json\nimport binascii\nfrom collections import OrderedDict\nimport hashlib\nimport hmac\nimport logging\nfrom itertools import chain\n\nfrom werkzeug import urls\n\nfrom odoo import api, fields, models, tools, _\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.addons.payment_adyen.controllers.main import AdyenController\n\n_logger = logging.getLogger(__name__)\n\n\nclass AcquirerAdyen(models.Model):\n    _inherit = 'payment.acquirer'\n\n    provider = fields.Selection(selection_add=[('adyen', 'Adyen')])\n    adyen_merchant_account = fields.Char('Merchant Account', required_if_provider='adyen', groups='base.group_user')\n    adyen_skin_code = fields.Char('Skin Code', required_if_provider='adyen', groups='base.group_user')\n    adyen_skin_hmac_key = fields.Char('Skin HMAC Key', required_if_provider='adyen', groups='base.group_user')\n\n    @api.model\n    def _get_adyen_urls(self, environment):\n        \"\"\" Adyen URLs: yhpp: hosted payment page: pay.shtml for single, select.shtml for multiple \"\"\"\n        return {\n            'adyen_form_url': 'https://%s.adyen.com/hpp/pay.shtml' % ('live' if environment == 'prod' else environment),\n        }\n\n    @api.multi\n    def _adyen_generate_merchant_sig_sha256(self, inout, values):\n        \"\"\" Generate the shasign for incoming or outgoing communications., when using the SHA-256\n        signature.\n\n        :param string inout: 'in' (odoo contacting ogone) or 'out' (adyen\n                             contacting odoo). In this last case only some\n                             fields should be contained (see e-Commerce basic)\n        :param dict values: transaction values\n        :return string: shasign\n        \"\"\"\n        def escapeVal(val):\n            return val.replace('\\\\', '\\\\\\\\').replace(':', '\\\\:')\n\n        def signParams(parms):\n            signing_string = ':'.join(\n                escapeVal(v)\n                for v in chain(parms.keys(), parms.values())\n            )\n            hm = hmac.new(hmac_key, signing_string.encode('utf-8'), hashlib.sha256)\n            return base64.b64encode(hm.digest())\n\n        assert inout in ('in', 'out')\n        assert self.provider == 'adyen'\n\n        if inout == 'in':\n            # All the fields sent to Adyen must be included in the signature. ALL the fucking\n            # fields, despite what is claimed in the documentation. For example, in\n            # https://docs.adyen.com/developers/hpp-manual, it is stated: \"The resURL parameter does\n            # not need to be included in the signature.\" It's a trap, it must be included as well!\n            keys = [\n                'merchantReference', 'paymentAmount', 'currencyCode', 'shipBeforeDate', 'skinCode',\n                'merchantAccount', 'sessionValidity', 'merchantReturnData', 'shopperEmail',\n                'shopperReference', 'allowedMethods', 'blockedMethods', 'offset',\n                'shopperStatement', 'recurringContract', 'billingAddressType',\n                'deliveryAddressType', 'brandCode', 'countryCode', 'shopperLocale', 'orderData',\n                'offerEmail', 'resURL',\n            ]\n        else:\n            keys = [\n                'authResult', 'merchantReference', 'merchantReturnData', 'paymentMethod',\n                'pspReference', 'shopperLocale', 'skinCode',\n            ]\n\n        hmac_key = binascii.a2b_hex(self.adyen_skin_hmac_key.encode('ascii'))\n        raw_values = {k: values.get(k.encode('ascii'), '') for k in keys if k in values}\n        raw_values_ordered = OrderedDict(sorted(raw_values.items(), key=lambda t: t[0]))\n\n        return signParams(raw_values_ordered)\n\n    @api.multi\n    def _adyen_generate_merchant_sig(self, inout, values):\n        \"\"\" Generate the shasign for incoming or outgoing communications, when using the SHA-1\n        signature (deprecated by Adyen).\n\n        :param string inout: 'in' (odoo contacting ogone) or 'out' (adyen\n                             contacting odoo). In this last case only some\n                             fields should be contained (see e-Commerce basic)\n        :param dict values: transaction values\n\n        :return string: shasign\n        \"\"\"\n        assert inout in ('in', 'out')\n        assert self.provider == 'adyen'\n\n        if inout == 'in':\n            keys = \"paymentAmount currencyCode shipBeforeDate merchantReference skinCode merchantAccount sessionValidity shopperEmail shopperReference recurringContract allowedMethods blockedMethods shopperStatement merchantReturnData billingAddressType deliveryAddressType offset\".split()\n        else:\n            keys = \"authResult pspReference merchantReference skinCode merchantReturnData\".split()\n\n        def get_value(key):\n            if values.get(key):\n                return values[key]\n            return ''\n\n        sign = ''.join('%s' % get_value(k) for k in keys).encode('ascii')\n        key = self.adyen_skin_hmac_key.encode('ascii')\n        return base64.b64encode(hmac.new(key, sign, hashlib.sha1).digest())\n\n    @api.multi\n    def adyen_form_generate_values(self, values):\n        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        # tmp\n        import datetime\n        from dateutil import relativedelta\n\n        if self.provider == 'adyen' and len(self.adyen_skin_hmac_key) == 64:\n            tmp_date = datetime.datetime.today() + relativedelta.relativedelta(days=1)\n\n            values.update({\n                'merchantReference': values['reference'],\n                'paymentAmount': '%d' % int(tools.float_round(values['amount'], 2) * 100),\n                'currencyCode': values['currency'] and values['currency'].name or '',\n                'shipBeforeDate': tmp_date.strftime('%Y-%m-%d'),\n                'skinCode': self.adyen_skin_code,\n                'merchantAccount': self.adyen_merchant_account,\n                'shopperLocale': values.get('partner_lang', ''),\n                'sessionValidity': tmp_date.isoformat('T')[:19] + \"Z\",\n                'resURL': urls.url_join(base_url, AdyenController._return_url),\n                'merchantReturnData': json.dumps({'return_url': '%s' % values.pop('return_url')}) if values.get('return_url', '') else False,\n                'shopperEmail': values.get('partner_email', ''),\n            })\n            values['merchantSig'] = self._adyen_generate_merchant_sig_sha256('in', values)\n\n        else:\n            tmp_date = datetime.date.today() + relativedelta.relativedelta(days=1)\n\n            values.update({\n                'merchantReference': values['reference'],\n                'paymentAmount': '%d' % int(tools.float_round(values['amount'], 2) * 100),\n                'currencyCode': values['currency'] and values['currency'].name or '',\n                'shipBeforeDate': tmp_date,\n                'skinCode': self.adyen_skin_code,\n                'merchantAccount': self.adyen_merchant_account,\n                'shopperLocale': values.get('partner_lang'),\n                'sessionValidity': tmp_date,\n                'resURL': urls.url_join(base_url, AdyenController._return_url),\n                'merchantReturnData': json.dumps({'return_url': '%s' % values.pop('return_url')}) if values.get('return_url') else False,\n                'merchantSig': self._adyen_generate_merchant_sig('in', values),\n            })\n\n        return values\n\n    @api.multi\n    def adyen_get_form_action_url(self):\n        return self._get_adyen_urls(self.environment)['adyen_form_url']\n\n\nclass TxAdyen(models.Model):\n    _inherit = 'payment.transaction'\n\n    # --------------------------------------------------\n    # FORM RELATED METHODS\n    # --------------------------------------------------\n\n    @api.model\n    def _adyen_form_get_tx_from_data(self, data):\n        reference, pspReference = data.get('merchantReference'), data.get('pspReference')\n        if not reference or not pspReference:\n            error_msg = _('Adyen: received data with missing reference (%s) or missing pspReference (%s)') % (reference, pspReference)\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        # find tx -> @TDENOTE use pspReference ?\n        tx = self.env['payment.transaction'].search([('reference', '=', reference)])\n        if not tx or len(tx) > 1:\n            error_msg = _('Adyen: received data for reference %s') % (reference)\n            if not tx:\n                error_msg += _('; no order found')\n            else:\n                error_msg += _('; multiple order found')\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        # verify shasign\n        if len(tx.acquirer_id.adyen_skin_hmac_key) == 64:\n            shasign_check = tx.acquirer_id._adyen_generate_merchant_sig_sha256('out', data)\n        else:\n            shasign_check = tx.acquirer_id._adyen_generate_merchant_sig('out', data)\n        if shasign_check != data.get('merchantSig'):\n            error_msg = _('Adyen: invalid merchantSig, received %s, computed %s') % (data.get('merchantSig'), shasign_check)\n            _logger.warning(error_msg)\n            raise ValidationError(error_msg)\n\n        return tx\n\n    def _adyen_form_get_invalid_parameters(self, data):\n        invalid_parameters = []\n\n        # reference at acquirer: pspReference\n        if self.acquirer_reference and data.get('pspReference') != self.acquirer_reference:\n            invalid_parameters.append(('pspReference', data.get('pspReference'), self.acquirer_reference))\n        # seller\n        if data.get('skinCode') != self.acquirer_id.adyen_skin_code:\n            invalid_parameters.append(('skinCode', data.get('skinCode'), self.acquirer_id.adyen_skin_code))\n        # result\n        if not data.get('authResult'):\n            invalid_parameters.append(('authResult', data.get('authResult'), 'something'))\n\n        return invalid_parameters\n\n    def _adyen_form_validate(self, data):\n        status = data.get('authResult', 'PENDING')\n        if status == 'AUTHORISED':\n            self.write({\n                'state': 'done',\n                'acquirer_reference': data.get('pspReference'),\n                # 'date_validate': data.get('payment_date', fields.datetime.now()),\n                # 'paypal_txn_type': data.get('express_checkout')\n            })\n            return True\n        elif status == 'PENDING':\n            self.write({\n                'state': 'pending',\n                'acquirer_reference': data.get('pspReference'),\n            })\n            return True\n        else:\n            error = _('Adyen: feedback error')\n            _logger.info(error)\n            self.write({\n                'state': 'error',\n                'state_message': error\n            })\n            return False\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "payment.py", "id": "03f0a7696e0df767479b41562054e6b5", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/payment_adyen/models/payment.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}