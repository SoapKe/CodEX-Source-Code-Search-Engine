{"author": "ansible", "code": "\n\n# (c) 2017, Red Hat Inc.\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: sensu_handler\nauthor: \"David Moreau Simard (@dmsimard)\"\nshort_description: Manages Sensu handler configuration\nversion_added: 2.4\ndescription:\n  - Manages Sensu handler configuration\n  - 'For more information, refer to the Sensu documentation: U(https://sensuapp.org/docs/latest/reference/handlers.html)'\noptions:\n  state:\n    description:\n      - Whether the handler should be present or not\n    choices: [ 'present', 'absent' ]\n    default: present\n  name:\n    description:\n      - A unique name for the handler. The name cannot contain special characters or spaces.\n    required: True\n  type:\n    description:\n      - The handler type\n    choices: [ 'pipe', 'tcp', 'udp', 'transport', 'set' ]\n    required: True\n  filter:\n    description:\n      - The Sensu event filter (name) to use when filtering events for the handler.\n  filters:\n    description:\n      - An array of Sensu event filters (names) to use when filtering events for the handler.\n      - Each array item must be a string.\n  severities:\n    description:\n      - An array of check result severities the handler will handle.\n      - 'NOTE: event resolution bypasses this filtering.'\n    choices: [ 'warning', 'critical', 'unknown' ]\n  mutator:\n    description:\n      - The Sensu event mutator (name) to use to mutate event data for the handler.\n  timeout:\n    description:\n      - The handler execution duration timeout in seconds (hard stop).\n      - Only used by pipe and tcp handler types.\n    default: 10\n  handle_silenced:\n    description:\n      - If events matching one or more silence entries should be handled.\n    type: bool\n    default: 'no'\n  handle_flapping:\n    description:\n      - If events in the flapping state should be handled.\n    type: bool\n    default: 'no'\n  command:\n    description:\n      - The handler command to be executed.\n      - The event data is passed to the process via STDIN.\n      - 'NOTE: the command attribute is only required for Pipe handlers (i.e. handlers configured with \"type\": \"pipe\").'\n  socket:\n    description:\n      - The socket definition scope, used to configure the TCP/UDP handler socket.\n      - 'NOTE: the socket attribute is only required for TCP/UDP handlers (i.e. handlers configured with \"type\": \"tcp\" or \"type\": \"udp\").'\n  pipe:\n    description:\n      - The pipe definition scope, used to configure the Sensu transport pipe.\n      - 'NOTE: the pipe attribute is only required for Transport handlers (i.e. handlers configured with \"type\": \"transport\").'\n  handlers:\n    description:\n      - An array of Sensu event handlers (names) to use for events using the handler set.\n      - Each array item must be a string.\n      - 'NOTE: the handlers attribute is only required for handler sets (i.e. handlers configured with \"type\": \"set\").'\nnotes:\n  - Check mode is supported\n'''\n\nEXAMPLES = '''\n# Configure a handler that sends event data as STDIN (pipe)\n- name: Configure IRC Sensu handler\n  sensu_handler:\n    name: \"irc_handler\"\n    type: \"pipe\"\n    command: \"/usr/local/bin/notify-irc.sh\"\n    severities:\n      - \"ok\"\n      - \"critical\"\n      - \"warning\"\n      - \"unknown\"\n    timeout: 15\n  notify:\n    - Restart sensu-client\n    - Restart sensu-server\n\n\n- name: Delete IRC Sensu handler\n  sensu_handler:\n    name: \"irc_handler\"\n    state: \"absent\"\n\n\n- name: Configure TCP Sensu handler\n  sensu_handler:\n    name: \"tcp_handler\"\n    type: \"tcp\"\n    timeout: 30\n    socket:\n      host: \"10.0.1.99\"\n      port: 4444\n  register: handler\n  notify:\n    - Restart sensu-client\n    - Restart sensu-server\n\n- name: Secure Sensu handler configuration file\n  file:\n    path: \"{{ handler['file'] }}\"\n    owner: \"sensu\"\n    group: \"sensu\"\n    mode: \"0600\"\n'''\n\nRETURN = '''\nconfig:\n  description: Effective handler configuration, when state is present\n  returned: success\n  type: dict\n  sample: {'name': 'irc', 'type': 'pipe', 'command': '/usr/local/bin/notify-irc.sh'}\nfile:\n  description: Path to the handler configuration file\n  returned: success\n  type: string\n  sample: \"/etc/sensu/conf.d/handlers/irc.json\"\nname:\n  description: Name of the handler\n  returned: success\n  type: string\n  sample: \"irc\"\n'''\n\nimport json\nimport os\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        supports_check_mode=True,\n        argument_spec=dict(\n            state=dict(type='str', required=False, choices=['present', 'absent'], default='present'),\n            name=dict(type='str', required=True),\n            type=dict(type='str', required=False, choices=['pipe', 'tcp', 'udp', 'transport', 'set']),\n            filter=dict(type='str', required=False),\n            filters=dict(type='list', required=False),\n            severities=dict(type='list', required=False),\n            mutator=dict(type='str', required=False),\n            timeout=dict(type='int', required=False, default=10),\n            handle_silenced=dict(type='bool', required=False, default=False),\n            handle_flapping=dict(type='bool', required=False, default=False),\n            command=dict(type='str', required=False),\n            socket=dict(type='dict', required=False),\n            pipe=dict(type='dict', required=False),\n            handlers=dict(type='list', required=False),\n        ),\n        required_if=[\n            ['state', 'present', ['type']],\n            ['type', 'pipe', ['command']],\n            ['type', 'tcp', ['socket']],\n            ['type', 'udp', ['socket']],\n            ['type', 'transport', ['pipe']],\n            ['type', 'set', ['handlers']]\n        ]\n    )\n\n    state = module.params['state']\n    name = module.params['name']\n    path = '/etc/sensu/conf.d/handlers/{0}.json'.format(name)\n\n    if state == 'absent':\n        if os.path.exists(path):\n            if module.check_mode:\n                msg = '{path} would have been deleted'.format(path=path)\n                module.exit_json(msg=msg, changed=True)\n            else:\n                try:\n                    os.remove(path)\n                    msg = '{path} deleted successfully'.format(path=path)\n                    module.exit_json(msg=msg, changed=True)\n                except OSError as e:\n                    msg = 'Exception when trying to delete {path}: {exception}'\n                    module.fail_json(\n                        msg=msg.format(path=path, exception=str(e)))\n        else:\n            \n            msg = '{path} already does not exist'.format(path=path)\n            module.exit_json(msg=msg)\n\n    \n    config = {'handlers': {name: {}}}\n    args = ['type', 'filter', 'filters', 'severities', 'mutator', 'timeout',\n            'handle_silenced', 'handle_flapping', 'command', 'socket',\n            'pipe', 'handlers']\n\n    for arg in args:\n        if arg in module.params and module.params[arg] is not None:\n            config['handlers'][name][arg] = module.params[arg]\n\n    \n    current_config = None\n    try:\n        current_config = json.load(open(path, 'r'))\n    except (IOError, ValueError):\n        \n        pass\n\n    if current_config is not None and current_config == config:\n        \n        module.exit_json(msg='Handler configuration is already up to date',\n                         config=config['handlers'][name],\n                         file=path,\n                         name=name)\n\n    \n    if not module.check_mode and not os.path.exists(os.path.dirname(path)):\n        try:\n            os.makedirs(os.path.dirname(path))\n        except OSError as e:\n            module.fail_json(msg='Unable to create {0}: {1}'.format(os.path.dirname(path),\n                                                                    str(e)))\n\n    if module.check_mode:\n        module.exit_json(msg='Handler configuration would have been updated',\n                         changed=True,\n                         config=config['handlers'][name],\n                         file=path,\n                         name=name)\n\n    try:\n        with open(path, 'w') as handler:\n            handler.write(json.dumps(config, indent=4))\n            module.exit_json(msg='Handler configuration updated',\n                             changed=True,\n                             config=config['handlers'][name],\n                             file=path,\n                             name=name)\n    except (OSError, IOError) as e:\n        module.fail_json(msg='Unable to write file {0}: {1}'.format(path,\n                                                                    str(e)))\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  sensu handler author   david moreau simard ( dmsimard)  short description  manages sensu handler configuration version added  2 4 description      manages sensu handler configuration      for information  refer sensu documentation  u(https   sensuapp org docs latest reference handlers html)  options    state      description          whether handler present     choices     present    absent        default  present   name      description          a unique name handler  the name cannot contain special characters spaces      required  true   type      description          the handler type     choices     pipe    tcp    udp    transport    set        required  true   filter      description          the sensu event filter (name) use filtering events handler    filters      description          an array sensu event filters (names) use filtering events handler          each array item must string    severities      description          an array check result severities handler handle           note  event resolution bypasses filtering       choices     warning    critical    unknown      mutator      description          the sensu event mutator (name) use mutate event data handler    timeout      description          the handler execution duration timeout seconds (hard stop)          only used pipe tcp handler types      default  10   handle silenced      description          if events matching one silence entries handled      type  bool     default      handle flapping      description          if events flapping state handled      type  bool     default      command      description          the handler command executed          the event data passed process via stdin           note  command attribute required pipe handlers (i e  handlers configured  type    pipe )     socket      description          the socket definition scope  used configure tcp udp handler socket           note  socket attribute required tcp udp handlers (i e  handlers configured  type    tcp   type    udp )     pipe      description          the pipe definition scope  used configure sensu transport pipe           note  pipe attribute required transport handlers (i e  handlers configured  type    transport )     handlers      description          an array sensu event handlers (names) use events using handler set          each array item must string           note  handlers attribute required handler sets (i e  handlers configured  type    set )   notes      check mode supported      examples         configure handler sends event data stdin (pipe)   name  configure irc sensu handler   sensu handler      name   irc handler      type   pipe      command    usr local bin notify irc sh      severities           ok           critical           warning           unknown      timeout  15   notify        restart sensu client       restart sensu server    delete handler   name  delete irc sensu handler   sensu handler      name   irc handler      state   absent     example tcp handler   name  configure tcp sensu handler   sensu handler      name   tcp handler      type   tcp      timeout  30     socket        host   10 0 1 99        port  4444   register  handler   notify        restart sensu client       restart sensu server    name  secure sensu handler configuration file   file      path      handler  file           owner   sensu      group   sensu      mode   0600       return       config    description  effective handler configuration  state present   returned  success   type  dict   sample    name    irc    type    pipe    command     usr local bin notify irc sh   file    description  path handler configuration file   returned  success   type  string   sample    etc sensu conf handlers irc json  name    description  name handler   returned  success   type  string   sample   irc          usr bin python    (c) 2017  red hat inc     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    configure handler sends event data stdin (pipe)    delete handler    example tcp handler    idempotency  okay file exist    build handler configuration module arguments    load current config  one  compare    file either exist invalid json    config  let change anything    validate directory exists trying write ", "content": "#!/usr/bin/python\n\n# (c) 2017, Red Hat Inc.\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: sensu_handler\nauthor: \"David Moreau Simard (@dmsimard)\"\nshort_description: Manages Sensu handler configuration\nversion_added: 2.4\ndescription:\n  - Manages Sensu handler configuration\n  - 'For more information, refer to the Sensu documentation: U(https://sensuapp.org/docs/latest/reference/handlers.html)'\noptions:\n  state:\n    description:\n      - Whether the handler should be present or not\n    choices: [ 'present', 'absent' ]\n    default: present\n  name:\n    description:\n      - A unique name for the handler. The name cannot contain special characters or spaces.\n    required: True\n  type:\n    description:\n      - The handler type\n    choices: [ 'pipe', 'tcp', 'udp', 'transport', 'set' ]\n    required: True\n  filter:\n    description:\n      - The Sensu event filter (name) to use when filtering events for the handler.\n  filters:\n    description:\n      - An array of Sensu event filters (names) to use when filtering events for the handler.\n      - Each array item must be a string.\n  severities:\n    description:\n      - An array of check result severities the handler will handle.\n      - 'NOTE: event resolution bypasses this filtering.'\n    choices: [ 'warning', 'critical', 'unknown' ]\n  mutator:\n    description:\n      - The Sensu event mutator (name) to use to mutate event data for the handler.\n  timeout:\n    description:\n      - The handler execution duration timeout in seconds (hard stop).\n      - Only used by pipe and tcp handler types.\n    default: 10\n  handle_silenced:\n    description:\n      - If events matching one or more silence entries should be handled.\n    type: bool\n    default: 'no'\n  handle_flapping:\n    description:\n      - If events in the flapping state should be handled.\n    type: bool\n    default: 'no'\n  command:\n    description:\n      - The handler command to be executed.\n      - The event data is passed to the process via STDIN.\n      - 'NOTE: the command attribute is only required for Pipe handlers (i.e. handlers configured with \"type\": \"pipe\").'\n  socket:\n    description:\n      - The socket definition scope, used to configure the TCP/UDP handler socket.\n      - 'NOTE: the socket attribute is only required for TCP/UDP handlers (i.e. handlers configured with \"type\": \"tcp\" or \"type\": \"udp\").'\n  pipe:\n    description:\n      - The pipe definition scope, used to configure the Sensu transport pipe.\n      - 'NOTE: the pipe attribute is only required for Transport handlers (i.e. handlers configured with \"type\": \"transport\").'\n  handlers:\n    description:\n      - An array of Sensu event handlers (names) to use for events using the handler set.\n      - Each array item must be a string.\n      - 'NOTE: the handlers attribute is only required for handler sets (i.e. handlers configured with \"type\": \"set\").'\nnotes:\n  - Check mode is supported\n'''\n\nEXAMPLES = '''\n# Configure a handler that sends event data as STDIN (pipe)\n- name: Configure IRC Sensu handler\n  sensu_handler:\n    name: \"irc_handler\"\n    type: \"pipe\"\n    command: \"/usr/local/bin/notify-irc.sh\"\n    severities:\n      - \"ok\"\n      - \"critical\"\n      - \"warning\"\n      - \"unknown\"\n    timeout: 15\n  notify:\n    - Restart sensu-client\n    - Restart sensu-server\n\n# Delete a handler\n- name: Delete IRC Sensu handler\n  sensu_handler:\n    name: \"irc_handler\"\n    state: \"absent\"\n\n# Example of a TCP handler\n- name: Configure TCP Sensu handler\n  sensu_handler:\n    name: \"tcp_handler\"\n    type: \"tcp\"\n    timeout: 30\n    socket:\n      host: \"10.0.1.99\"\n      port: 4444\n  register: handler\n  notify:\n    - Restart sensu-client\n    - Restart sensu-server\n\n- name: Secure Sensu handler configuration file\n  file:\n    path: \"{{ handler['file'] }}\"\n    owner: \"sensu\"\n    group: \"sensu\"\n    mode: \"0600\"\n'''\n\nRETURN = '''\nconfig:\n  description: Effective handler configuration, when state is present\n  returned: success\n  type: dict\n  sample: {'name': 'irc', 'type': 'pipe', 'command': '/usr/local/bin/notify-irc.sh'}\nfile:\n  description: Path to the handler configuration file\n  returned: success\n  type: string\n  sample: \"/etc/sensu/conf.d/handlers/irc.json\"\nname:\n  description: Name of the handler\n  returned: success\n  type: string\n  sample: \"irc\"\n'''\n\nimport json\nimport os\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        supports_check_mode=True,\n        argument_spec=dict(\n            state=dict(type='str', required=False, choices=['present', 'absent'], default='present'),\n            name=dict(type='str', required=True),\n            type=dict(type='str', required=False, choices=['pipe', 'tcp', 'udp', 'transport', 'set']),\n            filter=dict(type='str', required=False),\n            filters=dict(type='list', required=False),\n            severities=dict(type='list', required=False),\n            mutator=dict(type='str', required=False),\n            timeout=dict(type='int', required=False, default=10),\n            handle_silenced=dict(type='bool', required=False, default=False),\n            handle_flapping=dict(type='bool', required=False, default=False),\n            command=dict(type='str', required=False),\n            socket=dict(type='dict', required=False),\n            pipe=dict(type='dict', required=False),\n            handlers=dict(type='list', required=False),\n        ),\n        required_if=[\n            ['state', 'present', ['type']],\n            ['type', 'pipe', ['command']],\n            ['type', 'tcp', ['socket']],\n            ['type', 'udp', ['socket']],\n            ['type', 'transport', ['pipe']],\n            ['type', 'set', ['handlers']]\n        ]\n    )\n\n    state = module.params['state']\n    name = module.params['name']\n    path = '/etc/sensu/conf.d/handlers/{0}.json'.format(name)\n\n    if state == 'absent':\n        if os.path.exists(path):\n            if module.check_mode:\n                msg = '{path} would have been deleted'.format(path=path)\n                module.exit_json(msg=msg, changed=True)\n            else:\n                try:\n                    os.remove(path)\n                    msg = '{path} deleted successfully'.format(path=path)\n                    module.exit_json(msg=msg, changed=True)\n                except OSError as e:\n                    msg = 'Exception when trying to delete {path}: {exception}'\n                    module.fail_json(\n                        msg=msg.format(path=path, exception=str(e)))\n        else:\n            # Idempotency: it's okay if the file doesn't exist\n            msg = '{path} already does not exist'.format(path=path)\n            module.exit_json(msg=msg)\n\n    # Build handler configuration from module arguments\n    config = {'handlers': {name: {}}}\n    args = ['type', 'filter', 'filters', 'severities', 'mutator', 'timeout',\n            'handle_silenced', 'handle_flapping', 'command', 'socket',\n            'pipe', 'handlers']\n\n    for arg in args:\n        if arg in module.params and module.params[arg] is not None:\n            config['handlers'][name][arg] = module.params[arg]\n\n    # Load the current config, if there is one, so we can compare\n    current_config = None\n    try:\n        current_config = json.load(open(path, 'r'))\n    except (IOError, ValueError):\n        # File either doesn't exist or it's invalid JSON\n        pass\n\n    if current_config is not None and current_config == config:\n        # Config is the same, let's not change anything\n        module.exit_json(msg='Handler configuration is already up to date',\n                         config=config['handlers'][name],\n                         file=path,\n                         name=name)\n\n    # Validate that directory exists before trying to write to it\n    if not module.check_mode and not os.path.exists(os.path.dirname(path)):\n        try:\n            os.makedirs(os.path.dirname(path))\n        except OSError as e:\n            module.fail_json(msg='Unable to create {0}: {1}'.format(os.path.dirname(path),\n                                                                    str(e)))\n\n    if module.check_mode:\n        module.exit_json(msg='Handler configuration would have been updated',\n                         changed=True,\n                         config=config['handlers'][name],\n                         file=path,\n                         name=name)\n\n    try:\n        with open(path, 'w') as handler:\n            handler.write(json.dumps(config, indent=4))\n            module.exit_json(msg='Handler configuration updated',\n                             changed=True,\n                             config=config['handlers'][name],\n                             file=path,\n                             name=name)\n    except (OSError, IOError) as e:\n        module.fail_json(msg='Unable to write file {0}: {1}'.format(path,\n                                                                    str(e)))\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "sensu_handler.py", "id": "379b329495d0629b061a8c0c4026af81", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/monitoring/sensu_handler.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}