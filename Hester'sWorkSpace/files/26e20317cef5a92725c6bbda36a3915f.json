{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\"\"\"Library of AstroNet models and configurations.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom astronet.astro_cnn_model import astro_cnn_model\nfrom astronet.astro_cnn_model import configurations as astro_cnn_configurations\nfrom astronet.astro_fc_model import astro_fc_model\nfrom astronet.astro_fc_model import configurations as astro_fc_configurations\nfrom astronet.astro_model import astro_model\nfrom astronet.astro_model import configurations as astro_configurations\n\n Dictionary of model name to (model_class, configuration_module).\n_MODELS = {\n    \"AstroModel\": (astro_model.AstroModel, astro_configurations),\n    \"AstroFCModel\": (astro_fc_model.AstroFCModel, astro_fc_configurations),\n    \"AstroCNNModel\": (astro_cnn_model.AstroCNNModel, astro_cnn_configurations),\n}\n\n\ndef get_model_class(model_name):\n  \"\"\"Looks up a model class by name.\n\n  Args:\n    model_name: Name of the model class.\n\n  Returns:\n    model_class: The requested model class.\n\n  Raises:\n    ValueError: If model_name is unrecognized.\n  \"\"\"\n  if model_name not in _MODELS:\n    raise ValueError(\"Unrecognized model name: %s\" % model_name)\n\n  return _MODELS[model_name][0]\n\n\ndef get_model_config(model_name, config_name):\n  \"\"\"Looks up a model configuration by name.\n\n  Args:\n    model_name: Name of the model class.\n    config_name: Name of a configuration-builder function from the model's\n        configurations module.\n\n  Returns:\n    model_class: The requested model class.\n    config: The requested configuration.\n\n  Raises:\n    ValueError: If model_name or config_name is unrecognized.\n  \"\"\"\n  if model_name not in _MODELS:\n    raise ValueError(\"Unrecognized model name: %s\" % model_name)\n\n  config_module = _MODELS[model_name][1]\n  try:\n    return getattr(config_module, config_name)()\n  except AttributeError:\n    raise ValueError(\"Config name '%s' not found in configuration module: %s\" %\n                     (config_name, config_module.__name__))\n", "comments": "   library astronet models configurations        future   import absolute import   future   import division   future   import print function  astronet astro cnn model import astro cnn model astronet astro cnn model import configurations astro cnn configurations astronet astro fc model import astro fc model astronet astro fc model import configurations astro fc configurations astronet astro model import astro model astronet astro model import configurations astro configurations    dictionary model name (model class  configuration module)   models          astromodel   (astro model astromodel  astro configurations)       astrofcmodel   (astro fc model astrofcmodel  astro fc configurations)       astrocnnmodel   (astro cnn model astrocnnmodel  astro cnn configurations)      def get model class(model name)       looks model class name     args      model name  name model class     returns      model class  the requested model class     raises      valueerror  if model name unrecognized          model name  models      raise valueerror( unrecognized model name      model name)    return  models model name  0    def get model config(model name  config name)       looks model configuration name     args      model name  name model class      config name  name configuration builder function model         configurations module     returns      model class  the requested model class      config  the requested configuration     raises      valueerror  if model name config name unrecognized           copyright 2018 the tensorflow authors        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license     dictionary model name (model class  configuration module)  ", "content": "# Copyright 2018 The TensorFlow Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Library of AstroNet models and configurations.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom astronet.astro_cnn_model import astro_cnn_model\nfrom astronet.astro_cnn_model import configurations as astro_cnn_configurations\nfrom astronet.astro_fc_model import astro_fc_model\nfrom astronet.astro_fc_model import configurations as astro_fc_configurations\nfrom astronet.astro_model import astro_model\nfrom astronet.astro_model import configurations as astro_configurations\n\n# Dictionary of model name to (model_class, configuration_module).\n_MODELS = {\n    \"AstroModel\": (astro_model.AstroModel, astro_configurations),\n    \"AstroFCModel\": (astro_fc_model.AstroFCModel, astro_fc_configurations),\n    \"AstroCNNModel\": (astro_cnn_model.AstroCNNModel, astro_cnn_configurations),\n}\n\n\ndef get_model_class(model_name):\n  \"\"\"Looks up a model class by name.\n\n  Args:\n    model_name: Name of the model class.\n\n  Returns:\n    model_class: The requested model class.\n\n  Raises:\n    ValueError: If model_name is unrecognized.\n  \"\"\"\n  if model_name not in _MODELS:\n    raise ValueError(\"Unrecognized model name: %s\" % model_name)\n\n  return _MODELS[model_name][0]\n\n\ndef get_model_config(model_name, config_name):\n  \"\"\"Looks up a model configuration by name.\n\n  Args:\n    model_name: Name of the model class.\n    config_name: Name of a configuration-builder function from the model's\n        configurations module.\n\n  Returns:\n    model_class: The requested model class.\n    config: The requested configuration.\n\n  Raises:\n    ValueError: If model_name or config_name is unrecognized.\n  \"\"\"\n  if model_name not in _MODELS:\n    raise ValueError(\"Unrecognized model name: %s\" % model_name)\n\n  config_module = _MODELS[model_name][1]\n  try:\n    return getattr(config_module, config_name)()\n  except AttributeError:\n    raise ValueError(\"Config name '%s' not found in configuration module: %s\" %\n                     (config_name, config_module.__name__))\n", "description": "Models and examples built with TensorFlow", "file_name": "models.py", "id": "26e20317cef5a92725c6bbda36a3915f", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/astronet/astronet/models.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}