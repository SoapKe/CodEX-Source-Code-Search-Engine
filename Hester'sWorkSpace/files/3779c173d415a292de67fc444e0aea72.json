{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import models, fields, api, _\nfrom odoo.exceptions import UserError\n\nfrom odoo.addons import decimal_precision as dp\n\n\nclass StockQuantPackage(models.Model):\n    _inherit = \"stock.quant.package\"\n\n    @api.one\n    @api.depends('quant_ids')\n    def _compute_weight(self):\n        weight = 0.0\n        if self.env.context.get('picking_id'):\n            for ml in self.current_picking_move_line_ids:\n                weight += ml.product_uom_id._compute_quantity(ml.qty_done,ml.product_id.uom_id) * ml.product_id.weight\n        else:\n            for quant in self.quant_ids:\n                weight += quant.quantity * quant.product_id.weight\n        self.weight = weight\n\n    weight = fields.Float(compute='_compute_weight')\n    shipping_weight = fields.Float(string='Shipping Weight', help=\"Can be changed during the 'put in pack' to adjust the weight of the shipping.\")\n\n\nclass StockMoveLine(models.Model):\n    _inherit = 'stock.move.line'\n\n    @api.multi\n    def manage_package_type(self):\n        self.ensure_one()\n        view_id = self.env.ref('delivery.choose_delivery_package_view_form').id\n        return {\n            'name': _('Package Details'),\n            'type': 'ir.actions.act_window',\n            'view_mode': 'form',\n            'res_model': 'choose.delivery.package',\n            'view_id': view_id,\n            'views': [(view_id, 'form')],\n            'target': 'new',\n            'context': {\n                'default_stock_quant_package_id': self.result_package_id.id,\n                'current_package_carrier_type': self.picking_id.carrier_id.delivery_type if self.picking_id.carrier_id.delivery_type not in ['base_on_rule', 'fixed'] else 'none',\n                }\n        }\n\n\nclass StockPicking(models.Model):\n    _inherit = 'stock.picking'\n\n    def _default_uom(self):\n        weight_uom_id = self.env.ref('product.product_uom_kgm', raise_if_not_found=False)\n        if not weight_uom_id:\n            uom_categ_id = self.env.ref('product.product_uom_categ_kgm').id\n            weight_uom_id = self.env['product.uom'].search([('category_id', '=', uom_categ_id), ('factor', '=', 1)], limit=1)\n        return weight_uom_id\n\n    @api.one\n    @api.depends('move_line_ids')\n    def _compute_packages(self):\n        self.ensure_one()\n        packs = set()\n        for move_line in self.move_line_ids:\n            if move_line.result_package_id:\n                packs.add(move_line.result_package_id.id)\n        self.package_ids = list(packs)\n\n    @api.one\n    @api.depends('move_line_ids')\n    def _compute_bulk_weight(self):\n        weight = 0.0\n        for move_line in self.move_line_ids:\n            if move_line.product_id and not move_line.result_package_id:\n                weight += move_line.product_uom_id._compute_quantity(move_line.qty_done, move_line.product_id.uom_id) * move_line.product_id.weight\n        self.weight_bulk = weight\n\n    @api.one\n    @api.depends('package_ids', 'weight_bulk')\n    def _compute_shipping_weight(self):\n        self.shipping_weight = self.weight_bulk + sum([pack.shipping_weight for pack in self.package_ids])\n\n    carrier_price = fields.Float(string=\"Shipping Cost\")\n    delivery_type = fields.Selection(related='carrier_id.delivery_type', readonly=True)\n    carrier_id = fields.Many2one(\"delivery.carrier\", string=\"Carrier\")\n    volume = fields.Float(copy=False)\n    weight = fields.Float(compute='_cal_weight', digits=dp.get_precision('Stock Weight'), store=True)\n    carrier_tracking_ref = fields.Char(string='Tracking Reference', copy=False)\n    carrier_tracking_url = fields.Char(string='Tracking URL', compute='_compute_carrier_tracking_url')\n    number_of_packages = fields.Integer(string='Number of Packages', copy=False)\n    weight_uom_id = fields.Many2one('product.uom', string='Unit of Measure', required=True, readonly=\"1\", help=\"Unit of measurement for Weight\", default=_default_uom)\n    package_ids = fields.Many2many('stock.quant.package', compute='_compute_packages', string='Packages')\n    weight_bulk = fields.Float('Bulk Weight', compute='_compute_bulk_weight')\n    shipping_weight = fields.Float(\"Weight for Shipping\", compute='_compute_shipping_weight')\n\n    @api.depends('carrier_id', 'carrier_tracking_ref')\n    def _compute_carrier_tracking_url(self):\n        for picking in self:\n            picking.carrier_tracking_url = picking.carrier_id.get_tracking_link(picking) if picking.carrier_id and picking.carrier_tracking_ref else False\n\n    @api.depends('product_id', 'move_lines')\n    def _cal_weight(self):\n        for picking in self:\n            picking.weight = sum(move.weight for move in picking.move_lines if move.state != 'cancel')\n\n    @api.multi\n    def action_done(self):\n        res = super(StockPicking, self).action_done()\n        for pick in self:\n            if pick.carrier_id:\n                if pick.carrier_id.integration_level == 'rate_and_ship':\n                    pick.send_to_shipper()\n                pick._add_delivery_cost_to_so()\n        return res\n\n    @api.multi\n    def put_in_pack(self):\n        if self.carrier_id and self.carrier_id.delivery_type not in ['base_on_rule', 'fixed']:\n            view_id = self.env.ref('delivery.choose_delivery_package_view_form').id\n            return {\n                'name': _('Package Details'),\n                'type': 'ir.actions.act_window',\n                'view_mode': 'form',\n                'res_model': 'choose.delivery.package',\n                'view_id': view_id,\n                'views': [(view_id, 'form')],\n                'target': 'new',\n                'context': {\n                    'current_package_carrier_type': self.carrier_id.delivery_type,\n                }\n            }\n        else:\n            return self._put_in_pack()\n\n    @api.multi\n    def action_send_confirmation_email(self):\n        self.ensure_one()\n        delivery_template_id = self.env.ref('delivery.mail_template_data_delivery_confirmation').id\n        compose_form_id = self.env.ref('mail.email_compose_message_wizard_form').id\n        ctx = dict(\n            default_composition_mode='comment',\n            default_res_id=self.id,\n            default_model='stock.picking',\n            default_use_template=bool(delivery_template_id),\n            default_template_id=delivery_template_id,\n            custom_layout='delivery.mail_template_data_delivery_notification'\n        )\n        return {\n            'type': 'ir.actions.act_window',\n            'view_type': 'form',\n            'view_mode': 'form',\n            'res_model': 'mail.compose.message',\n            'view_id': compose_form_id,\n            'target': 'new',\n            'context': ctx,\n        }\n\n    @api.multi\n    def send_to_shipper(self):\n        self.ensure_one()\n        res = self.carrier_id.send_shipping(self)[0]\n        self.carrier_price = res['exact_price']\n        self.carrier_tracking_ref = res['tracking_number']\n        order_currency = self.sale_id.currency_id or self.company_id.currency_id\n        msg = _(\"Shipment sent to carrier %s for shipping with tracking number %s<br/>Cost: %.2f %s\") % (self.carrier_id.name, self.carrier_tracking_ref, self.carrier_price, order_currency.name)\n        self.message_post(body=msg)\n\n    @api.multi\n    def _add_delivery_cost_to_so(self):\n        self.ensure_one()\n        sale_order = self.sale_id\n        if sale_order.invoice_shipping_on_delivery:\n            sale_order._create_delivery_line(self.carrier_id, self.carrier_price)\n\n    @api.multi\n    def open_website_url(self):\n        self.ensure_one()\n        if not self.carrier_tracking_url:\n            raise UserError(_(\"Your delivery method has no redirect on courier provider's website to track this order.\"))\n\n        client_action = {'type': 'ir.actions.act_url',\n                         'name': \"Shipment Tracking Page\",\n                         'target': 'new',\n                         'url': self.carrier_tracking_url,\n                         }\n        return client_action\n\n    @api.one\n    def cancel_shipment(self):\n        self.carrier_id.cancel_shipment(self)\n        msg = \"Shipment %s cancelled\" % self.carrier_tracking_ref\n        self.message_post(body=msg)\n        self.carrier_tracking_ref = False\n\n    @api.multi\n    def check_packages_are_identical(self):\n        \n        self.ensure_one()\n        if self.package_ids:\n            packages = [p.packaging_id for p in self.package_ids]\n            if len(set(packages)) != 1:\n                package_names = ', '.join([str(p.name) for p in packages])\n                raise UserError(_('You are shipping different packaging types in the same shipment.\\nPackaging Types: %s' % package_names))\n        return True\n\n\nclass StockReturnPicking(models.TransientModel):\n    _inherit = 'stock.return.picking'\n\n    @api.multi\n    def _create_returns(self):\n        \n        # (we have no integration of returns for now)\n        new_picking, pick_type_id = super(StockReturnPicking, self)._create_returns()\n        picking = self.env['stock.picking'].browse(new_picking)\n        picking.write({'carrier_id': False,\n                       'carrier_price': 0.0})\n        return new_picking, pick_type_id\n", "comments": "   some shippers require identical packages shipment  this utility checks            coding  utf 8        part odoo  see license file full copyright licensing details     prevent copy carrier carrier price generating return picking    (we integration returns now) ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import models, fields, api, _\nfrom odoo.exceptions import UserError\n\nfrom odoo.addons import decimal_precision as dp\n\n\nclass StockQuantPackage(models.Model):\n    _inherit = \"stock.quant.package\"\n\n    @api.one\n    @api.depends('quant_ids')\n    def _compute_weight(self):\n        weight = 0.0\n        if self.env.context.get('picking_id'):\n            for ml in self.current_picking_move_line_ids:\n                weight += ml.product_uom_id._compute_quantity(ml.qty_done,ml.product_id.uom_id) * ml.product_id.weight\n        else:\n            for quant in self.quant_ids:\n                weight += quant.quantity * quant.product_id.weight\n        self.weight = weight\n\n    weight = fields.Float(compute='_compute_weight')\n    shipping_weight = fields.Float(string='Shipping Weight', help=\"Can be changed during the 'put in pack' to adjust the weight of the shipping.\")\n\n\nclass StockMoveLine(models.Model):\n    _inherit = 'stock.move.line'\n\n    @api.multi\n    def manage_package_type(self):\n        self.ensure_one()\n        view_id = self.env.ref('delivery.choose_delivery_package_view_form').id\n        return {\n            'name': _('Package Details'),\n            'type': 'ir.actions.act_window',\n            'view_mode': 'form',\n            'res_model': 'choose.delivery.package',\n            'view_id': view_id,\n            'views': [(view_id, 'form')],\n            'target': 'new',\n            'context': {\n                'default_stock_quant_package_id': self.result_package_id.id,\n                'current_package_carrier_type': self.picking_id.carrier_id.delivery_type if self.picking_id.carrier_id.delivery_type not in ['base_on_rule', 'fixed'] else 'none',\n                }\n        }\n\n\nclass StockPicking(models.Model):\n    _inherit = 'stock.picking'\n\n    def _default_uom(self):\n        weight_uom_id = self.env.ref('product.product_uom_kgm', raise_if_not_found=False)\n        if not weight_uom_id:\n            uom_categ_id = self.env.ref('product.product_uom_categ_kgm').id\n            weight_uom_id = self.env['product.uom'].search([('category_id', '=', uom_categ_id), ('factor', '=', 1)], limit=1)\n        return weight_uom_id\n\n    @api.one\n    @api.depends('move_line_ids')\n    def _compute_packages(self):\n        self.ensure_one()\n        packs = set()\n        for move_line in self.move_line_ids:\n            if move_line.result_package_id:\n                packs.add(move_line.result_package_id.id)\n        self.package_ids = list(packs)\n\n    @api.one\n    @api.depends('move_line_ids')\n    def _compute_bulk_weight(self):\n        weight = 0.0\n        for move_line in self.move_line_ids:\n            if move_line.product_id and not move_line.result_package_id:\n                weight += move_line.product_uom_id._compute_quantity(move_line.qty_done, move_line.product_id.uom_id) * move_line.product_id.weight\n        self.weight_bulk = weight\n\n    @api.one\n    @api.depends('package_ids', 'weight_bulk')\n    def _compute_shipping_weight(self):\n        self.shipping_weight = self.weight_bulk + sum([pack.shipping_weight for pack in self.package_ids])\n\n    carrier_price = fields.Float(string=\"Shipping Cost\")\n    delivery_type = fields.Selection(related='carrier_id.delivery_type', readonly=True)\n    carrier_id = fields.Many2one(\"delivery.carrier\", string=\"Carrier\")\n    volume = fields.Float(copy=False)\n    weight = fields.Float(compute='_cal_weight', digits=dp.get_precision('Stock Weight'), store=True)\n    carrier_tracking_ref = fields.Char(string='Tracking Reference', copy=False)\n    carrier_tracking_url = fields.Char(string='Tracking URL', compute='_compute_carrier_tracking_url')\n    number_of_packages = fields.Integer(string='Number of Packages', copy=False)\n    weight_uom_id = fields.Many2one('product.uom', string='Unit of Measure', required=True, readonly=\"1\", help=\"Unit of measurement for Weight\", default=_default_uom)\n    package_ids = fields.Many2many('stock.quant.package', compute='_compute_packages', string='Packages')\n    weight_bulk = fields.Float('Bulk Weight', compute='_compute_bulk_weight')\n    shipping_weight = fields.Float(\"Weight for Shipping\", compute='_compute_shipping_weight')\n\n    @api.depends('carrier_id', 'carrier_tracking_ref')\n    def _compute_carrier_tracking_url(self):\n        for picking in self:\n            picking.carrier_tracking_url = picking.carrier_id.get_tracking_link(picking) if picking.carrier_id and picking.carrier_tracking_ref else False\n\n    @api.depends('product_id', 'move_lines')\n    def _cal_weight(self):\n        for picking in self:\n            picking.weight = sum(move.weight for move in picking.move_lines if move.state != 'cancel')\n\n    @api.multi\n    def action_done(self):\n        res = super(StockPicking, self).action_done()\n        for pick in self:\n            if pick.carrier_id:\n                if pick.carrier_id.integration_level == 'rate_and_ship':\n                    pick.send_to_shipper()\n                pick._add_delivery_cost_to_so()\n        return res\n\n    @api.multi\n    def put_in_pack(self):\n        if self.carrier_id and self.carrier_id.delivery_type not in ['base_on_rule', 'fixed']:\n            view_id = self.env.ref('delivery.choose_delivery_package_view_form').id\n            return {\n                'name': _('Package Details'),\n                'type': 'ir.actions.act_window',\n                'view_mode': 'form',\n                'res_model': 'choose.delivery.package',\n                'view_id': view_id,\n                'views': [(view_id, 'form')],\n                'target': 'new',\n                'context': {\n                    'current_package_carrier_type': self.carrier_id.delivery_type,\n                }\n            }\n        else:\n            return self._put_in_pack()\n\n    @api.multi\n    def action_send_confirmation_email(self):\n        self.ensure_one()\n        delivery_template_id = self.env.ref('delivery.mail_template_data_delivery_confirmation').id\n        compose_form_id = self.env.ref('mail.email_compose_message_wizard_form').id\n        ctx = dict(\n            default_composition_mode='comment',\n            default_res_id=self.id,\n            default_model='stock.picking',\n            default_use_template=bool(delivery_template_id),\n            default_template_id=delivery_template_id,\n            custom_layout='delivery.mail_template_data_delivery_notification'\n        )\n        return {\n            'type': 'ir.actions.act_window',\n            'view_type': 'form',\n            'view_mode': 'form',\n            'res_model': 'mail.compose.message',\n            'view_id': compose_form_id,\n            'target': 'new',\n            'context': ctx,\n        }\n\n    @api.multi\n    def send_to_shipper(self):\n        self.ensure_one()\n        res = self.carrier_id.send_shipping(self)[0]\n        self.carrier_price = res['exact_price']\n        self.carrier_tracking_ref = res['tracking_number']\n        order_currency = self.sale_id.currency_id or self.company_id.currency_id\n        msg = _(\"Shipment sent to carrier %s for shipping with tracking number %s<br/>Cost: %.2f %s\") % (self.carrier_id.name, self.carrier_tracking_ref, self.carrier_price, order_currency.name)\n        self.message_post(body=msg)\n\n    @api.multi\n    def _add_delivery_cost_to_so(self):\n        self.ensure_one()\n        sale_order = self.sale_id\n        if sale_order.invoice_shipping_on_delivery:\n            sale_order._create_delivery_line(self.carrier_id, self.carrier_price)\n\n    @api.multi\n    def open_website_url(self):\n        self.ensure_one()\n        if not self.carrier_tracking_url:\n            raise UserError(_(\"Your delivery method has no redirect on courier provider's website to track this order.\"))\n\n        client_action = {'type': 'ir.actions.act_url',\n                         'name': \"Shipment Tracking Page\",\n                         'target': 'new',\n                         'url': self.carrier_tracking_url,\n                         }\n        return client_action\n\n    @api.one\n    def cancel_shipment(self):\n        self.carrier_id.cancel_shipment(self)\n        msg = \"Shipment %s cancelled\" % self.carrier_tracking_ref\n        self.message_post(body=msg)\n        self.carrier_tracking_ref = False\n\n    @api.multi\n    def check_packages_are_identical(self):\n        '''Some shippers require identical packages in the same shipment. This utility checks it.'''\n        self.ensure_one()\n        if self.package_ids:\n            packages = [p.packaging_id for p in self.package_ids]\n            if len(set(packages)) != 1:\n                package_names = ', '.join([str(p.name) for p in packages])\n                raise UserError(_('You are shipping different packaging types in the same shipment.\\nPackaging Types: %s' % package_names))\n        return True\n\n\nclass StockReturnPicking(models.TransientModel):\n    _inherit = 'stock.return.picking'\n\n    @api.multi\n    def _create_returns(self):\n        # Prevent copy of the carrier and carrier price when generating return picking\n        # (we have no integration of returns for now)\n        new_picking, pick_type_id = super(StockReturnPicking, self)._create_returns()\n        picking = self.env['stock.picking'].browse(new_picking)\n        picking.write({'carrier_id': False,\n                       'carrier_price': 0.0})\n        return new_picking, pick_type_id\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "stock_picking.py", "id": "3779c173d415a292de67fc444e0aea72", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/delivery/models/stock_picking.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}