{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\nimport hashlib\n\nfrom .common import InfoExtractor\n\n_md5 = lambda s: hashlib.md5(s.encode('utf-8')).hexdigest()\n\n\nclass KankanIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:.*?\\.)?kankan\\.com/.+?/(?P<id>\\d+)\\.shtml'\n\n    _TEST = {\n        'url': 'http://yinyue.kankan.com/vod/48/48863.shtml',\n        'md5': '29aca1e47ae68fc28804aca89f29507e',\n        'info_dict': {\n            'id': '48863',\n            'ext': 'flv',\n            'title': 'Ready To Go',\n        },\n        'skip': 'Only available from China',\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._search_regex(r'(?:G_TITLE=|G_MOVIE_TITLE = )[\\'\"](.+?)[\\'\"]', webpage, 'video title')\n        surls = re.search(r'surls:\\[\\'.+?\\'\\]|lurl:\\'.+?\\.flv\\'', webpage).group(0)\n        gcids = re.findall(r'http://.+?/.+?/(.+?)/', surls)\n        gcid = gcids[-1]\n\n        info_url = 'http://p2s.cl.kankan.com/getCdnresource_flv?gcid=%s' % gcid\n        video_info_page = self._download_webpage(\n            info_url, video_id, 'Downloading video url info')\n        ip = self._search_regex(r'ip:\"(.+?)\"', video_info_page, 'video url ip')\n        path = self._search_regex(r'path:\"(.+?)\"', video_info_page, 'video url path')\n        param1 = self._search_regex(r'param1:(\\d+)', video_info_page, 'param1')\n        param2 = self._search_regex(r'param2:(\\d+)', video_info_page, 'param2')\n        key = _md5('xl_mp43651' + param1 + param2)\n        video_url = 'http://%s%s?key=%s&key1=%s' % (ip, path, key, param2)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'url': video_url,\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport re\nimport hashlib\n\nfrom .common import InfoExtractor\n\n_md5 = lambda s: hashlib.md5(s.encode('utf-8')).hexdigest()\n\n\nclass KankanIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:.*?\\.)?kankan\\.com/.+?/(?P<id>\\d+)\\.shtml'\n\n    _TEST = {\n        'url': 'http://yinyue.kankan.com/vod/48/48863.shtml',\n        'md5': '29aca1e47ae68fc28804aca89f29507e',\n        'info_dict': {\n            'id': '48863',\n            'ext': 'flv',\n            'title': 'Ready To Go',\n        },\n        'skip': 'Only available from China',\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._search_regex(r'(?:G_TITLE=|G_MOVIE_TITLE = )[\\'\"](.+?)[\\'\"]', webpage, 'video title')\n        surls = re.search(r'surls:\\[\\'.+?\\'\\]|lurl:\\'.+?\\.flv\\'', webpage).group(0)\n        gcids = re.findall(r'http://.+?/.+?/(.+?)/', surls)\n        gcid = gcids[-1]\n\n        info_url = 'http://p2s.cl.kankan.com/getCdnresource_flv?gcid=%s' % gcid\n        video_info_page = self._download_webpage(\n            info_url, video_id, 'Downloading video url info')\n        ip = self._search_regex(r'ip:\"(.+?)\"', video_info_page, 'video url ip')\n        path = self._search_regex(r'path:\"(.+?)\"', video_info_page, 'video url path')\n        param1 = self._search_regex(r'param1:(\\d+)', video_info_page, 'param1')\n        param2 = self._search_regex(r'param2:(\\d+)', video_info_page, 'param2')\n        key = _md5('xl_mp43651' + param1 + param2)\n        video_url = 'http://%s%s?key=%s&key1=%s' % (ip, path, key, param2)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'url': video_url,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "kankan.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/kankan.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}