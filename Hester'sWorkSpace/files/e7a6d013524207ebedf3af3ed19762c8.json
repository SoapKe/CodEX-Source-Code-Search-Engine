{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass VidioIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vidio\\.com/watch/(?P<id>\\d+)-(?P<display_id>[^/?\n    _TESTS = [{\n        'url': 'http://www.vidio.com/watch/165683-dj_ambred-booyah-live-2015',\n        'md5': 'cd2801394afc164e9775db6a140b91fe',\n        'info_dict': {\n            'id': '165683',\n            'display_id': 'dj_ambred-booyah-live-2015',\n            'ext': 'mp4',\n            'title': 'DJ_AMBRED - Booyah (Live 2015)',\n            'description': 'md5:27dc15f819b6a78a626490881adbadf8',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 149,\n            'like_count': int,\n        },\n    }, {\n        'url': 'https://www.vidio.com/watch/77949-south-korea-test-fires-missile-that-can-strike-all-of-the-north',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        title = self._og_search_title(webpage)\n\n        m3u8_url, duration, thumbnail = [None] * 3\n\n        clips = self._parse_json(\n            self._html_search_regex(\n                r'data-json-clips\\s*=\\s*([\"\\'])(?P<data>\\[.+?\\])\\1',\n                webpage, 'video data', default='[]', group='data'),\n            display_id, fatal=False)\n        if clips:\n            clip = clips[0]\n            m3u8_url = clip.get('sources', [{}])[0].get('file')\n            duration = clip.get('clip_duration')\n            thumbnail = clip.get('image')\n\n        m3u8_url = m3u8_url or self._search_regex(\n            r'data(?:-vjs)?-clip-hls-url=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1',\n            webpage, 'hls url', group='url')\n        formats = self._extract_m3u8_formats(\n            m3u8_url, display_id, 'mp4', entry_protocol='m3u8_native')\n        self._sort_formats(formats)\n\n        duration = int_or_none(duration or self._search_regex(\n            r'data-video-duration=([\"\\'])(?P<duration>\\d+)\\1', webpage,\n            'duration', fatal=False, group='duration'))\n        thumbnail = thumbnail or self._og_search_thumbnail(webpage)\n\n        like_count = int_or_none(self._search_regex(\n            (r'<span[^>]+data-comment-vote-count=[\"\\'](\\d+)',\n             r'<span[^>]+class=[\"\\'].*?\\blike(?:__|-)count\\b.*?[\"\\'][^>]*>\\s*(\\d+)'),\n            webpage, 'like count', fatal=False))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': self._og_search_description(webpage),\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'like_count': like_count,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#&]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass VidioIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vidio\\.com/watch/(?P<id>\\d+)-(?P<display_id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'http://www.vidio.com/watch/165683-dj_ambred-booyah-live-2015',\n        'md5': 'cd2801394afc164e9775db6a140b91fe',\n        'info_dict': {\n            'id': '165683',\n            'display_id': 'dj_ambred-booyah-live-2015',\n            'ext': 'mp4',\n            'title': 'DJ_AMBRED - Booyah (Live 2015)',\n            'description': 'md5:27dc15f819b6a78a626490881adbadf8',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 149,\n            'like_count': int,\n        },\n    }, {\n        'url': 'https://www.vidio.com/watch/77949-south-korea-test-fires-missile-that-can-strike-all-of-the-north',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        title = self._og_search_title(webpage)\n\n        m3u8_url, duration, thumbnail = [None] * 3\n\n        clips = self._parse_json(\n            self._html_search_regex(\n                r'data-json-clips\\s*=\\s*([\"\\'])(?P<data>\\[.+?\\])\\1',\n                webpage, 'video data', default='[]', group='data'),\n            display_id, fatal=False)\n        if clips:\n            clip = clips[0]\n            m3u8_url = clip.get('sources', [{}])[0].get('file')\n            duration = clip.get('clip_duration')\n            thumbnail = clip.get('image')\n\n        m3u8_url = m3u8_url or self._search_regex(\n            r'data(?:-vjs)?-clip-hls-url=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1',\n            webpage, 'hls url', group='url')\n        formats = self._extract_m3u8_formats(\n            m3u8_url, display_id, 'mp4', entry_protocol='m3u8_native')\n        self._sort_formats(formats)\n\n        duration = int_or_none(duration or self._search_regex(\n            r'data-video-duration=([\"\\'])(?P<duration>\\d+)\\1', webpage,\n            'duration', fatal=False, group='duration'))\n        thumbnail = thumbnail or self._og_search_thumbnail(webpage)\n\n        like_count = int_or_none(self._search_regex(\n            (r'<span[^>]+data-comment-vote-count=[\"\\'](\\d+)',\n             r'<span[^>]+class=[\"\\'].*?\\blike(?:__|-)count\\b.*?[\"\\'][^>]*>\\s*(\\d+)'),\n            webpage, 'like count', fatal=False))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': self._og_search_description(webpage),\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'like_count': like_count,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vidio.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vidio.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}