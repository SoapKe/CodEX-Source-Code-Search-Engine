{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo.tests.common import TransactionCase\nimport time\n\n\nclass TestHrAttendance(TransactionCase):\n    \n\n    def setUp(self):\n        super(TestHrAttendance, self).setUp()\n        self.attendance = self.env['hr.attendance']\n        self.test_employee = self.browse_ref('hr.employee_qdp')\n        \n\n    def test_attendance_in_before_out(self):\n        \n        with self.assertRaises(Exception):\n            self.my_attend = self.attendance.create({\n                'employee_id': self.test_employee.id,\n                'check_in': time.strftime('%Y-%m-10 12:00'),\n                'check_out': time.strftime('%Y-%m-10 11:00'),\n            })\n\n    def test_attendance_no_check_out(self):\n        \n        self.attendance.create({\n            'employee_id': self.test_employee.id,\n            'check_in': time.strftime('%Y-%m-10 10:00'),\n        })\n        with self.assertRaises(Exception):\n            self.attendance.create({\n                'employee_id': self.test_employee.id,\n                'check_in': time.strftime('%Y-%m-10 11:00'),\n            })\n\n    \n    def test_attendance_1(self):\n        with self.assertRaises(Exception):\n            self.attendance.create({\n                'employee_id': self.test_employee.id,\n                'check_in': time.strftime('%Y-%m-10 08:30'),\n                'check_out': time.strftime('%Y-%m-10 09:30'),\n            })\n\n    def test_attendance_2(self):\n        with self.assertRaises(Exception):\n            self.attendance.create({\n                'employee_id': self.test_employee.id,\n                'check_in': time.strftime('%Y-%m-10 07:30'),\n                'check_out': time.strftime('%Y-%m-10 08:30'),\n            })\n\n    def test_attendance_3(self):\n        with self.assertRaises(Exception):\n            self.attendance.create({\n                'employee_id': self.test_employee.id,\n                'check_in': time.strftime('%Y-%m-10 07:30'),\n                'check_out': time.strftime('%Y-%m-10 09:30'),\n            })\n\n    def test_attendance_4(self):\n        with self.assertRaises(Exception):\n            self.attendance.create({\n                'employee_id': self.test_employee.id,\n                'check_in': time.strftime('%Y-%m-10 08:15'),\n                'check_out': time.strftime('%Y-%m-10 08:45'),\n            })\n\n    def test_attendance_5(self):\n        self.attendance.create({\n            'employee_id': self.test_employee.id,\n            'check_in': time.strftime('%Y-%m-10 10:00'),\n        })\n        with self.assertRaises(Exception):\n            self.attendance.create({\n                'employee_id': self.test_employee.id,\n                'check_in': time.strftime('%Y-%m-10 09:30'),\n                'check_out': time.strftime('%Y-%m-10 10:30'),\n            })\n\n    def test_new_attendances(self):\n        \n        self.attendance.create({\n            'employee_id': self.test_employee.id,\n            'check_in': time.strftime('%Y-%m-10 11:00'),\n            'check_out': time.strftime('%Y-%m-10 12:00'),\n        })\n        open_attendance = self.attendance.create({\n            'employee_id': self.test_employee.id,\n            'check_in': time.strftime('%Y-%m-10 10:00'),\n        })\n        with self.assertRaises(Exception):\n            open_attendance.write({\n                'check_out': time.strftime('%Y-%m-10 11:30'),\n            })\n", "comments": "   tests attendance date ranges validity           coding  utf 8        demo data contains set self test employee    make sure check check    make sure second attandance without check created    5 next tests   make sure attendances overlap error raised    make sure attendance modification raises error causes overlap ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo.tests.common import TransactionCase\nimport time\n\n\nclass TestHrAttendance(TransactionCase):\n    \"\"\"Tests for attendance date ranges validity\"\"\"\n\n    def setUp(self):\n        super(TestHrAttendance, self).setUp()\n        self.attendance = self.env['hr.attendance']\n        self.test_employee = self.browse_ref('hr.employee_qdp')\n        # demo data contains set up for self.test_employee\n\n    def test_attendance_in_before_out(self):\n        # Make sure check_out is before check_in\n        with self.assertRaises(Exception):\n            self.my_attend = self.attendance.create({\n                'employee_id': self.test_employee.id,\n                'check_in': time.strftime('%Y-%m-10 12:00'),\n                'check_out': time.strftime('%Y-%m-10 11:00'),\n            })\n\n    def test_attendance_no_check_out(self):\n        # Make sure no second attandance without check_out can be created\n        self.attendance.create({\n            'employee_id': self.test_employee.id,\n            'check_in': time.strftime('%Y-%m-10 10:00'),\n        })\n        with self.assertRaises(Exception):\n            self.attendance.create({\n                'employee_id': self.test_employee.id,\n                'check_in': time.strftime('%Y-%m-10 11:00'),\n            })\n\n    # 5 next tests : Make sure that when attendances overlap an error is raised\n    def test_attendance_1(self):\n        with self.assertRaises(Exception):\n            self.attendance.create({\n                'employee_id': self.test_employee.id,\n                'check_in': time.strftime('%Y-%m-10 08:30'),\n                'check_out': time.strftime('%Y-%m-10 09:30'),\n            })\n\n    def test_attendance_2(self):\n        with self.assertRaises(Exception):\n            self.attendance.create({\n                'employee_id': self.test_employee.id,\n                'check_in': time.strftime('%Y-%m-10 07:30'),\n                'check_out': time.strftime('%Y-%m-10 08:30'),\n            })\n\n    def test_attendance_3(self):\n        with self.assertRaises(Exception):\n            self.attendance.create({\n                'employee_id': self.test_employee.id,\n                'check_in': time.strftime('%Y-%m-10 07:30'),\n                'check_out': time.strftime('%Y-%m-10 09:30'),\n            })\n\n    def test_attendance_4(self):\n        with self.assertRaises(Exception):\n            self.attendance.create({\n                'employee_id': self.test_employee.id,\n                'check_in': time.strftime('%Y-%m-10 08:15'),\n                'check_out': time.strftime('%Y-%m-10 08:45'),\n            })\n\n    def test_attendance_5(self):\n        self.attendance.create({\n            'employee_id': self.test_employee.id,\n            'check_in': time.strftime('%Y-%m-10 10:00'),\n        })\n        with self.assertRaises(Exception):\n            self.attendance.create({\n                'employee_id': self.test_employee.id,\n                'check_in': time.strftime('%Y-%m-10 09:30'),\n                'check_out': time.strftime('%Y-%m-10 10:30'),\n            })\n\n    def test_new_attendances(self):\n        # Make sure attendance modification raises an error when it causes an overlap\n        self.attendance.create({\n            'employee_id': self.test_employee.id,\n            'check_in': time.strftime('%Y-%m-10 11:00'),\n            'check_out': time.strftime('%Y-%m-10 12:00'),\n        })\n        open_attendance = self.attendance.create({\n            'employee_id': self.test_employee.id,\n            'check_in': time.strftime('%Y-%m-10 10:00'),\n        })\n        with self.assertRaises(Exception):\n            open_attendance.write({\n                'check_out': time.strftime('%Y-%m-10 11:30'),\n            })\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_hr_attendance_constraints.py", "id": "8539bafa5a6747b96bcfa7702c0371b2", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_attendance/tests/test_hr_attendance_constraints.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}