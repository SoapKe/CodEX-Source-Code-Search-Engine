{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_b64decode\nfrom ..utils import (\n    qualities,\n    sanitized_Request,\n)\n\n\nclass DumpertIE(InfoExtractor):\n    _VALID_URL = r'(?P<protocol>https?)://(?:www\\.)?dumpert\\.nl/(?:mediabase|embed)/(?P<id>[0-9]+/[0-9a-zA-Z]+)'\n    _TESTS = [{\n        'url': 'http://www.dumpert.nl/mediabase/6646981/951bc60f/',\n        'md5': '1b9318d7d5054e7dcb9dc7654f21d643',\n        'info_dict': {\n            'id': '6646981/951bc60f',\n            'ext': 'mp4',\n            'title': 'Ik heb nieuws voor je',\n            'description': 'Niet schrikken hoor',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }, {\n        'url': 'http://www.dumpert.nl/embed/6675421/dc440fe7/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        protocol = mobj.group('protocol')\n\n        url = '%s://www.dumpert.nl/mediabase/%s' % (protocol, video_id)\n        req = sanitized_Request(url)\n        req.add_header('Cookie', 'nsfw=1; cpc=10')\n        webpage = self._download_webpage(req, video_id)\n\n        files_base64 = self._search_regex(\n            r'data-files=\"([^\"]+)\"', webpage, 'data files')\n\n        files = self._parse_json(\n            compat_b64decode(files_base64).decode('utf-8'),\n            video_id)\n\n        quality = qualities(['flv', 'mobile', 'tablet', '720p'])\n\n        formats = [{\n            'url': video_url,\n            'format_id': format_id,\n            'quality': quality(format_id),\n        } for format_id, video_url in files.items() if format_id != 'still']\n        self._sort_formats(formats)\n\n        title = self._html_search_meta(\n            'title', webpage) or self._og_search_title(webpage)\n        description = self._html_search_meta(\n            'description', webpage) or self._og_search_description(webpage)\n        thumbnail = files.get('still') or self._og_search_thumbnail(webpage)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'formats': formats\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_b64decode\nfrom ..utils import (\n    qualities,\n    sanitized_Request,\n)\n\n\nclass DumpertIE(InfoExtractor):\n    _VALID_URL = r'(?P<protocol>https?)://(?:www\\.)?dumpert\\.nl/(?:mediabase|embed)/(?P<id>[0-9]+/[0-9a-zA-Z]+)'\n    _TESTS = [{\n        'url': 'http://www.dumpert.nl/mediabase/6646981/951bc60f/',\n        'md5': '1b9318d7d5054e7dcb9dc7654f21d643',\n        'info_dict': {\n            'id': '6646981/951bc60f',\n            'ext': 'mp4',\n            'title': 'Ik heb nieuws voor je',\n            'description': 'Niet schrikken hoor',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }, {\n        'url': 'http://www.dumpert.nl/embed/6675421/dc440fe7/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        protocol = mobj.group('protocol')\n\n        url = '%s://www.dumpert.nl/mediabase/%s' % (protocol, video_id)\n        req = sanitized_Request(url)\n        req.add_header('Cookie', 'nsfw=1; cpc=10')\n        webpage = self._download_webpage(req, video_id)\n\n        files_base64 = self._search_regex(\n            r'data-files=\"([^\"]+)\"', webpage, 'data files')\n\n        files = self._parse_json(\n            compat_b64decode(files_base64).decode('utf-8'),\n            video_id)\n\n        quality = qualities(['flv', 'mobile', 'tablet', '720p'])\n\n        formats = [{\n            'url': video_url,\n            'format_id': format_id,\n            'quality': quality(format_id),\n        } for format_id, video_url in files.items() if format_id != 'still']\n        self._sort_formats(formats)\n\n        title = self._html_search_meta(\n            'title', webpage) or self._og_search_title(webpage)\n        description = self._html_search_meta(\n            'description', webpage) or self._og_search_description(webpage)\n        thumbnail = files.get('still') or self._og_search_thumbnail(webpage)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'formats': formats\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "dumpert.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/dumpert.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}