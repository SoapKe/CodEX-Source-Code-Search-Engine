{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport itertools\nimport json\nimport re\n\nfrom .common import InfoExtractor, SearchInfoExtractor\nfrom ..compat import (\n    compat_urllib_parse,\n    compat_urlparse,\n)\nfrom ..utils import (\n    clean_html,\n    determine_ext,\n    ExtractorError,\n    extract_attributes,\n    int_or_none,\n    mimetype2ext,\n    smuggle_url,\n    unescapeHTML,\n)\n\nfrom .brightcove import (\n    BrightcoveLegacyIE,\n    BrightcoveNewIE,\n)\nfrom .nbc import NBCSportsVPlayerIE\n\n\nclass YahooIE(InfoExtractor):\n    IE_DESC = 'Yahoo screen and movies'\n    _VALID_URL = r'(?P<host>https?://(?:(?P<country>[a-zA-Z]{2})\\.)?[\\da-zA-Z_-]+\\.yahoo\\.com)/(?:[^/]+/)*(?:(?P<display_id>.+)?-)?(?P<id>[0-9]+)(?:-[a-z]+)?(?:\\.html)?'\n    _TESTS = [\n        {\n            'url': 'http://screen.yahoo.com/julian-smith-travis-legg-watch-214727115.html',\n            'info_dict': {\n                'id': '2d25e626-2378-391f-ada0-ddaf1417e588',\n                'ext': 'mp4',\n                'title': 'Julian Smith & Travis Legg Watch Julian Smith',\n                'description': 'Julian and Travis watch Julian Smith',\n                'duration': 6863,\n            },\n        },\n        {\n            'url': 'http://screen.yahoo.com/wired/codefellas-s1-ep12-cougar-lies-103000935.html',\n            'md5': '251af144a19ebc4a033e8ba91ac726bb',\n            'info_dict': {\n                'id': 'd1dedf8c-d58c-38c3-8963-e899929ae0a9',\n                'ext': 'mp4',\n                'title': 'Codefellas - The Cougar Lies with Spanish Moss',\n                'description': 'md5:66b627ab0a282b26352136ca96ce73c1',\n                'duration': 151,\n            },\n            'skip': 'HTTP Error 404',\n        },\n        {\n            'url': 'https://screen.yahoo.com/community/community-sizzle-reel-203225340.html?format=embed',\n            'md5': '7993e572fac98e044588d0b5260f4352',\n            'info_dict': {\n                'id': '4fe78544-8d48-39d8-97cd-13f205d9fcdb',\n                'ext': 'mp4',\n                'title': \"Yahoo Saves 'Community'\",\n                'description': 'md5:4d4145af2fd3de00cbb6c1d664105053',\n                'duration': 170,\n            }\n        },\n        {\n            'url': 'https://tw.news.yahoo.com/%E6%95%A2%E5%95%8F%E5%B8%82%E9%95%B7%20%E9%BB%83%E7%A7%80%E9%9C%9C%E6%89%B9%E8%B3%B4%E6%B8%85%E5%BE%B7%20%E9%9D%9E%E5%B8%B8%E9%AB%98%E5%82%B2-034024051.html',\n            'md5': '45c024bad51e63e9b6f6fad7a43a8c23',\n            'info_dict': {\n                'id': 'cac903b3-fcf4-3c14-b632-643ab541712f',\n                'ext': 'mp4',\n                'title': '\u6562\u554f\u5e02\u9577\uff0f\u9ec3\u79c0\u971c\u6279\u8cf4\u6e05\u5fb7\u300c\u975e\u5e38\u9ad8\u50b2\u300d',\n                'description': '\u76f4\u8a00\u53f0\u5357\u6c92\u6377\u904b \u4ea4\u901a\u5c45\u4e94\u90fd\u4e4b\u672b',\n                'duration': 396,\n            },\n        },\n        {\n            'url': 'https://uk.screen.yahoo.com/editor-picks/cute-raccoon-freed-drain-using-091756545.html',\n            'md5': '71298482f7c64cbb7fa064e4553ff1c1',\n            'info_dict': {\n                'id': 'b3affa53-2e14-3590-852b-0e0db6cd1a58',\n                'ext': 'webm',\n                'title': 'Cute Raccoon Freed From Drain\\u00a0Using Angle Grinder',\n                'description': 'md5:f66c890e1490f4910a9953c941dee944',\n                'duration': 97,\n            }\n        },\n        {\n            'url': 'https://ca.sports.yahoo.com/video/program-makes-hockey-more-affordable-013127711.html',\n            'md5': '57e06440778b1828a6079d2f744212c4',\n            'info_dict': {\n                'id': 'c9fa2a36-0d4d-3937-b8f6-cc0fb1881e73',\n                'ext': 'mp4',\n                'title': 'Program that makes hockey more affordable not offered in Manitoba',\n                'description': 'md5:c54a609f4c078d92b74ffb9bf1f496f4',\n                'duration': 121,\n            },\n            'skip': 'Video gone',\n        }, {\n            'url': 'https://ca.finance.yahoo.com/news/hackers-sony-more-trouble-well-154609075.html',\n            'info_dict': {\n                'id': '154609075',\n            },\n            'playlist': [{\n                'md5': '000887d0dc609bc3a47c974151a40fb8',\n                'info_dict': {\n                    'id': 'e624c4bc-3389-34de-9dfc-025f74943409',\n                    'ext': 'mp4',\n                    'title': '\\'The Interview\\' TV Spot: War',\n                    'description': 'The Interview',\n                    'duration': 30,\n                },\n            }, {\n                'md5': '81bc74faf10750fe36e4542f9a184c66',\n                'info_dict': {\n                    'id': '1fc8ada0-718e-3abe-a450-bf31f246d1a9',\n                    'ext': 'mp4',\n                    'title': '\\'The Interview\\' TV Spot: Guys',\n                    'description': 'The Interview',\n                    'duration': 30,\n                },\n            }],\n        }, {\n            'url': 'http://news.yahoo.com/video/china-moses-crazy-blues-104538833.html',\n            'md5': '88e209b417f173d86186bef6e4d1f160',\n            'info_dict': {\n                'id': 'f885cf7f-43d4-3450-9fac-46ac30ece521',\n                'ext': 'mp4',\n                'title': 'China Moses Is Crazy About the Blues',\n                'description': 'md5:9900ab8cd5808175c7b3fe55b979bed0',\n                'duration': 128,\n            }\n        }, {\n            'url': 'https://in.lifestyle.yahoo.com/video/connect-dots-dark-side-virgo-090247395.html',\n            'md5': 'd9a083ccf1379127bf25699d67e4791b',\n            'info_dict': {\n                'id': '52aeeaa3-b3d1-30d8-9ef8-5d0cf05efb7c',\n                'ext': 'mp4',\n                'title': 'Connect the Dots: Dark Side of Virgo',\n                'description': 'md5:1428185051cfd1949807ad4ff6d3686a',\n                'duration': 201,\n            },\n            'skip': 'Domain name in.lifestyle.yahoo.com gone',\n        }, {\n            'url': 'https://www.yahoo.com/movies/v/true-story-trailer-173000497.html',\n            'md5': '989396ae73d20c6f057746fb226aa215',\n            'info_dict': {\n                'id': '071c4013-ce30-3a93-a5b2-e0413cd4a9d1',\n                'ext': 'mp4',\n                'title': '\\'True Story\\' Trailer',\n                'description': 'True Story',\n                'duration': 150,\n            },\n        }, {\n            'url': 'https://gma.yahoo.com/pizza-delivery-man-surprised-huge-tip-college-kids-195200785.html',\n            'only_matching': True,\n        }, {\n            'note': 'NBC Sports embeds',\n            'url': 'http://sports.yahoo.com/blogs/ncaab-the-dagger/tyler-kalinoski-s-buzzer-beater-caps-davidson-s-comeback-win-185609842.html?guid=nbc_cbk_davidsonbuzzerbeater_150313',\n            'info_dict': {\n                'id': '9CsDKds0kvHI',\n                'ext': 'flv',\n                'description': 'md5:df390f70a9ba7c95ff1daace988f0d8d',\n                'title': 'Tyler Kalinoski hits buzzer-beater to lift Davidson',\n                'upload_date': '20150313',\n                'uploader': 'NBCU-SPORTS',\n                'timestamp': 1426270238,\n            }\n        }, {\n            'url': 'https://tw.news.yahoo.com/-100120367.html',\n            'only_matching': True,\n        }, {\n            \n            'url': 'https://screen.yahoo.com/community/communitary-community-episode-1-ladders-154501237.html',\n            'md5': '4fbafb9c9b6f07aa8f870629f6671b35',\n            'info_dict': {\n                'id': '1f32853c-a271-3eef-8cb6-f6d6872cb504',\n                'ext': 'mp4',\n                'title': 'Communitary - Community Episode 1: Ladders',\n                'description': 'md5:8fc39608213295748e1e289807838c97',\n                'duration': 1646,\n            },\n        }, {\n            \n            'url': 'https://www.yahoo.com/movies/the-stars-of-daddys-home-have-very-different-212843197.html',\n            'info_dict': {\n                'id': '40eda9c8-8e5f-3552-8745-830f67d0c737',\n                'ext': 'mp4',\n                'title': 'Will Ferrell & Mark Wahlberg Are Pro-Spanking',\n                'description': 'While they play feuding fathers in \\'Daddy\\'s Home,\\' star Will Ferrell & Mark Wahlberg share their true feelings on parenthood.',\n            },\n        },\n        {\n            \n            'url': 'https://www.yahoo.com/music/livenation/event/galactic-2016',\n            'md5': 'dac0c72d502bc5facda80c9e6d5c98db',\n            'info_dict': {\n                'id': 'a6015640-e9e5-3efb-bb60-05589a183919',\n                'ext': 'mp4',\n                'description': 'Galactic',\n                'title': 'Dolla Diva (feat. Maggie Koerner)',\n            },\n            'skip': 'redirect to https://www.yahoo.com/music',\n        },\n        {\n            \n            'url': 'https://www.yahoo.com/movies/video/true-story-trailer-173000497.html',\n            'info_dict': {\n                'id': '071c4013-ce30-3a93-a5b2-e0413cd4a9d1',\n                'ext': 'mp4',\n                'title': \"'True Story' Trailer\",\n                'description': 'True Story',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            \n            'url': 'https://tw.video.yahoo.com/movie-tw/\u55ae\u8eca\u5929\u4f7f-\u4e2d\u6587\u7248\u9810-092316541.html',\n            'info_dict': {\n                'id': 'ba133ff2-0793-3510-b636-59dfe9ff6cff',\n                'ext': 'mp4',\n                'title': '\u55ae\u8eca\u5929\u4f7f - \u4e2d\u6587\u7248\u9810',\n                'description': '\u4e2d\u6587\u7248\u9810',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            \n            'url': 'https://au.tv.yahoo.com/plus7/sunrise/-/watch/37083565/clown-entertainers-say-it-is-hurting-their-business/',\n            'info_dict': {\n                'id': '5575377707001',\n                'ext': 'mp4',\n                'title': \"Clown entertainers say 'It' is hurting their business\",\n                'description': 'Stephen King s horror film has much to answer for. Jelby and Mr Loopy the Clowns join us.',\n                'timestamp': 1505341164,\n                'upload_date': '20170913',\n                'uploader_id': '2376984109001',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            \n            'url': 'https://au.tv.yahoo.com/plus7/sunrise/-/watch/37263964/sunrise-episode-wed-27-sep/',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        page_id = mobj.group('id')\n        display_id = mobj.group('display_id') or page_id\n        host = mobj.group('host')\n        webpage, urlh = self._download_webpage_handle(url, display_id)\n        if 'err=404' in urlh.geturl():\n            raise ExtractorError('Video gone', expected=True)\n\n        \n        entries = []\n        iframe_urls = re.findall(r'<iframe[^>]+src=\"(/video/.+?-\\d+\\.html\\?format=embed.*?)\"', webpage)\n        for idx, iframe_url in enumerate(iframe_urls):\n            entries.append(self.url_result(host + iframe_url, 'Yahoo'))\n        if entries:\n            return self.playlist_result(entries, page_id)\n\n        \n        nbc_sports_url = NBCSportsVPlayerIE._extract_url(webpage)\n        if nbc_sports_url:\n            return self.url_result(nbc_sports_url, NBCSportsVPlayerIE.ie_key())\n\n        \n        bc_url = BrightcoveLegacyIE._extract_brightcove_url(webpage)\n        if bc_url:\n            return self.url_result(bc_url, BrightcoveLegacyIE.ie_key())\n\n        def brightcove_url_result(bc_url):\n            return self.url_result(\n                smuggle_url(bc_url, {'geo_countries': [mobj.group('country')]}),\n                BrightcoveNewIE.ie_key())\n\n        \n        bc_url = BrightcoveNewIE._extract_url(self, webpage)\n        if bc_url:\n            return brightcove_url_result(bc_url)\n\n        brightcove_iframe = self._search_regex(\n            r'(<iframe[^>]+data-video-id=[\"\\']\\d+[^>]+>)', webpage,\n            'brightcove iframe', default=None)\n        if brightcove_iframe:\n            attr = extract_attributes(brightcove_iframe)\n            src = attr.get('src')\n            if src:\n                parsed_src = compat_urlparse.urlparse(src)\n                qs = compat_urlparse.parse_qs(parsed_src.query)\n                account_id = qs.get('accountId', ['2376984109001'])[0]\n                brightcove_id = attr.get('data-video-id') or qs.get('videoId', [None])[0]\n                if account_id and brightcove_id:\n                    return brightcove_url_result(\n                        'http://players.brightcove.net/%s/default_default/index.html?videoId=%s'\n                        % (account_id, brightcove_id))\n\n        \n        \n        \n        config_json = self._search_regex(\n            r'window\\.Af\\.bootstrap\\[[^\\]]+\\]\\s*=\\s*({.*?\"applet_type\"\\s*:\\s*\"td-applet-videoplayer\".*?});(?:</script>|$)',\n            webpage, 'videoplayer applet', default=None)\n        if config_json:\n            config = self._parse_json(config_json, display_id, fatal=False)\n            if config:\n                sapi = config.get('models', {}).get('applet_model', {}).get('data', {}).get('sapi')\n                if sapi and 'query' in sapi:\n                    info = self._extract_info(display_id, sapi, webpage)\n                    self._sort_formats(info['formats'])\n                    return info\n\n        items_json = self._search_regex(\n            r'mediaItems: ({.*?})$', webpage, 'items', flags=re.MULTILINE,\n            default=None)\n        if items_json is None:\n            alias = self._search_regex(\n                r'\"aliases\":{\"video\":\"(.*?)\"', webpage, 'alias', default=None)\n            if alias is not None:\n                alias_info = self._download_json(\n                    'https://www.yahoo.com/_td/api/resource/VideoService.videos;video_aliases=[\"%s\"]' % alias,\n                    display_id, 'Downloading alias info')\n                video_id = alias_info[0]['id']\n            else:\n                CONTENT_ID_REGEXES = [\n                    r'YUI\\.namespace\\(\"Media\"\\)\\.CONTENT_ID\\s*=\\s*\"([^\"]+)\"',\n                    r'root\\.App\\.Cache\\.context\\.videoCache\\.curVideo = \\{\"([^\"]+)\"',\n                    r'\"first_videoid\"\\s*:\\s*\"([^\"]+)\"',\n                    r'%s[^}]*\"ccm_id\"\\s*:\\s*\"([^\"]+)\"' % re.escape(page_id),\n                    r'<article[^>]data-uuid=[\"\\']([^\"\\']+)',\n                    r'<meta[^<>]+yahoo://article/view\\?.*\\buuid=([^&\"\\']+)',\n                    r'<meta[^<>]+[\"\\']ytwnews://cavideo/(?:[^/]+/)+([\\da-fA-F-]+)[&\"\\']',\n                ]\n                video_id = self._search_regex(\n                    CONTENT_ID_REGEXES, webpage, 'content ID')\n        else:\n            items = json.loads(items_json)\n            info = items['mediaItems']['query']['results']['mediaObj'][0]\n            \n            \n            video_id = info['id']\n        return self._get_info(video_id, display_id, webpage)\n\n    def _extract_info(self, display_id, query, webpage):\n        info = query['query']['results']['mediaObj'][0]\n        meta = info.get('meta')\n        video_id = info.get('id')\n\n        if not meta:\n            msg = info['status'].get('msg')\n            if msg:\n                raise ExtractorError(\n                    '%s returned error: %s' % (self.IE_NAME, msg), expected=True)\n            raise ExtractorError('Unable to extract media object meta')\n\n        formats = []\n        for s in info['streams']:\n            tbr = int_or_none(s.get('bitrate'))\n            format_info = {\n                'width': int_or_none(s.get('width')),\n                'height': int_or_none(s.get('height')),\n                'tbr': tbr,\n            }\n\n            host = s['host']\n            path = s['path']\n            if host.startswith('rtmp'):\n                fmt = 'rtmp'\n                format_info.update({\n                    'url': host,\n                    'play_path': path,\n                    'ext': 'flv',\n                })\n            else:\n                if s.get('format') == 'm3u8_playlist':\n                    fmt = 'hls'\n                    format_info.update({\n                        'protocol': 'm3u8_native',\n                        'ext': 'mp4',\n                    })\n                else:\n                    fmt = format_info['ext'] = determine_ext(path)\n                format_url = compat_urlparse.urljoin(host, path)\n                format_info['url'] = format_url\n            format_info['format_id'] = fmt + ('-%d' % tbr if tbr else '')\n            formats.append(format_info)\n\n        closed_captions = self._html_search_regex(\n            r'\"closedcaptions\":(\\[[^\\]]+\\])', webpage, 'closed captions',\n            default='[]')\n\n        cc_json = self._parse_json(closed_captions, video_id, fatal=False)\n        subtitles = {}\n        if cc_json:\n            for closed_caption in cc_json:\n                lang = closed_caption['lang']\n                if lang not in subtitles:\n                    subtitles[lang] = []\n                subtitles[lang].append({\n                    'url': closed_caption['url'],\n                    'ext': mimetype2ext(closed_caption['content_type']),\n                })\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': unescapeHTML(meta['title']),\n            'formats': formats,\n            'description': clean_html(meta['description']),\n            'thumbnail': meta['thumbnail'] if meta.get('thumbnail') else self._og_search_thumbnail(webpage),\n            'duration': int_or_none(meta.get('duration')),\n            'subtitles': subtitles,\n        }\n\n    def _get_info(self, video_id, display_id, webpage):\n        region = self._search_regex(\n            r'\\\\?\"region\\\\?\"\\s*:\\s*\\\\?\"([^\"]+?)\\\\?\"',\n            webpage, 'region', fatal=False, default='US').upper()\n        formats = []\n        info = {}\n        for fmt in ('webm', 'mp4'):\n            query_result = self._download_json(\n                'https://video.media.yql.yahoo.com/v1/video/sapi/streams/' + video_id,\n                display_id, 'Downloading %s video info' % fmt, query={\n                    'protocol': 'http',\n                    'region': region,\n                    'format': fmt,\n                })\n            info = self._extract_info(display_id, query_result, webpage)\n            formats.extend(info['formats'])\n        formats.extend(self._extract_m3u8_formats(\n            'http://video.media.yql.yahoo.com/v1/hls/%s?region=%s' % (video_id, region),\n            video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        self._sort_formats(formats)\n        info['formats'] = formats\n        return info\n\n\nclass YahooSearchIE(SearchInfoExtractor):\n    IE_DESC = 'Yahoo screen search'\n    _MAX_RESULTS = 1000\n    IE_NAME = 'screen.yahoo:search'\n    _SEARCH_KEY = 'yvsearch'\n\n    def _get_n_results(self, query, n):\n        \n        entries = []\n        for pagenum in itertools.count(0):\n            result_url = 'http://video.search.yahoo.com/search/?p=%s&fr=screen&o=js&gs=0&b=%d' % (compat_urllib_parse.quote_plus(query), pagenum * 30)\n            info = self._download_json(result_url, query,\n                                       note='Downloading results page ' + str(pagenum + 1))\n            m = info['m']\n            results = info['results']\n\n            for (i, r) in enumerate(results):\n                if (pagenum * 30) + i >= n:\n                    break\n                mobj = re.search(r'(?P<url>screen\\.yahoo\\.com/.*?-\\d*?\\.html)\"', r)\n                e = self.url_result('http://' + mobj.group('url'), 'Yahoo')\n                entries.append(e)\n            if (pagenum * 30 + i >= n) or (m['last'] >= (m['total'] - 1)):\n                break\n\n        return {\n            '_type': 'playlist',\n            'id': query,\n            'entries': entries,\n        }\n", "comments": "Get a specified number of results for a query\ny\n# coding: utf-8\n# Query result is embedded in webpage, but explicit request to video API fails with geo restriction\n# it uses an alias to get the video_id\n# config['models']['applet_model']['data']['sapi'] has no query\n# yahoo://article/\n# ytwnews://cavideo/\n# custom brightcove\n# custom brightcove, geo-restricted to Australia, bypassable\n# Look for iframed media first\n# Look for NBCSports iframes\n# Look for Brightcove Legacy Studio embeds\n# Look for Brightcove New Studio embeds\n# Query result is often embedded in webpage as JSON. Sometimes explicit requests\n# to video API results in a failure with geo restriction reason therefore using\n# embedded query result when present sounds reasonable.\n# The 'meta' field is not always in the video webpage, we request it\n# from another page\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport itertools\nimport json\nimport re\n\nfrom .common import InfoExtractor, SearchInfoExtractor\nfrom ..compat import (\n    compat_urllib_parse,\n    compat_urlparse,\n)\nfrom ..utils import (\n    clean_html,\n    determine_ext,\n    ExtractorError,\n    extract_attributes,\n    int_or_none,\n    mimetype2ext,\n    smuggle_url,\n    unescapeHTML,\n)\n\nfrom .brightcove import (\n    BrightcoveLegacyIE,\n    BrightcoveNewIE,\n)\nfrom .nbc import NBCSportsVPlayerIE\n\n\nclass YahooIE(InfoExtractor):\n    IE_DESC = 'Yahoo screen and movies'\n    _VALID_URL = r'(?P<host>https?://(?:(?P<country>[a-zA-Z]{2})\\.)?[\\da-zA-Z_-]+\\.yahoo\\.com)/(?:[^/]+/)*(?:(?P<display_id>.+)?-)?(?P<id>[0-9]+)(?:-[a-z]+)?(?:\\.html)?'\n    _TESTS = [\n        {\n            'url': 'http://screen.yahoo.com/julian-smith-travis-legg-watch-214727115.html',\n            'info_dict': {\n                'id': '2d25e626-2378-391f-ada0-ddaf1417e588',\n                'ext': 'mp4',\n                'title': 'Julian Smith & Travis Legg Watch Julian Smith',\n                'description': 'Julian and Travis watch Julian Smith',\n                'duration': 6863,\n            },\n        },\n        {\n            'url': 'http://screen.yahoo.com/wired/codefellas-s1-ep12-cougar-lies-103000935.html',\n            'md5': '251af144a19ebc4a033e8ba91ac726bb',\n            'info_dict': {\n                'id': 'd1dedf8c-d58c-38c3-8963-e899929ae0a9',\n                'ext': 'mp4',\n                'title': 'Codefellas - The Cougar Lies with Spanish Moss',\n                'description': 'md5:66b627ab0a282b26352136ca96ce73c1',\n                'duration': 151,\n            },\n            'skip': 'HTTP Error 404',\n        },\n        {\n            'url': 'https://screen.yahoo.com/community/community-sizzle-reel-203225340.html?format=embed',\n            'md5': '7993e572fac98e044588d0b5260f4352',\n            'info_dict': {\n                'id': '4fe78544-8d48-39d8-97cd-13f205d9fcdb',\n                'ext': 'mp4',\n                'title': \"Yahoo Saves 'Community'\",\n                'description': 'md5:4d4145af2fd3de00cbb6c1d664105053',\n                'duration': 170,\n            }\n        },\n        {\n            'url': 'https://tw.news.yahoo.com/%E6%95%A2%E5%95%8F%E5%B8%82%E9%95%B7%20%E9%BB%83%E7%A7%80%E9%9C%9C%E6%89%B9%E8%B3%B4%E6%B8%85%E5%BE%B7%20%E9%9D%9E%E5%B8%B8%E9%AB%98%E5%82%B2-034024051.html',\n            'md5': '45c024bad51e63e9b6f6fad7a43a8c23',\n            'info_dict': {\n                'id': 'cac903b3-fcf4-3c14-b632-643ab541712f',\n                'ext': 'mp4',\n                'title': '\u6562\u554f\u5e02\u9577\uff0f\u9ec3\u79c0\u971c\u6279\u8cf4\u6e05\u5fb7\u300c\u975e\u5e38\u9ad8\u50b2\u300d',\n                'description': '\u76f4\u8a00\u53f0\u5357\u6c92\u6377\u904b \u4ea4\u901a\u5c45\u4e94\u90fd\u4e4b\u672b',\n                'duration': 396,\n            },\n        },\n        {\n            'url': 'https://uk.screen.yahoo.com/editor-picks/cute-raccoon-freed-drain-using-091756545.html',\n            'md5': '71298482f7c64cbb7fa064e4553ff1c1',\n            'info_dict': {\n                'id': 'b3affa53-2e14-3590-852b-0e0db6cd1a58',\n                'ext': 'webm',\n                'title': 'Cute Raccoon Freed From Drain\\u00a0Using Angle Grinder',\n                'description': 'md5:f66c890e1490f4910a9953c941dee944',\n                'duration': 97,\n            }\n        },\n        {\n            'url': 'https://ca.sports.yahoo.com/video/program-makes-hockey-more-affordable-013127711.html',\n            'md5': '57e06440778b1828a6079d2f744212c4',\n            'info_dict': {\n                'id': 'c9fa2a36-0d4d-3937-b8f6-cc0fb1881e73',\n                'ext': 'mp4',\n                'title': 'Program that makes hockey more affordable not offered in Manitoba',\n                'description': 'md5:c54a609f4c078d92b74ffb9bf1f496f4',\n                'duration': 121,\n            },\n            'skip': 'Video gone',\n        }, {\n            'url': 'https://ca.finance.yahoo.com/news/hackers-sony-more-trouble-well-154609075.html',\n            'info_dict': {\n                'id': '154609075',\n            },\n            'playlist': [{\n                'md5': '000887d0dc609bc3a47c974151a40fb8',\n                'info_dict': {\n                    'id': 'e624c4bc-3389-34de-9dfc-025f74943409',\n                    'ext': 'mp4',\n                    'title': '\\'The Interview\\' TV Spot: War',\n                    'description': 'The Interview',\n                    'duration': 30,\n                },\n            }, {\n                'md5': '81bc74faf10750fe36e4542f9a184c66',\n                'info_dict': {\n                    'id': '1fc8ada0-718e-3abe-a450-bf31f246d1a9',\n                    'ext': 'mp4',\n                    'title': '\\'The Interview\\' TV Spot: Guys',\n                    'description': 'The Interview',\n                    'duration': 30,\n                },\n            }],\n        }, {\n            'url': 'http://news.yahoo.com/video/china-moses-crazy-blues-104538833.html',\n            'md5': '88e209b417f173d86186bef6e4d1f160',\n            'info_dict': {\n                'id': 'f885cf7f-43d4-3450-9fac-46ac30ece521',\n                'ext': 'mp4',\n                'title': 'China Moses Is Crazy About the Blues',\n                'description': 'md5:9900ab8cd5808175c7b3fe55b979bed0',\n                'duration': 128,\n            }\n        }, {\n            'url': 'https://in.lifestyle.yahoo.com/video/connect-dots-dark-side-virgo-090247395.html',\n            'md5': 'd9a083ccf1379127bf25699d67e4791b',\n            'info_dict': {\n                'id': '52aeeaa3-b3d1-30d8-9ef8-5d0cf05efb7c',\n                'ext': 'mp4',\n                'title': 'Connect the Dots: Dark Side of Virgo',\n                'description': 'md5:1428185051cfd1949807ad4ff6d3686a',\n                'duration': 201,\n            },\n            'skip': 'Domain name in.lifestyle.yahoo.com gone',\n        }, {\n            'url': 'https://www.yahoo.com/movies/v/true-story-trailer-173000497.html',\n            'md5': '989396ae73d20c6f057746fb226aa215',\n            'info_dict': {\n                'id': '071c4013-ce30-3a93-a5b2-e0413cd4a9d1',\n                'ext': 'mp4',\n                'title': '\\'True Story\\' Trailer',\n                'description': 'True Story',\n                'duration': 150,\n            },\n        }, {\n            'url': 'https://gma.yahoo.com/pizza-delivery-man-surprised-huge-tip-college-kids-195200785.html',\n            'only_matching': True,\n        }, {\n            'note': 'NBC Sports embeds',\n            'url': 'http://sports.yahoo.com/blogs/ncaab-the-dagger/tyler-kalinoski-s-buzzer-beater-caps-davidson-s-comeback-win-185609842.html?guid=nbc_cbk_davidsonbuzzerbeater_150313',\n            'info_dict': {\n                'id': '9CsDKds0kvHI',\n                'ext': 'flv',\n                'description': 'md5:df390f70a9ba7c95ff1daace988f0d8d',\n                'title': 'Tyler Kalinoski hits buzzer-beater to lift Davidson',\n                'upload_date': '20150313',\n                'uploader': 'NBCU-SPORTS',\n                'timestamp': 1426270238,\n            }\n        }, {\n            'url': 'https://tw.news.yahoo.com/-100120367.html',\n            'only_matching': True,\n        }, {\n            # Query result is embedded in webpage, but explicit request to video API fails with geo restriction\n            'url': 'https://screen.yahoo.com/community/communitary-community-episode-1-ladders-154501237.html',\n            'md5': '4fbafb9c9b6f07aa8f870629f6671b35',\n            'info_dict': {\n                'id': '1f32853c-a271-3eef-8cb6-f6d6872cb504',\n                'ext': 'mp4',\n                'title': 'Communitary - Community Episode 1: Ladders',\n                'description': 'md5:8fc39608213295748e1e289807838c97',\n                'duration': 1646,\n            },\n        }, {\n            # it uses an alias to get the video_id\n            'url': 'https://www.yahoo.com/movies/the-stars-of-daddys-home-have-very-different-212843197.html',\n            'info_dict': {\n                'id': '40eda9c8-8e5f-3552-8745-830f67d0c737',\n                'ext': 'mp4',\n                'title': 'Will Ferrell & Mark Wahlberg Are Pro-Spanking',\n                'description': 'While they play feuding fathers in \\'Daddy\\'s Home,\\' star Will Ferrell & Mark Wahlberg share their true feelings on parenthood.',\n            },\n        },\n        {\n            # config['models']['applet_model']['data']['sapi'] has no query\n            'url': 'https://www.yahoo.com/music/livenation/event/galactic-2016',\n            'md5': 'dac0c72d502bc5facda80c9e6d5c98db',\n            'info_dict': {\n                'id': 'a6015640-e9e5-3efb-bb60-05589a183919',\n                'ext': 'mp4',\n                'description': 'Galactic',\n                'title': 'Dolla Diva (feat. Maggie Koerner)',\n            },\n            'skip': 'redirect to https://www.yahoo.com/music',\n        },\n        {\n            # yahoo://article/\n            'url': 'https://www.yahoo.com/movies/video/true-story-trailer-173000497.html',\n            'info_dict': {\n                'id': '071c4013-ce30-3a93-a5b2-e0413cd4a9d1',\n                'ext': 'mp4',\n                'title': \"'True Story' Trailer\",\n                'description': 'True Story',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            # ytwnews://cavideo/\n            'url': 'https://tw.video.yahoo.com/movie-tw/\u55ae\u8eca\u5929\u4f7f-\u4e2d\u6587\u7248\u9810-092316541.html',\n            'info_dict': {\n                'id': 'ba133ff2-0793-3510-b636-59dfe9ff6cff',\n                'ext': 'mp4',\n                'title': '\u55ae\u8eca\u5929\u4f7f - \u4e2d\u6587\u7248\u9810',\n                'description': '\u4e2d\u6587\u7248\u9810',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            # custom brightcove\n            'url': 'https://au.tv.yahoo.com/plus7/sunrise/-/watch/37083565/clown-entertainers-say-it-is-hurting-their-business/',\n            'info_dict': {\n                'id': '5575377707001',\n                'ext': 'mp4',\n                'title': \"Clown entertainers say 'It' is hurting their business\",\n                'description': 'Stephen King s horror film has much to answer for. Jelby and Mr Loopy the Clowns join us.',\n                'timestamp': 1505341164,\n                'upload_date': '20170913',\n                'uploader_id': '2376984109001',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            # custom brightcove, geo-restricted to Australia, bypassable\n            'url': 'https://au.tv.yahoo.com/plus7/sunrise/-/watch/37263964/sunrise-episode-wed-27-sep/',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        page_id = mobj.group('id')\n        display_id = mobj.group('display_id') or page_id\n        host = mobj.group('host')\n        webpage, urlh = self._download_webpage_handle(url, display_id)\n        if 'err=404' in urlh.geturl():\n            raise ExtractorError('Video gone', expected=True)\n\n        # Look for iframed media first\n        entries = []\n        iframe_urls = re.findall(r'<iframe[^>]+src=\"(/video/.+?-\\d+\\.html\\?format=embed.*?)\"', webpage)\n        for idx, iframe_url in enumerate(iframe_urls):\n            entries.append(self.url_result(host + iframe_url, 'Yahoo'))\n        if entries:\n            return self.playlist_result(entries, page_id)\n\n        # Look for NBCSports iframes\n        nbc_sports_url = NBCSportsVPlayerIE._extract_url(webpage)\n        if nbc_sports_url:\n            return self.url_result(nbc_sports_url, NBCSportsVPlayerIE.ie_key())\n\n        # Look for Brightcove Legacy Studio embeds\n        bc_url = BrightcoveLegacyIE._extract_brightcove_url(webpage)\n        if bc_url:\n            return self.url_result(bc_url, BrightcoveLegacyIE.ie_key())\n\n        def brightcove_url_result(bc_url):\n            return self.url_result(\n                smuggle_url(bc_url, {'geo_countries': [mobj.group('country')]}),\n                BrightcoveNewIE.ie_key())\n\n        # Look for Brightcove New Studio embeds\n        bc_url = BrightcoveNewIE._extract_url(self, webpage)\n        if bc_url:\n            return brightcove_url_result(bc_url)\n\n        brightcove_iframe = self._search_regex(\n            r'(<iframe[^>]+data-video-id=[\"\\']\\d+[^>]+>)', webpage,\n            'brightcove iframe', default=None)\n        if brightcove_iframe:\n            attr = extract_attributes(brightcove_iframe)\n            src = attr.get('src')\n            if src:\n                parsed_src = compat_urlparse.urlparse(src)\n                qs = compat_urlparse.parse_qs(parsed_src.query)\n                account_id = qs.get('accountId', ['2376984109001'])[0]\n                brightcove_id = attr.get('data-video-id') or qs.get('videoId', [None])[0]\n                if account_id and brightcove_id:\n                    return brightcove_url_result(\n                        'http://players.brightcove.net/%s/default_default/index.html?videoId=%s'\n                        % (account_id, brightcove_id))\n\n        # Query result is often embedded in webpage as JSON. Sometimes explicit requests\n        # to video API results in a failure with geo restriction reason therefore using\n        # embedded query result when present sounds reasonable.\n        config_json = self._search_regex(\n            r'window\\.Af\\.bootstrap\\[[^\\]]+\\]\\s*=\\s*({.*?\"applet_type\"\\s*:\\s*\"td-applet-videoplayer\".*?});(?:</script>|$)',\n            webpage, 'videoplayer applet', default=None)\n        if config_json:\n            config = self._parse_json(config_json, display_id, fatal=False)\n            if config:\n                sapi = config.get('models', {}).get('applet_model', {}).get('data', {}).get('sapi')\n                if sapi and 'query' in sapi:\n                    info = self._extract_info(display_id, sapi, webpage)\n                    self._sort_formats(info['formats'])\n                    return info\n\n        items_json = self._search_regex(\n            r'mediaItems: ({.*?})$', webpage, 'items', flags=re.MULTILINE,\n            default=None)\n        if items_json is None:\n            alias = self._search_regex(\n                r'\"aliases\":{\"video\":\"(.*?)\"', webpage, 'alias', default=None)\n            if alias is not None:\n                alias_info = self._download_json(\n                    'https://www.yahoo.com/_td/api/resource/VideoService.videos;video_aliases=[\"%s\"]' % alias,\n                    display_id, 'Downloading alias info')\n                video_id = alias_info[0]['id']\n            else:\n                CONTENT_ID_REGEXES = [\n                    r'YUI\\.namespace\\(\"Media\"\\)\\.CONTENT_ID\\s*=\\s*\"([^\"]+)\"',\n                    r'root\\.App\\.Cache\\.context\\.videoCache\\.curVideo = \\{\"([^\"]+)\"',\n                    r'\"first_videoid\"\\s*:\\s*\"([^\"]+)\"',\n                    r'%s[^}]*\"ccm_id\"\\s*:\\s*\"([^\"]+)\"' % re.escape(page_id),\n                    r'<article[^>]data-uuid=[\"\\']([^\"\\']+)',\n                    r'<meta[^<>]+yahoo://article/view\\?.*\\buuid=([^&\"\\']+)',\n                    r'<meta[^<>]+[\"\\']ytwnews://cavideo/(?:[^/]+/)+([\\da-fA-F-]+)[&\"\\']',\n                ]\n                video_id = self._search_regex(\n                    CONTENT_ID_REGEXES, webpage, 'content ID')\n        else:\n            items = json.loads(items_json)\n            info = items['mediaItems']['query']['results']['mediaObj'][0]\n            # The 'meta' field is not always in the video webpage, we request it\n            # from another page\n            video_id = info['id']\n        return self._get_info(video_id, display_id, webpage)\n\n    def _extract_info(self, display_id, query, webpage):\n        info = query['query']['results']['mediaObj'][0]\n        meta = info.get('meta')\n        video_id = info.get('id')\n\n        if not meta:\n            msg = info['status'].get('msg')\n            if msg:\n                raise ExtractorError(\n                    '%s returned error: %s' % (self.IE_NAME, msg), expected=True)\n            raise ExtractorError('Unable to extract media object meta')\n\n        formats = []\n        for s in info['streams']:\n            tbr = int_or_none(s.get('bitrate'))\n            format_info = {\n                'width': int_or_none(s.get('width')),\n                'height': int_or_none(s.get('height')),\n                'tbr': tbr,\n            }\n\n            host = s['host']\n            path = s['path']\n            if host.startswith('rtmp'):\n                fmt = 'rtmp'\n                format_info.update({\n                    'url': host,\n                    'play_path': path,\n                    'ext': 'flv',\n                })\n            else:\n                if s.get('format') == 'm3u8_playlist':\n                    fmt = 'hls'\n                    format_info.update({\n                        'protocol': 'm3u8_native',\n                        'ext': 'mp4',\n                    })\n                else:\n                    fmt = format_info['ext'] = determine_ext(path)\n                format_url = compat_urlparse.urljoin(host, path)\n                format_info['url'] = format_url\n            format_info['format_id'] = fmt + ('-%d' % tbr if tbr else '')\n            formats.append(format_info)\n\n        closed_captions = self._html_search_regex(\n            r'\"closedcaptions\":(\\[[^\\]]+\\])', webpage, 'closed captions',\n            default='[]')\n\n        cc_json = self._parse_json(closed_captions, video_id, fatal=False)\n        subtitles = {}\n        if cc_json:\n            for closed_caption in cc_json:\n                lang = closed_caption['lang']\n                if lang not in subtitles:\n                    subtitles[lang] = []\n                subtitles[lang].append({\n                    'url': closed_caption['url'],\n                    'ext': mimetype2ext(closed_caption['content_type']),\n                })\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': unescapeHTML(meta['title']),\n            'formats': formats,\n            'description': clean_html(meta['description']),\n            'thumbnail': meta['thumbnail'] if meta.get('thumbnail') else self._og_search_thumbnail(webpage),\n            'duration': int_or_none(meta.get('duration')),\n            'subtitles': subtitles,\n        }\n\n    def _get_info(self, video_id, display_id, webpage):\n        region = self._search_regex(\n            r'\\\\?\"region\\\\?\"\\s*:\\s*\\\\?\"([^\"]+?)\\\\?\"',\n            webpage, 'region', fatal=False, default='US').upper()\n        formats = []\n        info = {}\n        for fmt in ('webm', 'mp4'):\n            query_result = self._download_json(\n                'https://video.media.yql.yahoo.com/v1/video/sapi/streams/' + video_id,\n                display_id, 'Downloading %s video info' % fmt, query={\n                    'protocol': 'http',\n                    'region': region,\n                    'format': fmt,\n                })\n            info = self._extract_info(display_id, query_result, webpage)\n            formats.extend(info['formats'])\n        formats.extend(self._extract_m3u8_formats(\n            'http://video.media.yql.yahoo.com/v1/hls/%s?region=%s' % (video_id, region),\n            video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        self._sort_formats(formats)\n        info['formats'] = formats\n        return info\n\n\nclass YahooSearchIE(SearchInfoExtractor):\n    IE_DESC = 'Yahoo screen search'\n    _MAX_RESULTS = 1000\n    IE_NAME = 'screen.yahoo:search'\n    _SEARCH_KEY = 'yvsearch'\n\n    def _get_n_results(self, query, n):\n        \"\"\"Get a specified number of results for a query\"\"\"\n        entries = []\n        for pagenum in itertools.count(0):\n            result_url = 'http://video.search.yahoo.com/search/?p=%s&fr=screen&o=js&gs=0&b=%d' % (compat_urllib_parse.quote_plus(query), pagenum * 30)\n            info = self._download_json(result_url, query,\n                                       note='Downloading results page ' + str(pagenum + 1))\n            m = info['m']\n            results = info['results']\n\n            for (i, r) in enumerate(results):\n                if (pagenum * 30) + i >= n:\n                    break\n                mobj = re.search(r'(?P<url>screen\\.yahoo\\.com/.*?-\\d*?\\.html)\"', r)\n                e = self.url_result('http://' + mobj.group('url'), 'Yahoo')\n                entries.append(e)\n            if (pagenum * 30 + i >= n) or (m['last'] >= (m['total'] - 1)):\n                break\n\n        return {\n            '_type': 'playlist',\n            'id': query,\n            'entries': entries,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "yahoo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/yahoo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}