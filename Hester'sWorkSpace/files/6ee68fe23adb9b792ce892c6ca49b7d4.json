{"author": "nvbn", "code": "import pytest\nfrom io import BytesIO\nfrom thefuck.rules.npm_run_script import match, get_new_command\nfrom thefuck.types import Command\n\noutput = \n\n\n@pytest.fixture(autouse=True)\ndef run_script(mocker):\n    patch = mocker.patch('thefuck.specific.npm.Popen')\n    patch.return_value.stdout = BytesIO(run_script_stdout)\n    return patch.return_value\n\n\n@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('script', [\n    'npm watch-test', 'npm develop'])\ndef test_match(script):\n    command = Command(script, output)\n    assert match(command)\n\n\n@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('command, run_script_out', [\n    (Command('npm test', 'TEST FAIL'), run_script_stdout),\n    (Command('npm watch-test', 'TEST FAIL'), run_script_stdout),\n    (Command('npm test', output), run_script_stdout),\n    (Command('vim watch-test', output), run_script_stdout)])\ndef test_not_match(run_script, command, run_script_out):\n    run_script.stdout = BytesIO(run_script_out)\n    assert not match(command)\n\n\n@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('script, result', [\n    ('npm watch-test', 'npm run-script watch-test'),\n    ('npm -i develop', 'npm run-script -i develop'),\n    ('npm -i watch-script --path ..',\n     'npm run-script -i watch-script --path ..')])\ndef test_get_new_command(script, result):\n    command = Command(script, output)\n    assert get_new_command(command) == result\n", "comments": "\nUsage: npm <command>\n\nwhere <command> is one of:\n    access, add-user, adduser, apihelp, author, bin, bugs, c,\n    cache, completion, config, ddp, dedupe, deprecate, dist-tag,\n    dist-tags, docs, edit, explore, faq, find, find-dupes, get,\n    help, help-search, home, i, info, init, install, issues, la,\n    link, list, ll, ln, login, logout, ls, outdated, owner,\n    pack, ping, prefix, prune, publish, r, rb, rebuild, remove,\n    repo, restart, rm, root, run-script, s, se, search, set,\n    show, shrinkwrap, star, stars, start, stop, t, tag, team,\n    test, tst, un, uninstall, unlink, unpublish, unstar, up,\n    update, upgrade, v, version, view, whoami\n\nnpm <cmd> -h     quick help on <cmd>\nnpm -l           display full usage info\nnpm faq          commonly asked questions\nnpm help <term>  search for help on <term>\nnpm help npm     involved overview\n\nSpecify configs in the ini-formatted file:\n    /home/nvbn/.npmrc\nor on the command line via: npm <command> --key value\nConfig info can be viewed via: npm help config\n\n'''\n\nrun_script_stdout = b'''\nLifecycle scripts included in code-view-web:\n  test\n    jest\n\navailable via `npm run-script`:\n  build\n    cp node_modules/ace-builds/src-min/ -a resources/ace/ && webpack --progress --colors -p --config ./webpack.production.config.js\n  develop\n    cp node_modules/ace-builds/src/ -a resources/ace/ && webpack-dev-server --progress --colors\n  watch-test\n    jest --verbose --watch\n\n\n\n\n", "content": "import pytest\nfrom io import BytesIO\nfrom thefuck.rules.npm_run_script import match, get_new_command\nfrom thefuck.types import Command\n\noutput = '''\nUsage: npm <command>\n\nwhere <command> is one of:\n    access, add-user, adduser, apihelp, author, bin, bugs, c,\n    cache, completion, config, ddp, dedupe, deprecate, dist-tag,\n    dist-tags, docs, edit, explore, faq, find, find-dupes, get,\n    help, help-search, home, i, info, init, install, issues, la,\n    link, list, ll, ln, login, logout, ls, outdated, owner,\n    pack, ping, prefix, prune, publish, r, rb, rebuild, remove,\n    repo, restart, rm, root, run-script, s, se, search, set,\n    show, shrinkwrap, star, stars, start, stop, t, tag, team,\n    test, tst, un, uninstall, unlink, unpublish, unstar, up,\n    update, upgrade, v, version, view, whoami\n\nnpm <cmd> -h     quick help on <cmd>\nnpm -l           display full usage info\nnpm faq          commonly asked questions\nnpm help <term>  search for help on <term>\nnpm help npm     involved overview\n\nSpecify configs in the ini-formatted file:\n    /home/nvbn/.npmrc\nor on the command line via: npm <command> --key value\nConfig info can be viewed via: npm help config\n\n'''\n\nrun_script_stdout = b'''\nLifecycle scripts included in code-view-web:\n  test\n    jest\n\navailable via `npm run-script`:\n  build\n    cp node_modules/ace-builds/src-min/ -a resources/ace/ && webpack --progress --colors -p --config ./webpack.production.config.js\n  develop\n    cp node_modules/ace-builds/src/ -a resources/ace/ && webpack-dev-server --progress --colors\n  watch-test\n    jest --verbose --watch\n\n'''\n\n\n@pytest.fixture(autouse=True)\ndef run_script(mocker):\n    patch = mocker.patch('thefuck.specific.npm.Popen')\n    patch.return_value.stdout = BytesIO(run_script_stdout)\n    return patch.return_value\n\n\n@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('script', [\n    'npm watch-test', 'npm develop'])\ndef test_match(script):\n    command = Command(script, output)\n    assert match(command)\n\n\n@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('command, run_script_out', [\n    (Command('npm test', 'TEST FAIL'), run_script_stdout),\n    (Command('npm watch-test', 'TEST FAIL'), run_script_stdout),\n    (Command('npm test', output), run_script_stdout),\n    (Command('vim watch-test', output), run_script_stdout)])\ndef test_not_match(run_script, command, run_script_out):\n    run_script.stdout = BytesIO(run_script_out)\n    assert not match(command)\n\n\n@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('script, result', [\n    ('npm watch-test', 'npm run-script watch-test'),\n    ('npm -i develop', 'npm run-script -i develop'),\n    ('npm -i watch-script --path ..',\n     'npm run-script -i watch-script --path ..')])\ndef test_get_new_command(script, result):\n    command = Command(script, output)\n    assert get_new_command(command) == result\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_npm_run_script.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_npm_run_script.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}