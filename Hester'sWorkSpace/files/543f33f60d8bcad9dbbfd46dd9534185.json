{"author": "ansible", "code": " (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.playbook.attribute import FieldAttribute\nfrom ansible.playbook.task import Task\n\ntry:\n    from __main__ import display\nexcept ImportError:\n    from ansible.utils.display import Display\n    display = Display()\n\n__all__ = ['TaskInclude']\n\n\nclass TaskInclude(Task):\n\n    \n\n     =================================================================================\n     ATTRIBUTES\n\n    _static = FieldAttribute(isa='bool', default=None)\n\n    def __init__(self, block=None, role=None, task_include=None):\n        super(TaskInclude, self).__init__(block=block, role=role, task_include=task_include)\n        self.statically_loaded = False\n\n    @staticmethod\n    def load(data, block=None, role=None, task_include=None, variable_manager=None, loader=None):\n        t = TaskInclude(block=block, role=role, task_include=task_include)\n        if t.action == 'include_task':\n            t._inheritable = False\n        return t.load_data(data, variable_manager=variable_manager, loader=loader)\n\n    def copy(self, exclude_parent=False, exclude_tasks=False):\n        new_me = super(TaskInclude, self).copy(exclude_parent=exclude_parent, exclude_tasks=exclude_tasks)\n        new_me.statically_loaded = self.statically_loaded\n        return new_me\n\n    def get_vars(self):\n        '''\n        We override the parent Task() classes get_vars here because\n        we need to include the args of the include into the vars as\n        they are params to the included tasks. But ONLY for 'include'\n        '''\n        if self.action != 'include':\n            all_vars = super(TaskInclude, self).get_vars()\n        else:\n            all_vars = dict()\n            if self._parent:\n                all_vars.update(self._parent.get_vars())\n\n            all_vars.update(self.vars)\n            all_vars.update(self.args)\n\n            if 'tags' in all_vars:\n                del all_vars['tags']\n            if 'when' in all_vars:\n                del all_vars['when']\n\n        return all_vars\n", "comments": "        a task include derived regular task handle special     circumstances related    include       task                       we override parent task() classes get vars         need include args include vars         params included tasks  but only  include                 (c) 2012 2014  michael dehaan  michael dehaan gmail com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish                                                                                         attributes ", "content": "# (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.playbook.attribute import FieldAttribute\nfrom ansible.playbook.task import Task\n\ntry:\n    from __main__ import display\nexcept ImportError:\n    from ansible.utils.display import Display\n    display = Display()\n\n__all__ = ['TaskInclude']\n\n\nclass TaskInclude(Task):\n\n    \"\"\"\n    A task include is derived from a regular task to handle the special\n    circumstances related to the `- include: ...` task.\n    \"\"\"\n\n    # =================================================================================\n    # ATTRIBUTES\n\n    _static = FieldAttribute(isa='bool', default=None)\n\n    def __init__(self, block=None, role=None, task_include=None):\n        super(TaskInclude, self).__init__(block=block, role=role, task_include=task_include)\n        self.statically_loaded = False\n\n    @staticmethod\n    def load(data, block=None, role=None, task_include=None, variable_manager=None, loader=None):\n        t = TaskInclude(block=block, role=role, task_include=task_include)\n        if t.action == 'include_task':\n            t._inheritable = False\n        return t.load_data(data, variable_manager=variable_manager, loader=loader)\n\n    def copy(self, exclude_parent=False, exclude_tasks=False):\n        new_me = super(TaskInclude, self).copy(exclude_parent=exclude_parent, exclude_tasks=exclude_tasks)\n        new_me.statically_loaded = self.statically_loaded\n        return new_me\n\n    def get_vars(self):\n        '''\n        We override the parent Task() classes get_vars here because\n        we need to include the args of the include into the vars as\n        they are params to the included tasks. But ONLY for 'include'\n        '''\n        if self.action != 'include':\n            all_vars = super(TaskInclude, self).get_vars()\n        else:\n            all_vars = dict()\n            if self._parent:\n                all_vars.update(self._parent.get_vars())\n\n            all_vars.update(self.vars)\n            all_vars.update(self.args)\n\n            if 'tags' in all_vars:\n                del all_vars['tags']\n            if 'when' in all_vars:\n                del all_vars['when']\n\n        return all_vars\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "task_include.py", "id": "543f33f60d8bcad9dbbfd46dd9534185", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/playbook/task_include.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}