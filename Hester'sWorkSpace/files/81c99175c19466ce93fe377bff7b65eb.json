{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    xpath_text,\n)\n\n\nclass MDRIE(InfoExtractor):\n    IE_DESC = 'MDR.DE and KiKA'\n    _VALID_URL = r'https?://(?:www\\.)?(?:mdr|kika)\\.de/(?:.*)/[a-z-]+-?(?P<id>\\d+)(?:_.+?)?\\.html'\n\n    _TESTS = [{\n        \n        'url': 'http://www.mdr.de/fakt/video189002.html',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://www.mdr.de/kultur/audio1312272_zc-15948bad_zs-86171fdd.html',\n        'md5': '64c4ee50f0a791deb9479cd7bbe9d2fa',\n        'info_dict': {\n            'id': '1312272',\n            'ext': 'mp3',\n            'title': 'Feuilleton vom 30. Oktober 2015',\n            'duration': 250,\n            'uploader': 'MITTELDEUTSCHER RUNDFUNK',\n        },\n        'skip': '404 not found',\n    }, {\n        'url': 'http://www.kika.de/baumhaus/videos/video19636.html',\n        'md5': '4930515e36b06c111213e80d1e4aad0e',\n        'info_dict': {\n            'id': '19636',\n            'ext': 'mp4',\n            'title': 'Baumhaus vom 30. Oktober 2015',\n            'duration': 134,\n            'uploader': 'KIKA',\n        },\n        'skip': '404 not found',\n    }, {\n        'url': 'http://www.kika.de/sendungen/einzelsendungen/weihnachtsprogramm/videos/video8182.html',\n        'md5': '5fe9c4dd7d71e3b238f04b8fdd588357',\n        'info_dict': {\n            'id': '8182',\n            'ext': 'mp4',\n            'title': 'Beutolom\u00e4us und der geheime Weihnachtswunsch',\n            'description': 'md5:b69d32d7b2c55cbe86945ab309d39bbd',\n            'timestamp': 1482541200,\n            'upload_date': '20161224',\n            'duration': 4628,\n            'uploader': 'KIKA',\n        },\n    }, {\n        \n        'url': 'http://www.mdr.de/kultur/videos-und-audios/audio-radio/operation-mindfuck-robert-wilson100.html',\n        'info_dict': {\n            'id': '100',\n            'ext': 'mp4',\n            'title': 'Feature: Operation Mindfuck - Robert Anton Wilson',\n            'duration': 3239,\n            'uploader': 'MITTELDEUTSCHER RUNDFUNK',\n        },\n    }, {\n        'url': 'http://www.kika.de/baumhaus/sendungen/video19636_zc-fea7f8a0_zs-4bf89c60.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.kika.de/sendungen/einzelsendungen/weihnachtsprogramm/einzelsendung2534.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.mdr.de/mediathek/mdr-videos/a/video-1334.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        data_url = self._search_regex(\n            r'(?:dataURL|playerXml(?:[\"\\'])?)\\s*:\\s*([\"\\'])(?P<url>.+?-avCustom\\.xml)\\1',\n            webpage, 'data url', group='url').replace(r'\\/', '/')\n\n        doc = self._download_xml(\n            compat_urlparse.urljoin(url, data_url), video_id)\n\n        title = xpath_text(doc, ['./title', './broadcast/broadcastName'], 'title', fatal=True)\n\n        formats = []\n        processed_urls = []\n        for asset in doc.findall('./assets/asset'):\n            for source in (\n                    'progressiveDownload',\n                    'dynamicHttpStreamingRedirector',\n                    'adaptiveHttpStreamingRedirector'):\n                url_el = asset.find('./%sUrl' % source)\n                if url_el is None:\n                    continue\n\n                video_url = url_el.text\n                if video_url in processed_urls:\n                    continue\n\n                processed_urls.append(video_url)\n\n                vbr = int_or_none(xpath_text(asset, './bitrateVideo', 'vbr'), 1000)\n                abr = int_or_none(xpath_text(asset, './bitrateAudio', 'abr'), 1000)\n\n                ext = determine_ext(url_el.text)\n                if ext == 'm3u8':\n                    url_formats = self._extract_m3u8_formats(\n                        video_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                        preference=0, m3u8_id='HLS', fatal=False)\n                elif ext == 'f4m':\n                    url_formats = self._extract_f4m_formats(\n                        video_url + '?hdcore=3.7.0&plugin=aasp-3.7.0.39.44', video_id,\n                        preference=0, f4m_id='HDS', fatal=False)\n                else:\n                    media_type = xpath_text(asset, './mediaType', 'media type', default='MP4')\n                    vbr = int_or_none(xpath_text(asset, './bitrateVideo', 'vbr'), 1000)\n                    abr = int_or_none(xpath_text(asset, './bitrateAudio', 'abr'), 1000)\n                    filesize = int_or_none(xpath_text(asset, './fileSize', 'file size'))\n\n                    f = {\n                        'url': video_url,\n                        'format_id': '%s-%d' % (media_type, vbr or abr),\n                        'filesize': filesize,\n                        'abr': abr,\n                        'preference': 1,\n                    }\n\n                    if vbr:\n                        width = int_or_none(xpath_text(asset, './frameWidth', 'width'))\n                        height = int_or_none(xpath_text(asset, './frameHeight', 'height'))\n                        f.update({\n                            'vbr': vbr,\n                            'width': width,\n                            'height': height,\n                        })\n\n                    url_formats = [f]\n\n                if not url_formats:\n                    continue\n\n                if not vbr:\n                    for f in url_formats:\n                        abr = f.get('tbr') or abr\n                        if 'tbr' in f:\n                            del f['tbr']\n                        f.update({\n                            'abr': abr,\n                            'vcodec': 'none',\n                        })\n\n                formats.extend(url_formats)\n\n        self._sort_formats(formats)\n\n        description = xpath_text(doc, './broadcast/broadcastDescription', 'description')\n        timestamp = parse_iso8601(\n            xpath_text(\n                doc, [\n                    './broadcast/broadcastDate',\n                    './broadcast/broadcastStartDate',\n                    './broadcast/broadcastEndDate'],\n                'timestamp', default=None))\n        duration = parse_duration(xpath_text(doc, './duration', 'duration'))\n        uploader = xpath_text(doc, './rights', 'uploader')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'duration': duration,\n            'uploader': uploader,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# MDR regularly deletes its videos\n# audio\n# audio with alternative playerURL pattern\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    xpath_text,\n)\n\n\nclass MDRIE(InfoExtractor):\n    IE_DESC = 'MDR.DE and KiKA'\n    _VALID_URL = r'https?://(?:www\\.)?(?:mdr|kika)\\.de/(?:.*)/[a-z-]+-?(?P<id>\\d+)(?:_.+?)?\\.html'\n\n    _TESTS = [{\n        # MDR regularly deletes its videos\n        'url': 'http://www.mdr.de/fakt/video189002.html',\n        'only_matching': True,\n    }, {\n        # audio\n        'url': 'http://www.mdr.de/kultur/audio1312272_zc-15948bad_zs-86171fdd.html',\n        'md5': '64c4ee50f0a791deb9479cd7bbe9d2fa',\n        'info_dict': {\n            'id': '1312272',\n            'ext': 'mp3',\n            'title': 'Feuilleton vom 30. Oktober 2015',\n            'duration': 250,\n            'uploader': 'MITTELDEUTSCHER RUNDFUNK',\n        },\n        'skip': '404 not found',\n    }, {\n        'url': 'http://www.kika.de/baumhaus/videos/video19636.html',\n        'md5': '4930515e36b06c111213e80d1e4aad0e',\n        'info_dict': {\n            'id': '19636',\n            'ext': 'mp4',\n            'title': 'Baumhaus vom 30. Oktober 2015',\n            'duration': 134,\n            'uploader': 'KIKA',\n        },\n        'skip': '404 not found',\n    }, {\n        'url': 'http://www.kika.de/sendungen/einzelsendungen/weihnachtsprogramm/videos/video8182.html',\n        'md5': '5fe9c4dd7d71e3b238f04b8fdd588357',\n        'info_dict': {\n            'id': '8182',\n            'ext': 'mp4',\n            'title': 'Beutolom\u00e4us und der geheime Weihnachtswunsch',\n            'description': 'md5:b69d32d7b2c55cbe86945ab309d39bbd',\n            'timestamp': 1482541200,\n            'upload_date': '20161224',\n            'duration': 4628,\n            'uploader': 'KIKA',\n        },\n    }, {\n        # audio with alternative playerURL pattern\n        'url': 'http://www.mdr.de/kultur/videos-und-audios/audio-radio/operation-mindfuck-robert-wilson100.html',\n        'info_dict': {\n            'id': '100',\n            'ext': 'mp4',\n            'title': 'Feature: Operation Mindfuck - Robert Anton Wilson',\n            'duration': 3239,\n            'uploader': 'MITTELDEUTSCHER RUNDFUNK',\n        },\n    }, {\n        'url': 'http://www.kika.de/baumhaus/sendungen/video19636_zc-fea7f8a0_zs-4bf89c60.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.kika.de/sendungen/einzelsendungen/weihnachtsprogramm/einzelsendung2534.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.mdr.de/mediathek/mdr-videos/a/video-1334.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        data_url = self._search_regex(\n            r'(?:dataURL|playerXml(?:[\"\\'])?)\\s*:\\s*([\"\\'])(?P<url>.+?-avCustom\\.xml)\\1',\n            webpage, 'data url', group='url').replace(r'\\/', '/')\n\n        doc = self._download_xml(\n            compat_urlparse.urljoin(url, data_url), video_id)\n\n        title = xpath_text(doc, ['./title', './broadcast/broadcastName'], 'title', fatal=True)\n\n        formats = []\n        processed_urls = []\n        for asset in doc.findall('./assets/asset'):\n            for source in (\n                    'progressiveDownload',\n                    'dynamicHttpStreamingRedirector',\n                    'adaptiveHttpStreamingRedirector'):\n                url_el = asset.find('./%sUrl' % source)\n                if url_el is None:\n                    continue\n\n                video_url = url_el.text\n                if video_url in processed_urls:\n                    continue\n\n                processed_urls.append(video_url)\n\n                vbr = int_or_none(xpath_text(asset, './bitrateVideo', 'vbr'), 1000)\n                abr = int_or_none(xpath_text(asset, './bitrateAudio', 'abr'), 1000)\n\n                ext = determine_ext(url_el.text)\n                if ext == 'm3u8':\n                    url_formats = self._extract_m3u8_formats(\n                        video_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                        preference=0, m3u8_id='HLS', fatal=False)\n                elif ext == 'f4m':\n                    url_formats = self._extract_f4m_formats(\n                        video_url + '?hdcore=3.7.0&plugin=aasp-3.7.0.39.44', video_id,\n                        preference=0, f4m_id='HDS', fatal=False)\n                else:\n                    media_type = xpath_text(asset, './mediaType', 'media type', default='MP4')\n                    vbr = int_or_none(xpath_text(asset, './bitrateVideo', 'vbr'), 1000)\n                    abr = int_or_none(xpath_text(asset, './bitrateAudio', 'abr'), 1000)\n                    filesize = int_or_none(xpath_text(asset, './fileSize', 'file size'))\n\n                    f = {\n                        'url': video_url,\n                        'format_id': '%s-%d' % (media_type, vbr or abr),\n                        'filesize': filesize,\n                        'abr': abr,\n                        'preference': 1,\n                    }\n\n                    if vbr:\n                        width = int_or_none(xpath_text(asset, './frameWidth', 'width'))\n                        height = int_or_none(xpath_text(asset, './frameHeight', 'height'))\n                        f.update({\n                            'vbr': vbr,\n                            'width': width,\n                            'height': height,\n                        })\n\n                    url_formats = [f]\n\n                if not url_formats:\n                    continue\n\n                if not vbr:\n                    for f in url_formats:\n                        abr = f.get('tbr') or abr\n                        if 'tbr' in f:\n                            del f['tbr']\n                        f.update({\n                            'abr': abr,\n                            'vcodec': 'none',\n                        })\n\n                formats.extend(url_formats)\n\n        self._sort_formats(formats)\n\n        description = xpath_text(doc, './broadcast/broadcastDescription', 'description')\n        timestamp = parse_iso8601(\n            xpath_text(\n                doc, [\n                    './broadcast/broadcastDate',\n                    './broadcast/broadcastStartDate',\n                    './broadcast/broadcastEndDate'],\n                'timestamp', default=None))\n        duration = parse_duration(xpath_text(doc, './duration', 'duration'))\n        uploader = xpath_text(doc, './rights', 'uploader')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'duration': duration,\n            'uploader': uploader,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "mdr.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/mdr.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}