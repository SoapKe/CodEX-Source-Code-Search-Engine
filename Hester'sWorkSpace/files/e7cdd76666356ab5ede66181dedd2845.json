{"author": "jakubroztocil", "code": "import os\n\nimport pytest\nimport pytest_httpbin.certs\nfrom requests.exceptions import SSLError\n\nfrom httpie import ExitStatus\nfrom httpie.input import SSL_VERSION_ARG_MAPPING\nfrom utils import http, HTTP_OK, TESTS_ROOT\n\n\nCLIENT_CERT = os.path.join(TESTS_ROOT, 'client_certs', 'client.crt')\nCLIENT_KEY = os.path.join(TESTS_ROOT, 'client_certs', 'client.key')\nCLIENT_PEM = os.path.join(TESTS_ROOT, 'client_certs', 'client.pem')\n\n\n\n\n\nCA_BUNDLE = pytest_httpbin.certs.where()\n\n\n@pytest.mark.parametrize('ssl_version', SSL_VERSION_ARG_MAPPING.keys())\ndef test_ssl_version(httpbin_secure, ssl_version):\n    try:\n        r = http(\n            '--ssl', ssl_version,\n            httpbin_secure + '/get'\n        )\n        assert HTTP_OK in r\n    except SSLError as e:\n        if ssl_version == 'ssl3':\n            \n            assert 'SSLV3_ALERT_HANDSHAKE_FAILURE' in str(e)\n        else:\n            raise\n\n\nclass TestClientCert:\n\n    def test_cert_and_key(self, httpbin_secure):\n        r = http(httpbin_secure + '/get',\n                 '--cert', CLIENT_CERT,\n                 '--cert-key', CLIENT_KEY)\n        assert HTTP_OK in r\n\n    def test_cert_pem(self, httpbin_secure):\n        r = http(httpbin_secure + '/get',\n                 '--cert', CLIENT_PEM)\n        assert HTTP_OK in r\n\n    def test_cert_file_not_found(self, httpbin_secure):\n        r = http(httpbin_secure + '/get',\n                 '--cert', '/__not_found__',\n                 error_exit_ok=True)\n        assert r.exit_status == ExitStatus.ERROR\n        assert 'No such file or directory' in r.stderr\n\n    def test_cert_file_invalid(self, httpbin_secure):\n        with pytest.raises(SSLError):\n            http(httpbin_secure + '/get',\n                 '--cert', __file__)\n\n    def test_cert_ok_but_missing_key(self, httpbin_secure):\n        with pytest.raises(SSLError):\n            http(httpbin_secure + '/get',\n                 '--cert', CLIENT_CERT)\n\n\nclass TestServerCert:\n\n    def test_verify_no_OK(self, httpbin_secure):\n        r = http(httpbin_secure.url + '/get', '--verify=no')\n        assert HTTP_OK in r\n\n    @pytest.mark.parametrize('verify_value', ['false', 'fALse'])\n    def test_verify_false_OK(self, httpbin_secure, verify_value):\n        r = http(httpbin_secure.url + '/get', '--verify', verify_value)\n        assert HTTP_OK in r\n\n    def test_verify_custom_ca_bundle_path(\n            self, httpbin_secure_untrusted):\n        r = http(httpbin_secure_untrusted + '/get', '--verify', CA_BUNDLE)\n        assert HTTP_OK in r\n\n    def test_self_signed_server_cert_by_default_raises_ssl_error(\n            self,\n            httpbin_secure_untrusted):\n        with pytest.raises(SSLError):\n            http(httpbin_secure_untrusted.url + '/get')\n\n    def test_verify_custom_ca_bundle_invalid_path(self, httpbin_secure):\n        \n        with pytest.raises((SSLError, IOError)):\n            http(httpbin_secure.url + '/get', '--verify', '/__not_found__')\n\n    def test_verify_custom_ca_bundle_invalid_bundle(self, httpbin_secure):\n        with pytest.raises(SSLError):\n            http(httpbin_secure.url + '/get', '--verify', __file__)\n", "comments": "# FIXME:\n# We test against a local httpbin instance which uses a self-signed cert.\n# Requests without --verify=<CA_BUNDLE> will fail with a verification error.\n# See: https://github.com/kevin1024/pytest-httpbin#https-support\n# pytest-httpbin doesn't support ssl3\n# since 2.14.0 requests raises IOError\n", "content": "import os\n\nimport pytest\nimport pytest_httpbin.certs\nfrom requests.exceptions import SSLError\n\nfrom httpie import ExitStatus\nfrom httpie.input import SSL_VERSION_ARG_MAPPING\nfrom utils import http, HTTP_OK, TESTS_ROOT\n\n\nCLIENT_CERT = os.path.join(TESTS_ROOT, 'client_certs', 'client.crt')\nCLIENT_KEY = os.path.join(TESTS_ROOT, 'client_certs', 'client.key')\nCLIENT_PEM = os.path.join(TESTS_ROOT, 'client_certs', 'client.pem')\n\n# FIXME:\n# We test against a local httpbin instance which uses a self-signed cert.\n# Requests without --verify=<CA_BUNDLE> will fail with a verification error.\n# See: https://github.com/kevin1024/pytest-httpbin#https-support\nCA_BUNDLE = pytest_httpbin.certs.where()\n\n\n@pytest.mark.parametrize('ssl_version', SSL_VERSION_ARG_MAPPING.keys())\ndef test_ssl_version(httpbin_secure, ssl_version):\n    try:\n        r = http(\n            '--ssl', ssl_version,\n            httpbin_secure + '/get'\n        )\n        assert HTTP_OK in r\n    except SSLError as e:\n        if ssl_version == 'ssl3':\n            # pytest-httpbin doesn't support ssl3\n            assert 'SSLV3_ALERT_HANDSHAKE_FAILURE' in str(e)\n        else:\n            raise\n\n\nclass TestClientCert:\n\n    def test_cert_and_key(self, httpbin_secure):\n        r = http(httpbin_secure + '/get',\n                 '--cert', CLIENT_CERT,\n                 '--cert-key', CLIENT_KEY)\n        assert HTTP_OK in r\n\n    def test_cert_pem(self, httpbin_secure):\n        r = http(httpbin_secure + '/get',\n                 '--cert', CLIENT_PEM)\n        assert HTTP_OK in r\n\n    def test_cert_file_not_found(self, httpbin_secure):\n        r = http(httpbin_secure + '/get',\n                 '--cert', '/__not_found__',\n                 error_exit_ok=True)\n        assert r.exit_status == ExitStatus.ERROR\n        assert 'No such file or directory' in r.stderr\n\n    def test_cert_file_invalid(self, httpbin_secure):\n        with pytest.raises(SSLError):\n            http(httpbin_secure + '/get',\n                 '--cert', __file__)\n\n    def test_cert_ok_but_missing_key(self, httpbin_secure):\n        with pytest.raises(SSLError):\n            http(httpbin_secure + '/get',\n                 '--cert', CLIENT_CERT)\n\n\nclass TestServerCert:\n\n    def test_verify_no_OK(self, httpbin_secure):\n        r = http(httpbin_secure.url + '/get', '--verify=no')\n        assert HTTP_OK in r\n\n    @pytest.mark.parametrize('verify_value', ['false', 'fALse'])\n    def test_verify_false_OK(self, httpbin_secure, verify_value):\n        r = http(httpbin_secure.url + '/get', '--verify', verify_value)\n        assert HTTP_OK in r\n\n    def test_verify_custom_ca_bundle_path(\n            self, httpbin_secure_untrusted):\n        r = http(httpbin_secure_untrusted + '/get', '--verify', CA_BUNDLE)\n        assert HTTP_OK in r\n\n    def test_self_signed_server_cert_by_default_raises_ssl_error(\n            self,\n            httpbin_secure_untrusted):\n        with pytest.raises(SSLError):\n            http(httpbin_secure_untrusted.url + '/get')\n\n    def test_verify_custom_ca_bundle_invalid_path(self, httpbin_secure):\n        # since 2.14.0 requests raises IOError\n        with pytest.raises((SSLError, IOError)):\n            http(httpbin_secure.url + '/get', '--verify', '/__not_found__')\n\n    def test_verify_custom_ca_bundle_invalid_bundle(self, httpbin_secure):\n        with pytest.raises(SSLError):\n            http(httpbin_secure.url + '/get', '--verify', __file__)\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "test_ssl.py", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil_httpie/jakubroztocil-httpie-0f4dce9/tests/test_ssl.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:20:06Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}