{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n (c) 2016, Loic Blot <loic.blot@unix-experience.fr>\n\n\n\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: mongodb_parameter\nshort_description: Change an administrative parameter on a MongoDB server.\ndescription:\n    - Change an administrative parameter on a MongoDB server.\nversion_added: \"2.1\"\noptions:\n    login_user:\n        description:\n            - The username used to authenticate with\n    login_password:\n        description:\n            - The password used to authenticate with\n    login_host:\n        description:\n            - The host running the database\n        default: localhost\n    login_port:\n        description:\n            - The port to connect to\n        default: 27017\n    login_database:\n        description:\n            - The database where login credentials are stored\n    replica_set:\n        description:\n            - Replica set to connect to (automatically connects to primary for writes)\n    database:\n        description:\n            - The name of the database to add/remove the user from\n        required: true\n    ssl:\n        description:\n            - Whether to use an SSL connection when connecting to the database\n        type: bool\n        default: 'no'\n    param:\n        description:\n            - MongoDB administrative parameter to modify\n        required: true\n    value:\n        description:\n            - MongoDB administrative parameter value to set\n        required: true\n    param_type:\n        description:\n            - Define the parameter value (str, int)\n        default: str\n\nnotes:\n    - Requires the pymongo Python package on the remote host, version 2.4.2+. This\n      can be installed using pip or the OS package manager. @see http://api.mongodb.org/python/current/installation.html\nrequirements: [ \"pymongo\" ]\nauthor: \"Loic Blot (@nerzhul)\"\n'''\n\nEXAMPLES = '''\n Set MongoDB syncdelay to 60 (this is an int)\n- mongodb_parameter:\n    param: syncdelay\n    value: 60\n    param_type: int\n'''\n\nRETURN = '''\nbefore:\n    description: value before modification\n    returned: success\n    type: string\nafter:\n    description: value after modification\n    returned: success\n    type: string\n'''\n\nimport os\nimport traceback\n\ntry:\n    from pymongo.errors import ConnectionFailure\n    from pymongo.errors import OperationFailure\n    from pymongo import version as PyMongoVersion\n    from pymongo import MongoClient\nexcept ImportError:\n    try:   for older PyMongo 2.2\n        from pymongo import Connection as MongoClient\n    except ImportError:\n        pymongo_found = False\n    else:\n        pymongo_found = True\nelse:\n    pymongo_found = True\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six.moves import configparser\nfrom ansible.module_utils._text import to_native\n\n\n =========================================\n MongoDB module specific support methods.\n\n\ndef load_mongocnf():\n    config = configparser.RawConfigParser()\n    mongocnf = os.path.expanduser('~/.mongodb.cnf')\n\n    try:\n        config.readfp(open(mongocnf))\n        creds = dict(\n            user=config.get('client', 'user'),\n            password=config.get('client', 'pass')\n        )\n    except (configparser.NoOptionError, IOError):\n        return False\n\n    return creds\n\n\n =========================================\n Module execution.\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            login_user=dict(default=None),\n            login_password=dict(default=None, no_log=True),\n            login_host=dict(default='localhost'),\n            login_port=dict(default=27017, type='int'),\n            login_database=dict(default=None),\n            replica_set=dict(default=None),\n            param=dict(default=None, required=True),\n            value=dict(default=None, required=True),\n            param_type=dict(default=\"str\", choices=['str', 'int']),\n            ssl=dict(default=False, type='bool'),\n        )\n    )\n\n    if not pymongo_found:\n        module.fail_json(msg='the python pymongo module is required')\n\n    login_user = module.params['login_user']\n    login_password = module.params['login_password']\n    login_host = module.params['login_host']\n    login_port = module.params['login_port']\n    login_database = module.params['login_database']\n\n    replica_set = module.params['replica_set']\n    ssl = module.params['ssl']\n\n    param = module.params['param']\n    param_type = module.params['param_type']\n    value = module.params['value']\n\n     Verify parameter is coherent with specified type\n    try:\n        if param_type == 'int':\n            value = int(value)\n    except ValueError:\n        module.fail_json(msg=\"value '%s' is not %s\" % (value, param_type))\n\n    try:\n        if replica_set:\n            client = MongoClient(login_host, int(login_port), replicaset=replica_set, ssl=ssl)\n        else:\n            client = MongoClient(login_host, int(login_port), ssl=ssl)\n\n        if login_user is None and login_password is None:\n            mongocnf_creds = load_mongocnf()\n            if mongocnf_creds is not False:\n                login_user = mongocnf_creds['user']\n                login_password = mongocnf_creds['password']\n        elif login_password is None or login_user is None:\n            module.fail_json(msg='when supplying login arguments, both login_user and login_password must be provided')\n\n        if login_user is not None and login_password is not None:\n            client.admin.authenticate(login_user, login_password, source=login_database)\n\n    except ConnectionFailure as e:\n        module.fail_json(msg='unable to connect to database: %s' % to_native(e), exception=traceback.format_exc())\n\n    db = client.admin\n\n    try:\n        after_value = db.command(\"setParameter\", **{param: value})\n    except OperationFailure as e:\n        module.fail_json(msg=\"unable to change parameter: %s\" % to_native(e), exception=traceback.format_exc())\n\n    if \"was\" not in after_value:\n        module.exit_json(changed=True, msg=\"Unable to determine old value, assume it changed.\")\n    else:\n        module.exit_json(changed=(value != after_value[\"was\"]), before=after_value[\"was\"],\n                         after=value)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  mongodb parameter short description  change administrative parameter mongodb server  description        change administrative parameter mongodb server  version added   2 1  options      login user          description                the username used authenticate     login password          description                the password used authenticate     login host          description                the host running database         default  localhost     login port          description                the port connect         default  27017     login database          description                the database login credentials stored     replica set          description                replica set connect (automatically connects primary writes)     database          description                the name database add remove user         required  true     ssl          description                whether use ssl connection connecting database         type  bool         default        param          description                mongodb administrative parameter modify         required  true     value          description                mongodb administrative parameter value set         required  true     param type          description                define parameter value (str  int)         default  str  notes        requires pymongo python package remote host  version 2 4 2   this       installed using pip os package manager   see http   api mongodb org python current installation html requirements     pymongo    author   loic blot ( nerzhul)       examples         set mongodb syncdelay 60 (this int)   mongodb parameter      param  syncdelay     value  60     param type  int      return            description  value modification     returned  success     type  string      description  value modification     returned  success     type  string         usr bin python        coding  utf 8        (c) 2016  loic blot  loic blot unix experience fr     sponsored infopro digital  http   www infopro digital com     sponsored e t a i  http   www etai fr        gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    set mongodb syncdelay 60 (this int)    older pymongo 2 2                                                 mongodb module specific support methods                                                     module execution        verify parameter coherent specified type ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2016, Loic Blot <loic.blot@unix-experience.fr>\n# Sponsored by Infopro Digital. http://www.infopro-digital.com/\n# Sponsored by E.T.A.I. http://www.etai.fr/\n#\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: mongodb_parameter\nshort_description: Change an administrative parameter on a MongoDB server.\ndescription:\n    - Change an administrative parameter on a MongoDB server.\nversion_added: \"2.1\"\noptions:\n    login_user:\n        description:\n            - The username used to authenticate with\n    login_password:\n        description:\n            - The password used to authenticate with\n    login_host:\n        description:\n            - The host running the database\n        default: localhost\n    login_port:\n        description:\n            - The port to connect to\n        default: 27017\n    login_database:\n        description:\n            - The database where login credentials are stored\n    replica_set:\n        description:\n            - Replica set to connect to (automatically connects to primary for writes)\n    database:\n        description:\n            - The name of the database to add/remove the user from\n        required: true\n    ssl:\n        description:\n            - Whether to use an SSL connection when connecting to the database\n        type: bool\n        default: 'no'\n    param:\n        description:\n            - MongoDB administrative parameter to modify\n        required: true\n    value:\n        description:\n            - MongoDB administrative parameter value to set\n        required: true\n    param_type:\n        description:\n            - Define the parameter value (str, int)\n        default: str\n\nnotes:\n    - Requires the pymongo Python package on the remote host, version 2.4.2+. This\n      can be installed using pip or the OS package manager. @see http://api.mongodb.org/python/current/installation.html\nrequirements: [ \"pymongo\" ]\nauthor: \"Loic Blot (@nerzhul)\"\n'''\n\nEXAMPLES = '''\n# Set MongoDB syncdelay to 60 (this is an int)\n- mongodb_parameter:\n    param: syncdelay\n    value: 60\n    param_type: int\n'''\n\nRETURN = '''\nbefore:\n    description: value before modification\n    returned: success\n    type: string\nafter:\n    description: value after modification\n    returned: success\n    type: string\n'''\n\nimport os\nimport traceback\n\ntry:\n    from pymongo.errors import ConnectionFailure\n    from pymongo.errors import OperationFailure\n    from pymongo import version as PyMongoVersion\n    from pymongo import MongoClient\nexcept ImportError:\n    try:  # for older PyMongo 2.2\n        from pymongo import Connection as MongoClient\n    except ImportError:\n        pymongo_found = False\n    else:\n        pymongo_found = True\nelse:\n    pymongo_found = True\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six.moves import configparser\nfrom ansible.module_utils._text import to_native\n\n\n# =========================================\n# MongoDB module specific support methods.\n#\n\ndef load_mongocnf():\n    config = configparser.RawConfigParser()\n    mongocnf = os.path.expanduser('~/.mongodb.cnf')\n\n    try:\n        config.readfp(open(mongocnf))\n        creds = dict(\n            user=config.get('client', 'user'),\n            password=config.get('client', 'pass')\n        )\n    except (configparser.NoOptionError, IOError):\n        return False\n\n    return creds\n\n\n# =========================================\n# Module execution.\n#\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            login_user=dict(default=None),\n            login_password=dict(default=None, no_log=True),\n            login_host=dict(default='localhost'),\n            login_port=dict(default=27017, type='int'),\n            login_database=dict(default=None),\n            replica_set=dict(default=None),\n            param=dict(default=None, required=True),\n            value=dict(default=None, required=True),\n            param_type=dict(default=\"str\", choices=['str', 'int']),\n            ssl=dict(default=False, type='bool'),\n        )\n    )\n\n    if not pymongo_found:\n        module.fail_json(msg='the python pymongo module is required')\n\n    login_user = module.params['login_user']\n    login_password = module.params['login_password']\n    login_host = module.params['login_host']\n    login_port = module.params['login_port']\n    login_database = module.params['login_database']\n\n    replica_set = module.params['replica_set']\n    ssl = module.params['ssl']\n\n    param = module.params['param']\n    param_type = module.params['param_type']\n    value = module.params['value']\n\n    # Verify parameter is coherent with specified type\n    try:\n        if param_type == 'int':\n            value = int(value)\n    except ValueError:\n        module.fail_json(msg=\"value '%s' is not %s\" % (value, param_type))\n\n    try:\n        if replica_set:\n            client = MongoClient(login_host, int(login_port), replicaset=replica_set, ssl=ssl)\n        else:\n            client = MongoClient(login_host, int(login_port), ssl=ssl)\n\n        if login_user is None and login_password is None:\n            mongocnf_creds = load_mongocnf()\n            if mongocnf_creds is not False:\n                login_user = mongocnf_creds['user']\n                login_password = mongocnf_creds['password']\n        elif login_password is None or login_user is None:\n            module.fail_json(msg='when supplying login arguments, both login_user and login_password must be provided')\n\n        if login_user is not None and login_password is not None:\n            client.admin.authenticate(login_user, login_password, source=login_database)\n\n    except ConnectionFailure as e:\n        module.fail_json(msg='unable to connect to database: %s' % to_native(e), exception=traceback.format_exc())\n\n    db = client.admin\n\n    try:\n        after_value = db.command(\"setParameter\", **{param: value})\n    except OperationFailure as e:\n        module.fail_json(msg=\"unable to change parameter: %s\" % to_native(e), exception=traceback.format_exc())\n\n    if \"was\" not in after_value:\n        module.exit_json(changed=True, msg=\"Unable to determine old value, assume it changed.\")\n    else:\n        module.exit_json(changed=(value != after_value[\"was\"]), before=after_value[\"was\"],\n                         after=value)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "mongodb_parameter.py", "id": "8d559f8d68a678a7c20dccf057c9ba2a", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/database/mongodb/mongodb_parameter.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}