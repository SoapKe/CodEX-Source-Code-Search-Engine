{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_HTTPError\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n    int_or_none,\n    parse_age_limit,\n    sanitized_Request,\n    try_get,\n)\n\n\nclass HRTiBaseIE(InfoExtractor):\n    \n    _NETRC_MACHINE = 'hrti'\n\n    _APP_LANGUAGE = 'hr'\n    _APP_VERSION = '1.1'\n    _APP_PUBLICATION_ID = 'all_in_one'\n    _API_URL = 'http://clientapi.hrt.hr/client_api.php/config/identify/format/json'\n\n    def _initialize_api(self):\n        init_data = {\n            'application_publication_id': self._APP_PUBLICATION_ID\n        }\n\n        uuid = self._download_json(\n            self._API_URL, None, note='Downloading uuid',\n            errnote='Unable to download uuid',\n            data=json.dumps(init_data).encode('utf-8'))['uuid']\n\n        app_data = {\n            'uuid': uuid,\n            'application_publication_id': self._APP_PUBLICATION_ID,\n            'application_version': self._APP_VERSION\n        }\n\n        req = sanitized_Request(self._API_URL, data=json.dumps(app_data).encode('utf-8'))\n        req.get_method = lambda: 'PUT'\n\n        resources = self._download_json(\n            req, None, note='Downloading session information',\n            errnote='Unable to download session information')\n\n        self._session_id = resources['session_id']\n\n        modules = resources['modules']\n\n        self._search_url = modules['vod_catalog']['resources']['search']['uri'].format(\n            language=self._APP_LANGUAGE,\n            application_id=self._APP_PUBLICATION_ID)\n\n        self._login_url = (modules['user']['resources']['login']['uri'] +\n                           '/format/json').format(session_id=self._session_id)\n\n        self._logout_url = modules['user']['resources']['logout']['uri']\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        \n        if username is None or password is None:\n            self.raise_login_required()\n\n        auth_data = {\n            'username': username,\n            'password': password,\n        }\n\n        try:\n            auth_info = self._download_json(\n                self._login_url, None, note='Logging in', errnote='Unable to log in',\n                data=json.dumps(auth_data).encode('utf-8'))\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 406:\n                auth_info = self._parse_json(e.cause.read().encode('utf-8'), None)\n            else:\n                raise\n\n        error_message = auth_info.get('error', {}).get('message')\n        if error_message:\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, error_message),\n                expected=True)\n\n        self._token = auth_info['secure_streaming_token']\n\n    def _real_initialize(self):\n        self._initialize_api()\n        self._login()\n\n\nclass HRTiIE(HRTiBaseIE):\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'https://hrti.hrt.hr/\n        'info_dict': {\n            'id': '2181385',\n            'display_id': 'republika-dokumentarna-serija-16-hd',\n            'ext': 'mp4',\n            'title': 'REPUBLIKA, dokumentarna serija (1/6) (HD)',\n            'description': 'md5:48af85f620e8e0e1df4096270568544f',\n            'duration': 2922,\n            'view_count': int,\n            'average_rating': int,\n            'episode_number': int,\n            'season_number': int,\n            'age_limit': 12,\n        },\n        'skip': 'Requires account credentials',\n    }, {\n        'url': 'https://hrti.hrt.hr/\n        'only_matching': True,\n    }, {\n        'url': 'hrti:2181385',\n        'only_matching': True,\n    }, {\n        'url': 'https://hrti.hrt.hr/video/show/3873068/cuvar-dvorca-dramska-serija-14',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('short_id') or mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        video = self._download_json(\n            '%s/video_id/%s/format/json' % (self._search_url, video_id),\n            display_id, 'Downloading video metadata JSON')['video'][0]\n\n        title_info = video['title']\n        title = title_info['title_long']\n\n        movie = video['video_assets']['movie'][0]\n        m3u8_url = movie['url'].format(TOKEN=self._token)\n        formats = self._extract_m3u8_formats(\n            m3u8_url, display_id, 'mp4', entry_protocol='m3u8_native',\n            m3u8_id='hls')\n        self._sort_formats(formats)\n\n        description = clean_html(title_info.get('summary_long'))\n        age_limit = parse_age_limit(video.get('parental_control', {}).get('rating'))\n        view_count = int_or_none(video.get('views'))\n        average_rating = int_or_none(video.get('user_rating'))\n        duration = int_or_none(movie.get('duration'))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'view_count': view_count,\n            'average_rating': average_rating,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n\n\nclass HRTiPlaylistIE(HRTiBaseIE):\n    _VALID_URL = r'https?://hrti\\.hrt\\.hr/(?:\n    _TESTS = [{\n        'url': 'https://hrti.hrt.hr/\n        'info_dict': {\n            'id': '212',\n            'title': 'ekumena',\n        },\n        'playlist_mincount': 8,\n        'skip': 'Requires account credentials',\n    }, {\n        'url': 'https://hrti.hrt.hr/\n        'only_matching': True,\n    }, {\n        'url': 'https://hrti.hrt.hr/video/list/category/212/ekumena',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        category_id = mobj.group('id')\n        display_id = mobj.group('display_id') or category_id\n\n        response = self._download_json(\n            '%s/category_id/%s/format/json' % (self._search_url, category_id),\n            display_id, 'Downloading video metadata JSON')\n\n        video_ids = try_get(\n            response, lambda x: x['video_listings'][0]['alternatives'][0]['list'],\n            list) or [video['id'] for video in response.get('videos', []) if video.get('id')]\n\n        entries = [self.url_result('hrti:%s' % video_id) for video_id in video_ids]\n\n        return self.playlist_result(entries, category_id, display_id)\n", "comments": "\n        Base Information Extractor for Croatian Radiotelevision\n        video on demand site https://hrti.hrt.hr\n        Reverse engineered from the JavaScript app in app.min.js\n    \n \n(?x)\n                        (?:\n                            hrti:(?P<short_id>[0-9]+)|\n                            https?://\n                                hrti\\.hrt\\.hr/(?:\\#/)?video/show/(?P<id>[0-9]+)/(?P<display_id>[^/]+)?\n                        )\n                    \n \n# coding: utf-8\n# TODO: figure out authentication with cookies\n#/video/show/2181385/republika-dokumentarna-serija-16-hd',\n#/video/show/2181385/',\n#/)?video/list/category/(?P<id>[0-9]+)/(?P<display_id>[^/]+)?'\n#/video/list/category/212/ekumena',\n#/video/list/category/212/',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_HTTPError\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n    int_or_none,\n    parse_age_limit,\n    sanitized_Request,\n    try_get,\n)\n\n\nclass HRTiBaseIE(InfoExtractor):\n    \"\"\"\n        Base Information Extractor for Croatian Radiotelevision\n        video on demand site https://hrti.hrt.hr\n        Reverse engineered from the JavaScript app in app.min.js\n    \"\"\"\n    _NETRC_MACHINE = 'hrti'\n\n    _APP_LANGUAGE = 'hr'\n    _APP_VERSION = '1.1'\n    _APP_PUBLICATION_ID = 'all_in_one'\n    _API_URL = 'http://clientapi.hrt.hr/client_api.php/config/identify/format/json'\n\n    def _initialize_api(self):\n        init_data = {\n            'application_publication_id': self._APP_PUBLICATION_ID\n        }\n\n        uuid = self._download_json(\n            self._API_URL, None, note='Downloading uuid',\n            errnote='Unable to download uuid',\n            data=json.dumps(init_data).encode('utf-8'))['uuid']\n\n        app_data = {\n            'uuid': uuid,\n            'application_publication_id': self._APP_PUBLICATION_ID,\n            'application_version': self._APP_VERSION\n        }\n\n        req = sanitized_Request(self._API_URL, data=json.dumps(app_data).encode('utf-8'))\n        req.get_method = lambda: 'PUT'\n\n        resources = self._download_json(\n            req, None, note='Downloading session information',\n            errnote='Unable to download session information')\n\n        self._session_id = resources['session_id']\n\n        modules = resources['modules']\n\n        self._search_url = modules['vod_catalog']['resources']['search']['uri'].format(\n            language=self._APP_LANGUAGE,\n            application_id=self._APP_PUBLICATION_ID)\n\n        self._login_url = (modules['user']['resources']['login']['uri'] +\n                           '/format/json').format(session_id=self._session_id)\n\n        self._logout_url = modules['user']['resources']['logout']['uri']\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        # TODO: figure out authentication with cookies\n        if username is None or password is None:\n            self.raise_login_required()\n\n        auth_data = {\n            'username': username,\n            'password': password,\n        }\n\n        try:\n            auth_info = self._download_json(\n                self._login_url, None, note='Logging in', errnote='Unable to log in',\n                data=json.dumps(auth_data).encode('utf-8'))\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 406:\n                auth_info = self._parse_json(e.cause.read().encode('utf-8'), None)\n            else:\n                raise\n\n        error_message = auth_info.get('error', {}).get('message')\n        if error_message:\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, error_message),\n                expected=True)\n\n        self._token = auth_info['secure_streaming_token']\n\n    def _real_initialize(self):\n        self._initialize_api()\n        self._login()\n\n\nclass HRTiIE(HRTiBaseIE):\n    _VALID_URL = r'''(?x)\n                        (?:\n                            hrti:(?P<short_id>[0-9]+)|\n                            https?://\n                                hrti\\.hrt\\.hr/(?:\\#/)?video/show/(?P<id>[0-9]+)/(?P<display_id>[^/]+)?\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://hrti.hrt.hr/#/video/show/2181385/republika-dokumentarna-serija-16-hd',\n        'info_dict': {\n            'id': '2181385',\n            'display_id': 'republika-dokumentarna-serija-16-hd',\n            'ext': 'mp4',\n            'title': 'REPUBLIKA, dokumentarna serija (1/6) (HD)',\n            'description': 'md5:48af85f620e8e0e1df4096270568544f',\n            'duration': 2922,\n            'view_count': int,\n            'average_rating': int,\n            'episode_number': int,\n            'season_number': int,\n            'age_limit': 12,\n        },\n        'skip': 'Requires account credentials',\n    }, {\n        'url': 'https://hrti.hrt.hr/#/video/show/2181385/',\n        'only_matching': True,\n    }, {\n        'url': 'hrti:2181385',\n        'only_matching': True,\n    }, {\n        'url': 'https://hrti.hrt.hr/video/show/3873068/cuvar-dvorca-dramska-serija-14',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('short_id') or mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        video = self._download_json(\n            '%s/video_id/%s/format/json' % (self._search_url, video_id),\n            display_id, 'Downloading video metadata JSON')['video'][0]\n\n        title_info = video['title']\n        title = title_info['title_long']\n\n        movie = video['video_assets']['movie'][0]\n        m3u8_url = movie['url'].format(TOKEN=self._token)\n        formats = self._extract_m3u8_formats(\n            m3u8_url, display_id, 'mp4', entry_protocol='m3u8_native',\n            m3u8_id='hls')\n        self._sort_formats(formats)\n\n        description = clean_html(title_info.get('summary_long'))\n        age_limit = parse_age_limit(video.get('parental_control', {}).get('rating'))\n        view_count = int_or_none(video.get('views'))\n        average_rating = int_or_none(video.get('user_rating'))\n        duration = int_or_none(movie.get('duration'))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'view_count': view_count,\n            'average_rating': average_rating,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n\n\nclass HRTiPlaylistIE(HRTiBaseIE):\n    _VALID_URL = r'https?://hrti\\.hrt\\.hr/(?:#/)?video/list/category/(?P<id>[0-9]+)/(?P<display_id>[^/]+)?'\n    _TESTS = [{\n        'url': 'https://hrti.hrt.hr/#/video/list/category/212/ekumena',\n        'info_dict': {\n            'id': '212',\n            'title': 'ekumena',\n        },\n        'playlist_mincount': 8,\n        'skip': 'Requires account credentials',\n    }, {\n        'url': 'https://hrti.hrt.hr/#/video/list/category/212/',\n        'only_matching': True,\n    }, {\n        'url': 'https://hrti.hrt.hr/video/list/category/212/ekumena',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        category_id = mobj.group('id')\n        display_id = mobj.group('display_id') or category_id\n\n        response = self._download_json(\n            '%s/category_id/%s/format/json' % (self._search_url, category_id),\n            display_id, 'Downloading video metadata JSON')\n\n        video_ids = try_get(\n            response, lambda x: x['video_listings'][0]['alternatives'][0]['list'],\n            list) or [video['id'] for video in response.get('videos', []) if video.get('id')]\n\n        entries = [self.url_result('hrti:%s' % video_id) for video_id in video_ids]\n\n        return self.playlist_result(entries, category_id, display_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "hrti.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/hrti.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}