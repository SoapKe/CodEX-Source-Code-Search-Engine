{"author": "fxsjy", "code": "# -*- coding: utf-8 -*-\nimport os\nimport sys\n\ntry:\n    import pkg_resources\n    get_module_res = lambda *res: pkg_resources.resource_stream(__name__,\n                                                                os.path.join(*res))\nexcept ImportError:\n    get_module_res = lambda *res: open(os.path.normpath(os.path.join(\n                            os.getcwd(), os.path.dirname(__file__), *res)), 'rb')\n\nPY2 = sys.version_info[0] == 2\n\ndefault_encoding = sys.getfilesystemencoding()\n\nif PY2:\n    text_type = unicode\n    string_types = (str, unicode)\n\n    iterkeys = lambda d: d.iterkeys()\n    itervalues = lambda d: d.itervalues()\n    iteritems = lambda d: d.iteritems()\n\nelse:\n    text_type = str\n    string_types = (str,)\n    xrange = range\n\n    iterkeys = lambda d: iter(d.keys())\n    itervalues = lambda d: iter(d.values())\n    iteritems = lambda d: iter(d.items())\n\ndef strdecode(sentence):\n    if not isinstance(sentence, text_type):\n        try:\n            sentence = sentence.decode('utf-8')\n        except UnicodeDecodeError:\n            sentence = sentence.decode('gbk', 'ignore')\n    return sentence\n\ndef resolve_filename(f):\n    try:\n        return f.name\n    except AttributeError:\n        return repr(f)\n", "comments": "      coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\nimport os\nimport sys\n\ntry:\n    import pkg_resources\n    get_module_res = lambda *res: pkg_resources.resource_stream(__name__,\n                                                                os.path.join(*res))\nexcept ImportError:\n    get_module_res = lambda *res: open(os.path.normpath(os.path.join(\n                            os.getcwd(), os.path.dirname(__file__), *res)), 'rb')\n\nPY2 = sys.version_info[0] == 2\n\ndefault_encoding = sys.getfilesystemencoding()\n\nif PY2:\n    text_type = unicode\n    string_types = (str, unicode)\n\n    iterkeys = lambda d: d.iterkeys()\n    itervalues = lambda d: d.itervalues()\n    iteritems = lambda d: d.iteritems()\n\nelse:\n    text_type = str\n    string_types = (str,)\n    xrange = range\n\n    iterkeys = lambda d: iter(d.keys())\n    itervalues = lambda d: iter(d.values())\n    iteritems = lambda d: iter(d.items())\n\ndef strdecode(sentence):\n    if not isinstance(sentence, text_type):\n        try:\n            sentence = sentence.decode('utf-8')\n        except UnicodeDecodeError:\n            sentence = sentence.decode('gbk', 'ignore')\n    return sentence\n\ndef resolve_filename(f):\n    try:\n        return f.name\n    except AttributeError:\n        return repr(f)\n", "description": "\u7ed3\u5df4\u4e2d\u6587\u5206\u8bcd", "file_name": "_compat.py", "id": "9e446bf9e3eeb2206a6db489342d61d1", "language": "Python", "project_name": "jieba", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/fxsjy-jieba/fxsjy-jieba-cb0de29/jieba/_compat.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:12:20Z", "url": "https://github.com/fxsjy/jieba", "wiki": true}