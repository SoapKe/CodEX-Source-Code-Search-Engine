{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    unified_strdate,\n    xpath_text,\n)\n\n\nclass CinchcastIE(InfoExtractor):\n    _VALID_URL = r'https?://player\\.cinchcast\\.com/.*?(?:assetId|show_id)=(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://player.cinchcast.com/?show_id=5258197&platformId=1&assetType=single',\n        'info_dict': {\n            'id': '5258197',\n            'ext': 'mp3',\n            'title': 'Train Your Brain to Up Your Game with Coach Mandy',\n            'upload_date': '20130816',\n        },\n    }, {\n        \n        'url': 'http://player.cinchcast.com/?platformId=1&\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        doc = self._download_xml(\n            'http://www.blogtalkradio.com/playerasset/mrss?assetType=single&assetId=%s' % video_id,\n            video_id)\n\n        item = doc.find('.//item')\n        title = xpath_text(item, './title', fatal=True)\n        date_str = xpath_text(\n            item, './{http://developer.longtailvideo.com/trac/}date')\n        upload_date = unified_strdate(date_str, day_first=False)\n        \n        formats = [{\n            'format_id': 'main',\n            'url': item.find('./{http://search.yahoo.com/mrss/}content').attrib['url'],\n        }]\n        backup_url = xpath_text(\n            item, './{http://developer.longtailvideo.com/trac/}backupContent')\n        if backup_url:\n            formats.append({\n                'preference': 2,  \n                'format_id': 'backup',\n                'url': backup_url,\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'upload_date': upload_date,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# Actual test is run in generic, look for undergroundwellness\n#038;assetType=single&#038;assetId=7141703',\n# duration is present but wrong\n# seems to be more reliable\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    unified_strdate,\n    xpath_text,\n)\n\n\nclass CinchcastIE(InfoExtractor):\n    _VALID_URL = r'https?://player\\.cinchcast\\.com/.*?(?:assetId|show_id)=(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://player.cinchcast.com/?show_id=5258197&platformId=1&assetType=single',\n        'info_dict': {\n            'id': '5258197',\n            'ext': 'mp3',\n            'title': 'Train Your Brain to Up Your Game with Coach Mandy',\n            'upload_date': '20130816',\n        },\n    }, {\n        # Actual test is run in generic, look for undergroundwellness\n        'url': 'http://player.cinchcast.com/?platformId=1&#038;assetType=single&#038;assetId=7141703',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        doc = self._download_xml(\n            'http://www.blogtalkradio.com/playerasset/mrss?assetType=single&assetId=%s' % video_id,\n            video_id)\n\n        item = doc.find('.//item')\n        title = xpath_text(item, './title', fatal=True)\n        date_str = xpath_text(\n            item, './{http://developer.longtailvideo.com/trac/}date')\n        upload_date = unified_strdate(date_str, day_first=False)\n        # duration is present but wrong\n        formats = [{\n            'format_id': 'main',\n            'url': item.find('./{http://search.yahoo.com/mrss/}content').attrib['url'],\n        }]\n        backup_url = xpath_text(\n            item, './{http://developer.longtailvideo.com/trac/}backupContent')\n        if backup_url:\n            formats.append({\n                'preference': 2,  # seems to be more reliable\n                'format_id': 'backup',\n                'url': backup_url,\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'upload_date': upload_date,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "cinchcast.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/cinchcast.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}