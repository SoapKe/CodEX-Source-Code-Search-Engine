{"author": "rg3", "code": "from __future__ import unicode_literals\n\n\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nimport io\nimport re\n\nrootDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nIGNORED_FILES = [\n    'setup.py',  \n    'conf.py',\n    'buildserver.py',\n]\n\nIGNORED_DIRS = [\n    '.git',\n    '.tox',\n]\n\nfrom test.helper import assertRegexpMatches\n\n\nclass TestUnicodeLiterals(unittest.TestCase):\n    def test_all_files(self):\n        for dirpath, dirnames, filenames in os.walk(rootDir):\n            for ignore_dir in IGNORED_DIRS:\n                if ignore_dir in dirnames:\n                    \n                    \n                    dirnames.remove(ignore_dir)\n            for basename in filenames:\n                if not basename.endswith('.py'):\n                    continue\n                if basename in IGNORED_FILES:\n                    continue\n\n                fn = os.path.join(dirpath, basename)\n                with io.open(fn, encoding='utf-8') as inf:\n                    code = inf.read()\n\n                if \"'\" not in code and '\"' not in code:\n                    continue\n                assertRegexpMatches(\n                    self,\n                    code,\n                    r'(?:(?:\n                    'unicode_literals import  missing in %s' % fn)\n\n                m = re.search(r'(?<=\\s)u[\\'\"](?!\\)|,|$)', code)\n                if m is not None:\n                    self.assertTrue(\n                        m is None,\n                        'u present in %s, around %s' % (\n                            fn, code[m.start() - 10:m.end() + 10]))\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "# Allow direct execution\n# http://bugs.python.org/issue13943\n# If we remove the directory from dirnames os.walk won't\n# recurse into it\n#.*?|\\s*)\\n)*from __future__ import (?:[a-z_]+,\\s*)*unicode_literals',\n", "content": "from __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nimport io\nimport re\n\nrootDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nIGNORED_FILES = [\n    'setup.py',  # http://bugs.python.org/issue13943\n    'conf.py',\n    'buildserver.py',\n]\n\nIGNORED_DIRS = [\n    '.git',\n    '.tox',\n]\n\nfrom test.helper import assertRegexpMatches\n\n\nclass TestUnicodeLiterals(unittest.TestCase):\n    def test_all_files(self):\n        for dirpath, dirnames, filenames in os.walk(rootDir):\n            for ignore_dir in IGNORED_DIRS:\n                if ignore_dir in dirnames:\n                    # If we remove the directory from dirnames os.walk won't\n                    # recurse into it\n                    dirnames.remove(ignore_dir)\n            for basename in filenames:\n                if not basename.endswith('.py'):\n                    continue\n                if basename in IGNORED_FILES:\n                    continue\n\n                fn = os.path.join(dirpath, basename)\n                with io.open(fn, encoding='utf-8') as inf:\n                    code = inf.read()\n\n                if \"'\" not in code and '\"' not in code:\n                    continue\n                assertRegexpMatches(\n                    self,\n                    code,\n                    r'(?:(?:#.*?|\\s*)\\n)*from __future__ import (?:[a-z_]+,\\s*)*unicode_literals',\n                    'unicode_literals import  missing in %s' % fn)\n\n                m = re.search(r'(?<=\\s)u[\\'\"](?!\\)|,|$)', code)\n                if m is not None:\n                    self.assertTrue(\n                        m is None,\n                        'u present in %s, around %s' % (\n                            fn, code[m.start() - 10:m.end() + 10]))\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "test_unicode_literals.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/test/test_unicode_literals.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}