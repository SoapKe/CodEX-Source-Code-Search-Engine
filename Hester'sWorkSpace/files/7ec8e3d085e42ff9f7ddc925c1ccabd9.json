{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models, tools\n\nSTATE = [\n    ('none', 'Non Member'),\n    ('canceled', 'Cancelled Member'),\n    ('old', 'Old Member'),\n    ('waiting', 'Waiting Member'),\n    ('invoiced', 'Invoiced Member'),\n    ('free', 'Free Member'),\n    ('paid', 'Paid Member'),\n]\n\n\nclass ReportMembership(models.Model):\n    '''Membership Analysis'''\n\n    _name = 'report.membership'\n    _description = __doc__\n    _auto = False\n    _rec_name = 'start_date'\n\n    start_date = fields.Date(string='Start Date', readonly=True)\n    date_to = fields.Date(string='End Date', readonly=True, help=\"End membership date\")\n    num_waiting = fields.Integer(string='# Waiting', readonly=True)\n    num_invoiced = fields.Integer(string='# Invoiced', readonly=True)\n    num_paid = fields.Integer(string='# Paid', readonly=True)\n    tot_pending = fields.Float(string='Pending Amount', digits=0, readonly=True)\n    tot_earned = fields.Float(string='Earned Amount', digits=0, readonly=True)\n    partner_id = fields.Many2one('res.partner', string='Member', readonly=True)\n    associate_member_id = fields.Many2one('res.partner', string='Associate Member', readonly=True)\n    membership_id = fields.Many2one('product.product', string='Membership Product', readonly=True)\n    membership_state = fields.Selection(STATE, string='Current Membership State', readonly=True)\n    user_id = fields.Many2one('res.users', string='Salesperson', readonly=True)\n    company_id = fields.Many2one('res.company', string='Company', readonly=True)\n    quantity = fields.Integer(readonly=True)\n\n    @api.model_cr\n    def init(self):\n        '''Create the view'''\n        tools.drop_view_if_exists(self._cr, self._table)\n        self._cr.execute(\"\"\"\n        CREATE OR REPLACE VIEW %s AS (\n        SELECT\n        MIN(id) AS id,\n        partner_id,\n        count(membership_id) as quantity,\n        user_id,\n        membership_state,\n        associate_member_id,\n        membership_amount,\n        date_to,\n        start_date,\n        COUNT(num_waiting) AS num_waiting,\n        COUNT(num_invoiced) AS num_invoiced,\n        COUNT(num_paid) AS num_paid,\n        SUM(tot_pending) AS tot_pending,\n        SUM(tot_earned) AS tot_earned,\n        membership_id,\n        company_id\n        FROM\n        (SELECT\n            MIN(p.id) AS id,\n            p.id AS partner_id,\n            p.user_id AS user_id,\n            p.membership_state AS membership_state,\n            p.associate_member AS associate_member_id,\n            p.membership_amount AS membership_amount,\n            p.membership_stop AS date_to,\n            p.membership_start AS start_date,\n            CASE WHEN ml.state = 'waiting'  THEN ml.id END AS num_waiting,\n            CASE WHEN ml.state = 'invoiced' THEN ml.id END AS num_invoiced,\n            CASE WHEN ml.state = 'paid'     THEN ml.id END AS num_paid,\n            CASE WHEN ml.state IN ('waiting', 'invoiced') THEN SUM(il.price_subtotal) ELSE 0 END AS tot_pending,\n            CASE WHEN ml.state = 'paid' OR p.membership_state = 'old' THEN SUM(il.price_subtotal) ELSE 0 END AS tot_earned,\n            ml.membership_id AS membership_id,\n            p.company_id AS company_id\n            FROM res_partner p\n            LEFT JOIN membership_membership_line ml ON (ml.partner = p.id)\n            LEFT JOIN account_invoice_line il ON (ml.account_invoice_line = il.id)\n            LEFT JOIN account_invoice ai ON (il.invoice_id = ai.id)\n            WHERE p.membership_state != 'none' and p.active = 'true'\n            GROUP BY\n              p.id,\n              p.user_id,\n              p.membership_state,\n              p.associate_member,\n              p.membership_amount,\n              p.membership_start,\n              ml.membership_id,\n              p.company_id,\n              ml.state,\n              ml.id\n        ) AS foo\n        GROUP BY\n            start_date,\n            date_to,\n            partner_id,\n            user_id,\n            membership_id,\n            company_id,\n            membership_state,\n            associate_member_id,\n            membership_amount\n        )\"\"\" % (self._table,))\n", "comments": "            create or replace view  as (         select         min(id) as id          partner id          count(membership id) quantity          user id          membership state          associate member id          membership amount          date          start date          count(num waiting) as num waiting          count(num invoiced) as num invoiced          count(num paid) as num paid          sum(tot pending) as tot pending          sum(tot earned) as tot earned          membership id          company id         from         (select             min(p id) as id              p id as partner id              p user id as user id              p membership state as membership state              p associate member as associate member id              p membership amount as membership amount              p membership stop as date              p membership start as start date              case when ml state    waiting   then ml id end as num waiting              case when ml state    invoiced  then ml id end as num invoiced              case when ml state    paid      then ml id end as num paid              case when ml state in ( waiting    invoiced ) then sum(il price subtotal) else 0 end as tot pending              case when ml state    paid  or p membership state    old  then sum(il price subtotal) else 0 end as tot earned              ml membership id as membership id              p company id as company id             from res partner p             left join membership membership line ml on (ml partner   p id)             left join account invoice line il on (ml account invoice line   il id)             left join account invoice ai on (il invoice id   ai id)             where p membership state     none  p active    true              group by               p id                p user id                p membership state                p associate member                p membership amount                p membership start                ml membership id                p company id                ml state                ml id         ) as foo         group by             start date              date              partner id              user id              membership id              company id              membership state              associate member id              membership amount         )        membership analysis          name    report membership       description     doc        auto   false      rec name    start date       start date   fields date(string  start date   readonly true)     date   fields date(string  end date   readonly true  help  end membership date )     num waiting   fields integer(string    waiting   readonly true)     num invoiced   fields integer(string    invoiced   readonly true)     num paid   fields integer(string    paid   readonly true)     tot pending   fields float(string  pending amount   digits 0  readonly true)     tot earned   fields float(string  earned amount   digits 0  readonly true)     partner id   fields many2one( res partner   string  member   readonly true)     associate member id   fields many2one( res partner   string  associate member   readonly true)     membership id   fields many2one( product product   string  membership product   readonly true)     membership state   fields selection(state  string  current membership state   readonly true)     user id   fields many2one( res users   string  salesperson   readonly true)     company id   fields many2one( res company   string  company   readonly true)     quantity   fields integer(readonly true)       api model cr     def init(self)             create view           coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models, tools\n\nSTATE = [\n    ('none', 'Non Member'),\n    ('canceled', 'Cancelled Member'),\n    ('old', 'Old Member'),\n    ('waiting', 'Waiting Member'),\n    ('invoiced', 'Invoiced Member'),\n    ('free', 'Free Member'),\n    ('paid', 'Paid Member'),\n]\n\n\nclass ReportMembership(models.Model):\n    '''Membership Analysis'''\n\n    _name = 'report.membership'\n    _description = __doc__\n    _auto = False\n    _rec_name = 'start_date'\n\n    start_date = fields.Date(string='Start Date', readonly=True)\n    date_to = fields.Date(string='End Date', readonly=True, help=\"End membership date\")\n    num_waiting = fields.Integer(string='# Waiting', readonly=True)\n    num_invoiced = fields.Integer(string='# Invoiced', readonly=True)\n    num_paid = fields.Integer(string='# Paid', readonly=True)\n    tot_pending = fields.Float(string='Pending Amount', digits=0, readonly=True)\n    tot_earned = fields.Float(string='Earned Amount', digits=0, readonly=True)\n    partner_id = fields.Many2one('res.partner', string='Member', readonly=True)\n    associate_member_id = fields.Many2one('res.partner', string='Associate Member', readonly=True)\n    membership_id = fields.Many2one('product.product', string='Membership Product', readonly=True)\n    membership_state = fields.Selection(STATE, string='Current Membership State', readonly=True)\n    user_id = fields.Many2one('res.users', string='Salesperson', readonly=True)\n    company_id = fields.Many2one('res.company', string='Company', readonly=True)\n    quantity = fields.Integer(readonly=True)\n\n    @api.model_cr\n    def init(self):\n        '''Create the view'''\n        tools.drop_view_if_exists(self._cr, self._table)\n        self._cr.execute(\"\"\"\n        CREATE OR REPLACE VIEW %s AS (\n        SELECT\n        MIN(id) AS id,\n        partner_id,\n        count(membership_id) as quantity,\n        user_id,\n        membership_state,\n        associate_member_id,\n        membership_amount,\n        date_to,\n        start_date,\n        COUNT(num_waiting) AS num_waiting,\n        COUNT(num_invoiced) AS num_invoiced,\n        COUNT(num_paid) AS num_paid,\n        SUM(tot_pending) AS tot_pending,\n        SUM(tot_earned) AS tot_earned,\n        membership_id,\n        company_id\n        FROM\n        (SELECT\n            MIN(p.id) AS id,\n            p.id AS partner_id,\n            p.user_id AS user_id,\n            p.membership_state AS membership_state,\n            p.associate_member AS associate_member_id,\n            p.membership_amount AS membership_amount,\n            p.membership_stop AS date_to,\n            p.membership_start AS start_date,\n            CASE WHEN ml.state = 'waiting'  THEN ml.id END AS num_waiting,\n            CASE WHEN ml.state = 'invoiced' THEN ml.id END AS num_invoiced,\n            CASE WHEN ml.state = 'paid'     THEN ml.id END AS num_paid,\n            CASE WHEN ml.state IN ('waiting', 'invoiced') THEN SUM(il.price_subtotal) ELSE 0 END AS tot_pending,\n            CASE WHEN ml.state = 'paid' OR p.membership_state = 'old' THEN SUM(il.price_subtotal) ELSE 0 END AS tot_earned,\n            ml.membership_id AS membership_id,\n            p.company_id AS company_id\n            FROM res_partner p\n            LEFT JOIN membership_membership_line ml ON (ml.partner = p.id)\n            LEFT JOIN account_invoice_line il ON (ml.account_invoice_line = il.id)\n            LEFT JOIN account_invoice ai ON (il.invoice_id = ai.id)\n            WHERE p.membership_state != 'none' and p.active = 'true'\n            GROUP BY\n              p.id,\n              p.user_id,\n              p.membership_state,\n              p.associate_member,\n              p.membership_amount,\n              p.membership_start,\n              ml.membership_id,\n              p.company_id,\n              ml.state,\n              ml.id\n        ) AS foo\n        GROUP BY\n            start_date,\n            date_to,\n            partner_id,\n            user_id,\n            membership_id,\n            company_id,\n            membership_state,\n            associate_member_id,\n            membership_amount\n        )\"\"\" % (self._table,))\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "report_membership.py", "id": "7ec8e3d085e42ff9f7ddc925c1ccabd9", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/membership/report/report_membership.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}