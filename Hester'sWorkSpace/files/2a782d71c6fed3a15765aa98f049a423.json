{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import unified_timestamp\n\n\nclass InternazionaleIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?internazionale\\.it/video/(?:[^/]+/)*(?P<id>[^/?\n    _TEST = {\n        'url': 'https://www.internazionale.it/video/2015/02/19/richard-linklater-racconta-una-scena-di-boyhood',\n        'md5': '3e39d32b66882c1218e305acbf8348ca',\n        'info_dict': {\n            'id': '265968',\n            'display_id': 'richard-linklater-racconta-una-scena-di-boyhood',\n            'ext': 'mp4',\n            'title': 'Richard Linklater racconta una scena di Boyhood',\n            'description': 'md5:efb7e5bbfb1a54ae2ed5a4a015f0e665',\n            'timestamp': 1424354635,\n            'upload_date': '20150219',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n        'params': {\n            'format': 'bestvideo',\n        },\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        DATA_RE = r'data-%s=([\"\\'])(?P<value>(?:(?!\\1).)+)\\1'\n\n        title = self._search_regex(\n            DATA_RE % 'video-title', webpage, 'title', default=None,\n            group='value') or self._og_search_title(webpage)\n\n        video_id = self._search_regex(\n            DATA_RE % 'job-id', webpage, 'video id', group='value')\n        video_path = self._search_regex(\n            DATA_RE % 'video-path', webpage, 'video path', group='value')\n\n        video_base = 'https://video.internazionale.it/%s/%s.' % (video_path, video_id)\n\n        formats = self._extract_m3u8_formats(\n            video_base + 'm3u8', display_id, 'mp4',\n            entry_protocol='m3u8_native', m3u8_id='hls', fatal=False)\n        formats.extend(self._extract_mpd_formats(\n            video_base + 'mpd', display_id, mpd_id='dash', fatal=False))\n        self._sort_formats(formats)\n\n        timestamp = unified_timestamp(self._html_search_meta(\n            'article:published_time', webpage, 'timestamp'))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'description': self._og_search_description(webpage),\n            'timestamp': timestamp,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#&]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import unified_timestamp\n\n\nclass InternazionaleIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?internazionale\\.it/video/(?:[^/]+/)*(?P<id>[^/?#&]+)'\n    _TEST = {\n        'url': 'https://www.internazionale.it/video/2015/02/19/richard-linklater-racconta-una-scena-di-boyhood',\n        'md5': '3e39d32b66882c1218e305acbf8348ca',\n        'info_dict': {\n            'id': '265968',\n            'display_id': 'richard-linklater-racconta-una-scena-di-boyhood',\n            'ext': 'mp4',\n            'title': 'Richard Linklater racconta una scena di Boyhood',\n            'description': 'md5:efb7e5bbfb1a54ae2ed5a4a015f0e665',\n            'timestamp': 1424354635,\n            'upload_date': '20150219',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n        'params': {\n            'format': 'bestvideo',\n        },\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        DATA_RE = r'data-%s=([\"\\'])(?P<value>(?:(?!\\1).)+)\\1'\n\n        title = self._search_regex(\n            DATA_RE % 'video-title', webpage, 'title', default=None,\n            group='value') or self._og_search_title(webpage)\n\n        video_id = self._search_regex(\n            DATA_RE % 'job-id', webpage, 'video id', group='value')\n        video_path = self._search_regex(\n            DATA_RE % 'video-path', webpage, 'video path', group='value')\n\n        video_base = 'https://video.internazionale.it/%s/%s.' % (video_path, video_id)\n\n        formats = self._extract_m3u8_formats(\n            video_base + 'm3u8', display_id, 'mp4',\n            entry_protocol='m3u8_native', m3u8_id='hls', fatal=False)\n        formats.extend(self._extract_mpd_formats(\n            video_base + 'mpd', display_id, mpd_id='dash', fatal=False))\n        self._sort_formats(formats)\n\n        timestamp = unified_timestamp(self._html_search_meta(\n            'article:published_time', webpage, 'timestamp'))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'description': self._og_search_description(webpage),\n            'timestamp': timestamp,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "internazionale.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/internazionale.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}