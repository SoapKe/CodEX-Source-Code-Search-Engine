{"author": "eliangcs", "code": "\"\"\"Serialization and deserialization of a Context object.\"\"\"\n\nimport io\nimport os\n\nfrom . import xdg\nfrom .context.transform import format_to_http_prompt\nfrom .execution import execute\n\n\n\nEXCLUDED_OPTIONS = ['--style']\n\n\nCONTEXT_FILENAME = 'context.hp'\n\n\ndef _get_context_filepath():\n    dir_path = xdg.get_data_dir()\n    return os.path.join(dir_path, CONTEXT_FILENAME)\n\n\ndef load_context(context, file_path=None):\n    \"\"\"Load a Context object in place from user data directory.\"\"\"\n    if not file_path:\n        file_path = _get_context_filepath()\n    if os.path.exists(file_path):\n        with io.open(file_path, encoding='utf-8') as f:\n            for line in f:\n                execute(line, context)\n\n\ndef save_context(context):\n    \"\"\"Save a Context object to user data directory.\"\"\"\n    file_path = _get_context_filepath()\n    content = format_to_http_prompt(context, excluded_options=EXCLUDED_OPTIONS)\n    with io.open(file_path, 'w', encoding='utf-8') as f:\n        f.write(content)\n", "comments": "   serialization deserialization context object      import io import os    import xdg  context transform import format http prompt  execution import execute     don save httpie options avoid collision user config file excluded options       style      filename current environment context saved context filename    context hp    def  get context filepath()      dir path   xdg get data dir()     return os path join(dir path  context filename)   def load context(context  file path none)         load context object place user data directory         file path          file path    get context filepath()     os path exists(file path)          io open(file path  encoding  utf 8 ) f              line f                  execute(line  context)   def save context(context)         save context object user data directory        don save httpie options avoid collision user config file    filename current environment context saved ", "content": "\"\"\"Serialization and deserialization of a Context object.\"\"\"\n\nimport io\nimport os\n\nfrom . import xdg\nfrom .context.transform import format_to_http_prompt\nfrom .execution import execute\n\n\n# Don't save these HTTPie options to avoid collision with user config file\nEXCLUDED_OPTIONS = ['--style']\n\n# Filename the current environment context will be saved to\nCONTEXT_FILENAME = 'context.hp'\n\n\ndef _get_context_filepath():\n    dir_path = xdg.get_data_dir()\n    return os.path.join(dir_path, CONTEXT_FILENAME)\n\n\ndef load_context(context, file_path=None):\n    \"\"\"Load a Context object in place from user data directory.\"\"\"\n    if not file_path:\n        file_path = _get_context_filepath()\n    if os.path.exists(file_path):\n        with io.open(file_path, encoding='utf-8') as f:\n            for line in f:\n                execute(line, context)\n\n\ndef save_context(context):\n    \"\"\"Save a Context object to user data directory.\"\"\"\n    file_path = _get_context_filepath()\n    content = format_to_http_prompt(context, excluded_options=EXCLUDED_OPTIONS)\n    with io.open(file_path, 'w', encoding='utf-8') as f:\n        f.write(content)\n", "description": "HTTPie + prompt_toolkit = an interactive command-line HTTP client featuring autocomplete and syntax highlighting", "file_name": "contextio.py", "id": "760318c4f64559e15e650e93f7db9941", "language": "Python", "project_name": "http-prompt", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/eliangcs-http-prompt/eliangcs-http-prompt-87f1e9d/http_prompt/contextio.py", "save_time": "", "source": "", "update_at": "2018-03-17T18:26:33Z", "url": "https://github.com/eliangcs/http-prompt", "wiki": true}