{"author": "audreyr", "code": "# -*- coding: utf-8 -*-\n\n\"\"\"\ntest_get_user_config\n--------------------\n\nTests formerly known from a unittest residing in test_config.py named\nTestGetUserConfig.test_get_user_config_valid\nTestGetUserConfig.test_get_user_config_invalid\nTestGetUserConfig.test_get_user_config_nonexistent\n\"\"\"\n\nimport os\nimport shutil\nimport pytest\n\nfrom cookiecutter import config\nfrom cookiecutter.exceptions import InvalidConfiguration\n\n\n@pytest.fixture(scope='module')\ndef user_config_path():\n    return os.path.expanduser('~/.cookiecutterrc')\n\n\n@pytest.fixture(scope='function')\ndef back_up_rc(request, user_config_path):\n    \"\"\"\n    Back up an existing cookiecutter rc and restore it after the test.\n    If ~/.cookiecutterrc is pre-existing, move it to a temp location\n    \"\"\"\n    user_config_path_backup = os.path.expanduser('~/.cookiecutterrc.backup')\n\n    if os.path.exists(user_config_path):\n        shutil.copy(user_config_path, user_config_path_backup)\n        os.remove(user_config_path)\n\n    def remove_test_rc():\n        \"\"\"\n        Remove the ~/.cookiecutterrc that has been created in the test.\n        \"\"\"\n        if os.path.exists(user_config_path):\n            os.remove(user_config_path)\n\n    def restore_original_rc():\n        \"\"\"\n        If it existed, restore the original ~/.cookiecutterrc\n        \"\"\"\n        if os.path.exists(user_config_path_backup):\n            shutil.copy(user_config_path_backup, user_config_path)\n            os.remove(user_config_path_backup)\n\n    \n    \n    \n    request.addfinalizer(restore_original_rc)\n    request.addfinalizer(remove_test_rc)\n\n\n@pytest.fixture\ndef custom_config():\n    return {\n        'default_context': {\n            'full_name': 'Firstname Lastname',\n            'email': 'firstname.lastname@gmail.com',\n            'github_username': 'example',\n        },\n        'cookiecutters_dir': '/home/example/some-path-to-templates',\n        'replay_dir': '/home/example/some-path-to-replay-files',\n        'abbreviations': {\n            'gh': 'https://github.com/{0}.git',\n            'gl': 'https://gitlab.com/{0}.git',\n            'bb': 'https://bitbucket.org/{0}',\n            'helloworld': 'https://github.com/hackebrot/helloworld',\n        }\n    }\n\n\n@pytest.mark.usefixtures('back_up_rc')\ndef test_get_user_config_valid(user_config_path, custom_config):\n    \"\"\"\n    Get config from a valid ~/.cookiecutterrc file\n    \"\"\"\n    shutil.copy('tests/test-config/valid-config.yaml', user_config_path)\n    conf = config.get_user_config()\n\n    assert conf == custom_config\n\n\n@pytest.mark.usefixtures('back_up_rc')\ndef test_get_user_config_invalid(user_config_path):\n    \"\"\"\n    Get config from an invalid ~/.cookiecutterrc file\n    \"\"\"\n    shutil.copy('tests/test-config/invalid-config.yaml', user_config_path)\n    with pytest.raises(InvalidConfiguration):\n        config.get_user_config()\n\n\n@pytest.mark.usefixtures('back_up_rc')\ndef test_get_user_config_nonexistent():\n    \"\"\"\n    Get config from a nonexistent ~/.cookiecutterrc file\n    \"\"\"\n    assert config.get_user_config() == config.DEFAULT_CONFIG\n\n\n@pytest.fixture\ndef custom_config_path(custom_config):\n    return 'tests/test-config/valid-config.yaml'\n\n\ndef test_specify_config_path(mocker, custom_config_path, custom_config):\n    spy_get_config = mocker.spy(config, 'get_config')\n\n    user_config = config.get_user_config(custom_config_path)\n    spy_get_config.assert_called_once_with(custom_config_path)\n\n    assert user_config == custom_config\n\n\ndef test_default_config_path(user_config_path):\n    assert config.USER_CONFIG_PATH == user_config_path\n\n\ndef test_default_config_from_env_variable(\n        monkeypatch, custom_config_path, custom_config):\n    monkeypatch.setenv('COOKIECUTTER_CONFIG', custom_config_path)\n\n    user_config = config.get_user_config()\n    assert user_config == custom_config\n\n\ndef test_force_default_config(mocker):\n    spy_get_config = mocker.spy(config, 'get_config')\n\n    user_config = config.get_user_config(None, default_config=True)\n\n    assert user_config == config.DEFAULT_CONFIG\n    assert not spy_get_config.called\n\n\ndef test_expand_user_for_directories_in_config(monkeypatch):\n    def _expanduser(path):\n        return path.replace('~', 'Users/bob')\n    monkeypatch.setattr('os.path.expanduser', _expanduser)\n\n    config_file = 'tests/test-config/config-expand-user.yaml'\n\n    user_config = config.get_user_config(config_file)\n    assert user_config['replay_dir'] == 'Users/bob/replay-files'\n    assert user_config['cookiecutters_dir'] == 'Users/bob/templates'\n\n\ndef test_expand_vars_for_directories_in_config(monkeypatch):\n    monkeypatch.setenv('COOKIES', 'Users/bob/cookies')\n\n    config_file = 'tests/test-config/config-expand-vars.yaml'\n\n    user_config = config.get_user_config(config_file)\n    assert user_config['replay_dir'] == 'Users/bob/cookies/replay-files'\n    assert user_config['cookiecutters_dir'] == 'Users/bob/cookies/templates'\n", "comments": "    test get user config                       tests formerly known unittest residing test config py named testgetuserconfig test get user config valid testgetuserconfig test get user config invalid testgetuserconfig test get user config nonexistent      import os import shutil import pytest  cookiecutter import config cookiecutter exceptions import invalidconfiguration    pytest fixture(scope  module ) def user config path()      return os path expanduser(    cookiecutterrc )    pytest fixture(scope  function ) def back rc(request  user config path)              back existing cookiecutter rc restore test      if    cookiecutterrc pre existing  move temp location             user config path backup   os path expanduser(    cookiecutterrc backup )      os path exists(user config path)          shutil copy(user config path  user config path backup)         os remove(user config path)      def remove test rc()                      remove    cookiecutterrc created test                      os path exists(user config path)              os remove(user config path)      def restore original rc()                      if existed  restore original    cookiecutterrc                     os path exists(user config path backup)              shutil copy(user config path backup  user config path)             os remove(user config path backup)        according py test source code finalizers popped       internal list populated via  addfinalizer   as result       last added finalizer function executed first      request addfinalizer(restore original rc)     request addfinalizer(remove test rc)    pytest fixture def custom config()      return            default context                  full name    firstname lastname                email    firstname lastname gmail com                github username    example                       cookiecutters dir     home example path templates            replay dir     home example path replay files            abbreviations                  gh    https   github com  0  git                gl    https   gitlab com  0  git                bb    https   bitbucket org  0                 helloworld    https   github com hackebrot helloworld                      pytest mark usefixtures( back rc ) def test get user config valid(user config path  custom config)              get config valid    cookiecutterrc file             shutil copy( tests test config valid config yaml   user config path)     conf   config get user config()      assert conf    custom config    pytest mark usefixtures( back rc ) def test get user config invalid(user config path)              get config invalid    cookiecutterrc file             shutil copy( tests test config invalid config yaml   user config path)     pytest raises(invalidconfiguration)          config get user config()    pytest mark usefixtures( back rc ) def test get user config nonexistent()              get config nonexistent    cookiecutterrc file                coding  utf 8        according py test source code finalizers popped    internal list populated via  addfinalizer   as result    last added finalizer function executed first  ", "content": "# -*- coding: utf-8 -*-\n\n\"\"\"\ntest_get_user_config\n--------------------\n\nTests formerly known from a unittest residing in test_config.py named\nTestGetUserConfig.test_get_user_config_valid\nTestGetUserConfig.test_get_user_config_invalid\nTestGetUserConfig.test_get_user_config_nonexistent\n\"\"\"\n\nimport os\nimport shutil\nimport pytest\n\nfrom cookiecutter import config\nfrom cookiecutter.exceptions import InvalidConfiguration\n\n\n@pytest.fixture(scope='module')\ndef user_config_path():\n    return os.path.expanduser('~/.cookiecutterrc')\n\n\n@pytest.fixture(scope='function')\ndef back_up_rc(request, user_config_path):\n    \"\"\"\n    Back up an existing cookiecutter rc and restore it after the test.\n    If ~/.cookiecutterrc is pre-existing, move it to a temp location\n    \"\"\"\n    user_config_path_backup = os.path.expanduser('~/.cookiecutterrc.backup')\n\n    if os.path.exists(user_config_path):\n        shutil.copy(user_config_path, user_config_path_backup)\n        os.remove(user_config_path)\n\n    def remove_test_rc():\n        \"\"\"\n        Remove the ~/.cookiecutterrc that has been created in the test.\n        \"\"\"\n        if os.path.exists(user_config_path):\n            os.remove(user_config_path)\n\n    def restore_original_rc():\n        \"\"\"\n        If it existed, restore the original ~/.cookiecutterrc\n        \"\"\"\n        if os.path.exists(user_config_path_backup):\n            shutil.copy(user_config_path_backup, user_config_path)\n            os.remove(user_config_path_backup)\n\n    # According to the py.test source code finalizers are popped from an\n    # internal list that we populated via 'addfinalizer'. As a result the\n    # last-added finalizer function is executed first.\n    request.addfinalizer(restore_original_rc)\n    request.addfinalizer(remove_test_rc)\n\n\n@pytest.fixture\ndef custom_config():\n    return {\n        'default_context': {\n            'full_name': 'Firstname Lastname',\n            'email': 'firstname.lastname@gmail.com',\n            'github_username': 'example',\n        },\n        'cookiecutters_dir': '/home/example/some-path-to-templates',\n        'replay_dir': '/home/example/some-path-to-replay-files',\n        'abbreviations': {\n            'gh': 'https://github.com/{0}.git',\n            'gl': 'https://gitlab.com/{0}.git',\n            'bb': 'https://bitbucket.org/{0}',\n            'helloworld': 'https://github.com/hackebrot/helloworld',\n        }\n    }\n\n\n@pytest.mark.usefixtures('back_up_rc')\ndef test_get_user_config_valid(user_config_path, custom_config):\n    \"\"\"\n    Get config from a valid ~/.cookiecutterrc file\n    \"\"\"\n    shutil.copy('tests/test-config/valid-config.yaml', user_config_path)\n    conf = config.get_user_config()\n\n    assert conf == custom_config\n\n\n@pytest.mark.usefixtures('back_up_rc')\ndef test_get_user_config_invalid(user_config_path):\n    \"\"\"\n    Get config from an invalid ~/.cookiecutterrc file\n    \"\"\"\n    shutil.copy('tests/test-config/invalid-config.yaml', user_config_path)\n    with pytest.raises(InvalidConfiguration):\n        config.get_user_config()\n\n\n@pytest.mark.usefixtures('back_up_rc')\ndef test_get_user_config_nonexistent():\n    \"\"\"\n    Get config from a nonexistent ~/.cookiecutterrc file\n    \"\"\"\n    assert config.get_user_config() == config.DEFAULT_CONFIG\n\n\n@pytest.fixture\ndef custom_config_path(custom_config):\n    return 'tests/test-config/valid-config.yaml'\n\n\ndef test_specify_config_path(mocker, custom_config_path, custom_config):\n    spy_get_config = mocker.spy(config, 'get_config')\n\n    user_config = config.get_user_config(custom_config_path)\n    spy_get_config.assert_called_once_with(custom_config_path)\n\n    assert user_config == custom_config\n\n\ndef test_default_config_path(user_config_path):\n    assert config.USER_CONFIG_PATH == user_config_path\n\n\ndef test_default_config_from_env_variable(\n        monkeypatch, custom_config_path, custom_config):\n    monkeypatch.setenv('COOKIECUTTER_CONFIG', custom_config_path)\n\n    user_config = config.get_user_config()\n    assert user_config == custom_config\n\n\ndef test_force_default_config(mocker):\n    spy_get_config = mocker.spy(config, 'get_config')\n\n    user_config = config.get_user_config(None, default_config=True)\n\n    assert user_config == config.DEFAULT_CONFIG\n    assert not spy_get_config.called\n\n\ndef test_expand_user_for_directories_in_config(monkeypatch):\n    def _expanduser(path):\n        return path.replace('~', 'Users/bob')\n    monkeypatch.setattr('os.path.expanduser', _expanduser)\n\n    config_file = 'tests/test-config/config-expand-user.yaml'\n\n    user_config = config.get_user_config(config_file)\n    assert user_config['replay_dir'] == 'Users/bob/replay-files'\n    assert user_config['cookiecutters_dir'] == 'Users/bob/templates'\n\n\ndef test_expand_vars_for_directories_in_config(monkeypatch):\n    monkeypatch.setenv('COOKIES', 'Users/bob/cookies')\n\n    config_file = 'tests/test-config/config-expand-vars.yaml'\n\n    user_config = config.get_user_config(config_file)\n    assert user_config['replay_dir'] == 'Users/bob/cookies/replay-files'\n    assert user_config['cookiecutters_dir'] == 'Users/bob/cookies/templates'\n", "description": "A command-line utility that creates projects from cookiecutters (project templates). E.g. Python package projects, jQuery plugin projects.", "file_name": "test_get_user_config.py", "id": "66402cca63fc8f5244b443ee0829eac4", "language": "Python", "project_name": "cookiecutter", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/audreyr-cookiecutter/audreyr-cookiecutter-7154cf2/tests/test_get_user_config.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:52:22Z", "url": "https://github.com/audreyr/cookiecutter", "wiki": true}