{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport sys\nimport functools\n\nfrom sentry.utils.strings import (\n    is_valid_dot_atom, soft_break, soft_hyphenate,\n    tokens_from_name, codec_lookup, truncatechars\n)\n\nZWSP = u'\\u200b'  \nSHY = u'\\u00ad'  \n\n\ndef test_codec_lookup():\n    def assert_match(enc, ref=None):\n        if ref is None:\n            ref = enc\n        rv = codec_lookup(enc)\n        if rv is None:\n            assert ref is rv is None\n        else:\n            assert rv.name == ref\n\n    assert codec_lookup('utf-8').name == 'utf-8'\n    assert codec_lookup('utf8').name == 'utf-8'\n    if sys.version_info[:3] >= (2, 7, 12):\n        assert codec_lookup('zlib').name == 'utf-8'\n    assert codec_lookup('utf16').name == 'utf-16'\n    assert codec_lookup('undefined').name == 'utf-8'\n    assert codec_lookup('undefined', default=None) is None\n    assert codec_lookup('undefined', default='latin1').name == 'iso8859-1'\n    if sys.version_info[:3] >= (2, 7, 12):\n        assert codec_lookup('zlib', default='latin1').name == 'iso8859-1'\n    assert codec_lookup('unknownshit', default='latin1').name == 'iso8859-1'\n\n\ndef test_soft_break():\n    assert soft_break(\n        'com.example.package.method(argument).anotherMethod(argument)', 15\n    ) == ZWSP.join(\n        ['com.', 'example.', 'package.', 'method(', 'argument).', 'anotherMethod(', 'argument)']\n    )\n\n\ndef test_soft_break_and_hyphenate():\n    hyphenate = functools.partial(soft_hyphenate, length=6)\n    assert soft_break('com.reallyreallyreally.long.path', 6, hyphenate) == \\\n        ZWSP.join(['com.', SHY.join(['really'] * 3) + '.', 'long.', 'path'])\n\n\ndef test_tokens_from_name():\n    assert list(tokens_from_name('MyHTTPProject42')) == ['my', 'http', 'project42']\n    assert list(tokens_from_name('MyHTTPProject42', remove_digits=True)) == [\n        'my', 'http', 'project'\n    ]\n    assert list(tokens_from_name('MyHTTPProject Awesome 42 Stuff')) == [\n        'my', 'http', 'project', 'awesome', '42', 'stuff'\n    ]\n    assert list(tokens_from_name('MyHTTPProject Awesome 42 Stuff', remove_digits=True)) == [\n        'my', 'http', 'project', 'awesome', 'stuff'\n    ]\n\n\ndef test_is_valid_dot_atom():\n    assert is_valid_dot_atom('foo')\n    assert is_valid_dot_atom('foo.bar')\n    assert not is_valid_dot_atom('.foo.bar')\n    assert not is_valid_dot_atom('foo.bar.')\n    assert not is_valid_dot_atom('foo.\\x00')\n\n\ndef test_truncatechars():\n    assert truncatechars(\"12345\", 6) == \"12345\"\n    assert truncatechars(\"12345\", 5) == \"12345\"\n    assert truncatechars(\"12345\", 4) == \"1...\"\n    assert truncatechars(\"12345\", 3) == \"...\"\n    assert truncatechars(\"12345\", 2) == \"...\"\n    assert truncatechars(\"12345\", 1) == \"...\"\n    assert truncatechars(\"12345\", 0) == \"...\"\n\n    assert truncatechars(\"12345\", 6, ellipsis=u\"\\u2026\") == u\"12345\"\n    assert truncatechars(\"12345\", 5, ellipsis=u\"\\u2026\") == u\"12345\"\n    assert truncatechars(\"12345\", 4, ellipsis=u\"\\u2026\") == u\"123\\u2026\"\n    assert truncatechars(\"12345\", 3, ellipsis=u\"\\u2026\") == u\"12\\u2026\"\n    assert truncatechars(\"12345\", 2, ellipsis=u\"\\u2026\") == u\"1\\u2026\"\n    assert truncatechars(\"12345\", 1, ellipsis=u\"\\u2026\") == u\"\\u2026\"\n    assert truncatechars(\"12345\", 0, ellipsis=u\"\\u2026\") == u\"\\u2026\"\n\n    assert truncatechars(None, 1) is None\n", "comments": "  zero width space    soft hyphen ", "content": "from __future__ import absolute_import\n\nimport sys\nimport functools\n\nfrom sentry.utils.strings import (\n    is_valid_dot_atom, soft_break, soft_hyphenate,\n    tokens_from_name, codec_lookup, truncatechars\n)\n\nZWSP = u'\\u200b'  # zero width space\nSHY = u'\\u00ad'  # soft hyphen\n\n\ndef test_codec_lookup():\n    def assert_match(enc, ref=None):\n        if ref is None:\n            ref = enc\n        rv = codec_lookup(enc)\n        if rv is None:\n            assert ref is rv is None\n        else:\n            assert rv.name == ref\n\n    assert codec_lookup('utf-8').name == 'utf-8'\n    assert codec_lookup('utf8').name == 'utf-8'\n    if sys.version_info[:3] >= (2, 7, 12):\n        assert codec_lookup('zlib').name == 'utf-8'\n    assert codec_lookup('utf16').name == 'utf-16'\n    assert codec_lookup('undefined').name == 'utf-8'\n    assert codec_lookup('undefined', default=None) is None\n    assert codec_lookup('undefined', default='latin1').name == 'iso8859-1'\n    if sys.version_info[:3] >= (2, 7, 12):\n        assert codec_lookup('zlib', default='latin1').name == 'iso8859-1'\n    assert codec_lookup('unknownshit', default='latin1').name == 'iso8859-1'\n\n\ndef test_soft_break():\n    assert soft_break(\n        'com.example.package.method(argument).anotherMethod(argument)', 15\n    ) == ZWSP.join(\n        ['com.', 'example.', 'package.', 'method(', 'argument).', 'anotherMethod(', 'argument)']\n    )\n\n\ndef test_soft_break_and_hyphenate():\n    hyphenate = functools.partial(soft_hyphenate, length=6)\n    assert soft_break('com.reallyreallyreally.long.path', 6, hyphenate) == \\\n        ZWSP.join(['com.', SHY.join(['really'] * 3) + '.', 'long.', 'path'])\n\n\ndef test_tokens_from_name():\n    assert list(tokens_from_name('MyHTTPProject42')) == ['my', 'http', 'project42']\n    assert list(tokens_from_name('MyHTTPProject42', remove_digits=True)) == [\n        'my', 'http', 'project'\n    ]\n    assert list(tokens_from_name('MyHTTPProject Awesome 42 Stuff')) == [\n        'my', 'http', 'project', 'awesome', '42', 'stuff'\n    ]\n    assert list(tokens_from_name('MyHTTPProject Awesome 42 Stuff', remove_digits=True)) == [\n        'my', 'http', 'project', 'awesome', 'stuff'\n    ]\n\n\ndef test_is_valid_dot_atom():\n    assert is_valid_dot_atom('foo')\n    assert is_valid_dot_atom('foo.bar')\n    assert not is_valid_dot_atom('.foo.bar')\n    assert not is_valid_dot_atom('foo.bar.')\n    assert not is_valid_dot_atom('foo.\\x00')\n\n\ndef test_truncatechars():\n    assert truncatechars(\"12345\", 6) == \"12345\"\n    assert truncatechars(\"12345\", 5) == \"12345\"\n    assert truncatechars(\"12345\", 4) == \"1...\"\n    assert truncatechars(\"12345\", 3) == \"...\"\n    assert truncatechars(\"12345\", 2) == \"...\"\n    assert truncatechars(\"12345\", 1) == \"...\"\n    assert truncatechars(\"12345\", 0) == \"...\"\n\n    assert truncatechars(\"12345\", 6, ellipsis=u\"\\u2026\") == u\"12345\"\n    assert truncatechars(\"12345\", 5, ellipsis=u\"\\u2026\") == u\"12345\"\n    assert truncatechars(\"12345\", 4, ellipsis=u\"\\u2026\") == u\"123\\u2026\"\n    assert truncatechars(\"12345\", 3, ellipsis=u\"\\u2026\") == u\"12\\u2026\"\n    assert truncatechars(\"12345\", 2, ellipsis=u\"\\u2026\") == u\"1\\u2026\"\n    assert truncatechars(\"12345\", 1, ellipsis=u\"\\u2026\") == u\"\\u2026\"\n    assert truncatechars(\"12345\", 0, ellipsis=u\"\\u2026\") == u\"\\u2026\"\n\n    assert truncatechars(None, 1) is None\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_strings.py", "id": "bf1b6c707ed0ce38ed6b5eda92322844", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/test_strings.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}