{"author": "yandex", "code": "from cached_property import cached_property\n\nfrom gixy.directives.directive import Directive\nfrom gixy.core.variable import Variable\nfrom gixy.core.regexp import Regexp\n\n\ndef get_overrides():\n    result = {}\n    for klass in Block.__subclasses__():\n        if not klass.nginx_name:\n            continue\n\n        if not klass.__name__.endswith('Block'):\n            continue\n\n        result[klass.nginx_name] = klass\n    return result\n\n\nclass Block(Directive):\n    nginx_name = None\n    is_block = True\n    self_context = True\n\n    def __init__(self, name, args):\n        super(Block, self).__init__(name, args)\n        self.children = []\n\n    def some(self, name, flat=True):\n        for child in self.children:\n            if child.name == name:\n                return child\n            if flat and child.is_block and not child.self_context:\n                result = child.some(name, flat=flat)\n                if result:\n                    return result\n        return None\n\n    def find(self, name, flat=False):\n        result = []\n        for child in self.children:\n            if child.name == name:\n                result.append(child)\n            if flat and child.is_block and not child.self_context:\n                result += child.find(name)\n        return result\n\n    def find_recursive(self, name):\n        result = []\n        for child in self.children:\n            if child.name == name:\n                result.append(child)\n            if child.is_block:\n                result += child.find_recursive(name)\n        return result\n\n    def append(self, directive):\n        directive.set_parent(self)\n        self.children.append(directive)\n\n    def __str__(self):\n        return '{name} {args} {{'.format(name=self.name, args=' '.join(self.args))\n\n\nclass Root(Block):\n    nginx_name = None\n\n    def __init__(self):\n        super(Root, self).__init__(None, [])\n\n\nclass HttpBlock(Block):\n    nginx_name = 'http'\n\n    def __init__(self, name, args):\n        super(HttpBlock, self).__init__(name, args)\n\n\nclass ServerBlock(Block):\n    nginx_name = 'server'\n\n    def __init__(self, name, args):\n        super(ServerBlock, self).__init__(name, args)\n\n    def get_names(self):\n        return self.find('server_name')\n\n    def __str__(self):\n        server_names = [str(sn) for sn in self.find('server_name')]\n        if server_names:\n            return 'server {{\\n{0}'.format('\\n'.join(server_names[:2]))\n        return 'server {'\n\n\nclass LocationBlock(Block):\n    nginx_name = 'location'\n    provide_variables = True\n\n    def __init__(self, name, args):\n        super(LocationBlock, self).__init__(name, args)\n        if len(args) == 2:\n            self.modifier, self.path = args\n        else:\n            self.modifier = None\n            self.path = args[0]\n\n    @property\n    def is_internal(self):\n        return self.some('internal') is not None\n\n    @cached_property\n    def variables(self):\n        if not self.modifier or self.modifier not in ('~', '~*'):\n            return []\n\n        regexp = Regexp(self.path, case_sensitive=self.modifier == '~')\n        result = []\n        for name, group in regexp.groups.items():\n            result.append(Variable(name=name, value=group, boundary=None, provider=self))\n        return result\n\n\nclass IfBlock(Block):\n    nginx_name = 'if'\n    self_context = False\n\n    def __init__(self, name, args):\n        super(IfBlock, self).__init__(name, args)\n        self.operand = None\n        self.value = None\n        self.variable = None\n\n        if len(args) == 1:\n            # if ($slow)\n            self.variable = args[0]\n        elif len(args) == 2:\n            # if (!-e $foo)\n            self.operand, self.value = args\n        elif len(args) == 3:\n            # if ($request_method = POST)\n            self.variable, self.operand, self.value = args\n        else:\n            raise Exception('Unknown \"if\" definition, args: {0!r}'.format(args))\n\n    def __str__(self):\n        return '{name} ({args}) {{'.format(name=self.name, args=' '.join(self.args))\n\n\nclass IncludeBlock(Block):\n    nginx_name = 'include'\n    self_context = False\n\n    def __init__(self, name, args):\n        super(IncludeBlock, self).__init__(name, args)\n        self.file_path = args[0]\n\n    def __str__(self):\n        return 'include {0};'.format(self.file_path)\n\n\nclass MapBlock(Block):\n    nginx_name = 'map'\n    self_context = False\n    provide_variables = True\n\n    def __init__(self, name, args):\n        super(MapBlock, self).__init__(name, args)\n        self.source = args[0]\n        self.variable = args[1].strip('$')\n\n    @cached_property\n    def variables(self):\n        # TODO(buglloc): Finish him!\n        return [Variable(name=self.variable, value='', boundary=None, provider=self, have_script=False)]\n", "comments": "  ( slow)    (  e  foo)    ( request method   post)    todo(buglloc)  finish  ", "content": "from cached_property import cached_property\n\nfrom gixy.directives.directive import Directive\nfrom gixy.core.variable import Variable\nfrom gixy.core.regexp import Regexp\n\n\ndef get_overrides():\n    result = {}\n    for klass in Block.__subclasses__():\n        if not klass.nginx_name:\n            continue\n\n        if not klass.__name__.endswith('Block'):\n            continue\n\n        result[klass.nginx_name] = klass\n    return result\n\n\nclass Block(Directive):\n    nginx_name = None\n    is_block = True\n    self_context = True\n\n    def __init__(self, name, args):\n        super(Block, self).__init__(name, args)\n        self.children = []\n\n    def some(self, name, flat=True):\n        for child in self.children:\n            if child.name == name:\n                return child\n            if flat and child.is_block and not child.self_context:\n                result = child.some(name, flat=flat)\n                if result:\n                    return result\n        return None\n\n    def find(self, name, flat=False):\n        result = []\n        for child in self.children:\n            if child.name == name:\n                result.append(child)\n            if flat and child.is_block and not child.self_context:\n                result += child.find(name)\n        return result\n\n    def find_recursive(self, name):\n        result = []\n        for child in self.children:\n            if child.name == name:\n                result.append(child)\n            if child.is_block:\n                result += child.find_recursive(name)\n        return result\n\n    def append(self, directive):\n        directive.set_parent(self)\n        self.children.append(directive)\n\n    def __str__(self):\n        return '{name} {args} {{'.format(name=self.name, args=' '.join(self.args))\n\n\nclass Root(Block):\n    nginx_name = None\n\n    def __init__(self):\n        super(Root, self).__init__(None, [])\n\n\nclass HttpBlock(Block):\n    nginx_name = 'http'\n\n    def __init__(self, name, args):\n        super(HttpBlock, self).__init__(name, args)\n\n\nclass ServerBlock(Block):\n    nginx_name = 'server'\n\n    def __init__(self, name, args):\n        super(ServerBlock, self).__init__(name, args)\n\n    def get_names(self):\n        return self.find('server_name')\n\n    def __str__(self):\n        server_names = [str(sn) for sn in self.find('server_name')]\n        if server_names:\n            return 'server {{\\n{0}'.format('\\n'.join(server_names[:2]))\n        return 'server {'\n\n\nclass LocationBlock(Block):\n    nginx_name = 'location'\n    provide_variables = True\n\n    def __init__(self, name, args):\n        super(LocationBlock, self).__init__(name, args)\n        if len(args) == 2:\n            self.modifier, self.path = args\n        else:\n            self.modifier = None\n            self.path = args[0]\n\n    @property\n    def is_internal(self):\n        return self.some('internal') is not None\n\n    @cached_property\n    def variables(self):\n        if not self.modifier or self.modifier not in ('~', '~*'):\n            return []\n\n        regexp = Regexp(self.path, case_sensitive=self.modifier == '~')\n        result = []\n        for name, group in regexp.groups.items():\n            result.append(Variable(name=name, value=group, boundary=None, provider=self))\n        return result\n\n\nclass IfBlock(Block):\n    nginx_name = 'if'\n    self_context = False\n\n    def __init__(self, name, args):\n        super(IfBlock, self).__init__(name, args)\n        self.operand = None\n        self.value = None\n        self.variable = None\n\n        if len(args) == 1:\n            # if ($slow)\n            self.variable = args[0]\n        elif len(args) == 2:\n            # if (!-e $foo)\n            self.operand, self.value = args\n        elif len(args) == 3:\n            # if ($request_method = POST)\n            self.variable, self.operand, self.value = args\n        else:\n            raise Exception('Unknown \"if\" definition, args: {0!r}'.format(args))\n\n    def __str__(self):\n        return '{name} ({args}) {{'.format(name=self.name, args=' '.join(self.args))\n\n\nclass IncludeBlock(Block):\n    nginx_name = 'include'\n    self_context = False\n\n    def __init__(self, name, args):\n        super(IncludeBlock, self).__init__(name, args)\n        self.file_path = args[0]\n\n    def __str__(self):\n        return 'include {0};'.format(self.file_path)\n\n\nclass MapBlock(Block):\n    nginx_name = 'map'\n    self_context = False\n    provide_variables = True\n\n    def __init__(self, name, args):\n        super(MapBlock, self).__init__(name, args)\n        self.source = args[0]\n        self.variable = args[1].strip('$')\n\n    @cached_property\n    def variables(self):\n        # TODO(buglloc): Finish him!\n        return [Variable(name=self.variable, value='', boundary=None, provider=self, have_script=False)]\n", "description": "Nginx configuration static analyzer", "file_name": "block.py", "id": "2302082cb54db8ac77883995f0d3843a", "language": "Python", "project_name": "gixy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/yandex-gixy/yandex-gixy-86b5e60/gixy/directives/block.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:01:42Z", "url": "https://github.com/yandex/gixy", "wiki": true}