{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    parse_duration,\n)\n\n\nclass NTVDeIE(InfoExtractor):\n    IE_NAME = 'n-tv.de'\n    _VALID_URL = r'https?://(?:www\\.)?n-tv\\.de/mediathek/videos/[^/?\n\n    _TESTS = [{\n        'url': 'http://www.n-tv.de/mediathek/videos/panorama/Schnee-und-Glaette-fuehren-zu-zahlreichen-Unfaellen-und-Staus-article14438086.html',\n        'md5': '6ef2514d4b1e8e03ca24b49e2f167153',\n        'info_dict': {\n            'id': '14438086',\n            'ext': 'mp4',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'title': 'Schnee und Gl\u00e4tte f\u00fchren zu zahlreichen Unf\u00e4llen und Staus',\n            'alt_title': 'Winterchaos auf deutschen Stra\u00dfen',\n            'description': 'Schnee und Gl\u00e4tte sorgen deutschlandweit f\u00fcr einen chaotischen Start in die Woche: Auf den Stra\u00dfen kommt es zu kilometerlangen Staus und Dutzenden Gl\u00e4tteunf\u00e4llen. In D\u00fcsseldorf und M\u00fcnchen wirbelt der Schnee zudem den Flugplan durcheinander. Dutzende Fl\u00fcge landen zu sp\u00e4t, einige fallen ganz aus.',\n            'duration': 4020,\n            'timestamp': 1422892797,\n            'upload_date': '20150202',\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        info = self._parse_json(self._search_regex(\n            r'(?s)ntv\\.pageInfo\\.article\\s*=\\s*(\\{.*?\\});', webpage, 'info'),\n            video_id, transform_source=js_to_json)\n        timestamp = int_or_none(info.get('publishedDateAsUnixTimeStamp'))\n        vdata = self._parse_json(self._search_regex(\n            r'(?s)\\$\\(\\s*\"\\\n            webpage, 'player data'), video_id,\n            transform_source=lambda s: js_to_json(re.sub(r'advertising:\\s*{[^}]+},', '', s)))\n        duration = parse_duration(vdata.get('duration'))\n\n        formats = []\n        if vdata.get('video'):\n            formats.append({\n                'format_id': 'flash',\n                'url': 'rtmp://fms.n-tv.de/%s' % vdata['video'],\n            })\n        if vdata.get('videoMp4'):\n            formats.append({\n                'format_id': 'mobile',\n                'url': compat_urlparse.urljoin('http://video.n-tv.de', vdata['videoMp4']),\n                'tbr': 400,  \n            })\n        if vdata.get('videoM3u8'):\n            m3u8_url = compat_urlparse.urljoin('http://video.n-tv.de', vdata['videoM3u8'])\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, ext='mp4', entry_protocol='m3u8_native',\n                preference=0, m3u8_id='hls', fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': info['headline'],\n            'description': info.get('intro'),\n            'alt_title': info.get('kicker'),\n            'timestamp': timestamp,\n            'thumbnail': vdata.get('html5VideoPoster'),\n            'duration': duration,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#]+/[^/?#]+-article(?P<id>.+)\\.html'\n#player\"\\s*\\)\\s*\\.data\\(\\s*\"player\",\\s*(\\{.*?\\})\\);',\n# estimation\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    parse_duration,\n)\n\n\nclass NTVDeIE(InfoExtractor):\n    IE_NAME = 'n-tv.de'\n    _VALID_URL = r'https?://(?:www\\.)?n-tv\\.de/mediathek/videos/[^/?#]+/[^/?#]+-article(?P<id>.+)\\.html'\n\n    _TESTS = [{\n        'url': 'http://www.n-tv.de/mediathek/videos/panorama/Schnee-und-Glaette-fuehren-zu-zahlreichen-Unfaellen-und-Staus-article14438086.html',\n        'md5': '6ef2514d4b1e8e03ca24b49e2f167153',\n        'info_dict': {\n            'id': '14438086',\n            'ext': 'mp4',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'title': 'Schnee und Gl\u00e4tte f\u00fchren zu zahlreichen Unf\u00e4llen und Staus',\n            'alt_title': 'Winterchaos auf deutschen Stra\u00dfen',\n            'description': 'Schnee und Gl\u00e4tte sorgen deutschlandweit f\u00fcr einen chaotischen Start in die Woche: Auf den Stra\u00dfen kommt es zu kilometerlangen Staus und Dutzenden Gl\u00e4tteunf\u00e4llen. In D\u00fcsseldorf und M\u00fcnchen wirbelt der Schnee zudem den Flugplan durcheinander. Dutzende Fl\u00fcge landen zu sp\u00e4t, einige fallen ganz aus.',\n            'duration': 4020,\n            'timestamp': 1422892797,\n            'upload_date': '20150202',\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        info = self._parse_json(self._search_regex(\n            r'(?s)ntv\\.pageInfo\\.article\\s*=\\s*(\\{.*?\\});', webpage, 'info'),\n            video_id, transform_source=js_to_json)\n        timestamp = int_or_none(info.get('publishedDateAsUnixTimeStamp'))\n        vdata = self._parse_json(self._search_regex(\n            r'(?s)\\$\\(\\s*\"\\#player\"\\s*\\)\\s*\\.data\\(\\s*\"player\",\\s*(\\{.*?\\})\\);',\n            webpage, 'player data'), video_id,\n            transform_source=lambda s: js_to_json(re.sub(r'advertising:\\s*{[^}]+},', '', s)))\n        duration = parse_duration(vdata.get('duration'))\n\n        formats = []\n        if vdata.get('video'):\n            formats.append({\n                'format_id': 'flash',\n                'url': 'rtmp://fms.n-tv.de/%s' % vdata['video'],\n            })\n        if vdata.get('videoMp4'):\n            formats.append({\n                'format_id': 'mobile',\n                'url': compat_urlparse.urljoin('http://video.n-tv.de', vdata['videoMp4']),\n                'tbr': 400,  # estimation\n            })\n        if vdata.get('videoM3u8'):\n            m3u8_url = compat_urlparse.urljoin('http://video.n-tv.de', vdata['videoM3u8'])\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, ext='mp4', entry_protocol='m3u8_native',\n                preference=0, m3u8_id='hls', fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': info['headline'],\n            'description': info.get('intro'),\n            'alt_title': info.get('kicker'),\n            'timestamp': timestamp,\n            'thumbnail': vdata.get('html5VideoPoster'),\n            'duration': duration,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "ntvde.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/ntvde.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}