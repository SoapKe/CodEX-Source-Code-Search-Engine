{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    unified_strdate,\n)\n\n\nclass AppleTrailersIE(InfoExtractor):\n    IE_NAME = 'appletrailers'\n    _VALID_URL = r'https?://(?:www\\.|movie)?trailers\\.apple\\.com/(?:trailers|ca)/(?P<company>[^/]+)/(?P<movie>[^/]+)'\n    _TESTS = [{\n        'url': 'http://trailers.apple.com/trailers/wb/manofsteel/',\n        'info_dict': {\n            'id': '5111',\n            'title': 'Man of Steel',\n        },\n        'playlist': [\n            {\n                'md5': 'd97a8e575432dbcb81b7c3acb741f8a8',\n                'info_dict': {\n                    'id': 'manofsteel-trailer4',\n                    'ext': 'mov',\n                    'duration': 111,\n                    'title': 'Trailer 4',\n                    'upload_date': '20130523',\n                    'uploader_id': 'wb',\n                },\n            },\n            {\n                'md5': 'b8017b7131b721fb4e8d6f49e1df908c',\n                'info_dict': {\n                    'id': 'manofsteel-trailer3',\n                    'ext': 'mov',\n                    'duration': 182,\n                    'title': 'Trailer 3',\n                    'upload_date': '20130417',\n                    'uploader_id': 'wb',\n                },\n            },\n            {\n                'md5': 'd0f1e1150989b9924679b441f3404d48',\n                'info_dict': {\n                    'id': 'manofsteel-trailer',\n                    'ext': 'mov',\n                    'duration': 148,\n                    'title': 'Trailer',\n                    'upload_date': '20121212',\n                    'uploader_id': 'wb',\n                },\n            },\n            {\n                'md5': '5fe08795b943eb2e757fa95cb6def1cb',\n                'info_dict': {\n                    'id': 'manofsteel-teaser',\n                    'ext': 'mov',\n                    'duration': 93,\n                    'title': 'Teaser',\n                    'upload_date': '20120721',\n                    'uploader_id': 'wb',\n                },\n            },\n        ]\n    }, {\n        'url': 'http://trailers.apple.com/trailers/magnolia/blackthorn/',\n        'info_dict': {\n            'id': '4489',\n            'title': 'Blackthorn',\n        },\n        'playlist_mincount': 2,\n        'expected_warnings': ['Unable to download JSON metadata'],\n    }, {\n        \n        'url': 'http://trailers.apple.com/trailers/fox/kungfupanda3/',\n        'info_dict': {\n            'id': '15881',\n            'title': 'Kung Fu Panda 3',\n        },\n        'playlist_mincount': 4,\n    }, {\n        'url': 'http://trailers.apple.com/ca/metropole/autrui/',\n        'only_matching': True,\n    }, {\n        'url': 'http://movietrailers.apple.com/trailers/focus_features/kuboandthetwostrings/',\n        'only_matching': True,\n    }]\n\n    _JSON_RE = r'iTunes.playURL\\((.*?)\\);'\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        movie = mobj.group('movie')\n        uploader_id = mobj.group('company')\n\n        webpage = self._download_webpage(url, movie)\n        film_id = self._search_regex(r\"FilmId\\s*=\\s*'(\\d+)'\", webpage, 'film id')\n        film_data = self._download_json(\n            'http://trailers.apple.com/trailers/feeds/data/%s.json' % film_id,\n            film_id, fatal=False)\n\n        if film_data:\n            entries = []\n            for clip in film_data.get('clips', []):\n                clip_title = clip['title']\n\n                formats = []\n                for version, version_data in clip.get('versions', {}).items():\n                    for size, size_data in version_data.get('sizes', {}).items():\n                        src = size_data.get('src')\n                        if not src:\n                            continue\n                        formats.append({\n                            'format_id': '%s-%s' % (version, size),\n                            'url': re.sub(r'_(\\d+p\\.mov)', r'_h\\1', src),\n                            'width': int_or_none(size_data.get('width')),\n                            'height': int_or_none(size_data.get('height')),\n                            'language': version[:2],\n                        })\n                self._sort_formats(formats)\n\n                entries.append({\n                    'id': movie + '-' + re.sub(r'[^a-zA-Z0-9]', '', clip_title).lower(),\n                    'formats': formats,\n                    'title': clip_title,\n                    'thumbnail': clip.get('screen') or clip.get('thumb'),\n                    'duration': parse_duration(clip.get('runtime') or clip.get('faded')),\n                    'upload_date': unified_strdate(clip.get('posted')),\n                    'uploader_id': uploader_id,\n                })\n\n            page_data = film_data.get('page', {})\n            return self.playlist_result(entries, film_id, page_data.get('movie_title'))\n\n        playlist_url = compat_urlparse.urljoin(url, 'includes/playlists/itunes.inc')\n\n        def fix_html(s):\n            s = re.sub(r'(?s)<script[^<]*?>.*?</script>', '', s)\n            s = re.sub(r'<img ([^<]*?)/?>', r'<img \\1/>', s)\n            \n            \n\n            def _clean_json(m):\n                return 'iTunes.playURL(%s);' % m.group(1).replace('\\'', '&\n            s = re.sub(self._JSON_RE, _clean_json, s)\n            s = '<html>%s</html>' % s\n            return s\n        doc = self._download_xml(playlist_url, movie, transform_source=fix_html)\n\n        playlist = []\n        for li in doc.findall('./div/ul/li'):\n            on_click = li.find('.//a').attrib['onClick']\n            trailer_info_json = self._search_regex(self._JSON_RE,\n                                                   on_click, 'trailer info')\n            trailer_info = json.loads(trailer_info_json)\n            first_url = trailer_info.get('url')\n            if not first_url:\n                continue\n            title = trailer_info['title']\n            video_id = movie + '-' + re.sub(r'[^a-zA-Z0-9]', '', title).lower()\n            thumbnail = li.find('.//img').attrib['src']\n            upload_date = trailer_info['posted'].replace('-', '')\n\n            runtime = trailer_info['runtime']\n            m = re.search(r'(?P<minutes>[0-9]+):(?P<seconds>[0-9]{1,2})', runtime)\n            duration = None\n            if m:\n                duration = 60 * int(m.group('minutes')) + int(m.group('seconds'))\n\n            trailer_id = first_url.split('/')[-1].rpartition('_')[0].lower()\n            settings_json_url = compat_urlparse.urljoin(url, 'includes/settings/%s.json' % trailer_id)\n            settings = self._download_json(settings_json_url, trailer_id, 'Downloading settings json')\n\n            formats = []\n            for format in settings['metadata']['sizes']:\n                \n                format_url = re.sub(r'_(\\d*p\\.mov)', r'_h\\1', format['src'])\n                formats.append({\n                    'url': format_url,\n                    'format': format['type'],\n                    'width': int_or_none(format['width']),\n                    'height': int_or_none(format['height']),\n                })\n\n            self._sort_formats(formats)\n\n            playlist.append({\n                '_type': 'video',\n                'id': video_id,\n                'formats': formats,\n                'title': title,\n                'duration': duration,\n                'thumbnail': thumbnail,\n                'upload_date': upload_date,\n                'uploader_id': uploader_id,\n                'http_headers': {\n                    'User-Agent': 'QuickTime compatible (youtube-dl)',\n                },\n            })\n\n        return {\n            '_type': 'playlist',\n            'id': movie,\n            'entries': playlist,\n        }\n\n\nclass AppleTrailersSectionIE(InfoExtractor):\n    IE_NAME = 'appletrailers:section'\n    _SECTIONS = {\n        'justadded': {\n            'feed_path': 'just_added',\n            'title': 'Just Added',\n        },\n        'exclusive': {\n            'feed_path': 'exclusive',\n            'title': 'Exclusive',\n        },\n        'justhd': {\n            'feed_path': 'just_hd',\n            'title': 'Just HD',\n        },\n        'mostpopular': {\n            'feed_path': 'most_pop',\n            'title': 'Most Popular',\n        },\n        'moviestudios': {\n            'feed_path': 'studios',\n            'title': 'Movie Studios',\n        },\n    }\n    _VALID_URL = r'https?://(?:www\\.)?trailers\\.apple\\.com/\n    _TESTS = [{\n        'url': 'http://trailers.apple.com/\n        'info_dict': {\n            'title': 'Just Added',\n            'id': 'justadded',\n        },\n        'playlist_mincount': 80,\n    }, {\n        'url': 'http://trailers.apple.com/\n        'info_dict': {\n            'title': 'Exclusive',\n            'id': 'exclusive',\n        },\n        'playlist_mincount': 80,\n    }, {\n        'url': 'http://trailers.apple.com/\n        'info_dict': {\n            'title': 'Just HD',\n            'id': 'justhd',\n        },\n        'playlist_mincount': 80,\n    }, {\n        'url': 'http://trailers.apple.com/\n        'info_dict': {\n            'title': 'Most Popular',\n            'id': 'mostpopular',\n        },\n        'playlist_mincount': 30,\n    }, {\n        'url': 'http://trailers.apple.com/\n        'info_dict': {\n            'title': 'Movie Studios',\n            'id': 'moviestudios',\n        },\n        'playlist_mincount': 80,\n    }]\n\n    def _real_extract(self, url):\n        section = self._match_id(url)\n        section_data = self._download_json(\n            'http://trailers.apple.com/trailers/home/feeds/%s.json' % self._SECTIONS[section]['feed_path'],\n            section)\n        entries = [\n            self.url_result('http://trailers.apple.com' + e['location'])\n            for e in section_data]\n        return self.playlist_result(entries, section, self._SECTIONS[section]['title'])\n", "comments": "# json data only available from http://trailers.apple.com/trailers/feeds/data/15881.json\n# The ' in the onClick attributes are not escaped, it couldn't be parsed\n# like: http://trailers.apple.com/trailers/wb/gravity/\n#39;')\n# The src is a file pointing to the real video file\n#section=(?P<id>%s)' % '|'.join(_SECTIONS)\n#section=justadded',\n#section=exclusive',\n#section=justhd',\n#section=mostpopular',\n#section=moviestudios',\n", "content": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    unified_strdate,\n)\n\n\nclass AppleTrailersIE(InfoExtractor):\n    IE_NAME = 'appletrailers'\n    _VALID_URL = r'https?://(?:www\\.|movie)?trailers\\.apple\\.com/(?:trailers|ca)/(?P<company>[^/]+)/(?P<movie>[^/]+)'\n    _TESTS = [{\n        'url': 'http://trailers.apple.com/trailers/wb/manofsteel/',\n        'info_dict': {\n            'id': '5111',\n            'title': 'Man of Steel',\n        },\n        'playlist': [\n            {\n                'md5': 'd97a8e575432dbcb81b7c3acb741f8a8',\n                'info_dict': {\n                    'id': 'manofsteel-trailer4',\n                    'ext': 'mov',\n                    'duration': 111,\n                    'title': 'Trailer 4',\n                    'upload_date': '20130523',\n                    'uploader_id': 'wb',\n                },\n            },\n            {\n                'md5': 'b8017b7131b721fb4e8d6f49e1df908c',\n                'info_dict': {\n                    'id': 'manofsteel-trailer3',\n                    'ext': 'mov',\n                    'duration': 182,\n                    'title': 'Trailer 3',\n                    'upload_date': '20130417',\n                    'uploader_id': 'wb',\n                },\n            },\n            {\n                'md5': 'd0f1e1150989b9924679b441f3404d48',\n                'info_dict': {\n                    'id': 'manofsteel-trailer',\n                    'ext': 'mov',\n                    'duration': 148,\n                    'title': 'Trailer',\n                    'upload_date': '20121212',\n                    'uploader_id': 'wb',\n                },\n            },\n            {\n                'md5': '5fe08795b943eb2e757fa95cb6def1cb',\n                'info_dict': {\n                    'id': 'manofsteel-teaser',\n                    'ext': 'mov',\n                    'duration': 93,\n                    'title': 'Teaser',\n                    'upload_date': '20120721',\n                    'uploader_id': 'wb',\n                },\n            },\n        ]\n    }, {\n        'url': 'http://trailers.apple.com/trailers/magnolia/blackthorn/',\n        'info_dict': {\n            'id': '4489',\n            'title': 'Blackthorn',\n        },\n        'playlist_mincount': 2,\n        'expected_warnings': ['Unable to download JSON metadata'],\n    }, {\n        # json data only available from http://trailers.apple.com/trailers/feeds/data/15881.json\n        'url': 'http://trailers.apple.com/trailers/fox/kungfupanda3/',\n        'info_dict': {\n            'id': '15881',\n            'title': 'Kung Fu Panda 3',\n        },\n        'playlist_mincount': 4,\n    }, {\n        'url': 'http://trailers.apple.com/ca/metropole/autrui/',\n        'only_matching': True,\n    }, {\n        'url': 'http://movietrailers.apple.com/trailers/focus_features/kuboandthetwostrings/',\n        'only_matching': True,\n    }]\n\n    _JSON_RE = r'iTunes.playURL\\((.*?)\\);'\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        movie = mobj.group('movie')\n        uploader_id = mobj.group('company')\n\n        webpage = self._download_webpage(url, movie)\n        film_id = self._search_regex(r\"FilmId\\s*=\\s*'(\\d+)'\", webpage, 'film id')\n        film_data = self._download_json(\n            'http://trailers.apple.com/trailers/feeds/data/%s.json' % film_id,\n            film_id, fatal=False)\n\n        if film_data:\n            entries = []\n            for clip in film_data.get('clips', []):\n                clip_title = clip['title']\n\n                formats = []\n                for version, version_data in clip.get('versions', {}).items():\n                    for size, size_data in version_data.get('sizes', {}).items():\n                        src = size_data.get('src')\n                        if not src:\n                            continue\n                        formats.append({\n                            'format_id': '%s-%s' % (version, size),\n                            'url': re.sub(r'_(\\d+p\\.mov)', r'_h\\1', src),\n                            'width': int_or_none(size_data.get('width')),\n                            'height': int_or_none(size_data.get('height')),\n                            'language': version[:2],\n                        })\n                self._sort_formats(formats)\n\n                entries.append({\n                    'id': movie + '-' + re.sub(r'[^a-zA-Z0-9]', '', clip_title).lower(),\n                    'formats': formats,\n                    'title': clip_title,\n                    'thumbnail': clip.get('screen') or clip.get('thumb'),\n                    'duration': parse_duration(clip.get('runtime') or clip.get('faded')),\n                    'upload_date': unified_strdate(clip.get('posted')),\n                    'uploader_id': uploader_id,\n                })\n\n            page_data = film_data.get('page', {})\n            return self.playlist_result(entries, film_id, page_data.get('movie_title'))\n\n        playlist_url = compat_urlparse.urljoin(url, 'includes/playlists/itunes.inc')\n\n        def fix_html(s):\n            s = re.sub(r'(?s)<script[^<]*?>.*?</script>', '', s)\n            s = re.sub(r'<img ([^<]*?)/?>', r'<img \\1/>', s)\n            # The ' in the onClick attributes are not escaped, it couldn't be parsed\n            # like: http://trailers.apple.com/trailers/wb/gravity/\n\n            def _clean_json(m):\n                return 'iTunes.playURL(%s);' % m.group(1).replace('\\'', '&#39;')\n            s = re.sub(self._JSON_RE, _clean_json, s)\n            s = '<html>%s</html>' % s\n            return s\n        doc = self._download_xml(playlist_url, movie, transform_source=fix_html)\n\n        playlist = []\n        for li in doc.findall('./div/ul/li'):\n            on_click = li.find('.//a').attrib['onClick']\n            trailer_info_json = self._search_regex(self._JSON_RE,\n                                                   on_click, 'trailer info')\n            trailer_info = json.loads(trailer_info_json)\n            first_url = trailer_info.get('url')\n            if not first_url:\n                continue\n            title = trailer_info['title']\n            video_id = movie + '-' + re.sub(r'[^a-zA-Z0-9]', '', title).lower()\n            thumbnail = li.find('.//img').attrib['src']\n            upload_date = trailer_info['posted'].replace('-', '')\n\n            runtime = trailer_info['runtime']\n            m = re.search(r'(?P<minutes>[0-9]+):(?P<seconds>[0-9]{1,2})', runtime)\n            duration = None\n            if m:\n                duration = 60 * int(m.group('minutes')) + int(m.group('seconds'))\n\n            trailer_id = first_url.split('/')[-1].rpartition('_')[0].lower()\n            settings_json_url = compat_urlparse.urljoin(url, 'includes/settings/%s.json' % trailer_id)\n            settings = self._download_json(settings_json_url, trailer_id, 'Downloading settings json')\n\n            formats = []\n            for format in settings['metadata']['sizes']:\n                # The src is a file pointing to the real video file\n                format_url = re.sub(r'_(\\d*p\\.mov)', r'_h\\1', format['src'])\n                formats.append({\n                    'url': format_url,\n                    'format': format['type'],\n                    'width': int_or_none(format['width']),\n                    'height': int_or_none(format['height']),\n                })\n\n            self._sort_formats(formats)\n\n            playlist.append({\n                '_type': 'video',\n                'id': video_id,\n                'formats': formats,\n                'title': title,\n                'duration': duration,\n                'thumbnail': thumbnail,\n                'upload_date': upload_date,\n                'uploader_id': uploader_id,\n                'http_headers': {\n                    'User-Agent': 'QuickTime compatible (youtube-dl)',\n                },\n            })\n\n        return {\n            '_type': 'playlist',\n            'id': movie,\n            'entries': playlist,\n        }\n\n\nclass AppleTrailersSectionIE(InfoExtractor):\n    IE_NAME = 'appletrailers:section'\n    _SECTIONS = {\n        'justadded': {\n            'feed_path': 'just_added',\n            'title': 'Just Added',\n        },\n        'exclusive': {\n            'feed_path': 'exclusive',\n            'title': 'Exclusive',\n        },\n        'justhd': {\n            'feed_path': 'just_hd',\n            'title': 'Just HD',\n        },\n        'mostpopular': {\n            'feed_path': 'most_pop',\n            'title': 'Most Popular',\n        },\n        'moviestudios': {\n            'feed_path': 'studios',\n            'title': 'Movie Studios',\n        },\n    }\n    _VALID_URL = r'https?://(?:www\\.)?trailers\\.apple\\.com/#section=(?P<id>%s)' % '|'.join(_SECTIONS)\n    _TESTS = [{\n        'url': 'http://trailers.apple.com/#section=justadded',\n        'info_dict': {\n            'title': 'Just Added',\n            'id': 'justadded',\n        },\n        'playlist_mincount': 80,\n    }, {\n        'url': 'http://trailers.apple.com/#section=exclusive',\n        'info_dict': {\n            'title': 'Exclusive',\n            'id': 'exclusive',\n        },\n        'playlist_mincount': 80,\n    }, {\n        'url': 'http://trailers.apple.com/#section=justhd',\n        'info_dict': {\n            'title': 'Just HD',\n            'id': 'justhd',\n        },\n        'playlist_mincount': 80,\n    }, {\n        'url': 'http://trailers.apple.com/#section=mostpopular',\n        'info_dict': {\n            'title': 'Most Popular',\n            'id': 'mostpopular',\n        },\n        'playlist_mincount': 30,\n    }, {\n        'url': 'http://trailers.apple.com/#section=moviestudios',\n        'info_dict': {\n            'title': 'Movie Studios',\n            'id': 'moviestudios',\n        },\n        'playlist_mincount': 80,\n    }]\n\n    def _real_extract(self, url):\n        section = self._match_id(url)\n        section_data = self._download_json(\n            'http://trailers.apple.com/trailers/home/feeds/%s.json' % self._SECTIONS[section]['feed_path'],\n            section)\n        entries = [\n            self.url_result('http://trailers.apple.com' + e['location'])\n            for e in section_data]\n        return self.playlist_result(entries, section, self._SECTIONS[section]['title'])\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "appletrailers.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/appletrailers.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}