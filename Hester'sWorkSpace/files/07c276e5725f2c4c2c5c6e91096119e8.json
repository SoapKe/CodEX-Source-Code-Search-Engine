{"author": "localstack", "code": "import os\nimport json\nfrom flask import Flask, render_template, jsonify, send_from_directory, request\nfrom flask_swagger import swagger\nfrom localstack.constants import VERSION\nfrom localstack.utils.aws.aws_stack import Environment\nfrom localstack.utils import common\nfrom localstack.dashboard import infra\n\n\nroot_path = os.path.dirname(os.path.realpath(__file__))\nweb_dir = root_path + '/web/'\n\napp = Flask('app', template_folder=web_dir)\napp.root_path = root_path\n\n\n@app.route('/swagger.json')\ndef spec():\n    swag = swagger(app)\n    swag['info']['version'] = VERSION\n    swag['info']['title'] = 'AWS Resources Dashboard'\n    return jsonify(swag)\n\n\n@app.route('/graph', methods=['POST'])\ndef get_graph():\n    \"\"\" Get deployment graph\n        ---\n        operationId: 'getGraph'\n        parameters:\n            - name: request\n              in: body\n    \"\"\"\n    data = get_payload(request)\n    env = Environment.from_string(data.get('awsEnvironment'))\n    graph = infra.get_graph(name_filter=data['nameFilter'], env=env)\n    return jsonify(graph)\n\n\n@app.route('/kinesis/<streamName>/<shardId>/events/latest', methods=['POST'])\ndef get_kinesis_events(streamName, shardId):\n    \"\"\" Get latest events from Kinesis.\n        ---\n        operationId: 'getKinesisEvents'\n        parameters:\n            - name: streamName\n              in: path\n            - name: shardId\n              in: path\n            - name: request\n              in: body\n    \"\"\"\n    data = get_payload(request)\n    env = Environment.from_string(data.get('awsEnvironment'))\n    result = infra.get_kinesis_events(stream_name=streamName, shard_id=shardId, env=env)\n    return jsonify(result)\n\n\n@app.route('/lambda/<functionName>/code', methods=['POST'])\ndef get_lambda_code(functionName):\n    \"\"\" Get source code for Lambda function.\n        ---\n        operationId: 'getLambdaCode'\n        parameters:\n            - name: functionName\n              in: path\n            - name: request\n              in: body\n    \"\"\"\n    data = get_payload(request)\n    env = Environment.from_string(data.get('awsEnvironment'))\n    result = infra.get_lambda_code(func_name=functionName, env=env)\n    return jsonify(result)\n\n\n@app.route('/')\ndef hello():\n    return render_template('index.html')\n\n\n@app.route('/<path:path>')\ndef send_static(path):\n    return send_from_directory(web_dir + '/', path)\n\n\ndef get_payload(request):\n    return json.loads(common.to_str(request.data))\n\n\ndef ensure_webapp_installed():\n    web_dir = os.path.realpath(os.path.join(os.path.dirname(__file__), 'web'))\n    node_modules_dir = os.path.join(web_dir, 'node_modules', 'jquery')\n    if not os.path.exists(node_modules_dir):\n        print('Initializing installation of Web application (this could take long time, please be patient)')\n        common.run('cd \"%s\"; npm install' % web_dir)\n\n\ndef serve(port):\n    ensure_webapp_installed()\n    app.run(port=int(port), debug=True, threaded=True, host='0.0.0.0')\n", "comments": "    get deployment graph                     operationid   getgraph          parameters                name  request                body             data   get payload(request)     env   environment string(data get( awsenvironment ))     graph   infra get graph(name filter data  namefilter    env env)     return jsonify(graph)    app route(  kinesis  streamname   shardid  events latest   methods   post  ) def get kinesis events(streamname  shardid)          get latest events kinesis                      operationid   getkinesisevents          parameters                name  streamname                path               name  shardid                path               name  request                body             data   get payload(request)     env   environment string(data get( awsenvironment ))     result   infra get kinesis events(stream name streamname  shard id shardid  env env)     return jsonify(result)    app route(  lambda  functionname  code   methods   post  ) def get lambda code(functionname)          get source code lambda function                      operationid   getlambdacode          parameters                name  functionname                path               name  request                body         ", "content": "import os\nimport json\nfrom flask import Flask, render_template, jsonify, send_from_directory, request\nfrom flask_swagger import swagger\nfrom localstack.constants import VERSION\nfrom localstack.utils.aws.aws_stack import Environment\nfrom localstack.utils import common\nfrom localstack.dashboard import infra\n\n\nroot_path = os.path.dirname(os.path.realpath(__file__))\nweb_dir = root_path + '/web/'\n\napp = Flask('app', template_folder=web_dir)\napp.root_path = root_path\n\n\n@app.route('/swagger.json')\ndef spec():\n    swag = swagger(app)\n    swag['info']['version'] = VERSION\n    swag['info']['title'] = 'AWS Resources Dashboard'\n    return jsonify(swag)\n\n\n@app.route('/graph', methods=['POST'])\ndef get_graph():\n    \"\"\" Get deployment graph\n        ---\n        operationId: 'getGraph'\n        parameters:\n            - name: request\n              in: body\n    \"\"\"\n    data = get_payload(request)\n    env = Environment.from_string(data.get('awsEnvironment'))\n    graph = infra.get_graph(name_filter=data['nameFilter'], env=env)\n    return jsonify(graph)\n\n\n@app.route('/kinesis/<streamName>/<shardId>/events/latest', methods=['POST'])\ndef get_kinesis_events(streamName, shardId):\n    \"\"\" Get latest events from Kinesis.\n        ---\n        operationId: 'getKinesisEvents'\n        parameters:\n            - name: streamName\n              in: path\n            - name: shardId\n              in: path\n            - name: request\n              in: body\n    \"\"\"\n    data = get_payload(request)\n    env = Environment.from_string(data.get('awsEnvironment'))\n    result = infra.get_kinesis_events(stream_name=streamName, shard_id=shardId, env=env)\n    return jsonify(result)\n\n\n@app.route('/lambda/<functionName>/code', methods=['POST'])\ndef get_lambda_code(functionName):\n    \"\"\" Get source code for Lambda function.\n        ---\n        operationId: 'getLambdaCode'\n        parameters:\n            - name: functionName\n              in: path\n            - name: request\n              in: body\n    \"\"\"\n    data = get_payload(request)\n    env = Environment.from_string(data.get('awsEnvironment'))\n    result = infra.get_lambda_code(func_name=functionName, env=env)\n    return jsonify(result)\n\n\n@app.route('/')\ndef hello():\n    return render_template('index.html')\n\n\n@app.route('/<path:path>')\ndef send_static(path):\n    return send_from_directory(web_dir + '/', path)\n\n\ndef get_payload(request):\n    return json.loads(common.to_str(request.data))\n\n\ndef ensure_webapp_installed():\n    web_dir = os.path.realpath(os.path.join(os.path.dirname(__file__), 'web'))\n    node_modules_dir = os.path.join(web_dir, 'node_modules', 'jquery')\n    if not os.path.exists(node_modules_dir):\n        print('Initializing installation of Web application (this could take long time, please be patient)')\n        common.run('cd \"%s\"; npm install' % web_dir)\n\n\ndef serve(port):\n    ensure_webapp_installed()\n    app.run(port=int(port), debug=True, threaded=True, host='0.0.0.0')\n", "description": "\ud83d\udcbb  A fully functional local AWS cloud stack. Develop and test your cloud apps offline!", "file_name": "api.py", "id": "07c276e5725f2c4c2c5c6e91096119e8", "language": "Python", "project_name": "localstack", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/localstack-localstack/localstack-localstack-865ec3a/localstack/dashboard/api.py", "save_time": "", "source": "", "update_at": "2018-03-14T00:04:55Z", "url": "https://github.com/localstack/localstack", "wiki": true}