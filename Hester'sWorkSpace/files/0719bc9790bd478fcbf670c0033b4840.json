{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    str_to_int,\n)\n\n\nclass PornoXOIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?pornoxo\\.com/videos/(?P<id>\\d+)/(?P<display_id>[^/]+)\\.html'\n    _TEST = {\n        'url': 'http://www.pornoxo.com/videos/7564/striptease-from-sexy-secretary.html',\n        'md5': '582f28ecbaa9e6e24cb90f50f524ce87',\n        'info_dict': {\n            'id': '7564',\n            'ext': 'flv',\n            'title': 'Striptease From Sexy Secretary!',\n            'display_id': 'striptease-from-sexy-secretary',\n            'description': 'md5:0ee35252b685b3883f4a1d38332f9980',\n            'categories': list,  \n            'thumbnail': r're:https?://.*\\.jpg$',\n            'age_limit': 18,\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.groups()\n\n        webpage = self._download_webpage(url, video_id)\n        video_data = self._extract_jwplayer_data(webpage, video_id, require_title=False)\n\n        title = self._html_search_regex(\n            r'<title>([^<]+)\\s*-\\s*PornoXO', webpage, 'title')\n\n        view_count = str_to_int(self._html_search_regex(\n            r'[vV]iews:\\s*([0-9,]+)', webpage, 'view count', fatal=False))\n\n        categories_str = self._html_search_regex(\n            r'<meta name=\"description\" content=\".*featuring\\s*([^\"]+)\"',\n            webpage, 'categories', fatal=False)\n        categories = (\n            None if categories_str is None\n            else categories_str.split(','))\n\n        video_data.update({\n            'id': video_id,\n            'title': title,\n            'display_id': display_id,\n            'description': self._html_search_meta('description', webpage),\n            'categories': categories,\n            'view_count': view_count,\n            'age_limit': 18,\n        })\n\n        return video_data\n", "comments": "# NSFW\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    str_to_int,\n)\n\n\nclass PornoXOIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?pornoxo\\.com/videos/(?P<id>\\d+)/(?P<display_id>[^/]+)\\.html'\n    _TEST = {\n        'url': 'http://www.pornoxo.com/videos/7564/striptease-from-sexy-secretary.html',\n        'md5': '582f28ecbaa9e6e24cb90f50f524ce87',\n        'info_dict': {\n            'id': '7564',\n            'ext': 'flv',\n            'title': 'Striptease From Sexy Secretary!',\n            'display_id': 'striptease-from-sexy-secretary',\n            'description': 'md5:0ee35252b685b3883f4a1d38332f9980',\n            'categories': list,  # NSFW\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'age_limit': 18,\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.groups()\n\n        webpage = self._download_webpage(url, video_id)\n        video_data = self._extract_jwplayer_data(webpage, video_id, require_title=False)\n\n        title = self._html_search_regex(\n            r'<title>([^<]+)\\s*-\\s*PornoXO', webpage, 'title')\n\n        view_count = str_to_int(self._html_search_regex(\n            r'[vV]iews:\\s*([0-9,]+)', webpage, 'view count', fatal=False))\n\n        categories_str = self._html_search_regex(\n            r'<meta name=\"description\" content=\".*featuring\\s*([^\"]+)\"',\n            webpage, 'categories', fatal=False)\n        categories = (\n            None if categories_str is None\n            else categories_str.split(','))\n\n        video_data.update({\n            'id': video_id,\n            'title': title,\n            'display_id': display_id,\n            'description': self._html_search_meta('description', webpage),\n            'categories': categories,\n            'view_count': view_count,\n            'age_limit': 18,\n        })\n\n        return video_data\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "pornoxo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/pornoxo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}