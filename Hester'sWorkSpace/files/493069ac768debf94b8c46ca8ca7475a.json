{"author": "django", "code": "from django.test import SimpleTestCase, override_settings\nfrom django.test.utils import require_jinja2\n\n\n@override_settings(ROOT_URLCONF='shortcuts.urls')\nclass RenderTests(SimpleTestCase):\n\n    def test_render(self):\n        response = self.client.get('/render/')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.content, b'FOO.BAR../render/\\n')\n        self.assertEqual(response['Content-Type'], 'text/html; charset=utf-8')\n        self.assertFalse(hasattr(response.context.request, 'current_app'))\n\n    def test_render_with_multiple_templates(self):\n        response = self.client.get('/render/multiple_templates/')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.content, b'FOO.BAR../render/multiple_templates/\\n')\n\n    def test_render_with_content_type(self):\n        response = self.client.get('/render/content_type/')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.content, b'FOO.BAR../render/content_type/\\n')\n        self.assertEqual(response['Content-Type'], 'application/x-rendertest')\n\n    def test_render_with_status(self):\n        response = self.client.get('/render/status/')\n        self.assertEqual(response.status_code, 403)\n        self.assertEqual(response.content, b'FOO.BAR../render/status/\\n')\n\n    @require_jinja2\n    def test_render_with_using(self):\n        response = self.client.get('/render/using/')\n        self.assertEqual(response.content, b'DTL\\n')\n        response = self.client.get('/render/using/?using=django')\n        self.assertEqual(response.content, b'DTL\\n')\n        response = self.client.get('/render/using/?using=jinja2')\n        self.assertEqual(response.content, b'Jinja2\\n')\n", "comments": "", "content": "from django.test import SimpleTestCase, override_settings\nfrom django.test.utils import require_jinja2\n\n\n@override_settings(ROOT_URLCONF='shortcuts.urls')\nclass RenderTests(SimpleTestCase):\n\n    def test_render(self):\n        response = self.client.get('/render/')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.content, b'FOO.BAR../render/\\n')\n        self.assertEqual(response['Content-Type'], 'text/html; charset=utf-8')\n        self.assertFalse(hasattr(response.context.request, 'current_app'))\n\n    def test_render_with_multiple_templates(self):\n        response = self.client.get('/render/multiple_templates/')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.content, b'FOO.BAR../render/multiple_templates/\\n')\n\n    def test_render_with_content_type(self):\n        response = self.client.get('/render/content_type/')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.content, b'FOO.BAR../render/content_type/\\n')\n        self.assertEqual(response['Content-Type'], 'application/x-rendertest')\n\n    def test_render_with_status(self):\n        response = self.client.get('/render/status/')\n        self.assertEqual(response.status_code, 403)\n        self.assertEqual(response.content, b'FOO.BAR../render/status/\\n')\n\n    @require_jinja2\n    def test_render_with_using(self):\n        response = self.client.get('/render/using/')\n        self.assertEqual(response.content, b'DTL\\n')\n        response = self.client.get('/render/using/?using=django')\n        self.assertEqual(response.content, b'DTL\\n')\n        response = self.client.get('/render/using/?using=jinja2')\n        self.assertEqual(response.content, b'Jinja2\\n')\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "493069ac768debf94b8c46ca8ca7475a", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/shortcuts/tests.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}