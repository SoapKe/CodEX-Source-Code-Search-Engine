{"author": "deepfakes", "code": "import argparse\nimport os\nimport sys\nimport operator\nimport numpy as np\nimport cv2\nfrom tqdm import tqdm\nimport face_recognition\n\nif sys.version_info[0] < 3:\n    raise Exception(\"This program requires at least python3.2\")\nif sys.version_info[0] == 3 and sys.version_info[1] < 2:\n    raise Exception(\"This program requires at least python3.2\")\n\nclass SortProcessor(object):\n\n    def __init__(self, parser):\n        self.init_parser_arguments(parser)\n        \n    def process_arguments(self, arguments):\n        self.arguments = arguments\n        self.process()\n\n    def init_parser_arguments(self, parser):\n        parser.add_argument('-i', '--input',\n                            dest=\"input_dir\",\n                            default=\"input_dir\",\n                            help=\"Input directory of aligned faces.\",\n                            required=True)\n                             \n        parser.add_argument('-by', '--by',\n                            type=str,\n                            choices=(\"blur\", \"hist\", \"face\"),\n                            dest='method',\n                            default=\"hist\",\n                            help=\"Sort by method.\")\n\n    def process(self):        \n        if self.arguments.method.lower() == 'blur':\n            self.process_blur()\n        elif self.arguments.method.lower() == 'hist':\n            self.process_hist()\n        elif self.arguments.method.lower() == 'face':\n            self.process_face()\n            \n    def process_blur(self):\n        input_dir = self.arguments.input_dir\n        \n        print (\"Sorting by blur...\")         \n        img_list = [ [x, self.estimate_blur(cv2.imread(x))] for x in tqdm(self.find_images(input_dir), desc=\"Loading\") ]\n        print (\"Sorting...\")    \n        img_list = sorted(img_list, key=operator.itemgetter(1), reverse=True) \n        self.process_final_rename(input_dir, img_list)        \n        print (\"Done.\")\n  \n    def process_hist(self):\n        input_dir = self.arguments.input_dir\n        \n        print (\"Sorting by histogram similarity...\")\n        \n        img_list = [ [x, cv2.calcHist([cv2.imread(x)], [0], None, [256], [0, 256]) ] for x in tqdm( self.find_images(input_dir), desc=\"Loading\") ]\n\n        img_list_len = len(img_list)\n        for i in tqdm ( range(0, img_list_len-1), desc=\"Sorting\"):\n            min_score = 9999.9\n            j_min_score = i+1\n            for j in range(i+1,len(img_list)):\n                score = cv2.compareHist(img_list[i][1], img_list[j][1], cv2.HISTCMP_BHATTACHARYYA)\n                if score < min_score:\n                    min_score = score\n                    j_min_score = j            \n            img_list[i+1], img_list[j_min_score] = img_list[j_min_score], img_list[i+1]\n            \n        self.process_final_rename (input_dir, img_list)\n                \n        print (\"Done.\")\n        \n    def process_face(self):\n        input_dir = self.arguments.input_dir\n        \n        print (\"Sorting by face similarity...\")\n        \n        img_list = [ [x, face_recognition.face_encodings(cv2.imread(x)) ] for x in tqdm( self.find_images(input_dir), desc=\"Loading\") ]\n\n        img_list_len = len(img_list)\n        for i in tqdm ( range(0, img_list_len-1), desc=\"Sorting\"):\n            min_score = 9999.9\n            j_min_score = i+1\n            for j in range(i+1,len(img_list)):\n            \n                f1encs = img_list[i][1]\n                f2encs = img_list[j][1]\n                if f1encs is not None and f2encs is not None and len(f1encs) > 0 and len(f2encs) > 0:\n                    score = face_recognition.face_distance(f1encs[0], f2encs)[0]\n                else: \n                    score = 9999.9\n                \n                if score < min_score:\n                    min_score = score\n                    j_min_score = j            \n            img_list[i+1], img_list[j_min_score] = img_list[j_min_score], img_list[i+1]\n            \n        self.process_final_rename (input_dir, img_list)\n                \n        print (\"Done.\")\n        \n    def process_final_rename(self, input_dir, img_list):\n        for i in tqdm( range(0,len(img_list)), desc=\"Renaming\" , leave=False):\n            src = img_list[i][0]\n            src_basename = os.path.basename(src)       \n\n            dst = os.path.join (input_dir, '%.5d_%s' % (i, src_basename ) )\n            try:\n                os.rename (src, dst)\n            except:\n                print ('fail to rename %s' % (src) )    \n                \n        for i in tqdm( range(0,len(img_list)) , desc=\"Renaming\" ):\n            src = img_list[i][0]\n            src_basename = os.path.basename(src)\n            \n            src = os.path.join (input_dir, '%.5d_%s' % (i, src_basename) )\n            dst = os.path.join (input_dir, '%.5d%s' % (i, os.path.splitext(src_basename)[1] ) )\n            try:\n                os.rename (src, dst)\n            except:\n                print ('fail to rename %s' % (src) )\n                \n    def find_images(self, input_dir):\n        result = []\n        extensions = [\".jpg\", \".png\", \".jpeg\"]\n        for root, dirs, files in os.walk(input_dir):\n            for file in files:\n                if os.path.splitext(file)[1].lower() in extensions:\n                    result.append (os.path.join(root, file))\n        return result\n\n    def estimate_blur(self, image):\n        if image.ndim == 3:\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n        blur_map = cv2.Laplacian(image, cv2.CV_64F)\n        score = np.var(blur_map)\n        return score\n        \n    def error(self, message):\n        self.print_help(sys.stderr)\n        args = {'prog': self.prog, 'message': message}\n        self.exit(2, '%(prog)s: error: %(message)s\\n' % args)    \n\ndef bad_args(args):\n    parser.print_help()\n    exit(0)\n\nif __name__ == \"__main__\":\n    print (\"Images sort tool.\\n\")\n    \n    parser = argparse.ArgumentParser()\n    parser.set_defaults(func=bad_args)\n    \n    sort = SortProcessor(parser)    \n    sort.process_arguments(parser.parse_args())", "comments": "", "content": "import argparse\nimport os\nimport sys\nimport operator\nimport numpy as np\nimport cv2\nfrom tqdm import tqdm\nimport face_recognition\n\nif sys.version_info[0] < 3:\n    raise Exception(\"This program requires at least python3.2\")\nif sys.version_info[0] == 3 and sys.version_info[1] < 2:\n    raise Exception(\"This program requires at least python3.2\")\n\nclass SortProcessor(object):\n\n    def __init__(self, parser):\n        self.init_parser_arguments(parser)\n        \n    def process_arguments(self, arguments):\n        self.arguments = arguments\n        self.process()\n\n    def init_parser_arguments(self, parser):\n        parser.add_argument('-i', '--input',\n                            dest=\"input_dir\",\n                            default=\"input_dir\",\n                            help=\"Input directory of aligned faces.\",\n                            required=True)\n                             \n        parser.add_argument('-by', '--by',\n                            type=str,\n                            choices=(\"blur\", \"hist\", \"face\"),\n                            dest='method',\n                            default=\"hist\",\n                            help=\"Sort by method.\")\n\n    def process(self):        \n        if self.arguments.method.lower() == 'blur':\n            self.process_blur()\n        elif self.arguments.method.lower() == 'hist':\n            self.process_hist()\n        elif self.arguments.method.lower() == 'face':\n            self.process_face()\n            \n    def process_blur(self):\n        input_dir = self.arguments.input_dir\n        \n        print (\"Sorting by blur...\")         \n        img_list = [ [x, self.estimate_blur(cv2.imread(x))] for x in tqdm(self.find_images(input_dir), desc=\"Loading\") ]\n        print (\"Sorting...\")    \n        img_list = sorted(img_list, key=operator.itemgetter(1), reverse=True) \n        self.process_final_rename(input_dir, img_list)        \n        print (\"Done.\")\n  \n    def process_hist(self):\n        input_dir = self.arguments.input_dir\n        \n        print (\"Sorting by histogram similarity...\")\n        \n        img_list = [ [x, cv2.calcHist([cv2.imread(x)], [0], None, [256], [0, 256]) ] for x in tqdm( self.find_images(input_dir), desc=\"Loading\") ]\n\n        img_list_len = len(img_list)\n        for i in tqdm ( range(0, img_list_len-1), desc=\"Sorting\"):\n            min_score = 9999.9\n            j_min_score = i+1\n            for j in range(i+1,len(img_list)):\n                score = cv2.compareHist(img_list[i][1], img_list[j][1], cv2.HISTCMP_BHATTACHARYYA)\n                if score < min_score:\n                    min_score = score\n                    j_min_score = j            \n            img_list[i+1], img_list[j_min_score] = img_list[j_min_score], img_list[i+1]\n            \n        self.process_final_rename (input_dir, img_list)\n                \n        print (\"Done.\")\n        \n    def process_face(self):\n        input_dir = self.arguments.input_dir\n        \n        print (\"Sorting by face similarity...\")\n        \n        img_list = [ [x, face_recognition.face_encodings(cv2.imread(x)) ] for x in tqdm( self.find_images(input_dir), desc=\"Loading\") ]\n\n        img_list_len = len(img_list)\n        for i in tqdm ( range(0, img_list_len-1), desc=\"Sorting\"):\n            min_score = 9999.9\n            j_min_score = i+1\n            for j in range(i+1,len(img_list)):\n            \n                f1encs = img_list[i][1]\n                f2encs = img_list[j][1]\n                if f1encs is not None and f2encs is not None and len(f1encs) > 0 and len(f2encs) > 0:\n                    score = face_recognition.face_distance(f1encs[0], f2encs)[0]\n                else: \n                    score = 9999.9\n                \n                if score < min_score:\n                    min_score = score\n                    j_min_score = j            \n            img_list[i+1], img_list[j_min_score] = img_list[j_min_score], img_list[i+1]\n            \n        self.process_final_rename (input_dir, img_list)\n                \n        print (\"Done.\")\n        \n    def process_final_rename(self, input_dir, img_list):\n        for i in tqdm( range(0,len(img_list)), desc=\"Renaming\" , leave=False):\n            src = img_list[i][0]\n            src_basename = os.path.basename(src)       \n\n            dst = os.path.join (input_dir, '%.5d_%s' % (i, src_basename ) )\n            try:\n                os.rename (src, dst)\n            except:\n                print ('fail to rename %s' % (src) )    \n                \n        for i in tqdm( range(0,len(img_list)) , desc=\"Renaming\" ):\n            src = img_list[i][0]\n            src_basename = os.path.basename(src)\n            \n            src = os.path.join (input_dir, '%.5d_%s' % (i, src_basename) )\n            dst = os.path.join (input_dir, '%.5d%s' % (i, os.path.splitext(src_basename)[1] ) )\n            try:\n                os.rename (src, dst)\n            except:\n                print ('fail to rename %s' % (src) )\n                \n    def find_images(self, input_dir):\n        result = []\n        extensions = [\".jpg\", \".png\", \".jpeg\"]\n        for root, dirs, files in os.walk(input_dir):\n            for file in files:\n                if os.path.splitext(file)[1].lower() in extensions:\n                    result.append (os.path.join(root, file))\n        return result\n\n    def estimate_blur(self, image):\n        if image.ndim == 3:\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n        blur_map = cv2.Laplacian(image, cv2.CV_64F)\n        score = np.var(blur_map)\n        return score\n        \n    def error(self, message):\n        self.print_help(sys.stderr)\n        args = {'prog': self.prog, 'message': message}\n        self.exit(2, '%(prog)s: error: %(message)s\\n' % args)    \n\ndef bad_args(args):\n    parser.print_help()\n    exit(0)\n\nif __name__ == \"__main__\":\n    print (\"Images sort tool.\\n\")\n    \n    parser = argparse.ArgumentParser()\n    parser.set_defaults(func=bad_args)\n    \n    sort = SortProcessor(parser)    \n    sort.process_arguments(parser.parse_args())", "description": "Non official project based on original /r/Deepfakes thread. Many thanks to him!", "file_name": "sort.py", "id": "87c1a93700b5c9ba04e39427fa315cc6", "language": "Python", "project_name": "faceswap", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/deepfakes-faceswap/deepfakes-faceswap-6ff64ef/tools/sort.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:27:43Z", "url": "https://github.com/deepfakes/faceswap", "wiki": true}