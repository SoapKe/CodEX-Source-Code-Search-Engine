{"author": "deepfakes", "code": "\n\nencoderH5 = 'encoder.h5'\ndecoder_AH5 = 'decoder_A.h5'\ndecoder_BH5 = 'decoder_B.h5'\n\nclass AutoEncoder:\n    def __init__(self, model_dir, gpus):\n        self.model_dir = model_dir\n        self.gpus = gpus\n\n        self.encoder = self.Encoder()\n        self.decoder_A = self.Decoder()\n        self.decoder_B = self.Decoder()\n\n        self.initModel()\n\n    def load(self, swapped):\n        (face_A,face_B) = (decoder_AH5, decoder_BH5) if not swapped else (decoder_BH5, decoder_AH5)\n\n        try:\n            self.encoder.load_weights(str(self.model_dir / encoderH5))\n            self.decoder_A.load_weights(str(self.model_dir / face_A))\n            self.decoder_B.load_weights(str(self.model_dir / face_B))\n            print('loaded model weights')\n            return True\n        except Exception as e:\n            print('Failed loading existing training data.')\n            print(e)\n            return False\n\n    def save_weights(self):\n        self.encoder.save_weights(str(self.model_dir / encoderH5))\n        self.decoder_A.save_weights(str(self.model_dir / decoder_AH5))\n        self.decoder_B.save_weights(str(self.model_dir / decoder_BH5))\n        print('saved model weights')\n", "comments": "  autoencoder base classes ", "content": "# AutoEncoder base classes\n\nencoderH5 = 'encoder.h5'\ndecoder_AH5 = 'decoder_A.h5'\ndecoder_BH5 = 'decoder_B.h5'\n\nclass AutoEncoder:\n    def __init__(self, model_dir, gpus):\n        self.model_dir = model_dir\n        self.gpus = gpus\n\n        self.encoder = self.Encoder()\n        self.decoder_A = self.Decoder()\n        self.decoder_B = self.Decoder()\n\n        self.initModel()\n\n    def load(self, swapped):\n        (face_A,face_B) = (decoder_AH5, decoder_BH5) if not swapped else (decoder_BH5, decoder_AH5)\n\n        try:\n            self.encoder.load_weights(str(self.model_dir / encoderH5))\n            self.decoder_A.load_weights(str(self.model_dir / face_A))\n            self.decoder_B.load_weights(str(self.model_dir / face_B))\n            print('loaded model weights')\n            return True\n        except Exception as e:\n            print('Failed loading existing training data.')\n            print(e)\n            return False\n\n    def save_weights(self):\n        self.encoder.save_weights(str(self.model_dir / encoderH5))\n        self.decoder_A.save_weights(str(self.model_dir / decoder_AH5))\n        self.decoder_B.save_weights(str(self.model_dir / decoder_BH5))\n        print('saved model weights')\n", "description": "Non official project based on original /r/Deepfakes thread. Many thanks to him!", "file_name": "AutoEncoder.py", "id": "b7298e162a01456522b865810060db24", "language": "Python", "project_name": "faceswap", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/deepfakes-faceswap/deepfakes-faceswap-6ff64ef/plugins/Model_Original/AutoEncoder.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:27:43Z", "url": "https://github.com/deepfakes/faceswap", "wiki": true}