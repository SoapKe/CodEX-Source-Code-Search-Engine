{"author": "sympy", "code": "import warnings\nfrom sympy import (plot_implicit, cos, Symbol, symbols, Eq, sin, re, And, Or, exp, I,\n                   tan, pi)\nfrom sympy.plotting.plot import unset_show\nfrom tempfile import NamedTemporaryFile\nfrom sympy.utilities.pytest import skip\nfrom sympy.external import import_module\n\n\nunset_show()\n\ndef tmp_file(name=''):\n    return NamedTemporaryFile(suffix='.png').name\n\ndef plot_and_save(expr, *args, **kwargs):\n    name = kwargs.pop('name', '')\n    p = plot_implicit(expr, *args, **kwargs)\n    p.save(tmp_file(name))\n    \n    p._backend.close()\n\ndef plot_implicit_tests(name):\n    x = Symbol('x')\n    y = Symbol('y')\n    z = Symbol('z')\n    \n    plot_and_save(Eq(y, cos(x)), (x, -5, 5), (y, -2, 2), name=name)\n    plot_and_save(Eq(y**2, x**3 - x), (x, -5, 5),\n            (y, -4, 4), name=name)\n    plot_and_save(y > 1 / x, (x, -5, 5),\n            (y, -2, 2), name=name)\n    plot_and_save(y < 1 / tan(x), (x, -5, 5),\n            (y, -2, 2), name=name)\n    plot_and_save(y >= 2 * sin(x) * cos(x), (x, -5, 5),\n            (y, -2, 2), name=name)\n    plot_and_save(y <= x**2, (x, -3, 3),\n            (y, -1, 5), name=name)\n\n    \n    plot_and_save(Eq(y**2, x**3 - x))\n    plot_and_save(Eq(y**2, x**3 - x), adaptive=False)\n    plot_and_save(Eq(y**2, x**3 - x), adaptive=False, points=500)\n    plot_and_save(y > x, (x, -5, 5))\n    plot_and_save(And(y > exp(x), y > x + 2))\n    plot_and_save(Or(y > x, y > -x))\n    plot_and_save(x**2 - 1, (x, -5, 5))\n    plot_and_save(x**2 - 1)\n    plot_and_save(y > x, depth=-5)\n    plot_and_save(y > x, depth=5)\n    plot_and_save(y > cos(x), adaptive=False)\n    plot_and_save(y < cos(x), adaptive=False)\n    plot_and_save(And(y > cos(x), Or(y > x, Eq(y, x))))\n    plot_and_save(y - cos(pi / x))\n\n    \n    with warnings.catch_warnings(record=True) as w:\n        plot_and_save(Eq(y, re(cos(x) + I*sin(x))), name=name)\n        for i in w: \n            assert issubclass(i.category, UserWarning)\n            assert \"Adaptive meshing could not be applied\" in str(i.message)\n\n    with warnings.catch_warnings(record=True) as w:\n        plot_and_save(x**2 - 1, legend='An implicit plot')\n        for i in w:\n            assert issubclass(i.category, UserWarning)\n            assert 'No labelled objects found' in str(i.message)\n\ndef test_line_color():\n    x, y = symbols('x, y')\n    p = plot_implicit(x**2 + y**2 - 1, line_color=\"green\", show=False)\n    assert p._series[0].line_color == \"green\"\n    p = plot_implicit(x**2 + y**2 - 1, line_color='r', show=False)\n    assert p._series[0].line_color == \"r\"\n\ndef test_matplotlib():\n    matplotlib = import_module('matplotlib', min_module_version='1.1.0', catch=(RuntimeError,))\n    if matplotlib:\n        plot_implicit_tests('test')\n        test_line_color()\n    else:\n        skip(\"Matplotlib not the default backend\")\n", "comments": " set plots show    close plot avoid warning matplotlib   implicit plot tests   test input args plot implicit   test plots cannot rendered using adaptive algorithm    same warning may issued multiple times ", "content": "import warnings\nfrom sympy import (plot_implicit, cos, Symbol, symbols, Eq, sin, re, And, Or, exp, I,\n                   tan, pi)\nfrom sympy.plotting.plot import unset_show\nfrom tempfile import NamedTemporaryFile\nfrom sympy.utilities.pytest import skip\nfrom sympy.external import import_module\n\n#Set plots not to show\nunset_show()\n\ndef tmp_file(name=''):\n    return NamedTemporaryFile(suffix='.png').name\n\ndef plot_and_save(expr, *args, **kwargs):\n    name = kwargs.pop('name', '')\n    p = plot_implicit(expr, *args, **kwargs)\n    p.save(tmp_file(name))\n    # Close the plot to avoid a warning from matplotlib\n    p._backend.close()\n\ndef plot_implicit_tests(name):\n    x = Symbol('x')\n    y = Symbol('y')\n    z = Symbol('z')\n    #implicit plot tests\n    plot_and_save(Eq(y, cos(x)), (x, -5, 5), (y, -2, 2), name=name)\n    plot_and_save(Eq(y**2, x**3 - x), (x, -5, 5),\n            (y, -4, 4), name=name)\n    plot_and_save(y > 1 / x, (x, -5, 5),\n            (y, -2, 2), name=name)\n    plot_and_save(y < 1 / tan(x), (x, -5, 5),\n            (y, -2, 2), name=name)\n    plot_and_save(y >= 2 * sin(x) * cos(x), (x, -5, 5),\n            (y, -2, 2), name=name)\n    plot_and_save(y <= x**2, (x, -3, 3),\n            (y, -1, 5), name=name)\n\n    #Test all input args for plot_implicit\n    plot_and_save(Eq(y**2, x**3 - x))\n    plot_and_save(Eq(y**2, x**3 - x), adaptive=False)\n    plot_and_save(Eq(y**2, x**3 - x), adaptive=False, points=500)\n    plot_and_save(y > x, (x, -5, 5))\n    plot_and_save(And(y > exp(x), y > x + 2))\n    plot_and_save(Or(y > x, y > -x))\n    plot_and_save(x**2 - 1, (x, -5, 5))\n    plot_and_save(x**2 - 1)\n    plot_and_save(y > x, depth=-5)\n    plot_and_save(y > x, depth=5)\n    plot_and_save(y > cos(x), adaptive=False)\n    plot_and_save(y < cos(x), adaptive=False)\n    plot_and_save(And(y > cos(x), Or(y > x, Eq(y, x))))\n    plot_and_save(y - cos(pi / x))\n\n    #Test plots which cannot be rendered using the adaptive algorithm\n    with warnings.catch_warnings(record=True) as w:\n        plot_and_save(Eq(y, re(cos(x) + I*sin(x))), name=name)\n        for i in w: # Same warning may be issued multiple times\n            assert issubclass(i.category, UserWarning)\n            assert \"Adaptive meshing could not be applied\" in str(i.message)\n\n    with warnings.catch_warnings(record=True) as w:\n        plot_and_save(x**2 - 1, legend='An implicit plot')\n        for i in w:\n            assert issubclass(i.category, UserWarning)\n            assert 'No labelled objects found' in str(i.message)\n\ndef test_line_color():\n    x, y = symbols('x, y')\n    p = plot_implicit(x**2 + y**2 - 1, line_color=\"green\", show=False)\n    assert p._series[0].line_color == \"green\"\n    p = plot_implicit(x**2 + y**2 - 1, line_color='r', show=False)\n    assert p._series[0].line_color == \"r\"\n\ndef test_matplotlib():\n    matplotlib = import_module('matplotlib', min_module_version='1.1.0', catch=(RuntimeError,))\n    if matplotlib:\n        plot_implicit_tests('test')\n        test_line_color()\n    else:\n        skip(\"Matplotlib not the default backend\")\n", "description": "A computer algebra system written in pure Python", "file_name": "test_plot_implicit.py", "id": "ba7fdb6a0af250433383a4398ffe6785", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/plotting/tests/test_plot_implicit.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}