{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipa_hostgroup\nauthor: Thomas Krahn (@Nosmoht)\nshort_description: Manage FreeIPA host-group\ndescription:\n- Add, modify and delete an IPA host-group using IPA API\noptions:\n  cn:\n    description:\n    - Name of host-group.\n    - Can not be changed as it is the unique identifier.\n    required: true\n    aliases: [\"name\"]\n  description:\n    description:\n    - Description\n  host:\n    description:\n    - List of hosts that belong to the host-group.\n    - If an empty list is passed all hosts will be removed from the group.\n    - If option is omitted hosts will not be checked or changed.\n    - If option is passed all assigned hosts that are not passed will be unassigned from the group.\n  hostgroup:\n    description:\n    - List of host-groups than belong to that host-group.\n    - If an empty list is passed all host-groups will be removed from the group.\n    - If option is omitted host-groups will not be checked or changed.\n    - If option is passed all assigned hostgroups that are not passed will be unassigned from the group.\n  state:\n    description:\n    - State to ensure.\n    default: \"present\"\n    choices: [\"present\", \"absent\"]\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.3\"\n'''\n\nEXAMPLES = '''\n\n- ipa_hostgroup:\n    name: databases\n    state: present\n    host:\n    - db.example.com\n    hostgroup:\n    - mysql-server\n    - oracle-server\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n\n- ipa_hostgroup:\n    name: databases\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n'''\n\nRETURN = '''\nhostgroup:\n  description: Hostgroup as returned by IPA API.\n  returned: always\n  type: dict\n'''\n\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass HostGroupIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(HostGroupIPAClient, self).__init__(module, host, port, protocol)\n\n    def hostgroup_find(self, name):\n        return self._post_json(method='hostgroup_find', name=None, item={'all': True, 'cn': name})\n\n    def hostgroup_add(self, name, item):\n        return self._post_json(method='hostgroup_add', name=name, item=item)\n\n    def hostgroup_mod(self, name, item):\n        return self._post_json(method='hostgroup_mod', name=name, item=item)\n\n    def hostgroup_del(self, name):\n        return self._post_json(method='hostgroup_del', name=name)\n\n    def hostgroup_add_member(self, name, item):\n        return self._post_json(method='hostgroup_add_member', name=name, item=item)\n\n    def hostgroup_add_host(self, name, item):\n        return self.hostgroup_add_member(name=name, item={'host': item})\n\n    def hostgroup_add_hostgroup(self, name, item):\n        return self.hostgroup_add_member(name=name, item={'hostgroup': item})\n\n    def hostgroup_remove_member(self, name, item):\n        return self._post_json(method='hostgroup_remove_member', name=name, item=item)\n\n    def hostgroup_remove_host(self, name, item):\n        return self.hostgroup_remove_member(name=name, item={'host': item})\n\n    def hostgroup_remove_hostgroup(self, name, item):\n        return self.hostgroup_remove_member(name=name, item={'hostgroup': item})\n\n\ndef get_hostgroup_dict(description=None):\n    data = {}\n    if description is not None:\n        data['description'] = description\n    return data\n\n\ndef get_hostgroup_diff(client, ipa_hostgroup, module_hostgroup):\n    return client.get_diff(ipa_data=ipa_hostgroup, module_data=module_hostgroup)\n\n\ndef ensure(module, client):\n    name = module.params['cn']\n    state = module.params['state']\n    host = module.params['host']\n    hostgroup = module.params['hostgroup']\n\n    ipa_hostgroup = client.hostgroup_find(name=name)\n    module_hostgroup = get_hostgroup_dict(description=module.params['description'])\n\n    changed = False\n    if state == 'present':\n        if not ipa_hostgroup:\n            changed = True\n            if not module.check_mode:\n                ipa_hostgroup = client.hostgroup_add(name=name, item=module_hostgroup)\n        else:\n            diff = get_hostgroup_diff(client, ipa_hostgroup, module_hostgroup)\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    data = {}\n                    for key in diff:\n                        data[key] = module_hostgroup.get(key)\n                    client.hostgroup_mod(name=name, item=data)\n\n        if host is not None:\n            changed = client.modify_if_diff(name, ipa_hostgroup.get('member_host', []), [item.lower() for item in host],\n                                            client.hostgroup_add_host, client.hostgroup_remove_host) or changed\n\n        if hostgroup is not None:\n            changed = client.modify_if_diff(name, ipa_hostgroup.get('member_hostgroup', []),\n                                            [item.lower() for item in hostgroup],\n                                            client.hostgroup_add_hostgroup,\n                                            client.hostgroup_remove_hostgroup) or changed\n\n    else:\n        if ipa_hostgroup:\n            changed = True\n            if not module.check_mode:\n                client.hostgroup_del(name=name)\n\n    return changed, client.hostgroup_find(name=name)\n\n\ndef main():\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(cn=dict(type='str', required=True, aliases=['name']),\n                         description=dict(type='str'),\n                         host=dict(type='list'),\n                         hostgroup=dict(type='list'),\n                         state=dict(type='str', default='present', choices=['present', 'absent', 'enabled', 'disabled']))\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True)\n\n    client = HostGroupIPAClient(module=module,\n                                host=module.params['ipa_host'],\n                                port=module.params['ipa_port'],\n                                protocol=module.params['ipa_prot'])\n\n    try:\n        client.login(username=module.params['ipa_user'],\n                     password=module.params['ipa_pass'])\n        changed, hostgroup = ensure(module, client)\n        module.exit_json(changed=changed, hostgroup=hostgroup)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  ipa hostgroup author  thomas krahn ( nosmoht) short description  manage freeipa host group description    add  modify delete ipa host group using ipa api options    cn      description        name host group        can changed unique identifier      required  true     aliases    name     description      description        description   host      description        list hosts belong host group        if empty list passed hosts removed group        if option omitted hosts checked changed        if option passed assigned hosts passed unassigned group    hostgroup      description        list host groups belong host group        if empty list passed host groups removed group        if option omitted host groups checked changed        if option passed assigned hostgroups passed unassigned group    state      description        state ensure      default   present      choices    present    absent   extends documentation fragment  ipa documentation version added   2 3       examples         ensure host group databases present   ipa hostgroup      name  databases     state  present     host        db example com     hostgroup        mysql server       oracle server     ipa host  ipa example com     ipa user  admin     ipa pass  topsecret    ensure host group databases absent   ipa hostgroup      name  databases     state  absent     ipa host  ipa example com     ipa user  admin     ipa pass  topsecret      return       hostgroup    description  hostgroup returned ipa api    returned  always   type  dict         usr bin python        coding  utf 8        copyright  (c) 2017  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    ensure host group databases present    ensure host group databases absent ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipa_hostgroup\nauthor: Thomas Krahn (@Nosmoht)\nshort_description: Manage FreeIPA host-group\ndescription:\n- Add, modify and delete an IPA host-group using IPA API\noptions:\n  cn:\n    description:\n    - Name of host-group.\n    - Can not be changed as it is the unique identifier.\n    required: true\n    aliases: [\"name\"]\n  description:\n    description:\n    - Description\n  host:\n    description:\n    - List of hosts that belong to the host-group.\n    - If an empty list is passed all hosts will be removed from the group.\n    - If option is omitted hosts will not be checked or changed.\n    - If option is passed all assigned hosts that are not passed will be unassigned from the group.\n  hostgroup:\n    description:\n    - List of host-groups than belong to that host-group.\n    - If an empty list is passed all host-groups will be removed from the group.\n    - If option is omitted host-groups will not be checked or changed.\n    - If option is passed all assigned hostgroups that are not passed will be unassigned from the group.\n  state:\n    description:\n    - State to ensure.\n    default: \"present\"\n    choices: [\"present\", \"absent\"]\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.3\"\n'''\n\nEXAMPLES = '''\n# Ensure host-group databases is present\n- ipa_hostgroup:\n    name: databases\n    state: present\n    host:\n    - db.example.com\n    hostgroup:\n    - mysql-server\n    - oracle-server\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n# Ensure host-group databases is absent\n- ipa_hostgroup:\n    name: databases\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n'''\n\nRETURN = '''\nhostgroup:\n  description: Hostgroup as returned by IPA API.\n  returned: always\n  type: dict\n'''\n\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass HostGroupIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(HostGroupIPAClient, self).__init__(module, host, port, protocol)\n\n    def hostgroup_find(self, name):\n        return self._post_json(method='hostgroup_find', name=None, item={'all': True, 'cn': name})\n\n    def hostgroup_add(self, name, item):\n        return self._post_json(method='hostgroup_add', name=name, item=item)\n\n    def hostgroup_mod(self, name, item):\n        return self._post_json(method='hostgroup_mod', name=name, item=item)\n\n    def hostgroup_del(self, name):\n        return self._post_json(method='hostgroup_del', name=name)\n\n    def hostgroup_add_member(self, name, item):\n        return self._post_json(method='hostgroup_add_member', name=name, item=item)\n\n    def hostgroup_add_host(self, name, item):\n        return self.hostgroup_add_member(name=name, item={'host': item})\n\n    def hostgroup_add_hostgroup(self, name, item):\n        return self.hostgroup_add_member(name=name, item={'hostgroup': item})\n\n    def hostgroup_remove_member(self, name, item):\n        return self._post_json(method='hostgroup_remove_member', name=name, item=item)\n\n    def hostgroup_remove_host(self, name, item):\n        return self.hostgroup_remove_member(name=name, item={'host': item})\n\n    def hostgroup_remove_hostgroup(self, name, item):\n        return self.hostgroup_remove_member(name=name, item={'hostgroup': item})\n\n\ndef get_hostgroup_dict(description=None):\n    data = {}\n    if description is not None:\n        data['description'] = description\n    return data\n\n\ndef get_hostgroup_diff(client, ipa_hostgroup, module_hostgroup):\n    return client.get_diff(ipa_data=ipa_hostgroup, module_data=module_hostgroup)\n\n\ndef ensure(module, client):\n    name = module.params['cn']\n    state = module.params['state']\n    host = module.params['host']\n    hostgroup = module.params['hostgroup']\n\n    ipa_hostgroup = client.hostgroup_find(name=name)\n    module_hostgroup = get_hostgroup_dict(description=module.params['description'])\n\n    changed = False\n    if state == 'present':\n        if not ipa_hostgroup:\n            changed = True\n            if not module.check_mode:\n                ipa_hostgroup = client.hostgroup_add(name=name, item=module_hostgroup)\n        else:\n            diff = get_hostgroup_diff(client, ipa_hostgroup, module_hostgroup)\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    data = {}\n                    for key in diff:\n                        data[key] = module_hostgroup.get(key)\n                    client.hostgroup_mod(name=name, item=data)\n\n        if host is not None:\n            changed = client.modify_if_diff(name, ipa_hostgroup.get('member_host', []), [item.lower() for item in host],\n                                            client.hostgroup_add_host, client.hostgroup_remove_host) or changed\n\n        if hostgroup is not None:\n            changed = client.modify_if_diff(name, ipa_hostgroup.get('member_hostgroup', []),\n                                            [item.lower() for item in hostgroup],\n                                            client.hostgroup_add_hostgroup,\n                                            client.hostgroup_remove_hostgroup) or changed\n\n    else:\n        if ipa_hostgroup:\n            changed = True\n            if not module.check_mode:\n                client.hostgroup_del(name=name)\n\n    return changed, client.hostgroup_find(name=name)\n\n\ndef main():\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(cn=dict(type='str', required=True, aliases=['name']),\n                         description=dict(type='str'),\n                         host=dict(type='list'),\n                         hostgroup=dict(type='list'),\n                         state=dict(type='str', default='present', choices=['present', 'absent', 'enabled', 'disabled']))\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True)\n\n    client = HostGroupIPAClient(module=module,\n                                host=module.params['ipa_host'],\n                                port=module.params['ipa_port'],\n                                protocol=module.params['ipa_prot'])\n\n    try:\n        client.login(username=module.params['ipa_user'],\n                     password=module.params['ipa_pass'])\n        changed, hostgroup = ensure(module, client)\n        module.exit_json(changed=changed, hostgroup=hostgroup)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "ipa_hostgroup.py", "id": "9399af63c3f2c109ae1dde47862d862b", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/identity/ipa/ipa_hostgroup.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}