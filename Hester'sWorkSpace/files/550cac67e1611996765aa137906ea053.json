{"author": "faif", "code": "\n# -*- coding : utf-8 -*-\nimport datetime\n\n\"\"\"\nPort of the Java example of \"Parameter Injection\" in\n\"xUnit Test Patterns - Refactoring Test Code\" by Gerard Meszaros\n(ISBN-10: 0131495054, ISBN-13: 978-0131495050) accessible in outdated version on\nhttp://xunitpatterns.com/Dependency%20Injection.html.\n\nproduction code which is untestable:\n\nclass TimeDisplay(object):\n\n    def __init__(self):\n        self.time_provider = datetime.datetime\n\n    def get_current_time_as_html_fragment(self):\n        current_time = self.time_provider.now()\n        current_time_as_html_fragment = \"<span class=\\\"tinyBoldText\\\">{}</span>\".format(current_time)\n        return current_time_as_html_fragment\n\"\"\"\n\nclass TimeDisplay(object):\n\n    def __init__(self):\n        pass\n\n    def get_current_time_as_html_fragment(self, time_provider):\n        current_time = time_provider.now()\n        current_time_as_html_fragment = \"<span class=\\\"tinyBoldText\\\">{}</span>\".format(current_time)\n        return current_time_as_html_fragment\n\nclass ProductionCodeTimeProvider(object):\n    \"\"\"\n    Production code version of the time provider (just a wrapper for formatting\n    datetime for this example).\n    \"\"\"\n\n    def now(self):\n        current_time = datetime.datetime.now()\n        current_time_formatted = \"{}:{}\".format(current_time.hour, current_time.minute)\n        return current_time_formatted\n\nclass MidnightTimeProvider(object):\n    \"\"\"\n    Class implemented as hard-coded stub (in contrast to configurable stub).\n    \"\"\"\n\n    def now(self):\n        current_time_is_always_midnight = \"24:01\"\n        return current_time_is_always_midnight\n", "comments": "    port java example  parameter injection   xunit test patterns   refactoring test code  gerard meszaros (isbn 10  0131495054  isbn 13  978 0131495050) accessible outdated version http   xunitpatterns com dependency 20injection html   production code untestable   class timedisplay(object)       def   init  (self)          self time provider   datetime datetime      def get current time html fragment(self)          current time   self time provider now()         current time html fragment     span class   tinyboldtext       span   format(current time)         return current time html fragment      class timedisplay(object)       def   init  (self)          pass      def get current time html fragment(self  time provider)          current time   time provider now()         current time html fragment     span class   tinyboldtext       span   format(current time)         return current time html fragment  class productioncodetimeprovider(object)              production code version time provider (just wrapper formatting     datetime example)               def now(self)          current time   datetime datetime now()         current time formatted           format(current time hour  current time minute)         return current time formatted  class midnighttimeprovider(object)              class implemented hard coded stub (in contrast configurable stub)              usr bin python        coding   utf 8     ", "content": "#!/usr/bin/python\n# -*- coding : utf-8 -*-\nimport datetime\n\n\"\"\"\nPort of the Java example of \"Parameter Injection\" in\n\"xUnit Test Patterns - Refactoring Test Code\" by Gerard Meszaros\n(ISBN-10: 0131495054, ISBN-13: 978-0131495050) accessible in outdated version on\nhttp://xunitpatterns.com/Dependency%20Injection.html.\n\nproduction code which is untestable:\n\nclass TimeDisplay(object):\n\n    def __init__(self):\n        self.time_provider = datetime.datetime\n\n    def get_current_time_as_html_fragment(self):\n        current_time = self.time_provider.now()\n        current_time_as_html_fragment = \"<span class=\\\"tinyBoldText\\\">{}</span>\".format(current_time)\n        return current_time_as_html_fragment\n\"\"\"\n\nclass TimeDisplay(object):\n\n    def __init__(self):\n        pass\n\n    def get_current_time_as_html_fragment(self, time_provider):\n        current_time = time_provider.now()\n        current_time_as_html_fragment = \"<span class=\\\"tinyBoldText\\\">{}</span>\".format(current_time)\n        return current_time_as_html_fragment\n\nclass ProductionCodeTimeProvider(object):\n    \"\"\"\n    Production code version of the time provider (just a wrapper for formatting\n    datetime for this example).\n    \"\"\"\n\n    def now(self):\n        current_time = datetime.datetime.now()\n        current_time_formatted = \"{}:{}\".format(current_time.hour, current_time.minute)\n        return current_time_formatted\n\nclass MidnightTimeProvider(object):\n    \"\"\"\n    Class implemented as hard-coded stub (in contrast to configurable stub).\n    \"\"\"\n\n    def now(self):\n        current_time_is_always_midnight = \"24:01\"\n        return current_time_is_always_midnight\n", "description": "A collection of design patterns/idioms in Python", "file_name": "parameter_injection.py", "id": "550cac67e1611996765aa137906ea053", "language": "Python", "project_name": "python-patterns", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/faif-python-patterns/faif-python-patterns-e9a08d0/dft/parameter_injection.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:55:31Z", "url": "https://github.com/faif/python-patterns", "wiki": true}