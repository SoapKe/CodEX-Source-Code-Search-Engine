{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import models, api, fields\nfrom odoo.tools.translate import _\n\n\nclass SaleOrder(models.Model):\n    _inherit = 'sale.order'\n\n    warning_stock = fields.Char('Warning')\n\n    def _cart_update(self, product_id=None, line_id=None, add_qty=0, set_qty=0, **kwargs):\n        values = super(SaleOrder, self)._cart_update(product_id, line_id, add_qty, set_qty, **kwargs)\n        line_id = values.get('line_id')\n\n        for line in self.order_line:\n            if line.product_id.type == 'product' and line.product_id.inventory_availability in ['always', 'threshold']:\n                cart_qty = sum(self.order_line.filtered(lambda p: p.product_id.id == line.product_id.id).mapped('product_uom_qty'))\n                if cart_qty > line.product_id.virtual_available and (line_id == line.id):\n                    qty = line.product_id.virtual_available - cart_qty\n                    new_val = super(SaleOrder, self)._cart_update(line.product_id.id, line.id, qty, 0, **kwargs)\n                    values.update(new_val)\n\n                    # Make sure line still exists, it may have been deleted in super()_cartupdate because qty can be <= 0\n                    if line.exists() and new_val['quantity']:\n                        line.warning_stock = _('You ask for %s products but only %s is available') % (cart_qty, new_val['quantity'])\n                        values['warning'] = line.warning_stock\n                    else:\n                        self.warning_stock = _(\"Some products became unavailable and your cart has been updated. We're sorry for the inconvenience.\")\n                        values['warning'] = self.warning_stock\n        return values\n\n    @api.multi\n    def _get_stock_warning(self, clear=True):\n        self.ensure_one()\n        warn = self.warning_stock\n        if clear:\n            self.warning_stock = ''\n        return warn\n\n\nclass SaleOrderLine(models.Model):\n    _inherit = 'sale.order.line'\n\n    warning_stock = fields.Char('Warning')\n\n    @api.multi\n    def _get_stock_warning(self, clear=True):\n        self.ensure_one()\n        warn = self.warning_stock\n        if clear:\n            self.warning_stock = ''\n        return warn\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     make sure line still exists  may deleted super() cartupdate qty    0 ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import models, api, fields\nfrom odoo.tools.translate import _\n\n\nclass SaleOrder(models.Model):\n    _inherit = 'sale.order'\n\n    warning_stock = fields.Char('Warning')\n\n    def _cart_update(self, product_id=None, line_id=None, add_qty=0, set_qty=0, **kwargs):\n        values = super(SaleOrder, self)._cart_update(product_id, line_id, add_qty, set_qty, **kwargs)\n        line_id = values.get('line_id')\n\n        for line in self.order_line:\n            if line.product_id.type == 'product' and line.product_id.inventory_availability in ['always', 'threshold']:\n                cart_qty = sum(self.order_line.filtered(lambda p: p.product_id.id == line.product_id.id).mapped('product_uom_qty'))\n                if cart_qty > line.product_id.virtual_available and (line_id == line.id):\n                    qty = line.product_id.virtual_available - cart_qty\n                    new_val = super(SaleOrder, self)._cart_update(line.product_id.id, line.id, qty, 0, **kwargs)\n                    values.update(new_val)\n\n                    # Make sure line still exists, it may have been deleted in super()_cartupdate because qty can be <= 0\n                    if line.exists() and new_val['quantity']:\n                        line.warning_stock = _('You ask for %s products but only %s is available') % (cart_qty, new_val['quantity'])\n                        values['warning'] = line.warning_stock\n                    else:\n                        self.warning_stock = _(\"Some products became unavailable and your cart has been updated. We're sorry for the inconvenience.\")\n                        values['warning'] = self.warning_stock\n        return values\n\n    @api.multi\n    def _get_stock_warning(self, clear=True):\n        self.ensure_one()\n        warn = self.warning_stock\n        if clear:\n            self.warning_stock = ''\n        return warn\n\n\nclass SaleOrderLine(models.Model):\n    _inherit = 'sale.order.line'\n\n    warning_stock = fields.Char('Warning')\n\n    @api.multi\n    def _get_stock_warning(self, clear=True):\n        self.ensure_one()\n        warn = self.warning_stock\n        if clear:\n            self.warning_stock = ''\n        return warn\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "sale_order.py", "id": "24ae26b3fb4b9e0e7c320d34cfda8ccb", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_sale_stock/models/sale_order.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}