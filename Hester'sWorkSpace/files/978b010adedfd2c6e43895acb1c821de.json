{"author": "python-pillow", "code": "\n\n\nfrom __future__ import print_function\nfrom multiprocessing import Pool, cpu_count\nfrom distutils.ccompiler import CCompiler\nimport os\nimport sys\n\ntry:\n    MAX_PROCS = int(os.environ.get('MAX_CONCURRENCY', min(4, cpu_count())))\nexcept NotImplementedError:\n    MAX_PROCS = None\n\n\n\ndef _mp_compile_one(tp):\n    (self, obj, build, cc_args, extra_postargs, pp_opts) = tp\n    try:\n        src, ext = build[obj]\n    except KeyError:\n        return\n    self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts)\n    return\n\n\ndef _mp_compile(self, sources, output_dir=None, macros=None,\n                include_dirs=None, debug=0, extra_preargs=None,\n                extra_postargs=None, depends=None):\n    \n    \n    ).\n\n    macros, objects, extra_postargs, pp_opts, build = self._setup_compile(\n        output_dir, macros, include_dirs, sources, depends, extra_postargs)\n    cc_args = self._get_cc_args(pp_opts, debug, extra_preargs)\n\n    pool = Pool(MAX_PROCS)\n    try:\n        print(\"Building using %d processes\" % pool._processes)\n    except:\n        pass\n    arr = [(self, obj, build, cc_args, extra_postargs, pp_opts)\n           for obj in objects]\n    pool.map_async(_mp_compile_one, arr)\n    pool.close()\n    pool.join()\n    # Return *all* object filenames, not just the ones we just built.\n    return objects\n\n\ndef install():\n\n    fl_win = sys.platform.startswith('win')\n    fl_cygwin = sys.platform.startswith('cygwin')\n\n    if fl_win or fl_cygwin:\n        \n        print(\"Single threaded build for Windows\")\n        return\n\n    if MAX_PROCS != 1:\n        \n        try:\n            \n            \n            Pool(2)\n            CCompiler.compile = _mp_compile\n        except Exception as msg:\n            print(\"Exception installing mp_compile, proceeding without:\"\n                  \"%s\" % msg)\n    else:\n        print(\"Single threaded build, not installing mp_compile:\"\n              \"%s processes\" % MAX_PROCS)\n\n\ninstall()\n", "comments": "   compile one source files       see distutils ccompiler ccompiler compile comments             a monkey patch base distutils ccompiler use parallel builds    tested 2 7  looks identical 3 3     hideous monkeypatching         a concrete compiler class either override method    entirely implement  compile()     return   object filenames  ones built     windows barfs multiprocessing installs    explicitly enable environment says 1 processor    bug  enable make pool  see issue  790    https   stackoverflow com questions 6033599 oserror 38 errno 38 multiprocessing ", "content": "# A monkey patch of the base distutils.ccompiler to use parallel builds\n# Tested on 2.7, looks to be identical to 3.3.\n\nfrom __future__ import print_function\nfrom multiprocessing import Pool, cpu_count\nfrom distutils.ccompiler import CCompiler\nimport os\nimport sys\n\ntry:\n    MAX_PROCS = int(os.environ.get('MAX_CONCURRENCY', min(4, cpu_count())))\nexcept NotImplementedError:\n    MAX_PROCS = None\n\n\n# hideous monkeypatching.  but. but. but.\ndef _mp_compile_one(tp):\n    (self, obj, build, cc_args, extra_postargs, pp_opts) = tp\n    try:\n        src, ext = build[obj]\n    except KeyError:\n        return\n    self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts)\n    return\n\n\ndef _mp_compile(self, sources, output_dir=None, macros=None,\n                include_dirs=None, debug=0, extra_preargs=None,\n                extra_postargs=None, depends=None):\n    \"\"\"Compile one or more source files.\n\n    see distutils.ccompiler.CCompiler.compile for comments.\n    \"\"\"\n    # A concrete compiler class can either override this method\n    # entirely or implement _compile().\n\n    macros, objects, extra_postargs, pp_opts, build = self._setup_compile(\n        output_dir, macros, include_dirs, sources, depends, extra_postargs)\n    cc_args = self._get_cc_args(pp_opts, debug, extra_preargs)\n\n    pool = Pool(MAX_PROCS)\n    try:\n        print(\"Building using %d processes\" % pool._processes)\n    except:\n        pass\n    arr = [(self, obj, build, cc_args, extra_postargs, pp_opts)\n           for obj in objects]\n    pool.map_async(_mp_compile_one, arr)\n    pool.close()\n    pool.join()\n    # Return *all* object filenames, not just the ones we just built.\n    return objects\n\n\ndef install():\n\n    fl_win = sys.platform.startswith('win')\n    fl_cygwin = sys.platform.startswith('cygwin')\n\n    if fl_win or fl_cygwin:\n        # Windows barfs on multiprocessing installs\n        print(\"Single threaded build for Windows\")\n        return\n\n    if MAX_PROCS != 1:\n        # explicitly don't enable if environment says 1 processor\n        try:\n            # bug, only enable if we can make a Pool. see issue #790 and\n            # https://stackoverflow.com/questions/6033599/oserror-38-errno-38-with-multiprocessing\n            Pool(2)\n            CCompiler.compile = _mp_compile\n        except Exception as msg:\n            print(\"Exception installing mp_compile, proceeding without:\"\n                  \"%s\" % msg)\n    else:\n        print(\"Single threaded build, not installing mp_compile:\"\n              \"%s processes\" % MAX_PROCS)\n\n\ninstall()\n", "description": "The friendly PIL fork (Python Imaging Library)", "file_name": "mp_compile.py", "id": "978b010adedfd2c6e43895acb1c821de", "language": "Python", "project_name": "Pillow", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/python-pillow-Pillow/python-pillow-Pillow-4247de3/mp_compile.py", "save_time": "", "source": "", "update_at": "2018-03-18T09:10:03Z", "url": "https://github.com/python-pillow/Pillow", "wiki": true}