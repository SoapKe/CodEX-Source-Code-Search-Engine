{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    parse_age_limit,\n)\n\n\nclass BreakIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?P<site>break|screenjunkies)\\.com/video/(?P<display_id>[^/]+?)(?:-(?P<id>\\d+))?(?:[/?\n    _TESTS = [{\n        'url': 'http://www.break.com/video/when-girls-act-like-guys-2468056',\n        'info_dict': {\n            'id': '2468056',\n            'ext': 'mp4',\n            'title': 'When Girls Act Like D-Bags',\n            'age_limit': 13,\n        }\n    }, {\n        'url': 'http://www.screenjunkies.com/video/best-quentin-tarantino-movie-2841915',\n        'md5': '5c2b686bec3d43de42bde9ec047536b0',\n        'info_dict': {\n            'id': '2841915',\n            'display_id': 'best-quentin-tarantino-movie',\n            'ext': 'mp4',\n            'title': 'Best Quentin Tarantino Movie',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 3671,\n            'age_limit': 13,\n            'tags': list,\n        },\n    }, {\n        'url': 'http://www.screenjunkies.com/video/honest-trailers-the-dark-knight',\n        'info_dict': {\n            'id': '2348808',\n            'display_id': 'honest-trailers-the-dark-knight',\n            'ext': 'mp4',\n            'title': 'Honest Trailers - The Dark Knight',\n            'thumbnail': r're:^https?://.*\\.(?:jpg|png)',\n            'age_limit': 10,\n            'tags': list,\n        },\n    }, {\n        \n        'url': 'http://www.screenjunkies.com/video/knocking-dead-ep-1-the-show-so-far-3003285',\n        'info_dict': {\n            'id': '3003285',\n            'display_id': 'knocking-dead-ep-1-the-show-so-far',\n            'ext': 'mp4',\n            'title': 'State of The Dead Recap: Knocking Dead Pilot',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 3307,\n            'age_limit': 13,\n            'tags': list,\n        },\n    }, {\n        'url': 'http://www.break.com/video/ugc/baby-flex-2773063',\n        'only_matching': True,\n    }]\n\n    _DEFAULT_BITRATES = (48, 150, 320, 496, 864, 2240, 3264)\n\n    def _real_extract(self, url):\n        site, display_id, video_id = re.match(self._VALID_URL, url).groups()\n\n        if not video_id:\n            webpage = self._download_webpage(url, display_id)\n            video_id = self._search_regex(\n                (r'src=[\"\\']/embed/(\\d+)', r'data-video-content-id=[\"\\'](\\d+)'),\n                webpage, 'video id')\n\n        webpage = self._download_webpage(\n            'http://www.%s.com/embed/%s' % (site, video_id),\n            display_id, 'Downloading video embed page')\n        embed_vars = self._parse_json(\n            self._search_regex(\n                r'(?s)embedVars\\s*=\\s*({.+?})\\s*</script>', webpage, 'embed vars'),\n            display_id)\n\n        youtube_id = embed_vars.get('youtubeId')\n        if youtube_id:\n            return self.url_result(youtube_id, 'Youtube')\n\n        title = embed_vars['contentName']\n\n        formats = []\n        bitrates = []\n        for f in embed_vars.get('media', []):\n            if not f.get('uri') or f.get('mediaPurpose') != 'play':\n                continue\n            bitrate = int_or_none(f.get('bitRate'))\n            if bitrate:\n                bitrates.append(bitrate)\n            formats.append({\n                'url': f['uri'],\n                'format_id': 'http-%d' % bitrate if bitrate else 'http',\n                'width': int_or_none(f.get('width')),\n                'height': int_or_none(f.get('height')),\n                'tbr': bitrate,\n                'format': 'mp4',\n            })\n\n        if not bitrates:\n            \n            \n            \n            bitrates = self._DEFAULT_BITRATES\n\n        auth_token = embed_vars.get('AuthToken')\n\n        def construct_manifest_url(base_url, ext):\n            pieces = [base_url]\n            pieces.extend([compat_str(b) for b in bitrates])\n            pieces.append('_kbps.mp4.%s?%s' % (ext, auth_token))\n            return ','.join(pieces)\n\n        if bitrates and auth_token:\n            hds_url = embed_vars.get('hdsUri')\n            if hds_url:\n                formats.extend(self._extract_f4m_formats(\n                    construct_manifest_url(hds_url, 'f4m'),\n                    display_id, f4m_id='hds', fatal=False))\n            hls_url = embed_vars.get('hlsUri')\n            if hls_url:\n                formats.extend(self._extract_m3u8_formats(\n                    construct_manifest_url(hls_url, 'm3u8'),\n                    display_id, 'mp4', entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'thumbnail': embed_vars.get('thumbUri'),\n            'duration': int_or_none(embed_vars.get('videoLengthInSeconds')) or None,\n            'age_limit': parse_age_limit(embed_vars.get('audienceRating')),\n            'tags': embed_vars.get('tags', '').split(','),\n            'formats': formats,\n        }\n", "comments": "#&]|$)'\n# requires subscription but worked around\n# When subscriptionLevel > 0, i.e. plus subscription is required\n# media list will be empty. However, hds and hls uris are still\n# available. We can grab them assuming bitrates to be default.\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    parse_age_limit,\n)\n\n\nclass BreakIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?P<site>break|screenjunkies)\\.com/video/(?P<display_id>[^/]+?)(?:-(?P<id>\\d+))?(?:[/?#&]|$)'\n    _TESTS = [{\n        'url': 'http://www.break.com/video/when-girls-act-like-guys-2468056',\n        'info_dict': {\n            'id': '2468056',\n            'ext': 'mp4',\n            'title': 'When Girls Act Like D-Bags',\n            'age_limit': 13,\n        }\n    }, {\n        'url': 'http://www.screenjunkies.com/video/best-quentin-tarantino-movie-2841915',\n        'md5': '5c2b686bec3d43de42bde9ec047536b0',\n        'info_dict': {\n            'id': '2841915',\n            'display_id': 'best-quentin-tarantino-movie',\n            'ext': 'mp4',\n            'title': 'Best Quentin Tarantino Movie',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 3671,\n            'age_limit': 13,\n            'tags': list,\n        },\n    }, {\n        'url': 'http://www.screenjunkies.com/video/honest-trailers-the-dark-knight',\n        'info_dict': {\n            'id': '2348808',\n            'display_id': 'honest-trailers-the-dark-knight',\n            'ext': 'mp4',\n            'title': 'Honest Trailers - The Dark Knight',\n            'thumbnail': r're:^https?://.*\\.(?:jpg|png)',\n            'age_limit': 10,\n            'tags': list,\n        },\n    }, {\n        # requires subscription but worked around\n        'url': 'http://www.screenjunkies.com/video/knocking-dead-ep-1-the-show-so-far-3003285',\n        'info_dict': {\n            'id': '3003285',\n            'display_id': 'knocking-dead-ep-1-the-show-so-far',\n            'ext': 'mp4',\n            'title': 'State of The Dead Recap: Knocking Dead Pilot',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 3307,\n            'age_limit': 13,\n            'tags': list,\n        },\n    }, {\n        'url': 'http://www.break.com/video/ugc/baby-flex-2773063',\n        'only_matching': True,\n    }]\n\n    _DEFAULT_BITRATES = (48, 150, 320, 496, 864, 2240, 3264)\n\n    def _real_extract(self, url):\n        site, display_id, video_id = re.match(self._VALID_URL, url).groups()\n\n        if not video_id:\n            webpage = self._download_webpage(url, display_id)\n            video_id = self._search_regex(\n                (r'src=[\"\\']/embed/(\\d+)', r'data-video-content-id=[\"\\'](\\d+)'),\n                webpage, 'video id')\n\n        webpage = self._download_webpage(\n            'http://www.%s.com/embed/%s' % (site, video_id),\n            display_id, 'Downloading video embed page')\n        embed_vars = self._parse_json(\n            self._search_regex(\n                r'(?s)embedVars\\s*=\\s*({.+?})\\s*</script>', webpage, 'embed vars'),\n            display_id)\n\n        youtube_id = embed_vars.get('youtubeId')\n        if youtube_id:\n            return self.url_result(youtube_id, 'Youtube')\n\n        title = embed_vars['contentName']\n\n        formats = []\n        bitrates = []\n        for f in embed_vars.get('media', []):\n            if not f.get('uri') or f.get('mediaPurpose') != 'play':\n                continue\n            bitrate = int_or_none(f.get('bitRate'))\n            if bitrate:\n                bitrates.append(bitrate)\n            formats.append({\n                'url': f['uri'],\n                'format_id': 'http-%d' % bitrate if bitrate else 'http',\n                'width': int_or_none(f.get('width')),\n                'height': int_or_none(f.get('height')),\n                'tbr': bitrate,\n                'format': 'mp4',\n            })\n\n        if not bitrates:\n            # When subscriptionLevel > 0, i.e. plus subscription is required\n            # media list will be empty. However, hds and hls uris are still\n            # available. We can grab them assuming bitrates to be default.\n            bitrates = self._DEFAULT_BITRATES\n\n        auth_token = embed_vars.get('AuthToken')\n\n        def construct_manifest_url(base_url, ext):\n            pieces = [base_url]\n            pieces.extend([compat_str(b) for b in bitrates])\n            pieces.append('_kbps.mp4.%s?%s' % (ext, auth_token))\n            return ','.join(pieces)\n\n        if bitrates and auth_token:\n            hds_url = embed_vars.get('hdsUri')\n            if hds_url:\n                formats.extend(self._extract_f4m_formats(\n                    construct_manifest_url(hds_url, 'f4m'),\n                    display_id, f4m_id='hds', fatal=False))\n            hls_url = embed_vars.get('hlsUri')\n            if hls_url:\n                formats.extend(self._extract_m3u8_formats(\n                    construct_manifest_url(hls_url, 'm3u8'),\n                    display_id, 'mp4', entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'thumbnail': embed_vars.get('thumbUri'),\n            'duration': int_or_none(embed_vars.get('videoLengthInSeconds')) or None,\n            'age_limit': parse_age_limit(embed_vars.get('audienceRating')),\n            'tags': embed_vars.get('tags', '').split(','),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "breakcom.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/breakcom.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}