{"author": "ansible", "code": " (c) 2014, Toshio Kuratomi <tkuratomi@ansible.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\n\nimport sys\n\n Python 2.7\n\n Note: Could use the pypi mock library on python3.x as well as python2.x.  It\n is the same as the python3 stdlib mock library\n\ntry:\n     Allow wildcard import because we really do want to import all of mock's\n     symbols into this compat shim\n     pylint: disable=wildcard-import,unused-wildcard-import\n    from unittest.mock import *\nexcept ImportError:\n     Python 2\n     pylint: disable=wildcard-import,unused-wildcard-import\n    try:\n        from mock import *\n    except ImportError:\n        print('You need the mock library installed on python2.x to run tests')\n\n\n Prior to 3.4.4, mock_open cannot handle binary read_data\nif sys.version_info >= (3,) and sys.version_info < (3, 4, 4):\n    file_spec = None\n\n    def _iterate_read_data(read_data):\n         Helper for mock_open:\n         Retrieve lines from read_data via a generator so that separate calls to\n         readline, read, and readlines are properly interleaved\n        sep = b'\\n' if isinstance(read_data, bytes) else '\\n'\n        data_as_list = [l + sep for l in read_data.split(sep)]\n\n        if data_as_list[-1] == sep:\n             If the last line ended in a newline, the list comprehension will have an\n             extra entry that's just a newline.  Remove this.\n            data_as_list = data_as_list[:-1]\n        else:\n             If there wasn't an extra newline by itself, then the file being\n             emulated doesn't have a newline to end the last line  remove the\n             newline that our naive format() added\n            data_as_list[-1] = data_as_list[-1][:-1]\n\n        for line in data_as_list:\n            yield line\n\n    def mock_open(mock=None, read_data=''):\n        \"\"\"\n        A helper function to create a mock to replace the use of `open`. It works\n        for `open` called directly or used as a context manager.\n\n        The `mock` argument is the mock object to configure. If `None` (the\n        default) then a `MagicMock` will be created for you, with the API limited\n        to methods or attributes available on standard file handles.\n\n        `read_data` is a string for the `read` methoddline`, and `readlines` of the\n        file handle to return.  This is an empty string by default.\n        \"\"\"\n        def _readlines_side_effect(*args, **kwargs):\n            if handle.readlines.return_value is not None:\n                return handle.readlines.return_value\n            return list(_data)\n\n        def _read_side_effect(*args, **kwargs):\n            if handle.read.return_value is not None:\n                return handle.read.return_value\n            return type(read_data)().join(_data)\n\n        def _readline_side_effect():\n            if handle.readline.return_value is not None:\n                while True:\n                    yield handle.readline.return_value\n            for line in _data:\n                yield line\n\n        global file_spec\n        if file_spec is None:\n            import _io\n            file_spec = list(set(dir(_io.TextIOWrapper)).union(set(dir(_io.BytesIO))))\n\n        if mock is None:\n            mock = MagicMock(name='open', spec=open)\n\n        handle = MagicMock(spec=file_spec)\n        handle.__enter__.return_value = handle\n\n        _data = _iterate_read_data(read_data)\n\n        handle.write.return_value = None\n        handle.read.return_value = None\n        handle.readline.return_value = None\n        handle.readlines.return_value = None\n\n        handle.read.side_effect = _read_side_effect\n        handle.readline.side_effect = _readline_side_effect()\n        handle.readlines.side_effect = _readlines_side_effect\n\n        mock.return_value = handle\n        return mock\n", "comments": "            a helper function create mock replace use  open   it works          open  called directly used context manager           the  mock  argument mock object configure  if  none  (the         default)  magicmock  created  api limited         methods attributes available standard file handles            read data  string  read  methoddline    readlines          file handle return   this empty string default                   compat module python3 x unittest mock module        (c) 2014  toshio kuratomi  tkuratomi ansible com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish    python 2 7    note  could use pypi mock library python3 x well python2 x   it    python3 stdlib mock library    allow wildcard import really want import mock    symbols compat shim    pylint  disable wildcard import unused wildcard import    python 2    pylint  disable wildcard import unused wildcard import    prior 3 4 4  mock open cannot handle binary read data    helper mock open     retrieve lines read data via generator separate calls    readline  read  readlines properly interleaved    if last line ended newline  list comprehension    extra entry newline   remove     if extra newline  file    emulated newline end last line  remove    newline naive format() added ", "content": "# (c) 2014, Toshio Kuratomi <tkuratomi@ansible.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\n'''\nCompat module for Python3.x's unittest.mock module\n'''\nimport sys\n\n# Python 2.7\n\n# Note: Could use the pypi mock library on python3.x as well as python2.x.  It\n# is the same as the python3 stdlib mock library\n\ntry:\n    # Allow wildcard import because we really do want to import all of mock's\n    # symbols into this compat shim\n    # pylint: disable=wildcard-import,unused-wildcard-import\n    from unittest.mock import *\nexcept ImportError:\n    # Python 2\n    # pylint: disable=wildcard-import,unused-wildcard-import\n    try:\n        from mock import *\n    except ImportError:\n        print('You need the mock library installed on python2.x to run tests')\n\n\n# Prior to 3.4.4, mock_open cannot handle binary read_data\nif sys.version_info >= (3,) and sys.version_info < (3, 4, 4):\n    file_spec = None\n\n    def _iterate_read_data(read_data):\n        # Helper for mock_open:\n        # Retrieve lines from read_data via a generator so that separate calls to\n        # readline, read, and readlines are properly interleaved\n        sep = b'\\n' if isinstance(read_data, bytes) else '\\n'\n        data_as_list = [l + sep for l in read_data.split(sep)]\n\n        if data_as_list[-1] == sep:\n            # If the last line ended in a newline, the list comprehension will have an\n            # extra entry that's just a newline.  Remove this.\n            data_as_list = data_as_list[:-1]\n        else:\n            # If there wasn't an extra newline by itself, then the file being\n            # emulated doesn't have a newline to end the last line  remove the\n            # newline that our naive format() added\n            data_as_list[-1] = data_as_list[-1][:-1]\n\n        for line in data_as_list:\n            yield line\n\n    def mock_open(mock=None, read_data=''):\n        \"\"\"\n        A helper function to create a mock to replace the use of `open`. It works\n        for `open` called directly or used as a context manager.\n\n        The `mock` argument is the mock object to configure. If `None` (the\n        default) then a `MagicMock` will be created for you, with the API limited\n        to methods or attributes available on standard file handles.\n\n        `read_data` is a string for the `read` methoddline`, and `readlines` of the\n        file handle to return.  This is an empty string by default.\n        \"\"\"\n        def _readlines_side_effect(*args, **kwargs):\n            if handle.readlines.return_value is not None:\n                return handle.readlines.return_value\n            return list(_data)\n\n        def _read_side_effect(*args, **kwargs):\n            if handle.read.return_value is not None:\n                return handle.read.return_value\n            return type(read_data)().join(_data)\n\n        def _readline_side_effect():\n            if handle.readline.return_value is not None:\n                while True:\n                    yield handle.readline.return_value\n            for line in _data:\n                yield line\n\n        global file_spec\n        if file_spec is None:\n            import _io\n            file_spec = list(set(dir(_io.TextIOWrapper)).union(set(dir(_io.BytesIO))))\n\n        if mock is None:\n            mock = MagicMock(name='open', spec=open)\n\n        handle = MagicMock(spec=file_spec)\n        handle.__enter__.return_value = handle\n\n        _data = _iterate_read_data(read_data)\n\n        handle.write.return_value = None\n        handle.read.return_value = None\n        handle.readline.return_value = None\n        handle.readlines.return_value = None\n\n        handle.read.side_effect = _read_side_effect\n        handle.readline.side_effect = _readline_side_effect()\n        handle.readlines.side_effect = _readlines_side_effect\n\n        mock.return_value = handle\n        return mock\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "mock.py", "id": "88f6a59d8749e594f62dfb26cc1badbf", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/compat/tests/mock.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}