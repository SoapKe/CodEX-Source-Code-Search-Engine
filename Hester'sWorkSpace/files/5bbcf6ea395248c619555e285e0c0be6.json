{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urllib_parse_urlencode,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    qualities,\n)\n\n\nclass FlickrIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.|secure\\.)?flickr\\.com/photos/[\\w\\-_@]+/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.flickr.com/photos/forestwander-nature-pictures/5645318632/in/photostream/',\n        'md5': '164fe3fa6c22e18d448d4d5af2330f31',\n        'info_dict': {\n            'id': '5645318632',\n            'ext': 'mpg',\n            'description': 'Waterfalls in the Springtime at Dark Hollow Waterfalls. These are located just off of Skyline Drive in Virginia. They are only about 6/10 of a mile hike but it is a pretty steep hill and a good climb back up.',\n            'title': 'Dark Hollow Waterfalls',\n            'duration': 19,\n            'timestamp': 1303528740,\n            'upload_date': '20110423',\n            'uploader_id': '10922353@N03',\n            'uploader': 'Forest Wander',\n            'uploader_url': 'https://www.flickr.com/photos/forestwander-nature-pictures/',\n            'comment_count': int,\n            'view_count': int,\n            'tags': list,\n            'license': 'Attribution-ShareAlike',\n        }\n    }\n    _API_BASE_URL = 'https://api.flickr.com/services/rest?'\n    \n    _LICENSES = {\n        '0': 'All Rights Reserved',\n        '1': 'Attribution-NonCommercial-ShareAlike',\n        '2': 'Attribution-NonCommercial',\n        '3': 'Attribution-NonCommercial-NoDerivs',\n        '4': 'Attribution',\n        '5': 'Attribution-ShareAlike',\n        '6': 'Attribution-NoDerivs',\n        '7': 'No known copyright restrictions',\n        '8': 'United States government work',\n        '9': 'Public Domain Dedication (CC0)',\n        '10': 'Public Domain Work',\n    }\n\n    def _call_api(self, method, video_id, api_key, note, secret=None):\n        query = {\n            'photo_id': video_id,\n            'method': 'flickr.%s' % method,\n            'api_key': api_key,\n            'format': 'json',\n            'nojsoncallback': 1,\n        }\n        if secret:\n            query['secret'] = secret\n        data = self._download_json(self._API_BASE_URL + compat_urllib_parse_urlencode(query), video_id, note)\n        if data['stat'] != 'ok':\n            raise ExtractorError(data['message'])\n        return data\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        api_key = self._download_json(\n            'https://www.flickr.com/hermes_error_beacon.gne', video_id,\n            'Downloading api key')['site_key']\n\n        video_info = self._call_api(\n            'photos.getInfo', video_id, api_key, 'Downloading video info')['photo']\n        if video_info['media'] == 'video':\n            streams = self._call_api(\n                'video.getStreamInfo', video_id, api_key,\n                'Downloading streams info', video_info['secret'])['streams']\n\n            preference = qualities(\n                ['288p', 'iphone_wifi', '100', '300', '700', '360p', 'appletv', '720p', '1080p', 'orig'])\n\n            formats = []\n            for stream in streams['stream']:\n                stream_type = compat_str(stream.get('type'))\n                formats.append({\n                    'format_id': stream_type,\n                    'url': stream['_content'],\n                    'preference': preference(stream_type),\n                })\n            self._sort_formats(formats)\n\n            owner = video_info.get('owner', {})\n            uploader_id = owner.get('nsid')\n            uploader_path = owner.get('path_alias') or uploader_id\n            uploader_url = 'https://www.flickr.com/photos/%s/' % uploader_path if uploader_path else None\n\n            return {\n                'id': video_id,\n                'title': video_info['title']['_content'],\n                'description': video_info.get('description', {}).get('_content'),\n                'formats': formats,\n                'timestamp': int_or_none(video_info.get('dateuploaded')),\n                'duration': int_or_none(video_info.get('video', {}).get('duration')),\n                'uploader_id': uploader_id,\n                'uploader': owner.get('realname'),\n                'uploader_url': uploader_url,\n                'comment_count': int_or_none(video_info.get('comments', {}).get('_content')),\n                'view_count': int_or_none(video_info.get('views')),\n                'tags': [tag.get('_content') for tag in video_info.get('tags', {}).get('tag', [])],\n                'license': self._LICENSES.get(video_info.get('license')),\n            }\n        else:\n            raise ExtractorError('not a video', expected=True)\n", "comments": "# https://help.yahoo.com/kb/flickr/SLN25525.html\n", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urllib_parse_urlencode,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    qualities,\n)\n\n\nclass FlickrIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.|secure\\.)?flickr\\.com/photos/[\\w\\-_@]+/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.flickr.com/photos/forestwander-nature-pictures/5645318632/in/photostream/',\n        'md5': '164fe3fa6c22e18d448d4d5af2330f31',\n        'info_dict': {\n            'id': '5645318632',\n            'ext': 'mpg',\n            'description': 'Waterfalls in the Springtime at Dark Hollow Waterfalls. These are located just off of Skyline Drive in Virginia. They are only about 6/10 of a mile hike but it is a pretty steep hill and a good climb back up.',\n            'title': 'Dark Hollow Waterfalls',\n            'duration': 19,\n            'timestamp': 1303528740,\n            'upload_date': '20110423',\n            'uploader_id': '10922353@N03',\n            'uploader': 'Forest Wander',\n            'uploader_url': 'https://www.flickr.com/photos/forestwander-nature-pictures/',\n            'comment_count': int,\n            'view_count': int,\n            'tags': list,\n            'license': 'Attribution-ShareAlike',\n        }\n    }\n    _API_BASE_URL = 'https://api.flickr.com/services/rest?'\n    # https://help.yahoo.com/kb/flickr/SLN25525.html\n    _LICENSES = {\n        '0': 'All Rights Reserved',\n        '1': 'Attribution-NonCommercial-ShareAlike',\n        '2': 'Attribution-NonCommercial',\n        '3': 'Attribution-NonCommercial-NoDerivs',\n        '4': 'Attribution',\n        '5': 'Attribution-ShareAlike',\n        '6': 'Attribution-NoDerivs',\n        '7': 'No known copyright restrictions',\n        '8': 'United States government work',\n        '9': 'Public Domain Dedication (CC0)',\n        '10': 'Public Domain Work',\n    }\n\n    def _call_api(self, method, video_id, api_key, note, secret=None):\n        query = {\n            'photo_id': video_id,\n            'method': 'flickr.%s' % method,\n            'api_key': api_key,\n            'format': 'json',\n            'nojsoncallback': 1,\n        }\n        if secret:\n            query['secret'] = secret\n        data = self._download_json(self._API_BASE_URL + compat_urllib_parse_urlencode(query), video_id, note)\n        if data['stat'] != 'ok':\n            raise ExtractorError(data['message'])\n        return data\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        api_key = self._download_json(\n            'https://www.flickr.com/hermes_error_beacon.gne', video_id,\n            'Downloading api key')['site_key']\n\n        video_info = self._call_api(\n            'photos.getInfo', video_id, api_key, 'Downloading video info')['photo']\n        if video_info['media'] == 'video':\n            streams = self._call_api(\n                'video.getStreamInfo', video_id, api_key,\n                'Downloading streams info', video_info['secret'])['streams']\n\n            preference = qualities(\n                ['288p', 'iphone_wifi', '100', '300', '700', '360p', 'appletv', '720p', '1080p', 'orig'])\n\n            formats = []\n            for stream in streams['stream']:\n                stream_type = compat_str(stream.get('type'))\n                formats.append({\n                    'format_id': stream_type,\n                    'url': stream['_content'],\n                    'preference': preference(stream_type),\n                })\n            self._sort_formats(formats)\n\n            owner = video_info.get('owner', {})\n            uploader_id = owner.get('nsid')\n            uploader_path = owner.get('path_alias') or uploader_id\n            uploader_url = 'https://www.flickr.com/photos/%s/' % uploader_path if uploader_path else None\n\n            return {\n                'id': video_id,\n                'title': video_info['title']['_content'],\n                'description': video_info.get('description', {}).get('_content'),\n                'formats': formats,\n                'timestamp': int_or_none(video_info.get('dateuploaded')),\n                'duration': int_or_none(video_info.get('video', {}).get('duration')),\n                'uploader_id': uploader_id,\n                'uploader': owner.get('realname'),\n                'uploader_url': uploader_url,\n                'comment_count': int_or_none(video_info.get('comments', {}).get('_content')),\n                'view_count': int_or_none(video_info.get('views')),\n                'tags': [tag.get('_content') for tag in video_info.get('tags', {}).get('tag', [])],\n                'license': self._LICENSES.get(video_info.get('license')),\n            }\n        else:\n            raise ExtractorError('not a video', expected=True)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "flickr.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/flickr.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}