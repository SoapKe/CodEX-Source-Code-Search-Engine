{"author": "rg3", "code": "\n\n\nfrom __future__ import absolute_import, unicode_literals\n\nimport collections\nimport contextlib\nimport copy\nimport datetime\nimport errno\nimport fileinput\nimport io\nimport itertools\nimport json\nimport locale\nimport operator\nimport os\nimport platform\nimport re\nimport shutil\nimport subprocess\nimport socket\nimport sys\nimport time\nimport tokenize\nimport traceback\nimport random\n\nfrom string import ascii_letters\n\nfrom .compat import (\n    compat_basestring,\n    compat_cookiejar,\n    compat_get_terminal_size,\n    compat_http_client,\n    compat_kwargs,\n    compat_numeric_types,\n    compat_os_name,\n    compat_str,\n    compat_tokenize_tokenize,\n    compat_urllib_error,\n    compat_urllib_request,\n    compat_urllib_request_DataHandler,\n)\nfrom .utils import (\n    age_restricted,\n    args_to_str,\n    ContentTooShortError,\n    date_from_str,\n    DateRange,\n    DEFAULT_OUTTMPL,\n    determine_ext,\n    determine_protocol,\n    DownloadError,\n    encode_compat_str,\n    encodeFilename,\n    error_to_compat_str,\n    expand_path,\n    ExtractorError,\n    format_bytes,\n    formatSeconds,\n    GeoRestrictedError,\n    int_or_none,\n    ISO3166Utils,\n    locked_file,\n    make_HTTPS_handler,\n    MaxDownloadsReached,\n    orderedSet,\n    PagedList,\n    parse_filesize,\n    PerRequestProxyHandler,\n    platform_name,\n    PostProcessingError,\n    preferredencoding,\n    prepend_extension,\n    register_socks_protocols,\n    render_table,\n    replace_extension,\n    SameFileError,\n    sanitize_filename,\n    sanitize_path,\n    sanitize_url,\n    sanitized_Request,\n    std_headers,\n    subtitles_filename,\n    UnavailableVideoError,\n    url_basename,\n    version_tuple,\n    write_json_file,\n    write_string,\n    YoutubeDLCookieProcessor,\n    YoutubeDLHandler,\n)\nfrom .cache import Cache\nfrom .extractor import get_info_extractor, gen_extractor_classes, _LAZY_LOADER\nfrom .extractor.openload import PhantomJSwrapper\nfrom .downloader import get_suitable_downloader\nfrom .downloader.rtmp import rtmpdump_version\nfrom .postprocessor import (\n    FFmpegFixupM3u8PP,\n    FFmpegFixupM4aPP,\n    FFmpegFixupStretchedPP,\n    FFmpegMergerPP,\n    FFmpegPostProcessor,\n    get_postprocessor,\n)\nfrom .version import __version__\n\nif compat_os_name == 'nt':\n    import ctypes\n\n\nclass YoutubeDL(object):\n    \n        if isinstance(req, compat_basestring):\n            req = sanitized_Request(req)\n        return self._opener.open(req, timeout=self._socket_timeout)\n\n    def print_debug_header(self):\n        if not self.params.get('verbose'):\n            return\n\n        if type('') is not compat_str:\n            \n            self.report_warning(\n                'Your Python is broken! Update to a newer and supported version')\n\n        stdout_encoding = getattr(\n            sys.stdout, 'encoding', 'missing (%s)' % type(sys.stdout).__name__)\n        encoding_str = (\n            '[debug] Encodings: locale %s, fs %s, out %s, pref %s\\n' % (\n                locale.getpreferredencoding(),\n                sys.getfilesystemencoding(),\n                stdout_encoding,\n                self.get_encoding()))\n        write_string(encoding_str, encoding=None)\n\n        self._write_string('[debug] youtube-dl version ' + __version__ + '\\n')\n        if _LAZY_LOADER:\n            self._write_string('[debug] Lazy loading extractors enabled' + '\\n')\n        try:\n            sp = subprocess.Popen(\n                ['git', 'rev-parse', '--short', 'HEAD'],\n                stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                cwd=os.path.dirname(os.path.abspath(__file__)))\n            out, err = sp.communicate()\n            out = out.decode().strip()\n            if re.match('[0-9a-f]+', out):\n                self._write_string('[debug] Git HEAD: ' + out + '\\n')\n        except Exception:\n            try:\n                sys.exc_clear()\n            except Exception:\n                pass\n\n        def python_implementation():\n            impl_name = platform.python_implementation()\n            if impl_name == 'PyPy' and hasattr(sys, 'pypy_version_info'):\n                return impl_name + ' version %d.%d.%d' % sys.pypy_version_info[:3]\n            return impl_name\n\n        self._write_string('[debug] Python version %s (%s) - %s\\n' % (\n            platform.python_version(), python_implementation(),\n            platform_name()))\n\n        exe_versions = FFmpegPostProcessor.get_versions(self)\n        exe_versions['rtmpdump'] = rtmpdump_version()\n        exe_versions['phantomjs'] = PhantomJSwrapper._version()\n        exe_str = ', '.join(\n            '%s %s' % (exe, v)\n            for exe, v in sorted(exe_versions.items())\n            if v\n        )\n        if not exe_str:\n            exe_str = 'none'\n        self._write_string('[debug] exe versions: %s\\n' % exe_str)\n\n        proxy_map = {}\n        for handler in self._opener.handlers:\n            if hasattr(handler, 'proxies'):\n                proxy_map.update(handler.proxies)\n        self._write_string('[debug] Proxy map: ' + compat_str(proxy_map) + '\\n')\n\n        if self.params.get('call_home', False):\n            ipaddr = self.urlopen('https://yt-dl.org/ip').read().decode('utf-8')\n            self._write_string('[debug] Public IP address: %s\\n' % ipaddr)\n            latest_version = self.urlopen(\n                'https://yt-dl.org/latest/version').read().decode('utf-8')\n            if version_tuple(latest_version) > version_tuple(__version__):\n                self.report_warning(\n                    'You are using an outdated version (newest version: %s)! '\n                    'See https://yt-dl.org/update if you need help updating.' %\n                    latest_version)\n\n    def _setup_opener(self):\n        timeout_val = self.params.get('socket_timeout')\n        self._socket_timeout = 600 if timeout_val is None else float(timeout_val)\n\n        opts_cookiefile = self.params.get('cookiefile')\n        opts_proxy = self.params.get('proxy')\n\n        if opts_cookiefile is None:\n            self.cookiejar = compat_cookiejar.CookieJar()\n        else:\n            opts_cookiefile = expand_path(opts_cookiefile)\n            self.cookiejar = compat_cookiejar.MozillaCookieJar(\n                opts_cookiefile)\n            if os.access(opts_cookiefile, os.R_OK):\n                self.cookiejar.load()\n\n        cookie_processor = YoutubeDLCookieProcessor(self.cookiejar)\n        if opts_proxy is not None:\n            if opts_proxy == '':\n                proxies = {}\n            else:\n                proxies = {'http': opts_proxy, 'https': opts_proxy}\n        else:\n            proxies = compat_urllib_request.getproxies()\n            \n            if 'http' in proxies and 'https' not in proxies:\n                proxies['https'] = proxies['http']\n        proxy_handler = PerRequestProxyHandler(proxies)\n\n        debuglevel = 1 if self.params.get('debug_printtraffic') else 0\n        https_handler = make_HTTPS_handler(self.params, debuglevel=debuglevel)\n        ydlh = YoutubeDLHandler(self.params, debuglevel=debuglevel)\n        data_handler = compat_urllib_request_DataHandler()\n\n        \n        \n        \n        \n        file_handler = compat_urllib_request.FileHandler()\n\n        def file_open(*args, **kwargs):\n            raise compat_urllib_error.URLError('file:// scheme is explicitly disabled in youtube-dl for security reasons')\n        file_handler.file_open = file_open\n\n        opener = compat_urllib_request.build_opener(\n            proxy_handler, https_handler, cookie_processor, ydlh, data_handler, file_handler)\n\n        \n        \n        \n        opener.addheaders = []\n        self._opener = opener\n\n    def encode(self, s):\n        if isinstance(s, bytes):\n            return s  \n\n        try:\n            return s.encode(self.get_encoding())\n        except UnicodeEncodeError as err:\n            err.reason = err.reason + '. Check your system encoding configuration or use the --encoding option.'\n            raise\n\n    def get_encoding(self):\n        encoding = self.params.get('encoding')\n        if encoding is None:\n            encoding = preferredencoding()\n        return encoding\n\n    def _write_thumbnails(self, info_dict, filename):\n        if self.params.get('writethumbnail', False):\n            thumbnails = info_dict.get('thumbnails')\n            if thumbnails:\n                thumbnails = [thumbnails[-1]]\n        elif self.params.get('write_all_thumbnails', False):\n            thumbnails = info_dict.get('thumbnails')\n        else:\n            return\n\n        if not thumbnails:\n            \n            return\n\n        for t in thumbnails:\n            thumb_ext = determine_ext(t['url'], 'jpg')\n            suffix = '_%s' % t['id'] if len(thumbnails) > 1 else ''\n            thumb_display_id = '%s ' % t['id'] if len(thumbnails) > 1 else ''\n            t['filename'] = thumb_filename = os.path.splitext(filename)[0] + suffix + '.' + thumb_ext\n\n            if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(thumb_filename)):\n                self.to_screen('[%s] %s: Thumbnail %sis already present' %\n                               (info_dict['extractor'], info_dict['id'], thumb_display_id))\n            else:\n                self.to_screen('[%s] %s: Downloading thumbnail %s...' %\n                               (info_dict['extractor'], info_dict['id'], thumb_display_id))\n                try:\n                    uf = self.urlopen(t['url'])\n                    with open(encodeFilename(thumb_filename), 'wb') as thumbf:\n                        shutil.copyfileobj(uf, thumbf)\n                    self.to_screen('[%s] %s: Writing thumbnail %sto: %s' %\n                                   (info_dict['extractor'], info_dict['id'], thumb_display_id, thumb_filename))\n                except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n                    self.report_warning('Unable to download thumbnail \"%s\": %s' %\n                                        (t['url'], error_to_compat_str(err)))\n", "comments": "YoutubeDL class.\n\n    YoutubeDL objects are the ones responsible of downloading the\n    actual video file and writing it to disk if the user has requested\n    it, among some other tasks. In most cases there should be one per\n    program. As, given a video URL, the downloader doesn't know how to\n    extract all the needed information, task that InfoExtractors do, it\n    has to pass the URL to one of them.\n\n    For this, YoutubeDL objects have a method that allows\n    InfoExtractors to be registered in a given order. When it is passed\n    a URL, the YoutubeDL object handles it to the first InfoExtractor it\n    finds that reports being able to handle it. The InfoExtractor extracts\n    all the information about the video or videos the URL refers to, and\n    YoutubeDL process the extracted information, possibly using a File\n    Downloader to download the video.\n\n    YoutubeDL objects accept a lot of parameters. In order not to saturate\n    the object constructor with arguments, it receives a dictionary of\n    options instead. These options are available through the params\n    attribute for the InfoExtractors to use. The YoutubeDL also\n    registers itself as the downloader in charge for the InfoExtractors\n    that are added to it, so this is a \"mutual registration\".\n\n    Available options:\n\n    username:          Username for authentication purposes.\n    password:          Password for authentication purposes.\n    videopassword:     Password for accessing a video.\n    ap_mso:            Adobe Pass multiple-system operator identifier.\n    ap_username:       Multiple-system operator account username.\n    ap_password:       Multiple-system operator account password.\n    usenetrc:          Use netrc for authentication instead.\n    verbose:           Print additional info to stdout.\n    quiet:             Do not print messages to stdout.\n    no_warnings:       Do not print out anything for warnings.\n    forceurl:          Force printing final URL.\n    forcetitle:        Force printing title.\n    forceid:           Force printing ID.\n    forcethumbnail:    Force printing thumbnail URL.\n    forcedescription:  Force printing description.\n    forcefilename:     Force printing final filename.\n    forceduration:     Force printing duration.\n    forcejson:         Force printing info_dict as JSON.\n    dump_single_json:  Force printing the info_dict of the whole playlist\n                       (or video) as a single JSON line.\n    simulate:          Do not download the video files.\n    format:            Video format code. See options.py for more information.\n    outtmpl:           Template for output names.\n    restrictfilenames: Do not allow \"&\" and spaces in file names\n    ignoreerrors:      Do not stop on download errors.\n    force_generic_extractor: Force downloader to use the generic extractor\n    nooverwrites:      Prevent overwriting files.\n    playliststart:     Playlist item to start at.\n    playlistend:       Playlist item to end at.\n    playlist_items:    Specific indices of playlist to download.\n    playlistreverse:   Download playlist items in reverse order.\n    playlistrandom:    Download playlist items in random order.\n    matchtitle:        Download only matching titles.\n    rejecttitle:       Reject downloads for matching titles.\n    logger:            Log messages to a logging.Logger instance.\n    logtostderr:       Log messages to stderr instead of stdout.\n    writedescription:  Write the video description to a .description file\n    writeinfojson:     Write the video description to a .info.json file\n    writeannotations:  Write the video annotations to a .annotations.xml file\n    writethumbnail:    Write the thumbnail image to a file\n    write_all_thumbnails:  Write all thumbnail formats to files\n    writesubtitles:    Write the video subtitles to a file\n    writeautomaticsub: Write the automatically generated subtitles to a file\n    allsubtitles:      Downloads all the subtitles of the video\n                       (requires writesubtitles or writeautomaticsub)\n    listsubtitles:     Lists all available subtitles for the video\n    subtitlesformat:   The format code for subtitles\n    subtitleslangs:    List of languages of the subtitles to download\n    keepvideo:         Keep the video file after post-processing\n    daterange:         A DateRange object, download only if the upload_date is in the range.\n    skip_download:     Skip the actual download of the video file\n    cachedir:          Location of the cache files in the filesystem.\n                       False to disable filesystem cache.\n    noplaylist:        Download single video instead of a playlist if in doubt.\n    age_limit:         An integer representing the user's age in years.\n                       Unsuitable videos for the given age are skipped.\n    min_views:         An integer representing the minimum view count the video\n                       must have in order to not be skipped.\n                       Videos without view count information are always\n                       downloaded. None for no limit.\n    max_views:         An integer representing the maximum view count.\n                       Videos that are more popular than that are not\n                       downloaded.\n                       Videos without view count information are always\n                       downloaded. None for no limit.\n    download_archive:  File name of a file where all downloads are recorded.\n                       Videos already present in the file are not downloaded\n                       again.\n    cookiefile:        File name where cookies should be read from and dumped to.\n    nocheckcertificate:Do not verify SSL certificates\n    prefer_insecure:   Use HTTP instead of HTTPS to retrieve information.\n                       At the moment, this is only supported by YouTube.\n    proxy:             URL of the proxy server to use\n    geo_verification_proxy:  URL of the proxy to use for IP address verification\n                       on geo-restricted sites. (Experimental)\n    socket_timeout:    Time to wait for unresponsive hosts, in seconds\n    bidi_workaround:   Work around buggy terminals without bidirectional text\n                       support, using fridibi\n    debug_printtraffic:Print out sent and received HTTP traffic\n    include_ads:       Download ads as well\n    default_search:    Prepend this string if an input url is not valid.\n                       'auto' for elaborate guessing\n    encoding:          Use this encoding instead of the system-specified.\n    extract_flat:      Do not resolve URLs, return the immediate result.\n                       Pass in 'in_playlist' to only show this behavior for\n                       playlist items.\n    postprocessors:    A list of dictionaries, each with an entry\n                       * key:  The name of the postprocessor. See\n                               youtube_dl/postprocessor/__init__.py for a list.\n                       as well as any further keyword arguments for the\n                       postprocessor.\n    progress_hooks:    A list of functions that get called on download\n                       progress, with a dictionary with the entries\n                       * status: One of \"downloading\", \"error\", or \"finished\".\n                                 Check this first and ignore unknown values.\n\n                       If status is one of \"downloading\", or \"finished\", the\n                       following properties may also be present:\n                       * filename: The final filename (always present)\n                       * tmpfilename: The filename we're currently writing to\n                       * downloaded_bytes: Bytes on disk\n                       * total_bytes: Size of the whole file, None if unknown\n                       * total_bytes_estimate: Guess of the eventual file size,\n                                               None if unavailable.\n                       * elapsed: The number of seconds since download started.\n                       * eta: The estimated time in seconds, None if unknown\n                       * speed: The download speed in bytes/second, None if\n                                unknown\n                       * fragment_index: The counter of the currently\n                                         downloaded video fragment.\n                       * fragment_count: The number of fragments (= individual\n                                         files that will be merged)\n\n                       Progress hooks are guaranteed to be called at least once\n                       (with status \"finished\") if the download is successful.\n    merge_output_format: Extension to use when merging formats.\n    fixup:             Automatically correct known faults of the file.\n                       One of:\n                       - \"never\": do nothing\n                       - \"warn\": only emit a warning\n                       - \"detect_or_warn\": check whether we can do anything\n                                           about it, warn otherwise (default)\n    source_address:    (Experimental) Client-side IP address to bind to.\n    call_home:         Boolean, true iff we are allowed to contact the\n                       youtube-dl servers for debugging.\n    sleep_interval:    Number of seconds to sleep before each download when\n                       used alone or a lower bound of a range for randomized\n                       sleep before each download (minimum possible number\n                       of seconds to sleep) when used along with\n                       max_sleep_interval.\n    max_sleep_interval:Upper bound of a range for randomized sleep before each\n                       download (maximum possible number of seconds to sleep).\n                       Must only be used along with sleep_interval.\n                       Actual sleep time will be a random float from range\n                       [sleep_interval; max_sleep_interval].\n    listformats:       Print an overview of available video formats and exit.\n    list_thumbnails:   Print a table of all thumbnails and exit.\n    match_filter:      A function that gets called with the info_dict of\n                       every video.\n                       If it returns a message, the video is ignored.\n                       If it returns None, the video is downloaded.\n                       match_filter_func in utils.py is one example for this.\n    no_color:          Do not emit color codes in output.\n    geo_bypass:        Bypass geographic restriction via faking X-Forwarded-For\n                       HTTP header (experimental)\n    geo_bypass_country:\n                       Two-letter ISO 3166-2 country code that will be used for\n                       explicit geographic restriction bypassing via faking\n                       X-Forwarded-For HTTP header (experimental)\n\n    The following options determine which downloader is picked:\n    external_downloader: Executable of the external downloader to call.\n                       None or unset for standard (built-in) downloader.\n    hls_prefer_native: Use the native HLS downloader instead of ffmpeg/avconv\n                       if True, otherwise use ffmpeg/avconv if False, otherwise\n                       use downloader suggested by extractor if None.\n\n    The following parameters are not used by YoutubeDL itself, they are used by\n    the downloader (see youtube_dl/downloader/common.py):\n    nopart, updatetime, buffersize, ratelimit, min_filesize, max_filesize, test,\n    noresizebuffer, retries, continuedl, noprogress, consoletitle,\n    xattr_set_filesize, external_downloader_args, hls_use_mpegts,\n    http_chunk_size.\n\n    The following options are used by the post processors:\n    prefer_ffmpeg:     If True, use ffmpeg instead of avconv if both are available,\n                       otherwise prefer avconv.\n    postprocessor_args: A list of additional command-line arguments for the\n                        postprocessor.\n\n    The following options are used by the Youtube extractor:\n    youtube_include_dash_manifest: If True (default), DASH manifests and related\n                        data will be downloaded and processed by extractor.\n                        You can reduce network I/O by disabling it if you don't\n                        care about DASH.\n    \"\"\"\n\n    _NUMERIC_FIELDS = set((\n        'width', 'height', 'tbr', 'abr', 'asr', 'vbr', 'fps', 'filesize', 'filesize_approx',\n        'timestamp', 'upload_year', 'upload_month', 'upload_day',\n        'duration', 'view_count', 'like_count', 'dislike_count', 'repost_count',\n        'average_rating', 'comment_count', 'age_limit',\n        'start_time', 'end_time',\n        'chapter_number', 'season_number', 'episode_number',\n        'track_number', 'disc_number', 'release_year',\n        'playlist_index',\n    ))\n\n    params = None\n    _ies = []\n    _pps = []\n    _download_retcode = None\n    _num_downloads = None\n    _screen_file = None\n\n    def __init__(self, params=None, auto_init=True):\n        \"\"\"Create a FileDownloader object with the given options.\"\"\"\n        if params is None:\n            params = {}\n        self._ies = []\n        self._ies_instances = {}\n        self._pps = []\n        self._progress_hooks = []\n        self._download_retcode = 0\n        self._num_downloads = 0\n        self._screen_file = [sys.stdout, sys.stderr][params.get('logtostderr', False)]\n        self._err_file = sys.stderr\n        self.params = {\n            # Default parameters\n            'nocheckcertificate': False,\n        }\n        self.params.update(params)\n        self.cache = Cache(self)\n\n        def check_deprecated(param, option, suggestion):\n            if self.params.get(param) is not None:\n                self.report_warning(\n                    '%s is deprecated. Use %s instead.' % (option, suggestion))\n                return True\n            return False\n\n        if check_deprecated('cn_verification_proxy', '--cn-verification-proxy', '--geo-verification-proxy'):\n            if self.params.get('geo_verification_proxy') is None:\n                self.params['geo_verification_proxy'] = self.params['cn_verification_proxy']\n\n        check_deprecated('autonumber_size', '--autonumber-size', 'output template with %(autonumber)0Nd, where N in the number of digits')\n        check_deprecated('autonumber', '--auto-number', '-o \"%(autonumber)s-%(title)s.%(ext)s\"')\n        check_deprecated('usetitle', '--title', '-o \"%(title)s-%(id)s.%(ext)s\"')\n\n        if params.get('bidi_workaround', False):\n            try:\n                import pty\n                master, slave = pty.openpty()\n                width = compat_get_terminal_size().columns\n                if width is None:\n                    width_args = []\n                else:\n                    width_args = ['-w', str(width)]\n                sp_kwargs = dict(\n                    stdin=subprocess.PIPE,\n                    stdout=slave,\n                    stderr=self._err_file)\n                try:\n                    self._output_process = subprocess.Popen(\n                        ['bidiv'] + width_args, **sp_kwargs\n                    )\n                except OSError:\n                    self._output_process = subprocess.Popen(\n                        ['fribidi', '-c', 'UTF-8'] + width_args, **sp_kwargs)\n                self._output_channel = os.fdopen(master, 'rb')\n            except OSError as ose:\n                if ose.errno == errno.ENOENT:\n                    self.report_warning('Could not find fribidi executable, ignoring --bidi-workaround . Make sure that  fribidi  is an executable file in one of the directories in your $PATH.')\n                else:\n                    raise\n\n        if (sys.platform != 'win32' and\n                sys.getfilesystemencoding() in ['ascii', 'ANSI_X3.4-1968'] and\n                not params.get('restrictfilenames', False)):\n            # Unicode filesystem API will throw errors (#1474, #13027)\n            self.report_warning(\n                'Assuming --restrict-filenames since file system encoding '\n                'cannot encode all characters. '\n                'Set the LC_ALL environment variable to fix this.')\n            self.params['restrictfilenames'] = True\n\n        if isinstance(params.get('outtmpl'), bytes):\n            self.report_warning(\n                'Parameter outtmpl is bytes, but should be a unicode string. '\n                'Put  from __future__ import unicode_literals  at the top of your code file or consider switching to Python 3.x.')\n\n        self._setup_opener()\n\n        if auto_init:\n            self.print_debug_header()\n            self.add_default_info_extractors()\n\n        for pp_def_raw in self.params.get('postprocessors', []):\n            pp_class = get_postprocessor(pp_def_raw['key'])\n            pp_def = dict(pp_def_raw)\n            del pp_def['key']\n            pp = pp_class(self, **compat_kwargs(pp_def))\n            self.add_post_processor(pp)\n\n        for ph in self.params.get('progress_hooks', []):\n            self.add_progress_hook(ph)\n\n        register_socks_protocols()\n\n    def warn_if_short_id(self, argv):\n        # short YouTube ID starting with dash?\n        idxs = [\n            i for i, a in enumerate(argv)\n            if re.match(r'^-[0-9A-Za-z_-]{10}$', a)]\n        if idxs:\n            correct_argv = (\n                ['youtube-dl'] +\n                [a for i, a in enumerate(argv) if i not in idxs] +\n                ['--'] + [argv[i] for i in idxs]\n            )\n            self.report_warning(\n                'Long argument string detected. '\n                'Use -- to separate parameters and URLs, like this:\\n%s\\n' %\n                args_to_str(correct_argv))\n\n    def add_info_extractor(self, ie):\n        \"\"\"Add an InfoExtractor object to the end of the list.\"\"\"\n        self._ies.append(ie)\n        if not isinstance(ie, type):\n            self._ies_instances[ie.ie_key()] = ie\n            ie.set_downloader(self)\n\n    def get_info_extractor(self, ie_key):\n        \"\"\"\n        Get an instance of an IE with name ie_key, it will try to get one from\n        the _ies list, if there's no instance it will create a new one and add\n        it to the extractor list.\n        \"\"\"\n        ie = self._ies_instances.get(ie_key)\n        if ie is None:\n            ie = get_info_extractor(ie_key)()\n            self.add_info_extractor(ie)\n        return ie\n\n    def add_default_info_extractors(self):\n        \"\"\"\n        Add the InfoExtractors returned by gen_extractors to the end of the list\n        \"\"\"\n        for ie in gen_extractor_classes():\n            self.add_info_extractor(ie)\n\n    def add_post_processor(self, pp):\n        \"\"\"Add a PostProcessor object to the end of the chain.\"\"\"\n        self._pps.append(pp)\n        pp.set_downloader(self)\n\n    def add_progress_hook(self, ph):\n        \"\"\"Add the progress hook (currently only for the file downloader)\"\"\"\n        self._progress_hooks.append(ph)\n\n    def _bidi_workaround(self, message):\n        if not hasattr(self, '_output_channel'):\n            return message\n\n        assert hasattr(self, '_output_process')\n        assert isinstance(message, compat_str)\n        line_count = message.count('\\n') + 1\n        self._output_process.stdin.write((message + '\\n').encode('utf-8'))\n        self._output_process.stdin.flush()\n        res = ''.join(self._output_channel.readline().decode('utf-8')\n                      for _ in range(line_count))\n        return res[:-len('\\n')]\n\n    def to_screen(self, message, skip_eol=False):\n        \"\"\"Print message to stdout if not in quiet mode.\"\"\"\n        return self.to_stdout(message, skip_eol, check_quiet=True)\n\n    def _write_string(self, s, out=None):\n        write_string(s, out=out, encoding=self.params.get('encoding'))\n\n    def to_stdout(self, message, skip_eol=False, check_quiet=False):\n        \"\"\"Print message to stdout if not in quiet mode.\"\"\"\n        if self.params.get('logger'):\n            self.params['logger'].debug(message)\n        elif not check_quiet or not self.params.get('quiet', False):\n            message = self._bidi_workaround(message)\n            terminator = ['\\n', ''][skip_eol]\n            output = message + terminator\n\n            self._write_string(output, self._screen_file)\n\n    def to_stderr(self, message):\n        \"\"\"Print message to stderr.\"\"\"\n        assert isinstance(message, compat_str)\n        if self.params.get('logger'):\n            self.params['logger'].error(message)\n        else:\n            message = self._bidi_workaround(message)\n            output = message + '\\n'\n            self._write_string(output, self._err_file)\n\n    def to_console_title(self, message):\n        if not self.params.get('consoletitle', False):\n            return\n        if compat_os_name == 'nt':\n            if ctypes.windll.kernel32.GetConsoleWindow():\n                # c_wchar_p() might not be necessary if `message` is\n                # already of type unicode()\n                ctypes.windll.kernel32.SetConsoleTitleW(ctypes.c_wchar_p(message))\n        elif 'TERM' in os.environ:\n            self._write_string('\\033]0;%s\\007' % message, self._screen_file)\n\n    def save_console_title(self):\n        if not self.params.get('consoletitle', False):\n            return\n        if compat_os_name != 'nt' and 'TERM' in os.environ:\n            # Save the title on stack\n            self._write_string('\\033[22;0t', self._screen_file)\n\n    def restore_console_title(self):\n        if not self.params.get('consoletitle', False):\n            return\n        if compat_os_name != 'nt' and 'TERM' in os.environ:\n            # Restore the title from stack\n            self._write_string('\\033[23;0t', self._screen_file)\n\n    def __enter__(self):\n        self.save_console_title()\n        return self\n\n    def __exit__(self, *args):\n        self.restore_console_title()\n\n        if self.params.get('cookiefile') is not None:\n            self.cookiejar.save()\n\n    def trouble(self, message=None, tb=None):\n        \"\"\"Determine action to take when a download problem appears.\n\n        Depending on if the downloader has been configured to ignore\n        download errors or not, this method may throw an exception or\n        not when errors are found, after printing the message.\n\n        tb, if given, is additional traceback information.\n        \"\"\"\n        if message is not None:\n            self.to_stderr(message)\n        if self.params.get('verbose'):\n            if tb is None:\n                if sys.exc_info()[0]:  # if .trouble has been called from an except block\n                    tb = ''\n                    if hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n                        tb += ''.join(traceback.format_exception(*sys.exc_info()[1].exc_info))\n                    tb += encode_compat_str(traceback.format_exc())\n                else:\n                    tb_data = traceback.format_list(traceback.extract_stack())\n                    tb = ''.join(tb_data)\n            self.to_stderr(tb)\n        if not self.params.get('ignoreerrors', False):\n            if sys.exc_info()[0] and hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n                exc_info = sys.exc_info()[1].exc_info\n            else:\n                exc_info = sys.exc_info()\n            raise DownloadError(message, exc_info)\n        self._download_retcode = 1\n\n    def report_warning(self, message):\n        '''\n        Print the message to stderr, it will be prefixed with 'WARNING:'\n        If stderr is a tty file the 'WARNING:' will be colored\n        '''\n        if self.params.get('logger') is not None:\n            self.params['logger'].warning(message)\n        else:\n            if self.params.get('no_warnings'):\n                return\n            if not self.params.get('no_color') and self._err_file.isatty() and compat_os_name != 'nt':\n                _msg_header = '\\033[0;33mWARNING:\\033[0m'\n            else:\n                _msg_header = 'WARNING:'\n            warning_message = '%s %s' % (_msg_header, message)\n            self.to_stderr(warning_message)\n\n    def report_error(self, message, tb=None):\n        '''\n        Do the same as trouble, but prefixes the message with 'ERROR:', colored\n        in red if stderr is a tty file.\n        '''\n        if not self.params.get('no_color') and self._err_file.isatty() and compat_os_name != 'nt':\n            _msg_header = '\\033[0;31mERROR:\\033[0m'\n        else:\n            _msg_header = 'ERROR:'\n        error_message = '%s %s' % (_msg_header, message)\n        self.trouble(error_message, tb)\n\n    def report_file_already_downloaded(self, file_name):\n        \"\"\"Report file has already been fully downloaded.\"\"\"\n        try:\n            self.to_screen('[download] %s has already been downloaded' % file_name)\n        except UnicodeEncodeError:\n            self.to_screen('[download] The file has already been downloaded')\n\n    def prepare_filename(self, info_dict):\n        \"\"\"Generate the output filename.\"\"\"\n        try:\n            template_dict = dict(info_dict)\n\n            template_dict['epoch'] = int(time.time())\n            autonumber_size = self.params.get('autonumber_size')\n            if autonumber_size is None:\n                autonumber_size = 5\n            template_dict['autonumber'] = self.params.get('autonumber_start', 1) - 1 + self._num_downloads\n            if template_dict.get('resolution') is None:\n                if template_dict.get('width') and template_dict.get('height'):\n                    template_dict['resolution'] = '%dx%d' % (template_dict['width'], template_dict['height'])\n                elif template_dict.get('height'):\n                    template_dict['resolution'] = '%sp' % template_dict['height']\n                elif template_dict.get('width'):\n                    template_dict['resolution'] = '%dx?' % template_dict['width']\n\n            sanitize = lambda k, v: sanitize_filename(\n                compat_str(v),\n                restricted=self.params.get('restrictfilenames'),\n                is_id=(k == 'id' or k.endswith('_id')))\n            template_dict = dict((k, v if isinstance(v, compat_numeric_types) else sanitize(k, v))\n                                 for k, v in template_dict.items()\n                                 if v is not None and not isinstance(v, (list, tuple, dict)))\n            template_dict = collections.defaultdict(lambda: 'NA', template_dict)\n\n            outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)\n\n            # For fields playlist_index and autonumber convert all occurrences\n            # of %(field)s to %(field)0Nd for backward compatibility\n            field_size_compat_map = {\n                'playlist_index': len(str(template_dict['n_entries'])),\n                'autonumber': autonumber_size,\n            }\n            FIELD_SIZE_COMPAT_RE = r'(?<!%)%\\((?P<field>autonumber|playlist_index)\\)s'\n            mobj = re.search(FIELD_SIZE_COMPAT_RE, outtmpl)\n            if mobj:\n                outtmpl = re.sub(\n                    FIELD_SIZE_COMPAT_RE,\n                    r'%%(\\1)0%dd' % field_size_compat_map[mobj.group('field')],\n                    outtmpl)\n\n            # Missing numeric fields used together with integer presentation types\n            # in format specification will break the argument substitution since\n            # string 'NA' is returned for missing fields. We will patch output\n            # template for missing fields to meet string presentation type.\n            for numeric_field in self._NUMERIC_FIELDS:\n                if numeric_field not in template_dict:\n                    # As of [1] format syntax is:\n                    #  %[mapping_key][conversion_flags][minimum_width][.precision][length_modifier]type\n                    # 1. https://docs.python.org/2/library/stdtypes.html#string-formatting\n                    FORMAT_RE = r'''(?x)\n                        (?<!%)\n                        %\n                        \\({0}\\)  # mapping key\n                        (?:[#0\\-+ ]+)?  # conversion flags (optional)\n                        (?:\\d+)?  # minimum field width (optional)\n                        (?:\\.\\d+)?  # precision (optional)\n                        [hlL]?  # length modifier (optional)\n                        [diouxXeEfFgGcrs%]  # conversion type\n                    '''\n                    outtmpl = re.sub(\n                        FORMAT_RE.format(numeric_field),\n                        r'%({0})s'.format(numeric_field), outtmpl)\n\n            # expand_path translates '%%' into '%' and '$$' into '$'\n            # correspondingly that is not what we want since we need to keep\n            # '%%' intact for template dict substitution step. Working around\n            # with boundary-alike separator hack.\n            sep = ''.join([random.choice(ascii_letters) for _ in range(32)])\n            outtmpl = outtmpl.replace('%%', '%{0}%'.format(sep)).replace('$$', '${0}$'.format(sep))\n\n            # outtmpl should be expand_path'ed before template dict substitution\n            # because meta fields may contain env variables we don't want to\n            # be expanded. For example, for outtmpl \"%(title)s.%(ext)s\" and\n            # title \"Hello $PATH\", we don't want `$PATH` to be expanded.\n            filename = expand_path(outtmpl).replace(sep, '') % template_dict\n\n            # Temporary fix for #4787\n            # 'Treat' all problem characters by passing filename through preferredencoding\n            # to workaround encoding issues with subprocess on python2 @ Windows\n            if sys.version_info < (3, 0) and sys.platform == 'win32':\n                filename = encodeFilename(filename, True).decode(preferredencoding())\n            return sanitize_path(filename)\n        except ValueError as err:\n            self.report_error('Error in output template: ' + str(err) + ' (encoding: ' + repr(preferredencoding()) + ')')\n            return None\n\n    def _match_entry(self, info_dict, incomplete):\n        \"\"\" Returns None iff the file should be downloaded \"\"\"\n\n        video_title = info_dict.get('title', info_dict.get('id', 'video'))\n        if 'title' in info_dict:\n            # This can happen when we're just evaluating the playlist\n            title = info_dict['title']\n            matchtitle = self.params.get('matchtitle', False)\n            if matchtitle:\n                if not re.search(matchtitle, title, re.IGNORECASE):\n                    return '\"' + title + '\" title did not match pattern \"' + matchtitle + '\"'\n            rejecttitle = self.params.get('rejecttitle', False)\n            if rejecttitle:\n                if re.search(rejecttitle, title, re.IGNORECASE):\n                    return '\"' + title + '\" title matched reject pattern \"' + rejecttitle + '\"'\n        date = info_dict.get('upload_date')\n        if date is not None:\n            dateRange = self.params.get('daterange', DateRange())\n            if date not in dateRange:\n                return '%s upload date is not in range %s' % (date_from_str(date).isoformat(), dateRange)\n        view_count = info_dict.get('view_count')\n        if view_count is not None:\n            min_views = self.params.get('min_views')\n            if min_views is not None and view_count < min_views:\n                return 'Skipping %s, because it has not reached minimum view count (%d/%d)' % (video_title, view_count, min_views)\n            max_views = self.params.get('max_views')\n            if max_views is not None and view_count > max_views:\n                return 'Skipping %s, because it has exceeded the maximum view count (%d/%d)' % (video_title, view_count, max_views)\n        if age_restricted(info_dict.get('age_limit'), self.params.get('age_limit')):\n            return 'Skipping \"%s\" because it is age restricted' % video_title\n        if self.in_download_archive(info_dict):\n            return '%s has already been recorded in archive' % video_title\n\n        if not incomplete:\n            match_filter = self.params.get('match_filter')\n            if match_filter is not None:\n                ret = match_filter(info_dict)\n                if ret is not None:\n                    return ret\n\n        return None\n\n    @staticmethod\n    def add_extra_info(info_dict, extra_info):\n        '''Set the keys from extra_info in info dict if they are missing'''\n        for key, value in extra_info.items():\n            info_dict.setdefault(key, value)\n\n    def extract_info(self, url, download=True, ie_key=None, extra_info={},\n                     process=True, force_generic_extractor=False):\n        '''\n        Returns a list with a dictionary for each video we find.\n        If 'download', also downloads the videos.\n        extra_info is a dict containing the extra values to add to each result\n        '''\n\n        if not ie_key and force_generic_extractor:\n            ie_key = 'Generic'\n\n        if ie_key:\n            ies = [self.get_info_extractor(ie_key)]\n        else:\n            ies = self._ies\n\n        for ie in ies:\n            if not ie.suitable(url):\n                continue\n\n            ie = self.get_info_extractor(ie.ie_key())\n            if not ie.working():\n                self.report_warning('The program functionality for this site has been marked as broken, '\n                                    'and will probably not work.')\n\n            try:\n                ie_result = ie.extract(url)\n                if ie_result is None:  # Finished already (backwards compatibility; listformats and friends should be moved here)\n                    break\n                if isinstance(ie_result, list):\n                    # Backwards compatibility: old IE result format\n                    ie_result = {\n                        '_type': 'compat_list',\n                        'entries': ie_result,\n                    }\n                self.add_default_extra_info(ie_result, ie, url)\n                if process:\n                    return self.process_ie_result(ie_result, download, extra_info)\n                else:\n                    return ie_result\n            except GeoRestrictedError as e:\n                msg = e.msg\n                if e.countries:\n                    msg += '\\nThis video is available in %s.' % ', '.join(\n                        map(ISO3166Utils.short2full, e.countries))\n                msg += '\\nYou might want to use a VPN or a proxy server (with --proxy) to workaround.'\n                self.report_error(msg)\n                break\n            except ExtractorError as e:  # An error we somewhat expected\n                self.report_error(compat_str(e), e.format_traceback())\n                break\n            except MaxDownloadsReached:\n                raise\n            except Exception as e:\n                if self.params.get('ignoreerrors', False):\n                    self.report_error(error_to_compat_str(e), tb=encode_compat_str(traceback.format_exc()))\n                    break\n                else:\n                    raise\n        else:\n            self.report_error('no suitable InfoExtractor for URL %s' % url)\n\n    def add_default_extra_info(self, ie_result, ie, url):\n        self.add_extra_info(ie_result, {\n            'extractor': ie.IE_NAME,\n            'webpage_url': url,\n            'webpage_url_basename': url_basename(url),\n            'extractor_key': ie.ie_key(),\n        })\n\n    def process_ie_result(self, ie_result, download=True, extra_info={}):\n        \"\"\"\n        Take the result of the ie(may be modified) and resolve all unresolved\n        references (URLs, playlist items).\n\n        It will also download the videos if 'download'.\n        Returns the resolved ie_result.\n        \"\"\"\n        result_type = ie_result.get('_type', 'video')\n\n        if result_type in ('url', 'url_transparent'):\n            ie_result['url'] = sanitize_url(ie_result['url'])\n            extract_flat = self.params.get('extract_flat', False)\n            if ((extract_flat == 'in_playlist' and 'playlist' in extra_info) or\n                    extract_flat is True):\n                if self.params.get('forcejson', False):\n                    self.to_stdout(json.dumps(ie_result))\n                return ie_result\n\n        if result_type == 'video':\n            self.add_extra_info(ie_result, extra_info)\n            return self.process_video_result(ie_result, download=download)\n        elif result_type == 'url':\n            # We have to add extra_info to the results because it may be\n            # contained in a playlist\n            return self.extract_info(ie_result['url'],\n                                     download,\n                                     ie_key=ie_result.get('ie_key'),\n                                     extra_info=extra_info)\n        elif result_type == 'url_transparent':\n            # Use the information from the embedding page\n            info = self.extract_info(\n                ie_result['url'], ie_key=ie_result.get('ie_key'),\n                extra_info=extra_info, download=False, process=False)\n\n            # extract_info may return None when ignoreerrors is enabled and\n            # extraction failed with an error, don't crash and return early\n            # in this case\n            if not info:\n                return info\n\n            force_properties = dict(\n                (k, v) for k, v in ie_result.items() if v is not None)\n            for f in ('_type', 'url', 'id', 'extractor', 'extractor_key', 'ie_key'):\n                if f in force_properties:\n                    del force_properties[f]\n            new_result = info.copy()\n            new_result.update(force_properties)\n\n            # Extracted info may not be a video result (i.e.\n            # info.get('_type', 'video') != video) but rather an url or\n            # url_transparent. In such cases outer metadata (from ie_result)\n            # should be propagated to inner one (info). For this to happen\n            # _type of info should be overridden with url_transparent. This\n            # fixes issue from https://github.com/rg3/youtube-dl/pull/11163.\n            if new_result.get('_type') == 'url':\n                new_result['_type'] = 'url_transparent'\n\n            return self.process_ie_result(\n                new_result, download=download, extra_info=extra_info)\n        elif result_type in ('playlist', 'multi_video'):\n            # We process each entry in the playlist\n            playlist = ie_result.get('title') or ie_result.get('id')\n            self.to_screen('[download] Downloading playlist: %s' % playlist)\n\n            playlist_results = []\n\n            playliststart = self.params.get('playliststart', 1) - 1\n            playlistend = self.params.get('playlistend')\n            # For backwards compatibility, interpret -1 as whole list\n            if playlistend == -1:\n                playlistend = None\n\n            playlistitems_str = self.params.get('playlist_items')\n            playlistitems = None\n            if playlistitems_str is not None:\n                def iter_playlistitems(format):\n                    for string_segment in format.split(','):\n                        if '-' in string_segment:\n                            start, end = string_segment.split('-')\n                            for item in range(int(start), int(end) + 1):\n                                yield int(item)\n                        else:\n                            yield int(string_segment)\n                playlistitems = orderedSet(iter_playlistitems(playlistitems_str))\n\n            ie_entries = ie_result['entries']\n\n            def make_playlistitems_entries(list_ie_entries):\n                num_entries = len(list_ie_entries)\n                return [\n                    list_ie_entries[i - 1] for i in playlistitems\n                    if -num_entries <= i - 1 < num_entries]\n\n            def report_download(num_entries):\n                self.to_screen(\n                    '[%s] playlist %s: Downloading %d videos' %\n                    (ie_result['extractor'], playlist, num_entries))\n\n            if isinstance(ie_entries, list):\n                n_all_entries = len(ie_entries)\n                if playlistitems:\n                    entries = make_playlistitems_entries(ie_entries)\n                else:\n                    entries = ie_entries[playliststart:playlistend]\n                n_entries = len(entries)\n                self.to_screen(\n                    '[%s] playlist %s: Collected %d video ids (downloading %d of them)' %\n                    (ie_result['extractor'], playlist, n_all_entries, n_entries))\n            elif isinstance(ie_entries, PagedList):\n                if playlistitems:\n                    entries = []\n                    for item in playlistitems:\n                        entries.extend(ie_entries.getslice(\n                            item - 1, item\n                        ))\n                else:\n                    entries = ie_entries.getslice(\n                        playliststart, playlistend)\n                n_entries = len(entries)\n                report_download(n_entries)\n            else:  # iterable\n                if playlistitems:\n                    entries = make_playlistitems_entries(list(itertools.islice(\n                        ie_entries, 0, max(playlistitems))))\n                else:\n                    entries = list(itertools.islice(\n                        ie_entries, playliststart, playlistend))\n                n_entries = len(entries)\n                report_download(n_entries)\n\n            if self.params.get('playlistreverse', False):\n                entries = entries[::-1]\n\n            if self.params.get('playlistrandom', False):\n                random.shuffle(entries)\n\n            x_forwarded_for = ie_result.get('__x_forwarded_for_ip')\n\n            for i, entry in enumerate(entries, 1):\n                self.to_screen('[download] Downloading video %s of %s' % (i, n_entries))\n                # This __x_forwarded_for_ip thing is a bit ugly but requires\n                # minimal changes\n                if x_forwarded_for:\n                    entry['__x_forwarded_for_ip'] = x_forwarded_for\n                extra = {\n                    'n_entries': n_entries,\n                    'playlist': playlist,\n                    'playlist_id': ie_result.get('id'),\n                    'playlist_title': ie_result.get('title'),\n                    'playlist_uploader': ie_result.get('uploader'),\n                    'playlist_uploader_id': ie_result.get('uploader_id'),\n                    'playlist_index': i + playliststart,\n                    'extractor': ie_result['extractor'],\n                    'webpage_url': ie_result['webpage_url'],\n                    'webpage_url_basename': url_basename(ie_result['webpage_url']),\n                    'extractor_key': ie_result['extractor_key'],\n                }\n\n                reason = self._match_entry(entry, incomplete=True)\n                if reason is not None:\n                    self.to_screen('[download] ' + reason)\n                    continue\n\n                entry_result = self.process_ie_result(entry,\n                                                      download=download,\n                                                      extra_info=extra)\n                playlist_results.append(entry_result)\n            ie_result['entries'] = playlist_results\n            self.to_screen('[download] Finished downloading playlist: %s' % playlist)\n            return ie_result\n        elif result_type == 'compat_list':\n            self.report_warning(\n                'Extractor %s returned a compat_list result. '\n                'It needs to be updated.' % ie_result.get('extractor'))\n\n            def _fixup(r):\n                self.add_extra_info(\n                    r,\n                    {\n                        'extractor': ie_result['extractor'],\n                        'webpage_url': ie_result['webpage_url'],\n                        'webpage_url_basename': url_basename(ie_result['webpage_url']),\n                        'extractor_key': ie_result['extractor_key'],\n                    }\n                )\n                return r\n            ie_result['entries'] = [\n                self.process_ie_result(_fixup(r), download, extra_info)\n                for r in ie_result['entries']\n            ]\n            return ie_result\n        else:\n            raise Exception('Invalid result type: %s' % result_type)\n\n    def _build_format_filter(self, filter_spec):\n        \" Returns a function to filter the formats according to the filter_spec \"\n\n        OPERATORS = {\n            '<': operator.lt,\n            '<=': operator.le,\n            '>': operator.gt,\n            '>=': operator.ge,\n            '=': operator.eq,\n            '!=': operator.ne,\n        }\n        operator_rex = re.compile(r'''(?x)\\s*\n            (?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\n            \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*\n            (?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\n            $\n            ''' % '|'.join(map(re.escape, OPERATORS.keys())))\n        m = operator_rex.search(filter_spec)\n        if m:\n            try:\n                comparison_value = int(m.group('value'))\n            except ValueError:\n                comparison_value = parse_filesize(m.group('value'))\n                if comparison_value is None:\n                    comparison_value = parse_filesize(m.group('value') + 'B')\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid value %r in format specification %r' % (\n                            m.group('value'), filter_spec))\n            op = OPERATORS[m.group('op')]\n\n        if not m:\n            STR_OPERATORS = {\n                '=': operator.eq,\n                '!=': operator.ne,\n                '^=': lambda attr, value: attr.startswith(value),\n                '$=': lambda attr, value: attr.endswith(value),\n                '*=': lambda attr, value: value in attr,\n            }\n            str_operator_rex = re.compile(r'''(?x)\n                \\s*(?P<key>ext|acodec|vcodec|container|protocol|format_id)\n                \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\n                \\s*(?P<value>[a-zA-Z0-9._-]+)\n                \\s*$\n                ''' % '|'.join(map(re.escape, STR_OPERATORS.keys())))\n            m = str_operator_rex.search(filter_spec)\n            if m:\n                comparison_value = m.group('value')\n                op = STR_OPERATORS[m.group('op')]\n\n        if not m:\n            raise ValueError('Invalid filter specification %r' % filter_spec)\n\n        def _filter(f):\n            actual_value = f.get(m.group('key'))\n            if actual_value is None:\n                return m.group('none_inclusive')\n            return op(actual_value, comparison_value)\n        return _filter\n\n    def _default_format_spec(self, info_dict, download=True):\n\n        def can_merge():\n            merger = FFmpegMergerPP(self)\n            return merger.available and merger.can_merge()\n\n        def prefer_best():\n            if self.params.get('simulate', False):\n                return False\n            if not download:\n                return False\n            if self.params.get('outtmpl', DEFAULT_OUTTMPL) == '-':\n                return True\n            if info_dict.get('is_live'):\n                return True\n            if not can_merge():\n                return True\n            return False\n\n        req_format_list = ['bestvideo+bestaudio', 'best']\n        if prefer_best():\n            req_format_list.reverse()\n        return '/'.join(req_format_list)\n\n    def build_format_selector(self, format_spec):\n        def syntax_error(note, start):\n            message = (\n                'Invalid format specification: '\n                '{0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1]))\n            return SyntaxError(message)\n\n        PICKFIRST = 'PICKFIRST'\n        MERGE = 'MERGE'\n        SINGLE = 'SINGLE'\n        GROUP = 'GROUP'\n        FormatSelector = collections.namedtuple('FormatSelector', ['type', 'selector', 'filters'])\n\n        def _parse_filter(tokens):\n            filter_parts = []\n            for type, string, start, _, _ in tokens:\n                if type == tokenize.OP and string == ']':\n                    return ''.join(filter_parts)\n                else:\n                    filter_parts.append(string)\n\n        def _remove_unused_ops(tokens):\n            # Remove operators that we don't use and join them with the surrounding strings\n            # for example: 'mp4' '-' 'baseline' '-' '16x9' is converted to 'mp4-baseline-16x9'\n            ALLOWED_OPS = ('/', '+', ',', '(', ')')\n            last_string, last_start, last_end, last_line = None, None, None, None\n            for type, string, start, end, line in tokens:\n                if type == tokenize.OP and string == '[':\n                    if last_string:\n                        yield tokenize.NAME, last_string, last_start, last_end, last_line\n                        last_string = None\n                    yield type, string, start, end, line\n                    # everything inside brackets will be handled by _parse_filter\n                    for type, string, start, end, line in tokens:\n                        yield type, string, start, end, line\n                        if type == tokenize.OP and string == ']':\n                            break\n                elif type == tokenize.OP and string in ALLOWED_OPS:\n                    if last_string:\n                        yield tokenize.NAME, last_string, last_start, last_end, last_line\n                        last_string = None\n                    yield type, string, start, end, line\n                elif type in [tokenize.NAME, tokenize.NUMBER, tokenize.OP]:\n                    if not last_string:\n                        last_string = string\n                        last_start = start\n                        last_end = end\n                    else:\n                        last_string += string\n            if last_string:\n                yield tokenize.NAME, last_string, last_start, last_end, last_line\n\n        def _parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False):\n            selectors = []\n            current_selector = None\n            for type, string, start, _, _ in tokens:\n                # ENCODING is only defined in python 3.x\n                if type == getattr(tokenize, 'ENCODING', None):\n                    continue\n                elif type in [tokenize.NAME, tokenize.NUMBER]:\n                    current_selector = FormatSelector(SINGLE, string, [])\n                elif type == tokenize.OP:\n                    if string == ')':\n                        if not inside_group:\n                            # ')' will be handled by the parentheses group\n                            tokens.restore_last_token()\n                        break\n                    elif inside_merge and string in ['/', ',']:\n                        tokens.restore_last_token()\n                        break\n                    elif inside_choice and string == ',':\n                        tokens.restore_last_token()\n                        break\n                    elif string == ',':\n                        if not current_selector:\n                            raise syntax_error('\",\" must follow a format selector', start)\n                        selectors.append(current_selector)\n                        current_selector = None\n                    elif string == '/':\n                        if not current_selector:\n                            raise syntax_error('\"/\" must follow a format selector', start)\n                        first_choice = current_selector\n                        second_choice = _parse_format_selection(tokens, inside_choice=True)\n                        current_selector = FormatSelector(PICKFIRST, (first_choice, second_choice), [])\n                    elif string == '[':\n                        if not current_selector:\n                            current_selector = FormatSelector(SINGLE, 'best', [])\n                        format_filter = _parse_filter(tokens)\n                        current_selector.filters.append(format_filter)\n                    elif string == '(':\n                        if current_selector:\n                            raise syntax_error('Unexpected \"(\"', start)\n                        group = _parse_format_selection(tokens, inside_group=True)\n                        current_selector = FormatSelector(GROUP, group, [])\n                    elif string == '+':\n                        video_selector = current_selector\n                        audio_selector = _parse_format_selection(tokens, inside_merge=True)\n                        if not video_selector or not audio_selector:\n                            raise syntax_error('\"+\" must be between two format selectors', start)\n                        current_selector = FormatSelector(MERGE, (video_selector, audio_selector), [])\n                    else:\n                        raise syntax_error('Operator not recognized: \"{0}\"'.format(string), start)\n                elif type == tokenize.ENDMARKER:\n                    break\n            if current_selector:\n                selectors.append(current_selector)\n            return selectors\n\n        def _build_selector_function(selector):\n            if isinstance(selector, list):\n                fs = [_build_selector_function(s) for s in selector]\n\n                def selector_function(ctx):\n                    for f in fs:\n                        for format in f(ctx):\n                            yield format\n                return selector_function\n            elif selector.type == GROUP:\n                selector_function = _build_selector_function(selector.selector)\n            elif selector.type == PICKFIRST:\n                fs = [_build_selector_function(s) for s in selector.selector]\n\n                def selector_function(ctx):\n                    for f in fs:\n                        picked_formats = list(f(ctx))\n                        if picked_formats:\n                            return picked_formats\n                    return []\n            elif selector.type == SINGLE:\n                format_spec = selector.selector\n\n                def selector_function(ctx):\n                    formats = list(ctx['formats'])\n                    if not formats:\n                        return\n                    if format_spec == 'all':\n                        for f in formats:\n                            yield f\n                    elif format_spec in ['best', 'worst', None]:\n                        format_idx = 0 if format_spec == 'worst' else -1\n                        audiovideo_formats = [\n                            f for f in formats\n                            if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                        if audiovideo_formats:\n                            yield audiovideo_formats[format_idx]\n                        # for extractors with incomplete formats (audio only (soundcloud)\n                        # or video only (imgur)) we will fallback to best/worst\n                        # {video,audio}-only format\n                        elif ctx['incomplete_formats']:\n                            yield formats[format_idx]\n                    elif format_spec == 'bestaudio':\n                        audio_formats = [\n                            f for f in formats\n                            if f.get('vcodec') == 'none']\n                        if audio_formats:\n                            yield audio_formats[-1]\n                    elif format_spec == 'worstaudio':\n                        audio_formats = [\n                            f for f in formats\n                            if f.get('vcodec') == 'none']\n                        if audio_formats:\n                            yield audio_formats[0]\n                    elif format_spec == 'bestvideo':\n                        video_formats = [\n                            f for f in formats\n                            if f.get('acodec') == 'none']\n                        if video_formats:\n                            yield video_formats[-1]\n                    elif format_spec == 'worstvideo':\n                        video_formats = [\n                            f for f in formats\n                            if f.get('acodec') == 'none']\n                        if video_formats:\n                            yield video_formats[0]\n                    else:\n                        extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n                        if format_spec in extensions:\n                            filter_f = lambda f: f['ext'] == format_spec\n                        else:\n                            filter_f = lambda f: f['format_id'] == format_spec\n                        matches = list(filter(filter_f, formats))\n                        if matches:\n                            yield matches[-1]\n            elif selector.type == MERGE:\n                def _merge(formats_info):\n                    format_1, format_2 = [f['format_id'] for f in formats_info]\n                    # The first format must contain the video and the\n                    # second the audio\n                    if formats_info[0].get('vcodec') == 'none':\n                        self.report_error('The first format must '\n                                          'contain the video, try using '\n                                          '\"-f %s+%s\"' % (format_2, format_1))\n                        return\n                    # Formats must be opposite (video+audio)\n                    if formats_info[0].get('acodec') == 'none' and formats_info[1].get('acodec') == 'none':\n                        self.report_error(\n                            'Both formats %s and %s are video-only, you must specify \"-f video+audio\"'\n                            % (format_1, format_2))\n                        return\n                    output_ext = (\n                        formats_info[0]['ext']\n                        if self.params.get('merge_output_format') is None\n                        else self.params['merge_output_format'])\n                    return {\n                        'requested_formats': formats_info,\n                        'format': '%s+%s' % (formats_info[0].get('format'),\n                                             formats_info[1].get('format')),\n                        'format_id': '%s+%s' % (formats_info[0].get('format_id'),\n                                                formats_info[1].get('format_id')),\n                        'width': formats_info[0].get('width'),\n                        'height': formats_info[0].get('height'),\n                        'resolution': formats_info[0].get('resolution'),\n                        'fps': formats_info[0].get('fps'),\n                        'vcodec': formats_info[0].get('vcodec'),\n                        'vbr': formats_info[0].get('vbr'),\n                        'stretched_ratio': formats_info[0].get('stretched_ratio'),\n                        'acodec': formats_info[1].get('acodec'),\n                        'abr': formats_info[1].get('abr'),\n                        'ext': output_ext,\n                    }\n                video_selector, audio_selector = map(_build_selector_function, selector.selector)\n\n                def selector_function(ctx):\n                    for pair in itertools.product(\n                            video_selector(copy.deepcopy(ctx)), audio_selector(copy.deepcopy(ctx))):\n                        yield _merge(pair)\n\n            filters = [self._build_format_filter(f) for f in selector.filters]\n\n            def final_selector(ctx):\n                ctx_copy = copy.deepcopy(ctx)\n                for _filter in filters:\n                    ctx_copy['formats'] = list(filter(_filter, ctx_copy['formats']))\n                return selector_function(ctx_copy)\n            return final_selector\n\n        stream = io.BytesIO(format_spec.encode('utf-8'))\n        try:\n            tokens = list(_remove_unused_ops(compat_tokenize_tokenize(stream.readline)))\n        except tokenize.TokenError:\n            raise syntax_error('Missing closing/opening brackets or parenthesis', (0, len(format_spec)))\n\n        class TokenIterator(object):\n            def __init__(self, tokens):\n                self.tokens = tokens\n                self.counter = 0\n\n            def __iter__(self):\n                return self\n\n            def __next__(self):\n                if self.counter >= len(self.tokens):\n                    raise StopIteration()\n                value = self.tokens[self.counter]\n                self.counter += 1\n                return value\n\n            next = __next__\n\n            def restore_last_token(self):\n                self.counter -= 1\n\n        parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n        return _build_selector_function(parsed_selector)\n\n    def _calc_headers(self, info_dict):\n        res = std_headers.copy()\n\n        add_headers = info_dict.get('http_headers')\n        if add_headers:\n            res.update(add_headers)\n\n        cookies = self._calc_cookies(info_dict)\n        if cookies:\n            res['Cookie'] = cookies\n\n        if 'X-Forwarded-For' not in res:\n            x_forwarded_for_ip = info_dict.get('__x_forwarded_for_ip')\n            if x_forwarded_for_ip:\n                res['X-Forwarded-For'] = x_forwarded_for_ip\n\n        return res\n\n    def _calc_cookies(self, info_dict):\n        pr = sanitized_Request(info_dict['url'])\n        self.cookiejar.add_cookie_header(pr)\n        return pr.get_header('Cookie')\n\n    def process_video_result(self, info_dict, download=True):\n        assert info_dict.get('_type', 'video') == 'video'\n\n        if 'id' not in info_dict:\n            raise ExtractorError('Missing \"id\" field in extractor result')\n        if 'title' not in info_dict:\n            raise ExtractorError('Missing \"title\" field in extractor result')\n\n        def report_force_conversion(field, field_not, conversion):\n            self.report_warning(\n                '\"%s\" field is not %s - forcing %s conversion, there is an error in extractor'\n                % (field, field_not, conversion))\n\n        def sanitize_string_field(info, string_field):\n            field = info.get(string_field)\n            if field is None or isinstance(field, compat_str):\n                return\n            report_force_conversion(string_field, 'a string', 'string')\n            info[string_field] = compat_str(field)\n\n        def sanitize_numeric_fields(info):\n            for numeric_field in self._NUMERIC_FIELDS:\n                field = info.get(numeric_field)\n                if field is None or isinstance(field, compat_numeric_types):\n                    continue\n                report_force_conversion(numeric_field, 'numeric', 'int')\n                info[numeric_field] = int_or_none(field)\n\n        sanitize_string_field(info_dict, 'id')\n        sanitize_numeric_fields(info_dict)\n\n        if 'playlist' not in info_dict:\n            # It isn't part of a playlist\n            info_dict['playlist'] = None\n            info_dict['playlist_index'] = None\n\n        thumbnails = info_dict.get('thumbnails')\n        if thumbnails is None:\n            thumbnail = info_dict.get('thumbnail')\n            if thumbnail:\n                info_dict['thumbnails'] = thumbnails = [{'url': thumbnail}]\n        if thumbnails:\n            thumbnails.sort(key=lambda t: (\n                t.get('preference') if t.get('preference') is not None else -1,\n                t.get('width') if t.get('width') is not None else -1,\n                t.get('height') if t.get('height') is not None else -1,\n                t.get('id') if t.get('id') is not None else '', t.get('url')))\n            for i, t in enumerate(thumbnails):\n                t['url'] = sanitize_url(t['url'])\n                if t.get('width') and t.get('height'):\n                    t['resolution'] = '%dx%d' % (t['width'], t['height'])\n                if t.get('id') is None:\n                    t['id'] = '%d' % i\n\n        if self.params.get('list_thumbnails'):\n            self.list_thumbnails(info_dict)\n            return\n\n        thumbnail = info_dict.get('thumbnail')\n        if thumbnail:\n            info_dict['thumbnail'] = sanitize_url(thumbnail)\n        elif thumbnails:\n            info_dict['thumbnail'] = thumbnails[-1]['url']\n\n        if 'display_id' not in info_dict and 'id' in info_dict:\n            info_dict['display_id'] = info_dict['id']\n\n        if info_dict.get('upload_date') is None and info_dict.get('timestamp') is not None:\n            # Working around out-of-range timestamp values (e.g. negative ones on Windows,\n            # see http://bugs.python.org/issue1646728)\n            try:\n                upload_date = datetime.datetime.utcfromtimestamp(info_dict['timestamp'])\n                info_dict['upload_date'] = upload_date.strftime('%Y%m%d')\n            except (ValueError, OverflowError, OSError):\n                pass\n\n        # Auto generate title fields corresponding to the *_number fields when missing\n        # in order to always have clean titles. This is very common for TV series.\n        for field in ('chapter', 'season', 'episode'):\n            if info_dict.get('%s_number' % field) is not None and not info_dict.get(field):\n                info_dict[field] = '%s %d' % (field.capitalize(), info_dict['%s_number' % field])\n\n        subtitles = info_dict.get('subtitles')\n        if subtitles:\n            for _, subtitle in subtitles.items():\n                for subtitle_format in subtitle:\n                    if subtitle_format.get('url'):\n                        subtitle_format['url'] = sanitize_url(subtitle_format['url'])\n                    if subtitle_format.get('ext') is None:\n                        subtitle_format['ext'] = determine_ext(subtitle_format['url']).lower()\n\n        if self.params.get('listsubtitles', False):\n            if 'automatic_captions' in info_dict:\n                self.list_subtitles(info_dict['id'], info_dict.get('automatic_captions'), 'automatic captions')\n            self.list_subtitles(info_dict['id'], subtitles, 'subtitles')\n            return\n        info_dict['requested_subtitles'] = self.process_subtitles(\n            info_dict['id'], subtitles,\n            info_dict.get('automatic_captions'))\n\n        # We now pick which formats have to be downloaded\n        if info_dict.get('formats') is None:\n            # There's only one format available\n            formats = [info_dict]\n        else:\n            formats = info_dict['formats']\n\n        if not formats:\n            raise ExtractorError('No video formats found!')\n\n        def is_wellformed(f):\n            url = f.get('url')\n            if not url:\n                self.report_warning(\n                    '\"url\" field is missing or empty - skipping format, '\n                    'there is an error in extractor')\n                return False\n            if isinstance(url, bytes):\n                sanitize_string_field(f, 'url')\n            return True\n\n        # Filter out malformed formats for better extraction robustness\n        formats = list(filter(is_wellformed, formats))\n\n        formats_dict = {}\n\n        # We check that all the formats have the format and format_id fields\n        for i, format in enumerate(formats):\n            sanitize_string_field(format, 'format_id')\n            sanitize_numeric_fields(format)\n            format['url'] = sanitize_url(format['url'])\n            if not format.get('format_id'):\n                format['format_id'] = compat_str(i)\n            else:\n                # Sanitize format_id from characters used in format selector expression\n                format['format_id'] = re.sub(r'[\\s,/+\\[\\]()]', '_', format['format_id'])\n            format_id = format['format_id']\n            if format_id not in formats_dict:\n                formats_dict[format_id] = []\n            formats_dict[format_id].append(format)\n\n        # Make sure all formats have unique format_id\n        for format_id, ambiguous_formats in formats_dict.items():\n            if len(ambiguous_formats) > 1:\n                for i, format in enumerate(ambiguous_formats):\n                    format['format_id'] = '%s-%d' % (format_id, i)\n\n        for i, format in enumerate(formats):\n            if format.get('format') is None:\n                format['format'] = '{id} - {res}{note}'.format(\n                    id=format['format_id'],\n                    res=self.format_resolution(format),\n                    note=' ({0})'.format(format['format_note']) if format.get('format_note') is not None else '',\n                )\n            # Automatically determine file extension if missing\n            if format.get('ext') is None:\n                format['ext'] = determine_ext(format['url']).lower()\n            # Automatically determine protocol if missing (useful for format\n            # selection purposes)\n            if format.get('protocol') is None:\n                format['protocol'] = determine_protocol(format)\n            # Add HTTP headers, so that external programs can use them from the\n            # json output\n            full_format_info = info_dict.copy()\n            full_format_info.update(format)\n            format['http_headers'] = self._calc_headers(full_format_info)\n        # Remove private housekeeping stuff\n        if '__x_forwarded_for_ip' in info_dict:\n            del info_dict['__x_forwarded_for_ip']\n\n        # TODO Central sorting goes here\n\n        if formats[0] is not info_dict:\n            # only set the 'formats' fields if the original info_dict list them\n            # otherwise we end up with a circular reference, the first (and unique)\n            # element in the 'formats' field in info_dict is info_dict itself,\n            # which can't be exported to json\n            info_dict['formats'] = formats\n        if self.params.get('listformats'):\n            self.list_formats(info_dict)\n            return\n\n        req_format = self.params.get('format')\n        if req_format is None:\n            req_format = self._default_format_spec(info_dict, download=download)\n            if self.params.get('verbose'):\n                self.to_stdout('[debug] Default format spec: %s' % req_format)\n\n        format_selector = self.build_format_selector(req_format)\n\n        # While in format selection we may need to have an access to the original\n        # format set in order to calculate some metrics or do some processing.\n        # For now we need to be able to guess whether original formats provided\n        # by extractor are incomplete or not (i.e. whether extractor provides only\n        # video-only or audio-only formats) for proper formats selection for\n        # extractors with such incomplete formats (see\n        # https://github.com/rg3/youtube-dl/pull/5556).\n        # Since formats may be filtered during format selection and may not match\n        # the original formats the results may be incorrect. Thus original formats\n        # or pre-calculated metrics should be passed to format selection routines\n        # as well.\n        # We will pass a context object containing all necessary additional data\n        # instead of just formats.\n        # This fixes incorrect format selection issue (see\n        # https://github.com/rg3/youtube-dl/issues/10083).\n        incomplete_formats = (\n            # All formats are video-only or\n            all(f.get('vcodec') != 'none' and f.get('acodec') == 'none' for f in formats) or\n            # all formats are audio-only\n            all(f.get('vcodec') == 'none' and f.get('acodec') != 'none' for f in formats))\n\n        ctx = {\n            'formats': formats,\n            'incomplete_formats': incomplete_formats,\n        }\n\n        formats_to_download = list(format_selector(ctx))\n        if not formats_to_download:\n            raise ExtractorError('requested format not available',\n                                 expected=True)\n\n        if download:\n            if len(formats_to_download) > 1:\n                self.to_screen('[info] %s: downloading video in %s formats' % (info_dict['id'], len(formats_to_download)))\n            for format in formats_to_download:\n                new_info = dict(info_dict)\n                new_info.update(format)\n                self.process_info(new_info)\n        # We update the info dict with the best quality format (backwards compatibility)\n        info_dict.update(formats_to_download[-1])\n        return info_dict\n\n    def process_subtitles(self, video_id, normal_subtitles, automatic_captions):\n        \"\"\"Select the requested subtitles and their format\"\"\"\n        available_subs = {}\n        if normal_subtitles and self.params.get('writesubtitles'):\n            available_subs.update(normal_subtitles)\n        if automatic_captions and self.params.get('writeautomaticsub'):\n            for lang, cap_info in automatic_captions.items():\n                if lang not in available_subs:\n                    available_subs[lang] = cap_info\n\n        if (not self.params.get('writesubtitles') and not\n                self.params.get('writeautomaticsub') or not\n                available_subs):\n            return None\n\n        if self.params.get('allsubtitles', False):\n            requested_langs = available_subs.keys()\n        else:\n            if self.params.get('subtitleslangs', False):\n                requested_langs = self.params.get('subtitleslangs')\n            elif 'en' in available_subs:\n                requested_langs = ['en']\n            else:\n                requested_langs = [list(available_subs.keys())[0]]\n\n        formats_query = self.params.get('subtitlesformat', 'best')\n        formats_preference = formats_query.split('/') if formats_query else []\n        subs = {}\n        for lang in requested_langs:\n            formats = available_subs.get(lang)\n            if formats is None:\n                self.report_warning('%s subtitles not available for %s' % (lang, video_id))\n                continue\n            for ext in formats_preference:\n                if ext == 'best':\n                    f = formats[-1]\n                    break\n                matches = list(filter(lambda f: f['ext'] == ext, formats))\n                if matches:\n                    f = matches[-1]\n                    break\n            else:\n                f = formats[-1]\n                self.report_warning(\n                    'No subtitle format found matching \"%s\" for language %s, '\n                    'using %s' % (formats_query, lang, f['ext']))\n            subs[lang] = f\n        return subs\n\n    def process_info(self, info_dict):\n        \"\"\"Process a single resolved IE result.\"\"\"\n\n        assert info_dict.get('_type', 'video') == 'video'\n\n        max_downloads = self.params.get('max_downloads')\n        if max_downloads is not None:\n            if self._num_downloads >= int(max_downloads):\n                raise MaxDownloadsReached()\n\n        info_dict['fulltitle'] = info_dict['title']\n        if len(info_dict['title']) > 200:\n            info_dict['title'] = info_dict['title'][:197] + '...'\n\n        if 'format' not in info_dict:\n            info_dict['format'] = info_dict['ext']\n\n        reason = self._match_entry(info_dict, incomplete=False)\n        if reason is not None:\n            self.to_screen('[download] ' + reason)\n            return\n\n        self._num_downloads += 1\n\n        info_dict['_filename'] = filename = self.prepare_filename(info_dict)\n\n        # Forced printings\n        if self.params.get('forcetitle', False):\n            self.to_stdout(info_dict['fulltitle'])\n        if self.params.get('forceid', False):\n            self.to_stdout(info_dict['id'])\n        if self.params.get('forceurl', False):\n            if info_dict.get('requested_formats') is not None:\n                for f in info_dict['requested_formats']:\n                    self.to_stdout(f['url'] + f.get('play_path', ''))\n            else:\n                # For RTMP URLs, also include the playpath\n                self.to_stdout(info_dict['url'] + info_dict.get('play_path', ''))\n        if self.params.get('forcethumbnail', False) and info_dict.get('thumbnail') is not None:\n            self.to_stdout(info_dict['thumbnail'])\n        if self.params.get('forcedescription', False) and info_dict.get('description') is not None:\n            self.to_stdout(info_dict['description'])\n        if self.params.get('forcefilename', False) and filename is not None:\n            self.to_stdout(filename)\n        if self.params.get('forceduration', False) and info_dict.get('duration') is not None:\n            self.to_stdout(formatSeconds(info_dict['duration']))\n        if self.params.get('forceformat', False):\n            self.to_stdout(info_dict['format'])\n        if self.params.get('forcejson', False):\n            self.to_stdout(json.dumps(info_dict))\n\n        # Do nothing else if in simulate mode\n        if self.params.get('simulate', False):\n            return\n\n        if filename is None:\n            return\n\n        def ensure_dir_exists(path):\n            try:\n                dn = os.path.dirname(path)\n                if dn and not os.path.exists(dn):\n                    os.makedirs(dn)\n                return True\n            except (OSError, IOError) as err:\n                self.report_error('unable to create directory ' + error_to_compat_str(err))\n                return False\n\n        if not ensure_dir_exists(sanitize_path(encodeFilename(filename))):\n            return\n\n        if self.params.get('writedescription', False):\n            descfn = replace_extension(filename, 'description', info_dict.get('ext'))\n            if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(descfn)):\n                self.to_screen('[info] Video description is already present')\n            elif info_dict.get('description') is None:\n                self.report_warning('There\\'s no description to write.')\n            else:\n                try:\n                    self.to_screen('[info] Writing video description to: ' + descfn)\n                    with io.open(encodeFilename(descfn), 'w', encoding='utf-8') as descfile:\n                        descfile.write(info_dict['description'])\n                except (OSError, IOError):\n                    self.report_error('Cannot write description file ' + descfn)\n                    return\n\n        if self.params.get('writeannotations', False):\n            annofn = replace_extension(filename, 'annotations.xml', info_dict.get('ext'))\n            if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(annofn)):\n                self.to_screen('[info] Video annotations are already present')\n            else:\n                try:\n                    self.to_screen('[info] Writing video annotations to: ' + annofn)\n                    with io.open(encodeFilename(annofn), 'w', encoding='utf-8') as annofile:\n                        annofile.write(info_dict['annotations'])\n                except (KeyError, TypeError):\n                    self.report_warning('There are no annotations to write.')\n                except (OSError, IOError):\n                    self.report_error('Cannot write annotations file: ' + annofn)\n                    return\n\n        subtitles_are_requested = any([self.params.get('writesubtitles', False),\n                                       self.params.get('writeautomaticsub')])\n\n        if subtitles_are_requested and info_dict.get('requested_subtitles'):\n            # subtitles download errors are already managed as troubles in relevant IE\n            # that way it will silently go on when used with unsupporting IE\n            subtitles = info_dict['requested_subtitles']\n            ie = self.get_info_extractor(info_dict['extractor_key'])\n            for sub_lang, sub_info in subtitles.items():\n                sub_format = sub_info['ext']\n                sub_filename = subtitles_filename(filename, sub_lang, sub_format)\n                if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(sub_filename)):\n                    self.to_screen('[info] Video subtitle %s.%s is already present' % (sub_lang, sub_format))\n                else:\n                    self.to_screen('[info] Writing video subtitles to: ' + sub_filename)\n                    if sub_info.get('data') is not None:\n                        try:\n                            # Use newline='' to prevent conversion of newline characters\n                            # See https://github.com/rg3/youtube-dl/issues/10268\n                            with io.open(encodeFilename(sub_filename), 'w', encoding='utf-8', newline='') as subfile:\n                                subfile.write(sub_info['data'])\n                        except (OSError, IOError):\n                            self.report_error('Cannot write subtitles file ' + sub_filename)\n                            return\n                    else:\n                        try:\n                            sub_data = ie._request_webpage(\n                                sub_info['url'], info_dict['id'], note=False).read()\n                            with io.open(encodeFilename(sub_filename), 'wb') as subfile:\n                                subfile.write(sub_data)\n                        except (ExtractorError, IOError, OSError, ValueError) as err:\n                            self.report_warning('Unable to download subtitle for \"%s\": %s' %\n                                                (sub_lang, error_to_compat_str(err)))\n                            continue\n\n        if self.params.get('writeinfojson', False):\n            infofn = replace_extension(filename, 'info.json', info_dict.get('ext'))\n            if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(infofn)):\n                self.to_screen('[info] Video description metadata is already present')\n            else:\n                self.to_screen('[info] Writing video description metadata as JSON to: ' + infofn)\n                try:\n                    write_json_file(self.filter_requested_info(info_dict), infofn)\n                except (OSError, IOError):\n                    self.report_error('Cannot write metadata to JSON file ' + infofn)\n                    return\n\n        self._write_thumbnails(info_dict, filename)\n\n        if not self.params.get('skip_download', False):\n            try:\n                def dl(name, info):\n                    fd = get_suitable_downloader(info, self.params)(self, self.params)\n                    for ph in self._progress_hooks:\n                        fd.add_progress_hook(ph)\n                    if self.params.get('verbose'):\n                        self.to_stdout('[debug] Invoking downloader on %r' % info.get('url'))\n                    return fd.download(name, info)\n\n                if info_dict.get('requested_formats') is not None:\n                    downloaded = []\n                    success = True\n                    merger = FFmpegMergerPP(self)\n                    if not merger.available:\n                        postprocessors = []\n                        self.report_warning('You have requested multiple '\n                                            'formats but ffmpeg or avconv are not installed.'\n                                            ' The formats won\\'t be merged.')\n                    else:\n                        postprocessors = [merger]\n\n                    def compatible_formats(formats):\n                        video, audio = formats\n                        # Check extension\n                        video_ext, audio_ext = audio.get('ext'), video.get('ext')\n                        if video_ext and audio_ext:\n                            COMPATIBLE_EXTS = (\n                                ('mp3', 'mp4', 'm4a', 'm4p', 'm4b', 'm4r', 'm4v', 'ismv', 'isma'),\n                                ('webm')\n                            )\n                            for exts in COMPATIBLE_EXTS:\n                                if video_ext in exts and audio_ext in exts:\n                                    return True\n                        # TODO: Check acodec/vcodec\n                        return False\n\n                    filename_real_ext = os.path.splitext(filename)[1][1:]\n                    filename_wo_ext = (\n                        os.path.splitext(filename)[0]\n                        if filename_real_ext == info_dict['ext']\n                        else filename)\n                    requested_formats = info_dict['requested_formats']\n                    if self.params.get('merge_output_format') is None and not compatible_formats(requested_formats):\n                        info_dict['ext'] = 'mkv'\n                        self.report_warning(\n                            'Requested formats are incompatible for merge and will be merged into mkv.')\n                    # Ensure filename always has a correct extension for successful merge\n                    filename = '%s.%s' % (filename_wo_ext, info_dict['ext'])\n                    if os.path.exists(encodeFilename(filename)):\n                        self.to_screen(\n                            '[download] %s has already been downloaded and '\n                            'merged' % filename)\n                    else:\n                        for f in requested_formats:\n                            new_info = dict(info_dict)\n                            new_info.update(f)\n                            fname = prepend_extension(\n                                self.prepare_filename(new_info),\n                                'f%s' % f['format_id'], new_info['ext'])\n                            if not ensure_dir_exists(fname):\n                                return\n                            downloaded.append(fname)\n                            partial_success = dl(fname, new_info)\n                            success = success and partial_success\n                        info_dict['__postprocessors'] = postprocessors\n                        info_dict['__files_to_merge'] = downloaded\n                else:\n                    # Just a single file\n                    success = dl(filename, info_dict)\n            except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n                self.report_error('unable to download video data: %s' % error_to_compat_str(err))\n                return\n            except (OSError, IOError) as err:\n                raise UnavailableVideoError(err)\n            except (ContentTooShortError, ) as err:\n                self.report_error('content too short (expected %s bytes and served %s)' % (err.expected, err.downloaded))\n                return\n\n            if success and filename != '-':\n                # Fixup content\n                fixup_policy = self.params.get('fixup')\n                if fixup_policy is None:\n                    fixup_policy = 'detect_or_warn'\n\n                INSTALL_FFMPEG_MESSAGE = 'Install ffmpeg or avconv to fix this automatically.'\n\n                stretched_ratio = info_dict.get('stretched_ratio')\n                if stretched_ratio is not None and stretched_ratio != 1:\n                    if fixup_policy == 'warn':\n                        self.report_warning('%s: Non-uniform pixel ratio (%s)' % (\n                            info_dict['id'], stretched_ratio))\n                    elif fixup_policy == 'detect_or_warn':\n                        stretched_pp = FFmpegFixupStretchedPP(self)\n                        if stretched_pp.available:\n                            info_dict.setdefault('__postprocessors', [])\n                            info_dict['__postprocessors'].append(stretched_pp)\n                        else:\n                            self.report_warning(\n                                '%s: Non-uniform pixel ratio (%s). %s'\n                                % (info_dict['id'], stretched_ratio, INSTALL_FFMPEG_MESSAGE))\n                    else:\n                        assert fixup_policy in ('ignore', 'never')\n\n                if (info_dict.get('requested_formats') is None and\n                        info_dict.get('container') == 'm4a_dash'):\n                    if fixup_policy == 'warn':\n                        self.report_warning(\n                            '%s: writing DASH m4a. '\n                            'Only some players support this container.'\n                            % info_dict['id'])\n                    elif fixup_policy == 'detect_or_warn':\n                        fixup_pp = FFmpegFixupM4aPP(self)\n                        if fixup_pp.available:\n                            info_dict.setdefault('__postprocessors', [])\n                            info_dict['__postprocessors'].append(fixup_pp)\n                        else:\n                            self.report_warning(\n                                '%s: writing DASH m4a. '\n                                'Only some players support this container. %s'\n                                % (info_dict['id'], INSTALL_FFMPEG_MESSAGE))\n                    else:\n                        assert fixup_policy in ('ignore', 'never')\n\n                if (info_dict.get('protocol') == 'm3u8_native' or\n                        info_dict.get('protocol') == 'm3u8' and\n                        self.params.get('hls_prefer_native')):\n                    if fixup_policy == 'warn':\n                        self.report_warning('%s: malformed AAC bitstream detected.' % (\n                            info_dict['id']))\n                    elif fixup_policy == 'detect_or_warn':\n                        fixup_pp = FFmpegFixupM3u8PP(self)\n                        if fixup_pp.available:\n                            info_dict.setdefault('__postprocessors', [])\n                            info_dict['__postprocessors'].append(fixup_pp)\n                        else:\n                            self.report_warning(\n                                '%s: malformed AAC bitstream detected. %s'\n                                % (info_dict['id'], INSTALL_FFMPEG_MESSAGE))\n                    else:\n                        assert fixup_policy in ('ignore', 'never')\n\n                try:\n                    self.post_process(filename, info_dict)\n                except (PostProcessingError) as err:\n                    self.report_error('postprocessing: %s' % str(err))\n                    return\n                self.record_download_archive(info_dict)\n\n    def download(self, url_list):\n        \"\"\"Download a given list of URLs.\"\"\"\n        outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)\n        if (len(url_list) > 1 and\n                outtmpl != '-' and\n                '%' not in outtmpl and\n                self.params.get('max_downloads') != 1):\n            raise SameFileError(outtmpl)\n\n        for url in url_list:\n            try:\n                # It also downloads the videos\n                res = self.extract_info(\n                    url, force_generic_extractor=self.params.get('force_generic_extractor', False))\n            except UnavailableVideoError:\n                self.report_error('unable to download video')\n            except MaxDownloadsReached:\n                self.to_screen('[info] Maximum number of downloaded files reached.')\n                raise\n            else:\n                if self.params.get('dump_single_json', False):\n                    self.to_stdout(json.dumps(res))\n\n        return self._download_retcode\n\n    def download_with_info_file(self, info_filename):\n        with contextlib.closing(fileinput.FileInput(\n                [info_filename], mode='r',\n                openhook=fileinput.hook_encoded('utf-8'))) as f:\n            # FileInput doesn't have a read method, we can't call json.load\n            info = self.filter_requested_info(json.loads('\\n'.join(f)))\n        try:\n            self.process_ie_result(info, download=True)\n        except DownloadError:\n            webpage_url = info.get('webpage_url')\n            if webpage_url is not None:\n                self.report_warning('The info failed to download, trying with \"%s\"' % webpage_url)\n                return self.download([webpage_url])\n            else:\n                raise\n        return self._download_retcode\n\n    @staticmethod\n    def filter_requested_info(info_dict):\n        return dict(\n            (k, v) for k, v in info_dict.items()\n            if k not in ['requested_formats', 'requested_subtitles'])\n\n    def post_process(self, filename, ie_info):\n        \"\"\"Run all the postprocessors on the given file.\"\"\"\n        info = dict(ie_info)\n        info['filepath'] = filename\n        pps_chain = []\n        if ie_info.get('__postprocessors') is not None:\n            pps_chain.extend(ie_info['__postprocessors'])\n        pps_chain.extend(self._pps)\n        for pp in pps_chain:\n            files_to_delete = []\n            try:\n                files_to_delete, info = pp.run(info)\n            except PostProcessingError as e:\n                self.report_error(e.msg)\n            if files_to_delete and not self.params.get('keepvideo', False):\n                for old_filename in files_to_delete:\n                    self.to_screen('Deleting original file %s (pass -k to keep)' % old_filename)\n                    try:\n                        os.remove(encodeFilename(old_filename))\n                    except (IOError, OSError):\n                        self.report_warning('Unable to remove downloaded original file')\n\n    def _make_archive_id(self, info_dict):\n        # Future-proof against any change in case\n        # and backwards compatibility with prior versions\n        extractor = info_dict.get('extractor_key')\n        if extractor is None:\n            if 'id' in info_dict:\n                extractor = info_dict.get('ie_key')  # key in a playlist\n        if extractor is None:\n            return None  # Incomplete video information\n        return extractor.lower() + ' ' + info_dict['id']\n\n    def in_download_archive(self, info_dict):\n        fn = self.params.get('download_archive')\n        if fn is None:\n            return False\n\n        vid_id = self._make_archive_id(info_dict)\n        if vid_id is None:\n            return False  # Incomplete video information\n\n        try:\n            with locked_file(fn, 'r', encoding='utf-8') as archive_file:\n                for line in archive_file:\n                    if line.strip() == vid_id:\n                        return True\n        except IOError as ioe:\n            if ioe.errno != errno.ENOENT:\n                raise\n        return False\n\n    def record_download_archive(self, info_dict):\n        fn = self.params.get('download_archive')\n        if fn is None:\n            return\n        vid_id = self._make_archive_id(info_dict)\n        assert vid_id\n        with locked_file(fn, 'a', encoding='utf-8') as archive_file:\n            archive_file.write(vid_id + '\\n')\n\n    @staticmethod\n    def format_resolution(format, default='unknown'):\n        if format.get('vcodec') == 'none':\n            return 'audio only'\n        if format.get('resolution') is not None:\n            return format['resolution']\n        if format.get('height') is not None:\n            if format.get('width') is not None:\n                res = '%sx%s' % (format['width'], format['height'])\n            else:\n                res = '%sp' % format['height']\n        elif format.get('width') is not None:\n            res = '%dx?' % format['width']\n        else:\n            res = default\n        return res\n\n    def _format_note(self, fdict):\n        res = ''\n        if fdict.get('ext') in ['f4f', 'f4m']:\n            res += '(unsupported) '\n        if fdict.get('language'):\n            if res:\n                res += ' '\n            res += '[%s] ' % fdict['language']\n        if fdict.get('format_note') is not None:\n            res += fdict['format_note'] + ' '\n        if fdict.get('tbr') is not None:\n            res += '%4dk ' % fdict['tbr']\n        if fdict.get('container') is not None:\n            if res:\n                res += ', '\n            res += '%s container' % fdict['container']\n        if (fdict.get('vcodec') is not None and\n                fdict.get('vcodec') != 'none'):\n            if res:\n                res += ', '\n            res += fdict['vcodec']\n            if fdict.get('vbr') is not None:\n                res += '@'\n        elif fdict.get('vbr') is not None and fdict.get('abr') is not None:\n            res += 'video@'\n        if fdict.get('vbr') is not None:\n            res += '%4dk' % fdict['vbr']\n        if fdict.get('fps') is not None:\n            if res:\n                res += ', '\n            res += '%sfps' % fdict['fps']\n        if fdict.get('acodec') is not None:\n            if res:\n                res += ', '\n            if fdict['acodec'] == 'none':\n                res += 'video only'\n            else:\n                res += '%-5s' % fdict['acodec']\n        elif fdict.get('abr') is not None:\n            if res:\n                res += ', '\n            res += 'audio'\n        if fdict.get('abr') is not None:\n            res += '@%3dk' % fdict['abr']\n        if fdict.get('asr') is not None:\n            res += ' (%5dHz)' % fdict['asr']\n        if fdict.get('filesize') is not None:\n            if res:\n                res += ', '\n            res += format_bytes(fdict['filesize'])\n        elif fdict.get('filesize_approx') is not None:\n            if res:\n                res += ', '\n            res += '~' + format_bytes(fdict['filesize_approx'])\n        return res\n\n    def list_formats(self, info_dict):\n        formats = info_dict.get('formats', [info_dict])\n        table = [\n            [f['format_id'], f['ext'], self.format_resolution(f), self._format_note(f)]\n            for f in formats\n            if f.get('preference') is None or f['preference'] >= -1000]\n        if len(formats) > 1:\n            table[-1][-1] += (' ' if table[-1][-1] else '') + '(best)'\n\n        header_line = ['format code', 'extension', 'resolution', 'note']\n        self.to_screen(\n            '[info] Available formats for %s:\\n%s' %\n            (info_dict['id'], render_table(header_line, table)))\n\n    def list_thumbnails(self, info_dict):\n        thumbnails = info_dict.get('thumbnails')\n        if not thumbnails:\n            self.to_screen('[info] No thumbnails present for %s' % info_dict['id'])\n            return\n\n        self.to_screen(\n            '[info] Thumbnails for %s:' % info_dict['id'])\n        self.to_screen(render_table(\n            ['ID', 'width', 'height', 'URL'],\n            [[t['id'], t.get('width', 'unknown'), t.get('height', 'unknown'), t['url']] for t in thumbnails]))\n\n    def list_subtitles(self, video_id, subtitles, name='subtitles'):\n        if not subtitles:\n            self.to_screen('%s has no %s' % (video_id, name))\n            return\n        self.to_screen(\n            'Available %s for %s:' % (name, video_id))\n        self.to_screen(render_table(\n            ['Language', 'formats'],\n            [[lang, ', '.join(f['ext'] for f in reversed(formats))]\n                for lang, formats in subtitles.items()]))\n\n    def urlopen(self, req):\n        \"\"\" Start an HTTP download \n \n#!/usr/bin/env python\n# coding: utf-8\n# Python 2.6 on SLES11 SP1 (https://github.com/rg3/youtube-dl/issues/3326)\n# Set HTTPS proxy to HTTP one if given (https://github.com/rg3/youtube-dl/issues/805)\n# When passing our own FileHandler instance, build_opener won't add the\n# default FileHandler and allows us to disable the file protocol, which\n# can be used for malicious purposes (see\n# https://github.com/rg3/youtube-dl/issues/8227)\n# Delete the default user-agent header, which would otherwise apply in\n# cases where our custom HTTP handler doesn't come into play\n# (See https://github.com/rg3/youtube-dl/issues/1309 for details)\n# Already encoded\n# No thumbnails present, so return immediately\n", "content": "#!/usr/bin/env python\n# coding: utf-8\n\nfrom __future__ import absolute_import, unicode_literals\n\nimport collections\nimport contextlib\nimport copy\nimport datetime\nimport errno\nimport fileinput\nimport io\nimport itertools\nimport json\nimport locale\nimport operator\nimport os\nimport platform\nimport re\nimport shutil\nimport subprocess\nimport socket\nimport sys\nimport time\nimport tokenize\nimport traceback\nimport random\n\nfrom string import ascii_letters\n\nfrom .compat import (\n    compat_basestring,\n    compat_cookiejar,\n    compat_get_terminal_size,\n    compat_http_client,\n    compat_kwargs,\n    compat_numeric_types,\n    compat_os_name,\n    compat_str,\n    compat_tokenize_tokenize,\n    compat_urllib_error,\n    compat_urllib_request,\n    compat_urllib_request_DataHandler,\n)\nfrom .utils import (\n    age_restricted,\n    args_to_str,\n    ContentTooShortError,\n    date_from_str,\n    DateRange,\n    DEFAULT_OUTTMPL,\n    determine_ext,\n    determine_protocol,\n    DownloadError,\n    encode_compat_str,\n    encodeFilename,\n    error_to_compat_str,\n    expand_path,\n    ExtractorError,\n    format_bytes,\n    formatSeconds,\n    GeoRestrictedError,\n    int_or_none,\n    ISO3166Utils,\n    locked_file,\n    make_HTTPS_handler,\n    MaxDownloadsReached,\n    orderedSet,\n    PagedList,\n    parse_filesize,\n    PerRequestProxyHandler,\n    platform_name,\n    PostProcessingError,\n    preferredencoding,\n    prepend_extension,\n    register_socks_protocols,\n    render_table,\n    replace_extension,\n    SameFileError,\n    sanitize_filename,\n    sanitize_path,\n    sanitize_url,\n    sanitized_Request,\n    std_headers,\n    subtitles_filename,\n    UnavailableVideoError,\n    url_basename,\n    version_tuple,\n    write_json_file,\n    write_string,\n    YoutubeDLCookieProcessor,\n    YoutubeDLHandler,\n)\nfrom .cache import Cache\nfrom .extractor import get_info_extractor, gen_extractor_classes, _LAZY_LOADER\nfrom .extractor.openload import PhantomJSwrapper\nfrom .downloader import get_suitable_downloader\nfrom .downloader.rtmp import rtmpdump_version\nfrom .postprocessor import (\n    FFmpegFixupM3u8PP,\n    FFmpegFixupM4aPP,\n    FFmpegFixupStretchedPP,\n    FFmpegMergerPP,\n    FFmpegPostProcessor,\n    get_postprocessor,\n)\nfrom .version import __version__\n\nif compat_os_name == 'nt':\n    import ctypes\n\n\nclass YoutubeDL(object):\n    \"\"\"YoutubeDL class.\n\n    YoutubeDL objects are the ones responsible of downloading the\n    actual video file and writing it to disk if the user has requested\n    it, among some other tasks. In most cases there should be one per\n    program. As, given a video URL, the downloader doesn't know how to\n    extract all the needed information, task that InfoExtractors do, it\n    has to pass the URL to one of them.\n\n    For this, YoutubeDL objects have a method that allows\n    InfoExtractors to be registered in a given order. When it is passed\n    a URL, the YoutubeDL object handles it to the first InfoExtractor it\n    finds that reports being able to handle it. The InfoExtractor extracts\n    all the information about the video or videos the URL refers to, and\n    YoutubeDL process the extracted information, possibly using a File\n    Downloader to download the video.\n\n    YoutubeDL objects accept a lot of parameters. In order not to saturate\n    the object constructor with arguments, it receives a dictionary of\n    options instead. These options are available through the params\n    attribute for the InfoExtractors to use. The YoutubeDL also\n    registers itself as the downloader in charge for the InfoExtractors\n    that are added to it, so this is a \"mutual registration\".\n\n    Available options:\n\n    username:          Username for authentication purposes.\n    password:          Password for authentication purposes.\n    videopassword:     Password for accessing a video.\n    ap_mso:            Adobe Pass multiple-system operator identifier.\n    ap_username:       Multiple-system operator account username.\n    ap_password:       Multiple-system operator account password.\n    usenetrc:          Use netrc for authentication instead.\n    verbose:           Print additional info to stdout.\n    quiet:             Do not print messages to stdout.\n    no_warnings:       Do not print out anything for warnings.\n    forceurl:          Force printing final URL.\n    forcetitle:        Force printing title.\n    forceid:           Force printing ID.\n    forcethumbnail:    Force printing thumbnail URL.\n    forcedescription:  Force printing description.\n    forcefilename:     Force printing final filename.\n    forceduration:     Force printing duration.\n    forcejson:         Force printing info_dict as JSON.\n    dump_single_json:  Force printing the info_dict of the whole playlist\n                       (or video) as a single JSON line.\n    simulate:          Do not download the video files.\n    format:            Video format code. See options.py for more information.\n    outtmpl:           Template for output names.\n    restrictfilenames: Do not allow \"&\" and spaces in file names\n    ignoreerrors:      Do not stop on download errors.\n    force_generic_extractor: Force downloader to use the generic extractor\n    nooverwrites:      Prevent overwriting files.\n    playliststart:     Playlist item to start at.\n    playlistend:       Playlist item to end at.\n    playlist_items:    Specific indices of playlist to download.\n    playlistreverse:   Download playlist items in reverse order.\n    playlistrandom:    Download playlist items in random order.\n    matchtitle:        Download only matching titles.\n    rejecttitle:       Reject downloads for matching titles.\n    logger:            Log messages to a logging.Logger instance.\n    logtostderr:       Log messages to stderr instead of stdout.\n    writedescription:  Write the video description to a .description file\n    writeinfojson:     Write the video description to a .info.json file\n    writeannotations:  Write the video annotations to a .annotations.xml file\n    writethumbnail:    Write the thumbnail image to a file\n    write_all_thumbnails:  Write all thumbnail formats to files\n    writesubtitles:    Write the video subtitles to a file\n    writeautomaticsub: Write the automatically generated subtitles to a file\n    allsubtitles:      Downloads all the subtitles of the video\n                       (requires writesubtitles or writeautomaticsub)\n    listsubtitles:     Lists all available subtitles for the video\n    subtitlesformat:   The format code for subtitles\n    subtitleslangs:    List of languages of the subtitles to download\n    keepvideo:         Keep the video file after post-processing\n    daterange:         A DateRange object, download only if the upload_date is in the range.\n    skip_download:     Skip the actual download of the video file\n    cachedir:          Location of the cache files in the filesystem.\n                       False to disable filesystem cache.\n    noplaylist:        Download single video instead of a playlist if in doubt.\n    age_limit:         An integer representing the user's age in years.\n                       Unsuitable videos for the given age are skipped.\n    min_views:         An integer representing the minimum view count the video\n                       must have in order to not be skipped.\n                       Videos without view count information are always\n                       downloaded. None for no limit.\n    max_views:         An integer representing the maximum view count.\n                       Videos that are more popular than that are not\n                       downloaded.\n                       Videos without view count information are always\n                       downloaded. None for no limit.\n    download_archive:  File name of a file where all downloads are recorded.\n                       Videos already present in the file are not downloaded\n                       again.\n    cookiefile:        File name where cookies should be read from and dumped to.\n    nocheckcertificate:Do not verify SSL certificates\n    prefer_insecure:   Use HTTP instead of HTTPS to retrieve information.\n                       At the moment, this is only supported by YouTube.\n    proxy:             URL of the proxy server to use\n    geo_verification_proxy:  URL of the proxy to use for IP address verification\n                       on geo-restricted sites. (Experimental)\n    socket_timeout:    Time to wait for unresponsive hosts, in seconds\n    bidi_workaround:   Work around buggy terminals without bidirectional text\n                       support, using fridibi\n    debug_printtraffic:Print out sent and received HTTP traffic\n    include_ads:       Download ads as well\n    default_search:    Prepend this string if an input url is not valid.\n                       'auto' for elaborate guessing\n    encoding:          Use this encoding instead of the system-specified.\n    extract_flat:      Do not resolve URLs, return the immediate result.\n                       Pass in 'in_playlist' to only show this behavior for\n                       playlist items.\n    postprocessors:    A list of dictionaries, each with an entry\n                       * key:  The name of the postprocessor. See\n                               youtube_dl/postprocessor/__init__.py for a list.\n                       as well as any further keyword arguments for the\n                       postprocessor.\n    progress_hooks:    A list of functions that get called on download\n                       progress, with a dictionary with the entries\n                       * status: One of \"downloading\", \"error\", or \"finished\".\n                                 Check this first and ignore unknown values.\n\n                       If status is one of \"downloading\", or \"finished\", the\n                       following properties may also be present:\n                       * filename: The final filename (always present)\n                       * tmpfilename: The filename we're currently writing to\n                       * downloaded_bytes: Bytes on disk\n                       * total_bytes: Size of the whole file, None if unknown\n                       * total_bytes_estimate: Guess of the eventual file size,\n                                               None if unavailable.\n                       * elapsed: The number of seconds since download started.\n                       * eta: The estimated time in seconds, None if unknown\n                       * speed: The download speed in bytes/second, None if\n                                unknown\n                       * fragment_index: The counter of the currently\n                                         downloaded video fragment.\n                       * fragment_count: The number of fragments (= individual\n                                         files that will be merged)\n\n                       Progress hooks are guaranteed to be called at least once\n                       (with status \"finished\") if the download is successful.\n    merge_output_format: Extension to use when merging formats.\n    fixup:             Automatically correct known faults of the file.\n                       One of:\n                       - \"never\": do nothing\n                       - \"warn\": only emit a warning\n                       - \"detect_or_warn\": check whether we can do anything\n                                           about it, warn otherwise (default)\n    source_address:    (Experimental) Client-side IP address to bind to.\n    call_home:         Boolean, true iff we are allowed to contact the\n                       youtube-dl servers for debugging.\n    sleep_interval:    Number of seconds to sleep before each download when\n                       used alone or a lower bound of a range for randomized\n                       sleep before each download (minimum possible number\n                       of seconds to sleep) when used along with\n                       max_sleep_interval.\n    max_sleep_interval:Upper bound of a range for randomized sleep before each\n                       download (maximum possible number of seconds to sleep).\n                       Must only be used along with sleep_interval.\n                       Actual sleep time will be a random float from range\n                       [sleep_interval; max_sleep_interval].\n    listformats:       Print an overview of available video formats and exit.\n    list_thumbnails:   Print a table of all thumbnails and exit.\n    match_filter:      A function that gets called with the info_dict of\n                       every video.\n                       If it returns a message, the video is ignored.\n                       If it returns None, the video is downloaded.\n                       match_filter_func in utils.py is one example for this.\n    no_color:          Do not emit color codes in output.\n    geo_bypass:        Bypass geographic restriction via faking X-Forwarded-For\n                       HTTP header (experimental)\n    geo_bypass_country:\n                       Two-letter ISO 3166-2 country code that will be used for\n                       explicit geographic restriction bypassing via faking\n                       X-Forwarded-For HTTP header (experimental)\n\n    The following options determine which downloader is picked:\n    external_downloader: Executable of the external downloader to call.\n                       None or unset for standard (built-in) downloader.\n    hls_prefer_native: Use the native HLS downloader instead of ffmpeg/avconv\n                       if True, otherwise use ffmpeg/avconv if False, otherwise\n                       use downloader suggested by extractor if None.\n\n    The following parameters are not used by YoutubeDL itself, they are used by\n    the downloader (see youtube_dl/downloader/common.py):\n    nopart, updatetime, buffersize, ratelimit, min_filesize, max_filesize, test,\n    noresizebuffer, retries, continuedl, noprogress, consoletitle,\n    xattr_set_filesize, external_downloader_args, hls_use_mpegts,\n    http_chunk_size.\n\n    The following options are used by the post processors:\n    prefer_ffmpeg:     If True, use ffmpeg instead of avconv if both are available,\n                       otherwise prefer avconv.\n    postprocessor_args: A list of additional command-line arguments for the\n                        postprocessor.\n\n    The following options are used by the Youtube extractor:\n    youtube_include_dash_manifest: If True (default), DASH manifests and related\n                        data will be downloaded and processed by extractor.\n                        You can reduce network I/O by disabling it if you don't\n                        care about DASH.\n    \"\"\"\n\n    _NUMERIC_FIELDS = set((\n        'width', 'height', 'tbr', 'abr', 'asr', 'vbr', 'fps', 'filesize', 'filesize_approx',\n        'timestamp', 'upload_year', 'upload_month', 'upload_day',\n        'duration', 'view_count', 'like_count', 'dislike_count', 'repost_count',\n        'average_rating', 'comment_count', 'age_limit',\n        'start_time', 'end_time',\n        'chapter_number', 'season_number', 'episode_number',\n        'track_number', 'disc_number', 'release_year',\n        'playlist_index',\n    ))\n\n    params = None\n    _ies = []\n    _pps = []\n    _download_retcode = None\n    _num_downloads = None\n    _screen_file = None\n\n    def __init__(self, params=None, auto_init=True):\n        \"\"\"Create a FileDownloader object with the given options.\"\"\"\n        if params is None:\n            params = {}\n        self._ies = []\n        self._ies_instances = {}\n        self._pps = []\n        self._progress_hooks = []\n        self._download_retcode = 0\n        self._num_downloads = 0\n        self._screen_file = [sys.stdout, sys.stderr][params.get('logtostderr', False)]\n        self._err_file = sys.stderr\n        self.params = {\n            # Default parameters\n            'nocheckcertificate': False,\n        }\n        self.params.update(params)\n        self.cache = Cache(self)\n\n        def check_deprecated(param, option, suggestion):\n            if self.params.get(param) is not None:\n                self.report_warning(\n                    '%s is deprecated. Use %s instead.' % (option, suggestion))\n                return True\n            return False\n\n        if check_deprecated('cn_verification_proxy', '--cn-verification-proxy', '--geo-verification-proxy'):\n            if self.params.get('geo_verification_proxy') is None:\n                self.params['geo_verification_proxy'] = self.params['cn_verification_proxy']\n\n        check_deprecated('autonumber_size', '--autonumber-size', 'output template with %(autonumber)0Nd, where N in the number of digits')\n        check_deprecated('autonumber', '--auto-number', '-o \"%(autonumber)s-%(title)s.%(ext)s\"')\n        check_deprecated('usetitle', '--title', '-o \"%(title)s-%(id)s.%(ext)s\"')\n\n        if params.get('bidi_workaround', False):\n            try:\n                import pty\n                master, slave = pty.openpty()\n                width = compat_get_terminal_size().columns\n                if width is None:\n                    width_args = []\n                else:\n                    width_args = ['-w', str(width)]\n                sp_kwargs = dict(\n                    stdin=subprocess.PIPE,\n                    stdout=slave,\n                    stderr=self._err_file)\n                try:\n                    self._output_process = subprocess.Popen(\n                        ['bidiv'] + width_args, **sp_kwargs\n                    )\n                except OSError:\n                    self._output_process = subprocess.Popen(\n                        ['fribidi', '-c', 'UTF-8'] + width_args, **sp_kwargs)\n                self._output_channel = os.fdopen(master, 'rb')\n            except OSError as ose:\n                if ose.errno == errno.ENOENT:\n                    self.report_warning('Could not find fribidi executable, ignoring --bidi-workaround . Make sure that  fribidi  is an executable file in one of the directories in your $PATH.')\n                else:\n                    raise\n\n        if (sys.platform != 'win32' and\n                sys.getfilesystemencoding() in ['ascii', 'ANSI_X3.4-1968'] and\n                not params.get('restrictfilenames', False)):\n            # Unicode filesystem API will throw errors (#1474, #13027)\n            self.report_warning(\n                'Assuming --restrict-filenames since file system encoding '\n                'cannot encode all characters. '\n                'Set the LC_ALL environment variable to fix this.')\n            self.params['restrictfilenames'] = True\n\n        if isinstance(params.get('outtmpl'), bytes):\n            self.report_warning(\n                'Parameter outtmpl is bytes, but should be a unicode string. '\n                'Put  from __future__ import unicode_literals  at the top of your code file or consider switching to Python 3.x.')\n\n        self._setup_opener()\n\n        if auto_init:\n            self.print_debug_header()\n            self.add_default_info_extractors()\n\n        for pp_def_raw in self.params.get('postprocessors', []):\n            pp_class = get_postprocessor(pp_def_raw['key'])\n            pp_def = dict(pp_def_raw)\n            del pp_def['key']\n            pp = pp_class(self, **compat_kwargs(pp_def))\n            self.add_post_processor(pp)\n\n        for ph in self.params.get('progress_hooks', []):\n            self.add_progress_hook(ph)\n\n        register_socks_protocols()\n\n    def warn_if_short_id(self, argv):\n        # short YouTube ID starting with dash?\n        idxs = [\n            i for i, a in enumerate(argv)\n            if re.match(r'^-[0-9A-Za-z_-]{10}$', a)]\n        if idxs:\n            correct_argv = (\n                ['youtube-dl'] +\n                [a for i, a in enumerate(argv) if i not in idxs] +\n                ['--'] + [argv[i] for i in idxs]\n            )\n            self.report_warning(\n                'Long argument string detected. '\n                'Use -- to separate parameters and URLs, like this:\\n%s\\n' %\n                args_to_str(correct_argv))\n\n    def add_info_extractor(self, ie):\n        \"\"\"Add an InfoExtractor object to the end of the list.\"\"\"\n        self._ies.append(ie)\n        if not isinstance(ie, type):\n            self._ies_instances[ie.ie_key()] = ie\n            ie.set_downloader(self)\n\n    def get_info_extractor(self, ie_key):\n        \"\"\"\n        Get an instance of an IE with name ie_key, it will try to get one from\n        the _ies list, if there's no instance it will create a new one and add\n        it to the extractor list.\n        \"\"\"\n        ie = self._ies_instances.get(ie_key)\n        if ie is None:\n            ie = get_info_extractor(ie_key)()\n            self.add_info_extractor(ie)\n        return ie\n\n    def add_default_info_extractors(self):\n        \"\"\"\n        Add the InfoExtractors returned by gen_extractors to the end of the list\n        \"\"\"\n        for ie in gen_extractor_classes():\n            self.add_info_extractor(ie)\n\n    def add_post_processor(self, pp):\n        \"\"\"Add a PostProcessor object to the end of the chain.\"\"\"\n        self._pps.append(pp)\n        pp.set_downloader(self)\n\n    def add_progress_hook(self, ph):\n        \"\"\"Add the progress hook (currently only for the file downloader)\"\"\"\n        self._progress_hooks.append(ph)\n\n    def _bidi_workaround(self, message):\n        if not hasattr(self, '_output_channel'):\n            return message\n\n        assert hasattr(self, '_output_process')\n        assert isinstance(message, compat_str)\n        line_count = message.count('\\n') + 1\n        self._output_process.stdin.write((message + '\\n').encode('utf-8'))\n        self._output_process.stdin.flush()\n        res = ''.join(self._output_channel.readline().decode('utf-8')\n                      for _ in range(line_count))\n        return res[:-len('\\n')]\n\n    def to_screen(self, message, skip_eol=False):\n        \"\"\"Print message to stdout if not in quiet mode.\"\"\"\n        return self.to_stdout(message, skip_eol, check_quiet=True)\n\n    def _write_string(self, s, out=None):\n        write_string(s, out=out, encoding=self.params.get('encoding'))\n\n    def to_stdout(self, message, skip_eol=False, check_quiet=False):\n        \"\"\"Print message to stdout if not in quiet mode.\"\"\"\n        if self.params.get('logger'):\n            self.params['logger'].debug(message)\n        elif not check_quiet or not self.params.get('quiet', False):\n            message = self._bidi_workaround(message)\n            terminator = ['\\n', ''][skip_eol]\n            output = message + terminator\n\n            self._write_string(output, self._screen_file)\n\n    def to_stderr(self, message):\n        \"\"\"Print message to stderr.\"\"\"\n        assert isinstance(message, compat_str)\n        if self.params.get('logger'):\n            self.params['logger'].error(message)\n        else:\n            message = self._bidi_workaround(message)\n            output = message + '\\n'\n            self._write_string(output, self._err_file)\n\n    def to_console_title(self, message):\n        if not self.params.get('consoletitle', False):\n            return\n        if compat_os_name == 'nt':\n            if ctypes.windll.kernel32.GetConsoleWindow():\n                # c_wchar_p() might not be necessary if `message` is\n                # already of type unicode()\n                ctypes.windll.kernel32.SetConsoleTitleW(ctypes.c_wchar_p(message))\n        elif 'TERM' in os.environ:\n            self._write_string('\\033]0;%s\\007' % message, self._screen_file)\n\n    def save_console_title(self):\n        if not self.params.get('consoletitle', False):\n            return\n        if compat_os_name != 'nt' and 'TERM' in os.environ:\n            # Save the title on stack\n            self._write_string('\\033[22;0t', self._screen_file)\n\n    def restore_console_title(self):\n        if not self.params.get('consoletitle', False):\n            return\n        if compat_os_name != 'nt' and 'TERM' in os.environ:\n            # Restore the title from stack\n            self._write_string('\\033[23;0t', self._screen_file)\n\n    def __enter__(self):\n        self.save_console_title()\n        return self\n\n    def __exit__(self, *args):\n        self.restore_console_title()\n\n        if self.params.get('cookiefile') is not None:\n            self.cookiejar.save()\n\n    def trouble(self, message=None, tb=None):\n        \"\"\"Determine action to take when a download problem appears.\n\n        Depending on if the downloader has been configured to ignore\n        download errors or not, this method may throw an exception or\n        not when errors are found, after printing the message.\n\n        tb, if given, is additional traceback information.\n        \"\"\"\n        if message is not None:\n            self.to_stderr(message)\n        if self.params.get('verbose'):\n            if tb is None:\n                if sys.exc_info()[0]:  # if .trouble has been called from an except block\n                    tb = ''\n                    if hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n                        tb += ''.join(traceback.format_exception(*sys.exc_info()[1].exc_info))\n                    tb += encode_compat_str(traceback.format_exc())\n                else:\n                    tb_data = traceback.format_list(traceback.extract_stack())\n                    tb = ''.join(tb_data)\n            self.to_stderr(tb)\n        if not self.params.get('ignoreerrors', False):\n            if sys.exc_info()[0] and hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n                exc_info = sys.exc_info()[1].exc_info\n            else:\n                exc_info = sys.exc_info()\n            raise DownloadError(message, exc_info)\n        self._download_retcode = 1\n\n    def report_warning(self, message):\n        '''\n        Print the message to stderr, it will be prefixed with 'WARNING:'\n        If stderr is a tty file the 'WARNING:' will be colored\n        '''\n        if self.params.get('logger') is not None:\n            self.params['logger'].warning(message)\n        else:\n            if self.params.get('no_warnings'):\n                return\n            if not self.params.get('no_color') and self._err_file.isatty() and compat_os_name != 'nt':\n                _msg_header = '\\033[0;33mWARNING:\\033[0m'\n            else:\n                _msg_header = 'WARNING:'\n            warning_message = '%s %s' % (_msg_header, message)\n            self.to_stderr(warning_message)\n\n    def report_error(self, message, tb=None):\n        '''\n        Do the same as trouble, but prefixes the message with 'ERROR:', colored\n        in red if stderr is a tty file.\n        '''\n        if not self.params.get('no_color') and self._err_file.isatty() and compat_os_name != 'nt':\n            _msg_header = '\\033[0;31mERROR:\\033[0m'\n        else:\n            _msg_header = 'ERROR:'\n        error_message = '%s %s' % (_msg_header, message)\n        self.trouble(error_message, tb)\n\n    def report_file_already_downloaded(self, file_name):\n        \"\"\"Report file has already been fully downloaded.\"\"\"\n        try:\n            self.to_screen('[download] %s has already been downloaded' % file_name)\n        except UnicodeEncodeError:\n            self.to_screen('[download] The file has already been downloaded')\n\n    def prepare_filename(self, info_dict):\n        \"\"\"Generate the output filename.\"\"\"\n        try:\n            template_dict = dict(info_dict)\n\n            template_dict['epoch'] = int(time.time())\n            autonumber_size = self.params.get('autonumber_size')\n            if autonumber_size is None:\n                autonumber_size = 5\n            template_dict['autonumber'] = self.params.get('autonumber_start', 1) - 1 + self._num_downloads\n            if template_dict.get('resolution') is None:\n                if template_dict.get('width') and template_dict.get('height'):\n                    template_dict['resolution'] = '%dx%d' % (template_dict['width'], template_dict['height'])\n                elif template_dict.get('height'):\n                    template_dict['resolution'] = '%sp' % template_dict['height']\n                elif template_dict.get('width'):\n                    template_dict['resolution'] = '%dx?' % template_dict['width']\n\n            sanitize = lambda k, v: sanitize_filename(\n                compat_str(v),\n                restricted=self.params.get('restrictfilenames'),\n                is_id=(k == 'id' or k.endswith('_id')))\n            template_dict = dict((k, v if isinstance(v, compat_numeric_types) else sanitize(k, v))\n                                 for k, v in template_dict.items()\n                                 if v is not None and not isinstance(v, (list, tuple, dict)))\n            template_dict = collections.defaultdict(lambda: 'NA', template_dict)\n\n            outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)\n\n            # For fields playlist_index and autonumber convert all occurrences\n            # of %(field)s to %(field)0Nd for backward compatibility\n            field_size_compat_map = {\n                'playlist_index': len(str(template_dict['n_entries'])),\n                'autonumber': autonumber_size,\n            }\n            FIELD_SIZE_COMPAT_RE = r'(?<!%)%\\((?P<field>autonumber|playlist_index)\\)s'\n            mobj = re.search(FIELD_SIZE_COMPAT_RE, outtmpl)\n            if mobj:\n                outtmpl = re.sub(\n                    FIELD_SIZE_COMPAT_RE,\n                    r'%%(\\1)0%dd' % field_size_compat_map[mobj.group('field')],\n                    outtmpl)\n\n            # Missing numeric fields used together with integer presentation types\n            # in format specification will break the argument substitution since\n            # string 'NA' is returned for missing fields. We will patch output\n            # template for missing fields to meet string presentation type.\n            for numeric_field in self._NUMERIC_FIELDS:\n                if numeric_field not in template_dict:\n                    # As of [1] format syntax is:\n                    #  %[mapping_key][conversion_flags][minimum_width][.precision][length_modifier]type\n                    # 1. https://docs.python.org/2/library/stdtypes.html#string-formatting\n                    FORMAT_RE = r'''(?x)\n                        (?<!%)\n                        %\n                        \\({0}\\)  # mapping key\n                        (?:[#0\\-+ ]+)?  # conversion flags (optional)\n                        (?:\\d+)?  # minimum field width (optional)\n                        (?:\\.\\d+)?  # precision (optional)\n                        [hlL]?  # length modifier (optional)\n                        [diouxXeEfFgGcrs%]  # conversion type\n                    '''\n                    outtmpl = re.sub(\n                        FORMAT_RE.format(numeric_field),\n                        r'%({0})s'.format(numeric_field), outtmpl)\n\n            # expand_path translates '%%' into '%' and '$$' into '$'\n            # correspondingly that is not what we want since we need to keep\n            # '%%' intact for template dict substitution step. Working around\n            # with boundary-alike separator hack.\n            sep = ''.join([random.choice(ascii_letters) for _ in range(32)])\n            outtmpl = outtmpl.replace('%%', '%{0}%'.format(sep)).replace('$$', '${0}$'.format(sep))\n\n            # outtmpl should be expand_path'ed before template dict substitution\n            # because meta fields may contain env variables we don't want to\n            # be expanded. For example, for outtmpl \"%(title)s.%(ext)s\" and\n            # title \"Hello $PATH\", we don't want `$PATH` to be expanded.\n            filename = expand_path(outtmpl).replace(sep, '') % template_dict\n\n            # Temporary fix for #4787\n            # 'Treat' all problem characters by passing filename through preferredencoding\n            # to workaround encoding issues with subprocess on python2 @ Windows\n            if sys.version_info < (3, 0) and sys.platform == 'win32':\n                filename = encodeFilename(filename, True).decode(preferredencoding())\n            return sanitize_path(filename)\n        except ValueError as err:\n            self.report_error('Error in output template: ' + str(err) + ' (encoding: ' + repr(preferredencoding()) + ')')\n            return None\n\n    def _match_entry(self, info_dict, incomplete):\n        \"\"\" Returns None iff the file should be downloaded \"\"\"\n\n        video_title = info_dict.get('title', info_dict.get('id', 'video'))\n        if 'title' in info_dict:\n            # This can happen when we're just evaluating the playlist\n            title = info_dict['title']\n            matchtitle = self.params.get('matchtitle', False)\n            if matchtitle:\n                if not re.search(matchtitle, title, re.IGNORECASE):\n                    return '\"' + title + '\" title did not match pattern \"' + matchtitle + '\"'\n            rejecttitle = self.params.get('rejecttitle', False)\n            if rejecttitle:\n                if re.search(rejecttitle, title, re.IGNORECASE):\n                    return '\"' + title + '\" title matched reject pattern \"' + rejecttitle + '\"'\n        date = info_dict.get('upload_date')\n        if date is not None:\n            dateRange = self.params.get('daterange', DateRange())\n            if date not in dateRange:\n                return '%s upload date is not in range %s' % (date_from_str(date).isoformat(), dateRange)\n        view_count = info_dict.get('view_count')\n        if view_count is not None:\n            min_views = self.params.get('min_views')\n            if min_views is not None and view_count < min_views:\n                return 'Skipping %s, because it has not reached minimum view count (%d/%d)' % (video_title, view_count, min_views)\n            max_views = self.params.get('max_views')\n            if max_views is not None and view_count > max_views:\n                return 'Skipping %s, because it has exceeded the maximum view count (%d/%d)' % (video_title, view_count, max_views)\n        if age_restricted(info_dict.get('age_limit'), self.params.get('age_limit')):\n            return 'Skipping \"%s\" because it is age restricted' % video_title\n        if self.in_download_archive(info_dict):\n            return '%s has already been recorded in archive' % video_title\n\n        if not incomplete:\n            match_filter = self.params.get('match_filter')\n            if match_filter is not None:\n                ret = match_filter(info_dict)\n                if ret is not None:\n                    return ret\n\n        return None\n\n    @staticmethod\n    def add_extra_info(info_dict, extra_info):\n        '''Set the keys from extra_info in info dict if they are missing'''\n        for key, value in extra_info.items():\n            info_dict.setdefault(key, value)\n\n    def extract_info(self, url, download=True, ie_key=None, extra_info={},\n                     process=True, force_generic_extractor=False):\n        '''\n        Returns a list with a dictionary for each video we find.\n        If 'download', also downloads the videos.\n        extra_info is a dict containing the extra values to add to each result\n        '''\n\n        if not ie_key and force_generic_extractor:\n            ie_key = 'Generic'\n\n        if ie_key:\n            ies = [self.get_info_extractor(ie_key)]\n        else:\n            ies = self._ies\n\n        for ie in ies:\n            if not ie.suitable(url):\n                continue\n\n            ie = self.get_info_extractor(ie.ie_key())\n            if not ie.working():\n                self.report_warning('The program functionality for this site has been marked as broken, '\n                                    'and will probably not work.')\n\n            try:\n                ie_result = ie.extract(url)\n                if ie_result is None:  # Finished already (backwards compatibility; listformats and friends should be moved here)\n                    break\n                if isinstance(ie_result, list):\n                    # Backwards compatibility: old IE result format\n                    ie_result = {\n                        '_type': 'compat_list',\n                        'entries': ie_result,\n                    }\n                self.add_default_extra_info(ie_result, ie, url)\n                if process:\n                    return self.process_ie_result(ie_result, download, extra_info)\n                else:\n                    return ie_result\n            except GeoRestrictedError as e:\n                msg = e.msg\n                if e.countries:\n                    msg += '\\nThis video is available in %s.' % ', '.join(\n                        map(ISO3166Utils.short2full, e.countries))\n                msg += '\\nYou might want to use a VPN or a proxy server (with --proxy) to workaround.'\n                self.report_error(msg)\n                break\n            except ExtractorError as e:  # An error we somewhat expected\n                self.report_error(compat_str(e), e.format_traceback())\n                break\n            except MaxDownloadsReached:\n                raise\n            except Exception as e:\n                if self.params.get('ignoreerrors', False):\n                    self.report_error(error_to_compat_str(e), tb=encode_compat_str(traceback.format_exc()))\n                    break\n                else:\n                    raise\n        else:\n            self.report_error('no suitable InfoExtractor for URL %s' % url)\n\n    def add_default_extra_info(self, ie_result, ie, url):\n        self.add_extra_info(ie_result, {\n            'extractor': ie.IE_NAME,\n            'webpage_url': url,\n            'webpage_url_basename': url_basename(url),\n            'extractor_key': ie.ie_key(),\n        })\n\n    def process_ie_result(self, ie_result, download=True, extra_info={}):\n        \"\"\"\n        Take the result of the ie(may be modified) and resolve all unresolved\n        references (URLs, playlist items).\n\n        It will also download the videos if 'download'.\n        Returns the resolved ie_result.\n        \"\"\"\n        result_type = ie_result.get('_type', 'video')\n\n        if result_type in ('url', 'url_transparent'):\n            ie_result['url'] = sanitize_url(ie_result['url'])\n            extract_flat = self.params.get('extract_flat', False)\n            if ((extract_flat == 'in_playlist' and 'playlist' in extra_info) or\n                    extract_flat is True):\n                if self.params.get('forcejson', False):\n                    self.to_stdout(json.dumps(ie_result))\n                return ie_result\n\n        if result_type == 'video':\n            self.add_extra_info(ie_result, extra_info)\n            return self.process_video_result(ie_result, download=download)\n        elif result_type == 'url':\n            # We have to add extra_info to the results because it may be\n            # contained in a playlist\n            return self.extract_info(ie_result['url'],\n                                     download,\n                                     ie_key=ie_result.get('ie_key'),\n                                     extra_info=extra_info)\n        elif result_type == 'url_transparent':\n            # Use the information from the embedding page\n            info = self.extract_info(\n                ie_result['url'], ie_key=ie_result.get('ie_key'),\n                extra_info=extra_info, download=False, process=False)\n\n            # extract_info may return None when ignoreerrors is enabled and\n            # extraction failed with an error, don't crash and return early\n            # in this case\n            if not info:\n                return info\n\n            force_properties = dict(\n                (k, v) for k, v in ie_result.items() if v is not None)\n            for f in ('_type', 'url', 'id', 'extractor', 'extractor_key', 'ie_key'):\n                if f in force_properties:\n                    del force_properties[f]\n            new_result = info.copy()\n            new_result.update(force_properties)\n\n            # Extracted info may not be a video result (i.e.\n            # info.get('_type', 'video') != video) but rather an url or\n            # url_transparent. In such cases outer metadata (from ie_result)\n            # should be propagated to inner one (info). For this to happen\n            # _type of info should be overridden with url_transparent. This\n            # fixes issue from https://github.com/rg3/youtube-dl/pull/11163.\n            if new_result.get('_type') == 'url':\n                new_result['_type'] = 'url_transparent'\n\n            return self.process_ie_result(\n                new_result, download=download, extra_info=extra_info)\n        elif result_type in ('playlist', 'multi_video'):\n            # We process each entry in the playlist\n            playlist = ie_result.get('title') or ie_result.get('id')\n            self.to_screen('[download] Downloading playlist: %s' % playlist)\n\n            playlist_results = []\n\n            playliststart = self.params.get('playliststart', 1) - 1\n            playlistend = self.params.get('playlistend')\n            # For backwards compatibility, interpret -1 as whole list\n            if playlistend == -1:\n                playlistend = None\n\n            playlistitems_str = self.params.get('playlist_items')\n            playlistitems = None\n            if playlistitems_str is not None:\n                def iter_playlistitems(format):\n                    for string_segment in format.split(','):\n                        if '-' in string_segment:\n                            start, end = string_segment.split('-')\n                            for item in range(int(start), int(end) + 1):\n                                yield int(item)\n                        else:\n                            yield int(string_segment)\n                playlistitems = orderedSet(iter_playlistitems(playlistitems_str))\n\n            ie_entries = ie_result['entries']\n\n            def make_playlistitems_entries(list_ie_entries):\n                num_entries = len(list_ie_entries)\n                return [\n                    list_ie_entries[i - 1] for i in playlistitems\n                    if -num_entries <= i - 1 < num_entries]\n\n            def report_download(num_entries):\n                self.to_screen(\n                    '[%s] playlist %s: Downloading %d videos' %\n                    (ie_result['extractor'], playlist, num_entries))\n\n            if isinstance(ie_entries, list):\n                n_all_entries = len(ie_entries)\n                if playlistitems:\n                    entries = make_playlistitems_entries(ie_entries)\n                else:\n                    entries = ie_entries[playliststart:playlistend]\n                n_entries = len(entries)\n                self.to_screen(\n                    '[%s] playlist %s: Collected %d video ids (downloading %d of them)' %\n                    (ie_result['extractor'], playlist, n_all_entries, n_entries))\n            elif isinstance(ie_entries, PagedList):\n                if playlistitems:\n                    entries = []\n                    for item in playlistitems:\n                        entries.extend(ie_entries.getslice(\n                            item - 1, item\n                        ))\n                else:\n                    entries = ie_entries.getslice(\n                        playliststart, playlistend)\n                n_entries = len(entries)\n                report_download(n_entries)\n            else:  # iterable\n                if playlistitems:\n                    entries = make_playlistitems_entries(list(itertools.islice(\n                        ie_entries, 0, max(playlistitems))))\n                else:\n                    entries = list(itertools.islice(\n                        ie_entries, playliststart, playlistend))\n                n_entries = len(entries)\n                report_download(n_entries)\n\n            if self.params.get('playlistreverse', False):\n                entries = entries[::-1]\n\n            if self.params.get('playlistrandom', False):\n                random.shuffle(entries)\n\n            x_forwarded_for = ie_result.get('__x_forwarded_for_ip')\n\n            for i, entry in enumerate(entries, 1):\n                self.to_screen('[download] Downloading video %s of %s' % (i, n_entries))\n                # This __x_forwarded_for_ip thing is a bit ugly but requires\n                # minimal changes\n                if x_forwarded_for:\n                    entry['__x_forwarded_for_ip'] = x_forwarded_for\n                extra = {\n                    'n_entries': n_entries,\n                    'playlist': playlist,\n                    'playlist_id': ie_result.get('id'),\n                    'playlist_title': ie_result.get('title'),\n                    'playlist_uploader': ie_result.get('uploader'),\n                    'playlist_uploader_id': ie_result.get('uploader_id'),\n                    'playlist_index': i + playliststart,\n                    'extractor': ie_result['extractor'],\n                    'webpage_url': ie_result['webpage_url'],\n                    'webpage_url_basename': url_basename(ie_result['webpage_url']),\n                    'extractor_key': ie_result['extractor_key'],\n                }\n\n                reason = self._match_entry(entry, incomplete=True)\n                if reason is not None:\n                    self.to_screen('[download] ' + reason)\n                    continue\n\n                entry_result = self.process_ie_result(entry,\n                                                      download=download,\n                                                      extra_info=extra)\n                playlist_results.append(entry_result)\n            ie_result['entries'] = playlist_results\n            self.to_screen('[download] Finished downloading playlist: %s' % playlist)\n            return ie_result\n        elif result_type == 'compat_list':\n            self.report_warning(\n                'Extractor %s returned a compat_list result. '\n                'It needs to be updated.' % ie_result.get('extractor'))\n\n            def _fixup(r):\n                self.add_extra_info(\n                    r,\n                    {\n                        'extractor': ie_result['extractor'],\n                        'webpage_url': ie_result['webpage_url'],\n                        'webpage_url_basename': url_basename(ie_result['webpage_url']),\n                        'extractor_key': ie_result['extractor_key'],\n                    }\n                )\n                return r\n            ie_result['entries'] = [\n                self.process_ie_result(_fixup(r), download, extra_info)\n                for r in ie_result['entries']\n            ]\n            return ie_result\n        else:\n            raise Exception('Invalid result type: %s' % result_type)\n\n    def _build_format_filter(self, filter_spec):\n        \" Returns a function to filter the formats according to the filter_spec \"\n\n        OPERATORS = {\n            '<': operator.lt,\n            '<=': operator.le,\n            '>': operator.gt,\n            '>=': operator.ge,\n            '=': operator.eq,\n            '!=': operator.ne,\n        }\n        operator_rex = re.compile(r'''(?x)\\s*\n            (?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\n            \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*\n            (?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\n            $\n            ''' % '|'.join(map(re.escape, OPERATORS.keys())))\n        m = operator_rex.search(filter_spec)\n        if m:\n            try:\n                comparison_value = int(m.group('value'))\n            except ValueError:\n                comparison_value = parse_filesize(m.group('value'))\n                if comparison_value is None:\n                    comparison_value = parse_filesize(m.group('value') + 'B')\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid value %r in format specification %r' % (\n                            m.group('value'), filter_spec))\n            op = OPERATORS[m.group('op')]\n\n        if not m:\n            STR_OPERATORS = {\n                '=': operator.eq,\n                '!=': operator.ne,\n                '^=': lambda attr, value: attr.startswith(value),\n                '$=': lambda attr, value: attr.endswith(value),\n                '*=': lambda attr, value: value in attr,\n            }\n            str_operator_rex = re.compile(r'''(?x)\n                \\s*(?P<key>ext|acodec|vcodec|container|protocol|format_id)\n                \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\n                \\s*(?P<value>[a-zA-Z0-9._-]+)\n                \\s*$\n                ''' % '|'.join(map(re.escape, STR_OPERATORS.keys())))\n            m = str_operator_rex.search(filter_spec)\n            if m:\n                comparison_value = m.group('value')\n                op = STR_OPERATORS[m.group('op')]\n\n        if not m:\n            raise ValueError('Invalid filter specification %r' % filter_spec)\n\n        def _filter(f):\n            actual_value = f.get(m.group('key'))\n            if actual_value is None:\n                return m.group('none_inclusive')\n            return op(actual_value, comparison_value)\n        return _filter\n\n    def _default_format_spec(self, info_dict, download=True):\n\n        def can_merge():\n            merger = FFmpegMergerPP(self)\n            return merger.available and merger.can_merge()\n\n        def prefer_best():\n            if self.params.get('simulate', False):\n                return False\n            if not download:\n                return False\n            if self.params.get('outtmpl', DEFAULT_OUTTMPL) == '-':\n                return True\n            if info_dict.get('is_live'):\n                return True\n            if not can_merge():\n                return True\n            return False\n\n        req_format_list = ['bestvideo+bestaudio', 'best']\n        if prefer_best():\n            req_format_list.reverse()\n        return '/'.join(req_format_list)\n\n    def build_format_selector(self, format_spec):\n        def syntax_error(note, start):\n            message = (\n                'Invalid format specification: '\n                '{0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1]))\n            return SyntaxError(message)\n\n        PICKFIRST = 'PICKFIRST'\n        MERGE = 'MERGE'\n        SINGLE = 'SINGLE'\n        GROUP = 'GROUP'\n        FormatSelector = collections.namedtuple('FormatSelector', ['type', 'selector', 'filters'])\n\n        def _parse_filter(tokens):\n            filter_parts = []\n            for type, string, start, _, _ in tokens:\n                if type == tokenize.OP and string == ']':\n                    return ''.join(filter_parts)\n                else:\n                    filter_parts.append(string)\n\n        def _remove_unused_ops(tokens):\n            # Remove operators that we don't use and join them with the surrounding strings\n            # for example: 'mp4' '-' 'baseline' '-' '16x9' is converted to 'mp4-baseline-16x9'\n            ALLOWED_OPS = ('/', '+', ',', '(', ')')\n            last_string, last_start, last_end, last_line = None, None, None, None\n            for type, string, start, end, line in tokens:\n                if type == tokenize.OP and string == '[':\n                    if last_string:\n                        yield tokenize.NAME, last_string, last_start, last_end, last_line\n                        last_string = None\n                    yield type, string, start, end, line\n                    # everything inside brackets will be handled by _parse_filter\n                    for type, string, start, end, line in tokens:\n                        yield type, string, start, end, line\n                        if type == tokenize.OP and string == ']':\n                            break\n                elif type == tokenize.OP and string in ALLOWED_OPS:\n                    if last_string:\n                        yield tokenize.NAME, last_string, last_start, last_end, last_line\n                        last_string = None\n                    yield type, string, start, end, line\n                elif type in [tokenize.NAME, tokenize.NUMBER, tokenize.OP]:\n                    if not last_string:\n                        last_string = string\n                        last_start = start\n                        last_end = end\n                    else:\n                        last_string += string\n            if last_string:\n                yield tokenize.NAME, last_string, last_start, last_end, last_line\n\n        def _parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False):\n            selectors = []\n            current_selector = None\n            for type, string, start, _, _ in tokens:\n                # ENCODING is only defined in python 3.x\n                if type == getattr(tokenize, 'ENCODING', None):\n                    continue\n                elif type in [tokenize.NAME, tokenize.NUMBER]:\n                    current_selector = FormatSelector(SINGLE, string, [])\n                elif type == tokenize.OP:\n                    if string == ')':\n                        if not inside_group:\n                            # ')' will be handled by the parentheses group\n                            tokens.restore_last_token()\n                        break\n                    elif inside_merge and string in ['/', ',']:\n                        tokens.restore_last_token()\n                        break\n                    elif inside_choice and string == ',':\n                        tokens.restore_last_token()\n                        break\n                    elif string == ',':\n                        if not current_selector:\n                            raise syntax_error('\",\" must follow a format selector', start)\n                        selectors.append(current_selector)\n                        current_selector = None\n                    elif string == '/':\n                        if not current_selector:\n                            raise syntax_error('\"/\" must follow a format selector', start)\n                        first_choice = current_selector\n                        second_choice = _parse_format_selection(tokens, inside_choice=True)\n                        current_selector = FormatSelector(PICKFIRST, (first_choice, second_choice), [])\n                    elif string == '[':\n                        if not current_selector:\n                            current_selector = FormatSelector(SINGLE, 'best', [])\n                        format_filter = _parse_filter(tokens)\n                        current_selector.filters.append(format_filter)\n                    elif string == '(':\n                        if current_selector:\n                            raise syntax_error('Unexpected \"(\"', start)\n                        group = _parse_format_selection(tokens, inside_group=True)\n                        current_selector = FormatSelector(GROUP, group, [])\n                    elif string == '+':\n                        video_selector = current_selector\n                        audio_selector = _parse_format_selection(tokens, inside_merge=True)\n                        if not video_selector or not audio_selector:\n                            raise syntax_error('\"+\" must be between two format selectors', start)\n                        current_selector = FormatSelector(MERGE, (video_selector, audio_selector), [])\n                    else:\n                        raise syntax_error('Operator not recognized: \"{0}\"'.format(string), start)\n                elif type == tokenize.ENDMARKER:\n                    break\n            if current_selector:\n                selectors.append(current_selector)\n            return selectors\n\n        def _build_selector_function(selector):\n            if isinstance(selector, list):\n                fs = [_build_selector_function(s) for s in selector]\n\n                def selector_function(ctx):\n                    for f in fs:\n                        for format in f(ctx):\n                            yield format\n                return selector_function\n            elif selector.type == GROUP:\n                selector_function = _build_selector_function(selector.selector)\n            elif selector.type == PICKFIRST:\n                fs = [_build_selector_function(s) for s in selector.selector]\n\n                def selector_function(ctx):\n                    for f in fs:\n                        picked_formats = list(f(ctx))\n                        if picked_formats:\n                            return picked_formats\n                    return []\n            elif selector.type == SINGLE:\n                format_spec = selector.selector\n\n                def selector_function(ctx):\n                    formats = list(ctx['formats'])\n                    if not formats:\n                        return\n                    if format_spec == 'all':\n                        for f in formats:\n                            yield f\n                    elif format_spec in ['best', 'worst', None]:\n                        format_idx = 0 if format_spec == 'worst' else -1\n                        audiovideo_formats = [\n                            f for f in formats\n                            if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                        if audiovideo_formats:\n                            yield audiovideo_formats[format_idx]\n                        # for extractors with incomplete formats (audio only (soundcloud)\n                        # or video only (imgur)) we will fallback to best/worst\n                        # {video,audio}-only format\n                        elif ctx['incomplete_formats']:\n                            yield formats[format_idx]\n                    elif format_spec == 'bestaudio':\n                        audio_formats = [\n                            f for f in formats\n                            if f.get('vcodec') == 'none']\n                        if audio_formats:\n                            yield audio_formats[-1]\n                    elif format_spec == 'worstaudio':\n                        audio_formats = [\n                            f for f in formats\n                            if f.get('vcodec') == 'none']\n                        if audio_formats:\n                            yield audio_formats[0]\n                    elif format_spec == 'bestvideo':\n                        video_formats = [\n                            f for f in formats\n                            if f.get('acodec') == 'none']\n                        if video_formats:\n                            yield video_formats[-1]\n                    elif format_spec == 'worstvideo':\n                        video_formats = [\n                            f for f in formats\n                            if f.get('acodec') == 'none']\n                        if video_formats:\n                            yield video_formats[0]\n                    else:\n                        extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n                        if format_spec in extensions:\n                            filter_f = lambda f: f['ext'] == format_spec\n                        else:\n                            filter_f = lambda f: f['format_id'] == format_spec\n                        matches = list(filter(filter_f, formats))\n                        if matches:\n                            yield matches[-1]\n            elif selector.type == MERGE:\n                def _merge(formats_info):\n                    format_1, format_2 = [f['format_id'] for f in formats_info]\n                    # The first format must contain the video and the\n                    # second the audio\n                    if formats_info[0].get('vcodec') == 'none':\n                        self.report_error('The first format must '\n                                          'contain the video, try using '\n                                          '\"-f %s+%s\"' % (format_2, format_1))\n                        return\n                    # Formats must be opposite (video+audio)\n                    if formats_info[0].get('acodec') == 'none' and formats_info[1].get('acodec') == 'none':\n                        self.report_error(\n                            'Both formats %s and %s are video-only, you must specify \"-f video+audio\"'\n                            % (format_1, format_2))\n                        return\n                    output_ext = (\n                        formats_info[0]['ext']\n                        if self.params.get('merge_output_format') is None\n                        else self.params['merge_output_format'])\n                    return {\n                        'requested_formats': formats_info,\n                        'format': '%s+%s' % (formats_info[0].get('format'),\n                                             formats_info[1].get('format')),\n                        'format_id': '%s+%s' % (formats_info[0].get('format_id'),\n                                                formats_info[1].get('format_id')),\n                        'width': formats_info[0].get('width'),\n                        'height': formats_info[0].get('height'),\n                        'resolution': formats_info[0].get('resolution'),\n                        'fps': formats_info[0].get('fps'),\n                        'vcodec': formats_info[0].get('vcodec'),\n                        'vbr': formats_info[0].get('vbr'),\n                        'stretched_ratio': formats_info[0].get('stretched_ratio'),\n                        'acodec': formats_info[1].get('acodec'),\n                        'abr': formats_info[1].get('abr'),\n                        'ext': output_ext,\n                    }\n                video_selector, audio_selector = map(_build_selector_function, selector.selector)\n\n                def selector_function(ctx):\n                    for pair in itertools.product(\n                            video_selector(copy.deepcopy(ctx)), audio_selector(copy.deepcopy(ctx))):\n                        yield _merge(pair)\n\n            filters = [self._build_format_filter(f) for f in selector.filters]\n\n            def final_selector(ctx):\n                ctx_copy = copy.deepcopy(ctx)\n                for _filter in filters:\n                    ctx_copy['formats'] = list(filter(_filter, ctx_copy['formats']))\n                return selector_function(ctx_copy)\n            return final_selector\n\n        stream = io.BytesIO(format_spec.encode('utf-8'))\n        try:\n            tokens = list(_remove_unused_ops(compat_tokenize_tokenize(stream.readline)))\n        except tokenize.TokenError:\n            raise syntax_error('Missing closing/opening brackets or parenthesis', (0, len(format_spec)))\n\n        class TokenIterator(object):\n            def __init__(self, tokens):\n                self.tokens = tokens\n                self.counter = 0\n\n            def __iter__(self):\n                return self\n\n            def __next__(self):\n                if self.counter >= len(self.tokens):\n                    raise StopIteration()\n                value = self.tokens[self.counter]\n                self.counter += 1\n                return value\n\n            next = __next__\n\n            def restore_last_token(self):\n                self.counter -= 1\n\n        parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n        return _build_selector_function(parsed_selector)\n\n    def _calc_headers(self, info_dict):\n        res = std_headers.copy()\n\n        add_headers = info_dict.get('http_headers')\n        if add_headers:\n            res.update(add_headers)\n\n        cookies = self._calc_cookies(info_dict)\n        if cookies:\n            res['Cookie'] = cookies\n\n        if 'X-Forwarded-For' not in res:\n            x_forwarded_for_ip = info_dict.get('__x_forwarded_for_ip')\n            if x_forwarded_for_ip:\n                res['X-Forwarded-For'] = x_forwarded_for_ip\n\n        return res\n\n    def _calc_cookies(self, info_dict):\n        pr = sanitized_Request(info_dict['url'])\n        self.cookiejar.add_cookie_header(pr)\n        return pr.get_header('Cookie')\n\n    def process_video_result(self, info_dict, download=True):\n        assert info_dict.get('_type', 'video') == 'video'\n\n        if 'id' not in info_dict:\n            raise ExtractorError('Missing \"id\" field in extractor result')\n        if 'title' not in info_dict:\n            raise ExtractorError('Missing \"title\" field in extractor result')\n\n        def report_force_conversion(field, field_not, conversion):\n            self.report_warning(\n                '\"%s\" field is not %s - forcing %s conversion, there is an error in extractor'\n                % (field, field_not, conversion))\n\n        def sanitize_string_field(info, string_field):\n            field = info.get(string_field)\n            if field is None or isinstance(field, compat_str):\n                return\n            report_force_conversion(string_field, 'a string', 'string')\n            info[string_field] = compat_str(field)\n\n        def sanitize_numeric_fields(info):\n            for numeric_field in self._NUMERIC_FIELDS:\n                field = info.get(numeric_field)\n                if field is None or isinstance(field, compat_numeric_types):\n                    continue\n                report_force_conversion(numeric_field, 'numeric', 'int')\n                info[numeric_field] = int_or_none(field)\n\n        sanitize_string_field(info_dict, 'id')\n        sanitize_numeric_fields(info_dict)\n\n        if 'playlist' not in info_dict:\n            # It isn't part of a playlist\n            info_dict['playlist'] = None\n            info_dict['playlist_index'] = None\n\n        thumbnails = info_dict.get('thumbnails')\n        if thumbnails is None:\n            thumbnail = info_dict.get('thumbnail')\n            if thumbnail:\n                info_dict['thumbnails'] = thumbnails = [{'url': thumbnail}]\n        if thumbnails:\n            thumbnails.sort(key=lambda t: (\n                t.get('preference') if t.get('preference') is not None else -1,\n                t.get('width') if t.get('width') is not None else -1,\n                t.get('height') if t.get('height') is not None else -1,\n                t.get('id') if t.get('id') is not None else '', t.get('url')))\n            for i, t in enumerate(thumbnails):\n                t['url'] = sanitize_url(t['url'])\n                if t.get('width') and t.get('height'):\n                    t['resolution'] = '%dx%d' % (t['width'], t['height'])\n                if t.get('id') is None:\n                    t['id'] = '%d' % i\n\n        if self.params.get('list_thumbnails'):\n            self.list_thumbnails(info_dict)\n            return\n\n        thumbnail = info_dict.get('thumbnail')\n        if thumbnail:\n            info_dict['thumbnail'] = sanitize_url(thumbnail)\n        elif thumbnails:\n            info_dict['thumbnail'] = thumbnails[-1]['url']\n\n        if 'display_id' not in info_dict and 'id' in info_dict:\n            info_dict['display_id'] = info_dict['id']\n\n        if info_dict.get('upload_date') is None and info_dict.get('timestamp') is not None:\n            # Working around out-of-range timestamp values (e.g. negative ones on Windows,\n            # see http://bugs.python.org/issue1646728)\n            try:\n                upload_date = datetime.datetime.utcfromtimestamp(info_dict['timestamp'])\n                info_dict['upload_date'] = upload_date.strftime('%Y%m%d')\n            except (ValueError, OverflowError, OSError):\n                pass\n\n        # Auto generate title fields corresponding to the *_number fields when missing\n        # in order to always have clean titles. This is very common for TV series.\n        for field in ('chapter', 'season', 'episode'):\n            if info_dict.get('%s_number' % field) is not None and not info_dict.get(field):\n                info_dict[field] = '%s %d' % (field.capitalize(), info_dict['%s_number' % field])\n\n        subtitles = info_dict.get('subtitles')\n        if subtitles:\n            for _, subtitle in subtitles.items():\n                for subtitle_format in subtitle:\n                    if subtitle_format.get('url'):\n                        subtitle_format['url'] = sanitize_url(subtitle_format['url'])\n                    if subtitle_format.get('ext') is None:\n                        subtitle_format['ext'] = determine_ext(subtitle_format['url']).lower()\n\n        if self.params.get('listsubtitles', False):\n            if 'automatic_captions' in info_dict:\n                self.list_subtitles(info_dict['id'], info_dict.get('automatic_captions'), 'automatic captions')\n            self.list_subtitles(info_dict['id'], subtitles, 'subtitles')\n            return\n        info_dict['requested_subtitles'] = self.process_subtitles(\n            info_dict['id'], subtitles,\n            info_dict.get('automatic_captions'))\n\n        # We now pick which formats have to be downloaded\n        if info_dict.get('formats') is None:\n            # There's only one format available\n            formats = [info_dict]\n        else:\n            formats = info_dict['formats']\n\n        if not formats:\n            raise ExtractorError('No video formats found!')\n\n        def is_wellformed(f):\n            url = f.get('url')\n            if not url:\n                self.report_warning(\n                    '\"url\" field is missing or empty - skipping format, '\n                    'there is an error in extractor')\n                return False\n            if isinstance(url, bytes):\n                sanitize_string_field(f, 'url')\n            return True\n\n        # Filter out malformed formats for better extraction robustness\n        formats = list(filter(is_wellformed, formats))\n\n        formats_dict = {}\n\n        # We check that all the formats have the format and format_id fields\n        for i, format in enumerate(formats):\n            sanitize_string_field(format, 'format_id')\n            sanitize_numeric_fields(format)\n            format['url'] = sanitize_url(format['url'])\n            if not format.get('format_id'):\n                format['format_id'] = compat_str(i)\n            else:\n                # Sanitize format_id from characters used in format selector expression\n                format['format_id'] = re.sub(r'[\\s,/+\\[\\]()]', '_', format['format_id'])\n            format_id = format['format_id']\n            if format_id not in formats_dict:\n                formats_dict[format_id] = []\n            formats_dict[format_id].append(format)\n\n        # Make sure all formats have unique format_id\n        for format_id, ambiguous_formats in formats_dict.items():\n            if len(ambiguous_formats) > 1:\n                for i, format in enumerate(ambiguous_formats):\n                    format['format_id'] = '%s-%d' % (format_id, i)\n\n        for i, format in enumerate(formats):\n            if format.get('format') is None:\n                format['format'] = '{id} - {res}{note}'.format(\n                    id=format['format_id'],\n                    res=self.format_resolution(format),\n                    note=' ({0})'.format(format['format_note']) if format.get('format_note') is not None else '',\n                )\n            # Automatically determine file extension if missing\n            if format.get('ext') is None:\n                format['ext'] = determine_ext(format['url']).lower()\n            # Automatically determine protocol if missing (useful for format\n            # selection purposes)\n            if format.get('protocol') is None:\n                format['protocol'] = determine_protocol(format)\n            # Add HTTP headers, so that external programs can use them from the\n            # json output\n            full_format_info = info_dict.copy()\n            full_format_info.update(format)\n            format['http_headers'] = self._calc_headers(full_format_info)\n        # Remove private housekeeping stuff\n        if '__x_forwarded_for_ip' in info_dict:\n            del info_dict['__x_forwarded_for_ip']\n\n        # TODO Central sorting goes here\n\n        if formats[0] is not info_dict:\n            # only set the 'formats' fields if the original info_dict list them\n            # otherwise we end up with a circular reference, the first (and unique)\n            # element in the 'formats' field in info_dict is info_dict itself,\n            # which can't be exported to json\n            info_dict['formats'] = formats\n        if self.params.get('listformats'):\n            self.list_formats(info_dict)\n            return\n\n        req_format = self.params.get('format')\n        if req_format is None:\n            req_format = self._default_format_spec(info_dict, download=download)\n            if self.params.get('verbose'):\n                self.to_stdout('[debug] Default format spec: %s' % req_format)\n\n        format_selector = self.build_format_selector(req_format)\n\n        # While in format selection we may need to have an access to the original\n        # format set in order to calculate some metrics or do some processing.\n        # For now we need to be able to guess whether original formats provided\n        # by extractor are incomplete or not (i.e. whether extractor provides only\n        # video-only or audio-only formats) for proper formats selection for\n        # extractors with such incomplete formats (see\n        # https://github.com/rg3/youtube-dl/pull/5556).\n        # Since formats may be filtered during format selection and may not match\n        # the original formats the results may be incorrect. Thus original formats\n        # or pre-calculated metrics should be passed to format selection routines\n        # as well.\n        # We will pass a context object containing all necessary additional data\n        # instead of just formats.\n        # This fixes incorrect format selection issue (see\n        # https://github.com/rg3/youtube-dl/issues/10083).\n        incomplete_formats = (\n            # All formats are video-only or\n            all(f.get('vcodec') != 'none' and f.get('acodec') == 'none' for f in formats) or\n            # all formats are audio-only\n            all(f.get('vcodec') == 'none' and f.get('acodec') != 'none' for f in formats))\n\n        ctx = {\n            'formats': formats,\n            'incomplete_formats': incomplete_formats,\n        }\n\n        formats_to_download = list(format_selector(ctx))\n        if not formats_to_download:\n            raise ExtractorError('requested format not available',\n                                 expected=True)\n\n        if download:\n            if len(formats_to_download) > 1:\n                self.to_screen('[info] %s: downloading video in %s formats' % (info_dict['id'], len(formats_to_download)))\n            for format in formats_to_download:\n                new_info = dict(info_dict)\n                new_info.update(format)\n                self.process_info(new_info)\n        # We update the info dict with the best quality format (backwards compatibility)\n        info_dict.update(formats_to_download[-1])\n        return info_dict\n\n    def process_subtitles(self, video_id, normal_subtitles, automatic_captions):\n        \"\"\"Select the requested subtitles and their format\"\"\"\n        available_subs = {}\n        if normal_subtitles and self.params.get('writesubtitles'):\n            available_subs.update(normal_subtitles)\n        if automatic_captions and self.params.get('writeautomaticsub'):\n            for lang, cap_info in automatic_captions.items():\n                if lang not in available_subs:\n                    available_subs[lang] = cap_info\n\n        if (not self.params.get('writesubtitles') and not\n                self.params.get('writeautomaticsub') or not\n                available_subs):\n            return None\n\n        if self.params.get('allsubtitles', False):\n            requested_langs = available_subs.keys()\n        else:\n            if self.params.get('subtitleslangs', False):\n                requested_langs = self.params.get('subtitleslangs')\n            elif 'en' in available_subs:\n                requested_langs = ['en']\n            else:\n                requested_langs = [list(available_subs.keys())[0]]\n\n        formats_query = self.params.get('subtitlesformat', 'best')\n        formats_preference = formats_query.split('/') if formats_query else []\n        subs = {}\n        for lang in requested_langs:\n            formats = available_subs.get(lang)\n            if formats is None:\n                self.report_warning('%s subtitles not available for %s' % (lang, video_id))\n                continue\n            for ext in formats_preference:\n                if ext == 'best':\n                    f = formats[-1]\n                    break\n                matches = list(filter(lambda f: f['ext'] == ext, formats))\n                if matches:\n                    f = matches[-1]\n                    break\n            else:\n                f = formats[-1]\n                self.report_warning(\n                    'No subtitle format found matching \"%s\" for language %s, '\n                    'using %s' % (formats_query, lang, f['ext']))\n            subs[lang] = f\n        return subs\n\n    def process_info(self, info_dict):\n        \"\"\"Process a single resolved IE result.\"\"\"\n\n        assert info_dict.get('_type', 'video') == 'video'\n\n        max_downloads = self.params.get('max_downloads')\n        if max_downloads is not None:\n            if self._num_downloads >= int(max_downloads):\n                raise MaxDownloadsReached()\n\n        info_dict['fulltitle'] = info_dict['title']\n        if len(info_dict['title']) > 200:\n            info_dict['title'] = info_dict['title'][:197] + '...'\n\n        if 'format' not in info_dict:\n            info_dict['format'] = info_dict['ext']\n\n        reason = self._match_entry(info_dict, incomplete=False)\n        if reason is not None:\n            self.to_screen('[download] ' + reason)\n            return\n\n        self._num_downloads += 1\n\n        info_dict['_filename'] = filename = self.prepare_filename(info_dict)\n\n        # Forced printings\n        if self.params.get('forcetitle', False):\n            self.to_stdout(info_dict['fulltitle'])\n        if self.params.get('forceid', False):\n            self.to_stdout(info_dict['id'])\n        if self.params.get('forceurl', False):\n            if info_dict.get('requested_formats') is not None:\n                for f in info_dict['requested_formats']:\n                    self.to_stdout(f['url'] + f.get('play_path', ''))\n            else:\n                # For RTMP URLs, also include the playpath\n                self.to_stdout(info_dict['url'] + info_dict.get('play_path', ''))\n        if self.params.get('forcethumbnail', False) and info_dict.get('thumbnail') is not None:\n            self.to_stdout(info_dict['thumbnail'])\n        if self.params.get('forcedescription', False) and info_dict.get('description') is not None:\n            self.to_stdout(info_dict['description'])\n        if self.params.get('forcefilename', False) and filename is not None:\n            self.to_stdout(filename)\n        if self.params.get('forceduration', False) and info_dict.get('duration') is not None:\n            self.to_stdout(formatSeconds(info_dict['duration']))\n        if self.params.get('forceformat', False):\n            self.to_stdout(info_dict['format'])\n        if self.params.get('forcejson', False):\n            self.to_stdout(json.dumps(info_dict))\n\n        # Do nothing else if in simulate mode\n        if self.params.get('simulate', False):\n            return\n\n        if filename is None:\n            return\n\n        def ensure_dir_exists(path):\n            try:\n                dn = os.path.dirname(path)\n                if dn and not os.path.exists(dn):\n                    os.makedirs(dn)\n                return True\n            except (OSError, IOError) as err:\n                self.report_error('unable to create directory ' + error_to_compat_str(err))\n                return False\n\n        if not ensure_dir_exists(sanitize_path(encodeFilename(filename))):\n            return\n\n        if self.params.get('writedescription', False):\n            descfn = replace_extension(filename, 'description', info_dict.get('ext'))\n            if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(descfn)):\n                self.to_screen('[info] Video description is already present')\n            elif info_dict.get('description') is None:\n                self.report_warning('There\\'s no description to write.')\n            else:\n                try:\n                    self.to_screen('[info] Writing video description to: ' + descfn)\n                    with io.open(encodeFilename(descfn), 'w', encoding='utf-8') as descfile:\n                        descfile.write(info_dict['description'])\n                except (OSError, IOError):\n                    self.report_error('Cannot write description file ' + descfn)\n                    return\n\n        if self.params.get('writeannotations', False):\n            annofn = replace_extension(filename, 'annotations.xml', info_dict.get('ext'))\n            if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(annofn)):\n                self.to_screen('[info] Video annotations are already present')\n            else:\n                try:\n                    self.to_screen('[info] Writing video annotations to: ' + annofn)\n                    with io.open(encodeFilename(annofn), 'w', encoding='utf-8') as annofile:\n                        annofile.write(info_dict['annotations'])\n                except (KeyError, TypeError):\n                    self.report_warning('There are no annotations to write.')\n                except (OSError, IOError):\n                    self.report_error('Cannot write annotations file: ' + annofn)\n                    return\n\n        subtitles_are_requested = any([self.params.get('writesubtitles', False),\n                                       self.params.get('writeautomaticsub')])\n\n        if subtitles_are_requested and info_dict.get('requested_subtitles'):\n            # subtitles download errors are already managed as troubles in relevant IE\n            # that way it will silently go on when used with unsupporting IE\n            subtitles = info_dict['requested_subtitles']\n            ie = self.get_info_extractor(info_dict['extractor_key'])\n            for sub_lang, sub_info in subtitles.items():\n                sub_format = sub_info['ext']\n                sub_filename = subtitles_filename(filename, sub_lang, sub_format)\n                if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(sub_filename)):\n                    self.to_screen('[info] Video subtitle %s.%s is already present' % (sub_lang, sub_format))\n                else:\n                    self.to_screen('[info] Writing video subtitles to: ' + sub_filename)\n                    if sub_info.get('data') is not None:\n                        try:\n                            # Use newline='' to prevent conversion of newline characters\n                            # See https://github.com/rg3/youtube-dl/issues/10268\n                            with io.open(encodeFilename(sub_filename), 'w', encoding='utf-8', newline='') as subfile:\n                                subfile.write(sub_info['data'])\n                        except (OSError, IOError):\n                            self.report_error('Cannot write subtitles file ' + sub_filename)\n                            return\n                    else:\n                        try:\n                            sub_data = ie._request_webpage(\n                                sub_info['url'], info_dict['id'], note=False).read()\n                            with io.open(encodeFilename(sub_filename), 'wb') as subfile:\n                                subfile.write(sub_data)\n                        except (ExtractorError, IOError, OSError, ValueError) as err:\n                            self.report_warning('Unable to download subtitle for \"%s\": %s' %\n                                                (sub_lang, error_to_compat_str(err)))\n                            continue\n\n        if self.params.get('writeinfojson', False):\n            infofn = replace_extension(filename, 'info.json', info_dict.get('ext'))\n            if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(infofn)):\n                self.to_screen('[info] Video description metadata is already present')\n            else:\n                self.to_screen('[info] Writing video description metadata as JSON to: ' + infofn)\n                try:\n                    write_json_file(self.filter_requested_info(info_dict), infofn)\n                except (OSError, IOError):\n                    self.report_error('Cannot write metadata to JSON file ' + infofn)\n                    return\n\n        self._write_thumbnails(info_dict, filename)\n\n        if not self.params.get('skip_download', False):\n            try:\n                def dl(name, info):\n                    fd = get_suitable_downloader(info, self.params)(self, self.params)\n                    for ph in self._progress_hooks:\n                        fd.add_progress_hook(ph)\n                    if self.params.get('verbose'):\n                        self.to_stdout('[debug] Invoking downloader on %r' % info.get('url'))\n                    return fd.download(name, info)\n\n                if info_dict.get('requested_formats') is not None:\n                    downloaded = []\n                    success = True\n                    merger = FFmpegMergerPP(self)\n                    if not merger.available:\n                        postprocessors = []\n                        self.report_warning('You have requested multiple '\n                                            'formats but ffmpeg or avconv are not installed.'\n                                            ' The formats won\\'t be merged.')\n                    else:\n                        postprocessors = [merger]\n\n                    def compatible_formats(formats):\n                        video, audio = formats\n                        # Check extension\n                        video_ext, audio_ext = audio.get('ext'), video.get('ext')\n                        if video_ext and audio_ext:\n                            COMPATIBLE_EXTS = (\n                                ('mp3', 'mp4', 'm4a', 'm4p', 'm4b', 'm4r', 'm4v', 'ismv', 'isma'),\n                                ('webm')\n                            )\n                            for exts in COMPATIBLE_EXTS:\n                                if video_ext in exts and audio_ext in exts:\n                                    return True\n                        # TODO: Check acodec/vcodec\n                        return False\n\n                    filename_real_ext = os.path.splitext(filename)[1][1:]\n                    filename_wo_ext = (\n                        os.path.splitext(filename)[0]\n                        if filename_real_ext == info_dict['ext']\n                        else filename)\n                    requested_formats = info_dict['requested_formats']\n                    if self.params.get('merge_output_format') is None and not compatible_formats(requested_formats):\n                        info_dict['ext'] = 'mkv'\n                        self.report_warning(\n                            'Requested formats are incompatible for merge and will be merged into mkv.')\n                    # Ensure filename always has a correct extension for successful merge\n                    filename = '%s.%s' % (filename_wo_ext, info_dict['ext'])\n                    if os.path.exists(encodeFilename(filename)):\n                        self.to_screen(\n                            '[download] %s has already been downloaded and '\n                            'merged' % filename)\n                    else:\n                        for f in requested_formats:\n                            new_info = dict(info_dict)\n                            new_info.update(f)\n                            fname = prepend_extension(\n                                self.prepare_filename(new_info),\n                                'f%s' % f['format_id'], new_info['ext'])\n                            if not ensure_dir_exists(fname):\n                                return\n                            downloaded.append(fname)\n                            partial_success = dl(fname, new_info)\n                            success = success and partial_success\n                        info_dict['__postprocessors'] = postprocessors\n                        info_dict['__files_to_merge'] = downloaded\n                else:\n                    # Just a single file\n                    success = dl(filename, info_dict)\n            except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n                self.report_error('unable to download video data: %s' % error_to_compat_str(err))\n                return\n            except (OSError, IOError) as err:\n                raise UnavailableVideoError(err)\n            except (ContentTooShortError, ) as err:\n                self.report_error('content too short (expected %s bytes and served %s)' % (err.expected, err.downloaded))\n                return\n\n            if success and filename != '-':\n                # Fixup content\n                fixup_policy = self.params.get('fixup')\n                if fixup_policy is None:\n                    fixup_policy = 'detect_or_warn'\n\n                INSTALL_FFMPEG_MESSAGE = 'Install ffmpeg or avconv to fix this automatically.'\n\n                stretched_ratio = info_dict.get('stretched_ratio')\n                if stretched_ratio is not None and stretched_ratio != 1:\n                    if fixup_policy == 'warn':\n                        self.report_warning('%s: Non-uniform pixel ratio (%s)' % (\n                            info_dict['id'], stretched_ratio))\n                    elif fixup_policy == 'detect_or_warn':\n                        stretched_pp = FFmpegFixupStretchedPP(self)\n                        if stretched_pp.available:\n                            info_dict.setdefault('__postprocessors', [])\n                            info_dict['__postprocessors'].append(stretched_pp)\n                        else:\n                            self.report_warning(\n                                '%s: Non-uniform pixel ratio (%s). %s'\n                                % (info_dict['id'], stretched_ratio, INSTALL_FFMPEG_MESSAGE))\n                    else:\n                        assert fixup_policy in ('ignore', 'never')\n\n                if (info_dict.get('requested_formats') is None and\n                        info_dict.get('container') == 'm4a_dash'):\n                    if fixup_policy == 'warn':\n                        self.report_warning(\n                            '%s: writing DASH m4a. '\n                            'Only some players support this container.'\n                            % info_dict['id'])\n                    elif fixup_policy == 'detect_or_warn':\n                        fixup_pp = FFmpegFixupM4aPP(self)\n                        if fixup_pp.available:\n                            info_dict.setdefault('__postprocessors', [])\n                            info_dict['__postprocessors'].append(fixup_pp)\n                        else:\n                            self.report_warning(\n                                '%s: writing DASH m4a. '\n                                'Only some players support this container. %s'\n                                % (info_dict['id'], INSTALL_FFMPEG_MESSAGE))\n                    else:\n                        assert fixup_policy in ('ignore', 'never')\n\n                if (info_dict.get('protocol') == 'm3u8_native' or\n                        info_dict.get('protocol') == 'm3u8' and\n                        self.params.get('hls_prefer_native')):\n                    if fixup_policy == 'warn':\n                        self.report_warning('%s: malformed AAC bitstream detected.' % (\n                            info_dict['id']))\n                    elif fixup_policy == 'detect_or_warn':\n                        fixup_pp = FFmpegFixupM3u8PP(self)\n                        if fixup_pp.available:\n                            info_dict.setdefault('__postprocessors', [])\n                            info_dict['__postprocessors'].append(fixup_pp)\n                        else:\n                            self.report_warning(\n                                '%s: malformed AAC bitstream detected. %s'\n                                % (info_dict['id'], INSTALL_FFMPEG_MESSAGE))\n                    else:\n                        assert fixup_policy in ('ignore', 'never')\n\n                try:\n                    self.post_process(filename, info_dict)\n                except (PostProcessingError) as err:\n                    self.report_error('postprocessing: %s' % str(err))\n                    return\n                self.record_download_archive(info_dict)\n\n    def download(self, url_list):\n        \"\"\"Download a given list of URLs.\"\"\"\n        outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)\n        if (len(url_list) > 1 and\n                outtmpl != '-' and\n                '%' not in outtmpl and\n                self.params.get('max_downloads') != 1):\n            raise SameFileError(outtmpl)\n\n        for url in url_list:\n            try:\n                # It also downloads the videos\n                res = self.extract_info(\n                    url, force_generic_extractor=self.params.get('force_generic_extractor', False))\n            except UnavailableVideoError:\n                self.report_error('unable to download video')\n            except MaxDownloadsReached:\n                self.to_screen('[info] Maximum number of downloaded files reached.')\n                raise\n            else:\n                if self.params.get('dump_single_json', False):\n                    self.to_stdout(json.dumps(res))\n\n        return self._download_retcode\n\n    def download_with_info_file(self, info_filename):\n        with contextlib.closing(fileinput.FileInput(\n                [info_filename], mode='r',\n                openhook=fileinput.hook_encoded('utf-8'))) as f:\n            # FileInput doesn't have a read method, we can't call json.load\n            info = self.filter_requested_info(json.loads('\\n'.join(f)))\n        try:\n            self.process_ie_result(info, download=True)\n        except DownloadError:\n            webpage_url = info.get('webpage_url')\n            if webpage_url is not None:\n                self.report_warning('The info failed to download, trying with \"%s\"' % webpage_url)\n                return self.download([webpage_url])\n            else:\n                raise\n        return self._download_retcode\n\n    @staticmethod\n    def filter_requested_info(info_dict):\n        return dict(\n            (k, v) for k, v in info_dict.items()\n            if k not in ['requested_formats', 'requested_subtitles'])\n\n    def post_process(self, filename, ie_info):\n        \"\"\"Run all the postprocessors on the given file.\"\"\"\n        info = dict(ie_info)\n        info['filepath'] = filename\n        pps_chain = []\n        if ie_info.get('__postprocessors') is not None:\n            pps_chain.extend(ie_info['__postprocessors'])\n        pps_chain.extend(self._pps)\n        for pp in pps_chain:\n            files_to_delete = []\n            try:\n                files_to_delete, info = pp.run(info)\n            except PostProcessingError as e:\n                self.report_error(e.msg)\n            if files_to_delete and not self.params.get('keepvideo', False):\n                for old_filename in files_to_delete:\n                    self.to_screen('Deleting original file %s (pass -k to keep)' % old_filename)\n                    try:\n                        os.remove(encodeFilename(old_filename))\n                    except (IOError, OSError):\n                        self.report_warning('Unable to remove downloaded original file')\n\n    def _make_archive_id(self, info_dict):\n        # Future-proof against any change in case\n        # and backwards compatibility with prior versions\n        extractor = info_dict.get('extractor_key')\n        if extractor is None:\n            if 'id' in info_dict:\n                extractor = info_dict.get('ie_key')  # key in a playlist\n        if extractor is None:\n            return None  # Incomplete video information\n        return extractor.lower() + ' ' + info_dict['id']\n\n    def in_download_archive(self, info_dict):\n        fn = self.params.get('download_archive')\n        if fn is None:\n            return False\n\n        vid_id = self._make_archive_id(info_dict)\n        if vid_id is None:\n            return False  # Incomplete video information\n\n        try:\n            with locked_file(fn, 'r', encoding='utf-8') as archive_file:\n                for line in archive_file:\n                    if line.strip() == vid_id:\n                        return True\n        except IOError as ioe:\n            if ioe.errno != errno.ENOENT:\n                raise\n        return False\n\n    def record_download_archive(self, info_dict):\n        fn = self.params.get('download_archive')\n        if fn is None:\n            return\n        vid_id = self._make_archive_id(info_dict)\n        assert vid_id\n        with locked_file(fn, 'a', encoding='utf-8') as archive_file:\n            archive_file.write(vid_id + '\\n')\n\n    @staticmethod\n    def format_resolution(format, default='unknown'):\n        if format.get('vcodec') == 'none':\n            return 'audio only'\n        if format.get('resolution') is not None:\n            return format['resolution']\n        if format.get('height') is not None:\n            if format.get('width') is not None:\n                res = '%sx%s' % (format['width'], format['height'])\n            else:\n                res = '%sp' % format['height']\n        elif format.get('width') is not None:\n            res = '%dx?' % format['width']\n        else:\n            res = default\n        return res\n\n    def _format_note(self, fdict):\n        res = ''\n        if fdict.get('ext') in ['f4f', 'f4m']:\n            res += '(unsupported) '\n        if fdict.get('language'):\n            if res:\n                res += ' '\n            res += '[%s] ' % fdict['language']\n        if fdict.get('format_note') is not None:\n            res += fdict['format_note'] + ' '\n        if fdict.get('tbr') is not None:\n            res += '%4dk ' % fdict['tbr']\n        if fdict.get('container') is not None:\n            if res:\n                res += ', '\n            res += '%s container' % fdict['container']\n        if (fdict.get('vcodec') is not None and\n                fdict.get('vcodec') != 'none'):\n            if res:\n                res += ', '\n            res += fdict['vcodec']\n            if fdict.get('vbr') is not None:\n                res += '@'\n        elif fdict.get('vbr') is not None and fdict.get('abr') is not None:\n            res += 'video@'\n        if fdict.get('vbr') is not None:\n            res += '%4dk' % fdict['vbr']\n        if fdict.get('fps') is not None:\n            if res:\n                res += ', '\n            res += '%sfps' % fdict['fps']\n        if fdict.get('acodec') is not None:\n            if res:\n                res += ', '\n            if fdict['acodec'] == 'none':\n                res += 'video only'\n            else:\n                res += '%-5s' % fdict['acodec']\n        elif fdict.get('abr') is not None:\n            if res:\n                res += ', '\n            res += 'audio'\n        if fdict.get('abr') is not None:\n            res += '@%3dk' % fdict['abr']\n        if fdict.get('asr') is not None:\n            res += ' (%5dHz)' % fdict['asr']\n        if fdict.get('filesize') is not None:\n            if res:\n                res += ', '\n            res += format_bytes(fdict['filesize'])\n        elif fdict.get('filesize_approx') is not None:\n            if res:\n                res += ', '\n            res += '~' + format_bytes(fdict['filesize_approx'])\n        return res\n\n    def list_formats(self, info_dict):\n        formats = info_dict.get('formats', [info_dict])\n        table = [\n            [f['format_id'], f['ext'], self.format_resolution(f), self._format_note(f)]\n            for f in formats\n            if f.get('preference') is None or f['preference'] >= -1000]\n        if len(formats) > 1:\n            table[-1][-1] += (' ' if table[-1][-1] else '') + '(best)'\n\n        header_line = ['format code', 'extension', 'resolution', 'note']\n        self.to_screen(\n            '[info] Available formats for %s:\\n%s' %\n            (info_dict['id'], render_table(header_line, table)))\n\n    def list_thumbnails(self, info_dict):\n        thumbnails = info_dict.get('thumbnails')\n        if not thumbnails:\n            self.to_screen('[info] No thumbnails present for %s' % info_dict['id'])\n            return\n\n        self.to_screen(\n            '[info] Thumbnails for %s:' % info_dict['id'])\n        self.to_screen(render_table(\n            ['ID', 'width', 'height', 'URL'],\n            [[t['id'], t.get('width', 'unknown'), t.get('height', 'unknown'), t['url']] for t in thumbnails]))\n\n    def list_subtitles(self, video_id, subtitles, name='subtitles'):\n        if not subtitles:\n            self.to_screen('%s has no %s' % (video_id, name))\n            return\n        self.to_screen(\n            'Available %s for %s:' % (name, video_id))\n        self.to_screen(render_table(\n            ['Language', 'formats'],\n            [[lang, ', '.join(f['ext'] for f in reversed(formats))]\n                for lang, formats in subtitles.items()]))\n\n    def urlopen(self, req):\n        \"\"\" Start an HTTP download \"\"\"\n        if isinstance(req, compat_basestring):\n            req = sanitized_Request(req)\n        return self._opener.open(req, timeout=self._socket_timeout)\n\n    def print_debug_header(self):\n        if not self.params.get('verbose'):\n            return\n\n        if type('') is not compat_str:\n            # Python 2.6 on SLES11 SP1 (https://github.com/rg3/youtube-dl/issues/3326)\n            self.report_warning(\n                'Your Python is broken! Update to a newer and supported version')\n\n        stdout_encoding = getattr(\n            sys.stdout, 'encoding', 'missing (%s)' % type(sys.stdout).__name__)\n        encoding_str = (\n            '[debug] Encodings: locale %s, fs %s, out %s, pref %s\\n' % (\n                locale.getpreferredencoding(),\n                sys.getfilesystemencoding(),\n                stdout_encoding,\n                self.get_encoding()))\n        write_string(encoding_str, encoding=None)\n\n        self._write_string('[debug] youtube-dl version ' + __version__ + '\\n')\n        if _LAZY_LOADER:\n            self._write_string('[debug] Lazy loading extractors enabled' + '\\n')\n        try:\n            sp = subprocess.Popen(\n                ['git', 'rev-parse', '--short', 'HEAD'],\n                stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                cwd=os.path.dirname(os.path.abspath(__file__)))\n            out, err = sp.communicate()\n            out = out.decode().strip()\n            if re.match('[0-9a-f]+', out):\n                self._write_string('[debug] Git HEAD: ' + out + '\\n')\n        except Exception:\n            try:\n                sys.exc_clear()\n            except Exception:\n                pass\n\n        def python_implementation():\n            impl_name = platform.python_implementation()\n            if impl_name == 'PyPy' and hasattr(sys, 'pypy_version_info'):\n                return impl_name + ' version %d.%d.%d' % sys.pypy_version_info[:3]\n            return impl_name\n\n        self._write_string('[debug] Python version %s (%s) - %s\\n' % (\n            platform.python_version(), python_implementation(),\n            platform_name()))\n\n        exe_versions = FFmpegPostProcessor.get_versions(self)\n        exe_versions['rtmpdump'] = rtmpdump_version()\n        exe_versions['phantomjs'] = PhantomJSwrapper._version()\n        exe_str = ', '.join(\n            '%s %s' % (exe, v)\n            for exe, v in sorted(exe_versions.items())\n            if v\n        )\n        if not exe_str:\n            exe_str = 'none'\n        self._write_string('[debug] exe versions: %s\\n' % exe_str)\n\n        proxy_map = {}\n        for handler in self._opener.handlers:\n            if hasattr(handler, 'proxies'):\n                proxy_map.update(handler.proxies)\n        self._write_string('[debug] Proxy map: ' + compat_str(proxy_map) + '\\n')\n\n        if self.params.get('call_home', False):\n            ipaddr = self.urlopen('https://yt-dl.org/ip').read().decode('utf-8')\n            self._write_string('[debug] Public IP address: %s\\n' % ipaddr)\n            latest_version = self.urlopen(\n                'https://yt-dl.org/latest/version').read().decode('utf-8')\n            if version_tuple(latest_version) > version_tuple(__version__):\n                self.report_warning(\n                    'You are using an outdated version (newest version: %s)! '\n                    'See https://yt-dl.org/update if you need help updating.' %\n                    latest_version)\n\n    def _setup_opener(self):\n        timeout_val = self.params.get('socket_timeout')\n        self._socket_timeout = 600 if timeout_val is None else float(timeout_val)\n\n        opts_cookiefile = self.params.get('cookiefile')\n        opts_proxy = self.params.get('proxy')\n\n        if opts_cookiefile is None:\n            self.cookiejar = compat_cookiejar.CookieJar()\n        else:\n            opts_cookiefile = expand_path(opts_cookiefile)\n            self.cookiejar = compat_cookiejar.MozillaCookieJar(\n                opts_cookiefile)\n            if os.access(opts_cookiefile, os.R_OK):\n                self.cookiejar.load()\n\n        cookie_processor = YoutubeDLCookieProcessor(self.cookiejar)\n        if opts_proxy is not None:\n            if opts_proxy == '':\n                proxies = {}\n            else:\n                proxies = {'http': opts_proxy, 'https': opts_proxy}\n        else:\n            proxies = compat_urllib_request.getproxies()\n            # Set HTTPS proxy to HTTP one if given (https://github.com/rg3/youtube-dl/issues/805)\n            if 'http' in proxies and 'https' not in proxies:\n                proxies['https'] = proxies['http']\n        proxy_handler = PerRequestProxyHandler(proxies)\n\n        debuglevel = 1 if self.params.get('debug_printtraffic') else 0\n        https_handler = make_HTTPS_handler(self.params, debuglevel=debuglevel)\n        ydlh = YoutubeDLHandler(self.params, debuglevel=debuglevel)\n        data_handler = compat_urllib_request_DataHandler()\n\n        # When passing our own FileHandler instance, build_opener won't add the\n        # default FileHandler and allows us to disable the file protocol, which\n        # can be used for malicious purposes (see\n        # https://github.com/rg3/youtube-dl/issues/8227)\n        file_handler = compat_urllib_request.FileHandler()\n\n        def file_open(*args, **kwargs):\n            raise compat_urllib_error.URLError('file:// scheme is explicitly disabled in youtube-dl for security reasons')\n        file_handler.file_open = file_open\n\n        opener = compat_urllib_request.build_opener(\n            proxy_handler, https_handler, cookie_processor, ydlh, data_handler, file_handler)\n\n        # Delete the default user-agent header, which would otherwise apply in\n        # cases where our custom HTTP handler doesn't come into play\n        # (See https://github.com/rg3/youtube-dl/issues/1309 for details)\n        opener.addheaders = []\n        self._opener = opener\n\n    def encode(self, s):\n        if isinstance(s, bytes):\n            return s  # Already encoded\n\n        try:\n            return s.encode(self.get_encoding())\n        except UnicodeEncodeError as err:\n            err.reason = err.reason + '. Check your system encoding configuration or use the --encoding option.'\n            raise\n\n    def get_encoding(self):\n        encoding = self.params.get('encoding')\n        if encoding is None:\n            encoding = preferredencoding()\n        return encoding\n\n    def _write_thumbnails(self, info_dict, filename):\n        if self.params.get('writethumbnail', False):\n            thumbnails = info_dict.get('thumbnails')\n            if thumbnails:\n                thumbnails = [thumbnails[-1]]\n        elif self.params.get('write_all_thumbnails', False):\n            thumbnails = info_dict.get('thumbnails')\n        else:\n            return\n\n        if not thumbnails:\n            # No thumbnails present, so return immediately\n            return\n\n        for t in thumbnails:\n            thumb_ext = determine_ext(t['url'], 'jpg')\n            suffix = '_%s' % t['id'] if len(thumbnails) > 1 else ''\n            thumb_display_id = '%s ' % t['id'] if len(thumbnails) > 1 else ''\n            t['filename'] = thumb_filename = os.path.splitext(filename)[0] + suffix + '.' + thumb_ext\n\n            if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(thumb_filename)):\n                self.to_screen('[%s] %s: Thumbnail %sis already present' %\n                               (info_dict['extractor'], info_dict['id'], thumb_display_id))\n            else:\n                self.to_screen('[%s] %s: Downloading thumbnail %s...' %\n                               (info_dict['extractor'], info_dict['id'], thumb_display_id))\n                try:\n                    uf = self.urlopen(t['url'])\n                    with open(encodeFilename(thumb_filename), 'wb') as thumbf:\n                        shutil.copyfileobj(uf, thumbf)\n                    self.to_screen('[%s] %s: Writing thumbnail %sto: %s' %\n                                   (info_dict['extractor'], info_dict['id'], thumb_display_id, thumb_filename))\n                except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n                    self.report_warning('Unable to download thumbnail \"%s\": %s' %\n                                        (t['url'], error_to_compat_str(err)))\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "YoutubeDL.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/YoutubeDL.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}