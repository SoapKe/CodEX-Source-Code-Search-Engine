{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport logging\n\nfrom odoo import api, fields, models, _\n\n_logger = logging.getLogger(__name__)\n\n\nclass CalendarEvent(models.Model):\n    _inherit = 'calendar.event'\n\n    def _get_default_sms_recipients(self):\n        \"\"\" Method overriden from mail.thread (defined in the sms module).\n            SMS text messages will be sent to attendees that haven't declined the event(s).\n        \"\"\"\n        return self.mapped('attendee_ids').filtered(lambda att: att.state != 'declined').mapped('partner_id')\n\n    def _do_sms_reminder(self):\n        \"\"\" Send an SMS text reminder to attendees that haven't declined the event \"\"\"\n        for event in self:\n            sms_msg = _(\"Event reminder: %s on %s.\") % (event.name, event.start_datetime or event.start_date)\n            note_msg = _('SMS text message reminder sent !')\n            event.message_post_send_sms(sms_msg, note_msg=note_msg)\n\n\nclass CalendarAlarm(models.Model):\n    _inherit = 'calendar.alarm'\n\n    type = fields.Selection(selection_add=[('sms', 'SMS Text Message')])\n\n\nclass AlarmManager(models.AbstractModel):\n    _inherit = 'calendar.alarm_manager'\n\n    @api.model\n    def get_next_mail(self):\n        \"\"\" Cron method, overriden here to send SMS reminders as well\n        \"\"\"\n        result = super(AlarmManager, self).get_next_mail()\n        now = fields.Datetime.now()\n        last_sms_cron = self.env['ir.config_parameter'].get_param('calendar_sms.last_sms_cron', default=now)\n        cron = self.env['ir.model.data'].get_object('calendar', 'ir_cron_scheduler_alarm')\n\n        interval_to_second = {\n            \"weeks\": 7 * 24 * 60 * 60,\n            \"days\": 24 * 60 * 60,\n            \"hours\": 60 * 60,\n            \"minutes\": 60,\n            \"seconds\": 1\n        }\n\n        cron_interval = cron.interval_number * interval_to_second[cron.interval_type]\n        events_data = self.get_next_potential_limit_alarm('sms', seconds=cron_interval)\n\n        for event in self.env['calendar.event'].browse(events_data):\n            max_delta = events_data[event.id]['max_duration']\n\n            if event.recurrency:\n                found = False\n                for event_start in event._get_recurrent_date_by_event():\n                    event_start = event_start.replace(tzinfo=None)\n                    last_found = self.do_check_alarm_for_one_date(event_start, event, max_delta, 0, 'sms', after=last_sms_cron, missing=True)\n                    for alert in last_found:\n                        event.browse(alert['event_id'])._do_sms_reminder()\n                        found = True\n                    if found and not last_found:  \n                        break\n            else:\n                event_start = fields.Datetime.from_string(event.start)\n                for alert in self.do_check_alarm_for_one_date(event_start, event, max_delta, 0, 'sms', after=last_sms_cron, missing=True):\n                    event.browse(alert['event_id'])._do_sms_reminder()\n        self.env['ir.config_parameter'].set_param('calendar_sms.last_sms_cron', now)\n        return result\n", "comments": "    method overriden mail thread (defined sms module)              sms text messages sent attendees declined event(s)                      return self mapped( attendee ids ) filtered(lambda att  att state     declined ) mapped( partner id )      def  sms reminder(self)              send sms text reminder attendees declined event             event self              sms msg    ( event reminder     )   (event name  event start datetime event start date)             note msg    ( sms text message reminder sent   )             event message post send sms(sms msg  note msg note msg)   class calendaralarm(models model)       inherit    calendar alarm       type   fields selection(selection add  ( sms    sms text message ) )   class alarmmanager(models abstractmodel)       inherit    calendar alarm manager        api model     def get next mail(self)              cron method  overriden send sms reminders well                    coding  utf 8        part odoo  see license file full copyright licensing details     precedent event alarm one  stop search event ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport logging\n\nfrom odoo import api, fields, models, _\n\n_logger = logging.getLogger(__name__)\n\n\nclass CalendarEvent(models.Model):\n    _inherit = 'calendar.event'\n\n    def _get_default_sms_recipients(self):\n        \"\"\" Method overriden from mail.thread (defined in the sms module).\n            SMS text messages will be sent to attendees that haven't declined the event(s).\n        \"\"\"\n        return self.mapped('attendee_ids').filtered(lambda att: att.state != 'declined').mapped('partner_id')\n\n    def _do_sms_reminder(self):\n        \"\"\" Send an SMS text reminder to attendees that haven't declined the event \"\"\"\n        for event in self:\n            sms_msg = _(\"Event reminder: %s on %s.\") % (event.name, event.start_datetime or event.start_date)\n            note_msg = _('SMS text message reminder sent !')\n            event.message_post_send_sms(sms_msg, note_msg=note_msg)\n\n\nclass CalendarAlarm(models.Model):\n    _inherit = 'calendar.alarm'\n\n    type = fields.Selection(selection_add=[('sms', 'SMS Text Message')])\n\n\nclass AlarmManager(models.AbstractModel):\n    _inherit = 'calendar.alarm_manager'\n\n    @api.model\n    def get_next_mail(self):\n        \"\"\" Cron method, overriden here to send SMS reminders as well\n        \"\"\"\n        result = super(AlarmManager, self).get_next_mail()\n        now = fields.Datetime.now()\n        last_sms_cron = self.env['ir.config_parameter'].get_param('calendar_sms.last_sms_cron', default=now)\n        cron = self.env['ir.model.data'].get_object('calendar', 'ir_cron_scheduler_alarm')\n\n        interval_to_second = {\n            \"weeks\": 7 * 24 * 60 * 60,\n            \"days\": 24 * 60 * 60,\n            \"hours\": 60 * 60,\n            \"minutes\": 60,\n            \"seconds\": 1\n        }\n\n        cron_interval = cron.interval_number * interval_to_second[cron.interval_type]\n        events_data = self.get_next_potential_limit_alarm('sms', seconds=cron_interval)\n\n        for event in self.env['calendar.event'].browse(events_data):\n            max_delta = events_data[event.id]['max_duration']\n\n            if event.recurrency:\n                found = False\n                for event_start in event._get_recurrent_date_by_event():\n                    event_start = event_start.replace(tzinfo=None)\n                    last_found = self.do_check_alarm_for_one_date(event_start, event, max_delta, 0, 'sms', after=last_sms_cron, missing=True)\n                    for alert in last_found:\n                        event.browse(alert['event_id'])._do_sms_reminder()\n                        found = True\n                    if found and not last_found:  # if the precedent event had an alarm but not this one, we can stop the search for this event\n                        break\n            else:\n                event_start = fields.Datetime.from_string(event.start)\n                for alert in self.do_check_alarm_for_one_date(event_start, event, max_delta, 0, 'sms', after=last_sms_cron, missing=True):\n                    event.browse(alert['event_id'])._do_sms_reminder()\n        self.env['ir.config_parameter'].set_param('calendar_sms.last_sms_cron', now)\n        return result\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "calendar.py", "id": "5230e8bafde7292a4e66773c52170305", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/calendar_sms/models/calendar.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}