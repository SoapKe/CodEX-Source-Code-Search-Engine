{"author": "getredash", "code": "from tests import BaseTestCase\nfrom mock import MagicMock, ANY\n\nimport redash.tasks.alerts\nfrom redash.tasks.alerts import check_alerts_for_query, notify_subscriptions, should_notify\nfrom redash.models import Alert\n\n\nclass TestCheckAlertsForQuery(BaseTestCase):\n    def test_notifies_subscribers_when_should(self):\n        redash.tasks.alerts.notify_subscriptions = MagicMock()\n        Alert.evaluate = MagicMock(return_value=Alert.TRIGGERED_STATE)\n\n        alert = self.factory.create_alert()\n        check_alerts_for_query(alert.query_id)\n\n        self.assertTrue(redash.tasks.alerts.notify_subscriptions.called)\n\n    def test_doesnt_notify_when_nothing_changed(self):\n        redash.tasks.alerts.notify_subscriptions = MagicMock()\n        Alert.evaluate = MagicMock(return_value=Alert.OK_STATE)\n\n        alert = self.factory.create_alert()\n        check_alerts_for_query(alert.query_id)\n\n        self.assertFalse(redash.tasks.alerts.notify_subscriptions.called)\n\n\nclass TestNotifySubscriptions(BaseTestCase):\n    def test_calls_notify_for_subscribers(self):\n        subscription = self.factory.create_alert_subscription()\n        subscription.notify = MagicMock()\n        notify_subscriptions(subscription.alert, Alert.OK_STATE)\n        subscription.notify.assert_called_with(subscription.alert, subscription.alert.query_rel, subscription.user, Alert.OK_STATE, ANY, ANY)\n", "comments": "", "content": "from tests import BaseTestCase\nfrom mock import MagicMock, ANY\n\nimport redash.tasks.alerts\nfrom redash.tasks.alerts import check_alerts_for_query, notify_subscriptions, should_notify\nfrom redash.models import Alert\n\n\nclass TestCheckAlertsForQuery(BaseTestCase):\n    def test_notifies_subscribers_when_should(self):\n        redash.tasks.alerts.notify_subscriptions = MagicMock()\n        Alert.evaluate = MagicMock(return_value=Alert.TRIGGERED_STATE)\n\n        alert = self.factory.create_alert()\n        check_alerts_for_query(alert.query_id)\n\n        self.assertTrue(redash.tasks.alerts.notify_subscriptions.called)\n\n    def test_doesnt_notify_when_nothing_changed(self):\n        redash.tasks.alerts.notify_subscriptions = MagicMock()\n        Alert.evaluate = MagicMock(return_value=Alert.OK_STATE)\n\n        alert = self.factory.create_alert()\n        check_alerts_for_query(alert.query_id)\n\n        self.assertFalse(redash.tasks.alerts.notify_subscriptions.called)\n\n\nclass TestNotifySubscriptions(BaseTestCase):\n    def test_calls_notify_for_subscribers(self):\n        subscription = self.factory.create_alert_subscription()\n        subscription.notify = MagicMock()\n        notify_subscriptions(subscription.alert, Alert.OK_STATE)\n        subscription.notify.assert_called_with(subscription.alert, subscription.alert.query_rel, subscription.user, Alert.OK_STATE, ANY, ANY)\n", "description": "Make Your Company Data Driven. Connect to any data source, easily visualize and share your data.", "file_name": "test_alerts.py", "id": "939e3c97956f43642fb65b0e58d91260", "language": "Python", "project_name": "redash", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/getredash-redash/getredash-redash-0410d83/tests/tasks/test_alerts.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:54:55Z", "url": "https://github.com/getredash/redash", "wiki": false}