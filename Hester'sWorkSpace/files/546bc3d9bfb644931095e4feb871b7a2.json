{"author": "gunthercox", "code": "# -*- coding: utf-8 -*-\nfrom unittest import TestCase\nfrom datetime import timedelta, datetime\nfrom chatterbot import parsing\n\n\nclass DateTimeParsingFunctionIntegrationTestCases(TestCase):\n    \"\"\"\n    Test the datetime parseing module.\n\n    Output of the parser is an array of tuples\n    [match, value, (start, end)]\n    \"\"\"\n\n    def setUp(self):\n        super(DateTimeParsingFunctionIntegrationTestCases, self).setUp()\n        self.base_date = datetime.now()\n\n    def test_captured_pattern_is_on_date(self):\n        input_text = 'The event is on Monday 12 January 2012'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn('Monday 12 January 2012', parser[0])\n        self.assertEqual(parser[0][1], datetime(2012, 1, 12))\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_this_weekday(self):\n        input_text = 'This monday'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d-%m-%y'),\n            parsing.this_week_day(self.base_date, 0).strftime('%d-%m-%y')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_last_weekday(self):\n        input_text = 'Last monday'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d-%m-%y'),\n            parsing.previous_week_day(self.base_date, 0).strftime('%d-%m-%y')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_next_weekday(self):\n        input_text = 'Next monday'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d-%m-%y'),\n            parsing.next_week_day(self.base_date, 0).strftime('%d-%m-%y')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_minutes_from_now(self):\n        input_text = '25 minutes from now'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d-%m-%y'),\n            parsing.date_from_duration(\n                self.base_date, 25, 'minutes', 'from now'\n            ).strftime('%d-%m-%y')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_days_later(self):\n        input_text = '10 days later'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d-%m-%y'),\n            parsing.date_from_duration(self.base_date, 10, 'days', 'later').strftime('%d-%m-%y')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_year(self):\n        input_text = '2010'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(parser[0][1].strftime('%Y'), input_text)\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_today(self):\n        input_text = 'today'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(parser[0][1].strftime('%d'), datetime.today().strftime('%d'))\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_tomorrow(self):\n        input_text = 'tomorrow'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d'),\n            (datetime.today() + timedelta(days=1)).strftime('%d')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_yesterday(self):\n        input_text = 'yesterday'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d'),\n            (datetime.today() - timedelta(days=1)).strftime('%d')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_before_yesterday(self):\n        input_text = 'day before yesterday'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d'),\n            (datetime.today() - timedelta(days=2)).strftime('%d')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_before_today(self):\n        input_text = 'day before today'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d'),\n            (datetime.today() - timedelta(days=1)).strftime('%d')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_before_tomorrow(self):\n        input_text = 'day before tomorrow'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d'),\n            (datetime.today() - timedelta(days=0)).strftime('%d')\n        )\n        self.assertEqual(len(parser), 1)\n\n        input_text = '2 days before'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d'),\n            (datetime.today() - timedelta(days=2)).strftime('%d')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_two_days(self):\n        input_text = 'Monday and Friday'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn('Monday', parser[0])\n        self.assertIn('Friday', parser[1])\n        self.assertEqual(\n            parser[0][1].strftime('%d'),\n            parsing.this_week_day(self.base_date, 0).strftime('%d')\n        )\n        self.assertEqual(\n            parser[1][1].strftime('%d'),\n            parsing.this_week_day(self.base_date, 4).strftime('%d')\n        )\n        self.assertEqual(len(parser), 2)\n\n    def test_captured_pattern_first_quarter_of_year(self):\n        input_text = 'First quarter of 2016'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(parser[0][1][0].strftime('%d-%m-%Y'), '01-01-2016')\n        self.assertEqual(parser[0][1][1].strftime('%d-%m-%Y'), '31-03-2016')\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_last_quarter_of_year(self):\n        input_text = 'Last quarter of 2015'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(parser[0][1][0].strftime('%d-%m-%Y'), '01-09-2015')\n        self.assertEqual(parser[0][1][1].strftime('%d-%m-%Y'), '31-12-2015')\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_is_on_day(self):\n        input_text = 'My birthday is on January 2nd.'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn('January 2nd', parser[0])\n        self.assertEqual(parser[0][1].month, 1)\n        self.assertEqual(parser[0][1].day, 2)\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_is_on_day_of_year_variation1(self):\n        input_text = 'My birthday is on January 1st 2014.'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn('January 1st 2014', parser[0])\n        self.assertEqual(parser[0][1].strftime('%d-%m-%Y'), '01-01-2014')\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_is_on_day_of_year_variation2(self):\n        input_text = 'My birthday is on 2nd January 2014.'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn('2nd January 2014', parser[0])\n        self.assertEqual(parser[0][1].strftime('%d-%m-%Y'), '02-01-2014')\n        self.assertEqual(len(parser), 1)\n\n\nclass DateTimeParsingTestCases(TestCase):\n    \"\"\"\n    Unit tests for datetime parsing functions.\n    \"\"\"\n\n    def test_next_week_day(self):\n        base_date = datetime(2016, 12, 7, 10, 10, 52, 85280)\n        weekday = 2  \n        result = parsing.next_week_day(base_date, weekday)\n\n        self.assertEqual(result, datetime(2016, 12, 14, 10, 10, 52, 85280))\n\n    def test_previous_week_day(self):\n        base_date = datetime(2016, 12, 14, 10, 10, 52, 85280)\n        weekday = 2  \n        result = parsing.previous_week_day(base_date, weekday)\n\n        self.assertEqual(result, datetime(2016, 12, 7, 10, 10, 52, 85280))\n\n    def test_this_week_day_before_day(self):\n        base_date = datetime(2016, 12, 5, 10, 10, 52, 85280)  \n        weekday = 2  \n        result = parsing.this_week_day(base_date, weekday)\n\n        self.assertEqual(result, datetime(2016, 12, 7, 10, 10, 52, 85280))\n\n    def test_this_week_day_after_day(self):\n        base_date = datetime(2016, 12, 9, 10, 10, 52, 85280)  \n        weekday = 2  \n        result = parsing.this_week_day(base_date, weekday)\n\n        self.assertEqual(result, datetime(2016, 12, 14, 10, 10, 52, 85280))\n", "comments": "        test datetime parseing module       output parser array tuples      match  value  (start  end)               def setup(self)          super(datetimeparsingfunctionintegrationtestcases  self) setup()         self base date   datetime now()      def test captured pattern date(self)          input text    the event monday 12 january 2012          parser   parsing datetime parsing(input text)         self assertin( monday 12 january 2012   parser 0 )         self assertequal(parser 0  1   datetime(2012  1  12))         self assertequal(len(parser)  1)      def test captured pattern weekday(self)          input text    this monday          parser   parsing datetime parsing(input text)         self assertin(input text  parser 0 )         self assertequal(             parser 0  1  strftime(    )              parsing week day(self base date  0) strftime(    )         )         self assertequal(len(parser)  1)      def test captured pattern last weekday(self)          input text    last monday          parser   parsing datetime parsing(input text)         self assertin(input text  parser 0 )         self assertequal(             parser 0  1  strftime(    )              parsing previous week day(self base date  0) strftime(    )         )         self assertequal(len(parser)  1)      def test captured pattern next weekday(self)          input text    next monday          parser   parsing datetime parsing(input text)         self assertin(input text  parser 0 )         self assertequal(             parser 0  1  strftime(    )              parsing next week day(self base date  0) strftime(    )         )         self assertequal(len(parser)  1)      def test captured pattern minutes now(self)          input text    25 minutes          parser   parsing datetime parsing(input text)         self assertin(input text  parser 0 )         self assertequal(             parser 0  1  strftime(    )              parsing date duration(                 self base date  25   minutes                 ) strftime(    )         )         self assertequal(len(parser)  1)      def test captured pattern days later(self)          input text    10 days later          parser   parsing datetime parsing(input text)         self assertin(input text  parser 0 )         self assertequal(             parser 0  1  strftime(    )              parsing date duration(self base date  10   days    later ) strftime(    )         )         self assertequal(len(parser)  1)      def test captured pattern year(self)          input text    2010          parser   parsing datetime parsing(input text)         self assertin(input text  parser 0 )         self assertequal(parser 0  1  strftime(  y )  input text)         self assertequal(len(parser)  1)      def test captured pattern today(self)          input text    today          parser   parsing datetime parsing(input text)         self assertin(input text  parser 0 )         self assertequal(parser 0  1  strftime(  )  datetime today() strftime(  ))         self assertequal(len(parser)  1)      def test captured pattern tomorrow(self)          input text    tomorrow          parser   parsing datetime parsing(input text)         self assertin(input text  parser 0 )         self assertequal(             parser 0  1  strftime(  )              (datetime today()   timedelta(days 1)) strftime(  )         )         self assertequal(len(parser)  1)      def test captured pattern yesterday(self)          input text    yesterday          parser   parsing datetime parsing(input text)         self assertin(input text  parser 0 )         self assertequal(             parser 0  1  strftime(  )              (datetime today()   timedelta(days 1)) strftime(  )         )         self assertequal(len(parser)  1)      def test captured pattern yesterday(self)          input text    day yesterday          parser   parsing datetime parsing(input text)         self assertin(input text  parser 0 )         self assertequal(             parser 0  1  strftime(  )              (datetime today()   timedelta(days 2)) strftime(  )         )         self assertequal(len(parser)  1)      def test captured pattern today(self)          input text    day today          parser   parsing datetime parsing(input text)         self assertin(input text  parser 0 )         self assertequal(             parser 0  1  strftime(  )              (datetime today()   timedelta(days 1)) strftime(  )         )         self assertequal(len(parser)  1)      def test captured pattern tomorrow(self)          input text    day tomorrow          parser   parsing datetime parsing(input text)         self assertin(input text  parser 0 )         self assertequal(             parser 0  1  strftime(  )              (datetime today()   timedelta(days 0)) strftime(  )         )         self assertequal(len(parser)  1)          input text    2 days          parser   parsing datetime parsing(input text)         self assertin(input text  parser 0 )         self assertequal(             parser 0  1  strftime(  )              (datetime today()   timedelta(days 2)) strftime(  )         )         self assertequal(len(parser)  1)      def test captured pattern two days(self)          input text    monday friday          parser   parsing datetime parsing(input text)         self assertin( monday   parser 0 )         self assertin( friday   parser 1 )         self assertequal(             parser 0  1  strftime(  )              parsing week day(self base date  0) strftime(  )         )         self assertequal(             parser 1  1  strftime(  )              parsing week day(self base date  4) strftime(  )         )         self assertequal(len(parser)  2)      def test captured pattern first quarter year(self)          input text    first quarter 2016          parser   parsing datetime parsing(input text)         self assertin(input text  parser 0 )         self assertequal(parser 0  1  0  strftime(    y )   01 01 2016 )         self assertequal(parser 0  1  1  strftime(    y )   31 03 2016 )         self assertequal(len(parser)  1)      def test captured pattern last quarter year(self)          input text    last quarter 2015          parser   parsing datetime parsing(input text)         self assertin(input text  parser 0 )         self assertequal(parser 0  1  0  strftime(    y )   01 09 2015 )         self assertequal(parser 0  1  1  strftime(    y )   31 12 2015 )         self assertequal(len(parser)  1)      def test captured pattern day(self)          input text    my birthday january 2nd           parser   parsing datetime parsing(input text)         self assertin( january 2nd   parser 0 )         self assertequal(parser 0  1  month  1)         self assertequal(parser 0  1  day  2)         self assertequal(len(parser)  1)      def test captured pattern day year variation1(self)          input text    my birthday january 1st 2014           parser   parsing datetime parsing(input text)         self assertin( january 1st 2014   parser 0 )         self assertequal(parser 0  1  strftime(    y )   01 01 2014 )         self assertequal(len(parser)  1)      def test captured pattern day year variation2(self)          input text    my birthday 2nd january 2014           parser   parsing datetime parsing(input text)         self assertin( 2nd january 2014   parser 0 )         self assertequal(parser 0  1  strftime(    y )   02 01 2014 )         self assertequal(len(parser)  1)   class datetimeparsingtestcases(testcase)              unit tests datetime parsing functions                 coding  utf 8        wednesday    wednesday    monday    wednesday    friday    wednesday ", "content": "# -*- coding: utf-8 -*-\nfrom unittest import TestCase\nfrom datetime import timedelta, datetime\nfrom chatterbot import parsing\n\n\nclass DateTimeParsingFunctionIntegrationTestCases(TestCase):\n    \"\"\"\n    Test the datetime parseing module.\n\n    Output of the parser is an array of tuples\n    [match, value, (start, end)]\n    \"\"\"\n\n    def setUp(self):\n        super(DateTimeParsingFunctionIntegrationTestCases, self).setUp()\n        self.base_date = datetime.now()\n\n    def test_captured_pattern_is_on_date(self):\n        input_text = 'The event is on Monday 12 January 2012'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn('Monday 12 January 2012', parser[0])\n        self.assertEqual(parser[0][1], datetime(2012, 1, 12))\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_this_weekday(self):\n        input_text = 'This monday'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d-%m-%y'),\n            parsing.this_week_day(self.base_date, 0).strftime('%d-%m-%y')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_last_weekday(self):\n        input_text = 'Last monday'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d-%m-%y'),\n            parsing.previous_week_day(self.base_date, 0).strftime('%d-%m-%y')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_next_weekday(self):\n        input_text = 'Next monday'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d-%m-%y'),\n            parsing.next_week_day(self.base_date, 0).strftime('%d-%m-%y')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_minutes_from_now(self):\n        input_text = '25 minutes from now'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d-%m-%y'),\n            parsing.date_from_duration(\n                self.base_date, 25, 'minutes', 'from now'\n            ).strftime('%d-%m-%y')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_days_later(self):\n        input_text = '10 days later'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d-%m-%y'),\n            parsing.date_from_duration(self.base_date, 10, 'days', 'later').strftime('%d-%m-%y')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_year(self):\n        input_text = '2010'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(parser[0][1].strftime('%Y'), input_text)\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_today(self):\n        input_text = 'today'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(parser[0][1].strftime('%d'), datetime.today().strftime('%d'))\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_tomorrow(self):\n        input_text = 'tomorrow'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d'),\n            (datetime.today() + timedelta(days=1)).strftime('%d')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_yesterday(self):\n        input_text = 'yesterday'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d'),\n            (datetime.today() - timedelta(days=1)).strftime('%d')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_before_yesterday(self):\n        input_text = 'day before yesterday'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d'),\n            (datetime.today() - timedelta(days=2)).strftime('%d')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_before_today(self):\n        input_text = 'day before today'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d'),\n            (datetime.today() - timedelta(days=1)).strftime('%d')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_before_tomorrow(self):\n        input_text = 'day before tomorrow'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d'),\n            (datetime.today() - timedelta(days=0)).strftime('%d')\n        )\n        self.assertEqual(len(parser), 1)\n\n        input_text = '2 days before'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(\n            parser[0][1].strftime('%d'),\n            (datetime.today() - timedelta(days=2)).strftime('%d')\n        )\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_two_days(self):\n        input_text = 'Monday and Friday'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn('Monday', parser[0])\n        self.assertIn('Friday', parser[1])\n        self.assertEqual(\n            parser[0][1].strftime('%d'),\n            parsing.this_week_day(self.base_date, 0).strftime('%d')\n        )\n        self.assertEqual(\n            parser[1][1].strftime('%d'),\n            parsing.this_week_day(self.base_date, 4).strftime('%d')\n        )\n        self.assertEqual(len(parser), 2)\n\n    def test_captured_pattern_first_quarter_of_year(self):\n        input_text = 'First quarter of 2016'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(parser[0][1][0].strftime('%d-%m-%Y'), '01-01-2016')\n        self.assertEqual(parser[0][1][1].strftime('%d-%m-%Y'), '31-03-2016')\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_last_quarter_of_year(self):\n        input_text = 'Last quarter of 2015'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn(input_text, parser[0])\n        self.assertEqual(parser[0][1][0].strftime('%d-%m-%Y'), '01-09-2015')\n        self.assertEqual(parser[0][1][1].strftime('%d-%m-%Y'), '31-12-2015')\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_is_on_day(self):\n        input_text = 'My birthday is on January 2nd.'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn('January 2nd', parser[0])\n        self.assertEqual(parser[0][1].month, 1)\n        self.assertEqual(parser[0][1].day, 2)\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_is_on_day_of_year_variation1(self):\n        input_text = 'My birthday is on January 1st 2014.'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn('January 1st 2014', parser[0])\n        self.assertEqual(parser[0][1].strftime('%d-%m-%Y'), '01-01-2014')\n        self.assertEqual(len(parser), 1)\n\n    def test_captured_pattern_is_on_day_of_year_variation2(self):\n        input_text = 'My birthday is on 2nd January 2014.'\n        parser = parsing.datetime_parsing(input_text)\n        self.assertIn('2nd January 2014', parser[0])\n        self.assertEqual(parser[0][1].strftime('%d-%m-%Y'), '02-01-2014')\n        self.assertEqual(len(parser), 1)\n\n\nclass DateTimeParsingTestCases(TestCase):\n    \"\"\"\n    Unit tests for datetime parsing functions.\n    \"\"\"\n\n    def test_next_week_day(self):\n        base_date = datetime(2016, 12, 7, 10, 10, 52, 85280)\n        weekday = 2  # Wednesday\n        result = parsing.next_week_day(base_date, weekday)\n\n        self.assertEqual(result, datetime(2016, 12, 14, 10, 10, 52, 85280))\n\n    def test_previous_week_day(self):\n        base_date = datetime(2016, 12, 14, 10, 10, 52, 85280)\n        weekday = 2  # Wednesday\n        result = parsing.previous_week_day(base_date, weekday)\n\n        self.assertEqual(result, datetime(2016, 12, 7, 10, 10, 52, 85280))\n\n    def test_this_week_day_before_day(self):\n        base_date = datetime(2016, 12, 5, 10, 10, 52, 85280)  # Monday\n        weekday = 2  # Wednesday\n        result = parsing.this_week_day(base_date, weekday)\n\n        self.assertEqual(result, datetime(2016, 12, 7, 10, 10, 52, 85280))\n\n    def test_this_week_day_after_day(self):\n        base_date = datetime(2016, 12, 9, 10, 10, 52, 85280)  # Friday\n        weekday = 2  # Wednesday\n        result = parsing.this_week_day(base_date, weekday)\n\n        self.assertEqual(result, datetime(2016, 12, 14, 10, 10, 52, 85280))\n", "description": "ChatterBot is a machine learning, conversational dialog engine for creating chat bots", "file_name": "test_parsing.py", "id": "546bc3d9bfb644931095e4feb871b7a2", "language": "Python", "project_name": "ChatterBot", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/gunthercox-ChatterBot/gunthercox-ChatterBot-f20c412/tests/test_parsing.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:44:53Z", "url": "https://github.com/gunthercox/ChatterBot", "wiki": true}