{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\"\"\"Tests for converting a directory of MIDIs to a NoteSequence TFRecord file.\"\"\"\n\nimport os\nimport tempfile\n\n internal imports\nimport tensorflow as tf\n\nfrom magenta.music import note_sequence_io\nfrom magenta.scripts import convert_dir_to_note_sequences\n\n\nclass ConvertMidiDirToSequencesTest(tf.test.TestCase):\n\n  def setUp(self):\n    midi_filename = os.path.join(tf.resource_loader.get_data_files_path(),\n                                 '../testdata/example.mid')\n\n    root_dir = tempfile.mkdtemp(dir=self.get_temp_dir())\n    sub_1_dir = os.path.join(root_dir, 'sub_1')\n    sub_2_dir = os.path.join(root_dir, 'sub_2')\n    sub_1_sub_dir = os.path.join(sub_1_dir, 'sub')\n\n    tf.gfile.MkDir(sub_1_dir)\n    tf.gfile.MkDir(sub_2_dir)\n    tf.gfile.MkDir(sub_1_sub_dir)\n\n    tf.gfile.Copy(midi_filename, os.path.join(root_dir, 'midi_1.mid'))\n    tf.gfile.Copy(midi_filename, os.path.join(root_dir, 'midi_2.mid'))\n    tf.gfile.Copy(midi_filename, os.path.join(sub_1_dir, 'midi_3.mid'))\n    tf.gfile.Copy(midi_filename, os.path.join(sub_2_dir, 'midi_3.mid'))\n    tf.gfile.Copy(midi_filename, os.path.join(sub_2_dir, 'midi_4.mid'))\n    tf.gfile.Copy(midi_filename, os.path.join(sub_1_sub_dir, 'midi_5.mid'))\n\n    tf.gfile.FastGFile(\n        os.path.join(root_dir, 'non_midi_file'),\n        mode='w').write('non-midi data')\n\n    self.expected_sub_dirs = {\n        '': {'sub_1', 'sub_2', 'sub_1/sub'},\n        'sub_1': {'sub'},\n        'sub_1/sub': set(),\n        'sub_2': set()\n    }\n    self.expected_dir_midi_contents = {\n        '': {'midi_1.mid', 'midi_2.mid'},\n        'sub_1': {'midi_3.mid'},\n        'sub_2': {'midi_3.mid', 'midi_4.mid'},\n        'sub_1/sub': {'midi_5.mid'}\n    }\n    self.root_dir = root_dir\n\n  def runTest(self, relative_root, recursive):\n    \"\"\"Tests the output for the given parameters.\"\"\"\n    root_dir = os.path.join(self.root_dir, relative_root)\n    expected_filenames = self.expected_dir_midi_contents[relative_root]\n    if recursive:\n      for sub_dir in self.expected_sub_dirs[relative_root]:\n        for filename in self.expected_dir_midi_contents[\n            os.path.join(relative_root, sub_dir)]:\n          expected_filenames.add(os.path.join(sub_dir, filename))\n\n    with tempfile.NamedTemporaryFile(\n        prefix='ConvertMidiDirToSequencesTest') as output_file:\n      convert_dir_to_note_sequences.convert_directory(\n          root_dir, output_file.name, recursive)\n      actual_filenames = set()\n      for sequence in note_sequence_io.note_sequence_record_iterator(\n          output_file.name):\n        self.assertEquals(\n            note_sequence_io.generate_note_sequence_id(\n                sequence.filename, os.path.basename(relative_root), 'midi'),\n            sequence.id)\n        self.assertEquals(os.path.basename(root_dir), sequence.collection_name)\n        self.assertNotEquals(0, len(sequence.notes))\n        actual_filenames.add(sequence.filename)\n\n    self.assertEquals(expected_filenames, actual_filenames)\n\n  def testConvertMidiDirToSequences_NoRecurse(self):\n    self.runTest('', recursive=False)\n    self.runTest('sub_1', recursive=False)\n    self.runTest('sub_1/sub', recursive=False)\n    self.runTest('sub_2', recursive=False)\n\n  def testConvertMidiDirToSequences_Recurse(self):\n    self.runTest('', recursive=True)\n    self.runTest('sub_1', recursive=True)\n    self.runTest('sub_1/sub', recursive=True)\n    self.runTest('sub_2', recursive=True)\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "comments": "   tests converting directory midis notesequence tfrecord file      import os import tempfile    internal imports import tensorflow tf  magenta music import note sequence io magenta scripts import convert dir note sequences   class convertmididirtosequencestest(tf test testcase)     def setup(self)      midi filename   os path join(tf resource loader get data files path()                                       testdata example mid )      root dir   tempfile mkdtemp(dir self get temp dir())     sub 1 dir   os path join(root dir   sub 1 )     sub 2 dir   os path join(root dir   sub 2 )     sub 1 sub dir   os path join(sub 1 dir   sub )      tf gfile mkdir(sub 1 dir)     tf gfile mkdir(sub 2 dir)     tf gfile mkdir(sub 1 sub dir)      tf gfile copy(midi filename  os path join(root dir   midi 1 mid ))     tf gfile copy(midi filename  os path join(root dir   midi 2 mid ))     tf gfile copy(midi filename  os path join(sub 1 dir   midi 3 mid ))     tf gfile copy(midi filename  os path join(sub 2 dir   midi 3 mid ))     tf gfile copy(midi filename  os path join(sub 2 dir   midi 4 mid ))     tf gfile copy(midi filename  os path join(sub 1 sub dir   midi 5 mid ))      tf gfile fastgfile(         os path join(root dir   non midi file )          mode  w ) write( non midi data )      self expected sub dirs                   sub 1    sub 2    sub 1 sub             sub 1     sub             sub 1 sub   set()           sub 2   set()           self expected dir midi contents                   midi 1 mid    midi 2 mid             sub 1     midi 3 mid             sub 2     midi 3 mid    midi 4 mid             sub 1 sub     midi 5 mid             self root dir   root dir    def runtest(self  relative root  recursive)         tests output given parameters        copyright 2016 google inc  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license          http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license     internal imports ", "content": "# Copyright 2016 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for converting a directory of MIDIs to a NoteSequence TFRecord file.\"\"\"\n\nimport os\nimport tempfile\n\n# internal imports\nimport tensorflow as tf\n\nfrom magenta.music import note_sequence_io\nfrom magenta.scripts import convert_dir_to_note_sequences\n\n\nclass ConvertMidiDirToSequencesTest(tf.test.TestCase):\n\n  def setUp(self):\n    midi_filename = os.path.join(tf.resource_loader.get_data_files_path(),\n                                 '../testdata/example.mid')\n\n    root_dir = tempfile.mkdtemp(dir=self.get_temp_dir())\n    sub_1_dir = os.path.join(root_dir, 'sub_1')\n    sub_2_dir = os.path.join(root_dir, 'sub_2')\n    sub_1_sub_dir = os.path.join(sub_1_dir, 'sub')\n\n    tf.gfile.MkDir(sub_1_dir)\n    tf.gfile.MkDir(sub_2_dir)\n    tf.gfile.MkDir(sub_1_sub_dir)\n\n    tf.gfile.Copy(midi_filename, os.path.join(root_dir, 'midi_1.mid'))\n    tf.gfile.Copy(midi_filename, os.path.join(root_dir, 'midi_2.mid'))\n    tf.gfile.Copy(midi_filename, os.path.join(sub_1_dir, 'midi_3.mid'))\n    tf.gfile.Copy(midi_filename, os.path.join(sub_2_dir, 'midi_3.mid'))\n    tf.gfile.Copy(midi_filename, os.path.join(sub_2_dir, 'midi_4.mid'))\n    tf.gfile.Copy(midi_filename, os.path.join(sub_1_sub_dir, 'midi_5.mid'))\n\n    tf.gfile.FastGFile(\n        os.path.join(root_dir, 'non_midi_file'),\n        mode='w').write('non-midi data')\n\n    self.expected_sub_dirs = {\n        '': {'sub_1', 'sub_2', 'sub_1/sub'},\n        'sub_1': {'sub'},\n        'sub_1/sub': set(),\n        'sub_2': set()\n    }\n    self.expected_dir_midi_contents = {\n        '': {'midi_1.mid', 'midi_2.mid'},\n        'sub_1': {'midi_3.mid'},\n        'sub_2': {'midi_3.mid', 'midi_4.mid'},\n        'sub_1/sub': {'midi_5.mid'}\n    }\n    self.root_dir = root_dir\n\n  def runTest(self, relative_root, recursive):\n    \"\"\"Tests the output for the given parameters.\"\"\"\n    root_dir = os.path.join(self.root_dir, relative_root)\n    expected_filenames = self.expected_dir_midi_contents[relative_root]\n    if recursive:\n      for sub_dir in self.expected_sub_dirs[relative_root]:\n        for filename in self.expected_dir_midi_contents[\n            os.path.join(relative_root, sub_dir)]:\n          expected_filenames.add(os.path.join(sub_dir, filename))\n\n    with tempfile.NamedTemporaryFile(\n        prefix='ConvertMidiDirToSequencesTest') as output_file:\n      convert_dir_to_note_sequences.convert_directory(\n          root_dir, output_file.name, recursive)\n      actual_filenames = set()\n      for sequence in note_sequence_io.note_sequence_record_iterator(\n          output_file.name):\n        self.assertEquals(\n            note_sequence_io.generate_note_sequence_id(\n                sequence.filename, os.path.basename(relative_root), 'midi'),\n            sequence.id)\n        self.assertEquals(os.path.basename(root_dir), sequence.collection_name)\n        self.assertNotEquals(0, len(sequence.notes))\n        actual_filenames.add(sequence.filename)\n\n    self.assertEquals(expected_filenames, actual_filenames)\n\n  def testConvertMidiDirToSequences_NoRecurse(self):\n    self.runTest('', recursive=False)\n    self.runTest('sub_1', recursive=False)\n    self.runTest('sub_1/sub', recursive=False)\n    self.runTest('sub_2', recursive=False)\n\n  def testConvertMidiDirToSequences_Recurse(self):\n    self.runTest('', recursive=True)\n    self.runTest('sub_1', recursive=True)\n    self.runTest('sub_1/sub', recursive=True)\n    self.runTest('sub_2', recursive=True)\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "description": "Magenta: Music and Art Generation with Machine Intelligence", "file_name": "convert_dir_to_note_sequences_test.py", "id": "4b599eadcba039d95d060d5a68b9889d", "language": "Python", "project_name": "magenta", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-magenta/tensorflow-magenta-c3eda3d/magenta/scripts/convert_dir_to_note_sequences_test.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:52:33Z", "url": "https://github.com/tensorflow/magenta", "wiki": false}