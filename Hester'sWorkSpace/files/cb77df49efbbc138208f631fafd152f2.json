{"author": "tgalal", "code": "from yowsup.layers import YowLayer, YowLayerEvent\nfrom yowsup.layers.protocol_iq.protocolentities import IqProtocolEntity\nfrom yowsup.layers.auth import YowAuthenticationProtocolLayer\nfrom yowsup.layers.protocol_media.protocolentities.iq_requestupload import RequestUploadIqProtocolEntity\nfrom yowsup.layers.protocol_media.mediauploader import MediaUploader\nfrom yowsup.layers.network.layer import YowNetworkLayer\nfrom yowsup.layers.auth.protocolentities import StreamErrorProtocolEntity\nfrom yowsup.layers import EventCallback\nimport inspect\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass ProtocolEntityCallback(object):\n    def __init__(self, entityType):\n        self.entityType = entityType\n\n    def __call__(self, fn):\n        fn.entity_callback = self.entityType\n        return fn\n\n\nclass YowInterfaceLayer(YowLayer):\n\n    PROP_RECONNECT_ON_STREAM_ERR = \"org.openwhatsapp.yowsup.prop.interface.reconnect_on_stream_error\"\n\n    def __init__(self):\n        super(YowInterfaceLayer, self).__init__()\n        self.reconnect = False\n        self.entity_callbacks = {}\n        self.iqRegistry = {}\n        \n        members = inspect.getmembers(self, predicate=inspect.ismethod)\n        for m in members:\n            if hasattr(m[1], \"entity_callback\"):\n                fname = m[0]\n                fn = m[1]\n                self.entity_callbacks[fn.entity_callback] = getattr(self, fname)\n\n\n    def _sendIq(self, iqEntity, onSuccess = None, onError = None):\n        assert iqEntity.getTag() == \"iq\", \"Expected *IqProtocolEntity in _sendIq, got %s\" % iqEntity.getTag()\n        self.iqRegistry[iqEntity.getId()] = (iqEntity, onSuccess, onError)\n        self.toLower(iqEntity)\n\n    def processIqRegistry(self, entity):\n        \n        if entity.getTag() == \"iq\":\n            iq_id = entity.getId()\n            if iq_id in self.iqRegistry:\n                originalIq, successClbk, errorClbk = self.iqRegistry[iq_id]\n                del self.iqRegistry[iq_id]\n\n                if entity.getType() ==  IqProtocolEntity.TYPE_RESULT and successClbk:\n                    successClbk(entity, originalIq)\n                elif entity.getType() == IqProtocolEntity.TYPE_ERROR and errorClbk:\n                    errorClbk(entity, originalIq)\n                return True\n\n        return False\n\n    def getOwnJid(self, full = True):\n        return self.getLayerInterface(YowAuthenticationProtocolLayer).getUsername(full)\n\n    def connect(self):\n        self.getLayerInterface(YowNetworkLayer).connect()\n\n    def disconnect(self):\n        disconnectEvent = YowLayerEvent(YowNetworkLayer.EVENT_STATE_DISCONNECT)\n        self.broadcastEvent(disconnectEvent)\n\n    def send(self, data):\n        self.toLower(data)\n\n    def receive(self, entity):\n        if not self.processIqRegistry(entity):\n            entityType = entity.getTag()\n            if entityType in self.entity_callbacks:\n                self.entity_callbacks[entityType](entity)\n            else:\n                self.toUpper(entity)\n\n    @ProtocolEntityCallback(\"stream:error\")\n    def onStreamError(self, streamErrorEntity):\n        logger.error(streamErrorEntity)\n        if self.getProp(self.__class__.PROP_RECONNECT_ON_STREAM_ERR, True):\n            if streamErrorEntity.getErrorType() == StreamErrorProtocolEntity.TYPE_CONFLICT:\n                logger.warn(\"Not reconnecting because you signed in in another location\")\n            else:\n                logger.info(\"Initiating reconnect\")\n                self.reconnect = True\n        else:\n            logger.warn(\"Not reconnecting because property %s is not set\" % self.__class__.PROP_RECONNECT_ON_STREAM_ERR)\n        self.toUpper(streamErrorEntity)\n        self.disconnect()\n\n    @EventCallback(YowNetworkLayer.EVENT_STATE_CONNECTED)\n    def onConnected(self, yowLayerEvent):\n        self.reconnect = False\n\n    @EventCallback(YowNetworkLayer.EVENT_STATE_DISCONNECTED)\n    def onDisconnected(self, yowLayerEvent):\n        if self.reconnect:\n            self.reconnect = False\n            self.connect()\n\n    def _sendMediaMessage(self, builder, success, error = None, progress = None):\n        # axolotlIface = self.getLayerInterface(YowAxolotlLayer)\n        \n        #     axolotlIface.encryptMedia(builder)\n\n        iq = RequestUploadIqProtocolEntity(builder.mediaType, filePath = builder.getFilepath(), encrypted = builder.isEncrypted())\n        successFn = lambda resultEntity, requestUploadEntity: self.__onRequestUploadSuccess(resultEntity, requestUploadEntity, builder, success, error, progress)\n        errorFn = lambda errorEntity, requestUploadEntity: self.__onRequestUploadError(errorEntity, requestUploadEntity, error)\n        self._sendIq(iq, successFn, errorFn)\n\n    def __onRequestUploadSuccess(self, resultRequestUploadIqProtocolEntity, requestUploadEntity, builder, success, error = None, progress = None):\n        if(resultRequestUploadIqProtocolEntity.isDuplicate()):\n            return success(builder.build(resultRequestUploadIqProtocolEntity.getUrl(), resultRequestUploadIqProtocolEntity.getIp()))\n        else:\n            successFn = lambda path, jid, url: self.__onMediaUploadSuccess(builder, url, resultRequestUploadIqProtocolEntity.getIp(), success)\n            errorFn = lambda path, jid, errorText: self.__onMediaUploadError(builder, errorText, error)\n\n            mediaUploader = MediaUploader(builder.jid, self.getOwnJid(), builder.getFilepath(),\n                                      resultRequestUploadIqProtocolEntity.getUrl(),\n                                      resultRequestUploadIqProtocolEntity.getResumeOffset(),\n                                      successFn, errorFn, progress, async=True)\n            mediaUploader.start()\n\n    def __onRequestUploadError(self, errorEntity, requestUploadEntity, builder, error = None):\n        if error:\n            return error(errorEntity.code, errorEntity.text, errorEntity.backoff)\n\n    def __onMediaUploadSuccess(self, builder, url, ip, successClbk):\n        messageNode = builder.build(url, ip)\n        return successClbk(messageNode)\n\n    def __onMediaUploadError(self, builder, errorText, errorClbk = None):\n        if errorClbk:\n            return errorClbk(0, errorText, 0)\n\n    def __str__(self):\n        return \"Interface Layer\"\n", "comments": "             type entity  iqprotocolentity                self receiptsregistry         axolotliface   self getlayerinterface(yowaxolotllayer)    axolotliface         axolotliface encryptmedia(builder) ", "content": "from yowsup.layers import YowLayer, YowLayerEvent\nfrom yowsup.layers.protocol_iq.protocolentities import IqProtocolEntity\nfrom yowsup.layers.auth import YowAuthenticationProtocolLayer\nfrom yowsup.layers.protocol_media.protocolentities.iq_requestupload import RequestUploadIqProtocolEntity\nfrom yowsup.layers.protocol_media.mediauploader import MediaUploader\nfrom yowsup.layers.network.layer import YowNetworkLayer\nfrom yowsup.layers.auth.protocolentities import StreamErrorProtocolEntity\nfrom yowsup.layers import EventCallback\nimport inspect\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass ProtocolEntityCallback(object):\n    def __init__(self, entityType):\n        self.entityType = entityType\n\n    def __call__(self, fn):\n        fn.entity_callback = self.entityType\n        return fn\n\n\nclass YowInterfaceLayer(YowLayer):\n\n    PROP_RECONNECT_ON_STREAM_ERR = \"org.openwhatsapp.yowsup.prop.interface.reconnect_on_stream_error\"\n\n    def __init__(self):\n        super(YowInterfaceLayer, self).__init__()\n        self.reconnect = False\n        self.entity_callbacks = {}\n        self.iqRegistry = {}\n        # self.receiptsRegistry = {}\n        members = inspect.getmembers(self, predicate=inspect.ismethod)\n        for m in members:\n            if hasattr(m[1], \"entity_callback\"):\n                fname = m[0]\n                fn = m[1]\n                self.entity_callbacks[fn.entity_callback] = getattr(self, fname)\n\n\n    def _sendIq(self, iqEntity, onSuccess = None, onError = None):\n        assert iqEntity.getTag() == \"iq\", \"Expected *IqProtocolEntity in _sendIq, got %s\" % iqEntity.getTag()\n        self.iqRegistry[iqEntity.getId()] = (iqEntity, onSuccess, onError)\n        self.toLower(iqEntity)\n\n    def processIqRegistry(self, entity):\n        \"\"\"\n        :type entity: IqProtocolEntity\n        \"\"\"\n        if entity.getTag() == \"iq\":\n            iq_id = entity.getId()\n            if iq_id in self.iqRegistry:\n                originalIq, successClbk, errorClbk = self.iqRegistry[iq_id]\n                del self.iqRegistry[iq_id]\n\n                if entity.getType() ==  IqProtocolEntity.TYPE_RESULT and successClbk:\n                    successClbk(entity, originalIq)\n                elif entity.getType() == IqProtocolEntity.TYPE_ERROR and errorClbk:\n                    errorClbk(entity, originalIq)\n                return True\n\n        return False\n\n    def getOwnJid(self, full = True):\n        return self.getLayerInterface(YowAuthenticationProtocolLayer).getUsername(full)\n\n    def connect(self):\n        self.getLayerInterface(YowNetworkLayer).connect()\n\n    def disconnect(self):\n        disconnectEvent = YowLayerEvent(YowNetworkLayer.EVENT_STATE_DISCONNECT)\n        self.broadcastEvent(disconnectEvent)\n\n    def send(self, data):\n        self.toLower(data)\n\n    def receive(self, entity):\n        if not self.processIqRegistry(entity):\n            entityType = entity.getTag()\n            if entityType in self.entity_callbacks:\n                self.entity_callbacks[entityType](entity)\n            else:\n                self.toUpper(entity)\n\n    @ProtocolEntityCallback(\"stream:error\")\n    def onStreamError(self, streamErrorEntity):\n        logger.error(streamErrorEntity)\n        if self.getProp(self.__class__.PROP_RECONNECT_ON_STREAM_ERR, True):\n            if streamErrorEntity.getErrorType() == StreamErrorProtocolEntity.TYPE_CONFLICT:\n                logger.warn(\"Not reconnecting because you signed in in another location\")\n            else:\n                logger.info(\"Initiating reconnect\")\n                self.reconnect = True\n        else:\n            logger.warn(\"Not reconnecting because property %s is not set\" % self.__class__.PROP_RECONNECT_ON_STREAM_ERR)\n        self.toUpper(streamErrorEntity)\n        self.disconnect()\n\n    @EventCallback(YowNetworkLayer.EVENT_STATE_CONNECTED)\n    def onConnected(self, yowLayerEvent):\n        self.reconnect = False\n\n    @EventCallback(YowNetworkLayer.EVENT_STATE_DISCONNECTED)\n    def onDisconnected(self, yowLayerEvent):\n        if self.reconnect:\n            self.reconnect = False\n            self.connect()\n\n    def _sendMediaMessage(self, builder, success, error = None, progress = None):\n        # axolotlIface = self.getLayerInterface(YowAxolotlLayer)\n        # if axolotlIface:\n        #     axolotlIface.encryptMedia(builder)\n\n        iq = RequestUploadIqProtocolEntity(builder.mediaType, filePath = builder.getFilepath(), encrypted = builder.isEncrypted())\n        successFn = lambda resultEntity, requestUploadEntity: self.__onRequestUploadSuccess(resultEntity, requestUploadEntity, builder, success, error, progress)\n        errorFn = lambda errorEntity, requestUploadEntity: self.__onRequestUploadError(errorEntity, requestUploadEntity, error)\n        self._sendIq(iq, successFn, errorFn)\n\n    def __onRequestUploadSuccess(self, resultRequestUploadIqProtocolEntity, requestUploadEntity, builder, success, error = None, progress = None):\n        if(resultRequestUploadIqProtocolEntity.isDuplicate()):\n            return success(builder.build(resultRequestUploadIqProtocolEntity.getUrl(), resultRequestUploadIqProtocolEntity.getIp()))\n        else:\n            successFn = lambda path, jid, url: self.__onMediaUploadSuccess(builder, url, resultRequestUploadIqProtocolEntity.getIp(), success)\n            errorFn = lambda path, jid, errorText: self.__onMediaUploadError(builder, errorText, error)\n\n            mediaUploader = MediaUploader(builder.jid, self.getOwnJid(), builder.getFilepath(),\n                                      resultRequestUploadIqProtocolEntity.getUrl(),\n                                      resultRequestUploadIqProtocolEntity.getResumeOffset(),\n                                      successFn, errorFn, progress, async=True)\n            mediaUploader.start()\n\n    def __onRequestUploadError(self, errorEntity, requestUploadEntity, builder, error = None):\n        if error:\n            return error(errorEntity.code, errorEntity.text, errorEntity.backoff)\n\n    def __onMediaUploadSuccess(self, builder, url, ip, successClbk):\n        messageNode = builder.build(url, ip)\n        return successClbk(messageNode)\n\n    def __onMediaUploadError(self, builder, errorText, errorClbk = None):\n        if errorClbk:\n            return errorClbk(0, errorText, 0)\n\n    def __str__(self):\n        return \"Interface Layer\"\n", "description": "The python WhatsApp library", "file_name": "interface.py", "id": "cb77df49efbbc138208f631fafd152f2", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/interface/interface.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}