{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport os.path\n\nfrom sentry.models import Activity\nfrom sentry.services.smtp import SentrySMTPServer, STATUS\nfrom sentry.testutils import TestCase\nfrom sentry.utils.email import (\n    group_id_to_email,\n    email_to_group_id,\n    _CaseInsensitiveSigner,\n)\n\nfixture = open(os.path.dirname(os.path.realpath(__file__)) + '/email.txt').read()\n\n\nclass SentrySMTPTest(TestCase):\n    def setUp(self):\n        self.address = ('0.0.0.0', 0)\n        self.server = SentrySMTPServer(*self.address)\n        self.mailto = group_id_to_email(self.group.pk)\n        self.event  \n\n    def test_decode_email_address(self):\n        self.assertEqual(email_to_group_id(self.mailto), self.group.pk)\n\n    def test_process_message(self):\n        with self.tasks():\n            self.assertEqual(\n                self.server.process_message('', self.user.email, [self.mailto], fixture),\n                STATUS[200]\n            )\n        self.assertEqual(Activity.objects.filter(type=Activity.NOTE)[0].data, {'text': 'sup'})\n\n    def test_process_message_no_recipients(self):\n        with self.tasks():\n            self.assertEqual(\n                self.server.process_message('', self.user.email, [], fixture), STATUS[550]\n            )\n\n    def test_process_message_too_long(self):\n        with self.tasks():\n            self.assertEqual(\n                self.server.process_message('', self.user.email, [self.mailto], fixture * 100),\n                STATUS[552]\n            )\n        self.assertEqual(Activity.objects.count(), 0)\n\n    def test_process_message_invalid_email(self):\n        with self.tasks():\n            self.assertEqual(\n                self.server.process_message('', self.user.email, ['lol@localhost'], fixture),\n                STATUS[550]\n            )\n\n\nclass CaseInsensitiveSignerTests(TestCase):\n    def test_it_works(self):\n        with self.settings(SECRET_KEY='a'):\n            signer = _CaseInsensitiveSigner()\n            assert signer.unsign(signer.sign('foo')) == 'foo'\n            assert signer.sign('foo') == 'foo:wkpxg5djz3d4m0zktktfl9hdzw4'\n            assert signer.unsign('foo:WKPXG5DJZ3D4M0ZKTKTFL9HDZW4') == 'foo'\n", "comments": "  side effect generating event ", "content": "from __future__ import absolute_import\n\nimport os.path\n\nfrom sentry.models import Activity\nfrom sentry.services.smtp import SentrySMTPServer, STATUS\nfrom sentry.testutils import TestCase\nfrom sentry.utils.email import (\n    group_id_to_email,\n    email_to_group_id,\n    _CaseInsensitiveSigner,\n)\n\nfixture = open(os.path.dirname(os.path.realpath(__file__)) + '/email.txt').read()\n\n\nclass SentrySMTPTest(TestCase):\n    def setUp(self):\n        self.address = ('0.0.0.0', 0)\n        self.server = SentrySMTPServer(*self.address)\n        self.mailto = group_id_to_email(self.group.pk)\n        self.event  # side effect of generating an event\n\n    def test_decode_email_address(self):\n        self.assertEqual(email_to_group_id(self.mailto), self.group.pk)\n\n    def test_process_message(self):\n        with self.tasks():\n            self.assertEqual(\n                self.server.process_message('', self.user.email, [self.mailto], fixture),\n                STATUS[200]\n            )\n        self.assertEqual(Activity.objects.filter(type=Activity.NOTE)[0].data, {'text': 'sup'})\n\n    def test_process_message_no_recipients(self):\n        with self.tasks():\n            self.assertEqual(\n                self.server.process_message('', self.user.email, [], fixture), STATUS[550]\n            )\n\n    def test_process_message_too_long(self):\n        with self.tasks():\n            self.assertEqual(\n                self.server.process_message('', self.user.email, [self.mailto], fixture * 100),\n                STATUS[552]\n            )\n        self.assertEqual(Activity.objects.count(), 0)\n\n    def test_process_message_invalid_email(self):\n        with self.tasks():\n            self.assertEqual(\n                self.server.process_message('', self.user.email, ['lol@localhost'], fixture),\n                STATUS[550]\n            )\n\n\nclass CaseInsensitiveSignerTests(TestCase):\n    def test_it_works(self):\n        with self.settings(SECRET_KEY='a'):\n            signer = _CaseInsensitiveSigner()\n            assert signer.unsign(signer.sign('foo')) == 'foo'\n            assert signer.sign('foo') == 'foo:wkpxg5djz3d4m0zktktfl9hdzw4'\n            assert signer.unsign('foo:WKPXG5DJZ3D4M0ZKTKTFL9HDZW4') == 'foo'\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "tests.py", "id": "42a565d7f1bc7b3ff14d5fb56076101c", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/smtp/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}