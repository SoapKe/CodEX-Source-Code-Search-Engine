{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport itertools\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    orderedSet,\n    parse_duration,\n    sanitized_Request,\n    str_to_int,\n)\n\n\nclass XTubeIE(InfoExtractor):\n    _VALID_URL = r\n\n    _TESTS = [{\n        \n        'url': 'http://www.xtube.com/watch.php?v=kVTUy_G222_',\n        'md5': '092fbdd3cbe292c920ef6fc6a8a9cdab',\n        'info_dict': {\n            'id': 'kVTUy_G222_',\n            'ext': 'mp4',\n            'title': 'strange erotica',\n            'description': 'contains:an ET kind of thing',\n            'uploader': 'greenshowers',\n            'duration': 450,\n            'view_count': int,\n            'comment_count': int,\n            'age_limit': 18,\n        }\n    }, {\n        \n        'url': 'http://www.xtube.com/video-watch/A-Super-Run-Part-1-YT-9299752',\n        'md5': 'a406963eb349dd43692ec54631efd88b',\n        'info_dict': {\n            'id': '9299752',\n            'display_id': 'A-Super-Run-Part-1-YT',\n            'ext': 'flv',\n            'title': 'A Super Run - Part 1 (YT)',\n            'description': 'md5:ca0d47afff4a9b2942e4b41aa970fd93',\n            'uploader': 'tshirtguy59',\n            'duration': 579,\n            'view_count': int,\n            'comment_count': int,\n            'age_limit': 18,\n        },\n    }, {\n        \n        'url': 'http://www.xtube.com/video-watch/strange-erotica-625837',\n        'only_matching': True,\n    }, {\n        'url': 'xtube:625837',\n        'only_matching': True,\n    }, {\n        'url': 'xtube:kVTUy_G222_',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.xtube.com/video-watch/embedded/milf-tara-and-teen-shared-and-cum-covered-extreme-bukkake-32203482?embedsize=big',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        if not display_id:\n            display_id = video_id\n\n        if video_id.isdigit() and len(video_id) < 11:\n            url_pattern = 'http://www.xtube.com/video-watch/-%s'\n        else:\n            url_pattern = 'http://www.xtube.com/watch.php?v=%s'\n\n        webpage = self._download_webpage(\n            url_pattern % video_id, display_id, headers={\n                'Cookie': 'age_verified=1; cookiesAccepted=1',\n            })\n\n        sources = self._parse_json(self._search_regex(\n            r'([\"\\'])?sources\\1?\\s*:\\s*(?P<sources>{.+?}),',\n            webpage, 'sources', group='sources'), video_id,\n            transform_source=js_to_json)\n\n        formats = []\n        for format_id, format_url in sources.items():\n            formats.append({\n                'url': format_url,\n                'format_id': format_id,\n                'height': int_or_none(format_id),\n            })\n        self._remove_duplicate_formats(formats)\n        self._sort_formats(formats)\n\n        title = self._search_regex(\n            (r'<h1>\\s*(?P<title>[^<]+?)\\s*</h1>', r'videoTitle\\s*:\\s*([\"\\'])(?P<title>.+?)\\1'),\n            webpage, 'title', group='title')\n        description = self._search_regex(\n            r'</h1>\\s*<p>([^<]+)', webpage, 'description', fatal=False)\n        uploader = self._search_regex(\n            (r'<input[^>]+name=\"contentOwnerId\"[^>]+value=\"([^\"]+)\"',\n             r'<span[^>]+class=\"nickname\"[^>]*>([^<]+)'),\n            webpage, 'uploader', fatal=False)\n        duration = parse_duration(self._search_regex(\n            r'<dt>Runtime:?</dt>\\s*<dd>([^<]+)</dd>',\n            webpage, 'duration', fatal=False))\n        view_count = str_to_int(self._search_regex(\n            r'<dt>Views:?</dt>\\s*<dd>([\\d,\\.]+)</dd>',\n            webpage, 'view count', fatal=False))\n        comment_count = str_to_int(self._html_search_regex(\n            r'>Comments? \\(([\\d,\\.]+)\\)<',\n            webpage, 'comment count', fatal=False))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'uploader': uploader,\n            'duration': duration,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'age_limit': 18,\n            'formats': formats,\n        }\n\n\nclass XTubeUserIE(InfoExtractor):\n    IE_DESC = 'XTube user profile'\n    _VALID_URL = r'https?://(?:www\\.)?xtube\\.com/profile/(?P<id>[^/]+-\\d+)'\n    _TEST = {\n        'url': 'http://www.xtube.com/profile/greenshowers-4056496',\n        'info_dict': {\n            'id': 'greenshowers-4056496',\n            'age_limit': 18,\n        },\n        'playlist_mincount': 155,\n    }\n\n    def _real_extract(self, url):\n        user_id = self._match_id(url)\n\n        entries = []\n        for pagenum in itertools.count(1):\n            request = sanitized_Request(\n                'http://www.xtube.com/profile/%s/videos/%d' % (user_id, pagenum),\n                headers={\n                    'Cookie': 'popunder=4',\n                    'X-Requested-With': 'XMLHttpRequest',\n                    'Referer': url,\n                })\n\n            page = self._download_json(\n                request, user_id, 'Downloading videos JSON page %d' % pagenum)\n\n            html = page.get('html')\n            if not html:\n                break\n\n            for video_id in orderedSet([video_id for _, video_id in re.findall(\n                    r'data-plid=([\"\\'])(.+?)\\1', html)]):\n                entries.append(self.url_result('xtube:%s' % video_id, XTubeIE.ie_key()))\n\n            page_count = int_or_none(page.get('pageCount'))\n            if not page_count or pagenum == page_count:\n                break\n\n        playlist = self.playlist_result(entries, user_id)\n        playlist['age_limit'] = 18\n        return playlist\n", "comments": "(?x)\n                        (?:\n                            xtube:|\n                            https?://(?:www\\.)?xtube\\.com/(?:watch\\.php\\?.*\\bv=|video-watch/(?:embedded/)?(?P<display_id>[^/]+)-)\n                        )\n                        (?P<id>[^/?&#]+)\n                    \n \n# old URL schema\n# FLV videos with duplicated formats\n# new URL schema\n", "content": "from __future__ import unicode_literals\n\nimport itertools\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    orderedSet,\n    parse_duration,\n    sanitized_Request,\n    str_to_int,\n)\n\n\nclass XTubeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                        (?:\n                            xtube:|\n                            https?://(?:www\\.)?xtube\\.com/(?:watch\\.php\\?.*\\bv=|video-watch/(?:embedded/)?(?P<display_id>[^/]+)-)\n                        )\n                        (?P<id>[^/?&#]+)\n                    '''\n\n    _TESTS = [{\n        # old URL schema\n        'url': 'http://www.xtube.com/watch.php?v=kVTUy_G222_',\n        'md5': '092fbdd3cbe292c920ef6fc6a8a9cdab',\n        'info_dict': {\n            'id': 'kVTUy_G222_',\n            'ext': 'mp4',\n            'title': 'strange erotica',\n            'description': 'contains:an ET kind of thing',\n            'uploader': 'greenshowers',\n            'duration': 450,\n            'view_count': int,\n            'comment_count': int,\n            'age_limit': 18,\n        }\n    }, {\n        # FLV videos with duplicated formats\n        'url': 'http://www.xtube.com/video-watch/A-Super-Run-Part-1-YT-9299752',\n        'md5': 'a406963eb349dd43692ec54631efd88b',\n        'info_dict': {\n            'id': '9299752',\n            'display_id': 'A-Super-Run-Part-1-YT',\n            'ext': 'flv',\n            'title': 'A Super Run - Part 1 (YT)',\n            'description': 'md5:ca0d47afff4a9b2942e4b41aa970fd93',\n            'uploader': 'tshirtguy59',\n            'duration': 579,\n            'view_count': int,\n            'comment_count': int,\n            'age_limit': 18,\n        },\n    }, {\n        # new URL schema\n        'url': 'http://www.xtube.com/video-watch/strange-erotica-625837',\n        'only_matching': True,\n    }, {\n        'url': 'xtube:625837',\n        'only_matching': True,\n    }, {\n        'url': 'xtube:kVTUy_G222_',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.xtube.com/video-watch/embedded/milf-tara-and-teen-shared-and-cum-covered-extreme-bukkake-32203482?embedsize=big',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        if not display_id:\n            display_id = video_id\n\n        if video_id.isdigit() and len(video_id) < 11:\n            url_pattern = 'http://www.xtube.com/video-watch/-%s'\n        else:\n            url_pattern = 'http://www.xtube.com/watch.php?v=%s'\n\n        webpage = self._download_webpage(\n            url_pattern % video_id, display_id, headers={\n                'Cookie': 'age_verified=1; cookiesAccepted=1',\n            })\n\n        sources = self._parse_json(self._search_regex(\n            r'([\"\\'])?sources\\1?\\s*:\\s*(?P<sources>{.+?}),',\n            webpage, 'sources', group='sources'), video_id,\n            transform_source=js_to_json)\n\n        formats = []\n        for format_id, format_url in sources.items():\n            formats.append({\n                'url': format_url,\n                'format_id': format_id,\n                'height': int_or_none(format_id),\n            })\n        self._remove_duplicate_formats(formats)\n        self._sort_formats(formats)\n\n        title = self._search_regex(\n            (r'<h1>\\s*(?P<title>[^<]+?)\\s*</h1>', r'videoTitle\\s*:\\s*([\"\\'])(?P<title>.+?)\\1'),\n            webpage, 'title', group='title')\n        description = self._search_regex(\n            r'</h1>\\s*<p>([^<]+)', webpage, 'description', fatal=False)\n        uploader = self._search_regex(\n            (r'<input[^>]+name=\"contentOwnerId\"[^>]+value=\"([^\"]+)\"',\n             r'<span[^>]+class=\"nickname\"[^>]*>([^<]+)'),\n            webpage, 'uploader', fatal=False)\n        duration = parse_duration(self._search_regex(\n            r'<dt>Runtime:?</dt>\\s*<dd>([^<]+)</dd>',\n            webpage, 'duration', fatal=False))\n        view_count = str_to_int(self._search_regex(\n            r'<dt>Views:?</dt>\\s*<dd>([\\d,\\.]+)</dd>',\n            webpage, 'view count', fatal=False))\n        comment_count = str_to_int(self._html_search_regex(\n            r'>Comments? \\(([\\d,\\.]+)\\)<',\n            webpage, 'comment count', fatal=False))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'uploader': uploader,\n            'duration': duration,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'age_limit': 18,\n            'formats': formats,\n        }\n\n\nclass XTubeUserIE(InfoExtractor):\n    IE_DESC = 'XTube user profile'\n    _VALID_URL = r'https?://(?:www\\.)?xtube\\.com/profile/(?P<id>[^/]+-\\d+)'\n    _TEST = {\n        'url': 'http://www.xtube.com/profile/greenshowers-4056496',\n        'info_dict': {\n            'id': 'greenshowers-4056496',\n            'age_limit': 18,\n        },\n        'playlist_mincount': 155,\n    }\n\n    def _real_extract(self, url):\n        user_id = self._match_id(url)\n\n        entries = []\n        for pagenum in itertools.count(1):\n            request = sanitized_Request(\n                'http://www.xtube.com/profile/%s/videos/%d' % (user_id, pagenum),\n                headers={\n                    'Cookie': 'popunder=4',\n                    'X-Requested-With': 'XMLHttpRequest',\n                    'Referer': url,\n                })\n\n            page = self._download_json(\n                request, user_id, 'Downloading videos JSON page %d' % pagenum)\n\n            html = page.get('html')\n            if not html:\n                break\n\n            for video_id in orderedSet([video_id for _, video_id in re.findall(\n                    r'data-plid=([\"\\'])(.+?)\\1', html)]):\n                entries.append(self.url_result('xtube:%s' % video_id, XTubeIE.ie_key()))\n\n            page_count = int_or_none(page.get('pageCount'))\n            if not page_count or pagenum == page_count:\n                break\n\n        playlist = self.playlist_result(entries, user_id)\n        playlist['age_limit'] = 18\n        return playlist\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "xtube.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/xtube.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}