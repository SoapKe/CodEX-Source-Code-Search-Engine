{"author": "django", "code": "import datetime\n\nfrom django.test import TestCase\n\nfrom .models import Thing\n\n\nclass ReservedNameTests(TestCase):\n    def generate(self):\n        day1 = datetime.date(2005, 1, 1)\n        Thing.objects.create(\n            when='a', join='b', like='c', drop='d', alter='e', having='f',\n            where=day1, has_hyphen='h',\n        )\n        day2 = datetime.date(2006, 2, 2)\n        Thing.objects.create(\n            when='h', join='i', like='j', drop='k', alter='l', having='m',\n            where=day2,\n        )\n\n    def test_simple(self):\n        day1 = datetime.date(2005, 1, 1)\n        t = Thing.objects.create(\n            when='a', join='b', like='c', drop='d',\n            alter='e', having='f', where=day1, has_hyphen='h',\n        )\n        self.assertEqual(t.when, 'a')\n\n        day2 = datetime.date(2006, 2, 2)\n        u = Thing.objects.create(\n            when='h', join='i', like='j', drop='k', alter='l', having='m',\n            where=day2,\n        )\n        self.assertEqual(u.when, 'h')\n\n    def test_order_by(self):\n        self.generate()\n        things = [t.when for t in Thing.objects.order_by('when')]\n        self.assertEqual(things, ['a', 'h'])\n\n    def test_fields(self):\n        self.generate()\n        v = Thing.objects.get(pk='a')\n        self.assertEqual(v.join, 'b')\n        self.assertEqual(v.where, datetime.date(year=2005, month=1, day=1))\n\n    def test_dates(self):\n        self.generate()\n        resp = Thing.objects.dates('where', 'year')\n        self.assertEqual(list(resp), [\n            datetime.date(2005, 1, 1),\n            datetime.date(2006, 1, 1),\n        ])\n\n    def test_month_filter(self):\n        self.generate()\n        self.assertEqual(Thing.objects.filter(where__month=1)[0].when, 'a')\n", "comments": "", "content": "import datetime\n\nfrom django.test import TestCase\n\nfrom .models import Thing\n\n\nclass ReservedNameTests(TestCase):\n    def generate(self):\n        day1 = datetime.date(2005, 1, 1)\n        Thing.objects.create(\n            when='a', join='b', like='c', drop='d', alter='e', having='f',\n            where=day1, has_hyphen='h',\n        )\n        day2 = datetime.date(2006, 2, 2)\n        Thing.objects.create(\n            when='h', join='i', like='j', drop='k', alter='l', having='m',\n            where=day2,\n        )\n\n    def test_simple(self):\n        day1 = datetime.date(2005, 1, 1)\n        t = Thing.objects.create(\n            when='a', join='b', like='c', drop='d',\n            alter='e', having='f', where=day1, has_hyphen='h',\n        )\n        self.assertEqual(t.when, 'a')\n\n        day2 = datetime.date(2006, 2, 2)\n        u = Thing.objects.create(\n            when='h', join='i', like='j', drop='k', alter='l', having='m',\n            where=day2,\n        )\n        self.assertEqual(u.when, 'h')\n\n    def test_order_by(self):\n        self.generate()\n        things = [t.when for t in Thing.objects.order_by('when')]\n        self.assertEqual(things, ['a', 'h'])\n\n    def test_fields(self):\n        self.generate()\n        v = Thing.objects.get(pk='a')\n        self.assertEqual(v.join, 'b')\n        self.assertEqual(v.where, datetime.date(year=2005, month=1, day=1))\n\n    def test_dates(self):\n        self.generate()\n        resp = Thing.objects.dates('where', 'year')\n        self.assertEqual(list(resp), [\n            datetime.date(2005, 1, 1),\n            datetime.date(2006, 1, 1),\n        ])\n\n    def test_month_filter(self):\n        self.generate()\n        self.assertEqual(Thing.objects.filter(where__month=1)[0].when, 'a')\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "304396512be642f0680e40f1f9df25ed", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/reserved_names/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}