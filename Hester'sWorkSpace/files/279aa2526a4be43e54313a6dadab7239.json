{"author": "tgalal", "code": "import time\nimport logging\nfrom threading import Thread, Lock\nfrom yowsup.layers import YowProtocolLayer, YowLayerEvent, EventCallback\nfrom yowsup.common import YowConstants\nfrom yowsup.layers.network import YowNetworkLayer\nfrom yowsup.layers.auth import YowAuthenticationProtocolLayer\nfrom .protocolentities import *\n\n\nclass YowIqProtocolLayer(YowProtocolLayer):\n    \n    PROP_PING_INTERVAL               = \"org.openwhatsapp.yowsup.prop.pinginterval\"\n    \n    def __init__(self):\n        handleMap = {\n            \"iq\": (self.recvIq, self.sendIq)\n        }\n        self._pingThread = None\n        self._pingQueue = {}\n        self._pingQueueLock = Lock()\n        self.__logger = logging.getLogger(__name__)\n        super(YowIqProtocolLayer, self).__init__(handleMap)\n\n    def __str__(self):\n        return \"Iq Layer\"\n\n    def onPong(self, protocolTreeNode, pingEntity):\n        self.gotPong(pingEntity.getId())\n        self.toUpper(ResultIqProtocolEntity.fromProtocolTreeNode(protocolTreeNode))\n\n    def sendIq(self, entity):\n        if entity.getXmlns() == \"w:p\":\n            self._sendIq(entity, self.onPong)\n        elif entity.getXmlns() in (\"urn:xmpp:whatsapp:push\", \"w\", \"urn:xmpp:whatsapp:account\", \"encrypt\"):\n            self.toLower(entity.toProtocolTreeNode())\n\n    def recvIq(self, node):\n        if node[\"xmlns\"] == \"urn:xmpp:ping\":\n            entity = PongResultIqProtocolEntity(YowConstants.DOMAIN, node[\"id\"])\n            self.toLower(entity.toProtocolTreeNode())\n\n    def gotPong(self, pingId):\n        self._pingQueueLock.acquire()\n        if pingId in self._pingQueue:\n            self._pingQueue = {}\n        self._pingQueueLock.release()\n\n    def waitPong(self, id):\n        self._pingQueueLock.acquire()\n        self._pingQueue[id] = None\n        pingQueueSize = len(self._pingQueue)\n        self._pingQueueLock.release()\n        self.__logger.debug(\"ping queue size: %d\" % pingQueueSize)\n        if pingQueueSize >= 2:\n            self.getStack().broadcastEvent(YowLayerEvent(YowNetworkLayer.EVENT_STATE_DISCONNECT, reason = \"Ping Timeout\"))\n\n    @EventCallback(YowAuthenticationProtocolLayer.EVENT_AUTHED)\n    def onAuthed(self, event):\n        interval = self.getProp(self.__class__.PROP_PING_INTERVAL, 50)\n        if not self._pingThread and interval > 0:\n            self._pingQueue = {}\n            self._pingThread = YowPingThread(self, interval)\n            self.__logger.debug(\"starting ping thread.\")\n            self._pingThread.start()\n    \n    \n    def stop_thread(self):\n        if self._pingThread:\n            self.__logger.debug(\"stopping ping thread\")\n            if self._pingThread:\n                self._pingThread.stop()\n                self._pingThread = None\n            self._pingQueue = {}\n        \n    @EventCallback(YowNetworkLayer.EVENT_STATE_DISCONNECT)\n    def onDisconnect(self, event):\n        self.stop_thread()\n    \n    @EventCallback(YowNetworkLayer.EVENT_STATE_DISCONNECTED)\n    def onDisconnected(self, event):\n        self.stop_thread()\n            \nclass YowPingThread(Thread):\n    def __init__(self, layer, interval):\n        assert type(layer) is YowIqProtocolLayer, \"layer must be a YowIqProtocolLayer, got %s instead.\" % type(layer)\n        self._layer = layer\n        self._interval = interval\n        self._stop = False\n        self.__logger = logging.getLogger(__name__)\n        super(YowPingThread, self).__init__()\n        self.daemon = True\n        self.name = \"YowPing%s\" % self.name\n\n    def run(self):\n        while not self._stop:\n            for i in range(0, self._interval):\n                time.sleep(1)\n                if self._stop:\n                    self.__logger.debug(\"%s - ping thread stopped\" % self.name)\n                    return\n            ping = PingIqProtocolEntity()\n            self._layer.waitPong(ping.getId())\n            if not self._stop:\n                self._layer.sendIq(ping)\n\n    def stop(self):\n        self._stop = True\n", "comments": "", "content": "import time\nimport logging\nfrom threading import Thread, Lock\nfrom yowsup.layers import YowProtocolLayer, YowLayerEvent, EventCallback\nfrom yowsup.common import YowConstants\nfrom yowsup.layers.network import YowNetworkLayer\nfrom yowsup.layers.auth import YowAuthenticationProtocolLayer\nfrom .protocolentities import *\n\n\nclass YowIqProtocolLayer(YowProtocolLayer):\n    \n    PROP_PING_INTERVAL               = \"org.openwhatsapp.yowsup.prop.pinginterval\"\n    \n    def __init__(self):\n        handleMap = {\n            \"iq\": (self.recvIq, self.sendIq)\n        }\n        self._pingThread = None\n        self._pingQueue = {}\n        self._pingQueueLock = Lock()\n        self.__logger = logging.getLogger(__name__)\n        super(YowIqProtocolLayer, self).__init__(handleMap)\n\n    def __str__(self):\n        return \"Iq Layer\"\n\n    def onPong(self, protocolTreeNode, pingEntity):\n        self.gotPong(pingEntity.getId())\n        self.toUpper(ResultIqProtocolEntity.fromProtocolTreeNode(protocolTreeNode))\n\n    def sendIq(self, entity):\n        if entity.getXmlns() == \"w:p\":\n            self._sendIq(entity, self.onPong)\n        elif entity.getXmlns() in (\"urn:xmpp:whatsapp:push\", \"w\", \"urn:xmpp:whatsapp:account\", \"encrypt\"):\n            self.toLower(entity.toProtocolTreeNode())\n\n    def recvIq(self, node):\n        if node[\"xmlns\"] == \"urn:xmpp:ping\":\n            entity = PongResultIqProtocolEntity(YowConstants.DOMAIN, node[\"id\"])\n            self.toLower(entity.toProtocolTreeNode())\n\n    def gotPong(self, pingId):\n        self._pingQueueLock.acquire()\n        if pingId in self._pingQueue:\n            self._pingQueue = {}\n        self._pingQueueLock.release()\n\n    def waitPong(self, id):\n        self._pingQueueLock.acquire()\n        self._pingQueue[id] = None\n        pingQueueSize = len(self._pingQueue)\n        self._pingQueueLock.release()\n        self.__logger.debug(\"ping queue size: %d\" % pingQueueSize)\n        if pingQueueSize >= 2:\n            self.getStack().broadcastEvent(YowLayerEvent(YowNetworkLayer.EVENT_STATE_DISCONNECT, reason = \"Ping Timeout\"))\n\n    @EventCallback(YowAuthenticationProtocolLayer.EVENT_AUTHED)\n    def onAuthed(self, event):\n        interval = self.getProp(self.__class__.PROP_PING_INTERVAL, 50)\n        if not self._pingThread and interval > 0:\n            self._pingQueue = {}\n            self._pingThread = YowPingThread(self, interval)\n            self.__logger.debug(\"starting ping thread.\")\n            self._pingThread.start()\n    \n    \n    def stop_thread(self):\n        if self._pingThread:\n            self.__logger.debug(\"stopping ping thread\")\n            if self._pingThread:\n                self._pingThread.stop()\n                self._pingThread = None\n            self._pingQueue = {}\n        \n    @EventCallback(YowNetworkLayer.EVENT_STATE_DISCONNECT)\n    def onDisconnect(self, event):\n        self.stop_thread()\n    \n    @EventCallback(YowNetworkLayer.EVENT_STATE_DISCONNECTED)\n    def onDisconnected(self, event):\n        self.stop_thread()\n            \nclass YowPingThread(Thread):\n    def __init__(self, layer, interval):\n        assert type(layer) is YowIqProtocolLayer, \"layer must be a YowIqProtocolLayer, got %s instead.\" % type(layer)\n        self._layer = layer\n        self._interval = interval\n        self._stop = False\n        self.__logger = logging.getLogger(__name__)\n        super(YowPingThread, self).__init__()\n        self.daemon = True\n        self.name = \"YowPing%s\" % self.name\n\n    def run(self):\n        while not self._stop:\n            for i in range(0, self._interval):\n                time.sleep(1)\n                if self._stop:\n                    self.__logger.debug(\"%s - ping thread stopped\" % self.name)\n                    return\n            ping = PingIqProtocolEntity()\n            self._layer.waitPong(ping.getId())\n            if not self._stop:\n                self._layer.sendIq(ping)\n\n    def stop(self):\n        self._stop = True\n", "description": "The python WhatsApp library", "file_name": "layer.py", "id": "279aa2526a4be43e54313a6dadab7239", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_iq/layer.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}