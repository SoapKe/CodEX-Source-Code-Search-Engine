{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import fields, models\nfrom odoo.tools import float_compare\n\n\nclass PurchaseOrderLine(models.Model):\n    _inherit = 'purchase.order.line'\n\n    qty_received = fields.Float(compute='_compute_qty_received', string=\"Received Qty\", store=True)\n\n    def _compute_qty_received(self):\n        super(PurchaseOrderLine, self)._compute_qty_received()\n        for line in self.filtered(lambda x: x.move_ids and x.product_id.id not in x.move_ids.mapped('product_id').ids):\n            bom = self.env['mrp.bom']._bom_find(product=line.product_id, company_id=line.company_id.id)\n            if bom and bom.type == 'phantom':\n                line.qty_received = line._get_bom_delivered(bom=bom)\n\n    def _get_bom_delivered(self, bom=False):\n        self.ensure_one()\n\n        \n        \n        if bom:\n            bom_delivered = all([move.state == 'done' for move in self.move_ids])\n            if bom_delivered:\n                return self.product_qty\n            else:\n                return 0.0\n\n\nclass StockMove(models.Model):\n    _inherit = 'stock.move'\n\n    def _prepare_phantom_move_values(self, bom_line, quantity):\n        vals = super(StockMove, self)._prepare_phantom_move_values(bom_line, quantity)\n        if self.purchase_line_id:\n            vals['purchase_line_id'] = self.purchase_line_id.id\n        return vals\n\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     in case kit  need check components shipped  since bom might    changed  compute quantities verify move state  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import fields, models\nfrom odoo.tools import float_compare\n\n\nclass PurchaseOrderLine(models.Model):\n    _inherit = 'purchase.order.line'\n\n    qty_received = fields.Float(compute='_compute_qty_received', string=\"Received Qty\", store=True)\n\n    def _compute_qty_received(self):\n        super(PurchaseOrderLine, self)._compute_qty_received()\n        for line in self.filtered(lambda x: x.move_ids and x.product_id.id not in x.move_ids.mapped('product_id').ids):\n            bom = self.env['mrp.bom']._bom_find(product=line.product_id, company_id=line.company_id.id)\n            if bom and bom.type == 'phantom':\n                line.qty_received = line._get_bom_delivered(bom=bom)\n\n    def _get_bom_delivered(self, bom=False):\n        self.ensure_one()\n\n        # In the case of a kit, we need to check if all components are shipped. Since the BOM might\n        # have changed, we don't compute the quantities but verify the move state.\n        if bom:\n            bom_delivered = all([move.state == 'done' for move in self.move_ids])\n            if bom_delivered:\n                return self.product_qty\n            else:\n                return 0.0\n\n\nclass StockMove(models.Model):\n    _inherit = 'stock.move'\n\n    def _prepare_phantom_move_values(self, bom_line, quantity):\n        vals = super(StockMove, self)._prepare_phantom_move_values(bom_line, quantity)\n        if self.purchase_line_id:\n            vals['purchase_line_id'] = self.purchase_line_id.id\n        return vals\n\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "purchase_mrp.py", "id": "fdc3c04c660a9c016d43608fa9047d61", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/purchase_mrp/models/purchase_mrp.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}