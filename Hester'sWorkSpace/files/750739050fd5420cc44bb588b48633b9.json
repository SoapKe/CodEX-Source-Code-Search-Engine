{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    strip_or_none,\n    unescapeHTML,\n    urlencode_postdata,\n)\n\n\nclass RoosterTeethIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:.+?\\.)?roosterteeth\\.com/episode/(?P<id>[^/?\n    _LOGIN_URL = 'https://roosterteeth.com/login'\n    _NETRC_MACHINE = 'roosterteeth'\n    _TESTS = [{\n        'url': 'http://roosterteeth.com/episode/million-dollars-but-season-2-million-dollars-but-the-game-announcement',\n        'md5': 'e2bd7764732d785ef797700a2489f212',\n        'info_dict': {\n            'id': '26576',\n            'display_id': 'million-dollars-but-season-2-million-dollars-but-the-game-announcement',\n            'ext': 'mp4',\n            'title': 'Million Dollars, But...: Million Dollars, But... The Game Announcement',\n            'description': 'md5:0cc3b21986d54ed815f5faeccd9a9ca5',\n            'thumbnail': r're:^https?://.*\\.png$',\n            'series': 'Million Dollars, But...',\n            'episode': 'Million Dollars, But... The Game Announcement',\n            'comment_count': int,\n        },\n    }, {\n        'url': 'http://achievementhunter.roosterteeth.com/episode/off-topic-the-achievement-hunter-podcast-2016-i-didn-t-think-it-would-pass-31',\n        'only_matching': True,\n    }, {\n        'url': 'http://funhaus.roosterteeth.com/episode/funhaus-shorts-2016-austin-sucks-funhaus-shorts',\n        'only_matching': True,\n    }, {\n        'url': 'http://screwattack.roosterteeth.com/episode/death-battle-season-3-mewtwo-vs-shadow',\n        'only_matching': True,\n    }, {\n        'url': 'http://theknow.roosterteeth.com/episode/the-know-game-news-season-1-boring-steam-sales-are-better',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://roosterteeth.com/episode/rt-docs-the-world-s-greatest-head-massage-the-world-s-greatest-head-massage-an-asmr-journey-part-one',\n        'only_matching': True,\n    }]\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n\n        login_page = self._download_webpage(\n            self._LOGIN_URL, None,\n            note='Downloading login page',\n            errnote='Unable to download login page')\n\n        login_form = self._hidden_inputs(login_page)\n\n        login_form.update({\n            'username': username,\n            'password': password,\n        })\n\n        login_request = self._download_webpage(\n            self._LOGIN_URL, None,\n            note='Logging in',\n            data=urlencode_postdata(login_form),\n            headers={\n                'Referer': self._LOGIN_URL,\n            })\n\n        if not any(re.search(p, login_request) for p in (\n                r'href=[\"\\']https?://(?:www\\.)?roosterteeth\\.com/logout\"',\n                r'>Sign Out<')):\n            error = self._html_search_regex(\n                r'(?s)<div[^>]+class=([\"\\']).*?\\balert-danger\\b.*?\\1[^>]*>(?:\\s*<button[^>]*>.*?</button>)?(?P<error>.+?)</div>',\n                login_request, 'alert', default=None, group='error')\n            if error:\n                raise ExtractorError('Unable to login: %s' % error, expected=True)\n            raise ExtractorError('Unable to log in')\n\n    def _real_initialize(self):\n        self._login()\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        episode = strip_or_none(unescapeHTML(self._search_regex(\n            (r'videoTitle\\s*=\\s*([\"\\'])(?P<title>(?:(?!\\1).)+)\\1',\n             r'<title>(?P<title>[^<]+)</title>'), webpage, 'title',\n            default=None, group='title')))\n\n        title = strip_or_none(self._og_search_title(\n            webpage, default=None)) or episode\n\n        m3u8_url = self._search_regex(\n            r'file\\s*:\\s*([\"\\'])(?P<url>http.+?\\.m3u8.*?)\\1',\n            webpage, 'm3u8 url', default=None, group='url')\n\n        if not m3u8_url:\n            if re.search(r'<div[^>]+class=[\"\\']non-sponsor', webpage):\n                self.raise_login_required(\n                    '%s is only available for FIRST members' % display_id)\n\n            if re.search(r'<div[^>]+class=[\"\\']golive-gate', webpage):\n                self.raise_login_required('%s is not available yet' % display_id)\n\n            raise ExtractorError('Unable to extract m3u8 URL')\n\n        formats = self._extract_m3u8_formats(\n            m3u8_url, display_id, ext='mp4',\n            entry_protocol='m3u8_native', m3u8_id='hls')\n        self._sort_formats(formats)\n\n        description = strip_or_none(self._og_search_description(webpage))\n        thumbnail = self._proto_relative_url(self._og_search_thumbnail(webpage))\n\n        series = self._search_regex(\n            (r'<h2>More ([^<]+)</h2>', r'<a[^>]+>See All ([^<]+) Videos<'),\n            webpage, 'series', fatal=False)\n\n        comment_count = int_or_none(self._search_regex(\n            r'>Comments \\((\\d+)\\)<', webpage,\n            'comment count', fatal=False))\n\n        video_id = self._search_regex(\n            (r'containerId\\s*=\\s*[\"\\']episode-(\\d+)\\1',\n             r'<div[^<]+id=[\"\\']episode-(\\d+)'), webpage,\n            'video id', default=display_id)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'series': series,\n            'episode': episode,\n            'comment_count': comment_count,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#&]+)'\n# only available for FIRST members\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    strip_or_none,\n    unescapeHTML,\n    urlencode_postdata,\n)\n\n\nclass RoosterTeethIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:.+?\\.)?roosterteeth\\.com/episode/(?P<id>[^/?#&]+)'\n    _LOGIN_URL = 'https://roosterteeth.com/login'\n    _NETRC_MACHINE = 'roosterteeth'\n    _TESTS = [{\n        'url': 'http://roosterteeth.com/episode/million-dollars-but-season-2-million-dollars-but-the-game-announcement',\n        'md5': 'e2bd7764732d785ef797700a2489f212',\n        'info_dict': {\n            'id': '26576',\n            'display_id': 'million-dollars-but-season-2-million-dollars-but-the-game-announcement',\n            'ext': 'mp4',\n            'title': 'Million Dollars, But...: Million Dollars, But... The Game Announcement',\n            'description': 'md5:0cc3b21986d54ed815f5faeccd9a9ca5',\n            'thumbnail': r're:^https?://.*\\.png$',\n            'series': 'Million Dollars, But...',\n            'episode': 'Million Dollars, But... The Game Announcement',\n            'comment_count': int,\n        },\n    }, {\n        'url': 'http://achievementhunter.roosterteeth.com/episode/off-topic-the-achievement-hunter-podcast-2016-i-didn-t-think-it-would-pass-31',\n        'only_matching': True,\n    }, {\n        'url': 'http://funhaus.roosterteeth.com/episode/funhaus-shorts-2016-austin-sucks-funhaus-shorts',\n        'only_matching': True,\n    }, {\n        'url': 'http://screwattack.roosterteeth.com/episode/death-battle-season-3-mewtwo-vs-shadow',\n        'only_matching': True,\n    }, {\n        'url': 'http://theknow.roosterteeth.com/episode/the-know-game-news-season-1-boring-steam-sales-are-better',\n        'only_matching': True,\n    }, {\n        # only available for FIRST members\n        'url': 'http://roosterteeth.com/episode/rt-docs-the-world-s-greatest-head-massage-the-world-s-greatest-head-massage-an-asmr-journey-part-one',\n        'only_matching': True,\n    }]\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n\n        login_page = self._download_webpage(\n            self._LOGIN_URL, None,\n            note='Downloading login page',\n            errnote='Unable to download login page')\n\n        login_form = self._hidden_inputs(login_page)\n\n        login_form.update({\n            'username': username,\n            'password': password,\n        })\n\n        login_request = self._download_webpage(\n            self._LOGIN_URL, None,\n            note='Logging in',\n            data=urlencode_postdata(login_form),\n            headers={\n                'Referer': self._LOGIN_URL,\n            })\n\n        if not any(re.search(p, login_request) for p in (\n                r'href=[\"\\']https?://(?:www\\.)?roosterteeth\\.com/logout\"',\n                r'>Sign Out<')):\n            error = self._html_search_regex(\n                r'(?s)<div[^>]+class=([\"\\']).*?\\balert-danger\\b.*?\\1[^>]*>(?:\\s*<button[^>]*>.*?</button>)?(?P<error>.+?)</div>',\n                login_request, 'alert', default=None, group='error')\n            if error:\n                raise ExtractorError('Unable to login: %s' % error, expected=True)\n            raise ExtractorError('Unable to log in')\n\n    def _real_initialize(self):\n        self._login()\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        episode = strip_or_none(unescapeHTML(self._search_regex(\n            (r'videoTitle\\s*=\\s*([\"\\'])(?P<title>(?:(?!\\1).)+)\\1',\n             r'<title>(?P<title>[^<]+)</title>'), webpage, 'title',\n            default=None, group='title')))\n\n        title = strip_or_none(self._og_search_title(\n            webpage, default=None)) or episode\n\n        m3u8_url = self._search_regex(\n            r'file\\s*:\\s*([\"\\'])(?P<url>http.+?\\.m3u8.*?)\\1',\n            webpage, 'm3u8 url', default=None, group='url')\n\n        if not m3u8_url:\n            if re.search(r'<div[^>]+class=[\"\\']non-sponsor', webpage):\n                self.raise_login_required(\n                    '%s is only available for FIRST members' % display_id)\n\n            if re.search(r'<div[^>]+class=[\"\\']golive-gate', webpage):\n                self.raise_login_required('%s is not available yet' % display_id)\n\n            raise ExtractorError('Unable to extract m3u8 URL')\n\n        formats = self._extract_m3u8_formats(\n            m3u8_url, display_id, ext='mp4',\n            entry_protocol='m3u8_native', m3u8_id='hls')\n        self._sort_formats(formats)\n\n        description = strip_or_none(self._og_search_description(webpage))\n        thumbnail = self._proto_relative_url(self._og_search_thumbnail(webpage))\n\n        series = self._search_regex(\n            (r'<h2>More ([^<]+)</h2>', r'<a[^>]+>See All ([^<]+) Videos<'),\n            webpage, 'series', fatal=False)\n\n        comment_count = int_or_none(self._search_regex(\n            r'>Comments \\((\\d+)\\)<', webpage,\n            'comment count', fatal=False))\n\n        video_id = self._search_regex(\n            (r'containerId\\s*=\\s*[\"\\']episode-(\\d+)\\1',\n             r'<div[^<]+id=[\"\\']episode-(\\d+)'), webpage,\n            'video id', default=display_id)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'series': series,\n            'episode': episode,\n            'comment_count': comment_count,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "roosterteeth.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/roosterteeth.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}