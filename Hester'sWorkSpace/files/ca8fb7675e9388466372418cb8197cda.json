{"author": "aws", "code": "\n\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You\n may not use this file except in compliance with the License. A copy of\n the License is located at\n\n     http://aws.amazon.com/apache2.0/\n\n or in the \"license\" file accompanying this file. This file is\n distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implied. See the License for the specific\n language governing permissions and limitations under the License.\nfrom awscli.testutils import BaseAWSCommandParamsTest\nimport os\n\n\nclass TestCreateVirtualMFADevice(BaseAWSCommandParamsTest):\n\n    prefix = 'iam create-virtual-mfa-device'\n\n    def setUp(self):\n        super(TestCreateVirtualMFADevice, self).setUp()\n        self.parsed_response = {\n            'ResponseMetadata': {\n                'HTTPStatusCode': 200,\n                'RequestId': 'requset-id'\n            },\n            \"VirtualMFADevice\": {\n                \"Base32StringSeed\": (\n                    \"VFpYTVc2V1lIUFlFRFczSVhLUlpRUTJRVFdUSFRNRDNTQ0c3\"\n                    \"TkZDUVdQWDVETlNWM0IyUENaQVpWTEpQTlBOTA==\"),\n                \"SerialNumber\": \"arn:aws:iam::419278470775:mfa/fiebaz\",\n                \"QRCodePNG\": (\n                    \"iVBORw0KGgoAAAANSUhEUgAAAPoAAAD6CAIAAAAHjs1qAAAFi\"\n                    \"ElEQVR42u3bQW7jMBAEwPz/07vHvS0QeLpnZFVf7cgyWRTgJv\"\n                    \"PzR+Q1+TEEgrsI7iK4i+AugrsI7iK4i+AugrsI7iK4C+4iuIv\"\n                    \"gLoK7CO4iuIvgLoK7CO4iBe4/rfz/c391k7lLffK5v/r6tZu8\"\n                    \"Ofu444477rjjjjvuuOOOO+6xwcoZ/WTl5D53cNXlZqG2VPpXx\"\n                    \"h133HHHHXfccccdd9xxD09/rU7ZylZdVnvo5BY/7rjjjjvuuO\"\n                    \"OOO+64447713H/RFIOZW0944477rjjjjvuuOOOO+64417ZVM8\"\n                    \"ZPbLHXiOLO+6444477rjjjjvuuOP+fO5bC2lwMeQKoiN/ew0l\"\n                    \"7rjjjjvuuOOOO+644457uCLYGmivHuxeBmcfd6/ijrtXccfdq\"\n                    \"7jj7lXcH5han3Bkeedana9SgTvuuOOOO+6444477ri/hXttc7\"\n                    \"umMLc2tm5ycI4GnzJfWETijjvuuOOOO+6444477s9oZnKDlZv\"\n                    \"vGp2tnf/BNx8/NYA77rjjjjvuuOOOO+64v5V7rZkZHKzalXOw\"\n                    \"cg3J1qorFGK444477rjjjjvuuOOO+1u5fwLrSG9T6zEGxyr3F\"\n                    \"WqPwkeemcEdd9xxxx133HHHHXfcj3Kv4chNUo17rU7ZmtDjax\"\n                    \"J33HHHHXfccccdd9xxfw33rWYm12McOY/wBQupZgN33HHHHXf\"\n                    \"ccccdd9xxx/2DwTpy0Pzm2sh9oyOgc+sZd9xxxx133HHHHXfc\"\n                    \"ccc9liOVSE3SkYIot2KPFES444477rjjjjvuuOOO+/u4DzYzg\"\n                    \"xoGpyH35q3R2Nrb758awB133HHHHXfccccdd9zfyj23NmpX3j\"\n                    \"omkBuc3N7+4DIr+MYdd9xxxx133HHHHXfc38q91gkcUZi7jcG\"\n                    \"d/9xIHnkG4Y477rjjjjvuuOOOO+6430gOR20hbVUTW4cIrg0O\"\n                    \"7rjjjjvuuOOOO+644/4a7keKi8G+6At273Nv3vpc3HHHHXfcc\"\n                    \"ccdd9xxxx332LjXyocanUfgqJ0pqNU4uOOOO+6444477rjjjj\"\n                    \"vuS13E1l53jc5Ndjf144477rjjjjvuuOOOO+64x77Skf352mZ\"\n                    \"+7VhEbo62DiBE6jvccccdd9xxxx133HHHHffs9A8WNbnprz0a\"\n                    \"tv7rYPDrP/IQAe6444477rjjjjvuuON+lPvguK//ci+TrS3Rw\"\n                    \"Z7q5nMEd9xxxx133HHHHXfccce9VSDkippcY5A7nrBVaxyp2n\"\n                    \"DHHXfccccdd9xxxx133FuTVFs5tUttlVq5pZJ7cCy0arjjjjv\"\n                    \"uuOOOO+6444477tmd8K0SIDdnNXZHirj+YwV33HHHHXfccccd\"\n                    \"d9xxfw33mu+bHUiObK4By7E7jgF33HHHHXfccccdd9xxfw33W\"\n                    \"hcx+Kt/a1Zyn5tbZltkcccdd9xxxx133HHHHXfcb4DOnRp4Yg\"\n                    \"eSQ/l9jRDuuOOOO+6444477rjjjntM4WCBMGhlcHByt1GrcbZ\"\n                    \"OSeCOO+6444477rjjjjvuuD8htUMENcFbN1mrcXIfhDvuuOOO\"\n                    \"O+6444477rjjvvSrP3cbg3NWG7pcMTV4OuPtRSTuuOOOO+644\"\n                    \"4477rjjfoV7rXvZWjlbVr6+5CkUNbjjjjvuuOOOO+6444477q\"\n                    \"sacn+7VeMcaYRyVdsjDxHgjjvuuOOOO+6444477rinNNR6myf\"\n                    \"exlbXpJnBHXfccccdd9xxxx133J/PvbAFPT5nN4upLQy44447\"\n                    \"7rjjjjvuuOOOO+4t7rWx27pybY/9iLMjvQ3uuOOOO+6444477\"\n                    \"rjjjvvSfB/Zr86t58H53qpxBpdoYZxxxx133HHHHXfccccd99\"\n                    \"dwF3lKcBfcRXAXwV0EdxHcRXAXwV0EdxHcRXAXwV1wF8FdBHc\"\n                    \"R3EVwF8FdBHcR3EVwF8Fd5F/+AgASajf850wfAAAAAElFTkSu\"\n                    \"QmCC\"\n                ),\n            }\n        }\n\n    def getpath(self, filename):\n        return os.path.join(os.path.abspath(os.path.dirname(__file__)),\n                            filename)\n\n    def remove_file_if_exists(self, filename):\n        if os.path.isfile(filename):\n            os.remove(filename)\n\n    def test_base32(self):\n        outfile = self.getpath('fiebaz.b32')\n        self.addCleanup(self.remove_file_if_exists, outfile)\n        cmdline = self.prefix\n        cmdline += ' --virtual-mfa-device-name fiebaz'\n        cmdline += (\n            ' --outfile %s --bootstrap-method Base32StringSeed' % outfile)\n        result = {\"VirtualMFADeviceName\": 'fiebaz'}\n        self.assert_params_for_cmd(cmdline, result)\n        self.assertTrue(os.path.exists(outfile))\n\n    def test_qrcode(self):\n        outfile = self.getpath('fiebaz.png')\n        self.addCleanup(self.remove_file_if_exists, outfile)\n        cmdline = self.prefix\n        cmdline += ' --virtual-mfa-device-name fiebaz'\n        cmdline += ' --outfile %s --bootstrap-method QRCodePNG' % outfile\n        result = {\"VirtualMFADeviceName\": 'fiebaz'}\n        self.assert_params_for_cmd(cmdline, result)\n        self.assertTrue(os.path.exists(outfile))\n\n    def test_bad_filename(self):\n        outfile = '/some/bad/filename.png'\n        self.addCleanup(self.remove_file_if_exists, outfile)\n        cmdline = self.prefix\n        cmdline += ' --virtual-mfa-device-name fiebaz'\n        cmdline += ' --outfile %s --bootstrap-method QRCodePNG' % outfile\n        self.assert_params_for_cmd(cmdline, expected_rc=255)\n\n    def test_relative_filename(self):\n        outfile = 'filename.png'\n        self.addCleanup(self.remove_file_if_exists, outfile)\n        cmdline = self.prefix\n        cmdline += ' --virtual-mfa-device-name fiebaz'\n        cmdline += ' --outfile %s --bootstrap-method QRCodePNG' % outfile\n        result = {\"VirtualMFADeviceName\": 'fiebaz'}\n        self.assert_params_for_cmd(cmdline, result)\n        self.assertTrue(os.path.exists(outfile))\n\n    def test_bad_relative_filename(self):\n        outfile = 'some/bad/filename.png'\n        self.addCleanup(self.remove_file_if_exists, outfile)\n        cmdline = self.prefix\n        cmdline += ' --virtual-mfa-device-name fiebaz'\n        cmdline += ' --outfile %s --bootstrap-method QRCodePNG' % outfile\n        self.assert_params_for_cmd(cmdline, expected_rc=255)\n\n    def test_bad_response(self):\n         This can happen if you run the create-virtual-mfa-device\n         command multiple times with the same name.  You'll get\n         an \"already exists\" error and we should handle that case\n         gracefully.\n        self.parsed_response = {\n            'Error': {\n                'Code': 'EntityAlreadyExists',\n                'Message': 'MFADevice entity at the and name already exists.',\n                'Type': 'Sender',\n            },\n            'ResponseMetadata': {\n                'HTTPStatusCode': 409,\n                'RequestId': 'requset-id'}\n        }\n        self.http_response.status_code = 409\n        cmdline = self.prefix\n        cmdline += ' --virtual-mfa-device-name fiebaz'\n        cmdline += ' --outfile foo --bootstrap-method QRCodePNG'\n         The error message should be in the stderr.\n        self.assert_params_for_cmd(\n            cmdline,\n            stderr_contains=self.parsed_response['Error']['Message'],\n            expected_rc=255)\n", "comments": "   usr bin env python    copyright 2012 2013 amazon com  inc  affiliates  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   aws amazon com apache2 0         license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license     this happen run create virtual mfa device    command multiple times name   you get     already exists  error handle case    gracefully     the error message stderr  ", "content": "#!/usr/bin/env python\n# Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://aws.amazon.com/apache2.0/\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\nfrom awscli.testutils import BaseAWSCommandParamsTest\nimport os\n\n\nclass TestCreateVirtualMFADevice(BaseAWSCommandParamsTest):\n\n    prefix = 'iam create-virtual-mfa-device'\n\n    def setUp(self):\n        super(TestCreateVirtualMFADevice, self).setUp()\n        self.parsed_response = {\n            'ResponseMetadata': {\n                'HTTPStatusCode': 200,\n                'RequestId': 'requset-id'\n            },\n            \"VirtualMFADevice\": {\n                \"Base32StringSeed\": (\n                    \"VFpYTVc2V1lIUFlFRFczSVhLUlpRUTJRVFdUSFRNRDNTQ0c3\"\n                    \"TkZDUVdQWDVETlNWM0IyUENaQVpWTEpQTlBOTA==\"),\n                \"SerialNumber\": \"arn:aws:iam::419278470775:mfa/fiebaz\",\n                \"QRCodePNG\": (\n                    \"iVBORw0KGgoAAAANSUhEUgAAAPoAAAD6CAIAAAAHjs1qAAAFi\"\n                    \"ElEQVR42u3bQW7jMBAEwPz/07vHvS0QeLpnZFVf7cgyWRTgJv\"\n                    \"PzR+Q1+TEEgrsI7iK4i+AugrsI7iK4i+AugrsI7iK4C+4iuIv\"\n                    \"gLoK7CO4iuIvgLoK7CO4iBe4/rfz/c391k7lLffK5v/r6tZu8\"\n                    \"Ofu444477rjjjjvuuOOOO+6xwcoZ/WTl5D53cNXlZqG2VPpXx\"\n                    \"h133HHHHXfccccdd9xxD09/rU7ZylZdVnvo5BY/7rjjjjvuuO\"\n                    \"OOO+64447713H/RFIOZW0944477rjjjjvuuOOOO+64417ZVM8\"\n                    \"ZPbLHXiOLO+6444477rjjjjvuuOP+fO5bC2lwMeQKoiN/ew0l\"\n                    \"7rjjjjvuuOOOO+644457uCLYGmivHuxeBmcfd6/ijrtXccfdq\"\n                    \"7jj7lXcH5han3Bkeedana9SgTvuuOOOO+6444477ri/hXttc7\"\n                    \"umMLc2tm5ycI4GnzJfWETijjvuuOOOO+6444477s9oZnKDlZv\"\n                    \"vGp2tnf/BNx8/NYA77rjjjjvuuOOOO+64v5V7rZkZHKzalXOw\"\n                    \"cg3J1qorFGK444477rjjjjvuuOOO+1u5fwLrSG9T6zEGxyr3F\"\n                    \"WqPwkeemcEdd9xxxx133HHHHXfcj3Kv4chNUo17rU7ZmtDjax\"\n                    \"J33HHHHXfccccdd9xxfw33rWYm12McOY/wBQupZgN33HHHHXf\"\n                    \"ccccdd9xxx/2DwTpy0Pzm2sh9oyOgc+sZd9xxxx133HHHHXfc\"\n                    \"ccc9liOVSE3SkYIot2KPFES444477rjjjjvuuOOO+/u4DzYzg\"\n                    \"xoGpyH35q3R2Nrb758awB133HHHHXfccccdd9zfyj23NmpX3j\"\n                    \"omkBuc3N7+4DIr+MYdd9xxxx133HHHHXfc38q91gkcUZi7jcG\"\n                    \"d/9xIHnkG4Y477rjjjjvuuOOOO+6430gOR20hbVUTW4cIrg0O\"\n                    \"7rjjjjvuuOOOO+644/4a7keKi8G+6At273Nv3vpc3HHHHXfcc\"\n                    \"ccdd9xxxx332LjXyocanUfgqJ0pqNU4uOOOO+6444477rjjjj\"\n                    \"vuS13E1l53jc5Ndjf144477rjjjjvuuOOOO+64x77Skf352mZ\"\n                    \"+7VhEbo62DiBE6jvccccdd9xxxx133HHHHffs9A8WNbnprz0a\"\n                    \"tv7rYPDrP/IQAe6444477rjjjjvuuON+lPvguK//ci+TrS3Rw\"\n                    \"Z7q5nMEd9xxxx133HHHHXfccce9VSDkippcY5A7nrBVaxyp2n\"\n                    \"DHHXfccccdd9xxxx133FuTVFs5tUttlVq5pZJ7cCy0arjjjjv\"\n                    \"uuOOOO+6444477tmd8K0SIDdnNXZHirj+YwV33HHHHXfccccd\"\n                    \"d9xxfw33mu+bHUiObK4By7E7jgF33HHHHXfccccdd9xxfw33W\"\n                    \"hcx+Kt/a1Zyn5tbZltkcccdd9xxxx133HHHHXfcb4DOnRp4Yg\"\n                    \"eSQ/l9jRDuuOOOO+6444477rjjjntM4WCBMGhlcHByt1GrcbZ\"\n                    \"OSeCOO+6444477rjjjjvuuD8htUMENcFbN1mrcXIfhDvuuOOO\"\n                    \"O+6444477rjjvvSrP3cbg3NWG7pcMTV4OuPtRSTuuOOOO+644\"\n                    \"4477rjjfoV7rXvZWjlbVr6+5CkUNbjjjjvuuOOOO+6444477q\"\n                    \"sacn+7VeMcaYRyVdsjDxHgjjvuuOOOO+6444477rinNNR6myf\"\n                    \"exlbXpJnBHXfccccdd9xxxx133J/PvbAFPT5nN4upLQy44447\"\n                    \"7rjjjjvuuOOOO+4t7rWx27pybY/9iLMjvQ3uuOOOO+6444477\"\n                    \"rjjjvvSfB/Zr86t58H53qpxBpdoYZxxxx133HHHHXfccccd99\"\n                    \"dwF3lKcBfcRXAXwV0EdxHcRXAXwV0EdxHcRXAXwV1wF8FdBHc\"\n                    \"R3EVwF8FdBHcR3EVwF8Fd5F/+AgASajf850wfAAAAAElFTkSu\"\n                    \"QmCC\"\n                ),\n            }\n        }\n\n    def getpath(self, filename):\n        return os.path.join(os.path.abspath(os.path.dirname(__file__)),\n                            filename)\n\n    def remove_file_if_exists(self, filename):\n        if os.path.isfile(filename):\n            os.remove(filename)\n\n    def test_base32(self):\n        outfile = self.getpath('fiebaz.b32')\n        self.addCleanup(self.remove_file_if_exists, outfile)\n        cmdline = self.prefix\n        cmdline += ' --virtual-mfa-device-name fiebaz'\n        cmdline += (\n            ' --outfile %s --bootstrap-method Base32StringSeed' % outfile)\n        result = {\"VirtualMFADeviceName\": 'fiebaz'}\n        self.assert_params_for_cmd(cmdline, result)\n        self.assertTrue(os.path.exists(outfile))\n\n    def test_qrcode(self):\n        outfile = self.getpath('fiebaz.png')\n        self.addCleanup(self.remove_file_if_exists, outfile)\n        cmdline = self.prefix\n        cmdline += ' --virtual-mfa-device-name fiebaz'\n        cmdline += ' --outfile %s --bootstrap-method QRCodePNG' % outfile\n        result = {\"VirtualMFADeviceName\": 'fiebaz'}\n        self.assert_params_for_cmd(cmdline, result)\n        self.assertTrue(os.path.exists(outfile))\n\n    def test_bad_filename(self):\n        outfile = '/some/bad/filename.png'\n        self.addCleanup(self.remove_file_if_exists, outfile)\n        cmdline = self.prefix\n        cmdline += ' --virtual-mfa-device-name fiebaz'\n        cmdline += ' --outfile %s --bootstrap-method QRCodePNG' % outfile\n        self.assert_params_for_cmd(cmdline, expected_rc=255)\n\n    def test_relative_filename(self):\n        outfile = 'filename.png'\n        self.addCleanup(self.remove_file_if_exists, outfile)\n        cmdline = self.prefix\n        cmdline += ' --virtual-mfa-device-name fiebaz'\n        cmdline += ' --outfile %s --bootstrap-method QRCodePNG' % outfile\n        result = {\"VirtualMFADeviceName\": 'fiebaz'}\n        self.assert_params_for_cmd(cmdline, result)\n        self.assertTrue(os.path.exists(outfile))\n\n    def test_bad_relative_filename(self):\n        outfile = 'some/bad/filename.png'\n        self.addCleanup(self.remove_file_if_exists, outfile)\n        cmdline = self.prefix\n        cmdline += ' --virtual-mfa-device-name fiebaz'\n        cmdline += ' --outfile %s --bootstrap-method QRCodePNG' % outfile\n        self.assert_params_for_cmd(cmdline, expected_rc=255)\n\n    def test_bad_response(self):\n        # This can happen if you run the create-virtual-mfa-device\n        # command multiple times with the same name.  You'll get\n        # an \"already exists\" error and we should handle that case\n        # gracefully.\n        self.parsed_response = {\n            'Error': {\n                'Code': 'EntityAlreadyExists',\n                'Message': 'MFADevice entity at the and name already exists.',\n                'Type': 'Sender',\n            },\n            'ResponseMetadata': {\n                'HTTPStatusCode': 409,\n                'RequestId': 'requset-id'}\n        }\n        self.http_response.status_code = 409\n        cmdline = self.prefix\n        cmdline += ' --virtual-mfa-device-name fiebaz'\n        cmdline += ' --outfile foo --bootstrap-method QRCodePNG'\n        # The error message should be in the stderr.\n        self.assert_params_for_cmd(\n            cmdline,\n            stderr_contains=self.parsed_response['Error']['Message'],\n            expected_rc=255)\n", "description": "Universal Command Line Interface for Amazon Web Services", "file_name": "test_create_virtual_mfa_device.py", "id": "ca8fb7675e9388466372418cb8197cda", "language": "Python", "project_name": "aws-cli", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/aws-aws-cli/aws-aws-cli-d705c60/tests/functional/iam/test_create_virtual_mfa_device.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:33:26Z", "url": "https://github.com/aws/aws-cli", "wiki": false}