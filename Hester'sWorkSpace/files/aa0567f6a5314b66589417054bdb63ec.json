{"author": "tgalal", "code": "from .ack import AckProtocolEntity\nclass OutgoingAckProtocolEntity(AckProtocolEntity):\n\n    ||| ?|\n\n    def __init__(self, _id, _class, _type, to, participant = None):\n        super(OutgoingAckProtocolEntity, self).__init__(_id, _class)\n        self.setOutgoingData(_type, to, participant)\n\n    def setOutgoingData(self, _type, _to, _participant):\n        self._type = _type\n        self._to = _to\n        self._participant = _participant\n\n    def toProtocolTreeNode(self):\n        node = super(OutgoingAckProtocolEntity, self).toProtocolTreeNode()\n        if self._type:\n            node.setAttribute(\"type\", self._type)\n        node.setAttribute(\"to\", self._to)\n        if self._participant:\n            node.setAttribute(\"participant\", self._participant)\n        return node\n\n    def __str__(self):\n        out  = super(OutgoingAckProtocolEntity, self).__str__()\n        out += \"Type: %s\\n\" % self._type\n        out += \"To: %s\\n\" % self._to\n        if self._participant:\n            out += \"Participant: %s\\n\" % self._participant\n        return out\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        entity = AckProtocolEntity.fromProtocolTreeNode(node)\n        entity.__class__ = OutgoingAckProtocolEntity\n        entity.setOutgoingData(\n            node.getAttributeValue(\"type\"),\n            node.getAttributeValue(\"to\"),\n            node.getAttributeValue(\"participant\")\n        )\n        return entity\n", "comments": "         ack type    delivery   read    class    message   receipt        id    message id     to jid           ack        ack    group jid    participant    jid    id    message id    class  receipt  type    read              ack           ", "content": "from .ack import AckProtocolEntity\nclass OutgoingAckProtocolEntity(AckProtocolEntity):\n\n    '''\n    <ack type=\"{{delivery | read}}\" class=\"{{message | receipt | ?}}\" id=\"{{MESSAGE_ID}} to={{TO_JID}}\">\n    </ack>\n\n    <ack to=\"{{GROUP_JID}}\" participant=\"{{JID}}\" id=\"{{MESSAGE_ID}}\" class=\"receipt\" type=\"{{read | }}\">\n    </ack>\n\n    '''\n\n    def __init__(self, _id, _class, _type, to, participant = None):\n        super(OutgoingAckProtocolEntity, self).__init__(_id, _class)\n        self.setOutgoingData(_type, to, participant)\n\n    def setOutgoingData(self, _type, _to, _participant):\n        self._type = _type\n        self._to = _to\n        self._participant = _participant\n\n    def toProtocolTreeNode(self):\n        node = super(OutgoingAckProtocolEntity, self).toProtocolTreeNode()\n        if self._type:\n            node.setAttribute(\"type\", self._type)\n        node.setAttribute(\"to\", self._to)\n        if self._participant:\n            node.setAttribute(\"participant\", self._participant)\n        return node\n\n    def __str__(self):\n        out  = super(OutgoingAckProtocolEntity, self).__str__()\n        out += \"Type: %s\\n\" % self._type\n        out += \"To: %s\\n\" % self._to\n        if self._participant:\n            out += \"Participant: %s\\n\" % self._participant\n        return out\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        entity = AckProtocolEntity.fromProtocolTreeNode(node)\n        entity.__class__ = OutgoingAckProtocolEntity\n        entity.setOutgoingData(\n            node.getAttributeValue(\"type\"),\n            node.getAttributeValue(\"to\"),\n            node.getAttributeValue(\"participant\")\n        )\n        return entity\n", "description": "The python WhatsApp library", "file_name": "ack_outgoing.py", "id": "aa0567f6a5314b66589417054bdb63ec", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_acks/protocolentities/ack_outgoing.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}