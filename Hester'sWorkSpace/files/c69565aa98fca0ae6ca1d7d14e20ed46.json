{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    fix_xml_ampersands,\n    float_or_none,\n    xpath_with_ns,\n    xpath_text,\n)\n\n\nclass KarriereVideosIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?karrierevideos\\.at(?:/[^/]+)+/(?P<id>[^/]+)'\n    _TESTS = [{\n        'url': 'http://www.karrierevideos.at/berufsvideos/mittlere-hoehere-schulen/altenpflegerin',\n        'info_dict': {\n            'id': '32c91',\n            'ext': 'flv',\n            'title': 'AltenpflegerIn',\n            'description': 'md5:dbadd1259fde2159a9b28667cb664ae2',\n            'thumbnail': r're:^http://.*\\.png',\n        },\n        'params': {\n            \n            'skip_download': True,\n        }\n    }, {\n        \n        'url': 'http://www.karrierevideos.at/orientierung/vaeterkarenz-und-neue-chancen-fuer-muetter-baby-was-nun',\n        'info_dict': {\n            'id': '5sniu',\n            'ext': 'flv',\n            'title': 'V\u00e4terkarenz und neue Chancen f\u00fcr M\u00fctter - \"Baby - was nun?\"',\n            'description': 'md5:97092c6ad1fd7d38e9d6a5fdeb2bcc33',\n            'thumbnail': r're:^http://.*\\.png',\n        },\n        'params': {\n            \n            'skip_download': True,\n        }\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = (self._html_search_meta('title', webpage, default=None) or\n                 self._search_regex(r'<h1 class=\"title\">([^<]+)</h1>', webpage, 'video title'))\n\n        video_id = self._search_regex(\n            r'/config/video/(.+?)\\.xml', webpage, 'video id')\n        \n        \n        playlist = self._download_xml(\n            'http://www.karrierevideos.at/player-playlist.xml.php?p=%s' % video_id,\n            video_id, transform_source=fix_xml_ampersands,\n            headers={'Accept-Encoding': '*'})\n\n        NS_MAP = {\n            'jwplayer': 'http://developer.longtailvideo.com/trac/wiki/FlashFormats'\n        }\n\n        def ns(path):\n            return xpath_with_ns(path, NS_MAP)\n\n        item = playlist.find('./tracklist/item')\n        video_file = xpath_text(\n            item, ns('./jwplayer:file'), 'video url', fatal=True)\n        streamer = xpath_text(\n            item, ns('./jwplayer:streamer'), 'streamer', fatal=True)\n\n        uploader = xpath_text(\n            item, ns('./jwplayer:author'), 'uploader')\n        duration = float_or_none(\n            xpath_text(item, ns('./jwplayer:duration'), 'duration'))\n\n        description = self._html_search_regex(\n            r'(?s)<div class=\"leadtext\">(.+?)</div>',\n            webpage, 'description')\n\n        thumbnail = self._html_search_meta(\n            'thumbnail', webpage, 'thumbnail')\n        if thumbnail:\n            thumbnail = compat_urlparse.urljoin(url, thumbnail)\n\n        return {\n            'id': video_id,\n            'url': streamer.replace('rtmpt', 'rtmp'),\n            'play_path': 'mp4:%s' % video_file,\n            'ext': 'flv',\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'duration': duration,\n        }\n", "comments": "# coding: utf-8\n# rtmp download\n# broken ampersands\n# rtmp download\n# Server returns malformed headers\n# Force Accept-Encoding: * to prevent gzipped results\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    fix_xml_ampersands,\n    float_or_none,\n    xpath_with_ns,\n    xpath_text,\n)\n\n\nclass KarriereVideosIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?karrierevideos\\.at(?:/[^/]+)+/(?P<id>[^/]+)'\n    _TESTS = [{\n        'url': 'http://www.karrierevideos.at/berufsvideos/mittlere-hoehere-schulen/altenpflegerin',\n        'info_dict': {\n            'id': '32c91',\n            'ext': 'flv',\n            'title': 'AltenpflegerIn',\n            'description': 'md5:dbadd1259fde2159a9b28667cb664ae2',\n            'thumbnail': r're:^http://.*\\.png',\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        }\n    }, {\n        # broken ampersands\n        'url': 'http://www.karrierevideos.at/orientierung/vaeterkarenz-und-neue-chancen-fuer-muetter-baby-was-nun',\n        'info_dict': {\n            'id': '5sniu',\n            'ext': 'flv',\n            'title': 'V\u00e4terkarenz und neue Chancen f\u00fcr M\u00fctter - \"Baby - was nun?\"',\n            'description': 'md5:97092c6ad1fd7d38e9d6a5fdeb2bcc33',\n            'thumbnail': r're:^http://.*\\.png',\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        }\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = (self._html_search_meta('title', webpage, default=None) or\n                 self._search_regex(r'<h1 class=\"title\">([^<]+)</h1>', webpage, 'video title'))\n\n        video_id = self._search_regex(\n            r'/config/video/(.+?)\\.xml', webpage, 'video id')\n        # Server returns malformed headers\n        # Force Accept-Encoding: * to prevent gzipped results\n        playlist = self._download_xml(\n            'http://www.karrierevideos.at/player-playlist.xml.php?p=%s' % video_id,\n            video_id, transform_source=fix_xml_ampersands,\n            headers={'Accept-Encoding': '*'})\n\n        NS_MAP = {\n            'jwplayer': 'http://developer.longtailvideo.com/trac/wiki/FlashFormats'\n        }\n\n        def ns(path):\n            return xpath_with_ns(path, NS_MAP)\n\n        item = playlist.find('./tracklist/item')\n        video_file = xpath_text(\n            item, ns('./jwplayer:file'), 'video url', fatal=True)\n        streamer = xpath_text(\n            item, ns('./jwplayer:streamer'), 'streamer', fatal=True)\n\n        uploader = xpath_text(\n            item, ns('./jwplayer:author'), 'uploader')\n        duration = float_or_none(\n            xpath_text(item, ns('./jwplayer:duration'), 'duration'))\n\n        description = self._html_search_regex(\n            r'(?s)<div class=\"leadtext\">(.+?)</div>',\n            webpage, 'description')\n\n        thumbnail = self._html_search_meta(\n            'thumbnail', webpage, 'thumbnail')\n        if thumbnail:\n            thumbnail = compat_urlparse.urljoin(url, thumbnail)\n\n        return {\n            'id': video_id,\n            'url': streamer.replace('rtmpt', 'rtmp'),\n            'play_path': 'mp4:%s' % video_file,\n            'ext': 'flv',\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'duration': duration,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "karrierevideos.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/karrierevideos.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}