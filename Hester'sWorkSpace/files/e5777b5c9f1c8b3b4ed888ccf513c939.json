{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    determine_ext,\n    int_or_none,\n    sanitized_Request,\n)\n\n\nclass VoiceRepublicIE(InfoExtractor):\n    _VALID_URL = r'https?://voicerepublic\\.com/(?:talks|embed)/(?P<id>[0-9a-z-]+)'\n    _TESTS = [{\n        'url': 'http://voicerepublic.com/talks/watching-the-watchers-building-a-sousveillance-state',\n        'md5': 'b9174d651323f17783000876347116e3',\n        'info_dict': {\n            'id': '2296',\n            'display_id': 'watching-the-watchers-building-a-sousveillance-state',\n            'ext': 'm4a',\n            'title': 'Watching the Watchers: Building a Sousveillance State',\n            'description': 'Secret surveillance programs have metadata too. The people and companies that operate secret surveillance programs can be surveilled.',\n            'thumbnail': r're:^https?://.*\\.(?:png|jpg)$',\n            'duration': 1800,\n            'view_count': int,\n        }\n    }, {\n        'url': 'http://voicerepublic.com/embed/watching-the-watchers-building-a-sousveillance-state',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        req = sanitized_Request(\n            compat_urlparse.urljoin(url, '/talks/%s' % display_id))\n        \n        req.add_header('User-Agent', 'youtube-dl')\n        webpage = self._download_webpage(req, display_id)\n\n        if '>Queued for processing, please stand by...<' in webpage:\n            raise ExtractorError(\n                'Audio is still queued for processing', expected=True)\n\n        config = self._search_regex(\n            r'(?s)return ({.+?});\\s*\\n', webpage,\n            'data', default=None)\n        data = self._parse_json(config, display_id, fatal=False) if config else None\n        if data:\n            title = data['title']\n            description = data.get('teaser')\n            talk_id = compat_str(data.get('talk_id') or display_id)\n            talk = data['talk']\n            duration = int_or_none(talk.get('duration'))\n            formats = [{\n                'url': compat_urlparse.urljoin(url, talk_url),\n                'format_id': format_id,\n                'ext': determine_ext(talk_url) or format_id,\n                'vcodec': 'none',\n            } for format_id, talk_url in talk['links'].items()]\n        else:\n            title = self._og_search_title(webpage)\n            description = self._html_search_regex(\n                r\"(?s)<div class='talk-teaser'[^>]*>(.+?)</div>\",\n                webpage, 'description', fatal=False)\n            talk_id = self._search_regex(\n                [r\"id='jc-(\\d+)'\", r\"data-shareable-id='(\\d+)'\"],\n                webpage, 'talk id', default=None) or display_id\n            duration = None\n            player = self._search_regex(\n                r\"class='vr-player jp-jplayer'([^>]+)>\", webpage, 'player')\n            formats = [{\n                'url': compat_urlparse.urljoin(url, talk_url),\n                'format_id': format_id,\n                'ext': determine_ext(talk_url) or format_id,\n                'vcodec': 'none',\n            } for format_id, talk_url in re.findall(r\"data-([^=]+)='([^']+)'\", player)]\n        self._sort_formats(formats)\n\n        thumbnail = self._og_search_thumbnail(webpage)\n        view_count = int_or_none(self._search_regex(\n            r\"class='play-count[^']*'>\\s*(\\d+) plays\",\n            webpage, 'play count', fatal=False))\n\n        return {\n            'id': talk_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats,\n        }\n", "comments": "# Older versions of Firefox get redirected to an \"upgrade browser\" page\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    determine_ext,\n    int_or_none,\n    sanitized_Request,\n)\n\n\nclass VoiceRepublicIE(InfoExtractor):\n    _VALID_URL = r'https?://voicerepublic\\.com/(?:talks|embed)/(?P<id>[0-9a-z-]+)'\n    _TESTS = [{\n        'url': 'http://voicerepublic.com/talks/watching-the-watchers-building-a-sousveillance-state',\n        'md5': 'b9174d651323f17783000876347116e3',\n        'info_dict': {\n            'id': '2296',\n            'display_id': 'watching-the-watchers-building-a-sousveillance-state',\n            'ext': 'm4a',\n            'title': 'Watching the Watchers: Building a Sousveillance State',\n            'description': 'Secret surveillance programs have metadata too. The people and companies that operate secret surveillance programs can be surveilled.',\n            'thumbnail': r're:^https?://.*\\.(?:png|jpg)$',\n            'duration': 1800,\n            'view_count': int,\n        }\n    }, {\n        'url': 'http://voicerepublic.com/embed/watching-the-watchers-building-a-sousveillance-state',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        req = sanitized_Request(\n            compat_urlparse.urljoin(url, '/talks/%s' % display_id))\n        # Older versions of Firefox get redirected to an \"upgrade browser\" page\n        req.add_header('User-Agent', 'youtube-dl')\n        webpage = self._download_webpage(req, display_id)\n\n        if '>Queued for processing, please stand by...<' in webpage:\n            raise ExtractorError(\n                'Audio is still queued for processing', expected=True)\n\n        config = self._search_regex(\n            r'(?s)return ({.+?});\\s*\\n', webpage,\n            'data', default=None)\n        data = self._parse_json(config, display_id, fatal=False) if config else None\n        if data:\n            title = data['title']\n            description = data.get('teaser')\n            talk_id = compat_str(data.get('talk_id') or display_id)\n            talk = data['talk']\n            duration = int_or_none(talk.get('duration'))\n            formats = [{\n                'url': compat_urlparse.urljoin(url, talk_url),\n                'format_id': format_id,\n                'ext': determine_ext(talk_url) or format_id,\n                'vcodec': 'none',\n            } for format_id, talk_url in talk['links'].items()]\n        else:\n            title = self._og_search_title(webpage)\n            description = self._html_search_regex(\n                r\"(?s)<div class='talk-teaser'[^>]*>(.+?)</div>\",\n                webpage, 'description', fatal=False)\n            talk_id = self._search_regex(\n                [r\"id='jc-(\\d+)'\", r\"data-shareable-id='(\\d+)'\"],\n                webpage, 'talk id', default=None) or display_id\n            duration = None\n            player = self._search_regex(\n                r\"class='vr-player jp-jplayer'([^>]+)>\", webpage, 'player')\n            formats = [{\n                'url': compat_urlparse.urljoin(url, talk_url),\n                'format_id': format_id,\n                'ext': determine_ext(talk_url) or format_id,\n                'vcodec': 'none',\n            } for format_id, talk_url in re.findall(r\"data-([^=]+)='([^']+)'\", player)]\n        self._sort_formats(formats)\n\n        thumbnail = self._og_search_thumbnail(webpage)\n        view_count = int_or_none(self._search_regex(\n            r\"class='play-count[^']*'>\\s*(\\d+) plays\",\n            webpage, 'play count', fatal=False))\n\n        return {\n            'id': talk_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "voicerepublic.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/voicerepublic.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}