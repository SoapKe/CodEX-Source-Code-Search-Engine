{"author": "HelloZeroNet", "code": "\n\n\nimport logging\nimport os\nimport sys\nimport ctypes\nimport ctypes.util\n\nfrom Config import config\n\n\ndef getLibraryPath():\n    if sys.platform.startswith(\"win\"):\n        lib_path = os.path.dirname(os.path.abspath(__file__)) + \"/../lib/opensslVerify/libeay32.dll\"\n    elif sys.platform == \"cygwin\":\n        lib_path = \"/bin/cygcrypto-1.0.0.dll\"\n    elif os.path.isfile(\"../lib/libcrypto.so\"):  \n        lib_path = \"../lib/libcrypto.so\"\n    elif os.path.isfile(\"/opt/lib/libcrypto.so.1.0.0\"):  \n        lib_path = \"/opt/lib/libcrypto.so.1.0.0\"\n    else:\n        lib_path = \"/usr/local/ssl/lib/libcrypto.so\"\n\n    if os.path.isfile(lib_path):\n        return lib_path\n\n    if \"ANDROID_APP_PATH\" in os.environ:\n        try:\n            lib_dir = os.environ[\"ANDROID_APP_PATH\"] + \"/../../lib\"\n            return [lib for lib in os.listdir(lib_dir) if \"crypto\" in lib][0]\n        except Exception, err:\n            logging.debug(\"OpenSSL lib not found in: %s (%s)\" % (lib_dir, err))\n\n    return (\n        ctypes.util.find_library('ssl.so.1.0') or ctypes.util.find_library('ssl') or\n        ctypes.util.find_library('crypto') or ctypes.util.find_library('libcrypto') or 'libeay32'\n    )\n\n\ndef openLibrary():\n    lib_path = getLibraryPath() or \"libeay32\"\n    logging.debug(\"Opening %s...\" % lib_path)\n    ssl_lib = ctypes.CDLL(lib_path, ctypes.RTLD_GLOBAL)\n    return ssl_lib\n\n\ndef disableSSLCompression():\n    try:\n        openssl = openLibrary()\n        openssl.SSL_COMP_get_compression_methods.restype = ctypes.c_void_p\n    except Exception, err:\n        logging.debug(\"Disable SSL compression failed: %s (normal on Windows)\" % err)\n        return False\n\n    openssl.sk_zero.argtypes = [ctypes.c_void_p]\n    openssl.sk_zero(openssl.SSL_COMP_get_compression_methods())\n    logging.debug(\"Disabled SSL compression on %s\" % openssl)\n\n\nif config.disable_sslcompression:\n    try:\n        disableSSLCompression()\n    except Exception, err:\n        logging.debug(\"Error disabling SSL compression: %s\" % err)\n\n\n\n\n\n__ssl__ = __import__('ssl')\n\ntry:\n    _ssl = __ssl__._ssl\nexcept AttributeError:\n    _ssl = __ssl__._ssl2\n\nOldSSLSocket = __ssl__.SSLSocket\n\n\nclass NewSSLSocket(OldSSLSocket):\n    \n\n    def __init__(\n            self, sock, keyfile=None, certfile=None, server_side=False,\n            cert_reqs=__ssl__.CERT_REQUIRED, ssl_version=2, ca_certs=None,\n            do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None,\n            server_hostname=None, _context=None\n    ):\n        OldSSLSocket.__init__(\n            self, sock, keyfile=keyfile, certfile=certfile,\n            server_side=server_side, cert_reqs=cert_reqs,\n            ssl_version=ssl_version, ca_certs=ca_certs,\n            do_handshake_on_connect=do_handshake_on_connect,\n            suppress_ragged_eofs=suppress_ragged_eofs, ciphers=ciphers\n        )\n\n\ndef new_sslwrap(\n        sock, server_side=False, keyfile=None, certfile=None,\n        cert_reqs=__ssl__.CERT_NONE, ssl_version=__ssl__.PROTOCOL_SSLv23,\n        ca_certs=None, ciphers=None\n):\n    context = __ssl__.SSLContext(__ssl__.PROTOCOL_SSLv23)\n    context.options |= __ssl__.OP_NO_SSLv2\n    context.options |= __ssl__.OP_NO_SSLv3\n    context.verify_mode = cert_reqs or __ssl__.CERT_NONE\n    if ca_certs:\n        context.load_verify_locations(ca_certs)\n    if certfile:\n        context.load_cert_chain(certfile, keyfile)\n    if ciphers:\n        context.set_ciphers(ciphers)\n\n    caller_self = inspect.currentframe().f_back.f_locals['self']\n    return context._wrap_socket(sock, server_side=server_side, ssl_sock=caller_self)\n\n\n+\nif not hasattr(_ssl, 'sslwrap'):\n    import inspect\n    _ssl.sslwrap = new_sslwrap\n    __ssl__.SSLSocket = NewSSLSocket\n    logging.debug(\"Missing SSLwrap, readded.\")\n\n\n# Add SSLContext to gevent.ssl (Ubuntu 15 fix)\ntry:\n    import gevent\n    if not hasattr(gevent.ssl, \"SSLContext\"):\n        gevent.ssl.SSLContext = __ssl__.SSLContext\n        logging.debug(\"Missing SSLContext, readded.\")\nexcept Exception, err:\n    pass\n\n\n__ssl__.PROTOCOL_SSLv2 = __ssl__.PROTOCOL_SSLv3 = __ssl__.PROTOCOL_SSLv23\n\n\nlogging.debug(\"Python SSL version: %s\" % __ssl__.OPENSSL_VERSION)\n", "comments": "  https   journal paul querna org articles 2011 04 05 openssl memory use     disable ssl compression save massive memory cpu    zerobundle osx    for optware entware    https   github com gevent gevent issues 477    re add sslwrap python 2 7 9    fix sslsocket constructor    re add sslwrap python 2 7 9     add sslcontext gevent ssl (ubuntu 15 fix)    redirect insecure sslv2 v3 ", "content": "# https://journal.paul.querna.org/articles/2011/04/05/openssl-memory-use/\n# Disable SSL compression to save massive memory and cpu\n\nimport logging\nimport os\nimport sys\nimport ctypes\nimport ctypes.util\n\nfrom Config import config\n\n\ndef getLibraryPath():\n    if sys.platform.startswith(\"win\"):\n        lib_path = os.path.dirname(os.path.abspath(__file__)) + \"/../lib/opensslVerify/libeay32.dll\"\n    elif sys.platform == \"cygwin\":\n        lib_path = \"/bin/cygcrypto-1.0.0.dll\"\n    elif os.path.isfile(\"../lib/libcrypto.so\"):  # ZeroBundle OSX\n        lib_path = \"../lib/libcrypto.so\"\n    elif os.path.isfile(\"/opt/lib/libcrypto.so.1.0.0\"):  # For optware and entware\n        lib_path = \"/opt/lib/libcrypto.so.1.0.0\"\n    else:\n        lib_path = \"/usr/local/ssl/lib/libcrypto.so\"\n\n    if os.path.isfile(lib_path):\n        return lib_path\n\n    if \"ANDROID_APP_PATH\" in os.environ:\n        try:\n            lib_dir = os.environ[\"ANDROID_APP_PATH\"] + \"/../../lib\"\n            return [lib for lib in os.listdir(lib_dir) if \"crypto\" in lib][0]\n        except Exception, err:\n            logging.debug(\"OpenSSL lib not found in: %s (%s)\" % (lib_dir, err))\n\n    return (\n        ctypes.util.find_library('ssl.so.1.0') or ctypes.util.find_library('ssl') or\n        ctypes.util.find_library('crypto') or ctypes.util.find_library('libcrypto') or 'libeay32'\n    )\n\n\ndef openLibrary():\n    lib_path = getLibraryPath() or \"libeay32\"\n    logging.debug(\"Opening %s...\" % lib_path)\n    ssl_lib = ctypes.CDLL(lib_path, ctypes.RTLD_GLOBAL)\n    return ssl_lib\n\n\ndef disableSSLCompression():\n    try:\n        openssl = openLibrary()\n        openssl.SSL_COMP_get_compression_methods.restype = ctypes.c_void_p\n    except Exception, err:\n        logging.debug(\"Disable SSL compression failed: %s (normal on Windows)\" % err)\n        return False\n\n    openssl.sk_zero.argtypes = [ctypes.c_void_p]\n    openssl.sk_zero(openssl.SSL_COMP_get_compression_methods())\n    logging.debug(\"Disabled SSL compression on %s\" % openssl)\n\n\nif config.disable_sslcompression:\n    try:\n        disableSSLCompression()\n    except Exception, err:\n        logging.debug(\"Error disabling SSL compression: %s\" % err)\n\n\n# https://github.com/gevent/gevent/issues/477\n# Re-add sslwrap to Python 2.7.9\n\n__ssl__ = __import__('ssl')\n\ntry:\n    _ssl = __ssl__._ssl\nexcept AttributeError:\n    _ssl = __ssl__._ssl2\n\nOldSSLSocket = __ssl__.SSLSocket\n\n\nclass NewSSLSocket(OldSSLSocket):\n    # Fix SSLSocket constructor\n\n    def __init__(\n            self, sock, keyfile=None, certfile=None, server_side=False,\n            cert_reqs=__ssl__.CERT_REQUIRED, ssl_version=2, ca_certs=None,\n            do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None,\n            server_hostname=None, _context=None\n    ):\n        OldSSLSocket.__init__(\n            self, sock, keyfile=keyfile, certfile=certfile,\n            server_side=server_side, cert_reqs=cert_reqs,\n            ssl_version=ssl_version, ca_certs=ca_certs,\n            do_handshake_on_connect=do_handshake_on_connect,\n            suppress_ragged_eofs=suppress_ragged_eofs, ciphers=ciphers\n        )\n\n\ndef new_sslwrap(\n        sock, server_side=False, keyfile=None, certfile=None,\n        cert_reqs=__ssl__.CERT_NONE, ssl_version=__ssl__.PROTOCOL_SSLv23,\n        ca_certs=None, ciphers=None\n):\n    context = __ssl__.SSLContext(__ssl__.PROTOCOL_SSLv23)\n    context.options |= __ssl__.OP_NO_SSLv2\n    context.options |= __ssl__.OP_NO_SSLv3\n    context.verify_mode = cert_reqs or __ssl__.CERT_NONE\n    if ca_certs:\n        context.load_verify_locations(ca_certs)\n    if certfile:\n        context.load_cert_chain(certfile, keyfile)\n    if ciphers:\n        context.set_ciphers(ciphers)\n\n    caller_self = inspect.currentframe().f_back.f_locals['self']\n    return context._wrap_socket(sock, server_side=server_side, ssl_sock=caller_self)\n\n\n# Re-add sslwrap to Python 2.7.9+\nif not hasattr(_ssl, 'sslwrap'):\n    import inspect\n    _ssl.sslwrap = new_sslwrap\n    __ssl__.SSLSocket = NewSSLSocket\n    logging.debug(\"Missing SSLwrap, readded.\")\n\n\n# Add SSLContext to gevent.ssl (Ubuntu 15 fix)\ntry:\n    import gevent\n    if not hasattr(gevent.ssl, \"SSLContext\"):\n        gevent.ssl.SSLContext = __ssl__.SSLContext\n        logging.debug(\"Missing SSLContext, readded.\")\nexcept Exception, err:\n    pass\n\n# Redirect insecure SSLv2 and v3\n__ssl__.PROTOCOL_SSLv2 = __ssl__.PROTOCOL_SSLv3 = __ssl__.PROTOCOL_SSLv23\n\n\nlogging.debug(\"Python SSL version: %s\" % __ssl__.OPENSSL_VERSION)\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "SslPatch.py", "id": "0a8c80c17dd76d9763099b097ce35674", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/util/SslPatch.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}