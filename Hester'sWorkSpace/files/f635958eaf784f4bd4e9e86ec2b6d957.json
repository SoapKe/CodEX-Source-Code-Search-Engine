{"author": "ansible", "code": " (c) 2017 Red Hat Inc.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.iosxr import iosxr_netconf\nfrom units.modules.utils import set_module_args\nfrom .iosxr_module import TestIosxrModule\n\n\nclass TestIosxrNetconfModule(TestIosxrModule):\n\n    module = iosxr_netconf\n\n    def setUp(self):\n        super(TestIosxrNetconfModule, self).setUp()\n\n        self.mock_get_config = patch('ansible.modules.network.iosxr.iosxr_netconf.get_config')\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch('ansible.modules.network.iosxr.iosxr_netconf.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestIosxrNetconfModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def test_iosxr_disable_netconf_service(self):\n        self.get_config.return_value = '''\n        netconf-yang agent\n            ssh\n        !\n        ssh server netconf vrf default\n        '''\n        self.load_config.return_value = 'dummy diff'\n        set_module_args(dict(netconf_port=830, netconf_vrf='default', state='absent'))\n        result = self.execute_module(changed=True)\n        self.assertEqual(result['commands'], ['no netconf-yang agent ssh', 'no ssh server netconf port 830', 'no ssh server netconf vrf default'])\n\n    def test_iosxr_enable_netconf_service(self):\n        self.get_config.return_value = ''\n        self.load_config.return_value = 'dummy diff'\n        set_module_args(dict(netconf_port=830, netconf_vrf='default', state='present'))\n        result = self.execute_module(changed=True)\n        self.assertEqual(result['commands'], ['netconf-yang agent ssh', 'ssh server netconf port 830', 'ssh server netconf vrf default'])\n\n    def test_iosxr_change_netconf_port(self):\n        self.get_config.return_value = '''\n        netconf-yang agent\n            ssh\n        !\n        ssh server netconf vrf default\n        '''\n        self.load_config.return_value = 'dummy diff'\n        set_module_args(dict(netconf_port=9000, state='present'))\n        result = self.execute_module(changed=True)\n        self.assertEqual(result['commands'], ['ssh server netconf port 9000'])\n\n    def test_iosxr_change_netconf_vrf(self):\n        self.get_config.return_value = '''\n        netconf-yang agent\n            ssh\n        !\n        ssh server netconf vrf default\n        '''\n        self.load_config.return_value = 'dummy diff'\n        set_module_args(dict(netconf_vrf='new_default', state='present'))\n        result = self.execute_module(changed=True)\n        self.assertEqual(result['commands'], ['ssh server netconf vrf new_default'])\n", "comments": "            netconf yang agent             ssh                   ssh server netconf vrf default                     self load config return value    dummy diff          set module args(dict(netconf port 830  netconf vrf  default   state  absent ))         result   self execute module(changed true)         self assertequal(result  commands      netconf yang agent ssh    ssh server netconf port 830    ssh server netconf vrf default  )      def test iosxr enable netconf service(self)          self get config return value              self load config return value    dummy diff          set module args(dict(netconf port 830  netconf vrf  default   state  present ))         result   self execute module(changed true)         self assertequal(result  commands      netconf yang agent ssh    ssh server netconf port 830    ssh server netconf vrf default  )      def test iosxr change netconf port(self)          self get config return value               netconf yang agent             ssh                   ssh server netconf vrf default                     self load config return value    dummy diff          set module args(dict(netconf port 9000  state  present ))         result   self execute module(changed true)         self assertequal(result  commands      ssh server netconf port 9000  )      def test iosxr change netconf vrf(self)          self get config return value               netconf yang agent             ssh                   ssh server netconf vrf default                (c) 2017 red hat inc        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish ", "content": "# (c) 2017 Red Hat Inc.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.iosxr import iosxr_netconf\nfrom units.modules.utils import set_module_args\nfrom .iosxr_module import TestIosxrModule\n\n\nclass TestIosxrNetconfModule(TestIosxrModule):\n\n    module = iosxr_netconf\n\n    def setUp(self):\n        super(TestIosxrNetconfModule, self).setUp()\n\n        self.mock_get_config = patch('ansible.modules.network.iosxr.iosxr_netconf.get_config')\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch('ansible.modules.network.iosxr.iosxr_netconf.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestIosxrNetconfModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def test_iosxr_disable_netconf_service(self):\n        self.get_config.return_value = '''\n        netconf-yang agent\n            ssh\n        !\n        ssh server netconf vrf default\n        '''\n        self.load_config.return_value = 'dummy diff'\n        set_module_args(dict(netconf_port=830, netconf_vrf='default', state='absent'))\n        result = self.execute_module(changed=True)\n        self.assertEqual(result['commands'], ['no netconf-yang agent ssh', 'no ssh server netconf port 830', 'no ssh server netconf vrf default'])\n\n    def test_iosxr_enable_netconf_service(self):\n        self.get_config.return_value = ''\n        self.load_config.return_value = 'dummy diff'\n        set_module_args(dict(netconf_port=830, netconf_vrf='default', state='present'))\n        result = self.execute_module(changed=True)\n        self.assertEqual(result['commands'], ['netconf-yang agent ssh', 'ssh server netconf port 830', 'ssh server netconf vrf default'])\n\n    def test_iosxr_change_netconf_port(self):\n        self.get_config.return_value = '''\n        netconf-yang agent\n            ssh\n        !\n        ssh server netconf vrf default\n        '''\n        self.load_config.return_value = 'dummy diff'\n        set_module_args(dict(netconf_port=9000, state='present'))\n        result = self.execute_module(changed=True)\n        self.assertEqual(result['commands'], ['ssh server netconf port 9000'])\n\n    def test_iosxr_change_netconf_vrf(self):\n        self.get_config.return_value = '''\n        netconf-yang agent\n            ssh\n        !\n        ssh server netconf vrf default\n        '''\n        self.load_config.return_value = 'dummy diff'\n        set_module_args(dict(netconf_vrf='new_default', state='present'))\n        result = self.execute_module(changed=True)\n        self.assertEqual(result['commands'], ['ssh server netconf vrf new_default'])\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_iosxr_netconf.py", "id": "f635958eaf784f4bd4e9e86ec2b6d957", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/iosxr/test_iosxr_netconf.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}