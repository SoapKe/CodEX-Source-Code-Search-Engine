{"author": "facebookresearch", "code": "\n\n Copyright (c) 2017-present, Facebook, Inc.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\n\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport argparse\nimport cPickle as pickle\nimport cv2\nimport os\nimport sys\n\nfrom datasets.json_dataset import JsonDataset\nimport utils.vis as vis_utils\n\n OpenCL may be enabled by default in OpenCV3; disable it because it's not\n thread safe and causes unwanted GPU memory allocations.\ncv2.ocl.setUseOpenCL(False)\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        '--dataset',\n        dest='dataset',\n        help='dataset',\n        default='coco_2014_minival',\n        type=str\n    )\n    parser.add_argument(\n        '--detections',\n        dest='detections',\n        help='detections pkl file',\n        default='',\n        type=str\n    )\n    parser.add_argument(\n        '--thresh',\n        dest='thresh',\n        help='detection prob threshold',\n        default=0.9,\n        type=float\n    )\n    parser.add_argument(\n        '--output-dir',\n        dest='output_dir',\n        help='output directory',\n        default='./tmp/vis-output',\n        type=str\n    )\n    parser.add_argument(\n        '--first',\n        dest='first',\n        help='only visualize the first k images',\n        default=0,\n        type=int\n    )\n    if len(sys.argv) == 1:\n        parser.print_help()\n        sys.exit(1)\n    args = parser.parse_args()\n    return args\n\n\ndef vis(dataset, detections_pkl, thresh, output_dir, limit=0):\n    ds = JsonDataset(dataset)\n    roidb = ds.get_roidb()\n\n    with open(detections_pkl, 'r') as f:\n        dets = pickle.load(f)\n\n    all_boxes = dets['all_boxes']\n    if 'all_segms' in dets:\n        all_segms = dets['all_segms']\n    else:\n        all_segms = None\n\n    if 'all_keyps' in dets:\n        all_keyps = dets['all_keyps']\n    else:\n        all_keyps = None\n\n    def id_or_index(ix, val):\n        if len(val) == 0:\n            return val\n        else:\n            return val[ix]\n\n    for ix, entry in enumerate(roidb):\n        if limit > 0 and ix >= limit:\n            break\n        if ix % 10 == 0:\n            print('{:d}/{:d}'.format(ix + 1, len(roidb)))\n        im = cv2.imread(entry['image'])\n        im_name = os.path.splitext(os.path.basename(entry['image']))[0]\n        cls_boxes_i = [\n            id_or_index(ix, all_boxes[j]) for j in range(len(all_boxes))\n        ]\n        if all_segms is not None:\n            cls_segms_i = [\n                id_or_index(ix, all_segms[j]) for j in range(len(all_segms))\n            ]\n        else:\n            cls_segms_i = None\n\n        if all_keyps is not None:\n            cls_keyps_i = [\n                id_or_index(ix, all_keyps[j]) for j in range(len(all_keyps))\n            ]\n        else:\n            cls_keyps_i = None\n\n        vis_utils.vis_one_image(\n            im[:, :, ::-1],\n            '{:d}_{:s}'.format(ix, im_name),\n            os.path.join(output_dir, 'vis'),\n            cls_boxes_i,\n            segms=cls_segms_i,\n            keypoints=cls_keyps_i,\n            thresh=thresh,\n            box_alpha=0.8,\n            dataset=ds,\n            show_class=True\n        )\n\n\nif __name__ == '__main__':\n    opts = parse_args()\n    vis(\n        opts.dataset,\n        opts.detections,\n        opts.thresh,\n        opts.output_dir,\n        limit=opts.first\n    )\n", "comments": "   script visualizing results saved detections pkl file         usr bin env python2    copyright (c) 2017 present  facebook  inc        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                     opencl may enabled default opencv3  disable    thread safe causes unwanted gpu memory allocations  ", "content": "#!/usr/bin/env python2\n\n# Copyright (c) 2017-present, Facebook, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n##############################################################################\n\n\"\"\"Script for visualizing results saved in a detections.pkl file.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport argparse\nimport cPickle as pickle\nimport cv2\nimport os\nimport sys\n\nfrom datasets.json_dataset import JsonDataset\nimport utils.vis as vis_utils\n\n# OpenCL may be enabled by default in OpenCV3; disable it because it's not\n# thread safe and causes unwanted GPU memory allocations.\ncv2.ocl.setUseOpenCL(False)\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        '--dataset',\n        dest='dataset',\n        help='dataset',\n        default='coco_2014_minival',\n        type=str\n    )\n    parser.add_argument(\n        '--detections',\n        dest='detections',\n        help='detections pkl file',\n        default='',\n        type=str\n    )\n    parser.add_argument(\n        '--thresh',\n        dest='thresh',\n        help='detection prob threshold',\n        default=0.9,\n        type=float\n    )\n    parser.add_argument(\n        '--output-dir',\n        dest='output_dir',\n        help='output directory',\n        default='./tmp/vis-output',\n        type=str\n    )\n    parser.add_argument(\n        '--first',\n        dest='first',\n        help='only visualize the first k images',\n        default=0,\n        type=int\n    )\n    if len(sys.argv) == 1:\n        parser.print_help()\n        sys.exit(1)\n    args = parser.parse_args()\n    return args\n\n\ndef vis(dataset, detections_pkl, thresh, output_dir, limit=0):\n    ds = JsonDataset(dataset)\n    roidb = ds.get_roidb()\n\n    with open(detections_pkl, 'r') as f:\n        dets = pickle.load(f)\n\n    all_boxes = dets['all_boxes']\n    if 'all_segms' in dets:\n        all_segms = dets['all_segms']\n    else:\n        all_segms = None\n\n    if 'all_keyps' in dets:\n        all_keyps = dets['all_keyps']\n    else:\n        all_keyps = None\n\n    def id_or_index(ix, val):\n        if len(val) == 0:\n            return val\n        else:\n            return val[ix]\n\n    for ix, entry in enumerate(roidb):\n        if limit > 0 and ix >= limit:\n            break\n        if ix % 10 == 0:\n            print('{:d}/{:d}'.format(ix + 1, len(roidb)))\n        im = cv2.imread(entry['image'])\n        im_name = os.path.splitext(os.path.basename(entry['image']))[0]\n        cls_boxes_i = [\n            id_or_index(ix, all_boxes[j]) for j in range(len(all_boxes))\n        ]\n        if all_segms is not None:\n            cls_segms_i = [\n                id_or_index(ix, all_segms[j]) for j in range(len(all_segms))\n            ]\n        else:\n            cls_segms_i = None\n\n        if all_keyps is not None:\n            cls_keyps_i = [\n                id_or_index(ix, all_keyps[j]) for j in range(len(all_keyps))\n            ]\n        else:\n            cls_keyps_i = None\n\n        vis_utils.vis_one_image(\n            im[:, :, ::-1],\n            '{:d}_{:s}'.format(ix, im_name),\n            os.path.join(output_dir, 'vis'),\n            cls_boxes_i,\n            segms=cls_segms_i,\n            keypoints=cls_keyps_i,\n            thresh=thresh,\n            box_alpha=0.8,\n            dataset=ds,\n            show_class=True\n        )\n\n\nif __name__ == '__main__':\n    opts = parse_args()\n    vis(\n        opts.dataset,\n        opts.detections,\n        opts.thresh,\n        opts.output_dir,\n        limit=opts.first\n    )\n", "description": "FAIR's research platform for object detection research, implementing popular algorithms like Mask R-CNN and RetinaNet.", "file_name": "visualize_results.py", "id": "2242363fdd3927ee40c99487e5439f05", "language": "Python", "project_name": "Detectron", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/facebookresearch-Detectron/facebookresearch-Detectron-958b0ad/tools/visualize_results.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:01:25Z", "url": "https://github.com/facebookresearch/Detectron", "wiki": false}