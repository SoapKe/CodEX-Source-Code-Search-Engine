{"author": "NVIDIA", "code": "\"\"\"\nCopyright (C) 2018 NVIDIA Corporation.  All rights reserved.\nLicensed under the CC BY-NC-SA 4.0 license (https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode).\n\"\"\"\n\nfrom __future__ import print_function\n\nimport time\n\nimport numpy as np\nfrom PIL import Image\nfrom torch.autograd import Variable\nimport torchvision.transforms as transforms\nimport torchvision.utils as utils\n\nfrom photo_smooth import Propagator\nfrom smooth_filter import smooth_filter\n\n\np_pro = Propagator()\n\n\nclass Timer:\n    def __init__(self, msg):\n        self.msg = msg\n        self.start_time = None\n    \n    def __enter__(self):\n        self.start_time = time.time()\n    \n    def __exit__(self, exc_type, exc_value, exc_tb):\n        print(self.msg % (time.time() - self.start_time))\n\n\ndef stylization(p_wct, content_image_path, style_image_path, content_seg_path, style_seg_path, output_image_path,\n                cuda):\n    \n    cont_img = Image.open(content_image_path).convert('RGB')\n    styl_img = Image.open(style_image_path).convert('RGB')\n    try:\n        cont_seg = Image.open(content_seg_path)\n        styl_seg = Image.open(style_seg_path)\n    except:\n        cont_seg = []\n        styl_seg = []\n    \n    cont_img = transforms.ToTensor()(cont_img).unsqueeze(0)\n    styl_img = transforms.ToTensor()(styl_img).unsqueeze(0)\n    \n    if cuda:\n        cont_img = cont_img.cuda(0)\n        styl_img = styl_img.cuda(0)\n        p_wct.cuda(0)\n    \n    cont_img = Variable(cont_img, volatile=True)\n    styl_img = Variable(styl_img, volatile=True)\n    \n    cont_seg = np.asarray(cont_seg)\n    styl_seg = np.asarray(styl_seg)\n    \n    with Timer(\"Elapsed time in stylization: %f\"):\n        stylized_img = p_wct.transform(cont_img, styl_img, cont_seg, styl_seg)\n    utils.save_image(stylized_img.data.cpu().float(), output_image_path, nrow=1)\n    \n    with Timer(\"Elapsed time in propagation: %f\"):\n        out_img = p_pro.process(output_image_path, content_image_path)\n    out_img.save(output_image_path)\n    \n    if not cuda:\n        print(\"NotImplemented: The CPU version of smooth filter has not been implemented currently.\")\n        return\n    \n    with Timer(\"Elapsed time in post processing: %f\"):\n        out_img = smooth_filter(output_image_path, content_image_path, f_radius=15, f_edge=1e-1)\n    out_img.save(output_image_path)\n", "comments": "    copyright (c) 2018 nvidia corporation   all rights reserved  licensed cc by nc sa 4 0 license (https   creativecommons org licenses nc sa 4 0 legalcode)         load propagator    load image ", "content": "\"\"\"\nCopyright (C) 2018 NVIDIA Corporation.  All rights reserved.\nLicensed under the CC BY-NC-SA 4.0 license (https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode).\n\"\"\"\n\nfrom __future__ import print_function\n\nimport time\n\nimport numpy as np\nfrom PIL import Image\nfrom torch.autograd import Variable\nimport torchvision.transforms as transforms\nimport torchvision.utils as utils\n\nfrom photo_smooth import Propagator\nfrom smooth_filter import smooth_filter\n\n# Load Propagator\np_pro = Propagator()\n\n\nclass Timer:\n    def __init__(self, msg):\n        self.msg = msg\n        self.start_time = None\n    \n    def __enter__(self):\n        self.start_time = time.time()\n    \n    def __exit__(self, exc_type, exc_value, exc_tb):\n        print(self.msg % (time.time() - self.start_time))\n\n\ndef stylization(p_wct, content_image_path, style_image_path, content_seg_path, style_seg_path, output_image_path,\n                cuda):\n    # Load image\n    cont_img = Image.open(content_image_path).convert('RGB')\n    styl_img = Image.open(style_image_path).convert('RGB')\n    try:\n        cont_seg = Image.open(content_seg_path)\n        styl_seg = Image.open(style_seg_path)\n    except:\n        cont_seg = []\n        styl_seg = []\n    \n    cont_img = transforms.ToTensor()(cont_img).unsqueeze(0)\n    styl_img = transforms.ToTensor()(styl_img).unsqueeze(0)\n    \n    if cuda:\n        cont_img = cont_img.cuda(0)\n        styl_img = styl_img.cuda(0)\n        p_wct.cuda(0)\n    \n    cont_img = Variable(cont_img, volatile=True)\n    styl_img = Variable(styl_img, volatile=True)\n    \n    cont_seg = np.asarray(cont_seg)\n    styl_seg = np.asarray(styl_seg)\n    \n    with Timer(\"Elapsed time in stylization: %f\"):\n        stylized_img = p_wct.transform(cont_img, styl_img, cont_seg, styl_seg)\n    utils.save_image(stylized_img.data.cpu().float(), output_image_path, nrow=1)\n    \n    with Timer(\"Elapsed time in propagation: %f\"):\n        out_img = p_pro.process(output_image_path, content_image_path)\n    out_img.save(output_image_path)\n    \n    if not cuda:\n        print(\"NotImplemented: The CPU version of smooth filter has not been implemented currently.\")\n        return\n    \n    with Timer(\"Elapsed time in post processing: %f\"):\n        out_img = smooth_filter(output_image_path, content_image_path, f_radius=15, f_edge=1e-1)\n    out_img.save(output_image_path)\n", "description": "Style transfer, deep learning, feature transform", "file_name": "process_stylization.py", "id": "ee67fc6110dd1e7b7a420532032c0429", "language": "Python", "project_name": "FastPhotoStyle", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/NVIDIA-FastPhotoStyle/NVIDIA-FastPhotoStyle-208d4f6/process_stylization.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:35:44Z", "url": "https://github.com/NVIDIA/FastPhotoStyle", "wiki": true}