{"author": "django", "code": "import decimal\n\nfrom django.db import NotSupportedError, connection\nfrom django.db.backends.base.operations import BaseDatabaseOperations\nfrom django.db.models import DurationField\nfrom django.test import SimpleTestCase, override_settings, skipIfDBFeature\nfrom django.utils import timezone\n\n\nclass DatabaseOperationTests(SimpleTestCase):\n    may_requre_msg = 'subclasses of BaseDatabaseOperations may require a %s() method'\n\n    def setUp(self):\n        self.ops = BaseDatabaseOperations(connection=connection)\n\n    @skipIfDBFeature('can_distinct_on_fields')\n    def test_distinct_on_fields(self):\n        msg = 'DISTINCT ON fields is not supported by this database backend'\n        with self.assertRaisesMessage(NotSupportedError, msg):\n            self.ops.distinct_sql(['a', 'b'], None)\n\n    def test_deferrable_sql(self):\n        self.assertEqual(self.ops.deferrable_sql(), '')\n\n    def test_end_transaction_rollback(self):\n        self.assertEqual(self.ops.end_transaction_sql(success=False), 'ROLLBACK;')\n\n    def test_no_limit_value(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'no_limit_value'):\n            self.ops.no_limit_value()\n\n    def test_quote_name(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'quote_name'):\n            self.ops.quote_name('a')\n\n    def test_regex_lookup(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'regex_lookup'):\n            self.ops.regex_lookup(lookup_type='regex')\n\n    def test_set_time_zone_sql(self):\n        self.assertEqual(self.ops.set_time_zone_sql(), '')\n\n    def test_sql_flush(self):\n        msg = 'subclasses of BaseDatabaseOperations must provide an sql_flush() method'\n        with self.assertRaisesMessage(NotImplementedError, msg):\n            self.ops.sql_flush(None, None, None)\n\n    def test_pk_default_value(self):\n        self.assertEqual(self.ops.pk_default_value(), 'DEFAULT')\n\n    def test_tablespace_sql(self):\n        self.assertEqual(self.ops.tablespace_sql(None), '')\n\n    def test_sequence_reset_by_name_sql(self):\n        self.assertEqual(self.ops.sequence_reset_by_name_sql(None, []), [])\n\n    def test_adapt_unknown_value_decimal(self):\n        value = decimal.Decimal('3.14')\n        self.assertEqual(\n            self.ops.adapt_unknown_value(value),\n            self.ops.adapt_decimalfield_value(value)\n        )\n\n    def test_adapt_unknown_value_date(self):\n        value = timezone.now().date()\n        self.assertEqual(self.ops.adapt_unknown_value(value), self.ops.adapt_datefield_value(value))\n\n    def test_adapt_unknown_value_time(self):\n        value = timezone.now().time()\n        self.assertEqual(self.ops.adapt_unknown_value(value), self.ops.adapt_timefield_value(value))\n\n    def test_adapt_timefield_value_none(self):\n        self.assertIsNone(self.ops.adapt_timefield_value(None))\n\n    def test_adapt_datetimefield_value(self):\n        self.assertIsNone(self.ops.adapt_datetimefield_value(None))\n\n    def test_adapt_timefield_value(self):\n        msg = 'Django does not support timezone-aware times.'\n        with self.assertRaisesMessage(ValueError, msg):\n            self.ops.adapt_timefield_value(timezone.make_aware(timezone.now()))\n\n    @override_settings(USE_TZ=False)\n    def test_adapt_timefield_value_unaware(self):\n        now = timezone.now()\n        self.assertEqual(self.ops.adapt_timefield_value(now), str(now))\n\n    def test_date_extract_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'date_extract_sql'):\n            self.ops.date_extract_sql(None, None)\n\n    def test_time_extract_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'date_extract_sql'):\n            self.ops.time_extract_sql(None, None)\n\n    def test_date_interval_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'date_interval_sql'):\n            self.ops.date_interval_sql(None)\n\n    def test_date_trunc_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'date_trunc_sql'):\n            self.ops.date_trunc_sql(None, None)\n\n    def test_time_trunc_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'time_trunc_sql'):\n            self.ops.time_trunc_sql(None, None)\n\n    def test_datetime_trunc_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'datetime_trunc_sql'):\n            self.ops.datetime_trunc_sql(None, None, None)\n\n    def test_datetime_cast_date_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'datetime_cast_date_sql'):\n            self.ops.datetime_cast_date_sql(None, None)\n\n    def test_datetime_cast_time_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'datetime_cast_time_sql'):\n            self.ops.datetime_cast_time_sql(None, None)\n\n    def test_datetime_extract_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'datetime_extract_sql'):\n            self.ops.datetime_extract_sql(None, None, None)\n\n    @skipIfDBFeature('supports_temporal_subtraction')\n    def test_subtract_temporals(self):\n        duration_field = DurationField()\n        duration_field_internal_type = duration_field.get_internal_type()\n        msg = (\n            'This backend does not support %s subtraction.' %\n            duration_field_internal_type\n        )\n        with self.assertRaisesMessage(NotSupportedError, msg):\n            self.ops.subtract_temporals(duration_field_internal_type, None, None)\n\n    @skipIfDBFeature('supports_over_clause')\n    def test_window_frame_raise_not_supported_error(self):\n        msg = 'This backend does not support window expressions.'\n        with self.assertRaisesMessage(NotSupportedError, msg):\n            connection.ops.window_frame_rows_start_end()\n", "comments": "", "content": "import decimal\n\nfrom django.db import NotSupportedError, connection\nfrom django.db.backends.base.operations import BaseDatabaseOperations\nfrom django.db.models import DurationField\nfrom django.test import SimpleTestCase, override_settings, skipIfDBFeature\nfrom django.utils import timezone\n\n\nclass DatabaseOperationTests(SimpleTestCase):\n    may_requre_msg = 'subclasses of BaseDatabaseOperations may require a %s() method'\n\n    def setUp(self):\n        self.ops = BaseDatabaseOperations(connection=connection)\n\n    @skipIfDBFeature('can_distinct_on_fields')\n    def test_distinct_on_fields(self):\n        msg = 'DISTINCT ON fields is not supported by this database backend'\n        with self.assertRaisesMessage(NotSupportedError, msg):\n            self.ops.distinct_sql(['a', 'b'], None)\n\n    def test_deferrable_sql(self):\n        self.assertEqual(self.ops.deferrable_sql(), '')\n\n    def test_end_transaction_rollback(self):\n        self.assertEqual(self.ops.end_transaction_sql(success=False), 'ROLLBACK;')\n\n    def test_no_limit_value(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'no_limit_value'):\n            self.ops.no_limit_value()\n\n    def test_quote_name(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'quote_name'):\n            self.ops.quote_name('a')\n\n    def test_regex_lookup(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'regex_lookup'):\n            self.ops.regex_lookup(lookup_type='regex')\n\n    def test_set_time_zone_sql(self):\n        self.assertEqual(self.ops.set_time_zone_sql(), '')\n\n    def test_sql_flush(self):\n        msg = 'subclasses of BaseDatabaseOperations must provide an sql_flush() method'\n        with self.assertRaisesMessage(NotImplementedError, msg):\n            self.ops.sql_flush(None, None, None)\n\n    def test_pk_default_value(self):\n        self.assertEqual(self.ops.pk_default_value(), 'DEFAULT')\n\n    def test_tablespace_sql(self):\n        self.assertEqual(self.ops.tablespace_sql(None), '')\n\n    def test_sequence_reset_by_name_sql(self):\n        self.assertEqual(self.ops.sequence_reset_by_name_sql(None, []), [])\n\n    def test_adapt_unknown_value_decimal(self):\n        value = decimal.Decimal('3.14')\n        self.assertEqual(\n            self.ops.adapt_unknown_value(value),\n            self.ops.adapt_decimalfield_value(value)\n        )\n\n    def test_adapt_unknown_value_date(self):\n        value = timezone.now().date()\n        self.assertEqual(self.ops.adapt_unknown_value(value), self.ops.adapt_datefield_value(value))\n\n    def test_adapt_unknown_value_time(self):\n        value = timezone.now().time()\n        self.assertEqual(self.ops.adapt_unknown_value(value), self.ops.adapt_timefield_value(value))\n\n    def test_adapt_timefield_value_none(self):\n        self.assertIsNone(self.ops.adapt_timefield_value(None))\n\n    def test_adapt_datetimefield_value(self):\n        self.assertIsNone(self.ops.adapt_datetimefield_value(None))\n\n    def test_adapt_timefield_value(self):\n        msg = 'Django does not support timezone-aware times.'\n        with self.assertRaisesMessage(ValueError, msg):\n            self.ops.adapt_timefield_value(timezone.make_aware(timezone.now()))\n\n    @override_settings(USE_TZ=False)\n    def test_adapt_timefield_value_unaware(self):\n        now = timezone.now()\n        self.assertEqual(self.ops.adapt_timefield_value(now), str(now))\n\n    def test_date_extract_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'date_extract_sql'):\n            self.ops.date_extract_sql(None, None)\n\n    def test_time_extract_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'date_extract_sql'):\n            self.ops.time_extract_sql(None, None)\n\n    def test_date_interval_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'date_interval_sql'):\n            self.ops.date_interval_sql(None)\n\n    def test_date_trunc_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'date_trunc_sql'):\n            self.ops.date_trunc_sql(None, None)\n\n    def test_time_trunc_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'time_trunc_sql'):\n            self.ops.time_trunc_sql(None, None)\n\n    def test_datetime_trunc_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'datetime_trunc_sql'):\n            self.ops.datetime_trunc_sql(None, None, None)\n\n    def test_datetime_cast_date_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'datetime_cast_date_sql'):\n            self.ops.datetime_cast_date_sql(None, None)\n\n    def test_datetime_cast_time_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'datetime_cast_time_sql'):\n            self.ops.datetime_cast_time_sql(None, None)\n\n    def test_datetime_extract_sql(self):\n        with self.assertRaisesMessage(NotImplementedError, self.may_requre_msg % 'datetime_extract_sql'):\n            self.ops.datetime_extract_sql(None, None, None)\n\n    @skipIfDBFeature('supports_temporal_subtraction')\n    def test_subtract_temporals(self):\n        duration_field = DurationField()\n        duration_field_internal_type = duration_field.get_internal_type()\n        msg = (\n            'This backend does not support %s subtraction.' %\n            duration_field_internal_type\n        )\n        with self.assertRaisesMessage(NotSupportedError, msg):\n            self.ops.subtract_temporals(duration_field_internal_type, None, None)\n\n    @skipIfDBFeature('supports_over_clause')\n    def test_window_frame_raise_not_supported_error(self):\n        msg = 'This backend does not support window expressions.'\n        with self.assertRaisesMessage(NotSupportedError, msg):\n            connection.ops.window_frame_rows_start_end()\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_operations.py", "id": "af34aa55aee7e0c0b26ca6eb6cfada10", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/backends/base/test_operations.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}