{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import PostProcessor\nfrom ..compat import compat_os_name\nfrom ..utils import (\n    hyphenate_date,\n    write_xattr,\n    XAttrMetadataError,\n    XAttrUnavailableError,\n)\n\n\nclass XAttrMetadataPP(PostProcessor):\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n    def run(self, info):\n        \n\n        \n        self._downloader.to_screen('[metadata] Writing metadata to file\\'s xattrs')\n\n        filename = info['filepath']\n\n        try:\n            xattr_mapping = {\n                'user.xdg.referrer.url': 'webpage_url',\n                \n                'user.dublincore.title': 'title',\n                'user.dublincore.date': 'upload_date',\n                'user.dublincore.description': 'description',\n                'user.dublincore.contributor': 'uploader',\n                'user.dublincore.format': 'format',\n            }\n\n            num_written = 0\n            for xattrname, infoname in xattr_mapping.items():\n\n                value = info.get(infoname)\n\n                if value:\n                    if infoname == 'upload_date':\n                        value = hyphenate_date(value)\n\n                    byte_value = value.encode('utf-8')\n                    write_xattr(filename, xattrname, byte_value)\n                    num_written += 1\n\n            return [], info\n\n        except XAttrUnavailableError as e:\n            self._downloader.report_error(str(e))\n            return [], info\n\n        except XAttrMetadataError as e:\n            if e.reason == 'NO_SPACE':\n                self._downloader.report_warning(\n                    'There\\'s no disk space left, disk quota exceeded or filesystem xattr limit exceeded. ' +\n                    (('Some ' if num_written else '') + 'extended attributes are not written.').capitalize())\n            elif e.reason == 'VALUE_TOO_LONG':\n                self._downloader.report_warning(\n                    'Unable to write extended attributes due to too long values.')\n            else:\n                msg = 'This filesystem doesn\\'t support extended attributes. '\n                if compat_os_name == 'nt':\n                    msg += 'You need to use NTFS.'\n                else:\n                    msg += '(You may have to enable them in your /etc/fstab)'\n                self._downloader.report_error(msg)\n            return [], info\n", "comments": " Set extended attributes on downloaded file (if xattr support is found). \n \n#\n# More info about extended attributes for media:\n#   http://freedesktop.org/wiki/CommonExtendedAttributes/\n#   http://www.freedesktop.org/wiki/PhreedomDraft/\n#   http://dublincore.org/documents/usageguide/elements.shtml\n#\n# TODO:\n#  * capture youtube keywords and put them in 'user.dublincore.subject' (comma-separated)\n#  * figure out which xattrs can be used for 'duration', 'thumbnail', 'resolution'\n#\n# Write the metadata to the file's xattrs\n# 'user.xdg.comment':            'description',\n", "content": "from __future__ import unicode_literals\n\nfrom .common import PostProcessor\nfrom ..compat import compat_os_name\nfrom ..utils import (\n    hyphenate_date,\n    write_xattr,\n    XAttrMetadataError,\n    XAttrUnavailableError,\n)\n\n\nclass XAttrMetadataPP(PostProcessor):\n\n    #\n    # More info about extended attributes for media:\n    #   http://freedesktop.org/wiki/CommonExtendedAttributes/\n    #   http://www.freedesktop.org/wiki/PhreedomDraft/\n    #   http://dublincore.org/documents/usageguide/elements.shtml\n    #\n    # TODO:\n    #  * capture youtube keywords and put them in 'user.dublincore.subject' (comma-separated)\n    #  * figure out which xattrs can be used for 'duration', 'thumbnail', 'resolution'\n    #\n\n    def run(self, info):\n        \"\"\" Set extended attributes on downloaded file (if xattr support is found). \"\"\"\n\n        # Write the metadata to the file's xattrs\n        self._downloader.to_screen('[metadata] Writing metadata to file\\'s xattrs')\n\n        filename = info['filepath']\n\n        try:\n            xattr_mapping = {\n                'user.xdg.referrer.url': 'webpage_url',\n                # 'user.xdg.comment':            'description',\n                'user.dublincore.title': 'title',\n                'user.dublincore.date': 'upload_date',\n                'user.dublincore.description': 'description',\n                'user.dublincore.contributor': 'uploader',\n                'user.dublincore.format': 'format',\n            }\n\n            num_written = 0\n            for xattrname, infoname in xattr_mapping.items():\n\n                value = info.get(infoname)\n\n                if value:\n                    if infoname == 'upload_date':\n                        value = hyphenate_date(value)\n\n                    byte_value = value.encode('utf-8')\n                    write_xattr(filename, xattrname, byte_value)\n                    num_written += 1\n\n            return [], info\n\n        except XAttrUnavailableError as e:\n            self._downloader.report_error(str(e))\n            return [], info\n\n        except XAttrMetadataError as e:\n            if e.reason == 'NO_SPACE':\n                self._downloader.report_warning(\n                    'There\\'s no disk space left, disk quota exceeded or filesystem xattr limit exceeded. ' +\n                    (('Some ' if num_written else '') + 'extended attributes are not written.').capitalize())\n            elif e.reason == 'VALUE_TOO_LONG':\n                self._downloader.report_warning(\n                    'Unable to write extended attributes due to too long values.')\n            else:\n                msg = 'This filesystem doesn\\'t support extended attributes. '\n                if compat_os_name == 'nt':\n                    msg += 'You need to use NTFS.'\n                else:\n                    msg += '(You may have to enable them in your /etc/fstab)'\n                self._downloader.report_error(msg)\n            return [], info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "xattrpp.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/postprocessor/xattrpp.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}