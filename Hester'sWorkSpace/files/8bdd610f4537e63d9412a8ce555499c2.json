{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipa_hbacrule\nauthor: Thomas Krahn (@Nosmoht)\nshort_description: Manage FreeIPA HBAC rule\ndescription:\n- Add, modify or delete an IPA HBAC rule using IPA API.\noptions:\n  cn:\n    description:\n    - Canonical name.\n    - Can not be changed as it is the unique identifier.\n    required: true\n    aliases: [\"name\"]\n  description:\n    description: Description\n  host:\n    description:\n    - List of host names to assign.\n    - If an empty list is passed all hosts will be removed from the rule.\n    - If option is omitted hosts will not be checked or changed.\n    required: false\n  hostcategory:\n    description: Host category\n    choices: ['all']\n  hostgroup:\n    description:\n    - List of hostgroup names to assign.\n    - If an empty list is passed all hostgroups will be removed. from the rule\n    - If option is omitted hostgroups will not be checked or changed.\n  service:\n    description:\n    - List of service names to assign.\n    - If an empty list is passed all services will be removed from the rule.\n    - If option is omitted services will not be checked or changed.\n  servicecategory:\n    description: Service category\n    choices: ['all']\n  servicegroup:\n    description:\n    - List of service group names to assign.\n    - If an empty list is passed all assigned service groups will be removed from the rule.\n    - If option is omitted service groups will not be checked or changed.\n  sourcehost:\n    description:\n    - List of source host names to assign.\n    - If an empty list if passed all assigned source hosts will be removed from the rule.\n    - If option is omitted source hosts will not be checked or changed.\n  sourcehostcategory:\n    description: Source host category\n    choices: ['all']\n  sourcehostgroup:\n    description:\n    - List of source host group names to assign.\n    - If an empty list if passed all assigned source host groups will be removed from the rule.\n    - If option is omitted source host groups will not be checked or changed.\n  state:\n    description: State to ensure\n    default: \"present\"\n    choices: [\"present\", \"absent\", \"enabled\", \"disabled\"]\n  user:\n    description:\n    - List of user names to assign.\n    - If an empty list if passed all assigned users will be removed from the rule.\n    - If option is omitted users will not be checked or changed.\n  usercategory:\n    description: User category\n    choices: ['all']\n  usergroup:\n    description:\n    - List of user group names to assign.\n    - If an empty list if passed all assigned user groups will be removed from the rule.\n    - If option is omitted user groups will not be checked or changed.\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.3\"\n'''\n\nEXAMPLES = '''\n\n- ipa_hbacrule:\n    name: allow_all\n    description: Allow all users to access any host from any host\n    hostcategory: all\n    servicecategory: all\n    usercategory: all\n    state: present\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n\n- ipa_hbacrule:\n    name: allow_all_developers_access_to_db\n    description: Allow all developers to access any database from any host\n    hostgroup:\n    - db-server\n    usergroup:\n    - developers\n    state: present\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n\n- ipa_hbacrule:\n    name: rule_to_be_deleted\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n'''\n\nRETURN = '''\nhbacrule:\n  description: HBAC rule as returned by IPA API.\n  returned: always\n  type: dict\n'''\n\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass HBACRuleIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(HBACRuleIPAClient, self).__init__(module, host, port, protocol)\n\n    def hbacrule_find(self, name):\n        return self._post_json(method='hbacrule_find', name=None, item={'all': True, 'cn': name})\n\n    def hbacrule_add(self, name, item):\n        return self._post_json(method='hbacrule_add', name=name, item=item)\n\n    def hbacrule_mod(self, name, item):\n        return self._post_json(method='hbacrule_mod', name=name, item=item)\n\n    def hbacrule_del(self, name):\n        return self._post_json(method='hbacrule_del', name=name)\n\n    def hbacrule_add_host(self, name, item):\n        return self._post_json(method='hbacrule_add_host', name=name, item=item)\n\n    def hbacrule_remove_host(self, name, item):\n        return self._post_json(method='hbacrule_remove_host', name=name, item=item)\n\n    def hbacrule_add_service(self, name, item):\n        return self._post_json(method='hbacrule_add_service', name=name, item=item)\n\n    def hbacrule_remove_service(self, name, item):\n        return self._post_json(method='hbacrule_remove_service', name=name, item=item)\n\n    def hbacrule_add_user(self, name, item):\n        return self._post_json(method='hbacrule_add_user', name=name, item=item)\n\n    def hbacrule_remove_user(self, name, item):\n        return self._post_json(method='hbacrule_remove_user', name=name, item=item)\n\n    def hbacrule_add_sourcehost(self, name, item):\n        return self._post_json(method='hbacrule_add_sourcehost', name=name, item=item)\n\n    def hbacrule_remove_sourcehost(self, name, item):\n        return self._post_json(method='hbacrule_remove_sourcehost', name=name, item=item)\n\n\ndef get_hbacrule_dict(description=None, hostcategory=None, ipaenabledflag=None, servicecategory=None,\n                      sourcehostcategory=None,\n                      usercategory=None):\n    data = {}\n    if description is not None:\n        data['description'] = description\n    if hostcategory is not None:\n        data['hostcategory'] = hostcategory\n    if ipaenabledflag is not None:\n        data['ipaenabledflag'] = ipaenabledflag\n    if servicecategory is not None:\n        data['servicecategory'] = servicecategory\n    if sourcehostcategory is not None:\n        data['sourcehostcategory'] = sourcehostcategory\n    if usercategory is not None:\n        data['usercategory'] = usercategory\n    return data\n\n\ndef get_hbcarule_diff(client, ipa_hbcarule, module_hbcarule):\n    return client.get_diff(ipa_data=ipa_hbcarule, module_data=module_hbcarule)\n\n\ndef ensure(module, client):\n    name = module.params['cn']\n    state = module.params['state']\n\n    if state in ['present', 'enabled']:\n        ipaenabledflag = 'TRUE'\n    else:\n        ipaenabledflag = 'FALSE'\n\n    host = module.params['host']\n    hostcategory = module.params['hostcategory']\n    hostgroup = module.params['hostgroup']\n    service = module.params['service']\n    servicecategory = module.params['servicecategory']\n    servicegroup = module.params['servicegroup']\n    sourcehost = module.params['sourcehost']\n    sourcehostcategory = module.params['sourcehostcategory']\n    sourcehostgroup = module.params['sourcehostgroup']\n    user = module.params['user']\n    usercategory = module.params['usercategory']\n    usergroup = module.params['usergroup']\n\n    module_hbacrule = get_hbacrule_dict(description=module.params['description'],\n                                        hostcategory=hostcategory,\n                                        ipaenabledflag=ipaenabledflag,\n                                        servicecategory=servicecategory,\n                                        sourcehostcategory=sourcehostcategory,\n                                        usercategory=usercategory)\n    ipa_hbacrule = client.hbacrule_find(name=name)\n\n    changed = False\n    if state in ['present', 'enabled', 'disabled']:\n        if not ipa_hbacrule:\n            changed = True\n            if not module.check_mode:\n                ipa_hbacrule = client.hbacrule_add(name=name, item=module_hbacrule)\n        else:\n            diff = get_hbcarule_diff(client, ipa_hbacrule, module_hbacrule)\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    data = {}\n                    for key in diff:\n                        data[key] = module_hbacrule.get(key)\n                    client.hbacrule_mod(name=name, item=data)\n\n        if host is not None:\n            changed = client.modify_if_diff(name, ipa_hbacrule.get('memberhost_host', []), host,\n                                            client.hbacrule_add_host,\n                                            client.hbacrule_remove_host, 'host') or changed\n\n        if hostgroup is not None:\n            changed = client.modify_if_diff(name, ipa_hbacrule.get('memberhost_hostgroup', []), hostgroup,\n                                            client.hbacrule_add_host,\n                                            client.hbacrule_remove_host, 'hostgroup') or changed\n\n        if service is not None:\n            changed = client.modify_if_diff(name, ipa_hbacrule.get('memberservice_hbacsvc', []), service,\n                                            client.hbacrule_add_service,\n                                            client.hbacrule_remove_service, 'hbacsvc') or changed\n\n        if servicegroup is not None:\n            changed = client.modify_if_diff(name, ipa_hbacrule.get('memberservice_hbacsvcgroup', []),\n                                            servicegroup,\n                                            client.hbacrule_add_service,\n                                            client.hbacrule_remove_service, 'hbacsvcgroup') or changed\n\n        if sourcehost is not None:\n            changed = client.modify_if_diff(name, ipa_hbacrule.get('sourcehost_host', []), sourcehost,\n                                            client.hbacrule_add_sourcehost,\n                                            client.hbacrule_remove_sourcehost, 'host') or changed\n\n        if sourcehostgroup is not None:\n            changed = client.modify_if_diff(name, ipa_hbacrule.get('sourcehost_group', []), sourcehostgroup,\n                                            client.hbacrule_add_sourcehost,\n                                            client.hbacrule_remove_sourcehost, 'hostgroup') or changed\n\n        if user is not None:\n            changed = client.modify_if_diff(name, ipa_hbacrule.get('memberuser_user', []), user,\n                                            client.hbacrule_add_user,\n                                            client.hbacrule_remove_user, 'user') or changed\n\n        if usergroup is not None:\n            changed = client.modify_if_diff(name, ipa_hbacrule.get('memberuser_group', []), usergroup,\n                                            client.hbacrule_add_user,\n                                            client.hbacrule_remove_user, 'group') or changed\n    else:\n        if ipa_hbacrule:\n            changed = True\n            if not module.check_mode:\n                client.hbacrule_del(name=name)\n\n    return changed, client.hbacrule_find(name=name)\n\n\ndef main():\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(cn=dict(type='str', required=True, aliases=['name']),\n                         description=dict(type='str'),\n                         host=dict(type='list'),\n                         hostcategory=dict(type='str', choices=['all']),\n                         hostgroup=dict(type='list'),\n                         service=dict(type='list'),\n                         servicecategory=dict(type='str', choices=['all']),\n                         servicegroup=dict(type='list'),\n                         sourcehost=dict(type='list'),\n                         sourcehostcategory=dict(type='str', choices=['all']),\n                         sourcehostgroup=dict(type='list'),\n                         state=dict(type='str', default='present', choices=['present', 'absent', 'enabled', 'disabled']),\n                         user=dict(type='list'),\n                         usercategory=dict(type='str', choices=['all']),\n                         usergroup=dict(type='list'))\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True\n                           )\n\n    client = HBACRuleIPAClient(module=module,\n                               host=module.params['ipa_host'],\n                               port=module.params['ipa_port'],\n                               protocol=module.params['ipa_prot'])\n\n    try:\n        client.login(username=module.params['ipa_user'],\n                     password=module.params['ipa_pass'])\n        changed, hbacrule = ensure(module, client)\n        module.exit_json(changed=changed, hbacrule=hbacrule)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  ipa hbacrule author  thomas krahn ( nosmoht) short description  manage freeipa hbac rule description    add  modify delete ipa hbac rule using ipa api  options    cn      description        canonical name        can changed unique identifier      required  true     aliases    name     description      description  description   host      description        list host names assign        if empty list passed hosts removed rule        if option omitted hosts checked changed      required  false   hostcategory      description  host category     choices        hostgroup      description        list hostgroup names assign        if empty list passed hostgroups removed  rule       if option omitted hostgroups checked changed    service      description        list service names assign        if empty list passed services removed rule        if option omitted services checked changed    servicecategory      description  service category     choices        servicegroup      description        list service group names assign        if empty list passed assigned service groups removed rule        if option omitted service groups checked changed    sourcehost      description        list source host names assign        if empty list passed assigned source hosts removed rule        if option omitted source hosts checked changed    sourcehostcategory      description  source host category     choices        sourcehostgroup      description        list source host group names assign        if empty list passed assigned source host groups removed rule        if option omitted source host groups checked changed    state      description  state ensure     default   present      choices    present    absent    enabled    disabled     user      description        list user names assign        if empty list passed assigned users removed rule        if option omitted users checked changed    usercategory      description  user category     choices        usergroup      description        list user group names assign        if empty list passed assigned user groups removed rule        if option omitted user groups checked changed  extends documentation fragment  ipa documentation version added   2 3       examples         ensure rule allow users access host host   ipa hbacrule      name  allow     description  allow users access host host     hostcategory      servicecategory      usercategory      state  present     ipa host  ipa example com     ipa user  admin     ipa pass  topsecret    ensure rule certain limitations   ipa hbacrule      name  allow developers access db     description  allow developers access database host     hostgroup        db server     usergroup        developers     state  present     ipa host  ipa example com     ipa user  admin     ipa pass  topsecret    ensure rule absent   ipa hbacrule      name  rule deleted     state  absent     ipa host  ipa example com     ipa user  admin     ipa pass  topsecret      return       hbacrule    description  hbac rule returned ipa api    returned  always   type  dict         usr bin python        coding  utf 8        copyright  (c) 2017  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    ensure rule allow users access host host    ensure rule certain limitations    ensure rule absent ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipa_hbacrule\nauthor: Thomas Krahn (@Nosmoht)\nshort_description: Manage FreeIPA HBAC rule\ndescription:\n- Add, modify or delete an IPA HBAC rule using IPA API.\noptions:\n  cn:\n    description:\n    - Canonical name.\n    - Can not be changed as it is the unique identifier.\n    required: true\n    aliases: [\"name\"]\n  description:\n    description: Description\n  host:\n    description:\n    - List of host names to assign.\n    - If an empty list is passed all hosts will be removed from the rule.\n    - If option is omitted hosts will not be checked or changed.\n    required: false\n  hostcategory:\n    description: Host category\n    choices: ['all']\n  hostgroup:\n    description:\n    - List of hostgroup names to assign.\n    - If an empty list is passed all hostgroups will be removed. from the rule\n    - If option is omitted hostgroups will not be checked or changed.\n  service:\n    description:\n    - List of service names to assign.\n    - If an empty list is passed all services will be removed from the rule.\n    - If option is omitted services will not be checked or changed.\n  servicecategory:\n    description: Service category\n    choices: ['all']\n  servicegroup:\n    description:\n    - List of service group names to assign.\n    - If an empty list is passed all assigned service groups will be removed from the rule.\n    - If option is omitted service groups will not be checked or changed.\n  sourcehost:\n    description:\n    - List of source host names to assign.\n    - If an empty list if passed all assigned source hosts will be removed from the rule.\n    - If option is omitted source hosts will not be checked or changed.\n  sourcehostcategory:\n    description: Source host category\n    choices: ['all']\n  sourcehostgroup:\n    description:\n    - List of source host group names to assign.\n    - If an empty list if passed all assigned source host groups will be removed from the rule.\n    - If option is omitted source host groups will not be checked or changed.\n  state:\n    description: State to ensure\n    default: \"present\"\n    choices: [\"present\", \"absent\", \"enabled\", \"disabled\"]\n  user:\n    description:\n    - List of user names to assign.\n    - If an empty list if passed all assigned users will be removed from the rule.\n    - If option is omitted users will not be checked or changed.\n  usercategory:\n    description: User category\n    choices: ['all']\n  usergroup:\n    description:\n    - List of user group names to assign.\n    - If an empty list if passed all assigned user groups will be removed from the rule.\n    - If option is omitted user groups will not be checked or changed.\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.3\"\n'''\n\nEXAMPLES = '''\n# Ensure rule to allow all users to access any host from any host\n- ipa_hbacrule:\n    name: allow_all\n    description: Allow all users to access any host from any host\n    hostcategory: all\n    servicecategory: all\n    usercategory: all\n    state: present\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n# Ensure rule with certain limitations\n- ipa_hbacrule:\n    name: allow_all_developers_access_to_db\n    description: Allow all developers to access any database from any host\n    hostgroup:\n    - db-server\n    usergroup:\n    - developers\n    state: present\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n# Ensure rule is absent\n- ipa_hbacrule:\n    name: rule_to_be_deleted\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n'''\n\nRETURN = '''\nhbacrule:\n  description: HBAC rule as returned by IPA API.\n  returned: always\n  type: dict\n'''\n\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass HBACRuleIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(HBACRuleIPAClient, self).__init__(module, host, port, protocol)\n\n    def hbacrule_find(self, name):\n        return self._post_json(method='hbacrule_find', name=None, item={'all': True, 'cn': name})\n\n    def hbacrule_add(self, name, item):\n        return self._post_json(method='hbacrule_add', name=name, item=item)\n\n    def hbacrule_mod(self, name, item):\n        return self._post_json(method='hbacrule_mod', name=name, item=item)\n\n    def hbacrule_del(self, name):\n        return self._post_json(method='hbacrule_del', name=name)\n\n    def hbacrule_add_host(self, name, item):\n        return self._post_json(method='hbacrule_add_host', name=name, item=item)\n\n    def hbacrule_remove_host(self, name, item):\n        return self._post_json(method='hbacrule_remove_host', name=name, item=item)\n\n    def hbacrule_add_service(self, name, item):\n        return self._post_json(method='hbacrule_add_service', name=name, item=item)\n\n    def hbacrule_remove_service(self, name, item):\n        return self._post_json(method='hbacrule_remove_service', name=name, item=item)\n\n    def hbacrule_add_user(self, name, item):\n        return self._post_json(method='hbacrule_add_user', name=name, item=item)\n\n    def hbacrule_remove_user(self, name, item):\n        return self._post_json(method='hbacrule_remove_user', name=name, item=item)\n\n    def hbacrule_add_sourcehost(self, name, item):\n        return self._post_json(method='hbacrule_add_sourcehost', name=name, item=item)\n\n    def hbacrule_remove_sourcehost(self, name, item):\n        return self._post_json(method='hbacrule_remove_sourcehost', name=name, item=item)\n\n\ndef get_hbacrule_dict(description=None, hostcategory=None, ipaenabledflag=None, servicecategory=None,\n                      sourcehostcategory=None,\n                      usercategory=None):\n    data = {}\n    if description is not None:\n        data['description'] = description\n    if hostcategory is not None:\n        data['hostcategory'] = hostcategory\n    if ipaenabledflag is not None:\n        data['ipaenabledflag'] = ipaenabledflag\n    if servicecategory is not None:\n        data['servicecategory'] = servicecategory\n    if sourcehostcategory is not None:\n        data['sourcehostcategory'] = sourcehostcategory\n    if usercategory is not None:\n        data['usercategory'] = usercategory\n    return data\n\n\ndef get_hbcarule_diff(client, ipa_hbcarule, module_hbcarule):\n    return client.get_diff(ipa_data=ipa_hbcarule, module_data=module_hbcarule)\n\n\ndef ensure(module, client):\n    name = module.params['cn']\n    state = module.params['state']\n\n    if state in ['present', 'enabled']:\n        ipaenabledflag = 'TRUE'\n    else:\n        ipaenabledflag = 'FALSE'\n\n    host = module.params['host']\n    hostcategory = module.params['hostcategory']\n    hostgroup = module.params['hostgroup']\n    service = module.params['service']\n    servicecategory = module.params['servicecategory']\n    servicegroup = module.params['servicegroup']\n    sourcehost = module.params['sourcehost']\n    sourcehostcategory = module.params['sourcehostcategory']\n    sourcehostgroup = module.params['sourcehostgroup']\n    user = module.params['user']\n    usercategory = module.params['usercategory']\n    usergroup = module.params['usergroup']\n\n    module_hbacrule = get_hbacrule_dict(description=module.params['description'],\n                                        hostcategory=hostcategory,\n                                        ipaenabledflag=ipaenabledflag,\n                                        servicecategory=servicecategory,\n                                        sourcehostcategory=sourcehostcategory,\n                                        usercategory=usercategory)\n    ipa_hbacrule = client.hbacrule_find(name=name)\n\n    changed = False\n    if state in ['present', 'enabled', 'disabled']:\n        if not ipa_hbacrule:\n            changed = True\n            if not module.check_mode:\n                ipa_hbacrule = client.hbacrule_add(name=name, item=module_hbacrule)\n        else:\n            diff = get_hbcarule_diff(client, ipa_hbacrule, module_hbacrule)\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    data = {}\n                    for key in diff:\n                        data[key] = module_hbacrule.get(key)\n                    client.hbacrule_mod(name=name, item=data)\n\n        if host is not None:\n            changed = client.modify_if_diff(name, ipa_hbacrule.get('memberhost_host', []), host,\n                                            client.hbacrule_add_host,\n                                            client.hbacrule_remove_host, 'host') or changed\n\n        if hostgroup is not None:\n            changed = client.modify_if_diff(name, ipa_hbacrule.get('memberhost_hostgroup', []), hostgroup,\n                                            client.hbacrule_add_host,\n                                            client.hbacrule_remove_host, 'hostgroup') or changed\n\n        if service is not None:\n            changed = client.modify_if_diff(name, ipa_hbacrule.get('memberservice_hbacsvc', []), service,\n                                            client.hbacrule_add_service,\n                                            client.hbacrule_remove_service, 'hbacsvc') or changed\n\n        if servicegroup is not None:\n            changed = client.modify_if_diff(name, ipa_hbacrule.get('memberservice_hbacsvcgroup', []),\n                                            servicegroup,\n                                            client.hbacrule_add_service,\n                                            client.hbacrule_remove_service, 'hbacsvcgroup') or changed\n\n        if sourcehost is not None:\n            changed = client.modify_if_diff(name, ipa_hbacrule.get('sourcehost_host', []), sourcehost,\n                                            client.hbacrule_add_sourcehost,\n                                            client.hbacrule_remove_sourcehost, 'host') or changed\n\n        if sourcehostgroup is not None:\n            changed = client.modify_if_diff(name, ipa_hbacrule.get('sourcehost_group', []), sourcehostgroup,\n                                            client.hbacrule_add_sourcehost,\n                                            client.hbacrule_remove_sourcehost, 'hostgroup') or changed\n\n        if user is not None:\n            changed = client.modify_if_diff(name, ipa_hbacrule.get('memberuser_user', []), user,\n                                            client.hbacrule_add_user,\n                                            client.hbacrule_remove_user, 'user') or changed\n\n        if usergroup is not None:\n            changed = client.modify_if_diff(name, ipa_hbacrule.get('memberuser_group', []), usergroup,\n                                            client.hbacrule_add_user,\n                                            client.hbacrule_remove_user, 'group') or changed\n    else:\n        if ipa_hbacrule:\n            changed = True\n            if not module.check_mode:\n                client.hbacrule_del(name=name)\n\n    return changed, client.hbacrule_find(name=name)\n\n\ndef main():\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(cn=dict(type='str', required=True, aliases=['name']),\n                         description=dict(type='str'),\n                         host=dict(type='list'),\n                         hostcategory=dict(type='str', choices=['all']),\n                         hostgroup=dict(type='list'),\n                         service=dict(type='list'),\n                         servicecategory=dict(type='str', choices=['all']),\n                         servicegroup=dict(type='list'),\n                         sourcehost=dict(type='list'),\n                         sourcehostcategory=dict(type='str', choices=['all']),\n                         sourcehostgroup=dict(type='list'),\n                         state=dict(type='str', default='present', choices=['present', 'absent', 'enabled', 'disabled']),\n                         user=dict(type='list'),\n                         usercategory=dict(type='str', choices=['all']),\n                         usergroup=dict(type='list'))\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True\n                           )\n\n    client = HBACRuleIPAClient(module=module,\n                               host=module.params['ipa_host'],\n                               port=module.params['ipa_port'],\n                               protocol=module.params['ipa_prot'])\n\n    try:\n        client.login(username=module.params['ipa_user'],\n                     password=module.params['ipa_pass'])\n        changed, hbacrule = ensure(module, client)\n        module.exit_json(changed=changed, hbacrule=hbacrule)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "ipa_hbacrule.py", "id": "8bdd610f4537e63d9412a8ce555499c2", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/identity/ipa/ipa_hbacrule.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}