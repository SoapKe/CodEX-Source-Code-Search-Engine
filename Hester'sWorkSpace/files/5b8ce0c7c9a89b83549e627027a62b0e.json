{"author": "ansible", "code": "\n# -*- coding: UTF-8 -*-\n\n# Copyright (c) 2016, Adfinis SyGroup AG\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: udm_group\nversion_added: \"2.2\"\nauthor: \"Tobias Rueetschi (@2-B)\"\nshort_description: Manage of the posix group\ndescription:\n    - \"This module allows to manage user groups on a univention corporate server (UCS).\n       It uses the python API of the UCS to create a new object or edit it.\"\nrequirements:\n    - Python >= 2.6\noptions:\n    state:\n        required: false\n        default: \"present\"\n        choices: [ present, absent ]\n        description:\n            - Whether the group is present or not.\n    name:\n        required: true\n        description:\n            - Name of the posix group.\n    description:\n        required: false\n        description:\n            - Group description.\n    position:\n        required: false\n        description:\n            - define the whole ldap position of the group, e.g.\n              C(cn=g123m-1A,cn=classes,cn=schueler,cn=groups,ou=schule,dc=example,dc=com).\n    ou:\n        required: false\n        description:\n            - LDAP OU, e.g. school for LDAP OU C(ou=school,dc=example,dc=com).\n    subpath:\n        required: false\n        description:\n            - Subpath inside the OU, e.g. C(cn=classes,cn=students,cn=groups).\n'''\n\n\nEXAMPLES = '''\n\n- udm_group:\n    name: g123m-1A\n\n with the exact DN\n# C(cn=g123m-1A,cn=classes,cn=students,cn=groups,ou=school,dc=school,dc=example,dc=com)\n- udm_group:\n    name: g123m-1A\n    subpath: 'cn=classes,cn=students,cn=groups'\n    ou: school\n\n- udm_group:\n    name: g123m-1A\n    position: 'cn=classes,cn=students,cn=groups,ou=school,dc=school,dc=example,dc=com'\n'''\n\n\nRETURN = '''# '''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.univention_umc import (\n    umc_module_for_add,\n    umc_module_for_edit,\n    ldap_search,\n    base_dn,\n)\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True,\n                      type='str'),\n            description=dict(default=None,\n                             type='str'),\n            position=dict(default='',\n                          type='str'),\n            ou=dict(default='',\n                    type='str'),\n            subpath=dict(default='cn=groups',\n                         type='str'),\n            state=dict(default='present',\n                       choices=['present', 'absent'],\n                       type='str')\n        ),\n        supports_check_mode=True\n    )\n    name = module.params['name']\n    description = module.params['description']\n    position = module.params['position']\n    ou = module.params['ou']\n    subpath = module.params['subpath']\n    state = module.params['state']\n    changed = False\n\n    groups = list(ldap_search(\n        '(&(objectClass=posixGroup)(cn={}))'.format(name),\n        attr=['cn']\n    ))\n    if position != '':\n        container = position\n    else:\n        if ou != '':\n            ou = 'ou={},'.format(ou)\n        if subpath != '':\n            subpath = '{},'.format(subpath)\n        container = '{}{}{}'.format(subpath, ou, base_dn())\n    group_dn = 'cn={},{}'.format(name, container)\n\n    exists = bool(len(groups))\n\n    if state == 'present':\n        try:\n            if not exists:\n                grp = umc_module_for_add('groups/group', container)\n            else:\n                grp = umc_module_for_edit('groups/group', group_dn)\n            grp['name'] = name\n            grp['description'] = description\n            diff = grp.diff()\n            changed = grp.diff() != []\n            if not module.check_mode:\n                if not exists:\n                    grp.create()\n                else:\n                    grp.modify()\n        except:\n            module.fail_json(\n                msg=\"Creating/editing group {} in {} failed\".format(name, container)\n            )\n\n    if state == 'absent' and exists:\n        try:\n            grp = umc_module_for_edit('groups/group', group_dn)\n            if not module.check_mode:\n                grp.remove()\n            changed = True\n        except:\n            module.fail_json(\n                msg=\"Removing group {} failed\".format(name)\n            )\n\n    module.exit_json(\n        changed=changed,\n        name=name,\n        diff=diff,\n        container=container\n    )\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  udm group version added   2 2  author   tobias rueetschi ( 2 b)  short description  manage posix group description         this module allows manage user groups univention corporate server (ucs)         it uses python api ucs create new object edit   requirements        python    2 6 options      state          required  false         default   present          choices    present  absent           description                whether group present      name          required  true         description                name posix group      description          required  false         description                group description      position          required  false         description                define whole ldap position group  e g                c(cn g123m 1a cn classes cn schueler cn groups ou schule dc example dc com)      ou          required  false         description                ldap ou  e g  school ldap ou c(ou school dc example dc com)      subpath          required  false         description                subpath inside ou  e g  c(cn classes cn students cn groups)        examples         create posix group   udm group      name  g123m 1a    create posix group exact dn   c(cn g123m 1a cn classes cn students cn groups ou school dc school dc example dc com)   udm group      name  g123m 1a     subpath   cn classes cn students cn groups      ou  school     udm group      name  g123m 1a     position   cn classes cn students cn groups ou school dc school dc example dc com        return                usr bin python        coding  utf 8        copyright (c) 2016  adfinis sygroup ag    tobias rueetschi  tobias ruetschi adfinis sygroup ch     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    create posix group    create posix group exact dn    c(cn g123m 1a cn classes cn students cn groups ou school dc school dc example dc com)    ", "content": "#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\n# Copyright (c) 2016, Adfinis SyGroup AG\n# Tobias Rueetschi <tobias.ruetschi@adfinis-sygroup.ch>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: udm_group\nversion_added: \"2.2\"\nauthor: \"Tobias Rueetschi (@2-B)\"\nshort_description: Manage of the posix group\ndescription:\n    - \"This module allows to manage user groups on a univention corporate server (UCS).\n       It uses the python API of the UCS to create a new object or edit it.\"\nrequirements:\n    - Python >= 2.6\noptions:\n    state:\n        required: false\n        default: \"present\"\n        choices: [ present, absent ]\n        description:\n            - Whether the group is present or not.\n    name:\n        required: true\n        description:\n            - Name of the posix group.\n    description:\n        required: false\n        description:\n            - Group description.\n    position:\n        required: false\n        description:\n            - define the whole ldap position of the group, e.g.\n              C(cn=g123m-1A,cn=classes,cn=schueler,cn=groups,ou=schule,dc=example,dc=com).\n    ou:\n        required: false\n        description:\n            - LDAP OU, e.g. school for LDAP OU C(ou=school,dc=example,dc=com).\n    subpath:\n        required: false\n        description:\n            - Subpath inside the OU, e.g. C(cn=classes,cn=students,cn=groups).\n'''\n\n\nEXAMPLES = '''\n# Create a POSIX group\n- udm_group:\n    name: g123m-1A\n\n# Create a POSIX group with the exact DN\n# C(cn=g123m-1A,cn=classes,cn=students,cn=groups,ou=school,dc=school,dc=example,dc=com)\n- udm_group:\n    name: g123m-1A\n    subpath: 'cn=classes,cn=students,cn=groups'\n    ou: school\n# or\n- udm_group:\n    name: g123m-1A\n    position: 'cn=classes,cn=students,cn=groups,ou=school,dc=school,dc=example,dc=com'\n'''\n\n\nRETURN = '''# '''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.univention_umc import (\n    umc_module_for_add,\n    umc_module_for_edit,\n    ldap_search,\n    base_dn,\n)\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True,\n                      type='str'),\n            description=dict(default=None,\n                             type='str'),\n            position=dict(default='',\n                          type='str'),\n            ou=dict(default='',\n                    type='str'),\n            subpath=dict(default='cn=groups',\n                         type='str'),\n            state=dict(default='present',\n                       choices=['present', 'absent'],\n                       type='str')\n        ),\n        supports_check_mode=True\n    )\n    name = module.params['name']\n    description = module.params['description']\n    position = module.params['position']\n    ou = module.params['ou']\n    subpath = module.params['subpath']\n    state = module.params['state']\n    changed = False\n\n    groups = list(ldap_search(\n        '(&(objectClass=posixGroup)(cn={}))'.format(name),\n        attr=['cn']\n    ))\n    if position != '':\n        container = position\n    else:\n        if ou != '':\n            ou = 'ou={},'.format(ou)\n        if subpath != '':\n            subpath = '{},'.format(subpath)\n        container = '{}{}{}'.format(subpath, ou, base_dn())\n    group_dn = 'cn={},{}'.format(name, container)\n\n    exists = bool(len(groups))\n\n    if state == 'present':\n        try:\n            if not exists:\n                grp = umc_module_for_add('groups/group', container)\n            else:\n                grp = umc_module_for_edit('groups/group', group_dn)\n            grp['name'] = name\n            grp['description'] = description\n            diff = grp.diff()\n            changed = grp.diff() != []\n            if not module.check_mode:\n                if not exists:\n                    grp.create()\n                else:\n                    grp.modify()\n        except:\n            module.fail_json(\n                msg=\"Creating/editing group {} in {} failed\".format(name, container)\n            )\n\n    if state == 'absent' and exists:\n        try:\n            grp = umc_module_for_edit('groups/group', group_dn)\n            if not module.check_mode:\n                grp.remove()\n            changed = True\n        except:\n            module.fail_json(\n                msg=\"Removing group {} failed\".format(name)\n            )\n\n    module.exit_json(\n        changed=changed,\n        name=name,\n        diff=diff,\n        container=container\n    )\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "udm_group.py", "id": "5b8ce0c7c9a89b83549e627027a62b0e", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/univention/udm_group.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}