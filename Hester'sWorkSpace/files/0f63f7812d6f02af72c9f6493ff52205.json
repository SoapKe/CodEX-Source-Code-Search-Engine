{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    determine_ext,\n    mimetype2ext,\n)\n\n\nclass TweakersIE(InfoExtractor):\n    _VALID_URL = r'https?://tweakers\\.net/video/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://tweakers.net/video/9926/new-nintendo-3ds-xl-op-alle-fronten-beter.html',\n        'md5': 'fe73e417c093a788e0160c4025f88b15',\n        'info_dict': {\n            'id': '9926',\n            'ext': 'mp4',\n            'title': 'New Nintendo 3DS XL - Op alle fronten beter',\n            'description': 'md5:3789b21fed9c0219e9bcaacd43fab280',\n            'thumbnail': r're:^https?://.*\\.jpe?g$',\n            'duration': 386,\n            'uploader_id': 's7JeEm',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._download_json(\n            'https://tweakers.net/video/s1playlist/%s/1920/1080/playlist.json' % video_id,\n            video_id)['items'][0]\n\n        title = video_data['title']\n\n        formats = []\n        for location in video_data.get('locations', {}).get('progressive', []):\n            format_id = location.get('label')\n            width = int_or_none(location.get('width'))\n            height = int_or_none(location.get('height'))\n            for source in location.get('sources', []):\n                source_url = source.get('src')\n                if not source_url:\n                    continue\n                ext = mimetype2ext(source.get('type')) or determine_ext(source_url)\n                formats.append({\n                    'format_id': format_id,\n                    'url': source_url,\n                    'width': width,\n                    'height': height,\n                    'ext': ext,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'thumbnail': video_data.get('poster'),\n            'duration': int_or_none(video_data.get('duration')),\n            'uploader_id': video_data.get('account'),\n            'formats': formats,\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    determine_ext,\n    mimetype2ext,\n)\n\n\nclass TweakersIE(InfoExtractor):\n    _VALID_URL = r'https?://tweakers\\.net/video/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://tweakers.net/video/9926/new-nintendo-3ds-xl-op-alle-fronten-beter.html',\n        'md5': 'fe73e417c093a788e0160c4025f88b15',\n        'info_dict': {\n            'id': '9926',\n            'ext': 'mp4',\n            'title': 'New Nintendo 3DS XL - Op alle fronten beter',\n            'description': 'md5:3789b21fed9c0219e9bcaacd43fab280',\n            'thumbnail': r're:^https?://.*\\.jpe?g$',\n            'duration': 386,\n            'uploader_id': 's7JeEm',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._download_json(\n            'https://tweakers.net/video/s1playlist/%s/1920/1080/playlist.json' % video_id,\n            video_id)['items'][0]\n\n        title = video_data['title']\n\n        formats = []\n        for location in video_data.get('locations', {}).get('progressive', []):\n            format_id = location.get('label')\n            width = int_or_none(location.get('width'))\n            height = int_or_none(location.get('height'))\n            for source in location.get('sources', []):\n                source_url = source.get('src')\n                if not source_url:\n                    continue\n                ext = mimetype2ext(source.get('type')) or determine_ext(source_url)\n                formats.append({\n                    'format_id': format_id,\n                    'url': source_url,\n                    'width': width,\n                    'height': height,\n                    'ext': ext,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'thumbnail': video_data.get('poster'),\n            'duration': int_or_none(video_data.get('duration')),\n            'uploader_id': video_data.get('account'),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tweakers.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tweakers.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}