{"author": "odoo", "code": " -*- coding: utf-8 -*-\n\n\nimport datetime\nfrom odoo import api, models, _\nfrom odoo.tools.safe_eval import safe_eval\n\n Use period and Journal for selection or resources\n\n\n\nclass ReportAssertAccount(models.AbstractModel):\n    _name = 'report.account_test.report_accounttest'\n\n    @api.model\n    def execute_code(self, code_exec):\n        def reconciled_inv():\n            \"\"\"\n            returns the list of invoices that are set as reconciled = True\n            \"\"\"\n            return self.env['account.invoice'].search([('reconciled', '=', True)]).ids\n\n        def order_columns(item, cols=None):\n            \"\"\"\n            This function is used to display a dictionary as a string, with its columns in the order chosen.\n\n            :param item: dict\n            :param cols: list of field names\n            :returns: a list of tuples (fieldname: value) in a similar way that would dict.items() do except that the\n                returned values are following the order given by cols\n            :rtype: [(key, value)]\n            \"\"\"\n            if cols is None:\n                cols = list(item)\n            return [(col, item.get(col)) for col in cols if col in item]\n\n        localdict = {\n            'cr': self.env.cr,\n            'uid': self.env.uid,\n            'reconciled_inv': reconciled_inv,   specific function used in different tests\n            'result': None,   used to store the result of the test\n            'column_order': None,   used to choose the display order of columns (in case you are returning a list of dict)\n            '_': _,\n        }\n        safe_eval(code_exec, localdict, mode=\"exec\", nocopy=True)\n        result = localdict['result']\n        column_order = localdict.get('column_order', None)\n\n        if not isinstance(result, (tuple, list, set)):\n            result = [result]\n        if not result:\n            result = [_('The test was passed successfully')]\n        else:\n            def _format(item):\n                if isinstance(item, dict):\n                    return ', '.join([\"%s: %s\" % (tup[0], tup[1]) for tup in order_columns(item, column_order)])\n                else:\n                    return item\n            result = [_format(rec) for rec in result]\n\n        return result\n\n    @api.model\n    def get_report_values(self, docids, data=None):\n        report = self.env['ir.actions.report']._get_report_from_name('account_test.report_accounttest')\n        records = self.env['accounting.assert.test'].browse(self.ids)\n        return {\n            'doc_ids': self._ids,\n            'doc_model': report.model,\n            'docs': records,\n            'data': data,\n            'execute_code': self.execute_code,\n            'datetime': datetime\n        }\n", "comments": "                returns list invoices set reconciled   true                             return self env  account invoice   search( ( reconciled        true) ) ids          def order columns(item  cols none)                              this function used display dictionary string  columns order chosen                param item  dict              param cols  list field names              returns  list tuples (fieldname  value) similar way would dict items() except                 returned values following order given cols              rtype   (key  value)                         coding  utf 8        part odoo  see license file full copyright licensing details        use period journal selection resources       specific function used different tests    used store result test    used choose display order columns (in case returning list dict) ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport datetime\nfrom odoo import api, models, _\nfrom odoo.tools.safe_eval import safe_eval\n#\n# Use period and Journal for selection or resources\n#\n\n\nclass ReportAssertAccount(models.AbstractModel):\n    _name = 'report.account_test.report_accounttest'\n\n    @api.model\n    def execute_code(self, code_exec):\n        def reconciled_inv():\n            \"\"\"\n            returns the list of invoices that are set as reconciled = True\n            \"\"\"\n            return self.env['account.invoice'].search([('reconciled', '=', True)]).ids\n\n        def order_columns(item, cols=None):\n            \"\"\"\n            This function is used to display a dictionary as a string, with its columns in the order chosen.\n\n            :param item: dict\n            :param cols: list of field names\n            :returns: a list of tuples (fieldname: value) in a similar way that would dict.items() do except that the\n                returned values are following the order given by cols\n            :rtype: [(key, value)]\n            \"\"\"\n            if cols is None:\n                cols = list(item)\n            return [(col, item.get(col)) for col in cols if col in item]\n\n        localdict = {\n            'cr': self.env.cr,\n            'uid': self.env.uid,\n            'reconciled_inv': reconciled_inv,  # specific function used in different tests\n            'result': None,  # used to store the result of the test\n            'column_order': None,  # used to choose the display order of columns (in case you are returning a list of dict)\n            '_': _,\n        }\n        safe_eval(code_exec, localdict, mode=\"exec\", nocopy=True)\n        result = localdict['result']\n        column_order = localdict.get('column_order', None)\n\n        if not isinstance(result, (tuple, list, set)):\n            result = [result]\n        if not result:\n            result = [_('The test was passed successfully')]\n        else:\n            def _format(item):\n                if isinstance(item, dict):\n                    return ', '.join([\"%s: %s\" % (tup[0], tup[1]) for tup in order_columns(item, column_order)])\n                else:\n                    return item\n            result = [_format(rec) for rec in result]\n\n        return result\n\n    @api.model\n    def get_report_values(self, docids, data=None):\n        report = self.env['ir.actions.report']._get_report_from_name('account_test.report_accounttest')\n        records = self.env['accounting.assert.test'].browse(self.ids)\n        return {\n            'doc_ids': self._ids,\n            'doc_model': report.model,\n            'docs': records,\n            'data': data,\n            'execute_code': self.execute_code,\n            'datetime': datetime\n        }\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "report_account_test.py", "id": "0a503e78ae12776f8b904b2e5b0876b9", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account_test/report/report_account_test.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}