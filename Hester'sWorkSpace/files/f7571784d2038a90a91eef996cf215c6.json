{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    clean_html,\n    determine_ext,\n    int_or_none,\n    js_to_json,\n    parse_duration,\n)\n\n\nclass ViewLiftBaseIE(InfoExtractor):\n    _DOMAINS_REGEX = r'(?:snagfilms|snagxtreme|funnyforfree|kiddovid|winnersview|monumentalsportsnetwork|vayafilm)\\.com|kesari\\.tv'\n\n\nclass ViewLiftEmbedIE(ViewLiftBaseIE):\n    _VALID_URL = r'https?://(?:(?:www|embed)\\.)?(?:%s)/embed/player\\?.*\\bfilmId=(?P<id>[\\da-f-]{36})' % ViewLiftBaseIE._DOMAINS_REGEX\n    _TESTS = [{\n        'url': 'http://embed.snagfilms.com/embed/player?filmId=74849a00-85a9-11e1-9660-123139220831&w=500',\n        'md5': '2924e9215c6eff7a55ed35b72276bd93',\n        'info_dict': {\n            'id': '74849a00-85a9-11e1-9660-123139220831',\n            'ext': 'mp4',\n            'title': '\n        }\n    }, {\n        \n        'url': 'http://www.snagfilms.com/embed/player?filmId=17ca0950-a74a-11e0-a92a-0026bb61d036',\n        'md5': '882fca19b9eb27ef865efeeaed376a48',\n        'info_dict': {\n            'id': '17ca0950-a74a-11e0-a92a-0026bb61d036',\n            'ext': 'mp4',\n            'title': 'Life in Limbo',\n        }\n    }, {\n        'url': 'http://www.snagfilms.com/embed/player?filmId=0000014c-de2f-d5d6-abcf-ffef58af0017',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_url(webpage):\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:embed\\.)?(?:%s)/embed/player.+?)\\1' % ViewLiftBaseIE._DOMAINS_REGEX,\n            webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        if '>This film is not playable in your area.<' in webpage:\n            raise ExtractorError(\n                'Film %s is not playable in your area.' % video_id, expected=True)\n\n        formats = []\n        has_bitrate = False\n        for source in self._parse_json(js_to_json(self._search_regex(\n                r'(?s)sources:\\s*(\\[.+?\\]),', webpage, 'json')), video_id):\n            file_ = source.get('file')\n            if not file_:\n                continue\n            type_ = source.get('type')\n            ext = determine_ext(file_)\n            format_id = source.get('label') or ext\n            if all(v in ('m3u8', 'hls') for v in (type_, ext)):\n                formats.extend(self._extract_m3u8_formats(\n                    file_, video_id, 'mp4', m3u8_id='hls'))\n            else:\n                bitrate = int_or_none(self._search_regex(\n                    [r'(\\d+)kbps', r'_\\d{1,2}x\\d{1,2}_(\\d{3,})\\.%s' % ext],\n                    file_, 'bitrate', default=None))\n                if not has_bitrate and bitrate:\n                    has_bitrate = True\n                height = int_or_none(self._search_regex(\n                    r'^(\\d+)[pP]$', format_id, 'height', default=None))\n                formats.append({\n                    'url': file_,\n                    'format_id': 'http-%s%s' % (format_id, ('-%dk' % bitrate if bitrate else '')),\n                    'tbr': bitrate,\n                    'height': height,\n                })\n        field_preference = None if has_bitrate else ('height', 'tbr', 'format_id')\n        self._sort_formats(formats, field_preference)\n\n        title = self._search_regex(\n            [r\"title\\s*:\\s*'([^']+)'\", r'<title>([^<]+)</title>'],\n            webpage, 'title')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n        }\n\n\nclass ViewLiftIE(ViewLiftBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?(?P<domain>%s)/(?:films/title|show|(?:news/)?videos?)/(?P<id>[^?\n    _TESTS = [{\n        'url': 'http://www.snagfilms.com/films/title/lost_for_life',\n        'md5': '19844f897b35af219773fd63bdec2942',\n        'info_dict': {\n            'id': '0000014c-de2f-d5d6-abcf-ffef58af0017',\n            'display_id': 'lost_for_life',\n            'ext': 'mp4',\n            'title': 'Lost for Life',\n            'description': 'md5:fbdacc8bb6b455e464aaf98bc02e1c82',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 4489,\n            'categories': ['Documentary', 'Crime', 'Award Winning', 'Festivals']\n        }\n    }, {\n        'url': 'http://www.snagfilms.com/show/the_world_cut_project/india',\n        'md5': 'e6292e5b837642bbda82d7f8bf3fbdfd',\n        'info_dict': {\n            'id': '00000145-d75c-d96e-a9c7-ff5c67b20000',\n            'display_id': 'the_world_cut_project/india',\n            'ext': 'mp4',\n            'title': 'India',\n            'description': 'md5:5c168c5a8f4719c146aad2e0dfac6f5f',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 979,\n            'categories': ['Documentary', 'Sports', 'Politics']\n        }\n    }, {\n        \n        'url': 'http://www.snagfilms.com/films/title/inside_mecca',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://www.snagfilms.com/show/augie_alone/flirting',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.winnersview.com/videos/the-good-son',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.kesari.tv/news/video/1461919076414',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://www.monumentalsportsnetwork.com/videos/john-carlson-postgame-2-25-15',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        domain, display_id = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        if \">Sorry, the Film you're looking for is not available.<\" in webpage:\n            raise ExtractorError(\n                'Film %s is not available.' % display_id, expected=True)\n\n        film_id = self._search_regex(r'filmId=([\\da-f-]{36})\"', webpage, 'film id')\n\n        snag = self._parse_json(\n            self._search_regex(\n                r'Snag\\.page\\.data\\s*=\\s*(\\[.+?\\]);', webpage, 'snag'),\n            display_id)\n\n        for item in snag:\n            if item.get('data', {}).get('film', {}).get('id') == film_id:\n                data = item['data']['film']\n                title = data['title']\n                description = clean_html(data.get('synopsis'))\n                thumbnail = data.get('image')\n                duration = int_or_none(data.get('duration') or data.get('runtime'))\n                categories = [\n                    category['title'] for category in data.get('categories', [])\n                    if category.get('title')]\n                break\n        else:\n            title = self._search_regex(\n                r'itemprop=\"title\">([^<]+)<', webpage, 'title')\n            description = self._html_search_regex(\n                r'(?s)<div itemprop=\"description\" class=\"film-synopsis-inner \">(.+?)</div>',\n                webpage, 'description', default=None) or self._og_search_description(webpage)\n            thumbnail = self._og_search_thumbnail(webpage)\n            duration = parse_duration(self._search_regex(\n                r'<span itemprop=\"duration\" class=\"film-duration strong\">([^<]+)<',\n                webpage, 'duration', fatal=False))\n            categories = re.findall(r'<a href=\"/movies/[^\"]+\">([^<]+)</a>', webpage)\n\n        return {\n            '_type': 'url_transparent',\n            'url': 'http://%s/embed/player?filmId=%s' % (domain, film_id),\n            'id': film_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'categories': categories,\n            'ie_key': 'ViewLiftEmbed',\n        }\n", "comments": "#whilewewatch',\n# invalid labels, 360p is better that 480p\n#]+)' % ViewLiftBaseIE._DOMAINS_REGEX\n# Film is not playable in your area.\n# Film is not available.\n# Was once Kaltura embed\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    clean_html,\n    determine_ext,\n    int_or_none,\n    js_to_json,\n    parse_duration,\n)\n\n\nclass ViewLiftBaseIE(InfoExtractor):\n    _DOMAINS_REGEX = r'(?:snagfilms|snagxtreme|funnyforfree|kiddovid|winnersview|monumentalsportsnetwork|vayafilm)\\.com|kesari\\.tv'\n\n\nclass ViewLiftEmbedIE(ViewLiftBaseIE):\n    _VALID_URL = r'https?://(?:(?:www|embed)\\.)?(?:%s)/embed/player\\?.*\\bfilmId=(?P<id>[\\da-f-]{36})' % ViewLiftBaseIE._DOMAINS_REGEX\n    _TESTS = [{\n        'url': 'http://embed.snagfilms.com/embed/player?filmId=74849a00-85a9-11e1-9660-123139220831&w=500',\n        'md5': '2924e9215c6eff7a55ed35b72276bd93',\n        'info_dict': {\n            'id': '74849a00-85a9-11e1-9660-123139220831',\n            'ext': 'mp4',\n            'title': '#whilewewatch',\n        }\n    }, {\n        # invalid labels, 360p is better that 480p\n        'url': 'http://www.snagfilms.com/embed/player?filmId=17ca0950-a74a-11e0-a92a-0026bb61d036',\n        'md5': '882fca19b9eb27ef865efeeaed376a48',\n        'info_dict': {\n            'id': '17ca0950-a74a-11e0-a92a-0026bb61d036',\n            'ext': 'mp4',\n            'title': 'Life in Limbo',\n        }\n    }, {\n        'url': 'http://www.snagfilms.com/embed/player?filmId=0000014c-de2f-d5d6-abcf-ffef58af0017',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_url(webpage):\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:embed\\.)?(?:%s)/embed/player.+?)\\1' % ViewLiftBaseIE._DOMAINS_REGEX,\n            webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        if '>This film is not playable in your area.<' in webpage:\n            raise ExtractorError(\n                'Film %s is not playable in your area.' % video_id, expected=True)\n\n        formats = []\n        has_bitrate = False\n        for source in self._parse_json(js_to_json(self._search_regex(\n                r'(?s)sources:\\s*(\\[.+?\\]),', webpage, 'json')), video_id):\n            file_ = source.get('file')\n            if not file_:\n                continue\n            type_ = source.get('type')\n            ext = determine_ext(file_)\n            format_id = source.get('label') or ext\n            if all(v in ('m3u8', 'hls') for v in (type_, ext)):\n                formats.extend(self._extract_m3u8_formats(\n                    file_, video_id, 'mp4', m3u8_id='hls'))\n            else:\n                bitrate = int_or_none(self._search_regex(\n                    [r'(\\d+)kbps', r'_\\d{1,2}x\\d{1,2}_(\\d{3,})\\.%s' % ext],\n                    file_, 'bitrate', default=None))\n                if not has_bitrate and bitrate:\n                    has_bitrate = True\n                height = int_or_none(self._search_regex(\n                    r'^(\\d+)[pP]$', format_id, 'height', default=None))\n                formats.append({\n                    'url': file_,\n                    'format_id': 'http-%s%s' % (format_id, ('-%dk' % bitrate if bitrate else '')),\n                    'tbr': bitrate,\n                    'height': height,\n                })\n        field_preference = None if has_bitrate else ('height', 'tbr', 'format_id')\n        self._sort_formats(formats, field_preference)\n\n        title = self._search_regex(\n            [r\"title\\s*:\\s*'([^']+)'\", r'<title>([^<]+)</title>'],\n            webpage, 'title')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n        }\n\n\nclass ViewLiftIE(ViewLiftBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?(?P<domain>%s)/(?:films/title|show|(?:news/)?videos?)/(?P<id>[^?#]+)' % ViewLiftBaseIE._DOMAINS_REGEX\n    _TESTS = [{\n        'url': 'http://www.snagfilms.com/films/title/lost_for_life',\n        'md5': '19844f897b35af219773fd63bdec2942',\n        'info_dict': {\n            'id': '0000014c-de2f-d5d6-abcf-ffef58af0017',\n            'display_id': 'lost_for_life',\n            'ext': 'mp4',\n            'title': 'Lost for Life',\n            'description': 'md5:fbdacc8bb6b455e464aaf98bc02e1c82',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 4489,\n            'categories': ['Documentary', 'Crime', 'Award Winning', 'Festivals']\n        }\n    }, {\n        'url': 'http://www.snagfilms.com/show/the_world_cut_project/india',\n        'md5': 'e6292e5b837642bbda82d7f8bf3fbdfd',\n        'info_dict': {\n            'id': '00000145-d75c-d96e-a9c7-ff5c67b20000',\n            'display_id': 'the_world_cut_project/india',\n            'ext': 'mp4',\n            'title': 'India',\n            'description': 'md5:5c168c5a8f4719c146aad2e0dfac6f5f',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 979,\n            'categories': ['Documentary', 'Sports', 'Politics']\n        }\n    }, {\n        # Film is not playable in your area.\n        'url': 'http://www.snagfilms.com/films/title/inside_mecca',\n        'only_matching': True,\n    }, {\n        # Film is not available.\n        'url': 'http://www.snagfilms.com/show/augie_alone/flirting',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.winnersview.com/videos/the-good-son',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.kesari.tv/news/video/1461919076414',\n        'only_matching': True,\n    }, {\n        # Was once Kaltura embed\n        'url': 'https://www.monumentalsportsnetwork.com/videos/john-carlson-postgame-2-25-15',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        domain, display_id = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        if \">Sorry, the Film you're looking for is not available.<\" in webpage:\n            raise ExtractorError(\n                'Film %s is not available.' % display_id, expected=True)\n\n        film_id = self._search_regex(r'filmId=([\\da-f-]{36})\"', webpage, 'film id')\n\n        snag = self._parse_json(\n            self._search_regex(\n                r'Snag\\.page\\.data\\s*=\\s*(\\[.+?\\]);', webpage, 'snag'),\n            display_id)\n\n        for item in snag:\n            if item.get('data', {}).get('film', {}).get('id') == film_id:\n                data = item['data']['film']\n                title = data['title']\n                description = clean_html(data.get('synopsis'))\n                thumbnail = data.get('image')\n                duration = int_or_none(data.get('duration') or data.get('runtime'))\n                categories = [\n                    category['title'] for category in data.get('categories', [])\n                    if category.get('title')]\n                break\n        else:\n            title = self._search_regex(\n                r'itemprop=\"title\">([^<]+)<', webpage, 'title')\n            description = self._html_search_regex(\n                r'(?s)<div itemprop=\"description\" class=\"film-synopsis-inner \">(.+?)</div>',\n                webpage, 'description', default=None) or self._og_search_description(webpage)\n            thumbnail = self._og_search_thumbnail(webpage)\n            duration = parse_duration(self._search_regex(\n                r'<span itemprop=\"duration\" class=\"film-duration strong\">([^<]+)<',\n                webpage, 'duration', fatal=False))\n            categories = re.findall(r'<a href=\"/movies/[^\"]+\">([^<]+)</a>', webpage)\n\n        return {\n            '_type': 'url_transparent',\n            'url': 'http://%s/embed/player?filmId=%s' % (domain, film_id),\n            'id': film_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'categories': categories,\n            'ie_key': 'ViewLiftEmbed',\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "viewlift.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/viewlift.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}