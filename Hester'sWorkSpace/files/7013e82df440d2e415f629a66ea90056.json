{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    mimetype2ext,\n    parse_codecs,\n    xpath_element,\n    xpath_text,\n)\n\n\nclass VideaIE(InfoExtractor):\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'http://videa.hu/videok/allatok/az-orult-kigyasz-285-kigyot-kigyo-8YfIAjxwWGwT8HVQ',\n        'md5': '97a7af41faeaffd9f1fc864a7c7e7603',\n        'info_dict': {\n            'id': '8YfIAjxwWGwT8HVQ',\n            'ext': 'mp4',\n            'title': 'Az \u0151r\u00fclt k\u00edgy\u00e1sz 285 k\u00edgy\u00f3t enged szabadon',\n            'thumbnail': 'http://videa.hu/static/still/1.4.1.1007274.1204470.3',\n            'duration': 21,\n        },\n    }, {\n        'url': 'http://videa.hu/videok/origo/jarmuvek/supercars-elozes-jAHDWfWSJH5XuFhH',\n        'only_matching': True,\n    }, {\n        'url': 'http://videa.hu/player?v=8YfIAjxwWGwT8HVQ',\n        'only_matching': True,\n    }, {\n        'url': 'http://videa.hu/player/v/8YfIAjxwWGwT8HVQ?autoplay=1',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [url for _, url in re.findall(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//videa\\.hu/player\\?.*?\\bv=.+?)\\1',\n            webpage)]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        info = self._download_xml(\n            'http://videa.hu/videaplayer_get_xml.php', video_id,\n            query={'v': video_id})\n\n        video = xpath_element(info, './/video', 'video', fatal=True)\n        sources = xpath_element(info, './/video_sources', 'sources', fatal=True)\n\n        title = xpath_text(video, './title', fatal=True)\n\n        formats = []\n        for source in sources.findall('./video_source'):\n            source_url = source.text\n            if not source_url:\n                continue\n            f = parse_codecs(source.get('codecs'))\n            f.update({\n                'url': source_url,\n                'ext': mimetype2ext(source.get('mimetype')) or 'mp4',\n                'format_id': source.get('name'),\n                'width': int_or_none(source.get('width')),\n                'height': int_or_none(source.get('height')),\n            })\n            formats.append(f)\n        self._sort_formats(formats)\n\n        thumbnail = xpath_text(video, './poster_src')\n        duration = int_or_none(xpath_text(video, './duration'))\n\n        age_limit = None\n        is_adult = xpath_text(video, './is_adult_content', default=None)\n        if is_adult:\n            age_limit = 18 if is_adult == '1' else 0\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n", "comments": "(?x)\n                    https?://\n                        videa\\.hu/\n                        (?:\n                            videok/(?:[^/]+/)*[^?#&]+-|\n                            player\\?.*?\\bv=|\n                            player/v/\n                        )\n                        (?P<id>[^?#&]+)\n                    \n \n# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    mimetype2ext,\n    parse_codecs,\n    xpath_element,\n    xpath_text,\n)\n\n\nclass VideaIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        videa\\.hu/\n                        (?:\n                            videok/(?:[^/]+/)*[^?#&]+-|\n                            player\\?.*?\\bv=|\n                            player/v/\n                        )\n                        (?P<id>[^?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://videa.hu/videok/allatok/az-orult-kigyasz-285-kigyot-kigyo-8YfIAjxwWGwT8HVQ',\n        'md5': '97a7af41faeaffd9f1fc864a7c7e7603',\n        'info_dict': {\n            'id': '8YfIAjxwWGwT8HVQ',\n            'ext': 'mp4',\n            'title': 'Az \u0151r\u00fclt k\u00edgy\u00e1sz 285 k\u00edgy\u00f3t enged szabadon',\n            'thumbnail': 'http://videa.hu/static/still/1.4.1.1007274.1204470.3',\n            'duration': 21,\n        },\n    }, {\n        'url': 'http://videa.hu/videok/origo/jarmuvek/supercars-elozes-jAHDWfWSJH5XuFhH',\n        'only_matching': True,\n    }, {\n        'url': 'http://videa.hu/player?v=8YfIAjxwWGwT8HVQ',\n        'only_matching': True,\n    }, {\n        'url': 'http://videa.hu/player/v/8YfIAjxwWGwT8HVQ?autoplay=1',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [url for _, url in re.findall(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//videa\\.hu/player\\?.*?\\bv=.+?)\\1',\n            webpage)]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        info = self._download_xml(\n            'http://videa.hu/videaplayer_get_xml.php', video_id,\n            query={'v': video_id})\n\n        video = xpath_element(info, './/video', 'video', fatal=True)\n        sources = xpath_element(info, './/video_sources', 'sources', fatal=True)\n\n        title = xpath_text(video, './title', fatal=True)\n\n        formats = []\n        for source in sources.findall('./video_source'):\n            source_url = source.text\n            if not source_url:\n                continue\n            f = parse_codecs(source.get('codecs'))\n            f.update({\n                'url': source_url,\n                'ext': mimetype2ext(source.get('mimetype')) or 'mp4',\n                'format_id': source.get('name'),\n                'width': int_or_none(source.get('width')),\n                'height': int_or_none(source.get('height')),\n            })\n            formats.append(f)\n        self._sort_formats(formats)\n\n        thumbnail = xpath_text(video, './poster_src')\n        duration = int_or_none(xpath_text(video, './duration'))\n\n        age_limit = None\n        is_adult = xpath_text(video, './is_adult_content', default=None)\n        if is_adult:\n            age_limit = 18 if is_adult == '1' else 0\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "videa.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/videa.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}