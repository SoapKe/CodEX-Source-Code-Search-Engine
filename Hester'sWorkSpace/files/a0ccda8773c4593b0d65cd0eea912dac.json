{"author": "openai", "code": "import numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\n\nclass InvertedDoublePendulumEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, 'inverted_double_pendulum.xml', 5)\n        utils.EzPickle.__init__(self)\n\n    def step(self, action):\n        self.do_simulation(action, self.frame_skip)\n        ob = self._get_obs()\n        x, _, y = self.sim.data.site_xpos[0]\n        dist_penalty = 0.01 * x ** 2 + (y - 2) ** 2\n        v1, v2 = self.sim.data.qvel[1:3]\n        vel_penalty = 1e-3 * v1**2 + 5e-3 * v2**2\n        alive_bonus = 10\n        r = alive_bonus - dist_penalty - vel_penalty\n        done = bool(y <= 1)\n        return ob, r, done, {}\n\n    def _get_obs(self):\n        return np.concatenate([\n            self.sim.data.qpos[:1],  \n            np.sin(self.sim.data.qpos[1:]),  \n            np.cos(self.sim.data.qpos[1:]),\n            np.clip(self.sim.data.qvel, -10, 10),\n            np.clip(self.sim.data.qfrc_constraint, -10, 10)\n        ]).ravel()\n\n    def reset_model(self):\n        self.set_state(\n            self.init_qpos + self.np_random.uniform(low=-.1, high=.1, size=self.model.nq),\n            self.init_qvel + self.np_random.randn(self.model.nv) * .1\n        )\n        return self._get_obs()\n\n    def viewer_setup(self):\n        v = self.viewer\n        v.cam.trackbodyid = 0\n        v.cam.distance = self.model.stat.extent * 0.5\n        v.cam.lookat[2] = 0.12250000000000005  # v.model.stat.center[2]\n", "comments": "  cart x pos    link angles    v model stat center 2  ", "content": "import numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\n\nclass InvertedDoublePendulumEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, 'inverted_double_pendulum.xml', 5)\n        utils.EzPickle.__init__(self)\n\n    def step(self, action):\n        self.do_simulation(action, self.frame_skip)\n        ob = self._get_obs()\n        x, _, y = self.sim.data.site_xpos[0]\n        dist_penalty = 0.01 * x ** 2 + (y - 2) ** 2\n        v1, v2 = self.sim.data.qvel[1:3]\n        vel_penalty = 1e-3 * v1**2 + 5e-3 * v2**2\n        alive_bonus = 10\n        r = alive_bonus - dist_penalty - vel_penalty\n        done = bool(y <= 1)\n        return ob, r, done, {}\n\n    def _get_obs(self):\n        return np.concatenate([\n            self.sim.data.qpos[:1],  # cart x pos\n            np.sin(self.sim.data.qpos[1:]),  # link angles\n            np.cos(self.sim.data.qpos[1:]),\n            np.clip(self.sim.data.qvel, -10, 10),\n            np.clip(self.sim.data.qfrc_constraint, -10, 10)\n        ]).ravel()\n\n    def reset_model(self):\n        self.set_state(\n            self.init_qpos + self.np_random.uniform(low=-.1, high=.1, size=self.model.nq),\n            self.init_qvel + self.np_random.randn(self.model.nv) * .1\n        )\n        return self._get_obs()\n\n    def viewer_setup(self):\n        v = self.viewer\n        v.cam.trackbodyid = 0\n        v.cam.distance = self.model.stat.extent * 0.5\n        v.cam.lookat[2] = 0.12250000000000005  # v.model.stat.center[2]\n", "description": "A toolkit for developing and comparing reinforcement learning algorithms.", "file_name": "inverted_double_pendulum.py", "id": "a0ccda8773c4593b0d65cd0eea912dac", "language": "Python", "project_name": "gym", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/openai-gym/openai-gym-6160181/gym/envs/mujoco/inverted_double_pendulum.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:30:35Z", "url": "https://github.com/openai/gym", "wiki": true}