{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport time\nfrom datetime import datetime\n\nfrom odoo.tests.common import TransactionCase\nfrom odoo.tools import DEFAULT_SERVER_DATETIME_FORMAT\n\n\nclass TestStockValuation(TransactionCase):\n    def setUp(self):\n        super(TestStockValuation, self).setUp()\n        self.supplier_location = self.env.ref('stock.stock_location_suppliers')\n        self.stock_location = self.env.ref('stock.stock_location_stock')\n        self.partner_id = self.env.ref('base.res_partner_1')\n        self.product1 = self.env.ref('product.product_product_8')\n        Account = self.env['account.account']\n        self.stock_input_account = Account.create({\n            'name': 'Stock Input',\n            'code': 'StockIn',\n            'user_type_id': self.env.ref('account.data_account_type_current_assets').id,\n        })\n        self.stock_output_account = Account.create({\n            'name': 'Stock Output',\n            'code': 'StockOut',\n            'user_type_id': self.env.ref('account.data_account_type_current_assets').id,\n        })\n        self.stock_valuation_account = Account.create({\n            'name': 'Stock Valuation',\n            'code': 'Stock Valuation',\n            'user_type_id': self.env.ref('account.data_account_type_current_assets').id,\n        })\n        self.stock_journal = self.env['account.journal'].create({\n            'name': 'Stock Journal',\n            'code': 'STJTEST',\n            'type': 'general',\n        })\n        self.product1.categ_id.write({\n            'property_stock_account_input_categ_id': self.stock_input_account.id,\n            'property_stock_account_output_categ_id': self.stock_output_account.id,\n            'property_stock_valuation_account_id': self.stock_valuation_account.id,\n            'property_stock_journal': self.stock_journal.id,\n        })\n\n    def test_change_unit_cost_average_1(self):\n        \"\"\" Confirm a purchase order and create the associated receipt, change the unit cost of the\n        purchase order before validating the receipt, the value of the received goods should be set\n        according to the last unit cost.\n        \"\"\"\n        self.product1.product_tmpl_id.cost_method = 'average'\n        po1 = self.env['purchase.order'].create({\n            'partner_id': self.partner_id.id,\n            'order_line': [\n                (0, 0, {\n                    'name': self.product1.name,\n                    'product_id': self.product1.id,\n                    'product_qty': 10.0,\n                    'product_uom': self.product1.uom_po_id.id,\n                    'price_unit': 100.0,\n                    'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT),\n                }),\n            ],\n        })\n        po1.button_confirm()\n\n        picking1 = po1.picking_ids[0]\n        move1 = picking1.move_lines[0]\n\n        \n        self.assertEquals(move1.price_unit, 100)\n\n        \n        po1.order_line.price_unit = 200\n\n        \n        self.assertEquals(move1.price_unit, 100)\n\n        \n        res_dict = picking1.button_validate()\n        wizard = self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id'))\n        wizard.process()\n\n        \n        self.assertEquals(move1.price_unit, 200)\n\n        self.assertEquals(self.product1.stock_value, 2000)\n\n    def test_standard_price_change_1(self):\n        \"\"\" Confirm a purchase order and create the associated receipt, change the unit cost of the\n        purchase order and the standard price of the product before validating the receipt, the\n        value of the received goods should be set according to the last standard price.\n        \"\"\"\n        self.product1.product_tmpl_id.cost_method = 'standard'\n\n        \n        self.product1.product_tmpl_id.standard_price = 10\n\n        po1 = self.env['purchase.order'].create({\n            'partner_id': self.partner_id.id,\n            'order_line': [\n                (0, 0, {\n                    'name': self.product1.name,\n                    'product_id': self.product1.id,\n                    'product_qty': 10.0,\n                    'product_uom': self.product1.uom_po_id.id,\n                    'price_unit': 11.0,\n                    'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT),\n                }),\n            ],\n        })\n        po1.button_confirm()\n\n        picking1 = po1.picking_ids[0]\n        move1 = picking1.move_lines[0]\n\n        \n        \n        self.assertEquals(move1.price_unit, 11)\n\n        \n        self.product1.product_tmpl_id.standard_price = 12\n\n        \n        self.assertEquals(move1.price_unit, 11)\n\n        \n        res_dict = picking1.button_validate()\n        wizard = self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id'))\n        wizard.process()\n\n        \n        self.assertEquals(move1.price_unit, 12)\n\n        self.assertEquals(self.product1.stock_value, 120)\n\n    def test_change_currency_rate_average_1(self):\n        \"\"\" Confirm a purchase order in another currency and create the associated receipt, change\n        the currency rate, validate the receipt and then check that the value of the received goods\n        is set according to the last currency rate.\n        \"\"\"\n        usd_currency = self.env.ref('base.USD')\n        self.env.user.company_id.currency_id = usd_currency.id\n\n        eur_currency = self.env.ref('base.EUR')\n\n        self.product1.product_tmpl_id.cost_method = 'average'\n\n        \n        po1 = self.env['purchase.order'].create({\n            'partner_id': self.partner_id.id,\n            'currency_id': eur_currency.id,\n            'order_line': [\n                (0, 0, {\n                    'name': self.product1.name,\n                    'product_id': self.product1.id,\n                    'product_qty': 10.0,\n                    'product_uom': self.product1.uom_po_id.id,\n                    'price_unit': 100.0,\n                    'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT),\n                }),\n            ],\n        })\n        po1.button_confirm()\n\n        picking1 = po1.picking_ids[0]\n        move1 = picking1.move_lines[0]\n\n        \n        price_unit_usd = po1.currency_id.compute(po1.order_line.price_unit, po1.company_id.currency_id, round=True)\n\n        \n        \n        self.assertAlmostEqual(move1.price_unit, price_unit_usd)\n\n        \n        self.env['res.currency.rate'].create({\n            'name': time.strftime('%Y-%m-%d'),\n            'rate': 2.0,\n            'currency_id': eur_currency.id,\n            'company_id': po1.company_id.id,\n        })\n        eur_currency._compute_current_rate()\n        price_unit_usd_new_rate = po1.currency_id.compute(po1.order_line.price_unit, po1.company_id.currency_id, round=True)\n\n        \n        self.assertLess(price_unit_usd_new_rate, price_unit_usd)\n\n        \n        self.assertAlmostEqual(move1.price_unit, price_unit_usd)\n\n        \n        res_dict = picking1.button_validate()\n        wizard = self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id'))\n        wizard.process()\n\n        \n        self.assertEquals(move1.price_unit, price_unit_usd_new_rate)\n\n        self.assertAlmostEqual(self.product1.stock_value, price_unit_usd_new_rate * 10, delta=0.1)\n\n    def test_extra_move_fifo_1(self):\n        \"\"\" Check that the extra move when over processing a receipt is correctly merged back in\n        the original move.\n        \"\"\"\n        self.product1.product_tmpl_id.cost_method = 'fifo'\n        po1 = self.env['purchase.order'].create({\n            'partner_id': self.partner_id.id,\n            'order_line': [\n                (0, 0, {\n                    'name': self.product1.name,\n                    'product_id': self.product1.id,\n                    'product_qty': 10.0,\n                    'product_uom': self.product1.uom_po_id.id,\n                    'price_unit': 100.0,\n                    'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT),\n                }),\n            ],\n        })\n        po1.button_confirm()\n\n        picking1 = po1.picking_ids[0]\n        move1 = picking1.move_lines[0]\n        move1.quantity_done = 15\n        res_dict = picking1.button_validate()\n        self.assertEqual(res_dict['res_model'], 'stock.overprocessed.transfer')\n        wizard = self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id'))\n        wizard.action_confirm()\n\n        \n        self.assertEqual(len(picking1.move_lines), 1)\n        self.assertEqual(move1.price_unit, 100)\n        self.assertEqual(move1.product_qty, 15)\n        self.assertEqual(self.product1.stock_value, 1500)\n\n    def test_backorder_fifo_1(self):\n        \"\"\" Check that the backordered move when under processing a receipt correctly keep the\n        price unit of the original move.\n        \"\"\"\n        self.product1.product_tmpl_id.cost_method = 'fifo'\n        po1 = self.env['purchase.order'].create({\n            'partner_id': self.partner_id.id,\n            'order_line': [\n                (0, 0, {\n                    'name': self.product1.name,\n                    'product_id': self.product1.id,\n                    'product_qty': 10.0,\n                    'product_uom': self.product1.uom_po_id.id,\n                    'price_unit': 100.0,\n                    'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT),\n                }),\n            ],\n        })\n        po1.button_confirm()\n\n        picking1 = po1.picking_ids[0]\n        move1 = picking1.move_lines[0]\n        move1.quantity_done = 5\n        res_dict = picking1.button_validate()\n        self.assertEqual(res_dict['res_model'], 'stock.backorder.confirmation')\n        wizard = self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id'))\n        wizard.process()\n\n        self.assertEqual(len(picking1.move_lines), 1)\n        self.assertEqual(move1.price_unit, 100)\n        self.assertEqual(move1.product_qty, 5)\n\n        picking2 = po1.picking_ids.filtered(lambda p: p.backorder_id)\n        move2 = picking2.move_lines[0]\n        self.assertEqual(len(picking2.move_lines), 1)\n        self.assertEqual(move2.price_unit, 100)\n        self.assertEqual(move2.product_qty, 5)\n\n", "comments": "    confirm purchase order create associated receipt  change unit cost         purchase order validating receipt  value received goods set         according last unit cost                      self product1 product tmpl id cost method    average          po1   self env  purchase order   create(               partner id   self partner id id               order line                     (0  0                         name   self product1 name                       product id   self product1 id                       product qty   10 0                       product uom   self product1 uom po id id                       price unit   100 0                       date planned   datetime today() strftime(default server datetime format)                   )                          )         po1 button confirm()          picking1   po1 picking ids 0          move1   picking1 move lines 0             unit price purchase order line copied move         self assertequals(move1 price unit  100)            update unit price purchase order line         po1 order line price unit   200            unit price stock move directly updated         self assertequals(move1 price unit  100)            validate receipt         res dict   picking1 button validate()         wizard   self env (res dict get( res model ))  browse(res dict get( res id ))         wizard process()            unit price stock move updated latest value         self assertequals(move1 price unit  200)          self assertequals(self product1 stock value  2000)      def test standard price change 1(self)              confirm purchase order create associated receipt  change unit cost         purchase order standard price product validating receipt          value received goods set according last standard price                      self product1 product tmpl id cost method    standard             set standard price         self product1 product tmpl id standard price   10          po1   self env  purchase order   create(               partner id   self partner id id               order line                     (0  0                         name   self product1 name                       product id   self product1 id                       product qty   10 0                       product uom   self product1 uom po id id                       price unit   11 0                       date planned   datetime today() strftime(default server datetime format)                   )                          )         po1 button confirm()          picking1   po1 picking ids 0          move1   picking1 move lines 0             move unit price reflects purchase order line cost even useless           product cost method standard         self assertequals(move1 price unit  11)            set new standard price         self product1 product tmpl id standard price   12            unit price stock move directly updated         self assertequals(move1 price unit  11)            validate receipt         res dict   picking1 button validate()         wizard   self env (res dict get( res model ))  browse(res dict get( res id ))         wizard process()            unit price stock move updated latest value         self assertequals(move1 price unit  12)          self assertequals(self product1 stock value  120)      def test change currency rate average 1(self)              confirm purchase order another currency create associated receipt  change         currency rate  validate receipt check value received goods         set according last currency rate                      usd currency   self env ref( base usd )         self env user company id currency id   usd currency id          eur currency   self env ref( base eur )          self product1 product tmpl id cost method    average             default currency usd  create purchase order eur         po1   self env  purchase order   create(               partner id   self partner id id               currency id   eur currency id               order line                     (0  0                         name   self product1 name                       product id   self product1 id                       product qty   10 0                       product uom   self product1 uom po id id                       price unit   100 0                       date planned   datetime today() strftime(default server datetime format)                   )                          )         po1 button confirm()          picking1   po1 picking ids 0          move1   picking1 move lines 0             convert price unit company currency         price unit usd   po1 currency id compute(po1 order line price unit  po1 company id currency id  round true)            unit price move unit price purchase order line converted           company currency         self assertalmostequal(move1 price unit  price unit usd)            change rate currency         self env  res currency rate   create(               name   time strftime(  y   )               rate   2 0               currency id   eur currency id               company id   po1 company id id           )         eur currency  compute current rate()         price unit usd new rate   po1 currency id compute(po1 order line price unit  po1 company id currency id  round true)            new price unit lower th initial rate change         self assertless(price unit usd new rate  price unit usd)            unit price stock move directly updated         self assertalmostequal(move1 price unit  price unit usd)            validate receipt         res dict   picking1 button validate()         wizard   self env (res dict get( res model ))  browse(res dict get( res id ))         wizard process()            unit price stock move updated latest value         self assertequals(move1 price unit  price unit usd new rate)          self assertalmostequal(self product1 stock value  price unit usd new rate   10  delta 0 1)      def test extra move fifo 1(self)              check extra move processing receipt correctly merged back         original move                      self product1 product tmpl id cost method    fifo          po1   self env  purchase order   create(               partner id   self partner id id               order line                     (0  0                         name   self product1 name                       product id   self product1 id                       product qty   10 0                       product uom   self product1 uom po id id                       price unit   100 0                       date planned   datetime today() strftime(default server datetime format)                   )                          )         po1 button confirm()          picking1   po1 picking ids 0          move1   picking1 move lines 0          move1 quantity done   15         res dict   picking1 button validate()         self assertequal(res dict  res model     stock overprocessed transfer )         wizard   self env (res dict get( res model ))  browse(res dict get( res id ))         wizard action confirm()            one move         self assertequal(len(picking1 move lines)  1)         self assertequal(move1 price unit  100)         self assertequal(move1 product qty  15)         self assertequal(self product1 stock value  1500)      def test backorder fifo 1(self)              check backordered move processing receipt correctly keep         price unit original move                     coding  utf 8        part odoo  see license file full copyright licensing details     unit price purchase order line copied move    update unit price purchase order line    unit price stock move directly updated    validate receipt    unit price stock move updated latest value    set standard price    move unit price reflects purchase order line cost even useless    product cost method standard    set new standard price    unit price stock move directly updated    validate receipt    unit price stock move updated latest value    default currency usd  create purchase order eur    convert price unit company currency    unit price move unit price purchase order line converted    company currency    change rate currency    new price unit lower th initial rate change    unit price stock move directly updated    validate receipt    unit price stock move updated latest value    one move ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport time\nfrom datetime import datetime\n\nfrom odoo.tests.common import TransactionCase\nfrom odoo.tools import DEFAULT_SERVER_DATETIME_FORMAT\n\n\nclass TestStockValuation(TransactionCase):\n    def setUp(self):\n        super(TestStockValuation, self).setUp()\n        self.supplier_location = self.env.ref('stock.stock_location_suppliers')\n        self.stock_location = self.env.ref('stock.stock_location_stock')\n        self.partner_id = self.env.ref('base.res_partner_1')\n        self.product1 = self.env.ref('product.product_product_8')\n        Account = self.env['account.account']\n        self.stock_input_account = Account.create({\n            'name': 'Stock Input',\n            'code': 'StockIn',\n            'user_type_id': self.env.ref('account.data_account_type_current_assets').id,\n        })\n        self.stock_output_account = Account.create({\n            'name': 'Stock Output',\n            'code': 'StockOut',\n            'user_type_id': self.env.ref('account.data_account_type_current_assets').id,\n        })\n        self.stock_valuation_account = Account.create({\n            'name': 'Stock Valuation',\n            'code': 'Stock Valuation',\n            'user_type_id': self.env.ref('account.data_account_type_current_assets').id,\n        })\n        self.stock_journal = self.env['account.journal'].create({\n            'name': 'Stock Journal',\n            'code': 'STJTEST',\n            'type': 'general',\n        })\n        self.product1.categ_id.write({\n            'property_stock_account_input_categ_id': self.stock_input_account.id,\n            'property_stock_account_output_categ_id': self.stock_output_account.id,\n            'property_stock_valuation_account_id': self.stock_valuation_account.id,\n            'property_stock_journal': self.stock_journal.id,\n        })\n\n    def test_change_unit_cost_average_1(self):\n        \"\"\" Confirm a purchase order and create the associated receipt, change the unit cost of the\n        purchase order before validating the receipt, the value of the received goods should be set\n        according to the last unit cost.\n        \"\"\"\n        self.product1.product_tmpl_id.cost_method = 'average'\n        po1 = self.env['purchase.order'].create({\n            'partner_id': self.partner_id.id,\n            'order_line': [\n                (0, 0, {\n                    'name': self.product1.name,\n                    'product_id': self.product1.id,\n                    'product_qty': 10.0,\n                    'product_uom': self.product1.uom_po_id.id,\n                    'price_unit': 100.0,\n                    'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT),\n                }),\n            ],\n        })\n        po1.button_confirm()\n\n        picking1 = po1.picking_ids[0]\n        move1 = picking1.move_lines[0]\n\n        # the unit price of the purchase order line is copied to the in move\n        self.assertEquals(move1.price_unit, 100)\n\n        # update the unit price on the purchase order line\n        po1.order_line.price_unit = 200\n\n        # the unit price on the stock move is not directly updated\n        self.assertEquals(move1.price_unit, 100)\n\n        # validate the receipt\n        res_dict = picking1.button_validate()\n        wizard = self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id'))\n        wizard.process()\n\n        # the unit price of the stock move has been updated to the latest value\n        self.assertEquals(move1.price_unit, 200)\n\n        self.assertEquals(self.product1.stock_value, 2000)\n\n    def test_standard_price_change_1(self):\n        \"\"\" Confirm a purchase order and create the associated receipt, change the unit cost of the\n        purchase order and the standard price of the product before validating the receipt, the\n        value of the received goods should be set according to the last standard price.\n        \"\"\"\n        self.product1.product_tmpl_id.cost_method = 'standard'\n\n        # set a standard price\n        self.product1.product_tmpl_id.standard_price = 10\n\n        po1 = self.env['purchase.order'].create({\n            'partner_id': self.partner_id.id,\n            'order_line': [\n                (0, 0, {\n                    'name': self.product1.name,\n                    'product_id': self.product1.id,\n                    'product_qty': 10.0,\n                    'product_uom': self.product1.uom_po_id.id,\n                    'price_unit': 11.0,\n                    'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT),\n                }),\n            ],\n        })\n        po1.button_confirm()\n\n        picking1 = po1.picking_ids[0]\n        move1 = picking1.move_lines[0]\n\n        # the move's unit price reflects the purchase order line's cost even if it's useless when\n        # the product's cost method is standard\n        self.assertEquals(move1.price_unit, 11)\n\n        # set a new standard price\n        self.product1.product_tmpl_id.standard_price = 12\n\n        # the unit price on the stock move is not directly updated\n        self.assertEquals(move1.price_unit, 11)\n\n        # validate the receipt\n        res_dict = picking1.button_validate()\n        wizard = self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id'))\n        wizard.process()\n\n        # the unit price of the stock move has been updated to the latest value\n        self.assertEquals(move1.price_unit, 12)\n\n        self.assertEquals(self.product1.stock_value, 120)\n\n    def test_change_currency_rate_average_1(self):\n        \"\"\" Confirm a purchase order in another currency and create the associated receipt, change\n        the currency rate, validate the receipt and then check that the value of the received goods\n        is set according to the last currency rate.\n        \"\"\"\n        usd_currency = self.env.ref('base.USD')\n        self.env.user.company_id.currency_id = usd_currency.id\n\n        eur_currency = self.env.ref('base.EUR')\n\n        self.product1.product_tmpl_id.cost_method = 'average'\n\n        # default currency is USD, create a purchase order in EUR\n        po1 = self.env['purchase.order'].create({\n            'partner_id': self.partner_id.id,\n            'currency_id': eur_currency.id,\n            'order_line': [\n                (0, 0, {\n                    'name': self.product1.name,\n                    'product_id': self.product1.id,\n                    'product_qty': 10.0,\n                    'product_uom': self.product1.uom_po_id.id,\n                    'price_unit': 100.0,\n                    'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT),\n                }),\n            ],\n        })\n        po1.button_confirm()\n\n        picking1 = po1.picking_ids[0]\n        move1 = picking1.move_lines[0]\n\n        # convert the price unit in the company currency\n        price_unit_usd = po1.currency_id.compute(po1.order_line.price_unit, po1.company_id.currency_id, round=True)\n\n        # the unit price of the move is the unit price of the purchase order line converted in\n        # the company's currency\n        self.assertAlmostEqual(move1.price_unit, price_unit_usd)\n\n        # change the rate of the currency\n        self.env['res.currency.rate'].create({\n            'name': time.strftime('%Y-%m-%d'),\n            'rate': 2.0,\n            'currency_id': eur_currency.id,\n            'company_id': po1.company_id.id,\n        })\n        eur_currency._compute_current_rate()\n        price_unit_usd_new_rate = po1.currency_id.compute(po1.order_line.price_unit, po1.company_id.currency_id, round=True)\n\n        # the new price_unit is lower than th initial because of the rate's change\n        self.assertLess(price_unit_usd_new_rate, price_unit_usd)\n\n        # the unit price on the stock move is not directly updated\n        self.assertAlmostEqual(move1.price_unit, price_unit_usd)\n\n        # validate the receipt\n        res_dict = picking1.button_validate()\n        wizard = self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id'))\n        wizard.process()\n\n        # the unit price of the stock move has been updated to the latest value\n        self.assertEquals(move1.price_unit, price_unit_usd_new_rate)\n\n        self.assertAlmostEqual(self.product1.stock_value, price_unit_usd_new_rate * 10, delta=0.1)\n\n    def test_extra_move_fifo_1(self):\n        \"\"\" Check that the extra move when over processing a receipt is correctly merged back in\n        the original move.\n        \"\"\"\n        self.product1.product_tmpl_id.cost_method = 'fifo'\n        po1 = self.env['purchase.order'].create({\n            'partner_id': self.partner_id.id,\n            'order_line': [\n                (0, 0, {\n                    'name': self.product1.name,\n                    'product_id': self.product1.id,\n                    'product_qty': 10.0,\n                    'product_uom': self.product1.uom_po_id.id,\n                    'price_unit': 100.0,\n                    'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT),\n                }),\n            ],\n        })\n        po1.button_confirm()\n\n        picking1 = po1.picking_ids[0]\n        move1 = picking1.move_lines[0]\n        move1.quantity_done = 15\n        res_dict = picking1.button_validate()\n        self.assertEqual(res_dict['res_model'], 'stock.overprocessed.transfer')\n        wizard = self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id'))\n        wizard.action_confirm()\n\n        # there should be only one move\n        self.assertEqual(len(picking1.move_lines), 1)\n        self.assertEqual(move1.price_unit, 100)\n        self.assertEqual(move1.product_qty, 15)\n        self.assertEqual(self.product1.stock_value, 1500)\n\n    def test_backorder_fifo_1(self):\n        \"\"\" Check that the backordered move when under processing a receipt correctly keep the\n        price unit of the original move.\n        \"\"\"\n        self.product1.product_tmpl_id.cost_method = 'fifo'\n        po1 = self.env['purchase.order'].create({\n            'partner_id': self.partner_id.id,\n            'order_line': [\n                (0, 0, {\n                    'name': self.product1.name,\n                    'product_id': self.product1.id,\n                    'product_qty': 10.0,\n                    'product_uom': self.product1.uom_po_id.id,\n                    'price_unit': 100.0,\n                    'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT),\n                }),\n            ],\n        })\n        po1.button_confirm()\n\n        picking1 = po1.picking_ids[0]\n        move1 = picking1.move_lines[0]\n        move1.quantity_done = 5\n        res_dict = picking1.button_validate()\n        self.assertEqual(res_dict['res_model'], 'stock.backorder.confirmation')\n        wizard = self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id'))\n        wizard.process()\n\n        self.assertEqual(len(picking1.move_lines), 1)\n        self.assertEqual(move1.price_unit, 100)\n        self.assertEqual(move1.product_qty, 5)\n\n        picking2 = po1.picking_ids.filtered(lambda p: p.backorder_id)\n        move2 = picking2.move_lines[0]\n        self.assertEqual(len(picking2.move_lines), 1)\n        self.assertEqual(move2.price_unit, 100)\n        self.assertEqual(move2.product_qty, 5)\n\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_stockvaluation.py", "id": "9b9f8fef5b869e09e92b4285de6d6291", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/purchase/tests/test_stockvaluation.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}