{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom sentry.utils.types import (\n    InvalidTypeError,\n    Any,\n    Bool,\n    Int,\n    Float,\n    String,\n    Dict,\n    Sequence,\n)\nfrom sentry.testutils import TestCase\n\n\nclass OptionsTypesTest(TestCase):\n    def test_any(self):\n        assert Any('foo') == 'foo'\n        assert Any(1) == 1\n        assert Any(None) is None\n        assert Any() is None\n        assert Any.test(None)\n        assert Any.test('foo')\n        assert Any.test('bar')\n\n    def test_bool(self):\n        assert Bool(True) is True\n        assert Bool(1) is True\n        assert Bool('y') is True\n        assert Bool('YES') is True\n        assert Bool('t') is True\n        assert Bool('true') is True\n        assert Bool('1') is True\n        assert Bool('on') is True\n        assert Bool(False) is False\n        assert Bool(0) is False\n        assert Bool('n') is False\n        assert Bool('NO') is False\n        assert Bool('f') is False\n        assert Bool('false') is False\n        assert Bool('0') is False\n        assert Bool('off') is False\n        assert Bool() is False\n        assert Bool.test(None) is False\n        assert Bool(True) is True\n        assert Bool.test('foo') is False\n        with self.assertRaises(InvalidTypeError):\n            Bool('foo')\n\n    def test_int(self):\n        assert Int(1) == 1\n        assert Int('1') == 1\n        assert Int('-1') == -1\n        assert Int() == 0\n        with self.assertRaises(InvalidTypeError):\n            Int('foo')\n        with self.assertRaises(InvalidTypeError):\n            Int('1.1')\n\n    def test_float(self):\n        assert Float(1.0) == 1.0\n        assert Float('1') == 1.0\n        assert Float('-1.1') == -1.1\n        assert Float(1) == 1.0\n        assert Float() == 0.0\n        with self.assertRaises(InvalidTypeError):\n            Float('foo')\n\n    def test_string(self):\n        assert String('foo') == 'foo'\n        assert String(u'foo') == u'foo'\n        assert String() == u''\n        with self.assertRaises(InvalidTypeError):\n            String(0)\n\n    def test_dict(self):\n        assert Dict({}) == {}\n        assert Dict({'foo': 'bar'}) == {'foo': 'bar'}\n        assert Dict('{foo: bar}') == {'foo': 'bar'}\n        assert Dict() == {}\n        with self.assertRaises(InvalidTypeError):\n            assert Dict('[]')\n        with self.assertRaises(InvalidTypeError):\n            assert Dict([])\n        with self.assertRaises(InvalidTypeError):\n            assert Dict('')\n        with self.assertRaises(InvalidTypeError):\n            \n            assert Dict('{foo:bar}')\n\n    def test_sequence(self):\n        assert Sequence(()) == ()\n        assert Sequence([]) == []\n        assert Sequence((1, 2, 3)) == (1, 2, 3)\n        assert Sequence([1, 2, 3]) == [1, 2, 3]\n        assert Sequence('[1,2,3]') == (1, 2, 3)\n        with self.assertRaises(InvalidTypeError):\n            Sequence('{}')\n        with self.assertRaises(InvalidTypeError):\n            Sequence({})\n        with self.assertRaises(InvalidTypeError):\n            Sequence('')\n        with self.assertRaises(InvalidTypeError):\n            \n            Sequence('[1,')\n", "comments": "      coding  utf 8        malformed yaml json    malformed yaml json ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom sentry.utils.types import (\n    InvalidTypeError,\n    Any,\n    Bool,\n    Int,\n    Float,\n    String,\n    Dict,\n    Sequence,\n)\nfrom sentry.testutils import TestCase\n\n\nclass OptionsTypesTest(TestCase):\n    def test_any(self):\n        assert Any('foo') == 'foo'\n        assert Any(1) == 1\n        assert Any(None) is None\n        assert Any() is None\n        assert Any.test(None)\n        assert Any.test('foo')\n        assert Any.test('bar')\n\n    def test_bool(self):\n        assert Bool(True) is True\n        assert Bool(1) is True\n        assert Bool('y') is True\n        assert Bool('YES') is True\n        assert Bool('t') is True\n        assert Bool('true') is True\n        assert Bool('1') is True\n        assert Bool('on') is True\n        assert Bool(False) is False\n        assert Bool(0) is False\n        assert Bool('n') is False\n        assert Bool('NO') is False\n        assert Bool('f') is False\n        assert Bool('false') is False\n        assert Bool('0') is False\n        assert Bool('off') is False\n        assert Bool() is False\n        assert Bool.test(None) is False\n        assert Bool(True) is True\n        assert Bool.test('foo') is False\n        with self.assertRaises(InvalidTypeError):\n            Bool('foo')\n\n    def test_int(self):\n        assert Int(1) == 1\n        assert Int('1') == 1\n        assert Int('-1') == -1\n        assert Int() == 0\n        with self.assertRaises(InvalidTypeError):\n            Int('foo')\n        with self.assertRaises(InvalidTypeError):\n            Int('1.1')\n\n    def test_float(self):\n        assert Float(1.0) == 1.0\n        assert Float('1') == 1.0\n        assert Float('-1.1') == -1.1\n        assert Float(1) == 1.0\n        assert Float() == 0.0\n        with self.assertRaises(InvalidTypeError):\n            Float('foo')\n\n    def test_string(self):\n        assert String('foo') == 'foo'\n        assert String(u'foo') == u'foo'\n        assert String() == u''\n        with self.assertRaises(InvalidTypeError):\n            String(0)\n\n    def test_dict(self):\n        assert Dict({}) == {}\n        assert Dict({'foo': 'bar'}) == {'foo': 'bar'}\n        assert Dict('{foo: bar}') == {'foo': 'bar'}\n        assert Dict() == {}\n        with self.assertRaises(InvalidTypeError):\n            assert Dict('[]')\n        with self.assertRaises(InvalidTypeError):\n            assert Dict([])\n        with self.assertRaises(InvalidTypeError):\n            assert Dict('')\n        with self.assertRaises(InvalidTypeError):\n            # malformed yaml/json\n            assert Dict('{foo:bar}')\n\n    def test_sequence(self):\n        assert Sequence(()) == ()\n        assert Sequence([]) == []\n        assert Sequence((1, 2, 3)) == (1, 2, 3)\n        assert Sequence([1, 2, 3]) == [1, 2, 3]\n        assert Sequence('[1,2,3]') == (1, 2, 3)\n        with self.assertRaises(InvalidTypeError):\n            Sequence('{}')\n        with self.assertRaises(InvalidTypeError):\n            Sequence({})\n        with self.assertRaises(InvalidTypeError):\n            Sequence('')\n        with self.assertRaises(InvalidTypeError):\n            # malformed yaml/json\n            Sequence('[1,')\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_types.py", "id": "0aae67d285ff70aa6871700fe54706a8", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/test_types.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}