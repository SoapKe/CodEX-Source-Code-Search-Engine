{"author": "ansible", "code": "\n\"\"\" PN CLI cluster-create/cluster-delete \"\"\"\n\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_cluster\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to create/delete a cluster.\ndescription:\n  - Execute cluster-create or cluster-delete command.\n  - A cluster allows two switches to cooperate in high-availability (HA)\n    deployments. The nodes that form the cluster must be members of the same\n    fabric. Clusters are typically used in conjunction with a virtual link\n    aggregation group (VLAG) that allows links physically connected to two\n    separate switches appear as a single trunk to a third device. The third\n    device can be a switch,server, or any Ethernet device.\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch to run the cli on.\n    required: False\n  state:\n    description:\n      - Specify action to perform. Use 'present' to create cluster and 'absent'\n        to delete cluster.\n    required: true\n    choices: ['present', 'absent']\n  pn_name:\n    description:\n      - Specify the name of the cluster.\n    required: true\n  pn_cluster_node1:\n    description:\n      - Specify the name of the first switch in the cluster.\n      - Required for 'cluster-create'.\n  pn_cluster_node2:\n    description:\n      - Specify the name of the second switch in the cluster.\n      - Required for 'cluster-create'.\n  pn_validate:\n    description:\n      - Validate the inter-switch links and state of switches in the cluster.\n    choices: ['validate', 'no-validate']\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: create spine cluster\n  pn_cluster:\n    state: 'present'\n    pn_name: 'spine-cluster'\n    pn_cluster_node1: 'spine01'\n    pn_cluster_node2: 'spine02'\n    pn_validate: validate\n    pn_quiet: True\n\n- name: delete spine cluster\n  pn_cluster:\n    state: 'absent'\n    pn_name: 'spine-cluster'\n    pn_quiet: True\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the cluster command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the cluster command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\nNAME_EXISTS = None\nNODE1_EXISTS = None\nNODE2_EXISTS = None\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch == 'local':\n        cli += ' switch-local '\n    else:\n        cli += ' switch ' + cliswitch\n    return cli\n\n\ndef check_cli(module, cli):\n    \"\"\"\n    This method checks for idempotency using the cluster-show command.\n    If a cluster with given name exists, return NAME_EXISTS as True else False.\n    If the given cluster-node-1 is already a part of another cluster, return\n    NODE1_EXISTS as True else False.\n    If the given cluster-node-2 is already a part of another cluster, return\n    NODE2_EXISTS as True else False.\n    :param module: The Ansible module to fetch input parameters\n    :param cli: The CLI string\n    :return Global Booleans: NAME_EXISTS, NODE1_EXISTS, NODE2_EXISTS\n    \"\"\"\n    name = module.params['pn_name']\n    node1 = module.params['pn_cluster_node1']\n    node2 = module.params['pn_cluster_node2']\n\n    show = cli + ' cluster-show  format name,cluster-node-1,cluster-node-2 '\n    show = shlex.split(show)\n    out = module.run_command(show)[1]\n\n    out = out.split()\n     Global flags\n    global NAME_EXISTS, NODE1_EXISTS, NODE2_EXISTS\n\n    if name in out:\n        NAME_EXISTS = True\n    else:\n        NAME_EXISTS = False\n    if node1 in out:\n        NODE1_EXISTS = True\n    else:\n        NODE2_EXISTS = False\n    if node2 in out:\n        NODE2_EXISTS = True\n    else:\n        NODE2_EXISTS = False\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    command = get_command_from_state(state)\n\n    cmd = shlex.split(cli)\n\n     'out' contains the output\n     'err' contains the error messages\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n     Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            stderr=err.strip(),\n            msg=\"%s operation failed\" % command,\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            stdout=out.strip(),\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n    else:\n        module.exit_json(\n            command=print_cli,\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'cluster-create'\n    if state == 'absent':\n        command = 'cluster-delete'\n    return command\n\n\ndef main():\n    \"\"\" This section is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=False, type='str'),\n            pn_clipassword=dict(required=False, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str', default='local'),\n            state=dict(required=True, type='str',\n                       choices=['present', 'absent']),\n            pn_name=dict(required=True, type='str'),\n            pn_cluster_node1=dict(type='str'),\n            pn_cluster_node2=dict(type='str'),\n            pn_validate=dict(type='bool')\n        ),\n        required_if=(\n            [\"state\", \"present\",\n             [\"pn_name\", \"pn_cluster_node1\", \"pn_cluster_node2\"]],\n            [\"state\", \"absent\", [\"pn_name\"]]\n        )\n    )\n\n     Accessing the parameters\n    state = module.params['state']\n    name = module.params['pn_name']\n    cluster_node1 = module.params['pn_cluster_node1']\n    cluster_node2 = module.params['pn_cluster_node2']\n    validate = module.params['pn_validate']\n\n    command = get_command_from_state(state)\n\n     Building the CLI command string\n    cli = pn_cli(module)\n\n    if command == 'cluster-create':\n\n        check_cli(module, cli)\n\n        if NAME_EXISTS is True:\n            module.exit_json(\n                skipped=True,\n                msg='Cluster with name %s already exists' % name\n            )\n        if NODE1_EXISTS is True:\n            module.exit_json(\n                skipped=True,\n                msg='Node %s already part of a cluster' % cluster_node1\n            )\n        if NODE2_EXISTS is True:\n            module.exit_json(\n                skipped=True,\n                msg='Node %s already part of a cluster' % cluster_node2\n            )\n\n        cli += ' %s name %s ' % (command, name)\n        cli += 'cluster-node-1 %s cluster-node-2 %s ' % (cluster_node1,\n                                                         cluster_node2)\n        if validate is True:\n            cli += ' validate '\n        if validate is False:\n            cli += ' no-validate '\n\n    if command == 'cluster-delete':\n\n        check_cli(module, cli)\n\n        if NAME_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='Cluster with name %s does not exist' % name\n            )\n        cli += ' %s name %s ' % (command, name)\n\n    run_cli(module, cli)\n\n AnsibleModule boilerplate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "comments": "    pn cli cluster create cluster delete          this file part ansible     ansible free software  redistribute modify   terms gnu general public license published   free software foundation  either version 3 license    (at option) later version      ansible distributed hope useful    without any warranty  without even implied warranty   merchantability fitness for a particular purpose   see   gnu general public license details      you received copy gnu general public license   along ansible   if  see  http   www gnu org licenses       ansible metadata     metadata version    1 1                        status     preview                         supported    community     documentation           module  pn cluster author   pluribus networks ( amitsi)  version added   2 2  short description  cli command create delete cluster  description      execute cluster create cluster delete command      a cluster allows two switches cooperate high availability (ha)     deployments  the nodes form cluster must members     fabric  clusters typically used conjunction virtual link     aggregation group (vlag) allows links physically connected two     separate switches appear single trunk third device  the third     device switch server  ethernet device  options    pn cliusername      description          provide login username user root      required  false   pn clipassword      description          provide login password user root      required  false   pn cliswitch      description          target switch run cli      required  false   state      description          specify action perform  use  present  create cluster  absent          delete cluster      required  true     choices    present    absent     pn name      description          specify name cluster      required  true   pn cluster node1      description          specify name first switch cluster          required  cluster create     pn cluster node2      description          specify name second switch cluster          required  cluster create     pn validate      description          validate inter switch links state switches cluster      choices    validate    validate        examples         name  create spine cluster   pn cluster      state   present      pn name   spine cluster      pn cluster node1   spine01      pn cluster node2   spine02      pn validate  validate     pn quiet  true    name  delete spine cluster   pn cluster      state   absent      pn name   spine cluster      pn quiet  true      return       command    description  the cli command run target node(s)    returned  always   type  str stdout    description  the set responses cluster command    returned  always   type  list stderr    description  the set error responses cluster command    returned  error   type  list changed    description  indicates whether cli caused changes target    returned  always   type  bool      import shlex  name exists   none node1 exists   none node2 exists   none   def pn cli(module)              this method generate cli portion launch netvisor cli      it parses username  password  switch parameters module       param module  the ansible module fetch username  password switch      return  returns cli string processing             username   module params  pn cliusername       password   module params  pn clipassword       cliswitch   module params  pn cliswitch        username password          cli     usr bin cli   quiet   user       (username  password)     else          cli     usr bin cli   quiet        cliswitch     local           cli      switch local       else          cli      switch     cliswitch     return cli   def check cli(module  cli)              this method checks idempotency using cluster show command      if cluster given name exists  return name exists true else false      if given cluster node 1 already part another cluster  return     node1 exists true else false      if given cluster node 2 already part another cluster  return     node2 exists true else false       param module  the ansible module fetch input parameters      param cli  the cli string      return global booleans  name exists  node1 exists  node2 exists             name   module params  pn name       node1   module params  pn cluster node1       node2   module params  pn cluster node2        show   cli     cluster show  format name cluster node 1 cluster node 2       show   shlex split(show)       module run command(show) 1         split()       global flags     global name exists  node1 exists  node2 exists      name          name exists   true     else          name exists   false     node1          node1 exists   true     else          node2 exists   false     node2          node2 exists   true     else          node2 exists   false   def run cli(module  cli)              this method executes cli command target node(s) returns     output  the module exits based output       param cli  complete cli string executed target node(s)       param module  the ansible module fetch command             cliswitch   module params  pn cliswitch       state   module params  state       command   get command state(state)      cmd   shlex split(cli)          contains output        err  contains error messages     result   err   module run command(cmd)      print cli   cli split(cliswitch) 1         response json format     result    0          module exit json(             command print cli              stderr err strip()              msg   operation failed    command              changed false         )               module exit json(             command print cli              stdout strip()              msg   operation completed    command              changed true         )      else          module exit json(             command print cli              msg   operation completed    command              changed true         )   def get command state(state)              this method gets appropriate command name state specified  it     returns command name specified state       param state  the state respective command name required              command   none     state     present           command    cluster create      state     absent           command    cluster delete      return command   def main()          this section arguments parsing         usr bin python       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          global flags      contains output     err  contains error messages    response json format    accessing parameters    building cli command string    ansiblemodule boilerplate ", "content": "#!/usr/bin/python\n\"\"\" PN CLI cluster-create/cluster-delete \"\"\"\n\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_cluster\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to create/delete a cluster.\ndescription:\n  - Execute cluster-create or cluster-delete command.\n  - A cluster allows two switches to cooperate in high-availability (HA)\n    deployments. The nodes that form the cluster must be members of the same\n    fabric. Clusters are typically used in conjunction with a virtual link\n    aggregation group (VLAG) that allows links physically connected to two\n    separate switches appear as a single trunk to a third device. The third\n    device can be a switch,server, or any Ethernet device.\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch to run the cli on.\n    required: False\n  state:\n    description:\n      - Specify action to perform. Use 'present' to create cluster and 'absent'\n        to delete cluster.\n    required: true\n    choices: ['present', 'absent']\n  pn_name:\n    description:\n      - Specify the name of the cluster.\n    required: true\n  pn_cluster_node1:\n    description:\n      - Specify the name of the first switch in the cluster.\n      - Required for 'cluster-create'.\n  pn_cluster_node2:\n    description:\n      - Specify the name of the second switch in the cluster.\n      - Required for 'cluster-create'.\n  pn_validate:\n    description:\n      - Validate the inter-switch links and state of switches in the cluster.\n    choices: ['validate', 'no-validate']\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: create spine cluster\n  pn_cluster:\n    state: 'present'\n    pn_name: 'spine-cluster'\n    pn_cluster_node1: 'spine01'\n    pn_cluster_node2: 'spine02'\n    pn_validate: validate\n    pn_quiet: True\n\n- name: delete spine cluster\n  pn_cluster:\n    state: 'absent'\n    pn_name: 'spine-cluster'\n    pn_quiet: True\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the cluster command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the cluster command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\nNAME_EXISTS = None\nNODE1_EXISTS = None\nNODE2_EXISTS = None\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch == 'local':\n        cli += ' switch-local '\n    else:\n        cli += ' switch ' + cliswitch\n    return cli\n\n\ndef check_cli(module, cli):\n    \"\"\"\n    This method checks for idempotency using the cluster-show command.\n    If a cluster with given name exists, return NAME_EXISTS as True else False.\n    If the given cluster-node-1 is already a part of another cluster, return\n    NODE1_EXISTS as True else False.\n    If the given cluster-node-2 is already a part of another cluster, return\n    NODE2_EXISTS as True else False.\n    :param module: The Ansible module to fetch input parameters\n    :param cli: The CLI string\n    :return Global Booleans: NAME_EXISTS, NODE1_EXISTS, NODE2_EXISTS\n    \"\"\"\n    name = module.params['pn_name']\n    node1 = module.params['pn_cluster_node1']\n    node2 = module.params['pn_cluster_node2']\n\n    show = cli + ' cluster-show  format name,cluster-node-1,cluster-node-2 '\n    show = shlex.split(show)\n    out = module.run_command(show)[1]\n\n    out = out.split()\n    # Global flags\n    global NAME_EXISTS, NODE1_EXISTS, NODE2_EXISTS\n\n    if name in out:\n        NAME_EXISTS = True\n    else:\n        NAME_EXISTS = False\n    if node1 in out:\n        NODE1_EXISTS = True\n    else:\n        NODE2_EXISTS = False\n    if node2 in out:\n        NODE2_EXISTS = True\n    else:\n        NODE2_EXISTS = False\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    command = get_command_from_state(state)\n\n    cmd = shlex.split(cli)\n\n    # 'out' contains the output\n    # 'err' contains the error messages\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n    # Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            stderr=err.strip(),\n            msg=\"%s operation failed\" % command,\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            stdout=out.strip(),\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n    else:\n        module.exit_json(\n            command=print_cli,\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'cluster-create'\n    if state == 'absent':\n        command = 'cluster-delete'\n    return command\n\n\ndef main():\n    \"\"\" This section is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=False, type='str'),\n            pn_clipassword=dict(required=False, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str', default='local'),\n            state=dict(required=True, type='str',\n                       choices=['present', 'absent']),\n            pn_name=dict(required=True, type='str'),\n            pn_cluster_node1=dict(type='str'),\n            pn_cluster_node2=dict(type='str'),\n            pn_validate=dict(type='bool')\n        ),\n        required_if=(\n            [\"state\", \"present\",\n             [\"pn_name\", \"pn_cluster_node1\", \"pn_cluster_node2\"]],\n            [\"state\", \"absent\", [\"pn_name\"]]\n        )\n    )\n\n    # Accessing the parameters\n    state = module.params['state']\n    name = module.params['pn_name']\n    cluster_node1 = module.params['pn_cluster_node1']\n    cluster_node2 = module.params['pn_cluster_node2']\n    validate = module.params['pn_validate']\n\n    command = get_command_from_state(state)\n\n    # Building the CLI command string\n    cli = pn_cli(module)\n\n    if command == 'cluster-create':\n\n        check_cli(module, cli)\n\n        if NAME_EXISTS is True:\n            module.exit_json(\n                skipped=True,\n                msg='Cluster with name %s already exists' % name\n            )\n        if NODE1_EXISTS is True:\n            module.exit_json(\n                skipped=True,\n                msg='Node %s already part of a cluster' % cluster_node1\n            )\n        if NODE2_EXISTS is True:\n            module.exit_json(\n                skipped=True,\n                msg='Node %s already part of a cluster' % cluster_node2\n            )\n\n        cli += ' %s name %s ' % (command, name)\n        cli += 'cluster-node-1 %s cluster-node-2 %s ' % (cluster_node1,\n                                                         cluster_node2)\n        if validate is True:\n            cli += ' validate '\n        if validate is False:\n            cli += ' no-validate '\n\n    if command == 'cluster-delete':\n\n        check_cli(module, cli)\n\n        if NAME_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='Cluster with name %s does not exist' % name\n            )\n        cli += ' %s name %s ' % (command, name)\n\n    run_cli(module, cli)\n\n# AnsibleModule boilerplate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "pn_cluster.py", "id": "c091bd48f0b94a06ba9f6f2badca6a0e", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/netvisor/pn_cluster.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}