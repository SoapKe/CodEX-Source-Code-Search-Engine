{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2016, Gregory Shulov (gregory.shulov@gmail.com)\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: infini_fs\nversion_added: 2.3\nshort_description:  Create, Delete or Modify filesystems on Infinibox\ndescription:\n    - This module creates, deletes or modifies filesystems on Infinibox.\nauthor: Gregory Shulov (@GR360RY)\noptions:\n  name:\n    description:\n      - File system name.\n    required: true\n  state:\n    description:\n      - Creates/Modifies file system when present or removes when absent.\n    required: false\n    default: present\n    choices: [ \"present\", \"absent\" ]\n  size:\n    description:\n      - File system size in MB, GB or TB units. See examples.\n    required: false\n  pool:\n    description:\n      - Pool that will host file system.\n    required: true\nextends_documentation_fragment:\n    - infinibox\nrequirements:\n    - capacity\n'''\n\nEXAMPLES = '''\n- name: Create new file system named foo under pool named bar\n  infini_fs:\n    name: foo\n    size: 1TB\n    pool: bar\n    state: present\n    user: admin\n    password: secret\n    system: ibox001\n'''\n\nRETURN = '''\n'''\n\ntry:\n    from capacity import KiB, Capacity\n    HAS_CAPACITY = True\nexcept ImportError:\n    HAS_CAPACITY = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.infinibox import HAS_INFINISDK, api_wrapper, get_system, infinibox_argument_spec\n\n\n@api_wrapper\ndef get_pool(module, system):\n    \"\"\"Return Pool or None\"\"\"\n    try:\n        return system.pools.get(name=module.params['pool'])\n    except:\n        return None\n\n\n@api_wrapper\ndef get_filesystem(module, system):\n    \"\"\"Return Filesystem or None\"\"\"\n    try:\n        return system.filesystems.get(name=module.params['name'])\n    except:\n        return None\n\n\n@api_wrapper\ndef create_filesystem(module, system):\n    \"\"\"Create Filesystem\"\"\"\n    if not module.check_mode:\n        filesystem = system.filesystems.create(name=module.params['name'], pool=get_pool(module, system))\n        if module.params['size']:\n            size = Capacity(module.params['size']).roundup(64 * KiB)\n            filesystem.update_size(size)\n    module.exit_json(changed=True)\n\n\n@api_wrapper\ndef update_filesystem(module, filesystem):\n    \"\"\"Update Filesystem\"\"\"\n    changed = False\n    if module.params['size']:\n        size = Capacity(module.params['size']).roundup(64 * KiB)\n        if filesystem.get_size() != size:\n            if not module.check_mode:\n                filesystem.update_size(size)\n            changed = True\n\n    module.exit_json(changed=changed)\n\n\n@api_wrapper\ndef delete_filesystem(module, filesystem):\n    \"\"\" Delete Filesystem\"\"\"\n    if not module.check_mode:\n        filesystem.delete()\n    module.exit_json(changed=True)\n\n\ndef main():\n    argument_spec = infinibox_argument_spec()\n    argument_spec.update(\n        dict(\n            name=dict(required=True),\n            state=dict(default='present', choices=['present', 'absent']),\n            pool=dict(required=True),\n            size=dict()\n        )\n    )\n\n    module = AnsibleModule(argument_spec, supports_check_mode=True)\n\n    if not HAS_INFINISDK:\n        module.fail_json(msg='infinisdk is required for this module')\n    if not HAS_CAPACITY:\n        module.fail_json(msg='The capacity python library is required for this module')\n\n    if module.params['size']:\n        try:\n            Capacity(module.params['size'])\n        except:\n            module.fail_json(msg='size (Physical Capacity) should be defined in MB, GB, TB or PB units')\n\n    state = module.params['state']\n    system = get_system(module)\n    pool = get_pool(module, system)\n    filesystem = get_filesystem(module, system)\n\n    if pool is None:\n        module.fail_json(msg='Pool {} not found'.format(module.params['pool']))\n\n    if state == 'present' and not filesystem:\n        create_filesystem(module, system)\n    elif state == 'present' and filesystem:\n        update_filesystem(module, filesystem)\n    elif state == 'absent' and filesystem:\n        delete_filesystem(module, filesystem)\n    elif state == 'absent' and not filesystem:\n        module.exit_json(changed=False)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "   return pool none        try          return system pools get(name module params  pool  )     except          return none    api wrapper def get filesystem(module  system)         return filesystem none        try          return system filesystems get(name module params  name  )     except          return none    api wrapper def create filesystem(module  system)         create filesystem        module check mode          filesystem   system filesystems create(name module params  name    pool get pool(module  system))         module params  size                size   capacity(module params  size  ) roundup(64   kib)             filesystem update size(size)     module exit json(changed true)    api wrapper def update filesystem(module  filesystem)         update filesystem        changed   false     module params  size            size   capacity(module params  size  ) roundup(64   kib)         filesystem get size()    size              module check mode                  filesystem update size(size)             changed   true      module exit json(changed changed)    api wrapper def delete filesystem(module  filesystem)          delete filesystem             module  infini fs version added  2 3 short description   create  delete modify filesystems infinibox description        this module creates  deletes modifies filesystems infinibox  author  gregory shulov ( gr360ry) options    name      description          file system name      required  true   state      description          creates modifies file system present removes absent      required  false     default  present     choices     present    absent      size      description          file system size mb  gb tb units  see examples      required  false   pool      description          pool host file system      required  true extends documentation fragment        infinibox requirements        capacity      examples         name  create new file system named foo pool named bar   infini fs      name  foo     size  1tb     pool  bar     state  present     user  admin     password  secret     system  ibox001      return               usr bin python        coding  utf 8        (c) 2016  gregory shulov (gregory shulov gmail com)    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2016, Gregory Shulov (gregory.shulov@gmail.com)\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: infini_fs\nversion_added: 2.3\nshort_description:  Create, Delete or Modify filesystems on Infinibox\ndescription:\n    - This module creates, deletes or modifies filesystems on Infinibox.\nauthor: Gregory Shulov (@GR360RY)\noptions:\n  name:\n    description:\n      - File system name.\n    required: true\n  state:\n    description:\n      - Creates/Modifies file system when present or removes when absent.\n    required: false\n    default: present\n    choices: [ \"present\", \"absent\" ]\n  size:\n    description:\n      - File system size in MB, GB or TB units. See examples.\n    required: false\n  pool:\n    description:\n      - Pool that will host file system.\n    required: true\nextends_documentation_fragment:\n    - infinibox\nrequirements:\n    - capacity\n'''\n\nEXAMPLES = '''\n- name: Create new file system named foo under pool named bar\n  infini_fs:\n    name: foo\n    size: 1TB\n    pool: bar\n    state: present\n    user: admin\n    password: secret\n    system: ibox001\n'''\n\nRETURN = '''\n'''\n\ntry:\n    from capacity import KiB, Capacity\n    HAS_CAPACITY = True\nexcept ImportError:\n    HAS_CAPACITY = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.infinibox import HAS_INFINISDK, api_wrapper, get_system, infinibox_argument_spec\n\n\n@api_wrapper\ndef get_pool(module, system):\n    \"\"\"Return Pool or None\"\"\"\n    try:\n        return system.pools.get(name=module.params['pool'])\n    except:\n        return None\n\n\n@api_wrapper\ndef get_filesystem(module, system):\n    \"\"\"Return Filesystem or None\"\"\"\n    try:\n        return system.filesystems.get(name=module.params['name'])\n    except:\n        return None\n\n\n@api_wrapper\ndef create_filesystem(module, system):\n    \"\"\"Create Filesystem\"\"\"\n    if not module.check_mode:\n        filesystem = system.filesystems.create(name=module.params['name'], pool=get_pool(module, system))\n        if module.params['size']:\n            size = Capacity(module.params['size']).roundup(64 * KiB)\n            filesystem.update_size(size)\n    module.exit_json(changed=True)\n\n\n@api_wrapper\ndef update_filesystem(module, filesystem):\n    \"\"\"Update Filesystem\"\"\"\n    changed = False\n    if module.params['size']:\n        size = Capacity(module.params['size']).roundup(64 * KiB)\n        if filesystem.get_size() != size:\n            if not module.check_mode:\n                filesystem.update_size(size)\n            changed = True\n\n    module.exit_json(changed=changed)\n\n\n@api_wrapper\ndef delete_filesystem(module, filesystem):\n    \"\"\" Delete Filesystem\"\"\"\n    if not module.check_mode:\n        filesystem.delete()\n    module.exit_json(changed=True)\n\n\ndef main():\n    argument_spec = infinibox_argument_spec()\n    argument_spec.update(\n        dict(\n            name=dict(required=True),\n            state=dict(default='present', choices=['present', 'absent']),\n            pool=dict(required=True),\n            size=dict()\n        )\n    )\n\n    module = AnsibleModule(argument_spec, supports_check_mode=True)\n\n    if not HAS_INFINISDK:\n        module.fail_json(msg='infinisdk is required for this module')\n    if not HAS_CAPACITY:\n        module.fail_json(msg='The capacity python library is required for this module')\n\n    if module.params['size']:\n        try:\n            Capacity(module.params['size'])\n        except:\n            module.fail_json(msg='size (Physical Capacity) should be defined in MB, GB, TB or PB units')\n\n    state = module.params['state']\n    system = get_system(module)\n    pool = get_pool(module, system)\n    filesystem = get_filesystem(module, system)\n\n    if pool is None:\n        module.fail_json(msg='Pool {} not found'.format(module.params['pool']))\n\n    if state == 'present' and not filesystem:\n        create_filesystem(module, system)\n    elif state == 'present' and filesystem:\n        update_filesystem(module, filesystem)\n    elif state == 'absent' and filesystem:\n        delete_filesystem(module, filesystem)\n    elif state == 'absent' and not filesystem:\n        module.exit_json(changed=False)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "infini_fs.py", "id": "918b8116d4cbffb41c1153b82e57fcd0", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/storage/infinidat/infini_fs.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}