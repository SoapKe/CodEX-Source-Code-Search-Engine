{"author": "ansible", "code": "\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n\n\n\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['stableinterface'],\n                    'supported_by': 'core'}\n\n\nDOCUMENTATION = '''\n---\nmodule: shell\nshort_description: Execute commands in nodes.\ndescription:\n     - The C(shell) module takes the command name followed by a list of space-delimited arguments.\n       It is almost exactly like the M(command) module but runs\n       the command through a shell (C(/bin/sh)) on the remote node.\n     - For Windows targets, use the M(win_shell) module instead.\nversion_added: \"0.2\"\noptions:\n  free_form:\n    description:\n      - The shell module takes a free form command to run, as a string.  There's not an actual\n        option named \"free form\".  See the examples!\n    required: true\n  creates:\n    description:\n      - a filename, when it already exists, this step will B(not) be run.\n  removes:\n    description:\n      - a filename, when it does not exist, this step will B(not) be run.\n    version_added: \"0.8\"\n  chdir:\n    description:\n      - cd into this directory before running the command\n    version_added: \"0.6\"\n  executable:\n    description:\n      - change the shell used to execute the command. Should be an absolute path to the executable.\n    version_added: \"0.9\"\n  warn:\n    description:\n      - if command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false.\n    type: bool\n    default: 'yes'\n    version_added: \"1.8\"\n  stdin:\n    version_added: \"2.4\"\n    description:\n      - Set the stdin of the command directly to the specified value.\nnotes:\n  -  If you want to execute a command securely and predictably, it may be\n     better to use the M(command) module instead. Best practices when writing\n     playbooks will follow the trend of using M(command) unless the C(shell)\n     module is explicitly required. When running ad-hoc commands, use your best\n     judgement.\n  -  To sanitize any variables passed to the shell module, you should use\n     \"{{ var | quote }}\" instead of just \"{{ var }}\" to make sure they don't include evil things like semicolons.\n  - For Windows targets, use the M(win_shell) module instead.\n  - Rather than using here documents to create multi-line scripts inside playbooks,\n    use the M(script) module instead.\nrequirements: [ ]\nauthor:\n    - Ansible Core Team\n    - Michael DeHaan\n'''\n\nEXAMPLES = '''\n- name: Execute the command in remote shell; stdout goes to the specified file on the remote.\n  shell: somescript.sh >> somelog.txt\n\n- name: Change the working directory to somedir/ before executing the command.\n  shell: somescript.sh >> somelog.txt\n  args:\n    chdir: somedir/\n\n\n- name: This command will change the working directory to somedir/ and will only run when somedir/somelog.txt doesn't exist.\n  shell: somescript.sh >> somelog.txt\n  args:\n    chdir: somedir/\n    creates: somelog.txt\n\n- name: Run a command that uses non-posix shell-isms (in this example /bin/sh doesn't handle redirection and wildcards together but bash does)\n  shell: cat < /tmp/*txt\n  args:\n    executable: /bin/bash\n\n- name: Run a command using a templated variable (always use quote filter to avoid injection)\n  shell: cat {{ myfile||\n    set timeout 300\n    spawn ssh admin@{{ cimc_host }}\n\n    expect \"password:\"\n    send \"{{ cimc_password }}\\\\n\"\n\n    expect \"\\\\n{{ cimc_name }}\"\n    send \"connect host\\\\n\"\n\n    expect \"pxeboot.n12\"\n    send \"\\\\n\"\n\n    exit 0\n  args:\n    executable: /usr/bin/expect\n  delegate_to: localhost\n'''\n\nRETURN = '''\nmsg:\n    description: changed\n    returned: always\n    type: boolean\n    sample: True\nstart:\n    description: The command execution start time\n    returned: always\n    type: string\n    sample: '2016-02-25 09:18:26.429568'\nend:\n    description: The command execution end time\n    returned: always\n    type: string\n    sample: '2016-02-25 09:18:26.755339'\ndelta:\n    description: The command execution delta time\n    returned: always\n    type: string\n    sample: '0:00:00.325771'\nstdout:\n    description: The command standard output\n    returned: always\n    type: string\n    sample: 'Clustering node rabbit@slave1 with rabbit@master ...'\nstderr:\n    description: The command standard error\n    returned: always\n    type: string\n    sample: 'ls: cannot access foo: No such file or directory'\ncmd:\n    description: The command executed by the task\n    returned: always\n    type: string\n    sample: 'rabbitmqctl join_cluster rabbit@master'\nrc:\n    description: The command return code (0 means success)\n    returned: always\n    type: int\n    sample: 0\nstdout_lines:\n    description: The command standard output split in lines\n    returned: always\n    type: list\n    sample: [u'Clustering node rabbit@slave1 with rabbit@master ...']\n'''\n", "comments": "        module  shell short description  execute commands nodes  description         the c(shell) module takes command name followed list space delimited arguments         it almost exactly like m(command) module runs        command shell (c( bin sh)) remote node         for windows targets  use m(win shell) module instead  version added   0 2  options    free form      description          the shell module takes free form command run  string   there actual         option named  free form    see examples      required  true   creates      description          filename  already exists  step b(not) run    removes      description          filename  exist  step b(not) run      version added   0 8    chdir      description          cd directory running command     version added   0 6    executable      description          change shell used execute command  should absolute path executable      version added   0 9    warn      description          command warnings ansible cfg  warn particular line set false      type  bool     default   yes      version added   1 8    stdin      version added   2 4      description          set stdin command directly specified value  notes       if want execute command securely predictably  may      better use m(command) module instead  best practices writing      playbooks follow trend using m(command) unless c(shell)      module explicitly required  when running ad hoc commands  use best      judgement       to sanitize variables passed shell module  use          var   quote     instead     var     make sure include evil things like semicolons      for windows targets  use m(win shell) module instead      rather using documents create multi line scripts inside playbooks      use m(script) module instead  requirements      author        ansible core team       michael dehaan      examples         name  execute command remote shell  stdout goes specified file remote    shell  somescript sh    somelog txt    name  change working directory somedir  executing command    shell  somescript sh    somelog txt   args      chdir  somedir     you also use  args  form provide options    name  this command change working directory somedir  run somedir somelog txt exist    shell  somescript sh    somelog txt   args      chdir  somedir      creates  somelog txt    name  run command uses non posix shell isms (in example  bin sh handle redirection wildcards together bash does)   shell  cat    tmp  txt   args      executable   bin bash    name  run command using templated variable (always use quote filter avoid injection)   shell  cat    myfile quote       you use shell run executables perform actions inline   name  run expect wait successful pxe boot via band cimc   shell        set timeout 300     spawn ssh admin    cimc host         expect  password       send     cimc password     n       expect    n   cimc name         send  connect host  n       expect  pxeboot n12      send    n       exit 0   args      executable   usr bin expect   delegate  localhost      return       msg      description  changed     returned  always     type  boolean     sample  true start      description  the command execution start time     returned  always     type  string     sample   2016 02 25 09 18 26 429568  end      description  the command execution end time     returned  always     type  string     sample   2016 02 25 09 18 26 755339  delta      description  the command execution delta time     returned  always     type  string     sample   0 00 00 325771  stdout      description  the command standard output     returned  always     type  string     sample   clustering node rabbit slave1 rabbit master      stderr      description  the command standard error     returned  always     type  string     sample   ls  cannot access foo  no file directory  cmd      description  the command executed task     returned  always     type  string     sample   rabbitmqctl join cluster rabbit master  rc      description  the command return code (0 means success)     returned  always     type  int     sample  0 stdout lines      description  the command standard output split lines     returned  always     type  list     sample   u clustering node rabbit slave1 rabbit master              copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)      there actual shell module source  use  shell  ansible     runs  command  module special arguments behaves differently     see command source comment   use shell      you also use  args  form provide options  ", "content": "# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n# # There is no actual shell module source, when you use 'shell' in ansible,\n# it runs the 'command' module with special arguments and it behaves differently.\n# See the command source and the comment \"#USE_SHELL\".\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['stableinterface'],\n                    'supported_by': 'core'}\n\n\nDOCUMENTATION = '''\n---\nmodule: shell\nshort_description: Execute commands in nodes.\ndescription:\n     - The C(shell) module takes the command name followed by a list of space-delimited arguments.\n       It is almost exactly like the M(command) module but runs\n       the command through a shell (C(/bin/sh)) on the remote node.\n     - For Windows targets, use the M(win_shell) module instead.\nversion_added: \"0.2\"\noptions:\n  free_form:\n    description:\n      - The shell module takes a free form command to run, as a string.  There's not an actual\n        option named \"free form\".  See the examples!\n    required: true\n  creates:\n    description:\n      - a filename, when it already exists, this step will B(not) be run.\n  removes:\n    description:\n      - a filename, when it does not exist, this step will B(not) be run.\n    version_added: \"0.8\"\n  chdir:\n    description:\n      - cd into this directory before running the command\n    version_added: \"0.6\"\n  executable:\n    description:\n      - change the shell used to execute the command. Should be an absolute path to the executable.\n    version_added: \"0.9\"\n  warn:\n    description:\n      - if command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false.\n    type: bool\n    default: 'yes'\n    version_added: \"1.8\"\n  stdin:\n    version_added: \"2.4\"\n    description:\n      - Set the stdin of the command directly to the specified value.\nnotes:\n  -  If you want to execute a command securely and predictably, it may be\n     better to use the M(command) module instead. Best practices when writing\n     playbooks will follow the trend of using M(command) unless the C(shell)\n     module is explicitly required. When running ad-hoc commands, use your best\n     judgement.\n  -  To sanitize any variables passed to the shell module, you should use\n     \"{{ var | quote }}\" instead of just \"{{ var }}\" to make sure they don't include evil things like semicolons.\n  - For Windows targets, use the M(win_shell) module instead.\n  - Rather than using here documents to create multi-line scripts inside playbooks,\n    use the M(script) module instead.\nrequirements: [ ]\nauthor:\n    - Ansible Core Team\n    - Michael DeHaan\n'''\n\nEXAMPLES = '''\n- name: Execute the command in remote shell; stdout goes to the specified file on the remote.\n  shell: somescript.sh >> somelog.txt\n\n- name: Change the working directory to somedir/ before executing the command.\n  shell: somescript.sh >> somelog.txt\n  args:\n    chdir: somedir/\n\n# You can also use the 'args' form to provide the options.\n- name: This command will change the working directory to somedir/ and will only run when somedir/somelog.txt doesn't exist.\n  shell: somescript.sh >> somelog.txt\n  args:\n    chdir: somedir/\n    creates: somelog.txt\n\n- name: Run a command that uses non-posix shell-isms (in this example /bin/sh doesn't handle redirection and wildcards together but bash does)\n  shell: cat < /tmp/*txt\n  args:\n    executable: /bin/bash\n\n- name: Run a command using a templated variable (always use quote filter to avoid injection)\n  shell: cat {{ myfile|quote }}\n\n# You can use shell to run other executables to perform actions inline\n- name: Run expect to wait for a successful PXE boot via out-of-band CIMC\n  shell: |\n    set timeout 300\n    spawn ssh admin@{{ cimc_host }}\n\n    expect \"password:\"\n    send \"{{ cimc_password }}\\\\n\"\n\n    expect \"\\\\n{{ cimc_name }}\"\n    send \"connect host\\\\n\"\n\n    expect \"pxeboot.n12\"\n    send \"\\\\n\"\n\n    exit 0\n  args:\n    executable: /usr/bin/expect\n  delegate_to: localhost\n'''\n\nRETURN = '''\nmsg:\n    description: changed\n    returned: always\n    type: boolean\n    sample: True\nstart:\n    description: The command execution start time\n    returned: always\n    type: string\n    sample: '2016-02-25 09:18:26.429568'\nend:\n    description: The command execution end time\n    returned: always\n    type: string\n    sample: '2016-02-25 09:18:26.755339'\ndelta:\n    description: The command execution delta time\n    returned: always\n    type: string\n    sample: '0:00:00.325771'\nstdout:\n    description: The command standard output\n    returned: always\n    type: string\n    sample: 'Clustering node rabbit@slave1 with rabbit@master ...'\nstderr:\n    description: The command standard error\n    returned: always\n    type: string\n    sample: 'ls: cannot access foo: No such file or directory'\ncmd:\n    description: The command executed by the task\n    returned: always\n    type: string\n    sample: 'rabbitmqctl join_cluster rabbit@master'\nrc:\n    description: The command return code (0 means success)\n    returned: always\n    type: int\n    sample: 0\nstdout_lines:\n    description: The command standard output split in lines\n    returned: always\n    type: list\n    sample: [u'Clustering node rabbit@slave1 with rabbit@master ...']\n'''\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "shell.py", "id": "435e85bdc76f3a3c76fb8a5d68e070b5", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/commands/shell.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}