{"author": "nvbn", "code": "\n\nimport pytest\nimport os\nfrom thefuck.rules.fix_file import match, get_new_command\nfrom thefuck.types import Command\n\n\n\ntests = (\n('gcc a.c', 'a.c', 3, 1,\n),\n)  \n\n\n@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_match(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n    assert match(Command('', test[4]))\n\n\n@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_no_editor(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    if 'EDITOR' in os.environ:\n        monkeypatch.delenv('EDITOR')\n\n    assert not match(Command('', test[4]))\n\n\n@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command('', test[4]))\n\n\n@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n\n@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test, settings):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(test[0], test[4])\n    settings.fixcolcmd = '{editor} {file} +{line}:{col}'\n\n    if test[3]:\n        assert (get_new_command(cmd) ==\n                u'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd) ==\n                u'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))\n", "comments": "\na.c: In function 'main':\na.c:3:1: error: expected expression before '}' token\n }\n  ^\n\"\"\"),\n\n('clang a.c', 'a.c', 3, 1,\n\"\"\"\na.c:3:1: error: expected expression\n}\n^\n\"\"\"),\n\n('perl a.pl', 'a.pl', 3, None,\n\"\"\"\nsyntax error at a.pl line 3, at EOF\nExecution of a.pl aborted due to compilation errors.\n\"\"\"),\n\n('perl a.pl', 'a.pl', 2, None,\n\"\"\"\nSearch pattern not terminated at a.pl line 2.\n\"\"\"),\n\n('sh a.sh', 'a.sh', 2, None,\n\"\"\"\na.sh: line 2: foo: command not found\n\"\"\"),\n\n('zsh a.sh', 'a.sh', 2, None,\n\"\"\"\na.sh:2: command not found: foo\n\"\"\"),\n\n('bash a.sh', 'a.sh', 2, None,\n\"\"\"\na.sh: line 2: foo: command not found\n\"\"\"),\n\n('rustc a.rs', 'a.rs', 2, 5,\n\"\"\"\na.rs:2:5: 2:6 error: unexpected token: `+`\na.rs:2     +\n           ^\n\"\"\"),\n\n('cargo build', 'src/lib.rs', 3, 5,\n\"\"\"\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\n   src/lib.rs:3:5: 3:6 error: unexpected token: `+`\n   src/lib.rs:3     +\n                    ^\nCould not compile `test`.\n\nTo learn more, run the command again with --verbose.\n\"\"\"),\n\n('python a.py', 'a.py', 2, None,\n\"\"\"\n  File \"a.py\", line 2\n      +\n          ^\nSyntaxError: invalid syntax\n\"\"\"),\n\n('python a.py', 'a.py', 8, None,\n\"\"\"\nTraceback (most recent call last):\n  File \"a.py\", line 8, in <module>\n    match(\"foo\")\n  File \"a.py\", line 5, in match\n    m = re.search(None, command)\n  File \"/usr/lib/python3.4/re.py\", line 170, in search\n    return _compile(pattern, flags).search(string)\n  File \"/usr/lib/python3.4/re.py\", line 293, in _compile\n    raise TypeError(\"first argument must be string or compiled pattern\")\nTypeError: first argument must be string or compiled pattern\n\"\"\"),\n\n(u'python caf\u00e9.py', u'caf\u00e9.py', 8, None,\nu\"\"\"\nTraceback (most recent call last):\n  File \"caf\u00e9.py\", line 8, in <module>\n    match(\"foo\")\n  File \"caf\u00e9.py\", line 5, in match\n    m = re.search(None, command)\n  File \"/usr/lib/python3.4/re.py\", line 170, in search\n    return _compile(pattern, flags).search(string)\n  File \"/usr/lib/python3.4/re.py\", line 293, in _compile\n    raise TypeError(\"first argument must be string or compiled pattern\")\nTypeError: first argument must be string or compiled pattern\n\"\"\"),\n\n('ruby a.rb', 'a.rb', 3, None,\n\"\"\"\na.rb:3: syntax error, unexpected keyword_end\n\"\"\"),\n\n('lua a.lua', 'a.lua', 2, None,\n\"\"\"\nlua: a.lua:2: unexpected symbol near '+'\n\"\"\"),\n\n('fish a.sh', '/tmp/fix-error/a.sh', 2, None,\n\"\"\"\nfish: Unknown command 'foo'\n/tmp/fix-error/a.sh (line 2): foo\n                              ^\n\"\"\"),\n\n('./a', './a', 2, None,\n\"\"\"\nawk: ./a:2: BEGIN { print \"Hello, world!\" + }\nawk: ./a:2:                                 ^ syntax error\n\"\"\"),\n\n('llc a.ll', 'a.ll', 1, 2,\n\"\"\"\nllc: a.ll:1:2: error: expected top-level entity\n+\n^\n\"\"\"),\n\n('go build a.go', 'a.go', 1, 2,\n\"\"\"\ncan't load package:\na.go:1:2: expected 'package', found '+'\n\"\"\"),\n\n('make', 'Makefile', 2, None,\n\"\"\"\nbidule\nmake: bidule: Command not found\nMakefile:2: recipe for target 'target' failed\nmake: *** [target] Error 127\n\"\"\"),\n\n('git st', '/home/martin/.config/git/config', 1, None,\n\"\"\"\nfatal: bad config file line 1 in /home/martin/.config/git/config\n\"\"\"),\n\n('node fuck.js asdf qwer', '/Users/pablo/Workspace/barebones/fuck.js', '2', 5,\n\"\"\"\n/Users/pablo/Workspace/barebones/fuck.js:2\nconole.log(arg);  // this should read console.log(arg);\n^\nReferenceError: conole is not defined\n    at /Users/pablo/Workspace/barebones/fuck.js:2:5\n    at Array.forEach (native)\n    at Object.<anonymous> (/Users/pablo/Workspace/barebones/fuck.js:1:85)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Function.Module.runMain (module.js:501:10)\n    at startup (node.js:129:16)\n    at node.js:814:3\n\"\"\"),\n\n('pep8', './tests/rules/test_systemctl.py', 17, 80,\n\"\"\"\n./tests/rules/test_systemctl.py:17:80: E501 line too long (93 > 79 characters)\n./tests/rules/test_systemctl.py:18:80: E501 line too long (103 > 79 characters)\n./tests/rules/test_whois.py:20:80: E501 line too long (89 > 79 characters)\n./tests/rules/test_whois.py:22:80: E501 line too long (83 > 79 characters)\n\"\"\"),\n\n('py.test', '/home/thefuck/tests/rules/test_fix_file.py', 218, None,\n\"\"\"\nmonkeypatch = <_pytest.monkeypatch.monkeypatch object at 0x7fdb76a25b38>\ntest = ('fish a.sh', '/tmp/fix-error/a.sh', 2, None, '', \"\\\\nfish: Unknown command 'foo'\\\\n/tmp/fix-error/a.sh (line 2): foo\\\\n                              ^\\\\n\")\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command(monkeypatch, test):\n>       mocker.patch('os.path.isfile', return_value=True)\nE       NameError: name 'mocker' is not defined\n\n/home/thefuck/tests/rules/test_fix_file.py:218: NameError\n\n\n\n# -*- coding: utf-8 -*-\n# (script, file, line, col (or None), output)\n# noqa\n", "content": "# -*- coding: utf-8 -*-\n\nimport pytest\nimport os\nfrom thefuck.rules.fix_file import match, get_new_command\nfrom thefuck.types import Command\n\n\n# (script, file, line, col (or None), output)\ntests = (\n('gcc a.c', 'a.c', 3, 1,\n\"\"\"\na.c: In function 'main':\na.c:3:1: error: expected expression before '}' token\n }\n  ^\n\"\"\"),\n\n('clang a.c', 'a.c', 3, 1,\n\"\"\"\na.c:3:1: error: expected expression\n}\n^\n\"\"\"),\n\n('perl a.pl', 'a.pl', 3, None,\n\"\"\"\nsyntax error at a.pl line 3, at EOF\nExecution of a.pl aborted due to compilation errors.\n\"\"\"),\n\n('perl a.pl', 'a.pl', 2, None,\n\"\"\"\nSearch pattern not terminated at a.pl line 2.\n\"\"\"),\n\n('sh a.sh', 'a.sh', 2, None,\n\"\"\"\na.sh: line 2: foo: command not found\n\"\"\"),\n\n('zsh a.sh', 'a.sh', 2, None,\n\"\"\"\na.sh:2: command not found: foo\n\"\"\"),\n\n('bash a.sh', 'a.sh', 2, None,\n\"\"\"\na.sh: line 2: foo: command not found\n\"\"\"),\n\n('rustc a.rs', 'a.rs', 2, 5,\n\"\"\"\na.rs:2:5: 2:6 error: unexpected token: `+`\na.rs:2     +\n           ^\n\"\"\"),\n\n('cargo build', 'src/lib.rs', 3, 5,\n\"\"\"\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\n   src/lib.rs:3:5: 3:6 error: unexpected token: `+`\n   src/lib.rs:3     +\n                    ^\nCould not compile `test`.\n\nTo learn more, run the command again with --verbose.\n\"\"\"),\n\n('python a.py', 'a.py', 2, None,\n\"\"\"\n  File \"a.py\", line 2\n      +\n          ^\nSyntaxError: invalid syntax\n\"\"\"),\n\n('python a.py', 'a.py', 8, None,\n\"\"\"\nTraceback (most recent call last):\n  File \"a.py\", line 8, in <module>\n    match(\"foo\")\n  File \"a.py\", line 5, in match\n    m = re.search(None, command)\n  File \"/usr/lib/python3.4/re.py\", line 170, in search\n    return _compile(pattern, flags).search(string)\n  File \"/usr/lib/python3.4/re.py\", line 293, in _compile\n    raise TypeError(\"first argument must be string or compiled pattern\")\nTypeError: first argument must be string or compiled pattern\n\"\"\"),\n\n(u'python caf\u00e9.py', u'caf\u00e9.py', 8, None,\nu\"\"\"\nTraceback (most recent call last):\n  File \"caf\u00e9.py\", line 8, in <module>\n    match(\"foo\")\n  File \"caf\u00e9.py\", line 5, in match\n    m = re.search(None, command)\n  File \"/usr/lib/python3.4/re.py\", line 170, in search\n    return _compile(pattern, flags).search(string)\n  File \"/usr/lib/python3.4/re.py\", line 293, in _compile\n    raise TypeError(\"first argument must be string or compiled pattern\")\nTypeError: first argument must be string or compiled pattern\n\"\"\"),\n\n('ruby a.rb', 'a.rb', 3, None,\n\"\"\"\na.rb:3: syntax error, unexpected keyword_end\n\"\"\"),\n\n('lua a.lua', 'a.lua', 2, None,\n\"\"\"\nlua: a.lua:2: unexpected symbol near '+'\n\"\"\"),\n\n('fish a.sh', '/tmp/fix-error/a.sh', 2, None,\n\"\"\"\nfish: Unknown command 'foo'\n/tmp/fix-error/a.sh (line 2): foo\n                              ^\n\"\"\"),\n\n('./a', './a', 2, None,\n\"\"\"\nawk: ./a:2: BEGIN { print \"Hello, world!\" + }\nawk: ./a:2:                                 ^ syntax error\n\"\"\"),\n\n('llc a.ll', 'a.ll', 1, 2,\n\"\"\"\nllc: a.ll:1:2: error: expected top-level entity\n+\n^\n\"\"\"),\n\n('go build a.go', 'a.go', 1, 2,\n\"\"\"\ncan't load package:\na.go:1:2: expected 'package', found '+'\n\"\"\"),\n\n('make', 'Makefile', 2, None,\n\"\"\"\nbidule\nmake: bidule: Command not found\nMakefile:2: recipe for target 'target' failed\nmake: *** [target] Error 127\n\"\"\"),\n\n('git st', '/home/martin/.config/git/config', 1, None,\n\"\"\"\nfatal: bad config file line 1 in /home/martin/.config/git/config\n\"\"\"),\n\n('node fuck.js asdf qwer', '/Users/pablo/Workspace/barebones/fuck.js', '2', 5,\n\"\"\"\n/Users/pablo/Workspace/barebones/fuck.js:2\nconole.log(arg);  // this should read console.log(arg);\n^\nReferenceError: conole is not defined\n    at /Users/pablo/Workspace/barebones/fuck.js:2:5\n    at Array.forEach (native)\n    at Object.<anonymous> (/Users/pablo/Workspace/barebones/fuck.js:1:85)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Function.Module.runMain (module.js:501:10)\n    at startup (node.js:129:16)\n    at node.js:814:3\n\"\"\"),\n\n('pep8', './tests/rules/test_systemctl.py', 17, 80,\n\"\"\"\n./tests/rules/test_systemctl.py:17:80: E501 line too long (93 > 79 characters)\n./tests/rules/test_systemctl.py:18:80: E501 line too long (103 > 79 characters)\n./tests/rules/test_whois.py:20:80: E501 line too long (89 > 79 characters)\n./tests/rules/test_whois.py:22:80: E501 line too long (83 > 79 characters)\n\"\"\"),\n\n('py.test', '/home/thefuck/tests/rules/test_fix_file.py', 218, None,\n\"\"\"\nmonkeypatch = <_pytest.monkeypatch.monkeypatch object at 0x7fdb76a25b38>\ntest = ('fish a.sh', '/tmp/fix-error/a.sh', 2, None, '', \"\\\\nfish: Unknown command 'foo'\\\\n/tmp/fix-error/a.sh (line 2): foo\\\\n                              ^\\\\n\")\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command(monkeypatch, test):\n>       mocker.patch('os.path.isfile', return_value=True)\nE       NameError: name 'mocker' is not defined\n\n/home/thefuck/tests/rules/test_fix_file.py:218: NameError\n\"\"\"),\n)  # noqa\n\n\n@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_match(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n    assert match(Command('', test[4]))\n\n\n@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_no_editor(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    if 'EDITOR' in os.environ:\n        monkeypatch.delenv('EDITOR')\n\n    assert not match(Command('', test[4]))\n\n\n@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command('', test[4]))\n\n\n@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n\n@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test, settings):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(test[0], test[4])\n    settings.fixcolcmd = '{editor} {file} +{line}:{col}'\n\n    if test[3]:\n        assert (get_new_command(cmd) ==\n                u'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd) ==\n                u'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_fix_file.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_fix_file.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}