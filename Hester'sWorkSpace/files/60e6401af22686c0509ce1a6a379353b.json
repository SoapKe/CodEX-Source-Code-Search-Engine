{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass CWTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?cw(?:tv(?:pr)?|seed)\\.com/(?:shows/)?(?:[^/]+/)+[^?]*\\?.*\\b(?:play|watch)=(?P<id>[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})'\n    _TESTS = [{\n        'url': 'http://cwtv.com/shows/arrow/legends-of-yesterday/?play=6b15e985-9345-4f60-baf8-56e96be57c63',\n        'info_dict': {\n            'id': '6b15e985-9345-4f60-baf8-56e96be57c63',\n            'ext': 'mp4',\n            'title': 'Legends of Yesterday',\n            'description': 'Oliver and Barry Allen take Kendra Saunders and Carter Hall to a remote location to keep them hidden from Vandal Savage while they figure out how to defeat him.',\n            'duration': 2665,\n            'series': 'Arrow',\n            'season_number': 4,\n            'season': '4',\n            'episode_number': 8,\n            'upload_date': '20151203',\n            'timestamp': 1449122100,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n        'skip': 'redirect to http://cwtv.com/shows/arrow/',\n    }, {\n        'url': 'http://www.cwseed.com/shows/whose-line-is-it-anyway/jeff-davis-4/?play=24282b12-ead2-42f2-95ad-26770c2c6088',\n        'info_dict': {\n            'id': '24282b12-ead2-42f2-95ad-26770c2c6088',\n            'ext': 'mp4',\n            'title': 'Jeff Davis 4',\n            'description': 'Jeff Davis is back to make you laugh.',\n            'duration': 1263,\n            'series': 'Whose Line Is It Anyway?',\n            'season_number': 11,\n            'season': '11',\n            'episode_number': 20,\n            'upload_date': '20151006',\n            'timestamp': 1444107300,\n        },\n    }, {\n        'url': 'http://cwtv.com/thecw/chroniclesofcisco/?play=8adebe35-f447-465f-ab52-e863506ff6d6',\n        'only_matching': True,\n    }, {\n        'url': 'http://cwtvpr.com/the-cw/video?watch=9eee3f60-ef4e-440b-b3b2-49428ac9c54e',\n        'only_matching': True,\n    }, {\n        'url': 'http://cwtv.com/shows/arrow/legends-of-yesterday/?watch=6b15e985-9345-4f60-baf8-56e96be57c63',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = None\n        formats = []\n        for partner in (154, 213):\n            vdata = self._download_json(\n                'http://metaframe.digitalsmiths.tv/v2/CWtv/assets/%s/partner/%d?format=json' % (video_id, partner), video_id, fatal=False)\n            if not vdata:\n                continue\n            video_data = vdata\n            for quality, quality_data in vdata.get('videos', {}).items():\n                quality_url = quality_data.get('uri')\n                if not quality_url:\n                    continue\n                if quality == 'variantplaylist':\n                    formats.extend(self._extract_m3u8_formats(\n                        quality_url, video_id, 'mp4', m3u8_id='hls', fatal=False))\n                else:\n                    tbr = int_or_none(quality_data.get('bitrate'))\n                    format_id = 'http' + ('-%d' % tbr if tbr else '')\n                    if self._is_valid_url(quality_url, video_id, format_id):\n                        formats.append({\n                            'format_id': format_id,\n                            'url': quality_url,\n                            'tbr': tbr,\n                        })\n        video_metadata = video_data['assetFields']\n        ism_url = video_metadata.get('smoothStreamingUrl')\n        if ism_url:\n            formats.extend(self._extract_ism_formats(\n                ism_url, video_id, ism_id='mss', fatal=False))\n        self._sort_formats(formats)\n\n        thumbnails = [{\n            'url': image['uri'],\n            'width': image.get('width'),\n            'height': image.get('height'),\n        } for image_id, image in video_data['images'].items() if image.get('uri')] if video_data.get('images') else None\n\n        subtitles = {\n            'en': [{\n                'url': video_metadata['UnicornCcUrl'],\n            }],\n        } if video_metadata.get('UnicornCcUrl') else None\n\n        return {\n            'id': video_id,\n            'title': video_metadata['title'],\n            'description': video_metadata.get('description'),\n            'duration': int_or_none(video_metadata.get('duration')),\n            'series': video_metadata.get('seriesName'),\n            'season_number': int_or_none(video_metadata.get('seasonNumber')),\n            'season': video_metadata.get('seasonName'),\n            'episode_number': int_or_none(video_metadata.get('episodeNumber')),\n            'timestamp': parse_iso8601(video_data.get('startTime')),\n            'thumbnails': thumbnails,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "comments": "# coding: utf-8\n# m3u8 download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass CWTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?cw(?:tv(?:pr)?|seed)\\.com/(?:shows/)?(?:[^/]+/)+[^?]*\\?.*\\b(?:play|watch)=(?P<id>[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})'\n    _TESTS = [{\n        'url': 'http://cwtv.com/shows/arrow/legends-of-yesterday/?play=6b15e985-9345-4f60-baf8-56e96be57c63',\n        'info_dict': {\n            'id': '6b15e985-9345-4f60-baf8-56e96be57c63',\n            'ext': 'mp4',\n            'title': 'Legends of Yesterday',\n            'description': 'Oliver and Barry Allen take Kendra Saunders and Carter Hall to a remote location to keep them hidden from Vandal Savage while they figure out how to defeat him.',\n            'duration': 2665,\n            'series': 'Arrow',\n            'season_number': 4,\n            'season': '4',\n            'episode_number': 8,\n            'upload_date': '20151203',\n            'timestamp': 1449122100,\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n        'skip': 'redirect to http://cwtv.com/shows/arrow/',\n    }, {\n        'url': 'http://www.cwseed.com/shows/whose-line-is-it-anyway/jeff-davis-4/?play=24282b12-ead2-42f2-95ad-26770c2c6088',\n        'info_dict': {\n            'id': '24282b12-ead2-42f2-95ad-26770c2c6088',\n            'ext': 'mp4',\n            'title': 'Jeff Davis 4',\n            'description': 'Jeff Davis is back to make you laugh.',\n            'duration': 1263,\n            'series': 'Whose Line Is It Anyway?',\n            'season_number': 11,\n            'season': '11',\n            'episode_number': 20,\n            'upload_date': '20151006',\n            'timestamp': 1444107300,\n        },\n    }, {\n        'url': 'http://cwtv.com/thecw/chroniclesofcisco/?play=8adebe35-f447-465f-ab52-e863506ff6d6',\n        'only_matching': True,\n    }, {\n        'url': 'http://cwtvpr.com/the-cw/video?watch=9eee3f60-ef4e-440b-b3b2-49428ac9c54e',\n        'only_matching': True,\n    }, {\n        'url': 'http://cwtv.com/shows/arrow/legends-of-yesterday/?watch=6b15e985-9345-4f60-baf8-56e96be57c63',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = None\n        formats = []\n        for partner in (154, 213):\n            vdata = self._download_json(\n                'http://metaframe.digitalsmiths.tv/v2/CWtv/assets/%s/partner/%d?format=json' % (video_id, partner), video_id, fatal=False)\n            if not vdata:\n                continue\n            video_data = vdata\n            for quality, quality_data in vdata.get('videos', {}).items():\n                quality_url = quality_data.get('uri')\n                if not quality_url:\n                    continue\n                if quality == 'variantplaylist':\n                    formats.extend(self._extract_m3u8_formats(\n                        quality_url, video_id, 'mp4', m3u8_id='hls', fatal=False))\n                else:\n                    tbr = int_or_none(quality_data.get('bitrate'))\n                    format_id = 'http' + ('-%d' % tbr if tbr else '')\n                    if self._is_valid_url(quality_url, video_id, format_id):\n                        formats.append({\n                            'format_id': format_id,\n                            'url': quality_url,\n                            'tbr': tbr,\n                        })\n        video_metadata = video_data['assetFields']\n        ism_url = video_metadata.get('smoothStreamingUrl')\n        if ism_url:\n            formats.extend(self._extract_ism_formats(\n                ism_url, video_id, ism_id='mss', fatal=False))\n        self._sort_formats(formats)\n\n        thumbnails = [{\n            'url': image['uri'],\n            'width': image.get('width'),\n            'height': image.get('height'),\n        } for image_id, image in video_data['images'].items() if image.get('uri')] if video_data.get('images') else None\n\n        subtitles = {\n            'en': [{\n                'url': video_metadata['UnicornCcUrl'],\n            }],\n        } if video_metadata.get('UnicornCcUrl') else None\n\n        return {\n            'id': video_id,\n            'title': video_metadata['title'],\n            'description': video_metadata.get('description'),\n            'duration': int_or_none(video_metadata.get('duration')),\n            'series': video_metadata.get('seriesName'),\n            'season_number': int_or_none(video_metadata.get('seasonNumber')),\n            'season': video_metadata.get('seasonName'),\n            'episode_number': int_or_none(video_metadata.get('episodeNumber')),\n            'timestamp': parse_iso8601(video_data.get('startTime')),\n            'thumbnails': thumbnails,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "cwtv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/cwtv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}