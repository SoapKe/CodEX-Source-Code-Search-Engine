{"author": "keon", "code": "\n Find last occurance of a number in a sorted array (increasing order)\n Approach- Binary Search\n T(n)- O(log n)\n\n\n\ndef lastOccurance(array, query):\n    lo, hi = 0, len(array) - 1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if (array[mid] == query and mid == len(array)-1) or \\\n           (array[mid] == query and array[mid+1] > query):\n            return mid\n        elif (array[mid] <= query):\n            lo = mid + 1\n        else:\n            hi = mid - 1\n\n\ndef main():\n    array = [1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6]\n    print(array)\n    print(\"-----SEARCH-----\")\n    query = 3\n    print(\"found last: \", query, \" in index:\", lastOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 5\n    print(\"found last: \", query, \" in index:\", lastOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 7\n    print(\"found last: \", query, \" in index:\", lastOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 1\n    print(\"found last: \", query, \" in index:\", lastOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = -1\n    print(\"found last: \", query, \" in index:\", lastOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 9\n    print(\"found last: \", query, \" in index:\", lastOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 6\n    print(\"found last: \", query, \" in index:\", lastOccurance(array, query))\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "     find last occurance number sorted array (increasing order)    approach  binary search    t(n)  o(log n)    ", "content": "#\n# Find last occurance of a number in a sorted array (increasing order)\n# Approach- Binary Search\n# T(n)- O(log n)\n#\n\n\ndef lastOccurance(array, query):\n    lo, hi = 0, len(array) - 1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if (array[mid] == query and mid == len(array)-1) or \\\n           (array[mid] == query and array[mid+1] > query):\n            return mid\n        elif (array[mid] <= query):\n            lo = mid + 1\n        else:\n            hi = mid - 1\n\n\ndef main():\n    array = [1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6]\n    print(array)\n    print(\"-----SEARCH-----\")\n    query = 3\n    print(\"found last: \", query, \" in index:\", lastOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 5\n    print(\"found last: \", query, \" in index:\", lastOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 7\n    print(\"found last: \", query, \" in index:\", lastOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 1\n    print(\"found last: \", query, \" in index:\", lastOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = -1\n    print(\"found last: \", query, \" in index:\", lastOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 9\n    print(\"found last: \", query, \" in index:\", lastOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 6\n    print(\"found last: \", query, \" in index:\", lastOccurance(array, query))\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "last_occurance.py", "id": "7d4dc276ef6bf8b8552e781cb3fa067c", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/keon-algorithms/keon-algorithms-abe4cb1/search/last_occurance.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:56:36Z", "url": "https://github.com/keon/algorithms", "wiki": true}