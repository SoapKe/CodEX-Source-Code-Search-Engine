{"author": "ansible", "code": "\n Copyright (c) 2017 Cisco and/or its affiliates.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import (absolute_import, division, print_function)\n\nimport json\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.nso import nso_verify\nfrom . import nso_module\nfrom .nso_module import MockResponse\n\n\nclass TestNsoVerify(nso_module.TestNsoModule):\n    module = nso_verify\n\n    @patch('ansible.module_utils.network.nso.nso.open_url')\n    def test_nso_verify_empty_data(self, open_url_mock):\n        calls = [\n            MockResponse('login', {}, 200, '{}', {'set-cookie': 'id'}),\n            MockResponse('get_system_setting', {'operation': 'version'}, 200, '{\"result\": \"4.4.3\"}'),\n            MockResponse('logout', {}, 200, '{\"result\": {}}'),\n        ]\n        open_url_mock.side_effect = lambda *args, **kwargs: nso_module.mock_call(calls, *args, **kwargs)\n\n        data = {}\n        nso_module.set_module_args({\n            'username': 'user', 'password': 'password',\n            'url': 'http://localhost:8080/jsonrpc', 'data': data\n        })\n        self.execute_module(changed=False)\n\n        self.assertEqual(0, len(calls))\n\n    @patch('ansible.module_utils.network.nso.nso.open_url')\n    def test_nso_verify_violation(self, open_url_mock):\n        devices_schema = nso_module.load_fixture('devices_schema.json')\n        device_schema = nso_module.load_fixture('device_schema.json')\n\n        calls = [\n            MockResponse('login', {}, 200, '{}', {'set-cookie': 'id'}),\n            MockResponse('get_system_setting', {'operation': 'version'}, 200, '{\"result\": \"4.5.0\"}'),\n            MockResponse('get_module_prefix_map', {}, 200, '{\"result\": {\"tailf-ncs\": \"ncs\"}}'),\n            MockResponse('new_trans', {'mode': 'read'}, 200, '{\"result\": {\"th\": 1}}'),\n            MockResponse('get_schema', {'path': '/ncs:devices'}, 200, '{\"result\": %s}' % (json.dumps(devices_schema, ))),\n            MockResponse('get_schema', {'path': '/ncs:devices/device'}, 200, '{\"result\": %s}' % (json.dumps(device_schema, ))),\n            MockResponse('exists', {'path': '/ncs:devices/device{ce0}'}, 200, '{\"result\": {\"exists\": true}}'),\n            MockResponse('get_value', {'path': '/ncs:devices/device{ce0}/description'}, 200, '{\"result\": {\"value\": \"In Violation\"}}'),\n            MockResponse('logout', {}, 200, '{\"result\": {}}'),\n        ]\n        open_url_mock.side_effect = lambda *args, **kwargs: nso_module.mock_call(calls, *args, **kwargs)\n\n        data = nso_module.load_fixture('verify_violation_data.json')\n        nso_module.set_module_args({\n            'username': 'user', 'password': 'password',\n            'url': 'http://localhost:8080/jsonrpc', 'data': data\n        })\n        self.execute_module(failed=True, violations=[\n            {'path': '/ncs:devices/device{ce0}/description', 'expected-value': 'Example Device', 'value': 'In Violation'},\n        ])\n\n        self.assertEqual(0, len(calls))\n\n    @patch('ansible.module_utils.network.nso.nso.open_url')\n    def test_nso_verify_ok(self, open_url_mock):\n        devices_schema = nso_module.load_fixture('devices_schema.json')\n        device_schema = nso_module.load_fixture('device_schema.json')\n\n        calls = [\n            MockResponse('login', {}, 200, '{}', {'set-cookie': 'id'}),\n            MockResponse('get_system_setting', {'operation': 'version'}, 200, '{\"result\": \"4.5.0\"}'),\n            MockResponse('get_module_prefix_map', {}, 200, '{\"result\": {\"tailf-ncs\": \"ncs\"}}'),\n            MockResponse('new_trans', {'mode': 'read'}, 200, '{\"result\": {\"th\": 1}}'),\n            MockResponse('get_schema', {'path': '/ncs:devices'}, 200, '{\"result\": %s}' % (json.dumps(devices_schema, ))),\n            MockResponse('get_schema', {'path': '/ncs:devices/device'}, 200, '{\"result\": %s}' % (json.dumps(device_schema, ))),\n            MockResponse('exists', {'path': '/ncs:devices/device{ce0}'}, 200, '{\"result\": {\"exists\": true}}'),\n            MockResponse('get_value', {'path': '/ncs:devices/device{ce0}/description'}, 200, '{\"result\": {\"value\": \"Example Device\"}}'),\n            MockResponse('logout', {}, 200, '{\"result\": {}}'),\n        ]\n        open_url_mock.side_effect = lambda *args, **kwargs: nso_module.mock_call(calls, *args, **kwargs)\n\n        data = nso_module.load_fixture('verify_violation_data.json')\n        nso_module.set_module_args({\n            'username': 'user', 'password': 'password',\n            'url': 'http://localhost:8080/jsonrpc', 'data': data\n        })\n        self.execute_module(changed=False)\n\n        self.assertEqual(0, len(calls))\n", "comments": "     copyright (c) 2017 cisco affiliates        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses    ", "content": "#\n# Copyright (c) 2017 Cisco and/or its affiliates.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import (absolute_import, division, print_function)\n\nimport json\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.nso import nso_verify\nfrom . import nso_module\nfrom .nso_module import MockResponse\n\n\nclass TestNsoVerify(nso_module.TestNsoModule):\n    module = nso_verify\n\n    @patch('ansible.module_utils.network.nso.nso.open_url')\n    def test_nso_verify_empty_data(self, open_url_mock):\n        calls = [\n            MockResponse('login', {}, 200, '{}', {'set-cookie': 'id'}),\n            MockResponse('get_system_setting', {'operation': 'version'}, 200, '{\"result\": \"4.4.3\"}'),\n            MockResponse('logout', {}, 200, '{\"result\": {}}'),\n        ]\n        open_url_mock.side_effect = lambda *args, **kwargs: nso_module.mock_call(calls, *args, **kwargs)\n\n        data = {}\n        nso_module.set_module_args({\n            'username': 'user', 'password': 'password',\n            'url': 'http://localhost:8080/jsonrpc', 'data': data\n        })\n        self.execute_module(changed=False)\n\n        self.assertEqual(0, len(calls))\n\n    @patch('ansible.module_utils.network.nso.nso.open_url')\n    def test_nso_verify_violation(self, open_url_mock):\n        devices_schema = nso_module.load_fixture('devices_schema.json')\n        device_schema = nso_module.load_fixture('device_schema.json')\n\n        calls = [\n            MockResponse('login', {}, 200, '{}', {'set-cookie': 'id'}),\n            MockResponse('get_system_setting', {'operation': 'version'}, 200, '{\"result\": \"4.5.0\"}'),\n            MockResponse('get_module_prefix_map', {}, 200, '{\"result\": {\"tailf-ncs\": \"ncs\"}}'),\n            MockResponse('new_trans', {'mode': 'read'}, 200, '{\"result\": {\"th\": 1}}'),\n            MockResponse('get_schema', {'path': '/ncs:devices'}, 200, '{\"result\": %s}' % (json.dumps(devices_schema, ))),\n            MockResponse('get_schema', {'path': '/ncs:devices/device'}, 200, '{\"result\": %s}' % (json.dumps(device_schema, ))),\n            MockResponse('exists', {'path': '/ncs:devices/device{ce0}'}, 200, '{\"result\": {\"exists\": true}}'),\n            MockResponse('get_value', {'path': '/ncs:devices/device{ce0}/description'}, 200, '{\"result\": {\"value\": \"In Violation\"}}'),\n            MockResponse('logout', {}, 200, '{\"result\": {}}'),\n        ]\n        open_url_mock.side_effect = lambda *args, **kwargs: nso_module.mock_call(calls, *args, **kwargs)\n\n        data = nso_module.load_fixture('verify_violation_data.json')\n        nso_module.set_module_args({\n            'username': 'user', 'password': 'password',\n            'url': 'http://localhost:8080/jsonrpc', 'data': data\n        })\n        self.execute_module(failed=True, violations=[\n            {'path': '/ncs:devices/device{ce0}/description', 'expected-value': 'Example Device', 'value': 'In Violation'},\n        ])\n\n        self.assertEqual(0, len(calls))\n\n    @patch('ansible.module_utils.network.nso.nso.open_url')\n    def test_nso_verify_ok(self, open_url_mock):\n        devices_schema = nso_module.load_fixture('devices_schema.json')\n        device_schema = nso_module.load_fixture('device_schema.json')\n\n        calls = [\n            MockResponse('login', {}, 200, '{}', {'set-cookie': 'id'}),\n            MockResponse('get_system_setting', {'operation': 'version'}, 200, '{\"result\": \"4.5.0\"}'),\n            MockResponse('get_module_prefix_map', {}, 200, '{\"result\": {\"tailf-ncs\": \"ncs\"}}'),\n            MockResponse('new_trans', {'mode': 'read'}, 200, '{\"result\": {\"th\": 1}}'),\n            MockResponse('get_schema', {'path': '/ncs:devices'}, 200, '{\"result\": %s}' % (json.dumps(devices_schema, ))),\n            MockResponse('get_schema', {'path': '/ncs:devices/device'}, 200, '{\"result\": %s}' % (json.dumps(device_schema, ))),\n            MockResponse('exists', {'path': '/ncs:devices/device{ce0}'}, 200, '{\"result\": {\"exists\": true}}'),\n            MockResponse('get_value', {'path': '/ncs:devices/device{ce0}/description'}, 200, '{\"result\": {\"value\": \"Example Device\"}}'),\n            MockResponse('logout', {}, 200, '{\"result\": {}}'),\n        ]\n        open_url_mock.side_effect = lambda *args, **kwargs: nso_module.mock_call(calls, *args, **kwargs)\n\n        data = nso_module.load_fixture('verify_violation_data.json')\n        nso_module.set_module_args({\n            'username': 'user', 'password': 'password',\n            'url': 'http://localhost:8080/jsonrpc', 'data': data\n        })\n        self.execute_module(changed=False)\n\n        self.assertEqual(0, len(calls))\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_nso_verify.py", "id": "fcba1e722af4bc2e481a404ad95200f9", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/nso/test_nso_verify.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}