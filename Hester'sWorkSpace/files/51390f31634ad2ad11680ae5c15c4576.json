{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass TubiTvIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tubitv\\.com/(?:video|movies|tv-shows)/(?P<id>[0-9]+)'\n    _LOGIN_URL = 'http://tubitv.com/login'\n    _NETRC_MACHINE = 'tubitv'\n    _GEO_COUNTRIES = ['US']\n    _TESTS = [{\n        'url': 'http://tubitv.com/video/283829/the_comedian_at_the_friday',\n        'md5': '43ac06be9326f41912dc64ccf7a80320',\n        'info_dict': {\n            'id': '283829',\n            'ext': 'mp4',\n            'title': 'The Comedian at The Friday',\n            'description': 'A stand up comedian is forced to look at the decisions in his life while on a one week trip to the west coast.',\n            'uploader_id': 'bc168bee0d18dd1cb3b86c68706ab434',\n        },\n    }, {\n        'url': 'http://tubitv.com/tv-shows/321886/s01_e01_on_nom_stories',\n        'only_matching': True,\n    }, {\n        'url': 'http://tubitv.com/movies/383676/tracker',\n        'only_matching': True,\n    }]\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n        self.report_login()\n        form_data = {\n            'username': username,\n            'password': password,\n        }\n        payload = urlencode_postdata(form_data)\n        request = sanitized_Request(self._LOGIN_URL, payload)\n        request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        login_page = self._download_webpage(\n            request, None, False, 'Wrong login info')\n        if not re.search(r'id=\"tubi-logout\"', login_page):\n            raise ExtractorError(\n                'Login failed (invalid username/password)', expected=True)\n\n    def _real_initialize(self):\n        self._login()\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._download_json(\n            'http://tubitv.com/oz/videos/%s/content' % video_id, video_id)\n        title = video_data['title']\n\n        formats = self._extract_m3u8_formats(\n            self._proto_relative_url(video_data['url']),\n            video_id, 'mp4', 'm3u8_native')\n        self._sort_formats(formats)\n\n        thumbnails = []\n        for thumbnail_url in video_data.get('thumbnails', []):\n            if not thumbnail_url:\n                continue\n            thumbnails.append({\n                'url': self._proto_relative_url(thumbnail_url),\n            })\n\n        subtitles = {}\n        for sub in video_data.get('subtitles', []):\n            sub_url = sub.get('url')\n            if not sub_url:\n                continue\n            subtitles.setdefault(sub.get('lang', 'English'), []).append({\n                'url': self._proto_relative_url(sub_url),\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'subtitles': subtitles,\n            'thumbnails': thumbnails,\n            'description': video_data.get('description'),\n            'duration': int_or_none(video_data.get('duration')),\n            'uploader_id': video_data.get('publisher_id'),\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass TubiTvIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tubitv\\.com/(?:video|movies|tv-shows)/(?P<id>[0-9]+)'\n    _LOGIN_URL = 'http://tubitv.com/login'\n    _NETRC_MACHINE = 'tubitv'\n    _GEO_COUNTRIES = ['US']\n    _TESTS = [{\n        'url': 'http://tubitv.com/video/283829/the_comedian_at_the_friday',\n        'md5': '43ac06be9326f41912dc64ccf7a80320',\n        'info_dict': {\n            'id': '283829',\n            'ext': 'mp4',\n            'title': 'The Comedian at The Friday',\n            'description': 'A stand up comedian is forced to look at the decisions in his life while on a one week trip to the west coast.',\n            'uploader_id': 'bc168bee0d18dd1cb3b86c68706ab434',\n        },\n    }, {\n        'url': 'http://tubitv.com/tv-shows/321886/s01_e01_on_nom_stories',\n        'only_matching': True,\n    }, {\n        'url': 'http://tubitv.com/movies/383676/tracker',\n        'only_matching': True,\n    }]\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n        self.report_login()\n        form_data = {\n            'username': username,\n            'password': password,\n        }\n        payload = urlencode_postdata(form_data)\n        request = sanitized_Request(self._LOGIN_URL, payload)\n        request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        login_page = self._download_webpage(\n            request, None, False, 'Wrong login info')\n        if not re.search(r'id=\"tubi-logout\"', login_page):\n            raise ExtractorError(\n                'Login failed (invalid username/password)', expected=True)\n\n    def _real_initialize(self):\n        self._login()\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._download_json(\n            'http://tubitv.com/oz/videos/%s/content' % video_id, video_id)\n        title = video_data['title']\n\n        formats = self._extract_m3u8_formats(\n            self._proto_relative_url(video_data['url']),\n            video_id, 'mp4', 'm3u8_native')\n        self._sort_formats(formats)\n\n        thumbnails = []\n        for thumbnail_url in video_data.get('thumbnails', []):\n            if not thumbnail_url:\n                continue\n            thumbnails.append({\n                'url': self._proto_relative_url(thumbnail_url),\n            })\n\n        subtitles = {}\n        for sub in video_data.get('subtitles', []):\n            sub_url = sub.get('url')\n            if not sub_url:\n                continue\n            subtitles.setdefault(sub.get('lang', 'English'), []).append({\n                'url': self._proto_relative_url(sub_url),\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'subtitles': subtitles,\n            'thumbnails': thumbnails,\n            'description': video_data.get('description'),\n            'duration': int_or_none(video_data.get('duration')),\n            'uploader_id': video_data.get('publisher_id'),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tubitv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tubitv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}