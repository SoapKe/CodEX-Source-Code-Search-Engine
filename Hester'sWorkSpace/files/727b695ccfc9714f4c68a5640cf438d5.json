{"author": "django", "code": "from django.core import signing\nfrom django.http import HttpRequest, HttpResponse\nfrom django.test import SimpleTestCase, override_settings\nfrom django.test.utils import freeze_time\n\n\nclass SignedCookieTest(SimpleTestCase):\n\n    def test_can_set_and_read_signed_cookies(self):\n        response = HttpResponse()\n        response.set_signed_cookie('c', 'hello')\n        self.assertIn('c', response.cookies)\n        self.assertTrue(response.cookies['c'].value.startswith('hello:'))\n        request = HttpRequest()\n        request.COOKIES['c'] = response.cookies['c'].value\n        value = request.get_signed_cookie('c')\n        self.assertEqual(value, 'hello')\n\n    def test_can_use_salt(self):\n        response = HttpResponse()\n        response.set_signed_cookie('a', 'hello', salt='one')\n        request = HttpRequest()\n        request.COOKIES['a'] = response.cookies['a'].value\n        value = request.get_signed_cookie('a', salt='one')\n        self.assertEqual(value, 'hello')\n        with self.assertRaises(signing.BadSignature):\n            request.get_signed_cookie('a', salt='two')\n\n    def test_detects_tampering(self):\n        response = HttpResponse()\n        response.set_signed_cookie('c', 'hello')\n        request = HttpRequest()\n        request.COOKIES['c'] = response.cookies['c'].value[:-2] + '$$'\n        with self.assertRaises(signing.BadSignature):\n            request.get_signed_cookie('c')\n\n    def test_default_argument_suppresses_exceptions(self):\n        response = HttpResponse()\n        response.set_signed_cookie('c', 'hello')\n        request = HttpRequest()\n        request.COOKIES['c'] = response.cookies['c'].value[:-2] + '$$'\n        self.assertIsNone(request.get_signed_cookie('c', default=None))\n\n    def test_max_age_argument(self):\n        value = 'hello'\n        with freeze_time(123456789):\n            response = HttpResponse()\n            response.set_signed_cookie('c', value)\n            request = HttpRequest()\n            request.COOKIES['c'] = response.cookies['c'].value\n            self.assertEqual(request.get_signed_cookie('c'), value)\n\n        with freeze_time(123456800):\n            self.assertEqual(request.get_signed_cookie('c', max_age=12), value)\n            self.assertEqual(request.get_signed_cookie('c', max_age=11), value)\n            with self.assertRaises(signing.SignatureExpired):\n                request.get_signed_cookie('c', max_age=10)\n\n    @override_settings(SECRET_KEY=b'\\xe7')\n    def test_signed_cookies_with_binary_key(self):\n        response = HttpResponse()\n        response.set_signed_cookie('c', 'hello')\n\n        request = HttpRequest()\n        request.COOKIES['c'] = response.cookies['c'].value\n        self.assertEqual(request.get_signed_cookie('c'), 'hello')\n", "comments": "", "content": "from django.core import signing\nfrom django.http import HttpRequest, HttpResponse\nfrom django.test import SimpleTestCase, override_settings\nfrom django.test.utils import freeze_time\n\n\nclass SignedCookieTest(SimpleTestCase):\n\n    def test_can_set_and_read_signed_cookies(self):\n        response = HttpResponse()\n        response.set_signed_cookie('c', 'hello')\n        self.assertIn('c', response.cookies)\n        self.assertTrue(response.cookies['c'].value.startswith('hello:'))\n        request = HttpRequest()\n        request.COOKIES['c'] = response.cookies['c'].value\n        value = request.get_signed_cookie('c')\n        self.assertEqual(value, 'hello')\n\n    def test_can_use_salt(self):\n        response = HttpResponse()\n        response.set_signed_cookie('a', 'hello', salt='one')\n        request = HttpRequest()\n        request.COOKIES['a'] = response.cookies['a'].value\n        value = request.get_signed_cookie('a', salt='one')\n        self.assertEqual(value, 'hello')\n        with self.assertRaises(signing.BadSignature):\n            request.get_signed_cookie('a', salt='two')\n\n    def test_detects_tampering(self):\n        response = HttpResponse()\n        response.set_signed_cookie('c', 'hello')\n        request = HttpRequest()\n        request.COOKIES['c'] = response.cookies['c'].value[:-2] + '$$'\n        with self.assertRaises(signing.BadSignature):\n            request.get_signed_cookie('c')\n\n    def test_default_argument_suppresses_exceptions(self):\n        response = HttpResponse()\n        response.set_signed_cookie('c', 'hello')\n        request = HttpRequest()\n        request.COOKIES['c'] = response.cookies['c'].value[:-2] + '$$'\n        self.assertIsNone(request.get_signed_cookie('c', default=None))\n\n    def test_max_age_argument(self):\n        value = 'hello'\n        with freeze_time(123456789):\n            response = HttpResponse()\n            response.set_signed_cookie('c', value)\n            request = HttpRequest()\n            request.COOKIES['c'] = response.cookies['c'].value\n            self.assertEqual(request.get_signed_cookie('c'), value)\n\n        with freeze_time(123456800):\n            self.assertEqual(request.get_signed_cookie('c', max_age=12), value)\n            self.assertEqual(request.get_signed_cookie('c', max_age=11), value)\n            with self.assertRaises(signing.SignatureExpired):\n                request.get_signed_cookie('c', max_age=10)\n\n    @override_settings(SECRET_KEY=b'\\xe7')\n    def test_signed_cookies_with_binary_key(self):\n        response = HttpResponse()\n        response.set_signed_cookie('c', 'hello')\n\n        request = HttpRequest()\n        request.COOKIES['c'] = response.cookies['c'].value\n        self.assertEqual(request.get_signed_cookie('c'), 'hello')\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "727b695ccfc9714f4c68a5640cf438d5", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/signed_cookies_tests/tests.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}