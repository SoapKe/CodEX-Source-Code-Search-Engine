{"author": "donnemartin", "code": "from nose.tools import assert_equal\nfrom nose.tools import raises\n\n\nclass TestStacks(object):\n\n    @raises(Exception)\n    def test_pop_on_empty(self, num_stacks, stack_size):\n        print('Test: Pop on empty stack')\n        stacks = Stacks(num_stacks, stack_size)\n        stacks.pop(0)\n\n    @raises(Exception)\n    def test_push_on_full(self, num_stacks, stack_size):\n        print('Test: Push to full stack')\n        stacks = Stacks(num_stacks, stack_size)\n        for i in range(0, stack_size):\n            stacks.push(2, i)\n        stacks.push(2, stack_size)\n\n    def test_stacks(self, num_stacks, stack_size):\n        print('Test: Push to non-full stack')\n        stacks = Stacks(num_stacks, stack_size)\n        stacks.push(0, 1)\n        stacks.push(0, 2)\n        stacks.push(1, 3)\n        stacks.push(2, 4)\n\n        print('Test: Pop on non-empty stack')\n        assert_equal(stacks.pop(0), 2)\n        assert_equal(stacks.pop(0), 1)\n        assert_equal(stacks.pop(1), 3)\n        assert_equal(stacks.pop(2), 4)\n\n        print('Success: test_stacks\\n')\n\n\ndef main():\n    num_stacks = 3\n    stack_size = 100\n    test = TestStacks()\n    test.test_pop_on_empty(num_stacks, stack_size)\n    test.test_push_on_full(num_stacks, stack_size)\n    test.test_stacks(num_stacks, stack_size)\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\nfrom nose.tools import raises\n\n\nclass TestStacks(object):\n\n    @raises(Exception)\n    def test_pop_on_empty(self, num_stacks, stack_size):\n        print('Test: Pop on empty stack')\n        stacks = Stacks(num_stacks, stack_size)\n        stacks.pop(0)\n\n    @raises(Exception)\n    def test_push_on_full(self, num_stacks, stack_size):\n        print('Test: Push to full stack')\n        stacks = Stacks(num_stacks, stack_size)\n        for i in range(0, stack_size):\n            stacks.push(2, i)\n        stacks.push(2, stack_size)\n\n    def test_stacks(self, num_stacks, stack_size):\n        print('Test: Push to non-full stack')\n        stacks = Stacks(num_stacks, stack_size)\n        stacks.push(0, 1)\n        stacks.push(0, 2)\n        stacks.push(1, 3)\n        stacks.push(2, 4)\n\n        print('Test: Pop on non-empty stack')\n        assert_equal(stacks.pop(0), 2)\n        assert_equal(stacks.pop(0), 1)\n        assert_equal(stacks.pop(1), 3)\n        assert_equal(stacks.pop(2), 4)\n\n        print('Success: test_stacks\\n')\n\n\ndef main():\n    num_stacks = 3\n    stack_size = 100\n    test = TestStacks()\n    test.test_pop_on_empty(num_stacks, stack_size)\n    test.test_push_on_full(num_stacks, stack_size)\n    test.test_stacks(num_stacks, stack_size)\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_n_stacks.py", "id": "7eb9e007dec7da5150f1759d24e2f82a", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/stacks_queues/n_stacks/test_n_stacks.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}