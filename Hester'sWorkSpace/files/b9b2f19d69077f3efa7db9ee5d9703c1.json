{"author": "nvbn", "code": "from subprocess import Popen, PIPE\nfrom time import time\nimport os\nimport sys\nimport six\nfrom .. import logs\nfrom ..conf import settings\nfrom ..utils import DEVNULL, cache\nfrom .generic import Generic\n\n\n@cache('~/.config/fish/config.fish', '~/.config/fish/functions')\ndef _get_functions(overridden):\n    proc = Popen(['fish', '-ic', 'functions'], stdout=PIPE, stderr=DEVNULL)\n    functions = proc.stdout.read().decode('utf-8').strip().split('\\n')\n    return {func: func for func in functions if func not in overridden}\n\n\n@cache('~/.config/fish/config.fish')\ndef _get_aliases(overridden):\n    aliases = {}\n    proc = Popen(['fish', '-ic', 'alias'], stdout=PIPE, stderr=DEVNULL)\n    alias_out = proc.stdout.read().decode('utf-8').strip().split('\\n')\n    for alias in alias_out:\n        name, value = alias.replace('alias ', '', 1).split(' ', 1)\n        if name not in overridden:\n            aliases[name] = value\n    return aliases\n\n\nclass Fish(Generic):\n    def _get_overridden_aliases(self):\n        overridden = os.environ.get('THEFUCK_OVERRIDDEN_ALIASES',\n                                    os.environ.get('TF_OVERRIDDEN_ALIASES', ''))\n        default = {'cd', 'grep', 'ls', 'man', 'open'}\n        for alias in overridden.split(','):\n            default.add(alias.strip())\n        return default\n\n    def app_alias(self, alias_name):\n        if settings.alter_history:\n            alter_history = ('    builtin history delete --exact'\n                             ' --case-sensitive -- $fucked_up_command\\n'\n                             '    builtin history merge ^ /dev/null\\n')\n        else:\n            alter_history = ''\n        \n        return ('function {0} -d \"Correct your previous console command\"\\n'\n                '  set -l fucked_up_command $history[1]\\n'\n                '  env TF_SHELL=fish TF_ALIAS={0} PYTHONIOENCODING=utf-8'\n                ' thefuck $fucked_up_command | read -l unfucked_command\\n'\n                '  if [ \"$unfucked_command\" != \"\" ]\\n'\n                '    eval $unfucked_command\\n{1}'\n                '  end\\n'\n                'end').format(alias_name, alter_history)\n\n    def get_aliases(self):\n        overridden = self._get_overridden_aliases()\n        functions = _get_functions(overridden)\n        raw_aliases = _get_aliases(overridden)\n        functions.update(raw_aliases)\n        return functions\n\n    def _expand_aliases(self, command_script):\n        aliases = self.get_aliases()\n        binary = command_script.split(' ')[0]\n        if binary in aliases and aliases[binary] != binary:\n            return command_script.replace(binary, aliases[binary], 1)\n        elif binary in aliases:\n            return u'fish -ic \"{}\"'.format(command_script.replace('\"', r'\\\"'))\n        else:\n            return command_script\n\n    def _get_history_file_name(self):\n        return os.path.expanduser('~/.config/fish/fish_history')\n\n    def _get_history_line(self, command_script):\n        return u'- cmd: {}\\n   when: {}\\n'.format(command_script, int(time()))\n\n    def _script_from_history(self, line):\n        if '- cmd: ' in line:\n            return line.split('- cmd: ', 1)[1]\n        else:\n            return ''\n\n    def and_(self, *commands):\n        return u'; and '.join(commands)\n\n    def or_(self, *commands):\n        return u'; or '.join(commands)\n\n    def how_to_configure(self):\n        return self._create_shell_configuration(\n            content=u\"thefuck --alias | source\",\n            path='~/.config/fish/config.fish',\n            reload='fish')\n\n    def put_to_history(self, command):\n        try:\n            return self._put_to_history(command)\n        except IOError:\n            logs.exception(\"Can't update history\", sys.exc_info())\n\n    def _put_to_history(self, command_script):\n        \n        history_file_name = self._get_history_file_name()\n        if os.path.isfile(history_file_name):\n            with open(history_file_name, 'a') as history:\n                entry = self._get_history_line(command_script)\n                if six.PY2:\n                    history.write(entry.encode('utf-8'))\n                else:\n                    history.write(entry)\n", "comments": "Puts command script to shell history.\n.\n# It is VERY important to have the variables declared WITHIN the alias\n", "content": "from subprocess import Popen, PIPE\nfrom time import time\nimport os\nimport sys\nimport six\nfrom .. import logs\nfrom ..conf import settings\nfrom ..utils import DEVNULL, cache\nfrom .generic import Generic\n\n\n@cache('~/.config/fish/config.fish', '~/.config/fish/functions')\ndef _get_functions(overridden):\n    proc = Popen(['fish', '-ic', 'functions'], stdout=PIPE, stderr=DEVNULL)\n    functions = proc.stdout.read().decode('utf-8').strip().split('\\n')\n    return {func: func for func in functions if func not in overridden}\n\n\n@cache('~/.config/fish/config.fish')\ndef _get_aliases(overridden):\n    aliases = {}\n    proc = Popen(['fish', '-ic', 'alias'], stdout=PIPE, stderr=DEVNULL)\n    alias_out = proc.stdout.read().decode('utf-8').strip().split('\\n')\n    for alias in alias_out:\n        name, value = alias.replace('alias ', '', 1).split(' ', 1)\n        if name not in overridden:\n            aliases[name] = value\n    return aliases\n\n\nclass Fish(Generic):\n    def _get_overridden_aliases(self):\n        overridden = os.environ.get('THEFUCK_OVERRIDDEN_ALIASES',\n                                    os.environ.get('TF_OVERRIDDEN_ALIASES', ''))\n        default = {'cd', 'grep', 'ls', 'man', 'open'}\n        for alias in overridden.split(','):\n            default.add(alias.strip())\n        return default\n\n    def app_alias(self, alias_name):\n        if settings.alter_history:\n            alter_history = ('    builtin history delete --exact'\n                             ' --case-sensitive -- $fucked_up_command\\n'\n                             '    builtin history merge ^ /dev/null\\n')\n        else:\n            alter_history = ''\n        # It is VERY important to have the variables declared WITHIN the alias\n        return ('function {0} -d \"Correct your previous console command\"\\n'\n                '  set -l fucked_up_command $history[1]\\n'\n                '  env TF_SHELL=fish TF_ALIAS={0} PYTHONIOENCODING=utf-8'\n                ' thefuck $fucked_up_command | read -l unfucked_command\\n'\n                '  if [ \"$unfucked_command\" != \"\" ]\\n'\n                '    eval $unfucked_command\\n{1}'\n                '  end\\n'\n                'end').format(alias_name, alter_history)\n\n    def get_aliases(self):\n        overridden = self._get_overridden_aliases()\n        functions = _get_functions(overridden)\n        raw_aliases = _get_aliases(overridden)\n        functions.update(raw_aliases)\n        return functions\n\n    def _expand_aliases(self, command_script):\n        aliases = self.get_aliases()\n        binary = command_script.split(' ')[0]\n        if binary in aliases and aliases[binary] != binary:\n            return command_script.replace(binary, aliases[binary], 1)\n        elif binary in aliases:\n            return u'fish -ic \"{}\"'.format(command_script.replace('\"', r'\\\"'))\n        else:\n            return command_script\n\n    def _get_history_file_name(self):\n        return os.path.expanduser('~/.config/fish/fish_history')\n\n    def _get_history_line(self, command_script):\n        return u'- cmd: {}\\n   when: {}\\n'.format(command_script, int(time()))\n\n    def _script_from_history(self, line):\n        if '- cmd: ' in line:\n            return line.split('- cmd: ', 1)[1]\n        else:\n            return ''\n\n    def and_(self, *commands):\n        return u'; and '.join(commands)\n\n    def or_(self, *commands):\n        return u'; or '.join(commands)\n\n    def how_to_configure(self):\n        return self._create_shell_configuration(\n            content=u\"thefuck --alias | source\",\n            path='~/.config/fish/config.fish',\n            reload='fish')\n\n    def put_to_history(self, command):\n        try:\n            return self._put_to_history(command)\n        except IOError:\n            logs.exception(\"Can't update history\", sys.exc_info())\n\n    def _put_to_history(self, command_script):\n        \"\"\"Puts command script to shell history.\"\"\"\n        history_file_name = self._get_history_file_name()\n        if os.path.isfile(history_file_name):\n            with open(history_file_name, 'a') as history:\n                entry = self._get_history_line(command_script)\n                if six.PY2:\n                    history.write(entry.encode('utf-8'))\n                else:\n                    history.write(entry)\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "fish.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/shells/fish.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}