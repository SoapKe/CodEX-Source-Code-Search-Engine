{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo.addons.account.tests.account_test_classes import AccountingTestCase\n\n\nclass TestStockValuation(AccountingTestCase):\n    def setUp(self):\n        super(TestStockValuation, self).setUp()\n        self.supplier_location = self.env.ref('stock.stock_location_suppliers')\n        self.stock_location = self.env.ref('stock.stock_location_stock')\n        self.partner_id = self.env.ref('base.res_partner_1')\n        self.product1 = self.env.ref('product.product_product_8')\n\n        self.acc_payable = self.env['account.account'].search([('name', '=', 'Account Payable')]).id\n        self.acc_expense = self.env['account.account'].search([('name', '=', 'Expenses')]).id\n        self.acc_receivable = self.env['account.account'].search([('name', '=', 'Account Receivable')]).id\n        self.acc_sale = self.env['account.account'].search([('name', '=', 'Product Sales')]).id\n        self.acc_stock_in = self.env['account.account'].search([('name', '=', 'Stock Interim Account (Received)')]).id\n        self.acc_stock_out = self.env['account.account'].search([('name', '=', 'Stock Interim Account (Delivered)')]).id\n\n    def _dropship_product1(self):\n        \n        dropshipping_route = self.env.ref('stock_dropshipping.route_drop_shipping')\n        mto_route = self.env.ref('stock.route_warehouse0_mto')\n        self.product1.write({'route_ids': [(6, 0, [dropshipping_route.id, mto_route.id])]})\n\n        \n        vendor1 = self.env['res.partner'].create({'name': 'vendor1'})\n        seller1 = self.env['product.supplierinfo'].create({\n            'name': vendor1.id,\n            'price': 8,\n        })\n        self.product1.write({'seller_ids': [(6, 0, [seller1.id])]})\n\n        \n        customer1 = self.env['res.partner'].create({'name': 'customer1'})\n        sale_order1 = self.env['sale.order'].create({\n            'partner_id': customer1.id,\n            'partner_invoice_id': customer1.id,\n            'partner_shipping_id': customer1.id,\n            'order_line': [(0, 0, {\n                'name': self.product1.name,\n                'product_id': self.product1.id,\n                'product_uom_qty': 1,\n                'product_uom': self.product1.uom_id.id,\n                'price_unit': 12,\n            })],\n            'pricelist_id': self.env.ref('product.list0').id,\n            'picking_policy': 'direct',\n        })\n        sale_order1.action_confirm()\n\n        \n        purchase_order1 = self.env['purchase.order'].search([('group_id', '=', sale_order1.procurement_group_id.id)])\n        purchase_order1.button_confirm()\n\n        \n        self.assertEqual(len(sale_order1.picking_ids), 1)\n        self.assertEqual(sale_order1.picking_ids.move_lines._is_dropshipped(), True)\n        wizard = sale_order1.picking_ids.button_validate()\n        immediate_transfer = self.env[wizard['res_model']].browse(wizard['res_id'])\n        immediate_transfer.process()\n        self.assertEqual(sale_order1.picking_ids.state, 'done')\n\n        \n        vendor_bill1 = self.env['account.invoice'].create({\n            'partner_id': vendor1.id,\n            'purchase_id': purchase_order1.id,\n            'account_id': vendor1.property_account_payable_id.id,\n            'type': 'in_invoice',\n        })\n        vendor_bill1.purchase_order_change()\n        vendor_bill1.action_invoice_open()\n\n        \n        customer_invoice1_id = sale_order1.action_invoice_create()\n        customer_invoice1 = self.env['account.invoice'].browse(customer_invoice1_id)\n        customer_invoice1.action_invoice_open()\n\n        all_amls = vendor_bill1.move_id.line_ids + customer_invoice1.move_id.line_ids\n        if sale_order1.picking_ids.move_lines.account_move_ids:\n            all_amls |= sale_order1.picking_ids.move_lines.account_move_ids.line_ids\n        return all_amls\n\n    def _check_results(self, expected_aml, expected_aml_count, all_amls):\n        \n        \n        result_aml = {}\n        for aml in all_amls:\n            account_id = aml.account_id.id\n            if result_aml.get(account_id):\n                debit = result_aml[account_id][0]\n                credit = result_aml[account_id][1]\n                result_aml[account_id] = (debit + aml.debit, credit + aml.credit)\n            else:\n                result_aml[account_id] = (aml.debit, aml.credit)\n\n        self.assertEqual(len(all_amls), expected_aml_count)\n\n        for k, v in expected_aml.items():\n            self.assertEqual(result_aml[k], v)\n\n    \n    \n    \n    def test_dropship_standard_perpetual_continental_ordered(self):\n        self.env.user.company_id.anglo_saxon_accounting = False\n        self.product1.product_tmpl_id.cost_method = 'standard'\n        self.product1.product_tmpl_id.standard_price = 10\n        self.product1.product_tmpl_id.valuation = 'real_time'\n        self.product1.product_tmpl_id.invoice_policy = 'order'\n\n        all_amls = self._dropship_product1()\n\n        expected_aml = {\n            self.acc_payable:    (0.0, 8.0),\n            self.acc_expense:    (8.0, 0.0),\n            self.acc_receivable: (12.0, 0.0),\n            self.acc_sale:       (0.0, 12.0),\n        }\n\n        self._check_results(expected_aml, 4, all_amls)\n\n    def test_dropship_standard_perpetual_continental_delivered(self):\n        self.env.user.company_id.anglo_saxon_accounting = False\n        self.product1.product_tmpl_id.cost_method = 'standard'\n        self.product1.product_tmpl_id.standard_price = 10\n        self.product1.product_tmpl_id.valuation = 'real_time'\n        self.product1.product_tmpl_id.invoice_policy = 'delivery'\n\n        all_amls = self._dropship_product1()\n\n        expected_aml = {\n            self.acc_payable:    (0.0, 8.0),\n            self.acc_expense:    (8.0, 0.0),\n            self.acc_receivable: (12.0, 0.0),\n            self.acc_sale:       (0.0, 12.0),\n        }\n\n        self._check_results(expected_aml, 4, all_amls)\n\n    def test_dropship_fifo_perpetual_continental_ordered(self):\n        self.env.user.company_id.anglo_saxon_accounting = False\n        self.product1.product_tmpl_id.cost_method = 'fifo'\n        self.product1.product_tmpl_id.standard_price = 10\n        self.product1.product_tmpl_id.valuation = 'real_time'\n        self.product1.product_tmpl_id.invoice_policy = 'order'\n\n        all_amls = self._dropship_product1()\n\n        expected_aml = {\n            self.acc_payable:    (0.0, 8.0),\n            self.acc_expense:    (8.0, 0.0),\n            self.acc_receivable: (12.0, 0.0),\n            self.acc_sale:       (0.0, 12.0),\n        }\n\n        self._check_results(expected_aml, 4, all_amls)\n\n    def test_dropship_fifo_perpetual_continental_delivered(self):\n        self.env.user.company_id.anglo_saxon_accounting = False\n\n        self.product1.product_tmpl_id.cost_method = 'fifo'\n        self.product1.product_tmpl_id.standard_price = 10\n        self.product1.product_tmpl_id.valuation = 'real_time'\n        self.product1.product_tmpl_id.invoice_policy = 'delivery'\n\n        all_amls = self._dropship_product1()\n\n        expected_aml = {\n            self.acc_payable:    (0.0, 8.0),\n            self.acc_expense:    (8.0, 0.0),\n            self.acc_receivable: (12.0, 0.0),\n            self.acc_sale:       (0.0, 12.0),\n        }\n\n        self._check_results(expected_aml, 4, all_amls)\n\n    \n    \n    \n    def test_dropship_standard_perpetual_anglosaxon_ordered(self):\n        self.env.user.company_id.anglo_saxon_accounting = True\n        self.product1.product_tmpl_id.cost_method = 'standard'\n        self.product1.product_tmpl_id.standard_price = 10\n        self.product1.product_tmpl_id.valuation = 'real_time'\n        self.product1.product_tmpl_id.invoice_policy = 'order'\n\n        all_amls = self._dropship_product1()\n\n        expected_aml = {\n            self.acc_payable:    (0.0, 8.0),\n            self.acc_expense:    (10.0, 0.0),\n            self.acc_receivable: (12.0, 0.0),\n            self.acc_sale:       (0.0, 12.0),\n            self.acc_stock_in:   (8.0, 10.0),\n            self.acc_stock_out:  (10.0, 10.0),\n        }\n        \n        \n        \n\n        self._check_results(expected_aml, 8, all_amls)\n\n    def test_dropship_standard_perpetual_anglosaxon_delivered(self):\n        self.env.user.company_id.anglo_saxon_accounting = True\n        self.product1.product_tmpl_id.cost_method = 'standard'\n        self.product1.product_tmpl_id.standard_price = 10\n        self.product1.product_tmpl_id.valuation = 'real_time'\n        self.product1.product_tmpl_id.invoice_policy = 'delivery'\n\n        all_amls = self._dropship_product1()\n\n        expected_aml = {\n            self.acc_payable:    (0.0, 8.0),\n            self.acc_expense:    (10.0, 0.0),\n            self.acc_receivable: (12.0, 0.0),\n            self.acc_sale:       (0.0, 12.0),\n            self.acc_stock_in:   (8.0, 10.0),\n            self.acc_stock_out:  (10.0, 10.0),\n        }\n        \n        \n        \n\n        self._check_results(expected_aml, 8, all_amls)\n\n    def test_dropship_fifo_perpetual_anglosaxon_ordered(self):\n        self.env.user.company_id.anglo_saxon_accounting = True\n        self.product1.product_tmpl_id.cost_method = 'fifo'\n        self.product1.product_tmpl_id.standard_price = 10\n        self.product1.product_tmpl_id.valuation = 'real_time'\n        self.product1.product_tmpl_id.invoice_policy = 'order'\n\n        all_amls = self._dropship_product1()\n\n        expected_aml = {\n            self.acc_payable:    (0.0, 8.0),\n            self.acc_expense:    (8.0, 0.0),\n            self.acc_receivable: (12.0, 0.0),\n            self.acc_sale:       (0.0, 12.0),\n            self.acc_stock_in:   (8.0, 8.0),\n            self.acc_stock_out:  (8.0, 8.0),\n        }\n\n        self._check_results(expected_aml, 8, all_amls)\n\n    def test_dropship_fifo_perpetual_anglosaxon_delivered(self):\n        self.env.user.company_id.anglo_saxon_accounting = True\n        self.product1.product_tmpl_id.cost_method = 'fifo'\n        self.product1.product_tmpl_id.standard_price = 10\n        self.product1.product_tmpl_id.valuation = 'real_time'\n        self.product1.product_tmpl_id.invoice_policy = 'delivery'\n\n        all_amls = self._dropship_product1()\n\n        expected_aml = {\n            self.acc_payable:    (0.0, 8.0),\n            self.acc_expense:    (8.0, 0.0),\n            self.acc_receivable: (12.0, 0.0),\n            self.acc_sale:       (0.0, 12.0),\n            self.acc_stock_in:   (8.0, 8.0),\n            self.acc_stock_out:  (8.0, 8.0),\n        }\n\n        self._check_results(expected_aml, 8, all_amls)\n\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     enable dropship mto route product    add vendor    sell one unit product    confirm purchase order    validate dropshipping picking    create vendor bill    create customer invoice    construct dict similar  expected aml   amls  order    compare                                                                                  continental                                                                                                                                                              anglosaxon                                                                                 interim in balanced difference po line    price unit standard price  we could set price difference account    category compensate     interim in balanced difference po line    price unit standard price  we could set price difference account    category compensate  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.addons.account.tests.account_test_classes import AccountingTestCase\n\n\nclass TestStockValuation(AccountingTestCase):\n    def setUp(self):\n        super(TestStockValuation, self).setUp()\n        self.supplier_location = self.env.ref('stock.stock_location_suppliers')\n        self.stock_location = self.env.ref('stock.stock_location_stock')\n        self.partner_id = self.env.ref('base.res_partner_1')\n        self.product1 = self.env.ref('product.product_product_8')\n\n        self.acc_payable = self.env['account.account'].search([('name', '=', 'Account Payable')]).id\n        self.acc_expense = self.env['account.account'].search([('name', '=', 'Expenses')]).id\n        self.acc_receivable = self.env['account.account'].search([('name', '=', 'Account Receivable')]).id\n        self.acc_sale = self.env['account.account'].search([('name', '=', 'Product Sales')]).id\n        self.acc_stock_in = self.env['account.account'].search([('name', '=', 'Stock Interim Account (Received)')]).id\n        self.acc_stock_out = self.env['account.account'].search([('name', '=', 'Stock Interim Account (Delivered)')]).id\n\n    def _dropship_product1(self):\n        # enable the dropship and MTO route on the product\n        dropshipping_route = self.env.ref('stock_dropshipping.route_drop_shipping')\n        mto_route = self.env.ref('stock.route_warehouse0_mto')\n        self.product1.write({'route_ids': [(6, 0, [dropshipping_route.id, mto_route.id])]})\n\n        # add a vendor\n        vendor1 = self.env['res.partner'].create({'name': 'vendor1'})\n        seller1 = self.env['product.supplierinfo'].create({\n            'name': vendor1.id,\n            'price': 8,\n        })\n        self.product1.write({'seller_ids': [(6, 0, [seller1.id])]})\n\n        # sell one unit of this product\n        customer1 = self.env['res.partner'].create({'name': 'customer1'})\n        sale_order1 = self.env['sale.order'].create({\n            'partner_id': customer1.id,\n            'partner_invoice_id': customer1.id,\n            'partner_shipping_id': customer1.id,\n            'order_line': [(0, 0, {\n                'name': self.product1.name,\n                'product_id': self.product1.id,\n                'product_uom_qty': 1,\n                'product_uom': self.product1.uom_id.id,\n                'price_unit': 12,\n            })],\n            'pricelist_id': self.env.ref('product.list0').id,\n            'picking_policy': 'direct',\n        })\n        sale_order1.action_confirm()\n\n        # confirm the purchase order\n        purchase_order1 = self.env['purchase.order'].search([('group_id', '=', sale_order1.procurement_group_id.id)])\n        purchase_order1.button_confirm()\n\n        # validate the dropshipping picking\n        self.assertEqual(len(sale_order1.picking_ids), 1)\n        self.assertEqual(sale_order1.picking_ids.move_lines._is_dropshipped(), True)\n        wizard = sale_order1.picking_ids.button_validate()\n        immediate_transfer = self.env[wizard['res_model']].browse(wizard['res_id'])\n        immediate_transfer.process()\n        self.assertEqual(sale_order1.picking_ids.state, 'done')\n\n        # create the vendor bill\n        vendor_bill1 = self.env['account.invoice'].create({\n            'partner_id': vendor1.id,\n            'purchase_id': purchase_order1.id,\n            'account_id': vendor1.property_account_payable_id.id,\n            'type': 'in_invoice',\n        })\n        vendor_bill1.purchase_order_change()\n        vendor_bill1.action_invoice_open()\n\n        # create the customer invoice\n        customer_invoice1_id = sale_order1.action_invoice_create()\n        customer_invoice1 = self.env['account.invoice'].browse(customer_invoice1_id)\n        customer_invoice1.action_invoice_open()\n\n        all_amls = vendor_bill1.move_id.line_ids + customer_invoice1.move_id.line_ids\n        if sale_order1.picking_ids.move_lines.account_move_ids:\n            all_amls |= sale_order1.picking_ids.move_lines.account_move_ids.line_ids\n        return all_amls\n\n    def _check_results(self, expected_aml, expected_aml_count, all_amls):\n        # Construct a dict similar to `expected_aml` with `all_amls` in order to\n        # compare them.\n        result_aml = {}\n        for aml in all_amls:\n            account_id = aml.account_id.id\n            if result_aml.get(account_id):\n                debit = result_aml[account_id][0]\n                credit = result_aml[account_id][1]\n                result_aml[account_id] = (debit + aml.debit, credit + aml.credit)\n            else:\n                result_aml[account_id] = (aml.debit, aml.credit)\n\n        self.assertEqual(len(all_amls), expected_aml_count)\n\n        for k, v in expected_aml.items():\n            self.assertEqual(result_aml[k], v)\n\n    # -------------------------------------------------------------------------\n    # Continental\n    # -------------------------------------------------------------------------\n    def test_dropship_standard_perpetual_continental_ordered(self):\n        self.env.user.company_id.anglo_saxon_accounting = False\n        self.product1.product_tmpl_id.cost_method = 'standard'\n        self.product1.product_tmpl_id.standard_price = 10\n        self.product1.product_tmpl_id.valuation = 'real_time'\n        self.product1.product_tmpl_id.invoice_policy = 'order'\n\n        all_amls = self._dropship_product1()\n\n        expected_aml = {\n            self.acc_payable:    (0.0, 8.0),\n            self.acc_expense:    (8.0, 0.0),\n            self.acc_receivable: (12.0, 0.0),\n            self.acc_sale:       (0.0, 12.0),\n        }\n\n        self._check_results(expected_aml, 4, all_amls)\n\n    def test_dropship_standard_perpetual_continental_delivered(self):\n        self.env.user.company_id.anglo_saxon_accounting = False\n        self.product1.product_tmpl_id.cost_method = 'standard'\n        self.product1.product_tmpl_id.standard_price = 10\n        self.product1.product_tmpl_id.valuation = 'real_time'\n        self.product1.product_tmpl_id.invoice_policy = 'delivery'\n\n        all_amls = self._dropship_product1()\n\n        expected_aml = {\n            self.acc_payable:    (0.0, 8.0),\n            self.acc_expense:    (8.0, 0.0),\n            self.acc_receivable: (12.0, 0.0),\n            self.acc_sale:       (0.0, 12.0),\n        }\n\n        self._check_results(expected_aml, 4, all_amls)\n\n    def test_dropship_fifo_perpetual_continental_ordered(self):\n        self.env.user.company_id.anglo_saxon_accounting = False\n        self.product1.product_tmpl_id.cost_method = 'fifo'\n        self.product1.product_tmpl_id.standard_price = 10\n        self.product1.product_tmpl_id.valuation = 'real_time'\n        self.product1.product_tmpl_id.invoice_policy = 'order'\n\n        all_amls = self._dropship_product1()\n\n        expected_aml = {\n            self.acc_payable:    (0.0, 8.0),\n            self.acc_expense:    (8.0, 0.0),\n            self.acc_receivable: (12.0, 0.0),\n            self.acc_sale:       (0.0, 12.0),\n        }\n\n        self._check_results(expected_aml, 4, all_amls)\n\n    def test_dropship_fifo_perpetual_continental_delivered(self):\n        self.env.user.company_id.anglo_saxon_accounting = False\n\n        self.product1.product_tmpl_id.cost_method = 'fifo'\n        self.product1.product_tmpl_id.standard_price = 10\n        self.product1.product_tmpl_id.valuation = 'real_time'\n        self.product1.product_tmpl_id.invoice_policy = 'delivery'\n\n        all_amls = self._dropship_product1()\n\n        expected_aml = {\n            self.acc_payable:    (0.0, 8.0),\n            self.acc_expense:    (8.0, 0.0),\n            self.acc_receivable: (12.0, 0.0),\n            self.acc_sale:       (0.0, 12.0),\n        }\n\n        self._check_results(expected_aml, 4, all_amls)\n\n    # -------------------------------------------------------------------------\n    # Anglosaxon\n    # -------------------------------------------------------------------------\n    def test_dropship_standard_perpetual_anglosaxon_ordered(self):\n        self.env.user.company_id.anglo_saxon_accounting = True\n        self.product1.product_tmpl_id.cost_method = 'standard'\n        self.product1.product_tmpl_id.standard_price = 10\n        self.product1.product_tmpl_id.valuation = 'real_time'\n        self.product1.product_tmpl_id.invoice_policy = 'order'\n\n        all_amls = self._dropship_product1()\n\n        expected_aml = {\n            self.acc_payable:    (0.0, 8.0),\n            self.acc_expense:    (10.0, 0.0),\n            self.acc_receivable: (12.0, 0.0),\n            self.acc_sale:       (0.0, 12.0),\n            self.acc_stock_in:   (8.0, 10.0),\n            self.acc_stock_out:  (10.0, 10.0),\n        }\n        # Interim IN is not balanced because because there's a difference between the po line\n        # price unit and the standard price. We could set a price difference account on the\n        # category to compensate.\n\n        self._check_results(expected_aml, 8, all_amls)\n\n    def test_dropship_standard_perpetual_anglosaxon_delivered(self):\n        self.env.user.company_id.anglo_saxon_accounting = True\n        self.product1.product_tmpl_id.cost_method = 'standard'\n        self.product1.product_tmpl_id.standard_price = 10\n        self.product1.product_tmpl_id.valuation = 'real_time'\n        self.product1.product_tmpl_id.invoice_policy = 'delivery'\n\n        all_amls = self._dropship_product1()\n\n        expected_aml = {\n            self.acc_payable:    (0.0, 8.0),\n            self.acc_expense:    (10.0, 0.0),\n            self.acc_receivable: (12.0, 0.0),\n            self.acc_sale:       (0.0, 12.0),\n            self.acc_stock_in:   (8.0, 10.0),\n            self.acc_stock_out:  (10.0, 10.0),\n        }\n        # Interim IN is not balanced because because there's a difference between the po line\n        # price unit and the standard price. We could set a price difference account on the\n        # category to compensate.\n\n        self._check_results(expected_aml, 8, all_amls)\n\n    def test_dropship_fifo_perpetual_anglosaxon_ordered(self):\n        self.env.user.company_id.anglo_saxon_accounting = True\n        self.product1.product_tmpl_id.cost_method = 'fifo'\n        self.product1.product_tmpl_id.standard_price = 10\n        self.product1.product_tmpl_id.valuation = 'real_time'\n        self.product1.product_tmpl_id.invoice_policy = 'order'\n\n        all_amls = self._dropship_product1()\n\n        expected_aml = {\n            self.acc_payable:    (0.0, 8.0),\n            self.acc_expense:    (8.0, 0.0),\n            self.acc_receivable: (12.0, 0.0),\n            self.acc_sale:       (0.0, 12.0),\n            self.acc_stock_in:   (8.0, 8.0),\n            self.acc_stock_out:  (8.0, 8.0),\n        }\n\n        self._check_results(expected_aml, 8, all_amls)\n\n    def test_dropship_fifo_perpetual_anglosaxon_delivered(self):\n        self.env.user.company_id.anglo_saxon_accounting = True\n        self.product1.product_tmpl_id.cost_method = 'fifo'\n        self.product1.product_tmpl_id.standard_price = 10\n        self.product1.product_tmpl_id.valuation = 'real_time'\n        self.product1.product_tmpl_id.invoice_policy = 'delivery'\n\n        all_amls = self._dropship_product1()\n\n        expected_aml = {\n            self.acc_payable:    (0.0, 8.0),\n            self.acc_expense:    (8.0, 0.0),\n            self.acc_receivable: (12.0, 0.0),\n            self.acc_sale:       (0.0, 12.0),\n            self.acc_stock_in:   (8.0, 8.0),\n            self.acc_stock_out:  (8.0, 8.0),\n        }\n\n        self._check_results(expected_aml, 8, all_amls)\n\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_stockvaluation.py", "id": "e74419c464d9a1113c06dbe3540fe6dd", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/stock_dropshipping/tests/test_stockvaluation.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}