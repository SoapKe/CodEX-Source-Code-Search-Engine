{"author": "nvbn", "code": "import pytest\nfrom thefuck.rules.git_push import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture\ndef output(branch_name):\n    if not branch_name:\n        return ''\n    return \n\n\n@pytest.mark.parametrize('script, branch_name', [\n    ('git push', 'master'),\n    ('git push origin', 'master')])\ndef test_match(output, script, branch_name):\n    assert match(Command(script, output))\n\n\ndef test_match_bitbucket(output_bitbucket):\n    assert not match(Command('git push origin', output_bitbucket))\n\n\n@pytest.mark.parametrize('script, branch_name', [\n    ('git push master', None),\n    ('ls', 'master')])\ndef test_not_match(output, script, branch_name):\n    assert not match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, branch_name, new_command', [\n    ('git push', 'master',\n     'git push --set-upstream origin master'),\n    ('git push master', 'master',\n     'git push --set-upstream origin master'),\n    ('git push -u', 'master',\n     'git push --set-upstream origin master'),\n    ('git push -u origin', 'master',\n     'git push --set-upstream origin master'),\n    ('git push origin', 'master',\n     'git push --set-upstream origin master'),\n    ('git push --set-upstream origin', 'master',\n     'git push --set-upstream origin master'),\n    ('git push --quiet', 'master',\n     'git push --set-upstream origin master --quiet'),\n    ('git push --quiet origin', 'master',\n     'git push --set-upstream origin master --quiet'),\n    ('git -c test=test push --quiet origin', 'master',\n     'git -c test=test push --set-upstream origin master --quiet'),\n    ('git push', \"test's\",\n     \"git push --set-upstream origin test\\\\'s\")])\ndef test_get_new_command(output, script, branch_name, new_command):\n    assert get_new_command(Command(script, output)) == new_command\n", "comments": "fatal: The current branch {} has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin {}\n\n'''.format(branch_name, branch_name)\n\n\n@pytest.fixture\ndef output_bitbucket():\n    return '''Total 0 (delta 0), reused 0 (delta 0)\nremote:\nremote: Create pull request for feature/set-upstream:\nremote:   https://bitbucket.org/set-upstream\nremote:\nTo git@bitbucket.org:test.git\n   e5e7fbb..700d998  feature/set-upstream -> feature/set-upstream\nBranch feature/set-upstream set up to track remote branch feature/set-upstream from origin.\n\n\n\n", "content": "import pytest\nfrom thefuck.rules.git_push import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture\ndef output(branch_name):\n    if not branch_name:\n        return ''\n    return '''fatal: The current branch {} has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin {}\n\n'''.format(branch_name, branch_name)\n\n\n@pytest.fixture\ndef output_bitbucket():\n    return '''Total 0 (delta 0), reused 0 (delta 0)\nremote:\nremote: Create pull request for feature/set-upstream:\nremote:   https://bitbucket.org/set-upstream\nremote:\nTo git@bitbucket.org:test.git\n   e5e7fbb..700d998  feature/set-upstream -> feature/set-upstream\nBranch feature/set-upstream set up to track remote branch feature/set-upstream from origin.\n'''\n\n\n@pytest.mark.parametrize('script, branch_name', [\n    ('git push', 'master'),\n    ('git push origin', 'master')])\ndef test_match(output, script, branch_name):\n    assert match(Command(script, output))\n\n\ndef test_match_bitbucket(output_bitbucket):\n    assert not match(Command('git push origin', output_bitbucket))\n\n\n@pytest.mark.parametrize('script, branch_name', [\n    ('git push master', None),\n    ('ls', 'master')])\ndef test_not_match(output, script, branch_name):\n    assert not match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, branch_name, new_command', [\n    ('git push', 'master',\n     'git push --set-upstream origin master'),\n    ('git push master', 'master',\n     'git push --set-upstream origin master'),\n    ('git push -u', 'master',\n     'git push --set-upstream origin master'),\n    ('git push -u origin', 'master',\n     'git push --set-upstream origin master'),\n    ('git push origin', 'master',\n     'git push --set-upstream origin master'),\n    ('git push --set-upstream origin', 'master',\n     'git push --set-upstream origin master'),\n    ('git push --quiet', 'master',\n     'git push --set-upstream origin master --quiet'),\n    ('git push --quiet origin', 'master',\n     'git push --set-upstream origin master --quiet'),\n    ('git -c test=test push --quiet origin', 'master',\n     'git -c test=test push --set-upstream origin master --quiet'),\n    ('git push', \"test's\",\n     \"git push --set-upstream origin test\\\\'s\")])\ndef test_get_new_command(output, script, branch_name, new_command):\n    assert get_new_command(Command(script, output)) == new_command\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_git_push.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_git_push.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}