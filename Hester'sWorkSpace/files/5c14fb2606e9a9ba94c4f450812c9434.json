{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    mimetype2ext,\n    ExtractorError,\n)\n\n\nclass ImgurIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:i\\.)?imgur\\.com/(?:(?:gallery|(?:topic|r)/[^/]+)/)?(?P<id>[a-zA-Z0-9]{6,})(?:[/?\n\n    _TESTS = [{\n        'url': 'https://i.imgur.com/A61SaA1.gifv',\n        'info_dict': {\n            'id': 'A61SaA1',\n            'ext': 'mp4',\n            'title': 're:Imgur GIF$|MRW gifv is up and running without any bugs$',\n            'description': 'Imgur: The most awesome images on the Internet.',\n        },\n    }, {\n        'url': 'https://imgur.com/A61SaA1',\n        'info_dict': {\n            'id': 'A61SaA1',\n            'ext': 'mp4',\n            'title': 're:Imgur GIF$|MRW gifv is up and running without any bugs$',\n            'description': 'Imgur: The most awesome images on the Internet.',\n        },\n    }, {\n        'url': 'https://imgur.com/gallery/YcAQlkx',\n        'info_dict': {\n            'id': 'YcAQlkx',\n            'ext': 'mp4',\n            'title': 'Classic Steve Carell gif...cracks me up everytime....damn the repost downvotes....',\n            'description': 'Imgur: The most awesome images on the Internet.'\n\n        }\n    }, {\n        'url': 'http://imgur.com/topic/Funny/N8rOudd',\n        'only_matching': True,\n    }, {\n        'url': 'http://imgur.com/r/aww/VQcQPhM',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(\n            compat_urlparse.urljoin(url, video_id), video_id)\n\n        width = int_or_none(self._og_search_property(\n            'video:width', webpage, default=None))\n        height = int_or_none(self._og_search_property(\n            'video:height', webpage, default=None))\n\n        video_elements = self._search_regex(\n            r'(?s)<div class=\"video-elements\">(.*?)</div>',\n            webpage, 'video elements', default=None)\n        if not video_elements:\n            raise ExtractorError(\n                'No sources found for video %s. Maybe an image?' % video_id,\n                expected=True)\n\n        formats = []\n        for m in re.finditer(r'<source\\s+src=\"(?P<src>[^\"]+)\"\\s+type=\"(?P<type>[^\"]+)\"', video_elements):\n            formats.append({\n                'format_id': m.group('type').partition('/')[2],\n                'url': self._proto_relative_url(m.group('src')),\n                'ext': mimetype2ext(m.group('type')),\n                'acodec': 'none',\n                'width': width,\n                'height': height,\n                'http_headers': {\n                    'User-Agent': 'youtube-dl (like wget)',\n                },\n            })\n\n        gif_json = self._search_regex(\n            r'(?s)var\\s+videoItem\\s*=\\s*(\\{.*?\\})',\n            webpage, 'GIF code', fatal=False)\n        if gif_json:\n            gifd = self._parse_json(\n                gif_json, video_id, transform_source=js_to_json)\n            formats.append({\n                'format_id': 'gif',\n                'preference': -10,\n                'width': width,\n                'height': height,\n                'ext': 'gif',\n                'acodec': 'none',\n                'vcodec': 'gif',\n                'container': 'gif',\n                'url': self._proto_relative_url(gifd['gifUrl']),\n                'filesize': gifd.get('size'),\n                'http_headers': {\n                    'User-Agent': 'youtube-dl (like wget)',\n                },\n            })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'description': self._og_search_description(webpage),\n            'title': self._og_search_title(webpage),\n        }\n\n\nclass ImgurAlbumIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:i\\.)?imgur\\.com/(?:(?:a|gallery|topic/[^/]+)/)?(?P<id>[a-zA-Z0-9]{5})(?:[/?\n\n    _TESTS = [{\n        'url': 'http://imgur.com/gallery/Q95ko',\n        'info_dict': {\n            'id': 'Q95ko',\n        },\n        'playlist_count': 25,\n    }, {\n        'url': 'http://imgur.com/a/j6Orj',\n        'only_matching': True,\n    }, {\n        'url': 'http://imgur.com/topic/Aww/ll5Vk',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        album_id = self._match_id(url)\n\n        album_images = self._download_json(\n            'http://imgur.com/gallery/%s/album_images/hit.json?all=true' % album_id,\n            album_id, fatal=False)\n\n        if album_images:\n            data = album_images.get('data')\n            if data and isinstance(data, dict):\n                images = data.get('images')\n                if images and isinstance(images, list):\n                    entries = [\n                        self.url_result('http://imgur.com/%s' % image['hash'])\n                        for image in images if image.get('hash')]\n                    return self.playlist_result(entries, album_id)\n\n        \n        return self.url_result('http://imgur.com/%s' % album_id, ImgurIE.ie_key())\n", "comments": "#&]+|\\.[a-z]+)?$'\n#&]+)?$'\n# Fallback to single video\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    mimetype2ext,\n    ExtractorError,\n)\n\n\nclass ImgurIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:i\\.)?imgur\\.com/(?:(?:gallery|(?:topic|r)/[^/]+)/)?(?P<id>[a-zA-Z0-9]{6,})(?:[/?#&]+|\\.[a-z]+)?$'\n\n    _TESTS = [{\n        'url': 'https://i.imgur.com/A61SaA1.gifv',\n        'info_dict': {\n            'id': 'A61SaA1',\n            'ext': 'mp4',\n            'title': 're:Imgur GIF$|MRW gifv is up and running without any bugs$',\n            'description': 'Imgur: The most awesome images on the Internet.',\n        },\n    }, {\n        'url': 'https://imgur.com/A61SaA1',\n        'info_dict': {\n            'id': 'A61SaA1',\n            'ext': 'mp4',\n            'title': 're:Imgur GIF$|MRW gifv is up and running without any bugs$',\n            'description': 'Imgur: The most awesome images on the Internet.',\n        },\n    }, {\n        'url': 'https://imgur.com/gallery/YcAQlkx',\n        'info_dict': {\n            'id': 'YcAQlkx',\n            'ext': 'mp4',\n            'title': 'Classic Steve Carell gif...cracks me up everytime....damn the repost downvotes....',\n            'description': 'Imgur: The most awesome images on the Internet.'\n\n        }\n    }, {\n        'url': 'http://imgur.com/topic/Funny/N8rOudd',\n        'only_matching': True,\n    }, {\n        'url': 'http://imgur.com/r/aww/VQcQPhM',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(\n            compat_urlparse.urljoin(url, video_id), video_id)\n\n        width = int_or_none(self._og_search_property(\n            'video:width', webpage, default=None))\n        height = int_or_none(self._og_search_property(\n            'video:height', webpage, default=None))\n\n        video_elements = self._search_regex(\n            r'(?s)<div class=\"video-elements\">(.*?)</div>',\n            webpage, 'video elements', default=None)\n        if not video_elements:\n            raise ExtractorError(\n                'No sources found for video %s. Maybe an image?' % video_id,\n                expected=True)\n\n        formats = []\n        for m in re.finditer(r'<source\\s+src=\"(?P<src>[^\"]+)\"\\s+type=\"(?P<type>[^\"]+)\"', video_elements):\n            formats.append({\n                'format_id': m.group('type').partition('/')[2],\n                'url': self._proto_relative_url(m.group('src')),\n                'ext': mimetype2ext(m.group('type')),\n                'acodec': 'none',\n                'width': width,\n                'height': height,\n                'http_headers': {\n                    'User-Agent': 'youtube-dl (like wget)',\n                },\n            })\n\n        gif_json = self._search_regex(\n            r'(?s)var\\s+videoItem\\s*=\\s*(\\{.*?\\})',\n            webpage, 'GIF code', fatal=False)\n        if gif_json:\n            gifd = self._parse_json(\n                gif_json, video_id, transform_source=js_to_json)\n            formats.append({\n                'format_id': 'gif',\n                'preference': -10,\n                'width': width,\n                'height': height,\n                'ext': 'gif',\n                'acodec': 'none',\n                'vcodec': 'gif',\n                'container': 'gif',\n                'url': self._proto_relative_url(gifd['gifUrl']),\n                'filesize': gifd.get('size'),\n                'http_headers': {\n                    'User-Agent': 'youtube-dl (like wget)',\n                },\n            })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'description': self._og_search_description(webpage),\n            'title': self._og_search_title(webpage),\n        }\n\n\nclass ImgurAlbumIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:i\\.)?imgur\\.com/(?:(?:a|gallery|topic/[^/]+)/)?(?P<id>[a-zA-Z0-9]{5})(?:[/?#&]+)?$'\n\n    _TESTS = [{\n        'url': 'http://imgur.com/gallery/Q95ko',\n        'info_dict': {\n            'id': 'Q95ko',\n        },\n        'playlist_count': 25,\n    }, {\n        'url': 'http://imgur.com/a/j6Orj',\n        'only_matching': True,\n    }, {\n        'url': 'http://imgur.com/topic/Aww/ll5Vk',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        album_id = self._match_id(url)\n\n        album_images = self._download_json(\n            'http://imgur.com/gallery/%s/album_images/hit.json?all=true' % album_id,\n            album_id, fatal=False)\n\n        if album_images:\n            data = album_images.get('data')\n            if data and isinstance(data, dict):\n                images = data.get('images')\n                if images and isinstance(images, list):\n                    entries = [\n                        self.url_result('http://imgur.com/%s' % image['hash'])\n                        for image in images if image.get('hash')]\n                    return self.playlist_result(entries, album_id)\n\n        # Fallback to single video\n        return self.url_result('http://imgur.com/%s' % album_id, ImgurIE.ie_key())\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "imgur.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/imgur.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}