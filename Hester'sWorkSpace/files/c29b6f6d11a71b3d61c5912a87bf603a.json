{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo.addons.account.tests.account_test_classes import AccountingTestCase\nfrom odoo.exceptions import ValidationError\n\nimport time\n\n\nclass TestAccountInvoiceRounding(AccountingTestCase):\n\n    def setUp(self):\n        super(TestAccountInvoiceRounding, self).setUp()\n        self.account_receivable = self.env['account.account'].search(\n            [('user_type_id', '=', self.env.ref('account.data_account_type_receivable').id)], limit=1)\n        self.account_revenue = self.env['account.account'].search(\n            [('user_type_id', '=', self.env.ref('account.data_account_type_revenue').id)], limit=1)\n        self.fixed_tax = self.env['account.tax'].create({\n            'name': 'Test Tax',\n            'amount': 0.0,\n            'amount_type': 'fixed',\n        })\n\n    def create_cash_rounding(self, rounding, method, strategy):\n        return self.env['account.cash.rounding'].create({\n            'name': 'rounding ' + method,\n            'rounding': rounding,\n            'account_id': self.account_receivable.id,\n            'strategy': strategy,\n            'rounding_method': method,\n        })\n\n    def create_invoice(self, amount, cash_rounding_id, tax_amount=None):\n        \n        invoice_id = self.env['account.invoice'].create({\n            'partner_id': self.env.ref(\"base.res_partner_2\").id,\n            'reference_type': 'none',\n            'currency_id': self.env.ref('base.USD').id,\n            'name': 'invoice test rounding',\n            'account_id': self.account_receivable.id,\n            'type': 'out_invoice',\n            'date_invoice': time.strftime('%Y') + '-06-26',\n        })\n        if tax_amount:\n            self.fixed_tax.amount = tax_amount\n        self.env['account.invoice.line'].create({\n            'product_id': self.env.ref(\"product.product_product_4\").id,\n            'quantity': 1,\n            'price_unit': amount,\n            'invoice_id': invoice_id.id,\n            'name': 'something',\n            'account_id': self.account_revenue.id,\n            'invoice_line_tax_ids': [(6, 0, [self.fixed_tax.id])] if tax_amount else None\n        })\n        \n        invoice_id._onchange_invoice_line_ids()\n\n        \n        \n        \n        try:\n            invoice_id.cash_rounding_id = cash_rounding_id\n        except ValidationError:\n            pass\n\n        invoice_id._onchange_cash_rounding()\n        invoice_id.action_invoice_open()\n        return invoice_id\n\n    def _check_invoice_rounding(self, inv, exp_lines_values, exp_tax_values=None):\n        inv_lines = inv.invoice_line_ids\n        self.assertEquals(len(inv_lines), len(exp_lines_values))\n        for i in range(0, len(exp_lines_values)):\n            self.assertEquals(inv_lines[i].price_unit, exp_lines_values[i])\n\n        if exp_tax_values:\n            tax_lines = inv.tax_line_ids\n            self.assertEquals(len(tax_lines), len(exp_tax_values))\n            for i in range(0, len(exp_tax_values)):\n                self.assertEquals(tax_lines[i].amount_total, exp_tax_values[i])\n\n    def test_rounding_add_invoice_line(self):\n        self._check_invoice_rounding(\n            self.create_invoice(100.2, self.create_cash_rounding(0.5, 'UP', 'add_invoice_line')),\n            [100.2, 0.3]\n        )\n        self._check_invoice_rounding(\n            self.create_invoice(100.9, self.create_cash_rounding(1.0, 'DOWN', 'add_invoice_line')),\n            [100.9, -0.9]\n        )\n        self._check_invoice_rounding(\n            self.create_invoice(100.5, self.create_cash_rounding(1.0, 'HALF-UP', 'add_invoice_line')),\n            [100.5, 0.5]\n        )\n\n    def test_rounding_biggest_tax(self):\n        self._check_invoice_rounding(\n            self.create_invoice(100.2, self.create_cash_rounding(0.5, 'UP', 'biggest_tax'), 1.0),\n            [100.2], [1.3]\n        )\n        self._check_invoice_rounding(\n            self.create_invoice(100.9, self.create_cash_rounding(1.0, 'DOWN', 'biggest_tax'), 2.0),\n            [100.9], [1.1]\n        )\n        self._check_invoice_rounding(\n            self.create_invoice(100.5, self.create_cash_rounding(1.0, 'HALF-UP', 'biggest_tax'), 1.0),\n            [100.5], [1.5]\n        )\n", "comments": "    returns open invoice            coding  utf 8        create tax line ids    we need set cash rounding id  onchange invoice line ids    avoid validationerror  check cash rounding onchange    well triggered tests  ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo.addons.account.tests.account_test_classes import AccountingTestCase\nfrom odoo.exceptions import ValidationError\n\nimport time\n\n\nclass TestAccountInvoiceRounding(AccountingTestCase):\n\n    def setUp(self):\n        super(TestAccountInvoiceRounding, self).setUp()\n        self.account_receivable = self.env['account.account'].search(\n            [('user_type_id', '=', self.env.ref('account.data_account_type_receivable').id)], limit=1)\n        self.account_revenue = self.env['account.account'].search(\n            [('user_type_id', '=', self.env.ref('account.data_account_type_revenue').id)], limit=1)\n        self.fixed_tax = self.env['account.tax'].create({\n            'name': 'Test Tax',\n            'amount': 0.0,\n            'amount_type': 'fixed',\n        })\n\n    def create_cash_rounding(self, rounding, method, strategy):\n        return self.env['account.cash.rounding'].create({\n            'name': 'rounding ' + method,\n            'rounding': rounding,\n            'account_id': self.account_receivable.id,\n            'strategy': strategy,\n            'rounding_method': method,\n        })\n\n    def create_invoice(self, amount, cash_rounding_id, tax_amount=None):\n        \"\"\" Returns an open invoice \"\"\"\n        invoice_id = self.env['account.invoice'].create({\n            'partner_id': self.env.ref(\"base.res_partner_2\").id,\n            'reference_type': 'none',\n            'currency_id': self.env.ref('base.USD').id,\n            'name': 'invoice test rounding',\n            'account_id': self.account_receivable.id,\n            'type': 'out_invoice',\n            'date_invoice': time.strftime('%Y') + '-06-26',\n        })\n        if tax_amount:\n            self.fixed_tax.amount = tax_amount\n        self.env['account.invoice.line'].create({\n            'product_id': self.env.ref(\"product.product_product_4\").id,\n            'quantity': 1,\n            'price_unit': amount,\n            'invoice_id': invoice_id.id,\n            'name': 'something',\n            'account_id': self.account_revenue.id,\n            'invoice_line_tax_ids': [(6, 0, [self.fixed_tax.id])] if tax_amount else None\n        })\n        # Create the tax_line_ids\n        invoice_id._onchange_invoice_line_ids()\n\n        # We need to set the cash_rounding_id after the _onchange_invoice_line_ids\n        # to avoid a ValidationError from _check_cash_rounding because the onchange\n        # are not well triggered in the tests.\n        try:\n            invoice_id.cash_rounding_id = cash_rounding_id\n        except ValidationError:\n            pass\n\n        invoice_id._onchange_cash_rounding()\n        invoice_id.action_invoice_open()\n        return invoice_id\n\n    def _check_invoice_rounding(self, inv, exp_lines_values, exp_tax_values=None):\n        inv_lines = inv.invoice_line_ids\n        self.assertEquals(len(inv_lines), len(exp_lines_values))\n        for i in range(0, len(exp_lines_values)):\n            self.assertEquals(inv_lines[i].price_unit, exp_lines_values[i])\n\n        if exp_tax_values:\n            tax_lines = inv.tax_line_ids\n            self.assertEquals(len(tax_lines), len(exp_tax_values))\n            for i in range(0, len(exp_tax_values)):\n                self.assertEquals(tax_lines[i].amount_total, exp_tax_values[i])\n\n    def test_rounding_add_invoice_line(self):\n        self._check_invoice_rounding(\n            self.create_invoice(100.2, self.create_cash_rounding(0.5, 'UP', 'add_invoice_line')),\n            [100.2, 0.3]\n        )\n        self._check_invoice_rounding(\n            self.create_invoice(100.9, self.create_cash_rounding(1.0, 'DOWN', 'add_invoice_line')),\n            [100.9, -0.9]\n        )\n        self._check_invoice_rounding(\n            self.create_invoice(100.5, self.create_cash_rounding(1.0, 'HALF-UP', 'add_invoice_line')),\n            [100.5, 0.5]\n        )\n\n    def test_rounding_biggest_tax(self):\n        self._check_invoice_rounding(\n            self.create_invoice(100.2, self.create_cash_rounding(0.5, 'UP', 'biggest_tax'), 1.0),\n            [100.2], [1.3]\n        )\n        self._check_invoice_rounding(\n            self.create_invoice(100.9, self.create_cash_rounding(1.0, 'DOWN', 'biggest_tax'), 2.0),\n            [100.9], [1.1]\n        )\n        self._check_invoice_rounding(\n            self.create_invoice(100.5, self.create_cash_rounding(1.0, 'HALF-UP', 'biggest_tax'), 1.0),\n            [100.5], [1.5]\n        )\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_account_invoice_rounding.py", "id": "c29b6f6d11a71b3d61c5912a87bf603a", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account/tests/test_account_invoice_rounding.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}