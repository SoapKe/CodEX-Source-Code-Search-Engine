{"author": "donnemartin", "code": "import theano\nimport theano.tensor as T\nimport numpy as np\n\ncoefficients = T.vector(\"coefficients\")\nx = T.scalar(\"x\")\nmax_coefficients_supported = 10000\n\n\ndef step(coeff, power, prior_value, free_var):\n    return prior_value + (coeff * (free_var ** power))\n\n\nfull_range = T.arange(max_coefficients_supported)\noutputs_info = np.zeros((), dtype=theano.config.floatX)\n\ncomponents, updates = theano.scan(fn=step,\n                                  sequences=[coefficients, full_range],\n                                  outputs_info=outputs_info,\n                                  non_sequences=x)\n\npolynomial = components[-1]\ncalculate_polynomial = theano.function(inputs=[coefficients, x],\n                                       outputs=polynomial,\n                                       updates=updates)\n\ntest_coeff = np.asarray([1, 0, 2], dtype=theano.config.floatX)\nprint(calculate_polynomial(test_coeff, 3))\n", "comments": "  generate components polynomial ", "content": "import theano\nimport theano.tensor as T\nimport numpy as np\n\ncoefficients = T.vector(\"coefficients\")\nx = T.scalar(\"x\")\nmax_coefficients_supported = 10000\n\n\ndef step(coeff, power, prior_value, free_var):\n    return prior_value + (coeff * (free_var ** power))\n\n# Generate the components of the polynomial\nfull_range = T.arange(max_coefficients_supported)\noutputs_info = np.zeros((), dtype=theano.config.floatX)\n\ncomponents, updates = theano.scan(fn=step,\n                                  sequences=[coefficients, full_range],\n                                  outputs_info=outputs_info,\n                                  non_sequences=x)\n\npolynomial = components[-1]\ncalculate_polynomial = theano.function(inputs=[coefficients, x],\n                                       outputs=polynomial,\n                                       updates=updates)\n\ntest_coeff = np.asarray([1, 0, 2], dtype=theano.config.floatX)\nprint(calculate_polynomial(test_coeff, 3))\n", "description": "Data science Python notebooks: Deep learning (TensorFlow, Theano, Caffe, Keras), scikit-learn, Kaggle, big data (Spark, Hadoop MapReduce, HDFS), matplotlib, pandas, NumPy, SciPy, Python essentials, AWS, and various command lines.", "file_name": "scan_ex1_solution.py", "id": "ae69139aabdc3a318963186b624f48af", "language": "Python", "project_name": "data-science-ipython-notebooks", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-data-science-ipython-notebooks/donnemartin-data-science-ipython-notebooks-a876e34/deep-learning/theano-tutorial/scan_tutorial/scan_ex1_solution.py", "save_time": "", "source": "", "update_at": "2018-03-13T23:30:30Z", "url": "https://github.com/donnemartin/data-science-ipython-notebooks", "wiki": true}