{"author": "HelloZeroNet", "code": "from lib.pybitcointools import bitcoin as btctools\nimport hashlib\n\necc_cache = {}\n\n\ndef encrypt(data, pubkey, ephemcurve=None, ciphername='aes-256-cbc'):\n    from lib import pyelliptic\n    curve, pubkey_x, pubkey_y, i = pyelliptic.ECC._decode_pubkey(pubkey)\n    if ephemcurve is None:\n        ephemcurve = curve\n    ephem = pyelliptic.ECC(curve=ephemcurve)\n    key = hashlib.sha512(ephem.raw_get_ecdh_key(pubkey_x, pubkey_y)).digest()\n    key_e, key_m = key[:32], key[32:]\n    pubkey = ephem.get_pubkey()\n    iv = pyelliptic.OpenSSL.rand(pyelliptic.OpenSSL.get_cipher(ciphername).get_blocksize())\n    ctx = pyelliptic.Cipher(key_e, iv, 1, ciphername)\n    ciphertext = iv + pubkey + ctx.ciphering(data)\n    mac = pyelliptic.hmac_sha256(key_m, ciphertext)\n    return key_e, ciphertext + mac\n\n\ndef split(encrypted):\n    iv = encrypted[0:16]\n    ciphertext = encrypted[16+70:-32]\n\n    return iv, ciphertext\n\n\ndef getEcc(privatekey=None):\n    from lib import pyelliptic\n    global eccs\n    if privatekey not in ecc_cache:\n        if privatekey:\n            publickey_bin = btctools.encode_pubkey(btctools.privtopub(privatekey), \"bin\")\n            publickey_openssl = toOpensslPublickey(publickey_bin)\n            privatekey_openssl = toOpensslPrivatekey(privatekey)\n            ecc_cache[privatekey] = pyelliptic.ECC(curve='secp256k1', privkey=privatekey_openssl, pubkey=publickey_openssl)\n        else:\n            ecc_cache[None] = pyelliptic.ECC()\n    return ecc_cache[privatekey]\n\n\ndef toOpensslPrivatekey(privatekey):\n    privatekey_bin = btctools.encode_privkey(privatekey, \"bin\")\n    return '\\x02\\xca\\x00\\x20' + privatekey_bin\n\n\ndef toOpensslPublickey(publickey):\n    publickey_bin = btctools.encode_pubkey(publickey, \"bin\")\n    publickey_bin = publickey_bin[1:]\n    publickey_openssl = '\\x02\\xca\\x00 ' + publickey_bin[:32] + '\\x00 ' + publickey_bin[32:]\n    return publickey_openssl\n", "comments": "", "content": "from lib.pybitcointools import bitcoin as btctools\nimport hashlib\n\necc_cache = {}\n\n\ndef encrypt(data, pubkey, ephemcurve=None, ciphername='aes-256-cbc'):\n    from lib import pyelliptic\n    curve, pubkey_x, pubkey_y, i = pyelliptic.ECC._decode_pubkey(pubkey)\n    if ephemcurve is None:\n        ephemcurve = curve\n    ephem = pyelliptic.ECC(curve=ephemcurve)\n    key = hashlib.sha512(ephem.raw_get_ecdh_key(pubkey_x, pubkey_y)).digest()\n    key_e, key_m = key[:32], key[32:]\n    pubkey = ephem.get_pubkey()\n    iv = pyelliptic.OpenSSL.rand(pyelliptic.OpenSSL.get_cipher(ciphername).get_blocksize())\n    ctx = pyelliptic.Cipher(key_e, iv, 1, ciphername)\n    ciphertext = iv + pubkey + ctx.ciphering(data)\n    mac = pyelliptic.hmac_sha256(key_m, ciphertext)\n    return key_e, ciphertext + mac\n\n\ndef split(encrypted):\n    iv = encrypted[0:16]\n    ciphertext = encrypted[16+70:-32]\n\n    return iv, ciphertext\n\n\ndef getEcc(privatekey=None):\n    from lib import pyelliptic\n    global eccs\n    if privatekey not in ecc_cache:\n        if privatekey:\n            publickey_bin = btctools.encode_pubkey(btctools.privtopub(privatekey), \"bin\")\n            publickey_openssl = toOpensslPublickey(publickey_bin)\n            privatekey_openssl = toOpensslPrivatekey(privatekey)\n            ecc_cache[privatekey] = pyelliptic.ECC(curve='secp256k1', privkey=privatekey_openssl, pubkey=publickey_openssl)\n        else:\n            ecc_cache[None] = pyelliptic.ECC()\n    return ecc_cache[privatekey]\n\n\ndef toOpensslPrivatekey(privatekey):\n    privatekey_bin = btctools.encode_privkey(privatekey, \"bin\")\n    return '\\x02\\xca\\x00\\x20' + privatekey_bin\n\n\ndef toOpensslPublickey(publickey):\n    publickey_bin = btctools.encode_pubkey(publickey, \"bin\")\n    publickey_bin = publickey_bin[1:]\n    publickey_openssl = '\\x02\\xca\\x00 ' + publickey_bin[:32] + '\\x00 ' + publickey_bin[32:]\n    return publickey_openssl\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "CryptMessage.py", "id": "ef36039957e436cf319282380e5dbc90", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/CryptMessage/CryptMessage.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}