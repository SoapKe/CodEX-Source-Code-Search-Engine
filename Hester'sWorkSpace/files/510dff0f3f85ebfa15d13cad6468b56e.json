{"author": "odoo", "code": "\nimport base64\nimport datetime\nimport logging\nimport time\nfrom hashlib import sha1\nfrom pprint import pformat\nfrom unicodedata import normalize\n\nimport requests\nfrom lxml import etree, objectify\nfrom werkzeug import urls, url_encode\n\nfrom odoo import api, fields, models, _\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.addons.payment_ogone.controllers.main import OgoneController\nfrom odoo.addons.payment_ogone.data import ogone\nfrom odoo.tools import DEFAULT_SERVER_DATE_FORMAT, ustr\nfrom odoo.tools.float_utils import float_compare, float_repr, float_round\n\n_logger = logging.getLogger(__name__)\n\n\nclass PaymentAcquirerOgone(models.Model):\n    _inherit = 'payment.acquirer'\n\n    provider = fields.Selection(selection_add=[('ogone', 'Ogone')])\n    ogone_pspid = fields.Char('PSPID', required_if_provider='ogone', groups='base.group_user')\n    ogone_userid = fields.Char('API User ID', required_if_provider='ogone', groups='base.group_user')\n    ogone_password = fields.Char('API User Password', required_if_provider='ogone', groups='base.group_user')\n    ogone_shakey_in = fields.Char('SHA Key IN', size=32, required_if_provider='ogone', groups='base.group_user')\n    ogone_shakey_out = fields.Char('SHA Key OUT', size=32, required_if_provider='ogone', groups='base.group_user')\n    ogone_alias_usage = fields.Char('Alias Usage', default=\"Allow saving my payment data\",\n                                    help=\"If you want to use Ogone Aliases, this default \"\n                                    \"Alias Usage will be presented to the customer as the \"\n                                    \"reason you want to keep his payment data\")\n\n    def _get_feature_support(self):\n        \"\"\"Get advanced feature support by provider.\n\n        Each provider should add its technical in the corresponding\n        key for the following features:\n            * fees: support payment fees computations\n            * authorize: support authorizing payment (separates\n                         authorization and capture)\n            * tokenize: support saving payment data in a payment.tokenize\n                        object\n        \"\"\"\n        res = super(PaymentAcquirerOgone, self)._get_feature_support()\n        res['tokenize'].append('ogone')\n        return res\n\n    def _get_ogone_urls(self, environment):\n        \"\"\" Ogone URLS:\n         - standard order: POST address for form-based \"\"\"\n        return {\n            'ogone_standard_order_url': 'https://secure.ogone.com/ncol/%s/orderstandard_utf8.asp' % (environment,),\n            'ogone_direct_order_url': 'https://secure.ogone.com/ncol/%s/orderdirect_utf8.asp' % (environment,),\n            'ogone_direct_query_url': 'https://secure.ogone.com/ncol/%s/querydirect_utf8.asp' % (environment,),\n            'ogone_afu_agree_url': 'https://secure.ogone.com/ncol/%s/AFU_agree.asp' % (environment,),\n        }\n\n    def _ogone_generate_shasign(self, inout, values):\n        \"\"\" Generate the shasign for incoming or outgoing communications.\n\n        :param string inout: 'in' (odoo contacting ogone) or 'out' (ogone\n                             contacting odoo). In this last case only some\n                             fields should be contained (see e-Commerce basic)\n        :param dict values: transaction values\n\n        :return string: shasign\n        \"\"\"\n        assert inout in ('in', 'out')\n        assert self.provider == 'ogone'\n        key = getattr(self, 'ogone_shakey_' + inout)\n\n        def filter_key(key):\n            if inout == 'in':\n                return True\n            else:\n                \n                \n                keys = [\n                    'AAVADDRESS',\n                    'AAVCHECK',\n                    'AAVMAIL',\n                    'AAVNAME',\n                    'AAVPHONE',\n                    'AAVZIP',\n                    'ACCEPTANCE',\n                    'ALIAS',\n                    'AMOUNT',\n                    'BIC',\n                    'BIN',\n                    'BRAND',\n                    'CARDNO',\n                    'CCCTY',\n                    'CN',\n                    'COMPLUS',\n                    'CREATION_STATUS',\n                    'CURRENCY',\n                    'CVCCHECK',\n                    'DCC_COMMPERCENTAGE',\n                    'DCC_CONVAMOUNT',\n                    'DCC_CONVCCY',\n                    'DCC_EXCHRATE',\n                    'DCC_EXCHRATESOURCE',\n                    'DCC_EXCHRATETS',\n                    'DCC_INDICATOR',\n                    'DCC_MARGINPERCENTAGE',\n                    'DCC_VALIDHOURS',\n                    'DIGESTCARDNO',\n                    'ECI',\n                    'ED',\n                    'ENCCARDNO',\n                    'FXAMOUNT',\n                    'FXCURRENCY',\n                    'IBAN',\n                    'IP',\n                    'IPCTY',\n                    'NBREMAILUSAGE',\n                    'NBRIPUSAGE',\n                    'NBRIPUSAGE_ALLTX',\n                    'NBRUSAGE',\n                    'NCERROR',\n                    'NCERRORCARDNO',\n                    'NCERRORCN',\n                    'NCERRORCVC',\n                    'NCERRORED',\n                    'ORDERID',\n                    'PAYID',\n                    'PAYIDSUB',\n                    'PM',\n                    'SCO_CATEGORY',\n                    'SCORING',\n                    'STATUS',\n                    'SUBBRAND',\n                    'SUBSCRIPTION_ID',\n                    'TRXDATE',\n                    'VC'\n                ]\n                return key.upper() in keys\n\n        items = sorted((k.upper(), v) for k, v in values.items())\n        sign = ''.join('%s=%s%s' % (k, v, key) for k, v in items if v and filter_key(k))\n        sign = sign.encode(\"utf-8\")\n        shasign = sha1(sign).hexdigest()\n        return shasign\n\n    def ogone_form_generate_values(self, values):\n        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        ogone_tx_values = dict(values)\n        param_plus = {\n            'return_url': ogone_tx_values.pop('return_url', False)\n        }\n        temp_ogone_tx_values = {\n            'PSPID': self.ogone_pspid,\n            'ORDERID': values['reference'],\n            'AMOUNT': float_repr(float_round(values['amount'], 2) * 100, 0),\n            'CURRENCY': values['currency'] and values['currency'].name or '',\n            'LANGUAGE': values.get('partner_lang'),\n            'CN': values.get('partner_name'),\n            'EMAIL': values.get('partner_email'),\n            'OWNERZIP': values.get('partner_zip'),\n            'OWNERADDRESS': values.get('partner_address'),\n            'OWNERTOWN': values.get('partner_city'),\n            'OWNERCTY': values.get('partner_country') and values.get('partner_country').code or '',\n            'OWNERTELNO': values.get('partner_phone'),\n            'ACCEPTURL': urls.url_join(base_url, OgoneController._accept_url),\n            'DECLINEURL': urls.url_join(base_url, OgoneController._decline_url),\n            'EXCEPTIONURL': urls.url_join(base_url, OgoneController._exception_url),\n            'CANCELURL': urls.url_join(base_url, OgoneController._cancel_url),\n            'PARAMPLUS': url_encode(param_plus),\n        }\n        if self.save_token in ['ask', 'always']:\n            temp_ogone_tx_values.update({\n                'ALIAS': 'ODOO-NEW-ALIAS-%s' % time.time(),    \n                'ALIASUSAGE': values.get('alias_usage') or self.ogone_alias_usage,\n            })\n        shasign = self._ogone_generate_shasign('in', temp_ogone_tx_values)\n        temp_ogone_tx_values['SHASIGN'] = shasign\n        ogone_tx_values.update(temp_ogone_tx_values)\n        return ogone_tx_values\n\n    def ogone_get_form_action_url(self):\n        return self._get_ogone_urls(self.environment)['ogone_standard_order_url']\n\n    def ogone_s2s_form_validate(self, data):\n        error = dict()\n\n        mandatory_fields = [\"cc_number\", \"cc_cvc\", \"cc_holder_name\", \"cc_expiry\", \"cc_brand\"]\n        \n        for field_name in mandatory_fields:\n            if not data.get(field_name):\n                error[field_name] = 'missing'\n\n        return False if error else True\n\n    def ogone_s2s_form_process(self, data):\n        values = {\n            'cc_number': data.get('cc_number'),\n            'cc_cvc': int(data.get('cc_cvc')),\n            'cc_holder_name': data.get('cc_holder_name'),\n            'cc_expiry': data.get('cc_expiry'),\n            'cc_brand': data.get('cc_brand'),\n            'acquirer_id': int(data.get('acquirer_id')),\n            'partner_id': int(data.get('partner_id'))\n        }\n        pm_id = self.env['payment.token'].sudo().create(values)\n        return pm_id\n\n\nclass PaymentTxOgone(models.Model):\n    _inherit = 'payment.transaction'\n    \n    _ogone_valid_tx_status = [5, 9, 8]\n    _ogone_wait_tx_status = [41, 50, 51, 52, 55, 56, 91, 92, 99]\n    _ogone_pending_tx_status = [46, 81, 82]   \n    _ogone_cancel_tx_status = [1]\n\n    \n    \n    \n\n    @api.model\n    def _ogone_form_get_tx_from_data(self, data):\n        \"\"\" Given a data dict coming from ogone, verify it and find the related\n        transaction record. Create a payment token if an alias is returned.\"\"\"\n        reference, pay_id, shasign, alias = data.get('orderID'), data.get('PAYID'), data.get('SHASIGN'), data.get('ALIAS')\n        if not reference or not pay_id or not shasign:\n            error_msg = _('Ogone: received data with missing reference (%s) or pay_id (%s) or shasign (%s)') % (reference, pay_id, shasign)\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        ?\n        tx = self.search([('reference', '=', reference)])\n        if not tx or len(tx) > 1:\n            error_msg = _('Ogone: received data for reference %s') % (reference)\n            if not tx:\n                error_msg += _('; no order found')\n            else:\n                error_msg += _('; multiple order found')\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        \n        shasign_check = tx.acquirer_id._ogone_generate_shasign('out', data)\n        if shasign_check.upper() != shasign.upper():\n            error_msg = _('Ogone: invalid shasign, received %s, computed %s, for data %s') % (shasign, shasign_check, data)\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        if not tx.acquirer_reference:\n            tx.acquirer_reference = pay_id\n\n        \n        if alias and tx.type == 'form_save':\n            Token = self.env['payment.token']\n            domain = [('acquirer_ref', '=', alias)]\n            cardholder = data.get('CN')\n            if not Token.search_count(domain):\n                _logger.info('Ogone: saving alias %s for partner %s' % (data.get('CARDNO'), tx.partner_id))\n                ref = Token.create({'name': data.get('CARDNO') + (' - ' + cardholder if cardholder else ''),\n                                    'partner_id': tx.partner_id.id,\n                                    'acquirer_id': tx.acquirer_id.id,\n                                    'acquirer_ref': alias})\n                tx.write({'payment_token_id': ref.id})\n\n        return tx\n\n    def _ogone_form_get_invalid_parameters(self, data):\n        invalid_parameters = []\n\n        \n        if self.acquirer_reference and data.get('PAYID') != self.acquirer_reference:\n            invalid_parameters.append(('PAYID', data.get('PAYID'), self.acquirer_reference))\n        \n        if float_compare(float(data.get('amount', '0.0')), self.amount, 2) != 0:\n            invalid_parameters.append(('amount', data.get('amount'), '%.2f' % self.amount))\n        if data.get('currency') != self.currency_id.name:\n            invalid_parameters.append(('currency', data.get('currency'), self.currency_id.name))\n\n        return invalid_parameters\n\n    def _ogone_form_validate(self, data):\n        if self.state in ['done', 'refunding', 'refunded']:\n            _logger.info('Ogone: trying to validate an already validated tx (ref %s)', self.reference)\n            return True\n\n        status = int(data.get('STATUS', '0'))\n        if status in self._ogone_valid_tx_status:\n            vals = {\n                'state': 'done',\n                'date_validate': datetime.datetime.strptime(data['TRXDATE'], '%m/%d/%y').strftime(DEFAULT_SERVER_DATE_FORMAT),\n                'acquirer_reference': data['PAYID'],\n            }\n            if data.get('ALIAS') and self.partner_id and \\\n               (self.type == 'form_save' or self.acquirer_id.save_token == 'always')\\\n               and not self.payment_token_id:\n                pm = self.env['payment.token'].create({\n                    'partner_id': self.partner_id.id,\n                    'acquirer_id': self.acquirer_id.id,\n                    'acquirer_ref': data.get('ALIAS'),\n                    'name': '%s - %s' % (data.get('CARDNO'), data.get('CN'))\n                })\n                vals.update(payment_token_id=pm.id)\n            self.write(vals)\n            if self.payment_token_id:\n                self.payment_token_id.verified = True\n            self.execute_callback()\n            \n            if self.type == 'validation':\n                self.s2s_do_refund()\n\n            return True\n        elif status in self._ogone_cancel_tx_status:\n            self.write({\n                'state': 'cancel',\n                'acquirer_reference': data.get('PAYID'),\n            })\n        elif status in self._ogone_pending_tx_status or status in self._ogone_wait_tx_status:\n            self.write({\n                'state': 'pending',\n                'acquirer_reference': data.get('PAYID'),\n            })\n        else:\n            error = 'Ogone: feedback error: %(error_str)s\\n\\n%(error_code)s: %(error_msg)s' % {\n                'error_str': data.get('NCERRORPLUS'),\n                'error_code': data.get('NCERROR'),\n                'error_msg': ogone.OGONE_ERROR_MAP.get(data.get('NCERROR')),\n            }\n            _logger.info(error)\n            self.write({\n                'state': 'error',\n                'state_message': error,\n                'acquirer_reference': data.get('PAYID'),\n            })\n            return False\n\n    \n    \n    \n    def ogone_s2s_do_transaction(self, **kwargs):\n        \n        account = self.acquirer_id\n        reference = self.reference or \"ODOO-%s-%s\" % (datetime.datetime.now().strftime('%y%m%d_%H%M%S'), self.partner_id.id)\n\n        param_plus = {\n            'return_url': kwargs.get('return_url', False)\n        }\n\n        data = {\n            'PSPID': account.ogone_pspid,\n            'USERID': account.ogone_userid,\n            'PSWD': account.ogone_password,\n            'ORDERID': reference,\n            'AMOUNT': int(self.amount * 100),\n            'CURRENCY': self.currency_id.name,\n            'OPERATION': 'SAL',\n            'ECI': 2,   # Recurring (from MOTO)\n            'ALIAS': self.payment_token_id.acquirer_ref,\n            'RTIMEOUT': 30,\n            'PARAMPLUS' : url_encode(param_plus)\n        }\n\n        if kwargs.get('3d_secure'):\n            data.update({\n                'FLAG3D': 'Y',\n                'LANGUAGE': self.partner_id.lang or 'en_US',\n            })\n\n            for url in 'accept decline exception'.split():\n                key = '{0}_url'.format(url)\n                val = kwargs.pop(key, None)\n                if val:\n                    key = '{0}URL'.format(url).upper()\n                    data[key] = val\n\n        data['SHASIGN'] = self.acquirer_id._ogone_generate_shasign('in', data)\n\n        direct_order_url = 'https://secure.ogone.com/ncol/%s/orderdirect.asp' % (self.acquirer_id.environment)\n\n        _logger.debug(\"Ogone data %s\", pformat(data))\n        result = requests.post(direct_order_url, data=data).content\n        _logger.debug('Ogone response = %s', result)\n\n        try:\n            tree = objectify.fromstring(result)\n        except etree.XMLSyntaxError:\n            \n            _logger.exception('Invalid xml response from ogone')\n            raise\n\n        return self._ogone_s2s_validate_tree(tree)\n\n    def ogone_s2s_do_refund(self, **kwargs):\n\n        \n        if self.state != 'done':\n            return False\n\n        self.state = 'refunding'\n        account = self.acquirer_id\n        reference = self.reference or \"ODOO-%s-%s\" % (datetime.datetime.now().strftime('%y%m%d_%H%M%S'), self.partner_id.id)\n\n        data = {\n            'PSPID': account.ogone_pspid,\n            'USERID': account.ogone_userid,\n            'PSWD': account.ogone_password,\n            'ORDERID': reference,\n            'AMOUNT': int(self.amount * 100),\n            'CURRENCY': self.currency_id.name,\n            'OPERATION': 'RFS',\n            'PAYID': self.acquirer_reference,\n        }\n        data['SHASIGN'] = self.acquirer_id._ogone_generate_shasign('in', data)\n\n        direct_order_url = 'https://secure.ogone.com/ncol/%s/maintenancedirect.asp' % (self.acquirer_id.environment)\n\n        _logger.debug(\"Ogone data %s\", pformat(data))\n        result = requests.post(direct_order_url, data=data).content\n        _logger.debug('Ogone response = %s', result)\n\n        try:\n            tree = objectify.fromstring(result)\n        except etree.XMLSyntaxError:\n            \n            _logger.exception('Invalid xml response from ogone')\n            raise\n\n        return self._ogone_s2s_validate_tree(tree)\n\n    def _ogone_s2s_validate(self):\n        tree = self._ogone_s2s_get_tx_status()\n        return self._ogone_s2s_validate_tree(tree)\n\n    def _ogone_s2s_validate_tree(self, tree, tries=2):\n        if self.state not in ('draft', 'pending', 'refunding'):\n            _logger.info('Ogone: trying to validate an already validated tx (ref %s)', self.reference)\n            return True\n\n        status = int(tree.get('STATUS') or 0)\n        if status in self._ogone_valid_tx_status:\n            new_state = 'refunded' if self.state == 'refunding' else 'done'\n            self.write({\n                'state': new_state,\n                'date_validate': datetime.date.today().strftime(DEFAULT_SERVER_DATE_FORMAT),\n                'acquirer_reference': tree.get('PAYID'),\n            })\n            if tree.get('ALIAS') and self.partner_id and \\\n               (self.type == 'form_save' or self.acquirer_id.save_token == 'always')\\\n               and not self.payment_token_id:\n                pm = self.env['payment.token'].create({\n                    'partner_id': self.partner_id.id,\n                    'acquirer_id': self.acquirer_id.id,\n                    'acquirer_ref': tree.get('ALIAS'),\n                    'name': tree.get('CARDNO'),\n                })\n                self.write({'payment_token_id': pm.id})\n            if self.payment_token_id:\n                self.payment_token_id.verified = True\n            self.execute_callback()\n            \n            if self.type == 'validation':\n                self.s2s_do_refund()\n            return True\n        elif status in self._ogone_cancel_tx_status:\n            self.write({\n                'state': 'cancel',\n                'acquirer_reference': tree.get('PAYID'),\n            })\n        elif status in self._ogone_pending_tx_status:\n            new_state = 'refunding' if self.state == 'refunding' else 'pending'\n            vals = {\n                'state': new_state,\n                'acquirer_reference': tree.get('PAYID'),\n            }\n            if status == 46: \n                vals['html_3ds'] = ustr(base64.b64decode(tree.HTML_ANSWER.text))\n            self.write(vals)\n        elif status in self._ogone_wait_tx_status and tries > 0:\n            time.sleep(0.5)\n            self.write({'acquirer_reference': tree.get('PAYID')})\n            tree = self._ogone_s2s_get_tx_status()\n            return self._ogone_s2s_validate_tree(tree, tries - 1)\n        else:\n            error = 'Ogone: feedback error: %(error_str)s\\n\\n%(error_code)s: %(error_msg)s' % {\n                'error_str': tree.get('NCERRORPLUS'),\n                'error_code': tree.get('NCERROR'),\n                'error_msg': ogone.OGONE_ERROR_MAP.get(tree.get('NCERROR')),\n            }\n            _logger.info(error)\n            self.write({\n                'state': 'error',\n                'state_message': error,\n                'acquirer_reference': tree.get('PAYID'),\n            })\n            return False\n\n    def _ogone_s2s_get_tx_status(self):\n        account = self.acquirer_id\n        #reference = tx.reference or \"ODOO-%s-%s\" % (datetime.datetime.now().strftime('%Y%m%d_%H%M%S'), tx.partner_id.id)\n\n        data = {\n            'PAYID': self.acquirer_reference,\n            'PSPID': account.ogone_pspid,\n            'USERID': account.ogone_userid,\n            'PSWD': account.ogone_password,\n        }\n\n        query_direct_url = 'https://secure.ogone.com/ncol/%s/querydirect.asp' % (self.acquirer_id.environment)\n\n        _logger.debug(\"Ogone data %s\", pformat(data))\n        result = requests.post(query_direct_url, data=data).content\n        _logger.debug('Ogone response = %s', result)\n\n        try:\n            tree = objectify.fromstring(result)\n        except etree.XMLSyntaxError:\n            \n            _logger.exception('Invalid xml response from ogone')\n            raise\n\n        return tree\n\n\nclass PaymentToken(models.Model):\n    _inherit = 'payment.token'\n\n    def ogone_create(self, values):\n        if values.get('cc_number'):\n            \n            values['cc_number'] = values['cc_number'].replace(' ', '')\n            acquirer = self.env['payment.acquirer'].browse(values['acquirer_id'])\n            alias = 'ODOO-NEW-ALIAS-%s' % time.time()\n\n            expiry = str(values['cc_expiry'][:2]) + str(values['cc_expiry'][-2:])\n            line = 'ADDALIAS;%(alias)s;%(cc_holder_name)s;%(cc_number)s;%(expiry)s;%(cc_brand)s;%(pspid)s'\n            line = line % dict(values, alias=alias, expiry=expiry, pspid=acquirer.ogone_pspid)\n\n            data = {\n                'FILE_REFERENCE': alias,\n                'TRANSACTION_CODE': 'MTR',\n                'OPERATION': 'SAL',\n                'NB_PAYMENTS': 1,   \n                'FILE': normalize('NFKD', line).encode('ascii','ignore'),  \n                'REPLY_TYPE': 'XML',\n                'PSPID': acquirer.ogone_pspid,\n                'USERID': acquirer.ogone_userid,\n                'PSWD': acquirer.ogone_password,\n                'PROCESS_MODE': 'CHECKANDPROCESS',\n            }\n\n            url = 'https://secure.ogone.com/ncol/%s/AFU_agree.asp' % (acquirer.environment,)\n            result = requests.post(url, data=data).content\n\n            try:\n                tree = objectify.fromstring(result)\n            except etree.XMLSyntaxError:\n                _logger.exception('Invalid xml response from ogone')\n                return None\n\n            error_code = error_str = None\n            if hasattr(tree, 'PARAMS_ERROR'):\n                error_code = tree.NCERROR.text\n                error_str = 'PARAMS ERROR: %s' % (tree.PARAMS_ERROR.text or '',)\n            else:\n                node = tree.FORMAT_CHECK\n                error_node = getattr(node, 'FORMAT_CHECK_ERROR', None)\n                if error_node is not None:\n                    error_code = error_node.NCERROR.text\n                    error_str = 'CHECK ERROR: %s' % (error_node.ERROR.text or '',)\n\n            if error_code:\n                error_msg = tree.get(error_code)\n                error = '%s\\n\\n%s: %s' % (error_str, error_code, error_msg)\n                _logger.error(error)\n                raise Exception(error)\n\n            return {\n                'acquirer_ref': alias,\n                'name': 'XXXXXXXXXXXX%s - %s' % (values['cc_number'][-4:], values['cc_holder_name'])\n            }\n        return {}\n", "comments": "   get advanced feature support provider           each provider add technical corresponding         key following features                fees  support payment fees computations               authorize  support authorizing payment (separates                          authorization capture)               tokenize  support saving payment data payment tokenize                         object                     res   super(paymentacquirerogone  self)  get feature support()         res  tokenize   append( ogone )         return res      def  get ogone urls(self  environment)              ogone urls             standard order  post address form based             return                ogone standard order url    https   secure ogone com ncol  orderstandard utf8 asp    (environment )               ogone direct order url    https   secure ogone com ncol  orderdirect utf8 asp    (environment )               ogone direct query url    https   secure ogone com ncol  querydirect utf8 asp    (environment )               ogone afu agree url    https   secure ogone com ncol  afu agree asp    (environment )                 def  ogone generate shasign(self  inout  values)              generate shasign incoming outgoing communications            param string inout    (odoo contacting ogone)   (ogone                              contacting odoo)  in last case                              fields contained (see e commerce basic)          param dict values  transaction values           return string  shasign                     assert inout (    )         assert self provider     ogone          key   getattr(self   ogone shakey     inout)          def filter key(key)              inout                       return true             else                    sha out keys                   source https   viveum v psp com ncol viveum e com bas en pdf                 keys                          aavaddress                        aavcheck                        aavmail                        aavname                        aavphone                        aavzip                        acceptance                        alias                        amount                        bic                        bin                        brand                        cardno                        cccty                        cn                        complus                        creation status                        currency                        cvccheck                        dcc commpercentage                        dcc convamount                        dcc convccy                        dcc exchrate                        dcc exchratesource                        dcc exchratets                        dcc indicator                        dcc marginpercentage                        dcc validhours                        digestcardno                        eci                        ed                        enccardno                        fxamount                        fxcurrency                        iban                        ip                        ipcty                        nbremailusage                        nbripusage                        nbripusage alltx                        nbrusage                        ncerror                        ncerrorcardno                        ncerrorcn                        ncerrorcvc                        ncerrored                        orderid                        payid                        payidsub                        pm                        sco category                        scoring                        status                        subbrand                        subscription id                        trxdate                        vc                                    return key upper() keys          items   sorted((k upper()  v) k  v values items())         sign      join(      (k  v  key) k  v items v filter key(k))         sign   sign encode( utf 8 )         shasign   sha1(sign) hexdigest()         return shasign      def ogone form generate values(self  values)          base url   self env  ir config parameter   sudo() get param( web base url )         ogone tx values   dict(values)         param plus                  return url   ogone tx values pop( return url   false)                   temp ogone tx values                  pspid   self ogone pspid               orderid   values  reference                 amount   float repr(float round(values  amount    2)   100  0)               currency   values  currency   values  currency   name                  language   values get( partner lang )               cn   values get( partner name )               email   values get( partner email )               ownerzip   values get( partner zip )               owneraddress   values get( partner address )               ownertown   values get( partner city )               ownercty   values get( partner country ) values get( partner country ) code                  ownertelno   values get( partner phone )               accepturl   urls url join(base url  ogonecontroller  accept url)               declineurl   urls url join(base url  ogonecontroller  decline url)               exceptionurl   urls url join(base url  ogonecontroller  exception url)               cancelurl   urls url join(base url  ogonecontroller  cancel url)               paramplus   url encode(param plus)                    self save token   ask    always                temp ogone tx values update(                   alias    odoo new alias     time time()       something unique                   aliasusage   values get( alias usage ) self ogone alias usage               )         shasign   self  ogone generate shasign(   temp ogone tx values)         temp ogone tx values  shasign     shasign         ogone tx values update(temp ogone tx values)         return ogone tx values      def ogone get form action url(self)          return self  get ogone urls(self environment)  ogone standard order url        def ogone s2s form validate(self  data)          error   dict()          mandatory fields     cc number    cc cvc    cc holder name    cc expiry    cc brand             validation         field name mandatory fields              data get(field name)                  error field name     missing           return false error else true      def ogone s2s form process(self  data)          values                  cc number   data get( cc number )               cc cvc   int(data get( cc cvc ))               cc holder name   data get( cc holder name )               cc expiry   data get( cc expiry )               cc brand   data get( cc brand )               acquirer id   int(data get( acquirer id ))               partner id   int(data get( partner id ))                   pm id   self env  payment token   sudo() create(values)         return pm id   class paymenttxogone(models model)       inherit    payment transaction        ogone status      ogone valid tx status    5  9  8       ogone wait tx status    41  50  51  52  55  56  91  92  99       ogone pending tx status    46  81  82      46   3ds html response      ogone cancel tx status    1                                                                  form related methods                                                                api model     def  ogone form get tx data(self  data)              given data dict coming ogone  verify find related         transaction record  create payment token alias returned        coding  utf 8    sha out keys    source https   viveum v psp com ncol viveum e com bas en pdf    something unique     validation    ogone status    46   3ds html response                                                          form related methods                                                          find tx     tdenote use paytid      verify shasign    alias created ogone server  store    todo  txn id  false draft  set afterwards  verified txn details    check bought    transaction validation one  refund money withdrawn                                                          s2s related methods                                                          todo  create tx s2s type    recurring (from moto)    invalid response ogone    refund transaction already refunded paid     invalid response ogone    transaction validation one  refund money withdrawn    html 3ds   reference   tx reference  odoo      (datetime datetime now() strftime(  y  h m s )  tx partner id id)    invalid response ogone    create alias via batch    even actually payment  ogone want 0    ogone batch must ascii ", "content": "# coding: utf-8\nimport base64\nimport datetime\nimport logging\nimport time\nfrom hashlib import sha1\nfrom pprint import pformat\nfrom unicodedata import normalize\n\nimport requests\nfrom lxml import etree, objectify\nfrom werkzeug import urls, url_encode\n\nfrom odoo import api, fields, models, _\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.addons.payment_ogone.controllers.main import OgoneController\nfrom odoo.addons.payment_ogone.data import ogone\nfrom odoo.tools import DEFAULT_SERVER_DATE_FORMAT, ustr\nfrom odoo.tools.float_utils import float_compare, float_repr, float_round\n\n_logger = logging.getLogger(__name__)\n\n\nclass PaymentAcquirerOgone(models.Model):\n    _inherit = 'payment.acquirer'\n\n    provider = fields.Selection(selection_add=[('ogone', 'Ogone')])\n    ogone_pspid = fields.Char('PSPID', required_if_provider='ogone', groups='base.group_user')\n    ogone_userid = fields.Char('API User ID', required_if_provider='ogone', groups='base.group_user')\n    ogone_password = fields.Char('API User Password', required_if_provider='ogone', groups='base.group_user')\n    ogone_shakey_in = fields.Char('SHA Key IN', size=32, required_if_provider='ogone', groups='base.group_user')\n    ogone_shakey_out = fields.Char('SHA Key OUT', size=32, required_if_provider='ogone', groups='base.group_user')\n    ogone_alias_usage = fields.Char('Alias Usage', default=\"Allow saving my payment data\",\n                                    help=\"If you want to use Ogone Aliases, this default \"\n                                    \"Alias Usage will be presented to the customer as the \"\n                                    \"reason you want to keep his payment data\")\n\n    def _get_feature_support(self):\n        \"\"\"Get advanced feature support by provider.\n\n        Each provider should add its technical in the corresponding\n        key for the following features:\n            * fees: support payment fees computations\n            * authorize: support authorizing payment (separates\n                         authorization and capture)\n            * tokenize: support saving payment data in a payment.tokenize\n                        object\n        \"\"\"\n        res = super(PaymentAcquirerOgone, self)._get_feature_support()\n        res['tokenize'].append('ogone')\n        return res\n\n    def _get_ogone_urls(self, environment):\n        \"\"\" Ogone URLS:\n         - standard order: POST address for form-based \"\"\"\n        return {\n            'ogone_standard_order_url': 'https://secure.ogone.com/ncol/%s/orderstandard_utf8.asp' % (environment,),\n            'ogone_direct_order_url': 'https://secure.ogone.com/ncol/%s/orderdirect_utf8.asp' % (environment,),\n            'ogone_direct_query_url': 'https://secure.ogone.com/ncol/%s/querydirect_utf8.asp' % (environment,),\n            'ogone_afu_agree_url': 'https://secure.ogone.com/ncol/%s/AFU_agree.asp' % (environment,),\n        }\n\n    def _ogone_generate_shasign(self, inout, values):\n        \"\"\" Generate the shasign for incoming or outgoing communications.\n\n        :param string inout: 'in' (odoo contacting ogone) or 'out' (ogone\n                             contacting odoo). In this last case only some\n                             fields should be contained (see e-Commerce basic)\n        :param dict values: transaction values\n\n        :return string: shasign\n        \"\"\"\n        assert inout in ('in', 'out')\n        assert self.provider == 'ogone'\n        key = getattr(self, 'ogone_shakey_' + inout)\n\n        def filter_key(key):\n            if inout == 'in':\n                return True\n            else:\n                # SHA-OUT keys\n                # source https://viveum.v-psp.com/Ncol/Viveum_e-Com-BAS_EN.pdf\n                keys = [\n                    'AAVADDRESS',\n                    'AAVCHECK',\n                    'AAVMAIL',\n                    'AAVNAME',\n                    'AAVPHONE',\n                    'AAVZIP',\n                    'ACCEPTANCE',\n                    'ALIAS',\n                    'AMOUNT',\n                    'BIC',\n                    'BIN',\n                    'BRAND',\n                    'CARDNO',\n                    'CCCTY',\n                    'CN',\n                    'COMPLUS',\n                    'CREATION_STATUS',\n                    'CURRENCY',\n                    'CVCCHECK',\n                    'DCC_COMMPERCENTAGE',\n                    'DCC_CONVAMOUNT',\n                    'DCC_CONVCCY',\n                    'DCC_EXCHRATE',\n                    'DCC_EXCHRATESOURCE',\n                    'DCC_EXCHRATETS',\n                    'DCC_INDICATOR',\n                    'DCC_MARGINPERCENTAGE',\n                    'DCC_VALIDHOURS',\n                    'DIGESTCARDNO',\n                    'ECI',\n                    'ED',\n                    'ENCCARDNO',\n                    'FXAMOUNT',\n                    'FXCURRENCY',\n                    'IBAN',\n                    'IP',\n                    'IPCTY',\n                    'NBREMAILUSAGE',\n                    'NBRIPUSAGE',\n                    'NBRIPUSAGE_ALLTX',\n                    'NBRUSAGE',\n                    'NCERROR',\n                    'NCERRORCARDNO',\n                    'NCERRORCN',\n                    'NCERRORCVC',\n                    'NCERRORED',\n                    'ORDERID',\n                    'PAYID',\n                    'PAYIDSUB',\n                    'PM',\n                    'SCO_CATEGORY',\n                    'SCORING',\n                    'STATUS',\n                    'SUBBRAND',\n                    'SUBSCRIPTION_ID',\n                    'TRXDATE',\n                    'VC'\n                ]\n                return key.upper() in keys\n\n        items = sorted((k.upper(), v) for k, v in values.items())\n        sign = ''.join('%s=%s%s' % (k, v, key) for k, v in items if v and filter_key(k))\n        sign = sign.encode(\"utf-8\")\n        shasign = sha1(sign).hexdigest()\n        return shasign\n\n    def ogone_form_generate_values(self, values):\n        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        ogone_tx_values = dict(values)\n        param_plus = {\n            'return_url': ogone_tx_values.pop('return_url', False)\n        }\n        temp_ogone_tx_values = {\n            'PSPID': self.ogone_pspid,\n            'ORDERID': values['reference'],\n            'AMOUNT': float_repr(float_round(values['amount'], 2) * 100, 0),\n            'CURRENCY': values['currency'] and values['currency'].name or '',\n            'LANGUAGE': values.get('partner_lang'),\n            'CN': values.get('partner_name'),\n            'EMAIL': values.get('partner_email'),\n            'OWNERZIP': values.get('partner_zip'),\n            'OWNERADDRESS': values.get('partner_address'),\n            'OWNERTOWN': values.get('partner_city'),\n            'OWNERCTY': values.get('partner_country') and values.get('partner_country').code or '',\n            'OWNERTELNO': values.get('partner_phone'),\n            'ACCEPTURL': urls.url_join(base_url, OgoneController._accept_url),\n            'DECLINEURL': urls.url_join(base_url, OgoneController._decline_url),\n            'EXCEPTIONURL': urls.url_join(base_url, OgoneController._exception_url),\n            'CANCELURL': urls.url_join(base_url, OgoneController._cancel_url),\n            'PARAMPLUS': url_encode(param_plus),\n        }\n        if self.save_token in ['ask', 'always']:\n            temp_ogone_tx_values.update({\n                'ALIAS': 'ODOO-NEW-ALIAS-%s' % time.time(),    # something unique,\n                'ALIASUSAGE': values.get('alias_usage') or self.ogone_alias_usage,\n            })\n        shasign = self._ogone_generate_shasign('in', temp_ogone_tx_values)\n        temp_ogone_tx_values['SHASIGN'] = shasign\n        ogone_tx_values.update(temp_ogone_tx_values)\n        return ogone_tx_values\n\n    def ogone_get_form_action_url(self):\n        return self._get_ogone_urls(self.environment)['ogone_standard_order_url']\n\n    def ogone_s2s_form_validate(self, data):\n        error = dict()\n\n        mandatory_fields = [\"cc_number\", \"cc_cvc\", \"cc_holder_name\", \"cc_expiry\", \"cc_brand\"]\n        # Validation\n        for field_name in mandatory_fields:\n            if not data.get(field_name):\n                error[field_name] = 'missing'\n\n        return False if error else True\n\n    def ogone_s2s_form_process(self, data):\n        values = {\n            'cc_number': data.get('cc_number'),\n            'cc_cvc': int(data.get('cc_cvc')),\n            'cc_holder_name': data.get('cc_holder_name'),\n            'cc_expiry': data.get('cc_expiry'),\n            'cc_brand': data.get('cc_brand'),\n            'acquirer_id': int(data.get('acquirer_id')),\n            'partner_id': int(data.get('partner_id'))\n        }\n        pm_id = self.env['payment.token'].sudo().create(values)\n        return pm_id\n\n\nclass PaymentTxOgone(models.Model):\n    _inherit = 'payment.transaction'\n    # ogone status\n    _ogone_valid_tx_status = [5, 9, 8]\n    _ogone_wait_tx_status = [41, 50, 51, 52, 55, 56, 91, 92, 99]\n    _ogone_pending_tx_status = [46, 81, 82]   # 46 = 3DS HTML response\n    _ogone_cancel_tx_status = [1]\n\n    # --------------------------------------------------\n    # FORM RELATED METHODS\n    # --------------------------------------------------\n\n    @api.model\n    def _ogone_form_get_tx_from_data(self, data):\n        \"\"\" Given a data dict coming from ogone, verify it and find the related\n        transaction record. Create a payment token if an alias is returned.\"\"\"\n        reference, pay_id, shasign, alias = data.get('orderID'), data.get('PAYID'), data.get('SHASIGN'), data.get('ALIAS')\n        if not reference or not pay_id or not shasign:\n            error_msg = _('Ogone: received data with missing reference (%s) or pay_id (%s) or shasign (%s)') % (reference, pay_id, shasign)\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        # find tx -> @TDENOTE use paytid ?\n        tx = self.search([('reference', '=', reference)])\n        if not tx or len(tx) > 1:\n            error_msg = _('Ogone: received data for reference %s') % (reference)\n            if not tx:\n                error_msg += _('; no order found')\n            else:\n                error_msg += _('; multiple order found')\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        # verify shasign\n        shasign_check = tx.acquirer_id._ogone_generate_shasign('out', data)\n        if shasign_check.upper() != shasign.upper():\n            error_msg = _('Ogone: invalid shasign, received %s, computed %s, for data %s') % (shasign, shasign_check, data)\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        if not tx.acquirer_reference:\n            tx.acquirer_reference = pay_id\n\n        # alias was created on ogone server, store it\n        if alias and tx.type == 'form_save':\n            Token = self.env['payment.token']\n            domain = [('acquirer_ref', '=', alias)]\n            cardholder = data.get('CN')\n            if not Token.search_count(domain):\n                _logger.info('Ogone: saving alias %s for partner %s' % (data.get('CARDNO'), tx.partner_id))\n                ref = Token.create({'name': data.get('CARDNO') + (' - ' + cardholder if cardholder else ''),\n                                    'partner_id': tx.partner_id.id,\n                                    'acquirer_id': tx.acquirer_id.id,\n                                    'acquirer_ref': alias})\n                tx.write({'payment_token_id': ref.id})\n\n        return tx\n\n    def _ogone_form_get_invalid_parameters(self, data):\n        invalid_parameters = []\n\n        # TODO: txn_id: should be false at draft, set afterwards, and verified with txn details\n        if self.acquirer_reference and data.get('PAYID') != self.acquirer_reference:\n            invalid_parameters.append(('PAYID', data.get('PAYID'), self.acquirer_reference))\n        # check what is bought\n        if float_compare(float(data.get('amount', '0.0')), self.amount, 2) != 0:\n            invalid_parameters.append(('amount', data.get('amount'), '%.2f' % self.amount))\n        if data.get('currency') != self.currency_id.name:\n            invalid_parameters.append(('currency', data.get('currency'), self.currency_id.name))\n\n        return invalid_parameters\n\n    def _ogone_form_validate(self, data):\n        if self.state in ['done', 'refunding', 'refunded']:\n            _logger.info('Ogone: trying to validate an already validated tx (ref %s)', self.reference)\n            return True\n\n        status = int(data.get('STATUS', '0'))\n        if status in self._ogone_valid_tx_status:\n            vals = {\n                'state': 'done',\n                'date_validate': datetime.datetime.strptime(data['TRXDATE'], '%m/%d/%y').strftime(DEFAULT_SERVER_DATE_FORMAT),\n                'acquirer_reference': data['PAYID'],\n            }\n            if data.get('ALIAS') and self.partner_id and \\\n               (self.type == 'form_save' or self.acquirer_id.save_token == 'always')\\\n               and not self.payment_token_id:\n                pm = self.env['payment.token'].create({\n                    'partner_id': self.partner_id.id,\n                    'acquirer_id': self.acquirer_id.id,\n                    'acquirer_ref': data.get('ALIAS'),\n                    'name': '%s - %s' % (data.get('CARDNO'), data.get('CN'))\n                })\n                vals.update(payment_token_id=pm.id)\n            self.write(vals)\n            if self.payment_token_id:\n                self.payment_token_id.verified = True\n            self.execute_callback()\n            # if this transaction is a validation one, then we refund the money we just withdrawn\n            if self.type == 'validation':\n                self.s2s_do_refund()\n\n            return True\n        elif status in self._ogone_cancel_tx_status:\n            self.write({\n                'state': 'cancel',\n                'acquirer_reference': data.get('PAYID'),\n            })\n        elif status in self._ogone_pending_tx_status or status in self._ogone_wait_tx_status:\n            self.write({\n                'state': 'pending',\n                'acquirer_reference': data.get('PAYID'),\n            })\n        else:\n            error = 'Ogone: feedback error: %(error_str)s\\n\\n%(error_code)s: %(error_msg)s' % {\n                'error_str': data.get('NCERRORPLUS'),\n                'error_code': data.get('NCERROR'),\n                'error_msg': ogone.OGONE_ERROR_MAP.get(data.get('NCERROR')),\n            }\n            _logger.info(error)\n            self.write({\n                'state': 'error',\n                'state_message': error,\n                'acquirer_reference': data.get('PAYID'),\n            })\n            return False\n\n    # --------------------------------------------------\n    # S2S RELATED METHODS\n    # --------------------------------------------------\n    def ogone_s2s_do_transaction(self, **kwargs):\n        # TODO: create tx with s2s type\n        account = self.acquirer_id\n        reference = self.reference or \"ODOO-%s-%s\" % (datetime.datetime.now().strftime('%y%m%d_%H%M%S'), self.partner_id.id)\n\n        param_plus = {\n            'return_url': kwargs.get('return_url', False)\n        }\n\n        data = {\n            'PSPID': account.ogone_pspid,\n            'USERID': account.ogone_userid,\n            'PSWD': account.ogone_password,\n            'ORDERID': reference,\n            'AMOUNT': int(self.amount * 100),\n            'CURRENCY': self.currency_id.name,\n            'OPERATION': 'SAL',\n            'ECI': 2,   # Recurring (from MOTO)\n            'ALIAS': self.payment_token_id.acquirer_ref,\n            'RTIMEOUT': 30,\n            'PARAMPLUS' : url_encode(param_plus)\n        }\n\n        if kwargs.get('3d_secure'):\n            data.update({\n                'FLAG3D': 'Y',\n                'LANGUAGE': self.partner_id.lang or 'en_US',\n            })\n\n            for url in 'accept decline exception'.split():\n                key = '{0}_url'.format(url)\n                val = kwargs.pop(key, None)\n                if val:\n                    key = '{0}URL'.format(url).upper()\n                    data[key] = val\n\n        data['SHASIGN'] = self.acquirer_id._ogone_generate_shasign('in', data)\n\n        direct_order_url = 'https://secure.ogone.com/ncol/%s/orderdirect.asp' % (self.acquirer_id.environment)\n\n        _logger.debug(\"Ogone data %s\", pformat(data))\n        result = requests.post(direct_order_url, data=data).content\n        _logger.debug('Ogone response = %s', result)\n\n        try:\n            tree = objectify.fromstring(result)\n        except etree.XMLSyntaxError:\n            # invalid response from ogone\n            _logger.exception('Invalid xml response from ogone')\n            raise\n\n        return self._ogone_s2s_validate_tree(tree)\n\n    def ogone_s2s_do_refund(self, **kwargs):\n\n        # we refund only if this transaction hasn't been already refunded and was paid.\n        if self.state != 'done':\n            return False\n\n        self.state = 'refunding'\n        account = self.acquirer_id\n        reference = self.reference or \"ODOO-%s-%s\" % (datetime.datetime.now().strftime('%y%m%d_%H%M%S'), self.partner_id.id)\n\n        data = {\n            'PSPID': account.ogone_pspid,\n            'USERID': account.ogone_userid,\n            'PSWD': account.ogone_password,\n            'ORDERID': reference,\n            'AMOUNT': int(self.amount * 100),\n            'CURRENCY': self.currency_id.name,\n            'OPERATION': 'RFS',\n            'PAYID': self.acquirer_reference,\n        }\n        data['SHASIGN'] = self.acquirer_id._ogone_generate_shasign('in', data)\n\n        direct_order_url = 'https://secure.ogone.com/ncol/%s/maintenancedirect.asp' % (self.acquirer_id.environment)\n\n        _logger.debug(\"Ogone data %s\", pformat(data))\n        result = requests.post(direct_order_url, data=data).content\n        _logger.debug('Ogone response = %s', result)\n\n        try:\n            tree = objectify.fromstring(result)\n        except etree.XMLSyntaxError:\n            # invalid response from ogone\n            _logger.exception('Invalid xml response from ogone')\n            raise\n\n        return self._ogone_s2s_validate_tree(tree)\n\n    def _ogone_s2s_validate(self):\n        tree = self._ogone_s2s_get_tx_status()\n        return self._ogone_s2s_validate_tree(tree)\n\n    def _ogone_s2s_validate_tree(self, tree, tries=2):\n        if self.state not in ('draft', 'pending', 'refunding'):\n            _logger.info('Ogone: trying to validate an already validated tx (ref %s)', self.reference)\n            return True\n\n        status = int(tree.get('STATUS') or 0)\n        if status in self._ogone_valid_tx_status:\n            new_state = 'refunded' if self.state == 'refunding' else 'done'\n            self.write({\n                'state': new_state,\n                'date_validate': datetime.date.today().strftime(DEFAULT_SERVER_DATE_FORMAT),\n                'acquirer_reference': tree.get('PAYID'),\n            })\n            if tree.get('ALIAS') and self.partner_id and \\\n               (self.type == 'form_save' or self.acquirer_id.save_token == 'always')\\\n               and not self.payment_token_id:\n                pm = self.env['payment.token'].create({\n                    'partner_id': self.partner_id.id,\n                    'acquirer_id': self.acquirer_id.id,\n                    'acquirer_ref': tree.get('ALIAS'),\n                    'name': tree.get('CARDNO'),\n                })\n                self.write({'payment_token_id': pm.id})\n            if self.payment_token_id:\n                self.payment_token_id.verified = True\n            self.execute_callback()\n            # if this transaction is a validation one, then we refund the money we just withdrawn\n            if self.type == 'validation':\n                self.s2s_do_refund()\n            return True\n        elif status in self._ogone_cancel_tx_status:\n            self.write({\n                'state': 'cancel',\n                'acquirer_reference': tree.get('PAYID'),\n            })\n        elif status in self._ogone_pending_tx_status:\n            new_state = 'refunding' if self.state == 'refunding' else 'pending'\n            vals = {\n                'state': new_state,\n                'acquirer_reference': tree.get('PAYID'),\n            }\n            if status == 46: # HTML 3DS\n                vals['html_3ds'] = ustr(base64.b64decode(tree.HTML_ANSWER.text))\n            self.write(vals)\n        elif status in self._ogone_wait_tx_status and tries > 0:\n            time.sleep(0.5)\n            self.write({'acquirer_reference': tree.get('PAYID')})\n            tree = self._ogone_s2s_get_tx_status()\n            return self._ogone_s2s_validate_tree(tree, tries - 1)\n        else:\n            error = 'Ogone: feedback error: %(error_str)s\\n\\n%(error_code)s: %(error_msg)s' % {\n                'error_str': tree.get('NCERRORPLUS'),\n                'error_code': tree.get('NCERROR'),\n                'error_msg': ogone.OGONE_ERROR_MAP.get(tree.get('NCERROR')),\n            }\n            _logger.info(error)\n            self.write({\n                'state': 'error',\n                'state_message': error,\n                'acquirer_reference': tree.get('PAYID'),\n            })\n            return False\n\n    def _ogone_s2s_get_tx_status(self):\n        account = self.acquirer_id\n        #reference = tx.reference or \"ODOO-%s-%s\" % (datetime.datetime.now().strftime('%Y%m%d_%H%M%S'), tx.partner_id.id)\n\n        data = {\n            'PAYID': self.acquirer_reference,\n            'PSPID': account.ogone_pspid,\n            'USERID': account.ogone_userid,\n            'PSWD': account.ogone_password,\n        }\n\n        query_direct_url = 'https://secure.ogone.com/ncol/%s/querydirect.asp' % (self.acquirer_id.environment)\n\n        _logger.debug(\"Ogone data %s\", pformat(data))\n        result = requests.post(query_direct_url, data=data).content\n        _logger.debug('Ogone response = %s', result)\n\n        try:\n            tree = objectify.fromstring(result)\n        except etree.XMLSyntaxError:\n            # invalid response from ogone\n            _logger.exception('Invalid xml response from ogone')\n            raise\n\n        return tree\n\n\nclass PaymentToken(models.Model):\n    _inherit = 'payment.token'\n\n    def ogone_create(self, values):\n        if values.get('cc_number'):\n            # create a alias via batch\n            values['cc_number'] = values['cc_number'].replace(' ', '')\n            acquirer = self.env['payment.acquirer'].browse(values['acquirer_id'])\n            alias = 'ODOO-NEW-ALIAS-%s' % time.time()\n\n            expiry = str(values['cc_expiry'][:2]) + str(values['cc_expiry'][-2:])\n            line = 'ADDALIAS;%(alias)s;%(cc_holder_name)s;%(cc_number)s;%(expiry)s;%(cc_brand)s;%(pspid)s'\n            line = line % dict(values, alias=alias, expiry=expiry, pspid=acquirer.ogone_pspid)\n\n            data = {\n                'FILE_REFERENCE': alias,\n                'TRANSACTION_CODE': 'MTR',\n                'OPERATION': 'SAL',\n                'NB_PAYMENTS': 1,   # even if we do not actually have any payment, ogone want it to not be 0\n                'FILE': normalize('NFKD', line).encode('ascii','ignore'),  # Ogone Batch must be ASCII only\n                'REPLY_TYPE': 'XML',\n                'PSPID': acquirer.ogone_pspid,\n                'USERID': acquirer.ogone_userid,\n                'PSWD': acquirer.ogone_password,\n                'PROCESS_MODE': 'CHECKANDPROCESS',\n            }\n\n            url = 'https://secure.ogone.com/ncol/%s/AFU_agree.asp' % (acquirer.environment,)\n            result = requests.post(url, data=data).content\n\n            try:\n                tree = objectify.fromstring(result)\n            except etree.XMLSyntaxError:\n                _logger.exception('Invalid xml response from ogone')\n                return None\n\n            error_code = error_str = None\n            if hasattr(tree, 'PARAMS_ERROR'):\n                error_code = tree.NCERROR.text\n                error_str = 'PARAMS ERROR: %s' % (tree.PARAMS_ERROR.text or '',)\n            else:\n                node = tree.FORMAT_CHECK\n                error_node = getattr(node, 'FORMAT_CHECK_ERROR', None)\n                if error_node is not None:\n                    error_code = error_node.NCERROR.text\n                    error_str = 'CHECK ERROR: %s' % (error_node.ERROR.text or '',)\n\n            if error_code:\n                error_msg = tree.get(error_code)\n                error = '%s\\n\\n%s: %s' % (error_str, error_code, error_msg)\n                _logger.error(error)\n                raise Exception(error)\n\n            return {\n                'acquirer_ref': alias,\n                'name': 'XXXXXXXXXXXX%s - %s' % (values['cc_number'][-4:], values['cc_holder_name'])\n            }\n        return {}\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "payment.py", "id": "510dff0f3f85ebfa15d13cad6468b56e", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/payment_ogone/models/payment.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}