{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom django.core.urlresolvers import reverse\nfrom exam import fixture\n\nfrom sentry.testutils import TestCase\nfrom sentry.models import User, UserEmail\n\n\nclass EmailsTest(TestCase):\n    @fixture\n    def path(self):\n        return reverse('sentry-account-settings-emails')\n\n    def test_render_emails(self):\n        user = self.create_user('foo@example.com')\n        self.login_as(user)\n        resp = self.client.get(self.path)\n        assert resp.status_code == 200\n        self.assertTemplateUsed('sentry/account/settings/emails.html')\n        assert 'primary_email' in resp.context\n        self.assertIn('foo@example.com', resp.content)\n\n    def test_show_alt_emails(self):\n        user = self.create_user('foo@example.com')\n        self.login_as(user)\n        email = UserEmail(user=user, email='bar@example.com')\n        email.save()\n        resp = self.client.get(self.path)\n        self.assertIn('bar@example.com', resp.content)\n        assert 'bar@example.com' in ([thing.email for thing in user.emails.all()])\n\n    def test_create_alt_email_with_password(self):\n        user = self.create_user('foo@example.com')\n        self.login_as(user)\n        user.set_password('something')\n        user.save()\n        resp = self.client.post(\n            self.path, data={'alt_email': 'hello@gmail.com',\n                             'password': 'something'}, follow=True\n        )\n        assert resp.status_code == 200\n        self.assertIn('hello@gmail.com', resp.content)\n        emails = UserEmail.objects.filter(user=user)\n        assert 'hello@gmail.com' in ([email.email for email in emails])\n\n    def test_fail_to_create_email_without_pw(self):\n        user = self.create_user('foo@example.com')\n        self.login_as(user)\n        user.set_password('something')\n        user.save()\n        resp = self.client.post(\n            self.path, data={\n                'alt_email': 'hello@gmail.com',\n            }, follow=True\n        )\n        assert resp.status_code == 200\n        self.assertIn('This field is required', resp.content)\n        emails = UserEmail.objects.filter(user=user)\n        assert 'hello@gmail.com' not in ([email.email for email in emails])\n\n    def test_create_alt_email_without_usable_pw(self):\n        user = self.create_user('foo@example.com')\n        self.login_as(user)\n        user.set_unusable_password()\n        user.save()\n        resp = self.client.post(\n            self.path, data={\n                'alt_email': 'hello@gmail.com',\n            }, follow=True\n        )\n        assert resp.status_code == 200\n        self.assertIn('hello@gmail.com', resp.content)\n        emails = UserEmail.objects.filter(user=user)\n        assert 'hello@gmail.com' in ([email.email for email in emails])\n\n    def test_remove_alt_email(self):\n        user = self.create_user('foo@example.com')\n        self.login_as(user)\n        email = UserEmail(user=user, email='bar@example.com')\n        email.save()\n        resp = self.client.get(self.path)\n        self.assertIn('bar@example.com', resp.content)\n        resp = self.client.post(\n            self.path, data={'remove': '',\n                             'email': 'bar@example.com'}, follow=True\n        )\n        self.assertNotIn('bar@example.com', resp.content)\n        assert 'bar@example.com' not in (email.email for email in user.emails.all())\n\n    def test_change_verified_primary_email(self):\n        user = self.create_user('foo@example.com')\n        self.login_as(user)\n        resp = self.client.get(self.path)\n        self.assertIn('foo@example.com', resp.content)\n        UserEmail.objects.create(email='bar@example.com', is_verified=True, user=user)\n        resp = self.client.post(\n            self.path, {'primary': '',\n                        'new_primary_email': 'bar@example.com'}, follow=True\n        )\n        self.assertIn('bar@example.com', resp.content)\n        user = User.objects.get(id=user.id)\n        assert user.email == 'bar@example.com'\n        assert user.username == 'bar@example.com'\n\n    def test_change_unverified_primary_email(self):\n        user = self.create_user('foo@example.com')\n        self.login_as(user)\n        resp = self.client.get(self.path)\n        self.assertIn('foo@example.com', resp.content)\n        UserEmail.objects.create(email='bar@example.com', is_verified=False, user=user)\n        resp = self.client.post(\n            self.path, {'primary': '',\n                        'new_primary_email': 'bar@example.com'}, follow=True\n        )\n        user = User.objects.get(id=user.id)\n        assert user.email == 'foo@example.com'\n        assert user.username == 'foo@example.com'\n", "comments": "", "content": "from __future__ import absolute_import\n\nfrom django.core.urlresolvers import reverse\nfrom exam import fixture\n\nfrom sentry.testutils import TestCase\nfrom sentry.models import User, UserEmail\n\n\nclass EmailsTest(TestCase):\n    @fixture\n    def path(self):\n        return reverse('sentry-account-settings-emails')\n\n    def test_render_emails(self):\n        user = self.create_user('foo@example.com')\n        self.login_as(user)\n        resp = self.client.get(self.path)\n        assert resp.status_code == 200\n        self.assertTemplateUsed('sentry/account/settings/emails.html')\n        assert 'primary_email' in resp.context\n        self.assertIn('foo@example.com', resp.content)\n\n    def test_show_alt_emails(self):\n        user = self.create_user('foo@example.com')\n        self.login_as(user)\n        email = UserEmail(user=user, email='bar@example.com')\n        email.save()\n        resp = self.client.get(self.path)\n        self.assertIn('bar@example.com', resp.content)\n        assert 'bar@example.com' in ([thing.email for thing in user.emails.all()])\n\n    def test_create_alt_email_with_password(self):\n        user = self.create_user('foo@example.com')\n        self.login_as(user)\n        user.set_password('something')\n        user.save()\n        resp = self.client.post(\n            self.path, data={'alt_email': 'hello@gmail.com',\n                             'password': 'something'}, follow=True\n        )\n        assert resp.status_code == 200\n        self.assertIn('hello@gmail.com', resp.content)\n        emails = UserEmail.objects.filter(user=user)\n        assert 'hello@gmail.com' in ([email.email for email in emails])\n\n    def test_fail_to_create_email_without_pw(self):\n        user = self.create_user('foo@example.com')\n        self.login_as(user)\n        user.set_password('something')\n        user.save()\n        resp = self.client.post(\n            self.path, data={\n                'alt_email': 'hello@gmail.com',\n            }, follow=True\n        )\n        assert resp.status_code == 200\n        self.assertIn('This field is required', resp.content)\n        emails = UserEmail.objects.filter(user=user)\n        assert 'hello@gmail.com' not in ([email.email for email in emails])\n\n    def test_create_alt_email_without_usable_pw(self):\n        user = self.create_user('foo@example.com')\n        self.login_as(user)\n        user.set_unusable_password()\n        user.save()\n        resp = self.client.post(\n            self.path, data={\n                'alt_email': 'hello@gmail.com',\n            }, follow=True\n        )\n        assert resp.status_code == 200\n        self.assertIn('hello@gmail.com', resp.content)\n        emails = UserEmail.objects.filter(user=user)\n        assert 'hello@gmail.com' in ([email.email for email in emails])\n\n    def test_remove_alt_email(self):\n        user = self.create_user('foo@example.com')\n        self.login_as(user)\n        email = UserEmail(user=user, email='bar@example.com')\n        email.save()\n        resp = self.client.get(self.path)\n        self.assertIn('bar@example.com', resp.content)\n        resp = self.client.post(\n            self.path, data={'remove': '',\n                             'email': 'bar@example.com'}, follow=True\n        )\n        self.assertNotIn('bar@example.com', resp.content)\n        assert 'bar@example.com' not in (email.email for email in user.emails.all())\n\n    def test_change_verified_primary_email(self):\n        user = self.create_user('foo@example.com')\n        self.login_as(user)\n        resp = self.client.get(self.path)\n        self.assertIn('foo@example.com', resp.content)\n        UserEmail.objects.create(email='bar@example.com', is_verified=True, user=user)\n        resp = self.client.post(\n            self.path, {'primary': '',\n                        'new_primary_email': 'bar@example.com'}, follow=True\n        )\n        self.assertIn('bar@example.com', resp.content)\n        user = User.objects.get(id=user.id)\n        assert user.email == 'bar@example.com'\n        assert user.username == 'bar@example.com'\n\n    def test_change_unverified_primary_email(self):\n        user = self.create_user('foo@example.com')\n        self.login_as(user)\n        resp = self.client.get(self.path)\n        self.assertIn('foo@example.com', resp.content)\n        UserEmail.objects.create(email='bar@example.com', is_verified=False, user=user)\n        resp = self.client.post(\n            self.path, {'primary': '',\n                        'new_primary_email': 'bar@example.com'}, follow=True\n        )\n        user = User.objects.get(id=user.id)\n        assert user.email == 'foo@example.com'\n        assert user.username == 'foo@example.com'\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_emails.py", "id": "c7af5781f8e0089f781e1a46b10841e6", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/web/frontend/test_emails.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}