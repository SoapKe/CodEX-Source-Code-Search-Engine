{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_urlparse\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    xpath_attr,\n    xpath_text,\n)\n\n\nclass RuutuIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?:ruutu|supla)\\.fi/(?:video|supla)/(?P<id>\\d+)'\n    _TESTS = [\n        {\n            'url': 'http://www.ruutu.fi/video/2058907',\n            'md5': 'ab2093f39be1ca8581963451b3c0234f',\n            'info_dict': {\n                'id': '2058907',\n                'ext': 'mp4',\n                'title': 'Oletko aina halunnut tiet\u00e4\u00e4 mit\u00e4 tapahtuu vain hetki ennen l\u00e4hetyst\u00e4? - Nyt se selvisi!',\n                'description': 'md5:cfc6ccf0e57a814360df464a91ff67d6',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 114,\n                'age_limit': 0,\n            },\n        },\n        {\n            'url': 'http://www.ruutu.fi/video/2057306',\n            'md5': '065a10ae4d5b8cfd9d0c3d332465e3d9',\n            'info_dict': {\n                'id': '2057306',\n                'ext': 'mp4',\n                'title': 'Superpesis: katso koko kausi Ruudussa',\n                'description': 'md5:bfb7336df2a12dc21d18fa696c9f8f23',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 40,\n                'age_limit': 0,\n            },\n        },\n        {\n            'url': 'http://www.supla.fi/supla/2231370',\n            'md5': 'df14e782d49a2c0df03d3be2a54ef949',\n            'info_dict': {\n                'id': '2231370',\n                'ext': 'mp4',\n                'title': 'Osa 1: Mikael Jungner',\n                'description': 'md5:7d90f358c47542e3072ff65d7b1bcffe',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'age_limit': 0,\n            },\n        },\n        \n        \n        {\n            'url': 'http://www.ruutu.fi/video/3193728',\n            'only_matching': True,\n        },\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video_xml = self._download_xml(\n            'http://gatling.ruutu.fi/media-xml-cache?id=%s' % video_id, video_id)\n\n        formats = []\n        processed_urls = []\n\n        def extract_formats(node):\n            for child in node:\n                if child.tag.endswith('Files'):\n                    extract_formats(child)\n                elif child.tag.endswith('File'):\n                    video_url = child.text\n                    if (not video_url or video_url in processed_urls or\n                            any(p in video_url for p in ('NOT_USED', 'NOT-USED'))):\n                        continue\n                    processed_urls.append(video_url)\n                    ext = determine_ext(video_url)\n                    if ext == 'm3u8':\n                        formats.extend(self._extract_m3u8_formats(\n                            video_url, video_id, 'mp4', m3u8_id='hls', fatal=False))\n                    elif ext == 'f4m':\n                        formats.extend(self._extract_f4m_formats(\n                            video_url, video_id, f4m_id='hds', fatal=False))\n                    elif ext == 'mpd':\n                        \n                        \n                        continue\n                        formats.extend(self._extract_mpd_formats(\n                            video_url, video_id, mpd_id='dash', fatal=False))\n                    else:\n                        proto = compat_urllib_parse_urlparse(video_url).scheme\n                        if not child.tag.startswith('HTTP') and proto != 'rtmp':\n                            continue\n                        preference = -1 if proto == 'rtmp' else 1\n                        label = child.get('label')\n                        tbr = int_or_none(child.get('bitrate'))\n                        format_id = '%s-%s' % (proto, label if label else tbr) if label or tbr else proto\n                        if not self._is_valid_url(video_url, video_id, format_id):\n                            continue\n                        width, height = [int_or_none(x) for x in child.get('resolution', 'x').split('x')[:2]]\n                        formats.append({\n                            'format_id': format_id,\n                            'url': video_url,\n                            'width': width,\n                            'height': height,\n                            'tbr': tbr,\n                            'preference': preference,\n                        })\n\n        extract_formats(video_xml.find('./Clip'))\n\n        drm = xpath_text(video_xml, './Clip/DRM', default=None)\n        if not formats and drm:\n            raise ExtractorError('This video is DRM protected.', expected=True)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': xpath_attr(video_xml, './/Behavior/Program', 'program_name', 'title', fatal=True),\n            'description': xpath_attr(video_xml, './/Behavior/Program', 'description', 'description'),\n            'thumbnail': xpath_attr(video_xml, './/Behavior/Startpicture', 'href', 'thumbnail'),\n            'duration': int_or_none(xpath_text(video_xml, './/Runtime', 'duration')),\n            'age_limit': int_or_none(xpath_text(video_xml, './/AgeLimit', 'age limit')),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# Episode where <SourceFile> is \"NOT-USED\", but has other\n# downloadable sources available.\n# video-only and audio-only streams are of different\n# duration resulting in out of sync issue\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_urlparse\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    xpath_attr,\n    xpath_text,\n)\n\n\nclass RuutuIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?:ruutu|supla)\\.fi/(?:video|supla)/(?P<id>\\d+)'\n    _TESTS = [\n        {\n            'url': 'http://www.ruutu.fi/video/2058907',\n            'md5': 'ab2093f39be1ca8581963451b3c0234f',\n            'info_dict': {\n                'id': '2058907',\n                'ext': 'mp4',\n                'title': 'Oletko aina halunnut tiet\u00e4\u00e4 mit\u00e4 tapahtuu vain hetki ennen l\u00e4hetyst\u00e4? - Nyt se selvisi!',\n                'description': 'md5:cfc6ccf0e57a814360df464a91ff67d6',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 114,\n                'age_limit': 0,\n            },\n        },\n        {\n            'url': 'http://www.ruutu.fi/video/2057306',\n            'md5': '065a10ae4d5b8cfd9d0c3d332465e3d9',\n            'info_dict': {\n                'id': '2057306',\n                'ext': 'mp4',\n                'title': 'Superpesis: katso koko kausi Ruudussa',\n                'description': 'md5:bfb7336df2a12dc21d18fa696c9f8f23',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 40,\n                'age_limit': 0,\n            },\n        },\n        {\n            'url': 'http://www.supla.fi/supla/2231370',\n            'md5': 'df14e782d49a2c0df03d3be2a54ef949',\n            'info_dict': {\n                'id': '2231370',\n                'ext': 'mp4',\n                'title': 'Osa 1: Mikael Jungner',\n                'description': 'md5:7d90f358c47542e3072ff65d7b1bcffe',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'age_limit': 0,\n            },\n        },\n        # Episode where <SourceFile> is \"NOT-USED\", but has other\n        # downloadable sources available.\n        {\n            'url': 'http://www.ruutu.fi/video/3193728',\n            'only_matching': True,\n        },\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video_xml = self._download_xml(\n            'http://gatling.ruutu.fi/media-xml-cache?id=%s' % video_id, video_id)\n\n        formats = []\n        processed_urls = []\n\n        def extract_formats(node):\n            for child in node:\n                if child.tag.endswith('Files'):\n                    extract_formats(child)\n                elif child.tag.endswith('File'):\n                    video_url = child.text\n                    if (not video_url or video_url in processed_urls or\n                            any(p in video_url for p in ('NOT_USED', 'NOT-USED'))):\n                        continue\n                    processed_urls.append(video_url)\n                    ext = determine_ext(video_url)\n                    if ext == 'm3u8':\n                        formats.extend(self._extract_m3u8_formats(\n                            video_url, video_id, 'mp4', m3u8_id='hls', fatal=False))\n                    elif ext == 'f4m':\n                        formats.extend(self._extract_f4m_formats(\n                            video_url, video_id, f4m_id='hds', fatal=False))\n                    elif ext == 'mpd':\n                        # video-only and audio-only streams are of different\n                        # duration resulting in out of sync issue\n                        continue\n                        formats.extend(self._extract_mpd_formats(\n                            video_url, video_id, mpd_id='dash', fatal=False))\n                    else:\n                        proto = compat_urllib_parse_urlparse(video_url).scheme\n                        if not child.tag.startswith('HTTP') and proto != 'rtmp':\n                            continue\n                        preference = -1 if proto == 'rtmp' else 1\n                        label = child.get('label')\n                        tbr = int_or_none(child.get('bitrate'))\n                        format_id = '%s-%s' % (proto, label if label else tbr) if label or tbr else proto\n                        if not self._is_valid_url(video_url, video_id, format_id):\n                            continue\n                        width, height = [int_or_none(x) for x in child.get('resolution', 'x').split('x')[:2]]\n                        formats.append({\n                            'format_id': format_id,\n                            'url': video_url,\n                            'width': width,\n                            'height': height,\n                            'tbr': tbr,\n                            'preference': preference,\n                        })\n\n        extract_formats(video_xml.find('./Clip'))\n\n        drm = xpath_text(video_xml, './Clip/DRM', default=None)\n        if not formats and drm:\n            raise ExtractorError('This video is DRM protected.', expected=True)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': xpath_attr(video_xml, './/Behavior/Program', 'program_name', 'title', fatal=True),\n            'description': xpath_attr(video_xml, './/Behavior/Program', 'description', 'description'),\n            'thumbnail': xpath_attr(video_xml, './/Behavior/Startpicture', 'href', 'thumbnail'),\n            'duration': int_or_none(xpath_text(video_xml, './/Runtime', 'duration')),\n            'age_limit': int_or_none(xpath_text(video_xml, './/AgeLimit', 'age limit')),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "ruutu.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/ruutu.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}