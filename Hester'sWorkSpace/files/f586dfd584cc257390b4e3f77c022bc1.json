{"author": "thumbor", "code": "\n# -*- coding: utf-8 -*-\n\n\n\n\n\n\n# Copyright (c) 2011 globo.com thumbor@googlegroups.com\n\nfrom thumbor.config import Config\nfrom thumbor.context import Context, RequestParameters\nfrom thumbor.optimizers.jpegtran import Optimizer\n\nfrom unittest import TestCase\n\nimport mock\n\n\nclass JpegtranOptimizerTest(TestCase):\n    def setUp(self):\n        self.patcher = mock.patch('thumbor.optimizers.jpegtran.Popen')\n        self.mock_popen = self.patcher.start()\n\n    def tearDown(self):\n        self.patcher.stop()\n\n    def get_optimizer(self, filters=None, progressive=False):\n        conf = Config()\n        conf.STATSD_HOST = ''\n        conf.JPEGTRAN_PATH = '/somewhere/jpegtran'\n        conf.PROGRESSIVE_JPEG = progressive\n        req = RequestParameters(filters=filters)\n        ctx = Context(config=conf)\n        ctx.request = req\n        optimizer = Optimizer(ctx)\n\n        return optimizer\n\n    def test_should_run_for_jpeg(self):\n        optimizer = self.get_optimizer()\n        self.assertTrue(optimizer.should_run('.jpg', ''))\n        self.assertTrue(optimizer.should_run('.jpeg', ''))\n\n    def test_should_not_run_for_not_jpeg(self):\n        optimizer = self.get_optimizer()\n\n        self.assertFalse(optimizer.should_run('.png', ''))\n        self.assertFalse(optimizer.should_run('.webp', ''))\n        self.assertFalse(optimizer.should_run('.gif', ''))\n\n    def test_should_optimize(self):\n        input = 'input buffer'\n        output = 'output buffer'\n        self.mock_popen.return_value.returncode = 0\n        self.mock_popen.return_value.communicate.return_value = (output, \"Error\")\n\n        optimizer = self.get_optimizer()\n        return_buffer = optimizer.run_optimizer('.jpg', input)\n\n        self.mock_popen.return_value.communicate.assert_called_with(input)\n        self.assertEqual(output, return_buffer)\n\n    def test_should_return_old_buffer_for_invalid_extension(self):\n        optimizer = self.get_optimizer()\n        buffer = 'garbage'\n\n        return_buffer = optimizer.run_optimizer('.png', buffer)\n\n        self.assertEqual(return_buffer, buffer)\n\n    def test_should_return_old_buffer_for_invalid_image(self):\n        optimizer = self.get_optimizer()\n        buffer = 'garbage'\n\n        self.mock_popen.return_value.returncode = 1\n        self.mock_popen.return_value.communicate.return_value = ('Output', 'Error')\n\n        return_buffer = optimizer.run_optimizer('.jpg', buffer)\n\n        self.assertEqual(return_buffer, buffer)\n\n    def test_should_preserve_comments_if_strip_icc_filter_set(self):\n        self.mock_popen.return_value.returncode = 0\n        self.mock_popen.return_value.communicate.return_value = ('Output', 'Error')\n\n        optimizer = self.get_optimizer(filters=['strip_icc'])\n        optimizer.run_optimizer('.jpg', '')\n\n        command = self.mock_popen.call_args[0][0]\n\n        self.assertIn('-copy', command)\n        self.assertIn('comments', command)\n        self.assertNotIn('all', command)\n\n        optimizer = self.get_optimizer()\n        optimizer.run_optimizer('.jpg', '')\n\n        command = self.mock_popen.call_args[0][0]\n\n        self.assertIn('-copy', command)\n        self.assertIn('all', command)\n        self.assertNotIn('comments', command)\n\n    def test_should_make_progressive_when_configured(self):\n        self.mock_popen.return_value.returncode = 0\n        self.mock_popen.return_value.communicate.return_value = ('Output', 'Error')\n\n        optimizer = self.get_optimizer(progressive=False)\n        optimizer.run_optimizer('.jpg', '')\n\n        args, _ = self.mock_popen.call_args\n        command = args[0]\n\n        self.assertNotIn('-progressive', command)\n\n        optimizer = self.get_optimizer(progressive=True)\n        optimizer.run_optimizer('.jpg', '')\n\n        args, _ = self.mock_popen.call_args\n        command = args[0]\n\n        self.assertIn('-progressive', command)\n\n    @mock.patch('thumbor.optimizers.jpegtran.logger.warn')\n    def test_should_log_warning_when_failed(self, warn_logger):\n        optimizer = self.get_optimizer()\n\n        self.mock_popen.return_value.returncode = 1\n        self.mock_popen.return_value.communicate.return_value = ('Output', 'Error')\n\n        optimizer.run_optimizer('.jpg', 'garbage')\n\n        warn_logger.assert_called_once()\n", "comments": "   usr bin python        coding  utf 8        thumbor imaging service    https   github com thumbor thumbor wiki    licensed mit license     http   www opensource org licenses mit license    copyright (c) 2011 globo com thumbor googlegroups com ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# thumbor imaging service\n# https://github.com/thumbor/thumbor/wiki\n\n# Licensed under the MIT license:\n# http://www.opensource.org/licenses/mit-license\n# Copyright (c) 2011 globo.com thumbor@googlegroups.com\n\nfrom thumbor.config import Config\nfrom thumbor.context import Context, RequestParameters\nfrom thumbor.optimizers.jpegtran import Optimizer\n\nfrom unittest import TestCase\n\nimport mock\n\n\nclass JpegtranOptimizerTest(TestCase):\n    def setUp(self):\n        self.patcher = mock.patch('thumbor.optimizers.jpegtran.Popen')\n        self.mock_popen = self.patcher.start()\n\n    def tearDown(self):\n        self.patcher.stop()\n\n    def get_optimizer(self, filters=None, progressive=False):\n        conf = Config()\n        conf.STATSD_HOST = ''\n        conf.JPEGTRAN_PATH = '/somewhere/jpegtran'\n        conf.PROGRESSIVE_JPEG = progressive\n        req = RequestParameters(filters=filters)\n        ctx = Context(config=conf)\n        ctx.request = req\n        optimizer = Optimizer(ctx)\n\n        return optimizer\n\n    def test_should_run_for_jpeg(self):\n        optimizer = self.get_optimizer()\n        self.assertTrue(optimizer.should_run('.jpg', ''))\n        self.assertTrue(optimizer.should_run('.jpeg', ''))\n\n    def test_should_not_run_for_not_jpeg(self):\n        optimizer = self.get_optimizer()\n\n        self.assertFalse(optimizer.should_run('.png', ''))\n        self.assertFalse(optimizer.should_run('.webp', ''))\n        self.assertFalse(optimizer.should_run('.gif', ''))\n\n    def test_should_optimize(self):\n        input = 'input buffer'\n        output = 'output buffer'\n        self.mock_popen.return_value.returncode = 0\n        self.mock_popen.return_value.communicate.return_value = (output, \"Error\")\n\n        optimizer = self.get_optimizer()\n        return_buffer = optimizer.run_optimizer('.jpg', input)\n\n        self.mock_popen.return_value.communicate.assert_called_with(input)\n        self.assertEqual(output, return_buffer)\n\n    def test_should_return_old_buffer_for_invalid_extension(self):\n        optimizer = self.get_optimizer()\n        buffer = 'garbage'\n\n        return_buffer = optimizer.run_optimizer('.png', buffer)\n\n        self.assertEqual(return_buffer, buffer)\n\n    def test_should_return_old_buffer_for_invalid_image(self):\n        optimizer = self.get_optimizer()\n        buffer = 'garbage'\n\n        self.mock_popen.return_value.returncode = 1\n        self.mock_popen.return_value.communicate.return_value = ('Output', 'Error')\n\n        return_buffer = optimizer.run_optimizer('.jpg', buffer)\n\n        self.assertEqual(return_buffer, buffer)\n\n    def test_should_preserve_comments_if_strip_icc_filter_set(self):\n        self.mock_popen.return_value.returncode = 0\n        self.mock_popen.return_value.communicate.return_value = ('Output', 'Error')\n\n        optimizer = self.get_optimizer(filters=['strip_icc'])\n        optimizer.run_optimizer('.jpg', '')\n\n        command = self.mock_popen.call_args[0][0]\n\n        self.assertIn('-copy', command)\n        self.assertIn('comments', command)\n        self.assertNotIn('all', command)\n\n        optimizer = self.get_optimizer()\n        optimizer.run_optimizer('.jpg', '')\n\n        command = self.mock_popen.call_args[0][0]\n\n        self.assertIn('-copy', command)\n        self.assertIn('all', command)\n        self.assertNotIn('comments', command)\n\n    def test_should_make_progressive_when_configured(self):\n        self.mock_popen.return_value.returncode = 0\n        self.mock_popen.return_value.communicate.return_value = ('Output', 'Error')\n\n        optimizer = self.get_optimizer(progressive=False)\n        optimizer.run_optimizer('.jpg', '')\n\n        args, _ = self.mock_popen.call_args\n        command = args[0]\n\n        self.assertNotIn('-progressive', command)\n\n        optimizer = self.get_optimizer(progressive=True)\n        optimizer.run_optimizer('.jpg', '')\n\n        args, _ = self.mock_popen.call_args\n        command = args[0]\n\n        self.assertIn('-progressive', command)\n\n    @mock.patch('thumbor.optimizers.jpegtran.logger.warn')\n    def test_should_log_warning_when_failed(self, warn_logger):\n        optimizer = self.get_optimizer()\n\n        self.mock_popen.return_value.returncode = 1\n        self.mock_popen.return_value.communicate.return_value = ('Output', 'Error')\n\n        optimizer.run_optimizer('.jpg', 'garbage')\n\n        warn_logger.assert_called_once()\n", "description": "thumbor is an open-source photo thumbnail service by globo.com", "file_name": "test_jpegtran.py", "id": "f586dfd584cc257390b4e3f77c022bc1", "language": "Python", "project_name": "thumbor", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/thumbor-thumbor/thumbor-thumbor-991f13c/tests/optimizers/test_jpegtran.py", "save_time": "", "source": "", "update_at": "2018-03-18T09:16:11Z", "url": "https://github.com/thumbor/thumbor", "wiki": true}