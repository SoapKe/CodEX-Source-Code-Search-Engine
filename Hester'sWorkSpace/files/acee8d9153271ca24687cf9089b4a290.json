{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_contract_subject\nshort_description: Manage initial Contract Subjects (vz:Subj)\ndescription:\n- Manage initial Contract Subjects on Cisco ACI fabrics.\nnotes:\n- The C(tenant) and C(contract) used must exist before using this module in your playbook.\n- The M(aci_tenant) and M(aci_contract) modules can be used for this.\n- More information about the internal APIC class B(vz:Subj) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Swetha Chunduri (@schunduri)\nversion_added: '2.4'\noptions:\n  tenant:\n    description:\n    - The name of the tenant.\n    aliases: [ tenant_name ]\n  subject:\n    description:\n    - The contract subject name.\n    aliases: [ contract_subject, name, subject_name ]\n  contract:\n    description:\n    - The name of the Contract.\n    aliases: [ contract_name ]\n  reverse_filter:\n    description:\n    - Determines if the APIC should reverse the src and dst ports to allow the\n      return traffic back, since ACI is stateless filter.\n    - The APIC defaults new Contract Subjects to C(yes).\n    type: bool\n    default: 'yes'\n  priority:\n    description:\n    - The QoS class.\n    - The APIC defaults new Contract Subjects to C(unspecified).\n    choices: [ level1, level2, level3, unspecified ]\n    default: unspecified\n  dscp:\n    description:\n    - The target DSCP.\n    - The APIC defaults new Contract Subjects to C(unspecified).\n    choices: [ AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43,\n               CS0, CS1, CS2, CS3, CS4, CS5, CS6, CS7, EF, VA, unspecified ]\n    aliases: [ target ]\n    default: unspecified\n  description:\n    description:\n    - Description for the contract subject.\n    aliases: [ descr ]\n  consumer_match:\n    description:\n    - The match criteria across consumers.\n    - The APIC defaults new Contract Subjects to C(at_least_one).\n    choices: [ all, at_least_one, at_most_one, none ]\n    default: at_least_one\n  provider_match:\n    description:\n    - The match criteria across providers.\n    - The APIC defaults new Contract Subjects to C(at_least_one).\n    choices: [ all, at_least_one, at_most_one, none ]\n    default: at_least_one\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add a new contract subject\n  aci_contract_subject:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: production\n    contract: web_to_db\n    subject: default\n    description: test\n    reverse_filter: yes\n    priority: level1\n    dscp: unspecified\n    state: present\n\n- name: Remove a contract subject\n  aci_contract_subject:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: production\n    contract: web_to_db\n    subject: default\n    state: absent\n\n- name: Query a contract subject\n  aci_contract_subject:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: production\n    contract: web_to_db\n    subject: default\n    state: query\n\n- name: Query all contract subjects\n  aci_contract_subject:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\nMATCH_MAPPING = dict(all='All', at_least_one='AtleastOne', at_most_one='AtmostOne', none='None')\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        contract=dict(type='str', aliases=['contract_name']),  \n        subject=dict(type='str', aliases=['contract_subject', 'name', 'subject_name']),  \n        tenant=dict(type='str', aliases=['tenant_name']),  \n        priority=dict(type='str', choices=['unspecified', 'level1', 'level2', 'level3']),\n        reverse_filter=dict(type='bool'),\n        dscp=dict(type='str', aliases=['target']),\n        description=dict(type='str', aliases=['descr']),\n        consumer_match=dict(type='str', choices=['all', 'at_least_one', 'at_most_one', 'none']),\n        provider_match=dict(type='str', choices=['all', 'at_least_one', 'at_most_one', 'none']),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n        directive=dict(type='str', removed_in_version='2.4'),  \n        filter=dict(type='str', aliases=['filter_name'], removed_in_version='2.4'),  \n        method=dict(type='str', choices=['delete', 'get', 'post'], aliases=['action'], removed_in_version='2.6'),  \n        protocol=dict(type='str', removed_in_version='2.6'),  \n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['contract', 'subject', 'tenant']],\n            ['state', 'present', ['contract', 'subject', 'tenant']],\n        ],\n    )\n\n    aci = ACIModule(module)\n\n    subject = module.params['subject']\n    priority = module.params['priority']\n    reverse_filter = aci.boolean(module.params['reverse_filter'])\n    contract = module.params['contract']\n    dscp = module.params['dscp']\n    description = module.params['description']\n    filter_name = module.params['filter']\n    directive = module.params['directive']\n    consumer_match = module.params['consumer_match']\n    if consumer_match is not None:\n        consumer_match = MATCH_MAPPING[consumer_match]\n    provider_match = module.params['provider_match']\n    if provider_match is not None:\n        provider_match = MATCH_MAPPING[provider_match]\n    state = module.params['state']\n    tenant = module.params['tenant']\n\n    if directive is not None or filter_name is not None:\n        module.fail_json(msg=\"Managing Contract Subjects to Filter bindings has been moved to module 'aci_subject_bind_filter'\")\n\n    aci.construct_url(\n        root_class=dict(\n            aci_class='fvTenant',\n            aci_rn='tn-{0}'.format(tenant),\n            filter_target='eq(fvTenant.name, \"{0}\")'.format(tenant),\n            module_object=tenant,\n        ),\n        subclass_1=dict(\n            aci_class='vzBrCP',\n            aci_rn='brc-{0}'.format(contract),\n            filter_target='eq(vzBrCP.name, \"{0}\")'.format(contract),\n            module_object=contract,\n        ),\n        subclass_2=dict(\n            aci_class='vzSubj',\n            aci_rn='subj-{0}'.format(subject),\n            filter_target='eq(vzSubj.name, \"{0}\")'.format(subject),\n            module_object=subject,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='vzSubj',\n            class_config=dict(\n                name=subject,\n                prio=priority,\n                revFltPorts=reverse_filter,\n                targetDscp=dscp,\n                consMatchT=consumer_match,\n                provMatchT=provider_match,\n                descr=description,\n            ),\n        )\n\n        aci.get_diff(aci_class='vzSubj')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  aci contract subject short description  manage initial contract subjects (vz subj) description    manage initial contract subjects cisco aci fabrics  notes    the c(tenant) c(contract) used must exist using module playbook    the m(aci tenant) m(aci contract) modules used    more information internal apic class b(vz subj)   l(the apic management information model reference https   developer cisco com docs apic mim ref )  author    swetha chunduri ( schunduri) version added   2 4  options    tenant      description        the name tenant      aliases    tenant name     subject      description        the contract subject name      aliases    contract subject  name  subject name     contract      description        the name contract      aliases    contract name     reverse filter      description        determines apic reverse src dst ports allow       return traffic back  since aci stateless filter        the apic defaults new contract subjects c(yes)      type  bool     default   yes    priority      description        the qos class        the apic defaults new contract subjects c(unspecified)      choices    level1  level2  level3  unspecified       default  unspecified   dscp      description        the target dscp        the apic defaults new contract subjects c(unspecified)      choices    af11  af12  af13  af21  af22  af23  af31  af32  af33  af41  af42  af43                 cs0  cs1  cs2  cs3  cs4  cs5  cs6  cs7  ef  va  unspecified       aliases    target       default  unspecified   description      description        description contract subject      aliases    descr     consumer match      description        the match criteria across consumers        the apic defaults new contract subjects c(at least one)      choices     least one  one  none       default  least one   provider match      description        the match criteria across providers        the apic defaults new contract subjects c(at least one)      choices     least one  one  none       default  least one   state      description        use c(present) c(absent) adding removing        use c(query) listing object multiple objects      choices    absent  present  query       default  present extends documentation fragment  aci      examples   r      name  add new contract subject   aci contract subject      host  apic     username  admin     password  somesecretpassword     tenant  production     contract  web db     subject  default     description  test     reverse filter  yes     priority  level1     dscp  unspecified     state  present    name  remove contract subject   aci contract subject      host  apic     username  admin     password  somesecretpassword     tenant  production     contract  web db     subject  default     state  absent    name  query contract subject   aci contract subject      host  apic     username  admin     password  somesecretpassword     tenant  production     contract  web db     subject  default     state  query    name  query contract subjects   aci contract subject      host  apic     username  admin     password  somesecretpassword     state  query      return   r    current    description  the existing configuration apic module finished   returned  success   type  list   sample                               fvtenant                      attributes                          descr    production environment                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      error    description  the error information returned apic   returned  failure   type  dict   sample                 code    122            text    unknown managed object class foo        raw    description  the raw output returned apic rest api (xml json)   returned  parse error   type  string   sample     xml version  1 0  encoding  utf 8    imdata totalcount  1   error code  122  text  unknown managed object class foo     imdata   sent    description  the actual minimal configuration pushed apic   returned  info   type  list   sample                 fvtenant                  attributes                      descr    production environment                                previous    description  the original configuration apic module started   returned  info   type  list   sample                               fvtenant                      attributes                          descr    production                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      proposed    description  the assembled configuration user provided parameters   returned  info   type  dict   sample                 fvtenant                  attributes                      descr    production environment                    name    production                                filter string    description  the filter string used request   returned  failure debug   type  string   sample   rsp prop include config method    description  the http method used request apic   returned  failure debug   type  string   sample  post response    description  the http response apic   returned  failure debug   type  string   sample  ok (30 bytes) status    description  the http status apic   returned  failure debug   type  int   sample  200 url    description  the http url used request apic   returned  failure debug   type  string   sample  https   10 11 12 13 api mo uni tn production json         usr bin python        coding  utf 8        gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    not required querying objects    not required querying objects    not required querying objects    deprecated starting v2 4    deprecated starting v2 4    deprecated starting v2 6    deprecated v2 6 ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_contract_subject\nshort_description: Manage initial Contract Subjects (vz:Subj)\ndescription:\n- Manage initial Contract Subjects on Cisco ACI fabrics.\nnotes:\n- The C(tenant) and C(contract) used must exist before using this module in your playbook.\n- The M(aci_tenant) and M(aci_contract) modules can be used for this.\n- More information about the internal APIC class B(vz:Subj) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Swetha Chunduri (@schunduri)\nversion_added: '2.4'\noptions:\n  tenant:\n    description:\n    - The name of the tenant.\n    aliases: [ tenant_name ]\n  subject:\n    description:\n    - The contract subject name.\n    aliases: [ contract_subject, name, subject_name ]\n  contract:\n    description:\n    - The name of the Contract.\n    aliases: [ contract_name ]\n  reverse_filter:\n    description:\n    - Determines if the APIC should reverse the src and dst ports to allow the\n      return traffic back, since ACI is stateless filter.\n    - The APIC defaults new Contract Subjects to C(yes).\n    type: bool\n    default: 'yes'\n  priority:\n    description:\n    - The QoS class.\n    - The APIC defaults new Contract Subjects to C(unspecified).\n    choices: [ level1, level2, level3, unspecified ]\n    default: unspecified\n  dscp:\n    description:\n    - The target DSCP.\n    - The APIC defaults new Contract Subjects to C(unspecified).\n    choices: [ AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43,\n               CS0, CS1, CS2, CS3, CS4, CS5, CS6, CS7, EF, VA, unspecified ]\n    aliases: [ target ]\n    default: unspecified\n  description:\n    description:\n    - Description for the contract subject.\n    aliases: [ descr ]\n  consumer_match:\n    description:\n    - The match criteria across consumers.\n    - The APIC defaults new Contract Subjects to C(at_least_one).\n    choices: [ all, at_least_one, at_most_one, none ]\n    default: at_least_one\n  provider_match:\n    description:\n    - The match criteria across providers.\n    - The APIC defaults new Contract Subjects to C(at_least_one).\n    choices: [ all, at_least_one, at_most_one, none ]\n    default: at_least_one\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add a new contract subject\n  aci_contract_subject:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: production\n    contract: web_to_db\n    subject: default\n    description: test\n    reverse_filter: yes\n    priority: level1\n    dscp: unspecified\n    state: present\n\n- name: Remove a contract subject\n  aci_contract_subject:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: production\n    contract: web_to_db\n    subject: default\n    state: absent\n\n- name: Query a contract subject\n  aci_contract_subject:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: production\n    contract: web_to_db\n    subject: default\n    state: query\n\n- name: Query all contract subjects\n  aci_contract_subject:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\nMATCH_MAPPING = dict(all='All', at_least_one='AtleastOne', at_most_one='AtmostOne', none='None')\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        contract=dict(type='str', aliases=['contract_name']),  # Not required for querying all objects\n        subject=dict(type='str', aliases=['contract_subject', 'name', 'subject_name']),  # Not required for querying all objects\n        tenant=dict(type='str', aliases=['tenant_name']),  # Not required for querying all objects\n        priority=dict(type='str', choices=['unspecified', 'level1', 'level2', 'level3']),\n        reverse_filter=dict(type='bool'),\n        dscp=dict(type='str', aliases=['target']),\n        description=dict(type='str', aliases=['descr']),\n        consumer_match=dict(type='str', choices=['all', 'at_least_one', 'at_most_one', 'none']),\n        provider_match=dict(type='str', choices=['all', 'at_least_one', 'at_most_one', 'none']),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n        directive=dict(type='str', removed_in_version='2.4'),  # Deprecated starting from v2.4\n        filter=dict(type='str', aliases=['filter_name'], removed_in_version='2.4'),  # Deprecated starting from v2.4\n        method=dict(type='str', choices=['delete', 'get', 'post'], aliases=['action'], removed_in_version='2.6'),  # Deprecated starting from v2.6\n        protocol=dict(type='str', removed_in_version='2.6'),  # Deprecated in v2.6\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['contract', 'subject', 'tenant']],\n            ['state', 'present', ['contract', 'subject', 'tenant']],\n        ],\n    )\n\n    aci = ACIModule(module)\n\n    subject = module.params['subject']\n    priority = module.params['priority']\n    reverse_filter = aci.boolean(module.params['reverse_filter'])\n    contract = module.params['contract']\n    dscp = module.params['dscp']\n    description = module.params['description']\n    filter_name = module.params['filter']\n    directive = module.params['directive']\n    consumer_match = module.params['consumer_match']\n    if consumer_match is not None:\n        consumer_match = MATCH_MAPPING[consumer_match]\n    provider_match = module.params['provider_match']\n    if provider_match is not None:\n        provider_match = MATCH_MAPPING[provider_match]\n    state = module.params['state']\n    tenant = module.params['tenant']\n\n    if directive is not None or filter_name is not None:\n        module.fail_json(msg=\"Managing Contract Subjects to Filter bindings has been moved to module 'aci_subject_bind_filter'\")\n\n    aci.construct_url(\n        root_class=dict(\n            aci_class='fvTenant',\n            aci_rn='tn-{0}'.format(tenant),\n            filter_target='eq(fvTenant.name, \"{0}\")'.format(tenant),\n            module_object=tenant,\n        ),\n        subclass_1=dict(\n            aci_class='vzBrCP',\n            aci_rn='brc-{0}'.format(contract),\n            filter_target='eq(vzBrCP.name, \"{0}\")'.format(contract),\n            module_object=contract,\n        ),\n        subclass_2=dict(\n            aci_class='vzSubj',\n            aci_rn='subj-{0}'.format(subject),\n            filter_target='eq(vzSubj.name, \"{0}\")'.format(subject),\n            module_object=subject,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='vzSubj',\n            class_config=dict(\n                name=subject,\n                prio=priority,\n                revFltPorts=reverse_filter,\n                targetDscp=dscp,\n                consMatchT=consumer_match,\n                provMatchT=provider_match,\n                descr=description,\n            ),\n        )\n\n        aci.get_diff(aci_class='vzSubj')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "aci_contract_subject.py", "id": "acee8d9153271ca24687cf9089b4a290", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aci/aci_contract_subject.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}