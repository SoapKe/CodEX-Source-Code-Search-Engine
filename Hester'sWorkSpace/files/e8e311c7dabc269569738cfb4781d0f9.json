{"author": "mitmproxy", "code": "import json\n\nfrom mitmproxy.test import tflow\nfrom mitmproxy.test import tutils\nfrom mitmproxy.test import taddons\nfrom mitmproxy.net.http import cookies\n\nexample_dir = tutils.test_data.push(\"../examples\")\n\n\nclass TestHARDump:\n    def flow(self, resp_content=b'message'):\n        times = dict(\n            timestamp_start=746203272,\n            timestamp_end=746203272,\n        )\n\n        \n        return tflow.tflow(\n            req=tutils.treq(method=b'GET', **times),\n            resp=tutils.tresp(content=resp_content, **times)\n        )\n\n    def test_simple(self, tmpdir):\n        with taddons.context() as tctx:\n            a = tctx.script(example_dir.path(\"complex/har_dump.py\"))\n            path = str(tmpdir.join(\"somefile\"))\n            tctx.configure(a, hardump=path)\n            tctx.invoke(a, \"response\", self.flow())\n            tctx.invoke(a, \"done\")\n            with open(path, \"r\") as inp:\n                har = json.load(inp)\n            assert len(har[\"log\"][\"entries\"]) == 1\n\n    def test_base64(self, tmpdir):\n        with taddons.context() as tctx:\n            a = tctx.script(example_dir.path(\"complex/har_dump.py\"))\n            path = str(tmpdir.join(\"somefile\"))\n            tctx.configure(a, hardump=path)\n\n            tctx.invoke(\n                a, \"response\", self.flow(resp_content=b\"foo\" + b\"\\xFF\" * 10)\n            )\n            tctx.invoke(a, \"done\")\n            with open(path, \"r\") as inp:\n                har = json.load(inp)\n            assert har[\"log\"][\"entries\"][0][\"response\"][\"content\"][\"encoding\"] == \"base64\"\n\n    def test_format_cookies(self):\n        with taddons.context() as tctx:\n            a = tctx.script(example_dir.path(\"complex/har_dump.py\"))\n\n            CA = cookies.CookieAttrs\n\n            f = a.format_cookies([(\"n\", \"v\", CA([(\"k\", \"v\")]))])[0]\n            assert f['name'] == \"n\"\n            assert f['value'] == \"v\"\n            assert not f['httpOnly']\n            assert not f['secure']\n\n            f = a.format_cookies([(\"n\", \"v\", CA([(\"httponly\", None), (\"secure\", None)]))])[0]\n            assert f['httpOnly']\n            assert f['secure']\n\n            f = a.format_cookies([(\"n\", \"v\", CA([(\"expires\", \"Mon, 24-Aug-2037 00:00:00 GMT\")]))])[0]\n            assert f['expires']\n\n    def test_binary(self, tmpdir):\n        with taddons.context() as tctx:\n            a = tctx.script(example_dir.path(\"complex/har_dump.py\"))\n            path = str(tmpdir.join(\"somefile\"))\n            tctx.configure(a, hardump=path)\n\n            f = self.flow()\n            f.request.method = \"POST\"\n            f.request.headers[\"content-type\"] = \"application/x-www-form-urlencoded\"\n            f.request.content = b\"foo=bar&baz=s%c3%bc%c3%9f\"\n            f.response.headers[\"random-junk\"] = bytes(range(256))\n            f.response.content = bytes(range(256))\n\n            tctx.invoke(a, \"response\", f)\n            tctx.invoke(a, \"done\")\n\n            with open(path, \"r\") as inp:\n                har = json.load(inp)\n            assert len(har[\"log\"][\"entries\"]) == 1\n", "comments": "  create dummy flow testing ", "content": "import json\n\nfrom mitmproxy.test import tflow\nfrom mitmproxy.test import tutils\nfrom mitmproxy.test import taddons\nfrom mitmproxy.net.http import cookies\n\nexample_dir = tutils.test_data.push(\"../examples\")\n\n\nclass TestHARDump:\n    def flow(self, resp_content=b'message'):\n        times = dict(\n            timestamp_start=746203272,\n            timestamp_end=746203272,\n        )\n\n        # Create a dummy flow for testing\n        return tflow.tflow(\n            req=tutils.treq(method=b'GET', **times),\n            resp=tutils.tresp(content=resp_content, **times)\n        )\n\n    def test_simple(self, tmpdir):\n        with taddons.context() as tctx:\n            a = tctx.script(example_dir.path(\"complex/har_dump.py\"))\n            path = str(tmpdir.join(\"somefile\"))\n            tctx.configure(a, hardump=path)\n            tctx.invoke(a, \"response\", self.flow())\n            tctx.invoke(a, \"done\")\n            with open(path, \"r\") as inp:\n                har = json.load(inp)\n            assert len(har[\"log\"][\"entries\"]) == 1\n\n    def test_base64(self, tmpdir):\n        with taddons.context() as tctx:\n            a = tctx.script(example_dir.path(\"complex/har_dump.py\"))\n            path = str(tmpdir.join(\"somefile\"))\n            tctx.configure(a, hardump=path)\n\n            tctx.invoke(\n                a, \"response\", self.flow(resp_content=b\"foo\" + b\"\\xFF\" * 10)\n            )\n            tctx.invoke(a, \"done\")\n            with open(path, \"r\") as inp:\n                har = json.load(inp)\n            assert har[\"log\"][\"entries\"][0][\"response\"][\"content\"][\"encoding\"] == \"base64\"\n\n    def test_format_cookies(self):\n        with taddons.context() as tctx:\n            a = tctx.script(example_dir.path(\"complex/har_dump.py\"))\n\n            CA = cookies.CookieAttrs\n\n            f = a.format_cookies([(\"n\", \"v\", CA([(\"k\", \"v\")]))])[0]\n            assert f['name'] == \"n\"\n            assert f['value'] == \"v\"\n            assert not f['httpOnly']\n            assert not f['secure']\n\n            f = a.format_cookies([(\"n\", \"v\", CA([(\"httponly\", None), (\"secure\", None)]))])[0]\n            assert f['httpOnly']\n            assert f['secure']\n\n            f = a.format_cookies([(\"n\", \"v\", CA([(\"expires\", \"Mon, 24-Aug-2037 00:00:00 GMT\")]))])[0]\n            assert f['expires']\n\n    def test_binary(self, tmpdir):\n        with taddons.context() as tctx:\n            a = tctx.script(example_dir.path(\"complex/har_dump.py\"))\n            path = str(tmpdir.join(\"somefile\"))\n            tctx.configure(a, hardump=path)\n\n            f = self.flow()\n            f.request.method = \"POST\"\n            f.request.headers[\"content-type\"] = \"application/x-www-form-urlencoded\"\n            f.request.content = b\"foo=bar&baz=s%c3%bc%c3%9f\"\n            f.response.headers[\"random-junk\"] = bytes(range(256))\n            f.response.content = bytes(range(256))\n\n            tctx.invoke(a, \"response\", f)\n            tctx.invoke(a, \"done\")\n\n            with open(path, \"r\") as inp:\n                har = json.load(inp)\n            assert len(har[\"log\"][\"entries\"]) == 1\n", "description": "An interactive TLS-capable intercepting HTTP proxy for penetration testers and software developers.", "file_name": "test_har_dump.py", "id": "e8e311c7dabc269569738cfb4781d0f9", "language": "Python", "project_name": "mitmproxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/mitmproxy-mitmproxy/mitmproxy-mitmproxy-0bc3f1f/test/examples/test_har_dump.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:46Z", "url": "https://github.com/mitmproxy/mitmproxy", "wiki": false}