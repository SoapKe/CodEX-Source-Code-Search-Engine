{"author": "getredash", "code": "from tests import BaseTestCase\nfrom redash.models import AccessPermission\nfrom redash.permissions import ACCESS_TYPE_MODIFY, ACCESS_TYPE_VIEW\n\n\nclass TestAccessPermissionGrant(BaseTestCase):\n    def test_creates_correct_object(self):\n        q = self.factory.create_query()\n        permission = AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_MODIFY,\n                                            grantor=self.factory.user,\n                                            grantee=self.factory.user)\n\n        self.assertEqual(permission.object, q)\n        self.assertEqual(permission.grantor, self.factory.user)\n        self.assertEqual(permission.grantee, self.factory.user)\n        self.assertEqual(permission.access_type, ACCESS_TYPE_MODIFY)\n\n    def test_returns_existing_object_if_exists(self):\n        q = self.factory.create_query()\n        permission1 = AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_MODIFY,\n                                            grantor=self.factory.user,\n                                            grantee=self.factory.user)\n\n        permission2 = AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_MODIFY,\n                                            grantor=self.factory.user,\n                                            grantee=self.factory.user)\n\n        self.assertEqual(permission1.id, permission2.id)\n\n\nclass TestAccessPermissionRevoke(BaseTestCase):\n    def test_deletes_nothing_when_no_permission_exists(self):\n        q = self.factory.create_query()\n        self.assertEqual(0, AccessPermission.revoke(q, self.factory.user, ACCESS_TYPE_MODIFY))\n\n    def test_deletes_permission(self):\n        q = self.factory.create_query()\n        permission = AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_MODIFY,\n                                            grantor=self.factory.user,\n                                            grantee=self.factory.user)\n        self.assertEqual(1, AccessPermission.revoke(q, self.factory.user, ACCESS_TYPE_MODIFY))\n\n    def test_deletes_permission_for_only_given_grantee_on_given_grant_type(self):\n        q = self.factory.create_query()\n        first_user  = self.factory.create_user()\n        second_user = self.factory.create_user()\n\n        AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_MODIFY,\n                               grantor=self.factory.user,\n                               grantee=first_user)\n\n        AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_MODIFY,\n                               grantor=self.factory.user,\n                               grantee=second_user)\n\n        AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_VIEW,\n                               grantor=self.factory.user,\n                               grantee=second_user)\n\n        self.assertEqual(1, AccessPermission.revoke(q, second_user, ACCESS_TYPE_VIEW))\n\n    def test_deletes_all_permissions_if_no_type_given(self):\n        q = self.factory.create_query()\n\n        permission = AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_MODIFY,\n                                            grantor=self.factory.user,\n                                            grantee=self.factory.user)\n\n        permission = AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_VIEW,\n                                            grantor=self.factory.user,\n                                            grantee=self.factory.user)\n\n        self.assertEqual(2, AccessPermission.revoke(q, self.factory.user))\n\n\nclass TestAccessPermissionFind(BaseTestCase):\n    pass\n\n\nclass TestAccessPermissionExists(BaseTestCase):\n    pass\n", "comments": "", "content": "from tests import BaseTestCase\nfrom redash.models import AccessPermission\nfrom redash.permissions import ACCESS_TYPE_MODIFY, ACCESS_TYPE_VIEW\n\n\nclass TestAccessPermissionGrant(BaseTestCase):\n    def test_creates_correct_object(self):\n        q = self.factory.create_query()\n        permission = AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_MODIFY,\n                                            grantor=self.factory.user,\n                                            grantee=self.factory.user)\n\n        self.assertEqual(permission.object, q)\n        self.assertEqual(permission.grantor, self.factory.user)\n        self.assertEqual(permission.grantee, self.factory.user)\n        self.assertEqual(permission.access_type, ACCESS_TYPE_MODIFY)\n\n    def test_returns_existing_object_if_exists(self):\n        q = self.factory.create_query()\n        permission1 = AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_MODIFY,\n                                            grantor=self.factory.user,\n                                            grantee=self.factory.user)\n\n        permission2 = AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_MODIFY,\n                                            grantor=self.factory.user,\n                                            grantee=self.factory.user)\n\n        self.assertEqual(permission1.id, permission2.id)\n\n\nclass TestAccessPermissionRevoke(BaseTestCase):\n    def test_deletes_nothing_when_no_permission_exists(self):\n        q = self.factory.create_query()\n        self.assertEqual(0, AccessPermission.revoke(q, self.factory.user, ACCESS_TYPE_MODIFY))\n\n    def test_deletes_permission(self):\n        q = self.factory.create_query()\n        permission = AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_MODIFY,\n                                            grantor=self.factory.user,\n                                            grantee=self.factory.user)\n        self.assertEqual(1, AccessPermission.revoke(q, self.factory.user, ACCESS_TYPE_MODIFY))\n\n    def test_deletes_permission_for_only_given_grantee_on_given_grant_type(self):\n        q = self.factory.create_query()\n        first_user  = self.factory.create_user()\n        second_user = self.factory.create_user()\n\n        AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_MODIFY,\n                               grantor=self.factory.user,\n                               grantee=first_user)\n\n        AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_MODIFY,\n                               grantor=self.factory.user,\n                               grantee=second_user)\n\n        AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_VIEW,\n                               grantor=self.factory.user,\n                               grantee=second_user)\n\n        self.assertEqual(1, AccessPermission.revoke(q, second_user, ACCESS_TYPE_VIEW))\n\n    def test_deletes_all_permissions_if_no_type_given(self):\n        q = self.factory.create_query()\n\n        permission = AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_MODIFY,\n                                            grantor=self.factory.user,\n                                            grantee=self.factory.user)\n\n        permission = AccessPermission.grant(obj=q, access_type=ACCESS_TYPE_VIEW,\n                                            grantor=self.factory.user,\n                                            grantee=self.factory.user)\n\n        self.assertEqual(2, AccessPermission.revoke(q, self.factory.user))\n\n\nclass TestAccessPermissionFind(BaseTestCase):\n    pass\n\n\nclass TestAccessPermissionExists(BaseTestCase):\n    pass\n", "description": "Make Your Company Data Driven. Connect to any data source, easily visualize and share your data.", "file_name": "test_permissions.py", "id": "c2f09562870a1f17f73df152e7a9edea", "language": "Python", "project_name": "redash", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/getredash-redash/getredash-redash-0410d83/tests/models/test_permissions.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:54:55Z", "url": "https://github.com/getredash/redash", "wiki": false}