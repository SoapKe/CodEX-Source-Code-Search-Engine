{"author": "django", "code": "from django.conf import settings\nfrom django.core.exceptions import MiddlewareNotUsed\nfrom django.test import RequestFactory, SimpleTestCase, override_settings\nfrom django.test.utils import patch_logger\n\nfrom . import middleware as mw\n\n\n@override_settings(ROOT_URLCONF='middleware_exceptions.urls')\nclass MiddlewareTests(SimpleTestCase):\n    def tearDown(self):\n        mw.log = []\n\n    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.ProcessViewNoneMiddleware'])\n    def test_process_view_return_none(self):\n        response = self.client.get('/middleware_exceptions/view/')\n        self.assertEqual(mw.log, ['processed view normal_view'])\n        self.assertEqual(response.content, b'OK')\n\n    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.ProcessViewMiddleware'])\n    def test_process_view_return_response(self):\n        response = self.client.get('/middleware_exceptions/view/')\n        self.assertEqual(response.content, b'Processed view normal_view')\n\n    @override_settings(MIDDLEWARE=[\n        'middleware_exceptions.middleware.ProcessViewTemplateResponseMiddleware',\n        'middleware_exceptions.middleware.LogMiddleware',\n    ])\n    def test_templateresponse_from_process_view_rendered(self):\n        \"\"\"\n        TemplateResponses returned from process_view() must be rendered before\n        being passed to any middleware that tries to access response.content,\n        such as middleware_exceptions.middleware.LogMiddleware.\n        \"\"\"\n        response = self.client.get('/middleware_exceptions/view/')\n        self.assertEqual(response.content, b'Processed view normal_view\\nProcessViewTemplateResponseMiddleware')\n\n    @override_settings(MIDDLEWARE=[\n        'middleware_exceptions.middleware.ProcessViewTemplateResponseMiddleware',\n        'middleware_exceptions.middleware.TemplateResponseMiddleware',\n    ])\n    def test_templateresponse_from_process_view_passed_to_process_template_response(self):\n        \"\"\"\n        TemplateResponses returned from process_view() should be passed to any\n        template response middleware.\n        \"\"\"\n        response = self.client.get('/middleware_exceptions/view/')\n        expected_lines = [\n            b'Processed view normal_view',\n            b'ProcessViewTemplateResponseMiddleware',\n            b'TemplateResponseMiddleware',\n        ]\n        self.assertEqual(response.content, b'\\n'.join(expected_lines))\n\n    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.TemplateResponseMiddleware'])\n    def test_process_template_response(self):\n        response = self.client.get('/middleware_exceptions/template_response/')\n        self.assertEqual(response.content, b'template_response OK\\nTemplateResponseMiddleware')\n\n    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.LogMiddleware'])\n    def test_view_exception_converted_before_middleware(self):\n        response = self.client.get('/middleware_exceptions/permission_denied/')\n        self.assertEqual(mw.log, [(response.status_code, response.content)])\n        self.assertEqual(response.status_code, 403)\n\n    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.ProcessExceptionMiddleware'])\n    def test_view_exception_handled_by_process_exception(self):\n        response = self.client.get('/middleware_exceptions/error/')\n        self.assertEqual(response.content, b'Exception caught')\n\n    @override_settings(MIDDLEWARE=[\n        'middleware_exceptions.middleware.ProcessExceptionLogMiddleware',\n        'middleware_exceptions.middleware.ProcessExceptionMiddleware',\n    ])\n    def test_response_from_process_exception_short_circuits_remainder(self):\n        response = self.client.get('/middleware_exceptions/error/')\n        self.assertEqual(mw.log, [])\n        self.assertEqual(response.content, b'Exception caught')\n\n    @override_settings(MIDDLEWARE=[\n        'middleware_exceptions.middleware.LogMiddleware',\n        'middleware_exceptions.middleware.NotFoundMiddleware',\n    ])\n    def test_exception_in_middleware_converted_before_prior_middleware(self):\n        response = self.client.get('/middleware_exceptions/view/')\n        self.assertEqual(mw.log, [(404, response.content)])\n        self.assertEqual(response.status_code, 404)\n\n    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.ProcessExceptionMiddleware'])\n    def test_exception_in_render_passed_to_process_exception(self):\n        response = self.client.get('/middleware_exceptions/exception_in_render/')\n        self.assertEqual(response.content, b'Exception caught')\n\n\n@override_settings(ROOT_URLCONF='middleware_exceptions.urls')\nclass RootUrlconfTests(SimpleTestCase):\n\n    @override_settings(ROOT_URLCONF=None)\n    def test_missing_root_urlconf(self):\n        \n        \n        del settings.ROOT_URLCONF\n        with self.assertRaises(AttributeError):\n            self.client.get(\"/middleware_exceptions/view/\")\n\n\nclass MyMiddleware:\n\n    def __init__(self, get_response=None):\n        raise MiddlewareNotUsed\n\n    def process_request(self, request):\n        pass\n\n\nclass MyMiddlewareWithExceptionMessage:\n\n    def __init__(self, get_response=None):\n        raise MiddlewareNotUsed('spam eggs')\n\n    def process_request(self, request):\n        pass\n\n\n@override_settings(\n    DEBUG=True,\n    ROOT_URLCONF='middleware_exceptions.urls',\n    MIDDLEWARE=['django.middleware.common.CommonMiddleware'],\n)\nclass MiddlewareNotUsedTests(SimpleTestCase):\n\n    rf = RequestFactory()\n\n    def test_raise_exception(self):\n        request = self.rf.get('middleware_exceptions/view/')\n        with self.assertRaises(MiddlewareNotUsed):\n            MyMiddleware().process_request(request)\n\n    @override_settings(MIDDLEWARE=['middleware_exceptions.tests.MyMiddleware'])\n    def test_log(self):\n        with patch_logger('django.request', 'debug') as calls:\n            self.client.get('/middleware_exceptions/view/')\n        self.assertEqual(len(calls), 1)\n        self.assertEqual(\n            calls[0],\n            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n        )\n\n    @override_settings(MIDDLEWARE=['middleware_exceptions.tests.MyMiddlewareWithExceptionMessage'])\n    def test_log_custom_message(self):\n        with patch_logger('django.request', 'debug') as calls:\n            self.client.get('/middleware_exceptions/view/')\n        self.assertEqual(len(calls), 1)\n        self.assertEqual(\n            calls[0],\n            \"MiddlewareNotUsed('middleware_exceptions.tests.MyMiddlewareWithExceptionMessage'): spam eggs\"\n        )\n\n    @override_settings(DEBUG=False)\n    def test_do_not_log_when_debug_is_false(self):\n        with patch_logger('django.request', 'debug') as calls:\n            self.client.get('/middleware_exceptions/view/')\n        self.assertEqual(len(calls), 0)\n", "comments": "            templateresponses returned process view() must rendered         passed middleware tries access response content          middleware exceptions middleware logmiddleware                      response   self client get(  middleware exceptions view  )         self assertequal(response content  b processed view normal view nprocessviewtemplateresponsemiddleware )       override settings(middleware            middleware exceptions middleware processviewtemplateresponsemiddleware            middleware exceptions middleware templateresponsemiddleware        )     def test templateresponse process view passed process template response(self)                      templateresponses returned process view() passed         template response middleware                 removing root urlconf safe  override settings restore    previously defined settings  ", "content": "from django.conf import settings\nfrom django.core.exceptions import MiddlewareNotUsed\nfrom django.test import RequestFactory, SimpleTestCase, override_settings\nfrom django.test.utils import patch_logger\n\nfrom . import middleware as mw\n\n\n@override_settings(ROOT_URLCONF='middleware_exceptions.urls')\nclass MiddlewareTests(SimpleTestCase):\n    def tearDown(self):\n        mw.log = []\n\n    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.ProcessViewNoneMiddleware'])\n    def test_process_view_return_none(self):\n        response = self.client.get('/middleware_exceptions/view/')\n        self.assertEqual(mw.log, ['processed view normal_view'])\n        self.assertEqual(response.content, b'OK')\n\n    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.ProcessViewMiddleware'])\n    def test_process_view_return_response(self):\n        response = self.client.get('/middleware_exceptions/view/')\n        self.assertEqual(response.content, b'Processed view normal_view')\n\n    @override_settings(MIDDLEWARE=[\n        'middleware_exceptions.middleware.ProcessViewTemplateResponseMiddleware',\n        'middleware_exceptions.middleware.LogMiddleware',\n    ])\n    def test_templateresponse_from_process_view_rendered(self):\n        \"\"\"\n        TemplateResponses returned from process_view() must be rendered before\n        being passed to any middleware that tries to access response.content,\n        such as middleware_exceptions.middleware.LogMiddleware.\n        \"\"\"\n        response = self.client.get('/middleware_exceptions/view/')\n        self.assertEqual(response.content, b'Processed view normal_view\\nProcessViewTemplateResponseMiddleware')\n\n    @override_settings(MIDDLEWARE=[\n        'middleware_exceptions.middleware.ProcessViewTemplateResponseMiddleware',\n        'middleware_exceptions.middleware.TemplateResponseMiddleware',\n    ])\n    def test_templateresponse_from_process_view_passed_to_process_template_response(self):\n        \"\"\"\n        TemplateResponses returned from process_view() should be passed to any\n        template response middleware.\n        \"\"\"\n        response = self.client.get('/middleware_exceptions/view/')\n        expected_lines = [\n            b'Processed view normal_view',\n            b'ProcessViewTemplateResponseMiddleware',\n            b'TemplateResponseMiddleware',\n        ]\n        self.assertEqual(response.content, b'\\n'.join(expected_lines))\n\n    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.TemplateResponseMiddleware'])\n    def test_process_template_response(self):\n        response = self.client.get('/middleware_exceptions/template_response/')\n        self.assertEqual(response.content, b'template_response OK\\nTemplateResponseMiddleware')\n\n    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.LogMiddleware'])\n    def test_view_exception_converted_before_middleware(self):\n        response = self.client.get('/middleware_exceptions/permission_denied/')\n        self.assertEqual(mw.log, [(response.status_code, response.content)])\n        self.assertEqual(response.status_code, 403)\n\n    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.ProcessExceptionMiddleware'])\n    def test_view_exception_handled_by_process_exception(self):\n        response = self.client.get('/middleware_exceptions/error/')\n        self.assertEqual(response.content, b'Exception caught')\n\n    @override_settings(MIDDLEWARE=[\n        'middleware_exceptions.middleware.ProcessExceptionLogMiddleware',\n        'middleware_exceptions.middleware.ProcessExceptionMiddleware',\n    ])\n    def test_response_from_process_exception_short_circuits_remainder(self):\n        response = self.client.get('/middleware_exceptions/error/')\n        self.assertEqual(mw.log, [])\n        self.assertEqual(response.content, b'Exception caught')\n\n    @override_settings(MIDDLEWARE=[\n        'middleware_exceptions.middleware.LogMiddleware',\n        'middleware_exceptions.middleware.NotFoundMiddleware',\n    ])\n    def test_exception_in_middleware_converted_before_prior_middleware(self):\n        response = self.client.get('/middleware_exceptions/view/')\n        self.assertEqual(mw.log, [(404, response.content)])\n        self.assertEqual(response.status_code, 404)\n\n    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.ProcessExceptionMiddleware'])\n    def test_exception_in_render_passed_to_process_exception(self):\n        response = self.client.get('/middleware_exceptions/exception_in_render/')\n        self.assertEqual(response.content, b'Exception caught')\n\n\n@override_settings(ROOT_URLCONF='middleware_exceptions.urls')\nclass RootUrlconfTests(SimpleTestCase):\n\n    @override_settings(ROOT_URLCONF=None)\n    def test_missing_root_urlconf(self):\n        # Removing ROOT_URLCONF is safe, as override_settings will restore\n        # the previously defined settings.\n        del settings.ROOT_URLCONF\n        with self.assertRaises(AttributeError):\n            self.client.get(\"/middleware_exceptions/view/\")\n\n\nclass MyMiddleware:\n\n    def __init__(self, get_response=None):\n        raise MiddlewareNotUsed\n\n    def process_request(self, request):\n        pass\n\n\nclass MyMiddlewareWithExceptionMessage:\n\n    def __init__(self, get_response=None):\n        raise MiddlewareNotUsed('spam eggs')\n\n    def process_request(self, request):\n        pass\n\n\n@override_settings(\n    DEBUG=True,\n    ROOT_URLCONF='middleware_exceptions.urls',\n    MIDDLEWARE=['django.middleware.common.CommonMiddleware'],\n)\nclass MiddlewareNotUsedTests(SimpleTestCase):\n\n    rf = RequestFactory()\n\n    def test_raise_exception(self):\n        request = self.rf.get('middleware_exceptions/view/')\n        with self.assertRaises(MiddlewareNotUsed):\n            MyMiddleware().process_request(request)\n\n    @override_settings(MIDDLEWARE=['middleware_exceptions.tests.MyMiddleware'])\n    def test_log(self):\n        with patch_logger('django.request', 'debug') as calls:\n            self.client.get('/middleware_exceptions/view/')\n        self.assertEqual(len(calls), 1)\n        self.assertEqual(\n            calls[0],\n            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n        )\n\n    @override_settings(MIDDLEWARE=['middleware_exceptions.tests.MyMiddlewareWithExceptionMessage'])\n    def test_log_custom_message(self):\n        with patch_logger('django.request', 'debug') as calls:\n            self.client.get('/middleware_exceptions/view/')\n        self.assertEqual(len(calls), 1)\n        self.assertEqual(\n            calls[0],\n            \"MiddlewareNotUsed('middleware_exceptions.tests.MyMiddlewareWithExceptionMessage'): spam eggs\"\n        )\n\n    @override_settings(DEBUG=False)\n    def test_do_not_log_when_debug_is_false(self):\n        with patch_logger('django.request', 'debug') as calls:\n            self.client.get('/middleware_exceptions/view/')\n        self.assertEqual(len(calls), 0)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "0969c47898980041eef868c368f314d3", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/middleware_exceptions/tests.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}