{"author": "ansible", "code": "\n\n @author: Gaurav Rastogi (grastogi@avinetworks.com)\n          Eric Anderson (eanderson@avinetworks.com)\n module_check: supported\n Avi Version: 17.1.2\n\n Copyright: (c) 2017 Gaurav Rastogi, <grastogi@avinetworks.com>\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: avi_vsvip\nauthor: Gaurav Rastogi (grastogi@avinetworks.com)\n\nshort_description: Module for setup of VsVip Avi RESTful Object\ndescription:\n    - This module is used to configure VsVip object\n    - more examples at U(https://github.com/avinetworks/devops)\nrequirements: [ avisdk ]\nversion_added: \"2.4\"\noptions:\n    state:\n        description:\n            - The state that should be applied on the entity.\n        default: present\n        choices: [\"absent\", \"present\"]\n    avi_api_update_method:\n        description:\n            - Default method for object update is HTTP PUT.\n            - Setting to patch will override that behavior to use HTTP PATCH.\n        version_added: \"2.5\"\n        default: put\n        choices: [\"put\", \"patch\"]\n    avi_api_patch_op:\n        description:\n            - Patch operation to use when using avi_api_update_method as patch.\n        version_added: \"2.5\"\n        choices: [\"add\", \"replace\", \"delete\"]\n    cloud_ref:\n        description:\n            - It is a reference to an object of type cloud.\n            - Field introduced in 17.1.1.\n    dns_info:\n        description:\n            - Service discovery specific data including fully qualified domain name, type and time-to-live of the dns record.\n            - Field introduced in 17.1.1.\n    east_west_placement:\n        description:\n            - Force placement on all service engines in the service engine group (container clouds only).\n            - Field introduced in 17.1.1.\n            - Default value when not specified in API or module is interpreted by Avi Controller as False.\n        type: bool\n    name:\n        description:\n            - Name for the vsvip object.\n            - Field introduced in 17.1.1.\n        required: true\n    tenant_ref:\n        description:\n            - It is a reference to an object of type tenant.\n            - Field introduced in 17.1.1.\n    url:\n        description:\n            - Avi controller URL of the object.\n    uuid:\n        description:\n            - Uuid of the vsvip object.\n            - Field introduced in 17.1.1.\n    vip:\n        description:\n            - List of virtual service ips and other shareable entities.\n            - Field introduced in 17.1.1.\n    vrf_context_ref:\n        description:\n            - Virtual routing context that the virtual service is bound to.\n            - This is used to provide the isolation of the set of networks the application is attached to.\n            - It is a reference to an object of type vrfcontext.\n            - Field introduced in 17.1.1.\nextends_documentation_fragment:\n    - avi\n'''\n\nEXAMPLES = \n\nRETURN = '''\nobj:\n    description: VsVip (api/vsvip) object\n    returned: success, changed\n    type: dict\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\ntry:\n    from ansible.module_utils.network.avi.avi import (\n        avi_common_argument_spec, HAS_AVI, avi_ansible_api)\nexcept ImportError:\n    HAS_AVI = False\n\n\ndef main():\n    argument_specs = dict(\n        state=dict(default='present',\n                   choices=['absent', 'present']),\n        avi_api_update_method=dict(default='put',\n                                   choices=['put', 'patch']),\n        avi_api_patch_op=dict(choices=['add', 'replace', 'delete']),\n        cloud_ref=dict(type='str',),\n        dns_info=dict(type='list',),\n        east_west_placement=dict(type='bool',),\n        name=dict(type='str', required=True),\n        tenant_ref=dict(type='str',),\n        url=dict(type='str',),\n        uuid=dict(type='str',),\n        vip=dict(type='list',),\n        vrf_context_ref=dict(type='str',),\n    )\n    argument_specs.update(avi_common_argument_spec())\n    module = AnsibleModule(\n        argument_spec=argument_specs, supports_check_mode=True)\n    if not HAS_AVI:\n        return module.fail_json(msg=(\n            'Avi python API SDK (avisdk>=17.1) is not installed. '\n            'For more details visit https://github.com/avinetworks/sdk.'))\n    return avi_ansible_api(module, 'vsvip',\n                           set([]))\n\nif __name__ == '__main__':\n    main()\n", "comments": "      name  example create vsvip object   avi vsvip      controller  10 10 25 42     username  admin     password  something     state  present     name  sample vsvip              module  avi vsvip author  gaurav rastogi (grastogi avinetworks com)  short description  module setup vsvip avi restful object description        this module used configure vsvip object       examples u(https   github com avinetworks devops) requirements    avisdk   version added   2 4  options      state          description                the state applied entity          default  present         choices    absent    present       avi api update method          description                default method object update http put                setting patch override behavior use http patch          version added   2 5          default  put         choices    put    patch       avi api patch op          description                patch operation use using avi api update method patch          version added   2 5          choices    add    replace    delete       cloud ref          description                it reference object type cloud                field introduced 17 1 1      dns info          description                service discovery specific data including fully qualified domain name  type time live dns record                field introduced 17 1 1      east west placement          description                force placement service engines service engine group (container clouds only)                field introduced 17 1 1                default value specified api module interpreted avi controller false          type  bool     name          description                name vsvip object                field introduced 17 1 1          required  true     tenant ref          description                it reference object type tenant                field introduced 17 1 1      url          description                avi controller url object      uuid          description                uuid vsvip object                field introduced 17 1 1      vip          description                list virtual service ips shareable entities                field introduced 17 1 1      vrf context ref          description                virtual routing context virtual service bound                this used provide isolation set networks application attached                it reference object type vrfcontext                field introduced 17 1 1  extends documentation fragment        avi      examples     return       obj      description  vsvip (api vsvip) object     returned  success  changed     type  dict         usr bin python        author  gaurav rastogi (grastogi avinetworks com)             eric anderson (eanderson avinetworks com)    module check  supported    avi version  17 1 2       copyright  (c) 2017 gaurav rastogi   grastogi avinetworks com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    ", "content": "#!/usr/bin/python\n#\n# @author: Gaurav Rastogi (grastogi@avinetworks.com)\n#          Eric Anderson (eanderson@avinetworks.com)\n# module_check: supported\n# Avi Version: 17.1.2\n#\n# Copyright: (c) 2017 Gaurav Rastogi, <grastogi@avinetworks.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: avi_vsvip\nauthor: Gaurav Rastogi (grastogi@avinetworks.com)\n\nshort_description: Module for setup of VsVip Avi RESTful Object\ndescription:\n    - This module is used to configure VsVip object\n    - more examples at U(https://github.com/avinetworks/devops)\nrequirements: [ avisdk ]\nversion_added: \"2.4\"\noptions:\n    state:\n        description:\n            - The state that should be applied on the entity.\n        default: present\n        choices: [\"absent\", \"present\"]\n    avi_api_update_method:\n        description:\n            - Default method for object update is HTTP PUT.\n            - Setting to patch will override that behavior to use HTTP PATCH.\n        version_added: \"2.5\"\n        default: put\n        choices: [\"put\", \"patch\"]\n    avi_api_patch_op:\n        description:\n            - Patch operation to use when using avi_api_update_method as patch.\n        version_added: \"2.5\"\n        choices: [\"add\", \"replace\", \"delete\"]\n    cloud_ref:\n        description:\n            - It is a reference to an object of type cloud.\n            - Field introduced in 17.1.1.\n    dns_info:\n        description:\n            - Service discovery specific data including fully qualified domain name, type and time-to-live of the dns record.\n            - Field introduced in 17.1.1.\n    east_west_placement:\n        description:\n            - Force placement on all service engines in the service engine group (container clouds only).\n            - Field introduced in 17.1.1.\n            - Default value when not specified in API or module is interpreted by Avi Controller as False.\n        type: bool\n    name:\n        description:\n            - Name for the vsvip object.\n            - Field introduced in 17.1.1.\n        required: true\n    tenant_ref:\n        description:\n            - It is a reference to an object of type tenant.\n            - Field introduced in 17.1.1.\n    url:\n        description:\n            - Avi controller URL of the object.\n    uuid:\n        description:\n            - Uuid of the vsvip object.\n            - Field introduced in 17.1.1.\n    vip:\n        description:\n            - List of virtual service ips and other shareable entities.\n            - Field introduced in 17.1.1.\n    vrf_context_ref:\n        description:\n            - Virtual routing context that the virtual service is bound to.\n            - This is used to provide the isolation of the set of networks the application is attached to.\n            - It is a reference to an object of type vrfcontext.\n            - Field introduced in 17.1.1.\nextends_documentation_fragment:\n    - avi\n'''\n\nEXAMPLES = \"\"\"\n- name: Example to create VsVip object\n  avi_vsvip:\n    controller: 10.10.25.42\n    username: admin\n    password: something\n    state: present\n    name: sample_vsvip\n\"\"\"\n\nRETURN = '''\nobj:\n    description: VsVip (api/vsvip) object\n    returned: success, changed\n    type: dict\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\ntry:\n    from ansible.module_utils.network.avi.avi import (\n        avi_common_argument_spec, HAS_AVI, avi_ansible_api)\nexcept ImportError:\n    HAS_AVI = False\n\n\ndef main():\n    argument_specs = dict(\n        state=dict(default='present',\n                   choices=['absent', 'present']),\n        avi_api_update_method=dict(default='put',\n                                   choices=['put', 'patch']),\n        avi_api_patch_op=dict(choices=['add', 'replace', 'delete']),\n        cloud_ref=dict(type='str',),\n        dns_info=dict(type='list',),\n        east_west_placement=dict(type='bool',),\n        name=dict(type='str', required=True),\n        tenant_ref=dict(type='str',),\n        url=dict(type='str',),\n        uuid=dict(type='str',),\n        vip=dict(type='list',),\n        vrf_context_ref=dict(type='str',),\n    )\n    argument_specs.update(avi_common_argument_spec())\n    module = AnsibleModule(\n        argument_spec=argument_specs, supports_check_mode=True)\n    if not HAS_AVI:\n        return module.fail_json(msg=(\n            'Avi python API SDK (avisdk>=17.1) is not installed. '\n            'For more details visit https://github.com/avinetworks/sdk.'))\n    return avi_ansible_api(module, 'vsvip',\n                           set([]))\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "avi_vsvip.py", "id": "2cb414f28fd73c47490a9838c18ddac7", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/avi/avi_vsvip.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}