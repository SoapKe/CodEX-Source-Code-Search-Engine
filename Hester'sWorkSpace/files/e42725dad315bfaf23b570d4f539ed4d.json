{"author": "getredash", "code": "from funcy import project\n\nfrom tests import BaseTestCase\nfrom redash.models import Group, DataSource, NoResultFound, db\n\n\nclass TestGroupDataSourceListResource(BaseTestCase):\n    def test_returns_only_groups_for_current_org(self):\n        group = self.factory.create_group(org=self.factory.create_org())\n        data_source = self.factory.create_data_source(group=group)\n        db.session.flush()\n        response = self.make_request('get', '/api/groups/{}/data_sources'.format(group.id), user=self.factory.create_admin())\n        self.assertEqual(response.status_code, 404)\n\n    def test_list(self):\n        group = self.factory.create_group()\n        ds = self.factory.create_data_source(group=group)\n        db.session.flush()\n        response = self.make_request(\n            'get', '/api/groups/{}/data_sources'.format(group.id),\n            user=self.factory.create_admin())\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(len(response.json), 1)\n        self.assertEqual(response.json[0]['id'], ds.id)\n\n\nclass TestGroupResourceList(BaseTestCase):\n\n    def test_list_admin(self):\n        self.factory.create_group(org=self.factory.create_org())\n        response = self.make_request('get', '/api/groups',\n                                     user=self.factory.create_admin())\n        g_keys = ['type', 'id', 'name', 'permissions']\n\n        def filtergroups(gs):\n            return [project(g, g_keys) for g in gs]\n        self.assertEqual(filtergroups(response.json),\n                         filtergroups(g.to_dict() for g in [\n                             self.factory.admin_group,\n                             self.factory.default_group]))\n\n    def test_list(self):\n        group1 = self.factory.create_group(org=self.factory.create_org(),\n                                           permissions=['view_dashboard'])\n        db.session.flush()\n        u = self.factory.create_user(group_ids=[self.factory.default_group.id,\n                                                group1.id])\n        db.session.flush()\n        response = self.make_request('get', '/api/groups',\n                                     user=u)\n        g_keys = ['type', 'id', 'name', 'permissions']\n\n        def filtergroups(gs):\n            return [project(g, g_keys) for g in gs]\n        self.assertEqual(filtergroups(response.json),\n                         filtergroups(g.to_dict() for g in [\n                             self.factory.default_group,\n                             group1]))\n\n\nclass TestGroupResourcePost(BaseTestCase):\n    def test_doesnt_change_builtin_groups(self):\n        current_name = self.factory.default_group.name\n\n        response = self.make_request('post', '/api/groups/{}'.format(self.factory.default_group.id),\n                                     user=self.factory.create_admin(),\n                                     data={'name': 'Another Name'})\n\n        self.assertEqual(response.status_code, 400)\n        self.assertEqual(current_name, Group.query.get(self.factory.default_group.id).name)\n\n\nclass TestGroupResourceDelete(BaseTestCase):\n    def test_allowed_only_to_admin(self):\n        group = self.factory.create_group()\n\n        response = self.make_request('delete', '/api/groups/{}'.format(group.id))\n        self.assertEqual(response.status_code, 403)\n\n        response = self.make_request('delete', '/api/groups/{}'.format(group.id), user=self.factory.create_admin())\n        self.assertEqual(response.status_code, 200)\n        self.assertIsNone(Group.query.get(group.id))\n\n    def test_cant_delete_builtin_group(self):\n        for group in [self.factory.default_group, self.factory.admin_group]:\n            response = self.make_request('delete', '/api/groups/{}'.format(group.id), user=self.factory.create_admin())\n            self.assertEqual(response.status_code, 400)\n\n    def test_can_delete_group_with_data_sources(self):\n        group = self.factory.create_group()\n        data_source = self.factory.create_data_source(group=group)\n\n        response = self.make_request('delete', '/api/groups/{}'.format(group.id), user=self.factory.create_admin())\n\n        self.assertEqual(response.status_code, 200)\n\n        self.assertEqual(data_source, DataSource.query.get(data_source.id))\n\n\nclass TestGroupResourceGet(BaseTestCase):\n    def test_returns_group(self):\n        rv = self.make_request('get', '/api/groups/{}'.format(self.factory.default_group.id))\n        self.assertEqual(rv.status_code, 200)\n\n    def test_doesnt_return_if_user_not_member_or_admin(self):\n        rv = self.make_request('get', '/api/groups/{}'.format(self.factory.admin_group.id))\n        self.assertEqual(rv.status_code, 403)\n\n\n", "comments": "", "content": "from funcy import project\n\nfrom tests import BaseTestCase\nfrom redash.models import Group, DataSource, NoResultFound, db\n\n\nclass TestGroupDataSourceListResource(BaseTestCase):\n    def test_returns_only_groups_for_current_org(self):\n        group = self.factory.create_group(org=self.factory.create_org())\n        data_source = self.factory.create_data_source(group=group)\n        db.session.flush()\n        response = self.make_request('get', '/api/groups/{}/data_sources'.format(group.id), user=self.factory.create_admin())\n        self.assertEqual(response.status_code, 404)\n\n    def test_list(self):\n        group = self.factory.create_group()\n        ds = self.factory.create_data_source(group=group)\n        db.session.flush()\n        response = self.make_request(\n            'get', '/api/groups/{}/data_sources'.format(group.id),\n            user=self.factory.create_admin())\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(len(response.json), 1)\n        self.assertEqual(response.json[0]['id'], ds.id)\n\n\nclass TestGroupResourceList(BaseTestCase):\n\n    def test_list_admin(self):\n        self.factory.create_group(org=self.factory.create_org())\n        response = self.make_request('get', '/api/groups',\n                                     user=self.factory.create_admin())\n        g_keys = ['type', 'id', 'name', 'permissions']\n\n        def filtergroups(gs):\n            return [project(g, g_keys) for g in gs]\n        self.assertEqual(filtergroups(response.json),\n                         filtergroups(g.to_dict() for g in [\n                             self.factory.admin_group,\n                             self.factory.default_group]))\n\n    def test_list(self):\n        group1 = self.factory.create_group(org=self.factory.create_org(),\n                                           permissions=['view_dashboard'])\n        db.session.flush()\n        u = self.factory.create_user(group_ids=[self.factory.default_group.id,\n                                                group1.id])\n        db.session.flush()\n        response = self.make_request('get', '/api/groups',\n                                     user=u)\n        g_keys = ['type', 'id', 'name', 'permissions']\n\n        def filtergroups(gs):\n            return [project(g, g_keys) for g in gs]\n        self.assertEqual(filtergroups(response.json),\n                         filtergroups(g.to_dict() for g in [\n                             self.factory.default_group,\n                             group1]))\n\n\nclass TestGroupResourcePost(BaseTestCase):\n    def test_doesnt_change_builtin_groups(self):\n        current_name = self.factory.default_group.name\n\n        response = self.make_request('post', '/api/groups/{}'.format(self.factory.default_group.id),\n                                     user=self.factory.create_admin(),\n                                     data={'name': 'Another Name'})\n\n        self.assertEqual(response.status_code, 400)\n        self.assertEqual(current_name, Group.query.get(self.factory.default_group.id).name)\n\n\nclass TestGroupResourceDelete(BaseTestCase):\n    def test_allowed_only_to_admin(self):\n        group = self.factory.create_group()\n\n        response = self.make_request('delete', '/api/groups/{}'.format(group.id))\n        self.assertEqual(response.status_code, 403)\n\n        response = self.make_request('delete', '/api/groups/{}'.format(group.id), user=self.factory.create_admin())\n        self.assertEqual(response.status_code, 200)\n        self.assertIsNone(Group.query.get(group.id))\n\n    def test_cant_delete_builtin_group(self):\n        for group in [self.factory.default_group, self.factory.admin_group]:\n            response = self.make_request('delete', '/api/groups/{}'.format(group.id), user=self.factory.create_admin())\n            self.assertEqual(response.status_code, 400)\n\n    def test_can_delete_group_with_data_sources(self):\n        group = self.factory.create_group()\n        data_source = self.factory.create_data_source(group=group)\n\n        response = self.make_request('delete', '/api/groups/{}'.format(group.id), user=self.factory.create_admin())\n\n        self.assertEqual(response.status_code, 200)\n\n        self.assertEqual(data_source, DataSource.query.get(data_source.id))\n\n\nclass TestGroupResourceGet(BaseTestCase):\n    def test_returns_group(self):\n        rv = self.make_request('get', '/api/groups/{}'.format(self.factory.default_group.id))\n        self.assertEqual(rv.status_code, 200)\n\n    def test_doesnt_return_if_user_not_member_or_admin(self):\n        rv = self.make_request('get', '/api/groups/{}'.format(self.factory.admin_group.id))\n        self.assertEqual(rv.status_code, 403)\n\n\n", "description": "Make Your Company Data Driven. Connect to any data source, easily visualize and share your data.", "file_name": "test_groups.py", "id": "e42725dad315bfaf23b570d4f539ed4d", "language": "Python", "project_name": "redash", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/getredash-redash/getredash-redash-0410d83/tests/handlers/test_groups.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:54:55Z", "url": "https://github.com/getredash/redash", "wiki": false}