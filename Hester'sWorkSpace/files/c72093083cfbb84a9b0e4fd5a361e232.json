{"author": "tornadoweb", "code": "\n\nimport logging\nfrom tornado.ioloop import IOLoop\nfrom tornado import gen\nfrom tornado.iostream import StreamClosedError\nfrom tornado.tcpserver import TCPServer\nfrom tornado.options import options, define\n\ndefine(\"port\", default=9888, help=\"TCP port to listen on\")\nlogger = logging.getLogger(__name__)\n\n\nclass EchoServer(TCPServer):\n    @gen.coroutine\n    def handle_stream(self, stream, address):\n        while True:\n            try:\n                data = yield stream.read_until(b\"\\n\")\n                logger.info(\"Received bytes: %s\", data)\n                if not data.endswith(b\"\\n\"):\n                    data = data + b\"\\n\"\n                yield stream.write(data)\n            except StreamClosedError:\n                logger.warning(\"Lost client at host %s\", address[0])\n                break\n            except Exception as e:\n                print(e)\n\n\nif __name__ == \"__main__\":\n    options.parse_command_line()\n    server = EchoServer()\n    server.listen(options.port)\n    logger.info(\"Listening on TCP port %d\", options.port)\n    IOLoop.current().start()\n", "comments": "   usr bin env python ", "content": "#!/usr/bin/env python\n\nimport logging\nfrom tornado.ioloop import IOLoop\nfrom tornado import gen\nfrom tornado.iostream import StreamClosedError\nfrom tornado.tcpserver import TCPServer\nfrom tornado.options import options, define\n\ndefine(\"port\", default=9888, help=\"TCP port to listen on\")\nlogger = logging.getLogger(__name__)\n\n\nclass EchoServer(TCPServer):\n    @gen.coroutine\n    def handle_stream(self, stream, address):\n        while True:\n            try:\n                data = yield stream.read_until(b\"\\n\")\n                logger.info(\"Received bytes: %s\", data)\n                if not data.endswith(b\"\\n\"):\n                    data = data + b\"\\n\"\n                yield stream.write(data)\n            except StreamClosedError:\n                logger.warning(\"Lost client at host %s\", address[0])\n                break\n            except Exception as e:\n                print(e)\n\n\nif __name__ == \"__main__\":\n    options.parse_command_line()\n    server = EchoServer()\n    server.listen(options.port)\n    logger.info(\"Listening on TCP port %d\", options.port)\n    IOLoop.current().start()\n", "description": "Tornado is a Python web framework and asynchronous networking library, originally developed at FriendFeed.", "file_name": "server.py", "id": "c72093083cfbb84a9b0e4fd5a361e232", "language": "Python", "project_name": "tornado", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tornadoweb-tornado/tornadoweb-tornado-9a97ffb/demos/tcpecho/server.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:52:45Z", "url": "https://github.com/tornadoweb/tornado", "wiki": true}