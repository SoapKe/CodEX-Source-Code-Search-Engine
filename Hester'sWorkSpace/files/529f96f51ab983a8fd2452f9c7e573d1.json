{"author": "sympy", "code": "from sympy import Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt\nfrom sympy.abc import x, i, j, a, b, c, d\nfrom sympy.codegen.cfunctions import log1p, expm1, hypot, log10, exp2, log2, Cbrt, Sqrt\nfrom sympy.printing.lambdarepr import NumPyPrinter\n\nfrom sympy.utilities.pytest import skip\nfrom sympy.external import import_module\n\nnp = import_module('numpy')\n\ndef test_numpy_piecewise_regression():\n    \"\"\"\n    NumPyPrinter needs to print Piecewise()'s choicelist as a list to avoid\n    breaking compatibility with numpy 1.8. This is not necessary in numpy 1.9+.\n    See gh-9747 and gh-9749 for details.\n    \"\"\"\n    p = Piecewise((1, x < 0), (0, True))\n    assert NumPyPrinter().doprint(p) == 'numpy.select([numpy.less(x, 0),True], [1,0], default=numpy.nan)'\n\n\ndef test_sum():\n    if not np:\n        skip(\"NumPy not installed\")\n\n    s = Sum(x ** i, (i, a, b))\n    f = lambdify((a, b, x), s, 'numpy')\n\n    a_, b_ = 0, 10\n    x_ = np.linspace(-1, +1, 10)\n    assert np.allclose(f(a_, b_, x_), sum(x_ ** i_ for i_ in range(a_, b_ + 1)))\n\n    s = Sum(i * x, (i, a, b))\n    f = lambdify((a, b, x), s, 'numpy')\n\n    a_, b_ = 0, 10\n    x_ = np.linspace(-1, +1, 10)\n    assert np.allclose(f(a_, b_, x_), sum(i_ * x_ for i_ in range(a_, b_ + 1)))\n\n\ndef test_multiple_sums():\n    if not np:\n        skip(\"NumPy not installed\")\n\n    s = Sum((x + j) * i, (i, a, b), (j, c, d))\n    f = lambdify((a, b, c, d, x), s, 'numpy')\n\n    a_, b_ = 0, 10\n    c_, d_ = 11, 21\n    x_ = np.linspace(-1, +1, 10)\n    assert np.allclose(f(a_, b_, c_, d_, x_),\n                       sum((x_ + j_) * i_ for i_ in range(a_, b_ + 1) for j_ in range(c_, d_ + 1)))\n\n\ndef test_relational():\n    if not np:\n        skip(\"NumPy not installed\")\n\n    e = Equality(x, 1)\n\n    f = lambdify((x,), e)\n    x_ = np.array([0, 1, 2])\n    assert np.array_equal(f(x_), [False, True, False])\n\n    e = Unequality(x, 1)\n\n    f = lambdify((x,), e)\n    x_ = np.array([0, 1, 2])\n    assert np.array_equal(f(x_), [True, False, True])\n\n    e = (x < 1)\n\n    f = lambdify((x,), e)\n    x_ = np.array([0, 1, 2])\n    assert np.array_equal(f(x_), [True, False, False])\n\n    e = (x <= 1)\n\n    f = lambdify((x,), e)\n    x_ = np.array([0, 1, 2])\n    assert np.array_equal(f(x_), [True, True, False])\n\n    e = (x > 1)\n\n    f = lambdify((x,), e)\n    x_ = np.array([0, 1, 2])\n    assert np.array_equal(f(x_), [False, False, True])\n\n    e = (x >= 1)\n\n    f = lambdify((x,), e)\n    x_ = np.array([0, 1, 2])\n    assert np.array_equal(f(x_), [False, True, True])\n\n\ndef test_mod():\n    if not np:\n        skip(\"NumPy not installed\")\n\n    e = Mod(a, b)\n    f = lambdify((a, b), e)\n\n    a_ = np.array([0, 1, 2, 3])\n    b_ = 2\n    assert np.array_equal(f(a_, b_), [0, 1, 0, 1])\n\n    a_ = np.array([0, 1, 2, 3])\n    b_ = np.array([2, 2, 2, 2])\n    assert np.array_equal(f(a_, b_), [0, 1, 0, 1])\n\n    a_ = np.array([2, 3, 4, 5])\n    b_ = np.array([2, 3, 4, 5])\n    assert np.array_equal(f(a_, b_), [0, 0, 0, 0])\n\n\ndef test_expm1():\n    if not np:\n        skip(\"NumPy not installed\")\n\n    f = lambdify((a,), expm1(a), 'numpy')\n    assert abs(f(1e-10) - 1e-10 - 5e-21) < 1e-22\n\n\ndef test_log1p():\n    if not np:\n        skip(\"NumPy not installed\")\n\n    f = lambdify((a,), log1p(a), 'numpy')\n    assert abs(f(1e-99) - 1e-99) < 1e-100\n\ndef test_hypot():\n    if not np:\n        skip(\"NumPy not installed\")\n    assert abs(lambdify((a, b), hypot(a, b), 'numpy')(3, 4) - 5) < 1e-16\n\ndef test_log10():\n    if not np:\n        skip(\"NumPy not installed\")\n    assert abs(lambdify((a,), log10(a), 'numpy')(100) - 2) < 1e-16\n\n\ndef test_exp2():\n    if not np:\n        skip(\"NumPy not installed\")\n    assert abs(lambdify((a,), exp2(a), 'numpy')(5) - 32) < 1e-16\n\n\ndef test_log2():\n    if not np:\n        skip(\"NumPy not installed\")\n    assert abs(lambdify((a,), log2(a), 'numpy')(256) - 8) < 1e-16\n\n\ndef test_Sqrt():\n    if not np:\n        skip(\"NumPy not installed\")\n    assert abs(lambdify((a,), Sqrt(a), 'numpy')(4) - 2) < 1e-16\n\n\ndef test_sqrt():\n    if not np:\n        skip(\"NumPy not installed\")\n    assert abs(lambdify((a,), sqrt(a), 'numpy')(4) - 2) < 1e-16\n", "comments": "        numpyprinter needs print piecewise() choicelist list avoid     breaking compatibility numpy 1 8  this necessary numpy 1 9       see gh 9747 gh 9749 details          ", "content": "from sympy import Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt\nfrom sympy.abc import x, i, j, a, b, c, d\nfrom sympy.codegen.cfunctions import log1p, expm1, hypot, log10, exp2, log2, Cbrt, Sqrt\nfrom sympy.printing.lambdarepr import NumPyPrinter\n\nfrom sympy.utilities.pytest import skip\nfrom sympy.external import import_module\n\nnp = import_module('numpy')\n\ndef test_numpy_piecewise_regression():\n    \"\"\"\n    NumPyPrinter needs to print Piecewise()'s choicelist as a list to avoid\n    breaking compatibility with numpy 1.8. This is not necessary in numpy 1.9+.\n    See gh-9747 and gh-9749 for details.\n    \"\"\"\n    p = Piecewise((1, x < 0), (0, True))\n    assert NumPyPrinter().doprint(p) == 'numpy.select([numpy.less(x, 0),True], [1,0], default=numpy.nan)'\n\n\ndef test_sum():\n    if not np:\n        skip(\"NumPy not installed\")\n\n    s = Sum(x ** i, (i, a, b))\n    f = lambdify((a, b, x), s, 'numpy')\n\n    a_, b_ = 0, 10\n    x_ = np.linspace(-1, +1, 10)\n    assert np.allclose(f(a_, b_, x_), sum(x_ ** i_ for i_ in range(a_, b_ + 1)))\n\n    s = Sum(i * x, (i, a, b))\n    f = lambdify((a, b, x), s, 'numpy')\n\n    a_, b_ = 0, 10\n    x_ = np.linspace(-1, +1, 10)\n    assert np.allclose(f(a_, b_, x_), sum(i_ * x_ for i_ in range(a_, b_ + 1)))\n\n\ndef test_multiple_sums():\n    if not np:\n        skip(\"NumPy not installed\")\n\n    s = Sum((x + j) * i, (i, a, b), (j, c, d))\n    f = lambdify((a, b, c, d, x), s, 'numpy')\n\n    a_, b_ = 0, 10\n    c_, d_ = 11, 21\n    x_ = np.linspace(-1, +1, 10)\n    assert np.allclose(f(a_, b_, c_, d_, x_),\n                       sum((x_ + j_) * i_ for i_ in range(a_, b_ + 1) for j_ in range(c_, d_ + 1)))\n\n\ndef test_relational():\n    if not np:\n        skip(\"NumPy not installed\")\n\n    e = Equality(x, 1)\n\n    f = lambdify((x,), e)\n    x_ = np.array([0, 1, 2])\n    assert np.array_equal(f(x_), [False, True, False])\n\n    e = Unequality(x, 1)\n\n    f = lambdify((x,), e)\n    x_ = np.array([0, 1, 2])\n    assert np.array_equal(f(x_), [True, False, True])\n\n    e = (x < 1)\n\n    f = lambdify((x,), e)\n    x_ = np.array([0, 1, 2])\n    assert np.array_equal(f(x_), [True, False, False])\n\n    e = (x <= 1)\n\n    f = lambdify((x,), e)\n    x_ = np.array([0, 1, 2])\n    assert np.array_equal(f(x_), [True, True, False])\n\n    e = (x > 1)\n\n    f = lambdify((x,), e)\n    x_ = np.array([0, 1, 2])\n    assert np.array_equal(f(x_), [False, False, True])\n\n    e = (x >= 1)\n\n    f = lambdify((x,), e)\n    x_ = np.array([0, 1, 2])\n    assert np.array_equal(f(x_), [False, True, True])\n\n\ndef test_mod():\n    if not np:\n        skip(\"NumPy not installed\")\n\n    e = Mod(a, b)\n    f = lambdify((a, b), e)\n\n    a_ = np.array([0, 1, 2, 3])\n    b_ = 2\n    assert np.array_equal(f(a_, b_), [0, 1, 0, 1])\n\n    a_ = np.array([0, 1, 2, 3])\n    b_ = np.array([2, 2, 2, 2])\n    assert np.array_equal(f(a_, b_), [0, 1, 0, 1])\n\n    a_ = np.array([2, 3, 4, 5])\n    b_ = np.array([2, 3, 4, 5])\n    assert np.array_equal(f(a_, b_), [0, 0, 0, 0])\n\n\ndef test_expm1():\n    if not np:\n        skip(\"NumPy not installed\")\n\n    f = lambdify((a,), expm1(a), 'numpy')\n    assert abs(f(1e-10) - 1e-10 - 5e-21) < 1e-22\n\n\ndef test_log1p():\n    if not np:\n        skip(\"NumPy not installed\")\n\n    f = lambdify((a,), log1p(a), 'numpy')\n    assert abs(f(1e-99) - 1e-99) < 1e-100\n\ndef test_hypot():\n    if not np:\n        skip(\"NumPy not installed\")\n    assert abs(lambdify((a, b), hypot(a, b), 'numpy')(3, 4) - 5) < 1e-16\n\ndef test_log10():\n    if not np:\n        skip(\"NumPy not installed\")\n    assert abs(lambdify((a,), log10(a), 'numpy')(100) - 2) < 1e-16\n\n\ndef test_exp2():\n    if not np:\n        skip(\"NumPy not installed\")\n    assert abs(lambdify((a,), exp2(a), 'numpy')(5) - 32) < 1e-16\n\n\ndef test_log2():\n    if not np:\n        skip(\"NumPy not installed\")\n    assert abs(lambdify((a,), log2(a), 'numpy')(256) - 8) < 1e-16\n\n\ndef test_Sqrt():\n    if not np:\n        skip(\"NumPy not installed\")\n    assert abs(lambdify((a,), Sqrt(a), 'numpy')(4) - 2) < 1e-16\n\n\ndef test_sqrt():\n    if not np:\n        skip(\"NumPy not installed\")\n    assert abs(lambdify((a,), sqrt(a), 'numpy')(4) - 2) < 1e-16\n", "description": "A computer algebra system written in pure Python", "file_name": "test_numpy.py", "id": "529f96f51ab983a8fd2452f9c7e573d1", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/printing/tests/test_numpy.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}