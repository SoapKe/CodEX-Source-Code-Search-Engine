{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\nimport datetime\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    dict_get,\n    ExtractorError,\n    int_or_none,\n    float_or_none,\n    parse_duration,\n    parse_iso8601,\n    remove_start,\n    try_get,\n    unified_timestamp,\n    urlencode_postdata,\n    xpath_text,\n)\n\n\nclass NiconicoIE(InfoExtractor):\n    IE_NAME = 'niconico'\n    IE_DESC = '\u30cb\u30b3\u30cb\u30b3\u52d5\u753b'\n\n    _TESTS = [{\n        'url': 'http://www.nicovideo.jp/watch/sm22312215',\n        'md5': 'd1a75c0823e2f629128c43e1212760f9',\n        'info_dict': {\n            'id': 'sm22312215',\n            'ext': 'mp4',\n            'title': 'Big Buck Bunny',\n            'thumbnail': r're:https?://.*',\n            'uploader': 'takuya0301',\n            'uploader_id': '2698420',\n            'upload_date': '20131123',\n            'timestamp': int,  \n            'description': '(c) copyright 2008, Blender Foundation / www.bigbuckbunny.org',\n            'duration': 33,\n            'view_count': int,\n            'comment_count': int,\n        },\n        'skip': 'Requires an account',\n    }, {\n        \n        \n        'url': 'http://www.nicovideo.jp/watch/nm14296458',\n        'info_dict': {\n            'id': 'nm14296458',\n            'ext': 'swf',\n            'title': '\u3010\u93e1\u97f3\u30ea\u30f3\u3011Dance on media\u3010\u30aa\u30ea\u30b8\u30ca\u30eb\u3011take2!',\n            'description': 'md5:689f066d74610b3b22e0f1739add0f58',\n            'thumbnail': r're:https?://.*',\n            'uploader': '\u308a\u3087\u3046\u305f',\n            'uploader_id': '18822557',\n            'upload_date': '20110429',\n            'timestamp': 1304065916,\n            'duration': 209,\n        },\n        'skip': 'Requires an account',\n    }, {\n        \n        \n        'url': 'http://www.nicovideo.jp/watch/sm10000',\n        'info_dict': {\n            'id': 'sm10000',\n            'ext': 'unknown_video',\n            'description': 'deleted',\n            'title': '\u30c9\u30e9\u3048\u3082\u3093\u30a8\u30bf\u30fc\u30ca\u30eb\u7b2c3\u8a71\u300c\u6c7a\u6226\u7b2c3\u65b0\u6771\u4eac\u5e02\u300d\uff1c\u524d\u7de8\uff1e',\n            'thumbnail': r're:https?://.*',\n            'upload_date': '20071224',\n            'timestamp': int,  \n            'duration': 304,\n            'view_count': int,\n        },\n        'skip': 'Requires an account',\n    }, {\n        'url': 'http://www.nicovideo.jp/watch/so22543406',\n        'info_dict': {\n            'id': '1388129933',\n            'ext': 'mp4',\n            'title': '\u3010\u7b2c1\u56de\u3011RADIO\u30a2\u30cb\u30e1\u30ed\u30df\u30c3\u30af\u30b9 \u30e9\u30d6\u30e9\u30a4\u30d6\uff01\uff5e\u306e\u305e\u3048\u308aRadio Garden\uff5e',\n            'description': 'md5:b27d224bb0ff53d3c8269e9f8b561cf1',\n            'thumbnail': r're:https?://.*',\n            'timestamp': 1388851200,\n            'upload_date': '20140104',\n            'uploader': '\u30a2\u30cb\u30e1\u30ed\u30c1\u30e3\u30f3\u30cd\u30eb',\n            'uploader_id': '312',\n        },\n        'skip': 'The viewing period of the video you were searching for has expired.',\n    }, {\n        \n        'url': 'http://www.nicovideo.jp/watch/sm1151009',\n        'md5': '8fa81c364eb619d4085354eab075598a',\n        'info_dict': {\n            'id': 'sm1151009',\n            'ext': 'mp4',\n            'title': '\u30de\u30b9\u30bf\u30fc\u30b7\u30b9\u30c6\u30e0\u672c\u4f53\u5185\u8535\u306e\u30b9\u30da\u30cf\u30ea\u306e\u30e1\u30a4\u30f3\u30c6\u30fc\u30de\uff08\uff30\uff33\uff27\u7248\uff09',\n            'description': 'md5:6ee077e0581ff5019773e2e714cdd0b7',\n            'thumbnail': r're:https?://.*',\n            'duration': 184,\n            'timestamp': 1190868283,\n            'upload_date': '20070927',\n            'uploader': 'denden2',\n            'uploader_id': '1392194',\n            'view_count': int,\n            'comment_count': int,\n        },\n        'skip': 'Requires an account',\n    }, {\n        \n        \n        'url': 'http://www.nicovideo.jp/watch/sm31464864',\n        'info_dict': {\n            'id': 'sm31464864',\n            'ext': 'mp4',\n            'title': '\u65b0\u4f5cTV\u30a2\u30cb\u30e1\u300c\u6226\u59eb\u7d76\u5531\u30b7\u30f3\u30d5\u30a9\u30ae\u30a2AXZ\u300dPV \u6700\u9ad8\u753b\u8cea',\n            'description': 'md5:e52974af9a96e739196b2c1ca72b5feb',\n            'timestamp': 1498514060,\n            'upload_date': '20170626',\n            'uploader': '\u30b2\u30b9\u30c8',\n            'uploader_id': '40826363',\n            'thumbnail': r're:https?://.*',\n            'duration': 198,\n            'view_count': int,\n            'comment_count': int,\n        },\n        'skip': 'Requires an account',\n    }, {\n        \n        'url': 'http://www.nicovideo.jp/watch/sm18238488',\n        'md5': 'd265680a1f92bdcbbd2a507fc9e78a9e',\n        'info_dict': {\n            'id': 'sm18238488',\n            'ext': 'mp4',\n            'title': '\u3010\u5b9f\u5199\u7248\u3011\u30df\u30e5\u30fc\u30bf\u30f3\u30c8\u30bf\u30fc\u30c8\u30eb\u30ba',\n            'description': 'md5:15df8988e47a86f9e978af2064bf6d8e',\n            'timestamp': 1341160408,\n            'upload_date': '20120701',\n            'uploader': None,\n            'uploader_id': None,\n            'thumbnail': r're:https?://.*',\n            'duration': 5271,\n            'view_count': int,\n            'comment_count': int,\n        },\n        'skip': 'Requires an account',\n    }, {\n        'url': 'http://sp.nicovideo.jp/watch/sm28964488?ss_pos=1&cp_in=wt_tg',\n        'only_matching': True,\n    }]\n\n    _VALID_URL = r'https?://(?:www\\.|secure\\.|sp\\.)?nicovideo\\.jp/watch/(?P<id>(?:[a-z]{2})?[0-9]+)'\n    _NETRC_MACHINE = 'niconico'\n\n    def _real_initialize(self):\n        self._login()\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        \n        if not username:\n            return True\n\n        \n        login_ok = True\n        login_form_strs = {\n            'mail_tel': username,\n            'password': password,\n        }\n        urlh = self._request_webpage(\n            'https://account.nicovideo.jp/api/v1/login', None,\n            note='Logging in', errnote='Unable to log in',\n            data=urlencode_postdata(login_form_strs))\n        if urlh is False:\n            login_ok = False\n        else:\n            parts = compat_urlparse.urlparse(urlh.geturl())\n            if compat_parse_qs(parts.query).get('message', [None])[0] == 'cant_login':\n                login_ok = False\n        if not login_ok:\n            self._downloader.report_warning('unable to log in: bad username or password')\n        return login_ok\n\n    def _extract_format_for_quality(self, api_data, video_id, audio_quality, video_quality):\n        def yesno(boolean):\n            return 'yes' if boolean else 'no'\n\n        session_api_data = api_data['video']['dmcInfo']['session_api']\n        session_api_endpoint = session_api_data['urls'][0]\n\n        format_id = '-'.join(map(lambda s: remove_start(s['id'], 'archive_'), [video_quality, audio_quality]))\n\n        session_response = self._download_json(\n            session_api_endpoint['url'], video_id,\n            query={'_format': 'json'},\n            headers={'Content-Type': 'application/json'},\n            note='Downloading JSON metadata for %s' % format_id,\n            data=json.dumps({\n                'session': {\n                    'client_info': {\n                        'player_id': session_api_data['player_id'],\n                    },\n                    'content_auth': {\n                        'auth_type': session_api_data['auth_types'][session_api_data['protocols'][0]],\n                        'content_key_timeout': session_api_data['content_key_timeout'],\n                        'service_id': 'nicovideo',\n                        'service_user_id': session_api_data['service_user_id']\n                    },\n                    'content_id': session_api_data['content_id'],\n                    'content_src_id_sets': [{\n                        'content_src_ids': [{\n                            'src_id_to_mux': {\n                                'audio_src_ids': [audio_quality['id']],\n                                'video_src_ids': [video_quality['id']],\n                            }\n                        }]\n                    }],\n                    'content_type': 'movie',\n                    'content_uri': '',\n                    'keep_method': {\n                        'heartbeat': {\n                            'lifetime': session_api_data['heartbeat_lifetime']\n                        }\n                    },\n                    'priority': session_api_data['priority'],\n                    'protocol': {\n                        'name': 'http',\n                        'parameters': {\n                            'http_parameters': {\n                                'parameters': {\n                                    'http_output_download_parameters': {\n                                        'use_ssl': yesno(session_api_endpoint['is_ssl']),\n                                        'use_well_known_port': yesno(session_api_endpoint['is_well_known_port']),\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    'recipe_id': session_api_data['recipe_id'],\n                    'session_operation_auth': {\n                        'session_operation_auth_by_signature': {\n                            'signature': session_api_data['signature'],\n                            'token': session_api_data['token'],\n                        }\n                    },\n                    'timing_constraint': 'unlimited'\n                }\n            }))\n\n        resolution = video_quality.get('resolution', {})\n\n        return {\n            'url': session_response['data']['session']['content_uri'],\n            'format_id': format_id,\n            'ext': 'mp4',  \n            'abr': float_or_none(audio_quality.get('bitrate'), 1000),\n            'vbr': float_or_none(video_quality.get('bitrate'), 1000),\n            'height': resolution.get('height'),\n            'width': resolution.get('width'),\n        }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        \n        \n        \n        webpage, handle = self._download_webpage_handle(\n            'http://www.nicovideo.jp/watch/' + video_id, video_id)\n        if video_id.startswith('so'):\n            video_id = self._match_id(handle.geturl())\n\n        api_data = self._parse_json(self._html_search_regex(\n            'data-api-data=\"([^\"]+)\"', webpage,\n            'API data', default='{}'), video_id)\n\n        def _format_id_from_url(video_url):\n            return 'economy' if video_real_url.endswith('low') else 'normal'\n\n        try:\n            video_real_url = api_data['video']['smileInfo']['url']\n        except KeyError:  \n            \n            flv_info_webpage = self._download_webpage(\n                'http://flapi.nicovideo.jp/api/getflv/' + video_id + '?as3=1',\n                video_id, 'Downloading flv info')\n\n            flv_info = compat_urlparse.parse_qs(flv_info_webpage)\n            if 'url' not in flv_info:\n                if 'deleted' in flv_info:\n                    raise ExtractorError('The video has been deleted.',\n                                         expected=True)\n                elif 'closed' in flv_info:\n                    raise ExtractorError('Niconico videos now require logging in',\n                                         expected=True)\n                elif 'error' in flv_info:\n                    raise ExtractorError('%s reports error: %s' % (\n                        self.IE_NAME, flv_info['error'][0]), expected=True)\n                else:\n                    raise ExtractorError('Unable to find video URL')\n\n            video_info_xml = self._download_xml(\n                'http://ext.nicovideo.jp/api/getthumbinfo/' + video_id,\n                video_id, note='Downloading video info page')\n\n            def get_video_info(items):\n                if not isinstance(items, list):\n                    items = [items]\n                for item in items:\n                    ret = xpath_text(video_info_xml, './/' + item)\n                    if ret:\n                        return ret\n\n            video_real_url = flv_info['url'][0]\n\n            extension = get_video_info('movie_type')\n            if not extension:\n                extension = determine_ext(video_real_url)\n\n            formats = [{\n                'url': video_real_url,\n                'ext': extension,\n                'format_id': _format_id_from_url(video_real_url),\n            }]\n        else:\n            formats = []\n\n            dmc_info = api_data['video'].get('dmcInfo')\n            if dmc_info:  \n                quality_info = dmc_info['quality']\n                for audio_quality in quality_info['audios']:\n                    for video_quality in quality_info['videos']:\n                        if not audio_quality['available'] or not video_quality['available']:\n                            continue\n                        formats.append(self._extract_format_for_quality(\n                            api_data, video_id, audio_quality, video_quality))\n\n                self._sort_formats(formats)\n            else:  \n                formats = [{\n                    'url': video_real_url,\n                    'ext': 'mp4',\n                    'format_id': _format_id_from_url(video_real_url),\n                }]\n\n            def get_video_info(items):\n                return dict_get(api_data['video'], items)\n\n        \n        title = get_video_info('title')\n        if not title:\n            title = self._og_search_title(webpage, default=None)\n        if not title:\n            title = self._html_search_regex(\n                r'<span[^>]+class=\"videoHeaderTitle\"[^>]*>([^<]+)</span>',\n                webpage, 'video title')\n\n        watch_api_data_string = self._html_search_regex(\n            r'<div[^>]+id=\"watchAPIDataContainer\"[^>]+>([^<]+)</div>',\n            webpage, 'watch api data', default=None)\n        watch_api_data = self._parse_json(watch_api_data_string, video_id) if watch_api_data_string else {}\n        video_detail = watch_api_data.get('videoDetail', {})\n\n        thumbnail = (\n            get_video_info(['thumbnail_url', 'thumbnailURL']) or\n            self._html_search_meta('image', webpage, 'thumbnail', default=None) or\n            video_detail.get('thumbnail'))\n\n        description = get_video_info('description')\n\n        timestamp = (parse_iso8601(get_video_info('first_retrieve')) or\n                     unified_timestamp(get_video_info('postedDateTime')))\n        if not timestamp:\n            match = self._html_search_meta('datePublished', webpage, 'date published', default=None)\n            if match:\n                timestamp = parse_iso8601(match.replace('+', ':00+'))\n        if not timestamp and video_detail.get('postedAt'):\n            timestamp = parse_iso8601(\n                video_detail['postedAt'].replace('/', '-'),\n                delimiter=' ', timezone=datetime.timedelta(hours=9))\n\n        view_count = int_or_none(get_video_info(['view_counter', 'viewCount']))\n        if not view_count:\n            match = self._html_search_regex(\n                r'>Views: <strong[^>]*>([^<]+)</strong>',\n                webpage, 'view count', default=None)\n            if match:\n                view_count = int_or_none(match.replace(',', ''))\n        view_count = view_count or video_detail.get('viewCount')\n\n        comment_count = (int_or_none(get_video_info('comment_num')) or\n                         video_detail.get('commentCount') or\n                         try_get(api_data, lambda x: x['thread']['commentCount']))\n        if not comment_count:\n            match = self._html_search_regex(\n                r'>Comments: <strong[^>]*>([^<]+)</strong>',\n                webpage, 'comment count', default=None)\n            if match:\n                comment_count = int_or_none(match.replace(',', ''))\n\n        duration = (parse_duration(\n            get_video_info('length') or\n            self._html_search_meta(\n                'video:duration', webpage, 'video duration', default=None)) or\n            video_detail.get('length') or\n            get_video_info('duration'))\n\n        webpage_url = get_video_info('watch_url') or url\n\n        \n        \n        owner = try_get(api_data, lambda x: x.get('owner'), dict) or {}\n        uploader_id = get_video_info(['ch_id', 'user_id']) or owner.get('id')\n        uploader = get_video_info(['ch_name', 'user_nickname']) or owner.get('nickname')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'description': description,\n            'uploader': uploader,\n            'timestamp': timestamp,\n            'uploader_id': uploader_id,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'duration': duration,\n            'webpage_url': webpage_url,\n        }\n\n\nclass NiconicoPlaylistIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?nicovideo\\.jp/mylist/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.nicovideo.jp/mylist/27411728',\n        'info_dict': {\n            'id': '27411728',\n            'title': 'AKB48\u306e\u30aa\u30fc\u30eb\u30ca\u30a4\u30c8\u30cb\u30c3\u30dd\u30f3',\n        },\n        'playlist_mincount': 225,\n    }\n\n    def _real_extract(self, url):\n        list_id = self._match_id(url)\n        webpage = self._download_webpage(url, list_id)\n\n        entries_json = self._search_regex(r'Mylist\\.preload\\(\\d+, (\\[.*\\])\\);',\n                                          webpage, 'entries')\n        entries = json.loads(entries_json)\n        entries = [{\n            '_type': 'url',\n            'ie_key': NiconicoIE.ie_key(),\n            'url': ('http://www.nicovideo.jp/watch/%s' %\n                    entry['item_data']['video_id']),\n        } for entry in entries]\n\n        return {\n            '_type': 'playlist',\n            'title': self._search_regex(r'\\s+name: \"(.*?)\"', webpage, 'title'),\n            'id': list_id,\n            'entries': entries,\n        }\n", "comments": "# coding: utf-8\n# timestamp is unstable\n# File downloaded with and without credentials are different, so omit\n# the md5 field\n# 'video exists but is marked as \"deleted\"\n# md5 is unstable\n# timestamp field has different value if logged in\n# video not available via `getflv`; \"old\" HTML5 video\n# \"New\" HTML5 video\n# md5 is unstable\n# Video without owner\n# No authentication to be performed\n# Log in\n# Session API are used in HTML5, which always serves mp4\n# Get video webpage. We are not actually interested in it for normal\n# cases, but need the cookies in order to be able to download the\n# info webpage\n# Flash videos\n# Get flv info\n# \"New\" HTML5 videos\n# \"Old\" HTML5 videos\n# Start extracting information\n# Note: cannot use api_data.get('owner', {}) because owner may be set to \"null\"\n# in the JSON, which will cause None to be returned instead of {}.\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\nimport datetime\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    dict_get,\n    ExtractorError,\n    int_or_none,\n    float_or_none,\n    parse_duration,\n    parse_iso8601,\n    remove_start,\n    try_get,\n    unified_timestamp,\n    urlencode_postdata,\n    xpath_text,\n)\n\n\nclass NiconicoIE(InfoExtractor):\n    IE_NAME = 'niconico'\n    IE_DESC = '\u30cb\u30b3\u30cb\u30b3\u52d5\u753b'\n\n    _TESTS = [{\n        'url': 'http://www.nicovideo.jp/watch/sm22312215',\n        'md5': 'd1a75c0823e2f629128c43e1212760f9',\n        'info_dict': {\n            'id': 'sm22312215',\n            'ext': 'mp4',\n            'title': 'Big Buck Bunny',\n            'thumbnail': r're:https?://.*',\n            'uploader': 'takuya0301',\n            'uploader_id': '2698420',\n            'upload_date': '20131123',\n            'timestamp': int,  # timestamp is unstable\n            'description': '(c) copyright 2008, Blender Foundation / www.bigbuckbunny.org',\n            'duration': 33,\n            'view_count': int,\n            'comment_count': int,\n        },\n        'skip': 'Requires an account',\n    }, {\n        # File downloaded with and without credentials are different, so omit\n        # the md5 field\n        'url': 'http://www.nicovideo.jp/watch/nm14296458',\n        'info_dict': {\n            'id': 'nm14296458',\n            'ext': 'swf',\n            'title': '\u3010\u93e1\u97f3\u30ea\u30f3\u3011Dance on media\u3010\u30aa\u30ea\u30b8\u30ca\u30eb\u3011take2!',\n            'description': 'md5:689f066d74610b3b22e0f1739add0f58',\n            'thumbnail': r're:https?://.*',\n            'uploader': '\u308a\u3087\u3046\u305f',\n            'uploader_id': '18822557',\n            'upload_date': '20110429',\n            'timestamp': 1304065916,\n            'duration': 209,\n        },\n        'skip': 'Requires an account',\n    }, {\n        # 'video exists but is marked as \"deleted\"\n        # md5 is unstable\n        'url': 'http://www.nicovideo.jp/watch/sm10000',\n        'info_dict': {\n            'id': 'sm10000',\n            'ext': 'unknown_video',\n            'description': 'deleted',\n            'title': '\u30c9\u30e9\u3048\u3082\u3093\u30a8\u30bf\u30fc\u30ca\u30eb\u7b2c3\u8a71\u300c\u6c7a\u6226\u7b2c3\u65b0\u6771\u4eac\u5e02\u300d\uff1c\u524d\u7de8\uff1e',\n            'thumbnail': r're:https?://.*',\n            'upload_date': '20071224',\n            'timestamp': int,  # timestamp field has different value if logged in\n            'duration': 304,\n            'view_count': int,\n        },\n        'skip': 'Requires an account',\n    }, {\n        'url': 'http://www.nicovideo.jp/watch/so22543406',\n        'info_dict': {\n            'id': '1388129933',\n            'ext': 'mp4',\n            'title': '\u3010\u7b2c1\u56de\u3011RADIO\u30a2\u30cb\u30e1\u30ed\u30df\u30c3\u30af\u30b9 \u30e9\u30d6\u30e9\u30a4\u30d6\uff01\uff5e\u306e\u305e\u3048\u308aRadio Garden\uff5e',\n            'description': 'md5:b27d224bb0ff53d3c8269e9f8b561cf1',\n            'thumbnail': r're:https?://.*',\n            'timestamp': 1388851200,\n            'upload_date': '20140104',\n            'uploader': '\u30a2\u30cb\u30e1\u30ed\u30c1\u30e3\u30f3\u30cd\u30eb',\n            'uploader_id': '312',\n        },\n        'skip': 'The viewing period of the video you were searching for has expired.',\n    }, {\n        # video not available via `getflv`; \"old\" HTML5 video\n        'url': 'http://www.nicovideo.jp/watch/sm1151009',\n        'md5': '8fa81c364eb619d4085354eab075598a',\n        'info_dict': {\n            'id': 'sm1151009',\n            'ext': 'mp4',\n            'title': '\u30de\u30b9\u30bf\u30fc\u30b7\u30b9\u30c6\u30e0\u672c\u4f53\u5185\u8535\u306e\u30b9\u30da\u30cf\u30ea\u306e\u30e1\u30a4\u30f3\u30c6\u30fc\u30de\uff08\uff30\uff33\uff27\u7248\uff09',\n            'description': 'md5:6ee077e0581ff5019773e2e714cdd0b7',\n            'thumbnail': r're:https?://.*',\n            'duration': 184,\n            'timestamp': 1190868283,\n            'upload_date': '20070927',\n            'uploader': 'denden2',\n            'uploader_id': '1392194',\n            'view_count': int,\n            'comment_count': int,\n        },\n        'skip': 'Requires an account',\n    }, {\n        # \"New\" HTML5 video\n        # md5 is unstable\n        'url': 'http://www.nicovideo.jp/watch/sm31464864',\n        'info_dict': {\n            'id': 'sm31464864',\n            'ext': 'mp4',\n            'title': '\u65b0\u4f5cTV\u30a2\u30cb\u30e1\u300c\u6226\u59eb\u7d76\u5531\u30b7\u30f3\u30d5\u30a9\u30ae\u30a2AXZ\u300dPV \u6700\u9ad8\u753b\u8cea',\n            'description': 'md5:e52974af9a96e739196b2c1ca72b5feb',\n            'timestamp': 1498514060,\n            'upload_date': '20170626',\n            'uploader': '\u30b2\u30b9\u30c8',\n            'uploader_id': '40826363',\n            'thumbnail': r're:https?://.*',\n            'duration': 198,\n            'view_count': int,\n            'comment_count': int,\n        },\n        'skip': 'Requires an account',\n    }, {\n        # Video without owner\n        'url': 'http://www.nicovideo.jp/watch/sm18238488',\n        'md5': 'd265680a1f92bdcbbd2a507fc9e78a9e',\n        'info_dict': {\n            'id': 'sm18238488',\n            'ext': 'mp4',\n            'title': '\u3010\u5b9f\u5199\u7248\u3011\u30df\u30e5\u30fc\u30bf\u30f3\u30c8\u30bf\u30fc\u30c8\u30eb\u30ba',\n            'description': 'md5:15df8988e47a86f9e978af2064bf6d8e',\n            'timestamp': 1341160408,\n            'upload_date': '20120701',\n            'uploader': None,\n            'uploader_id': None,\n            'thumbnail': r're:https?://.*',\n            'duration': 5271,\n            'view_count': int,\n            'comment_count': int,\n        },\n        'skip': 'Requires an account',\n    }, {\n        'url': 'http://sp.nicovideo.jp/watch/sm28964488?ss_pos=1&cp_in=wt_tg',\n        'only_matching': True,\n    }]\n\n    _VALID_URL = r'https?://(?:www\\.|secure\\.|sp\\.)?nicovideo\\.jp/watch/(?P<id>(?:[a-z]{2})?[0-9]+)'\n    _NETRC_MACHINE = 'niconico'\n\n    def _real_initialize(self):\n        self._login()\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        # No authentication to be performed\n        if not username:\n            return True\n\n        # Log in\n        login_ok = True\n        login_form_strs = {\n            'mail_tel': username,\n            'password': password,\n        }\n        urlh = self._request_webpage(\n            'https://account.nicovideo.jp/api/v1/login', None,\n            note='Logging in', errnote='Unable to log in',\n            data=urlencode_postdata(login_form_strs))\n        if urlh is False:\n            login_ok = False\n        else:\n            parts = compat_urlparse.urlparse(urlh.geturl())\n            if compat_parse_qs(parts.query).get('message', [None])[0] == 'cant_login':\n                login_ok = False\n        if not login_ok:\n            self._downloader.report_warning('unable to log in: bad username or password')\n        return login_ok\n\n    def _extract_format_for_quality(self, api_data, video_id, audio_quality, video_quality):\n        def yesno(boolean):\n            return 'yes' if boolean else 'no'\n\n        session_api_data = api_data['video']['dmcInfo']['session_api']\n        session_api_endpoint = session_api_data['urls'][0]\n\n        format_id = '-'.join(map(lambda s: remove_start(s['id'], 'archive_'), [video_quality, audio_quality]))\n\n        session_response = self._download_json(\n            session_api_endpoint['url'], video_id,\n            query={'_format': 'json'},\n            headers={'Content-Type': 'application/json'},\n            note='Downloading JSON metadata for %s' % format_id,\n            data=json.dumps({\n                'session': {\n                    'client_info': {\n                        'player_id': session_api_data['player_id'],\n                    },\n                    'content_auth': {\n                        'auth_type': session_api_data['auth_types'][session_api_data['protocols'][0]],\n                        'content_key_timeout': session_api_data['content_key_timeout'],\n                        'service_id': 'nicovideo',\n                        'service_user_id': session_api_data['service_user_id']\n                    },\n                    'content_id': session_api_data['content_id'],\n                    'content_src_id_sets': [{\n                        'content_src_ids': [{\n                            'src_id_to_mux': {\n                                'audio_src_ids': [audio_quality['id']],\n                                'video_src_ids': [video_quality['id']],\n                            }\n                        }]\n                    }],\n                    'content_type': 'movie',\n                    'content_uri': '',\n                    'keep_method': {\n                        'heartbeat': {\n                            'lifetime': session_api_data['heartbeat_lifetime']\n                        }\n                    },\n                    'priority': session_api_data['priority'],\n                    'protocol': {\n                        'name': 'http',\n                        'parameters': {\n                            'http_parameters': {\n                                'parameters': {\n                                    'http_output_download_parameters': {\n                                        'use_ssl': yesno(session_api_endpoint['is_ssl']),\n                                        'use_well_known_port': yesno(session_api_endpoint['is_well_known_port']),\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    'recipe_id': session_api_data['recipe_id'],\n                    'session_operation_auth': {\n                        'session_operation_auth_by_signature': {\n                            'signature': session_api_data['signature'],\n                            'token': session_api_data['token'],\n                        }\n                    },\n                    'timing_constraint': 'unlimited'\n                }\n            }))\n\n        resolution = video_quality.get('resolution', {})\n\n        return {\n            'url': session_response['data']['session']['content_uri'],\n            'format_id': format_id,\n            'ext': 'mp4',  # Session API are used in HTML5, which always serves mp4\n            'abr': float_or_none(audio_quality.get('bitrate'), 1000),\n            'vbr': float_or_none(video_quality.get('bitrate'), 1000),\n            'height': resolution.get('height'),\n            'width': resolution.get('width'),\n        }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        # Get video webpage. We are not actually interested in it for normal\n        # cases, but need the cookies in order to be able to download the\n        # info webpage\n        webpage, handle = self._download_webpage_handle(\n            'http://www.nicovideo.jp/watch/' + video_id, video_id)\n        if video_id.startswith('so'):\n            video_id = self._match_id(handle.geturl())\n\n        api_data = self._parse_json(self._html_search_regex(\n            'data-api-data=\"([^\"]+)\"', webpage,\n            'API data', default='{}'), video_id)\n\n        def _format_id_from_url(video_url):\n            return 'economy' if video_real_url.endswith('low') else 'normal'\n\n        try:\n            video_real_url = api_data['video']['smileInfo']['url']\n        except KeyError:  # Flash videos\n            # Get flv info\n            flv_info_webpage = self._download_webpage(\n                'http://flapi.nicovideo.jp/api/getflv/' + video_id + '?as3=1',\n                video_id, 'Downloading flv info')\n\n            flv_info = compat_urlparse.parse_qs(flv_info_webpage)\n            if 'url' not in flv_info:\n                if 'deleted' in flv_info:\n                    raise ExtractorError('The video has been deleted.',\n                                         expected=True)\n                elif 'closed' in flv_info:\n                    raise ExtractorError('Niconico videos now require logging in',\n                                         expected=True)\n                elif 'error' in flv_info:\n                    raise ExtractorError('%s reports error: %s' % (\n                        self.IE_NAME, flv_info['error'][0]), expected=True)\n                else:\n                    raise ExtractorError('Unable to find video URL')\n\n            video_info_xml = self._download_xml(\n                'http://ext.nicovideo.jp/api/getthumbinfo/' + video_id,\n                video_id, note='Downloading video info page')\n\n            def get_video_info(items):\n                if not isinstance(items, list):\n                    items = [items]\n                for item in items:\n                    ret = xpath_text(video_info_xml, './/' + item)\n                    if ret:\n                        return ret\n\n            video_real_url = flv_info['url'][0]\n\n            extension = get_video_info('movie_type')\n            if not extension:\n                extension = determine_ext(video_real_url)\n\n            formats = [{\n                'url': video_real_url,\n                'ext': extension,\n                'format_id': _format_id_from_url(video_real_url),\n            }]\n        else:\n            formats = []\n\n            dmc_info = api_data['video'].get('dmcInfo')\n            if dmc_info:  # \"New\" HTML5 videos\n                quality_info = dmc_info['quality']\n                for audio_quality in quality_info['audios']:\n                    for video_quality in quality_info['videos']:\n                        if not audio_quality['available'] or not video_quality['available']:\n                            continue\n                        formats.append(self._extract_format_for_quality(\n                            api_data, video_id, audio_quality, video_quality))\n\n                self._sort_formats(formats)\n            else:  # \"Old\" HTML5 videos\n                formats = [{\n                    'url': video_real_url,\n                    'ext': 'mp4',\n                    'format_id': _format_id_from_url(video_real_url),\n                }]\n\n            def get_video_info(items):\n                return dict_get(api_data['video'], items)\n\n        # Start extracting information\n        title = get_video_info('title')\n        if not title:\n            title = self._og_search_title(webpage, default=None)\n        if not title:\n            title = self._html_search_regex(\n                r'<span[^>]+class=\"videoHeaderTitle\"[^>]*>([^<]+)</span>',\n                webpage, 'video title')\n\n        watch_api_data_string = self._html_search_regex(\n            r'<div[^>]+id=\"watchAPIDataContainer\"[^>]+>([^<]+)</div>',\n            webpage, 'watch api data', default=None)\n        watch_api_data = self._parse_json(watch_api_data_string, video_id) if watch_api_data_string else {}\n        video_detail = watch_api_data.get('videoDetail', {})\n\n        thumbnail = (\n            get_video_info(['thumbnail_url', 'thumbnailURL']) or\n            self._html_search_meta('image', webpage, 'thumbnail', default=None) or\n            video_detail.get('thumbnail'))\n\n        description = get_video_info('description')\n\n        timestamp = (parse_iso8601(get_video_info('first_retrieve')) or\n                     unified_timestamp(get_video_info('postedDateTime')))\n        if not timestamp:\n            match = self._html_search_meta('datePublished', webpage, 'date published', default=None)\n            if match:\n                timestamp = parse_iso8601(match.replace('+', ':00+'))\n        if not timestamp and video_detail.get('postedAt'):\n            timestamp = parse_iso8601(\n                video_detail['postedAt'].replace('/', '-'),\n                delimiter=' ', timezone=datetime.timedelta(hours=9))\n\n        view_count = int_or_none(get_video_info(['view_counter', 'viewCount']))\n        if not view_count:\n            match = self._html_search_regex(\n                r'>Views: <strong[^>]*>([^<]+)</strong>',\n                webpage, 'view count', default=None)\n            if match:\n                view_count = int_or_none(match.replace(',', ''))\n        view_count = view_count or video_detail.get('viewCount')\n\n        comment_count = (int_or_none(get_video_info('comment_num')) or\n                         video_detail.get('commentCount') or\n                         try_get(api_data, lambda x: x['thread']['commentCount']))\n        if not comment_count:\n            match = self._html_search_regex(\n                r'>Comments: <strong[^>]*>([^<]+)</strong>',\n                webpage, 'comment count', default=None)\n            if match:\n                comment_count = int_or_none(match.replace(',', ''))\n\n        duration = (parse_duration(\n            get_video_info('length') or\n            self._html_search_meta(\n                'video:duration', webpage, 'video duration', default=None)) or\n            video_detail.get('length') or\n            get_video_info('duration'))\n\n        webpage_url = get_video_info('watch_url') or url\n\n        # Note: cannot use api_data.get('owner', {}) because owner may be set to \"null\"\n        # in the JSON, which will cause None to be returned instead of {}.\n        owner = try_get(api_data, lambda x: x.get('owner'), dict) or {}\n        uploader_id = get_video_info(['ch_id', 'user_id']) or owner.get('id')\n        uploader = get_video_info(['ch_name', 'user_nickname']) or owner.get('nickname')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'description': description,\n            'uploader': uploader,\n            'timestamp': timestamp,\n            'uploader_id': uploader_id,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'duration': duration,\n            'webpage_url': webpage_url,\n        }\n\n\nclass NiconicoPlaylistIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?nicovideo\\.jp/mylist/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.nicovideo.jp/mylist/27411728',\n        'info_dict': {\n            'id': '27411728',\n            'title': 'AKB48\u306e\u30aa\u30fc\u30eb\u30ca\u30a4\u30c8\u30cb\u30c3\u30dd\u30f3',\n        },\n        'playlist_mincount': 225,\n    }\n\n    def _real_extract(self, url):\n        list_id = self._match_id(url)\n        webpage = self._download_webpage(url, list_id)\n\n        entries_json = self._search_regex(r'Mylist\\.preload\\(\\d+, (\\[.*\\])\\);',\n                                          webpage, 'entries')\n        entries = json.loads(entries_json)\n        entries = [{\n            '_type': 'url',\n            'ie_key': NiconicoIE.ie_key(),\n            'url': ('http://www.nicovideo.jp/watch/%s' %\n                    entry['item_data']['video_id']),\n        } for entry in entries]\n\n        return {\n            '_type': 'playlist',\n            'title': self._search_regex(r'\\s+name: \"(.*?)\"', webpage, 'title'),\n            'id': list_id,\n            'entries': entries,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "niconico.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/niconico.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}