{"author": "jwilder", "code": "import pytest\nfrom backports.ssl_match_hostname import CertificateError\nfrom requests.exceptions import SSLError\n\n\n@pytest.mark.parametrize(\"subdomain,should_redirect_to_https\", [\n    (1, True),\n    (2, True),\n    (3, False),\n])\ndef test_http_redirects_to_https(docker_compose, nginxproxy, subdomain, should_redirect_to_https):\n    r = nginxproxy.get(\"http://%s.web.nginx-proxy.tld/port\" % subdomain)\n    if should_redirect_to_https:\n        assert r.history[0].is_redirect\n        assert r.history[0].headers.get(\"Location\") == \"https://%s.web.nginx-proxy.tld/port\" % subdomain\n    assert \"answer from port 8%s\\n\" % subdomain == r.text\n\n\n@pytest.mark.parametrize(\"subdomain\", [1, 2])\ndef test_https_get_served(docker_compose, nginxproxy, subdomain):\n    r = nginxproxy.get(\"https://%s.web.nginx-proxy.tld/port\" % subdomain, allow_redirects=False)\n    assert r.status_code == 200\n    assert \"answer from port 8%s\\n\" % subdomain == r.text\n\n\ndef test_web3_https_is_500_and_SSL_validation_fails(docker_compose, nginxproxy):\n    with pytest.raises( (CertificateError, SSLError) ) as excinfo:\n        nginxproxy.get(\"https://3.web.nginx-proxy.tld/port\")\n    assert  in str(excinfo.value)\n\n    r = nginxproxy.get(\"https://3.web.nginx-proxy.tld/port\", verify=False)\n    assert r.status_code == 500\n", "comments": "   hostname  3 web nginx proxy tld  match  nginx proxy tld     ", "content": "import pytest\nfrom backports.ssl_match_hostname import CertificateError\nfrom requests.exceptions import SSLError\n\n\n@pytest.mark.parametrize(\"subdomain,should_redirect_to_https\", [\n    (1, True),\n    (2, True),\n    (3, False),\n])\ndef test_http_redirects_to_https(docker_compose, nginxproxy, subdomain, should_redirect_to_https):\n    r = nginxproxy.get(\"http://%s.web.nginx-proxy.tld/port\" % subdomain)\n    if should_redirect_to_https:\n        assert r.history[0].is_redirect\n        assert r.history[0].headers.get(\"Location\") == \"https://%s.web.nginx-proxy.tld/port\" % subdomain\n    assert \"answer from port 8%s\\n\" % subdomain == r.text\n\n\n@pytest.mark.parametrize(\"subdomain\", [1, 2])\ndef test_https_get_served(docker_compose, nginxproxy, subdomain):\n    r = nginxproxy.get(\"https://%s.web.nginx-proxy.tld/port\" % subdomain, allow_redirects=False)\n    assert r.status_code == 200\n    assert \"answer from port 8%s\\n\" % subdomain == r.text\n\n\ndef test_web3_https_is_500_and_SSL_validation_fails(docker_compose, nginxproxy):\n    with pytest.raises( (CertificateError, SSLError) ) as excinfo:\n        nginxproxy.get(\"https://3.web.nginx-proxy.tld/port\")\n    assert \"\"\"hostname '3.web.nginx-proxy.tld' doesn't match 'nginx-proxy.tld'\"\"\" in str(excinfo.value)\n\n    r = nginxproxy.get(\"https://3.web.nginx-proxy.tld/port\", verify=False)\n    assert r.status_code == 500\n", "description": "Automated nginx proxy for Docker containers using docker-gen", "file_name": "test_wildcard_cert_nohttps.py", "id": "e3f1631258b6f7b432aabfee61cceec1", "language": "Python", "project_name": "nginx-proxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jwilder-nginx-proxy/jwilder-nginx-proxy-000a447/test/test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:25:07Z", "url": "https://github.com/jwilder/nginx-proxy", "wiki": true}