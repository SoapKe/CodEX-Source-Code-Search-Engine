{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .once import OnceIE\nfrom ..compat import (\n    compat_urllib_parse_unquote,\n)\nfrom ..utils import (\n    unescapeHTML,\n    url_basename,\n    dict_get,\n)\n\n\nclass GameSpotIE(OnceIE):\n    _VALID_URL = r'https?://(?:www\\.)?gamespot\\.com/(?:video|article)s/(?:[^/]+/\\d+-|embed/)(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.gamespot.com/videos/arma-3-community-guide-sitrep-i/2300-6410818/',\n        'md5': 'b2a30deaa8654fcccd43713a6b6a4825',\n        'info_dict': {\n            'id': 'gs-2300-6410818',\n            'ext': 'mp4',\n            'title': 'Arma 3 - Community Guide: SITREP I',\n            'description': 'Check out this video where some of the basics of Arma 3 is explained.',\n        },\n    }, {\n        'url': 'http://www.gamespot.com/videos/the-witcher-3-wild-hunt-xbox-one-now-playing/2300-6424837/',\n        'info_dict': {\n            'id': 'gs-2300-6424837',\n            'ext': 'mp4',\n            'title': 'Now Playing - The Witcher 3: Wild Hunt',\n            'description': 'Join us as we take a look at the early hours of The Witcher 3: Wild Hunt and more.',\n        },\n        'params': {\n            'skip_download': True,  \n        },\n    }, {\n        'url': 'https://www.gamespot.com/videos/embed/6439218/',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.gamespot.com/articles/the-last-of-us-2-receives-new-ps4-trailer/1100-6454469/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        page_id = self._match_id(url)\n        webpage = self._download_webpage(url, page_id)\n        data_video_json = self._search_regex(\n            r'data-video=[\"\\'](.*?)[\"\\']', webpage, 'data video')\n        data_video = self._parse_json(unescapeHTML(data_video_json), page_id)\n        streams = data_video['videoStreams']\n\n        manifest_url = None\n        formats = []\n        f4m_url = streams.get('f4m_stream')\n        if f4m_url:\n            manifest_url = f4m_url\n            formats.extend(self._extract_f4m_formats(\n                f4m_url + '?hdcore=3.7.0', page_id, f4m_id='hds', fatal=False))\n        m3u8_url = dict_get(streams, ('m3u8_stream', 'adaptive_stream'))\n        if m3u8_url:\n            manifest_url = m3u8_url\n            m3u8_formats = self._extract_m3u8_formats(\n                m3u8_url, page_id, 'mp4', 'm3u8_native',\n                m3u8_id='hls', fatal=False)\n            formats.extend(m3u8_formats)\n        progressive_url = dict_get(\n            streams, ('progressive_hd', 'progressive_high', 'progressive_low', 'other_lr'))\n        if progressive_url and manifest_url:\n            qualities_basename = self._search_regex(\n                r'/([^/]+)\\.csmil/',\n                manifest_url, 'qualities basename', default=None)\n            if qualities_basename:\n                QUALITIES_RE = r'((,\\d+)+,?)'\n                qualities = self._search_regex(\n                    QUALITIES_RE, qualities_basename,\n                    'qualities', default=None)\n                if qualities:\n                    qualities = list(map(lambda q: int(q), qualities.strip(',').split(',')))\n                    qualities.sort()\n                    http_template = re.sub(QUALITIES_RE, r'%d', qualities_basename)\n                    http_url_basename = url_basename(progressive_url)\n                    if m3u8_formats:\n                        self._sort_formats(m3u8_formats)\n                        m3u8_formats = list(filter(\n                            lambda f: f.get('vcodec') != 'none', m3u8_formats))\n                    if len(qualities) == len(m3u8_formats):\n                        for q, m3u8_format in zip(qualities, m3u8_formats):\n                            f = m3u8_format.copy()\n                            f.update({\n                                'url': progressive_url.replace(\n                                    http_url_basename, http_template % q),\n                                'format_id': f['format_id'].replace('hls', 'http'),\n                                'protocol': 'http',\n                            })\n                            formats.append(f)\n                    else:\n                        for q in qualities:\n                            formats.append({\n                                'url': progressive_url.replace(\n                                    http_url_basename, http_template % q),\n                                'ext': 'mp4',\n                                'format_id': 'http-%d' % q,\n                                'tbr': q,\n                            })\n\n        onceux_json = self._search_regex(\n            r'data-onceux-options=[\"\\'](.*?)[\"\\']', webpage, 'data video', default=None)\n        if onceux_json:\n            onceux_url = self._parse_json(unescapeHTML(onceux_json), page_id).get('metadataUri')\n            if onceux_url:\n                formats.extend(self._extract_once_formats(re.sub(\n                    r'https?://[^/]+', 'http://once.unicornmedia.com', onceux_url),\n                    http_formats_preference=-1))\n\n        if not formats:\n            for quality in ['sd', 'hd']:\n                \n                flv_url = streams.get('f4m_{0}'.format(quality))\n                if flv_url is not None:\n                    formats.append({\n                        'url': flv_url,\n                        'ext': 'flv',\n                        'format_id': quality,\n                    })\n        self._sort_formats(formats)\n\n        return {\n            'id': data_video['guid'],\n            'display_id': page_id,\n            'title': compat_urllib_parse_unquote(data_video['title']),\n            'formats': formats,\n            'description': self._html_search_meta('description', webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }\n", "comments": "# m3u8 downloads\n# It's actually a link to a flv file\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .once import OnceIE\nfrom ..compat import (\n    compat_urllib_parse_unquote,\n)\nfrom ..utils import (\n    unescapeHTML,\n    url_basename,\n    dict_get,\n)\n\n\nclass GameSpotIE(OnceIE):\n    _VALID_URL = r'https?://(?:www\\.)?gamespot\\.com/(?:video|article)s/(?:[^/]+/\\d+-|embed/)(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.gamespot.com/videos/arma-3-community-guide-sitrep-i/2300-6410818/',\n        'md5': 'b2a30deaa8654fcccd43713a6b6a4825',\n        'info_dict': {\n            'id': 'gs-2300-6410818',\n            'ext': 'mp4',\n            'title': 'Arma 3 - Community Guide: SITREP I',\n            'description': 'Check out this video where some of the basics of Arma 3 is explained.',\n        },\n    }, {\n        'url': 'http://www.gamespot.com/videos/the-witcher-3-wild-hunt-xbox-one-now-playing/2300-6424837/',\n        'info_dict': {\n            'id': 'gs-2300-6424837',\n            'ext': 'mp4',\n            'title': 'Now Playing - The Witcher 3: Wild Hunt',\n            'description': 'Join us as we take a look at the early hours of The Witcher 3: Wild Hunt and more.',\n        },\n        'params': {\n            'skip_download': True,  # m3u8 downloads\n        },\n    }, {\n        'url': 'https://www.gamespot.com/videos/embed/6439218/',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.gamespot.com/articles/the-last-of-us-2-receives-new-ps4-trailer/1100-6454469/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        page_id = self._match_id(url)\n        webpage = self._download_webpage(url, page_id)\n        data_video_json = self._search_regex(\n            r'data-video=[\"\\'](.*?)[\"\\']', webpage, 'data video')\n        data_video = self._parse_json(unescapeHTML(data_video_json), page_id)\n        streams = data_video['videoStreams']\n\n        manifest_url = None\n        formats = []\n        f4m_url = streams.get('f4m_stream')\n        if f4m_url:\n            manifest_url = f4m_url\n            formats.extend(self._extract_f4m_formats(\n                f4m_url + '?hdcore=3.7.0', page_id, f4m_id='hds', fatal=False))\n        m3u8_url = dict_get(streams, ('m3u8_stream', 'adaptive_stream'))\n        if m3u8_url:\n            manifest_url = m3u8_url\n            m3u8_formats = self._extract_m3u8_formats(\n                m3u8_url, page_id, 'mp4', 'm3u8_native',\n                m3u8_id='hls', fatal=False)\n            formats.extend(m3u8_formats)\n        progressive_url = dict_get(\n            streams, ('progressive_hd', 'progressive_high', 'progressive_low', 'other_lr'))\n        if progressive_url and manifest_url:\n            qualities_basename = self._search_regex(\n                r'/([^/]+)\\.csmil/',\n                manifest_url, 'qualities basename', default=None)\n            if qualities_basename:\n                QUALITIES_RE = r'((,\\d+)+,?)'\n                qualities = self._search_regex(\n                    QUALITIES_RE, qualities_basename,\n                    'qualities', default=None)\n                if qualities:\n                    qualities = list(map(lambda q: int(q), qualities.strip(',').split(',')))\n                    qualities.sort()\n                    http_template = re.sub(QUALITIES_RE, r'%d', qualities_basename)\n                    http_url_basename = url_basename(progressive_url)\n                    if m3u8_formats:\n                        self._sort_formats(m3u8_formats)\n                        m3u8_formats = list(filter(\n                            lambda f: f.get('vcodec') != 'none', m3u8_formats))\n                    if len(qualities) == len(m3u8_formats):\n                        for q, m3u8_format in zip(qualities, m3u8_formats):\n                            f = m3u8_format.copy()\n                            f.update({\n                                'url': progressive_url.replace(\n                                    http_url_basename, http_template % q),\n                                'format_id': f['format_id'].replace('hls', 'http'),\n                                'protocol': 'http',\n                            })\n                            formats.append(f)\n                    else:\n                        for q in qualities:\n                            formats.append({\n                                'url': progressive_url.replace(\n                                    http_url_basename, http_template % q),\n                                'ext': 'mp4',\n                                'format_id': 'http-%d' % q,\n                                'tbr': q,\n                            })\n\n        onceux_json = self._search_regex(\n            r'data-onceux-options=[\"\\'](.*?)[\"\\']', webpage, 'data video', default=None)\n        if onceux_json:\n            onceux_url = self._parse_json(unescapeHTML(onceux_json), page_id).get('metadataUri')\n            if onceux_url:\n                formats.extend(self._extract_once_formats(re.sub(\n                    r'https?://[^/]+', 'http://once.unicornmedia.com', onceux_url),\n                    http_formats_preference=-1))\n\n        if not formats:\n            for quality in ['sd', 'hd']:\n                # It's actually a link to a flv file\n                flv_url = streams.get('f4m_{0}'.format(quality))\n                if flv_url is not None:\n                    formats.append({\n                        'url': flv_url,\n                        'ext': 'flv',\n                        'format_id': quality,\n                    })\n        self._sort_formats(formats)\n\n        return {\n            'id': data_video['guid'],\n            'display_id': page_id,\n            'title': compat_urllib_parse_unquote(data_video['title']),\n            'formats': formats,\n            'description': self._html_search_meta('description', webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "gamespot.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/gamespot.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}