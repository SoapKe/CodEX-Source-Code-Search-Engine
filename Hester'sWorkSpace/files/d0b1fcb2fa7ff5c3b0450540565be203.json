{"author": "openai", "code": "from gym.envs.mujoco import mujoco_env\nfrom gym import utils\nimport numpy as np\n\nclass HumanoidStandupEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, 'humanoidstandup.xml', 5)\n        utils.EzPickle.__init__(self)\n\n    def _get_obs(self):\n        data = self.sim.data\n        return np.concatenate([data.qpos.flat[2:],\n                               data.qvel.flat,\n                               data.cinert.flat,\n                               data.cvel.flat,\n                               data.qfrc_actuator.flat,\n                               data.cfrc_ext.flat])\n\n    def step(self, a):\n        self.do_simulation(a, self.frame_skip)\n        pos_after = self.sim.data.qpos[2]\n        data = self.sim.data\n        uph_cost = (pos_after - 0) / self.model.opt.timestep\n\n        quad_ctrl_cost = 0.1 * np.square(data.ctrl).sum()\n        quad_impact_cost = .5e-6 * np.square(data.cfrc_ext).sum()\n        quad_impact_cost = min(quad_impact_cost, 10)\n        reward = uph_cost - quad_ctrl_cost - quad_impact_cost + 1\n\n        done = bool(False)\n        return self._get_obs(), reward, done, dict(reward_linup=uph_cost, reward_quadctrl=-quad_ctrl_cost, reward_impact=-quad_impact_cost)\n\n    def reset_model(self):\n        c = 0.01\n        self.set_state(\n            self.init_qpos + self.np_random.uniform(low=-c, high=c, size=self.model.nq),\n            self.init_qvel + self.np_random.uniform(low=-c, high=c, size=self.model.nv,)\n        )\n        return self._get_obs()\n\n    def viewer_setup(self):\n        self.viewer.cam.trackbodyid = 1\n        self.viewer.cam.distance = self.model.stat.extent * 1.0\n        self.viewer.cam.lookat[2] += .8\n        self.viewer.cam.elevation = -20\n", "comments": "", "content": "from gym.envs.mujoco import mujoco_env\nfrom gym import utils\nimport numpy as np\n\nclass HumanoidStandupEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, 'humanoidstandup.xml', 5)\n        utils.EzPickle.__init__(self)\n\n    def _get_obs(self):\n        data = self.sim.data\n        return np.concatenate([data.qpos.flat[2:],\n                               data.qvel.flat,\n                               data.cinert.flat,\n                               data.cvel.flat,\n                               data.qfrc_actuator.flat,\n                               data.cfrc_ext.flat])\n\n    def step(self, a):\n        self.do_simulation(a, self.frame_skip)\n        pos_after = self.sim.data.qpos[2]\n        data = self.sim.data\n        uph_cost = (pos_after - 0) / self.model.opt.timestep\n\n        quad_ctrl_cost = 0.1 * np.square(data.ctrl).sum()\n        quad_impact_cost = .5e-6 * np.square(data.cfrc_ext).sum()\n        quad_impact_cost = min(quad_impact_cost, 10)\n        reward = uph_cost - quad_ctrl_cost - quad_impact_cost + 1\n\n        done = bool(False)\n        return self._get_obs(), reward, done, dict(reward_linup=uph_cost, reward_quadctrl=-quad_ctrl_cost, reward_impact=-quad_impact_cost)\n\n    def reset_model(self):\n        c = 0.01\n        self.set_state(\n            self.init_qpos + self.np_random.uniform(low=-c, high=c, size=self.model.nq),\n            self.init_qvel + self.np_random.uniform(low=-c, high=c, size=self.model.nv,)\n        )\n        return self._get_obs()\n\n    def viewer_setup(self):\n        self.viewer.cam.trackbodyid = 1\n        self.viewer.cam.distance = self.model.stat.extent * 1.0\n        self.viewer.cam.lookat[2] += .8\n        self.viewer.cam.elevation = -20\n", "description": "A toolkit for developing and comparing reinforcement learning algorithms.", "file_name": "humanoidstandup.py", "id": "d0b1fcb2fa7ff5c3b0450540565be203", "language": "Python", "project_name": "gym", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/openai-gym/openai-gym-6160181/gym/envs/mujoco/humanoidstandup.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:30:35Z", "url": "https://github.com/openai/gym", "wiki": true}