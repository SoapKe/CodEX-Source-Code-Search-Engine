{"author": "odoo", "code": "from odoo.addons.account.tests.account_test_users import AccountTestUsers\n\n\nclass TestSearch(AccountTestUsers):\n\n    \"\"\"Tests for search on name_search (account.account)\n\n    The name search on account.account is quite complexe, make sure\n    we have all the correct results\n    \"\"\"\n\n    def test_name_search(self):\n        ac_ids = self.account_type_model.search([], limit=1)\n        self.atax = self.account_model.create(dict(\n            name=\"Tax Received\",\n            code=\"X121\",\n            user_type_id=ac_ids.id,\n            reconcile=True,\n        )).id, \"X121 Tax Received\"\n\n        self.apurchase = self.account_model.create(dict(\n            name=\"Purchased Stocks\",\n            code=\"X1101\",\n            user_type_id=ac_ids.id,\n            reconcile=True,\n        )).id, \"X1101 Purchased Stocks\"\n\n        self.asale = self.account_model.create(dict(\n            name=\"Product Sales\",\n            code=\"XX200\",\n            user_type_id=ac_ids.id,\n            reconcile=True,\n        )).id, \"XX200 Product Sales\"\n\n        self.all_ids = [self.atax[0], self.apurchase[0], self.asale[0]]\n\n        atax_ids = self.account_model.name_search(name=\"Tax\", operator='ilike', args=[('id', 'in', self.all_ids)])\n        self.assertEqual(set([self.atax[0]]), set([a[0] for a in atax_ids]), \"name_search 'ilike Tax' should have returned Tax Received account only\")\n\n        atax_ids = self.account_model.name_search(name=\"Tax\", operator='not ilike', args=[('id', 'in', self.all_ids)])\n        self.assertEqual(set([self.apurchase[0], self.asale[0]]), set([a[0] for a in atax_ids]), \"name_search 'not ilike Tax' should have returned all but Tax Received account\")\n\n        apur_ids = self.account_model.name_search(name='Purchased Stocks', operator='ilike', args=[('id', 'in', self.all_ids)])\n        self.assertEqual(set([self.apurchase[0]]), set([a[0] for a in apur_ids]), \"name_search 'ilike Purchased Stocks' should have returned Purchased Stocks account only\")\n\n        apur_ids = self.account_model.name_search(name='Purchased Stocks', operator='not ilike', args=[('id', 'in', self.all_ids)])\n        self.assertEqual(set([self.atax[0], self.asale[0]]), set([a[0] for a in apur_ids]), \"name_search 'not ilike X1101' should have returned all but Purchased Stocks account\")\n\n        asale_ids = self.account_model.name_search(name='Product Sales', operator='ilike', args=[('id', 'in', self.all_ids)])\n        self.assertEqual(set([self.asale[0]]), set([a[0] for a in asale_ids]), \"name_search 'ilike 200 Sales' should have returned Product Sales account only\")\n\n        asale_ids = self.account_model.name_search(name='Product Sales', operator='not ilike', args=[('id', 'in', self.all_ids)])\n        self.assertEqual(set([self.atax[0], self.apurchase[0]]), set([a[0] for a in asale_ids]), \"name_search 'not ilike 200 Sales' should have returned all but Product Sales account\")\n\n        asale_ids = self.account_model.name_search(name='XX200', operator='ilike', args=[('id', 'in', self.all_ids)])\n        self.assertEqual(set([self.asale[0]]), set([a[0] for a in asale_ids]), \"name_search 'ilike XX200' should have returned Product Sales account only\")\n\n    def test_property_unset_search(self):\n        res_partner_model = self.env['res.partner']\n        account_payment_term_model = self.env['account.payment.term']\n\n        a_partner = res_partner_model.create({'name': 'test partner'})\n        a_payment_term = account_payment_term_model.create({'name': 'test payment term'})\n\n        partners = res_partner_model.search([('property_payment_term_id', '=', False), ('id', '=', a_partner.id)])\n        self.assertTrue(partners, \"unset property field 'propety_payment_term' should have been found\")\n\n        a_partner.write({'property_payment_term_id': a_payment_term})\n        partners = res_partner_model.search([('property_payment_term_id', '=', False), ('id', '=', a_partner.id)])\n        self.assertFalse(partners, \"set property field 'propety_payment_term' should not have been found\")\n", "comments": "   tests search name search (account account)      the name search account account quite complexe  make sure     correct results         ", "content": "from odoo.addons.account.tests.account_test_users import AccountTestUsers\n\n\nclass TestSearch(AccountTestUsers):\n\n    \"\"\"Tests for search on name_search (account.account)\n\n    The name search on account.account is quite complexe, make sure\n    we have all the correct results\n    \"\"\"\n\n    def test_name_search(self):\n        ac_ids = self.account_type_model.search([], limit=1)\n        self.atax = self.account_model.create(dict(\n            name=\"Tax Received\",\n            code=\"X121\",\n            user_type_id=ac_ids.id,\n            reconcile=True,\n        )).id, \"X121 Tax Received\"\n\n        self.apurchase = self.account_model.create(dict(\n            name=\"Purchased Stocks\",\n            code=\"X1101\",\n            user_type_id=ac_ids.id,\n            reconcile=True,\n        )).id, \"X1101 Purchased Stocks\"\n\n        self.asale = self.account_model.create(dict(\n            name=\"Product Sales\",\n            code=\"XX200\",\n            user_type_id=ac_ids.id,\n            reconcile=True,\n        )).id, \"XX200 Product Sales\"\n\n        self.all_ids = [self.atax[0], self.apurchase[0], self.asale[0]]\n\n        atax_ids = self.account_model.name_search(name=\"Tax\", operator='ilike', args=[('id', 'in', self.all_ids)])\n        self.assertEqual(set([self.atax[0]]), set([a[0] for a in atax_ids]), \"name_search 'ilike Tax' should have returned Tax Received account only\")\n\n        atax_ids = self.account_model.name_search(name=\"Tax\", operator='not ilike', args=[('id', 'in', self.all_ids)])\n        self.assertEqual(set([self.apurchase[0], self.asale[0]]), set([a[0] for a in atax_ids]), \"name_search 'not ilike Tax' should have returned all but Tax Received account\")\n\n        apur_ids = self.account_model.name_search(name='Purchased Stocks', operator='ilike', args=[('id', 'in', self.all_ids)])\n        self.assertEqual(set([self.apurchase[0]]), set([a[0] for a in apur_ids]), \"name_search 'ilike Purchased Stocks' should have returned Purchased Stocks account only\")\n\n        apur_ids = self.account_model.name_search(name='Purchased Stocks', operator='not ilike', args=[('id', 'in', self.all_ids)])\n        self.assertEqual(set([self.atax[0], self.asale[0]]), set([a[0] for a in apur_ids]), \"name_search 'not ilike X1101' should have returned all but Purchased Stocks account\")\n\n        asale_ids = self.account_model.name_search(name='Product Sales', operator='ilike', args=[('id', 'in', self.all_ids)])\n        self.assertEqual(set([self.asale[0]]), set([a[0] for a in asale_ids]), \"name_search 'ilike 200 Sales' should have returned Product Sales account only\")\n\n        asale_ids = self.account_model.name_search(name='Product Sales', operator='not ilike', args=[('id', 'in', self.all_ids)])\n        self.assertEqual(set([self.atax[0], self.apurchase[0]]), set([a[0] for a in asale_ids]), \"name_search 'not ilike 200 Sales' should have returned all but Product Sales account\")\n\n        asale_ids = self.account_model.name_search(name='XX200', operator='ilike', args=[('id', 'in', self.all_ids)])\n        self.assertEqual(set([self.asale[0]]), set([a[0] for a in asale_ids]), \"name_search 'ilike XX200' should have returned Product Sales account only\")\n\n    def test_property_unset_search(self):\n        res_partner_model = self.env['res.partner']\n        account_payment_term_model = self.env['account.payment.term']\n\n        a_partner = res_partner_model.create({'name': 'test partner'})\n        a_payment_term = account_payment_term_model.create({'name': 'test payment term'})\n\n        partners = res_partner_model.search([('property_payment_term_id', '=', False), ('id', '=', a_partner.id)])\n        self.assertTrue(partners, \"unset property field 'propety_payment_term' should have been found\")\n\n        a_partner.write({'property_payment_term_id': a_payment_term})\n        partners = res_partner_model.search([('property_payment_term_id', '=', False), ('id', '=', a_partner.id)])\n        self.assertFalse(partners, \"set property field 'propety_payment_term' should not have been found\")\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_search.py", "id": "a3531761c895cab45997450ad0fea0cd", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account/tests/test_search.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}