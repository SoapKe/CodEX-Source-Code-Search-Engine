{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    xpath_text,\n)\n\n\nclass PhilharmonieDeParisIE(InfoExtractor):\n    IE_DESC = 'Philharmonie de Paris'\n    _VALID_URL = r'https?://live\\.philharmoniedeparis\\.fr/(?:[Cc]oncert/|misc/Playlist\\.ashx\\?id=)(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://live.philharmoniedeparis.fr/concert/1032066.html',\n        'info_dict': {\n            'id': '1032066',\n            'ext': 'flv',\n            'title': 'md5:d1f5585d87d041d07ce9434804bc8425',\n            'timestamp': 1428179400,\n            'upload_date': '20150404',\n            'duration': 6592.278,\n        },\n        'params': {\n            \n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://live.philharmoniedeparis.fr/Concert/1030324.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://live.philharmoniedeparis.fr/misc/Playlist.ashx?id=1030324&track=&lang=fr',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        concert = self._download_xml(\n            'http://live.philharmoniedeparis.fr/misc/Playlist.ashx?id=%s' % video_id,\n            video_id).find('./concert')\n\n        formats = []\n        info_dict = {\n            'id': video_id,\n            'title': xpath_text(concert, './titre', 'title', fatal=True),\n            'formats': formats,\n        }\n\n        fichiers = concert.find('./fichiers')\n        stream = fichiers.attrib['serveurstream']\n        for fichier in fichiers.findall('./fichier'):\n            info_dict['duration'] = float_or_none(fichier.get('timecodefin'))\n            for quality, (format_id, suffix) in enumerate([('lq', ''), ('hq', '_hd')]):\n                format_url = fichier.get('url%s' % suffix)\n                if not format_url:\n                    continue\n                formats.append({\n                    'url': stream,\n                    'play_path': format_url,\n                    'ext': 'flv',\n                    'format_id': format_id,\n                    'width': int_or_none(concert.get('largeur%s' % suffix)),\n                    'height': int_or_none(concert.get('hauteur%s' % suffix)),\n                    'quality': quality,\n                })\n        self._sort_formats(formats)\n\n        date, hour = concert.get('date'), concert.get('heure')\n        if date and hour:\n            info_dict['timestamp'] = parse_iso8601(\n                '%s-%s-%sT%s:00' % (date[0:4], date[4:6], date[6:8], hour))\n        elif date:\n            info_dict['upload_date'] = date\n\n        return info_dict\n", "comments": "# coding: utf-8\n# rtmp download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    xpath_text,\n)\n\n\nclass PhilharmonieDeParisIE(InfoExtractor):\n    IE_DESC = 'Philharmonie de Paris'\n    _VALID_URL = r'https?://live\\.philharmoniedeparis\\.fr/(?:[Cc]oncert/|misc/Playlist\\.ashx\\?id=)(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://live.philharmoniedeparis.fr/concert/1032066.html',\n        'info_dict': {\n            'id': '1032066',\n            'ext': 'flv',\n            'title': 'md5:d1f5585d87d041d07ce9434804bc8425',\n            'timestamp': 1428179400,\n            'upload_date': '20150404',\n            'duration': 6592.278,\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://live.philharmoniedeparis.fr/Concert/1030324.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://live.philharmoniedeparis.fr/misc/Playlist.ashx?id=1030324&track=&lang=fr',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        concert = self._download_xml(\n            'http://live.philharmoniedeparis.fr/misc/Playlist.ashx?id=%s' % video_id,\n            video_id).find('./concert')\n\n        formats = []\n        info_dict = {\n            'id': video_id,\n            'title': xpath_text(concert, './titre', 'title', fatal=True),\n            'formats': formats,\n        }\n\n        fichiers = concert.find('./fichiers')\n        stream = fichiers.attrib['serveurstream']\n        for fichier in fichiers.findall('./fichier'):\n            info_dict['duration'] = float_or_none(fichier.get('timecodefin'))\n            for quality, (format_id, suffix) in enumerate([('lq', ''), ('hq', '_hd')]):\n                format_url = fichier.get('url%s' % suffix)\n                if not format_url:\n                    continue\n                formats.append({\n                    'url': stream,\n                    'play_path': format_url,\n                    'ext': 'flv',\n                    'format_id': format_id,\n                    'width': int_or_none(concert.get('largeur%s' % suffix)),\n                    'height': int_or_none(concert.get('hauteur%s' % suffix)),\n                    'quality': quality,\n                })\n        self._sort_formats(formats)\n\n        date, hour = concert.get('date'), concert.get('heure')\n        if date and hour:\n            info_dict['timestamp'] = parse_iso8601(\n                '%s-%s-%sT%s:00' % (date[0:4], date[4:6], date[6:8], hour))\n        elif date:\n            info_dict['upload_date'] = date\n\n        return info_dict\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "philharmoniedeparis.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/philharmoniedeparis.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}