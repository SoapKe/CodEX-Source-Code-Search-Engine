{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom .wistia import WistiaIE\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n    get_element_by_class,\n    urlencode_postdata,\n    urljoin,\n)\n\n\nclass UpskillBaseIE(InfoExtractor):\n    _LOGIN_URL = 'http://upskillcourses.com/sign_in'\n    _NETRC_MACHINE = 'upskill'\n\n    def _real_initialize(self):\n        self._login()\n\n    def _login(self):\n        username, password = self._get_login_info()\n        if username is None:\n            return\n\n        login_page, urlh = self._download_webpage_handle(\n            self._LOGIN_URL, None, 'Downloading login page')\n\n        login_url = compat_str(urlh.geturl())\n\n        login_form = self._hidden_inputs(login_page)\n\n        login_form.update({\n            'user[email]': username,\n            'user[password]': password,\n        })\n\n        post_url = self._search_regex(\n            r'<form[^>]+action=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', login_page,\n            'post url', default=login_url, group='url')\n\n        if not post_url.startswith('http'):\n            post_url = urljoin(login_url, post_url)\n\n        response = self._download_webpage(\n            post_url, None, 'Logging in',\n            data=urlencode_postdata(login_form),\n            headers={\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Referer': login_url,\n            })\n\n        \n        if any(re.search(p, response) for p in (\n                r'class=[\"\\']user-signout',\n                r'<a[^>]+\\bhref=[\"\\']/sign_out',\n                r'>\\s*Log out\\s*<')):\n            return\n\n        message = get_element_by_class('alert', response)\n        if message is not None:\n            raise ExtractorError(\n                'Unable to login: %s' % clean_html(message), expected=True)\n\n        raise ExtractorError('Unable to log in')\n\n\nclass UpskillIE(UpskillBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?upskillcourses\\.com/courses/[^/]+/lectures/(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://upskillcourses.com/courses/essential-web-developer-course/lectures/1747100',\n        'info_dict': {\n            'id': 'uzw6zw58or',\n            'ext': 'mp4',\n            'title': 'Welcome to the Course!',\n            'description': 'md5:8d66c13403783370af62ca97a7357bdd',\n            'duration': 138.763,\n            'timestamp': 1479846621,\n            'upload_date': '20161122',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://upskillcourses.com/courses/119763/lectures/1747100',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        wistia_url = WistiaIE._extract_url(webpage)\n        if not wistia_url:\n            if any(re.search(p, webpage) for p in (\n                    r'class=[\"\\']lecture-contents-locked',\n                    r'>\\s*Lecture contents locked',\n                    r'id=[\"\\']lecture-locked')):\n                self.raise_login_required('Lecture contents locked')\n\n        title = self._og_search_title(webpage, default=None)\n\n        return {\n            '_type': 'url_transparent',\n            'url': wistia_url,\n            'ie_key': WistiaIE.ie_key(),\n            'title': title,\n        }\n\n\nclass UpskillCourseIE(UpskillBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?upskillcourses\\.com/courses/(?:enrolled/)?(?P<id>[^/?\n    _TESTS = [{\n        'url': 'http://upskillcourses.com/courses/essential-web-developer-course/',\n        'info_dict': {\n            'id': '119763',\n            'title': 'The Essential Web Developer Course (Free)',\n        },\n        'playlist_count': 192,\n    }, {\n        'url': 'http://upskillcourses.com/courses/119763/',\n        'only_matching': True,\n    }, {\n        'url': 'http://upskillcourses.com/courses/enrolled/119763',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if UpskillIE.suitable(url) else super(\n            UpskillCourseIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        course_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, course_id)\n\n        course_id = self._search_regex(\n            r'data-course-id=[\"\\'](\\d+)', webpage, 'course id',\n            default=course_id)\n\n        entries = []\n\n        for mobj in re.finditer(\n                r'(?s)(?P<li><li[^>]+class=([\"\\'])(?:(?!\\2).)*?section-item[^>]+>.+?</li>)',\n                webpage):\n            li = mobj.group('li')\n            if 'fa-youtube-play' not in li:\n                continue\n            lecture_url = self._search_regex(\n                r'<a[^>]+href=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', li,\n                'lecture url', default=None, group='url')\n            if not lecture_url:\n                continue\n            lecture_id = self._search_regex(\n                r'/lectures/(\\d+)', lecture_url, 'lecture id', default=None)\n            title = self._html_search_regex(\n                r'<span[^>]+class=[\"\\']lecture-name[^>]+>([^<]+)', li,\n                'title', default=None)\n            entries.append(\n                self.url_result(\n                    urljoin('http://upskillcourses.com/', lecture_url),\n                    ie=UpskillIE.ie_key(), video_id=lecture_id,\n                    video_title=clean_html(title)))\n\n        course_title = self._html_search_regex(\n            (r'(?s)<img[^>]+class=[\"\\']course-image[^>]+>\\s*<h\\d>(.+?)</h',\n             r'(?s)<h\\d[^>]+class=[\"\\']course-title[^>]+>(.+?)</h'),\n            webpage, 'course title', fatal=False)\n\n        return self.playlist_result(entries, course_id, course_title)\n", "comments": "# Successful login\n#&]+)'\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom .wistia import WistiaIE\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n    get_element_by_class,\n    urlencode_postdata,\n    urljoin,\n)\n\n\nclass UpskillBaseIE(InfoExtractor):\n    _LOGIN_URL = 'http://upskillcourses.com/sign_in'\n    _NETRC_MACHINE = 'upskill'\n\n    def _real_initialize(self):\n        self._login()\n\n    def _login(self):\n        username, password = self._get_login_info()\n        if username is None:\n            return\n\n        login_page, urlh = self._download_webpage_handle(\n            self._LOGIN_URL, None, 'Downloading login page')\n\n        login_url = compat_str(urlh.geturl())\n\n        login_form = self._hidden_inputs(login_page)\n\n        login_form.update({\n            'user[email]': username,\n            'user[password]': password,\n        })\n\n        post_url = self._search_regex(\n            r'<form[^>]+action=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', login_page,\n            'post url', default=login_url, group='url')\n\n        if not post_url.startswith('http'):\n            post_url = urljoin(login_url, post_url)\n\n        response = self._download_webpage(\n            post_url, None, 'Logging in',\n            data=urlencode_postdata(login_form),\n            headers={\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Referer': login_url,\n            })\n\n        # Successful login\n        if any(re.search(p, response) for p in (\n                r'class=[\"\\']user-signout',\n                r'<a[^>]+\\bhref=[\"\\']/sign_out',\n                r'>\\s*Log out\\s*<')):\n            return\n\n        message = get_element_by_class('alert', response)\n        if message is not None:\n            raise ExtractorError(\n                'Unable to login: %s' % clean_html(message), expected=True)\n\n        raise ExtractorError('Unable to log in')\n\n\nclass UpskillIE(UpskillBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?upskillcourses\\.com/courses/[^/]+/lectures/(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://upskillcourses.com/courses/essential-web-developer-course/lectures/1747100',\n        'info_dict': {\n            'id': 'uzw6zw58or',\n            'ext': 'mp4',\n            'title': 'Welcome to the Course!',\n            'description': 'md5:8d66c13403783370af62ca97a7357bdd',\n            'duration': 138.763,\n            'timestamp': 1479846621,\n            'upload_date': '20161122',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://upskillcourses.com/courses/119763/lectures/1747100',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        wistia_url = WistiaIE._extract_url(webpage)\n        if not wistia_url:\n            if any(re.search(p, webpage) for p in (\n                    r'class=[\"\\']lecture-contents-locked',\n                    r'>\\s*Lecture contents locked',\n                    r'id=[\"\\']lecture-locked')):\n                self.raise_login_required('Lecture contents locked')\n\n        title = self._og_search_title(webpage, default=None)\n\n        return {\n            '_type': 'url_transparent',\n            'url': wistia_url,\n            'ie_key': WistiaIE.ie_key(),\n            'title': title,\n        }\n\n\nclass UpskillCourseIE(UpskillBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?upskillcourses\\.com/courses/(?:enrolled/)?(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'http://upskillcourses.com/courses/essential-web-developer-course/',\n        'info_dict': {\n            'id': '119763',\n            'title': 'The Essential Web Developer Course (Free)',\n        },\n        'playlist_count': 192,\n    }, {\n        'url': 'http://upskillcourses.com/courses/119763/',\n        'only_matching': True,\n    }, {\n        'url': 'http://upskillcourses.com/courses/enrolled/119763',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if UpskillIE.suitable(url) else super(\n            UpskillCourseIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        course_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, course_id)\n\n        course_id = self._search_regex(\n            r'data-course-id=[\"\\'](\\d+)', webpage, 'course id',\n            default=course_id)\n\n        entries = []\n\n        for mobj in re.finditer(\n                r'(?s)(?P<li><li[^>]+class=([\"\\'])(?:(?!\\2).)*?section-item[^>]+>.+?</li>)',\n                webpage):\n            li = mobj.group('li')\n            if 'fa-youtube-play' not in li:\n                continue\n            lecture_url = self._search_regex(\n                r'<a[^>]+href=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', li,\n                'lecture url', default=None, group='url')\n            if not lecture_url:\n                continue\n            lecture_id = self._search_regex(\n                r'/lectures/(\\d+)', lecture_url, 'lecture id', default=None)\n            title = self._html_search_regex(\n                r'<span[^>]+class=[\"\\']lecture-name[^>]+>([^<]+)', li,\n                'title', default=None)\n            entries.append(\n                self.url_result(\n                    urljoin('http://upskillcourses.com/', lecture_url),\n                    ie=UpskillIE.ie_key(), video_id=lecture_id,\n                    video_title=clean_html(title)))\n\n        course_title = self._html_search_regex(\n            (r'(?s)<img[^>]+class=[\"\\']course-image[^>]+>\\s*<h\\d>(.+?)</h',\n             r'(?s)<h\\d[^>]+class=[\"\\']course-title[^>]+>(.+?)</h'),\n            webpage, 'course title', fatal=False)\n\n        return self.playlist_result(entries, course_id, course_title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "upskill.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/upskill.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}