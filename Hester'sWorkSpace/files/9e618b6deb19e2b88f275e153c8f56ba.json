{"author": "sympy", "code": "from sympy.multipledispatch.conflict import (supercedes, ordering, ambiguities,\n        ambiguous, super_signature, consistent)\n\n\nclass A(object): pass\nclass B(A): pass\nclass C(object): pass\n\n\ndef test_supercedes():\n    assert supercedes([B], [A])\n    assert supercedes([B, A], [A, A])\n    assert not supercedes([B, A], [A, B])\n    assert not supercedes([A], [B])\n\n\ndef test_consistent():\n    assert consistent([A], [A])\n    assert consistent([B], [B])\n    assert not consistent([A], [C])\n    assert consistent([A, B], [A, B])\n    assert consistent([B, A], [A, B])\n    assert not consistent([B, A], [B])\n    assert not consistent([B, A], [B, C])\n\n\ndef test_super_signature():\n    assert super_signature([[A]]) == [A]\n    assert super_signature([[A], [B]]) == [B]\n    assert super_signature([[A, B], [B, A]]) == [B, B]\n    assert super_signature([[A, A, B], [A, B, A], [B, A, A]]) == [B, B, B]\n\n\ndef test_ambiguous():\n    assert not ambiguous([A], [A])\n    assert not ambiguous([A], [B])\n    assert not ambiguous([B], [B])\n    assert not ambiguous([A, B], [B, B])\n    assert ambiguous([A, B], [B, A])\n\n\ndef test_ambiguities():\n    signatures = [[A], [B], [A, B], [B, A], [A, C]]\n    expected = set([((A, B), (B, A))])\n    result = ambiguities(signatures)\n    assert set(map(frozenset, expected)) == set(map(frozenset, result))\n\n    signatures = [[A], [B], [A, B], [B, A], [A, C], [B, B]]\n    expected = set()\n    result = ambiguities(signatures)\n    assert set(map(frozenset, expected)) == set(map(frozenset, result))\n\n\ndef test_ordering():\n    signatures = [[A, A], [A, B], [B, A], [B, B], [A, C]]\n    ord = ordering(signatures)\n    assert ord[0] == (B, B) or ord[0] == (A, C)\n    assert ord[-1] == (A, A) or ord[-1] == (A, C)\n\n\ndef test_type_mro():\n    assert super_signature([[object], [type]]) == [type]\n", "comments": "", "content": "from sympy.multipledispatch.conflict import (supercedes, ordering, ambiguities,\n        ambiguous, super_signature, consistent)\n\n\nclass A(object): pass\nclass B(A): pass\nclass C(object): pass\n\n\ndef test_supercedes():\n    assert supercedes([B], [A])\n    assert supercedes([B, A], [A, A])\n    assert not supercedes([B, A], [A, B])\n    assert not supercedes([A], [B])\n\n\ndef test_consistent():\n    assert consistent([A], [A])\n    assert consistent([B], [B])\n    assert not consistent([A], [C])\n    assert consistent([A, B], [A, B])\n    assert consistent([B, A], [A, B])\n    assert not consistent([B, A], [B])\n    assert not consistent([B, A], [B, C])\n\n\ndef test_super_signature():\n    assert super_signature([[A]]) == [A]\n    assert super_signature([[A], [B]]) == [B]\n    assert super_signature([[A, B], [B, A]]) == [B, B]\n    assert super_signature([[A, A, B], [A, B, A], [B, A, A]]) == [B, B, B]\n\n\ndef test_ambiguous():\n    assert not ambiguous([A], [A])\n    assert not ambiguous([A], [B])\n    assert not ambiguous([B], [B])\n    assert not ambiguous([A, B], [B, B])\n    assert ambiguous([A, B], [B, A])\n\n\ndef test_ambiguities():\n    signatures = [[A], [B], [A, B], [B, A], [A, C]]\n    expected = set([((A, B), (B, A))])\n    result = ambiguities(signatures)\n    assert set(map(frozenset, expected)) == set(map(frozenset, result))\n\n    signatures = [[A], [B], [A, B], [B, A], [A, C], [B, B]]\n    expected = set()\n    result = ambiguities(signatures)\n    assert set(map(frozenset, expected)) == set(map(frozenset, result))\n\n\ndef test_ordering():\n    signatures = [[A, A], [A, B], [B, A], [B, B], [A, C]]\n    ord = ordering(signatures)\n    assert ord[0] == (B, B) or ord[0] == (A, C)\n    assert ord[-1] == (A, A) or ord[-1] == (A, C)\n\n\ndef test_type_mro():\n    assert super_signature([[object], [type]]) == [type]\n", "description": "A computer algebra system written in pure Python", "file_name": "test_conflict.py", "id": "9e618b6deb19e2b88f275e153c8f56ba", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/multipledispatch/tests/test_conflict.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}