{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    urlencode_postdata,\n)\n\n\nclass PromptFileIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?promptfile\\.com/l/(?P<id>[0-9A-Z\\-]+)'\n    _TEST = {\n        'url': 'http://www.promptfile.com/l/86D1CE8462-576CAAE416',\n        'md5': '5a7e285a26e0d66d9a263fae91bc92ce',\n        'info_dict': {\n            'id': '86D1CE8462-576CAAE416',\n            'ext': 'mp4',\n            'title': 'oceans.mp4',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        if re.search(r'<div.+id=\"not_found_msg\".+>(?!We are).+</div>[^-]', webpage) is not None:\n            raise ExtractorError('Video %s does not exist' % video_id,\n                                 expected=True)\n\n        chash = self._search_regex(\n            r'val\\(\"([^\"]*)\"\\s*\\+\\s*\\$\\(\"\n        fields = self._hidden_inputs(webpage)\n        keys = list(fields.keys())\n        chash_key = keys[0] if len(keys) == 1 else next(\n            key for key in keys if key.startswith('cha'))\n        fields[chash_key] = chash + fields[chash_key]\n\n        webpage = self._download_webpage(\n            url, video_id, 'Downloading video page',\n            data=urlencode_postdata(fields),\n            headers={'Content-type': 'application/x-www-form-urlencoded'})\n\n        video_url = self._search_regex(\n            (r'<a[^>]+href=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1[^>]*>\\s*Download File',\n             r'<a[^>]+href=([\"\\'])(?P<url>https?://(?:www\\.)?promptfile\\.com/file/(?:(?!\\1).)+)\\1'),\n            webpage, 'video url', group='url')\n        title = self._html_search_regex(\n            r'<span.+title=\"([^\"]+)\">', webpage, 'title')\n        thumbnail = self._html_search_regex(\n            r'<div id=\"player_overlay\">.*button>.*?<img src=\"([^\"]+)\"',\n            webpage, 'thumbnail', fatal=False, flags=re.DOTALL)\n\n        formats = [{\n            'format_id': 'sd',\n            'url': video_url,\n            'ext': determine_ext(title),\n        }]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#chash\"\\)', webpage, 'chash')\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    urlencode_postdata,\n)\n\n\nclass PromptFileIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?promptfile\\.com/l/(?P<id>[0-9A-Z\\-]+)'\n    _TEST = {\n        'url': 'http://www.promptfile.com/l/86D1CE8462-576CAAE416',\n        'md5': '5a7e285a26e0d66d9a263fae91bc92ce',\n        'info_dict': {\n            'id': '86D1CE8462-576CAAE416',\n            'ext': 'mp4',\n            'title': 'oceans.mp4',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        if re.search(r'<div.+id=\"not_found_msg\".+>(?!We are).+</div>[^-]', webpage) is not None:\n            raise ExtractorError('Video %s does not exist' % video_id,\n                                 expected=True)\n\n        chash = self._search_regex(\n            r'val\\(\"([^\"]*)\"\\s*\\+\\s*\\$\\(\"#chash\"\\)', webpage, 'chash')\n        fields = self._hidden_inputs(webpage)\n        keys = list(fields.keys())\n        chash_key = keys[0] if len(keys) == 1 else next(\n            key for key in keys if key.startswith('cha'))\n        fields[chash_key] = chash + fields[chash_key]\n\n        webpage = self._download_webpage(\n            url, video_id, 'Downloading video page',\n            data=urlencode_postdata(fields),\n            headers={'Content-type': 'application/x-www-form-urlencoded'})\n\n        video_url = self._search_regex(\n            (r'<a[^>]+href=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1[^>]*>\\s*Download File',\n             r'<a[^>]+href=([\"\\'])(?P<url>https?://(?:www\\.)?promptfile\\.com/file/(?:(?!\\1).)+)\\1'),\n            webpage, 'video url', group='url')\n        title = self._html_search_regex(\n            r'<span.+title=\"([^\"]+)\">', webpage, 'title')\n        thumbnail = self._html_search_regex(\n            r'<div id=\"player_overlay\">.*button>.*?<img src=\"([^\"]+)\"',\n            webpage, 'thumbnail', fatal=False, flags=re.DOTALL)\n\n        formats = [{\n            'format_id': 'sd',\n            'url': video_url,\n            'ext': determine_ext(title),\n        }]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "promptfile.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/promptfile.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}