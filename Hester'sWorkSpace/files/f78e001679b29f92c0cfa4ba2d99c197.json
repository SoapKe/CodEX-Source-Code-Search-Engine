{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport mock\n\nfrom sentry.testutils import TestCase\nfrom sentry.utils.retries import TimedRetryPolicy, RetryException\n\n\nclass TimedRetryPolicyTestCase(TestCase):\n    def test_policy_success(self):\n        bomb = Exception('Boom!')\n        callable = mock.MagicMock(side_effect=[bomb, mock.sentinel.OK])\n\n        retry = TimedRetryPolicy(30, delay=lambda i: 10)\n        retry.clock = mock.Mock()\n        retry.clock.sleep = mock.MagicMock()\n        retry.clock.time = mock.MagicMock(side_effect=[0, 15])\n\n        assert retry(callable) is mock.sentinel.OK\n        assert callable.call_count == 2\n\n    def test_policy_failure(self):\n        bomb = Exception('Boom!')\n        callable = mock.MagicMock(side_effect=bomb)\n\n        retry = TimedRetryPolicy(30, delay=lambda i: 10)\n        retry.clock = mock.Mock()\n        retry.clock.sleep = mock.MagicMock()\n        retry.clock.time = mock.MagicMock(side_effect=[0, 15, 25])\n\n        try:\n            retry(callable)\n        except RetryException as exception:\n            assert exception.exception is bomb\n        else:\n            self.fail('Expected {!r}!'.format(RetryException))\n\n        assert callable.call_count == 2\n\n    def test_decorator(self):\n        bomb = Exception('Boom!')\n        callable = mock.MagicMock(side_effect=[bomb, mock.sentinel.OK])\n\n        @TimedRetryPolicy.wrap(30, delay=lambda i: 10)\n        def retrying_func():\n            return callable()\n\n        retrying_func.clock = mock.Mock()\n        retrying_func.clock.sleep = mock.MagicMock()\n        retrying_func.clock.time = mock.MagicMock(side_effect=[0, 15, 25])\n\n        assert retrying_func() is mock.sentinel.OK\n        assert callable.call_count == 2\n", "comments": "", "content": "from __future__ import absolute_import\n\nimport mock\n\nfrom sentry.testutils import TestCase\nfrom sentry.utils.retries import TimedRetryPolicy, RetryException\n\n\nclass TimedRetryPolicyTestCase(TestCase):\n    def test_policy_success(self):\n        bomb = Exception('Boom!')\n        callable = mock.MagicMock(side_effect=[bomb, mock.sentinel.OK])\n\n        retry = TimedRetryPolicy(30, delay=lambda i: 10)\n        retry.clock = mock.Mock()\n        retry.clock.sleep = mock.MagicMock()\n        retry.clock.time = mock.MagicMock(side_effect=[0, 15])\n\n        assert retry(callable) is mock.sentinel.OK\n        assert callable.call_count == 2\n\n    def test_policy_failure(self):\n        bomb = Exception('Boom!')\n        callable = mock.MagicMock(side_effect=bomb)\n\n        retry = TimedRetryPolicy(30, delay=lambda i: 10)\n        retry.clock = mock.Mock()\n        retry.clock.sleep = mock.MagicMock()\n        retry.clock.time = mock.MagicMock(side_effect=[0, 15, 25])\n\n        try:\n            retry(callable)\n        except RetryException as exception:\n            assert exception.exception is bomb\n        else:\n            self.fail('Expected {!r}!'.format(RetryException))\n\n        assert callable.call_count == 2\n\n    def test_decorator(self):\n        bomb = Exception('Boom!')\n        callable = mock.MagicMock(side_effect=[bomb, mock.sentinel.OK])\n\n        @TimedRetryPolicy.wrap(30, delay=lambda i: 10)\n        def retrying_func():\n            return callable()\n\n        retrying_func.clock = mock.Mock()\n        retrying_func.clock.sleep = mock.MagicMock()\n        retrying_func.clock.time = mock.MagicMock(side_effect=[0, 15, 25])\n\n        assert retrying_func() is mock.sentinel.OK\n        assert callable.call_count == 2\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_retries.py", "id": "f78e001679b29f92c0cfa4ba2d99c197", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/test_retries.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}