{"author": "tensorflow", "code": "from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\n\nimport tensorflow as tf\n\nfrom common import bf  \n\n\nclass BfTest(tf.test.TestCase):\n\n  def assertCorrectOutput(self, target_output, eval_result):\n    self.assertEqual(target_output, eval_result.output)\n    self.assertTrue(eval_result.success)\n    self.assertEqual(bf.Status.SUCCESS, eval_result.failure_reason)\n\n  def testBasicOps(self):\n    self.assertCorrectOutput(\n        [3, 1, 2],\n        bf.evaluate('+++.--.+.'))\n    self.assertCorrectOutput(\n        [1, 1, 2],\n        bf.evaluate('+.<.>++.'))\n    self.assertCorrectOutput(\n        [0],\n        bf.evaluate('+,.'))\n    self.assertCorrectOutput(\n        [ord(char) for char in 'Hello World!\\n'],\n        bf.evaluate(\n            '>++++++++[-<+++++++++>]<.>>+>-[+]++>++>+++[>[->+++<<+++>]<<]>-----'\n            '.>->+++..+++.>-.<<+[>[+>+]>>]<--------------.>>.+++.------.-------'\n            '-.>+.>+.'))\n\n  def testBase(self):\n    self.assertCorrectOutput(\n        [1, 4],\n        bf.evaluate('+.--.', base=5, input_buffer=[]))\n\n  def testInputBuffer(self):\n    self.assertCorrectOutput(\n        [2, 3, 4],\n        bf.evaluate('>,[>,]<[.<]', input_buffer=[4, 3, 2]))\n\n  def testBadChars(self):\n    self.assertCorrectOutput(\n        [2, 3, 4],\n        bf.evaluate('>,[>,]hello<world[.<]comments',\n                    input_buffer=[4, 3, 2]))\n\n  def testUnmatchedBraces(self):\n    self.assertCorrectOutput(\n        [3, 6, 1],\n        bf.evaluate('+++.]]]]>----.[[[[[>+.',\n                    input_buffer=[],\n                    base=10,\n                    require_correct_syntax=False))\n\n    eval_result = bf.evaluate(\n        '+++.]]]]>----.[[[[[>+.',\n        input_buffer=[],\n        base=10,\n        require_correct_syntax=True)\n    self.assertEqual([], eval_result.output)\n    self.assertFalse(eval_result.success)\n    self.assertEqual(bf.Status.SYNTAX_ERROR,\n                     eval_result.failure_reason)\n\n  def testTimeout(self):\n    er = bf.evaluate('+.[].', base=5, input_buffer=[], timeout=0.1)\n    self.assertEqual(\n        ([1], False, bf.Status.TIMEOUT),\n        (er.output, er.success, er.failure_reason))\n    self.assertTrue(0.07 < er.time < 0.21)\n\n    er = bf.evaluate('+.[-].', base=5, input_buffer=[], timeout=0.1)\n    self.assertEqual(\n        ([1, 0], True, bf.Status.SUCCESS),\n        (er.output, er.success, er.failure_reason))\n    self.assertTrue(er.time < 0.15)\n\n  def testMaxSteps(self):\n    er = bf.evaluate('+.[].', base=5, input_buffer=[], timeout=None,\n                     max_steps=100)\n    self.assertEqual(\n        ([1], False, bf.Status.STEP_LIMIT, 100),\n        (er.output, er.success, er.failure_reason, er.steps))\n\n    er = bf.evaluate('+.[-].', base=5, input_buffer=[], timeout=None,\n                     max_steps=100)\n    self.assertEqual(\n        ([1, 0], True, bf.Status.SUCCESS),\n        (er.output, er.success, er.failure_reason))\n    self.assertTrue(er.steps < 100)\n\n  def testOutputMemory(self):\n    er = bf.evaluate('+>++>+++>++++.', base=256, input_buffer=[],\n                     output_memory=True)\n    self.assertEqual(\n        ([4], True, bf.Status.SUCCESS),\n        (er.output, er.success, er.failure_reason))\n    self.assertEqual([1, 2, 3, 4], er.memory)\n\n  def testProgramTrace(self):\n    es = bf.ExecutionSnapshot\n    er = bf.evaluate(',[.>,].', base=256, input_buffer=[2, 1], debug=True)\n    self.assertEqual(\n        [es(codeptr=0, codechar=',', memptr=0, memval=0, memory=[0],\n            next_input=2, output_buffer=[]),\n         es(codeptr=1, codechar='[', memptr=0, memval=2, memory=[2],\n            next_input=1, output_buffer=[]),\n         es(codeptr=2, codechar='.', memptr=0, memval=2, memory=[2],\n            next_input=1, output_buffer=[]),\n         es(codeptr=3, codechar='>', memptr=0, memval=2, memory=[2],\n            next_input=1, output_buffer=[2]),\n         es(codeptr=4, codechar=',', memptr=1, memval=0, memory=[2, 0],\n            next_input=1, output_buffer=[2]),\n         es(codeptr=5, codechar=']', memptr=1, memval=1, memory=[2, 1],\n            next_input=0, output_buffer=[2]),\n         es(codeptr=2, codechar='.', memptr=1, memval=1, memory=[2, 1],\n            next_input=0, output_buffer=[2]),\n         es(codeptr=3, codechar='>', memptr=1, memval=1, memory=[2, 1],\n            next_input=0, output_buffer=[2, 1]),\n         es(codeptr=4, codechar=',', memptr=2, memval=0, memory=[2, 1, 0],\n            next_input=0, output_buffer=[2, 1]),\n         es(codeptr=5, codechar=']', memptr=2, memval=0, memory=[2, 1, 0],\n            next_input=0, output_buffer=[2, 1]),\n         es(codeptr=6, codechar='.', memptr=2, memval=0, memory=[2, 1, 0],\n            next_input=0, output_buffer=[2, 1]),\n         es(codeptr=7, codechar='', memptr=2, memval=0, memory=[2, 1, 0],\n            next_input=0, output_buffer=[2, 1, 0])],\n        er.program_trace)\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "comments": "   tests common bf        brain coder ", "content": "from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\"\"\"Tests for common.bf.\"\"\"\n\nimport tensorflow as tf\n\nfrom common import bf  # brain coder\n\n\nclass BfTest(tf.test.TestCase):\n\n  def assertCorrectOutput(self, target_output, eval_result):\n    self.assertEqual(target_output, eval_result.output)\n    self.assertTrue(eval_result.success)\n    self.assertEqual(bf.Status.SUCCESS, eval_result.failure_reason)\n\n  def testBasicOps(self):\n    self.assertCorrectOutput(\n        [3, 1, 2],\n        bf.evaluate('+++.--.+.'))\n    self.assertCorrectOutput(\n        [1, 1, 2],\n        bf.evaluate('+.<.>++.'))\n    self.assertCorrectOutput(\n        [0],\n        bf.evaluate('+,.'))\n    self.assertCorrectOutput(\n        [ord(char) for char in 'Hello World!\\n'],\n        bf.evaluate(\n            '>++++++++[-<+++++++++>]<.>>+>-[+]++>++>+++[>[->+++<<+++>]<<]>-----'\n            '.>->+++..+++.>-.<<+[>[+>+]>>]<--------------.>>.+++.------.-------'\n            '-.>+.>+.'))\n\n  def testBase(self):\n    self.assertCorrectOutput(\n        [1, 4],\n        bf.evaluate('+.--.', base=5, input_buffer=[]))\n\n  def testInputBuffer(self):\n    self.assertCorrectOutput(\n        [2, 3, 4],\n        bf.evaluate('>,[>,]<[.<]', input_buffer=[4, 3, 2]))\n\n  def testBadChars(self):\n    self.assertCorrectOutput(\n        [2, 3, 4],\n        bf.evaluate('>,[>,]hello<world[.<]comments',\n                    input_buffer=[4, 3, 2]))\n\n  def testUnmatchedBraces(self):\n    self.assertCorrectOutput(\n        [3, 6, 1],\n        bf.evaluate('+++.]]]]>----.[[[[[>+.',\n                    input_buffer=[],\n                    base=10,\n                    require_correct_syntax=False))\n\n    eval_result = bf.evaluate(\n        '+++.]]]]>----.[[[[[>+.',\n        input_buffer=[],\n        base=10,\n        require_correct_syntax=True)\n    self.assertEqual([], eval_result.output)\n    self.assertFalse(eval_result.success)\n    self.assertEqual(bf.Status.SYNTAX_ERROR,\n                     eval_result.failure_reason)\n\n  def testTimeout(self):\n    er = bf.evaluate('+.[].', base=5, input_buffer=[], timeout=0.1)\n    self.assertEqual(\n        ([1], False, bf.Status.TIMEOUT),\n        (er.output, er.success, er.failure_reason))\n    self.assertTrue(0.07 < er.time < 0.21)\n\n    er = bf.evaluate('+.[-].', base=5, input_buffer=[], timeout=0.1)\n    self.assertEqual(\n        ([1, 0], True, bf.Status.SUCCESS),\n        (er.output, er.success, er.failure_reason))\n    self.assertTrue(er.time < 0.15)\n\n  def testMaxSteps(self):\n    er = bf.evaluate('+.[].', base=5, input_buffer=[], timeout=None,\n                     max_steps=100)\n    self.assertEqual(\n        ([1], False, bf.Status.STEP_LIMIT, 100),\n        (er.output, er.success, er.failure_reason, er.steps))\n\n    er = bf.evaluate('+.[-].', base=5, input_buffer=[], timeout=None,\n                     max_steps=100)\n    self.assertEqual(\n        ([1, 0], True, bf.Status.SUCCESS),\n        (er.output, er.success, er.failure_reason))\n    self.assertTrue(er.steps < 100)\n\n  def testOutputMemory(self):\n    er = bf.evaluate('+>++>+++>++++.', base=256, input_buffer=[],\n                     output_memory=True)\n    self.assertEqual(\n        ([4], True, bf.Status.SUCCESS),\n        (er.output, er.success, er.failure_reason))\n    self.assertEqual([1, 2, 3, 4], er.memory)\n\n  def testProgramTrace(self):\n    es = bf.ExecutionSnapshot\n    er = bf.evaluate(',[.>,].', base=256, input_buffer=[2, 1], debug=True)\n    self.assertEqual(\n        [es(codeptr=0, codechar=',', memptr=0, memval=0, memory=[0],\n            next_input=2, output_buffer=[]),\n         es(codeptr=1, codechar='[', memptr=0, memval=2, memory=[2],\n            next_input=1, output_buffer=[]),\n         es(codeptr=2, codechar='.', memptr=0, memval=2, memory=[2],\n            next_input=1, output_buffer=[]),\n         es(codeptr=3, codechar='>', memptr=0, memval=2, memory=[2],\n            next_input=1, output_buffer=[2]),\n         es(codeptr=4, codechar=',', memptr=1, memval=0, memory=[2, 0],\n            next_input=1, output_buffer=[2]),\n         es(codeptr=5, codechar=']', memptr=1, memval=1, memory=[2, 1],\n            next_input=0, output_buffer=[2]),\n         es(codeptr=2, codechar='.', memptr=1, memval=1, memory=[2, 1],\n            next_input=0, output_buffer=[2]),\n         es(codeptr=3, codechar='>', memptr=1, memval=1, memory=[2, 1],\n            next_input=0, output_buffer=[2, 1]),\n         es(codeptr=4, codechar=',', memptr=2, memval=0, memory=[2, 1, 0],\n            next_input=0, output_buffer=[2, 1]),\n         es(codeptr=5, codechar=']', memptr=2, memval=0, memory=[2, 1, 0],\n            next_input=0, output_buffer=[2, 1]),\n         es(codeptr=6, codechar='.', memptr=2, memval=0, memory=[2, 1, 0],\n            next_input=0, output_buffer=[2, 1]),\n         es(codeptr=7, codechar='', memptr=2, memval=0, memory=[2, 1, 0],\n            next_input=0, output_buffer=[2, 1, 0])],\n        er.program_trace)\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "description": "Models and examples built with TensorFlow", "file_name": "bf_test.py", "id": "3a2362f183b9be5d816e22e3e1173a17", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/research/brain_coder/common/bf_test.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}