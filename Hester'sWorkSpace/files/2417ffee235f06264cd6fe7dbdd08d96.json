{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    parse_duration,\n    str_to_int,\n    urlencode_postdata,\n)\n\n\nclass PandoraTVIE(InfoExtractor):\n    IE_NAME = 'pandora.tv'\n    IE_DESC = '\ud310\ub3c4\ub77cTV'\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'http://jp.channel.pandora.tv/channel/video.ptv?c1=&prgid=53294230&ch_userid=mikakim&ref=main&lot=cate_01_2',\n        'info_dict': {\n            'id': '53294230',\n            'ext': 'flv',\n            'title': '\u982d\u3092\u64ab\u3067\u3066\u304f\u308c\u308b\uff1f',\n            'description': '\u982d\u3092\u64ab\u3067\u3066\u304f\u308c\u308b\uff1f',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 39,\n            'upload_date': '20151218',\n            'uploader': '\u30ab\u30ef\u30a4\u30a4\u52d5\u7269\u307e\u3068\u3081',\n            'uploader_id': 'mikakim',\n            'view_count': int,\n            'like_count': int,\n        }\n    }, {\n        'url': 'http://channel.pandora.tv/channel/video.ptv?ch_userid=gogoucc&prgid=54721744',\n        'info_dict': {\n            'id': '54721744',\n            'ext': 'flv',\n            'title': '[HD] JAPAN COUNTDOWN 170423',\n            'description': '[HD] JAPAN COUNTDOWN 170423',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1704.9,\n            'upload_date': '20170423',\n            'uploader': 'GOGO_UCC',\n            'uploader_id': 'gogoucc',\n            'view_count': int,\n            'like_count': int,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.pandora.tv/view/mikakim/53294230\n        'only_matching': True,\n    }, {\n        'url': 'http://m.pandora.tv/?c=view&ch_userid=mikakim&prgid=54600346',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        user_id = mobj.group('user_id')\n        video_id = mobj.group('id')\n\n        if not user_id or not video_id:\n            qs = compat_urlparse.parse_qs(compat_urlparse.urlparse(url).query)\n            video_id = qs.get('prgid', [None])[0]\n            user_id = qs.get('ch_userid', [None])[0]\n            if any(not f for f in (video_id, user_id,)):\n                raise ExtractorError('Invalid URL', expected=True)\n\n        data = self._download_json(\n            'http://m.pandora.tv/?c=view&m=viewJsonApi&ch_userid=%s&prgid=%s'\n            % (user_id, video_id), video_id)\n\n        info = data['data']['rows']['vod_play_info']['result']\n\n        formats = []\n        for format_id, format_url in info.items():\n            if not format_url:\n                continue\n            height = self._search_regex(\n                r'^v(\\d+)[Uu]rl$', format_id, 'height', default=None)\n            if not height:\n                continue\n\n            play_url = self._download_json(\n                'http://m.pandora.tv/?c=api&m=play_url', video_id,\n                data=urlencode_postdata({\n                    'prgid': video_id,\n                    'runtime': info.get('runtime'),\n                    'vod_url': format_url,\n                }),\n                headers={\n                    'Origin': url,\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                })\n            format_url = play_url.get('url')\n            if not format_url:\n                continue\n\n            formats.append({\n                'format_id': '%sp' % height,\n                'url': format_url,\n                'height': int(height),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': info['subject'],\n            'description': info.get('body'),\n            'thumbnail': info.get('thumbnail') or info.get('poster'),\n            'duration': float_or_none(info.get('runtime'), 1000) or parse_duration(info.get('time')),\n            'upload_date': info['fid'].split('/')[-1][:8] if isinstance(info.get('fid'), compat_str) else None,\n            'uploader': info.get('nickname'),\n            'uploader_id': info.get('upload_userid'),\n            'view_count': str_to_int(info.get('hit')),\n            'like_count': str_to_int(info.get('likecnt')),\n            'formats': formats,\n        }\n", "comments": "(?x)\n                        https?://\n                            (?:\n                                (?:www\\.)?pandora\\.tv/view/(?P<user_id>[^/]+)/(?P<id>\\d+)|  # new format\n                                (?:.+?\\.)?channel\\.pandora\\.tv/channel/video\\.ptv\\?|        # old format\n                                m\\.pandora\\.tv/?\\?                                          # mobile\n                            )\n                    \n \n# coding: utf-8\n# Test metadata only\n#36797454_new',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    parse_duration,\n    str_to_int,\n    urlencode_postdata,\n)\n\n\nclass PandoraTVIE(InfoExtractor):\n    IE_NAME = 'pandora.tv'\n    IE_DESC = '\ud310\ub3c4\ub77cTV'\n    _VALID_URL = r'''(?x)\n                        https?://\n                            (?:\n                                (?:www\\.)?pandora\\.tv/view/(?P<user_id>[^/]+)/(?P<id>\\d+)|  # new format\n                                (?:.+?\\.)?channel\\.pandora\\.tv/channel/video\\.ptv\\?|        # old format\n                                m\\.pandora\\.tv/?\\?                                          # mobile\n                            )\n                    '''\n    _TESTS = [{\n        'url': 'http://jp.channel.pandora.tv/channel/video.ptv?c1=&prgid=53294230&ch_userid=mikakim&ref=main&lot=cate_01_2',\n        'info_dict': {\n            'id': '53294230',\n            'ext': 'flv',\n            'title': '\u982d\u3092\u64ab\u3067\u3066\u304f\u308c\u308b\uff1f',\n            'description': '\u982d\u3092\u64ab\u3067\u3066\u304f\u308c\u308b\uff1f',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 39,\n            'upload_date': '20151218',\n            'uploader': '\u30ab\u30ef\u30a4\u30a4\u52d5\u7269\u307e\u3068\u3081',\n            'uploader_id': 'mikakim',\n            'view_count': int,\n            'like_count': int,\n        }\n    }, {\n        'url': 'http://channel.pandora.tv/channel/video.ptv?ch_userid=gogoucc&prgid=54721744',\n        'info_dict': {\n            'id': '54721744',\n            'ext': 'flv',\n            'title': '[HD] JAPAN COUNTDOWN 170423',\n            'description': '[HD] JAPAN COUNTDOWN 170423',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1704.9,\n            'upload_date': '20170423',\n            'uploader': 'GOGO_UCC',\n            'uploader_id': 'gogoucc',\n            'view_count': int,\n            'like_count': int,\n        },\n        'params': {\n            # Test metadata only\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.pandora.tv/view/mikakim/53294230#36797454_new',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.pandora.tv/?c=view&ch_userid=mikakim&prgid=54600346',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        user_id = mobj.group('user_id')\n        video_id = mobj.group('id')\n\n        if not user_id or not video_id:\n            qs = compat_urlparse.parse_qs(compat_urlparse.urlparse(url).query)\n            video_id = qs.get('prgid', [None])[0]\n            user_id = qs.get('ch_userid', [None])[0]\n            if any(not f for f in (video_id, user_id,)):\n                raise ExtractorError('Invalid URL', expected=True)\n\n        data = self._download_json(\n            'http://m.pandora.tv/?c=view&m=viewJsonApi&ch_userid=%s&prgid=%s'\n            % (user_id, video_id), video_id)\n\n        info = data['data']['rows']['vod_play_info']['result']\n\n        formats = []\n        for format_id, format_url in info.items():\n            if not format_url:\n                continue\n            height = self._search_regex(\n                r'^v(\\d+)[Uu]rl$', format_id, 'height', default=None)\n            if not height:\n                continue\n\n            play_url = self._download_json(\n                'http://m.pandora.tv/?c=api&m=play_url', video_id,\n                data=urlencode_postdata({\n                    'prgid': video_id,\n                    'runtime': info.get('runtime'),\n                    'vod_url': format_url,\n                }),\n                headers={\n                    'Origin': url,\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                })\n            format_url = play_url.get('url')\n            if not format_url:\n                continue\n\n            formats.append({\n                'format_id': '%sp' % height,\n                'url': format_url,\n                'height': int(height),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': info['subject'],\n            'description': info.get('body'),\n            'thumbnail': info.get('thumbnail') or info.get('poster'),\n            'duration': float_or_none(info.get('runtime'), 1000) or parse_duration(info.get('time')),\n            'upload_date': info['fid'].split('/')[-1][:8] if isinstance(info.get('fid'), compat_str) else None,\n            'uploader': info.get('nickname'),\n            'uploader_id': info.get('upload_userid'),\n            'view_count': str_to_int(info.get('hit')),\n            'like_count': str_to_int(info.get('likecnt')),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "pandoratv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/pandoratv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}