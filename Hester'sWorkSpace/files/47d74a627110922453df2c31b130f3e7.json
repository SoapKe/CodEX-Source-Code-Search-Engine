{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: bigpanda\nauthor: \"Hagai Kariti (@hkariti)\"\nshort_description: Notify BigPanda about deployments\nversion_added: \"1.8\"\ndescription:\n   - Notify BigPanda when deployments start and end (successfully or not). Returns a deployment object containing all the parameters for future module calls.\noptions:\n  component:\n    description:\n      - \"The name of the component being deployed. Ex: billing\"\n    required: true\n    aliases: ['name']\n  version:\n    description:\n      - The deployment version.\n    required: true\n  token:\n    description:\n      - API token.\n    required: true\n  state:\n    description:\n      - State of the deployment.\n    required: true\n    choices: ['started', 'finished', 'failed']\n  hosts:\n    description:\n      - Name of affected host name. Can be a list.\n    required: false\n    default: machine's hostname\n    aliases: ['host']\n  env:\n    description:\n      - The environment name, typically 'production', 'staging', etc.\n    required: false\n  owner:\n    description:\n      - The person responsible for the deployment.\n    required: false\n  description:\n    description:\n      - Free text description of the deployment.\n    required: false\n  url:\n    description:\n      - Base URL of the API server.\n    required: False\n    default: https://api.bigpanda.io\n  validate_certs:\n    description:\n      - If C(no), SSL certificates for the target url will not be validated. This should only be used\n        on personally controlled sites using self-signed certificates.\n    required: false\n    default: 'yes'\n    choices: ['yes', 'no']\n\n\nrequirements: [ ]\n'''\n\nEXAMPLES = '''\n- bigpanda:\n    component: myapp\n    version: '1.3'\n    token: '{{ bigpanda_token }}'\n    state: started\n\n- bigpanda:\n    component: myapp\n    version: '1.3'\n    token: '{{ bigpanda_token }}'\n    state: finished\n\n\n- bigpanda:\n    component: myapp\n    version: '1.3'\n    token: '{{ bigpanda_token }}'\n    hosts: '{{ ansible_hostname }}'\n    state: started\n  delegate_to: localhost\n  register: deployment\n\n- bigpanda:\n    component: '{{ deployment.component }}'\n    version: '{{ deployment.version }}'\n    token: '{{ deployment.token }}'\n    state: finished\n  delegate_to: localhost\n'''\n\n\n\n\nimport json\nimport socket\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\nfrom ansible.module_utils.urls import fetch_url\n\n\ndef main():\n\n    module = AnsibleModule(\n        argument_spec=dict(\n            component=dict(required=True, aliases=['name']),\n            version=dict(required=True),\n            token=dict(required=True, no_log=True),\n            state=dict(required=True, choices=['started', 'finished', 'failed']),\n            hosts=dict(required=False, default=[socket.gethostname()], aliases=['host']),\n            env=dict(required=False),\n            owner=dict(required=False),\n            description=dict(required=False),\n            message=dict(required=False),\n            source_system=dict(required=False, default='ansible'),\n            validate_certs=dict(default='yes', type='bool'),\n            url=dict(required=False, default='https://api.bigpanda.io'),\n        ),\n        supports_check_mode=True,\n    )\n\n    token = module.params['token']\n    state = module.params['state']\n    url = module.params['url']\n\n     Build the common request body\n    body = dict()\n    for k in ('component', 'version', 'hosts'):\n        v = module.params[k]\n        if v is not None:\n            body[k] = v\n\n    if not isinstance(body['hosts'], list):\n        body['hosts'] = [body['hosts']]\n\n     Insert state-specific attributes to body\n    if state == 'started':\n        for k in ('source_system', 'env', 'owner', 'description'):\n            v = module.params[k]\n            if v is not None:\n                body[k] = v\n\n        request_url = url + '/data/events/deployments/start'\n    else:\n        message = module.params['message']\n        if message is not None:\n            body['errorMessage'] = message\n\n        if state == 'finished':\n            body['status'] = 'success'\n        else:\n            body['status'] = 'failure'\n\n        request_url = url + '/data/events/deployments/end'\n\n     Build the deployment object we return\n    deployment = dict(token=token, url=url)\n    deployment.update(body)\n    if 'errorMessage' in deployment:\n        message = deployment.pop('errorMessage')\n        deployment['message'] = message\n\n     If we're in check mode, just exit pretending like we succeeded\n    if module.check_mode:\n        module.exit_json(changed=True, **deployment)\n\n     Send the data to bigpanda\n    data = json.dumps(body)\n    headers = {'Authorization': 'Bearer %s' % token, 'Content-Type': 'application/json'}\n    try:\n        response, info = fetch_url(module, request_url, data=data, headers=headers)\n        if info['status'] == 200:\n            module.exit_json(changed=True, **deployment)\n        else:\n            module.fail_json(msg=json.dumps(info))\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  bigpanda author   hagai kariti ( hkariti)  short description  notify bigpanda deployments version added   1 8  description       notify bigpanda deployments start end (successfully not)  returns deployment object containing parameters future module calls  options    component      description           the name component deployed  ex  billing      required  true     aliases    name     version      description          the deployment version      required  true   token      description          api token      required  true   state      description          state deployment      required  true     choices    started    finished    failed     hosts      description          name affected host name  can list      required  false     default  machine hostname     aliases    host     env      description          the environment name  typically  production    staging   etc      required  false   owner      description          the person responsible deployment      required  false   description      description          free text description deployment      required  false   url      description          base url api server      required  false     default  https   api bigpanda io   validate certs      description          if c(no)  ssl certificates target url validated  this used         personally controlled sites using self signed certificates      required  false     default   yes      choices    yes         informational  requirements nodes requirements           examples         bigpanda      component  myapp     version   1 3      token      bigpanda token         state  started    bigpanda      component  myapp     version   1 3      token      bigpanda token         state  finished    if outside servers reachable machine  use delegate override hosts    bigpanda      component  myapp     version   1 3      token      bigpanda token         hosts      ansible hostname         state  started   delegate  localhost   register  deployment    bigpanda      component      deployment component         version      deployment version         token      deployment token         state  finished   delegate  localhost         usr bin python        coding  utf 8        copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    informational  requirements nodes    if outside servers reachable machine  use delegate override hosts                                                    module execution        build common request body    insert state specific attributes body    build deployment object return    if check mode  exit pretending like succeeded    send data bigpanda ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: bigpanda\nauthor: \"Hagai Kariti (@hkariti)\"\nshort_description: Notify BigPanda about deployments\nversion_added: \"1.8\"\ndescription:\n   - Notify BigPanda when deployments start and end (successfully or not). Returns a deployment object containing all the parameters for future module calls.\noptions:\n  component:\n    description:\n      - \"The name of the component being deployed. Ex: billing\"\n    required: true\n    aliases: ['name']\n  version:\n    description:\n      - The deployment version.\n    required: true\n  token:\n    description:\n      - API token.\n    required: true\n  state:\n    description:\n      - State of the deployment.\n    required: true\n    choices: ['started', 'finished', 'failed']\n  hosts:\n    description:\n      - Name of affected host name. Can be a list.\n    required: false\n    default: machine's hostname\n    aliases: ['host']\n  env:\n    description:\n      - The environment name, typically 'production', 'staging', etc.\n    required: false\n  owner:\n    description:\n      - The person responsible for the deployment.\n    required: false\n  description:\n    description:\n      - Free text description of the deployment.\n    required: false\n  url:\n    description:\n      - Base URL of the API server.\n    required: False\n    default: https://api.bigpanda.io\n  validate_certs:\n    description:\n      - If C(no), SSL certificates for the target url will not be validated. This should only be used\n        on personally controlled sites using self-signed certificates.\n    required: false\n    default: 'yes'\n    choices: ['yes', 'no']\n\n# informational: requirements for nodes\nrequirements: [ ]\n'''\n\nEXAMPLES = '''\n- bigpanda:\n    component: myapp\n    version: '1.3'\n    token: '{{ bigpanda_token }}'\n    state: started\n\n- bigpanda:\n    component: myapp\n    version: '1.3'\n    token: '{{ bigpanda_token }}'\n    state: finished\n\n# If outside servers aren't reachable from your machine, use delegate_to and override hosts:\n- bigpanda:\n    component: myapp\n    version: '1.3'\n    token: '{{ bigpanda_token }}'\n    hosts: '{{ ansible_hostname }}'\n    state: started\n  delegate_to: localhost\n  register: deployment\n\n- bigpanda:\n    component: '{{ deployment.component }}'\n    version: '{{ deployment.version }}'\n    token: '{{ deployment.token }}'\n    state: finished\n  delegate_to: localhost\n'''\n\n# ===========================================\n# Module execution.\n#\nimport json\nimport socket\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\nfrom ansible.module_utils.urls import fetch_url\n\n\ndef main():\n\n    module = AnsibleModule(\n        argument_spec=dict(\n            component=dict(required=True, aliases=['name']),\n            version=dict(required=True),\n            token=dict(required=True, no_log=True),\n            state=dict(required=True, choices=['started', 'finished', 'failed']),\n            hosts=dict(required=False, default=[socket.gethostname()], aliases=['host']),\n            env=dict(required=False),\n            owner=dict(required=False),\n            description=dict(required=False),\n            message=dict(required=False),\n            source_system=dict(required=False, default='ansible'),\n            validate_certs=dict(default='yes', type='bool'),\n            url=dict(required=False, default='https://api.bigpanda.io'),\n        ),\n        supports_check_mode=True,\n    )\n\n    token = module.params['token']\n    state = module.params['state']\n    url = module.params['url']\n\n    # Build the common request body\n    body = dict()\n    for k in ('component', 'version', 'hosts'):\n        v = module.params[k]\n        if v is not None:\n            body[k] = v\n\n    if not isinstance(body['hosts'], list):\n        body['hosts'] = [body['hosts']]\n\n    # Insert state-specific attributes to body\n    if state == 'started':\n        for k in ('source_system', 'env', 'owner', 'description'):\n            v = module.params[k]\n            if v is not None:\n                body[k] = v\n\n        request_url = url + '/data/events/deployments/start'\n    else:\n        message = module.params['message']\n        if message is not None:\n            body['errorMessage'] = message\n\n        if state == 'finished':\n            body['status'] = 'success'\n        else:\n            body['status'] = 'failure'\n\n        request_url = url + '/data/events/deployments/end'\n\n    # Build the deployment object we return\n    deployment = dict(token=token, url=url)\n    deployment.update(body)\n    if 'errorMessage' in deployment:\n        message = deployment.pop('errorMessage')\n        deployment['message'] = message\n\n    # If we're in check mode, just exit pretending like we succeeded\n    if module.check_mode:\n        module.exit_json(changed=True, **deployment)\n\n    # Send the data to bigpanda\n    data = json.dumps(body)\n    headers = {'Authorization': 'Bearer %s' % token, 'Content-Type': 'application/json'}\n    try:\n        response, info = fetch_url(module, request_url, data=data, headers=headers)\n        if info['status'] == 200:\n            module.exit_json(changed=True, **deployment)\n        else:\n            module.fail_json(msg=json.dumps(info))\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "bigpanda.py", "id": "47d74a627110922453df2c31b130f3e7", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/monitoring/bigpanda.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}