{"author": "sympy", "code": "\nfrom __future__ import print_function, division\nfrom sympy.core.compatibility import range\n\nfrom random import random\nfrom sympy import factor, I, Integer, pi, simplify, sin, sqrt, Symbol, sympify\nfrom sympy.abc import x, y, z\nfrom timeit import default_timer as clock\n\n\ndef bench_R1():\n    \"real(f(f(f(f(f(f(f(f(f(f(i/2)))))))))))\"\n    def f(z):\n        return sqrt(Integer(1)/3)*z**2 + I/3\n    e = f(f(f(f(f(f(f(f(f(f(I/2)))))))))).as_real_imag()[0]\n\n\ndef bench_R2():\n    \"Hermite polynomial hermite(15, y)\"\n    def hermite(n, y):\n        if n == 1:\n            return 2*y\n        if n == 0:\n            return 1\n        return (2*y*hermite(n - 1, y) - 2*(n - 1)*hermite(n - 2, y)).expand()\n\n    a = hermite(15, y)\n\n\ndef bench_R3():\n    \"a = [bool(f==f) for _ in range(10)]\"\n    f = x + y + z\n    a = [bool(f == f) for _ in range(10)]\n\n\ndef bench_R4():\n    \n    pass\n\n\ndef bench_R5():\n    \"blowup(L, 8); L=uniq(L)\"\n    def blowup(L, n):\n        for i in range(n):\n            L.append( (L[i] + L[i + 1]) * L[i + 2] )\n\n    def uniq(x):\n        v = set(x)\n        return v\n    L = [x, y, z]\n    blowup(L, 8)\n    L = uniq(L)\n\n\ndef bench_R6():\n    \"sum(simplify((x+sin(i))/x+(x-sin(i))/x) for i in range(100))\"\n    s = sum(simplify((x + sin(i))/x + (x - sin(i))/x) for i in range(100))\n\n\ndef bench_R7():\n    \"[f.subs(x, random()) for _ in range(10**4)]\"\n    f = x**24 + 34*x**12 + 45*x**3 + 9*x**18 + 34*x**10 + 32*x**21\n    a = [f.subs(x, random()) for _ in range(10**4)]\n\n\ndef bench_R8():\n    \"right(x^2,0,5,10^4)\"\n    def right(f, a, b, n):\n        a = sympify(a)\n        b = sympify(b)\n        n = sympify(n)\n        x = f.atoms(Symbol).pop()\n        Deltax = (b - a)/n\n        c = a\n        est = 0\n        for i in range(n):\n            c += Deltax\n            est += f.subs(x, c)\n        return est*Deltax\n\n    a = right(x**2, 0, 5, 10**4)\n\n\ndef _bench_R9():\n    \"factor(x^20 - pi^5*y^20)\"\n    factor(x**20 - pi**5*y**20)\n\n\ndef bench_R10():\n    \"v = [-pi,-pi+1/10..,pi]\"\n    def srange(min, max, step):\n        v = [min]\n        while (max - v[-1]).evalf() > 0:\n            v.append(v[-1] + step)\n        return v[:-1]\n    v = srange(-pi, pi, sympify(1)/10)\n\n\ndef bench_R11():\n    \"a = [random() + random()*I for w in [0..1000]]\"\n    a = [random() + random()*I for w in range(1000)]\n\n\ndef bench_S1():\n    \"e=(x+y+z+1)**7;f=e*(e+1);f.expand()\"\n    e = (x + y + z + 1)**7\n    f = e*(e + 1)\n    f = f.expand()\n\n\nif __name__ == '__main__':\n    benchmarks = [\n        bench_R1,\n        bench_R2,\n        bench_R3,\n        bench_R5,\n        bench_R6,\n        bench_R7,\n        bench_R8,\n        \n        bench_R10,\n        bench_R11,\n        \n    ]\n\n    report = []\n    for b in benchmarks:\n        t = clock()\n        b()\n        t = clock() - t\n        print(\"%s%65s: %f\" % (b.__name__, b.__doc__, t))\n", "comments": "   usr bin env python    tuples    bench r9    bench s1  ", "content": "#!/usr/bin/env python\nfrom __future__ import print_function, division\nfrom sympy.core.compatibility import range\n\nfrom random import random\nfrom sympy import factor, I, Integer, pi, simplify, sin, sqrt, Symbol, sympify\nfrom sympy.abc import x, y, z\nfrom timeit import default_timer as clock\n\n\ndef bench_R1():\n    \"real(f(f(f(f(f(f(f(f(f(f(i/2)))))))))))\"\n    def f(z):\n        return sqrt(Integer(1)/3)*z**2 + I/3\n    e = f(f(f(f(f(f(f(f(f(f(I/2)))))))))).as_real_imag()[0]\n\n\ndef bench_R2():\n    \"Hermite polynomial hermite(15, y)\"\n    def hermite(n, y):\n        if n == 1:\n            return 2*y\n        if n == 0:\n            return 1\n        return (2*y*hermite(n - 1, y) - 2*(n - 1)*hermite(n - 2, y)).expand()\n\n    a = hermite(15, y)\n\n\ndef bench_R3():\n    \"a = [bool(f==f) for _ in range(10)]\"\n    f = x + y + z\n    a = [bool(f == f) for _ in range(10)]\n\n\ndef bench_R4():\n    # we don't have Tuples\n    pass\n\n\ndef bench_R5():\n    \"blowup(L, 8); L=uniq(L)\"\n    def blowup(L, n):\n        for i in range(n):\n            L.append( (L[i] + L[i + 1]) * L[i + 2] )\n\n    def uniq(x):\n        v = set(x)\n        return v\n    L = [x, y, z]\n    blowup(L, 8)\n    L = uniq(L)\n\n\ndef bench_R6():\n    \"sum(simplify((x+sin(i))/x+(x-sin(i))/x) for i in range(100))\"\n    s = sum(simplify((x + sin(i))/x + (x - sin(i))/x) for i in range(100))\n\n\ndef bench_R7():\n    \"[f.subs(x, random()) for _ in range(10**4)]\"\n    f = x**24 + 34*x**12 + 45*x**3 + 9*x**18 + 34*x**10 + 32*x**21\n    a = [f.subs(x, random()) for _ in range(10**4)]\n\n\ndef bench_R8():\n    \"right(x^2,0,5,10^4)\"\n    def right(f, a, b, n):\n        a = sympify(a)\n        b = sympify(b)\n        n = sympify(n)\n        x = f.atoms(Symbol).pop()\n        Deltax = (b - a)/n\n        c = a\n        est = 0\n        for i in range(n):\n            c += Deltax\n            est += f.subs(x, c)\n        return est*Deltax\n\n    a = right(x**2, 0, 5, 10**4)\n\n\ndef _bench_R9():\n    \"factor(x^20 - pi^5*y^20)\"\n    factor(x**20 - pi**5*y**20)\n\n\ndef bench_R10():\n    \"v = [-pi,-pi+1/10..,pi]\"\n    def srange(min, max, step):\n        v = [min]\n        while (max - v[-1]).evalf() > 0:\n            v.append(v[-1] + step)\n        return v[:-1]\n    v = srange(-pi, pi, sympify(1)/10)\n\n\ndef bench_R11():\n    \"a = [random() + random()*I for w in [0..1000]]\"\n    a = [random() + random()*I for w in range(1000)]\n\n\ndef bench_S1():\n    \"e=(x+y+z+1)**7;f=e*(e+1);f.expand()\"\n    e = (x + y + z + 1)**7\n    f = e*(e + 1)\n    f = f.expand()\n\n\nif __name__ == '__main__':\n    benchmarks = [\n        bench_R1,\n        bench_R2,\n        bench_R3,\n        bench_R5,\n        bench_R6,\n        bench_R7,\n        bench_R8,\n        #_bench_R9,\n        bench_R10,\n        bench_R11,\n        #bench_S1,\n    ]\n\n    report = []\n    for b in benchmarks:\n        t = clock()\n        b()\n        t = clock() - t\n        print(\"%s%65s: %f\" % (b.__name__, b.__doc__, t))\n", "description": "A computer algebra system written in pure Python", "file_name": "bench_symbench.py", "id": "4b295d84b16a70c43d31de22db70d423", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/benchmarks/bench_symbench.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}