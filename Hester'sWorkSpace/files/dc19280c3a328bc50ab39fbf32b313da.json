{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport random\nimport re\nimport time\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n    strip_jsonp,\n    unescapeHTML,\n)\n\n\nclass QQMusicIE(InfoExtractor):\n    IE_NAME = 'qqmusic'\n    IE_DESC = 'QQ\u97f3\u4e50'\n    _VALID_URL = r'https?://y\\.qq\\.com/n/yqq/song/(?P<id>[0-9A-Za-z]+)\\.html'\n    _TESTS = [{\n        'url': 'https://y.qq.com/n/yqq/song/004295Et37taLD.html',\n        'md5': '5f1e6cea39e182857da7ffc5ef5e6bb8',\n        'info_dict': {\n            'id': '004295Et37taLD',\n            'ext': 'mp3',\n            'title': '\u53ef\u60dc\u6ca1\u5982\u679c',\n            'release_date': '20141227',\n            'creator': '\u6797\u4fca\u6770',\n            'description': 'md5:d85afb3051952ecc50a1ee8a286d1eac',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }, {\n        'note': 'There is no mp3-320 version of this song.',\n        'url': 'https://y.qq.com/n/yqq/song/004MsGEo3DdNxV.html',\n        'md5': 'fa3926f0c585cda0af8fa4f796482e3e',\n        'info_dict': {\n            'id': '004MsGEo3DdNxV',\n            'ext': 'mp3',\n            'title': '\u5982\u679c',\n            'release_date': '20050626',\n            'creator': '\u674e\u5b63\u7f8e',\n            'description': 'md5:46857d5ed62bc4ba84607a805dccf437',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }, {\n        'note': 'lyrics not in .lrc format',\n        'url': 'https://y.qq.com/n/yqq/song/001JyApY11tIp6.html',\n        'info_dict': {\n            'id': '001JyApY11tIp6',\n            'ext': 'mp3',\n            'title': 'Shadows Over Transylvania',\n            'release_date': '19970225',\n            'creator': 'Dark Funeral',\n            'description': 'md5:c9b20210587cbcd6836a1c597bab4525',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    _FORMATS = {\n        'mp3-320': {'prefix': 'M800', 'ext': 'mp3', 'preference': 40, 'abr': 320},\n        'mp3-128': {'prefix': 'M500', 'ext': 'mp3', 'preference': 30, 'abr': 128},\n        'm4a': {'prefix': 'C200', 'ext': 'm4a', 'preference': 10}\n    }\n\n    \n    \n    @staticmethod\n    def m_r_get_ruin():\n        curMs = int(time.time() * 1000) % 1000\n        return int(round(random.random() * 2147483647) * curMs % 1E10)\n\n    def _real_extract(self, url):\n        mid = self._match_id(url)\n\n        detail_info_page = self._download_webpage(\n            'http://s.plcloud.music.qq.com/fcgi-bin/fcg_yqq_song_detail_info.fcg?songmid=%s&play=0' % mid,\n            mid, note='Download song detail info',\n            errnote='Unable to get song detail info', encoding='gbk')\n\n        song_name = self._html_search_regex(\n            r\"songname:\\s*'([^']+)'\", detail_info_page, 'song name')\n\n        publish_time = self._html_search_regex(\n            r'\u53d1\u884c\u65f6\u95f4\uff1a(\\d{4}-\\d{2}-\\d{2})', detail_info_page,\n            'publish time', default=None)\n        if publish_time:\n            publish_time = publish_time.replace('-', '')\n\n        singer = self._html_search_regex(\n            r\"singer:\\s*'([^']+)\", detail_info_page, 'singer', default=None)\n\n        lrc_content = self._html_search_regex(\n            r'<div class=\"content\" id=\"lrc_content\"[^<>]*>([^<>]+)</div>',\n            detail_info_page, 'LRC lyrics', default=None)\n        if lrc_content:\n            lrc_content = lrc_content.replace('\\\\n', '\\n')\n\n        thumbnail_url = None\n        albummid = self._search_regex(\n            [r'albummid:\\'([0-9a-zA-Z]+)\\'', r'\"albummid\":\"([0-9a-zA-Z]+)\"'],\n            detail_info_page, 'album mid', default=None)\n        if albummid:\n            thumbnail_url = 'http://i.gtimg.cn/music/photo/mid_album_500/%s/%s/%s.jpg' \\\n                            % (albummid[-2:-1], albummid[-1], albummid)\n\n        guid = self.m_r_get_ruin()\n\n        vkey = self._download_json(\n            'http://base.music.qq.com/fcgi-bin/fcg_musicexpress.fcg?json=3&guid=%s' % guid,\n            mid, note='Retrieve vkey', errnote='Unable to get vkey',\n            transform_source=strip_jsonp)['key']\n\n        formats = []\n        for format_id, details in self._FORMATS.items():\n            formats.append({\n                'url': 'http://cc.stream.qqmusic.qq.com/%s%s.%s?vkey=%s&guid=%s&fromtag=0'\n                       % (details['prefix'], mid, details['ext'], vkey, guid),\n                'format': format_id,\n                'format_id': format_id,\n                'preference': details['preference'],\n                'abr': details.get('abr'),\n            })\n        self._check_formats(formats, mid)\n        self._sort_formats(formats)\n\n        actual_lrc_lyrics = ''.join(\n            line + '\\n' for line in re.findall(\n                r'(?m)^(\\[[0-9]{2}:[0-9]{2}(?:\\.[0-9]{2,})?\\][^\\n]*|\\[[^\\]]*\\])', lrc_content))\n\n        info_dict = {\n            'id': mid,\n            'formats': formats,\n            'title': song_name,\n            'release_date': publish_time,\n            'creator': singer,\n            'description': lrc_content,\n            'thumbnail': thumbnail_url\n        }\n        if actual_lrc_lyrics:\n            info_dict['subtitles'] = {\n                'origin': [{\n                    'ext': 'lrc',\n                    'data': actual_lrc_lyrics,\n                }]\n            }\n        return info_dict\n\n\nclass QQPlaylistBaseIE(InfoExtractor):\n    @staticmethod\n    def qq_static_url(category, mid):\n        return 'http://y.qq.com/y/static/%s/%s/%s/%s.html' % (category, mid[-2], mid[-1], mid)\n\n    def get_singer_all_songs(self, singmid, num):\n        return self._download_webpage(\n            r'https://c.y.qq.com/v8/fcg-bin/fcg_v8_singer_track_cp.fcg', singmid,\n            query={\n                'format': 'json',\n                'inCharset': 'utf8',\n                'outCharset': 'utf-8',\n                'platform': 'yqq',\n                'needNewCode': 0,\n                'singermid': singmid,\n                'order': 'listen',\n                'begin': 0,\n                'num': num,\n                'songstatus': 1,\n            })\n\n    def get_entries_from_page(self, singmid):\n        entries = []\n\n        default_num = 1\n        json_text = self.get_singer_all_songs(singmid, default_num)\n        json_obj_all_songs = self._parse_json(json_text, singmid)\n\n        if json_obj_all_songs['code'] == 0:\n            total = json_obj_all_songs['data']['total']\n            json_text = self.get_singer_all_songs(singmid, total)\n            json_obj_all_songs = self._parse_json(json_text, singmid)\n\n        for item in json_obj_all_songs['data']['list']:\n            if item['musicData'].get('songmid') is not None:\n                songmid = item['musicData']['songmid']\n                entries.append(self.url_result(\n                    r'https://y.qq.com/n/yqq/song/%s.html' % songmid, 'QQMusic', songmid))\n\n        return entries\n\n\nclass QQMusicSingerIE(QQPlaylistBaseIE):\n    IE_NAME = 'qqmusic:singer'\n    IE_DESC = 'QQ\u97f3\u4e50 - \u6b4c\u624b'\n    _VALID_URL = r'https?://y\\.qq\\.com/n/yqq/singer/(?P<id>[0-9A-Za-z]+)\\.html'\n    _TEST = {\n        'url': 'https://y.qq.com/n/yqq/singer/001BLpXF2DyJe2.html',\n        'info_dict': {\n            'id': '001BLpXF2DyJe2',\n            'title': '\u6797\u4fca\u6770',\n            'description': 'md5:870ec08f7d8547c29c93010899103751',\n        },\n        'playlist_mincount': 12,\n    }\n\n    def _real_extract(self, url):\n        mid = self._match_id(url)\n\n        entries = self.get_entries_from_page(mid)\n        singer_page = self._download_webpage(url, mid, 'Download singer page')\n        singer_name = self._html_search_regex(\n            r\"singername\\s*:\\s*'(.*?)'\", singer_page, 'singer name', default=None)\n        singer_desc = None\n\n        if mid:\n            singer_desc_page = self._download_xml(\n                'http://s.plcloud.music.qq.com/fcgi-bin/fcg_get_singer_desc.fcg', mid,\n                'Donwload singer description XML',\n                query={'utf8': 1, 'outCharset': 'utf-8', 'format': 'xml', 'singermid': mid},\n                headers={'Referer': 'https://y.qq.com/n/yqq/singer/'})\n\n            singer_desc = singer_desc_page.find('./data/info/desc').text\n\n        return self.playlist_result(entries, mid, singer_name, singer_desc)\n\n\nclass QQMusicAlbumIE(QQPlaylistBaseIE):\n    IE_NAME = 'qqmusic:album'\n    IE_DESC = 'QQ\u97f3\u4e50 - \u4e13\u8f91'\n    _VALID_URL = r'https?://y\\.qq\\.com/n/yqq/album/(?P<id>[0-9A-Za-z]+)\\.html'\n\n    _TESTS = [{\n        'url': 'https://y.qq.com/n/yqq/album/000gXCTb2AhRR1.html',\n        'info_dict': {\n            'id': '000gXCTb2AhRR1',\n            'title': '\u6211\u4eec\u90fd\u662f\u8fd9\u6837\u957f\u5927\u7684',\n            'description': 'md5:179c5dce203a5931970d306aa9607ea6',\n        },\n        'playlist_count': 4,\n    }, {\n        'url': 'https://y.qq.com/n/yqq/album/002Y5a3b3AlCu3.html',\n        'info_dict': {\n            'id': '002Y5a3b3AlCu3',\n            'title': '\uadf8\ub9ac\uace0...',\n            'description': 'md5:a48823755615508a95080e81b51ba729',\n        },\n        'playlist_count': 8,\n    }]\n\n    def _real_extract(self, url):\n        mid = self._match_id(url)\n\n        album = self._download_json(\n            'http://i.y.qq.com/v8/fcg-bin/fcg_v8_album_info_cp.fcg?albummid=%s&format=json' % mid,\n            mid, 'Download album page')['data']\n\n        entries = [\n            self.url_result(\n                'https://y.qq.com/n/yqq/song/' + song['songmid'] + '.html', 'QQMusic', song['songmid']\n            ) for song in album['list']\n        ]\n        album_name = album.get('name')\n        album_detail = album.get('desc')\n        if album_detail is not None:\n            album_detail = album_detail.strip()\n\n        return self.playlist_result(entries, mid, album_name, album_detail)\n\n\nclass QQMusicToplistIE(QQPlaylistBaseIE):\n    IE_NAME = 'qqmusic:toplist'\n    IE_DESC = 'QQ\u97f3\u4e50 - \u6392\u884c\u699c'\n    _VALID_URL = r'https?://y\\.qq\\.com/n/yqq/toplist/(?P<id>[0-9]+)\\.html'\n\n    _TESTS = [{\n        'url': 'https://y.qq.com/n/yqq/toplist/123.html',\n        'info_dict': {\n            'id': '123',\n            'title': '\u7f8e\u56fdiTunes\u699c',\n            'description': 'md5:89db2335fdbb10678dee2d43fe9aba08',\n        },\n        'playlist_count': 100,\n    }, {\n        'url': 'https://y.qq.com/n/yqq/toplist/3.html',\n        'info_dict': {\n            'id': '3',\n            'title': '\u5dc5\u5cf0\u699c\u00b7\u6b27\u7f8e',\n            'description': 'md5:5a600d42c01696b26b71f8c4d43407da',\n        },\n        'playlist_count': 100,\n    }, {\n        'url': 'https://y.qq.com/n/yqq/toplist/106.html',\n        'info_dict': {\n            'id': '106',\n            'title': '\u97e9\u56fdMnet\u699c',\n            'description': 'md5:cb84b325215e1d21708c615cac82a6e7',\n        },\n        'playlist_count': 50,\n    }]\n\n    def _real_extract(self, url):\n        list_id = self._match_id(url)\n\n        toplist_json = self._download_json(\n            'http://i.y.qq.com/v8/fcg-bin/fcg_v8_toplist_cp.fcg', list_id,\n            note='Download toplist page',\n            query={'type': 'toplist', 'topid': list_id, 'format': 'json'})\n\n        entries = [self.url_result(\n            'https://y.qq.com/n/yqq/song/' + song['data']['songmid'] + '.html', 'QQMusic',\n            song['data']['songmid'])\n            for song in toplist_json['songlist']]\n\n        topinfo = toplist_json.get('topinfo', {})\n        list_name = topinfo.get('ListName')\n        list_description = topinfo.get('info')\n        return self.playlist_result(entries, list_id, list_name, list_description)\n\n\nclass QQMusicPlaylistIE(QQPlaylistBaseIE):\n    IE_NAME = 'qqmusic:playlist'\n    IE_DESC = 'QQ\u97f3\u4e50 - \u6b4c\u5355'\n    _VALID_URL = r'https?://y\\.qq\\.com/n/yqq/playlist/(?P<id>[0-9]+)\\.html'\n\n    _TESTS = [{\n        'url': 'http://y.qq.com/n/yqq/playlist/3462654915.html',\n        'info_dict': {\n            'id': '3462654915',\n            'title': '\u97e9\u56fd5\u6708\u65b0\u6b4c\u7cbe\u9009\u4e0b\u65ec',\n            'description': 'md5:d2c9d758a96b9888cf4fe82f603121d4',\n        },\n        'playlist_count': 40,\n        'skip': 'playlist gone',\n    }, {\n        'url': 'https://y.qq.com/n/yqq/playlist/1374105607.html',\n        'info_dict': {\n            'id': '1374105607',\n            'title': '\u6613\u5165\u4eba\u5fc3\u7684\u534e\u8bed\u6c11\u8c23',\n            'description': '\u6c11\u8c23\u7684\u6b4c\u66f2\u6613\u4e8e\u4f20\u5531\u3001\u3001\u6b4c\u8bcd\u6717\u6717\u4f24\u53e3\u3001\u65cb\u5f8b\u7b80\u5355\u6e29\u99a8\u3002\u5c5e\u4e8e\u90a3\u79cd\u624d\u5165\u8033\u5b54\u3002\u5374\u4e0a\u5fc3\u5934\u7684\u611f\u89c9\u3002\u6ca1\u6709\u592a\u591a\u7684\u590d\u6742\u60c5\u7eea\u3002\u7b80\u5355\u800c\u76f4\u63a5\u5730\u8868\u8fbe\u4e50\u8005\u7684\u60c5\u7eea\uff0c\u5c31\u662f\u8fd9\u6837\u7684\u7b80\u5355\u624d\u6613\u5165\u4eba\u5fc3\u3002',\n        },\n        'playlist_count': 20,\n    }]\n\n    def _real_extract(self, url):\n        list_id = self._match_id(url)\n\n        list_json = self._download_json(\n            'http://i.y.qq.com/qzone-music/fcg-bin/fcg_ucc_getcdinfo_byids_cp.fcg',\n            list_id, 'Download list page',\n            query={'type': 1, 'json': 1, 'utf8': 1, 'onlysong': 0, 'disstid': list_id},\n            transform_source=strip_jsonp)\n        if not len(list_json.get('cdlist', [])):\n            if list_json.get('code'):\n                raise ExtractorError(\n                    'QQ Music said: error %d in fetching playlist info' % list_json['code'],\n                    expected=True)\n            raise ExtractorError('Unable to get playlist info')\n\n        cdlist = list_json['cdlist'][0]\n        entries = [self.url_result(\n            'https://y.qq.com/n/yqq/song/' + song['songmid'] + '.html', 'QQMusic', song['songmid'])\n            for song in cdlist['songlist']]\n\n        list_name = cdlist.get('dissname')\n        list_description = clean_html(unescapeHTML(cdlist.get('desc')))\n        return self.playlist_result(entries, list_id, list_name, list_description)\n", "comments": "# coding: utf-8\n# Reference: m_r_GetRUin() in top_player.js\n# http://imgcache.gtimg.cn/music/portal_v3/y/top_player.js\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport random\nimport re\nimport time\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n    strip_jsonp,\n    unescapeHTML,\n)\n\n\nclass QQMusicIE(InfoExtractor):\n    IE_NAME = 'qqmusic'\n    IE_DESC = 'QQ\u97f3\u4e50'\n    _VALID_URL = r'https?://y\\.qq\\.com/n/yqq/song/(?P<id>[0-9A-Za-z]+)\\.html'\n    _TESTS = [{\n        'url': 'https://y.qq.com/n/yqq/song/004295Et37taLD.html',\n        'md5': '5f1e6cea39e182857da7ffc5ef5e6bb8',\n        'info_dict': {\n            'id': '004295Et37taLD',\n            'ext': 'mp3',\n            'title': '\u53ef\u60dc\u6ca1\u5982\u679c',\n            'release_date': '20141227',\n            'creator': '\u6797\u4fca\u6770',\n            'description': 'md5:d85afb3051952ecc50a1ee8a286d1eac',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }, {\n        'note': 'There is no mp3-320 version of this song.',\n        'url': 'https://y.qq.com/n/yqq/song/004MsGEo3DdNxV.html',\n        'md5': 'fa3926f0c585cda0af8fa4f796482e3e',\n        'info_dict': {\n            'id': '004MsGEo3DdNxV',\n            'ext': 'mp3',\n            'title': '\u5982\u679c',\n            'release_date': '20050626',\n            'creator': '\u674e\u5b63\u7f8e',\n            'description': 'md5:46857d5ed62bc4ba84607a805dccf437',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }, {\n        'note': 'lyrics not in .lrc format',\n        'url': 'https://y.qq.com/n/yqq/song/001JyApY11tIp6.html',\n        'info_dict': {\n            'id': '001JyApY11tIp6',\n            'ext': 'mp3',\n            'title': 'Shadows Over Transylvania',\n            'release_date': '19970225',\n            'creator': 'Dark Funeral',\n            'description': 'md5:c9b20210587cbcd6836a1c597bab4525',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    _FORMATS = {\n        'mp3-320': {'prefix': 'M800', 'ext': 'mp3', 'preference': 40, 'abr': 320},\n        'mp3-128': {'prefix': 'M500', 'ext': 'mp3', 'preference': 30, 'abr': 128},\n        'm4a': {'prefix': 'C200', 'ext': 'm4a', 'preference': 10}\n    }\n\n    # Reference: m_r_GetRUin() in top_player.js\n    # http://imgcache.gtimg.cn/music/portal_v3/y/top_player.js\n    @staticmethod\n    def m_r_get_ruin():\n        curMs = int(time.time() * 1000) % 1000\n        return int(round(random.random() * 2147483647) * curMs % 1E10)\n\n    def _real_extract(self, url):\n        mid = self._match_id(url)\n\n        detail_info_page = self._download_webpage(\n            'http://s.plcloud.music.qq.com/fcgi-bin/fcg_yqq_song_detail_info.fcg?songmid=%s&play=0' % mid,\n            mid, note='Download song detail info',\n            errnote='Unable to get song detail info', encoding='gbk')\n\n        song_name = self._html_search_regex(\n            r\"songname:\\s*'([^']+)'\", detail_info_page, 'song name')\n\n        publish_time = self._html_search_regex(\n            r'\u53d1\u884c\u65f6\u95f4\uff1a(\\d{4}-\\d{2}-\\d{2})', detail_info_page,\n            'publish time', default=None)\n        if publish_time:\n            publish_time = publish_time.replace('-', '')\n\n        singer = self._html_search_regex(\n            r\"singer:\\s*'([^']+)\", detail_info_page, 'singer', default=None)\n\n        lrc_content = self._html_search_regex(\n            r'<div class=\"content\" id=\"lrc_content\"[^<>]*>([^<>]+)</div>',\n            detail_info_page, 'LRC lyrics', default=None)\n        if lrc_content:\n            lrc_content = lrc_content.replace('\\\\n', '\\n')\n\n        thumbnail_url = None\n        albummid = self._search_regex(\n            [r'albummid:\\'([0-9a-zA-Z]+)\\'', r'\"albummid\":\"([0-9a-zA-Z]+)\"'],\n            detail_info_page, 'album mid', default=None)\n        if albummid:\n            thumbnail_url = 'http://i.gtimg.cn/music/photo/mid_album_500/%s/%s/%s.jpg' \\\n                            % (albummid[-2:-1], albummid[-1], albummid)\n\n        guid = self.m_r_get_ruin()\n\n        vkey = self._download_json(\n            'http://base.music.qq.com/fcgi-bin/fcg_musicexpress.fcg?json=3&guid=%s' % guid,\n            mid, note='Retrieve vkey', errnote='Unable to get vkey',\n            transform_source=strip_jsonp)['key']\n\n        formats = []\n        for format_id, details in self._FORMATS.items():\n            formats.append({\n                'url': 'http://cc.stream.qqmusic.qq.com/%s%s.%s?vkey=%s&guid=%s&fromtag=0'\n                       % (details['prefix'], mid, details['ext'], vkey, guid),\n                'format': format_id,\n                'format_id': format_id,\n                'preference': details['preference'],\n                'abr': details.get('abr'),\n            })\n        self._check_formats(formats, mid)\n        self._sort_formats(formats)\n\n        actual_lrc_lyrics = ''.join(\n            line + '\\n' for line in re.findall(\n                r'(?m)^(\\[[0-9]{2}:[0-9]{2}(?:\\.[0-9]{2,})?\\][^\\n]*|\\[[^\\]]*\\])', lrc_content))\n\n        info_dict = {\n            'id': mid,\n            'formats': formats,\n            'title': song_name,\n            'release_date': publish_time,\n            'creator': singer,\n            'description': lrc_content,\n            'thumbnail': thumbnail_url\n        }\n        if actual_lrc_lyrics:\n            info_dict['subtitles'] = {\n                'origin': [{\n                    'ext': 'lrc',\n                    'data': actual_lrc_lyrics,\n                }]\n            }\n        return info_dict\n\n\nclass QQPlaylistBaseIE(InfoExtractor):\n    @staticmethod\n    def qq_static_url(category, mid):\n        return 'http://y.qq.com/y/static/%s/%s/%s/%s.html' % (category, mid[-2], mid[-1], mid)\n\n    def get_singer_all_songs(self, singmid, num):\n        return self._download_webpage(\n            r'https://c.y.qq.com/v8/fcg-bin/fcg_v8_singer_track_cp.fcg', singmid,\n            query={\n                'format': 'json',\n                'inCharset': 'utf8',\n                'outCharset': 'utf-8',\n                'platform': 'yqq',\n                'needNewCode': 0,\n                'singermid': singmid,\n                'order': 'listen',\n                'begin': 0,\n                'num': num,\n                'songstatus': 1,\n            })\n\n    def get_entries_from_page(self, singmid):\n        entries = []\n\n        default_num = 1\n        json_text = self.get_singer_all_songs(singmid, default_num)\n        json_obj_all_songs = self._parse_json(json_text, singmid)\n\n        if json_obj_all_songs['code'] == 0:\n            total = json_obj_all_songs['data']['total']\n            json_text = self.get_singer_all_songs(singmid, total)\n            json_obj_all_songs = self._parse_json(json_text, singmid)\n\n        for item in json_obj_all_songs['data']['list']:\n            if item['musicData'].get('songmid') is not None:\n                songmid = item['musicData']['songmid']\n                entries.append(self.url_result(\n                    r'https://y.qq.com/n/yqq/song/%s.html' % songmid, 'QQMusic', songmid))\n\n        return entries\n\n\nclass QQMusicSingerIE(QQPlaylistBaseIE):\n    IE_NAME = 'qqmusic:singer'\n    IE_DESC = 'QQ\u97f3\u4e50 - \u6b4c\u624b'\n    _VALID_URL = r'https?://y\\.qq\\.com/n/yqq/singer/(?P<id>[0-9A-Za-z]+)\\.html'\n    _TEST = {\n        'url': 'https://y.qq.com/n/yqq/singer/001BLpXF2DyJe2.html',\n        'info_dict': {\n            'id': '001BLpXF2DyJe2',\n            'title': '\u6797\u4fca\u6770',\n            'description': 'md5:870ec08f7d8547c29c93010899103751',\n        },\n        'playlist_mincount': 12,\n    }\n\n    def _real_extract(self, url):\n        mid = self._match_id(url)\n\n        entries = self.get_entries_from_page(mid)\n        singer_page = self._download_webpage(url, mid, 'Download singer page')\n        singer_name = self._html_search_regex(\n            r\"singername\\s*:\\s*'(.*?)'\", singer_page, 'singer name', default=None)\n        singer_desc = None\n\n        if mid:\n            singer_desc_page = self._download_xml(\n                'http://s.plcloud.music.qq.com/fcgi-bin/fcg_get_singer_desc.fcg', mid,\n                'Donwload singer description XML',\n                query={'utf8': 1, 'outCharset': 'utf-8', 'format': 'xml', 'singermid': mid},\n                headers={'Referer': 'https://y.qq.com/n/yqq/singer/'})\n\n            singer_desc = singer_desc_page.find('./data/info/desc').text\n\n        return self.playlist_result(entries, mid, singer_name, singer_desc)\n\n\nclass QQMusicAlbumIE(QQPlaylistBaseIE):\n    IE_NAME = 'qqmusic:album'\n    IE_DESC = 'QQ\u97f3\u4e50 - \u4e13\u8f91'\n    _VALID_URL = r'https?://y\\.qq\\.com/n/yqq/album/(?P<id>[0-9A-Za-z]+)\\.html'\n\n    _TESTS = [{\n        'url': 'https://y.qq.com/n/yqq/album/000gXCTb2AhRR1.html',\n        'info_dict': {\n            'id': '000gXCTb2AhRR1',\n            'title': '\u6211\u4eec\u90fd\u662f\u8fd9\u6837\u957f\u5927\u7684',\n            'description': 'md5:179c5dce203a5931970d306aa9607ea6',\n        },\n        'playlist_count': 4,\n    }, {\n        'url': 'https://y.qq.com/n/yqq/album/002Y5a3b3AlCu3.html',\n        'info_dict': {\n            'id': '002Y5a3b3AlCu3',\n            'title': '\uadf8\ub9ac\uace0...',\n            'description': 'md5:a48823755615508a95080e81b51ba729',\n        },\n        'playlist_count': 8,\n    }]\n\n    def _real_extract(self, url):\n        mid = self._match_id(url)\n\n        album = self._download_json(\n            'http://i.y.qq.com/v8/fcg-bin/fcg_v8_album_info_cp.fcg?albummid=%s&format=json' % mid,\n            mid, 'Download album page')['data']\n\n        entries = [\n            self.url_result(\n                'https://y.qq.com/n/yqq/song/' + song['songmid'] + '.html', 'QQMusic', song['songmid']\n            ) for song in album['list']\n        ]\n        album_name = album.get('name')\n        album_detail = album.get('desc')\n        if album_detail is not None:\n            album_detail = album_detail.strip()\n\n        return self.playlist_result(entries, mid, album_name, album_detail)\n\n\nclass QQMusicToplistIE(QQPlaylistBaseIE):\n    IE_NAME = 'qqmusic:toplist'\n    IE_DESC = 'QQ\u97f3\u4e50 - \u6392\u884c\u699c'\n    _VALID_URL = r'https?://y\\.qq\\.com/n/yqq/toplist/(?P<id>[0-9]+)\\.html'\n\n    _TESTS = [{\n        'url': 'https://y.qq.com/n/yqq/toplist/123.html',\n        'info_dict': {\n            'id': '123',\n            'title': '\u7f8e\u56fdiTunes\u699c',\n            'description': 'md5:89db2335fdbb10678dee2d43fe9aba08',\n        },\n        'playlist_count': 100,\n    }, {\n        'url': 'https://y.qq.com/n/yqq/toplist/3.html',\n        'info_dict': {\n            'id': '3',\n            'title': '\u5dc5\u5cf0\u699c\u00b7\u6b27\u7f8e',\n            'description': 'md5:5a600d42c01696b26b71f8c4d43407da',\n        },\n        'playlist_count': 100,\n    }, {\n        'url': 'https://y.qq.com/n/yqq/toplist/106.html',\n        'info_dict': {\n            'id': '106',\n            'title': '\u97e9\u56fdMnet\u699c',\n            'description': 'md5:cb84b325215e1d21708c615cac82a6e7',\n        },\n        'playlist_count': 50,\n    }]\n\n    def _real_extract(self, url):\n        list_id = self._match_id(url)\n\n        toplist_json = self._download_json(\n            'http://i.y.qq.com/v8/fcg-bin/fcg_v8_toplist_cp.fcg', list_id,\n            note='Download toplist page',\n            query={'type': 'toplist', 'topid': list_id, 'format': 'json'})\n\n        entries = [self.url_result(\n            'https://y.qq.com/n/yqq/song/' + song['data']['songmid'] + '.html', 'QQMusic',\n            song['data']['songmid'])\n            for song in toplist_json['songlist']]\n\n        topinfo = toplist_json.get('topinfo', {})\n        list_name = topinfo.get('ListName')\n        list_description = topinfo.get('info')\n        return self.playlist_result(entries, list_id, list_name, list_description)\n\n\nclass QQMusicPlaylistIE(QQPlaylistBaseIE):\n    IE_NAME = 'qqmusic:playlist'\n    IE_DESC = 'QQ\u97f3\u4e50 - \u6b4c\u5355'\n    _VALID_URL = r'https?://y\\.qq\\.com/n/yqq/playlist/(?P<id>[0-9]+)\\.html'\n\n    _TESTS = [{\n        'url': 'http://y.qq.com/n/yqq/playlist/3462654915.html',\n        'info_dict': {\n            'id': '3462654915',\n            'title': '\u97e9\u56fd5\u6708\u65b0\u6b4c\u7cbe\u9009\u4e0b\u65ec',\n            'description': 'md5:d2c9d758a96b9888cf4fe82f603121d4',\n        },\n        'playlist_count': 40,\n        'skip': 'playlist gone',\n    }, {\n        'url': 'https://y.qq.com/n/yqq/playlist/1374105607.html',\n        'info_dict': {\n            'id': '1374105607',\n            'title': '\u6613\u5165\u4eba\u5fc3\u7684\u534e\u8bed\u6c11\u8c23',\n            'description': '\u6c11\u8c23\u7684\u6b4c\u66f2\u6613\u4e8e\u4f20\u5531\u3001\u3001\u6b4c\u8bcd\u6717\u6717\u4f24\u53e3\u3001\u65cb\u5f8b\u7b80\u5355\u6e29\u99a8\u3002\u5c5e\u4e8e\u90a3\u79cd\u624d\u5165\u8033\u5b54\u3002\u5374\u4e0a\u5fc3\u5934\u7684\u611f\u89c9\u3002\u6ca1\u6709\u592a\u591a\u7684\u590d\u6742\u60c5\u7eea\u3002\u7b80\u5355\u800c\u76f4\u63a5\u5730\u8868\u8fbe\u4e50\u8005\u7684\u60c5\u7eea\uff0c\u5c31\u662f\u8fd9\u6837\u7684\u7b80\u5355\u624d\u6613\u5165\u4eba\u5fc3\u3002',\n        },\n        'playlist_count': 20,\n    }]\n\n    def _real_extract(self, url):\n        list_id = self._match_id(url)\n\n        list_json = self._download_json(\n            'http://i.y.qq.com/qzone-music/fcg-bin/fcg_ucc_getcdinfo_byids_cp.fcg',\n            list_id, 'Download list page',\n            query={'type': 1, 'json': 1, 'utf8': 1, 'onlysong': 0, 'disstid': list_id},\n            transform_source=strip_jsonp)\n        if not len(list_json.get('cdlist', [])):\n            if list_json.get('code'):\n                raise ExtractorError(\n                    'QQ Music said: error %d in fetching playlist info' % list_json['code'],\n                    expected=True)\n            raise ExtractorError('Unable to get playlist info')\n\n        cdlist = list_json['cdlist'][0]\n        entries = [self.url_result(\n            'https://y.qq.com/n/yqq/song/' + song['songmid'] + '.html', 'QQMusic', song['songmid'])\n            for song in cdlist['songlist']]\n\n        list_name = cdlist.get('dissname')\n        list_description = clean_html(unescapeHTML(cdlist.get('desc')))\n        return self.playlist_result(entries, list_id, list_name, list_description)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "qqmusic.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/qqmusic.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}