{"author": "django", "code": "from django.contrib import admin\nfrom django.contrib.admin.decorators import register\nfrom django.contrib.admin.sites import site\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.test import SimpleTestCase\n\nfrom .models import Location, Person, Place, Traveler\n\n\nclass NameAdmin(admin.ModelAdmin):\n    list_display = ['name']\n    save_on_top = True\n\n\nclass CustomSite(admin.AdminSite):\n    pass\n\n\nclass TestRegistration(SimpleTestCase):\n    def setUp(self):\n        self.site = admin.AdminSite()\n\n    def test_bare_registration(self):\n        self.site.register(Person)\n        self.assertIsInstance(self.site._registry[Person], admin.ModelAdmin)\n\n    def test_registration_with_model_admin(self):\n        self.site.register(Person, NameAdmin)\n        self.assertIsInstance(self.site._registry[Person], NameAdmin)\n\n    def test_prevent_double_registration(self):\n        self.site.register(Person)\n        msg = 'The model Person is already registered'\n        with self.assertRaisesMessage(admin.sites.AlreadyRegistered, msg):\n            self.site.register(Person)\n\n    def test_registration_with_star_star_options(self):\n        self.site.register(Person, search_fields=['name'])\n        self.assertEqual(self.site._registry[Person].search_fields, ['name'])\n\n    def test_star_star_overrides(self):\n        self.site.register(Person, NameAdmin, search_fields=[\"name\"], list_display=['__str__'])\n        self.assertEqual(self.site._registry[Person].search_fields, ['name'])\n        self.assertEqual(self.site._registry[Person].list_display, ['__str__'])\n        self.assertTrue(self.site._registry[Person].save_on_top)\n\n    def test_iterable_registration(self):\n        self.site.register([Person, Place], search_fields=['name'])\n        self.assertIsInstance(self.site._registry[Person], admin.ModelAdmin)\n        self.assertEqual(self.site._registry[Person].search_fields, ['name'])\n        self.assertIsInstance(self.site._registry[Place], admin.ModelAdmin)\n        self.assertEqual(self.site._registry[Place].search_fields, ['name'])\n\n    def test_abstract_model(self):\n        \"\"\"\n        Exception is raised when trying to register an abstract model.\n        Refs \n        \"\"\"\n        msg = 'The model Location is abstract, so it cannot be registered with admin.'\n        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n            self.site.register(Location)\n\n    def test_is_registered_model(self):\n        \"Checks for registered models should return true.\"\n        self.site.register(Person)\n        self.assertTrue(self.site.is_registered(Person))\n\n    def test_is_registered_not_registered_model(self):\n        \"Checks for unregistered models should return false.\"\n        self.assertFalse(self.site.is_registered(Person))\n\n\nclass TestRegistrationDecorator(SimpleTestCase):\n    \"\"\"\n    Tests the register decorator in admin.decorators\n\n    For clarity:\n\n        @register(Person)\n        class AuthorAdmin(ModelAdmin):\n            pass\n\n    is functionally equal to (the way it is written in these tests):\n\n        AuthorAdmin = register(Person)(AuthorAdmin)\n    \"\"\"\n    def setUp(self):\n        self.default_site = site\n        self.custom_site = CustomSite()\n\n    def test_basic_registration(self):\n        register(Person)(NameAdmin)\n        self.assertIsInstance(self.default_site._registry[Person], admin.ModelAdmin)\n        self.default_site.unregister(Person)\n\n    def test_custom_site_registration(self):\n        register(Person, site=self.custom_site)(NameAdmin)\n        self.assertIsInstance(self.custom_site._registry[Person], admin.ModelAdmin)\n\n    def test_multiple_registration(self):\n        register(Traveler, Place)(NameAdmin)\n        self.assertIsInstance(self.default_site._registry[Traveler], admin.ModelAdmin)\n        self.default_site.unregister(Traveler)\n        self.assertIsInstance(self.default_site._registry[Place], admin.ModelAdmin)\n        self.default_site.unregister(Place)\n\n    def test_wrapped_class_not_a_model_admin(self):\n        with self.assertRaisesMessage(ValueError, 'Wrapped class must subclass ModelAdmin.'):\n            register(Person)(CustomSite)\n\n    def test_custom_site_not_an_admin_site(self):\n        with self.assertRaisesMessage(ValueError, 'site must subclass AdminSite'):\n            register(Person, site=Traveler)(NameAdmin)\n\n    def test_empty_models_list_registration_fails(self):\n        with self.assertRaisesMessage(ValueError, 'At least one model must be passed to register.'):\n            register()(NameAdmin)\n", "comments": "            exception raised trying register abstract model          refs  12004                      msg    the model location abstract  cannot registered admin           self assertraisesmessage(improperlyconfigured  msg)              self site register(location)      def test registered model(self)           checks registered models return true           self site register(person)         self asserttrue(self site registered(person))      def test registered registered model(self)           checks unregistered models return false           self assertfalse(self site registered(person))   class testregistrationdecorator(simpletestcase)              tests register decorator admin decorators      for clarity            register(person)         class authoradmin(modeladmin)              pass      functionally equal (the way written tests)           authoradmin   register(person)(authoradmin)           12004  ", "content": "from django.contrib import admin\nfrom django.contrib.admin.decorators import register\nfrom django.contrib.admin.sites import site\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.test import SimpleTestCase\n\nfrom .models import Location, Person, Place, Traveler\n\n\nclass NameAdmin(admin.ModelAdmin):\n    list_display = ['name']\n    save_on_top = True\n\n\nclass CustomSite(admin.AdminSite):\n    pass\n\n\nclass TestRegistration(SimpleTestCase):\n    def setUp(self):\n        self.site = admin.AdminSite()\n\n    def test_bare_registration(self):\n        self.site.register(Person)\n        self.assertIsInstance(self.site._registry[Person], admin.ModelAdmin)\n\n    def test_registration_with_model_admin(self):\n        self.site.register(Person, NameAdmin)\n        self.assertIsInstance(self.site._registry[Person], NameAdmin)\n\n    def test_prevent_double_registration(self):\n        self.site.register(Person)\n        msg = 'The model Person is already registered'\n        with self.assertRaisesMessage(admin.sites.AlreadyRegistered, msg):\n            self.site.register(Person)\n\n    def test_registration_with_star_star_options(self):\n        self.site.register(Person, search_fields=['name'])\n        self.assertEqual(self.site._registry[Person].search_fields, ['name'])\n\n    def test_star_star_overrides(self):\n        self.site.register(Person, NameAdmin, search_fields=[\"name\"], list_display=['__str__'])\n        self.assertEqual(self.site._registry[Person].search_fields, ['name'])\n        self.assertEqual(self.site._registry[Person].list_display, ['__str__'])\n        self.assertTrue(self.site._registry[Person].save_on_top)\n\n    def test_iterable_registration(self):\n        self.site.register([Person, Place], search_fields=['name'])\n        self.assertIsInstance(self.site._registry[Person], admin.ModelAdmin)\n        self.assertEqual(self.site._registry[Person].search_fields, ['name'])\n        self.assertIsInstance(self.site._registry[Place], admin.ModelAdmin)\n        self.assertEqual(self.site._registry[Place].search_fields, ['name'])\n\n    def test_abstract_model(self):\n        \"\"\"\n        Exception is raised when trying to register an abstract model.\n        Refs #12004.\n        \"\"\"\n        msg = 'The model Location is abstract, so it cannot be registered with admin.'\n        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n            self.site.register(Location)\n\n    def test_is_registered_model(self):\n        \"Checks for registered models should return true.\"\n        self.site.register(Person)\n        self.assertTrue(self.site.is_registered(Person))\n\n    def test_is_registered_not_registered_model(self):\n        \"Checks for unregistered models should return false.\"\n        self.assertFalse(self.site.is_registered(Person))\n\n\nclass TestRegistrationDecorator(SimpleTestCase):\n    \"\"\"\n    Tests the register decorator in admin.decorators\n\n    For clarity:\n\n        @register(Person)\n        class AuthorAdmin(ModelAdmin):\n            pass\n\n    is functionally equal to (the way it is written in these tests):\n\n        AuthorAdmin = register(Person)(AuthorAdmin)\n    \"\"\"\n    def setUp(self):\n        self.default_site = site\n        self.custom_site = CustomSite()\n\n    def test_basic_registration(self):\n        register(Person)(NameAdmin)\n        self.assertIsInstance(self.default_site._registry[Person], admin.ModelAdmin)\n        self.default_site.unregister(Person)\n\n    def test_custom_site_registration(self):\n        register(Person, site=self.custom_site)(NameAdmin)\n        self.assertIsInstance(self.custom_site._registry[Person], admin.ModelAdmin)\n\n    def test_multiple_registration(self):\n        register(Traveler, Place)(NameAdmin)\n        self.assertIsInstance(self.default_site._registry[Traveler], admin.ModelAdmin)\n        self.default_site.unregister(Traveler)\n        self.assertIsInstance(self.default_site._registry[Place], admin.ModelAdmin)\n        self.default_site.unregister(Place)\n\n    def test_wrapped_class_not_a_model_admin(self):\n        with self.assertRaisesMessage(ValueError, 'Wrapped class must subclass ModelAdmin.'):\n            register(Person)(CustomSite)\n\n    def test_custom_site_not_an_admin_site(self):\n        with self.assertRaisesMessage(ValueError, 'site must subclass AdminSite'):\n            register(Person, site=Traveler)(NameAdmin)\n\n    def test_empty_models_list_registration_fails(self):\n        with self.assertRaisesMessage(ValueError, 'At least one model must be passed to register.'):\n            register()(NameAdmin)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "69ca19b50f4227b11e33b5f34eec9cd0", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/admin_registration/tests.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}