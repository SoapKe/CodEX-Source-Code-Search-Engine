{"author": "django", "code": "from datetime import datetime\n\nfrom django.test import TestCase\n\nfrom .models import Article, Category\n\n\nclass M2MMultipleTests(TestCase):\n    def test_multiple(self):\n        c1, c2, c3, c4 = [\n            Category.objects.create(name=name)\n            for name in [\"Sports\", \"News\", \"Crime\", \"Life\"]\n        ]\n\n        a1 = Article.objects.create(\n            headline=\"Parrot steals\", pub_date=datetime(2005, 11, 27)\n        )\n        a1.primary_categories.add(c2, c3)\n        a1.secondary_categories.add(c4)\n\n        a2 = Article.objects.create(\n            headline=\"Parrot runs\", pub_date=datetime(2005, 11, 28)\n        )\n        a2.primary_categories.add(c1, c2)\n        a2.secondary_categories.add(c4)\n\n        self.assertQuerysetEqual(\n            a1.primary_categories.all(), [\n                \"Crime\",\n                \"News\",\n            ],\n            lambda c: c.name\n        )\n        self.assertQuerysetEqual(\n            a2.primary_categories.all(), [\n                \"News\",\n                \"Sports\",\n            ],\n            lambda c: c.name\n        )\n        self.assertQuerysetEqual(\n            a1.secondary_categories.all(), [\n                \"Life\",\n            ],\n            lambda c: c.name\n        )\n        self.assertQuerysetEqual(\n            c1.primary_article_set.all(), [\n                \"Parrot runs\",\n            ],\n            lambda a: a.headline\n        )\n        self.assertQuerysetEqual(\n            c1.secondary_article_set.all(), []\n        )\n        self.assertQuerysetEqual(\n            c2.primary_article_set.all(), [\n                \"Parrot steals\",\n                \"Parrot runs\",\n            ],\n            lambda a: a.headline\n        )\n        self.assertQuerysetEqual(\n            c2.secondary_article_set.all(), []\n        )\n        self.assertQuerysetEqual(\n            c3.primary_article_set.all(), [\n                \"Parrot steals\",\n            ],\n            lambda a: a.headline\n        )\n        self.assertQuerysetEqual(\n            c3.secondary_article_set.all(), []\n        )\n        self.assertQuerysetEqual(\n            c4.primary_article_set.all(), []\n        )\n        self.assertQuerysetEqual(\n            c4.secondary_article_set.all(), [\n                \"Parrot steals\",\n                \"Parrot runs\",\n            ],\n            lambda a: a.headline\n        )\n", "comments": "", "content": "from datetime import datetime\n\nfrom django.test import TestCase\n\nfrom .models import Article, Category\n\n\nclass M2MMultipleTests(TestCase):\n    def test_multiple(self):\n        c1, c2, c3, c4 = [\n            Category.objects.create(name=name)\n            for name in [\"Sports\", \"News\", \"Crime\", \"Life\"]\n        ]\n\n        a1 = Article.objects.create(\n            headline=\"Parrot steals\", pub_date=datetime(2005, 11, 27)\n        )\n        a1.primary_categories.add(c2, c3)\n        a1.secondary_categories.add(c4)\n\n        a2 = Article.objects.create(\n            headline=\"Parrot runs\", pub_date=datetime(2005, 11, 28)\n        )\n        a2.primary_categories.add(c1, c2)\n        a2.secondary_categories.add(c4)\n\n        self.assertQuerysetEqual(\n            a1.primary_categories.all(), [\n                \"Crime\",\n                \"News\",\n            ],\n            lambda c: c.name\n        )\n        self.assertQuerysetEqual(\n            a2.primary_categories.all(), [\n                \"News\",\n                \"Sports\",\n            ],\n            lambda c: c.name\n        )\n        self.assertQuerysetEqual(\n            a1.secondary_categories.all(), [\n                \"Life\",\n            ],\n            lambda c: c.name\n        )\n        self.assertQuerysetEqual(\n            c1.primary_article_set.all(), [\n                \"Parrot runs\",\n            ],\n            lambda a: a.headline\n        )\n        self.assertQuerysetEqual(\n            c1.secondary_article_set.all(), []\n        )\n        self.assertQuerysetEqual(\n            c2.primary_article_set.all(), [\n                \"Parrot steals\",\n                \"Parrot runs\",\n            ],\n            lambda a: a.headline\n        )\n        self.assertQuerysetEqual(\n            c2.secondary_article_set.all(), []\n        )\n        self.assertQuerysetEqual(\n            c3.primary_article_set.all(), [\n                \"Parrot steals\",\n            ],\n            lambda a: a.headline\n        )\n        self.assertQuerysetEqual(\n            c3.secondary_article_set.all(), []\n        )\n        self.assertQuerysetEqual(\n            c4.primary_article_set.all(), []\n        )\n        self.assertQuerysetEqual(\n            c4.secondary_article_set.all(), [\n                \"Parrot steals\",\n                \"Parrot runs\",\n            ],\n            lambda a: a.headline\n        )\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "604d06254ecaed435530f7f24662fa8b", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/m2m_multiple/tests.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}