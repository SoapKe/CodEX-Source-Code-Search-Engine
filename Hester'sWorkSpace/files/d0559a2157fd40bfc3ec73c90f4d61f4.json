{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'network'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: \"vyos_system\"\nversion_added: \"2.3\"\nauthor: \"Nathaniel Case (@qalthos)\"\nshort_description: Run `set system` commands on VyOS devices\ndescription:\n  - Runs one or more commands on remote devices running VyOS.\n    This module can also be introspected to validate key parameters before\n    returning successfully.\nextends_documentation_fragment: vyos\nnotes:\n  - Tested against VYOS 1.1.7\noptions:\n  host_name:\n    description:\n      - Configure the device hostname parameter. This option takes an ASCII string value.\n  domain_name:\n    description:\n      - The new domain name to apply to the device.\n  name_servers:\n    description:\n      - A list of name servers to use with the device. Mutually exclusive with\n        I(domain_search)\n    aliases: ['name_server']\n  domain_search:\n    description:\n      - A list of domain names to search. Mutually exclusive with\n        I(name_server)\n  state:\n    description:\n      - Whether to apply (C(present)) or remove (C(absent)) the settings.\n    default: present\n    choices: ['present', 'absent']\n\"\"\"\n\nRETURN = \"\"\"\ncommands:\n  description: The list of configuration mode commands to send to the device\n  returned: always\n  type: list\n  sample:\n    - set system hostname vyos01\n    - set system domain-name foo.example.com\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: configure hostname and domain-name\n  vyos_system:\n    host_name: vyos01\n    domain_name: test.example.com\n\n- name: remove all configuration\n  vyos_system:\n    state: absent\n\n- name: configure name servers\n  vyos_system:\n    name_servers\n      - 8.8.8.8\n      - 8.8.4.4\n\n- name: configure domain search suffixes\n  vyos_system:\n    domain_search:\n      - sub1.example.com\n      - sub2.example.com\n\"\"\"\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.vyos.vyos import get_config, load_config\nfrom ansible.module_utils.network.vyos.vyos import vyos_argument_spec\n\n\ndef spec_key_to_device_key(key):\n    device_key = key.replace('_', '-')\n\n     domain-search is longer than just it's key\n    if device_key == 'domain-search':\n        device_key += ' domain'\n\n    return device_key\n\n\ndef config_to_dict(module):\n    data = get_config(module)\n\n    config = {'domain_search': [], 'name_server': []}\n\n    for line in data.split('\\n'):\n        if line.startswith('set system host-name'):\n            config['host_name'] = line[22:-1]\n        elif line.startswith('set system domain-name'):\n            config['domain_name'] = line[24:-1]\n        elif line.startswith('set system domain-search domain'):\n            config['domain_search'].append(line[33:-1])\n        elif line.startswith('set system name-server'):\n            config['name_server'].append(line[24:-1])\n\n    return config\n\n\ndef spec_to_commands(want, have):\n    commands = []\n\n    state = want.pop('state')\n\n     state='absent' by itself has special meaning\n    if state == 'absent' and all(v is None for v in want.values()):\n         Clear everything\n        for key in have:\n            commands.append('delete system %s' % spec_key_to_device_key(key))\n\n    for key in want:\n        if want[key] is None:\n            continue\n\n        current = have.get(key)\n        proposed = want[key]\n        device_key = spec_key_to_device_key(key)\n\n         These keys are lists which may need to  be reconciled with the device\n        if key in ['domain_search', 'name_server']:\n            if not proposed:\n                 Empty list was passed, delete all values\n                commands.append(\"delete system %s\" % device_key)\n            for config in proposed:\n                if state == 'absent' and config in current:\n                    commands.append(\"delete system %s '%s'\" % (device_key, config))\n                elif state == 'present' and config not in current:\n                    commands.append(\"set system %s '%s'\" % (device_key, config))\n        else:\n            if state == 'absent' and current and proposed:\n                commands.append('delete system %s' % device_key)\n            elif state == 'present' and proposed and proposed != current:\n                commands.append(\"set system %s '%s'\" % (device_key, proposed))\n\n    return commands\n\n\ndef map_param_to_obj(module):\n    return {\n        'host_name': module.params['host_name'],\n        'domain_name': module.params['domain_name'],\n        'domain_search': module.params['domain_search'],\n        'name_server': module.params['name_server'],\n        'state': module.params['state']\n    }\n\n\ndef main():\n    argument_spec = dict(\n        host_name=dict(type='str'),\n        domain_name=dict(type='str'),\n        domain_search=dict(type='list'),\n        name_server=dict(type='list', aliases=['name_servers']),\n        state=dict(type='str', default='present', choices=['present', 'absent']),\n    )\n\n    argument_spec.update(vyos_argument_spec)\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        mutually_exclusive=[('domain_name', 'domain_search')],\n    )\n\n    warnings = list()\n\n    result = {'changed': False, 'warnings': warnings}\n\n    want = map_param_to_obj(module)\n    have = config_to_dict(module)\n\n    commands = spec_to_commands(want, have)\n    result['commands'] = commands\n\n    if commands:\n        commit = not module.check_mode\n        response = load_config(module, commands, commit=commit)\n        result['changed'] = True\n\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module   vyos system  version added   2 3  author   nathaniel case ( qalthos)  short description  run  set system  commands vyos devices description      runs one commands remote devices running vyos      this module also introspected validate key parameters     returning successfully  extends documentation fragment  vyos notes      tested vyos 1 1 7 options    host name      description          configure device hostname parameter  this option takes ascii string value    domain name      description          the new domain name apply device    name servers      description          a list name servers use device  mutually exclusive         i(domain search)     aliases    name server     domain search      description          a list domain names search  mutually exclusive         i(name server)   state      description          whether apply (c(present)) remove (c(absent)) settings      default  present     choices    present    absent        return       commands    description  the list configuration mode commands send device   returned  always   type  list   sample        set system hostname vyos01       set system domain name foo example com      examples         name  configure hostname domain name   vyos system      host name  vyos01     domain name  test example com    name  remove configuration   vyos system      state  absent    name  configure name servers   vyos system      name servers         8 8 8 8         8 8 4 4    name  configure domain search suffixes   vyos system      domain search          sub1 example com         sub2 example com         usr bin python        coding  utf 8           this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          domain search longer key    state  absent  special meaning    clear everything    these keys lists may need  reconciled device    empty list passed  delete values ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'network'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: \"vyos_system\"\nversion_added: \"2.3\"\nauthor: \"Nathaniel Case (@qalthos)\"\nshort_description: Run `set system` commands on VyOS devices\ndescription:\n  - Runs one or more commands on remote devices running VyOS.\n    This module can also be introspected to validate key parameters before\n    returning successfully.\nextends_documentation_fragment: vyos\nnotes:\n  - Tested against VYOS 1.1.7\noptions:\n  host_name:\n    description:\n      - Configure the device hostname parameter. This option takes an ASCII string value.\n  domain_name:\n    description:\n      - The new domain name to apply to the device.\n  name_servers:\n    description:\n      - A list of name servers to use with the device. Mutually exclusive with\n        I(domain_search)\n    aliases: ['name_server']\n  domain_search:\n    description:\n      - A list of domain names to search. Mutually exclusive with\n        I(name_server)\n  state:\n    description:\n      - Whether to apply (C(present)) or remove (C(absent)) the settings.\n    default: present\n    choices: ['present', 'absent']\n\"\"\"\n\nRETURN = \"\"\"\ncommands:\n  description: The list of configuration mode commands to send to the device\n  returned: always\n  type: list\n  sample:\n    - set system hostname vyos01\n    - set system domain-name foo.example.com\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: configure hostname and domain-name\n  vyos_system:\n    host_name: vyos01\n    domain_name: test.example.com\n\n- name: remove all configuration\n  vyos_system:\n    state: absent\n\n- name: configure name servers\n  vyos_system:\n    name_servers\n      - 8.8.8.8\n      - 8.8.4.4\n\n- name: configure domain search suffixes\n  vyos_system:\n    domain_search:\n      - sub1.example.com\n      - sub2.example.com\n\"\"\"\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.vyos.vyos import get_config, load_config\nfrom ansible.module_utils.network.vyos.vyos import vyos_argument_spec\n\n\ndef spec_key_to_device_key(key):\n    device_key = key.replace('_', '-')\n\n    # domain-search is longer than just it's key\n    if device_key == 'domain-search':\n        device_key += ' domain'\n\n    return device_key\n\n\ndef config_to_dict(module):\n    data = get_config(module)\n\n    config = {'domain_search': [], 'name_server': []}\n\n    for line in data.split('\\n'):\n        if line.startswith('set system host-name'):\n            config['host_name'] = line[22:-1]\n        elif line.startswith('set system domain-name'):\n            config['domain_name'] = line[24:-1]\n        elif line.startswith('set system domain-search domain'):\n            config['domain_search'].append(line[33:-1])\n        elif line.startswith('set system name-server'):\n            config['name_server'].append(line[24:-1])\n\n    return config\n\n\ndef spec_to_commands(want, have):\n    commands = []\n\n    state = want.pop('state')\n\n    # state='absent' by itself has special meaning\n    if state == 'absent' and all(v is None for v in want.values()):\n        # Clear everything\n        for key in have:\n            commands.append('delete system %s' % spec_key_to_device_key(key))\n\n    for key in want:\n        if want[key] is None:\n            continue\n\n        current = have.get(key)\n        proposed = want[key]\n        device_key = spec_key_to_device_key(key)\n\n        # These keys are lists which may need to  be reconciled with the device\n        if key in ['domain_search', 'name_server']:\n            if not proposed:\n                # Empty list was passed, delete all values\n                commands.append(\"delete system %s\" % device_key)\n            for config in proposed:\n                if state == 'absent' and config in current:\n                    commands.append(\"delete system %s '%s'\" % (device_key, config))\n                elif state == 'present' and config not in current:\n                    commands.append(\"set system %s '%s'\" % (device_key, config))\n        else:\n            if state == 'absent' and current and proposed:\n                commands.append('delete system %s' % device_key)\n            elif state == 'present' and proposed and proposed != current:\n                commands.append(\"set system %s '%s'\" % (device_key, proposed))\n\n    return commands\n\n\ndef map_param_to_obj(module):\n    return {\n        'host_name': module.params['host_name'],\n        'domain_name': module.params['domain_name'],\n        'domain_search': module.params['domain_search'],\n        'name_server': module.params['name_server'],\n        'state': module.params['state']\n    }\n\n\ndef main():\n    argument_spec = dict(\n        host_name=dict(type='str'),\n        domain_name=dict(type='str'),\n        domain_search=dict(type='list'),\n        name_server=dict(type='list', aliases=['name_servers']),\n        state=dict(type='str', default='present', choices=['present', 'absent']),\n    )\n\n    argument_spec.update(vyos_argument_spec)\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        mutually_exclusive=[('domain_name', 'domain_search')],\n    )\n\n    warnings = list()\n\n    result = {'changed': False, 'warnings': warnings}\n\n    want = map_param_to_obj(module)\n    have = config_to_dict(module)\n\n    commands = spec_to_commands(want, have)\n    result['commands'] = commands\n\n    if commands:\n        commit = not module.check_mode\n        response = load_config(module, commands, commit=commit)\n        result['changed'] = True\n\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "vyos_system.py", "id": "d0559a2157fd40bfc3ec73c90f4d61f4", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/vyos/vyos_system.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}