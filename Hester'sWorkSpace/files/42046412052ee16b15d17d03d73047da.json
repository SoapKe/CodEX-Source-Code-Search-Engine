{"author": "Rochester-NRT", "code": "\"\"\"Interface for AlphaGo self-play\"\"\"\nfrom AlphaGo.go import GameState\n\n\nclass play_match(object):\n    \"\"\"Interface to handle play between two players.\"\"\"\n\n    def __init__(self, player1, player2, save_dir=None, size=19):\n        # super(ClassName, self).__init__()\n        self.player1 = player1\n        self.player2 = player2\n        self.state = GameState(size=size)\n        \n        \n\n    def _play(self, player):\n        move = player.get_move(self.state)\n        ?\n        self.state.do_move(move)  \n        ()\n        if len(self.state.history) > 1:\n            if self.state.history[-1] is None and self.state.history[-2] is None \\\n                    and self.state.current_player == -1:\n                end_of_game = True\n            else:\n                end_of_game = False\n        else:\n            end_of_game = False\n        return end_of_game\n\n    def play(self):\n        \"\"\"Play one turn, update game state, save to disk\"\"\"\n        end_of_game = self._play(self.player1)\n        \n        return end_of_game\n", "comments": "   interface alphago self play    alphago go import gamestate   class play match(object)         interface handle play two players          def   init  (self  player1  player2  save dir none  size 19)            super(classname  self)   init  ()         self player1   player1         self player2   player2         self state   gamestate(size size)           i propose gamestate take top level save directory            automatically generate specific file name      def  play(self  player)          move   player get move(self state)           todo  fix eye          self state move(move)    return max prob sensible legal move           self state write disk()         len(self state history)   1              self state history  1  none self state history  2  none                       self state current player     1                  end game   true             else                  end game   false         else              end game   false         return end game      def play(self)             play one turn  update game state  save disk       super(classname  self)   init  ()    i propose gamestate take top level save directory     automatically generate specific file name    todo  fix eye     return max prob sensible legal move    self state write disk()    this incorrect  ", "content": "\"\"\"Interface for AlphaGo self-play\"\"\"\nfrom AlphaGo.go import GameState\n\n\nclass play_match(object):\n    \"\"\"Interface to handle play between two players.\"\"\"\n\n    def __init__(self, player1, player2, save_dir=None, size=19):\n        # super(ClassName, self).__init__()\n        self.player1 = player1\n        self.player2 = player2\n        self.state = GameState(size=size)\n        # I Propose that GameState should take a top-level save directory,\n        # then automatically generate the specific file name\n\n    def _play(self, player):\n        move = player.get_move(self.state)\n        # TODO: Fix is_eye?\n        self.state.do_move(move)  # Return max prob sensible legal move\n        # self.state.write_to_disk()\n        if len(self.state.history) > 1:\n            if self.state.history[-1] is None and self.state.history[-2] is None \\\n                    and self.state.current_player == -1:\n                end_of_game = True\n            else:\n                end_of_game = False\n        else:\n            end_of_game = False\n        return end_of_game\n\n    def play(self):\n        \"\"\"Play one turn, update game state, save to disk\"\"\"\n        end_of_game = self._play(self.player1)\n        # This is incorrect.\n        return end_of_game\n", "description": "An independent, student-led replication of DeepMind's 2016 Nature publication, \"Mastering the game of Go with deep neural networks and tree search\" (Nature 529, 484-489, 28 Jan 2016), details of which can be found on their website https://deepmind.com/publications.html.", "file_name": "Play.py", "id": "42046412052ee16b15d17d03d73047da", "language": "Python", "project_name": "RocAlphaGo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/Rochester-NRT-RocAlphaGo/Rochester-NRT-RocAlphaGo-a39cac2/interface/Play.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:14:30Z", "url": "https://github.com/Rochester-NRT/RocAlphaGo", "wiki": true}