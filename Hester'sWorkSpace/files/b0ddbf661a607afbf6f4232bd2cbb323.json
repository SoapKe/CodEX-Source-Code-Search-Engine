{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    urlencode_postdata,\n)\n\n\nclass StreamcloudIE(InfoExtractor):\n    IE_NAME = 'streamcloud.eu'\n    _VALID_URL = r'https?://streamcloud\\.eu/(?P<id>[a-zA-Z0-9_-]+)(?:/(?P<fname>[^\n\n    _TESTS = [{\n        'url': 'http://streamcloud.eu/skp9j99s4bpz/youtube-dl_test_video_____________-BaW_jenozKc.mp4.html',\n        'md5': '6bea4c7fa5daaacc2a946b7146286686',\n        'info_dict': {\n            'id': 'skp9j99s4bpz',\n            'ext': 'mp4',\n            'title': 'youtube-dl test video  \\'/\\\\ \u00e4 \u21ad',\n        },\n        'skip': 'Only available from the EU'\n    }, {\n        'url': 'http://streamcloud.eu/ua8cmfh1nbe6/NSHIP-148--KUC-NG--H264-.mp4.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        url = 'http://streamcloud.eu/%s' % video_id\n\n        orig_webpage = self._download_webpage(url, video_id)\n\n        if '>File Not Found<' in orig_webpage:\n            raise ExtractorError(\n                'Video %s does not exist' % video_id, expected=True)\n\n        fields = re.findall(r, orig_webpage)\n\n        self._sleep(12, video_id)\n\n        webpage = self._download_webpage(\n            url, video_id, data=urlencode_postdata(fields), headers={\n                b'Content-Type': b'application/x-www-form-urlencoded',\n            })\n\n        try:\n            title = self._html_search_regex(\n                r'<h1[^>]*>([^<]+)<', webpage, 'title')\n            video_url = self._search_regex(\n                r'file:\\s*\"([^\"]+)\"', webpage, 'video URL')\n        except ExtractorError:\n            message = self._html_search_regex(\n                r'(?s)<div[^>]+class=([\"\\']).*?msgboxinfo.*?\\1[^>]*>(?P<message>.+?)</div>',\n                webpage, 'message', default=None, group='message')\n            if message:\n                raise ExtractorError('%s said: %s' % (self.IE_NAME, message), expected=True)\n            raise\n        thumbnail = self._search_regex(\n            r'image:\\s*\"([^\"]+)\"', webpage, 'thumbnail URL', fatal=False)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'url': video_url,\n            'thumbnail': thumbnail,\n        }\n", "comments": "(?x)<input\\s+\n            type=\"(?:hidden|submit)\"\\s+\n            name=\"([^\"]+)\"\\s+\n            (?:id=\"[^\"]+\"\\s+)?\n            value=\"([^\"]*)\"\n            \n \n# coding: utf-8\n#?]*)\\.html)?'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    urlencode_postdata,\n)\n\n\nclass StreamcloudIE(InfoExtractor):\n    IE_NAME = 'streamcloud.eu'\n    _VALID_URL = r'https?://streamcloud\\.eu/(?P<id>[a-zA-Z0-9_-]+)(?:/(?P<fname>[^#?]*)\\.html)?'\n\n    _TESTS = [{\n        'url': 'http://streamcloud.eu/skp9j99s4bpz/youtube-dl_test_video_____________-BaW_jenozKc.mp4.html',\n        'md5': '6bea4c7fa5daaacc2a946b7146286686',\n        'info_dict': {\n            'id': 'skp9j99s4bpz',\n            'ext': 'mp4',\n            'title': 'youtube-dl test video  \\'/\\\\ \u00e4 \u21ad',\n        },\n        'skip': 'Only available from the EU'\n    }, {\n        'url': 'http://streamcloud.eu/ua8cmfh1nbe6/NSHIP-148--KUC-NG--H264-.mp4.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        url = 'http://streamcloud.eu/%s' % video_id\n\n        orig_webpage = self._download_webpage(url, video_id)\n\n        if '>File Not Found<' in orig_webpage:\n            raise ExtractorError(\n                'Video %s does not exist' % video_id, expected=True)\n\n        fields = re.findall(r'''(?x)<input\\s+\n            type=\"(?:hidden|submit)\"\\s+\n            name=\"([^\"]+)\"\\s+\n            (?:id=\"[^\"]+\"\\s+)?\n            value=\"([^\"]*)\"\n            ''', orig_webpage)\n\n        self._sleep(12, video_id)\n\n        webpage = self._download_webpage(\n            url, video_id, data=urlencode_postdata(fields), headers={\n                b'Content-Type': b'application/x-www-form-urlencoded',\n            })\n\n        try:\n            title = self._html_search_regex(\n                r'<h1[^>]*>([^<]+)<', webpage, 'title')\n            video_url = self._search_regex(\n                r'file:\\s*\"([^\"]+)\"', webpage, 'video URL')\n        except ExtractorError:\n            message = self._html_search_regex(\n                r'(?s)<div[^>]+class=([\"\\']).*?msgboxinfo.*?\\1[^>]*>(?P<message>.+?)</div>',\n                webpage, 'message', default=None, group='message')\n            if message:\n                raise ExtractorError('%s said: %s' % (self.IE_NAME, message), expected=True)\n            raise\n        thumbnail = self._search_regex(\n            r'image:\\s*\"([^\"]+)\"', webpage, 'thumbnail URL', fatal=False)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'url': video_url,\n            'thumbnail': thumbnail,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "streamcloud.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/streamcloud.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}