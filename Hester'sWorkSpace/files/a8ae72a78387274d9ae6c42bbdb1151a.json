{"author": "HelloZeroNet", "code": "\n This file is part of pyasn1 software.\n\n Copyright (c) 2005-2017, Ilya Etingof <etingof@gmail.com>\n License: http://pyasn1.sf.net/license.html\n\nimport logging\nfrom pyasn1.compat.octets import octs2ints\nfrom pyasn1 import error\nfrom pyasn1 import __version__\n\n__all__ = ['Debug', 'setLogger', 'hexdump']\n\nflagNone = 0x0000\nflagEncoder = 0x0001\nflagDecoder = 0x0002\nflagAll = 0xffff\n\nflagMap = {\n    'encoder': flagEncoder,\n    'decoder': flagDecoder,\n    'all': flagAll\n}\n\n\nclass Printer(object):\n     noinspection PyShadowingNames\n    def __init__(self, logger=None, handler=None, formatter=None):\n        if logger is None:\n            logger = logging.getLogger('pyasn1')\n        logger.setLevel(logging.DEBUG)\n        if handler is None:\n            handler = logging.StreamHandler()\n        if formatter is None:\n            formatter = logging.Formatter('%(asctime)s %(name)s: %(message)s')\n        handler.setFormatter(formatter)\n        handler.setLevel(logging.DEBUG)\n        logger.addHandler(handler)\n        self.__logger = logger\n\n    def __call__(self, msg):\n        self.__logger.debug(msg)\n\n    def __str__(self):\n        return '<python built-in logging>'\n\n\nif hasattr(logging, 'NullHandler'):\n    NullHandler = logging.NullHandler\nelse:\n     Python 2.6 and older\n    class NullHandler(logging.Handler):\n        def emit(self, record):\n            pass\n\n\nclass Debug(object):\n    defaultPrinter = None\n\n    def __init__(self, *flags, **options):\n        self._flags = flagNone\n        if options.get('printer') is not None:\n            self._printer = options.get('printer')\n        elif self.defaultPrinter is not None:\n            self._printer = self.defaultPrinter\n        if 'loggerName' in options:\n             route our logs to parent logger\n            self._printer = Printer(\n                logger=logging.getLogger(options['loggerName']),\n                handler=NullHandler()\n            )\n        else:\n            self._printer = Printer()\n        self('running pyasn1 version %s' % __version__)\n        for f in flags:\n            inverse = f and f[0] in ('!', '~')\n            if inverse:\n                f = f[1:]\n            try:\n                if inverse:\n                    self._flags &= ~flagMap[f]\n                else:\n                    self._flags |= flagMap[f]\n            except KeyError:\n                raise error.PyAsn1Error('bad debug flag %s' % f)\n\n            self('debug category \\'%s\\' %s' % (f, inverse and 'disabled' or 'enabled'))\n\n    def __str__(self):\n        return 'logger %s, flags %x' % (self._printer, self._flags)\n\n    def __call__(self, msg):\n        self._printer(msg)\n\n    def __and__(self, flag):\n        return self._flags & flag\n\n    def __rand__(self, flag):\n        return flag & self._flags\n\n\nlogger = 0\n\n\ndef setLogger(l):\n    global logger\n    logger = l\n\n\ndef hexdump(octets):\n    return ' '.join(\n        ['%s%.2X' % (n % 16 == 0 and ('\\n%.5d: ' % n) or '', x)\n         for n, x in zip(range(len(octets)), octs2ints(octets))]\n    )\n\n\nclass Scope(object):\n    def __init__(self):\n        self._list = []\n\n    def __str__(self): return '.'.join(self._list)\n\n    def push(self, token):\n        self._list.append(token)\n\n    def pop(self):\n        return self._list.pop()\n\n\nscope = Scope()\n", "comments": "     this file part pyasn1 software        copyright (c) 2005 2017  ilya etingof  etingof gmail com     license  http   pyasn1 sf net license html       noinspection pyshadowingnames    python 2 6 older    route logs parent logger ", "content": "#\n# This file is part of pyasn1 software.\n#\n# Copyright (c) 2005-2017, Ilya Etingof <etingof@gmail.com>\n# License: http://pyasn1.sf.net/license.html\n#\nimport logging\nfrom pyasn1.compat.octets import octs2ints\nfrom pyasn1 import error\nfrom pyasn1 import __version__\n\n__all__ = ['Debug', 'setLogger', 'hexdump']\n\nflagNone = 0x0000\nflagEncoder = 0x0001\nflagDecoder = 0x0002\nflagAll = 0xffff\n\nflagMap = {\n    'encoder': flagEncoder,\n    'decoder': flagDecoder,\n    'all': flagAll\n}\n\n\nclass Printer(object):\n    # noinspection PyShadowingNames\n    def __init__(self, logger=None, handler=None, formatter=None):\n        if logger is None:\n            logger = logging.getLogger('pyasn1')\n        logger.setLevel(logging.DEBUG)\n        if handler is None:\n            handler = logging.StreamHandler()\n        if formatter is None:\n            formatter = logging.Formatter('%(asctime)s %(name)s: %(message)s')\n        handler.setFormatter(formatter)\n        handler.setLevel(logging.DEBUG)\n        logger.addHandler(handler)\n        self.__logger = logger\n\n    def __call__(self, msg):\n        self.__logger.debug(msg)\n\n    def __str__(self):\n        return '<python built-in logging>'\n\n\nif hasattr(logging, 'NullHandler'):\n    NullHandler = logging.NullHandler\nelse:\n    # Python 2.6 and older\n    class NullHandler(logging.Handler):\n        def emit(self, record):\n            pass\n\n\nclass Debug(object):\n    defaultPrinter = None\n\n    def __init__(self, *flags, **options):\n        self._flags = flagNone\n        if options.get('printer') is not None:\n            self._printer = options.get('printer')\n        elif self.defaultPrinter is not None:\n            self._printer = self.defaultPrinter\n        if 'loggerName' in options:\n            # route our logs to parent logger\n            self._printer = Printer(\n                logger=logging.getLogger(options['loggerName']),\n                handler=NullHandler()\n            )\n        else:\n            self._printer = Printer()\n        self('running pyasn1 version %s' % __version__)\n        for f in flags:\n            inverse = f and f[0] in ('!', '~')\n            if inverse:\n                f = f[1:]\n            try:\n                if inverse:\n                    self._flags &= ~flagMap[f]\n                else:\n                    self._flags |= flagMap[f]\n            except KeyError:\n                raise error.PyAsn1Error('bad debug flag %s' % f)\n\n            self('debug category \\'%s\\' %s' % (f, inverse and 'disabled' or 'enabled'))\n\n    def __str__(self):\n        return 'logger %s, flags %x' % (self._printer, self._flags)\n\n    def __call__(self, msg):\n        self._printer(msg)\n\n    def __and__(self, flag):\n        return self._flags & flag\n\n    def __rand__(self, flag):\n        return flag & self._flags\n\n\nlogger = 0\n\n\ndef setLogger(l):\n    global logger\n    logger = l\n\n\ndef hexdump(octets):\n    return ' '.join(\n        ['%s%.2X' % (n % 16 == 0 and ('\\n%.5d: ' % n) or '', x)\n         for n, x in zip(range(len(octets)), octs2ints(octets))]\n    )\n\n\nclass Scope(object):\n    def __init__(self):\n        self._list = []\n\n    def __str__(self): return '.'.join(self._list)\n\n    def push(self, token):\n        self._list.append(token)\n\n    def pop(self):\n        return self._list.pop()\n\n\nscope = Scope()\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "debug.py", "id": "a8ae72a78387274d9ae6c42bbdb1151a", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/lib/pyasn1/debug.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}