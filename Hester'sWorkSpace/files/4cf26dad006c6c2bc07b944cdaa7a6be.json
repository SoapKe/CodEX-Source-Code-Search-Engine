{"author": "docker", "code": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\n\nimport logging\n\nfrom docker.errors import NotFound\nfrom docker.utils import version_lt\n\nfrom .config import ConfigurationError\nfrom .config.types import VolumeSpec\nfrom .const import LABEL_PROJECT\nfrom .const import LABEL_VOLUME\n\nlog = logging.getLogger(__name__)\n\n\nclass Volume(object):\n    def __init__(self, client, project, name, driver=None, driver_opts=None,\n                 external=False, labels=None, custom_name=False):\n        self.client = client\n        self.project = project\n        self.name = name\n        self.driver = driver\n        self.driver_opts = driver_opts\n        self.external = external\n        self.labels = labels\n        self.custom_name = custom_name\n\n    def create(self):\n        return self.client.create_volume(\n            self.full_name, self.driver, self.driver_opts, labels=self._labels\n        )\n\n    def remove(self):\n        if self.external:\n            log.info(\"Volume %s is external, skipping\", self.full_name)\n            return\n        log.info(\"Removing volume %s\", self.full_name)\n        return self.client.remove_volume(self.full_name)\n\n    def inspect(self):\n        return self.client.inspect_volume(self.full_name)\n\n    def exists(self):\n        try:\n            self.inspect()\n        except NotFound:\n            return False\n        return True\n\n    @property\n    def full_name(self):\n        if self.custom_name:\n            return self.name\n        return '{0}_{1}'.format(self.project, self.name)\n\n    @property\n    def _labels(self):\n        if version_lt(self.client._version, '1.23'):\n            return None\n        labels = self.labels.copy() if self.labels else {}\n        labels.update({\n            LABEL_PROJECT: self.project,\n            LABEL_VOLUME: self.name,\n        })\n        return labels\n\n\nclass ProjectVolumes(object):\n\n    def __init__(self, volumes):\n        self.volumes = volumes\n\n    @classmethod\n    def from_config(cls, name, config_data, client):\n        config_volumes = config_data.volumes or {}\n        volumes = {\n            vol_name: Volume(\n                client=client,\n                project=name,\n                name=data.get('name', vol_name),\n                driver=data.get('driver'),\n                driver_opts=data.get('driver_opts'),\n                custom_name=data.get('name') is not None,\n                labels=data.get('labels'),\n                external=bool(data.get('external', False))\n            )\n            for vol_name, data in config_volumes.items()\n        }\n        return cls(volumes)\n\n    def remove(self):\n        for volume in self.volumes.values():\n            try:\n                volume.remove()\n            except NotFound:\n                log.warn(\"Volume %s not found.\", volume.full_name)\n\n    def initialize(self):\n        try:\n            for volume in self.volumes.values():\n                volume_exists = volume.exists()\n                if volume.external:\n                    log.debug(\n                        'Volume {0} declared as external. No new '\n                        'volume will be created.'.format(volume.name)\n                    )\n                    if not volume_exists:\n                        raise ConfigurationError(\n                            'Volume {name} declared as external, but could'\n                            ' not be found. Please create the volume manually'\n                            ' using `{command}{name}` and try again.'.format(\n                                name=volume.full_name,\n                                command='docker volume create --name='\n                            )\n                        )\n                    continue\n\n                if not volume_exists:\n                    log.info(\n                        'Creating volume \"{0}\" with {1} driver'.format(\n                            volume.full_name, volume.driver or 'default'\n                        )\n                    )\n                    volume.create()\n                else:\n                    driver = volume.inspect()['Driver']\n                    if volume.driver is not None and driver != volume.driver:\n                        raise ConfigurationError(\n                            'Configuration for volume {0} specifies driver '\n                            '{1}, but a volume with the same name uses a '\n                            'different driver ({3}). If you wish to use the '\n                            'new configuration, please remove the existing '\n                            'volume \"{2}\" first:\\n'\n                            '$ docker volume rm {2}'.format(\n                                volume.name, volume.driver, volume.full_name,\n                                volume.inspect()['Driver']\n                            )\n                        )\n        except NotFound:\n            raise ConfigurationError(\n                'Volume %s specifies nonexistent driver %s' % (volume.name, volume.driver)\n            )\n\n    def namespace_spec(self, volume_spec):\n        if not volume_spec.is_named_volume:\n            return volume_spec\n\n        if isinstance(volume_spec, VolumeSpec):\n            volume = self.volumes[volume_spec.external]\n            return volume_spec._replace(external=volume.full_name)\n        else:\n            volume_spec.source = self.volumes[volume_spec.source].full_name\n            return volume_spec\n", "comments": "", "content": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\n\nimport logging\n\nfrom docker.errors import NotFound\nfrom docker.utils import version_lt\n\nfrom .config import ConfigurationError\nfrom .config.types import VolumeSpec\nfrom .const import LABEL_PROJECT\nfrom .const import LABEL_VOLUME\n\nlog = logging.getLogger(__name__)\n\n\nclass Volume(object):\n    def __init__(self, client, project, name, driver=None, driver_opts=None,\n                 external=False, labels=None, custom_name=False):\n        self.client = client\n        self.project = project\n        self.name = name\n        self.driver = driver\n        self.driver_opts = driver_opts\n        self.external = external\n        self.labels = labels\n        self.custom_name = custom_name\n\n    def create(self):\n        return self.client.create_volume(\n            self.full_name, self.driver, self.driver_opts, labels=self._labels\n        )\n\n    def remove(self):\n        if self.external:\n            log.info(\"Volume %s is external, skipping\", self.full_name)\n            return\n        log.info(\"Removing volume %s\", self.full_name)\n        return self.client.remove_volume(self.full_name)\n\n    def inspect(self):\n        return self.client.inspect_volume(self.full_name)\n\n    def exists(self):\n        try:\n            self.inspect()\n        except NotFound:\n            return False\n        return True\n\n    @property\n    def full_name(self):\n        if self.custom_name:\n            return self.name\n        return '{0}_{1}'.format(self.project, self.name)\n\n    @property\n    def _labels(self):\n        if version_lt(self.client._version, '1.23'):\n            return None\n        labels = self.labels.copy() if self.labels else {}\n        labels.update({\n            LABEL_PROJECT: self.project,\n            LABEL_VOLUME: self.name,\n        })\n        return labels\n\n\nclass ProjectVolumes(object):\n\n    def __init__(self, volumes):\n        self.volumes = volumes\n\n    @classmethod\n    def from_config(cls, name, config_data, client):\n        config_volumes = config_data.volumes or {}\n        volumes = {\n            vol_name: Volume(\n                client=client,\n                project=name,\n                name=data.get('name', vol_name),\n                driver=data.get('driver'),\n                driver_opts=data.get('driver_opts'),\n                custom_name=data.get('name') is not None,\n                labels=data.get('labels'),\n                external=bool(data.get('external', False))\n            )\n            for vol_name, data in config_volumes.items()\n        }\n        return cls(volumes)\n\n    def remove(self):\n        for volume in self.volumes.values():\n            try:\n                volume.remove()\n            except NotFound:\n                log.warn(\"Volume %s not found.\", volume.full_name)\n\n    def initialize(self):\n        try:\n            for volume in self.volumes.values():\n                volume_exists = volume.exists()\n                if volume.external:\n                    log.debug(\n                        'Volume {0} declared as external. No new '\n                        'volume will be created.'.format(volume.name)\n                    )\n                    if not volume_exists:\n                        raise ConfigurationError(\n                            'Volume {name} declared as external, but could'\n                            ' not be found. Please create the volume manually'\n                            ' using `{command}{name}` and try again.'.format(\n                                name=volume.full_name,\n                                command='docker volume create --name='\n                            )\n                        )\n                    continue\n\n                if not volume_exists:\n                    log.info(\n                        'Creating volume \"{0}\" with {1} driver'.format(\n                            volume.full_name, volume.driver or 'default'\n                        )\n                    )\n                    volume.create()\n                else:\n                    driver = volume.inspect()['Driver']\n                    if volume.driver is not None and driver != volume.driver:\n                        raise ConfigurationError(\n                            'Configuration for volume {0} specifies driver '\n                            '{1}, but a volume with the same name uses a '\n                            'different driver ({3}). If you wish to use the '\n                            'new configuration, please remove the existing '\n                            'volume \"{2}\" first:\\n'\n                            '$ docker volume rm {2}'.format(\n                                volume.name, volume.driver, volume.full_name,\n                                volume.inspect()['Driver']\n                            )\n                        )\n        except NotFound:\n            raise ConfigurationError(\n                'Volume %s specifies nonexistent driver %s' % (volume.name, volume.driver)\n            )\n\n    def namespace_spec(self, volume_spec):\n        if not volume_spec.is_named_volume:\n            return volume_spec\n\n        if isinstance(volume_spec, VolumeSpec):\n            volume = self.volumes[volume_spec.external]\n            return volume_spec._replace(external=volume.full_name)\n        else:\n            volume_spec.source = self.volumes[volume_spec.source].full_name\n            return volume_spec\n", "description": "Define and run multi-container applications with Docker", "file_name": "volume.py", "id": "4cf26dad006c6c2bc07b944cdaa7a6be", "language": "Python", "project_name": "compose", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/docker-compose/docker-compose-867ad15/compose/volume.py", "save_time": "", "source": "", "update_at": "2018-03-13T22:03:14Z", "url": "https://github.com/docker/compose", "wiki": false}