{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    get_element_by_id,\n)\n\n\nclass SlideshareIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?slideshare\\.net/[^/]+?/(?P<title>.+?)($|\\?)'\n\n    _TEST = {\n        'url': 'http://www.slideshare.net/Dataversity/keynote-presentation-managing-scale-and-complexity',\n        'info_dict': {\n            'id': '25665706',\n            'ext': 'mp4',\n            'title': 'Managing Scale and Complexity',\n            'description': 'This was a keynote presentation at the NoSQL Now! 2013 Conference & Expo (http://www.nosqlnow.com). This presentation was given by Adrian Cockcroft from Netflix.',\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        page_title = mobj.group('title')\n        webpage = self._download_webpage(url, page_title)\n        slideshare_obj = self._search_regex(\n            r'\\$\\.extend\\(.*?slideshare_object,\\s*(\\{.*?\\})\\);',\n            webpage, 'slideshare object')\n        info = json.loads(slideshare_obj)\n        if info['slideshow']['type'] != 'video':\n            raise ExtractorError('Webpage type is \"%s\": only video extraction is supported for Slideshare' % info['slideshow']['type'], expected=True)\n\n        doc = info['doc']\n        bucket = info['jsplayer']['video_bucket']\n        ext = info['jsplayer']['video_extension']\n        video_url = compat_urlparse.urljoin(bucket, doc + '-SD.' + ext)\n        description = get_element_by_id('slideshow-description-paragraph', webpage) or self._html_search_regex(\n            r'(?s)<p[^>]+itemprop=\"description\"[^>]*>(.+?)</p>', webpage,\n            'description', fatal=False)\n\n        return {\n            '_type': 'video',\n            'id': info['slideshow']['id'],\n            'title': info['slideshow']['title'],\n            'ext': ext,\n            'url': video_url,\n            'thumbnail': info['slideshow']['pin_image_url'],\n            'description': description.strip() if description else None,\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    get_element_by_id,\n)\n\n\nclass SlideshareIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?slideshare\\.net/[^/]+?/(?P<title>.+?)($|\\?)'\n\n    _TEST = {\n        'url': 'http://www.slideshare.net/Dataversity/keynote-presentation-managing-scale-and-complexity',\n        'info_dict': {\n            'id': '25665706',\n            'ext': 'mp4',\n            'title': 'Managing Scale and Complexity',\n            'description': 'This was a keynote presentation at the NoSQL Now! 2013 Conference & Expo (http://www.nosqlnow.com). This presentation was given by Adrian Cockcroft from Netflix.',\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        page_title = mobj.group('title')\n        webpage = self._download_webpage(url, page_title)\n        slideshare_obj = self._search_regex(\n            r'\\$\\.extend\\(.*?slideshare_object,\\s*(\\{.*?\\})\\);',\n            webpage, 'slideshare object')\n        info = json.loads(slideshare_obj)\n        if info['slideshow']['type'] != 'video':\n            raise ExtractorError('Webpage type is \"%s\": only video extraction is supported for Slideshare' % info['slideshow']['type'], expected=True)\n\n        doc = info['doc']\n        bucket = info['jsplayer']['video_bucket']\n        ext = info['jsplayer']['video_extension']\n        video_url = compat_urlparse.urljoin(bucket, doc + '-SD.' + ext)\n        description = get_element_by_id('slideshow-description-paragraph', webpage) or self._html_search_regex(\n            r'(?s)<p[^>]+itemprop=\"description\"[^>]*>(.+?)</p>', webpage,\n            'description', fatal=False)\n\n        return {\n            '_type': 'video',\n            'id': info['slideshow']['id'],\n            'title': info['slideshow']['title'],\n            'ext': ext,\n            'url': video_url,\n            'thumbnail': info['slideshow']['pin_image_url'],\n            'description': description.strip() if description else None,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "slideshare.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/slideshare.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}