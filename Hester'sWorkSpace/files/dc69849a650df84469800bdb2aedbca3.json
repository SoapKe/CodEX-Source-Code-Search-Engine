{"author": "keon", "code": "\"\"\"\nGiven two sparse matrices A and B, return the result of AB.\n\nYou may assume that A's column number is equal to B's row number.\n\nExample:\n\nA[\n  [ 1, 0, 0],\n  [-1, 0, 3]\n]\n\nB[\n  [ 7, 0, 0 ],\n  [ 0, 0, 0 ],\n  [ 0, 0, 1 ]\n]\n\n\n  ||||||||||||||\n\"\"\"\n\n\n# Python solution without table (~156ms):\ndef multiply(self, A, B):\n \"\"\"\n :type A: List[List[int]]\n :type B: List[List[int]]\n :rtype: List[List[int]]\n \"\"\"\n if A is None or B is None: return None\n m, n, llen(A), len(A[0]), len(B[0])\n if len(B) != n:\n  raise Exception(\"A's column number must be equal to B's row number.\")\n C[[0 for _ in range(l)] for _ in range(m)]\n for i, row in enumerate(A):\n  for k, eleA in enumerate(row):\nif eleA:\n for j, eleB in enumerate(B[k]):  if eleB: C[i][j] += eleA * eleB\n return C\n\n\n# Python solution with only one table for B (~196ms):\ndef multiply(self, A, B):\n \"\"\"\n :type A: List[List[int]]\n :type B: List[List[int]]\n :rtype: List[List[int]]\n \"\"\"\n if A is None or B is None: return None\n m, n, llen(A), len(A[0]), len(B[0])\n if len(B) != n:\n  raise Exception(\"A's column number must be equal to B's row number.\")\n C[[0 for _ in range(l)] for _ in range(m)]\n tableB{}\n for k, row in enumerate(B):\n  tableB[k]{}\n  for j, eleB in enumerate(row):\nif eleB: tableB[k][j]eleB\n for i, row in enumerate(A):\n  for k, eleA in enumerate(row):\nif eleA:\n for j, eleB in tableB[k].iteritems():  C[i][j] += eleA * eleB\n return C\n\n# Python solution with two tables (~196ms):\ndef multiply(self, A, B):\n \"\"\"\n :type A: List[List[int]]\n :type B: List[List[int]]\n :rtype: List[List[int]]\n \"\"\"\n if A is None or B is None: return None\n m, nlen(A), len(A[0])\n if len(B) != n:\n  raise Exception(\"A's column number must be equal to B's row number.\")\n llen(B[0])\n table_A, table_B{}, {}\n for i, row in enumerate(A):\n  for j, ele in enumerate(row):\nif ele:\n if i not in table_A: table_A[i]{}\n table_A[i][j]ele\n for i, row in enumerate(B):\n  for j, ele in enumerate(row):\nif ele:\n if i not in table_B: table_B[i]{}\n table_B[i][j]ele\n C[[0 for j in range(l)] for i in range(m)]\n for i in table_A:\n  for k in table_A[i]:\nif k not in table_B: continue\nfor j in table_B[k]:\n C[i][j] += table_A[i][k] * table_B[k][j]\n return C\n", "comments": "    given two sparse matrices a b  return result ab   you may assume a column number equal b row number   example   a         1  0  0       1  0  3     b         7  0  0        0  0  0        0  0  1               1 0 0       7 0 0        7 0 0   ab      1 0 3   x   0 0 0        7 0 3                       0 0 1           python solution without table ( 156ms)  def multiply(self  a  b)               type a  list list int        type b  list list int        rtype  list list int               a none b none  return none      n  l   len(a)  len(a 0 )  len(b 0 )     len(b)    n          raise exception( a column number must equal b row number  )     c     0   range(l)    range(m)       row enumerate(a)          k  elea enumerate(row)              elea                  j  eleb enumerate(b k )                      eleb  c  j     elea   eleb     return c     python solution one table b ( 196ms)  def multiply(self  a  b)               type a  list list int        type b  list list int        rtype  list list int               a none b none  return none      n  l   len(a)  len(a 0 )  len(b 0 )     len(b)    n          raise exception( a column number must equal b row number  )     c     0   range(l)    range(m)      tableb          k  row enumerate(b)          tableb k               j  eleb enumerate(row)              eleb  tableb k  j    eleb      row enumerate(a)          k  elea enumerate(row)              elea                  j  eleb tableb k  iteritems()                      c  j     elea   eleb     return c    python solution two tables ( 196ms)  def multiply(self  a  b)               type a  list list int        type b  list list int        rtype  list list int              python solution without table ( 156ms)     python solution one table b ( 196ms)     python solution two tables ( 196ms)  ", "content": "\"\"\"\nGiven two sparse matrices A and B, return the result of AB.\n\nYou may assume that A's column number is equal to B's row number.\n\nExample:\n\nA = [\n  [ 1, 0, 0],\n  [-1, 0, 3]\n]\n\nB = [\n  [ 7, 0, 0 ],\n  [ 0, 0, 0 ],\n  [ 0, 0, 1 ]\n]\n\n\n     |  1 0 0 |   | 7 0 0 |   |  7 0 0 |\nAB = | -1 0 3 | x | 0 0 0 | = | -7 0 3 |\n                  | 0 0 1 |\n\"\"\"\n\n\n# Python solution without table (~156ms):\ndef multiply(self, A, B):\n    \"\"\"\n    :type A: List[List[int]]\n    :type B: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    if A is None or B is None: return None\n    m, n, l = len(A), len(A[0]), len(B[0])\n    if len(B) != n:\n        raise Exception(\"A's column number must be equal to B's row number.\")\n    C = [[0 for _ in range(l)] for _ in range(m)]\n    for i, row in enumerate(A):\n        for k, eleA in enumerate(row):\n            if eleA:\n                for j, eleB in enumerate(B[k]):\n                    if eleB: C[i][j] += eleA * eleB\n    return C\n\n\n# Python solution with only one table for B (~196ms):\ndef multiply(self, A, B):\n    \"\"\"\n    :type A: List[List[int]]\n    :type B: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    if A is None or B is None: return None\n    m, n, l = len(A), len(A[0]), len(B[0])\n    if len(B) != n:\n        raise Exception(\"A's column number must be equal to B's row number.\")\n    C = [[0 for _ in range(l)] for _ in range(m)]\n    tableB = {}\n    for k, row in enumerate(B):\n        tableB[k] = {}\n        for j, eleB in enumerate(row):\n            if eleB: tableB[k][j] = eleB\n    for i, row in enumerate(A):\n        for k, eleA in enumerate(row):\n            if eleA:\n                for j, eleB in tableB[k].iteritems():\n                    C[i][j] += eleA * eleB\n    return C\n\n# Python solution with two tables (~196ms):\ndef multiply(self, A, B):\n    \"\"\"\n    :type A: List[List[int]]\n    :type B: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    if A is None or B is None: return None\n    m, n = len(A), len(A[0])\n    if len(B) != n:\n        raise Exception(\"A's column number must be equal to B's row number.\")\n    l = len(B[0])\n    table_A, table_B = {}, {}\n    for i, row in enumerate(A):\n        for j, ele in enumerate(row):\n            if ele:\n                if i not in table_A: table_A[i] = {}\n                table_A[i][j] = ele\n    for i, row in enumerate(B):\n        for j, ele in enumerate(row):\n            if ele:\n                if i not in table_B: table_B[i] = {}\n                table_B[i][j] = ele\n    C = [[0 for j in range(l)] for i in range(m)]\n    for i in table_A:\n        for k in table_A[i]:\n            if k not in table_B: continue\n            for j in table_B[k]:\n                C[i][j] += table_A[i][k] * table_B[k][j]\n    return C\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "sparse_mul.py", "id": "dc69849a650df84469800bdb2aedbca3", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/keon-algorithms/keon-algorithms-ea43887/matrix/sparse_mul.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:53:29Z", "url": "https://github.com/keon/algorithms", "wiki": true}