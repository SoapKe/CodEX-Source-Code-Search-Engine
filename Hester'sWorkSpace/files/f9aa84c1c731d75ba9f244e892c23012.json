{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom django.core.urlresolvers import reverse\n\nfrom sentry.models import Project, ProjectStatus, DeletedProject\nfrom sentry.testutils import TestCase, PermissionTestCase\n\n\nclass RemoveProjectPermissionTest(PermissionTestCase):\n    def setUp(self):\n        super(RemoveProjectPermissionTest, self).setUp()\n        self.project = self.create_project(teams=[self.team])\n        self.path = reverse(\n            'sentry-remove-project', args=[self.organization.slug, self.project.slug]\n        )\n\n    def test_teamless_admin_cannot_load(self):\n        self.assert_teamless_admin_cannot_access(self.path)\n\n    def test_team_admin_can_load(self):\n        self.assert_team_admin_can_access(self.path)\n\n    def test_owner_can_load(self):\n        self.assert_owner_can_access(self.path)\n\n\nclass RemoveProjectTest(TestCase):\n    def setUp(self):\n        super(RemoveProjectTest, self).setUp()\n        self.owner = self.create_user(email='example@example.com', is_superuser=False)\n        organization = self.create_organization(owner=self.owner)\n        self.team = self.create_team(name='bar', organization=organization)\n        self.project = self.create_project(name='bar', teams=[self.team])\n        self.path = reverse('sentry-remove-project', args=[organization.slug, self.project.slug])\n\n    def test_requires_authentication(self):\n        self.assertRequiresAuthentication(self.path, 'POST')\n\n    def test_renders_template_with_get(self):\n        self.login_as(self.owner)\n\n        resp = self.client.get(self.path)\n        assert resp.status_code == 200\n        self.assertTemplateUsed(resp, 'sentry/projects/remove.html')\n        assert resp.context['project'] == self.project\n\n    def test_deletion_flow(self):\n        self.login_as(self.owner)\n\n        resp = self.client.post(self.path, {})\n        assert resp.status_code == 302\n        assert Project.objects.get(id=self.project.id).status == ProjectStatus.PENDING_DELETION\n\n        deleted_project = DeletedProject.objects.get(slug=self.project.slug)\n        self.assert_valid_deleted_log(deleted_project, self.project)\n", "comments": "", "content": "from __future__ import absolute_import\n\nfrom django.core.urlresolvers import reverse\n\nfrom sentry.models import Project, ProjectStatus, DeletedProject\nfrom sentry.testutils import TestCase, PermissionTestCase\n\n\nclass RemoveProjectPermissionTest(PermissionTestCase):\n    def setUp(self):\n        super(RemoveProjectPermissionTest, self).setUp()\n        self.project = self.create_project(teams=[self.team])\n        self.path = reverse(\n            'sentry-remove-project', args=[self.organization.slug, self.project.slug]\n        )\n\n    def test_teamless_admin_cannot_load(self):\n        self.assert_teamless_admin_cannot_access(self.path)\n\n    def test_team_admin_can_load(self):\n        self.assert_team_admin_can_access(self.path)\n\n    def test_owner_can_load(self):\n        self.assert_owner_can_access(self.path)\n\n\nclass RemoveProjectTest(TestCase):\n    def setUp(self):\n        super(RemoveProjectTest, self).setUp()\n        self.owner = self.create_user(email='example@example.com', is_superuser=False)\n        organization = self.create_organization(owner=self.owner)\n        self.team = self.create_team(name='bar', organization=organization)\n        self.project = self.create_project(name='bar', teams=[self.team])\n        self.path = reverse('sentry-remove-project', args=[organization.slug, self.project.slug])\n\n    def test_requires_authentication(self):\n        self.assertRequiresAuthentication(self.path, 'POST')\n\n    def test_renders_template_with_get(self):\n        self.login_as(self.owner)\n\n        resp = self.client.get(self.path)\n        assert resp.status_code == 200\n        self.assertTemplateUsed(resp, 'sentry/projects/remove.html')\n        assert resp.context['project'] == self.project\n\n    def test_deletion_flow(self):\n        self.login_as(self.owner)\n\n        resp = self.client.post(self.path, {})\n        assert resp.status_code == 302\n        assert Project.objects.get(id=self.project.id).status == ProjectStatus.PENDING_DELETION\n\n        deleted_project = DeletedProject.objects.get(slug=self.project.slug)\n        self.assert_valid_deleted_log(deleted_project, self.project)\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_remove_project.py", "id": "f9aa84c1c731d75ba9f244e892c23012", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/web/frontend/test_remove_project.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}