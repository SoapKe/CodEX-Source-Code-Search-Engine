{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom __future__ import print_function\nimport logging\nimport math\nimport os\nimport os.path\nimport subprocess\nimport time\nimport traceback\n\ntry: \n    from .. escpos import *\n    from .. escpos.exceptions import *\n    from .. escpos.printer import Usb\nexcept ImportError:\n    escpos = printer = None\n\ntry:\n    from queue import Queue\nexcept ImportError:\n    from Queue import Queue \nfrom threading import Thread, Lock\n\ntry:\n    import usb.core\nexcept ImportError:\n    usb = None\n\nfrom odoo import http, _\n\nfrom odoo.addons.hw_proxy.controllers import main as hw_proxy\n\n_logger = logging.getLogger(__name__)\n\n# workaround https://bugs.launchpad.net/openobject-server/+bug/947231\n\nfrom datetime import datetime\ndatetime.strptime('2012-01-01', '%Y-%m-%d')\n\nclass EscposDriver(Thread):\n    def __init__(self):\n        Thread.__init__(self)\n        self.queue = Queue()\n        self.lock  = Lock()\n        self.status = {'status':'connecting', 'messages':[]}\n\n    def connected_usb_devices(self):\n        connected = []\n\n        \n        \n        class FindUsbClass(object):\n            def __init__(self, usb_class):\n                self._class = usb_class\n            def __call__(self, device):\n                \n                if device.bDeviceClass == self._class:\n                    return True\n                \n                \n                for cfg in device:\n                    intf = usb.util.find_descriptor(cfg, bInterfaceClass=self._class)\n\n                    if intf is not None:\n                        return True\n\n                return False\n\n        printers = usb.core.find(find_all=True, custom_match=FindUsbClass(7))\n\n        \n        \n        \n        if not printers:\n            printers = usb.core.find(find_all=True, idVendor=0x04b8)\n        \n        if not printers:\n            printers = usb.core.find(find_all=True, idVendor=0x0519)\n\n        for printer in printers:\n            try:\n                description = usb.util.get_string(printer, 256, printer.iManufacturer) + \" \" + usb.util.get_string(printer, 256, printer.iProduct)\n            except Exception as e:\n                _logger.error(\"Can not get printer description: %s\" % e)\n                description = 'Unknown printer'\n            connected.append({\n                'vendor': printer.idVendor,\n                'product': printer.idProduct,\n                'name': description\n            })\n\n        return connected\n\n    def lockedstart(self):\n        with self.lock:\n            if not self.isAlive():\n                self.daemon = True\n                self.start()\n    \n    def get_escpos_printer(self):\n  \n        printers = self.connected_usb_devices()\n        if len(printers) > 0:\n            print_dev = Usb(printers[0]['vendor'], printers[0]['product'])\n            self.set_status(\n                'connected',\n                \"Connected to %s (in=0x%02x,out=0x%02x)\" % (printers[0]['name'], print_dev.in_ep, print_dev.out_ep)\n            )\n            return print_dev\n        else:\n            self.set_status('disconnected','Printer Not Found')\n            return None\n\n    def get_status(self):\n        self.push_task('status')\n        return self.status\n\n    def open_cashbox(self,printer):\n        printer.cashdraw(2)\n        printer.cashdraw(5)\n\n    def set_status(self, status, message = None):\n        _logger.info(status+' : '+ (message or 'no message'))\n        if status == self.status['status']:\n            if message != None and (len(self.status['messages']) == 0 or message != self.status['messages'][-1]):\n                self.status['messages'].append(message)\n        else:\n            self.status['status'] = status\n            if message:\n                self.status['messages'] = [message]\n            else:\n                self.status['messages'] = []\n\n        if status == 'error' and message:\n            _logger.error('ESC/POS Error: %s', message)\n        elif status == 'disconnected' and message:\n            _logger.warning('ESC/POS Device Disconnected: %s', message)\n\n    def run(self):\n        printer = None\n        if not escpos:\n            _logger.error('ESC/POS cannot initialize, please verify system dependencies.')\n            return\n        while True:\n            try:\n                error = True\n                timestamp, task, data = self.queue.get(True)\n\n                printer = self.get_escpos_printer()\n\n                if printer == None:\n                    if task != 'status':\n                        self.queue.put((timestamp,task,data))\n                    error = False\n                    time.sleep(5)\n                    continue\n                elif task == 'receipt': \n                    if timestamp >= time.time() - 1 * 60 * 60:\n                        self.print_receipt_body(printer,data)\n                        printer.cut()\n                elif task == 'xml_receipt':\n                    if timestamp >= time.time() - 1 * 60 * 60:\n                        printer.receipt(data)\n                elif task == 'cashbox':\n                    if timestamp >= time.time() - 12:\n                        self.open_cashbox(printer)\n                elif task == 'printstatus':\n                    self.print_status(printer)\n                elif task == 'status':\n                    pass\n                error = False\n\n            except NoDeviceError as e:\n                print(\"No device found %s\" % e)\n            except HandleDeviceError as e:\n                print(\"Impossible to handle the device due to previous error %s\" % e)\n            except TicketNotPrinted as e:\n                print(\"The ticket does not seems to have been fully printed %s\" % e)\n            except NoStatusError as e:\n                print(\"Impossible to get the status of the printer %s\" % e)\n            except Exception as e:\n                self.set_status('error', e)\n                _logger.exception()\n            finally:\n                if error:\n                    self.queue.put((timestamp, task, data))\n                if printer:\n                    printer.close()\n\n    def push_task(self,task, data = None):\n        self.lockedstart()\n        self.queue.put((time.time(),task,data))\n\n    def print_status(self,eprint):\n        localips = ['0.0.0.0','127.0.0.1','127.0.1.1']\n        hosting_ap = os.system('pgrep hostapd') == 0\n        ssid = subprocess.check_output('iwconfig 2>&1 | grep \\'ESSID:\"\\' | sed \\'s/.*\"\\\\(.*\\\\)\"/\\\\1/\\'', shell=True).rstrip()\n        mac = subprocess.check_output('ifconfig | grep -B 1 \\'inet addr\\' | grep -o \\'HWaddr .*\\' | sed \\'s/HWaddr //\\'', shell=True).rstrip()\n        ips =  [ c.split(':')[1].split(' ')[0] for c in subprocess.check_output(\"/sbin/ifconfig\").split('\\n') if 'inet addr' in c ]\n        ips =  [ ip for ip in ips if ip not in localips ] \n        eprint.text('\\n\\n')\n        eprint.set(align='center',type='b',height=2,width=2)\n        eprint.text('PosBox Status\\n')\n        eprint.text('\\n')\n        eprint.set(align='center')\n\n        if hosting_ap:\n            eprint.text('Wireless network:\\nPosbox\\n\\n')\n        elif ssid:\n            eprint.text('Wireless network:\\n' + ssid + '\\n\\n')\n\n        if len(ips) == 0:\n            eprint.text('ERROR: Could not connect to LAN\\n\\nPlease check that the PosBox is correc-\\ntly connected with a network cable,\\n that the LAN is setup with DHCP, and\\nthat network addresses are available')\n        elif len(ips) == 1:\n            eprint.text('IP Address:\\n'+ips[0]+'\\n')\n        else:\n            eprint.text('IP Addresses:\\n')\n            for ip in ips:\n                eprint.text(ip+'\\n')\n\n        if len(ips) >= 1:\n            eprint.text('\\nMAC Address:\\n' + mac + '\\n')\n            eprint.text('\\nHomepage:\\nhttp://'+ips[0]+':8069\\n')\n\n        eprint.text('\\n\\n')\n        eprint.cut()\n\n    def print_receipt_body(self,eprint,receipt):\n\n        def check(string):\n            return string != True and bool(string) and string.strip()\n        \n        def price(amount):\n            return (\"{0:.\"+str(receipt['precision']['price'])+\"f}\").format(amount)\n        \n        def money(amount):\n            return (\"{0:.\"+str(receipt['precision']['money'])+\"f}\").format(amount)\n\n        def quantity(amount):\n            if math.floor(amount) != amount:\n                return (\"{0:.\"+str(receipt['precision']['quantity'])+\"f}\").format(amount)\n            else:\n                return str(amount)\n\n        def printline(left, right='', width=40, ratio=0.5, indent=0):\n            lwidth = int(width * ratio) \n            rwidth = width - lwidth \n            lwidth = lwidth - indent\n            \n            left = left[:lwidth]\n            if len(left) != lwidth:\n                left = left + ' ' * (lwidth - len(left))\n\n            right = right[-rwidth:]\n            if len(right) != rwidth:\n                right = ' ' * (rwidth - len(right)) + right\n\n            return ' ' * indent + left + right + '\\n'\n        \n        def print_taxes():\n            taxes = receipt['tax_details']\n            for tax in taxes:\n                eprint.text(printline(tax['tax']['name'],price(tax['amount']), width=40,ratio=0.6))\n\n        \n        if receipt['company']['logo']:\n            eprint.set(align='center')\n            eprint.print_base64_image(receipt['company']['logo'])\n            eprint.text('\\n')\n        else:\n            eprint.set(align='center',type='b',height=2,width=2)\n            eprint.text(receipt['company']['name'] + '\\n')\n\n        eprint.set(align='center',type='b')\n        if check(receipt['company']['contact_address']):\n            eprint.text(receipt['company']['contact_address'] + '\\n')\n        if check(receipt['company']['phone']):\n            eprint.text('Tel:' + receipt['company']['phone'] + '\\n')\n        if check(receipt['company']['vat']):\n            eprint.text('VAT:' + receipt['company']['vat'] + '\\n')\n        if check(receipt['company']['email']):\n            eprint.text(receipt['company']['email'] + '\\n')\n        if check(receipt['company']['website']):\n            eprint.text(receipt['company']['website'] + '\\n')\n        if check(receipt['header']):\n            eprint.text(receipt['header']+'\\n')\n        if check(receipt['cashier']):\n            eprint.text('-'*32+'\\n')\n            eprint.text('Served by '+receipt['cashier']+'\\n')\n\n        \n        eprint.text('\\n\\n')\n        eprint.set(align='center')\n        for line in receipt['orderlines']:\n            pricestr = price(line['price_display'])\n            if line['discount'] == 0 and line['unit_name'] == 'Unit(s)' and line['quantity'] == 1:\n                eprint.text(printline(line['product_name'],pricestr,ratio=0.6))\n            else:\n                eprint.text(printline(line['product_name'],ratio=0.6))\n                if line['discount'] != 0:\n                    eprint.text(printline('Discount: '+str(line['discount'])+'%', ratio=0.6, indent=2))\n                if line['unit_name'] == 'Unit(s)':\n                    eprint.text( printline( quantity(line['quantity']) + ' x ' + price(line['price']), pricestr, ratio=0.6, indent=2))\n                else:\n                    eprint.text( printline( quantity(line['quantity']) + line['unit_name'] + ' x ' + price(line['price']), pricestr, ratio=0.6, indent=2))\n\n        \n        taxincluded = True\n        if money(receipt['subtotal']) != money(receipt['total_with_tax']):\n            eprint.text(printline('','-------'));\n            eprint.text(printline(_('Subtotal'),money(receipt['subtotal']),width=40, ratio=0.6))\n            print_taxes()\n            #eprint.text(printline(_('Taxes'),money(receipt['total_tax']),width=40, ratio=0.6))\n            taxincluded = False\n\n\n        \n        eprint.text(printline('','-------'));\n        eprint.set(align='center',height=2)\n        eprint.text(printline(_('         TOTAL'),money(receipt['total_with_tax']),width=40, ratio=0.6))\n        eprint.text('\\n\\n');\n        \n        \n        eprint.set(align='center')\n        for line in receipt['paymentlines']:\n            eprint.text(printline(line['journal'], money(line['amount']), ratio=0.6))\n\n        eprint.text('\\n');\n        eprint.set(align='center',height=2)\n        eprint.text(printline(_('        CHANGE'),money(receipt['change']),width=40, ratio=0.6))\n        eprint.set(align='center')\n        eprint.text('\\n');\n\n        \n        if receipt['total_discount'] != 0:\n            eprint.text(printline(_('Discounts'),money(receipt['total_discount']),width=40, ratio=0.6))\n        if taxincluded:\n            print_taxes()\n            #eprint.text(printline(_('Taxes'),money(receipt['total_tax']),width=40, ratio=0.6))\n\n        \n        if check(receipt['footer']):\n            eprint.text('\\n'+receipt['footer']+'\\n\\n')\n        eprint.text(receipt['name']+'\\n')\n        eprint.text(      str(receipt['date']['date']).zfill(2)\n                    +'/'+ str(receipt['date']['month']+1).zfill(2)\n                    +'/'+ str(receipt['date']['year']).zfill(4)\n                    +' '+ str(receipt['date']['hour']).zfill(2)\n                    +':'+ str(receipt['date']['minute']).zfill(2) )\n\n\ndriver = EscposDriver()\n\ndriver.push_task('printstatus')\n\nhw_proxy.drivers['escpos'] = driver\n\nclass EscposProxy(hw_proxy.Proxy):\n    \n    @http.route('/hw_proxy/open_cashbox', type='json', auth='none', cors='*')\n    def open_cashbox(self):\n        _logger.info('ESC/POS: OPEN CASHBOX') \n        driver.push_task('cashbox')\n        \n    @http.route('/hw_proxy/print_receipt', type='json', auth='none', cors='*')\n    def print_receipt(self, receipt):\n        _logger.info('ESC/POS: PRINT RECEIPT') \n        driver.push_task('receipt',receipt)\n\n    @http.route('/hw_proxy/print_xml_receipt', type='json', auth='none', cors='*')\n    def print_xml_receipt(self, receipt):\n        _logger.info('ESC/POS: PRINT XML RECEIPT') \n        driver.push_task('xml_receipt',receipt)\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     pylint  disable deprecated module    workaround https   bugs launchpad net openobject server  bug 947231    related http   bugs python org issue7980    printers either define bdeviceclass 7  define one    interfaces binterfaceclass 7  this class checks     first  let check device    transverse devices look interfaces    find matching class    printers found step take    first epson star device find     epson    star    receipt header    orderlines    subtotal taxes included   eprint text(printline( ( taxes ) money(receipt  total tax  ) width 40  ratio 0 6))    total    paymentlines    extra payment info   eprint text(printline( ( taxes ) money(receipt  total tax  ) width 40  ratio 0 6))    footer ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom __future__ import print_function\nimport logging\nimport math\nimport os\nimport os.path\nimport subprocess\nimport time\nimport traceback\n\ntry: \n    from .. escpos import *\n    from .. escpos.exceptions import *\n    from .. escpos.printer import Usb\nexcept ImportError:\n    escpos = printer = None\n\ntry:\n    from queue import Queue\nexcept ImportError:\n    from Queue import Queue # pylint: disable=deprecated-module\nfrom threading import Thread, Lock\n\ntry:\n    import usb.core\nexcept ImportError:\n    usb = None\n\nfrom odoo import http, _\n\nfrom odoo.addons.hw_proxy.controllers import main as hw_proxy\n\n_logger = logging.getLogger(__name__)\n\n# workaround https://bugs.launchpad.net/openobject-server/+bug/947231\n# related to http://bugs.python.org/issue7980\nfrom datetime import datetime\ndatetime.strptime('2012-01-01', '%Y-%m-%d')\n\nclass EscposDriver(Thread):\n    def __init__(self):\n        Thread.__init__(self)\n        self.queue = Queue()\n        self.lock  = Lock()\n        self.status = {'status':'connecting', 'messages':[]}\n\n    def connected_usb_devices(self):\n        connected = []\n\n        # printers can either define bDeviceClass=7, or they can define one of\n        # their interfaces with bInterfaceClass=7. This class checks for both.\n        class FindUsbClass(object):\n            def __init__(self, usb_class):\n                self._class = usb_class\n            def __call__(self, device):\n                # first, let's check the device\n                if device.bDeviceClass == self._class:\n                    return True\n                # transverse all devices and look through their interfaces to\n                # find a matching class\n                for cfg in device:\n                    intf = usb.util.find_descriptor(cfg, bInterfaceClass=self._class)\n\n                    if intf is not None:\n                        return True\n\n                return False\n\n        printers = usb.core.find(find_all=True, custom_match=FindUsbClass(7))\n\n        # if no printers are found after this step we will take the\n        # first epson or star device we can find.\n        # epson\n        if not printers:\n            printers = usb.core.find(find_all=True, idVendor=0x04b8)\n        # star\n        if not printers:\n            printers = usb.core.find(find_all=True, idVendor=0x0519)\n\n        for printer in printers:\n            try:\n                description = usb.util.get_string(printer, 256, printer.iManufacturer) + \" \" + usb.util.get_string(printer, 256, printer.iProduct)\n            except Exception as e:\n                _logger.error(\"Can not get printer description: %s\" % e)\n                description = 'Unknown printer'\n            connected.append({\n                'vendor': printer.idVendor,\n                'product': printer.idProduct,\n                'name': description\n            })\n\n        return connected\n\n    def lockedstart(self):\n        with self.lock:\n            if not self.isAlive():\n                self.daemon = True\n                self.start()\n    \n    def get_escpos_printer(self):\n  \n        printers = self.connected_usb_devices()\n        if len(printers) > 0:\n            print_dev = Usb(printers[0]['vendor'], printers[0]['product'])\n            self.set_status(\n                'connected',\n                \"Connected to %s (in=0x%02x,out=0x%02x)\" % (printers[0]['name'], print_dev.in_ep, print_dev.out_ep)\n            )\n            return print_dev\n        else:\n            self.set_status('disconnected','Printer Not Found')\n            return None\n\n    def get_status(self):\n        self.push_task('status')\n        return self.status\n\n    def open_cashbox(self,printer):\n        printer.cashdraw(2)\n        printer.cashdraw(5)\n\n    def set_status(self, status, message = None):\n        _logger.info(status+' : '+ (message or 'no message'))\n        if status == self.status['status']:\n            if message != None and (len(self.status['messages']) == 0 or message != self.status['messages'][-1]):\n                self.status['messages'].append(message)\n        else:\n            self.status['status'] = status\n            if message:\n                self.status['messages'] = [message]\n            else:\n                self.status['messages'] = []\n\n        if status == 'error' and message:\n            _logger.error('ESC/POS Error: %s', message)\n        elif status == 'disconnected' and message:\n            _logger.warning('ESC/POS Device Disconnected: %s', message)\n\n    def run(self):\n        printer = None\n        if not escpos:\n            _logger.error('ESC/POS cannot initialize, please verify system dependencies.')\n            return\n        while True:\n            try:\n                error = True\n                timestamp, task, data = self.queue.get(True)\n\n                printer = self.get_escpos_printer()\n\n                if printer == None:\n                    if task != 'status':\n                        self.queue.put((timestamp,task,data))\n                    error = False\n                    time.sleep(5)\n                    continue\n                elif task == 'receipt': \n                    if timestamp >= time.time() - 1 * 60 * 60:\n                        self.print_receipt_body(printer,data)\n                        printer.cut()\n                elif task == 'xml_receipt':\n                    if timestamp >= time.time() - 1 * 60 * 60:\n                        printer.receipt(data)\n                elif task == 'cashbox':\n                    if timestamp >= time.time() - 12:\n                        self.open_cashbox(printer)\n                elif task == 'printstatus':\n                    self.print_status(printer)\n                elif task == 'status':\n                    pass\n                error = False\n\n            except NoDeviceError as e:\n                print(\"No device found %s\" % e)\n            except HandleDeviceError as e:\n                print(\"Impossible to handle the device due to previous error %s\" % e)\n            except TicketNotPrinted as e:\n                print(\"The ticket does not seems to have been fully printed %s\" % e)\n            except NoStatusError as e:\n                print(\"Impossible to get the status of the printer %s\" % e)\n            except Exception as e:\n                self.set_status('error', e)\n                _logger.exception()\n            finally:\n                if error:\n                    self.queue.put((timestamp, task, data))\n                if printer:\n                    printer.close()\n\n    def push_task(self,task, data = None):\n        self.lockedstart()\n        self.queue.put((time.time(),task,data))\n\n    def print_status(self,eprint):\n        localips = ['0.0.0.0','127.0.0.1','127.0.1.1']\n        hosting_ap = os.system('pgrep hostapd') == 0\n        ssid = subprocess.check_output('iwconfig 2>&1 | grep \\'ESSID:\"\\' | sed \\'s/.*\"\\\\(.*\\\\)\"/\\\\1/\\'', shell=True).rstrip()\n        mac = subprocess.check_output('ifconfig | grep -B 1 \\'inet addr\\' | grep -o \\'HWaddr .*\\' | sed \\'s/HWaddr //\\'', shell=True).rstrip()\n        ips =  [ c.split(':')[1].split(' ')[0] for c in subprocess.check_output(\"/sbin/ifconfig\").split('\\n') if 'inet addr' in c ]\n        ips =  [ ip for ip in ips if ip not in localips ] \n        eprint.text('\\n\\n')\n        eprint.set(align='center',type='b',height=2,width=2)\n        eprint.text('PosBox Status\\n')\n        eprint.text('\\n')\n        eprint.set(align='center')\n\n        if hosting_ap:\n            eprint.text('Wireless network:\\nPosbox\\n\\n')\n        elif ssid:\n            eprint.text('Wireless network:\\n' + ssid + '\\n\\n')\n\n        if len(ips) == 0:\n            eprint.text('ERROR: Could not connect to LAN\\n\\nPlease check that the PosBox is correc-\\ntly connected with a network cable,\\n that the LAN is setup with DHCP, and\\nthat network addresses are available')\n        elif len(ips) == 1:\n            eprint.text('IP Address:\\n'+ips[0]+'\\n')\n        else:\n            eprint.text('IP Addresses:\\n')\n            for ip in ips:\n                eprint.text(ip+'\\n')\n\n        if len(ips) >= 1:\n            eprint.text('\\nMAC Address:\\n' + mac + '\\n')\n            eprint.text('\\nHomepage:\\nhttp://'+ips[0]+':8069\\n')\n\n        eprint.text('\\n\\n')\n        eprint.cut()\n\n    def print_receipt_body(self,eprint,receipt):\n\n        def check(string):\n            return string != True and bool(string) and string.strip()\n        \n        def price(amount):\n            return (\"{0:.\"+str(receipt['precision']['price'])+\"f}\").format(amount)\n        \n        def money(amount):\n            return (\"{0:.\"+str(receipt['precision']['money'])+\"f}\").format(amount)\n\n        def quantity(amount):\n            if math.floor(amount) != amount:\n                return (\"{0:.\"+str(receipt['precision']['quantity'])+\"f}\").format(amount)\n            else:\n                return str(amount)\n\n        def printline(left, right='', width=40, ratio=0.5, indent=0):\n            lwidth = int(width * ratio) \n            rwidth = width - lwidth \n            lwidth = lwidth - indent\n            \n            left = left[:lwidth]\n            if len(left) != lwidth:\n                left = left + ' ' * (lwidth - len(left))\n\n            right = right[-rwidth:]\n            if len(right) != rwidth:\n                right = ' ' * (rwidth - len(right)) + right\n\n            return ' ' * indent + left + right + '\\n'\n        \n        def print_taxes():\n            taxes = receipt['tax_details']\n            for tax in taxes:\n                eprint.text(printline(tax['tax']['name'],price(tax['amount']), width=40,ratio=0.6))\n\n        # Receipt Header\n        if receipt['company']['logo']:\n            eprint.set(align='center')\n            eprint.print_base64_image(receipt['company']['logo'])\n            eprint.text('\\n')\n        else:\n            eprint.set(align='center',type='b',height=2,width=2)\n            eprint.text(receipt['company']['name'] + '\\n')\n\n        eprint.set(align='center',type='b')\n        if check(receipt['company']['contact_address']):\n            eprint.text(receipt['company']['contact_address'] + '\\n')\n        if check(receipt['company']['phone']):\n            eprint.text('Tel:' + receipt['company']['phone'] + '\\n')\n        if check(receipt['company']['vat']):\n            eprint.text('VAT:' + receipt['company']['vat'] + '\\n')\n        if check(receipt['company']['email']):\n            eprint.text(receipt['company']['email'] + '\\n')\n        if check(receipt['company']['website']):\n            eprint.text(receipt['company']['website'] + '\\n')\n        if check(receipt['header']):\n            eprint.text(receipt['header']+'\\n')\n        if check(receipt['cashier']):\n            eprint.text('-'*32+'\\n')\n            eprint.text('Served by '+receipt['cashier']+'\\n')\n\n        # Orderlines\n        eprint.text('\\n\\n')\n        eprint.set(align='center')\n        for line in receipt['orderlines']:\n            pricestr = price(line['price_display'])\n            if line['discount'] == 0 and line['unit_name'] == 'Unit(s)' and line['quantity'] == 1:\n                eprint.text(printline(line['product_name'],pricestr,ratio=0.6))\n            else:\n                eprint.text(printline(line['product_name'],ratio=0.6))\n                if line['discount'] != 0:\n                    eprint.text(printline('Discount: '+str(line['discount'])+'%', ratio=0.6, indent=2))\n                if line['unit_name'] == 'Unit(s)':\n                    eprint.text( printline( quantity(line['quantity']) + ' x ' + price(line['price']), pricestr, ratio=0.6, indent=2))\n                else:\n                    eprint.text( printline( quantity(line['quantity']) + line['unit_name'] + ' x ' + price(line['price']), pricestr, ratio=0.6, indent=2))\n\n        # Subtotal if the taxes are not included\n        taxincluded = True\n        if money(receipt['subtotal']) != money(receipt['total_with_tax']):\n            eprint.text(printline('','-------'));\n            eprint.text(printline(_('Subtotal'),money(receipt['subtotal']),width=40, ratio=0.6))\n            print_taxes()\n            #eprint.text(printline(_('Taxes'),money(receipt['total_tax']),width=40, ratio=0.6))\n            taxincluded = False\n\n\n        # Total\n        eprint.text(printline('','-------'));\n        eprint.set(align='center',height=2)\n        eprint.text(printline(_('         TOTAL'),money(receipt['total_with_tax']),width=40, ratio=0.6))\n        eprint.text('\\n\\n');\n        \n        # Paymentlines\n        eprint.set(align='center')\n        for line in receipt['paymentlines']:\n            eprint.text(printline(line['journal'], money(line['amount']), ratio=0.6))\n\n        eprint.text('\\n');\n        eprint.set(align='center',height=2)\n        eprint.text(printline(_('        CHANGE'),money(receipt['change']),width=40, ratio=0.6))\n        eprint.set(align='center')\n        eprint.text('\\n');\n\n        # Extra Payment info\n        if receipt['total_discount'] != 0:\n            eprint.text(printline(_('Discounts'),money(receipt['total_discount']),width=40, ratio=0.6))\n        if taxincluded:\n            print_taxes()\n            #eprint.text(printline(_('Taxes'),money(receipt['total_tax']),width=40, ratio=0.6))\n\n        # Footer\n        if check(receipt['footer']):\n            eprint.text('\\n'+receipt['footer']+'\\n\\n')\n        eprint.text(receipt['name']+'\\n')\n        eprint.text(      str(receipt['date']['date']).zfill(2)\n                    +'/'+ str(receipt['date']['month']+1).zfill(2)\n                    +'/'+ str(receipt['date']['year']).zfill(4)\n                    +' '+ str(receipt['date']['hour']).zfill(2)\n                    +':'+ str(receipt['date']['minute']).zfill(2) )\n\n\ndriver = EscposDriver()\n\ndriver.push_task('printstatus')\n\nhw_proxy.drivers['escpos'] = driver\n\nclass EscposProxy(hw_proxy.Proxy):\n    \n    @http.route('/hw_proxy/open_cashbox', type='json', auth='none', cors='*')\n    def open_cashbox(self):\n        _logger.info('ESC/POS: OPEN CASHBOX') \n        driver.push_task('cashbox')\n        \n    @http.route('/hw_proxy/print_receipt', type='json', auth='none', cors='*')\n    def print_receipt(self, receipt):\n        _logger.info('ESC/POS: PRINT RECEIPT') \n        driver.push_task('receipt',receipt)\n\n    @http.route('/hw_proxy/print_xml_receipt', type='json', auth='none', cors='*')\n    def print_xml_receipt(self, receipt):\n        _logger.info('ESC/POS: PRINT XML RECEIPT') \n        driver.push_task('xml_receipt',receipt)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "9e256e3338660dee1610b81779d9cec2", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hw_escpos/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}