{"author": "getredash", "code": "from redash import models\nfrom tests import BaseTestCase\n\n\nclass TestUserListResourcePost(BaseTestCase):\n    def test_returns_403_for_non_admin(self):\n        rv = self.make_request('post', \"/api/users\")\n        self.assertEqual(rv.status_code, 403)\n\n    def test_returns_400_when_missing_fields(self):\n        admin = self.factory.create_admin()\n\n        rv = self.make_request('post', \"/api/users\", user=admin)\n        self.assertEqual(rv.status_code, 400)\n\n        rv = self.make_request('post', '/api/users', data={'name': 'User'}, user=admin)\n        self.assertEqual(rv.status_code, 400)\n\n    def test_creates_user(self):\n        admin = self.factory.create_admin()\n\n        test_user = {'name': 'User', 'email': 'user@example.com', 'password': 'test'}\n        rv = self.make_request('post', '/api/users', data=test_user, user=admin)\n\n        self.assertEqual(rv.status_code, 200)\n        self.assertEqual(rv.json['name'], test_user['name'])\n        self.assertEqual(rv.json['email'], test_user['email'])\n\n    def test_creates_user_case_insensitive_email(self):\n        admin = self.factory.create_admin()\n\n        test_user = {'name': 'User', 'email': 'User@Example.com', 'password': 'test'}\n        rv = self.make_request('post', '/api/users', data=test_user, user=admin)\n\n        self.assertEqual(rv.status_code, 200)\n        self.assertEqual(rv.json['name'], test_user['name'])\n        self.assertEqual(rv.json['email'], 'user@example.com')\n\n    def test_returns_400_when_email_taken(self):\n        admin = self.factory.create_admin()\n\n        test_user = {'name': 'User', 'email': admin.email, 'password': 'test'}\n        rv = self.make_request('post', '/api/users', data=test_user, user=admin)\n\n        self.assertEqual(rv.status_code, 400)\n\n    def test_returns_400_when_email_taken_case_insensitive(self):\n        admin = self.factory.create_admin()\n\n        test_user1 = {'name': 'User', 'email': 'user@example.com', 'password': 'test'}\n        rv = self.make_request('post', '/api/users', data=test_user1, user=admin)\n\n        self.assertEqual(rv.status_code, 200)\n        self.assertEqual(rv.json['email'], 'user@example.com')\n\n        test_user2 = {'name': 'User', 'email': 'user@Example.com', 'password': 'test'}\n        rv = self.make_request('post', '/api/users', data=test_user2, user=admin)\n\n        self.assertEqual(rv.status_code, 400)\n\n\nclass TestUserListGet(BaseTestCase):\n    def test_returns_users_for_given_org_only(self):\n        user1 = self.factory.user\n        user2 = self.factory.create_user()\n        org = self.factory.create_org()\n        user3 = self.factory.create_user(org=org)\n\n        rv = self.make_request('get', \"/api/users\")\n        user_ids = map(lambda u: u['id'], rv.json)\n        self.assertIn(user1.id, user_ids)\n        self.assertIn(user2.id, user_ids)\n        self.assertNotIn(user3.id, user_ids)\n\n\nclass TestUserResourceGet(BaseTestCase):\n    def test_returns_api_key_for_your_own_user(self):\n        rv = self.make_request('get', \"/api/users/{}\".format(self.factory.user.id))\n        self.assertIn('api_key', rv.json)\n\n    def test_returns_api_key_for_other_user_when_admin(self):\n        other_user = self.factory.user\n        admin = self.factory.create_admin()\n\n        rv = self.make_request('get', \"/api/users/{}\".format(other_user.id), user=admin)\n        self.assertIn('api_key', rv.json)\n\n    def test_doesnt_return_api_key_for_other_user(self):\n        other_user = self.factory.create_user()\n\n        rv = self.make_request('get', \"/api/users/{}\".format(other_user.id))\n        self.assertNotIn('api_key', rv.json)\n\n    def test_doesnt_return_user_from_different_org(self):\n        org = self.factory.create_org()\n        other_user = self.factory.create_user(org=org)\n\n        rv = self.make_request('get', \"/api/users/{}\".format(other_user.id))\n        self.assertEqual(rv.status_code, 404)\n\n\nclass TestUserResourcePost(BaseTestCase):\n    def test_returns_403_for_non_admin_changing_not_his_own(self):\n        other_user = self.factory.create_user()\n\n        rv = self.make_request('post', \"/api/users/{}\".format(other_user.id), data={\"name\": \"New Name\"})\n        self.assertEqual(rv.status_code, 403)\n\n    def test_returns_200_for_non_admin_changing_his_own(self):\n        rv = self.make_request('post', \"/api/users/{}\".format(self.factory.user.id), data={\"name\": \"New Name\"})\n        self.assertEqual(rv.status_code, 200)\n\n    def test_returns_200_for_admin_changing_other_user(self):\n        admin = self.factory.create_admin()\n\n        rv = self.make_request('post', \"/api/users/{}\".format(self.factory.user.id), data={\"name\": \"New Name\"}, user=admin)\n        self.assertEqual(rv.status_code, 200)\n\n    def test_fails_password_change_without_old_password(self):\n        rv = self.make_request('post', \"/api/users/{}\".format(self.factory.user.id), data={\"password\": \"new password\"})\n        self.assertEqual(rv.status_code, 403)\n\n    def test_fails_password_change_with_incorrect_old_password(self):\n        rv = self.make_request('post', \"/api/users/{}\".format(self.factory.user.id), data={\"password\": \"new password\", \"old_password\": \"wrong\"})\n        self.assertEqual(rv.status_code, 403)\n\n    def test_changes_password(self):\n        new_password = \"new password\"\n        old_password = \"old password\"\n\n        self.factory.user.hash_password(old_password)\n        models.db.session.add(self.factory.user)\n\n        rv = self.make_request('post', \"/api/users/{}\".format(self.factory.user.id), data={\"password\": new_password, \"old_password\": old_password})\n        self.assertEqual(rv.status_code, 200)\n\n        user = models.User.query.get(self.factory.user.id)\n        self.assertTrue(user.verify_password(new_password))\n", "comments": "", "content": "from redash import models\nfrom tests import BaseTestCase\n\n\nclass TestUserListResourcePost(BaseTestCase):\n    def test_returns_403_for_non_admin(self):\n        rv = self.make_request('post', \"/api/users\")\n        self.assertEqual(rv.status_code, 403)\n\n    def test_returns_400_when_missing_fields(self):\n        admin = self.factory.create_admin()\n\n        rv = self.make_request('post', \"/api/users\", user=admin)\n        self.assertEqual(rv.status_code, 400)\n\n        rv = self.make_request('post', '/api/users', data={'name': 'User'}, user=admin)\n        self.assertEqual(rv.status_code, 400)\n\n    def test_creates_user(self):\n        admin = self.factory.create_admin()\n\n        test_user = {'name': 'User', 'email': 'user@example.com', 'password': 'test'}\n        rv = self.make_request('post', '/api/users', data=test_user, user=admin)\n\n        self.assertEqual(rv.status_code, 200)\n        self.assertEqual(rv.json['name'], test_user['name'])\n        self.assertEqual(rv.json['email'], test_user['email'])\n\n    def test_creates_user_case_insensitive_email(self):\n        admin = self.factory.create_admin()\n\n        test_user = {'name': 'User', 'email': 'User@Example.com', 'password': 'test'}\n        rv = self.make_request('post', '/api/users', data=test_user, user=admin)\n\n        self.assertEqual(rv.status_code, 200)\n        self.assertEqual(rv.json['name'], test_user['name'])\n        self.assertEqual(rv.json['email'], 'user@example.com')\n\n    def test_returns_400_when_email_taken(self):\n        admin = self.factory.create_admin()\n\n        test_user = {'name': 'User', 'email': admin.email, 'password': 'test'}\n        rv = self.make_request('post', '/api/users', data=test_user, user=admin)\n\n        self.assertEqual(rv.status_code, 400)\n\n    def test_returns_400_when_email_taken_case_insensitive(self):\n        admin = self.factory.create_admin()\n\n        test_user1 = {'name': 'User', 'email': 'user@example.com', 'password': 'test'}\n        rv = self.make_request('post', '/api/users', data=test_user1, user=admin)\n\n        self.assertEqual(rv.status_code, 200)\n        self.assertEqual(rv.json['email'], 'user@example.com')\n\n        test_user2 = {'name': 'User', 'email': 'user@Example.com', 'password': 'test'}\n        rv = self.make_request('post', '/api/users', data=test_user2, user=admin)\n\n        self.assertEqual(rv.status_code, 400)\n\n\nclass TestUserListGet(BaseTestCase):\n    def test_returns_users_for_given_org_only(self):\n        user1 = self.factory.user\n        user2 = self.factory.create_user()\n        org = self.factory.create_org()\n        user3 = self.factory.create_user(org=org)\n\n        rv = self.make_request('get', \"/api/users\")\n        user_ids = map(lambda u: u['id'], rv.json)\n        self.assertIn(user1.id, user_ids)\n        self.assertIn(user2.id, user_ids)\n        self.assertNotIn(user3.id, user_ids)\n\n\nclass TestUserResourceGet(BaseTestCase):\n    def test_returns_api_key_for_your_own_user(self):\n        rv = self.make_request('get', \"/api/users/{}\".format(self.factory.user.id))\n        self.assertIn('api_key', rv.json)\n\n    def test_returns_api_key_for_other_user_when_admin(self):\n        other_user = self.factory.user\n        admin = self.factory.create_admin()\n\n        rv = self.make_request('get', \"/api/users/{}\".format(other_user.id), user=admin)\n        self.assertIn('api_key', rv.json)\n\n    def test_doesnt_return_api_key_for_other_user(self):\n        other_user = self.factory.create_user()\n\n        rv = self.make_request('get', \"/api/users/{}\".format(other_user.id))\n        self.assertNotIn('api_key', rv.json)\n\n    def test_doesnt_return_user_from_different_org(self):\n        org = self.factory.create_org()\n        other_user = self.factory.create_user(org=org)\n\n        rv = self.make_request('get', \"/api/users/{}\".format(other_user.id))\n        self.assertEqual(rv.status_code, 404)\n\n\nclass TestUserResourcePost(BaseTestCase):\n    def test_returns_403_for_non_admin_changing_not_his_own(self):\n        other_user = self.factory.create_user()\n\n        rv = self.make_request('post', \"/api/users/{}\".format(other_user.id), data={\"name\": \"New Name\"})\n        self.assertEqual(rv.status_code, 403)\n\n    def test_returns_200_for_non_admin_changing_his_own(self):\n        rv = self.make_request('post', \"/api/users/{}\".format(self.factory.user.id), data={\"name\": \"New Name\"})\n        self.assertEqual(rv.status_code, 200)\n\n    def test_returns_200_for_admin_changing_other_user(self):\n        admin = self.factory.create_admin()\n\n        rv = self.make_request('post', \"/api/users/{}\".format(self.factory.user.id), data={\"name\": \"New Name\"}, user=admin)\n        self.assertEqual(rv.status_code, 200)\n\n    def test_fails_password_change_without_old_password(self):\n        rv = self.make_request('post', \"/api/users/{}\".format(self.factory.user.id), data={\"password\": \"new password\"})\n        self.assertEqual(rv.status_code, 403)\n\n    def test_fails_password_change_with_incorrect_old_password(self):\n        rv = self.make_request('post', \"/api/users/{}\".format(self.factory.user.id), data={\"password\": \"new password\", \"old_password\": \"wrong\"})\n        self.assertEqual(rv.status_code, 403)\n\n    def test_changes_password(self):\n        new_password = \"new password\"\n        old_password = \"old password\"\n\n        self.factory.user.hash_password(old_password)\n        models.db.session.add(self.factory.user)\n\n        rv = self.make_request('post', \"/api/users/{}\".format(self.factory.user.id), data={\"password\": new_password, \"old_password\": old_password})\n        self.assertEqual(rv.status_code, 200)\n\n        user = models.User.query.get(self.factory.user.id)\n        self.assertTrue(user.verify_password(new_password))\n", "description": "Make Your Company Data Driven. Connect to any data source, easily visualize and share your data.", "file_name": "test_users.py", "id": "182833e57b7ff8f0b1a6f4eccf66dbae", "language": "Python", "project_name": "redash", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/getredash-redash/getredash-redash-0410d83/tests/handlers/test_users.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:54:55Z", "url": "https://github.com/getredash/redash", "wiki": false}