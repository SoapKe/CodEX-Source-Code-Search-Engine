{"author": "odoo", "code": "\n\nimport json\nimport logging\n\nimport requests\nfrom lxml import etree\nimport re\nimport werkzeug.urls\n\nfrom odoo import api, models\nfrom odoo.tools import misc\nfrom odoo.addons.google_account import TIMEOUT\n\n_logger = logging.getLogger(__name__)\n\n\nclass GoogleDrive(models.Model):\n    _inherit = 'google.drive.config'\n\n    def get_google_scope(self):\n        scope = super(GoogleDrive, self).get_google_scope()\n        return '%s https://spreadsheets.google.com/feeds' % scope\n\n    @api.model\n    def write_config_formula(self, attachment_id, spreadsheet_key, model, domain, groupbys, view_id):\n        access_token = self.get_access_token(scope='https://spreadsheets.google.com/feeds')\n\n        fields = self.env[model].fields_view_get(view_id=view_id, view_type='tree')\n        doc = etree.XML(fields.get('arch'))\n        display_fields = []\n        for node in doc.xpath(\"//field\"):\n            if node.get('modifiers'):\n                modifiers = json.loads(node.get('modifiers'))\n                if not modifiers.get('invisible') and not modifiers.get('column_invisible'):\n                    display_fields.append(node.get('name'))\n        fields = \" \".join(display_fields)\n        domain = domain.replace(\"'\", r\"\\'\").replace('\"', \"'\")\n        if groupbys:\n            fields = \"%s %s\" % (groupbys, fields)\n            formula = '=oe_read_group(\"%s\";\"%s\";\"%s\";\"%s\")' % (model, fields, groupbys, domain)\n        else:\n            formula = '=oe_browse(\"%s\";\"%s\";\"%s\")' % (model, fields, domain)\n        url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        dbname = self._cr.dbname\n        user = self.env['res.users'].browse(self.env.user.id).read(['login', 'password'])[0]\n        username = user['login']\n        password = user['password']\n        if not password:\n            config_formula = '=oe_settings(\"%s\";\"%s\")' % (url, dbname)\n        else:\n            config_formula = '=oe_settings(\"%s\";\"%s\";\"%s\";\"%s\")' % (url, dbname, username, password)\n        request = '''<feed xmlns=\"http://www.w3.org/2005/Atom\"\n      xmlns:batch=\"http://schemas.google.com/gdata/batch\"\n      xmlns:gs=\"http://schemas.google.com/spreadsheets/2006\">\n  <id>https://spreadsheets.google.com/feeds/cells/{key}/od6/private/full</id>\n  <entry>\n    <batch:id>A1</batch:id>\n    <batch:operation type=\"update\"/>\n    <id>https://spreadsheets.google.com/feeds/cells/{key}/od6/private/full/R1C1</id>\n    <link rel=\"edit\" type=\"application/atom+xml\"\n      href=\"https://spreadsheets.google.com/feeds/cells/{key}/od6/private/full/R1C1\"/>\n    <gs:cell row=\"1\" col=\"1\" inputValue=\"{formula}\"/>\n  </entry>\n  <entry>\n    <batch:id>A2</batch:id>\n    <batch:operation type=\"update\"/>\n    <id>https://spreadsheets.google.com/feeds/cells/{key}/od6/private/full/R60C15</id>\n    <link rel=\"edit\" type=\"application/atom+xml\"\n      href=\"https://spreadsheets.google.com/feeds/cells/{key}/od6/private/full/R60C15\"/>\n    <gs:cell row=\"60\" col=\"15\" inputValue=\"{config}\"/>\n  </entry>\n</feed>''' .format(key=spreadsheet_key, formula=misc.html_escape(formula), config=misc.html_escape(config_formula))\n\n        try:\n            req = requests.post(\n                'https://spreadsheets.google.com/feeds/cells/%s/od6/private/full/batch?%s' % (spreadsheet_key, werkzeug.url_encode({'v': 3, 'access_token': access_token})),\n                data=request,\n                headers={'content-type': 'application/atom+xml', 'If-Match': '*'},\n                timeout=TIMEOUT,\n            )\n        except IOError:\n            _logger.warning(\"An error occured while writting the formula on the Google Spreadsheet.\")\n\n        description = '''\n        formula: %s\n        ''' % formula\n        if attachment_id:\n            self.env['ir.attachment'].browse(attachment_id).write({'description': description})\n        return True\n\n    @api.model\n    def set_spreadsheet(self, model, domain, groupbys, view_id):\n        try:\n            config_id = self.env['ir.model.data'].get_object_reference('google_spreadsheet', 'google_spreadsheet_template')[1]\n        except ValueError:\n            raise\n        config = self.browse(config_id)\n        title = 'Spreadsheet %s' % model\n        res = self.copy_doc(False, config.google_drive_resource_id, title, model)\n\n        mo = re.search(\"(key=|/d/)([A-Za-z0-9-_]+)\", res['url'])\n        if mo:\n            key = mo.group(2)\n\n        self.write_config_formula(res.get('id'), key, model, domain, groupbys, view_id)\n        return res\n", "comments": "    feed xmlns  http   www w3 org 2005 atom        xmlns batch  http   schemas google com gdata batch        xmlns gs  http   schemas google com spreadsheets 2006      id https   spreadsheets google com feeds cells  key  od6 private full  id     entry       batch id a1  batch id       batch operation type  update         id https   spreadsheets google com feeds cells  key  od6 private full r1c1  id       link rel  edit  type  application atom xml        href  https   spreadsheets google com feeds cells  key  od6 private full r1c1         gs cell row  1  col  1  inputvalue   formula         entry     entry       batch id a2  batch id       batch operation type  update         id https   spreadsheets google com feeds cells  key  od6 private full r60c15  id       link rel  edit  type  application atom xml        href  https   spreadsheets google com feeds cells  key  od6 private full r60c15         gs cell row  60  col  15  inputvalue   config         entry    feed      format(key spreadsheet key  formula misc html escape(formula)  config misc html escape(config formula))          try              req   requests post(                  https   spreadsheets google com feeds cells  od6 private full batch     (spreadsheet key  werkzeug url encode(  v   3   access token   access token ))                  data request                  headers   content type    application atom xml    if match                         timeout timeout              )         except ioerror               logger warning( an error occured writting formula google spreadsheet  )          description               formula                  part odoo  see license file full copyright licensing details  ", "content": "# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport json\nimport logging\n\nimport requests\nfrom lxml import etree\nimport re\nimport werkzeug.urls\n\nfrom odoo import api, models\nfrom odoo.tools import misc\nfrom odoo.addons.google_account import TIMEOUT\n\n_logger = logging.getLogger(__name__)\n\n\nclass GoogleDrive(models.Model):\n    _inherit = 'google.drive.config'\n\n    def get_google_scope(self):\n        scope = super(GoogleDrive, self).get_google_scope()\n        return '%s https://spreadsheets.google.com/feeds' % scope\n\n    @api.model\n    def write_config_formula(self, attachment_id, spreadsheet_key, model, domain, groupbys, view_id):\n        access_token = self.get_access_token(scope='https://spreadsheets.google.com/feeds')\n\n        fields = self.env[model].fields_view_get(view_id=view_id, view_type='tree')\n        doc = etree.XML(fields.get('arch'))\n        display_fields = []\n        for node in doc.xpath(\"//field\"):\n            if node.get('modifiers'):\n                modifiers = json.loads(node.get('modifiers'))\n                if not modifiers.get('invisible') and not modifiers.get('column_invisible'):\n                    display_fields.append(node.get('name'))\n        fields = \" \".join(display_fields)\n        domain = domain.replace(\"'\", r\"\\'\").replace('\"', \"'\")\n        if groupbys:\n            fields = \"%s %s\" % (groupbys, fields)\n            formula = '=oe_read_group(\"%s\";\"%s\";\"%s\";\"%s\")' % (model, fields, groupbys, domain)\n        else:\n            formula = '=oe_browse(\"%s\";\"%s\";\"%s\")' % (model, fields, domain)\n        url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        dbname = self._cr.dbname\n        user = self.env['res.users'].browse(self.env.user.id).read(['login', 'password'])[0]\n        username = user['login']\n        password = user['password']\n        if not password:\n            config_formula = '=oe_settings(\"%s\";\"%s\")' % (url, dbname)\n        else:\n            config_formula = '=oe_settings(\"%s\";\"%s\";\"%s\";\"%s\")' % (url, dbname, username, password)\n        request = '''<feed xmlns=\"http://www.w3.org/2005/Atom\"\n      xmlns:batch=\"http://schemas.google.com/gdata/batch\"\n      xmlns:gs=\"http://schemas.google.com/spreadsheets/2006\">\n  <id>https://spreadsheets.google.com/feeds/cells/{key}/od6/private/full</id>\n  <entry>\n    <batch:id>A1</batch:id>\n    <batch:operation type=\"update\"/>\n    <id>https://spreadsheets.google.com/feeds/cells/{key}/od6/private/full/R1C1</id>\n    <link rel=\"edit\" type=\"application/atom+xml\"\n      href=\"https://spreadsheets.google.com/feeds/cells/{key}/od6/private/full/R1C1\"/>\n    <gs:cell row=\"1\" col=\"1\" inputValue=\"{formula}\"/>\n  </entry>\n  <entry>\n    <batch:id>A2</batch:id>\n    <batch:operation type=\"update\"/>\n    <id>https://spreadsheets.google.com/feeds/cells/{key}/od6/private/full/R60C15</id>\n    <link rel=\"edit\" type=\"application/atom+xml\"\n      href=\"https://spreadsheets.google.com/feeds/cells/{key}/od6/private/full/R60C15\"/>\n    <gs:cell row=\"60\" col=\"15\" inputValue=\"{config}\"/>\n  </entry>\n</feed>''' .format(key=spreadsheet_key, formula=misc.html_escape(formula), config=misc.html_escape(config_formula))\n\n        try:\n            req = requests.post(\n                'https://spreadsheets.google.com/feeds/cells/%s/od6/private/full/batch?%s' % (spreadsheet_key, werkzeug.url_encode({'v': 3, 'access_token': access_token})),\n                data=request,\n                headers={'content-type': 'application/atom+xml', 'If-Match': '*'},\n                timeout=TIMEOUT,\n            )\n        except IOError:\n            _logger.warning(\"An error occured while writting the formula on the Google Spreadsheet.\")\n\n        description = '''\n        formula: %s\n        ''' % formula\n        if attachment_id:\n            self.env['ir.attachment'].browse(attachment_id).write({'description': description})\n        return True\n\n    @api.model\n    def set_spreadsheet(self, model, domain, groupbys, view_id):\n        try:\n            config_id = self.env['ir.model.data'].get_object_reference('google_spreadsheet', 'google_spreadsheet_template')[1]\n        except ValueError:\n            raise\n        config = self.browse(config_id)\n        title = 'Spreadsheet %s' % model\n        res = self.copy_doc(False, config.google_drive_resource_id, title, model)\n\n        mo = re.search(\"(key=|/d/)([A-Za-z0-9-_]+)\", res['url'])\n        if mo:\n            key = mo.group(2)\n\n        self.write_config_formula(res.get('id'), key, model, domain, groupbys, view_id)\n        return res\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "google_drive.py", "id": "5d717781c657a63041d6f12031d4a5d1", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/google_spreadsheet/models/google_drive.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}