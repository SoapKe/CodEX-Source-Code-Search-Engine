{"author": "getredash", "code": "from mock import patch, call, ANY\nfrom tests import BaseTestCase\nfrom redash.tasks import refresh_queries\nfrom redash.models import Query\n\n\nclass TestRefreshQuery(BaseTestCase):\n    def test_enqueues_outdated_queries(self):\n        \"\"\"\n        refresh_queries() launches an execution task for each query returned\n        from Query.outdated_queries().\n        \"\"\"\n        query1 = self.factory.create_query()\n        query2 = self.factory.create_query(\n            query_text=\"select 42;\",\n            data_source=self.factory.create_data_source())\n        oq = staticmethod(lambda: [query1, query2])\n        with patch('redash.tasks.queries.enqueue_query') as add_job_mock, \\\n                patch.object(Query, 'outdated_queries', oq):\n            refresh_queries()\n            self.assertEqual(add_job_mock.call_count, 2)\n            add_job_mock.assert_has_calls([\n                call(query1.query_text, query1.data_source, query1.user_id,\n                     scheduled_query=query1, metadata=ANY),\n                call(query2.query_text, query2.data_source, query2.user_id,\n                     scheduled_query=query2, metadata=ANY)], any_order=True)\n\n    def test_doesnt_enqueue_outdated_queries_for_paused_data_source(self):\n        \"\"\"\n        refresh_queries() does not launch execution tasks for queries whose\n        data source is paused.\n        \"\"\"\n        query = self.factory.create_query()\n        oq = staticmethod(lambda: [query])\n        query.data_source.pause()\n        with patch.object(Query, 'outdated_queries', oq):\n            with patch('redash.tasks.queries.enqueue_query') as add_job_mock:\n                refresh_queries()\n                add_job_mock.assert_not_called()\n\n            query.data_source.resume()\n\n            with patch('redash.tasks.queries.enqueue_query') as add_job_mock:\n                refresh_queries()\n                add_job_mock.assert_called_with(\n                    query.query_text, query.data_source, query.user_id,\n                    scheduled_query=query, metadata=ANY)\n", "comments": "            refresh queries() launches execution task query returned         query outdated queries()                      query1   self factory create query()         query2   self factory create query(             query text  select 42                data source self factory create data source())         oq   staticmethod(lambda   query1  query2 )         patch( redash tasks queries enqueue query ) add job mock                    patch object(query   outdated queries   oq)              refresh queries()             self assertequal(add job mock call count  2)             add job mock assert calls(                  call(query1 query text  query1 data source  query1 user id                       scheduled query query1  metadata any)                  call(query2 query text  query2 data source  query2 user id                       scheduled query query2  metadata any)   order true)      def test doesnt enqueue outdated queries paused data source(self)                      refresh queries() launch execution tasks queries whose         data source paused              ", "content": "from mock import patch, call, ANY\nfrom tests import BaseTestCase\nfrom redash.tasks import refresh_queries\nfrom redash.models import Query\n\n\nclass TestRefreshQuery(BaseTestCase):\n    def test_enqueues_outdated_queries(self):\n        \"\"\"\n        refresh_queries() launches an execution task for each query returned\n        from Query.outdated_queries().\n        \"\"\"\n        query1 = self.factory.create_query()\n        query2 = self.factory.create_query(\n            query_text=\"select 42;\",\n            data_source=self.factory.create_data_source())\n        oq = staticmethod(lambda: [query1, query2])\n        with patch('redash.tasks.queries.enqueue_query') as add_job_mock, \\\n                patch.object(Query, 'outdated_queries', oq):\n            refresh_queries()\n            self.assertEqual(add_job_mock.call_count, 2)\n            add_job_mock.assert_has_calls([\n                call(query1.query_text, query1.data_source, query1.user_id,\n                     scheduled_query=query1, metadata=ANY),\n                call(query2.query_text, query2.data_source, query2.user_id,\n                     scheduled_query=query2, metadata=ANY)], any_order=True)\n\n    def test_doesnt_enqueue_outdated_queries_for_paused_data_source(self):\n        \"\"\"\n        refresh_queries() does not launch execution tasks for queries whose\n        data source is paused.\n        \"\"\"\n        query = self.factory.create_query()\n        oq = staticmethod(lambda: [query])\n        query.data_source.pause()\n        with patch.object(Query, 'outdated_queries', oq):\n            with patch('redash.tasks.queries.enqueue_query') as add_job_mock:\n                refresh_queries()\n                add_job_mock.assert_not_called()\n\n            query.data_source.resume()\n\n            with patch('redash.tasks.queries.enqueue_query') as add_job_mock:\n                refresh_queries()\n                add_job_mock.assert_called_with(\n                    query.query_text, query.data_source, query.user_id,\n                    scheduled_query=query, metadata=ANY)\n", "description": "Make Your Company Data Driven. Connect to any data source, easily visualize and share your data.", "file_name": "test_refresh_queries.py", "id": "0a82288504e0be9d845664d8e3834a91", "language": "Python", "project_name": "redash", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/getredash-redash/getredash-redash-0410d83/tests/tasks/test_refresh_queries.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:54:55Z", "url": "https://github.com/getredash/redash", "wiki": false}