{"author": "jakubroztocil", "code": "\n\n    def test_GET_no_data_no_auto_headers(self, httpbin):\n        \n        r = http('GET', httpbin.url + '/headers')\n        assert HTTP_OK in r\n        assert r.json['headers']['Accept'] == '*/*'\n        assert 'Content-Type' not in r.json['headers']\n\n    def test_POST_no_data_no_auto_headers(self, httpbin):\n        \n        r = http('POST', httpbin.url + '/post')\n        assert HTTP_OK in r\n        assert '\"Accept\": \"*/*\"' in r\n        assert '\"Content-Type\": \"application/json' not in r\n\n    def test_POST_with_data_auto_JSON_headers(self, httpbin):\n        r = http('POST', httpbin.url + '/post', 'a=b')\n        assert HTTP_OK in r\n        assert r.json['headers']['Accept'] == JSON_ACCEPT\n        assert r.json['headers']['Content-Type'] == 'application/json'\n\n    def test_GET_with_data_auto_JSON_headers(self, httpbin):\n        \n        r = http('POST', httpbin.url + '/post', 'a=b')\n        assert HTTP_OK in r\n        assert r.json['headers']['Accept'] == JSON_ACCEPT\n        assert r.json['headers']['Content-Type'] == 'application/json'\n\n    def test_POST_explicit_JSON_auto_JSON_accept(self, httpbin):\n        r = http('--json', 'POST', httpbin.url + '/post')\n        assert HTTP_OK in r\n        assert r.json['headers']['Accept'] == JSON_ACCEPT\n        \n        \n        assert 'application/json' in r.json['headers']['Content-Type']\n\n    def test_GET_explicit_JSON_explicit_headers(self, httpbin):\n        r = http('--json', 'GET', httpbin.url + '/headers',\n                 'Accept:application/xml',\n                 'Content-Type:application/xml')\n        assert HTTP_OK in r\n        assert '\"Accept\": \"application/xml\"' in r\n        assert '\"Content-Type\": \"application/xml\"' in r\n\n    def test_POST_form_auto_Content_Type(self, httpbin):\n        r = http('--form', 'POST', httpbin.url + '/post')\n        assert HTTP_OK in r\n        assert '\"Content-Type\": \"application/x-www-form-urlencoded' in r\n\n    def test_POST_form_Content_Type_override(self, httpbin):\n        r = http('--form', 'POST', httpbin.url + '/post',\n                 'Content-Type:application/xml')\n        assert HTTP_OK in r\n        assert '\"Content-Type\": \"application/xml\"' in r\n\n    def test_print_only_body_when_stdout_redirected_by_default(self, httpbin):\n        env = MockEnvironment(stdin_isatty=True, stdout_isatty=False)\n        r = http('GET', httpbin.url + '/get', env=env)\n        assert 'HTTP/' not in r\n\n    def test_print_overridable_when_stdout_redirected(self, httpbin):\n        env = MockEnvironment(stdin_isatty=True, stdout_isatty=False)\n        r = http('--print=h', 'GET', httpbin.url + '/get', env=env)\n        assert HTTP_OK in r\n", "comments": "\nTests for the provided defaults regarding HTTP method, and --json vs. --form.\n\n\"\"\"\nfrom httpie.client import JSON_ACCEPT\nfrom utils import MockEnvironment, http, HTTP_OK\nfrom fixtures import FILE_PATH\n\n\ndef test_default_headers_case_insensitive(httpbin):\n    \"\"\"\n    <https://github.com/jakubroztocil/httpie/issues/644>\n    \"\"\"\n    r = http(\n        '--debug',\n        '--print=H',\n        httpbin.url + '/post',\n        'CONTENT-TYPE:application/json-patch+json',\n        'a=b',\n    )\n    assert 'CONTENT-TYPE: application/json-patch+json' in r\n    assert 'Content-Type' not in r\n\n\nclass TestImplicitHTTPMethod:\n    def test_implicit_GET(self, httpbin):\n        r = http(httpbin.url + '/get')\n        assert HTTP_OK in r\n\n    def test_implicit_GET_with_headers(self, httpbin):\n        r = http(httpbin.url + '/headers', 'Foo:bar')\n        assert HTTP_OK in r\n        assert r.json['headers']['Foo'] == 'bar'\n\n    def test_implicit_POST_json(self, httpbin):\n        r = http(httpbin.url + '/post', 'hello=world')\n        assert HTTP_OK in r\n        assert r.json['json'] == {'hello': 'world'}\n\n    def test_implicit_POST_form(self, httpbin):\n        r = http('--form', httpbin.url + '/post', 'foo=bar')\n        assert HTTP_OK in r\n        assert r.json['form'] == {'foo': 'bar'}\n\n    def test_implicit_POST_stdin(self, httpbin):\n        with open(FILE_PATH) as f:\n            env = MockEnvironment(stdin_isatty=False, stdin=f)\n            r = http('--form', httpbin.url + '/post', env=env)\n        assert HTTP_OK in r\n\n\nclass TestAutoContentTypeAndAcceptHeaders:\n    \"\"\"\n    Test that Accept and Content-Type correctly defaults to JSON,\n    but can still be overridden. The same with Content-Type when --form\n    -f is used.\n\n    \n \n# https://github.com/jakubroztocil/httpie/issues/62\n# JSON headers shouldn't be automatically set for POST with no data.\n# JSON headers should automatically be set also for GET with data.\n# Make sure Content-Type gets set even with no data.\n# https://github.com/jakubroztocil/httpie/issues/137\n", "content": "\"\"\"\nTests for the provided defaults regarding HTTP method, and --json vs. --form.\n\n\"\"\"\nfrom httpie.client import JSON_ACCEPT\nfrom utils import MockEnvironment, http, HTTP_OK\nfrom fixtures import FILE_PATH\n\n\ndef test_default_headers_case_insensitive(httpbin):\n    \"\"\"\n    <https://github.com/jakubroztocil/httpie/issues/644>\n    \"\"\"\n    r = http(\n        '--debug',\n        '--print=H',\n        httpbin.url + '/post',\n        'CONTENT-TYPE:application/json-patch+json',\n        'a=b',\n    )\n    assert 'CONTENT-TYPE: application/json-patch+json' in r\n    assert 'Content-Type' not in r\n\n\nclass TestImplicitHTTPMethod:\n    def test_implicit_GET(self, httpbin):\n        r = http(httpbin.url + '/get')\n        assert HTTP_OK in r\n\n    def test_implicit_GET_with_headers(self, httpbin):\n        r = http(httpbin.url + '/headers', 'Foo:bar')\n        assert HTTP_OK in r\n        assert r.json['headers']['Foo'] == 'bar'\n\n    def test_implicit_POST_json(self, httpbin):\n        r = http(httpbin.url + '/post', 'hello=world')\n        assert HTTP_OK in r\n        assert r.json['json'] == {'hello': 'world'}\n\n    def test_implicit_POST_form(self, httpbin):\n        r = http('--form', httpbin.url + '/post', 'foo=bar')\n        assert HTTP_OK in r\n        assert r.json['form'] == {'foo': 'bar'}\n\n    def test_implicit_POST_stdin(self, httpbin):\n        with open(FILE_PATH) as f:\n            env = MockEnvironment(stdin_isatty=False, stdin=f)\n            r = http('--form', httpbin.url + '/post', env=env)\n        assert HTTP_OK in r\n\n\nclass TestAutoContentTypeAndAcceptHeaders:\n    \"\"\"\n    Test that Accept and Content-Type correctly defaults to JSON,\n    but can still be overridden. The same with Content-Type when --form\n    -f is used.\n\n    \"\"\"\n\n    def test_GET_no_data_no_auto_headers(self, httpbin):\n        # https://github.com/jakubroztocil/httpie/issues/62\n        r = http('GET', httpbin.url + '/headers')\n        assert HTTP_OK in r\n        assert r.json['headers']['Accept'] == '*/*'\n        assert 'Content-Type' not in r.json['headers']\n\n    def test_POST_no_data_no_auto_headers(self, httpbin):\n        # JSON headers shouldn't be automatically set for POST with no data.\n        r = http('POST', httpbin.url + '/post')\n        assert HTTP_OK in r\n        assert '\"Accept\": \"*/*\"' in r\n        assert '\"Content-Type\": \"application/json' not in r\n\n    def test_POST_with_data_auto_JSON_headers(self, httpbin):\n        r = http('POST', httpbin.url + '/post', 'a=b')\n        assert HTTP_OK in r\n        assert r.json['headers']['Accept'] == JSON_ACCEPT\n        assert r.json['headers']['Content-Type'] == 'application/json'\n\n    def test_GET_with_data_auto_JSON_headers(self, httpbin):\n        # JSON headers should automatically be set also for GET with data.\n        r = http('POST', httpbin.url + '/post', 'a=b')\n        assert HTTP_OK in r\n        assert r.json['headers']['Accept'] == JSON_ACCEPT\n        assert r.json['headers']['Content-Type'] == 'application/json'\n\n    def test_POST_explicit_JSON_auto_JSON_accept(self, httpbin):\n        r = http('--json', 'POST', httpbin.url + '/post')\n        assert HTTP_OK in r\n        assert r.json['headers']['Accept'] == JSON_ACCEPT\n        # Make sure Content-Type gets set even with no data.\n        # https://github.com/jakubroztocil/httpie/issues/137\n        assert 'application/json' in r.json['headers']['Content-Type']\n\n    def test_GET_explicit_JSON_explicit_headers(self, httpbin):\n        r = http('--json', 'GET', httpbin.url + '/headers',\n                 'Accept:application/xml',\n                 'Content-Type:application/xml')\n        assert HTTP_OK in r\n        assert '\"Accept\": \"application/xml\"' in r\n        assert '\"Content-Type\": \"application/xml\"' in r\n\n    def test_POST_form_auto_Content_Type(self, httpbin):\n        r = http('--form', 'POST', httpbin.url + '/post')\n        assert HTTP_OK in r\n        assert '\"Content-Type\": \"application/x-www-form-urlencoded' in r\n\n    def test_POST_form_Content_Type_override(self, httpbin):\n        r = http('--form', 'POST', httpbin.url + '/post',\n                 'Content-Type:application/xml')\n        assert HTTP_OK in r\n        assert '\"Content-Type\": \"application/xml\"' in r\n\n    def test_print_only_body_when_stdout_redirected_by_default(self, httpbin):\n        env = MockEnvironment(stdin_isatty=True, stdout_isatty=False)\n        r = http('GET', httpbin.url + '/get', env=env)\n        assert 'HTTP/' not in r\n\n    def test_print_overridable_when_stdout_redirected(self, httpbin):\n        env = MockEnvironment(stdin_isatty=True, stdout_isatty=False)\n        r = http('--print=h', 'GET', httpbin.url + '/get', env=env)\n        assert HTTP_OK in r\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "test_defaults.py", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil_httpie/jakubroztocil-httpie-0f4dce9/tests/test_defaults.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:20:06Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}