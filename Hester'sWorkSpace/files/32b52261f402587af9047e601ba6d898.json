{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\nfrom ..utils import (\n    determine_ext,\n    float_or_none,\n    int_or_none,\n    parse_filesize,\n)\n\n\nclass LibraryOfCongressIE(InfoExtractor):\n    IE_NAME = 'loc'\n    IE_DESC = 'Library of Congress'\n    _VALID_URL = r'https?://(?:www\\.)?loc\\.gov/(?:item/|today/cyberlc/feature_wdesc\\.php\\?.*\\brec=)(?P<id>[0-9]+)'\n    _TESTS = [{\n        \n        'url': 'http://loc.gov/item/90716351/',\n        'md5': '353917ff7f0255aa6d4b80a034833de8',\n        'info_dict': {\n            'id': '90716351',\n            'ext': 'mp4',\n            'title': \"Pa's trip to Mars\",\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 0,\n            'view_count': int,\n        },\n    }, {\n        \n        'url': 'https://www.loc.gov/today/cyberlc/feature_wdesc.php?rec=5578',\n        'info_dict': {\n            'id': '5578',\n            'ext': 'mp4',\n            'title': 'Help! Preservation Training Needs Here, There & Everywhere',\n            'duration': 3765,\n            'view_count': int,\n            'subtitles': 'mincount:1',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        \n        'url': 'https://www.loc.gov/item/78710669/',\n        'info_dict': {\n            'id': '78710669',\n            'ext': 'mp4',\n            'title': 'La vie et la passion de Jesus-Christ',\n            'duration': 0,\n            'view_count': int,\n            'formats': 'mincount:4',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        media_id = self._search_regex(\n            (r'id=([\"\\'])media-player-(?P<id>.+?)\\1',\n             r'<video[^>]+id=([\"\\'])uuid-(?P<id>.+?)\\1',\n             r'<video[^>]+data-uuid=([\"\\'])(?P<id>.+?)\\1',\n             r'mediaObjectId\\s*:\\s*([\"\\'])(?P<id>.+?)\\1'),\n            webpage, 'media id', group='id')\n\n        data = self._download_json(\n            'https://media.loc.gov/services/v1/media?id=%s&context=json' % media_id,\n            video_id)['mediaObject']\n\n        derivative = data['derivatives'][0]\n        media_url = derivative['derivativeUrl']\n\n        title = derivative.get('shortName') or data.get('shortName') or self._og_search_title(\n            webpage)\n\n        \n        \n        media_url = media_url.replace('rtmp', 'https')\n\n        is_video = data.get('mediaType', 'v').lower() == 'v'\n        ext = determine_ext(media_url)\n        if ext not in ('mp4', 'mp3'):\n            media_url += '.mp4' if is_video else '.mp3'\n\n        if 'vod/mp4:' in media_url:\n            formats = [{\n                'url': media_url.replace('vod/mp4:', 'hls-vod/media/') + '.m3u8',\n                'format_id': 'hls',\n                'ext': 'mp4',\n                'protocol': 'm3u8_native',\n                'quality': 1,\n            }]\n        elif 'vod/mp3:' in media_url:\n            formats = [{\n                'url': media_url.replace('vod/mp3:', ''),\n                'vcodec': 'none',\n            }]\n\n        download_urls = set()\n        for m in re.finditer(\n                r'<option[^>]+value=([\"\\'])(?P<url>.+?)\\1[^>]+data-file-download=[^>]+>\\s*(?P<id>.+?)(?:(?:&nbsp;|\\s+)\\((?P<size>.+?)\\))?\\s*<', webpage):\n            format_id = m.group('id').lower()\n            if format_id == 'gif':\n                continue\n            download_url = m.group('url')\n            if download_url in download_urls:\n                continue\n            download_urls.add(download_url)\n            formats.append({\n                'url': download_url,\n                'format_id': format_id,\n                'filesize_approx': parse_filesize(m.group('size')),\n            })\n\n        self._sort_formats(formats)\n\n        duration = float_or_none(data.get('duration'))\n        view_count = int_or_none(data.get('viewCount'))\n\n        subtitles = {}\n        cc_url = data.get('ccUrl')\n        if cc_url:\n            subtitles.setdefault('en', []).append({\n                'url': cc_url,\n                'ext': 'ttml',\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': self._og_search_thumbnail(webpage, default=None),\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "comments": "# coding: utf-8\n# embedded via <div class=\"media-player\"\n# webcast embedded via mediaObjectId\n# with direct download links\n# Following algorithm was extracted from setAVSource js function\n# found in webpage\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\nfrom ..utils import (\n    determine_ext,\n    float_or_none,\n    int_or_none,\n    parse_filesize,\n)\n\n\nclass LibraryOfCongressIE(InfoExtractor):\n    IE_NAME = 'loc'\n    IE_DESC = 'Library of Congress'\n    _VALID_URL = r'https?://(?:www\\.)?loc\\.gov/(?:item/|today/cyberlc/feature_wdesc\\.php\\?.*\\brec=)(?P<id>[0-9]+)'\n    _TESTS = [{\n        # embedded via <div class=\"media-player\"\n        'url': 'http://loc.gov/item/90716351/',\n        'md5': '353917ff7f0255aa6d4b80a034833de8',\n        'info_dict': {\n            'id': '90716351',\n            'ext': 'mp4',\n            'title': \"Pa's trip to Mars\",\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 0,\n            'view_count': int,\n        },\n    }, {\n        # webcast embedded via mediaObjectId\n        'url': 'https://www.loc.gov/today/cyberlc/feature_wdesc.php?rec=5578',\n        'info_dict': {\n            'id': '5578',\n            'ext': 'mp4',\n            'title': 'Help! Preservation Training Needs Here, There & Everywhere',\n            'duration': 3765,\n            'view_count': int,\n            'subtitles': 'mincount:1',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with direct download links\n        'url': 'https://www.loc.gov/item/78710669/',\n        'info_dict': {\n            'id': '78710669',\n            'ext': 'mp4',\n            'title': 'La vie et la passion de Jesus-Christ',\n            'duration': 0,\n            'view_count': int,\n            'formats': 'mincount:4',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        media_id = self._search_regex(\n            (r'id=([\"\\'])media-player-(?P<id>.+?)\\1',\n             r'<video[^>]+id=([\"\\'])uuid-(?P<id>.+?)\\1',\n             r'<video[^>]+data-uuid=([\"\\'])(?P<id>.+?)\\1',\n             r'mediaObjectId\\s*:\\s*([\"\\'])(?P<id>.+?)\\1'),\n            webpage, 'media id', group='id')\n\n        data = self._download_json(\n            'https://media.loc.gov/services/v1/media?id=%s&context=json' % media_id,\n            video_id)['mediaObject']\n\n        derivative = data['derivatives'][0]\n        media_url = derivative['derivativeUrl']\n\n        title = derivative.get('shortName') or data.get('shortName') or self._og_search_title(\n            webpage)\n\n        # Following algorithm was extracted from setAVSource js function\n        # found in webpage\n        media_url = media_url.replace('rtmp', 'https')\n\n        is_video = data.get('mediaType', 'v').lower() == 'v'\n        ext = determine_ext(media_url)\n        if ext not in ('mp4', 'mp3'):\n            media_url += '.mp4' if is_video else '.mp3'\n\n        if 'vod/mp4:' in media_url:\n            formats = [{\n                'url': media_url.replace('vod/mp4:', 'hls-vod/media/') + '.m3u8',\n                'format_id': 'hls',\n                'ext': 'mp4',\n                'protocol': 'm3u8_native',\n                'quality': 1,\n            }]\n        elif 'vod/mp3:' in media_url:\n            formats = [{\n                'url': media_url.replace('vod/mp3:', ''),\n                'vcodec': 'none',\n            }]\n\n        download_urls = set()\n        for m in re.finditer(\n                r'<option[^>]+value=([\"\\'])(?P<url>.+?)\\1[^>]+data-file-download=[^>]+>\\s*(?P<id>.+?)(?:(?:&nbsp;|\\s+)\\((?P<size>.+?)\\))?\\s*<', webpage):\n            format_id = m.group('id').lower()\n            if format_id == 'gif':\n                continue\n            download_url = m.group('url')\n            if download_url in download_urls:\n                continue\n            download_urls.add(download_url)\n            formats.append({\n                'url': download_url,\n                'format_id': format_id,\n                'filesize_approx': parse_filesize(m.group('size')),\n            })\n\n        self._sort_formats(formats)\n\n        duration = float_or_none(data.get('duration'))\n        view_count = int_or_none(data.get('viewCount'))\n\n        subtitles = {}\n        cc_url = data.get('ccUrl')\n        if cc_url:\n            subtitles.setdefault('en', []).append({\n                'url': cc_url,\n                'ext': 'ttml',\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': self._og_search_thumbnail(webpage, default=None),\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "libraryofcongress.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/libraryofcongress.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}