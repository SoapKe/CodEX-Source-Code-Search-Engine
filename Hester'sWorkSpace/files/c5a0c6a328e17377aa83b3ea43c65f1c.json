{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n# Copyright: (C) 2017-18, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {\n    'status': ['preview'],\n    'supported_by': 'community',\n    'metadata_version': '1.1'\n}\n\nDOCUMENTATION = '''\n---\nmodule: digital_ocean_floating_ip_facts\nshort_description: DigitalOcean Floating IPs facts\ndescription:\n     - This module can be used to fetch DigitalOcean Floating IPs facts.\nversion_added: \"2.5\"\nauthor: \"Patrick Marques (@pmarques)\"\nextends_documentation_fragment: digital_ocean.documentation\nnotes:\n  - Version 2 of DigitalOcean API is used.\nrequirements:\n  - \"python >= 2.6\"\n'''\n\n\nEXAMPLES = '''\n- name: \"Gather facts about all Floating IPs\"\n  digital_ocean_floating_ip_facts:\n  register: result\n\n- name: \"List of current floating ips\"\n  debug: var=result.floating_ips\n'''\n\n\nRETURN = '''\n\nfloating_ips:\n    description: a DigitalOcean Floating IP resource\n    returned: success and no resource constraint\n    type: list\n    sample: [\n      {\n        \"ip\": \"45.55.96.47\",\n        \"droplet\": null,\n        \"region\": {\n          \"name\": \"New York 3\",\n          \"slug\": \"nyc3\",\n          \"sizes\": [\n            \"512mb\",\n            \"1gb\",\n            \"2gb\",\n            \"4gb\",\n            \"8gb\",\n            \"16gb\",\n            \"32gb\",\n            \"48gb\",\n            \"64gb\"\n          ],\n          \"features\": [\n            \"private_networking\",\n            \"backups\",\n            \"ipv6\",\n            \"metadata\"\n          ],\n          \"available\": true\n        },\n        \"locked\": false\n      }\n    ]\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.digital_ocean import DigitalOceanHelper\nfrom ansible.module_utils._text import to_native\n\n\ndef core(module):\n    rest = DigitalOceanHelper(module)\n\n    page = 1\n    has_next = True\n    floating_ips = []\n    status_code = None\n    while has_next or status_code != 200:\n        response = rest.get(\"floating_ips?page={0}&per_page=20\".format(page))\n        status_code = response.status_code\n        \n        if status_code != 200:\n            break\n        page += 1\n        floating_ips.extend(response.json[\"floating_ips\"])\n        has_next = \"pages\" in response.json[\"links\"] and \"next\" in response.json[\"links\"][\"pages\"]\n\n    if status_code == 200:\n        module.exit_json(changed=False, floating_ips=floating_ips)\n    else:\n        module.fail_json(msg=\"Error fetching facts [{0}: {1}]\".format(\n            status_code, response.json[\"message\"]))\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=DigitalOceanHelper.digital_ocean_argument_spec()\n    )\n\n    try:\n        core(module)\n    except Exception as e:\n        module.fail_json(msg=to_native(e))\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  digital ocean floating ip facts short description  digitalocean floating ips facts description         this module used fetch digitalocean floating ips facts  version added   2 5  author   patrick marques ( pmarques)  extends documentation fragment  digital ocean documentation notes      version 2 digitalocean api used  requirements       python    2 6        examples         name   gather facts floating ips    digital ocean floating ip facts    register  result    name   list current floating ips    debug  var result floating ips       return         digital ocean api info https   developers digitalocean com documentation v2  floating ips floating ips      description  digitalocean floating ip resource     returned  success resource constraint     type  list     sample                     ip    45 55 96 47            droplet   null           region                name    new york 3              slug    nyc3              sizes                  512mb                1gb                2gb                4gb                8gb                16gb                32gb                48gb                64gb                          features                  private networking                backups                ipv6                metadata                          available   true                     locked   false                       usr bin python        coding  utf 8        copyright  (c) 2017 18  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    digital ocean api info https   developers digitalocean com documentation v2  floating ips    stop error pagination ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# Copyright: (C) 2017-18, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {\n    'status': ['preview'],\n    'supported_by': 'community',\n    'metadata_version': '1.1'\n}\n\nDOCUMENTATION = '''\n---\nmodule: digital_ocean_floating_ip_facts\nshort_description: DigitalOcean Floating IPs facts\ndescription:\n     - This module can be used to fetch DigitalOcean Floating IPs facts.\nversion_added: \"2.5\"\nauthor: \"Patrick Marques (@pmarques)\"\nextends_documentation_fragment: digital_ocean.documentation\nnotes:\n  - Version 2 of DigitalOcean API is used.\nrequirements:\n  - \"python >= 2.6\"\n'''\n\n\nEXAMPLES = '''\n- name: \"Gather facts about all Floating IPs\"\n  digital_ocean_floating_ip_facts:\n  register: result\n\n- name: \"List of current floating ips\"\n  debug: var=result.floating_ips\n'''\n\n\nRETURN = '''\n# Digital Ocean API info https://developers.digitalocean.com/documentation/v2/#floating-ips\nfloating_ips:\n    description: a DigitalOcean Floating IP resource\n    returned: success and no resource constraint\n    type: list\n    sample: [\n      {\n        \"ip\": \"45.55.96.47\",\n        \"droplet\": null,\n        \"region\": {\n          \"name\": \"New York 3\",\n          \"slug\": \"nyc3\",\n          \"sizes\": [\n            \"512mb\",\n            \"1gb\",\n            \"2gb\",\n            \"4gb\",\n            \"8gb\",\n            \"16gb\",\n            \"32gb\",\n            \"48gb\",\n            \"64gb\"\n          ],\n          \"features\": [\n            \"private_networking\",\n            \"backups\",\n            \"ipv6\",\n            \"metadata\"\n          ],\n          \"available\": true\n        },\n        \"locked\": false\n      }\n    ]\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.digital_ocean import DigitalOceanHelper\nfrom ansible.module_utils._text import to_native\n\n\ndef core(module):\n    rest = DigitalOceanHelper(module)\n\n    page = 1\n    has_next = True\n    floating_ips = []\n    status_code = None\n    while has_next or status_code != 200:\n        response = rest.get(\"floating_ips?page={0}&per_page=20\".format(page))\n        status_code = response.status_code\n        # stop if any error during pagination\n        if status_code != 200:\n            break\n        page += 1\n        floating_ips.extend(response.json[\"floating_ips\"])\n        has_next = \"pages\" in response.json[\"links\"] and \"next\" in response.json[\"links\"][\"pages\"]\n\n    if status_code == 200:\n        module.exit_json(changed=False, floating_ips=floating_ips)\n    else:\n        module.fail_json(msg=\"Error fetching facts [{0}: {1}]\".format(\n            status_code, response.json[\"message\"]))\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=DigitalOceanHelper.digital_ocean_argument_spec()\n    )\n\n    try:\n        core(module)\n    except Exception as e:\n        module.fail_json(msg=to_native(e))\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "digital_ocean_floating_ip_facts.py", "id": "c5a0c6a328e17377aa83b3ea43c65f1c", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/digital_ocean/digital_ocean_floating_ip_facts.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}