{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import models, fields, api, _\nfrom odoo.addons import decimal_precision as dp\nfrom odoo.tools.safe_eval import safe_eval\nfrom odoo.exceptions import UserError, ValidationError\n\n\nclass PriceRule(models.Model):\n    _name = \"delivery.price.rule\"\n    _description = \"Delivery Price Rules\"\n    _order = 'sequence, list_price, id'\n\n    @api.depends('variable', 'operator', 'max_value', 'list_base_price', 'list_price', 'variable_factor')\n    def _compute_name(self):\n        for rule in self:\n            name = 'if %s %s %s then' % (rule.variable, rule.operator, rule.max_value)\n            if rule.list_base_price and not rule.list_price:\n                name = '%s fixed price %s' % (name, rule.list_base_price)\n            elif rule.list_price and not rule.list_base_price:\n                name = '%s %s times %s' % (name, rule.list_price, rule.variable_factor)\n            else:\n                name = '%s fixed price %s plus %s times %s' % (name, rule.list_base_price, rule.list_price, rule.variable_factor)\n            rule.name = name\n\n    name = fields.Char(compute='_compute_name')\n    sequence = fields.Integer(required=True, default=10)\n    carrier_id = fields.Many2one('delivery.carrier', 'Carrier', required=True, ondelete='cascade')\n\n    variable = fields.Selection([('weight', 'Weight'), ('volume', 'Volume'), ('wv', 'Weight * Volume'), ('price', 'Price'), ('quantity', 'Quantity')], required=True, default='weight')\n    operator = fields.Selection([('==', '='), ('<=', '<='), ('<', '<'), ('>=', '>='), ('>', '>')], required=True, default='<=')\n    max_value = fields.Float('Maximum Value', required=True)\n    list_base_price = fields.Float(string='Sale Base Price', digits=dp.get_precision('Product Price'), required=True, default=0.0)\n    list_price = fields.Float('Sale Price', digits=dp.get_precision('Product Price'), required=True, default=0.0)\n    variable_factor = fields.Selection([('weight', 'Weight'), ('volume', 'Volume'), ('wv', 'Weight * Volume'), ('price', 'Price'), ('quantity', 'Quantity')], 'Variable Factor', required=True, default='weight')\n\n\nclass ProviderGrid(models.Model):\n    _inherit = 'delivery.carrier'\n\n    delivery_type = fields.Selection(selection_add=[('base_on_rule', 'Based on Rules')])\n    price_rule_ids = fields.One2many('delivery.price.rule', 'carrier_id', 'Pricing Rules', copy=True)\n\n    def base_on_rule_rate_shipment(self, order):\n        carrier = self._match_address(order.partner_shipping_id)\n        if not carrier:\n            return {'success': False,\n                    'price': 0.0,\n                    'error_message': _('Error: no matching grid.'),\n                    'warning_message': False}\n\n        try:\n            price_unit = self._get_price_available(order)\n        except UserError as e:\n            return {'success': False,\n                    'price': 0.0,\n                    'error_message': e.name,\n                    'warning_message': False}\n        if order.company_id.currency_id.id != order.pricelist_id.currency_id.id:\n            price_unit = order.company_id.currency_id.with_context(date=order.date_order).compute(price_unit, order.pricelist_id.currency_id)\n\n        return {'success': True,\n                'price': price_unit,\n                'error_message': False,\n                'warning_message': False}\n\n    def _get_price_available(self, order):\n        self.ensure_one()\n        total = weight = volume = quantity = 0\n        total_delivery = 0.0\n        for line in order.order_line:\n            if line.state == 'cancel':\n                continue\n            if line.is_delivery:\n                total_delivery += line.price_total\n            if not line.product_id or line.is_delivery:\n                continue\n            qty = line.product_uom._compute_quantity(line.product_uom_qty, line.product_id.uom_id)\n            weight += (line.product_id.weight or 0.0) * qty\n            volume += (line.product_id.volume or 0.0) * qty\n            quantity += qty\n        total = (order.amount_total or 0.0) - total_delivery\n\n        total = order.currency_id.with_context(date=order.date_order).compute(total, order.company_id.currency_id)\n\n        return self._get_price_from_picking(total, weight, volume, quantity)\n\n    def _get_price_from_picking(self, total, weight, volume, quantity):\n        price = 0.0\n        criteria_found = False\n        price_dict = {'price': total, 'volume': volume, 'weight': weight, 'wv': volume * weight, 'quantity': quantity}\n        for line in self.price_rule_ids:\n            test = safe_eval(line.variable + line.operator + str(line.max_value), price_dict)\n            if test:\n                price = line.list_base_price + line.list_price * price_dict[line.variable_factor]\n                criteria_found = True\n                break\n        if not criteria_found:\n            raise UserError(_(\"No price rule matching this order; delivery cost cannot be computed.\"))\n\n        return price\n\n    def base_on_rule_send_shipping(self, pickings):\n        res = []\n        for p in pickings:\n            carrier = self._match_address(p.partner_id)\n            if not carrier:\n                raise ValidationError(_('Error: no matching grid.'))\n            res = res + [{'exact_price': p.carrier_id._get_price_available(p.sale_id) if p.sale_id else 0.0,  \n                          'tracking_number': False}]\n        return res\n\n    def base_on_rule_get_tracking_link(self, picking):\n        return False\n\n    def base_on_rule_cancel_shipment(self, pickings):\n        raise NotImplementedError()\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     todo cleanme ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import models, fields, api, _\nfrom odoo.addons import decimal_precision as dp\nfrom odoo.tools.safe_eval import safe_eval\nfrom odoo.exceptions import UserError, ValidationError\n\n\nclass PriceRule(models.Model):\n    _name = \"delivery.price.rule\"\n    _description = \"Delivery Price Rules\"\n    _order = 'sequence, list_price, id'\n\n    @api.depends('variable', 'operator', 'max_value', 'list_base_price', 'list_price', 'variable_factor')\n    def _compute_name(self):\n        for rule in self:\n            name = 'if %s %s %s then' % (rule.variable, rule.operator, rule.max_value)\n            if rule.list_base_price and not rule.list_price:\n                name = '%s fixed price %s' % (name, rule.list_base_price)\n            elif rule.list_price and not rule.list_base_price:\n                name = '%s %s times %s' % (name, rule.list_price, rule.variable_factor)\n            else:\n                name = '%s fixed price %s plus %s times %s' % (name, rule.list_base_price, rule.list_price, rule.variable_factor)\n            rule.name = name\n\n    name = fields.Char(compute='_compute_name')\n    sequence = fields.Integer(required=True, default=10)\n    carrier_id = fields.Many2one('delivery.carrier', 'Carrier', required=True, ondelete='cascade')\n\n    variable = fields.Selection([('weight', 'Weight'), ('volume', 'Volume'), ('wv', 'Weight * Volume'), ('price', 'Price'), ('quantity', 'Quantity')], required=True, default='weight')\n    operator = fields.Selection([('==', '='), ('<=', '<='), ('<', '<'), ('>=', '>='), ('>', '>')], required=True, default='<=')\n    max_value = fields.Float('Maximum Value', required=True)\n    list_base_price = fields.Float(string='Sale Base Price', digits=dp.get_precision('Product Price'), required=True, default=0.0)\n    list_price = fields.Float('Sale Price', digits=dp.get_precision('Product Price'), required=True, default=0.0)\n    variable_factor = fields.Selection([('weight', 'Weight'), ('volume', 'Volume'), ('wv', 'Weight * Volume'), ('price', 'Price'), ('quantity', 'Quantity')], 'Variable Factor', required=True, default='weight')\n\n\nclass ProviderGrid(models.Model):\n    _inherit = 'delivery.carrier'\n\n    delivery_type = fields.Selection(selection_add=[('base_on_rule', 'Based on Rules')])\n    price_rule_ids = fields.One2many('delivery.price.rule', 'carrier_id', 'Pricing Rules', copy=True)\n\n    def base_on_rule_rate_shipment(self, order):\n        carrier = self._match_address(order.partner_shipping_id)\n        if not carrier:\n            return {'success': False,\n                    'price': 0.0,\n                    'error_message': _('Error: no matching grid.'),\n                    'warning_message': False}\n\n        try:\n            price_unit = self._get_price_available(order)\n        except UserError as e:\n            return {'success': False,\n                    'price': 0.0,\n                    'error_message': e.name,\n                    'warning_message': False}\n        if order.company_id.currency_id.id != order.pricelist_id.currency_id.id:\n            price_unit = order.company_id.currency_id.with_context(date=order.date_order).compute(price_unit, order.pricelist_id.currency_id)\n\n        return {'success': True,\n                'price': price_unit,\n                'error_message': False,\n                'warning_message': False}\n\n    def _get_price_available(self, order):\n        self.ensure_one()\n        total = weight = volume = quantity = 0\n        total_delivery = 0.0\n        for line in order.order_line:\n            if line.state == 'cancel':\n                continue\n            if line.is_delivery:\n                total_delivery += line.price_total\n            if not line.product_id or line.is_delivery:\n                continue\n            qty = line.product_uom._compute_quantity(line.product_uom_qty, line.product_id.uom_id)\n            weight += (line.product_id.weight or 0.0) * qty\n            volume += (line.product_id.volume or 0.0) * qty\n            quantity += qty\n        total = (order.amount_total or 0.0) - total_delivery\n\n        total = order.currency_id.with_context(date=order.date_order).compute(total, order.company_id.currency_id)\n\n        return self._get_price_from_picking(total, weight, volume, quantity)\n\n    def _get_price_from_picking(self, total, weight, volume, quantity):\n        price = 0.0\n        criteria_found = False\n        price_dict = {'price': total, 'volume': volume, 'weight': weight, 'wv': volume * weight, 'quantity': quantity}\n        for line in self.price_rule_ids:\n            test = safe_eval(line.variable + line.operator + str(line.max_value), price_dict)\n            if test:\n                price = line.list_base_price + line.list_price * price_dict[line.variable_factor]\n                criteria_found = True\n                break\n        if not criteria_found:\n            raise UserError(_(\"No price rule matching this order; delivery cost cannot be computed.\"))\n\n        return price\n\n    def base_on_rule_send_shipping(self, pickings):\n        res = []\n        for p in pickings:\n            carrier = self._match_address(p.partner_id)\n            if not carrier:\n                raise ValidationError(_('Error: no matching grid.'))\n            res = res + [{'exact_price': p.carrier_id._get_price_available(p.sale_id) if p.sale_id else 0.0,  # TODO cleanme\n                          'tracking_number': False}]\n        return res\n\n    def base_on_rule_get_tracking_link(self, picking):\n        return False\n\n    def base_on_rule_cancel_shipment(self, pickings):\n        raise NotImplementedError()\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "delivery_grid.py", "id": "45c3cd92a5fc3c2bbb9773c6769b9210", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/delivery/models/delivery_grid.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}