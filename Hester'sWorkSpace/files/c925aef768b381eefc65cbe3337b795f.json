{"author": "jakubroztocil", "code": "class BasePlugin(object):\n\n    \n    name = None\n\n    \n    \n    description = None\n\n    \n    package_name = None\n\n\nclass AuthPlugin(BasePlugin):\n    \n        return content\n", "comments": "\n    Base auth plugin class.\n\n    See <https://github.com/httpie/httpie-ntlm> for an example auth plugin.\n\n    See also `test_auth_plugins.py`\n\n    \"\"\"\n    # The value that should be passed to --auth-type\n    # to use this auth plugin. Eg. \"my-auth\"\n    auth_type = None\n\n    # Set to `False` to make it possible to invoke this auth\n    # plugin without requiring the user to specify credentials\n    # through `--auth, -a`.\n    auth_require = True\n\n    # By default the `-a` argument is parsed for `username:password`.\n    # Set this to `False` to disable the parsing and error handling.\n    auth_parse = True\n\n    # If both `auth_parse` and `prompt_password` are set to `True`,\n    # and the value of `-a` lacks the password part,\n    # then the user will be prompted to type the password in.\n    prompt_password = True\n\n    # Will be set to the raw value of `-a` (if provided) before\n    # `get_auth()` gets called.\n    raw_auth = None\n\n    def get_auth(self, username=None, password=None):\n        \"\"\"\n        If `auth_parse` is set to `True`, then `username`\n        and `password` contain the parsed credentials.\n\n        Use `self.raw_auth` to access the raw value passed through\n        `--auth, -a`.\n\n        Return a ``requests.auth.AuthBase`` subclass instance.\n\n        \"\"\"\n        raise NotImplementedError()\n\n\nclass TransportPlugin(BasePlugin):\n    \"\"\"\n\n    http://docs.python-requests.org/en/latest/user/advanced/#transport-adapters\n\n    \"\"\"\n\n    # The URL prefix the adapter should be mount to.\n    prefix = None\n\n    def get_adapter(self):\n        \"\"\"\n        Return a ``requests.adapters.BaseAdapter`` subclass instance to be\n        mounted to ``self.prefix``.\n\n        \"\"\"\n        raise NotImplementedError()\n\n\nclass ConverterPlugin(object):\n\n    def __init__(self, mime):\n        self.mime = mime\n\n    def convert(self, content_bytes):\n        raise NotImplementedError\n\n    @classmethod\n    def supports(cls, mime):\n        raise NotImplementedError\n\n\nclass FormatterPlugin(object):\n\n    def __init__(self, **kwargs):\n        \"\"\"\n        :param env: an class:`Environment` instance\n        :param kwargs: additional keyword argument that some\n                       processor might require.\n\n        \"\"\"\n        self.enabled = True\n        self.kwargs = kwargs\n\n    def format_headers(self, headers):\n        \"\"\"Return processed `headers`\n\n        :param headers: The headers as text.\n\n        \"\"\"\n        return headers\n\n    def format_body(self, content, mime):\n        \"\"\"Return processed `content`.\n\n        :param mime: E.g., 'application/atom+xml'.\n        :param content: The body content as text\n\n        \n \n# The name of the plugin, eg. \"My auth\".\n# Optional short description. Will be be shown in the help\n# under --auth-type.\n# This be set automatically once the plugin has been loaded.\n", "content": "class BasePlugin(object):\n\n    # The name of the plugin, eg. \"My auth\".\n    name = None\n\n    # Optional short description. Will be be shown in the help\n    # under --auth-type.\n    description = None\n\n    # This be set automatically once the plugin has been loaded.\n    package_name = None\n\n\nclass AuthPlugin(BasePlugin):\n    \"\"\"\n    Base auth plugin class.\n\n    See <https://github.com/httpie/httpie-ntlm> for an example auth plugin.\n\n    See also `test_auth_plugins.py`\n\n    \"\"\"\n    # The value that should be passed to --auth-type\n    # to use this auth plugin. Eg. \"my-auth\"\n    auth_type = None\n\n    # Set to `False` to make it possible to invoke this auth\n    # plugin without requiring the user to specify credentials\n    # through `--auth, -a`.\n    auth_require = True\n\n    # By default the `-a` argument is parsed for `username:password`.\n    # Set this to `False` to disable the parsing and error handling.\n    auth_parse = True\n\n    # If both `auth_parse` and `prompt_password` are set to `True`,\n    # and the value of `-a` lacks the password part,\n    # then the user will be prompted to type the password in.\n    prompt_password = True\n\n    # Will be set to the raw value of `-a` (if provided) before\n    # `get_auth()` gets called.\n    raw_auth = None\n\n    def get_auth(self, username=None, password=None):\n        \"\"\"\n        If `auth_parse` is set to `True`, then `username`\n        and `password` contain the parsed credentials.\n\n        Use `self.raw_auth` to access the raw value passed through\n        `--auth, -a`.\n\n        Return a ``requests.auth.AuthBase`` subclass instance.\n\n        \"\"\"\n        raise NotImplementedError()\n\n\nclass TransportPlugin(BasePlugin):\n    \"\"\"\n\n    http://docs.python-requests.org/en/latest/user/advanced/#transport-adapters\n\n    \"\"\"\n\n    # The URL prefix the adapter should be mount to.\n    prefix = None\n\n    def get_adapter(self):\n        \"\"\"\n        Return a ``requests.adapters.BaseAdapter`` subclass instance to be\n        mounted to ``self.prefix``.\n\n        \"\"\"\n        raise NotImplementedError()\n\n\nclass ConverterPlugin(object):\n\n    def __init__(self, mime):\n        self.mime = mime\n\n    def convert(self, content_bytes):\n        raise NotImplementedError\n\n    @classmethod\n    def supports(cls, mime):\n        raise NotImplementedError\n\n\nclass FormatterPlugin(object):\n\n    def __init__(self, **kwargs):\n        \"\"\"\n        :param env: an class:`Environment` instance\n        :param kwargs: additional keyword argument that some\n                       processor might require.\n\n        \"\"\"\n        self.enabled = True\n        self.kwargs = kwargs\n\n    def format_headers(self, headers):\n        \"\"\"Return processed `headers`\n\n        :param headers: The headers as text.\n\n        \"\"\"\n        return headers\n\n    def format_body(self, content, mime):\n        \"\"\"Return processed `content`.\n\n        :param mime: E.g., 'application/atom+xml'.\n        :param content: The body content as text\n\n        \"\"\"\n        return content\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "base.py", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil_httpie/jakubroztocil-httpie-0f4dce9/httpie/plugins/base.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:20:06Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}