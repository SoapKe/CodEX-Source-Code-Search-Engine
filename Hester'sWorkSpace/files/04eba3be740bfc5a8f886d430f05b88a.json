{"author": "ansible", "code": "\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = | *rax_mon_entity* -> rax_mon_check ->\n  rax_mon_notification -> rax_mon_notification_plan -> rax_mon_alarm\nversion_added: \"2.0\"\noptions:\n  label:\n    description:\n    - Defines a name for this entity. Must be a non-empty string between 1 and\n      255 characters long.\n    required: true\n  state:\n    description:\n    - Ensure that an entity with this C(name) exists or does not exist.\n    choices: [\"present\", \"absent\"]\n  agent_id:\n    description:\n    - Rackspace monitoring agent on the target device to which this entity is\n      bound. Necessary to collect C(agent.) rax_mon_checks against this entity.\n  named_ip_addresses:\n    description:\n    - Hash of IP addresses that may be referenced by name by rax_mon_checks\n      added to this entity. Must be a dictionary of with keys that are names\n      between 1 and 64 characters long, and values that are valid IPv4 or IPv6\n      addresses.\n  metadata:\n    description:\n    - Hash of arbitrary C(name), C(value) pairs that are passed to associated\n      rax_mon_alarms. Names and values must all be between 1 and 255 characters\n      long.\nauthor: Ash Wilson\nextends_documentation_fragment: rackspace.openstack\n'''\n\nEXAMPLES = '''\n- name: Entity example\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n  - name: Ensure an entity exists\n    rax_mon_entity:\n      credentials: ~/.rax_pub\n      state: present\n      label: my_entity\n      named_ip_addresses:\n        web_box: 192.0.2.4\n        db_box: 192.0.2.5\n      meta:\n        hurf: durf\n    register: the_entity\n'''\n\ntry:\n    import pyrax\n    HAS_PYRAX = True\nexcept ImportError:\n    HAS_PYRAX = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.rax import rax_argument_spec, rax_required_together, setup_rax_module\n\n\ndef cloud_monitoring(module, state, label, agent_id, named_ip_addresses,\n                     metadata):\n\n    if len(label) < 1 or len(label) > 255:\n        module.fail_json(msg='label must be between 1 and 255 characters long')\n\n    changed = False\n\n    cm = pyrax.cloud_monitoring\n    if not cm:\n        module.fail_json(msg='Failed to instantiate client. This typically '\n                             'indicates an invalid region or an incorrectly '\n                             'capitalized region name.')\n\n    existing = []\n    for entity in cm.list_entities():\n        if label == entity.label:\n            existing.append(entity)\n\n    entity = None\n\n    if existing:\n        entity = existing[0]\n\n    if state == 'present':\n        should_update = False\n        should_delete = False\n        should_create = False\n\n        if len(existing) > 1:\n            module.fail_json(msg='%s existing entities have the label %s.' %\n                                 (len(existing), label))\n\n        if entity:\n            if named_ip_addresses and named_ip_addresses != entity.ip_addresses:\n                should_delete = should_create = True\n\n            \n            should_update = agent_id and agent_id != entity.agent_id or \\\n                (metadata and metadata != entity.metadata)\n\n            if should_update and not should_delete:\n                entity.update(agent_id, metadata)\n                changed = True\n\n            if should_delete:\n                entity.delete()\n        else:\n            should_create = True\n\n        if should_create:\n            \n            entity = cm.create_entity(label=label, agent=agent_id,\n                                      ip_addresses=named_ip_addresses,\n                                      metadata=metadata)\n            changed = True\n    else:\n        \n        for e in existing:\n            e.delete()\n            changed = True\n\n    if entity:\n        entity_dict = {\n            \"id\": entity.id,\n            \"name\": entity.name,\n            \"agent_id\": entity.agent_id,\n        }\n        module.exit_json(changed=changed, entity=entity_dict)\n    else:\n        module.exit_json(changed=changed)\n\n\ndef main():\n    argument_spec = rax_argument_spec()\n    argument_spec.update(\n        dict(\n            state=dict(default='present', choices=['present', 'absent']),\n            label=dict(required=True),\n            agent_id=dict(),\n            named_ip_addresses=dict(type='dict', default={}),\n            metadata=dict(type='dict', default={})\n        )\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        required_together=rax_required_together()\n    )\n\n    if not HAS_PYRAX:\n        module.fail_json(msg='pyrax is required for this module')\n\n    state = module.params.get('state')\n\n    label = module.params.get('label')\n    agent_id = module.params.get('agent_id')\n    named_ip_addresses = module.params.get('named_ip_addresses')\n    metadata = module.params.get('metadata')\n\n    setup_rax_module(module, pyrax)\n\n    cloud_monitoring(module, state, label, agent_id, named_ip_addresses, metadata)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  rax mon entity short description  create delete rackspace cloud monitoring entity description    create delete rackspace cloud monitoring entity  represents device   monitor  entities associate checks alarms target system   provide convenient  centralized place store ip addresses  rackspace   monitoring module flow    rax mon entity     rax mon check      rax mon notification    rax mon notification plan    rax mon alarm version added   2 0  options    label      description        defines name entity  must non empty string 1       255 characters long      required  true   state      description        ensure entity c(name) exists exist      choices    present    absent     agent id      description        rackspace monitoring agent target device entity       bound  necessary collect c(agent ) rax mon checks entity    named ip addresses      description        hash ip addresses may referenced name rax mon checks       added entity  must dictionary keys names       1 64 characters long  values valid ipv4 ipv6       addresses    metadata      description        hash arbitrary c(name)  c(value) pairs passed associated       rax mon alarms  names values must 1 255 characters       long  author  ash wilson extends documentation fragment  rackspace openstack      examples         name  entity example   gather facts  false   hosts  local   connection  local   tasks      name  ensure entity exists     rax mon entity        credentials     rax pub       state  present       label  entity       named ip addresses          web box  192 0 2 4         db box  192 0 2 5       meta          hurf  durf     register  entity         usr bin python    copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    change existing entity  unless nothing     create new entity     delete existing entities  ", "content": "#!/usr/bin/python\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rax_mon_entity\nshort_description: Create or delete a Rackspace Cloud Monitoring entity\ndescription:\n- Create or delete a Rackspace Cloud Monitoring entity, which represents a device\n  to monitor. Entities associate checks and alarms with a target system and\n  provide a convenient, centralized place to store IP addresses. Rackspace\n  monitoring module flow | *rax_mon_entity* -> rax_mon_check ->\n  rax_mon_notification -> rax_mon_notification_plan -> rax_mon_alarm\nversion_added: \"2.0\"\noptions:\n  label:\n    description:\n    - Defines a name for this entity. Must be a non-empty string between 1 and\n      255 characters long.\n    required: true\n  state:\n    description:\n    - Ensure that an entity with this C(name) exists or does not exist.\n    choices: [\"present\", \"absent\"]\n  agent_id:\n    description:\n    - Rackspace monitoring agent on the target device to which this entity is\n      bound. Necessary to collect C(agent.) rax_mon_checks against this entity.\n  named_ip_addresses:\n    description:\n    - Hash of IP addresses that may be referenced by name by rax_mon_checks\n      added to this entity. Must be a dictionary of with keys that are names\n      between 1 and 64 characters long, and values that are valid IPv4 or IPv6\n      addresses.\n  metadata:\n    description:\n    - Hash of arbitrary C(name), C(value) pairs that are passed to associated\n      rax_mon_alarms. Names and values must all be between 1 and 255 characters\n      long.\nauthor: Ash Wilson\nextends_documentation_fragment: rackspace.openstack\n'''\n\nEXAMPLES = '''\n- name: Entity example\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n  - name: Ensure an entity exists\n    rax_mon_entity:\n      credentials: ~/.rax_pub\n      state: present\n      label: my_entity\n      named_ip_addresses:\n        web_box: 192.0.2.4\n        db_box: 192.0.2.5\n      meta:\n        hurf: durf\n    register: the_entity\n'''\n\ntry:\n    import pyrax\n    HAS_PYRAX = True\nexcept ImportError:\n    HAS_PYRAX = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.rax import rax_argument_spec, rax_required_together, setup_rax_module\n\n\ndef cloud_monitoring(module, state, label, agent_id, named_ip_addresses,\n                     metadata):\n\n    if len(label) < 1 or len(label) > 255:\n        module.fail_json(msg='label must be between 1 and 255 characters long')\n\n    changed = False\n\n    cm = pyrax.cloud_monitoring\n    if not cm:\n        module.fail_json(msg='Failed to instantiate client. This typically '\n                             'indicates an invalid region or an incorrectly '\n                             'capitalized region name.')\n\n    existing = []\n    for entity in cm.list_entities():\n        if label == entity.label:\n            existing.append(entity)\n\n    entity = None\n\n    if existing:\n        entity = existing[0]\n\n    if state == 'present':\n        should_update = False\n        should_delete = False\n        should_create = False\n\n        if len(existing) > 1:\n            module.fail_json(msg='%s existing entities have the label %s.' %\n                                 (len(existing), label))\n\n        if entity:\n            if named_ip_addresses and named_ip_addresses != entity.ip_addresses:\n                should_delete = should_create = True\n\n            # Change an existing Entity, unless there's nothing to do.\n            should_update = agent_id and agent_id != entity.agent_id or \\\n                (metadata and metadata != entity.metadata)\n\n            if should_update and not should_delete:\n                entity.update(agent_id, metadata)\n                changed = True\n\n            if should_delete:\n                entity.delete()\n        else:\n            should_create = True\n\n        if should_create:\n            # Create a new Entity.\n            entity = cm.create_entity(label=label, agent=agent_id,\n                                      ip_addresses=named_ip_addresses,\n                                      metadata=metadata)\n            changed = True\n    else:\n        # Delete the existing Entities.\n        for e in existing:\n            e.delete()\n            changed = True\n\n    if entity:\n        entity_dict = {\n            \"id\": entity.id,\n            \"name\": entity.name,\n            \"agent_id\": entity.agent_id,\n        }\n        module.exit_json(changed=changed, entity=entity_dict)\n    else:\n        module.exit_json(changed=changed)\n\n\ndef main():\n    argument_spec = rax_argument_spec()\n    argument_spec.update(\n        dict(\n            state=dict(default='present', choices=['present', 'absent']),\n            label=dict(required=True),\n            agent_id=dict(),\n            named_ip_addresses=dict(type='dict', default={}),\n            metadata=dict(type='dict', default={})\n        )\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        required_together=rax_required_together()\n    )\n\n    if not HAS_PYRAX:\n        module.fail_json(msg='pyrax is required for this module')\n\n    state = module.params.get('state')\n\n    label = module.params.get('label')\n    agent_id = module.params.get('agent_id')\n    named_ip_addresses = module.params.get('named_ip_addresses')\n    metadata = module.params.get('metadata')\n\n    setup_rax_module(module, pyrax)\n\n    cloud_monitoring(module, state, label, agent_id, named_ip_addresses, metadata)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "rax_mon_entity.py", "id": "04eba3be740bfc5a8f886d430f05b88a", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/rackspace/rax_mon_entity.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}