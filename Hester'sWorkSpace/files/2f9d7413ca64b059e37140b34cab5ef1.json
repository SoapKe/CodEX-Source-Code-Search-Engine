{"author": "spotify", "code": " -*- coding: utf-8 -*-\n\n Copyright 2012-2015 Spotify AB\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\nfrom luigi import six\n\nimport luigi\n\n\nclass InputText(luigi.ExternalTask):\n    \"\"\"\n    This class represents something that was created elsewhere by an external process,\n    so all we want to do is to implement the output method.\n    \"\"\"\n    date = luigi.DateParameter()\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, it expects a file to be present in the local file system.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.LocalTarget(self.date.strftime('/var/tmp/text/%Y-%m-%d.txt'))\n\n\nclass WordCount(luigi.Task):\n    date_interval = luigi.DateIntervalParameter()\n\n    def requires(self):\n        \"\"\"\n        This task's dependencies:\n\n        * :py:class:`~.InputText`\n\n        :return: list of object (:py:class:`luigi.task.Task`)\n        \"\"\"\n        return [InputText(date) for date in self.date_interval.dates()]\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, a successful execution of this task will create a file on the local filesystem.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.LocalTarget('/var/tmp/text-count/%s' % self.date_interval)\n\n    def run(self):\n        \"\"\"\n        1. count the words for each of the :py:meth:`~.InputText.output` targets created by :py:class:`~.InputText`\n        2. write the count into the :py:meth:`~.WordCount.output` target\n        \"\"\"\n        count = {}\n\n         NOTE: self.input() actually returns an element for the InputText.output() target\n        for f in self.input():   The input() method is a wrapper around requires() that returns Target objects\n            for line in f.open('r'):   Target objects are a file system/format abstraction and this will return a file stream object\n                for word in line.strip().split():\n                    count[word] = count.get(word, 0) + 1\n\n         output data\n        f = self.output().open('w')\n        for word, count in six.iteritems(count):\n            f.write(\"%s\\t%d\\n\" % (word, count))\n        f.close()   WARNING: file system operations are atomic therefore if you don't close the file you lose all data\n", "comments": "        this class represents something created elsewhere external process      want implement output method              date   luigi dateparameter()      def output(self)                      returns target output task          in case  expects file present local file system            return  target output task           rtype  object ( py class  luigi target target )                     return luigi localtarget(self date strftime(  var tmp text  y   txt ))   class wordcount(luigi task)      date interval   luigi dateintervalparameter()      def requires(self)                      this task dependencies              py class    inputtext            return  list object ( py class  luigi task task )                     return  inputtext(date) date self date interval dates()       def output(self)                      returns target output task          in case  successful execution task create file local filesystem            return  target output task           rtype  object ( py class  luigi target target )                     return luigi localtarget(  var tmp text count     self date interval)      def run(self)                      1  count words  py meth    inputtext output  targets created  py class    inputtext          2  write count  py meth    wordcount output  target                    coding  utf 8           copyright 2012 2015 spotify ab       licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license       http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license        note  self input() actually returns element inputtext output() target    the input() method wrapper around requires() returns target objects    target objects file system format abstraction return file stream object    output data    warning  file system operations atomic therefore close file lose data ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright 2012-2015 Spotify AB\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nfrom luigi import six\n\nimport luigi\n\n\nclass InputText(luigi.ExternalTask):\n    \"\"\"\n    This class represents something that was created elsewhere by an external process,\n    so all we want to do is to implement the output method.\n    \"\"\"\n    date = luigi.DateParameter()\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, it expects a file to be present in the local file system.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.LocalTarget(self.date.strftime('/var/tmp/text/%Y-%m-%d.txt'))\n\n\nclass WordCount(luigi.Task):\n    date_interval = luigi.DateIntervalParameter()\n\n    def requires(self):\n        \"\"\"\n        This task's dependencies:\n\n        * :py:class:`~.InputText`\n\n        :return: list of object (:py:class:`luigi.task.Task`)\n        \"\"\"\n        return [InputText(date) for date in self.date_interval.dates()]\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, a successful execution of this task will create a file on the local filesystem.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.LocalTarget('/var/tmp/text-count/%s' % self.date_interval)\n\n    def run(self):\n        \"\"\"\n        1. count the words for each of the :py:meth:`~.InputText.output` targets created by :py:class:`~.InputText`\n        2. write the count into the :py:meth:`~.WordCount.output` target\n        \"\"\"\n        count = {}\n\n        # NOTE: self.input() actually returns an element for the InputText.output() target\n        for f in self.input():  # The input() method is a wrapper around requires() that returns Target objects\n            for line in f.open('r'):  # Target objects are a file system/format abstraction and this will return a file stream object\n                for word in line.strip().split():\n                    count[word] = count.get(word, 0) + 1\n\n        # output data\n        f = self.output().open('w')\n        for word, count in six.iteritems(count):\n            f.write(\"%s\\t%d\\n\" % (word, count))\n        f.close()  # WARNING: file system operations are atomic therefore if you don't close the file you lose all data\n", "description": "Luigi is a Python module that helps you build complex pipelines of batch jobs. It handles dependency resolution, workflow management, visualization etc. It also comes with Hadoop support built in. ", "file_name": "wordcount.py", "id": "2f9d7413ca64b059e37140b34cab5ef1", "language": "Python", "project_name": "luigi", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/spotify-luigi/spotify-luigi-3cf763d/examples/wordcount.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:09:25Z", "url": "https://github.com/spotify/luigi", "wiki": false}