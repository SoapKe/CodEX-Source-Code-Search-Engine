{"author": "jakubroztocil", "code": "\n    args = httpie.cli.parser.parse_args(args=[url], env=MockEnvironment())\n    assert args.auth\n    assert args.auth.username == 'username'\n    assert args.auth.password == ''\n\n\ndef test_missing_auth(httpbin):\n    r = http(\n        '--auth-type=basic',\n        'GET',\n        httpbin + '/basic-auth/user/password',\n        error_exit_ok=True\n    )\n    assert HTTP_OK not in r\n    assert '--auth required' in r.stderr\n", "comments": "HTTP authentication-related tests.\"\"\"\nimport mock\nimport pytest\n\nfrom utils import http, add_auth, HTTP_OK, MockEnvironment\nimport httpie.input\nimport httpie.cli\n\n\ndef test_basic_auth(httpbin_both):\n    r = http('--auth=user:password',\n             'GET', httpbin_both + '/basic-auth/user/password')\n    assert HTTP_OK in r\n    assert r.json == {'authenticated': True, 'user': 'user'}\n\n\n@pytest.mark.parametrize('argument_name', ['--auth-type', '-A'])\ndef test_digest_auth(httpbin_both, argument_name):\n    r = http(argument_name + '=digest', '--auth=user:password',\n             'GET', httpbin_both.url + '/digest-auth/auth/user/password')\n    assert HTTP_OK in r\n    assert r.json == {'authenticated': True, 'user': 'user'}\n\n\n@mock.patch('httpie.input.AuthCredentials._getpass',\n            new=lambda self, prompt: 'password')\ndef test_password_prompt(httpbin):\n    r = http('--auth', 'user',\n             'GET', httpbin.url + '/basic-auth/user/password')\n    assert HTTP_OK in r\n    assert r.json == {'authenticated': True, 'user': 'user'}\n\n\ndef test_credentials_in_url(httpbin_both):\n    url = add_auth(httpbin_both.url + '/basic-auth/user/password',\n                   auth='user:password')\n    r = http('GET', url)\n    assert HTTP_OK in r\n    assert r.json == {'authenticated': True, 'user': 'user'}\n\n\ndef test_credentials_in_url_auth_flag_has_priority(httpbin_both):\n    \"\"\"When credentials are passed in URL and via -a at the same time,\n     then the ones from -a are used.\"\"\"\n    url = add_auth(httpbin_both.url + '/basic-auth/user/password',\n                   auth='user:wrong')\n    r = http('--auth=user:password', 'GET', url)\n    assert HTTP_OK in r\n    assert r.json == {'authenticated': True, 'user': 'user'}\n\n\n@pytest.mark.parametrize('url', [\n    'username@example.org',\n    'username:@example.org',\n])\ndef test_only_username_in_url(url):\n    \"\"\"\n    https://github.com/jakubroztocil/httpie/issues/242\n\n    \n \n", "content": "\"\"\"HTTP authentication-related tests.\"\"\"\nimport mock\nimport pytest\n\nfrom utils import http, add_auth, HTTP_OK, MockEnvironment\nimport httpie.input\nimport httpie.cli\n\n\ndef test_basic_auth(httpbin_both):\n    r = http('--auth=user:password',\n             'GET', httpbin_both + '/basic-auth/user/password')\n    assert HTTP_OK in r\n    assert r.json == {'authenticated': True, 'user': 'user'}\n\n\n@pytest.mark.parametrize('argument_name', ['--auth-type', '-A'])\ndef test_digest_auth(httpbin_both, argument_name):\n    r = http(argument_name + '=digest', '--auth=user:password',\n             'GET', httpbin_both.url + '/digest-auth/auth/user/password')\n    assert HTTP_OK in r\n    assert r.json == {'authenticated': True, 'user': 'user'}\n\n\n@mock.patch('httpie.input.AuthCredentials._getpass',\n            new=lambda self, prompt: 'password')\ndef test_password_prompt(httpbin):\n    r = http('--auth', 'user',\n             'GET', httpbin.url + '/basic-auth/user/password')\n    assert HTTP_OK in r\n    assert r.json == {'authenticated': True, 'user': 'user'}\n\n\ndef test_credentials_in_url(httpbin_both):\n    url = add_auth(httpbin_both.url + '/basic-auth/user/password',\n                   auth='user:password')\n    r = http('GET', url)\n    assert HTTP_OK in r\n    assert r.json == {'authenticated': True, 'user': 'user'}\n\n\ndef test_credentials_in_url_auth_flag_has_priority(httpbin_both):\n    \"\"\"When credentials are passed in URL and via -a at the same time,\n     then the ones from -a are used.\"\"\"\n    url = add_auth(httpbin_both.url + '/basic-auth/user/password',\n                   auth='user:wrong')\n    r = http('--auth=user:password', 'GET', url)\n    assert HTTP_OK in r\n    assert r.json == {'authenticated': True, 'user': 'user'}\n\n\n@pytest.mark.parametrize('url', [\n    'username@example.org',\n    'username:@example.org',\n])\ndef test_only_username_in_url(url):\n    \"\"\"\n    https://github.com/jakubroztocil/httpie/issues/242\n\n    \"\"\"\n    args = httpie.cli.parser.parse_args(args=[url], env=MockEnvironment())\n    assert args.auth\n    assert args.auth.username == 'username'\n    assert args.auth.password == ''\n\n\ndef test_missing_auth(httpbin):\n    r = http(\n        '--auth-type=basic',\n        'GET',\n        httpbin + '/basic-auth/user/password',\n        error_exit_ok=True\n    )\n    assert HTTP_OK not in r\n    assert '--auth required' in r.stderr\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "test_auth.py", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil_httpie/jakubroztocil-httpie-0f4dce9/tests/test_auth.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:20:06Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}