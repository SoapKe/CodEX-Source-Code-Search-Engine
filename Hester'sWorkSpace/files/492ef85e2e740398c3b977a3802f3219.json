{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport itertools\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_unquote\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    remove_end,\n    try_get,\n)\n\n\nclass MailRuIE(InfoExtractor):\n    IE_NAME = 'mailru'\n    IE_DESC = '\u0412\u0438\u0434\u0435\u043e@Mail.Ru'\n    _VALID_URL = r\n    _TESTS = [\n        {\n            'url': 'http://my.mail.ru/video/top\n            'md5': 'dea205f03120046894db4ebb6159879a',\n            'info_dict': {\n                'id': '46301138_76',\n                'ext': 'mp4',\n                'title': '\u041d\u043e\u0432\u044b\u0439 \u0427\u0435\u043b\u043e\u0432\u0435\u043a-\u041f\u0430\u0443\u043a. \u0412\u044b\u0441\u043e\u043a\u043e\u0435 \u043d\u0430\u043f\u0440\u044f\u0436\u0435\u043d\u0438\u0435. \u0412\u043e\u0441\u0441\u0442\u0430\u043d\u0438\u0435 \u042d\u043b\u0435\u043a\u0442\u0440\u043e',\n                'timestamp': 1393235077,\n                'upload_date': '20140224',\n                'uploader': 'sonypicturesrus',\n                'uploader_id': 'sonypicturesrus@mail.ru',\n                'duration': 184,\n            },\n            'skip': 'Not accessible from Travis CI server',\n        },\n        {\n            'url': 'http://my.mail.ru/corp/hitech/video/news_hi-tech_mail_ru/1263.html',\n            'md5': '00a91a58c3402204dcced523777b475f',\n            'info_dict': {\n                'id': '46843144_1263',\n                'ext': 'mp4',\n                'title': 'Samsung Galaxy S5 Hammer Smash Fail Battery Explosion',\n                'timestamp': 1397039888,\n                'upload_date': '20140409',\n                'uploader': 'hitech',\n                'uploader_id': 'hitech@corp.mail.ru',\n                'duration': 245,\n            },\n            'skip': 'Not accessible from Travis CI server',\n        },\n        {\n            \n            'url': 'http://my.mail.ru/mail/720pizle/video/_myvideo/502.html',\n            'md5': '3b26d2491c6949d031a32b96bd97c096',\n            'info_dict': {\n                'id': '56664382_502',\n                'ext': 'mp4',\n                'title': ':8336',\n                'timestamp': 1449094163,\n                'upload_date': '20151202',\n                'uploader': '720pizle@mail.ru',\n                'uploader_id': '720pizle@mail.ru',\n                'duration': 6001,\n            },\n            'skip': 'Not accessible from Travis CI server',\n        },\n        {\n            'url': 'http://m.my.mail.ru/mail/3sktvtr/video/_myvideo/138.html',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://my.mail.ru/video/embed/7949340477499637815',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://my.mail.ru/+/video/meta/7949340477499637815',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        meta_id = mobj.group('metaid')\n\n        video_id = None\n        if meta_id:\n            meta_url = 'https://my.mail.ru/+/video/meta/%s' % meta_id\n        else:\n            video_id = mobj.group('idv1')\n            if not video_id:\n                video_id = mobj.group('idv2prefix') + mobj.group('idv2suffix')\n            webpage = self._download_webpage(url, video_id)\n            page_config = self._parse_json(self._search_regex(\n                r'(?s)<script[^>]+class=\"sp-video__page-config\"[^>]*>(.+?)</script>',\n                webpage, 'page config', default='{}'), video_id, fatal=False)\n            if page_config:\n                meta_url = page_config.get('metaUrl') or page_config.get('video', {}).get('metaUrl')\n            else:\n                meta_url = None\n\n        video_data = None\n        if meta_url:\n            video_data = self._download_json(\n                meta_url, video_id or meta_id, 'Downloading video meta JSON',\n                fatal=not video_id)\n\n        \n        if not video_data:\n            video_data = self._download_json(\n                'http://api.video.mail.ru/videos/%s.json?new=1' % video_id,\n                video_id, 'Downloading video JSON')\n\n        formats = []\n        for f in video_data['videos']:\n            video_url = f.get('url')\n            if not video_url:\n                continue\n            format_id = f.get('key')\n            height = int_or_none(self._search_regex(\n                r'^(\\d+)[pP]$', format_id, 'height', default=None)) if format_id else None\n            formats.append({\n                'url': video_url,\n                'format_id': format_id,\n                'height': height,\n            })\n        self._sort_formats(formats)\n\n        meta_data = video_data['meta']\n        title = remove_end(meta_data['title'], '.mp4')\n\n        author = video_data.get('author')\n        uploader = author.get('name')\n        uploader_id = author.get('id') or author.get('email')\n        view_count = int_or_none(video_data.get('viewsCount') or video_data.get('views_count'))\n\n        acc_id = meta_data.get('accId')\n        item_id = meta_data.get('itemId')\n        content_id = '%s_%s' % (acc_id, item_id) if acc_id and item_id else video_id\n\n        thumbnail = meta_data.get('poster')\n        duration = int_or_none(meta_data.get('duration'))\n        timestamp = int_or_none(meta_data.get('timestamp'))\n\n        return {\n            'id': content_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats,\n        }\n\n\nclass MailRuMusicSearchBaseIE(InfoExtractor):\n    def _search(self, query, url, audio_id, limit=100, offset=0):\n        search = self._download_json(\n            'https://my.mail.ru/cgi-bin/my/ajax', audio_id,\n            'Downloading songs JSON page %d' % (offset // limit + 1),\n            headers={\n                'Referer': url,\n                'X-Requested-With': 'XMLHttpRequest',\n            }, query={\n                'xemail': '',\n                'ajax_call': '1',\n                'func_name': 'music.search',\n                'mna': '',\n                'mnb': '',\n                'arg_query': query,\n                'arg_extended': '1',\n                'arg_search_params': json.dumps({\n                    'music': {\n                        'limit': limit,\n                        'offset': offset,\n                    },\n                }),\n                'arg_limit': limit,\n                'arg_offset': offset,\n            })\n        return next(e for e in search if isinstance(e, dict))\n\n    @staticmethod\n    def _extract_track(t, fatal=True):\n        audio_url = t['URL'] if fatal else t.get('URL')\n        if not audio_url:\n            return\n\n        audio_id = t['File'] if fatal else t.get('File')\n        if not audio_id:\n            return\n\n        thumbnail = t.get('AlbumCoverURL') or t.get('FiledAlbumCover')\n        uploader = t.get('OwnerName') or t.get('OwnerName_Text_HTML')\n        uploader_id = t.get('UploaderID')\n        duration = int_or_none(t.get('DurationInSeconds')) or parse_duration(\n            t.get('Duration') or t.get('DurationStr'))\n        view_count = int_or_none(t.get('PlayCount') or t.get('PlayCount_hr'))\n\n        track = t.get('Name') or t.get('Name_Text_HTML')\n        artist = t.get('Author') or t.get('Author_Text_HTML')\n\n        if track:\n            title = '%s - %s' % (artist, track) if artist else track\n        else:\n            title = audio_id\n\n        return {\n            'extractor_key': MailRuMusicIE.ie_key(),\n            'id': audio_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'duration': duration,\n            'view_count': view_count,\n            'vcodec': 'none',\n            'abr': int_or_none(t.get('BitRate')),\n            'track': track,\n            'artist': artist,\n            'album': t.get('Album'),\n            'url': audio_url,\n        }\n\n\nclass MailRuMusicIE(MailRuMusicSearchBaseIE):\n    IE_NAME = 'mailru:music'\n    IE_DESC = '\u041c\u0443\u0437\u044b\u043a\u0430@Mail.Ru'\n    _VALID_URL = r'https?://my\\.mail\\.ru/music/songs/[^/?\n    _TESTS = [{\n        'url': 'https://my.mail.ru/music/songs/%D0%BC8%D0%BB8%D1%82%D1%85-l-a-h-luciferian-aesthetics-of-herrschaft-single-2017-4e31f7125d0dfaef505d947642366893',\n        'md5': '0f8c22ef8c5d665b13ac709e63025610',\n        'info_dict': {\n            'id': '4e31f7125d0dfaef505d947642366893',\n            'ext': 'mp3',\n            'title': 'L.A.H. (Luciferian Aesthetics of Herrschaft) single, 2017 - \u041c8\u041b8\u0422\u0425',\n            'uploader': '\u0418\u0433\u043e\u0440\u044c \u041c\u0443\u0434\u0440\u044b\u0439',\n            'uploader_id': '1459196328',\n            'duration': 280,\n            'view_count': int,\n            'vcodec': 'none',\n            'abr': 320,\n            'track': 'L.A.H. (Luciferian Aesthetics of Herrschaft) single, 2017',\n            'artist': '\u041c8\u041b8\u0422\u0425',\n        },\n    }]\n\n    def _real_extract(self, url):\n        audio_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, audio_id)\n\n        title = self._og_search_title(webpage)\n        music_data = self._search(title, url, audio_id)['MusicData']\n        t = next(t for t in music_data if t.get('File') == audio_id)\n\n        info = self._extract_track(t)\n        info['title'] = title\n        return info\n\n\nclass MailRuMusicSearchIE(MailRuMusicSearchBaseIE):\n    IE_NAME = 'mailru:music:search'\n    IE_DESC = '\u041c\u0443\u0437\u044b\u043a\u0430@Mail.Ru'\n    _VALID_URL = r'https?://my\\.mail\\.ru/music/search/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'https://my.mail.ru/music/search/black%20shadow',\n        'info_dict': {\n            'id': 'black shadow',\n        },\n        'playlist_mincount': 532,\n    }]\n\n    def _real_extract(self, url):\n        query = compat_urllib_parse_unquote(self._match_id(url))\n\n        entries = []\n\n        LIMIT = 100\n        offset = 0\n\n        for _ in itertools.count(1):\n            search = self._search(query, url, query, LIMIT, offset)\n\n            music_data = search.get('MusicData')\n            if not music_data or not isinstance(music_data, list):\n                break\n\n            for t in music_data:\n                track = self._extract_track(t, fatal=False)\n                if track:\n                    entries.append(track)\n\n            total = try_get(\n                search, lambda x: x['Results']['music']['Total'], int)\n\n            if total is not None:\n                if offset > total:\n                    break\n\n            offset += LIMIT\n\n        return self.playlist_result(entries, query)\n", "comments": "(?x)\n                    https?://\n                        (?:(?:www|m)\\.)?my\\.mail\\.ru/\n                        (?:\n                            video/.*\\#video=/?(?P<idv1>(?:[^/]+/){3}\\d+)|\n                            (?:(?P<idv2prefix>(?:[^/]+/){2})video/(?P<idv2suffix>[^/]+/\\d+))\\.html|\n                            (?:video/embed|\\+/video/meta)/(?P<metaid>\\d+)\n                        )\n                    \n \n# coding: utf-8\n#video=/mail/sonypicturesrus/75/76',\n# only available via metaUrl API\n# Fallback old approach\n#&]+-(?P<id>[\\da-f]+)'\n#&]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport itertools\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_unquote\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    remove_end,\n    try_get,\n)\n\n\nclass MailRuIE(InfoExtractor):\n    IE_NAME = 'mailru'\n    IE_DESC = '\u0412\u0438\u0434\u0435\u043e@Mail.Ru'\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:(?:www|m)\\.)?my\\.mail\\.ru/\n                        (?:\n                            video/.*\\#video=/?(?P<idv1>(?:[^/]+/){3}\\d+)|\n                            (?:(?P<idv2prefix>(?:[^/]+/){2})video/(?P<idv2suffix>[^/]+/\\d+))\\.html|\n                            (?:video/embed|\\+/video/meta)/(?P<metaid>\\d+)\n                        )\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://my.mail.ru/video/top#video=/mail/sonypicturesrus/75/76',\n            'md5': 'dea205f03120046894db4ebb6159879a',\n            'info_dict': {\n                'id': '46301138_76',\n                'ext': 'mp4',\n                'title': '\u041d\u043e\u0432\u044b\u0439 \u0427\u0435\u043b\u043e\u0432\u0435\u043a-\u041f\u0430\u0443\u043a. \u0412\u044b\u0441\u043e\u043a\u043e\u0435 \u043d\u0430\u043f\u0440\u044f\u0436\u0435\u043d\u0438\u0435. \u0412\u043e\u0441\u0441\u0442\u0430\u043d\u0438\u0435 \u042d\u043b\u0435\u043a\u0442\u0440\u043e',\n                'timestamp': 1393235077,\n                'upload_date': '20140224',\n                'uploader': 'sonypicturesrus',\n                'uploader_id': 'sonypicturesrus@mail.ru',\n                'duration': 184,\n            },\n            'skip': 'Not accessible from Travis CI server',\n        },\n        {\n            'url': 'http://my.mail.ru/corp/hitech/video/news_hi-tech_mail_ru/1263.html',\n            'md5': '00a91a58c3402204dcced523777b475f',\n            'info_dict': {\n                'id': '46843144_1263',\n                'ext': 'mp4',\n                'title': 'Samsung Galaxy S5 Hammer Smash Fail Battery Explosion',\n                'timestamp': 1397039888,\n                'upload_date': '20140409',\n                'uploader': 'hitech',\n                'uploader_id': 'hitech@corp.mail.ru',\n                'duration': 245,\n            },\n            'skip': 'Not accessible from Travis CI server',\n        },\n        {\n            # only available via metaUrl API\n            'url': 'http://my.mail.ru/mail/720pizle/video/_myvideo/502.html',\n            'md5': '3b26d2491c6949d031a32b96bd97c096',\n            'info_dict': {\n                'id': '56664382_502',\n                'ext': 'mp4',\n                'title': ':8336',\n                'timestamp': 1449094163,\n                'upload_date': '20151202',\n                'uploader': '720pizle@mail.ru',\n                'uploader_id': '720pizle@mail.ru',\n                'duration': 6001,\n            },\n            'skip': 'Not accessible from Travis CI server',\n        },\n        {\n            'url': 'http://m.my.mail.ru/mail/3sktvtr/video/_myvideo/138.html',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://my.mail.ru/video/embed/7949340477499637815',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://my.mail.ru/+/video/meta/7949340477499637815',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        meta_id = mobj.group('metaid')\n\n        video_id = None\n        if meta_id:\n            meta_url = 'https://my.mail.ru/+/video/meta/%s' % meta_id\n        else:\n            video_id = mobj.group('idv1')\n            if not video_id:\n                video_id = mobj.group('idv2prefix') + mobj.group('idv2suffix')\n            webpage = self._download_webpage(url, video_id)\n            page_config = self._parse_json(self._search_regex(\n                r'(?s)<script[^>]+class=\"sp-video__page-config\"[^>]*>(.+?)</script>',\n                webpage, 'page config', default='{}'), video_id, fatal=False)\n            if page_config:\n                meta_url = page_config.get('metaUrl') or page_config.get('video', {}).get('metaUrl')\n            else:\n                meta_url = None\n\n        video_data = None\n        if meta_url:\n            video_data = self._download_json(\n                meta_url, video_id or meta_id, 'Downloading video meta JSON',\n                fatal=not video_id)\n\n        # Fallback old approach\n        if not video_data:\n            video_data = self._download_json(\n                'http://api.video.mail.ru/videos/%s.json?new=1' % video_id,\n                video_id, 'Downloading video JSON')\n\n        formats = []\n        for f in video_data['videos']:\n            video_url = f.get('url')\n            if not video_url:\n                continue\n            format_id = f.get('key')\n            height = int_or_none(self._search_regex(\n                r'^(\\d+)[pP]$', format_id, 'height', default=None)) if format_id else None\n            formats.append({\n                'url': video_url,\n                'format_id': format_id,\n                'height': height,\n            })\n        self._sort_formats(formats)\n\n        meta_data = video_data['meta']\n        title = remove_end(meta_data['title'], '.mp4')\n\n        author = video_data.get('author')\n        uploader = author.get('name')\n        uploader_id = author.get('id') or author.get('email')\n        view_count = int_or_none(video_data.get('viewsCount') or video_data.get('views_count'))\n\n        acc_id = meta_data.get('accId')\n        item_id = meta_data.get('itemId')\n        content_id = '%s_%s' % (acc_id, item_id) if acc_id and item_id else video_id\n\n        thumbnail = meta_data.get('poster')\n        duration = int_or_none(meta_data.get('duration'))\n        timestamp = int_or_none(meta_data.get('timestamp'))\n\n        return {\n            'id': content_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats,\n        }\n\n\nclass MailRuMusicSearchBaseIE(InfoExtractor):\n    def _search(self, query, url, audio_id, limit=100, offset=0):\n        search = self._download_json(\n            'https://my.mail.ru/cgi-bin/my/ajax', audio_id,\n            'Downloading songs JSON page %d' % (offset // limit + 1),\n            headers={\n                'Referer': url,\n                'X-Requested-With': 'XMLHttpRequest',\n            }, query={\n                'xemail': '',\n                'ajax_call': '1',\n                'func_name': 'music.search',\n                'mna': '',\n                'mnb': '',\n                'arg_query': query,\n                'arg_extended': '1',\n                'arg_search_params': json.dumps({\n                    'music': {\n                        'limit': limit,\n                        'offset': offset,\n                    },\n                }),\n                'arg_limit': limit,\n                'arg_offset': offset,\n            })\n        return next(e for e in search if isinstance(e, dict))\n\n    @staticmethod\n    def _extract_track(t, fatal=True):\n        audio_url = t['URL'] if fatal else t.get('URL')\n        if not audio_url:\n            return\n\n        audio_id = t['File'] if fatal else t.get('File')\n        if not audio_id:\n            return\n\n        thumbnail = t.get('AlbumCoverURL') or t.get('FiledAlbumCover')\n        uploader = t.get('OwnerName') or t.get('OwnerName_Text_HTML')\n        uploader_id = t.get('UploaderID')\n        duration = int_or_none(t.get('DurationInSeconds')) or parse_duration(\n            t.get('Duration') or t.get('DurationStr'))\n        view_count = int_or_none(t.get('PlayCount') or t.get('PlayCount_hr'))\n\n        track = t.get('Name') or t.get('Name_Text_HTML')\n        artist = t.get('Author') or t.get('Author_Text_HTML')\n\n        if track:\n            title = '%s - %s' % (artist, track) if artist else track\n        else:\n            title = audio_id\n\n        return {\n            'extractor_key': MailRuMusicIE.ie_key(),\n            'id': audio_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'duration': duration,\n            'view_count': view_count,\n            'vcodec': 'none',\n            'abr': int_or_none(t.get('BitRate')),\n            'track': track,\n            'artist': artist,\n            'album': t.get('Album'),\n            'url': audio_url,\n        }\n\n\nclass MailRuMusicIE(MailRuMusicSearchBaseIE):\n    IE_NAME = 'mailru:music'\n    IE_DESC = '\u041c\u0443\u0437\u044b\u043a\u0430@Mail.Ru'\n    _VALID_URL = r'https?://my\\.mail\\.ru/music/songs/[^/?#&]+-(?P<id>[\\da-f]+)'\n    _TESTS = [{\n        'url': 'https://my.mail.ru/music/songs/%D0%BC8%D0%BB8%D1%82%D1%85-l-a-h-luciferian-aesthetics-of-herrschaft-single-2017-4e31f7125d0dfaef505d947642366893',\n        'md5': '0f8c22ef8c5d665b13ac709e63025610',\n        'info_dict': {\n            'id': '4e31f7125d0dfaef505d947642366893',\n            'ext': 'mp3',\n            'title': 'L.A.H. (Luciferian Aesthetics of Herrschaft) single, 2017 - \u041c8\u041b8\u0422\u0425',\n            'uploader': '\u0418\u0433\u043e\u0440\u044c \u041c\u0443\u0434\u0440\u044b\u0439',\n            'uploader_id': '1459196328',\n            'duration': 280,\n            'view_count': int,\n            'vcodec': 'none',\n            'abr': 320,\n            'track': 'L.A.H. (Luciferian Aesthetics of Herrschaft) single, 2017',\n            'artist': '\u041c8\u041b8\u0422\u0425',\n        },\n    }]\n\n    def _real_extract(self, url):\n        audio_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, audio_id)\n\n        title = self._og_search_title(webpage)\n        music_data = self._search(title, url, audio_id)['MusicData']\n        t = next(t for t in music_data if t.get('File') == audio_id)\n\n        info = self._extract_track(t)\n        info['title'] = title\n        return info\n\n\nclass MailRuMusicSearchIE(MailRuMusicSearchBaseIE):\n    IE_NAME = 'mailru:music:search'\n    IE_DESC = '\u041c\u0443\u0437\u044b\u043a\u0430@Mail.Ru'\n    _VALID_URL = r'https?://my\\.mail\\.ru/music/search/(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'https://my.mail.ru/music/search/black%20shadow',\n        'info_dict': {\n            'id': 'black shadow',\n        },\n        'playlist_mincount': 532,\n    }]\n\n    def _real_extract(self, url):\n        query = compat_urllib_parse_unquote(self._match_id(url))\n\n        entries = []\n\n        LIMIT = 100\n        offset = 0\n\n        for _ in itertools.count(1):\n            search = self._search(query, url, query, LIMIT, offset)\n\n            music_data = search.get('MusicData')\n            if not music_data or not isinstance(music_data, list):\n                break\n\n            for t in music_data:\n                track = self._extract_track(t, fatal=False)\n                if track:\n                    entries.append(track)\n\n            total = try_get(\n                search, lambda x: x['Results']['music']['Total'], int)\n\n            if total is not None:\n                if offset > total:\n                    break\n\n            offset += LIMIT\n\n        return self.playlist_result(entries, query)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "mailru.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/mailru.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}