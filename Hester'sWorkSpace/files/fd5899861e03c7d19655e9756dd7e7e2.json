{"author": "django", "code": "\"\"\"\nTesting some internals of the template processing. These are *not* examples to be copied in user code.\n\"\"\"\nfrom django.template import Library, TemplateSyntaxError\nfrom django.template.base import (\n    TOKEN_BLOCK, FilterExpression, Parser, Token, Variable,\n)\nfrom django.template.defaultfilters import register as filter_library\nfrom django.test import SimpleTestCase\n\n\nclass ParserTests(SimpleTestCase):\n\n    def test_token_smart_split(self):\n        \"\"\"\n        #7027 -- _() syntax should work with spaces\n        \"\"\"\n        token = Token(TOKEN_BLOCK, 'sometag _(\"Page not found\") value|yesno:_(\"yes,no\")')\n        split = token.split_contents()\n        self.assertEqual(split, [\"sometag\", '_(\"Page not found\")', 'value|yesno:_(\"yes,no\")'])\n\n    def test_filter_parsing(self):\n        c = {\"article\": {\"section\": \"News\"}}\n        p = Parser(\"\", builtins=[filter_library])\n\n        def fe_test(s, val):\n            self.assertEqual(FilterExpression(s, p).resolve(c), val)\n\n        fe_test(\"article.section\", \"News\")\n        fe_test(\"article.section|upper\", \"NEWS\")\n        fe_test('\"News\"', \"News\")\n        fe_test(\"'News'\", \"News\")\n        fe_test(r'\"Some \\\"Good\\\" News\"', 'Some \"Good\" News')\n        fe_test(r'\"Some \\\"Good\\\" News\"', 'Some \"Good\" News')\n        fe_test(r\"'Some \\'Bad\\' News'\", \"Some 'Bad' News\")\n\n        fe = FilterExpression(r'\"Some \\\"Good\\\" News\"', p)\n        self.assertEqual(fe.filters, [])\n        self.assertEqual(fe.var, 'Some \"Good\" News')\n\n        \n        \n        msg = \"Variables and attributes may not begin with underscores: 'article._hidden'\"\n        with self.assertRaisesMessage(TemplateSyntaxError, msg):\n            FilterExpression(\"article._hidden|upper\", p)\n\n    def test_variable_parsing(self):\n        c = {\"article\": {\"section\": \"News\"}}\n        self.assertEqual(Variable(\"article.section\").resolve(c), \"News\")\n        self.assertEqual(Variable('\"News\"').resolve(c), \"News\")\n        self.assertEqual(Variable(\"'News'\").resolve(c), \"News\")\n\n        \n        self.assertEqual(Variable(\"_(article.section)\").resolve(c), \"News\")\n        self.assertEqual(Variable('_(\"Good News\")').resolve(c), \"Good News\")\n        self.assertEqual(Variable(\"_('Better News')\").resolve(c), \"Better News\")\n\n        \n        self.assertEqual(\n            Variable(r'\"Some \\\"Good\\\" News\"').resolve(c), 'Some \"Good\" News'\n        )\n        self.assertEqual(\n            Variable(r\"'Some \\'Better\\' News'\").resolve(c), \"Some 'Better' News\"\n        )\n\n        \n        \n        msg = \"Variables and attributes may not begin with underscores: 'article._hidden'\"\n        with self.assertRaisesMessage(TemplateSyntaxError, msg):\n            Variable(\"article._hidden\")\n\n        \n        with self.assertRaisesMessage(TypeError, \"Variable must be a string or number, got <class 'dict'>\"):\n            Variable({})\n\n    def test_filter_args_count(self):\n        parser = Parser(\"\")\n        register = Library()\n\n        @register.filter\n        def no_arguments(value):\n            pass\n\n        @register.filter\n        def one_argument(value, arg):\n            pass\n\n        @register.filter\n        def one_opt_argument(value, arg=False):\n            pass\n\n        @register.filter\n        def two_arguments(value, arg, arg2):\n            pass\n\n        @register.filter\n        def two_one_opt_arg(value, arg, arg2=False):\n            pass\n        parser.add_library(register)\n        for expr in (\n                '1|no_arguments:\"1\"',\n                '1|two_arguments',\n                '1|two_arguments:\"1\"',\n                '1|two_one_opt_arg',\n        ):\n            with self.assertRaises(TemplateSyntaxError):\n                FilterExpression(expr, parser)\n        for expr in (\n                \n                '1|no_arguments',\n                '1|one_argument:\"1\"',\n                \n                '1|one_opt_argument',\n                '1|one_opt_argument:\"1\"',\n                \n                '1|two_one_opt_arg:\"1\"',\n        ):\n            FilterExpression(expr, parser)\n", "comments": "    testing internals template processing  these   examples copied user code      django template import library  templatesyntaxerror django template base import (     token block  filterexpression  parser  token  variable  ) django template defaultfilters import register filter library django test import simpletestcase   class parsertests(simpletestcase)       def test token smart split(self)                       7027     () syntax work spaces               7027     () syntax work spaces    filtered variables reject access attributes beginning    underscores     translated strings handled correctly     escaped quotes work correctly well     variables reject access attributes beginning    underscores     variables raise non string type    correct number arguments    one optional    not supplying ", "content": "\"\"\"\nTesting some internals of the template processing. These are *not* examples to be copied in user code.\n\"\"\"\nfrom django.template import Library, TemplateSyntaxError\nfrom django.template.base import (\n    TOKEN_BLOCK, FilterExpression, Parser, Token, Variable,\n)\nfrom django.template.defaultfilters import register as filter_library\nfrom django.test import SimpleTestCase\n\n\nclass ParserTests(SimpleTestCase):\n\n    def test_token_smart_split(self):\n        \"\"\"\n        #7027 -- _() syntax should work with spaces\n        \"\"\"\n        token = Token(TOKEN_BLOCK, 'sometag _(\"Page not found\") value|yesno:_(\"yes,no\")')\n        split = token.split_contents()\n        self.assertEqual(split, [\"sometag\", '_(\"Page not found\")', 'value|yesno:_(\"yes,no\")'])\n\n    def test_filter_parsing(self):\n        c = {\"article\": {\"section\": \"News\"}}\n        p = Parser(\"\", builtins=[filter_library])\n\n        def fe_test(s, val):\n            self.assertEqual(FilterExpression(s, p).resolve(c), val)\n\n        fe_test(\"article.section\", \"News\")\n        fe_test(\"article.section|upper\", \"NEWS\")\n        fe_test('\"News\"', \"News\")\n        fe_test(\"'News'\", \"News\")\n        fe_test(r'\"Some \\\"Good\\\" News\"', 'Some \"Good\" News')\n        fe_test(r'\"Some \\\"Good\\\" News\"', 'Some \"Good\" News')\n        fe_test(r\"'Some \\'Bad\\' News'\", \"Some 'Bad' News\")\n\n        fe = FilterExpression(r'\"Some \\\"Good\\\" News\"', p)\n        self.assertEqual(fe.filters, [])\n        self.assertEqual(fe.var, 'Some \"Good\" News')\n\n        # Filtered variables should reject access of attributes beginning with\n        # underscores.\n        msg = \"Variables and attributes may not begin with underscores: 'article._hidden'\"\n        with self.assertRaisesMessage(TemplateSyntaxError, msg):\n            FilterExpression(\"article._hidden|upper\", p)\n\n    def test_variable_parsing(self):\n        c = {\"article\": {\"section\": \"News\"}}\n        self.assertEqual(Variable(\"article.section\").resolve(c), \"News\")\n        self.assertEqual(Variable('\"News\"').resolve(c), \"News\")\n        self.assertEqual(Variable(\"'News'\").resolve(c), \"News\")\n\n        # Translated strings are handled correctly.\n        self.assertEqual(Variable(\"_(article.section)\").resolve(c), \"News\")\n        self.assertEqual(Variable('_(\"Good News\")').resolve(c), \"Good News\")\n        self.assertEqual(Variable(\"_('Better News')\").resolve(c), \"Better News\")\n\n        # Escaped quotes work correctly as well.\n        self.assertEqual(\n            Variable(r'\"Some \\\"Good\\\" News\"').resolve(c), 'Some \"Good\" News'\n        )\n        self.assertEqual(\n            Variable(r\"'Some \\'Better\\' News'\").resolve(c), \"Some 'Better' News\"\n        )\n\n        # Variables should reject access of attributes beginning with\n        # underscores.\n        msg = \"Variables and attributes may not begin with underscores: 'article._hidden'\"\n        with self.assertRaisesMessage(TemplateSyntaxError, msg):\n            Variable(\"article._hidden\")\n\n        # Variables should raise on non string type\n        with self.assertRaisesMessage(TypeError, \"Variable must be a string or number, got <class 'dict'>\"):\n            Variable({})\n\n    def test_filter_args_count(self):\n        parser = Parser(\"\")\n        register = Library()\n\n        @register.filter\n        def no_arguments(value):\n            pass\n\n        @register.filter\n        def one_argument(value, arg):\n            pass\n\n        @register.filter\n        def one_opt_argument(value, arg=False):\n            pass\n\n        @register.filter\n        def two_arguments(value, arg, arg2):\n            pass\n\n        @register.filter\n        def two_one_opt_arg(value, arg, arg2=False):\n            pass\n        parser.add_library(register)\n        for expr in (\n                '1|no_arguments:\"1\"',\n                '1|two_arguments',\n                '1|two_arguments:\"1\"',\n                '1|two_one_opt_arg',\n        ):\n            with self.assertRaises(TemplateSyntaxError):\n                FilterExpression(expr, parser)\n        for expr in (\n                # Correct number of arguments\n                '1|no_arguments',\n                '1|one_argument:\"1\"',\n                # One optional\n                '1|one_opt_argument',\n                '1|one_opt_argument:\"1\"',\n                # Not supplying all\n                '1|two_one_opt_arg:\"1\"',\n        ):\n            FilterExpression(expr, parser)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_parser.py", "id": "fd5899861e03c7d19655e9756dd7e7e2", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/template_tests/test_parser.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}