{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .theplatform import ThePlatformIE\nfrom ..utils import (\n    int_or_none,\n    parse_age_limit,\n    try_get,\n    update_url_query,\n)\n\n\nclass AMCNetworksIE(ThePlatformIE):\n    _VALID_URL = r'https?://(?:www\\.)?(?:amc|bbcamerica|ifc|(?:we|sundance)tv)\\.com/(?:movies|shows(?:/[^/]+)+)/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'http://www.ifc.com/shows/maron/season-04/episode-01/step-1',\n        'md5': '',\n        'info_dict': {\n            'id': 's3MX01Nl4vPH',\n            'ext': 'mp4',\n            'title': 'Maron - Season 4 - Step 1',\n            'description': 'In denial about his current situation, Marc is reluctantly convinced by his friends to enter rehab. Starring Marc Maron and Constance Zimmer.',\n            'age_limit': 17,\n            'upload_date': '20160505',\n            'timestamp': 1462468831,\n            'uploader': 'AMCN',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n        'skip': 'Requires TV provider accounts',\n    }, {\n        'url': 'http://www.bbcamerica.com/shows/the-hunt/full-episodes/season-1/episode-01-the-hardest-challenge',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.amc.com/shows/preacher/full-episodes/season-01/episode-00/pilot',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.wetv.com/shows/million-dollar-matchmaker/season-01/episode-06-the-dumped-dj-and-shallow-hal',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.ifc.com/movies/chaos',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.bbcamerica.com/shows/doctor-who/full-episodes/the-power-of-the-daleks/episode-01-episode-1-color-version',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.wetv.com/shows/mama-june-from-not-to-hot/full-episode/season-01/thin-tervention',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.wetv.com/shows/la-hair/videos/season-05/episode-09-episode-9-2/episode-9-sneak-peek-3',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.sundancetv.com/shows/riviera/full-episodes/season-1/episode-01-episode-1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        query = {\n            'mbr': 'true',\n            'manifest': 'm3u',\n        }\n        media_url = self._search_regex(\n            r'window\\.platformLinkURL\\s*=\\s*[\\'\"]([^\\'\"]+)',\n            webpage, 'media url')\n        theplatform_metadata = self._download_theplatform_metadata(self._search_regex(\n            r'link\\.theplatform\\.com/s/([^?]+)',\n            media_url, 'theplatform_path'), display_id)\n        info = self._parse_theplatform_metadata(theplatform_metadata)\n        video_id = theplatform_metadata['pid']\n        title = theplatform_metadata['title']\n        rating = try_get(\n            theplatform_metadata, lambda x: x['ratings'][0]['rating'])\n        auth_required = self._search_regex(\n            r'window\\.authRequired\\s*=\\s*(true|false);',\n            webpage, 'auth required')\n        if auth_required == 'true':\n            requestor_id = self._search_regex(\n                r'window\\.requestor_id\\s*=\\s*[\\'\"]([^\\'\"]+)',\n                webpage, 'requestor id')\n            resource = self._get_mvpd_resource(\n                requestor_id, title, video_id, rating)\n            query['auth'] = self._extract_mvpd_auth(\n                url, video_id, requestor_id, resource)\n        media_url = update_url_query(media_url, query)\n        formats, subtitles = self._extract_theplatform_smil(\n            media_url, video_id)\n        self._sort_formats(formats)\n        info.update({\n            'id': video_id,\n            'subtitles': subtitles,\n            'formats': formats,\n            'age_limit': parse_age_limit(parse_age_limit(rating)),\n        })\n        ns_keys = theplatform_metadata.get('$xmlns', {}).keys()\n        if ns_keys:\n            ns = list(ns_keys)[0]\n            series = theplatform_metadata.get(ns + '$show')\n            season_number = int_or_none(\n                theplatform_metadata.get(ns + '$season'))\n            episode = theplatform_metadata.get(ns + '$episodeTitle')\n            episode_number = int_or_none(\n                theplatform_metadata.get(ns + '$episode'))\n            if season_number:\n                title = 'Season %d - %s' % (season_number, title)\n            if series:\n                title = '%s - %s' % (series, title)\n            info.update({\n                'title': title,\n                'series': series,\n                'season_number': season_number,\n                'episode': episode,\n                'episode_number': episode_number,\n            })\n        return info\n", "comments": "# coding: utf-8\n#]+)'\n# m3u8 download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .theplatform import ThePlatformIE\nfrom ..utils import (\n    int_or_none,\n    parse_age_limit,\n    try_get,\n    update_url_query,\n)\n\n\nclass AMCNetworksIE(ThePlatformIE):\n    _VALID_URL = r'https?://(?:www\\.)?(?:amc|bbcamerica|ifc|(?:we|sundance)tv)\\.com/(?:movies|shows(?:/[^/]+)+)/(?P<id>[^/?#]+)'\n    _TESTS = [{\n        'url': 'http://www.ifc.com/shows/maron/season-04/episode-01/step-1',\n        'md5': '',\n        'info_dict': {\n            'id': 's3MX01Nl4vPH',\n            'ext': 'mp4',\n            'title': 'Maron - Season 4 - Step 1',\n            'description': 'In denial about his current situation, Marc is reluctantly convinced by his friends to enter rehab. Starring Marc Maron and Constance Zimmer.',\n            'age_limit': 17,\n            'upload_date': '20160505',\n            'timestamp': 1462468831,\n            'uploader': 'AMCN',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n        'skip': 'Requires TV provider accounts',\n    }, {\n        'url': 'http://www.bbcamerica.com/shows/the-hunt/full-episodes/season-1/episode-01-the-hardest-challenge',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.amc.com/shows/preacher/full-episodes/season-01/episode-00/pilot',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.wetv.com/shows/million-dollar-matchmaker/season-01/episode-06-the-dumped-dj-and-shallow-hal',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.ifc.com/movies/chaos',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.bbcamerica.com/shows/doctor-who/full-episodes/the-power-of-the-daleks/episode-01-episode-1-color-version',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.wetv.com/shows/mama-june-from-not-to-hot/full-episode/season-01/thin-tervention',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.wetv.com/shows/la-hair/videos/season-05/episode-09-episode-9-2/episode-9-sneak-peek-3',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.sundancetv.com/shows/riviera/full-episodes/season-1/episode-01-episode-1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        query = {\n            'mbr': 'true',\n            'manifest': 'm3u',\n        }\n        media_url = self._search_regex(\n            r'window\\.platformLinkURL\\s*=\\s*[\\'\"]([^\\'\"]+)',\n            webpage, 'media url')\n        theplatform_metadata = self._download_theplatform_metadata(self._search_regex(\n            r'link\\.theplatform\\.com/s/([^?]+)',\n            media_url, 'theplatform_path'), display_id)\n        info = self._parse_theplatform_metadata(theplatform_metadata)\n        video_id = theplatform_metadata['pid']\n        title = theplatform_metadata['title']\n        rating = try_get(\n            theplatform_metadata, lambda x: x['ratings'][0]['rating'])\n        auth_required = self._search_regex(\n            r'window\\.authRequired\\s*=\\s*(true|false);',\n            webpage, 'auth required')\n        if auth_required == 'true':\n            requestor_id = self._search_regex(\n                r'window\\.requestor_id\\s*=\\s*[\\'\"]([^\\'\"]+)',\n                webpage, 'requestor id')\n            resource = self._get_mvpd_resource(\n                requestor_id, title, video_id, rating)\n            query['auth'] = self._extract_mvpd_auth(\n                url, video_id, requestor_id, resource)\n        media_url = update_url_query(media_url, query)\n        formats, subtitles = self._extract_theplatform_smil(\n            media_url, video_id)\n        self._sort_formats(formats)\n        info.update({\n            'id': video_id,\n            'subtitles': subtitles,\n            'formats': formats,\n            'age_limit': parse_age_limit(parse_age_limit(rating)),\n        })\n        ns_keys = theplatform_metadata.get('$xmlns', {}).keys()\n        if ns_keys:\n            ns = list(ns_keys)[0]\n            series = theplatform_metadata.get(ns + '$show')\n            season_number = int_or_none(\n                theplatform_metadata.get(ns + '$season'))\n            episode = theplatform_metadata.get(ns + '$episodeTitle')\n            episode_number = int_or_none(\n                theplatform_metadata.get(ns + '$episode'))\n            if season_number:\n                title = 'Season %d - %s' % (season_number, title)\n            if series:\n                title = '%s - %s' % (series, title)\n            info.update({\n                'title': title,\n                'series': series,\n                'season_number': season_number,\n                'episode': episode,\n                'episode_number': episode_number,\n            })\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "amcnetworks.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/amcnetworks.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}