{"author": "spotify", "code": " -*- coding: utf-8 -*-\n\n Copyright 2012-2015 Spotify AB\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\nimport luigi\nimport luigi.contrib.hadoop\nimport luigi.contrib.hdfs\n\n\n To make this run, you probably want to edit /etc/luigi/client.cfg and add something like:\n\n [hadoop]\n jar: /usr/lib/hadoop-xyz/hadoop-streaming-xyz-123.jar\n\n\nclass InputText(luigi.ExternalTask):\n    \"\"\"\n    This task is a :py:class:`luigi.task.ExternalTask` which means it doesn't generate the\n    :py:meth:`~.InputText.output` target on its own instead relying on the execution something outside of Luigi\n    to produce it.\n    \"\"\"\n\n    date = luigi.DateParameter()\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, it expects a file to be present in HDFS.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.contrib.hdfs.HdfsTarget(self.date.strftime('/tmp/text/%Y-%m-%d.txt'))\n\n\nclass WordCount(luigi.contrib.hadoop.JobTask):\n    \"\"\"\n    This task runs a :py:class:`luigi.contrib.hadoop.JobTask`\n    over the target data returned by :py:meth:`~/.InputText.output` and\n    writes the result into its :py:meth:`~.WordCount.output` target.\n\n    This class uses :py:meth:`luigi.contrib.hadoop.JobTask.run`.\n    \"\"\"\n\n    date_interval = luigi.DateIntervalParameter()\n\n    def requires(self):\n        \"\"\"\n        This task's dependencies:\n\n        * :py:class:`~.InputText`\n\n        :return: list of object (:py:class:`luigi.task.Task`)\n        \"\"\"\n        return [InputText(date) for date in self.date_interval.dates()]\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, a successful execution of this task will create a file in HDFS.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.contrib.hdfs.HdfsTarget('/tmp/text-count/%s' % self.date_interval)\n\n    def mapper(self, line):\n        for word in line.strip().split():\n            yield word, 1\n\n    def reducer(self, key, values):\n        yield key, sum(values)\n\n\nif __name__ == '__main__':\n    luigi.run()\n", "comments": "        this task  py class  luigi task externaltask  means generate      py meth    inputtext output  target instead relying execution something outside luigi     produce               date   luigi dateparameter()      def output(self)                      returns target output task          in case  expects file present hdfs            return  target output task           rtype  object ( py class  luigi target target )                     return luigi contrib hdfs hdfstarget(self date strftime(  tmp text  y   txt ))   class wordcount(luigi contrib hadoop jobtask)              this task runs  py class  luigi contrib hadoop jobtask      target data returned  py meth     inputtext output      writes result  py meth    wordcount output  target       this class uses  py meth  luigi contrib hadoop jobtask run                date interval   luigi dateintervalparameter()      def requires(self)                      this task dependencies              py class    inputtext            return  list object ( py class  luigi task task )                     return  inputtext(date) date self date interval dates()       def output(self)                      returns target output task          in case  successful execution task create file hdfs            return  target output task           rtype  object ( py class  luigi target target )                    coding  utf 8           copyright 2012 2015 spotify ab       licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license       http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license        to make run  probably want edit  etc luigi client cfg add something like         hadoop     jar   usr lib hadoop xyz hadoop streaming xyz 123 jar ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright 2012-2015 Spotify AB\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nimport luigi\nimport luigi.contrib.hadoop\nimport luigi.contrib.hdfs\n\n\n# To make this run, you probably want to edit /etc/luigi/client.cfg and add something like:\n#\n# [hadoop]\n# jar: /usr/lib/hadoop-xyz/hadoop-streaming-xyz-123.jar\n\n\nclass InputText(luigi.ExternalTask):\n    \"\"\"\n    This task is a :py:class:`luigi.task.ExternalTask` which means it doesn't generate the\n    :py:meth:`~.InputText.output` target on its own instead relying on the execution something outside of Luigi\n    to produce it.\n    \"\"\"\n\n    date = luigi.DateParameter()\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, it expects a file to be present in HDFS.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.contrib.hdfs.HdfsTarget(self.date.strftime('/tmp/text/%Y-%m-%d.txt'))\n\n\nclass WordCount(luigi.contrib.hadoop.JobTask):\n    \"\"\"\n    This task runs a :py:class:`luigi.contrib.hadoop.JobTask`\n    over the target data returned by :py:meth:`~/.InputText.output` and\n    writes the result into its :py:meth:`~.WordCount.output` target.\n\n    This class uses :py:meth:`luigi.contrib.hadoop.JobTask.run`.\n    \"\"\"\n\n    date_interval = luigi.DateIntervalParameter()\n\n    def requires(self):\n        \"\"\"\n        This task's dependencies:\n\n        * :py:class:`~.InputText`\n\n        :return: list of object (:py:class:`luigi.task.Task`)\n        \"\"\"\n        return [InputText(date) for date in self.date_interval.dates()]\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, a successful execution of this task will create a file in HDFS.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.contrib.hdfs.HdfsTarget('/tmp/text-count/%s' % self.date_interval)\n\n    def mapper(self, line):\n        for word in line.strip().split():\n            yield word, 1\n\n    def reducer(self, key, values):\n        yield key, sum(values)\n\n\nif __name__ == '__main__':\n    luigi.run()\n", "description": "Luigi is a Python module that helps you build complex pipelines of batch jobs. It handles dependency resolution, workflow management, visualization etc. It also comes with Hadoop support built in. ", "file_name": "wordcount_hadoop.py", "id": "ad70f88edcc72aad427f56f60380ba84", "language": "Python", "project_name": "luigi", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/spotify-luigi/spotify-luigi-3cf763d/examples/wordcount_hadoop.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:09:25Z", "url": "https://github.com/spotify/luigi", "wiki": false}