{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\"\"\"Model wrapper class for performing inference with a ShowAndTellModel.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\n\nfrom im2txt import show_and_tell_model\nfrom im2txt.inference_utils import inference_wrapper_base\n\n\nclass InferenceWrapper(inference_wrapper_base.InferenceWrapperBase):\n  \"\"\"Model wrapper class for performing inference with a ShowAndTellModel.\"\"\"\n\n  def __init__(self):\n    super(InferenceWrapper, self).__init__()\n\n  def build_model(self, model_config):\n    model = show_and_tell_model.ShowAndTellModel(model_config, mode=\"inference\")\n    model.build()\n    return model\n\n  def feed_image(self, sess, encoded_image):\n    initial_state = sess.run(fetches=\"lstm/initial_state:0\",\n                             feed_dict={\"image_feed:0\": encoded_image})\n    return initial_state\n\n  def inference_step(self, sess, input_feed, state_feed):\n    softmax_output, state_output = sess.run(\n        fetches=[\"softmax:0\", \"lstm/state:0\"],\n        feed_dict={\n            \"input_feed:0\": input_feed,\n            \"lstm/state_feed:0\": state_feed,\n        })\n    return softmax_output, state_output, None\n", "comments": "   model wrapper class performing inference showandtellmodel        future   import absolute import   future   import division   future   import print function    im2txt import show tell model im2txt inference utils import inference wrapper base   class inferencewrapper(inference wrapper base inferencewrapperbase)       model wrapper class performing inference showandtellmodel        copyright 2016 the tensorflow authors  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                    ", "content": "# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"Model wrapper class for performing inference with a ShowAndTellModel.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\n\nfrom im2txt import show_and_tell_model\nfrom im2txt.inference_utils import inference_wrapper_base\n\n\nclass InferenceWrapper(inference_wrapper_base.InferenceWrapperBase):\n  \"\"\"Model wrapper class for performing inference with a ShowAndTellModel.\"\"\"\n\n  def __init__(self):\n    super(InferenceWrapper, self).__init__()\n\n  def build_model(self, model_config):\n    model = show_and_tell_model.ShowAndTellModel(model_config, mode=\"inference\")\n    model.build()\n    return model\n\n  def feed_image(self, sess, encoded_image):\n    initial_state = sess.run(fetches=\"lstm/initial_state:0\",\n                             feed_dict={\"image_feed:0\": encoded_image})\n    return initial_state\n\n  def inference_step(self, sess, input_feed, state_feed):\n    softmax_output, state_output = sess.run(\n        fetches=[\"softmax:0\", \"lstm/state:0\"],\n        feed_dict={\n            \"input_feed:0\": input_feed,\n            \"lstm/state_feed:0\": state_feed,\n        })\n    return softmax_output, state_output, None\n", "description": "Models and examples built with TensorFlow", "file_name": "inference_wrapper.py", "id": "9fe4f8c1e151883f259624bb4a24fd9e", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/research/im2txt/im2txt/inference_wrapper.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}