{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n Ansible module to manage PaloAltoNetworks Firewall\n (c) 2016, techbizdev <techbizdev@paloaltonetworks.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['deprecated'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: panos_nat_policy\nshort_description: create a policy NAT rule\ndescription:\n    - Create a policy nat rule. Keep in mind that we can either end up configuring source NAT, destination NAT, or both. Instead of splitting it\n      into two we will make a fair attempt to determine which one the user wants.\nauthor: \"Luigi Mori (@jtschichold), Ivan Bojer (@ivanbojer)\"\nversion_added: \"2.3\"\nrequirements:\n    - pan-python\ndeprecated:\n    alternative: Use M(panos_nat_rule) instead.\n    removed_in: '2.9'\n    why: This module depended on outdated and old SDK, use M(panos_nat_rule) instead.\noptions:\n    ip_address:\n        description:\n            - IP address (or hostname) of PAN-OS device\n        required: true\n    password:\n        description:\n            - password for authentication\n        required: true\n    username:\n        description:\n            - username for authentication\n        default: \"admin\"\n    rule_name:\n        description:\n            - name of the SNAT rule\n        required: true\n    from_zone:\n        description:\n            - list of source zones\n        required: true\n    to_zone:\n        description:\n            - destination zone\n        required: true\n    source:\n        description:\n            - list of source addresses\n        default: [\"any\"]\n    destination:\n        description:\n            - list of destination addresses\n        default: [\"any\"]\n    service:\n        description:\n            - service\n        default: \"any\"\n    snat_type:\n        description:\n            - type of source translation\n    snat_address:\n        description:\n            - snat translated address\n    snat_interface:\n        description:\n            - snat interface\n    snat_interface_address:\n        description:\n            - snat interface address\n    snat_bidirectional:\n        description:\n            - bidirectional flag\n        type: bool\n        default: 'no'\n    dnat_address:\n        description:\n            - dnat translated address\n    dnat_port:\n        description:\n            - dnat translated port\n    override:\n        description:\n            - attempt to override rule if one with the same name already exists\n        type: bool\n        default: 'no'\n    commit:\n        description:\n            - commit if changed\n        type: bool\n        default: 'yes'\n'''\n\nEXAMPLES = '''\n Create a source and destination nat rule\n  - name: create nat SSH221 rule for 10.0.1.101\n    panos_nat:\n      ip_address: \"192.168.1.1\"\n      password: \"admin\"\n      rule_name: \"Web SSH\"\n      from_zone: [\"external\"]\n      to_zone: \"external\"\n      source: [\"any\"]\n      destination: [\"10.0.0.100\"]\n      service: \"service-tcp-221\"\n      snat_type: \"dynamic-ip-and-port\"\n      snat_interface: \"ethernet1/2\"\n      dnat_address: \"10.0.1.101\"\n      dnat_port: \"22\"\n      commit: False\n'''\n\nRETURN = '''\n Default return values\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\n\ntry:\n    import pan.xapi\n    from pan.xapi import PanXapiError\n\n    HAS_LIB = True\nexcept ImportError:\n    HAS_LIB = False\n\n_NAT_XPATH = \"/config/devices/entry[@name='localhost.localdomain']\" + \\\n             \"/vsys/entry[@name='vsys1']\" + \\\n             \"/rulebase/nat/rules/entry[@name='%s']\"\n\n\ndef nat_rule_exists(xapi, rule_name):\n    xapi.get(_NAT_XPATH % rule_name)\n    e = xapi.element_root.find('.//entry')\n    if e is None:\n        return False\n    return True\n\n\ndef dnat_xml(m, dnat_address, dnat_port):\n    if dnat_address is None and dnat_port is None:\n        return None\n\n    exml = [\"<destination-translation>\"]\n    if dnat_address is not None:\n        exml.append(\"<translated-address>%s</translated-address>\" %\n                    dnat_address)\n    if dnat_port is not None:\n        exml.append(\"<translated-port>%s</translated-port>\" %\n                    dnat_port)\n    exml.append('</destination-translation>')\n\n    return ''.join(exml)\n\n\ndef snat_xml(m, snat_type, snat_address, snat_interface,\n             snat_interface_address, snat_bidirectional):\n    if snat_type == 'static-ip':\n        if snat_address is None:\n            m.fail_json(msg=\"snat_address should be speicified \"\n                            \"for snat_type static-ip\")\n\n        exml = [\"<source-translation>\", \"<static-ip>\"]\n        if snat_bidirectional:\n            exml.append('<bi-directional>%s</bi-directional>' % 'yes')\n        else:\n            exml.append('<bi-directional>%s</bi-directional>' % 'no')\n        exml.append('<translated-address>%s</translated-address>' %\n                    snat_address)\n        exml.append('</static-ip>')\n        exml.append('</source-translation>')\n    elif snat_type == 'dynamic-ip-and-port':\n        exml = [\"<source-translation>\",\n                \"<dynamic-ip-and-port>\"]\n        if snat_interface is not None:\n            exml = exml + [\n                \"<interface-address>\",\n                \"<interface>%s</interface>\" % snat_interface]\n            if snat_interface_address is not None:\n                exml.append(\"<ip>%s</ip>\" % snat_interface_address)\n            exml.append(\"</interface-address>\")\n        elif snat_address is not None:\n            exml.append(\"<translated-address>\")\n            for t in snat_address:\n                exml.append(\"<member>%s</member>\" % t)\n            exml.append(\"</translated-address>\")\n        else:\n            m.fail_json(msg=\"no snat_interface or snat_address \"\n                            \"specified for snat_type dynamic-ip-and-port\")\n        exml.append('</dynamic-ip-and-port>')\n        exml.append('</source-translation>')\n    else:\n        m.fail_json(msg=\"unknown snat_type %s\" % snat_type)\n\n    return ''.join(exml)\n\n\ndef add_nat(xapi, module, rule_name, from_zone, to_zone,\n            source, destination, service, dnatxml=None, snatxml=None):\n    exml = []\n    if dnatxml:\n        exml.append(dnatxml)\n    if snatxml:\n        exml.append(snatxml)\n\n    exml.append(\"<to><member>%s</member></to>\" % to_zone)\n\n    exml.append(\"<from>\")\n    exml = exml + [\"<member>%s</member>\" % e for e in from_zone]\n    exml.append(\"</from>\")\n\n    exml.append(\"<source>\")\n    exml = exml + [\"<member>%s</member>\" % e for e in source]\n    exml.append(\"</source>\")\n\n    exml.append(\"<destination>\")\n    exml = exml + [\"<member>%s</member>\" % e for e in destination]\n    exml.append(\"</destination>\")\n\n    exml.append(\"<service>%s</service>\" % service)\n\n    exml.append(\"<nat-type>ipv4</nat-type>\")\n\n    exml = ''.join(exml)\n\n    xapi.set(xpath=_NAT_XPATH % rule_name, element=exml)\n\n    return True\n\n\ndef main():\n    argument_spec = dict(\n        ip_address=dict(required=True),\n        password=dict(required=True, no_log=True),\n        username=dict(default='admin'),\n        rule_name=dict(required=True),\n        from_zone=dict(type='list', required=True),\n        to_zone=dict(required=True),\n        source=dict(type='list', default=[\"any\"]),\n        destination=dict(type='list', default=[\"any\"]),\n        service=dict(default=\"any\"),\n        snat_type=dict(),\n        snat_address=dict(),\n        snat_interface=dict(),\n        snat_interface_address=dict(),\n        snat_bidirectional=dict(default=False),\n        dnat_address=dict(),\n        dnat_port=dict(),\n        override=dict(type='bool', default=False),\n        commit=dict(type='bool', default=True)\n    )\n    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=False)\n\n    if module._name == 'panos_nat_policy':\n        module.deprecate(\"The 'panos_nat_policy' module is being renamed 'panos_nat_rule'\", version=2.8)\n\n    if not HAS_LIB:\n        module.fail_json(msg='pan-python is required for this module')\n\n    ip_address = module.params[\"ip_address\"]\n    password = module.params[\"password\"]\n    username = module.params['username']\n\n    xapi = pan.xapi.PanXapi(\n        hostname=ip_address,\n        api_username=username,\n        api_password=password\n    )\n\n    rule_name = module.params['rule_name']\n    from_zone = module.params['from_zone']\n    to_zone = module.params['to_zone']\n    source = module.params['source']\n    destination = module.params['destination']\n    service = module.params['service']\n\n    snat_type = module.params['snat_type']\n    snat_address = module.params['snat_address']\n    snat_interface = module.params['snat_interface']\n    snat_interface_address = module.params['snat_interface_address']\n    snat_bidirectional = module.params['snat_bidirectional']\n\n    dnat_address = module.params['dnat_address']\n    dnat_port = module.params['dnat_port']\n    commit = module.params['commit']\n\n    override = module.params[\"override\"]\n    if not override and nat_rule_exists(xapi, rule_name):\n        module.exit_json(changed=False, msg=\"rule exists\")\n\n    try:\n        changed = add_nat(\n            xapi,\n            module,\n            rule_name,\n            from_zone,\n            to_zone,\n            source,\n            destination,\n            service,\n            dnatxml=dnat_xml(module, dnat_address, dnat_port),\n            snatxml=snat_xml(module, snat_type, snat_address,\n                             snat_interface, snat_interface_address,\n                             snat_bidirectional)\n        )\n\n        if changed and commit:\n            xapi.commit(cmd=\"<commit></commit>\", sync=True, interval=1)\n\n        module.exit_json(changed=changed, msg=\"okey dokey\")\n\n    except PanXapiError as exc:\n        module.fail_json(msg=to_native(exc))\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  panos nat policy short description  create policy nat rule description        create policy nat rule  keep mind either end configuring source nat  destination nat   instead splitting       two make fair attempt determine one user wants  author   luigi mori ( jtschichold)  ivan bojer ( ivanbojer)  version added   2 3  requirements        pan python deprecated      alternative  use m(panos nat rule) instead      removed   2 9       this module depended outdated old sdk  use m(panos nat rule) instead  options      ip address          description                ip address (or hostname) pan os device         required  true     password          description                password authentication         required  true     username          description                username authentication         default   admin      rule name          description                name snat rule         required  true     zone          description                list source zones         required  true     zone          description                destination zone         required  true     source          description                list source addresses         default          destination          description                list destination addresses         default          service          description                service         default        snat type          description                type source translation     snat address          description                snat translated address     snat interface          description                snat interface     snat interface address          description                snat interface address     snat bidirectional          description                bidirectional flag         type  bool         default        dnat address          description                dnat translated address     dnat port          description                dnat translated port     override          description                attempt override rule one name already exists         type  bool         default        commit          description                commit changed         type  bool         default   yes       examples         create source destination nat rule     name  create nat ssh221 rule 10 0 1 101     panos nat        ip address   192 168 1 1        password   admin        rule name   web ssh        zone    external         zone   external        source            destination    10 0 0 100         service   service tcp 221        snat type   dynamic ip port        snat interface   ethernet1 2        dnat address   10 0 1 101        dnat port   22        commit  false      return         default return values         usr bin python        coding  utf 8           ansible module manage paloaltonetworks firewall    (c) 2016  techbizdev  techbizdev paloaltonetworks com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       create source destination nat rule    default return values ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Ansible module to manage PaloAltoNetworks Firewall\n# (c) 2016, techbizdev <techbizdev@paloaltonetworks.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['deprecated'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: panos_nat_policy\nshort_description: create a policy NAT rule\ndescription:\n    - Create a policy nat rule. Keep in mind that we can either end up configuring source NAT, destination NAT, or both. Instead of splitting it\n      into two we will make a fair attempt to determine which one the user wants.\nauthor: \"Luigi Mori (@jtschichold), Ivan Bojer (@ivanbojer)\"\nversion_added: \"2.3\"\nrequirements:\n    - pan-python\ndeprecated:\n    alternative: Use M(panos_nat_rule) instead.\n    removed_in: '2.9'\n    why: This module depended on outdated and old SDK, use M(panos_nat_rule) instead.\noptions:\n    ip_address:\n        description:\n            - IP address (or hostname) of PAN-OS device\n        required: true\n    password:\n        description:\n            - password for authentication\n        required: true\n    username:\n        description:\n            - username for authentication\n        default: \"admin\"\n    rule_name:\n        description:\n            - name of the SNAT rule\n        required: true\n    from_zone:\n        description:\n            - list of source zones\n        required: true\n    to_zone:\n        description:\n            - destination zone\n        required: true\n    source:\n        description:\n            - list of source addresses\n        default: [\"any\"]\n    destination:\n        description:\n            - list of destination addresses\n        default: [\"any\"]\n    service:\n        description:\n            - service\n        default: \"any\"\n    snat_type:\n        description:\n            - type of source translation\n    snat_address:\n        description:\n            - snat translated address\n    snat_interface:\n        description:\n            - snat interface\n    snat_interface_address:\n        description:\n            - snat interface address\n    snat_bidirectional:\n        description:\n            - bidirectional flag\n        type: bool\n        default: 'no'\n    dnat_address:\n        description:\n            - dnat translated address\n    dnat_port:\n        description:\n            - dnat translated port\n    override:\n        description:\n            - attempt to override rule if one with the same name already exists\n        type: bool\n        default: 'no'\n    commit:\n        description:\n            - commit if changed\n        type: bool\n        default: 'yes'\n'''\n\nEXAMPLES = '''\n# Create a source and destination nat rule\n  - name: create nat SSH221 rule for 10.0.1.101\n    panos_nat:\n      ip_address: \"192.168.1.1\"\n      password: \"admin\"\n      rule_name: \"Web SSH\"\n      from_zone: [\"external\"]\n      to_zone: \"external\"\n      source: [\"any\"]\n      destination: [\"10.0.0.100\"]\n      service: \"service-tcp-221\"\n      snat_type: \"dynamic-ip-and-port\"\n      snat_interface: \"ethernet1/2\"\n      dnat_address: \"10.0.1.101\"\n      dnat_port: \"22\"\n      commit: False\n'''\n\nRETURN = '''\n# Default return values\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\n\ntry:\n    import pan.xapi\n    from pan.xapi import PanXapiError\n\n    HAS_LIB = True\nexcept ImportError:\n    HAS_LIB = False\n\n_NAT_XPATH = \"/config/devices/entry[@name='localhost.localdomain']\" + \\\n             \"/vsys/entry[@name='vsys1']\" + \\\n             \"/rulebase/nat/rules/entry[@name='%s']\"\n\n\ndef nat_rule_exists(xapi, rule_name):\n    xapi.get(_NAT_XPATH % rule_name)\n    e = xapi.element_root.find('.//entry')\n    if e is None:\n        return False\n    return True\n\n\ndef dnat_xml(m, dnat_address, dnat_port):\n    if dnat_address is None and dnat_port is None:\n        return None\n\n    exml = [\"<destination-translation>\"]\n    if dnat_address is not None:\n        exml.append(\"<translated-address>%s</translated-address>\" %\n                    dnat_address)\n    if dnat_port is not None:\n        exml.append(\"<translated-port>%s</translated-port>\" %\n                    dnat_port)\n    exml.append('</destination-translation>')\n\n    return ''.join(exml)\n\n\ndef snat_xml(m, snat_type, snat_address, snat_interface,\n             snat_interface_address, snat_bidirectional):\n    if snat_type == 'static-ip':\n        if snat_address is None:\n            m.fail_json(msg=\"snat_address should be speicified \"\n                            \"for snat_type static-ip\")\n\n        exml = [\"<source-translation>\", \"<static-ip>\"]\n        if snat_bidirectional:\n            exml.append('<bi-directional>%s</bi-directional>' % 'yes')\n        else:\n            exml.append('<bi-directional>%s</bi-directional>' % 'no')\n        exml.append('<translated-address>%s</translated-address>' %\n                    snat_address)\n        exml.append('</static-ip>')\n        exml.append('</source-translation>')\n    elif snat_type == 'dynamic-ip-and-port':\n        exml = [\"<source-translation>\",\n                \"<dynamic-ip-and-port>\"]\n        if snat_interface is not None:\n            exml = exml + [\n                \"<interface-address>\",\n                \"<interface>%s</interface>\" % snat_interface]\n            if snat_interface_address is not None:\n                exml.append(\"<ip>%s</ip>\" % snat_interface_address)\n            exml.append(\"</interface-address>\")\n        elif snat_address is not None:\n            exml.append(\"<translated-address>\")\n            for t in snat_address:\n                exml.append(\"<member>%s</member>\" % t)\n            exml.append(\"</translated-address>\")\n        else:\n            m.fail_json(msg=\"no snat_interface or snat_address \"\n                            \"specified for snat_type dynamic-ip-and-port\")\n        exml.append('</dynamic-ip-and-port>')\n        exml.append('</source-translation>')\n    else:\n        m.fail_json(msg=\"unknown snat_type %s\" % snat_type)\n\n    return ''.join(exml)\n\n\ndef add_nat(xapi, module, rule_name, from_zone, to_zone,\n            source, destination, service, dnatxml=None, snatxml=None):\n    exml = []\n    if dnatxml:\n        exml.append(dnatxml)\n    if snatxml:\n        exml.append(snatxml)\n\n    exml.append(\"<to><member>%s</member></to>\" % to_zone)\n\n    exml.append(\"<from>\")\n    exml = exml + [\"<member>%s</member>\" % e for e in from_zone]\n    exml.append(\"</from>\")\n\n    exml.append(\"<source>\")\n    exml = exml + [\"<member>%s</member>\" % e for e in source]\n    exml.append(\"</source>\")\n\n    exml.append(\"<destination>\")\n    exml = exml + [\"<member>%s</member>\" % e for e in destination]\n    exml.append(\"</destination>\")\n\n    exml.append(\"<service>%s</service>\" % service)\n\n    exml.append(\"<nat-type>ipv4</nat-type>\")\n\n    exml = ''.join(exml)\n\n    xapi.set(xpath=_NAT_XPATH % rule_name, element=exml)\n\n    return True\n\n\ndef main():\n    argument_spec = dict(\n        ip_address=dict(required=True),\n        password=dict(required=True, no_log=True),\n        username=dict(default='admin'),\n        rule_name=dict(required=True),\n        from_zone=dict(type='list', required=True),\n        to_zone=dict(required=True),\n        source=dict(type='list', default=[\"any\"]),\n        destination=dict(type='list', default=[\"any\"]),\n        service=dict(default=\"any\"),\n        snat_type=dict(),\n        snat_address=dict(),\n        snat_interface=dict(),\n        snat_interface_address=dict(),\n        snat_bidirectional=dict(default=False),\n        dnat_address=dict(),\n        dnat_port=dict(),\n        override=dict(type='bool', default=False),\n        commit=dict(type='bool', default=True)\n    )\n    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=False)\n\n    if module._name == 'panos_nat_policy':\n        module.deprecate(\"The 'panos_nat_policy' module is being renamed 'panos_nat_rule'\", version=2.8)\n\n    if not HAS_LIB:\n        module.fail_json(msg='pan-python is required for this module')\n\n    ip_address = module.params[\"ip_address\"]\n    password = module.params[\"password\"]\n    username = module.params['username']\n\n    xapi = pan.xapi.PanXapi(\n        hostname=ip_address,\n        api_username=username,\n        api_password=password\n    )\n\n    rule_name = module.params['rule_name']\n    from_zone = module.params['from_zone']\n    to_zone = module.params['to_zone']\n    source = module.params['source']\n    destination = module.params['destination']\n    service = module.params['service']\n\n    snat_type = module.params['snat_type']\n    snat_address = module.params['snat_address']\n    snat_interface = module.params['snat_interface']\n    snat_interface_address = module.params['snat_interface_address']\n    snat_bidirectional = module.params['snat_bidirectional']\n\n    dnat_address = module.params['dnat_address']\n    dnat_port = module.params['dnat_port']\n    commit = module.params['commit']\n\n    override = module.params[\"override\"]\n    if not override and nat_rule_exists(xapi, rule_name):\n        module.exit_json(changed=False, msg=\"rule exists\")\n\n    try:\n        changed = add_nat(\n            xapi,\n            module,\n            rule_name,\n            from_zone,\n            to_zone,\n            source,\n            destination,\n            service,\n            dnatxml=dnat_xml(module, dnat_address, dnat_port),\n            snatxml=snat_xml(module, snat_type, snat_address,\n                             snat_interface, snat_interface_address,\n                             snat_bidirectional)\n        )\n\n        if changed and commit:\n            xapi.commit(cmd=\"<commit></commit>\", sync=True, interval=1)\n\n        module.exit_json(changed=changed, msg=\"okey dokey\")\n\n    except PanXapiError as exc:\n        module.fail_json(msg=to_native(exc))\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "_panos_nat_policy.py", "id": "b4c2ebdcb47ec353cdcdd301c9ec24ef", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/panos/_panos_nat_policy.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}