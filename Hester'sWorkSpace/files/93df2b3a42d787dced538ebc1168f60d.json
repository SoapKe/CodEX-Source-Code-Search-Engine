{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n (c) 2016, Thierno IB. BARRY @barryib\n\n\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: kibana_plugin\nshort_description: Manage Kibana plugins\ndescription:\n    - Manages Kibana plugins.\nversion_added: \"2.2\"\nauthor: Thierno IB. BARRY (@barryib)\noptions:\n    name:\n        description:\n            - Name of the plugin to install\n        required: True\n    state:\n        description:\n            - Desired state of a plugin.\n        choices: [\"present\", \"absent\"]\n        default: present\n    url:\n        description:\n            - Set exact URL to download the plugin from.\n              For local file, prefix its absolute path with file://\n    timeout:\n        description:\n            - \"Timeout setting: 30s, 1m, 1h...\"\n        default: 1m\n    plugin_bin:\n        description:\n            - Location of the plugin binary\n        default: /opt/kibana/bin/kibana\n    plugin_dir:\n        description:\n            - Your configured plugin directory specified in Kibana\n        default: /opt/kibana/installedPlugins/\n    version:\n        description:\n            - Version of the plugin to be installed.\n              If plugin exists with previous version, it will NOT be updated if C(force) is not set to yes\n    force:\n        description:\n            - Delete and re-install the plugin. Can be useful for plugins update\n        type: bool\n        default: 'no'\n'''\n\nEXAMPLES = '''\n- name: Install Elasticsearch head plugin\n  kibana_plugin:\n    state: present\n    name: elasticsearch/marvel\n\n- name: Install specific version of a plugin\n  kibana_plugin:\n    state: present\n    name: elasticsearch/marvel\n    version: '2.3.3'\n\n- name: Uninstall Elasticsearch head plugin\n  kibana_plugin:\n    state: absent\n    name: elasticsearch/marvel\n'''\n\nRETURN = '''\ncmd:\n    description: the launched command during plugin mangement (install / remove)\n    returned: success\n    type: string\nname:\n    description: the plugin name to install or remove\n    returned: success\n    type: string\nurl:\n    description: the url from where the plugin is installed from\n    returned: success\n    type: string\ntimeout:\n    description: the timeout for plugin download\n    returned: success\n    type: string\nstdout:\n    description: the command stdout\n    returned: success\n    type: string\nstderr:\n    description: the command stderr\n    returned: success\n    type: string\nstate:\n    description: the state for the managed plugin\n    returned: success\n    type: string\n'''\n\nimport os\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nPACKAGE_STATE_MAP = dict(\n    present=\"--install\",\n    absent=\"--remove\"\n)\n\n\ndef parse_plugin_repo(string):\n    elements = string.split(\"/\")\n\n     We first consider the simplest form: pluginname\n    repo = elements[0]\n\n     We consider the form: username/pluginname\n    if len(elements) > 1:\n        repo = elements[1]\n\n     remove elasticsearch- prefix\n     remove es- prefix\n    for string in (\"elasticsearch-\", \"es-\"):\n        if repo.startswith(string):\n            return repo[len(string):]\n\n    return repo\n\n\ndef is_plugin_present(plugin_dir, working_dir):\n    return os.path.isdir(os.path.join(working_dir, plugin_dir))\n\n\ndef parse_error(string):\n    reason = \"reason: \"\n    try:\n        return string[string.index(reason) + len(reason):].strip()\n    except ValueError:\n        return string\n\n\ndef install_plugin(module, plugin_bin, plugin_name, url, timeout):\n    cmd_args = [plugin_bin, \"plugin\", PACKAGE_STATE_MAP[\"present\"], plugin_name]\n\n    if url:\n        cmd_args.append(\"--url %s\" % url)\n\n    if timeout:\n        cmd_args.append(\"--timeout %s\" % timeout)\n\n    cmd = \" \".join(cmd_args)\n\n    if module.check_mode:\n        return True, cmd, \"check mode\", \"\"\n\n    rc, out, err = module.run_command(cmd)\n    if rc != 0:\n        reason = parse_error(out)\n        module.fail_json(msg=reason)\n\n    return True, cmd, out, err\n\n\ndef remove_plugin(module, plugin_bin, plugin_name):\n    cmd_args = [plugin_bin, \"plugin\", PACKAGE_STATE_MAP[\"absent\"], plugin_name]\n\n    cmd = \" \".join(cmd_args)\n\n    if module.check_mode:\n        return True, cmd, \"check mode\", \"\"\n\n    rc, out, err = module.run_command(cmd)\n    if rc != 0:\n        reason = parse_error(out)\n        module.fail_json(msg=reason)\n\n    return True, cmd, out, err\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            state=dict(default=\"present\", choices=PACKAGE_STATE_MAP.keys()),\n            url=dict(default=None),\n            timeout=dict(default=\"1m\"),\n            plugin_bin=dict(default=\"/opt/kibana/bin/kibana\", type=\"path\"),\n            plugin_dir=dict(default=\"/opt/kibana/installedPlugins/\", type=\"path\"),\n            version=dict(default=None),\n            force=dict(default=\"no\", type=\"bool\")\n        ),\n        supports_check_mode=True,\n    )\n\n    name = module.params[\"name\"]\n    state = module.params[\"state\"]\n    url = module.params[\"url\"]\n    timeout = module.params[\"timeout\"]\n    plugin_bin = module.params[\"plugin_bin\"]\n    plugin_dir = module.params[\"plugin_dir\"]\n    version = module.params[\"version\"]\n    force = module.params[\"force\"]\n\n    present = is_plugin_present(parse_plugin_repo(name), plugin_dir)\n\n     skip if the state is correct\n    if (present and state == \"present\" and not force) or (state == \"absent\" and not present and not force):\n        module.exit_json(changed=False, name=name, state=state)\n\n    if (version):\n        name = name + '/' + version\n\n    if state == \"present\":\n        if force:\n            remove_plugin(module, plugin_bin, name)\n        changed, cmd, out, err = install_plugin(module, plugin_bin, name, url, timeout)\n\n    elif state == \"absent\":\n        changed, cmd, out, err = remove_plugin(module, plugin_bin, name)\n\n    module.exit_json(changed=changed, cmd=cmd, name=name, state=state, url=url, timeout=timeout, stdout=out, stderr=err)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  kibana plugin short description  manage kibana plugins description        manages kibana plugins  version added   2 2  author  thierno ib  barry ( barryib) options      name          description                name plugin install         required  true     state          description                desired state plugin          choices    present    absent           default  present     url          description                set exact url download plugin                for local file  prefix absolute path file        timeout          description                 timeout setting  30s  1m  1h             default  1m     plugin bin          description                location plugin binary         default   opt kibana bin kibana     plugin dir          description                your configured plugin directory specified kibana         default   opt kibana installedplugins      version          description                version plugin installed                if plugin exists previous version  not updated c(force) set yes     force          description                delete install plugin  can useful plugins update         type  bool         default         examples         name  install elasticsearch head plugin   kibana plugin      state  present     name  elasticsearch marvel    name  install specific version plugin   kibana plugin      state  present     name  elasticsearch marvel     version   2 3 3     name  uninstall elasticsearch head plugin   kibana plugin      state  absent     name  elasticsearch marvel      return       cmd      description  launched command plugin mangement (install   remove)     returned  success     type  string name      description  plugin name install remove     returned  success     type  string url      description  url plugin installed     returned  success     type  string timeout      description  timeout plugin download     returned  success     type  string stdout      description  command stdout     returned  success     type  string stderr      description  command stderr     returned  success     type  string state      description  state managed plugin     returned  success     type  string         usr bin python        coding  utf 8        (c) 2016  thierno ib  barry  barryib    sponsored polyconseil http   polyconseil fr        gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    we first consider simplest form  pluginname    we consider form  username pluginname    remove elasticsearch  prefix    remove es  prefix    skip state correct ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2016, Thierno IB. BARRY @barryib\n# Sponsored by Polyconseil http://polyconseil.fr.\n#\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: kibana_plugin\nshort_description: Manage Kibana plugins\ndescription:\n    - Manages Kibana plugins.\nversion_added: \"2.2\"\nauthor: Thierno IB. BARRY (@barryib)\noptions:\n    name:\n        description:\n            - Name of the plugin to install\n        required: True\n    state:\n        description:\n            - Desired state of a plugin.\n        choices: [\"present\", \"absent\"]\n        default: present\n    url:\n        description:\n            - Set exact URL to download the plugin from.\n              For local file, prefix its absolute path with file://\n    timeout:\n        description:\n            - \"Timeout setting: 30s, 1m, 1h...\"\n        default: 1m\n    plugin_bin:\n        description:\n            - Location of the plugin binary\n        default: /opt/kibana/bin/kibana\n    plugin_dir:\n        description:\n            - Your configured plugin directory specified in Kibana\n        default: /opt/kibana/installedPlugins/\n    version:\n        description:\n            - Version of the plugin to be installed.\n              If plugin exists with previous version, it will NOT be updated if C(force) is not set to yes\n    force:\n        description:\n            - Delete and re-install the plugin. Can be useful for plugins update\n        type: bool\n        default: 'no'\n'''\n\nEXAMPLES = '''\n- name: Install Elasticsearch head plugin\n  kibana_plugin:\n    state: present\n    name: elasticsearch/marvel\n\n- name: Install specific version of a plugin\n  kibana_plugin:\n    state: present\n    name: elasticsearch/marvel\n    version: '2.3.3'\n\n- name: Uninstall Elasticsearch head plugin\n  kibana_plugin:\n    state: absent\n    name: elasticsearch/marvel\n'''\n\nRETURN = '''\ncmd:\n    description: the launched command during plugin mangement (install / remove)\n    returned: success\n    type: string\nname:\n    description: the plugin name to install or remove\n    returned: success\n    type: string\nurl:\n    description: the url from where the plugin is installed from\n    returned: success\n    type: string\ntimeout:\n    description: the timeout for plugin download\n    returned: success\n    type: string\nstdout:\n    description: the command stdout\n    returned: success\n    type: string\nstderr:\n    description: the command stderr\n    returned: success\n    type: string\nstate:\n    description: the state for the managed plugin\n    returned: success\n    type: string\n'''\n\nimport os\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nPACKAGE_STATE_MAP = dict(\n    present=\"--install\",\n    absent=\"--remove\"\n)\n\n\ndef parse_plugin_repo(string):\n    elements = string.split(\"/\")\n\n    # We first consider the simplest form: pluginname\n    repo = elements[0]\n\n    # We consider the form: username/pluginname\n    if len(elements) > 1:\n        repo = elements[1]\n\n    # remove elasticsearch- prefix\n    # remove es- prefix\n    for string in (\"elasticsearch-\", \"es-\"):\n        if repo.startswith(string):\n            return repo[len(string):]\n\n    return repo\n\n\ndef is_plugin_present(plugin_dir, working_dir):\n    return os.path.isdir(os.path.join(working_dir, plugin_dir))\n\n\ndef parse_error(string):\n    reason = \"reason: \"\n    try:\n        return string[string.index(reason) + len(reason):].strip()\n    except ValueError:\n        return string\n\n\ndef install_plugin(module, plugin_bin, plugin_name, url, timeout):\n    cmd_args = [plugin_bin, \"plugin\", PACKAGE_STATE_MAP[\"present\"], plugin_name]\n\n    if url:\n        cmd_args.append(\"--url %s\" % url)\n\n    if timeout:\n        cmd_args.append(\"--timeout %s\" % timeout)\n\n    cmd = \" \".join(cmd_args)\n\n    if module.check_mode:\n        return True, cmd, \"check mode\", \"\"\n\n    rc, out, err = module.run_command(cmd)\n    if rc != 0:\n        reason = parse_error(out)\n        module.fail_json(msg=reason)\n\n    return True, cmd, out, err\n\n\ndef remove_plugin(module, plugin_bin, plugin_name):\n    cmd_args = [plugin_bin, \"plugin\", PACKAGE_STATE_MAP[\"absent\"], plugin_name]\n\n    cmd = \" \".join(cmd_args)\n\n    if module.check_mode:\n        return True, cmd, \"check mode\", \"\"\n\n    rc, out, err = module.run_command(cmd)\n    if rc != 0:\n        reason = parse_error(out)\n        module.fail_json(msg=reason)\n\n    return True, cmd, out, err\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            state=dict(default=\"present\", choices=PACKAGE_STATE_MAP.keys()),\n            url=dict(default=None),\n            timeout=dict(default=\"1m\"),\n            plugin_bin=dict(default=\"/opt/kibana/bin/kibana\", type=\"path\"),\n            plugin_dir=dict(default=\"/opt/kibana/installedPlugins/\", type=\"path\"),\n            version=dict(default=None),\n            force=dict(default=\"no\", type=\"bool\")\n        ),\n        supports_check_mode=True,\n    )\n\n    name = module.params[\"name\"]\n    state = module.params[\"state\"]\n    url = module.params[\"url\"]\n    timeout = module.params[\"timeout\"]\n    plugin_bin = module.params[\"plugin_bin\"]\n    plugin_dir = module.params[\"plugin_dir\"]\n    version = module.params[\"version\"]\n    force = module.params[\"force\"]\n\n    present = is_plugin_present(parse_plugin_repo(name), plugin_dir)\n\n    # skip if the state is correct\n    if (present and state == \"present\" and not force) or (state == \"absent\" and not present and not force):\n        module.exit_json(changed=False, name=name, state=state)\n\n    if (version):\n        name = name + '/' + version\n\n    if state == \"present\":\n        if force:\n            remove_plugin(module, plugin_bin, name)\n        changed, cmd, out, err = install_plugin(module, plugin_bin, name, url, timeout)\n\n    elif state == \"absent\":\n        changed, cmd, out, err = remove_plugin(module, plugin_bin, name)\n\n    module.exit_json(changed=changed, cmd=cmd, name=name, state=state, url=url, timeout=timeout, stdout=out, stderr=err)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "kibana_plugin.py", "id": "93df2b3a42d787dced538ebc1168f60d", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/database/misc/kibana_plugin.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}