{"author": "deepfakes", "code": "import numpy\n\nfrom lib.umeyama import umeyama\nfrom lib.align_eyes import align_eyes\nfrom numpy.linalg import inv\nimport cv2\n\nmean_face_x = numpy.array([\n0.000213256, 0.0752622, 0.18113, 0.29077, 0.393397, 0.586856, 0.689483, 0.799124,\n0.904991, 0.98004, 0.490127, 0.490127, 0.490127, 0.490127, 0.36688, 0.426036,\n0.490127, 0.554217, 0.613373, 0.121737, 0.187122, 0.265825, 0.334606, 0.260918,\n0.182743, 0.645647, 0.714428, 0.793132, 0.858516, 0.79751, 0.719335, 0.254149,\n0.340985, 0.428858, 0.490127, 0.551395, 0.639268, 0.726104, 0.642159, 0.556721,\n0.490127, 0.423532, 0.338094, 0.290379, 0.428096, 0.490127, 0.552157, 0.689874,\n0.553364, 0.490127, 0.42689 ])\n\nmean_face_y = numpy.array([\n0.106454, 0.038915, 0.0187482, 0.0344891, 0.0773906, 0.0773906, 0.0344891,\n0.0187482, 0.038915, 0.106454, 0.203352, 0.307009, 0.409805, 0.515625, 0.587326,\n0.609345, 0.628106, 0.609345, 0.587326, 0.216423, 0.178758, 0.179852, 0.231733,\n0.245099, 0.244077, 0.231733, 0.179852, 0.178758, 0.216423, 0.244077, 0.245099,\n0.780233, 0.745405, 0.727388, 0.742578, 0.727388, 0.745405, 0.780233, 0.864805,\n0.902192, 0.909281, 0.902192, 0.864805, 0.784792, 0.778746, 0.785343, 0.778746,\n0.784792, 0.824182, 0.831803, 0.824182 ])\n\nlandmarks_2D = numpy.stack( [ mean_face_x, mean_face_y ], axis=1 )\n\ndef get_align_mat(face, size, should_align_eyes):\n    mat_umeyama = umeyama(numpy.array(face.landmarksAsXY()[17:]), landmarks_2D, True)[0:2]\n\n    if should_align_eyes is False:\n        return mat_umeyama\n\n    mat_umeyama = mat_umeyama * size\n\n    \n    landmarks = numpy.matrix(face.landmarksAsXY())\n\n    # cv2 expects points to be in the form np.array([ [[x1, y1]], [[x2, y2]], ... ]), we'll expand the dim\n    landmarks = numpy.expand_dims(landmarks, axis=1)\n\n    \n    umeyama_landmarks = cv2.transform(landmarks, mat_umeyama, landmarks.shape)\n\n    \n    mat_align_eyes = align_eyes(umeyama_landmarks, size)\n\n    \n    \n    mat_umeyama = numpy.matrix(mat_umeyama)\n    mat_umeyama.resize((3, 3))\n    mat_align_eyes = numpy.matrix(mat_align_eyes)\n    mat_align_eyes.resize((3, 3))\n    mat_umeyama[2] = mat_align_eyes[2] = [0, 0, 1]\n\n    \n    transform_mat = mat_align_eyes * mat_umeyama\n\n    \n    transform_mat = numpy.delete(transform_mat, 2, 0)\n    transform_mat = transform_mat / size\n    return transform_mat\n", "comments": "  convert matrix    cv2 expects points form np array(    x1  y1      x2  y2         )  expand dim    align landmarks using umeyama    determine rotation matrix align eyes horizontally    extend 2x3 transform matrices 3x3 multiply    combine one    combine umeyama transform extra rotation matrix    remove extra row added  shape needs 2x3 ", "content": "import numpy\n\nfrom lib.umeyama import umeyama\nfrom lib.align_eyes import align_eyes\nfrom numpy.linalg import inv\nimport cv2\n\nmean_face_x = numpy.array([\n0.000213256, 0.0752622, 0.18113, 0.29077, 0.393397, 0.586856, 0.689483, 0.799124,\n0.904991, 0.98004, 0.490127, 0.490127, 0.490127, 0.490127, 0.36688, 0.426036,\n0.490127, 0.554217, 0.613373, 0.121737, 0.187122, 0.265825, 0.334606, 0.260918,\n0.182743, 0.645647, 0.714428, 0.793132, 0.858516, 0.79751, 0.719335, 0.254149,\n0.340985, 0.428858, 0.490127, 0.551395, 0.639268, 0.726104, 0.642159, 0.556721,\n0.490127, 0.423532, 0.338094, 0.290379, 0.428096, 0.490127, 0.552157, 0.689874,\n0.553364, 0.490127, 0.42689 ])\n\nmean_face_y = numpy.array([\n0.106454, 0.038915, 0.0187482, 0.0344891, 0.0773906, 0.0773906, 0.0344891,\n0.0187482, 0.038915, 0.106454, 0.203352, 0.307009, 0.409805, 0.515625, 0.587326,\n0.609345, 0.628106, 0.609345, 0.587326, 0.216423, 0.178758, 0.179852, 0.231733,\n0.245099, 0.244077, 0.231733, 0.179852, 0.178758, 0.216423, 0.244077, 0.245099,\n0.780233, 0.745405, 0.727388, 0.742578, 0.727388, 0.745405, 0.780233, 0.864805,\n0.902192, 0.909281, 0.902192, 0.864805, 0.784792, 0.778746, 0.785343, 0.778746,\n0.784792, 0.824182, 0.831803, 0.824182 ])\n\nlandmarks_2D = numpy.stack( [ mean_face_x, mean_face_y ], axis=1 )\n\ndef get_align_mat(face, size, should_align_eyes):\n    mat_umeyama = umeyama(numpy.array(face.landmarksAsXY()[17:]), landmarks_2D, True)[0:2]\n\n    if should_align_eyes is False:\n        return mat_umeyama\n\n    mat_umeyama = mat_umeyama * size\n\n    # Convert to matrix\n    landmarks = numpy.matrix(face.landmarksAsXY())\n\n    # cv2 expects points to be in the form np.array([ [[x1, y1]], [[x2, y2]], ... ]), we'll expand the dim\n    landmarks = numpy.expand_dims(landmarks, axis=1)\n\n    # Align the landmarks using umeyama\n    umeyama_landmarks = cv2.transform(landmarks, mat_umeyama, landmarks.shape)\n\n    # Determine a rotation matrix to align eyes horizontally\n    mat_align_eyes = align_eyes(umeyama_landmarks, size)\n\n    # Extend the 2x3 transform matrices to 3x3 so we can multiply them\n    # and combine them as one\n    mat_umeyama = numpy.matrix(mat_umeyama)\n    mat_umeyama.resize((3, 3))\n    mat_align_eyes = numpy.matrix(mat_align_eyes)\n    mat_align_eyes.resize((3, 3))\n    mat_umeyama[2] = mat_align_eyes[2] = [0, 0, 1]\n\n    # Combine the umeyama transform with the extra rotation matrix\n    transform_mat = mat_align_eyes * mat_umeyama\n\n    # Remove the extra row added, shape needs to be 2x3\n    transform_mat = numpy.delete(transform_mat, 2, 0)\n    transform_mat = transform_mat / size\n    return transform_mat\n", "description": "Non official project based on original /r/Deepfakes thread. Many thanks to him!", "file_name": "aligner.py", "id": "26209939c35ca535b2ad46d5604ef62b", "language": "Python", "project_name": "faceswap", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/deepfakes-faceswap/deepfakes-faceswap-6ff64ef/lib/aligner.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:27:43Z", "url": "https://github.com/deepfakes/faceswap", "wiki": true}