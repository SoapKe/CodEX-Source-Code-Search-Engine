{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass TeleBruxellesIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?:telebruxelles|bx1)\\.be/(?:[^/]+/)*(?P<id>[^/\n    _TESTS = [{\n        'url': 'http://bx1.be/news/que-risque-lauteur-dune-fausse-alerte-a-la-bombe/',\n        'md5': 'a2a67a5b1c3e8c9d33109b902f474fd9',\n        'info_dict': {\n            'id': '158856',\n            'display_id': 'que-risque-lauteur-dune-fausse-alerte-a-la-bombe',\n            'ext': 'mp4',\n            'title': 'Que risque l\u2019auteur d\u2019une fausse alerte \u00e0 la bombe ?',\n            'description': 'md5:3cf8df235d44ebc5426373050840e466',\n        },\n    }, {\n        'url': 'http://bx1.be/sport/futsal-schaerbeek-sincline-5-3-a-thulin/',\n        'md5': 'dfe07ecc9c153ceba8582ac912687675',\n        'info_dict': {\n            'id': '158433',\n            'display_id': 'futsal-schaerbeek-sincline-5-3-a-thulin',\n            'ext': 'mp4',\n            'title': 'Futsal : Schaerbeek s\u2019incline 5-3 \u00e0 Thulin',\n            'description': 'md5:fd013f1488d5e2dceb9cebe39e2d569b',\n        },\n    }, {\n        'url': 'http://bx1.be/emission/bxenf1-gastronomie/',\n        'only_matching': True,\n    }, {\n        'url': 'https://bx1.be/berchem-sainte-agathe/personnel-carrefour-de-berchem-sainte-agathe-inquiet/',\n        'only_matching': True,\n    }, {\n        'url': 'https://bx1.be/dernier-jt/',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://bx1.be/lives/direct-tv/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n\n        article_id = self._html_search_regex(\n            r'<article[^>]+\\bid=[\"\\']post-(\\d+)', webpage, 'article ID', default=None)\n        title = self._html_search_regex(\n            r'<h1[^>]*>(.+?)</h1>', webpage, 'title',\n            default=None) or self._og_search_title(webpage)\n        description = self._og_search_description(webpage, default=None)\n\n        rtmp_url = self._html_search_regex(\n            r'file[\"\\']?\\s*:\\s*\"(r(?:tm|mt)ps?://[^/]+/(?:vod/mp4:\"\\s*\\+\\s*\"[^\"]+\"\\s*\\+\\s*\"\\.mp4|stream/live))\"',\n            webpage, 'RTMP url')\n        \n        \n        rtmp_url = re.sub(r'^rmtp', 'rtmp', rtmp_url)\n        rtmp_url = re.sub(r'\"\\s*\\+\\s*\"', '', rtmp_url)\n        formats = self._extract_wowza_formats(rtmp_url, article_id or display_id)\n        self._sort_formats(formats)\n\n        is_live = 'stream/live' in rtmp_url\n\n        return {\n            'id': article_id or display_id,\n            'display_id': display_id,\n            'title': self._live_title(title) if is_live else title,\n            'description': description,\n            'formats': formats,\n            'is_live': is_live,\n        }\n", "comments": "# coding: utf-8\n#?]+)'\n# live stream\n# Yes, they have a typo in scheme name for live stream URLs (e.g.\n# https://bx1.be/lives/direct-tv/)\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass TeleBruxellesIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?:telebruxelles|bx1)\\.be/(?:[^/]+/)*(?P<id>[^/#?]+)'\n    _TESTS = [{\n        'url': 'http://bx1.be/news/que-risque-lauteur-dune-fausse-alerte-a-la-bombe/',\n        'md5': 'a2a67a5b1c3e8c9d33109b902f474fd9',\n        'info_dict': {\n            'id': '158856',\n            'display_id': 'que-risque-lauteur-dune-fausse-alerte-a-la-bombe',\n            'ext': 'mp4',\n            'title': 'Que risque l\u2019auteur d\u2019une fausse alerte \u00e0 la bombe ?',\n            'description': 'md5:3cf8df235d44ebc5426373050840e466',\n        },\n    }, {\n        'url': 'http://bx1.be/sport/futsal-schaerbeek-sincline-5-3-a-thulin/',\n        'md5': 'dfe07ecc9c153ceba8582ac912687675',\n        'info_dict': {\n            'id': '158433',\n            'display_id': 'futsal-schaerbeek-sincline-5-3-a-thulin',\n            'ext': 'mp4',\n            'title': 'Futsal : Schaerbeek s\u2019incline 5-3 \u00e0 Thulin',\n            'description': 'md5:fd013f1488d5e2dceb9cebe39e2d569b',\n        },\n    }, {\n        'url': 'http://bx1.be/emission/bxenf1-gastronomie/',\n        'only_matching': True,\n    }, {\n        'url': 'https://bx1.be/berchem-sainte-agathe/personnel-carrefour-de-berchem-sainte-agathe-inquiet/',\n        'only_matching': True,\n    }, {\n        'url': 'https://bx1.be/dernier-jt/',\n        'only_matching': True,\n    }, {\n        # live stream\n        'url': 'https://bx1.be/lives/direct-tv/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n\n        article_id = self._html_search_regex(\n            r'<article[^>]+\\bid=[\"\\']post-(\\d+)', webpage, 'article ID', default=None)\n        title = self._html_search_regex(\n            r'<h1[^>]*>(.+?)</h1>', webpage, 'title',\n            default=None) or self._og_search_title(webpage)\n        description = self._og_search_description(webpage, default=None)\n\n        rtmp_url = self._html_search_regex(\n            r'file[\"\\']?\\s*:\\s*\"(r(?:tm|mt)ps?://[^/]+/(?:vod/mp4:\"\\s*\\+\\s*\"[^\"]+\"\\s*\\+\\s*\"\\.mp4|stream/live))\"',\n            webpage, 'RTMP url')\n        # Yes, they have a typo in scheme name for live stream URLs (e.g.\n        # https://bx1.be/lives/direct-tv/)\n        rtmp_url = re.sub(r'^rmtp', 'rtmp', rtmp_url)\n        rtmp_url = re.sub(r'\"\\s*\\+\\s*\"', '', rtmp_url)\n        formats = self._extract_wowza_formats(rtmp_url, article_id or display_id)\n        self._sort_formats(formats)\n\n        is_live = 'stream/live' in rtmp_url\n\n        return {\n            'id': article_id or display_id,\n            'display_id': display_id,\n            'title': self._live_title(title) if is_live else title,\n            'description': description,\n            'formats': formats,\n            'is_live': is_live,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "telebruxelles.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/telebruxelles.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}