{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import parse_duration\n\n\nclass Canalc2IE(InfoExtractor):\n    IE_NAME = 'canalc2.tv'\n    _VALID_URL = r'https?://(?:(?:www\\.)?canalc2\\.tv/video/|archives-canalc2\\.u-strasbg\\.fr/video\\.asp\\?.*\\bidVideo=)(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://www.canalc2.tv/video/12163',\n        'md5': '060158428b650f896c542dfbb3d6487f',\n        'info_dict': {\n            'id': '12163',\n            'ext': 'mp4',\n            'title': 'Terrasses du Num\u00e9rique',\n            'duration': 122,\n        },\n    }, {\n        'url': 'http://archives-canalc2.u-strasbg.fr/video.asp?idVideo=11427&voir=oui',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'http://www.canalc2.tv/video/%s' % video_id, video_id)\n\n        formats = []\n        for _, video_url in re.findall(r'file\\s*=\\s*([\"\\'])(.+?)\\1', webpage):\n            if video_url.startswith('rtmp://'):\n                rtmp = re.search(\n                    r'^(?P<url>rtmp://[^/]+/(?P<app>.+/))(?P<play_path>mp4:.+)$', video_url)\n                formats.append({\n                    'url': rtmp.group('url'),\n                    'format_id': 'rtmp',\n                    'ext': 'flv',\n                    'app': rtmp.group('app'),\n                    'play_path': rtmp.group('play_path'),\n                    'page_url': url,\n                })\n            else:\n                formats.append({\n                    'url': video_url,\n                    'format_id': 'http',\n                })\n        self._sort_formats(formats)\n\n        title = self._html_search_regex(\n            r'(?s)class=\"[^\"]*col_description[^\"]*\">.*?<h3>(.*?)</h3>', webpage, 'title')\n        duration = parse_duration(self._search_regex(\n            r'id=[\"\\']video_duree[\"\\'][^>]*>([^<]+)',\n            webpage, 'duration', fatal=False))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'duration': duration,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import parse_duration\n\n\nclass Canalc2IE(InfoExtractor):\n    IE_NAME = 'canalc2.tv'\n    _VALID_URL = r'https?://(?:(?:www\\.)?canalc2\\.tv/video/|archives-canalc2\\.u-strasbg\\.fr/video\\.asp\\?.*\\bidVideo=)(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://www.canalc2.tv/video/12163',\n        'md5': '060158428b650f896c542dfbb3d6487f',\n        'info_dict': {\n            'id': '12163',\n            'ext': 'mp4',\n            'title': 'Terrasses du Num\u00e9rique',\n            'duration': 122,\n        },\n    }, {\n        'url': 'http://archives-canalc2.u-strasbg.fr/video.asp?idVideo=11427&voir=oui',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'http://www.canalc2.tv/video/%s' % video_id, video_id)\n\n        formats = []\n        for _, video_url in re.findall(r'file\\s*=\\s*([\"\\'])(.+?)\\1', webpage):\n            if video_url.startswith('rtmp://'):\n                rtmp = re.search(\n                    r'^(?P<url>rtmp://[^/]+/(?P<app>.+/))(?P<play_path>mp4:.+)$', video_url)\n                formats.append({\n                    'url': rtmp.group('url'),\n                    'format_id': 'rtmp',\n                    'ext': 'flv',\n                    'app': rtmp.group('app'),\n                    'play_path': rtmp.group('play_path'),\n                    'page_url': url,\n                })\n            else:\n                formats.append({\n                    'url': video_url,\n                    'format_id': 'http',\n                })\n        self._sort_formats(formats)\n\n        title = self._html_search_regex(\n            r'(?s)class=\"[^\"]*col_description[^\"]*\">.*?<h3>(.*?)</h3>', webpage, 'title')\n        duration = parse_duration(self._search_regex(\n            r'id=[\"\\']video_duree[\"\\'][^>]*>([^<]+)',\n            webpage, 'duration', fatal=False))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'duration': duration,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "canalc2.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/canalc2.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}