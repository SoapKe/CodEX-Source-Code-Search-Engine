{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom django.core.urlresolvers import reverse\nfrom six.moves.urllib.parse import quote\nfrom uuid import uuid4\nimport logging\n\nfrom sentry.models import Environment, UserReport\nfrom sentry.testutils import TestCase\nfrom sentry.event_manager import EventManager\n\n\nclass ErrorPageEmbedTest(TestCase):\n    urls = 'sentry.conf.urls'\n\n    def setUp(self):\n        super(ErrorPageEmbedTest, self).setUp()\n        self.project = self.create_project()\n        self.project.update_option('sentry:origins', ['example.com'])\n        self.key = self.create_project_key(self.project)\n        self.event_id = uuid4().hex\n        self.path = '%s?eventId=%s&dsn=%s' % (\n            reverse('sentry-error-page-embed'), quote(self.event_id), quote(self.key.dsn_public),\n        )\n\n    def test_invalid_referer(self):\n        with self.settings(SENTRY_ALLOW_ORIGIN=None):\n            resp = self.client.get(self.path, HTTP_REFERER='http://foo.com')\n        assert resp.status_code == 403\n\n    def test_renders(self):\n        resp = self.client.get(self.path, HTTP_REFERER='http://example.com')\n        assert resp.status_code == 200\n        self.assertTemplateUsed(resp, 'sentry/error-page-embed.html')\n\n    def test_uses_locale_from_header(self):\n        resp = self.client.get(\n            self.path, HTTP_REFERER='http://example.com', HTTP_ACCEPT_LANGUAGE='fr'\n        )\n        assert resp.status_code == 200\n        self.assertTemplateUsed(resp, 'sentry/error-page-embed.html')\n        assert 'Fermer' in resp.content  \n\n    def test_submission(self):\n        resp = self.client.post(\n            self.path, {\n                'name': 'Jane Doe',\n                'email': 'jane@example.com',\n                'comments': 'This is an example!',\n            },\n            HTTP_REFERER='http://example.com'\n        )\n        assert resp.status_code == 200\n\n        report = UserReport.objects.get()\n        assert report.name == 'Jane Doe'\n        assert report.email == 'jane@example.com'\n        assert report.comments == 'This is an example!'\n        assert report.event_id == self.event_id\n        assert report.project == self.project\n        assert report.group is None\n\n        resp = self.client.post(\n            self.path, {\n                'name': 'Joe Shmoe',\n                'email': 'joe@example.com',\n                'comments': 'haha I updated it!',\n            },\n            HTTP_REFERER='http://example.com'\n        )\n        assert resp.status_code == 200\n\n        report = UserReport.objects.get()\n        assert report.name == 'Joe Shmoe'\n        assert report.email == 'joe@example.com'\n        assert report.comments == 'haha I updated it!'\n        assert report.event_id == self.event_id\n        assert report.project == self.project\n        assert report.group is None\n\n    def test_submission_invalid_event_id(self):\n        self.event_id = 'x' * 100\n        self.path = '%s?eventId=%s&dsn=%s' % (\n            reverse('sentry-error-page-embed'), quote(self.event_id), quote(self.key.dsn_public),\n        )\n\n        resp = self.client.post(\n            self.path, {\n                'name': 'Jane Doe',\n                'email': 'jane@example.com',\n                'comments': 'This is an example!',\n            },\n            HTTP_REFERER='http://example.com'\n        )\n        assert resp.status_code == 400\n\n\nclass ErrorPageEmbedEnvironmentTest(TestCase):\n\n    urls = 'sentry.conf.urls'\n\n    def setUp(self):\n        self.project = self.create_project()\n        self.project.update_option('sentry:origins', ['example.com'])\n        self.key = self.create_project_key(self.project)\n        self.event_id = uuid4().hex\n        self.path = '%s?eventId=%s&dsn=%s' % (\n            reverse('sentry-error-page-embed'), quote(self.event_id), quote(self.key.dsn_public),\n        )\n        self.environment = Environment.objects.create(\n            project_id=self.project.id,\n            organization_id=self.project.organization_id,\n            name='production',\n        )\n        self.environment.add_project(self.project)\n\n    def make_event(self, **kwargs):\n        result = {\n            'event_id': 'a' * 32,\n            'message': 'foo',\n            'timestamp': 1403007314.570599,\n            'level': logging.ERROR,\n            'logger': 'default',\n            'tags': [],\n        }\n        result.update(kwargs)\n        manager = EventManager(result)\n        manager.normalize()\n        manager.save(self.project.id)\n\n    def test_environment_gets_user_report(self):\n        self.make_event(\n            environment=self.environment.name,\n            event_id=self.event_id,\n            group=self.group,\n        )\n        self.login_as(user=self.user)\n        response = self.client.post(\n            self.path, {\n                'name': 'Jane Doe',\n                'email': 'jane@example.com',\n                'comments': 'This is an example!',\n            },\n            HTTP_REFERER='http://example.com'\n        )\n\n        assert response.status_code == 200, response.content\n        assert UserReport.objects.get(event_id=self.event_id).environment == self.environment\n\n    def test_user_report_gets_environment(self):\n        self.login_as(user=self.user)\n        response = self.client.post(\n            self.path, {\n                'name': 'Jane Doe',\n                'email': 'jane@example.com',\n                'comments': 'This is an example!',\n            },\n            HTTP_REFERER='http://example.com'\n        )\n        self.make_event(\n            environment=self.environment.name,\n            event_id=self.event_id,\n            group=self.group,\n        )\n        assert response.status_code == 200, response.content\n        assert UserReport.objects.get(event_id=self.event_id).environment == self.environment\n", "comments": "  close ", "content": "from __future__ import absolute_import\n\nfrom django.core.urlresolvers import reverse\nfrom six.moves.urllib.parse import quote\nfrom uuid import uuid4\nimport logging\n\nfrom sentry.models import Environment, UserReport\nfrom sentry.testutils import TestCase\nfrom sentry.event_manager import EventManager\n\n\nclass ErrorPageEmbedTest(TestCase):\n    urls = 'sentry.conf.urls'\n\n    def setUp(self):\n        super(ErrorPageEmbedTest, self).setUp()\n        self.project = self.create_project()\n        self.project.update_option('sentry:origins', ['example.com'])\n        self.key = self.create_project_key(self.project)\n        self.event_id = uuid4().hex\n        self.path = '%s?eventId=%s&dsn=%s' % (\n            reverse('sentry-error-page-embed'), quote(self.event_id), quote(self.key.dsn_public),\n        )\n\n    def test_invalid_referer(self):\n        with self.settings(SENTRY_ALLOW_ORIGIN=None):\n            resp = self.client.get(self.path, HTTP_REFERER='http://foo.com')\n        assert resp.status_code == 403\n\n    def test_renders(self):\n        resp = self.client.get(self.path, HTTP_REFERER='http://example.com')\n        assert resp.status_code == 200\n        self.assertTemplateUsed(resp, 'sentry/error-page-embed.html')\n\n    def test_uses_locale_from_header(self):\n        resp = self.client.get(\n            self.path, HTTP_REFERER='http://example.com', HTTP_ACCEPT_LANGUAGE='fr'\n        )\n        assert resp.status_code == 200\n        self.assertTemplateUsed(resp, 'sentry/error-page-embed.html')\n        assert 'Fermer' in resp.content  # Close\n\n    def test_submission(self):\n        resp = self.client.post(\n            self.path, {\n                'name': 'Jane Doe',\n                'email': 'jane@example.com',\n                'comments': 'This is an example!',\n            },\n            HTTP_REFERER='http://example.com'\n        )\n        assert resp.status_code == 200\n\n        report = UserReport.objects.get()\n        assert report.name == 'Jane Doe'\n        assert report.email == 'jane@example.com'\n        assert report.comments == 'This is an example!'\n        assert report.event_id == self.event_id\n        assert report.project == self.project\n        assert report.group is None\n\n        resp = self.client.post(\n            self.path, {\n                'name': 'Joe Shmoe',\n                'email': 'joe@example.com',\n                'comments': 'haha I updated it!',\n            },\n            HTTP_REFERER='http://example.com'\n        )\n        assert resp.status_code == 200\n\n        report = UserReport.objects.get()\n        assert report.name == 'Joe Shmoe'\n        assert report.email == 'joe@example.com'\n        assert report.comments == 'haha I updated it!'\n        assert report.event_id == self.event_id\n        assert report.project == self.project\n        assert report.group is None\n\n    def test_submission_invalid_event_id(self):\n        self.event_id = 'x' * 100\n        self.path = '%s?eventId=%s&dsn=%s' % (\n            reverse('sentry-error-page-embed'), quote(self.event_id), quote(self.key.dsn_public),\n        )\n\n        resp = self.client.post(\n            self.path, {\n                'name': 'Jane Doe',\n                'email': 'jane@example.com',\n                'comments': 'This is an example!',\n            },\n            HTTP_REFERER='http://example.com'\n        )\n        assert resp.status_code == 400\n\n\nclass ErrorPageEmbedEnvironmentTest(TestCase):\n\n    urls = 'sentry.conf.urls'\n\n    def setUp(self):\n        self.project = self.create_project()\n        self.project.update_option('sentry:origins', ['example.com'])\n        self.key = self.create_project_key(self.project)\n        self.event_id = uuid4().hex\n        self.path = '%s?eventId=%s&dsn=%s' % (\n            reverse('sentry-error-page-embed'), quote(self.event_id), quote(self.key.dsn_public),\n        )\n        self.environment = Environment.objects.create(\n            project_id=self.project.id,\n            organization_id=self.project.organization_id,\n            name='production',\n        )\n        self.environment.add_project(self.project)\n\n    def make_event(self, **kwargs):\n        result = {\n            'event_id': 'a' * 32,\n            'message': 'foo',\n            'timestamp': 1403007314.570599,\n            'level': logging.ERROR,\n            'logger': 'default',\n            'tags': [],\n        }\n        result.update(kwargs)\n        manager = EventManager(result)\n        manager.normalize()\n        manager.save(self.project.id)\n\n    def test_environment_gets_user_report(self):\n        self.make_event(\n            environment=self.environment.name,\n            event_id=self.event_id,\n            group=self.group,\n        )\n        self.login_as(user=self.user)\n        response = self.client.post(\n            self.path, {\n                'name': 'Jane Doe',\n                'email': 'jane@example.com',\n                'comments': 'This is an example!',\n            },\n            HTTP_REFERER='http://example.com'\n        )\n\n        assert response.status_code == 200, response.content\n        assert UserReport.objects.get(event_id=self.event_id).environment == self.environment\n\n    def test_user_report_gets_environment(self):\n        self.login_as(user=self.user)\n        response = self.client.post(\n            self.path, {\n                'name': 'Jane Doe',\n                'email': 'jane@example.com',\n                'comments': 'This is an example!',\n            },\n            HTTP_REFERER='http://example.com'\n        )\n        self.make_event(\n            environment=self.environment.name,\n            event_id=self.event_id,\n            group=self.group,\n        )\n        assert response.status_code == 200, response.content\n        assert UserReport.objects.get(event_id=self.event_id).environment == self.environment\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_error_page_embed.py", "id": "31ee9793ec56380f0e47a7c0fb296f63", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/web/frontend/test_error_page_embed.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}