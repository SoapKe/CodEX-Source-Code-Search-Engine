{"author": "ansible", "code": "\n Copyright: Ansible Project\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.onyx import onyx_interface\nfrom units.modules.utils import set_module_args\nfrom .onyx_module import TestOnyxModule, load_fixture\n\n\nclass TestOnyxInterfaceModule(TestOnyxModule):\n\n    module = onyx_interface\n\n    def setUp(self):\n        super(TestOnyxInterfaceModule, self).setUp()\n        self.mock_get_config = patch.object(\n            onyx_interface.OnyxInterfaceModule, \"_get_interfaces_config\")\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_get_interfaces_status = patch.object(\n            onyx_interface.OnyxInterfaceModule, \"_get_interfaces_status\")\n        self.get_interfaces_status = self.mock_get_interfaces_status.start()\n\n        self.mock_get_interfaces_rates = patch.object(\n            onyx_interface.OnyxInterfaceModule, \"_get_interfaces_rates\")\n        self.get_interfaces_rates = self.mock_get_interfaces_rates.start()\n\n        self.mock_load_config = patch(\n            'ansible.module_utils.network.onyx.onyx.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestOnyxInterfaceModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def load_fixtures(self, commands=None, transport='cli'):\n        config_file = 'onyx_interfaces_show.cfg'\n        self.get_config.return_value = load_fixture(config_file)\n        self.load_config.return_value = None\n\n    def test_mtu_no_change(self):\n        set_module_args(dict(name='Eth1/1', mtu=1500))\n        self.execute_module(changed=False)\n\n    def test_mtu_change(self):\n        set_module_args(dict(name='Eth1/1', mtu=1522))\n        commands = ['interface ethernet 1/1', 'mtu 1522 force', 'exit']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_speed_no_change(self):\n        set_module_args(dict(name='Eth1/1', speed='40G'))\n        self.execute_module(changed=False)\n\n    def test_speed_change(self):\n        set_module_args(dict(name='Eth1/1', speed='100G'))\n        commands = ['interface ethernet 1/1', 'speed 100G force', 'exit']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_mtu_speed_change(self):\n        set_module_args(dict(name='Eth1/1', speed='100G', mtu=1522))\n        commands = ['interface ethernet 1/1', 'speed 100G force',\n                    'mtu 1522 force', 'exit']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_admin_state_no_change(self):\n        set_module_args(dict(name='Eth1/1', enabled=True))\n        self.execute_module(changed=False)\n\n    def test_admin_state_change(self):\n        set_module_args(dict(name='Eth1/1', enabled=False))\n        commands = ['interface ethernet 1/1', 'shutdown', 'exit']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_add_loopback_if(self):\n        set_module_args(dict(name='Loopback 1', description='Loopback test'))\n        commands = ['interface loopback 1', 'description Loopback test',\n                    'exit']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_add_vlan_if(self):\n        set_module_args(dict(name='Vlan 101', description='Vlan test',\n                             enabled=True))\n        commands = ['interface vlan 101', 'description Vlan test',\n                    'no shutdown', 'exit']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_remove_vlan_if(self):\n        set_module_args(dict(name='Vlan 1002', state='absent'))\n        commands = ['no interface vlan 1002']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_oper_state_check(self):\n        set_module_args(dict(name='Eth1/1', enabled=True, state='down'))\n        config_file = 'onyx_interfaces_status.cfg'\n        self.get_interfaces_status.return_value = load_fixture(config_file)\n        self.execute_module(changed=False)\n\n    def test_vlan_oper_state_check(self):\n        set_module_args(dict(name='Vlan 1002', state='down'))\n        config_file = 'onyx_interfaces_status.cfg'\n        self.get_interfaces_status.return_value = load_fixture(config_file)\n        self.execute_module(changed=False)\n\n    def test_rx_rate_check(self):\n        set_module_args(dict(name='Eth1/1', enabled=True, rx_rate='ge(9000)'))\n        config_file = 'onyx_interfaces_rates.cfg'\n        self.get_interfaces_rates.return_value = load_fixture(config_file)\n        self.execute_module(changed=False)\n\n    def test_tx_rate_check(self):\n        set_module_args(dict(name='Eth1/1', enabled=True, tx_rate='ge(10000)'))\n        config_file = 'onyx_interfaces_rates.cfg'\n        self.get_interfaces_rates.return_value = load_fixture(config_file)\n        self.execute_module(changed=False)\n", "comments": "     copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    make coding python3 ish ", "content": "#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.onyx import onyx_interface\nfrom units.modules.utils import set_module_args\nfrom .onyx_module import TestOnyxModule, load_fixture\n\n\nclass TestOnyxInterfaceModule(TestOnyxModule):\n\n    module = onyx_interface\n\n    def setUp(self):\n        super(TestOnyxInterfaceModule, self).setUp()\n        self.mock_get_config = patch.object(\n            onyx_interface.OnyxInterfaceModule, \"_get_interfaces_config\")\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_get_interfaces_status = patch.object(\n            onyx_interface.OnyxInterfaceModule, \"_get_interfaces_status\")\n        self.get_interfaces_status = self.mock_get_interfaces_status.start()\n\n        self.mock_get_interfaces_rates = patch.object(\n            onyx_interface.OnyxInterfaceModule, \"_get_interfaces_rates\")\n        self.get_interfaces_rates = self.mock_get_interfaces_rates.start()\n\n        self.mock_load_config = patch(\n            'ansible.module_utils.network.onyx.onyx.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestOnyxInterfaceModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def load_fixtures(self, commands=None, transport='cli'):\n        config_file = 'onyx_interfaces_show.cfg'\n        self.get_config.return_value = load_fixture(config_file)\n        self.load_config.return_value = None\n\n    def test_mtu_no_change(self):\n        set_module_args(dict(name='Eth1/1', mtu=1500))\n        self.execute_module(changed=False)\n\n    def test_mtu_change(self):\n        set_module_args(dict(name='Eth1/1', mtu=1522))\n        commands = ['interface ethernet 1/1', 'mtu 1522 force', 'exit']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_speed_no_change(self):\n        set_module_args(dict(name='Eth1/1', speed='40G'))\n        self.execute_module(changed=False)\n\n    def test_speed_change(self):\n        set_module_args(dict(name='Eth1/1', speed='100G'))\n        commands = ['interface ethernet 1/1', 'speed 100G force', 'exit']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_mtu_speed_change(self):\n        set_module_args(dict(name='Eth1/1', speed='100G', mtu=1522))\n        commands = ['interface ethernet 1/1', 'speed 100G force',\n                    'mtu 1522 force', 'exit']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_admin_state_no_change(self):\n        set_module_args(dict(name='Eth1/1', enabled=True))\n        self.execute_module(changed=False)\n\n    def test_admin_state_change(self):\n        set_module_args(dict(name='Eth1/1', enabled=False))\n        commands = ['interface ethernet 1/1', 'shutdown', 'exit']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_add_loopback_if(self):\n        set_module_args(dict(name='Loopback 1', description='Loopback test'))\n        commands = ['interface loopback 1', 'description Loopback test',\n                    'exit']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_add_vlan_if(self):\n        set_module_args(dict(name='Vlan 101', description='Vlan test',\n                             enabled=True))\n        commands = ['interface vlan 101', 'description Vlan test',\n                    'no shutdown', 'exit']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_remove_vlan_if(self):\n        set_module_args(dict(name='Vlan 1002', state='absent'))\n        commands = ['no interface vlan 1002']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_oper_state_check(self):\n        set_module_args(dict(name='Eth1/1', enabled=True, state='down'))\n        config_file = 'onyx_interfaces_status.cfg'\n        self.get_interfaces_status.return_value = load_fixture(config_file)\n        self.execute_module(changed=False)\n\n    def test_vlan_oper_state_check(self):\n        set_module_args(dict(name='Vlan 1002', state='down'))\n        config_file = 'onyx_interfaces_status.cfg'\n        self.get_interfaces_status.return_value = load_fixture(config_file)\n        self.execute_module(changed=False)\n\n    def test_rx_rate_check(self):\n        set_module_args(dict(name='Eth1/1', enabled=True, rx_rate='ge(9000)'))\n        config_file = 'onyx_interfaces_rates.cfg'\n        self.get_interfaces_rates.return_value = load_fixture(config_file)\n        self.execute_module(changed=False)\n\n    def test_tx_rate_check(self):\n        set_module_args(dict(name='Eth1/1', enabled=True, tx_rate='ge(10000)'))\n        config_file = 'onyx_interfaces_rates.cfg'\n        self.get_interfaces_rates.return_value = load_fixture(config_file)\n        self.execute_module(changed=False)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_onyx_interface.py", "id": "0fc643f424cc56e4752932c48c622e7f", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/onyx/test_onyx_interface.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}