{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n (c) 2014, Matt Martz <matt@sivel.net>\n (c) 2016, Justin Mayer <https://justinmayer.com/>\n\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n =============================================================================\n\n This script is to be used with ansible-vault's --vault-id arg\n to retrieve the vault password via your OS's native keyring application.\n\n This file *MUST* be saved with executable permissions. Otherwise, Ansible\n will try to parse as a password file and display: \"ERROR! Decryption failed\"\n\n The `keyring` Python module is required: https://pypi.python.org/pypi/keyring\n\n By default, this script will store the specified password in the keyring of\n the user that invokes the script. To specify a user keyring, add a [vault]\n section to your ansible.cfg file with a 'username' option. Example:\n\n [vault]\n username = 'ansible-vault'\n\n In useage like:\n\n    ansible-vault --vault-id keyring_id@contrib/vault/vault-keyring-client.py view some_encrypted_file\n\n  --vault-id will call this script like:\n\n     contrib/vault/vault-keyring-client.py --vault-id keyring_id\n\n That will retrieve the password from users keyring for the\n keyring service 'keyring_id'. The equilivent of:\n\n      keyring get keyring_id $USER\n\n If no vault-id name is specified to ansible command line, the vault-keyring-client.py\n script will be called without a '--vault-id' and will default to the keyring service 'ansible'\n This is equilivent to:\n\n    keyring get ansible $USER\n\n You can configure the `vault_password_file` option in ansible.cfg:\n\n [defaults]\n ...\n vault_password_file = /path/to/vault-keyring-client.py\n ...\n\n To set your password, `cd` to your project directory and run:\n\n    will use default keyring service / vault-id of 'ansible'\n   /path/to/vault-keyring-client.py --set\n\n or to specify the keyring service / vault-id of 'my_ansible_secret':\n\n  /path/to/vault-keyring-client.py --vault-id my_ansible_secret --set\n\n If you choose not to configure the path to `vault_password_file` in\n ansible.cfg, your `ansible-playbook` command might look like:\n\n ansible-playbook --vault-id=keyring_id@/path/to/vault-keyring-client.py site.yml\n\nANSIBLE_METADATA = {'status': ['preview'],\n                    'supported_by': 'community',\n                    'version': '1.0'}\n\nimport argparse\nimport sys\nimport getpass\nimport keyring\n\nfrom ansible.config.manager import ConfigManager\n\nKEYNAME_UNKNOWN_RC = 2\n\n\ndef build_arg_parser():\n    parser = argparse.ArgumentParser(description='Get a vault password from user keyring')\n\n    parser.add_argument('--vault-id', action='store', default=None,\n                        dest='vault_id',\n                        help='name of the vault secret to get from keyring')\n    parser.add_argument('--username', action='store', default=None,\n                        help='the username whose keyring is queried')\n    parser.add_argument('--set', action='store_true', default=False,\n                        dest='set_password',\n                        help='set the password instead of getting it')\n    return parser\n\n\ndef main():\n    config_manager = ConfigManager()\n    username = config_manager.data.get_setting('vault.username')\n    if not username:\n        username = getpass.getuser()\n\n    keyname = config_manager.data.get_setting('vault.keyname')\n    if not keyname:\n        keyname = 'ansible'\n\n    arg_parser = build_arg_parser()\n    args = arg_parser.parse_args()\n\n    username = args.username or username\n    keyname = args.vault_id or keyname\n\n     print('username: %s keyname: %s' % (username, keyname))\n\n    if args.set_password:\n        intro = 'Storing password in \"{}\" user keyring using key name: {}\\n'\n        sys.stdout.write(intro.format(username, keyname))\n        password = getpass.getpass()\n        confirm = getpass.getpass('Confirm password: ')\n        if password == confirm:\n            keyring.set_password(keyname, username, password)\n        else:\n            sys.stderr.write('Passwords do not match\\n')\n            sys.exit(1)\n    else:\n        secret = keyring.get_password(keyname, username)\n        if secret is None:\n            sys.stderr.write('vault-keyring-client could not find key=\"%s\" for user=\"%s\" via backend=\"%s\"\\n' %\n                             (keyname, username, keyring.get_keyring().name))\n            sys.exit(KEYNAME_UNKNOWN_RC)\n\n         print('secret: %s' % secret)\n        sys.stdout.write('%s\\n' % secret)\n\n    sys.exit(0)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "   usr bin env python        coding  utf 8        (c) 2014  matt martz  matt sivel net     (c) 2016  justin mayer  https   justinmayer com      this file part ansible        ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses                                                                                              this script used ansible vault   vault id arg    retrieve vault password via os native keyring application        this file  must  saved executable permissions  otherwise  ansible    try parse password file display   error  decryption failed        the  keyring  python module required  https   pypi python org pypi keyring       by default  script store specified password keyring    user invokes script  to specify user keyring  add  vault     section ansible cfg file  username  option  example         vault     username    ansible vault        in useage like           ansible vault   vault id keyring id contrib vault vault keyring client py view encrypted file          vault id call script like            contrib vault vault keyring client py   vault id keyring id       that retrieve password users keyring    keyring service  keyring id   the equilivent             keyring get keyring id  user       if vault id name specified ansible command line  vault keyring client py    script called without    vault id  default keyring service  ansible     this equilivent           keyring get ansible  user       you configure  vault password file  option ansible cfg         defaults            vault password file    path vault keyring client py              to set password   cd  project directory run            use default keyring service   vault id  ansible        path vault keyring client py   set       specify keyring service   vault id  ansible secret           path vault keyring client py   vault id ansible secret   set       if choose configure path  vault password file     ansible cfg   ansible playbook  command might look like        ansible playbook   vault id keyring id  path vault keyring client py site yml    print( username   keyname      (username  keyname))    print( secret      secret) ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# (c) 2014, Matt Martz <matt@sivel.net>\n# (c) 2016, Justin Mayer <https://justinmayer.com/>\n# This file is part of Ansible.\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n# =============================================================================\n#\n# This script is to be used with ansible-vault's --vault-id arg\n# to retrieve the vault password via your OS's native keyring application.\n#\n# This file *MUST* be saved with executable permissions. Otherwise, Ansible\n# will try to parse as a password file and display: \"ERROR! Decryption failed\"\n#\n# The `keyring` Python module is required: https://pypi.python.org/pypi/keyring\n#\n# By default, this script will store the specified password in the keyring of\n# the user that invokes the script. To specify a user keyring, add a [vault]\n# section to your ansible.cfg file with a 'username' option. Example:\n#\n# [vault]\n# username = 'ansible-vault'\n#\n# In useage like:\n#\n#    ansible-vault --vault-id keyring_id@contrib/vault/vault-keyring-client.py view some_encrypted_file\n#\n#  --vault-id will call this script like:\n#\n#     contrib/vault/vault-keyring-client.py --vault-id keyring_id\n#\n# That will retrieve the password from users keyring for the\n# keyring service 'keyring_id'. The equilivent of:\n#\n#      keyring get keyring_id $USER\n#\n# If no vault-id name is specified to ansible command line, the vault-keyring-client.py\n# script will be called without a '--vault-id' and will default to the keyring service 'ansible'\n# This is equilivent to:\n#\n#    keyring get ansible $USER\n#\n# You can configure the `vault_password_file` option in ansible.cfg:\n#\n# [defaults]\n# ...\n# vault_password_file = /path/to/vault-keyring-client.py\n# ...\n#\n# To set your password, `cd` to your project directory and run:\n#\n#   # will use default keyring service / vault-id of 'ansible'\n#   /path/to/vault-keyring-client.py --set\n#\n# or to specify the keyring service / vault-id of 'my_ansible_secret':\n#\n#  /path/to/vault-keyring-client.py --vault-id my_ansible_secret --set\n#\n# If you choose not to configure the path to `vault_password_file` in\n# ansible.cfg, your `ansible-playbook` command might look like:\n#\n# ansible-playbook --vault-id=keyring_id@/path/to/vault-keyring-client.py site.yml\n\nANSIBLE_METADATA = {'status': ['preview'],\n                    'supported_by': 'community',\n                    'version': '1.0'}\n\nimport argparse\nimport sys\nimport getpass\nimport keyring\n\nfrom ansible.config.manager import ConfigManager\n\nKEYNAME_UNKNOWN_RC = 2\n\n\ndef build_arg_parser():\n    parser = argparse.ArgumentParser(description='Get a vault password from user keyring')\n\n    parser.add_argument('--vault-id', action='store', default=None,\n                        dest='vault_id',\n                        help='name of the vault secret to get from keyring')\n    parser.add_argument('--username', action='store', default=None,\n                        help='the username whose keyring is queried')\n    parser.add_argument('--set', action='store_true', default=False,\n                        dest='set_password',\n                        help='set the password instead of getting it')\n    return parser\n\n\ndef main():\n    config_manager = ConfigManager()\n    username = config_manager.data.get_setting('vault.username')\n    if not username:\n        username = getpass.getuser()\n\n    keyname = config_manager.data.get_setting('vault.keyname')\n    if not keyname:\n        keyname = 'ansible'\n\n    arg_parser = build_arg_parser()\n    args = arg_parser.parse_args()\n\n    username = args.username or username\n    keyname = args.vault_id or keyname\n\n    # print('username: %s keyname: %s' % (username, keyname))\n\n    if args.set_password:\n        intro = 'Storing password in \"{}\" user keyring using key name: {}\\n'\n        sys.stdout.write(intro.format(username, keyname))\n        password = getpass.getpass()\n        confirm = getpass.getpass('Confirm password: ')\n        if password == confirm:\n            keyring.set_password(keyname, username, password)\n        else:\n            sys.stderr.write('Passwords do not match\\n')\n            sys.exit(1)\n    else:\n        secret = keyring.get_password(keyname, username)\n        if secret is None:\n            sys.stderr.write('vault-keyring-client could not find key=\"%s\" for user=\"%s\" via backend=\"%s\"\\n' %\n                             (keyname, username, keyring.get_keyring().name))\n            sys.exit(KEYNAME_UNKNOWN_RC)\n\n        # print('secret: %s' % secret)\n        sys.stdout.write('%s\\n' % secret)\n\n    sys.exit(0)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "vault-keyring-client.py", "id": "269d628c9888f20cb15610691955412f", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/contrib/vault/vault-keyring-client.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}