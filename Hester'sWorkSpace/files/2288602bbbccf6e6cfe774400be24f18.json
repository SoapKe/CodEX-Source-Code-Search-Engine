{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    get_element_by_attribute,\n    parse_iso8601,\n    remove_end,\n)\n\n\nclass XuiteIE(InfoExtractor):\n    IE_DESC = '\u96a8\u610f\u7aa9Xuite\u5f71\u97f3'\n    _REGEX_BASE64 = r'(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?'\n    _VALID_URL = r'https?://vlog\\.xuite\\.net/(?:play|embed)/(?P<id>%s)' % _REGEX_BASE64\n    _TESTS = [{\n        \n        'url': 'http://vlog.xuite.net/play/RGkzc1ZULTM4NjA5MTQuZmx2',\n        'md5': 'e79284c87b371424885448d11f6398c8',\n        'info_dict': {\n            'id': '3860914',\n            'ext': 'mp3',\n            'title': '\u5b64\u55ae\u5357\u534a\u7403-\u6b50\u5fb7\u967d',\n            'description': '\u5b64\u55ae\u5357\u534a\u7403-\u6b50\u5fb7\u967d',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 247.246,\n            'timestamp': 1314932940,\n            'upload_date': '20110902',\n            'uploader': '\u963f\u80fd',\n            'uploader_id': '15973816',\n            'categories': ['\u500b\u4eba\u77ed\u7247'],\n        },\n    }, {\n        \n        'url': 'http://vlog.xuite.net/play/WUxxR2xCLTI1OTI1MDk5LmZsdg==',\n        'md5': '21f7b39c009b5a4615b4463df6eb7a46',\n        'info_dict': {\n            'id': '25925099',\n            'ext': 'mp4',\n            'title': 'BigBuckBunny_320x180',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 596.458,\n            'timestamp': 1454242500,\n            'upload_date': '20160131',\n            'uploader': '\u5c41\u59e5',\n            'uploader_id': '12158353',\n            'categories': ['\u500b\u4eba\u77ed\u7247'],\n            'description': 'http://download.blender.org/peach/bigbuckbunny_movies/BigBuckBunny_320x180.mp4',\n        },\n    }, {\n        \n        'url': 'http://vlog.xuite.net/play/bWo1N1pLLTIxMzAxMTcwLmZsdg==',\n        'md5': '1166e0f461efe55b62e26a2d2a68e6de',\n        'info_dict': {\n            'id': '21301170',\n            'ext': 'mp4',\n            'title': '\u6697\u6bba\u6559\u5ba4 02',\n            'description': '\u5b57\u5e55:\u3010\u6975\u5f71\u5b57\u5e55\u793e\u3011',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1384.907,\n            'timestamp': 1421481240,\n            'upload_date': '20150117',\n            'uploader': '\u6211\u53ea\u662f\u60f3\u8a8d\u771f\u9ede',\n            'uploader_id': '242127761',\n            'categories': ['\u96fb\u73a9\u52d5\u6f2b'],\n        },\n        'skip': 'Video removed',\n    }, {\n        \n        \n        'url': 'http://vlog.xuite.net/embed/cE1xbENoLTI3NDQ3MzM2LmZsdg==?ar=0&as=0',\n        'info_dict': {\n            'id': '27447336',\n            'ext': 'mp4',\n            'title': '\u7537\u5973\u5e73\u6b0a\u53ea\u662f\u53e3\u865f\uff1f\u5c08\u5bb6\u89e3\u91cb\u7d04\u6703\u6642\u7537\u751f\u662f\u5426\u8a72\u5e6b\u5973\u751f\u4ed8\u9322 (\u4e2d\u5b57)',\n            'description': 'md5:1223810fa123b179083a3aed53574706',\n            'timestamp': 1466160960,\n            'upload_date': '20160617',\n            'uploader': 'B.C. & Lowy',\n            'uploader_id': '232279340',\n        },\n    }, {\n        'url': 'http://vlog.xuite.net/play/S1dDUjdyLTMyOTc3NjcuZmx2/%E5%AD%AB%E7%87%95%E5%A7%BF-%E7%9C%BC%E6%B7%9A%E6%88%90%E8%A9%A9',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        \n        url = url.replace('/embed/', '/play/')\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        error_msg = self._search_regex(\n            r'<div id=\"error-message-content\">([^<]+)',\n            webpage, 'error message', default=None)\n        if error_msg:\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, error_msg),\n                expected=True)\n\n        media_info = self._parse_json(self._search_regex(\n            r'var\\s+mediaInfo\\s*=\\s*({.*});', webpage, 'media info'), video_id)\n\n        video_id = media_info['MEDIA_ID']\n\n        formats = []\n        for key in ('html5Url', 'html5HQUrl'):\n            video_url = media_info.get(key)\n            if not video_url:\n                continue\n            format_id = self._search_regex(\n                r'\\bq=(.+?)\\b', video_url, 'format id', default=None)\n            formats.append({\n                'url': video_url,\n                'ext': 'mp4' if format_id.isnumeric() else format_id,\n                'format_id': format_id,\n                'height': int(format_id) if format_id.isnumeric() else None,\n            })\n        self._sort_formats(formats)\n\n        timestamp = media_info.get('PUBLISH_DATETIME')\n        if timestamp:\n            timestamp = parse_iso8601(timestamp + ' +0800', ' ')\n\n        category = media_info.get('catName')\n        categories = [category] if category else []\n\n        uploader = media_info.get('NICKNAME')\n        uploader_url = None\n\n        author_div = get_element_by_attribute('itemprop', 'author', webpage)\n        if author_div:\n            uploader = uploader or self._html_search_meta('name', author_div)\n            uploader_url = self._html_search_regex(\n                r'<link[^>]+itemprop=\"url\"[^>]+href=\"([^\"]+)\"', author_div,\n                'uploader URL', fatal=False)\n\n        return {\n            'id': video_id,\n            'title': media_info['TITLE'],\n            'description': remove_end(media_info.get('metaDesc'), ' (Xuite \u5f71\u97f3)'),\n            'thumbnail': media_info.get('ogImageUrl'),\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'uploader_id': media_info.get('MEMBER_ID'),\n            'uploader_url': uploader_url,\n            'duration': float_or_none(media_info.get('MEDIA_DURATION'), 1000000),\n            'categories': categories,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# Audio\n# Video with only one format\n# Video with two formats\n# Video with encoded media id\n# from http://forgetfulbc.blogspot.com/2016/06/date.html\n# /play/ URLs provide embedded video URL and more metadata\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    get_element_by_attribute,\n    parse_iso8601,\n    remove_end,\n)\n\n\nclass XuiteIE(InfoExtractor):\n    IE_DESC = '\u96a8\u610f\u7aa9Xuite\u5f71\u97f3'\n    _REGEX_BASE64 = r'(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?'\n    _VALID_URL = r'https?://vlog\\.xuite\\.net/(?:play|embed)/(?P<id>%s)' % _REGEX_BASE64\n    _TESTS = [{\n        # Audio\n        'url': 'http://vlog.xuite.net/play/RGkzc1ZULTM4NjA5MTQuZmx2',\n        'md5': 'e79284c87b371424885448d11f6398c8',\n        'info_dict': {\n            'id': '3860914',\n            'ext': 'mp3',\n            'title': '\u5b64\u55ae\u5357\u534a\u7403-\u6b50\u5fb7\u967d',\n            'description': '\u5b64\u55ae\u5357\u534a\u7403-\u6b50\u5fb7\u967d',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 247.246,\n            'timestamp': 1314932940,\n            'upload_date': '20110902',\n            'uploader': '\u963f\u80fd',\n            'uploader_id': '15973816',\n            'categories': ['\u500b\u4eba\u77ed\u7247'],\n        },\n    }, {\n        # Video with only one format\n        'url': 'http://vlog.xuite.net/play/WUxxR2xCLTI1OTI1MDk5LmZsdg==',\n        'md5': '21f7b39c009b5a4615b4463df6eb7a46',\n        'info_dict': {\n            'id': '25925099',\n            'ext': 'mp4',\n            'title': 'BigBuckBunny_320x180',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 596.458,\n            'timestamp': 1454242500,\n            'upload_date': '20160131',\n            'uploader': '\u5c41\u59e5',\n            'uploader_id': '12158353',\n            'categories': ['\u500b\u4eba\u77ed\u7247'],\n            'description': 'http://download.blender.org/peach/bigbuckbunny_movies/BigBuckBunny_320x180.mp4',\n        },\n    }, {\n        # Video with two formats\n        'url': 'http://vlog.xuite.net/play/bWo1N1pLLTIxMzAxMTcwLmZsdg==',\n        'md5': '1166e0f461efe55b62e26a2d2a68e6de',\n        'info_dict': {\n            'id': '21301170',\n            'ext': 'mp4',\n            'title': '\u6697\u6bba\u6559\u5ba4 02',\n            'description': '\u5b57\u5e55:\u3010\u6975\u5f71\u5b57\u5e55\u793e\u3011',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1384.907,\n            'timestamp': 1421481240,\n            'upload_date': '20150117',\n            'uploader': '\u6211\u53ea\u662f\u60f3\u8a8d\u771f\u9ede',\n            'uploader_id': '242127761',\n            'categories': ['\u96fb\u73a9\u52d5\u6f2b'],\n        },\n        'skip': 'Video removed',\n    }, {\n        # Video with encoded media id\n        # from http://forgetfulbc.blogspot.com/2016/06/date.html\n        'url': 'http://vlog.xuite.net/embed/cE1xbENoLTI3NDQ3MzM2LmZsdg==?ar=0&as=0',\n        'info_dict': {\n            'id': '27447336',\n            'ext': 'mp4',\n            'title': '\u7537\u5973\u5e73\u6b0a\u53ea\u662f\u53e3\u865f\uff1f\u5c08\u5bb6\u89e3\u91cb\u7d04\u6703\u6642\u7537\u751f\u662f\u5426\u8a72\u5e6b\u5973\u751f\u4ed8\u9322 (\u4e2d\u5b57)',\n            'description': 'md5:1223810fa123b179083a3aed53574706',\n            'timestamp': 1466160960,\n            'upload_date': '20160617',\n            'uploader': 'B.C. & Lowy',\n            'uploader_id': '232279340',\n        },\n    }, {\n        'url': 'http://vlog.xuite.net/play/S1dDUjdyLTMyOTc3NjcuZmx2/%E5%AD%AB%E7%87%95%E5%A7%BF-%E7%9C%BC%E6%B7%9A%E6%88%90%E8%A9%A9',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        # /play/ URLs provide embedded video URL and more metadata\n        url = url.replace('/embed/', '/play/')\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        error_msg = self._search_regex(\n            r'<div id=\"error-message-content\">([^<]+)',\n            webpage, 'error message', default=None)\n        if error_msg:\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, error_msg),\n                expected=True)\n\n        media_info = self._parse_json(self._search_regex(\n            r'var\\s+mediaInfo\\s*=\\s*({.*});', webpage, 'media info'), video_id)\n\n        video_id = media_info['MEDIA_ID']\n\n        formats = []\n        for key in ('html5Url', 'html5HQUrl'):\n            video_url = media_info.get(key)\n            if not video_url:\n                continue\n            format_id = self._search_regex(\n                r'\\bq=(.+?)\\b', video_url, 'format id', default=None)\n            formats.append({\n                'url': video_url,\n                'ext': 'mp4' if format_id.isnumeric() else format_id,\n                'format_id': format_id,\n                'height': int(format_id) if format_id.isnumeric() else None,\n            })\n        self._sort_formats(formats)\n\n        timestamp = media_info.get('PUBLISH_DATETIME')\n        if timestamp:\n            timestamp = parse_iso8601(timestamp + ' +0800', ' ')\n\n        category = media_info.get('catName')\n        categories = [category] if category else []\n\n        uploader = media_info.get('NICKNAME')\n        uploader_url = None\n\n        author_div = get_element_by_attribute('itemprop', 'author', webpage)\n        if author_div:\n            uploader = uploader or self._html_search_meta('name', author_div)\n            uploader_url = self._html_search_regex(\n                r'<link[^>]+itemprop=\"url\"[^>]+href=\"([^\"]+)\"', author_div,\n                'uploader URL', fatal=False)\n\n        return {\n            'id': video_id,\n            'title': media_info['TITLE'],\n            'description': remove_end(media_info.get('metaDesc'), ' (Xuite \u5f71\u97f3)'),\n            'thumbnail': media_info.get('ogImageUrl'),\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'uploader_id': media_info.get('MEMBER_ID'),\n            'uploader_url': uploader_url,\n            'duration': float_or_none(media_info.get('MEDIA_DURATION'), 1000000),\n            'categories': categories,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "xuite.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/xuite.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}