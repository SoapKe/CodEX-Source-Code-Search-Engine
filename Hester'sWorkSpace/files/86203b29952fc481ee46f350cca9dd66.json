{"author": "pallets", "code": "\n\n\n__version__ = '0.13-dev'\n\n\n\nfrom werkzeug.exceptions import abort\nfrom werkzeug.utils import redirect\nfrom jinja2 import Markup, escape\n\nfrom .app import Flask, Request, Response\nfrom .config import Config\nfrom .helpers import url_for, flash, send_file, send_from_directory, \\\n     get_flashed_messages, get_template_attribute, make_response, safe_join, \\\n     stream_with_context\nfrom .globals import current_app, g, request, session, _request_ctx_stack, \\\n     _app_ctx_stack\nfrom .ctx import has_request_context, has_app_context, \\\n     after_this_request, copy_current_request_context\nfrom .blueprints import Blueprint\nfrom .templating import render_template, render_template_string\n\n\nfrom .signals import signals_available, template_rendered, request_started, \\\n     request_finished, got_request_exception, request_tearing_down, \\\n     appcontext_tearing_down, appcontext_pushed, \\\n     appcontext_popped, message_flashed, before_render_template\n\n\n\nfrom . import json\n\n\n\njsonify = json.jsonify\n\n\nfrom .sessions import SecureCookieSession as Session\njson_available = True\n", "comments": "\n    flask\n    ~~~~~\n\n    A microframework based on Werkzeug.  It's extensively documented\n    and follows best practice patterns.\n\n    :copyright: \u00a9 2010 by the Pallets team.\n    :license: BSD, see LICENSE for more details.\n\n\n\n# -*- coding: utf-8 -*-\n# utilities we import from Werkzeug and Jinja2 that are unused\n# in the module but are exported as public interface.\n# the signals\n# We're not exposing the actual json module but a convenient wrapper around\n# it.\n# This was the only thing that Flask used to export at one point and it had\n# a more generic name.\n# backwards compat, goes away in 1.0\n", "content": "# -*- coding: utf-8 -*-\n\"\"\"\n    flask\n    ~~~~~\n\n    A microframework based on Werkzeug.  It's extensively documented\n    and follows best practice patterns.\n\n    :copyright: \u00a9 2010 by the Pallets team.\n    :license: BSD, see LICENSE for more details.\n\"\"\"\n\n__version__ = '0.13-dev'\n\n# utilities we import from Werkzeug and Jinja2 that are unused\n# in the module but are exported as public interface.\nfrom werkzeug.exceptions import abort\nfrom werkzeug.utils import redirect\nfrom jinja2 import Markup, escape\n\nfrom .app import Flask, Request, Response\nfrom .config import Config\nfrom .helpers import url_for, flash, send_file, send_from_directory, \\\n     get_flashed_messages, get_template_attribute, make_response, safe_join, \\\n     stream_with_context\nfrom .globals import current_app, g, request, session, _request_ctx_stack, \\\n     _app_ctx_stack\nfrom .ctx import has_request_context, has_app_context, \\\n     after_this_request, copy_current_request_context\nfrom .blueprints import Blueprint\nfrom .templating import render_template, render_template_string\n\n# the signals\nfrom .signals import signals_available, template_rendered, request_started, \\\n     request_finished, got_request_exception, request_tearing_down, \\\n     appcontext_tearing_down, appcontext_pushed, \\\n     appcontext_popped, message_flashed, before_render_template\n\n# We're not exposing the actual json module but a convenient wrapper around\n# it.\nfrom . import json\n\n# This was the only thing that Flask used to export at one point and it had\n# a more generic name.\njsonify = json.jsonify\n\n# backwards compat, goes away in 1.0\nfrom .sessions import SecureCookieSession as Session\njson_available = True\n", "description": "The Python micro framework for building web applications.", "file_name": "__init__.py", "language": "Python", "project_name": "flask", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/pallets_flask/pallets-flask-a2ea186/flask/__init__.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:52:03Z", "url": "https://github.com/pallets/flask", "wiki": false}