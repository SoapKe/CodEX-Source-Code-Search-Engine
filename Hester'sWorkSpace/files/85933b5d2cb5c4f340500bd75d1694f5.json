{"author": "ansible", "code": "\n\n# Copyright: (c) 2016-2017, Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: oneview_enclosure_facts\nshort_description: Retrieve facts about one or more Enclosures\ndescription:\n    - Retrieve facts about one or more of the Enclosures from OneView.\nversion_added: \"2.5\"\nrequirements:\n    - hpOneView >= 2.0.1\nauthor:\n    - Felipe Bulsoni (@fgbulsoni)\n    - Thiago Miotto (@tmiotto)\n    - Adriane Cardozo (@adriane-cardozo)\noptions:\n    name:\n      description:\n        - Enclosure name.\n    options:\n      description:\n        - \"List with options to gather additional facts about an Enclosure and related resources.\n          Options allowed: C(script), C(environmentalConfiguration), and C(utilization). For the option C(utilization),\n          you can provide specific parameters.\"\n\nextends_documentation_fragment:\n    - oneview\n    - oneview.factsparams\n'''\n\nEXAMPLES = '''\n- name: Gather facts about all Enclosures\n  oneview_enclosure_facts:\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n- debug: var=enclosures\n\n- name: Gather paginated, filtered and sorted facts about Enclosures\n  oneview_enclosure_facts:\n    params:\n      start: 0\n      count: 3\n      sort: name:descending\n      filter: status=OK\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n- debug: var=enclosures\n\n- name: Gather facts about an Enclosure by name\n  oneview_enclosure_facts:\n    name: Enclosure-Name\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n- debug: var=enclosures\n\n- name: Gather facts about an Enclosure by name with options\n  oneview_enclosure_facts:\n    name: Test-Enclosure\n    options:\n      - script                       \n      - environmentalConfiguration   \n      - utilization                  \n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n- debug: var=enclosures\n- debug: var=enclosure_script\n- debug: var=enclosure_environmental_configuration\n- debug: var=enclosure_utilization\n\n- name: \"Gather facts about an Enclosure with temperature data at a resolution of one sample per day, between two\n         specified dates\"\n  oneview_enclosure_facts:\n    name: Test-Enclosure\n    options:\n      - utilization:                   \n          fields: AmbientTemperature\n          filter:\n            - startDate=2016-07-01T14:29:42.000Z\n            - endDate=2017-07-01T03:29:42.000Z\n          view: day\n          refresh: false\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n- debug: var=enclosures\n- debug: var=enclosure_utilization\n'''\n\nRETURN = '''\nenclosures:\n    description: Has all the OneView facts about the Enclosures.\n    returned: Always, but can be null.\n    type: dict\n\nenclosure_script:\n    description: Has all the OneView facts about the script of an Enclosure.\n    returned: When requested, but can be null.\n    type: string\n\nenclosure_environmental_configuration:\n    description: Has all the OneView facts about the environmental configuration of an Enclosure.\n    returned: When requested, but can be null.\n    type: dict\n\nenclosure_utilization:\n    description: Has all the OneView facts about the utilization of an Enclosure.\n    returned: When requested, but can be null.\n    type: dict\n'''\n\nfrom ansible.module_utils.oneview import OneViewModuleBase\n\n\nclass EnclosureFactsModule(OneViewModuleBase):\n    argument_spec = dict(name=dict(type='str'), options=dict(type='list'), params=dict(type='dict'))\n\n    def __init__(self):\n        super(EnclosureFactsModule, self).__init__(additional_arg_spec=self.argument_spec)\n\n    def execute_module(self):\n\n        ansible_facts = {}\n\n        if self.module.params['name']:\n            enclosures = self._get_by_name(self.module.params['name'])\n\n            if self.options and enclosures:\n                ansible_facts = self._gather_optional_facts(self.options, enclosures[0])\n        else:\n            enclosures = self.oneview_client.enclosures.get_all(**self.facts_params)\n\n        ansible_facts['enclosures'] = enclosures\n\n        return dict(changed=False,\n                    ansible_facts=ansible_facts)\n\n    def _gather_optional_facts(self, options, enclosure):\n\n        enclosure_client = self.oneview_client.enclosures\n        ansible_facts = {}\n\n        if options.get('script'):\n            ansible_facts['enclosure_script'] = enclosure_client.get_script(enclosure['uri'])\n        if options.get('environmentalConfiguration'):\n            env_config = enclosure_client.get_environmental_configuration(enclosure['uri'])\n            ansible_facts['enclosure_environmental_configuration'] = env_config\n        if options.get('utilization'):\n            ansible_facts['enclosure_utilization'] = self._get_utilization(enclosure, options['utilization'])\n\n        return ansible_facts\n\n    def _get_utilization(self, enclosure, params):\n        fields = view = refresh = filter = ''\n\n        if isinstance(params, dict):\n            fields = params.get('fields')\n            view = params.get('view')\n            refresh = params.get('refresh')\n            filter = params.get('filter')\n\n        return self.oneview_client.enclosures.get_utilization(enclosure['uri'],\n                                                              fields=fields,\n                                                              filter=filter,\n                                                              refresh=refresh,\n                                                              view=view)\n\n    def _get_by_name(self, name):\n        return self.oneview_client.enclosures.get_by('name', name)\n\n\ndef main():\n    EnclosureFactsModule().run()\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  oneview enclosure facts short description  retrieve facts one enclosures description        retrieve facts one enclosures oneview  version added   2 5  requirements        hponeview    2 0 1 author        felipe bulsoni ( fgbulsoni)       thiago miotto ( tmiotto)       adriane cardozo ( adriane cardozo) options      name        description            enclosure name      options        description             list options gather additional facts enclosure related resources            options allowed  c(script)  c(environmentalconfiguration)  c(utilization)  for option c(utilization)            provide specific parameters    extends documentation fragment        oneview       oneview factsparams      examples         name  gather facts enclosures   oneview enclosure facts      hostname  172 16 101 48     username  administrator     password  password     api version  500   log  true   delegate  localhost   debug  var enclosures    name  gather paginated  filtered sorted facts enclosures   oneview enclosure facts      params        start  0       count  3       sort  name descending       filter  status ok     hostname  172 16 101 48     username  administrator     password  password     api version  500   log  true   delegate  localhost   debug  var enclosures    name  gather facts enclosure name   oneview enclosure facts      name  enclosure name     hostname  172 16 101 48     username  administrator     password  password     api version  500   log  true   delegate  localhost   debug  var enclosures    name  gather facts enclosure name options   oneview enclosure facts      name  test enclosure     options          script                         optional         environmentalconfiguration     optional         utilization                    optional     hostname  172 16 101 48     username  administrator     password  password     api version  500   log  true   delegate  localhost   debug  var enclosures   debug  var enclosure script   debug  var enclosure environmental configuration   debug  var enclosure utilization    name   gather facts enclosure temperature data resolution one sample per day  two          specified dates    oneview enclosure facts      name  test enclosure     options          utilization                      optional           fields  ambienttemperature           filter                startdate 2016 07 01t14 29 42 000z               enddate 2017 07 01t03 29 42 000z           view  day           refresh  false     hostname  172 16 101 48     username  administrator     password  password     api version  500   log  true   delegate  localhost   debug  var enclosures   debug  var enclosure utilization      return       enclosures      description  has oneview facts enclosures      returned  always  null      type  dict  enclosure script      description  has oneview facts script enclosure      returned  when requested  null      type  string  enclosure environmental configuration      description  has oneview facts environmental configuration enclosure      returned  when requested  null      type  dict  enclosure utilization      description  has oneview facts utilization enclosure      returned  when requested  null      type  dict         usr bin python    copyright  (c) 2016 2017  hewlett packard enterprise development lp    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    optional    optional    optional    optional ", "content": "#!/usr/bin/python\n\n# Copyright: (c) 2016-2017, Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: oneview_enclosure_facts\nshort_description: Retrieve facts about one or more Enclosures\ndescription:\n    - Retrieve facts about one or more of the Enclosures from OneView.\nversion_added: \"2.5\"\nrequirements:\n    - hpOneView >= 2.0.1\nauthor:\n    - Felipe Bulsoni (@fgbulsoni)\n    - Thiago Miotto (@tmiotto)\n    - Adriane Cardozo (@adriane-cardozo)\noptions:\n    name:\n      description:\n        - Enclosure name.\n    options:\n      description:\n        - \"List with options to gather additional facts about an Enclosure and related resources.\n          Options allowed: C(script), C(environmentalConfiguration), and C(utilization). For the option C(utilization),\n          you can provide specific parameters.\"\n\nextends_documentation_fragment:\n    - oneview\n    - oneview.factsparams\n'''\n\nEXAMPLES = '''\n- name: Gather facts about all Enclosures\n  oneview_enclosure_facts:\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n- debug: var=enclosures\n\n- name: Gather paginated, filtered and sorted facts about Enclosures\n  oneview_enclosure_facts:\n    params:\n      start: 0\n      count: 3\n      sort: name:descending\n      filter: status=OK\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n- debug: var=enclosures\n\n- name: Gather facts about an Enclosure by name\n  oneview_enclosure_facts:\n    name: Enclosure-Name\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n- debug: var=enclosures\n\n- name: Gather facts about an Enclosure by name with options\n  oneview_enclosure_facts:\n    name: Test-Enclosure\n    options:\n      - script                       # optional\n      - environmentalConfiguration   # optional\n      - utilization                  # optional\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n- debug: var=enclosures\n- debug: var=enclosure_script\n- debug: var=enclosure_environmental_configuration\n- debug: var=enclosure_utilization\n\n- name: \"Gather facts about an Enclosure with temperature data at a resolution of one sample per day, between two\n         specified dates\"\n  oneview_enclosure_facts:\n    name: Test-Enclosure\n    options:\n      - utilization:                   # optional\n          fields: AmbientTemperature\n          filter:\n            - startDate=2016-07-01T14:29:42.000Z\n            - endDate=2017-07-01T03:29:42.000Z\n          view: day\n          refresh: false\n    hostname: 172.16.101.48\n    username: administrator\n    password: my_password\n    api_version: 500\n  no_log: true\n  delegate_to: localhost\n- debug: var=enclosures\n- debug: var=enclosure_utilization\n'''\n\nRETURN = '''\nenclosures:\n    description: Has all the OneView facts about the Enclosures.\n    returned: Always, but can be null.\n    type: dict\n\nenclosure_script:\n    description: Has all the OneView facts about the script of an Enclosure.\n    returned: When requested, but can be null.\n    type: string\n\nenclosure_environmental_configuration:\n    description: Has all the OneView facts about the environmental configuration of an Enclosure.\n    returned: When requested, but can be null.\n    type: dict\n\nenclosure_utilization:\n    description: Has all the OneView facts about the utilization of an Enclosure.\n    returned: When requested, but can be null.\n    type: dict\n'''\n\nfrom ansible.module_utils.oneview import OneViewModuleBase\n\n\nclass EnclosureFactsModule(OneViewModuleBase):\n    argument_spec = dict(name=dict(type='str'), options=dict(type='list'), params=dict(type='dict'))\n\n    def __init__(self):\n        super(EnclosureFactsModule, self).__init__(additional_arg_spec=self.argument_spec)\n\n    def execute_module(self):\n\n        ansible_facts = {}\n\n        if self.module.params['name']:\n            enclosures = self._get_by_name(self.module.params['name'])\n\n            if self.options and enclosures:\n                ansible_facts = self._gather_optional_facts(self.options, enclosures[0])\n        else:\n            enclosures = self.oneview_client.enclosures.get_all(**self.facts_params)\n\n        ansible_facts['enclosures'] = enclosures\n\n        return dict(changed=False,\n                    ansible_facts=ansible_facts)\n\n    def _gather_optional_facts(self, options, enclosure):\n\n        enclosure_client = self.oneview_client.enclosures\n        ansible_facts = {}\n\n        if options.get('script'):\n            ansible_facts['enclosure_script'] = enclosure_client.get_script(enclosure['uri'])\n        if options.get('environmentalConfiguration'):\n            env_config = enclosure_client.get_environmental_configuration(enclosure['uri'])\n            ansible_facts['enclosure_environmental_configuration'] = env_config\n        if options.get('utilization'):\n            ansible_facts['enclosure_utilization'] = self._get_utilization(enclosure, options['utilization'])\n\n        return ansible_facts\n\n    def _get_utilization(self, enclosure, params):\n        fields = view = refresh = filter = ''\n\n        if isinstance(params, dict):\n            fields = params.get('fields')\n            view = params.get('view')\n            refresh = params.get('refresh')\n            filter = params.get('filter')\n\n        return self.oneview_client.enclosures.get_utilization(enclosure['uri'],\n                                                              fields=fields,\n                                                              filter=filter,\n                                                              refresh=refresh,\n                                                              view=view)\n\n    def _get_by_name(self, name):\n        return self.oneview_client.enclosures.get_by('name', name)\n\n\ndef main():\n    EnclosureFactsModule().run()\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "oneview_enclosure_facts.py", "id": "85933b5d2cb5c4f340500bd75d1694f5", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/remote_management/oneview/oneview_enclosure_facts.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}