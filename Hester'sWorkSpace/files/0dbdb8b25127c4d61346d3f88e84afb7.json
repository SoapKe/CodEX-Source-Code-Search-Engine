{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestShortestPath(object):\n\n    def test_shortest_path(self):\n        graph = Graph()\n        graph.add_edge('a', 'b', weight=5)\n        graph.add_edge('a', 'c', weight=3)\n        graph.add_edge('a', 'e', weight=2)\n        graph.add_edge('b', 'd', weight=2)\n        graph.add_edge('c', 'b', weight=1)\n        graph.add_edge('c', 'd', weight=1)\n        graph.add_edge('d', 'a', weight=1)\n        graph.add_edge('d', 'g', weight=2)\n        graph.add_edge('d', 'h', weight=1)\n        graph.add_edge('e', 'a', weight=1)\n        graph.add_edge('e', 'h', weight=4)\n        graph.add_edge('e', 'i', weight=7)\n        graph.add_edge('f', 'b', weight=3)\n        graph.add_edge('f', 'g', weight=1)\n        graph.add_edge('g', 'c', weight=3)\n        graph.add_edge('g', 'i', weight=2)\n        graph.add_edge('h', 'c', weight=2)\n        graph.add_edge('h', 'f', weight=2)\n        graph.add_edge('h', 'g', weight=2)\n        shortest_path = ShortestPath(graph)\n        result = shortest_path.find_shortest_path('a', 'i')\n        assert_equal(result, ['a', 'c', 'd', 'g', 'i'])\n        assert_equal(shortest_path.path_weight['i'], 8)\n\n        print('Success: test_shortest_path')\n\n\ndef main():\n    test = TestShortestPath()\n    test.test_shortest_path()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\n\nclass TestShortestPath(object):\n\n    def test_shortest_path(self):\n        graph = Graph()\n        graph.add_edge('a', 'b', weight=5)\n        graph.add_edge('a', 'c', weight=3)\n        graph.add_edge('a', 'e', weight=2)\n        graph.add_edge('b', 'd', weight=2)\n        graph.add_edge('c', 'b', weight=1)\n        graph.add_edge('c', 'd', weight=1)\n        graph.add_edge('d', 'a', weight=1)\n        graph.add_edge('d', 'g', weight=2)\n        graph.add_edge('d', 'h', weight=1)\n        graph.add_edge('e', 'a', weight=1)\n        graph.add_edge('e', 'h', weight=4)\n        graph.add_edge('e', 'i', weight=7)\n        graph.add_edge('f', 'b', weight=3)\n        graph.add_edge('f', 'g', weight=1)\n        graph.add_edge('g', 'c', weight=3)\n        graph.add_edge('g', 'i', weight=2)\n        graph.add_edge('h', 'c', weight=2)\n        graph.add_edge('h', 'f', weight=2)\n        graph.add_edge('h', 'g', weight=2)\n        shortest_path = ShortestPath(graph)\n        result = shortest_path.find_shortest_path('a', 'i')\n        assert_equal(result, ['a', 'c', 'd', 'g', 'i'])\n        assert_equal(shortest_path.path_weight['i'], 8)\n\n        print('Success: test_shortest_path')\n\n\ndef main():\n    test = TestShortestPath()\n    test.test_shortest_path()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_shortest_path.py", "id": "0dbdb8b25127c4d61346d3f88e84afb7", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/graphs_trees/graph_shortest_path/test_shortest_path.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}