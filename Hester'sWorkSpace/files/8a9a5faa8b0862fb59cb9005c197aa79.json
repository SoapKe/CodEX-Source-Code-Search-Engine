{"author": "tflearn", "code": "import tflearn\nimport unittest\n\nimport numpy as np\nimport tensorflow as tf\n\nclass TestMetrics(unittest.TestCase):\n    \n\n    def test_binary_accuracy(self):\n        with tf.Graph().as_default():\n            input_data = tf.placeholder(shape=[None, 1], dtype=tf.float32)\n            y_true = tf.placeholder(shape=[None, 1], dtype=tf.float32)\n            ba = tflearn.metrics.accuracy()\n            ba.build(input_data, y_true)\n            acc_op = ba.tensor\n    \n            X = np.array([1,-1,1,1,-1,-1]).reshape([-1, 1])\n            Y = np.array([1,0,1,0,0,1]).reshape([-1, 1])\n            with tf.Session() as sess:\n                binary_accuracy = sess.run(acc_op, feed_dict={input_data: X, y_true: Y})\n                print (\"binary_accuracy = %s\" % binary_accuracy)\n            self.assertEqual(acc_op.m_name, \"binary_acc\")\n            self.assertLess(abs(binary_accuracy-4.0/6), 0.0001)\n\n    def test_categorical_accuracy(self):\n        with tf.Graph().as_default():\n            input_data = tf.placeholder(shape=[None, 2], dtype=tf.float32)\n            y_true = tf.placeholder(shape=[None, 2], dtype=tf.float32)\n            ba = tflearn.metrics.accuracy()\n            ba.build(input_data, y_true)\n            acc_op = ba.tensor\n    \n            X = np.array([1,-1, -1, 1, 0.5, 0]).reshape([-1, 2])\n            Y = np.array([1, 0,  0, 1, 0,   1]).reshape([-1, 2])\n            with tf.Session() as sess:\n                accuracy = sess.run(acc_op, feed_dict={input_data: X, y_true: Y})\n                print (\"categorical accuracy = %s\" % accuracy)\n            self.assertEqual(acc_op.m_name, \"acc\")\n            self.assertLess(abs(accuracy - 2.0/3), 0.0001)\n\n            X = np.array([1,-1, -1, 1, 0.5, 0]).reshape([-1, 2])\n            Y = np.array([1, 0,  0, 1, 1,   0]).reshape([-1, 2])\n            with tf.Session() as sess:\n                accuracy = sess.run(acc_op, feed_dict={input_data: X, y_true: Y})\n                print (\"categorical accuracy = %s\" % accuracy)\n            self.assertEqual(accuracy, 1.0)\n\nif __name__ == \"__main__\":\n    unittest.main()\n", "comments": "        testing metric functions tflearn metrics         ", "content": "import tflearn\nimport unittest\n\nimport numpy as np\nimport tensorflow as tf\n\nclass TestMetrics(unittest.TestCase):\n    \"\"\"\n    Testing metric functions from tflearn/metrics\n    \"\"\"\n\n    def test_binary_accuracy(self):\n        with tf.Graph().as_default():\n            input_data = tf.placeholder(shape=[None, 1], dtype=tf.float32)\n            y_true = tf.placeholder(shape=[None, 1], dtype=tf.float32)\n            ba = tflearn.metrics.accuracy()\n            ba.build(input_data, y_true)\n            acc_op = ba.tensor\n    \n            X = np.array([1,-1,1,1,-1,-1]).reshape([-1, 1])\n            Y = np.array([1,0,1,0,0,1]).reshape([-1, 1])\n            with tf.Session() as sess:\n                binary_accuracy = sess.run(acc_op, feed_dict={input_data: X, y_true: Y})\n                print (\"binary_accuracy = %s\" % binary_accuracy)\n            self.assertEqual(acc_op.m_name, \"binary_acc\")\n            self.assertLess(abs(binary_accuracy-4.0/6), 0.0001)\n\n    def test_categorical_accuracy(self):\n        with tf.Graph().as_default():\n            input_data = tf.placeholder(shape=[None, 2], dtype=tf.float32)\n            y_true = tf.placeholder(shape=[None, 2], dtype=tf.float32)\n            ba = tflearn.metrics.accuracy()\n            ba.build(input_data, y_true)\n            acc_op = ba.tensor\n    \n            X = np.array([1,-1, -1, 1, 0.5, 0]).reshape([-1, 2])\n            Y = np.array([1, 0,  0, 1, 0,   1]).reshape([-1, 2])\n            with tf.Session() as sess:\n                accuracy = sess.run(acc_op, feed_dict={input_data: X, y_true: Y})\n                print (\"categorical accuracy = %s\" % accuracy)\n            self.assertEqual(acc_op.m_name, \"acc\")\n            self.assertLess(abs(accuracy - 2.0/3), 0.0001)\n\n            X = np.array([1,-1, -1, 1, 0.5, 0]).reshape([-1, 2])\n            Y = np.array([1, 0,  0, 1, 1,   0]).reshape([-1, 2])\n            with tf.Session() as sess:\n                accuracy = sess.run(acc_op, feed_dict={input_data: X, y_true: Y})\n                print (\"categorical accuracy = %s\" % accuracy)\n            self.assertEqual(accuracy, 1.0)\n\nif __name__ == \"__main__\":\n    unittest.main()\n", "description": "Deep learning library featuring a higher-level API for TensorFlow.", "file_name": "test_metrics.py", "id": "8a9a5faa8b0862fb59cb9005c197aa79", "language": "Python", "project_name": "tflearn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tflearn-tflearn/tflearn-tflearn-70fb38a/tests/test_metrics.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:15:41Z", "url": "https://github.com/tflearn/tflearn", "wiki": true}