{"author": "ansible", "code": "# Copyright: (c) 2018, Ansible Project\n+\n# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport re\nimport json\n\nfrom itertools import chain\n\nfrom ansible.module_utils._text import to_bytes, to_text\nfrom ansible.module_utils.network.common.utils import to_list\nfrom ansible.plugins.cliconf import CliconfBase\n\n\nclass Cliconf(CliconfBase):\n\n    def get_device_info(self):\n        device_info = {}\n\n        device_info['network_os'] = 'edgeos'\n        reply = self.get(b'show version')\n        data = to_text(reply, errors='surrogate_or_strict').strip()\n\n        match = re.search(r'Version:\\s*v?(\\S+)', data)\n        if match:\n            device_info['network_os_version'] = match.group(1)\n\n        match = re.search(r'HW model:\\s*(\\S+)', data)\n        if match:\n            device_info['network_os_model'] = match.group(1)\n\n        reply = self.get(b'show host name')\n        reply = to_text(reply, errors='surrogate_or_strict').strip()\n        device_info['network_os_hostname'] = reply\n\n        return device_info\n\n    def get_config(self, source='running', format='text'):\n        return self.send_command(b'show configuration commands')\n\n    def edit_config(self, command):\n        for cmd in chain([b'configure'], to_list(command)):\n            self.send_command(cmd)\n\n    def get(self, command, prompt=None, answer=None, sendonly=False):\n        return self.send_command(to_bytes(command),\n                                 prompt=to_bytes(prompt),\n                                 answer=to_bytes(answer),\n                                 sendonly=sendonly)\n\n    def commit(self, comment=None):\n        if comment:\n            command = 'commit comment \"{0}\"'.format(comment)\n        else:\n            command = 'commit'\n        self.send_command(command)\n\n    def discard_changes(self, *args, **kwargs):\n        self.send_command(b'discard')\n\n    def get_capabilities(self):\n        result = {}\n        result['rpc'] = self.get_base_rpc() + ['commit', 'discard_changes']\n        result['network_api'] = 'cliconf'\n        result['device_info'] = self.get_device_info()\n        return json.dumps(result)\n", "comments": "  copyright  (c) 2018  ansible project    gnu general public license v3 0     (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "# Copyright: (c) 2018, Ansible Project\n# GNU General Public License v3.0+\n# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport re\nimport json\n\nfrom itertools import chain\n\nfrom ansible.module_utils._text import to_bytes, to_text\nfrom ansible.module_utils.network.common.utils import to_list\nfrom ansible.plugins.cliconf import CliconfBase\n\n\nclass Cliconf(CliconfBase):\n\n    def get_device_info(self):\n        device_info = {}\n\n        device_info['network_os'] = 'edgeos'\n        reply = self.get(b'show version')\n        data = to_text(reply, errors='surrogate_or_strict').strip()\n\n        match = re.search(r'Version:\\s*v?(\\S+)', data)\n        if match:\n            device_info['network_os_version'] = match.group(1)\n\n        match = re.search(r'HW model:\\s*(\\S+)', data)\n        if match:\n            device_info['network_os_model'] = match.group(1)\n\n        reply = self.get(b'show host name')\n        reply = to_text(reply, errors='surrogate_or_strict').strip()\n        device_info['network_os_hostname'] = reply\n\n        return device_info\n\n    def get_config(self, source='running', format='text'):\n        return self.send_command(b'show configuration commands')\n\n    def edit_config(self, command):\n        for cmd in chain([b'configure'], to_list(command)):\n            self.send_command(cmd)\n\n    def get(self, command, prompt=None, answer=None, sendonly=False):\n        return self.send_command(to_bytes(command),\n                                 prompt=to_bytes(prompt),\n                                 answer=to_bytes(answer),\n                                 sendonly=sendonly)\n\n    def commit(self, comment=None):\n        if comment:\n            command = 'commit comment \"{0}\"'.format(comment)\n        else:\n            command = 'commit'\n        self.send_command(command)\n\n    def discard_changes(self, *args, **kwargs):\n        self.send_command(b'discard')\n\n    def get_capabilities(self):\n        result = {}\n        result['rpc'] = self.get_base_rpc() + ['commit', 'discard_changes']\n        result['network_api'] = 'cliconf'\n        result['device_info'] = self.get_device_info()\n        return json.dumps(result)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "edgeos.py", "id": "e64cdadebdcfaf2b24d555f4f1839e53", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/plugins/cliconf/edgeos.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}