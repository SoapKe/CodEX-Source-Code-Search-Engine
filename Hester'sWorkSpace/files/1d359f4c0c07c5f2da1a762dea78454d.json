{"author": "nvbn", "code": "import pytest\nfrom thefuck.rules.git_push_different_branch_names import get_new_command, match\nfrom thefuck.types import Command\n\n\noutput = \n\n\ndef error_msg(localbranch, remotebranch):\n    return output % (remotebranch, localbranch)\n\n\ndef test_match():\n    assert match(Command('git push', error_msg('foo', 'bar')))\n\n\n@pytest.mark.parametrize('command', [\n    Command('vim', ''),\n    Command('git status', error_msg('foo', 'bar')),\n    Command('git push', '')\n])\ndef test_not_match(command):\n    assert not match(command)\n\n\ndef test_get_new_command():\n    new_command = get_new_command(Command('git push', error_msg('foo', 'bar')))\n    assert new_command == 'git push origin HEAD:bar'\n", "comments": "fatal: The upstream branch of your current branch does not match\nthe name of your current branch.  To push to the upstream branch\non the remote, use\n\n    git push origin HEAD:%s\n\nTo push to the branch of the same name on the remote, use\n\n    git push origin %s\n\nTo choose either option permanently, see push.default in 'git help config'.\n\n\n\n", "content": "import pytest\nfrom thefuck.rules.git_push_different_branch_names import get_new_command, match\nfrom thefuck.types import Command\n\n\noutput = \"\"\"fatal: The upstream branch of your current branch does not match\nthe name of your current branch.  To push to the upstream branch\non the remote, use\n\n    git push origin HEAD:%s\n\nTo push to the branch of the same name on the remote, use\n\n    git push origin %s\n\nTo choose either option permanently, see push.default in 'git help config'.\n\"\"\"\n\n\ndef error_msg(localbranch, remotebranch):\n    return output % (remotebranch, localbranch)\n\n\ndef test_match():\n    assert match(Command('git push', error_msg('foo', 'bar')))\n\n\n@pytest.mark.parametrize('command', [\n    Command('vim', ''),\n    Command('git status', error_msg('foo', 'bar')),\n    Command('git push', '')\n])\ndef test_not_match(command):\n    assert not match(command)\n\n\ndef test_get_new_command():\n    new_command = get_new_command(Command('git push', error_msg('foo', 'bar')))\n    assert new_command == 'git push origin HEAD:bar'\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_git_push_different_branch_names.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_git_push_different_branch_names.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}