{"author": "nvbn", "code": "import pytest\nfrom mock import patch\nfrom thefuck.rules import pacman\nfrom thefuck.rules.pacman import match, get_new_command\nfrom thefuck.types import Command\n\n\npacman_cmd = getattr(pacman, 'pacman', 'pacman')\n\nPKGFILE_OUTPUT_SUDO = 'core/sudo 1.8.13-13/usr/bin/sudo'\nPKGFILE_OUTPUT_CONVERT = 'extra/imagemagick 6.9.1.0-1\\t/usr/bin/convert'\n\nPKGFILE_OUTPUT_VIM = \n\n\n@pytest.mark.skipif(not getattr(pacman, 'enabled_by_default', True),\n                    reason='Skip if pacman is not available')\n@pytest.mark.parametrize('command', [\n    Command('vim', 'vim: command not found'),\n    Command('sudo vim', 'sudo: vim: command not found')])\ndef test_match(command):\n    assert match(command)\n\n\n@pytest.mark.parametrize('command, return_value', [\n    (Command('vim', 'vim: command not found'), PKGFILE_OUTPUT_VIM),\n    (Command('sudo vim', 'sudo: vim: command not found'), PKGFILE_OUTPUT_VIM)])\n@patch('thefuck.specific.archlinux.subprocess')\n@patch.multiple(pacman, create=True, pacman=pacman_cmd)\ndef test_match_mocked(subp_mock, command, return_value):\n    subp_mock.check_output.return_value = return_value\n    assert match(command)\n\n\n@pytest.mark.parametrize('command', [\n    Command('vim', ''), Command('', ''),\n    Command('sudo vim', ''), Command('', '')])\ndef test_not_match(command):\n    assert not match(command)\n\n\nsudo_vim_possibilities = ['{} -S extra/gvim && sudo vim',\n                          '{} -S extra/gvim-python3 && sudo vim',\n                          '{} -S extra/vim && sudo vim',\n                          '{} -S extra/vim-minimal && sudo vim',\n                          '{} -S extra/vim-python3 && sudo vim']\nsudo_vim_possibilities = [s.format(pacman_cmd) for s in sudo_vim_possibilities]\n\nvim_possibilities = ['{} -S extra/gvim && vim',\n                     '{} -S extra/gvim-python3 && vim',\n                     '{} -S extra/vim && vim',\n                     '{} -S extra/vim-minimal && vim',\n                     '{} -S extra/vim-python3 && vim']\nvim_possibilities = [s.format(pacman_cmd) for s in vim_possibilities]\n\n\n@pytest.mark.skipif(not getattr(pacman, 'enabled_by_default', True),\n                    reason='Skip if pacman is not available')\n@pytest.mark.parametrize('command, new_command', [\n    (Command('vim', ''), vim_possibilities),\n    (Command('sudo vim', ''), sudo_vim_possibilities),\n    (Command('convert', ''), ['{} -S extra/imagemagick && convert'.format(pacman_cmd)]),\n    (Command('sudo convert', ''), ['{} -S extra/imagemagick && sudo convert'.format(pacman_cmd)])])\ndef test_get_new_command(command, new_command, mocker):\n    assert get_new_command(command) == new_command\n\n\n@pytest.mark.parametrize('command, new_command, return_value', [\n    (Command('vim', ''), vim_possibilities, PKGFILE_OUTPUT_VIM),\n    (Command('sudo vim', ''), sudo_vim_possibilities, PKGFILE_OUTPUT_VIM),\n    (Command('convert', ''), ['{} -S extra/imagemagick && convert'.format(pacman_cmd)], PKGFILE_OUTPUT_CONVERT),\n    (Command('sudo', ''), ['{} -S core/sudo && sudo'.format(pacman_cmd)], PKGFILE_OUTPUT_SUDO),\n    (Command('sudo convert', ''), ['{} -S extra/imagemagick && sudo convert'.format(pacman_cmd)], PKGFILE_OUTPUT_CONVERT)])\n@patch('thefuck.specific.archlinux.subprocess')\n@patch.multiple(pacman, create=True, pacman=pacman_cmd)\ndef test_get_new_command_mocked(subp_mock, command, new_command, return_value):\n    subp_mock.check_output.return_value = return_value\n    assert get_new_command(command) == new_command\n", "comments": "extra/gvim 7.4.712-1        \\t/usr/bin/vim\nextra/gvim-python3 7.4.712-1\\t/usr/bin/vim\nextra/vim 7.4.712-1         \\t/usr/bin/vim\nextra/vim-minimal 7.4.712-1 \\t/usr/bin/vim\nextra/vim-python3 7.4.712-1 \\t/usr/bin/vim\nm\n", "content": "import pytest\nfrom mock import patch\nfrom thefuck.rules import pacman\nfrom thefuck.rules.pacman import match, get_new_command\nfrom thefuck.types import Command\n\n\npacman_cmd = getattr(pacman, 'pacman', 'pacman')\n\nPKGFILE_OUTPUT_SUDO = 'core/sudo 1.8.13-13/usr/bin/sudo'\nPKGFILE_OUTPUT_CONVERT = 'extra/imagemagick 6.9.1.0-1\\t/usr/bin/convert'\n\nPKGFILE_OUTPUT_VIM = '''extra/gvim 7.4.712-1        \\t/usr/bin/vim\nextra/gvim-python3 7.4.712-1\\t/usr/bin/vim\nextra/vim 7.4.712-1         \\t/usr/bin/vim\nextra/vim-minimal 7.4.712-1 \\t/usr/bin/vim\nextra/vim-python3 7.4.712-1 \\t/usr/bin/vim'''\n\n\n@pytest.mark.skipif(not getattr(pacman, 'enabled_by_default', True),\n                    reason='Skip if pacman is not available')\n@pytest.mark.parametrize('command', [\n    Command('vim', 'vim: command not found'),\n    Command('sudo vim', 'sudo: vim: command not found')])\ndef test_match(command):\n    assert match(command)\n\n\n@pytest.mark.parametrize('command, return_value', [\n    (Command('vim', 'vim: command not found'), PKGFILE_OUTPUT_VIM),\n    (Command('sudo vim', 'sudo: vim: command not found'), PKGFILE_OUTPUT_VIM)])\n@patch('thefuck.specific.archlinux.subprocess')\n@patch.multiple(pacman, create=True, pacman=pacman_cmd)\ndef test_match_mocked(subp_mock, command, return_value):\n    subp_mock.check_output.return_value = return_value\n    assert match(command)\n\n\n@pytest.mark.parametrize('command', [\n    Command('vim', ''), Command('', ''),\n    Command('sudo vim', ''), Command('', '')])\ndef test_not_match(command):\n    assert not match(command)\n\n\nsudo_vim_possibilities = ['{} -S extra/gvim && sudo vim',\n                          '{} -S extra/gvim-python3 && sudo vim',\n                          '{} -S extra/vim && sudo vim',\n                          '{} -S extra/vim-minimal && sudo vim',\n                          '{} -S extra/vim-python3 && sudo vim']\nsudo_vim_possibilities = [s.format(pacman_cmd) for s in sudo_vim_possibilities]\n\nvim_possibilities = ['{} -S extra/gvim && vim',\n                     '{} -S extra/gvim-python3 && vim',\n                     '{} -S extra/vim && vim',\n                     '{} -S extra/vim-minimal && vim',\n                     '{} -S extra/vim-python3 && vim']\nvim_possibilities = [s.format(pacman_cmd) for s in vim_possibilities]\n\n\n@pytest.mark.skipif(not getattr(pacman, 'enabled_by_default', True),\n                    reason='Skip if pacman is not available')\n@pytest.mark.parametrize('command, new_command', [\n    (Command('vim', ''), vim_possibilities),\n    (Command('sudo vim', ''), sudo_vim_possibilities),\n    (Command('convert', ''), ['{} -S extra/imagemagick && convert'.format(pacman_cmd)]),\n    (Command('sudo convert', ''), ['{} -S extra/imagemagick && sudo convert'.format(pacman_cmd)])])\ndef test_get_new_command(command, new_command, mocker):\n    assert get_new_command(command) == new_command\n\n\n@pytest.mark.parametrize('command, new_command, return_value', [\n    (Command('vim', ''), vim_possibilities, PKGFILE_OUTPUT_VIM),\n    (Command('sudo vim', ''), sudo_vim_possibilities, PKGFILE_OUTPUT_VIM),\n    (Command('convert', ''), ['{} -S extra/imagemagick && convert'.format(pacman_cmd)], PKGFILE_OUTPUT_CONVERT),\n    (Command('sudo', ''), ['{} -S core/sudo && sudo'.format(pacman_cmd)], PKGFILE_OUTPUT_SUDO),\n    (Command('sudo convert', ''), ['{} -S extra/imagemagick && sudo convert'.format(pacman_cmd)], PKGFILE_OUTPUT_CONVERT)])\n@patch('thefuck.specific.archlinux.subprocess')\n@patch.multiple(pacman, create=True, pacman=pacman_cmd)\ndef test_get_new_command_mocked(subp_mock, command, new_command, return_value):\n    subp_mock.check_output.return_value = return_value\n    assert get_new_command(command) == new_command\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_pacman.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_pacman.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}