{"author": "django", "code": "from django.test import TestCase\n\nfrom .models import (\n    Event, Movie, Package, PackageNullFK, Person, Screening, ScreeningNullFK,\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass NestedForeignKeysTests(TestCase):\n    def setUp(self):\n        self.director = Person.objects.create(name='Terry Gilliam / Terry Jones')\n        self.movie = Movie.objects.create(title='Monty Python and the Holy Grail', director=self.director)\n\n    \n    \n    def test_inheritance(self):\n        Event.objects.create()\n        Screening.objects.create(movie=self.movie)\n\n        self.assertEqual(len(Event.objects.all()), 2)\n        self.assertEqual(len(Event.objects.select_related('screening')), 2)\n        \n        self.assertEqual(len(Event.objects.select_related('screening__movie')), 2)\n\n        self.assertEqual(len(Event.objects.values()), 2)\n        self.assertEqual(len(Event.objects.values('screening__pk')), 2)\n        self.assertEqual(len(Event.objects.values('screening__movie__pk')), 2)\n        self.assertEqual(len(Event.objects.values('screening__movie__title')), 2)\n        \n        self.assertEqual(len(Event.objects.values('screening__movie__pk', 'screening__movie__title')), 2)\n\n        \n        self.assertEqual(Event.objects.filter(screening__movie=self.movie).count(), 1)\n        self.assertEqual(Event.objects.exclude(screening__movie=self.movie).count(), 1)\n\n    \n    def test_inheritance_null_FK(self):\n        Event.objects.create()\n        ScreeningNullFK.objects.create(movie=None)\n        ScreeningNullFK.objects.create(movie=self.movie)\n\n        self.assertEqual(len(Event.objects.all()), 3)\n        self.assertEqual(len(Event.objects.select_related('screeningnullfk')), 3)\n        self.assertEqual(len(Event.objects.select_related('screeningnullfk__movie')), 3)\n\n        self.assertEqual(len(Event.objects.values()), 3)\n        self.assertEqual(len(Event.objects.values('screeningnullfk__pk')), 3)\n        self.assertEqual(len(Event.objects.values('screeningnullfk__movie__pk')), 3)\n        self.assertEqual(len(Event.objects.values('screeningnullfk__movie__title')), 3)\n        self.assertEqual(len(Event.objects.values('screeningnullfk__movie__pk', 'screeningnullfk__movie__title')), 3)\n\n        self.assertEqual(Event.objects.filter(screeningnullfk__movie=self.movie).count(), 1)\n        self.assertEqual(Event.objects.exclude(screeningnullfk__movie=self.movie).count(), 2)\n\n    def test_null_exclude(self):\n        screening = ScreeningNullFK.objects.create(movie=None)\n        ScreeningNullFK.objects.create(movie=self.movie)\n        self.assertEqual(\n            list(ScreeningNullFK.objects.exclude(movie__id=self.movie.pk)),\n            [screening])\n\n    \n    \n    def test_explicit_ForeignKey(self):\n        Package.objects.create()\n        screening = Screening.objects.create(movie=self.movie)\n        Package.objects.create(screening=screening)\n\n        self.assertEqual(len(Package.objects.all()), 2)\n        self.assertEqual(len(Package.objects.select_related('screening')), 2)\n        self.assertEqual(len(Package.objects.select_related('screening__movie')), 2)\n\n        self.assertEqual(len(Package.objects.values()), 2)\n        self.assertEqual(len(Package.objects.values('screening__pk')), 2)\n        self.assertEqual(len(Package.objects.values('screening__movie__pk')), 2)\n        self.assertEqual(len(Package.objects.values('screening__movie__title')), 2)\n        \n        self.assertEqual(len(Package.objects.values('screening__movie__pk', 'screening__movie__title')), 2)\n\n        self.assertEqual(Package.objects.filter(screening__movie=self.movie).count(), 1)\n        self.assertEqual(Package.objects.exclude(screening__movie=self.movie).count(), 1)\n\n    \n    def test_explicit_ForeignKey_NullFK(self):\n        PackageNullFK.objects.create()\n        screening = ScreeningNullFK.objects.create(movie=None)\n        screening_with_movie = ScreeningNullFK.objects.create(movie=self.movie)\n        PackageNullFK.objects.create(screening=screening)\n        PackageNullFK.objects.create(screening=screening_with_movie)\n\n        self.assertEqual(len(PackageNullFK.objects.all()), 3)\n        self.assertEqual(len(PackageNullFK.objects.select_related('screening')), 3)\n        self.assertEqual(len(PackageNullFK.objects.select_related('screening__movie')), 3)\n\n        self.assertEqual(len(PackageNullFK.objects.values()), 3)\n        self.assertEqual(len(PackageNullFK.objects.values('screening__pk')), 3)\n        self.assertEqual(len(PackageNullFK.objects.values('screening__movie__pk')), 3)\n        self.assertEqual(len(PackageNullFK.objects.values('screening__movie__title')), 3)\n        self.assertEqual(len(PackageNullFK.objects.values('screening__movie__pk', 'screening__movie__title')), 3)\n\n        self.assertEqual(PackageNullFK.objects.filter(screening__movie=self.movie).count(), 1)\n        self.assertEqual(PackageNullFK.objects.exclude(screening__movie=self.movie).count(), 2)\n\n\n\n\n\nclass DeeplyNestedForeignKeysTests(TestCase):\n    def setUp(self):\n        self.director = Person.objects.create(name='Terry Gilliam / Terry Jones')\n        self.movie = Movie.objects.create(title='Monty Python and the Holy Grail', director=self.director)\n\n    def test_inheritance(self):\n        Event.objects.create()\n        Screening.objects.create(movie=self.movie)\n\n        self.assertEqual(len(Event.objects.all()), 2)\n        self.assertEqual(len(Event.objects.select_related('screening__movie__director')), 2)\n\n        self.assertEqual(len(Event.objects.values()), 2)\n        self.assertEqual(len(Event.objects.values('screening__movie__director__pk')), 2)\n        self.assertEqual(len(Event.objects.values('screening__movie__director__name')), 2)\n        self.assertEqual(\n            len(Event.objects.values('screening__movie__director__pk', 'screening__movie__director__name')),\n            2\n        )\n        self.assertEqual(len(Event.objects.values('screening__movie__pk', 'screening__movie__director__pk')), 2)\n        self.assertEqual(len(Event.objects.values('screening__movie__pk', 'screening__movie__director__name')), 2)\n        self.assertEqual(len(Event.objects.values('screening__movie__title', 'screening__movie__director__pk')), 2)\n        self.assertEqual(len(Event.objects.values('screening__movie__title', 'screening__movie__director__name')), 2)\n\n        self.assertEqual(Event.objects.filter(screening__movie__director=self.director).count(), 1)\n        self.assertEqual(Event.objects.exclude(screening__movie__director=self.director).count(), 1)\n\n    def test_explicit_ForeignKey(self):\n        Package.objects.create()\n        screening = Screening.objects.create(movie=self.movie)\n        Package.objects.create(screening=screening)\n\n        self.assertEqual(len(Package.objects.all()), 2)\n        self.assertEqual(len(Package.objects.select_related('screening__movie__director')), 2)\n\n        self.assertEqual(len(Package.objects.values()), 2)\n        self.assertEqual(len(Package.objects.values('screening__movie__director__pk')), 2)\n        self.assertEqual(len(Package.objects.values('screening__movie__director__name')), 2)\n        self.assertEqual(\n            len(Package.objects.values('screening__movie__director__pk', 'screening__movie__director__name')),\n            2\n        )\n        self.assertEqual(len(Package.objects.values('screening__movie__pk', 'screening__movie__director__pk')), 2)\n        self.assertEqual(len(Package.objects.values('screening__movie__pk', 'screening__movie__director__name')), 2)\n        self.assertEqual(len(Package.objects.values('screening__movie__title', 'screening__movie__director__pk')), 2)\n        self.assertEqual(len(Package.objects.values('screening__movie__title', 'screening__movie__director__name')), 2)\n\n        self.assertEqual(Package.objects.filter(screening__movie__director=self.director).count(), 1)\n        self.assertEqual(Package.objects.exclude(screening__movie__director=self.director).count(), 1)\n", "comments": "these tests 16715 the basic scheme always same: 3 models 2 relations the first relation may null second non-nullable in cases django would pick wrong join type second relation resulting missing objects queryset model a | (relation a/b : nullable) model b | (relation b/c : non-nullable) model c because possibility null rows resulting left outer join model a model b (i.e instances a without reference b) second join must also left outer join ignore instances a reference b relation a/b either explicit foreign key implicit reverse relation introduced one-to-one relations (through multi-table inheritance) this test failed 16715 cases inner join selected second foreign key relation instead left outer join this failed this failed simple filter/exclude queries good measure these work second foreign key chain null=true this test failed 16715 cases inner join selected second foreign key relation instead left outer join this failed these work second foreign key chain null=true some additional tests 16715 the difference depth nesting use 4 models instead 3 (and thus 3 relations) this checks promotion join types works deeper nesting", "content": "from django.test import TestCase\n\nfrom .models import (\n    Event, Movie, Package, PackageNullFK, Person, Screening, ScreeningNullFK,\n)\n\n\n# These are tests for #16715. The basic scheme is always the same: 3 models with\n# 2 relations. The first relation may be null, while the second is non-nullable.\n# In some cases, Django would pick the wrong join type for the second relation,\n# resulting in missing objects in the queryset.\n#\n#   Model A\n#   | (Relation A/B : nullable)\n#   Model B\n#   | (Relation B/C : non-nullable)\n#   Model C\n#\n# Because of the possibility of NULL rows resulting from the LEFT OUTER JOIN\n# between Model A and Model B (i.e. instances of A without reference to B),\n# the second join must also be LEFT OUTER JOIN, so that we do not ignore\n# instances of A that do not reference B.\n#\n# Relation A/B can either be an explicit foreign key or an implicit reverse\n# relation such as introduced by one-to-one relations (through multi-table\n# inheritance).\nclass NestedForeignKeysTests(TestCase):\n    def setUp(self):\n        self.director = Person.objects.create(name='Terry Gilliam / Terry Jones')\n        self.movie = Movie.objects.create(title='Monty Python and the Holy Grail', director=self.director)\n\n    # This test failed in #16715 because in some cases INNER JOIN was selected\n    # for the second foreign key relation instead of LEFT OUTER JOIN.\n    def test_inheritance(self):\n        Event.objects.create()\n        Screening.objects.create(movie=self.movie)\n\n        self.assertEqual(len(Event.objects.all()), 2)\n        self.assertEqual(len(Event.objects.select_related('screening')), 2)\n        # This failed.\n        self.assertEqual(len(Event.objects.select_related('screening__movie')), 2)\n\n        self.assertEqual(len(Event.objects.values()), 2)\n        self.assertEqual(len(Event.objects.values('screening__pk')), 2)\n        self.assertEqual(len(Event.objects.values('screening__movie__pk')), 2)\n        self.assertEqual(len(Event.objects.values('screening__movie__title')), 2)\n        # This failed.\n        self.assertEqual(len(Event.objects.values('screening__movie__pk', 'screening__movie__title')), 2)\n\n        # Simple filter/exclude queries for good measure.\n        self.assertEqual(Event.objects.filter(screening__movie=self.movie).count(), 1)\n        self.assertEqual(Event.objects.exclude(screening__movie=self.movie).count(), 1)\n\n    # These all work because the second foreign key in the chain has null=True.\n    def test_inheritance_null_FK(self):\n        Event.objects.create()\n        ScreeningNullFK.objects.create(movie=None)\n        ScreeningNullFK.objects.create(movie=self.movie)\n\n        self.assertEqual(len(Event.objects.all()), 3)\n        self.assertEqual(len(Event.objects.select_related('screeningnullfk')), 3)\n        self.assertEqual(len(Event.objects.select_related('screeningnullfk__movie')), 3)\n\n        self.assertEqual(len(Event.objects.values()), 3)\n        self.assertEqual(len(Event.objects.values('screeningnullfk__pk')), 3)\n        self.assertEqual(len(Event.objects.values('screeningnullfk__movie__pk')), 3)\n        self.assertEqual(len(Event.objects.values('screeningnullfk__movie__title')), 3)\n        self.assertEqual(len(Event.objects.values('screeningnullfk__movie__pk', 'screeningnullfk__movie__title')), 3)\n\n        self.assertEqual(Event.objects.filter(screeningnullfk__movie=self.movie).count(), 1)\n        self.assertEqual(Event.objects.exclude(screeningnullfk__movie=self.movie).count(), 2)\n\n    def test_null_exclude(self):\n        screening = ScreeningNullFK.objects.create(movie=None)\n        ScreeningNullFK.objects.create(movie=self.movie)\n        self.assertEqual(\n            list(ScreeningNullFK.objects.exclude(movie__id=self.movie.pk)),\n            [screening])\n\n    # This test failed in #16715 because in some cases INNER JOIN was selected\n    # for the second foreign key relation instead of LEFT OUTER JOIN.\n    def test_explicit_ForeignKey(self):\n        Package.objects.create()\n        screening = Screening.objects.create(movie=self.movie)\n        Package.objects.create(screening=screening)\n\n        self.assertEqual(len(Package.objects.all()), 2)\n        self.assertEqual(len(Package.objects.select_related('screening')), 2)\n        self.assertEqual(len(Package.objects.select_related('screening__movie')), 2)\n\n        self.assertEqual(len(Package.objects.values()), 2)\n        self.assertEqual(len(Package.objects.values('screening__pk')), 2)\n        self.assertEqual(len(Package.objects.values('screening__movie__pk')), 2)\n        self.assertEqual(len(Package.objects.values('screening__movie__title')), 2)\n        # This failed.\n        self.assertEqual(len(Package.objects.values('screening__movie__pk', 'screening__movie__title')), 2)\n\n        self.assertEqual(Package.objects.filter(screening__movie=self.movie).count(), 1)\n        self.assertEqual(Package.objects.exclude(screening__movie=self.movie).count(), 1)\n\n    # These all work because the second foreign key in the chain has null=True.\n    def test_explicit_ForeignKey_NullFK(self):\n        PackageNullFK.objects.create()\n        screening = ScreeningNullFK.objects.create(movie=None)\n        screening_with_movie = ScreeningNullFK.objects.create(movie=self.movie)\n        PackageNullFK.objects.create(screening=screening)\n        PackageNullFK.objects.create(screening=screening_with_movie)\n\n        self.assertEqual(len(PackageNullFK.objects.all()), 3)\n        self.assertEqual(len(PackageNullFK.objects.select_related('screening')), 3)\n        self.assertEqual(len(PackageNullFK.objects.select_related('screening__movie')), 3)\n\n        self.assertEqual(len(PackageNullFK.objects.values()), 3)\n        self.assertEqual(len(PackageNullFK.objects.values('screening__pk')), 3)\n        self.assertEqual(len(PackageNullFK.objects.values('screening__movie__pk')), 3)\n        self.assertEqual(len(PackageNullFK.objects.values('screening__movie__title')), 3)\n        self.assertEqual(len(PackageNullFK.objects.values('screening__movie__pk', 'screening__movie__title')), 3)\n\n        self.assertEqual(PackageNullFK.objects.filter(screening__movie=self.movie).count(), 1)\n        self.assertEqual(PackageNullFK.objects.exclude(screening__movie=self.movie).count(), 2)\n\n\n# Some additional tests for #16715. The only difference is the depth of the\n# nesting as we now use 4 models instead of 3 (and thus 3 relations). This\n# checks if promotion of join types works for deeper nesting too.\nclass DeeplyNestedForeignKeysTests(TestCase):\n    def setUp(self):\n        self.director = Person.objects.create(name='Terry Gilliam / Terry Jones')\n        self.movie = Movie.objects.create(title='Monty Python and the Holy Grail', director=self.director)\n\n    def test_inheritance(self):\n        Event.objects.create()\n        Screening.objects.create(movie=self.movie)\n\n        self.assertEqual(len(Event.objects.all()), 2)\n        self.assertEqual(len(Event.objects.select_related('screening__movie__director')), 2)\n\n        self.assertEqual(len(Event.objects.values()), 2)\n        self.assertEqual(len(Event.objects.values('screening__movie__director__pk')), 2)\n        self.assertEqual(len(Event.objects.values('screening__movie__director__name')), 2)\n        self.assertEqual(\n            len(Event.objects.values('screening__movie__director__pk', 'screening__movie__director__name')),\n            2\n        )\n        self.assertEqual(len(Event.objects.values('screening__movie__pk', 'screening__movie__director__pk')), 2)\n        self.assertEqual(len(Event.objects.values('screening__movie__pk', 'screening__movie__director__name')), 2)\n        self.assertEqual(len(Event.objects.values('screening__movie__title', 'screening__movie__director__pk')), 2)\n        self.assertEqual(len(Event.objects.values('screening__movie__title', 'screening__movie__director__name')), 2)\n\n        self.assertEqual(Event.objects.filter(screening__movie__director=self.director).count(), 1)\n        self.assertEqual(Event.objects.exclude(screening__movie__director=self.director).count(), 1)\n\n    def test_explicit_ForeignKey(self):\n        Package.objects.create()\n        screening = Screening.objects.create(movie=self.movie)\n        Package.objects.create(screening=screening)\n\n        self.assertEqual(len(Package.objects.all()), 2)\n        self.assertEqual(len(Package.objects.select_related('screening__movie__director')), 2)\n\n        self.assertEqual(len(Package.objects.values()), 2)\n        self.assertEqual(len(Package.objects.values('screening__movie__director__pk')), 2)\n        self.assertEqual(len(Package.objects.values('screening__movie__director__name')), 2)\n        self.assertEqual(\n            len(Package.objects.values('screening__movie__director__pk', 'screening__movie__director__name')),\n            2\n        )\n        self.assertEqual(len(Package.objects.values('screening__movie__pk', 'screening__movie__director__pk')), 2)\n        self.assertEqual(len(Package.objects.values('screening__movie__pk', 'screening__movie__director__name')), 2)\n        self.assertEqual(len(Package.objects.values('screening__movie__title', 'screening__movie__director__pk')), 2)\n        self.assertEqual(len(Package.objects.values('screening__movie__title', 'screening__movie__director__name')), 2)\n\n        self.assertEqual(Package.objects.filter(screening__movie__director=self.director).count(), 1)\n        self.assertEqual(Package.objects.exclude(screening__movie__director=self.director).count(), 1)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "07cf08cf584bcac80de30c348e4f967e", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/nested_foreign_keys/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}