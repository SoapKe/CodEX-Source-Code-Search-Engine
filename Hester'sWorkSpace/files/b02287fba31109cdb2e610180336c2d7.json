{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .theplatform import ThePlatformIE\nfrom ..utils import (\n    determine_ext,\n    parse_duration,\n)\n\n\nclass TheWeatherChannelIE(ThePlatformIE):\n    _VALID_URL = r'https?://(?:www\\.)?weather\\.com/(?:[^/]+/)*video/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'https://weather.com/series/great-outdoors/video/ice-climber-is-in-for-a-shock',\n        'md5': 'ab924ac9574e79689c24c6b95e957def',\n        'info_dict': {\n            'id': 'cc82397e-cc3f-4d11-9390-a785add090e8',\n            'ext': 'mp4',\n            'title': 'Ice Climber Is In For A Shock',\n            'description': 'md5:55606ce1378d4c72e6545e160c9d9695',\n            'uploader': 'TWC - Digital (No Distro)',\n            'uploader_id': '6ccd5455-16bb-46f2-9c57-ff858bb9f62c',\n        }\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        drupal_settings = self._parse_json(self._search_regex(\n            r'jQuery\\.extend\\(Drupal\\.settings\\s*,\\s*({.+?})\\);',\n            webpage, 'drupal settings'), display_id)\n        video_id = drupal_settings['twc']['contexts']['node']['uuid']\n        video_data = self._download_json(\n            'https://dsx.weather.com/cms/v4/asset-collection/en_US/' + video_id, video_id)\n        seo_meta = video_data.get('seometa', {})\n        title = video_data.get('title') or seo_meta['title']\n\n        urls = []\n        thumbnails = []\n        formats = []\n        for variant_id, variant_url in video_data.get('variants', []).items():\n            variant_url = variant_url.strip()\n            if not variant_url or variant_url in urls:\n                continue\n            urls.append(variant_url)\n            ext = determine_ext(variant_url)\n            if ext == 'jpg':\n                thumbnails.append({\n                    'url': variant_url,\n                    'id': variant_id,\n                })\n            elif ThePlatformIE.suitable(variant_url):\n                tp_formats, _ = self._extract_theplatform_smil(variant_url, video_id)\n                formats.extend(tp_formats)\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    variant_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id=variant_id, fatal=False))\n            elif ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    variant_url, video_id, f4m_id=variant_id, fatal=False))\n            else:\n                formats.append({\n                    'url': variant_url,\n                    'format_id': variant_id,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': video_data.get('description') or seo_meta.get('description') or seo_meta.get('og:description'),\n            'duration': parse_duration(video_data.get('duration')),\n            'uploader': video_data.get('providername'),\n            'uploader_id': video_data.get('providerid'),\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .theplatform import ThePlatformIE\nfrom ..utils import (\n    determine_ext,\n    parse_duration,\n)\n\n\nclass TheWeatherChannelIE(ThePlatformIE):\n    _VALID_URL = r'https?://(?:www\\.)?weather\\.com/(?:[^/]+/)*video/(?P<id>[^/?#]+)'\n    _TESTS = [{\n        'url': 'https://weather.com/series/great-outdoors/video/ice-climber-is-in-for-a-shock',\n        'md5': 'ab924ac9574e79689c24c6b95e957def',\n        'info_dict': {\n            'id': 'cc82397e-cc3f-4d11-9390-a785add090e8',\n            'ext': 'mp4',\n            'title': 'Ice Climber Is In For A Shock',\n            'description': 'md5:55606ce1378d4c72e6545e160c9d9695',\n            'uploader': 'TWC - Digital (No Distro)',\n            'uploader_id': '6ccd5455-16bb-46f2-9c57-ff858bb9f62c',\n        }\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        drupal_settings = self._parse_json(self._search_regex(\n            r'jQuery\\.extend\\(Drupal\\.settings\\s*,\\s*({.+?})\\);',\n            webpage, 'drupal settings'), display_id)\n        video_id = drupal_settings['twc']['contexts']['node']['uuid']\n        video_data = self._download_json(\n            'https://dsx.weather.com/cms/v4/asset-collection/en_US/' + video_id, video_id)\n        seo_meta = video_data.get('seometa', {})\n        title = video_data.get('title') or seo_meta['title']\n\n        urls = []\n        thumbnails = []\n        formats = []\n        for variant_id, variant_url in video_data.get('variants', []).items():\n            variant_url = variant_url.strip()\n            if not variant_url or variant_url in urls:\n                continue\n            urls.append(variant_url)\n            ext = determine_ext(variant_url)\n            if ext == 'jpg':\n                thumbnails.append({\n                    'url': variant_url,\n                    'id': variant_id,\n                })\n            elif ThePlatformIE.suitable(variant_url):\n                tp_formats, _ = self._extract_theplatform_smil(variant_url, video_id)\n                formats.extend(tp_formats)\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    variant_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id=variant_id, fatal=False))\n            elif ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    variant_url, video_id, f4m_id=variant_id, fatal=False))\n            else:\n                formats.append({\n                    'url': variant_url,\n                    'format_id': variant_id,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': video_data.get('description') or seo_meta.get('description') or seo_meta.get('og:description'),\n            'duration': parse_duration(video_data.get('duration')),\n            'uploader': video_data.get('providername'),\n            'uploader_id': video_data.get('providerid'),\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "theweatherchannel.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/theweatherchannel.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}