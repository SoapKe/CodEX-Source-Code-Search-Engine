{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n (c) 2014, Mischa Peters <mpeters@a10networks.com>,\n (c) 2016, Eric Chou <ericc@a10networks.com>\n\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: a10_server\nversion_added: 1.8\nshort_description: Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' server object.\ndescription:\n    - Manage SLB (Server Load Balancer) server objects on A10 Networks devices via aXAPIv2.\nauthor: \"Eric Chou (@ericchou) 2016, Mischa Peters (@mischapeters) 2014\"\nnotes:\n    - Requires A10 Networks aXAPI 2.1.\nextends_documentation_fragment:\n  - a10\n  - url\noptions:\n  partition:\n    version_added: \"2.3\"\n    description:\n      - set active-partition\n  server_name:\n    description:\n      - The SLB (Server Load Balancer) server name.\n    required: true\n    aliases: ['server']\n  server_ip:\n    description:\n      - The SLB server IPv4 address.\n    aliases: ['ip', 'address']\n  server_status:\n    description:\n      - The SLB virtual server status.\n    default: enabled\n    aliases: ['status']\n    choices: ['enabled', 'disabled']\n  server_ports:\n    description:\n      - A list of ports to create for the server. Each list item should be a\n        dictionary which specifies the C(port:) and C(protocol:), but can also optionally\n        specify the C(status:). See the examples below for details. This parameter is\n        required when C(state) is C(present).\n    aliases: ['port']\n  state:\n    description:\n      - This is to specify the operation to create, update or remove SLB server.\n    default: present\n    choices: ['present', 'absent']\n  validate_certs:\n    description:\n      - If C(no), SSL certificates will not be validated. This should only be used\n        on personally controlled devices using self-signed certificates.\n    version_added: 2.3\n    type: bool\n    default: 'yes'\n\n'''\n\nEXAMPLES = '''\n Create a new server\n- a10_server:\n    host: a10.mydomain.com\n    username: myadmin\n    password: mypassword\n    partition: mypartition\n    server: test\n    server_ip: 1.1.1.100\n    server_ports:\n      - port_num: 8080\n        protocol: tcp\n      - port_num: 8443\n        protocol: TCP\n\n'''\n\nRETURN = '''\ncontent:\n  description: the full info regarding the slb_server\n  returned: success\n  type: string\n  sample: \"mynewserver\"\n'''\nimport json\n\nfrom ansible.module_utils.network.a10.a10 import (axapi_call, a10_argument_spec, axapi_authenticate, axapi_failure, axapi_get_port_protocol,\n                                                  axapi_enabled_disabled, AXAPI_PORT_PROTOCOLS)\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.urls import url_argument_spec\n\n\nVALID_PORT_FIELDS = ['port_num', 'protocol', 'status']\n\n\ndef validate_ports(module, ports):\n    for item in ports:\n        for key in item:\n            if key not in VALID_PORT_FIELDS:\n                module.fail_json(msg=\"invalid port field (%s), must be one of: %s\" % (key, ','.join(VALID_PORT_FIELDS)))\n\n         validate the port number is present and an integer\n        if 'port_num' in item:\n            try:\n                item['port_num'] = int(item['port_num'])\n            except:\n                module.fail_json(msg=\"port_num entries in the port definitions must be integers\")\n        else:\n            module.fail_json(msg=\"port definitions must define the port_num field\")\n\n         validate the port protocol is present, and convert it to\n         the internal API integer value (and validate it)\n        if 'protocol' in item:\n            protocol = axapi_get_port_protocol(item['protocol'])\n            if not protocol:\n                module.fail_json(msg=\"invalid port protocol, must be one of: %s\" % ','.join(AXAPI_PORT_PROTOCOLS))\n            else:\n                item['protocol'] = protocol\n        else:\n            module.fail_json(msg=\"port definitions must define the port protocol (%s)\" % ','.join(AXAPI_PORT_PROTOCOLS))\n\n         convert the status to the internal API integer value\n        if 'status' in item:\n            item['status'] = axapi_enabled_disabled(item['status'])\n        else:\n            item['status'] = 1\n\n\ndef main():\n    argument_spec = a10_argument_spec()\n    argument_spec.update(url_argument_spec())\n    argument_spec.update(\n        dict(\n            state=dict(type='str', default='present', choices=['present', 'absent']),\n            server_name=dict(type='str', aliases=['server'], required=True),\n            server_ip=dict(type='str', aliases=['ip', 'address']),\n            server_status=dict(type='str', default='enabled', aliases=['status'], choices=['enabled', 'disabled']),\n            server_ports=dict(type='list', aliases=['port'], default=[]),\n            partition=dict(type='str', default=[]),\n        )\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=False\n    )\n\n    host = module.params['host']\n    partition = module.params['partition']\n    username = module.params['username']\n    password = module.params['password']\n    state = module.params['state']\n    write_config = module.params['write_config']\n    slb_server = module.params['server_name']\n    slb_server_ip = module.params['server_ip']\n    slb_server_status = module.params['server_status']\n    slb_server_ports = module.params['server_ports']\n\n    if slb_server is None:\n        module.fail_json(msg='server_name is required')\n\n    axapi_base_url = 'https://%s/services/rest/V2.1/?format=json' % host\n    session_url = axapi_authenticate(module, axapi_base_url, username, password)\n\n     validate the ports data structure\n    validate_ports(module, slb_server_ports)\n\n    json_post = {\n        'server': {\n            'name': slb_server,\n        }\n    }\n\n     add optional module parameters\n    if slb_server_ip:\n        json_post['server']['host'] = slb_server_ip\n\n    if slb_server_ports:\n        json_post['server']['port_list'] = slb_server_ports\n\n    if slb_server_status:\n        json_post['server']['status'] = axapi_enabled_disabled(slb_server_status)\n\n    axapi_call(module, session_url + '&method=system.partition.active', json.dumps({'name': partition}))\n\n    slb_server_data = axapi_call(module, session_url + '&method=slb.server.search', json.dumps({'name': slb_server}))\n    slb_server_exists = not axapi_failure(slb_server_data)\n\n    changed = False\n    if state == 'present':\n        if not slb_server_exists:\n            if not slb_server_ip:\n                module.fail_json(msg='you must specify an IP address when creating a server')\n\n            result = axapi_call(module, session_url + '&method=slb.server.create', json.dumps(json_post))\n            if axapi_failure(result):\n                module.fail_json(msg=\"failed to create the server: %s\" % result['response']['err']['msg'])\n            changed = True\n        else:\n            def port_needs_update(src_ports, dst_ports):\n                '''\n                Checks to determine if the port definitions of the src_ports\n                array are in or different from those in dst_ports. If there is\n                a difference, this function returns true, otherwise false.\n                '''\n                for src_port in src_ports:\n                    found = False\n                    different = False\n                    for dst_port in dst_ports:\n                        if src_port['port_num'] == dst_port['port_num']:\n                            found = True\n                            for valid_field in VALID_PORT_FIELDS:\n                                if src_port[valid_field] != dst_port[valid_field]:\n                                    different = True\n                                    break\n                            if found or different:\n                                break\n                    if not found or different:\n                        return True\n                 every port from the src exists in the dst, and none of them were different\n                return False\n\n            def status_needs_update(current_status, new_status):\n                '''\n                Check to determine if we want to change the status of a server.\n                If there is a difference between the current status of the server and\n                the desired status, return true, otherwise false.\n                '''\n                if current_status != new_status:\n                    return True\n                return False\n\n            defined_ports = slb_server_data.get('server', {}).get('port_list', [])\n            current_status = slb_server_data.get('server', {}).get('status')\n\n             we check for a needed update several ways\n             - in case ports are missing from the ones specified by the user\n             - in case ports are missing from those on the device\n             - in case we are change the status of a server\n            if (port_needs_update(defined_ports, slb_server_ports) or\n                    port_needs_update(slb_server_ports, defined_ports) or\n                    status_needs_update(current_status, axapi_enabled_disabled(slb_server_status))):\n                result = axapi_call(module, session_url + '&method=slb.server.update', json.dumps(json_post))\n                if axapi_failure(result):\n                    module.fail_json(msg=\"failed to update the server: %s\" % result['response']['err']['msg'])\n                changed = True\n\n         if we changed things, get the full info regarding\n         the service group for the return data below\n        if changed:\n            result = axapi_call(module, session_url + '&method=slb.server.search', json.dumps({'name': slb_server}))\n        else:\n            result = slb_server_data\n    elif state == 'absent':\n        if slb_server_exists:\n            result = axapi_call(module, session_url + '&method=slb.server.delete', json.dumps({'name': slb_server}))\n            changed = True\n        else:\n            result = dict(msg=\"the server was not present\")\n\n     if the config has changed, save the config unless otherwise requested\n    if changed and write_config:\n        write_result = axapi_call(module, session_url + '&method=system.action.write_memory')\n        if axapi_failure(write_result):\n            module.fail_json(msg=\"failed to save the configuration: %s\" % write_result['response']['err']['msg'])\n\n     log out of the session nicely and exit\n    axapi_call(module, session_url + '&method=session.close')\n    module.exit_json(changed=changed, content=result)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  a10 server version added  1 8 short description  manage a10 networks ax softax thunder vthunder devices  server object  description        manage slb (server load balancer) server objects a10 networks devices via axapiv2  author   eric chou ( ericchou) 2016  mischa peters ( mischapeters) 2014  notes        requires a10 networks axapi 2 1  extends documentation fragment      a10     url options    partition      version added   2 3      description          set active partition   server name      description          the slb (server load balancer) server name      required  true     aliases    server     server ip      description          the slb server ipv4 address      aliases    ip    address     server status      description          the slb virtual server status      default  enabled     aliases    status       choices    enabled    disabled     server ports      description          a list ports create server  each list item         dictionary specifies c(port ) c(protocol )  also optionally         specify c(status )  see examples details  this parameter         required c(state) c(present)      aliases    port     state      description          this specify operation create  update remove slb server      default  present     choices    present    absent     validate certs      description          if c(no)  ssl certificates validated  this used         personally controlled devices using self signed certificates      version added  2 3     type  bool     default   yes        examples         create new server   a10 server      host  a10 mydomain com     username  myadmin     password  mypassword     partition  mypartition     server  test     server ip  1 1 1 100     server ports          port num  8080         protocol  tcp         port num  8443         protocol  tcp       return       content    description  full info regarding slb server   returned  success   type  string   sample   mynewserver      import json  ansible module utils network a10 a10 import (axapi call  a10 argument spec  axapi authenticate  axapi failure  axapi get port protocol                                                    axapi enabled disabled  axapi port protocols) ansible module utils basic import ansiblemodule ansible module utils urls import url argument spec   valid port fields     port num    protocol    status     def validate ports(module  ports)      item ports          key item              key valid port fields                  module fail json(msg  invalid port field ( s)  must one      (key      join(valid port fields)))            validate port number present integer          port num  item              try                  item  port num     int(item  port num  )             except                  module fail json(msg  port num entries port definitions must integers )         else              module fail json(msg  port definitions must define port num field )            validate port protocol present  convert           internal api integer value (and validate it)          protocol  item              protocol   axapi get port protocol(item  protocol  )             protocol                  module fail json(msg  invalid port protocol  must one          join(axapi port protocols))             else                  item  protocol     protocol         else              module fail json(msg  port definitions must define port protocol ( s)        join(axapi port protocols))            convert status internal api integer value          status  item              item  status     axapi enabled disabled(item  status  )         else              item  status     1   def main()      argument spec   a10 argument spec()     argument spec update(url argument spec())     argument spec update(         dict(             state dict(type  str   default  present   choices   present    absent  )              server name dict(type  str   aliases   server    required true)              server ip dict(type  str   aliases   ip    address  )              server status dict(type  str   default  enabled   aliases   status    choices   enabled    disabled  )              server ports dict(type  list   aliases   port    default   )              partition dict(type  str   default   )          )     )      module   ansiblemodule(         argument spec argument spec          supports check mode false     )      host   module params  host       partition   module params  partition       username   module params  username       password   module params  password       state   module params  state       write config   module params  write config       slb server   module params  server name       slb server ip   module params  server ip       slb server status   module params  server status       slb server ports   module params  server ports        slb server none          module fail json(msg  server name required )      axapi base url    https    services rest v2 1  format json    host     session url   axapi authenticate(module  axapi base url  username  password)        validate ports data structure     validate ports(module  slb server ports)      json post              server                  name   slb server                         add optional module parameters     slb server ip          json post  server    host     slb server ip      slb server ports          json post  server    port list     slb server ports      slb server status          json post  server    status     axapi enabled disabled(slb server status)      axapi call(module  session url     method system partition active   json dumps(  name   partition ))      slb server data   axapi call(module  session url     method slb server search   json dumps(  name   slb server ))     slb server exists   axapi failure(slb server data)      changed   false     state     present           slb server exists              slb server ip                  module fail json(msg  must specify ip address creating server )              result   axapi call(module  session url     method slb server create   json dumps(json post))             axapi failure(result)                  module fail json(msg  failed create server      result  response    err    msg  )             changed   true         else              def port needs update(src ports  dst ports)                                      checks determine port definitions src ports                 array different dst ports  if                 difference  function returns true  otherwise false                                      src port src ports                      found   false                     different   false                     dst port dst ports                          src port  port num      dst port  port num                                found   true                             valid field valid port fields                                  src port valid field     dst port valid field                                       different   true                                     break                             found different                                  break                     found different                          return true                   every port src exists dst  none different                 return false              def status needs update(current status  new status)                                      check determine want change status server                  if difference current status server                 desired status  return true  otherwise false                          usr bin python        coding  utf 8        (c) 2014  mischa peters  mpeters a10networks com      (c) 2016  eric chou  ericc a10networks com        gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    create new server    validate port number present integer    validate port protocol present  convert    internal api integer value (and validate it)    convert status internal api integer value    validate ports data structure    add optional module parameters    every port src exists dst  none different    check needed update several ways      case ports missing ones specified user      case ports missing device      case change status server    changed things  get full info regarding    service group return data    config changed  save config unless otherwise requested    log session nicely exit ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2014, Mischa Peters <mpeters@a10networks.com>,\n# (c) 2016, Eric Chou <ericc@a10networks.com>\n#\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: a10_server\nversion_added: 1.8\nshort_description: Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' server object.\ndescription:\n    - Manage SLB (Server Load Balancer) server objects on A10 Networks devices via aXAPIv2.\nauthor: \"Eric Chou (@ericchou) 2016, Mischa Peters (@mischapeters) 2014\"\nnotes:\n    - Requires A10 Networks aXAPI 2.1.\nextends_documentation_fragment:\n  - a10\n  - url\noptions:\n  partition:\n    version_added: \"2.3\"\n    description:\n      - set active-partition\n  server_name:\n    description:\n      - The SLB (Server Load Balancer) server name.\n    required: true\n    aliases: ['server']\n  server_ip:\n    description:\n      - The SLB server IPv4 address.\n    aliases: ['ip', 'address']\n  server_status:\n    description:\n      - The SLB virtual server status.\n    default: enabled\n    aliases: ['status']\n    choices: ['enabled', 'disabled']\n  server_ports:\n    description:\n      - A list of ports to create for the server. Each list item should be a\n        dictionary which specifies the C(port:) and C(protocol:), but can also optionally\n        specify the C(status:). See the examples below for details. This parameter is\n        required when C(state) is C(present).\n    aliases: ['port']\n  state:\n    description:\n      - This is to specify the operation to create, update or remove SLB server.\n    default: present\n    choices: ['present', 'absent']\n  validate_certs:\n    description:\n      - If C(no), SSL certificates will not be validated. This should only be used\n        on personally controlled devices using self-signed certificates.\n    version_added: 2.3\n    type: bool\n    default: 'yes'\n\n'''\n\nEXAMPLES = '''\n# Create a new server\n- a10_server:\n    host: a10.mydomain.com\n    username: myadmin\n    password: mypassword\n    partition: mypartition\n    server: test\n    server_ip: 1.1.1.100\n    server_ports:\n      - port_num: 8080\n        protocol: tcp\n      - port_num: 8443\n        protocol: TCP\n\n'''\n\nRETURN = '''\ncontent:\n  description: the full info regarding the slb_server\n  returned: success\n  type: string\n  sample: \"mynewserver\"\n'''\nimport json\n\nfrom ansible.module_utils.network.a10.a10 import (axapi_call, a10_argument_spec, axapi_authenticate, axapi_failure, axapi_get_port_protocol,\n                                                  axapi_enabled_disabled, AXAPI_PORT_PROTOCOLS)\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.urls import url_argument_spec\n\n\nVALID_PORT_FIELDS = ['port_num', 'protocol', 'status']\n\n\ndef validate_ports(module, ports):\n    for item in ports:\n        for key in item:\n            if key not in VALID_PORT_FIELDS:\n                module.fail_json(msg=\"invalid port field (%s), must be one of: %s\" % (key, ','.join(VALID_PORT_FIELDS)))\n\n        # validate the port number is present and an integer\n        if 'port_num' in item:\n            try:\n                item['port_num'] = int(item['port_num'])\n            except:\n                module.fail_json(msg=\"port_num entries in the port definitions must be integers\")\n        else:\n            module.fail_json(msg=\"port definitions must define the port_num field\")\n\n        # validate the port protocol is present, and convert it to\n        # the internal API integer value (and validate it)\n        if 'protocol' in item:\n            protocol = axapi_get_port_protocol(item['protocol'])\n            if not protocol:\n                module.fail_json(msg=\"invalid port protocol, must be one of: %s\" % ','.join(AXAPI_PORT_PROTOCOLS))\n            else:\n                item['protocol'] = protocol\n        else:\n            module.fail_json(msg=\"port definitions must define the port protocol (%s)\" % ','.join(AXAPI_PORT_PROTOCOLS))\n\n        # convert the status to the internal API integer value\n        if 'status' in item:\n            item['status'] = axapi_enabled_disabled(item['status'])\n        else:\n            item['status'] = 1\n\n\ndef main():\n    argument_spec = a10_argument_spec()\n    argument_spec.update(url_argument_spec())\n    argument_spec.update(\n        dict(\n            state=dict(type='str', default='present', choices=['present', 'absent']),\n            server_name=dict(type='str', aliases=['server'], required=True),\n            server_ip=dict(type='str', aliases=['ip', 'address']),\n            server_status=dict(type='str', default='enabled', aliases=['status'], choices=['enabled', 'disabled']),\n            server_ports=dict(type='list', aliases=['port'], default=[]),\n            partition=dict(type='str', default=[]),\n        )\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=False\n    )\n\n    host = module.params['host']\n    partition = module.params['partition']\n    username = module.params['username']\n    password = module.params['password']\n    state = module.params['state']\n    write_config = module.params['write_config']\n    slb_server = module.params['server_name']\n    slb_server_ip = module.params['server_ip']\n    slb_server_status = module.params['server_status']\n    slb_server_ports = module.params['server_ports']\n\n    if slb_server is None:\n        module.fail_json(msg='server_name is required')\n\n    axapi_base_url = 'https://%s/services/rest/V2.1/?format=json' % host\n    session_url = axapi_authenticate(module, axapi_base_url, username, password)\n\n    # validate the ports data structure\n    validate_ports(module, slb_server_ports)\n\n    json_post = {\n        'server': {\n            'name': slb_server,\n        }\n    }\n\n    # add optional module parameters\n    if slb_server_ip:\n        json_post['server']['host'] = slb_server_ip\n\n    if slb_server_ports:\n        json_post['server']['port_list'] = slb_server_ports\n\n    if slb_server_status:\n        json_post['server']['status'] = axapi_enabled_disabled(slb_server_status)\n\n    axapi_call(module, session_url + '&method=system.partition.active', json.dumps({'name': partition}))\n\n    slb_server_data = axapi_call(module, session_url + '&method=slb.server.search', json.dumps({'name': slb_server}))\n    slb_server_exists = not axapi_failure(slb_server_data)\n\n    changed = False\n    if state == 'present':\n        if not slb_server_exists:\n            if not slb_server_ip:\n                module.fail_json(msg='you must specify an IP address when creating a server')\n\n            result = axapi_call(module, session_url + '&method=slb.server.create', json.dumps(json_post))\n            if axapi_failure(result):\n                module.fail_json(msg=\"failed to create the server: %s\" % result['response']['err']['msg'])\n            changed = True\n        else:\n            def port_needs_update(src_ports, dst_ports):\n                '''\n                Checks to determine if the port definitions of the src_ports\n                array are in or different from those in dst_ports. If there is\n                a difference, this function returns true, otherwise false.\n                '''\n                for src_port in src_ports:\n                    found = False\n                    different = False\n                    for dst_port in dst_ports:\n                        if src_port['port_num'] == dst_port['port_num']:\n                            found = True\n                            for valid_field in VALID_PORT_FIELDS:\n                                if src_port[valid_field] != dst_port[valid_field]:\n                                    different = True\n                                    break\n                            if found or different:\n                                break\n                    if not found or different:\n                        return True\n                # every port from the src exists in the dst, and none of them were different\n                return False\n\n            def status_needs_update(current_status, new_status):\n                '''\n                Check to determine if we want to change the status of a server.\n                If there is a difference between the current status of the server and\n                the desired status, return true, otherwise false.\n                '''\n                if current_status != new_status:\n                    return True\n                return False\n\n            defined_ports = slb_server_data.get('server', {}).get('port_list', [])\n            current_status = slb_server_data.get('server', {}).get('status')\n\n            # we check for a needed update several ways\n            # - in case ports are missing from the ones specified by the user\n            # - in case ports are missing from those on the device\n            # - in case we are change the status of a server\n            if (port_needs_update(defined_ports, slb_server_ports) or\n                    port_needs_update(slb_server_ports, defined_ports) or\n                    status_needs_update(current_status, axapi_enabled_disabled(slb_server_status))):\n                result = axapi_call(module, session_url + '&method=slb.server.update', json.dumps(json_post))\n                if axapi_failure(result):\n                    module.fail_json(msg=\"failed to update the server: %s\" % result['response']['err']['msg'])\n                changed = True\n\n        # if we changed things, get the full info regarding\n        # the service group for the return data below\n        if changed:\n            result = axapi_call(module, session_url + '&method=slb.server.search', json.dumps({'name': slb_server}))\n        else:\n            result = slb_server_data\n    elif state == 'absent':\n        if slb_server_exists:\n            result = axapi_call(module, session_url + '&method=slb.server.delete', json.dumps({'name': slb_server}))\n            changed = True\n        else:\n            result = dict(msg=\"the server was not present\")\n\n    # if the config has changed, save the config unless otherwise requested\n    if changed and write_config:\n        write_result = axapi_call(module, session_url + '&method=system.action.write_memory')\n        if axapi_failure(write_result):\n            module.fail_json(msg=\"failed to save the configuration: %s\" % write_result['response']['err']['msg'])\n\n    # log out of the session nicely and exit\n    axapi_call(module, session_url + '&method=session.close')\n    module.exit_json(changed=changed, content=result)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "a10_server.py", "id": "c76d603f472c9c738f8f9cad53e1e23c", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/a10/a10_server.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}