{"author": "django", "code": "\"\"\"\nDoctest example from the official Python documentation.\nhttps://docs.python.org/3/library/doctest.html\n\"\"\"\n\n\ndef factorial(n):\n    \"\"\"Return the factorial of n, an exact integer >= 0.\n\n    >>> [factorial(n) for n in range(6)]\n    [1, 1, 2, 6, 24, 120]\n    >>> factorial(30)  # doctest: +ELLIPSIS\n    265252859812191058636308480000000...\n    >>> factorial(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be >= 0\n\n    Factorials of floats are OK, but the float must be an exact integer:\n    >>> factorial(30.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be exact integer\n    >>> factorial(30.0)  # doctest: +ELLIPSIS\n    265252859812191058636308480000000...\n\n    It must also not be ridiculously large:\n    >>> factorial(1e100)\n    Traceback (most recent call last):\n        ...\n    OverflowError: n too large\n    \"\"\"\n\n    import math\n    if not n >= 0:\n        raise ValueError(\"n must be >= 0\")\n    if math.floor(n) != n:\n        raise ValueError(\"n must be exact integer\")\n    if n + 1 == n:  \n        raise OverflowError(\"n too large\")\n    result = 1\n    factor = 2\n    while factor <= n:\n        result *= factor\n        factor += 1\n    return result\n", "comments": "    doctest example official python documentation  https   docs python org 3 library doctest html       def factorial(n)         return factorial n  exact integer    0            factorial(n) n range(6)       1  1  2  6  24  120          factorial(30)    doctest   ellipsis     265252859812191058636308480000000            factorial( 1)     traceback (most recent call last)                  valueerror  n must    0      factorials floats ok  float must exact integer          factorial(30 1)     traceback (most recent call last)                  valueerror  n must exact integer         factorial(30 0)    doctest   ellipsis     265252859812191058636308480000000         it must also ridiculously large          factorial(1e100)     traceback (most recent call last)                  overflowerror  n large            doctest   ellipsis    doctest   ellipsis    catch value like 1e300 ", "content": "\"\"\"\nDoctest example from the official Python documentation.\nhttps://docs.python.org/3/library/doctest.html\n\"\"\"\n\n\ndef factorial(n):\n    \"\"\"Return the factorial of n, an exact integer >= 0.\n\n    >>> [factorial(n) for n in range(6)]\n    [1, 1, 2, 6, 24, 120]\n    >>> factorial(30)  # doctest: +ELLIPSIS\n    265252859812191058636308480000000...\n    >>> factorial(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be >= 0\n\n    Factorials of floats are OK, but the float must be an exact integer:\n    >>> factorial(30.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be exact integer\n    >>> factorial(30.0)  # doctest: +ELLIPSIS\n    265252859812191058636308480000000...\n\n    It must also not be ridiculously large:\n    >>> factorial(1e100)\n    Traceback (most recent call last):\n        ...\n    OverflowError: n too large\n    \"\"\"\n\n    import math\n    if not n >= 0:\n        raise ValueError(\"n must be >= 0\")\n    if math.floor(n) != n:\n        raise ValueError(\"n must be exact integer\")\n    if n + 1 == n:  # catch a value like 1e300\n        raise OverflowError(\"n too large\")\n    result = 1\n    factor = 2\n    while factor <= n:\n        result *= factor\n        factor += 1\n    return result\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "doctests.py", "id": "a1e3008e934c2e3f74215580f0ab923d", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/test_runner_apps/sample/doctests.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}