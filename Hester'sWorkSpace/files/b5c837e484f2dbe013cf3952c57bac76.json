{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models\nfrom odoo.tools.translate import _, html_translate\nfrom odoo.addons.http_routing.models.ir_http import slug\n\n\nclass TrackTag(models.Model):\n    _name = \"event.track.tag\"\n    _description = 'Track Tag'\n    _order = 'name'\n\n    name = fields.Char('Tag')\n    track_ids = fields.Many2many('event.track', string='Tracks')\n    color = fields.Integer(string='Color Index', default=10)\n\n    _sql_constraints = [\n        ('name_uniq', 'unique (name)', \"Tag name already exists !\"),\n    ]\n\n\nclass TrackLocation(models.Model):\n    _name = \"event.track.location\"\n    _description = 'Track Location'\n\n    name = fields.Char('Room')\n\n\nclass TrackStage(models.Model):\n    _name = 'event.track.stage'\n    _description = 'Track Stage'\n    _order = 'sequence, id'\n\n    name = fields.Char(string='Stage Name', required=True, translate=True)\n    sequence = fields.Integer(string='Sequence', default=1)\n    mail_template_id = fields.Many2one(\n        'mail.template', string='Email Template',\n        domain=[('model', '=', 'event.track')],\n        help=\"If set an email will be sent to the customer when the track reaches this step.\")\n    fold = fields.Boolean(\n        string='Folded in Kanban',\n        help='This stage is folded in the kanban view when there are no records in that stage to display.')\n    is_done = fields.Boolean(string='Accepted Stage')\n    is_cancel = fields.Boolean(string='Canceled Stage')\n\n\nclass Track(models.Model):\n    _name = \"event.track\"\n    _description = 'Event Track'\n    _order = 'priority, date'\n    _inherit = ['mail.thread', 'mail.activity.mixin', 'website.seo.metadata', 'website.published.mixin']\n\n    @api.model\n    def _get_default_stage_id(self):\n        return self.env['event.track.stage'].search([], limit=1).id\n\n    name = fields.Char('Title', required=True, translate=True)\n    active = fields.Boolean(default=True)\n    user_id = fields.Many2one('res.users', 'Responsible', track_visibility='onchange', default=lambda self: self.env.user)\n    partner_id = fields.Many2one('res.partner', 'Speaker')\n    partner_name = fields.Char('Speaker Name')\n    partner_email = fields.Char('Speaker Email')\n    partner_phone = fields.Char('Speaker Phone')\n    partner_biography = fields.Html('Speaker Biography')\n    tag_ids = fields.Many2many('event.track.tag', string='Tags')\n    stage_id = fields.Many2one(\n        'event.track.stage', string='Stage',\n        index=True, copy=False, default=_get_default_stage_id,\n        group_expand='_read_group_stage_ids',\n        required=True, track_visibility='onchange')\n    kanban_state = fields.Selection([\n        ('normal', 'Grey'),\n        ('done', 'Green'),\n        ('blocked', 'Red')], string='Kanban State',\n        copy=False, default='normal', required=True, track_visibility='onchange',\n        help=\"A track's kanban state indicates special situations affecting it:\\n\"\n             \" * Grey is the default situation\\n\"\n             \" * Red indicates something is preventing the progress of this track\\n\"\n             \" * Green indicates the track is ready to be pulled to the next stage\")\n    description = fields.Html('Track Description', translate=html_translate, sanitize_attributes=False)\n    date = fields.Datetime('Track Date')\n    duration = fields.Float('Duration', default=1.5)\n    location_id = fields.Many2one('event.track.location', 'Room')\n    event_id = fields.Many2one('event.event', 'Event', required=True)\n    color = fields.Integer('Color Index')\n    priority = fields.Selection([\n        ('0', 'Low'), ('1', 'Medium'),\n        ('2', 'High'), ('3', 'Highest')],\n        'Priority', required=True, default='1')\n    image = fields.Binary('Image', related='partner_id.image_medium', store=True, attachment=True)\n\n    @api.multi\n    @api.depends('name')\n    def _compute_website_url(self):\n        super(Track, self)._compute_website_url()\n        for track in self:\n            if not isinstance(track.id, models.NewId):\n                track.website_url = '/event/%s/track/%s' % (slug(track.event_id), slug(track))\n\n    @api.onchange('partner_id')\n    def _onchange_partner_id(self):\n        if self.partner_id:\n            self.partner_name = self.partner_id.name\n            self.partner_email = self.partner_id.email\n            self.partner_phone = self.partner_id.phone\n            self.partner_biography = self.partner_id.website_description\n\n    @api.model\n    def create(self, vals):\n        track = super(Track, self).create(vals)\n\n        track.event_id.message_post_with_view(\n            'website_event_track.event_track_template_new',\n            values={'track': track},\n            subject=track.name,\n            subtype_id=self.env.ref('website_event_track.mt_event_track').id,\n        )\n\n        return track\n\n    @api.multi\n    def write(self, vals):\n        if 'stage_id' in vals and 'kanban_state' not in vals:\n            vals['kanban_state'] = 'normal'\n        res = super(Track, self).write(vals)\n        if vals.get('partner_id'):\n            self.message_subscribe([vals['partner_id']])\n        return res\n\n    @api.model\n    def _read_group_stage_ids(self, stages, domain, order):\n        \n        return stages.search([], order=order)\n\n    @api.multi\n    def _track_template(self, tracking):\n        res = super(Track, self)._track_template(tracking)\n        track = self[0]\n        changes, tracking_value_ids = tracking[track.id]\n        if 'stage_id' in changes and track.stage_id.mail_template_id:\n            res['stage_id'] = (track.stage_id.mail_template_id, {'composition_mode': 'mass_mail'})\n        return res\n\n    @api.multi\n    def _track_subtype(self, init_values):\n        self.ensure_one()\n        if 'kanban_state' in init_values and self.kanban_state == 'blocked':\n            return 'website_event_track.mt_track_blocked'\n        elif 'kanban_state' in init_values and self.kanban_state == 'done':\n            return 'website_event_track.mt_track_ready'\n        return super(Track, self)._track_subtype(init_values)\n\n    @api.multi\n    def message_get_suggested_recipients(self):\n        recipients = super(Track, self).message_get_suggested_recipients()\n        for track in self:\n            if track.partner_email != track.partner_id.email:\n                track._message_add_suggested_recipient(recipients, email=track.partner_email, reason=_('Speaker Email'))\n        return recipients\n\n    def _message_post_after_hook(self, message):\n        if self.partner_email and not self.partner_id:\n            # we consider that posting a message with a specified recipient (not a follower, a specific one)\n            \n            \n            new_partner = message.partner_ids.filtered(lambda partner: partner.email == self.partner_email)\n            if new_partner:\n                self.search([\n                    ('partner_id', '=', False),\n                    ('partner_email', '=', new_partner.email),\n                    ('stage_id.is_cancel', '=', False),\n                ]).write({'partner_id': new_partner.id})\n        return super(Track, self)._message_post_after_hook(message)\n\n    @api.multi\n    def open_track_speakers_list(self):\n        return {\n            'name': _('Speakers'),\n            'domain': [('id', 'in', self.mapped('partner_id').ids)],\n            'view_type': 'form',\n            'view_mode': 'kanban,form',\n            'res_model': 'res.partner',\n            'view_id': False,\n            'type': 'ir.actions.act_window',\n        }\n\n\nclass SponsorType(models.Model):\n    _name = \"event.sponsor.type\"\n    _description = 'Event Sponsor Type'\n    _order = \"sequence\"\n\n    name = fields.Char('Sponsor Type', required=True, translate=True)\n    sequence = fields.Integer('Sequence')\n\n\nclass Sponsor(models.Model):\n    _name = \"event.sponsor\"\n    _description = 'Event Sponsor'\n    _order = \"sequence\"\n\n    event_id = fields.Many2one('event.event', 'Event', required=True)\n    sponsor_type_id = fields.Many2one('event.sponsor.type', 'Sponsoring Type', required=True)\n    partner_id = fields.Many2one('res.partner', 'Sponsor/Customer', required=True)\n    url = fields.Char('Sponsor Website')\n    sequence = fields.Integer('Sequence', store=True, related='sponsor_type_id.sequence')\n    image_medium = fields.Binary(string='Logo', related='partner_id.image_medium', store=True, attachment=True)\n", "comments": "    always display stages            coding  utf 8        part odoo  see license file full copyright licensing details     consider posting message specified recipient (not follower  specific one)    document without customer means created chatter using    suggested recipients  this heuristic allows avoid ugly hacks js  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models\nfrom odoo.tools.translate import _, html_translate\nfrom odoo.addons.http_routing.models.ir_http import slug\n\n\nclass TrackTag(models.Model):\n    _name = \"event.track.tag\"\n    _description = 'Track Tag'\n    _order = 'name'\n\n    name = fields.Char('Tag')\n    track_ids = fields.Many2many('event.track', string='Tracks')\n    color = fields.Integer(string='Color Index', default=10)\n\n    _sql_constraints = [\n        ('name_uniq', 'unique (name)', \"Tag name already exists !\"),\n    ]\n\n\nclass TrackLocation(models.Model):\n    _name = \"event.track.location\"\n    _description = 'Track Location'\n\n    name = fields.Char('Room')\n\n\nclass TrackStage(models.Model):\n    _name = 'event.track.stage'\n    _description = 'Track Stage'\n    _order = 'sequence, id'\n\n    name = fields.Char(string='Stage Name', required=True, translate=True)\n    sequence = fields.Integer(string='Sequence', default=1)\n    mail_template_id = fields.Many2one(\n        'mail.template', string='Email Template',\n        domain=[('model', '=', 'event.track')],\n        help=\"If set an email will be sent to the customer when the track reaches this step.\")\n    fold = fields.Boolean(\n        string='Folded in Kanban',\n        help='This stage is folded in the kanban view when there are no records in that stage to display.')\n    is_done = fields.Boolean(string='Accepted Stage')\n    is_cancel = fields.Boolean(string='Canceled Stage')\n\n\nclass Track(models.Model):\n    _name = \"event.track\"\n    _description = 'Event Track'\n    _order = 'priority, date'\n    _inherit = ['mail.thread', 'mail.activity.mixin', 'website.seo.metadata', 'website.published.mixin']\n\n    @api.model\n    def _get_default_stage_id(self):\n        return self.env['event.track.stage'].search([], limit=1).id\n\n    name = fields.Char('Title', required=True, translate=True)\n    active = fields.Boolean(default=True)\n    user_id = fields.Many2one('res.users', 'Responsible', track_visibility='onchange', default=lambda self: self.env.user)\n    partner_id = fields.Many2one('res.partner', 'Speaker')\n    partner_name = fields.Char('Speaker Name')\n    partner_email = fields.Char('Speaker Email')\n    partner_phone = fields.Char('Speaker Phone')\n    partner_biography = fields.Html('Speaker Biography')\n    tag_ids = fields.Many2many('event.track.tag', string='Tags')\n    stage_id = fields.Many2one(\n        'event.track.stage', string='Stage',\n        index=True, copy=False, default=_get_default_stage_id,\n        group_expand='_read_group_stage_ids',\n        required=True, track_visibility='onchange')\n    kanban_state = fields.Selection([\n        ('normal', 'Grey'),\n        ('done', 'Green'),\n        ('blocked', 'Red')], string='Kanban State',\n        copy=False, default='normal', required=True, track_visibility='onchange',\n        help=\"A track's kanban state indicates special situations affecting it:\\n\"\n             \" * Grey is the default situation\\n\"\n             \" * Red indicates something is preventing the progress of this track\\n\"\n             \" * Green indicates the track is ready to be pulled to the next stage\")\n    description = fields.Html('Track Description', translate=html_translate, sanitize_attributes=False)\n    date = fields.Datetime('Track Date')\n    duration = fields.Float('Duration', default=1.5)\n    location_id = fields.Many2one('event.track.location', 'Room')\n    event_id = fields.Many2one('event.event', 'Event', required=True)\n    color = fields.Integer('Color Index')\n    priority = fields.Selection([\n        ('0', 'Low'), ('1', 'Medium'),\n        ('2', 'High'), ('3', 'Highest')],\n        'Priority', required=True, default='1')\n    image = fields.Binary('Image', related='partner_id.image_medium', store=True, attachment=True)\n\n    @api.multi\n    @api.depends('name')\n    def _compute_website_url(self):\n        super(Track, self)._compute_website_url()\n        for track in self:\n            if not isinstance(track.id, models.NewId):\n                track.website_url = '/event/%s/track/%s' % (slug(track.event_id), slug(track))\n\n    @api.onchange('partner_id')\n    def _onchange_partner_id(self):\n        if self.partner_id:\n            self.partner_name = self.partner_id.name\n            self.partner_email = self.partner_id.email\n            self.partner_phone = self.partner_id.phone\n            self.partner_biography = self.partner_id.website_description\n\n    @api.model\n    def create(self, vals):\n        track = super(Track, self).create(vals)\n\n        track.event_id.message_post_with_view(\n            'website_event_track.event_track_template_new',\n            values={'track': track},\n            subject=track.name,\n            subtype_id=self.env.ref('website_event_track.mt_event_track').id,\n        )\n\n        return track\n\n    @api.multi\n    def write(self, vals):\n        if 'stage_id' in vals and 'kanban_state' not in vals:\n            vals['kanban_state'] = 'normal'\n        res = super(Track, self).write(vals)\n        if vals.get('partner_id'):\n            self.message_subscribe([vals['partner_id']])\n        return res\n\n    @api.model\n    def _read_group_stage_ids(self, stages, domain, order):\n        \"\"\" Always display all stages \"\"\"\n        return stages.search([], order=order)\n\n    @api.multi\n    def _track_template(self, tracking):\n        res = super(Track, self)._track_template(tracking)\n        track = self[0]\n        changes, tracking_value_ids = tracking[track.id]\n        if 'stage_id' in changes and track.stage_id.mail_template_id:\n            res['stage_id'] = (track.stage_id.mail_template_id, {'composition_mode': 'mass_mail'})\n        return res\n\n    @api.multi\n    def _track_subtype(self, init_values):\n        self.ensure_one()\n        if 'kanban_state' in init_values and self.kanban_state == 'blocked':\n            return 'website_event_track.mt_track_blocked'\n        elif 'kanban_state' in init_values and self.kanban_state == 'done':\n            return 'website_event_track.mt_track_ready'\n        return super(Track, self)._track_subtype(init_values)\n\n    @api.multi\n    def message_get_suggested_recipients(self):\n        recipients = super(Track, self).message_get_suggested_recipients()\n        for track in self:\n            if track.partner_email != track.partner_id.email:\n                track._message_add_suggested_recipient(recipients, email=track.partner_email, reason=_('Speaker Email'))\n        return recipients\n\n    def _message_post_after_hook(self, message):\n        if self.partner_email and not self.partner_id:\n            # we consider that posting a message with a specified recipient (not a follower, a specific one)\n            # on a document without customer means that it was created through the chatter using\n            # suggested recipients. This heuristic allows to avoid ugly hacks in JS.\n            new_partner = message.partner_ids.filtered(lambda partner: partner.email == self.partner_email)\n            if new_partner:\n                self.search([\n                    ('partner_id', '=', False),\n                    ('partner_email', '=', new_partner.email),\n                    ('stage_id.is_cancel', '=', False),\n                ]).write({'partner_id': new_partner.id})\n        return super(Track, self)._message_post_after_hook(message)\n\n    @api.multi\n    def open_track_speakers_list(self):\n        return {\n            'name': _('Speakers'),\n            'domain': [('id', 'in', self.mapped('partner_id').ids)],\n            'view_type': 'form',\n            'view_mode': 'kanban,form',\n            'res_model': 'res.partner',\n            'view_id': False,\n            'type': 'ir.actions.act_window',\n        }\n\n\nclass SponsorType(models.Model):\n    _name = \"event.sponsor.type\"\n    _description = 'Event Sponsor Type'\n    _order = \"sequence\"\n\n    name = fields.Char('Sponsor Type', required=True, translate=True)\n    sequence = fields.Integer('Sequence')\n\n\nclass Sponsor(models.Model):\n    _name = \"event.sponsor\"\n    _description = 'Event Sponsor'\n    _order = \"sequence\"\n\n    event_id = fields.Many2one('event.event', 'Event', required=True)\n    sponsor_type_id = fields.Many2one('event.sponsor.type', 'Sponsoring Type', required=True)\n    partner_id = fields.Many2one('res.partner', 'Sponsor/Customer', required=True)\n    url = fields.Char('Sponsor Website')\n    sequence = fields.Integer('Sequence', store=True, related='sponsor_type_id.sequence')\n    image_medium = fields.Binary(string='Logo', related='partner_id.image_medium', store=True, attachment=True)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "event_track.py", "id": "b5c837e484f2dbe013cf3952c57bac76", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_event_track/models/event_track.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}