{"author": "tgalal", "code": "\nimport tempfile\nimport os\nclass DownloadableMediaMessageBuilder(object):\n    def __init__(self, downloadbleMediaMessageClass, jid, filepath):\n        self.jid = jid\n        self.filepath = filepath\n        self.encryptedFilepath = None\n        self.cls = downloadbleMediaMessageClass\n        self.mediaKey = None\n        self.attributes = {}\n        self.mediaType = self.cls.__name__.split(\"DownloadableMediaMessageProtocolEntity\")[0].lower() ?\n\n     def encrypt(self):\n    ()\n         mediaKey = os.urandom(112)\n         keys = mediacipher.getDerivedKeys(mediaKey)\n         out = mediacipher.encryptImage(self.filepath, keys)\n         with open(encImagePath, 'w') as outF:\n             outF.write(out)\n    \n         self.mediaKey = mediaKey\n         self.encryptedFilepath = encpath\n\n     def decrypt(self):\n         self.mediaKey = None\n         self.encryptedFilePath = None\n\n\n    def setEncryptionData(self, mediaKey, encryptedFilepath):\n        self.mediaKey = mediaKey\n        self.encryptedFilepath = encryptedFilepath\n\n    def isEncrypted(self):\n        return self.encryptedFilepath is not None\n\n    def getFilepath(self):\n        return self.encryptedFilepath or self.filepath\n\n    def getOriginalFilepath(self):\n        return self.filepath\n\n    def set(self, key, val):\n        self.attributes[key] = val\n\n    def get(self, key, default = None):\n        if key in self.attributes and self.attributes[key] is not None:\n            return self.attributes[key]\n\n        return default\n\n    def getOrSet(self, key, func):\n        if not self.get(key):\n            self.set(key, func())\n\n    def build(self, url = None, ip = None):\n        if url:\n            self.set(\"url\", url)\n        if ip:\n            self.set(\"ip\", ip)\n        return self.cls.fromBuilder(self)\n", "comments": "  yowsup layers protocol media import mediacipher   ugly      def encrypt(self)         fd  encpath   tempfile mkstemp()        mediakey   os urandom(112)        keys   mediacipher getderivedkeys(mediakey)          mediacipher encryptimage(self filepath  keys)        open(encimagepath   w ) outf             outf write(out)           self mediakey   mediakey        self encryptedfilepath   encpath    def decrypt(self)         self mediakey   none        self encryptedfilepath   none ", "content": "# from yowsup.layers.protocol_media import mediacipher\nimport tempfile\nimport os\nclass DownloadableMediaMessageBuilder(object):\n    def __init__(self, downloadbleMediaMessageClass, jid, filepath):\n        self.jid = jid\n        self.filepath = filepath\n        self.encryptedFilepath = None\n        self.cls = downloadbleMediaMessageClass\n        self.mediaKey = None\n        self.attributes = {}\n        self.mediaType = self.cls.__name__.split(\"DownloadableMediaMessageProtocolEntity\")[0].lower() #ugly ?\n\n    # def encrypt(self):\n    #     fd, encpath = tempfile.mkstemp()\n    #     mediaKey = os.urandom(112)\n    #     keys = mediacipher.getDerivedKeys(mediaKey)\n    #     out = mediacipher.encryptImage(self.filepath, keys)\n    #     with open(encImagePath, 'w') as outF:\n    #         outF.write(out)\n    #\n    #     self.mediaKey = mediaKey\n    #     self.encryptedFilepath = encpath\n\n    # def decrypt(self):\n    #     self.mediaKey = None\n    #     self.encryptedFilePath = None\n\n\n    def setEncryptionData(self, mediaKey, encryptedFilepath):\n        self.mediaKey = mediaKey\n        self.encryptedFilepath = encryptedFilepath\n\n    def isEncrypted(self):\n        return self.encryptedFilepath is not None\n\n    def getFilepath(self):\n        return self.encryptedFilepath or self.filepath\n\n    def getOriginalFilepath(self):\n        return self.filepath\n\n    def set(self, key, val):\n        self.attributes[key] = val\n\n    def get(self, key, default = None):\n        if key in self.attributes and self.attributes[key] is not None:\n            return self.attributes[key]\n\n        return default\n\n    def getOrSet(self, key, func):\n        if not self.get(key):\n            self.set(key, func())\n\n    def build(self, url = None, ip = None):\n        if url:\n            self.set(\"url\", url)\n        if ip:\n            self.set(\"ip\", ip)\n        return self.cls.fromBuilder(self)\n", "description": "The python WhatsApp library", "file_name": "builder_message_media_downloadable.py", "id": "3815ab958bd044ac34dd7048772bf96a", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_media/protocolentities/builder_message_media_downloadable.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}