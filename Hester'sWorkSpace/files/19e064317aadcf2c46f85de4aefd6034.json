{"author": "jakubroztocil", "code": "\nimport os\nimport shutil\nimport sys\nfrom tempfile import gettempdir\n\nimport pytest\n\nfrom httpie.plugins.builtin import HTTPBasicAuth\nfrom utils import MockEnvironment, mk_config_dir, http, HTTP_OK\nfrom fixtures import UNICODE\n\n\nclass SessionTestBase(object):\n\n    def start_session(self, httpbin):\n        \"\"\"Create and reuse a unique config dir for each test.\"\"\"\n        self.config_dir = mk_config_dir()\n\n    def teardown_method(self, method):\n        shutil.rmtree(self.config_dir)\n\n    def env(self):\n        \"\"\"\n        Return an environment.\n\n        Each environment created withing a test method\n        will share the same config_dir. It is necessary\n        for session files being reused.\n\n        \"\"\"\n        return MockEnvironment(config_dir=self.config_dir)\n\n\nclass TestSessionFlow(SessionTestBase):\n    \"\"\"\n    These tests start with an existing session created in `setup_method()`.\n\n    \"\"\"\n\n    def start_session(self, httpbin):\n        \"\"\"\n        Start a full-blown session with a custom request header,\n        authorization, and response cookies.\n\n        \"\"\"\n        super(TestSessionFlow, self).start_session(httpbin)\n        r1 = http('--follow', '--session=test', '--auth=username:password',\n                  'GET', httpbin.url + '/cookies/set?hello=world',\n                  'Hello:World',\n                  env=self.env())\n        assert HTTP_OK in r1\n\n    def test_session_created_and_reused(self, httpbin):\n        self.start_session(httpbin)\n        # Verify that the session created in setup_method() has been used.\n        r2 = http('--session=test',\n                  'GET', httpbin.url + '/get', env=self.env())\n        assert HTTP_OK in r2\n        assert r2.json['headers']['Hello'] == 'World'\n        assert r2.json['headers']['Cookie'] == 'hello=world'\n        assert 'Basic ' in r2.json['headers']['Authorization']\n\n    def test_session_update(self, httpbin):\n        self.start_session(httpbin)\n        \n        r2 = http('--session=test', 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r2\n\n        \n        r3 = http('--follow', '--session=test', '--auth=username:password2',\n                  'GET', httpbin.url + '/cookies/set?hello=world2',\n                  'Hello:World2',\n                  env=self.env())\n        assert HTTP_OK in r3\n\n        \n        r4 = http('--session=test', 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r4\n        assert r4.json['headers']['Hello'] == 'World2'\n        assert r4.json['headers']['Cookie'] == 'hello=world2'\n        assert (r2.json['headers']['Authorization'] !=\n                r4.json['headers']['Authorization'])\n\n    def test_session_read_only(self, httpbin):\n        self.start_session(httpbin)\n        \n        r2 = http('--session=test', 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r2\n\n        but\n        \n        r3 = http('--follow', '--session-read-only=test',\n                  '--auth=username:password2', 'GET',\n                  httpbin.url + '/cookies/set?hello=world2', 'Hello:World2',\n                  env=self.env())\n        assert HTTP_OK in r3\n\n        \n        r4 = http('--session=test', 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r4\n\n        \n        del r2.json['origin'], r4.json['origin']\n        \n\n        \n        assert r2.json == r4.json\n\n\nclass TestSession(SessionTestBase):\n    \"\"\"Stand-alone session tests.\"\"\"\n\n    def test_session_ignored_header_prefixes(self, httpbin):\n        self.start_session(httpbin)\n        r1 = http('--session=test', 'GET', httpbin.url + '/get',\n                  'Content-Type: text/plain',\n                  'If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT',\n                  env=self.env())\n        assert HTTP_OK in r1\n        r2 = http('--session=test', 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r2\n        assert 'Content-Type' not in r2.json['headers']\n        assert 'If-Unmodified-Since' not in r2.json['headers']\n\n    def test_session_by_path(self, httpbin):\n        self.start_session(httpbin)\n        session_path = os.path.join(self.config_dir, 'session-by-path.json')\n        r1 = http('--session=' + session_path, 'GET', httpbin.url + '/get',\n                  'Foo:Bar', env=self.env())\n        assert HTTP_OK in r1\n\n        r2 = http('--session=' + session_path, 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r2\n        assert r2.json['headers']['Foo'] == 'Bar'\n\n    @pytest.mark.skipif(\n        sys.version_info >= (3,),\n        reason=\"This test fails intermittently on Python 3 - \"\n               \"see https://github.com/jakubroztocil/httpie/issues/282\")\n    def test_session_unicode(self, httpbin):\n        self.start_session(httpbin)\n\n        r1 = http('--session=test', u'--auth=test:' + UNICODE,\n                  'GET', httpbin.url + '/get', u'Test:%s' % UNICODE,\n                  env=self.env())\n        assert HTTP_OK in r1\n\n        r2 = http('--session=test', '--verbose', 'GET',\n                  httpbin.url + '/get', env=self.env())\n        assert HTTP_OK in r2\n\n        # FIXME: Authorization *sometimes* is not present on Python3\n        assert (r2.json['headers']['Authorization'] ==\n                HTTPBasicAuth.make_header(u'test', UNICODE))\n        \n        assert UNICODE in r2\n\n    def test_session_default_header_value_overwritten(self, httpbin):\n        self.start_session(httpbin)\n        \n        r1 = http('--session=test',\n                  httpbin.url + '/headers', 'User-Agent:custom',\n                  env=self.env())\n        assert HTTP_OK in r1\n        assert r1.json['headers']['User-Agent'] == 'custom'\n\n        r2 = http('--session=test', httpbin.url + '/headers', env=self.env())\n        assert HTTP_OK in r2\n        assert r2.json['headers']['User-Agent'] == 'custom'\n\n    def test_download_in_session(self, httpbin):\n        \n        self.start_session(httpbin)\n        cwd = os.getcwd()\n        os.chdir(gettempdir())\n        try:\n            http('--session=test', '--download',\n                 httpbin.url + '/get', env=self.env())\n        finally:\n            os.chdir(cwd)\n", "comments": "   create reuse unique config dir test             self config dir   mk config dir()      def teardown method(self  method)          shutil rmtree(self config dir)      def env(self)                      return environment           each environment created withing test method         share config dir  it necessary         session files reused                       return mockenvironment(config dir self config dir)   class testsessionflow(sessiontestbase)              these tests start existing session created  setup method()                 def start session(self  httpbin)                      start full blown session custom request header          authorization  response cookies                       super(testsessionflow  self) start session(httpbin)         r1   http(   follow      session test      auth username password                      get   httpbin url     cookies set hello world                      hello world                     env self env())         assert http ok r1      def test session created reused(self  httpbin)          self start session(httpbin)           verify session created setup method() used          r2   http(   session test                      get   httpbin url     get   env self env())         assert http ok r2         assert r2 json  headers    hello       world          assert r2 json  headers    cookie       hello world          assert  basic   r2 json  headers    authorization        def test session update(self  httpbin)          self start session(httpbin)           get response request original session          r2   http(   session test    get   httpbin url     get                     env self env())         assert http ok r2            make request modifying session data          r3   http(   follow      session test      auth username password2                      get   httpbin url     cookies set hello world2                      hello world2                     env self env())         assert http ok r3            get response request updated session          r4   http(   session test    get   httpbin url     get                     env self env())         assert http ok r4         assert r4 json  headers    hello       world2          assert r4 json  headers    cookie       hello world2          assert (r2 json  headers    authorization                      r4 json  headers    authorization  )      def test session read only(self  httpbin)          self start session(httpbin)           get response original session          r2   http(   session test    get   httpbin url     get                     env self env())         assert http ok r2            make request modifying session data             session read          r3   http(   follow      session read test                        auth username password2    get                     httpbin url     cookies set hello world2    hello world2                     env self env())         assert http ok r3            get response updated session          r4   http(   session test    get   httpbin url     get                     env self env())         assert http ok r4            origin differ travis          del r2 json  origin    r4 json  origin             different request             should r3          assert r2 json    r4 json   class testsession(sessiontestbase)         stand alone session tests        coding utf 8    verify session created setup method() used     get response request original session     make request modifying session data     get response request updated session     get response original session     make request modifying session data      session read     get response updated session     origin differ travis     different request     should r3     fixme  authorization  sometimes  present python3    httpbin interpret utf8 headers    https   github com jakubroztocil httpie issues 180    https   github com jakubroztocil httpie issues 412 ", "content": "# coding=utf-8\nimport os\nimport shutil\nimport sys\nfrom tempfile import gettempdir\n\nimport pytest\n\nfrom httpie.plugins.builtin import HTTPBasicAuth\nfrom utils import MockEnvironment, mk_config_dir, http, HTTP_OK\nfrom fixtures import UNICODE\n\n\nclass SessionTestBase(object):\n\n    def start_session(self, httpbin):\n        \"\"\"Create and reuse a unique config dir for each test.\"\"\"\n        self.config_dir = mk_config_dir()\n\n    def teardown_method(self, method):\n        shutil.rmtree(self.config_dir)\n\n    def env(self):\n        \"\"\"\n        Return an environment.\n\n        Each environment created withing a test method\n        will share the same config_dir. It is necessary\n        for session files being reused.\n\n        \"\"\"\n        return MockEnvironment(config_dir=self.config_dir)\n\n\nclass TestSessionFlow(SessionTestBase):\n    \"\"\"\n    These tests start with an existing session created in `setup_method()`.\n\n    \"\"\"\n\n    def start_session(self, httpbin):\n        \"\"\"\n        Start a full-blown session with a custom request header,\n        authorization, and response cookies.\n\n        \"\"\"\n        super(TestSessionFlow, self).start_session(httpbin)\n        r1 = http('--follow', '--session=test', '--auth=username:password',\n                  'GET', httpbin.url + '/cookies/set?hello=world',\n                  'Hello:World',\n                  env=self.env())\n        assert HTTP_OK in r1\n\n    def test_session_created_and_reused(self, httpbin):\n        self.start_session(httpbin)\n        # Verify that the session created in setup_method() has been used.\n        r2 = http('--session=test',\n                  'GET', httpbin.url + '/get', env=self.env())\n        assert HTTP_OK in r2\n        assert r2.json['headers']['Hello'] == 'World'\n        assert r2.json['headers']['Cookie'] == 'hello=world'\n        assert 'Basic ' in r2.json['headers']['Authorization']\n\n    def test_session_update(self, httpbin):\n        self.start_session(httpbin)\n        # Get a response to a request from the original session.\n        r2 = http('--session=test', 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r2\n\n        # Make a request modifying the session data.\n        r3 = http('--follow', '--session=test', '--auth=username:password2',\n                  'GET', httpbin.url + '/cookies/set?hello=world2',\n                  'Hello:World2',\n                  env=self.env())\n        assert HTTP_OK in r3\n\n        # Get a response to a request from the updated session.\n        r4 = http('--session=test', 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r4\n        assert r4.json['headers']['Hello'] == 'World2'\n        assert r4.json['headers']['Cookie'] == 'hello=world2'\n        assert (r2.json['headers']['Authorization'] !=\n                r4.json['headers']['Authorization'])\n\n    def test_session_read_only(self, httpbin):\n        self.start_session(httpbin)\n        # Get a response from the original session.\n        r2 = http('--session=test', 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r2\n\n        # Make a request modifying the session data but\n        # with --session-read-only.\n        r3 = http('--follow', '--session-read-only=test',\n                  '--auth=username:password2', 'GET',\n                  httpbin.url + '/cookies/set?hello=world2', 'Hello:World2',\n                  env=self.env())\n        assert HTTP_OK in r3\n\n        # Get a response from the updated session.\n        r4 = http('--session=test', 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r4\n\n        # Origin can differ on Travis.\n        del r2.json['origin'], r4.json['origin']\n        # Different for each request.\n\n        # Should be the same as before r3.\n        assert r2.json == r4.json\n\n\nclass TestSession(SessionTestBase):\n    \"\"\"Stand-alone session tests.\"\"\"\n\n    def test_session_ignored_header_prefixes(self, httpbin):\n        self.start_session(httpbin)\n        r1 = http('--session=test', 'GET', httpbin.url + '/get',\n                  'Content-Type: text/plain',\n                  'If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT',\n                  env=self.env())\n        assert HTTP_OK in r1\n        r2 = http('--session=test', 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r2\n        assert 'Content-Type' not in r2.json['headers']\n        assert 'If-Unmodified-Since' not in r2.json['headers']\n\n    def test_session_by_path(self, httpbin):\n        self.start_session(httpbin)\n        session_path = os.path.join(self.config_dir, 'session-by-path.json')\n        r1 = http('--session=' + session_path, 'GET', httpbin.url + '/get',\n                  'Foo:Bar', env=self.env())\n        assert HTTP_OK in r1\n\n        r2 = http('--session=' + session_path, 'GET', httpbin.url + '/get',\n                  env=self.env())\n        assert HTTP_OK in r2\n        assert r2.json['headers']['Foo'] == 'Bar'\n\n    @pytest.mark.skipif(\n        sys.version_info >= (3,),\n        reason=\"This test fails intermittently on Python 3 - \"\n               \"see https://github.com/jakubroztocil/httpie/issues/282\")\n    def test_session_unicode(self, httpbin):\n        self.start_session(httpbin)\n\n        r1 = http('--session=test', u'--auth=test:' + UNICODE,\n                  'GET', httpbin.url + '/get', u'Test:%s' % UNICODE,\n                  env=self.env())\n        assert HTTP_OK in r1\n\n        r2 = http('--session=test', '--verbose', 'GET',\n                  httpbin.url + '/get', env=self.env())\n        assert HTTP_OK in r2\n\n        # FIXME: Authorization *sometimes* is not present on Python3\n        assert (r2.json['headers']['Authorization'] ==\n                HTTPBasicAuth.make_header(u'test', UNICODE))\n        # httpbin doesn't interpret utf8 headers\n        assert UNICODE in r2\n\n    def test_session_default_header_value_overwritten(self, httpbin):\n        self.start_session(httpbin)\n        # https://github.com/jakubroztocil/httpie/issues/180\n        r1 = http('--session=test',\n                  httpbin.url + '/headers', 'User-Agent:custom',\n                  env=self.env())\n        assert HTTP_OK in r1\n        assert r1.json['headers']['User-Agent'] == 'custom'\n\n        r2 = http('--session=test', httpbin.url + '/headers', env=self.env())\n        assert HTTP_OK in r2\n        assert r2.json['headers']['User-Agent'] == 'custom'\n\n    def test_download_in_session(self, httpbin):\n        # https://github.com/jakubroztocil/httpie/issues/412\n        self.start_session(httpbin)\n        cwd = os.getcwd()\n        os.chdir(gettempdir())\n        try:\n            http('--session=test', '--download',\n                 httpbin.url + '/get', env=self.env())\n        finally:\n            os.chdir(cwd)\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "test_sessions.py", "id": "19e064317aadcf2c46f85de4aefd6034", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil-httpie/jakubroztocil-httpie-0f4dce9/tests/test_sessions.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:48:16Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}