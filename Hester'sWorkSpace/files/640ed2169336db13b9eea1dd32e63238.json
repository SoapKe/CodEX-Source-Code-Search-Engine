{"author": "nvbn", "code": "\n    try:\n        command = command.strip()\n\n        if command.startswith('sudo '):\n            command = command[5:]\n\n        command = command.split(\" \")[0]\n\n        packages = subprocess.check_output(\n            ['pkgfile', '-b', '-v', command],\n            universal_newlines=True, stderr=utils.DEVNULL\n        ).splitlines()\n\n        return [package.split()[0] for package in packages]\n    except subprocess.CalledProcessError as err:\n        if err.returncode == 1 and err.output == \"\":\n            return []\n        else:\n            raise err\n\n\ndef archlinux_env():\n    if utils.which('yaourt'):\n        pacman = 'yaourt'\n    elif utils.which('pacman'):\n        pacman = 'sudo pacman'\n    else:\n        return False, None\n\n    enabled_by_default = utils.which('pkgfile')\n\n    return enabled_by_default, pacman\n", "comments": " This file provide some utility functions for Arch Linux specific rules.\"\"\"\nimport subprocess\nfrom .. import utils\n\n\n@utils.memoize\ndef get_pkgfile(command):\n    \"\"\" Gets the packages that provide the given command using `pkgfile`.\n\n    If the command is of the form `sudo foo`, searches for the `foo` command\n    instead.\n    \n \n", "content": "\"\"\" This file provide some utility functions for Arch Linux specific rules.\"\"\"\nimport subprocess\nfrom .. import utils\n\n\n@utils.memoize\ndef get_pkgfile(command):\n    \"\"\" Gets the packages that provide the given command using `pkgfile`.\n\n    If the command is of the form `sudo foo`, searches for the `foo` command\n    instead.\n    \"\"\"\n    try:\n        command = command.strip()\n\n        if command.startswith('sudo '):\n            command = command[5:]\n\n        command = command.split(\" \")[0]\n\n        packages = subprocess.check_output(\n            ['pkgfile', '-b', '-v', command],\n            universal_newlines=True, stderr=utils.DEVNULL\n        ).splitlines()\n\n        return [package.split()[0] for package in packages]\n    except subprocess.CalledProcessError as err:\n        if err.returncode == 1 and err.output == \"\":\n            return []\n        else:\n            raise err\n\n\ndef archlinux_env():\n    if utils.which('yaourt'):\n        pacman = 'yaourt'\n    elif utils.which('pacman'):\n        pacman = 'sudo pacman'\n    else:\n        return False, None\n\n    enabled_by_default = utils.which('pkgfile')\n\n    return enabled_by_default, pacman\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "archlinux.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/specific/archlinux.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}