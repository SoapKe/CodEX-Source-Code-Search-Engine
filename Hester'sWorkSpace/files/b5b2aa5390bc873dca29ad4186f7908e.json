{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    xpath_text,\n    int_or_none,\n)\n\n\nclass NTVRuIE(InfoExtractor):\n    IE_NAME = 'ntv.ru'\n    _VALID_URL = r'https?://(?:www\\.)?ntv\\.ru/(?:[^/]+/)*(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'http://www.ntv.ru/novosti/863142/',\n        'md5': 'ba7ea172a91cb83eb734cad18c10e723',\n        'info_dict': {\n            'id': '746000',\n            'ext': 'mp4',\n            'title': '\u041a\u043e\u043c\u0430\u043d\u0434\u0443\u044e\u0449\u0438\u0439 \u0427\u0435\u0440\u043d\u043e\u043c\u043e\u0440\u0441\u043a\u0438\u043c \u0444\u043b\u043e\u0442\u043e\u043c \u043f\u0440\u043e\u0432\u0435\u043b \u043f\u0435\u0440\u0435\u0433\u043e\u0432\u043e\u0440\u044b \u0432 \u0448\u0442\u0430\u0431\u0435 \u0412\u041c\u0421 \u0423\u043a\u0440\u0430\u0438\u043d\u044b',\n            'description': '\u041a\u043e\u043c\u0430\u043d\u0434\u0443\u044e\u0449\u0438\u0439 \u0427\u0435\u0440\u043d\u043e\u043c\u043e\u0440\u0441\u043a\u0438\u043c \u0444\u043b\u043e\u0442\u043e\u043c \u043f\u0440\u043e\u0432\u0435\u043b \u043f\u0435\u0440\u0435\u0433\u043e\u0432\u043e\u0440\u044b \u0432 \u0448\u0442\u0430\u0431\u0435 \u0412\u041c\u0421 \u0423\u043a\u0440\u0430\u0438\u043d\u044b',\n            'thumbnail': r're:^http://.*\\.jpg',\n            'duration': 136,\n        },\n    }, {\n        'url': 'http://www.ntv.ru/video/novosti/750370/',\n        'md5': 'adecff79691b4d71e25220a191477124',\n        'info_dict': {\n            'id': '750370',\n            'ext': 'mp4',\n            'title': '\u0420\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u043f\u0440\u043e\u043f\u0430\u0432\u0448\u0435\u0433\u043e Boeing \u043d\u0435 \u0432\u0435\u0440\u044f\u0442 \u0432 \u0442\u0440\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0438\u0441\u0445\u043e\u0434',\n            'description': '\u0420\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u043f\u0440\u043e\u043f\u0430\u0432\u0448\u0435\u0433\u043e Boeing \u043d\u0435 \u0432\u0435\u0440\u044f\u0442 \u0432 \u0442\u0440\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0438\u0441\u0445\u043e\u0434',\n            'thumbnail': r're:^http://.*\\.jpg',\n            'duration': 172,\n        },\n    }, {\n        'url': 'http://www.ntv.ru/peredacha/segodnya/m23700/o232416',\n        'md5': '82dbd49b38e3af1d00df16acbeab260c',\n        'info_dict': {\n            'id': '747480',\n            'ext': 'mp4',\n            'title': '\u00ab\u0421\u0435\u0433\u043e\u0434\u043d\u044f\u00bb. 21\u00a0\u043c\u0430\u0440\u0442\u0430 2014\u00a0\u0433\u043e\u0434\u0430. 16:00',\n            'description': '\u00ab\u0421\u0435\u0433\u043e\u0434\u043d\u044f\u00bb. 21\u00a0\u043c\u0430\u0440\u0442\u0430 2014\u00a0\u0433\u043e\u0434\u0430. 16:00',\n            'thumbnail': r're:^http://.*\\.jpg',\n            'duration': 1496,\n        },\n    }, {\n        'url': 'http://www.ntv.ru/kino/Koma_film',\n        'md5': 'f825770930937aa7e5aca0dc0d29319a',\n        'info_dict': {\n            'id': '1007609',\n            'ext': 'mp4',\n            'title': '\u041e\u0441\u0442\u0440\u043e\u0441\u044e\u0436\u0435\u0442\u043d\u044b\u0439 \u0444\u0438\u043b\u044c\u043c \u00ab\u041a\u043e\u043c\u0430\u00bb',\n            'description': '\u041e\u0441\u0442\u0440\u043e\u0441\u044e\u0436\u0435\u0442\u043d\u044b\u0439 \u0444\u0438\u043b\u044c\u043c \u00ab\u041a\u043e\u043c\u0430\u00bb',\n            'thumbnail': r're:^http://.*\\.jpg',\n            'duration': 5592,\n        },\n    }, {\n        'url': 'http://www.ntv.ru/serial/Delo_vrachey/m31760/o233916/',\n        'md5': '9320cd0e23f3ea59c330dc744e06ff3b',\n        'info_dict': {\n            'id': '751482',\n            'ext': 'mp4',\n            'title': '\u00ab\u0414\u0435\u043b\u043e \u0432\u0440\u0430\u0447\u0435\u0439\u00bb: \u00ab\u0414\u0435\u0440\u0435\u0432\u0446\u0435 \u0436\u0438\u0437\u043d\u0438\u00bb',\n            'description': '\u00ab\u0414\u0435\u043b\u043e \u0432\u0440\u0430\u0447\u0435\u0439\u00bb: \u00ab\u0414\u0435\u0440\u0435\u0432\u0446\u0435 \u0436\u0438\u0437\u043d\u0438\u00bb',\n            'thumbnail': r're:^http://.*\\.jpg',\n            'duration': 2590,\n        },\n    }]\n\n    _VIDEO_ID_REGEXES = [\n        r'<meta property=\"og:url\" content=\"http://www\\.ntv\\.ru/video/(\\d+)',\n        r'<video embed=[^>]+><id>(\\d+)</id>',\n        r'<video restriction[^>]+><key>(\\d+)</key>',\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_url = self._og_search_property(\n            ('video', 'video:iframe'), webpage, default=None)\n        if video_url:\n            video_id = self._search_regex(\n                r'https?://(?:www\\.)?ntv\\.ru/video/(?:embed/)?(\\d+)',\n                video_url, 'video id', default=None)\n\n        if not video_id:\n            video_id = self._html_search_regex(\n                self._VIDEO_ID_REGEXES, webpage, 'video id')\n\n        player = self._download_xml(\n            'http://www.ntv.ru/vi%s/' % video_id,\n            video_id, 'Downloading video XML')\n\n        title = clean_html(xpath_text(player, './data/title', 'title', fatal=True))\n        description = clean_html(xpath_text(player, './data/description', 'description'))\n\n        video = player.find('./data/video')\n        video_id = xpath_text(video, './id', 'video id')\n        thumbnail = xpath_text(video, './splash', 'thumbnail')\n        duration = int_or_none(xpath_text(video, './totaltime', 'duration'))\n        view_count = int_or_none(xpath_text(video, './views', 'view count'))\n\n        token = self._download_webpage(\n            'http://stat.ntv.ru/services/access/token',\n            video_id, 'Downloading access token')\n\n        formats = []\n        for format_id in ['', 'hi', 'webm']:\n            file_ = video.find('./%sfile' % format_id)\n            if file_ is None:\n                continue\n            size = video.find('./%ssize' % format_id)\n            formats.append({\n                'url': 'http://media2.ntv.ru/vod/%s&tok=%s' % (file_.text, token),\n                'filesize': int_or_none(size.text if size is not None else None),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#&]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    xpath_text,\n    int_or_none,\n)\n\n\nclass NTVRuIE(InfoExtractor):\n    IE_NAME = 'ntv.ru'\n    _VALID_URL = r'https?://(?:www\\.)?ntv\\.ru/(?:[^/]+/)*(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'http://www.ntv.ru/novosti/863142/',\n        'md5': 'ba7ea172a91cb83eb734cad18c10e723',\n        'info_dict': {\n            'id': '746000',\n            'ext': 'mp4',\n            'title': '\u041a\u043e\u043c\u0430\u043d\u0434\u0443\u044e\u0449\u0438\u0439 \u0427\u0435\u0440\u043d\u043e\u043c\u043e\u0440\u0441\u043a\u0438\u043c \u0444\u043b\u043e\u0442\u043e\u043c \u043f\u0440\u043e\u0432\u0435\u043b \u043f\u0435\u0440\u0435\u0433\u043e\u0432\u043e\u0440\u044b \u0432 \u0448\u0442\u0430\u0431\u0435 \u0412\u041c\u0421 \u0423\u043a\u0440\u0430\u0438\u043d\u044b',\n            'description': '\u041a\u043e\u043c\u0430\u043d\u0434\u0443\u044e\u0449\u0438\u0439 \u0427\u0435\u0440\u043d\u043e\u043c\u043e\u0440\u0441\u043a\u0438\u043c \u0444\u043b\u043e\u0442\u043e\u043c \u043f\u0440\u043e\u0432\u0435\u043b \u043f\u0435\u0440\u0435\u0433\u043e\u0432\u043e\u0440\u044b \u0432 \u0448\u0442\u0430\u0431\u0435 \u0412\u041c\u0421 \u0423\u043a\u0440\u0430\u0438\u043d\u044b',\n            'thumbnail': r're:^http://.*\\.jpg',\n            'duration': 136,\n        },\n    }, {\n        'url': 'http://www.ntv.ru/video/novosti/750370/',\n        'md5': 'adecff79691b4d71e25220a191477124',\n        'info_dict': {\n            'id': '750370',\n            'ext': 'mp4',\n            'title': '\u0420\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u043f\u0440\u043e\u043f\u0430\u0432\u0448\u0435\u0433\u043e Boeing \u043d\u0435 \u0432\u0435\u0440\u044f\u0442 \u0432 \u0442\u0440\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0438\u0441\u0445\u043e\u0434',\n            'description': '\u0420\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u043f\u0440\u043e\u043f\u0430\u0432\u0448\u0435\u0433\u043e Boeing \u043d\u0435 \u0432\u0435\u0440\u044f\u0442 \u0432 \u0442\u0440\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0438\u0441\u0445\u043e\u0434',\n            'thumbnail': r're:^http://.*\\.jpg',\n            'duration': 172,\n        },\n    }, {\n        'url': 'http://www.ntv.ru/peredacha/segodnya/m23700/o232416',\n        'md5': '82dbd49b38e3af1d00df16acbeab260c',\n        'info_dict': {\n            'id': '747480',\n            'ext': 'mp4',\n            'title': '\u00ab\u0421\u0435\u0433\u043e\u0434\u043d\u044f\u00bb. 21\u00a0\u043c\u0430\u0440\u0442\u0430 2014\u00a0\u0433\u043e\u0434\u0430. 16:00',\n            'description': '\u00ab\u0421\u0435\u0433\u043e\u0434\u043d\u044f\u00bb. 21\u00a0\u043c\u0430\u0440\u0442\u0430 2014\u00a0\u0433\u043e\u0434\u0430. 16:00',\n            'thumbnail': r're:^http://.*\\.jpg',\n            'duration': 1496,\n        },\n    }, {\n        'url': 'http://www.ntv.ru/kino/Koma_film',\n        'md5': 'f825770930937aa7e5aca0dc0d29319a',\n        'info_dict': {\n            'id': '1007609',\n            'ext': 'mp4',\n            'title': '\u041e\u0441\u0442\u0440\u043e\u0441\u044e\u0436\u0435\u0442\u043d\u044b\u0439 \u0444\u0438\u043b\u044c\u043c \u00ab\u041a\u043e\u043c\u0430\u00bb',\n            'description': '\u041e\u0441\u0442\u0440\u043e\u0441\u044e\u0436\u0435\u0442\u043d\u044b\u0439 \u0444\u0438\u043b\u044c\u043c \u00ab\u041a\u043e\u043c\u0430\u00bb',\n            'thumbnail': r're:^http://.*\\.jpg',\n            'duration': 5592,\n        },\n    }, {\n        'url': 'http://www.ntv.ru/serial/Delo_vrachey/m31760/o233916/',\n        'md5': '9320cd0e23f3ea59c330dc744e06ff3b',\n        'info_dict': {\n            'id': '751482',\n            'ext': 'mp4',\n            'title': '\u00ab\u0414\u0435\u043b\u043e \u0432\u0440\u0430\u0447\u0435\u0439\u00bb: \u00ab\u0414\u0435\u0440\u0435\u0432\u0446\u0435 \u0436\u0438\u0437\u043d\u0438\u00bb',\n            'description': '\u00ab\u0414\u0435\u043b\u043e \u0432\u0440\u0430\u0447\u0435\u0439\u00bb: \u00ab\u0414\u0435\u0440\u0435\u0432\u0446\u0435 \u0436\u0438\u0437\u043d\u0438\u00bb',\n            'thumbnail': r're:^http://.*\\.jpg',\n            'duration': 2590,\n        },\n    }]\n\n    _VIDEO_ID_REGEXES = [\n        r'<meta property=\"og:url\" content=\"http://www\\.ntv\\.ru/video/(\\d+)',\n        r'<video embed=[^>]+><id>(\\d+)</id>',\n        r'<video restriction[^>]+><key>(\\d+)</key>',\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_url = self._og_search_property(\n            ('video', 'video:iframe'), webpage, default=None)\n        if video_url:\n            video_id = self._search_regex(\n                r'https?://(?:www\\.)?ntv\\.ru/video/(?:embed/)?(\\d+)',\n                video_url, 'video id', default=None)\n\n        if not video_id:\n            video_id = self._html_search_regex(\n                self._VIDEO_ID_REGEXES, webpage, 'video id')\n\n        player = self._download_xml(\n            'http://www.ntv.ru/vi%s/' % video_id,\n            video_id, 'Downloading video XML')\n\n        title = clean_html(xpath_text(player, './data/title', 'title', fatal=True))\n        description = clean_html(xpath_text(player, './data/description', 'description'))\n\n        video = player.find('./data/video')\n        video_id = xpath_text(video, './id', 'video id')\n        thumbnail = xpath_text(video, './splash', 'thumbnail')\n        duration = int_or_none(xpath_text(video, './totaltime', 'duration'))\n        view_count = int_or_none(xpath_text(video, './views', 'view count'))\n\n        token = self._download_webpage(\n            'http://stat.ntv.ru/services/access/token',\n            video_id, 'Downloading access token')\n\n        formats = []\n        for format_id in ['', 'hi', 'webm']:\n            file_ = video.find('./%sfile' % format_id)\n            if file_ is None:\n                continue\n            size = video.find('./%ssize' % format_id)\n            formats.append({\n                'url': 'http://media2.ntv.ru/vod/%s&tok=%s' % (file_.text, token),\n                'filesize': int_or_none(size.text if size is not None else None),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "ntvru.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/ntvru.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}