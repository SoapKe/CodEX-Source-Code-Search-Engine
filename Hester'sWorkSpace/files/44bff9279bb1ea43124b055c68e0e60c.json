{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    unified_timestamp,\n)\n\n\nclass VineIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vine\\.co/(?:v|oembed)/(?P<id>\\w+)'\n    _TESTS = [{\n        'url': 'https://vine.co/v/b9KOOWX7HUx',\n        'md5': '2f36fed6235b16da96ce9b4dc890940d',\n        'info_dict': {\n            'id': 'b9KOOWX7HUx',\n            'ext': 'mp4',\n            'title': 'Chicken.',\n            'alt_title': 'Vine by Jack',\n            'timestamp': 1368997951,\n            'upload_date': '20130519',\n            'uploader': 'Jack',\n            'uploader_id': '76',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'repost_count': int,\n        },\n    }, {\n        'url': 'https://vine.co/v/e192BnZnZ9V',\n        'info_dict': {\n            'id': 'e192BnZnZ9V',\n            'ext': 'mp4',\n            'title': '\u0e22\u0e34\u0e49\u0e21~ \u0e40\u0e02\u0e34\u0e19~ \u0e2d\u0e32\u0e22~ \u0e19\u0e48\u0e32\u0e23\u0e49\u0e32\u0e01\u0e2d\u0e49\u0e30 >//< @n_whitewo @orlameena \n            'alt_title': 'Vine by Pimry_zaa',\n            'timestamp': 1436057405,\n            'upload_date': '20150705',\n            'uploader': 'Pimry_zaa',\n            'uploader_id': '1135760698325307392',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'repost_count': int,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://vine.co/v/MYxVapFvz2z',\n        'only_matching': True,\n    }, {\n        'url': 'https://vine.co/v/bxVjBbZlPUH',\n        'only_matching': True,\n    }, {\n        'url': 'https://vine.co/oembed/MYxVapFvz2z.json',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        data = self._download_json(\n            'https://archive.vine.co/posts/%s.json' % video_id, video_id)\n\n        def video_url(kind):\n            for url_suffix in ('Url', 'URL'):\n                format_url = data.get('video%s%s' % (kind, url_suffix))\n                if format_url:\n                    return format_url\n\n        formats = []\n        for quality, format_id in enumerate(('low', '', 'dash')):\n            format_url = video_url(format_id.capitalize())\n            if not format_url:\n                continue\n            \n            if format_id == 'dash' and determine_ext(format_url) == 'mpd':\n                formats.extend(self._extract_mpd_formats(\n                    format_url, video_id, mpd_id='dash', fatal=False))\n            else:\n                formats.append({\n                    'url': format_url,\n                    'format_id': format_id or 'standard',\n                    'quality': quality,\n                })\n        self._sort_formats(formats)\n\n        username = data.get('username')\n\n        alt_title = 'Vine by %s' % username if username else None\n\n        return {\n            'id': video_id,\n            'title': data.get('description') or alt_title or 'Vine video',\n            'alt_title': alt_title,\n            'thumbnail': data.get('thumbnailUrl'),\n            'timestamp': unified_timestamp(data.get('created')),\n            'uploader': username,\n            'uploader_id': data.get('userIdStr'),\n            'view_count': int_or_none(data.get('loops')),\n            'like_count': int_or_none(data.get('likes')),\n            'comment_count': int_or_none(data.get('comments')),\n            'repost_count': int_or_none(data.get('reposts')),\n            'formats': formats,\n        }\n\n\nclass VineUserIE(InfoExtractor):\n    IE_NAME = 'vine:user'\n    _VALID_URL = r'(?:https?://)?vine\\.co/(?P<u>u/)?(?P<user>[^/]+)/?(\\?.*)?$'\n    _VINE_BASE_URL = 'https://vine.co/'\n    _TESTS = [\n        {\n            'url': 'https://vine.co/Visa',\n            'info_dict': {\n                'id': 'Visa',\n            },\n            'playlist_mincount': 46,\n        },\n        {\n            'url': 'https://vine.co/u/941705360593584128',\n            'only_matching': True,\n        },\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        user = mobj.group('user')\n        u = mobj.group('u')\n\n        profile_url = '%sapi/users/profiles/%s%s' % (\n            self._VINE_BASE_URL, 'vanity/' if not u else '', user)\n        profile_data = self._download_json(\n            profile_url, user, note='Downloading user profile data')\n\n        user_id = profile_data['data']['userId']\n        timeline_data = []\n        for pagenum in itertools.count(1):\n            timeline_url = '%sapi/timelines/users/%s?page=%s&size=100' % (\n                self._VINE_BASE_URL, user_id, pagenum)\n            timeline_page = self._download_json(\n                timeline_url, user, note='Downloading page %d' % pagenum)\n            timeline_data.extend(timeline_page['data']['records'])\n            if timeline_page['data']['nextPage'] is None:\n                break\n\n        entries = [\n            self.url_result(e['permalinkUrl'], 'Vine') for e in timeline_data]\n        return self.playlist_result(entries, user)\n", "comments": "# coding: utf-8\n#lovesicktheseries  #lovesickseason2',\n# DASH link returns plain mp4\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    unified_timestamp,\n)\n\n\nclass VineIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vine\\.co/(?:v|oembed)/(?P<id>\\w+)'\n    _TESTS = [{\n        'url': 'https://vine.co/v/b9KOOWX7HUx',\n        'md5': '2f36fed6235b16da96ce9b4dc890940d',\n        'info_dict': {\n            'id': 'b9KOOWX7HUx',\n            'ext': 'mp4',\n            'title': 'Chicken.',\n            'alt_title': 'Vine by Jack',\n            'timestamp': 1368997951,\n            'upload_date': '20130519',\n            'uploader': 'Jack',\n            'uploader_id': '76',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'repost_count': int,\n        },\n    }, {\n        'url': 'https://vine.co/v/e192BnZnZ9V',\n        'info_dict': {\n            'id': 'e192BnZnZ9V',\n            'ext': 'mp4',\n            'title': '\u0e22\u0e34\u0e49\u0e21~ \u0e40\u0e02\u0e34\u0e19~ \u0e2d\u0e32\u0e22~ \u0e19\u0e48\u0e32\u0e23\u0e49\u0e32\u0e01\u0e2d\u0e49\u0e30 >//< @n_whitewo @orlameena #lovesicktheseries  #lovesickseason2',\n            'alt_title': 'Vine by Pimry_zaa',\n            'timestamp': 1436057405,\n            'upload_date': '20150705',\n            'uploader': 'Pimry_zaa',\n            'uploader_id': '1135760698325307392',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'repost_count': int,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://vine.co/v/MYxVapFvz2z',\n        'only_matching': True,\n    }, {\n        'url': 'https://vine.co/v/bxVjBbZlPUH',\n        'only_matching': True,\n    }, {\n        'url': 'https://vine.co/oembed/MYxVapFvz2z.json',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        data = self._download_json(\n            'https://archive.vine.co/posts/%s.json' % video_id, video_id)\n\n        def video_url(kind):\n            for url_suffix in ('Url', 'URL'):\n                format_url = data.get('video%s%s' % (kind, url_suffix))\n                if format_url:\n                    return format_url\n\n        formats = []\n        for quality, format_id in enumerate(('low', '', 'dash')):\n            format_url = video_url(format_id.capitalize())\n            if not format_url:\n                continue\n            # DASH link returns plain mp4\n            if format_id == 'dash' and determine_ext(format_url) == 'mpd':\n                formats.extend(self._extract_mpd_formats(\n                    format_url, video_id, mpd_id='dash', fatal=False))\n            else:\n                formats.append({\n                    'url': format_url,\n                    'format_id': format_id or 'standard',\n                    'quality': quality,\n                })\n        self._sort_formats(formats)\n\n        username = data.get('username')\n\n        alt_title = 'Vine by %s' % username if username else None\n\n        return {\n            'id': video_id,\n            'title': data.get('description') or alt_title or 'Vine video',\n            'alt_title': alt_title,\n            'thumbnail': data.get('thumbnailUrl'),\n            'timestamp': unified_timestamp(data.get('created')),\n            'uploader': username,\n            'uploader_id': data.get('userIdStr'),\n            'view_count': int_or_none(data.get('loops')),\n            'like_count': int_or_none(data.get('likes')),\n            'comment_count': int_or_none(data.get('comments')),\n            'repost_count': int_or_none(data.get('reposts')),\n            'formats': formats,\n        }\n\n\nclass VineUserIE(InfoExtractor):\n    IE_NAME = 'vine:user'\n    _VALID_URL = r'(?:https?://)?vine\\.co/(?P<u>u/)?(?P<user>[^/]+)/?(\\?.*)?$'\n    _VINE_BASE_URL = 'https://vine.co/'\n    _TESTS = [\n        {\n            'url': 'https://vine.co/Visa',\n            'info_dict': {\n                'id': 'Visa',\n            },\n            'playlist_mincount': 46,\n        },\n        {\n            'url': 'https://vine.co/u/941705360593584128',\n            'only_matching': True,\n        },\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        user = mobj.group('user')\n        u = mobj.group('u')\n\n        profile_url = '%sapi/users/profiles/%s%s' % (\n            self._VINE_BASE_URL, 'vanity/' if not u else '', user)\n        profile_data = self._download_json(\n            profile_url, user, note='Downloading user profile data')\n\n        user_id = profile_data['data']['userId']\n        timeline_data = []\n        for pagenum in itertools.count(1):\n            timeline_url = '%sapi/timelines/users/%s?page=%s&size=100' % (\n                self._VINE_BASE_URL, user_id, pagenum)\n            timeline_page = self._download_json(\n                timeline_url, user, note='Downloading page %d' % pagenum)\n            timeline_data.extend(timeline_page['data']['records'])\n            if timeline_page['data']['nextPage'] is None:\n                break\n\n        entries = [\n            self.url_result(e['permalinkUrl'], 'Vine') for e in timeline_data]\n        return self.playlist_result(entries, user)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vine.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vine.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}