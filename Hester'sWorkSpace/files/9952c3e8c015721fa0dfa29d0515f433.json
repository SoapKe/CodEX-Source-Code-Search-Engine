{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    unescapeHTML,\n    parse_duration,\n    get_element_by_class,\n)\n\n\nclass LEGOIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?lego\\.com/(?P<locale>[^/]+)/(?:[^/]+/)*videos/(?:[^/]+/)*[^/?\n    _TESTS = [{\n        'url': 'http://www.lego.com/en-us/videos/themes/club/blocumentary-kawaguchi-55492d823b1b4d5e985787fa8c2973b1',\n        'md5': 'f34468f176cfd76488767fc162c405fa',\n        'info_dict': {\n            'id': '55492d823b1b4d5e985787fa8c2973b1',\n            'ext': 'mp4',\n            'title': 'Blocumentary Great Creations: Akiyuki Kawaguchi',\n            'description': 'Blocumentary Great Creations: Akiyuki Kawaguchi',\n        },\n    }, {\n        \n        'url': 'http://www.lego.com/nl-nl/videos/themes/nexoknights/episode-20-kingdom-of-heroes-13bdc2299ab24d9685701a915b3d71e7\n        'md5': '4c3fec48a12e40c6e5995abc3d36cc2e',\n        'info_dict': {\n            'id': '13bdc2299ab24d9685701a915b3d71e7',\n            'ext': 'mp4',\n            'title': 'Aflevering 20 - Helden van het koninkrijk',\n            'description': 'md5:8ee499aac26d7fa8bcb0cedb7f9c3941',\n        },\n    }, {\n        \n        'url': 'http://www.lego.com/en-us/starwars/videos/lego-star-wars-force-surprise-9685ee9d12e84ff38e84b4e3d0db533d',\n        'info_dict': {\n            'id': '9685ee9d12e84ff38e84b4e3d0db533d',\n            'ext': 'mp4',\n            'title': 'Force Surprise \u2013 LEGO\u00ae Star Wars\u2122 Microfighters',\n            'description': 'md5:9c673c96ce6f6271b88563fe9dc56de3',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n    _BITRATES = [256, 512, 1024, 1536, 2560]\n\n    def _real_extract(self, url):\n        locale, video_id = re.match(self._VALID_URL, url).groups()\n        webpage = self._download_webpage(url, video_id)\n        title = get_element_by_class('video-header', webpage).strip()\n        progressive_base = 'https://lc-mediaplayerns-live-s.legocdn.com/'\n        streaming_base = 'http://legoprod-f.akamaihd.net/'\n        content_url = self._html_search_meta('contentUrl', webpage)\n        path = self._search_regex(\n            r'(?:https?:)?//[^/]+/(?:[iz]/s/)?public/(.+)_[0-9,]+\\.(?:mp4|webm)',\n            content_url, 'video path', default=None)\n        if not path:\n            player_url = self._proto_relative_url(self._search_regex(\n                r'<iframe[^>]+src=\"((?:https?)?//(?:www\\.)?lego\\.com/[^/]+/mediaplayer/video/[^\"]+)',\n                webpage, 'player url', default=None))\n            if not player_url:\n                base_url = self._proto_relative_url(self._search_regex(\n                    r'data-baseurl=\"([^\"]+)\"', webpage, 'base url',\n                    default='http://www.lego.com/%s/mediaplayer/video/' % locale))\n                player_url = base_url + video_id\n            player_webpage = self._download_webpage(player_url, video_id)\n            video_data = self._parse_json(unescapeHTML(self._search_regex(\n                r\"video='([^']+)'\", player_webpage, 'video data')), video_id)\n            progressive_base = self._search_regex(\n                r'data-video-progressive-url=\"([^\"]+)\"',\n                player_webpage, 'progressive base', default='https://lc-mediaplayerns-live-s.legocdn.com/')\n            streaming_base = self._search_regex(\n                r'data-video-streaming-url=\"([^\"]+)\"',\n                player_webpage, 'streaming base', default='http://legoprod-f.akamaihd.net/')\n            item_id = video_data['ItemId']\n\n            net_storage_path = video_data.get('NetStoragePath') or '/'.join([item_id[:2], item_id[2:4]])\n            base_path = '_'.join([item_id, video_data['VideoId'], video_data['Locale'], compat_str(video_data['VideoVersion'])])\n            path = '/'.join([net_storage_path, base_path])\n        streaming_path = ','.join(map(lambda bitrate: compat_str(bitrate), self._BITRATES))\n\n        formats = self._extract_akamai_formats(\n            '%si/s/public/%s_,%s,.mp4.csmil/master.m3u8' % (streaming_base, path, streaming_path), video_id)\n        m3u8_formats = list(filter(\n            lambda f: f.get('protocol') == 'm3u8_native' and f.get('vcodec') != 'none',\n            formats))\n        if len(m3u8_formats) == len(self._BITRATES):\n            self._sort_formats(m3u8_formats)\n            for bitrate, m3u8_format in zip(self._BITRATES, m3u8_formats):\n                progressive_base_url = '%spublic/%s_%d.' % (progressive_base, path, bitrate)\n                mp4_f = m3u8_format.copy()\n                mp4_f.update({\n                    'url': progressive_base_url + 'mp4',\n                    'format_id': m3u8_format['format_id'].replace('hls', 'mp4'),\n                    'protocol': 'http',\n                })\n                web_f = {\n                    'url': progressive_base_url + 'webm',\n                    'format_id': m3u8_format['format_id'].replace('hls', 'webm'),\n                    'width': m3u8_format['width'],\n                    'height': m3u8_format['height'],\n                    'tbr': m3u8_format.get('tbr'),\n                    'ext': 'webm',\n                }\n                formats.extend([web_f, mp4_f])\n        else:\n            for bitrate in self._BITRATES:\n                for ext in ('web', 'mp4'):\n                    formats.append({\n                        'format_id': '%s-%s' % (ext, bitrate),\n                        'url': '%spublic/%s_%d.%s' % (progressive_base, path, bitrate, ext),\n                        'tbr': bitrate,\n                        'ext': ext,\n                    })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': self._html_search_meta('description', webpage),\n            'thumbnail': self._html_search_meta('thumbnail', webpage),\n            'duration': parse_duration(self._html_search_meta('duration', webpage)),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#]+-(?P<id>[0-9a-f]+)'\n# geo-restricted but the contentUrl contain a valid url\n##sp=399',\n# special characters in title\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    unescapeHTML,\n    parse_duration,\n    get_element_by_class,\n)\n\n\nclass LEGOIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?lego\\.com/(?P<locale>[^/]+)/(?:[^/]+/)*videos/(?:[^/]+/)*[^/?#]+-(?P<id>[0-9a-f]+)'\n    _TESTS = [{\n        'url': 'http://www.lego.com/en-us/videos/themes/club/blocumentary-kawaguchi-55492d823b1b4d5e985787fa8c2973b1',\n        'md5': 'f34468f176cfd76488767fc162c405fa',\n        'info_dict': {\n            'id': '55492d823b1b4d5e985787fa8c2973b1',\n            'ext': 'mp4',\n            'title': 'Blocumentary Great Creations: Akiyuki Kawaguchi',\n            'description': 'Blocumentary Great Creations: Akiyuki Kawaguchi',\n        },\n    }, {\n        # geo-restricted but the contentUrl contain a valid url\n        'url': 'http://www.lego.com/nl-nl/videos/themes/nexoknights/episode-20-kingdom-of-heroes-13bdc2299ab24d9685701a915b3d71e7##sp=399',\n        'md5': '4c3fec48a12e40c6e5995abc3d36cc2e',\n        'info_dict': {\n            'id': '13bdc2299ab24d9685701a915b3d71e7',\n            'ext': 'mp4',\n            'title': 'Aflevering 20 - Helden van het koninkrijk',\n            'description': 'md5:8ee499aac26d7fa8bcb0cedb7f9c3941',\n        },\n    }, {\n        # special characters in title\n        'url': 'http://www.lego.com/en-us/starwars/videos/lego-star-wars-force-surprise-9685ee9d12e84ff38e84b4e3d0db533d',\n        'info_dict': {\n            'id': '9685ee9d12e84ff38e84b4e3d0db533d',\n            'ext': 'mp4',\n            'title': 'Force Surprise \u2013 LEGO\u00ae Star Wars\u2122 Microfighters',\n            'description': 'md5:9c673c96ce6f6271b88563fe9dc56de3',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n    _BITRATES = [256, 512, 1024, 1536, 2560]\n\n    def _real_extract(self, url):\n        locale, video_id = re.match(self._VALID_URL, url).groups()\n        webpage = self._download_webpage(url, video_id)\n        title = get_element_by_class('video-header', webpage).strip()\n        progressive_base = 'https://lc-mediaplayerns-live-s.legocdn.com/'\n        streaming_base = 'http://legoprod-f.akamaihd.net/'\n        content_url = self._html_search_meta('contentUrl', webpage)\n        path = self._search_regex(\n            r'(?:https?:)?//[^/]+/(?:[iz]/s/)?public/(.+)_[0-9,]+\\.(?:mp4|webm)',\n            content_url, 'video path', default=None)\n        if not path:\n            player_url = self._proto_relative_url(self._search_regex(\n                r'<iframe[^>]+src=\"((?:https?)?//(?:www\\.)?lego\\.com/[^/]+/mediaplayer/video/[^\"]+)',\n                webpage, 'player url', default=None))\n            if not player_url:\n                base_url = self._proto_relative_url(self._search_regex(\n                    r'data-baseurl=\"([^\"]+)\"', webpage, 'base url',\n                    default='http://www.lego.com/%s/mediaplayer/video/' % locale))\n                player_url = base_url + video_id\n            player_webpage = self._download_webpage(player_url, video_id)\n            video_data = self._parse_json(unescapeHTML(self._search_regex(\n                r\"video='([^']+)'\", player_webpage, 'video data')), video_id)\n            progressive_base = self._search_regex(\n                r'data-video-progressive-url=\"([^\"]+)\"',\n                player_webpage, 'progressive base', default='https://lc-mediaplayerns-live-s.legocdn.com/')\n            streaming_base = self._search_regex(\n                r'data-video-streaming-url=\"([^\"]+)\"',\n                player_webpage, 'streaming base', default='http://legoprod-f.akamaihd.net/')\n            item_id = video_data['ItemId']\n\n            net_storage_path = video_data.get('NetStoragePath') or '/'.join([item_id[:2], item_id[2:4]])\n            base_path = '_'.join([item_id, video_data['VideoId'], video_data['Locale'], compat_str(video_data['VideoVersion'])])\n            path = '/'.join([net_storage_path, base_path])\n        streaming_path = ','.join(map(lambda bitrate: compat_str(bitrate), self._BITRATES))\n\n        formats = self._extract_akamai_formats(\n            '%si/s/public/%s_,%s,.mp4.csmil/master.m3u8' % (streaming_base, path, streaming_path), video_id)\n        m3u8_formats = list(filter(\n            lambda f: f.get('protocol') == 'm3u8_native' and f.get('vcodec') != 'none',\n            formats))\n        if len(m3u8_formats) == len(self._BITRATES):\n            self._sort_formats(m3u8_formats)\n            for bitrate, m3u8_format in zip(self._BITRATES, m3u8_formats):\n                progressive_base_url = '%spublic/%s_%d.' % (progressive_base, path, bitrate)\n                mp4_f = m3u8_format.copy()\n                mp4_f.update({\n                    'url': progressive_base_url + 'mp4',\n                    'format_id': m3u8_format['format_id'].replace('hls', 'mp4'),\n                    'protocol': 'http',\n                })\n                web_f = {\n                    'url': progressive_base_url + 'webm',\n                    'format_id': m3u8_format['format_id'].replace('hls', 'webm'),\n                    'width': m3u8_format['width'],\n                    'height': m3u8_format['height'],\n                    'tbr': m3u8_format.get('tbr'),\n                    'ext': 'webm',\n                }\n                formats.extend([web_f, mp4_f])\n        else:\n            for bitrate in self._BITRATES:\n                for ext in ('web', 'mp4'):\n                    formats.append({\n                        'format_id': '%s-%s' % (ext, bitrate),\n                        'url': '%spublic/%s_%d.%s' % (progressive_base, path, bitrate, ext),\n                        'tbr': bitrate,\n                        'ext': ext,\n                    })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': self._html_search_meta('description', webpage),\n            'thumbnail': self._html_search_meta('thumbnail', webpage),\n            'duration': parse_duration(self._html_search_meta('duration', webpage)),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "lego.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/lego.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}