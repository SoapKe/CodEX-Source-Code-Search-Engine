{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\"\"\"Generate examples of two objects moving in different directions.\"\"\"\nimport random\nimport sys\n\nimport numpy as np\nfrom six.moves import xrange\nimport tensorflow as tf\n\n\ntf.flags.DEFINE_string('out_file', '',\n                       'Output file for the tfrecords.')\n\n\ndef _add_object(obj_type, image, image2, xpos, ypos):\n  \"\"\"Add a moving obj to two consecutive images.\"\"\"\n  obj_size = random.randint(8, 10)\n  channel = random.randint(0, 2)\n  move = random.randint(6, 10)\n\n  obj = np.zeros([obj_size, obj_size, 3])\n  if obj_type == 'rectangle':\n    xpos2 = xpos + move\n    ypos2 = ypos\n    for i in xrange(obj_size):\n      obj[i, 0:i+1, channel] = [1.0 for _ in xrange(i+1)]\n  elif obj_type == 'square':\n    xpos2 = xpos\n    ypos2 = ypos + move\n    obj[:, :, channel] = 1.0\n\n  for x in xrange(obj_size):\n    for y in xrange(obj_size):\n      if obj[x, y, channel] == 1.0:\n        image[xpos+x, ypos+y, channel] = 1.0\n        image2[xpos2+x, ypos2+y, channel] = 1.0\n\n\ndef _images_to_example(image, image2):\n  \"\"\"Convert two consecutive images to SequenceExample.\"\"\"\n  example = tf.SequenceExample()\n  feature_list = example.feature_lists.feature_list['moving_objs']\n  feature = feature_list.feature.add()\n  feature.float_list.value.extend(np.reshape(image, [-1]).tolist())\n  feature = feature_list.feature.add()\n  feature.float_list.value.extend(np.reshape(image2, [-1]).tolist())\n  return example\n\n\ndef generate_input():\n  \"\"\"Generate tfrecords.\"\"\"\n  writer = tf.python_io.TFRecordWriter(tf.flags.FLAGS.out_file)\n  writer2 = tf.python_io.TFRecordWriter(tf.flags.FLAGS.out_file + '_test')\n\n  examples = []\n  for xpos in xrange(0, 40, 3):\n    for ypos in xrange(0, 40, 3):\n      for xpos2 in xrange(0, 40, 3):\n        for ypos2 in xrange(0, 40, 3):\n          image = np.zeros([64, 64, 3])\n          image2 = np.zeros([64, 64, 3])\n          _add_object('rectangle', image, image2, xpos, ypos)\n          _add_object('square', image, image2, xpos2, ypos2)\n          examples.append(_images_to_example(image, image2))\n\n  sys.stderr.write('Finish generating examples.\\n')\n  random.shuffle(examples)\n  for count, ex in enumerate(examples):\n    if count % 10 == 0:\n      writer2.write(ex.SerializeToString())\n    else:\n      writer.write(ex.SerializeToString())\n\ndef main(_):\n  generate_input()\n\n\nif __name__ == '__main__':\n  tf.app.run()\n", "comments": "   generate examples two objects moving different directions     import random import sys  import numpy np six moves import xrange import tensorflow tf   tf flags define string( file                               output file tfrecords  )   def  add object(obj type  image  image2  xpos  ypos)       add moving obj two consecutive images       obj size   random randint(8  10)   channel   random randint(0  2)   move   random randint(6  10)    obj   np zeros( obj size  obj size  3 )   obj type     rectangle       xpos2   xpos   move     ypos2   ypos     xrange(obj size)        obj  0 1  channel     1 0   xrange(i 1)    elif obj type     square       xpos2   xpos     ypos2   ypos   move     obj       channel    1 0    x xrange(obj size)      xrange(obj size)        obj x   channel     1 0          image xpos x  ypos  channel    1 0         image2 xpos2 x  ypos2  channel    1 0   def  images example(image  image2)       convert two consecutive images sequenceexample       example   tf sequenceexample()   feature list   example feature lists feature list  moving objs     feature   feature list feature add()   feature float list value extend(np reshape(image    1 ) tolist())   feature   feature list feature add()   feature float list value extend(np reshape(image2    1 ) tolist())   return example   def generate input()       generate tfrecords        copyright 2016 the tensorflow authors all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                    ", "content": "# Copyright 2016 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"Generate examples of two objects moving in different directions.\"\"\"\nimport random\nimport sys\n\nimport numpy as np\nfrom six.moves import xrange\nimport tensorflow as tf\n\n\ntf.flags.DEFINE_string('out_file', '',\n                       'Output file for the tfrecords.')\n\n\ndef _add_object(obj_type, image, image2, xpos, ypos):\n  \"\"\"Add a moving obj to two consecutive images.\"\"\"\n  obj_size = random.randint(8, 10)\n  channel = random.randint(0, 2)\n  move = random.randint(6, 10)\n\n  obj = np.zeros([obj_size, obj_size, 3])\n  if obj_type == 'rectangle':\n    xpos2 = xpos + move\n    ypos2 = ypos\n    for i in xrange(obj_size):\n      obj[i, 0:i+1, channel] = [1.0 for _ in xrange(i+1)]\n  elif obj_type == 'square':\n    xpos2 = xpos\n    ypos2 = ypos + move\n    obj[:, :, channel] = 1.0\n\n  for x in xrange(obj_size):\n    for y in xrange(obj_size):\n      if obj[x, y, channel] == 1.0:\n        image[xpos+x, ypos+y, channel] = 1.0\n        image2[xpos2+x, ypos2+y, channel] = 1.0\n\n\ndef _images_to_example(image, image2):\n  \"\"\"Convert two consecutive images to SequenceExample.\"\"\"\n  example = tf.SequenceExample()\n  feature_list = example.feature_lists.feature_list['moving_objs']\n  feature = feature_list.feature.add()\n  feature.float_list.value.extend(np.reshape(image, [-1]).tolist())\n  feature = feature_list.feature.add()\n  feature.float_list.value.extend(np.reshape(image2, [-1]).tolist())\n  return example\n\n\ndef generate_input():\n  \"\"\"Generate tfrecords.\"\"\"\n  writer = tf.python_io.TFRecordWriter(tf.flags.FLAGS.out_file)\n  writer2 = tf.python_io.TFRecordWriter(tf.flags.FLAGS.out_file + '_test')\n\n  examples = []\n  for xpos in xrange(0, 40, 3):\n    for ypos in xrange(0, 40, 3):\n      for xpos2 in xrange(0, 40, 3):\n        for ypos2 in xrange(0, 40, 3):\n          image = np.zeros([64, 64, 3])\n          image2 = np.zeros([64, 64, 3])\n          _add_object('rectangle', image, image2, xpos, ypos)\n          _add_object('square', image, image2, xpos2, ypos2)\n          examples.append(_images_to_example(image, image2))\n\n  sys.stderr.write('Finish generating examples.\\n')\n  random.shuffle(examples)\n  for count, ex in enumerate(examples):\n    if count % 10 == 0:\n      writer2.write(ex.SerializeToString())\n    else:\n      writer.write(ex.SerializeToString())\n\ndef main(_):\n  generate_input()\n\n\nif __name__ == '__main__':\n  tf.app.run()\n", "description": "Models and examples built with TensorFlow", "file_name": "example_gen.py", "id": "2752417d8e681dd25a7c57031fb06ba9", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/next_frame_prediction/cross_conv/example_gen.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}