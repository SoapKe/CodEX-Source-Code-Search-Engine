{"author": "nicolargo", "code": "\n -*- coding: utf-8 -*-\n\n Glances - An eye on your system\n\n Copyright (C) 2017 Nicolargo <nicolas@nicolargo.com>\n\n Glances is free software; you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Glances is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n\"\"\"Glances unitary tests suite for the XML-RPC API.\"\"\"\n\nimport json\nimport shlex\nimport subprocess\nimport time\nimport unittest\n\nfrom glances import __version__\nfrom glances.compat import ServerProxy\n\nSERVER_PORT = 61234\nURL = \"http://localhost:%s\" % SERVER_PORT\npid = None\n\n Init the XML-RPC client\nclient = ServerProxy(URL)\n\n Unitest class\n ==============\nprint('XML-RPC API unitary tests for Glances %s' % __version__)\n\n\nclass TestGlances(unittest.TestCase):\n    \"\"\"Test Glances class.\"\"\"\n\n    def setUp(self):\n        \"\"\"The function is called *every time* before test_*.\"\"\"\n        print('\\n' + '=' * 78)\n\n    def test_000_start_server(self):\n        \"\"\"Start the Glances Web Server.\"\"\"\n        global pid\n\n        print('INFO: [TEST_000] Start the Glances Web Server')\n        cmdline = \"python -m glances -s -p %s\" % SERVER_PORT\n        print(\"Run the Glances Server on port %s\" % SERVER_PORT)\n        args = shlex.split(cmdline)\n        pid = subprocess.Popen(args)\n        print(\"Please wait...\")\n        time.sleep(1)\n\n        self.assertTrue(pid is not None)\n\n    def test_001_all(self):\n        \"\"\"All.\"\"\"\n        method = \"getAll()\"\n        print('INFO: [TEST_001] Connection test')\n        print(\"XML-RPC request: %s\" % method)\n        req = json.loads(client.getAll())\n\n        self.assertIsInstance(req, dict)\n\n    def test_002_pluginslist(self):\n        \"\"\"Plugins list.\"\"\"\n        method = \"getAllPlugins()\"\n        print('INFO: [TEST_002] Get plugins list')\n        print(\"XML-RPC request: %s\" % method)\n        req = json.loads(client.getAllPlugins())\n\n        self.assertIsInstance(req, list)\n\n    def test_003_system(self):\n        \"\"\"System.\"\"\"\n        method = \"getSystem()\"\n        print('INFO: [TEST_003] Method: %s' % method)\n        req = json.loads(client.getSystem())\n\n        self.assertIsInstance(req, dict)\n\n    def test_004_cpu(self):\n        \"\"\"CPU.\"\"\"\n        method = \"getCpu(), getPerCpu(), getLoad() and getCore()\"\n        print('INFO: [TEST_004] Method: %s' % method)\n\n        req = json.loads(client.getCpu())\n        self.assertIsInstance(req, dict)\n\n        req = json.loads(client.getPerCpu())\n        self.assertIsInstance(req, list)\n\n        req = json.loads(client.getLoad())\n        self.assertIsInstance(req, dict)\n\n        req = json.loads(client.getCore())\n        self.assertIsInstance(req, dict)\n\n    def test_005_mem(self):\n        \"\"\"MEM.\"\"\"\n        method = \"getMem() and getMemSwap()\"\n        print('INFO: [TEST_005] Method: %s' % method)\n\n        req = json.loads(client.getMem())\n        self.assertIsInstance(req, dict)\n\n        req = json.loads(client.getMemSwap())\n        self.assertIsInstance(req, dict)\n\n    def test_006_net(self):\n        \"\"\"NETWORK.\"\"\"\n        method = \"getNetwork()\"\n        print('INFO: [TEST_006] Method: %s' % method)\n\n        req = json.loads(client.getNetwork())\n        self.assertIsInstance(req, list)\n\n    def test_007_disk(self):\n        \"\"\"DISK.\"\"\"\n        method = \"getFs(), getFolders() and getDiskIO()\"\n        print('INFO: [TEST_007] Method: %s' % method)\n\n        req = json.loads(client.getFs())\n        self.assertIsInstance(req, list)\n\n        req = json.loads(client.getFolders())\n        self.assertIsInstance(req, list)\n\n        req = json.loads(client.getDiskIO())\n        self.assertIsInstance(req, list)\n\n    def test_008_sensors(self):\n        \"\"\"SENSORS.\"\"\"\n        method = \"getSensors()\"\n        print('INFO: [TEST_008] Method: %s' % method)\n\n        req = json.loads(client.getSensors())\n        self.assertIsInstance(req, list)\n\n    def test_009_process(self):\n        \"\"\"PROCESS.\"\"\"\n        method = \"getProcessCount() and getProcessList()\"\n        print('INFO: [TEST_009] Method: %s' % method)\n\n        req = json.loads(client.getProcessCount())\n        self.assertIsInstance(req, dict)\n\n        req = json.loads(client.getProcessList())\n        self.assertIsInstance(req, list)\n\n    def test_010_all_limits(self):\n        \"\"\"All limits.\"\"\"\n        method = \"getAllLimits()\"\n        print('INFO: [TEST_010] Method: %s' % method)\n\n        req = json.loads(client.getAllLimits())\n        self.assertIsInstance(req, dict)\n        self.assertIsInstance(req['cpu'], dict)\n\n    def test_011_all_views(self):\n        \"\"\"All views.\"\"\"\n        method = \"getAllViews()\"\n        print('INFO: [TEST_011] Method: %s' % method)\n\n        req = json.loads(client.getAllViews())\n        self.assertIsInstance(req, dict)\n        self.assertIsInstance(req['cpu'], dict)\n\n    def test_012_irq(self):\n        \"\"\"IRQS\"\"\"\n        method = \"getIrqs()\"\n        print('INFO: [TEST_012] Method: %s' % method)\n        req = json.loads(client.getIrq())\n        self.assertIsInstance(req, list)\n\n    def test_013_plugin_views(self):\n        \"\"\"Plugin views.\"\"\"\n        method = \"getViewsCpu()\"\n        print('INFO: [TEST_013] Method: %s' % method)\n\n        req = json.loads(client.getViewsCpu())\n        self.assertIsInstance(req, dict)\n\n    def test_999_stop_server(self):\n        \"\"\"Stop the Glances Web Server.\"\"\"\n        print('INFO: [TEST_999] Stop the Glances Server')\n\n        print(\"Stop the Glances Server\")\n        pid.terminate()\n        time.sleep(1)\n\n        self.assertTrue(True)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "   glances unitary tests suite xml rpc api      import json import shlex import subprocess import time import unittest  glances import   version   glances compat import serverproxy  server port   61234 url    http   localhost     server port pid   none    init xml rpc client client   serverproxy(url)    unitest class                  print( xml rpc api unitary tests glances       version  )   class testglances(unittest testcase)         test glances class          def setup(self)             the function called  every time  test               print(  n          78)      def test 000 start server(self)             start glances web server             global pid          print( info   test 000  start glances web server )         cmdline    python  glances   p     server port         print( run glances server port     server port)         args   shlex split(cmdline)         pid   subprocess popen(args)         print( please wait    )         time sleep(1)          self asserttrue(pid none)      def test 001 all(self)             all             method    getall()          print( info   test 001  connection test )         print( xml rpc request      method)         req   json loads(client getall())          self assertisinstance(req  dict)      def test 002 pluginslist(self)             plugins list             method    getallplugins()          print( info   test 002  get plugins list )         print( xml rpc request      method)         req   json loads(client getallplugins())          self assertisinstance(req  list)      def test 003 system(self)             system             method    getsystem()          print( info   test 003  method      method)         req   json loads(client getsystem())          self assertisinstance(req  dict)      def test 004 cpu(self)             cpu             method    getcpu()  getpercpu()  getload() getcore()          print( info   test 004  method      method)          req   json loads(client getcpu())         self assertisinstance(req  dict)          req   json loads(client getpercpu())         self assertisinstance(req  list)          req   json loads(client getload())         self assertisinstance(req  dict)          req   json loads(client getcore())         self assertisinstance(req  dict)      def test 005 mem(self)             mem             method    getmem() getmemswap()          print( info   test 005  method      method)          req   json loads(client getmem())         self assertisinstance(req  dict)          req   json loads(client getmemswap())         self assertisinstance(req  dict)      def test 006 net(self)             network             method    getnetwork()          print( info   test 006  method      method)          req   json loads(client getnetwork())         self assertisinstance(req  list)      def test 007 disk(self)             disk             method    getfs()  getfolders() getdiskio()          print( info   test 007  method      method)          req   json loads(client getfs())         self assertisinstance(req  list)          req   json loads(client getfolders())         self assertisinstance(req  list)          req   json loads(client getdiskio())         self assertisinstance(req  list)      def test 008 sensors(self)             sensors             method    getsensors()          print( info   test 008  method      method)          req   json loads(client getsensors())         self assertisinstance(req  list)      def test 009 process(self)             process             method    getprocesscount() getprocesslist()          print( info   test 009  method      method)          req   json loads(client getprocesscount())         self assertisinstance(req  dict)          req   json loads(client getprocesslist())         self assertisinstance(req  list)      def test 010 limits(self)             all limits             method    getalllimits()          print( info   test 010  method      method)          req   json loads(client getalllimits())         self assertisinstance(req  dict)         self assertisinstance(req  cpu    dict)      def test 011 views(self)             all views             method    getallviews()          print( info   test 011  method      method)          req   json loads(client getallviews())         self assertisinstance(req  dict)         self assertisinstance(req  cpu    dict)      def test 012 irq(self)             irqs            method    getirqs()          print( info   test 012  method      method)         req   json loads(client getirq())         self assertisinstance(req  list)      def test 013 plugin views(self)             plugin views             method    getviewscpu()          print( info   test 013  method      method)          req   json loads(client getviewscpu())         self assertisinstance(req  dict)      def test 999 stop server(self)             stop glances web server         usr bin env python        coding  utf 8           glances   an eye system       copyright (c) 2017 nicolargo  nicolas nicolargo com        glances free software  redistribute modify    terms gnu lesser general public license published    free software foundation  either version 3 license     (at option) later version        glances distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose  see    gnu lesser general public license details        you received copy gnu lesser general public license    along program  if  see  http   www gnu org licenses       init xml rpc client    unitest class                   ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Glances - An eye on your system\n#\n# Copyright (C) 2017 Nicolargo <nicolas@nicolargo.com>\n#\n# Glances is free software; you can redistribute it and/or modify\n# it under the terms of the GNU Lesser General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Glances is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n\"\"\"Glances unitary tests suite for the XML-RPC API.\"\"\"\n\nimport json\nimport shlex\nimport subprocess\nimport time\nimport unittest\n\nfrom glances import __version__\nfrom glances.compat import ServerProxy\n\nSERVER_PORT = 61234\nURL = \"http://localhost:%s\" % SERVER_PORT\npid = None\n\n# Init the XML-RPC client\nclient = ServerProxy(URL)\n\n# Unitest class\n# ==============\nprint('XML-RPC API unitary tests for Glances %s' % __version__)\n\n\nclass TestGlances(unittest.TestCase):\n    \"\"\"Test Glances class.\"\"\"\n\n    def setUp(self):\n        \"\"\"The function is called *every time* before test_*.\"\"\"\n        print('\\n' + '=' * 78)\n\n    def test_000_start_server(self):\n        \"\"\"Start the Glances Web Server.\"\"\"\n        global pid\n\n        print('INFO: [TEST_000] Start the Glances Web Server')\n        cmdline = \"python -m glances -s -p %s\" % SERVER_PORT\n        print(\"Run the Glances Server on port %s\" % SERVER_PORT)\n        args = shlex.split(cmdline)\n        pid = subprocess.Popen(args)\n        print(\"Please wait...\")\n        time.sleep(1)\n\n        self.assertTrue(pid is not None)\n\n    def test_001_all(self):\n        \"\"\"All.\"\"\"\n        method = \"getAll()\"\n        print('INFO: [TEST_001] Connection test')\n        print(\"XML-RPC request: %s\" % method)\n        req = json.loads(client.getAll())\n\n        self.assertIsInstance(req, dict)\n\n    def test_002_pluginslist(self):\n        \"\"\"Plugins list.\"\"\"\n        method = \"getAllPlugins()\"\n        print('INFO: [TEST_002] Get plugins list')\n        print(\"XML-RPC request: %s\" % method)\n        req = json.loads(client.getAllPlugins())\n\n        self.assertIsInstance(req, list)\n\n    def test_003_system(self):\n        \"\"\"System.\"\"\"\n        method = \"getSystem()\"\n        print('INFO: [TEST_003] Method: %s' % method)\n        req = json.loads(client.getSystem())\n\n        self.assertIsInstance(req, dict)\n\n    def test_004_cpu(self):\n        \"\"\"CPU.\"\"\"\n        method = \"getCpu(), getPerCpu(), getLoad() and getCore()\"\n        print('INFO: [TEST_004] Method: %s' % method)\n\n        req = json.loads(client.getCpu())\n        self.assertIsInstance(req, dict)\n\n        req = json.loads(client.getPerCpu())\n        self.assertIsInstance(req, list)\n\n        req = json.loads(client.getLoad())\n        self.assertIsInstance(req, dict)\n\n        req = json.loads(client.getCore())\n        self.assertIsInstance(req, dict)\n\n    def test_005_mem(self):\n        \"\"\"MEM.\"\"\"\n        method = \"getMem() and getMemSwap()\"\n        print('INFO: [TEST_005] Method: %s' % method)\n\n        req = json.loads(client.getMem())\n        self.assertIsInstance(req, dict)\n\n        req = json.loads(client.getMemSwap())\n        self.assertIsInstance(req, dict)\n\n    def test_006_net(self):\n        \"\"\"NETWORK.\"\"\"\n        method = \"getNetwork()\"\n        print('INFO: [TEST_006] Method: %s' % method)\n\n        req = json.loads(client.getNetwork())\n        self.assertIsInstance(req, list)\n\n    def test_007_disk(self):\n        \"\"\"DISK.\"\"\"\n        method = \"getFs(), getFolders() and getDiskIO()\"\n        print('INFO: [TEST_007] Method: %s' % method)\n\n        req = json.loads(client.getFs())\n        self.assertIsInstance(req, list)\n\n        req = json.loads(client.getFolders())\n        self.assertIsInstance(req, list)\n\n        req = json.loads(client.getDiskIO())\n        self.assertIsInstance(req, list)\n\n    def test_008_sensors(self):\n        \"\"\"SENSORS.\"\"\"\n        method = \"getSensors()\"\n        print('INFO: [TEST_008] Method: %s' % method)\n\n        req = json.loads(client.getSensors())\n        self.assertIsInstance(req, list)\n\n    def test_009_process(self):\n        \"\"\"PROCESS.\"\"\"\n        method = \"getProcessCount() and getProcessList()\"\n        print('INFO: [TEST_009] Method: %s' % method)\n\n        req = json.loads(client.getProcessCount())\n        self.assertIsInstance(req, dict)\n\n        req = json.loads(client.getProcessList())\n        self.assertIsInstance(req, list)\n\n    def test_010_all_limits(self):\n        \"\"\"All limits.\"\"\"\n        method = \"getAllLimits()\"\n        print('INFO: [TEST_010] Method: %s' % method)\n\n        req = json.loads(client.getAllLimits())\n        self.assertIsInstance(req, dict)\n        self.assertIsInstance(req['cpu'], dict)\n\n    def test_011_all_views(self):\n        \"\"\"All views.\"\"\"\n        method = \"getAllViews()\"\n        print('INFO: [TEST_011] Method: %s' % method)\n\n        req = json.loads(client.getAllViews())\n        self.assertIsInstance(req, dict)\n        self.assertIsInstance(req['cpu'], dict)\n\n    def test_012_irq(self):\n        \"\"\"IRQS\"\"\"\n        method = \"getIrqs()\"\n        print('INFO: [TEST_012] Method: %s' % method)\n        req = json.loads(client.getIrq())\n        self.assertIsInstance(req, list)\n\n    def test_013_plugin_views(self):\n        \"\"\"Plugin views.\"\"\"\n        method = \"getViewsCpu()\"\n        print('INFO: [TEST_013] Method: %s' % method)\n\n        req = json.loads(client.getViewsCpu())\n        self.assertIsInstance(req, dict)\n\n    def test_999_stop_server(self):\n        \"\"\"Stop the Glances Web Server.\"\"\"\n        print('INFO: [TEST_999] Stop the Glances Server')\n\n        print(\"Stop the Glances Server\")\n        pid.terminate()\n        time.sleep(1)\n\n        self.assertTrue(True)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Glances an Eye on your system. A top/htop alternative.", "file_name": "unitest-xmlrpc.py", "id": "339c64b8a51dd715addb438de850ce70", "language": "Python", "project_name": "glances", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nicolargo-glances/nicolargo-glances-c286362/unitest-xmlrpc.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:40:41Z", "url": "https://github.com/nicolargo/glances", "wiki": true}