{"author": "donnemartin", "code": "from nose.tools import assert_equal, assert_raises\n\n\nclass TestMath(object):\n\n    def test_generate_primes(self):\n        prime_generator = PrimeGenerator()\n        assert_raises(TypeError, prime_generator.generate_primes, None)\n        assert_raises(TypeError, prime_generator.generate_primes, 98.6)\n        assert_equal(prime_generator.generate_primes(20), [False, False, True, \n                                                           True, False, True, \n                                                           False, True, False, \n                                                           False, False, True, \n                                                           False, True, False, \n                                                           False, False, True, \n                                                           False, True])\n        print('Success: generate_primes')\n\n\ndef main():\n    test = TestMath()\n    test.test_generate_primes()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal, assert_raises\n\n\nclass TestMath(object):\n\n    def test_generate_primes(self):\n        prime_generator = PrimeGenerator()\n        assert_raises(TypeError, prime_generator.generate_primes, None)\n        assert_raises(TypeError, prime_generator.generate_primes, 98.6)\n        assert_equal(prime_generator.generate_primes(20), [False, False, True, \n                                                           True, False, True, \n                                                           False, True, False, \n                                                           False, False, True, \n                                                           False, True, False, \n                                                           False, False, True, \n                                                           False, True])\n        print('Success: generate_primes')\n\n\ndef main():\n    test = TestMath()\n    test.test_generate_primes()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_generate_primes.py", "id": "b8eeb118b3422e07f361bc46c3df3edd", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/math_probability/generate_primes/test_generate_primes.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}