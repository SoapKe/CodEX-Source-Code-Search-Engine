{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass FiveTVIE(InfoExtractor):\n    _VALID_URL = r\n\n    _TESTS = [{\n        'url': 'http://5-tv.ru/news/96814/',\n        'md5': 'bbff554ad415ecf5416a2f48c22d9283',\n        'info_dict': {\n            'id': '96814',\n            'ext': 'mp4',\n            'title': '\u0420\u043e\u0441\u0441\u0438\u044f\u043d\u0435 \u0432\u044b\u0431\u0440\u0430\u043b\u0438 \u0438\u043c\u044f \u0434\u043b\u044f \u043e\u0431\u0449\u0435\u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b',\n            'description': 'md5:a8aa13e2b7ad36789e9f77a74b6de660',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 180,\n        },\n    }, {\n        'url': 'http://5-tv.ru/video/1021729/',\n        'info_dict': {\n            'id': '1021729',\n            'ext': 'mp4',\n            'title': '3D \u043f\u0440\u0438\u043d\u0442\u0435\u0440',\n            'description': 'md5:d76c736d29ef7ec5c0cf7d7c65ffcb41',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 180,\n        },\n    }, {\n        'url': 'http://www.5-tv.ru/glavnoe/\n        'info_dict': {\n            'id': 'glavnoe',\n            'ext': 'mp4',\n            'title': r're:^\u0418\u0442\u043e\u0433\u0438 \u043d\u0435\u0434\u0435\u043b\u0438 \u0441\u00a0\\d+ \u043f\u043e\u00a0\\d+\u00a0\\w+\u00a0\\d{4}\u00a0\u0433\u043e\u0434\u0430$',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n    }, {\n        'url': 'http://www.5-tv.ru/glavnoe/broadcasts/508645/',\n        'only_matching': True,\n    }, {\n        'url': 'http://5-tv.ru/films/1507502/',\n        'only_matching': True,\n    }, {\n        'url': 'http://5-tv.ru/programs/broadcast/508713/',\n        'only_matching': True,\n    }, {\n        'url': 'http://5-tv.ru/angel/',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.5-tv.ru/schedule/?iframe=true&width=900&height=450',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id') or mobj.group('path')\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_url = self._search_regex(\n            [r'<div[^>]+?class=\"flowplayer[^>]+?data-href=\"([^\"]+)\"',\n             r'<a[^>]+?href=\"([^\"]+)\"[^>]+?class=\"videoplayer\"'],\n            webpage, 'video url')\n\n        title = self._og_search_title(webpage, default=None) or self._search_regex(\n            r'<title>([^<]+)</title>', webpage, 'title')\n        duration = int_or_none(self._og_search_property(\n            'video:duration', webpage, 'duration', default=None))\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': self._og_search_description(webpage, default=None),\n            'thumbnail': self._og_search_thumbnail(webpage, default=None),\n            'duration': duration,\n        }\n", "comments": "(?x)\n                    http://\n                        (?:www\\.)?5-tv\\.ru/\n                        (?:\n                            (?:[^/]+/)+(?P<id>\\d+)|\n                            (?P<path>[^/?#]+)(?:[/?#])?\n                        )\n                    \n \n# coding: utf-8\n#itemDetails',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass FiveTVIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    http://\n                        (?:www\\.)?5-tv\\.ru/\n                        (?:\n                            (?:[^/]+/)+(?P<id>\\d+)|\n                            (?P<path>[^/?#]+)(?:[/?#])?\n                        )\n                    '''\n\n    _TESTS = [{\n        'url': 'http://5-tv.ru/news/96814/',\n        'md5': 'bbff554ad415ecf5416a2f48c22d9283',\n        'info_dict': {\n            'id': '96814',\n            'ext': 'mp4',\n            'title': '\u0420\u043e\u0441\u0441\u0438\u044f\u043d\u0435 \u0432\u044b\u0431\u0440\u0430\u043b\u0438 \u0438\u043c\u044f \u0434\u043b\u044f \u043e\u0431\u0449\u0435\u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b',\n            'description': 'md5:a8aa13e2b7ad36789e9f77a74b6de660',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 180,\n        },\n    }, {\n        'url': 'http://5-tv.ru/video/1021729/',\n        'info_dict': {\n            'id': '1021729',\n            'ext': 'mp4',\n            'title': '3D \u043f\u0440\u0438\u043d\u0442\u0435\u0440',\n            'description': 'md5:d76c736d29ef7ec5c0cf7d7c65ffcb41',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 180,\n        },\n    }, {\n        'url': 'http://www.5-tv.ru/glavnoe/#itemDetails',\n        'info_dict': {\n            'id': 'glavnoe',\n            'ext': 'mp4',\n            'title': r're:^\u0418\u0442\u043e\u0433\u0438 \u043d\u0435\u0434\u0435\u043b\u0438 \u0441\u00a0\\d+ \u043f\u043e\u00a0\\d+\u00a0\\w+\u00a0\\d{4}\u00a0\u0433\u043e\u0434\u0430$',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n    }, {\n        'url': 'http://www.5-tv.ru/glavnoe/broadcasts/508645/',\n        'only_matching': True,\n    }, {\n        'url': 'http://5-tv.ru/films/1507502/',\n        'only_matching': True,\n    }, {\n        'url': 'http://5-tv.ru/programs/broadcast/508713/',\n        'only_matching': True,\n    }, {\n        'url': 'http://5-tv.ru/angel/',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.5-tv.ru/schedule/?iframe=true&width=900&height=450',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id') or mobj.group('path')\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_url = self._search_regex(\n            [r'<div[^>]+?class=\"flowplayer[^>]+?data-href=\"([^\"]+)\"',\n             r'<a[^>]+?href=\"([^\"]+)\"[^>]+?class=\"videoplayer\"'],\n            webpage, 'video url')\n\n        title = self._og_search_title(webpage, default=None) or self._search_regex(\n            r'<title>([^<]+)</title>', webpage, 'title')\n        duration = int_or_none(self._og_search_property(\n            'video:duration', webpage, 'duration', default=None))\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': self._og_search_description(webpage, default=None),\n            'thumbnail': self._og_search_thumbnail(webpage, default=None),\n            'duration': duration,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "fivetv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/fivetv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}