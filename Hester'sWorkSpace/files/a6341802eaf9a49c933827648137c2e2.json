{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom django.core.urlresolvers import reverse\nfrom mock import patch\n\nfrom sentry.models import AuthIdentity, AuthProvider, OrganizationMember\nfrom sentry.testutils import AuthProviderTestCase, PermissionTestCase\n\n\nclass OrganizationAuthSettingsPermissionTest(PermissionTestCase):\n    def setUp(self):\n        super(OrganizationAuthSettingsPermissionTest, self).setUp()\n        self.path = reverse('sentry-organization-auth-settings', args=[self.organization.slug])\n\n    def test_teamless_admin_cannot_load(self):\n        with self.feature('organizations:sso'):\n            self.assert_teamless_admin_cannot_access(self.path)\n\n    def test_team_admin_cannot_load(self):\n        with self.feature('organizations:sso'):\n            self.assert_team_admin_cannot_access(self.path)\n\n    def test_manager_cannot_load(self):\n        with self.feature('organizations:sso'):\n            self.assert_role_cannot_access(self.path, 'manager')\n\n    def test_owner_can_load(self):\n        with self.feature('organizations:sso'):\n            self.assert_owner_can_access(self.path)\n\n\nclass OrganizationAuthSettingsTest(AuthProviderTestCase):\n    def test_renders_with_context(self):\n        organization = self.create_organization(name='foo', owner=self.user)\n\n        path = reverse('sentry-organization-auth-settings', args=[organization.slug])\n\n        self.login_as(self.user)\n\n        with self.feature('organizations:sso'):\n            resp = self.client.get(path)\n\n        assert resp.status_code == 200\n\n        self.assertTemplateUsed(resp, 'sentry/organization-auth-settings.html')\n\n        assert resp.context['organization'] == organization\n        assert 'dummy' in [k for k, v in resp.context['provider_list']]\n\n    def test_can_start_auth_flow(self):\n        organization = self.create_organization(name='foo', owner=self.user)\n\n        path = reverse('sentry-organization-auth-settings', args=[organization.slug])\n\n        self.login_as(self.user)\n\n        with self.feature('organizations:sso'):\n            resp = self.client.post(path, {'provider': 'dummy', 'init': True})\n\n        assert resp.status_code == 200\n        assert resp.content.decode('utf-8') == self.provider.TEMPLATE\n\n    def test_basic_flow(self):\n        user = self.create_user('bar@example.com')\n        organization = self.create_organization(name='foo', owner=user)\n\n        base_path = reverse('sentry-organization-auth-settings', args=[organization.slug])\n\n        self.login_as(user)\n\n        with self.feature('organizations:sso'):\n            resp = self.client.post(base_path, {'provider': 'dummy', 'init': True})\n\n            assert resp.status_code == 200\n            assert self.provider.TEMPLATE in resp.content.decode('utf-8')\n\n            path = reverse('sentry-auth-sso')\n\n            resp = self.client.post(path, {'email': user.email})\n\n        assert resp.status_code == 302\n        assert resp['Location'] == 'http://testserver{}'.format(base_path)\n\n        auth_provider = AuthProvider.objects.get(\n            organization=organization,\n            provider='dummy',\n        )\n\n        auth_identity = AuthIdentity.objects.get(\n            auth_provider=auth_provider,\n        )\n\n        assert user == auth_identity.user\n\n        member = OrganizationMember.objects.get(\n            organization=organization,\n            user=user,\n        )\n\n        assert getattr(member.flags, 'sso:linked')\n        assert not getattr(member.flags, 'sso:invalid')\n\n    @patch('sentry.web.frontend.organization_auth_settings.email_unlink_notifications')\n    def test_disable_provider(self, email_unlink_notifications):\n        self.user.update(is_managed=True)\n        organization = self.create_organization(name='foo', owner=self.user)\n\n        auth_provider = AuthProvider.objects.create(\n            organization=organization,\n            provider='dummy',\n        )\n\n        AuthIdentity.objects.create(\n            user=self.user,\n            ident='foo',\n            auth_provider=auth_provider,\n        )\n\n        om = OrganizationMember.objects.get(\n            user=self.user,\n            organization=organization,\n        )\n        setattr(om.flags, 'sso:linked', True)\n        om.save()\n\n        path = reverse('sentry-organization-auth-settings', args=[organization.slug])\n\n        self.login_as(self.user, organization_id=organization.id)\n\n        with self.feature('organizations:sso'):\n            resp = self.client.post(path, {'op': 'disable'})\n\n        assert resp.status_code == 302\n\n        assert not AuthProvider.objects.filter(organization=organization).exists()\n        assert not AuthProvider.objects.filter(id=auth_provider.id).exists()\n\n        om = OrganizationMember.objects.get(id=om.id)\n\n        assert not getattr(om.flags, 'sso:linked')\n        assert not om.user.is_managed\n\n        assert email_unlink_notifications.delay.called\n", "comments": "", "content": "from __future__ import absolute_import\n\nfrom django.core.urlresolvers import reverse\nfrom mock import patch\n\nfrom sentry.models import AuthIdentity, AuthProvider, OrganizationMember\nfrom sentry.testutils import AuthProviderTestCase, PermissionTestCase\n\n\nclass OrganizationAuthSettingsPermissionTest(PermissionTestCase):\n    def setUp(self):\n        super(OrganizationAuthSettingsPermissionTest, self).setUp()\n        self.path = reverse('sentry-organization-auth-settings', args=[self.organization.slug])\n\n    def test_teamless_admin_cannot_load(self):\n        with self.feature('organizations:sso'):\n            self.assert_teamless_admin_cannot_access(self.path)\n\n    def test_team_admin_cannot_load(self):\n        with self.feature('organizations:sso'):\n            self.assert_team_admin_cannot_access(self.path)\n\n    def test_manager_cannot_load(self):\n        with self.feature('organizations:sso'):\n            self.assert_role_cannot_access(self.path, 'manager')\n\n    def test_owner_can_load(self):\n        with self.feature('organizations:sso'):\n            self.assert_owner_can_access(self.path)\n\n\nclass OrganizationAuthSettingsTest(AuthProviderTestCase):\n    def test_renders_with_context(self):\n        organization = self.create_organization(name='foo', owner=self.user)\n\n        path = reverse('sentry-organization-auth-settings', args=[organization.slug])\n\n        self.login_as(self.user)\n\n        with self.feature('organizations:sso'):\n            resp = self.client.get(path)\n\n        assert resp.status_code == 200\n\n        self.assertTemplateUsed(resp, 'sentry/organization-auth-settings.html')\n\n        assert resp.context['organization'] == organization\n        assert 'dummy' in [k for k, v in resp.context['provider_list']]\n\n    def test_can_start_auth_flow(self):\n        organization = self.create_organization(name='foo', owner=self.user)\n\n        path = reverse('sentry-organization-auth-settings', args=[organization.slug])\n\n        self.login_as(self.user)\n\n        with self.feature('organizations:sso'):\n            resp = self.client.post(path, {'provider': 'dummy', 'init': True})\n\n        assert resp.status_code == 200\n        assert resp.content.decode('utf-8') == self.provider.TEMPLATE\n\n    def test_basic_flow(self):\n        user = self.create_user('bar@example.com')\n        organization = self.create_organization(name='foo', owner=user)\n\n        base_path = reverse('sentry-organization-auth-settings', args=[organization.slug])\n\n        self.login_as(user)\n\n        with self.feature('organizations:sso'):\n            resp = self.client.post(base_path, {'provider': 'dummy', 'init': True})\n\n            assert resp.status_code == 200\n            assert self.provider.TEMPLATE in resp.content.decode('utf-8')\n\n            path = reverse('sentry-auth-sso')\n\n            resp = self.client.post(path, {'email': user.email})\n\n        assert resp.status_code == 302\n        assert resp['Location'] == 'http://testserver{}'.format(base_path)\n\n        auth_provider = AuthProvider.objects.get(\n            organization=organization,\n            provider='dummy',\n        )\n\n        auth_identity = AuthIdentity.objects.get(\n            auth_provider=auth_provider,\n        )\n\n        assert user == auth_identity.user\n\n        member = OrganizationMember.objects.get(\n            organization=organization,\n            user=user,\n        )\n\n        assert getattr(member.flags, 'sso:linked')\n        assert not getattr(member.flags, 'sso:invalid')\n\n    @patch('sentry.web.frontend.organization_auth_settings.email_unlink_notifications')\n    def test_disable_provider(self, email_unlink_notifications):\n        self.user.update(is_managed=True)\n        organization = self.create_organization(name='foo', owner=self.user)\n\n        auth_provider = AuthProvider.objects.create(\n            organization=organization,\n            provider='dummy',\n        )\n\n        AuthIdentity.objects.create(\n            user=self.user,\n            ident='foo',\n            auth_provider=auth_provider,\n        )\n\n        om = OrganizationMember.objects.get(\n            user=self.user,\n            organization=organization,\n        )\n        setattr(om.flags, 'sso:linked', True)\n        om.save()\n\n        path = reverse('sentry-organization-auth-settings', args=[organization.slug])\n\n        self.login_as(self.user, organization_id=organization.id)\n\n        with self.feature('organizations:sso'):\n            resp = self.client.post(path, {'op': 'disable'})\n\n        assert resp.status_code == 302\n\n        assert not AuthProvider.objects.filter(organization=organization).exists()\n        assert not AuthProvider.objects.filter(id=auth_provider.id).exists()\n\n        om = OrganizationMember.objects.get(id=om.id)\n\n        assert not getattr(om.flags, 'sso:linked')\n        assert not om.user.is_managed\n\n        assert email_unlink_notifications.delay.called\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_organization_auth_settings.py", "id": "a6341802eaf9a49c933827648137c2e2", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/web/frontend/test_organization_auth_settings.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}