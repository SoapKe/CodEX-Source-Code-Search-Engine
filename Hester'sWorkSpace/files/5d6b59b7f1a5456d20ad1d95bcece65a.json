{"author": "rushter", "code": "try:\n    from sklearn.model_selection import train_test_split\nexcept ImportError:\n    from sklearn.cross_validation import train_test_split\nfrom sklearn.datasets import make_classification\nfrom sklearn.datasets import make_regression\nfrom scipy.spatial import distance\n\nfrom mla import knn\nfrom mla.metrics.metrics import mean_squared_error, accuracy\n\n\ndef regression():\n    \n    X, y = make_regression(n_samples=500, n_features=5,\n                           n_informative=5, n_targets=1,\n                           noise=0.05, random_state=1111, bias=0.5)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,\n                                                        random_state=1111)\n\n    model = knn.KNNRegressor(k=5, distance_func=distance.euclidean)\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    print('regression mse', mean_squared_error(y_test, predictions))\n\n\ndef classification():\n    X, y = make_classification(n_samples=500, n_features=5, n_informative=5,\n                               n_redundant=0, n_repeated=0, n_classes=3,\n                               random_state=1111, class_sep=1.5, )\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1,\n                                                        random_state=1111)\n\n    clf = knn.KNNClassifier(k=5, distance_func=distance.euclidean)\n\n    clf.fit(X_train, y_train)\n    predictions = clf.predict(X_test)\n    print('classification accuracy', accuracy(y_test, predictions))\n\n\nif __name__ == '__main__':\n    regression()\n    classification()\n", "comments": "  generate random regression problem ", "content": "try:\n    from sklearn.model_selection import train_test_split\nexcept ImportError:\n    from sklearn.cross_validation import train_test_split\nfrom sklearn.datasets import make_classification\nfrom sklearn.datasets import make_regression\nfrom scipy.spatial import distance\n\nfrom mla import knn\nfrom mla.metrics.metrics import mean_squared_error, accuracy\n\n\ndef regression():\n    # Generate a random regression problem\n    X, y = make_regression(n_samples=500, n_features=5,\n                           n_informative=5, n_targets=1,\n                           noise=0.05, random_state=1111, bias=0.5)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,\n                                                        random_state=1111)\n\n    model = knn.KNNRegressor(k=5, distance_func=distance.euclidean)\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    print('regression mse', mean_squared_error(y_test, predictions))\n\n\ndef classification():\n    X, y = make_classification(n_samples=500, n_features=5, n_informative=5,\n                               n_redundant=0, n_repeated=0, n_classes=3,\n                               random_state=1111, class_sep=1.5, )\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1,\n                                                        random_state=1111)\n\n    clf = knn.KNNClassifier(k=5, distance_func=distance.euclidean)\n\n    clf.fit(X_train, y_train)\n    predictions = clf.predict(X_test)\n    print('classification accuracy', accuracy(y_test, predictions))\n\n\nif __name__ == '__main__':\n    regression()\n    classification()\n", "description": "Minimal and clean examples of machine learning algorithms", "file_name": "nearest_neighbors.py", "id": "5d6b59b7f1a5456d20ad1d95bcece65a", "language": "Python", "project_name": "MLAlgorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rushter-MLAlgorithms/rushter-MLAlgorithms-d398777/examples/nearest_neighbors.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:25:48Z", "url": "https://github.com/rushter/MLAlgorithms", "wiki": false}