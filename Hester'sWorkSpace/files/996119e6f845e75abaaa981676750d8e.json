{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n)\n\n\nclass ServingSysIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:[^.]+\\.)?serving-sys\\.com/BurstingPipe/adServer\\.bs\\?.*?&pli=(?P<id>[0-9]+)'\n\n    _TEST = {\n        'url': 'http://bs.serving-sys.com/BurstingPipe/adServer.bs?cn=is&c=23&pl=VAST&pli=5349193&PluID=0&pos=7135&ord=[timestamp]&cim=1?',\n        'info_dict': {\n            'id': '5349193',\n            'title': 'AdAPPter_Hyundai_demo',\n        },\n        'playlist': [{\n            'md5': 'baed851342df6846eb8677a60a011a0f',\n            'info_dict': {\n                'id': '29955898',\n                'ext': 'flv',\n                'title': 'AdAPPter_Hyundai_demo (1)',\n                'duration': 74,\n                'tbr': 1378,\n                'width': 640,\n                'height': 400,\n            },\n        }, {\n            'md5': '979b4da2655c4bc2d81aeb915a8c5014',\n            'info_dict': {\n                'id': '29907998',\n                'ext': 'flv',\n                'title': 'AdAPPter_Hyundai_demo (2)',\n                'duration': 34,\n                'width': 854,\n                'height': 480,\n                'tbr': 516,\n            },\n        }],\n        'params': {\n            'playlistend': 2,\n        },\n        '_skip': 'Blocked in the US [sic]',\n    }\n\n    def _real_extract(self, url):\n        pl_id = self._match_id(url)\n        vast_doc = self._download_xml(url, pl_id)\n\n        title = vast_doc.find('.//AdTitle').text\n        media = vast_doc.find('.//MediaFile').text\n        info_url = self._search_regex(r'&adData=([^&]+)&', media, 'info URL')\n\n        doc = self._download_xml(info_url, pl_id, 'Downloading video info')\n        entries = [{\n            '_type': 'video',\n            'id': a.attrib['id'],\n            'title': '%s (%s)' % (title, a.attrib['assetID']),\n            'url': a.attrib['URL'],\n            'duration': int_or_none(a.attrib.get('length')),\n            'tbr': int_or_none(a.attrib.get('bitrate')),\n            'height': int_or_none(a.attrib.get('height')),\n            'width': int_or_none(a.attrib.get('width')),\n        } for a in doc.findall('.//AdditionalAssets/asset')]\n\n        return {\n            '_type': 'playlist',\n            'id': pl_id,\n            'title': title,\n            'entries': entries,\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n)\n\n\nclass ServingSysIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:[^.]+\\.)?serving-sys\\.com/BurstingPipe/adServer\\.bs\\?.*?&pli=(?P<id>[0-9]+)'\n\n    _TEST = {\n        'url': 'http://bs.serving-sys.com/BurstingPipe/adServer.bs?cn=is&c=23&pl=VAST&pli=5349193&PluID=0&pos=7135&ord=[timestamp]&cim=1?',\n        'info_dict': {\n            'id': '5349193',\n            'title': 'AdAPPter_Hyundai_demo',\n        },\n        'playlist': [{\n            'md5': 'baed851342df6846eb8677a60a011a0f',\n            'info_dict': {\n                'id': '29955898',\n                'ext': 'flv',\n                'title': 'AdAPPter_Hyundai_demo (1)',\n                'duration': 74,\n                'tbr': 1378,\n                'width': 640,\n                'height': 400,\n            },\n        }, {\n            'md5': '979b4da2655c4bc2d81aeb915a8c5014',\n            'info_dict': {\n                'id': '29907998',\n                'ext': 'flv',\n                'title': 'AdAPPter_Hyundai_demo (2)',\n                'duration': 34,\n                'width': 854,\n                'height': 480,\n                'tbr': 516,\n            },\n        }],\n        'params': {\n            'playlistend': 2,\n        },\n        '_skip': 'Blocked in the US [sic]',\n    }\n\n    def _real_extract(self, url):\n        pl_id = self._match_id(url)\n        vast_doc = self._download_xml(url, pl_id)\n\n        title = vast_doc.find('.//AdTitle').text\n        media = vast_doc.find('.//MediaFile').text\n        info_url = self._search_regex(r'&adData=([^&]+)&', media, 'info URL')\n\n        doc = self._download_xml(info_url, pl_id, 'Downloading video info')\n        entries = [{\n            '_type': 'video',\n            'id': a.attrib['id'],\n            'title': '%s (%s)' % (title, a.attrib['assetID']),\n            'url': a.attrib['URL'],\n            'duration': int_or_none(a.attrib.get('length')),\n            'tbr': int_or_none(a.attrib.get('bitrate')),\n            'height': int_or_none(a.attrib.get('height')),\n            'width': int_or_none(a.attrib.get('width')),\n        } for a in doc.findall('.//AdditionalAssets/asset')]\n\n        return {\n            '_type': 'playlist',\n            'id': pl_id,\n            'title': title,\n            'entries': entries,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "servingsys.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/servingsys.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}