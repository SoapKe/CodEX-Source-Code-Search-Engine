{"author": "HelloZeroNet", "code": "import hashlib\nimport os\nimport base64\n\n\ndef sha1sum(file, blocksize=65536):\n    if hasattr(file, \"endswith\"):  \n        file = open(file, \"rb\")\n    hash = hashlib.sha1()\n    for block in iter(lambda: file.read(blocksize), \"\"):\n        hash.update(block)\n    return hash.hexdigest()\n\n\ndef sha512sum(file, blocksize=65536, format=\"hexdigest\"):\n    if hasattr(file, \"endswith\"):  \n        file = open(file, \"rb\")\n    hash = hashlib.sha512()\n    for block in iter(lambda: file.read(blocksize), \"\"):\n        hash.update(block)\n\n    \n    if format == \"hexdigest\":\n        return hash.hexdigest()[0:64]\n    else:\n        return hash.digest()[0:32]\n\n\n\ndef sha256sum(file, blocksize=65536):\n    if hasattr(file, \"endswith\"):  \n        file = open(file, \"rb\")\n    hash = hashlib.sha256()\n    for block in iter(lambda: file.read(blocksize), \"\"):\n        hash.update(block)\n    return hash.hexdigest()\n\n\ndef random(length=64, encoding=\"hex\"):\n    if encoding == \"base64\":  \n        hash = hashlib.sha512(os.urandom(256)).digest()\n        return base64.standard_b64encode(hash).replace(\"+\", \"\").replace(\"/\", \"\").replace(\"=\", \"\")[0:length]\n    else:  # Characters: a-f0-9 (faster)\n        return hashlib.sha512(os.urandom(256)).hexdigest()[0:length]\n\n\n\nclass Sha512t:\n    def __init__(self, data):\n        if data:\n            self.sha512 = hashlib.sha512(data)\n        else:\n            self.sha512 = hashlib.sha512()\n\n    def hexdigest(self):\n        return self.sha512.hexdigest()[0:64]\n\n    def digest(self):\n        return self.sha512.digest()[0:32]\n\n    def update(self, data):\n        return self.sha512.update(data)\n\n\ndef sha512t(data=None):\n    return Sha512t(data)\n", "comments": "  its string open    its string open    truncate 256bits good enough    its string open    characters  a za z0 9    characters  f0 9 (faster)    sha512 truncated 256bits ", "content": "import hashlib\nimport os\nimport base64\n\n\ndef sha1sum(file, blocksize=65536):\n    if hasattr(file, \"endswith\"):  # Its a string open it\n        file = open(file, \"rb\")\n    hash = hashlib.sha1()\n    for block in iter(lambda: file.read(blocksize), \"\"):\n        hash.update(block)\n    return hash.hexdigest()\n\n\ndef sha512sum(file, blocksize=65536, format=\"hexdigest\"):\n    if hasattr(file, \"endswith\"):  # Its a string open it\n        file = open(file, \"rb\")\n    hash = hashlib.sha512()\n    for block in iter(lambda: file.read(blocksize), \"\"):\n        hash.update(block)\n\n    # Truncate to 256bits is good enough\n    if format == \"hexdigest\":\n        return hash.hexdigest()[0:64]\n    else:\n        return hash.digest()[0:32]\n\n\n\ndef sha256sum(file, blocksize=65536):\n    if hasattr(file, \"endswith\"):  # Its a string open it\n        file = open(file, \"rb\")\n    hash = hashlib.sha256()\n    for block in iter(lambda: file.read(blocksize), \"\"):\n        hash.update(block)\n    return hash.hexdigest()\n\n\ndef random(length=64, encoding=\"hex\"):\n    if encoding == \"base64\":  # Characters: A-Za-z0-9\n        hash = hashlib.sha512(os.urandom(256)).digest()\n        return base64.standard_b64encode(hash).replace(\"+\", \"\").replace(\"/\", \"\").replace(\"=\", \"\")[0:length]\n    else:  # Characters: a-f0-9 (faster)\n        return hashlib.sha512(os.urandom(256)).hexdigest()[0:length]\n\n\n# Sha512 truncated to 256bits\nclass Sha512t:\n    def __init__(self, data):\n        if data:\n            self.sha512 = hashlib.sha512(data)\n        else:\n            self.sha512 = hashlib.sha512()\n\n    def hexdigest(self):\n        return self.sha512.hexdigest()[0:64]\n\n    def digest(self):\n        return self.sha512.digest()[0:32]\n\n    def update(self, data):\n        return self.sha512.update(data)\n\n\ndef sha512t(data=None):\n    return Sha512t(data)\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "CryptHash.py", "id": "273f756a1f486c4add78ee2dd2f7c15e", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/Crypt/CryptHash.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}