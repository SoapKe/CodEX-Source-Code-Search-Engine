{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlencode,\n    compat_urlparse,\n)\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    sanitized_Request,\n)\n\n\nclass ViddlerIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?viddler\\.com/(?:v|embed|player)/(?P<id>[a-z0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.viddler.com/v/43903784',\n        'md5': '9eee21161d2c7f5b39690c3e325fab2f',\n        'info_dict': {\n            'id': '43903784',\n            'ext': 'mov',\n            'title': 'Video Made Easy',\n            'description': 'md5:6a697ebd844ff3093bd2e82c37b409cd',\n            'uploader': 'viddler',\n            'timestamp': 1335371429,\n            'upload_date': '20120425',\n            'duration': 100.89,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'view_count': int,\n            'comment_count': int,\n            'categories': ['video content', 'high quality video', 'video made easy', 'how to produce video with limited resources', 'viddler'],\n        }\n    }, {\n        'url': 'http://www.viddler.com/v/4d03aad9/',\n        'md5': 'f12c5a7fa839c47a79363bfdf69404fb',\n        'info_dict': {\n            'id': '4d03aad9',\n            'ext': 'ts',\n            'title': 'WALL-TO-GORTAT',\n            'upload_date': '20150126',\n            'uploader': 'deadspin',\n            'timestamp': 1422285291,\n            'view_count': int,\n            'comment_count': int,\n        }\n    }, {\n        'url': 'http://www.viddler.com/player/221ebbbd/0/',\n        'md5': '740511f61d3d1bb71dc14a0fe01a1c10',\n        'info_dict': {\n            'id': '221ebbbd',\n            'ext': 'mov',\n            'title': 'LETeens-Grammar-snack-third-conditional',\n            'description': ' ',\n            'upload_date': '20140929',\n            'uploader': 'BCLETeens',\n            'timestamp': 1411997190,\n            'view_count': int,\n            'comment_count': int,\n        }\n    }, {\n        \n        'url': 'http://www.viddler.com/v/890c0985?secret=34051570',\n        'info_dict': {\n            'id': '890c0985',\n            'ext': 'mp4',\n            'title': 'Complete Property Training - Traineeships',\n            'description': ' ',\n            'upload_date': '20130606',\n            'uploader': 'TiffanyBowtell',\n            'timestamp': 1370496993,\n            'view_count': int,\n            'comment_count': int,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        query = {\n            'video_id': video_id,\n            'key': 'v0vhrt7bg2xq1vyxhkct',\n        }\n\n        qs = compat_urlparse.parse_qs(compat_urlparse.urlparse(url).query)\n        secret = qs.get('secret', [None])[0]\n        if secret:\n            query['secret'] = secret\n\n        headers = {'Referer': 'http://static.cdn-ec.viddler.com/js/arpeggio/v2/embed.html'}\n        request = sanitized_Request(\n            'http://api.viddler.com/api/v2/viddler.videos.getPlaybackDetails.json?%s'\n            % compat_urllib_parse_urlencode(query), None, headers)\n        data = self._download_json(request, video_id)['video']\n\n        formats = []\n        for filed in data['files']:\n            if filed.get('status', 'ready') != 'ready':\n                continue\n            format_id = filed.get('profile_id') or filed['profile_name']\n            f = {\n                'format_id': format_id,\n                'format_note': filed['profile_name'],\n                'url': self._proto_relative_url(filed['url']),\n                'width': int_or_none(filed.get('width')),\n                'height': int_or_none(filed.get('height')),\n                'filesize': int_or_none(filed.get('size')),\n                'ext': filed.get('ext'),\n                'source_preference': -1,\n            }\n            formats.append(f)\n\n            if filed.get('cdn_url'):\n                f = f.copy()\n                f['url'] = self._proto_relative_url(filed['cdn_url'], 'http:')\n                f['format_id'] = format_id + '-cdn'\n                f['source_preference'] = 1\n                formats.append(f)\n\n            if filed.get('html5_video_source'):\n                f = f.copy()\n                f['url'] = self._proto_relative_url(filed['html5_video_source'])\n                f['format_id'] = format_id + '-html5'\n                f['source_preference'] = 0\n                formats.append(f)\n        self._sort_formats(formats)\n\n        categories = [\n            t.get('text') for t in data.get('tags', []) if 'text' in t]\n\n        return {\n            'id': video_id,\n            'title': data['title'],\n            'formats': formats,\n            'description': data.get('description'),\n            'timestamp': int_or_none(data.get('upload_time')),\n            'thumbnail': self._proto_relative_url(data.get('thumbnail_url')),\n            'uploader': data.get('author'),\n            'duration': float_or_none(data.get('length')),\n            'view_count': int_or_none(data.get('view_count')),\n            'comment_count': int_or_none(data.get('comment_count')),\n            'categories': categories,\n        }\n", "comments": "# secret protected\n", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlencode,\n    compat_urlparse,\n)\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    sanitized_Request,\n)\n\n\nclass ViddlerIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?viddler\\.com/(?:v|embed|player)/(?P<id>[a-z0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.viddler.com/v/43903784',\n        'md5': '9eee21161d2c7f5b39690c3e325fab2f',\n        'info_dict': {\n            'id': '43903784',\n            'ext': 'mov',\n            'title': 'Video Made Easy',\n            'description': 'md5:6a697ebd844ff3093bd2e82c37b409cd',\n            'uploader': 'viddler',\n            'timestamp': 1335371429,\n            'upload_date': '20120425',\n            'duration': 100.89,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'view_count': int,\n            'comment_count': int,\n            'categories': ['video content', 'high quality video', 'video made easy', 'how to produce video with limited resources', 'viddler'],\n        }\n    }, {\n        'url': 'http://www.viddler.com/v/4d03aad9/',\n        'md5': 'f12c5a7fa839c47a79363bfdf69404fb',\n        'info_dict': {\n            'id': '4d03aad9',\n            'ext': 'ts',\n            'title': 'WALL-TO-GORTAT',\n            'upload_date': '20150126',\n            'uploader': 'deadspin',\n            'timestamp': 1422285291,\n            'view_count': int,\n            'comment_count': int,\n        }\n    }, {\n        'url': 'http://www.viddler.com/player/221ebbbd/0/',\n        'md5': '740511f61d3d1bb71dc14a0fe01a1c10',\n        'info_dict': {\n            'id': '221ebbbd',\n            'ext': 'mov',\n            'title': 'LETeens-Grammar-snack-third-conditional',\n            'description': ' ',\n            'upload_date': '20140929',\n            'uploader': 'BCLETeens',\n            'timestamp': 1411997190,\n            'view_count': int,\n            'comment_count': int,\n        }\n    }, {\n        # secret protected\n        'url': 'http://www.viddler.com/v/890c0985?secret=34051570',\n        'info_dict': {\n            'id': '890c0985',\n            'ext': 'mp4',\n            'title': 'Complete Property Training - Traineeships',\n            'description': ' ',\n            'upload_date': '20130606',\n            'uploader': 'TiffanyBowtell',\n            'timestamp': 1370496993,\n            'view_count': int,\n            'comment_count': int,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        query = {\n            'video_id': video_id,\n            'key': 'v0vhrt7bg2xq1vyxhkct',\n        }\n\n        qs = compat_urlparse.parse_qs(compat_urlparse.urlparse(url).query)\n        secret = qs.get('secret', [None])[0]\n        if secret:\n            query['secret'] = secret\n\n        headers = {'Referer': 'http://static.cdn-ec.viddler.com/js/arpeggio/v2/embed.html'}\n        request = sanitized_Request(\n            'http://api.viddler.com/api/v2/viddler.videos.getPlaybackDetails.json?%s'\n            % compat_urllib_parse_urlencode(query), None, headers)\n        data = self._download_json(request, video_id)['video']\n\n        formats = []\n        for filed in data['files']:\n            if filed.get('status', 'ready') != 'ready':\n                continue\n            format_id = filed.get('profile_id') or filed['profile_name']\n            f = {\n                'format_id': format_id,\n                'format_note': filed['profile_name'],\n                'url': self._proto_relative_url(filed['url']),\n                'width': int_or_none(filed.get('width')),\n                'height': int_or_none(filed.get('height')),\n                'filesize': int_or_none(filed.get('size')),\n                'ext': filed.get('ext'),\n                'source_preference': -1,\n            }\n            formats.append(f)\n\n            if filed.get('cdn_url'):\n                f = f.copy()\n                f['url'] = self._proto_relative_url(filed['cdn_url'], 'http:')\n                f['format_id'] = format_id + '-cdn'\n                f['source_preference'] = 1\n                formats.append(f)\n\n            if filed.get('html5_video_source'):\n                f = f.copy()\n                f['url'] = self._proto_relative_url(filed['html5_video_source'])\n                f['format_id'] = format_id + '-html5'\n                f['source_preference'] = 0\n                formats.append(f)\n        self._sort_formats(formats)\n\n        categories = [\n            t.get('text') for t in data.get('tags', []) if 'text' in t]\n\n        return {\n            'id': video_id,\n            'title': data['title'],\n            'formats': formats,\n            'description': data.get('description'),\n            'timestamp': int_or_none(data.get('upload_time')),\n            'thumbnail': self._proto_relative_url(data.get('thumbnail_url')),\n            'uploader': data.get('author'),\n            'duration': float_or_none(data.get('length')),\n            'view_count': int_or_none(data.get('view_count')),\n            'comment_count': int_or_none(data.get('comment_count')),\n            'categories': categories,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "viddler.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/viddler.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}