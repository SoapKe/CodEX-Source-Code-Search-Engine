{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n (c) 2013, Balazs Pocze <banyek@gawker.com>\n\n\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: mysql_replication\n\nshort_description: Manage MySQL replication\ndescription:\n    - Manages MySQL server replication, slave, master status get and change master host.\nversion_added: \"1.3\"\nauthor: \"Balazs Pocze (@banyek)\"\noptions:\n    mode:\n        description:\n            - module operating mode. Could be getslave (SHOW SLAVE STATUS), getmaster (SHOW MASTER STATUS), changemaster (CHANGE MASTER TO), startslave\n              (START SLAVE), stopslave (STOP SLAVE), resetslave (RESET SLAVE), resetslaveall (RESET SLAVE ALL)\n        choices:\n            - getslave\n            - getmaster\n            - changemaster\n            - stopslave\n            - startslave\n            - resetslave\n            - resetslaveall\n        default: getslave\n    master_host:\n        description:\n            - same as mysql variable\n    master_user:\n        description:\n            - same as mysql variable\n    master_password:\n        description:\n            - same as mysql variable\n    master_port:\n        description:\n            - same as mysql variable\n    master_connect_retry:\n        description:\n            - same as mysql variable\n    master_log_file:\n        description:\n            - same as mysql variable\n    master_log_pos:\n        description:\n            - same as mysql variable\n    relay_log_file:\n        description:\n            - same as mysql variable\n    relay_log_pos:\n        description:\n            - same as mysql variable\n    master_ssl:\n        description:\n            - same as mysql variable\n        choices: [ 0, 1 ]\n    master_ssl_ca:\n        description:\n            - same as mysql variable\n    master_ssl_capath:\n        description:\n            - same as mysql variable\n    master_ssl_cert:\n        description:\n            - same as mysql variable\n    master_ssl_key:\n        description:\n            - same as mysql variable\n    master_ssl_cipher:\n        description:\n            - same as mysql variable\n    master_auto_position:\n        description:\n            - does the host uses GTID based replication or not\n        version_added: \"2.0\"\n\nextends_documentation_fragment: mysql\n'''\n\nEXAMPLES = '''\n Stop mysql slave thread\n- mysql_replication:\n    mode: stopslave\n\n Get master binlog file name and binlog position\n- mysql_replication:\n    mode: getmaster\n\n Change master to master server 192.0.2.1 and use binary log 'mysql-bin.000009' with position 4578\n- mysql_replication:\n    mode: changemaster\n    master_host: 192.0.2.1\n    master_log_file: mysql-bin.000009\n    master_log_pos: 4578\n\n Check slave status using port 3308\n- mysql_replication:\n    mode: getslave\n    login_host: ansible.example.com\n    login_port: 3308\n'''\n\nimport os\nimport warnings\n\ntry:\n    import MySQLdb\nexcept ImportError:\n    mysqldb_found = False\nelse:\n    mysqldb_found = True\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.mysql import mysql_connect\nfrom ansible.module_utils._text import to_native\n\n\ndef get_master_status(cursor):\n    cursor.execute(\"SHOW MASTER STATUS\")\n    masterstatus = cursor.fetchone()\n    return masterstatus\n\n\ndef get_slave_status(cursor):\n    cursor.execute(\"SHOW SLAVE STATUS\")\n    slavestatus = cursor.fetchone()\n    return slavestatus\n\n\ndef stop_slave(cursor):\n    try:\n        cursor.execute(\"STOP SLAVE\")\n        stopped = True\n    except:\n        stopped = False\n    return stopped\n\n\ndef reset_slave(cursor):\n    try:\n        cursor.execute(\"RESET SLAVE\")\n        reset = True\n    except:\n        reset = False\n    return reset\n\n\ndef reset_slave_all(cursor):\n    try:\n        cursor.execute(\"RESET SLAVE ALL\")\n        reset = True\n    except:\n        reset = False\n    return reset\n\n\ndef start_slave(cursor):\n    try:\n        cursor.execute(\"START SLAVE\")\n        started = True\n    except:\n        started = False\n    return started\n\n\ndef changemaster(cursor, chm, chm_params):\n    sql_param = \",\".join(chm)\n    query = 'CHANGE MASTER TO %s' % sql_param\n    cursor.execute(query, chm_params)\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            login_user=dict(default=None),\n            login_password=dict(default=None, no_log=True),\n            login_host=dict(default=\"localhost\"),\n            login_port=dict(default=3306, type='int'),\n            login_unix_socket=dict(default=None),\n            mode=dict(default=\"getslave\", choices=[\"getmaster\", \"getslave\", \"changemaster\", \"stopslave\", \"startslave\", \"resetslave\", \"resetslaveall\"]),\n            master_auto_position=dict(default=False, type='bool'),\n            master_host=dict(default=None),\n            master_user=dict(default=None),\n            master_password=dict(default=None, no_log=True),\n            master_port=dict(default=None, type='int'),\n            master_connect_retry=dict(default=None, type='int'),\n            master_log_file=dict(default=None),\n            master_log_pos=dict(default=None, type='int'),\n            relay_log_file=dict(default=None),\n            relay_log_pos=dict(default=None, type='int'),\n            master_ssl=dict(default=False, type='bool'),\n            master_ssl_ca=dict(default=None),\n            master_ssl_capath=dict(default=None),\n            master_ssl_cert=dict(default=None),\n            master_ssl_key=dict(default=None),\n            master_ssl_cipher=dict(default=None),\n            connect_timeout=dict(default=30, type='int'),\n            config_file=dict(default=\"~/.my.cnf\", type='path'),\n            ssl_cert=dict(default=None),\n            ssl_key=dict(default=None),\n            ssl_ca=dict(default=None),\n        )\n    )\n    mode = module.params[\"mode\"]\n    master_host = module.params[\"master_host\"]\n    master_user = module.params[\"master_user\"]\n    master_password = module.params[\"master_password\"]\n    master_port = module.params[\"master_port\"]\n    master_connect_retry = module.params[\"master_connect_retry\"]\n    master_log_file = module.params[\"master_log_file\"]\n    master_log_pos = module.params[\"master_log_pos\"]\n    relay_log_file = module.params[\"relay_log_file\"]\n    relay_log_pos = module.params[\"relay_log_pos\"]\n    master_ssl = module.params[\"master_ssl\"]\n    master_ssl_ca = module.params[\"master_ssl_ca\"]\n    master_ssl_capath = module.params[\"master_ssl_capath\"]\n    master_ssl_cert = module.params[\"master_ssl_cert\"]\n    master_ssl_key = module.params[\"master_ssl_key\"]\n    master_ssl_cipher = module.params[\"master_ssl_cipher\"]\n    master_auto_position = module.params[\"master_auto_position\"]\n    ssl_cert = module.params[\"ssl_cert\"]\n    ssl_key = module.params[\"ssl_key\"]\n    ssl_ca = module.params[\"ssl_ca\"]\n    connect_timeout = module.params['connect_timeout']\n    config_file = module.params['config_file']\n\n    if not mysqldb_found:\n        module.fail_json(msg=\"The MySQL-python module is required.\")\n    else:\n        warnings.filterwarnings('error', category=MySQLdb.Warning)\n\n    login_password = module.params[\"login_password\"]\n    login_user = module.params[\"login_user\"]\n\n    try:\n        cursor = mysql_connect(module, login_user, login_password, config_file, ssl_cert, ssl_key, ssl_ca, None, 'MySQLdb.cursors.DictCursor',\n                               connect_timeout=connect_timeout)\n    except Exception as e:\n        if os.path.exists(config_file):\n            module.fail_json(msg=\"unable to connect to database, check login_user and login_password are correct or %s has the credentials. \"\n                                 \"Exception message: %s\" % (config_file, to_native(e)))\n        else:\n            module.fail_json(msg=\"unable to find %s. Exception message: %s\" % (config_file, to_native(e)))\n\n    if mode in \"getmaster\":\n        status = get_master_status(cursor)\n        if not isinstance(status, dict):\n            status = dict(Is_Master=False, msg=\"Server is not configured as mysql master\")\n        else:\n            status['Is_Master'] = True\n        module.exit_json(**status)\n\n    elif mode in \"getslave\":\n        status = get_slave_status(cursor)\n        if not isinstance(status, dict):\n            status = dict(Is_Slave=False, msg=\"Server is not configured as mysql slave\")\n        else:\n            status['Is_Slave'] = True\n        module.exit_json(**status)\n\n    elif mode in \"changemaster\":\n        chm = []\n        chm_params = {}\n        result = {}\n        if master_host:\n            chm.append(\"MASTER_HOST=%(master_host)s\")\n            chm_params['master_host'] = master_host\n        if master_user:\n            chm.append(\"MASTER_USER=%(master_user)s\")\n            chm_params['master_user'] = master_user\n        if master_password:\n            chm.append(\"MASTER_PASSWORD=%(master_password)s\")\n            chm_params['master_password'] = master_password\n        if master_port is not None:\n            chm.append(\"MASTER_PORT=%(master_port)s\")\n            chm_params['master_port'] = master_port\n        if master_connect_retry is not None:\n            chm.append(\"MASTER_CONNECT_RETRY=%(master_connect_retry)s\")\n            chm_params['master_connect_retry'] = master_connect_retry\n        if master_log_file:\n            chm.append(\"MASTER_LOG_FILE=%(master_log_file)s\")\n            chm_params['master_log_file'] = master_log_file\n        if master_log_pos is not None:\n            chm.append(\"MASTER_LOG_POS=%(master_log_pos)s\")\n            chm_params['master_log_pos'] = master_log_pos\n        if relay_log_file:\n            chm.append(\"RELAY_LOG_FILE=%(relay_log_file)s\")\n            chm_params['relay_log_file'] = relay_log_file\n        if relay_log_pos is not None:\n            chm.append(\"RELAY_LOG_POS=%(relay_log_pos)s\")\n            chm_params['relay_log_pos'] = relay_log_pos\n        if master_ssl:\n            chm.append(\"MASTER_SSL=1\")\n        if master_ssl_ca:\n            chm.append(\"MASTER_SSL_CA=%(master_ssl_ca)s\")\n            chm_params['master_ssl_ca'] = master_ssl_ca\n        if master_ssl_capath:\n            chm.append(\"MASTER_SSL_CAPATH=%(master_ssl_capath)s\")\n            chm_params['master_ssl_capath'] = master_ssl_capath\n        if master_ssl_cert:\n            chm.append(\"MASTER_SSL_CERT=%(master_ssl_cert)s\")\n            chm_params['master_ssl_cert'] = master_ssl_cert\n        if master_ssl_key:\n            chm.append(\"MASTER_SSL_KEY=%(master_ssl_key)s\")\n            chm_params['master_ssl_key'] = master_ssl_key\n        if master_ssl_cipher:\n            chm.append(\"MASTER_SSL_CIPHER=%(master_ssl_cipher)s\")\n            chm_params['master_ssl_cipher'] = master_ssl_cipher\n        if master_auto_position:\n            chm.append(\"MASTER_AUTO_POSITION = 1\")\n        try:\n            changemaster(cursor, chm, chm_params)\n        except MySQLdb.Warning as e:\n            result['warning'] = to_native(e)\n        except Exception as e:\n            module.fail_json(msg='%s. Query == CHANGE MASTER TO %s' % (to_native(e), chm))\n        result['changed'] = True\n        module.exit_json(**result)\n    elif mode in \"startslave\":\n        started = start_slave(cursor)\n        if started is True:\n            module.exit_json(msg=\"Slave started \", changed=True)\n        else:\n            module.exit_json(msg=\"Slave already started (Or cannot be started)\", changed=False)\n    elif mode in \"stopslave\":\n        stopped = stop_slave(cursor)\n        if stopped is True:\n            module.exit_json(msg=\"Slave stopped\", changed=True)\n        else:\n            module.exit_json(msg=\"Slave already stopped\", changed=False)\n    elif mode in \"resetslave\":\n        reset = reset_slave(cursor)\n        if reset is True:\n            module.exit_json(msg=\"Slave reset\", changed=True)\n        else:\n            module.exit_json(msg=\"Slave already reset\", changed=False)\n    elif mode in \"resetslaveall\":\n        reset = reset_slave_all(cursor)\n        if reset is True:\n            module.exit_json(msg=\"Slave reset\", changed=True)\n        else:\n            module.exit_json(msg=\"Slave already reset\", changed=False)\n\n    warnings.simplefilter(\"ignore\")\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  mysql replication  short description  manage mysql replication description        manages mysql server replication  slave  master status get change master host  version added   1 3  author   balazs pocze ( banyek)  options      mode          description                module operating mode  could getslave (show slave status)  getmaster (show master status)  changemaster (change master to)  startslave               (start slave)  stopslave (stop slave)  resetslave (reset slave)  resetslaveall (reset slave all)         choices                getslave               getmaster               changemaster               stopslave               startslave               resetslave               resetslaveall         default  getslave     master host          description                mysql variable     master user          description                mysql variable     master password          description                mysql variable     master port          description                mysql variable     master connect retry          description                mysql variable     master log file          description                mysql variable     master log pos          description                mysql variable     relay log file          description                mysql variable     relay log pos          description                mysql variable     master ssl          description                mysql variable         choices    0  1       master ssl ca          description                mysql variable     master ssl capath          description                mysql variable     master ssl cert          description                mysql variable     master ssl key          description                mysql variable     master ssl cipher          description                mysql variable     master auto position          description                host uses gtid based replication         version added   2 0   extends documentation fragment  mysql      examples         stop mysql slave thread   mysql replication      mode  stopslave    get master binlog file name binlog position   mysql replication      mode  getmaster    change master master server 192 0 2 1 use binary log  mysql bin 000009  position 4578   mysql replication      mode  changemaster     master host  192 0 2 1     master log file  mysql bin 000009     master log pos  4578    check slave status using port 3308   mysql replication      mode  getslave     login host  ansible example com     login port  3308         usr bin python        coding  utf 8        (c) 2013  balazs pocze  banyek gawker com     certain parts taken mark theunissen mysqldb module       gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    stop mysql slave thread    get master binlog file name binlog position    change master master server 192 0 2 1 use binary log  mysql bin 000009  position 4578    check slave status using port 3308 ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2013, Balazs Pocze <banyek@gawker.com>\n# Certain parts are taken from Mark Theunissen's mysqldb module\n#\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: mysql_replication\n\nshort_description: Manage MySQL replication\ndescription:\n    - Manages MySQL server replication, slave, master status get and change master host.\nversion_added: \"1.3\"\nauthor: \"Balazs Pocze (@banyek)\"\noptions:\n    mode:\n        description:\n            - module operating mode. Could be getslave (SHOW SLAVE STATUS), getmaster (SHOW MASTER STATUS), changemaster (CHANGE MASTER TO), startslave\n              (START SLAVE), stopslave (STOP SLAVE), resetslave (RESET SLAVE), resetslaveall (RESET SLAVE ALL)\n        choices:\n            - getslave\n            - getmaster\n            - changemaster\n            - stopslave\n            - startslave\n            - resetslave\n            - resetslaveall\n        default: getslave\n    master_host:\n        description:\n            - same as mysql variable\n    master_user:\n        description:\n            - same as mysql variable\n    master_password:\n        description:\n            - same as mysql variable\n    master_port:\n        description:\n            - same as mysql variable\n    master_connect_retry:\n        description:\n            - same as mysql variable\n    master_log_file:\n        description:\n            - same as mysql variable\n    master_log_pos:\n        description:\n            - same as mysql variable\n    relay_log_file:\n        description:\n            - same as mysql variable\n    relay_log_pos:\n        description:\n            - same as mysql variable\n    master_ssl:\n        description:\n            - same as mysql variable\n        choices: [ 0, 1 ]\n    master_ssl_ca:\n        description:\n            - same as mysql variable\n    master_ssl_capath:\n        description:\n            - same as mysql variable\n    master_ssl_cert:\n        description:\n            - same as mysql variable\n    master_ssl_key:\n        description:\n            - same as mysql variable\n    master_ssl_cipher:\n        description:\n            - same as mysql variable\n    master_auto_position:\n        description:\n            - does the host uses GTID based replication or not\n        version_added: \"2.0\"\n\nextends_documentation_fragment: mysql\n'''\n\nEXAMPLES = '''\n# Stop mysql slave thread\n- mysql_replication:\n    mode: stopslave\n\n# Get master binlog file name and binlog position\n- mysql_replication:\n    mode: getmaster\n\n# Change master to master server 192.0.2.1 and use binary log 'mysql-bin.000009' with position 4578\n- mysql_replication:\n    mode: changemaster\n    master_host: 192.0.2.1\n    master_log_file: mysql-bin.000009\n    master_log_pos: 4578\n\n# Check slave status using port 3308\n- mysql_replication:\n    mode: getslave\n    login_host: ansible.example.com\n    login_port: 3308\n'''\n\nimport os\nimport warnings\n\ntry:\n    import MySQLdb\nexcept ImportError:\n    mysqldb_found = False\nelse:\n    mysqldb_found = True\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.mysql import mysql_connect\nfrom ansible.module_utils._text import to_native\n\n\ndef get_master_status(cursor):\n    cursor.execute(\"SHOW MASTER STATUS\")\n    masterstatus = cursor.fetchone()\n    return masterstatus\n\n\ndef get_slave_status(cursor):\n    cursor.execute(\"SHOW SLAVE STATUS\")\n    slavestatus = cursor.fetchone()\n    return slavestatus\n\n\ndef stop_slave(cursor):\n    try:\n        cursor.execute(\"STOP SLAVE\")\n        stopped = True\n    except:\n        stopped = False\n    return stopped\n\n\ndef reset_slave(cursor):\n    try:\n        cursor.execute(\"RESET SLAVE\")\n        reset = True\n    except:\n        reset = False\n    return reset\n\n\ndef reset_slave_all(cursor):\n    try:\n        cursor.execute(\"RESET SLAVE ALL\")\n        reset = True\n    except:\n        reset = False\n    return reset\n\n\ndef start_slave(cursor):\n    try:\n        cursor.execute(\"START SLAVE\")\n        started = True\n    except:\n        started = False\n    return started\n\n\ndef changemaster(cursor, chm, chm_params):\n    sql_param = \",\".join(chm)\n    query = 'CHANGE MASTER TO %s' % sql_param\n    cursor.execute(query, chm_params)\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            login_user=dict(default=None),\n            login_password=dict(default=None, no_log=True),\n            login_host=dict(default=\"localhost\"),\n            login_port=dict(default=3306, type='int'),\n            login_unix_socket=dict(default=None),\n            mode=dict(default=\"getslave\", choices=[\"getmaster\", \"getslave\", \"changemaster\", \"stopslave\", \"startslave\", \"resetslave\", \"resetslaveall\"]),\n            master_auto_position=dict(default=False, type='bool'),\n            master_host=dict(default=None),\n            master_user=dict(default=None),\n            master_password=dict(default=None, no_log=True),\n            master_port=dict(default=None, type='int'),\n            master_connect_retry=dict(default=None, type='int'),\n            master_log_file=dict(default=None),\n            master_log_pos=dict(default=None, type='int'),\n            relay_log_file=dict(default=None),\n            relay_log_pos=dict(default=None, type='int'),\n            master_ssl=dict(default=False, type='bool'),\n            master_ssl_ca=dict(default=None),\n            master_ssl_capath=dict(default=None),\n            master_ssl_cert=dict(default=None),\n            master_ssl_key=dict(default=None),\n            master_ssl_cipher=dict(default=None),\n            connect_timeout=dict(default=30, type='int'),\n            config_file=dict(default=\"~/.my.cnf\", type='path'),\n            ssl_cert=dict(default=None),\n            ssl_key=dict(default=None),\n            ssl_ca=dict(default=None),\n        )\n    )\n    mode = module.params[\"mode\"]\n    master_host = module.params[\"master_host\"]\n    master_user = module.params[\"master_user\"]\n    master_password = module.params[\"master_password\"]\n    master_port = module.params[\"master_port\"]\n    master_connect_retry = module.params[\"master_connect_retry\"]\n    master_log_file = module.params[\"master_log_file\"]\n    master_log_pos = module.params[\"master_log_pos\"]\n    relay_log_file = module.params[\"relay_log_file\"]\n    relay_log_pos = module.params[\"relay_log_pos\"]\n    master_ssl = module.params[\"master_ssl\"]\n    master_ssl_ca = module.params[\"master_ssl_ca\"]\n    master_ssl_capath = module.params[\"master_ssl_capath\"]\n    master_ssl_cert = module.params[\"master_ssl_cert\"]\n    master_ssl_key = module.params[\"master_ssl_key\"]\n    master_ssl_cipher = module.params[\"master_ssl_cipher\"]\n    master_auto_position = module.params[\"master_auto_position\"]\n    ssl_cert = module.params[\"ssl_cert\"]\n    ssl_key = module.params[\"ssl_key\"]\n    ssl_ca = module.params[\"ssl_ca\"]\n    connect_timeout = module.params['connect_timeout']\n    config_file = module.params['config_file']\n\n    if not mysqldb_found:\n        module.fail_json(msg=\"The MySQL-python module is required.\")\n    else:\n        warnings.filterwarnings('error', category=MySQLdb.Warning)\n\n    login_password = module.params[\"login_password\"]\n    login_user = module.params[\"login_user\"]\n\n    try:\n        cursor = mysql_connect(module, login_user, login_password, config_file, ssl_cert, ssl_key, ssl_ca, None, 'MySQLdb.cursors.DictCursor',\n                               connect_timeout=connect_timeout)\n    except Exception as e:\n        if os.path.exists(config_file):\n            module.fail_json(msg=\"unable to connect to database, check login_user and login_password are correct or %s has the credentials. \"\n                                 \"Exception message: %s\" % (config_file, to_native(e)))\n        else:\n            module.fail_json(msg=\"unable to find %s. Exception message: %s\" % (config_file, to_native(e)))\n\n    if mode in \"getmaster\":\n        status = get_master_status(cursor)\n        if not isinstance(status, dict):\n            status = dict(Is_Master=False, msg=\"Server is not configured as mysql master\")\n        else:\n            status['Is_Master'] = True\n        module.exit_json(**status)\n\n    elif mode in \"getslave\":\n        status = get_slave_status(cursor)\n        if not isinstance(status, dict):\n            status = dict(Is_Slave=False, msg=\"Server is not configured as mysql slave\")\n        else:\n            status['Is_Slave'] = True\n        module.exit_json(**status)\n\n    elif mode in \"changemaster\":\n        chm = []\n        chm_params = {}\n        result = {}\n        if master_host:\n            chm.append(\"MASTER_HOST=%(master_host)s\")\n            chm_params['master_host'] = master_host\n        if master_user:\n            chm.append(\"MASTER_USER=%(master_user)s\")\n            chm_params['master_user'] = master_user\n        if master_password:\n            chm.append(\"MASTER_PASSWORD=%(master_password)s\")\n            chm_params['master_password'] = master_password\n        if master_port is not None:\n            chm.append(\"MASTER_PORT=%(master_port)s\")\n            chm_params['master_port'] = master_port\n        if master_connect_retry is not None:\n            chm.append(\"MASTER_CONNECT_RETRY=%(master_connect_retry)s\")\n            chm_params['master_connect_retry'] = master_connect_retry\n        if master_log_file:\n            chm.append(\"MASTER_LOG_FILE=%(master_log_file)s\")\n            chm_params['master_log_file'] = master_log_file\n        if master_log_pos is not None:\n            chm.append(\"MASTER_LOG_POS=%(master_log_pos)s\")\n            chm_params['master_log_pos'] = master_log_pos\n        if relay_log_file:\n            chm.append(\"RELAY_LOG_FILE=%(relay_log_file)s\")\n            chm_params['relay_log_file'] = relay_log_file\n        if relay_log_pos is not None:\n            chm.append(\"RELAY_LOG_POS=%(relay_log_pos)s\")\n            chm_params['relay_log_pos'] = relay_log_pos\n        if master_ssl:\n            chm.append(\"MASTER_SSL=1\")\n        if master_ssl_ca:\n            chm.append(\"MASTER_SSL_CA=%(master_ssl_ca)s\")\n            chm_params['master_ssl_ca'] = master_ssl_ca\n        if master_ssl_capath:\n            chm.append(\"MASTER_SSL_CAPATH=%(master_ssl_capath)s\")\n            chm_params['master_ssl_capath'] = master_ssl_capath\n        if master_ssl_cert:\n            chm.append(\"MASTER_SSL_CERT=%(master_ssl_cert)s\")\n            chm_params['master_ssl_cert'] = master_ssl_cert\n        if master_ssl_key:\n            chm.append(\"MASTER_SSL_KEY=%(master_ssl_key)s\")\n            chm_params['master_ssl_key'] = master_ssl_key\n        if master_ssl_cipher:\n            chm.append(\"MASTER_SSL_CIPHER=%(master_ssl_cipher)s\")\n            chm_params['master_ssl_cipher'] = master_ssl_cipher\n        if master_auto_position:\n            chm.append(\"MASTER_AUTO_POSITION = 1\")\n        try:\n            changemaster(cursor, chm, chm_params)\n        except MySQLdb.Warning as e:\n            result['warning'] = to_native(e)\n        except Exception as e:\n            module.fail_json(msg='%s. Query == CHANGE MASTER TO %s' % (to_native(e), chm))\n        result['changed'] = True\n        module.exit_json(**result)\n    elif mode in \"startslave\":\n        started = start_slave(cursor)\n        if started is True:\n            module.exit_json(msg=\"Slave started \", changed=True)\n        else:\n            module.exit_json(msg=\"Slave already started (Or cannot be started)\", changed=False)\n    elif mode in \"stopslave\":\n        stopped = stop_slave(cursor)\n        if stopped is True:\n            module.exit_json(msg=\"Slave stopped\", changed=True)\n        else:\n            module.exit_json(msg=\"Slave already stopped\", changed=False)\n    elif mode in \"resetslave\":\n        reset = reset_slave(cursor)\n        if reset is True:\n            module.exit_json(msg=\"Slave reset\", changed=True)\n        else:\n            module.exit_json(msg=\"Slave already reset\", changed=False)\n    elif mode in \"resetslaveall\":\n        reset = reset_slave_all(cursor)\n        if reset is True:\n            module.exit_json(msg=\"Slave reset\", changed=True)\n        else:\n            module.exit_json(msg=\"Slave already reset\", changed=False)\n\n    warnings.simplefilter(\"ignore\")\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "mysql_replication.py", "id": "466c71e4abad6f196b05b06ac0955cef", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/database/mysql/mysql_replication.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}