{"author": "keon", "code": "def merge_sort(arr):\n    \"\"\" Merge Sort\n        Complexity: O(n log(n))\n    \"\"\"\n    \n    if len(arr)<= 1:\n        return arr\n    mid = len(arr)/2\n    \n    left, right = merge_sort(arr[mid:]), merge_sort(arr[:mid])\n\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    \"\"\" Merge helper\n        Complexity: O(n)\n    \"\"\"\n    arr = []\n    left_cursor, right_cursor = 0,0\n    while left_cursor < len(left) and right_cursor < len(right):\n        \n        if left[left_cursor] <= right[right_cursor]:\n            arr.append(left[left_cursor])\n            left_cursor+=1\n        else:\n            arr.append(right[right_cursor])\n            right_cursor+=1\n   \n    for i in range(left_cursor,len(left)):\n        arr.append(left[i])\n    for i in range(right_cursor,len(right)):\n        arr.append(right[i])\n\n   \n    return arr\n\narray = [1,5, 7,4,3,2,1,9,0,10,43,64]\nprint(array)\nprint(merge_sort(array))\n", "comments": "    merge sort         complexity  o(n log(n))               our recursive base case     len(arr)   1          return arr     mid   len(arr) 2       perform merge sort recursively halves     left  right   merge sort(arr mid  )  merge sort(arr  mid )        merge side together     return merge(left  right)  def merge(left  right)          merge helper         complexity  o(n)            our recursive base case    perform merge sort recursively halves    merge side together    sort one place result    add left overs left result    return result ", "content": "def merge_sort(arr):\n    \"\"\" Merge Sort\n        Complexity: O(n log(n))\n    \"\"\"\n    # Our recursive base case\n    if len(arr)<= 1:\n        return arr\n    mid = len(arr)/2\n    # Perform merge_sort recursively on both halves\n    left, right = merge_sort(arr[mid:]), merge_sort(arr[:mid])\n\n    # Merge each side together\n    return merge(left, right)\n\ndef merge(left, right):\n    \"\"\" Merge helper\n        Complexity: O(n)\n    \"\"\"\n    arr = []\n    left_cursor, right_cursor = 0,0\n    while left_cursor < len(left) and right_cursor < len(right):\n        # Sort each one and place into the result\n        if left[left_cursor] <= right[right_cursor]:\n            arr.append(left[left_cursor])\n            left_cursor+=1\n        else:\n            arr.append(right[right_cursor])\n            right_cursor+=1\n   # Add the left overs if there's any left to the result\n    for i in range(left_cursor,len(left)):\n        arr.append(left[i])\n    for i in range(right_cursor,len(right)):\n        arr.append(right[i])\n\n   # Return result\n    return arr\n\narray = [1,5, 7,4,3,2,1,9,0,10,43,64]\nprint(array)\nprint(merge_sort(array))\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "merge_sort.py", "id": "3a1f18fdff257b8dc80241f8f09f8b92", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/keon-algorithms/keon-algorithms-ea43887/sort/merge_sort.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:53:29Z", "url": "https://github.com/keon/algorithms", "wiki": true}