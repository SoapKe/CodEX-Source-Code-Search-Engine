{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    int_or_none,\n    parse_filesize,\n    unified_strdate,\n)\n\n\nclass EsriVideoIE(InfoExtractor):\n    _VALID_URL = r'https?://video\\.esri\\.com/watch/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'https://video.esri.com/watch/1124/arcgis-online-_dash_-developing-applications',\n        'md5': 'd4aaf1408b221f1b38227a9bbaeb95bc',\n        'info_dict': {\n            'id': '1124',\n            'ext': 'mp4',\n            'title': 'ArcGIS Online - Developing Applications',\n            'description': 'Jeremy Bartley demonstrates how to develop applications with ArcGIS Online.',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 185,\n            'upload_date': '20120419',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        formats = []\n        for width, height, content in re.findall(\n                r'(?s)<li><strong>(\\d+)x(\\d+):</strong>(.+?)</li>', webpage):\n            for video_url, ext, filesize in re.findall(\n                    r'<a[^>]+href=\"([^\"]+)\">([^<]+)&nbsp;\\(([^<]+)\\)</a>', content):\n                formats.append({\n                    'url': compat_urlparse.urljoin(url, video_url),\n                    'ext': ext.lower(),\n                    'format_id': '%s-%s' % (ext.lower(), height),\n                    'width': int(width),\n                    'height': int(height),\n                    'filesize_approx': parse_filesize(filesize),\n                })\n        self._sort_formats(formats)\n\n        title = self._html_search_meta('title', webpage, 'title')\n        description = self._html_search_meta(\n            'description', webpage, 'description', fatal=False)\n\n        thumbnail = self._html_search_meta('thumbnail', webpage, 'thumbnail', fatal=False)\n        if thumbnail:\n            thumbnail = re.sub(r'_[st]\\.jpg$', '_x.jpg', thumbnail)\n\n        duration = int_or_none(self._search_regex(\n            [r'var\\s+videoSeconds\\s*=\\s*(\\d+)', r\"'duration'\\s*:\\s*(\\d+)\"],\n            webpage, 'duration', fatal=False))\n\n        upload_date = unified_strdate(self._html_search_meta(\n            'last-modified', webpage, 'upload date', fatal=False))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'upload_date': upload_date,\n            'formats': formats\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    int_or_none,\n    parse_filesize,\n    unified_strdate,\n)\n\n\nclass EsriVideoIE(InfoExtractor):\n    _VALID_URL = r'https?://video\\.esri\\.com/watch/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'https://video.esri.com/watch/1124/arcgis-online-_dash_-developing-applications',\n        'md5': 'd4aaf1408b221f1b38227a9bbaeb95bc',\n        'info_dict': {\n            'id': '1124',\n            'ext': 'mp4',\n            'title': 'ArcGIS Online - Developing Applications',\n            'description': 'Jeremy Bartley demonstrates how to develop applications with ArcGIS Online.',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 185,\n            'upload_date': '20120419',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        formats = []\n        for width, height, content in re.findall(\n                r'(?s)<li><strong>(\\d+)x(\\d+):</strong>(.+?)</li>', webpage):\n            for video_url, ext, filesize in re.findall(\n                    r'<a[^>]+href=\"([^\"]+)\">([^<]+)&nbsp;\\(([^<]+)\\)</a>', content):\n                formats.append({\n                    'url': compat_urlparse.urljoin(url, video_url),\n                    'ext': ext.lower(),\n                    'format_id': '%s-%s' % (ext.lower(), height),\n                    'width': int(width),\n                    'height': int(height),\n                    'filesize_approx': parse_filesize(filesize),\n                })\n        self._sort_formats(formats)\n\n        title = self._html_search_meta('title', webpage, 'title')\n        description = self._html_search_meta(\n            'description', webpage, 'description', fatal=False)\n\n        thumbnail = self._html_search_meta('thumbnail', webpage, 'thumbnail', fatal=False)\n        if thumbnail:\n            thumbnail = re.sub(r'_[st]\\.jpg$', '_x.jpg', thumbnail)\n\n        duration = int_or_none(self._search_regex(\n            [r'var\\s+videoSeconds\\s*=\\s*(\\d+)', r\"'duration'\\s*:\\s*(\\d+)\"],\n            webpage, 'duration', fatal=False))\n\n        upload_date = unified_strdate(self._html_search_meta(\n            'last-modified', webpage, 'upload date', fatal=False))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'upload_date': upload_date,\n            'formats': formats\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "esri.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/esri.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}