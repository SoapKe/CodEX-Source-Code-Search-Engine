{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\nANSIBLE_METADATA = {'status': ['preview'],\n                    'supported_by': 'community',\n                    'version': '1.0'}\n\nimport argparse\nimport sys\n\n\nsecrets = {'vault-password': 'test-vault-password',\n           'vault-password-wrong': 'hunter42',\n           'vault-password-ansible': 'ansible',\n           'password': 'password',\n           'vault-client-password-1': 'password-1',\n           'vault-client-password-2': 'password-2'}\n\n\ndef build_arg_parser():\n    parser = argparse.ArgumentParser(description='Get a vault password from user keyring')\n\n    parser.add_argument('--vault-id', action='store', default=None,\n                        dest='vault_id',\n                        help='name of the vault secret to get from keyring')\n    parser.add_argument('--username', action='store', default=None,\n                        help='the username whose keyring is queried')\n    parser.add_argument('--set', action='store_true', default=False,\n                        dest='set_password',\n                        help='set the password instead of getting it')\n    return parser\n\n\ndef get_secret(keyname):\n    return secrets.get(keyname, None)\n\n\ndef main():\n    rc = 0\n\n    arg_parser = build_arg_parser()\n    args = arg_parser.parse_args()\n    # print('args: %s' % args)\n\n    keyname = args.vault_id or 'ansible'\n\n    if args.set_password:\n        print('--set is not supported yet')\n        sys.exit(1)\n\n    secret = get_secret(keyname)\n    if secret is None:\n        sys.stderr.write('test-vault-client could not find key for vault-id=\"%s\"\\n' % keyname)\n        \n        return 2\n\n    sys.stdout.write('%s\\n' % secret)\n\n    return rc\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n", "comments": "   usr bin env python        coding  utf 8        todo  could read files i suppose       print( args      args)    key found rc 2 ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nANSIBLE_METADATA = {'status': ['preview'],\n                    'supported_by': 'community',\n                    'version': '1.0'}\n\nimport argparse\nimport sys\n\n# TODO: could read these from the files I suppose...\nsecrets = {'vault-password': 'test-vault-password',\n           'vault-password-wrong': 'hunter42',\n           'vault-password-ansible': 'ansible',\n           'password': 'password',\n           'vault-client-password-1': 'password-1',\n           'vault-client-password-2': 'password-2'}\n\n\ndef build_arg_parser():\n    parser = argparse.ArgumentParser(description='Get a vault password from user keyring')\n\n    parser.add_argument('--vault-id', action='store', default=None,\n                        dest='vault_id',\n                        help='name of the vault secret to get from keyring')\n    parser.add_argument('--username', action='store', default=None,\n                        help='the username whose keyring is queried')\n    parser.add_argument('--set', action='store_true', default=False,\n                        dest='set_password',\n                        help='set the password instead of getting it')\n    return parser\n\n\ndef get_secret(keyname):\n    return secrets.get(keyname, None)\n\n\ndef main():\n    rc = 0\n\n    arg_parser = build_arg_parser()\n    args = arg_parser.parse_args()\n    # print('args: %s' % args)\n\n    keyname = args.vault_id or 'ansible'\n\n    if args.set_password:\n        print('--set is not supported yet')\n        sys.exit(1)\n\n    secret = get_secret(keyname)\n    if secret is None:\n        sys.stderr.write('test-vault-client could not find key for vault-id=\"%s\"\\n' % keyname)\n        # key not found rc=2\n        return 2\n\n    sys.stdout.write('%s\\n' % secret)\n\n    return rc\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test-vault-client.py", "id": "fd4918638ab84fa9432ac035ca008cdf", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/integration/targets/vault/test-vault-client.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}