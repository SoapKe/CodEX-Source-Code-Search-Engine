{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_virtual_server import ModuleParameters\n    from library.bigip_virtual_server import ApiParameters\n    from library.bigip_virtual_server import ModuleManager\n    from library.bigip_virtual_server import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_virtual_server import ApiParameters\n        from ansible.modules.network.f5.bigip_virtual_server import ModuleParameters\n        from ansible.modules.network.f5.bigip_virtual_server import ModuleManager\n        from ansible.modules.network.f5.bigip_virtual_server import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_destination_mutex_1(self):\n        args = dict(\n            destination='1.1.1.1'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '1.1.1.1'\n\n    def test_destination_mutex_2(self):\n        args = dict(\n            destination='1.1.1.1%2'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '1.1.1.1'\n        assert p.destination_tuple.route_domain == 2\n\n    def test_destination_mutex_3(self):\n        args = dict(\n            destination='1.1.1.1:80'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '1.1.1.1'\n        assert p.destination_tuple.port == 80\n\n    def test_destination_mutex_4(self):\n        args = dict(\n            destination='1.1.1.1%2:80'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '1.1.1.1'\n        assert p.destination_tuple.port == 80\n        assert p.destination_tuple.route_domain == 2\n\n    def test_api_destination_mutex_5(self):\n        args = dict(\n            destination='/Common/1.1.1.1'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '1.1.1.1'\n\n    def test_api_destination_mutex_6(self):\n        args = dict(\n            destination='/Common/1.1.1.1%2'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '1.1.1.1'\n        assert p.destination_tuple.route_domain == 2\n\n    def test_api_destination_mutex_7(self):\n        args = dict(\n            destination='/Common/1.1.1.1:80'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '1.1.1.1'\n        assert p.destination_tuple.port == 80\n\n    def test_api_destination_mutex_8(self):\n        args = dict(\n            destination='/Common/1.1.1.1%2:80'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '1.1.1.1'\n        assert p.destination_tuple.port == 80\n        assert p.destination_tuple.route_domain == 2\n\n    def test_destination_mutex_9(self):\n        args = dict(\n            destination='2700:bc00:1f10:101::6'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '2700:bc00:1f10:101::6'\n\n    def test_destination_mutex_10(self):\n        args = dict(\n            destination='2700:bc00:1f10:101::6%2'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '2700:bc00:1f10:101::6'\n        assert p.destination_tuple.route_domain == 2\n\n    def test_destination_mutex_11(self):\n        args = dict(\n            destination='2700:bc00:1f10:101::6.80'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '2700:bc00:1f10:101::6'\n        assert p.destination_tuple.port == 80\n\n    def test_destination_mutex_12(self):\n        args = dict(\n            destination='2700:bc00:1f10:101::6%2.80'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '2700:bc00:1f10:101::6'\n        assert p.destination_tuple.port == 80\n        assert p.destination_tuple.route_domain == 2\n\n    def test_module_no_partition_prefix_parameters(self):\n        args = dict(\n            server='localhost',\n            user='admin',\n            password='secret',\n            state='present',\n            partition='Common',\n            name='my-virtual-server',\n            destination='10.10.10.10',\n            port=443,\n            pool='my-pool',\n            snat='Automap',\n            description='Test Virtual Server',\n            profiles=[\n                dict(\n                    name='fix',\n                    context='all'\n                )\n            ],\n            enabled_vlans=['vlan2']\n        )\n        p = ModuleParameters(params=args)\n        assert p.name == 'my-virtual-server'\n        assert p.partition == 'Common'\n        assert p.port == 443\n        assert p.server == 'localhost'\n        assert p.user == 'admin'\n        assert p.password == 'secret'\n        assert p.destination == '/Common/10.10.10.10:443'\n        assert p.pool == '/Common/my-pool'\n        assert p.snat == {'type': 'automap'}\n        assert p.description == 'Test Virtual Server'\n        assert len(p.profiles) == 1\n        assert 'context' in p.profiles[0]\n        assert 'name' in p.profiles[0]\n        assert '/Common/vlan2' in p.enabled_vlans\n\n    def test_module_partition_prefix_parameters(self):\n        args = dict(\n            server='localhost',\n            user='admin',\n            password='secret',\n            state='present',\n            partition='Common',\n            name='my-virtual-server',\n            destination='10.10.10.10',\n            port=443,\n            pool='/Common/my-pool',\n            snat='Automap',\n            description='Test Virtual Server',\n            profiles=[\n                dict(\n                    name='fix',\n                    context='all'\n                )\n            ],\n            enabled_vlans=['/Common/vlan2']\n        )\n        p = ModuleParameters(params=args)\n        assert p.name == 'my-virtual-server'\n        assert p.partition == 'Common'\n        assert p.port == 443\n        assert p.server == 'localhost'\n        assert p.user == 'admin'\n        assert p.password == 'secret'\n        assert p.destination == '/Common/10.10.10.10:443'\n        assert p.pool == '/Common/my-pool'\n        assert p.snat == {'type': 'automap'}\n        assert p.description == 'Test Virtual Server'\n        assert len(p.profiles) == 1\n        assert 'context' in p.profiles[0]\n        assert 'name' in p.profiles[0]\n        assert '/Common/vlan2' in p.enabled_vlans\n\n    def test_api_parameters_variables(self):\n        args = {\n            \"kind\": \"tm:ltm:virtual:virtualstate\",\n            \"name\": \"my-virtual-server\",\n            \"partition\": \"Common\",\n            \"fullPath\": \"/Common/my-virtual-server\",\n            \"generation\": 54,\n            \"selfLink\": \"https://localhost/mgmt/tm/ltm/virtual/~Common~my-virtual-server?expandSubcollections=true&ver=12.1.2\",\n            \"addressStatus\": \"yes\",\n            \"autoLasthop\": \"default\",\n            \"cmpEnabled\": \"yes\",\n            \"connectionLimit\": 0,\n            \"description\": \"Test Virtual Server\",\n            \"destination\": \"/Common/10.10.10.10:443\",\n            \"enabled\": True,\n            \"gtmScore\": 0,\n            \"ipProtocol\": \"tcp\",\n            \"mask\": \"255.255.255.255\",\n            \"mirror\": \"disabled\",\n            \"mobileAppTunnel\": \"disabled\",\n            \"nat64\": \"disabled\",\n            \"rateLimit\": \"disabled\",\n            \"rateLimitDstMask\": 0,\n            \"rateLimitMode\": \"object\",\n            \"rateLimitSrcMask\": 0,\n            \"serviceDownImmediateAction\": \"none\",\n            \"source\": \"0.0.0.0/0\",\n            \"sourceAddressTranslation\": {\n                \"type\": \"automap\"\n            },\n            \"sourcePort\": \"preserve\",\n            \"synCookieStatus\": \"not-activated\",\n            \"translateAddress\": \"enabled\",\n            \"translatePort\": \"enabled\",\n            \"vlansEnabled\": True,\n            \"vsIndex\": 3,\n            \"vlans\": [\n                \"/Common/net1\"\n            ],\n            \"vlansReference\": [\n                {\n                    \"link\": \"https://localhost/mgmt/tm/net/vlan/~Common~net1?ver=12.1.2\"\n                }\n            ],\n            \"policiesReference\": {\n                \"link\": \"https://localhost/mgmt/tm/ltm/virtual/~Common~my-virtual-server/policies?ver=12.1.2\",\n                \"isSubcollection\": True\n            },\n            \"profilesReference\": {\n                \"link\": \"https://localhost/mgmt/tm/ltm/virtual/~Common~my-virtual-server/profiles?ver=12.1.2\",\n                \"isSubcollection\": True,\n                \"items\": [\n                    {\n                        \"kind\": \"tm:ltm:virtual:profiles:profilesstate\",\n                        \"name\": \"http\",\n                        \"partition\": \"Common\",\n                        \"fullPath\": \"/Common/http\",\n                        \"generation\": 54,\n                        \"selfLink\": \"https://localhost/mgmt/tm/ltm/virtual/~Common~my-virtual-server/profiles/~Common~http?ver=12.1.2\",\n                        \"context\": \"all\",\n                        \"nameReference\": {\n                            \"link\": \"https://localhost/mgmt/tm/ltm/profile/http/~Common~http?ver=12.1.2\"\n                        }\n                    },\n                    {\n                        \"kind\": \"tm:ltm:virtual:profiles:profilesstate\",\n                        \"name\": \"serverssl\",\n                        \"partition\": \"Common\",\n                        \"fullPath\": \"/Common/serverssl\",\n                        \"generation\": 54,\n                        \"selfLink\": \"https://localhost/mgmt/tm/ltm/virtual/~Common~my-virtual-server/profiles/~Common~serverssl?ver=12.1.2\",\n                        \"context\": \"serverside\",\n                        \"nameReference\": {\n                            \"link\": \"https://localhost/mgmt/tm/ltm/profile/server-ssl/~Common~serverssl?ver=12.1.2\"\n                        }\n                    },\n                    {\n                        \"kind\": \"tm:ltm:virtual:profiles:profilesstate\",\n                        \"name\": \"tcp\",\n                        \"partition\": \"Common\",\n                        \"fullPath\": \"/Common/tcp\",\n                        \"generation\": 54,\n                        \"selfLink\": \"https://localhost/mgmt/tm/ltm/virtual/~Common~my-virtual-server/profiles/~Common~tcp?ver=12.1.2\",\n                        \"context\": \"all\",\n                        \"nameReference\": {\n                            \"link\": \"https://localhost/mgmt/tm/ltm/profile/tcp/~Common~tcp?ver=12.1.2\"\n                        }\n                    }\n                ]\n            }\n        }\n        p = ApiParameters(params=args)\n        assert p.name == 'my-virtual-server'\n        assert p.partition == 'Common'\n        assert p.port == 443\n        assert p.destination == '/Common/10.10.10.10:443'\n        assert p.snat == {'type': 'automap'}\n        assert p.description == 'Test Virtual Server'\n        assert 'context' in p.profiles[0]\n        assert 'name' in p.profiles[0]\n        assert 'fullPath' in p.profiles[0]\n        assert p.profiles[0]['context'] == 'all'\n        assert p.profiles[0]['name'] == 'http'\n        assert p.profiles[0]['fullPath'] == '/Common/http'\n        assert '/Common/net1' in p.vlans\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_virtual_server(self, *args):\n        set_module_args(dict(\n            all_profiles=[\n                dict(\n                    name='http'\n                ),\n                dict(\n                    name='clientssl'\n                )\n            ],\n            description=\"Test Virtual Server\",\n            destination=\"10.10.10.10\",\n            name=\"my-snat-pool\",\n            partition=\"Common\",\n            password=\"secret\",\n            port=\"443\",\n            server=\"localhost\",\n            snat=\"Automap\",\n            state=\"present\",\n            user=\"admin\",\n            validate_certs=\"no\"\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=False)\n        mm.create_on_device = Mock(return_value=True)\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_delete_virtual_server(self, *args):\n        set_module_args(dict(\n            all_profiles=[\n                'http', 'clientssl'\n            ],\n            description=\"Test Virtual Server\",\n            destination=\"10.10.10.10\",\n            name=\"my-snat-pool\",\n            partition=\"Common\",\n            password=\"secret\",\n            port=\"443\",\n            server=\"localhost\",\n            snat=\"Automap\",\n            state=\"absent\",\n            user=\"admin\",\n            validate_certs=\"no\"\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n\n    def test_enable_vs_that_is_already_enabled(self, *args):\n        set_module_args(dict(\n            all_profiles=[\n                'http', 'clientssl'\n            ],\n            description=\"Test Virtual Server\",\n            destination=\"10.10.10.10\",\n            name=\"my-snat-pool\",\n            partition=\"Common\",\n            password=\"secret\",\n            port=\"443\",\n            server=\"localhost\",\n            snat=\"Automap\",\n            state=\"absent\",\n            user=\"admin\",\n            validate_certs=\"no\"\n        ))\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = ApiParameters(\n            dict(\n                agent_status_traps='disabled'\n            )\n        )\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=False)\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n\n    def test_modify_port(self, *args):\n        set_module_args(dict(\n            name=\"my-virtual-server\",\n            partition=\"Common\",\n            password=\"secret\",\n            port=\"10443\",\n            server=\"localhost\",\n            state=\"present\",\n            user=\"admin\",\n            validate_certs=\"no\"\n        ))\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = ApiParameters(params=load_fixture('load_ltm_virtual_1.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        mm.update_on_device = Mock(return_value=True)\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_modify_port_idempotent(self, *args):\n        set_module_args(dict(\n            name=\"my-virtual-server\",\n            partition=\"Common\",\n            password=\"secret\",\n            port=\"443\",\n            server=\"localhost\",\n            state=\"present\",\n            user=\"admin\",\n            validate_certs=\"no\"\n        ))\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = ApiParameters(params=load_fixture('load_ltm_virtual_1.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n\n    def test_modify_vlans_idempotent(self, *args):\n        set_module_args(dict(\n            name=\"my-virtual-server\",\n            partition=\"Common\",\n            password=\"secret\",\n            disabled_vlans=[\n                \"net1\"\n            ],\n            server=\"localhost\",\n            state=\"present\",\n            user=\"admin\",\n            validate_certs=\"no\"\n        ))\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = ApiParameters(params=load_fixture('load_ltm_virtual_2.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n\n    def test_modify_profiles(self, *args):\n        set_module_args(dict(\n            name=\"my-virtual-server\",\n            partition=\"Common\",\n            password=\"secret\",\n            profiles=[\n                'http', 'clientssl'\n            ],\n            server=\"localhost\",\n            state=\"present\",\n            user=\"admin\",\n            validate_certs=\"no\"\n        ))\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = ApiParameters(params=load_fixture('load_ltm_virtual_2.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        mm.update_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert len(results['profiles']) == 2\n        assert 'name' in results['profiles'][0]\n        assert 'context' in results['profiles'][0]\n        assert results['profiles'][0]['name'] == 'http'\n        assert results['profiles'][0]['context'] == 'all'\n        assert 'name' in results['profiles'][1]\n        assert 'context' in results['profiles'][1]\n        assert results['profiles'][1]['name'] == 'clientssl'\n        assert results['profiles'][1]['context'] == 'clientside'\n\n    def test_update_virtual_server(self, *args):\n        set_module_args(dict(\n            profiles=[\n                dict(\n                    name='http'\n                ),\n                dict(\n                    name='clientssl'\n                )\n            ],\n            description=\"foo virtual\",\n            destination=\"1.1.1.1\",\n            name=\"my-virtual-server\",\n            partition=\"Common\",\n            password=\"secret\",\n            port=\"8443\",\n            server=\"localhost\",\n            snat=\"snat-pool1\",\n            state=\"disabled\",\n            source='1.2.3.4/32',\n            user=\"admin\",\n            validate_certs=\"no\",\n            irules=[\n                'irule1',\n                'irule2'\n            ],\n            policies=[\n                'policy1',\n                'policy2'\n            ],\n            enabled_vlans=[\n                'vlan1',\n                'vlan2'\n            ],\n            pool='my-pool',\n            default_persistence_profile='source_addr',\n            fallback_persistence_profile='dest_addr'\n        ))\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = ApiParameters(params=load_fixture('load_ltm_virtual_3.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        mm.update_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['source'] == '1.2.3.4/32'\n        assert results['description'] == 'foo virtual'\n        assert results['snat'] == '/Common/snat-pool1'\n        assert results['destination'] == '1.1.1.1'\n        assert results['port'] == 8443\n        assert results['default_persistence_profile'] == '/Common/source_addr'\n        assert results['fallback_persistence_profile'] == '/Common/dest_addr'\n\n         policies\n        assert len(results['policies']) == 2\n        assert '/Common/policy1' in results['policies']\n        assert '/Common/policy2' in results['policies']\n\n         irules\n        assert len(results['irules']) == 2\n        assert '/Common/irule1' in results['irules']\n        assert '/Common/irule2' in results['irules']\n\n         vlans\n        assert len(results['enabled_vlans']) == 2\n        assert '/Common/vlan1' in results['enabled_vlans']\n        assert '/Common/vlan2' in results['enabled_vlans']\n\n         profiles\n        assert len(results['profiles']) == 2\n        assert 'name' in results['profiles'][0]\n        assert 'context' in results['profiles'][0]\n        assert results['profiles'][0]['name'] == 'http'\n        assert results['profiles'][0]['context'] == 'all'\n        assert 'name' in results['profiles'][1]\n        assert 'context' in results['profiles'][1]\n        assert results['profiles'][1]['name'] == 'clientssl'\n        assert results['profiles'][1]['context'] == 'clientside'\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    override methods force specific logic module happen    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    policies    irules    vlans    profiles ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_virtual_server import ModuleParameters\n    from library.bigip_virtual_server import ApiParameters\n    from library.bigip_virtual_server import ModuleManager\n    from library.bigip_virtual_server import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_virtual_server import ApiParameters\n        from ansible.modules.network.f5.bigip_virtual_server import ModuleParameters\n        from ansible.modules.network.f5.bigip_virtual_server import ModuleManager\n        from ansible.modules.network.f5.bigip_virtual_server import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_destination_mutex_1(self):\n        args = dict(\n            destination='1.1.1.1'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '1.1.1.1'\n\n    def test_destination_mutex_2(self):\n        args = dict(\n            destination='1.1.1.1%2'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '1.1.1.1'\n        assert p.destination_tuple.route_domain == 2\n\n    def test_destination_mutex_3(self):\n        args = dict(\n            destination='1.1.1.1:80'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '1.1.1.1'\n        assert p.destination_tuple.port == 80\n\n    def test_destination_mutex_4(self):\n        args = dict(\n            destination='1.1.1.1%2:80'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '1.1.1.1'\n        assert p.destination_tuple.port == 80\n        assert p.destination_tuple.route_domain == 2\n\n    def test_api_destination_mutex_5(self):\n        args = dict(\n            destination='/Common/1.1.1.1'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '1.1.1.1'\n\n    def test_api_destination_mutex_6(self):\n        args = dict(\n            destination='/Common/1.1.1.1%2'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '1.1.1.1'\n        assert p.destination_tuple.route_domain == 2\n\n    def test_api_destination_mutex_7(self):\n        args = dict(\n            destination='/Common/1.1.1.1:80'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '1.1.1.1'\n        assert p.destination_tuple.port == 80\n\n    def test_api_destination_mutex_8(self):\n        args = dict(\n            destination='/Common/1.1.1.1%2:80'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '1.1.1.1'\n        assert p.destination_tuple.port == 80\n        assert p.destination_tuple.route_domain == 2\n\n    def test_destination_mutex_9(self):\n        args = dict(\n            destination='2700:bc00:1f10:101::6'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '2700:bc00:1f10:101::6'\n\n    def test_destination_mutex_10(self):\n        args = dict(\n            destination='2700:bc00:1f10:101::6%2'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '2700:bc00:1f10:101::6'\n        assert p.destination_tuple.route_domain == 2\n\n    def test_destination_mutex_11(self):\n        args = dict(\n            destination='2700:bc00:1f10:101::6.80'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '2700:bc00:1f10:101::6'\n        assert p.destination_tuple.port == 80\n\n    def test_destination_mutex_12(self):\n        args = dict(\n            destination='2700:bc00:1f10:101::6%2.80'\n        )\n        p = ApiParameters(params=args)\n        assert p.destination_tuple.ip == '2700:bc00:1f10:101::6'\n        assert p.destination_tuple.port == 80\n        assert p.destination_tuple.route_domain == 2\n\n    def test_module_no_partition_prefix_parameters(self):\n        args = dict(\n            server='localhost',\n            user='admin',\n            password='secret',\n            state='present',\n            partition='Common',\n            name='my-virtual-server',\n            destination='10.10.10.10',\n            port=443,\n            pool='my-pool',\n            snat='Automap',\n            description='Test Virtual Server',\n            profiles=[\n                dict(\n                    name='fix',\n                    context='all'\n                )\n            ],\n            enabled_vlans=['vlan2']\n        )\n        p = ModuleParameters(params=args)\n        assert p.name == 'my-virtual-server'\n        assert p.partition == 'Common'\n        assert p.port == 443\n        assert p.server == 'localhost'\n        assert p.user == 'admin'\n        assert p.password == 'secret'\n        assert p.destination == '/Common/10.10.10.10:443'\n        assert p.pool == '/Common/my-pool'\n        assert p.snat == {'type': 'automap'}\n        assert p.description == 'Test Virtual Server'\n        assert len(p.profiles) == 1\n        assert 'context' in p.profiles[0]\n        assert 'name' in p.profiles[0]\n        assert '/Common/vlan2' in p.enabled_vlans\n\n    def test_module_partition_prefix_parameters(self):\n        args = dict(\n            server='localhost',\n            user='admin',\n            password='secret',\n            state='present',\n            partition='Common',\n            name='my-virtual-server',\n            destination='10.10.10.10',\n            port=443,\n            pool='/Common/my-pool',\n            snat='Automap',\n            description='Test Virtual Server',\n            profiles=[\n                dict(\n                    name='fix',\n                    context='all'\n                )\n            ],\n            enabled_vlans=['/Common/vlan2']\n        )\n        p = ModuleParameters(params=args)\n        assert p.name == 'my-virtual-server'\n        assert p.partition == 'Common'\n        assert p.port == 443\n        assert p.server == 'localhost'\n        assert p.user == 'admin'\n        assert p.password == 'secret'\n        assert p.destination == '/Common/10.10.10.10:443'\n        assert p.pool == '/Common/my-pool'\n        assert p.snat == {'type': 'automap'}\n        assert p.description == 'Test Virtual Server'\n        assert len(p.profiles) == 1\n        assert 'context' in p.profiles[0]\n        assert 'name' in p.profiles[0]\n        assert '/Common/vlan2' in p.enabled_vlans\n\n    def test_api_parameters_variables(self):\n        args = {\n            \"kind\": \"tm:ltm:virtual:virtualstate\",\n            \"name\": \"my-virtual-server\",\n            \"partition\": \"Common\",\n            \"fullPath\": \"/Common/my-virtual-server\",\n            \"generation\": 54,\n            \"selfLink\": \"https://localhost/mgmt/tm/ltm/virtual/~Common~my-virtual-server?expandSubcollections=true&ver=12.1.2\",\n            \"addressStatus\": \"yes\",\n            \"autoLasthop\": \"default\",\n            \"cmpEnabled\": \"yes\",\n            \"connectionLimit\": 0,\n            \"description\": \"Test Virtual Server\",\n            \"destination\": \"/Common/10.10.10.10:443\",\n            \"enabled\": True,\n            \"gtmScore\": 0,\n            \"ipProtocol\": \"tcp\",\n            \"mask\": \"255.255.255.255\",\n            \"mirror\": \"disabled\",\n            \"mobileAppTunnel\": \"disabled\",\n            \"nat64\": \"disabled\",\n            \"rateLimit\": \"disabled\",\n            \"rateLimitDstMask\": 0,\n            \"rateLimitMode\": \"object\",\n            \"rateLimitSrcMask\": 0,\n            \"serviceDownImmediateAction\": \"none\",\n            \"source\": \"0.0.0.0/0\",\n            \"sourceAddressTranslation\": {\n                \"type\": \"automap\"\n            },\n            \"sourcePort\": \"preserve\",\n            \"synCookieStatus\": \"not-activated\",\n            \"translateAddress\": \"enabled\",\n            \"translatePort\": \"enabled\",\n            \"vlansEnabled\": True,\n            \"vsIndex\": 3,\n            \"vlans\": [\n                \"/Common/net1\"\n            ],\n            \"vlansReference\": [\n                {\n                    \"link\": \"https://localhost/mgmt/tm/net/vlan/~Common~net1?ver=12.1.2\"\n                }\n            ],\n            \"policiesReference\": {\n                \"link\": \"https://localhost/mgmt/tm/ltm/virtual/~Common~my-virtual-server/policies?ver=12.1.2\",\n                \"isSubcollection\": True\n            },\n            \"profilesReference\": {\n                \"link\": \"https://localhost/mgmt/tm/ltm/virtual/~Common~my-virtual-server/profiles?ver=12.1.2\",\n                \"isSubcollection\": True,\n                \"items\": [\n                    {\n                        \"kind\": \"tm:ltm:virtual:profiles:profilesstate\",\n                        \"name\": \"http\",\n                        \"partition\": \"Common\",\n                        \"fullPath\": \"/Common/http\",\n                        \"generation\": 54,\n                        \"selfLink\": \"https://localhost/mgmt/tm/ltm/virtual/~Common~my-virtual-server/profiles/~Common~http?ver=12.1.2\",\n                        \"context\": \"all\",\n                        \"nameReference\": {\n                            \"link\": \"https://localhost/mgmt/tm/ltm/profile/http/~Common~http?ver=12.1.2\"\n                        }\n                    },\n                    {\n                        \"kind\": \"tm:ltm:virtual:profiles:profilesstate\",\n                        \"name\": \"serverssl\",\n                        \"partition\": \"Common\",\n                        \"fullPath\": \"/Common/serverssl\",\n                        \"generation\": 54,\n                        \"selfLink\": \"https://localhost/mgmt/tm/ltm/virtual/~Common~my-virtual-server/profiles/~Common~serverssl?ver=12.1.2\",\n                        \"context\": \"serverside\",\n                        \"nameReference\": {\n                            \"link\": \"https://localhost/mgmt/tm/ltm/profile/server-ssl/~Common~serverssl?ver=12.1.2\"\n                        }\n                    },\n                    {\n                        \"kind\": \"tm:ltm:virtual:profiles:profilesstate\",\n                        \"name\": \"tcp\",\n                        \"partition\": \"Common\",\n                        \"fullPath\": \"/Common/tcp\",\n                        \"generation\": 54,\n                        \"selfLink\": \"https://localhost/mgmt/tm/ltm/virtual/~Common~my-virtual-server/profiles/~Common~tcp?ver=12.1.2\",\n                        \"context\": \"all\",\n                        \"nameReference\": {\n                            \"link\": \"https://localhost/mgmt/tm/ltm/profile/tcp/~Common~tcp?ver=12.1.2\"\n                        }\n                    }\n                ]\n            }\n        }\n        p = ApiParameters(params=args)\n        assert p.name == 'my-virtual-server'\n        assert p.partition == 'Common'\n        assert p.port == 443\n        assert p.destination == '/Common/10.10.10.10:443'\n        assert p.snat == {'type': 'automap'}\n        assert p.description == 'Test Virtual Server'\n        assert 'context' in p.profiles[0]\n        assert 'name' in p.profiles[0]\n        assert 'fullPath' in p.profiles[0]\n        assert p.profiles[0]['context'] == 'all'\n        assert p.profiles[0]['name'] == 'http'\n        assert p.profiles[0]['fullPath'] == '/Common/http'\n        assert '/Common/net1' in p.vlans\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_virtual_server(self, *args):\n        set_module_args(dict(\n            all_profiles=[\n                dict(\n                    name='http'\n                ),\n                dict(\n                    name='clientssl'\n                )\n            ],\n            description=\"Test Virtual Server\",\n            destination=\"10.10.10.10\",\n            name=\"my-snat-pool\",\n            partition=\"Common\",\n            password=\"secret\",\n            port=\"443\",\n            server=\"localhost\",\n            snat=\"Automap\",\n            state=\"present\",\n            user=\"admin\",\n            validate_certs=\"no\"\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=False)\n        mm.create_on_device = Mock(return_value=True)\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_delete_virtual_server(self, *args):\n        set_module_args(dict(\n            all_profiles=[\n                'http', 'clientssl'\n            ],\n            description=\"Test Virtual Server\",\n            destination=\"10.10.10.10\",\n            name=\"my-snat-pool\",\n            partition=\"Common\",\n            password=\"secret\",\n            port=\"443\",\n            server=\"localhost\",\n            snat=\"Automap\",\n            state=\"absent\",\n            user=\"admin\",\n            validate_certs=\"no\"\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n\n    def test_enable_vs_that_is_already_enabled(self, *args):\n        set_module_args(dict(\n            all_profiles=[\n                'http', 'clientssl'\n            ],\n            description=\"Test Virtual Server\",\n            destination=\"10.10.10.10\",\n            name=\"my-snat-pool\",\n            partition=\"Common\",\n            password=\"secret\",\n            port=\"443\",\n            server=\"localhost\",\n            snat=\"Automap\",\n            state=\"absent\",\n            user=\"admin\",\n            validate_certs=\"no\"\n        ))\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = ApiParameters(\n            dict(\n                agent_status_traps='disabled'\n            )\n        )\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=False)\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n\n    def test_modify_port(self, *args):\n        set_module_args(dict(\n            name=\"my-virtual-server\",\n            partition=\"Common\",\n            password=\"secret\",\n            port=\"10443\",\n            server=\"localhost\",\n            state=\"present\",\n            user=\"admin\",\n            validate_certs=\"no\"\n        ))\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = ApiParameters(params=load_fixture('load_ltm_virtual_1.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        mm.update_on_device = Mock(return_value=True)\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_modify_port_idempotent(self, *args):\n        set_module_args(dict(\n            name=\"my-virtual-server\",\n            partition=\"Common\",\n            password=\"secret\",\n            port=\"443\",\n            server=\"localhost\",\n            state=\"present\",\n            user=\"admin\",\n            validate_certs=\"no\"\n        ))\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = ApiParameters(params=load_fixture('load_ltm_virtual_1.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n\n    def test_modify_vlans_idempotent(self, *args):\n        set_module_args(dict(\n            name=\"my-virtual-server\",\n            partition=\"Common\",\n            password=\"secret\",\n            disabled_vlans=[\n                \"net1\"\n            ],\n            server=\"localhost\",\n            state=\"present\",\n            user=\"admin\",\n            validate_certs=\"no\"\n        ))\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = ApiParameters(params=load_fixture('load_ltm_virtual_2.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n\n    def test_modify_profiles(self, *args):\n        set_module_args(dict(\n            name=\"my-virtual-server\",\n            partition=\"Common\",\n            password=\"secret\",\n            profiles=[\n                'http', 'clientssl'\n            ],\n            server=\"localhost\",\n            state=\"present\",\n            user=\"admin\",\n            validate_certs=\"no\"\n        ))\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = ApiParameters(params=load_fixture('load_ltm_virtual_2.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        mm.update_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert len(results['profiles']) == 2\n        assert 'name' in results['profiles'][0]\n        assert 'context' in results['profiles'][0]\n        assert results['profiles'][0]['name'] == 'http'\n        assert results['profiles'][0]['context'] == 'all'\n        assert 'name' in results['profiles'][1]\n        assert 'context' in results['profiles'][1]\n        assert results['profiles'][1]['name'] == 'clientssl'\n        assert results['profiles'][1]['context'] == 'clientside'\n\n    def test_update_virtual_server(self, *args):\n        set_module_args(dict(\n            profiles=[\n                dict(\n                    name='http'\n                ),\n                dict(\n                    name='clientssl'\n                )\n            ],\n            description=\"foo virtual\",\n            destination=\"1.1.1.1\",\n            name=\"my-virtual-server\",\n            partition=\"Common\",\n            password=\"secret\",\n            port=\"8443\",\n            server=\"localhost\",\n            snat=\"snat-pool1\",\n            state=\"disabled\",\n            source='1.2.3.4/32',\n            user=\"admin\",\n            validate_certs=\"no\",\n            irules=[\n                'irule1',\n                'irule2'\n            ],\n            policies=[\n                'policy1',\n                'policy2'\n            ],\n            enabled_vlans=[\n                'vlan1',\n                'vlan2'\n            ],\n            pool='my-pool',\n            default_persistence_profile='source_addr',\n            fallback_persistence_profile='dest_addr'\n        ))\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = ApiParameters(params=load_fixture('load_ltm_virtual_3.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        mm.update_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['source'] == '1.2.3.4/32'\n        assert results['description'] == 'foo virtual'\n        assert results['snat'] == '/Common/snat-pool1'\n        assert results['destination'] == '1.1.1.1'\n        assert results['port'] == 8443\n        assert results['default_persistence_profile'] == '/Common/source_addr'\n        assert results['fallback_persistence_profile'] == '/Common/dest_addr'\n\n        # policies\n        assert len(results['policies']) == 2\n        assert '/Common/policy1' in results['policies']\n        assert '/Common/policy2' in results['policies']\n\n        # irules\n        assert len(results['irules']) == 2\n        assert '/Common/irule1' in results['irules']\n        assert '/Common/irule2' in results['irules']\n\n        # vlans\n        assert len(results['enabled_vlans']) == 2\n        assert '/Common/vlan1' in results['enabled_vlans']\n        assert '/Common/vlan2' in results['enabled_vlans']\n\n        # profiles\n        assert len(results['profiles']) == 2\n        assert 'name' in results['profiles'][0]\n        assert 'context' in results['profiles'][0]\n        assert results['profiles'][0]['name'] == 'http'\n        assert results['profiles'][0]['context'] == 'all'\n        assert 'name' in results['profiles'][1]\n        assert 'context' in results['profiles'][1]\n        assert results['profiles'][1]['name'] == 'clientssl'\n        assert results['profiles'][1]['context'] == 'clientside'\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_virtual_server.py", "id": "7fcf38403d2e67f28537522500541489", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_virtual_server.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}