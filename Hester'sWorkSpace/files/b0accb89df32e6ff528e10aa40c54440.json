{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_HTTPError,\n)\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n    remove_end,\n    strip_or_none,\n    unified_timestamp,\n    urljoin,\n)\n\n\nclass PacktPubBaseIE(InfoExtractor):\n    _PACKT_BASE = 'https://www.packtpub.com'\n    _MAPT_REST = '%s/mapt-rest' % _PACKT_BASE\n\n\nclass PacktPubIE(PacktPubBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?packtpub\\.com/mapt/video/[^/]+/(?P<course_id>\\d+)/(?P<chapter_id>\\d+)/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'https://www.packtpub.com/mapt/video/web-development/9781787122215/20528/20530/Project+Intro',\n        'md5': '1e74bd6cfd45d7d07666f4684ef58f70',\n        'info_dict': {\n            'id': '20530',\n            'ext': 'mp4',\n            'title': 'Project Intro',\n            'thumbnail': r're:(?i)^https?://.*\\.jpg',\n            'timestamp': 1490918400,\n            'upload_date': '20170331',\n        },\n    }\n    _NETRC_MACHINE = 'packtpub'\n    _TOKEN = None\n\n    def _real_initialize(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n        try:\n            self._TOKEN = self._download_json(\n                self._MAPT_REST + '/users/tokens', None,\n                'Downloading Authorization Token', data=json.dumps({\n                    'email': username,\n                    'password': password,\n                }).encode())['data']['access']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code in (400, 401, 404):\n                message = self._parse_json(e.cause.read().decode(), None)['message']\n                raise ExtractorError(message, expected=True)\n            raise\n\n    def _handle_error(self, response):\n        if response.get('status') != 'success':\n            raise ExtractorError(\n                '% said: %s' % (self.IE_NAME, response['message']),\n                expected=True)\n\n    def _download_json(self, *args, **kwargs):\n        response = super(PacktPubIE, self)._download_json(*args, **kwargs)\n        self._handle_error(response)\n        return response\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        course_id, chapter_id, video_id = mobj.group(\n            'course_id', 'chapter_id', 'id')\n\n        headers = {}\n        if self._TOKEN:\n            headers['Authorization'] = 'Bearer ' + self._TOKEN\n        video = self._download_json(\n            '%s/users/me/products/%s/chapters/%s/sections/%s'\n            % (self._MAPT_REST, course_id, chapter_id, video_id), video_id,\n            'Downloading JSON video', headers=headers)['data']\n\n        content = video.get('content')\n        if not content:\n            self.raise_login_required('This video is locked')\n\n        video_url = content['file']\n\n        metadata = self._download_json(\n            '%s/products/%s/chapters/%s/sections/%s/metadata'\n            % (self._MAPT_REST, course_id, chapter_id, video_id),\n            video_id)['data']\n\n        title = metadata['pageTitle']\n        course_title = metadata.get('title')\n        if course_title:\n            title = remove_end(title, ' - %s' % course_title)\n        timestamp = unified_timestamp(metadata.get('publicationDate'))\n        thumbnail = urljoin(self._PACKT_BASE, metadata.get('filepath'))\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n        }\n\n\nclass PacktPubCourseIE(PacktPubBaseIE):\n    _VALID_URL = r'(?P<url>https?://(?:www\\.)?packtpub\\.com/mapt/video/[^/]+/(?P<id>\\d+))'\n    _TEST = {\n        'url': 'https://www.packtpub.com/mapt/video/web-development/9781787122215',\n        'info_dict': {\n            'id': '9781787122215',\n            'title': 'Learn Nodejs by building 12 projects [Video]',\n        },\n        'playlist_count': 90,\n    }\n\n    @classmethod\n    def suitable(cls, url):\n        return False if PacktPubIE.suitable(url) else super(\n            PacktPubCourseIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        url, course_id = mobj.group('url', 'id')\n\n        course = self._download_json(\n            '%s/products/%s/metadata' % (self._MAPT_REST, course_id),\n            course_id)['data']\n\n        entries = []\n        for chapter_num, chapter in enumerate(course['tableOfContents'], 1):\n            if chapter.get('type') != 'chapter':\n                continue\n            children = chapter.get('children')\n            if not isinstance(children, list):\n                continue\n            chapter_info = {\n                'chapter': chapter.get('title'),\n                'chapter_number': chapter_num,\n                'chapter_id': chapter.get('id'),\n            }\n            for section in children:\n                if section.get('type') != 'section':\n                    continue\n                section_url = section.get('seoUrl')\n                if not isinstance(section_url, compat_str):\n                    continue\n                entry = {\n                    '_type': 'url_transparent',\n                    'url': urljoin(url + '/', section_url),\n                    'title': strip_or_none(section.get('title')),\n                    'description': clean_html(section.get('summary')),\n                    'ie_key': PacktPubIE.ie_key(),\n                }\n                entry.update(chapter_info)\n                entries.append(entry)\n\n        return self.playlist_result(entries, course_id, course.get('title'))\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_HTTPError,\n)\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n    remove_end,\n    strip_or_none,\n    unified_timestamp,\n    urljoin,\n)\n\n\nclass PacktPubBaseIE(InfoExtractor):\n    _PACKT_BASE = 'https://www.packtpub.com'\n    _MAPT_REST = '%s/mapt-rest' % _PACKT_BASE\n\n\nclass PacktPubIE(PacktPubBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?packtpub\\.com/mapt/video/[^/]+/(?P<course_id>\\d+)/(?P<chapter_id>\\d+)/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'https://www.packtpub.com/mapt/video/web-development/9781787122215/20528/20530/Project+Intro',\n        'md5': '1e74bd6cfd45d7d07666f4684ef58f70',\n        'info_dict': {\n            'id': '20530',\n            'ext': 'mp4',\n            'title': 'Project Intro',\n            'thumbnail': r're:(?i)^https?://.*\\.jpg',\n            'timestamp': 1490918400,\n            'upload_date': '20170331',\n        },\n    }\n    _NETRC_MACHINE = 'packtpub'\n    _TOKEN = None\n\n    def _real_initialize(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n        try:\n            self._TOKEN = self._download_json(\n                self._MAPT_REST + '/users/tokens', None,\n                'Downloading Authorization Token', data=json.dumps({\n                    'email': username,\n                    'password': password,\n                }).encode())['data']['access']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code in (400, 401, 404):\n                message = self._parse_json(e.cause.read().decode(), None)['message']\n                raise ExtractorError(message, expected=True)\n            raise\n\n    def _handle_error(self, response):\n        if response.get('status') != 'success':\n            raise ExtractorError(\n                '% said: %s' % (self.IE_NAME, response['message']),\n                expected=True)\n\n    def _download_json(self, *args, **kwargs):\n        response = super(PacktPubIE, self)._download_json(*args, **kwargs)\n        self._handle_error(response)\n        return response\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        course_id, chapter_id, video_id = mobj.group(\n            'course_id', 'chapter_id', 'id')\n\n        headers = {}\n        if self._TOKEN:\n            headers['Authorization'] = 'Bearer ' + self._TOKEN\n        video = self._download_json(\n            '%s/users/me/products/%s/chapters/%s/sections/%s'\n            % (self._MAPT_REST, course_id, chapter_id, video_id), video_id,\n            'Downloading JSON video', headers=headers)['data']\n\n        content = video.get('content')\n        if not content:\n            self.raise_login_required('This video is locked')\n\n        video_url = content['file']\n\n        metadata = self._download_json(\n            '%s/products/%s/chapters/%s/sections/%s/metadata'\n            % (self._MAPT_REST, course_id, chapter_id, video_id),\n            video_id)['data']\n\n        title = metadata['pageTitle']\n        course_title = metadata.get('title')\n        if course_title:\n            title = remove_end(title, ' - %s' % course_title)\n        timestamp = unified_timestamp(metadata.get('publicationDate'))\n        thumbnail = urljoin(self._PACKT_BASE, metadata.get('filepath'))\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n        }\n\n\nclass PacktPubCourseIE(PacktPubBaseIE):\n    _VALID_URL = r'(?P<url>https?://(?:www\\.)?packtpub\\.com/mapt/video/[^/]+/(?P<id>\\d+))'\n    _TEST = {\n        'url': 'https://www.packtpub.com/mapt/video/web-development/9781787122215',\n        'info_dict': {\n            'id': '9781787122215',\n            'title': 'Learn Nodejs by building 12 projects [Video]',\n        },\n        'playlist_count': 90,\n    }\n\n    @classmethod\n    def suitable(cls, url):\n        return False if PacktPubIE.suitable(url) else super(\n            PacktPubCourseIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        url, course_id = mobj.group('url', 'id')\n\n        course = self._download_json(\n            '%s/products/%s/metadata' % (self._MAPT_REST, course_id),\n            course_id)['data']\n\n        entries = []\n        for chapter_num, chapter in enumerate(course['tableOfContents'], 1):\n            if chapter.get('type') != 'chapter':\n                continue\n            children = chapter.get('children')\n            if not isinstance(children, list):\n                continue\n            chapter_info = {\n                'chapter': chapter.get('title'),\n                'chapter_number': chapter_num,\n                'chapter_id': chapter.get('id'),\n            }\n            for section in children:\n                if section.get('type') != 'section':\n                    continue\n                section_url = section.get('seoUrl')\n                if not isinstance(section_url, compat_str):\n                    continue\n                entry = {\n                    '_type': 'url_transparent',\n                    'url': urljoin(url + '/', section_url),\n                    'title': strip_or_none(section.get('title')),\n                    'description': clean_html(section.get('summary')),\n                    'ie_key': PacktPubIE.ie_key(),\n                }\n                entry.update(chapter_info)\n                entries.append(entry)\n\n        return self.playlist_result(entries, course_id, course.get('title'))\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "packtpub.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/packtpub.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}