{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_filesize,\n    parse_iso8601,\n)\n\n\nclass UMGDeIE(InfoExtractor):\n    IE_NAME = 'umg:de'\n    IE_DESC = 'Universal Music Deutschland'\n    _VALID_URL = r'https?://(?:www\\.)?universal-music\\.de/[^/]+/videos/[^/?\n    _TEST = {\n        'url': 'https://www.universal-music.de/sido/videos/jedes-wort-ist-gold-wert-457803',\n        'md5': 'ebd90f48c80dcc82f77251eb1902634f',\n        'info_dict': {\n            'id': '457803',\n            'ext': 'mp4',\n            'title': 'Jedes Wort ist Gold wert',\n            'timestamp': 1513591800,\n            'upload_date': '20171218',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._download_json(\n            'https://api.universal-music.de/graphql',\n            video_id, query={\n                'query':  % video_id})['data']['universalMusic']['video']\n\n        title = video_data['headline']\n        hls_url_template = 'http://mediadelivery.universal-music-services.de/vod/mp4:autofill/storage/' + '/'.join(list(video_id)) + '/content/%s/file/playlist.m3u8'\n\n        thumbnails = []\n        formats = []\n\n        def add_m3u8_format(format_id):\n            m3u8_formats = self._extract_m3u8_formats(\n                hls_url_template % format_id, video_id, 'mp4',\n                'm3u8_native', m3u8_id='hls', fatal='False')\n            if m3u8_formats and m3u8_formats[0].get('height'):\n                formats.extend(m3u8_formats)\n\n        for f in video_data.get('formats', []):\n            f_url = f.get('url')\n            mime_type = f.get('mimeType')\n            if not f_url or mime_type == 'application/mxf':\n                continue\n            fmt = {\n                'url': f_url,\n                'width': int_or_none(f.get('width')),\n                'height': int_or_none(f.get('height')),\n                'filesize': parse_filesize(f.get('fileSize')),\n            }\n            f_type = f.get('type')\n            if f_type == 'Image':\n                thumbnails.append(fmt)\n            elif f_type == 'Video':\n                format_id = f.get('formatId')\n                if format_id:\n                    fmt['format_id'] = format_id\n                    if mime_type == 'video/mp4':\n                        add_m3u8_format(format_id)\n                urlh = self._request_webpage(f_url, video_id, fatal=False)\n                if urlh:\n                    first_byte = urlh.read(1)\n                    if first_byte not in (b'F', b'\\x00'):\n                        continue\n                    formats.append(fmt)\n        if not formats:\n            for format_id in (867, 836, 940):\n                add_m3u8_format(format_id)\n        self._sort_formats(formats, ('width', 'height', 'filesize', 'tbr'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'duration': int_or_none(video_data.get('duration')),\n            'timestamp': parse_iso8601(video_data.get('createdDate'), ' '),\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "comments": "{\n  universalMusic(channel:16) {\n    video(id:%s) {\n      headline\n      formats {\n        formatId\n        url\n        type\n        width\n        height\n        mimeType\n        fileSize\n      }\n      duration\n      createdDate\n    }\n  }\n}\n}\n# coding: utf-8\n#]+-(?P<id>\\d+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_filesize,\n    parse_iso8601,\n)\n\n\nclass UMGDeIE(InfoExtractor):\n    IE_NAME = 'umg:de'\n    IE_DESC = 'Universal Music Deutschland'\n    _VALID_URL = r'https?://(?:www\\.)?universal-music\\.de/[^/]+/videos/[^/?#]+-(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://www.universal-music.de/sido/videos/jedes-wort-ist-gold-wert-457803',\n        'md5': 'ebd90f48c80dcc82f77251eb1902634f',\n        'info_dict': {\n            'id': '457803',\n            'ext': 'mp4',\n            'title': 'Jedes Wort ist Gold wert',\n            'timestamp': 1513591800,\n            'upload_date': '20171218',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._download_json(\n            'https://api.universal-music.de/graphql',\n            video_id, query={\n                'query': '''{\n  universalMusic(channel:16) {\n    video(id:%s) {\n      headline\n      formats {\n        formatId\n        url\n        type\n        width\n        height\n        mimeType\n        fileSize\n      }\n      duration\n      createdDate\n    }\n  }\n}''' % video_id})['data']['universalMusic']['video']\n\n        title = video_data['headline']\n        hls_url_template = 'http://mediadelivery.universal-music-services.de/vod/mp4:autofill/storage/' + '/'.join(list(video_id)) + '/content/%s/file/playlist.m3u8'\n\n        thumbnails = []\n        formats = []\n\n        def add_m3u8_format(format_id):\n            m3u8_formats = self._extract_m3u8_formats(\n                hls_url_template % format_id, video_id, 'mp4',\n                'm3u8_native', m3u8_id='hls', fatal='False')\n            if m3u8_formats and m3u8_formats[0].get('height'):\n                formats.extend(m3u8_formats)\n\n        for f in video_data.get('formats', []):\n            f_url = f.get('url')\n            mime_type = f.get('mimeType')\n            if not f_url or mime_type == 'application/mxf':\n                continue\n            fmt = {\n                'url': f_url,\n                'width': int_or_none(f.get('width')),\n                'height': int_or_none(f.get('height')),\n                'filesize': parse_filesize(f.get('fileSize')),\n            }\n            f_type = f.get('type')\n            if f_type == 'Image':\n                thumbnails.append(fmt)\n            elif f_type == 'Video':\n                format_id = f.get('formatId')\n                if format_id:\n                    fmt['format_id'] = format_id\n                    if mime_type == 'video/mp4':\n                        add_m3u8_format(format_id)\n                urlh = self._request_webpage(f_url, video_id, fatal=False)\n                if urlh:\n                    first_byte = urlh.read(1)\n                    if first_byte not in (b'F', b'\\x00'):\n                        continue\n                    formats.append(fmt)\n        if not formats:\n            for format_id in (867, 836, 940):\n                add_m3u8_format(format_id)\n        self._sort_formats(formats, ('width', 'height', 'filesize', 'tbr'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'duration': int_or_none(video_data.get('duration')),\n            'timestamp': parse_iso8601(video_data.get('createdDate'), ' '),\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "umg.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/umg.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}