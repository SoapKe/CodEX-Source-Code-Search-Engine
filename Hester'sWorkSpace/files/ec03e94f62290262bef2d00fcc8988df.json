{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass VideofyMeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.videofy\\.me/.+?|p\\.videofy\\.me/v)/(?P<id>\\d+)(&|\n    IE_NAME = 'videofy.me'\n\n    _TEST = {\n        'url': 'http://www.videofy.me/thisisvideofyme/1100701',\n        'md5': 'c77d700bdc16ae2e9f3c26019bd96143',\n        'info_dict': {\n            'id': '1100701',\n            'ext': 'mp4',\n            'title': 'This is VideofyMe',\n            'description': '',\n            'upload_date': '20130326',\n            'timestamp': 1364288959,\n            'uploader': 'VideofyMe',\n            'uploader_id': 'thisisvideofyme',\n            'view_count': int,\n            'likes': int,\n            'comment_count': int,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        config = self._download_json('http://vf-player-info-loader.herokuapp.com/%s.json' % video_id, video_id)['videoinfo']\n\n        video = config.get('video')\n        blog = config.get('blog', {})\n\n        return {\n            'id': video_id,\n            'title': video['title'],\n            'url': video['sources']['source']['url'],\n            'thumbnail': video.get('thumb'),\n            'description': video.get('description'),\n            'timestamp': parse_iso8601(video.get('date')),\n            'uploader': blog.get('name'),\n            'uploader_id': blog.get('identifier'),\n            'view_count': int_or_none(self._search_regex(r'([0-9]+)', video.get('views'), 'view count', fatal=False)),\n            'likes': int_or_none(video.get('likes')),\n            'comment_count': int_or_none(video.get('nrOfComments')),\n        }\n", "comments": "#|$)'\n", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass VideofyMeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.videofy\\.me/.+?|p\\.videofy\\.me/v)/(?P<id>\\d+)(&|#|$)'\n    IE_NAME = 'videofy.me'\n\n    _TEST = {\n        'url': 'http://www.videofy.me/thisisvideofyme/1100701',\n        'md5': 'c77d700bdc16ae2e9f3c26019bd96143',\n        'info_dict': {\n            'id': '1100701',\n            'ext': 'mp4',\n            'title': 'This is VideofyMe',\n            'description': '',\n            'upload_date': '20130326',\n            'timestamp': 1364288959,\n            'uploader': 'VideofyMe',\n            'uploader_id': 'thisisvideofyme',\n            'view_count': int,\n            'likes': int,\n            'comment_count': int,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        config = self._download_json('http://vf-player-info-loader.herokuapp.com/%s.json' % video_id, video_id)['videoinfo']\n\n        video = config.get('video')\n        blog = config.get('blog', {})\n\n        return {\n            'id': video_id,\n            'title': video['title'],\n            'url': video['sources']['source']['url'],\n            'thumbnail': video.get('thumb'),\n            'description': video.get('description'),\n            'timestamp': parse_iso8601(video.get('date')),\n            'uploader': blog.get('name'),\n            'uploader_id': blog.get('identifier'),\n            'view_count': int_or_none(self._search_regex(r'([0-9]+)', video.get('views'), 'view count', fatal=False)),\n            'likes': int_or_none(video.get('likes')),\n            'comment_count': int_or_none(video.get('nrOfComments')),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "videofyme.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/videofyme.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}