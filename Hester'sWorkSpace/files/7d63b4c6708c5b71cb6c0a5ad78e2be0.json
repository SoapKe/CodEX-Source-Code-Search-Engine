{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\nimport numpy as np\n\nANGLE_EPS = 0.001\n\n\ndef normalize(v):\n  return v / np.linalg.norm(v)\n\n\ndef get_r_matrix(ax_, angle):\n  ax = normalize(ax_)\n  if np.abs(angle) > ANGLE_EPS:\n    S_hat = np.array(\n        [[0.0, -ax[2], ax[1]], [ax[2], 0.0, -ax[0]], [-ax[1], ax[0], 0.0]],\n        dtype=np.float32)\n    R = np.eye(3) + np.sin(angle)*S_hat + \\\n        (1-np.cos(angle))*(np.linalg.matrix_power(S_hat, 2))\n  else:\n    R = np.eye(3)\n  return R\n\n\ndef r_between(v_from_, v_to_):\n  v_from = normalize(v_from_)\n  v_to = normalize(v_to_)\n  ax = normalize(np.cross(v_from, v_to))\n  angle = np.arccos(np.dot(v_from, v_to))\n  return get_r_matrix(ax, angle)\n\n\ndef rotate_camera_to_point_at(up_from, lookat_from, up_to, lookat_to):\n  inputs = [up_from, lookat_from, up_to, lookat_to]\n  for i in range(4):\n    inputs[i] = normalize(np.array(inputs[i]).reshape((-1,)))\n  up_from, lookat_from, up_to, lookat_to = inputs\n  r1 = r_between(lookat_from, lookat_to)\n\n  new_x = np.dot(r1, np.array([1, 0, 0]).reshape((-1, 1))).reshape((-1))\n  to_x = normalize(np.cross(lookat_to, up_to))\n  angle = np.arccos(np.dot(new_x, to_x))\n  if angle > ANGLE_EPS:\n    if angle < np.pi - ANGLE_EPS:\n      ax = normalize(np.cross(new_x, to_x))\n      flip = np.dot(lookat_to, ax)\n      if flip > 0:\n        r2 = get_r_matrix(lookat_to, angle)\n      elif flip < 0:\n        r2 = get_r_matrix(lookat_to, -1. * angle)\n    else:\n       Angle of rotation is too close to 180 degrees, direction of rotation\n       does not matter.\n      r2 = get_r_matrix(lookat_to, angle)\n  else:\n    r2 = np.eye(3)\n  return np.dot(r2, r1)\n\n", "comments": "   utilities generating applying rotation matrices         copyright 2016 the tensorflow authors all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       angle rotation close 180 degrees  direction rotation    matter  ", "content": "# Copyright 2016 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"Utilities for generating and applying rotation matrices.\n\"\"\"\nimport numpy as np\n\nANGLE_EPS = 0.001\n\n\ndef normalize(v):\n  return v / np.linalg.norm(v)\n\n\ndef get_r_matrix(ax_, angle):\n  ax = normalize(ax_)\n  if np.abs(angle) > ANGLE_EPS:\n    S_hat = np.array(\n        [[0.0, -ax[2], ax[1]], [ax[2], 0.0, -ax[0]], [-ax[1], ax[0], 0.0]],\n        dtype=np.float32)\n    R = np.eye(3) + np.sin(angle)*S_hat + \\\n        (1-np.cos(angle))*(np.linalg.matrix_power(S_hat, 2))\n  else:\n    R = np.eye(3)\n  return R\n\n\ndef r_between(v_from_, v_to_):\n  v_from = normalize(v_from_)\n  v_to = normalize(v_to_)\n  ax = normalize(np.cross(v_from, v_to))\n  angle = np.arccos(np.dot(v_from, v_to))\n  return get_r_matrix(ax, angle)\n\n\ndef rotate_camera_to_point_at(up_from, lookat_from, up_to, lookat_to):\n  inputs = [up_from, lookat_from, up_to, lookat_to]\n  for i in range(4):\n    inputs[i] = normalize(np.array(inputs[i]).reshape((-1,)))\n  up_from, lookat_from, up_to, lookat_to = inputs\n  r1 = r_between(lookat_from, lookat_to)\n\n  new_x = np.dot(r1, np.array([1, 0, 0]).reshape((-1, 1))).reshape((-1))\n  to_x = normalize(np.cross(lookat_to, up_to))\n  angle = np.arccos(np.dot(new_x, to_x))\n  if angle > ANGLE_EPS:\n    if angle < np.pi - ANGLE_EPS:\n      ax = normalize(np.cross(new_x, to_x))\n      flip = np.dot(lookat_to, ax)\n      if flip > 0:\n        r2 = get_r_matrix(lookat_to, angle)\n      elif flip < 0:\n        r2 = get_r_matrix(lookat_to, -1. * angle)\n    else:\n      # Angle of rotation is too close to 180 degrees, direction of rotation\n      # does not matter.\n      r2 = get_r_matrix(lookat_to, angle)\n  else:\n    r2 = np.eye(3)\n  return np.dot(r2, r1)\n\n", "description": "Models and examples built with TensorFlow", "file_name": "rotation_utils.py", "id": "7d63b4c6708c5b71cb6c0a5ad78e2be0", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/research/cognitive_mapping_and_planning/src/rotation_utils.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}