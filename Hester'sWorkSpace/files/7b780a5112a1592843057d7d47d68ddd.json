{"author": "mopidy", "code": "from __future__ import absolute_import, unicode_literals\n\nimport unittest\n\nfrom mopidy.mpd.exceptions import (\n    MpdAckError, MpdNoCommand, MpdNoExistError, MpdNotImplemented,\n    MpdPermissionError, MpdSystemError, MpdUnknownCommand)\n\n\nclass MpdExceptionsTest(unittest.TestCase):\n\n    def test_mpd_not_implemented_is_a_mpd_ack_error(self):\n        try:\n            raise MpdNotImplemented\n        except MpdAckError as e:\n            self.assertEqual(e.message, 'Not implemented')\n\n    def test_get_mpd_ack_with_default_values(self):\n        e = MpdAckError('A description')\n        self.assertEqual(e.get_mpd_ack(), 'ACK [0@0] {None} A description')\n\n    def test_get_mpd_ack_with_values(self):\n        try:\n            raise MpdAckError('A description', index=7, command='foo')\n        except MpdAckError as e:\n            self.assertEqual(e.get_mpd_ack(), 'ACK [0@7] {foo} A description')\n\n    def test_mpd_unknown_command(self):\n        try:\n            raise MpdUnknownCommand(command='play')\n        except MpdAckError as e:\n            self.assertEqual(\n                e.get_mpd_ack(), 'ACK [5@0] {} unknown command \"play\"')\n\n    def test_mpd_no_command(self):\n        try:\n            raise MpdNoCommand\n        except MpdAckError as e:\n            self.assertEqual(\n                e.get_mpd_ack(), 'ACK [5@0] {} No command given')\n\n    def test_mpd_system_error(self):\n        try:\n            raise MpdSystemError('foo')\n        except MpdSystemError as e:\n            self.assertEqual(\n                e.get_mpd_ack(), 'ACK [52@0] {None} foo')\n\n    def test_mpd_permission_error(self):\n        try:\n            raise MpdPermissionError(command='foo')\n        except MpdPermissionError as e:\n            self.assertEqual(\n                e.get_mpd_ack(),\n                'ACK [4@0] {foo} you don\\'t have permission for \"foo\"')\n\n    def test_mpd_noexist_error(self):\n        try:\n            raise MpdNoExistError(command='foo')\n        except MpdNoExistError as e:\n            self.assertEqual(\n                e.get_mpd_ack(),\n                'ACK [50@0] {foo} ')\n", "comments": "", "content": "from __future__ import absolute_import, unicode_literals\n\nimport unittest\n\nfrom mopidy.mpd.exceptions import (\n    MpdAckError, MpdNoCommand, MpdNoExistError, MpdNotImplemented,\n    MpdPermissionError, MpdSystemError, MpdUnknownCommand)\n\n\nclass MpdExceptionsTest(unittest.TestCase):\n\n    def test_mpd_not_implemented_is_a_mpd_ack_error(self):\n        try:\n            raise MpdNotImplemented\n        except MpdAckError as e:\n            self.assertEqual(e.message, 'Not implemented')\n\n    def test_get_mpd_ack_with_default_values(self):\n        e = MpdAckError('A description')\n        self.assertEqual(e.get_mpd_ack(), 'ACK [0@0] {None} A description')\n\n    def test_get_mpd_ack_with_values(self):\n        try:\n            raise MpdAckError('A description', index=7, command='foo')\n        except MpdAckError as e:\n            self.assertEqual(e.get_mpd_ack(), 'ACK [0@7] {foo} A description')\n\n    def test_mpd_unknown_command(self):\n        try:\n            raise MpdUnknownCommand(command='play')\n        except MpdAckError as e:\n            self.assertEqual(\n                e.get_mpd_ack(), 'ACK [5@0] {} unknown command \"play\"')\n\n    def test_mpd_no_command(self):\n        try:\n            raise MpdNoCommand\n        except MpdAckError as e:\n            self.assertEqual(\n                e.get_mpd_ack(), 'ACK [5@0] {} No command given')\n\n    def test_mpd_system_error(self):\n        try:\n            raise MpdSystemError('foo')\n        except MpdSystemError as e:\n            self.assertEqual(\n                e.get_mpd_ack(), 'ACK [52@0] {None} foo')\n\n    def test_mpd_permission_error(self):\n        try:\n            raise MpdPermissionError(command='foo')\n        except MpdPermissionError as e:\n            self.assertEqual(\n                e.get_mpd_ack(),\n                'ACK [4@0] {foo} you don\\'t have permission for \"foo\"')\n\n    def test_mpd_noexist_error(self):\n        try:\n            raise MpdNoExistError(command='foo')\n        except MpdNoExistError as e:\n            self.assertEqual(\n                e.get_mpd_ack(),\n                'ACK [50@0] {foo} ')\n", "description": "Mopidy is an extensible music server that plays music from local disk, Spotify, SoundCloud, Google Play Music, and more. You edit the playlist from any phone, tablet, or computer using a range of MPD and web clients.", "file_name": "test_exceptions.py", "id": "7b780a5112a1592843057d7d47d68ddd", "language": "Python", "project_name": "mopidy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mopidy-mopidy/mopidy-mopidy-79d42c3/tests/mpd/test_exceptions.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:12:51Z", "url": "https://github.com/mopidy/mopidy", "wiki": false}