{"author": "HelloZeroNet", "code": "import time\n\nimport gevent\n\nfrom Plugin import PluginManager\nfrom Config import config\nimport BroadcastServer\n\n\n@PluginManager.registerTo(\"Site\")\nclass SitePlugin(object):\n    def announce(self, force=False, mode=\"start\", *args, **kwargs):\n        local_announcer = self.connection_server.local_announcer\n\n        if local_announcer and (force or time.time() - local_announcer.last_discover > 5 * 60):\n            local_announcer.discover(force=force)\n\n        return super(SitePlugin, self).announce(force=force, mode=mode, *args, **kwargs)\n\n\nclass LocalAnnouncer(BroadcastServer.BroadcastServer):\n    def __init__(self, server, listen_port):\n        super(LocalAnnouncer, self).__init__(\"zeronet\", listen_port=listen_port)\n        self.server = server\n\n        self.sender_info[\"peer_id\"] = self.server.peer_id\n        self.sender_info[\"port\"] = self.server.port\n        self.sender_info[\"broadcast_port\"] = listen_port\n        self.sender_info[\"rev\"] = config.rev\n\n        self.known_peers = {}\n        self.last_discover = 0\n\n    def discover(self, force=False):\n        self.log.debug(\"Sending discover request (force: %s)\" % force)\n        self.last_discover = time.time()\n        if force:  \n            self.known_peers = {}\n\n        for peer_id, known_peer in self.known_peers.items():\n            if time.time() - known_peer[\"found\"] > 20 * 60:\n                del(self.known_peers[peer_id])\n                self.log.debug(\"Timeout, removing from known_peers: %s\" % peer_id)\n        self.broadcast({\"cmd\": \"discoverRequest\", \"params\": {}}, port=self.listen_port)\n\n    def actionDiscoverRequest(self, sender, params):\n        back = {\n            \"cmd\": \"discoverResponse\",\n            \"params\": {\n                \"sites_changed\": self.server.site_manager.sites_changed\n            }\n        }\n\n        if sender[\"peer_id\"] not in self.known_peers:\n            self.log.debug(\"Got discover request from unknown peer %s, time to refresh known peers\" % sender[\"ip\"])\n            gevent.spawn_later(1.0, self.discover)  \n\n        return back\n\n    def actionDiscoverResponse(self, sender, params):\n        if sender[\"peer_id\"] in self.known_peers:\n            self.known_peers[sender[\"peer_id\"]][\"found\"] = time.time()\n        if params[\"sites_changed\"] != self.known_peers.get(sender[\"peer_id\"], {}).get(\"sites_changed\"):\n            \n            return {\"cmd\": \"siteListRequest\"}\n        else:\n            \n            for site in self.server.sites.values():\n                peer = site.peers.get(\"%s:%s\" % (sender[\"ip\"], sender[\"port\"]))\n                if peer:\n                    peer.found(\"local\")\n\n    def actionSiteListRequest(self, sender, params):\n        back = []\n        sites = self.server.sites.values()\n\n        \n        site_groups = [sites[i:i + 100] for i in range(0, len(sites), 100)]\n        for site_group in site_groups:\n            res = {}\n            res[\"sites_changed\"] = self.server.site_manager.sites_changed\n            res[\"sites\"] = [site.address_hash for site in site_group]\n            back.append({\"cmd\": \"siteListResponse\", \"params\": res})\n        return back\n\n    def actionSiteListResponse(self, sender, params):\n        s = time.time()\n        peer_sites = set(params[\"sites\"])\n        num_found = 0\n        added_sites = []\n        for site in self.server.sites.values():\n            if site.address_hash in peer_sites:\n                added = site.addPeer(sender[\"ip\"], sender[\"port\"], source=\"local\")\n                num_found += 1\n                if added:\n                    site.worker_manager.onPeers()\n                    site.updateWebsocket(peers_added=1)\n                    added_sites.append(site)\n\n        \n        if sender[\"peer_id\"] not in self.known_peers:\n            self.known_peers[sender[\"peer_id\"]] = {\"added\": time.time()}\n\n        self.known_peers[sender[\"peer_id\"]][\"sites_changed\"] = params[\"sites_changed\"]\n        self.known_peers[sender[\"peer_id\"]][\"updated\"] = time.time()\n        self.known_peers[sender[\"peer_id\"]][\"found\"] = time.time()\n\n        self.log.debug(\n            \"Tracker result: Discover from %s response parsed in %.3fs, found: %s added: %s of %s\" %\n            (sender[\"ip\"], time.time() - s, num_found, added_sites, len(peer_sites))\n        )\n\n\n@PluginManager.registerTo(\"FileServer\")\nclass FileServerPlugin(object):\n    def __init__(self, *args, **kwargs):\n        res = super(FileServerPlugin, self).__init__(*args, **kwargs)\n        if config.broadcast_port and config.tor != \"always\" and not config.disable_udp:\n            self.local_announcer = LocalAnnouncer(self, config.broadcast_port)\n        else:\n            self.local_announcer = None\n        return res\n\n    def start(self, *args, **kwargs):\n        if self.local_announcer:\n            gevent.spawn(self.local_announcer.start)\n        return super(FileServerPlugin, self).start(*args, **kwargs)\n\n    def stop(self):\n        if self.local_announcer:\n            self.local_announcer.stop()\n        res = super(FileServerPlugin, self).stop()\n        return res\n\n\n@PluginManager.registerTo(\"ConfigPlugin\")\nclass ConfigPlugin(object):\n    def createArguments(self):\n        group = self.parser.add_argument_group(\"AnnounceLocal plugin\")\n        group.add_argument('--broadcast_port', help='UDP broadcasting port for local peer discovery', default=1544, type=int, metavar='port')\n\n        return super(ConfigPlugin, self).createArguments()\n", "comments": "  probably new site added  clean cache    let response arrive first requester    peer site list changed  request list new sites    peer site list    split adresses group 100 avoid udp size limit    save sites changed value avoid unnecessary site list download ", "content": "import time\n\nimport gevent\n\nfrom Plugin import PluginManager\nfrom Config import config\nimport BroadcastServer\n\n\n@PluginManager.registerTo(\"Site\")\nclass SitePlugin(object):\n    def announce(self, force=False, mode=\"start\", *args, **kwargs):\n        local_announcer = self.connection_server.local_announcer\n\n        if local_announcer and (force or time.time() - local_announcer.last_discover > 5 * 60):\n            local_announcer.discover(force=force)\n\n        return super(SitePlugin, self).announce(force=force, mode=mode, *args, **kwargs)\n\n\nclass LocalAnnouncer(BroadcastServer.BroadcastServer):\n    def __init__(self, server, listen_port):\n        super(LocalAnnouncer, self).__init__(\"zeronet\", listen_port=listen_port)\n        self.server = server\n\n        self.sender_info[\"peer_id\"] = self.server.peer_id\n        self.sender_info[\"port\"] = self.server.port\n        self.sender_info[\"broadcast_port\"] = listen_port\n        self.sender_info[\"rev\"] = config.rev\n\n        self.known_peers = {}\n        self.last_discover = 0\n\n    def discover(self, force=False):\n        self.log.debug(\"Sending discover request (force: %s)\" % force)\n        self.last_discover = time.time()\n        if force:  # Probably new site added, clean cache\n            self.known_peers = {}\n\n        for peer_id, known_peer in self.known_peers.items():\n            if time.time() - known_peer[\"found\"] > 20 * 60:\n                del(self.known_peers[peer_id])\n                self.log.debug(\"Timeout, removing from known_peers: %s\" % peer_id)\n        self.broadcast({\"cmd\": \"discoverRequest\", \"params\": {}}, port=self.listen_port)\n\n    def actionDiscoverRequest(self, sender, params):\n        back = {\n            \"cmd\": \"discoverResponse\",\n            \"params\": {\n                \"sites_changed\": self.server.site_manager.sites_changed\n            }\n        }\n\n        if sender[\"peer_id\"] not in self.known_peers:\n            self.log.debug(\"Got discover request from unknown peer %s, time to refresh known peers\" % sender[\"ip\"])\n            gevent.spawn_later(1.0, self.discover)  # Let the response arrive first to the requester\n\n        return back\n\n    def actionDiscoverResponse(self, sender, params):\n        if sender[\"peer_id\"] in self.known_peers:\n            self.known_peers[sender[\"peer_id\"]][\"found\"] = time.time()\n        if params[\"sites_changed\"] != self.known_peers.get(sender[\"peer_id\"], {}).get(\"sites_changed\"):\n            # Peer's site list changed, request the list of new sites\n            return {\"cmd\": \"siteListRequest\"}\n        else:\n            # Peer's site list is the same\n            for site in self.server.sites.values():\n                peer = site.peers.get(\"%s:%s\" % (sender[\"ip\"], sender[\"port\"]))\n                if peer:\n                    peer.found(\"local\")\n\n    def actionSiteListRequest(self, sender, params):\n        back = []\n        sites = self.server.sites.values()\n\n        # Split adresses to group of 100 to avoid UDP size limit\n        site_groups = [sites[i:i + 100] for i in range(0, len(sites), 100)]\n        for site_group in site_groups:\n            res = {}\n            res[\"sites_changed\"] = self.server.site_manager.sites_changed\n            res[\"sites\"] = [site.address_hash for site in site_group]\n            back.append({\"cmd\": \"siteListResponse\", \"params\": res})\n        return back\n\n    def actionSiteListResponse(self, sender, params):\n        s = time.time()\n        peer_sites = set(params[\"sites\"])\n        num_found = 0\n        added_sites = []\n        for site in self.server.sites.values():\n            if site.address_hash in peer_sites:\n                added = site.addPeer(sender[\"ip\"], sender[\"port\"], source=\"local\")\n                num_found += 1\n                if added:\n                    site.worker_manager.onPeers()\n                    site.updateWebsocket(peers_added=1)\n                    added_sites.append(site)\n\n        # Save sites changed value to avoid unnecessary site list download\n        if sender[\"peer_id\"] not in self.known_peers:\n            self.known_peers[sender[\"peer_id\"]] = {\"added\": time.time()}\n\n        self.known_peers[sender[\"peer_id\"]][\"sites_changed\"] = params[\"sites_changed\"]\n        self.known_peers[sender[\"peer_id\"]][\"updated\"] = time.time()\n        self.known_peers[sender[\"peer_id\"]][\"found\"] = time.time()\n\n        self.log.debug(\n            \"Tracker result: Discover from %s response parsed in %.3fs, found: %s added: %s of %s\" %\n            (sender[\"ip\"], time.time() - s, num_found, added_sites, len(peer_sites))\n        )\n\n\n@PluginManager.registerTo(\"FileServer\")\nclass FileServerPlugin(object):\n    def __init__(self, *args, **kwargs):\n        res = super(FileServerPlugin, self).__init__(*args, **kwargs)\n        if config.broadcast_port and config.tor != \"always\" and not config.disable_udp:\n            self.local_announcer = LocalAnnouncer(self, config.broadcast_port)\n        else:\n            self.local_announcer = None\n        return res\n\n    def start(self, *args, **kwargs):\n        if self.local_announcer:\n            gevent.spawn(self.local_announcer.start)\n        return super(FileServerPlugin, self).start(*args, **kwargs)\n\n    def stop(self):\n        if self.local_announcer:\n            self.local_announcer.stop()\n        res = super(FileServerPlugin, self).stop()\n        return res\n\n\n@PluginManager.registerTo(\"ConfigPlugin\")\nclass ConfigPlugin(object):\n    def createArguments(self):\n        group = self.parser.add_argument_group(\"AnnounceLocal plugin\")\n        group.add_argument('--broadcast_port', help='UDP broadcasting port for local peer discovery', default=1544, type=int, metavar='port')\n\n        return super(ConfigPlugin, self).createArguments()\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "AnnounceLocalPlugin.py", "id": "5bd887258afe2f2a6b5ded72b3d87edd", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/AnnounceLocal/AnnounceLocalPlugin.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}