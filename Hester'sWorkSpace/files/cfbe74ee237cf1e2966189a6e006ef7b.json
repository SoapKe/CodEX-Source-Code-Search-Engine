{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    orderedSet,\n    unescapeHTML,\n)\n\n\nclass StanfordOpenClassroomIE(InfoExtractor):\n    IE_NAME = 'stanfordoc'\n    IE_DESC = 'Stanford Open ClassRoom'\n    _VALID_URL = r'https?://openclassroom\\.stanford\\.edu(?P<path>/?|(/MainFolder/(?:HomePage|CoursePage|VideoPage)\\.php([?]course=(?P<course>[^&]+)(&video=(?P<video>[^&]+))?(&.*)?)?))$'\n    _TEST = {\n        'url': 'http://openclassroom.stanford.edu/MainFolder/VideoPage.php?course=PracticalUnix&video=intro-environment&speed=100',\n        'md5': '544a9468546059d4e80d76265b0443b8',\n        'info_dict': {\n            'id': 'PracticalUnix_intro-environment',\n            'ext': 'mp4',\n            'title': 'Intro Environment',\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        if mobj.group('course') and mobj.group('video'):  \n            course = mobj.group('course')\n            video = mobj.group('video')\n            info = {\n                'id': course + '_' + video,\n                'uploader': None,\n                'upload_date': None,\n            }\n\n            baseUrl = 'http://openclassroom.stanford.edu/MainFolder/courses/' + course + '/videos/'\n            xmlUrl = baseUrl + video + '.xml'\n            mdoc = self._download_xml(xmlUrl, info['id'])\n            try:\n                info['title'] = mdoc.findall('./title')[0].text\n                info['url'] = baseUrl + mdoc.findall('./videoFile')[0].text\n            except IndexError:\n                raise ExtractorError('Invalid metadata XML file')\n            return info\n        elif mobj.group('course'):  \n            course = mobj.group('course')\n            info = {\n                'id': course,\n                '_type': 'playlist',\n                'uploader': None,\n                'upload_date': None,\n            }\n\n            coursepage = self._download_webpage(\n                url, info['id'],\n                note='Downloading course info page',\n                errnote='Unable to download course info page')\n\n            info['title'] = self._html_search_regex(\n                r'<h1>([^<]+)</h1>', coursepage, 'title', default=info['id'])\n\n            info['description'] = self._html_search_regex(\n                r'(?s)<description>([^<]+)</description>',\n                coursepage, 'description', fatal=False)\n\n            links = orderedSet(re.findall(r'<a href=\"(VideoPage\\.php\\?[^\"]+)\">', coursepage))\n            info['entries'] = [self.url_result(\n                'http://openclassroom.stanford.edu/MainFolder/%s' % unescapeHTML(l)\n            ) for l in links]\n            return info\n        else:  \n            info = {\n                'id': 'Stanford OpenClassroom',\n                '_type': 'playlist',\n                'uploader': None,\n                'upload_date': None,\n            }\n            info['title'] = info['id']\n\n            rootURL = 'http://openclassroom.stanford.edu/MainFolder/HomePage.php'\n            rootpage = self._download_webpage(rootURL, info['id'],\n                                              errnote='Unable to download course info page')\n\n            links = orderedSet(re.findall(r'<a href=\"(CoursePage\\.php\\?[^\"]+)\">', rootpage))\n            info['entries'] = [self.url_result(\n                'http://openclassroom.stanford.edu/MainFolder/%s' % unescapeHTML(l)\n            ) for l in links]\n            return info\n", "comments": "# A specific video\n# A course page\n# Root page\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    orderedSet,\n    unescapeHTML,\n)\n\n\nclass StanfordOpenClassroomIE(InfoExtractor):\n    IE_NAME = 'stanfordoc'\n    IE_DESC = 'Stanford Open ClassRoom'\n    _VALID_URL = r'https?://openclassroom\\.stanford\\.edu(?P<path>/?|(/MainFolder/(?:HomePage|CoursePage|VideoPage)\\.php([?]course=(?P<course>[^&]+)(&video=(?P<video>[^&]+))?(&.*)?)?))$'\n    _TEST = {\n        'url': 'http://openclassroom.stanford.edu/MainFolder/VideoPage.php?course=PracticalUnix&video=intro-environment&speed=100',\n        'md5': '544a9468546059d4e80d76265b0443b8',\n        'info_dict': {\n            'id': 'PracticalUnix_intro-environment',\n            'ext': 'mp4',\n            'title': 'Intro Environment',\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        if mobj.group('course') and mobj.group('video'):  # A specific video\n            course = mobj.group('course')\n            video = mobj.group('video')\n            info = {\n                'id': course + '_' + video,\n                'uploader': None,\n                'upload_date': None,\n            }\n\n            baseUrl = 'http://openclassroom.stanford.edu/MainFolder/courses/' + course + '/videos/'\n            xmlUrl = baseUrl + video + '.xml'\n            mdoc = self._download_xml(xmlUrl, info['id'])\n            try:\n                info['title'] = mdoc.findall('./title')[0].text\n                info['url'] = baseUrl + mdoc.findall('./videoFile')[0].text\n            except IndexError:\n                raise ExtractorError('Invalid metadata XML file')\n            return info\n        elif mobj.group('course'):  # A course page\n            course = mobj.group('course')\n            info = {\n                'id': course,\n                '_type': 'playlist',\n                'uploader': None,\n                'upload_date': None,\n            }\n\n            coursepage = self._download_webpage(\n                url, info['id'],\n                note='Downloading course info page',\n                errnote='Unable to download course info page')\n\n            info['title'] = self._html_search_regex(\n                r'<h1>([^<]+)</h1>', coursepage, 'title', default=info['id'])\n\n            info['description'] = self._html_search_regex(\n                r'(?s)<description>([^<]+)</description>',\n                coursepage, 'description', fatal=False)\n\n            links = orderedSet(re.findall(r'<a href=\"(VideoPage\\.php\\?[^\"]+)\">', coursepage))\n            info['entries'] = [self.url_result(\n                'http://openclassroom.stanford.edu/MainFolder/%s' % unescapeHTML(l)\n            ) for l in links]\n            return info\n        else:  # Root page\n            info = {\n                'id': 'Stanford OpenClassroom',\n                '_type': 'playlist',\n                'uploader': None,\n                'upload_date': None,\n            }\n            info['title'] = info['id']\n\n            rootURL = 'http://openclassroom.stanford.edu/MainFolder/HomePage.php'\n            rootpage = self._download_webpage(rootURL, info['id'],\n                                              errnote='Unable to download course info page')\n\n            links = orderedSet(re.findall(r'<a href=\"(CoursePage\\.php\\?[^\"]+)\">', rootpage))\n            info['entries'] = [self.url_result(\n                'http://openclassroom.stanford.edu/MainFolder/%s' % unescapeHTML(l)\n            ) for l in links]\n            return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "stanfordoc.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/stanfordoc.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}