{"author": "keon", "code": "\"\"\"\nNumbers can be regarded as product of its factors. For example,\n\n8 = 2 x 2 x 2;\n  = 2 x 4.\nWrite a function that takes an integer n and return all possible combinations of its factors.\n\nNote:\nYou may assume that n is always positive.\nFactors should be greater than 1 and less than n.\nExamples:\ninput: 1\noutput:\n[]\ninput: 37\noutput:\n[]\ninput: 12\noutput:\n[\n  [2, 6],\n  [2, 2, 3],\n  [3, 4]\n]\ninput: 32\noutput:\n[\n  [2, 16],\n  [2, 2, 8],\n  [2, 2, 2, 4],\n  [2, 2, 2, 2, 2],\n  [2, 4, 4],\n  [4, 8]\n]\n\"\"\"\n\n\n\ndef getFactors(self, n):\n    todo, combis = [(n, 2, [])], []\n    while todo:\n        n, i, combi = todo.pop()\n        while i * i <= n:\n            if n % i == 0:\n                combis.append(combi + [i, n//i]),\n                todo.append( [n // i, i, combi+[i] ] )  \n            i += 1\n    return combis\n\n\n\ndef getFactors(self, n):\n    def factor(n, i, combi, combis):\n        while i * i <= n:\n            if n % i == 0:\n                combis.append(combi + [i, n//i]),\n                factor(n//i, i, combi+[i], combis)\n            i += 1\n        return combis\n    return factor(n, 2, [], [])\n", "comments": "    numbers regarded product factors  for example   8   2 x 2 x 2      2 x 4  write function takes integer n return possible combinations factors   note  you may assume n always positive  factors greater 1 less n  examples  input  1 output     input  37 output     input  12 output       2  6      2  2  3      3  4    input  32 output       2  16      2  2  8      2  2  2  4      2  2  2  2  2      2  4  4      4  8           iterative     python3  n       recursive  ", "content": "\"\"\"\nNumbers can be regarded as product of its factors. For example,\n\n8 = 2 x 2 x 2;\n  = 2 x 4.\nWrite a function that takes an integer n and return all possible combinations of its factors.\n\nNote:\nYou may assume that n is always positive.\nFactors should be greater than 1 and less than n.\nExamples:\ninput: 1\noutput:\n[]\ninput: 37\noutput:\n[]\ninput: 12\noutput:\n[\n  [2, 6],\n  [2, 2, 3],\n  [3, 4]\n]\ninput: 32\noutput:\n[\n  [2, 16],\n  [2, 2, 8],\n  [2, 2, 2, 4],\n  [2, 2, 2, 2, 2],\n  [2, 4, 4],\n  [4, 8]\n]\n\"\"\"\n\n# Iterative:\n\ndef getFactors(self, n):\n    todo, combis = [(n, 2, [])], []\n    while todo:\n        n, i, combi = todo.pop()\n        while i * i <= n:\n            if n % i == 0:\n                combis.append(combi + [i, n//i]),\n                todo.append( [n // i, i, combi+[i] ] )  # python3: n // i\n            i += 1\n    return combis\n\n# Recursive:\n\ndef getFactors(self, n):\n    def factor(n, i, combi, combis):\n        while i * i <= n:\n            if n % i == 0:\n                combis.append(combi + [i, n//i]),\n                factor(n//i, i, combi+[i], combis)\n            i += 1\n        return combis\n    return factor(n, 2, [], [])\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "factor_combinations.py", "id": "b6805fc04e7d42bf555d85e858abd6c2", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/keon-algorithms/keon-algorithms-ea43887/backtrack/factor_combinations.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:53:29Z", "url": "https://github.com/keon/algorithms", "wiki": true}