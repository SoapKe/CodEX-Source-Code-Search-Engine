{"author": "HelloZeroNet", "code": "import array\n\n\ndef packPiecefield(data):\n    res = []\n    if not data:\n        return array.array(\"H\", \"\")\n\n    if data[0] == \"0\":\n        res.append(0)\n        find = \"1\"\n    else:\n        find = \"0\"\n    last_pos = 0\n    pos = 0\n    while 1:\n        pos = data.find(find, pos)\n        if find == \"0\":\n            find = \"1\"\n        else:\n            find = \"0\"\n        if pos == -1:\n            res.append(len(data) - last_pos)\n            break\n        res.append(pos - last_pos)\n        last_pos = pos\n    return array.array(\"H\", res)\n\n\ndef unpackPiecefield(data):\n    if not data:\n        return \"\"\n\n    res = []\n    char = \"1\"\n    for times in data:\n        if times > 10000:\n            return \"\"\n        res.append(char * times)\n        if char == \"1\":\n            char = \"0\"\n        else:\n            char = \"1\"\n    return \"\".join(res)\n\n\nclass BigfilePiecefield(object):\n    __slots__ = [\"data\"]\n\n    def __init__(self):\n        self.data = \"\"\n\n    def fromstring(self, s):\n        self.data = s\n\n    def tostring(self):\n        return self.data\n\n    def pack(self):\n        return packPiecefield(self.data).tostring()\n\n    def unpack(self, s):\n        self.data = unpackPiecefield(array.array(\"H\", s))\n\n    def __getitem__(self, key):\n        try:\n            return int(self.data[key])\n        except IndexError:\n            return False\n\n    def __setitem__(self, key, value):\n        data = self.data\n        if len(data) < key:\n            data = data.ljust(key+1, \"0\")\n        data = data[:key] + str(int(value)) + data[key + 1:]\n        self.data = data\n\n\nclass BigfilePiecefieldPacked(object):\n    __slots__ = [\"data\"]\n\n    def __init__(self):\n        self.data = \"\"\n\n    def fromstring(self, data):\n        self.data = packPiecefield(data).tostring()\n\n    def tostring(self):\n        return unpackPiecefield(array.array(\"H\", self.data))\n\n    def pack(self):\n        return array.array(\"H\", self.data).tostring()\n\n    def unpack(self, data):\n        self.data = data\n\n    def __getitem__(self, key):\n        try:\n            return int(self.tostring()[key])\n        except IndexError:\n            return False\n\n    def __setitem__(self, key, value):\n        data = self.tostring()\n        if len(data) < key:\n            data = data.ljust(key+1, \"0\")\n        data = data[:key] + str(int(value)) + data[key + 1:]\n        self.fromstring(data)\n\n\nif __name__ == \"__main__\":\n    import os\n    import psutil\n    import time\n    testdata = \"1\" * 100 + \"0\" * 900 + \"1\" * 4000 + \"0\" * 4999 + \"1\"\n    meminfo = psutil.Process(os.getpid()).memory_info\n\n    for storage in [BigfilePiecefieldPacked, BigfilePiecefield]:\n        print \"-- Testing storage: %s --\" % storage\n        m = meminfo()[0]\n        s = time.time()\n        piecefields = {}\n        for i in range(10000):\n            piecefield = storage()\n            piecefield.fromstring(testdata[:i] + \"0\" + testdata[i + 1:])\n            piecefields[i] = piecefield\n\n        print \"Create x10000: +%sKB in %.3fs (len: %s)\" % ((meminfo()[0] - m) / 1024, time.time() - s, len(piecefields[0].data))\n\n        m = meminfo()[0]\n        s = time.time()\n        for piecefield in piecefields.values():\n            val = piecefield[1000]\n\n        print \"Query one x10000: +%sKB in %.3fs\" % ((meminfo()[0] - m) / 1024, time.time() - s)\n\n        m = meminfo()[0]\n        s = time.time()\n        for piecefield in piecefields.values():\n            piecefield[1000] = True\n\n        print \"Change one x10000: +%sKB in %.3fs\" % ((meminfo()[0] - m) / 1024, time.time() - s)\n\n        m = meminfo()[0]\n        s = time.time()\n        for piecefield in piecefields.values():\n            packed = piecefield.pack()\n\n        print \"Pack x10000: +%sKB in %.3fs (len: %s)\" % ((meminfo()[0] - m) / 1024, time.time() - s, len(packed))\n\n        m = meminfo()[0]\n        s = time.time()\n        for piecefield in piecefields.values():\n            piecefield.unpack(packed)\n\n        print \"Unpack x10000: +%sKB in %.3fs (len: %s)\" % ((meminfo()[0] - m) / 1024, time.time() - s, len(piecefields[0].data))\n\n        piecefields = {}\n", "comments": "", "content": "import array\n\n\ndef packPiecefield(data):\n    res = []\n    if not data:\n        return array.array(\"H\", \"\")\n\n    if data[0] == \"0\":\n        res.append(0)\n        find = \"1\"\n    else:\n        find = \"0\"\n    last_pos = 0\n    pos = 0\n    while 1:\n        pos = data.find(find, pos)\n        if find == \"0\":\n            find = \"1\"\n        else:\n            find = \"0\"\n        if pos == -1:\n            res.append(len(data) - last_pos)\n            break\n        res.append(pos - last_pos)\n        last_pos = pos\n    return array.array(\"H\", res)\n\n\ndef unpackPiecefield(data):\n    if not data:\n        return \"\"\n\n    res = []\n    char = \"1\"\n    for times in data:\n        if times > 10000:\n            return \"\"\n        res.append(char * times)\n        if char == \"1\":\n            char = \"0\"\n        else:\n            char = \"1\"\n    return \"\".join(res)\n\n\nclass BigfilePiecefield(object):\n    __slots__ = [\"data\"]\n\n    def __init__(self):\n        self.data = \"\"\n\n    def fromstring(self, s):\n        self.data = s\n\n    def tostring(self):\n        return self.data\n\n    def pack(self):\n        return packPiecefield(self.data).tostring()\n\n    def unpack(self, s):\n        self.data = unpackPiecefield(array.array(\"H\", s))\n\n    def __getitem__(self, key):\n        try:\n            return int(self.data[key])\n        except IndexError:\n            return False\n\n    def __setitem__(self, key, value):\n        data = self.data\n        if len(data) < key:\n            data = data.ljust(key+1, \"0\")\n        data = data[:key] + str(int(value)) + data[key + 1:]\n        self.data = data\n\n\nclass BigfilePiecefieldPacked(object):\n    __slots__ = [\"data\"]\n\n    def __init__(self):\n        self.data = \"\"\n\n    def fromstring(self, data):\n        self.data = packPiecefield(data).tostring()\n\n    def tostring(self):\n        return unpackPiecefield(array.array(\"H\", self.data))\n\n    def pack(self):\n        return array.array(\"H\", self.data).tostring()\n\n    def unpack(self, data):\n        self.data = data\n\n    def __getitem__(self, key):\n        try:\n            return int(self.tostring()[key])\n        except IndexError:\n            return False\n\n    def __setitem__(self, key, value):\n        data = self.tostring()\n        if len(data) < key:\n            data = data.ljust(key+1, \"0\")\n        data = data[:key] + str(int(value)) + data[key + 1:]\n        self.fromstring(data)\n\n\nif __name__ == \"__main__\":\n    import os\n    import psutil\n    import time\n    testdata = \"1\" * 100 + \"0\" * 900 + \"1\" * 4000 + \"0\" * 4999 + \"1\"\n    meminfo = psutil.Process(os.getpid()).memory_info\n\n    for storage in [BigfilePiecefieldPacked, BigfilePiecefield]:\n        print \"-- Testing storage: %s --\" % storage\n        m = meminfo()[0]\n        s = time.time()\n        piecefields = {}\n        for i in range(10000):\n            piecefield = storage()\n            piecefield.fromstring(testdata[:i] + \"0\" + testdata[i + 1:])\n            piecefields[i] = piecefield\n\n        print \"Create x10000: +%sKB in %.3fs (len: %s)\" % ((meminfo()[0] - m) / 1024, time.time() - s, len(piecefields[0].data))\n\n        m = meminfo()[0]\n        s = time.time()\n        for piecefield in piecefields.values():\n            val = piecefield[1000]\n\n        print \"Query one x10000: +%sKB in %.3fs\" % ((meminfo()[0] - m) / 1024, time.time() - s)\n\n        m = meminfo()[0]\n        s = time.time()\n        for piecefield in piecefields.values():\n            piecefield[1000] = True\n\n        print \"Change one x10000: +%sKB in %.3fs\" % ((meminfo()[0] - m) / 1024, time.time() - s)\n\n        m = meminfo()[0]\n        s = time.time()\n        for piecefield in piecefields.values():\n            packed = piecefield.pack()\n\n        print \"Pack x10000: +%sKB in %.3fs (len: %s)\" % ((meminfo()[0] - m) / 1024, time.time() - s, len(packed))\n\n        m = meminfo()[0]\n        s = time.time()\n        for piecefield in piecefields.values():\n            piecefield.unpack(packed)\n\n        print \"Unpack x10000: +%sKB in %.3fs (len: %s)\" % ((meminfo()[0] - m) / 1024, time.time() - s, len(piecefields[0].data))\n\n        piecefields = {}\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "BigfilePiecefield.py", "id": "37ea0a31643cea97e2f5e7e26104a90b", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/Bigfile/BigfilePiecefield.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}