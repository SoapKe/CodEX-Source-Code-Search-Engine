{"author": "nvbn", "code": "\n\nimport os\nimport pytest\nimport zipfile\nfrom thefuck.rules.dirty_unzip import match, get_new_command, side_effect\nfrom thefuck.types import Command\nfrom unicodedata import normalize\n\n\n@pytest.fixture\ndef zip_error(tmpdir):\n    def zip_error_inner(filename):\n        path = os.path.join(str(tmpdir), filename)\n\n        def reset(path):\n            with zipfile.ZipFile(path, 'w') as archive:\n                archive.writestr('a', '1')\n                archive.writestr('b', '2')\n                archive.writestr('c', '3')\n\n                archive.writestr('d/e', '4')\n\n                archive.extractall()\n\n        os.chdir(str(tmpdir))\n        reset(path)\n\n        dir_list = os.listdir(u'.')\n        if filename not in dir_list:\n            filename = normalize('NFD', filename)\n\n        assert set(dir_list) == {filename, 'a', 'b', 'c', 'd'}\n        assert set(os.listdir('./d')) == {'e'}\n    return zip_error_inner\n\n\n@pytest.mark.parametrize('script,filename', [\n    (u'unzip caf\u00e9', u'caf\u00e9.zip'),\n    (u'unzip caf\u00e9.zip', u'caf\u00e9.zip'),\n    (u'unzip foo', u'foo.zip'),\n    (u'unzip foo.zip', u'foo.zip')])\ndef test_match(zip_error, script, filename):\n    zip_error(filename)\n    assert match(Command(script, ''))\n\n\n@pytest.mark.parametrize('script,filename', [\n    (u'unzip caf\u00e9', u'caf\u00e9.zip'),\n    (u'unzip caf\u00e9.zip', u'caf\u00e9.zip'),\n    (u'unzip foo', u'foo.zip'),\n    (u'unzip foo.zip', u'foo.zip')])\ndef test_side_effect(zip_error, script, filename):\n    zip_error(filename)\n    side_effect(Command(script, ''), None)\n\n    dir_list = os.listdir(u'.')\n    if filename not in set(dir_list):\n        filename = normalize('NFD', filename)\n\n    assert set(dir_list) == {filename, 'd'}\n\n\n@pytest.mark.parametrize('script,fixed,filename', [\n    (u'unzip caf\u00e9', u\"unzip caf\u00e9 -d 'caf\u00e9'\", u'caf\u00e9.zip'),\n    (u'unzip foo', u'unzip foo -d foo', u'foo.zip'),\n    (u\"unzip 'foo bar.zip'\", u\"unzip 'foo bar.zip' -d 'foo bar'\", u'foo.zip'),\n    (u'unzip foo.zip', u'unzip foo.zip -d foo', u'foo.zip')])\ndef test_get_new_command(zip_error, script, fixed, filename):\n    zip_error(filename)\n    assert get_new_command(Command(script, '')) == fixed\n", "comments": "# -*- coding: utf-8 -*-\n", "content": "# -*- coding: utf-8 -*-\n\nimport os\nimport pytest\nimport zipfile\nfrom thefuck.rules.dirty_unzip import match, get_new_command, side_effect\nfrom thefuck.types import Command\nfrom unicodedata import normalize\n\n\n@pytest.fixture\ndef zip_error(tmpdir):\n    def zip_error_inner(filename):\n        path = os.path.join(str(tmpdir), filename)\n\n        def reset(path):\n            with zipfile.ZipFile(path, 'w') as archive:\n                archive.writestr('a', '1')\n                archive.writestr('b', '2')\n                archive.writestr('c', '3')\n\n                archive.writestr('d/e', '4')\n\n                archive.extractall()\n\n        os.chdir(str(tmpdir))\n        reset(path)\n\n        dir_list = os.listdir(u'.')\n        if filename not in dir_list:\n            filename = normalize('NFD', filename)\n\n        assert set(dir_list) == {filename, 'a', 'b', 'c', 'd'}\n        assert set(os.listdir('./d')) == {'e'}\n    return zip_error_inner\n\n\n@pytest.mark.parametrize('script,filename', [\n    (u'unzip caf\u00e9', u'caf\u00e9.zip'),\n    (u'unzip caf\u00e9.zip', u'caf\u00e9.zip'),\n    (u'unzip foo', u'foo.zip'),\n    (u'unzip foo.zip', u'foo.zip')])\ndef test_match(zip_error, script, filename):\n    zip_error(filename)\n    assert match(Command(script, ''))\n\n\n@pytest.mark.parametrize('script,filename', [\n    (u'unzip caf\u00e9', u'caf\u00e9.zip'),\n    (u'unzip caf\u00e9.zip', u'caf\u00e9.zip'),\n    (u'unzip foo', u'foo.zip'),\n    (u'unzip foo.zip', u'foo.zip')])\ndef test_side_effect(zip_error, script, filename):\n    zip_error(filename)\n    side_effect(Command(script, ''), None)\n\n    dir_list = os.listdir(u'.')\n    if filename not in set(dir_list):\n        filename = normalize('NFD', filename)\n\n    assert set(dir_list) == {filename, 'd'}\n\n\n@pytest.mark.parametrize('script,fixed,filename', [\n    (u'unzip caf\u00e9', u\"unzip caf\u00e9 -d 'caf\u00e9'\", u'caf\u00e9.zip'),\n    (u'unzip foo', u'unzip foo -d foo', u'foo.zip'),\n    (u\"unzip 'foo bar.zip'\", u\"unzip 'foo bar.zip' -d 'foo bar'\", u'foo.zip'),\n    (u'unzip foo.zip', u'unzip foo.zip -d foo', u'foo.zip')])\ndef test_get_new_command(zip_error, script, fixed, filename):\n    zip_error(filename)\n    assert get_new_command(Command(script, '')) == fixed\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_dirty_unzip.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_dirty_unzip.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}