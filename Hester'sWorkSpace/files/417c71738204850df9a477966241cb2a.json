{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    NO_DEFAULT,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass VodlockerIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vodlocker\\.(?:com|city)/(?:embed-)?(?P<id>[0-9a-zA-Z]+)(?:\\..*?)?'\n\n    _TESTS = [{\n        'url': 'http://vodlocker.com/e8wvyzz4sl42',\n        'md5': 'ce0c2d18fa0735f1bd91b69b0e54aacf',\n        'info_dict': {\n            'id': 'e8wvyzz4sl42',\n            'ext': 'mp4',\n            'title': 'Germany vs Brazil',\n            'thumbnail': r're:http://.*\\.jpg',\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        if any(p in webpage for p in (\n                '>THIS FILE WAS DELETED<',\n                '>File Not Found<',\n                'The file you were looking for could not be found, sorry for any inconvenience.<',\n                '>The file was removed')):\n            raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n\n        fields = self._hidden_inputs(webpage)\n\n        if fields['op'] == 'download1':\n            self._sleep(3, video_id)  \n            post = urlencode_postdata(fields)\n            req = sanitized_Request(url, post)\n            req.add_header('Content-type', 'application/x-www-form-urlencoded')\n            webpage = self._download_webpage(\n                req, video_id, 'Downloading video page')\n\n        def extract_file_url(html, default=NO_DEFAULT):\n            return self._search_regex(\n                r'file:\\s*\"(http[^\\\"]+)\",', html, 'file url', default=default)\n\n        video_url = extract_file_url(webpage, default=None)\n\n        if not video_url:\n            embed_url = self._search_regex(\n                r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?://)?vodlocker\\.(?:com|city)/embed-.+?)\\1',\n                webpage, 'embed url', group='url')\n            embed_webpage = self._download_webpage(\n                embed_url, video_id, 'Downloading embed webpage')\n            video_url = extract_file_url(embed_webpage)\n            thumbnail_webpage = embed_webpage\n        else:\n            thumbnail_webpage = webpage\n\n        title = self._search_regex(\n            r'id=\"file_title\".*?>\\s*(.*?)\\s*<(?:br|span)', webpage, 'title')\n        thumbnail = self._search_regex(\n            r'image:\\s*\"(http[^\\\"]+)\",', thumbnail_webpage, 'thumbnail', fatal=False)\n\n        formats = [{\n            'format_id': 'sd',\n            'url': video_url,\n        }]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# they do detect when requests happen too fast!\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    NO_DEFAULT,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass VodlockerIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vodlocker\\.(?:com|city)/(?:embed-)?(?P<id>[0-9a-zA-Z]+)(?:\\..*?)?'\n\n    _TESTS = [{\n        'url': 'http://vodlocker.com/e8wvyzz4sl42',\n        'md5': 'ce0c2d18fa0735f1bd91b69b0e54aacf',\n        'info_dict': {\n            'id': 'e8wvyzz4sl42',\n            'ext': 'mp4',\n            'title': 'Germany vs Brazil',\n            'thumbnail': r're:http://.*\\.jpg',\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        if any(p in webpage for p in (\n                '>THIS FILE WAS DELETED<',\n                '>File Not Found<',\n                'The file you were looking for could not be found, sorry for any inconvenience.<',\n                '>The file was removed')):\n            raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n\n        fields = self._hidden_inputs(webpage)\n\n        if fields['op'] == 'download1':\n            self._sleep(3, video_id)  # they do detect when requests happen too fast!\n            post = urlencode_postdata(fields)\n            req = sanitized_Request(url, post)\n            req.add_header('Content-type', 'application/x-www-form-urlencoded')\n            webpage = self._download_webpage(\n                req, video_id, 'Downloading video page')\n\n        def extract_file_url(html, default=NO_DEFAULT):\n            return self._search_regex(\n                r'file:\\s*\"(http[^\\\"]+)\",', html, 'file url', default=default)\n\n        video_url = extract_file_url(webpage, default=None)\n\n        if not video_url:\n            embed_url = self._search_regex(\n                r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?://)?vodlocker\\.(?:com|city)/embed-.+?)\\1',\n                webpage, 'embed url', group='url')\n            embed_webpage = self._download_webpage(\n                embed_url, video_id, 'Downloading embed webpage')\n            video_url = extract_file_url(embed_webpage)\n            thumbnail_webpage = embed_webpage\n        else:\n            thumbnail_webpage = webpage\n\n        title = self._search_regex(\n            r'id=\"file_title\".*?>\\s*(.*?)\\s*<(?:br|span)', webpage, 'title')\n        thumbnail = self._search_regex(\n            r'image:\\s*\"(http[^\\\"]+)\",', thumbnail_webpage, 'thumbnail', fatal=False)\n\n        formats = [{\n            'format_id': 'sd',\n            'url': video_url,\n        }]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vodlocker.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vodlocker.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}