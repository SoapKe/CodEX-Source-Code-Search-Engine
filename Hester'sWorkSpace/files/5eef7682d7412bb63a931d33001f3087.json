{"author": "ansible", "code": "\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.eos import eos_user\nfrom units.modules.utils import set_module_args\nfrom .eos_module import TestEosModule, load_fixture\n\n\nclass TestEosUserModule(TestEosModule):\n\n    module = eos_user\n\n    def setUp(self):\n        super(TestEosUserModule, self).setUp()\n\n        self.mock_get_config = patch('ansible.modules.network.eos.eos_user.get_config')\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch('ansible.modules.network.eos.eos_user.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestEosUserModule, self).tearDown()\n\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def load_fixtures(self, commands=None, transport='cli'):\n        self.get_config.return_value = load_fixture('eos_user_config.cfg')\n        self.load_config.return_value = dict(diff=None, session='session')\n\n    def test_eos_user_create(self):\n        set_module_args(dict(name='test', nopassword=True))\n        commands = ['username test nopassword']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_eos_user_delete(self):\n        set_module_args(dict(name='ansible', state='absent'))\n        commands = ['no username ansible']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_eos_user_password(self):\n        set_module_args(dict(name='ansible', configured_password='test'))\n        commands = ['username ansible secret test']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_eos_user_privilege(self):\n        set_module_args(dict(name='ansible', privilege=15, configured_password='test'))\n        result = self.execute_module(changed=True)\n        self.assertIn('username ansible privilege 15', result['commands'])\n\n    def test_eos_user_privilege_invalid(self):\n        set_module_args(dict(name='ansible', privilege=25, configured_password='test'))\n        self.execute_module(failed=True)\n\n    def test_eos_user_purge(self):\n        set_module_args(dict(purge=True))\n        commands = ['no username ansible']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_eos_user_role(self):\n        set_module_args(dict(name='ansible', role='test', configured_password='test'))\n        result = self.execute_module(changed=True)\n        self.assertIn('username ansible role test', result['commands'])\n\n    def test_eos_user_sshkey(self):\n        set_module_args(dict(name='ansible', sshkey='test'))\n        commands = ['username ansible sshkey test']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_eos_user_update_password_changed(self):\n        set_module_args(dict(name='test', configured_password='test', update_password='on_create'))\n        commands = ['username test secret test']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_eos_user_update_password_on_create_ok(self):\n        set_module_args(dict(name='ansible', configured_password='test', update_password='on_create'))\n        self.execute_module()\n\n    def test_eos_user_update_password_always(self):\n        set_module_args(dict(name='ansible', configured_password='test', update_password='always'))\n        commands = ['username ansible secret test']\n        self.execute_module(changed=True, commands=commands)\n", "comments": "  this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish ", "content": "# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.eos import eos_user\nfrom units.modules.utils import set_module_args\nfrom .eos_module import TestEosModule, load_fixture\n\n\nclass TestEosUserModule(TestEosModule):\n\n    module = eos_user\n\n    def setUp(self):\n        super(TestEosUserModule, self).setUp()\n\n        self.mock_get_config = patch('ansible.modules.network.eos.eos_user.get_config')\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch('ansible.modules.network.eos.eos_user.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestEosUserModule, self).tearDown()\n\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def load_fixtures(self, commands=None, transport='cli'):\n        self.get_config.return_value = load_fixture('eos_user_config.cfg')\n        self.load_config.return_value = dict(diff=None, session='session')\n\n    def test_eos_user_create(self):\n        set_module_args(dict(name='test', nopassword=True))\n        commands = ['username test nopassword']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_eos_user_delete(self):\n        set_module_args(dict(name='ansible', state='absent'))\n        commands = ['no username ansible']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_eos_user_password(self):\n        set_module_args(dict(name='ansible', configured_password='test'))\n        commands = ['username ansible secret test']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_eos_user_privilege(self):\n        set_module_args(dict(name='ansible', privilege=15, configured_password='test'))\n        result = self.execute_module(changed=True)\n        self.assertIn('username ansible privilege 15', result['commands'])\n\n    def test_eos_user_privilege_invalid(self):\n        set_module_args(dict(name='ansible', privilege=25, configured_password='test'))\n        self.execute_module(failed=True)\n\n    def test_eos_user_purge(self):\n        set_module_args(dict(purge=True))\n        commands = ['no username ansible']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_eos_user_role(self):\n        set_module_args(dict(name='ansible', role='test', configured_password='test'))\n        result = self.execute_module(changed=True)\n        self.assertIn('username ansible role test', result['commands'])\n\n    def test_eos_user_sshkey(self):\n        set_module_args(dict(name='ansible', sshkey='test'))\n        commands = ['username ansible sshkey test']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_eos_user_update_password_changed(self):\n        set_module_args(dict(name='test', configured_password='test', update_password='on_create'))\n        commands = ['username test secret test']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_eos_user_update_password_on_create_ok(self):\n        set_module_args(dict(name='ansible', configured_password='test', update_password='on_create'))\n        self.execute_module()\n\n    def test_eos_user_update_password_always(self):\n        set_module_args(dict(name='ansible', configured_password='test', update_password='always'))\n        commands = ['username ansible secret test']\n        self.execute_module(changed=True, commands=commands)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_eos_user.py", "id": "5eef7682d7412bb63a931d33001f3087", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/eos/test_eos_user.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}