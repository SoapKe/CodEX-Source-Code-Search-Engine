{"author": "ansible", "code": "\n\"\"\" PN CLI vlan-create/vlan-delete \"\"\"\n\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_vlan\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to create/delete a VLAN.\ndescription:\n  - Execute vlan-create or vlan-delete command.\n  - VLANs are used to isolate network traffic at Layer 2.The VLAN identifiers\n    0 and 4095 are reserved and cannot be used per the IEEE 802.1Q standard.\n    The range of configurable VLAN identifiers is 2 through 4092.\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch(es) to run the cli on.\n    required: False\n  state:\n    description:\n      - State the action to perform. Use 'present' to create vlan and\n        'absent' to delete vlan.\n    required: True\n    choices: ['present', 'absent']\n  pn_vlanid:\n    description:\n      - Specify a VLAN identifier for the VLAN. This is a value between\n        2 and 4092.\n    required: True\n  pn_scope:\n    description:\n      - Specify a scope for the VLAN.\n      - Required for vlan-create.\n    choices: ['fabric', 'local']\n  pn_description:\n    description:\n      - Specify a description for the VLAN.\n  pn_stats:\n    description:\n      - Specify if you want to collect statistics for a VLAN. Statistic\n        collection is enabled by default.\n  pn_ports:\n    description:\n      - Specifies the switch network data port number, list of ports, or range\n        of ports. Port numbers must ne in the range of 1 to 64.\n  pn_untagged_ports:\n    description:\n      - Specifies the ports that should have untagged packets mapped to the\n        VLAN. Untagged packets are packets that do not contain IEEE 802.1Q VLAN\n        tags.\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: create a VLAN\n  pn_vlan:\n    state: 'present'\n    pn_vlanid: 1854\n    pn_scope: fabric\n\n- name: delete VLANs\n  pn_vlan:\n    state: 'absent'\n    pn_vlanid: 1854\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the vlan command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the vlan command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\nVLAN_EXISTS = None\nMAX_VLAN_ID = 4092\nMIN_VLAN_ID = 2\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch == 'local':\n        cli += ' switch-local '\n    else:\n        cli += ' switch ' + cliswitch\n    return cli\n\n\ndef check_cli(module, cli):\n    \"\"\"\n    This method checks for idempotency using the vlan-show command.\n    If a vlan with given vlan id exists, return VLAN_EXISTS as True else False.\n    :param module: The Ansible module to fetch input parameters\n    :param cli: The CLI string\n    :return Global Booleans: VLAN_EXISTS\n    \"\"\"\n    vlanid = module.params['pn_vlanid']\n\n    show = cli + \\\n        ' vlan-show id %s format id,scope no-show-headers' % str(vlanid)\n    show = shlex.split(show)\n    out = module.run_command(show)[1]\n\n    out = out.split()\n     Global flags\n    global VLAN_EXISTS\n    if str(vlanid) in out:\n        VLAN_EXISTS = True\n    else:\n        VLAN_EXISTS = False\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    command = get_command_from_state(state)\n\n    cmd = shlex.split(cli)\n     'out' contains the output\n     'err' contains the error messages\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n     Response in JSON format\n\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            stderr=err.strip(),\n            msg=\"%s operation failed\" % command,\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            stdout=out.strip(),\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n    else:\n        module.exit_json(\n            command=print_cli,\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'vlan-create'\n    if state == 'absent':\n        command = 'vlan-delete'\n    return command\n\n\ndef main():\n    \"\"\" This section is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=False, type='str'),\n            pn_clipassword=dict(required=False, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str', default='local'),\n            state=dict(required=True, type='str',\n                       choices=['present', 'absent']),\n            pn_vlanid=dict(required=True, type='int'),\n            pn_scope=dict(type='str', choices=['fabric', 'local']),\n            pn_description=dict(type='str'),\n            pn_stats=dict(type='bool'),\n            pn_ports=dict(type='str'),\n            pn_untagged_ports=dict(type='str')\n        ),\n        required_if=(\n            [\"state\", \"present\", [\"pn_vlanid\", \"pn_scope\"]],\n            [\"state\", \"absent\", [\"pn_vlanid\"]]\n        )\n    )\n\n     Accessing the arguments\n    state = module.params['state']\n    vlanid = module.params['pn_vlanid']\n    scope = module.params['pn_scope']\n    description = module.params['pn_description']\n    stats = module.params['pn_stats']\n    ports = module.params['pn_ports']\n    untagged_ports = module.params['pn_untagged_ports']\n\n    command = get_command_from_state(state)\n\n     Building the CLI command string\n    cli = pn_cli(module)\n\n    if not MIN_VLAN_ID <= vlanid <= MAX_VLAN_ID:\n        module.exit_json(\n            msg=\"VLAN id must be between 2 and 4092\",\n            changed=False\n        )\n\n    if command == 'vlan-create':\n\n        check_cli(module, cli)\n        if VLAN_EXISTS is True:\n            module.exit_json(\n                skipped=True,\n                msg='VLAN with id %s already exists' % str(vlanid)\n            )\n\n        cli += ' %s id %s scope %s ' % (command, str(vlanid), scope)\n\n        if description:\n            cli += ' description ' + description\n\n        if stats is True:\n            cli += ' stats '\n        if stats is False:\n            cli += ' no-stats '\n\n        if ports:\n            cli += ' ports ' + ports\n\n        if untagged_ports:\n            cli += ' untagged-ports ' + untagged_ports\n\n    if command == 'vlan-delete':\n\n        check_cli(module, cli)\n        if VLAN_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='VLAN with id %s does not exist' % str(vlanid)\n            )\n\n        cli += ' %s id %s ' % (command, str(vlanid))\n\n    run_cli(module, cli)\n\n AnsibleModule boilerplate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "comments": "    pn cli vlan create vlan delete          this file part ansible     ansible free software  redistribute modify   terms gnu general public license published   free software foundation  either version 3 license    (at option) later version      ansible distributed hope useful    without any warranty  without even implied warranty   merchantability fitness for a particular purpose   see   gnu general public license details      you received copy gnu general public license   along ansible   if  see  http   www gnu org licenses       ansible metadata     metadata version    1 1                        status     preview                         supported    community     documentation           module  pn vlan author   pluribus networks ( amitsi)  version added   2 2  short description  cli command create delete vlan  description      execute vlan create vlan delete command      vlans used isolate network traffic layer 2 the vlan identifiers     0 4095 reserved cannot used per ieee 802 1q standard      the range configurable vlan identifiers 2 4092  options    pn cliusername      description          provide login username user root      required  false   pn clipassword      description          provide login password user root      required  false   pn cliswitch      description          target switch(es) run cli      required  false   state      description          state action perform  use  present  create vlan          absent  delete vlan      required  true     choices    present    absent     pn vlanid      description          specify vlan identifier vlan  this value         2 4092      required  true   pn scope      description          specify scope vlan          required vlan create      choices    fabric    local     pn description      description          specify description vlan    pn stats      description          specify want collect statistics vlan  statistic         collection enabled default    pn ports      description          specifies switch network data port number  list ports  range         ports  port numbers must ne range 1 64    pn untagged ports      description          specifies ports untagged packets mapped         vlan  untagged packets packets contain ieee 802 1q vlan         tags       examples         name  create vlan   pn vlan      state   present      pn vlanid  1854     pn scope  fabric    name  delete vlans   pn vlan      state   absent      pn vlanid  1854      return       command    description  the cli command run target node(s)    returned  always   type  str stdout    description  the set responses vlan command    returned  always   type  list stderr    description  the set error responses vlan command    returned  error   type  list changed    description  indicates whether cli caused changes target    returned  always   type  bool      import shlex  vlan exists   none max vlan id   4092 min vlan id   2   def pn cli(module)              this method generate cli portion launch netvisor cli      it parses username  password  switch parameters module       param module  the ansible module fetch username  password switch      return  returns cli string processing             username   module params  pn cliusername       password   module params  pn clipassword       cliswitch   module params  pn cliswitch        username password          cli     usr bin cli   quiet   user       (username  password)     else          cli     usr bin cli   quiet        cliswitch     local           cli      switch local       else          cli      switch     cliswitch     return cli   def check cli(module  cli)              this method checks idempotency using vlan show command      if vlan given vlan id exists  return vlan exists true else false       param module  the ansible module fetch input parameters      param cli  the cli string      return global booleans  vlan exists             vlanid   module params  pn vlanid        show   cli               vlan show id  format id scope show headers    str(vlanid)     show   shlex split(show)       module run command(show) 1         split()       global flags     global vlan exists     str(vlanid)          vlan exists   true     else          vlan exists   false   def run cli(module  cli)              this method executes cli command target node(s) returns     output  the module exits based output       param cli  complete cli string executed target node(s)       param module  the ansible module fetch command             cliswitch   module params  pn cliswitch       state   module params  state       command   get command state(state)      cmd   shlex split(cli)         contains output        err  contains error messages     result   err   module run command(cmd)      print cli   cli split(cliswitch) 1         response json format      result    0          module exit json(             command print cli              stderr err strip()              msg   operation failed    command              changed false         )               module exit json(             command print cli              stdout strip()              msg   operation completed    command              changed true         )      else          module exit json(             command print cli              msg   operation completed    command              changed true         )   def get command state(state)              this method gets appropriate command name state specified  it     returns command name specified state       param state  the state respective command name required              command   none     state     present           command    vlan create      state     absent           command    vlan delete      return command   def main()          this section arguments parsing         usr bin python       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          global flags      contains output     err  contains error messages    response json format    accessing arguments    building cli command string    ansiblemodule boilerplate ", "content": "#!/usr/bin/python\n\"\"\" PN CLI vlan-create/vlan-delete \"\"\"\n\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_vlan\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to create/delete a VLAN.\ndescription:\n  - Execute vlan-create or vlan-delete command.\n  - VLANs are used to isolate network traffic at Layer 2.The VLAN identifiers\n    0 and 4095 are reserved and cannot be used per the IEEE 802.1Q standard.\n    The range of configurable VLAN identifiers is 2 through 4092.\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch(es) to run the cli on.\n    required: False\n  state:\n    description:\n      - State the action to perform. Use 'present' to create vlan and\n        'absent' to delete vlan.\n    required: True\n    choices: ['present', 'absent']\n  pn_vlanid:\n    description:\n      - Specify a VLAN identifier for the VLAN. This is a value between\n        2 and 4092.\n    required: True\n  pn_scope:\n    description:\n      - Specify a scope for the VLAN.\n      - Required for vlan-create.\n    choices: ['fabric', 'local']\n  pn_description:\n    description:\n      - Specify a description for the VLAN.\n  pn_stats:\n    description:\n      - Specify if you want to collect statistics for a VLAN. Statistic\n        collection is enabled by default.\n  pn_ports:\n    description:\n      - Specifies the switch network data port number, list of ports, or range\n        of ports. Port numbers must ne in the range of 1 to 64.\n  pn_untagged_ports:\n    description:\n      - Specifies the ports that should have untagged packets mapped to the\n        VLAN. Untagged packets are packets that do not contain IEEE 802.1Q VLAN\n        tags.\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: create a VLAN\n  pn_vlan:\n    state: 'present'\n    pn_vlanid: 1854\n    pn_scope: fabric\n\n- name: delete VLANs\n  pn_vlan:\n    state: 'absent'\n    pn_vlanid: 1854\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the vlan command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the vlan command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\nVLAN_EXISTS = None\nMAX_VLAN_ID = 4092\nMIN_VLAN_ID = 2\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch == 'local':\n        cli += ' switch-local '\n    else:\n        cli += ' switch ' + cliswitch\n    return cli\n\n\ndef check_cli(module, cli):\n    \"\"\"\n    This method checks for idempotency using the vlan-show command.\n    If a vlan with given vlan id exists, return VLAN_EXISTS as True else False.\n    :param module: The Ansible module to fetch input parameters\n    :param cli: The CLI string\n    :return Global Booleans: VLAN_EXISTS\n    \"\"\"\n    vlanid = module.params['pn_vlanid']\n\n    show = cli + \\\n        ' vlan-show id %s format id,scope no-show-headers' % str(vlanid)\n    show = shlex.split(show)\n    out = module.run_command(show)[1]\n\n    out = out.split()\n    # Global flags\n    global VLAN_EXISTS\n    if str(vlanid) in out:\n        VLAN_EXISTS = True\n    else:\n        VLAN_EXISTS = False\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    command = get_command_from_state(state)\n\n    cmd = shlex.split(cli)\n    # 'out' contains the output\n    # 'err' contains the error messages\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n    # Response in JSON format\n\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            stderr=err.strip(),\n            msg=\"%s operation failed\" % command,\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            stdout=out.strip(),\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n    else:\n        module.exit_json(\n            command=print_cli,\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'vlan-create'\n    if state == 'absent':\n        command = 'vlan-delete'\n    return command\n\n\ndef main():\n    \"\"\" This section is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=False, type='str'),\n            pn_clipassword=dict(required=False, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str', default='local'),\n            state=dict(required=True, type='str',\n                       choices=['present', 'absent']),\n            pn_vlanid=dict(required=True, type='int'),\n            pn_scope=dict(type='str', choices=['fabric', 'local']),\n            pn_description=dict(type='str'),\n            pn_stats=dict(type='bool'),\n            pn_ports=dict(type='str'),\n            pn_untagged_ports=dict(type='str')\n        ),\n        required_if=(\n            [\"state\", \"present\", [\"pn_vlanid\", \"pn_scope\"]],\n            [\"state\", \"absent\", [\"pn_vlanid\"]]\n        )\n    )\n\n    # Accessing the arguments\n    state = module.params['state']\n    vlanid = module.params['pn_vlanid']\n    scope = module.params['pn_scope']\n    description = module.params['pn_description']\n    stats = module.params['pn_stats']\n    ports = module.params['pn_ports']\n    untagged_ports = module.params['pn_untagged_ports']\n\n    command = get_command_from_state(state)\n\n    # Building the CLI command string\n    cli = pn_cli(module)\n\n    if not MIN_VLAN_ID <= vlanid <= MAX_VLAN_ID:\n        module.exit_json(\n            msg=\"VLAN id must be between 2 and 4092\",\n            changed=False\n        )\n\n    if command == 'vlan-create':\n\n        check_cli(module, cli)\n        if VLAN_EXISTS is True:\n            module.exit_json(\n                skipped=True,\n                msg='VLAN with id %s already exists' % str(vlanid)\n            )\n\n        cli += ' %s id %s scope %s ' % (command, str(vlanid), scope)\n\n        if description:\n            cli += ' description ' + description\n\n        if stats is True:\n            cli += ' stats '\n        if stats is False:\n            cli += ' no-stats '\n\n        if ports:\n            cli += ' ports ' + ports\n\n        if untagged_ports:\n            cli += ' untagged-ports ' + untagged_ports\n\n    if command == 'vlan-delete':\n\n        check_cli(module, cli)\n        if VLAN_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='VLAN with id %s does not exist' % str(vlanid)\n            )\n\n        cli += ' %s id %s ' % (command, str(vlanid))\n\n    run_cli(module, cli)\n\n# AnsibleModule boilerplate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "pn_vlan.py", "id": "62aa38dbd4d3d4d66d1f854e3c9eeb1b", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/netvisor/pn_vlan.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}