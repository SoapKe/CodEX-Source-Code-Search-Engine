{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass AudiMediaIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?audi-mediacenter\\.com/(?:en|de)/audimediatv/(?P<id>[^/?\n    _TEST = {\n        'url': 'https://www.audi-mediacenter.com/en/audimediatv/60-seconds-of-audi-sport-104-2015-wec-bahrain-rookie-test-1467',\n        'md5': '79a8b71c46d49042609795ab59779b66',\n        'info_dict': {\n            'id': '1565',\n            'ext': 'mp4',\n            'title': '60 Seconds of Audi Sport 104/2015 - WEC Bahrain, Rookie Test',\n            'description': 'md5:60e5d30a78ced725f7b8d34370762941',\n            'upload_date': '20151124',\n            'timestamp': 1448354940,\n            'duration': 74022,\n            'view_count': int,\n        }\n    }\n    \n    _AUTH_TOKEN = 'e25b42847dba18c6c8816d5d8ce94c326e06823ebf0859ed164b3ba169be97f2'\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n\n        raw_payload = self._search_regex([\n            r'class=\"amtv-embed\"[^>]+id=\"([^\"]+)\"',\n            r'class=\\\\\"amtv-embed\\\\\"[^>]+id=\\\\\"([^\"]+)\\\\\"',\n        ], webpage, 'raw payload')\n        _, stage_mode, video_id, lang = raw_payload.split('-')\n\n        \n        if stage_mode not in ('s', 'e'):\n            request = sanitized_Request(\n                'https://audimedia.tv/api/video/v1/videos/%s?embed[]=video_versions&embed[]=thumbnail_image&where[content_language_iso]=%s' % (video_id, lang),\n                headers={'X-Auth-Token': self._AUTH_TOKEN})\n            json_data = self._download_json(request, video_id)['results']\n            formats = []\n\n            stream_url_hls = json_data.get('stream_url_hls')\n            if stream_url_hls:\n                formats.extend(self._extract_m3u8_formats(\n                    stream_url_hls, video_id, 'mp4',\n                    entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n\n            stream_url_hds = json_data.get('stream_url_hds')\n            if stream_url_hds:\n                formats.extend(self._extract_f4m_formats(\n                    stream_url_hds + '?hdcore=3.4.0',\n                    video_id, f4m_id='hds', fatal=False))\n\n            for video_version in json_data.get('video_versions'):\n                video_version_url = video_version.get('download_url') or video_version.get('stream_url')\n                if not video_version_url:\n                    continue\n                f = {\n                    'url': video_version_url,\n                    'width': int_or_none(video_version.get('width')),\n                    'height': int_or_none(video_version.get('height')),\n                    'abr': int_or_none(video_version.get('audio_bitrate')),\n                    'vbr': int_or_none(video_version.get('video_bitrate')),\n                }\n                bitrate = self._search_regex(r'(\\d+)k', video_version_url, 'bitrate', default=None)\n                if bitrate:\n                    f.update({\n                        'format_id': 'http-%s' % bitrate,\n                    })\n                formats.append(f)\n            self._sort_formats(formats)\n\n            return {\n                'id': video_id,\n                'title': json_data['title'],\n                'description': json_data.get('subtitle'),\n                'thumbnail': json_data.get('thumbnail_image', {}).get('file'),\n                'timestamp': parse_iso8601(json_data.get('publication_date')),\n                'duration': int_or_none(json_data.get('duration')),\n                'view_count': int_or_none(json_data.get('view_count')),\n                'formats': formats,\n            }\n", "comments": "# coding: utf-8\n#]+)'\n# extracted from https://audimedia.tv/assets/embed/embedded-player.js (dataSourceAuthToken)\n# TODO: handle s and e stage_mode (live streams and ended live streams)\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass AudiMediaIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?audi-mediacenter\\.com/(?:en|de)/audimediatv/(?P<id>[^/?#]+)'\n    _TEST = {\n        'url': 'https://www.audi-mediacenter.com/en/audimediatv/60-seconds-of-audi-sport-104-2015-wec-bahrain-rookie-test-1467',\n        'md5': '79a8b71c46d49042609795ab59779b66',\n        'info_dict': {\n            'id': '1565',\n            'ext': 'mp4',\n            'title': '60 Seconds of Audi Sport 104/2015 - WEC Bahrain, Rookie Test',\n            'description': 'md5:60e5d30a78ced725f7b8d34370762941',\n            'upload_date': '20151124',\n            'timestamp': 1448354940,\n            'duration': 74022,\n            'view_count': int,\n        }\n    }\n    # extracted from https://audimedia.tv/assets/embed/embedded-player.js (dataSourceAuthToken)\n    _AUTH_TOKEN = 'e25b42847dba18c6c8816d5d8ce94c326e06823ebf0859ed164b3ba169be97f2'\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n\n        raw_payload = self._search_regex([\n            r'class=\"amtv-embed\"[^>]+id=\"([^\"]+)\"',\n            r'class=\\\\\"amtv-embed\\\\\"[^>]+id=\\\\\"([^\"]+)\\\\\"',\n        ], webpage, 'raw payload')\n        _, stage_mode, video_id, lang = raw_payload.split('-')\n\n        # TODO: handle s and e stage_mode (live streams and ended live streams)\n        if stage_mode not in ('s', 'e'):\n            request = sanitized_Request(\n                'https://audimedia.tv/api/video/v1/videos/%s?embed[]=video_versions&embed[]=thumbnail_image&where[content_language_iso]=%s' % (video_id, lang),\n                headers={'X-Auth-Token': self._AUTH_TOKEN})\n            json_data = self._download_json(request, video_id)['results']\n            formats = []\n\n            stream_url_hls = json_data.get('stream_url_hls')\n            if stream_url_hls:\n                formats.extend(self._extract_m3u8_formats(\n                    stream_url_hls, video_id, 'mp4',\n                    entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n\n            stream_url_hds = json_data.get('stream_url_hds')\n            if stream_url_hds:\n                formats.extend(self._extract_f4m_formats(\n                    stream_url_hds + '?hdcore=3.4.0',\n                    video_id, f4m_id='hds', fatal=False))\n\n            for video_version in json_data.get('video_versions'):\n                video_version_url = video_version.get('download_url') or video_version.get('stream_url')\n                if not video_version_url:\n                    continue\n                f = {\n                    'url': video_version_url,\n                    'width': int_or_none(video_version.get('width')),\n                    'height': int_or_none(video_version.get('height')),\n                    'abr': int_or_none(video_version.get('audio_bitrate')),\n                    'vbr': int_or_none(video_version.get('video_bitrate')),\n                }\n                bitrate = self._search_regex(r'(\\d+)k', video_version_url, 'bitrate', default=None)\n                if bitrate:\n                    f.update({\n                        'format_id': 'http-%s' % bitrate,\n                    })\n                formats.append(f)\n            self._sort_formats(formats)\n\n            return {\n                'id': video_id,\n                'title': json_data['title'],\n                'description': json_data.get('subtitle'),\n                'thumbnail': json_data.get('thumbnail_image', {}).get('file'),\n                'timestamp': parse_iso8601(json_data.get('publication_date')),\n                'duration': int_or_none(json_data.get('duration')),\n                'view_count': int_or_none(json_data.get('view_count')),\n                'formats': formats,\n            }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "audimedia.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/audimedia.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}