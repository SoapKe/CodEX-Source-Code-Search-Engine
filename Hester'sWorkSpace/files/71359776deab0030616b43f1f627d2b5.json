{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass PrimeShareTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?primeshare\\.tv/download/(?P<id>[\\da-zA-Z]+)'\n\n    _TEST = {\n        'url': 'http://primeshare.tv/download/238790B611',\n        'md5': 'b92d9bf5461137c36228009f31533fbc',\n        'info_dict': {\n            'id': '238790B611',\n            'ext': 'mp4',\n            'title': 'Public Domain - 1960s Commercial - Crest Toothpaste-YKsuFona',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        if '>File not exist<' in webpage:\n            raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n\n        fields = self._hidden_inputs(webpage)\n\n        headers = {\n            'Referer': url,\n            'Content-Type': 'application/x-www-form-urlencoded',\n        }\n\n        wait_time = int(self._search_regex(\n            r'var\\s+cWaitTime\\s*=\\s*(\\d+)',\n            webpage, 'wait time', default=7)) + 1\n        self._sleep(wait_time, video_id)\n\n        req = sanitized_Request(\n            url, urlencode_postdata(fields), headers)\n        video_page = self._download_webpage(\n            req, video_id, 'Downloading video page')\n\n        video_url = self._search_regex(\n            r\"url\\s*:\\s*'([^']+\\.primeshare\\.tv(?::443)?/file/[^']+)'\",\n            video_page, 'video url')\n\n        title = self._html_search_regex(\n            r'<h1>Watch\\s*(?:&nbsp;)?\\s*\\((.+?)(?:\\s*\\[\\.\\.\\.\\])?\\)\\s*(?:&nbsp;)?\\s*<strong>',\n            video_page, 'title')\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'ext': 'mp4',\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass PrimeShareTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?primeshare\\.tv/download/(?P<id>[\\da-zA-Z]+)'\n\n    _TEST = {\n        'url': 'http://primeshare.tv/download/238790B611',\n        'md5': 'b92d9bf5461137c36228009f31533fbc',\n        'info_dict': {\n            'id': '238790B611',\n            'ext': 'mp4',\n            'title': 'Public Domain - 1960s Commercial - Crest Toothpaste-YKsuFona',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        if '>File not exist<' in webpage:\n            raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n\n        fields = self._hidden_inputs(webpage)\n\n        headers = {\n            'Referer': url,\n            'Content-Type': 'application/x-www-form-urlencoded',\n        }\n\n        wait_time = int(self._search_regex(\n            r'var\\s+cWaitTime\\s*=\\s*(\\d+)',\n            webpage, 'wait time', default=7)) + 1\n        self._sleep(wait_time, video_id)\n\n        req = sanitized_Request(\n            url, urlencode_postdata(fields), headers)\n        video_page = self._download_webpage(\n            req, video_id, 'Downloading video page')\n\n        video_url = self._search_regex(\n            r\"url\\s*:\\s*'([^']+\\.primeshare\\.tv(?::443)?/file/[^']+)'\",\n            video_page, 'video url')\n\n        title = self._html_search_regex(\n            r'<h1>Watch\\s*(?:&nbsp;)?\\s*\\((.+?)(?:\\s*\\[\\.\\.\\.\\])?\\)\\s*(?:&nbsp;)?\\s*<strong>',\n            video_page, 'title')\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'ext': 'mp4',\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "primesharetv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/primesharetv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}