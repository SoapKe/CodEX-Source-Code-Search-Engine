{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    clean_html,\n)\n\n\nclass CCMAIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?ccma\\.cat/(?:[^/]+/)*?(?P<type>video|audio)/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.ccma.cat/tv3/alacarta/lespot-de-la-marato-de-tv3/lespot-de-la-marato-de-tv3/video/5630208/',\n        'md5': '7296ca43977c8ea4469e719c609b0871',\n        'info_dict': {\n            'id': '5630208',\n            'ext': 'mp4',\n            'title': 'L\\'espot de La Marat\u00f3 de TV3',\n            'description': 'md5:f12987f320e2f6e988e9908e4fe97765',\n            'timestamp': 1470918540,\n            'upload_date': '20160811',\n        }\n    }, {\n        'url': 'http://www.ccma.cat/catradio/alacarta/programa/el-consell-de-savis-analitza-el-derbi/audio/943685/',\n        'md5': 'fa3e38f269329a278271276330261425',\n        'info_dict': {\n            'id': '943685',\n            'ext': 'mp3',\n            'title': 'El Consell de Savis analitza el derbi',\n            'description': 'md5:e2a3648145f3241cb9c6b4b624033e53',\n            'upload_date': '20171205',\n            'timestamp': 1512507300,\n        }\n    }]\n\n    def _real_extract(self, url):\n        media_type, media_id = re.match(self._VALID_URL, url).groups()\n        media_data = {}\n        formats = []\n        profiles = ['pc'] if media_type == 'audio' else ['mobil', 'pc']\n        for i, profile in enumerate(profiles):\n            md = self._download_json('http://dinamics.ccma.cat/pvideo/media.jsp', media_id, query={\n                'media': media_type,\n                'idint': media_id,\n                'profile': profile,\n            }, fatal=False)\n            if md:\n                media_data = md\n                media_url = media_data.get('media', {}).get('url')\n                if media_url:\n                    formats.append({\n                        'format_id': profile,\n                        'url': media_url,\n                        'quality': i,\n                    })\n        self._sort_formats(formats)\n\n        informacio = media_data['informacio']\n        title = informacio['titol']\n        durada = informacio.get('durada', {})\n        duration = int_or_none(durada.get('milisegons'), 1000) or parse_duration(durada.get('text'))\n        timestamp = parse_iso8601(informacio.get('data_emissio', {}).get('utc'))\n\n        subtitles = {}\n        subtitols = media_data.get('subtitols', {})\n        if subtitols:\n            sub_url = subtitols.get('url')\n            if sub_url:\n                subtitles.setdefault(\n                    subtitols.get('iso') or subtitols.get('text') or 'ca', []).append({\n                        'url': sub_url,\n                    })\n\n        thumbnails = []\n        imatges = media_data.get('imatges', {})\n        if imatges:\n            thumbnail_url = imatges.get('url')\n            if thumbnail_url:\n                thumbnails = [{\n                    'url': thumbnail_url,\n                    'width': int_or_none(imatges.get('amplada')),\n                    'height': int_or_none(imatges.get('alcada')),\n                }]\n\n        return {\n            'id': media_id,\n            'title': title,\n            'description': clean_html(informacio.get('descripcio')),\n            'duration': duration,\n            'timestamp': timestamp,\n            'thumbnails': thumbnails,\n            'subtitles': subtitles,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    clean_html,\n)\n\n\nclass CCMAIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?ccma\\.cat/(?:[^/]+/)*?(?P<type>video|audio)/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.ccma.cat/tv3/alacarta/lespot-de-la-marato-de-tv3/lespot-de-la-marato-de-tv3/video/5630208/',\n        'md5': '7296ca43977c8ea4469e719c609b0871',\n        'info_dict': {\n            'id': '5630208',\n            'ext': 'mp4',\n            'title': 'L\\'espot de La Marat\u00f3 de TV3',\n            'description': 'md5:f12987f320e2f6e988e9908e4fe97765',\n            'timestamp': 1470918540,\n            'upload_date': '20160811',\n        }\n    }, {\n        'url': 'http://www.ccma.cat/catradio/alacarta/programa/el-consell-de-savis-analitza-el-derbi/audio/943685/',\n        'md5': 'fa3e38f269329a278271276330261425',\n        'info_dict': {\n            'id': '943685',\n            'ext': 'mp3',\n            'title': 'El Consell de Savis analitza el derbi',\n            'description': 'md5:e2a3648145f3241cb9c6b4b624033e53',\n            'upload_date': '20171205',\n            'timestamp': 1512507300,\n        }\n    }]\n\n    def _real_extract(self, url):\n        media_type, media_id = re.match(self._VALID_URL, url).groups()\n        media_data = {}\n        formats = []\n        profiles = ['pc'] if media_type == 'audio' else ['mobil', 'pc']\n        for i, profile in enumerate(profiles):\n            md = self._download_json('http://dinamics.ccma.cat/pvideo/media.jsp', media_id, query={\n                'media': media_type,\n                'idint': media_id,\n                'profile': profile,\n            }, fatal=False)\n            if md:\n                media_data = md\n                media_url = media_data.get('media', {}).get('url')\n                if media_url:\n                    formats.append({\n                        'format_id': profile,\n                        'url': media_url,\n                        'quality': i,\n                    })\n        self._sort_formats(formats)\n\n        informacio = media_data['informacio']\n        title = informacio['titol']\n        durada = informacio.get('durada', {})\n        duration = int_or_none(durada.get('milisegons'), 1000) or parse_duration(durada.get('text'))\n        timestamp = parse_iso8601(informacio.get('data_emissio', {}).get('utc'))\n\n        subtitles = {}\n        subtitols = media_data.get('subtitols', {})\n        if subtitols:\n            sub_url = subtitols.get('url')\n            if sub_url:\n                subtitles.setdefault(\n                    subtitols.get('iso') or subtitols.get('text') or 'ca', []).append({\n                        'url': sub_url,\n                    })\n\n        thumbnails = []\n        imatges = media_data.get('imatges', {})\n        if imatges:\n            thumbnail_url = imatges.get('url')\n            if thumbnail_url:\n                thumbnails = [{\n                    'url': thumbnail_url,\n                    'width': int_or_none(imatges.get('amplada')),\n                    'height': int_or_none(imatges.get('alcada')),\n                }]\n\n        return {\n            'id': media_id,\n            'title': title,\n            'description': clean_html(informacio.get('descripcio')),\n            'duration': duration,\n            'timestamp': timestamp,\n            'thumbnails': thumbnails,\n            'subtitles': subtitles,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "ccma.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/ccma.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}