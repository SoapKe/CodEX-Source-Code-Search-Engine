{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlencode,\n    compat_urlparse,\n)\nfrom ..utils import (\n    clean_html,\n    parse_duration,\n    str_to_int,\n    unified_strdate,\n)\n\n\nclass CamdemyIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?camdemy\\.com/media/(?P<id>\\d+)'\n    _TESTS = [{\n        \n        'url': 'http://www.camdemy.com/media/5181/',\n        'md5': '5a5562b6a98b37873119102e052e311b',\n        'info_dict': {\n            'id': '5181',\n            'ext': 'mp4',\n            'title': 'Ch1-1 Introduction, Signals (02-23-2012)',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'creator': 'ss11spring',\n            'duration': 1591,\n            'upload_date': '20130114',\n            'view_count': int,\n        }\n    }, {\n        \n        \n        'url': 'http://www.camdemy.com/media/13885',\n        'md5': '4576a3bb2581f86c61044822adbd1249',\n        'info_dict': {\n            'id': '13885',\n            'ext': 'mp4',\n            'title': 'EverCam + Camdemy QuickStart',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'description': 'md5:2a9f989c2b153a2342acee579c6e7db6',\n            'creator': 'evercam',\n            'duration': 318,\n        }\n    }, {\n        \n        'url': 'http://www.camdemy.com/media/14842',\n        'info_dict': {\n            'id': '2vsYQzNIsJo',\n            'ext': 'mp4',\n            'title': 'Excel 2013 Tutorial - How to add Password Protection',\n            'description': 'Excel 2013 Tutorial for Beginners - How to add Password Protection',\n            'upload_date': '20130211',\n            'uploader': 'Hun Kim',\n            'uploader_id': 'hunkimtutorials',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        src_from = self._html_search_regex(\n            r\"class=['\\\"]srcFrom['\\\"][^>]*>Sources?(?:\\s+from)?\\s*:\\s*<a[^>]+(?:href|title)=(['\\\"])(?P<url>(?:(?!\\1).)+)\\1\",\n            webpage, 'external source', default=None, group='url')\n        if src_from:\n            return self.url_result(src_from)\n\n        oembed_obj = self._download_json(\n            'http://www.camdemy.com/oembed/?format=json&url=' + url, video_id)\n\n        title = oembed_obj['title']\n        thumb_url = oembed_obj['thumbnail_url']\n        video_folder = compat_urlparse.urljoin(thumb_url, 'video/')\n        file_list_doc = self._download_xml(\n            compat_urlparse.urljoin(video_folder, 'fileList.xml'),\n            video_id, 'Downloading filelist XML')\n        file_name = file_list_doc.find('./video/item/fileName').text\n        video_url = compat_urlparse.urljoin(video_folder, file_name)\n\n        \n        \n        upload_date = unified_strdate(self._search_regex(\n            r'>published on ([^<]+)<', webpage,\n            'upload date', default=None))\n        view_count = str_to_int(self._search_regex(\n            r'role=[\"\\']viewCnt[\"\\'][^>]*>([\\d,.]+) views',\n            webpage, 'view count', default=None))\n        description = self._html_search_meta(\n            'description', webpage, default=None) or clean_html(\n            oembed_obj.get('description'))\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'thumbnail': thumb_url,\n            'description': description,\n            'creator': oembed_obj.get('author_name'),\n            'duration': parse_duration(oembed_obj.get('duration')),\n            'upload_date': upload_date,\n            'view_count': view_count,\n        }\n\n\nclass CamdemyFolderIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?camdemy\\.com/folder/(?P<id>\\d+)'\n    _TESTS = [{\n        \n        'url': 'http://www.camdemy.com/folder/450',\n        'info_dict': {\n            'id': '450',\n            'title': '\u4fe1\u865f\u8207\u7cfb\u7d71 2012 & 2011 (Signals and Systems)',\n        },\n        'playlist_mincount': 145\n    }, {\n        \n        \n        'url': 'http://www.camdemy.com/folder/853',\n        'info_dict': {\n            'id': '853',\n            'title': '\u79d1\u5b78\u8a08\u7b97 - \u4f7f\u7528 Matlab'\n        },\n        'playlist_mincount': 20\n    }, {\n        \n        'url': 'http://www.camdemy.com/folder/853/?displayMode=defaultOrderByOrg',\n        'info_dict': {\n            'id': '853',\n            'title': '\u79d1\u5b78\u8a08\u7b97 - \u4f7f\u7528 Matlab'\n        },\n        'playlist_mincount': 20\n    }]\n\n    def _real_extract(self, url):\n        folder_id = self._match_id(url)\n\n        \n        parsed_url = list(compat_urlparse.urlparse(url))\n        query = dict(compat_urlparse.parse_qsl(parsed_url[4]))\n        query.update({'displayMode': 'list'})\n        parsed_url[4] = compat_urllib_parse_urlencode(query)\n        final_url = compat_urlparse.urlunparse(parsed_url)\n\n        page = self._download_webpage(final_url, folder_id)\n        matches = re.findall(r\"href='(/media/\\d+/?)'\", page)\n\n        entries = [self.url_result('http://www.camdemy.com' + media_path)\n                   for media_path in matches]\n\n        folder_title = self._html_search_meta('keywords', page)\n\n        return self.playlist_result(entries, folder_id, folder_title)\n", "comments": "# coding: utf-8\n# single file\n# With non-empty description\n# webpage returns \"No permission or not login\"\n# External source (YouTube)\n# Some URLs return \"No permission or not login\" in a webpage despite being\n# freely available via oembed JSON URL (e.g. http://www.camdemy.com/media/13885)\n# links with trailing slash\n# links without trailing slash\n# and multi-page\n# with displayMode parameter. For testing the codes to add parameters\n# Add displayMode=list so that all links are displayed in a single page\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlencode,\n    compat_urlparse,\n)\nfrom ..utils import (\n    clean_html,\n    parse_duration,\n    str_to_int,\n    unified_strdate,\n)\n\n\nclass CamdemyIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?camdemy\\.com/media/(?P<id>\\d+)'\n    _TESTS = [{\n        # single file\n        'url': 'http://www.camdemy.com/media/5181/',\n        'md5': '5a5562b6a98b37873119102e052e311b',\n        'info_dict': {\n            'id': '5181',\n            'ext': 'mp4',\n            'title': 'Ch1-1 Introduction, Signals (02-23-2012)',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'creator': 'ss11spring',\n            'duration': 1591,\n            'upload_date': '20130114',\n            'view_count': int,\n        }\n    }, {\n        # With non-empty description\n        # webpage returns \"No permission or not login\"\n        'url': 'http://www.camdemy.com/media/13885',\n        'md5': '4576a3bb2581f86c61044822adbd1249',\n        'info_dict': {\n            'id': '13885',\n            'ext': 'mp4',\n            'title': 'EverCam + Camdemy QuickStart',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'description': 'md5:2a9f989c2b153a2342acee579c6e7db6',\n            'creator': 'evercam',\n            'duration': 318,\n        }\n    }, {\n        # External source (YouTube)\n        'url': 'http://www.camdemy.com/media/14842',\n        'info_dict': {\n            'id': '2vsYQzNIsJo',\n            'ext': 'mp4',\n            'title': 'Excel 2013 Tutorial - How to add Password Protection',\n            'description': 'Excel 2013 Tutorial for Beginners - How to add Password Protection',\n            'upload_date': '20130211',\n            'uploader': 'Hun Kim',\n            'uploader_id': 'hunkimtutorials',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        src_from = self._html_search_regex(\n            r\"class=['\\\"]srcFrom['\\\"][^>]*>Sources?(?:\\s+from)?\\s*:\\s*<a[^>]+(?:href|title)=(['\\\"])(?P<url>(?:(?!\\1).)+)\\1\",\n            webpage, 'external source', default=None, group='url')\n        if src_from:\n            return self.url_result(src_from)\n\n        oembed_obj = self._download_json(\n            'http://www.camdemy.com/oembed/?format=json&url=' + url, video_id)\n\n        title = oembed_obj['title']\n        thumb_url = oembed_obj['thumbnail_url']\n        video_folder = compat_urlparse.urljoin(thumb_url, 'video/')\n        file_list_doc = self._download_xml(\n            compat_urlparse.urljoin(video_folder, 'fileList.xml'),\n            video_id, 'Downloading filelist XML')\n        file_name = file_list_doc.find('./video/item/fileName').text\n        video_url = compat_urlparse.urljoin(video_folder, file_name)\n\n        # Some URLs return \"No permission or not login\" in a webpage despite being\n        # freely available via oembed JSON URL (e.g. http://www.camdemy.com/media/13885)\n        upload_date = unified_strdate(self._search_regex(\n            r'>published on ([^<]+)<', webpage,\n            'upload date', default=None))\n        view_count = str_to_int(self._search_regex(\n            r'role=[\"\\']viewCnt[\"\\'][^>]*>([\\d,.]+) views',\n            webpage, 'view count', default=None))\n        description = self._html_search_meta(\n            'description', webpage, default=None) or clean_html(\n            oembed_obj.get('description'))\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'thumbnail': thumb_url,\n            'description': description,\n            'creator': oembed_obj.get('author_name'),\n            'duration': parse_duration(oembed_obj.get('duration')),\n            'upload_date': upload_date,\n            'view_count': view_count,\n        }\n\n\nclass CamdemyFolderIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?camdemy\\.com/folder/(?P<id>\\d+)'\n    _TESTS = [{\n        # links with trailing slash\n        'url': 'http://www.camdemy.com/folder/450',\n        'info_dict': {\n            'id': '450',\n            'title': '\u4fe1\u865f\u8207\u7cfb\u7d71 2012 & 2011 (Signals and Systems)',\n        },\n        'playlist_mincount': 145\n    }, {\n        # links without trailing slash\n        # and multi-page\n        'url': 'http://www.camdemy.com/folder/853',\n        'info_dict': {\n            'id': '853',\n            'title': '\u79d1\u5b78\u8a08\u7b97 - \u4f7f\u7528 Matlab'\n        },\n        'playlist_mincount': 20\n    }, {\n        # with displayMode parameter. For testing the codes to add parameters\n        'url': 'http://www.camdemy.com/folder/853/?displayMode=defaultOrderByOrg',\n        'info_dict': {\n            'id': '853',\n            'title': '\u79d1\u5b78\u8a08\u7b97 - \u4f7f\u7528 Matlab'\n        },\n        'playlist_mincount': 20\n    }]\n\n    def _real_extract(self, url):\n        folder_id = self._match_id(url)\n\n        # Add displayMode=list so that all links are displayed in a single page\n        parsed_url = list(compat_urlparse.urlparse(url))\n        query = dict(compat_urlparse.parse_qsl(parsed_url[4]))\n        query.update({'displayMode': 'list'})\n        parsed_url[4] = compat_urllib_parse_urlencode(query)\n        final_url = compat_urlparse.urlunparse(parsed_url)\n\n        page = self._download_webpage(final_url, folder_id)\n        matches = re.findall(r\"href='(/media/\\d+/?)'\", page)\n\n        entries = [self.url_result('http://www.camdemy.com' + media_path)\n                   for media_path in matches]\n\n        folder_title = self._html_search_meta('keywords', page)\n\n        return self.playlist_result(entries, folder_id, folder_title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "camdemy.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/camdemy.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}