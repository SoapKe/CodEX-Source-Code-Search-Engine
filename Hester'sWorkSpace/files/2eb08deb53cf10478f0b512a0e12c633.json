{"author": "pandas-dev", "code": "import numpy as np\nimport pandas as pd\n\nfrom .pandas_vb_common import setup  \n\n\nops = ['mean', 'sum', 'median', 'std', 'skew', 'kurt', 'mad', 'prod', 'sem',\n       'var']\n\n\nclass FrameOps(object):\n\n    goal_time = 0.2\n    params = [ops, ['float', 'int'], [0, 1], [True, False]]\n    param_names = ['op', 'dtype', 'axis', 'use_bottleneck']\n\n    def setup(self, op, dtype, axis, use_bottleneck):\n        df = pd.DataFrame(np.random.randn(100000, 4)).astype(dtype)\n        try:\n            pd.options.compute.use_bottleneck = use_bottleneck\n        except:\n            from pandas.core import nanops\n            nanops._USE_BOTTLENECK = use_bottleneck\n        self.df_func = getattr(df, op)\n\n    def time_op(self, op, dtype, axis, use_bottleneck):\n        self.df_func(axis=axis)\n\n\nclass FrameMultiIndexOps(object):\n\n    goal_time = 0.2\n    params = ([0, 1, [0, 1]], ops)\n    param_names = ['level', 'op']\n\n    def setup(self, level, op):\n        levels = [np.arange(10), np.arange(100), np.arange(100)]\n        labels = [np.arange(10).repeat(10000),\n                  np.tile(np.arange(100).repeat(100), 10),\n                  np.tile(np.tile(np.arange(100), 100), 10)]\n        index = pd.MultiIndex(levels=levels, labels=labels)\n        df = pd.DataFrame(np.random.randn(len(index), 4), index=index)\n        self.df_func = getattr(df, op)\n\n    def time_op(self, level, op):\n        self.df_func(level=level)\n\n\nclass SeriesOps(object):\n\n    goal_time = 0.2\n    params = [ops, ['float', 'int'], [True, False]]\n    param_names = ['op', 'dtype', 'use_bottleneck']\n\n    def setup(self, op, dtype, use_bottleneck):\n        s = pd.Series(np.random.randn(100000)).astype(dtype)\n        try:\n            pd.options.compute.use_bottleneck = use_bottleneck\n        except:\n            from pandas.core import nanops\n            nanops._USE_BOTTLENECK = use_bottleneck\n        self.s_func = getattr(s, op)\n\n    def time_op(self, op, dtype, use_bottleneck):\n        self.s_func()\n\n\nclass SeriesMultiIndexOps(object):\n\n    goal_time = 0.2\n    params = ([0, 1, [0, 1]], ops)\n    param_names = ['level', 'op']\n\n    def setup(self, level, op):\n        levels = [np.arange(10), np.arange(100), np.arange(100)]\n        labels = [np.arange(10).repeat(10000),\n                  np.tile(np.arange(100).repeat(100), 10),\n                  np.tile(np.tile(np.arange(100), 100), 10)]\n        index = pd.MultiIndex(levels=levels, labels=labels)\n        s = pd.Series(np.random.randn(len(index)), index=index)\n        self.s_func = getattr(s, op)\n\n    def time_op(self, level, op):\n        self.s_func(level=level)\n\n\nclass Rank(object):\n\n    goal_time = 0.2\n    params = [['DataFrame', 'Series'], [True, False]]\n    param_names = ['constructor', 'pct']\n\n    def setup(self, constructor, pct):\n        values = np.random.randn(10**5)\n        self.data = getattr(pd, constructor)(values)\n\n    def time_rank(self, constructor, pct):\n        self.data.rank(pct=pct)\n\n    def time_average_old(self, constructor, pct):\n        self.data.rank(pct=pct) / len(self.data)\n\n\nclass Correlation(object):\n\n    goal_time = 0.2\n    params = ['spearman', 'kendall', 'pearson']\n    param_names = ['method']\n\n    def setup(self, method):\n        self.df = pd.DataFrame(np.random.randn(1000, 30))\n\n    def time_corr(self, method):\n        self.df.corr(method=method)\n", "comments": "noqa", "content": "import numpy as np\nimport pandas as pd\n\nfrom .pandas_vb_common import setup  # noqa\n\n\nops = ['mean', 'sum', 'median', 'std', 'skew', 'kurt', 'mad', 'prod', 'sem',\n       'var']\n\n\nclass FrameOps(object):\n\n    goal_time = 0.2\n    params = [ops, ['float', 'int'], [0, 1], [True, False]]\n    param_names = ['op', 'dtype', 'axis', 'use_bottleneck']\n\n    def setup(self, op, dtype, axis, use_bottleneck):\n        df = pd.DataFrame(np.random.randn(100000, 4)).astype(dtype)\n        try:\n            pd.options.compute.use_bottleneck = use_bottleneck\n        except:\n            from pandas.core import nanops\n            nanops._USE_BOTTLENECK = use_bottleneck\n        self.df_func = getattr(df, op)\n\n    def time_op(self, op, dtype, axis, use_bottleneck):\n        self.df_func(axis=axis)\n\n\nclass FrameMultiIndexOps(object):\n\n    goal_time = 0.2\n    params = ([0, 1, [0, 1]], ops)\n    param_names = ['level', 'op']\n\n    def setup(self, level, op):\n        levels = [np.arange(10), np.arange(100), np.arange(100)]\n        labels = [np.arange(10).repeat(10000),\n                  np.tile(np.arange(100).repeat(100), 10),\n                  np.tile(np.tile(np.arange(100), 100), 10)]\n        index = pd.MultiIndex(levels=levels, labels=labels)\n        df = pd.DataFrame(np.random.randn(len(index), 4), index=index)\n        self.df_func = getattr(df, op)\n\n    def time_op(self, level, op):\n        self.df_func(level=level)\n\n\nclass SeriesOps(object):\n\n    goal_time = 0.2\n    params = [ops, ['float', 'int'], [True, False]]\n    param_names = ['op', 'dtype', 'use_bottleneck']\n\n    def setup(self, op, dtype, use_bottleneck):\n        s = pd.Series(np.random.randn(100000)).astype(dtype)\n        try:\n            pd.options.compute.use_bottleneck = use_bottleneck\n        except:\n            from pandas.core import nanops\n            nanops._USE_BOTTLENECK = use_bottleneck\n        self.s_func = getattr(s, op)\n\n    def time_op(self, op, dtype, use_bottleneck):\n        self.s_func()\n\n\nclass SeriesMultiIndexOps(object):\n\n    goal_time = 0.2\n    params = ([0, 1, [0, 1]], ops)\n    param_names = ['level', 'op']\n\n    def setup(self, level, op):\n        levels = [np.arange(10), np.arange(100), np.arange(100)]\n        labels = [np.arange(10).repeat(10000),\n                  np.tile(np.arange(100).repeat(100), 10),\n                  np.tile(np.tile(np.arange(100), 100), 10)]\n        index = pd.MultiIndex(levels=levels, labels=labels)\n        s = pd.Series(np.random.randn(len(index)), index=index)\n        self.s_func = getattr(s, op)\n\n    def time_op(self, level, op):\n        self.s_func(level=level)\n\n\nclass Rank(object):\n\n    goal_time = 0.2\n    params = [['DataFrame', 'Series'], [True, False]]\n    param_names = ['constructor', 'pct']\n\n    def setup(self, constructor, pct):\n        values = np.random.randn(10**5)\n        self.data = getattr(pd, constructor)(values)\n\n    def time_rank(self, constructor, pct):\n        self.data.rank(pct=pct)\n\n    def time_average_old(self, constructor, pct):\n        self.data.rank(pct=pct) / len(self.data)\n\n\nclass Correlation(object):\n\n    goal_time = 0.2\n    params = ['spearman', 'kendall', 'pearson']\n    param_names = ['method']\n\n    def setup(self, method):\n        self.df = pd.DataFrame(np.random.randn(1000, 30))\n\n    def time_corr(self, method):\n        self.df.corr(method=method)\n", "description": "Flexible and powerful data analysis / manipulation library for Python, providing labeled data structures similar to R data.frame objects, statistical functions, and much more", "file_name": "stat_ops.py", "id": "2eb08deb53cf10478f0b512a0e12c633", "language": "Python", "project_name": "pandas", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/pandas-dev-pandas/pandas-dev-pandas-3783ccc/asv_bench/benchmarks/stat_ops.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:47:21Z", "url": "https://github.com/pandas-dev/pandas", "wiki": true}