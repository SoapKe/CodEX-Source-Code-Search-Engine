{"author": "rg3", "code": "\n\nfrom __future__ import unicode_literals\n\n\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom youtube_dl.jsinterp import JSInterpreter\n\n\nclass TestJSInterpreter(unittest.TestCase):\n    def test_basic(self):\n        jsi = JSInterpreter('function x(){;}')\n        self.assertEqual(jsi.call_function('x'), None)\n\n        jsi = JSInterpreter('function x3(){return 42;}')\n        self.assertEqual(jsi.call_function('x3'), 42)\n\n        jsi = JSInterpreter('var x5 = function(){return 42;}')\n        self.assertEqual(jsi.call_function('x5'), 42)\n\n    def test_calc(self):\n        jsi = JSInterpreter('function x4(a){return 2*a+1;}')\n        self.assertEqual(jsi.call_function('x4', 3), 7)\n\n    def test_empty_return(self):\n        jsi = JSInterpreter('function f(){return; y()}')\n        self.assertEqual(jsi.call_function('f'), None)\n\n    def test_morespace(self):\n        jsi = JSInterpreter('function x (a) { return 2 * a + 1 ; }')\n        self.assertEqual(jsi.call_function('x', 3), 7)\n\n        jsi = JSInterpreter('function f () { x =  2  ; return x; }')\n        self.assertEqual(jsi.call_function('f'), 2)\n\n    def test_strange_chars(self):\n        jsi = JSInterpreter('function $_xY1 ($_axY1) { var $_axY2 = $_axY1 + 1; return $_axY2; }')\n        self.assertEqual(jsi.call_function('$_xY1', 20), 21)\n\n    def test_operators(self):\n        jsi = JSInterpreter('function f(){return 1 << 5;}')\n        self.assertEqual(jsi.call_function('f'), 32)\n\n        jsi = JSInterpreter('function f(){return 19 & 21;}')\n        self.assertEqual(jsi.call_function('f'), 17)\n\n        jsi = JSInterpreter('function f(){return 11 >> 2;}')\n        self.assertEqual(jsi.call_function('f'), 2)\n\n    def test_array_access(self):\n        jsi = JSInterpreter('function f(){var x = [1,2,3]; x[0] = 4; x[0] = 5; x[2] = 7; return x;}')\n        self.assertEqual(jsi.call_function('f'), [5, 2, 7])\n\n    def test_parens(self):\n        jsi = JSInterpreter('function f(){return (1) + (2) * ((( (( (((((3)))))) )) ));}')\n        self.assertEqual(jsi.call_function('f'), 7)\n\n        jsi = JSInterpreter('function f(){return (1 + 2) * 3;}')\n        self.assertEqual(jsi.call_function('f'), 9)\n\n    def test_assignments(self):\n        jsi = JSInterpreter('function f(){var x = 20; x = 30 + 1; return x;}')\n        self.assertEqual(jsi.call_function('f'), 31)\n\n        jsi = JSInterpreter('function f(){var x = 20; x += 30 + 1; return x;}')\n        self.assertEqual(jsi.call_function('f'), 51)\n\n        jsi = JSInterpreter('function f(){var x = 20; x -= 30 + 1; return x;}')\n        self.assertEqual(jsi.call_function('f'), -11)\n\n    def test_comments(self):\n        'Skipping: Not yet fully implemented'\n        return\n        jsi = JSInterpreter()\n        self.assertEqual(jsi.call_function('z'), 5)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "\n        function x() {\n            var x = /* 1 + */ 2;\n            var y = /* 30\n            * 40 */ 50;\n            return x + y;\n        }\n        ''')\n        self.assertEqual(jsi.call_function('x'), 52)\n\n        jsi = JSInterpreter('''\n        function f() {\n            var x = \"/*\";\n            var y = 1 /* comment */ + 2;\n            return y;\n        }\n        ''')\n        self.assertEqual(jsi.call_function('f'), 3)\n\n    def test_precedence(self):\n        jsi = JSInterpreter('''\n        function x() {\n            var a = [10, 20, 30, 40, 50];\n            var b = 6;\n            a[0]=a[b%a.length];\n            return a;\n        }''')\n        self.assertEqual(jsi.call_function('x'), [20, 20, 30, 40, 50])\n\n    def test_call(self):\n        jsi = JSInterpreter('''\n        function x() { return 2; }\n        function y(a) { return x() + a; }\n        function z() { return y(3); }\n        \n \n#!/usr/bin/env python\n# Allow direct execution\n", "content": "#!/usr/bin/env python\n\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom youtube_dl.jsinterp import JSInterpreter\n\n\nclass TestJSInterpreter(unittest.TestCase):\n    def test_basic(self):\n        jsi = JSInterpreter('function x(){;}')\n        self.assertEqual(jsi.call_function('x'), None)\n\n        jsi = JSInterpreter('function x3(){return 42;}')\n        self.assertEqual(jsi.call_function('x3'), 42)\n\n        jsi = JSInterpreter('var x5 = function(){return 42;}')\n        self.assertEqual(jsi.call_function('x5'), 42)\n\n    def test_calc(self):\n        jsi = JSInterpreter('function x4(a){return 2*a+1;}')\n        self.assertEqual(jsi.call_function('x4', 3), 7)\n\n    def test_empty_return(self):\n        jsi = JSInterpreter('function f(){return; y()}')\n        self.assertEqual(jsi.call_function('f'), None)\n\n    def test_morespace(self):\n        jsi = JSInterpreter('function x (a) { return 2 * a + 1 ; }')\n        self.assertEqual(jsi.call_function('x', 3), 7)\n\n        jsi = JSInterpreter('function f () { x =  2  ; return x; }')\n        self.assertEqual(jsi.call_function('f'), 2)\n\n    def test_strange_chars(self):\n        jsi = JSInterpreter('function $_xY1 ($_axY1) { var $_axY2 = $_axY1 + 1; return $_axY2; }')\n        self.assertEqual(jsi.call_function('$_xY1', 20), 21)\n\n    def test_operators(self):\n        jsi = JSInterpreter('function f(){return 1 << 5;}')\n        self.assertEqual(jsi.call_function('f'), 32)\n\n        jsi = JSInterpreter('function f(){return 19 & 21;}')\n        self.assertEqual(jsi.call_function('f'), 17)\n\n        jsi = JSInterpreter('function f(){return 11 >> 2;}')\n        self.assertEqual(jsi.call_function('f'), 2)\n\n    def test_array_access(self):\n        jsi = JSInterpreter('function f(){var x = [1,2,3]; x[0] = 4; x[0] = 5; x[2] = 7; return x;}')\n        self.assertEqual(jsi.call_function('f'), [5, 2, 7])\n\n    def test_parens(self):\n        jsi = JSInterpreter('function f(){return (1) + (2) * ((( (( (((((3)))))) )) ));}')\n        self.assertEqual(jsi.call_function('f'), 7)\n\n        jsi = JSInterpreter('function f(){return (1 + 2) * 3;}')\n        self.assertEqual(jsi.call_function('f'), 9)\n\n    def test_assignments(self):\n        jsi = JSInterpreter('function f(){var x = 20; x = 30 + 1; return x;}')\n        self.assertEqual(jsi.call_function('f'), 31)\n\n        jsi = JSInterpreter('function f(){var x = 20; x += 30 + 1; return x;}')\n        self.assertEqual(jsi.call_function('f'), 51)\n\n        jsi = JSInterpreter('function f(){var x = 20; x -= 30 + 1; return x;}')\n        self.assertEqual(jsi.call_function('f'), -11)\n\n    def test_comments(self):\n        'Skipping: Not yet fully implemented'\n        return\n        jsi = JSInterpreter('''\n        function x() {\n            var x = /* 1 + */ 2;\n            var y = /* 30\n            * 40 */ 50;\n            return x + y;\n        }\n        ''')\n        self.assertEqual(jsi.call_function('x'), 52)\n\n        jsi = JSInterpreter('''\n        function f() {\n            var x = \"/*\";\n            var y = 1 /* comment */ + 2;\n            return y;\n        }\n        ''')\n        self.assertEqual(jsi.call_function('f'), 3)\n\n    def test_precedence(self):\n        jsi = JSInterpreter('''\n        function x() {\n            var a = [10, 20, 30, 40, 50];\n            var b = 6;\n            a[0]=a[b%a.length];\n            return a;\n        }''')\n        self.assertEqual(jsi.call_function('x'), [20, 20, 30, 40, 50])\n\n    def test_call(self):\n        jsi = JSInterpreter('''\n        function x() { return 2; }\n        function y(a) { return x() + a; }\n        function z() { return y(3); }\n        ''')\n        self.assertEqual(jsi.call_function('z'), 5)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "test_jsinterp.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/test/test_jsinterp.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}