{"author": "ansible", "code": "# (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n# (c) 2017 Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nDOCUMENTATION = '''\n    callback: oneline\n    type: stdout\n    short_description: oneline Ansible screen output\n    version_added: historical\n    description:\n        - This is the output callback used by the -o/--one-line command line option.\n'''\n\nfrom ansible.plugins.callback import CallbackBase\nfrom ansible import constants as C\n\n\nclass CallbackModule(CallbackBase):\n\n    '''\n    This is the default callback interface, which simply prints messages\n    to stdout when new callback events are received.\n    '''\n\n    CALLBACK_VERSION = 2.0\n    CALLBACK_TYPE = 'stdout'\n    CALLBACK_NAME = 'oneline'\n\n    def _command_generic_msg(self, hostname, result, caption):\n        stdout = result.get('stdout', '').replace('\\n', '\\\\n').replace('\\r', '\\\\r')\n        if 'stderr' in result and result['stderr']:\n            stderr = result.get('stderr', '').replace('\\n', '\\\\n').replace('\\r', '\\\\r')\n            return \"%s | %s | rc=%s | (stdout) %s (stderr) %s\" % (hostname, caption, result.get('rc', -1), stdout, stderr)\n        else:\n            return \"%s | %s | rc=%s | (stdout) %s\" % (hostname, caption, result.get('rc', -1), stdout)\n\n    def v2_runner_on_failed(self, result, ignore_errors=False):\n        if 'exception' in result._result:\n            if self._display.verbosity < 3:\n                \n                error = result._result['exception'].strip().split('\\n')[-1]\n                msg = \"An exception occurred during task execution. To see the full traceback, use -vvv. The error was: %s\" % error\n            else:\n                msg = \"An exception occurred during task execution. The full traceback is:\\n\" + result._result['exception'].replace('\\n', '')\n\n            if result._task.action in C.MODULE_NO_JSON and 'module_stderr' not in result._result:\n                self._display.display(self._command_generic_msg(result._host.get_name(), result._result, 'FAILED'), color=C.COLOR_ERROR)\n            else:\n                self._display.display(msg, color=C.COLOR_ERROR)\n\n        self._display.display(\"%s | FAILED! => %s\" % (result._host.get_name(), self._dump_results(result._result, indent=0).replace('\\n', '')),\n                              color=C.COLOR_ERROR)\n\n    def v2_runner_on_ok(self, result):\n        if result._task.action in C.MODULE_NO_JSON:\n            self._display.display(self._command_generic_msg(result._host.get_name(), result._result, 'SUCCESS'), color=C.COLOR_OK)\n        else:\n            self._display.display(\"%s | SUCCESS => %s\" % (result._host.get_name(), self._dump_results(result._result, indent=0).replace('\\n', '')),\n                                  color=C.COLOR_OK)\n\n    def v2_runner_on_unreachable(self, result):\n        self._display.display(\"%s | UNREACHABLE!: %s\" % (result._host.get_name(), result._result.get('msg', '')), color=C.COLOR_UNREACHABLE)\n\n    def v2_runner_on_skipped(self, result):\n        self._display.display(\"%s | SKIPPED\" % (result._host.get_name()), color=C.COLOR_SKIP)\n", "comments": "        callback  oneline     type  stdout     short description  oneline ansible screen output     version added  historical     description            this output callback used    one line command line option       ansible plugins callback import callbackbase ansible import constants c   class callbackmodule(callbackbase)               this default callback interface  simply prints messages     stdout new callback events received             (c) 2012 2014  michael dehaan  michael dehaan gmail com     (c) 2017 ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    make coding python3 ish    extract actual error message exception text ", "content": "# (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n# (c) 2017 Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nDOCUMENTATION = '''\n    callback: oneline\n    type: stdout\n    short_description: oneline Ansible screen output\n    version_added: historical\n    description:\n        - This is the output callback used by the -o/--one-line command line option.\n'''\n\nfrom ansible.plugins.callback import CallbackBase\nfrom ansible import constants as C\n\n\nclass CallbackModule(CallbackBase):\n\n    '''\n    This is the default callback interface, which simply prints messages\n    to stdout when new callback events are received.\n    '''\n\n    CALLBACK_VERSION = 2.0\n    CALLBACK_TYPE = 'stdout'\n    CALLBACK_NAME = 'oneline'\n\n    def _command_generic_msg(self, hostname, result, caption):\n        stdout = result.get('stdout', '').replace('\\n', '\\\\n').replace('\\r', '\\\\r')\n        if 'stderr' in result and result['stderr']:\n            stderr = result.get('stderr', '').replace('\\n', '\\\\n').replace('\\r', '\\\\r')\n            return \"%s | %s | rc=%s | (stdout) %s (stderr) %s\" % (hostname, caption, result.get('rc', -1), stdout, stderr)\n        else:\n            return \"%s | %s | rc=%s | (stdout) %s\" % (hostname, caption, result.get('rc', -1), stdout)\n\n    def v2_runner_on_failed(self, result, ignore_errors=False):\n        if 'exception' in result._result:\n            if self._display.verbosity < 3:\n                # extract just the actual error message from the exception text\n                error = result._result['exception'].strip().split('\\n')[-1]\n                msg = \"An exception occurred during task execution. To see the full traceback, use -vvv. The error was: %s\" % error\n            else:\n                msg = \"An exception occurred during task execution. The full traceback is:\\n\" + result._result['exception'].replace('\\n', '')\n\n            if result._task.action in C.MODULE_NO_JSON and 'module_stderr' not in result._result:\n                self._display.display(self._command_generic_msg(result._host.get_name(), result._result, 'FAILED'), color=C.COLOR_ERROR)\n            else:\n                self._display.display(msg, color=C.COLOR_ERROR)\n\n        self._display.display(\"%s | FAILED! => %s\" % (result._host.get_name(), self._dump_results(result._result, indent=0).replace('\\n', '')),\n                              color=C.COLOR_ERROR)\n\n    def v2_runner_on_ok(self, result):\n        if result._task.action in C.MODULE_NO_JSON:\n            self._display.display(self._command_generic_msg(result._host.get_name(), result._result, 'SUCCESS'), color=C.COLOR_OK)\n        else:\n            self._display.display(\"%s | SUCCESS => %s\" % (result._host.get_name(), self._dump_results(result._result, indent=0).replace('\\n', '')),\n                                  color=C.COLOR_OK)\n\n    def v2_runner_on_unreachable(self, result):\n        self._display.display(\"%s | UNREACHABLE!: %s\" % (result._host.get_name(), result._result.get('msg', '')), color=C.COLOR_UNREACHABLE)\n\n    def v2_runner_on_skipped(self, result):\n        self._display.display(\"%s | SKIPPED\" % (result._host.get_name()), color=C.COLOR_SKIP)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "oneline.py", "id": "1b68a46e3f6d52a92c1f799e028ce31f", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/plugins/callback/oneline.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}