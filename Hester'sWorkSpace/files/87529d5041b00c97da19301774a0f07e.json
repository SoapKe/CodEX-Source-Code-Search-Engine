{"author": "HelloZeroNet", "code": "import time\n\nimport gevent\n\nfrom Debug import Debug\nfrom Config import config\n\n\nclass Worker(object):\n\n    def __init__(self, manager, peer):\n        self.manager = manager\n        self.peer = peer\n        self.task = None\n        self.key = None\n        self.running = False\n        self.thread = None\n\n    def __str__(self):\n        return \"Worker %s %s\" % (self.manager.site.address_short, self.key)\n\n    def __repr__(self):\n        return \"<%s>\" % self.__str__()\n\n    \n    def downloader(self):\n        self.peer.hash_failed = 0  \n        while self.running:\n            \n            task = self.manager.getTask(self.peer)\n            if not task:  \n                time.sleep(0.1)  \n                task = self.manager.getTask(self.peer)\n                if not task:  \n                    self.manager.log.debug(\"%s: No task found, stopping\" % self.key)\n                    break\n            if not task[\"time_started\"]:\n                task[\"time_started\"] = time.time()  \n\n            if task[\"workers_num\"] > 0:  \n                if task[\"peers\"]:  \n                    timeout = 3\n                else:\n                    timeout = 1\n\n                if task[\"size\"] > 100 * 1024 * 1024:\n                    timeout = timeout * 2\n\n                if config.verbose:\n                    self.manager.log.debug(\"%s: Someone already working on %s (pri: %s), sleeping %s sec...\" % (\n                        self.key, task[\"inner_path\"], task[\"priority\"], timeout\n                    ))\n\n                for sleep_i in range(1, timeout * 10):\n                    time.sleep(0.1)\n                    if task[\"done\"] or task[\"workers_num\"] == 0:\n                        if config.verbose:\n                            self.manager.log.debug(\"%s: %s, picked task free after %ss sleep. (done: %s)\" % (\n                                self.key, task[\"inner_path\"], 0.1 * sleep_i, task[\"done\"]\n                            ))\n                        break\n\n            if task[\"done\"]:\n                continue\n\n            self.task = task\n            site = task[\"site\"]\n            task[\"workers_num\"] += 1\n            try:\n                buff = self.peer.getFile(site.address, task[\"inner_path\"], task[\"size\"])\n            except Exception, err:\n                self.manager.log.debug(\"%s: getFile error: %s\" % (self.key, err))\n                buff = None\n            if self.running is False:  \n                self.manager.log.debug(\"%s: No longer needed, returning: %s\" % (self.key, task[\"inner_path\"]))\n                break\n            if task[\"done\"] is True:  \n                continue\n            if buff:  \n                try:\n                    correct = site.content_manager.verifyFile(task[\"inner_path\"], buff)\n                except Exception, err:\n                    correct = False\n            else:  \n                err = \"Download failed\"\n                correct = False\n            if correct is True or correct is None:  \n                self.manager.log.debug(\"%s: Verify correct: %s\" % (self.key, task[\"inner_path\"]))\n                if correct is True and task[\"done\"] is False:  \n                    buff.seek(0)\n                    site.storage.write(task[\"inner_path\"], buff)\n                if task[\"done\"] is False:\n                    self.manager.doneTask(task)\n                task[\"workers_num\"] -= 1\n            else:  \n                task[\"workers_num\"] -= 1\n                self.manager.log.debug(\n                    \"%s: Verify failed: %s, error: %s, failed peers: %s, workers: %s\" %\n                    (self.key, task[\"inner_path\"], err, len(task[\"failed\"]), task[\"workers_num\"])\n                )\n                task[\"failed\"].append(self.peer)\n                self.peer.hash_failed += 1\n                if self.peer.hash_failed >= max(len(self.manager.tasks), 3) or self.peer.connection_error > 10:\n                    \n                    break\n                time.sleep(1)\n        self.peer.onWorkerDone()\n        self.running = False\n        self.manager.removeWorker(self)\n\n    \n    def start(self):\n        self.running = True\n        self.thread = gevent.spawn(self.downloader)\n\n    \n    def skip(self):\n        self.manager.log.debug(\"%s: Force skipping\" % self.key)\n        if self.thread:\n            self.thread.kill(exception=Debug.Notify(\"Worker stopped\"))\n        self.start()\n\n    \n    def stop(self):\n        self.manager.log.debug(\"%s: Force stopping\" % self.key)\n        self.running = False\n        if self.thread:\n            self.thread.kill(exception=Debug.Notify(\"Worker stopped\"))\n        del self.thread\n        self.manager.removeWorker(self)\n", "comments": "  downloader thread    reset hash error counter    try pickup free file download task    no task    wait bit new tasks    still task  stop    task started    wait bit someone already working    it update    worker longer needed got killed    task done  try find new one    download ok    download error    verify ok file    save changed task done yet    verify failed    broken peer  more fails tasks number atleast 3    start worker    skip current task    force stop worker ", "content": "import time\n\nimport gevent\n\nfrom Debug import Debug\nfrom Config import config\n\n\nclass Worker(object):\n\n    def __init__(self, manager, peer):\n        self.manager = manager\n        self.peer = peer\n        self.task = None\n        self.key = None\n        self.running = False\n        self.thread = None\n\n    def __str__(self):\n        return \"Worker %s %s\" % (self.manager.site.address_short, self.key)\n\n    def __repr__(self):\n        return \"<%s>\" % self.__str__()\n\n    # Downloader thread\n    def downloader(self):\n        self.peer.hash_failed = 0  # Reset hash error counter\n        while self.running:\n            # Try to pickup free file download task\n            task = self.manager.getTask(self.peer)\n            if not task:  # No more task\n                time.sleep(0.1)  # Wait a bit for new tasks\n                task = self.manager.getTask(self.peer)\n                if not task:  # Still no task, stop it\n                    self.manager.log.debug(\"%s: No task found, stopping\" % self.key)\n                    break\n            if not task[\"time_started\"]:\n                task[\"time_started\"] = time.time()  # Task started now\n\n            if task[\"workers_num\"] > 0:  # Wait a bit if someone already working on it\n                if task[\"peers\"]:  # It's an update\n                    timeout = 3\n                else:\n                    timeout = 1\n\n                if task[\"size\"] > 100 * 1024 * 1024:\n                    timeout = timeout * 2\n\n                if config.verbose:\n                    self.manager.log.debug(\"%s: Someone already working on %s (pri: %s), sleeping %s sec...\" % (\n                        self.key, task[\"inner_path\"], task[\"priority\"], timeout\n                    ))\n\n                for sleep_i in range(1, timeout * 10):\n                    time.sleep(0.1)\n                    if task[\"done\"] or task[\"workers_num\"] == 0:\n                        if config.verbose:\n                            self.manager.log.debug(\"%s: %s, picked task free after %ss sleep. (done: %s)\" % (\n                                self.key, task[\"inner_path\"], 0.1 * sleep_i, task[\"done\"]\n                            ))\n                        break\n\n            if task[\"done\"]:\n                continue\n\n            self.task = task\n            site = task[\"site\"]\n            task[\"workers_num\"] += 1\n            try:\n                buff = self.peer.getFile(site.address, task[\"inner_path\"], task[\"size\"])\n            except Exception, err:\n                self.manager.log.debug(\"%s: getFile error: %s\" % (self.key, err))\n                buff = None\n            if self.running is False:  # Worker no longer needed or got killed\n                self.manager.log.debug(\"%s: No longer needed, returning: %s\" % (self.key, task[\"inner_path\"]))\n                break\n            if task[\"done\"] is True:  # Task done, try to find new one\n                continue\n            if buff:  # Download ok\n                try:\n                    correct = site.content_manager.verifyFile(task[\"inner_path\"], buff)\n                except Exception, err:\n                    correct = False\n            else:  # Download error\n                err = \"Download failed\"\n                correct = False\n            if correct is True or correct is None:  # Verify ok or same file\n                self.manager.log.debug(\"%s: Verify correct: %s\" % (self.key, task[\"inner_path\"]))\n                if correct is True and task[\"done\"] is False:  # Save if changed and task not done yet\n                    buff.seek(0)\n                    site.storage.write(task[\"inner_path\"], buff)\n                if task[\"done\"] is False:\n                    self.manager.doneTask(task)\n                task[\"workers_num\"] -= 1\n            else:  # Verify failed\n                task[\"workers_num\"] -= 1\n                self.manager.log.debug(\n                    \"%s: Verify failed: %s, error: %s, failed peers: %s, workers: %s\" %\n                    (self.key, task[\"inner_path\"], err, len(task[\"failed\"]), task[\"workers_num\"])\n                )\n                task[\"failed\"].append(self.peer)\n                self.peer.hash_failed += 1\n                if self.peer.hash_failed >= max(len(self.manager.tasks), 3) or self.peer.connection_error > 10:\n                    # Broken peer: More fails than tasks number but atleast 3\n                    break\n                time.sleep(1)\n        self.peer.onWorkerDone()\n        self.running = False\n        self.manager.removeWorker(self)\n\n    # Start the worker\n    def start(self):\n        self.running = True\n        self.thread = gevent.spawn(self.downloader)\n\n    # Skip current task\n    def skip(self):\n        self.manager.log.debug(\"%s: Force skipping\" % self.key)\n        if self.thread:\n            self.thread.kill(exception=Debug.Notify(\"Worker stopped\"))\n        self.start()\n\n    # Force stop the worker\n    def stop(self):\n        self.manager.log.debug(\"%s: Force stopping\" % self.key)\n        self.running = False\n        if self.thread:\n            self.thread.kill(exception=Debug.Notify(\"Worker stopped\"))\n        del self.thread\n        self.manager.removeWorker(self)\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "Worker.py", "id": "87529d5041b00c97da19301774a0f07e", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/Worker/Worker.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}