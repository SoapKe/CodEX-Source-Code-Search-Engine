{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\nimport os\nimport sys\nsys.path.append(os.path.abspath(os.path.join(__file__, '../../')))\nimport numpy as np\nimport tensorflow as tf\nfrom config import get_config\nfrom model_n2nmn.assembler import Assembler\nfrom model_n2nmn.model import Model\nfrom util.data_reader import DataReader\nfrom util.data_reader import SampleBuilder\nfrom util.misc import prepare_dirs_and_logger\n\nFLAGS = tf.flags.FLAGS\ntf.flags.DEFINE_string('snapshot_name', '00001000', 'snapshot file name')\n\n\ndef main(_):\n  config = prepare_dirs_and_logger(config_raw)\n\n  rng = np.random.RandomState(config.random_seed)\n  tf.set_random_seed(config.random_seed)\n  config.rng = rng\n\n  config.module_names = ['_key_find', '_key_filter', '_val_desc', '<eos>']\n  config.gt_layout_tokens = ['_key_find', '_key_filter', '_val_desc', '<eos>']\n  assembler = Assembler(config)\n\n  sample_builder = SampleBuilder(config)\n  config = sample_builder.config   update T_encoder according to data\n  data_test = sample_builder.data_all['test']\n  data_reader_test = DataReader(\n      config, data_test, assembler, shuffle=False, one_pass=True)\n\n  num_vocab_txt = len(sample_builder.dict_all)\n  num_vocab_nmn = len(assembler.module_names)\n  num_choices = len(sample_builder.dict_all)\n\n   Network inputs\n  text_seq_batch = tf.placeholder(tf.int32, [None, None])\n  seq_len_batch = tf.placeholder(tf.int32, [None])\n\n   The model\n  model = Model(\n      config,\n      sample_builder.kb,\n      text_seq_batch,\n      seq_len_batch,\n      num_vocab_txt=num_vocab_txt,\n      num_vocab_nmn=num_vocab_nmn,\n      EOS_idx=assembler.EOS_idx,\n      num_choices=num_choices,\n      decoder_sampling=False)\n  compiler = model.compiler\n  scores = model.scores\n\n  sess = tf.Session()\n  sess.run(tf.global_variables_initializer())\n  snapshot_file = os.path.join(config.model_dir, FLAGS.snapshot_name)\n  tf.logging.info('Snapshot file: %s' % snapshot_file)\n\n  snapshot_saver = tf.train.Saver()\n  snapshot_saver.restore(sess, snapshot_file)\n\n   Evaluation metrics\n  num_questions = len(data_test.Y)\n  tf.logging.info(' of test questions: %d' % num_questions)\n\n  answer_correct = 0\n  layout_correct = 0\n  layout_valid = 0\n  for batch in data_reader_test.batches():\n     set up input and output tensors\n    h = sess.partial_run_setup(\n        fetches=[model.predicted_tokens, scores],\n        feeds=[text_seq_batch, seq_len_batch, compiler.loom_input_tensor])\n\n     Part 1: Generate module layout\n    tokens = sess.partial_run(\n        h,\n        fetches=model.predicted_tokens,\n        feed_dict={\n            text_seq_batch: batch['input_seq_batch'],\n            seq_len_batch: batch['seq_len_batch']\n        })\n\n     Compute accuracy of the predicted layout\n    gt_tokens = batch['gt_layout_batch']\n    layout_correct += np.sum(\n        np.all(\n            np.logical_or(tokens == gt_tokens, gt_tokens == assembler.EOS_idx),\n            axis=0))\n\n     Assemble the layout tokens into network structure\n    expr_list, expr_validity_array = assembler.assemble(tokens)\n    layout_valid += np.sum(expr_validity_array)\n    labels = batch['ans_label_batch']\n     Build TensorFlow Fold input for NMN\n    expr_feed = compiler.build_feed_dict(expr_list)\n\n     Part 2: Run NMN and learning steps\n    scores_val = sess.partial_run(h, scores, feed_dict=expr_feed)\n\n     Compute accuracy\n    predictions = np.argmax(scores_val, axis=1)\n    answer_correct += np.sum(\n        np.logical_and(expr_validity_array, predictions == labels))\n\n  answer_accuracy = answer_correct * 1.0 / num_questions\n  layout_accuracy = layout_correct * 1.0 / num_questions\n  layout_validity = layout_valid * 1.0 / num_questions\n\n  tf.logging.info('test answer accuracy = %f, '\n                  'test layout accuracy = %f, '\n                  'test layout validity = %f' %\n                  (answer_accuracy, layout_accuracy, layout_validity))\n\n\nif __name__ == '__main__':\n  config_raw, unparsed = get_config()\n  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)\n", "comments": "  copyright 2017 the tensorflow authors all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       update t encoder according data    network inputs    the model    evaluation metrics    set input output tensors    part 1  generate module layout    compute accuracy predicted layout    assemble layout tokens network structure    build tensorflow fold input nmn    part 2  run nmn learning steps    compute accuracy ", "content": "# Copyright 2017 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\nimport os\nimport sys\nsys.path.append(os.path.abspath(os.path.join(__file__, '../../')))\nimport numpy as np\nimport tensorflow as tf\nfrom config import get_config\nfrom model_n2nmn.assembler import Assembler\nfrom model_n2nmn.model import Model\nfrom util.data_reader import DataReader\nfrom util.data_reader import SampleBuilder\nfrom util.misc import prepare_dirs_and_logger\n\nFLAGS = tf.flags.FLAGS\ntf.flags.DEFINE_string('snapshot_name', '00001000', 'snapshot file name')\n\n\ndef main(_):\n  config = prepare_dirs_and_logger(config_raw)\n\n  rng = np.random.RandomState(config.random_seed)\n  tf.set_random_seed(config.random_seed)\n  config.rng = rng\n\n  config.module_names = ['_key_find', '_key_filter', '_val_desc', '<eos>']\n  config.gt_layout_tokens = ['_key_find', '_key_filter', '_val_desc', '<eos>']\n  assembler = Assembler(config)\n\n  sample_builder = SampleBuilder(config)\n  config = sample_builder.config  # update T_encoder according to data\n  data_test = sample_builder.data_all['test']\n  data_reader_test = DataReader(\n      config, data_test, assembler, shuffle=False, one_pass=True)\n\n  num_vocab_txt = len(sample_builder.dict_all)\n  num_vocab_nmn = len(assembler.module_names)\n  num_choices = len(sample_builder.dict_all)\n\n  # Network inputs\n  text_seq_batch = tf.placeholder(tf.int32, [None, None])\n  seq_len_batch = tf.placeholder(tf.int32, [None])\n\n  # The model\n  model = Model(\n      config,\n      sample_builder.kb,\n      text_seq_batch,\n      seq_len_batch,\n      num_vocab_txt=num_vocab_txt,\n      num_vocab_nmn=num_vocab_nmn,\n      EOS_idx=assembler.EOS_idx,\n      num_choices=num_choices,\n      decoder_sampling=False)\n  compiler = model.compiler\n  scores = model.scores\n\n  sess = tf.Session()\n  sess.run(tf.global_variables_initializer())\n  snapshot_file = os.path.join(config.model_dir, FLAGS.snapshot_name)\n  tf.logging.info('Snapshot file: %s' % snapshot_file)\n\n  snapshot_saver = tf.train.Saver()\n  snapshot_saver.restore(sess, snapshot_file)\n\n  # Evaluation metrics\n  num_questions = len(data_test.Y)\n  tf.logging.info('# of test questions: %d' % num_questions)\n\n  answer_correct = 0\n  layout_correct = 0\n  layout_valid = 0\n  for batch in data_reader_test.batches():\n    # set up input and output tensors\n    h = sess.partial_run_setup(\n        fetches=[model.predicted_tokens, scores],\n        feeds=[text_seq_batch, seq_len_batch, compiler.loom_input_tensor])\n\n    # Part 1: Generate module layout\n    tokens = sess.partial_run(\n        h,\n        fetches=model.predicted_tokens,\n        feed_dict={\n            text_seq_batch: batch['input_seq_batch'],\n            seq_len_batch: batch['seq_len_batch']\n        })\n\n    # Compute accuracy of the predicted layout\n    gt_tokens = batch['gt_layout_batch']\n    layout_correct += np.sum(\n        np.all(\n            np.logical_or(tokens == gt_tokens, gt_tokens == assembler.EOS_idx),\n            axis=0))\n\n    # Assemble the layout tokens into network structure\n    expr_list, expr_validity_array = assembler.assemble(tokens)\n    layout_valid += np.sum(expr_validity_array)\n    labels = batch['ans_label_batch']\n    # Build TensorFlow Fold input for NMN\n    expr_feed = compiler.build_feed_dict(expr_list)\n\n    # Part 2: Run NMN and learning steps\n    scores_val = sess.partial_run(h, scores, feed_dict=expr_feed)\n\n    # Compute accuracy\n    predictions = np.argmax(scores_val, axis=1)\n    answer_correct += np.sum(\n        np.logical_and(expr_validity_array, predictions == labels))\n\n  answer_accuracy = answer_correct * 1.0 / num_questions\n  layout_accuracy = layout_correct * 1.0 / num_questions\n  layout_validity = layout_valid * 1.0 / num_questions\n\n  tf.logging.info('test answer accuracy = %f, '\n                  'test layout accuracy = %f, '\n                  'test layout validity = %f' %\n                  (answer_accuracy, layout_accuracy, layout_validity))\n\n\nif __name__ == '__main__':\n  config_raw, unparsed = get_config()\n  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)\n", "description": "Models and examples built with TensorFlow", "file_name": "test.py", "id": "bdb21af114eb54beac2321d04f35ab4d", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/research/qa_kg/exp_1_hop/test.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}