{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .gigya import GigyaBaseIE\n\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    try_get,\n    unified_timestamp,\n)\n\n\nclass MedialaanIE(GigyaBaseIE):\n    _VALID_URL = r\n    _NETRC_MACHINE = 'medialaan'\n    _APIKEY = '3_HZ0FtkMW_gOyKlqQzW5_0FHRC7Nd5XpXJZcDdXY4pk5eES2ZWmejRW5egwVm4ug-'\n    _SITE_TO_APP_ID = {\n        'vtm': 'vtm_watch',\n        'q2': 'q2',\n        'vtmkzoom': 'vtmkzoom',\n    }\n    _TESTS = [{\n        \n        'url': 'http://vtm.be/video/volledige-afleveringen/id/vtm_20170219_VM0678361_vtmwatch',\n        'info_dict': {\n            'id': 'vtm_20170219_VM0678361_vtmwatch',\n            'ext': 'mp4',\n            'title': 'Allemaal Chris afl. 6',\n            'description': 'md5:4be86427521e7b07e0adb0c9c554ddb2',\n            'timestamp': 1487533280,\n            'upload_date': '20170219',\n            'duration': 2562,\n            'series': 'Allemaal Chris',\n            'season': 'Allemaal Chris',\n            'season_number': 1,\n            'season_id': '256936078124527',\n            'episode': 'Allemaal Chris afl. 6',\n            'episode_number': 6,\n            'episode_id': '256936078591527',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Requires account credentials',\n    }, {\n        \n        'url': 'http://vtm.be/video?aid=168332',\n        'info_dict': {\n            'id': '168332',\n            'ext': 'mp4',\n            'title': '\"Veronique liegt!\"',\n            'description': 'md5:1385e2b743923afe54ba4adc38476155',\n            'timestamp': 1489002029,\n            'upload_date': '20170308',\n            'duration': 96,\n        },\n    }, {\n        \n        'url': 'http://vtm.be/video/volledige-afleveringen/id/257107153551000',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://vtm.be/video?aid=163157',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://www.q2.be/video/volledige-afleveringen/id/2be_20170301_VM0684442_q2',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://vtmkzoom.be/k3-dansstudio/een-nieuw-seizoen-van-k3-dansstudio',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://vtmkzoom.be/video?aid=45724',\n        'info_dict': {\n            'id': '257136373657000',\n            'ext': 'mp4',\n            'title': 'K3 Dansstudio Ushuaia afl.6',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Requires account credentials',\n    }, {\n        \n        'url': 'https://nieuws.vtm.be/stadion/stadion/genk-nog-moeilijk-programma',\n        'only_matching': True,\n    }]\n\n    def _real_initialize(self):\n        self._logged_in = False\n\n    def _login(self):\n        username, password = self._get_login_info()\n        if username is None:\n            self.raise_login_required()\n\n        auth_data = {\n            'APIKey': self._APIKEY,\n            'sdk': 'js_6.1',\n            'format': 'json',\n            'loginID': username,\n            'password': password,\n        }\n\n        auth_info = self._gigya_login(auth_data)\n\n        self._uid = auth_info['UID']\n        self._uid_signature = auth_info['UIDSignature']\n        self._signature_timestamp = auth_info['signatureTimestamp']\n\n        self._logged_in = True\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, site_id = mobj.group('id', 'site_id')\n\n        webpage = self._download_webpage(url, video_id)\n\n        config = self._parse_json(\n            self._search_regex(\n                r'videoJSConfig\\s*=\\s*JSON\\.parse\\(\\'({.+?})\\'\\);',\n                webpage, 'config', default='{}'), video_id,\n            transform_source=lambda s: s.replace(\n                '\\\\\\\\', '\\\\').replace(r'\\\"', '\"').replace(r\"\\'\", \"'\"))\n\n        vod_id = config.get('vodId') or self._search_regex(\n            (r'\\\\\"vodId\\\\\"\\s*:\\s*\\\\\"(.+?)\\\\\"',\n             r'<[^>]+id=[\"\\']vod-(\\d+)'),\n            webpage, 'video_id', default=None)\n\n        \n        if not vod_id:\n            player = self._parse_json(\n                self._search_regex(\n                    r'vmmaplayer\\(({.+?})\\);', webpage, 'vmma player',\n                    default=''),\n                video_id, transform_source=lambda s: '[%s]' % s, fatal=False)\n            if player:\n                video = player[-1]\n                if video['videoUrl'] in ('http', 'https'):\n                    return self.url_result(video['url'], MedialaanIE.ie_key())\n                info = {\n                    'id': video_id,\n                    'url': video['videoUrl'],\n                    'title': video['title'],\n                    'thumbnail': video.get('imageUrl'),\n                    'timestamp': int_or_none(video.get('createdDate')),\n                    'duration': int_or_none(video.get('duration')),\n                }\n            else:\n                info = self._parse_html5_media_entries(\n                    url, webpage, video_id, m3u8_id='hls')[0]\n                info.update({\n                    'id': video_id,\n                    'title': self._html_search_meta('description', webpage),\n                    'duration': parse_duration(self._html_search_meta('duration', webpage)),\n                })\n        \n        else:\n            if not self._logged_in:\n                self._login()\n\n            settings = self._parse_json(\n                self._search_regex(\n                    r'jQuery\\.extend\\(Drupal\\.settings\\s*,\\s*({.+?})\\);',\n                    webpage, 'drupal settings', default='{}'),\n                video_id)\n\n            def get(container, item):\n                return try_get(\n                    settings, lambda x: x[container][item],\n                    compat_str) or self._search_regex(\n                    r'\"%s\"\\s*:\\s*\"([^\"]+)' % item, webpage, item,\n                    default=None)\n\n            app_id = get('vod', 'app_id') or self._SITE_TO_APP_ID.get(site_id, 'vtm_watch')\n            sso = get('vod', 'gigyaDatabase') or 'vtm-sso'\n\n            data = self._download_json(\n                'http://vod.medialaan.io/api/1.0/item/%s/video' % vod_id,\n                video_id, query={\n                    'app_id': app_id,\n                    'user_network': sso,\n                    'UID': self._uid,\n                    'UIDSignature': self._uid_signature,\n                    'signatureTimestamp': self._signature_timestamp,\n                })\n\n            formats = self._extract_m3u8_formats(\n                data['response']['uri'], video_id, entry_protocol='m3u8_native',\n                ext='mp4', m3u8_id='hls')\n\n            self._sort_formats(formats)\n\n            info = {\n                'id': vod_id,\n                'formats': formats,\n            }\n\n            api_key = get('vod', 'apiKey')\n            channel = get('medialaanGigya', 'channel')\n\n            if api_key:\n                videos = self._download_json(\n                    'http://vod.medialaan.io/vod/v2/videos', video_id, fatal=False,\n                    query={\n                        'channels': channel,\n                        'ids': vod_id,\n                        'limit': 1,\n                        'apikey': api_key,\n                    })\n                if videos:\n                    video = try_get(\n                        videos, lambda x: x['response']['videos'][0], dict)\n                    if video:\n                        def get(container, item, expected_type=None):\n                            return try_get(\n                                video, lambda x: x[container][item], expected_type)\n\n                        def get_string(container, item):\n                            return get(container, item, compat_str)\n\n                        info.update({\n                            'series': get_string('program', 'title'),\n                            'season': get_string('season', 'title'),\n                            'season_number': int_or_none(get('season', 'number')),\n                            'season_id': get_string('season', 'id'),\n                            'episode': get_string('episode', 'title'),\n                            'episode_number': int_or_none(get('episode', 'number')),\n                            'episode_id': get_string('episode', 'id'),\n                            'duration': int_or_none(\n                                video.get('duration')) or int_or_none(\n                                video.get('durationMillis'), scale=1000),\n                            'title': get_string('episode', 'title'),\n                            'description': get_string('episode', 'text'),\n                            'timestamp': unified_timestamp(get_string(\n                                'publication', 'begin')),\n                        })\n\n            if not info.get('title'):\n                info['title'] = try_get(\n                    config, lambda x: x['videoConfig']['title'],\n                    compat_str) or self._html_search_regex(\n                    r'\\\\\"title\\\\\"\\s*:\\s*\\\\\"(.+?)\\\\\"', webpage, 'title',\n                    default=None) or self._og_search_title(webpage)\n\n        if not info.get('description'):\n            info['description'] = self._html_search_regex(\n                r'<div[^>]+class=\"field-item\\s+even\">\\s*<p>(.+?)</p>',\n                webpage, 'description', default=None)\n\n        return info\n", "comments": "(?x)\n                    https?://\n                        (?:www\\.|nieuws\\.)?\n                        (?:\n                            (?P<site_id>vtm|q2|vtmkzoom)\\.be/\n                            (?:\n                                video(?:/[^/]+/id/|/?\\?.*?\\baid=)|\n                                (?:[^/]+/)*\n                            )\n                        )\n                        (?P<id>[^/?#&]+)\n                    \n \n# vod\n# clip\n# vod\n# vod\n# vod\n# clip\n# http/s redirect\n# nieuws.vtm.be\n# clip, no authentication required\n# vod, authentication required\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .gigya import GigyaBaseIE\n\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    try_get,\n    unified_timestamp,\n)\n\n\nclass MedialaanIE(GigyaBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.|nieuws\\.)?\n                        (?:\n                            (?P<site_id>vtm|q2|vtmkzoom)\\.be/\n                            (?:\n                                video(?:/[^/]+/id/|/?\\?.*?\\baid=)|\n                                (?:[^/]+/)*\n                            )\n                        )\n                        (?P<id>[^/?#&]+)\n                    '''\n    _NETRC_MACHINE = 'medialaan'\n    _APIKEY = '3_HZ0FtkMW_gOyKlqQzW5_0FHRC7Nd5XpXJZcDdXY4pk5eES2ZWmejRW5egwVm4ug-'\n    _SITE_TO_APP_ID = {\n        'vtm': 'vtm_watch',\n        'q2': 'q2',\n        'vtmkzoom': 'vtmkzoom',\n    }\n    _TESTS = [{\n        # vod\n        'url': 'http://vtm.be/video/volledige-afleveringen/id/vtm_20170219_VM0678361_vtmwatch',\n        'info_dict': {\n            'id': 'vtm_20170219_VM0678361_vtmwatch',\n            'ext': 'mp4',\n            'title': 'Allemaal Chris afl. 6',\n            'description': 'md5:4be86427521e7b07e0adb0c9c554ddb2',\n            'timestamp': 1487533280,\n            'upload_date': '20170219',\n            'duration': 2562,\n            'series': 'Allemaal Chris',\n            'season': 'Allemaal Chris',\n            'season_number': 1,\n            'season_id': '256936078124527',\n            'episode': 'Allemaal Chris afl. 6',\n            'episode_number': 6,\n            'episode_id': '256936078591527',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Requires account credentials',\n    }, {\n        # clip\n        'url': 'http://vtm.be/video?aid=168332',\n        'info_dict': {\n            'id': '168332',\n            'ext': 'mp4',\n            'title': '\"Veronique liegt!\"',\n            'description': 'md5:1385e2b743923afe54ba4adc38476155',\n            'timestamp': 1489002029,\n            'upload_date': '20170308',\n            'duration': 96,\n        },\n    }, {\n        # vod\n        'url': 'http://vtm.be/video/volledige-afleveringen/id/257107153551000',\n        'only_matching': True,\n    }, {\n        # vod\n        'url': 'http://vtm.be/video?aid=163157',\n        'only_matching': True,\n    }, {\n        # vod\n        'url': 'http://www.q2.be/video/volledige-afleveringen/id/2be_20170301_VM0684442_q2',\n        'only_matching': True,\n    }, {\n        # clip\n        'url': 'http://vtmkzoom.be/k3-dansstudio/een-nieuw-seizoen-van-k3-dansstudio',\n        'only_matching': True,\n    }, {\n        # http/s redirect\n        'url': 'https://vtmkzoom.be/video?aid=45724',\n        'info_dict': {\n            'id': '257136373657000',\n            'ext': 'mp4',\n            'title': 'K3 Dansstudio Ushuaia afl.6',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Requires account credentials',\n    }, {\n        # nieuws.vtm.be\n        'url': 'https://nieuws.vtm.be/stadion/stadion/genk-nog-moeilijk-programma',\n        'only_matching': True,\n    }]\n\n    def _real_initialize(self):\n        self._logged_in = False\n\n    def _login(self):\n        username, password = self._get_login_info()\n        if username is None:\n            self.raise_login_required()\n\n        auth_data = {\n            'APIKey': self._APIKEY,\n            'sdk': 'js_6.1',\n            'format': 'json',\n            'loginID': username,\n            'password': password,\n        }\n\n        auth_info = self._gigya_login(auth_data)\n\n        self._uid = auth_info['UID']\n        self._uid_signature = auth_info['UIDSignature']\n        self._signature_timestamp = auth_info['signatureTimestamp']\n\n        self._logged_in = True\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, site_id = mobj.group('id', 'site_id')\n\n        webpage = self._download_webpage(url, video_id)\n\n        config = self._parse_json(\n            self._search_regex(\n                r'videoJSConfig\\s*=\\s*JSON\\.parse\\(\\'({.+?})\\'\\);',\n                webpage, 'config', default='{}'), video_id,\n            transform_source=lambda s: s.replace(\n                '\\\\\\\\', '\\\\').replace(r'\\\"', '\"').replace(r\"\\'\", \"'\"))\n\n        vod_id = config.get('vodId') or self._search_regex(\n            (r'\\\\\"vodId\\\\\"\\s*:\\s*\\\\\"(.+?)\\\\\"',\n             r'<[^>]+id=[\"\\']vod-(\\d+)'),\n            webpage, 'video_id', default=None)\n\n        # clip, no authentication required\n        if not vod_id:\n            player = self._parse_json(\n                self._search_regex(\n                    r'vmmaplayer\\(({.+?})\\);', webpage, 'vmma player',\n                    default=''),\n                video_id, transform_source=lambda s: '[%s]' % s, fatal=False)\n            if player:\n                video = player[-1]\n                if video['videoUrl'] in ('http', 'https'):\n                    return self.url_result(video['url'], MedialaanIE.ie_key())\n                info = {\n                    'id': video_id,\n                    'url': video['videoUrl'],\n                    'title': video['title'],\n                    'thumbnail': video.get('imageUrl'),\n                    'timestamp': int_or_none(video.get('createdDate')),\n                    'duration': int_or_none(video.get('duration')),\n                }\n            else:\n                info = self._parse_html5_media_entries(\n                    url, webpage, video_id, m3u8_id='hls')[0]\n                info.update({\n                    'id': video_id,\n                    'title': self._html_search_meta('description', webpage),\n                    'duration': parse_duration(self._html_search_meta('duration', webpage)),\n                })\n        # vod, authentication required\n        else:\n            if not self._logged_in:\n                self._login()\n\n            settings = self._parse_json(\n                self._search_regex(\n                    r'jQuery\\.extend\\(Drupal\\.settings\\s*,\\s*({.+?})\\);',\n                    webpage, 'drupal settings', default='{}'),\n                video_id)\n\n            def get(container, item):\n                return try_get(\n                    settings, lambda x: x[container][item],\n                    compat_str) or self._search_regex(\n                    r'\"%s\"\\s*:\\s*\"([^\"]+)' % item, webpage, item,\n                    default=None)\n\n            app_id = get('vod', 'app_id') or self._SITE_TO_APP_ID.get(site_id, 'vtm_watch')\n            sso = get('vod', 'gigyaDatabase') or 'vtm-sso'\n\n            data = self._download_json(\n                'http://vod.medialaan.io/api/1.0/item/%s/video' % vod_id,\n                video_id, query={\n                    'app_id': app_id,\n                    'user_network': sso,\n                    'UID': self._uid,\n                    'UIDSignature': self._uid_signature,\n                    'signatureTimestamp': self._signature_timestamp,\n                })\n\n            formats = self._extract_m3u8_formats(\n                data['response']['uri'], video_id, entry_protocol='m3u8_native',\n                ext='mp4', m3u8_id='hls')\n\n            self._sort_formats(formats)\n\n            info = {\n                'id': vod_id,\n                'formats': formats,\n            }\n\n            api_key = get('vod', 'apiKey')\n            channel = get('medialaanGigya', 'channel')\n\n            if api_key:\n                videos = self._download_json(\n                    'http://vod.medialaan.io/vod/v2/videos', video_id, fatal=False,\n                    query={\n                        'channels': channel,\n                        'ids': vod_id,\n                        'limit': 1,\n                        'apikey': api_key,\n                    })\n                if videos:\n                    video = try_get(\n                        videos, lambda x: x['response']['videos'][0], dict)\n                    if video:\n                        def get(container, item, expected_type=None):\n                            return try_get(\n                                video, lambda x: x[container][item], expected_type)\n\n                        def get_string(container, item):\n                            return get(container, item, compat_str)\n\n                        info.update({\n                            'series': get_string('program', 'title'),\n                            'season': get_string('season', 'title'),\n                            'season_number': int_or_none(get('season', 'number')),\n                            'season_id': get_string('season', 'id'),\n                            'episode': get_string('episode', 'title'),\n                            'episode_number': int_or_none(get('episode', 'number')),\n                            'episode_id': get_string('episode', 'id'),\n                            'duration': int_or_none(\n                                video.get('duration')) or int_or_none(\n                                video.get('durationMillis'), scale=1000),\n                            'title': get_string('episode', 'title'),\n                            'description': get_string('episode', 'text'),\n                            'timestamp': unified_timestamp(get_string(\n                                'publication', 'begin')),\n                        })\n\n            if not info.get('title'):\n                info['title'] = try_get(\n                    config, lambda x: x['videoConfig']['title'],\n                    compat_str) or self._html_search_regex(\n                    r'\\\\\"title\\\\\"\\s*:\\s*\\\\\"(.+?)\\\\\"', webpage, 'title',\n                    default=None) or self._og_search_title(webpage)\n\n        if not info.get('description'):\n            info['description'] = self._html_search_regex(\n                r'<div[^>]+class=\"field-item\\s+even\">\\s*<p>(.+?)</p>',\n                webpage, 'description', default=None)\n\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "medialaan.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/medialaan.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}