{"author": "django", "code": "import datetime\nfrom decimal import Decimal\n\nfrom django.db.models import Case, Count, F, Q, Sum, When\nfrom django.test import TestCase\n\nfrom .models import Author, Book, Publisher\n\n\nclass FilteredAggregateTests(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        cls.a1 = Author.objects.create(name='test', age=40)\n        cls.a2 = Author.objects.create(name='test2', age=60)\n        cls.a3 = Author.objects.create(name='test3', age=100)\n        cls.p1 = Publisher.objects.create(name='Apress', num_awards=3, duration=datetime.timedelta(days=1))\n        cls.b1 = Book.objects.create(\n            isbn='159059725', name='The Definitive Guide to Django: Web Development Done Right',\n            pages=447, rating=4.5, price=Decimal('30.00'), contact=cls.a1, publisher=cls.p1,\n            pubdate=datetime.date(2007, 12, 6),\n        )\n        cls.b2 = Book.objects.create(\n            isbn='067232959', name='Sams Teach Yourself Django in 24 Hours',\n            pages=528, rating=3.0, price=Decimal('23.09'), contact=cls.a2, publisher=cls.p1,\n            pubdate=datetime.date(2008, 3, 3),\n        )\n        cls.b3 = Book.objects.create(\n            isbn='159059996', name='Practical Django Projects',\n            pages=600, rating=4.5, price=Decimal('29.69'), contact=cls.a3, publisher=cls.p1,\n            pubdate=datetime.date(2008, 6, 23),\n        )\n        cls.a1.friends.add(cls.a2)\n        cls.a1.friends.add(cls.a3)\n        cls.b1.authors.add(cls.a1)\n        cls.b1.authors.add(cls.a3)\n        cls.b2.authors.add(cls.a2)\n        cls.b3.authors.add(cls.a3)\n\n    def test_filtered_aggregates(self):\n        agg = Sum('age', filter=Q(name__startswith='test'))\n        self.assertEqual(Author.objects.aggregate(age=agg)['age'], 200)\n\n    def test_double_filtered_aggregates(self):\n        agg = Sum('age', filter=Q(Q(name='test2') & ~Q(name='test')))\n        self.assertEqual(Author.objects.aggregate(age=agg)['age'], 60)\n\n    def test_excluded_aggregates(self):\n        agg = Sum('age', filter=~Q(name='test2'))\n        self.assertEqual(Author.objects.aggregate(age=agg)['age'], 140)\n\n    def test_related_aggregates_m2m(self):\n        agg = Sum('friends__age', filter=~Q(friends__name='test'))\n        self.assertEqual(Author.objects.filter(name='test').aggregate(age=agg)['age'], 160)\n\n    def test_related_aggregates_m2m_and_fk(self):\n        q = Q(friends__book__publisher__name='Apress') & ~Q(friends__name='test3')\n        agg = Sum('friends__book__pages', filter=q)\n        self.assertEqual(Author.objects.filter(name='test').aggregate(pages=agg)['pages'], 528)\n\n    def test_plain_annotate(self):\n        agg = Sum('book__pages', filter=Q(book__rating__gt=3))\n        qs = Author.objects.annotate(pages=agg).order_by('pk')\n        self.assertSequenceEqual([a.pages for a in qs], [447, None, 1047])\n\n    def test_filtered_aggregate_on_annotate(self):\n        pages_annotate = Sum('book__pages', filter=Q(book__rating__gt=3))\n        age_agg = Sum('age', filter=Q(total_pages__gte=400))\n        aggregated = Author.objects.annotate(total_pages=pages_annotate).aggregate(summed_age=age_agg)\n        self.assertEqual(aggregated, {'summed_age': 140})\n\n    def test_case_aggregate(self):\n        agg = Sum(\n            Case(When(friends__age=40, then=F('friends__age'))),\n            filter=Q(friends__name__startswith='test'),\n        )\n        self.assertEqual(Author.objects.aggregate(age=agg)['age'], 80)\n\n    def test_sum_star_exception(self):\n        msg = 'Star cannot be used with filter. Please specify a field.'\n        with self.assertRaisesMessage(ValueError, msg):\n            Count('*', filter=Q(age=40))\n", "comments": "", "content": "import datetime\nfrom decimal import Decimal\n\nfrom django.db.models import Case, Count, F, Q, Sum, When\nfrom django.test import TestCase\n\nfrom .models import Author, Book, Publisher\n\n\nclass FilteredAggregateTests(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        cls.a1 = Author.objects.create(name='test', age=40)\n        cls.a2 = Author.objects.create(name='test2', age=60)\n        cls.a3 = Author.objects.create(name='test3', age=100)\n        cls.p1 = Publisher.objects.create(name='Apress', num_awards=3, duration=datetime.timedelta(days=1))\n        cls.b1 = Book.objects.create(\n            isbn='159059725', name='The Definitive Guide to Django: Web Development Done Right',\n            pages=447, rating=4.5, price=Decimal('30.00'), contact=cls.a1, publisher=cls.p1,\n            pubdate=datetime.date(2007, 12, 6),\n        )\n        cls.b2 = Book.objects.create(\n            isbn='067232959', name='Sams Teach Yourself Django in 24 Hours',\n            pages=528, rating=3.0, price=Decimal('23.09'), contact=cls.a2, publisher=cls.p1,\n            pubdate=datetime.date(2008, 3, 3),\n        )\n        cls.b3 = Book.objects.create(\n            isbn='159059996', name='Practical Django Projects',\n            pages=600, rating=4.5, price=Decimal('29.69'), contact=cls.a3, publisher=cls.p1,\n            pubdate=datetime.date(2008, 6, 23),\n        )\n        cls.a1.friends.add(cls.a2)\n        cls.a1.friends.add(cls.a3)\n        cls.b1.authors.add(cls.a1)\n        cls.b1.authors.add(cls.a3)\n        cls.b2.authors.add(cls.a2)\n        cls.b3.authors.add(cls.a3)\n\n    def test_filtered_aggregates(self):\n        agg = Sum('age', filter=Q(name__startswith='test'))\n        self.assertEqual(Author.objects.aggregate(age=agg)['age'], 200)\n\n    def test_double_filtered_aggregates(self):\n        agg = Sum('age', filter=Q(Q(name='test2') & ~Q(name='test')))\n        self.assertEqual(Author.objects.aggregate(age=agg)['age'], 60)\n\n    def test_excluded_aggregates(self):\n        agg = Sum('age', filter=~Q(name='test2'))\n        self.assertEqual(Author.objects.aggregate(age=agg)['age'], 140)\n\n    def test_related_aggregates_m2m(self):\n        agg = Sum('friends__age', filter=~Q(friends__name='test'))\n        self.assertEqual(Author.objects.filter(name='test').aggregate(age=agg)['age'], 160)\n\n    def test_related_aggregates_m2m_and_fk(self):\n        q = Q(friends__book__publisher__name='Apress') & ~Q(friends__name='test3')\n        agg = Sum('friends__book__pages', filter=q)\n        self.assertEqual(Author.objects.filter(name='test').aggregate(pages=agg)['pages'], 528)\n\n    def test_plain_annotate(self):\n        agg = Sum('book__pages', filter=Q(book__rating__gt=3))\n        qs = Author.objects.annotate(pages=agg).order_by('pk')\n        self.assertSequenceEqual([a.pages for a in qs], [447, None, 1047])\n\n    def test_filtered_aggregate_on_annotate(self):\n        pages_annotate = Sum('book__pages', filter=Q(book__rating__gt=3))\n        age_agg = Sum('age', filter=Q(total_pages__gte=400))\n        aggregated = Author.objects.annotate(total_pages=pages_annotate).aggregate(summed_age=age_agg)\n        self.assertEqual(aggregated, {'summed_age': 140})\n\n    def test_case_aggregate(self):\n        agg = Sum(\n            Case(When(friends__age=40, then=F('friends__age'))),\n            filter=Q(friends__name__startswith='test'),\n        )\n        self.assertEqual(Author.objects.aggregate(age=agg)['age'], 80)\n\n    def test_sum_star_exception(self):\n        msg = 'Star cannot be used with filter. Please specify a field.'\n        with self.assertRaisesMessage(ValueError, msg):\n            Count('*', filter=Q(age=40))\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_filter_argument.py", "id": "048fb877e781a6b5a68eaf3dfed7462f", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/aggregation/test_filter_argument.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}