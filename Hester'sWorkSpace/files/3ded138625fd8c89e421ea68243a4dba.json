{"author": "ansible", "code": " -*- coding: utf-8 -*-\n (c) 2016, Tom Melendez (@supertom) <tom@supertom.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\nimport os\nimport sys\n\nimport pytest\n\nfrom ansible.compat.tests import mock, unittest\nfrom ansible.module_utils.gcp import (_get_gcp_ansible_credentials, _get_gcp_credentials, _get_gcp_environ_var,\n                                      _get_gcp_libcloud_credentials, _get_gcp_environment_credentials,\n                                      _validate_credentials_file)\n\n Fake data/function used for testing\nfake_env_data = {'GCE_EMAIL': 'gce-email'}\n\n\ndef fake_get_gcp_environ_var(var_name, default_value):\n    if var_name not in fake_env_data:\n        return default_value\n    else:\n        return fake_env_data[var_name]\n\n Fake AnsibleModule for use in tests\n\n\nclass FakeModule(object):\n    class Params():\n        data = {}\n\n        def get(self, key, alt=None):\n            if key in self.data:\n                return self.data[key]\n            else:\n                return alt\n\n    def __init__(self, data=None):\n        data = {} if data is None else data\n\n        self.params = FakeModule.Params()\n        self.params.data = data\n\n    def fail_json(self, **kwargs):\n        raise ValueError(\"fail_json\")\n\n    def deprecate(self, **kwargs):\n        return None\n\n\nclass GCPAuthTestCase(unittest.TestCase):\n    \"\"\"Tests to verify different Auth mechanisms.\"\"\"\n\n    def setup_method(self, method):\n        global fake_env_data\n        fake_env_data = {'GCE_EMAIL': 'gce-email'}\n\n    def test_get_gcp_ansible_credentials(self):\n        input_data = {'service_account_email': 'mysa',\n                      'credentials_file': 'path-to-file.json',\n                      'project_id': 'my-cool-project'}\n\n        module = FakeModule(input_data)\n        actual = _get_gcp_ansible_credentials(module)\n        expected = tuple(input_data.values())\n        self.assertEqual(sorted(expected), sorted(actual))\n\n    def test_get_gcp_environ_var(self):\n         Chose not to mock this so we could really verify that it\n         works as expected.\n        existing_var_name = 'gcp_ansible_auth_test_54321'\n        non_existing_var_name = 'doesnt_exist_gcp_ansible_auth_test_12345'\n        os.environ[existing_var_name] = 'foobar'\n        self.assertEqual('foobar', _get_gcp_environ_var(\n            existing_var_name, None))\n        del os.environ[existing_var_name]\n        self.assertEqual('default_value', _get_gcp_environ_var(\n            non_existing_var_name, 'default_value'))\n\n    def test_get_gcp_libcloud_credentials_no_import(self):\n        \"\"\"No secrets imported.  Whatever is sent in should come out.\"\"\"\n        module = FakeModule()\n        actual = _get_gcp_libcloud_credentials(module,\n                                               service_account_email=None,\n                                               credentials_file=None,\n                                               project_id=None)\n        expected = (None, None, None)\n        self.assertEqual(expected, actual)\n         no libcloud, with values\n        actual = _get_gcp_libcloud_credentials(module,\n                                               service_account_email='sa-email',\n                                               credentials_file='creds-file',\n                                               project_id='proj-id')\n        expected = ('sa-email', 'creds-file', 'proj-id')\n        self.assertEqual(expected, actual)\n\n    def test_get_gcp_libcloud_credentials_import(self):\n        \"\"\"secrets is imported and those values should be used.\"\"\"\n         Note: Opted for a real class here rather than MagicMock as\n         __getitem__ comes for free.\n        class FakeSecrets:\n            def __init__(self):\n                 2 element list, service account email and creds file\n                self.GCE_PARAMS = ['secrets-sa', 'secrets-file.json']\n                 dictionary with project_id, optionally auth_type\n                self.GCE_KEYWORD_PARAMS = {}\n                self.__file__ = 'THIS_IS_A_FAKEFILE_FOR_TESTING'\n\n         patch in module\n        fake_secrets = FakeSecrets()\n        patcher = mock.patch.dict(sys.modules, {'secrets': fake_secrets})\n        patcher.start()\n\n         obtain sa and creds from secrets\n        module = FakeModule()\n        actual = _get_gcp_libcloud_credentials(module,\n                                               service_account_email=None,\n                                               credentials_file=None,\n                                               project_id='proj-id')\n        expected = ('secrets-sa', 'secrets-file.json', 'proj-id')\n        self.assertEqual(expected, actual)\n\n         fetch project id.  Current logic requires sa-email or creds to be\n         set.\n        fake_secrets.GCE_KEYWORD_PARAMS['project'] = 'new-proj-id'\n        fake_secrets.GCE_PARAMS[1] = 'my-creds.json'\n        module = FakeModule()\n        actual = _get_gcp_libcloud_credentials(module,\n                                               service_account_email='my-sa',\n                                               credentials_file=None,\n                                               project_id=None)\n        expected = ('my-sa', 'my-creds.json', 'new-proj-id')\n        self.assertEqual(expected, actual)\n\n         stop patching\n        patcher.stop()\n\n    def test_validate_credentials_file(self):\n         TODO(supertom): Only dealing with p12 here, check the other states\n         of this function\n        module = mock.MagicMock()\n        with mock.patch(\"ansible.module_utils.gcp.open\",\n                        mock.mock_open(read_data='foobar'), create=True) as m:\n             pem condition, warning is suppressed with the return_value\n            credentials_file = '/foopath/pem.pem'\n            is_valid = _validate_credentials_file(module,\n                                                  credentials_file=credentials_file,\n                                                  require_valid_json=False,\n                                                  check_libcloud=False)\n            self.assertTrue(is_valid)\n\n    @mock.patch('ansible.module_utils.gcp._get_gcp_environ_var',\n                side_effect=fake_get_gcp_environ_var)\n    def test_get_gcp_environment_credentials(self, mockobj):\n        global fake_env_data\n\n        actual = _get_gcp_environment_credentials(None, None, None)\n        expected = tuple(['gce-email', None, None])\n        self.assertEqual(expected, actual)\n\n        fake_env_data = {'GCE_PEM_FILE_PATH': '/path/to/pem.pem'}\n        expected = tuple([None, '/path/to/pem.pem', None])\n        actual = _get_gcp_environment_credentials(None, None, None)\n        self.assertEqual(expected, actual)\n\n         pem and creds are set, expect creds\n        fake_env_data = {'GCE_PEM_FILE_PATH': '/path/to/pem.pem',\n                         'GCE_CREDENTIALS_FILE_PATH': '/path/to/creds.json'}\n        expected = tuple([None, '/path/to/creds.json', None])\n        actual = _get_gcp_environment_credentials(None, None, None)\n        self.assertEqual(expected, actual)\n\n         expect GOOGLE_APPLICATION_CREDENTIALS over PEM\n        fake_env_data = {'GCE_PEM_FILE_PATH': '/path/to/pem.pem',\n                         'GOOGLE_APPLICATION_CREDENTIALS': '/path/to/appcreds.json'}\n        expected = tuple([None, '/path/to/appcreds.json', None])\n        actual = _get_gcp_environment_credentials(None, None, None)\n        self.assertEqual(expected, actual)\n\n         project tests\n        fake_env_data = {'GCE_PROJECT': 'my-project'}\n        expected = tuple([None, None, 'my-project'])\n        actual = _get_gcp_environment_credentials(None, None, None)\n        self.assertEqual(expected, actual)\n\n        fake_env_data = {'GOOGLE_CLOUD_PROJECT': 'my-cloud-project'}\n        expected = tuple([None, None, 'my-cloud-project'])\n        actual = _get_gcp_environment_credentials(None, None, None)\n        self.assertEqual(expected, actual)\n\n         data passed in, picking up project id only\n        fake_env_data = {'GOOGLE_CLOUD_PROJECT': 'my-project'}\n        expected = tuple(['my-sa-email', '/path/to/creds.json', 'my-project'])\n        actual = _get_gcp_environment_credentials(\n            'my-sa-email', '/path/to/creds.json', None)\n        self.assertEqual(expected, actual)\n\n    @mock.patch('ansible.module_utils.gcp._get_gcp_environ_var',\n                side_effect=fake_get_gcp_environ_var)\n    def test_get_gcp_credentials(self, mockobj):\n        global fake_env_data\n\n        fake_env_data = {}\n        module = FakeModule()\n        module.params.data = {}\n         Nothing is set, calls fail_json\n        with pytest.raises(ValueError):\n            _get_gcp_credentials(module)\n\n         project_id (only) is set from Ansible params.\n        module.params.data['project_id'] = 'my-project'\n        actual = _get_gcp_credentials(\n            module, require_valid_json=True, check_libcloud=False)\n        expected = {'service_account_email': '',\n                    'project_id': 'my-project',\n                    'credentials_file': ''}\n        self.assertEqual(expected, actual)\n", "comments": "   tests verify different auth mechanisms          def setup method(self  method)          global fake env data         fake env data     gce email    gce email        def test get gcp ansible credentials(self)          input data     service account email    mysa                          credentials file    path file json                          project id    cool project            module   fakemodule(input data)         actual    get gcp ansible credentials(module)         expected   tuple(input data values())         self assertequal(sorted(expected)  sorted(actual))      def test get gcp environ var(self)            chose mock could really verify           works expected          existing var name    gcp ansible auth test 54321          non existing var name    doesnt exist gcp ansible auth test 12345          os environ existing var name     foobar          self assertequal( foobar    get gcp environ var(             existing var name  none))         del os environ existing var name          self assertequal( default value    get gcp environ var(             non existing var name   default value ))      def test get gcp libcloud credentials import(self)             no secrets imported   whatever sent come             module   fakemodule()         actual    get gcp libcloud credentials(module                                                 service account email none                                                 credentials file none                                                 project id none)         expected   (none  none  none)         self assertequal(expected  actual)           libcloud  values         actual    get gcp libcloud credentials(module                                                 service account email  sa email                                                  credentials file  creds file                                                  project id  proj id )         expected   ( sa email    creds file    proj id )         self assertequal(expected  actual)      def test get gcp libcloud credentials import(self)             secrets imported values used            coding  utf 8        (c) 2016  tom melendez ( supertom)  tom supertom com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       fake data function used testing    fake ansiblemodule use tests    chose mock could really verify    works expected     libcloud  values    note  opted real class rather magicmock      getitem   comes free     2 element list  service account email creds file    dictionary project id  optionally auth type    patch module    obtain sa creds secrets    fetch project id   current logic requires sa email creds    set     stop patching    todo(supertom)  only dealing p12  check states    function    pem condition  warning suppressed return value    pem creds set  expect creds    expect google application credentials pem    project tests    data passed  picking project id    nothing set  calls fail json    project id (only) set ansible params  ", "content": "# -*- coding: utf-8 -*-\n# (c) 2016, Tom Melendez (@supertom) <tom@supertom.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\nimport os\nimport sys\n\nimport pytest\n\nfrom ansible.compat.tests import mock, unittest\nfrom ansible.module_utils.gcp import (_get_gcp_ansible_credentials, _get_gcp_credentials, _get_gcp_environ_var,\n                                      _get_gcp_libcloud_credentials, _get_gcp_environment_credentials,\n                                      _validate_credentials_file)\n\n# Fake data/function used for testing\nfake_env_data = {'GCE_EMAIL': 'gce-email'}\n\n\ndef fake_get_gcp_environ_var(var_name, default_value):\n    if var_name not in fake_env_data:\n        return default_value\n    else:\n        return fake_env_data[var_name]\n\n# Fake AnsibleModule for use in tests\n\n\nclass FakeModule(object):\n    class Params():\n        data = {}\n\n        def get(self, key, alt=None):\n            if key in self.data:\n                return self.data[key]\n            else:\n                return alt\n\n    def __init__(self, data=None):\n        data = {} if data is None else data\n\n        self.params = FakeModule.Params()\n        self.params.data = data\n\n    def fail_json(self, **kwargs):\n        raise ValueError(\"fail_json\")\n\n    def deprecate(self, **kwargs):\n        return None\n\n\nclass GCPAuthTestCase(unittest.TestCase):\n    \"\"\"Tests to verify different Auth mechanisms.\"\"\"\n\n    def setup_method(self, method):\n        global fake_env_data\n        fake_env_data = {'GCE_EMAIL': 'gce-email'}\n\n    def test_get_gcp_ansible_credentials(self):\n        input_data = {'service_account_email': 'mysa',\n                      'credentials_file': 'path-to-file.json',\n                      'project_id': 'my-cool-project'}\n\n        module = FakeModule(input_data)\n        actual = _get_gcp_ansible_credentials(module)\n        expected = tuple(input_data.values())\n        self.assertEqual(sorted(expected), sorted(actual))\n\n    def test_get_gcp_environ_var(self):\n        # Chose not to mock this so we could really verify that it\n        # works as expected.\n        existing_var_name = 'gcp_ansible_auth_test_54321'\n        non_existing_var_name = 'doesnt_exist_gcp_ansible_auth_test_12345'\n        os.environ[existing_var_name] = 'foobar'\n        self.assertEqual('foobar', _get_gcp_environ_var(\n            existing_var_name, None))\n        del os.environ[existing_var_name]\n        self.assertEqual('default_value', _get_gcp_environ_var(\n            non_existing_var_name, 'default_value'))\n\n    def test_get_gcp_libcloud_credentials_no_import(self):\n        \"\"\"No secrets imported.  Whatever is sent in should come out.\"\"\"\n        module = FakeModule()\n        actual = _get_gcp_libcloud_credentials(module,\n                                               service_account_email=None,\n                                               credentials_file=None,\n                                               project_id=None)\n        expected = (None, None, None)\n        self.assertEqual(expected, actual)\n        # no libcloud, with values\n        actual = _get_gcp_libcloud_credentials(module,\n                                               service_account_email='sa-email',\n                                               credentials_file='creds-file',\n                                               project_id='proj-id')\n        expected = ('sa-email', 'creds-file', 'proj-id')\n        self.assertEqual(expected, actual)\n\n    def test_get_gcp_libcloud_credentials_import(self):\n        \"\"\"secrets is imported and those values should be used.\"\"\"\n        # Note: Opted for a real class here rather than MagicMock as\n        # __getitem__ comes for free.\n        class FakeSecrets:\n            def __init__(self):\n                # 2 element list, service account email and creds file\n                self.GCE_PARAMS = ['secrets-sa', 'secrets-file.json']\n                # dictionary with project_id, optionally auth_type\n                self.GCE_KEYWORD_PARAMS = {}\n                self.__file__ = 'THIS_IS_A_FAKEFILE_FOR_TESTING'\n\n        # patch in module\n        fake_secrets = FakeSecrets()\n        patcher = mock.patch.dict(sys.modules, {'secrets': fake_secrets})\n        patcher.start()\n\n        # obtain sa and creds from secrets\n        module = FakeModule()\n        actual = _get_gcp_libcloud_credentials(module,\n                                               service_account_email=None,\n                                               credentials_file=None,\n                                               project_id='proj-id')\n        expected = ('secrets-sa', 'secrets-file.json', 'proj-id')\n        self.assertEqual(expected, actual)\n\n        # fetch project id.  Current logic requires sa-email or creds to be\n        # set.\n        fake_secrets.GCE_KEYWORD_PARAMS['project'] = 'new-proj-id'\n        fake_secrets.GCE_PARAMS[1] = 'my-creds.json'\n        module = FakeModule()\n        actual = _get_gcp_libcloud_credentials(module,\n                                               service_account_email='my-sa',\n                                               credentials_file=None,\n                                               project_id=None)\n        expected = ('my-sa', 'my-creds.json', 'new-proj-id')\n        self.assertEqual(expected, actual)\n\n        # stop patching\n        patcher.stop()\n\n    def test_validate_credentials_file(self):\n        # TODO(supertom): Only dealing with p12 here, check the other states\n        # of this function\n        module = mock.MagicMock()\n        with mock.patch(\"ansible.module_utils.gcp.open\",\n                        mock.mock_open(read_data='foobar'), create=True) as m:\n            # pem condition, warning is suppressed with the return_value\n            credentials_file = '/foopath/pem.pem'\n            is_valid = _validate_credentials_file(module,\n                                                  credentials_file=credentials_file,\n                                                  require_valid_json=False,\n                                                  check_libcloud=False)\n            self.assertTrue(is_valid)\n\n    @mock.patch('ansible.module_utils.gcp._get_gcp_environ_var',\n                side_effect=fake_get_gcp_environ_var)\n    def test_get_gcp_environment_credentials(self, mockobj):\n        global fake_env_data\n\n        actual = _get_gcp_environment_credentials(None, None, None)\n        expected = tuple(['gce-email', None, None])\n        self.assertEqual(expected, actual)\n\n        fake_env_data = {'GCE_PEM_FILE_PATH': '/path/to/pem.pem'}\n        expected = tuple([None, '/path/to/pem.pem', None])\n        actual = _get_gcp_environment_credentials(None, None, None)\n        self.assertEqual(expected, actual)\n\n        # pem and creds are set, expect creds\n        fake_env_data = {'GCE_PEM_FILE_PATH': '/path/to/pem.pem',\n                         'GCE_CREDENTIALS_FILE_PATH': '/path/to/creds.json'}\n        expected = tuple([None, '/path/to/creds.json', None])\n        actual = _get_gcp_environment_credentials(None, None, None)\n        self.assertEqual(expected, actual)\n\n        # expect GOOGLE_APPLICATION_CREDENTIALS over PEM\n        fake_env_data = {'GCE_PEM_FILE_PATH': '/path/to/pem.pem',\n                         'GOOGLE_APPLICATION_CREDENTIALS': '/path/to/appcreds.json'}\n        expected = tuple([None, '/path/to/appcreds.json', None])\n        actual = _get_gcp_environment_credentials(None, None, None)\n        self.assertEqual(expected, actual)\n\n        # project tests\n        fake_env_data = {'GCE_PROJECT': 'my-project'}\n        expected = tuple([None, None, 'my-project'])\n        actual = _get_gcp_environment_credentials(None, None, None)\n        self.assertEqual(expected, actual)\n\n        fake_env_data = {'GOOGLE_CLOUD_PROJECT': 'my-cloud-project'}\n        expected = tuple([None, None, 'my-cloud-project'])\n        actual = _get_gcp_environment_credentials(None, None, None)\n        self.assertEqual(expected, actual)\n\n        # data passed in, picking up project id only\n        fake_env_data = {'GOOGLE_CLOUD_PROJECT': 'my-project'}\n        expected = tuple(['my-sa-email', '/path/to/creds.json', 'my-project'])\n        actual = _get_gcp_environment_credentials(\n            'my-sa-email', '/path/to/creds.json', None)\n        self.assertEqual(expected, actual)\n\n    @mock.patch('ansible.module_utils.gcp._get_gcp_environ_var',\n                side_effect=fake_get_gcp_environ_var)\n    def test_get_gcp_credentials(self, mockobj):\n        global fake_env_data\n\n        fake_env_data = {}\n        module = FakeModule()\n        module.params.data = {}\n        # Nothing is set, calls fail_json\n        with pytest.raises(ValueError):\n            _get_gcp_credentials(module)\n\n        # project_id (only) is set from Ansible params.\n        module.params.data['project_id'] = 'my-project'\n        actual = _get_gcp_credentials(\n            module, require_valid_json=True, check_libcloud=False)\n        expected = {'service_account_email': '',\n                    'project_id': 'my-project',\n                    'credentials_file': ''}\n        self.assertEqual(expected, actual)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_auth.py", "id": "3ded138625fd8c89e421ea68243a4dba", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/module_utils/gcp/test_auth.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}