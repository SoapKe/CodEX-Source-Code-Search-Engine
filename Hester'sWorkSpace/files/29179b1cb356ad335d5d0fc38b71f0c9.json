{"author": "rg3", "code": "from __future__ import unicode_literals, print_function\n\nfrom inspect import getsource\nimport io\nimport os\nfrom os.path import dirname as dirn\nimport sys\n\nprint('WARNING: Lazy loading extractors is an experimental feature that may not always work', file=sys.stderr)\n\nsys.path.insert(0, dirn(dirn((os.path.abspath(__file__)))))\n\nlazy_extractors_filename = sys.argv[1]\nif os.path.exists(lazy_extractors_filename):\n    os.remove(lazy_extractors_filename)\n\nfrom youtube_dl.extractor import _ALL_CLASSES\nfrom youtube_dl.extractor.common import InfoExtractor, SearchInfoExtractor\n\nwith open('devscripts/lazy_load_template.py', 'rt') as f:\n    module_template = f.read()\n\nmodule_contents = [\n    module_template + '\\n' + getsource(InfoExtractor.suitable) + '\\n',\n    'class LazyLoadSearchExtractor(LazyLoadExtractor):\\n    pass\\n']\n\nie_template = \n\n\ndef get_base_name(base):\n    if base is InfoExtractor:\n        return 'LazyLoadExtractor'\n    elif base is SearchInfoExtractor:\n        return 'LazyLoadSearchExtractor'\n    else:\n        return base.__name__\n\n\ndef build_lazy_ie(ie, name):\n    valid_url = getattr(ie, '_VALID_URL', None)\n    s = ie_template.format(\n        name=name,\n        bases=', '.join(map(get_base_name, ie.__bases__)),\n        valid_url=valid_url,\n        module=ie.__module__)\n    if ie.suitable.__func__ is not InfoExtractor.suitable.__func__:\n        s += '\\n' + getsource(ie.suitable)\n    if hasattr(ie, '_make_valid_url'):\n        \n        s += make_valid_template.format(valid_url=ie._make_valid_url())\n    return s\n\n\n\n\nclasses = _ALL_CLASSES[:-1]\nordered_cls = []\nwhile classes:\n    for c in classes[:]:\n        bases = set(c.__bases__) - set((object, InfoExtractor, SearchInfoExtractor))\n        stop = False\n        for b in bases:\n            if b not in classes and b not in ordered_cls:\n                if b.__name__ == 'GenericIE':\n                    exit()\n                classes.insert(0, b)\n                stop = True\n        if stop:\n            break\n        if all(b in ordered_cls for b in bases):\n            ordered_cls.append(c)\n            classes.remove(c)\n            break\nordered_cls.append(_ALL_CLASSES[-1])\n\nnames = []\nfor ie in ordered_cls:\n    name = ie.__name__\n    src = build_lazy_ie(ie, name)\n    module_contents.append(src)\n    if ie in _ALL_CLASSES:\n        names.append(name)\n\nmodule_contents.append(\n    '_ALL_CLASSES = [{0}]'.format(', '.join(names)))\n\nmodule_src = '\\n'.join(module_contents) + '\\n'\n\nwith io.open(lazy_extractors_filename, 'wt', encoding='utf-8') as f:\n    f.write(module_src)\n", "comments": "\nclass {name}({bases}):\n    _VALID_URL = {valid_url!r}\n    _module = '{module}'\n'''\n\nmake_valid_template = '''\n    @classmethod\n    def _make_valid_url(cls):\n        return {valid_url!r}\n\n\n\n# search extractors\n# find the correct sorting and add the required base classes so that sublcasses\n# can be correctly created\n", "content": "from __future__ import unicode_literals, print_function\n\nfrom inspect import getsource\nimport io\nimport os\nfrom os.path import dirname as dirn\nimport sys\n\nprint('WARNING: Lazy loading extractors is an experimental feature that may not always work', file=sys.stderr)\n\nsys.path.insert(0, dirn(dirn((os.path.abspath(__file__)))))\n\nlazy_extractors_filename = sys.argv[1]\nif os.path.exists(lazy_extractors_filename):\n    os.remove(lazy_extractors_filename)\n\nfrom youtube_dl.extractor import _ALL_CLASSES\nfrom youtube_dl.extractor.common import InfoExtractor, SearchInfoExtractor\n\nwith open('devscripts/lazy_load_template.py', 'rt') as f:\n    module_template = f.read()\n\nmodule_contents = [\n    module_template + '\\n' + getsource(InfoExtractor.suitable) + '\\n',\n    'class LazyLoadSearchExtractor(LazyLoadExtractor):\\n    pass\\n']\n\nie_template = '''\nclass {name}({bases}):\n    _VALID_URL = {valid_url!r}\n    _module = '{module}'\n'''\n\nmake_valid_template = '''\n    @classmethod\n    def _make_valid_url(cls):\n        return {valid_url!r}\n'''\n\n\ndef get_base_name(base):\n    if base is InfoExtractor:\n        return 'LazyLoadExtractor'\n    elif base is SearchInfoExtractor:\n        return 'LazyLoadSearchExtractor'\n    else:\n        return base.__name__\n\n\ndef build_lazy_ie(ie, name):\n    valid_url = getattr(ie, '_VALID_URL', None)\n    s = ie_template.format(\n        name=name,\n        bases=', '.join(map(get_base_name, ie.__bases__)),\n        valid_url=valid_url,\n        module=ie.__module__)\n    if ie.suitable.__func__ is not InfoExtractor.suitable.__func__:\n        s += '\\n' + getsource(ie.suitable)\n    if hasattr(ie, '_make_valid_url'):\n        # search extractors\n        s += make_valid_template.format(valid_url=ie._make_valid_url())\n    return s\n\n\n# find the correct sorting and add the required base classes so that sublcasses\n# can be correctly created\nclasses = _ALL_CLASSES[:-1]\nordered_cls = []\nwhile classes:\n    for c in classes[:]:\n        bases = set(c.__bases__) - set((object, InfoExtractor, SearchInfoExtractor))\n        stop = False\n        for b in bases:\n            if b not in classes and b not in ordered_cls:\n                if b.__name__ == 'GenericIE':\n                    exit()\n                classes.insert(0, b)\n                stop = True\n        if stop:\n            break\n        if all(b in ordered_cls for b in bases):\n            ordered_cls.append(c)\n            classes.remove(c)\n            break\nordered_cls.append(_ALL_CLASSES[-1])\n\nnames = []\nfor ie in ordered_cls:\n    name = ie.__name__\n    src = build_lazy_ie(ie, name)\n    module_contents.append(src)\n    if ie in _ALL_CLASSES:\n        names.append(name)\n\nmodule_contents.append(\n    '_ALL_CLASSES = [{0}]'.format(', '.join(names)))\n\nmodule_src = '\\n'.join(module_contents) + '\\n'\n\nwith io.open(lazy_extractors_filename, 'wt', encoding='utf-8') as f:\n    f.write(module_src)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "make_lazy_extractors.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/devscripts/make_lazy_extractors.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}