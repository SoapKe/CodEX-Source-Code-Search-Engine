{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2015, Manuel Sousa <manuel.sousa@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rabbitmq_queue\nauthor: \"Manuel Sousa (@manuel-sousa)\"\nversion_added: \"2.0\"\n\nshort_description: This module manages rabbitMQ queues\ndescription:\n  - This module uses rabbitMQ Rest API to create/delete queues\nrequirements: [ \"requests >= 1.0.0\" ]\noptions:\n    name:\n        description:\n            - Name of the queue to create\n        required: true\n    state:\n        description:\n            - Whether the queue should be present or absent\n            - Only present implemented atm\n        choices: [ \"present\", \"absent\" ]\n        default: present\n    login_user:\n        description:\n            - rabbitMQ user for connection\n        default: guest\n    login_password:\n        description:\n            - rabbitMQ password for connection\n        type: bool\n        default: 'no'\n    login_host:\n        description:\n            - rabbitMQ host for connection\n        default: localhost\n    login_port:\n        description:\n            - rabbitMQ management api port\n        default: 15672\n    vhost:\n        description:\n            - rabbitMQ virtual host\n        default: \"/\"\n    durable:\n        description:\n            - whether queue is durable or not\n        type: bool\n        default: 'yes'\n    auto_delete:\n        description:\n            - if the queue should delete itself after all queues/queues unbound from it\n        type: bool\n        default: 'no'\n    message_ttl:\n        description:\n            - How long a message can live in queue before it is discarded (milliseconds)\n        default: forever\n    auto_expires:\n        description:\n            - How long a queue can be unused before it is automatically deleted (milliseconds)\n        default: forever\n    max_length:\n        description:\n            - How many messages can the queue contain before it starts rejecting\n        default: no limit\n    dead_letter_exchange:\n        description:\n            - Optional name of an exchange to which messages will be republished if they\n            - are rejected or expire\n    dead_letter_routing_key:\n        description:\n            - Optional replacement routing key to use when a message is dead-lettered.\n            - Original routing key will be used if unset\n    max_priority:\n        description:\n            - Maximum number of priority levels for the queue to support.\n            - If not set, the queue will not support message priorities.\n            - Larger numbers indicate higher priority.\n        version_added: \"2.4\"\n    arguments:\n        description:\n            - extra arguments for queue. If defined this argument is a key/value dictionary\n        default: {}\n'''\n\nEXAMPLES = '''\n\n- rabbitmq_queue:\n    name: myQueue\n\n on remote host\n- rabbitmq_queue:\n    name: myRemoteQueue\n    login_user: user\n    login_password: secret\n    login_host: remote.example.org\n'''\n\nimport json\n\ntry:\n    import requests\n    HAS_REQUESTS = True\nexcept ImportError:\n    HAS_REQUESTS = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six.moves.urllib import parse as urllib_parse\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            state=dict(default='present', choices=['present', 'absent'], type='str'),\n            name=dict(required=True, type='str'),\n            login_user=dict(default='guest', type='str'),\n            login_password=dict(default='guest', type='str', no_log=True),\n            login_host=dict(default='localhost', type='str'),\n            login_port=dict(default='15672', type='str'),\n            vhost=dict(default='/', type='str'),\n            durable=dict(default=True, type='bool'),\n            auto_delete=dict(default=False, type='bool'),\n            message_ttl=dict(default=None, type='int'),\n            auto_expires=dict(default=None, type='int'),\n            max_length=dict(default=None, type='int'),\n            dead_letter_exchange=dict(default=None, type='str'),\n            dead_letter_routing_key=dict(default=None, type='str'),\n            arguments=dict(default=dict(), type='dict'),\n            max_priority=dict(default=None, type='int')\n        ),\n        supports_check_mode=True\n    )\n\n    url = \"http://%s:%s/api/queues/%s/%s\" % (\n        module.params['login_host'],\n        module.params['login_port'],\n        urllib_parse.quote(module.params['vhost'], ''),\n        module.params['name']\n    )\n\n    if not HAS_REQUESTS:\n        module.fail_json(msg=\"requests library is required for this module. To install, use `pip install requests`\")\n\n    result = dict(changed=False, name=module.params['name'])\n\n    \n    r = requests.get(url, auth=(module.params['login_user'], module.params['login_password']))\n\n    if r.status_code == 200:\n        queue_exists = True\n        response = r.json()\n    elif r.status_code == 404:\n        queue_exists = False\n        response = r.text\n    else:\n        module.fail_json(\n            msg=\"Invalid response from RESTAPI when trying to check if queue exists\",\n            details=r.text\n        )\n\n    if module.params['state'] == 'present':\n        change_required = not queue_exists\n    else:\n        change_required = queue_exists\n\n    \n    if not change_required and r.status_code == 200 and module.params['state'] == 'present':\n        if not (\n            response['durable'] == module.params['durable'] and\n            response['auto_delete'] == module.params['auto_delete'] and\n            (\n                ('x-message-ttl' in response['arguments'] and response['arguments']['x-message-ttl'] == module.params['message_ttl']) or\n                ('x-message-ttl' not in response['arguments'] and module.params['message_ttl'] is None)\n            ) and\n            (\n                ('x-expires' in response['arguments'] and response['arguments']['x-expires'] == module.params['auto_expires']) or\n                ('x-expires' not in response['arguments'] and module.params['auto_expires'] is None)\n            ) and\n            (\n                ('x-max-length' in response['arguments'] and response['arguments']['x-max-length'] == module.params['max_length']) or\n                ('x-max-length' not in response['arguments'] and module.params['max_length'] is None)\n            ) and\n            (\n                ('x-dead-letter-exchange' in response['arguments'] and\n                 response['arguments']['x-dead-letter-exchange'] == module.params['dead_letter_exchange']) or\n                ('x-dead-letter-exchange' not in response['arguments'] and module.params['dead_letter_exchange'] is None)\n            ) and\n            (\n                ('x-dead-letter-routing-key' in response['arguments'] and\n                 response['arguments']['x-dead-letter-routing-key'] == module.params['dead_letter_routing_key']) or\n                ('x-dead-letter-routing-key' not in response['arguments'] and module.params['dead_letter_routing_key'] is None)\n            ) and\n            (\n                ('x-max-priority' in response['arguments'] and\n                 response['arguments']['x-max-priority'] == module.params['max_priority']) or\n                ('x-max-priority' not in response['arguments'] and module.params['max_priority'] is None)\n            )\n        ):\n            module.fail_json(\n                msg=\"RabbitMQ RESTAPI doesn't support attribute changes for existing queues\",\n            )\n\n    \n    for k, v in {\n        'message_ttl': 'x-message-ttl',\n        'auto_expires': 'x-expires',\n        'max_length': 'x-max-length',\n        'dead_letter_exchange': 'x-dead-letter-exchange',\n        'dead_letter_routing_key': 'x-dead-letter-routing-key',\n        'max_priority': 'x-max-priority'\n    }.items():\n        if module.params[k] is not None:\n            module.params['arguments'][v] = module.params[k]\n\n    \n    if module.check_mode:\n        result['changed'] = change_required\n        result['details'] = response\n        result['arguments'] = module.params['arguments']\n        module.exit_json(**result)\n\n    \n    if change_required:\n        if module.params['state'] == 'present':\n            r = requests.put(\n                url,\n                auth=(module.params['login_user'], module.params['login_password']),\n                headers={\"content-type\": \"application/json\"},\n                data=json.dumps({\n                    \"durable\": module.params['durable'],\n                    \"auto_delete\": module.params['auto_delete'],\n                    \"arguments\": module.params['arguments']\n                })\n            )\n        elif module.params['state'] == 'absent':\n            r = requests.delete(url, auth=(module.params['login_user'], module.params['login_password']))\n\n        \n        if r.status_code == 204 or r.status_code == 201:\n            result['changed'] = True\n            module.exit_json(**result)\n        else:\n            module.fail_json(\n                msg=\"Error creating queue\",\n                status=r.status_code,\n                details=r.text\n            )\n\n    else:\n        result['changed'] = False\n        module.exit_json(**result)\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  rabbitmq queue author   manuel sousa ( manuel sousa)  version added   2 0   short description  this module manages rabbitmq queues description      this module uses rabbitmq rest api create delete queues requirements     requests    1 0 0    options      name          description                name queue create         required  true     state          description                whether queue present absent               only present implemented atm         choices     present    absent            default  present     login user          description                rabbitmq user connection         default  guest     login password          description                rabbitmq password connection         type  bool         default        login host          description                rabbitmq host connection         default  localhost     login port          description                rabbitmq management api port         default  15672     vhost          description                rabbitmq virtual host         default          durable          description                whether queue durable         type  bool         default   yes      auto delete          description                queue delete queues queues unbound         type  bool         default        message ttl          description                how long message live queue discarded (milliseconds)         default  forever     auto expires          description                how long queue unused automatically deleted (milliseconds)         default  forever     max length          description                how many messages queue contain starts rejecting         default  limit     dead letter exchange          description                optional name exchange messages republished               rejected expire     dead letter routing key          description                optional replacement routing key use message dead lettered                original routing key used unset     max priority          description                maximum number priority levels queue support                if set  queue support message priorities                larger numbers indicate higher priority          version added   2 4      arguments          description                extra arguments queue  if defined argument key value dictionary         default          examples         create queue   rabbitmq queue      name  myqueue    create queue remote host   rabbitmq queue      name  myremotequeue     login user  user     login password  secret     login host  remote example org         usr bin python        coding  utf 8        (c) 2015  manuel sousa  manuel sousa gmail com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    create queue    create queue remote host    check queue already exists    check attributes change existing queue    copy parameters arguments used rabbitmq    exit check mode    do changes    rabbitmq 3 6 7 changed response code 204 201 ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2015, Manuel Sousa <manuel.sousa@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rabbitmq_queue\nauthor: \"Manuel Sousa (@manuel-sousa)\"\nversion_added: \"2.0\"\n\nshort_description: This module manages rabbitMQ queues\ndescription:\n  - This module uses rabbitMQ Rest API to create/delete queues\nrequirements: [ \"requests >= 1.0.0\" ]\noptions:\n    name:\n        description:\n            - Name of the queue to create\n        required: true\n    state:\n        description:\n            - Whether the queue should be present or absent\n            - Only present implemented atm\n        choices: [ \"present\", \"absent\" ]\n        default: present\n    login_user:\n        description:\n            - rabbitMQ user for connection\n        default: guest\n    login_password:\n        description:\n            - rabbitMQ password for connection\n        type: bool\n        default: 'no'\n    login_host:\n        description:\n            - rabbitMQ host for connection\n        default: localhost\n    login_port:\n        description:\n            - rabbitMQ management api port\n        default: 15672\n    vhost:\n        description:\n            - rabbitMQ virtual host\n        default: \"/\"\n    durable:\n        description:\n            - whether queue is durable or not\n        type: bool\n        default: 'yes'\n    auto_delete:\n        description:\n            - if the queue should delete itself after all queues/queues unbound from it\n        type: bool\n        default: 'no'\n    message_ttl:\n        description:\n            - How long a message can live in queue before it is discarded (milliseconds)\n        default: forever\n    auto_expires:\n        description:\n            - How long a queue can be unused before it is automatically deleted (milliseconds)\n        default: forever\n    max_length:\n        description:\n            - How many messages can the queue contain before it starts rejecting\n        default: no limit\n    dead_letter_exchange:\n        description:\n            - Optional name of an exchange to which messages will be republished if they\n            - are rejected or expire\n    dead_letter_routing_key:\n        description:\n            - Optional replacement routing key to use when a message is dead-lettered.\n            - Original routing key will be used if unset\n    max_priority:\n        description:\n            - Maximum number of priority levels for the queue to support.\n            - If not set, the queue will not support message priorities.\n            - Larger numbers indicate higher priority.\n        version_added: \"2.4\"\n    arguments:\n        description:\n            - extra arguments for queue. If defined this argument is a key/value dictionary\n        default: {}\n'''\n\nEXAMPLES = '''\n# Create a queue\n- rabbitmq_queue:\n    name: myQueue\n\n# Create a queue on remote host\n- rabbitmq_queue:\n    name: myRemoteQueue\n    login_user: user\n    login_password: secret\n    login_host: remote.example.org\n'''\n\nimport json\n\ntry:\n    import requests\n    HAS_REQUESTS = True\nexcept ImportError:\n    HAS_REQUESTS = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six.moves.urllib import parse as urllib_parse\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            state=dict(default='present', choices=['present', 'absent'], type='str'),\n            name=dict(required=True, type='str'),\n            login_user=dict(default='guest', type='str'),\n            login_password=dict(default='guest', type='str', no_log=True),\n            login_host=dict(default='localhost', type='str'),\n            login_port=dict(default='15672', type='str'),\n            vhost=dict(default='/', type='str'),\n            durable=dict(default=True, type='bool'),\n            auto_delete=dict(default=False, type='bool'),\n            message_ttl=dict(default=None, type='int'),\n            auto_expires=dict(default=None, type='int'),\n            max_length=dict(default=None, type='int'),\n            dead_letter_exchange=dict(default=None, type='str'),\n            dead_letter_routing_key=dict(default=None, type='str'),\n            arguments=dict(default=dict(), type='dict'),\n            max_priority=dict(default=None, type='int')\n        ),\n        supports_check_mode=True\n    )\n\n    url = \"http://%s:%s/api/queues/%s/%s\" % (\n        module.params['login_host'],\n        module.params['login_port'],\n        urllib_parse.quote(module.params['vhost'], ''),\n        module.params['name']\n    )\n\n    if not HAS_REQUESTS:\n        module.fail_json(msg=\"requests library is required for this module. To install, use `pip install requests`\")\n\n    result = dict(changed=False, name=module.params['name'])\n\n    # Check if queue already exists\n    r = requests.get(url, auth=(module.params['login_user'], module.params['login_password']))\n\n    if r.status_code == 200:\n        queue_exists = True\n        response = r.json()\n    elif r.status_code == 404:\n        queue_exists = False\n        response = r.text\n    else:\n        module.fail_json(\n            msg=\"Invalid response from RESTAPI when trying to check if queue exists\",\n            details=r.text\n        )\n\n    if module.params['state'] == 'present':\n        change_required = not queue_exists\n    else:\n        change_required = queue_exists\n\n    # Check if attributes change on existing queue\n    if not change_required and r.status_code == 200 and module.params['state'] == 'present':\n        if not (\n            response['durable'] == module.params['durable'] and\n            response['auto_delete'] == module.params['auto_delete'] and\n            (\n                ('x-message-ttl' in response['arguments'] and response['arguments']['x-message-ttl'] == module.params['message_ttl']) or\n                ('x-message-ttl' not in response['arguments'] and module.params['message_ttl'] is None)\n            ) and\n            (\n                ('x-expires' in response['arguments'] and response['arguments']['x-expires'] == module.params['auto_expires']) or\n                ('x-expires' not in response['arguments'] and module.params['auto_expires'] is None)\n            ) and\n            (\n                ('x-max-length' in response['arguments'] and response['arguments']['x-max-length'] == module.params['max_length']) or\n                ('x-max-length' not in response['arguments'] and module.params['max_length'] is None)\n            ) and\n            (\n                ('x-dead-letter-exchange' in response['arguments'] and\n                 response['arguments']['x-dead-letter-exchange'] == module.params['dead_letter_exchange']) or\n                ('x-dead-letter-exchange' not in response['arguments'] and module.params['dead_letter_exchange'] is None)\n            ) and\n            (\n                ('x-dead-letter-routing-key' in response['arguments'] and\n                 response['arguments']['x-dead-letter-routing-key'] == module.params['dead_letter_routing_key']) or\n                ('x-dead-letter-routing-key' not in response['arguments'] and module.params['dead_letter_routing_key'] is None)\n            ) and\n            (\n                ('x-max-priority' in response['arguments'] and\n                 response['arguments']['x-max-priority'] == module.params['max_priority']) or\n                ('x-max-priority' not in response['arguments'] and module.params['max_priority'] is None)\n            )\n        ):\n            module.fail_json(\n                msg=\"RabbitMQ RESTAPI doesn't support attribute changes for existing queues\",\n            )\n\n    # Copy parameters to arguments as used by RabbitMQ\n    for k, v in {\n        'message_ttl': 'x-message-ttl',\n        'auto_expires': 'x-expires',\n        'max_length': 'x-max-length',\n        'dead_letter_exchange': 'x-dead-letter-exchange',\n        'dead_letter_routing_key': 'x-dead-letter-routing-key',\n        'max_priority': 'x-max-priority'\n    }.items():\n        if module.params[k] is not None:\n            module.params['arguments'][v] = module.params[k]\n\n    # Exit if check_mode\n    if module.check_mode:\n        result['changed'] = change_required\n        result['details'] = response\n        result['arguments'] = module.params['arguments']\n        module.exit_json(**result)\n\n    # Do changes\n    if change_required:\n        if module.params['state'] == 'present':\n            r = requests.put(\n                url,\n                auth=(module.params['login_user'], module.params['login_password']),\n                headers={\"content-type\": \"application/json\"},\n                data=json.dumps({\n                    \"durable\": module.params['durable'],\n                    \"auto_delete\": module.params['auto_delete'],\n                    \"arguments\": module.params['arguments']\n                })\n            )\n        elif module.params['state'] == 'absent':\n            r = requests.delete(url, auth=(module.params['login_user'], module.params['login_password']))\n\n        # RabbitMQ 3.6.7 changed this response code from 204 to 201\n        if r.status_code == 204 or r.status_code == 201:\n            result['changed'] = True\n            module.exit_json(**result)\n        else:\n            module.fail_json(\n                msg=\"Error creating queue\",\n                status=r.status_code,\n                details=r.text\n            )\n\n    else:\n        result['changed'] = False\n        module.exit_json(**result)\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "rabbitmq_queue.py", "id": "6c34bf99201778ead70046137c4b38fe", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/messaging/rabbitmq_queue.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}