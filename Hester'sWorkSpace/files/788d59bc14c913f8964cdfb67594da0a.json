{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass MoviezineIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?moviezine\\.se/video/(?P<id>[^?\n\n    _TEST = {\n        'url': 'http://www.moviezine.se/video/205866',\n        'info_dict': {\n            'id': '205866',\n            'ext': 'mp4',\n            'title': 'Oculus - Trailer 1',\n            'description': 'md5:40cc6790fc81d931850ca9249b40e8a4',\n            'thumbnail': r're:http://.*\\.jpg',\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, video_id)\n        jsplayer = self._download_webpage('http://www.moviezine.se/api/player.js?video=%s' % video_id, video_id, 'Downloading js api player')\n\n        formats = [{\n            'format_id': 'sd',\n            'url': self._html_search_regex(r'file: \"(.+?)\",', jsplayer, 'file'),\n            'quality': 0,\n            'ext': 'mp4',\n        }]\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._search_regex(r'title: \"(.+?)\",', jsplayer, 'title'),\n            'thumbnail': self._search_regex(r'image: \"(.+?)\",', jsplayer, 'image'),\n            'formats': formats,\n            'description': self._og_search_description(webpage),\n        }\n", "comments": "# coding: utf-8\n#]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass MoviezineIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?moviezine\\.se/video/(?P<id>[^?#]+)'\n\n    _TEST = {\n        'url': 'http://www.moviezine.se/video/205866',\n        'info_dict': {\n            'id': '205866',\n            'ext': 'mp4',\n            'title': 'Oculus - Trailer 1',\n            'description': 'md5:40cc6790fc81d931850ca9249b40e8a4',\n            'thumbnail': r're:http://.*\\.jpg',\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, video_id)\n        jsplayer = self._download_webpage('http://www.moviezine.se/api/player.js?video=%s' % video_id, video_id, 'Downloading js api player')\n\n        formats = [{\n            'format_id': 'sd',\n            'url': self._html_search_regex(r'file: \"(.+?)\",', jsplayer, 'file'),\n            'quality': 0,\n            'ext': 'mp4',\n        }]\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._search_regex(r'title: \"(.+?)\",', jsplayer, 'title'),\n            'thumbnail': self._search_regex(r'image: \"(.+?)\",', jsplayer, 'image'),\n            'formats': formats,\n            'description': self._og_search_description(webpage),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "moviezine.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/moviezine.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}