{"author": "django", "code": "from django.db import models\n\n\nclass Author(models.Model):\n    first_name = models.CharField(max_length=255)\n    last_name = models.CharField(max_length=255)\n    dob = models.DateField()\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        \n        \n        \n        for k in kwargs:\n            assert k in [f.attname for f in self._meta.fields], \\\n                \"Author.__init__ got an unexpected parameter: %s\" % k\n\n\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.ForeignKey(Author, models.CASCADE)\n    paperback = models.BooleanField(default=False)\n    opening_line = models.TextField()\n\n\nclass BookFkAsPk(models.Model):\n    book = models.ForeignKey(Book, models.CASCADE, primary_key=True, db_column=\"not_the_default\")\n\n\nclass Coffee(models.Model):\n    brand = models.CharField(max_length=255, db_column=\"name\")\n    price = models.DecimalField(max_digits=10, decimal_places=2, default=0)\n\n\nclass MixedCaseIDColumn(models.Model):\n    id = models.AutoField(primary_key=True, db_column='MiXeD_CaSe_Id')\n\n\nclass Reviewer(models.Model):\n    reviewed = models.ManyToManyField(Book)\n\n\nclass FriendlyAuthor(Author):\n    pass\n", "comments": "  protect annotations passed   init         make test suite get angry annotations    treated differently fields  ", "content": "from django.db import models\n\n\nclass Author(models.Model):\n    first_name = models.CharField(max_length=255)\n    last_name = models.CharField(max_length=255)\n    dob = models.DateField()\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # Protect against annotations being passed to __init__ --\n        # this'll make the test suite get angry if annotations aren't\n        # treated differently than fields.\n        for k in kwargs:\n            assert k in [f.attname for f in self._meta.fields], \\\n                \"Author.__init__ got an unexpected parameter: %s\" % k\n\n\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.ForeignKey(Author, models.CASCADE)\n    paperback = models.BooleanField(default=False)\n    opening_line = models.TextField()\n\n\nclass BookFkAsPk(models.Model):\n    book = models.ForeignKey(Book, models.CASCADE, primary_key=True, db_column=\"not_the_default\")\n\n\nclass Coffee(models.Model):\n    brand = models.CharField(max_length=255, db_column=\"name\")\n    price = models.DecimalField(max_digits=10, decimal_places=2, default=0)\n\n\nclass MixedCaseIDColumn(models.Model):\n    id = models.AutoField(primary_key=True, db_column='MiXeD_CaSe_Id')\n\n\nclass Reviewer(models.Model):\n    reviewed = models.ManyToManyField(Book)\n\n\nclass FriendlyAuthor(Author):\n    pass\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "0b1999541891b2c16cd7af2a37ad7efa", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/raw_query/models.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}