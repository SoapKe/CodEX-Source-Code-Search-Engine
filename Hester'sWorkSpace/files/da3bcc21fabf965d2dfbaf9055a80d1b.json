{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    HEADRequest,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass GDCVaultIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?gdcvault\\.com/play/(?P<id>\\d+)/(?P<name>(\\w|-)+)?'\n    _NETRC_MACHINE = 'gdcvault'\n    _TESTS = [\n        {\n            'url': 'http://www.gdcvault.com/play/1019721/Doki-Doki-Universe-Sweet-Simple',\n            'md5': '7ce8388f544c88b7ac11c7ab1b593704',\n            'info_dict': {\n                'id': '1019721',\n                'display_id': 'Doki-Doki-Universe-Sweet-Simple',\n                'ext': 'mp4',\n                'title': 'Doki-Doki Universe: Sweet, Simple and Genuine (GDC Next 10)'\n            }\n        },\n        {\n            'url': 'http://www.gdcvault.com/play/1015683/Embracing-the-Dark-Art-of',\n            'info_dict': {\n                'id': '1015683',\n                'display_id': 'Embracing-the-Dark-Art-of',\n                'ext': 'flv',\n                'title': 'Embracing the Dark Art of Mathematical Modeling in AI'\n            },\n            'params': {\n                'skip_download': True,  \n            }\n        },\n        {\n            'url': 'http://www.gdcvault.com/play/1015301/Thexder-Meets-Windows-95-or',\n            'md5': 'a5eb77996ef82118afbbe8e48731b98e',\n            'info_dict': {\n                'id': '1015301',\n                'display_id': 'Thexder-Meets-Windows-95-or',\n                'ext': 'flv',\n                'title': 'Thexder Meets Windows 95, or Writing Great Games in the Windows 95 Environment',\n            },\n            'skip': 'Requires login',\n        },\n        {\n            'url': 'http://gdcvault.com/play/1020791/',\n            'only_matching': True,\n        },\n        {\n            \n            'url': 'http://gdcvault.com/play/1023460/Tenacious-Design-and-The-Interface',\n            'md5': 'a8efb6c31ed06ca8739294960b2dbabd',\n            'info_dict': {\n                'id': '1023460',\n                'ext': 'mp4',\n                'display_id': 'Tenacious-Design-and-The-Interface',\n                'title': 'Tenacious Design and The Interface of \\'Destiny\\'',\n            },\n        },\n        {\n            \n            'url': 'http://www.gdcvault.com/play/1014631/Classic-Game-Postmortem-PAC',\n            'info_dict': {\n                'id': '1014631',\n                'ext': 'flv',\n                'title': 'How to Create a Good Game - From My Experience of Designing Pac-Man',\n            },\n            'params': {\n                'skip_download': True,  \n                'format': 'jp',  \n            }\n        },\n        {\n            \n            'url': 'http://www.gdcvault.com/play/1435/An-American-engine-in-Tokyo',\n            'info_dict': {\n                'id': '1435',\n                'display_id': 'An-American-engine-in-Tokyo',\n                'ext': 'flv',\n                'title': 'An American Engine in Tokyo:/nThe collaboration of Epic Games and Square Enix/nFor THE LAST REMINANT',\n            },\n            'params': {\n                'skip_download': True,  \n            },\n        },\n    ]\n\n    def _login(self, webpage_url, display_id):\n        (username, password) = self._get_login_info()\n        if username is None or password is None:\n            self.report_warning('It looks like ' + webpage_url + ' requires a login. Try specifying a username and password and try again.')\n            return None\n\n        mobj = re.match(r'(?P<root_url>https?://.*?/).*', webpage_url)\n        login_url = mobj.group('root_url') + 'api/login.php'\n        logout_url = mobj.group('root_url') + 'logout'\n\n        login_form = {\n            'email': username,\n            'password': password,\n        }\n\n        request = sanitized_Request(login_url, urlencode_postdata(login_form))\n        request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        self._download_webpage(request, display_id, 'Logging in')\n        start_page = self._download_webpage(webpage_url, display_id, 'Getting authenticated video page')\n        self._download_webpage(logout_url, display_id, 'Logging out')\n\n        return start_page\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        video_id = mobj.group('id')\n        display_id = mobj.group('name') or video_id\n\n        webpage_url = 'http://www.gdcvault.com/play/' + video_id\n        start_page = self._download_webpage(webpage_url, display_id)\n\n        direct_url = self._search_regex(\n            r's1\\.addVariable\\(\"file\",\\s*encodeURIComponent\\(\"(/[^\"]+)\"\\)\\);',\n            start_page, 'url', default=None)\n        if direct_url:\n            title = self._html_search_regex(\n                r'<td><strong>Session Name</strong></td>\\s*<td>(.*?)</td>',\n                start_page, 'title')\n            video_url = 'http://www.gdcvault.com' + direct_url\n            \n            head = self._request_webpage(HEADRequest(video_url), video_id)\n            video_url = head.geturl()\n\n            return {\n                'id': video_id,\n                'display_id': display_id,\n                'url': video_url,\n                'title': title,\n            }\n\n        PLAYER_REGEX = r'<iframe src=\"(?P<xml_root>.+?)/(?:gdc-)?player.*?\\.html.*?\".*?</iframe>'\n\n        xml_root = self._html_search_regex(\n            PLAYER_REGEX, start_page, 'xml root', default=None)\n        if xml_root is None:\n            \n            login_res = self._login(webpage_url, display_id)\n            if login_res is None:\n                self.report_warning('Could not login.')\n            else:\n                start_page = login_res\n                \n                xml_root = self._html_search_regex(\n                    PLAYER_REGEX, start_page, 'xml root')\n\n        xml_name = self._html_search_regex(\n            r'<iframe src=\".*?\\?xml=(.+?\\.xml).*?\".*?</iframe>',\n            start_page, 'xml filename', default=None)\n        if xml_name is None:\n            \n            xml_name = self._html_search_regex(\n                r'<iframe src=\".*?\\?xmlURL=xml/(?P<xml_file>.+?\\.xml).*?\".*?</iframe>',\n                start_page, 'xml filename')\n\n        return {\n            '_type': 'url_transparent',\n            'id': video_id,\n            'display_id': display_id,\n            'url': '%s/xml/%s' % (xml_root, xml_name),\n            'ie_key': 'DigitallySpeaking',\n        }\n", "comments": "# Requires rtmpdump\n# Hard-coded hostname\n# Multiple audios\n# Requires rtmpdump\n# The japanese audio\n# gdc-player.html\n# Requires rtmpdump\n# resolve the url so that we can detect the correct extension\n# Probably need to authenticate\n# Grab the url from the authenticated page\n# Fallback to the older format\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    HEADRequest,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass GDCVaultIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?gdcvault\\.com/play/(?P<id>\\d+)/(?P<name>(\\w|-)+)?'\n    _NETRC_MACHINE = 'gdcvault'\n    _TESTS = [\n        {\n            'url': 'http://www.gdcvault.com/play/1019721/Doki-Doki-Universe-Sweet-Simple',\n            'md5': '7ce8388f544c88b7ac11c7ab1b593704',\n            'info_dict': {\n                'id': '1019721',\n                'display_id': 'Doki-Doki-Universe-Sweet-Simple',\n                'ext': 'mp4',\n                'title': 'Doki-Doki Universe: Sweet, Simple and Genuine (GDC Next 10)'\n            }\n        },\n        {\n            'url': 'http://www.gdcvault.com/play/1015683/Embracing-the-Dark-Art-of',\n            'info_dict': {\n                'id': '1015683',\n                'display_id': 'Embracing-the-Dark-Art-of',\n                'ext': 'flv',\n                'title': 'Embracing the Dark Art of Mathematical Modeling in AI'\n            },\n            'params': {\n                'skip_download': True,  # Requires rtmpdump\n            }\n        },\n        {\n            'url': 'http://www.gdcvault.com/play/1015301/Thexder-Meets-Windows-95-or',\n            'md5': 'a5eb77996ef82118afbbe8e48731b98e',\n            'info_dict': {\n                'id': '1015301',\n                'display_id': 'Thexder-Meets-Windows-95-or',\n                'ext': 'flv',\n                'title': 'Thexder Meets Windows 95, or Writing Great Games in the Windows 95 Environment',\n            },\n            'skip': 'Requires login',\n        },\n        {\n            'url': 'http://gdcvault.com/play/1020791/',\n            'only_matching': True,\n        },\n        {\n            # Hard-coded hostname\n            'url': 'http://gdcvault.com/play/1023460/Tenacious-Design-and-The-Interface',\n            'md5': 'a8efb6c31ed06ca8739294960b2dbabd',\n            'info_dict': {\n                'id': '1023460',\n                'ext': 'mp4',\n                'display_id': 'Tenacious-Design-and-The-Interface',\n                'title': 'Tenacious Design and The Interface of \\'Destiny\\'',\n            },\n        },\n        {\n            # Multiple audios\n            'url': 'http://www.gdcvault.com/play/1014631/Classic-Game-Postmortem-PAC',\n            'info_dict': {\n                'id': '1014631',\n                'ext': 'flv',\n                'title': 'How to Create a Good Game - From My Experience of Designing Pac-Man',\n            },\n            'params': {\n                'skip_download': True,  # Requires rtmpdump\n                'format': 'jp',  # The japanese audio\n            }\n        },\n        {\n            # gdc-player.html\n            'url': 'http://www.gdcvault.com/play/1435/An-American-engine-in-Tokyo',\n            'info_dict': {\n                'id': '1435',\n                'display_id': 'An-American-engine-in-Tokyo',\n                'ext': 'flv',\n                'title': 'An American Engine in Tokyo:/nThe collaboration of Epic Games and Square Enix/nFor THE LAST REMINANT',\n            },\n            'params': {\n                'skip_download': True,  # Requires rtmpdump\n            },\n        },\n    ]\n\n    def _login(self, webpage_url, display_id):\n        (username, password) = self._get_login_info()\n        if username is None or password is None:\n            self.report_warning('It looks like ' + webpage_url + ' requires a login. Try specifying a username and password and try again.')\n            return None\n\n        mobj = re.match(r'(?P<root_url>https?://.*?/).*', webpage_url)\n        login_url = mobj.group('root_url') + 'api/login.php'\n        logout_url = mobj.group('root_url') + 'logout'\n\n        login_form = {\n            'email': username,\n            'password': password,\n        }\n\n        request = sanitized_Request(login_url, urlencode_postdata(login_form))\n        request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        self._download_webpage(request, display_id, 'Logging in')\n        start_page = self._download_webpage(webpage_url, display_id, 'Getting authenticated video page')\n        self._download_webpage(logout_url, display_id, 'Logging out')\n\n        return start_page\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        video_id = mobj.group('id')\n        display_id = mobj.group('name') or video_id\n\n        webpage_url = 'http://www.gdcvault.com/play/' + video_id\n        start_page = self._download_webpage(webpage_url, display_id)\n\n        direct_url = self._search_regex(\n            r's1\\.addVariable\\(\"file\",\\s*encodeURIComponent\\(\"(/[^\"]+)\"\\)\\);',\n            start_page, 'url', default=None)\n        if direct_url:\n            title = self._html_search_regex(\n                r'<td><strong>Session Name</strong></td>\\s*<td>(.*?)</td>',\n                start_page, 'title')\n            video_url = 'http://www.gdcvault.com' + direct_url\n            # resolve the url so that we can detect the correct extension\n            head = self._request_webpage(HEADRequest(video_url), video_id)\n            video_url = head.geturl()\n\n            return {\n                'id': video_id,\n                'display_id': display_id,\n                'url': video_url,\n                'title': title,\n            }\n\n        PLAYER_REGEX = r'<iframe src=\"(?P<xml_root>.+?)/(?:gdc-)?player.*?\\.html.*?\".*?</iframe>'\n\n        xml_root = self._html_search_regex(\n            PLAYER_REGEX, start_page, 'xml root', default=None)\n        if xml_root is None:\n            # Probably need to authenticate\n            login_res = self._login(webpage_url, display_id)\n            if login_res is None:\n                self.report_warning('Could not login.')\n            else:\n                start_page = login_res\n                # Grab the url from the authenticated page\n                xml_root = self._html_search_regex(\n                    PLAYER_REGEX, start_page, 'xml root')\n\n        xml_name = self._html_search_regex(\n            r'<iframe src=\".*?\\?xml=(.+?\\.xml).*?\".*?</iframe>',\n            start_page, 'xml filename', default=None)\n        if xml_name is None:\n            # Fallback to the older format\n            xml_name = self._html_search_regex(\n                r'<iframe src=\".*?\\?xmlURL=xml/(?P<xml_file>.+?\\.xml).*?\".*?</iframe>',\n                start_page, 'xml filename')\n\n        return {\n            '_type': 'url_transparent',\n            'id': video_id,\n            'display_id': display_id,\n            'url': '%s/xml/%s' % (xml_root, xml_name),\n            'ie_key': 'DigitallySpeaking',\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "gdcvault.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/gdcvault.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}