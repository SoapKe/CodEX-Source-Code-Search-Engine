{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nimport datetime\nfrom odoo import api, fields, models\n\n\nclass StockProductionLot(models.Model):\n    _inherit = 'stock.production.lot'\n\n    life_date = fields.Datetime(string='End of Life Date',\n        help='This is the date on which the goods with this Serial Number may become dangerous and must not be consumed.')\n    use_date = fields.Datetime(string='Best before Date',\n        help='This is the date on which the goods with this Serial Number start deteriorating, without being dangerous yet.')\n    removal_date = fields.Datetime(string='Removal Date',\n        help='This is the date on which the goods with this Serial Number should be removed from the stock.')\n    alert_date = fields.Datetime(string='Alert Date',\n        help='Date to determine the expired lots and serial numbers using the filter \"Expiration Alerts\".')\n    product_expiry_alert = fields.Boolean(compute='_compute_product_expiry_alert', help=\"The Alert Date has been reached.\")\n\n    @api.depends('alert_date')\n    def _compute_product_expiry_alert(self):\n        current_date = fields.Datetime.now()\n        for lot in self.filtered(lambda l: l.alert_date):\n            lot.product_expiry_alert = lot.alert_date <= current_date\n\n    def _get_dates(self, product_id=None):\n        \n        mapped_fields = {\n            'life_date': 'life_time',\n            'use_date': 'use_time',\n            'removal_date': 'removal_time',\n            'alert_date': 'alert_time'\n        }\n        res = dict.fromkeys(mapped_fields, False)\n        product = self.env['product.product'].browse(product_id) or self.product_id\n        if product:\n            for field in mapped_fields:\n                duration = getattr(product, mapped_fields[field])\n                if duration:\n                    date = datetime.datetime.now() + datetime.timedelta(days=duration)\n                    res[field] = fields.Datetime.to_string(date)\n        return res\n\n    \n    @api.model\n    def create(self, vals):\n        dates = self._get_dates(vals.get('product_id') or self.env.context.get('default_product_id'))\n        for d in dates:\n            if not vals.get(d):\n                vals[d] = dates[d]\n        return super(StockProductionLot, self).create(vals)\n\n    @api.onchange('product_id')\n    def _onchange_product(self):\n        dates_dict = self._get_dates()\n        for field, value in dates_dict.items():\n            setattr(self, field, value)\n", "comments": "   returns dates based number days configured current lot product            coding  utf 8        part odoo  see license file full copyright licensing details     assign dates according products data ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\nimport datetime\nfrom odoo import api, fields, models\n\n\nclass StockProductionLot(models.Model):\n    _inherit = 'stock.production.lot'\n\n    life_date = fields.Datetime(string='End of Life Date',\n        help='This is the date on which the goods with this Serial Number may become dangerous and must not be consumed.')\n    use_date = fields.Datetime(string='Best before Date',\n        help='This is the date on which the goods with this Serial Number start deteriorating, without being dangerous yet.')\n    removal_date = fields.Datetime(string='Removal Date',\n        help='This is the date on which the goods with this Serial Number should be removed from the stock.')\n    alert_date = fields.Datetime(string='Alert Date',\n        help='Date to determine the expired lots and serial numbers using the filter \"Expiration Alerts\".')\n    product_expiry_alert = fields.Boolean(compute='_compute_product_expiry_alert', help=\"The Alert Date has been reached.\")\n\n    @api.depends('alert_date')\n    def _compute_product_expiry_alert(self):\n        current_date = fields.Datetime.now()\n        for lot in self.filtered(lambda l: l.alert_date):\n            lot.product_expiry_alert = lot.alert_date <= current_date\n\n    def _get_dates(self, product_id=None):\n        \"\"\"Returns dates based on number of days configured in current lot's product.\"\"\"\n        mapped_fields = {\n            'life_date': 'life_time',\n            'use_date': 'use_time',\n            'removal_date': 'removal_time',\n            'alert_date': 'alert_time'\n        }\n        res = dict.fromkeys(mapped_fields, False)\n        product = self.env['product.product'].browse(product_id) or self.product_id\n        if product:\n            for field in mapped_fields:\n                duration = getattr(product, mapped_fields[field])\n                if duration:\n                    date = datetime.datetime.now() + datetime.timedelta(days=duration)\n                    res[field] = fields.Datetime.to_string(date)\n        return res\n\n    # Assign dates according to products data\n    @api.model\n    def create(self, vals):\n        dates = self._get_dates(vals.get('product_id') or self.env.context.get('default_product_id'))\n        for d in dates:\n            if not vals.get(d):\n                vals[d] = dates[d]\n        return super(StockProductionLot, self).create(vals)\n\n    @api.onchange('product_id')\n    def _onchange_product(self):\n        dates_dict = self._get_dates()\n        for field, value in dates_dict.items():\n            setattr(self, field, value)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "production_lot.py", "id": "77ae5bfd11c1397a0fd3e75c9212ff0a", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/product_expiry/models/production_lot.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}