{"author": "getsentry", "code": "from __future__ import absolute_import, print_function\n\nfrom django.core import mail\n\nfrom sentry.models import AuthProvider, OrganizationMember\nfrom sentry.testutils import TestCase\nfrom sentry.tasks.auth import email_missing_links, email_unlink_notifications\n\n\nclass EmailMissingLinksTest(TestCase):\n    def setUp(self):\n        super(EmailMissingLinksTest, self).setUp()\n        self.user = self.create_user(email='bar@example.com')\n        self.organization = self.create_organization(owner=self.user, name='Test')\n        self.provider = AuthProvider.objects.create(\n            organization=self.organization,\n            provider='dummy',\n        )\n        OrganizationMember.objects.create_or_update(\n            user=self.user,\n            organization=self.organization,\n            values={'flags': getattr(OrganizationMember.flags, 'sso:linked')},\n        )\n        self.user2 = self.create_user(email='baz@example.com')\n        OrganizationMember.objects.create(\n            user=self.user2,\n            organization=self.organization,\n            flags=0,\n        )\n\n    def test_email_missing_links(self):\n        with self.tasks():\n            email_missing_links(self.organization.id, self.user.id, self.provider.provider)\n\n        assert len(mail.outbox) == 1\n        assert mail.outbox[0].to == [self.user2.email]\n\n    def test_email_unlink_notifications(self):\n        with self.tasks():\n            email_unlink_notifications(self.organization.id, self.user.id, self.provider.provider)\n\n        assert len(mail.outbox) == 2\n", "comments": "", "content": "from __future__ import absolute_import, print_function\n\nfrom django.core import mail\n\nfrom sentry.models import AuthProvider, OrganizationMember\nfrom sentry.testutils import TestCase\nfrom sentry.tasks.auth import email_missing_links, email_unlink_notifications\n\n\nclass EmailMissingLinksTest(TestCase):\n    def setUp(self):\n        super(EmailMissingLinksTest, self).setUp()\n        self.user = self.create_user(email='bar@example.com')\n        self.organization = self.create_organization(owner=self.user, name='Test')\n        self.provider = AuthProvider.objects.create(\n            organization=self.organization,\n            provider='dummy',\n        )\n        OrganizationMember.objects.create_or_update(\n            user=self.user,\n            organization=self.organization,\n            values={'flags': getattr(OrganizationMember.flags, 'sso:linked')},\n        )\n        self.user2 = self.create_user(email='baz@example.com')\n        OrganizationMember.objects.create(\n            user=self.user2,\n            organization=self.organization,\n            flags=0,\n        )\n\n    def test_email_missing_links(self):\n        with self.tasks():\n            email_missing_links(self.organization.id, self.user.id, self.provider.provider)\n\n        assert len(mail.outbox) == 1\n        assert mail.outbox[0].to == [self.user2.email]\n\n    def test_email_unlink_notifications(self):\n        with self.tasks():\n            email_unlink_notifications(self.organization.id, self.user.id, self.provider.provider)\n\n        assert len(mail.outbox) == 2\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_auth.py", "id": "71d91ca823edc73f2882835cb6a53d36", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/tasks/test_auth.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}