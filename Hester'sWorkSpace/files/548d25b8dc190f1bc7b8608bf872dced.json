{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom sentry.testutils import TestCase\nfrom sentry.models import GroupSubscription\nfrom sentry.utils.linksign import generate_signed_link\n\n\nclass UnsubscribeIssueNotificationsTest(TestCase):\n    def test_renders(self):\n        group = self.create_group()\n\n        path = generate_signed_link(\n            user=self.user,\n            viewname='sentry-account-email-unsubscribe-issue',\n            args=[group.id],\n        )\n\n        resp = self.client.get(path)\n\n        assert resp.status_code == 200\n\n    def test_process(self):\n        group = self.create_group()\n\n        path = generate_signed_link(\n            user=self.user,\n            viewname='sentry-account-email-unsubscribe-issue',\n            args=[group.id],\n        )\n\n        resp = self.client.post(path, data={'op': 'unsubscribe'})\n\n        assert resp.status_code == 302\n        assert GroupSubscription.objects.filter(\n            user=self.user,\n            group=group,\n            is_active=False,\n        ).exists()\n\n    def test_no_access(self):\n        user = self.create_user('foo@example.com')\n        group = self.create_group()\n\n        path = generate_signed_link(\n            user=user,\n            viewname='sentry-account-email-unsubscribe-issue',\n            args=[group.id],\n        )\n\n        resp = self.client.get(path)\n\n        assert resp.status_code == 404\n\n    def test_invalid_issue(self):\n\n        path = generate_signed_link(\n            user=self.user,\n            viewname='sentry-account-email-unsubscribe-issue',\n            args=[13413434],\n        )\n\n        resp = self.client.get(path)\n\n        assert resp.status_code == 404\n", "comments": "", "content": "from __future__ import absolute_import\n\nfrom sentry.testutils import TestCase\nfrom sentry.models import GroupSubscription\nfrom sentry.utils.linksign import generate_signed_link\n\n\nclass UnsubscribeIssueNotificationsTest(TestCase):\n    def test_renders(self):\n        group = self.create_group()\n\n        path = generate_signed_link(\n            user=self.user,\n            viewname='sentry-account-email-unsubscribe-issue',\n            args=[group.id],\n        )\n\n        resp = self.client.get(path)\n\n        assert resp.status_code == 200\n\n    def test_process(self):\n        group = self.create_group()\n\n        path = generate_signed_link(\n            user=self.user,\n            viewname='sentry-account-email-unsubscribe-issue',\n            args=[group.id],\n        )\n\n        resp = self.client.post(path, data={'op': 'unsubscribe'})\n\n        assert resp.status_code == 302\n        assert GroupSubscription.objects.filter(\n            user=self.user,\n            group=group,\n            is_active=False,\n        ).exists()\n\n    def test_no_access(self):\n        user = self.create_user('foo@example.com')\n        group = self.create_group()\n\n        path = generate_signed_link(\n            user=user,\n            viewname='sentry-account-email-unsubscribe-issue',\n            args=[group.id],\n        )\n\n        resp = self.client.get(path)\n\n        assert resp.status_code == 404\n\n    def test_invalid_issue(self):\n\n        path = generate_signed_link(\n            user=self.user,\n            viewname='sentry-account-email-unsubscribe-issue',\n            args=[13413434],\n        )\n\n        resp = self.client.get(path)\n\n        assert resp.status_code == 404\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_unsubscribe_issue_notifications.py", "id": "548d25b8dc190f1bc7b8608bf872dced", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/web/frontend/test_unsubscribe_issue_notifications.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}