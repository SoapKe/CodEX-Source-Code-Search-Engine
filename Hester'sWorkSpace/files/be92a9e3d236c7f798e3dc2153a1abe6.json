{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2016, NetApp, Inc\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: netapp_e_hostgroup\nversion_added: \"2.2\"\nshort_description: Manage NetApp Storage Array Host Groups\nauthor: Kevin Hulquest (@hulquest)\ndescription:\n- Create, update or destroy host groups on a NetApp E-Series storage array.\noptions:\n  api_username:\n      required: true\n      description:\n      - The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.\n  api_password:\n      required: true\n      description:\n      - The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.\n  api_url:\n      required: true\n      description:\n      - The url to the SANtricity WebServices Proxy or embedded REST API.\n  validate_certs:\n      required: false\n      default: true\n      description:\n      - Should https certificates be validated?\n  ssid:\n    required: true\n    description:\n    - The ID of the array to manage (as configured on the web services proxy).\n  state:\n    required: true\n    description:\n    - Whether the specified host group should exist or not.\n    choices: ['present', 'absent']\n  name:\n    required: false\n    description:\n    - The name of the host group to manage. Either this or C(id_num) must be supplied.\n  new_name:\n    required: false\n    description:\n    - specify this when you need to update the name of a host group\n  id:\n    required: false\n    description:\n    - The id number of the host group to manage. Either this or C(name) must be supplied.\n  hosts:\n    required: false\n    description:\n    - a list of host names/labels to add to the group\n'''\nEXAMPLES = '''\n    - name: Configure Hostgroup\n      netapp_e_hostgroup:\n        ssid: \"{{ ssid }}\"\n        api_url: \"{{ netapp_api_url }}\"\n        api_username: \"{{ netapp_api_username }}\"\n        api_password: \"{{ netapp_api_password }}\"\n        validate_certs: \"{{ netapp_api_validate_certs }}\"\n        state: present\n'''\nRETURN = '''\nclusterRef:\n    description: The unique identification value for this object. Other objects may use this reference value to refer to the cluster.\n    returned: always except when state is absent\n    type: string\n    sample: \"3233343536373839303132333100000000000000\"\nconfirmLUNMappingCreation:\n    description: If true, indicates that creation of LUN-to-volume mappings should require careful confirmation from the end-user, since such a mapping\n                 will alter the volume access rights of other clusters, in addition to this one.\n    returned: always\n    type: boolean\n    sample: false\nhosts:\n    description: A list of the hosts that are part of the host group after all operations.\n    returned: always except when state is absent\n    type: list\n    sample: [\"HostA\",\"HostB\"]\nid:\n    description: The id number of the hostgroup\n    returned: always except when state is absent\n    type: string\n    sample: \"3233343536373839303132333100000000000000\"\nisSAControlled:\n    description: If true, indicates that I/O accesses from this cluster are subject to the storage array's default LUN-to-volume mappings. If false,\n                 indicates that I/O accesses from the cluster are subject to cluster-specific LUN-to-volume mappings.\n    returned: always except when state is absent\n    type: boolean\n    sample: false\nlabel:\n    description: The user-assigned, descriptive label string for the cluster.\n    returned: always\n    type: string\n    sample: \"MyHostGroup\"\nname:\n    description: same as label\n    returned: always except when state is absent\n    type: string\n    sample: \"MyHostGroup\"\nprotectionInformationCapableAccessMethod:\n    description: This field is true if the host has a PI capable access method.\n    returned: always except when state is absent\n    type: boolean\n    sample: true\n'''\n\nHEADERS = {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\nimport json\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six.moves.urllib.error import HTTPError\nfrom ansible.module_utils._text import to_native\nfrom ansible.module_utils.urls import open_url\n\n\ndef request(url, data=None, headers=None, method='GET', use_proxy=True,\n            force=False, last_mod_time=None, timeout=10, validate_certs=True,\n            url_username=None, url_password=None, http_agent=None, force_basic_auth=True, ignore_errors=False):\n    try:\n        r = open_url(url=url, data=data, headers=headers, method=method, use_proxy=use_proxy,\n                     force=force, last_mod_time=last_mod_time, timeout=timeout, validate_certs=validate_certs,\n                     url_username=url_username, url_password=url_password, http_agent=http_agent,\n                     force_basic_auth=force_basic_auth)\n    except HTTPError as e:\n        r = e.fp\n\n    try:\n        raw_data = r.read()\n        if raw_data:\n            data = json.loads(raw_data)\n        else:\n            raw_data = None\n    except:\n        if ignore_errors:\n            pass\n        else:\n            raise Exception(raw_data)\n\n    resp_code = r.getcode()\n\n    if resp_code >= 400 and not ignore_errors:\n        raise Exception(resp_code, data)\n    else:\n        return resp_code, data\n\n\ndef group_exists(module, id_type, ident, ssid, api_url, user, pwd):\n    rc, data = get_hostgroups(module, ssid, api_url, user, pwd)\n    for group in data:\n        if group[id_type] == ident:\n            return True, data\n        else:\n            continue\n\n    return False, data\n\n\ndef get_hostgroups(module, ssid, api_url, user, pwd):\n    groups = \"storage-systems/%s/host-groups\" % ssid\n    url = api_url + groups\n    try:\n        rc, data = request(url, headers=HEADERS, url_username=user, url_password=pwd)\n        return rc, data\n    except HTTPError as e:\n        module.fail_json(msg=\"Failed to get host groups. Id [%s]. Error [%s].\" % (ssid, to_native(e)))\n\n\ndef get_hostref(module, ssid, name, api_url, user, pwd):\n    all_hosts = 'storage-systems/%s/hosts' % ssid\n    url = api_url + all_hosts\n    try:\n        rc, data = request(url, method='GET', headers=HEADERS, url_username=user, url_password=pwd)\n    except Exception as e:\n        module.fail_json(msg=\"Failed to get hosts. Id [%s]. Error [%s].\" % (ssid, to_native(e)))\n\n    for host in data:\n        if host['name'] == name:\n            return host['hostRef']\n        else:\n            continue\n\n    module.fail_json(msg=\"No host with the name %s could be found\" % name)\n\n\ndef create_hostgroup(module, ssid, name, api_url, user, pwd, hosts=None):\n    groups = \"storage-systems/%s/host-groups\" % ssid\n    url = api_url + groups\n    hostrefs = []\n\n    if hosts:\n        for host in hosts:\n            href = get_hostref(module, ssid, host, api_url, user, pwd)\n            hostrefs.append(href)\n\n    post_data = json.dumps(dict(name=name, hosts=hostrefs))\n    try:\n        rc, data = request(url, method='POST', data=post_data, headers=HEADERS, url_username=user, url_password=pwd)\n    except Exception as e:\n        module.fail_json(msg=\"Failed to create host group. Id [%s]. Error [%s].\" % (ssid, to_native(e)))\n\n    return rc, data\n\n\ndef update_hostgroup(module, ssid, name, api_url, user, pwd, hosts=None, new_name=None):\n    gid = get_hostgroup_id(module, ssid, name, api_url, user, pwd)\n    groups = \"storage-systems/%s/host-groups/%s\" % (ssid, gid)\n    url = api_url + groups\n    hostrefs = []\n\n    if hosts:\n        for host in hosts:\n            href = get_hostref(module, ssid, host, api_url, user, pwd)\n            hostrefs.append(href)\n\n    if new_name:\n        post_data = json.dumps(dict(name=new_name, hosts=hostrefs))\n    else:\n        post_data = json.dumps(dict(hosts=hostrefs))\n\n    try:\n        rc, data = request(url, method='POST', data=post_data, headers=HEADERS, url_username=user, url_password=pwd)\n    except Exception as e:\n        module.fail_json(msg=\"Failed to update host group. Group [%s]. Id [%s]. Error [%s].\" % (gid, ssid,\n                                                                                                to_native(e)))\n\n    return rc, data\n\n\ndef delete_hostgroup(module, ssid, group_id, api_url, user, pwd):\n    groups = \"storage-systems/%s/host-groups/%s\" % (ssid, group_id)\n    url = api_url + groups\n    \n    try:\n        rc, data = request(url, method='DELETE', headers=HEADERS, url_username=user, url_password=pwd)\n    except Exception as e:\n        module.fail_json(msg=\"Failed to delete host group. Group [%s]. Id [%s]. Error [%s].\" % (group_id, ssid, to_native(e)))\n\n    return rc, data\n\n\ndef get_hostgroup_id(module, ssid, name, api_url, user, pwd):\n    all_groups = 'storage-systems/%s/host-groups' % ssid\n    url = api_url + all_groups\n    rc, data = request(url, method='GET', headers=HEADERS, url_username=user, url_password=pwd)\n    for hg in data:\n        if hg['name'] == name:\n            return hg['id']\n        else:\n            continue\n\n    module.fail_json(msg=\"A hostgroup with the name %s could not be found\" % name)\n\n\ndef get_hosts_in_group(module, ssid, group_name, api_url, user, pwd):\n    all_groups = 'storage-systems/%s/host-groups' % ssid\n    g_url = api_url + all_groups\n    try:\n        g_rc, g_data = request(g_url, method='GET', headers=HEADERS, url_username=user, url_password=pwd)\n    except Exception as e:\n        module.fail_json(\n            msg=\"Failed in first step getting hosts from group. Group: [%s]. Id [%s]. Error [%s].\" % (group_name,\n                                                                                                      ssid,\n                                                                                                      to_native(e)))\n\n    all_hosts = 'storage-systems/%s/hosts' % ssid\n    h_url = api_url + all_hosts\n    try:\n        h_rc, h_data = request(h_url, method='GET', headers=HEADERS, url_username=user, url_password=pwd)\n    except Exception as e:\n        module.fail_json(\n            msg=\"Failed in second step getting hosts from group. Group: [%s]. Id [%s]. Error [%s].\" % (\n                group_name,\n                ssid,\n                to_native(e)))\n\n    hosts_in_group = []\n\n    for hg in g_data:\n        if hg['name'] == group_name:\n            clusterRef = hg['clusterRef']\n\n    for host in h_data:\n        if host['clusterRef'] == clusterRef:\n            hosts_in_group.append(host['name'])\n\n    return hosts_in_group\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=False),\n            new_name=dict(required=False),\n            ssid=dict(required=True),\n            id=dict(required=False),\n            state=dict(required=True, choices=['present', 'absent']),\n            hosts=dict(required=False, type='list'),\n            api_url=dict(required=True),\n            api_username=dict(required=True),\n            validate_certs=dict(required=False, default=True),\n            api_password=dict(required=True, no_log=True)\n        ),\n        supports_check_mode=False,\n        mutually_exclusive=[['name', 'id']],\n        required_one_of=[['name', 'id']]\n    )\n\n    name = module.params['name']\n    new_name = module.params['new_name']\n    ssid = module.params['ssid']\n    id_num = module.params['id']\n    state = module.params['state']\n    hosts = module.params['hosts']\n    user = module.params['api_username']\n    pwd = module.params['api_password']\n    api_url = module.params['api_url']\n\n    if not api_url.endswith('/'):\n        api_url += '/'\n\n    if name:\n        id_type = 'name'\n        id_key = name\n    elif id_num:\n        id_type = 'id'\n        id_key = id_num\n\n    exists, group_data = group_exists(module, id_type, id_key, ssid, api_url, user, pwd)\n\n    if state == 'present':\n        if not exists:\n            try:\n                rc, data = create_hostgroup(module, ssid, name, api_url, user, pwd, hosts)\n            except Exception as e:\n                module.fail_json(msg=\"Failed to create a host group. Id [%s]. Error [%s].\" % (ssid, to_native(e)))\n\n            hosts = get_hosts_in_group(module, ssid, name, api_url, user, pwd)\n            module.exit_json(changed=True, hosts=hosts, **data)\n        else:\n            current_hosts = get_hosts_in_group(module, ssid, name, api_url, user, pwd)\n\n            if not current_hosts:\n                current_hosts = []\n\n            if not hosts:\n                hosts = []\n\n            if set(current_hosts) != set(hosts):\n                try:\n                    rc, data = update_hostgroup(module, ssid, name, api_url, user, pwd, hosts, new_name)\n                except Exception as e:\n                    module.fail_json(\n                        msg=\"Failed to update host group. Group: [%s]. Id [%s]. Error [%s].\" % (name, ssid, to_native(e)))\n                module.exit_json(changed=True, hosts=hosts, **data)\n            else:\n                for group in group_data:\n                    if group['name'] == name:\n                        module.exit_json(changed=False, hosts=current_hosts, **group)\n\n    elif state == 'absent':\n        if exists:\n            hg_id = get_hostgroup_id(module, ssid, name, api_url, user, pwd)\n            try:\n                rc, data = delete_hostgroup(module, ssid, hg_id, api_url, user, pwd)\n            except Exception as e:\n                module.fail_json(\n                    msg=\"Failed to delete host group. Group: [%s]. Id [%s]. Error [%s].\" % (name, ssid, to_native(e)))\n\n            module.exit_json(changed=True, msg=\"Host Group deleted\")\n        else:\n            module.exit_json(changed=False, msg=\"Host Group is already absent\")\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  netapp e hostgroup version added   2 2  short description  manage netapp storage array host groups author  kevin hulquest ( hulquest) description    create  update destroy host groups netapp e series storage array  options    api username        required  true       description          the username authenticate santricity webservices proxy embedded rest api    api password        required  true       description          the password authenticate santricity webservices proxy embedded rest api    api url        required  true       description          the url santricity webservices proxy embedded rest api    validate certs        required  false       default  true       description          should https certificates validated    ssid      required  true     description        the id array manage (as configured web services proxy)    state      required  true     description        whether specified host group exist      choices    present    absent     name      required  false     description        the name host group manage  either c(id num) must supplied    new name      required  false     description        specify need update name host group   id      required  false     description        the id number host group manage  either c(name) must supplied    hosts      required  false     description        list host names labels add group     examples             name  configure hostgroup       netapp e hostgroup          ssid      ssid             api url      netapp api url             api username      netapp api username             api password      netapp api password             validate certs      netapp api validate certs             state  present     return       clusterref      description  the unique identification value object  other objects may use reference value refer cluster      returned  always except state absent     type  string     sample   3233343536373839303132333100000000000000  confirmlunmappingcreation      description  if true  indicates creation lun volume mappings require careful confirmation end user  since mapping                  alter volume access rights clusters  addition one      returned  always     type  boolean     sample  false hosts      description  a list hosts part host group operations      returned  always except state absent     type  list     sample    hosta   hostb   id      description  the id number hostgroup     returned  always except state absent     type  string     sample   3233343536373839303132333100000000000000  issacontrolled      description  if true  indicates i o accesses cluster subject storage array default lun volume mappings  if false                   indicates i o accesses cluster subject cluster specific lun volume mappings      returned  always except state absent     type  boolean     sample  false label      description  the user assigned  descriptive label string cluster      returned  always     type  string     sample   myhostgroup  name      description  label     returned  always except state absent     type  string     sample   myhostgroup  protectioninformationcapableaccessmethod      description  this field true host pi capable access method      returned  always except state absent     type  boolean     sample  true         usr bin python        coding  utf 8        (c) 2016  netapp  inc    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    todo  loop hosts  mapping href  make new list pass data ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2016, NetApp, Inc\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: netapp_e_hostgroup\nversion_added: \"2.2\"\nshort_description: Manage NetApp Storage Array Host Groups\nauthor: Kevin Hulquest (@hulquest)\ndescription:\n- Create, update or destroy host groups on a NetApp E-Series storage array.\noptions:\n  api_username:\n      required: true\n      description:\n      - The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.\n  api_password:\n      required: true\n      description:\n      - The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.\n  api_url:\n      required: true\n      description:\n      - The url to the SANtricity WebServices Proxy or embedded REST API.\n  validate_certs:\n      required: false\n      default: true\n      description:\n      - Should https certificates be validated?\n  ssid:\n    required: true\n    description:\n    - The ID of the array to manage (as configured on the web services proxy).\n  state:\n    required: true\n    description:\n    - Whether the specified host group should exist or not.\n    choices: ['present', 'absent']\n  name:\n    required: false\n    description:\n    - The name of the host group to manage. Either this or C(id_num) must be supplied.\n  new_name:\n    required: false\n    description:\n    - specify this when you need to update the name of a host group\n  id:\n    required: false\n    description:\n    - The id number of the host group to manage. Either this or C(name) must be supplied.\n  hosts:\n    required: false\n    description:\n    - a list of host names/labels to add to the group\n'''\nEXAMPLES = '''\n    - name: Configure Hostgroup\n      netapp_e_hostgroup:\n        ssid: \"{{ ssid }}\"\n        api_url: \"{{ netapp_api_url }}\"\n        api_username: \"{{ netapp_api_username }}\"\n        api_password: \"{{ netapp_api_password }}\"\n        validate_certs: \"{{ netapp_api_validate_certs }}\"\n        state: present\n'''\nRETURN = '''\nclusterRef:\n    description: The unique identification value for this object. Other objects may use this reference value to refer to the cluster.\n    returned: always except when state is absent\n    type: string\n    sample: \"3233343536373839303132333100000000000000\"\nconfirmLUNMappingCreation:\n    description: If true, indicates that creation of LUN-to-volume mappings should require careful confirmation from the end-user, since such a mapping\n                 will alter the volume access rights of other clusters, in addition to this one.\n    returned: always\n    type: boolean\n    sample: false\nhosts:\n    description: A list of the hosts that are part of the host group after all operations.\n    returned: always except when state is absent\n    type: list\n    sample: [\"HostA\",\"HostB\"]\nid:\n    description: The id number of the hostgroup\n    returned: always except when state is absent\n    type: string\n    sample: \"3233343536373839303132333100000000000000\"\nisSAControlled:\n    description: If true, indicates that I/O accesses from this cluster are subject to the storage array's default LUN-to-volume mappings. If false,\n                 indicates that I/O accesses from the cluster are subject to cluster-specific LUN-to-volume mappings.\n    returned: always except when state is absent\n    type: boolean\n    sample: false\nlabel:\n    description: The user-assigned, descriptive label string for the cluster.\n    returned: always\n    type: string\n    sample: \"MyHostGroup\"\nname:\n    description: same as label\n    returned: always except when state is absent\n    type: string\n    sample: \"MyHostGroup\"\nprotectionInformationCapableAccessMethod:\n    description: This field is true if the host has a PI capable access method.\n    returned: always except when state is absent\n    type: boolean\n    sample: true\n'''\n\nHEADERS = {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\nimport json\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six.moves.urllib.error import HTTPError\nfrom ansible.module_utils._text import to_native\nfrom ansible.module_utils.urls import open_url\n\n\ndef request(url, data=None, headers=None, method='GET', use_proxy=True,\n            force=False, last_mod_time=None, timeout=10, validate_certs=True,\n            url_username=None, url_password=None, http_agent=None, force_basic_auth=True, ignore_errors=False):\n    try:\n        r = open_url(url=url, data=data, headers=headers, method=method, use_proxy=use_proxy,\n                     force=force, last_mod_time=last_mod_time, timeout=timeout, validate_certs=validate_certs,\n                     url_username=url_username, url_password=url_password, http_agent=http_agent,\n                     force_basic_auth=force_basic_auth)\n    except HTTPError as e:\n        r = e.fp\n\n    try:\n        raw_data = r.read()\n        if raw_data:\n            data = json.loads(raw_data)\n        else:\n            raw_data = None\n    except:\n        if ignore_errors:\n            pass\n        else:\n            raise Exception(raw_data)\n\n    resp_code = r.getcode()\n\n    if resp_code >= 400 and not ignore_errors:\n        raise Exception(resp_code, data)\n    else:\n        return resp_code, data\n\n\ndef group_exists(module, id_type, ident, ssid, api_url, user, pwd):\n    rc, data = get_hostgroups(module, ssid, api_url, user, pwd)\n    for group in data:\n        if group[id_type] == ident:\n            return True, data\n        else:\n            continue\n\n    return False, data\n\n\ndef get_hostgroups(module, ssid, api_url, user, pwd):\n    groups = \"storage-systems/%s/host-groups\" % ssid\n    url = api_url + groups\n    try:\n        rc, data = request(url, headers=HEADERS, url_username=user, url_password=pwd)\n        return rc, data\n    except HTTPError as e:\n        module.fail_json(msg=\"Failed to get host groups. Id [%s]. Error [%s].\" % (ssid, to_native(e)))\n\n\ndef get_hostref(module, ssid, name, api_url, user, pwd):\n    all_hosts = 'storage-systems/%s/hosts' % ssid\n    url = api_url + all_hosts\n    try:\n        rc, data = request(url, method='GET', headers=HEADERS, url_username=user, url_password=pwd)\n    except Exception as e:\n        module.fail_json(msg=\"Failed to get hosts. Id [%s]. Error [%s].\" % (ssid, to_native(e)))\n\n    for host in data:\n        if host['name'] == name:\n            return host['hostRef']\n        else:\n            continue\n\n    module.fail_json(msg=\"No host with the name %s could be found\" % name)\n\n\ndef create_hostgroup(module, ssid, name, api_url, user, pwd, hosts=None):\n    groups = \"storage-systems/%s/host-groups\" % ssid\n    url = api_url + groups\n    hostrefs = []\n\n    if hosts:\n        for host in hosts:\n            href = get_hostref(module, ssid, host, api_url, user, pwd)\n            hostrefs.append(href)\n\n    post_data = json.dumps(dict(name=name, hosts=hostrefs))\n    try:\n        rc, data = request(url, method='POST', data=post_data, headers=HEADERS, url_username=user, url_password=pwd)\n    except Exception as e:\n        module.fail_json(msg=\"Failed to create host group. Id [%s]. Error [%s].\" % (ssid, to_native(e)))\n\n    return rc, data\n\n\ndef update_hostgroup(module, ssid, name, api_url, user, pwd, hosts=None, new_name=None):\n    gid = get_hostgroup_id(module, ssid, name, api_url, user, pwd)\n    groups = \"storage-systems/%s/host-groups/%s\" % (ssid, gid)\n    url = api_url + groups\n    hostrefs = []\n\n    if hosts:\n        for host in hosts:\n            href = get_hostref(module, ssid, host, api_url, user, pwd)\n            hostrefs.append(href)\n\n    if new_name:\n        post_data = json.dumps(dict(name=new_name, hosts=hostrefs))\n    else:\n        post_data = json.dumps(dict(hosts=hostrefs))\n\n    try:\n        rc, data = request(url, method='POST', data=post_data, headers=HEADERS, url_username=user, url_password=pwd)\n    except Exception as e:\n        module.fail_json(msg=\"Failed to update host group. Group [%s]. Id [%s]. Error [%s].\" % (gid, ssid,\n                                                                                                to_native(e)))\n\n    return rc, data\n\n\ndef delete_hostgroup(module, ssid, group_id, api_url, user, pwd):\n    groups = \"storage-systems/%s/host-groups/%s\" % (ssid, group_id)\n    url = api_url + groups\n    # TODO: Loop through hosts, do mapping to href, make new list to pass to data\n    try:\n        rc, data = request(url, method='DELETE', headers=HEADERS, url_username=user, url_password=pwd)\n    except Exception as e:\n        module.fail_json(msg=\"Failed to delete host group. Group [%s]. Id [%s]. Error [%s].\" % (group_id, ssid, to_native(e)))\n\n    return rc, data\n\n\ndef get_hostgroup_id(module, ssid, name, api_url, user, pwd):\n    all_groups = 'storage-systems/%s/host-groups' % ssid\n    url = api_url + all_groups\n    rc, data = request(url, method='GET', headers=HEADERS, url_username=user, url_password=pwd)\n    for hg in data:\n        if hg['name'] == name:\n            return hg['id']\n        else:\n            continue\n\n    module.fail_json(msg=\"A hostgroup with the name %s could not be found\" % name)\n\n\ndef get_hosts_in_group(module, ssid, group_name, api_url, user, pwd):\n    all_groups = 'storage-systems/%s/host-groups' % ssid\n    g_url = api_url + all_groups\n    try:\n        g_rc, g_data = request(g_url, method='GET', headers=HEADERS, url_username=user, url_password=pwd)\n    except Exception as e:\n        module.fail_json(\n            msg=\"Failed in first step getting hosts from group. Group: [%s]. Id [%s]. Error [%s].\" % (group_name,\n                                                                                                      ssid,\n                                                                                                      to_native(e)))\n\n    all_hosts = 'storage-systems/%s/hosts' % ssid\n    h_url = api_url + all_hosts\n    try:\n        h_rc, h_data = request(h_url, method='GET', headers=HEADERS, url_username=user, url_password=pwd)\n    except Exception as e:\n        module.fail_json(\n            msg=\"Failed in second step getting hosts from group. Group: [%s]. Id [%s]. Error [%s].\" % (\n                group_name,\n                ssid,\n                to_native(e)))\n\n    hosts_in_group = []\n\n    for hg in g_data:\n        if hg['name'] == group_name:\n            clusterRef = hg['clusterRef']\n\n    for host in h_data:\n        if host['clusterRef'] == clusterRef:\n            hosts_in_group.append(host['name'])\n\n    return hosts_in_group\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=False),\n            new_name=dict(required=False),\n            ssid=dict(required=True),\n            id=dict(required=False),\n            state=dict(required=True, choices=['present', 'absent']),\n            hosts=dict(required=False, type='list'),\n            api_url=dict(required=True),\n            api_username=dict(required=True),\n            validate_certs=dict(required=False, default=True),\n            api_password=dict(required=True, no_log=True)\n        ),\n        supports_check_mode=False,\n        mutually_exclusive=[['name', 'id']],\n        required_one_of=[['name', 'id']]\n    )\n\n    name = module.params['name']\n    new_name = module.params['new_name']\n    ssid = module.params['ssid']\n    id_num = module.params['id']\n    state = module.params['state']\n    hosts = module.params['hosts']\n    user = module.params['api_username']\n    pwd = module.params['api_password']\n    api_url = module.params['api_url']\n\n    if not api_url.endswith('/'):\n        api_url += '/'\n\n    if name:\n        id_type = 'name'\n        id_key = name\n    elif id_num:\n        id_type = 'id'\n        id_key = id_num\n\n    exists, group_data = group_exists(module, id_type, id_key, ssid, api_url, user, pwd)\n\n    if state == 'present':\n        if not exists:\n            try:\n                rc, data = create_hostgroup(module, ssid, name, api_url, user, pwd, hosts)\n            except Exception as e:\n                module.fail_json(msg=\"Failed to create a host group. Id [%s]. Error [%s].\" % (ssid, to_native(e)))\n\n            hosts = get_hosts_in_group(module, ssid, name, api_url, user, pwd)\n            module.exit_json(changed=True, hosts=hosts, **data)\n        else:\n            current_hosts = get_hosts_in_group(module, ssid, name, api_url, user, pwd)\n\n            if not current_hosts:\n                current_hosts = []\n\n            if not hosts:\n                hosts = []\n\n            if set(current_hosts) != set(hosts):\n                try:\n                    rc, data = update_hostgroup(module, ssid, name, api_url, user, pwd, hosts, new_name)\n                except Exception as e:\n                    module.fail_json(\n                        msg=\"Failed to update host group. Group: [%s]. Id [%s]. Error [%s].\" % (name, ssid, to_native(e)))\n                module.exit_json(changed=True, hosts=hosts, **data)\n            else:\n                for group in group_data:\n                    if group['name'] == name:\n                        module.exit_json(changed=False, hosts=current_hosts, **group)\n\n    elif state == 'absent':\n        if exists:\n            hg_id = get_hostgroup_id(module, ssid, name, api_url, user, pwd)\n            try:\n                rc, data = delete_hostgroup(module, ssid, hg_id, api_url, user, pwd)\n            except Exception as e:\n                module.fail_json(\n                    msg=\"Failed to delete host group. Group: [%s]. Id [%s]. Error [%s].\" % (name, ssid, to_native(e)))\n\n            module.exit_json(changed=True, msg=\"Host Group deleted\")\n        else:\n            module.exit_json(changed=False, msg=\"Host Group is already absent\")\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "netapp_e_hostgroup.py", "id": "be92a9e3d236c7f798e3dc2153a1abe6", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/storage/netapp/netapp_e_hostgroup.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}