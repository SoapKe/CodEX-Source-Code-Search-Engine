{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport socket\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_etree_fromstring,\n    compat_http_client,\n    compat_urllib_error,\n    compat_urllib_parse_unquote,\n    compat_urllib_parse_unquote_plus,\n)\nfrom ..utils import (\n    clean_html,\n    error_to_compat_str,\n    ExtractorError,\n    get_element_by_id,\n    int_or_none,\n    js_to_json,\n    limit_length,\n    sanitized_Request,\n    try_get,\n    urlencode_postdata,\n)\n\n\nclass FacebookIE(InfoExtractor):\n    _VALID_URL = r, webpage):\n            urls.append(mobj.group('url'))\n        return urls\n\n    def _login(self):\n        (useremail, password) = self._get_login_info()\n        if useremail is None:\n            return\n\n        login_page_req = sanitized_Request(self._LOGIN_URL)\n        self._set_cookie('facebook.com', 'locale', 'en_US')\n        login_page = self._download_webpage(login_page_req, None,\n                                            note='Downloading login page',\n                                            errnote='Unable to download login page')\n        lsd = self._search_regex(\n            r'<input type=\"hidden\" name=\"lsd\" value=\"([^\"]*)\"',\n            login_page, 'lsd')\n        lgnrnd = self._search_regex(r'name=\"lgnrnd\" value=\"([^\"]*?)\"', login_page, 'lgnrnd')\n\n        login_form = {\n            'email': useremail,\n            'pass': password,\n            'lsd': lsd,\n            'lgnrnd': lgnrnd,\n            'next': 'http://facebook.com/home.php',\n            'default_persistent': '0',\n            'legacy_return': '1',\n            'timezone': '-60',\n            'trynum': '1',\n        }\n        request = sanitized_Request(self._LOGIN_URL, urlencode_postdata(login_form))\n        request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        try:\n            login_results = self._download_webpage(request, None,\n                                                   note='Logging in', errnote='unable to fetch login page')\n            if re.search(r'<form(.*)name=\"login\"(.*)</form>', login_results) is not None:\n                error = self._html_search_regex(\n                    r'(?s)<div[^>]+class=([\"\\']).*?login_error_box.*?\\1[^>]*><div[^>]*>.*?</div><div[^>]*>(?P<error>.+?)</div>',\n                    login_results, 'login error', default=None, group='error')\n                if error:\n                    raise ExtractorError('Unable to login: %s' % error, expected=True)\n                self._downloader.report_warning('unable to log in: bad username/password, or exceeded login rate limit (~3/min). Check credentials or wait.')\n                return\n\n            fb_dtsg = self._search_regex(\n                r'name=\"fb_dtsg\" value=\"(.+?)\"', login_results, 'fb_dtsg', default=None)\n            h = self._search_regex(\n                r'name=\"h\"\\s+(?:\\w+=\"[^\"]+\"\\s+)*?value=\"([^\"]+)\"', login_results, 'h', default=None)\n\n            if not fb_dtsg or not h:\n                return\n\n            check_form = {\n                'fb_dtsg': fb_dtsg,\n                'h': h,\n                'name_action_selected': 'dont_save',\n            }\n            check_req = sanitized_Request(self._CHECKPOINT_URL, urlencode_postdata(check_form))\n            check_req.add_header('Content-Type', 'application/x-www-form-urlencoded')\n            check_response = self._download_webpage(check_req, None,\n                                                    note='Confirming login')\n            if re.search(r'id=\"checkpointSubmitButton\"', check_response) is not None:\n                self._downloader.report_warning('Unable to confirm login, you have to login in your browser and authorize the login.')\n        except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n            self._downloader.report_warning('unable to log in: %s' % error_to_compat_str(err))\n            return\n\n    def _real_initialize(self):\n        self._login()\n\n    def _extract_from_url(self, url, video_id, fatal_if_no_video=True):\n        req = sanitized_Request(url)\n        req.add_header('User-Agent', self._CHROME_USER_AGENT)\n        webpage = self._download_webpage(req, video_id)\n\n        video_data = None\n\n        def extract_video_data(instances):\n            for item in instances:\n                if item[1][0] == 'VideoConfig':\n                    video_item = item[2][0]\n                    if video_item.get('video_id'):\n                        return video_item['videoData']\n\n        server_js_data = self._parse_json(self._search_regex(\n            r'handleServerJS\\(({.+})(?:\\);|,\")', webpage,\n            'server js data', default='{}'), video_id, fatal=False)\n\n        if server_js_data:\n            video_data = extract_video_data(server_js_data.get('instances', []))\n\n        if not video_data:\n            server_js_data = self._parse_json(\n                self._search_regex(\n                    r'bigPipe\\.onPageletArrive\\(({.+?})\\)\\s*;\\s*}\\s*\\)\\s*,\\s*[\"\\']onPageletArrive\\s+(?:stream_pagelet|pagelet_group_mall|permalink_video_pagelet)',\n                    webpage, 'js data', default='{}'),\n                video_id, transform_source=js_to_json, fatal=False)\n            if server_js_data:\n                video_data = extract_video_data(try_get(\n                    server_js_data, lambda x: x['jsmods']['instances'],\n                    list) or [])\n\n        if not video_data:\n            if not fatal_if_no_video:\n                return webpage, False\n            m_msg = re.search(r'class=\"[^\"]*uiInterstitialContent[^\"]*\"><div>(.*?)</div>', webpage)\n            if m_msg is not None:\n                raise ExtractorError(\n                    'The video is not available, Facebook said: \"%s\"' % m_msg.group(1),\n                    expected=True)\n            elif '>You must log in to continue' in webpage:\n                self.raise_login_required()\n            else:\n                raise ExtractorError('Cannot parse data')\n\n        formats = []\n        for f in video_data:\n            format_id = f['stream_type']\n            if f and isinstance(f, dict):\n                f = [f]\n            if not f or not isinstance(f, list):\n                continue\n            for quality in ('sd', 'hd'):\n                for src_type in ('src', 'src_no_ratelimit'):\n                    src = f[0].get('%s_%s' % (quality, src_type))\n                    if src:\n                        preference = -10 if format_id == 'progressive' else 0\n                        if quality == 'hd':\n                            preference += 5\n                        formats.append({\n                            'format_id': '%s_%s_%s' % (format_id, quality, src_type),\n                            'url': src,\n                            'preference': preference,\n                        })\n            dash_manifest = f[0].get('dash_manifest')\n            if dash_manifest:\n                formats.extend(self._parse_mpd_formats(\n                    compat_etree_fromstring(compat_urllib_parse_unquote_plus(dash_manifest))))\n        if not formats:\n            raise ExtractorError('Cannot find video formats')\n\n        self._sort_formats(formats)\n\n        video_title = self._html_search_regex(\n            r'<h2\\s+[^>]*class=\"uiHeaderTitle\"[^>]*>([^<]*)</h2>', webpage,\n            'title', default=None)\n        if not video_title:\n            video_title = self._html_search_regex(\n                r'(?s)<span class=\"fbPhotosPhotoCaption\".*?id=\"fbPhotoPageCaption\"><span class=\"hasCaption\">(.*?)</span>',\n                webpage, 'alternative title', default=None)\n        if not video_title:\n            video_title = self._html_search_meta(\n                'description', webpage, 'title', default=None)\n        if video_title:\n            video_title = limit_length(video_title, 80)\n        else:\n            video_title = 'Facebook video \n        uploader = clean_html(get_element_by_id(\n            'fbPhotoPageAuthorName', webpage)) or self._search_regex(\n            r'ownerName\\s*:\\s*\"([^\"]+)\"', webpage, 'uploader', fatal=False)\n        timestamp = int_or_none(self._search_regex(\n            r'<abbr[^>]+data-utime=[\"\\'](\\d+)', webpage,\n            'timestamp', default=None))\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        info_dict = {\n            'id': video_id,\n            'title': video_title,\n            'formats': formats,\n            'uploader': uploader,\n            'timestamp': timestamp,\n            'thumbnail': thumbnail,\n        }\n\n        return webpage, info_dict\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        real_url = self._VIDEO_PAGE_TEMPLATE % video_id if url.startswith('facebook:') else url\n        webpage, info_dict = self._extract_from_url(real_url, video_id, fatal_if_no_video=False)\n\n        if info_dict:\n            return info_dict\n\n        if '/posts/' in url:\n            entries = [\n                self.url_result('facebook:%s' % vid, FacebookIE.ie_key())\n                for vid in self._parse_json(\n                    self._search_regex(\n                        r'([\"\\'])video_ids\\1\\s*:\\s*(?P<ids>\\[.+?\\])',\n                        webpage, 'video ids', group='ids'),\n                    video_id)]\n\n            return self.playlist_result(entries, video_id)\n        else:\n            _, info_dict = self._extract_from_url(\n                self._VIDEO_PAGE_TEMPLATE % video_id,\n                video_id, fatal_if_no_video=True)\n            return info_dict\n\n\nclass FacebookPluginsVideoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:[\\w-]+\\.)?facebook\\.com/plugins/video\\.php\\?.*?\\bhref=(?P<id>https.+)'\n\n    _TESTS = [{\n        'url': 'https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Fgov.sg%2Fvideos%2F10154383743583686%2F&show_text=0&width=560',\n        'md5': '5954e92cdfe51fe5782ae9bda7058a07',\n        'info_dict': {\n            'id': '10154383743583686',\n            'ext': 'mp4',\n            'title': 'What to do during the haze?',\n            'uploader': 'Gov.sg',\n            'upload_date': '20160826',\n            'timestamp': 1472184808,\n        },\n        'add_ie': [FacebookIE.ie_key()],\n    }, {\n        'url': 'https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Fvideo.php%3Fv%3D10204634152394104',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.facebook.com/plugins/video.php?href=https://www.facebook.com/gov.sg/videos/10154383743583686/&show_text=0&width=560',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        return self.url_result(\n            compat_urllib_parse_unquote(self._match_id(url)),\n            FacebookIE.ie_key())\n", "comments": "(?x)\n                (?:\n                    https?://\n                        (?:[\\w-]+\\.)?(?:facebook\\.com|facebookcorewwwi\\.onion)/\n                        (?:[^#]*?\\#!/)?\n                        (?:\n                            (?:\n                                video/video\\.php|\n                                photo\\.php|\n                                video\\.php|\n                                video/embed|\n                                story\\.php\n                            )\\?(?:.*?)(?:v|video_id|story_fbid)=|\n                            [^/]+/videos/(?:[^/]+/)?|\n                            [^/]+/posts/|\n                            groups/[^/]+/permalink/\n                        )|\n                    facebook:\n                )\n                (?P<id>[0-9]+)\n                '''\n    _LOGIN_URL = 'https://www.facebook.com/login.php?next=http%3A%2F%2Ffacebook.com%2Fhome.php&login_attempt=1'\n    _CHECKPOINT_URL = 'https://www.facebook.com/checkpoint/?next=http%3A%2F%2Ffacebook.com%2Fhome.php&_fb_noscript=1'\n    _NETRC_MACHINE = 'facebook'\n    IE_NAME = 'facebook'\n\n    _CHROME_USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36'\n\n    _VIDEO_PAGE_TEMPLATE = 'https://www.facebook.com/video/video.php?v=%s'\n\n    _TESTS = [{\n        'url': 'https://www.facebook.com/video.php?v=637842556329505&fref=nf',\n        'md5': '6a40d33c0eccbb1af76cf0485a052659',\n        'info_dict': {\n            'id': '637842556329505',\n            'ext': 'mp4',\n            'title': 're:Did you know Kei Nishikori is the first Asian man to ever reach a Grand Slam',\n            'uploader': 'Tennis on Facebook',\n            'upload_date': '20140908',\n            'timestamp': 1410199200,\n        },\n        'skip': 'Requires logging in',\n    }, {\n        'url': 'https://www.facebook.com/video.php?v=274175099429670',\n        'info_dict': {\n            'id': '274175099429670',\n            'ext': 'mp4',\n            'title': 'Asif Nawab Butt posted a video to his Timeline.',\n            'uploader': 'Asif Nawab Butt',\n            'upload_date': '20140506',\n            'timestamp': 1399398998,\n            'thumbnail': r're:^https?://.*',\n        },\n        'expected_warnings': [\n            'title'\n        ]\n    }, {\n        'note': 'Video with DASH manifest',\n        'url': 'https://www.facebook.com/video.php?v=957955867617029',\n        'md5': 'b2c28d528273b323abe5c6ab59f0f030',\n        'info_dict': {\n            'id': '957955867617029',\n            'ext': 'mp4',\n            'title': 'When you post epic content on instagram.com/433 8 million followers, this is ...',\n            'uploader': 'Demy de Zeeuw',\n            'upload_date': '20160110',\n            'timestamp': 1452431627,\n        },\n        'skip': 'Requires logging in',\n    }, {\n        'url': 'https://www.facebook.com/maxlayn/posts/10153807558977570',\n        'md5': '037b1fa7f3c2d02b7a0d7bc16031ecc6',\n        'info_dict': {\n            'id': '544765982287235',\n            'ext': 'mp4',\n            'title': '\"What are you doing running in the snow?\"',\n            'uploader': 'FailArmy',\n        },\n        'skip': 'Video gone',\n    }, {\n        'url': 'https://m.facebook.com/story.php?story_fbid=1035862816472149&id=116132035111903',\n        'md5': '1deb90b6ac27f7efcf6d747c8a27f5e3',\n        'info_dict': {\n            'id': '1035862816472149',\n            'ext': 'mp4',\n            'title': 'What the Flock Is Going On In New Zealand  Credit: ViralHog',\n            'uploader': 'S. Saint',\n        },\n        'skip': 'Video gone',\n    }, {\n        'note': 'swf params escaped',\n        'url': 'https://www.facebook.com/barackobama/posts/10153664894881749',\n        'md5': '97ba073838964d12c70566e0085c2b91',\n        'info_dict': {\n            'id': '10153664894881749',\n            'ext': 'mp4',\n            'title': 'Average time to confirm recent Supreme Court nominees: 67 days Longest it\\'s t...',\n            'thumbnail': r're:^https?://.*',\n            'timestamp': 1456259628,\n            'upload_date': '20160223',\n            'uploader': 'Barack Obama',\n        },\n    }, {\n        # have 1080P, but only up to 720p in swf params\n        'url': 'https://www.facebook.com/cnn/videos/10155529876156509/',\n        'md5': '0d9813160b146b3bc8744e006027fcc6',\n        'info_dict': {\n            'id': '10155529876156509',\n            'ext': 'mp4',\n            'title': 'She survived the holocaust \u2014 and years later, she\u2019s getting her citizenship s...',\n            'timestamp': 1477818095,\n            'upload_date': '20161030',\n            'uploader': 'CNN',\n            'thumbnail': r're:^https?://.*',\n        },\n    }, {\n        # bigPipe.onPageletArrive ... onPageletArrive pagelet_group_mall\n        'url': 'https://www.facebook.com/yaroslav.korpan/videos/1417995061575415/',\n        'info_dict': {\n            'id': '1417995061575415',\n            'ext': 'mp4',\n            'title': 'md5:a7b86ca673f51800cd54687b7f4012fe',\n            'timestamp': 1486648217,\n            'upload_date': '20170209',\n            'uploader': 'Yaroslav Korpan',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.facebook.com/LaGuiaDelVaron/posts/1072691702860471',\n        'info_dict': {\n            'id': '1072691702860471',\n            'ext': 'mp4',\n            'title': 'md5:ae2d22a93fbb12dad20dc393a869739d',\n            'timestamp': 1477305000,\n            'upload_date': '20161024',\n            'uploader': 'La Gu\u00eda Del Var\u00f3n',\n            'thumbnail': r're:^https?://.*',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.facebook.com/groups/1024490957622648/permalink/1396382447100162/',\n        'info_dict': {\n            'id': '1396382447100162',\n            'ext': 'mp4',\n            'title': 'md5:e2d2700afdf84e121f5d0f999bad13a3',\n            'timestamp': 1486035494,\n            'upload_date': '20170202',\n            'uploader': 'Elisabeth Ahtn',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.facebook.com/video.php?v=10204634152394104',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.facebook.com/amogood/videos/1618742068337349/?fref=nf',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.facebook.com/ChristyClarkForBC/videos/vb.22819070941/10153870694020942/?type=2&theater',\n        'only_matching': True,\n    }, {\n        'url': 'facebook:544765982287235',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.facebook.com/groups/164828000315060/permalink/764967300301124/',\n        'only_matching': True,\n    }, {\n        'url': 'https://zh-hk.facebook.com/peoplespower/videos/1135894589806027/',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.facebookcorewwwi.onion/video.php?v=274175099429670',\n        'only_matching': True,\n    }, {\n        # no title\n        'url': 'https://www.facebook.com/onlycleverentertainment/videos/1947995502095005/',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        urls = []\n        for mobj in re.finditer(\n                r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://www\\.facebook\\.com/(?:video/embed|plugins/video\\.php).+?)\\1',\n                webpage):\n            urls.append(mobj.group('url'))\n        # Facebook API embed\n        # see https://developers.facebook.com/docs/plugins/embedded-video-player\n        for mobj in re.finditer(r'''(?x)<div[^>]+\n                class=(?P<q1>[\\'\"])[^\\'\"]*\\bfb-(?:video|post)\\b[^\\'\"]*(?P=q1)[^>]+\n                data-href=(?P<q2>[\\'\"])(?P<url>(?:https?:)?//(?:www\\.)?facebook.com/.+?)(?P=q2)\n)\n# coding: utf-8\n#%s' % video_id\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport socket\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_etree_fromstring,\n    compat_http_client,\n    compat_urllib_error,\n    compat_urllib_parse_unquote,\n    compat_urllib_parse_unquote_plus,\n)\nfrom ..utils import (\n    clean_html,\n    error_to_compat_str,\n    ExtractorError,\n    get_element_by_id,\n    int_or_none,\n    js_to_json,\n    limit_length,\n    sanitized_Request,\n    try_get,\n    urlencode_postdata,\n)\n\n\nclass FacebookIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                (?:\n                    https?://\n                        (?:[\\w-]+\\.)?(?:facebook\\.com|facebookcorewwwi\\.onion)/\n                        (?:[^#]*?\\#!/)?\n                        (?:\n                            (?:\n                                video/video\\.php|\n                                photo\\.php|\n                                video\\.php|\n                                video/embed|\n                                story\\.php\n                            )\\?(?:.*?)(?:v|video_id|story_fbid)=|\n                            [^/]+/videos/(?:[^/]+/)?|\n                            [^/]+/posts/|\n                            groups/[^/]+/permalink/\n                        )|\n                    facebook:\n                )\n                (?P<id>[0-9]+)\n                '''\n    _LOGIN_URL = 'https://www.facebook.com/login.php?next=http%3A%2F%2Ffacebook.com%2Fhome.php&login_attempt=1'\n    _CHECKPOINT_URL = 'https://www.facebook.com/checkpoint/?next=http%3A%2F%2Ffacebook.com%2Fhome.php&_fb_noscript=1'\n    _NETRC_MACHINE = 'facebook'\n    IE_NAME = 'facebook'\n\n    _CHROME_USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36'\n\n    _VIDEO_PAGE_TEMPLATE = 'https://www.facebook.com/video/video.php?v=%s'\n\n    _TESTS = [{\n        'url': 'https://www.facebook.com/video.php?v=637842556329505&fref=nf',\n        'md5': '6a40d33c0eccbb1af76cf0485a052659',\n        'info_dict': {\n            'id': '637842556329505',\n            'ext': 'mp4',\n            'title': 're:Did you know Kei Nishikori is the first Asian man to ever reach a Grand Slam',\n            'uploader': 'Tennis on Facebook',\n            'upload_date': '20140908',\n            'timestamp': 1410199200,\n        },\n        'skip': 'Requires logging in',\n    }, {\n        'url': 'https://www.facebook.com/video.php?v=274175099429670',\n        'info_dict': {\n            'id': '274175099429670',\n            'ext': 'mp4',\n            'title': 'Asif Nawab Butt posted a video to his Timeline.',\n            'uploader': 'Asif Nawab Butt',\n            'upload_date': '20140506',\n            'timestamp': 1399398998,\n            'thumbnail': r're:^https?://.*',\n        },\n        'expected_warnings': [\n            'title'\n        ]\n    }, {\n        'note': 'Video with DASH manifest',\n        'url': 'https://www.facebook.com/video.php?v=957955867617029',\n        'md5': 'b2c28d528273b323abe5c6ab59f0f030',\n        'info_dict': {\n            'id': '957955867617029',\n            'ext': 'mp4',\n            'title': 'When you post epic content on instagram.com/433 8 million followers, this is ...',\n            'uploader': 'Demy de Zeeuw',\n            'upload_date': '20160110',\n            'timestamp': 1452431627,\n        },\n        'skip': 'Requires logging in',\n    }, {\n        'url': 'https://www.facebook.com/maxlayn/posts/10153807558977570',\n        'md5': '037b1fa7f3c2d02b7a0d7bc16031ecc6',\n        'info_dict': {\n            'id': '544765982287235',\n            'ext': 'mp4',\n            'title': '\"What are you doing running in the snow?\"',\n            'uploader': 'FailArmy',\n        },\n        'skip': 'Video gone',\n    }, {\n        'url': 'https://m.facebook.com/story.php?story_fbid=1035862816472149&id=116132035111903',\n        'md5': '1deb90b6ac27f7efcf6d747c8a27f5e3',\n        'info_dict': {\n            'id': '1035862816472149',\n            'ext': 'mp4',\n            'title': 'What the Flock Is Going On In New Zealand  Credit: ViralHog',\n            'uploader': 'S. Saint',\n        },\n        'skip': 'Video gone',\n    }, {\n        'note': 'swf params escaped',\n        'url': 'https://www.facebook.com/barackobama/posts/10153664894881749',\n        'md5': '97ba073838964d12c70566e0085c2b91',\n        'info_dict': {\n            'id': '10153664894881749',\n            'ext': 'mp4',\n            'title': 'Average time to confirm recent Supreme Court nominees: 67 days Longest it\\'s t...',\n            'thumbnail': r're:^https?://.*',\n            'timestamp': 1456259628,\n            'upload_date': '20160223',\n            'uploader': 'Barack Obama',\n        },\n    }, {\n        # have 1080P, but only up to 720p in swf params\n        'url': 'https://www.facebook.com/cnn/videos/10155529876156509/',\n        'md5': '0d9813160b146b3bc8744e006027fcc6',\n        'info_dict': {\n            'id': '10155529876156509',\n            'ext': 'mp4',\n            'title': 'She survived the holocaust \u2014 and years later, she\u2019s getting her citizenship s...',\n            'timestamp': 1477818095,\n            'upload_date': '20161030',\n            'uploader': 'CNN',\n            'thumbnail': r're:^https?://.*',\n        },\n    }, {\n        # bigPipe.onPageletArrive ... onPageletArrive pagelet_group_mall\n        'url': 'https://www.facebook.com/yaroslav.korpan/videos/1417995061575415/',\n        'info_dict': {\n            'id': '1417995061575415',\n            'ext': 'mp4',\n            'title': 'md5:a7b86ca673f51800cd54687b7f4012fe',\n            'timestamp': 1486648217,\n            'upload_date': '20170209',\n            'uploader': 'Yaroslav Korpan',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.facebook.com/LaGuiaDelVaron/posts/1072691702860471',\n        'info_dict': {\n            'id': '1072691702860471',\n            'ext': 'mp4',\n            'title': 'md5:ae2d22a93fbb12dad20dc393a869739d',\n            'timestamp': 1477305000,\n            'upload_date': '20161024',\n            'uploader': 'La Gu\u00eda Del Var\u00f3n',\n            'thumbnail': r're:^https?://.*',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.facebook.com/groups/1024490957622648/permalink/1396382447100162/',\n        'info_dict': {\n            'id': '1396382447100162',\n            'ext': 'mp4',\n            'title': 'md5:e2d2700afdf84e121f5d0f999bad13a3',\n            'timestamp': 1486035494,\n            'upload_date': '20170202',\n            'uploader': 'Elisabeth Ahtn',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.facebook.com/video.php?v=10204634152394104',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.facebook.com/amogood/videos/1618742068337349/?fref=nf',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.facebook.com/ChristyClarkForBC/videos/vb.22819070941/10153870694020942/?type=2&theater',\n        'only_matching': True,\n    }, {\n        'url': 'facebook:544765982287235',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.facebook.com/groups/164828000315060/permalink/764967300301124/',\n        'only_matching': True,\n    }, {\n        'url': 'https://zh-hk.facebook.com/peoplespower/videos/1135894589806027/',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.facebookcorewwwi.onion/video.php?v=274175099429670',\n        'only_matching': True,\n    }, {\n        # no title\n        'url': 'https://www.facebook.com/onlycleverentertainment/videos/1947995502095005/',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        urls = []\n        for mobj in re.finditer(\n                r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://www\\.facebook\\.com/(?:video/embed|plugins/video\\.php).+?)\\1',\n                webpage):\n            urls.append(mobj.group('url'))\n        # Facebook API embed\n        # see https://developers.facebook.com/docs/plugins/embedded-video-player\n        for mobj in re.finditer(r'''(?x)<div[^>]+\n                class=(?P<q1>[\\'\"])[^\\'\"]*\\bfb-(?:video|post)\\b[^\\'\"]*(?P=q1)[^>]+\n                data-href=(?P<q2>[\\'\"])(?P<url>(?:https?:)?//(?:www\\.)?facebook.com/.+?)(?P=q2)''', webpage):\n            urls.append(mobj.group('url'))\n        return urls\n\n    def _login(self):\n        (useremail, password) = self._get_login_info()\n        if useremail is None:\n            return\n\n        login_page_req = sanitized_Request(self._LOGIN_URL)\n        self._set_cookie('facebook.com', 'locale', 'en_US')\n        login_page = self._download_webpage(login_page_req, None,\n                                            note='Downloading login page',\n                                            errnote='Unable to download login page')\n        lsd = self._search_regex(\n            r'<input type=\"hidden\" name=\"lsd\" value=\"([^\"]*)\"',\n            login_page, 'lsd')\n        lgnrnd = self._search_regex(r'name=\"lgnrnd\" value=\"([^\"]*?)\"', login_page, 'lgnrnd')\n\n        login_form = {\n            'email': useremail,\n            'pass': password,\n            'lsd': lsd,\n            'lgnrnd': lgnrnd,\n            'next': 'http://facebook.com/home.php',\n            'default_persistent': '0',\n            'legacy_return': '1',\n            'timezone': '-60',\n            'trynum': '1',\n        }\n        request = sanitized_Request(self._LOGIN_URL, urlencode_postdata(login_form))\n        request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        try:\n            login_results = self._download_webpage(request, None,\n                                                   note='Logging in', errnote='unable to fetch login page')\n            if re.search(r'<form(.*)name=\"login\"(.*)</form>', login_results) is not None:\n                error = self._html_search_regex(\n                    r'(?s)<div[^>]+class=([\"\\']).*?login_error_box.*?\\1[^>]*><div[^>]*>.*?</div><div[^>]*>(?P<error>.+?)</div>',\n                    login_results, 'login error', default=None, group='error')\n                if error:\n                    raise ExtractorError('Unable to login: %s' % error, expected=True)\n                self._downloader.report_warning('unable to log in: bad username/password, or exceeded login rate limit (~3/min). Check credentials or wait.')\n                return\n\n            fb_dtsg = self._search_regex(\n                r'name=\"fb_dtsg\" value=\"(.+?)\"', login_results, 'fb_dtsg', default=None)\n            h = self._search_regex(\n                r'name=\"h\"\\s+(?:\\w+=\"[^\"]+\"\\s+)*?value=\"([^\"]+)\"', login_results, 'h', default=None)\n\n            if not fb_dtsg or not h:\n                return\n\n            check_form = {\n                'fb_dtsg': fb_dtsg,\n                'h': h,\n                'name_action_selected': 'dont_save',\n            }\n            check_req = sanitized_Request(self._CHECKPOINT_URL, urlencode_postdata(check_form))\n            check_req.add_header('Content-Type', 'application/x-www-form-urlencoded')\n            check_response = self._download_webpage(check_req, None,\n                                                    note='Confirming login')\n            if re.search(r'id=\"checkpointSubmitButton\"', check_response) is not None:\n                self._downloader.report_warning('Unable to confirm login, you have to login in your browser and authorize the login.')\n        except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n            self._downloader.report_warning('unable to log in: %s' % error_to_compat_str(err))\n            return\n\n    def _real_initialize(self):\n        self._login()\n\n    def _extract_from_url(self, url, video_id, fatal_if_no_video=True):\n        req = sanitized_Request(url)\n        req.add_header('User-Agent', self._CHROME_USER_AGENT)\n        webpage = self._download_webpage(req, video_id)\n\n        video_data = None\n\n        def extract_video_data(instances):\n            for item in instances:\n                if item[1][0] == 'VideoConfig':\n                    video_item = item[2][0]\n                    if video_item.get('video_id'):\n                        return video_item['videoData']\n\n        server_js_data = self._parse_json(self._search_regex(\n            r'handleServerJS\\(({.+})(?:\\);|,\")', webpage,\n            'server js data', default='{}'), video_id, fatal=False)\n\n        if server_js_data:\n            video_data = extract_video_data(server_js_data.get('instances', []))\n\n        if not video_data:\n            server_js_data = self._parse_json(\n                self._search_regex(\n                    r'bigPipe\\.onPageletArrive\\(({.+?})\\)\\s*;\\s*}\\s*\\)\\s*,\\s*[\"\\']onPageletArrive\\s+(?:stream_pagelet|pagelet_group_mall|permalink_video_pagelet)',\n                    webpage, 'js data', default='{}'),\n                video_id, transform_source=js_to_json, fatal=False)\n            if server_js_data:\n                video_data = extract_video_data(try_get(\n                    server_js_data, lambda x: x['jsmods']['instances'],\n                    list) or [])\n\n        if not video_data:\n            if not fatal_if_no_video:\n                return webpage, False\n            m_msg = re.search(r'class=\"[^\"]*uiInterstitialContent[^\"]*\"><div>(.*?)</div>', webpage)\n            if m_msg is not None:\n                raise ExtractorError(\n                    'The video is not available, Facebook said: \"%s\"' % m_msg.group(1),\n                    expected=True)\n            elif '>You must log in to continue' in webpage:\n                self.raise_login_required()\n            else:\n                raise ExtractorError('Cannot parse data')\n\n        formats = []\n        for f in video_data:\n            format_id = f['stream_type']\n            if f and isinstance(f, dict):\n                f = [f]\n            if not f or not isinstance(f, list):\n                continue\n            for quality in ('sd', 'hd'):\n                for src_type in ('src', 'src_no_ratelimit'):\n                    src = f[0].get('%s_%s' % (quality, src_type))\n                    if src:\n                        preference = -10 if format_id == 'progressive' else 0\n                        if quality == 'hd':\n                            preference += 5\n                        formats.append({\n                            'format_id': '%s_%s_%s' % (format_id, quality, src_type),\n                            'url': src,\n                            'preference': preference,\n                        })\n            dash_manifest = f[0].get('dash_manifest')\n            if dash_manifest:\n                formats.extend(self._parse_mpd_formats(\n                    compat_etree_fromstring(compat_urllib_parse_unquote_plus(dash_manifest))))\n        if not formats:\n            raise ExtractorError('Cannot find video formats')\n\n        self._sort_formats(formats)\n\n        video_title = self._html_search_regex(\n            r'<h2\\s+[^>]*class=\"uiHeaderTitle\"[^>]*>([^<]*)</h2>', webpage,\n            'title', default=None)\n        if not video_title:\n            video_title = self._html_search_regex(\n                r'(?s)<span class=\"fbPhotosPhotoCaption\".*?id=\"fbPhotoPageCaption\"><span class=\"hasCaption\">(.*?)</span>',\n                webpage, 'alternative title', default=None)\n        if not video_title:\n            video_title = self._html_search_meta(\n                'description', webpage, 'title', default=None)\n        if video_title:\n            video_title = limit_length(video_title, 80)\n        else:\n            video_title = 'Facebook video #%s' % video_id\n        uploader = clean_html(get_element_by_id(\n            'fbPhotoPageAuthorName', webpage)) or self._search_regex(\n            r'ownerName\\s*:\\s*\"([^\"]+)\"', webpage, 'uploader', fatal=False)\n        timestamp = int_or_none(self._search_regex(\n            r'<abbr[^>]+data-utime=[\"\\'](\\d+)', webpage,\n            'timestamp', default=None))\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        info_dict = {\n            'id': video_id,\n            'title': video_title,\n            'formats': formats,\n            'uploader': uploader,\n            'timestamp': timestamp,\n            'thumbnail': thumbnail,\n        }\n\n        return webpage, info_dict\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        real_url = self._VIDEO_PAGE_TEMPLATE % video_id if url.startswith('facebook:') else url\n        webpage, info_dict = self._extract_from_url(real_url, video_id, fatal_if_no_video=False)\n\n        if info_dict:\n            return info_dict\n\n        if '/posts/' in url:\n            entries = [\n                self.url_result('facebook:%s' % vid, FacebookIE.ie_key())\n                for vid in self._parse_json(\n                    self._search_regex(\n                        r'([\"\\'])video_ids\\1\\s*:\\s*(?P<ids>\\[.+?\\])',\n                        webpage, 'video ids', group='ids'),\n                    video_id)]\n\n            return self.playlist_result(entries, video_id)\n        else:\n            _, info_dict = self._extract_from_url(\n                self._VIDEO_PAGE_TEMPLATE % video_id,\n                video_id, fatal_if_no_video=True)\n            return info_dict\n\n\nclass FacebookPluginsVideoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:[\\w-]+\\.)?facebook\\.com/plugins/video\\.php\\?.*?\\bhref=(?P<id>https.+)'\n\n    _TESTS = [{\n        'url': 'https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Fgov.sg%2Fvideos%2F10154383743583686%2F&show_text=0&width=560',\n        'md5': '5954e92cdfe51fe5782ae9bda7058a07',\n        'info_dict': {\n            'id': '10154383743583686',\n            'ext': 'mp4',\n            'title': 'What to do during the haze?',\n            'uploader': 'Gov.sg',\n            'upload_date': '20160826',\n            'timestamp': 1472184808,\n        },\n        'add_ie': [FacebookIE.ie_key()],\n    }, {\n        'url': 'https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Fvideo.php%3Fv%3D10204634152394104',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.facebook.com/plugins/video.php?href=https://www.facebook.com/gov.sg/videos/10154383743583686/&show_text=0&width=560',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        return self.url_result(\n            compat_urllib_parse_unquote(self._match_id(url)),\n            FacebookIE.ie_key())\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "facebook.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/facebook.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}