{"author": "getredash", "code": "from __future__ import print_function\nimport json\nimport jsonschema\nfrom jsonschema import ValidationError\n\nfrom redash import query_runner\nfrom redash.models import DataSource\n\n\ndef validate_configuration(query_runner_type, configuration_json):\n    query_runner_class = query_runner.query_runners.get(query_runner_type, None)\n    if query_runner_class is None:\n        return False\n\n    try:\n        if isinstance(configuration_json, basestring):\n            configuration = json.loads(configuration_json)\n        else:\n            configuration = configuration_json\n        jsonschema.validate(configuration, query_runner_class.configuration_schema())\n    except (ValidationError, ValueError):\n        return False\n\n    return True\n\ndef update(data_source):\n    print(\"[%s] Old options: %s\" % (data_source.name, data_source.options))\n\n    if validate_configuration(data_source.type, data_source.options):\n        print(\"[%s] configuration already valid. skipping.\" % data_source.name)\n        return\n\n    if data_source.type == 'pg':\n        values = data_source.options.split(\" \")\n        configuration = {}\n        for value in values:\n            k, v = value.split(\"=\", 1)\n            configuration[k] = v\n            if k == 'port':\n                configuration[k] = int(v)\n\n        data_source.options = json.dumps(configuration)\n\n    elif data_source.type == 'mysql':\n        mapping = {\n            'Server': 'host',\n            'User': 'user',\n            'Pwd': 'passwd',\n            'Database': 'db'\n        }\n\n        values = data_source.options.split(\";\")\n        configuration = {}\n        for value in values:\n            k, v = value.split(\"=\", 1)\n            configuration[mapping[k]] = v\n        data_source.options = json.dumps(configuration)\n\n    elif data_source.type == 'graphite':\n        old_config = json.loads(data_source.options)\n\n        configuration = {\n            \"url\": old_config[\"url\"]\n        }\n\n        if \"verify\" in old_config:\n            configuration['verify'] = old_config['verify']\n\n        if \"auth\" in old_config:\n            configuration['username'], configuration['password'] = old_config[\"auth\"]\n\n        data_source.options = json.dumps(configuration)\n\n    elif data_source.type == 'url':\n        data_source.options = json.dumps({\"url\": data_source.options})\n\n    elif data_source.type == 'script':\n        data_source.options = json.dumps({\"path\": data_source.options})\n\n    elif data_source.type == 'mongo':\n        data_source.type = 'mongodb'\n\n    else:\n        print(\"[%s] No need to convert type of: %s\" % (data_source.name, data_source.type))\n\n    print(\"[%s] New options: %s\" % (data_source.name, data_source.options))\n    data_source.save(only=data_source.dirty_fields)\n\n\nif __name__ == '__main__':\n    for data_source in DataSource.select(DataSource.id, DataSource.name, DataSource.type, DataSource.options):\n        update(data_source)\n", "comments": "", "content": "from __future__ import print_function\nimport json\nimport jsonschema\nfrom jsonschema import ValidationError\n\nfrom redash import query_runner\nfrom redash.models import DataSource\n\n\ndef validate_configuration(query_runner_type, configuration_json):\n    query_runner_class = query_runner.query_runners.get(query_runner_type, None)\n    if query_runner_class is None:\n        return False\n\n    try:\n        if isinstance(configuration_json, basestring):\n            configuration = json.loads(configuration_json)\n        else:\n            configuration = configuration_json\n        jsonschema.validate(configuration, query_runner_class.configuration_schema())\n    except (ValidationError, ValueError):\n        return False\n\n    return True\n\ndef update(data_source):\n    print(\"[%s] Old options: %s\" % (data_source.name, data_source.options))\n\n    if validate_configuration(data_source.type, data_source.options):\n        print(\"[%s] configuration already valid. skipping.\" % data_source.name)\n        return\n\n    if data_source.type == 'pg':\n        values = data_source.options.split(\" \")\n        configuration = {}\n        for value in values:\n            k, v = value.split(\"=\", 1)\n            configuration[k] = v\n            if k == 'port':\n                configuration[k] = int(v)\n\n        data_source.options = json.dumps(configuration)\n\n    elif data_source.type == 'mysql':\n        mapping = {\n            'Server': 'host',\n            'User': 'user',\n            'Pwd': 'passwd',\n            'Database': 'db'\n        }\n\n        values = data_source.options.split(\";\")\n        configuration = {}\n        for value in values:\n            k, v = value.split(\"=\", 1)\n            configuration[mapping[k]] = v\n        data_source.options = json.dumps(configuration)\n\n    elif data_source.type == 'graphite':\n        old_config = json.loads(data_source.options)\n\n        configuration = {\n            \"url\": old_config[\"url\"]\n        }\n\n        if \"verify\" in old_config:\n            configuration['verify'] = old_config['verify']\n\n        if \"auth\" in old_config:\n            configuration['username'], configuration['password'] = old_config[\"auth\"]\n\n        data_source.options = json.dumps(configuration)\n\n    elif data_source.type == 'url':\n        data_source.options = json.dumps({\"url\": data_source.options})\n\n    elif data_source.type == 'script':\n        data_source.options = json.dumps({\"path\": data_source.options})\n\n    elif data_source.type == 'mongo':\n        data_source.type = 'mongodb'\n\n    else:\n        print(\"[%s] No need to convert type of: %s\" % (data_source.name, data_source.type))\n\n    print(\"[%s] New options: %s\" % (data_source.name, data_source.options))\n    data_source.save(only=data_source.dirty_fields)\n\n\nif __name__ == '__main__':\n    for data_source in DataSource.select(DataSource.id, DataSource.name, DataSource.type, DataSource.options):\n        update(data_source)\n", "description": "Make Your Company Data Driven. Connect to any data source, easily visualize and share your data.", "file_name": "0003_update_data_source_config.py", "id": "30de92fd4c12e192ac96c655b751c6a4", "language": "Python", "project_name": "redash", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/getredash-redash/getredash-redash-0410d83/old_migrations/0003_update_data_source_config.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:54:55Z", "url": "https://github.com/getredash/redash", "wiki": false}