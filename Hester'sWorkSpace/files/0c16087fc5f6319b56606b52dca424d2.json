{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport mock\nimport pytest\n\nfrom sentry.testutils import TestCase\nfrom sentry.utils.locking import UnableToAcquireLock\nfrom sentry.utils.locking.backends import LockBackend\nfrom sentry.utils.locking.lock import Lock\n\n\nclass LockTestCase(TestCase):\n    def test_procedural_interface(self):\n        backend = mock.Mock(spec=LockBackend)\n        key = 'lock'\n        duration = 60\n        routing_key = None\n\n        lock = Lock(backend, key, duration, routing_key)\n\n        lock.acquire()\n        backend.acquire.assert_called_once_with(\n            key,\n            duration,\n            routing_key,\n        )\n\n        lock.release()\n        backend.release.assert_called_once_with(\n            key,\n            routing_key,\n        )\n\n        backend.acquire.side_effect = Exception('Boom!')\n        with pytest.raises(UnableToAcquireLock):\n            lock.acquire()\n\n    def test_context_manager_interface(self):\n        backend = mock.Mock(spec=LockBackend)\n        key = 'lock'\n        duration = 60\n        routing_key = None\n\n        lock = Lock(backend, key, duration, routing_key)\n\n        with lock.acquire():\n            backend.acquire.assert_called_once_with(\n                key,\n                duration,\n                routing_key,\n            )\n\n        backend.release.assert_called_once_with(\n            key,\n            routing_key,\n        )\n", "comments": "", "content": "from __future__ import absolute_import\n\nimport mock\nimport pytest\n\nfrom sentry.testutils import TestCase\nfrom sentry.utils.locking import UnableToAcquireLock\nfrom sentry.utils.locking.backends import LockBackend\nfrom sentry.utils.locking.lock import Lock\n\n\nclass LockTestCase(TestCase):\n    def test_procedural_interface(self):\n        backend = mock.Mock(spec=LockBackend)\n        key = 'lock'\n        duration = 60\n        routing_key = None\n\n        lock = Lock(backend, key, duration, routing_key)\n\n        lock.acquire()\n        backend.acquire.assert_called_once_with(\n            key,\n            duration,\n            routing_key,\n        )\n\n        lock.release()\n        backend.release.assert_called_once_with(\n            key,\n            routing_key,\n        )\n\n        backend.acquire.side_effect = Exception('Boom!')\n        with pytest.raises(UnableToAcquireLock):\n            lock.acquire()\n\n    def test_context_manager_interface(self):\n        backend = mock.Mock(spec=LockBackend)\n        key = 'lock'\n        duration = 60\n        routing_key = None\n\n        lock = Lock(backend, key, duration, routing_key)\n\n        with lock.acquire():\n            backend.acquire.assert_called_once_with(\n                key,\n                duration,\n                routing_key,\n            )\n\n        backend.release.assert_called_once_with(\n            key,\n            routing_key,\n        )\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_lock.py", "id": "0c16087fc5f6319b56606b52dca424d2", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/locking/test_lock.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}