{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom .youtube import YoutubeIE\nfrom ..utils import (\n    js_to_json,\n    qualities,\n    determine_ext,\n)\n\n\nclass Tele13IE(InfoExtractor):\n    _VALID_URL = r'^https?://(?:www\\.)?t13\\.cl/videos(?:/[^/]+)+/(?P<id>[\\w-]+)'\n    _TESTS = [\n        {\n            'url': 'http://www.t13.cl/videos/actualidad/el-circulo-de-hierro-de-michelle-bachelet-en-su-regreso-a-la-moneda',\n            'md5': '4cb1fa38adcad8fea88487a078831755',\n            'info_dict': {\n                'id': 'el-circulo-de-hierro-de-michelle-bachelet-en-su-regreso-a-la-moneda',\n                'ext': 'mp4',\n                'title': 'El c\u00edrculo de hierro de Michelle Bachelet en su regreso a La Moneda',\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.t13.cl/videos/mundo/tendencias/video-captan-misteriosa-bola-fuego-cielos-bangkok',\n            'md5': '867adf6a3b3fef932c68a71d70b70946',\n            'info_dict': {\n                'id': 'rOoKv2OMpOw',\n                'ext': 'mp4',\n                'title': 'Shooting star seen on 7-Sep-2015',\n                'description': 'md5:7292ff2a34b2f673da77da222ae77e1e',\n                'uploader': 'Porjai Jaturongkhakun',\n                'upload_date': '20150906',\n                'uploader_id': 'UCnLY_3ezwNcDSC_Wc6suZxw',\n            },\n            'add_ie': ['Youtube'],\n        }\n    ]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n\n        setup_js = self._search_regex(\n            r\"(?s)jwplayer\\('player-vivo'\\).setup\\((\\{.*?\\})\\)\",\n            webpage, 'setup code')\n        sources = self._parse_json(self._search_regex(\n            r'sources\\s*:\\s*(\\[[^\\]]+\\])', setup_js, 'sources'),\n            display_id, js_to_json)\n\n        preference = qualities(['M\u00f3vil', 'SD', 'HD'])\n        formats = []\n        urls = []\n        for f in sources:\n            format_url = f['file']\n            if format_url and format_url not in urls:\n                ext = determine_ext(format_url)\n                if ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        format_url, display_id, 'mp4', 'm3u8_native',\n                        m3u8_id='hls', fatal=False))\n                elif YoutubeIE.suitable(format_url):\n                    return self.url_result(format_url, 'Youtube')\n                else:\n                    formats.append({\n                        'url': format_url,\n                        'format_id': f.get('label'),\n                        'preference': preference(f.get('label')),\n                        'ext': ext,\n                    })\n                urls.append(format_url)\n        self._sort_formats(formats)\n\n        return {\n            'id': display_id,\n            'title': self._search_regex(\n                r'title\\s*:\\s*\"([^\"]+)\"', setup_js, 'title'),\n            'description': self._html_search_meta(\n                'description', webpage, 'description'),\n            'thumbnail': self._search_regex(\n                r'image\\s*:\\s*\"([^\"]+)\"', setup_js, 'thumbnail', default=None),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# HTTP Error 404: Not Found\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom .youtube import YoutubeIE\nfrom ..utils import (\n    js_to_json,\n    qualities,\n    determine_ext,\n)\n\n\nclass Tele13IE(InfoExtractor):\n    _VALID_URL = r'^https?://(?:www\\.)?t13\\.cl/videos(?:/[^/]+)+/(?P<id>[\\w-]+)'\n    _TESTS = [\n        {\n            'url': 'http://www.t13.cl/videos/actualidad/el-circulo-de-hierro-de-michelle-bachelet-en-su-regreso-a-la-moneda',\n            'md5': '4cb1fa38adcad8fea88487a078831755',\n            'info_dict': {\n                'id': 'el-circulo-de-hierro-de-michelle-bachelet-en-su-regreso-a-la-moneda',\n                'ext': 'mp4',\n                'title': 'El c\u00edrculo de hierro de Michelle Bachelet en su regreso a La Moneda',\n            },\n            'params': {\n                # HTTP Error 404: Not Found\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.t13.cl/videos/mundo/tendencias/video-captan-misteriosa-bola-fuego-cielos-bangkok',\n            'md5': '867adf6a3b3fef932c68a71d70b70946',\n            'info_dict': {\n                'id': 'rOoKv2OMpOw',\n                'ext': 'mp4',\n                'title': 'Shooting star seen on 7-Sep-2015',\n                'description': 'md5:7292ff2a34b2f673da77da222ae77e1e',\n                'uploader': 'Porjai Jaturongkhakun',\n                'upload_date': '20150906',\n                'uploader_id': 'UCnLY_3ezwNcDSC_Wc6suZxw',\n            },\n            'add_ie': ['Youtube'],\n        }\n    ]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n\n        setup_js = self._search_regex(\n            r\"(?s)jwplayer\\('player-vivo'\\).setup\\((\\{.*?\\})\\)\",\n            webpage, 'setup code')\n        sources = self._parse_json(self._search_regex(\n            r'sources\\s*:\\s*(\\[[^\\]]+\\])', setup_js, 'sources'),\n            display_id, js_to_json)\n\n        preference = qualities(['M\u00f3vil', 'SD', 'HD'])\n        formats = []\n        urls = []\n        for f in sources:\n            format_url = f['file']\n            if format_url and format_url not in urls:\n                ext = determine_ext(format_url)\n                if ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        format_url, display_id, 'mp4', 'm3u8_native',\n                        m3u8_id='hls', fatal=False))\n                elif YoutubeIE.suitable(format_url):\n                    return self.url_result(format_url, 'Youtube')\n                else:\n                    formats.append({\n                        'url': format_url,\n                        'format_id': f.get('label'),\n                        'preference': preference(f.get('label')),\n                        'ext': ext,\n                    })\n                urls.append(format_url)\n        self._sort_formats(formats)\n\n        return {\n            'id': display_id,\n            'title': self._search_regex(\n                r'title\\s*:\\s*\"([^\"]+)\"', setup_js, 'title'),\n            'description': self._html_search_meta(\n                'description', webpage, 'description'),\n            'thumbnail': self._search_regex(\n                r'image\\s*:\\s*\"([^\"]+)\"', setup_js, 'thumbnail', default=None),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tele13.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tele13.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}