{"author": "sympy", "code": "from sympy import (\n    symbols, expand, expand_func, nan, oo, Float, conjugate, diff,\n    re, im, Abs, O, exp_polar, polar_lift, gruntz, limit,\n    Symbol, I, integrate, Integral, S,\n    sqrt, sin, cos, sinc, sinh, cosh, exp, log, pi, EulerGamma,\n    erf, erfc, erfi, erf2, erfinv, erfcinv, erf2inv,\n    gamma, uppergamma,\n    Ei, expint, E1, li, Li, Si, Ci, Shi, Chi,\n    fresnels, fresnelc,\n    hyper, meijerg)\n\nfrom sympy.functions.special.error_functions import _erfs, _eis\n\nfrom sympy.core.function import ArgumentIndexError\n\nfrom sympy.utilities.pytest import raises\n\nx, y, z = symbols('x,y,z')\nw = Symbol(\"w\", real=True)\nn = Symbol(\"n\", integer=True)\n\n\ndef test_erf():\n    assert erf(nan) == nan\n\n    assert erf(oo) == 1\n    assert erf(-oo) == -1\n\n    assert erf(0) == 0\n\n    assert erf(I*oo) == oo*I\n    assert erf(-I*oo) == -oo*I\n\n    assert erf(-2) == -erf(2)\n    assert erf(-x*y) == -erf(x*y)\n    assert erf(-x - y) == -erf(x + y)\n\n    assert erf(erfinv(x)) == x\n    assert erf(erfcinv(x)) == 1 - x\n    assert erf(erf2inv(0, x)) == x\n    assert erf(erf2inv(0, erf(erfcinv(1 - erf(erfinv(x)))))) == x\n\n    assert erf(I).is_real is False\n    assert erf(0).is_real is True\n\n    assert conjugate(erf(z)) == erf(conjugate(z))\n\n    assert erf(x).as_leading_term(x) == 2*x/sqrt(pi)\n    assert erf(1/x).as_leading_term(x) == erf(1/x)\n\n    assert erf(z).rewrite('uppergamma') == sqrt(z**2)*(1 - erfc(sqrt(z**2)))/z\n    assert erf(z).rewrite('erfc') == S.One - erfc(z)\n    assert erf(z).rewrite('erfi') == -I*erfi(I*z)\n    assert erf(z).rewrite('fresnels') == (1 + I)*(fresnelc(z*(1 - I)/sqrt(pi)) -\n        I*fresnels(z*(1 - I)/sqrt(pi)))\n    assert erf(z).rewrite('fresnelc') == (1 + I)*(fresnelc(z*(1 - I)/sqrt(pi)) -\n        I*fresnels(z*(1 - I)/sqrt(pi)))\n    assert erf(z).rewrite('hyper') == 2*z*hyper([S.Half], [3*S.Half], -z**2)/sqrt(pi)\n    assert erf(z).rewrite('meijerg') == z*meijerg([S.Half], [], [0], [-S.Half], z**2)/sqrt(pi)\n    assert erf(z).rewrite('expint') == sqrt(z**2)/z - z*expint(S.Half, z**2)/sqrt(S.Pi)\n\n    assert limit(exp(x)*exp(x**2)*(erf(x + 1/exp(x)) - erf(x)), x, oo) == \\\n        2/sqrt(pi)\n    assert limit((1 - erf(z))*exp(z**2)*z, z, oo) == 1/sqrt(pi)\n    assert limit((1 - erf(x))*exp(x**2)*sqrt(pi)*x, x, oo) == 1\n    assert limit(((1 - erf(x))*exp(x**2)*sqrt(pi)*x - 1)*2*x**2, x, oo) == -1\n\n    assert erf(x).as_real_imag() == \\\n        ((erf(re(x) - I*re(x)*Abs(im(x))/Abs(re(x)))/2 +\n         erf(re(x) + I*re(x)*Abs(im(x))/Abs(re(x)))/2,\n         I*(erf(re(x) - I*re(x)*Abs(im(x))/Abs(re(x))) -\n         erf(re(x) + I*re(x)*Abs(im(x))/Abs(re(x)))) *\n         re(x)*Abs(im(x))/(2*im(x)*Abs(re(x)))))\n\n    raises(ArgumentIndexError, lambda: erf(x).fdiff(2))\n\n\ndef test_erf_series():\n    assert erf(x).series(x, 0, 7) == 2*x/sqrt(pi) - \\\n        2*x**3/3/sqrt(pi) + x**5/5/sqrt(pi) + O(x**7)\n\n\ndef test_erf_evalf():\n    assert abs( erf(Float(2.0)) - 0.995322265 ) < 1E-8 \n\n\ndef test__erfs():\n    assert _erfs(z).diff(z) == -2/sqrt(S.Pi) + 2*z*_erfs(z)\n\n    assert _erfs(1/z).series(z) == \\\n        z/sqrt(pi) - z**3/(2*sqrt(pi)) + 3*z**5/(4*sqrt(pi)) + O(z**6)\n\n    assert expand(erf(z).rewrite('tractable').diff(z).rewrite('intractable')) \\\n        == erf(z).diff(z)\n    assert _erfs(z).rewrite(\"intractable\") == (-erf(z) + 1)*exp(z**2)\n\n\ndef test_erfc():\n    assert erfc(nan) == nan\n\n    assert erfc(oo) == 0\n    assert erfc(-oo) == 2\n\n    assert erfc(0) == 1\n\n    assert erfc(I*oo) == -oo*I\n    assert erfc(-I*oo) == oo*I\n\n    assert erfc(-x) == S(2) - erfc(x)\n    assert erfc(erfcinv(x)) == x\n\n    assert erfc(I).is_real is False\n    assert erfc(0).is_real is True\n\n    assert conjugate(erfc(z)) == erfc(conjugate(z))\n\n    assert erfc(x).as_leading_term(x) == S.One\n    assert erfc(1/x).as_leading_term(x) == erfc(1/x)\n\n    assert erfc(z).rewrite('erf') == 1 - erf(z)\n    assert erfc(z).rewrite('erfi') == 1 + I*erfi(I*z)\n    assert erfc(z).rewrite('fresnels') == 1 - (1 + I)*(fresnelc(z*(1 - I)/sqrt(pi)) -\n        I*fresnels(z*(1 - I)/sqrt(pi)))\n    assert erfc(z).rewrite('fresnelc') == 1 - (1 + I)*(fresnelc(z*(1 - I)/sqrt(pi)) -\n        I*fresnels(z*(1 - I)/sqrt(pi)))\n    assert erfc(z).rewrite('hyper') == 1 - 2*z*hyper([S.Half], [3*S.Half], -z**2)/sqrt(pi)\n    assert erfc(z).rewrite('meijerg') == 1 - z*meijerg([S.Half], [], [0], [-S.Half], z**2)/sqrt(pi)\n    assert erfc(z).rewrite('uppergamma') == 1 - sqrt(z**2)*(1 - erfc(sqrt(z**2)))/z\n    assert erfc(z).rewrite('expint') == S.One - sqrt(z**2)/z + z*expint(S.Half, z**2)/sqrt(S.Pi)\n    assert expand_func(erf(x) + erfc(x)) == S.One\n\n    assert erfc(x).as_real_imag() == \\\n        ((erfc(re(x) - I*re(x)*Abs(im(x))/Abs(re(x)))/2 +\n         erfc(re(x) + I*re(x)*Abs(im(x))/Abs(re(x)))/2,\n         I*(erfc(re(x) - I*re(x)*Abs(im(x))/Abs(re(x))) -\n         erfc(re(x) + I*re(x)*Abs(im(x))/Abs(re(x)))) *\n         re(x)*Abs(im(x))/(2*im(x)*Abs(re(x)))))\n\n    raises(ArgumentIndexError, lambda: erfc(x).fdiff(2))\n\n\ndef test_erfc_series():\n    assert erfc(x).series(x, 0, 7) == 1 - 2*x/sqrt(pi) + \\\n        2*x**3/3/sqrt(pi) - x**5/5/sqrt(pi) + O(x**7)\n\n\ndef test_erfc_evalf():\n    assert abs( erfc(Float(2.0)) - 0.00467773 ) < 1E-8 \n\n\ndef test_erfi():\n    assert erfi(nan) == nan\n\n    assert erfi(oo) == S.Infinity\n    assert erfi(-oo) == S.NegativeInfinity\n\n    assert erfi(0) == S.Zero\n\n    assert erfi(I*oo) == I\n    assert erfi(-I*oo) == -I\n\n    assert erfi(-x) == -erfi(x)\n\n    assert erfi(I*erfinv(x)) == I*x\n    assert erfi(I*erfcinv(x)) == I*(1 - x)\n    assert erfi(I*erf2inv(0, x)) == I*x\n\n    assert erfi(I).is_real is False\n    assert erfi(0).is_real is True\n\n    assert conjugate(erfi(z)) == erfi(conjugate(z))\n\n    assert erfi(z).rewrite('erf') == -I*erf(I*z)\n    assert erfi(z).rewrite('erfc') == I*erfc(I*z) - I\n    assert erfi(z).rewrite('fresnels') == (1 - I)*(fresnelc(z*(1 + I)/sqrt(pi)) -\n        I*fresnels(z*(1 + I)/sqrt(pi)))\n    assert erfi(z).rewrite('fresnelc') == (1 - I)*(fresnelc(z*(1 + I)/sqrt(pi)) -\n        I*fresnels(z*(1 + I)/sqrt(pi)))\n    assert erfi(z).rewrite('hyper') == 2*z*hyper([S.Half], [3*S.Half], z**2)/sqrt(pi)\n    assert erfi(z).rewrite('meijerg') == z*meijerg([S.Half], [], [0], [-S.Half], -z**2)/sqrt(pi)\n    assert erfi(z).rewrite('uppergamma') == (sqrt(-z**2)/z*(uppergamma(S.Half,\n        -z**2)/sqrt(S.Pi) - S.One))\n    assert erfi(z).rewrite('expint') == sqrt(-z**2)/z - z*expint(S.Half, -z**2)/sqrt(S.Pi)\n    assert expand_func(erfi(I*z)) == I*erf(z)\n\n    assert erfi(x).as_real_imag() == \\\n        ((erfi(re(x) - I*re(x)*Abs(im(x))/Abs(re(x)))/2 +\n         erfi(re(x) + I*re(x)*Abs(im(x))/Abs(re(x)))/2,\n         I*(erfi(re(x) - I*re(x)*Abs(im(x))/Abs(re(x))) -\n         erfi(re(x) + I*re(x)*Abs(im(x))/Abs(re(x)))) *\n         re(x)*Abs(im(x))/(2*im(x)*Abs(re(x)))))\n\n    raises(ArgumentIndexError, lambda: erfi(x).fdiff(2))\n\n\ndef test_erfi_series():\n    assert erfi(x).series(x, 0, 7) == 2*x/sqrt(pi) + \\\n        2*x**3/3/sqrt(pi) + x**5/5/sqrt(pi) + O(x**7)\n\n\ndef test_erfi_evalf():\n    assert abs( erfi(Float(2.0)) - 18.5648024145756 ) < 1E-13  \n\n\ndef test_erf2():\n\n    assert erf2(0, 0) == S.Zero\n    assert erf2(x, x) == S.Zero\n    assert erf2(nan, 0) == nan\n\n    assert erf2(-oo,  y) ==  erf(y) + 1\n    assert erf2( oo,  y) ==  erf(y) - 1\n    assert erf2(  x, oo) ==  1 - erf(x)\n    assert erf2(  x,-oo) == -1 - erf(x)\n    assert erf2(x, erf2inv(x, y)) == y\n\n    assert erf2(-x, -y) == -erf2(x,y)\n    assert erf2(-x,  y) == erf(y) + erf(x)\n    assert erf2( x, -y) == -erf(y) - erf(x)\n    assert erf2(x, y).rewrite('fresnels') == erf(y).rewrite(fresnels)-erf(x).rewrite(fresnels)\n    assert erf2(x, y).rewrite('fresnelc') == erf(y).rewrite(fresnelc)-erf(x).rewrite(fresnelc)\n    assert erf2(x, y).rewrite('hyper') == erf(y).rewrite(hyper)-erf(x).rewrite(hyper)\n    assert erf2(x, y).rewrite('meijerg') == erf(y).rewrite(meijerg)-erf(x).rewrite(meijerg)\n    assert erf2(x, y).rewrite('uppergamma') == erf(y).rewrite(uppergamma) - erf(x).rewrite(uppergamma)\n    assert erf2(x, y).rewrite('expint') == erf(y).rewrite(expint)-erf(x).rewrite(expint)\n\n    assert erf2(I, 0).is_real is False\n    assert erf2(0, 0).is_real is True\n\n    assert expand_func(erf(x) + erf2(x, y)) == erf(y)\n\n    assert conjugate(erf2(x, y)) == erf2(conjugate(x), conjugate(y))\n\n    assert erf2(x, y).rewrite('erf')  == erf(y) - erf(x)\n    assert erf2(x, y).rewrite('erfc') == erfc(x) - erfc(y)\n    assert erf2(x, y).rewrite('erfi') == I*(erfi(I*x) - erfi(I*y))\n\n    raises(ArgumentIndexError, lambda: erfi(x).fdiff(3))\n\n\ndef test_erfinv():\n    assert erfinv(0) == 0\n    assert erfinv(1) == S.Infinity\n    assert erfinv(nan) == S.NaN\n\n    assert erfinv(erf(w)) == w\n    assert erfinv(erf(-w)) == -w\n\n    assert erfinv(x).diff() == sqrt(pi)*exp(erfinv(x)**2)/2\n\n    assert erfinv(z).rewrite('erfcinv') == erfcinv(1-z)\n\n\ndef test_erfinv_evalf():\n    assert abs( erfinv(Float(0.2)) - 0.179143454621292 ) < 1E-13\n\n\ndef test_erfcinv():\n    assert erfcinv(1) == 0\n    assert erfcinv(0) == S.Infinity\n    assert erfcinv(nan) == S.NaN\n\n    assert erfcinv(x).diff() == -sqrt(pi)*exp(erfcinv(x)**2)/2\n\n    assert erfcinv(z).rewrite('erfinv') == erfinv(1-z)\n\n\ndef test_erf2inv():\n    assert erf2inv(0, 0) == S.Zero\n    assert erf2inv(0, 1) == S.Infinity\n    assert erf2inv(1, 0) == S.One\n    assert erf2inv(0, y) == erfinv(y)\n    assert erf2inv(oo,y) == erfcinv(-y)\n\n    assert erf2inv(x, y).diff(x) == exp(-x**2 + erf2inv(x, y)**2)\n    assert erf2inv(x, y).diff(y) == sqrt(pi)*exp(erf2inv(x, y)**2)/2\n\n\n# NOTE we multiply by exp_polar(I*pi) and need this to be on the principal\n# branch, hence take x in the lower half plane (d=0).\n\n\ndef mytn(expr1, expr2, expr3, x, d=0):\n    from sympy.utilities.randtest import verify_numerically, random_complex_number\n    subs = {}\n    for a in expr1.free_symbols:\n        if a != x:\n            subs[a] = random_complex_number()\n    return expr2 == expr3 and verify_numerically(expr1.subs(subs),\n                                               expr2.subs(subs), x, d=d)\n\n\ndef mytd(expr1, expr2, x):\n    from sympy.utilities.randtest import test_derivative_numerically, \\\n        random_complex_number\n    subs = {}\n    for a in expr1.free_symbols:\n        if a != x:\n            subs[a] = random_complex_number()\n    return expr1.diff(x) == expr2 and test_derivative_numerically(expr1.subs(subs), x)\n\n\ndef tn_branch(func, s=None):\n    from sympy import I, pi, exp_polar\n    from random import uniform\n\n    def fn(x):\n        if s is None:\n            return func(x)\n        return func(s, x)\n    c = uniform(1, 5)\n    expr = fn(c*exp_polar(I*pi)) - fn(c*exp_polar(-I*pi))\n    eps = 1e-15\n    expr2 = fn(-c + eps*I) - fn(-c - eps*I)\n    return abs(expr.n() - expr2.n()).n() < 1e-10\n\n\ndef test_ei():\n    assert tn_branch(Ei)\n    assert mytd(Ei(x), exp(x)/x, x)\n    assert mytn(Ei(x), Ei(x).rewrite(uppergamma),\n                -uppergamma(0, x*polar_lift(-1)) - I*pi, x)\n    assert mytn(Ei(x), Ei(x).rewrite(expint),\n                -expint(1, x*polar_lift(-1)) - I*pi, x)\n    assert Ei(x).rewrite(expint).rewrite(Ei) == Ei(x)\n    assert Ei(x*exp_polar(2*I*pi)) == Ei(x) + 2*I*pi\n    assert Ei(x*exp_polar(-2*I*pi)) == Ei(x) - 2*I*pi\n\n    assert mytn(Ei(x), Ei(x).rewrite(Shi), Chi(x) + Shi(x), x)\n    assert mytn(Ei(x*polar_lift(I)), Ei(x*polar_lift(I)).rewrite(Si),\n                Ci(x) + I*Si(x) + I*pi/2, x)\n\n    assert Ei(log(x)).rewrite(li) == li(x)\n    assert Ei(2*log(x)).rewrite(li) == li(x**2)\n\n    assert gruntz(Ei(x+exp(-x))*exp(-x)*x, x, oo) == 1\n\n    assert Ei(x).series(x) == EulerGamma + log(x) + x + x**2/4 + \\\n        x**3/18 + x**4/96 + x**5/600 + O(x**6)\n\n    assert str(Ei(cos(2)).evalf(n=10)) == '-0.6760647401'\n\ndef test_expint():\n    assert mytn(expint(x, y), expint(x, y).rewrite(uppergamma),\n                y**(x - 1)*uppergamma(1 - x, y), x)\n    assert mytd(\n        expint(x, y), -y**(x - 1)*meijerg([], [1, 1], [0, 0, 1 - x], [], y), x)\n    assert mytd(expint(x, y), -expint(x - 1, y), y)\n    assert mytn(expint(1, x), expint(1, x).rewrite(Ei),\n                -Ei(x*polar_lift(-1)) + I*pi, x)\n\n    assert expint(-4, x) == exp(-x)/x + 4*exp(-x)/x**2 + 12*exp(-x)/x**3 \\\n        + 24*exp(-x)/x**4 + 24*exp(-x)/x**5\n    assert expint(-S(3)/2, x) == \\\n        exp(-x)/x + 3*exp(-x)/(2*x**2) + 3*sqrt(pi)*erfc(sqrt(x))/(4*x**S('5/2'))\n\n    assert tn_branch(expint, 1)\n    assert tn_branch(expint, 2)\n    assert tn_branch(expint, 3)\n    assert tn_branch(expint, 1.7)\n    assert tn_branch(expint, pi)\n\n    assert expint(y, x*exp_polar(2*I*pi)) == \\\n        x**(y - 1)*(exp(2*I*pi*y) - 1)*gamma(-y + 1) + expint(y, x)\n    assert expint(y, x*exp_polar(-2*I*pi)) == \\\n        x**(y - 1)*(exp(-2*I*pi*y) - 1)*gamma(-y + 1) + expint(y, x)\n    assert expint(2, x*exp_polar(2*I*pi)) == 2*I*pi*x + expint(2, x)\n    assert expint(2, x*exp_polar(-2*I*pi)) == -2*I*pi*x + expint(2, x)\n    assert expint(1, x).rewrite(Ei).rewrite(expint) == expint(1, x)\n\n    assert mytn(E1(x), E1(x).rewrite(Shi), Shi(x) - Chi(x), x)\n    assert mytn(E1(polar_lift(I)*x), E1(polar_lift(I)*x).rewrite(Si),\n                -Ci(x) + I*Si(x) - I*pi/2, x)\n\n    assert mytn(expint(2, x), expint(2, x).rewrite(Ei).rewrite(expint),\n                -x*E1(x) + exp(-x), x)\n    assert mytn(expint(3, x), expint(3, x).rewrite(Ei).rewrite(expint),\n                x**2*E1(x)/2 + (1 - x)*exp(-x)/2, x)\n\n    assert expint(S(3)/2, z).nseries(z) == \\\n        2 + 2*z - z**2/3 + z**3/15 - z**4/84 + z**5/540 - \\\n        2*sqrt(pi)*sqrt(z) + O(z**6)\n\n    assert E1(z).series(z) == -EulerGamma - log(z) + z - \\\n        z**2/4 + z**3/18 - z**4/96 + z**5/600 + O(z**6)\n\n    assert expint(4, z).series(z) == S(1)/3 - z/2 + z**2/2 + \\\n        z**3*(log(z)/6 - S(11)/36 + EulerGamma/6) - z**4/24 + \\\n        z**5/240 + O(z**6)\n\n\ndef test__eis():\n    assert _eis(z).diff(z) == -_eis(z) + 1/z\n\n    assert _eis(1/z).series(z) == \\\n        z + z**2 + 2*z**3 + 6*z**4 + 24*z**5 + O(z**6)\n\n    assert Ei(z).rewrite('tractable') == exp(z)*_eis(z)\n    assert li(z).rewrite('tractable') == z*_eis(log(z))\n\n    assert _eis(z).rewrite('intractable') == exp(-z)*Ei(z)\n\n    assert expand(li(z).rewrite('tractable').diff(z).rewrite('intractable')) \\\n        == li(z).diff(z)\n\n    assert expand(Ei(z).rewrite('tractable').diff(z).rewrite('intractable')) \\\n        == Ei(z).diff(z)\n\n    assert _eis(z).series(z, n=3) == EulerGamma + log(z) + z*(-log(z) - \\\n        EulerGamma + 1) + z**2*(log(z)/2 - S(3)/4 + EulerGamma/2) + O(z**3*log(z))\n\n\ndef tn_arg(func):\n    def test(arg, e1, e2):\n        from random import uniform\n        v = uniform(1, 5)\n        v1 = func(arg*x).subs(x, v).n()\n        v2 = func(e1*v + e2*1e-15).n()\n        return abs(v1 - v2).n() < 1e-10\n    return test(exp_polar(I*pi/2), I, 1) and \\\n        test(exp_polar(-I*pi/2), -I, 1) and \\\n        test(exp_polar(I*pi), -1, I) and \\\n        test(exp_polar(-I*pi), -1, -I)\n\n\ndef test_li():\n    z = Symbol(\"z\")\n    zr = Symbol(\"z\", real=True)\n    zp = Symbol(\"z\", positive=True)\n    zn = Symbol(\"z\", negative=True)\n\n    assert li(0) == 0\n    assert li(1) == -oo\n    assert li(oo) == oo\n\n    assert isinstance(li(z), li)\n\n    assert diff(li(z), z) == 1/log(z)\n\n    assert conjugate(li(z)) == li(conjugate(z))\n    assert conjugate(li(-zr)) == li(-zr)\n    assert conjugate(li(-zp)) == conjugate(li(-zp))\n    assert conjugate(li(zn)) == conjugate(li(zn))\n\n    assert li(z).rewrite(Li) == Li(z) + li(2)\n    assert li(z).rewrite(Ei) == Ei(log(z))\n    assert li(z).rewrite(uppergamma) == (-log(1/log(z))/2 - log(-log(z)) +\n                                         log(log(z))/2 - expint(1, -log(z)))\n    assert li(z).rewrite(Si) == (-log(I*log(z)) - log(1/log(z))/2 +\n                                 log(log(z))/2 + Ci(I*log(z)) + Shi(log(z)))\n    assert li(z).rewrite(Ci) == (-log(I*log(z)) - log(1/log(z))/2 +\n                                 log(log(z))/2 + Ci(I*log(z)) + Shi(log(z)))\n    assert li(z).rewrite(Shi) == (-log(1/log(z))/2 + log(log(z))/2 +\n                                  Chi(log(z)) - Shi(log(z)))\n    assert li(z).rewrite(Chi) == (-log(1/log(z))/2 + log(log(z))/2 +\n                                  Chi(log(z)) - Shi(log(z)))\n    assert li(z).rewrite(hyper) ==(log(z)*hyper((1, 1), (2, 2), log(z)) -\n                                   log(1/log(z))/2 + log(log(z))/2 + EulerGamma)\n    assert li(z).rewrite(meijerg) == (-log(1/log(z))/2 - log(-log(z)) + log(log(z))/2 -\n                                      meijerg(((), (1,)), ((0, 0), ()), -log(z)))\n\n    assert gruntz(1/li(z), z, oo) == 0\n\n\ndef test_Li():\n    assert Li(2) == 0\n    assert Li(oo) == oo\n\n    assert isinstance(Li(z), Li)\n\n    assert diff(Li(z), z) == 1/log(z)\n\n    assert gruntz(1/Li(z), z, oo) == 0\n    assert Li(z).rewrite(li) == li(z) - li(2)\n\n\ndef test_si():\n    assert Si(I*x) == I*Shi(x)\n    assert Shi(I*x) == I*Si(x)\n    assert Si(-I*x) == -I*Shi(x)\n    assert Shi(-I*x) == -I*Si(x)\n    assert Si(-x) == -Si(x)\n    assert Shi(-x) == -Shi(x)\n    assert Si(exp_polar(2*pi*I)*x) == Si(x)\n    assert Si(exp_polar(-2*pi*I)*x) == Si(x)\n    assert Shi(exp_polar(2*pi*I)*x) == Shi(x)\n    assert Shi(exp_polar(-2*pi*I)*x) == Shi(x)\n\n    assert Si(oo) == pi/2\n    assert Si(-oo) == -pi/2\n    assert Shi(oo) == oo\n    assert Shi(-oo) == -oo\n\n    assert mytd(Si(x), sin(x)/x, x)\n    assert mytd(Shi(x), sinh(x)/x, x)\n\n    assert mytn(Si(x), Si(x).rewrite(Ei),\n                -I*(-Ei(x*exp_polar(-I*pi/2))/2\n               + Ei(x*exp_polar(I*pi/2))/2 - I*pi) + pi/2, x)\n    assert mytn(Si(x), Si(x).rewrite(expint),\n                -I*(-expint(1, x*exp_polar(-I*pi/2))/2 +\n                    expint(1, x*exp_polar(I*pi/2))/2) + pi/2, x)\n    assert mytn(Shi(x), Shi(x).rewrite(Ei),\n                Ei(x)/2 - Ei(x*exp_polar(I*pi))/2 + I*pi/2, x)\n    assert mytn(Shi(x), Shi(x).rewrite(expint),\n                expint(1, x)/2 - expint(1, x*exp_polar(I*pi))/2 - I*pi/2, x)\n\n    assert tn_arg(Si)\n    assert tn_arg(Shi)\n\n    assert Si(x).nseries(x, n=8) == \\\n        x - x**3/18 + x**5/600 - x**7/35280 + O(x**9)\n    assert Shi(x).nseries(x, n=8) == \\\n        x + x**3/18 + x**5/600 + x**7/35280 + O(x**9)\n    assert Si(sin(x)).nseries(x, n=5) == x - 2*x**3/9 + 17*x**5/450 + O(x**6)\n    assert Si(x).nseries(x, 1, n=3) == \\\n        Si(1) + (x - 1)*sin(1) + (x - 1)**2*(-sin(1)/2 + cos(1)/2) + O((x - 1)**3, (x, 1))\n\n    t = Symbol('t', Dummy=True)\n    assert Si(x).rewrite(sinc) == Integral(sinc(t), (t, 0, x))\n\n\ndef test_ci():\n    m1 = exp_polar(I*pi)\n    m1_ = exp_polar(-I*pi)\n    pI = exp_polar(I*pi/2)\n    mI = exp_polar(-I*pi/2)\n\n    assert Ci(m1*x) == Ci(x) + I*pi\n    assert Ci(m1_*x) == Ci(x) - I*pi\n    assert Ci(pI*x) == Chi(x) + I*pi/2\n    assert Ci(mI*x) == Chi(x) - I*pi/2\n    assert Chi(m1*x) == Chi(x) + I*pi\n    assert Chi(m1_*x) == Chi(x) - I*pi\n    assert Chi(pI*x) == Ci(x) + I*pi/2\n    assert Chi(mI*x) == Ci(x) - I*pi/2\n    assert Ci(exp_polar(2*I*pi)*x) == Ci(x) + 2*I*pi\n    assert Chi(exp_polar(-2*I*pi)*x) == Chi(x) - 2*I*pi\n    assert Chi(exp_polar(2*I*pi)*x) == Chi(x) + 2*I*pi\n    assert Ci(exp_polar(-2*I*pi)*x) == Ci(x) - 2*I*pi\n\n    assert Ci(oo) == 0\n    assert Ci(-oo) == I*pi\n    assert Chi(oo) == oo\n    assert Chi(-oo) == oo\n\n    assert mytd(Ci(x), cos(x)/x, x)\n    assert mytd(Chi(x), cosh(x)/x, x)\n\n    assert mytn(Ci(x), Ci(x).rewrite(Ei),\n                Ei(x*exp_polar(-I*pi/2))/2 + Ei(x*exp_polar(I*pi/2))/2, x)\n    assert mytn(Chi(x), Chi(x).rewrite(Ei),\n                Ei(x)/2 + Ei(x*exp_polar(I*pi))/2 - I*pi/2, x)\n\n    assert tn_arg(Ci)\n    assert tn_arg(Chi)\n\n    from sympy import O, EulerGamma, log, limit\n    assert Ci(x).nseries(x, n=4) == \\\n        EulerGamma + log(x) - x**2/4 + x**4/96 + O(x**5)\n    assert Chi(x).nseries(x, n=4) == \\\n        EulerGamma + log(x) + x**2/4 + x**4/96 + O(x**5)\n    assert limit(log(x) - Ci(2*x), x, 0) == -log(2) - EulerGamma\n\n\ndef test_fresnel():\n    assert fresnels(0) == 0\n    assert fresnels(oo) == S.Half\n    assert fresnels(-oo) == -S.Half\n\n    assert fresnels(z) == fresnels(z)\n    assert fresnels(-z) == -fresnels(z)\n    assert fresnels(I*z) == -I*fresnels(z)\n    assert fresnels(-I*z) == I*fresnels(z)\n\n    assert conjugate(fresnels(z)) == fresnels(conjugate(z))\n\n    assert fresnels(z).diff(z) == sin(pi*z**2/2)\n\n    assert fresnels(z).rewrite(erf) == (S.One + I)/4 * (\n        erf((S.One + I)/2*sqrt(pi)*z) - I*erf((S.One - I)/2*sqrt(pi)*z))\n\n    assert fresnels(z).rewrite(hyper) == \\\n        pi*z**3/6 * hyper([S(3)/4], [S(3)/2, S(7)/4], -pi**2*z**4/16)\n\n    assert fresnels(z).series(z, n=15) == \\\n        pi*z**3/6 - pi**3*z**7/336 + pi**5*z**11/42240 + O(z**15)\n\n    assert fresnels(w).is_real is True\n\n    assert fresnels(z).as_real_imag() == \\\n        ((fresnels(re(z) - I*re(z)*Abs(im(z))/Abs(re(z)))/2 +\n          fresnels(re(z) + I*re(z)*Abs(im(z))/Abs(re(z)))/2,\n          I*(fresnels(re(z) - I*re(z)*Abs(im(z))/Abs(re(z))) -\n          fresnels(re(z) + I*re(z)*Abs(im(z))/Abs(re(z)))) *\n          re(z)*Abs(im(z))/(2*im(z)*Abs(re(z)))))\n\n    assert fresnels(2 + 3*I).as_real_imag() == (\n        fresnels(2 + 3*I)/2 + fresnels(2 - 3*I)/2,\n        I*(fresnels(2 - 3*I) - fresnels(2 + 3*I))/2\n    )\n\n    assert expand_func(integrate(fresnels(z), z)) == \\\n        z*fresnels(z) + cos(pi*z**2/2)/pi\n\n    assert fresnels(z).rewrite(meijerg) == sqrt(2)*pi*z**(S(9)/4) * \\\n        meijerg(((), (1,)), ((S(3)/4,),\n        (S(1)/4, 0)), -pi**2*z**4/16)/(2*(-z)**(S(3)/4)*(z**2)**(S(3)/4))\n\n    assert fresnelc(0) == 0\n    assert fresnelc(oo) == S.Half\n    assert fresnelc(-oo) == -S.Half\n\n    assert fresnelc(z) == fresnelc(z)\n    assert fresnelc(-z) == -fresnelc(z)\n    assert fresnelc(I*z) == I*fresnelc(z)\n    assert fresnelc(-I*z) == -I*fresnelc(z)\n\n    assert conjugate(fresnelc(z)) == fresnelc(conjugate(z))\n\n    assert fresnelc(z).diff(z) == cos(pi*z**2/2)\n\n    assert fresnelc(z).rewrite(erf) == (S.One - I)/4 * (\n        erf((S.One + I)/2*sqrt(pi)*z) + I*erf((S.One - I)/2*sqrt(pi)*z))\n\n    assert fresnelc(z).rewrite(hyper) == \\\n        z * hyper([S.One/4], [S.One/2, S(5)/4], -pi**2*z**4/16)\n\n    assert fresnelc(z).series(z, n=15) == \\\n        z - pi**2*z**5/40 + pi**4*z**9/3456 - pi**6*z**13/599040 + O(z**15)\n\n    \n    assert fresnels(z).series(z, S.Infinity) == \\\n        (-1/(pi**2*z**3) + O(z**(-6), (z, oo)))*sin(pi*z**2/2) + \\\n        (3/(pi**3*z**5) - 1/(pi*z) + O(z**(-6), (z, oo)))*cos(pi*z**2/2) + S.Half\n    assert fresnelc(z).series(z, S.Infinity) == \\\n        (-1/(pi**2*z**3) + O(z**(-6), (z, oo)))*cos(pi*z**2/2) + \\\n        (-3/(pi**3*z**5) + 1/(pi*z) + O(z**(-6), (z, oo)))*sin(pi*z**2/2) + S.Half\n    assert fresnels(1/z).series(z) == \\\n        (-z**3/pi**2 + O(z**6))*sin(pi/(2*z**2)) + (-z/pi + 3*z**5/pi**3 + \\\n        O(z**6))*cos(pi/(2*z**2)) + S.Half\n    assert fresnelc(1/z).series(z) == \\\n        (-z**3/pi**2 + O(z**6))*cos(pi/(2*z**2)) + (z/pi - 3*z**5/pi**3 + \\\n        O(z**6))*sin(pi/(2*z**2)) + S.Half\n\n    assert fresnelc(w).is_real is True\n\n    assert fresnelc(z).as_real_imag() == \\\n        ((fresnelc(re(z) - I*re(z)*Abs(im(z))/Abs(re(z)))/2 +\n          fresnelc(re(z) + I*re(z)*Abs(im(z))/Abs(re(z)))/2,\n          I*(fresnelc(re(z) - I*re(z)*Abs(im(z))/Abs(re(z))) -\n          fresnelc(re(z) + I*re(z)*Abs(im(z))/Abs(re(z)))) *\n          re(z)*Abs(im(z))/(2*im(z)*Abs(re(z)))))\n\n    assert fresnelc(2 + 3*I).as_real_imag() == (\n        fresnelc(2 - 3*I)/2 + fresnelc(2 + 3*I)/2,\n        I*(fresnelc(2 - 3*I) - fresnelc(2 + 3*I))/2\n    )\n\n    assert expand_func(integrate(fresnelc(z), z)) == \\\n        z*fresnelc(z) - sin(pi*z**2/2)/pi\n\n    assert fresnelc(z).rewrite(meijerg) == sqrt(2)*pi*z**(S(3)/4) * \\\n        meijerg(((), (1,)), ((S(1)/4,),\n        (S(3)/4, 0)), -pi**2*z**4/16)/(2*(-z)**(S(1)/4)*(z**2)**(S(1)/4))\n\n    from sympy.utilities.randtest import verify_numerically\n\n    verify_numerically(re(fresnels(z)), fresnels(z).as_real_imag()[0], z)\n    verify_numerically(im(fresnels(z)), fresnels(z).as_real_imag()[1], z)\n    verify_numerically(fresnels(z), fresnels(z).rewrite(hyper), z)\n    verify_numerically(fresnels(z), fresnels(z).rewrite(meijerg), z)\n\n    verify_numerically(re(fresnelc(z)), fresnelc(z).as_real_imag()[0], z)\n    verify_numerically(im(fresnelc(z)), fresnelc(z).as_real_imag()[1], z)\n    verify_numerically(fresnelc(z), fresnelc(z).rewrite(hyper), z)\n    verify_numerically(fresnelc(z), fresnelc(z).rewrite(meijerg), z)\n", "comments": "  xxx    xxx    xxx    note multiply exp polar(i pi) need principal    branch  hence take x lower half plane (d 0)     issue 6510 ", "content": "from sympy import (\n    symbols, expand, expand_func, nan, oo, Float, conjugate, diff,\n    re, im, Abs, O, exp_polar, polar_lift, gruntz, limit,\n    Symbol, I, integrate, Integral, S,\n    sqrt, sin, cos, sinc, sinh, cosh, exp, log, pi, EulerGamma,\n    erf, erfc, erfi, erf2, erfinv, erfcinv, erf2inv,\n    gamma, uppergamma,\n    Ei, expint, E1, li, Li, Si, Ci, Shi, Chi,\n    fresnels, fresnelc,\n    hyper, meijerg)\n\nfrom sympy.functions.special.error_functions import _erfs, _eis\n\nfrom sympy.core.function import ArgumentIndexError\n\nfrom sympy.utilities.pytest import raises\n\nx, y, z = symbols('x,y,z')\nw = Symbol(\"w\", real=True)\nn = Symbol(\"n\", integer=True)\n\n\ndef test_erf():\n    assert erf(nan) == nan\n\n    assert erf(oo) == 1\n    assert erf(-oo) == -1\n\n    assert erf(0) == 0\n\n    assert erf(I*oo) == oo*I\n    assert erf(-I*oo) == -oo*I\n\n    assert erf(-2) == -erf(2)\n    assert erf(-x*y) == -erf(x*y)\n    assert erf(-x - y) == -erf(x + y)\n\n    assert erf(erfinv(x)) == x\n    assert erf(erfcinv(x)) == 1 - x\n    assert erf(erf2inv(0, x)) == x\n    assert erf(erf2inv(0, erf(erfcinv(1 - erf(erfinv(x)))))) == x\n\n    assert erf(I).is_real is False\n    assert erf(0).is_real is True\n\n    assert conjugate(erf(z)) == erf(conjugate(z))\n\n    assert erf(x).as_leading_term(x) == 2*x/sqrt(pi)\n    assert erf(1/x).as_leading_term(x) == erf(1/x)\n\n    assert erf(z).rewrite('uppergamma') == sqrt(z**2)*(1 - erfc(sqrt(z**2)))/z\n    assert erf(z).rewrite('erfc') == S.One - erfc(z)\n    assert erf(z).rewrite('erfi') == -I*erfi(I*z)\n    assert erf(z).rewrite('fresnels') == (1 + I)*(fresnelc(z*(1 - I)/sqrt(pi)) -\n        I*fresnels(z*(1 - I)/sqrt(pi)))\n    assert erf(z).rewrite('fresnelc') == (1 + I)*(fresnelc(z*(1 - I)/sqrt(pi)) -\n        I*fresnels(z*(1 - I)/sqrt(pi)))\n    assert erf(z).rewrite('hyper') == 2*z*hyper([S.Half], [3*S.Half], -z**2)/sqrt(pi)\n    assert erf(z).rewrite('meijerg') == z*meijerg([S.Half], [], [0], [-S.Half], z**2)/sqrt(pi)\n    assert erf(z).rewrite('expint') == sqrt(z**2)/z - z*expint(S.Half, z**2)/sqrt(S.Pi)\n\n    assert limit(exp(x)*exp(x**2)*(erf(x + 1/exp(x)) - erf(x)), x, oo) == \\\n        2/sqrt(pi)\n    assert limit((1 - erf(z))*exp(z**2)*z, z, oo) == 1/sqrt(pi)\n    assert limit((1 - erf(x))*exp(x**2)*sqrt(pi)*x, x, oo) == 1\n    assert limit(((1 - erf(x))*exp(x**2)*sqrt(pi)*x - 1)*2*x**2, x, oo) == -1\n\n    assert erf(x).as_real_imag() == \\\n        ((erf(re(x) - I*re(x)*Abs(im(x))/Abs(re(x)))/2 +\n         erf(re(x) + I*re(x)*Abs(im(x))/Abs(re(x)))/2,\n         I*(erf(re(x) - I*re(x)*Abs(im(x))/Abs(re(x))) -\n         erf(re(x) + I*re(x)*Abs(im(x))/Abs(re(x)))) *\n         re(x)*Abs(im(x))/(2*im(x)*Abs(re(x)))))\n\n    raises(ArgumentIndexError, lambda: erf(x).fdiff(2))\n\n\ndef test_erf_series():\n    assert erf(x).series(x, 0, 7) == 2*x/sqrt(pi) - \\\n        2*x**3/3/sqrt(pi) + x**5/5/sqrt(pi) + O(x**7)\n\n\ndef test_erf_evalf():\n    assert abs( erf(Float(2.0)) - 0.995322265 ) < 1E-8 # XXX\n\n\ndef test__erfs():\n    assert _erfs(z).diff(z) == -2/sqrt(S.Pi) + 2*z*_erfs(z)\n\n    assert _erfs(1/z).series(z) == \\\n        z/sqrt(pi) - z**3/(2*sqrt(pi)) + 3*z**5/(4*sqrt(pi)) + O(z**6)\n\n    assert expand(erf(z).rewrite('tractable').diff(z).rewrite('intractable')) \\\n        == erf(z).diff(z)\n    assert _erfs(z).rewrite(\"intractable\") == (-erf(z) + 1)*exp(z**2)\n\n\ndef test_erfc():\n    assert erfc(nan) == nan\n\n    assert erfc(oo) == 0\n    assert erfc(-oo) == 2\n\n    assert erfc(0) == 1\n\n    assert erfc(I*oo) == -oo*I\n    assert erfc(-I*oo) == oo*I\n\n    assert erfc(-x) == S(2) - erfc(x)\n    assert erfc(erfcinv(x)) == x\n\n    assert erfc(I).is_real is False\n    assert erfc(0).is_real is True\n\n    assert conjugate(erfc(z)) == erfc(conjugate(z))\n\n    assert erfc(x).as_leading_term(x) == S.One\n    assert erfc(1/x).as_leading_term(x) == erfc(1/x)\n\n    assert erfc(z).rewrite('erf') == 1 - erf(z)\n    assert erfc(z).rewrite('erfi') == 1 + I*erfi(I*z)\n    assert erfc(z).rewrite('fresnels') == 1 - (1 + I)*(fresnelc(z*(1 - I)/sqrt(pi)) -\n        I*fresnels(z*(1 - I)/sqrt(pi)))\n    assert erfc(z).rewrite('fresnelc') == 1 - (1 + I)*(fresnelc(z*(1 - I)/sqrt(pi)) -\n        I*fresnels(z*(1 - I)/sqrt(pi)))\n    assert erfc(z).rewrite('hyper') == 1 - 2*z*hyper([S.Half], [3*S.Half], -z**2)/sqrt(pi)\n    assert erfc(z).rewrite('meijerg') == 1 - z*meijerg([S.Half], [], [0], [-S.Half], z**2)/sqrt(pi)\n    assert erfc(z).rewrite('uppergamma') == 1 - sqrt(z**2)*(1 - erfc(sqrt(z**2)))/z\n    assert erfc(z).rewrite('expint') == S.One - sqrt(z**2)/z + z*expint(S.Half, z**2)/sqrt(S.Pi)\n    assert expand_func(erf(x) + erfc(x)) == S.One\n\n    assert erfc(x).as_real_imag() == \\\n        ((erfc(re(x) - I*re(x)*Abs(im(x))/Abs(re(x)))/2 +\n         erfc(re(x) + I*re(x)*Abs(im(x))/Abs(re(x)))/2,\n         I*(erfc(re(x) - I*re(x)*Abs(im(x))/Abs(re(x))) -\n         erfc(re(x) + I*re(x)*Abs(im(x))/Abs(re(x)))) *\n         re(x)*Abs(im(x))/(2*im(x)*Abs(re(x)))))\n\n    raises(ArgumentIndexError, lambda: erfc(x).fdiff(2))\n\n\ndef test_erfc_series():\n    assert erfc(x).series(x, 0, 7) == 1 - 2*x/sqrt(pi) + \\\n        2*x**3/3/sqrt(pi) - x**5/5/sqrt(pi) + O(x**7)\n\n\ndef test_erfc_evalf():\n    assert abs( erfc(Float(2.0)) - 0.00467773 ) < 1E-8 # XXX\n\n\ndef test_erfi():\n    assert erfi(nan) == nan\n\n    assert erfi(oo) == S.Infinity\n    assert erfi(-oo) == S.NegativeInfinity\n\n    assert erfi(0) == S.Zero\n\n    assert erfi(I*oo) == I\n    assert erfi(-I*oo) == -I\n\n    assert erfi(-x) == -erfi(x)\n\n    assert erfi(I*erfinv(x)) == I*x\n    assert erfi(I*erfcinv(x)) == I*(1 - x)\n    assert erfi(I*erf2inv(0, x)) == I*x\n\n    assert erfi(I).is_real is False\n    assert erfi(0).is_real is True\n\n    assert conjugate(erfi(z)) == erfi(conjugate(z))\n\n    assert erfi(z).rewrite('erf') == -I*erf(I*z)\n    assert erfi(z).rewrite('erfc') == I*erfc(I*z) - I\n    assert erfi(z).rewrite('fresnels') == (1 - I)*(fresnelc(z*(1 + I)/sqrt(pi)) -\n        I*fresnels(z*(1 + I)/sqrt(pi)))\n    assert erfi(z).rewrite('fresnelc') == (1 - I)*(fresnelc(z*(1 + I)/sqrt(pi)) -\n        I*fresnels(z*(1 + I)/sqrt(pi)))\n    assert erfi(z).rewrite('hyper') == 2*z*hyper([S.Half], [3*S.Half], z**2)/sqrt(pi)\n    assert erfi(z).rewrite('meijerg') == z*meijerg([S.Half], [], [0], [-S.Half], -z**2)/sqrt(pi)\n    assert erfi(z).rewrite('uppergamma') == (sqrt(-z**2)/z*(uppergamma(S.Half,\n        -z**2)/sqrt(S.Pi) - S.One))\n    assert erfi(z).rewrite('expint') == sqrt(-z**2)/z - z*expint(S.Half, -z**2)/sqrt(S.Pi)\n    assert expand_func(erfi(I*z)) == I*erf(z)\n\n    assert erfi(x).as_real_imag() == \\\n        ((erfi(re(x) - I*re(x)*Abs(im(x))/Abs(re(x)))/2 +\n         erfi(re(x) + I*re(x)*Abs(im(x))/Abs(re(x)))/2,\n         I*(erfi(re(x) - I*re(x)*Abs(im(x))/Abs(re(x))) -\n         erfi(re(x) + I*re(x)*Abs(im(x))/Abs(re(x)))) *\n         re(x)*Abs(im(x))/(2*im(x)*Abs(re(x)))))\n\n    raises(ArgumentIndexError, lambda: erfi(x).fdiff(2))\n\n\ndef test_erfi_series():\n    assert erfi(x).series(x, 0, 7) == 2*x/sqrt(pi) + \\\n        2*x**3/3/sqrt(pi) + x**5/5/sqrt(pi) + O(x**7)\n\n\ndef test_erfi_evalf():\n    assert abs( erfi(Float(2.0)) - 18.5648024145756 ) < 1E-13  # XXX\n\n\ndef test_erf2():\n\n    assert erf2(0, 0) == S.Zero\n    assert erf2(x, x) == S.Zero\n    assert erf2(nan, 0) == nan\n\n    assert erf2(-oo,  y) ==  erf(y) + 1\n    assert erf2( oo,  y) ==  erf(y) - 1\n    assert erf2(  x, oo) ==  1 - erf(x)\n    assert erf2(  x,-oo) == -1 - erf(x)\n    assert erf2(x, erf2inv(x, y)) == y\n\n    assert erf2(-x, -y) == -erf2(x,y)\n    assert erf2(-x,  y) == erf(y) + erf(x)\n    assert erf2( x, -y) == -erf(y) - erf(x)\n    assert erf2(x, y).rewrite('fresnels') == erf(y).rewrite(fresnels)-erf(x).rewrite(fresnels)\n    assert erf2(x, y).rewrite('fresnelc') == erf(y).rewrite(fresnelc)-erf(x).rewrite(fresnelc)\n    assert erf2(x, y).rewrite('hyper') == erf(y).rewrite(hyper)-erf(x).rewrite(hyper)\n    assert erf2(x, y).rewrite('meijerg') == erf(y).rewrite(meijerg)-erf(x).rewrite(meijerg)\n    assert erf2(x, y).rewrite('uppergamma') == erf(y).rewrite(uppergamma) - erf(x).rewrite(uppergamma)\n    assert erf2(x, y).rewrite('expint') == erf(y).rewrite(expint)-erf(x).rewrite(expint)\n\n    assert erf2(I, 0).is_real is False\n    assert erf2(0, 0).is_real is True\n\n    assert expand_func(erf(x) + erf2(x, y)) == erf(y)\n\n    assert conjugate(erf2(x, y)) == erf2(conjugate(x), conjugate(y))\n\n    assert erf2(x, y).rewrite('erf')  == erf(y) - erf(x)\n    assert erf2(x, y).rewrite('erfc') == erfc(x) - erfc(y)\n    assert erf2(x, y).rewrite('erfi') == I*(erfi(I*x) - erfi(I*y))\n\n    raises(ArgumentIndexError, lambda: erfi(x).fdiff(3))\n\n\ndef test_erfinv():\n    assert erfinv(0) == 0\n    assert erfinv(1) == S.Infinity\n    assert erfinv(nan) == S.NaN\n\n    assert erfinv(erf(w)) == w\n    assert erfinv(erf(-w)) == -w\n\n    assert erfinv(x).diff() == sqrt(pi)*exp(erfinv(x)**2)/2\n\n    assert erfinv(z).rewrite('erfcinv') == erfcinv(1-z)\n\n\ndef test_erfinv_evalf():\n    assert abs( erfinv(Float(0.2)) - 0.179143454621292 ) < 1E-13\n\n\ndef test_erfcinv():\n    assert erfcinv(1) == 0\n    assert erfcinv(0) == S.Infinity\n    assert erfcinv(nan) == S.NaN\n\n    assert erfcinv(x).diff() == -sqrt(pi)*exp(erfcinv(x)**2)/2\n\n    assert erfcinv(z).rewrite('erfinv') == erfinv(1-z)\n\n\ndef test_erf2inv():\n    assert erf2inv(0, 0) == S.Zero\n    assert erf2inv(0, 1) == S.Infinity\n    assert erf2inv(1, 0) == S.One\n    assert erf2inv(0, y) == erfinv(y)\n    assert erf2inv(oo,y) == erfcinv(-y)\n\n    assert erf2inv(x, y).diff(x) == exp(-x**2 + erf2inv(x, y)**2)\n    assert erf2inv(x, y).diff(y) == sqrt(pi)*exp(erf2inv(x, y)**2)/2\n\n\n# NOTE we multiply by exp_polar(I*pi) and need this to be on the principal\n# branch, hence take x in the lower half plane (d=0).\n\n\ndef mytn(expr1, expr2, expr3, x, d=0):\n    from sympy.utilities.randtest import verify_numerically, random_complex_number\n    subs = {}\n    for a in expr1.free_symbols:\n        if a != x:\n            subs[a] = random_complex_number()\n    return expr2 == expr3 and verify_numerically(expr1.subs(subs),\n                                               expr2.subs(subs), x, d=d)\n\n\ndef mytd(expr1, expr2, x):\n    from sympy.utilities.randtest import test_derivative_numerically, \\\n        random_complex_number\n    subs = {}\n    for a in expr1.free_symbols:\n        if a != x:\n            subs[a] = random_complex_number()\n    return expr1.diff(x) == expr2 and test_derivative_numerically(expr1.subs(subs), x)\n\n\ndef tn_branch(func, s=None):\n    from sympy import I, pi, exp_polar\n    from random import uniform\n\n    def fn(x):\n        if s is None:\n            return func(x)\n        return func(s, x)\n    c = uniform(1, 5)\n    expr = fn(c*exp_polar(I*pi)) - fn(c*exp_polar(-I*pi))\n    eps = 1e-15\n    expr2 = fn(-c + eps*I) - fn(-c - eps*I)\n    return abs(expr.n() - expr2.n()).n() < 1e-10\n\n\ndef test_ei():\n    assert tn_branch(Ei)\n    assert mytd(Ei(x), exp(x)/x, x)\n    assert mytn(Ei(x), Ei(x).rewrite(uppergamma),\n                -uppergamma(0, x*polar_lift(-1)) - I*pi, x)\n    assert mytn(Ei(x), Ei(x).rewrite(expint),\n                -expint(1, x*polar_lift(-1)) - I*pi, x)\n    assert Ei(x).rewrite(expint).rewrite(Ei) == Ei(x)\n    assert Ei(x*exp_polar(2*I*pi)) == Ei(x) + 2*I*pi\n    assert Ei(x*exp_polar(-2*I*pi)) == Ei(x) - 2*I*pi\n\n    assert mytn(Ei(x), Ei(x).rewrite(Shi), Chi(x) + Shi(x), x)\n    assert mytn(Ei(x*polar_lift(I)), Ei(x*polar_lift(I)).rewrite(Si),\n                Ci(x) + I*Si(x) + I*pi/2, x)\n\n    assert Ei(log(x)).rewrite(li) == li(x)\n    assert Ei(2*log(x)).rewrite(li) == li(x**2)\n\n    assert gruntz(Ei(x+exp(-x))*exp(-x)*x, x, oo) == 1\n\n    assert Ei(x).series(x) == EulerGamma + log(x) + x + x**2/4 + \\\n        x**3/18 + x**4/96 + x**5/600 + O(x**6)\n\n    assert str(Ei(cos(2)).evalf(n=10)) == '-0.6760647401'\n\ndef test_expint():\n    assert mytn(expint(x, y), expint(x, y).rewrite(uppergamma),\n                y**(x - 1)*uppergamma(1 - x, y), x)\n    assert mytd(\n        expint(x, y), -y**(x - 1)*meijerg([], [1, 1], [0, 0, 1 - x], [], y), x)\n    assert mytd(expint(x, y), -expint(x - 1, y), y)\n    assert mytn(expint(1, x), expint(1, x).rewrite(Ei),\n                -Ei(x*polar_lift(-1)) + I*pi, x)\n\n    assert expint(-4, x) == exp(-x)/x + 4*exp(-x)/x**2 + 12*exp(-x)/x**3 \\\n        + 24*exp(-x)/x**4 + 24*exp(-x)/x**5\n    assert expint(-S(3)/2, x) == \\\n        exp(-x)/x + 3*exp(-x)/(2*x**2) + 3*sqrt(pi)*erfc(sqrt(x))/(4*x**S('5/2'))\n\n    assert tn_branch(expint, 1)\n    assert tn_branch(expint, 2)\n    assert tn_branch(expint, 3)\n    assert tn_branch(expint, 1.7)\n    assert tn_branch(expint, pi)\n\n    assert expint(y, x*exp_polar(2*I*pi)) == \\\n        x**(y - 1)*(exp(2*I*pi*y) - 1)*gamma(-y + 1) + expint(y, x)\n    assert expint(y, x*exp_polar(-2*I*pi)) == \\\n        x**(y - 1)*(exp(-2*I*pi*y) - 1)*gamma(-y + 1) + expint(y, x)\n    assert expint(2, x*exp_polar(2*I*pi)) == 2*I*pi*x + expint(2, x)\n    assert expint(2, x*exp_polar(-2*I*pi)) == -2*I*pi*x + expint(2, x)\n    assert expint(1, x).rewrite(Ei).rewrite(expint) == expint(1, x)\n\n    assert mytn(E1(x), E1(x).rewrite(Shi), Shi(x) - Chi(x), x)\n    assert mytn(E1(polar_lift(I)*x), E1(polar_lift(I)*x).rewrite(Si),\n                -Ci(x) + I*Si(x) - I*pi/2, x)\n\n    assert mytn(expint(2, x), expint(2, x).rewrite(Ei).rewrite(expint),\n                -x*E1(x) + exp(-x), x)\n    assert mytn(expint(3, x), expint(3, x).rewrite(Ei).rewrite(expint),\n                x**2*E1(x)/2 + (1 - x)*exp(-x)/2, x)\n\n    assert expint(S(3)/2, z).nseries(z) == \\\n        2 + 2*z - z**2/3 + z**3/15 - z**4/84 + z**5/540 - \\\n        2*sqrt(pi)*sqrt(z) + O(z**6)\n\n    assert E1(z).series(z) == -EulerGamma - log(z) + z - \\\n        z**2/4 + z**3/18 - z**4/96 + z**5/600 + O(z**6)\n\n    assert expint(4, z).series(z) == S(1)/3 - z/2 + z**2/2 + \\\n        z**3*(log(z)/6 - S(11)/36 + EulerGamma/6) - z**4/24 + \\\n        z**5/240 + O(z**6)\n\n\ndef test__eis():\n    assert _eis(z).diff(z) == -_eis(z) + 1/z\n\n    assert _eis(1/z).series(z) == \\\n        z + z**2 + 2*z**3 + 6*z**4 + 24*z**5 + O(z**6)\n\n    assert Ei(z).rewrite('tractable') == exp(z)*_eis(z)\n    assert li(z).rewrite('tractable') == z*_eis(log(z))\n\n    assert _eis(z).rewrite('intractable') == exp(-z)*Ei(z)\n\n    assert expand(li(z).rewrite('tractable').diff(z).rewrite('intractable')) \\\n        == li(z).diff(z)\n\n    assert expand(Ei(z).rewrite('tractable').diff(z).rewrite('intractable')) \\\n        == Ei(z).diff(z)\n\n    assert _eis(z).series(z, n=3) == EulerGamma + log(z) + z*(-log(z) - \\\n        EulerGamma + 1) + z**2*(log(z)/2 - S(3)/4 + EulerGamma/2) + O(z**3*log(z))\n\n\ndef tn_arg(func):\n    def test(arg, e1, e2):\n        from random import uniform\n        v = uniform(1, 5)\n        v1 = func(arg*x).subs(x, v).n()\n        v2 = func(e1*v + e2*1e-15).n()\n        return abs(v1 - v2).n() < 1e-10\n    return test(exp_polar(I*pi/2), I, 1) and \\\n        test(exp_polar(-I*pi/2), -I, 1) and \\\n        test(exp_polar(I*pi), -1, I) and \\\n        test(exp_polar(-I*pi), -1, -I)\n\n\ndef test_li():\n    z = Symbol(\"z\")\n    zr = Symbol(\"z\", real=True)\n    zp = Symbol(\"z\", positive=True)\n    zn = Symbol(\"z\", negative=True)\n\n    assert li(0) == 0\n    assert li(1) == -oo\n    assert li(oo) == oo\n\n    assert isinstance(li(z), li)\n\n    assert diff(li(z), z) == 1/log(z)\n\n    assert conjugate(li(z)) == li(conjugate(z))\n    assert conjugate(li(-zr)) == li(-zr)\n    assert conjugate(li(-zp)) == conjugate(li(-zp))\n    assert conjugate(li(zn)) == conjugate(li(zn))\n\n    assert li(z).rewrite(Li) == Li(z) + li(2)\n    assert li(z).rewrite(Ei) == Ei(log(z))\n    assert li(z).rewrite(uppergamma) == (-log(1/log(z))/2 - log(-log(z)) +\n                                         log(log(z))/2 - expint(1, -log(z)))\n    assert li(z).rewrite(Si) == (-log(I*log(z)) - log(1/log(z))/2 +\n                                 log(log(z))/2 + Ci(I*log(z)) + Shi(log(z)))\n    assert li(z).rewrite(Ci) == (-log(I*log(z)) - log(1/log(z))/2 +\n                                 log(log(z))/2 + Ci(I*log(z)) + Shi(log(z)))\n    assert li(z).rewrite(Shi) == (-log(1/log(z))/2 + log(log(z))/2 +\n                                  Chi(log(z)) - Shi(log(z)))\n    assert li(z).rewrite(Chi) == (-log(1/log(z))/2 + log(log(z))/2 +\n                                  Chi(log(z)) - Shi(log(z)))\n    assert li(z).rewrite(hyper) ==(log(z)*hyper((1, 1), (2, 2), log(z)) -\n                                   log(1/log(z))/2 + log(log(z))/2 + EulerGamma)\n    assert li(z).rewrite(meijerg) == (-log(1/log(z))/2 - log(-log(z)) + log(log(z))/2 -\n                                      meijerg(((), (1,)), ((0, 0), ()), -log(z)))\n\n    assert gruntz(1/li(z), z, oo) == 0\n\n\ndef test_Li():\n    assert Li(2) == 0\n    assert Li(oo) == oo\n\n    assert isinstance(Li(z), Li)\n\n    assert diff(Li(z), z) == 1/log(z)\n\n    assert gruntz(1/Li(z), z, oo) == 0\n    assert Li(z).rewrite(li) == li(z) - li(2)\n\n\ndef test_si():\n    assert Si(I*x) == I*Shi(x)\n    assert Shi(I*x) == I*Si(x)\n    assert Si(-I*x) == -I*Shi(x)\n    assert Shi(-I*x) == -I*Si(x)\n    assert Si(-x) == -Si(x)\n    assert Shi(-x) == -Shi(x)\n    assert Si(exp_polar(2*pi*I)*x) == Si(x)\n    assert Si(exp_polar(-2*pi*I)*x) == Si(x)\n    assert Shi(exp_polar(2*pi*I)*x) == Shi(x)\n    assert Shi(exp_polar(-2*pi*I)*x) == Shi(x)\n\n    assert Si(oo) == pi/2\n    assert Si(-oo) == -pi/2\n    assert Shi(oo) == oo\n    assert Shi(-oo) == -oo\n\n    assert mytd(Si(x), sin(x)/x, x)\n    assert mytd(Shi(x), sinh(x)/x, x)\n\n    assert mytn(Si(x), Si(x).rewrite(Ei),\n                -I*(-Ei(x*exp_polar(-I*pi/2))/2\n               + Ei(x*exp_polar(I*pi/2))/2 - I*pi) + pi/2, x)\n    assert mytn(Si(x), Si(x).rewrite(expint),\n                -I*(-expint(1, x*exp_polar(-I*pi/2))/2 +\n                    expint(1, x*exp_polar(I*pi/2))/2) + pi/2, x)\n    assert mytn(Shi(x), Shi(x).rewrite(Ei),\n                Ei(x)/2 - Ei(x*exp_polar(I*pi))/2 + I*pi/2, x)\n    assert mytn(Shi(x), Shi(x).rewrite(expint),\n                expint(1, x)/2 - expint(1, x*exp_polar(I*pi))/2 - I*pi/2, x)\n\n    assert tn_arg(Si)\n    assert tn_arg(Shi)\n\n    assert Si(x).nseries(x, n=8) == \\\n        x - x**3/18 + x**5/600 - x**7/35280 + O(x**9)\n    assert Shi(x).nseries(x, n=8) == \\\n        x + x**3/18 + x**5/600 + x**7/35280 + O(x**9)\n    assert Si(sin(x)).nseries(x, n=5) == x - 2*x**3/9 + 17*x**5/450 + O(x**6)\n    assert Si(x).nseries(x, 1, n=3) == \\\n        Si(1) + (x - 1)*sin(1) + (x - 1)**2*(-sin(1)/2 + cos(1)/2) + O((x - 1)**3, (x, 1))\n\n    t = Symbol('t', Dummy=True)\n    assert Si(x).rewrite(sinc) == Integral(sinc(t), (t, 0, x))\n\n\ndef test_ci():\n    m1 = exp_polar(I*pi)\n    m1_ = exp_polar(-I*pi)\n    pI = exp_polar(I*pi/2)\n    mI = exp_polar(-I*pi/2)\n\n    assert Ci(m1*x) == Ci(x) + I*pi\n    assert Ci(m1_*x) == Ci(x) - I*pi\n    assert Ci(pI*x) == Chi(x) + I*pi/2\n    assert Ci(mI*x) == Chi(x) - I*pi/2\n    assert Chi(m1*x) == Chi(x) + I*pi\n    assert Chi(m1_*x) == Chi(x) - I*pi\n    assert Chi(pI*x) == Ci(x) + I*pi/2\n    assert Chi(mI*x) == Ci(x) - I*pi/2\n    assert Ci(exp_polar(2*I*pi)*x) == Ci(x) + 2*I*pi\n    assert Chi(exp_polar(-2*I*pi)*x) == Chi(x) - 2*I*pi\n    assert Chi(exp_polar(2*I*pi)*x) == Chi(x) + 2*I*pi\n    assert Ci(exp_polar(-2*I*pi)*x) == Ci(x) - 2*I*pi\n\n    assert Ci(oo) == 0\n    assert Ci(-oo) == I*pi\n    assert Chi(oo) == oo\n    assert Chi(-oo) == oo\n\n    assert mytd(Ci(x), cos(x)/x, x)\n    assert mytd(Chi(x), cosh(x)/x, x)\n\n    assert mytn(Ci(x), Ci(x).rewrite(Ei),\n                Ei(x*exp_polar(-I*pi/2))/2 + Ei(x*exp_polar(I*pi/2))/2, x)\n    assert mytn(Chi(x), Chi(x).rewrite(Ei),\n                Ei(x)/2 + Ei(x*exp_polar(I*pi))/2 - I*pi/2, x)\n\n    assert tn_arg(Ci)\n    assert tn_arg(Chi)\n\n    from sympy import O, EulerGamma, log, limit\n    assert Ci(x).nseries(x, n=4) == \\\n        EulerGamma + log(x) - x**2/4 + x**4/96 + O(x**5)\n    assert Chi(x).nseries(x, n=4) == \\\n        EulerGamma + log(x) + x**2/4 + x**4/96 + O(x**5)\n    assert limit(log(x) - Ci(2*x), x, 0) == -log(2) - EulerGamma\n\n\ndef test_fresnel():\n    assert fresnels(0) == 0\n    assert fresnels(oo) == S.Half\n    assert fresnels(-oo) == -S.Half\n\n    assert fresnels(z) == fresnels(z)\n    assert fresnels(-z) == -fresnels(z)\n    assert fresnels(I*z) == -I*fresnels(z)\n    assert fresnels(-I*z) == I*fresnels(z)\n\n    assert conjugate(fresnels(z)) == fresnels(conjugate(z))\n\n    assert fresnels(z).diff(z) == sin(pi*z**2/2)\n\n    assert fresnels(z).rewrite(erf) == (S.One + I)/4 * (\n        erf((S.One + I)/2*sqrt(pi)*z) - I*erf((S.One - I)/2*sqrt(pi)*z))\n\n    assert fresnels(z).rewrite(hyper) == \\\n        pi*z**3/6 * hyper([S(3)/4], [S(3)/2, S(7)/4], -pi**2*z**4/16)\n\n    assert fresnels(z).series(z, n=15) == \\\n        pi*z**3/6 - pi**3*z**7/336 + pi**5*z**11/42240 + O(z**15)\n\n    assert fresnels(w).is_real is True\n\n    assert fresnels(z).as_real_imag() == \\\n        ((fresnels(re(z) - I*re(z)*Abs(im(z))/Abs(re(z)))/2 +\n          fresnels(re(z) + I*re(z)*Abs(im(z))/Abs(re(z)))/2,\n          I*(fresnels(re(z) - I*re(z)*Abs(im(z))/Abs(re(z))) -\n          fresnels(re(z) + I*re(z)*Abs(im(z))/Abs(re(z)))) *\n          re(z)*Abs(im(z))/(2*im(z)*Abs(re(z)))))\n\n    assert fresnels(2 + 3*I).as_real_imag() == (\n        fresnels(2 + 3*I)/2 + fresnels(2 - 3*I)/2,\n        I*(fresnels(2 - 3*I) - fresnels(2 + 3*I))/2\n    )\n\n    assert expand_func(integrate(fresnels(z), z)) == \\\n        z*fresnels(z) + cos(pi*z**2/2)/pi\n\n    assert fresnels(z).rewrite(meijerg) == sqrt(2)*pi*z**(S(9)/4) * \\\n        meijerg(((), (1,)), ((S(3)/4,),\n        (S(1)/4, 0)), -pi**2*z**4/16)/(2*(-z)**(S(3)/4)*(z**2)**(S(3)/4))\n\n    assert fresnelc(0) == 0\n    assert fresnelc(oo) == S.Half\n    assert fresnelc(-oo) == -S.Half\n\n    assert fresnelc(z) == fresnelc(z)\n    assert fresnelc(-z) == -fresnelc(z)\n    assert fresnelc(I*z) == I*fresnelc(z)\n    assert fresnelc(-I*z) == -I*fresnelc(z)\n\n    assert conjugate(fresnelc(z)) == fresnelc(conjugate(z))\n\n    assert fresnelc(z).diff(z) == cos(pi*z**2/2)\n\n    assert fresnelc(z).rewrite(erf) == (S.One - I)/4 * (\n        erf((S.One + I)/2*sqrt(pi)*z) + I*erf((S.One - I)/2*sqrt(pi)*z))\n\n    assert fresnelc(z).rewrite(hyper) == \\\n        z * hyper([S.One/4], [S.One/2, S(5)/4], -pi**2*z**4/16)\n\n    assert fresnelc(z).series(z, n=15) == \\\n        z - pi**2*z**5/40 + pi**4*z**9/3456 - pi**6*z**13/599040 + O(z**15)\n\n    # issue 6510\n    assert fresnels(z).series(z, S.Infinity) == \\\n        (-1/(pi**2*z**3) + O(z**(-6), (z, oo)))*sin(pi*z**2/2) + \\\n        (3/(pi**3*z**5) - 1/(pi*z) + O(z**(-6), (z, oo)))*cos(pi*z**2/2) + S.Half\n    assert fresnelc(z).series(z, S.Infinity) == \\\n        (-1/(pi**2*z**3) + O(z**(-6), (z, oo)))*cos(pi*z**2/2) + \\\n        (-3/(pi**3*z**5) + 1/(pi*z) + O(z**(-6), (z, oo)))*sin(pi*z**2/2) + S.Half\n    assert fresnels(1/z).series(z) == \\\n        (-z**3/pi**2 + O(z**6))*sin(pi/(2*z**2)) + (-z/pi + 3*z**5/pi**3 + \\\n        O(z**6))*cos(pi/(2*z**2)) + S.Half\n    assert fresnelc(1/z).series(z) == \\\n        (-z**3/pi**2 + O(z**6))*cos(pi/(2*z**2)) + (z/pi - 3*z**5/pi**3 + \\\n        O(z**6))*sin(pi/(2*z**2)) + S.Half\n\n    assert fresnelc(w).is_real is True\n\n    assert fresnelc(z).as_real_imag() == \\\n        ((fresnelc(re(z) - I*re(z)*Abs(im(z))/Abs(re(z)))/2 +\n          fresnelc(re(z) + I*re(z)*Abs(im(z))/Abs(re(z)))/2,\n          I*(fresnelc(re(z) - I*re(z)*Abs(im(z))/Abs(re(z))) -\n          fresnelc(re(z) + I*re(z)*Abs(im(z))/Abs(re(z)))) *\n          re(z)*Abs(im(z))/(2*im(z)*Abs(re(z)))))\n\n    assert fresnelc(2 + 3*I).as_real_imag() == (\n        fresnelc(2 - 3*I)/2 + fresnelc(2 + 3*I)/2,\n        I*(fresnelc(2 - 3*I) - fresnelc(2 + 3*I))/2\n    )\n\n    assert expand_func(integrate(fresnelc(z), z)) == \\\n        z*fresnelc(z) - sin(pi*z**2/2)/pi\n\n    assert fresnelc(z).rewrite(meijerg) == sqrt(2)*pi*z**(S(3)/4) * \\\n        meijerg(((), (1,)), ((S(1)/4,),\n        (S(3)/4, 0)), -pi**2*z**4/16)/(2*(-z)**(S(1)/4)*(z**2)**(S(1)/4))\n\n    from sympy.utilities.randtest import verify_numerically\n\n    verify_numerically(re(fresnels(z)), fresnels(z).as_real_imag()[0], z)\n    verify_numerically(im(fresnels(z)), fresnels(z).as_real_imag()[1], z)\n    verify_numerically(fresnels(z), fresnels(z).rewrite(hyper), z)\n    verify_numerically(fresnels(z), fresnels(z).rewrite(meijerg), z)\n\n    verify_numerically(re(fresnelc(z)), fresnelc(z).as_real_imag()[0], z)\n    verify_numerically(im(fresnelc(z)), fresnelc(z).as_real_imag()[1], z)\n    verify_numerically(fresnelc(z), fresnelc(z).rewrite(hyper), z)\n    verify_numerically(fresnelc(z), fresnelc(z).rewrite(meijerg), z)\n", "description": "A computer algebra system written in pure Python", "file_name": "test_error_functions.py", "id": "9316f8e5c91a7ba4dba69b4432e6bd5d", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/functions/special/tests/test_error_functions.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}