{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    xpath_with_ns,\n    parse_iso8601,\n    float_or_none,\n    int_or_none,\n)\n\nNAMESPACE_MAP = {\n    'media': 'http://search.yahoo.com/mrss/',\n}\n\n\n\n\nRAW_MP4_URL = 'http://cdn.riptide-mtvn.com/'\n\n\nclass GameOneIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?gameone\\.de/tv/(?P<id>\\d+)'\n    _TESTS = [\n        {\n            'url': 'http://www.gameone.de/tv/288',\n            'md5': '136656b7fb4c9cb4a8e2d500651c499b',\n            'info_dict': {\n                'id': '288',\n                'ext': 'mp4',\n                'title': 'Game One - Folge 288',\n                'duration': 1238,\n                'thumbnail': 'http://s3.gameone.de/gameone/assets/video_metas/teaser_images/000/643/636/big/640x360.jpg',\n                'description': 'FIFA-Pressepokal 2014, Star Citizen, Kingdom Come: Deliverance, Project Cars, Sch\u00f6ner Trants Nerdquiz Folge 2 Runde 1',\n                'age_limit': 16,\n                'upload_date': '20140513',\n                'timestamp': 1399980122,\n            }\n        },\n        {\n            'url': 'http://gameone.de/tv/220',\n            'md5': '5227ca74c4ae6b5f74c0510a7c48839e',\n            'info_dict': {\n                'id': '220',\n                'ext': 'mp4',\n                'upload_date': '20120918',\n                'description': 'Jet Set Radio HD, Tekken Tag Tournament 2, Source Filmmaker',\n                'timestamp': 1347971451,\n                'title': 'Game One - Folge 220',\n                'duration': 896.62,\n                'age_limit': 16,\n            }\n        }\n\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n        og_video = self._og_search_video_url(webpage, secure=False)\n        description = self._html_search_meta('description', webpage)\n        age_limit = int(\n            self._search_regex(\n                r'age=(\\d+)',\n                self._html_search_meta(\n                    'age-de-meta-label',\n                    webpage),\n                'age_limit',\n                '0'))\n        mrss_url = self._search_regex(r'mrss=([^&]+)', og_video, 'mrss')\n\n        mrss = self._download_xml(mrss_url, video_id, 'Downloading mrss')\n        title = mrss.find('.//item/title').text\n        thumbnail = mrss.find('.//item/image').get('url')\n        timestamp = parse_iso8601(mrss.find('.//pubDate').text, delimiter=' ')\n        content = mrss.find(xpath_with_ns('.//media:content', NAMESPACE_MAP))\n        content_url = content.get('url')\n\n        content = self._download_xml(\n            content_url,\n            video_id,\n            'Downloading media:content')\n        rendition_items = content.findall('.//rendition')\n        duration = float_or_none(rendition_items[0].get('duration'))\n        formats = [\n            {\n                'url': re.sub(r'.*/(r2)', RAW_MP4_URL + r'\\1', r.find('./src').text),\n                'width': int_or_none(r.get('width')),\n                'height': int_or_none(r.get('height')),\n                'tbr': int_or_none(r.get('bitrate')),\n            }\n            for r in rendition_items\n        ]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n            'description': description,\n            'age_limit': age_limit,\n            'timestamp': timestamp,\n        }\n\n\nclass GameOnePlaylistIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?gameone\\.de(?:/tv)?/?$'\n    IE_NAME = 'gameone:playlist'\n    _TEST = {\n        'url': 'http://www.gameone.de/tv',\n        'info_dict': {\n            'title': 'GameOne',\n        },\n        'playlist_mincount': 294,\n    }\n\n    def _real_extract(self, url):\n        webpage = self._download_webpage('http://www.gameone.de/tv', 'TV')\n        max_id = max(map(int, re.findall(r'<a href=\"/tv/(\\d+)\"', webpage)))\n        entries = [\n            self.url_result('http://www.gameone.de/tv/%d' %\n                            video_id, 'GameOne')\n            for video_id in range(max_id, 0, -1)]\n\n        return {\n            '_type': 'playlist',\n            'title': 'GameOne',\n            'entries': entries,\n        }\n", "comments": "# coding: utf-8\n# URL prefix to download the mp4 files directly instead of streaming via rtmp\n# Credits go to XBox-Maniac\n# http://board.jdownloader.org/showpost.php?p=185835&postcount=31\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    xpath_with_ns,\n    parse_iso8601,\n    float_or_none,\n    int_or_none,\n)\n\nNAMESPACE_MAP = {\n    'media': 'http://search.yahoo.com/mrss/',\n}\n\n# URL prefix to download the mp4 files directly instead of streaming via rtmp\n# Credits go to XBox-Maniac\n# http://board.jdownloader.org/showpost.php?p=185835&postcount=31\nRAW_MP4_URL = 'http://cdn.riptide-mtvn.com/'\n\n\nclass GameOneIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?gameone\\.de/tv/(?P<id>\\d+)'\n    _TESTS = [\n        {\n            'url': 'http://www.gameone.de/tv/288',\n            'md5': '136656b7fb4c9cb4a8e2d500651c499b',\n            'info_dict': {\n                'id': '288',\n                'ext': 'mp4',\n                'title': 'Game One - Folge 288',\n                'duration': 1238,\n                'thumbnail': 'http://s3.gameone.de/gameone/assets/video_metas/teaser_images/000/643/636/big/640x360.jpg',\n                'description': 'FIFA-Pressepokal 2014, Star Citizen, Kingdom Come: Deliverance, Project Cars, Sch\u00f6ner Trants Nerdquiz Folge 2 Runde 1',\n                'age_limit': 16,\n                'upload_date': '20140513',\n                'timestamp': 1399980122,\n            }\n        },\n        {\n            'url': 'http://gameone.de/tv/220',\n            'md5': '5227ca74c4ae6b5f74c0510a7c48839e',\n            'info_dict': {\n                'id': '220',\n                'ext': 'mp4',\n                'upload_date': '20120918',\n                'description': 'Jet Set Radio HD, Tekken Tag Tournament 2, Source Filmmaker',\n                'timestamp': 1347971451,\n                'title': 'Game One - Folge 220',\n                'duration': 896.62,\n                'age_limit': 16,\n            }\n        }\n\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n        og_video = self._og_search_video_url(webpage, secure=False)\n        description = self._html_search_meta('description', webpage)\n        age_limit = int(\n            self._search_regex(\n                r'age=(\\d+)',\n                self._html_search_meta(\n                    'age-de-meta-label',\n                    webpage),\n                'age_limit',\n                '0'))\n        mrss_url = self._search_regex(r'mrss=([^&]+)', og_video, 'mrss')\n\n        mrss = self._download_xml(mrss_url, video_id, 'Downloading mrss')\n        title = mrss.find('.//item/title').text\n        thumbnail = mrss.find('.//item/image').get('url')\n        timestamp = parse_iso8601(mrss.find('.//pubDate').text, delimiter=' ')\n        content = mrss.find(xpath_with_ns('.//media:content', NAMESPACE_MAP))\n        content_url = content.get('url')\n\n        content = self._download_xml(\n            content_url,\n            video_id,\n            'Downloading media:content')\n        rendition_items = content.findall('.//rendition')\n        duration = float_or_none(rendition_items[0].get('duration'))\n        formats = [\n            {\n                'url': re.sub(r'.*/(r2)', RAW_MP4_URL + r'\\1', r.find('./src').text),\n                'width': int_or_none(r.get('width')),\n                'height': int_or_none(r.get('height')),\n                'tbr': int_or_none(r.get('bitrate')),\n            }\n            for r in rendition_items\n        ]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n            'description': description,\n            'age_limit': age_limit,\n            'timestamp': timestamp,\n        }\n\n\nclass GameOnePlaylistIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?gameone\\.de(?:/tv)?/?$'\n    IE_NAME = 'gameone:playlist'\n    _TEST = {\n        'url': 'http://www.gameone.de/tv',\n        'info_dict': {\n            'title': 'GameOne',\n        },\n        'playlist_mincount': 294,\n    }\n\n    def _real_extract(self, url):\n        webpage = self._download_webpage('http://www.gameone.de/tv', 'TV')\n        max_id = max(map(int, re.findall(r'<a href=\"/tv/(\\d+)\"', webpage)))\n        entries = [\n            self.url_result('http://www.gameone.de/tv/%d' %\n                            video_id, 'GameOne')\n            for video_id in range(max_id, 0, -1)]\n\n        return {\n            '_type': 'playlist',\n            'title': 'GameOne',\n            'entries': entries,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "gameone.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/gameone.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}