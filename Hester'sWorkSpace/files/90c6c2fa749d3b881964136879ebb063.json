{"author": "ansible", "code": " (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport collections\n\nfrom jinja2.runtime import Undefined\n\nfrom ansible.module_utils._text import to_bytes\nfrom ansible.template import Templar\n\nSTATIC_VARS = [\n    'ansible_version',\n    'ansible_play_hosts',\n    'inventory_hostname',\n    'inventory_hostname_short',\n    'inventory_file',\n    'inventory_dir',\n    'groups',\n    'group_names',\n    'omit',\n    'playbook_dir',\n    'play_hosts',\n    'role_names',\n    'ungrouped',\n]\n\ntry:\n    from hashlib import sha1\nexcept ImportError:\n    from sha import sha as sha1\n\n__all__ = ['HostVars', 'HostVarsVars']\n\n\n Note -- this is a Mapping, not a MutableMapping\nclass HostVars(collections.Mapping):\n    ''' A special view of vars_cache that adds values from the inventory when needed. '''\n\n    def __init__(self, inventory, variable_manager, loader):\n        self._lookup = dict()\n        self._inventory = inventory\n        self._loader = loader\n        self._variable_manager = variable_manager\n        variable_manager._hostvars = self\n        self._cached_result = dict()\n\n    def set_variable_manager(self, variable_manager):\n        self._variable_manager = variable_manager\n        variable_manager._hostvars = self\n\n    def set_inventory(self, inventory):\n        self._inventory = inventory\n\n    def _find_host(self, host_name):\n         does not use inventory.hosts so it can create localhost on demand\n        return self._inventory.get_host(host_name)\n\n    def raw_get(self, host_name):\n        '''\n        Similar to __getitem__, however the returned data is not run through\n        the templating engine to expand variables in the hostvars.\n        '''\n        host = self._find_host(host_name)\n        if host is None:\n            return Undefined(name=\"hostvars['%s']\" % host_name)\n\n        return self._variable_manager.get_vars(host=host, include_hostvars=False)\n\n    def __getitem__(self, host_name):\n        data = self.raw_get(host_name)\n        if isinstance(data, Undefined):\n            return data\n        return HostVarsVars(data, loader=self._loader)\n\n    def set_host_variable(self, host, varname, value):\n        self._variable_manager.set_host_variable(host, varname, value)\n\n    def set_nonpersistent_facts(self, host, facts):\n        self._variable_manager.set_nonpersistent_facts(host, facts)\n\n    def set_host_facts(self, host, facts):\n        self._variable_manager.set_host_facts(host, facts)\n\n    def __contains__(self, host_name):\n         does not use inventory.hosts so it can create localhost on demand\n        return self._find_host(host_name) is not None\n\n    def __iter__(self):\n        for host in self._inventory.hosts:\n            yield host\n\n    def __len__(self):\n        return len(self._inventory.hosts)\n\n    def __repr__(self):\n        out = {}\n        for host in self._inventory.hosts:\n            out[host] = self.get(host)\n        return repr(out)\n\n\nclass HostVarsVars(collections.Mapping):\n\n    def __init__(self, variables, loader):\n        self._vars = variables\n        self._loader = loader\n\n    def __getitem__(self, var):\n        templar = Templar(variables=self._vars, loader=self._loader)\n        foo = templar.template(self._vars[var], fail_on_undefined=False, static_vars=STATIC_VARS)\n        return foo\n\n    def __contains__(self, var):\n        return (var in self._vars)\n\n    def __iter__(self):\n        for var in self._vars.keys():\n            yield var\n\n    def __len__(self):\n        return len(self._vars.keys())\n\n    def __repr__(self):\n        return repr(self._vars)\n", "comments": "    a special view vars cache adds values inventory needed           def   init  (self  inventory  variable manager  loader)          self  lookup   dict()         self  inventory   inventory         self  loader   loader         self  variable manager   variable manager         variable manager  hostvars   self         self  cached result   dict()      def set variable manager(self  variable manager)          self  variable manager   variable manager         variable manager  hostvars   self      def set inventory(self  inventory)          self  inventory   inventory      def  find host(self  host name)            use inventory hosts create localhost demand         return self  inventory get host(host name)      def raw get(self  host name)                      similar   getitem    however returned data run         templating engine expand variables hostvars                 (c) 2012 2014  michael dehaan  michael dehaan gmail com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish    note    mapping  mutablemapping    use inventory hosts create localhost demand    use inventory hosts create localhost demand ", "content": "# (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport collections\n\nfrom jinja2.runtime import Undefined\n\nfrom ansible.module_utils._text import to_bytes\nfrom ansible.template import Templar\n\nSTATIC_VARS = [\n    'ansible_version',\n    'ansible_play_hosts',\n    'inventory_hostname',\n    'inventory_hostname_short',\n    'inventory_file',\n    'inventory_dir',\n    'groups',\n    'group_names',\n    'omit',\n    'playbook_dir',\n    'play_hosts',\n    'role_names',\n    'ungrouped',\n]\n\ntry:\n    from hashlib import sha1\nexcept ImportError:\n    from sha import sha as sha1\n\n__all__ = ['HostVars', 'HostVarsVars']\n\n\n# Note -- this is a Mapping, not a MutableMapping\nclass HostVars(collections.Mapping):\n    ''' A special view of vars_cache that adds values from the inventory when needed. '''\n\n    def __init__(self, inventory, variable_manager, loader):\n        self._lookup = dict()\n        self._inventory = inventory\n        self._loader = loader\n        self._variable_manager = variable_manager\n        variable_manager._hostvars = self\n        self._cached_result = dict()\n\n    def set_variable_manager(self, variable_manager):\n        self._variable_manager = variable_manager\n        variable_manager._hostvars = self\n\n    def set_inventory(self, inventory):\n        self._inventory = inventory\n\n    def _find_host(self, host_name):\n        # does not use inventory.hosts so it can create localhost on demand\n        return self._inventory.get_host(host_name)\n\n    def raw_get(self, host_name):\n        '''\n        Similar to __getitem__, however the returned data is not run through\n        the templating engine to expand variables in the hostvars.\n        '''\n        host = self._find_host(host_name)\n        if host is None:\n            return Undefined(name=\"hostvars['%s']\" % host_name)\n\n        return self._variable_manager.get_vars(host=host, include_hostvars=False)\n\n    def __getitem__(self, host_name):\n        data = self.raw_get(host_name)\n        if isinstance(data, Undefined):\n            return data\n        return HostVarsVars(data, loader=self._loader)\n\n    def set_host_variable(self, host, varname, value):\n        self._variable_manager.set_host_variable(host, varname, value)\n\n    def set_nonpersistent_facts(self, host, facts):\n        self._variable_manager.set_nonpersistent_facts(host, facts)\n\n    def set_host_facts(self, host, facts):\n        self._variable_manager.set_host_facts(host, facts)\n\n    def __contains__(self, host_name):\n        # does not use inventory.hosts so it can create localhost on demand\n        return self._find_host(host_name) is not None\n\n    def __iter__(self):\n        for host in self._inventory.hosts:\n            yield host\n\n    def __len__(self):\n        return len(self._inventory.hosts)\n\n    def __repr__(self):\n        out = {}\n        for host in self._inventory.hosts:\n            out[host] = self.get(host)\n        return repr(out)\n\n\nclass HostVarsVars(collections.Mapping):\n\n    def __init__(self, variables, loader):\n        self._vars = variables\n        self._loader = loader\n\n    def __getitem__(self, var):\n        templar = Templar(variables=self._vars, loader=self._loader)\n        foo = templar.template(self._vars[var], fail_on_undefined=False, static_vars=STATIC_VARS)\n        return foo\n\n    def __contains__(self, var):\n        return (var in self._vars)\n\n    def __iter__(self):\n        for var in self._vars.keys():\n            yield var\n\n    def __len__(self):\n        return len(self._vars.keys())\n\n    def __repr__(self):\n        return repr(self._vars)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "hostvars.py", "id": "90c6c2fa749d3b881964136879ebb063", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/vars/hostvars.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}