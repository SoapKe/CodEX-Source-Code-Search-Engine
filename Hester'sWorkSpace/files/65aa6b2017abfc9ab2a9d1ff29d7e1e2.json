{"author": "pyeve", "code": "# -*- coding: utf-8 -*-\n\n\"\"\"\n    Auth-SHA1/HMAC-Roles\n    ~~~~~~~~~~~~~~~~~~~~\n\n    Securing an Eve-powered API with Basic Authentication (RFC2617) and user\n    roles.\n\n    This script assumes that user accounts are stored in an 'accounts' MongoDB\n    collection, that passwords are stored as SHA1/HMAC hashes and that user\n    roles are stored in a 'roles' array. All API resources/methods will be\n    secured unless they are made explicitly public (by fiddling with some\n    settings you can open one or more resources and/or methods to public access\n    -see docs).\n\n    Since we are using werkzeug we don't need any extra import (werkzeug being\n    one of Flask/Eve prerequisites).\n\n    Checkout Eve at https://github.com/pyeve/eve\n\n    This snippet by Nicola Iarocci can be used freely for anything you like.\n    Consider it public domain.\n\"\"\"\n\nfrom eve import Eve\nfrom eve.auth import BasicAuth\nfrom werkzeug.security import check_password_hash\n\nfrom settings_security import SETTINGS\n\n\nclass RolesAuth(BasicAuth):\n    def check_auth(self, username, password, allowed_roles, resource, method):\n        \n        accounts = app.data.driver.db['accounts']\n        lookup = {'username': username}\n        if allowed_roles:\n            \n            lookup['roles'] = {'$in': allowed_roles}\n        account = accounts.find_one(lookup)\n        return account and check_password_hash(account['password'], password)\n\n\nif __name__ == '__main__':\n    app = Eve(auth=RolesAuth, settings=SETTINGS)\n    app.run()\n", "comments": "        auth sha1 hmac roles                               securing eve powered api basic authentication (rfc2617) user     roles       this script assumes user accounts stored  accounts  mongodb     collection  passwords stored sha1 hmac hashes user     roles stored  roles  array  all api resources methods     secured unless made explicitly public (by fiddling     settings open one resources methods public access      see docs)       since using werkzeug need extra import (werkzeug     one flask eve prerequisites)       checkout eve https   github com pyeve eve      this snippet nicola iarocci used freely anything like      consider public domain             coding  utf 8        use eve db driver  additional connections resources used    retrieve user roles match   allowed roles   ", "content": "# -*- coding: utf-8 -*-\n\n\"\"\"\n    Auth-SHA1/HMAC-Roles\n    ~~~~~~~~~~~~~~~~~~~~\n\n    Securing an Eve-powered API with Basic Authentication (RFC2617) and user\n    roles.\n\n    This script assumes that user accounts are stored in an 'accounts' MongoDB\n    collection, that passwords are stored as SHA1/HMAC hashes and that user\n    roles are stored in a 'roles' array. All API resources/methods will be\n    secured unless they are made explicitly public (by fiddling with some\n    settings you can open one or more resources and/or methods to public access\n    -see docs).\n\n    Since we are using werkzeug we don't need any extra import (werkzeug being\n    one of Flask/Eve prerequisites).\n\n    Checkout Eve at https://github.com/pyeve/eve\n\n    This snippet by Nicola Iarocci can be used freely for anything you like.\n    Consider it public domain.\n\"\"\"\n\nfrom eve import Eve\nfrom eve.auth import BasicAuth\nfrom werkzeug.security import check_password_hash\n\nfrom settings_security import SETTINGS\n\n\nclass RolesAuth(BasicAuth):\n    def check_auth(self, username, password, allowed_roles, resource, method):\n        # use Eve's own db driver; no additional connections/resources are used\n        accounts = app.data.driver.db['accounts']\n        lookup = {'username': username}\n        if allowed_roles:\n            # only retrieve a user if his roles match ``allowed_roles``\n            lookup['roles'] = {'$in': allowed_roles}\n        account = accounts.find_one(lookup)\n        return account and check_password_hash(account['password'], password)\n\n\nif __name__ == '__main__':\n    app = Eve(auth=RolesAuth, settings=SETTINGS)\n    app.run()\n", "description": "REST API framework designed for human beings", "file_name": "roles.py", "id": "65aa6b2017abfc9ab2a9d1ff29d7e1e2", "language": "Python", "project_name": "eve", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/pyeve-eve/pyeve-eve-53e4bb9/examples/security/roles.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:55:13Z", "url": "https://github.com/pyeve/eve", "wiki": false}