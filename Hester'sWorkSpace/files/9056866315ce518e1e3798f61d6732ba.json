{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n Ansible module to manage PaloAltoNetworks Firewall\n (c) 2016, techbizdev <techbizdev@paloaltonetworks.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nDOCUMENTATION = '''\n---\nmodule: panos_dag\nshort_description: create a dynamic address group\ndescription:\n    - Create a dynamic address group object in the firewall used for policy rules\nauthor: \"Luigi Mori (@jtschichold), Ivan Bojer (@ivanbojer)\"\nversion_added: \"2.3\"\nrequirements:\n    - pan-python\noptions:\n    ip_address:\n        description:\n            - IP address (or hostname) of PAN-OS device\n        required: true\n    password:\n        description:\n            - password for authentication\n        required: true\n    username:\n        description:\n            - username for authentication\n        default: \"admin\"\n    dag_name:\n        description:\n            - name of the dynamic address group\n        required: true\n    dag_filter:\n        description:\n            - dynamic filter user by the dynamic address group\n        required: true\n    commit:\n        description:\n            - commit if changed\n        type: bool\n        default: 'yes'\n'''\n\nEXAMPLES = '''\n- name: dag\n  panos_dag:\n    ip_address: \"192.168.1.1\"\n    password: \"admin\"\n    dag_name: \"dag-1\"\n    dag_filter: \"'aws-tag.aws:cloudformation:logical-id.ServerInstance' and 'instanceState.running'\"\n'''\n\nRETURN = '''\n Default return values\n'''\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    import pan.xapi\n    HAS_LIB = True\nexcept ImportError:\n    HAS_LIB = False\n\n_ADDRGROUP_XPATH = \"/config/devices/entry[@name='localhost.localdomain']\" +\\\n                   \"/vsys/entry[@name='vsys1']/address-group/entry[@name='%s']\"\n\n\ndef addressgroup_exists(xapi, group_name):\n    xapi.get(_ADDRGROUP_XPATH % group_name)\n    e = xapi.element_root.find('.//entry')\n    if e is None:\n        return False\n    return True\n\n\ndef add_dag(xapi, dag_name, dag_filter):\n    if addressgroup_exists(xapi, dag_name):\n        return False\n\n     setup the non encrypted part of the monitor\n    exml = []\n\n    exml.append('<dynamic>')\n    exml.append('<filter>%s</filter>' % dag_filter)\n    exml.append('</dynamic>')\n\n    exml = ''.join(exml)\n    xapi.set(xpath=_ADDRGROUP_XPATH % dag_name, element=exml)\n\n    return True\n\n\ndef main():\n    argument_spec = dict(\n        ip_address=dict(required=True),\n        password=dict(required=True, no_log=True),\n        username=dict(default='admin'),\n        dag_name=dict(required=True),\n        dag_filter=dict(required=True),\n        commit=dict(type='bool', default=True)\n    )\n    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=False)\n    if not HAS_LIB:\n        module.fail_json(msg='pan-python is required for this module')\n\n    ip_address = module.params[\"ip_address\"]\n    password = module.params[\"password\"]\n    username = module.params['username']\n\n    xapi = pan.xapi.PanXapi(\n        hostname=ip_address,\n        api_username=username,\n        api_password=password\n    )\n\n    dag_name = module.params['dag_name']\n    dag_filter = module.params['dag_filter']\n    commit = module.params['commit']\n\n    changed = add_dag(xapi, dag_name, dag_filter)\n\n    if changed and commit:\n        xapi.commit(cmd=\"<commit></commit>\", sync=True, interval=1)\n\n    module.exit_json(changed=changed, msg=\"okey dokey\")\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  panos dag short description  create dynamic address group description        create dynamic address group object firewall used policy rules author   luigi mori ( jtschichold)  ivan bojer ( ivanbojer)  version added   2 3  requirements        pan python options      ip address          description                ip address (or hostname) pan os device         required  true     password          description                password authentication         required  true     username          description                username authentication         default   admin      dag name          description                name dynamic address group         required  true     dag filter          description                dynamic filter user dynamic address group         required  true     commit          description                commit changed         type  bool         default   yes       examples         name  dag   panos dag      ip address   192 168 1 1      password   admin      dag name   dag 1      dag filter    aws tag aws cloudformation logical id serverinstance   instancestate running        return         default return values         usr bin python        coding  utf 8           ansible module manage paloaltonetworks firewall    (c) 2016  techbizdev  techbizdev paloaltonetworks com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       default return values    setup non encrypted part monitor ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Ansible module to manage PaloAltoNetworks Firewall\n# (c) 2016, techbizdev <techbizdev@paloaltonetworks.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nDOCUMENTATION = '''\n---\nmodule: panos_dag\nshort_description: create a dynamic address group\ndescription:\n    - Create a dynamic address group object in the firewall used for policy rules\nauthor: \"Luigi Mori (@jtschichold), Ivan Bojer (@ivanbojer)\"\nversion_added: \"2.3\"\nrequirements:\n    - pan-python\noptions:\n    ip_address:\n        description:\n            - IP address (or hostname) of PAN-OS device\n        required: true\n    password:\n        description:\n            - password for authentication\n        required: true\n    username:\n        description:\n            - username for authentication\n        default: \"admin\"\n    dag_name:\n        description:\n            - name of the dynamic address group\n        required: true\n    dag_filter:\n        description:\n            - dynamic filter user by the dynamic address group\n        required: true\n    commit:\n        description:\n            - commit if changed\n        type: bool\n        default: 'yes'\n'''\n\nEXAMPLES = '''\n- name: dag\n  panos_dag:\n    ip_address: \"192.168.1.1\"\n    password: \"admin\"\n    dag_name: \"dag-1\"\n    dag_filter: \"'aws-tag.aws:cloudformation:logical-id.ServerInstance' and 'instanceState.running'\"\n'''\n\nRETURN = '''\n# Default return values\n'''\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    import pan.xapi\n    HAS_LIB = True\nexcept ImportError:\n    HAS_LIB = False\n\n_ADDRGROUP_XPATH = \"/config/devices/entry[@name='localhost.localdomain']\" +\\\n                   \"/vsys/entry[@name='vsys1']/address-group/entry[@name='%s']\"\n\n\ndef addressgroup_exists(xapi, group_name):\n    xapi.get(_ADDRGROUP_XPATH % group_name)\n    e = xapi.element_root.find('.//entry')\n    if e is None:\n        return False\n    return True\n\n\ndef add_dag(xapi, dag_name, dag_filter):\n    if addressgroup_exists(xapi, dag_name):\n        return False\n\n    # setup the non encrypted part of the monitor\n    exml = []\n\n    exml.append('<dynamic>')\n    exml.append('<filter>%s</filter>' % dag_filter)\n    exml.append('</dynamic>')\n\n    exml = ''.join(exml)\n    xapi.set(xpath=_ADDRGROUP_XPATH % dag_name, element=exml)\n\n    return True\n\n\ndef main():\n    argument_spec = dict(\n        ip_address=dict(required=True),\n        password=dict(required=True, no_log=True),\n        username=dict(default='admin'),\n        dag_name=dict(required=True),\n        dag_filter=dict(required=True),\n        commit=dict(type='bool', default=True)\n    )\n    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=False)\n    if not HAS_LIB:\n        module.fail_json(msg='pan-python is required for this module')\n\n    ip_address = module.params[\"ip_address\"]\n    password = module.params[\"password\"]\n    username = module.params['username']\n\n    xapi = pan.xapi.PanXapi(\n        hostname=ip_address,\n        api_username=username,\n        api_password=password\n    )\n\n    dag_name = module.params['dag_name']\n    dag_filter = module.params['dag_filter']\n    commit = module.params['commit']\n\n    changed = add_dag(xapi, dag_name, dag_filter)\n\n    if changed and commit:\n        xapi.commit(cmd=\"<commit></commit>\", sync=True, interval=1)\n\n    module.exit_json(changed=changed, msg=\"okey dokey\")\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "panos_dag.py", "id": "9056866315ce518e1e3798f61d6732ba", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/panos/panos_dag.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}