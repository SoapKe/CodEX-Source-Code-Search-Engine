{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestStack(object):\n\n    \n    \n    def test_end_to_end(self):\n        print('Test: Empty stack')\n        stack = Stack()\n        assert_equal(stack.peek(), None)\n        assert_equal(stack.pop(), None)\n\n        print('Test: One element')\n        top = Node(5)\n        stack = Stack(top)\n        assert_equal(stack.pop(), 5)\n        assert_equal(stack.peek(), None)\n\n        print('Test: More than one element')\n        stack = Stack()\n        stack.push(1)\n        stack.push(2)\n        stack.push(3)\n        assert_equal(stack.pop(), 3)\n        assert_equal(stack.peek(), 2)\n        assert_equal(stack.pop(), 2)\n        assert_equal(stack.peek(), 1)\n        assert_equal(stack.is_empty(), False)\n        assert_equal(stack.pop(), 1)\n        assert_equal(stack.peek(), None)\n        assert_equal(stack.is_empty(), True)\n\n        print('Success: test_end_to_end')\n\n\ndef main():\n    test = TestStack()\n    test.test_end_to_end()\n\n\nif __name__ == '__main__':\n    main()", "comments": "  todo  it would better unit tests    method addition following end end test ", "content": "from nose.tools import assert_equal\n\n\nclass TestStack(object):\n\n    # TODO: It would be better if we had unit tests for each\n    # method in addition to the following end-to-end test\n    def test_end_to_end(self):\n        print('Test: Empty stack')\n        stack = Stack()\n        assert_equal(stack.peek(), None)\n        assert_equal(stack.pop(), None)\n\n        print('Test: One element')\n        top = Node(5)\n        stack = Stack(top)\n        assert_equal(stack.pop(), 5)\n        assert_equal(stack.peek(), None)\n\n        print('Test: More than one element')\n        stack = Stack()\n        stack.push(1)\n        stack.push(2)\n        stack.push(3)\n        assert_equal(stack.pop(), 3)\n        assert_equal(stack.peek(), 2)\n        assert_equal(stack.pop(), 2)\n        assert_equal(stack.peek(), 1)\n        assert_equal(stack.is_empty(), False)\n        assert_equal(stack.pop(), 1)\n        assert_equal(stack.peek(), None)\n        assert_equal(stack.is_empty(), True)\n\n        print('Success: test_end_to_end')\n\n\ndef main():\n    test = TestStack()\n    test.test_end_to_end()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_stack.py", "id": "9efc862f5606377a1d78d000370fe1ba", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/stacks_queues/stack/test_stack.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}