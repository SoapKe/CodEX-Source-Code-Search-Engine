{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    get_element_by_attribute,\n    clean_html,\n)\n\n\nclass TechTalksIE(InfoExtractor):\n    _VALID_URL = r'https?://techtalks\\.tv/talks/(?:[^/]+/)?(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://techtalks.tv/talks/learning-topic-models-going-beyond-svd/57758/',\n        'info_dict': {\n            'id': '57758',\n            'title': 'Learning Topic Models --- Going beyond SVD',\n        },\n        'playlist': [\n            {\n                'info_dict': {\n                    'id': '57758',\n                    'ext': 'flv',\n                    'title': 'Learning Topic Models --- Going beyond SVD',\n                },\n            },\n            {\n                'info_dict': {\n                    'id': '57758-slides',\n                    'ext': 'flv',\n                    'title': 'Learning Topic Models --- Going beyond SVD',\n                },\n            },\n        ],\n        'params': {\n            \n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://techtalks.tv/talks/57758',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        talk_id = mobj.group('id')\n        webpage = self._download_webpage(url, talk_id)\n        rtmp_url = self._search_regex(\n            r'netConnectionUrl: \\'(.*?)\\'', webpage, 'rtmp url')\n        play_path = self._search_regex(\n            r'href=\\'(.*?)\\' [^>]*id=\"flowplayer_presenter\"',\n            webpage, 'presenter play path')\n        title = clean_html(get_element_by_attribute('class', 'title', webpage))\n        video_info = {\n            'id': talk_id,\n            'title': title,\n            'url': rtmp_url,\n            'play_path': play_path,\n            'ext': 'flv',\n        }\n        m_slides = re.search(r'<a class=\"slides\" href=\\'(.*?)\\'', webpage)\n        if m_slides is None:\n            return video_info\n        else:\n            return {\n                '_type': 'playlist',\n                'id': talk_id,\n                'title': title,\n                'entries': [\n                    video_info,\n                    \n                    {\n                        'id': talk_id + '-slides',\n                        'title': title,\n                        'url': rtmp_url,\n                        'play_path': m_slides.group(1),\n                        'ext': 'flv',\n                    },\n                ],\n            }\n", "comments": "# rtmp download\n# The slides video\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    get_element_by_attribute,\n    clean_html,\n)\n\n\nclass TechTalksIE(InfoExtractor):\n    _VALID_URL = r'https?://techtalks\\.tv/talks/(?:[^/]+/)?(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://techtalks.tv/talks/learning-topic-models-going-beyond-svd/57758/',\n        'info_dict': {\n            'id': '57758',\n            'title': 'Learning Topic Models --- Going beyond SVD',\n        },\n        'playlist': [\n            {\n                'info_dict': {\n                    'id': '57758',\n                    'ext': 'flv',\n                    'title': 'Learning Topic Models --- Going beyond SVD',\n                },\n            },\n            {\n                'info_dict': {\n                    'id': '57758-slides',\n                    'ext': 'flv',\n                    'title': 'Learning Topic Models --- Going beyond SVD',\n                },\n            },\n        ],\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://techtalks.tv/talks/57758',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        talk_id = mobj.group('id')\n        webpage = self._download_webpage(url, talk_id)\n        rtmp_url = self._search_regex(\n            r'netConnectionUrl: \\'(.*?)\\'', webpage, 'rtmp url')\n        play_path = self._search_regex(\n            r'href=\\'(.*?)\\' [^>]*id=\"flowplayer_presenter\"',\n            webpage, 'presenter play path')\n        title = clean_html(get_element_by_attribute('class', 'title', webpage))\n        video_info = {\n            'id': talk_id,\n            'title': title,\n            'url': rtmp_url,\n            'play_path': play_path,\n            'ext': 'flv',\n        }\n        m_slides = re.search(r'<a class=\"slides\" href=\\'(.*?)\\'', webpage)\n        if m_slides is None:\n            return video_info\n        else:\n            return {\n                '_type': 'playlist',\n                'id': talk_id,\n                'title': title,\n                'entries': [\n                    video_info,\n                    # The slides video\n                    {\n                        'id': talk_id + '-slides',\n                        'title': title,\n                        'url': rtmp_url,\n                        'play_path': m_slides.group(1),\n                        'ext': 'flv',\n                    },\n                ],\n            }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "techtalks.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/techtalks.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}