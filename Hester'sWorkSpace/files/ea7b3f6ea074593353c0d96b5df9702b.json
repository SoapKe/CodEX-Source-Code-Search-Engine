{"author": "django", "code": "from django.contrib.admin.utils import quote\nfrom django.contrib.auth.models import User\nfrom django.template.response import TemplateResponse\nfrom django.test import TestCase, override_settings\nfrom django.urls import reverse\n\nfrom .models import Action, Car, Person\n\n\n@override_settings(ROOT_URLCONF='admin_custom_urls.urls',)\nclass AdminCustomUrlsTest(TestCase):\n    \"\"\"\n    Remember that:\n    * The Action model has a CharField PK.\n    * The ModelAdmin for Action customizes the add_view URL, it's\n      '<app name>/<model name>/!add/'\n    \"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create_superuser(username='super', password='secret', email='super@example.com')\n        Action.objects.create(name='delete', description='Remove things.')\n        Action.objects.create(name='rename', description='Gives things other names.')\n        Action.objects.create(name='add', description='Add things.')\n        Action.objects.create(name='path/to/file/', description=\"An action with '/' in its name.\")\n        Action.objects.create(\n            name='path/to/html/document.html',\n            description='An action with a name similar to a HTML doc path.'\n        )\n        Action.objects.create(\n            name='javascript:alert(\\'Hello world\\');\">Click here</a>',\n            description='An action with a name suspected of being a XSS attempt'\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_basic_add_GET(self):\n        \"\"\"\n        Ensure GET on the add_view works.\n        \"\"\"\n        add_url = reverse('admin_custom_urls:admin_custom_urls_action_add')\n        self.assertTrue(add_url.endswith('/!add/'))\n        response = self.client.get(add_url)\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertEqual(response.status_code, 200)\n\n    def test_add_with_GET_args(self):\n        \"\"\"\n        Ensure GET on the add_view plus specifying a field value in the query\n        string works.\n        \"\"\"\n        response = self.client.get(reverse('admin_custom_urls:admin_custom_urls_action_add'), {'name': 'My Action'})\n        self.assertContains(response, 'value=\"My Action\"')\n\n    def test_basic_add_POST(self):\n        \"\"\"\n        Ensure POST on add_view works.\n        \"\"\"\n        post_data = {\n            '_popup': '1',\n            \"name\": 'Action added through a popup',\n            \"description\": \"Description of added action\",\n        }\n        response = self.client.post(reverse('admin_custom_urls:admin_custom_urls_action_add'), post_data)\n        self.assertContains(response, 'Action added through a popup')\n\n    def test_admin_URLs_no_clash(self):\n        \n        \n        url = reverse('admin_custom_urls:%s_action_change' % Action._meta.app_label, args=(quote('add'),))\n        response = self.client.get(url)\n        self.assertContains(response, 'Change action')\n\n        \n        # funny-looking PK (the one with a 'path/to/html/document.html' value)\n        url = reverse(\n            'admin_custom_urls:%s_action_change' % Action._meta.app_label,\n            args=(quote(\"path/to/html/document.html\"),)\n        )\n        response = self.client.get(url)\n        self.assertContains(response, 'Change action')\n        self.assertContains(response, 'value=\"path/to/html/document.html\"')\n\n    def test_post_save_add_redirect(self):\n        \"\"\"\n        ModelAdmin.response_post_save_add() controls the redirection after\n        the 'Save' button has been pressed when adding a new object.\n        \"\"\"\n        post_data = {'name': 'John Doe'}\n        self.assertEqual(Person.objects.count(), 0)\n        response = self.client.post(reverse('admin_custom_urls:admin_custom_urls_person_add'), post_data)\n        persons = Person.objects.all()\n        self.assertEqual(len(persons), 1)\n        redirect_url = reverse('admin_custom_urls:admin_custom_urls_person_history', args=[persons[0].pk])\n        self.assertRedirects(response, redirect_url)\n\n    def test_post_save_change_redirect(self):\n        \"\"\"\n        ModelAdmin.response_post_save_change() controls the redirection after\n        the 'Save' button has been pressed when editing an existing object.\n        \"\"\"\n        Person.objects.create(name='John Doe')\n        self.assertEqual(Person.objects.count(), 1)\n        person = Person.objects.all()[0]\n        post_url = reverse('admin_custom_urls:admin_custom_urls_person_change', args=[person.pk])\n        response = self.client.post(post_url, {'name': 'Jack Doe'})\n        self.assertRedirects(response, reverse('admin_custom_urls:admin_custom_urls_person_delete', args=[person.pk]))\n\n    def test_post_url_continue(self):\n        \"\"\"\n        The ModelAdmin.response_add()'s parameter `post_url_continue` controls\n        the redirection after an object has been created.\n        \"\"\"\n        post_data = {'name': 'SuperFast', '_continue': '1'}\n        self.assertEqual(Car.objects.count(), 0)\n        response = self.client.post(reverse('admin_custom_urls:admin_custom_urls_car_add'), post_data)\n        cars = Car.objects.all()\n        self.assertEqual(len(cars), 1)\n        self.assertRedirects(response, reverse('admin_custom_urls:admin_custom_urls_car_history', args=[cars[0].pk]))\n", "comments": "        remember        the action model charfield pk        the modeladmin action customizes add view url          app name   model name   add                 classmethod     def setuptestdata(cls)          cls superuser   user objects create superuser(username  super   password  secret   email  super example com )         action objects create(name  delete   description  remove things  )         action objects create(name  rename   description  gives things names  )         action objects create(name  add   description  add things  )         action objects create(name  path file    description  an action     name  )         action objects create(             name  path html document html               description  an action name similar html doc path           )         action objects create(             name  javascript alert(  hello world  )   click                 description  an action name suspected xss attempt          )      def setup(self)          self client force login(self superuser)      def test basic add get(self)                      ensure get add view works                      add url   reverse( admin custom urls admin custom urls action add )         self asserttrue(add url endswith(   add  ))         response   self client get(add url)         self assertisinstance(response  templateresponse)         self assertequal(response status code  200)      def test add get args(self)                      ensure get add view plus specifying field value query         string works                      response   self client get(reverse( admin custom urls admin custom urls action add )    name    my action  )         self assertcontains(response   value  my action  )      def test basic add post(self)                      ensure post add view works                      post data                   popup    1                name    action added popup                description    description added action                     response   self client post(reverse( admin custom urls admin custom urls action add )  post data)         self assertcontains(response   action added popup )      def test admin urls clash(self)            should get change view model instance pk  add   show           add view         url   reverse( admin custom urls  action change    action  meta app label  args (quote( add ) ))         response   self client get(url)         self assertcontains(response   change action )            should correctly get change view model instance           funny looking pk (the one  path html document html  value)         url   reverse(              admin custom urls  action change    action  meta app label              args (quote( path html document html ) )         )         response   self client get(url)         self assertcontains(response   change action )         self assertcontains(response   value  path html document html  )      def test post save add redirect(self)                      modeladmin response post save add() controls redirection          save  button pressed adding new object                      post data     name    john doe           self assertequal(person objects count()  0)         response   self client post(reverse( admin custom urls admin custom urls person add )  post data)         persons   person objects all()         self assertequal(len(persons)  1)         redirect url   reverse( admin custom urls admin custom urls person history   args  persons 0  pk )         self assertredirects(response  redirect url)      def test post save change redirect(self)                      modeladmin response post save change() controls redirection          save  button pressed editing existing object                      person objects create(name  john doe )         self assertequal(person objects count()  1)         person   person objects all() 0          post url   reverse( admin custom urls admin custom urls person change   args  person pk )         response   self client post(post url    name    jack doe  )         self assertredirects(response  reverse( admin custom urls admin custom urls person delete   args  person pk ))      def test post url continue(self)                      the modeladmin response add() parameter  post url continue  controls         redirection object created                 should get change view model instance pk  add   show    add view    should correctly get change view model instance    funny looking pk (the one  path html document html  value) ", "content": "from django.contrib.admin.utils import quote\nfrom django.contrib.auth.models import User\nfrom django.template.response import TemplateResponse\nfrom django.test import TestCase, override_settings\nfrom django.urls import reverse\n\nfrom .models import Action, Car, Person\n\n\n@override_settings(ROOT_URLCONF='admin_custom_urls.urls',)\nclass AdminCustomUrlsTest(TestCase):\n    \"\"\"\n    Remember that:\n    * The Action model has a CharField PK.\n    * The ModelAdmin for Action customizes the add_view URL, it's\n      '<app name>/<model name>/!add/'\n    \"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create_superuser(username='super', password='secret', email='super@example.com')\n        Action.objects.create(name='delete', description='Remove things.')\n        Action.objects.create(name='rename', description='Gives things other names.')\n        Action.objects.create(name='add', description='Add things.')\n        Action.objects.create(name='path/to/file/', description=\"An action with '/' in its name.\")\n        Action.objects.create(\n            name='path/to/html/document.html',\n            description='An action with a name similar to a HTML doc path.'\n        )\n        Action.objects.create(\n            name='javascript:alert(\\'Hello world\\');\">Click here</a>',\n            description='An action with a name suspected of being a XSS attempt'\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_basic_add_GET(self):\n        \"\"\"\n        Ensure GET on the add_view works.\n        \"\"\"\n        add_url = reverse('admin_custom_urls:admin_custom_urls_action_add')\n        self.assertTrue(add_url.endswith('/!add/'))\n        response = self.client.get(add_url)\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertEqual(response.status_code, 200)\n\n    def test_add_with_GET_args(self):\n        \"\"\"\n        Ensure GET on the add_view plus specifying a field value in the query\n        string works.\n        \"\"\"\n        response = self.client.get(reverse('admin_custom_urls:admin_custom_urls_action_add'), {'name': 'My Action'})\n        self.assertContains(response, 'value=\"My Action\"')\n\n    def test_basic_add_POST(self):\n        \"\"\"\n        Ensure POST on add_view works.\n        \"\"\"\n        post_data = {\n            '_popup': '1',\n            \"name\": 'Action added through a popup',\n            \"description\": \"Description of added action\",\n        }\n        response = self.client.post(reverse('admin_custom_urls:admin_custom_urls_action_add'), post_data)\n        self.assertContains(response, 'Action added through a popup')\n\n    def test_admin_URLs_no_clash(self):\n        # Should get the change_view for model instance with PK 'add', not show\n        # the add_view\n        url = reverse('admin_custom_urls:%s_action_change' % Action._meta.app_label, args=(quote('add'),))\n        response = self.client.get(url)\n        self.assertContains(response, 'Change action')\n\n        # Should correctly get the change_view for the model instance with the\n        # funny-looking PK (the one with a 'path/to/html/document.html' value)\n        url = reverse(\n            'admin_custom_urls:%s_action_change' % Action._meta.app_label,\n            args=(quote(\"path/to/html/document.html\"),)\n        )\n        response = self.client.get(url)\n        self.assertContains(response, 'Change action')\n        self.assertContains(response, 'value=\"path/to/html/document.html\"')\n\n    def test_post_save_add_redirect(self):\n        \"\"\"\n        ModelAdmin.response_post_save_add() controls the redirection after\n        the 'Save' button has been pressed when adding a new object.\n        \"\"\"\n        post_data = {'name': 'John Doe'}\n        self.assertEqual(Person.objects.count(), 0)\n        response = self.client.post(reverse('admin_custom_urls:admin_custom_urls_person_add'), post_data)\n        persons = Person.objects.all()\n        self.assertEqual(len(persons), 1)\n        redirect_url = reverse('admin_custom_urls:admin_custom_urls_person_history', args=[persons[0].pk])\n        self.assertRedirects(response, redirect_url)\n\n    def test_post_save_change_redirect(self):\n        \"\"\"\n        ModelAdmin.response_post_save_change() controls the redirection after\n        the 'Save' button has been pressed when editing an existing object.\n        \"\"\"\n        Person.objects.create(name='John Doe')\n        self.assertEqual(Person.objects.count(), 1)\n        person = Person.objects.all()[0]\n        post_url = reverse('admin_custom_urls:admin_custom_urls_person_change', args=[person.pk])\n        response = self.client.post(post_url, {'name': 'Jack Doe'})\n        self.assertRedirects(response, reverse('admin_custom_urls:admin_custom_urls_person_delete', args=[person.pk]))\n\n    def test_post_url_continue(self):\n        \"\"\"\n        The ModelAdmin.response_add()'s parameter `post_url_continue` controls\n        the redirection after an object has been created.\n        \"\"\"\n        post_data = {'name': 'SuperFast', '_continue': '1'}\n        self.assertEqual(Car.objects.count(), 0)\n        response = self.client.post(reverse('admin_custom_urls:admin_custom_urls_car_add'), post_data)\n        cars = Car.objects.all()\n        self.assertEqual(len(cars), 1)\n        self.assertRedirects(response, reverse('admin_custom_urls:admin_custom_urls_car_history', args=[cars[0].pk]))\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "ea7b3f6ea074593353c0d96b5df9702b", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/admin_custom_urls/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}