{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    ExtractorError,\n    sanitized_Request,\n)\n\n\nclass VeohIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?veoh\\.com/(?:watch|embed|iphone/\n\n    _TESTS = [{\n        'url': 'http://www.veoh.com/watch/v56314296nk7Zdmz3',\n        'md5': '620e68e6a3cff80086df3348426c9ca3',\n        'info_dict': {\n            'id': '56314296',\n            'ext': 'mp4',\n            'title': 'Straight Backs Are Stronger',\n            'uploader': 'LUMOback',\n            'description': 'At LUMOback, we believe straight backs are stronger.  The LUMOback Posture & Movement Sensor:  It gently vibrates when you slouch, inspiring improved posture and mobility.  Use the app to track your data and improve your posture over time. ',\n        },\n    }, {\n        'url': 'http://www.veoh.com/embed/v56314296nk7Zdmz3',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.veoh.com/watch/v27701988pbTc4wzN?h1=Chile+workers+cover+up+to+avoid+skin+damage',\n        'md5': '4a6ff84b87d536a6a71e6aa6c0ad07fa',\n        'info_dict': {\n            'id': '27701988',\n            'ext': 'mp4',\n            'title': 'Chile workers cover up to avoid skin damage',\n            'description': 'md5:2bd151625a60a32822873efc246ba20d',\n            'uploader': 'afp-news',\n            'duration': 123,\n        },\n        'skip': 'This video has been deleted.',\n    }, {\n        'url': 'http://www.veoh.com/watch/v69525809F6Nc4frX',\n        'md5': '4fde7b9e33577bab2f2f8f260e30e979',\n        'note': 'Embedded ooyala video',\n        'info_dict': {\n            'id': '69525809',\n            'ext': 'mp4',\n            'title': 'Doctors Alter Plan For Preteen\\'s Weight Loss Surgery',\n            'description': 'md5:f5a11c51f8fb51d2315bca0937526891',\n            'uploader': 'newsy-videos',\n        },\n        'skip': 'This video has been deleted.',\n    }, {\n        'url': 'http://www.veoh.com/watch/e152215AJxZktGS',\n        'only_matching': True,\n    }]\n\n    def _extract_formats(self, source):\n        formats = []\n        link = source.get('aowPermalink')\n        if link:\n            formats.append({\n                'url': link,\n                'ext': 'mp4',\n                'format_id': 'aow',\n            })\n        link = source.get('fullPreviewHashLowPath')\n        if link:\n            formats.append({\n                'url': link,\n                'format_id': 'low',\n            })\n        link = source.get('fullPreviewHashHighPath')\n        if link:\n            formats.append({\n                'url': link,\n                'format_id': 'high',\n            })\n        return formats\n\n    def _extract_video(self, source):\n        return {\n            'id': source.get('videoId'),\n            'title': source.get('title'),\n            'description': source.get('description'),\n            'thumbnail': source.get('highResImage') or source.get('medResImage'),\n            'uploader': source.get('username'),\n            'duration': int_or_none(source.get('length')),\n            'view_count': int_or_none(source.get('views')),\n            'age_limit': 18 if source.get('isMature') == 'true' or source.get('isSexy') == 'true' else 0,\n            'formats': self._extract_formats(source),\n        }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        if video_id.startswith('v'):\n            rsp = self._download_xml(\n                r'http://www.veoh.com/api/findByPermalink?permalink=%s' % video_id, video_id, 'Downloading video XML')\n            stat = rsp.get('stat')\n            if stat == 'ok':\n                return self._extract_video(rsp.find('./videoList/video'))\n            elif stat == 'fail':\n                raise ExtractorError(\n                    '%s said: %s' % (self.IE_NAME, rsp.find('./errorList/error').get('errorMessage')), expected=True)\n\n        webpage = self._download_webpage(url, video_id)\n        age_limit = 0\n        if 'class=\"adultwarning-container\"' in webpage:\n            self.report_age_confirmation()\n            age_limit = 18\n            request = sanitized_Request(url)\n            request.add_header('Cookie', 'confirmedAdult=true')\n            webpage = self._download_webpage(request, video_id)\n\n        m_youtube = re.search(r'http://www\\.youtube\\.com/v/(.*?)(\\&|\"|\\?)', webpage)\n        if m_youtube is not None:\n            youtube_id = m_youtube.group(1)\n            self.to_screen('%s: detected Youtube video.' % video_id)\n            return self.url_result(youtube_id, 'Youtube')\n\n        info = json.loads(\n            self._search_regex(r'videoDetailsJSON = \\'({.*?})\\';', webpage, 'info').replace('\\\\\\'', '\\''))\n\n        video = self._extract_video(info)\n        video['age_limit'] = age_limit\n\n        return video\n", "comments": "#_Watch)/(?P<id>(?:v|e|yapi-)[\\da-zA-Z]+)'\n", "content": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    ExtractorError,\n    sanitized_Request,\n)\n\n\nclass VeohIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?veoh\\.com/(?:watch|embed|iphone/#_Watch)/(?P<id>(?:v|e|yapi-)[\\da-zA-Z]+)'\n\n    _TESTS = [{\n        'url': 'http://www.veoh.com/watch/v56314296nk7Zdmz3',\n        'md5': '620e68e6a3cff80086df3348426c9ca3',\n        'info_dict': {\n            'id': '56314296',\n            'ext': 'mp4',\n            'title': 'Straight Backs Are Stronger',\n            'uploader': 'LUMOback',\n            'description': 'At LUMOback, we believe straight backs are stronger.  The LUMOback Posture & Movement Sensor:  It gently vibrates when you slouch, inspiring improved posture and mobility.  Use the app to track your data and improve your posture over time. ',\n        },\n    }, {\n        'url': 'http://www.veoh.com/embed/v56314296nk7Zdmz3',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.veoh.com/watch/v27701988pbTc4wzN?h1=Chile+workers+cover+up+to+avoid+skin+damage',\n        'md5': '4a6ff84b87d536a6a71e6aa6c0ad07fa',\n        'info_dict': {\n            'id': '27701988',\n            'ext': 'mp4',\n            'title': 'Chile workers cover up to avoid skin damage',\n            'description': 'md5:2bd151625a60a32822873efc246ba20d',\n            'uploader': 'afp-news',\n            'duration': 123,\n        },\n        'skip': 'This video has been deleted.',\n    }, {\n        'url': 'http://www.veoh.com/watch/v69525809F6Nc4frX',\n        'md5': '4fde7b9e33577bab2f2f8f260e30e979',\n        'note': 'Embedded ooyala video',\n        'info_dict': {\n            'id': '69525809',\n            'ext': 'mp4',\n            'title': 'Doctors Alter Plan For Preteen\\'s Weight Loss Surgery',\n            'description': 'md5:f5a11c51f8fb51d2315bca0937526891',\n            'uploader': 'newsy-videos',\n        },\n        'skip': 'This video has been deleted.',\n    }, {\n        'url': 'http://www.veoh.com/watch/e152215AJxZktGS',\n        'only_matching': True,\n    }]\n\n    def _extract_formats(self, source):\n        formats = []\n        link = source.get('aowPermalink')\n        if link:\n            formats.append({\n                'url': link,\n                'ext': 'mp4',\n                'format_id': 'aow',\n            })\n        link = source.get('fullPreviewHashLowPath')\n        if link:\n            formats.append({\n                'url': link,\n                'format_id': 'low',\n            })\n        link = source.get('fullPreviewHashHighPath')\n        if link:\n            formats.append({\n                'url': link,\n                'format_id': 'high',\n            })\n        return formats\n\n    def _extract_video(self, source):\n        return {\n            'id': source.get('videoId'),\n            'title': source.get('title'),\n            'description': source.get('description'),\n            'thumbnail': source.get('highResImage') or source.get('medResImage'),\n            'uploader': source.get('username'),\n            'duration': int_or_none(source.get('length')),\n            'view_count': int_or_none(source.get('views')),\n            'age_limit': 18 if source.get('isMature') == 'true' or source.get('isSexy') == 'true' else 0,\n            'formats': self._extract_formats(source),\n        }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        if video_id.startswith('v'):\n            rsp = self._download_xml(\n                r'http://www.veoh.com/api/findByPermalink?permalink=%s' % video_id, video_id, 'Downloading video XML')\n            stat = rsp.get('stat')\n            if stat == 'ok':\n                return self._extract_video(rsp.find('./videoList/video'))\n            elif stat == 'fail':\n                raise ExtractorError(\n                    '%s said: %s' % (self.IE_NAME, rsp.find('./errorList/error').get('errorMessage')), expected=True)\n\n        webpage = self._download_webpage(url, video_id)\n        age_limit = 0\n        if 'class=\"adultwarning-container\"' in webpage:\n            self.report_age_confirmation()\n            age_limit = 18\n            request = sanitized_Request(url)\n            request.add_header('Cookie', 'confirmedAdult=true')\n            webpage = self._download_webpage(request, video_id)\n\n        m_youtube = re.search(r'http://www\\.youtube\\.com/v/(.*?)(\\&|\"|\\?)', webpage)\n        if m_youtube is not None:\n            youtube_id = m_youtube.group(1)\n            self.to_screen('%s: detected Youtube video.' % video_id)\n            return self.url_result(youtube_id, 'Youtube')\n\n        info = json.loads(\n            self._search_regex(r'videoDetailsJSON = \\'({.*?})\\';', webpage, 'info').replace('\\\\\\'', '\\''))\n\n        video = self._extract_video(info)\n        video['age_limit'] = age_limit\n\n        return video\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "veoh.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/veoh.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}