{"author": "ansible", "code": "\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: profitbricks_nic\nshort_description: Create or Remove a NIC.\ndescription:\n     - This module allows you to create or restore a volume snapshot. This module has a dependency on profitbricks >= 1.0.0\nversion_added: \"2.0\"\noptions:\n  datacenter:\n    description:\n      - The datacenter in which to operate.\n    required: true\n  server:\n    description:\n      - The server name or ID.\n    required: true\n  name:\n    description:\n      - The name or ID of the NIC. This is only required on deletes, but not on create.\n    required: true\n  lan:\n    description:\n      - The LAN to place the NIC on. You can pass a LAN that doesn't exist and it will be created. Required on create.\n    required: true\n  subscription_user:\n    description:\n      - The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environment variable.\n    required: false\n  subscription_password:\n    description:\n      - THe ProfitBricks password. Overrides the PB_PASSWORD environment variable.\n    required: false\n  wait:\n    description:\n      - wait for the operation to complete before returning\n    required: false\n    default: \"yes\"\n    choices: [ \"yes\", \"no\" ]\n  wait_timeout:\n    description:\n      - how long before wait gives up, in seconds\n    default: 600\n  state:\n    description:\n      - Indicate desired state of the resource\n    required: false\n    default: 'present'\n    choices: [\"present\", \"absent\"]\n\nrequirements: [ \"profitbricks\" ]\nauthor: Matt Baldwin (baldwin@stackpointcloud.com)\n'''\n\nEXAMPLES = '''\n\n\n- profitbricks_nic:\n    datacenter: Tardis One\n    server: node002\n    lan: 2\n    wait_timeout: 500\n    state: present\n\n\n- profitbricks_nic:\n    datacenter: Tardis One\n    server: node002\n    name: 7341c2454f\n    wait_timeout: 500\n    state: absent\n\n'''\n\nimport re\nimport uuid\nimport time\n\nHAS_PB_SDK = True\ntry:\n    from profitbricks.client import ProfitBricksService, NIC\nexcept ImportError:\n    HAS_PB_SDK = False\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nuuid_match = re.compile(\n    r'[\\w]{8}-[\\w]{4}-[\\w]{4}-[\\w]{4}-[\\w]{12}', re.I)\n\n\ndef _wait_for_completion(profitbricks, promise, wait_timeout, msg):\n    if not promise:\n        return\n    wait_timeout = time.time() + wait_timeout\n    while wait_timeout > time.time():\n        time.sleep(5)\n        operation_result = profitbricks.get_request(\n            request_id=promise['requestId'],\n            status=True)\n\n        if operation_result['metadata']['status'] == \"DONE\":\n            return\n        elif operation_result['metadata']['status'] == \"FAILED\":\n            raise Exception(\n                'Request failed to complete ' + msg + ' \"' + str(\n                    promise['requestId']) + '\" to complete.')\n\n    raise Exception(\n        'Timed out waiting for async operation ' + msg + ' \"' + str(\n            promise['requestId']\n        ) + '\" to complete.')\n\n\ndef create_nic(module, profitbricks):\n    \"\"\"\n    Creates a NIC.\n\n    module : AnsibleModule object\n    profitbricks: authenticated profitbricks object.\n\n    Returns:\n        True if the nic creates, false otherwise\n    \"\"\"\n    datacenter = module.params.get('datacenter')\n    server = module.params.get('server')\n    lan = module.params.get('lan')\n    name = module.params.get('name')\n    wait = module.params.get('wait')\n    wait_timeout = module.params.get('wait_timeout')\n\n    \n    if not (uuid_match.match(datacenter)):\n        datacenter_list = profitbricks.list_datacenters()\n        for d in datacenter_list['items']:\n            dc = profitbricks.get_datacenter(d['id'])\n            if datacenter == dc['properties']['name']:\n                datacenter = d['id']\n                break\n\n    \n    if not (uuid_match.match(server)):\n        server_list = profitbricks.list_servers(datacenter)\n        for s in server_list['items']:\n            if server == s['properties']['name']:\n                server = s['id']\n                break\n    try:\n        n = NIC(\n            name=name,\n            lan=lan\n        )\n\n        nic_response = profitbricks.create_nic(datacenter, server, n)\n\n        if wait:\n            _wait_for_completion(profitbricks, nic_response,\n                                 wait_timeout, \"create_nic\")\n\n        return nic_response\n\n    except Exception as e:\n        module.fail_json(msg=\"failed to create the NIC: %s\" % str(e))\n\n\ndef delete_nic(module, profitbricks):\n    \"\"\"\n    Removes a NIC\n\n    module : AnsibleModule object\n    profitbricks: authenticated profitbricks object.\n\n    Returns:\n        True if the NIC was removed, false otherwise\n    \"\"\"\n    datacenter = module.params.get('datacenter')\n    server = module.params.get('server')\n    name = module.params.get('name')\n\n    \n    if not (uuid_match.match(datacenter)):\n        datacenter_list = profitbricks.list_datacenters()\n        for d in datacenter_list['items']:\n            dc = profitbricks.get_datacenter(d['id'])\n            if datacenter == dc['properties']['name']:\n                datacenter = d['id']\n                break\n\n    \n    server_found = False\n    if not (uuid_match.match(server)):\n        server_list = profitbricks.list_servers(datacenter)\n        for s in server_list['items']:\n            if server == s['properties']['name']:\n                server_found = True\n                server = s['id']\n                break\n\n        if not server_found:\n            return False\n\n    \n    nic_found = False\n    if not (uuid_match.match(name)):\n        nic_list = profitbricks.list_nics(datacenter, server)\n        for n in nic_list['items']:\n            if name == n['properties']['name']:\n                nic_found = True\n                name = n['id']\n                break\n\n        if not nic_found:\n            return False\n\n    try:\n        nic_response = profitbricks.delete_nic(datacenter, server, name)\n        return nic_response\n    except Exception as e:\n        module.fail_json(msg=\"failed to remove the NIC: %s\" % str(e))\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            datacenter=dict(),\n            server=dict(),\n            name=dict(default=str(uuid.uuid4()).replace('-', '')[:10]),\n            lan=dict(),\n            subscription_user=dict(),\n            subscription_password=dict(no_log=True),\n            wait=dict(type='bool', default=True),\n            wait_timeout=dict(type='int', default=600),\n            state=dict(default='present'),\n        )\n    )\n\n    if not HAS_PB_SDK:\n        module.fail_json(msg='profitbricks required for this module')\n\n    if not module.params.get('subscription_user'):\n        module.fail_json(msg='subscription_user parameter is required')\n    if not module.params.get('subscription_password'):\n        module.fail_json(msg='subscription_password parameter is required')\n    if not module.params.get('datacenter'):\n        module.fail_json(msg='datacenter parameter is required')\n    if not module.params.get('server'):\n        module.fail_json(msg='server parameter is required')\n\n    subscription_user = module.params.get('subscription_user')\n    subscription_password = module.params.get('subscription_password')\n\n    profitbricks = ProfitBricksService(\n        username=subscription_user,\n        password=subscription_password)\n\n    state = module.params.get('state')\n\n    if state == 'absent':\n        if not module.params.get('name'):\n            module.fail_json(msg='name parameter is required')\n\n        try:\n            (changed) = delete_nic(module, profitbricks)\n            module.exit_json(changed=changed)\n        except Exception as e:\n            module.fail_json(msg='failed to set nic state: %s' % str(e))\n\n    elif state == 'present':\n        if not module.params.get('lan'):\n            module.fail_json(msg='lan parameter is required')\n\n        try:\n            (nic_dict) = create_nic(module, profitbricks)\n            module.exit_json(nics=nic_dict)\n        except Exception as e:\n            module.fail_json(msg='failed to set nic state: %s' % str(e))\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        creates nic       module   ansiblemodule object     profitbricks  authenticated profitbricks object       returns          true nic creates  false otherwise             datacenter   module params get( datacenter )     server   module params get( server )     lan   module params get( lan )     name   module params get( name )     wait   module params get( wait )     wait timeout   module params get( wait timeout )        locate uuid datacenter     (uuid match match(datacenter))          datacenter list   profitbricks list datacenters()         datacenter list  items                dc   profitbricks get datacenter(d  id  )             datacenter    dc  properties    name                    datacenter    id                   break        locate uuid server     (uuid match match(server))          server list   profitbricks list servers(datacenter)         server list  items                server     properties    name                    server    id                   break     try          n   nic(             name name              lan lan         )          nic response   profitbricks create nic(datacenter  server  n)          wait               wait completion(profitbricks  nic response                                   wait timeout   create nic )          return nic response      except exception e          module fail json(msg  failed create nic      str(e))   def delete nic(module  profitbricks)              removes nic      module   ansiblemodule object     profitbricks  authenticated profitbricks object       returns          true nic removed  false otherwise                  module  profitbricks nic short description  create remove nic  description         this module allows create restore volume snapshot  this module dependency profitbricks    1 0 0 version added   2 0  options    datacenter      description          the datacenter operate      required  true   server      description          the server name id      required  true   name      description          the name id nic  this required deletes  create      required  true   lan      description          the lan place nic  you pass lan exist created  required create      required  true   subscription user      description          the profitbricks username  overrides pb subscription id environment variable      required  false   subscription password      description          the profitbricks password  overrides pb password environment variable      required  false   wait      description          wait operation complete returning     required  false     default   yes      choices     yes         wait timeout      description          long wait gives  seconds     default  600   state      description          indicate desired state resource     required  false     default   present      choices    present    absent    requirements     profitbricks    author  matt baldwin (baldwin stackpointcloud com)      examples          create nic   profitbricks nic      datacenter  tardis one     server  node002     lan  2     wait timeout  500     state  present    remove nic   profitbricks nic      datacenter  tardis one     server  node002     name  7341c2454f     wait timeout  500     state  absent          usr bin python    copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    create nic    remove nic    locate uuid datacenter    locate uuid server    locate uuid datacenter    locate uuid server    locate uuid nic ", "content": "#!/usr/bin/python\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: profitbricks_nic\nshort_description: Create or Remove a NIC.\ndescription:\n     - This module allows you to create or restore a volume snapshot. This module has a dependency on profitbricks >= 1.0.0\nversion_added: \"2.0\"\noptions:\n  datacenter:\n    description:\n      - The datacenter in which to operate.\n    required: true\n  server:\n    description:\n      - The server name or ID.\n    required: true\n  name:\n    description:\n      - The name or ID of the NIC. This is only required on deletes, but not on create.\n    required: true\n  lan:\n    description:\n      - The LAN to place the NIC on. You can pass a LAN that doesn't exist and it will be created. Required on create.\n    required: true\n  subscription_user:\n    description:\n      - The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environment variable.\n    required: false\n  subscription_password:\n    description:\n      - THe ProfitBricks password. Overrides the PB_PASSWORD environment variable.\n    required: false\n  wait:\n    description:\n      - wait for the operation to complete before returning\n    required: false\n    default: \"yes\"\n    choices: [ \"yes\", \"no\" ]\n  wait_timeout:\n    description:\n      - how long before wait gives up, in seconds\n    default: 600\n  state:\n    description:\n      - Indicate desired state of the resource\n    required: false\n    default: 'present'\n    choices: [\"present\", \"absent\"]\n\nrequirements: [ \"profitbricks\" ]\nauthor: Matt Baldwin (baldwin@stackpointcloud.com)\n'''\n\nEXAMPLES = '''\n\n# Create a NIC\n- profitbricks_nic:\n    datacenter: Tardis One\n    server: node002\n    lan: 2\n    wait_timeout: 500\n    state: present\n\n# Remove a NIC\n- profitbricks_nic:\n    datacenter: Tardis One\n    server: node002\n    name: 7341c2454f\n    wait_timeout: 500\n    state: absent\n\n'''\n\nimport re\nimport uuid\nimport time\n\nHAS_PB_SDK = True\ntry:\n    from profitbricks.client import ProfitBricksService, NIC\nexcept ImportError:\n    HAS_PB_SDK = False\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nuuid_match = re.compile(\n    r'[\\w]{8}-[\\w]{4}-[\\w]{4}-[\\w]{4}-[\\w]{12}', re.I)\n\n\ndef _wait_for_completion(profitbricks, promise, wait_timeout, msg):\n    if not promise:\n        return\n    wait_timeout = time.time() + wait_timeout\n    while wait_timeout > time.time():\n        time.sleep(5)\n        operation_result = profitbricks.get_request(\n            request_id=promise['requestId'],\n            status=True)\n\n        if operation_result['metadata']['status'] == \"DONE\":\n            return\n        elif operation_result['metadata']['status'] == \"FAILED\":\n            raise Exception(\n                'Request failed to complete ' + msg + ' \"' + str(\n                    promise['requestId']) + '\" to complete.')\n\n    raise Exception(\n        'Timed out waiting for async operation ' + msg + ' \"' + str(\n            promise['requestId']\n        ) + '\" to complete.')\n\n\ndef create_nic(module, profitbricks):\n    \"\"\"\n    Creates a NIC.\n\n    module : AnsibleModule object\n    profitbricks: authenticated profitbricks object.\n\n    Returns:\n        True if the nic creates, false otherwise\n    \"\"\"\n    datacenter = module.params.get('datacenter')\n    server = module.params.get('server')\n    lan = module.params.get('lan')\n    name = module.params.get('name')\n    wait = module.params.get('wait')\n    wait_timeout = module.params.get('wait_timeout')\n\n    # Locate UUID for Datacenter\n    if not (uuid_match.match(datacenter)):\n        datacenter_list = profitbricks.list_datacenters()\n        for d in datacenter_list['items']:\n            dc = profitbricks.get_datacenter(d['id'])\n            if datacenter == dc['properties']['name']:\n                datacenter = d['id']\n                break\n\n    # Locate UUID for Server\n    if not (uuid_match.match(server)):\n        server_list = profitbricks.list_servers(datacenter)\n        for s in server_list['items']:\n            if server == s['properties']['name']:\n                server = s['id']\n                break\n    try:\n        n = NIC(\n            name=name,\n            lan=lan\n        )\n\n        nic_response = profitbricks.create_nic(datacenter, server, n)\n\n        if wait:\n            _wait_for_completion(profitbricks, nic_response,\n                                 wait_timeout, \"create_nic\")\n\n        return nic_response\n\n    except Exception as e:\n        module.fail_json(msg=\"failed to create the NIC: %s\" % str(e))\n\n\ndef delete_nic(module, profitbricks):\n    \"\"\"\n    Removes a NIC\n\n    module : AnsibleModule object\n    profitbricks: authenticated profitbricks object.\n\n    Returns:\n        True if the NIC was removed, false otherwise\n    \"\"\"\n    datacenter = module.params.get('datacenter')\n    server = module.params.get('server')\n    name = module.params.get('name')\n\n    # Locate UUID for Datacenter\n    if not (uuid_match.match(datacenter)):\n        datacenter_list = profitbricks.list_datacenters()\n        for d in datacenter_list['items']:\n            dc = profitbricks.get_datacenter(d['id'])\n            if datacenter == dc['properties']['name']:\n                datacenter = d['id']\n                break\n\n    # Locate UUID for Server\n    server_found = False\n    if not (uuid_match.match(server)):\n        server_list = profitbricks.list_servers(datacenter)\n        for s in server_list['items']:\n            if server == s['properties']['name']:\n                server_found = True\n                server = s['id']\n                break\n\n        if not server_found:\n            return False\n\n    # Locate UUID for NIC\n    nic_found = False\n    if not (uuid_match.match(name)):\n        nic_list = profitbricks.list_nics(datacenter, server)\n        for n in nic_list['items']:\n            if name == n['properties']['name']:\n                nic_found = True\n                name = n['id']\n                break\n\n        if not nic_found:\n            return False\n\n    try:\n        nic_response = profitbricks.delete_nic(datacenter, server, name)\n        return nic_response\n    except Exception as e:\n        module.fail_json(msg=\"failed to remove the NIC: %s\" % str(e))\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            datacenter=dict(),\n            server=dict(),\n            name=dict(default=str(uuid.uuid4()).replace('-', '')[:10]),\n            lan=dict(),\n            subscription_user=dict(),\n            subscription_password=dict(no_log=True),\n            wait=dict(type='bool', default=True),\n            wait_timeout=dict(type='int', default=600),\n            state=dict(default='present'),\n        )\n    )\n\n    if not HAS_PB_SDK:\n        module.fail_json(msg='profitbricks required for this module')\n\n    if not module.params.get('subscription_user'):\n        module.fail_json(msg='subscription_user parameter is required')\n    if not module.params.get('subscription_password'):\n        module.fail_json(msg='subscription_password parameter is required')\n    if not module.params.get('datacenter'):\n        module.fail_json(msg='datacenter parameter is required')\n    if not module.params.get('server'):\n        module.fail_json(msg='server parameter is required')\n\n    subscription_user = module.params.get('subscription_user')\n    subscription_password = module.params.get('subscription_password')\n\n    profitbricks = ProfitBricksService(\n        username=subscription_user,\n        password=subscription_password)\n\n    state = module.params.get('state')\n\n    if state == 'absent':\n        if not module.params.get('name'):\n            module.fail_json(msg='name parameter is required')\n\n        try:\n            (changed) = delete_nic(module, profitbricks)\n            module.exit_json(changed=changed)\n        except Exception as e:\n            module.fail_json(msg='failed to set nic state: %s' % str(e))\n\n    elif state == 'present':\n        if not module.params.get('lan'):\n            module.fail_json(msg='lan parameter is required')\n\n        try:\n            (nic_dict) = create_nic(module, profitbricks)\n            module.exit_json(nics=nic_dict)\n        except Exception as e:\n            module.fail_json(msg='failed to set nic state: %s' % str(e))\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "profitbricks_nic.py", "id": "89f66df2ca88ccd445f1a990dbb716f8", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/profitbricks/profitbricks_nic.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}