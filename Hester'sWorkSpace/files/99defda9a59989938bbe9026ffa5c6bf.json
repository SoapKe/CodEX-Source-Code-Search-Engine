{"author": "HelloZeroNet", "code": "import sys\nimport os\nfrom Config import config\n\n\n\nclass Notify(Exception):\n    def __init__(self, message):\n        self.message = message\n\n    def __str__(self):\n        return self.message\n\n\ndef formatException(err=None, format=\"text\"):\n    import traceback\n    if type(err) == Notify:\n        return err\n    elif type(err) == tuple and err[0] is not None:  \n        exc_type, exc_obj, exc_tb = err\n        err = None\n    else:  \n        exc_type, exc_obj, exc_tb = sys.exc_info()\n\n    if not err:\n        err = exc_obj.message\n    tb = []\n    for frame in traceback.extract_tb(exc_tb):\n        path, line, function, text = frame\n        file = os.path.split(path)[1]\n        tb.append(\"%s line %s\" % (file, line))\n    if format == \"html\":\n        return \"%s: %s<br><small>%s</small>\" % (exc_type.__name__, err, \" > \".join(tb))\n    else:\n        return \"%s: %s in %s\" % (exc_type.__name__, err, \" > \".join(tb))\n\n\ndef formatStack():\n    import inspect\n    back = []\n    for stack in inspect.stack():\n        frame, path, line, function, source, index = stack\n        file = os.path.split(path)[1]\n        back.append(\"%s line %s\" % (file, line))\n    return \" > \".join(back)\n\n\n\nimport logging\nimport gevent\nimport time\n\ndef testBlock():\n    logging.debug(\"Gevent block checker started\")\n    last_time = time.time()\n    while 1:\n        time.sleep(1)\n        if time.time() - last_time > 1.1:\n            logging.debug(\"Gevent block detected: %s\" % (time.time() - last_time - 1))\n        last_time = time.time()\ngevent.spawn(testBlock)\n\n\nif __name__ == \"__main__\":\n    try:\n        print 1 / 0\n    except Exception, err:\n        print type(err).__name__\n        print \"1/0 error: %s\" % formatException(err)\n\n    def loadJson():\n        json.loads(\"Errr\")\n\n    import json\n    try:\n        loadJson()\n    except Exception, err:\n        print err\n        print \"Json load error: %s\" % formatException(err)\n\n    try:\n        raise Notify(\"nothing...\")\n    except Exception, err:\n        print \"Notify: %s\" % formatException(err)\n\n    loadJson()\n", "comments": "  non fatal exception    passed trackeback info    no trackeback info passed  get latest    test gevent eventloop blocks ", "content": "import sys\nimport os\nfrom Config import config\n\n\n# Non fatal exception\nclass Notify(Exception):\n    def __init__(self, message):\n        self.message = message\n\n    def __str__(self):\n        return self.message\n\n\ndef formatException(err=None, format=\"text\"):\n    import traceback\n    if type(err) == Notify:\n        return err\n    elif type(err) == tuple and err[0] is not None:  # Passed trackeback info\n        exc_type, exc_obj, exc_tb = err\n        err = None\n    else:  # No trackeback info passed, get latest\n        exc_type, exc_obj, exc_tb = sys.exc_info()\n\n    if not err:\n        err = exc_obj.message\n    tb = []\n    for frame in traceback.extract_tb(exc_tb):\n        path, line, function, text = frame\n        file = os.path.split(path)[1]\n        tb.append(\"%s line %s\" % (file, line))\n    if format == \"html\":\n        return \"%s: %s<br><small>%s</small>\" % (exc_type.__name__, err, \" > \".join(tb))\n    else:\n        return \"%s: %s in %s\" % (exc_type.__name__, err, \" > \".join(tb))\n\n\ndef formatStack():\n    import inspect\n    back = []\n    for stack in inspect.stack():\n        frame, path, line, function, source, index = stack\n        file = os.path.split(path)[1]\n        back.append(\"%s line %s\" % (file, line))\n    return \" > \".join(back)\n\n\n# Test if gevent eventloop blocks\nimport logging\nimport gevent\nimport time\n\ndef testBlock():\n    logging.debug(\"Gevent block checker started\")\n    last_time = time.time()\n    while 1:\n        time.sleep(1)\n        if time.time() - last_time > 1.1:\n            logging.debug(\"Gevent block detected: %s\" % (time.time() - last_time - 1))\n        last_time = time.time()\ngevent.spawn(testBlock)\n\n\nif __name__ == \"__main__\":\n    try:\n        print 1 / 0\n    except Exception, err:\n        print type(err).__name__\n        print \"1/0 error: %s\" % formatException(err)\n\n    def loadJson():\n        json.loads(\"Errr\")\n\n    import json\n    try:\n        loadJson()\n    except Exception, err:\n        print err\n        print \"Json load error: %s\" % formatException(err)\n\n    try:\n        raise Notify(\"nothing...\")\n    except Exception, err:\n        print \"Notify: %s\" % formatException(err)\n\n    loadJson()\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "Debug.py", "id": "99defda9a59989938bbe9026ffa5c6bf", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/Debug/Debug.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}