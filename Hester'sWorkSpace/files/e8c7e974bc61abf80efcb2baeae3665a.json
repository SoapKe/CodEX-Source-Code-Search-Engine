{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    int_or_none,\n    orderedSet,\n    parse_duration,\n    qualities,\n    unified_strdate,\n    xpath_text\n)\n\n\nclass EuropaIE(InfoExtractor):\n    _VALID_URL = r'https?://ec\\.europa\\.eu/avservices/(?:video/player|audio/audioDetails)\\.cfm\\?.*?\\bref=(?P<id>[A-Za-z0-9-]+)'\n    _TESTS = [{\n        'url': 'http://ec.europa.eu/avservices/video/player.cfm?ref=I107758',\n        'md5': '574f080699ddd1e19a675b0ddf010371',\n        'info_dict': {\n            'id': 'I107758',\n            'ext': 'mp4',\n            'title': 'TRADE - Wikileaks on TTIP',\n            'description': 'NEW  LIVE EC Midday press briefing of 11/08/2015',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20150811',\n            'duration': 34,\n            'view_count': int,\n            'formats': 'mincount:3',\n        }\n    }, {\n        'url': 'http://ec.europa.eu/avservices/video/player.cfm?sitelang=en&ref=I107786',\n        'only_matching': True,\n    }, {\n        'url': 'http://ec.europa.eu/avservices/audio/audioDetails.cfm?ref=I-109295&sitelang=en',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        playlist = self._download_xml(\n            'http://ec.europa.eu/avservices/video/player/playlist.cfm?ID=%s' % video_id, video_id)\n\n        def get_item(type_, preference):\n            items = {}\n            for item in playlist.findall('./info/%s/item' % type_):\n                lang, label = xpath_text(item, 'lg', default=None), xpath_text(item, 'label', default=None)\n                if lang and label:\n                    items[lang] = label.strip()\n            for p in preference:\n                if items.get(p):\n                    return items[p]\n\n        query = compat_urlparse.parse_qs(compat_urlparse.urlparse(url).query)\n        preferred_lang = query.get('sitelang', ('en', ))[0]\n\n        preferred_langs = orderedSet((preferred_lang, 'en', 'int'))\n\n        title = get_item('title', preferred_langs) or video_id\n        description = get_item('description', preferred_langs)\n        thumbnmail = xpath_text(playlist, './info/thumburl', 'thumbnail')\n        upload_date = unified_strdate(xpath_text(playlist, './info/date', 'upload date'))\n        duration = parse_duration(xpath_text(playlist, './info/duration', 'duration'))\n        view_count = int_or_none(xpath_text(playlist, './info/views', 'views'))\n\n        language_preference = qualities(preferred_langs[::-1])\n\n        formats = []\n        for file_ in playlist.findall('./files/file'):\n            video_url = xpath_text(file_, './url')\n            if not video_url:\n                continue\n            lang = xpath_text(file_, './lg')\n            formats.append({\n                'url': video_url,\n                'format_id': lang,\n                'format_note': xpath_text(file_, './lglabel'),\n                'language_preference': language_preference(lang)\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnmail,\n            'upload_date': upload_date,\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    int_or_none,\n    orderedSet,\n    parse_duration,\n    qualities,\n    unified_strdate,\n    xpath_text\n)\n\n\nclass EuropaIE(InfoExtractor):\n    _VALID_URL = r'https?://ec\\.europa\\.eu/avservices/(?:video/player|audio/audioDetails)\\.cfm\\?.*?\\bref=(?P<id>[A-Za-z0-9-]+)'\n    _TESTS = [{\n        'url': 'http://ec.europa.eu/avservices/video/player.cfm?ref=I107758',\n        'md5': '574f080699ddd1e19a675b0ddf010371',\n        'info_dict': {\n            'id': 'I107758',\n            'ext': 'mp4',\n            'title': 'TRADE - Wikileaks on TTIP',\n            'description': 'NEW  LIVE EC Midday press briefing of 11/08/2015',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20150811',\n            'duration': 34,\n            'view_count': int,\n            'formats': 'mincount:3',\n        }\n    }, {\n        'url': 'http://ec.europa.eu/avservices/video/player.cfm?sitelang=en&ref=I107786',\n        'only_matching': True,\n    }, {\n        'url': 'http://ec.europa.eu/avservices/audio/audioDetails.cfm?ref=I-109295&sitelang=en',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        playlist = self._download_xml(\n            'http://ec.europa.eu/avservices/video/player/playlist.cfm?ID=%s' % video_id, video_id)\n\n        def get_item(type_, preference):\n            items = {}\n            for item in playlist.findall('./info/%s/item' % type_):\n                lang, label = xpath_text(item, 'lg', default=None), xpath_text(item, 'label', default=None)\n                if lang and label:\n                    items[lang] = label.strip()\n            for p in preference:\n                if items.get(p):\n                    return items[p]\n\n        query = compat_urlparse.parse_qs(compat_urlparse.urlparse(url).query)\n        preferred_lang = query.get('sitelang', ('en', ))[0]\n\n        preferred_langs = orderedSet((preferred_lang, 'en', 'int'))\n\n        title = get_item('title', preferred_langs) or video_id\n        description = get_item('description', preferred_langs)\n        thumbnmail = xpath_text(playlist, './info/thumburl', 'thumbnail')\n        upload_date = unified_strdate(xpath_text(playlist, './info/date', 'upload date'))\n        duration = parse_duration(xpath_text(playlist, './info/duration', 'duration'))\n        view_count = int_or_none(xpath_text(playlist, './info/views', 'views'))\n\n        language_preference = qualities(preferred_langs[::-1])\n\n        formats = []\n        for file_ in playlist.findall('./files/file'):\n            video_url = xpath_text(file_, './url')\n            if not video_url:\n                continue\n            lang = xpath_text(file_, './lg')\n            formats.append({\n                'url': video_url,\n                'format_id': lang,\n                'format_note': xpath_text(file_, './lglabel'),\n                'language_preference': language_preference(lang)\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnmail,\n            'upload_date': upload_date,\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "europa.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/europa.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}