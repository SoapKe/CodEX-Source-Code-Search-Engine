{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom exam import fixture\n\nfrom sentry.interfaces.security import Csp, ExpectCT, ExpectStaple\nfrom sentry.testutils import TestCase\n\n\nclass CspTest(TestCase):\n    @fixture\n    def interface(self):\n        return Csp.to_python(\n            dict(\n                document_uri='http://example.com',\n                violated_directive='style-src cdn.example.com',\n                blocked_uri='http://example.com/lol.css',\n                effective_directive='style-src',\n            )\n        )\n\n    def test_path(self):\n        assert self.interface.get_path() == 'sentry.interfaces.Csp'\n\n    def test_serialize_unserialize_behavior(self):\n        result = type(self.interface).to_python(self.interface.to_json())\n        assert result.to_json() == self.interface.to_json()\n\n    def test_basic(self):\n        result = self.interface\n        assert result.document_uri == 'http://example.com'\n        assert result.violated_directive == 'style-src cdn.example.com'\n        assert result.blocked_uri == 'http://example.com/lol.css'\n\n    def test_coerce_blocked_uri_if_missing(self):\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com',\n                effective_directive='script-src',\n            )\n        )\n        assert result.blocked_uri == 'self'\n\n    def test_get_culprit(self):\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                violated_directive='style-src http://cdn.example.com',\n                effective_directive='style-src',\n            )\n        )\n        assert result.get_culprit() == 'style-src http://cdn.example.com'\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                violated_directive='style-src cdn.example.com',\n                effective_directive='style-src',\n            )\n        )\n        assert result.get_culprit() == 'style-src cdn.example.com'\n\n        result = Csp.to_python(\n            dict(\n                document_uri='https://example.com/foo',\n                violated_directive='style-src cdn.example.com',\n                effective_directive='style-src',\n            )\n        )\n        assert result.get_culprit() == 'style-src cdn.example.com'\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                violated_directive='style-src https://cdn.example.com',\n                effective_directive='style-src',\n            )\n        )\n        assert result.get_culprit() == 'style-src https://cdn.example.com'\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                violated_directive='style-src http://example.com',\n                effective_directive='style-src',\n            )\n        )\n        assert result.get_culprit() == \"style-src 'self'\"\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                violated_directive='style-src http://example2.com example.com',\n                effective_directive='style-src',\n            )\n        )\n        assert result.get_culprit() == \"style-src http://example2.com 'self'\"\n\n    def test_get_hash(self):\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='script-src',\n                blocked_uri='',\n            )\n        )\n        assert result.get_hash() == ['script-src', \"'self'\"]\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='script-src',\n                blocked_uri='self',\n            )\n        )\n        assert result.get_hash() == ['script-src', \"'self'\"]\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='script-src',\n                blocked_uri='http://example.com/lol.js',\n            )\n        )\n        assert result.get_hash() == ['script-src', 'example.com']\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='img-src',\n                blocked_uri='data:foo',\n            )\n        )\n        assert result.get_hash() == ['img-src', 'data:']\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='img-src',\n                blocked_uri='ftp://example.com/foo',\n            )\n        )\n        assert result.get_hash() == ['img-src', 'ftp://example.com']\n\n    def test_get_tags(self):\n        assert self.interface.get_tags() == [\n            ('effective-directive', 'style-src'), ('blocked-uri', 'http://example.com/lol.css'),\n        ]\n\n    def test_get_tags_stripe(self):\n        result = Csp.to_python(\n            dict(\n                blocked_uri='https://api.stripe.com/v1/tokens?card[number]=xxx',\n                effective_directive='script-src',\n            )\n        )\n        assert result.get_tags() == [\n            ('effective-directive', 'script-src'),\n            ('blocked-uri', 'https://api.stripe.com/v1/tokens'),\n        ]\n\n    def test_get_message(self):\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='img-src',\n                blocked_uri='http://google.com/foo',\n            )\n        )\n        assert result.get_message() == \"Blocked 'image' from 'google.com'\"\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='style-src',\n                blocked_uri='',\n            )\n        )\n        assert result.get_message() == \"Blocked inline 'style'\"\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='script-src',\n                blocked_uri='',\n                violated_directive=\"script-src 'unsafe-inline'\",\n            )\n        )\n        assert result.get_message() == \"Blocked unsafe inline 'script'\"\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='script-src',\n                blocked_uri='',\n                violated_directive=\"script-src 'unsafe-eval'\",\n            )\n        )\n        assert result.get_message() == \"Blocked unsafe eval() 'script'\"\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='script-src',\n                blocked_uri='',\n                violated_directive=\"script-src example.com\",\n            )\n        )\n        assert result.get_message() == \"Blocked unsafe (eval() or inline) 'script'\"\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='script-src',\n                blocked_uri='data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D',\n            )\n        )\n        assert result.get_message() == \"Blocked 'script' from 'data:'\"\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='script-src',\n                blocked_uri='data',\n            )\n        )\n        assert result.get_message() == \"Blocked 'script' from 'data:'\"\n\n    def test_real_report(self):\n        raw_report = {\n            \"csp-report\": {\n                \"document-uri\": \"https://sentry.io/sentry/csp/issues/88513416/\",\n                \"referrer\": \"https://sentry.io/sentry/sentry/releases/7329107476ff14cfa19cf013acd8ce47781bb93a/\",\n                \"violated-directive\": \"script-src\",\n                \"effective-directive\": \"script-src\",\n                \"original-policy\": \"default-src *; script-src 'self' 'unsafe-eval' 'unsafe-inline' e90d271df3e973c7.global.ssl.fastly.net cdn.ravenjs.com assets.zendesk.com ajax.googleapis.com ssl.google-analytics.com www.googleadservices.com analytics.twitter.com platform.twitter.com *.pingdom.net js.stripe.com api.stripe.com statuspage-production.s3.amazonaws.com s3.amazonaws.com *.google.com www.gstatic.com aui-cdn.atlassian.com www.hipchat.com *.atlassian.net *.jira.com *.zopim.com; font-src * data:; connect-src * wss://*.zopim.com; style-src 'self' 'unsafe-inline' e90d271df3e973c7.global.ssl.fastly.net s3.amazonaws.com aui-cdn.atlassian.com www.hipchat.com fonts.googleapis.com; img-src * data: blob:; report-uri https://sentry.io/api/54785/csp-report/?sentry_key=f724a8a027db45f5b21507e7142ff78e&sentry_release=39662eb9734f68e56b7f202260bb706be2f4cee7\",\n                \"disposition\": \"enforce\",\n                \"blocked-uri\": \"http://baddomain.com/test.js?_=1515535030116\",\n                \"line-number\": 24,\n                \"column-number\": 66270,\n                \"source-file\": \"https://e90d271df3e973c7.global.ssl.fastly.net/_static/f0c7c026a4b2a3d2b287ae2d012c9924/sentry/dist/vendor.js\",\n                \"status-code\": 0,\n                \"script-sample\": \"\"\n            }\n        }\n        interface = Csp.from_raw(raw_report)\n        assert interface.effective_directive == 'script-src'\n\n\nclass ExpectCTTest(TestCase):\n\n    raw_report = {\n        \"expect-ct-report\": {\n            \"date-time\": \"2014-04-06T13:00:50Z\",\n            \"hostname\": \"www.example.com\",\n            \"port\": 443,\n            \"effective-expiration-date\": \"2014-05-01T12:40:50Z\",\n            \"served-certificate-chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n            \"validated-certificate-chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n            \"scts\": [\n                {\n                    \"version\": 1,\n                    \"status\": \"invalid\",\n                    \"source\": \"embedded\",\n                    \"serialized_sct\": \"ABCD==\"\n                },\n            ],\n        }\n    }\n    interface_json = {\n        'date_time': '2014-04-06T13:00:50Z',\n        'hostname': 'www.example.com',\n        'port': 443,\n        'effective_expiration_date': '2014-05-01T12:40:50Z',\n        'served_certificate_chain': ['-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----'],\n        'validated_certificate_chain': ['-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----'],\n        'scts': [{\n            'status': 'invalid',\n            'source': 'embedded',\n            'serialized_sct': 'ABCD==',\n            'version': 1\n        }]\n    }\n\n    def test_from_raw(self):\n        interface = ExpectCT.from_raw(self.raw_report)\n        assert interface.hostname == 'www.example.com'\n        assert interface.date_time == '2014-04-06T13:00:50Z'\n        assert interface.port == 443\n        assert len(interface.served_certificate_chain) == 1\n\n    def test_to_python(self):\n        interface = ExpectCT.to_python(self.interface_json)\n        assert interface.hostname == 'www.example.com'\n        assert interface.date_time == '2014-04-06T13:00:50Z'\n        assert interface.port == 443\n        assert len(interface.served_certificate_chain) == 1\n\n    def test_serialize_unserialize_behavior(self):\n        assert ExpectCT.to_python(self.interface_json).to_json() == self.interface_json\n\n    def test_invalid_format(self):\n        interface = ExpectCT.to_python({\n            'hostname': 'www.example.com',\n            'date_time': 'Not an RFC3339 datetime'\n        })\n        \n        assert interface.to_json() == {'hostname': 'www.example.com'}\n\n\nclass ExpectStapleTest(TestCase):\n\n    raw_report = {\n        \"expect-staple-report\": {\n            \"date-time\": \"2014-04-06T13:00:50Z\",\n            \"hostname\": \"www.example.com\",\n            \"port\": 443,\n            \"response-status\": \"ERROR_RESPONSE\",\n            \"cert-status\": \"REVOKED\",\n            \"effective-expiration-date\": \"2014-05-01T12:40:50Z\",\n            \"served-certificate-chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n            \"validated-certificate-chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n        }\n    }\n    interface_json = {\n        \"date_time\": \"2014-04-06T13:00:50Z\",\n        \"hostname\": \"www.example.com\",\n        \"port\": 443,\n        \"response_status\": \"ERROR_RESPONSE\",\n        \"cert_status\": \"REVOKED\",\n        \"effective_expiration_date\": \"2014-05-01T12:40:50Z\",\n        \"served_certificate_chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n        \"validated_certificate_chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n    }\n\n    def test_from_raw(self):\n        interface = ExpectStaple.from_raw(self.raw_report)\n        assert interface.hostname == 'www.example.com'\n        assert interface.date_time == '2014-04-06T13:00:50Z'\n        assert interface.port == 443\n        assert len(interface.served_certificate_chain) == 1\n\n    def test_to_python(self):\n        interface = ExpectStaple.to_python(self.interface_json)\n        assert interface.hostname == 'www.example.com'\n        assert interface.date_time == '2014-04-06T13:00:50Z'\n        assert interface.port == 443\n        assert len(interface.served_certificate_chain) == 1\n\n    def test_serialize_unserialize_behavior(self):\n        assert ExpectStaple.to_python(self.interface_json).to_json() == self.interface_json\n", "comments": "      coding  utf 8        invalid keys removed ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom exam import fixture\n\nfrom sentry.interfaces.security import Csp, ExpectCT, ExpectStaple\nfrom sentry.testutils import TestCase\n\n\nclass CspTest(TestCase):\n    @fixture\n    def interface(self):\n        return Csp.to_python(\n            dict(\n                document_uri='http://example.com',\n                violated_directive='style-src cdn.example.com',\n                blocked_uri='http://example.com/lol.css',\n                effective_directive='style-src',\n            )\n        )\n\n    def test_path(self):\n        assert self.interface.get_path() == 'sentry.interfaces.Csp'\n\n    def test_serialize_unserialize_behavior(self):\n        result = type(self.interface).to_python(self.interface.to_json())\n        assert result.to_json() == self.interface.to_json()\n\n    def test_basic(self):\n        result = self.interface\n        assert result.document_uri == 'http://example.com'\n        assert result.violated_directive == 'style-src cdn.example.com'\n        assert result.blocked_uri == 'http://example.com/lol.css'\n\n    def test_coerce_blocked_uri_if_missing(self):\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com',\n                effective_directive='script-src',\n            )\n        )\n        assert result.blocked_uri == 'self'\n\n    def test_get_culprit(self):\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                violated_directive='style-src http://cdn.example.com',\n                effective_directive='style-src',\n            )\n        )\n        assert result.get_culprit() == 'style-src http://cdn.example.com'\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                violated_directive='style-src cdn.example.com',\n                effective_directive='style-src',\n            )\n        )\n        assert result.get_culprit() == 'style-src cdn.example.com'\n\n        result = Csp.to_python(\n            dict(\n                document_uri='https://example.com/foo',\n                violated_directive='style-src cdn.example.com',\n                effective_directive='style-src',\n            )\n        )\n        assert result.get_culprit() == 'style-src cdn.example.com'\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                violated_directive='style-src https://cdn.example.com',\n                effective_directive='style-src',\n            )\n        )\n        assert result.get_culprit() == 'style-src https://cdn.example.com'\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                violated_directive='style-src http://example.com',\n                effective_directive='style-src',\n            )\n        )\n        assert result.get_culprit() == \"style-src 'self'\"\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                violated_directive='style-src http://example2.com example.com',\n                effective_directive='style-src',\n            )\n        )\n        assert result.get_culprit() == \"style-src http://example2.com 'self'\"\n\n    def test_get_hash(self):\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='script-src',\n                blocked_uri='',\n            )\n        )\n        assert result.get_hash() == ['script-src', \"'self'\"]\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='script-src',\n                blocked_uri='self',\n            )\n        )\n        assert result.get_hash() == ['script-src', \"'self'\"]\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='script-src',\n                blocked_uri='http://example.com/lol.js',\n            )\n        )\n        assert result.get_hash() == ['script-src', 'example.com']\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='img-src',\n                blocked_uri='data:foo',\n            )\n        )\n        assert result.get_hash() == ['img-src', 'data:']\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='img-src',\n                blocked_uri='ftp://example.com/foo',\n            )\n        )\n        assert result.get_hash() == ['img-src', 'ftp://example.com']\n\n    def test_get_tags(self):\n        assert self.interface.get_tags() == [\n            ('effective-directive', 'style-src'), ('blocked-uri', 'http://example.com/lol.css'),\n        ]\n\n    def test_get_tags_stripe(self):\n        result = Csp.to_python(\n            dict(\n                blocked_uri='https://api.stripe.com/v1/tokens?card[number]=xxx',\n                effective_directive='script-src',\n            )\n        )\n        assert result.get_tags() == [\n            ('effective-directive', 'script-src'),\n            ('blocked-uri', 'https://api.stripe.com/v1/tokens'),\n        ]\n\n    def test_get_message(self):\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='img-src',\n                blocked_uri='http://google.com/foo',\n            )\n        )\n        assert result.get_message() == \"Blocked 'image' from 'google.com'\"\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='style-src',\n                blocked_uri='',\n            )\n        )\n        assert result.get_message() == \"Blocked inline 'style'\"\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='script-src',\n                blocked_uri='',\n                violated_directive=\"script-src 'unsafe-inline'\",\n            )\n        )\n        assert result.get_message() == \"Blocked unsafe inline 'script'\"\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='script-src',\n                blocked_uri='',\n                violated_directive=\"script-src 'unsafe-eval'\",\n            )\n        )\n        assert result.get_message() == \"Blocked unsafe eval() 'script'\"\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='script-src',\n                blocked_uri='',\n                violated_directive=\"script-src example.com\",\n            )\n        )\n        assert result.get_message() == \"Blocked unsafe (eval() or inline) 'script'\"\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='script-src',\n                blocked_uri='data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D',\n            )\n        )\n        assert result.get_message() == \"Blocked 'script' from 'data:'\"\n\n        result = Csp.to_python(\n            dict(\n                document_uri='http://example.com/foo',\n                effective_directive='script-src',\n                blocked_uri='data',\n            )\n        )\n        assert result.get_message() == \"Blocked 'script' from 'data:'\"\n\n    def test_real_report(self):\n        raw_report = {\n            \"csp-report\": {\n                \"document-uri\": \"https://sentry.io/sentry/csp/issues/88513416/\",\n                \"referrer\": \"https://sentry.io/sentry/sentry/releases/7329107476ff14cfa19cf013acd8ce47781bb93a/\",\n                \"violated-directive\": \"script-src\",\n                \"effective-directive\": \"script-src\",\n                \"original-policy\": \"default-src *; script-src 'self' 'unsafe-eval' 'unsafe-inline' e90d271df3e973c7.global.ssl.fastly.net cdn.ravenjs.com assets.zendesk.com ajax.googleapis.com ssl.google-analytics.com www.googleadservices.com analytics.twitter.com platform.twitter.com *.pingdom.net js.stripe.com api.stripe.com statuspage-production.s3.amazonaws.com s3.amazonaws.com *.google.com www.gstatic.com aui-cdn.atlassian.com www.hipchat.com *.atlassian.net *.jira.com *.zopim.com; font-src * data:; connect-src * wss://*.zopim.com; style-src 'self' 'unsafe-inline' e90d271df3e973c7.global.ssl.fastly.net s3.amazonaws.com aui-cdn.atlassian.com www.hipchat.com fonts.googleapis.com; img-src * data: blob:; report-uri https://sentry.io/api/54785/csp-report/?sentry_key=f724a8a027db45f5b21507e7142ff78e&sentry_release=39662eb9734f68e56b7f202260bb706be2f4cee7\",\n                \"disposition\": \"enforce\",\n                \"blocked-uri\": \"http://baddomain.com/test.js?_=1515535030116\",\n                \"line-number\": 24,\n                \"column-number\": 66270,\n                \"source-file\": \"https://e90d271df3e973c7.global.ssl.fastly.net/_static/f0c7c026a4b2a3d2b287ae2d012c9924/sentry/dist/vendor.js\",\n                \"status-code\": 0,\n                \"script-sample\": \"\"\n            }\n        }\n        interface = Csp.from_raw(raw_report)\n        assert interface.effective_directive == 'script-src'\n\n\nclass ExpectCTTest(TestCase):\n\n    raw_report = {\n        \"expect-ct-report\": {\n            \"date-time\": \"2014-04-06T13:00:50Z\",\n            \"hostname\": \"www.example.com\",\n            \"port\": 443,\n            \"effective-expiration-date\": \"2014-05-01T12:40:50Z\",\n            \"served-certificate-chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n            \"validated-certificate-chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n            \"scts\": [\n                {\n                    \"version\": 1,\n                    \"status\": \"invalid\",\n                    \"source\": \"embedded\",\n                    \"serialized_sct\": \"ABCD==\"\n                },\n            ],\n        }\n    }\n    interface_json = {\n        'date_time': '2014-04-06T13:00:50Z',\n        'hostname': 'www.example.com',\n        'port': 443,\n        'effective_expiration_date': '2014-05-01T12:40:50Z',\n        'served_certificate_chain': ['-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----'],\n        'validated_certificate_chain': ['-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----'],\n        'scts': [{\n            'status': 'invalid',\n            'source': 'embedded',\n            'serialized_sct': 'ABCD==',\n            'version': 1\n        }]\n    }\n\n    def test_from_raw(self):\n        interface = ExpectCT.from_raw(self.raw_report)\n        assert interface.hostname == 'www.example.com'\n        assert interface.date_time == '2014-04-06T13:00:50Z'\n        assert interface.port == 443\n        assert len(interface.served_certificate_chain) == 1\n\n    def test_to_python(self):\n        interface = ExpectCT.to_python(self.interface_json)\n        assert interface.hostname == 'www.example.com'\n        assert interface.date_time == '2014-04-06T13:00:50Z'\n        assert interface.port == 443\n        assert len(interface.served_certificate_chain) == 1\n\n    def test_serialize_unserialize_behavior(self):\n        assert ExpectCT.to_python(self.interface_json).to_json() == self.interface_json\n\n    def test_invalid_format(self):\n        interface = ExpectCT.to_python({\n            'hostname': 'www.example.com',\n            'date_time': 'Not an RFC3339 datetime'\n        })\n        # invalid keys are just removed\n        assert interface.to_json() == {'hostname': 'www.example.com'}\n\n\nclass ExpectStapleTest(TestCase):\n\n    raw_report = {\n        \"expect-staple-report\": {\n            \"date-time\": \"2014-04-06T13:00:50Z\",\n            \"hostname\": \"www.example.com\",\n            \"port\": 443,\n            \"response-status\": \"ERROR_RESPONSE\",\n            \"cert-status\": \"REVOKED\",\n            \"effective-expiration-date\": \"2014-05-01T12:40:50Z\",\n            \"served-certificate-chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n            \"validated-certificate-chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n        }\n    }\n    interface_json = {\n        \"date_time\": \"2014-04-06T13:00:50Z\",\n        \"hostname\": \"www.example.com\",\n        \"port\": 443,\n        \"response_status\": \"ERROR_RESPONSE\",\n        \"cert_status\": \"REVOKED\",\n        \"effective_expiration_date\": \"2014-05-01T12:40:50Z\",\n        \"served_certificate_chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n        \"validated_certificate_chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n    }\n\n    def test_from_raw(self):\n        interface = ExpectStaple.from_raw(self.raw_report)\n        assert interface.hostname == 'www.example.com'\n        assert interface.date_time == '2014-04-06T13:00:50Z'\n        assert interface.port == 443\n        assert len(interface.served_certificate_chain) == 1\n\n    def test_to_python(self):\n        interface = ExpectStaple.to_python(self.interface_json)\n        assert interface.hostname == 'www.example.com'\n        assert interface.date_time == '2014-04-06T13:00:50Z'\n        assert interface.port == 443\n        assert len(interface.served_certificate_chain) == 1\n\n    def test_serialize_unserialize_behavior(self):\n        assert ExpectStaple.to_python(self.interface_json).to_json() == self.interface_json\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_security.py", "id": "1e26a65dc5c616f9af36495d2ed042aa", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/interfaces/test_security.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}