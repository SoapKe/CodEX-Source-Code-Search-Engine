{"author": "nicolargo", "code": "\n -*- coding: utf-8 -*-\n\n Glances - An eye on your system\n\n Copyright (C) 2017 Nicolargo <nicolas@nicolargo.com>\n\n Glances is free software; you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Glances is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n\"\"\"Glances unitary tests suite for the RESTful API.\"\"\"\n\nimport shlex\nimport subprocess\nimport time\nimport numbers\nimport unittest\n\nfrom glances import __version__\nfrom glances.compat import text_type\n\nimport requests\n\nSERVER_PORT = 61234\nURL = \"http://localhost:%s/api/2\" % SERVER_PORT\npid = None\n\n Unitest class\n ==============\nprint('RESTful API unitary tests for Glances %s' % __version__)\n\n\nclass TestGlances(unittest.TestCase):\n    \"\"\"Test Glances class.\"\"\"\n\n    def setUp(self):\n        \"\"\"The function is called *every time* before test_*.\"\"\"\n        print('\\n' + '=' * 78)\n\n    def test_000_start_server(self):\n        \"\"\"Start the Glances Web Server.\"\"\"\n        global pid\n\n        print('INFO: [TEST_000] Start the Glances Web Server')\n        cmdline = \"python -m glances -w -p %s\" % SERVER_PORT\n        print(\"Run the Glances Web Server on port %s\" % SERVER_PORT)\n        args = shlex.split(cmdline)\n        pid = subprocess.Popen(args)\n        print(\"Please wait 5 seconds...\")\n        time.sleep(5)\n\n        self.assertTrue(pid is not None)\n\n    def test_001_all(self):\n        \"\"\"All.\"\"\"\n        method = \"all\"\n        print('INFO: [TEST_001] Get all stats')\n        print(\"HTTP RESTful request: %s/%s\" % (URL, method))\n        req = requests.get(\"%s/%s\" % (URL, method))\n\n        self.assertTrue(req.ok)\n\n    def test_002_pluginslist(self):\n        \"\"\"Plugins list.\"\"\"\n        method = \"pluginslist\"\n        print('INFO: [TEST_002] Plugins list')\n        print(\"HTTP RESTful request: %s/%s\" % (URL, method))\n        req = requests.get(\"%s/%s\" % (URL, method))\n\n        self.assertTrue(req.ok)\n        self.assertIsInstance(req.json(), list)\n        self.assertIn('cpu', req.json())\n\n    def test_003_plugins(self):\n        \"\"\"Plugins.\"\"\"\n        method = \"pluginslist\"\n        print('INFO: [TEST_003] Plugins')\n        plist = requests.get(\"%s/%s\" % (URL, method))\n\n        for p in plist.json():\n            print(\"HTTP RESTful request: %s/%s\" % (URL, p))\n            req = requests.get(\"%s/%s\" % (URL, p))\n            self.assertTrue(req.ok)\n            if p in ('uptime', 'now'):\n                self.assertIsInstance(req.json(), text_type)\n            elif p in ('fs', 'percpu', 'sensors', 'alert', 'processlist', 'diskio',\n                       'hddtemp', 'batpercent', 'network', 'folders', 'amps', 'ports',\n                       'irq', 'wifi', 'gpu'):\n                self.assertIsInstance(req.json(), list)\n            elif p in ('psutilversion', 'help'):\n                pass\n            else:\n                self.assertIsInstance(req.json(), dict)\n\n    def test_004_items(self):\n        \"\"\"Items.\"\"\"\n        method = \"cpu\"\n        print('INFO: [TEST_004] Items for the CPU method')\n        ilist = requests.get(\"%s/%s\" % (URL, method))\n\n        for i in ilist.json():\n            print(\"HTTP RESTful request: %s/%s/%s\" % (URL, method, i))\n            req = requests.get(\"%s/%s/%s\" % (URL, method, i))\n            self.assertTrue(req.ok)\n            self.assertIsInstance(req.json(), dict)\n            print(req.json()[i])\n            self.assertIsInstance(req.json()[i], numbers.Number)\n\n    def test_005_values(self):\n        \"\"\"Values.\"\"\"\n        method = \"processlist\"\n        print('INFO: [TEST_005] Item=Value for the PROCESSLIST method')\n        print(\"%s/%s/pid/0\" % (URL, method))\n        req = requests.get(\"%s/%s/pid/0\" % (URL, method))\n\n        self.assertTrue(req.ok)\n        self.assertIsInstance(req.json(), dict)\n\n    def test_006_all_limits(self):\n        \"\"\"All limits.\"\"\"\n        method = \"all/limits\"\n        print('INFO: [TEST_006] Get all limits')\n        print(\"HTTP RESTful request: %s/%s\" % (URL, method))\n        req = requests.get(\"%s/%s\" % (URL, method))\n\n        self.assertTrue(req.ok)\n        self.assertIsInstance(req.json(), dict)\n\n    def test_007_all_views(self):\n        \"\"\"All views.\"\"\"\n        method = \"all/views\"\n        print('INFO: [TEST_007] Get all views')\n        print(\"HTTP RESTful request: %s/%s\" % (URL, method))\n        req = requests.get(\"%s/%s\" % (URL, method))\n\n        self.assertTrue(req.ok)\n        self.assertIsInstance(req.json(), dict)\n\n    def test_008_plugins_limits(self):\n        \"\"\"Plugins limits.\"\"\"\n        method = \"pluginslist\"\n        print('INFO: [TEST_008] Plugins limits')\n        plist = requests.get(\"%s/%s\" % (URL, method))\n\n        for p in plist.json():\n            print(\"HTTP RESTful request: %s/%s/limits\" % (URL, p))\n            req = requests.get(\"%s/%s/limits\" % (URL, p))\n            self.assertTrue(req.ok)\n            self.assertIsInstance(req.json(), dict)\n\n    def test_009_plugins_views(self):\n        \"\"\"Plugins views.\"\"\"\n        method = \"pluginslist\"\n        print('INFO: [TEST_009] Plugins views')\n        plist = requests.get(\"%s/%s\" % (URL, method))\n\n        for p in plist.json():\n            print(\"HTTP RESTful request: %s/%s/views\" % (URL, p))\n            req = requests.get(\"%s/%s/views\" % (URL, p))\n            self.assertTrue(req.ok)\n            self.assertIsInstance(req.json(), dict)\n\n    def test_010_history(self):\n        \"\"\"History.\"\"\"\n        method = \"history\"\n        print('INFO: [TEST_010] History')\n        print(\"HTTP RESTful request: %s/cpu/%s\" % (URL, method))\n        req = requests.get(\"%s/cpu/%s\" % (URL, method))\n        self.assertIsInstance(req.json(), dict)\n        self.assertIsInstance(req.json()['user'], list)\n        self.assertTrue(len(req.json()['user']) > 0)\n        print(\"HTTP RESTful request: %s/cpu/%s/3\" % (URL, method))\n        req = requests.get(\"%s/cpu/%s/3\" % (URL, method))\n        self.assertIsInstance(req.json(), dict)\n        self.assertIsInstance(req.json()['user'], list)\n        self.assertTrue(len(req.json()['user']) > 1)\n        print(\"HTTP RESTful request: %s/cpu/system/%s\" % (URL, method))\n        req = requests.get(\"%s/cpu/system/%s\" % (URL, method))\n        self.assertIsInstance(req.json(), dict)\n        self.assertIsInstance(req.json()['system'], list)\n        self.assertTrue(len(req.json()['system']) > 0)\n        print(\"HTTP RESTful request: %s/cpu/system/%s/3\" % (URL, method))\n        req = requests.get(\"%s/cpu/system/%s/3\" % (URL, method))\n        self.assertIsInstance(req.json(), dict)\n        self.assertIsInstance(req.json()['system'], list)\n        self.assertTrue(len(req.json()['system']) > 1)\n\n    def test_999_stop_server(self):\n        \"\"\"Stop the Glances Web Server.\"\"\"\n        print('INFO: [TEST_999] Stop the Glances Web Server')\n\n        print(\"Stop the Glances Web Server\")\n        pid.terminate()\n        time.sleep(1)\n\n        self.assertTrue(True)\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "   glances unitary tests suite restful api      import shlex import subprocess import time import numbers import unittest  glances import   version   glances compat import text type  import requests  server port   61234 url    http   localhost  api 2    server port pid   none    unitest class                  print( restful api unitary tests glances       version  )   class testglances(unittest testcase)         test glances class          def setup(self)             the function called  every time  test               print(  n          78)      def test 000 start server(self)             start glances web server             global pid          print( info   test 000  start glances web server )         cmdline    python  glances  w  p     server port         print( run glances web server port     server port)         args   shlex split(cmdline)         pid   subprocess popen(args)         print( please wait 5 seconds    )         time sleep(5)          self asserttrue(pid none)      def test 001 all(self)             all             method             print( info   test 001  get stats )         print( http restful request       (url  method))         req   requests get(      (url  method))          self asserttrue(req ok)      def test 002 pluginslist(self)             plugins list             method    pluginslist          print( info   test 002  plugins list )         print( http restful request       (url  method))         req   requests get(      (url  method))          self asserttrue(req ok)         self assertisinstance(req json()  list)         self assertin( cpu   req json())      def test 003 plugins(self)             plugins             method    pluginslist          print( info   test 003  plugins )         plist   requests get(      (url  method))          p plist json()              print( http restful request       (url  p))             req   requests get(      (url  p))             self asserttrue(req ok)             p ( uptime    )                  self assertisinstance(req json()  text type)             elif p ( fs    percpu    sensors    alert    processlist    diskio                           hddtemp    batpercent    network    folders    amps    ports                           irq    wifi    gpu )                  self assertisinstance(req json()  list)             elif p ( psutilversion    help )                  pass             else                  self assertisinstance(req json()  dict)      def test 004 items(self)             items             method    cpu          print( info   test 004  items cpu method )         ilist   requests get(      (url  method))          ilist json()              print( http restful request        (url  method  i))             req   requests get(       (url  method  i))             self asserttrue(req ok)             self assertisinstance(req json()  dict)             print(req json() )             self assertisinstance(req json()   numbers number)      def test 005 values(self)             values             method    processlist          print( info   test 005  item value processlist method )         print(   pid 0    (url  method))         req   requests get(   pid 0    (url  method))          self asserttrue(req ok)         self assertisinstance(req json()  dict)      def test 006 limits(self)             all limits             method    limits          print( info   test 006  get limits )         print( http restful request       (url  method))         req   requests get(      (url  method))          self asserttrue(req ok)         self assertisinstance(req json()  dict)      def test 007 views(self)             all views             method    views          print( info   test 007  get views )         print( http restful request       (url  method))         req   requests get(      (url  method))          self asserttrue(req ok)         self assertisinstance(req json()  dict)      def test 008 plugins limits(self)             plugins limits             method    pluginslist          print( info   test 008  plugins limits )         plist   requests get(      (url  method))          p plist json()              print( http restful request    limits    (url  p))             req   requests get(   limits    (url  p))             self asserttrue(req ok)             self assertisinstance(req json()  dict)      def test 009 plugins views(self)             plugins views             method    pluginslist          print( info   test 009  plugins views )         plist   requests get(      (url  method))          p plist json()              print( http restful request    views    (url  p))             req   requests get(   views    (url  p))             self asserttrue(req ok)             self assertisinstance(req json()  dict)      def test 010 history(self)             history             method    history          print( info   test 010  history )         print( http restful request   cpu     (url  method))         req   requests get(  cpu     (url  method))         self assertisinstance(req json()  dict)         self assertisinstance(req json()  user    list)         self asserttrue(len(req json()  user  )   0)         print( http restful request   cpu  3    (url  method))         req   requests get(  cpu  3    (url  method))         self assertisinstance(req json()  dict)         self assertisinstance(req json()  user    list)         self asserttrue(len(req json()  user  )   1)         print( http restful request   cpu system     (url  method))         req   requests get(  cpu system     (url  method))         self assertisinstance(req json()  dict)         self assertisinstance(req json()  system    list)         self asserttrue(len(req json()  system  )   0)         print( http restful request   cpu system  3    (url  method))         req   requests get(  cpu system  3    (url  method))         self assertisinstance(req json()  dict)         self assertisinstance(req json()  system    list)         self asserttrue(len(req json()  system  )   1)      def test 999 stop server(self)             stop glances web server         usr bin env python        coding  utf 8           glances   an eye system       copyright (c) 2017 nicolargo  nicolas nicolargo com        glances free software  redistribute modify    terms gnu lesser general public license published    free software foundation  either version 3 license     (at option) later version        glances distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose  see    gnu lesser general public license details        you received copy gnu lesser general public license    along program  if  see  http   www gnu org licenses       unitest class                   ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Glances - An eye on your system\n#\n# Copyright (C) 2017 Nicolargo <nicolas@nicolargo.com>\n#\n# Glances is free software; you can redistribute it and/or modify\n# it under the terms of the GNU Lesser General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Glances is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n\"\"\"Glances unitary tests suite for the RESTful API.\"\"\"\n\nimport shlex\nimport subprocess\nimport time\nimport numbers\nimport unittest\n\nfrom glances import __version__\nfrom glances.compat import text_type\n\nimport requests\n\nSERVER_PORT = 61234\nURL = \"http://localhost:%s/api/2\" % SERVER_PORT\npid = None\n\n# Unitest class\n# ==============\nprint('RESTful API unitary tests for Glances %s' % __version__)\n\n\nclass TestGlances(unittest.TestCase):\n    \"\"\"Test Glances class.\"\"\"\n\n    def setUp(self):\n        \"\"\"The function is called *every time* before test_*.\"\"\"\n        print('\\n' + '=' * 78)\n\n    def test_000_start_server(self):\n        \"\"\"Start the Glances Web Server.\"\"\"\n        global pid\n\n        print('INFO: [TEST_000] Start the Glances Web Server')\n        cmdline = \"python -m glances -w -p %s\" % SERVER_PORT\n        print(\"Run the Glances Web Server on port %s\" % SERVER_PORT)\n        args = shlex.split(cmdline)\n        pid = subprocess.Popen(args)\n        print(\"Please wait 5 seconds...\")\n        time.sleep(5)\n\n        self.assertTrue(pid is not None)\n\n    def test_001_all(self):\n        \"\"\"All.\"\"\"\n        method = \"all\"\n        print('INFO: [TEST_001] Get all stats')\n        print(\"HTTP RESTful request: %s/%s\" % (URL, method))\n        req = requests.get(\"%s/%s\" % (URL, method))\n\n        self.assertTrue(req.ok)\n\n    def test_002_pluginslist(self):\n        \"\"\"Plugins list.\"\"\"\n        method = \"pluginslist\"\n        print('INFO: [TEST_002] Plugins list')\n        print(\"HTTP RESTful request: %s/%s\" % (URL, method))\n        req = requests.get(\"%s/%s\" % (URL, method))\n\n        self.assertTrue(req.ok)\n        self.assertIsInstance(req.json(), list)\n        self.assertIn('cpu', req.json())\n\n    def test_003_plugins(self):\n        \"\"\"Plugins.\"\"\"\n        method = \"pluginslist\"\n        print('INFO: [TEST_003] Plugins')\n        plist = requests.get(\"%s/%s\" % (URL, method))\n\n        for p in plist.json():\n            print(\"HTTP RESTful request: %s/%s\" % (URL, p))\n            req = requests.get(\"%s/%s\" % (URL, p))\n            self.assertTrue(req.ok)\n            if p in ('uptime', 'now'):\n                self.assertIsInstance(req.json(), text_type)\n            elif p in ('fs', 'percpu', 'sensors', 'alert', 'processlist', 'diskio',\n                       'hddtemp', 'batpercent', 'network', 'folders', 'amps', 'ports',\n                       'irq', 'wifi', 'gpu'):\n                self.assertIsInstance(req.json(), list)\n            elif p in ('psutilversion', 'help'):\n                pass\n            else:\n                self.assertIsInstance(req.json(), dict)\n\n    def test_004_items(self):\n        \"\"\"Items.\"\"\"\n        method = \"cpu\"\n        print('INFO: [TEST_004] Items for the CPU method')\n        ilist = requests.get(\"%s/%s\" % (URL, method))\n\n        for i in ilist.json():\n            print(\"HTTP RESTful request: %s/%s/%s\" % (URL, method, i))\n            req = requests.get(\"%s/%s/%s\" % (URL, method, i))\n            self.assertTrue(req.ok)\n            self.assertIsInstance(req.json(), dict)\n            print(req.json()[i])\n            self.assertIsInstance(req.json()[i], numbers.Number)\n\n    def test_005_values(self):\n        \"\"\"Values.\"\"\"\n        method = \"processlist\"\n        print('INFO: [TEST_005] Item=Value for the PROCESSLIST method')\n        print(\"%s/%s/pid/0\" % (URL, method))\n        req = requests.get(\"%s/%s/pid/0\" % (URL, method))\n\n        self.assertTrue(req.ok)\n        self.assertIsInstance(req.json(), dict)\n\n    def test_006_all_limits(self):\n        \"\"\"All limits.\"\"\"\n        method = \"all/limits\"\n        print('INFO: [TEST_006] Get all limits')\n        print(\"HTTP RESTful request: %s/%s\" % (URL, method))\n        req = requests.get(\"%s/%s\" % (URL, method))\n\n        self.assertTrue(req.ok)\n        self.assertIsInstance(req.json(), dict)\n\n    def test_007_all_views(self):\n        \"\"\"All views.\"\"\"\n        method = \"all/views\"\n        print('INFO: [TEST_007] Get all views')\n        print(\"HTTP RESTful request: %s/%s\" % (URL, method))\n        req = requests.get(\"%s/%s\" % (URL, method))\n\n        self.assertTrue(req.ok)\n        self.assertIsInstance(req.json(), dict)\n\n    def test_008_plugins_limits(self):\n        \"\"\"Plugins limits.\"\"\"\n        method = \"pluginslist\"\n        print('INFO: [TEST_008] Plugins limits')\n        plist = requests.get(\"%s/%s\" % (URL, method))\n\n        for p in plist.json():\n            print(\"HTTP RESTful request: %s/%s/limits\" % (URL, p))\n            req = requests.get(\"%s/%s/limits\" % (URL, p))\n            self.assertTrue(req.ok)\n            self.assertIsInstance(req.json(), dict)\n\n    def test_009_plugins_views(self):\n        \"\"\"Plugins views.\"\"\"\n        method = \"pluginslist\"\n        print('INFO: [TEST_009] Plugins views')\n        plist = requests.get(\"%s/%s\" % (URL, method))\n\n        for p in plist.json():\n            print(\"HTTP RESTful request: %s/%s/views\" % (URL, p))\n            req = requests.get(\"%s/%s/views\" % (URL, p))\n            self.assertTrue(req.ok)\n            self.assertIsInstance(req.json(), dict)\n\n    def test_010_history(self):\n        \"\"\"History.\"\"\"\n        method = \"history\"\n        print('INFO: [TEST_010] History')\n        print(\"HTTP RESTful request: %s/cpu/%s\" % (URL, method))\n        req = requests.get(\"%s/cpu/%s\" % (URL, method))\n        self.assertIsInstance(req.json(), dict)\n        self.assertIsInstance(req.json()['user'], list)\n        self.assertTrue(len(req.json()['user']) > 0)\n        print(\"HTTP RESTful request: %s/cpu/%s/3\" % (URL, method))\n        req = requests.get(\"%s/cpu/%s/3\" % (URL, method))\n        self.assertIsInstance(req.json(), dict)\n        self.assertIsInstance(req.json()['user'], list)\n        self.assertTrue(len(req.json()['user']) > 1)\n        print(\"HTTP RESTful request: %s/cpu/system/%s\" % (URL, method))\n        req = requests.get(\"%s/cpu/system/%s\" % (URL, method))\n        self.assertIsInstance(req.json(), dict)\n        self.assertIsInstance(req.json()['system'], list)\n        self.assertTrue(len(req.json()['system']) > 0)\n        print(\"HTTP RESTful request: %s/cpu/system/%s/3\" % (URL, method))\n        req = requests.get(\"%s/cpu/system/%s/3\" % (URL, method))\n        self.assertIsInstance(req.json(), dict)\n        self.assertIsInstance(req.json()['system'], list)\n        self.assertTrue(len(req.json()['system']) > 1)\n\n    def test_999_stop_server(self):\n        \"\"\"Stop the Glances Web Server.\"\"\"\n        print('INFO: [TEST_999] Stop the Glances Web Server')\n\n        print(\"Stop the Glances Web Server\")\n        pid.terminate()\n        time.sleep(1)\n\n        self.assertTrue(True)\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Glances an Eye on your system. A top/htop alternative.", "file_name": "unitest-restful.py", "id": "24cc6f6990df17e4a405600f4fa12433", "language": "Python", "project_name": "glances", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/nicolargo-glances/nicolargo-glances-c286362/unitest-restful.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:42:15Z", "url": "https://github.com/nicolargo/glances", "wiki": true}