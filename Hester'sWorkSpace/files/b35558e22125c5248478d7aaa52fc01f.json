{"author": "deepfakes", "code": "\n\"\"\"\nThe MIT License (MIT)\n\nCopyright (c) 2015-2016 Adrian Rosebrock, http://www.pyimagesearch.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\"\"\n\nfrom collections import OrderedDict\nimport numpy as np\nimport cv2\n\n\n\nFACIAL_LANDMARKS_IDXS = OrderedDict([\n    (\"mouth\", (48, 68)),\n    (\"right_eyebrow\", (17, 22)),\n    (\"left_eyebrow\", (22, 27)),\n    (\"right_eye\", (36, 42)),\n    (\"left_eye\", (42, 48)),\n    (\"nose\", (27, 36)),\n    (\"jaw\", (0, 17)),\n    (\"chin\", (8, 11))\n])\n\n\n\ndef align_eyes(landmarks, size):\n    desiredLeftEye = (0.35, 0.35) # (y, x) value\n    desiredFaceWidth = desiredFaceHeight = size\n\n    # extract the left and right eye (x, y)-coordinates\n    (lStart, lEnd) = FACIAL_LANDMARKS_IDXS[\"left_eye\"]\n    (rStart, rEnd) = FACIAL_LANDMARKS_IDXS[\"right_eye\"]\n    leftEyePts = landmarks[lStart:lEnd]\n    rightEyePts = landmarks[rStart:rEnd]\n\n    \n    leftEyeCenter = leftEyePts.mean(axis=0).astype(\"int\")\n    rightEyeCenter = rightEyePts.mean(axis=0).astype(\"int\")\n\n    \n    dY = rightEyeCenter[0,1] - leftEyeCenter[0,1]\n    dX = rightEyeCenter[0,0] - leftEyeCenter[0,0]\n    angle = np.degrees(np.arctan2(dY, dX)) - 180\n\n    # compute center (x, y)-coordinates (i.e., the median point)\n    \n    eyesCenter = ((leftEyeCenter[0,0] + rightEyeCenter[0,0]) // 2, (leftEyeCenter[0,1] + rightEyeCenter[0,1]) // 2)\n\n    \n    M = cv2.getRotationMatrix2D(eyesCenter, angle, 1.0)\n\n    return M\n", "comments": "    the mit license (mit)  copyright (c) 2015 2016 adrian rosebrock  http   www pyimagesearch com  permission hereby granted  free charge  person obtaining copy software associated documentation files (the  software )  deal software without restriction  including without limitation rights use  copy  modify  merge  publish  distribute  sublicense  sell copies software  permit persons software furnished  subject following conditions   the copyright notice permission notice shall included copies substantial portions software   the software is provided  as is   without warranty of any kind  express or implied  including but not limited to the warranties of merchantability  fitness for a particular purpose and noninfringement  in no event shall the authors or copyright holders be liable for any claim  damages or other liability  whether in an action of contract  tort or otherwise  arising from  out of or in connection with the software or the use or other dealings in the software         code borrowed https   github com jrosebr1 imutils blob d5cb29d02cf178c399210d5a139a821dfb0ae136 imutils face utils helpers py    define dictionary maps indexes facial    landmarks specific face regions    returns rotation matrix applied 68 input facial landmarks    results landmarks eyes aligned horizontally    (y  x) value    extract left right eye (x  y) coordinates    compute center mass eye    compute angle eye centroids    compute center (x  y) coordinates (i e   median point)    two eyes input image    grab rotation matrix rotating scaling face ", "content": "# Code borrowed from https://github.com/jrosebr1/imutils/blob/d5cb29d02cf178c399210d5a139a821dfb0ae136/imutils/face_utils/helpers.py\n\"\"\"\nThe MIT License (MIT)\n\nCopyright (c) 2015-2016 Adrian Rosebrock, http://www.pyimagesearch.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\"\"\n\nfrom collections import OrderedDict\nimport numpy as np\nimport cv2\n\n# define a dictionary that maps the indexes of the facial\n# landmarks to specific face regions\nFACIAL_LANDMARKS_IDXS = OrderedDict([\n    (\"mouth\", (48, 68)),\n    (\"right_eyebrow\", (17, 22)),\n    (\"left_eyebrow\", (22, 27)),\n    (\"right_eye\", (36, 42)),\n    (\"left_eye\", (42, 48)),\n    (\"nose\", (27, 36)),\n    (\"jaw\", (0, 17)),\n    (\"chin\", (8, 11))\n])\n\n# Returns a rotation matrix that when applied to the 68 input facial landmarks\n# results in landmarks with eyes aligned horizontally\ndef align_eyes(landmarks, size):\n    desiredLeftEye = (0.35, 0.35) # (y, x) value\n    desiredFaceWidth = desiredFaceHeight = size\n\n    # extract the left and right eye (x, y)-coordinates\n    (lStart, lEnd) = FACIAL_LANDMARKS_IDXS[\"left_eye\"]\n    (rStart, rEnd) = FACIAL_LANDMARKS_IDXS[\"right_eye\"]\n    leftEyePts = landmarks[lStart:lEnd]\n    rightEyePts = landmarks[rStart:rEnd]\n\n    # compute the center of mass for each eye\n    leftEyeCenter = leftEyePts.mean(axis=0).astype(\"int\")\n    rightEyeCenter = rightEyePts.mean(axis=0).astype(\"int\")\n\n    # compute the angle between the eye centroids\n    dY = rightEyeCenter[0,1] - leftEyeCenter[0,1]\n    dX = rightEyeCenter[0,0] - leftEyeCenter[0,0]\n    angle = np.degrees(np.arctan2(dY, dX)) - 180\n\n    # compute center (x, y)-coordinates (i.e., the median point)\n    # between the two eyes in the input image\n    eyesCenter = ((leftEyeCenter[0,0] + rightEyeCenter[0,0]) // 2, (leftEyeCenter[0,1] + rightEyeCenter[0,1]) // 2)\n\n    # grab the rotation matrix for rotating and scaling the face\n    M = cv2.getRotationMatrix2D(eyesCenter, angle, 1.0)\n\n    return M\n", "description": "Non official project based on original /r/Deepfakes thread. Many thanks to him!", "file_name": "align_eyes.py", "id": "b35558e22125c5248478d7aaa52fc01f", "language": "Python", "project_name": "faceswap", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/deepfakes-faceswap/deepfakes-faceswap-6ff64ef/lib/align_eyes.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:27:43Z", "url": "https://github.com/deepfakes/faceswap", "wiki": true}