{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo.tests.common import TransactionCase\n\n\nclass TestStreetFields(TransactionCase):\n\n    def setUp(self):\n        super(TestStreetFields, self).setUp()\n        self.Partner = self.env['res.partner']\n        self.env.ref('base.be').write({'street_format': '%(street_name)s, %(street_number)s/%(street_number2)s'})\n        self.env.ref('base.us').write({'street_format': '%(street_number)s/%(street_number2)s %(street_name)s'})\n        self.env.ref('base.ch').write({'street_format': 'header %(street_name)s, %(street_number)s - %(street_number2)s trailer'})\n\n    def create_and_assert(self, partner_name, country_id, street, street_name, street_number, street_number2):\n        partner = self.Partner.create({'name': partner_name + '-1', 'street': street, 'country_id': country_id})\n        self.assertEqual(partner.street_name or '', street_name, 'wrong street name for %s: %s' % (partner_name, partner.street_name))\n        self.assertEqual(partner.street_number or '', street_number, 'wrong house number for %s: %s' % (partner_name, partner.street_number))\n        self.assertEqual(partner.street_number2 or '', street_number2, 'wrong door number for %s: %s' % (partner_name, partner.street_number2))\n        partner = self.Partner.create({\n            'name': partner_name + '-2',\n            'street_name': street_name,\n            'street_number': street_number,\n            'street_number2': street_number2,\n            'country_id': country_id,\n        })\n        self.assertEqual(partner.street or '', street, 'wrong street for %s: %s' % (partner_name, partner.street))\n        return partner\n\n    def write_and_assert(self, partner, vals, street, street_name, street_number, street_number2):\n        partner.write(vals)\n        self.assertEqual(partner.street_name or '', street_name, 'wrong street name: %s' % partner.street_name)\n        self.assertEqual(partner.street_number or '', street_number, 'wrong house number: %s' % partner.street_number)\n        self.assertEqual(partner.street_number2 or '', street_number2, 'wrong door number: %s' % partner.street_number2)\n        self.assertEqual(partner.street or '', street, 'wrong street: %s' % partner.street)\n\n    def test_00_res_partner_name_create(self):\n        self.create_and_assert('Test00', self.env.ref('base.us').id, '40/2b Chaussee de Namur', 'Chaussee de Namur', '40', '2b')\n        self.create_and_assert('Test01', self.env.ref('base.us').id, '40 Chaussee de Namur', 'Chaussee de Namur', '40', '')\n        self.create_and_assert('Test02', self.env.ref('base.us').id, 'Chaussee de Namur', 'de Namur', 'Chaussee', '')\n\n    def test_01_header_trailer(self):\n        self.create_and_assert('Test10', self.env.ref('base.ch').id, 'header Chaussee de Namur, 40 - 2b trailer', 'Chaussee de Namur', '40', '2b')\n        self.create_and_assert('Test11', self.env.ref('base.ch').id, 'header Chaussee de Namur, 40 trailer', 'Chaussee de Namur', '40', '')\n        self.create_and_assert('Test12', self.env.ref('base.ch').id, 'header Chaussee de Namur trailer', 'Chaussee de Namur', '', '')\n\n    def test_02_res_partner_write(self):\n        p1 = self.create_and_assert('Test20', self.env.ref('base.be').id, 'Chaussee de Namur, 40/2b', 'Chaussee de Namur', '40', '2b')\n        self.write_and_assert(p1, {'street': 'Chaussee de Namur, 43'}, 'Chaussee de Namur, 43', 'Chaussee de Namur', '43', '')\n        self.write_and_assert(p1, {'street': 'Chaussee de Namur'}, 'Chaussee de Namur', 'Chaussee de Namur', '', '')\n        self.write_and_assert(p1, {'street_name': 'Chee de Namur', 'street_number': '40'}, 'Chee de Namur, 40', 'Chee de Namur', '40', '')\n        self.write_and_assert(p1, {'street_number2': '4'}, 'Chee de Namur, 40/4', 'Chee de Namur', '40', '4')\n        \n        self.write_and_assert(p1, {'country_id': self.env.ref('base.us').id}, 'Chee de Namur, 40/4', 'Chee de Namur', '40', '4')\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details    recompute street fields change country ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.tests.common import TransactionCase\n\n\nclass TestStreetFields(TransactionCase):\n\n    def setUp(self):\n        super(TestStreetFields, self).setUp()\n        self.Partner = self.env['res.partner']\n        self.env.ref('base.be').write({'street_format': '%(street_name)s, %(street_number)s/%(street_number2)s'})\n        self.env.ref('base.us').write({'street_format': '%(street_number)s/%(street_number2)s %(street_name)s'})\n        self.env.ref('base.ch').write({'street_format': 'header %(street_name)s, %(street_number)s - %(street_number2)s trailer'})\n\n    def create_and_assert(self, partner_name, country_id, street, street_name, street_number, street_number2):\n        partner = self.Partner.create({'name': partner_name + '-1', 'street': street, 'country_id': country_id})\n        self.assertEqual(partner.street_name or '', street_name, 'wrong street name for %s: %s' % (partner_name, partner.street_name))\n        self.assertEqual(partner.street_number or '', street_number, 'wrong house number for %s: %s' % (partner_name, partner.street_number))\n        self.assertEqual(partner.street_number2 or '', street_number2, 'wrong door number for %s: %s' % (partner_name, partner.street_number2))\n        partner = self.Partner.create({\n            'name': partner_name + '-2',\n            'street_name': street_name,\n            'street_number': street_number,\n            'street_number2': street_number2,\n            'country_id': country_id,\n        })\n        self.assertEqual(partner.street or '', street, 'wrong street for %s: %s' % (partner_name, partner.street))\n        return partner\n\n    def write_and_assert(self, partner, vals, street, street_name, street_number, street_number2):\n        partner.write(vals)\n        self.assertEqual(partner.street_name or '', street_name, 'wrong street name: %s' % partner.street_name)\n        self.assertEqual(partner.street_number or '', street_number, 'wrong house number: %s' % partner.street_number)\n        self.assertEqual(partner.street_number2 or '', street_number2, 'wrong door number: %s' % partner.street_number2)\n        self.assertEqual(partner.street or '', street, 'wrong street: %s' % partner.street)\n\n    def test_00_res_partner_name_create(self):\n        self.create_and_assert('Test00', self.env.ref('base.us').id, '40/2b Chaussee de Namur', 'Chaussee de Namur', '40', '2b')\n        self.create_and_assert('Test01', self.env.ref('base.us').id, '40 Chaussee de Namur', 'Chaussee de Namur', '40', '')\n        self.create_and_assert('Test02', self.env.ref('base.us').id, 'Chaussee de Namur', 'de Namur', 'Chaussee', '')\n\n    def test_01_header_trailer(self):\n        self.create_and_assert('Test10', self.env.ref('base.ch').id, 'header Chaussee de Namur, 40 - 2b trailer', 'Chaussee de Namur', '40', '2b')\n        self.create_and_assert('Test11', self.env.ref('base.ch').id, 'header Chaussee de Namur, 40 trailer', 'Chaussee de Namur', '40', '')\n        self.create_and_assert('Test12', self.env.ref('base.ch').id, 'header Chaussee de Namur trailer', 'Chaussee de Namur', '', '')\n\n    def test_02_res_partner_write(self):\n        p1 = self.create_and_assert('Test20', self.env.ref('base.be').id, 'Chaussee de Namur, 40/2b', 'Chaussee de Namur', '40', '2b')\n        self.write_and_assert(p1, {'street': 'Chaussee de Namur, 43'}, 'Chaussee de Namur, 43', 'Chaussee de Namur', '43', '')\n        self.write_and_assert(p1, {'street': 'Chaussee de Namur'}, 'Chaussee de Namur', 'Chaussee de Namur', '', '')\n        self.write_and_assert(p1, {'street_name': 'Chee de Namur', 'street_number': '40'}, 'Chee de Namur, 40', 'Chee de Namur', '40', '')\n        self.write_and_assert(p1, {'street_number2': '4'}, 'Chee de Namur, 40/4', 'Chee de Namur', '40', '4')\n        #we don't recompute the street fields when we change the country\n        self.write_and_assert(p1, {'country_id': self.env.ref('base.us').id}, 'Chee de Namur, 40/4', 'Chee de Namur', '40', '4')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_street_fields.py", "id": "4f7705881355f944c720f82c81438134", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/base_address_extended/tests/test_street_fields.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}