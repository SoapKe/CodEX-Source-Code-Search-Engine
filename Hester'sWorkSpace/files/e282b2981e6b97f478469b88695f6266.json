{"author": "XX-net", "code": "\n\n\nimport os\nimport sys\n\ncurrent_path = os.path.dirname(os.path.abspath(__file__))\nhelper_path = os.path.join(current_path, os.pardir, os.pardir, os.pardir, 'data', 'launcher', 'helper')\n\nif __name__ == \"__main__\":\n    python_path = os.path.abspath( os.path.join(current_path, os.pardir, 'python27', '1.0'))\n    noarch_lib = os.path.abspath( os.path.join(python_path, 'lib', 'noarch'))\n    sys.path.append(noarch_lib)\n    osx_lib = os.path.join(python_path, 'lib', 'darwin')\n    sys.path.append(osx_lib)\n    extra_lib = \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/PyObjC\"\n    sys.path.append(extra_lib)\n\nimport config\nimport module_init\nimport subprocess\nimport webbrowser\n\nfrom xlog import getLogger\nxlog = getLogger(\"launcher\")\n\nimport AppKit\nimport SystemConfiguration\nfrom PyObjCTools import AppHelper\n\nclass MacTrayObject(AppKit.NSObject):\n    def __init__(self):\n        pass\n\n    def applicationDidFinishLaunching_(self, notification):\n        setupHelper()\n        loadConfig()\n        self.setupUI()\n        self.registerObserver()\n\n    def setupUI(self):\n        self.statusbar = AppKit.NSStatusBar.systemStatusBar()\n        self.statusitem = self.statusbar.statusItemWithLength_(AppKit.NSSquareStatusItemLength) \n\n        \n        icon_path = os.path.join(current_path, \"web_ui\", \"favicon-mac.ico\")\n        image = AppKit.NSImage.alloc().initByReferencingFile_(icon_path.decode('utf-8'))\n        image.setScalesWhenResized_(True)\n        image.setSize_((20, 20))\n        self.statusitem.setImage_(image)\n\n        \n        self.statusitem.setHighlightMode_(1)\n        self.statusitem.setToolTip_(\"XX-Net\")\n\n        \n        proxyState = getProxyState(currentService)\n\n        \n        self.menu = AppKit.NSMenu.alloc().initWithTitle_('XX-Net')\n\n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Config', 'config:', '')\n        self.menu.addItem_(menuitem)\n\n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_(getCurrentServiceMenuItemTitle(), None, '')\n        self.menu.addItem_(menuitem)\n        self.currentServiceMenuItem = menuitem\n\n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Enable Auto GAEProxy', 'enableAutoProxy:', '')\n        if proxyState == 'pac':\n            menuitem.setState_(AppKit.NSOnState)\n        self.menu.addItem_(menuitem)\n        self.autoGaeProxyMenuItem = menuitem\n\n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Enable Global GAEProxy', 'enableGlobalProxy:', '')\n        if proxyState == 'gae':\n            menuitem.setState_(AppKit.NSOnState)\n        self.menu.addItem_(menuitem)\n        self.globalGaeProxyMenuItem = menuitem\n\n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Enable Global X-Tunnel', 'enableGlobalXTunnel:', '')\n        if proxyState == 'x_tunnel':\n            menuitem.setState_(AppKit.NSOnState)\n        self.menu.addItem_(menuitem)\n        self.globalXTunnelMenuItem = menuitem\n\n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Enable Global Smart-Router', 'enableGlobalSmartRouter:', '')\n        if proxyState == 'smart_router':\n            menuitem.setState_(AppKit.NSOnState)\n        self.menu.addItem_(menuitem)\n        self.globalSmartRouterMenuItem = menuitem\n\n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Disable GAEProxy', 'disableProxy:', '')\n        if proxyState == 'disable':\n            menuitem.setState_(AppKit.NSOnState)\n        self.menu.addItem_(menuitem)\n        self.disableGaeProxyMenuItem = menuitem\n\n        \n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Reset Each Module', 'restartEachModule:', '')\n        self.menu.addItem_(menuitem)\n        \n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Quit', 'windowWillClose:', '')\n        self.menu.addItem_(menuitem)\n        \n        self.statusitem.setMenu_(self.menu)\n\n        \n        AppKit.NSApp.setActivationPolicy_(AppKit.NSApplicationActivationPolicyProhibited)\n\n    def updateStatusBarMenu(self):\n        self.currentServiceMenuItem.setTitle_(getCurrentServiceMenuItemTitle())\n\n        \n        self.autoGaeProxyMenuItem.setState_(AppKit.NSOffState)\n        self.globalGaeProxyMenuItem.setState_(AppKit.NSOffState)\n        self.globalXTunnelMenuItem.setState_(AppKit.NSOffState)\n        self.globalSmartRouterMenuItem.setState_(AppKit.NSOffState)\n        self.disableGaeProxyMenuItem.setState_(AppKit.NSOffState)\n\n        \n        proxyState = getProxyState(currentService)\n\n        \n        if proxyState == 'pac':\n            self.autoGaeProxyMenuItem.setState_(AppKit.NSOnState)\n        elif proxyState == 'gae':\n            self.globalGaeProxyMenuItem.setState_(AppKit.NSOnState)\n        elif proxyState == 'x_tunnel':\n            self.globalXTunnelMenuItem.setState_(AppKit.NSOnState)\n        elif proxyState == 'smart_router':\n            self.globalSmartRouterMenuItem.setState_(AppKit.NSOnState)\n        elif proxyState == 'disable':\n            self.disableGaeProxyMenuItem.setState_(AppKit.NSOnState)\n\n        \n        self.menu.update()\n\n    def validateMenuItem_(self, menuItem):\n        return currentService or (menuItem != self.autoGaeProxyMenuItem and\n                                  menuItem != self.globalGaeProxyMenuItem and\n                                  menuItem != self.globalXTunnelMenuItem and\n                                  menuItem != self.globalSmartRouterMenuItem and\n                                  menuItem != self.disableGaeProxyMenuItem)\n\n    def presentAlert_withTitle_(self, msg, title):\n        self.performSelectorOnMainThread_withObject_waitUntilDone_('presentAlertWithInfo:', [title, msg], True)\n        return self.alertReturn\n\n    def presentAlertWithInfo_(self, info):\n        alert = AppKit.NSAlert.alloc().init()\n        alert.setMessageText_(info[0])\n        alert.setInformativeText_(info[1])\n        alert.addButtonWithTitle_(\"OK\")\n        alert.addButtonWithTitle_(\"Cancel\")\n        self.alertReturn = alert.runModal() == AppKit.NSAlertFirstButtonReturn\n\n    def registerObserver(self):\n        nc = AppKit.NSWorkspace.sharedWorkspace().notificationCenter()\n        nc.addObserver_selector_name_object_(self, 'windowWillClose:', AppKit.NSWorkspaceWillPowerOffNotification, None)\n\n    def windowWillClose_(self, notification):\n        executeResult = subprocess.check_output(['networksetup', '-listallnetworkservices'])\n        services = executeResult.split('\\n')\n        services = filter(lambda service : service and service.find('*') == -1 and getProxyState(service) != 'disable', services) \n\n        if len(services) > 0:\n            try:\n                map(helperDisableAutoProxy, services)\n                map(helperDisableGlobalProxy, services)\n            except:\n                disableAutoProxyCommand   = ';'.join(map(getDisableAutoProxyCommand, services))\n                disableGlobalProxyCommand = ';'.join(map(getDisableGlobalProxyCommand, services))\n                executeCommand            = 'do shell script \"%s;%s\" with administrator privileges' % (disableAutoProxyCommand, disableGlobalProxyCommand)\n\n                xlog.info(\"try disable proxy:%s\", executeCommand)\n                subprocess.call(['osascript', '-e', executeCommand])\n\n        module_init.stop_all()\n        os._exit(0)\n        AppKit.NSApp.terminate_(self)\n\n    def config_(self, notification):\n        host_port = config.get([\"modules\", \"launcher\", \"control_port\"], 8085)\n        webbrowser.open_new(\"http://127.0.0.1:%s/\" % host_port)\n\n    def restartEachModule_(self, _):\n        module_init.stop_all()\n        module_init.start_all_auto()\n\n    def enableAutoProxy_(self, _):\n        try:\n            helperDisableGlobalProxy(currentService)\n            helperEnableAutoProxy(currentService)\n        except:\n            disableGlobalProxyCommand = getDisableGlobalProxyCommand(currentService)\n            enableAutoProxyCommand    = getEnableAutoProxyCommand(currentService)\n            executeCommand            = 'do shell script \"%s;%s\" with administrator privileges' % (disableGlobalProxyCommand, enableAutoProxyCommand)\n\n            xlog.info(\"try enable auto proxy:%s\", executeCommand)\n            subprocess.call(['osascript', '-e', executeCommand])\n        config.set([\"modules\", \"launcher\", \"proxy\"], \"pac\")\n        config.save()\n        self.updateStatusBarMenu()\n\n    def enableGlobalProxy_(self, _):\n        try:\n            helperDisableAutoProxy(currentService)\n            helperEnableGlobalProxy(currentService)\n        except:\n            disableAutoProxyCommand   = getDisableAutoProxyCommand(currentService)\n            enableGlobalProxyCommand  = getEnableGlobalProxyCommand(currentService)\n            executeCommand            = 'do shell script \"%s;%s\" with administrator privileges' % (disableAutoProxyCommand, enableGlobalProxyCommand)\n\n            xlog.info(\"try enable global proxy:%s\", executeCommand)\n            subprocess.call(['osascript', '-e', executeCommand])\n        config.set([\"modules\", \"launcher\", \"proxy\"], \"gae\")\n        config.save()\n        self.updateStatusBarMenu()\n\n    def enableGlobalXTunnel_(self, _):\n        try:\n            helperDisableAutoProxy(currentService)\n            helperEnableXTunnelProxy(currentService)\n        except:\n            disableAutoProxyCommand   = getDisableAutoProxyCommand(currentService)\n            enableXTunnelProxyCommand  = getEnableXTunnelProxyCommand(currentService)\n            executeCommand            = 'do shell script \"%s;%s\" with administrator privileges' % (disableAutoProxyCommand, enableXTunnelProxyCommand)\n\n            xlog.info(\"try enable global x-tunnel proxy:%s\", executeCommand)\n            subprocess.call(['osascript', '-e', executeCommand])\n        config.set([\"modules\", \"launcher\", \"proxy\"], \"x_tunnel\")\n        config.save()\n        self.updateStatusBarMenu()\n\n    def enableGlobalSmartRouter_(self, _):\n        try:\n            helperDisableAutoProxy(currentService)\n            helperEnableSmartRouterProxy(currentService)\n        except:\n            disableAutoProxyCommand   = getDisableAutoProxyCommand(currentService)\n            enableSmartRouterCommand  = getEnableSmartRouterProxyCommand(currentService)\n            executeCommand            = 'do shell script \"%s;%s\" with administrator privileges' % (disableAutoProxyCommand, enableSmartRouterCommand)\n\n            xlog.info(\"try enable global smart-router proxy:%s\", executeCommand)\n            subprocess.call(['osascript', '-e', executeCommand])\n        config.set([\"modules\", \"launcher\", \"proxy\"], \"smart_router\")\n        config.save()\n        self.updateStatusBarMenu()\n\n    def disableProxy_(self, _):\n        try:\n            helperDisableAutoProxy(currentService)\n            helperDisableGlobalProxy(currentService)\n        except:\n            disableAutoProxyCommand   = getDisableAutoProxyCommand(currentService)\n            disableGlobalProxyCommand = getDisableGlobalProxyCommand(currentService)\n            executeCommand            = 'do shell script \"%s;%s\" with administrator privileges' % (disableAutoProxyCommand, disableGlobalProxyCommand)\n            \n            xlog.info(\"try disable proxy:%s\", executeCommand)\n            subprocess.call(['osascript', '-e', executeCommand])\n        config.set([\"modules\", \"launcher\", \"proxy\"], \"disable\")\n        config.save()\n        self.updateStatusBarMenu()\n\n\ndef setupHelper():\n    try:\n        with open(os.devnull) as devnull:\n            subprocess.check_call(helper_path, stderr=devnull)\n    except:\n        rmCommand      = \"rm \\\\\\\"%s\\\\\\\"\" % helper_path\n        cpCommand      = \"cp \\\\\\\"%s\\\\\\\" \\\\\\\"%s\\\\\\\"\" % (os.path.join(current_path, 'mac_helper'), helper_path)\n        chownCommand   = \"chown root \\\\\\\"%s\\\\\\\"\" % helper_path\n        chmodCommand   = \"chmod 4755 \\\\\\\"%s\\\\\\\"\" % helper_path\n        executeCommand = 'do shell script \"%s;%s;%s;%s\" with administrator privileges' % (rmCommand, cpCommand, chownCommand, chmodCommand)\n\n        xlog.info(\"try setup helper:%s\", executeCommand)\n        subprocess.call(['osascript', '-e', executeCommand])\n\ndef getCurrentServiceMenuItemTitle():\n    if currentService:\n        return 'Connection: %s' % currentService\n    else:\n        return 'Connection: None'\n\ndef getProxyState(service):\n    if not service:\n        return\n\n    \n    executeResult = subprocess.check_output(['networksetup', '-getautoproxyurl', service])\n    if ( executeResult.find('http://127.0.0.1:8086/proxy.pac\\nEnabled: Yes') != -1 ):\n        return \"pac\"\n\n    \n    executeResult = subprocess.check_output(['networksetup', '-getwebproxy', service])\n    if ( executeResult.find('Enabled: Yes\\nServer: 127.0.0.1\\nPort: 8087') != -1 ):\n        return \"gae\"\n\n    \n    if ( executeResult.find('Enabled: Yes\\nServer: 127.0.0.1\\nPort: 1080') != -1 ):\n        return \"x_tunnel\"\n\n    if ( executeResult.find('Enabled: Yes\\nServer: 127.0.0.1\\nPort: 8086') != -1 ):\n        return \"smart_router\"\n\n    return \"disable\"\n\n\ndef getEnableAutoProxyCommand(service):\n    return \"networksetup -setautoproxyurl \\\\\\\"%s\\\\\\\" \\\\\\\"http://127.0.0.1:8086/proxy.pac\\\\\\\"\" % service\n\ndef getDisableAutoProxyCommand(service):\n    return \"networksetup -setautoproxystate \\\\\\\"%s\\\\\\\" off\" % service\n\ndef getEnableGlobalProxyCommand(service):\n    enableHttpProxyCommand   = \"networksetup -setwebproxy \\\\\\\"%s\\\\\\\" 127.0.0.1 8087\" % service\n    enableHttpsProxyCommand  = \"networksetup -setsecurewebproxy \\\\\\\"%s\\\\\\\" 127.0.0.1 8087\" % service\n    return \"%s;%s\" % (enableHttpProxyCommand, enableHttpsProxyCommand)\n\ndef getEnableXTunnelProxyCommand(service):\n    enableHttpProxyCommand   = \"networksetup -setwebproxy \\\\\\\"%s\\\\\\\" 127.0.0.1 1080\" % service\n    enableHttpsProxyCommand  = \"networksetup -setsecurewebproxy \\\\\\\"%s\\\\\\\" 127.0.0.1 1080\" % service\n    return \"%s;%s\" % (enableHttpProxyCommand, enableHttpsProxyCommand)\n\ndef getEnableSmartRouterProxyCommand(service):\n    enableHttpProxyCommand   = \"networksetup -setwebproxy \\\\\\\"%s\\\\\\\" 127.0.0.1 8086\" % service\n    enableHttpsProxyCommand  = \"networksetup -setsecurewebproxy \\\\\\\"%s\\\\\\\" 127.0.0.1 8086\" % service\n    return \"%s;%s\" % (enableHttpProxyCommand, enableHttpsProxyCommand)\n\ndef getDisableGlobalProxyCommand(service):\n    disableHttpProxyCommand  = \"networksetup -setwebproxystate \\\\\\\"%s\\\\\\\" off\" % service\n    disableHttpsProxyCommand = \"networksetup -setsecurewebproxystate \\\\\\\"%s\\\\\\\" off\" % service\n    return \"%s;%s\" % (disableHttpProxyCommand, disableHttpsProxyCommand)\n\n\ndef helperEnableAutoProxy(service):\n    subprocess.check_call([helper_path, 'enableauto', service, 'http://127.0.0.1:8086/proxy.pac'])\n\ndef helperDisableAutoProxy(service):\n    subprocess.check_call([helper_path, 'disableauto', service])\n\ndef helperEnableGlobalProxy(service):\n    subprocess.check_call([helper_path, 'enablehttp', service, '127.0.0.1', '8087'])\n    subprocess.check_call([helper_path, 'enablehttps', service, '127.0.0.1', '8087'])\n\ndef helperEnableXTunnelProxy(service):\n    subprocess.check_call([helper_path, 'enablehttp', service, '127.0.0.1', '1080'])\n    subprocess.check_call([helper_path, 'enablehttps', service, '127.0.0.1', '1080'])\n\ndef helperEnableSmartRouterProxy(service):\n    subprocess.check_call([helper_path, 'enablehttp', service, '127.0.0.1', '8086'])\n    subprocess.check_call([helper_path, 'enablehttps', service, '127.0.0.1', '8086'])\n\ndef helperDisableGlobalProxy(service):\n    subprocess.check_call([helper_path, 'disablehttp', service])\n    subprocess.check_call([helper_path, 'disablehttps', service])\n\ndef loadConfig():\n    if not currentService:\n        return\n    proxy_setting = config.get([\"modules\", \"launcher\", \"proxy\"], \"smart_router\")\n    if getProxyState(currentService) == proxy_setting:\n        return\n    try:\n        if proxy_setting == \"pac\":\n            helperDisableGlobalProxy(currentService)\n            helperEnableAutoProxy(currentService)\n        elif proxy_setting == \"gae\":\n            helperDisableAutoProxy(currentService)\n            helperEnableGlobalProxy(currentService)\n        elif proxy_setting == \"x_tunnel\":\n            helperDisableAutoProxy(currentService)\n            helperEnableXTunnelProxy(currentService)\n        elif proxy_setting == \"smart_router\":\n            helperDisableAutoProxy(currentService)\n            helperEnableSmartRouterProxy(currentService)\n        elif proxy_setting == \"disable\":\n            helperDisableAutoProxy(currentService)\n            helperDisableGlobalProxy(currentService)\n        else:\n            xlog.warn(\"proxy_setting:%r\", proxy_setting)\n    except:\n        xlog.warn(\"helper failed, please manually reset proxy settings after switching connection\")\n\n\nsys_tray = MacTrayObject.alloc().init()\ncurrentService = None\n\ndef fetchCurrentService(protocol):\n    global currentService\n    status = SystemConfiguration.SCDynamicStoreCopyValue(None, \"State:/Network/Global/\" + protocol)\n    if not status:\n        currentService = None\n        return\n    serviceID = status['PrimaryService']\n    service = SystemConfiguration.SCDynamicStoreCopyValue(None, \"Setup:/Network/Service/\" + serviceID)\n    if not service:\n        currentService = None\n        return\n    currentService = service['UserDefinedName']\n\n@AppKit.objc.callbackFor(AppKit.CFNotificationCenterAddObserver)\ndef networkChanged(center, observer, name, object, userInfo):\n    fetchCurrentService('IPv4')\n    loadConfig()\n    sys_tray.updateStatusBarMenu()\n\n\ndef serve_forever():\n    app = AppKit.NSApplication.sharedApplication()\n    app.setDelegate_(sys_tray)\n\n    \n    nc = AppKit.CFNotificationCenterGetDarwinNotifyCenter()\n    AppKit.CFNotificationCenterAddObserver(nc, None, networkChanged, \"com.apple.system.config.network_change\", None, AppKit.CFNotificationSuspensionBehaviorDeliverImmediately)\n\n    fetchCurrentService('IPv4')\n    AppHelper.runEventLoop()\n\ndef main():\n    serve_forever()\n\nif __name__ == '__main__':\n    main()\n", "comments": "   usr bin env python    coding utf 8   nssquarestatusitemlength  nsvariablestatusitemlength    set initial image icon    let highlight upon clicking    get current selected mode    build simple menu    reset menu item    default event    bind status item    hide dock icon    remove tick all menu items    get current selected mode    update tick menu item    trigger autovalidation    remove disabled services empty lines    check auto proxy enabled    check global proxy enabled    check global proxy enabled    generate commands apple script    call helper    note  following code run class    listen network change ", "content": "#!/usr/bin/env python\n# coding:utf-8\n\nimport os\nimport sys\n\ncurrent_path = os.path.dirname(os.path.abspath(__file__))\nhelper_path = os.path.join(current_path, os.pardir, os.pardir, os.pardir, 'data', 'launcher', 'helper')\n\nif __name__ == \"__main__\":\n    python_path = os.path.abspath( os.path.join(current_path, os.pardir, 'python27', '1.0'))\n    noarch_lib = os.path.abspath( os.path.join(python_path, 'lib', 'noarch'))\n    sys.path.append(noarch_lib)\n    osx_lib = os.path.join(python_path, 'lib', 'darwin')\n    sys.path.append(osx_lib)\n    extra_lib = \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/PyObjC\"\n    sys.path.append(extra_lib)\n\nimport config\nimport module_init\nimport subprocess\nimport webbrowser\n\nfrom xlog import getLogger\nxlog = getLogger(\"launcher\")\n\nimport AppKit\nimport SystemConfiguration\nfrom PyObjCTools import AppHelper\n\nclass MacTrayObject(AppKit.NSObject):\n    def __init__(self):\n        pass\n\n    def applicationDidFinishLaunching_(self, notification):\n        setupHelper()\n        loadConfig()\n        self.setupUI()\n        self.registerObserver()\n\n    def setupUI(self):\n        self.statusbar = AppKit.NSStatusBar.systemStatusBar()\n        self.statusitem = self.statusbar.statusItemWithLength_(AppKit.NSSquareStatusItemLength) #NSSquareStatusItemLength #NSVariableStatusItemLength\n\n        # Set initial image icon\n        icon_path = os.path.join(current_path, \"web_ui\", \"favicon-mac.ico\")\n        image = AppKit.NSImage.alloc().initByReferencingFile_(icon_path.decode('utf-8'))\n        image.setScalesWhenResized_(True)\n        image.setSize_((20, 20))\n        self.statusitem.setImage_(image)\n\n        # Let it highlight upon clicking\n        self.statusitem.setHighlightMode_(1)\n        self.statusitem.setToolTip_(\"XX-Net\")\n\n        # Get current selected mode\n        proxyState = getProxyState(currentService)\n\n        # Build a very simple menu\n        self.menu = AppKit.NSMenu.alloc().initWithTitle_('XX-Net')\n\n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Config', 'config:', '')\n        self.menu.addItem_(menuitem)\n\n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_(getCurrentServiceMenuItemTitle(), None, '')\n        self.menu.addItem_(menuitem)\n        self.currentServiceMenuItem = menuitem\n\n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Enable Auto GAEProxy', 'enableAutoProxy:', '')\n        if proxyState == 'pac':\n            menuitem.setState_(AppKit.NSOnState)\n        self.menu.addItem_(menuitem)\n        self.autoGaeProxyMenuItem = menuitem\n\n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Enable Global GAEProxy', 'enableGlobalProxy:', '')\n        if proxyState == 'gae':\n            menuitem.setState_(AppKit.NSOnState)\n        self.menu.addItem_(menuitem)\n        self.globalGaeProxyMenuItem = menuitem\n\n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Enable Global X-Tunnel', 'enableGlobalXTunnel:', '')\n        if proxyState == 'x_tunnel':\n            menuitem.setState_(AppKit.NSOnState)\n        self.menu.addItem_(menuitem)\n        self.globalXTunnelMenuItem = menuitem\n\n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Enable Global Smart-Router', 'enableGlobalSmartRouter:', '')\n        if proxyState == 'smart_router':\n            menuitem.setState_(AppKit.NSOnState)\n        self.menu.addItem_(menuitem)\n        self.globalSmartRouterMenuItem = menuitem\n\n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Disable GAEProxy', 'disableProxy:', '')\n        if proxyState == 'disable':\n            menuitem.setState_(AppKit.NSOnState)\n        self.menu.addItem_(menuitem)\n        self.disableGaeProxyMenuItem = menuitem\n\n        # Reset Menu Item\n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Reset Each Module', 'restartEachModule:', '')\n        self.menu.addItem_(menuitem)\n        # Default event\n        menuitem = AppKit.NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Quit', 'windowWillClose:', '')\n        self.menu.addItem_(menuitem)\n        # Bind it to the status item\n        self.statusitem.setMenu_(self.menu)\n\n        # Hide dock icon\n        AppKit.NSApp.setActivationPolicy_(AppKit.NSApplicationActivationPolicyProhibited)\n\n    def updateStatusBarMenu(self):\n        self.currentServiceMenuItem.setTitle_(getCurrentServiceMenuItemTitle())\n\n        # Remove Tick before All Menu Items\n        self.autoGaeProxyMenuItem.setState_(AppKit.NSOffState)\n        self.globalGaeProxyMenuItem.setState_(AppKit.NSOffState)\n        self.globalXTunnelMenuItem.setState_(AppKit.NSOffState)\n        self.globalSmartRouterMenuItem.setState_(AppKit.NSOffState)\n        self.disableGaeProxyMenuItem.setState_(AppKit.NSOffState)\n\n        # Get current selected mode\n        proxyState = getProxyState(currentService)\n\n        # Update Tick before Menu Item\n        if proxyState == 'pac':\n            self.autoGaeProxyMenuItem.setState_(AppKit.NSOnState)\n        elif proxyState == 'gae':\n            self.globalGaeProxyMenuItem.setState_(AppKit.NSOnState)\n        elif proxyState == 'x_tunnel':\n            self.globalXTunnelMenuItem.setState_(AppKit.NSOnState)\n        elif proxyState == 'smart_router':\n            self.globalSmartRouterMenuItem.setState_(AppKit.NSOnState)\n        elif proxyState == 'disable':\n            self.disableGaeProxyMenuItem.setState_(AppKit.NSOnState)\n\n        # Trigger autovalidation\n        self.menu.update()\n\n    def validateMenuItem_(self, menuItem):\n        return currentService or (menuItem != self.autoGaeProxyMenuItem and\n                                  menuItem != self.globalGaeProxyMenuItem and\n                                  menuItem != self.globalXTunnelMenuItem and\n                                  menuItem != self.globalSmartRouterMenuItem and\n                                  menuItem != self.disableGaeProxyMenuItem)\n\n    def presentAlert_withTitle_(self, msg, title):\n        self.performSelectorOnMainThread_withObject_waitUntilDone_('presentAlertWithInfo:', [title, msg], True)\n        return self.alertReturn\n\n    def presentAlertWithInfo_(self, info):\n        alert = AppKit.NSAlert.alloc().init()\n        alert.setMessageText_(info[0])\n        alert.setInformativeText_(info[1])\n        alert.addButtonWithTitle_(\"OK\")\n        alert.addButtonWithTitle_(\"Cancel\")\n        self.alertReturn = alert.runModal() == AppKit.NSAlertFirstButtonReturn\n\n    def registerObserver(self):\n        nc = AppKit.NSWorkspace.sharedWorkspace().notificationCenter()\n        nc.addObserver_selector_name_object_(self, 'windowWillClose:', AppKit.NSWorkspaceWillPowerOffNotification, None)\n\n    def windowWillClose_(self, notification):\n        executeResult = subprocess.check_output(['networksetup', '-listallnetworkservices'])\n        services = executeResult.split('\\n')\n        services = filter(lambda service : service and service.find('*') == -1 and getProxyState(service) != 'disable', services) # Remove disabled services and empty lines\n\n        if len(services) > 0:\n            try:\n                map(helperDisableAutoProxy, services)\n                map(helperDisableGlobalProxy, services)\n            except:\n                disableAutoProxyCommand   = ';'.join(map(getDisableAutoProxyCommand, services))\n                disableGlobalProxyCommand = ';'.join(map(getDisableGlobalProxyCommand, services))\n                executeCommand            = 'do shell script \"%s;%s\" with administrator privileges' % (disableAutoProxyCommand, disableGlobalProxyCommand)\n\n                xlog.info(\"try disable proxy:%s\", executeCommand)\n                subprocess.call(['osascript', '-e', executeCommand])\n\n        module_init.stop_all()\n        os._exit(0)\n        AppKit.NSApp.terminate_(self)\n\n    def config_(self, notification):\n        host_port = config.get([\"modules\", \"launcher\", \"control_port\"], 8085)\n        webbrowser.open_new(\"http://127.0.0.1:%s/\" % host_port)\n\n    def restartEachModule_(self, _):\n        module_init.stop_all()\n        module_init.start_all_auto()\n\n    def enableAutoProxy_(self, _):\n        try:\n            helperDisableGlobalProxy(currentService)\n            helperEnableAutoProxy(currentService)\n        except:\n            disableGlobalProxyCommand = getDisableGlobalProxyCommand(currentService)\n            enableAutoProxyCommand    = getEnableAutoProxyCommand(currentService)\n            executeCommand            = 'do shell script \"%s;%s\" with administrator privileges' % (disableGlobalProxyCommand, enableAutoProxyCommand)\n\n            xlog.info(\"try enable auto proxy:%s\", executeCommand)\n            subprocess.call(['osascript', '-e', executeCommand])\n        config.set([\"modules\", \"launcher\", \"proxy\"], \"pac\")\n        config.save()\n        self.updateStatusBarMenu()\n\n    def enableGlobalProxy_(self, _):\n        try:\n            helperDisableAutoProxy(currentService)\n            helperEnableGlobalProxy(currentService)\n        except:\n            disableAutoProxyCommand   = getDisableAutoProxyCommand(currentService)\n            enableGlobalProxyCommand  = getEnableGlobalProxyCommand(currentService)\n            executeCommand            = 'do shell script \"%s;%s\" with administrator privileges' % (disableAutoProxyCommand, enableGlobalProxyCommand)\n\n            xlog.info(\"try enable global proxy:%s\", executeCommand)\n            subprocess.call(['osascript', '-e', executeCommand])\n        config.set([\"modules\", \"launcher\", \"proxy\"], \"gae\")\n        config.save()\n        self.updateStatusBarMenu()\n\n    def enableGlobalXTunnel_(self, _):\n        try:\n            helperDisableAutoProxy(currentService)\n            helperEnableXTunnelProxy(currentService)\n        except:\n            disableAutoProxyCommand   = getDisableAutoProxyCommand(currentService)\n            enableXTunnelProxyCommand  = getEnableXTunnelProxyCommand(currentService)\n            executeCommand            = 'do shell script \"%s;%s\" with administrator privileges' % (disableAutoProxyCommand, enableXTunnelProxyCommand)\n\n            xlog.info(\"try enable global x-tunnel proxy:%s\", executeCommand)\n            subprocess.call(['osascript', '-e', executeCommand])\n        config.set([\"modules\", \"launcher\", \"proxy\"], \"x_tunnel\")\n        config.save()\n        self.updateStatusBarMenu()\n\n    def enableGlobalSmartRouter_(self, _):\n        try:\n            helperDisableAutoProxy(currentService)\n            helperEnableSmartRouterProxy(currentService)\n        except:\n            disableAutoProxyCommand   = getDisableAutoProxyCommand(currentService)\n            enableSmartRouterCommand  = getEnableSmartRouterProxyCommand(currentService)\n            executeCommand            = 'do shell script \"%s;%s\" with administrator privileges' % (disableAutoProxyCommand, enableSmartRouterCommand)\n\n            xlog.info(\"try enable global smart-router proxy:%s\", executeCommand)\n            subprocess.call(['osascript', '-e', executeCommand])\n        config.set([\"modules\", \"launcher\", \"proxy\"], \"smart_router\")\n        config.save()\n        self.updateStatusBarMenu()\n\n    def disableProxy_(self, _):\n        try:\n            helperDisableAutoProxy(currentService)\n            helperDisableGlobalProxy(currentService)\n        except:\n            disableAutoProxyCommand   = getDisableAutoProxyCommand(currentService)\n            disableGlobalProxyCommand = getDisableGlobalProxyCommand(currentService)\n            executeCommand            = 'do shell script \"%s;%s\" with administrator privileges' % (disableAutoProxyCommand, disableGlobalProxyCommand)\n            \n            xlog.info(\"try disable proxy:%s\", executeCommand)\n            subprocess.call(['osascript', '-e', executeCommand])\n        config.set([\"modules\", \"launcher\", \"proxy\"], \"disable\")\n        config.save()\n        self.updateStatusBarMenu()\n\n\ndef setupHelper():\n    try:\n        with open(os.devnull) as devnull:\n            subprocess.check_call(helper_path, stderr=devnull)\n    except:\n        rmCommand      = \"rm \\\\\\\"%s\\\\\\\"\" % helper_path\n        cpCommand      = \"cp \\\\\\\"%s\\\\\\\" \\\\\\\"%s\\\\\\\"\" % (os.path.join(current_path, 'mac_helper'), helper_path)\n        chownCommand   = \"chown root \\\\\\\"%s\\\\\\\"\" % helper_path\n        chmodCommand   = \"chmod 4755 \\\\\\\"%s\\\\\\\"\" % helper_path\n        executeCommand = 'do shell script \"%s;%s;%s;%s\" with administrator privileges' % (rmCommand, cpCommand, chownCommand, chmodCommand)\n\n        xlog.info(\"try setup helper:%s\", executeCommand)\n        subprocess.call(['osascript', '-e', executeCommand])\n\ndef getCurrentServiceMenuItemTitle():\n    if currentService:\n        return 'Connection: %s' % currentService\n    else:\n        return 'Connection: None'\n\ndef getProxyState(service):\n    if not service:\n        return\n\n    # Check if auto proxy is enabled\n    executeResult = subprocess.check_output(['networksetup', '-getautoproxyurl', service])\n    if ( executeResult.find('http://127.0.0.1:8086/proxy.pac\\nEnabled: Yes') != -1 ):\n        return \"pac\"\n\n    # Check if global proxy is enabled\n    executeResult = subprocess.check_output(['networksetup', '-getwebproxy', service])\n    if ( executeResult.find('Enabled: Yes\\nServer: 127.0.0.1\\nPort: 8087') != -1 ):\n        return \"gae\"\n\n    # Check if global proxy is enabled\n    if ( executeResult.find('Enabled: Yes\\nServer: 127.0.0.1\\nPort: 1080') != -1 ):\n        return \"x_tunnel\"\n\n    if ( executeResult.find('Enabled: Yes\\nServer: 127.0.0.1\\nPort: 8086') != -1 ):\n        return \"smart_router\"\n\n    return \"disable\"\n\n# Generate commands for Apple Script\ndef getEnableAutoProxyCommand(service):\n    return \"networksetup -setautoproxyurl \\\\\\\"%s\\\\\\\" \\\\\\\"http://127.0.0.1:8086/proxy.pac\\\\\\\"\" % service\n\ndef getDisableAutoProxyCommand(service):\n    return \"networksetup -setautoproxystate \\\\\\\"%s\\\\\\\" off\" % service\n\ndef getEnableGlobalProxyCommand(service):\n    enableHttpProxyCommand   = \"networksetup -setwebproxy \\\\\\\"%s\\\\\\\" 127.0.0.1 8087\" % service\n    enableHttpsProxyCommand  = \"networksetup -setsecurewebproxy \\\\\\\"%s\\\\\\\" 127.0.0.1 8087\" % service\n    return \"%s;%s\" % (enableHttpProxyCommand, enableHttpsProxyCommand)\n\ndef getEnableXTunnelProxyCommand(service):\n    enableHttpProxyCommand   = \"networksetup -setwebproxy \\\\\\\"%s\\\\\\\" 127.0.0.1 1080\" % service\n    enableHttpsProxyCommand  = \"networksetup -setsecurewebproxy \\\\\\\"%s\\\\\\\" 127.0.0.1 1080\" % service\n    return \"%s;%s\" % (enableHttpProxyCommand, enableHttpsProxyCommand)\n\ndef getEnableSmartRouterProxyCommand(service):\n    enableHttpProxyCommand   = \"networksetup -setwebproxy \\\\\\\"%s\\\\\\\" 127.0.0.1 8086\" % service\n    enableHttpsProxyCommand  = \"networksetup -setsecurewebproxy \\\\\\\"%s\\\\\\\" 127.0.0.1 8086\" % service\n    return \"%s;%s\" % (enableHttpProxyCommand, enableHttpsProxyCommand)\n\ndef getDisableGlobalProxyCommand(service):\n    disableHttpProxyCommand  = \"networksetup -setwebproxystate \\\\\\\"%s\\\\\\\" off\" % service\n    disableHttpsProxyCommand = \"networksetup -setsecurewebproxystate \\\\\\\"%s\\\\\\\" off\" % service\n    return \"%s;%s\" % (disableHttpProxyCommand, disableHttpsProxyCommand)\n\n# Call helper\ndef helperEnableAutoProxy(service):\n    subprocess.check_call([helper_path, 'enableauto', service, 'http://127.0.0.1:8086/proxy.pac'])\n\ndef helperDisableAutoProxy(service):\n    subprocess.check_call([helper_path, 'disableauto', service])\n\ndef helperEnableGlobalProxy(service):\n    subprocess.check_call([helper_path, 'enablehttp', service, '127.0.0.1', '8087'])\n    subprocess.check_call([helper_path, 'enablehttps', service, '127.0.0.1', '8087'])\n\ndef helperEnableXTunnelProxy(service):\n    subprocess.check_call([helper_path, 'enablehttp', service, '127.0.0.1', '1080'])\n    subprocess.check_call([helper_path, 'enablehttps', service, '127.0.0.1', '1080'])\n\ndef helperEnableSmartRouterProxy(service):\n    subprocess.check_call([helper_path, 'enablehttp', service, '127.0.0.1', '8086'])\n    subprocess.check_call([helper_path, 'enablehttps', service, '127.0.0.1', '8086'])\n\ndef helperDisableGlobalProxy(service):\n    subprocess.check_call([helper_path, 'disablehttp', service])\n    subprocess.check_call([helper_path, 'disablehttps', service])\n\ndef loadConfig():\n    if not currentService:\n        return\n    proxy_setting = config.get([\"modules\", \"launcher\", \"proxy\"], \"smart_router\")\n    if getProxyState(currentService) == proxy_setting:\n        return\n    try:\n        if proxy_setting == \"pac\":\n            helperDisableGlobalProxy(currentService)\n            helperEnableAutoProxy(currentService)\n        elif proxy_setting == \"gae\":\n            helperDisableAutoProxy(currentService)\n            helperEnableGlobalProxy(currentService)\n        elif proxy_setting == \"x_tunnel\":\n            helperDisableAutoProxy(currentService)\n            helperEnableXTunnelProxy(currentService)\n        elif proxy_setting == \"smart_router\":\n            helperDisableAutoProxy(currentService)\n            helperEnableSmartRouterProxy(currentService)\n        elif proxy_setting == \"disable\":\n            helperDisableAutoProxy(currentService)\n            helperDisableGlobalProxy(currentService)\n        else:\n            xlog.warn(\"proxy_setting:%r\", proxy_setting)\n    except:\n        xlog.warn(\"helper failed, please manually reset proxy settings after switching connection\")\n\n\nsys_tray = MacTrayObject.alloc().init()\ncurrentService = None\n\ndef fetchCurrentService(protocol):\n    global currentService\n    status = SystemConfiguration.SCDynamicStoreCopyValue(None, \"State:/Network/Global/\" + protocol)\n    if not status:\n        currentService = None\n        return\n    serviceID = status['PrimaryService']\n    service = SystemConfiguration.SCDynamicStoreCopyValue(None, \"Setup:/Network/Service/\" + serviceID)\n    if not service:\n        currentService = None\n        return\n    currentService = service['UserDefinedName']\n\n@AppKit.objc.callbackFor(AppKit.CFNotificationCenterAddObserver)\ndef networkChanged(center, observer, name, object, userInfo):\n    fetchCurrentService('IPv4')\n    loadConfig()\n    sys_tray.updateStatusBarMenu()\n\n# Note: the following code can't run in class\ndef serve_forever():\n    app = AppKit.NSApplication.sharedApplication()\n    app.setDelegate_(sys_tray)\n\n    # Listen for network change\n    nc = AppKit.CFNotificationCenterGetDarwinNotifyCenter()\n    AppKit.CFNotificationCenterAddObserver(nc, None, networkChanged, \"com.apple.system.config.network_change\", None, AppKit.CFNotificationSuspensionBehaviorDeliverImmediately)\n\n    fetchCurrentService('IPv4')\n    AppHelper.runEventLoop()\n\ndef main():\n    serve_forever()\n\nif __name__ == '__main__':\n    main()\n", "description": "a web proxy tool", "file_name": "mac_tray.py", "id": "e282b2981e6b97f478469b88695f6266", "language": "Python", "project_name": "XX-Net", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/XX-net-XX-Net/XX-net-XX-Net-673a005/code/default/launcher/mac_tray.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:03Z", "url": "https://github.com/XX-net/XX-Net", "wiki": true}