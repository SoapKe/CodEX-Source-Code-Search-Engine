{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo import api, fields, models\n\n\nclass SaleOrder(models.Model):\n    _inherit = \"sale.order\"\n\n    @api.multi\n    def action_confirm(self):\n        self.ensure_one()\n        res = super(SaleOrder, self).action_confirm()\n        # confirm registration if it was free (otherwise it will be confirmed once invoice fully paid)\n        self.order_line._update_registrations(confirm=self.amount_total == 0, cancel_to_draft=False)\n        if any(self.order_line.filtered(lambda line: line.event_id)):\n            return self.env['ir.actions.act_window'].with_context(default_sale_order_id=self.id).for_xml_id('event_sale', 'action_sale_order_event_registration')\n        return res\n\n\nclass SaleOrderLine(models.Model):\n\n    _inherit = 'sale.order.line'\n\n    event_id = fields.Many2one('event.event', string='Event',\n       help=\"Choose an event and it will automatically create a registration for this event.\")\n    event_ticket_id = fields.Many2one('event.event.ticket', string='Event Ticket', help=\"Choose \"\n        \"an event ticket and it will automatically create a registration for this event ticket.\")\n    event_ok = fields.Boolean(related='product_id.event_ok', readonly=True)\n\n    @api.multi\n    def _prepare_invoice_line(self, qty):\n        self.ensure_one()\n        res = super(SaleOrderLine, self)._prepare_invoice_line(qty)\n        if self.event_id:\n            res['name'] = '%s: %s' % (res.get('name', ''), self.event_id.name)\n        return res\n\n    @api.multi\n    def _update_registrations(self, confirm=True, cancel_to_draft=False, registration_data=None):\n        \n        Registration = self.env['event.registration']\n        registrations = Registration.search([('sale_order_line_id', 'in', self.ids), ('state', '!=', 'cancel')])\n        for so_line in self.filtered('event_id'):\n            existing_registrations = registrations.filtered(lambda self: self.sale_order_line_id.id == so_line.id)\n            if confirm:\n                existing_registrations.filtered(lambda self: self.state != 'open').confirm_registration()\n            if cancel_to_draft:\n                existing_registrations.filtered(lambda self: self.state == 'cancel').do_draft()\n\n            for count in range(int(so_line.product_uom_qty) - len(existing_registrations)):\n                registration = {}\n                if registration_data:\n                    registration = registration_data.pop()\n                \n                registration['sale_order_line_id'] = so_line\n                Registration.with_context(registration_force_draft=True).create(\n                    Registration._prepare_attendee_values(registration))\n        return True\n\n    @api.onchange('event_ticket_id')\n    def _onchange_event_ticket_id(self):\n        self.price_unit = (self.event_id.company_id or self.env.user.company_id).currency_id.compute(self.event_ticket_id.price, self.order_id.currency_id)\n", "comments": "    create update registrations linked sales order line  a sale         order line product uom qty attribute number         registrations linked line  this method update existing registrations         create new one missing one             coding  utf 8        confirm registration free (otherwise confirmed invoice fully paid)    tde check  auto confirmation ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo import api, fields, models\n\n\nclass SaleOrder(models.Model):\n    _inherit = \"sale.order\"\n\n    @api.multi\n    def action_confirm(self):\n        self.ensure_one()\n        res = super(SaleOrder, self).action_confirm()\n        # confirm registration if it was free (otherwise it will be confirmed once invoice fully paid)\n        self.order_line._update_registrations(confirm=self.amount_total == 0, cancel_to_draft=False)\n        if any(self.order_line.filtered(lambda line: line.event_id)):\n            return self.env['ir.actions.act_window'].with_context(default_sale_order_id=self.id).for_xml_id('event_sale', 'action_sale_order_event_registration')\n        return res\n\n\nclass SaleOrderLine(models.Model):\n\n    _inherit = 'sale.order.line'\n\n    event_id = fields.Many2one('event.event', string='Event',\n       help=\"Choose an event and it will automatically create a registration for this event.\")\n    event_ticket_id = fields.Many2one('event.event.ticket', string='Event Ticket', help=\"Choose \"\n        \"an event ticket and it will automatically create a registration for this event ticket.\")\n    event_ok = fields.Boolean(related='product_id.event_ok', readonly=True)\n\n    @api.multi\n    def _prepare_invoice_line(self, qty):\n        self.ensure_one()\n        res = super(SaleOrderLine, self)._prepare_invoice_line(qty)\n        if self.event_id:\n            res['name'] = '%s: %s' % (res.get('name', ''), self.event_id.name)\n        return res\n\n    @api.multi\n    def _update_registrations(self, confirm=True, cancel_to_draft=False, registration_data=None):\n        \"\"\" Create or update registrations linked to a sales order line. A sale\n        order line has a product_uom_qty attribute that will be the number of\n        registrations linked to this line. This method update existing registrations\n        and create new one for missing one. \"\"\"\n        Registration = self.env['event.registration']\n        registrations = Registration.search([('sale_order_line_id', 'in', self.ids), ('state', '!=', 'cancel')])\n        for so_line in self.filtered('event_id'):\n            existing_registrations = registrations.filtered(lambda self: self.sale_order_line_id.id == so_line.id)\n            if confirm:\n                existing_registrations.filtered(lambda self: self.state != 'open').confirm_registration()\n            if cancel_to_draft:\n                existing_registrations.filtered(lambda self: self.state == 'cancel').do_draft()\n\n            for count in range(int(so_line.product_uom_qty) - len(existing_registrations)):\n                registration = {}\n                if registration_data:\n                    registration = registration_data.pop()\n                # TDE CHECK: auto confirmation\n                registration['sale_order_line_id'] = so_line\n                Registration.with_context(registration_force_draft=True).create(\n                    Registration._prepare_attendee_values(registration))\n        return True\n\n    @api.onchange('event_ticket_id')\n    def _onchange_event_ticket_id(self):\n        self.price_unit = (self.event_id.company_id or self.env.user.company_id).currency_id.compute(self.event_ticket_id.price, self.order_id.currency_id)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "sale_order.py", "id": "3fee1c7d2bc773718c173632e024146a", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/event_sale/models/sale_order.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}