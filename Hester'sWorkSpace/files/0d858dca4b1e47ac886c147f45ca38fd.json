{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    determine_ext,\n    dict_get,\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    remove_end,\n    try_get,\n    xpath_text,\n)\n\nfrom .periscope import PeriscopeIE\n\n\nclass TwitterBaseIE(InfoExtractor):\n    def _extract_formats_from_vmap_url(self, vmap_url, video_id):\n        vmap_data = self._download_xml(vmap_url, video_id)\n        video_url = xpath_text(vmap_data, './/MediaFile').strip()\n        if determine_ext(video_url) == 'm3u8':\n            return self._extract_m3u8_formats(\n                video_url, video_id, ext='mp4', m3u8_id='hls',\n                entry_protocol='m3u8_native')\n        return [{\n            'url': video_url,\n        }]\n\n    @staticmethod\n    def _search_dimensions_in_video_url(a_format, video_url):\n        m = re.search(r'/(?P<width>\\d+)x(?P<height>\\d+)/', video_url)\n        if m:\n            a_format.update({\n                'width': int(m.group('width')),\n                'height': int(m.group('height')),\n            })\n\n\nclass TwitterCardIE(TwitterBaseIE):\n    IE_NAME = 'twitter:card'\n    _VALID_URL = r'https?://(?:www\\.)?twitter\\.com/i/(?P<path>cards/tfw/v1|videos(?:/tweet)?)/(?P<id>\\d+)'\n    _TESTS = [\n        {\n            'url': 'https://twitter.com/i/cards/tfw/v1/560070183650213889',\n            \n            'info_dict': {\n                'id': '560070183650213889',\n                'ext': 'mp4',\n                'title': 'Twitter web player',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 30.033,\n            },\n        },\n        {\n            'url': 'https://twitter.com/i/cards/tfw/v1/623160978427936768',\n            'md5': '7ee2a553b63d1bccba97fbed97d9e1c8',\n            'info_dict': {\n                'id': '623160978427936768',\n                'ext': 'mp4',\n                'title': 'Twitter web player',\n                'thumbnail': r're:^https?://.*(?:\\bformat=|\\.)jpg',\n            },\n        },\n        {\n            'url': 'https://twitter.com/i/cards/tfw/v1/654001591733886977',\n            'md5': 'b6d9683dd3f48e340ded81c0e917ad46',\n            'info_dict': {\n                'id': 'dq4Oj5quskI',\n                'ext': 'mp4',\n                'title': 'Ubuntu 11.10 Overview',\n                'description': 'md5:a831e97fa384863d6e26ce48d1c43376',\n                'upload_date': '20111013',\n                'uploader': 'OMG! Ubuntu!',\n                'uploader_id': 'omgubuntu',\n            },\n            'add_ie': ['Youtube'],\n        },\n        {\n            'url': 'https://twitter.com/i/cards/tfw/v1/665289828897005568',\n            'md5': '6dabeaca9e68cbb71c99c322a4b42a11',\n            'info_dict': {\n                'id': 'iBb2x00UVlv',\n                'ext': 'mp4',\n                'upload_date': '20151113',\n                'uploader_id': '1189339351084113920',\n                'uploader': 'ArsenalTerje',\n                'title': 'Vine by ArsenalTerje',\n                'timestamp': 1447451307,\n            },\n            'add_ie': ['Vine'],\n        }, {\n            'url': 'https://twitter.com/i/videos/tweet/705235433198714880',\n            'md5': '884812a2adc8aaf6fe52b15ccbfa3b88',\n            'info_dict': {\n                'id': '705235433198714880',\n                'ext': 'mp4',\n                'title': 'Twitter web player',\n                'thumbnail': r're:^https?://.*',\n            },\n        }, {\n            'url': 'https://twitter.com/i/videos/752274308186120192',\n            'only_matching': True,\n        },\n    ]\n\n    def _parse_media_info(self, media_info, video_id):\n        formats = []\n        for media_variant in media_info.get('variants', []):\n            media_url = media_variant['url']\n            if media_url.endswith('.m3u8'):\n                formats.extend(self._extract_m3u8_formats(media_url, video_id, ext='mp4', m3u8_id='hls'))\n            elif media_url.endswith('.mpd'):\n                formats.extend(self._extract_mpd_formats(media_url, video_id, mpd_id='dash'))\n            else:\n                tbr = int_or_none(dict_get(media_variant, ('bitRate', 'bitrate')), scale=1000)\n                a_format = {\n                    'url': media_url,\n                    'format_id': 'http-%d' % tbr if tbr else 'http',\n                    'tbr': tbr,\n                }\n                \n                if not a_format['tbr']:\n                    del a_format['tbr']\n\n                self._search_dimensions_in_video_url(a_format, media_url)\n\n                formats.append(a_format)\n        return formats\n\n    def _extract_mobile_formats(self, username, video_id):\n        webpage = self._download_webpage(\n            'https://mobile.twitter.com/%s/status/%s' % (username, video_id),\n            video_id, 'Downloading mobile webpage',\n            headers={\n                \n                'User-Agent': 'Mozilla/5.0 (Android 6.0.1; Mobile; rv:54.0) Gecko/54.0 Firefox/54.0',\n            })\n        main_script_url = self._html_search_regex(\n            r'<script[^>]+src=\"([^\"]+main\\.[^\"]+)\"', webpage, 'main script URL')\n        main_script = self._download_webpage(\n            main_script_url, video_id, 'Downloading main script')\n        bearer_token = self._search_regex(\n            r'BEARER_TOKEN\\s*:\\s*\"([^\"]+)\"',\n            main_script, 'bearer token')\n        \n        api_data = self._download_json(\n            'https://api.twitter.com/1.1/statuses/show/%s.json' % video_id,\n            video_id, 'Downloading API data',\n            headers={\n                'Authorization': 'Bearer ' + bearer_token,\n            })\n        media_info = try_get(api_data, lambda o: o['extended_entities']['media'][0]['video_info']) or {}\n        return self._parse_media_info(media_info, video_id)\n\n    def _real_extract(self, url):\n        path, video_id = re.search(self._VALID_URL, url).groups()\n\n        config = None\n        formats = []\n        duration = None\n\n        urls = [url]\n        if path.startswith('cards/'):\n            urls.append('https://twitter.com/i/videos/' + video_id)\n\n        for u in urls:\n            webpage = self._download_webpage(u, video_id)\n\n            iframe_url = self._html_search_regex(\n                r'<iframe[^>]+src=\"((?:https?:)?//(?:www\\.youtube\\.com/embed/[^\"]+|(?:www\\.)?vine\\.co/v/\\w+/card))\"',\n                webpage, 'video iframe', default=None)\n            if iframe_url:\n                return self.url_result(iframe_url)\n\n            config = self._parse_json(self._html_search_regex(\n                r'data-(?:player-)?config=\"([^\"]+)\"', webpage,\n                'data player config', default='{}'),\n                video_id)\n\n            if config.get('source_type') == 'vine':\n                return self.url_result(config['player_url'], 'Vine')\n\n            periscope_url = PeriscopeIE._extract_url(webpage)\n            if periscope_url:\n                return self.url_result(periscope_url, PeriscopeIE.ie_key())\n\n            video_url = config.get('video_url') or config.get('playlist', [{}])[0].get('source')\n\n            if video_url:\n                if determine_ext(video_url) == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(video_url, video_id, ext='mp4', m3u8_id='hls'))\n                else:\n                    f = {\n                        'url': video_url,\n                    }\n\n                    self._search_dimensions_in_video_url(f, video_url)\n\n                    formats.append(f)\n\n            vmap_url = config.get('vmapUrl') or config.get('vmap_url')\n            if vmap_url:\n                formats.extend(\n                    self._extract_formats_from_vmap_url(vmap_url, video_id))\n\n            media_info = None\n\n            for entity in config.get('status', {}).get('entities', []):\n                if 'mediaInfo' in entity:\n                    media_info = entity['mediaInfo']\n\n            if media_info:\n                formats.extend(self._parse_media_info(media_info, video_id))\n                duration = float_or_none(media_info.get('duration', {}).get('nanos'), scale=1e9)\n\n            username = config.get('user', {}).get('screen_name')\n            if username:\n                formats.extend(self._extract_mobile_formats(username, video_id))\n\n            if formats:\n                break\n\n        self._remove_duplicate_formats(formats)\n        self._sort_formats(formats)\n\n        title = self._search_regex(r'<title>([^<]+)</title>', webpage, 'title')\n        thumbnail = config.get('posterImageUrl') or config.get('image_src')\n        duration = float_or_none(config.get('duration'), scale=1000) or duration\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n        }\n\n\nclass TwitterIE(InfoExtractor):\n    IE_NAME = 'twitter'\n    _VALID_URL = r'https?://(?:www\\.|m\\.|mobile\\.)?twitter\\.com/(?:i/web|(?P<user_id>[^/]+))/status/(?P<id>\\d+)'\n    _TEMPLATE_URL = 'https://twitter.com/%s/status/%s'\n    _TEMPLATE_STATUSES_URL = 'https://twitter.com/statuses/%s'\n\n    _TESTS = [{\n        'url': 'https://twitter.com/freethenipple/status/643211948184596480',\n        'info_dict': {\n            'id': '643211948184596480',\n            'ext': 'mp4',\n            'title': 'FREE THE NIPPLE - FTN supporters on Hollywood Blvd today!',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'description': 'FREE THE NIPPLE on Twitter: \"FTN supporters on Hollywood Blvd today! http://t.co/c7jHH749xJ\"',\n            'uploader': 'FREE THE NIPPLE',\n            'uploader_id': 'freethenipple',\n            'duration': 12.922,\n        },\n    }, {\n        'url': 'https://twitter.com/giphz/status/657991469417025536/photo/1',\n        'md5': 'f36dcd5fb92bf7057f155e7d927eeb42',\n        'info_dict': {\n            'id': '657991469417025536',\n            'ext': 'mp4',\n            'title': 'Gifs - tu vai cai tu vai cai tu nao eh capaz disso tu vai cai',\n            'description': 'Gifs on Twitter: \"tu vai cai tu vai cai tu nao eh capaz disso tu vai cai https://t.co/tM46VHFlO5\"',\n            'thumbnail': r're:^https?://.*\\.png',\n            'uploader': 'Gifs',\n            'uploader_id': 'giphz',\n        },\n        'expected_warnings': ['height', 'width'],\n        'skip': 'Account suspended',\n    }, {\n        'url': 'https://twitter.com/starwars/status/665052190608723968',\n        'info_dict': {\n            'id': '665052190608723968',\n            'ext': 'mp4',\n            'title': 'Star Wars - A new beginning is coming December 18. Watch the official 60 second \n            'description': 'Star Wars on Twitter: \"A new beginning is coming December 18. Watch the official 60 second \n            'uploader_id': 'starwars',\n            'uploader': 'Star Wars',\n        },\n    }, {\n        'url': 'https://twitter.com/BTNBrentYarina/status/705235433198714880',\n        'info_dict': {\n            'id': '705235433198714880',\n            'ext': 'mp4',\n            'title': 'Brent Yarina - Khalil Iverson\\'s missed highlight dunk. And made highlight dunk. In one highlight.',\n            'description': 'Brent Yarina on Twitter: \"Khalil Iverson\\'s missed highlight dunk. And made highlight dunk. In one highlight.\"',\n            'uploader_id': 'BTNBrentYarina',\n            'uploader': 'Brent Yarina',\n        },\n        'params': {\n            \n            \n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://twitter.com/jaydingeer/status/700207533655363584',\n        'info_dict': {\n            'id': '700207533655363584',\n            'ext': 'mp4',\n            'title': 'JG - BEAT PROD: @suhmeduh \n            'description': 'JG on Twitter: \"BEAT PROD: @suhmeduh  https://t.co/HBrQ4AfpvZ \n            'thumbnail': r're:^https?://.*\\.jpg',\n            'uploader': 'JG',\n            'uploader_id': 'jaydingeer',\n            'duration': 30.0,\n        },\n    }, {\n        'url': 'https://twitter.com/Filmdrunk/status/713801302971588609',\n        'md5': '89a15ed345d13b86e9a5a5e051fa308a',\n        'info_dict': {\n            'id': 'MIOxnrUteUd',\n            'ext': 'mp4',\n            'title': 'Vince Mancini - Vine of the day',\n            'description': 'Vince Mancini on Twitter: \"Vine of the day https://t.co/xmTvRdqxWf\"',\n            'uploader': 'Vince Mancini',\n            'uploader_id': 'Filmdrunk',\n            'timestamp': 1402826626,\n            'upload_date': '20140615',\n        },\n        'add_ie': ['Vine'],\n    }, {\n        'url': 'https://twitter.com/captainamerica/status/719944021058060289',\n        'info_dict': {\n            'id': '719944021058060289',\n            'ext': 'mp4',\n            'title': 'Captain America - @King0fNerd Are you sure you made the right choice? Find out in theaters.',\n            'description': 'Captain America on Twitter: \"@King0fNerd Are you sure you made the right choice? Find out in theaters. https://t.co/GpgYi9xMJI\"',\n            'uploader_id': 'captainamerica',\n            'uploader': 'Captain America',\n            'duration': 3.17,\n        },\n    }, {\n        'url': 'https://twitter.com/OPP_HSD/status/779210622571536384',\n        'info_dict': {\n            'id': '1zqKVVlkqLaKB',\n            'ext': 'mp4',\n            'title': 'Sgt Kerry Schmidt - LIVE on \n            'description': 'Sgt Kerry Schmidt on Twitter: \"LIVE on \n            'upload_date': '20160923',\n            'uploader_id': 'OPP_HSD',\n            'uploader': 'Sgt Kerry Schmidt',\n            'timestamp': 1474613214,\n        },\n        'add_ie': ['Periscope'],\n    }, {\n        \n        'url': 'https://twitter.com/news_al3alm/status/852138619213144067',\n        'info_dict': {\n            'id': '852138619213144067',\n            'ext': 'mp4',\n            'title': '\u0639\u0627\u0644\u0645 \u0627\u0644\u0623\u062e\u0628\u0627\u0631 - \u0643\u0644\u0645\u0629 \u062a\u0627\u0631\u064a\u062e\u064a\u0629 \u0628\u062c\u0644\u0633\u0629 \u0627\u0644\u062c\u0646\u0627\u0633\u064a \u0627\u0644\u062a\u0627\u0631\u064a\u062e\u064a\u0629.. \u0627\u0644\u0646\u0627\u0626\u0628 \u062e\u0627\u0644\u062f \u0645\u0624\u0646\u0633 \u0627\u0644\u0639\u062a\u064a\u0628\u064a \u0644\u0644\u0645\u0639\u0627\u0631\u0636\u064a\u0646 : \u0627\u062a\u0642\u0648\u0627 \u0627\u0644\u0644\u0647 .. \u0627\u0644\u0638\u0644\u0645 \u0638\u0644\u0645\u0627\u062a \u064a\u0648\u0645 \u0627\u0644\u0642\u064a\u0627\u0645\u0629',\n            'description': '\u0639\u0627\u0644\u0645 \u0627\u0644\u0623\u062e\u0628\u0627\u0631 on Twitter: \"\u0643\u0644\u0645\u0629 \u062a\u0627\u0631\u064a\u062e\u064a\u0629 \u0628\u062c\u0644\u0633\u0629 \u0627\u0644\u062c\u0646\u0627\u0633\u064a \u0627\u0644\u062a\u0627\u0631\u064a\u062e\u064a\u0629.. \u0627\u0644\u0646\u0627\u0626\u0628 \u062e\u0627\u0644\u062f \u0645\u0624\u0646\u0633 \u0627\u0644\u0639\u062a\u064a\u0628\u064a \u0644\u0644\u0645\u0639\u0627\u0631\u0636\u064a\u0646 : \u0627\u062a\u0642\u0648\u0627 \u0627\u0644\u0644\u0647 .. \u0627\u0644\u0638\u0644\u0645 \u0638\u0644\u0645\u0627\u062a \u064a\u0648\u0645 \u0627\u0644\u0642\u064a\u0627\u0645\u0629   https://t.co/xg6OhpyKfN\"',\n            'uploader': '\u0639\u0627\u0644\u0645 \u0627\u0644\u0623\u062e\u0628\u0627\u0631',\n            'uploader_id': 'news_al3alm',\n            'duration': 277.4,\n        },\n    }, {\n        'url': 'https://twitter.com/i/web/status/910031516746514432',\n        'info_dict': {\n            'id': '910031516746514432',\n            'ext': 'mp4',\n            'title': 'Pr\u00e9fet de Guadeloupe - [Direct] \n            'thumbnail': r're:^https?://.*\\.jpg',\n            'description': 'Pr\u00e9fet de Guadeloupe on Twitter: \"[Direct] \n            'uploader': 'Pr\u00e9fet de Guadeloupe',\n            'uploader_id': 'Prefet971',\n            'duration': 47.48,\n        },\n        'params': {\n            'skip_download': True,  \n        },\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        user_id = mobj.group('user_id')\n        twid = mobj.group('id')\n\n        webpage, urlh = self._download_webpage_handle(\n            self._TEMPLATE_STATUSES_URL % twid, twid)\n\n        if 'twitter.com/account/suspended' in urlh.geturl():\n            raise ExtractorError('Account suspended by Twitter.', expected=True)\n\n        if user_id is None:\n            mobj = re.match(self._VALID_URL, urlh.geturl())\n            user_id = mobj.group('user_id')\n\n        username = remove_end(self._og_search_title(webpage), ' on Twitter')\n\n        title = description = self._og_search_description(webpage).strip('').replace('\\n', ' ').strip('\u201c\u201d')\n\n        \n        title = re.sub(r'\\s+(https?://[^ ]+)', '', title)\n\n        info = {\n            'uploader_id': user_id,\n            'uploader': username,\n            'webpage_url': url,\n            'description': '%s on Twitter: \"%s\"' % (username, description),\n            'title': username + ' - ' + title,\n        }\n\n        mobj = re.search(r, webpage)\n\n        if mobj:\n            more_info = mobj.group('more_info')\n            height = int_or_none(self._search_regex(\n                r'data-height=\"(\\d+)\"', more_info, 'height', fatal=False))\n            width = int_or_none(self._search_regex(\n                r'data-width=\"(\\d+)\"', more_info, 'width', fatal=False))\n            thumbnail = self._search_regex(\n                r'poster=\"([^\"]+)\"', more_info, 'poster', fatal=False)\n            info.update({\n                'id': twid,\n                'url': mobj.group('url'),\n                'height': height,\n                'width': width,\n                'thumbnail': thumbnail,\n            })\n            return info\n\n        twitter_card_url = None\n        if 'class=\"PlayableMedia' in webpage:\n            twitter_card_url = '%s//twitter.com/i/videos/tweet/%s' % (self.http_scheme(), twid)\n        else:\n            twitter_card_iframe_url = self._search_regex(\n                r'data-full-card-iframe-url=([\\'\"])(?P<url>(?:(?!\\1).)+)\\1',\n                webpage, 'Twitter card iframe URL', default=None, group='url')\n            if twitter_card_iframe_url:\n                twitter_card_url = compat_urlparse.urljoin(url, twitter_card_iframe_url)\n\n        if twitter_card_url:\n            info.update({\n                '_type': 'url_transparent',\n                'ie_key': 'TwitterCard',\n                'url': twitter_card_url,\n            })\n            return info\n\n        raise ExtractorError('There\\'s no video in this tweet.')\n\n\nclass TwitterAmplifyIE(TwitterBaseIE):\n    IE_NAME = 'twitter:amplify'\n    _VALID_URL = r'https?://amp\\.twimg\\.com/v/(?P<id>[0-9a-f\\-]{36})'\n\n    _TEST = {\n        'url': 'https://amp.twimg.com/v/0ba0c3c7-0af3-4c0a-bed5-7efd1ffa2951',\n        'md5': '7df102d0b9fd7066b86f3159f8e81bf6',\n        'info_dict': {\n            'id': '0ba0c3c7-0af3-4c0a-bed5-7efd1ffa2951',\n            'ext': 'mp4',\n            'title': 'Twitter Video',\n            'thumbnail': 're:^https?://.*',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        vmap_url = self._html_search_meta(\n            'twitter:amplify:vmap', webpage, 'vmap url')\n        formats = self._extract_formats_from_vmap_url(vmap_url, video_id)\n\n        thumbnails = []\n        thumbnail = self._html_search_meta(\n            'twitter:image:src', webpage, 'thumbnail', fatal=False)\n\n        def _find_dimension(target):\n            w = int_or_none(self._html_search_meta(\n                'twitter:%s:width' % target, webpage, fatal=False))\n            h = int_or_none(self._html_search_meta(\n                'twitter:%s:height' % target, webpage, fatal=False))\n            return w, h\n\n        if thumbnail:\n            thumbnail_w, thumbnail_h = _find_dimension('image')\n            thumbnails.append({\n                'url': thumbnail,\n                'width': thumbnail_w,\n                'height': thumbnail_h,\n            })\n\n        video_w, video_h = _find_dimension('player')\n        formats[0].update({\n            'width': video_w,\n            'height': video_h,\n        })\n\n        return {\n            'id': video_id,\n            'title': 'Twitter Video',\n            'formats': formats,\n            'thumbnails': thumbnails,\n        }\n", "comments": "(?x)\n            <video[^>]+class=\"animated-gif\"(?P<more_info>[^>]+)>\\s*\n                <source[^>]+video-src=\"(?P<url>[^\"]+)\"\n        \n \n# coding: utf-8\n# MD5 checksums are different in different places\n# Reported bitRate may be zero\n# A recent mobile UA is necessary for `gt` cookie\n# https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-show-id\n#TV spot for #StarWars: #TheForceAwakens.',\n#TV spot for #StarWars: #TheForceAwakens.\"',\n# The same video as https://twitter.com/i/videos/tweet/705235433198714880\n# Test case of TwitterCardIE\n#Damndaniel',\n#Damndaniel https://t.co/byBooq2ejZ\"',\n#Periscope: Road rage, mischief, assault, rollover and fire in one occurrence',\n#Periscope: Road rage, mischief, assault, rollover and fire in one occurrence  https://t.co/EKrVgIXF3s\"',\n# has mp4 formats via mobile API\n#Maria Le centre se trouve actuellement au sud de Basse-Terre. Restez confin\u00e9s. R\u00e9fugiez-vous dans la pi\u00e8ce la + s\u00fbre.',\n#Maria Le centre se trouve actuellement au sud de Basse-Terre. Restez confin\u00e9s. R\u00e9fugiez-vous dans la pi\u00e8ce la + s\u00fbre. https://t.co/mwx01Rs4lo\"',\n# requires ffmpeg\n# strip  'https -_t.co_BJYgOjSeGA' junk from filenames\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    determine_ext,\n    dict_get,\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    remove_end,\n    try_get,\n    xpath_text,\n)\n\nfrom .periscope import PeriscopeIE\n\n\nclass TwitterBaseIE(InfoExtractor):\n    def _extract_formats_from_vmap_url(self, vmap_url, video_id):\n        vmap_data = self._download_xml(vmap_url, video_id)\n        video_url = xpath_text(vmap_data, './/MediaFile').strip()\n        if determine_ext(video_url) == 'm3u8':\n            return self._extract_m3u8_formats(\n                video_url, video_id, ext='mp4', m3u8_id='hls',\n                entry_protocol='m3u8_native')\n        return [{\n            'url': video_url,\n        }]\n\n    @staticmethod\n    def _search_dimensions_in_video_url(a_format, video_url):\n        m = re.search(r'/(?P<width>\\d+)x(?P<height>\\d+)/', video_url)\n        if m:\n            a_format.update({\n                'width': int(m.group('width')),\n                'height': int(m.group('height')),\n            })\n\n\nclass TwitterCardIE(TwitterBaseIE):\n    IE_NAME = 'twitter:card'\n    _VALID_URL = r'https?://(?:www\\.)?twitter\\.com/i/(?P<path>cards/tfw/v1|videos(?:/tweet)?)/(?P<id>\\d+)'\n    _TESTS = [\n        {\n            'url': 'https://twitter.com/i/cards/tfw/v1/560070183650213889',\n            # MD5 checksums are different in different places\n            'info_dict': {\n                'id': '560070183650213889',\n                'ext': 'mp4',\n                'title': 'Twitter web player',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 30.033,\n            },\n        },\n        {\n            'url': 'https://twitter.com/i/cards/tfw/v1/623160978427936768',\n            'md5': '7ee2a553b63d1bccba97fbed97d9e1c8',\n            'info_dict': {\n                'id': '623160978427936768',\n                'ext': 'mp4',\n                'title': 'Twitter web player',\n                'thumbnail': r're:^https?://.*(?:\\bformat=|\\.)jpg',\n            },\n        },\n        {\n            'url': 'https://twitter.com/i/cards/tfw/v1/654001591733886977',\n            'md5': 'b6d9683dd3f48e340ded81c0e917ad46',\n            'info_dict': {\n                'id': 'dq4Oj5quskI',\n                'ext': 'mp4',\n                'title': 'Ubuntu 11.10 Overview',\n                'description': 'md5:a831e97fa384863d6e26ce48d1c43376',\n                'upload_date': '20111013',\n                'uploader': 'OMG! Ubuntu!',\n                'uploader_id': 'omgubuntu',\n            },\n            'add_ie': ['Youtube'],\n        },\n        {\n            'url': 'https://twitter.com/i/cards/tfw/v1/665289828897005568',\n            'md5': '6dabeaca9e68cbb71c99c322a4b42a11',\n            'info_dict': {\n                'id': 'iBb2x00UVlv',\n                'ext': 'mp4',\n                'upload_date': '20151113',\n                'uploader_id': '1189339351084113920',\n                'uploader': 'ArsenalTerje',\n                'title': 'Vine by ArsenalTerje',\n                'timestamp': 1447451307,\n            },\n            'add_ie': ['Vine'],\n        }, {\n            'url': 'https://twitter.com/i/videos/tweet/705235433198714880',\n            'md5': '884812a2adc8aaf6fe52b15ccbfa3b88',\n            'info_dict': {\n                'id': '705235433198714880',\n                'ext': 'mp4',\n                'title': 'Twitter web player',\n                'thumbnail': r're:^https?://.*',\n            },\n        }, {\n            'url': 'https://twitter.com/i/videos/752274308186120192',\n            'only_matching': True,\n        },\n    ]\n\n    def _parse_media_info(self, media_info, video_id):\n        formats = []\n        for media_variant in media_info.get('variants', []):\n            media_url = media_variant['url']\n            if media_url.endswith('.m3u8'):\n                formats.extend(self._extract_m3u8_formats(media_url, video_id, ext='mp4', m3u8_id='hls'))\n            elif media_url.endswith('.mpd'):\n                formats.extend(self._extract_mpd_formats(media_url, video_id, mpd_id='dash'))\n            else:\n                tbr = int_or_none(dict_get(media_variant, ('bitRate', 'bitrate')), scale=1000)\n                a_format = {\n                    'url': media_url,\n                    'format_id': 'http-%d' % tbr if tbr else 'http',\n                    'tbr': tbr,\n                }\n                # Reported bitRate may be zero\n                if not a_format['tbr']:\n                    del a_format['tbr']\n\n                self._search_dimensions_in_video_url(a_format, media_url)\n\n                formats.append(a_format)\n        return formats\n\n    def _extract_mobile_formats(self, username, video_id):\n        webpage = self._download_webpage(\n            'https://mobile.twitter.com/%s/status/%s' % (username, video_id),\n            video_id, 'Downloading mobile webpage',\n            headers={\n                # A recent mobile UA is necessary for `gt` cookie\n                'User-Agent': 'Mozilla/5.0 (Android 6.0.1; Mobile; rv:54.0) Gecko/54.0 Firefox/54.0',\n            })\n        main_script_url = self._html_search_regex(\n            r'<script[^>]+src=\"([^\"]+main\\.[^\"]+)\"', webpage, 'main script URL')\n        main_script = self._download_webpage(\n            main_script_url, video_id, 'Downloading main script')\n        bearer_token = self._search_regex(\n            r'BEARER_TOKEN\\s*:\\s*\"([^\"]+)\"',\n            main_script, 'bearer token')\n        # https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-show-id\n        api_data = self._download_json(\n            'https://api.twitter.com/1.1/statuses/show/%s.json' % video_id,\n            video_id, 'Downloading API data',\n            headers={\n                'Authorization': 'Bearer ' + bearer_token,\n            })\n        media_info = try_get(api_data, lambda o: o['extended_entities']['media'][0]['video_info']) or {}\n        return self._parse_media_info(media_info, video_id)\n\n    def _real_extract(self, url):\n        path, video_id = re.search(self._VALID_URL, url).groups()\n\n        config = None\n        formats = []\n        duration = None\n\n        urls = [url]\n        if path.startswith('cards/'):\n            urls.append('https://twitter.com/i/videos/' + video_id)\n\n        for u in urls:\n            webpage = self._download_webpage(u, video_id)\n\n            iframe_url = self._html_search_regex(\n                r'<iframe[^>]+src=\"((?:https?:)?//(?:www\\.youtube\\.com/embed/[^\"]+|(?:www\\.)?vine\\.co/v/\\w+/card))\"',\n                webpage, 'video iframe', default=None)\n            if iframe_url:\n                return self.url_result(iframe_url)\n\n            config = self._parse_json(self._html_search_regex(\n                r'data-(?:player-)?config=\"([^\"]+)\"', webpage,\n                'data player config', default='{}'),\n                video_id)\n\n            if config.get('source_type') == 'vine':\n                return self.url_result(config['player_url'], 'Vine')\n\n            periscope_url = PeriscopeIE._extract_url(webpage)\n            if periscope_url:\n                return self.url_result(periscope_url, PeriscopeIE.ie_key())\n\n            video_url = config.get('video_url') or config.get('playlist', [{}])[0].get('source')\n\n            if video_url:\n                if determine_ext(video_url) == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(video_url, video_id, ext='mp4', m3u8_id='hls'))\n                else:\n                    f = {\n                        'url': video_url,\n                    }\n\n                    self._search_dimensions_in_video_url(f, video_url)\n\n                    formats.append(f)\n\n            vmap_url = config.get('vmapUrl') or config.get('vmap_url')\n            if vmap_url:\n                formats.extend(\n                    self._extract_formats_from_vmap_url(vmap_url, video_id))\n\n            media_info = None\n\n            for entity in config.get('status', {}).get('entities', []):\n                if 'mediaInfo' in entity:\n                    media_info = entity['mediaInfo']\n\n            if media_info:\n                formats.extend(self._parse_media_info(media_info, video_id))\n                duration = float_or_none(media_info.get('duration', {}).get('nanos'), scale=1e9)\n\n            username = config.get('user', {}).get('screen_name')\n            if username:\n                formats.extend(self._extract_mobile_formats(username, video_id))\n\n            if formats:\n                break\n\n        self._remove_duplicate_formats(formats)\n        self._sort_formats(formats)\n\n        title = self._search_regex(r'<title>([^<]+)</title>', webpage, 'title')\n        thumbnail = config.get('posterImageUrl') or config.get('image_src')\n        duration = float_or_none(config.get('duration'), scale=1000) or duration\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n        }\n\n\nclass TwitterIE(InfoExtractor):\n    IE_NAME = 'twitter'\n    _VALID_URL = r'https?://(?:www\\.|m\\.|mobile\\.)?twitter\\.com/(?:i/web|(?P<user_id>[^/]+))/status/(?P<id>\\d+)'\n    _TEMPLATE_URL = 'https://twitter.com/%s/status/%s'\n    _TEMPLATE_STATUSES_URL = 'https://twitter.com/statuses/%s'\n\n    _TESTS = [{\n        'url': 'https://twitter.com/freethenipple/status/643211948184596480',\n        'info_dict': {\n            'id': '643211948184596480',\n            'ext': 'mp4',\n            'title': 'FREE THE NIPPLE - FTN supporters on Hollywood Blvd today!',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'description': 'FREE THE NIPPLE on Twitter: \"FTN supporters on Hollywood Blvd today! http://t.co/c7jHH749xJ\"',\n            'uploader': 'FREE THE NIPPLE',\n            'uploader_id': 'freethenipple',\n            'duration': 12.922,\n        },\n    }, {\n        'url': 'https://twitter.com/giphz/status/657991469417025536/photo/1',\n        'md5': 'f36dcd5fb92bf7057f155e7d927eeb42',\n        'info_dict': {\n            'id': '657991469417025536',\n            'ext': 'mp4',\n            'title': 'Gifs - tu vai cai tu vai cai tu nao eh capaz disso tu vai cai',\n            'description': 'Gifs on Twitter: \"tu vai cai tu vai cai tu nao eh capaz disso tu vai cai https://t.co/tM46VHFlO5\"',\n            'thumbnail': r're:^https?://.*\\.png',\n            'uploader': 'Gifs',\n            'uploader_id': 'giphz',\n        },\n        'expected_warnings': ['height', 'width'],\n        'skip': 'Account suspended',\n    }, {\n        'url': 'https://twitter.com/starwars/status/665052190608723968',\n        'info_dict': {\n            'id': '665052190608723968',\n            'ext': 'mp4',\n            'title': 'Star Wars - A new beginning is coming December 18. Watch the official 60 second #TV spot for #StarWars: #TheForceAwakens.',\n            'description': 'Star Wars on Twitter: \"A new beginning is coming December 18. Watch the official 60 second #TV spot for #StarWars: #TheForceAwakens.\"',\n            'uploader_id': 'starwars',\n            'uploader': 'Star Wars',\n        },\n    }, {\n        'url': 'https://twitter.com/BTNBrentYarina/status/705235433198714880',\n        'info_dict': {\n            'id': '705235433198714880',\n            'ext': 'mp4',\n            'title': 'Brent Yarina - Khalil Iverson\\'s missed highlight dunk. And made highlight dunk. In one highlight.',\n            'description': 'Brent Yarina on Twitter: \"Khalil Iverson\\'s missed highlight dunk. And made highlight dunk. In one highlight.\"',\n            'uploader_id': 'BTNBrentYarina',\n            'uploader': 'Brent Yarina',\n        },\n        'params': {\n            # The same video as https://twitter.com/i/videos/tweet/705235433198714880\n            # Test case of TwitterCardIE\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://twitter.com/jaydingeer/status/700207533655363584',\n        'info_dict': {\n            'id': '700207533655363584',\n            'ext': 'mp4',\n            'title': 'JG - BEAT PROD: @suhmeduh #Damndaniel',\n            'description': 'JG on Twitter: \"BEAT PROD: @suhmeduh  https://t.co/HBrQ4AfpvZ #Damndaniel https://t.co/byBooq2ejZ\"',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'uploader': 'JG',\n            'uploader_id': 'jaydingeer',\n            'duration': 30.0,\n        },\n    }, {\n        'url': 'https://twitter.com/Filmdrunk/status/713801302971588609',\n        'md5': '89a15ed345d13b86e9a5a5e051fa308a',\n        'info_dict': {\n            'id': 'MIOxnrUteUd',\n            'ext': 'mp4',\n            'title': 'Vince Mancini - Vine of the day',\n            'description': 'Vince Mancini on Twitter: \"Vine of the day https://t.co/xmTvRdqxWf\"',\n            'uploader': 'Vince Mancini',\n            'uploader_id': 'Filmdrunk',\n            'timestamp': 1402826626,\n            'upload_date': '20140615',\n        },\n        'add_ie': ['Vine'],\n    }, {\n        'url': 'https://twitter.com/captainamerica/status/719944021058060289',\n        'info_dict': {\n            'id': '719944021058060289',\n            'ext': 'mp4',\n            'title': 'Captain America - @King0fNerd Are you sure you made the right choice? Find out in theaters.',\n            'description': 'Captain America on Twitter: \"@King0fNerd Are you sure you made the right choice? Find out in theaters. https://t.co/GpgYi9xMJI\"',\n            'uploader_id': 'captainamerica',\n            'uploader': 'Captain America',\n            'duration': 3.17,\n        },\n    }, {\n        'url': 'https://twitter.com/OPP_HSD/status/779210622571536384',\n        'info_dict': {\n            'id': '1zqKVVlkqLaKB',\n            'ext': 'mp4',\n            'title': 'Sgt Kerry Schmidt - LIVE on #Periscope: Road rage, mischief, assault, rollover and fire in one occurrence',\n            'description': 'Sgt Kerry Schmidt on Twitter: \"LIVE on #Periscope: Road rage, mischief, assault, rollover and fire in one occurrence  https://t.co/EKrVgIXF3s\"',\n            'upload_date': '20160923',\n            'uploader_id': 'OPP_HSD',\n            'uploader': 'Sgt Kerry Schmidt',\n            'timestamp': 1474613214,\n        },\n        'add_ie': ['Periscope'],\n    }, {\n        # has mp4 formats via mobile API\n        'url': 'https://twitter.com/news_al3alm/status/852138619213144067',\n        'info_dict': {\n            'id': '852138619213144067',\n            'ext': 'mp4',\n            'title': '\u0639\u0627\u0644\u0645 \u0627\u0644\u0623\u062e\u0628\u0627\u0631 - \u0643\u0644\u0645\u0629 \u062a\u0627\u0631\u064a\u062e\u064a\u0629 \u0628\u062c\u0644\u0633\u0629 \u0627\u0644\u062c\u0646\u0627\u0633\u064a \u0627\u0644\u062a\u0627\u0631\u064a\u062e\u064a\u0629.. \u0627\u0644\u0646\u0627\u0626\u0628 \u062e\u0627\u0644\u062f \u0645\u0624\u0646\u0633 \u0627\u0644\u0639\u062a\u064a\u0628\u064a \u0644\u0644\u0645\u0639\u0627\u0631\u0636\u064a\u0646 : \u0627\u062a\u0642\u0648\u0627 \u0627\u0644\u0644\u0647 .. \u0627\u0644\u0638\u0644\u0645 \u0638\u0644\u0645\u0627\u062a \u064a\u0648\u0645 \u0627\u0644\u0642\u064a\u0627\u0645\u0629',\n            'description': '\u0639\u0627\u0644\u0645 \u0627\u0644\u0623\u062e\u0628\u0627\u0631 on Twitter: \"\u0643\u0644\u0645\u0629 \u062a\u0627\u0631\u064a\u062e\u064a\u0629 \u0628\u062c\u0644\u0633\u0629 \u0627\u0644\u062c\u0646\u0627\u0633\u064a \u0627\u0644\u062a\u0627\u0631\u064a\u062e\u064a\u0629.. \u0627\u0644\u0646\u0627\u0626\u0628 \u062e\u0627\u0644\u062f \u0645\u0624\u0646\u0633 \u0627\u0644\u0639\u062a\u064a\u0628\u064a \u0644\u0644\u0645\u0639\u0627\u0631\u0636\u064a\u0646 : \u0627\u062a\u0642\u0648\u0627 \u0627\u0644\u0644\u0647 .. \u0627\u0644\u0638\u0644\u0645 \u0638\u0644\u0645\u0627\u062a \u064a\u0648\u0645 \u0627\u0644\u0642\u064a\u0627\u0645\u0629   https://t.co/xg6OhpyKfN\"',\n            'uploader': '\u0639\u0627\u0644\u0645 \u0627\u0644\u0623\u062e\u0628\u0627\u0631',\n            'uploader_id': 'news_al3alm',\n            'duration': 277.4,\n        },\n    }, {\n        'url': 'https://twitter.com/i/web/status/910031516746514432',\n        'info_dict': {\n            'id': '910031516746514432',\n            'ext': 'mp4',\n            'title': 'Pr\u00e9fet de Guadeloupe - [Direct] #Maria Le centre se trouve actuellement au sud de Basse-Terre. Restez confin\u00e9s. R\u00e9fugiez-vous dans la pi\u00e8ce la + s\u00fbre.',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'description': 'Pr\u00e9fet de Guadeloupe on Twitter: \"[Direct] #Maria Le centre se trouve actuellement au sud de Basse-Terre. Restez confin\u00e9s. R\u00e9fugiez-vous dans la pi\u00e8ce la + s\u00fbre. https://t.co/mwx01Rs4lo\"',\n            'uploader': 'Pr\u00e9fet de Guadeloupe',\n            'uploader_id': 'Prefet971',\n            'duration': 47.48,\n        },\n        'params': {\n            'skip_download': True,  # requires ffmpeg\n        },\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        user_id = mobj.group('user_id')\n        twid = mobj.group('id')\n\n        webpage, urlh = self._download_webpage_handle(\n            self._TEMPLATE_STATUSES_URL % twid, twid)\n\n        if 'twitter.com/account/suspended' in urlh.geturl():\n            raise ExtractorError('Account suspended by Twitter.', expected=True)\n\n        if user_id is None:\n            mobj = re.match(self._VALID_URL, urlh.geturl())\n            user_id = mobj.group('user_id')\n\n        username = remove_end(self._og_search_title(webpage), ' on Twitter')\n\n        title = description = self._og_search_description(webpage).strip('').replace('\\n', ' ').strip('\u201c\u201d')\n\n        # strip  'https -_t.co_BJYgOjSeGA' junk from filenames\n        title = re.sub(r'\\s+(https?://[^ ]+)', '', title)\n\n        info = {\n            'uploader_id': user_id,\n            'uploader': username,\n            'webpage_url': url,\n            'description': '%s on Twitter: \"%s\"' % (username, description),\n            'title': username + ' - ' + title,\n        }\n\n        mobj = re.search(r'''(?x)\n            <video[^>]+class=\"animated-gif\"(?P<more_info>[^>]+)>\\s*\n                <source[^>]+video-src=\"(?P<url>[^\"]+)\"\n        ''', webpage)\n\n        if mobj:\n            more_info = mobj.group('more_info')\n            height = int_or_none(self._search_regex(\n                r'data-height=\"(\\d+)\"', more_info, 'height', fatal=False))\n            width = int_or_none(self._search_regex(\n                r'data-width=\"(\\d+)\"', more_info, 'width', fatal=False))\n            thumbnail = self._search_regex(\n                r'poster=\"([^\"]+)\"', more_info, 'poster', fatal=False)\n            info.update({\n                'id': twid,\n                'url': mobj.group('url'),\n                'height': height,\n                'width': width,\n                'thumbnail': thumbnail,\n            })\n            return info\n\n        twitter_card_url = None\n        if 'class=\"PlayableMedia' in webpage:\n            twitter_card_url = '%s//twitter.com/i/videos/tweet/%s' % (self.http_scheme(), twid)\n        else:\n            twitter_card_iframe_url = self._search_regex(\n                r'data-full-card-iframe-url=([\\'\"])(?P<url>(?:(?!\\1).)+)\\1',\n                webpage, 'Twitter card iframe URL', default=None, group='url')\n            if twitter_card_iframe_url:\n                twitter_card_url = compat_urlparse.urljoin(url, twitter_card_iframe_url)\n\n        if twitter_card_url:\n            info.update({\n                '_type': 'url_transparent',\n                'ie_key': 'TwitterCard',\n                'url': twitter_card_url,\n            })\n            return info\n\n        raise ExtractorError('There\\'s no video in this tweet.')\n\n\nclass TwitterAmplifyIE(TwitterBaseIE):\n    IE_NAME = 'twitter:amplify'\n    _VALID_URL = r'https?://amp\\.twimg\\.com/v/(?P<id>[0-9a-f\\-]{36})'\n\n    _TEST = {\n        'url': 'https://amp.twimg.com/v/0ba0c3c7-0af3-4c0a-bed5-7efd1ffa2951',\n        'md5': '7df102d0b9fd7066b86f3159f8e81bf6',\n        'info_dict': {\n            'id': '0ba0c3c7-0af3-4c0a-bed5-7efd1ffa2951',\n            'ext': 'mp4',\n            'title': 'Twitter Video',\n            'thumbnail': 're:^https?://.*',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        vmap_url = self._html_search_meta(\n            'twitter:amplify:vmap', webpage, 'vmap url')\n        formats = self._extract_formats_from_vmap_url(vmap_url, video_id)\n\n        thumbnails = []\n        thumbnail = self._html_search_meta(\n            'twitter:image:src', webpage, 'thumbnail', fatal=False)\n\n        def _find_dimension(target):\n            w = int_or_none(self._html_search_meta(\n                'twitter:%s:width' % target, webpage, fatal=False))\n            h = int_or_none(self._html_search_meta(\n                'twitter:%s:height' % target, webpage, fatal=False))\n            return w, h\n\n        if thumbnail:\n            thumbnail_w, thumbnail_h = _find_dimension('image')\n            thumbnails.append({\n                'url': thumbnail,\n                'width': thumbnail_w,\n                'height': thumbnail_h,\n            })\n\n        video_w, video_h = _find_dimension('player')\n        formats[0].update({\n            'width': video_w,\n            'height': video_h,\n        })\n\n        return {\n            'id': video_id,\n            'title': 'Twitter Video',\n            'formats': formats,\n            'thumbnails': thumbnails,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "twitter.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/twitter.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}