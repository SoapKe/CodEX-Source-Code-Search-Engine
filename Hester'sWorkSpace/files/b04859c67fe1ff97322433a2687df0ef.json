{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport mock\n\nfrom exam import fixture\n\nfrom sentry.interfaces.template import Template\nfrom sentry.models import Event\nfrom sentry.testutils import TestCase\n\n\nclass TemplateTest(TestCase):\n    @fixture\n    def interface(self):\n        return Template.to_python(\n            dict(\n                filename='foo.html',\n                context_line='hello world',\n                lineno=1,\n            )\n        )\n\n    def test_serialize(self):\n        result = self.interface.to_json()\n        self.assertEquals(result['filename'], 'foo.html')\n        self.assertEquals(result['context_line'], 'hello world')\n        self.assertEquals(result['lineno'], 1)\n\n    def test_get_hash(self):\n        result = self.interface.get_hash()\n        self.assertEquals(result, ['foo.html', 'hello world'])\n\n    @mock.patch('sentry.interfaces.template.get_context')\n    @mock.patch('sentry.interfaces.template.Template.get_traceback')\n    def test_to_string_returns_traceback(self, get_traceback, get_context):\n        get_traceback.return_value = 'traceback'\n        event = mock.Mock(spec=Event)\n        result = self.interface.to_string(event)\n        get_traceback.assert_called_once_with(event, get_context.return_value)\n        self.assertEquals(result, 'Stacktrace (most recent call last):\\n\\ntraceback')\n\n    def test_serialize_unserialize_behavior(self):\n        result = type(self.interface).to_python(self.interface.to_json())\n        assert result.to_json() == self.interface.to_json()\n\n    def test_get_api_context(self):\n        result = self.interface.get_api_context()\n        assert result == {\n            'filename': 'foo.html',\n            'context': [(1, 'hello world')],\n            'lineNo': 1,\n        }\n", "comments": "      coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport mock\n\nfrom exam import fixture\n\nfrom sentry.interfaces.template import Template\nfrom sentry.models import Event\nfrom sentry.testutils import TestCase\n\n\nclass TemplateTest(TestCase):\n    @fixture\n    def interface(self):\n        return Template.to_python(\n            dict(\n                filename='foo.html',\n                context_line='hello world',\n                lineno=1,\n            )\n        )\n\n    def test_serialize(self):\n        result = self.interface.to_json()\n        self.assertEquals(result['filename'], 'foo.html')\n        self.assertEquals(result['context_line'], 'hello world')\n        self.assertEquals(result['lineno'], 1)\n\n    def test_get_hash(self):\n        result = self.interface.get_hash()\n        self.assertEquals(result, ['foo.html', 'hello world'])\n\n    @mock.patch('sentry.interfaces.template.get_context')\n    @mock.patch('sentry.interfaces.template.Template.get_traceback')\n    def test_to_string_returns_traceback(self, get_traceback, get_context):\n        get_traceback.return_value = 'traceback'\n        event = mock.Mock(spec=Event)\n        result = self.interface.to_string(event)\n        get_traceback.assert_called_once_with(event, get_context.return_value)\n        self.assertEquals(result, 'Stacktrace (most recent call last):\\n\\ntraceback')\n\n    def test_serialize_unserialize_behavior(self):\n        result = type(self.interface).to_python(self.interface.to_json())\n        assert result.to_json() == self.interface.to_json()\n\n    def test_get_api_context(self):\n        result = self.interface.get_api_context()\n        assert result == {\n            'filename': 'foo.html',\n            'context': [(1, 'hello world')],\n            'lineNo': 1,\n        }\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_template.py", "id": "b04859c67fe1ff97322433a2687df0ef", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/interfaces/test_template.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}