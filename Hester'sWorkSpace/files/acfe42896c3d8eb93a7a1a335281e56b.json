{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    NO_DEFAULT,\n    str_to_int,\n)\n\n\nclass DrTuberIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www|m)\\.)?drtuber\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[\\w-]+))?'\n    _TESTS = [{\n        'url': 'http://www.drtuber.com/video/1740434/hot-perky-blonde-naked-golf',\n        'md5': '93e680cf2536ad0dfb7e74d94a89facd',\n        'info_dict': {\n            'id': '1740434',\n            'display_id': 'hot-perky-blonde-naked-golf',\n            'ext': 'mp4',\n            'title': 'hot perky blonde naked golf',\n            'like_count': int,\n            'comment_count': int,\n            'categories': ['Babe', 'Blonde', 'Erotic', 'Outdoor', 'Softcore', 'Solo'],\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'age_limit': 18,\n        }\n    }, {\n        'url': 'http://www.drtuber.com/embed/489939',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.drtuber.com/video/3893529/lingerie-blowjob-from-beautiful-teen',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+?src=[\"\\'](?P<url>(?:https?:)?//(?:www\\.)?drtuber\\.com/embed/\\d+)',\n            webpage)\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        webpage = self._download_webpage(\n            'http://www.drtuber.com/video/%s' % video_id, display_id)\n\n        video_data = self._download_json(\n            'http://www.drtuber.com/player_config_json/', video_id, query={\n                'vid': video_id,\n                'embed': 0,\n                'aid': 0,\n                'domain_id': 0,\n            })\n\n        formats = []\n        for format_id, video_url in video_data['files'].items():\n            if video_url:\n                formats.append({\n                    'format_id': format_id,\n                    'quality': 2 if format_id == 'hq' else 1,\n                    'url': video_url\n                })\n        self._sort_formats(formats)\n\n        title = self._html_search_regex(\n            (r'class=\"title_watch\"[^>]*><(?:p|h\\d+)[^>]*>([^<]+)<',\n             r'<p[^>]+class=\"title_substrate\">([^<]+)</p>',\n             r'<title>([^<]+) - \\d+'),\n            webpage, 'title')\n\n        thumbnail = self._html_search_regex(\n            r'poster=\"([^\"]+)\"',\n            webpage, 'thumbnail', fatal=False)\n\n        def extract_count(id_, name, default=NO_DEFAULT):\n            return str_to_int(self._html_search_regex(\n                r'<span[^>]+(?:class|id)=\"%s\"[^>]*>([\\d,\\.]+)</span>' % id_,\n                webpage, '%s count' % name, default=default, fatal=False))\n\n        like_count = extract_count('rate_likes', 'like')\n        dislike_count = extract_count('rate_dislikes', 'dislike', default=None)\n        comment_count = extract_count('comments_count', 'comment')\n\n        cats_str = self._search_regex(\n            r'<div[^>]+class=\"categories_list\">(.+?)</div>',\n            webpage, 'categories', fatal=False)\n        categories = [] if not cats_str else re.findall(\n            r'<a title=\"([^\"]+)\"', cats_str)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'formats': formats,\n            'title': title,\n            'thumbnail': thumbnail,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'comment_count': comment_count,\n            'categories': categories,\n            'age_limit': self._rta_search(webpage),\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    NO_DEFAULT,\n    str_to_int,\n)\n\n\nclass DrTuberIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www|m)\\.)?drtuber\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[\\w-]+))?'\n    _TESTS = [{\n        'url': 'http://www.drtuber.com/video/1740434/hot-perky-blonde-naked-golf',\n        'md5': '93e680cf2536ad0dfb7e74d94a89facd',\n        'info_dict': {\n            'id': '1740434',\n            'display_id': 'hot-perky-blonde-naked-golf',\n            'ext': 'mp4',\n            'title': 'hot perky blonde naked golf',\n            'like_count': int,\n            'comment_count': int,\n            'categories': ['Babe', 'Blonde', 'Erotic', 'Outdoor', 'Softcore', 'Solo'],\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'age_limit': 18,\n        }\n    }, {\n        'url': 'http://www.drtuber.com/embed/489939',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.drtuber.com/video/3893529/lingerie-blowjob-from-beautiful-teen',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+?src=[\"\\'](?P<url>(?:https?:)?//(?:www\\.)?drtuber\\.com/embed/\\d+)',\n            webpage)\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        webpage = self._download_webpage(\n            'http://www.drtuber.com/video/%s' % video_id, display_id)\n\n        video_data = self._download_json(\n            'http://www.drtuber.com/player_config_json/', video_id, query={\n                'vid': video_id,\n                'embed': 0,\n                'aid': 0,\n                'domain_id': 0,\n            })\n\n        formats = []\n        for format_id, video_url in video_data['files'].items():\n            if video_url:\n                formats.append({\n                    'format_id': format_id,\n                    'quality': 2 if format_id == 'hq' else 1,\n                    'url': video_url\n                })\n        self._sort_formats(formats)\n\n        title = self._html_search_regex(\n            (r'class=\"title_watch\"[^>]*><(?:p|h\\d+)[^>]*>([^<]+)<',\n             r'<p[^>]+class=\"title_substrate\">([^<]+)</p>',\n             r'<title>([^<]+) - \\d+'),\n            webpage, 'title')\n\n        thumbnail = self._html_search_regex(\n            r'poster=\"([^\"]+)\"',\n            webpage, 'thumbnail', fatal=False)\n\n        def extract_count(id_, name, default=NO_DEFAULT):\n            return str_to_int(self._html_search_regex(\n                r'<span[^>]+(?:class|id)=\"%s\"[^>]*>([\\d,\\.]+)</span>' % id_,\n                webpage, '%s count' % name, default=default, fatal=False))\n\n        like_count = extract_count('rate_likes', 'like')\n        dislike_count = extract_count('rate_dislikes', 'dislike', default=None)\n        comment_count = extract_count('comments_count', 'comment')\n\n        cats_str = self._search_regex(\n            r'<div[^>]+class=\"categories_list\">(.+?)</div>',\n            webpage, 'categories', fatal=False)\n        categories = [] if not cats_str else re.findall(\n            r'<a title=\"([^\"]+)\"', cats_str)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'formats': formats,\n            'title': title,\n            'thumbnail': thumbnail,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'comment_count': comment_count,\n            'categories': categories,\n            'age_limit': self._rta_search(webpage),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "drtuber.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/drtuber.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}