{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six import iteritems\n\ntry:\n    from library.bigip_gtm_facts import Parameters\n    from library.bigip_gtm_facts import ServerParameters\n    from library.bigip_gtm_facts import PoolParameters\n    from library.bigip_gtm_facts import WideIpParameters\n    from library.bigip_gtm_facts import ModuleManager\n    from library.bigip_gtm_facts import ServerFactManager\n    from library.bigip_gtm_facts import PoolFactManager\n    from library.bigip_gtm_facts import TypedPoolFactManager\n    from library.bigip_gtm_facts import UntypedPoolFactManager\n    from library.bigip_gtm_facts import WideIpFactManager\n    from library.bigip_gtm_facts import TypedWideIpFactManager\n    from library.bigip_gtm_facts import UntypedWideIpFactManager\n    from library.bigip_gtm_facts import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from f5.bigip.tm.gtm.pool import A\n    from f5.utils.responses.handlers import Stats\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_gtm_pool import Parameters\n        from ansible.modules.network.f5.bigip_gtm_pool import ServerParameters\n        from ansible.modules.network.f5.bigip_gtm_pool import PoolParameters\n        from ansible.modules.network.f5.bigip_gtm_pool import WideIpParameters\n        from ansible.modules.network.f5.bigip_gtm_pool import ModuleManager\n        from ansible.modules.network.f5.bigip_gtm_pool import ServerFactManager\n        from ansible.modules.network.f5.bigip_gtm_pool import PoolFactManager\n        from ansible.modules.network.f5.bigip_gtm_pool import TypedPoolFactManager\n        from ansible.modules.network.f5.bigip_gtm_pool import UntypedPoolFactManager\n        from ansible.modules.network.f5.bigip_gtm_pool import WideIpFactManager\n        from ansible.modules.network.f5.bigip_gtm_pool import TypedWideIpFactManager\n        from ansible.modules.network.f5.bigip_gtm_pool import UntypedWideIpFactManager\n        from ansible.modules.network.f5.bigip_gtm_pool import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from f5.bigip.tm.gtm.pool import A\n        from f5.utils.responses.handlers import Stats\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass FakeStatResource(object):\n    def __init__(self, obj):\n        self.entries = obj\n\n\nclass FakeARecord(A):\n    def __init__(self, *args, **kwargs):\n        attrs = kwargs.pop('attrs', {})\n        for key, value in iteritems(attrs):\n            setattr(self, key, value)\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            include=['pool'],\n            filter='name.*'\n        )\n        p = Parameters(params=args)\n        assert p.include == ['pool']\n        assert p.filter == 'name.*'\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_get_typed_pool_facts(self, *args):\n        set_module_args(dict(\n            include='pool',\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        fixture1 = load_fixture('load_gtm_pool_a_collection.json')\n        fixture2 = load_fixture('load_gtm_pool_a_example_stats.json')\n        collection = [FakeARecord(attrs=x) for x in fixture1['items']]\n        stats = Stats(FakeStatResource(fixture2['entries']))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        tfm = TypedPoolFactManager(module=module)\n        tfm.read_collection_from_device = Mock(return_value=collection)\n        tfm.read_stats_from_device = Mock(return_value=stats.stat)\n\n        tm = PoolFactManager(module=module)\n        tm.version_is_less_than_12 = Mock(return_value=False)\n        tm.get_manager = Mock(return_value=tfm)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.get_manager = Mock(return_value=tm)\n        mm.gtm_provisioned = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert 'pool' in results\n        assert len(results['pool']) > 0\n        assert 'load_balancing_mode' in results['pool'][0]\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    override methods specific type manager    override methods force specific logic module happen ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six import iteritems\n\ntry:\n    from library.bigip_gtm_facts import Parameters\n    from library.bigip_gtm_facts import ServerParameters\n    from library.bigip_gtm_facts import PoolParameters\n    from library.bigip_gtm_facts import WideIpParameters\n    from library.bigip_gtm_facts import ModuleManager\n    from library.bigip_gtm_facts import ServerFactManager\n    from library.bigip_gtm_facts import PoolFactManager\n    from library.bigip_gtm_facts import TypedPoolFactManager\n    from library.bigip_gtm_facts import UntypedPoolFactManager\n    from library.bigip_gtm_facts import WideIpFactManager\n    from library.bigip_gtm_facts import TypedWideIpFactManager\n    from library.bigip_gtm_facts import UntypedWideIpFactManager\n    from library.bigip_gtm_facts import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from f5.bigip.tm.gtm.pool import A\n    from f5.utils.responses.handlers import Stats\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_gtm_pool import Parameters\n        from ansible.modules.network.f5.bigip_gtm_pool import ServerParameters\n        from ansible.modules.network.f5.bigip_gtm_pool import PoolParameters\n        from ansible.modules.network.f5.bigip_gtm_pool import WideIpParameters\n        from ansible.modules.network.f5.bigip_gtm_pool import ModuleManager\n        from ansible.modules.network.f5.bigip_gtm_pool import ServerFactManager\n        from ansible.modules.network.f5.bigip_gtm_pool import PoolFactManager\n        from ansible.modules.network.f5.bigip_gtm_pool import TypedPoolFactManager\n        from ansible.modules.network.f5.bigip_gtm_pool import UntypedPoolFactManager\n        from ansible.modules.network.f5.bigip_gtm_pool import WideIpFactManager\n        from ansible.modules.network.f5.bigip_gtm_pool import TypedWideIpFactManager\n        from ansible.modules.network.f5.bigip_gtm_pool import UntypedWideIpFactManager\n        from ansible.modules.network.f5.bigip_gtm_pool import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from f5.bigip.tm.gtm.pool import A\n        from f5.utils.responses.handlers import Stats\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass FakeStatResource(object):\n    def __init__(self, obj):\n        self.entries = obj\n\n\nclass FakeARecord(A):\n    def __init__(self, *args, **kwargs):\n        attrs = kwargs.pop('attrs', {})\n        for key, value in iteritems(attrs):\n            setattr(self, key, value)\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            include=['pool'],\n            filter='name.*'\n        )\n        p = Parameters(params=args)\n        assert p.include == ['pool']\n        assert p.filter == 'name.*'\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_get_typed_pool_facts(self, *args):\n        set_module_args(dict(\n            include='pool',\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        fixture1 = load_fixture('load_gtm_pool_a_collection.json')\n        fixture2 = load_fixture('load_gtm_pool_a_example_stats.json')\n        collection = [FakeARecord(attrs=x) for x in fixture1['items']]\n        stats = Stats(FakeStatResource(fixture2['entries']))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        tfm = TypedPoolFactManager(module=module)\n        tfm.read_collection_from_device = Mock(return_value=collection)\n        tfm.read_stats_from_device = Mock(return_value=stats.stat)\n\n        tm = PoolFactManager(module=module)\n        tm.version_is_less_than_12 = Mock(return_value=False)\n        tm.get_manager = Mock(return_value=tfm)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.get_manager = Mock(return_value=tm)\n        mm.gtm_provisioned = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert 'pool' in results\n        assert len(results['pool']) > 0\n        assert 'load_balancing_mode' in results['pool'][0]\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_gtm_facts.py", "id": "abde46fab92111f7074fc3fa7e2845fd", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_gtm_facts.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}