{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    unified_strdate,\n)\n\n\nclass GaskrankIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?gaskrank\\.tv/tv/(?P<categories>[^/]+)/(?P<id>[^/]+)\\.htm'\n    _TESTS = [{\n        'url': 'http://www.gaskrank.tv/tv/motorrad-fun/strike-einparken-durch-anfaenger-crash-mit-groesserem-flurschaden.htm',\n        'md5': '1ae88dbac97887d85ebd1157a95fc4f9',\n        'info_dict': {\n            'id': '201601/26955',\n            'ext': 'mp4',\n            'title': 'Strike! Einparken k\u00f6nnen nur M\u00e4nner - Flurschaden h\u00e4lt sich in Grenzen *lol*',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'categories': ['motorrad-fun'],\n            'display_id': 'strike-einparken-durch-anfaenger-crash-mit-groesserem-flurschaden',\n            'uploader_id': 'Bikefun',\n            'upload_date': '20170110',\n            'uploader_url': None,\n        }\n    }, {\n        'url': 'http://www.gaskrank.tv/tv/racing/isle-of-man-tt-2011-michael-du-15920.htm',\n        'md5': 'c33ee32c711bc6c8224bfcbe62b23095',\n        'info_dict': {\n            'id': '201106/15920',\n            'ext': 'mp4',\n            'title': 'Isle of Man - Michael Dunlop vs Guy Martin - schwindelig kucken',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'categories': ['racing'],\n            'display_id': 'isle-of-man-tt-2011-michael-du-15920',\n            'uploader_id': 'IOM',\n            'upload_date': '20170523',\n            'uploader_url': 'www.iomtt.com',\n        }\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        title = self._og_search_title(\n            webpage, default=None) or self._html_search_meta(\n            'title', webpage, fatal=True)\n\n        categories = [re.match(self._VALID_URL, url).group('categories')]\n\n        mobj = re.search(\n            r'Video von:\\s*(?P<uploader_id>[^|]*?)\\s*\\|\\s*vom:\\s*(?P<upload_date>[0-9][0-9]\\.[0-9][0-9]\\.[0-9][0-9][0-9][0-9])',\n            webpage)\n        if mobj is not None:\n            uploader_id = mobj.groupdict().get('uploader_id')\n            upload_date = unified_strdate(mobj.groupdict().get('upload_date'))\n\n        uploader_url = self._search_regex(\n            r'Homepage:\\s*<[^>]*>(?P<uploader_url>[^<]*)',\n            webpage, 'uploader_url', default=None)\n        tags = re.findall(\n            r'/tv/tags/[^/]+/\"\\s*>(?P<tag>[^<]*?)<',\n            webpage)\n\n        view_count = self._search_regex(\n            r'class\\s*=\\s*\"gkRight\"(?:[^>]*>\\s*<[^>]*)*icon-eye-open(?:[^>]*>\\s*<[^>]*)*>\\s*(?P<view_count>[0-9\\.]*)',\n            webpage, 'view_count', default=None)\n        if view_count:\n            view_count = int_or_none(view_count.replace('.', ''))\n\n        average_rating = self._search_regex(\n            r'itemprop\\s*=\\s*\"ratingValue\"[^>]*>\\s*(?P<average_rating>[0-9,]+)',\n            webpage, 'average_rating')\n        if average_rating:\n            average_rating = float_or_none(average_rating.replace(',', '.'))\n\n        video_id = self._search_regex(\n            r'https?://movies\\.gaskrank\\.tv/([^-]*?)(-[^\\.]*)?\\.mp4',\n            webpage, 'video id', default=display_id)\n\n        entry = self._parse_html5_media_entries(url, webpage, video_id)[0]\n        entry.update({\n            'id': video_id,\n            'title': title,\n            'categories': categories,\n            'display_id': display_id,\n            'uploader_id': uploader_id,\n            'upload_date': upload_date,\n            'uploader_url': uploader_url,\n            'tags': tags,\n            'view_count': view_count,\n            'average_rating': average_rating,\n        })\n        self._sort_formats(entry['formats'])\n\n        return entry\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    unified_strdate,\n)\n\n\nclass GaskrankIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?gaskrank\\.tv/tv/(?P<categories>[^/]+)/(?P<id>[^/]+)\\.htm'\n    _TESTS = [{\n        'url': 'http://www.gaskrank.tv/tv/motorrad-fun/strike-einparken-durch-anfaenger-crash-mit-groesserem-flurschaden.htm',\n        'md5': '1ae88dbac97887d85ebd1157a95fc4f9',\n        'info_dict': {\n            'id': '201601/26955',\n            'ext': 'mp4',\n            'title': 'Strike! Einparken k\u00f6nnen nur M\u00e4nner - Flurschaden h\u00e4lt sich in Grenzen *lol*',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'categories': ['motorrad-fun'],\n            'display_id': 'strike-einparken-durch-anfaenger-crash-mit-groesserem-flurschaden',\n            'uploader_id': 'Bikefun',\n            'upload_date': '20170110',\n            'uploader_url': None,\n        }\n    }, {\n        'url': 'http://www.gaskrank.tv/tv/racing/isle-of-man-tt-2011-michael-du-15920.htm',\n        'md5': 'c33ee32c711bc6c8224bfcbe62b23095',\n        'info_dict': {\n            'id': '201106/15920',\n            'ext': 'mp4',\n            'title': 'Isle of Man - Michael Dunlop vs Guy Martin - schwindelig kucken',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'categories': ['racing'],\n            'display_id': 'isle-of-man-tt-2011-michael-du-15920',\n            'uploader_id': 'IOM',\n            'upload_date': '20170523',\n            'uploader_url': 'www.iomtt.com',\n        }\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        title = self._og_search_title(\n            webpage, default=None) or self._html_search_meta(\n            'title', webpage, fatal=True)\n\n        categories = [re.match(self._VALID_URL, url).group('categories')]\n\n        mobj = re.search(\n            r'Video von:\\s*(?P<uploader_id>[^|]*?)\\s*\\|\\s*vom:\\s*(?P<upload_date>[0-9][0-9]\\.[0-9][0-9]\\.[0-9][0-9][0-9][0-9])',\n            webpage)\n        if mobj is not None:\n            uploader_id = mobj.groupdict().get('uploader_id')\n            upload_date = unified_strdate(mobj.groupdict().get('upload_date'))\n\n        uploader_url = self._search_regex(\n            r'Homepage:\\s*<[^>]*>(?P<uploader_url>[^<]*)',\n            webpage, 'uploader_url', default=None)\n        tags = re.findall(\n            r'/tv/tags/[^/]+/\"\\s*>(?P<tag>[^<]*?)<',\n            webpage)\n\n        view_count = self._search_regex(\n            r'class\\s*=\\s*\"gkRight\"(?:[^>]*>\\s*<[^>]*)*icon-eye-open(?:[^>]*>\\s*<[^>]*)*>\\s*(?P<view_count>[0-9\\.]*)',\n            webpage, 'view_count', default=None)\n        if view_count:\n            view_count = int_or_none(view_count.replace('.', ''))\n\n        average_rating = self._search_regex(\n            r'itemprop\\s*=\\s*\"ratingValue\"[^>]*>\\s*(?P<average_rating>[0-9,]+)',\n            webpage, 'average_rating')\n        if average_rating:\n            average_rating = float_or_none(average_rating.replace(',', '.'))\n\n        video_id = self._search_regex(\n            r'https?://movies\\.gaskrank\\.tv/([^-]*?)(-[^\\.]*)?\\.mp4',\n            webpage, 'video id', default=display_id)\n\n        entry = self._parse_html5_media_entries(url, webpage, video_id)[0]\n        entry.update({\n            'id': video_id,\n            'title': title,\n            'categories': categories,\n            'display_id': display_id,\n            'uploader_id': uploader_id,\n            'upload_date': upload_date,\n            'uploader_url': uploader_url,\n            'tags': tags,\n            'view_count': view_count,\n            'average_rating': average_rating,\n        })\n        self._sort_formats(entry['formats'])\n\n        return entry\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "gaskrank.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/gaskrank.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}