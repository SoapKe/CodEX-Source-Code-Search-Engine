{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .srgssr import SRGSSRIE\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    unescapeHTML,\n    determine_ext,\n)\n\n\nclass RTSIE(SRGSSRIE):\n    IE_DESC = 'RTS.ch'\n    _VALID_URL = r'rts:(?P<rts_id>\\d+)|https?://(?:.+?\\.)?rts\\.ch/(?:[^/]+/){2,}(?P<id>[0-9]+)-(?P<display_id>.+?)\\.html'\n\n    _TESTS = [\n        {\n            'url': 'http://www.rts.ch/archives/tv/divers/3449373-les-enfants-terribles.html',\n            'md5': 'ff7f8450a90cf58dacb64e29707b4a8e',\n            'info_dict': {\n                'id': '3449373',\n                'display_id': 'les-enfants-terribles',\n                'ext': 'mp4',\n                'duration': 1488,\n                'title': 'Les Enfants Terribles',\n                'description': 'France Pommier et sa soeur Luce Feral, les deux filles de ce groupe de 5.',\n                'uploader': 'Divers',\n                'upload_date': '19680921',\n                'timestamp': -40280400,\n                'thumbnail': r're:^https?://.*\\.image',\n                'view_count': int,\n            },\n        },\n        {\n            'url': 'http://www.rts.ch/emissions/passe-moi-les-jumelles/5624067-entre-ciel-et-mer.html',\n            'info_dict': {\n                'id': '5624065',\n                'title': 'Passe-moi les jumelles',\n            },\n            'playlist_mincount': 4,\n        },\n        {\n            'url': 'http://www.rts.ch/video/sport/hockey/5745975-1-2-kloten-fribourg-5-2-second-but-pour-gotteron-par-kwiatowski.html',\n            'info_dict': {\n                'id': '5745975',\n                'display_id': '1-2-kloten-fribourg-5-2-second-but-pour-gotteron-par-kwiatowski',\n                'ext': 'mp4',\n                'duration': 48,\n                'title': '1/2, Kloten - Fribourg (5-2): second but pour Gott\u00e9ron par Kwiatowski',\n                'description': 'Hockey - Playoff',\n                'uploader': 'Hockey',\n                'upload_date': '20140403',\n                'timestamp': 1396556882,\n                'thumbnail': r're:^https?://.*\\.image',\n                'view_count': int,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n            'skip': 'Blocked outside Switzerland',\n        },\n        {\n            'url': 'http://www.rts.ch/video/info/journal-continu/5745356-londres-cachee-par-un-epais-smog.html',\n            'md5': '1bae984fe7b1f78e94abc74e802ed99f',\n            'info_dict': {\n                'id': '5745356',\n                'display_id': 'londres-cachee-par-un-epais-smog',\n                'ext': 'mp4',\n                'duration': 33,\n                'title': 'Londres cach\u00e9e par un \u00e9pais smog',\n                'description': 'Un important voile de smog recouvre Londres depuis mercredi, provoqu\u00e9 par la pollution et du sable du Sahara.',\n                'uploader': 'L\\'actu en vid\u00e9o',\n                'upload_date': '20140403',\n                'timestamp': 1396537322,\n                'thumbnail': r're:^https?://.*\\.image',\n                'view_count': int,\n            },\n        },\n        {\n            'url': 'http://www.rts.ch/audio/couleur3/programmes/la-belle-video-de-stephane-laurenceau/5706148-urban-hippie-de-damien-krisl-03-04-2014.html',\n            'md5': 'dd8ef6a22dff163d063e2a52bc8adcae',\n            'info_dict': {\n                'id': '5706148',\n                'display_id': 'urban-hippie-de-damien-krisl-03-04-2014',\n                'ext': 'mp3',\n                'duration': 123,\n                'title': '\"Urban Hippie\", de Damien Krisl',\n                'description': 'Des Hippies super glam.',\n                'upload_date': '20140403',\n                'timestamp': 1396551600,\n            },\n        },\n        {\n            \n            'url': 'http://www.rts.ch/sport/hockey/6693917-hockey-davos-decroche-son-31e-titre-de-champion-de-suisse.html',\n            'info_dict': {\n                'id': '6693917',\n                'title': 'Hockey: Davos d\u00e9croche son 31e titre de champion de Suisse',\n            },\n            'playlist_mincount': 5,\n        },\n        {\n            'url': 'http://pages.rts.ch/emissions/passe-moi-les-jumelles/5624065-entre-ciel-et-mer.html',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        m = re.match(self._VALID_URL, url)\n        media_id = m.group('rts_id') or m.group('id')\n        display_id = m.group('display_id') or media_id\n\n        def download_json(internal_id):\n            return self._download_json(\n                'http://www.rts.ch/a/%s.html?f=json/article' % internal_id,\n                display_id)\n\n        all_info = download_json(media_id)\n\n        \n        if 'video' not in all_info and 'audio' not in all_info:\n            entries = []\n\n            for item in all_info.get('items', []):\n                item_url = item.get('url')\n                if not item_url:\n                    continue\n                entries.append(self.url_result(item_url, 'RTS'))\n\n            if not entries:\n                page, urlh = self._download_webpage_handle(url, display_id)\n                if re.match(self._VALID_URL, urlh.geturl()).group('id') != media_id:\n                    return self.url_result(urlh.geturl(), 'RTS')\n\n                \n                videos = re.findall(\n                    r'<article[^>]+class=\"content-item\"[^>]*>\\s*<a[^>]+data-video-urn=\"urn:([^\"]+)\"',\n                    page)\n                if not videos:\n                    videos = re.findall(\n                        r'(?s)<iframe[^>]+class=\"srg-player\"[^>]+src=\"[^\"]+urn:([^\"]+)\"',\n                        page)\n                if videos:\n                    entries = [self.url_result('srgssr:%s' % video_urn, 'SRGSSR') for video_urn in videos]\n\n            if entries:\n                return self.playlist_result(entries, media_id, all_info.get('title'))\n\n            internal_id = self._html_search_regex(\n                r'<(?:video|audio) data-id=\"([0-9]+)\"', page,\n                'internal video id')\n            all_info = download_json(internal_id)\n\n        media_type = 'video' if 'video' in all_info else 'audio'\n\n        \n        self.get_media_data('rts', media_type, media_id)\n\n        info = all_info['video']['JSONinfo'] if 'video' in all_info else all_info['audio']\n\n        title = info['title']\n\n        def extract_bitrate(url):\n            return int_or_none(self._search_regex(\n                r'-([0-9]+)k\\.', url, 'bitrate', default=None))\n\n        formats = []\n        streams = info.get('streams', {})\n        for format_id, format_url in streams.items():\n            if format_id == 'hds_sd' and 'hds' in streams:\n                continue\n            if format_id == 'hls_sd' and 'hls' in streams:\n                continue\n            ext = determine_ext(format_url)\n            if ext in ('m3u8', 'f4m'):\n                format_url = self._get_tokenized_src(format_url, media_id, format_id)\n                if ext == 'f4m':\n                    formats.extend(self._extract_f4m_formats(\n                        format_url + ('?' if '?' not in format_url else '&') + 'hdcore=3.4.0',\n                        media_id, f4m_id=format_id, fatal=False))\n                else:\n                    formats.extend(self._extract_m3u8_formats(\n                        format_url, media_id, 'mp4', 'm3u8_native', m3u8_id=format_id, fatal=False))\n            else:\n                formats.append({\n                    'format_id': format_id,\n                    'url': format_url,\n                    'tbr': extract_bitrate(format_url),\n                })\n\n        for media in info.get('media', []):\n            media_url = media.get('url')\n            if not media_url or re.match(r'https?://', media_url):\n                continue\n            rate = media.get('rate')\n            ext = media.get('ext') or determine_ext(media_url, 'mp4')\n            format_id = ext\n            if rate:\n                format_id += '-%dk' % rate\n            formats.append({\n                'format_id': format_id,\n                'url': 'http://download-video.rts.ch/' + media_url,\n                'tbr': rate or extract_bitrate(media_url),\n            })\n\n        self._check_formats(formats, media_id)\n        self._sort_formats(formats)\n\n        duration = info.get('duration') or info.get('cutout') or info.get('cutduration')\n        if isinstance(duration, compat_str):\n            duration = parse_duration(duration)\n\n        return {\n            'id': media_id,\n            'display_id': display_id,\n            'formats': formats,\n            'title': title,\n            'description': info.get('intro'),\n            'duration': duration,\n            'view_count': int_or_none(info.get('plays')),\n            'uploader': info.get('programName'),\n            'timestamp': parse_iso8601(info.get('broadcast_date')),\n            'thumbnail': unescapeHTML(info.get('preview_image_url')),\n        }\n", "comments": "# coding: utf-8\n# m3u8 download\n# article with videos on rhs\n# media_id extracted out of URL is not always a real id\n# article with videos on rhs\n# check for errors\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .srgssr import SRGSSRIE\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    unescapeHTML,\n    determine_ext,\n)\n\n\nclass RTSIE(SRGSSRIE):\n    IE_DESC = 'RTS.ch'\n    _VALID_URL = r'rts:(?P<rts_id>\\d+)|https?://(?:.+?\\.)?rts\\.ch/(?:[^/]+/){2,}(?P<id>[0-9]+)-(?P<display_id>.+?)\\.html'\n\n    _TESTS = [\n        {\n            'url': 'http://www.rts.ch/archives/tv/divers/3449373-les-enfants-terribles.html',\n            'md5': 'ff7f8450a90cf58dacb64e29707b4a8e',\n            'info_dict': {\n                'id': '3449373',\n                'display_id': 'les-enfants-terribles',\n                'ext': 'mp4',\n                'duration': 1488,\n                'title': 'Les Enfants Terribles',\n                'description': 'France Pommier et sa soeur Luce Feral, les deux filles de ce groupe de 5.',\n                'uploader': 'Divers',\n                'upload_date': '19680921',\n                'timestamp': -40280400,\n                'thumbnail': r're:^https?://.*\\.image',\n                'view_count': int,\n            },\n        },\n        {\n            'url': 'http://www.rts.ch/emissions/passe-moi-les-jumelles/5624067-entre-ciel-et-mer.html',\n            'info_dict': {\n                'id': '5624065',\n                'title': 'Passe-moi les jumelles',\n            },\n            'playlist_mincount': 4,\n        },\n        {\n            'url': 'http://www.rts.ch/video/sport/hockey/5745975-1-2-kloten-fribourg-5-2-second-but-pour-gotteron-par-kwiatowski.html',\n            'info_dict': {\n                'id': '5745975',\n                'display_id': '1-2-kloten-fribourg-5-2-second-but-pour-gotteron-par-kwiatowski',\n                'ext': 'mp4',\n                'duration': 48,\n                'title': '1/2, Kloten - Fribourg (5-2): second but pour Gott\u00e9ron par Kwiatowski',\n                'description': 'Hockey - Playoff',\n                'uploader': 'Hockey',\n                'upload_date': '20140403',\n                'timestamp': 1396556882,\n                'thumbnail': r're:^https?://.*\\.image',\n                'view_count': int,\n            },\n            'params': {\n                # m3u8 download\n                'skip_download': True,\n            },\n            'skip': 'Blocked outside Switzerland',\n        },\n        {\n            'url': 'http://www.rts.ch/video/info/journal-continu/5745356-londres-cachee-par-un-epais-smog.html',\n            'md5': '1bae984fe7b1f78e94abc74e802ed99f',\n            'info_dict': {\n                'id': '5745356',\n                'display_id': 'londres-cachee-par-un-epais-smog',\n                'ext': 'mp4',\n                'duration': 33,\n                'title': 'Londres cach\u00e9e par un \u00e9pais smog',\n                'description': 'Un important voile de smog recouvre Londres depuis mercredi, provoqu\u00e9 par la pollution et du sable du Sahara.',\n                'uploader': 'L\\'actu en vid\u00e9o',\n                'upload_date': '20140403',\n                'timestamp': 1396537322,\n                'thumbnail': r're:^https?://.*\\.image',\n                'view_count': int,\n            },\n        },\n        {\n            'url': 'http://www.rts.ch/audio/couleur3/programmes/la-belle-video-de-stephane-laurenceau/5706148-urban-hippie-de-damien-krisl-03-04-2014.html',\n            'md5': 'dd8ef6a22dff163d063e2a52bc8adcae',\n            'info_dict': {\n                'id': '5706148',\n                'display_id': 'urban-hippie-de-damien-krisl-03-04-2014',\n                'ext': 'mp3',\n                'duration': 123,\n                'title': '\"Urban Hippie\", de Damien Krisl',\n                'description': 'Des Hippies super glam.',\n                'upload_date': '20140403',\n                'timestamp': 1396551600,\n            },\n        },\n        {\n            # article with videos on rhs\n            'url': 'http://www.rts.ch/sport/hockey/6693917-hockey-davos-decroche-son-31e-titre-de-champion-de-suisse.html',\n            'info_dict': {\n                'id': '6693917',\n                'title': 'Hockey: Davos d\u00e9croche son 31e titre de champion de Suisse',\n            },\n            'playlist_mincount': 5,\n        },\n        {\n            'url': 'http://pages.rts.ch/emissions/passe-moi-les-jumelles/5624065-entre-ciel-et-mer.html',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        m = re.match(self._VALID_URL, url)\n        media_id = m.group('rts_id') or m.group('id')\n        display_id = m.group('display_id') or media_id\n\n        def download_json(internal_id):\n            return self._download_json(\n                'http://www.rts.ch/a/%s.html?f=json/article' % internal_id,\n                display_id)\n\n        all_info = download_json(media_id)\n\n        # media_id extracted out of URL is not always a real id\n        if 'video' not in all_info and 'audio' not in all_info:\n            entries = []\n\n            for item in all_info.get('items', []):\n                item_url = item.get('url')\n                if not item_url:\n                    continue\n                entries.append(self.url_result(item_url, 'RTS'))\n\n            if not entries:\n                page, urlh = self._download_webpage_handle(url, display_id)\n                if re.match(self._VALID_URL, urlh.geturl()).group('id') != media_id:\n                    return self.url_result(urlh.geturl(), 'RTS')\n\n                # article with videos on rhs\n                videos = re.findall(\n                    r'<article[^>]+class=\"content-item\"[^>]*>\\s*<a[^>]+data-video-urn=\"urn:([^\"]+)\"',\n                    page)\n                if not videos:\n                    videos = re.findall(\n                        r'(?s)<iframe[^>]+class=\"srg-player\"[^>]+src=\"[^\"]+urn:([^\"]+)\"',\n                        page)\n                if videos:\n                    entries = [self.url_result('srgssr:%s' % video_urn, 'SRGSSR') for video_urn in videos]\n\n            if entries:\n                return self.playlist_result(entries, media_id, all_info.get('title'))\n\n            internal_id = self._html_search_regex(\n                r'<(?:video|audio) data-id=\"([0-9]+)\"', page,\n                'internal video id')\n            all_info = download_json(internal_id)\n\n        media_type = 'video' if 'video' in all_info else 'audio'\n\n        # check for errors\n        self.get_media_data('rts', media_type, media_id)\n\n        info = all_info['video']['JSONinfo'] if 'video' in all_info else all_info['audio']\n\n        title = info['title']\n\n        def extract_bitrate(url):\n            return int_or_none(self._search_regex(\n                r'-([0-9]+)k\\.', url, 'bitrate', default=None))\n\n        formats = []\n        streams = info.get('streams', {})\n        for format_id, format_url in streams.items():\n            if format_id == 'hds_sd' and 'hds' in streams:\n                continue\n            if format_id == 'hls_sd' and 'hls' in streams:\n                continue\n            ext = determine_ext(format_url)\n            if ext in ('m3u8', 'f4m'):\n                format_url = self._get_tokenized_src(format_url, media_id, format_id)\n                if ext == 'f4m':\n                    formats.extend(self._extract_f4m_formats(\n                        format_url + ('?' if '?' not in format_url else '&') + 'hdcore=3.4.0',\n                        media_id, f4m_id=format_id, fatal=False))\n                else:\n                    formats.extend(self._extract_m3u8_formats(\n                        format_url, media_id, 'mp4', 'm3u8_native', m3u8_id=format_id, fatal=False))\n            else:\n                formats.append({\n                    'format_id': format_id,\n                    'url': format_url,\n                    'tbr': extract_bitrate(format_url),\n                })\n\n        for media in info.get('media', []):\n            media_url = media.get('url')\n            if not media_url or re.match(r'https?://', media_url):\n                continue\n            rate = media.get('rate')\n            ext = media.get('ext') or determine_ext(media_url, 'mp4')\n            format_id = ext\n            if rate:\n                format_id += '-%dk' % rate\n            formats.append({\n                'format_id': format_id,\n                'url': 'http://download-video.rts.ch/' + media_url,\n                'tbr': rate or extract_bitrate(media_url),\n            })\n\n        self._check_formats(formats, media_id)\n        self._sort_formats(formats)\n\n        duration = info.get('duration') or info.get('cutout') or info.get('cutduration')\n        if isinstance(duration, compat_str):\n            duration = parse_duration(duration)\n\n        return {\n            'id': media_id,\n            'display_id': display_id,\n            'formats': formats,\n            'title': title,\n            'description': info.get('intro'),\n            'duration': duration,\n            'view_count': int_or_none(info.get('plays')),\n            'uploader': info.get('programName'),\n            'timestamp': parse_iso8601(info.get('broadcast_date')),\n            'thumbnail': unescapeHTML(info.get('preview_image_url')),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "rts.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/rts.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}