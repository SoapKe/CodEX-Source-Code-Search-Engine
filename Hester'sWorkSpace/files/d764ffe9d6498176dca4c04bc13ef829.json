{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    urlencode_postdata,\n    int_or_none,\n    unified_strdate,\n)\n\n\nclass VierIE(InfoExtractor):\n    IE_NAME = 'vier'\n    IE_DESC = 'vier.be and vijf.be'\n    _VALID_URL = r\n    _NETRC_MACHINE = 'vier'\n    _TESTS = [{\n        'url': 'http://www.vier.be/planb/videos/het-wordt-warm-de-moestuin/16129',\n        'md5': 'e4ae2054a6b040ef1e289e20d111b46e',\n        'info_dict': {\n            'id': '16129',\n            'display_id': 'het-wordt-warm-de-moestuin',\n            'ext': 'mp4',\n            'title': 'Het wordt warm in De Moestuin',\n            'description': 'De vele uren werk eisen hun tol. Wim droomt van assistentie...',\n            'upload_date': '20121025',\n            'series': 'Plan B',\n            'tags': ['De Moestuin', 'Moestuin', 'meisjes', 'Tomaat', 'Wim', 'Droom'],\n        },\n    }, {\n        'url': 'http://www.vijf.be/temptationisland/videos/zo-grappig-temptation-island-hosts-moeten-kiezen-tussen-onmogelijke-dilemmas/2561614',\n        'info_dict': {\n            'id': '2561614',\n            'display_id': 'zo-grappig-temptation-island-hosts-moeten-kiezen-tussen-onmogelijke-dilemmas',\n            'ext': 'mp4',\n            'title': 'md5:84f45fe48b8c1fa296a7f6d208d080a7',\n            'description': 'md5:0356d4981e58b8cbee19355cbd51a8fe',\n            'upload_date': '20170228',\n            'series': 'Temptation Island',\n            'tags': list,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.vier.be/janigaat/videos/jani-gaat-naar-tokio-aflevering-4/2674839',\n        'info_dict': {\n            'id': '2674839',\n            'display_id': 'jani-gaat-naar-tokio-aflevering-4',\n            'ext': 'mp4',\n            'title': 'Jani gaat naar Tokio - Aflevering 4',\n            'description': 'md5:aa8d611541db6ae9e863125704511f88',\n            'upload_date': '20170501',\n            'series': 'Jani gaat',\n            'episode_number': 4,\n            'tags': ['Jani Gaat', 'Volledige Aflevering'],\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Requires account credentials',\n    }, {\n        \n        \n        'url': 'http://www.vier.be/janigaat/videos/jani-gaat-naar-tokio-aflevering-4/2674839',\n        'info_dict': {\n            'id': '2674839',\n            'display_id': 'jani-gaat-naar-tokio-aflevering-4',\n            'ext': 'mp4',\n            'title': 'jani-gaat-naar-tokio-aflevering-4',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Log in to extract metadata'],\n    }, {\n        \n        'url': 'http://www.vier.be/planb/videos/dit-najaar-plan-b',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.vier.be/video/v3/embed/16129',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.vijf.be/embed/video/public/4093',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.vier.be/video/blockbusters/in-juli-en-augustus-summer-classics',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.vier.be/video/achter-de-rug/2017/achter-de-rug-seizoen-1-aflevering-6',\n        'only_matching': True,\n    }]\n\n    def _real_initialize(self):\n        self._logged_in = False\n\n    def _login(self, site):\n        username, password = self._get_login_info()\n        if username is None or password is None:\n            return\n\n        login_page = self._download_webpage(\n            'http://www.%s.be/user/login' % site,\n            None, note='Logging in', errnote='Unable to log in',\n            data=urlencode_postdata({\n                'form_id': 'user_login',\n                'name': username,\n                'pass': password,\n            }),\n            headers={'Content-Type': 'application/x-www-form-urlencoded'})\n\n        login_error = self._html_search_regex(\n            r'(?s)<div class=\"messages error\">\\s*<div>\\s*<h2.+?</h2>(.+?)<',\n            login_page, 'login error', default=None)\n        if login_error:\n            self.report_warning('Unable to log in: %s' % login_error)\n        else:\n            self._logged_in = True\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        embed_id = mobj.group('embed_id')\n        display_id = mobj.group('display_id') or embed_id\n        video_id = mobj.group('id') or embed_id\n        site = mobj.group('site')\n\n        if not self._logged_in:\n            self._login(site)\n\n        webpage = self._download_webpage(url, display_id)\n\n        if r'id=\"user-login\"' in webpage:\n            self.report_warning(\n                'Log in to extract metadata', video_id=display_id)\n            webpage = self._download_webpage(\n                'http://www.%s.be/video/v3/embed/%s' % (site, video_id),\n                display_id)\n\n        video_id = self._search_regex(\n            [r'data-nid=\"(\\d+)\"', r'\"nid\"\\s*:\\s*\"(\\d+)\"'],\n            webpage, 'video id', default=video_id or display_id)\n\n        playlist_url = self._search_regex(\n            r'data-file=([\"\\'])(?P<url>(?:https?:)?//[^/]+/.+?\\.m3u8.*?)\\1',\n            webpage, 'm3u8 url', default=None, group='url')\n\n        if not playlist_url:\n            application = self._search_regex(\n                [r'data-application=\"([^\"]+)\"', r'\"application\"\\s*:\\s*\"([^\"]+)\"'],\n                webpage, 'application', default=site + '_vod')\n            filename = self._search_regex(\n                [r'data-filename=\"([^\"]+)\"', r'\"filename\"\\s*:\\s*\"([^\"]+)\"'],\n                webpage, 'filename')\n            playlist_url = 'http://vod.streamcloud.be/%s/_definst_/mp4:%s.mp4/playlist.m3u8' % (application, filename)\n\n        formats = self._extract_wowza_formats(\n            playlist_url, display_id, skip_protocols=['dash'])\n        self._sort_formats(formats)\n\n        title = self._og_search_title(webpage, default=display_id)\n        description = self._html_search_regex(\n            r'(?s)<div\\b[^>]+\\bclass=([\"\\'])[^>]*?\\bfield-type-text-with-summary\\b[^>]*?\\1[^>]*>.*?<p>(?P<value>.+?)</p>',\n            webpage, 'description', default=None, group='value')\n        thumbnail = self._og_search_thumbnail(webpage, default=None)\n        upload_date = unified_strdate(self._html_search_regex(\n            r'(?s)<div\\b[^>]+\\bclass=([\"\\'])[^>]*?\\bfield-name-post-date\\b[^>]*?\\1[^>]*>.*?(?P<value>\\d{2}/\\d{2}/\\d{4})',\n            webpage, 'upload date', default=None, group='value'))\n\n        series = self._search_regex(\n            r'data-program=([\"\\'])(?P<value>(?:(?!\\1).)+)\\1', webpage,\n            'series', default=None, group='value')\n        episode_number = int_or_none(self._search_regex(\n            r'(?i)aflevering (\\d+)', title, 'episode number', default=None))\n        tags = re.findall(r'<a\\b[^>]+\\bhref=[\"\\']/tags/[^>]+>([^<]+)<', webpage)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'upload_date': upload_date,\n            'series': series,\n            'episode_number': episode_number,\n            'tags': tags,\n            'formats': formats,\n        }\n\n\nclass VierVideosIE(InfoExtractor):\n    IE_NAME = 'vier:videos'\n    _VALID_URL = r'https?://(?:www\\.)?(?P<site>vier|vijf)\\.be/(?P<program>[^/]+)/videos(?:\\?.*\\bpage=(?P<page>\\d+)|$)'\n    _TESTS = [{\n        'url': 'http://www.vier.be/demoestuin/videos',\n        'info_dict': {\n            'id': 'demoestuin',\n        },\n        'playlist_mincount': 153,\n    }, {\n        'url': 'http://www.vijf.be/temptationisland/videos',\n        'info_dict': {\n            'id': 'temptationisland',\n        },\n        'playlist_mincount': 159,\n    }, {\n        'url': 'http://www.vier.be/demoestuin/videos?page=6',\n        'info_dict': {\n            'id': 'demoestuin-page6',\n        },\n        'playlist_mincount': 20,\n    }, {\n        'url': 'http://www.vier.be/demoestuin/videos?page=7',\n        'info_dict': {\n            'id': 'demoestuin-page7',\n        },\n        'playlist_mincount': 13,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        program = mobj.group('program')\n        site = mobj.group('site')\n\n        page_id = mobj.group('page')\n        if page_id:\n            page_id = int(page_id)\n            start_page = page_id\n            playlist_id = '%s-page%d' % (program, page_id)\n        else:\n            start_page = 0\n            playlist_id = program\n\n        entries = []\n        for current_page_id in itertools.count(start_page):\n            current_page = self._download_webpage(\n                'http://www.%s.be/%s/videos?page=%d' % (site, program, current_page_id),\n                program,\n                'Downloading page %d' % (current_page_id + 1))\n            page_entries = [\n                self.url_result('http://www.' + site + '.be' + video_url, 'Vier')\n                for video_url in re.findall(\n                    r'<h[23]><a href=\"(/[^/]+/videos/[^/]+(?:/\\d+)?)\">', current_page)]\n            entries.extend(page_entries)\n            if page_id or '>Meer<' not in current_page:\n                break\n\n        return self.playlist_result(entries, playlist_id)\n", "comments": "(?x)\n                    https?://\n                        (?:www\\.)?(?P<site>vier|vijf)\\.be/\n                        (?:\n                            (?:\n                                [^/]+/videos|\n                                video(?:/[^/]+)*\n                            )/\n                            (?P<display_id>[^/]+)(?:/(?P<id>\\d+))?|\n                            (?:\n                                video/v3/embed|\n                                embed/video/public\n                            )/(?P<embed_id>\\d+)\n                        )\n                    \n \n# coding: utf-8\n# Requires account credentials but bypassed extraction via v3/embed page\n# without metadata\n# Without video id in URL\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    urlencode_postdata,\n    int_or_none,\n    unified_strdate,\n)\n\n\nclass VierIE(InfoExtractor):\n    IE_NAME = 'vier'\n    IE_DESC = 'vier.be and vijf.be'\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?(?P<site>vier|vijf)\\.be/\n                        (?:\n                            (?:\n                                [^/]+/videos|\n                                video(?:/[^/]+)*\n                            )/\n                            (?P<display_id>[^/]+)(?:/(?P<id>\\d+))?|\n                            (?:\n                                video/v3/embed|\n                                embed/video/public\n                            )/(?P<embed_id>\\d+)\n                        )\n                    '''\n    _NETRC_MACHINE = 'vier'\n    _TESTS = [{\n        'url': 'http://www.vier.be/planb/videos/het-wordt-warm-de-moestuin/16129',\n        'md5': 'e4ae2054a6b040ef1e289e20d111b46e',\n        'info_dict': {\n            'id': '16129',\n            'display_id': 'het-wordt-warm-de-moestuin',\n            'ext': 'mp4',\n            'title': 'Het wordt warm in De Moestuin',\n            'description': 'De vele uren werk eisen hun tol. Wim droomt van assistentie...',\n            'upload_date': '20121025',\n            'series': 'Plan B',\n            'tags': ['De Moestuin', 'Moestuin', 'meisjes', 'Tomaat', 'Wim', 'Droom'],\n        },\n    }, {\n        'url': 'http://www.vijf.be/temptationisland/videos/zo-grappig-temptation-island-hosts-moeten-kiezen-tussen-onmogelijke-dilemmas/2561614',\n        'info_dict': {\n            'id': '2561614',\n            'display_id': 'zo-grappig-temptation-island-hosts-moeten-kiezen-tussen-onmogelijke-dilemmas',\n            'ext': 'mp4',\n            'title': 'md5:84f45fe48b8c1fa296a7f6d208d080a7',\n            'description': 'md5:0356d4981e58b8cbee19355cbd51a8fe',\n            'upload_date': '20170228',\n            'series': 'Temptation Island',\n            'tags': list,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.vier.be/janigaat/videos/jani-gaat-naar-tokio-aflevering-4/2674839',\n        'info_dict': {\n            'id': '2674839',\n            'display_id': 'jani-gaat-naar-tokio-aflevering-4',\n            'ext': 'mp4',\n            'title': 'Jani gaat naar Tokio - Aflevering 4',\n            'description': 'md5:aa8d611541db6ae9e863125704511f88',\n            'upload_date': '20170501',\n            'series': 'Jani gaat',\n            'episode_number': 4,\n            'tags': ['Jani Gaat', 'Volledige Aflevering'],\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Requires account credentials',\n    }, {\n        # Requires account credentials but bypassed extraction via v3/embed page\n        # without metadata\n        'url': 'http://www.vier.be/janigaat/videos/jani-gaat-naar-tokio-aflevering-4/2674839',\n        'info_dict': {\n            'id': '2674839',\n            'display_id': 'jani-gaat-naar-tokio-aflevering-4',\n            'ext': 'mp4',\n            'title': 'jani-gaat-naar-tokio-aflevering-4',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Log in to extract metadata'],\n    }, {\n        # Without video id in URL\n        'url': 'http://www.vier.be/planb/videos/dit-najaar-plan-b',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.vier.be/video/v3/embed/16129',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.vijf.be/embed/video/public/4093',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.vier.be/video/blockbusters/in-juli-en-augustus-summer-classics',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.vier.be/video/achter-de-rug/2017/achter-de-rug-seizoen-1-aflevering-6',\n        'only_matching': True,\n    }]\n\n    def _real_initialize(self):\n        self._logged_in = False\n\n    def _login(self, site):\n        username, password = self._get_login_info()\n        if username is None or password is None:\n            return\n\n        login_page = self._download_webpage(\n            'http://www.%s.be/user/login' % site,\n            None, note='Logging in', errnote='Unable to log in',\n            data=urlencode_postdata({\n                'form_id': 'user_login',\n                'name': username,\n                'pass': password,\n            }),\n            headers={'Content-Type': 'application/x-www-form-urlencoded'})\n\n        login_error = self._html_search_regex(\n            r'(?s)<div class=\"messages error\">\\s*<div>\\s*<h2.+?</h2>(.+?)<',\n            login_page, 'login error', default=None)\n        if login_error:\n            self.report_warning('Unable to log in: %s' % login_error)\n        else:\n            self._logged_in = True\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        embed_id = mobj.group('embed_id')\n        display_id = mobj.group('display_id') or embed_id\n        video_id = mobj.group('id') or embed_id\n        site = mobj.group('site')\n\n        if not self._logged_in:\n            self._login(site)\n\n        webpage = self._download_webpage(url, display_id)\n\n        if r'id=\"user-login\"' in webpage:\n            self.report_warning(\n                'Log in to extract metadata', video_id=display_id)\n            webpage = self._download_webpage(\n                'http://www.%s.be/video/v3/embed/%s' % (site, video_id),\n                display_id)\n\n        video_id = self._search_regex(\n            [r'data-nid=\"(\\d+)\"', r'\"nid\"\\s*:\\s*\"(\\d+)\"'],\n            webpage, 'video id', default=video_id or display_id)\n\n        playlist_url = self._search_regex(\n            r'data-file=([\"\\'])(?P<url>(?:https?:)?//[^/]+/.+?\\.m3u8.*?)\\1',\n            webpage, 'm3u8 url', default=None, group='url')\n\n        if not playlist_url:\n            application = self._search_regex(\n                [r'data-application=\"([^\"]+)\"', r'\"application\"\\s*:\\s*\"([^\"]+)\"'],\n                webpage, 'application', default=site + '_vod')\n            filename = self._search_regex(\n                [r'data-filename=\"([^\"]+)\"', r'\"filename\"\\s*:\\s*\"([^\"]+)\"'],\n                webpage, 'filename')\n            playlist_url = 'http://vod.streamcloud.be/%s/_definst_/mp4:%s.mp4/playlist.m3u8' % (application, filename)\n\n        formats = self._extract_wowza_formats(\n            playlist_url, display_id, skip_protocols=['dash'])\n        self._sort_formats(formats)\n\n        title = self._og_search_title(webpage, default=display_id)\n        description = self._html_search_regex(\n            r'(?s)<div\\b[^>]+\\bclass=([\"\\'])[^>]*?\\bfield-type-text-with-summary\\b[^>]*?\\1[^>]*>.*?<p>(?P<value>.+?)</p>',\n            webpage, 'description', default=None, group='value')\n        thumbnail = self._og_search_thumbnail(webpage, default=None)\n        upload_date = unified_strdate(self._html_search_regex(\n            r'(?s)<div\\b[^>]+\\bclass=([\"\\'])[^>]*?\\bfield-name-post-date\\b[^>]*?\\1[^>]*>.*?(?P<value>\\d{2}/\\d{2}/\\d{4})',\n            webpage, 'upload date', default=None, group='value'))\n\n        series = self._search_regex(\n            r'data-program=([\"\\'])(?P<value>(?:(?!\\1).)+)\\1', webpage,\n            'series', default=None, group='value')\n        episode_number = int_or_none(self._search_regex(\n            r'(?i)aflevering (\\d+)', title, 'episode number', default=None))\n        tags = re.findall(r'<a\\b[^>]+\\bhref=[\"\\']/tags/[^>]+>([^<]+)<', webpage)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'upload_date': upload_date,\n            'series': series,\n            'episode_number': episode_number,\n            'tags': tags,\n            'formats': formats,\n        }\n\n\nclass VierVideosIE(InfoExtractor):\n    IE_NAME = 'vier:videos'\n    _VALID_URL = r'https?://(?:www\\.)?(?P<site>vier|vijf)\\.be/(?P<program>[^/]+)/videos(?:\\?.*\\bpage=(?P<page>\\d+)|$)'\n    _TESTS = [{\n        'url': 'http://www.vier.be/demoestuin/videos',\n        'info_dict': {\n            'id': 'demoestuin',\n        },\n        'playlist_mincount': 153,\n    }, {\n        'url': 'http://www.vijf.be/temptationisland/videos',\n        'info_dict': {\n            'id': 'temptationisland',\n        },\n        'playlist_mincount': 159,\n    }, {\n        'url': 'http://www.vier.be/demoestuin/videos?page=6',\n        'info_dict': {\n            'id': 'demoestuin-page6',\n        },\n        'playlist_mincount': 20,\n    }, {\n        'url': 'http://www.vier.be/demoestuin/videos?page=7',\n        'info_dict': {\n            'id': 'demoestuin-page7',\n        },\n        'playlist_mincount': 13,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        program = mobj.group('program')\n        site = mobj.group('site')\n\n        page_id = mobj.group('page')\n        if page_id:\n            page_id = int(page_id)\n            start_page = page_id\n            playlist_id = '%s-page%d' % (program, page_id)\n        else:\n            start_page = 0\n            playlist_id = program\n\n        entries = []\n        for current_page_id in itertools.count(start_page):\n            current_page = self._download_webpage(\n                'http://www.%s.be/%s/videos?page=%d' % (site, program, current_page_id),\n                program,\n                'Downloading page %d' % (current_page_id + 1))\n            page_entries = [\n                self.url_result('http://www.' + site + '.be' + video_url, 'Vier')\n                for video_url in re.findall(\n                    r'<h[23]><a href=\"(/[^/]+/videos/[^/]+(?:/\\d+)?)\">', current_page)]\n            entries.extend(page_entries)\n            if page_id or '>Meer<' not in current_page:\n                break\n\n        return self.playlist_result(entries, playlist_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vier.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vier.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}