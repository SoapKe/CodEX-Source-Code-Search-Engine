{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    urlencode_postdata,\n    compat_str,\n    ExtractorError,\n)\n\n\nclass CuriosityStreamBaseIE(InfoExtractor):\n    _NETRC_MACHINE = 'curiositystream'\n    _auth_token = None\n    _API_BASE_URL = 'https://api.curiositystream.com/v1/'\n\n    def _handle_errors(self, result):\n        error = result.get('error', {}).get('message')\n        if error:\n            if isinstance(error, dict):\n                error = ', '.join(error.values())\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, error), expected=True)\n\n    def _call_api(self, path, video_id):\n        headers = {}\n        if self._auth_token:\n            headers['X-Auth-Token'] = self._auth_token\n        result = self._download_json(\n            self._API_BASE_URL + path, video_id, headers=headers)\n        self._handle_errors(result)\n        return result['data']\n\n    def _real_initialize(self):\n        (email, password) = self._get_login_info()\n        if email is None:\n            return\n        result = self._download_json(\n            self._API_BASE_URL + 'login', None, data=urlencode_postdata({\n                'email': email,\n                'password': password,\n            }))\n        self._handle_errors(result)\n        self._auth_token = result['message']['auth_token']\n\n    def _extract_media_info(self, media):\n        video_id = compat_str(media['id'])\n        title = media['title']\n\n        formats = []\n        for encoding in media.get('encodings', []):\n            m3u8_url = encoding.get('master_playlist_url')\n            if m3u8_url:\n                formats.extend(self._extract_m3u8_formats(\n                    m3u8_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            encoding_url = encoding.get('url')\n            file_url = encoding.get('file_url')\n            if not encoding_url and not file_url:\n                continue\n            f = {\n                'width': int_or_none(encoding.get('width')),\n                'height': int_or_none(encoding.get('height')),\n                'vbr': int_or_none(encoding.get('video_bitrate')),\n                'abr': int_or_none(encoding.get('audio_bitrate')),\n                'filesize': int_or_none(encoding.get('size_in_bytes')),\n                'vcodec': encoding.get('video_codec'),\n                'acodec': encoding.get('audio_codec'),\n                'container': encoding.get('container_type'),\n            }\n            for f_url in (encoding_url, file_url):\n                if not f_url:\n                    continue\n                fmt = f.copy()\n                rtmp = re.search(r'^(?P<url>rtmpe?://(?P<host>[^/]+)/(?P<app>.+))/(?P<playpath>mp[34]:.+)$', f_url)\n                if rtmp:\n                    fmt.update({\n                        'url': rtmp.group('url'),\n                        'play_path': rtmp.group('playpath'),\n                        'app': rtmp.group('app'),\n                        'ext': 'flv',\n                        'format_id': 'rtmp',\n                    })\n                else:\n                    fmt.update({\n                        'url': f_url,\n                        'format_id': 'http',\n                    })\n                formats.append(fmt)\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for closed_caption in media.get('closed_captions', []):\n            sub_url = closed_caption.get('file')\n            if not sub_url:\n                continue\n            lang = closed_caption.get('code') or closed_caption.get('language') or 'en'\n            subtitles.setdefault(lang, []).append({\n                'url': sub_url,\n            })\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'description': media.get('description'),\n            'thumbnail': media.get('image_large') or media.get('image_medium') or media.get('image_small'),\n            'duration': int_or_none(media.get('duration')),\n            'tags': media.get('tags'),\n            'subtitles': subtitles,\n        }\n\n\nclass CuriosityStreamIE(CuriosityStreamBaseIE):\n    IE_NAME = 'curiositystream'\n    _VALID_URL = r'https?://app\\.curiositystream\\.com/video/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://app.curiositystream.com/video/2',\n        'md5': '262bb2f257ff301115f1973540de8983',\n        'info_dict': {\n            'id': '2',\n            'ext': 'mp4',\n            'title': 'How Did You Develop The Internet?',\n            'description': 'Vint Cerf, Google\\'s Chief Internet Evangelist, describes how he and Bob Kahn created the internet.',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        media = self._call_api('media/' + video_id, video_id)\n        return self._extract_media_info(media)\n\n\nclass CuriosityStreamCollectionIE(CuriosityStreamBaseIE):\n    IE_NAME = 'curiositystream:collection'\n    _VALID_URL = r'https?://app\\.curiositystream\\.com/collection/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://app.curiositystream.com/collection/2',\n        'info_dict': {\n            'id': '2',\n            'title': 'Curious Minds: The Internet',\n            'description': 'How is the internet shaping our lives in the 21st Century?',\n        },\n        'playlist_mincount': 12,\n    }\n\n    def _real_extract(self, url):\n        collection_id = self._match_id(url)\n        collection = self._call_api(\n            'collections/' + collection_id, collection_id)\n        entries = []\n        for media in collection.get('media', []):\n            entries.append(self._extract_media_info(media))\n        return self.playlist_result(\n            entries, collection_id,\n            collection.get('title'), collection.get('description'))\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    urlencode_postdata,\n    compat_str,\n    ExtractorError,\n)\n\n\nclass CuriosityStreamBaseIE(InfoExtractor):\n    _NETRC_MACHINE = 'curiositystream'\n    _auth_token = None\n    _API_BASE_URL = 'https://api.curiositystream.com/v1/'\n\n    def _handle_errors(self, result):\n        error = result.get('error', {}).get('message')\n        if error:\n            if isinstance(error, dict):\n                error = ', '.join(error.values())\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, error), expected=True)\n\n    def _call_api(self, path, video_id):\n        headers = {}\n        if self._auth_token:\n            headers['X-Auth-Token'] = self._auth_token\n        result = self._download_json(\n            self._API_BASE_URL + path, video_id, headers=headers)\n        self._handle_errors(result)\n        return result['data']\n\n    def _real_initialize(self):\n        (email, password) = self._get_login_info()\n        if email is None:\n            return\n        result = self._download_json(\n            self._API_BASE_URL + 'login', None, data=urlencode_postdata({\n                'email': email,\n                'password': password,\n            }))\n        self._handle_errors(result)\n        self._auth_token = result['message']['auth_token']\n\n    def _extract_media_info(self, media):\n        video_id = compat_str(media['id'])\n        title = media['title']\n\n        formats = []\n        for encoding in media.get('encodings', []):\n            m3u8_url = encoding.get('master_playlist_url')\n            if m3u8_url:\n                formats.extend(self._extract_m3u8_formats(\n                    m3u8_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            encoding_url = encoding.get('url')\n            file_url = encoding.get('file_url')\n            if not encoding_url and not file_url:\n                continue\n            f = {\n                'width': int_or_none(encoding.get('width')),\n                'height': int_or_none(encoding.get('height')),\n                'vbr': int_or_none(encoding.get('video_bitrate')),\n                'abr': int_or_none(encoding.get('audio_bitrate')),\n                'filesize': int_or_none(encoding.get('size_in_bytes')),\n                'vcodec': encoding.get('video_codec'),\n                'acodec': encoding.get('audio_codec'),\n                'container': encoding.get('container_type'),\n            }\n            for f_url in (encoding_url, file_url):\n                if not f_url:\n                    continue\n                fmt = f.copy()\n                rtmp = re.search(r'^(?P<url>rtmpe?://(?P<host>[^/]+)/(?P<app>.+))/(?P<playpath>mp[34]:.+)$', f_url)\n                if rtmp:\n                    fmt.update({\n                        'url': rtmp.group('url'),\n                        'play_path': rtmp.group('playpath'),\n                        'app': rtmp.group('app'),\n                        'ext': 'flv',\n                        'format_id': 'rtmp',\n                    })\n                else:\n                    fmt.update({\n                        'url': f_url,\n                        'format_id': 'http',\n                    })\n                formats.append(fmt)\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for closed_caption in media.get('closed_captions', []):\n            sub_url = closed_caption.get('file')\n            if not sub_url:\n                continue\n            lang = closed_caption.get('code') or closed_caption.get('language') or 'en'\n            subtitles.setdefault(lang, []).append({\n                'url': sub_url,\n            })\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'description': media.get('description'),\n            'thumbnail': media.get('image_large') or media.get('image_medium') or media.get('image_small'),\n            'duration': int_or_none(media.get('duration')),\n            'tags': media.get('tags'),\n            'subtitles': subtitles,\n        }\n\n\nclass CuriosityStreamIE(CuriosityStreamBaseIE):\n    IE_NAME = 'curiositystream'\n    _VALID_URL = r'https?://app\\.curiositystream\\.com/video/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://app.curiositystream.com/video/2',\n        'md5': '262bb2f257ff301115f1973540de8983',\n        'info_dict': {\n            'id': '2',\n            'ext': 'mp4',\n            'title': 'How Did You Develop The Internet?',\n            'description': 'Vint Cerf, Google\\'s Chief Internet Evangelist, describes how he and Bob Kahn created the internet.',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        media = self._call_api('media/' + video_id, video_id)\n        return self._extract_media_info(media)\n\n\nclass CuriosityStreamCollectionIE(CuriosityStreamBaseIE):\n    IE_NAME = 'curiositystream:collection'\n    _VALID_URL = r'https?://app\\.curiositystream\\.com/collection/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://app.curiositystream.com/collection/2',\n        'info_dict': {\n            'id': '2',\n            'title': 'Curious Minds: The Internet',\n            'description': 'How is the internet shaping our lives in the 21st Century?',\n        },\n        'playlist_mincount': 12,\n    }\n\n    def _real_extract(self, url):\n        collection_id = self._match_id(url)\n        collection = self._call_api(\n            'collections/' + collection_id, collection_id)\n        entries = []\n        for media in collection.get('media', []):\n            entries.append(self._extract_media_info(media))\n        return self.playlist_result(\n            entries, collection_id,\n            collection.get('title'), collection.get('description'))\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "curiositystream.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/curiositystream.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}