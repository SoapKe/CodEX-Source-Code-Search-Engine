{"author": "sympy", "code": "\nfrom __future__ import print_function, division\n\nexec(\"from sympy import *\")\n\nLT = laplace_transform\nFT = fourier_transform\nMT = mellin_transform\nIFT = inverse_fourier_transform\nILT = inverse_laplace_transform\nIMT = inverse_mellin_transform\n\nfrom sympy.abc import t, x, y\nnu, beta, rho = symbols('nu beta rho')\n\napos, bpos, cpos, dpos, posk, p = symbols('a b c d k p', positive=True)\nk = Symbol('k', real=True)\nnegk = Symbol('k', negative=True)\n\nmu1, mu2 = symbols('mu1 mu2', real=True, nonzero=True, finite=True)\nsigma1, sigma2 = symbols('sigma1 sigma2', real=True, nonzero=True,\n                         finite=True, positive=True)\nrate = Symbol('lambda', real=True, positive=True, finite=True)\n\n\ndef normal(x, mu, sigma):\n    return 1/sqrt(2*pi*sigma**2)*exp(-(x - mu)**2/2/sigma**2)\n\n\ndef exponential(x, rate):\n    return rate*exp(-rate*x)\nalpha, beta = symbols('alpha beta', positive=True)\nbetadist = x**(alpha - 1)*(1 + x)**(-alpha - beta)*gamma(alpha + beta) \\\n    /gamma(alpha)/gamma(beta)\nkint = Symbol('k', integer=True, positive=True)\nchi = 2**(1 - kint/2)*x**(kint - 1)*exp(-x**2/2)/gamma(kint/2)\nchisquared = 2**(-k/2)/gamma(k/2)*x**(k/2 - 1)*exp(-x/2)\ndagum = apos*p/x*(x/bpos)**(apos*p)/(1 + x**apos/bpos**apos)**(p + 1)\nd1, d2 = symbols('d1 d2', positive=True)\nf = sqrt(((d1*x)**d1 * d2**d2)/(d1*x + d2)**(d1 + d2))/x \\\n    /gamma(d1/2)/gamma(d2/2)*gamma((d1 + d2)/2)\nnupos, sigmapos = symbols('nu sigma', positive=True)\nrice = x/sigmapos**2*exp(-(x**2 + nupos**2)/2/sigmapos**2)*besseli(0, x*\n                         nupos/sigmapos**2)\nmu = Symbol('mu', real=True)\nlaplace = exp(-abs(x - mu)/bpos)/2/bpos\n\nu = Symbol('u', polar=True)\ntpos = Symbol('t', positive=True)\n\n\ndef E(expr):\n    res1 = integrate(expr*exponential(x, rate)*normal(y, mu1, sigma1),\n                     (x, 0, oo), (y, -oo, oo), meijerg=True)\n    res2 = integrate(expr*exponential(x, rate)*normal(y, mu1, sigma1),\n                     (y, -oo, oo), (x, 0, oo), meijerg=True)\n\nbench = [\n    'MT(x**nu*Heaviside(x - 1), x, s)',\n    'MT(x**nu*Heaviside(1 - x), x, s)',\n    'MT((1-x)**(beta - 1)*Heaviside(1-x), x, s)',\n    'MT((x-1)**(beta - 1)*Heaviside(x-1), x, s)',\n    'MT((1+x)**(-rho), x, s)',\n    'MT(abs(1-x)**(-rho), x, s)',\n    'MT((1-x)**(beta-1)*Heaviside(1-x) + a*(x-1)**(beta-1)*Heaviside(x-1), x, s)',\n    'MT((x**a-b**a)/(x-b), x, s)',\n    'MT((x**a-bpos**a)/(x-bpos), x, s)',\n    'MT(exp(-x), x, s)',\n    'MT(exp(-1/x), x, s)',\n    'MT(log(x)**4*Heaviside(1-x), x, s)',\n    'MT(log(x)**3*Heaviside(x-1), x, s)',\n    'MT(log(x + 1), x, s)',\n    'MT(log(1/x + 1), x, s)',\n    'MT(log(abs(1 - x)), x, s)',\n    'MT(log(abs(1 - 1/x)), x, s)',\n    'MT(log(x)/(x+1), x, s)',\n    'MT(log(x)**2/(x+1), x, s)',\n    'MT(log(x)/(x+1)**2, x, s)',\n    'MT(erf(sqrt(x)), x, s)',\n\n    'MT(besselj(a, 2*sqrt(x)), x, s)',\n    'MT(sin(sqrt(x))*besselj(a, sqrt(x)), x, s)',\n    'MT(cos(sqrt(x))*besselj(a, sqrt(x)), x, s)',\n    'MT(besselj(a, sqrt(x))**2, x, s)',\n    'MT(besselj(a, sqrt(x))*besselj(-a, sqrt(x)), x, s)',\n    'MT(besselj(a - 1, sqrt(x))*besselj(a, sqrt(x)), x, s)',\n    'MT(besselj(a, sqrt(x))*besselj(b, sqrt(x)), x, s)',\n    'MT(besselj(a, sqrt(x))**2 + besselj(-a, sqrt(x))**2, x, s)',\n    'MT(bessely(a, 2*sqrt(x)), x, s)',\n    'MT(sin(sqrt(x))*bessely(a, sqrt(x)), x, s)',\n    'MT(cos(sqrt(x))*bessely(a, sqrt(x)), x, s)',\n    'MT(besselj(a, sqrt(x))*bessely(a, sqrt(x)), x, s)',\n    'MT(besselj(a, sqrt(x))*bessely(b, sqrt(x)), x, s)',\n    'MT(bessely(a, sqrt(x))**2, x, s)',\n\n    'MT(besselk(a, 2*sqrt(x)), x, s)',\n    'MT(besselj(a, 2*sqrt(2*sqrt(x)))*besselk(a, 2*sqrt(2*sqrt(x))), x, s)',\n    'MT(besseli(a, sqrt(x))*besselk(a, sqrt(x)), x, s)',\n    'MT(besseli(b, sqrt(x))*besselk(a, sqrt(x)), x, s)',\n    'MT(exp(-x/2)*besselk(a, x/2), x, s)',\n\n    \n\n    'LT((t-apos)**bpos*exp(-cpos*(t-apos))*Heaviside(t-apos), t, s)',\n    'LT(t**apos, t, s)',\n    'LT(Heaviside(t), t, s)',\n    'LT(Heaviside(t - apos), t, s)',\n    'LT(1 - exp(-apos*t), t, s)',\n    'LT((exp(2*t)-1)*exp(-bpos - t)*Heaviside(t)/2, t, s, noconds=True)',\n    'LT(exp(t), t, s)',\n    'LT(exp(2*t), t, s)',\n    'LT(exp(apos*t), t, s)',\n    'LT(log(t/apos), t, s)',\n    'LT(erf(t), t, s)',\n    'LT(sin(apos*t), t, s)',\n    'LT(cos(apos*t), t, s)',\n    'LT(exp(-apos*t)*sin(bpos*t), t, s)',\n    'LT(exp(-apos*t)*cos(bpos*t), t, s)',\n    'LT(besselj(0, t), t, s, noconds=True)',\n    'LT(besselj(1, t), t, s, noconds=True)',\n\n    'FT(Heaviside(1 - abs(2*apos*x)), x, k)',\n    'FT(Heaviside(1-abs(apos*x))*(1-abs(apos*x)), x, k)',\n    'FT(exp(-apos*x)*Heaviside(x), x, k)',\n    'IFT(1/(apos + 2*pi*I*x), x, posk, noconds=False)',\n    'IFT(1/(apos + 2*pi*I*x), x, -posk, noconds=False)',\n    'IFT(1/(apos + 2*pi*I*x), x, negk)',\n    'FT(x*exp(-apos*x)*Heaviside(x), x, k)',\n    'FT(exp(-apos*x)*sin(bpos*x)*Heaviside(x), x, k)',\n    'FT(exp(-apos*x**2), x, k)',\n    'IFT(sqrt(pi/apos)*exp(-(pi*k)**2/apos), k, x)',\n    'FT(exp(-apos*abs(x)), x, k)',\n\n    'integrate(normal(x, mu1, sigma1), (x, -oo, oo), meijerg=True)',\n    'integrate(x*normal(x, mu1, sigma1), (x, -oo, oo), meijerg=True)',\n    'integrate(x**2*normal(x, mu1, sigma1), (x, -oo, oo), meijerg=True)',\n    'integrate(x**3*normal(x, mu1, sigma1), (x, -oo, oo), meijerg=True)',\n    'integrate(normal(x, mu1, sigma1)*normal(y, mu2, sigma2),'\n    '          (x, -oo, oo), (y, -oo, oo), meijerg=True)',\n    'integrate(x*normal(x, mu1, sigma1)*normal(y, mu2, sigma2),'\n    '          (x, -oo, oo), (y, -oo, oo), meijerg=True)',\n    'integrate(y*normal(x, mu1, sigma1)*normal(y, mu2, sigma2),'\n    '          (x, -oo, oo), (y, -oo, oo), meijerg=True)',\n    'integrate(x*y*normal(x, mu1, sigma1)*normal(y, mu2, sigma2),'\n    '          (x, -oo, oo), (y, -oo, oo), meijerg=True)',\n    'integrate((x+y+1)*normal(x, mu1, sigma1)*normal(y, mu2, sigma2),'\n    '          (x, -oo, oo), (y, -oo, oo), meijerg=True)',\n    'integrate((x+y-1)*normal(x, mu1, sigma1)*normal(y, mu2, sigma2),'\n    '                   (x, -oo, oo), (y, -oo, oo), meijerg=True)',\n    'integrate(x**2*normal(x, mu1, sigma1)*normal(y, mu2, sigma2),'\n    '                (x, -oo, oo), (y, -oo, oo), meijerg=True)',\n    'integrate(y**2*normal(x, mu1, sigma1)*normal(y, mu2, sigma2),'\n    '          (x, -oo, oo), (y, -oo, oo), meijerg=True)',\n    'integrate(exponential(x, rate), (x, 0, oo), meijerg=True)',\n    'integrate(x*exponential(x, rate), (x, 0, oo), meijerg=True)',\n    'integrate(x**2*exponential(x, rate), (x, 0, oo), meijerg=True)',\n    'E(1)',\n    'E(x*y)',\n    'E(x*y**2)',\n    'E((x+y+1)**2)',\n    'E(x+y+1)',\n    'E((x+y-1)**2)',\n    'integrate(betadist, (x, 0, oo), meijerg=True)',\n    'integrate(x*betadist, (x, 0, oo), meijerg=True)',\n    'integrate(x**2*betadist, (x, 0, oo), meijerg=True)',\n    'integrate(chi, (x, 0, oo), meijerg=True)',\n    'integrate(x*chi, (x, 0, oo), meijerg=True)',\n    'integrate(x**2*chi, (x, 0, oo), meijerg=True)',\n    'integrate(chisquared, (x, 0, oo), meijerg=True)',\n    'integrate(x*chisquared, (x, 0, oo), meijerg=True)',\n    'integrate(x**2*chisquared, (x, 0, oo), meijerg=True)',\n    'integrate(((x-k)/sqrt(2*k))**3*chisquared, (x, 0, oo), meijerg=True)',\n    'integrate(dagum, (x, 0, oo), meijerg=True)',\n    'integrate(x*dagum, (x, 0, oo), meijerg=True)',\n    'integrate(x**2*dagum, (x, 0, oo), meijerg=True)',\n    'integrate(f, (x, 0, oo), meijerg=True)',\n    'integrate(x*f, (x, 0, oo), meijerg=True)',\n    'integrate(x**2*f, (x, 0, oo), meijerg=True)',\n    'integrate(rice, (x, 0, oo), meijerg=True)',\n    'integrate(laplace, (x, -oo, oo), meijerg=True)',\n    'integrate(x*laplace, (x, -oo, oo), meijerg=True)',\n    'integrate(x**2*laplace, (x, -oo, oo), meijerg=True)',\n    'integrate(log(x) * x**(k-1) * exp(-x) / gamma(k), (x, 0, oo))',\n\n    'integrate(sin(z*x)*(x**2-1)**(-(y+S(1)/2)), (x, 1, oo), meijerg=True)',\n    'integrate(besselj(0,x)*besselj(1,x)*exp(-x**2), (x, 0, oo), meijerg=True)',\n    'integrate(besselj(0,x)*besselj(1,x)*besselk(0,x), (x, 0, oo), meijerg=True)',\n    'integrate(besselj(0,x)*besselj(1,x)*exp(-x**2), (x, 0, oo), meijerg=True)',\n    'integrate(besselj(a,x)*besselj(b,x)/x, (x,0,oo), meijerg=True)',\n\n    'hyperexpand(meijerg((-s - a/2 + 1, -s + a/2 + 1), (-a/2 - S(1)/2, -s + a/2 + S(3)/2), (a/2, -a/2), (-a/2 - S(1)/2, -s + a/2 + S(3)/2), 1))',\n    \"gammasimp(S('2**(2*s)*(-pi*gamma(-a + 1)*gamma(a + 1)*gamma(-a - s + 1)*gamma(-a + s - 1/2)*gamma(a - s + 3/2)*gamma(a + s + 1)/(a*(a + s)) - gamma(-a - 1/2)*gamma(-a + 1)*gamma(a + 1)*gamma(a + 3/2)*gamma(-s + 3/2)*gamma(s - 1/2)*gamma(-a + s + 1)*gamma(a - s + 1)/(a*(-a + s)))*gamma(-2*s + 1)*gamma(s + 1)/(pi*s*gamma(-a - 1/2)*gamma(a + 3/2)*gamma(-s + 1)*gamma(-s + 3/2)*gamma(s - 1/2)*gamma(-a - s + 1)*gamma(-a + s - 1/2)*gamma(a - s + 1)*gamma(a - s + 3/2))'))\",\n\n    'mellin_transform(E1(x), x, s)',\n    'inverse_mellin_transform(gamma(s)/s, s, x, (0, oo))',\n    'mellin_transform(expint(a, x), x, s)',\n    'mellin_transform(Si(x), x, s)',\n    'inverse_mellin_transform(-2**s*sqrt(pi)*gamma((s + 1)/2)/(2*s*gamma(-s/2 + 1)), s, x, (-1, 0))',\n    'mellin_transform(Ci(sqrt(x)), x, s)',\n    'inverse_mellin_transform(-4**s*sqrt(pi)*gamma(s)/(2*s*gamma(-s + S(1)/2)),s, u, (0, 1))',\n    'laplace_transform(Ci(x), x, s)',\n    'laplace_transform(expint(a, x), x, s)',\n    'laplace_transform(expint(1, x), x, s)',\n    'laplace_transform(expint(2, x), x, s)',\n    'inverse_laplace_transform(-log(1 + s**2)/2/s, s, u)',\n    'inverse_laplace_transform(log(s + 1)/s, s, x)',\n    'inverse_laplace_transform((s - log(s + 1))/s**2, s, x)',\n    'laplace_transform(Chi(x), x, s)',\n    'laplace_transform(Shi(x), x, s)',\n\n    'integrate(exp(-z*x)/x, (x, 1, oo), meijerg=True, conds=\"none\")',\n    'integrate(exp(-z*x)/x**2, (x, 1, oo), meijerg=True, conds=\"none\")',\n    'integrate(exp(-z*x)/x**3, (x, 1, oo), meijerg=True,conds=\"none\")',\n    'integrate(-cos(x)/x, (x, tpos, oo), meijerg=True)',\n    'integrate(-sin(x)/x, (x, tpos, oo), meijerg=True)',\n    'integrate(sin(x)/x, (x, 0, z), meijerg=True)',\n    'integrate(sinh(x)/x, (x, 0, z), meijerg=True)',\n    'integrate(exp(-x)/x, x, meijerg=True)',\n    'integrate(exp(-x)/x**2, x, meijerg=True)',\n    'integrate(cos(u)/u, u, meijerg=True)',\n    'integrate(cosh(u)/u, u, meijerg=True)',\n    'integrate(expint(1, x), x, meijerg=True)',\n    'integrate(expint(2, x), x, meijerg=True)',\n    'integrate(Si(x), x, meijerg=True)',\n    'integrate(Ci(u), u, meijerg=True)',\n    'integrate(Shi(x), x, meijerg=True)',\n    'integrate(cosint(u), u, meijerg=True)',\n    'integrate(Si(x)*exp(-x), (x, 0, oo), meijerg=True)',\n    'integrate(expint(1, x)*sin(x), (x, 0, oo), meijerg=True)'\n]\n\nfrom time import time\nfrom sympy.core.cache import clear_cache\nimport sys\n\ntimings = []\n\nif __name__ == '__main__':\n    for n, string in enumerate(bench):\n        clear_cache()\n        _t = time()\n        exec(string)\n        _t = time() - _t\n        timings += [(_t, string)]\n        sys.stdout.write('.')\n        sys.stdout.flush()\n        if n % (len(bench) // 10) == 0:\n            sys.stdout.write('%s' % (10*n // len(bench)))\n    print()\n\n    timings.sort(key=lambda x: -x[0])\n\n    for t, string in timings:\n        print('%.2fs %s' % (t, string))\n", "comments": "  conceal implicit import code quality tester    later  ilt  imt ", "content": "# conceal the implicit import from the code quality tester\nfrom __future__ import print_function, division\n\nexec(\"from sympy import *\")\n\nLT = laplace_transform\nFT = fourier_transform\nMT = mellin_transform\nIFT = inverse_fourier_transform\nILT = inverse_laplace_transform\nIMT = inverse_mellin_transform\n\nfrom sympy.abc import t, x, y\nnu, beta, rho = symbols('nu beta rho')\n\napos, bpos, cpos, dpos, posk, p = symbols('a b c d k p', positive=True)\nk = Symbol('k', real=True)\nnegk = Symbol('k', negative=True)\n\nmu1, mu2 = symbols('mu1 mu2', real=True, nonzero=True, finite=True)\nsigma1, sigma2 = symbols('sigma1 sigma2', real=True, nonzero=True,\n                         finite=True, positive=True)\nrate = Symbol('lambda', real=True, positive=True, finite=True)\n\n\ndef normal(x, mu, sigma):\n    return 1/sqrt(2*pi*sigma**2)*exp(-(x - mu)**2/2/sigma**2)\n\n\ndef exponential(x, rate):\n    return rate*exp(-rate*x)\nalpha, beta = symbols('alpha beta', positive=True)\nbetadist = x**(alpha - 1)*(1 + x)**(-alpha - beta)*gamma(alpha + beta) \\\n    /gamma(alpha)/gamma(beta)\nkint = Symbol('k', integer=True, positive=True)\nchi = 2**(1 - kint/2)*x**(kint - 1)*exp(-x**2/2)/gamma(kint/2)\nchisquared = 2**(-k/2)/gamma(k/2)*x**(k/2 - 1)*exp(-x/2)\ndagum = apos*p/x*(x/bpos)**(apos*p)/(1 + x**apos/bpos**apos)**(p + 1)\nd1, d2 = symbols('d1 d2', positive=True)\nf = sqrt(((d1*x)**d1 * d2**d2)/(d1*x + d2)**(d1 + d2))/x \\\n    /gamma(d1/2)/gamma(d2/2)*gamma((d1 + d2)/2)\nnupos, sigmapos = symbols('nu sigma', positive=True)\nrice = x/sigmapos**2*exp(-(x**2 + nupos**2)/2/sigmapos**2)*besseli(0, x*\n                         nupos/sigmapos**2)\nmu = Symbol('mu', real=True)\nlaplace = exp(-abs(x - mu)/bpos)/2/bpos\n\nu = Symbol('u', polar=True)\ntpos = Symbol('t', positive=True)\n\n\ndef E(expr):\n    res1 = integrate(expr*exponential(x, rate)*normal(y, mu1, sigma1),\n                     (x, 0, oo), (y, -oo, oo), meijerg=True)\n    res2 = integrate(expr*exponential(x, rate)*normal(y, mu1, sigma1),\n                     (y, -oo, oo), (x, 0, oo), meijerg=True)\n\nbench = [\n    'MT(x**nu*Heaviside(x - 1), x, s)',\n    'MT(x**nu*Heaviside(1 - x), x, s)',\n    'MT((1-x)**(beta - 1)*Heaviside(1-x), x, s)',\n    'MT((x-1)**(beta - 1)*Heaviside(x-1), x, s)',\n    'MT((1+x)**(-rho), x, s)',\n    'MT(abs(1-x)**(-rho), x, s)',\n    'MT((1-x)**(beta-1)*Heaviside(1-x) + a*(x-1)**(beta-1)*Heaviside(x-1), x, s)',\n    'MT((x**a-b**a)/(x-b), x, s)',\n    'MT((x**a-bpos**a)/(x-bpos), x, s)',\n    'MT(exp(-x), x, s)',\n    'MT(exp(-1/x), x, s)',\n    'MT(log(x)**4*Heaviside(1-x), x, s)',\n    'MT(log(x)**3*Heaviside(x-1), x, s)',\n    'MT(log(x + 1), x, s)',\n    'MT(log(1/x + 1), x, s)',\n    'MT(log(abs(1 - x)), x, s)',\n    'MT(log(abs(1 - 1/x)), x, s)',\n    'MT(log(x)/(x+1), x, s)',\n    'MT(log(x)**2/(x+1), x, s)',\n    'MT(log(x)/(x+1)**2, x, s)',\n    'MT(erf(sqrt(x)), x, s)',\n\n    'MT(besselj(a, 2*sqrt(x)), x, s)',\n    'MT(sin(sqrt(x))*besselj(a, sqrt(x)), x, s)',\n    'MT(cos(sqrt(x))*besselj(a, sqrt(x)), x, s)',\n    'MT(besselj(a, sqrt(x))**2, x, s)',\n    'MT(besselj(a, sqrt(x))*besselj(-a, sqrt(x)), x, s)',\n    'MT(besselj(a - 1, sqrt(x))*besselj(a, sqrt(x)), x, s)',\n    'MT(besselj(a, sqrt(x))*besselj(b, sqrt(x)), x, s)',\n    'MT(besselj(a, sqrt(x))**2 + besselj(-a, sqrt(x))**2, x, s)',\n    'MT(bessely(a, 2*sqrt(x)), x, s)',\n    'MT(sin(sqrt(x))*bessely(a, sqrt(x)), x, s)',\n    'MT(cos(sqrt(x))*bessely(a, sqrt(x)), x, s)',\n    'MT(besselj(a, sqrt(x))*bessely(a, sqrt(x)), x, s)',\n    'MT(besselj(a, sqrt(x))*bessely(b, sqrt(x)), x, s)',\n    'MT(bessely(a, sqrt(x))**2, x, s)',\n\n    'MT(besselk(a, 2*sqrt(x)), x, s)',\n    'MT(besselj(a, 2*sqrt(2*sqrt(x)))*besselk(a, 2*sqrt(2*sqrt(x))), x, s)',\n    'MT(besseli(a, sqrt(x))*besselk(a, sqrt(x)), x, s)',\n    'MT(besseli(b, sqrt(x))*besselk(a, sqrt(x)), x, s)',\n    'MT(exp(-x/2)*besselk(a, x/2), x, s)',\n\n    # later: ILT, IMT\n\n    'LT((t-apos)**bpos*exp(-cpos*(t-apos))*Heaviside(t-apos), t, s)',\n    'LT(t**apos, t, s)',\n    'LT(Heaviside(t), t, s)',\n    'LT(Heaviside(t - apos), t, s)',\n    'LT(1 - exp(-apos*t), t, s)',\n    'LT((exp(2*t)-1)*exp(-bpos - t)*Heaviside(t)/2, t, s, noconds=True)',\n    'LT(exp(t), t, s)',\n    'LT(exp(2*t), t, s)',\n    'LT(exp(apos*t), t, s)',\n    'LT(log(t/apos), t, s)',\n    'LT(erf(t), t, s)',\n    'LT(sin(apos*t), t, s)',\n    'LT(cos(apos*t), t, s)',\n    'LT(exp(-apos*t)*sin(bpos*t), t, s)',\n    'LT(exp(-apos*t)*cos(bpos*t), t, s)',\n    'LT(besselj(0, t), t, s, noconds=True)',\n    'LT(besselj(1, t), t, s, noconds=True)',\n\n    'FT(Heaviside(1 - abs(2*apos*x)), x, k)',\n    'FT(Heaviside(1-abs(apos*x))*(1-abs(apos*x)), x, k)',\n    'FT(exp(-apos*x)*Heaviside(x), x, k)',\n    'IFT(1/(apos + 2*pi*I*x), x, posk, noconds=False)',\n    'IFT(1/(apos + 2*pi*I*x), x, -posk, noconds=False)',\n    'IFT(1/(apos + 2*pi*I*x), x, negk)',\n    'FT(x*exp(-apos*x)*Heaviside(x), x, k)',\n    'FT(exp(-apos*x)*sin(bpos*x)*Heaviside(x), x, k)',\n    'FT(exp(-apos*x**2), x, k)',\n    'IFT(sqrt(pi/apos)*exp(-(pi*k)**2/apos), k, x)',\n    'FT(exp(-apos*abs(x)), x, k)',\n\n    'integrate(normal(x, mu1, sigma1), (x, -oo, oo), meijerg=True)',\n    'integrate(x*normal(x, mu1, sigma1), (x, -oo, oo), meijerg=True)',\n    'integrate(x**2*normal(x, mu1, sigma1), (x, -oo, oo), meijerg=True)',\n    'integrate(x**3*normal(x, mu1, sigma1), (x, -oo, oo), meijerg=True)',\n    'integrate(normal(x, mu1, sigma1)*normal(y, mu2, sigma2),'\n    '          (x, -oo, oo), (y, -oo, oo), meijerg=True)',\n    'integrate(x*normal(x, mu1, sigma1)*normal(y, mu2, sigma2),'\n    '          (x, -oo, oo), (y, -oo, oo), meijerg=True)',\n    'integrate(y*normal(x, mu1, sigma1)*normal(y, mu2, sigma2),'\n    '          (x, -oo, oo), (y, -oo, oo), meijerg=True)',\n    'integrate(x*y*normal(x, mu1, sigma1)*normal(y, mu2, sigma2),'\n    '          (x, -oo, oo), (y, -oo, oo), meijerg=True)',\n    'integrate((x+y+1)*normal(x, mu1, sigma1)*normal(y, mu2, sigma2),'\n    '          (x, -oo, oo), (y, -oo, oo), meijerg=True)',\n    'integrate((x+y-1)*normal(x, mu1, sigma1)*normal(y, mu2, sigma2),'\n    '                   (x, -oo, oo), (y, -oo, oo), meijerg=True)',\n    'integrate(x**2*normal(x, mu1, sigma1)*normal(y, mu2, sigma2),'\n    '                (x, -oo, oo), (y, -oo, oo), meijerg=True)',\n    'integrate(y**2*normal(x, mu1, sigma1)*normal(y, mu2, sigma2),'\n    '          (x, -oo, oo), (y, -oo, oo), meijerg=True)',\n    'integrate(exponential(x, rate), (x, 0, oo), meijerg=True)',\n    'integrate(x*exponential(x, rate), (x, 0, oo), meijerg=True)',\n    'integrate(x**2*exponential(x, rate), (x, 0, oo), meijerg=True)',\n    'E(1)',\n    'E(x*y)',\n    'E(x*y**2)',\n    'E((x+y+1)**2)',\n    'E(x+y+1)',\n    'E((x+y-1)**2)',\n    'integrate(betadist, (x, 0, oo), meijerg=True)',\n    'integrate(x*betadist, (x, 0, oo), meijerg=True)',\n    'integrate(x**2*betadist, (x, 0, oo), meijerg=True)',\n    'integrate(chi, (x, 0, oo), meijerg=True)',\n    'integrate(x*chi, (x, 0, oo), meijerg=True)',\n    'integrate(x**2*chi, (x, 0, oo), meijerg=True)',\n    'integrate(chisquared, (x, 0, oo), meijerg=True)',\n    'integrate(x*chisquared, (x, 0, oo), meijerg=True)',\n    'integrate(x**2*chisquared, (x, 0, oo), meijerg=True)',\n    'integrate(((x-k)/sqrt(2*k))**3*chisquared, (x, 0, oo), meijerg=True)',\n    'integrate(dagum, (x, 0, oo), meijerg=True)',\n    'integrate(x*dagum, (x, 0, oo), meijerg=True)',\n    'integrate(x**2*dagum, (x, 0, oo), meijerg=True)',\n    'integrate(f, (x, 0, oo), meijerg=True)',\n    'integrate(x*f, (x, 0, oo), meijerg=True)',\n    'integrate(x**2*f, (x, 0, oo), meijerg=True)',\n    'integrate(rice, (x, 0, oo), meijerg=True)',\n    'integrate(laplace, (x, -oo, oo), meijerg=True)',\n    'integrate(x*laplace, (x, -oo, oo), meijerg=True)',\n    'integrate(x**2*laplace, (x, -oo, oo), meijerg=True)',\n    'integrate(log(x) * x**(k-1) * exp(-x) / gamma(k), (x, 0, oo))',\n\n    'integrate(sin(z*x)*(x**2-1)**(-(y+S(1)/2)), (x, 1, oo), meijerg=True)',\n    'integrate(besselj(0,x)*besselj(1,x)*exp(-x**2), (x, 0, oo), meijerg=True)',\n    'integrate(besselj(0,x)*besselj(1,x)*besselk(0,x), (x, 0, oo), meijerg=True)',\n    'integrate(besselj(0,x)*besselj(1,x)*exp(-x**2), (x, 0, oo), meijerg=True)',\n    'integrate(besselj(a,x)*besselj(b,x)/x, (x,0,oo), meijerg=True)',\n\n    'hyperexpand(meijerg((-s - a/2 + 1, -s + a/2 + 1), (-a/2 - S(1)/2, -s + a/2 + S(3)/2), (a/2, -a/2), (-a/2 - S(1)/2, -s + a/2 + S(3)/2), 1))',\n    \"gammasimp(S('2**(2*s)*(-pi*gamma(-a + 1)*gamma(a + 1)*gamma(-a - s + 1)*gamma(-a + s - 1/2)*gamma(a - s + 3/2)*gamma(a + s + 1)/(a*(a + s)) - gamma(-a - 1/2)*gamma(-a + 1)*gamma(a + 1)*gamma(a + 3/2)*gamma(-s + 3/2)*gamma(s - 1/2)*gamma(-a + s + 1)*gamma(a - s + 1)/(a*(-a + s)))*gamma(-2*s + 1)*gamma(s + 1)/(pi*s*gamma(-a - 1/2)*gamma(a + 3/2)*gamma(-s + 1)*gamma(-s + 3/2)*gamma(s - 1/2)*gamma(-a - s + 1)*gamma(-a + s - 1/2)*gamma(a - s + 1)*gamma(a - s + 3/2))'))\",\n\n    'mellin_transform(E1(x), x, s)',\n    'inverse_mellin_transform(gamma(s)/s, s, x, (0, oo))',\n    'mellin_transform(expint(a, x), x, s)',\n    'mellin_transform(Si(x), x, s)',\n    'inverse_mellin_transform(-2**s*sqrt(pi)*gamma((s + 1)/2)/(2*s*gamma(-s/2 + 1)), s, x, (-1, 0))',\n    'mellin_transform(Ci(sqrt(x)), x, s)',\n    'inverse_mellin_transform(-4**s*sqrt(pi)*gamma(s)/(2*s*gamma(-s + S(1)/2)),s, u, (0, 1))',\n    'laplace_transform(Ci(x), x, s)',\n    'laplace_transform(expint(a, x), x, s)',\n    'laplace_transform(expint(1, x), x, s)',\n    'laplace_transform(expint(2, x), x, s)',\n    'inverse_laplace_transform(-log(1 + s**2)/2/s, s, u)',\n    'inverse_laplace_transform(log(s + 1)/s, s, x)',\n    'inverse_laplace_transform((s - log(s + 1))/s**2, s, x)',\n    'laplace_transform(Chi(x), x, s)',\n    'laplace_transform(Shi(x), x, s)',\n\n    'integrate(exp(-z*x)/x, (x, 1, oo), meijerg=True, conds=\"none\")',\n    'integrate(exp(-z*x)/x**2, (x, 1, oo), meijerg=True, conds=\"none\")',\n    'integrate(exp(-z*x)/x**3, (x, 1, oo), meijerg=True,conds=\"none\")',\n    'integrate(-cos(x)/x, (x, tpos, oo), meijerg=True)',\n    'integrate(-sin(x)/x, (x, tpos, oo), meijerg=True)',\n    'integrate(sin(x)/x, (x, 0, z), meijerg=True)',\n    'integrate(sinh(x)/x, (x, 0, z), meijerg=True)',\n    'integrate(exp(-x)/x, x, meijerg=True)',\n    'integrate(exp(-x)/x**2, x, meijerg=True)',\n    'integrate(cos(u)/u, u, meijerg=True)',\n    'integrate(cosh(u)/u, u, meijerg=True)',\n    'integrate(expint(1, x), x, meijerg=True)',\n    'integrate(expint(2, x), x, meijerg=True)',\n    'integrate(Si(x), x, meijerg=True)',\n    'integrate(Ci(u), u, meijerg=True)',\n    'integrate(Shi(x), x, meijerg=True)',\n    'integrate(cosint(u), u, meijerg=True)',\n    'integrate(Si(x)*exp(-x), (x, 0, oo), meijerg=True)',\n    'integrate(expint(1, x)*sin(x), (x, 0, oo), meijerg=True)'\n]\n\nfrom time import time\nfrom sympy.core.cache import clear_cache\nimport sys\n\ntimings = []\n\nif __name__ == '__main__':\n    for n, string in enumerate(bench):\n        clear_cache()\n        _t = time()\n        exec(string)\n        _t = time() - _t\n        timings += [(_t, string)]\n        sys.stdout.write('.')\n        sys.stdout.flush()\n        if n % (len(bench) // 10) == 0:\n            sys.stdout.write('%s' % (10*n // len(bench)))\n    print()\n\n    timings.sort(key=lambda x: -x[0])\n\n    for t, string in timings:\n        print('%.2fs %s' % (t, string))\n", "description": "A computer algebra system written in pure Python", "file_name": "bench_meijerint.py", "id": "e52064b9302981901a95087b1428f748", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/benchmarks/bench_meijerint.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}