{"author": "aws", "code": "\n\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You\n may not use this file except in compliance with the License. A copy of\n the License is located at\n\n     http://aws.amazon.com/apache2.0/\n\n or in the \"license\" file accompanying this file. This file is\n distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implied. See the License for the specific\n language governing permissions and limitations under the License.\n\"\"\"Test help output for the AWS CLI.\n\nThe purpose of these docs is to test that the generated output looks how\nwe expect.\n\nIt's intended to be as end to end as possible, but instead of looking\nat the man output, we look one step before at the generated rst output\n(it's easier to verify).\n\n\"\"\"\nimport os\nfrom awscli.testutils import BaseAWSHelpOutputTest\n\n\n Mapping of command names to subcommands that have examples in their help\n output.  This isn't mean to be an exhaustive list, but should help catch\n things like command table renames, virtual commands, etc.\nCOMMAND_EXAMPLES = {\n    'cloudwatch': ['put-metric-data'],\n    's3': ['cp', 'ls', 'mb', 'mv', 'rb', 'rm', 'sync'],\n    's3api': ['get-object', 'put-object'],\n    'ec2': ['run-instances', 'start-instances', 'stop-instances'],\n    'swf': ['deprecate-domain', 'describe-domain'],\n    'sqs': ['create-queue', 'get-queue-attributes'],\n    'emr': ['add-steps', 'create-default-roles', 'describe-cluster', 'schedule-hbase-backup'],\n    'opsworks': ['register'],\n}\n\n\nclass _ExampleTests(BaseAWSHelpOutputTest):\n    def noop_test(self):\n        pass\n\n\ndef test_examples():\n    for command, subcommands in COMMAND_EXAMPLES.items():\n        for subcommand in subcommands:\n            yield verify_has_examples, command, subcommand\n\n\ndef test_all_examples_have_only_ascii():\n     Verify that all the example *.rst file contain ascii only characters.\n     Otherwise this will break downstream doc generation.\n    _dname = os.path.dirname\n    examples_dir = os.path.join(\n        _dname(_dname(_dname(_dname(os.path.abspath(__file__))))),\n        'awscli', 'examples')\n    for rootdir, _, filenames in os.walk(examples_dir):\n        for filename in filenames:\n            if not filename.endswith('.rst'):\n                continue\n            full_path = os.path.join(rootdir, filename)\n            yield verify_has_only_ascii_chars, full_path\n\n\ndef verify_has_only_ascii_chars(filename):\n    with open(filename, 'rb') as f:\n        bytes_content = f.read()\n        try:\n            bytes_content.decode('ascii')\n        except UnicodeDecodeError as e:\n             The test has failed so we'll try to provide a useful error\n             message.\n            offset = e.start\n            spread = 20\n            bad_text = bytes_content[offset-spread:e.start+spread]\n            underlined = ' ' * spread + '^'\n            error_text = '\\n'.join([bad_text, underlined])\n            line_number = bytes_content[:offset].count(b'\\n') + 1\n            raise AssertionError(\n                \"Non ascii characters found in the examples file %s, line %s:\"\n                \"\\n\\n%s\\n\" % (filename, line_number, error_text))\n\n\n\ndef verify_has_examples(command, subcommand):\n    t = _ExampleTests(methodName='noop_test')\n    t.setUp()\n    try:\n        t.driver.main([command, subcommand, 'help'])\n        t.assert_contains_with_count('========\\nExamples\\n========', 1)\n    finally:\n        t.tearDown()\n", "comments": "   test help output aws cli   the purpose docs test generated output looks expect   it intended end end possible  instead looking man output  look one step generated rst output (it easier verify)           usr bin env python    copyright 2013 amazon com  inc  affiliates  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   aws amazon com apache2 0         license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license     mapping command names subcommands examples help    output   this mean exhaustive list  help catch    things like command table renames  virtual commands  etc     verify example   rst file contain ascii characters     otherwise break downstream doc generation     the test failed try provide useful error    message  ", "content": "#!/usr/bin/env python\n# Copyright 2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://aws.amazon.com/apache2.0/\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\n\"\"\"Test help output for the AWS CLI.\n\nThe purpose of these docs is to test that the generated output looks how\nwe expect.\n\nIt's intended to be as end to end as possible, but instead of looking\nat the man output, we look one step before at the generated rst output\n(it's easier to verify).\n\n\"\"\"\nimport os\nfrom awscli.testutils import BaseAWSHelpOutputTest\n\n\n# Mapping of command names to subcommands that have examples in their help\n# output.  This isn't mean to be an exhaustive list, but should help catch\n# things like command table renames, virtual commands, etc.\nCOMMAND_EXAMPLES = {\n    'cloudwatch': ['put-metric-data'],\n    's3': ['cp', 'ls', 'mb', 'mv', 'rb', 'rm', 'sync'],\n    's3api': ['get-object', 'put-object'],\n    'ec2': ['run-instances', 'start-instances', 'stop-instances'],\n    'swf': ['deprecate-domain', 'describe-domain'],\n    'sqs': ['create-queue', 'get-queue-attributes'],\n    'emr': ['add-steps', 'create-default-roles', 'describe-cluster', 'schedule-hbase-backup'],\n    'opsworks': ['register'],\n}\n\n\nclass _ExampleTests(BaseAWSHelpOutputTest):\n    def noop_test(self):\n        pass\n\n\ndef test_examples():\n    for command, subcommands in COMMAND_EXAMPLES.items():\n        for subcommand in subcommands:\n            yield verify_has_examples, command, subcommand\n\n\ndef test_all_examples_have_only_ascii():\n    # Verify that all the example *.rst file contain ascii only characters.\n    # Otherwise this will break downstream doc generation.\n    _dname = os.path.dirname\n    examples_dir = os.path.join(\n        _dname(_dname(_dname(_dname(os.path.abspath(__file__))))),\n        'awscli', 'examples')\n    for rootdir, _, filenames in os.walk(examples_dir):\n        for filename in filenames:\n            if not filename.endswith('.rst'):\n                continue\n            full_path = os.path.join(rootdir, filename)\n            yield verify_has_only_ascii_chars, full_path\n\n\ndef verify_has_only_ascii_chars(filename):\n    with open(filename, 'rb') as f:\n        bytes_content = f.read()\n        try:\n            bytes_content.decode('ascii')\n        except UnicodeDecodeError as e:\n            # The test has failed so we'll try to provide a useful error\n            # message.\n            offset = e.start\n            spread = 20\n            bad_text = bytes_content[offset-spread:e.start+spread]\n            underlined = ' ' * spread + '^'\n            error_text = '\\n'.join([bad_text, underlined])\n            line_number = bytes_content[:offset].count(b'\\n') + 1\n            raise AssertionError(\n                \"Non ascii characters found in the examples file %s, line %s:\"\n                \"\\n\\n%s\\n\" % (filename, line_number, error_text))\n\n\n\ndef verify_has_examples(command, subcommand):\n    t = _ExampleTests(methodName='noop_test')\n    t.setUp()\n    try:\n        t.driver.main([command, subcommand, 'help'])\n        t.assert_contains_with_count('========\\nExamples\\n========', 1)\n    finally:\n        t.tearDown()\n", "description": "Universal Command Line Interface for Amazon Web Services", "file_name": "test_examples.py", "id": "9a781472ce4a3aa8faac8e666ec4f25c", "language": "Python", "project_name": "aws-cli", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/aws-aws-cli/aws-aws-cli-d705c60/tests/functional/docs/test_examples.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:33:26Z", "url": "https://github.com/aws/aws-cli", "wiki": false}