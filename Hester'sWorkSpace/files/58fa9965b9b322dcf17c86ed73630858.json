{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass TV2HuIE(InfoExtractor):\n    IE_NAME = 'tv2.hu'\n    _VALID_URL = r'https?://(?:www\\.)?tv2\\.hu/(?:[^/]+/)+(?P<id>\\d+)_[^/?\n    _TESTS = [{\n        'url': 'http://tv2.hu/ezek_megorultek/217679_ezek-megorultek---1.-adas-1.-resz.html',\n        'md5': '585e58e2e090f34603804bb2c48e98d8',\n        'info_dict': {\n            'id': '217679',\n            'ext': 'mp4',\n            'title': 'Ezek meg\u0151r\u00fcltek! - 1. ad\u00e1s 1. r\u00e9sz',\n            'upload_date': '20160826',\n            'thumbnail': r're:^https?://.*\\.jpg$'\n        }\n    }, {\n        'url': 'http://tv2.hu/ezek_megorultek/teljes_adasok/217677_ezek-megorultek---1.-adas-2.-resz.html',\n        'only_matching': True\n    }, {\n        'url': 'http://tv2.hu/musoraink/aktiv/aktiv_teljes_adas/217963_aktiv-teljes-adas---2016.08.30..html',\n        'only_matching': True\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        json_url = self._search_regex(\n            r'jsonUrl\\s*=\\s*\"([^\"]+)\"', webpage, 'json url')\n        json_data = self._download_json(json_url, video_id)\n\n        formats = []\n        for b in ('bitrates', 'backupBitrates'):\n            bitrates = json_data.get(b, {})\n            m3u8_url = bitrates.get('hls')\n            if m3u8_url:\n                formats.extend(self._extract_wowza_formats(\n                    m3u8_url, video_id, skip_protocols=['rtmp', 'rtsp']))\n\n            for mp4_url in bitrates.get('mp4', []):\n                height = int_or_none(self._search_regex(\n                    r'\\.(\\d+)p\\.mp4', mp4_url, 'height', default=None))\n                formats.append({\n                    'format_id': 'http' + ('-%d' % height if height else ''),\n                    'url': mp4_url,\n                    'height': height,\n                    'width': int_or_none(height / 9.0 * 16.0 if height else None),\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage).strip(),\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'upload_date': self._search_regex(\n                r'/vod/(\\d{8})/', json_url, 'upload_date', default=None),\n            'formats': formats,\n        }\n", "comments": "# encoding: utf-8\n#]+?\\.html'\n", "content": "# encoding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass TV2HuIE(InfoExtractor):\n    IE_NAME = 'tv2.hu'\n    _VALID_URL = r'https?://(?:www\\.)?tv2\\.hu/(?:[^/]+/)+(?P<id>\\d+)_[^/?#]+?\\.html'\n    _TESTS = [{\n        'url': 'http://tv2.hu/ezek_megorultek/217679_ezek-megorultek---1.-adas-1.-resz.html',\n        'md5': '585e58e2e090f34603804bb2c48e98d8',\n        'info_dict': {\n            'id': '217679',\n            'ext': 'mp4',\n            'title': 'Ezek meg\u0151r\u00fcltek! - 1. ad\u00e1s 1. r\u00e9sz',\n            'upload_date': '20160826',\n            'thumbnail': r're:^https?://.*\\.jpg$'\n        }\n    }, {\n        'url': 'http://tv2.hu/ezek_megorultek/teljes_adasok/217677_ezek-megorultek---1.-adas-2.-resz.html',\n        'only_matching': True\n    }, {\n        'url': 'http://tv2.hu/musoraink/aktiv/aktiv_teljes_adas/217963_aktiv-teljes-adas---2016.08.30..html',\n        'only_matching': True\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        json_url = self._search_regex(\n            r'jsonUrl\\s*=\\s*\"([^\"]+)\"', webpage, 'json url')\n        json_data = self._download_json(json_url, video_id)\n\n        formats = []\n        for b in ('bitrates', 'backupBitrates'):\n            bitrates = json_data.get(b, {})\n            m3u8_url = bitrates.get('hls')\n            if m3u8_url:\n                formats.extend(self._extract_wowza_formats(\n                    m3u8_url, video_id, skip_protocols=['rtmp', 'rtsp']))\n\n            for mp4_url in bitrates.get('mp4', []):\n                height = int_or_none(self._search_regex(\n                    r'\\.(\\d+)p\\.mp4', mp4_url, 'height', default=None))\n                formats.append({\n                    'format_id': 'http' + ('-%d' % height if height else ''),\n                    'url': mp4_url,\n                    'height': height,\n                    'width': int_or_none(height / 9.0 * 16.0 if height else None),\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage).strip(),\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'upload_date': self._search_regex(\n                r'/vod/(\\d{8})/', json_url, 'upload_date', default=None),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tv2hu.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tv2hu.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}