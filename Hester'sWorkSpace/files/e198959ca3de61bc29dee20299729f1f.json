{"author": "rg3", "code": "\n\nfrom __future__ import unicode_literals\n\n\nimport os\nimport sys\nimport unittest\nimport collections\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\nfrom test.helper import gettestcases\n\nfrom youtube_dl.extractor import (\n    FacebookIE,\n    gen_extractors,\n    YoutubeIE,\n)\n\n\nclass TestAllURLsMatching(unittest.TestCase):\n    def setUp(self):\n        self.ies = gen_extractors()\n\n    def matching_ies(self, url):\n        return [ie.IE_NAME for ie in self.ies if ie.suitable(url) and ie.IE_NAME != 'generic']\n\n    def assertMatch(self, url, ie_list):\n        self.assertEqual(self.matching_ies(url), ie_list)\n\n    def test_youtube_playlist_matching(self):\n        assertPlaylist = lambda url: self.assertMatch(url, ['youtube:playlist'])\n        assertPlaylist('ECUl4u3cNGP61MdtwGTqZA0MreSaDybji8')\n        assertPlaylist('UUBABnxM4Ar9ten8Mdjj1j0Q')  \n        assertPlaylist('PL63F0C78739B09958')\n        assertPlaylist('https://www.youtube.com/playlist?list=UUBABnxM4Ar9ten8Mdjj1j0Q')\n        assertPlaylist('https://www.youtube.com/course?list=ECUl4u3cNGP61MdtwGTqZA0MreSaDybji8')\n        assertPlaylist('https://www.youtube.com/playlist?list=PLwP_SiAcdui0KVebT0mU9Apz359a4ubsC')\n        assertPlaylist('https://www.youtube.com/watch?v=AV6J6_AeFEQ&playnext=1&list=PL4023E734DA416012')  \n        self.assertFalse('youtube:playlist' in self.matching_ies('PLtS2H6bU1M'))\n        \n        assertPlaylist('https://www.youtube.com/playlist?list=MCUS.20142101')\n\n    def test_youtube_matching(self):\n        self.assertTrue(YoutubeIE.suitable('PLtS2H6bU1M'))\n        self.assertFalse(YoutubeIE.suitable('https://www.youtube.com/watch?v=AV6J6_AeFEQ&playnext=1&list=PL4023E734DA416012'))  \n        self.assertMatch('http://youtu.be/BaW_jenozKc', ['youtube'])\n        self.assertMatch('http://www.youtube.com/v/BaW_jenozKc', ['youtube'])\n        self.assertMatch('https://youtube.googleapis.com/v/BaW_jenozKc', ['youtube'])\n        self.assertMatch('http://www.cleanvideosearch.com/media/action/yt/watch?videoId=8v_4O44sfjM', ['youtube'])\n\n    def test_youtube_channel_matching(self):\n        assertChannel = lambda url: self.assertMatch(url, ['youtube:channel'])\n        assertChannel('https://www.youtube.com/channel/HCtnHdj3df7iM')\n        assertChannel('https://www.youtube.com/channel/HCtnHdj3df7iM?feature=gb_ch_rec')\n        assertChannel('https://www.youtube.com/channel/HCtnHdj3df7iM/videos')\n\n    def test_youtube_user_matching(self):\n        self.assertMatch('http://www.youtube.com/NASAgovVideo/videos', ['youtube:user'])\n\n    def test_youtube_feeds(self):\n        self.assertMatch('https://www.youtube.com/feed/watch_later', ['youtube:watchlater'])\n        self.assertMatch('https://www.youtube.com/feed/subscriptions', ['youtube:subscriptions'])\n        self.assertMatch('https://www.youtube.com/feed/recommended', ['youtube:recommended'])\n        self.assertMatch('https://www.youtube.com/my_favorites', ['youtube:favorites'])\n\n    def test_youtube_show_matching(self):\n        self.assertMatch('http://www.youtube.com/show/airdisasters', ['youtube:show'])\n\n    def test_youtube_search_matching(self):\n        self.assertMatch('http://www.youtube.com/results?search_query=making+mustard', ['youtube:search_url'])\n        self.assertMatch('https://www.youtube.com/results?baz=bar&search_query=youtube-dl+test+video&filters=video&lclk=video', ['youtube:search_url'])\n\n    def test_youtube_extract(self):\n        assertExtractId = lambda url, id: self.assertEqual(YoutubeIE.extract_id(url), id)\n        assertExtractId('http://www.youtube.com/watch?&v=BaW_jenozKc', 'BaW_jenozKc')\n        assertExtractId('https://www.youtube.com/watch?&v=BaW_jenozKc', 'BaW_jenozKc')\n        assertExtractId('https://www.youtube.com/watch?feature=player_embedded&v=BaW_jenozKc', 'BaW_jenozKc')\n        assertExtractId('https://www.youtube.com/watch_popup?v=BaW_jenozKc', 'BaW_jenozKc')\n        assertExtractId('http://www.youtube.com/watch?v=BaW_jenozKcsharePLED17F32AD9753930', 'BaW_jenozKc')\n        assertExtractId('BaW_jenozKc', 'BaW_jenozKc')\n\n    def test_facebook_matching(self):\n        self.assertTrue(FacebookIE.suitable('https://www.facebook.com/Shiniknoh\n        self.assertTrue(FacebookIE.suitable('https://www.facebook.com/cindyweather?fref=ts\n\n    def test_no_duplicates(self):\n        ies = gen_extractors()\n        for tc in gettestcases(include_onlymatching=True):\n            url = tc['url']\n            for ie in ies:\n                if type(ie).__name__ in ('GenericIE', tc['name'] + 'IE'):\n                    self.assertTrue(ie.suitable(url), '%s should match URL %r' % (type(ie).__name__, url))\n                else:\n                    self.assertFalse(\n                        ie.suitable(url),\n                        '%s should not match URL %r . That URL belongs to %s.' % (type(ie).__name__, url, tc['name']))\n\n    def test_keywords(self):\n        self.assertMatch(':ytsubs', ['youtube:subscriptions'])\n        self.assertMatch(':ytsubscriptions', ['youtube:subscriptions'])\n        self.assertMatch(':ythistory', ['youtube:history'])\n\n    def test_vimeo_matching(self):\n        self.assertMatch('https://vimeo.com/channels/tributes', ['vimeo:channel'])\n        self.assertMatch('https://vimeo.com/channels/31259', ['vimeo:channel'])\n        self.assertMatch('https://vimeo.com/channels/31259/53576664', ['vimeo'])\n        self.assertMatch('https://vimeo.com/user7108434', ['vimeo:user'])\n        self.assertMatch('https://vimeo.com/user7108434/videos', ['vimeo:user'])\n        self.assertMatch('https://vimeo.com/user21297594/review/75524534/3c257a1b5d', ['vimeo:review'])\n\n    \n    def test_soundcloud_not_matching_sets(self):\n        self.assertMatch('http://soundcloud.com/floex/sets/gone-ep', ['soundcloud:set'])\n\n    def test_tumblr(self):\n        self.assertMatch('http://tatianamaslanydaily.tumblr.com/post/54196191430/orphan-black-dvd-extra-behind-the-scenes', ['Tumblr'])\n        self.assertMatch('http://tatianamaslanydaily.tumblr.com/post/54196191430', ['Tumblr'])\n\n    def test_pbs(self):\n        \n        self.assertMatch('http://video.pbs.org/viralplayer/2365173446/', ['pbs'])\n        self.assertMatch('http://video.pbs.org/widget/partnerplayer/980042464/', ['pbs'])\n\n    def test_yahoo_https(self):\n        \n        self.assertMatch(\n            'https://screen.yahoo.com/smartwatches-latest-wearable-gadgets-163745379-cbs.html',\n            ['Yahoo'])\n\n    def test_no_duplicated_ie_names(self):\n        name_accu = collections.defaultdict(list)\n        for ie in self.ies:\n            name_accu[ie.IE_NAME.lower()].append(type(ie).__name__)\n        for (ie_name, ie_list) in name_accu.items():\n            self.assertEqual(\n                len(ie_list), 1,\n                'Multiple extractors with the same IE_NAME \"%s\" (%s)' % (ie_name, ', '.join(ie_list)))\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "#!/usr/bin/env python\n# Allow direct execution\n# 585\n# 668\n# Top tracks\n# 668\n#!/photo.php?v=10153317450565268'))\n#!/photo.php?v=10152183998945793'))\n# https://github.com/rg3/youtube-dl/issues/1930\n# https://github.com/rg3/youtube-dl/issues/2350\n# https://github.com/rg3/youtube-dl/issues/2701\n", "content": "#!/usr/bin/env python\n\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nimport collections\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\nfrom test.helper import gettestcases\n\nfrom youtube_dl.extractor import (\n    FacebookIE,\n    gen_extractors,\n    YoutubeIE,\n)\n\n\nclass TestAllURLsMatching(unittest.TestCase):\n    def setUp(self):\n        self.ies = gen_extractors()\n\n    def matching_ies(self, url):\n        return [ie.IE_NAME for ie in self.ies if ie.suitable(url) and ie.IE_NAME != 'generic']\n\n    def assertMatch(self, url, ie_list):\n        self.assertEqual(self.matching_ies(url), ie_list)\n\n    def test_youtube_playlist_matching(self):\n        assertPlaylist = lambda url: self.assertMatch(url, ['youtube:playlist'])\n        assertPlaylist('ECUl4u3cNGP61MdtwGTqZA0MreSaDybji8')\n        assertPlaylist('UUBABnxM4Ar9ten8Mdjj1j0Q')  # 585\n        assertPlaylist('PL63F0C78739B09958')\n        assertPlaylist('https://www.youtube.com/playlist?list=UUBABnxM4Ar9ten8Mdjj1j0Q')\n        assertPlaylist('https://www.youtube.com/course?list=ECUl4u3cNGP61MdtwGTqZA0MreSaDybji8')\n        assertPlaylist('https://www.youtube.com/playlist?list=PLwP_SiAcdui0KVebT0mU9Apz359a4ubsC')\n        assertPlaylist('https://www.youtube.com/watch?v=AV6J6_AeFEQ&playnext=1&list=PL4023E734DA416012')  # 668\n        self.assertFalse('youtube:playlist' in self.matching_ies('PLtS2H6bU1M'))\n        # Top tracks\n        assertPlaylist('https://www.youtube.com/playlist?list=MCUS.20142101')\n\n    def test_youtube_matching(self):\n        self.assertTrue(YoutubeIE.suitable('PLtS2H6bU1M'))\n        self.assertFalse(YoutubeIE.suitable('https://www.youtube.com/watch?v=AV6J6_AeFEQ&playnext=1&list=PL4023E734DA416012'))  # 668\n        self.assertMatch('http://youtu.be/BaW_jenozKc', ['youtube'])\n        self.assertMatch('http://www.youtube.com/v/BaW_jenozKc', ['youtube'])\n        self.assertMatch('https://youtube.googleapis.com/v/BaW_jenozKc', ['youtube'])\n        self.assertMatch('http://www.cleanvideosearch.com/media/action/yt/watch?videoId=8v_4O44sfjM', ['youtube'])\n\n    def test_youtube_channel_matching(self):\n        assertChannel = lambda url: self.assertMatch(url, ['youtube:channel'])\n        assertChannel('https://www.youtube.com/channel/HCtnHdj3df7iM')\n        assertChannel('https://www.youtube.com/channel/HCtnHdj3df7iM?feature=gb_ch_rec')\n        assertChannel('https://www.youtube.com/channel/HCtnHdj3df7iM/videos')\n\n    def test_youtube_user_matching(self):\n        self.assertMatch('http://www.youtube.com/NASAgovVideo/videos', ['youtube:user'])\n\n    def test_youtube_feeds(self):\n        self.assertMatch('https://www.youtube.com/feed/watch_later', ['youtube:watchlater'])\n        self.assertMatch('https://www.youtube.com/feed/subscriptions', ['youtube:subscriptions'])\n        self.assertMatch('https://www.youtube.com/feed/recommended', ['youtube:recommended'])\n        self.assertMatch('https://www.youtube.com/my_favorites', ['youtube:favorites'])\n\n    def test_youtube_show_matching(self):\n        self.assertMatch('http://www.youtube.com/show/airdisasters', ['youtube:show'])\n\n    def test_youtube_search_matching(self):\n        self.assertMatch('http://www.youtube.com/results?search_query=making+mustard', ['youtube:search_url'])\n        self.assertMatch('https://www.youtube.com/results?baz=bar&search_query=youtube-dl+test+video&filters=video&lclk=video', ['youtube:search_url'])\n\n    def test_youtube_extract(self):\n        assertExtractId = lambda url, id: self.assertEqual(YoutubeIE.extract_id(url), id)\n        assertExtractId('http://www.youtube.com/watch?&v=BaW_jenozKc', 'BaW_jenozKc')\n        assertExtractId('https://www.youtube.com/watch?&v=BaW_jenozKc', 'BaW_jenozKc')\n        assertExtractId('https://www.youtube.com/watch?feature=player_embedded&v=BaW_jenozKc', 'BaW_jenozKc')\n        assertExtractId('https://www.youtube.com/watch_popup?v=BaW_jenozKc', 'BaW_jenozKc')\n        assertExtractId('http://www.youtube.com/watch?v=BaW_jenozKcsharePLED17F32AD9753930', 'BaW_jenozKc')\n        assertExtractId('BaW_jenozKc', 'BaW_jenozKc')\n\n    def test_facebook_matching(self):\n        self.assertTrue(FacebookIE.suitable('https://www.facebook.com/Shiniknoh#!/photo.php?v=10153317450565268'))\n        self.assertTrue(FacebookIE.suitable('https://www.facebook.com/cindyweather?fref=ts#!/photo.php?v=10152183998945793'))\n\n    def test_no_duplicates(self):\n        ies = gen_extractors()\n        for tc in gettestcases(include_onlymatching=True):\n            url = tc['url']\n            for ie in ies:\n                if type(ie).__name__ in ('GenericIE', tc['name'] + 'IE'):\n                    self.assertTrue(ie.suitable(url), '%s should match URL %r' % (type(ie).__name__, url))\n                else:\n                    self.assertFalse(\n                        ie.suitable(url),\n                        '%s should not match URL %r . That URL belongs to %s.' % (type(ie).__name__, url, tc['name']))\n\n    def test_keywords(self):\n        self.assertMatch(':ytsubs', ['youtube:subscriptions'])\n        self.assertMatch(':ytsubscriptions', ['youtube:subscriptions'])\n        self.assertMatch(':ythistory', ['youtube:history'])\n\n    def test_vimeo_matching(self):\n        self.assertMatch('https://vimeo.com/channels/tributes', ['vimeo:channel'])\n        self.assertMatch('https://vimeo.com/channels/31259', ['vimeo:channel'])\n        self.assertMatch('https://vimeo.com/channels/31259/53576664', ['vimeo'])\n        self.assertMatch('https://vimeo.com/user7108434', ['vimeo:user'])\n        self.assertMatch('https://vimeo.com/user7108434/videos', ['vimeo:user'])\n        self.assertMatch('https://vimeo.com/user21297594/review/75524534/3c257a1b5d', ['vimeo:review'])\n\n    # https://github.com/rg3/youtube-dl/issues/1930\n    def test_soundcloud_not_matching_sets(self):\n        self.assertMatch('http://soundcloud.com/floex/sets/gone-ep', ['soundcloud:set'])\n\n    def test_tumblr(self):\n        self.assertMatch('http://tatianamaslanydaily.tumblr.com/post/54196191430/orphan-black-dvd-extra-behind-the-scenes', ['Tumblr'])\n        self.assertMatch('http://tatianamaslanydaily.tumblr.com/post/54196191430', ['Tumblr'])\n\n    def test_pbs(self):\n        # https://github.com/rg3/youtube-dl/issues/2350\n        self.assertMatch('http://video.pbs.org/viralplayer/2365173446/', ['pbs'])\n        self.assertMatch('http://video.pbs.org/widget/partnerplayer/980042464/', ['pbs'])\n\n    def test_yahoo_https(self):\n        # https://github.com/rg3/youtube-dl/issues/2701\n        self.assertMatch(\n            'https://screen.yahoo.com/smartwatches-latest-wearable-gadgets-163745379-cbs.html',\n            ['Yahoo'])\n\n    def test_no_duplicated_ie_names(self):\n        name_accu = collections.defaultdict(list)\n        for ie in self.ies:\n            name_accu[ie.IE_NAME.lower()].append(type(ie).__name__)\n        for (ie_name, ie_list) in name_accu.items():\n            self.assertEqual(\n                len(ie_list), 1,\n                'Multiple extractors with the same IE_NAME \"%s\" (%s)' % (ie_name, ', '.join(ie_list)))\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "test_all_urls.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/test/test_all_urls.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}