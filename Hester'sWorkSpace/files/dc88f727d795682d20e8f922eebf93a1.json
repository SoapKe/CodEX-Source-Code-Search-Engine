{"author": "odoo", "code": "\n# -*- coding: utf-8 -*-\n\nimport os\nimport re\nfrom glob import glob\nfrom setuptools import find_packages, setup\nfrom os.path import join, dirname\n\n\nexec(open(join(dirname(__file__), 'odoo', 'release.py'), 'rb').read())  \nlib_name = 'odoo'\n\n\ndef py2exe_datafiles():\n    data_files = {}\n    data_files['Microsoft.VC90.CRT'] = glob('C:\\Microsoft.VC90.CRT\\*.*')\n\n    for root, dirnames, filenames in os.walk('odoo'):\n        for filename in filenames:\n            if not re.match(r'.*(\\.pyc|\\.pyo|\\~)$', filename):\n                data_files.setdefault(root, []).append(join(root, filename))\n\n    import babel\n    data_files['babel/localedata'] = glob(join(dirname(babel.__file__), 'localedata', '*'))\n    others = ['global.dat', 'numbers.py', 'support.py', 'plural.py']\n    data_files['babel'] = [join(dirname(babel.__file__), f) for f in others]\n    others = ['frontend.py', 'mofile.py']\n    data_files['babel/messages'] = [join(dirname(babel.__file__), 'messages', f) for f in others]\n\n    import pytz\n    tzdir = dirname(pytz.__file__)\n    for root, _, filenames in os.walk(join(tzdir, 'zoneinfo')):\n        base = join('pytz', root[len(tzdir) + 1:])\n        data_files[base] = [join(root, f) for f in filenames]\n\n    import docutils\n    import passlib\n    import reportlab\n    import requests\n    data_mapping = ((docutils, 'docutils'),\n                    (passlib, 'passlib'),\n                    (reportlab, 'reportlab'),\n                    (requests, 'requests'))\n\n    for mod, datadir in data_mapping:\n        basedir = dirname(mod.__file__)\n        for root, _, filenames in os.walk(basedir):\n            base = join(datadir, root[len(basedir) + 1:])\n            data_files[base] = [join(root, f)\n                                for f in filenames\n                                if not f.endswith(('.py', '.pyc', '.pyo'))]\n\n    return list(data_files.items())\n\n\ndef py2exe_options():\n    if os.name == 'nt':\n        import py2exe\n        return {\n            'console': [\n                {'script': 'odoo-bin', 'icon_resources': [\n                    (1, join('setup', 'win32', 'static', 'pixmaps', 'openerp-icon.ico'))\n                ]},\n            ],\n            'options': {\n                'py2exe': {\n                    'skip_archive': 1,\n                    'optimize': 0,  \n                    'dist_dir': 'dist',\n                    'packages': [\n                        'asynchat', 'asyncore',\n                        'commands',\n                        'dateutil',\n                        'decimal',\n                        'decorator',\n                        'docutils',\n                        'email',\n                        'encodings',\n                        'HTMLParser',\n                        'imaplib',\n                        'jinja2',\n                        'lxml', 'lxml._elementpath', 'lxml.builder', 'lxml.etree', 'lxml.objectify',\n                        'mako',\n                        'markupsafe',\n                        'mock',\n                        'ofxparse',\n                        'odoo',\n                        'passlib',\n                        'PIL',\n                        'poplib',\n                        'psutil',\n                        'pychart',\n                        'pydot',\n                        'pyparsing',\n                        'PyPDF2',\n                        'pytz',\n                        'reportlab',\n                        'requests',\n                        'select',\n                        'smtplib',\n                        'suds',\n                        'uuid',\n                        'vatnumber',\n                        'vobject',\n                        'win32service', 'win32serviceutil',\n                        'xlrd',\n                        'xlsxwriter',\n                        'xlwt',\n                        'xml', 'xml.dom',\n                        'yaml',\n                    ],\n                    'excludes': ['Tkconstants', 'Tkinter', 'tcl'],\n                }\n            },\n            'data_files': py2exe_datafiles()\n        }\n    else:\n        return {}\n\n\nsetup(\n    name='odoo',\n    version=version,\n    description=description,\n    long_description=long_desc,\n    url=url,\n    author=author,\n    author_email=author_email,\n    classifiers=[c for c in classifiers.split('\\n') if c],\n    license=license,\n    scripts=['setup/odoo'],\n    packages=find_packages(),\n    package_dir={'%s' % lib_name: 'odoo'},\n    include_package_data=True,\n    install_requires=[\n        'babel >= 1.0',\n        'decorator',\n        'docutils',\n        'feedparser',\n        'gevent',\n        'html2text',\n        'Jinja2',\n        'lxml',  \n        'mako',\n        'mock',\n        'ofxparse',\n        'passlib',\n        'pillow',  \n        'psutil',  \n        'psycopg2 >= 2.2',\n        'pydot',\n        'pyldap',  \n        'pyparsing',\n        'pypdf2',\n        'pyserial',\n        'python-dateutil',\n        'pytz',\n        'pyusb >= 1.0.0b1',\n        'pyyaml',\n        'qrcode',\n        'reportlab',  \n        'requests',\n        'suds-jurko',\n        'vatnumber',\n        'vobject',\n        'werkzeug',\n        'xlsxwriter',\n        'xlwt',\n    ],\n    python_requires='>=3.5',\n    extras_require={\n        'SSL': ['pyopenssl'],\n    },\n    tests_require=[\n        'mock',\n    ],\n    **py2exe_options()\n)\n", "comments": "   usr bin env python        coding  utf 8        load release variables    keep assert running integrated tests rely     windows binary http   www lfd uci edu  gohlke pythonlibs     windows binary http   www lfd uci edu  gohlke pythonlibs     windows binary code google com p psutil downloads list    optional    windows binary pypi python org pypi reportlab ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport re\nfrom glob import glob\nfrom setuptools import find_packages, setup\nfrom os.path import join, dirname\n\n\nexec(open(join(dirname(__file__), 'odoo', 'release.py'), 'rb').read())  # Load release variables\nlib_name = 'odoo'\n\n\ndef py2exe_datafiles():\n    data_files = {}\n    data_files['Microsoft.VC90.CRT'] = glob('C:\\Microsoft.VC90.CRT\\*.*')\n\n    for root, dirnames, filenames in os.walk('odoo'):\n        for filename in filenames:\n            if not re.match(r'.*(\\.pyc|\\.pyo|\\~)$', filename):\n                data_files.setdefault(root, []).append(join(root, filename))\n\n    import babel\n    data_files['babel/localedata'] = glob(join(dirname(babel.__file__), 'localedata', '*'))\n    others = ['global.dat', 'numbers.py', 'support.py', 'plural.py']\n    data_files['babel'] = [join(dirname(babel.__file__), f) for f in others]\n    others = ['frontend.py', 'mofile.py']\n    data_files['babel/messages'] = [join(dirname(babel.__file__), 'messages', f) for f in others]\n\n    import pytz\n    tzdir = dirname(pytz.__file__)\n    for root, _, filenames in os.walk(join(tzdir, 'zoneinfo')):\n        base = join('pytz', root[len(tzdir) + 1:])\n        data_files[base] = [join(root, f) for f in filenames]\n\n    import docutils\n    import passlib\n    import reportlab\n    import requests\n    data_mapping = ((docutils, 'docutils'),\n                    (passlib, 'passlib'),\n                    (reportlab, 'reportlab'),\n                    (requests, 'requests'))\n\n    for mod, datadir in data_mapping:\n        basedir = dirname(mod.__file__)\n        for root, _, filenames in os.walk(basedir):\n            base = join(datadir, root[len(basedir) + 1:])\n            data_files[base] = [join(root, f)\n                                for f in filenames\n                                if not f.endswith(('.py', '.pyc', '.pyo'))]\n\n    return list(data_files.items())\n\n\ndef py2exe_options():\n    if os.name == 'nt':\n        import py2exe\n        return {\n            'console': [\n                {'script': 'odoo-bin', 'icon_resources': [\n                    (1, join('setup', 'win32', 'static', 'pixmaps', 'openerp-icon.ico'))\n                ]},\n            ],\n            'options': {\n                'py2exe': {\n                    'skip_archive': 1,\n                    'optimize': 0,  # Keep the assert running as the integrated tests rely on them.\n                    'dist_dir': 'dist',\n                    'packages': [\n                        'asynchat', 'asyncore',\n                        'commands',\n                        'dateutil',\n                        'decimal',\n                        'decorator',\n                        'docutils',\n                        'email',\n                        'encodings',\n                        'HTMLParser',\n                        'imaplib',\n                        'jinja2',\n                        'lxml', 'lxml._elementpath', 'lxml.builder', 'lxml.etree', 'lxml.objectify',\n                        'mako',\n                        'markupsafe',\n                        'mock',\n                        'ofxparse',\n                        'odoo',\n                        'passlib',\n                        'PIL',\n                        'poplib',\n                        'psutil',\n                        'pychart',\n                        'pydot',\n                        'pyparsing',\n                        'PyPDF2',\n                        'pytz',\n                        'reportlab',\n                        'requests',\n                        'select',\n                        'smtplib',\n                        'suds',\n                        'uuid',\n                        'vatnumber',\n                        'vobject',\n                        'win32service', 'win32serviceutil',\n                        'xlrd',\n                        'xlsxwriter',\n                        'xlwt',\n                        'xml', 'xml.dom',\n                        'yaml',\n                    ],\n                    'excludes': ['Tkconstants', 'Tkinter', 'tcl'],\n                }\n            },\n            'data_files': py2exe_datafiles()\n        }\n    else:\n        return {}\n\n\nsetup(\n    name='odoo',\n    version=version,\n    description=description,\n    long_description=long_desc,\n    url=url,\n    author=author,\n    author_email=author_email,\n    classifiers=[c for c in classifiers.split('\\n') if c],\n    license=license,\n    scripts=['setup/odoo'],\n    packages=find_packages(),\n    package_dir={'%s' % lib_name: 'odoo'},\n    include_package_data=True,\n    install_requires=[\n        'babel >= 1.0',\n        'decorator',\n        'docutils',\n        'feedparser',\n        'gevent',\n        'html2text',\n        'Jinja2',\n        'lxml',  # windows binary http://www.lfd.uci.edu/~gohlke/pythonlibs/\n        'mako',\n        'mock',\n        'ofxparse',\n        'passlib',\n        'pillow',  # windows binary http://www.lfd.uci.edu/~gohlke/pythonlibs/\n        'psutil',  # windows binary code.google.com/p/psutil/downloads/list\n        'psycopg2 >= 2.2',\n        'pydot',\n        'pyldap',  # optional\n        'pyparsing',\n        'pypdf2',\n        'pyserial',\n        'python-dateutil',\n        'pytz',\n        'pyusb >= 1.0.0b1',\n        'pyyaml',\n        'qrcode',\n        'reportlab',  # windows binary pypi.python.org/pypi/reportlab\n        'requests',\n        'suds-jurko',\n        'vatnumber',\n        'vobject',\n        'werkzeug',\n        'xlsxwriter',\n        'xlwt',\n    ],\n    python_requires='>=3.5',\n    extras_require={\n        'SSL': ['pyopenssl'],\n    },\n    tests_require=[\n        'mock',\n    ],\n    **py2exe_options()\n)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "setup.py", "id": "dc88f727d795682d20e8f922eebf93a1", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/setup.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}