{"author": "localstack", "code": "import random\nimport json\nfrom requests.models import Response\nfrom localstack import config\nfrom localstack.utils.common import to_str\nfrom localstack.utils.analytics import event_publisher\nfrom localstack.services.awslambda import lambda_api\nfrom localstack.services.generic_proxy import ProxyListener\n\n\nACTION_PREFIX = 'Kinesis_20131202'\nACTION_PUT_RECORD = '%s.PutRecord' % ACTION_PREFIX\nACTION_PUT_RECORDS = '%s.PutRecords' % ACTION_PREFIX\nACTION_CREATE_STREAM = '%s.CreateStream' % ACTION_PREFIX\nACTION_DELETE_STREAM = '%s.DeleteStream' % ACTION_PREFIX\n\n\nclass ProxyListenerKinesis(ProxyListener):\n\n    def forward_request(self, method, path, data, headers):\n        data = json.loads(to_str(data))\n\n        if random.random() < config.KINESIS_ERROR_PROBABILITY:\n            return kinesis_error_response(data)\n        return True\n\n    def return_response(self, method, path, data, headers, response):\n        action = headers.get('X-Amz-Target')\n        data = json.loads(to_str(data))\n\n        records = []\n        if action in (ACTION_CREATE_STREAM, ACTION_DELETE_STREAM):\n            event_type = (event_publisher.EVENT_KINESIS_CREATE_STREAM if action == ACTION_CREATE_STREAM\n                else event_publisher.EVENT_KINESIS_DELETE_STREAM)\n            event_publisher.fire_event(event_type, payload={'n': event_publisher.get_hash(data.get('StreamName'))})\n        elif action == ACTION_PUT_RECORD:\n            response_body = json.loads(to_str(response.content))\n            event_record = {\n                'data': data['Data'],\n                'partitionKey': data['PartitionKey'],\n                'sequenceNumber': response_body.get('SequenceNumber')\n            }\n            event_records = [event_record]\n            stream_name = data['StreamName']\n            lambda_api.process_kinesis_records(event_records, stream_name)\n        elif action == ACTION_PUT_RECORDS:\n            event_records = []\n            response_body = json.loads(to_str(response.content))\n            response_records = response_body['Records']\n            records = data['Records']\n            for index in range(0, len(records)):\n                record = records[index]\n                event_record = {\n                    'data': record['Data'],\n                    'partitionKey': record['PartitionKey'],\n                    'sequenceNumber': response_records[index].get('SequenceNumber')\n                }\n                event_records.append(event_record)\n            stream_name = data['StreamName']\n            lambda_api.process_kinesis_records(event_records, stream_name)\n\n\n\nUPDATE_KINESIS = ProxyListenerKinesis()\n\n\ndef kinesis_error_response(data):\n    error_response = Response()\n    error_response.status_code = 200\n    content = {'FailedRecordCount': 1, 'Records': []}\n    for record in data['Records']:\n        content['Records'].append({\n            'ErrorCode': 'ProvisionedThroughputExceededException',\n            'ErrorMessage': 'Rate exceeded for shard X in stream Y under account Z.'\n        })\n    error_response._content = json.dumps(content)\n    return error_response\n", "comments": "  action headers    instantiate listener ", "content": "import random\nimport json\nfrom requests.models import Response\nfrom localstack import config\nfrom localstack.utils.common import to_str\nfrom localstack.utils.analytics import event_publisher\nfrom localstack.services.awslambda import lambda_api\nfrom localstack.services.generic_proxy import ProxyListener\n\n# action headers\nACTION_PREFIX = 'Kinesis_20131202'\nACTION_PUT_RECORD = '%s.PutRecord' % ACTION_PREFIX\nACTION_PUT_RECORDS = '%s.PutRecords' % ACTION_PREFIX\nACTION_CREATE_STREAM = '%s.CreateStream' % ACTION_PREFIX\nACTION_DELETE_STREAM = '%s.DeleteStream' % ACTION_PREFIX\n\n\nclass ProxyListenerKinesis(ProxyListener):\n\n    def forward_request(self, method, path, data, headers):\n        data = json.loads(to_str(data))\n\n        if random.random() < config.KINESIS_ERROR_PROBABILITY:\n            return kinesis_error_response(data)\n        return True\n\n    def return_response(self, method, path, data, headers, response):\n        action = headers.get('X-Amz-Target')\n        data = json.loads(to_str(data))\n\n        records = []\n        if action in (ACTION_CREATE_STREAM, ACTION_DELETE_STREAM):\n            event_type = (event_publisher.EVENT_KINESIS_CREATE_STREAM if action == ACTION_CREATE_STREAM\n                else event_publisher.EVENT_KINESIS_DELETE_STREAM)\n            event_publisher.fire_event(event_type, payload={'n': event_publisher.get_hash(data.get('StreamName'))})\n        elif action == ACTION_PUT_RECORD:\n            response_body = json.loads(to_str(response.content))\n            event_record = {\n                'data': data['Data'],\n                'partitionKey': data['PartitionKey'],\n                'sequenceNumber': response_body.get('SequenceNumber')\n            }\n            event_records = [event_record]\n            stream_name = data['StreamName']\n            lambda_api.process_kinesis_records(event_records, stream_name)\n        elif action == ACTION_PUT_RECORDS:\n            event_records = []\n            response_body = json.loads(to_str(response.content))\n            response_records = response_body['Records']\n            records = data['Records']\n            for index in range(0, len(records)):\n                record = records[index]\n                event_record = {\n                    'data': record['Data'],\n                    'partitionKey': record['PartitionKey'],\n                    'sequenceNumber': response_records[index].get('SequenceNumber')\n                }\n                event_records.append(event_record)\n            stream_name = data['StreamName']\n            lambda_api.process_kinesis_records(event_records, stream_name)\n\n\n# instantiate listener\nUPDATE_KINESIS = ProxyListenerKinesis()\n\n\ndef kinesis_error_response(data):\n    error_response = Response()\n    error_response.status_code = 200\n    content = {'FailedRecordCount': 1, 'Records': []}\n    for record in data['Records']:\n        content['Records'].append({\n            'ErrorCode': 'ProvisionedThroughputExceededException',\n            'ErrorMessage': 'Rate exceeded for shard X in stream Y under account Z.'\n        })\n    error_response._content = json.dumps(content)\n    return error_response\n", "description": "\ud83d\udcbb  A fully functional local AWS cloud stack. Develop and test your cloud apps offline!", "file_name": "kinesis_listener.py", "id": "311db1b02ccc1be3ae4efaf625c96c09", "language": "Python", "project_name": "localstack", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/localstack-localstack/localstack-localstack-865ec3a/localstack/services/kinesis/kinesis_listener.py", "save_time": "", "source": "", "update_at": "2018-03-14T00:04:55Z", "url": "https://github.com/localstack/localstack", "wiki": true}