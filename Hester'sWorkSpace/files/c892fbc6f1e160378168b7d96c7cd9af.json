{"author": "yandex", "code": "import os\nimport logging\n\nimport gixy\nfrom gixy.core.plugins_manager import PluginsManager\nfrom gixy.core.context import get_context, pop_context, push_context, purge_context\nfrom gixy.parser.nginx_parser import NginxParser\nfrom gixy.core.config import Config\n\nLOG = logging.getLogger(__name__)\n\n\nclass Manager(object):\n    def __init__(self, config=None):\n        self.root = None\n        self.config = config or Config()\n        self.auditor = PluginsManager(config=self.config)\n\n    def audit(self, file_path, file_data, is_stdin=False):\n        LOG.debug(\"Audit config file: {fname}\".format(fname=file_path))\n        parser = NginxParser(\n            cwd=os.path.dirname(file_path) if not is_stdin else '',\n            allow_includes=self.config.allow_includes)\n        self.root = parser.parse(content=file_data.read(), path_info=file_path)\n\n        push_context(self.root)\n        self._audit_recursive(self.root.children)\n\n    @property\n    def results(self):\n        for plugin in self.auditor.plugins:\n            if plugin.issues:\n                yield plugin\n\n    @property\n    def stats(self):\n        stats = dict.fromkeys(gixy.severity.ALL, 0)\n        for plugin in self.auditor.plugins:\n            base_severity = plugin.severity\n            for issue in plugin.issues:\n                # TODO(buglloc): encapsulate into Issue class?\n                severity = issue.severity if issue.severity else base_severity\n                stats[severity] += 1\n        return stats\n\n    def _audit_recursive(self, tree):\n        for directive in tree:\n            self._update_variables(directive)\n            self.auditor.audit(directive)\n            if directive.is_block:\n                if directive.self_context:\n                    push_context(directive)\n                self._audit_recursive(directive.children)\n                if directive.self_context:\n                    pop_context()\n\n    def _update_variables(self, directive):\n        # TODO(buglloc): finish him!\n        if not directive.provide_variables:\n            return\n\n        context = get_context()\n        for var in directive.variables:\n            if var.name == 0:\n                \n                context.clear_index_vars()\n            context.add_var(var.name, var)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        purge_context()\n", "comments": "  todo(buglloc)  encapsulate issue class     todo(buglloc)  finish     all regexps must clean indexed variables ", "content": "import os\nimport logging\n\nimport gixy\nfrom gixy.core.plugins_manager import PluginsManager\nfrom gixy.core.context import get_context, pop_context, push_context, purge_context\nfrom gixy.parser.nginx_parser import NginxParser\nfrom gixy.core.config import Config\n\nLOG = logging.getLogger(__name__)\n\n\nclass Manager(object):\n    def __init__(self, config=None):\n        self.root = None\n        self.config = config or Config()\n        self.auditor = PluginsManager(config=self.config)\n\n    def audit(self, file_path, file_data, is_stdin=False):\n        LOG.debug(\"Audit config file: {fname}\".format(fname=file_path))\n        parser = NginxParser(\n            cwd=os.path.dirname(file_path) if not is_stdin else '',\n            allow_includes=self.config.allow_includes)\n        self.root = parser.parse(content=file_data.read(), path_info=file_path)\n\n        push_context(self.root)\n        self._audit_recursive(self.root.children)\n\n    @property\n    def results(self):\n        for plugin in self.auditor.plugins:\n            if plugin.issues:\n                yield plugin\n\n    @property\n    def stats(self):\n        stats = dict.fromkeys(gixy.severity.ALL, 0)\n        for plugin in self.auditor.plugins:\n            base_severity = plugin.severity\n            for issue in plugin.issues:\n                # TODO(buglloc): encapsulate into Issue class?\n                severity = issue.severity if issue.severity else base_severity\n                stats[severity] += 1\n        return stats\n\n    def _audit_recursive(self, tree):\n        for directive in tree:\n            self._update_variables(directive)\n            self.auditor.audit(directive)\n            if directive.is_block:\n                if directive.self_context:\n                    push_context(directive)\n                self._audit_recursive(directive.children)\n                if directive.self_context:\n                    pop_context()\n\n    def _update_variables(self, directive):\n        # TODO(buglloc): finish him!\n        if not directive.provide_variables:\n            return\n\n        context = get_context()\n        for var in directive.variables:\n            if var.name == 0:\n                # All regexps must clean indexed variables\n                context.clear_index_vars()\n            context.add_var(var.name, var)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        purge_context()\n", "description": "Nginx configuration static analyzer", "file_name": "manager.py", "id": "c892fbc6f1e160378168b7d96c7cd9af", "language": "Python", "project_name": "gixy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/yandex-gixy/yandex-gixy-86b5e60/gixy/core/manager.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:01:42Z", "url": "https://github.com/yandex/gixy", "wiki": true}