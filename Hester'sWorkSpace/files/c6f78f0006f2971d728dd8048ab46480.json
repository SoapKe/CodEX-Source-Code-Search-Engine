{"author": "tgalal", "code": "from .notification_groups import GroupsNotificationProtocolEntity\nfrom yowsup.structs import ProtocolTreeNode\nclass CreateGroupsNotificationProtocolEntity(GroupsNotificationProtocolEntity):\n    \n    TYPE_CREATE_NEW = \"new\"\n    TYPE_PARTICIPANT_ADMIN = \"admin\"\n    def __init__(self, _id, _from, timestamp, notify, participant, offline,\n                 createType, groupId, creationTimestamp, creatorJid,\n                 subject, subjectTime, subjectOwnerJid,\n                 participants):\n        super(CreateGroupsNotificationProtocolEntity, self).__init__(_id, _from, timestamp, notify, participant, offline)\n        self.setGroupProps(createType, groupId, creationTimestamp, creatorJid,\n                           subject, subjectTime, subjectOwnerJid, participants)\n\n    def setGroupProps(self, createType, groupId, creationTimestamp, creatorJid,\n                      subject, subjectTime, subjectOwnerJid,\n                      participants):\n\n        assert type(participants) is dict, \"Participants must be a dict {jid => type?}\"\n\n        self.createType = createType\n        self.groupId = groupId\n        self.creationTimestamp = int(creationTimestamp)\n        self.creatorJid = creatorJid\n        self.subject = subject\n        self.subjectTime = int(subjectTime)\n        self.subjectOwnerJid = subjectOwnerJid\n        self.participants = participants\n\n    def getParticipants(self):\n        return self.participants\n\n    def getSubject(self):\n        return self.subject\n\n    def getGroupId(self):\n        return self.groupId\n\n    def getCreationTimestamp(self):\n        return self.creationTimestamp\n\n    def getCreatorJid(self, full = True):\n        return self.creatorJid if full else self.creatorJid.split('@')[0]\n\n    def getSubjectTimestamp(self):\n        return self.subjectTime\n\n    def getSubjectOwnerJid(self, full = True):\n        return self.subjectOwnerJid if full else self.subjectOwnerJid.split('@')[0]\n\n    def getCreatetype(self):\n        return self.createType\n\n    def getGroupAdmin(self, full = True):\n        for jid, _type in self.participants.items():\n            if _type == self.__class__.TYPE_PARTICIPANT_ADMIN:\n                return jid if full else jid.split('@')[0]\n\n    def __str__(self):\n        out = super(CreateGroupsNotificationProtocolEntity, self).__str__()\n        out += \"Creator: %s\\n\" % self.getCreatorJid()\n        out += \"Create type: %s\\n\" % self.getCreatetype()\n        out += \"Creation timestamp: %s\\n\" % self.getCreationTimestamp()\n        out += \"Subject: %s\\n\" % self.getSubject()\n        out += \"Subject owner: %s\\n\" % self.getSubjectOwnerJid()\n        out += \"Subject timestamp: %s\\n\" % self.getSubjectTimestamp()\n        out += \"Participants: %s\\n\" % self.getParticipants()\n        return out\n\n    def toProtocolTreeNode(self):\n        node = super(CreateGroupsNotificationProtocolEntity, self).toProtocolTreeNode()\n        createNode = ProtocolTreeNode(\"create\", {\"type\": self.getCreatetype()})\n        groupNode = ProtocolTreeNode(\"group\", {\n            \"subject\": self.getSubject(),\n            \"creation\": str(self.getCreationTimestamp()),\n            \"creator\": self.getCreatorJid(),\n            \"s_t\": self.getSubjectTimestamp(),\n            \"s_o\": self.getSubjectOwnerJid(),\n            \"id\": self.getGroupId()\n        })\n\n        participants = []\n        for jid, _type in self.getParticipants().items():\n            pnode = ProtocolTreeNode(\"participant\", {\"jid\": jid})\n            if _type:\n                pnode[\"type\"] = _type\n            participants.append(pnode)\n\n        groupNode.addChildren(participants)\n        createNode.addChild(groupNode)\n        node.addChild(createNode)\n\n        return node\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        createNode = node.getChild(\"create\")\n        groupNode = createNode.getChild(\"group\")\n        participants = {}\n        for p in groupNode.getAllChildren(\"participant\"):\n            participants[p[\"jid\"]] = p[\"type\"]\n\n        return CreateGroupsNotificationProtocolEntity(\n            node[\"id\"], node[\"from\"], node[\"t\"], node[\"notify\"], node[\"participant\"], node[\"offline\"],\n            createNode[\"type\"], groupNode[\"id\"], groupNode[\"creation\"], groupNode[\"creator\"], groupNode[\"subject\"],\n            groupNode[\"s_t\"], groupNode[\"s_o\"], participants\n        )\n", "comments": "     notification notify  whatsapp  id    id     1420402514  participant    participant jiid       group jid    type  w gp2    create type  new    group subject    groupsubj    creation    group creation tyime    creator    creator jid           subject set timestamp    id    group id       subject owner jid      participant type  admin  jid    jid 1       participant   participant jid    jid 2       participant    group    create    notification          ", "content": "from .notification_groups import GroupsNotificationProtocolEntity\nfrom yowsup.structs import ProtocolTreeNode\nclass CreateGroupsNotificationProtocolEntity(GroupsNotificationProtocolEntity):\n    '''\n<notification notify=\"WhatsApp\" id=\"{{id}}\" t=\"1420402514\" participant=\"{{participant_jiid}}\" from=\"{{group_jid}}\" type=\"w:gp2\">\n<create type=\"new\">\n<group subject=\"{{GROUPSUBJ}}\" creation=\"{{GROUP_CREATION_TYIME}}\" creator=\"{{CREATOR_JID}}\"\n    s_t=\"{{SUBJECT_SET_TIMESTAMP}}\" id=\"{{GROUP_ID}}\" s_o=\"{{SUBJECT_OWNER_JID}}\">\n<participant type=\"admin\" jid=\"{{JID_1}}\">\n</participant>\n<participant jid=\"{{JID_2}}\">\n</participant>\n</group>\n</create>\n</notification>\n    '''\n    TYPE_CREATE_NEW = \"new\"\n    TYPE_PARTICIPANT_ADMIN = \"admin\"\n    def __init__(self, _id, _from, timestamp, notify, participant, offline,\n                 createType, groupId, creationTimestamp, creatorJid,\n                 subject, subjectTime, subjectOwnerJid,\n                 participants):\n        super(CreateGroupsNotificationProtocolEntity, self).__init__(_id, _from, timestamp, notify, participant, offline)\n        self.setGroupProps(createType, groupId, creationTimestamp, creatorJid,\n                           subject, subjectTime, subjectOwnerJid, participants)\n\n    def setGroupProps(self, createType, groupId, creationTimestamp, creatorJid,\n                      subject, subjectTime, subjectOwnerJid,\n                      participants):\n\n        assert type(participants) is dict, \"Participants must be a dict {jid => type?}\"\n\n        self.createType = createType\n        self.groupId = groupId\n        self.creationTimestamp = int(creationTimestamp)\n        self.creatorJid = creatorJid\n        self.subject = subject\n        self.subjectTime = int(subjectTime)\n        self.subjectOwnerJid = subjectOwnerJid\n        self.participants = participants\n\n    def getParticipants(self):\n        return self.participants\n\n    def getSubject(self):\n        return self.subject\n\n    def getGroupId(self):\n        return self.groupId\n\n    def getCreationTimestamp(self):\n        return self.creationTimestamp\n\n    def getCreatorJid(self, full = True):\n        return self.creatorJid if full else self.creatorJid.split('@')[0]\n\n    def getSubjectTimestamp(self):\n        return self.subjectTime\n\n    def getSubjectOwnerJid(self, full = True):\n        return self.subjectOwnerJid if full else self.subjectOwnerJid.split('@')[0]\n\n    def getCreatetype(self):\n        return self.createType\n\n    def getGroupAdmin(self, full = True):\n        for jid, _type in self.participants.items():\n            if _type == self.__class__.TYPE_PARTICIPANT_ADMIN:\n                return jid if full else jid.split('@')[0]\n\n    def __str__(self):\n        out = super(CreateGroupsNotificationProtocolEntity, self).__str__()\n        out += \"Creator: %s\\n\" % self.getCreatorJid()\n        out += \"Create type: %s\\n\" % self.getCreatetype()\n        out += \"Creation timestamp: %s\\n\" % self.getCreationTimestamp()\n        out += \"Subject: %s\\n\" % self.getSubject()\n        out += \"Subject owner: %s\\n\" % self.getSubjectOwnerJid()\n        out += \"Subject timestamp: %s\\n\" % self.getSubjectTimestamp()\n        out += \"Participants: %s\\n\" % self.getParticipants()\n        return out\n\n    def toProtocolTreeNode(self):\n        node = super(CreateGroupsNotificationProtocolEntity, self).toProtocolTreeNode()\n        createNode = ProtocolTreeNode(\"create\", {\"type\": self.getCreatetype()})\n        groupNode = ProtocolTreeNode(\"group\", {\n            \"subject\": self.getSubject(),\n            \"creation\": str(self.getCreationTimestamp()),\n            \"creator\": self.getCreatorJid(),\n            \"s_t\": self.getSubjectTimestamp(),\n            \"s_o\": self.getSubjectOwnerJid(),\n            \"id\": self.getGroupId()\n        })\n\n        participants = []\n        for jid, _type in self.getParticipants().items():\n            pnode = ProtocolTreeNode(\"participant\", {\"jid\": jid})\n            if _type:\n                pnode[\"type\"] = _type\n            participants.append(pnode)\n\n        groupNode.addChildren(participants)\n        createNode.addChild(groupNode)\n        node.addChild(createNode)\n\n        return node\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        createNode = node.getChild(\"create\")\n        groupNode = createNode.getChild(\"group\")\n        participants = {}\n        for p in groupNode.getAllChildren(\"participant\"):\n            participants[p[\"jid\"]] = p[\"type\"]\n\n        return CreateGroupsNotificationProtocolEntity(\n            node[\"id\"], node[\"from\"], node[\"t\"], node[\"notify\"], node[\"participant\"], node[\"offline\"],\n            createNode[\"type\"], groupNode[\"id\"], groupNode[\"creation\"], groupNode[\"creator\"], groupNode[\"subject\"],\n            groupNode[\"s_t\"], groupNode[\"s_o\"], participants\n        )\n", "description": "The python WhatsApp library", "file_name": "notification_groups_create.py", "id": "c6f78f0006f2971d728dd8048ab46480", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_groups/protocolentities/notification_groups_create.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}