{"author": "ansible", "code": "# Copyright (c) 2016-2017 Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom ansible.compat.tests import unittest\nfrom oneview_module_loader import NetworkSetFactsModule\nfrom hpe_test_utils import FactsParamsTestCase\n\nERROR_MSG = 'Fake message error'\n\nPARAMS_GET_ALL = dict(\n    config='config.json',\n    name=None\n)\n\nPARAMS_GET_ALL_WITHOUT_ETHERNET = dict(\n    config='config.json',\n    name=None,\n    options=['withoutEthernet']\n)\n\nPARAMS_GET_BY_NAME = dict(\n    config='config.json',\n    name='Network Set 1'\n)\n\nPARAMS_GET_BY_NAME_WITHOUT_ETHERNET = dict(\n    config='config.json',\n    name='Network Set 1',\n    options=['withoutEthernet']\n)\n\n\nclass NetworkSetFactsSpec(unittest.TestCase,\n                          FactsParamsTestCase):\n    def setUp(self):\n        self.configure_mocks(self, NetworkSetFactsModule)\n        self.network_sets = self.mock_ov_client.network_sets\n        FactsParamsTestCase.configure_client_mock(self, self.network_sets)\n\n    def test_should_get_all_network_sets(self):\n        network_sets = [{\n            \"name\": \"Network Set 1\",\n            \"networkUris\": ['/rest/ethernet-networks/aaa-bbb-ccc']\n        }, {\n            \"name\": \"Network Set 2\",\n            \"networkUris\": ['/rest/ethernet-networks/ddd-eee-fff', '/rest/ethernet-networks/ggg-hhh-fff']\n        }]\n\n        self.network_sets.get_all.return_value = network_sets\n        self.mock_ansible_module.params = PARAMS_GET_ALL\n\n        NetworkSetFactsModule().run()\n\n        self.network_sets.get_all.assert_called_once_with()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(network_sets=network_sets))\n\n    def test_should_get_all_network_sets_without_ethernet(self):\n        network_sets = [{\n            \"name\": \"Network Set 1\",\n            \"networkUris\": []\n        }, {\n            \"name\": \"Network Set 2\",\n            \"networkUris\": []\n        }]\n\n        self.network_sets.get_all.return_value = network_sets\n        self.mock_ansible_module.params = PARAMS_GET_ALL\n\n        NetworkSetFactsModule().run()\n\n        self.network_sets.get_all.assert_called_once_with()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(network_sets=network_sets))\n\n    def test_should_get_network_set_by_name(self):\n        network_sets = [{\n            \"name\": \"Network Set 1\",\n            \"networkUris\": ['/rest/ethernet-networks/aaa-bbb-ccc']\n        }]\n\n        self.network_sets.get_by.return_value = network_sets\n        self.mock_ansible_module.params = PARAMS_GET_BY_NAME\n\n        NetworkSetFactsModule().run()\n\n        self.network_sets.get_by.assert_called_once_with('name', 'Network Set 1')\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(network_sets=network_sets))\n\n    def test_should_get_network_set_by_name_without_ethernet(self):\n        network_sets = [{\n            \"name\": \"Network Set 1\",\n            \"networkUris\": []\n        }]\n\n        self.network_sets.get_all_without_ethernet.return_value = network_sets\n        self.mock_ansible_module.params = PARAMS_GET_BY_NAME_WITHOUT_ETHERNET\n\n        NetworkSetFactsModule().run()\n\n        expected_filter = \"\\\"'name'='Network Set 1'\\\"\"\n        self.network_sets.get_all_without_ethernet.assert_called_once_with(filter=expected_filter)\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(network_sets=network_sets))\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "  copyright (c) 2016 2017 hewlett packard enterprise development lp    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "# Copyright (c) 2016-2017 Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom ansible.compat.tests import unittest\nfrom oneview_module_loader import NetworkSetFactsModule\nfrom hpe_test_utils import FactsParamsTestCase\n\nERROR_MSG = 'Fake message error'\n\nPARAMS_GET_ALL = dict(\n    config='config.json',\n    name=None\n)\n\nPARAMS_GET_ALL_WITHOUT_ETHERNET = dict(\n    config='config.json',\n    name=None,\n    options=['withoutEthernet']\n)\n\nPARAMS_GET_BY_NAME = dict(\n    config='config.json',\n    name='Network Set 1'\n)\n\nPARAMS_GET_BY_NAME_WITHOUT_ETHERNET = dict(\n    config='config.json',\n    name='Network Set 1',\n    options=['withoutEthernet']\n)\n\n\nclass NetworkSetFactsSpec(unittest.TestCase,\n                          FactsParamsTestCase):\n    def setUp(self):\n        self.configure_mocks(self, NetworkSetFactsModule)\n        self.network_sets = self.mock_ov_client.network_sets\n        FactsParamsTestCase.configure_client_mock(self, self.network_sets)\n\n    def test_should_get_all_network_sets(self):\n        network_sets = [{\n            \"name\": \"Network Set 1\",\n            \"networkUris\": ['/rest/ethernet-networks/aaa-bbb-ccc']\n        }, {\n            \"name\": \"Network Set 2\",\n            \"networkUris\": ['/rest/ethernet-networks/ddd-eee-fff', '/rest/ethernet-networks/ggg-hhh-fff']\n        }]\n\n        self.network_sets.get_all.return_value = network_sets\n        self.mock_ansible_module.params = PARAMS_GET_ALL\n\n        NetworkSetFactsModule().run()\n\n        self.network_sets.get_all.assert_called_once_with()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(network_sets=network_sets))\n\n    def test_should_get_all_network_sets_without_ethernet(self):\n        network_sets = [{\n            \"name\": \"Network Set 1\",\n            \"networkUris\": []\n        }, {\n            \"name\": \"Network Set 2\",\n            \"networkUris\": []\n        }]\n\n        self.network_sets.get_all.return_value = network_sets\n        self.mock_ansible_module.params = PARAMS_GET_ALL\n\n        NetworkSetFactsModule().run()\n\n        self.network_sets.get_all.assert_called_once_with()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(network_sets=network_sets))\n\n    def test_should_get_network_set_by_name(self):\n        network_sets = [{\n            \"name\": \"Network Set 1\",\n            \"networkUris\": ['/rest/ethernet-networks/aaa-bbb-ccc']\n        }]\n\n        self.network_sets.get_by.return_value = network_sets\n        self.mock_ansible_module.params = PARAMS_GET_BY_NAME\n\n        NetworkSetFactsModule().run()\n\n        self.network_sets.get_by.assert_called_once_with('name', 'Network Set 1')\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(network_sets=network_sets))\n\n    def test_should_get_network_set_by_name_without_ethernet(self):\n        network_sets = [{\n            \"name\": \"Network Set 1\",\n            \"networkUris\": []\n        }]\n\n        self.network_sets.get_all_without_ethernet.return_value = network_sets\n        self.mock_ansible_module.params = PARAMS_GET_BY_NAME_WITHOUT_ETHERNET\n\n        NetworkSetFactsModule().run()\n\n        expected_filter = \"\\\"'name'='Network Set 1'\\\"\"\n        self.network_sets.get_all_without_ethernet.assert_called_once_with(filter=expected_filter)\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(network_sets=network_sets))\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_oneview_network_set_facts.py", "id": "af9af17ce5928853b26b07be0e5be10e", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/remote_management/oneview/test_oneview_network_set_facts.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}