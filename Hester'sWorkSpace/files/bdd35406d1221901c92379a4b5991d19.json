{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    float_or_none,\n    parse_age_limit,\n    qualities,\n    random_birthday,\n    try_get,\n    unified_timestamp,\n    urljoin,\n)\n\n\nclass VideoPressIE(InfoExtractor):\n    _VALID_URL = r'https?://videopress\\.com/embed/(?P<id>[\\da-zA-Z]+)'\n    _TESTS = [{\n        'url': 'https://videopress.com/embed/kUJmAcSf',\n        'md5': '706956a6c875873d51010921310e4bc6',\n        'info_dict': {\n            'id': 'kUJmAcSf',\n            'ext': 'mp4',\n            'title': 'VideoPress Demo',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 634.6,\n            'timestamp': 1434983935,\n            'upload_date': '20150622',\n            'age_limit': 0,\n        },\n    }, {\n        \n        'url': 'https://videopress.com/embed/iH3gstfZ',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+src=[\"\\']((?:https?://)?videopress\\.com/embed/[\\da-zA-Z]+)',\n            webpage)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        query = random_birthday('birth_year', 'birth_month', 'birth_day')\n        video = self._download_json(\n            'https://public-api.wordpress.com/rest/v1.1/videos/%s' % video_id,\n            video_id, query=query)\n\n        title = video['title']\n\n        def base_url(scheme):\n            return try_get(\n                video, lambda x: x['file_url_base'][scheme], compat_str)\n\n        base_url = base_url('https') or base_url('http')\n\n        QUALITIES = ('std', 'dvd', 'hd')\n        quality = qualities(QUALITIES)\n\n        formats = []\n        for format_id, f in video['files'].items():\n            if not isinstance(f, dict):\n                continue\n            for ext, path in f.items():\n                if ext in ('mp4', 'ogg'):\n                    formats.append({\n                        'url': urljoin(base_url, path),\n                        'format_id': '%s-%s' % (format_id, ext),\n                        'ext': determine_ext(path, ext),\n                        'quality': quality(format_id),\n                    })\n        original_url = try_get(video, lambda x: x['original'], compat_str)\n        if original_url:\n            formats.append({\n                'url': original_url,\n                'format_id': 'original',\n                'quality': len(QUALITIES),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'thumbnail': video.get('poster'),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': unified_timestamp(video.get('upload_date')),\n            'age_limit': parse_age_limit(video.get('rating')),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# 17+, requires birth_* params\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    float_or_none,\n    parse_age_limit,\n    qualities,\n    random_birthday,\n    try_get,\n    unified_timestamp,\n    urljoin,\n)\n\n\nclass VideoPressIE(InfoExtractor):\n    _VALID_URL = r'https?://videopress\\.com/embed/(?P<id>[\\da-zA-Z]+)'\n    _TESTS = [{\n        'url': 'https://videopress.com/embed/kUJmAcSf',\n        'md5': '706956a6c875873d51010921310e4bc6',\n        'info_dict': {\n            'id': 'kUJmAcSf',\n            'ext': 'mp4',\n            'title': 'VideoPress Demo',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 634.6,\n            'timestamp': 1434983935,\n            'upload_date': '20150622',\n            'age_limit': 0,\n        },\n    }, {\n        # 17+, requires birth_* params\n        'url': 'https://videopress.com/embed/iH3gstfZ',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+src=[\"\\']((?:https?://)?videopress\\.com/embed/[\\da-zA-Z]+)',\n            webpage)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        query = random_birthday('birth_year', 'birth_month', 'birth_day')\n        video = self._download_json(\n            'https://public-api.wordpress.com/rest/v1.1/videos/%s' % video_id,\n            video_id, query=query)\n\n        title = video['title']\n\n        def base_url(scheme):\n            return try_get(\n                video, lambda x: x['file_url_base'][scheme], compat_str)\n\n        base_url = base_url('https') or base_url('http')\n\n        QUALITIES = ('std', 'dvd', 'hd')\n        quality = qualities(QUALITIES)\n\n        formats = []\n        for format_id, f in video['files'].items():\n            if not isinstance(f, dict):\n                continue\n            for ext, path in f.items():\n                if ext in ('mp4', 'ogg'):\n                    formats.append({\n                        'url': urljoin(base_url, path),\n                        'format_id': '%s-%s' % (format_id, ext),\n                        'ext': determine_ext(path, ext),\n                        'quality': quality(format_id),\n                    })\n        original_url = try_get(video, lambda x: x['original'], compat_str)\n        if original_url:\n            formats.append({\n                'url': original_url,\n                'format_id': 'original',\n                'quality': len(QUALITIES),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'thumbnail': video.get('poster'),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': unified_timestamp(video.get('upload_date')),\n            'age_limit': parse_age_limit(video.get('rating')),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "videopress.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/videopress.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}