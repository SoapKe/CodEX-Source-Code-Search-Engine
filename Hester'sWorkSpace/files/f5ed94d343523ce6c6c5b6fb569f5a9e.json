{"author": "getsentry", "code": "from __future__ import absolute_import, print_function\n\nfrom datetime import timedelta\nfrom django.utils import timezone\nfrom mock import patch\n\nfrom sentry.auth.exceptions import IdentityNotValid\nfrom sentry.auth.providers.dummy import DummyProvider\nfrom sentry.models import AuthIdentity, AuthProvider, OrganizationMember\nfrom sentry.testutils import TestCase\nfrom sentry.tasks.check_auth import (AUTH_CHECK_INTERVAL, check_auth, check_auth_identity)\n\n\nclass CheckAuthTest(TestCase):\n    @patch('sentry.tasks.check_auth.check_auth_identity')\n    def test_simple(self, mock_check_auth_identity):\n        organization = self.create_organization(name='Test')\n        user = self.create_user(email='bar@example.com')\n        auth_provider = AuthProvider.objects.create(\n            organization=organization,\n            provider='dummy',\n        )\n        OrganizationMember.objects.create(\n            user=user,\n            organization=organization,\n            flags=getattr(OrganizationMember.flags, 'sso:linked'),\n        )\n\n        ai = AuthIdentity.objects.create(\n            auth_provider=auth_provider,\n            user=user,\n            last_synced=timezone.now() - timedelta(days=1),\n        )\n\n        check_auth()\n\n        updated_ai = AuthIdentity.objects.get(id=ai.id)\n        assert updated_ai.last_synced != ai.last_synced\n        \n        assert updated_ai.last_verified.replace(microsecond=0) == ai.last_verified.replace(\n            microsecond=0\n        )\n\n        mock_check_auth_identity.apply_async.assert_called_once_with(\n            kwargs={'auth_identity_id': ai.id},\n            expires=AUTH_CHECK_INTERVAL,\n        )\n\n\nclass CheckAuthIdentityTest(TestCase):\n    @patch('sentry.tasks.check_auth.check_auth_identity')\n    def test_simple(self, mock_check_auth_identity):\n        organization = self.create_organization(name='Test')\n        user = self.create_user(email='bar@example.com')\n        auth_provider = AuthProvider.objects.create(\n            organization=organization,\n            provider='dummy',\n        )\n        om = OrganizationMember.objects.create(\n            user=user,\n            organization=organization,\n            flags=getattr(OrganizationMember.flags, 'sso:linked'),\n        )\n\n        ai = AuthIdentity.objects.create(\n            auth_provider=auth_provider,\n            user=user,\n            last_verified=timezone.now() - timedelta(days=1),\n        )\n\n        with patch.object(DummyProvider, 'refresh_identity') as mock_refresh_identity:\n            mock_refresh_identity.side_effect = IdentityNotValid()\n            with self.auth_provider('dummy', DummyProvider):\n                check_auth_identity(auth_identity_id=ai.id)\n            mock_refresh_identity.assert_called_once_with(ai)\n\n        \n        om = OrganizationMember.objects.get(id=om.id)\n        assert not getattr(om.flags, 'sso:linked')\n        assert getattr(om.flags, 'sso:invalid')\n\n        updated_ai = AuthIdentity.objects.get(id=ai.id)\n        assert updated_ai.last_synced != ai.last_synced\n        assert updated_ai.last_verified != ai.last_verified\n", "comments": "  mysql doesnt store ms    error  become inactive ", "content": "from __future__ import absolute_import, print_function\n\nfrom datetime import timedelta\nfrom django.utils import timezone\nfrom mock import patch\n\nfrom sentry.auth.exceptions import IdentityNotValid\nfrom sentry.auth.providers.dummy import DummyProvider\nfrom sentry.models import AuthIdentity, AuthProvider, OrganizationMember\nfrom sentry.testutils import TestCase\nfrom sentry.tasks.check_auth import (AUTH_CHECK_INTERVAL, check_auth, check_auth_identity)\n\n\nclass CheckAuthTest(TestCase):\n    @patch('sentry.tasks.check_auth.check_auth_identity')\n    def test_simple(self, mock_check_auth_identity):\n        organization = self.create_organization(name='Test')\n        user = self.create_user(email='bar@example.com')\n        auth_provider = AuthProvider.objects.create(\n            organization=organization,\n            provider='dummy',\n        )\n        OrganizationMember.objects.create(\n            user=user,\n            organization=organization,\n            flags=getattr(OrganizationMember.flags, 'sso:linked'),\n        )\n\n        ai = AuthIdentity.objects.create(\n            auth_provider=auth_provider,\n            user=user,\n            last_synced=timezone.now() - timedelta(days=1),\n        )\n\n        check_auth()\n\n        updated_ai = AuthIdentity.objects.get(id=ai.id)\n        assert updated_ai.last_synced != ai.last_synced\n        # mysql doesnt store ms\n        assert updated_ai.last_verified.replace(microsecond=0) == ai.last_verified.replace(\n            microsecond=0\n        )\n\n        mock_check_auth_identity.apply_async.assert_called_once_with(\n            kwargs={'auth_identity_id': ai.id},\n            expires=AUTH_CHECK_INTERVAL,\n        )\n\n\nclass CheckAuthIdentityTest(TestCase):\n    @patch('sentry.tasks.check_auth.check_auth_identity')\n    def test_simple(self, mock_check_auth_identity):\n        organization = self.create_organization(name='Test')\n        user = self.create_user(email='bar@example.com')\n        auth_provider = AuthProvider.objects.create(\n            organization=organization,\n            provider='dummy',\n        )\n        om = OrganizationMember.objects.create(\n            user=user,\n            organization=organization,\n            flags=getattr(OrganizationMember.flags, 'sso:linked'),\n        )\n\n        ai = AuthIdentity.objects.create(\n            auth_provider=auth_provider,\n            user=user,\n            last_verified=timezone.now() - timedelta(days=1),\n        )\n\n        with patch.object(DummyProvider, 'refresh_identity') as mock_refresh_identity:\n            mock_refresh_identity.side_effect = IdentityNotValid()\n            with self.auth_provider('dummy', DummyProvider):\n                check_auth_identity(auth_identity_id=ai.id)\n            mock_refresh_identity.assert_called_once_with(ai)\n\n        # because of an error, it should become inactive\n        om = OrganizationMember.objects.get(id=om.id)\n        assert not getattr(om.flags, 'sso:linked')\n        assert getattr(om.flags, 'sso:invalid')\n\n        updated_ai = AuthIdentity.objects.get(id=ai.id)\n        assert updated_ai.last_synced != ai.last_synced\n        assert updated_ai.last_verified != ai.last_verified\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_check_auth.py", "id": "f5ed94d343523ce6c6c5b6fb569f5a9e", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/tasks/test_check_auth.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}