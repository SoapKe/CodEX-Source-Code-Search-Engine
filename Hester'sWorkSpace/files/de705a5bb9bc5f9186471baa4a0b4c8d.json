{"author": "reddit-archive", "code": "\n\n License Version 1.0. (the \"License\"); you may not use this file except in\n\n\n\n\n\n\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for\n the specific language governing rights and limitations under the License.\n\n The Original Code is reddit.\n\n The Original Developer is the Initial Developer.  The Initial Developer of\n the Original Code is reddit Inc.\n\n All portions of the code written by reddit are Copyright (c) 2006-2015 reddit\n Inc. All Rights Reserved.\n\n\nimport collections\nimport random\nimport string\nimport unittest\n\nimport mock\n\nfrom r2.config.feature.state import FeatureState\nfrom r2.config.feature.world import World\nfrom r2.tests import RedditTestCase\n\n\nclass MockAccount(object):\n    def __init__(self, name, _fullname):\n        self.name = name\n        self._fullname = _fullname\n        _, _, _id = _fullname.partition(\"_\")\n        self._id = int(_id, 36)\n\ngary = MockAccount(name='gary', _fullname='t2_beef')\nall_uppercase = MockAccount(name='ALL_UPPERCASE', _fullname='t2_f00d')\n\nclass MockWorld(World):\n    def _make_state(self, config):\n         Mock by hand because _parse_config is called in __init__, so we\n         can't instantiate then update.\n        class MockState(FeatureState):\n            def _parse_config(*args, **kwargs):\n                return config\n        return MockState('test_state', self)\n\nclass TestFeatureBase(RedditTestCase):\n    _world = None\n     Append user-supplied error messages to the default output, rather than\n     overwriting it.\n    longMessage = True\n\nclass TestFeatureBase(RedditTestCase):\n     Append user-supplied error messages to the default output, rather than\n     overwriting it.\n    longMessage = True\n\n    def setUp(self):\n        self.world = MockWorld()\n        self.world.current_user = mock.Mock(return_value='')\n        self.world.current_subreddit = mock.Mock(return_value='')\n        self.world.current_loid = mock.Mock(return_value='')\n\n\nclass TestFeatureBase(RedditTestCase):\n     Append user-supplied error messages to the default output, rather than\n     overwriting it.\n    longMessage = True\n\n    def setUp(self):\n        super(TestFeatureBase, self).setUp()\n        self.world = MockWorld()\n        self.world.current_user = mock.Mock(return_value='')\n        self.world.current_subreddit = mock.Mock(return_value='')\n        self.world.current_loid = mock.Mock(return_value='')\n\n    @classmethod\n    def generate_loid(cls):\n        return ''.join(random.sample(string.letters + string.digits, 16))\n\n\nclass TestFeature(TestFeatureBase):\n\n    def _assert_fuzzy_percent_true(self, results, percent):\n        stats = collections.Counter(results)\n        total = sum(stats.values())\n         _roughly_ `percent` should have been `True`\n        diff = abs((float(stats[True]) / total) - (percent / 100.0))\n        self.assertTrue(diff < 0.1)\n\n    def test_enabled(self):\n        cfg = {'enabled': 'on'}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled())\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n    def test_disabled(self):\n        cfg = {'enabled': 'off'}\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled())\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n    def test_admin_enabled(self):\n        cfg = {'admin': True}\n        self.world.is_admin = mock.Mock(return_value=True)\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n    def test_admin_disabled(self):\n        cfg = {'admin': True}\n        self.world.is_admin = mock.Mock(return_value=False)\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n    def test_employee_enabled(self):\n        cfg = {'employee': True}\n        self.world.is_employee = mock.Mock(return_value=True)\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n    def test_employee_disabled(self):\n        cfg = {'employee': True}\n        self.world.is_employee = mock.Mock(return_value=False)\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n    def test_beta_enabled(self):\n        cfg = {'beta': True}\n        self.world.user_has_beta_enabled = mock.Mock(return_value=True)\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n    def test_beta_disabled(self):\n        cfg = {'beta': True}\n        self.world.user_has_beta_enabled = mock.Mock(return_value=False)\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n    def test_gold_enabled(self):\n        cfg = {'gold': True}\n        self.world.has_gold = mock.Mock(return_value=True)\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n    def test_gold_disabled(self):\n        cfg = {'gold': True}\n        self.world.has_gold = mock.Mock(return_value=False)\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n    def test_loggedin_enabled(self):\n        cfg = {'loggedin': True}\n        self.world.is_user_loggedin = mock.Mock(return_value=True)\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n    def test_loggedin_disabled(self):\n        cfg = {'loggedin': False}\n        self.world.is_user_loggedin = mock.Mock(return_value=True)\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n    def test_loggedout_enabled(self):\n        cfg = {'loggedout': True}\n        self.world.is_user_loggedin = mock.Mock(return_value=False)\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n    def test_loggedout_disabled(self):\n        cfg = {'loggedout': False}\n        self.world.is_user_loggedin = mock.Mock(return_value=False)\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n    def test_percent_loggedin(self):\n        num_users = 2000\n        users = []\n        for i in xrange(num_users):\n            users.append(MockAccount(name=str(i), _fullname=\"t2_%s\" % str(i)))\n\n        def simulate_percent_loggedin(wanted_percent):\n            cfg = {'percent_loggedin': wanted_percent}\n            self.world.is_user_loggedin = mock.Mock(return_value=True)\n            feature_state = self.world._make_state(cfg)\n            return (feature_state.is_enabled(x) for x in users)\n\n        self.assertFalse(any(simulate_percent_loggedin(0)))\n        self.assertTrue(all(simulate_percent_loggedin(100)))\n        self._assert_fuzzy_percent_true(simulate_percent_loggedin(25), 25)\n        self._assert_fuzzy_percent_true(simulate_percent_loggedin(10), 10)\n        self._assert_fuzzy_percent_true(simulate_percent_loggedin(50), 50)\n        self._assert_fuzzy_percent_true(simulate_percent_loggedin(99), 99)\n\n    def test_percent_loggedout(self):\n        num_users = 2000\n\n        def simulate_percent_loggedout(wanted_percent):\n            cfg = {'percent_loggedout': wanted_percent}\n            for i in xrange(num_users):\n                loid = self.generate_loid()\n                self.world.current_loid = mock.Mock(return_value=loid)\n                self.world.is_user_loggedin = mock.Mock(return_value=False)\n                feature_state = self.world._make_state(cfg)\n                yield feature_state.is_enabled()\n\n        self.assertFalse(any(simulate_percent_loggedout(0)))\n        self.assertTrue(all(simulate_percent_loggedout(100)))\n        self._assert_fuzzy_percent_true(simulate_percent_loggedout(25), 25)\n        self._assert_fuzzy_percent_true(simulate_percent_loggedout(10), 10)\n        self._assert_fuzzy_percent_true(simulate_percent_loggedout(50), 50)\n        self._assert_fuzzy_percent_true(simulate_percent_loggedout(99), 99)\n\n\n    def test_url_enabled(self):\n\n        cfg = {'url': 'test_state'}\n        self.world.url_features = mock.Mock(return_value={'test_state'})\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled())\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n        cfg = {'url': 'test_state'}\n        self.world.url_features = mock.Mock(return_value={'x', 'test_state'})\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled())\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n        cfg = {'url': {'test_state_a': 'a', 'test_state_b': 'b'}}\n        self.world.url_features = mock.Mock(return_value={'x', 'test_state_b'})\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled())\n        self.assertEqual(feature_state.variant(user=gary), 'b')\n\n    def test_url_disabled(self):\n\n        cfg = {'url': 'test_state'}\n        self.world.url_features = mock.Mock(return_value={})\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled())\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n        cfg = {'url': 'test_state'}\n        self.world.url_features = mock.Mock(return_value={'x'})\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled())\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n        cfg = {'url': {'test_state_a': 'a', 'test_state_b': 'b'}}\n        self.world.url_features = mock.Mock(return_value={'x'})\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled())\n\n        cfg = {'url': {'test_state_c1': 'control_1', 'test_state_c2': 'control_2'}}\n        self.world.url_features = mock.Mock(return_value={'x', 'test_state_c2'})\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled())\n\n    def test_user_in(self):\n        cfg = {'users': ['Gary']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n        cfg = {'users': ['ALL_UPPERCASE']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=all_uppercase))\n\n        cfg = {'users': ['dave', 'gary']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n    def test_user_not_in(self):\n        cfg = {'users': ['']}\n        featurestate = self.world._make_state(cfg)\n        self.assertFalse(featurestate.is_enabled(user=gary))\n\n        cfg = {'users': ['dave', 'joe']}\n        featurestate = self.world._make_state(cfg)\n        self.assertFalse(featurestate.is_enabled(user=gary))\n\n    def test_subreddit_in(self):\n        cfg = {'subreddits': ['WTF']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(subreddit='wtf'))\n\n        cfg = {'subreddits': ['wtf']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(subreddit='WTF'))\n\n        cfg = {'subreddits': ['aww', 'wtf']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(subreddit='wtf'))\n\n    def test_subreddit_not_in(self):\n        cfg = {'subreddits': []}\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(subreddit='wtf'))\n\n        cfg = {'subreddits': ['aww', 'wtfoobar']}\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(subreddit='wtf'))\n\n    def test_subdomain_in(self):\n        cfg = {'subdomains': ['BETA']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(subdomain='beta'))\n\n        cfg = {'subdomains': ['beta']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(subdomain='BETA'))\n\n        cfg = {'subdomains': ['www', 'beta']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(subdomain='beta'))\n\n    def test_subdomain_not_in(self):\n        cfg = {'subdomains': []}\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(subdomain='beta'))\n        self.assertFalse(feature_state.is_enabled(subdomain=''))\n\n        cfg = {'subdomains': ['www', 'betanauts']}\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(subdomain='beta'))\n\n    def test_multiple(self):\n         is_admin, globally off should still be False\n        cfg = {'enabled': 'off', 'admin': True}\n        self.world.is_admin = mock.Mock(return_value=True)\n        featurestate = self.world._make_state(cfg)\n        self.assertFalse(featurestate.is_enabled(user=gary))\n\n         globally on but not admin should still be True\n        cfg = {'enabled': 'on', 'admin': True}\n        self.world.is_admin = mock.Mock(return_value=False)\n        featurestate = self.world._make_state(cfg)\n        self.assertTrue(featurestate.is_enabled(user=gary))\n        self.assertTrue(featurestate.is_enabled())\n\n         no URL but admin should still be True\n        cfg = {'url': 'test_featurestate', 'admin': True}\n        self.world.url_features = mock.Mock(return_value={})\n        self.world.is_admin = mock.Mock(return_value=True)\n        featurestate = self.world._make_state(cfg)\n        self.assertTrue(featurestate.is_enabled(user=gary))\n", "comments": "   usr bin env python    the contents file subject common public attribution    license version 1 0  (the  license )  may use file except    compliance license  you may obtain copy license    http   code reddit com license  the license based mozilla public    license version 1 1  sections 14 15 added cover use    software computer network provide limited attribution    original developer  in addition  exhibit a modified consistent    exhibit b        software distributed license distributed  as is  basis     without warranty of any kind  either express implied  see license    specific language governing rights limitations license        the original code reddit        the original developer initial developer   the initial developer    original code reddit inc        all portions code written reddit copyright (c) 2006 2015 reddit    inc  all rights reserved                                                                                      mock hand  parse config called   init       instantiate update     append user supplied error messages default output  rather    overwriting     append user supplied error messages default output  rather    overwriting     append user supplied error messages default output  rather    overwriting      roughly   percent   true     admin  globally still false    globally admin still true    url admin still true ", "content": "#!/usr/bin/env python\n# The contents of this file are subject to the Common Public Attribution\n# License Version 1.0. (the \"License\"); you may not use this file except in\n# compliance with the License. You may obtain a copy of the License at\n# http://code.reddit.com/LICENSE. The License is based on the Mozilla Public\n# License Version 1.1, but Sections 14 and 15 have been added to cover use of\n# software over a computer network and provide for limited attribution for the\n# Original Developer. In addition, Exhibit A has been modified to be consistent\n# with Exhibit B.\n#\n# Software distributed under the License is distributed on an \"AS IS\" basis,\n# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for\n# the specific language governing rights and limitations under the License.\n#\n# The Original Code is reddit.\n#\n# The Original Developer is the Initial Developer.  The Initial Developer of\n# the Original Code is reddit Inc.\n#\n# All portions of the code written by reddit are Copyright (c) 2006-2015 reddit\n# Inc. All Rights Reserved.\n###############################################################################\n\nimport collections\nimport random\nimport string\nimport unittest\n\nimport mock\n\nfrom r2.config.feature.state import FeatureState\nfrom r2.config.feature.world import World\nfrom r2.tests import RedditTestCase\n\n\nclass MockAccount(object):\n    def __init__(self, name, _fullname):\n        self.name = name\n        self._fullname = _fullname\n        _, _, _id = _fullname.partition(\"_\")\n        self._id = int(_id, 36)\n\ngary = MockAccount(name='gary', _fullname='t2_beef')\nall_uppercase = MockAccount(name='ALL_UPPERCASE', _fullname='t2_f00d')\n\nclass MockWorld(World):\n    def _make_state(self, config):\n        # Mock by hand because _parse_config is called in __init__, so we\n        # can't instantiate then update.\n        class MockState(FeatureState):\n            def _parse_config(*args, **kwargs):\n                return config\n        return MockState('test_state', self)\n\nclass TestFeatureBase(RedditTestCase):\n    _world = None\n    # Append user-supplied error messages to the default output, rather than\n    # overwriting it.\n    longMessage = True\n\nclass TestFeatureBase(RedditTestCase):\n    # Append user-supplied error messages to the default output, rather than\n    # overwriting it.\n    longMessage = True\n\n    def setUp(self):\n        self.world = MockWorld()\n        self.world.current_user = mock.Mock(return_value='')\n        self.world.current_subreddit = mock.Mock(return_value='')\n        self.world.current_loid = mock.Mock(return_value='')\n\n\nclass TestFeatureBase(RedditTestCase):\n    # Append user-supplied error messages to the default output, rather than\n    # overwriting it.\n    longMessage = True\n\n    def setUp(self):\n        super(TestFeatureBase, self).setUp()\n        self.world = MockWorld()\n        self.world.current_user = mock.Mock(return_value='')\n        self.world.current_subreddit = mock.Mock(return_value='')\n        self.world.current_loid = mock.Mock(return_value='')\n\n    @classmethod\n    def generate_loid(cls):\n        return ''.join(random.sample(string.letters + string.digits, 16))\n\n\nclass TestFeature(TestFeatureBase):\n\n    def _assert_fuzzy_percent_true(self, results, percent):\n        stats = collections.Counter(results)\n        total = sum(stats.values())\n        # _roughly_ `percent` should have been `True`\n        diff = abs((float(stats[True]) / total) - (percent / 100.0))\n        self.assertTrue(diff < 0.1)\n\n    def test_enabled(self):\n        cfg = {'enabled': 'on'}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled())\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n    def test_disabled(self):\n        cfg = {'enabled': 'off'}\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled())\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n    def test_admin_enabled(self):\n        cfg = {'admin': True}\n        self.world.is_admin = mock.Mock(return_value=True)\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n    def test_admin_disabled(self):\n        cfg = {'admin': True}\n        self.world.is_admin = mock.Mock(return_value=False)\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n    def test_employee_enabled(self):\n        cfg = {'employee': True}\n        self.world.is_employee = mock.Mock(return_value=True)\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n    def test_employee_disabled(self):\n        cfg = {'employee': True}\n        self.world.is_employee = mock.Mock(return_value=False)\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n    def test_beta_enabled(self):\n        cfg = {'beta': True}\n        self.world.user_has_beta_enabled = mock.Mock(return_value=True)\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n    def test_beta_disabled(self):\n        cfg = {'beta': True}\n        self.world.user_has_beta_enabled = mock.Mock(return_value=False)\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n    def test_gold_enabled(self):\n        cfg = {'gold': True}\n        self.world.has_gold = mock.Mock(return_value=True)\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n    def test_gold_disabled(self):\n        cfg = {'gold': True}\n        self.world.has_gold = mock.Mock(return_value=False)\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n    def test_loggedin_enabled(self):\n        cfg = {'loggedin': True}\n        self.world.is_user_loggedin = mock.Mock(return_value=True)\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n    def test_loggedin_disabled(self):\n        cfg = {'loggedin': False}\n        self.world.is_user_loggedin = mock.Mock(return_value=True)\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n    def test_loggedout_enabled(self):\n        cfg = {'loggedout': True}\n        self.world.is_user_loggedin = mock.Mock(return_value=False)\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n    def test_loggedout_disabled(self):\n        cfg = {'loggedout': False}\n        self.world.is_user_loggedin = mock.Mock(return_value=False)\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n    def test_percent_loggedin(self):\n        num_users = 2000\n        users = []\n        for i in xrange(num_users):\n            users.append(MockAccount(name=str(i), _fullname=\"t2_%s\" % str(i)))\n\n        def simulate_percent_loggedin(wanted_percent):\n            cfg = {'percent_loggedin': wanted_percent}\n            self.world.is_user_loggedin = mock.Mock(return_value=True)\n            feature_state = self.world._make_state(cfg)\n            return (feature_state.is_enabled(x) for x in users)\n\n        self.assertFalse(any(simulate_percent_loggedin(0)))\n        self.assertTrue(all(simulate_percent_loggedin(100)))\n        self._assert_fuzzy_percent_true(simulate_percent_loggedin(25), 25)\n        self._assert_fuzzy_percent_true(simulate_percent_loggedin(10), 10)\n        self._assert_fuzzy_percent_true(simulate_percent_loggedin(50), 50)\n        self._assert_fuzzy_percent_true(simulate_percent_loggedin(99), 99)\n\n    def test_percent_loggedout(self):\n        num_users = 2000\n\n        def simulate_percent_loggedout(wanted_percent):\n            cfg = {'percent_loggedout': wanted_percent}\n            for i in xrange(num_users):\n                loid = self.generate_loid()\n                self.world.current_loid = mock.Mock(return_value=loid)\n                self.world.is_user_loggedin = mock.Mock(return_value=False)\n                feature_state = self.world._make_state(cfg)\n                yield feature_state.is_enabled()\n\n        self.assertFalse(any(simulate_percent_loggedout(0)))\n        self.assertTrue(all(simulate_percent_loggedout(100)))\n        self._assert_fuzzy_percent_true(simulate_percent_loggedout(25), 25)\n        self._assert_fuzzy_percent_true(simulate_percent_loggedout(10), 10)\n        self._assert_fuzzy_percent_true(simulate_percent_loggedout(50), 50)\n        self._assert_fuzzy_percent_true(simulate_percent_loggedout(99), 99)\n\n\n    def test_url_enabled(self):\n\n        cfg = {'url': 'test_state'}\n        self.world.url_features = mock.Mock(return_value={'test_state'})\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled())\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n        cfg = {'url': 'test_state'}\n        self.world.url_features = mock.Mock(return_value={'x', 'test_state'})\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled())\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n        cfg = {'url': {'test_state_a': 'a', 'test_state_b': 'b'}}\n        self.world.url_features = mock.Mock(return_value={'x', 'test_state_b'})\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled())\n        self.assertEqual(feature_state.variant(user=gary), 'b')\n\n    def test_url_disabled(self):\n\n        cfg = {'url': 'test_state'}\n        self.world.url_features = mock.Mock(return_value={})\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled())\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n        cfg = {'url': 'test_state'}\n        self.world.url_features = mock.Mock(return_value={'x'})\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled())\n        self.assertFalse(feature_state.is_enabled(user=gary))\n\n        cfg = {'url': {'test_state_a': 'a', 'test_state_b': 'b'}}\n        self.world.url_features = mock.Mock(return_value={'x'})\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled())\n\n        cfg = {'url': {'test_state_c1': 'control_1', 'test_state_c2': 'control_2'}}\n        self.world.url_features = mock.Mock(return_value={'x', 'test_state_c2'})\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled())\n\n    def test_user_in(self):\n        cfg = {'users': ['Gary']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n        cfg = {'users': ['ALL_UPPERCASE']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=all_uppercase))\n\n        cfg = {'users': ['dave', 'gary']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(user=gary))\n\n    def test_user_not_in(self):\n        cfg = {'users': ['']}\n        featurestate = self.world._make_state(cfg)\n        self.assertFalse(featurestate.is_enabled(user=gary))\n\n        cfg = {'users': ['dave', 'joe']}\n        featurestate = self.world._make_state(cfg)\n        self.assertFalse(featurestate.is_enabled(user=gary))\n\n    def test_subreddit_in(self):\n        cfg = {'subreddits': ['WTF']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(subreddit='wtf'))\n\n        cfg = {'subreddits': ['wtf']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(subreddit='WTF'))\n\n        cfg = {'subreddits': ['aww', 'wtf']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(subreddit='wtf'))\n\n    def test_subreddit_not_in(self):\n        cfg = {'subreddits': []}\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(subreddit='wtf'))\n\n        cfg = {'subreddits': ['aww', 'wtfoobar']}\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(subreddit='wtf'))\n\n    def test_subdomain_in(self):\n        cfg = {'subdomains': ['BETA']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(subdomain='beta'))\n\n        cfg = {'subdomains': ['beta']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(subdomain='BETA'))\n\n        cfg = {'subdomains': ['www', 'beta']}\n        feature_state = self.world._make_state(cfg)\n        self.assertTrue(feature_state.is_enabled(subdomain='beta'))\n\n    def test_subdomain_not_in(self):\n        cfg = {'subdomains': []}\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(subdomain='beta'))\n        self.assertFalse(feature_state.is_enabled(subdomain=''))\n\n        cfg = {'subdomains': ['www', 'betanauts']}\n        feature_state = self.world._make_state(cfg)\n        self.assertFalse(feature_state.is_enabled(subdomain='beta'))\n\n    def test_multiple(self):\n        # is_admin, globally off should still be False\n        cfg = {'enabled': 'off', 'admin': True}\n        self.world.is_admin = mock.Mock(return_value=True)\n        featurestate = self.world._make_state(cfg)\n        self.assertFalse(featurestate.is_enabled(user=gary))\n\n        # globally on but not admin should still be True\n        cfg = {'enabled': 'on', 'admin': True}\n        self.world.is_admin = mock.Mock(return_value=False)\n        featurestate = self.world._make_state(cfg)\n        self.assertTrue(featurestate.is_enabled(user=gary))\n        self.assertTrue(featurestate.is_enabled())\n\n        # no URL but admin should still be True\n        cfg = {'url': 'test_featurestate', 'admin': True}\n        self.world.url_features = mock.Mock(return_value={})\n        self.world.is_admin = mock.Mock(return_value=True)\n        featurestate = self.world._make_state(cfg)\n        self.assertTrue(featurestate.is_enabled(user=gary))\n", "description": "historical code from reddit.com", "file_name": "feature_test.py", "id": "de705a5bb9bc5f9186471baa4a0b4c8d", "language": "Python", "project_name": "reddit", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/reddit-archive-reddit/reddit-archive-reddit-753b174/r2/r2/tests/unit/config/feature_test.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:55:36Z", "url": "https://github.com/reddit-archive/reddit", "wiki": true}