{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\nimport random\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n)\nfrom ..utils import (\n    ExtractorError,\n)\n\n\nclass EightTracksIE(InfoExtractor):\n    IE_NAME = '8tracks'\n    _VALID_URL = r'https?://8tracks\\.com/(?P<user>[^/]+)/(?P<id>[^/\n    _TEST = {\n        'name': 'EightTracks',\n        'url': 'http://8tracks.com/ytdl/youtube-dl-test-tracks-a',\n        'info_dict': {\n            'id': '1336550',\n            'display_id': 'youtube-dl-test-tracks-a',\n            'description': \"test chars:  \\\"'/\\\\\u00e4\u21ad\",\n            'title': \"youtube-dl test tracks \\\"'/\\\\\u00e4\u21ad<>\",\n        },\n        'playlist': [\n            {\n                'md5': '96ce57f24389fc8734ce47f4c1abcc55',\n                'info_dict': {\n                    'id': '11885610',\n                    'ext': 'm4a',\n                    'title': \"youtue-dl project<>\\\"' - youtube-dl test track 1 \\\"'/\\\\\\u00e4\\u21ad\",\n                    'uploader_id': 'ytdl'\n                }\n            },\n            {\n                'md5': '4ab26f05c1f7291ea460a3920be8021f',\n                'info_dict': {\n                    'id': '11885608',\n                    'ext': 'm4a',\n                    'title': \"youtube-dl project - youtube-dl test track 2 \\\"'/\\\\\\u00e4\\u21ad\",\n                    'uploader_id': 'ytdl'\n                }\n            },\n            {\n                'md5': 'd30b5b5f74217410f4689605c35d1fd7',\n                'info_dict': {\n                    'id': '11885679',\n                    'ext': 'm4a',\n                    'title': \"youtube-dl project as well - youtube-dl test track 3 \\\"'/\\\\\\u00e4\\u21ad\",\n                    'uploader_id': 'ytdl'\n                }\n            },\n            {\n                'md5': '4eb0a669317cd725f6bbd336a29f923a',\n                'info_dict': {\n                    'id': '11885680',\n                    'ext': 'm4a',\n                    'title': \"youtube-dl project as well - youtube-dl test track 4 \\\"'/\\\\\\u00e4\\u21ad\",\n                    'uploader_id': 'ytdl'\n                }\n            },\n            {\n                'md5': '1893e872e263a2705558d1d319ad19e8',\n                'info_dict': {\n                    'id': '11885682',\n                    'ext': 'm4a',\n                    'title': \"PH - youtube-dl test track 5 \\\"'/\\\\\\u00e4\\u21ad\",\n                    'uploader_id': 'ytdl'\n                }\n            },\n            {\n                'md5': 'b673c46f47a216ab1741ae8836af5899',\n                'info_dict': {\n                    'id': '11885683',\n                    'ext': 'm4a',\n                    'title': \"PH - youtube-dl test track 6 \\\"'/\\\\\\u00e4\\u21ad\",\n                    'uploader_id': 'ytdl'\n                }\n            },\n            {\n                'md5': '1d74534e95df54986da7f5abf7d842b7',\n                'info_dict': {\n                    'id': '11885684',\n                    'ext': 'm4a',\n                    'title': \"phihag - youtube-dl test track 7 \\\"'/\\\\\\u00e4\\u21ad\",\n                    'uploader_id': 'ytdl'\n                }\n            },\n            {\n                'md5': 'f081f47af8f6ae782ed131d38b9cd1c0',\n                'info_dict': {\n                    'id': '11885685',\n                    'ext': 'm4a',\n                    'title': \"phihag - youtube-dl test track 8 \\\"'/\\\\\\u00e4\\u21ad\",\n                    'uploader_id': 'ytdl'\n                }\n            }\n        ]\n    }\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        data = self._parse_json(\n            self._search_regex(\n                r\"(?s)PAGE\\.mix\\s*=\\s*({.+?});\\n\", webpage, 'trax information'),\n            playlist_id)\n\n        session = str(random.randint(0, 1000000000))\n        mix_id = data['id']\n        track_count = data['tracks_count']\n        duration = data['duration']\n        avg_song_duration = float(duration) / track_count\n        \n        if avg_song_duration <= 0:\n            avg_song_duration = 300\n        first_url = 'http://8tracks.com/sets/%s/play?player=sm&mix_id=%s&format=jsonh' % (session, mix_id)\n        next_url = first_url\n        entries = []\n\n        for i in range(track_count):\n            api_json = None\n            download_tries = 0\n\n            while api_json is None:\n                try:\n                    api_json = self._download_webpage(\n                        next_url, playlist_id,\n                        note='Downloading song information %d/%d' % (i + 1, track_count),\n                        errnote='Failed to download song information')\n                except ExtractorError:\n                    if download_tries > 3:\n                        raise\n                    else:\n                        download_tries += 1\n                        self._sleep(avg_song_duration, playlist_id)\n\n            api_data = json.loads(api_json)\n            track_data = api_data['set']['track']\n            info = {\n                'id': compat_str(track_data['id']),\n                'url': track_data['track_file_stream_url'],\n                'title': track_data['performer'] + ' - ' + track_data['name'],\n                'raw_title': track_data['name'],\n                'uploader_id': data['user']['login'],\n                'ext': 'm4a',\n            }\n            entries.append(info)\n\n            next_url = 'http://8tracks.com/sets/%s/next?player=sm&mix_id=%s&format=jsonh&track_id=%s' % (\n                session, mix_id, track_data['id'])\n        return {\n            '_type': 'playlist',\n            'entries': entries,\n            'id': compat_str(mix_id),\n            'display_id': playlist_id,\n            'title': data.get('name'),\n            'description': data.get('description'),\n        }\n", "comments": "# coding: utf-8\n#]+)(?:#.*)?$'\n# duration is sometimes negative, use predefined avg duration\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\nimport random\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n)\nfrom ..utils import (\n    ExtractorError,\n)\n\n\nclass EightTracksIE(InfoExtractor):\n    IE_NAME = '8tracks'\n    _VALID_URL = r'https?://8tracks\\.com/(?P<user>[^/]+)/(?P<id>[^/#]+)(?:#.*)?$'\n    _TEST = {\n        'name': 'EightTracks',\n        'url': 'http://8tracks.com/ytdl/youtube-dl-test-tracks-a',\n        'info_dict': {\n            'id': '1336550',\n            'display_id': 'youtube-dl-test-tracks-a',\n            'description': \"test chars:  \\\"'/\\\\\u00e4\u21ad\",\n            'title': \"youtube-dl test tracks \\\"'/\\\\\u00e4\u21ad<>\",\n        },\n        'playlist': [\n            {\n                'md5': '96ce57f24389fc8734ce47f4c1abcc55',\n                'info_dict': {\n                    'id': '11885610',\n                    'ext': 'm4a',\n                    'title': \"youtue-dl project<>\\\"' - youtube-dl test track 1 \\\"'/\\\\\\u00e4\\u21ad\",\n                    'uploader_id': 'ytdl'\n                }\n            },\n            {\n                'md5': '4ab26f05c1f7291ea460a3920be8021f',\n                'info_dict': {\n                    'id': '11885608',\n                    'ext': 'm4a',\n                    'title': \"youtube-dl project - youtube-dl test track 2 \\\"'/\\\\\\u00e4\\u21ad\",\n                    'uploader_id': 'ytdl'\n                }\n            },\n            {\n                'md5': 'd30b5b5f74217410f4689605c35d1fd7',\n                'info_dict': {\n                    'id': '11885679',\n                    'ext': 'm4a',\n                    'title': \"youtube-dl project as well - youtube-dl test track 3 \\\"'/\\\\\\u00e4\\u21ad\",\n                    'uploader_id': 'ytdl'\n                }\n            },\n            {\n                'md5': '4eb0a669317cd725f6bbd336a29f923a',\n                'info_dict': {\n                    'id': '11885680',\n                    'ext': 'm4a',\n                    'title': \"youtube-dl project as well - youtube-dl test track 4 \\\"'/\\\\\\u00e4\\u21ad\",\n                    'uploader_id': 'ytdl'\n                }\n            },\n            {\n                'md5': '1893e872e263a2705558d1d319ad19e8',\n                'info_dict': {\n                    'id': '11885682',\n                    'ext': 'm4a',\n                    'title': \"PH - youtube-dl test track 5 \\\"'/\\\\\\u00e4\\u21ad\",\n                    'uploader_id': 'ytdl'\n                }\n            },\n            {\n                'md5': 'b673c46f47a216ab1741ae8836af5899',\n                'info_dict': {\n                    'id': '11885683',\n                    'ext': 'm4a',\n                    'title': \"PH - youtube-dl test track 6 \\\"'/\\\\\\u00e4\\u21ad\",\n                    'uploader_id': 'ytdl'\n                }\n            },\n            {\n                'md5': '1d74534e95df54986da7f5abf7d842b7',\n                'info_dict': {\n                    'id': '11885684',\n                    'ext': 'm4a',\n                    'title': \"phihag - youtube-dl test track 7 \\\"'/\\\\\\u00e4\\u21ad\",\n                    'uploader_id': 'ytdl'\n                }\n            },\n            {\n                'md5': 'f081f47af8f6ae782ed131d38b9cd1c0',\n                'info_dict': {\n                    'id': '11885685',\n                    'ext': 'm4a',\n                    'title': \"phihag - youtube-dl test track 8 \\\"'/\\\\\\u00e4\\u21ad\",\n                    'uploader_id': 'ytdl'\n                }\n            }\n        ]\n    }\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        data = self._parse_json(\n            self._search_regex(\n                r\"(?s)PAGE\\.mix\\s*=\\s*({.+?});\\n\", webpage, 'trax information'),\n            playlist_id)\n\n        session = str(random.randint(0, 1000000000))\n        mix_id = data['id']\n        track_count = data['tracks_count']\n        duration = data['duration']\n        avg_song_duration = float(duration) / track_count\n        # duration is sometimes negative, use predefined avg duration\n        if avg_song_duration <= 0:\n            avg_song_duration = 300\n        first_url = 'http://8tracks.com/sets/%s/play?player=sm&mix_id=%s&format=jsonh' % (session, mix_id)\n        next_url = first_url\n        entries = []\n\n        for i in range(track_count):\n            api_json = None\n            download_tries = 0\n\n            while api_json is None:\n                try:\n                    api_json = self._download_webpage(\n                        next_url, playlist_id,\n                        note='Downloading song information %d/%d' % (i + 1, track_count),\n                        errnote='Failed to download song information')\n                except ExtractorError:\n                    if download_tries > 3:\n                        raise\n                    else:\n                        download_tries += 1\n                        self._sleep(avg_song_duration, playlist_id)\n\n            api_data = json.loads(api_json)\n            track_data = api_data['set']['track']\n            info = {\n                'id': compat_str(track_data['id']),\n                'url': track_data['track_file_stream_url'],\n                'title': track_data['performer'] + ' - ' + track_data['name'],\n                'raw_title': track_data['name'],\n                'uploader_id': data['user']['login'],\n                'ext': 'm4a',\n            }\n            entries.append(info)\n\n            next_url = 'http://8tracks.com/sets/%s/next?player=sm&mix_id=%s&format=jsonh&track_id=%s' % (\n                session, mix_id, track_data['id'])\n        return {\n            '_type': 'playlist',\n            'entries': entries,\n            'id': compat_str(mix_id),\n            'display_id': playlist_id,\n            'title': data.get('name'),\n            'description': data.get('description'),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "eighttracks.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/eighttracks.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}