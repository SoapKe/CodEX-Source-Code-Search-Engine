{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo import api, fields, models, tools\n\n\nclass ReportStockForecat(models.Model):\n    _name = 'report.stock.forecast'\n    _auto = False\n\n    date = fields.Date(string='Date')\n    product_id = fields.Many2one('product.product', string='Product', readonly=True)\n    product_tmpl_id = fields.Many2one('product.template', string='Product Template', related='product_id.product_tmpl_id', readonly=True)\n    cumulative_quantity = fields.Float(string='Cumulative Quantity', readonly=True)\n    quantity = fields.Float(readonly=True)\n\n    @api.model_cr\n    def init(self):\n        tools.drop_view_if_exists(self._cr, 'report_stock_forecast')\n        self._cr.execute(\"\"\"CREATE or REPLACE VIEW report_stock_forecast AS (SELECT\n        MIN(id) as id,\n        product_id as product_id,\n        date as date,\n        sum(product_qty) AS quantity,\n        sum(sum(product_qty)) OVER (PARTITION BY product_id ORDER BY date) AS cumulative_quantity\n        FROM\n        (SELECT\n        MIN(id) as id,\n        MAIN.product_id as product_id,\n        SUB.date as date,\n        CASE WHEN MAIN.date = SUB.date THEN sum(MAIN.product_qty) ELSE 0 END as product_qty\n        FROM\n        (SELECT\n            MIN(sq.id) as id,\n            sq.product_id,\n            date_trunc('week', to_date(to_char(CURRENT_DATE, 'YYYY/MM/DD'), 'YYYY/MM/DD')) as date,\n            SUM(sq.quantity) AS product_qty\n            FROM\n            stock_quant as sq\n            LEFT JOIN\n            product_product ON product_product.id = sq.product_id\n            LEFT JOIN\n            stock_location location_id ON sq.location_id = location_id.id\n            WHERE\n            location_id.usage = 'internal'\n            GROUP BY date, sq.product_id\n            UNION ALL\n            SELECT\n            MIN(-sm.id) as id,\n            sm.product_id,\n            CASE WHEN sm.date_expected > CURRENT_DATE\n            THEN date_trunc('week', to_date(to_char(sm.date_expected, 'YYYY/MM/DD'), 'YYYY/MM/DD'))\n            ELSE date_trunc('week', to_date(to_char(CURRENT_DATE, 'YYYY/MM/DD'), 'YYYY/MM/DD')) END\n            AS date,\n            SUM(sm.product_qty) AS product_qty\n            FROM\n               stock_move as sm\n            LEFT JOIN\n               product_product ON product_product.id = sm.product_id\n            LEFT JOIN\n            stock_location dest_location ON sm.location_dest_id = dest_location.id\n            LEFT JOIN\n            stock_location source_location ON sm.location_id = source_location.id\n            WHERE\n            sm.state IN ('confirmed','assigned','waiting') and\n            source_location.usage != 'internal' and dest_location.usage = 'internal'\n            GROUP BY sm.date_expected,sm.product_id\n            UNION ALL\n            SELECT\n                MIN(-sm.id) as id,\n                sm.product_id,\n                CASE WHEN sm.date_expected > CURRENT_DATE\n                    THEN date_trunc('week', to_date(to_char(sm.date_expected, 'YYYY/MM/DD'), 'YYYY/MM/DD'))\n                    ELSE date_trunc('week', to_date(to_char(CURRENT_DATE, 'YYYY/MM/DD'), 'YYYY/MM/DD')) END\n                AS date,\n                SUM(-(sm.product_qty)) AS product_qty\n            FROM\n               stock_move as sm\n            LEFT JOIN\n               product_product ON product_product.id = sm.product_id\n            LEFT JOIN\n               stock_location source_location ON sm.location_id = source_location.id\n            LEFT JOIN\n               stock_location dest_location ON sm.location_dest_id = dest_location.id\n            WHERE\n                sm.state IN ('confirmed','assigned','waiting') and\n            source_location.usage = 'internal' and dest_location.usage != 'internal'\n            GROUP BY sm.date_expected,sm.product_id)\n         as MAIN\n     LEFT JOIN\n     (SELECT DISTINCT date\n      FROM\n      (\n             SELECT date_trunc('week', CURRENT_DATE) AS DATE\n             UNION ALL\n             SELECT date_trunc('week', to_date(to_char(sm.date_expected, 'YYYY/MM/DD'), 'YYYY/MM/DD')) AS date\n             FROM stock_move sm\n             LEFT JOIN\n             stock_location source_location ON sm.location_id = source_location.id\n             LEFT JOIN\n             stock_location dest_location ON sm.location_dest_id = dest_location.id\n             WHERE\n             sm.state IN ('confirmed','assigned','waiting') and sm.date_expected > CURRENT_DATE and\n             ((dest_location.usage = 'internal' AND source_location.usage != 'internal')\n              or (source_location.usage = 'internal' AND dest_location.usage != 'internal'))) AS DATE_SEARCH)\n             SUB ON (SUB.date IS NOT NULL)\n    GROUP BY MAIN.product_id,SUB.date, MAIN.date\n    ) AS FINAL\n    GROUP BY product_id,date)\"\"\")\n", "comments": "   create replace view report stock forecast as (select         min(id) id          product id product id          date date          sum(product qty) as quantity          sum(sum(product qty)) over (partition by product id order by date) as cumulative quantity         from         (select         min(id) id          main product id product id          sub date date          case when main date   sub date then sum(main product qty) else 0 end product qty         from         (select             min(sq id) id              sq product id              date trunc( week   date(to char(current date   yyyy mm dd )   yyyy mm dd )) date              sum(sq quantity) as product qty             from             stock quant sq             left join             product product on product product id   sq product id             left join             stock location location id on sq location id   location id id             where             location id usage    internal              group by date  sq product id             union all             select             min( sm id) id              sm product id              case when sm date expected   current date             then date trunc( week   date(to char(sm date expected   yyyy mm dd )   yyyy mm dd ))             else date trunc( week   date(to char(current date   yyyy mm dd )   yyyy mm dd )) end             as date              sum(sm product qty) as product qty             from                stock move sm             left join                product product on product product id   sm product id             left join             stock location dest location on sm location dest id   dest location id             left join             stock location source location on sm location id   source location id             where             sm state in ( confirmed   assigned   waiting )             source location usage     internal  dest location usage    internal              group by sm date expected sm product id             union all             select                 min( sm id) id                  sm product id                  case when sm date expected   current date                     then date trunc( week   date(to char(sm date expected   yyyy mm dd )   yyyy mm dd ))                     else date trunc( week   date(to char(current date   yyyy mm dd )   yyyy mm dd )) end                 as date                  sum( (sm product qty)) as product qty             from                stock move sm             left join                product product on product product id   sm product id             left join                stock location source location on sm location id   source location id             left join                stock location dest location on sm location dest id   dest location id             where                 sm state in ( confirmed   assigned   waiting )             source location usage    internal  dest location usage     internal              group by sm date expected sm product id)          main      left join      (select distinct date       from       (              select date trunc( week   current date) as date              union all              select date trunc( week   date(to char(sm date expected   yyyy mm dd )   yyyy mm dd )) as date              from stock move sm              left join              stock location source location on sm location id   source location id              left join              stock location dest location on sm location dest id   dest location id              where              sm state in ( confirmed   assigned   waiting ) sm date expected   current date              ((dest location usage    internal  and source location usage     internal )               (source location usage    internal  and dest location usage     internal ))) as date search)              sub on (sub date is not null)     group by main product id sub date  main date     ) as final     group by product id date)           coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo import api, fields, models, tools\n\n\nclass ReportStockForecat(models.Model):\n    _name = 'report.stock.forecast'\n    _auto = False\n\n    date = fields.Date(string='Date')\n    product_id = fields.Many2one('product.product', string='Product', readonly=True)\n    product_tmpl_id = fields.Many2one('product.template', string='Product Template', related='product_id.product_tmpl_id', readonly=True)\n    cumulative_quantity = fields.Float(string='Cumulative Quantity', readonly=True)\n    quantity = fields.Float(readonly=True)\n\n    @api.model_cr\n    def init(self):\n        tools.drop_view_if_exists(self._cr, 'report_stock_forecast')\n        self._cr.execute(\"\"\"CREATE or REPLACE VIEW report_stock_forecast AS (SELECT\n        MIN(id) as id,\n        product_id as product_id,\n        date as date,\n        sum(product_qty) AS quantity,\n        sum(sum(product_qty)) OVER (PARTITION BY product_id ORDER BY date) AS cumulative_quantity\n        FROM\n        (SELECT\n        MIN(id) as id,\n        MAIN.product_id as product_id,\n        SUB.date as date,\n        CASE WHEN MAIN.date = SUB.date THEN sum(MAIN.product_qty) ELSE 0 END as product_qty\n        FROM\n        (SELECT\n            MIN(sq.id) as id,\n            sq.product_id,\n            date_trunc('week', to_date(to_char(CURRENT_DATE, 'YYYY/MM/DD'), 'YYYY/MM/DD')) as date,\n            SUM(sq.quantity) AS product_qty\n            FROM\n            stock_quant as sq\n            LEFT JOIN\n            product_product ON product_product.id = sq.product_id\n            LEFT JOIN\n            stock_location location_id ON sq.location_id = location_id.id\n            WHERE\n            location_id.usage = 'internal'\n            GROUP BY date, sq.product_id\n            UNION ALL\n            SELECT\n            MIN(-sm.id) as id,\n            sm.product_id,\n            CASE WHEN sm.date_expected > CURRENT_DATE\n            THEN date_trunc('week', to_date(to_char(sm.date_expected, 'YYYY/MM/DD'), 'YYYY/MM/DD'))\n            ELSE date_trunc('week', to_date(to_char(CURRENT_DATE, 'YYYY/MM/DD'), 'YYYY/MM/DD')) END\n            AS date,\n            SUM(sm.product_qty) AS product_qty\n            FROM\n               stock_move as sm\n            LEFT JOIN\n               product_product ON product_product.id = sm.product_id\n            LEFT JOIN\n            stock_location dest_location ON sm.location_dest_id = dest_location.id\n            LEFT JOIN\n            stock_location source_location ON sm.location_id = source_location.id\n            WHERE\n            sm.state IN ('confirmed','assigned','waiting') and\n            source_location.usage != 'internal' and dest_location.usage = 'internal'\n            GROUP BY sm.date_expected,sm.product_id\n            UNION ALL\n            SELECT\n                MIN(-sm.id) as id,\n                sm.product_id,\n                CASE WHEN sm.date_expected > CURRENT_DATE\n                    THEN date_trunc('week', to_date(to_char(sm.date_expected, 'YYYY/MM/DD'), 'YYYY/MM/DD'))\n                    ELSE date_trunc('week', to_date(to_char(CURRENT_DATE, 'YYYY/MM/DD'), 'YYYY/MM/DD')) END\n                AS date,\n                SUM(-(sm.product_qty)) AS product_qty\n            FROM\n               stock_move as sm\n            LEFT JOIN\n               product_product ON product_product.id = sm.product_id\n            LEFT JOIN\n               stock_location source_location ON sm.location_id = source_location.id\n            LEFT JOIN\n               stock_location dest_location ON sm.location_dest_id = dest_location.id\n            WHERE\n                sm.state IN ('confirmed','assigned','waiting') and\n            source_location.usage = 'internal' and dest_location.usage != 'internal'\n            GROUP BY sm.date_expected,sm.product_id)\n         as MAIN\n     LEFT JOIN\n     (SELECT DISTINCT date\n      FROM\n      (\n             SELECT date_trunc('week', CURRENT_DATE) AS DATE\n             UNION ALL\n             SELECT date_trunc('week', to_date(to_char(sm.date_expected, 'YYYY/MM/DD'), 'YYYY/MM/DD')) AS date\n             FROM stock_move sm\n             LEFT JOIN\n             stock_location source_location ON sm.location_id = source_location.id\n             LEFT JOIN\n             stock_location dest_location ON sm.location_dest_id = dest_location.id\n             WHERE\n             sm.state IN ('confirmed','assigned','waiting') and sm.date_expected > CURRENT_DATE and\n             ((dest_location.usage = 'internal' AND source_location.usage != 'internal')\n              or (source_location.usage = 'internal' AND dest_location.usage != 'internal'))) AS DATE_SEARCH)\n             SUB ON (SUB.date IS NOT NULL)\n    GROUP BY MAIN.product_id,SUB.date, MAIN.date\n    ) AS FINAL\n    GROUP BY product_id,date)\"\"\")\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "report_stock_forecast.py", "id": "656ed09c26da29ab7a8d440fbf5082fe", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/stock/report/report_stock_forecast.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}