{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    update_url_query,\n)\n\n\nclass ZingMp3BaseInfoExtractor(InfoExtractor):\n\n    def _extract_item(self, item, page_type, fatal=True):\n        error_message = item.get('msg')\n        if error_message:\n            if not fatal:\n                return\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, error_message),\n                expected=True)\n\n        formats = []\n        for quality, source_url in zip(item.get('qualities') or item.get('quality', []), item.get('source_list') or item.get('source', [])):\n            if not source_url or source_url == 'require vip':\n                continue\n            if not re.match(r'https?://', source_url):\n                source_url = '//' + source_url\n            source_url = self._proto_relative_url(source_url, 'http:')\n            quality_num = int_or_none(quality)\n            f = {\n                'format_id': quality,\n                'url': source_url,\n            }\n            if page_type == 'video':\n                f.update({\n                    'height': quality_num,\n                    'ext': 'mp4',\n                })\n            else:\n                f.update({\n                    'abr': quality_num,\n                    'ext': 'mp3',\n                })\n            formats.append(f)\n\n        cover = item.get('cover')\n\n        return {\n            'title': (item.get('name') or item.get('title')).strip(),\n            'formats': formats,\n            'thumbnail': 'http:/' + cover if cover else None,\n            'artist': item.get('artist'),\n        }\n\n    def _extract_player_json(self, player_json_url, id, page_type, playlist_title=None):\n        player_json = self._download_json(player_json_url, id, 'Downloading Player JSON')\n        items = player_json['data']\n        if 'item' in items:\n            items = items['item']\n\n        if len(items) == 1:\n            \n            data = self._extract_item(items[0], page_type)\n            data['id'] = id\n\n            return data\n        else:\n            \n            entries = []\n\n            for i, item in enumerate(items, 1):\n                entry = self._extract_item(item, page_type, fatal=False)\n                if not entry:\n                    continue\n                entry['id'] = '%s-%d' % (id, i)\n                entries.append(entry)\n\n            return {\n                '_type': 'playlist',\n                'id': id,\n                'title': playlist_title,\n                'entries': entries,\n            }\n\n\nclass ZingMp3IE(ZingMp3BaseInfoExtractor):\n    _VALID_URL = r'https?://mp3\\.zing\\.vn/(?:bai-hat|album|playlist|video-clip)/[^/]+/(?P<id>\\w+)\\.html'\n    _TESTS = [{\n        'url': 'http://mp3.zing.vn/bai-hat/Xa-Mai-Xa-Bao-Thy/ZWZB9WAB.html',\n        'md5': 'ead7ae13693b3205cbc89536a077daed',\n        'info_dict': {\n            'id': 'ZWZB9WAB',\n            'title': 'Xa M\u00e3i Xa',\n            'ext': 'mp3',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n    }, {\n        'url': 'http://mp3.zing.vn/video-clip/Let-It-Go-Frozen-OST-Sungha-Jung/ZW6BAEA0.html',\n        'md5': '870295a9cd8045c0e15663565902618d',\n        'info_dict': {\n            'id': 'ZW6BAEA0',\n            'title': 'Let It Go (Frozen OST)',\n            'ext': 'mp4',\n        },\n    }, {\n        'url': 'http://mp3.zing.vn/album/Lau-Dai-Tinh-Ai-Bang-Kieu-Minh-Tuyet/ZWZBWDAF.html',\n        'info_dict': {\n            '_type': 'playlist',\n            'id': 'ZWZBWDAF',\n            'title': 'L\u00e2u \u0110\u00e0i T\u00ecnh \u00c1i - B\u1eb1ng Ki\u1ec1u,Minh Tuy\u1ebft | Album 320 lossless',\n        },\n        'playlist_count': 10,\n        'skip': 'removed at the request of the owner',\n    }, {\n        'url': 'http://mp3.zing.vn/playlist/Duong-Hong-Loan-apollobee/IWCAACCB.html',\n        'only_matching': True,\n    }]\n    IE_NAME = 'zingmp3'\n    IE_DESC = 'mp3.zing.vn'\n\n    def _real_extract(self, url):\n        page_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, page_id)\n\n        player_json_url = self._search_regex([\n            r'data-xml=\"([^\"]+)',\n            r'&amp;xmlURL=([^&]+)&'\n        ], webpage, 'player xml url')\n\n        playlist_title = None\n        page_type = self._search_regex(r'/(?:html5)?xml/([^/-]+)', player_json_url, 'page type')\n        if page_type == 'video':\n            player_json_url = update_url_query(player_json_url, {'format': 'json'})\n        else:\n            player_json_url = player_json_url.replace('/xml/', '/html5xml/')\n            if page_type == 'album':\n                playlist_title = self._og_search_title(webpage)\n\n        return self._extract_player_json(player_json_url, page_id, page_type, playlist_title)\n", "comments": "# coding: utf-8\n# one single song\n# playlist of songs\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    update_url_query,\n)\n\n\nclass ZingMp3BaseInfoExtractor(InfoExtractor):\n\n    def _extract_item(self, item, page_type, fatal=True):\n        error_message = item.get('msg')\n        if error_message:\n            if not fatal:\n                return\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, error_message),\n                expected=True)\n\n        formats = []\n        for quality, source_url in zip(item.get('qualities') or item.get('quality', []), item.get('source_list') or item.get('source', [])):\n            if not source_url or source_url == 'require vip':\n                continue\n            if not re.match(r'https?://', source_url):\n                source_url = '//' + source_url\n            source_url = self._proto_relative_url(source_url, 'http:')\n            quality_num = int_or_none(quality)\n            f = {\n                'format_id': quality,\n                'url': source_url,\n            }\n            if page_type == 'video':\n                f.update({\n                    'height': quality_num,\n                    'ext': 'mp4',\n                })\n            else:\n                f.update({\n                    'abr': quality_num,\n                    'ext': 'mp3',\n                })\n            formats.append(f)\n\n        cover = item.get('cover')\n\n        return {\n            'title': (item.get('name') or item.get('title')).strip(),\n            'formats': formats,\n            'thumbnail': 'http:/' + cover if cover else None,\n            'artist': item.get('artist'),\n        }\n\n    def _extract_player_json(self, player_json_url, id, page_type, playlist_title=None):\n        player_json = self._download_json(player_json_url, id, 'Downloading Player JSON')\n        items = player_json['data']\n        if 'item' in items:\n            items = items['item']\n\n        if len(items) == 1:\n            # one single song\n            data = self._extract_item(items[0], page_type)\n            data['id'] = id\n\n            return data\n        else:\n            # playlist of songs\n            entries = []\n\n            for i, item in enumerate(items, 1):\n                entry = self._extract_item(item, page_type, fatal=False)\n                if not entry:\n                    continue\n                entry['id'] = '%s-%d' % (id, i)\n                entries.append(entry)\n\n            return {\n                '_type': 'playlist',\n                'id': id,\n                'title': playlist_title,\n                'entries': entries,\n            }\n\n\nclass ZingMp3IE(ZingMp3BaseInfoExtractor):\n    _VALID_URL = r'https?://mp3\\.zing\\.vn/(?:bai-hat|album|playlist|video-clip)/[^/]+/(?P<id>\\w+)\\.html'\n    _TESTS = [{\n        'url': 'http://mp3.zing.vn/bai-hat/Xa-Mai-Xa-Bao-Thy/ZWZB9WAB.html',\n        'md5': 'ead7ae13693b3205cbc89536a077daed',\n        'info_dict': {\n            'id': 'ZWZB9WAB',\n            'title': 'Xa M\u00e3i Xa',\n            'ext': 'mp3',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n    }, {\n        'url': 'http://mp3.zing.vn/video-clip/Let-It-Go-Frozen-OST-Sungha-Jung/ZW6BAEA0.html',\n        'md5': '870295a9cd8045c0e15663565902618d',\n        'info_dict': {\n            'id': 'ZW6BAEA0',\n            'title': 'Let It Go (Frozen OST)',\n            'ext': 'mp4',\n        },\n    }, {\n        'url': 'http://mp3.zing.vn/album/Lau-Dai-Tinh-Ai-Bang-Kieu-Minh-Tuyet/ZWZBWDAF.html',\n        'info_dict': {\n            '_type': 'playlist',\n            'id': 'ZWZBWDAF',\n            'title': 'L\u00e2u \u0110\u00e0i T\u00ecnh \u00c1i - B\u1eb1ng Ki\u1ec1u,Minh Tuy\u1ebft | Album 320 lossless',\n        },\n        'playlist_count': 10,\n        'skip': 'removed at the request of the owner',\n    }, {\n        'url': 'http://mp3.zing.vn/playlist/Duong-Hong-Loan-apollobee/IWCAACCB.html',\n        'only_matching': True,\n    }]\n    IE_NAME = 'zingmp3'\n    IE_DESC = 'mp3.zing.vn'\n\n    def _real_extract(self, url):\n        page_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, page_id)\n\n        player_json_url = self._search_regex([\n            r'data-xml=\"([^\"]+)',\n            r'&amp;xmlURL=([^&]+)&'\n        ], webpage, 'player xml url')\n\n        playlist_title = None\n        page_type = self._search_regex(r'/(?:html5)?xml/([^/-]+)', player_json_url, 'page type')\n        if page_type == 'video':\n            player_json_url = update_url_query(player_json_url, {'format': 'json'})\n        else:\n            player_json_url = player_json_url.replace('/xml/', '/html5xml/')\n            if page_type == 'album':\n                playlist_title = self._og_search_title(webpage)\n\n        return self._extract_player_json(player_json_url, page_id, page_type, playlist_title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "zingmp3.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/zingmp3.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}