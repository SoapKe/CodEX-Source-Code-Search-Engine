{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    float_or_none,\n    int_or_none,\n)\n\n\nclass KonserthusetPlayIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?:konserthusetplay|rspoplay)\\.se/\\?.*\\bm=(?P<id>[^&]+)'\n    _TESTS = [{\n        'url': 'http://www.konserthusetplay.se/?m=CKDDnlCY-dhWAAqiMERd-A',\n        'md5': 'e3fd47bf44e864bd23c08e487abe1967',\n        'info_dict': {\n            'id': 'CKDDnlCY-dhWAAqiMERd-A',\n            'ext': 'mp4',\n            'title': 'Orkesterns instrument: Valthornen',\n            'description': 'md5:f10e1f0030202020396a4d712d2fa827',\n            'thumbnail': 're:^https?://.*$',\n            'duration': 398.76,\n        },\n    }, {\n        'url': 'http://rspoplay.se/?m=elWuEH34SMKvaO4wO_cHBw',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        e = self._search_regex(\n            r'https?://csp\\.picsearch\\.com/rest\\?.*\\be=(.+?)[&\"\\']', webpage, 'e')\n\n        rest = self._download_json(\n            'http://csp.picsearch.com/rest?e=%s&containerId=mediaplayer&i=object' % e,\n            video_id, transform_source=lambda s: s[s.index('{'):s.rindex('}') + 1])\n\n        media = rest['media']\n        player_config = media['playerconfig']\n        playlist = player_config['playlist']\n\n        source = next(f for f in playlist if f.get('bitrates') or f.get('provider'))\n\n        FORMAT_ID_REGEX = r'_([^_]+)_h264m\\.mp4'\n\n        formats = []\n\n        m3u8_url = source.get('url')\n        if m3u8_url and determine_ext(m3u8_url) == 'm3u8':\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                m3u8_id='hls', fatal=False))\n\n        fallback_url = source.get('fallbackUrl')\n        fallback_format_id = None\n        if fallback_url:\n            fallback_format_id = self._search_regex(\n                FORMAT_ID_REGEX, fallback_url, 'format id', default=None)\n\n        connection_url = (player_config.get('rtmp', {}).get(\n            'netConnectionUrl') or player_config.get(\n            'plugins', {}).get('bwcheck', {}).get('netConnectionUrl'))\n        if connection_url:\n            for f in source['bitrates']:\n                video_url = f.get('url')\n                if not video_url:\n                    continue\n                format_id = self._search_regex(\n                    FORMAT_ID_REGEX, video_url, 'format id', default=None)\n                f_common = {\n                    'vbr': int_or_none(f.get('bitrate')),\n                    'width': int_or_none(f.get('width')),\n                    'height': int_or_none(f.get('height')),\n                }\n                f = f_common.copy()\n                f.update({\n                    'url': connection_url,\n                    'play_path': video_url,\n                    'format_id': 'rtmp-%s' % format_id if format_id else 'rtmp',\n                    'ext': 'flv',\n                })\n                formats.append(f)\n                if format_id and format_id == fallback_format_id:\n                    f = f_common.copy()\n                    f.update({\n                        'url': fallback_url,\n                        'format_id': 'http-%s' % format_id if format_id else 'http',\n                    })\n                    formats.append(f)\n\n        if not formats and fallback_url:\n            formats.append({\n                'url': fallback_url,\n            })\n\n        self._sort_formats(formats)\n\n        title = player_config.get('title') or media['title']\n        description = player_config.get('mediaInfo', {}).get('description')\n        thumbnail = media.get('image')\n        duration = float_or_none(media.get('duration'), 1000)\n\n        subtitles = {}\n        captions = source.get('captionsAvailableLanguages')\n        if isinstance(captions, dict):\n            for lang, subtitle_url in captions.items():\n                if lang != 'none' and isinstance(subtitle_url, compat_str):\n                    subtitles.setdefault(lang, []).append({'url': subtitle_url})\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    float_or_none,\n    int_or_none,\n)\n\n\nclass KonserthusetPlayIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?:konserthusetplay|rspoplay)\\.se/\\?.*\\bm=(?P<id>[^&]+)'\n    _TESTS = [{\n        'url': 'http://www.konserthusetplay.se/?m=CKDDnlCY-dhWAAqiMERd-A',\n        'md5': 'e3fd47bf44e864bd23c08e487abe1967',\n        'info_dict': {\n            'id': 'CKDDnlCY-dhWAAqiMERd-A',\n            'ext': 'mp4',\n            'title': 'Orkesterns instrument: Valthornen',\n            'description': 'md5:f10e1f0030202020396a4d712d2fa827',\n            'thumbnail': 're:^https?://.*$',\n            'duration': 398.76,\n        },\n    }, {\n        'url': 'http://rspoplay.se/?m=elWuEH34SMKvaO4wO_cHBw',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        e = self._search_regex(\n            r'https?://csp\\.picsearch\\.com/rest\\?.*\\be=(.+?)[&\"\\']', webpage, 'e')\n\n        rest = self._download_json(\n            'http://csp.picsearch.com/rest?e=%s&containerId=mediaplayer&i=object' % e,\n            video_id, transform_source=lambda s: s[s.index('{'):s.rindex('}') + 1])\n\n        media = rest['media']\n        player_config = media['playerconfig']\n        playlist = player_config['playlist']\n\n        source = next(f for f in playlist if f.get('bitrates') or f.get('provider'))\n\n        FORMAT_ID_REGEX = r'_([^_]+)_h264m\\.mp4'\n\n        formats = []\n\n        m3u8_url = source.get('url')\n        if m3u8_url and determine_ext(m3u8_url) == 'm3u8':\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                m3u8_id='hls', fatal=False))\n\n        fallback_url = source.get('fallbackUrl')\n        fallback_format_id = None\n        if fallback_url:\n            fallback_format_id = self._search_regex(\n                FORMAT_ID_REGEX, fallback_url, 'format id', default=None)\n\n        connection_url = (player_config.get('rtmp', {}).get(\n            'netConnectionUrl') or player_config.get(\n            'plugins', {}).get('bwcheck', {}).get('netConnectionUrl'))\n        if connection_url:\n            for f in source['bitrates']:\n                video_url = f.get('url')\n                if not video_url:\n                    continue\n                format_id = self._search_regex(\n                    FORMAT_ID_REGEX, video_url, 'format id', default=None)\n                f_common = {\n                    'vbr': int_or_none(f.get('bitrate')),\n                    'width': int_or_none(f.get('width')),\n                    'height': int_or_none(f.get('height')),\n                }\n                f = f_common.copy()\n                f.update({\n                    'url': connection_url,\n                    'play_path': video_url,\n                    'format_id': 'rtmp-%s' % format_id if format_id else 'rtmp',\n                    'ext': 'flv',\n                })\n                formats.append(f)\n                if format_id and format_id == fallback_format_id:\n                    f = f_common.copy()\n                    f.update({\n                        'url': fallback_url,\n                        'format_id': 'http-%s' % format_id if format_id else 'http',\n                    })\n                    formats.append(f)\n\n        if not formats and fallback_url:\n            formats.append({\n                'url': fallback_url,\n            })\n\n        self._sort_formats(formats)\n\n        title = player_config.get('title') or media['title']\n        description = player_config.get('mediaInfo', {}).get('description')\n        thumbnail = media.get('image')\n        duration = float_or_none(media.get('duration'), 1000)\n\n        subtitles = {}\n        captions = source.get('captionsAvailableLanguages')\n        if isinstance(captions, dict):\n            for lang, subtitle_url in captions.items():\n                if lang != 'none' and isinstance(subtitle_url, compat_str):\n                    subtitles.setdefault(lang, []).append({'url': subtitle_url})\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "konserthusetplay.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/konserthusetplay.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}