{"author": "sympy", "code": "from sympy import (\n    adjoint, conjugate, DiracDelta, Heaviside, nan, pi, sign, sqrt,\n    symbols, transpose, Symbol, Piecewise, I, S, Eq, oo,\n    SingularityFunction, signsimp\n)\n\nfrom sympy.utilities.pytest import raises\n\nfrom sympy.core.function import ArgumentIndexError\n\nfrom sympy.utilities.exceptions import SymPyDeprecationWarning\n\nfrom sympy.utilities.misc import filldedent\n\nx, y = symbols('x y')\ni = symbols('t', nonzero=True)\nj = symbols('j', positive=True)\nk = symbols('k', negative=True)\n\ndef test_DiracDelta():\n    assert DiracDelta(1) == 0\n    assert DiracDelta(5.1) == 0\n    assert DiracDelta(-pi) == 0\n    assert DiracDelta(5, 7) == 0\n    assert DiracDelta(i) == 0\n    assert DiracDelta(j) == 0\n    assert DiracDelta(k) == 0\n    assert DiracDelta(nan) == nan\n    assert DiracDelta(0).func is DiracDelta\n    assert DiracDelta(x).func is DiracDelta\n    \n    #         But then limit(Delta(c)*Heaviside(x),x,-oo)\n    \n    #assert 0*DiracDelta(x) == 0\n\n    assert adjoint(DiracDelta(x)) == DiracDelta(x)\n    assert adjoint(DiracDelta(x - y)) == DiracDelta(x - y)\n    assert conjugate(DiracDelta(x)) == DiracDelta(x)\n    assert conjugate(DiracDelta(x - y)) == DiracDelta(x - y)\n    assert transpose(DiracDelta(x)) == DiracDelta(x)\n    assert transpose(DiracDelta(x - y)) == DiracDelta(x - y)\n\n    assert DiracDelta(x).diff(x) == DiracDelta(x, 1)\n    assert DiracDelta(x, 1).diff(x) == DiracDelta(x, 2)\n\n    assert DiracDelta(x).is_simple(x) is True\n    assert DiracDelta(3*x).is_simple(x) is True\n    assert DiracDelta(x**2).is_simple(x) is False\n    assert DiracDelta(sqrt(x)).is_simple(x) is False\n    assert DiracDelta(x).is_simple(y) is False\n\n    assert DiracDelta(x*y).expand(diracdelta=True, wrt=x) == DiracDelta(x)/abs(y)\n    assert DiracDelta(x*y).expand(diracdelta=True, wrt=y) == DiracDelta(y)/abs(x)\n    assert DiracDelta(x**2*y).expand(diracdelta=True, wrt=x) == DiracDelta(x**2*y)\n    assert DiracDelta(y).expand(diracdelta=True, wrt=x) == DiracDelta(y)\n    assert DiracDelta((x - 1)*(x - 2)*(x - 3)).expand(diracdelta=True, wrt=x) == (\n        DiracDelta(x - 3)/2 + DiracDelta(x - 2) + DiracDelta(x - 1)/2)\n\n    assert DiracDelta(2*x) != DiracDelta(x)  \n    assert DiracDelta(x) == DiracDelta(-x)  \n    assert DiracDelta(-x, 2) == DiracDelta(x, 2)\n    assert DiracDelta(-x, 1) == -DiracDelta(x, 1)  \n    assert DiracDelta(-oo*x) == DiracDelta(oo*x)\n    assert DiracDelta(x - y) != DiracDelta(y - x)\n    assert signsimp(DiracDelta(x - y) - DiracDelta(y - x)) == 0\n\n    with raises(SymPyDeprecationWarning):\n        assert DiracDelta(x*y).simplify(x) == DiracDelta(x)/abs(y)\n        assert DiracDelta(x*y).simplify(y) == DiracDelta(y)/abs(x)\n        assert DiracDelta(x**2*y).simplify(x) == DiracDelta(x**2*y)\n        assert DiracDelta(y).simplify(x) == DiracDelta(y)\n        assert DiracDelta((x - 1)*(x - 2)*(x - 3)).simplify(x) == (\n            DiracDelta(x - 3)/2 + DiracDelta(x - 2) + DiracDelta(x - 1)/2)\n\n    raises(ArgumentIndexError, lambda: DiracDelta(x).fdiff(2))\n    raises(ValueError, lambda: DiracDelta(x, -1))\n    raises(ValueError, lambda: DiracDelta(I))\n    raises(ValueError, lambda: DiracDelta(2 + 3*I))\n\n\ndef test_heaviside():\n    assert Heaviside(0).func == Heaviside\n    assert Heaviside(-5) == 0\n    assert Heaviside(1) == 1\n    assert Heaviside(nan) == nan\n\n    assert Heaviside(0, x) == x\n    assert Heaviside(0, nan) == nan\n    assert Heaviside(x, None) == Heaviside(x)\n    assert Heaviside(0, None) == Heaviside(0)\n    \n    assert None not in Heaviside(x, None).args\n\n    assert adjoint(Heaviside(x)) == Heaviside(x)\n    assert adjoint(Heaviside(x - y)) == Heaviside(x - y)\n    assert conjugate(Heaviside(x)) == Heaviside(x)\n    assert conjugate(Heaviside(x - y)) == Heaviside(x - y)\n    assert transpose(Heaviside(x)) == Heaviside(x)\n    assert transpose(Heaviside(x - y)) == Heaviside(x - y)\n\n    assert Heaviside(x).diff(x) == DiracDelta(x)\n    assert Heaviside(x + I).is_Function is True\n    assert Heaviside(I*x).is_Function is True\n\n    raises(ArgumentIndexError, lambda: Heaviside(x).fdiff(2))\n    raises(ValueError, lambda: Heaviside(I))\n    raises(ValueError, lambda: Heaviside(2 + 3*I))\n\n\ndef test_rewrite():\n    x, y = Symbol('x', real=True), Symbol('y')\n    assert Heaviside(x).rewrite(Piecewise) == (\n        Piecewise((0, x < 0), (Heaviside(0), Eq(x, 0)), (1, x > 0)))\n    assert Heaviside(y).rewrite(Piecewise) == (\n        Piecewise((0, y < 0), (Heaviside(0), Eq(y, 0)), (1, y > 0)))\n    assert Heaviside(x, y).rewrite(Piecewise) == (\n        Piecewise((0, x < 0), (y, Eq(x, 0)), (1, x > 0)))\n    assert Heaviside(x, 0).rewrite(Piecewise) == (\n        Piecewise((0, x <= 0), (1, x > 0)))\n    assert Heaviside(x, 1).rewrite(Piecewise) == (\n        Piecewise((0, x < 0), (1, x >= 0)))\n\n    assert Heaviside(x).rewrite(sign) == (sign(x)+1)/2\n    assert Heaviside(y).rewrite(sign) == Heaviside(y)\n    assert Heaviside(x, S.Half).rewrite(sign) == (sign(x)+1)/2\n    assert Heaviside(x, y).rewrite(sign) == Heaviside(x, y)\n\n    assert DiracDelta(y).rewrite(Piecewise) == Piecewise((DiracDelta(0), Eq(y, 0)), (0, True))\n    assert DiracDelta(y, 1).rewrite(Piecewise) == DiracDelta(y, 1)\n    assert DiracDelta(x - 5).rewrite(Piecewise) == (\n        Piecewise((DiracDelta(0), Eq(x - 5, 0)), (0, True)))\n\n    assert (x*DiracDelta(x - 10)).rewrite(SingularityFunction) == x*SingularityFunction(x, 10, -1)\n    assert 5*x*y*DiracDelta(y, 1).rewrite(SingularityFunction) == 5*x*y*SingularityFunction(y, 0, -2)\n    assert DiracDelta(0).rewrite(SingularityFunction) == SingularityFunction(0, 0, -1)\n    assert DiracDelta(0, 1).rewrite(SingularityFunction) == SingularityFunction(0, 0, -2)\n\n    assert Heaviside(x).rewrite(SingularityFunction) == SingularityFunction(x, 0, 0)\n    assert 5*x*y*Heaviside(y + 1).rewrite(SingularityFunction) == 5*x*y*SingularityFunction(y, -1, 0)\n    assert ((x - 3)**3*Heaviside(x - 3)).rewrite(SingularityFunction) == (x - 3)**3*SingularityFunction(x, 3, 0)\n    assert Heaviside(0).rewrite(SingularityFunction) == SingularityFunction(0, 0, 0)\n", "comments": "  fixme  generally undefined   x 0            but limit(delta(c) heaviside(x) x  oo)            need implemented    assert 0 diracdelta(x)    0    scaling property    even function    odd deriv odd    want none args  ", "content": "from sympy import (\n    adjoint, conjugate, DiracDelta, Heaviside, nan, pi, sign, sqrt,\n    symbols, transpose, Symbol, Piecewise, I, S, Eq, oo,\n    SingularityFunction, signsimp\n)\n\nfrom sympy.utilities.pytest import raises\n\nfrom sympy.core.function import ArgumentIndexError\n\nfrom sympy.utilities.exceptions import SymPyDeprecationWarning\n\nfrom sympy.utilities.misc import filldedent\n\nx, y = symbols('x y')\ni = symbols('t', nonzero=True)\nj = symbols('j', positive=True)\nk = symbols('k', negative=True)\n\ndef test_DiracDelta():\n    assert DiracDelta(1) == 0\n    assert DiracDelta(5.1) == 0\n    assert DiracDelta(-pi) == 0\n    assert DiracDelta(5, 7) == 0\n    assert DiracDelta(i) == 0\n    assert DiracDelta(j) == 0\n    assert DiracDelta(k) == 0\n    assert DiracDelta(nan) == nan\n    assert DiracDelta(0).func is DiracDelta\n    assert DiracDelta(x).func is DiracDelta\n    # FIXME: this is generally undefined @ x=0\n    #         But then limit(Delta(c)*Heaviside(x),x,-oo)\n    #         need's to be implemented.\n    #assert 0*DiracDelta(x) == 0\n\n    assert adjoint(DiracDelta(x)) == DiracDelta(x)\n    assert adjoint(DiracDelta(x - y)) == DiracDelta(x - y)\n    assert conjugate(DiracDelta(x)) == DiracDelta(x)\n    assert conjugate(DiracDelta(x - y)) == DiracDelta(x - y)\n    assert transpose(DiracDelta(x)) == DiracDelta(x)\n    assert transpose(DiracDelta(x - y)) == DiracDelta(x - y)\n\n    assert DiracDelta(x).diff(x) == DiracDelta(x, 1)\n    assert DiracDelta(x, 1).diff(x) == DiracDelta(x, 2)\n\n    assert DiracDelta(x).is_simple(x) is True\n    assert DiracDelta(3*x).is_simple(x) is True\n    assert DiracDelta(x**2).is_simple(x) is False\n    assert DiracDelta(sqrt(x)).is_simple(x) is False\n    assert DiracDelta(x).is_simple(y) is False\n\n    assert DiracDelta(x*y).expand(diracdelta=True, wrt=x) == DiracDelta(x)/abs(y)\n    assert DiracDelta(x*y).expand(diracdelta=True, wrt=y) == DiracDelta(y)/abs(x)\n    assert DiracDelta(x**2*y).expand(diracdelta=True, wrt=x) == DiracDelta(x**2*y)\n    assert DiracDelta(y).expand(diracdelta=True, wrt=x) == DiracDelta(y)\n    assert DiracDelta((x - 1)*(x - 2)*(x - 3)).expand(diracdelta=True, wrt=x) == (\n        DiracDelta(x - 3)/2 + DiracDelta(x - 2) + DiracDelta(x - 1)/2)\n\n    assert DiracDelta(2*x) != DiracDelta(x)  # scaling property\n    assert DiracDelta(x) == DiracDelta(-x)  # even function\n    assert DiracDelta(-x, 2) == DiracDelta(x, 2)\n    assert DiracDelta(-x, 1) == -DiracDelta(x, 1)  # odd deriv is odd\n    assert DiracDelta(-oo*x) == DiracDelta(oo*x)\n    assert DiracDelta(x - y) != DiracDelta(y - x)\n    assert signsimp(DiracDelta(x - y) - DiracDelta(y - x)) == 0\n\n    with raises(SymPyDeprecationWarning):\n        assert DiracDelta(x*y).simplify(x) == DiracDelta(x)/abs(y)\n        assert DiracDelta(x*y).simplify(y) == DiracDelta(y)/abs(x)\n        assert DiracDelta(x**2*y).simplify(x) == DiracDelta(x**2*y)\n        assert DiracDelta(y).simplify(x) == DiracDelta(y)\n        assert DiracDelta((x - 1)*(x - 2)*(x - 3)).simplify(x) == (\n            DiracDelta(x - 3)/2 + DiracDelta(x - 2) + DiracDelta(x - 1)/2)\n\n    raises(ArgumentIndexError, lambda: DiracDelta(x).fdiff(2))\n    raises(ValueError, lambda: DiracDelta(x, -1))\n    raises(ValueError, lambda: DiracDelta(I))\n    raises(ValueError, lambda: DiracDelta(2 + 3*I))\n\n\ndef test_heaviside():\n    assert Heaviside(0).func == Heaviside\n    assert Heaviside(-5) == 0\n    assert Heaviside(1) == 1\n    assert Heaviside(nan) == nan\n\n    assert Heaviside(0, x) == x\n    assert Heaviside(0, nan) == nan\n    assert Heaviside(x, None) == Heaviside(x)\n    assert Heaviside(0, None) == Heaviside(0)\n    # we do not want None in the args:\n    assert None not in Heaviside(x, None).args\n\n    assert adjoint(Heaviside(x)) == Heaviside(x)\n    assert adjoint(Heaviside(x - y)) == Heaviside(x - y)\n    assert conjugate(Heaviside(x)) == Heaviside(x)\n    assert conjugate(Heaviside(x - y)) == Heaviside(x - y)\n    assert transpose(Heaviside(x)) == Heaviside(x)\n    assert transpose(Heaviside(x - y)) == Heaviside(x - y)\n\n    assert Heaviside(x).diff(x) == DiracDelta(x)\n    assert Heaviside(x + I).is_Function is True\n    assert Heaviside(I*x).is_Function is True\n\n    raises(ArgumentIndexError, lambda: Heaviside(x).fdiff(2))\n    raises(ValueError, lambda: Heaviside(I))\n    raises(ValueError, lambda: Heaviside(2 + 3*I))\n\n\ndef test_rewrite():\n    x, y = Symbol('x', real=True), Symbol('y')\n    assert Heaviside(x).rewrite(Piecewise) == (\n        Piecewise((0, x < 0), (Heaviside(0), Eq(x, 0)), (1, x > 0)))\n    assert Heaviside(y).rewrite(Piecewise) == (\n        Piecewise((0, y < 0), (Heaviside(0), Eq(y, 0)), (1, y > 0)))\n    assert Heaviside(x, y).rewrite(Piecewise) == (\n        Piecewise((0, x < 0), (y, Eq(x, 0)), (1, x > 0)))\n    assert Heaviside(x, 0).rewrite(Piecewise) == (\n        Piecewise((0, x <= 0), (1, x > 0)))\n    assert Heaviside(x, 1).rewrite(Piecewise) == (\n        Piecewise((0, x < 0), (1, x >= 0)))\n\n    assert Heaviside(x).rewrite(sign) == (sign(x)+1)/2\n    assert Heaviside(y).rewrite(sign) == Heaviside(y)\n    assert Heaviside(x, S.Half).rewrite(sign) == (sign(x)+1)/2\n    assert Heaviside(x, y).rewrite(sign) == Heaviside(x, y)\n\n    assert DiracDelta(y).rewrite(Piecewise) == Piecewise((DiracDelta(0), Eq(y, 0)), (0, True))\n    assert DiracDelta(y, 1).rewrite(Piecewise) == DiracDelta(y, 1)\n    assert DiracDelta(x - 5).rewrite(Piecewise) == (\n        Piecewise((DiracDelta(0), Eq(x - 5, 0)), (0, True)))\n\n    assert (x*DiracDelta(x - 10)).rewrite(SingularityFunction) == x*SingularityFunction(x, 10, -1)\n    assert 5*x*y*DiracDelta(y, 1).rewrite(SingularityFunction) == 5*x*y*SingularityFunction(y, 0, -2)\n    assert DiracDelta(0).rewrite(SingularityFunction) == SingularityFunction(0, 0, -1)\n    assert DiracDelta(0, 1).rewrite(SingularityFunction) == SingularityFunction(0, 0, -2)\n\n    assert Heaviside(x).rewrite(SingularityFunction) == SingularityFunction(x, 0, 0)\n    assert 5*x*y*Heaviside(y + 1).rewrite(SingularityFunction) == 5*x*y*SingularityFunction(y, -1, 0)\n    assert ((x - 3)**3*Heaviside(x - 3)).rewrite(SingularityFunction) == (x - 3)**3*SingularityFunction(x, 3, 0)\n    assert Heaviside(0).rewrite(SingularityFunction) == SingularityFunction(0, 0, 0)\n", "description": "A computer algebra system written in pure Python", "file_name": "test_delta_functions.py", "id": "81b85d84717bb90823acfa2fb8566e49", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/functions/special/tests/test_delta_functions.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}