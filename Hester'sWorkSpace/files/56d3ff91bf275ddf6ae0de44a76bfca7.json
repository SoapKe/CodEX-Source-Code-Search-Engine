{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_str,\n)\nfrom ..utils import (\n    extract_attributes,\n    try_get,\n    urlencode_postdata,\n    ExtractorError,\n)\n\n\nclass TVPlayerIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tvplayer\\.com/watch/(?P<id>[^/?\n    _TEST = {\n        'url': 'http://tvplayer.com/watch/bbcone',\n        'info_dict': {\n            'id': '89',\n            'ext': 'mp4',\n            'title': r're:^BBC One [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n        },\n        'params': {\n            \n            'skip_download': True,\n        }\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n\n        current_channel = extract_attributes(self._search_regex(\n            r'(<div[^>]+class=\"[^\"]*current-channel[^\"]*\"[^>]*>)',\n            webpage, 'channel element'))\n        title = current_channel['data-name']\n\n        resource_id = current_channel['data-id']\n\n        token = self._search_regex(\n            r'data-token=([\"\\'])(?P<token>(?!\\1).+)\\1', webpage,\n            'token', group='token')\n\n        context = self._download_json(\n            'https://tvplayer.com/watch/context', display_id,\n            'Downloading JSON context', query={\n                'resource': resource_id,\n                'gen': token,\n            })\n\n        validate = context['validate']\n        platform = try_get(\n            context, lambda x: x['platform']['key'], compat_str) or 'firefox'\n\n        try:\n            response = self._download_json(\n                'http://api.tvplayer.com/api/v2/stream/live',\n                display_id, 'Downloading JSON stream', headers={\n                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n                }, data=urlencode_postdata({\n                    'id': resource_id,\n                    'service': 1,\n                    'platform': platform,\n                    'validate': validate,\n                }))['tvplayer']['response']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError):\n                response = self._parse_json(\n                    e.cause.read().decode(), resource_id)['tvplayer']['response']\n                raise ExtractorError(\n                    '%s said: %s' % (self.IE_NAME, response['error']), expected=True)\n            raise\n\n        formats = self._extract_m3u8_formats(response['stream'], display_id, 'mp4')\n        self._sort_formats(formats)\n\n        return {\n            'id': resource_id,\n            'display_id': display_id,\n            'title': self._live_title(title),\n            'formats': formats,\n            'is_live': True,\n        }\n", "comments": "# coding: utf-8\n#]+)'\n# m3u8 download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_str,\n)\nfrom ..utils import (\n    extract_attributes,\n    try_get,\n    urlencode_postdata,\n    ExtractorError,\n)\n\n\nclass TVPlayerIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tvplayer\\.com/watch/(?P<id>[^/?#]+)'\n    _TEST = {\n        'url': 'http://tvplayer.com/watch/bbcone',\n        'info_dict': {\n            'id': '89',\n            'ext': 'mp4',\n            'title': r're:^BBC One [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        }\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n\n        current_channel = extract_attributes(self._search_regex(\n            r'(<div[^>]+class=\"[^\"]*current-channel[^\"]*\"[^>]*>)',\n            webpage, 'channel element'))\n        title = current_channel['data-name']\n\n        resource_id = current_channel['data-id']\n\n        token = self._search_regex(\n            r'data-token=([\"\\'])(?P<token>(?!\\1).+)\\1', webpage,\n            'token', group='token')\n\n        context = self._download_json(\n            'https://tvplayer.com/watch/context', display_id,\n            'Downloading JSON context', query={\n                'resource': resource_id,\n                'gen': token,\n            })\n\n        validate = context['validate']\n        platform = try_get(\n            context, lambda x: x['platform']['key'], compat_str) or 'firefox'\n\n        try:\n            response = self._download_json(\n                'http://api.tvplayer.com/api/v2/stream/live',\n                display_id, 'Downloading JSON stream', headers={\n                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n                }, data=urlencode_postdata({\n                    'id': resource_id,\n                    'service': 1,\n                    'platform': platform,\n                    'validate': validate,\n                }))['tvplayer']['response']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError):\n                response = self._parse_json(\n                    e.cause.read().decode(), resource_id)['tvplayer']['response']\n                raise ExtractorError(\n                    '%s said: %s' % (self.IE_NAME, response['error']), expected=True)\n            raise\n\n        formats = self._extract_m3u8_formats(response['stream'], display_id, 'mp4')\n        self._sort_formats(formats)\n\n        return {\n            'id': resource_id,\n            'display_id': display_id,\n            'title': self._live_title(title),\n            'formats': formats,\n            'is_live': True,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tvplayer.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tvplayer.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}