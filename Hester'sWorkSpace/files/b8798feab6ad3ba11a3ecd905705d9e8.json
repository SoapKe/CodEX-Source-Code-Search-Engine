{"author": "ansible", "code": "import json\nimport os\nimport pickle\nimport unittest\nimport sys\nfrom nose.plugins.skip import SkipTest\n\n\ntry:\n    from pyVmomi import vim, vmodl\nexcept ImportError:\n    raise SkipTest(\"test_vmware_inventory.py requires the python module 'pyVmomi'\")\n\ntry:\n    from vmware_inventory import VMWareInventory\nexcept ImportError:\n    raise SkipTest(\"test_vmware_inventory.py requires the python module 'vmware_inventory'\")\n\n\ncheckout_path = os.path.dirname(__file__)\ncheckout_path = checkout_path.replace('/test/units/contrib/inventory', '')\ninventory_dir = os.path.join(checkout_path, 'contrib', 'inventory')\nsys.path.append(os.path.abspath(inventory_dir))\n\n\nsys.path.remove(os.path.abspath(inventory_dir))\n\nBASICINVENTORY = {\n    'all': {\n        'hosts': ['foo', 'bar']\n    },\n    '_meta': {\n        'hostvars': {\n            'foo': {'hostname': 'foo'},\n            'bar': {'hostname': 'bar'}\n        }\n    }\n}\n\n\nclass FakeArgs(object):\n    debug = False\n    write_dumpfile = None\n    load_dumpfile = None\n    host = False\n    list = True\n\n\nclass TestVMWareInventory(unittest.TestCase):\n\n    def test_host_info_returns_single_host(self):\n        vmw = VMWareInventory(load=False)\n        vmw.inventory = BASICINVENTORY\n        foo = vmw.get_host_info('foo')\n        bar = vmw.get_host_info('bar')\n        assert foo == {'hostname': 'foo'}\n        assert bar == {'hostname': 'bar'}\n\n    def test_show_returns_serializable_data(self):\n        fakeargs = FakeArgs()\n        vmw = VMWareInventory(load=False)\n        vmw.args = fakeargs\n        vmw.inventory = BASICINVENTORY\n        showdata = vmw.show()\n        serializable = False\n\n        try:\n            json.loads(showdata)\n            serializable = True\n        except:\n            pass\n        assert serializable\n        ()\n\n    def test_show_list_returns_serializable_data(self):\n        fakeargs = FakeArgs()\n        vmw = VMWareInventory(load=False)\n        vmw.args = fakeargs\n        vmw.args.list = True\n        vmw.inventory = BASICINVENTORY\n        showdata = vmw.show()\n        serializable = False\n\n        try:\n            json.loads(showdata)\n            serializable = True\n        except:\n            pass\n        assert serializable\n        ()\n\n    def test_show_list_returns_all_data(self):\n        fakeargs = FakeArgs()\n        vmw = VMWareInventory(load=False)\n        vmw.args = fakeargs\n        vmw.args.list = True\n        vmw.inventory = BASICINVENTORY\n        showdata = vmw.show()\n        expected = json.dumps(BASICINVENTORY, indent=2)\n        assert showdata == expected\n\n    def test_show_host_returns_serializable_data(self):\n        fakeargs = FakeArgs()\n        vmw = VMWareInventory(load=False)\n        vmw.args = fakeargs\n        vmw.args.host = 'foo'\n        vmw.inventory = BASICINVENTORY\n        showdata = vmw.show()\n        serializable = False\n\n        try:\n            json.loads(showdata)\n            serializable = True\n        except:\n            pass\n        assert serializable\n        ()\n\n    def test_show_host_returns_just_host(self):\n        fakeargs = FakeArgs()\n        vmw = VMWareInventory(load=False)\n        vmw.args = fakeargs\n        vmw.args.list = False\n        vmw.args.host = 'foo'\n        vmw.inventory = BASICINVENTORY\n        showdata = vmw.show()\n        expected = BASICINVENTORY['_meta']['hostvars']['foo']\n        expected = json.dumps(expected, indent=2)\n        ()\n        assert showdata == expected\n", "comments": "  contrib dirstruct contain   init   py files    cleanup nose path polluted inv scripts    import epdb  epdb st()    import epdb  epdb st()    import epdb  epdb st()    import epdb  epdb st() ", "content": "import json\nimport os\nimport pickle\nimport unittest\nimport sys\nfrom nose.plugins.skip import SkipTest\n\n\ntry:\n    from pyVmomi import vim, vmodl\nexcept ImportError:\n    raise SkipTest(\"test_vmware_inventory.py requires the python module 'pyVmomi'\")\n\ntry:\n    from vmware_inventory import VMWareInventory\nexcept ImportError:\n    raise SkipTest(\"test_vmware_inventory.py requires the python module 'vmware_inventory'\")\n\n# contrib's dirstruct doesn't contain __init__.py files\ncheckout_path = os.path.dirname(__file__)\ncheckout_path = checkout_path.replace('/test/units/contrib/inventory', '')\ninventory_dir = os.path.join(checkout_path, 'contrib', 'inventory')\nsys.path.append(os.path.abspath(inventory_dir))\n\n# cleanup so that nose's path is not polluted with other inv scripts\nsys.path.remove(os.path.abspath(inventory_dir))\n\nBASICINVENTORY = {\n    'all': {\n        'hosts': ['foo', 'bar']\n    },\n    '_meta': {\n        'hostvars': {\n            'foo': {'hostname': 'foo'},\n            'bar': {'hostname': 'bar'}\n        }\n    }\n}\n\n\nclass FakeArgs(object):\n    debug = False\n    write_dumpfile = None\n    load_dumpfile = None\n    host = False\n    list = True\n\n\nclass TestVMWareInventory(unittest.TestCase):\n\n    def test_host_info_returns_single_host(self):\n        vmw = VMWareInventory(load=False)\n        vmw.inventory = BASICINVENTORY\n        foo = vmw.get_host_info('foo')\n        bar = vmw.get_host_info('bar')\n        assert foo == {'hostname': 'foo'}\n        assert bar == {'hostname': 'bar'}\n\n    def test_show_returns_serializable_data(self):\n        fakeargs = FakeArgs()\n        vmw = VMWareInventory(load=False)\n        vmw.args = fakeargs\n        vmw.inventory = BASICINVENTORY\n        showdata = vmw.show()\n        serializable = False\n\n        try:\n            json.loads(showdata)\n            serializable = True\n        except:\n            pass\n        assert serializable\n        # import epdb; epdb.st()\n\n    def test_show_list_returns_serializable_data(self):\n        fakeargs = FakeArgs()\n        vmw = VMWareInventory(load=False)\n        vmw.args = fakeargs\n        vmw.args.list = True\n        vmw.inventory = BASICINVENTORY\n        showdata = vmw.show()\n        serializable = False\n\n        try:\n            json.loads(showdata)\n            serializable = True\n        except:\n            pass\n        assert serializable\n        # import epdb; epdb.st()\n\n    def test_show_list_returns_all_data(self):\n        fakeargs = FakeArgs()\n        vmw = VMWareInventory(load=False)\n        vmw.args = fakeargs\n        vmw.args.list = True\n        vmw.inventory = BASICINVENTORY\n        showdata = vmw.show()\n        expected = json.dumps(BASICINVENTORY, indent=2)\n        assert showdata == expected\n\n    def test_show_host_returns_serializable_data(self):\n        fakeargs = FakeArgs()\n        vmw = VMWareInventory(load=False)\n        vmw.args = fakeargs\n        vmw.args.host = 'foo'\n        vmw.inventory = BASICINVENTORY\n        showdata = vmw.show()\n        serializable = False\n\n        try:\n            json.loads(showdata)\n            serializable = True\n        except:\n            pass\n        assert serializable\n        # import epdb; epdb.st()\n\n    def test_show_host_returns_just_host(self):\n        fakeargs = FakeArgs()\n        vmw = VMWareInventory(load=False)\n        vmw.args = fakeargs\n        vmw.args.list = False\n        vmw.args.host = 'foo'\n        vmw.inventory = BASICINVENTORY\n        showdata = vmw.show()\n        expected = BASICINVENTORY['_meta']['hostvars']['foo']\n        expected = json.dumps(expected, indent=2)\n        # import epdb; epdb.st()\n        assert showdata == expected\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_vmware_inventory.py", "id": "b8798feab6ad3ba11a3ecd905705d9e8", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/contrib/inventory/test_vmware_inventory.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}