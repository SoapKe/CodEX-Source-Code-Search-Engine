{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport six\n\nfrom django.contrib.auth.models import AnonymousUser\nfrom django.core.urlresolvers import reverse\nfrom django.http import HttpRequest\n\nfrom sentry.models import User\nfrom sentry.testutils import TestCase\nfrom sentry.utils.auth import EmailAuthBackend, login, get_login_redirect\n\n\nclass EmailAuthBackendTest(TestCase):\n    def setUp(self):\n        self.user = User(username=\"foo\", email=\"baz@example.com\")\n        self.user.set_password(\"bar\")\n        self.user.save()\n\n    @property\n    def backend(self):\n        return EmailAuthBackend()\n\n    def test_can_authenticate_with_username(self):\n        result = self.backend.authenticate(username='foo', password='bar')\n        self.assertEquals(result, self.user)\n\n    def test_can_authenticate_with_email(self):\n        result = self.backend.authenticate(username='baz@example.com', password='bar')\n        self.assertEquals(result, self.user)\n\n    def test_does_not_authenticate_with_invalid_password(self):\n        result = self.backend.authenticate(username='foo', password='pizza')\n        self.assertEquals(result, None)\n\n\nclass GetLoginRedirectTest(TestCase):\n    def make_request(self, next=None):\n        request = HttpRequest()\n        request.META['SERVER_NAME'] = 'testserver'\n        request.META['SERVER_PORT'] = '80'\n        request.session = {}\n        request.user = self.user\n        if next:\n            request.session['_next'] = next\n        return request\n\n    def test_schema_uses_default(self):\n        result = get_login_redirect(self.make_request('http://example.com'))\n        assert result == reverse('sentry-login')\n\n    def test_login_uses_default(self):\n        result = get_login_redirect(self.make_request(reverse('sentry-login')))\n        assert result == reverse('sentry-login')\n\n    def test_no_value_uses_default(self):\n        result = get_login_redirect(self.make_request())\n        assert result == reverse('sentry-login')\n\n\nclass LoginTest(TestCase):\n    def make_request(self, next=None):\n        request = HttpRequest()\n        request.META['REMOTE_ADDR'] = '127.0.0.1'\n        request.session = self.session\n        request.user = AnonymousUser()\n        if next:\n            request.session['_next'] = next\n        return request\n\n    def test_simple(self):\n        request = self.make_request()\n        assert login(request, self.user)\n        assert request.user == self.user\n        assert '_nonce' not in request.session\n\n    def test_with_organization(self):\n        org = self.create_organization(name='foo', owner=self.user)\n        request = self.make_request()\n        assert login(request, self.user, organization_id=org.id)\n        assert request.user == self.user\n        assert request.session['sso'] == six.text_type(org.id)\n\n    def test_with_nonce(self):\n        self.user.refresh_session_nonce()\n        self.user.save()\n        assert self.user.session_nonce is not None\n        request = self.make_request()\n        assert login(request, self.user)\n        assert request.user == self.user\n        assert request.session['_nonce'] == self.user.session_nonce\n", "comments": "", "content": "from __future__ import absolute_import\n\nimport six\n\nfrom django.contrib.auth.models import AnonymousUser\nfrom django.core.urlresolvers import reverse\nfrom django.http import HttpRequest\n\nfrom sentry.models import User\nfrom sentry.testutils import TestCase\nfrom sentry.utils.auth import EmailAuthBackend, login, get_login_redirect\n\n\nclass EmailAuthBackendTest(TestCase):\n    def setUp(self):\n        self.user = User(username=\"foo\", email=\"baz@example.com\")\n        self.user.set_password(\"bar\")\n        self.user.save()\n\n    @property\n    def backend(self):\n        return EmailAuthBackend()\n\n    def test_can_authenticate_with_username(self):\n        result = self.backend.authenticate(username='foo', password='bar')\n        self.assertEquals(result, self.user)\n\n    def test_can_authenticate_with_email(self):\n        result = self.backend.authenticate(username='baz@example.com', password='bar')\n        self.assertEquals(result, self.user)\n\n    def test_does_not_authenticate_with_invalid_password(self):\n        result = self.backend.authenticate(username='foo', password='pizza')\n        self.assertEquals(result, None)\n\n\nclass GetLoginRedirectTest(TestCase):\n    def make_request(self, next=None):\n        request = HttpRequest()\n        request.META['SERVER_NAME'] = 'testserver'\n        request.META['SERVER_PORT'] = '80'\n        request.session = {}\n        request.user = self.user\n        if next:\n            request.session['_next'] = next\n        return request\n\n    def test_schema_uses_default(self):\n        result = get_login_redirect(self.make_request('http://example.com'))\n        assert result == reverse('sentry-login')\n\n    def test_login_uses_default(self):\n        result = get_login_redirect(self.make_request(reverse('sentry-login')))\n        assert result == reverse('sentry-login')\n\n    def test_no_value_uses_default(self):\n        result = get_login_redirect(self.make_request())\n        assert result == reverse('sentry-login')\n\n\nclass LoginTest(TestCase):\n    def make_request(self, next=None):\n        request = HttpRequest()\n        request.META['REMOTE_ADDR'] = '127.0.0.1'\n        request.session = self.session\n        request.user = AnonymousUser()\n        if next:\n            request.session['_next'] = next\n        return request\n\n    def test_simple(self):\n        request = self.make_request()\n        assert login(request, self.user)\n        assert request.user == self.user\n        assert '_nonce' not in request.session\n\n    def test_with_organization(self):\n        org = self.create_organization(name='foo', owner=self.user)\n        request = self.make_request()\n        assert login(request, self.user, organization_id=org.id)\n        assert request.user == self.user\n        assert request.session['sso'] == six.text_type(org.id)\n\n    def test_with_nonce(self):\n        self.user.refresh_session_nonce()\n        self.user.save()\n        assert self.user.session_nonce is not None\n        request = self.make_request()\n        assert login(request, self.user)\n        assert request.user == self.user\n        assert request.session['_nonce'] == self.user.session_nonce\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "tests.py", "id": "6f789a7562e8aa9a0ad3765bce786c0c", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/auth/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}