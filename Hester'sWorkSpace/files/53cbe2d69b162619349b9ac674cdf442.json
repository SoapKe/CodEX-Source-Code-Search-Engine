{"author": "ansible", "code": "\n  Copyright (c) 2017 Citrix Systems\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nfrom ansible.compat.tests.mock import patch, Mock, MagicMock, call\nfrom units.modules.utils import set_module_args\nfrom .netscaler_module import TestModule, nitro_base_patcher\n\nimport sys\n\nif sys.version_info[:2] != (2, 6):\n    import requests\n\n\nclass TestNetscalerSaveConfigModule(TestModule):\n\n    @classmethod\n    def setUpClass(cls):\n        class MockException(Exception):\n            pass\n\n        cls.MockException = MockException\n\n        cls.nitro_base_patcher = nitro_base_patcher\n\n    @classmethod\n    def tearDownClass(cls):\n        cls.nitro_base_patcher.stop()\n\n    def setUp(self):\n        super(TestNetscalerSaveConfigModule, self).setUp()\n        self.nitro_base_patcher.start()\n\n    def tearDown(self):\n        super(TestNetscalerSaveConfigModule, self).tearDown()\n        self.nitro_base_patcher.stop()\n\n    def test_graceful_nitro_error_on_login(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n        ))\n        from ansible.modules.network.netscaler import netscaler_save_config\n\n        class MockException(Exception):\n            def __init__(self, *args, **kwargs):\n                self.errorcode = 0\n                self.message = ''\n\n        client_mock = Mock()\n        client_mock.login = Mock(side_effect=MockException)\n        m = Mock(return_value=client_mock)\n        with patch('ansible.modules.network.netscaler.netscaler_save_config.get_nitro_client', m):\n            with patch('ansible.modules.network.netscaler.netscaler_save_config.nitro_exception', MockException):\n                self.module = netscaler_save_config\n                result = self.failed()\n                self.assertTrue(result['msg'].startswith('nitro exception'), msg='nitro exception during login not handled properly')\n\n    def test_graceful_no_connection_error(self):\n\n        if sys.version_info[:2] == (2, 6):\n            self.skipTest('requests library not available under python2.6')\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n        ))\n        from ansible.modules.network.netscaler import netscaler_save_config\n\n        class MockException(Exception):\n            pass\n        client_mock = Mock()\n        attrs = {'login.side_effect': requests.exceptions.ConnectionError}\n        client_mock.configure_mock(**attrs)\n        m = Mock(return_value=client_mock)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_save_config',\n            get_nitro_client=m,\n            nitro_exception=MockException,\n        ):\n            self.module = netscaler_save_config\n            result = self.failed()\n            self.assertTrue(result['msg'].startswith('Connection error'), msg='Connection error was not handled gracefully')\n\n    def test_graceful_login_error(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n        ))\n        from ansible.modules.network.netscaler import netscaler_save_config\n\n        if sys.version_info[:2] == (2, 6):\n            self.skipTest('requests library not available under python2.6')\n\n        class MockException(Exception):\n            pass\n        client_mock = Mock()\n        attrs = {'login.side_effect': requests.exceptions.SSLError}\n        client_mock.configure_mock(**attrs)\n        m = Mock(return_value=client_mock)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_save_config',\n            get_nitro_client=m,\n            nitro_exception=MockException,\n        ):\n            self.module = netscaler_save_config\n            result = self.failed()\n            self.assertTrue(result['msg'].startswith('SSL Error'), msg='SSL Error was not handled gracefully')\n\n    def test_save_config_called(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n        ))\n\n        class MockException(Exception):\n            pass\n\n        from ansible.modules.network.netscaler import netscaler_save_config\n        client_mock = Mock()\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_save_config',\n            get_nitro_client=Mock(return_value=client_mock),\n            nitro_exception=MockException,\n        ):\n            self.module = netscaler_save_config\n            self.exited()\n            call_sequence = [call.login(), call.save_config(), call.logout()]\n            client_mock.assert_has_calls(call_sequence)\n", "comments": "   copyright (c) 2017 citrix systems       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       ", "content": "\n#  Copyright (c) 2017 Citrix Systems\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nfrom ansible.compat.tests.mock import patch, Mock, MagicMock, call\nfrom units.modules.utils import set_module_args\nfrom .netscaler_module import TestModule, nitro_base_patcher\n\nimport sys\n\nif sys.version_info[:2] != (2, 6):\n    import requests\n\n\nclass TestNetscalerSaveConfigModule(TestModule):\n\n    @classmethod\n    def setUpClass(cls):\n        class MockException(Exception):\n            pass\n\n        cls.MockException = MockException\n\n        cls.nitro_base_patcher = nitro_base_patcher\n\n    @classmethod\n    def tearDownClass(cls):\n        cls.nitro_base_patcher.stop()\n\n    def setUp(self):\n        super(TestNetscalerSaveConfigModule, self).setUp()\n        self.nitro_base_patcher.start()\n\n    def tearDown(self):\n        super(TestNetscalerSaveConfigModule, self).tearDown()\n        self.nitro_base_patcher.stop()\n\n    def test_graceful_nitro_error_on_login(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n        ))\n        from ansible.modules.network.netscaler import netscaler_save_config\n\n        class MockException(Exception):\n            def __init__(self, *args, **kwargs):\n                self.errorcode = 0\n                self.message = ''\n\n        client_mock = Mock()\n        client_mock.login = Mock(side_effect=MockException)\n        m = Mock(return_value=client_mock)\n        with patch('ansible.modules.network.netscaler.netscaler_save_config.get_nitro_client', m):\n            with patch('ansible.modules.network.netscaler.netscaler_save_config.nitro_exception', MockException):\n                self.module = netscaler_save_config\n                result = self.failed()\n                self.assertTrue(result['msg'].startswith('nitro exception'), msg='nitro exception during login not handled properly')\n\n    def test_graceful_no_connection_error(self):\n\n        if sys.version_info[:2] == (2, 6):\n            self.skipTest('requests library not available under python2.6')\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n        ))\n        from ansible.modules.network.netscaler import netscaler_save_config\n\n        class MockException(Exception):\n            pass\n        client_mock = Mock()\n        attrs = {'login.side_effect': requests.exceptions.ConnectionError}\n        client_mock.configure_mock(**attrs)\n        m = Mock(return_value=client_mock)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_save_config',\n            get_nitro_client=m,\n            nitro_exception=MockException,\n        ):\n            self.module = netscaler_save_config\n            result = self.failed()\n            self.assertTrue(result['msg'].startswith('Connection error'), msg='Connection error was not handled gracefully')\n\n    def test_graceful_login_error(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n        ))\n        from ansible.modules.network.netscaler import netscaler_save_config\n\n        if sys.version_info[:2] == (2, 6):\n            self.skipTest('requests library not available under python2.6')\n\n        class MockException(Exception):\n            pass\n        client_mock = Mock()\n        attrs = {'login.side_effect': requests.exceptions.SSLError}\n        client_mock.configure_mock(**attrs)\n        m = Mock(return_value=client_mock)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_save_config',\n            get_nitro_client=m,\n            nitro_exception=MockException,\n        ):\n            self.module = netscaler_save_config\n            result = self.failed()\n            self.assertTrue(result['msg'].startswith('SSL Error'), msg='SSL Error was not handled gracefully')\n\n    def test_save_config_called(self):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n        ))\n\n        class MockException(Exception):\n            pass\n\n        from ansible.modules.network.netscaler import netscaler_save_config\n        client_mock = Mock()\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_save_config',\n            get_nitro_client=Mock(return_value=client_mock),\n            nitro_exception=MockException,\n        ):\n            self.module = netscaler_save_config\n            self.exited()\n            call_sequence = [call.login(), call.save_config(), call.logout()]\n            client_mock.assert_has_calls(call_sequence)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_netscaler_save_config.py", "id": "53cbe2d69b162619349b9ac674cdf442", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/netscaler/test_netscaler_save_config.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}