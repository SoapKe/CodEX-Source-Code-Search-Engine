{"author": "python-telegram-bot", "code": "\n# -*- coding: utf-8 -*-\n\"\"\"Basic example for a bot that uses inline keyboards.\n\n\n\"\"\"\nimport logging\nfrom telegram import InlineKeyboardButton, InlineKeyboardMarkup\nfrom telegram.ext import Updater, CommandHandler, CallbackQueryHandler\n\nlogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n                    level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\ndef start(bot, update):\n    keyboard = [[InlineKeyboardButton(\"Option 1\", callback_data='1'),\n                 InlineKeyboardButton(\"Option 2\", callback_data='2')],\n\n                [InlineKeyboardButton(\"Option 3\", callback_data='3')]]\n\n    reply_markup = InlineKeyboardMarkup(keyboard)\n\n    update.message.reply_text('Please choose:', reply_markup=reply_markup)\n\n\ndef button(bot, update):\n    query = update.callback_query\n\n    bot.edit_message_text(text=\"Selected option: {}\".format(query.data),\n                          chat_id=query.message.chat_id,\n                          message_id=query.message.message_id)\n\n\ndef help(bot, update):\n    update.message.reply_text(\"Use /start to test this bot.\")\n\n\ndef error(bot, update, error):\n    \"\"\"Log Errors caused by Updates.\"\"\"\n    logger.warning('Update \"%s\" caused error \"%s\"', update, error)\n\n\ndef main():\n    \n    updater = Updater(\"TOKEN\")\n\n    updater.dispatcher.add_handler(CommandHandler('start', start))\n    updater.dispatcher.add_handler(CallbackQueryHandler(button))\n    updater.dispatcher.add_handler(CommandHandler('help', help))\n    updater.dispatcher.add_error_handler(error)\n\n    \n    updater.start_polling()\n\n    \n    \n    updater.idle()\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "   basic example bot uses inline keyboards     this program dedicated public domain cc0 license      import logging telegram import inlinekeyboardbutton  inlinekeyboardmarkup telegram ext import updater  commandhandler  callbackqueryhandler  logging basicconfig(format   (asctime)s    (name)s    (levelname)s    (message)s                       level logging info) logger   logging getlogger(  name  )   def start(bot  update)      keyboard     inlinekeyboardbutton( option 1   callback data  1 )                   inlinekeyboardbutton( option 2   callback data  2 )                     inlinekeyboardbutton( option 3   callback data  3 )        reply markup   inlinekeyboardmarkup(keyboard)      update message reply text( please choose    reply markup reply markup)   def button(bot  update)      query   update callback query      bot edit message text(text  selected option      format(query data)                            chat id query message chat id                            message id query message message id)   def help(bot  update)      update message reply text( use  start test bot  )   def error(bot  update  error)         log errors caused updates         usr bin env python        coding  utf 8        this program dedicated public domain cc0 license     create updater pass bot token     start bot    run bot user presses ctrl c process receives sigint     sigterm sigabrt ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"Basic example for a bot that uses inline keyboards.\n\n# This program is dedicated to the public domain under the CC0 license.\n\"\"\"\nimport logging\nfrom telegram import InlineKeyboardButton, InlineKeyboardMarkup\nfrom telegram.ext import Updater, CommandHandler, CallbackQueryHandler\n\nlogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n                    level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\ndef start(bot, update):\n    keyboard = [[InlineKeyboardButton(\"Option 1\", callback_data='1'),\n                 InlineKeyboardButton(\"Option 2\", callback_data='2')],\n\n                [InlineKeyboardButton(\"Option 3\", callback_data='3')]]\n\n    reply_markup = InlineKeyboardMarkup(keyboard)\n\n    update.message.reply_text('Please choose:', reply_markup=reply_markup)\n\n\ndef button(bot, update):\n    query = update.callback_query\n\n    bot.edit_message_text(text=\"Selected option: {}\".format(query.data),\n                          chat_id=query.message.chat_id,\n                          message_id=query.message.message_id)\n\n\ndef help(bot, update):\n    update.message.reply_text(\"Use /start to test this bot.\")\n\n\ndef error(bot, update, error):\n    \"\"\"Log Errors caused by Updates.\"\"\"\n    logger.warning('Update \"%s\" caused error \"%s\"', update, error)\n\n\ndef main():\n    # Create the Updater and pass it your bot's token.\n    updater = Updater(\"TOKEN\")\n\n    updater.dispatcher.add_handler(CommandHandler('start', start))\n    updater.dispatcher.add_handler(CallbackQueryHandler(button))\n    updater.dispatcher.add_handler(CommandHandler('help', help))\n    updater.dispatcher.add_error_handler(error)\n\n    # Start the Bot\n    updater.start_polling()\n\n    # Run the bot until the user presses Ctrl-C or the process receives SIGINT,\n    # SIGTERM or SIGABRT\n    updater.idle()\n\n\nif __name__ == '__main__':\n    main()\n", "description": "We have made you a wrapper you can't refuse", "file_name": "inlinekeyboard.py", "id": "5795d9a7e132df76569029ddbae4bd3f", "language": "Python", "project_name": "python-telegram-bot", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/python-telegram-bot-python-telegram-bot/python-telegram-bot-python-telegram-bot-3ccf40e/examples/inlinekeyboard.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:32:55Z", "url": "https://github.com/python-telegram-bot/python-telegram-bot", "wiki": true}