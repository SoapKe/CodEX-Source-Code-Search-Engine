{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport time\nimport hmac\nimport hashlib\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    sanitized_Request,\n    urlencode_postdata,\n    xpath_text,\n)\n\n\nclass AtresPlayerIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?atresplayer\\.com/television/[^/]+/[^/]+/[^/]+/(?P<id>.+?)_\\d+\\.html'\n    _NETRC_MACHINE = 'atresplayer'\n    _TESTS = [\n        {\n            'url': 'http://www.atresplayer.com/television/programas/el-club-de-la-comedia/temporada-4/capitulo-10-especial-solidario-nochebuena_2014122100174.html',\n            'md5': 'efd56753cda1bb64df52a3074f62e38a',\n            'info_dict': {\n                'id': 'capitulo-10-especial-solidario-nochebuena',\n                'ext': 'mp4',\n                'title': 'Especial Solidario de Nochebuena',\n                'description': 'md5:e2d52ff12214fa937107d21064075bf1',\n                'duration': 5527.6,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'skip': 'This video is only available for registered users'\n        },\n        {\n            'url': 'http://www.atresplayer.com/television/especial/videoencuentros/temporada-1/capitulo-112-david-bustamante_2014121600375.html',\n            'md5': '6e52cbb513c405e403dbacb7aacf8747',\n            'info_dict': {\n                'id': 'capitulo-112-david-bustamante',\n                'ext': 'flv',\n                'title': 'David Bustamante',\n                'description': 'md5:f33f1c0a05be57f6708d4dd83a3b81c6',\n                'duration': 1439.0,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n        },\n        {\n            'url': 'http://www.atresplayer.com/television/series/el-secreto-de-puente-viejo/el-chico-de-los-tres-lunares/capitulo-977-29-12-14_2014122400174.html',\n            'only_matching': True,\n        },\n    ]\n\n    _USER_AGENT = 'Dalvik/1.6.0 (Linux; U; Android 4.3; GT-I9300 Build/JSS15J'\n    _MAGIC = 'QWtMLXs414Yo+c\n    _TIMESTAMP_SHIFT = 30000\n\n    _TIME_API_URL = 'http://servicios.atresplayer.com/api/admin/time.json'\n    _URL_VIDEO_TEMPLATE = 'https://servicios.atresplayer.com/api/urlVideo/{1}/{0}/{1}|{2}|{3}.json'\n    _PLAYER_URL_TEMPLATE = 'https://servicios.atresplayer.com/episode/getplayer.json?episodePk=%s'\n    _EPISODE_URL_TEMPLATE = 'http://www.atresplayer.com/episodexml/%s'\n\n    _LOGIN_URL = 'https://servicios.atresplayer.com/j_spring_security_check'\n\n    _ERRORS = {\n        'UNPUBLISHED': 'We\\'re sorry, but this video is not yet available.',\n        'DELETED': 'This video has expired and is no longer available for online streaming.',\n        'GEOUNPUBLISHED': 'We\\'re sorry, but this video is not available in your region due to right restrictions.',\n        \n    }\n\n    def _real_initialize(self):\n        self._login()\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n\n        login_form = {\n            'j_username': username,\n            'j_password': password,\n        }\n\n        request = sanitized_Request(\n            self._LOGIN_URL, urlencode_postdata(login_form))\n        request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        response = self._download_webpage(\n            request, None, 'Logging in')\n\n        error = self._html_search_regex(\n            r'(?s)<ul[^>]+class=\"[^\"]*\\blist_error\\b[^\"]*\">(.+?)</ul>',\n            response, 'error', default=None)\n        if error:\n            raise ExtractorError(\n                'Unable to login: %s' % error, expected=True)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        episode_id = self._search_regex(\n            r'episode=\"([^\"]+)\"', webpage, 'episode id')\n\n        request = sanitized_Request(\n            self._PLAYER_URL_TEMPLATE % episode_id,\n            headers={'User-Agent': self._USER_AGENT})\n        player = self._download_json(request, episode_id, 'Downloading player JSON')\n\n        episode_type = player.get('typeOfEpisode')\n        error_message = self._ERRORS.get(episode_type)\n        if error_message:\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, error_message), expected=True)\n\n        formats = []\n        video_url = player.get('urlVideo')\n        if video_url:\n            format_info = {\n                'url': video_url,\n                'format_id': 'http',\n            }\n            mobj = re.search(r'(?P<bitrate>\\d+)K_(?P<width>\\d+)x(?P<height>\\d+)', video_url)\n            if mobj:\n                format_info.update({\n                    'width': int_or_none(mobj.group('width')),\n                    'height': int_or_none(mobj.group('height')),\n                    'tbr': int_or_none(mobj.group('bitrate')),\n                })\n            formats.append(format_info)\n\n        timestamp = int_or_none(self._download_webpage(\n            self._TIME_API_URL,\n            video_id, 'Downloading timestamp', fatal=False), 1000, time.time())\n        timestamp_shifted = compat_str(timestamp + self._TIMESTAMP_SHIFT)\n        token = hmac.new(\n            self._MAGIC.encode('ascii'),\n            (episode_id + timestamp_shifted).encode('utf-8'), hashlib.md5\n        ).hexdigest()\n\n        request = sanitized_Request(\n            self._URL_VIDEO_TEMPLATE.format('windows', episode_id, timestamp_shifted, token),\n            headers={'User-Agent': self._USER_AGENT})\n\n        fmt_json = self._download_json(\n            request, video_id, 'Downloading windows video JSON')\n\n        result = fmt_json.get('resultDes')\n        if result.lower() != 'ok':\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, result), expected=True)\n\n        for format_id, video_url in fmt_json['resultObject'].items():\n            if format_id == 'token' or not video_url.startswith('http'):\n                continue\n            if 'geodeswowsmpra3player' in video_url:\n                \n                \n                \n                continue\n            video_url_hd = video_url.replace('free_es', 'es')\n            formats.extend(self._extract_f4m_formats(\n                video_url_hd[:-9] + '/manifest.f4m', video_id, f4m_id='hds',\n                fatal=False))\n            formats.extend(self._extract_mpd_formats(\n                video_url_hd[:-9] + '/manifest.mpd', video_id, mpd_id='dash',\n                fatal=False))\n        self._sort_formats(formats)\n\n        path_data = player.get('pathData')\n\n        episode = self._download_xml(\n            self._EPISODE_URL_TEMPLATE % path_data, video_id,\n            'Downloading episode XML')\n\n        duration = float_or_none(xpath_text(\n            episode, './media/asset/info/technical/contentDuration', 'duration'))\n\n        art = episode.find('./media/asset/info/art')\n        title = xpath_text(art, './name', 'title')\n        description = xpath_text(art, './description', 'description')\n        thumbnail = xpath_text(episode, './media/asset/files/background', 'thumbnail')\n\n        subtitles = {}\n        subtitle_url = xpath_text(episode, './media/asset/files/subtitle', 'subtitle')\n        if subtitle_url:\n            subtitles['es'] = [{\n                'ext': 'srt',\n                'url': subtitle_url,\n            }]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "comments": "#_+Q#K@NN)'\n# 'PREMIUM': 'PREMIUM',\n# f4m_path = video_url.split('smil:', 1)[-1].split('free_', 1)[0]\n# f4m_url = 'http://drg.antena3.com/{0}hds/es/sd.f4m'.format(f4m_path)\n# this videos are protected by DRM, the f4m downloader doesn't support them\n", "content": "from __future__ import unicode_literals\n\nimport time\nimport hmac\nimport hashlib\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    sanitized_Request,\n    urlencode_postdata,\n    xpath_text,\n)\n\n\nclass AtresPlayerIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?atresplayer\\.com/television/[^/]+/[^/]+/[^/]+/(?P<id>.+?)_\\d+\\.html'\n    _NETRC_MACHINE = 'atresplayer'\n    _TESTS = [\n        {\n            'url': 'http://www.atresplayer.com/television/programas/el-club-de-la-comedia/temporada-4/capitulo-10-especial-solidario-nochebuena_2014122100174.html',\n            'md5': 'efd56753cda1bb64df52a3074f62e38a',\n            'info_dict': {\n                'id': 'capitulo-10-especial-solidario-nochebuena',\n                'ext': 'mp4',\n                'title': 'Especial Solidario de Nochebuena',\n                'description': 'md5:e2d52ff12214fa937107d21064075bf1',\n                'duration': 5527.6,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'skip': 'This video is only available for registered users'\n        },\n        {\n            'url': 'http://www.atresplayer.com/television/especial/videoencuentros/temporada-1/capitulo-112-david-bustamante_2014121600375.html',\n            'md5': '6e52cbb513c405e403dbacb7aacf8747',\n            'info_dict': {\n                'id': 'capitulo-112-david-bustamante',\n                'ext': 'flv',\n                'title': 'David Bustamante',\n                'description': 'md5:f33f1c0a05be57f6708d4dd83a3b81c6',\n                'duration': 1439.0,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n        },\n        {\n            'url': 'http://www.atresplayer.com/television/series/el-secreto-de-puente-viejo/el-chico-de-los-tres-lunares/capitulo-977-29-12-14_2014122400174.html',\n            'only_matching': True,\n        },\n    ]\n\n    _USER_AGENT = 'Dalvik/1.6.0 (Linux; U; Android 4.3; GT-I9300 Build/JSS15J'\n    _MAGIC = 'QWtMLXs414Yo+c#_+Q#K@NN)'\n    _TIMESTAMP_SHIFT = 30000\n\n    _TIME_API_URL = 'http://servicios.atresplayer.com/api/admin/time.json'\n    _URL_VIDEO_TEMPLATE = 'https://servicios.atresplayer.com/api/urlVideo/{1}/{0}/{1}|{2}|{3}.json'\n    _PLAYER_URL_TEMPLATE = 'https://servicios.atresplayer.com/episode/getplayer.json?episodePk=%s'\n    _EPISODE_URL_TEMPLATE = 'http://www.atresplayer.com/episodexml/%s'\n\n    _LOGIN_URL = 'https://servicios.atresplayer.com/j_spring_security_check'\n\n    _ERRORS = {\n        'UNPUBLISHED': 'We\\'re sorry, but this video is not yet available.',\n        'DELETED': 'This video has expired and is no longer available for online streaming.',\n        'GEOUNPUBLISHED': 'We\\'re sorry, but this video is not available in your region due to right restrictions.',\n        # 'PREMIUM': 'PREMIUM',\n    }\n\n    def _real_initialize(self):\n        self._login()\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n\n        login_form = {\n            'j_username': username,\n            'j_password': password,\n        }\n\n        request = sanitized_Request(\n            self._LOGIN_URL, urlencode_postdata(login_form))\n        request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        response = self._download_webpage(\n            request, None, 'Logging in')\n\n        error = self._html_search_regex(\n            r'(?s)<ul[^>]+class=\"[^\"]*\\blist_error\\b[^\"]*\">(.+?)</ul>',\n            response, 'error', default=None)\n        if error:\n            raise ExtractorError(\n                'Unable to login: %s' % error, expected=True)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        episode_id = self._search_regex(\n            r'episode=\"([^\"]+)\"', webpage, 'episode id')\n\n        request = sanitized_Request(\n            self._PLAYER_URL_TEMPLATE % episode_id,\n            headers={'User-Agent': self._USER_AGENT})\n        player = self._download_json(request, episode_id, 'Downloading player JSON')\n\n        episode_type = player.get('typeOfEpisode')\n        error_message = self._ERRORS.get(episode_type)\n        if error_message:\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, error_message), expected=True)\n\n        formats = []\n        video_url = player.get('urlVideo')\n        if video_url:\n            format_info = {\n                'url': video_url,\n                'format_id': 'http',\n            }\n            mobj = re.search(r'(?P<bitrate>\\d+)K_(?P<width>\\d+)x(?P<height>\\d+)', video_url)\n            if mobj:\n                format_info.update({\n                    'width': int_or_none(mobj.group('width')),\n                    'height': int_or_none(mobj.group('height')),\n                    'tbr': int_or_none(mobj.group('bitrate')),\n                })\n            formats.append(format_info)\n\n        timestamp = int_or_none(self._download_webpage(\n            self._TIME_API_URL,\n            video_id, 'Downloading timestamp', fatal=False), 1000, time.time())\n        timestamp_shifted = compat_str(timestamp + self._TIMESTAMP_SHIFT)\n        token = hmac.new(\n            self._MAGIC.encode('ascii'),\n            (episode_id + timestamp_shifted).encode('utf-8'), hashlib.md5\n        ).hexdigest()\n\n        request = sanitized_Request(\n            self._URL_VIDEO_TEMPLATE.format('windows', episode_id, timestamp_shifted, token),\n            headers={'User-Agent': self._USER_AGENT})\n\n        fmt_json = self._download_json(\n            request, video_id, 'Downloading windows video JSON')\n\n        result = fmt_json.get('resultDes')\n        if result.lower() != 'ok':\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, result), expected=True)\n\n        for format_id, video_url in fmt_json['resultObject'].items():\n            if format_id == 'token' or not video_url.startswith('http'):\n                continue\n            if 'geodeswowsmpra3player' in video_url:\n                # f4m_path = video_url.split('smil:', 1)[-1].split('free_', 1)[0]\n                # f4m_url = 'http://drg.antena3.com/{0}hds/es/sd.f4m'.format(f4m_path)\n                # this videos are protected by DRM, the f4m downloader doesn't support them\n                continue\n            video_url_hd = video_url.replace('free_es', 'es')\n            formats.extend(self._extract_f4m_formats(\n                video_url_hd[:-9] + '/manifest.f4m', video_id, f4m_id='hds',\n                fatal=False))\n            formats.extend(self._extract_mpd_formats(\n                video_url_hd[:-9] + '/manifest.mpd', video_id, mpd_id='dash',\n                fatal=False))\n        self._sort_formats(formats)\n\n        path_data = player.get('pathData')\n\n        episode = self._download_xml(\n            self._EPISODE_URL_TEMPLATE % path_data, video_id,\n            'Downloading episode XML')\n\n        duration = float_or_none(xpath_text(\n            episode, './media/asset/info/technical/contentDuration', 'duration'))\n\n        art = episode.find('./media/asset/info/art')\n        title = xpath_text(art, './name', 'title')\n        description = xpath_text(art, './description', 'description')\n        thumbnail = xpath_text(episode, './media/asset/files/background', 'thumbnail')\n\n        subtitles = {}\n        subtitle_url = xpath_text(episode, './media/asset/files/subtitle', 'subtitle')\n        if subtitle_url:\n            subtitles['es'] = [{\n                'ext': 'srt',\n                'url': subtitle_url,\n            }]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "atresplayer.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/atresplayer.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}