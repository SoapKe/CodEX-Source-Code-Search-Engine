{"author": "webpy", "code": "\"\"\"\nOutputs web.py docs as html\nversion 2.0: documents all code, and indents nicely.\nBy Colin Rothwell (TheBoff)\n\"\"\"\nimport sys\nimport inspect\nimport markdown\nsys.path.insert(0, '..')\n\nfrom web.net import websafe\n\nALL_MODULES = [\n    'web.application',\n    'web.contrib.template',\n    'web.db',\n    'web.debugerror',\n    'web.form',\n    'web.http',\n    'web.httpserver',\n    'web.net',\n    'web.session',\n    'web.template',\n    'web.utils',\n    'web.webapi',\n    'web.webopenid',\n    'web.wsgi'\n]\n\nitem_start = '<code class=\"%s\">'\nitem_end = '</code>'\n\nindent_amount = 30\n\ndoc_these = ( \n    'module',\n    'classobj',\n    'instancemethod',\n    'function',\n    'type',\n    'property',    \n)\n\nnot_these_names = ( \n    'fget',\n    'fset',\n    'fdel',\n    'storage', \n    'memoize',\n    'iterbetter',\n    'capturesstdout',\n    'profile',\n    'threadeddict',\n    'd', \n)\n\ncss = '''\n<style type=\"text/css\">\n.module {\n    font-size: 130%;\n    font-weight: bold;\n}\n\n.function, .class, .type {\n    font-size: 120%;\n    font-weight: bold;\n}\n\n.method, .property {\n    font-size: 115%;\n    font-weight: bold;\n}\n\n.ts {\n    font-size: small;\n    font-weight: lighter;\n    color: grey;\n}\n\n\n    position: fixed;\n    top: 0;\n    right: 0;\n    padding: 5px;\n    background: rgba(255, 255, 255, 0.5);\n}\n\n\n    font-weight: bold;\n}\n</style>\n'''\n\n\nindent_start = '<div style=\"margin-left:%dpx\">'\nindent_end = '</div>'\n\nheader = '''\n<div id=\"contents_link\">\n<a href=\"#top\">Back to contents</a>\n</div>\n'''\n\ndef type_string(ob):\n    return str(type(ob)).split(\"'\")[1]\n    \ndef ts_css(text):\n    \"\"\"applies nice css to the type string\"\"\"\n    return '<span class=\"ts\">%s</span>' % text\n    \ndef arg_string(func):\n    \"\"\"Returns a nice argstring for a function or method\"\"\"\n    return inspect.formatargspec(*inspect.getargspec(func))\n\ndef recurse_over(ob, name, indent_level=0):\n    ts = type_string(ob)    \n    if not ts in doc_these: return \n    if indent_level > 0 and ts == 'module': return \n    if name in not_these_names: return \n    \n    indent = indent_level * indent_amount \n    ds_indent = indent + (indent_amount / 2)\n    if indent_level > 0: print indent_start % indent\n    \n    argstr = ''\n    if ts.endswith(('function', 'method')):\n        argstr = arg_string(ob)\n    elif ts == 'classobj' or ts == 'type':\n        if ts == 'classobj': ts = 'class'\n        if hasattr(ob, '__init__'):\n            if type_string(ob.__init__) == 'instancemethod':\n                argstr = arg_string(ob.__init__)\n        else:\n            argstr = '(self)'\n    if ts == 'instancemethod': ts = 'method' \n    \n    ds = inspect.getdoc(ob)\n    if ds is None: ds = ''\n    ds = markdown.Markdown(ds)\n    \n    mlink = '<a name=\"%s\">' % name if ts == 'module' else '' \n    mend = '</a>' if ts == 'module' else ''\n    print ''.join(('<p>', ts_css(ts), item_start % ts, ' ', mlink, name,\n                   websafe(argstr), mend, item_end, '<br />'))\n    print ''.join((indent_start % ds_indent, ds, indent_end, '</p>'))\n    \n    members = ''\n    \n    if hasattr(ob, '__all__'): members = ob.__all__\n    else: members = [item for item in dir(ob) if not item.startswith('_')] \n    \n    if not 'im_class' in members:    \n        for name in members:\n            recurse_over(getattr(ob, name), name, indent_level + 1)\n    if indent_level > 0: print indent_end\n\ndef main(modules=None):\n    modules = modules or ALL_MODULES\n    print '<div>' \n    print css\n    print header\n    print '<ul>'\n    for name in modules:\n        print '<li><a href=\"#%(name)s\">%(name)s</a></li>' % dict(name=name)\n    print '</ul>' \n    for name in modules:\n        try:\n            mod = __import__(name, {}, {}, 'x')\n            recurse_over(mod, name)\n        except ImportError as e:\n            print >> sys.stderr, \"Unable to import module %s (Error: %s)\" % (name, e)\n            pass\n    print '</div>'\n        \nif __name__ == '__main__':\n    main(sys.argv[1:])\n", "comments": "    outputs web py docs html version 2 0  documents code  indents nicely  by colin rothwell (theboff)     import sys import inspect import markdown sys path insert(0      )  web net import websafe  all modules          web application        web contrib template        web db        web debugerror        web form        web http        web httpserver        web net        web session        web template        web utils        web webapi        web webopenid        web wsgi     item start     code class      item end      code    indent amount   30  doc   (  these types object docced      module        classobj        instancemethod        function        type        property       )  names   (  any particular object names doced      fget        fset        fdel        storage    these stop lower case versions getting docced      memoize        iterbetter        capturesstdout        profile        threadeddict           don know  conclude doc )  css        style type  text css    module       font size  130       font weight  bold      function   class   type       font size  120       font weight  bold      method   property       font size  115       font weight  bold      ts       font size  small      font weight  lighter      color  grey      contents link       position  fixed      top  0      right  0      padding  5px      background  rgba(255  255  255  0 5)      contents link hover       font weight  bold      style        indent start     div style  margin left  dpx    indent end      div    header        div id  contents link    href   top  back contents     div       def type string(ob)      return str(type(ob)) split(   ) 1       def ts css(text)         applies nice css type string        return   span class  ts    span     text      def arg string(func)         returns nice argstring function method          style type  text css    module       font size  130       font weight  bold      function   class   type       font size  120       font weight  bold      method   property       font size  115       font weight  bold      ts       font size  small      font weight  lighter      color  grey      contents link       position  fixed      top  0      right  0      padding  5px      background  rgba(255  255  255  0 5)      contents link hover       font weight  bold      style        indent start     div style  margin left  dpx    indent end      div    header        div id  contents link    href   top  back contents     div        these types object docced   any particular object names doced   these stop lower case versions getting docced   don know  conclude doc   contents link     contents link hover     stos docced getting docced   stops getting stdlib       stops things want getting docced   indents nicely   looks much nicer   although    join looks wierd  alot faster string addition       stops markdown vandalising html  ", "content": "\"\"\"\nOutputs web.py docs as html\nversion 2.0: documents all code, and indents nicely.\nBy Colin Rothwell (TheBoff)\n\"\"\"\nimport sys\nimport inspect\nimport markdown\nsys.path.insert(0, '..')\n\nfrom web.net import websafe\n\nALL_MODULES = [\n    'web.application',\n    'web.contrib.template',\n    'web.db',\n    'web.debugerror',\n    'web.form',\n    'web.http',\n    'web.httpserver',\n    'web.net',\n    'web.session',\n    'web.template',\n    'web.utils',\n    'web.webapi',\n    'web.webopenid',\n    'web.wsgi'\n]\n\nitem_start = '<code class=\"%s\">'\nitem_end = '</code>'\n\nindent_amount = 30\n\ndoc_these = ( #These are the types of object that should be docced\n    'module',\n    'classobj',\n    'instancemethod',\n    'function',\n    'type',\n    'property',    \n)\n\nnot_these_names = ( #Any particular object names that shouldn't be doced\n    'fget',\n    'fset',\n    'fdel',\n    'storage', #These stop the lower case versions getting docced\n    'memoize',\n    'iterbetter',\n    'capturesstdout',\n    'profile',\n    'threadeddict',\n    'd', #Don't know what this is, but only only conclude it shouldn't be doc'd\n)\n\ncss = '''\n<style type=\"text/css\">\n.module {\n    font-size: 130%;\n    font-weight: bold;\n}\n\n.function, .class, .type {\n    font-size: 120%;\n    font-weight: bold;\n}\n\n.method, .property {\n    font-size: 115%;\n    font-weight: bold;\n}\n\n.ts {\n    font-size: small;\n    font-weight: lighter;\n    color: grey;\n}\n\n#contents_link {\n    position: fixed;\n    top: 0;\n    right: 0;\n    padding: 5px;\n    background: rgba(255, 255, 255, 0.5);\n}\n\n#contents_link a:hover {\n    font-weight: bold;\n}\n</style>\n'''\n\n\nindent_start = '<div style=\"margin-left:%dpx\">'\nindent_end = '</div>'\n\nheader = '''\n<div id=\"contents_link\">\n<a href=\"#top\">Back to contents</a>\n</div>\n'''\n\ndef type_string(ob):\n    return str(type(ob)).split(\"'\")[1]\n    \ndef ts_css(text):\n    \"\"\"applies nice css to the type string\"\"\"\n    return '<span class=\"ts\">%s</span>' % text\n    \ndef arg_string(func):\n    \"\"\"Returns a nice argstring for a function or method\"\"\"\n    return inspect.formatargspec(*inspect.getargspec(func))\n\ndef recurse_over(ob, name, indent_level=0):\n    ts = type_string(ob)    \n    if not ts in doc_these: return #stos what shouldn't be docced getting docced\n    if indent_level > 0 and ts == 'module': return #Stops it getting into the stdlib    \n    if name in not_these_names: return #Stops things we don't want getting docced\n    \n    indent = indent_level * indent_amount #Indents nicely\n    ds_indent = indent + (indent_amount / 2)\n    if indent_level > 0: print indent_start % indent\n    \n    argstr = ''\n    if ts.endswith(('function', 'method')):\n        argstr = arg_string(ob)\n    elif ts == 'classobj' or ts == 'type':\n        if ts == 'classobj': ts = 'class'\n        if hasattr(ob, '__init__'):\n            if type_string(ob.__init__) == 'instancemethod':\n                argstr = arg_string(ob.__init__)\n        else:\n            argstr = '(self)'\n    if ts == 'instancemethod': ts = 'method' #looks much nicer\n    \n    ds = inspect.getdoc(ob)\n    if ds is None: ds = ''\n    ds = markdown.Markdown(ds)\n    \n    mlink = '<a name=\"%s\">' % name if ts == 'module' else '' \n    mend = '</a>' if ts == 'module' else ''\n    print ''.join(('<p>', ts_css(ts), item_start % ts, ' ', mlink, name,\n                   websafe(argstr), mend, item_end, '<br />'))\n    print ''.join((indent_start % ds_indent, ds, indent_end, '</p>'))\n    #Although ''.join looks wierd, it's alot faster is string addition    \n    members = ''\n    \n    if hasattr(ob, '__all__'): members = ob.__all__\n    else: members = [item for item in dir(ob) if not item.startswith('_')] \n    \n    if not 'im_class' in members:    \n        for name in members:\n            recurse_over(getattr(ob, name), name, indent_level + 1)\n    if indent_level > 0: print indent_end\n\ndef main(modules=None):\n    modules = modules or ALL_MODULES\n    print '<div>' #Stops markdown vandalising my html.\n    print css\n    print header\n    print '<ul>'\n    for name in modules:\n        print '<li><a href=\"#%(name)s\">%(name)s</a></li>' % dict(name=name)\n    print '</ul>' \n    for name in modules:\n        try:\n            mod = __import__(name, {}, {}, 'x')\n            recurse_over(mod, name)\n        except ImportError as e:\n            print >> sys.stderr, \"Unable to import module %s (Error: %s)\" % (name, e)\n            pass\n    print '</div>'\n        \nif __name__ == '__main__':\n    main(sys.argv[1:])\n", "description": "web.py is a web framework for python that is as simple as it is powerful. ", "file_name": "makedoc.py", "id": "ceca17130bc30febc284ce13136ba55e", "language": "Python", "project_name": "webpy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/webpy-webpy/webpy-webpy-817c979/tools/makedoc.py", "save_time": "", "source": "", "update_at": "2018-03-16T08:06:22Z", "url": "https://github.com/webpy/webpy", "wiki": false}