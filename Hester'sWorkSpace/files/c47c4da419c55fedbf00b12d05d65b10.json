{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..aes import aes_decrypt_text\nfrom ..compat import (\n    compat_str,\n    compat_urllib_parse_unquote,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    str_to_int,\n    strip_or_none,\n)\n\n\nclass KeezMoviesIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?keezmovies\\.com/video/(?:(?P<display_id>[^/]+)-)?(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.keezmovies.com/video/petite-asian-lady-mai-playing-in-bathtub-1214711',\n        'md5': '1c1e75d22ffa53320f45eeb07bc4cdc0',\n        'info_dict': {\n            'id': '1214711',\n            'display_id': 'petite-asian-lady-mai-playing-in-bathtub',\n            'ext': 'mp4',\n            'title': 'Petite Asian Lady Mai Playing In Bathtub',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'view_count': int,\n            'age_limit': 18,\n        }\n    }, {\n        'url': 'http://www.keezmovies.com/video/1214711',\n        'only_matching': True,\n    }]\n\n    def _extract_info(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = (mobj.group('display_id')\n                      if 'display_id' in mobj.groupdict()\n                      else None) or mobj.group('id')\n\n        webpage = self._download_webpage(\n            url, display_id, headers={'Cookie': 'age_verified=1'})\n\n        formats = []\n        format_urls = set()\n\n        title = None\n        thumbnail = None\n        duration = None\n        encrypted = False\n\n        def extract_format(format_url, height=None):\n            if not isinstance(format_url, compat_str) or not format_url.startswith('http'):\n                return\n            if format_url in format_urls:\n                return\n            format_urls.add(format_url)\n            tbr = int_or_none(self._search_regex(\n                r'[/_](\\d+)[kK][/_]', format_url, 'tbr', default=None))\n            if not height:\n                height = int_or_none(self._search_regex(\n                    r'[/_](\\d+)[pP][/_]', format_url, 'height', default=None))\n            if encrypted:\n                format_url = aes_decrypt_text(\n                    video_url, title, 32).decode('utf-8')\n            formats.append({\n                'url': format_url,\n                'format_id': '%dp' % height if height else None,\n                'height': height,\n                'tbr': tbr,\n            })\n\n        flashvars = self._parse_json(\n            self._search_regex(\n                r'flashvars\\s*=\\s*({.+?});', webpage,\n                'flashvars', default='{}'),\n            display_id, fatal=False)\n\n        if flashvars:\n            title = flashvars.get('video_title')\n            thumbnail = flashvars.get('image_url')\n            duration = int_or_none(flashvars.get('video_duration'))\n            encrypted = flashvars.get('encrypted') is True\n            for key, value in flashvars.items():\n                mobj = re.search(r'quality_(\\d+)[pP]', key)\n                if mobj:\n                    extract_format(value, int(mobj.group(1)))\n            video_url = flashvars.get('video_url')\n            if video_url and determine_ext(video_url, None):\n                extract_format(video_url)\n\n        video_url = self._html_search_regex(\n            r'flashvars\\.video_url\\s*=\\s*([\"\\'])(?P<url>http.+?)\\1',\n            webpage, 'video url', default=None, group='url')\n        if video_url:\n            extract_format(compat_urllib_parse_unquote(video_url))\n\n        if not formats:\n            if 'title=\"This video is no longer available\"' in webpage:\n                raise ExtractorError(\n                    'Video %s is no longer available' % video_id, expected=True)\n\n        self._sort_formats(formats)\n\n        if not title:\n            title = self._html_search_regex(\n                r'<h1[^>]*>([^<]+)', webpage, 'title')\n\n        return webpage, {\n            'id': video_id,\n            'display_id': display_id,\n            'title': strip_or_none(title),\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'age_limit': 18,\n            'formats': formats,\n        }\n\n    def _real_extract(self, url):\n        webpage, info = self._extract_info(url)\n        info['view_count'] = str_to_int(self._search_regex(\n            r'<b>([\\d,.]+)</b> Views?', webpage, 'view count', fatal=False))\n        return info\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..aes import aes_decrypt_text\nfrom ..compat import (\n    compat_str,\n    compat_urllib_parse_unquote,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    str_to_int,\n    strip_or_none,\n)\n\n\nclass KeezMoviesIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?keezmovies\\.com/video/(?:(?P<display_id>[^/]+)-)?(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.keezmovies.com/video/petite-asian-lady-mai-playing-in-bathtub-1214711',\n        'md5': '1c1e75d22ffa53320f45eeb07bc4cdc0',\n        'info_dict': {\n            'id': '1214711',\n            'display_id': 'petite-asian-lady-mai-playing-in-bathtub',\n            'ext': 'mp4',\n            'title': 'Petite Asian Lady Mai Playing In Bathtub',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'view_count': int,\n            'age_limit': 18,\n        }\n    }, {\n        'url': 'http://www.keezmovies.com/video/1214711',\n        'only_matching': True,\n    }]\n\n    def _extract_info(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = (mobj.group('display_id')\n                      if 'display_id' in mobj.groupdict()\n                      else None) or mobj.group('id')\n\n        webpage = self._download_webpage(\n            url, display_id, headers={'Cookie': 'age_verified=1'})\n\n        formats = []\n        format_urls = set()\n\n        title = None\n        thumbnail = None\n        duration = None\n        encrypted = False\n\n        def extract_format(format_url, height=None):\n            if not isinstance(format_url, compat_str) or not format_url.startswith('http'):\n                return\n            if format_url in format_urls:\n                return\n            format_urls.add(format_url)\n            tbr = int_or_none(self._search_regex(\n                r'[/_](\\d+)[kK][/_]', format_url, 'tbr', default=None))\n            if not height:\n                height = int_or_none(self._search_regex(\n                    r'[/_](\\d+)[pP][/_]', format_url, 'height', default=None))\n            if encrypted:\n                format_url = aes_decrypt_text(\n                    video_url, title, 32).decode('utf-8')\n            formats.append({\n                'url': format_url,\n                'format_id': '%dp' % height if height else None,\n                'height': height,\n                'tbr': tbr,\n            })\n\n        flashvars = self._parse_json(\n            self._search_regex(\n                r'flashvars\\s*=\\s*({.+?});', webpage,\n                'flashvars', default='{}'),\n            display_id, fatal=False)\n\n        if flashvars:\n            title = flashvars.get('video_title')\n            thumbnail = flashvars.get('image_url')\n            duration = int_or_none(flashvars.get('video_duration'))\n            encrypted = flashvars.get('encrypted') is True\n            for key, value in flashvars.items():\n                mobj = re.search(r'quality_(\\d+)[pP]', key)\n                if mobj:\n                    extract_format(value, int(mobj.group(1)))\n            video_url = flashvars.get('video_url')\n            if video_url and determine_ext(video_url, None):\n                extract_format(video_url)\n\n        video_url = self._html_search_regex(\n            r'flashvars\\.video_url\\s*=\\s*([\"\\'])(?P<url>http.+?)\\1',\n            webpage, 'video url', default=None, group='url')\n        if video_url:\n            extract_format(compat_urllib_parse_unquote(video_url))\n\n        if not formats:\n            if 'title=\"This video is no longer available\"' in webpage:\n                raise ExtractorError(\n                    'Video %s is no longer available' % video_id, expected=True)\n\n        self._sort_formats(formats)\n\n        if not title:\n            title = self._html_search_regex(\n                r'<h1[^>]*>([^<]+)', webpage, 'title')\n\n        return webpage, {\n            'id': video_id,\n            'display_id': display_id,\n            'title': strip_or_none(title),\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'age_limit': 18,\n            'formats': formats,\n        }\n\n    def _real_extract(self, url):\n        webpage, info = self._extract_info(url)\n        info['view_count'] = str_to_int(self._search_regex(\n            r'<b>([\\d,.]+)</b> Views?', webpage, 'view count', fatal=False))\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "keezmovies.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/keezmovies.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}