{"author": "ansible", "code": "# Copyright (c) 2016-2017 Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom ansible.compat.tests import unittest, mock\nfrom oneview_module_loader import SanManagerModule\nfrom hpe_test_utils import OneViewBaseTestCase\nfrom copy import deepcopy\n\nFAKE_MSG_ERROR = 'Fake message error'\n\nDEFAULT_SAN_MANAGER_TEMPLATE = dict(\n    name='172.18.15.1',\n    providerDisplayName='Brocade Network Advisor',\n    uri='/rest/fc-sans/device-managers/UUU-AAA-BBB',\n    refreshState='OK',\n    connectionInfo=[\n        {\n            'valueFormat': 'IPAddressOrHostname',\n            'displayName': 'Host',\n            'name': 'Host',\n            'valueType': 'String',\n            'required': False,\n            'value': '172.18.15.1'\n        }]\n)\n\n\nclass SanManagerModuleSpec(unittest.TestCase,\n                           OneViewBaseTestCase):\n    PARAMS_FOR_PRESENT = dict(\n        config='config.json',\n        state='present',\n        data=DEFAULT_SAN_MANAGER_TEMPLATE\n    )\n\n    PARAMS_FOR_CONNECTION_INFORMATION_SET = dict(\n        config='config.json',\n        state='connection_information_set',\n        data=DEFAULT_SAN_MANAGER_TEMPLATE.copy()\n    )\n\n    PARAMS_WITH_CHANGES = dict(\n        config='config.json',\n        state='present',\n        data=dict(name=DEFAULT_SAN_MANAGER_TEMPLATE['name'],\n                  refreshState='RefreshPending')\n    )\n\n    PARAMS_FOR_ABSENT = dict(\n        config='config.json',\n        state='absent',\n        data=dict(name=DEFAULT_SAN_MANAGER_TEMPLATE['name'])\n    )\n\n    def setUp(self):\n        self.configure_mocks(self, SanManagerModule)\n        self.resource = self.mock_ov_client.san_managers\n\n    def test_should_add_new_san_manager(self):\n        self.resource.get_by_name.return_value = []\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n        self.resource.add.return_value = DEFAULT_SAN_MANAGER_TEMPLATE\n\n        self.mock_ansible_module.params = self.PARAMS_FOR_PRESENT\n\n        SanManagerModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=SanManagerModule.MSG_CREATED,\n            ansible_facts=dict(san_manager=DEFAULT_SAN_MANAGER_TEMPLATE)\n        )\n\n    def test_should_find_provider_uri_to_add(self):\n        self.resource.get_by_name.return_value = []\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n        self.resource.add.return_value = DEFAULT_SAN_MANAGER_TEMPLATE\n\n        self.mock_ansible_module.params = self.PARAMS_FOR_PRESENT\n\n        SanManagerModule().run()\n\n        provider_display_name = DEFAULT_SAN_MANAGER_TEMPLATE['providerDisplayName']\n        self.resource.get_provider_uri.assert_called_once_with(provider_display_name)\n\n    def test_should_not_update_when_data_is_equals(self):\n        output_data = deepcopy(DEFAULT_SAN_MANAGER_TEMPLATE)\n        output_data.pop('connectionInfo')\n        self.resource.get_by_name.return_value = deepcopy(DEFAULT_SAN_MANAGER_TEMPLATE)\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n\n        self.mock_ansible_module.params = self.PARAMS_FOR_PRESENT\n\n        SanManagerModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            msg=SanManagerModule.MSG_ALREADY_PRESENT,\n            ansible_facts=dict(san_manager=output_data)\n        )\n\n    def test_update_when_data_has_modified_attributes(self):\n        data_merged = deepcopy(DEFAULT_SAN_MANAGER_TEMPLATE)\n        data_merged['fabricType'] = 'DirectAttach'\n\n        self.resource.get_by_name.return_value = DEFAULT_SAN_MANAGER_TEMPLATE\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n\n        self.resource.update.return_value = data_merged\n        self.mock_ansible_module.params = self.PARAMS_WITH_CHANGES\n\n        SanManagerModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=SanManagerModule.MSG_UPDATED,\n            ansible_facts=dict(san_manager=data_merged)\n        )\n\n    def test_update_should_not_send_connection_info_when_not_informed_on_data(self):\n        merged_data = deepcopy(DEFAULT_SAN_MANAGER_TEMPLATE)\n        merged_data['refreshState'] = 'RefreshPending'\n        output_data = deepcopy(merged_data)\n        output_data.pop('connectionInfo')\n\n        self.resource.get_by_name.return_value = DEFAULT_SAN_MANAGER_TEMPLATE\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n\n        self.resource.update.return_value = merged_data\n        self.mock_ansible_module.params = self.PARAMS_WITH_CHANGES\n\n        SanManagerModule().run()\n\n        self.resource.update.assert_called_once_with(resource=output_data, id_or_uri=output_data['uri'])\n\n    def test_should_remove_san_manager(self):\n        self.resource.get_by_name.return_value = deepcopy(DEFAULT_SAN_MANAGER_TEMPLATE)\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n\n        self.mock_ansible_module.params = self.PARAMS_FOR_ABSENT.copy()\n\n        SanManagerModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=SanManagerModule.MSG_DELETED\n        )\n\n    def test_should_do_nothing_when_san_manager_not_exist(self):\n        self.resource.get_by_name.return_value = []\n\n        self.mock_ansible_module.params = self.PARAMS_FOR_ABSENT.copy()\n\n        SanManagerModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            msg=SanManagerModule.MSG_ALREADY_ABSENT\n        )\n\n    def test_should_fail_when_name_not_found(self):\n        self.resource.get_by_name.return_value = []\n        self.resource.get_provider_uri.return_value = None\n\n        self.mock_ansible_module.params = self.PARAMS_FOR_PRESENT\n\n        SanManagerModule().run()\n\n        self.mock_ansible_module.fail_json.assert_called_once_with(\n            exception=mock.ANY,\n            msg=\"The provider 'Brocade Network Advisor' was not found.\"\n        )\n\n    def test_should_fail_when_name_and_hosts_in_connectionInfo_missing(self):\n        bad_params = deepcopy(self.PARAMS_FOR_PRESENT)\n        bad_params['data'].pop('name')\n        bad_params['data'].pop('connectionInfo')\n\n        self.mock_ansible_module.params = bad_params\n\n        SanManagerModule().run()\n\n        msg = 'A \"name\" or \"connectionInfo\" must be provided inside the \"data\" field for this operation. '\n        msg += 'If a \"connectionInfo\" is provided, the \"Host\" name is considered as the \"name\" for the resource.'\n\n        self.mock_ansible_module.fail_json.assert_called_once_with(exception=mock.ANY, msg=msg)\n\n    def test_connection_information_set_should_set_the_connection_information(self):\n        data_merged = deepcopy(DEFAULT_SAN_MANAGER_TEMPLATE)\n        data_merged['fabricType'] = 'DirectAttach'\n\n        self.resource.get_by_name.return_value = DEFAULT_SAN_MANAGER_TEMPLATE\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n\n        self.resource.update.return_value = data_merged\n        self.mock_ansible_module.params = self.PARAMS_FOR_CONNECTION_INFORMATION_SET\n\n        SanManagerModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=SanManagerModule.MSG_UPDATED,\n            ansible_facts=dict(san_manager=data_merged)\n        )\n\n    def test_should_add_new_san_manager_when_connection_information_set_called_without_resource(self):\n        self.resource.get_by_name.return_value = []\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n        self.resource.add.return_value = DEFAULT_SAN_MANAGER_TEMPLATE\n\n        self.mock_ansible_module.params = self.PARAMS_FOR_CONNECTION_INFORMATION_SET\n\n        SanManagerModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=SanManagerModule.MSG_CREATED,\n            ansible_facts=dict(san_manager=DEFAULT_SAN_MANAGER_TEMPLATE)\n        )\n\n    def test_should_fail_when_required_attribute_missing(self):\n        bad_params = deepcopy(self.PARAMS_FOR_CONNECTION_INFORMATION_SET)\n        bad_params['data'] = self.PARAMS_FOR_CONNECTION_INFORMATION_SET['data'].copy()\n        bad_params['data'].pop('connectionInfo')\n\n        self.resource.get_by_name.return_value = DEFAULT_SAN_MANAGER_TEMPLATE\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n\n        self.mock_ansible_module.params = bad_params\n\n        SanManagerModule().run()\n\n        msg = 'A connectionInfo field is required for this operation.'\n\n        self.mock_ansible_module.fail_json.assert_called_once_with(exception=mock.ANY, msg=msg)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "  copyright (c) 2016 2017 hewlett packard enterprise development lp    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "# Copyright (c) 2016-2017 Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom ansible.compat.tests import unittest, mock\nfrom oneview_module_loader import SanManagerModule\nfrom hpe_test_utils import OneViewBaseTestCase\nfrom copy import deepcopy\n\nFAKE_MSG_ERROR = 'Fake message error'\n\nDEFAULT_SAN_MANAGER_TEMPLATE = dict(\n    name='172.18.15.1',\n    providerDisplayName='Brocade Network Advisor',\n    uri='/rest/fc-sans/device-managers/UUU-AAA-BBB',\n    refreshState='OK',\n    connectionInfo=[\n        {\n            'valueFormat': 'IPAddressOrHostname',\n            'displayName': 'Host',\n            'name': 'Host',\n            'valueType': 'String',\n            'required': False,\n            'value': '172.18.15.1'\n        }]\n)\n\n\nclass SanManagerModuleSpec(unittest.TestCase,\n                           OneViewBaseTestCase):\n    PARAMS_FOR_PRESENT = dict(\n        config='config.json',\n        state='present',\n        data=DEFAULT_SAN_MANAGER_TEMPLATE\n    )\n\n    PARAMS_FOR_CONNECTION_INFORMATION_SET = dict(\n        config='config.json',\n        state='connection_information_set',\n        data=DEFAULT_SAN_MANAGER_TEMPLATE.copy()\n    )\n\n    PARAMS_WITH_CHANGES = dict(\n        config='config.json',\n        state='present',\n        data=dict(name=DEFAULT_SAN_MANAGER_TEMPLATE['name'],\n                  refreshState='RefreshPending')\n    )\n\n    PARAMS_FOR_ABSENT = dict(\n        config='config.json',\n        state='absent',\n        data=dict(name=DEFAULT_SAN_MANAGER_TEMPLATE['name'])\n    )\n\n    def setUp(self):\n        self.configure_mocks(self, SanManagerModule)\n        self.resource = self.mock_ov_client.san_managers\n\n    def test_should_add_new_san_manager(self):\n        self.resource.get_by_name.return_value = []\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n        self.resource.add.return_value = DEFAULT_SAN_MANAGER_TEMPLATE\n\n        self.mock_ansible_module.params = self.PARAMS_FOR_PRESENT\n\n        SanManagerModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=SanManagerModule.MSG_CREATED,\n            ansible_facts=dict(san_manager=DEFAULT_SAN_MANAGER_TEMPLATE)\n        )\n\n    def test_should_find_provider_uri_to_add(self):\n        self.resource.get_by_name.return_value = []\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n        self.resource.add.return_value = DEFAULT_SAN_MANAGER_TEMPLATE\n\n        self.mock_ansible_module.params = self.PARAMS_FOR_PRESENT\n\n        SanManagerModule().run()\n\n        provider_display_name = DEFAULT_SAN_MANAGER_TEMPLATE['providerDisplayName']\n        self.resource.get_provider_uri.assert_called_once_with(provider_display_name)\n\n    def test_should_not_update_when_data_is_equals(self):\n        output_data = deepcopy(DEFAULT_SAN_MANAGER_TEMPLATE)\n        output_data.pop('connectionInfo')\n        self.resource.get_by_name.return_value = deepcopy(DEFAULT_SAN_MANAGER_TEMPLATE)\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n\n        self.mock_ansible_module.params = self.PARAMS_FOR_PRESENT\n\n        SanManagerModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            msg=SanManagerModule.MSG_ALREADY_PRESENT,\n            ansible_facts=dict(san_manager=output_data)\n        )\n\n    def test_update_when_data_has_modified_attributes(self):\n        data_merged = deepcopy(DEFAULT_SAN_MANAGER_TEMPLATE)\n        data_merged['fabricType'] = 'DirectAttach'\n\n        self.resource.get_by_name.return_value = DEFAULT_SAN_MANAGER_TEMPLATE\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n\n        self.resource.update.return_value = data_merged\n        self.mock_ansible_module.params = self.PARAMS_WITH_CHANGES\n\n        SanManagerModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=SanManagerModule.MSG_UPDATED,\n            ansible_facts=dict(san_manager=data_merged)\n        )\n\n    def test_update_should_not_send_connection_info_when_not_informed_on_data(self):\n        merged_data = deepcopy(DEFAULT_SAN_MANAGER_TEMPLATE)\n        merged_data['refreshState'] = 'RefreshPending'\n        output_data = deepcopy(merged_data)\n        output_data.pop('connectionInfo')\n\n        self.resource.get_by_name.return_value = DEFAULT_SAN_MANAGER_TEMPLATE\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n\n        self.resource.update.return_value = merged_data\n        self.mock_ansible_module.params = self.PARAMS_WITH_CHANGES\n\n        SanManagerModule().run()\n\n        self.resource.update.assert_called_once_with(resource=output_data, id_or_uri=output_data['uri'])\n\n    def test_should_remove_san_manager(self):\n        self.resource.get_by_name.return_value = deepcopy(DEFAULT_SAN_MANAGER_TEMPLATE)\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n\n        self.mock_ansible_module.params = self.PARAMS_FOR_ABSENT.copy()\n\n        SanManagerModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=SanManagerModule.MSG_DELETED\n        )\n\n    def test_should_do_nothing_when_san_manager_not_exist(self):\n        self.resource.get_by_name.return_value = []\n\n        self.mock_ansible_module.params = self.PARAMS_FOR_ABSENT.copy()\n\n        SanManagerModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            msg=SanManagerModule.MSG_ALREADY_ABSENT\n        )\n\n    def test_should_fail_when_name_not_found(self):\n        self.resource.get_by_name.return_value = []\n        self.resource.get_provider_uri.return_value = None\n\n        self.mock_ansible_module.params = self.PARAMS_FOR_PRESENT\n\n        SanManagerModule().run()\n\n        self.mock_ansible_module.fail_json.assert_called_once_with(\n            exception=mock.ANY,\n            msg=\"The provider 'Brocade Network Advisor' was not found.\"\n        )\n\n    def test_should_fail_when_name_and_hosts_in_connectionInfo_missing(self):\n        bad_params = deepcopy(self.PARAMS_FOR_PRESENT)\n        bad_params['data'].pop('name')\n        bad_params['data'].pop('connectionInfo')\n\n        self.mock_ansible_module.params = bad_params\n\n        SanManagerModule().run()\n\n        msg = 'A \"name\" or \"connectionInfo\" must be provided inside the \"data\" field for this operation. '\n        msg += 'If a \"connectionInfo\" is provided, the \"Host\" name is considered as the \"name\" for the resource.'\n\n        self.mock_ansible_module.fail_json.assert_called_once_with(exception=mock.ANY, msg=msg)\n\n    def test_connection_information_set_should_set_the_connection_information(self):\n        data_merged = deepcopy(DEFAULT_SAN_MANAGER_TEMPLATE)\n        data_merged['fabricType'] = 'DirectAttach'\n\n        self.resource.get_by_name.return_value = DEFAULT_SAN_MANAGER_TEMPLATE\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n\n        self.resource.update.return_value = data_merged\n        self.mock_ansible_module.params = self.PARAMS_FOR_CONNECTION_INFORMATION_SET\n\n        SanManagerModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=SanManagerModule.MSG_UPDATED,\n            ansible_facts=dict(san_manager=data_merged)\n        )\n\n    def test_should_add_new_san_manager_when_connection_information_set_called_without_resource(self):\n        self.resource.get_by_name.return_value = []\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n        self.resource.add.return_value = DEFAULT_SAN_MANAGER_TEMPLATE\n\n        self.mock_ansible_module.params = self.PARAMS_FOR_CONNECTION_INFORMATION_SET\n\n        SanManagerModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=SanManagerModule.MSG_CREATED,\n            ansible_facts=dict(san_manager=DEFAULT_SAN_MANAGER_TEMPLATE)\n        )\n\n    def test_should_fail_when_required_attribute_missing(self):\n        bad_params = deepcopy(self.PARAMS_FOR_CONNECTION_INFORMATION_SET)\n        bad_params['data'] = self.PARAMS_FOR_CONNECTION_INFORMATION_SET['data'].copy()\n        bad_params['data'].pop('connectionInfo')\n\n        self.resource.get_by_name.return_value = DEFAULT_SAN_MANAGER_TEMPLATE\n        self.resource.get_provider_uri.return_value = '/rest/fc-sans/providers/123/device-managers'\n\n        self.mock_ansible_module.params = bad_params\n\n        SanManagerModule().run()\n\n        msg = 'A connectionInfo field is required for this operation.'\n\n        self.mock_ansible_module.fail_json.assert_called_once_with(exception=mock.ANY, msg=msg)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_oneview_san_manager.py", "id": "c29f1afe87b25ebf1a9b0b3d05f0e8b9", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/remote_management/oneview/test_oneview_san_manager.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}