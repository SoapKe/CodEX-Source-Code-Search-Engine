{"author": "ansible", "code": "# -*- coding: utf-8 -*-\n# Copyright (c) 2018 Pierre-Louis Bonicoli <pierre-louis@libregerbil.fr>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nimport json\n\nfrom ansible.compat.tests.mock import MagicMock\nfrom ansible.modules.source_control import gitlab_project\n\nimport pytest\n\n\n@pytest.fixture\ndef patch_gitlab_project(mocker):\n    mocker.patch.object(gitlab_project, 'HAS_GITLAB_PACKAGE', mocker.PropertyMock(return_value=True))\n\n\n@pytest.mark.parametrize('patch_ansible_module', [{}], indirect=['patch_ansible_module'])\n@pytest.mark.usefixtures('patch_ansible_module')\ndef test_without_required_parameters(capfd):\n    \"\"\"Failure must occurs when all parameters are missing\"\"\"\n\n    with pytest.raises(SystemExit):\n        gitlab_project.main()\n    out, err = capfd.readouterr()\n    results = json.loads(out)\n    assert results['failed']\n    assert 'missing required arguments' in results['msg']\n\n\nTEST_CASES = [\n    [\n        {\n            'server_url': 'http://gitlab.test/gitlab',\n            'validate_certs': True,\n            'login_user': 'john',\n            'login_token': 'TOKEN',\n            'name': 'new_test_repo',\n            'group': 'my_repo_group',\n            'public': True,\n            'visibility_level': 20,\n            'issues_enabled': False,\n            'wiki_enabled': True,\n            'snippets_enabled': True,\n            'import_url': 'http://gitlab.test/gitlab/gitrepothatdoesnotexist.git',\n            'state': 'present'\n        },\n        {\n            'msg': \"Failed to create project 'new_test_repo'\",\n            'failed': True,\n        }\n    ],\n]\n\n\n@pytest.mark.parametrize('patch_ansible_module, testcase', TEST_CASES, indirect=['patch_ansible_module'])\n@pytest.mark.usefixtures('patch_ansible_module')\ndef test_fail_if_url_import_doesnt_exist(mocker, capfd, patch_gitlab_project, testcase):\n    \"\"\" Test for \n\n    Ensure errors are reported (meaning task report a failure),\n    for example when url_import doesn't exist, an error must occur.\n    \"\"\"\n\n    git = MagicMock()\n    git.createprojectuser.return_value = False\n\n    gitlab = MagicMock()\n    gitlab.Gitlab.return_value = git\n    gitlab_project.gitlab = gitlab\n\n    with pytest.raises(SystemExit):\n        gitlab_project.main()\n\n    \n    assert git.createprojectuser.call_count == 1\n    assert git.createprojectuser.call_args[1]['import_url'] == 'http://gitlab.test/gitlab/gitrepothatdoesnotexist.git'\n\n    out, err = capfd.readouterr()\n    results = json.loads(out)\n    assert results.get('failed') == testcase.get('failed')\n    assert results['msg'] == testcase['msg']\n", "comments": "   failure must occurs parameters missing         pytest raises(systemexit)          gitlab project main()      err   capfd readouterr()     results   json loads(out)     assert results  failed       assert  missing required arguments  results  msg     test cases                                  server url    http   gitlab test gitlab                validate certs   true               login user    john                login token    token                name    new test repo                group    repo group                public   true               visibility level   20               issues enabled   false               wiki enabled   true               snippets enabled   true               import url    http   gitlab test gitlab gitrepothatdoesnotexist git                state    present                                    msg    failed create project  new test repo                 failed   true                        pytest mark parametrize( patch ansible module  testcase   test cases  indirect   patch ansible module  )  pytest mark usefixtures( patch ansible module ) def test fail url import doesnt exist(mocker  capfd  patch gitlab project  testcase)          test  36495      ensure errors reported (meaning task report failure)      example url import exist  error must occur                 coding  utf 8        copyright (c) 2018 pierre louis bonicoli  pierre louis libregerbil fr     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)   36495    check 1  createprojectuser method called 2  expected parameter ", "content": "# -*- coding: utf-8 -*-\n# Copyright (c) 2018 Pierre-Louis Bonicoli <pierre-louis@libregerbil.fr>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nimport json\n\nfrom ansible.compat.tests.mock import MagicMock\nfrom ansible.modules.source_control import gitlab_project\n\nimport pytest\n\n\n@pytest.fixture\ndef patch_gitlab_project(mocker):\n    mocker.patch.object(gitlab_project, 'HAS_GITLAB_PACKAGE', mocker.PropertyMock(return_value=True))\n\n\n@pytest.mark.parametrize('patch_ansible_module', [{}], indirect=['patch_ansible_module'])\n@pytest.mark.usefixtures('patch_ansible_module')\ndef test_without_required_parameters(capfd):\n    \"\"\"Failure must occurs when all parameters are missing\"\"\"\n\n    with pytest.raises(SystemExit):\n        gitlab_project.main()\n    out, err = capfd.readouterr()\n    results = json.loads(out)\n    assert results['failed']\n    assert 'missing required arguments' in results['msg']\n\n\nTEST_CASES = [\n    [\n        {\n            'server_url': 'http://gitlab.test/gitlab',\n            'validate_certs': True,\n            'login_user': 'john',\n            'login_token': 'TOKEN',\n            'name': 'new_test_repo',\n            'group': 'my_repo_group',\n            'public': True,\n            'visibility_level': 20,\n            'issues_enabled': False,\n            'wiki_enabled': True,\n            'snippets_enabled': True,\n            'import_url': 'http://gitlab.test/gitlab/gitrepothatdoesnotexist.git',\n            'state': 'present'\n        },\n        {\n            'msg': \"Failed to create project 'new_test_repo'\",\n            'failed': True,\n        }\n    ],\n]\n\n\n@pytest.mark.parametrize('patch_ansible_module, testcase', TEST_CASES, indirect=['patch_ansible_module'])\n@pytest.mark.usefixtures('patch_ansible_module')\ndef test_fail_if_url_import_doesnt_exist(mocker, capfd, patch_gitlab_project, testcase):\n    \"\"\" Test for #36495\n\n    Ensure errors are reported (meaning task report a failure),\n    for example when url_import doesn't exist, an error must occur.\n    \"\"\"\n\n    git = MagicMock()\n    git.createprojectuser.return_value = False\n\n    gitlab = MagicMock()\n    gitlab.Gitlab.return_value = git\n    gitlab_project.gitlab = gitlab\n\n    with pytest.raises(SystemExit):\n        gitlab_project.main()\n\n    # Check that 1. createprojectuser method has been called 2. with expected parameter\n    assert git.createprojectuser.call_count == 1\n    assert git.createprojectuser.call_args[1]['import_url'] == 'http://gitlab.test/gitlab/gitrepothatdoesnotexist.git'\n\n    out, err = capfd.readouterr()\n    results = json.loads(out)\n    assert results.get('failed') == testcase.get('failed')\n    assert results['msg'] == testcase['msg']\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_gitlab_project.py", "id": "1f97825a5a18b4ea25ca47e876b30493", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/source_control/test_gitlab_project.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}