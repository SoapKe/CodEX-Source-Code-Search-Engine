{"author": "audreyr", "code": "# -*- coding: utf-8 -*-\n\n\"\"\"\ntest_output_folder\n------------------\n\nTest formerly known from a unittest residing in test_generate.py named\nTestOutputFolder.test_output_folder\n\"\"\"\n\nfrom __future__ import unicode_literals\nimport os\nimport pytest\n\nfrom cookiecutter import generate\nfrom cookiecutter import utils\nfrom cookiecutter import exceptions\n\n\n@pytest.fixture(scope='function')\ndef remove_output_folder(request):\n    \"\"\"\n    Remove the output folder in case it exists on disk.\n    \"\"\"\n    def finalizer_remove_output_folder():\n        if os.path.exists('output_folder'):\n            utils.rmtree('output_folder')\n    request.addfinalizer(finalizer_remove_output_folder)\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_output_folder')\ndef test_output_folder():\n    context = generate.generate_context(\n        context_file='tests/test-output-folder/cookiecutter.json'\n    )\n    generate.generate_files(\n        context=context,\n        repo_dir='tests/test-output-folder'\n    )\n\n    something = \"\"\"Hi!\nMy name is Audrey Greenfeld.\nIt is 2014.\"\"\"\n    something2 = open('output_folder/something.txt').read()\n    assert something == something2\n\n    in_folder = \"The color is green and the letter is D.\"\n    in_folder2 = open('output_folder/folder/in_folder.txt').read()\n    assert in_folder == in_folder2\n\n    assert os.path.isdir('output_folder/im_a.dir')\n    assert os.path.isfile('output_folder/im_a.dir/im_a.file.py')\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_output_folder')\ndef test_exception_when_output_folder_exists():\n    context = generate.generate_context(\n        context_file='tests/test-output-folder/cookiecutter.json'\n    )\n    output_folder = context['cookiecutter']['test_name']\n\n    if not os.path.exists(output_folder):\n        os.makedirs(output_folder)\n    with pytest.raises(exceptions.OutputDirExistsException):\n        generate.generate_files(\n            context=context,\n            repo_dir='tests/test-output-folder'\n        )\n", "comments": "    test output folder                     test formerly known unittest residing test generate py named testoutputfolder test output folder        future   import unicode literals import os import pytest  cookiecutter import generate cookiecutter import utils cookiecutter import exceptions    pytest fixture(scope  function ) def remove output folder(request)              remove output folder case exists disk              def finalizer remove output folder()          os path exists( output folder )              utils rmtree( output folder )     request addfinalizer(finalizer remove output folder)    pytest mark usefixtures( clean system    remove output folder ) def test output folder()      context   generate generate context(         context file  tests test output folder cookiecutter json      )     generate generate files(         context context          repo dir  tests test output folder      )      something      hi  my name audrey greenfeld  it 2014            coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\n\"\"\"\ntest_output_folder\n------------------\n\nTest formerly known from a unittest residing in test_generate.py named\nTestOutputFolder.test_output_folder\n\"\"\"\n\nfrom __future__ import unicode_literals\nimport os\nimport pytest\n\nfrom cookiecutter import generate\nfrom cookiecutter import utils\nfrom cookiecutter import exceptions\n\n\n@pytest.fixture(scope='function')\ndef remove_output_folder(request):\n    \"\"\"\n    Remove the output folder in case it exists on disk.\n    \"\"\"\n    def finalizer_remove_output_folder():\n        if os.path.exists('output_folder'):\n            utils.rmtree('output_folder')\n    request.addfinalizer(finalizer_remove_output_folder)\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_output_folder')\ndef test_output_folder():\n    context = generate.generate_context(\n        context_file='tests/test-output-folder/cookiecutter.json'\n    )\n    generate.generate_files(\n        context=context,\n        repo_dir='tests/test-output-folder'\n    )\n\n    something = \"\"\"Hi!\nMy name is Audrey Greenfeld.\nIt is 2014.\"\"\"\n    something2 = open('output_folder/something.txt').read()\n    assert something == something2\n\n    in_folder = \"The color is green and the letter is D.\"\n    in_folder2 = open('output_folder/folder/in_folder.txt').read()\n    assert in_folder == in_folder2\n\n    assert os.path.isdir('output_folder/im_a.dir')\n    assert os.path.isfile('output_folder/im_a.dir/im_a.file.py')\n\n\n@pytest.mark.usefixtures('clean_system', 'remove_output_folder')\ndef test_exception_when_output_folder_exists():\n    context = generate.generate_context(\n        context_file='tests/test-output-folder/cookiecutter.json'\n    )\n    output_folder = context['cookiecutter']['test_name']\n\n    if not os.path.exists(output_folder):\n        os.makedirs(output_folder)\n    with pytest.raises(exceptions.OutputDirExistsException):\n        generate.generate_files(\n            context=context,\n            repo_dir='tests/test-output-folder'\n        )\n", "description": "A command-line utility that creates projects from cookiecutters (project templates). E.g. Python package projects, jQuery plugin projects.", "file_name": "test_output_folder.py", "id": "a33bd321c0f4341ae67e470462a95dcb", "language": "Python", "project_name": "cookiecutter", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/audreyr-cookiecutter/audreyr-cookiecutter-7154cf2/tests/test_output_folder.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:52:22Z", "url": "https://github.com/audreyr/cookiecutter", "wiki": true}