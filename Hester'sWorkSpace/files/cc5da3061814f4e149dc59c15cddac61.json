{"author": "keon", "code": "\n\n\n\n\n\n\n\n\n\n\n\n\ndef longest_non_repeat(string):\n    if string is None:\n        return 0\n    temp = []\n    max_len = 0\n    for i in string:\n        if i in temp:\n            temp = []\n        temp.append(i)\n        max_len = max(max_len, len(temp))\n    return max_len\n\ndef longest_non_repeat_two(string):\n    if string is None:\n        return 0\n    start, max_len = 0, 0\n    used_char = {}\n    for index, char in enumerate(string):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_len = max(max_len, index - start + 1)\n        used_char[char] = index\n    return  max_len\n\nif __name__ == '__main__':\n    a = \"abcabcdefbb\"\n    print(a)\n    print(longest_non_repeat(a))\n    print(longest_non_repeat_two(a))\n", "comments": "  given string  find length longest substring    without repeating characters     examples     given  abcabcbb   answer  abc   length 3     given  bbbbb   answer  b   length 1     given  pwwkew   answer  wke   length 3     note answer must substring      pwke  subsequence substring  ", "content": "# Given a string, find the length of the longest substring\n# without repeating characters.\n\n# Examples:\n\n# Given \"abcabcbb\", the answer is \"abc\", which the length is 3.\n\n# Given \"bbbbb\", the answer is \"b\", with the length of 1.\n\n# Given \"pwwkew\", the answer is \"wke\", with the length of 3.\n# Note that the answer must be a substring,\n# \"pwke\" is a subsequence and not a substring.\n\ndef longest_non_repeat(string):\n    if string is None:\n        return 0\n    temp = []\n    max_len = 0\n    for i in string:\n        if i in temp:\n            temp = []\n        temp.append(i)\n        max_len = max(max_len, len(temp))\n    return max_len\n\ndef longest_non_repeat_two(string):\n    if string is None:\n        return 0\n    start, max_len = 0, 0\n    used_char = {}\n    for index, char in enumerate(string):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_len = max(max_len, index - start + 1)\n        used_char[char] = index\n    return  max_len\n\nif __name__ == '__main__':\n    a = \"abcabcdefbb\"\n    print(a)\n    print(longest_non_repeat(a))\n    print(longest_non_repeat_two(a))\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "longest_non_repeat.py", "id": "cc5da3061814f4e149dc59c15cddac61", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/keon-algorithms/keon-algorithms-abe4cb1/array/longest_non_repeat.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:56:36Z", "url": "https://github.com/keon/algorithms", "wiki": true}