{"author": "ansible", "code": "\n\n# (c) 2017, NetApp, Inc\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n\nmodule: sf_account_manager\n\nshort_description: Manage SolidFire accounts\nextends_documentation_fragment:\n    - netapp.solidfire\nversion_added: '2.3'\nauthor: Sumit Kumar (sumit4@netapp.com)\ndescription:\n- Create, destroy, or update accounts on SolidFire\n\noptions:\n\n    state:\n        description:\n        - Whether the specified account should exist or not.\n        required: true\n        choices: ['present', 'absent']\n\n    name:\n        description:\n        - Unique username for this account. (May be 1 to 64 characters in length).\n        required: true\n\n    new_name:\n        description:\n        - New name for the user account.\n\n    initiator_secret:\n        description:\n        - CHAP secret to use for the initiator. Should be 12-16 characters long and impenetrable.\n        - The CHAP initiator secrets must be unique and cannot be the same as the target CHAP secret.\n        - If not specified, a random secret is created.\n\n    target_secret:\n        description:\n        - CHAP secret to use for the target (mutual CHAP authentication).\n        - Should be 12-16 characters long and impenetrable.\n        - The CHAP target secrets must be unique and cannot be the same as the initiator CHAP secret.\n        - If not specified, a random secret is created.\n\n    attributes:\n        description: List of Name/Value pairs in JSON object format.\n\n    account_id:\n        description:\n        - The ID of the account to manage or update.\n\n    status:\n        description:\n        - Status of the account.\n\n'''\n\nEXAMPLES = \"\"\"\n- name: Create Account\n  sf_account_manager:\n    hostname: \"{{ solidfire_hostname }}\"\n    username: \"{{ solidfire_username }}\"\n    password: \"{{ solidfire_password }}\"\n    state: present\n    name: TenantA\n\n- name: Modify Account\n  sf_account_manager:\n    hostname: \"{{ solidfire_hostname }}\"\n    username: \"{{ solidfire_username }}\"\n    password: \"{{ solidfire_password }}\"\n    state: present\n    name: TenantA\n    new_name: TenantA-Renamed\n\n- name: Delete Account\n  sf_account_manager:\n    hostname: \"{{ solidfire_hostname }}\"\n    username: \"{{ solidfire_username }}\"\n    password: \"{{ solidfire_password }}\"\n    state: absent\n    name: TenantA-Renamed\n\"\"\"\n\nRETURN = \"\"\"\n\n\"\"\"\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\nimport ansible.module_utils.netapp as netapp_utils\n\n\nHAS_SF_SDK = netapp_utils.has_sf_sdk()\n\n\nclass SolidFireAccount(object):\n\n    def __init__(self):\n        self.argument_spec = netapp_utils.ontap_sf_host_argument_spec()\n        self.argument_spec.update(dict(\n            state=dict(required=True, choices=['present', 'absent']),\n            name=dict(required=True, type='str'),\n            account_id=dict(required=False, type='int', default=None),\n\n            new_name=dict(required=False, type='str', default=None),\n            initiator_secret=dict(required=False, type='str'),\n            target_secret=dict(required=False, type='str'),\n            attributes=dict(required=False, type='dict'),\n            status=dict(required=False, type='str'),\n        ))\n\n        self.module = AnsibleModule(\n            argument_spec=self.argument_spec,\n            supports_check_mode=True\n        )\n\n        p = self.module.params\n\n        \n        self.state = p['state']\n        self.name = p['name']\n        self.account_id = p['account_id']\n\n        self.new_name = p['new_name']\n        self.initiator_secret = p['initiator_secret']\n        self.target_secret = p['target_secret']\n        self.attributes = p['attributes']\n        self.status = p['status']\n\n        if HAS_SF_SDK is False:\n            self.module.fail_json(msg=\"Unable to import the SolidFire Python SDK\")\n        else:\n            self.sfe = netapp_utils.create_sf_connection(module=self.module)\n\n    def get_account(self):\n        \"\"\"\n            Return account object if found\n\n            :return: Details about the account. None if not found.\n            :rtype: dict\n        \"\"\"\n        account_list = self.sfe.list_accounts()\n\n        for account in account_list.accounts:\n            if account.username == self.name:\n                \n                if self.account_id is not None:\n                    if account.account_id == self.account_id:\n                        return account\n                else:\n                    self.account_id = account.account_id\n                    return account\n        return None\n\n    def create_account(self):\n        try:\n            self.sfe.add_account(username=self.name,\n                                 initiator_secret=self.initiator_secret,\n                                 target_secret=self.target_secret,\n                                 attributes=self.attributes)\n        except Exception as e:\n            self.module.fail_json(msg='Error creating account %s: %s)' % (self.name, to_native(e)),\n                                  exception=traceback.format_exc())\n\n    def delete_account(self):\n        try:\n            self.sfe.remove_account(account_id=self.account_id)\n\n        except Exception as e:\n            self.module.fail_json(msg='Error deleting account %s: %s' % (self.account_id, to_native(e)),\n                                  exception=traceback.format_exc())\n\n    def update_account(self):\n        try:\n            self.sfe.modify_account(account_id=self.account_id,\n                                    username=self.new_name,\n                                    status=self.status,\n                                    initiator_secret=self.initiator_secret,\n                                    target_secret=self.target_secret,\n                                    attributes=self.attributes)\n\n        except Exception as e:\n            self.module.fail_json(msg='Error updating account %s: %s' % (self.account_id, to_native(e)),\n                                  exception=traceback.format_exc())\n\n    def apply(self):\n        changed = False\n        account_exists = False\n        update_account = False\n        account_detail = self.get_account()\n\n        if account_detail:\n            account_exists = True\n\n            if self.state == 'absent':\n                changed = True\n\n            elif self.state == 'present':\n                \n\n                if account_detail.username is not None and self.new_name is not None and \\\n                        account_detail.username != self.new_name:\n                    update_account = True\n                    changed = True\n\n                elif account_detail.status is not None and self.status is not None \\\n                        and account_detail.status != self.status:\n                    update_account = True\n                    changed = True\n\n                elif account_detail.initiator_secret is not None and self.initiator_secret is not None \\\n                        and account_detail.initiator_secret != self.initiator_secret:\n                    update_account = True\n                    changed = True\n\n                elif account_detail.target_secret is not None and self.target_secret is not None \\\n                        and account_detail.target_secret != self.target_secret:\n                    update_account = True\n                    changed = True\n\n                elif account_detail.attributes is not None and self.attributes is not None \\\n                        and account_detail.attributes != self.attributes:\n                    update_account = True\n                    changed = True\n        else:\n            if self.state == 'present':\n                changed = True\n\n        if changed:\n            if self.module.check_mode:\n                pass\n            else:\n                if self.state == 'present':\n                    if not account_exists:\n                        self.create_account()\n                    elif update_account:\n                        self.update_account()\n\n                elif self.state == 'absent':\n                    self.delete_account()\n\n        self.module.exit_json(changed=changed)\n\n\ndef main():\n    v = SolidFireAccount()\n    v.apply()\n\nif __name__ == '__main__':\n    main()\n", "comments": "      name  create account   sf account manager      hostname      solidfire hostname         username      solidfire username         password      solidfire password         state  present     name  tenanta    name  modify account   sf account manager      hostname      solidfire hostname         username      solidfire username         password      solidfire password         state  present     name  tenanta     new name  tenanta renamed    name  delete account   sf account manager      hostname      solidfire hostname         username      solidfire username         password      solidfire password         state  absent     name  tenanta renamed      return            import traceback  ansible module utils basic import ansiblemodule ansible module utils  text import native import ansible module utils netapp netapp utils   has sf sdk   netapp utils sf sdk()   class solidfireaccount(object)       def   init  (self)          self argument spec   netapp utils ontap sf host argument spec()         self argument spec update(dict(             state dict(required true  choices   present    absent  )              name dict(required true  type  str )              account id dict(required false  type  int   default none)               new name dict(required false  type  str   default none)              initiator secret dict(required false  type  str )              target secret dict(required false  type  str )              attributes dict(required false  type  dict )              status dict(required false  type  str )          ))          self module   ansiblemodule(             argument spec self argument spec              supports check mode true         )          p   self module params            set state variables         self state   p  state           self name   p  name           self account id   p  account id            self new name   p  new name           self initiator secret   p  initiator secret           self target secret   p  target secret           self attributes   p  attributes           self status   p  status            has sf sdk false              self module fail json(msg  unable import solidfire python sdk )         else              self sfe   netapp utils create sf connection(module self module)      def get account(self)                          return account object found               return  details account  none found               rtype  dict                   module  sf account manager  short description  manage solidfire accounts extends documentation fragment        netapp solidfire version added   2 3  author  sumit kumar (sumit4 netapp com) description    create  destroy  update accounts solidfire  options       state          description            whether specified account exist          required  true         choices    present    absent        name          description            unique username account  (may 1 64 characters length)          required  true      new name          description            new name user account       initiator secret          description            chap secret use initiator  should 12 16 characters long impenetrable            the chap initiator secrets must unique cannot target chap secret            if specified  random secret created       target secret          description            chap secret use target (mutual chap authentication)            should 12 16 characters long impenetrable            the chap target secrets must unique cannot initiator chap secret            if specified  random secret created       attributes          description  list name value pairs json object format       account id          description            the id account manage update       status          description            status account           usr bin python    (c) 2017  netapp  inc    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    set state variables    update self account id     check need update account ", "content": "#!/usr/bin/python\n\n# (c) 2017, NetApp, Inc\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n\nmodule: sf_account_manager\n\nshort_description: Manage SolidFire accounts\nextends_documentation_fragment:\n    - netapp.solidfire\nversion_added: '2.3'\nauthor: Sumit Kumar (sumit4@netapp.com)\ndescription:\n- Create, destroy, or update accounts on SolidFire\n\noptions:\n\n    state:\n        description:\n        - Whether the specified account should exist or not.\n        required: true\n        choices: ['present', 'absent']\n\n    name:\n        description:\n        - Unique username for this account. (May be 1 to 64 characters in length).\n        required: true\n\n    new_name:\n        description:\n        - New name for the user account.\n\n    initiator_secret:\n        description:\n        - CHAP secret to use for the initiator. Should be 12-16 characters long and impenetrable.\n        - The CHAP initiator secrets must be unique and cannot be the same as the target CHAP secret.\n        - If not specified, a random secret is created.\n\n    target_secret:\n        description:\n        - CHAP secret to use for the target (mutual CHAP authentication).\n        - Should be 12-16 characters long and impenetrable.\n        - The CHAP target secrets must be unique and cannot be the same as the initiator CHAP secret.\n        - If not specified, a random secret is created.\n\n    attributes:\n        description: List of Name/Value pairs in JSON object format.\n\n    account_id:\n        description:\n        - The ID of the account to manage or update.\n\n    status:\n        description:\n        - Status of the account.\n\n'''\n\nEXAMPLES = \"\"\"\n- name: Create Account\n  sf_account_manager:\n    hostname: \"{{ solidfire_hostname }}\"\n    username: \"{{ solidfire_username }}\"\n    password: \"{{ solidfire_password }}\"\n    state: present\n    name: TenantA\n\n- name: Modify Account\n  sf_account_manager:\n    hostname: \"{{ solidfire_hostname }}\"\n    username: \"{{ solidfire_username }}\"\n    password: \"{{ solidfire_password }}\"\n    state: present\n    name: TenantA\n    new_name: TenantA-Renamed\n\n- name: Delete Account\n  sf_account_manager:\n    hostname: \"{{ solidfire_hostname }}\"\n    username: \"{{ solidfire_username }}\"\n    password: \"{{ solidfire_password }}\"\n    state: absent\n    name: TenantA-Renamed\n\"\"\"\n\nRETURN = \"\"\"\n\n\"\"\"\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\nimport ansible.module_utils.netapp as netapp_utils\n\n\nHAS_SF_SDK = netapp_utils.has_sf_sdk()\n\n\nclass SolidFireAccount(object):\n\n    def __init__(self):\n        self.argument_spec = netapp_utils.ontap_sf_host_argument_spec()\n        self.argument_spec.update(dict(\n            state=dict(required=True, choices=['present', 'absent']),\n            name=dict(required=True, type='str'),\n            account_id=dict(required=False, type='int', default=None),\n\n            new_name=dict(required=False, type='str', default=None),\n            initiator_secret=dict(required=False, type='str'),\n            target_secret=dict(required=False, type='str'),\n            attributes=dict(required=False, type='dict'),\n            status=dict(required=False, type='str'),\n        ))\n\n        self.module = AnsibleModule(\n            argument_spec=self.argument_spec,\n            supports_check_mode=True\n        )\n\n        p = self.module.params\n\n        # set up state variables\n        self.state = p['state']\n        self.name = p['name']\n        self.account_id = p['account_id']\n\n        self.new_name = p['new_name']\n        self.initiator_secret = p['initiator_secret']\n        self.target_secret = p['target_secret']\n        self.attributes = p['attributes']\n        self.status = p['status']\n\n        if HAS_SF_SDK is False:\n            self.module.fail_json(msg=\"Unable to import the SolidFire Python SDK\")\n        else:\n            self.sfe = netapp_utils.create_sf_connection(module=self.module)\n\n    def get_account(self):\n        \"\"\"\n            Return account object if found\n\n            :return: Details about the account. None if not found.\n            :rtype: dict\n        \"\"\"\n        account_list = self.sfe.list_accounts()\n\n        for account in account_list.accounts:\n            if account.username == self.name:\n                # Update self.account_id:\n                if self.account_id is not None:\n                    if account.account_id == self.account_id:\n                        return account\n                else:\n                    self.account_id = account.account_id\n                    return account\n        return None\n\n    def create_account(self):\n        try:\n            self.sfe.add_account(username=self.name,\n                                 initiator_secret=self.initiator_secret,\n                                 target_secret=self.target_secret,\n                                 attributes=self.attributes)\n        except Exception as e:\n            self.module.fail_json(msg='Error creating account %s: %s)' % (self.name, to_native(e)),\n                                  exception=traceback.format_exc())\n\n    def delete_account(self):\n        try:\n            self.sfe.remove_account(account_id=self.account_id)\n\n        except Exception as e:\n            self.module.fail_json(msg='Error deleting account %s: %s' % (self.account_id, to_native(e)),\n                                  exception=traceback.format_exc())\n\n    def update_account(self):\n        try:\n            self.sfe.modify_account(account_id=self.account_id,\n                                    username=self.new_name,\n                                    status=self.status,\n                                    initiator_secret=self.initiator_secret,\n                                    target_secret=self.target_secret,\n                                    attributes=self.attributes)\n\n        except Exception as e:\n            self.module.fail_json(msg='Error updating account %s: %s' % (self.account_id, to_native(e)),\n                                  exception=traceback.format_exc())\n\n    def apply(self):\n        changed = False\n        account_exists = False\n        update_account = False\n        account_detail = self.get_account()\n\n        if account_detail:\n            account_exists = True\n\n            if self.state == 'absent':\n                changed = True\n\n            elif self.state == 'present':\n                # Check if we need to update the account\n\n                if account_detail.username is not None and self.new_name is not None and \\\n                        account_detail.username != self.new_name:\n                    update_account = True\n                    changed = True\n\n                elif account_detail.status is not None and self.status is not None \\\n                        and account_detail.status != self.status:\n                    update_account = True\n                    changed = True\n\n                elif account_detail.initiator_secret is not None and self.initiator_secret is not None \\\n                        and account_detail.initiator_secret != self.initiator_secret:\n                    update_account = True\n                    changed = True\n\n                elif account_detail.target_secret is not None and self.target_secret is not None \\\n                        and account_detail.target_secret != self.target_secret:\n                    update_account = True\n                    changed = True\n\n                elif account_detail.attributes is not None and self.attributes is not None \\\n                        and account_detail.attributes != self.attributes:\n                    update_account = True\n                    changed = True\n        else:\n            if self.state == 'present':\n                changed = True\n\n        if changed:\n            if self.module.check_mode:\n                pass\n            else:\n                if self.state == 'present':\n                    if not account_exists:\n                        self.create_account()\n                    elif update_account:\n                        self.update_account()\n\n                elif self.state == 'absent':\n                    self.delete_account()\n\n        self.module.exit_json(changed=changed)\n\n\ndef main():\n    v = SolidFireAccount()\n    v.apply()\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "sf_account_manager.py", "id": "9189844f12a32a306b9c0a3f3c8c0d3b", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/storage/netapp/sf_account_manager.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}