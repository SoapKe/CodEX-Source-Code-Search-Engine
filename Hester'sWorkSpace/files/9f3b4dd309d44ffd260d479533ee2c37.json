{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo import api, fields, models\n\n\nclass HrDepartment(models.Model):\n    _inherit = 'hr.department'\n\n    new_applicant_count = fields.Integer(\n        compute='_compute_new_applicant_count', string='New Applicant')\n    new_hired_employee = fields.Integer(\n        compute='_compute_recruitment_stats', string='New Hired Employee')\n    expected_employee = fields.Integer(\n        compute='_compute_recruitment_stats', string='Expected Employee')\n\n    @api.multi\n    def _compute_new_applicant_count(self):\n        applicant_data = self.env['hr.applicant'].read_group(\n            [('department_id', 'in', self.ids), ('stage_id.sequence', '<=', '1')],\n            ['department_id'], ['department_id'])\n        result = dict((data['department_id'][0], data['department_id_count']) for data in applicant_data)\n        for department in self:\n            department.new_applicant_count = result.get(department.id, 0)\n\n    @api.multi\n    def _compute_recruitment_stats(self):\n        job_data = self.env['hr.job'].read_group(\n            [('department_id', 'in', self.ids)],\n            ['no_of_hired_employee', 'no_of_recruitment', 'department_id'], ['department_id'])\n        new_emp = dict((data['department_id'][0], data['no_of_hired_employee']) for data in job_data)\n        expected_emp = dict((data['department_id'][0], data['no_of_recruitment']) for data in job_data)\n        for department in self:\n            department.new_hired_employee = new_emp.get(department.id, 0)\n            department.expected_employee = expected_emp.get(department.id, 0)\n", "comments": "      coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo import api, fields, models\n\n\nclass HrDepartment(models.Model):\n    _inherit = 'hr.department'\n\n    new_applicant_count = fields.Integer(\n        compute='_compute_new_applicant_count', string='New Applicant')\n    new_hired_employee = fields.Integer(\n        compute='_compute_recruitment_stats', string='New Hired Employee')\n    expected_employee = fields.Integer(\n        compute='_compute_recruitment_stats', string='Expected Employee')\n\n    @api.multi\n    def _compute_new_applicant_count(self):\n        applicant_data = self.env['hr.applicant'].read_group(\n            [('department_id', 'in', self.ids), ('stage_id.sequence', '<=', '1')],\n            ['department_id'], ['department_id'])\n        result = dict((data['department_id'][0], data['department_id_count']) for data in applicant_data)\n        for department in self:\n            department.new_applicant_count = result.get(department.id, 0)\n\n    @api.multi\n    def _compute_recruitment_stats(self):\n        job_data = self.env['hr.job'].read_group(\n            [('department_id', 'in', self.ids)],\n            ['no_of_hired_employee', 'no_of_recruitment', 'department_id'], ['department_id'])\n        new_emp = dict((data['department_id'][0], data['no_of_hired_employee']) for data in job_data)\n        expected_emp = dict((data['department_id'][0], data['no_of_recruitment']) for data in job_data)\n        for department in self:\n            department.new_hired_employee = new_emp.get(department.id, 0)\n            department.expected_employee = expected_emp.get(department.id, 0)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "hr_department.py", "id": "9f3b4dd309d44ffd260d479533ee2c37", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_recruitment/models/hr_department.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}