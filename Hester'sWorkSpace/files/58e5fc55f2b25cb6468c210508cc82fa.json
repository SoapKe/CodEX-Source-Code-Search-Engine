{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2013, Chatham Financial <oss@chathamfinancial.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rabbitmq_parameter\nshort_description: Adds or removes parameters to RabbitMQ\ndescription:\n  - Manage dynamic, cluster-wide parameters for RabbitMQ\nversion_added: \"1.1\"\nauthor: '\"Chris Hoffman (@chrishoffman)\"'\noptions:\n  component:\n    description:\n      - Name of the component of which the parameter is being set\n    required: true\n  name:\n    description:\n      - Name of the parameter being set\n    required: true\n  value:\n    description:\n      - Value of the parameter, as a JSON term\n  vhost:\n    description:\n      - vhost to apply access privileges.\n    default: /\n  node:\n    description:\n      - erlang node name of the rabbit we wish to configure\n    default: rabbit\n    version_added: \"1.2\"\n  state:\n    description:\n      - Specify if user is to be added or removed\n    default: present\n    choices: [ 'present', 'absent']\n'''\n\nEXAMPLES = \"\"\"\n# Set the federation parameter 'local_username' to a value of 'guest' (in quotes)\n- rabbitmq_parameter:\n    component: federation\n    name: local-username\n    value: '\"guest\"'\n    state: present\n\"\"\"\nimport json\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nclass RabbitMqParameter(object):\n    def __init__(self, module, component, name, value, vhost, node):\n        self.module = module\n        self.component = component\n        self.name = name\n        self.value = value\n        self.vhost = vhost\n        self.node = node\n\n        self._value = None\n\n        self._rabbitmqctl = module.get_bin_path('rabbitmqctl', True)\n\n    def _exec(self, args, run_in_check_mode=False):\n        if not self.module.check_mode or (self.module.check_mode and run_in_check_mode):\n            cmd = [self._rabbitmqctl, '-q', '-n', self.node]\n            rc, out, err = self.module.run_command(cmd + args, check_rc=True)\n            return out.splitlines()\n        return list()\n\n    def get(self):\n        parameters = self._exec(['list_parameters', '-p', self.vhost], True)\n\n        for param_item in parameters:\n            component, name, value = param_item.split('\\t')\n\n            if component == self.component and name == self.name:\n                self._value = json.loads(value)\n                return True\n        return False\n\n    def set(self):\n        self._exec(['set_parameter',\n                    '-p',\n                    self.vhost,\n                    self.component,\n                    self.name,\n                    json.dumps(self.value)])\n\n    def delete(self):\n        self._exec(['clear_parameter', '-p', self.vhost, self.component, self.name])\n\n    def has_modifications(self):\n        return self.value != self._value\n\n\ndef main():\n    arg_spec = dict(\n        component=dict(required=True),\n        name=dict(required=True),\n        value=dict(default=None),\n        vhost=dict(default='/'),\n        state=dict(default='present', choices=['present', 'absent']),\n        node=dict(default='rabbit')\n    )\n    module = AnsibleModule(\n        argument_spec=arg_spec,\n        supports_check_mode=True\n    )\n\n    component = module.params['component']\n    name = module.params['name']\n    value = module.params['value']\n    if isinstance(value, str):\n        value = json.loads(value)\n    vhost = module.params['vhost']\n    state = module.params['state']\n    node = module.params['node']\n\n    result = dict(changed=False)\n    rabbitmq_parameter = RabbitMqParameter(module, component, name, value, vhost, node)\n\n    if rabbitmq_parameter.get():\n        if state == 'absent':\n            rabbitmq_parameter.delete()\n            result['changed'] = True\n        else:\n            if rabbitmq_parameter.has_modifications():\n                rabbitmq_parameter.set()\n                result['changed'] = True\n    elif state == 'present':\n        rabbitmq_parameter.set()\n        result['changed'] = True\n\n    result['component'] = component\n    result['name'] = name\n    result['vhost'] = vhost\n    result['state'] = state\n    module.exit_json(**result)\n\nif __name__ == '__main__':\n    main()\n", "comments": "      set federation parameter  local username  value  guest  (in quotes)   rabbitmq parameter      component  federation     name  local username     value    guest       state  present              module  rabbitmq parameter short description  adds removes parameters rabbitmq description      manage dynamic  cluster wide parameters rabbitmq version added   1 1  author    chris hoffman ( chrishoffman)   options    component      description          name component parameter set     required  true   name      description          name parameter set     required  true   value      description          value parameter  json term   vhost      description          vhost apply access privileges      default      node      description          erlang node name rabbit wish configure     default  rabbit     version added   1 2    state      description          specify user added removed     default  present     choices     present    absent           usr bin python        coding  utf 8        (c) 2013  chatham financial  oss chathamfinancial com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    set federation parameter  local username  value  guest  (in quotes) ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2013, Chatham Financial <oss@chathamfinancial.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rabbitmq_parameter\nshort_description: Adds or removes parameters to RabbitMQ\ndescription:\n  - Manage dynamic, cluster-wide parameters for RabbitMQ\nversion_added: \"1.1\"\nauthor: '\"Chris Hoffman (@chrishoffman)\"'\noptions:\n  component:\n    description:\n      - Name of the component of which the parameter is being set\n    required: true\n  name:\n    description:\n      - Name of the parameter being set\n    required: true\n  value:\n    description:\n      - Value of the parameter, as a JSON term\n  vhost:\n    description:\n      - vhost to apply access privileges.\n    default: /\n  node:\n    description:\n      - erlang node name of the rabbit we wish to configure\n    default: rabbit\n    version_added: \"1.2\"\n  state:\n    description:\n      - Specify if user is to be added or removed\n    default: present\n    choices: [ 'present', 'absent']\n'''\n\nEXAMPLES = \"\"\"\n# Set the federation parameter 'local_username' to a value of 'guest' (in quotes)\n- rabbitmq_parameter:\n    component: federation\n    name: local-username\n    value: '\"guest\"'\n    state: present\n\"\"\"\nimport json\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nclass RabbitMqParameter(object):\n    def __init__(self, module, component, name, value, vhost, node):\n        self.module = module\n        self.component = component\n        self.name = name\n        self.value = value\n        self.vhost = vhost\n        self.node = node\n\n        self._value = None\n\n        self._rabbitmqctl = module.get_bin_path('rabbitmqctl', True)\n\n    def _exec(self, args, run_in_check_mode=False):\n        if not self.module.check_mode or (self.module.check_mode and run_in_check_mode):\n            cmd = [self._rabbitmqctl, '-q', '-n', self.node]\n            rc, out, err = self.module.run_command(cmd + args, check_rc=True)\n            return out.splitlines()\n        return list()\n\n    def get(self):\n        parameters = self._exec(['list_parameters', '-p', self.vhost], True)\n\n        for param_item in parameters:\n            component, name, value = param_item.split('\\t')\n\n            if component == self.component and name == self.name:\n                self._value = json.loads(value)\n                return True\n        return False\n\n    def set(self):\n        self._exec(['set_parameter',\n                    '-p',\n                    self.vhost,\n                    self.component,\n                    self.name,\n                    json.dumps(self.value)])\n\n    def delete(self):\n        self._exec(['clear_parameter', '-p', self.vhost, self.component, self.name])\n\n    def has_modifications(self):\n        return self.value != self._value\n\n\ndef main():\n    arg_spec = dict(\n        component=dict(required=True),\n        name=dict(required=True),\n        value=dict(default=None),\n        vhost=dict(default='/'),\n        state=dict(default='present', choices=['present', 'absent']),\n        node=dict(default='rabbit')\n    )\n    module = AnsibleModule(\n        argument_spec=arg_spec,\n        supports_check_mode=True\n    )\n\n    component = module.params['component']\n    name = module.params['name']\n    value = module.params['value']\n    if isinstance(value, str):\n        value = json.loads(value)\n    vhost = module.params['vhost']\n    state = module.params['state']\n    node = module.params['node']\n\n    result = dict(changed=False)\n    rabbitmq_parameter = RabbitMqParameter(module, component, name, value, vhost, node)\n\n    if rabbitmq_parameter.get():\n        if state == 'absent':\n            rabbitmq_parameter.delete()\n            result['changed'] = True\n        else:\n            if rabbitmq_parameter.has_modifications():\n                rabbitmq_parameter.set()\n                result['changed'] = True\n    elif state == 'present':\n        rabbitmq_parameter.set()\n        result['changed'] = True\n\n    result['component'] = component\n    result['name'] = name\n    result['vhost'] = vhost\n    result['state'] = state\n    module.exit_json(**result)\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "rabbitmq_parameter.py", "id": "58e5fc55f2b25cb6468c210508cc82fa", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/messaging/rabbitmq_parameter.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}