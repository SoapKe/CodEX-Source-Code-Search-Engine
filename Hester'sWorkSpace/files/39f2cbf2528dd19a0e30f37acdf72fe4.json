{"author": "nvbn", "code": "import pytest\nfrom thefuck.rules.git_branch_exists import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture\ndef output(src_branch_name):\n    return \"fatal: A branch named '{}' already exists.\".format(src_branch_name)\n\n\n@pytest.fixture\ndef new_command(branch_name):\n    return [cmd.format(branch_name) for cmd in [\n        'git branch -d {0} && git branch {0}',\n        'git branch -d {0} && git checkout -b {0}',\n        'git branch -D {0} && git branch {0}',\n        'git branch -D {0} && git checkout -b {0}', 'git checkout {0}']]\n\n\n@pytest.mark.parametrize('script, src_branch_name, branch_name', [\n    ('git branch foo', 'foo', 'foo'),\n    ('git checkout bar', 'bar', 'bar'),\n    ('git checkout -b \"let\\'s-push-this\"', '\"let\\'s-push-this\"', '\"let\\'s-push-this\"')])\ndef test_match(output, script, branch_name):\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script', [\n    'git branch foo',\n    'git checkout bar',\n    'git checkout -b \"let\\'s-push-this\"'])\ndef test_not_match(script):\n    assert not match(Command(script, ''))\n\n\n@pytest.mark.parametrize('script, src_branch_name, branch_name', [\n    ('git branch foo', 'foo', 'foo'),\n    ('git checkout bar', 'bar', 'bar'),\n    ('git checkout -b \"let\\'s-push-this\"', \"let's-push-this\", \"let\\\\'s-push-this\")])\ndef test_get_new_command(output, new_command, script, src_branch_name, branch_name):\n    assert get_new_command(Command(script, output)) == new_command\n", "comments": "", "content": "import pytest\nfrom thefuck.rules.git_branch_exists import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture\ndef output(src_branch_name):\n    return \"fatal: A branch named '{}' already exists.\".format(src_branch_name)\n\n\n@pytest.fixture\ndef new_command(branch_name):\n    return [cmd.format(branch_name) for cmd in [\n        'git branch -d {0} && git branch {0}',\n        'git branch -d {0} && git checkout -b {0}',\n        'git branch -D {0} && git branch {0}',\n        'git branch -D {0} && git checkout -b {0}', 'git checkout {0}']]\n\n\n@pytest.mark.parametrize('script, src_branch_name, branch_name', [\n    ('git branch foo', 'foo', 'foo'),\n    ('git checkout bar', 'bar', 'bar'),\n    ('git checkout -b \"let\\'s-push-this\"', '\"let\\'s-push-this\"', '\"let\\'s-push-this\"')])\ndef test_match(output, script, branch_name):\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script', [\n    'git branch foo',\n    'git checkout bar',\n    'git checkout -b \"let\\'s-push-this\"'])\ndef test_not_match(script):\n    assert not match(Command(script, ''))\n\n\n@pytest.mark.parametrize('script, src_branch_name, branch_name', [\n    ('git branch foo', 'foo', 'foo'),\n    ('git checkout bar', 'bar', 'bar'),\n    ('git checkout -b \"let\\'s-push-this\"', \"let's-push-this\", \"let\\\\'s-push-this\")])\ndef test_get_new_command(output, new_command, script, src_branch_name, branch_name):\n    assert get_new_command(Command(script, output)) == new_command\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_git_branch_exists.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_git_branch_exists.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}