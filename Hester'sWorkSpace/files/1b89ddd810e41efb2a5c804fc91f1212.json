{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import remove_end\n\n\nclass ThisAVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?thisav\\.com/video/(?P<id>[0-9]+)/.*'\n    _TESTS = [{\n        \n        'url': 'http://www.thisav.com/video/47734/%98%26sup1%3B%83%9E%83%82---just-fit.html',\n        'md5': '0480f1ef3932d901f0e0e719f188f19b',\n        'info_dict': {\n            'id': '47734',\n            'ext': 'flv',\n            'title': '\u9ad8\u6a39\u30de\u30ea\u30a2 - Just fit',\n            'uploader': 'dj7970',\n            'uploader_id': 'dj7970'\n        }\n    }, {\n        \n        'url': 'http://www.thisav.com/video/242352/nerdy-18yo-big-ass-tattoos-and-glasses.html',\n        'md5': 'ba90c076bd0f80203679e5b60bf523ee',\n        'info_dict': {\n            'id': '242352',\n            'ext': 'mp4',\n            'title': 'Nerdy 18yo Big Ass Tattoos and Glasses',\n            'uploader': 'cybersluts',\n            'uploader_id': 'cybersluts',\n        },\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        video_id = mobj.group('id')\n        webpage = self._download_webpage(url, video_id)\n        title = remove_end(self._html_search_regex(\n            r'<title>([^<]+)</title>', webpage, 'title'),\n            ' - \u8996\u983b - ThisAV.com-\u4e16\u754c\u7b2c\u4e00\u4e2d\u6587\u6210\u4eba\u5a1b\u6a02\u7db2\u7ad9')\n        video_url = self._html_search_regex(\n            r\"addVariable\\('file','([^']+)'\\);\", webpage, 'video url', default=None)\n        if video_url:\n            info_dict = {\n                'formats': [{\n                    'url': video_url,\n                }],\n            }\n        else:\n            entries = self._parse_html5_media_entries(url, webpage, video_id)\n            if entries:\n                info_dict = entries[0]\n            else:\n                info_dict = self._extract_jwplayer_data(\n                    webpage, video_id, require_title=False)\n        uploader = self._html_search_regex(\n            r': <a href=\"http://www\\.thisav\\.com/user/[0-9]+/(?:[^\"]+)\">([^<]+)</a>',\n            webpage, 'uploader name', fatal=False)\n        uploader_id = self._html_search_regex(\n            r': <a href=\"http://www\\.thisav\\.com/user/[0-9]+/([^\"]+)\">(?:[^<]+)</a>',\n            webpage, 'uploader id', fatal=False)\n\n        info_dict.update({\n            'id': video_id,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'title': title,\n        })\n\n        return info_dict\n", "comments": "# coding: utf-8\n# jwplayer\n# html5 media\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import remove_end\n\n\nclass ThisAVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?thisav\\.com/video/(?P<id>[0-9]+)/.*'\n    _TESTS = [{\n        # jwplayer\n        'url': 'http://www.thisav.com/video/47734/%98%26sup1%3B%83%9E%83%82---just-fit.html',\n        'md5': '0480f1ef3932d901f0e0e719f188f19b',\n        'info_dict': {\n            'id': '47734',\n            'ext': 'flv',\n            'title': '\u9ad8\u6a39\u30de\u30ea\u30a2 - Just fit',\n            'uploader': 'dj7970',\n            'uploader_id': 'dj7970'\n        }\n    }, {\n        # html5 media\n        'url': 'http://www.thisav.com/video/242352/nerdy-18yo-big-ass-tattoos-and-glasses.html',\n        'md5': 'ba90c076bd0f80203679e5b60bf523ee',\n        'info_dict': {\n            'id': '242352',\n            'ext': 'mp4',\n            'title': 'Nerdy 18yo Big Ass Tattoos and Glasses',\n            'uploader': 'cybersluts',\n            'uploader_id': 'cybersluts',\n        },\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        video_id = mobj.group('id')\n        webpage = self._download_webpage(url, video_id)\n        title = remove_end(self._html_search_regex(\n            r'<title>([^<]+)</title>', webpage, 'title'),\n            ' - \u8996\u983b - ThisAV.com-\u4e16\u754c\u7b2c\u4e00\u4e2d\u6587\u6210\u4eba\u5a1b\u6a02\u7db2\u7ad9')\n        video_url = self._html_search_regex(\n            r\"addVariable\\('file','([^']+)'\\);\", webpage, 'video url', default=None)\n        if video_url:\n            info_dict = {\n                'formats': [{\n                    'url': video_url,\n                }],\n            }\n        else:\n            entries = self._parse_html5_media_entries(url, webpage, video_id)\n            if entries:\n                info_dict = entries[0]\n            else:\n                info_dict = self._extract_jwplayer_data(\n                    webpage, video_id, require_title=False)\n        uploader = self._html_search_regex(\n            r': <a href=\"http://www\\.thisav\\.com/user/[0-9]+/(?:[^\"]+)\">([^<]+)</a>',\n            webpage, 'uploader name', fatal=False)\n        uploader_id = self._html_search_regex(\n            r': <a href=\"http://www\\.thisav\\.com/user/[0-9]+/([^\"]+)\">(?:[^<]+)</a>',\n            webpage, 'uploader id', fatal=False)\n\n        info_dict.update({\n            'id': video_id,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'title': title,\n        })\n\n        return info_dict\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "thisav.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/thisav.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}