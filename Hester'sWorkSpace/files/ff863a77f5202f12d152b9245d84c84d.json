{"author": "ansible", "code": "\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: profitbricks_datacenter\nshort_description: Create or destroy a ProfitBricks Virtual Datacenter.\ndescription:\n     - This is a simple module that supports creating or removing vDCs. A vDC is required before you can create servers. This module has a dependency\n       on profitbricks >= 1.0.0\nversion_added: \"2.0\"\noptions:\n  name:\n    description:\n      - The name of the virtual datacenter.\n    required: true\n  description:\n    description:\n      - The description of the virtual datacenter.\n    required: false\n  location:\n    description:\n      - The datacenter location.\n    required: false\n    default: us/las\n    choices: [ \"us/las\", \"de/fra\", \"de/fkb\" ]\n  subscription_user:\n    description:\n      - The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environment variable.\n    required: false\n  subscription_password:\n    description:\n      - THe ProfitBricks password. Overrides the PB_PASSWORD environment variable.\n    required: false\n  wait:\n    description:\n      - wait for the datacenter to be created before returning\n    required: false\n    default: \"yes\"\n    choices: [ \"yes\", \"no\" ]\n  wait_timeout:\n    description:\n      - how long before wait gives up, in seconds\n    default: 600\n  state:\n    description:\n      - create or terminate datacenters\n    required: false\n    default: 'present'\n    choices: [ \"present\", \"absent\" ]\n\nrequirements: [ \"profitbricks\" ]\nauthor: Matt Baldwin (baldwin@stackpointcloud.com)\n'''\n\nEXAMPLES = '''\n\n\n- profitbricks_datacenter:\n    datacenter: Tardis One\n    wait_timeout: 500\n\n\n- profitbricks_datacenter:\n    datacenter: Tardis One\n    wait_timeout: 500\n    state: absent\n\n'''\n\nimport re\nimport time\n\nHAS_PB_SDK = True\ntry:\n    from profitbricks.client import ProfitBricksService, Datacenter\nexcept ImportError:\n    HAS_PB_SDK = False\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nLOCATIONS = ['us/las',\n             'de/fra',\n             'de/fkb']\n\nuuid_match = re.compile(\n    r'[\\w]{8}-[\\w]{4}-[\\w]{4}-[\\w]{4}-[\\w]{12}', re.I)\n\n\ndef _wait_for_completion(profitbricks, promise, wait_timeout, msg):\n    if not promise:\n        return\n    wait_timeout = time.time() + wait_timeout\n    while wait_timeout > time.time():\n        time.sleep(5)\n        operation_result = profitbricks.get_request(\n            request_id=promise['requestId'],\n            status=True)\n\n        if operation_result['metadata']['status'] == \"DONE\":\n            return\n        elif operation_result['metadata']['status'] == \"FAILED\":\n            raise Exception(\n                'Request failed to complete ' + msg + ' \"' + str(\n                    promise['requestId']) + '\" to complete.')\n\n    raise Exception(\n        'Timed out waiting for async operation ' + msg + ' \"' + str(\n            promise['requestId']\n        ) + '\" to complete.')\n\n\ndef _remove_datacenter(module, profitbricks, datacenter):\n    try:\n        profitbricks.delete_datacenter(datacenter)\n    except Exception as e:\n        module.fail_json(msg=\"failed to remove the datacenter: %s\" % str(e))\n\n\ndef create_datacenter(module, profitbricks):\n    \"\"\"\n    Creates a Datacenter\n\n    This will create a new Datacenter in the specified location.\n\n    module : AnsibleModule object\n    profitbricks: authenticated profitbricks object.\n\n    Returns:\n        True if a new datacenter was created, false otherwise\n    \"\"\"\n    name = module.params.get('name')\n    location = module.params.get('location')\n    description = module.params.get('description')\n    wait = module.params.get('wait')\n    wait_timeout = int(module.params.get('wait_timeout'))\n\n    i = Datacenter(\n        name=name,\n        location=location,\n        description=description\n    )\n\n    try:\n        datacenter_response = profitbricks.create_datacenter(datacenter=i)\n\n        if wait:\n            _wait_for_completion(profitbricks, datacenter_response,\n                                 wait_timeout, \"_create_datacenter\")\n\n        results = {\n            'datacenter_id': datacenter_response['id']\n        }\n\n        return results\n\n    except Exception as e:\n        module.fail_json(msg=\"failed to create the new datacenter: %s\" % str(e))\n\n\ndef remove_datacenter(module, profitbricks):\n    \"\"\"\n    Removes a Datacenter.\n\n    This will remove a datacenter.\n\n    module : AnsibleModule object\n    profitbricks: authenticated profitbricks object.\n\n    Returns:\n        True if the datacenter was deleted, false otherwise\n    \"\"\"\n    name = module.params.get('name')\n    changed = False\n\n    if(uuid_match.match(name)):\n        _remove_datacenter(module, profitbricks, name)\n        changed = True\n    else:\n        datacenters = profitbricks.list_datacenters()\n\n        for d in datacenters['items']:\n            vdc = profitbricks.get_datacenter(d['id'])\n\n            if name == vdc['properties']['name']:\n                name = d['id']\n                _remove_datacenter(module, profitbricks, name)\n                changed = True\n\n    return changed\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(),\n            description=dict(),\n            location=dict(choices=LOCATIONS, default='us/las'),\n            subscription_user=dict(),\n            subscription_password=dict(no_log=True),\n            wait=dict(type='bool', default=True),\n            wait_timeout=dict(default=600),\n            state=dict(default='present'),\n        )\n    )\n    if not HAS_PB_SDK:\n        module.fail_json(msg='profitbricks required for this module')\n\n    if not module.params.get('subscription_user'):\n        module.fail_json(msg='subscription_user parameter is required')\n    if not module.params.get('subscription_password'):\n        module.fail_json(msg='subscription_password parameter is required')\n\n    subscription_user = module.params.get('subscription_user')\n    subscription_password = module.params.get('subscription_password')\n\n    profitbricks = ProfitBricksService(\n        username=subscription_user,\n        password=subscription_password)\n\n    state = module.params.get('state')\n\n    if state == 'absent':\n        if not module.params.get('name'):\n            module.fail_json(msg='name parameter is required deleting a virtual datacenter.')\n\n        try:\n            (changed) = remove_datacenter(module, profitbricks)\n            module.exit_json(\n                changed=changed)\n        except Exception as e:\n            module.fail_json(msg='failed to set datacenter state: %s' % str(e))\n\n    elif state == 'present':\n        if not module.params.get('name'):\n            module.fail_json(msg='name parameter is required for a new datacenter')\n        if not module.params.get('location'):\n            module.fail_json(msg='location parameter is required for a new datacenter')\n\n        try:\n            (datacenter_dict_array) = create_datacenter(module, profitbricks)\n            module.exit_json(**datacenter_dict_array)\n        except Exception as e:\n            module.fail_json(msg='failed to set datacenter state: %s' % str(e))\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        creates datacenter      this create new datacenter specified location       module   ansiblemodule object     profitbricks  authenticated profitbricks object       returns          true new datacenter created  false otherwise             name   module params get( name )     location   module params get( location )     description   module params get( description )     wait   module params get( wait )     wait timeout   int(module params get( wait timeout ))        datacenter(         name name          location location          description description     )      try          datacenter response   profitbricks create datacenter(datacenter i)          wait               wait completion(profitbricks  datacenter response                                   wait timeout    create datacenter )          results                  datacenter id   datacenter response  id                      return results      except exception e          module fail json(msg  failed create new datacenter      str(e))   def remove datacenter(module  profitbricks)              removes datacenter       this remove datacenter       module   ansiblemodule object     profitbricks  authenticated profitbricks object       returns          true datacenter deleted  false otherwise                  module  profitbricks datacenter short description  create destroy profitbricks virtual datacenter  description         this simple module supports creating removing vdcs  a vdc required create servers  this module dependency        profitbricks    1 0 0 version added   2 0  options    name      description          the name virtual datacenter      required  true   description      description          the description virtual datacenter      required  false   location      description          the datacenter location      required  false     default  us las     choices     us las    de fra    de fkb      subscription user      description          the profitbricks username  overrides pb subscription id environment variable      required  false   subscription password      description          the profitbricks password  overrides pb password environment variable      required  false   wait      description          wait datacenter created returning     required  false     default   yes      choices     yes         wait timeout      description          long wait gives  seconds     default  600   state      description          create terminate datacenters     required  false     default   present      choices     present    absent     requirements     profitbricks    author  matt baldwin (baldwin stackpointcloud com)      examples          create datacenter   profitbricks datacenter      datacenter  tardis one     wait timeout  500    destroy datacenter  this remove servers  volumes  objects datacenter    profitbricks datacenter      datacenter  tardis one     wait timeout  500     state  absent          usr bin python    copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    create datacenter    destroy datacenter  this remove servers  volumes  objects datacenter  ", "content": "#!/usr/bin/python\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: profitbricks_datacenter\nshort_description: Create or destroy a ProfitBricks Virtual Datacenter.\ndescription:\n     - This is a simple module that supports creating or removing vDCs. A vDC is required before you can create servers. This module has a dependency\n       on profitbricks >= 1.0.0\nversion_added: \"2.0\"\noptions:\n  name:\n    description:\n      - The name of the virtual datacenter.\n    required: true\n  description:\n    description:\n      - The description of the virtual datacenter.\n    required: false\n  location:\n    description:\n      - The datacenter location.\n    required: false\n    default: us/las\n    choices: [ \"us/las\", \"de/fra\", \"de/fkb\" ]\n  subscription_user:\n    description:\n      - The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environment variable.\n    required: false\n  subscription_password:\n    description:\n      - THe ProfitBricks password. Overrides the PB_PASSWORD environment variable.\n    required: false\n  wait:\n    description:\n      - wait for the datacenter to be created before returning\n    required: false\n    default: \"yes\"\n    choices: [ \"yes\", \"no\" ]\n  wait_timeout:\n    description:\n      - how long before wait gives up, in seconds\n    default: 600\n  state:\n    description:\n      - create or terminate datacenters\n    required: false\n    default: 'present'\n    choices: [ \"present\", \"absent\" ]\n\nrequirements: [ \"profitbricks\" ]\nauthor: Matt Baldwin (baldwin@stackpointcloud.com)\n'''\n\nEXAMPLES = '''\n\n# Create a Datacenter\n- profitbricks_datacenter:\n    datacenter: Tardis One\n    wait_timeout: 500\n\n# Destroy a Datacenter. This will remove all servers, volumes, and other objects in the datacenter.\n- profitbricks_datacenter:\n    datacenter: Tardis One\n    wait_timeout: 500\n    state: absent\n\n'''\n\nimport re\nimport time\n\nHAS_PB_SDK = True\ntry:\n    from profitbricks.client import ProfitBricksService, Datacenter\nexcept ImportError:\n    HAS_PB_SDK = False\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nLOCATIONS = ['us/las',\n             'de/fra',\n             'de/fkb']\n\nuuid_match = re.compile(\n    r'[\\w]{8}-[\\w]{4}-[\\w]{4}-[\\w]{4}-[\\w]{12}', re.I)\n\n\ndef _wait_for_completion(profitbricks, promise, wait_timeout, msg):\n    if not promise:\n        return\n    wait_timeout = time.time() + wait_timeout\n    while wait_timeout > time.time():\n        time.sleep(5)\n        operation_result = profitbricks.get_request(\n            request_id=promise['requestId'],\n            status=True)\n\n        if operation_result['metadata']['status'] == \"DONE\":\n            return\n        elif operation_result['metadata']['status'] == \"FAILED\":\n            raise Exception(\n                'Request failed to complete ' + msg + ' \"' + str(\n                    promise['requestId']) + '\" to complete.')\n\n    raise Exception(\n        'Timed out waiting for async operation ' + msg + ' \"' + str(\n            promise['requestId']\n        ) + '\" to complete.')\n\n\ndef _remove_datacenter(module, profitbricks, datacenter):\n    try:\n        profitbricks.delete_datacenter(datacenter)\n    except Exception as e:\n        module.fail_json(msg=\"failed to remove the datacenter: %s\" % str(e))\n\n\ndef create_datacenter(module, profitbricks):\n    \"\"\"\n    Creates a Datacenter\n\n    This will create a new Datacenter in the specified location.\n\n    module : AnsibleModule object\n    profitbricks: authenticated profitbricks object.\n\n    Returns:\n        True if a new datacenter was created, false otherwise\n    \"\"\"\n    name = module.params.get('name')\n    location = module.params.get('location')\n    description = module.params.get('description')\n    wait = module.params.get('wait')\n    wait_timeout = int(module.params.get('wait_timeout'))\n\n    i = Datacenter(\n        name=name,\n        location=location,\n        description=description\n    )\n\n    try:\n        datacenter_response = profitbricks.create_datacenter(datacenter=i)\n\n        if wait:\n            _wait_for_completion(profitbricks, datacenter_response,\n                                 wait_timeout, \"_create_datacenter\")\n\n        results = {\n            'datacenter_id': datacenter_response['id']\n        }\n\n        return results\n\n    except Exception as e:\n        module.fail_json(msg=\"failed to create the new datacenter: %s\" % str(e))\n\n\ndef remove_datacenter(module, profitbricks):\n    \"\"\"\n    Removes a Datacenter.\n\n    This will remove a datacenter.\n\n    module : AnsibleModule object\n    profitbricks: authenticated profitbricks object.\n\n    Returns:\n        True if the datacenter was deleted, false otherwise\n    \"\"\"\n    name = module.params.get('name')\n    changed = False\n\n    if(uuid_match.match(name)):\n        _remove_datacenter(module, profitbricks, name)\n        changed = True\n    else:\n        datacenters = profitbricks.list_datacenters()\n\n        for d in datacenters['items']:\n            vdc = profitbricks.get_datacenter(d['id'])\n\n            if name == vdc['properties']['name']:\n                name = d['id']\n                _remove_datacenter(module, profitbricks, name)\n                changed = True\n\n    return changed\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(),\n            description=dict(),\n            location=dict(choices=LOCATIONS, default='us/las'),\n            subscription_user=dict(),\n            subscription_password=dict(no_log=True),\n            wait=dict(type='bool', default=True),\n            wait_timeout=dict(default=600),\n            state=dict(default='present'),\n        )\n    )\n    if not HAS_PB_SDK:\n        module.fail_json(msg='profitbricks required for this module')\n\n    if not module.params.get('subscription_user'):\n        module.fail_json(msg='subscription_user parameter is required')\n    if not module.params.get('subscription_password'):\n        module.fail_json(msg='subscription_password parameter is required')\n\n    subscription_user = module.params.get('subscription_user')\n    subscription_password = module.params.get('subscription_password')\n\n    profitbricks = ProfitBricksService(\n        username=subscription_user,\n        password=subscription_password)\n\n    state = module.params.get('state')\n\n    if state == 'absent':\n        if not module.params.get('name'):\n            module.fail_json(msg='name parameter is required deleting a virtual datacenter.')\n\n        try:\n            (changed) = remove_datacenter(module, profitbricks)\n            module.exit_json(\n                changed=changed)\n        except Exception as e:\n            module.fail_json(msg='failed to set datacenter state: %s' % str(e))\n\n    elif state == 'present':\n        if not module.params.get('name'):\n            module.fail_json(msg='name parameter is required for a new datacenter')\n        if not module.params.get('location'):\n            module.fail_json(msg='location parameter is required for a new datacenter')\n\n        try:\n            (datacenter_dict_array) = create_datacenter(module, profitbricks)\n            module.exit_json(**datacenter_dict_array)\n        except Exception as e:\n            module.fail_json(msg='failed to set datacenter state: %s' % str(e))\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "profitbricks_datacenter.py", "id": "ff863a77f5202f12d152b9245d84c84d", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/profitbricks/profitbricks_datacenter.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}