{"author": "tornadoweb", "code": "\"\"\"Updates all source files to import the same set of __future__ directives.\n\"\"\"\nfrom lib2to3 import fixer_base\nfrom lib2to3 import pytree\nfrom lib2to3.pgen2 import token\nfrom lib2to3.fixer_util import FromImport, Name, Comma, Newline\n\n\n\ndef is_docstring(stmt):\n    return isinstance(stmt, pytree.Node) and stmt.children[0].type == token.STRING\n\n\nclass FixFutureImports(fixer_base.BaseFix):\n    BM_compatible = True\n\n    PATTERN = \"\"\"import_from< 'from' module_name=\"__future__\" 'import' any >\"\"\"\n\n    def start_tree(self, tree, filename):\n        self.found_future_import = False\n\n    def new_future_import(self, old):\n        new = FromImport(\"__future__\",\n                         [Name(\"absolute_import\", prefix=\" \"), Comma(),\n                          Name(\"division\", prefix=\" \"), Comma(),\n                          Name(\"print_function\", prefix=\" \")])\n        if old is not None:\n            new.prefix = old.prefix\n        return new\n\n    def transform(self, node, results):\n        self.found_future_import = True\n        return self.new_future_import(node)\n\n    def finish_tree(self, tree, filename):\n        if self.found_future_import:\n            return\n        if not isinstance(tree, pytree.Node):\n            # Empty files (usually __init__.py) show up as a single Leaf\n            \n            return\n        first_stmt = tree.children[0]\n        if is_docstring(first_stmt):\n            \n            tree.insert_child(1, Newline())\n            pos = 2\n        elif first_stmt.prefix:\n            # No docstring, but an initial comment (perhaps a #! line).\n            \n            newline = Newline()\n            newline.prefix = first_stmt.prefix\n            first_stmt.prefix = \"\"\n            tree.insert_child(0, newline)\n            pos = 1\n        else:\n            \n            pos = 0\n        tree.insert_child(pos, self.new_future_import(None))\n        tree.insert_child(pos + 1, Newline())  \n", "comments": "   updates source files import set   future   directives      lib2to3 import fixer base lib2to3 import pytree lib2to3 pgen2 import token lib2to3 fixer util import fromimport  name  comma  newline     copied fix tuple params py def docstring(stmt)      return isinstance(stmt  pytree node) stmt children 0  type    token string   class fixfutureimports(fixer base basefix)      bm compatible   true      pattern      import    module name    future     import          copied fix tuple params py    empty files (usually   init   py) show single leaf    instead node  leave alone    skip line add import docstring    no docstring  initial comment (perhaps    line)     transfer initial comment new blank line     no comments docstring  insert start    terminates import stmt ", "content": "\"\"\"Updates all source files to import the same set of __future__ directives.\n\"\"\"\nfrom lib2to3 import fixer_base\nfrom lib2to3 import pytree\nfrom lib2to3.pgen2 import token\nfrom lib2to3.fixer_util import FromImport, Name, Comma, Newline\n\n\n# copied from fix_tuple_params.py\ndef is_docstring(stmt):\n    return isinstance(stmt, pytree.Node) and stmt.children[0].type == token.STRING\n\n\nclass FixFutureImports(fixer_base.BaseFix):\n    BM_compatible = True\n\n    PATTERN = \"\"\"import_from< 'from' module_name=\"__future__\" 'import' any >\"\"\"\n\n    def start_tree(self, tree, filename):\n        self.found_future_import = False\n\n    def new_future_import(self, old):\n        new = FromImport(\"__future__\",\n                         [Name(\"absolute_import\", prefix=\" \"), Comma(),\n                          Name(\"division\", prefix=\" \"), Comma(),\n                          Name(\"print_function\", prefix=\" \")])\n        if old is not None:\n            new.prefix = old.prefix\n        return new\n\n    def transform(self, node, results):\n        self.found_future_import = True\n        return self.new_future_import(node)\n\n    def finish_tree(self, tree, filename):\n        if self.found_future_import:\n            return\n        if not isinstance(tree, pytree.Node):\n            # Empty files (usually __init__.py) show up as a single Leaf\n            # instead of a Node, so leave them alone\n            return\n        first_stmt = tree.children[0]\n        if is_docstring(first_stmt):\n            # Skip a line and add the import after the docstring\n            tree.insert_child(1, Newline())\n            pos = 2\n        elif first_stmt.prefix:\n            # No docstring, but an initial comment (perhaps a #! line).\n            # Transfer the initial comment to a new blank line.\n            newline = Newline()\n            newline.prefix = first_stmt.prefix\n            first_stmt.prefix = \"\"\n            tree.insert_child(0, newline)\n            pos = 1\n        else:\n            # No comments or docstring, just insert at the start\n            pos = 0\n        tree.insert_child(pos, self.new_future_import(None))\n        tree.insert_child(pos + 1, Newline())  # terminates the import stmt\n", "description": "Tornado is a Python web framework and asynchronous networking library, originally developed at FriendFeed.", "file_name": "fix_future_imports.py", "id": "74d76571e220b8c584f3cc0de862551f", "language": "Python", "project_name": "tornado", "quality": "", "save_path": "/home/ubuntu/test_files/clean/test/tornadoweb-tornado/tornadoweb-tornado-62e43f6/maint/scripts/custom_fixers/fix_future_imports.py", "save_time": "", "source": "", "update_at": "2018-03-13T23:11:42Z", "url": "https://github.com/tornadoweb/tornado", "wiki": true}