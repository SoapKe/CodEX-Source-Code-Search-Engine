{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import http, _\nfrom odoo.addons.portal.controllers.portal import CustomerPortal, pager as portal_pager\nfrom odoo.exceptions import AccessError\nfrom odoo.http import request\nfrom odoo.tools import consteq\n\n\nclass PortalAccount(CustomerPortal):\n    \n    def _get_account_invoice_domain(self):\n        partner = request.env.user.partner_id\n        domain = [\n            ('type', 'in', ['out_invoice', 'out_refund']),\n            ('message_partner_ids', 'child_of', [partner.commercial_partner_id.id]),\n            ('state', 'in', ['open', 'paid', 'cancel'])\n        ]\n        return domain\n\n    def _prepare_portal_layout_values(self):\n        values = super(PortalAccount, self)._prepare_portal_layout_values()\n        invoice_count = request.env['account.invoice'].search_count(self._get_account_invoice_domain())\n        values['invoice_count'] = invoice_count\n        return values\n\n    \n    \n    \n\n    def _invoice_check_access(self, invoice_id, access_token=None):\n        invoice = request.env['account.invoice'].browse([invoice_id])\n        invoice_sudo = invoice.sudo()\n        try:\n            invoice.check_access_rights('read')\n            invoice.check_access_rule('read')\n        except AccessError:\n            if not access_token or not consteq(invoice_sudo.access_token, access_token):\n                raise\n        return invoice_sudo\n\n    def _invoice_get_page_view_values(self, invoice, access_token, **kwargs):\n        values = {\n            'page_name': 'invoice',\n            'invoice': invoice,\n        }\n        if access_token:\n            values['no_breadcrumbs'] = True\n            values['access_token'] = access_token\n\n        if kwargs.get('error'):\n            values['error'] = kwargs['error']\n        if kwargs.get('warning'):\n            values['warning'] = kwargs['warning']\n        if kwargs.get('success'):\n            values['success'] = kwargs['success']\n\n        return values\n\n    @http.route(['/my/invoices', '/my/invoices/page/<int:page>'], type='http', auth=\"user\", website=True)\n    def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, **kw):\n        values = self._prepare_portal_layout_values()\n        partner = request.env.user.partner_id\n        AccountInvoice = request.env['account.invoice']\n\n        domain = self._get_account_invoice_domain()\n\n        searchbar_sortings = {\n            'date': {'label': _('Invoice Date'), 'order': 'date_invoice desc'},\n            'duedate': {'label': _('Due Date'), 'order': 'date_due desc'},\n            'name': {'label': _('Reference'), 'order': 'name desc'},\n            'state': {'label': _('Status'), 'order': 'state'},\n        }\n        \n        if not sortby:\n            sortby = 'date'\n        order = searchbar_sortings[sortby]['order']\n\n        archive_groups = self._get_archive_groups('account.invoice', domain)\n        if date_begin and date_end:\n            domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n\n        \n        invoice_count = AccountInvoice.search_count(domain)\n        \n        pager = portal_pager(\n            url=\"/my/invoices\",\n            url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby},\n            total=invoice_count,\n            page=page,\n            step=self._items_per_page\n        )\n        \n        invoices = AccountInvoice.search(domain, order=order, limit=self._items_per_page, offset=pager['offset'])\n        values.update({\n            'date': date_begin,\n            'invoices': invoices,\n            'page_name': 'invoice',\n            'pager': pager,\n            'archive_groups': archive_groups,\n            'default_url': '/my/invoices',\n            'searchbar_sortings': searchbar_sortings,\n            'sortby': sortby,\n        })\n        return request.render(\"account.portal_my_invoices\", values)\n\n    @http.route(['/my/invoices/<int:invoice_id>'], type='http', auth=\"public\", website=True)\n    def portal_my_invoice_detail(self, invoice_id, access_token=None, **kw):\n        try:\n            invoice_sudo = self._invoice_check_access(invoice_id, access_token)\n        except AccessError:\n            return request.redirect('/my')\n\n        values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n        return request.render(\"account.portal_invoice_page\", values)\n\n    @http.route(['/my/invoices/pdf/<int:invoice_id>'], type='http', auth=\"public\", website=True)\n    def portal_my_invoice_report(self, invoice_id, access_token=None, **kw):\n        try:\n            invoice_sudo = self._invoice_check_access(invoice_id, access_token)\n        except AccessError:\n            return request.redirect('/my')\n\n        \n        \n        pdf = request.env.ref('account.account_invoices').sudo().render_qweb_pdf([invoice_sudo.id])[0]\n        pdfhttpheaders = [\n            ('Content-Type', 'application/pdf'),\n            ('Content-Length', len(pdf)),\n        ]\n        return request.make_response(pdf, headers=pdfhttpheaders)\n\n    \n    \n    \n\n    def details_form_validate(self, data):\n        error, error_message = super(PortalAccount, self).details_form_validate(data)\n        \n        partner = request.env['res.users'].browse(request.uid).partner_id\n        invoices = request.env['account.invoice'].sudo().search_count([('partner_id', '=', partner.id), ('state', 'not in', ['draft', 'cancel'])])\n        if invoices:\n            if 'vat' in data and (data['vat'] or False) != (partner.vat or False):\n                error['vat'] = 'error'\n                error_message.append(_('Changing VAT number is not allowed once invoices have been issued for your account. Please contact us directly for this operation.'))\n            if 'name' in data and (data['name'] or False) != (partner.name or False):\n                error['name'] = 'error'\n                error_message.append(_('Changing your name is not allowed once invoices have been issued for your account. Please contact us directly for this operation.'))\n        return error, error_message\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details                                                                     my invoices                                                                    default sort order    count pager    pager    content according pager archive selected    print report sudo  since require access taxes  payment term      portal    access rights                                                                     my home                                                                    prevent vat name change invoices exist ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import http, _\nfrom odoo.addons.portal.controllers.portal import CustomerPortal, pager as portal_pager\nfrom odoo.exceptions import AccessError\nfrom odoo.http import request\nfrom odoo.tools import consteq\n\n\nclass PortalAccount(CustomerPortal):\n    \n    def _get_account_invoice_domain(self):\n        partner = request.env.user.partner_id\n        domain = [\n            ('type', 'in', ['out_invoice', 'out_refund']),\n            ('message_partner_ids', 'child_of', [partner.commercial_partner_id.id]),\n            ('state', 'in', ['open', 'paid', 'cancel'])\n        ]\n        return domain\n\n    def _prepare_portal_layout_values(self):\n        values = super(PortalAccount, self)._prepare_portal_layout_values()\n        invoice_count = request.env['account.invoice'].search_count(self._get_account_invoice_domain())\n        values['invoice_count'] = invoice_count\n        return values\n\n    # ------------------------------------------------------------\n    # My Invoices\n    # ------------------------------------------------------------\n\n    def _invoice_check_access(self, invoice_id, access_token=None):\n        invoice = request.env['account.invoice'].browse([invoice_id])\n        invoice_sudo = invoice.sudo()\n        try:\n            invoice.check_access_rights('read')\n            invoice.check_access_rule('read')\n        except AccessError:\n            if not access_token or not consteq(invoice_sudo.access_token, access_token):\n                raise\n        return invoice_sudo\n\n    def _invoice_get_page_view_values(self, invoice, access_token, **kwargs):\n        values = {\n            'page_name': 'invoice',\n            'invoice': invoice,\n        }\n        if access_token:\n            values['no_breadcrumbs'] = True\n            values['access_token'] = access_token\n\n        if kwargs.get('error'):\n            values['error'] = kwargs['error']\n        if kwargs.get('warning'):\n            values['warning'] = kwargs['warning']\n        if kwargs.get('success'):\n            values['success'] = kwargs['success']\n\n        return values\n\n    @http.route(['/my/invoices', '/my/invoices/page/<int:page>'], type='http', auth=\"user\", website=True)\n    def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, **kw):\n        values = self._prepare_portal_layout_values()\n        partner = request.env.user.partner_id\n        AccountInvoice = request.env['account.invoice']\n\n        domain = self._get_account_invoice_domain()\n\n        searchbar_sortings = {\n            'date': {'label': _('Invoice Date'), 'order': 'date_invoice desc'},\n            'duedate': {'label': _('Due Date'), 'order': 'date_due desc'},\n            'name': {'label': _('Reference'), 'order': 'name desc'},\n            'state': {'label': _('Status'), 'order': 'state'},\n        }\n        # default sort by order\n        if not sortby:\n            sortby = 'date'\n        order = searchbar_sortings[sortby]['order']\n\n        archive_groups = self._get_archive_groups('account.invoice', domain)\n        if date_begin and date_end:\n            domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n\n        # count for pager\n        invoice_count = AccountInvoice.search_count(domain)\n        # pager\n        pager = portal_pager(\n            url=\"/my/invoices\",\n            url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby},\n            total=invoice_count,\n            page=page,\n            step=self._items_per_page\n        )\n        # content according to pager and archive selected\n        invoices = AccountInvoice.search(domain, order=order, limit=self._items_per_page, offset=pager['offset'])\n        values.update({\n            'date': date_begin,\n            'invoices': invoices,\n            'page_name': 'invoice',\n            'pager': pager,\n            'archive_groups': archive_groups,\n            'default_url': '/my/invoices',\n            'searchbar_sortings': searchbar_sortings,\n            'sortby': sortby,\n        })\n        return request.render(\"account.portal_my_invoices\", values)\n\n    @http.route(['/my/invoices/<int:invoice_id>'], type='http', auth=\"public\", website=True)\n    def portal_my_invoice_detail(self, invoice_id, access_token=None, **kw):\n        try:\n            invoice_sudo = self._invoice_check_access(invoice_id, access_token)\n        except AccessError:\n            return request.redirect('/my')\n\n        values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n        return request.render(\"account.portal_invoice_page\", values)\n\n    @http.route(['/my/invoices/pdf/<int:invoice_id>'], type='http', auth=\"public\", website=True)\n    def portal_my_invoice_report(self, invoice_id, access_token=None, **kw):\n        try:\n            invoice_sudo = self._invoice_check_access(invoice_id, access_token)\n        except AccessError:\n            return request.redirect('/my')\n\n        # print report as sudo, since it require access to taxes, payment term, ... and portal\n        # does not have those access rights.\n        pdf = request.env.ref('account.account_invoices').sudo().render_qweb_pdf([invoice_sudo.id])[0]\n        pdfhttpheaders = [\n            ('Content-Type', 'application/pdf'),\n            ('Content-Length', len(pdf)),\n        ]\n        return request.make_response(pdf, headers=pdfhttpheaders)\n\n    # ------------------------------------------------------------\n    # My Home\n    # ------------------------------------------------------------\n\n    def details_form_validate(self, data):\n        error, error_message = super(PortalAccount, self).details_form_validate(data)\n        # prevent VAT/name change if invoices exist\n        partner = request.env['res.users'].browse(request.uid).partner_id\n        invoices = request.env['account.invoice'].sudo().search_count([('partner_id', '=', partner.id), ('state', 'not in', ['draft', 'cancel'])])\n        if invoices:\n            if 'vat' in data and (data['vat'] or False) != (partner.vat or False):\n                error['vat'] = 'error'\n                error_message.append(_('Changing VAT number is not allowed once invoices have been issued for your account. Please contact us directly for this operation.'))\n            if 'name' in data and (data['name'] or False) != (partner.name or False):\n                error['name'] = 'error'\n                error_message.append(_('Changing your name is not allowed once invoices have been issued for your account. Please contact us directly for this operation.'))\n        return error, error_message\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "portal.py", "id": "3f8af0d247d0836da9c26312ee9e7399", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account/controllers/portal.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}