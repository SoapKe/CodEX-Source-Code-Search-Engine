{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Abhijeet Kasurde (akasurde@redhat.com)\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipa_dnsrecord\nauthor: Abhijeet Kasurde (@akasurde)\nshort_description: Manage FreeIPA DNS records\ndescription:\n- Add, modify and delete an IPA DNS Record using IPA API.\noptions:\n  zone_name:\n    description:\n    - The DNS zone name to which DNS record needs to be managed.\n    required: true\n  record_name:\n    description:\n    - The DNS record name to manage.\n    required: true\n    aliases: [\"name\"]\n  record_type:\n    description:\n    - The type of DNS record name.\n    - Currently, 'A', 'AAAA', 'A6', 'CNAME', 'DNAME', 'PTR' and 'TXT' are supported.\n    - \"'A6', 'CNAME', 'DNAME' and 'TXT' are added in version 2.5.\"\n    required: false\n    default: 'A'\n    choices: ['A', 'AAAA', 'A6', 'CNAME', 'DNAME', 'PTR', 'TXT']\n  record_value:\n    description:\n    - Manage DNS record name with this value.\n    - In the case of 'A' or 'AAAA' record types, this will be the IP address.\n    - In the case of 'A6' record type, this will be the A6 Record data.\n    - In the case of 'CNAME' record type, this will be the hostname.\n    - In the case of 'DNAME' record type, this will be the DNAME target.\n    - In the case of 'PTR' record type, this will be the hostname.\n    - In the case of 'TXT' record type, this will be a text.\n    required: true\n  state:\n    description: State to ensure\n    required: false\n    default: present\n    choices: [\"present\", \"absent\"]\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.4\"\n'''\n\nEXAMPLES = '''\n\n- ipa_dnsrecord:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    zone_name: example.com\n    record_name: vm-001\n    record_type: 'AAAA'\n    record_value: '::1'\n\n\n- ipa_dnsrecord:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    zone_name: 2.168.192.in-addr.arpa\n    record_name: 5\n    record_type: 'PTR'\n    record_value: 'internal.ipa.example.com'\n\n\n- ipa_dnsrecord:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    zone_name: example.com\n    record_name: _kerberos\n    record_type: 'TXT'\n    record_value: 'EXAMPLE.COM'\n\n\n- ipa_dnsrecord:\n    name: host01\n    zone_name: example.com\n    record_type: 'AAAA'\n    record_value: '::1'\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n    state: absent\n'''\n\nRETURN = '''\ndnsrecord:\n  description: DNS record as returned by IPA API.\n  returned: always\n  type: dict\n'''\n\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass DNSRecordIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(DNSRecordIPAClient, self).__init__(module, host, port, protocol)\n\n    def dnsrecord_find(self, zone_name, record_name):\n        return self._post_json(method='dnsrecord_find', name=zone_name, item={'idnsname': record_name})\n\n    def dnsrecord_add(self, zone_name=None, record_name=None, details=None):\n        item = dict(idnsname=record_name)\n        if details['record_type'] == 'A':\n            item.update(a_part_ip_address=details['record_value'])\n        elif details['record_type'] == 'AAAA':\n            item.update(aaaa_part_ip_address=details['record_value'])\n        elif details['record_type'] == 'A6':\n            item.update(a6_part_data=details['record_value'])\n        elif details['record_type'] == 'CNAME':\n            item.update(cname_part_hostname=details['record_value'])\n        elif details['record_type'] == 'DNAME':\n            item.update(dname_part_target=details['record_value'])\n        elif details['record_type'] == 'PTR':\n            item.update(ptr_part_hostname=details['record_value'])\n        elif details['record_type'] == 'TXT':\n            item.update(txtrecord=details['record_value'])\n\n        return self._post_json(method='dnsrecord_add', name=zone_name, item=item)\n\n    def dnsrecord_mod(self, zone_name=None, record_name=None, details=None):\n        item = get_dnsrecord_dict(details)\n        item.update(idnsname=record_name)\n        return self._post_json(method='dnsrecord_mod', name=zone_name, item=item)\n\n    def dnsrecord_del(self, zone_name=None, record_name=None, details=None):\n        item = get_dnsrecord_dict(details)\n        item.update(idnsname=record_name)\n        return self._post_json(method='dnsrecord_del', name=zone_name, item=item)\n\n\ndef get_dnsrecord_dict(details=None):\n    module_dnsrecord = dict()\n    if details['record_type'] == 'A' and details['record_value']:\n        module_dnsrecord.update(arecord=details['record_value'])\n    elif details['record_type'] == 'AAAA' and details['record_value']:\n        module_dnsrecord.update(aaaarecord=details['record_value'])\n    elif details['record_type'] == 'A6' and details['record_value']:\n        module_dnsrecord.update(a6record=details['record_value'])\n    elif details['record_type'] == 'CNAME' and details['record_value']:\n        module_dnsrecord.update(cnamerecord=details['record_value'])\n    elif details['record_type'] == 'DNAME' and details['record_value']:\n        module_dnsrecord.update(dnamerecord=details['record_value'])\n    elif details['record_type'] == 'PTR' and details['record_value']:\n        module_dnsrecord.update(ptrrecord=details['record_value'])\n    elif details['record_type'] == 'TXT' and details['record_value']:\n        module_dnsrecord.update(txtrecord=details['record_value'])\n    return module_dnsrecord\n\n\ndef get_dnsrecord_diff(client, ipa_dnsrecord, module_dnsrecord):\n    details = get_dnsrecord_dict(module_dnsrecord)\n    return client.get_diff(ipa_data=ipa_dnsrecord, module_data=details)\n\n\ndef ensure(module, client):\n    zone_name = module.params['zone_name']\n    record_name = module.params['record_name']\n    state = module.params['state']\n\n    ipa_dnsrecord = client.dnsrecord_find(zone_name, record_name)\n    module_dnsrecord = dict(record_type=module.params['record_type'],\n                            record_value=module.params['record_value'])\n\n    changed = False\n    if state == 'present':\n        if not ipa_dnsrecord:\n            changed = True\n            if not module.check_mode:\n                client.dnsrecord_add(zone_name=zone_name,\n                                     record_name=record_name,\n                                     details=module_dnsrecord)\n        else:\n            diff = get_dnsrecord_diff(client, ipa_dnsrecord, module_dnsrecord)\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    client.dnsrecord_mod(zone_name=zone_name,\n                                         record_name=record_name,\n                                         details=module_dnsrecord)\n    else:\n        if ipa_dnsrecord:\n            changed = True\n            if not module.check_mode:\n                client.dnsrecord_del(zone_name=zone_name,\n                                     record_name=record_name,\n                                     details=module_dnsrecord)\n\n    return changed, client.dnsrecord_find(zone_name, record_name)\n\n\ndef main():\n    record_types = ['A', 'AAAA', 'A6', 'CNAME', 'DNAME', 'PTR', 'TXT']\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(zone_name=dict(type='str', required=True),\n                         record_name=dict(type='str', aliases=['name'], required=True),\n                         record_type=dict(type='str', default='A', choices=record_types),\n                         record_value=dict(type='str', required=True),\n                         state=dict(type='str', default='present', choices=['present', 'absent']),\n                         )\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True\n                           )\n\n    client = DNSRecordIPAClient(module=module,\n                                host=module.params['ipa_host'],\n                                port=module.params['ipa_port'],\n                                protocol=module.params['ipa_prot'])\n\n    try:\n        client.login(username=module.params['ipa_user'],\n                     password=module.params['ipa_pass'])\n        changed, record = ensure(module, client)\n        module.exit_json(changed=changed, record=record)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  ipa dnsrecord author  abhijeet kasurde ( akasurde) short description  manage freeipa dns records description    add  modify delete ipa dns record using ipa api  options    zone name      description        the dns zone name dns record needs managed      required  true   record name      description        the dns record name manage      required  true     aliases    name     record type      description        the type dns record name        currently   a    aaaa    a6    cname    dname    ptr   txt  supported          a6    cname    dname   txt  added version 2 5       required  false     default   a      choices    a    aaaa    a6    cname    dname    ptr    txt     record value      description        manage dns record name value        in case  a   aaaa  record types  ip address        in case  a6  record type  a6 record data        in case  cname  record type  hostname        in case  dname  record type  dname target        in case  ptr  record type  hostname        in case  txt  record type  text      required  true   state      description  state ensure     required  false     default  present     choices    present    absent   extends documentation fragment  ipa documentation version added   2 4       examples         ensure dns record present   ipa dnsrecord      ipa host  spider example com     ipa pass  passw0rd      state  present     zone name  example com     record name  vm 001     record type   aaaa      record value     1     ensure ptr record present   ipa dnsrecord      ipa host  spider example com     ipa pass  passw0rd      state  present     zone name  2 168 192 addr arpa     record name  5     record type   ptr      record value   internal ipa example com     ensure txt record present   ipa dnsrecord      ipa host  spider example com     ipa pass  passw0rd      state  present     zone name  example com     record name   kerberos     record type   txt      record value   example com     ensure dns record removed   ipa dnsrecord      name  host01     zone name  example com     record type   aaaa      record value     1      ipa host  ipa example com     ipa user  admin     ipa pass  topsecret     state  absent      return       dnsrecord    description  dns record returned ipa api    returned  always   type  dict         usr bin python        coding  utf 8        copyright  (c) 2017  abhijeet kasurde (akasurde redhat com)    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    ensure dns record present    ensure ptr record present    ensure txt record present    ensure dns record removed ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Abhijeet Kasurde (akasurde@redhat.com)\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipa_dnsrecord\nauthor: Abhijeet Kasurde (@akasurde)\nshort_description: Manage FreeIPA DNS records\ndescription:\n- Add, modify and delete an IPA DNS Record using IPA API.\noptions:\n  zone_name:\n    description:\n    - The DNS zone name to which DNS record needs to be managed.\n    required: true\n  record_name:\n    description:\n    - The DNS record name to manage.\n    required: true\n    aliases: [\"name\"]\n  record_type:\n    description:\n    - The type of DNS record name.\n    - Currently, 'A', 'AAAA', 'A6', 'CNAME', 'DNAME', 'PTR' and 'TXT' are supported.\n    - \"'A6', 'CNAME', 'DNAME' and 'TXT' are added in version 2.5.\"\n    required: false\n    default: 'A'\n    choices: ['A', 'AAAA', 'A6', 'CNAME', 'DNAME', 'PTR', 'TXT']\n  record_value:\n    description:\n    - Manage DNS record name with this value.\n    - In the case of 'A' or 'AAAA' record types, this will be the IP address.\n    - In the case of 'A6' record type, this will be the A6 Record data.\n    - In the case of 'CNAME' record type, this will be the hostname.\n    - In the case of 'DNAME' record type, this will be the DNAME target.\n    - In the case of 'PTR' record type, this will be the hostname.\n    - In the case of 'TXT' record type, this will be a text.\n    required: true\n  state:\n    description: State to ensure\n    required: false\n    default: present\n    choices: [\"present\", \"absent\"]\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.4\"\n'''\n\nEXAMPLES = '''\n# Ensure dns record is present\n- ipa_dnsrecord:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    zone_name: example.com\n    record_name: vm-001\n    record_type: 'AAAA'\n    record_value: '::1'\n\n# Ensure a PTR record is present\n- ipa_dnsrecord:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    zone_name: 2.168.192.in-addr.arpa\n    record_name: 5\n    record_type: 'PTR'\n    record_value: 'internal.ipa.example.com'\n\n# Ensure a TXT record is present\n- ipa_dnsrecord:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    zone_name: example.com\n    record_name: _kerberos\n    record_type: 'TXT'\n    record_value: 'EXAMPLE.COM'\n\n# Ensure that dns record is removed\n- ipa_dnsrecord:\n    name: host01\n    zone_name: example.com\n    record_type: 'AAAA'\n    record_value: '::1'\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n    state: absent\n'''\n\nRETURN = '''\ndnsrecord:\n  description: DNS record as returned by IPA API.\n  returned: always\n  type: dict\n'''\n\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass DNSRecordIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(DNSRecordIPAClient, self).__init__(module, host, port, protocol)\n\n    def dnsrecord_find(self, zone_name, record_name):\n        return self._post_json(method='dnsrecord_find', name=zone_name, item={'idnsname': record_name})\n\n    def dnsrecord_add(self, zone_name=None, record_name=None, details=None):\n        item = dict(idnsname=record_name)\n        if details['record_type'] == 'A':\n            item.update(a_part_ip_address=details['record_value'])\n        elif details['record_type'] == 'AAAA':\n            item.update(aaaa_part_ip_address=details['record_value'])\n        elif details['record_type'] == 'A6':\n            item.update(a6_part_data=details['record_value'])\n        elif details['record_type'] == 'CNAME':\n            item.update(cname_part_hostname=details['record_value'])\n        elif details['record_type'] == 'DNAME':\n            item.update(dname_part_target=details['record_value'])\n        elif details['record_type'] == 'PTR':\n            item.update(ptr_part_hostname=details['record_value'])\n        elif details['record_type'] == 'TXT':\n            item.update(txtrecord=details['record_value'])\n\n        return self._post_json(method='dnsrecord_add', name=zone_name, item=item)\n\n    def dnsrecord_mod(self, zone_name=None, record_name=None, details=None):\n        item = get_dnsrecord_dict(details)\n        item.update(idnsname=record_name)\n        return self._post_json(method='dnsrecord_mod', name=zone_name, item=item)\n\n    def dnsrecord_del(self, zone_name=None, record_name=None, details=None):\n        item = get_dnsrecord_dict(details)\n        item.update(idnsname=record_name)\n        return self._post_json(method='dnsrecord_del', name=zone_name, item=item)\n\n\ndef get_dnsrecord_dict(details=None):\n    module_dnsrecord = dict()\n    if details['record_type'] == 'A' and details['record_value']:\n        module_dnsrecord.update(arecord=details['record_value'])\n    elif details['record_type'] == 'AAAA' and details['record_value']:\n        module_dnsrecord.update(aaaarecord=details['record_value'])\n    elif details['record_type'] == 'A6' and details['record_value']:\n        module_dnsrecord.update(a6record=details['record_value'])\n    elif details['record_type'] == 'CNAME' and details['record_value']:\n        module_dnsrecord.update(cnamerecord=details['record_value'])\n    elif details['record_type'] == 'DNAME' and details['record_value']:\n        module_dnsrecord.update(dnamerecord=details['record_value'])\n    elif details['record_type'] == 'PTR' and details['record_value']:\n        module_dnsrecord.update(ptrrecord=details['record_value'])\n    elif details['record_type'] == 'TXT' and details['record_value']:\n        module_dnsrecord.update(txtrecord=details['record_value'])\n    return module_dnsrecord\n\n\ndef get_dnsrecord_diff(client, ipa_dnsrecord, module_dnsrecord):\n    details = get_dnsrecord_dict(module_dnsrecord)\n    return client.get_diff(ipa_data=ipa_dnsrecord, module_data=details)\n\n\ndef ensure(module, client):\n    zone_name = module.params['zone_name']\n    record_name = module.params['record_name']\n    state = module.params['state']\n\n    ipa_dnsrecord = client.dnsrecord_find(zone_name, record_name)\n    module_dnsrecord = dict(record_type=module.params['record_type'],\n                            record_value=module.params['record_value'])\n\n    changed = False\n    if state == 'present':\n        if not ipa_dnsrecord:\n            changed = True\n            if not module.check_mode:\n                client.dnsrecord_add(zone_name=zone_name,\n                                     record_name=record_name,\n                                     details=module_dnsrecord)\n        else:\n            diff = get_dnsrecord_diff(client, ipa_dnsrecord, module_dnsrecord)\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    client.dnsrecord_mod(zone_name=zone_name,\n                                         record_name=record_name,\n                                         details=module_dnsrecord)\n    else:\n        if ipa_dnsrecord:\n            changed = True\n            if not module.check_mode:\n                client.dnsrecord_del(zone_name=zone_name,\n                                     record_name=record_name,\n                                     details=module_dnsrecord)\n\n    return changed, client.dnsrecord_find(zone_name, record_name)\n\n\ndef main():\n    record_types = ['A', 'AAAA', 'A6', 'CNAME', 'DNAME', 'PTR', 'TXT']\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(zone_name=dict(type='str', required=True),\n                         record_name=dict(type='str', aliases=['name'], required=True),\n                         record_type=dict(type='str', default='A', choices=record_types),\n                         record_value=dict(type='str', required=True),\n                         state=dict(type='str', default='present', choices=['present', 'absent']),\n                         )\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True\n                           )\n\n    client = DNSRecordIPAClient(module=module,\n                                host=module.params['ipa_host'],\n                                port=module.params['ipa_port'],\n                                protocol=module.params['ipa_prot'])\n\n    try:\n        client.login(username=module.params['ipa_user'],\n                     password=module.params['ipa_pass'])\n        changed, record = ensure(module, client)\n        module.exit_json(changed=changed, record=record)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "ipa_dnsrecord.py", "id": "4d92c78555f79cce42fae6eb1055188d", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/identity/ipa/ipa_dnsrecord.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}