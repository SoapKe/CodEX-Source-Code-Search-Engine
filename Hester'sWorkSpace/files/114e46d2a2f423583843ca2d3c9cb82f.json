{"author": "django", "code": "import unittest\nfrom io import StringIO\nfrom unittest import mock\n\nfrom django.db import connection\nfrom django.db.backends.base.creation import BaseDatabaseCreation\nfrom django.db.backends.mysql.creation import DatabaseCreation\nfrom django.db.utils import DatabaseError\nfrom django.test import SimpleTestCase\n\n\n@unittest.skipUnless(connection.vendor == 'mysql', 'MySQL tests')\nclass DatabaseCreationTests(SimpleTestCase):\n\n    def _execute_raise_database_exists(self, cursor, parameters, keepdb=False):\n        raise DatabaseError(1007, \"Can't create database '%s'; database exists\" % parameters['dbname'])\n\n    def _execute_raise_access_denied(self, cursor, parameters, keepdb=False):\n        raise DatabaseError(1044, \"Access denied for user\")\n\n    def patch_test_db_creation(self, execute_create_test_db):\n        return mock.patch.object(BaseDatabaseCreation, '_execute_create_test_db', execute_create_test_db)\n\n    @mock.patch('sys.stdout', new_callable=StringIO)\n    @mock.patch('sys.stderr', new_callable=StringIO)\n    def test_create_test_db_database_exists(self, *mocked_objects):\n        \n        creation = DatabaseCreation(connection)\n        with self.patch_test_db_creation(self._execute_raise_database_exists):\n            with mock.patch('builtins.input', return_value='no'):\n                with self.assertRaises(SystemExit):\n                    \n                    \n                    creation._create_test_db(verbosity=0, autoclobber=False, keepdb=False)\n            \n            creation._create_test_db(verbosity=0, autoclobber=False, keepdb=True)\n\n    @mock.patch('sys.stdout', new_callable=StringIO)\n    @mock.patch('sys.stderr', new_callable=StringIO)\n    def test_create_test_db_unexpected_error(self, *mocked_objects):\n        \n        creation = DatabaseCreation(connection)\n        with self.patch_test_db_creation(self._execute_raise_access_denied):\n            with self.assertRaises(SystemExit):\n                creation._create_test_db(verbosity=0, autoclobber=False, keepdb=False)\n", "comments": "  simulate test database creation raising  database exists     systemexit raised user answers      prompt asking okay delete test database      database exists  appear keepdb    simulate test database creation raising unexpected error ", "content": "import unittest\nfrom io import StringIO\nfrom unittest import mock\n\nfrom django.db import connection\nfrom django.db.backends.base.creation import BaseDatabaseCreation\nfrom django.db.backends.mysql.creation import DatabaseCreation\nfrom django.db.utils import DatabaseError\nfrom django.test import SimpleTestCase\n\n\n@unittest.skipUnless(connection.vendor == 'mysql', 'MySQL tests')\nclass DatabaseCreationTests(SimpleTestCase):\n\n    def _execute_raise_database_exists(self, cursor, parameters, keepdb=False):\n        raise DatabaseError(1007, \"Can't create database '%s'; database exists\" % parameters['dbname'])\n\n    def _execute_raise_access_denied(self, cursor, parameters, keepdb=False):\n        raise DatabaseError(1044, \"Access denied for user\")\n\n    def patch_test_db_creation(self, execute_create_test_db):\n        return mock.patch.object(BaseDatabaseCreation, '_execute_create_test_db', execute_create_test_db)\n\n    @mock.patch('sys.stdout', new_callable=StringIO)\n    @mock.patch('sys.stderr', new_callable=StringIO)\n    def test_create_test_db_database_exists(self, *mocked_objects):\n        # Simulate test database creation raising \"database exists\"\n        creation = DatabaseCreation(connection)\n        with self.patch_test_db_creation(self._execute_raise_database_exists):\n            with mock.patch('builtins.input', return_value='no'):\n                with self.assertRaises(SystemExit):\n                    # SystemExit is raised if the user answers \"no\" to the\n                    # prompt asking if it's okay to delete the test database.\n                    creation._create_test_db(verbosity=0, autoclobber=False, keepdb=False)\n            # \"Database exists\" shouldn't appear when keepdb is on\n            creation._create_test_db(verbosity=0, autoclobber=False, keepdb=True)\n\n    @mock.patch('sys.stdout', new_callable=StringIO)\n    @mock.patch('sys.stderr', new_callable=StringIO)\n    def test_create_test_db_unexpected_error(self, *mocked_objects):\n        # Simulate test database creation raising unexpected error\n        creation = DatabaseCreation(connection)\n        with self.patch_test_db_creation(self._execute_raise_access_denied):\n            with self.assertRaises(SystemExit):\n                creation._create_test_db(verbosity=0, autoclobber=False, keepdb=False)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_creation.py", "id": "114e46d2a2f423583843ca2d3c9cb82f", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/backends/mysql/test_creation.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}