{"author": "scikit-learn", "code": "\n\n\n\nimport sys\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.datasets import load_files\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\n\n\nlanguages_data_folder = sys.argv[1]\ndataset = load_files(languages_data_folder)\n\n\ndocs_train, docs_test, y_train, y_test = train_test_split(\n    dataset.data, dataset.target, test_size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(metrics.classification_report(y_test, y_predicted,\n                                    target_names=dataset.target_names))\n\n\ncm = metrics.confusion_matrix(y_test, y_predicted)\nprint(cm)\n\n\n#plt.matshow(cm, cmap=plt.cm.jet)\n()\n\n\nsentences = [\n    u'This is a language detection test.',\n    u'Ceci est un test de d\\xe9tection de la langue.',\n    u'Dies ist ein Test, um die Sprache zu erkennen.',\n]\npredicted = clf.predict(sentences)\n\nfor s, p in zip(sentences, predicted):\n    print(u'The language of \"%s\" is \"%s\"' % (s, dataset.target_names[p]))\n", "comments": "   build language detector model  the goal exercise train linear classifier text features represent sequences 3 consecutive characters recognize natural languages using frequencies short character sequences  fingerprints           author  olivier grisel  olivier grisel ensta org     license  simplified bsd    the training data folder must passed first argument    split dataset training test set     task  build vectorizer splits strings sequence 1 3    characters instead word tokens    task  build vectorizer   classifier pipeline using previous analyzer    pipeline instance stored variable named clf    task  fit pipeline training set    task  predict outcome testing set variable named predicted    print classification report    plot confusion matrix   import matplotlib pyplot plt   plt matshow(cm  cmap plt cm jet)   plt show()    predict result short new sentences  ", "content": "\"\"\"Build a language detector model\n\nThe goal of this exercise is to train a linear classifier on text features\nthat represent sequences of up to 3 consecutive characters so as to be\nrecognize natural languages by using the frequencies of short character\nsequences as 'fingerprints'.\n\n\"\"\"\n# Author: Olivier Grisel <olivier.grisel@ensta.org>\n# License: Simplified BSD\n\nimport sys\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.datasets import load_files\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\n\n# The training data folder must be passed as first argument\nlanguages_data_folder = sys.argv[1]\ndataset = load_files(languages_data_folder)\n\n# Split the dataset in training and test set:\ndocs_train, docs_test, y_train, y_test = train_test_split(\n    dataset.data, dataset.target, test_size=0.5)\n\n\n# TASK: Build a vectorizer that splits strings into sequence of 1 to 3\n# characters instead of word tokens\n\n# TASK: Build a vectorizer / classifier pipeline using the previous analyzer\n# the pipeline instance should stored in a variable named clf\n\n# TASK: Fit the pipeline on the training set\n\n# TASK: Predict the outcome on the testing set in a variable named y_predicted\n\n# Print the classification report\nprint(metrics.classification_report(y_test, y_predicted,\n                                    target_names=dataset.target_names))\n\n# Plot the confusion matrix\ncm = metrics.confusion_matrix(y_test, y_predicted)\nprint(cm)\n\n#import matplotlib.pyplot as plt\n#plt.matshow(cm, cmap=plt.cm.jet)\n#plt.show()\n\n# Predict the result on some short new sentences:\nsentences = [\n    u'This is a language detection test.',\n    u'Ceci est un test de d\\xe9tection de la langue.',\n    u'Dies ist ein Test, um die Sprache zu erkennen.',\n]\npredicted = clf.predict(sentences)\n\nfor s, p in zip(sentences, predicted):\n    print(u'The language of \"%s\" is \"%s\"' % (s, dataset.target_names[p]))\n", "description": "scikit-learn: machine learning in Python", "file_name": "exercise_01_language_train_model.py", "id": "d16cecc37a0e856f2edaa220374459fc", "language": "Python", "project_name": "scikit-learn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/scikit-learn-scikit-learn/scikit-learn-scikit-learn-94ed5a8/doc/tutorial/text_analytics/skeletons/exercise_01_language_train_model.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:58:59Z", "url": "https://github.com/scikit-learn/scikit-learn", "wiki": true}