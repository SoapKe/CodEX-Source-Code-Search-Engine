{"author": "aws", "code": "\n\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You\n may not use this file except in compliance with the License. A copy of\n the License is located at\n\n     http://aws.amazon.com/apache2.0/\n\n or in the \"license\" file accompanying this file. This file is\n distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implied. See the License for the specific\n language governing permissions and limitations under the License.\nfrom awscli.testutils import BaseAWSCommandParamsTest, FileCreator\nimport os\n\n\nclass TestOutFileQueryArguments(BaseAWSCommandParamsTest):\n    def setUp(self):\n        self.files = FileCreator()\n        super(TestOutFileQueryArguments, self).setUp()\n\n    def tearDown(self):\n        self.files.remove_all()\n        super(TestOutFileQueryArguments, self).tearDown()\n\n    def test_saves_cert_to_file_for_create_certificate_from_csr(self):\n        self.parsed_response = {\n            'certificatePem': 'cert...',\n            'ResponseMetadata': {\n                'HTTPStatusCode': 200,\n                'RequestId': 'request-id'\n            }\n        }\n        outfile = self.files.full_path('cert.pem')\n        cmdline = 'iot create-certificate-from-csr'\n        cmdline += ' --certificate-signing-request \"abc\"'\n        cmdline += ' --certificate-pem-outfile ' + outfile\n        self.run_cmd(cmdline, 0)\n        self.assertTrue(os.path.exists(outfile))\n        with open(outfile) as fp:\n            self.assertEquals('cert...', fp.read())\n\n    def test_saves_files_for_create_keys_and_cert(self):\n        self.parsed_response = {\n            'certificatePem': 'cert...',\n            'keyPair': {\n                'PublicKey': 'public',\n                'PrivateKey': 'private'\n            },\n            'ResponseMetadata': {\n                'HTTPStatusCode': 200,\n                'RequestId': 'request-id'\n            }\n        }\n        out_cert = self.files.full_path('cert.pem')\n        out_pub = self.files.full_path('key_rsa.pub')\n        out_priv = self.files.full_path('key_rsa')\n        cmdline = 'iot create-keys-and-certificate'\n        cmdline += ' --certificate-pem-outfile ' + out_cert\n        cmdline += ' --public-key-outfile ' + out_pub\n        cmdline += ' --private-key-outfile ' + out_priv\n        self.run_cmd(cmdline, 0)\n        self.assertTrue(os.path.exists(out_cert))\n        self.assertTrue(os.path.exists(out_pub))\n        self.assertTrue(os.path.exists(out_priv))\n        with open(out_cert) as fp:\n            self.assertEquals('cert...', fp.read())\n        with open(out_pub) as fp:\n            self.assertEquals('public', fp.read())\n        with open(out_priv) as fp:\n            self.assertEquals('private', fp.read())\n\n    def test_bad_response(self):\n        outfile = self.files.full_path('cert.pem')\n        self.parsed_response = {\n            'Error': {'Code': 'v1', 'Message': 'v2', 'Type': 'v3'},\n            'ResponseMetadata': {\n                'HTTPStatusCode': 403,\n                'RequestId': 'request-id'\n            }\n        }\n        self.http_response.status_code = 403\n        cmdline = 'iot create-certificate-from-csr'\n        cmdline += ' --certificate-signing-request \"abc\"'\n        cmdline += ' --certificate-pem-outfile ' + outfile\n         The error message should be in the stderr.\n        self.assert_params_for_cmd(\n            cmdline,\n            stderr_contains=self.parsed_response['Error']['Message'],\n            expected_rc=255)\n\n    def test_ensures_file_is_writable_before_sending(self):\n        outfile = os.sep.join(['', 'does', 'not', 'exist_', 'file.txt'])\n        self.parsed_response = {}\n        cmdline = 'iot create-certificate-from-csr'\n        cmdline += ' --certificate-signing-request \"abc\"'\n        cmdline += ' --certificate-pem-outfile ' + outfile\n        self.assert_params_for_cmd(\n            cmdline,\n            stderr_contains='Unable to write to file: ',\n            expected_rc=255)\n", "comments": "   usr bin env python    copyright 2015 amazon com  inc  affiliates  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   aws amazon com apache2 0         license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license     the error message stderr  ", "content": "#!/usr/bin/env python\n# Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://aws.amazon.com/apache2.0/\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\nfrom awscli.testutils import BaseAWSCommandParamsTest, FileCreator\nimport os\n\n\nclass TestOutFileQueryArguments(BaseAWSCommandParamsTest):\n    def setUp(self):\n        self.files = FileCreator()\n        super(TestOutFileQueryArguments, self).setUp()\n\n    def tearDown(self):\n        self.files.remove_all()\n        super(TestOutFileQueryArguments, self).tearDown()\n\n    def test_saves_cert_to_file_for_create_certificate_from_csr(self):\n        self.parsed_response = {\n            'certificatePem': 'cert...',\n            'ResponseMetadata': {\n                'HTTPStatusCode': 200,\n                'RequestId': 'request-id'\n            }\n        }\n        outfile = self.files.full_path('cert.pem')\n        cmdline = 'iot create-certificate-from-csr'\n        cmdline += ' --certificate-signing-request \"abc\"'\n        cmdline += ' --certificate-pem-outfile ' + outfile\n        self.run_cmd(cmdline, 0)\n        self.assertTrue(os.path.exists(outfile))\n        with open(outfile) as fp:\n            self.assertEquals('cert...', fp.read())\n\n    def test_saves_files_for_create_keys_and_cert(self):\n        self.parsed_response = {\n            'certificatePem': 'cert...',\n            'keyPair': {\n                'PublicKey': 'public',\n                'PrivateKey': 'private'\n            },\n            'ResponseMetadata': {\n                'HTTPStatusCode': 200,\n                'RequestId': 'request-id'\n            }\n        }\n        out_cert = self.files.full_path('cert.pem')\n        out_pub = self.files.full_path('key_rsa.pub')\n        out_priv = self.files.full_path('key_rsa')\n        cmdline = 'iot create-keys-and-certificate'\n        cmdline += ' --certificate-pem-outfile ' + out_cert\n        cmdline += ' --public-key-outfile ' + out_pub\n        cmdline += ' --private-key-outfile ' + out_priv\n        self.run_cmd(cmdline, 0)\n        self.assertTrue(os.path.exists(out_cert))\n        self.assertTrue(os.path.exists(out_pub))\n        self.assertTrue(os.path.exists(out_priv))\n        with open(out_cert) as fp:\n            self.assertEquals('cert...', fp.read())\n        with open(out_pub) as fp:\n            self.assertEquals('public', fp.read())\n        with open(out_priv) as fp:\n            self.assertEquals('private', fp.read())\n\n    def test_bad_response(self):\n        outfile = self.files.full_path('cert.pem')\n        self.parsed_response = {\n            'Error': {'Code': 'v1', 'Message': 'v2', 'Type': 'v3'},\n            'ResponseMetadata': {\n                'HTTPStatusCode': 403,\n                'RequestId': 'request-id'\n            }\n        }\n        self.http_response.status_code = 403\n        cmdline = 'iot create-certificate-from-csr'\n        cmdline += ' --certificate-signing-request \"abc\"'\n        cmdline += ' --certificate-pem-outfile ' + outfile\n        # The error message should be in the stderr.\n        self.assert_params_for_cmd(\n            cmdline,\n            stderr_contains=self.parsed_response['Error']['Message'],\n            expected_rc=255)\n\n    def test_ensures_file_is_writable_before_sending(self):\n        outfile = os.sep.join(['', 'does', 'not', 'exist_', 'file.txt'])\n        self.parsed_response = {}\n        cmdline = 'iot create-certificate-from-csr'\n        cmdline += ' --certificate-signing-request \"abc\"'\n        cmdline += ' --certificate-pem-outfile ' + outfile\n        self.assert_params_for_cmd(\n            cmdline,\n            stderr_contains='Unable to write to file: ',\n            expected_rc=255)\n", "description": "Universal Command Line Interface for Amazon Web Services", "file_name": "test_outfile.py", "id": "ddd264e192471bc14c20570abc080bef", "language": "Python", "project_name": "aws-cli", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/aws-aws-cli/aws-aws-cli-d705c60/tests/functional/iot/test_outfile.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:33:26Z", "url": "https://github.com/aws/aws-cli", "wiki": false}