{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2014, Anders Ingemann <aim@secoya.dk>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: sensu_subscription\nshort_description: Manage Sensu subscriptions\nversion_added: 2.2\ndescription:\n  - Manage which I(sensu channels) a machine should subscribe to\noptions:\n  name:\n    description:\n      - The name of the channel\n    required: true\n  state:\n    description:\n      - Whether the machine should subscribe or unsubscribe from the channel\n    choices: [ 'present', 'absent' ]\n    required: false\n    default: present\n  path:\n    description:\n      - Path to the subscriptions json file\n    required: false\n    default: /etc/sensu/conf.d/subscriptions.json\n  backup:\n    description:\n      - Create a backup file (if yes), including the timestamp information so you\n      - can get the original file back if you somehow clobbered it incorrectly.\n    choices: [ 'yes', 'no' ]\n    required: false\n    default: no\nrequirements: [ ]\nauthor: Anders Ingemann\n'''\n\nRETURN = '''\nreasons:\n    description: the reasons why the moule changed or did not change something\n    returned: success\n    type: list\n    sample: [\"channel subscription was absent and state is `present'\"]\n'''\n\nEXAMPLES = '''\n\n- name: subscribe to nginx checks\n  sensu_subscription: name=nginx\n\n\n- name: unsubscribe from common checks\n  sensu_subscription: name=common state=absent\n'''\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\n\n\ndef sensu_subscription(module, path, name, state='present', backup=False):\n    changed = False\n    reasons = []\n\n    try:\n        import json\n    except ImportError:\n        import simplejson as json\n\n    try:\n        config = json.load(open(path))\n    except IOError as e:\n        if e.errno is 2:  \n            if state == 'absent':\n                reasons.append('file did not exist and state is `absent\\'')\n                return changed, reasons\n            config = {}\n        else:\n            module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n    except ValueError:\n        msg = '{path} contains invalid JSON'.format(path=path)\n        module.fail_json(msg=msg)\n\n    if 'client' not in config:\n        if state == 'absent':\n            reasons.append('`client\\' did not exist and state is `absent\\'')\n            return changed, reasons\n        config['client'] = {}\n        changed = True\n        reasons.append('`client\\' did not exist')\n\n    if 'subscriptions' not in config['client']:\n        if state == 'absent':\n            reasons.append('`client.subscriptions\\' did not exist and state is `absent\\'')\n            return changed, reasons\n        config['client']['subscriptions'] = []\n        changed = True\n        reasons.append('`client.subscriptions\\' did not exist')\n\n    if name not in config['client']['subscriptions']:\n        if state == 'absent':\n            reasons.append('channel subscription was absent')\n            return changed, reasons\n        config['client']['subscriptions'].append(name)\n        changed = True\n        reasons.append('channel subscription was absent and state is `present\\'')\n    else:\n        if state == 'absent':\n            config['client']['subscriptions'].remove(name)\n            changed = True\n            reasons.append('channel subscription was present and state is `absent\\'')\n\n    if changed and not module.check_mode:\n        if backup:\n            module.backup_local(path)\n        try:\n            open(path, 'w').write(json.dumps(config, indent=2) + '\\n')\n        except IOError as e:\n            module.fail_json(msg='Failed to write to file %s: %s' % (path, to_native(e)),\n                             exception=traceback.format_exc())\n\n    return changed, reasons\n\n\ndef main():\n    arg_spec = {'name': {'type': 'str', 'required': True},\n                'path': {'type': 'str', 'default': '/etc/sensu/conf.d/subscriptions.json'},\n                'state': {'type': 'str', 'default': 'present', 'choices': ['present', 'absent']},\n                'backup': {'type': 'bool', 'default': 'no'},\n                }\n\n    module = AnsibleModule(argument_spec=arg_spec,\n                           supports_check_mode=True)\n\n    path = module.params['path']\n    name = module.params['name']\n    state = module.params['state']\n    backup = module.params['backup']\n\n    changed, reasons = sensu_subscription(module, path, name, state, backup)\n\n    module.exit_json(path=path, name=name, changed=changed, msg='OK', reasons=reasons)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  sensu subscription short description  manage sensu subscriptions version added  2 2 description      manage i(sensu channels) machine subscribe options    name      description          the name channel     required  true   state      description          whether machine subscribe unsubscribe channel     choices     present    absent        required  false     default  present   path      description          path subscriptions json file     required  false     default   etc sensu conf subscriptions json   backup      description          create backup file (if yes)  including timestamp information         get original file back somehow clobbered incorrectly      choices     yes           required  false     default  requirements      author  anders ingemann      return       reasons      description  reasons moule changed change something     returned  success     type  list     sample    channel subscription absent state  present         examples         subscribe nginx channel   name  subscribe nginx checks   sensu subscription  name nginx    unsubscribe common checks channel   name  unsubscribe common checks   sensu subscription  name common state absent         usr bin python        coding  utf 8        (c) 2014  anders ingemann  aim secoya dk     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    subscribe nginx channel    unsubscribe common checks channel    file found  non fatal ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2014, Anders Ingemann <aim@secoya.dk>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: sensu_subscription\nshort_description: Manage Sensu subscriptions\nversion_added: 2.2\ndescription:\n  - Manage which I(sensu channels) a machine should subscribe to\noptions:\n  name:\n    description:\n      - The name of the channel\n    required: true\n  state:\n    description:\n      - Whether the machine should subscribe or unsubscribe from the channel\n    choices: [ 'present', 'absent' ]\n    required: false\n    default: present\n  path:\n    description:\n      - Path to the subscriptions json file\n    required: false\n    default: /etc/sensu/conf.d/subscriptions.json\n  backup:\n    description:\n      - Create a backup file (if yes), including the timestamp information so you\n      - can get the original file back if you somehow clobbered it incorrectly.\n    choices: [ 'yes', 'no' ]\n    required: false\n    default: no\nrequirements: [ ]\nauthor: Anders Ingemann\n'''\n\nRETURN = '''\nreasons:\n    description: the reasons why the moule changed or did not change something\n    returned: success\n    type: list\n    sample: [\"channel subscription was absent and state is `present'\"]\n'''\n\nEXAMPLES = '''\n# Subscribe to the nginx channel\n- name: subscribe to nginx checks\n  sensu_subscription: name=nginx\n\n# Unsubscribe from the common checks channel\n- name: unsubscribe from common checks\n  sensu_subscription: name=common state=absent\n'''\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\n\n\ndef sensu_subscription(module, path, name, state='present', backup=False):\n    changed = False\n    reasons = []\n\n    try:\n        import json\n    except ImportError:\n        import simplejson as json\n\n    try:\n        config = json.load(open(path))\n    except IOError as e:\n        if e.errno is 2:  # File not found, non-fatal\n            if state == 'absent':\n                reasons.append('file did not exist and state is `absent\\'')\n                return changed, reasons\n            config = {}\n        else:\n            module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n    except ValueError:\n        msg = '{path} contains invalid JSON'.format(path=path)\n        module.fail_json(msg=msg)\n\n    if 'client' not in config:\n        if state == 'absent':\n            reasons.append('`client\\' did not exist and state is `absent\\'')\n            return changed, reasons\n        config['client'] = {}\n        changed = True\n        reasons.append('`client\\' did not exist')\n\n    if 'subscriptions' not in config['client']:\n        if state == 'absent':\n            reasons.append('`client.subscriptions\\' did not exist and state is `absent\\'')\n            return changed, reasons\n        config['client']['subscriptions'] = []\n        changed = True\n        reasons.append('`client.subscriptions\\' did not exist')\n\n    if name not in config['client']['subscriptions']:\n        if state == 'absent':\n            reasons.append('channel subscription was absent')\n            return changed, reasons\n        config['client']['subscriptions'].append(name)\n        changed = True\n        reasons.append('channel subscription was absent and state is `present\\'')\n    else:\n        if state == 'absent':\n            config['client']['subscriptions'].remove(name)\n            changed = True\n            reasons.append('channel subscription was present and state is `absent\\'')\n\n    if changed and not module.check_mode:\n        if backup:\n            module.backup_local(path)\n        try:\n            open(path, 'w').write(json.dumps(config, indent=2) + '\\n')\n        except IOError as e:\n            module.fail_json(msg='Failed to write to file %s: %s' % (path, to_native(e)),\n                             exception=traceback.format_exc())\n\n    return changed, reasons\n\n\ndef main():\n    arg_spec = {'name': {'type': 'str', 'required': True},\n                'path': {'type': 'str', 'default': '/etc/sensu/conf.d/subscriptions.json'},\n                'state': {'type': 'str', 'default': 'present', 'choices': ['present', 'absent']},\n                'backup': {'type': 'bool', 'default': 'no'},\n                }\n\n    module = AnsibleModule(argument_spec=arg_spec,\n                           supports_check_mode=True)\n\n    path = module.params['path']\n    name = module.params['name']\n    state = module.params['state']\n    backup = module.params['backup']\n\n    changed, reasons = sensu_subscription(module, path, name, state, backup)\n\n    module.exit_json(path=path, name=name, changed=changed, msg='OK', reasons=reasons)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "sensu_subscription.py", "id": "9ecbb9b914e6b1f2edefb06faa1b7c91", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/monitoring/sensu_subscription.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}