{"author": "ansible", "code": "\n*-\n\n# (c) 2013, David Stygstra <david.stygstra@gmail.com>\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'network'}\n\n\nDOCUMENTATION = '''\n---\nmodule: openvswitch_bridge\nversion_added: 1.4\nauthor: \"David Stygstra (@stygstra)\"\nshort_description: Manage Open vSwitch bridges\nrequirements: [ ovs-vsctl ]\ndescription:\n    - Manage Open vSwitch bridges\noptions:\n    bridge:\n        required: true\n        description:\n            - Name of bridge or fake bridge to manage\n    parent:\n        version_added: \"2.3\"\n        description:\n            - Bridge parent of the fake bridge to manage\n    vlan:\n        version_added: \"2.3\"\n        description:\n            - The VLAN id of the fake bridge to manage (must be between 0 and\n              4095). This parameter is required if I(parent) parameter is set.\n    state:\n        default: \"present\"\n        choices: [ present, absent ]\n        description:\n            - Whether the bridge should exist\n    timeout:\n        default: 5\n        description:\n            - How long to wait for ovs-vswitchd to respond\n    external_ids:\n        version_added: 2.0\n        description:\n            - A dictionary of external-ids. Omitting this parameter is a No-op.\n              To  clear all external-ids pass an empty value.\n    fail_mode:\n        version_added: 2.0\n        choices : [secure, standalone]\n        description:\n            - Set bridge fail-mode. The default value (None) is a No-op.\n    set:\n        version_added: 2.3\n        description:\n            - Run set command after bridge configuration. This parameter is\n              non-idempotent, play will always return I(changed) state if\n              present\n'''\n\nEXAMPLES = '''\n\n- openvswitch_bridge:\n    bridge: br-int\n    state: present\n\n\n- openvswitch_bridge:\n    bridge: br-int\n    parent: br-parent\n    vlan: 405\n    state: present\n\n\n- openvswitch_bridge:\n    bridge: br-int\n    state: present\n    fail_mode: secure\n  args:\n    external_ids:\n      bridge-id: br-int\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six import iteritems\n\n\ndef _fail_mode_to_str(text):\n    if not text:\n        return None\n    else:\n        return text.strip()\n\n\ndef _external_ids_to_dict(text):\n    if not text:\n        return None\n    else:\n        d = {}\n\n        for l in text.splitlines():\n            if l:\n                k, v = l.split('=')\n                d[k] = v\n\n        return d\n\n\ndef map_obj_to_commands(want, have, module):\n    commands = list()\n\n    if module.params['state'] == 'absent':\n        if have:\n            templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s del-br\"\n                                   \" %(bridge)s\")\n            command = templatized_command % module.params\n            commands.append(command)\n    else:\n        if have:\n            if want['fail_mode'] != have['fail_mode']:\n                templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s\"\n                                       \" set-fail-mode %(bridge)s\"\n                                       \" %(fail_mode)s\")\n                command = templatized_command % module.params\n                commands.append(command)\n\n            if want['external_ids'] != have['external_ids']:\n                templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s\"\n                                       \" br-set-external-id %(bridge)s\")\n                command = templatized_command % module.params\n                if want['external_ids']:\n                    for k, v in iteritems(want['external_ids']):\n                        if (k not in have['external_ids']\n                                or want['external_ids'][k] != have['external_ids'][k]):\n                            command += \" \" + k + \" \" + v\n                            commands.append(command)\n        else:\n            templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s add-br\"\n                                   \" %(bridge)s\")\n            command = templatized_command % module.params\n\n            if want['parent']:\n                templatized_command = \"%(parent)s %(vlan)s\"\n                command += \" \" + templatized_command % module.params\n\n            if want['set']:\n                templatized_command = \" -- set %(set)s\"\n                command += templatized_command % module.params\n\n            commands.append(command)\n\n            if want['fail_mode']:\n                templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s\"\n                                       \" set-fail-mode %(bridge)s\"\n                                       \" %(fail_mode)s\")\n                command = templatized_command % module.params\n                commands.append(command)\n\n            if want['external_ids']:\n                for k, v in iteritems(want['external_ids']):\n                    templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s\"\n                                           \" br-set-external-id %(bridge)s\")\n                    command = templatized_command % module.params\n                    command += \" \" + k + \" \" + v\n                    commands.append(command)\n    return commands\n\n\ndef map_config_to_obj(module):\n    templatized_command = \"%(ovs-vsctl)s -t %(timeout)s list-br\"\n    command = templatized_command % module.params\n    rc, out, err = module.run_command(command, check_rc=True)\n    if rc != 0:\n        module.fail_json(msg=err)\n\n    obj = {}\n\n    if module.params['bridge'] in out.splitlines():\n        obj['bridge'] = module.params['bridge']\n\n        templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s br-to-parent\"\n                               \" %(bridge)s\")\n        command = templatized_command % module.params\n        rc, out, err = module.run_command(command, check_rc=True)\n        obj['parent'] = out.strip()\n\n        templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s br-to-vlan\"\n                               \" %(bridge)s\")\n        command = templatized_command % module.params\n        rc, out, err = module.run_command(command, check_rc=True)\n        obj['vlan'] = out.strip()\n\n        templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s get-fail-mode\"\n                               \" %(bridge)s\")\n        command = templatized_command % module.params\n        rc, out, err = module.run_command(command, check_rc=True)\n        obj['fail_mode'] = _fail_mode_to_str(out)\n\n        templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s br-get-external-id\"\n                               \" %(bridge)s\")\n        command = templatized_command % module.params\n        rc, out, err = module.run_command(command, check_rc=True)\n        obj['external_ids'] = _external_ids_to_dict(out)\n\n    return obj\n\n\ndef map_params_to_obj(module):\n    obj = {\n        'bridge': module.params['bridge'],\n        'parent': module.params['parent'],\n        'vlan': module.params['vlan'],\n        'fail_mode': module.params['fail_mode'],\n        'external_ids': module.params['external_ids'],\n        'set': module.params['set']\n    }\n\n    return obj\n\n\ndef main():\n    \n    argument_spec = {\n        'bridge': {'required': True},\n        'parent': {'default': None},\n        'vlan': {'default': None, 'type': 'int'},\n        'state': {'default': 'present', 'choices': ['present', 'absent']},\n        'timeout': {'default': 5, 'type': 'int'},\n        'external_ids': {'default': None, 'type': 'dict'},\n        'fail_mode': {'default': None},\n        'set': {'required': False, 'default': None}\n    }\n\n    required_if = [('parent', not None, ('vlan',))]\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           required_if=required_if,\n                           supports_check_mode=True)\n\n    result = {'changed': False}\n\n    \n    module.params[\"ovs-vsctl\"] = module.get_bin_path(\"ovs-vsctl\", True)\n\n    want = map_params_to_obj(module)\n    have = map_config_to_obj(module)\n\n    commands = map_obj_to_commands(want, have, module)\n    result['commands'] = commands\n\n    if commands:\n        if not module.check_mode:\n            for c in commands:\n                module.run_command(c, check_rc=True)\n        result['changed'] = True\n\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "    entry point               module  openvswitch bridge version added  1 4 author   david stygstra ( stygstra)  short description  manage open vswitch bridges requirements    ovs vsctl   description        manage open vswitch bridges options      bridge          required  true         description                name bridge fake bridge manage     parent          version added   2 3          description                bridge parent fake bridge manage     vlan          version added   2 3          description                the vlan id fake bridge manage (must 0               4095)  this parameter required i(parent) parameter set      state          default   present          choices    present  absent           description                whether bridge exist     timeout          default  5         description                how long wait ovs vswitchd respond     external ids          version added  2 0         description                a dictionary external ids  omitting parameter no op                to  clear external ids pass empty value      fail mode          version added  2 0         choices    secure  standalone          description                set bridge fail mode  the default value (none) no op      set          version added  2 3         description                run set command bridge configuration  this parameter               non idempotent  play always return i(changed) state               present      examples         create bridge named br int   openvswitch bridge      bridge  br int     state  present    create fake bridge named br int within br parent vlan 405   openvswitch bridge      bridge  br int     parent  br parent     vlan  405     state  present    create integration bridge   openvswitch bridge      bridge  br int     state  present     fail mode  secure   args      external ids        bridge id  br int         usr bin python    coding  utf 8        (c) 2013  david stygstra  david stygstra gmail com     portions copyright   2015 vmware  inc     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    create bridge named br int    create fake bridge named br int within br parent vlan 405    create integration bridge    we add ovs vsctl module params later build templatized commands ", "content": "#!/usr/bin/python\n# coding: utf-8 -*-\n\n# (c) 2013, David Stygstra <david.stygstra@gmail.com>\n# Portions copyright @ 2015 VMware, Inc.\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'network'}\n\n\nDOCUMENTATION = '''\n---\nmodule: openvswitch_bridge\nversion_added: 1.4\nauthor: \"David Stygstra (@stygstra)\"\nshort_description: Manage Open vSwitch bridges\nrequirements: [ ovs-vsctl ]\ndescription:\n    - Manage Open vSwitch bridges\noptions:\n    bridge:\n        required: true\n        description:\n            - Name of bridge or fake bridge to manage\n    parent:\n        version_added: \"2.3\"\n        description:\n            - Bridge parent of the fake bridge to manage\n    vlan:\n        version_added: \"2.3\"\n        description:\n            - The VLAN id of the fake bridge to manage (must be between 0 and\n              4095). This parameter is required if I(parent) parameter is set.\n    state:\n        default: \"present\"\n        choices: [ present, absent ]\n        description:\n            - Whether the bridge should exist\n    timeout:\n        default: 5\n        description:\n            - How long to wait for ovs-vswitchd to respond\n    external_ids:\n        version_added: 2.0\n        description:\n            - A dictionary of external-ids. Omitting this parameter is a No-op.\n              To  clear all external-ids pass an empty value.\n    fail_mode:\n        version_added: 2.0\n        choices : [secure, standalone]\n        description:\n            - Set bridge fail-mode. The default value (None) is a No-op.\n    set:\n        version_added: 2.3\n        description:\n            - Run set command after bridge configuration. This parameter is\n              non-idempotent, play will always return I(changed) state if\n              present\n'''\n\nEXAMPLES = '''\n# Create a bridge named br-int\n- openvswitch_bridge:\n    bridge: br-int\n    state: present\n\n# Create a fake bridge named br-int within br-parent on the VLAN 405\n- openvswitch_bridge:\n    bridge: br-int\n    parent: br-parent\n    vlan: 405\n    state: present\n\n# Create an integration bridge\n- openvswitch_bridge:\n    bridge: br-int\n    state: present\n    fail_mode: secure\n  args:\n    external_ids:\n      bridge-id: br-int\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six import iteritems\n\n\ndef _fail_mode_to_str(text):\n    if not text:\n        return None\n    else:\n        return text.strip()\n\n\ndef _external_ids_to_dict(text):\n    if not text:\n        return None\n    else:\n        d = {}\n\n        for l in text.splitlines():\n            if l:\n                k, v = l.split('=')\n                d[k] = v\n\n        return d\n\n\ndef map_obj_to_commands(want, have, module):\n    commands = list()\n\n    if module.params['state'] == 'absent':\n        if have:\n            templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s del-br\"\n                                   \" %(bridge)s\")\n            command = templatized_command % module.params\n            commands.append(command)\n    else:\n        if have:\n            if want['fail_mode'] != have['fail_mode']:\n                templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s\"\n                                       \" set-fail-mode %(bridge)s\"\n                                       \" %(fail_mode)s\")\n                command = templatized_command % module.params\n                commands.append(command)\n\n            if want['external_ids'] != have['external_ids']:\n                templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s\"\n                                       \" br-set-external-id %(bridge)s\")\n                command = templatized_command % module.params\n                if want['external_ids']:\n                    for k, v in iteritems(want['external_ids']):\n                        if (k not in have['external_ids']\n                                or want['external_ids'][k] != have['external_ids'][k]):\n                            command += \" \" + k + \" \" + v\n                            commands.append(command)\n        else:\n            templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s add-br\"\n                                   \" %(bridge)s\")\n            command = templatized_command % module.params\n\n            if want['parent']:\n                templatized_command = \"%(parent)s %(vlan)s\"\n                command += \" \" + templatized_command % module.params\n\n            if want['set']:\n                templatized_command = \" -- set %(set)s\"\n                command += templatized_command % module.params\n\n            commands.append(command)\n\n            if want['fail_mode']:\n                templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s\"\n                                       \" set-fail-mode %(bridge)s\"\n                                       \" %(fail_mode)s\")\n                command = templatized_command % module.params\n                commands.append(command)\n\n            if want['external_ids']:\n                for k, v in iteritems(want['external_ids']):\n                    templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s\"\n                                           \" br-set-external-id %(bridge)s\")\n                    command = templatized_command % module.params\n                    command += \" \" + k + \" \" + v\n                    commands.append(command)\n    return commands\n\n\ndef map_config_to_obj(module):\n    templatized_command = \"%(ovs-vsctl)s -t %(timeout)s list-br\"\n    command = templatized_command % module.params\n    rc, out, err = module.run_command(command, check_rc=True)\n    if rc != 0:\n        module.fail_json(msg=err)\n\n    obj = {}\n\n    if module.params['bridge'] in out.splitlines():\n        obj['bridge'] = module.params['bridge']\n\n        templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s br-to-parent\"\n                               \" %(bridge)s\")\n        command = templatized_command % module.params\n        rc, out, err = module.run_command(command, check_rc=True)\n        obj['parent'] = out.strip()\n\n        templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s br-to-vlan\"\n                               \" %(bridge)s\")\n        command = templatized_command % module.params\n        rc, out, err = module.run_command(command, check_rc=True)\n        obj['vlan'] = out.strip()\n\n        templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s get-fail-mode\"\n                               \" %(bridge)s\")\n        command = templatized_command % module.params\n        rc, out, err = module.run_command(command, check_rc=True)\n        obj['fail_mode'] = _fail_mode_to_str(out)\n\n        templatized_command = (\"%(ovs-vsctl)s -t %(timeout)s br-get-external-id\"\n                               \" %(bridge)s\")\n        command = templatized_command % module.params\n        rc, out, err = module.run_command(command, check_rc=True)\n        obj['external_ids'] = _external_ids_to_dict(out)\n\n    return obj\n\n\ndef map_params_to_obj(module):\n    obj = {\n        'bridge': module.params['bridge'],\n        'parent': module.params['parent'],\n        'vlan': module.params['vlan'],\n        'fail_mode': module.params['fail_mode'],\n        'external_ids': module.params['external_ids'],\n        'set': module.params['set']\n    }\n\n    return obj\n\n\ndef main():\n    \"\"\" Entry point. \"\"\"\n    argument_spec = {\n        'bridge': {'required': True},\n        'parent': {'default': None},\n        'vlan': {'default': None, 'type': 'int'},\n        'state': {'default': 'present', 'choices': ['present', 'absent']},\n        'timeout': {'default': 5, 'type': 'int'},\n        'external_ids': {'default': None, 'type': 'dict'},\n        'fail_mode': {'default': None},\n        'set': {'required': False, 'default': None}\n    }\n\n    required_if = [('parent', not None, ('vlan',))]\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           required_if=required_if,\n                           supports_check_mode=True)\n\n    result = {'changed': False}\n\n    # We add ovs-vsctl to module_params to later build up templatized commands\n    module.params[\"ovs-vsctl\"] = module.get_bin_path(\"ovs-vsctl\", True)\n\n    want = map_params_to_obj(module)\n    have = map_config_to_obj(module)\n\n    commands = map_obj_to_commands(want, have, module)\n    result['commands'] = commands\n\n    if commands:\n        if not module.check_mode:\n            for c in commands:\n                module.run_command(c, check_rc=True)\n        result['changed'] = True\n\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "openvswitch_bridge.py", "id": "178a2029b43d0499113193da26bfb014", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/ovs/openvswitch_bridge.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}