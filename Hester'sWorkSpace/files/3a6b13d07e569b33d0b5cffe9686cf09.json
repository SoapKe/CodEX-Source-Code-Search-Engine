{"author": "ansible", "code": "\n\n Copyright: (c) 2013, Vincent Van der Kussen <vincent at vanderkussen.org>\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: ovirt\nauthor:\n- Vincent Van der Kussen (@vincentvdk)\nshort_description: oVirt/RHEV platform management\ndescription:\n    - This module only supports oVirt/RHEV version 3. A newer module M(ovirt_vms) supports oVirt/RHV version 4.\n    - Allows you to create new instances, either from scratch or an image, in addition to deleting or stopping instances on the oVirt/RHEV platform.\nversion_added: \"1.4\"\noptions:\n  user:\n    description:\n     - The user to authenticate with.\n    required: true\n  url:\n    description:\n     - The url of the oVirt instance.\n    required: true\n  instance_name:\n    description:\n     - The name of the instance to use.\n    required: true\n    aliases: [ vmname ]\n  password:\n    description:\n     - Password of the user to authenticate with.\n    required: true\n  image:\n    description:\n     - The template to use for the instance.\n  resource_type:\n    description:\n     - Whether you want to deploy an image or create an instance from scratch.\n    choices: [ new, template ]\n  zone:\n    description:\n     - Deploy the image to this oVirt cluster.\n  instance_disksize:\n    description:\n     - Size of the instance's disk in GB.\n    aliases: [ vm_disksize]\n  instance_cpus:\n    description:\n     - The instance's number of CPUs.\n    default: 1\n    aliases: [ vmcpus ]\n  instance_nic:\n    description:\n     - The name of the network interface in oVirt/RHEV.\n    aliases: [ vmnic  ]\n  instance_network:\n    description:\n     - The logical network the machine should belong to.\n    default: rhevm\n    aliases: [ vmnetwork ]\n  instance_mem:\n    description:\n     - The instance's amount of memory in MB.\n    aliases: [ vmmem ]\n  instance_type:\n    description:\n     - Define whether the instance is a server, desktop or high_performance.\n     - I(high_performance) is supported since Ansible 2.5 and oVirt/RHV 4.2.\n    choices: [ desktop, server, high_performance ]\n    default: server\n    aliases: [ vmtype ]\n  disk_alloc:\n    description:\n     - Define whether disk is thin or preallocated.\n    choices: [ preallocated, thin ]\n    default: thin\n  disk_int:\n    description:\n     - Interface type of the disk.\n    choices: [ ide, virtio ]\n    default: virtio\n  instance_os:\n    description:\n     - Type of Operating System.\n    aliases: [ vmos ]\n  instance_cores:\n    description:\n     - Define the instance's number of cores.\n    default: 1\n    aliases: [ vmcores ]\n  sdomain:\n    description:\n     - The Storage Domain where you want to create the instance's disk on.\n  region:\n    description:\n     - The oVirt/RHEV datacenter where you want to deploy to.\n  instance_dns:\n    description:\n     - Define the instance's Primary DNS server.\n    aliases: [ dns ]\n    version_added: \"2.1\"\n  instance_domain:\n    description:\n     - Define the instance's Domain.\n    aliases: [ domain ]\n    version_added: \"2.1\"\n  instance_hostname:\n    description:\n     - Define the instance's Hostname.\n    aliases: [ hostname ]\n    version_added: \"2.1\"\n  instance_ip:\n    description:\n     - Define the instance's IP.\n    aliases: [ ip ]\n    version_added: \"2.1\"\n  instance_netmask:\n    description:\n     - Define the instance's Netmask.\n    aliases: [ netmask ]\n    version_added: \"2.1\"\n  instance_rootpw:\n    description:\n     - Define the instance's Root password.\n    aliases: [ rootpw ]\n    version_added: \"2.1\"\n  instance_key:\n    description:\n     - Define the instance's Authorized key.\n    aliases: [ key ]\n    version_added: \"2.1\"\n  state:\n    description:\n     - Create, terminate or remove instances.\n    choices: [ absent, present, restarted, shutdown, started ]\n    default: present\nrequirements:\n  - ovirt-engine-sdk-python\n'''\n\nEXAMPLES = '''\n- name: Basic example to provision from image\n  ovirt:\n    user: admin@internal\n    url: https://ovirt.example.com\n    instance_name: ansiblevm04\n    password: secret\n    image: centos_64\n    zone: cluster01\n    resource_type: template\n\n- name: Full example to create new instance from scratch\n  ovirt:\n    instance_name: testansible\n    resource_type: new\n    instance_type: server\n    user: admin@internal\n    password: secret\n    url: https://ovirt.example.com\n    instance_disksize: 10\n    zone: cluster01\n    region: datacenter1\n    instance_cpus: 1\n    instance_nic: nic1\n    instance_network: rhevm\n    instance_mem: 1000\n    disk_alloc: thin\n    sdomain: FIBER01\n    instance_cores: 1\n    instance_os: rhel_6x64\n    disk_int: virtio\n\n- name: Stopping an existing instance\n  ovirt:\n    instance_name: testansible\n    state: stopped\n    user: admin@internal\n    password: secret\n    url: https://ovirt.example.com\n\n- name: Start an existing instance\n  ovirt:\n    instance_name: testansible\n    state: started\n    user: admin@internal\n    password: secret\n    url: https://ovirt.example.com\n\n- name: Start an instance with cloud init information\n  ovirt:\n    instance_name: testansible\n    state: started\n    user: admin@internal\n    password: secret\n    url: https://ovirt.example.com\n    hostname: testansible\n    domain: ansible.local\n    ip: 192.0.2.100\n    netmask: 255.255.255.0\n    gateway: 192.0.2.1\n    rootpw: bigsecret\n'''\n\nimport time\n\ntry:\n    from ovirtsdk.api import API\n    from ovirtsdk.xml import params\n    HAS_OVIRTSDK = True\nexcept ImportError:\n    HAS_OVIRTSDK = False\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\n\n\n\ndef conn(url, user, password):\n    api = API(url=url, username=user, password=password, insecure=True)\n    try:\n        value = api.test()\n    except:\n        raise Exception(\"error connecting to the oVirt API\")\n    return api\n\n\n\n Create VM from scratch\ndef create_vm(conn, vmtype, vmname, zone, vmdisk_size, vmcpus, vmnic, vmnetwork, vmmem, vmdisk_alloc, sdomain, vmcores, vmos, vmdisk_int):\n    if vmdisk_alloc == 'thin':\n         define VM params\n        vmparams = params.VM(name=vmname, cluster=conn.clusters.get(name=zone), os=params.OperatingSystem(type_=vmos),\n                             template=conn.templates.get(name=\"Blank\"), memory=1024 * 1024 * int(vmmem),\n                             cpu=params.CPU(topology=params.CpuTopology(cores=int(vmcores))), type_=vmtype)\n         define disk params\n        vmdisk = params.Disk(size=1024 * 1024 * 1024 * int(vmdisk_size), wipe_after_delete=True, sparse=True, interface=vmdisk_int, type_=\"System\",\n                             format='cow',\n                             storage_domains=params.StorageDomains(storage_domain=[conn.storagedomains.get(name=sdomain)]))\n         define network parameters\n        network_net = params.Network(name=vmnetwork)\n        nic_net1 = params.NIC(name='nic1', network=network_net, interface='virtio')\n    elif vmdisk_alloc == 'preallocated':\n         define VM params\n        vmparams = params.VM(name=vmname, cluster=conn.clusters.get(name=zone), os=params.OperatingSystem(type_=vmos),\n                             template=conn.templates.get(name=\"Blank\"), memory=1024 * 1024 * int(vmmem),\n                             cpu=params.CPU(topology=params.CpuTopology(cores=int(vmcores))), type_=vmtype)\n         define disk params\n        vmdisk = params.Disk(size=1024 * 1024 * 1024 * int(vmdisk_size), wipe_after_delete=True, sparse=False, interface=vmdisk_int, type_=\"System\",\n                             format='raw', storage_domains=params.StorageDomains(storage_domain=[conn.storagedomains.get(name=sdomain)]))\n         define network parameters\n        network_net = params.Network(name=vmnetwork)\n        nic_net1 = params.NIC(name=vmnic, network=network_net, interface='virtio')\n\n    try:\n        conn.vms.add(vmparams)\n    except:\n        raise Exception(\"Error creating VM with specified parameters\")\n    vm = conn.vms.get(name=vmname)\n    try:\n        vm.disks.add(vmdisk)\n    except:\n        raise Exception(\"Error attaching disk\")\n    try:\n        vm.nics.add(nic_net1)\n    except:\n        raise Exception(\"Error adding nic\")\n\n\n create an instance from a template\ndef create_vm_template(conn, vmname, image, zone):\n    vmparams = params.VM(name=vmname, cluster=conn.clusters.get(name=zone), template=conn.templates.get(name=image), disks=params.Disks(clone=True))\n    try:\n        conn.vms.add(vmparams)\n    except:\n        raise Exception('error adding template %s' % image)\n\n\n start instance\ndef vm_start(conn, vmname, hostname=None, ip=None, netmask=None, gateway=None,\n             domain=None, dns=None, rootpw=None, key=None):\n    vm = conn.vms.get(name=vmname)\n    use_cloud_init = False\n    nics = None\n    nic = None\n    if hostname or ip or netmask or gateway or domain or dns or rootpw or key:\n        use_cloud_init = True\n    if ip and netmask and gateway:\n        ipinfo = params.IP(address=ip, netmask=netmask, gateway=gateway)\n        nic = params.GuestNicConfiguration(name='eth0', boot_protocol='STATIC', ip=ipinfo, on_boot=True)\n        nics = params.Nics()\n    nics = params.GuestNicsConfiguration(nic_configuration=[nic])\n    initialization = params.Initialization(regenerate_ssh_keys=True, host_name=hostname, domain=domain, user_name='root',\n                                           root_password=rootpw, nic_configurations=nics, dns_servers=dns,\n                                           authorized_ssh_keys=key)\n    action = params.Action(use_cloud_init=use_cloud_init, vm=params.VM(initialization=initialization))\n    vm.start(action=action)\n\n\n Stop instance\ndef vm_stop(conn, vmname):\n    vm = conn.vms.get(name=vmname)\n    vm.stop()\n\n\n restart instance\ndef vm_restart(conn, vmname):\n    state = vm_status(conn, vmname)\n    vm = conn.vms.get(name=vmname)\n    vm.stop()\n    while conn.vms.get(vmname).get_status().get_state() != 'down':\n        time.sleep(5)\n    vm.start()\n\n\n remove an instance\ndef vm_remove(conn, vmname):\n    vm = conn.vms.get(name=vmname)\n    vm.delete()\n\n\n\n VM statuses\n\n Get the VMs status\ndef vm_status(conn, vmname):\n    status = conn.vms.get(name=vmname).status.state\n    return status\n\n\n Get VM object and return it's name if object exists\ndef get_vm(conn, vmname):\n    vm = conn.vms.get(name=vmname)\n    if vm is None:\n        name = \"empty\"\n    else:\n        name = vm.get_name()\n    return name\n\n\n Hypervisor operations\n\n not available yet\n\n Main\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            state=dict(type='str', default='present', choices=['absent', 'present', 'restart', 'shutdown', 'started']),\n            user=dict(type='str', required=True),\n            url=dict(type='str', required=True),\n            instance_name=dict(type='str', required=True, aliases=['vmname']),\n            password=dict(type='str', required=True, no_log=True),\n            image=dict(type='str'),\n            resource_type=dict(type='str', choices=['new', 'template']),\n            zone=dict(type='str'),\n            instance_disksize=dict(type='str', aliases=['vm_disksize']),\n            instance_cpus=dict(type='str', default=1, aliases=['vmcpus']),\n            instance_nic=dict(type='str', aliases=['vmnic']),\n            instance_network=dict(type='str', default='rhevm', aliases=['vmnetwork']),\n            instance_mem=dict(type='str', aliases=['vmmem']),\n            instance_type=dict(type='str', default='server', aliases=['vmtype'], choices=['desktop', 'server', 'high_performance']),\n            disk_alloc=dict(type='str', default='thin', choices=['preallocated', 'thin']),\n            disk_int=dict(type='str', default='virtio', choices=['ide', 'virtio']),\n            instance_os=dict(type='str', aliases=['vmos']),\n            instance_cores=dict(type='str', default=1, aliases=['vmcores']),\n            instance_hostname=dict(type='str', aliases=['hostname']),\n            instance_ip=dict(type='str', aliases=['ip']),\n            instance_netmask=dict(type='str', aliases=['netmask']),\n            instance_gateway=dict(type='str', aliases=['gateway']),\n            instance_domain=dict(type='str', aliases=['domain']),\n            instance_dns=dict(type='str', aliases=['dns']),\n            instance_rootpw=dict(type='str', aliases=['rootpw']),\n            instance_key=dict(type='str', aliases=['key']),\n            sdomain=dict(type='str'),\n            region=dict(type='str'),\n        ),\n    )\n\n    if not HAS_OVIRTSDK:\n        module.fail_json(msg='ovirtsdk required for this module')\n\n    state = module.params['state']\n    user = module.params['user']\n    url = module.params['url']\n    vmname = module.params['instance_name']\n    password = module.params['password']\n    image = module.params['image']   name of the image to deploy\n    resource_type = module.params['resource_type']   template or from scratch\n    zone = module.params['zone']   oVirt cluster\n    vmdisk_size = module.params['instance_disksize']   disksize\n    vmcpus = module.params['instance_cpus']   number of cpu\n    vmnic = module.params['instance_nic']   network interface\n    vmnetwork = module.params['instance_network']   logical network\n    vmmem = module.params['instance_mem']   mem size\n    vmdisk_alloc = module.params['disk_alloc']   thin, preallocated\n    vmdisk_int = module.params['disk_int']   disk interface virtio or ide\n    vmos = module.params['instance_os']   Operating System\n    vmtype = module.params['instance_type']   server, desktop or high_performance\n    vmcores = module.params['instance_cores']   number of cores\n    sdomain = module.params['sdomain']   storage domain to store disk on\n    region = module.params['region']   oVirt Datacenter\n    hostname = module.params['instance_hostname']\n    ip = module.params['instance_ip']\n    netmask = module.params['instance_netmask']\n    gateway = module.params['instance_gateway']\n    domain = module.params['instance_domain']\n    dns = module.params['instance_dns']\n    rootpw = module.params['instance_rootpw']\n    key = module.params['instance_key']\n     initialize connection\n    try:\n        c = conn(url + \"/api\", user, password)\n    except Exception as e:\n        module.fail_json(msg='%s' % e)\n\n    if state == 'present':\n        if get_vm(c, vmname) == \"empty\":\n            if resource_type == 'template':\n                try:\n                    create_vm_template(c, vmname, image, zone)\n                except Exception as e:\n                    module.fail_json(msg='%s' % e)\n                module.exit_json(changed=True, msg=\"deployed VM %s from template %s\" % (vmname, image))\n            elif resource_type == 'new':\n                 FIXME: refactor, use keyword args.\n                try:\n                    create_vm(c, vmtype, vmname, zone, vmdisk_size, vmcpus, vmnic, vmnetwork, vmmem, vmdisk_alloc, sdomain, vmcores, vmos, vmdisk_int)\n                except Exception as e:\n                    module.fail_json(msg='%s' % e)\n                module.exit_json(changed=True, msg=\"deployed VM %s from scratch\" % vmname)\n            else:\n                module.exit_json(changed=False, msg=\"You did not specify a resource type\")\n        else:\n            module.exit_json(changed=False, msg=\"VM %s already exists\" % vmname)\n\n    if state == 'started':\n        if vm_status(c, vmname) == 'up':\n            module.exit_json(changed=False, msg=\"VM %s is already running\" % vmname)\n        else:\n             vm_start(c, vmname)\n            vm_start(c, vmname, hostname, ip, netmask, gateway, domain, dns, rootpw, key)\n            module.exit_json(changed=True, msg=\"VM %s started\" % vmname)\n\n    if state == 'shutdown':\n        if vm_status(c, vmname) == 'down':\n            module.exit_json(changed=False, msg=\"VM %s is already shutdown\" % vmname)\n        else:\n            vm_stop(c, vmname)\n            module.exit_json(changed=True, msg=\"VM %s is shutting down\" % vmname)\n\n    if state == 'restart':\n        if vm_status(c, vmname) == 'up':\n            vm_restart(c, vmname)\n            module.exit_json(changed=True, msg=\"VM %s is restarted\" % vmname)\n        else:\n            module.exit_json(changed=False, msg=\"VM %s is not running\" % vmname)\n\n    if state == 'absent':\n        if get_vm(c, vmname) == \"empty\":\n            module.exit_json(changed=False, msg=\"VM %s does not exist\" % vmname)\n        else:\n            vm_remove(c, vmname)\n            module.exit_json(changed=True, msg=\"VM %s removed\" % vmname)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  ovirt author    vincent van der kussen ( vincentvdk) short description  ovirt rhev platform management description        this module supports ovirt rhev version 3  a newer module m(ovirt vms) supports ovirt rhv version 4        allows create new instances  either scratch image  addition deleting stopping instances ovirt rhev platform  version added   1 4  options    user      description         the user authenticate      required  true   url      description         the url ovirt instance      required  true   instance name      description         the name instance use      required  true     aliases    vmname     password      description         password user authenticate      required  true   image      description         the template use instance    resource type      description         whether want deploy image create instance scratch      choices    new  template     zone      description         deploy image ovirt cluster    instance disksize      description         size instance disk gb      aliases    vm disksize    instance cpus      description         the instance number cpus      default  1     aliases    vmcpus     instance nic      description         the name network interface ovirt rhev      aliases    vmnic      instance network      description         the logical network machine belong      default  rhevm     aliases    vmnetwork     instance mem      description         the instance amount memory mb      aliases    vmmem     instance type      description         define whether instance server  desktop high performance         i(high performance) supported since ansible 2 5 ovirt rhv 4 2      choices    desktop  server  high performance       default  server     aliases    vmtype     disk alloc      description         define whether disk thin preallocated      choices    preallocated  thin       default  thin   disk int      description         interface type disk      choices    ide  virtio       default  virtio   instance os      description         type operating system      aliases    vmos     instance cores      description         define instance number cores      default  1     aliases    vmcores     sdomain      description         the storage domain want create instance disk    region      description         the ovirt rhev datacenter want deploy    instance dns      description         define instance primary dns server      aliases    dns       version added   2 1    instance domain      description         define instance domain      aliases    domain       version added   2 1    instance hostname      description         define instance hostname      aliases    hostname       version added   2 1    instance ip      description         define instance ip      aliases    ip       version added   2 1    instance netmask      description         define instance netmask      aliases    netmask       version added   2 1    instance rootpw      description         define instance root password      aliases    rootpw       version added   2 1    instance key      description         define instance authorized key      aliases    key       version added   2 1    state      description         create  terminate remove instances      choices    absent  present  restarted  shutdown  started       default  present requirements      ovirt engine sdk python      examples         name  basic example provision image   ovirt      user  admin internal     url  https   ovirt example com     instance name  ansiblevm04     password  secret     image  centos 64     zone  cluster01     resource type  template    name  full example create new instance scratch   ovirt      instance name  testansible     resource type  new     instance type  server     user  admin internal     password  secret     url  https   ovirt example com     instance disksize  10     zone  cluster01     region  datacenter1     instance cpus  1     instance nic  nic1     instance network  rhevm     instance mem  1000     disk alloc  thin     sdomain  fiber01     instance cores  1     instance os  rhel 6x64     disk int  virtio    name  stopping existing instance   ovirt      instance name  testansible     state  stopped     user  admin internal     password  secret     url  https   ovirt example com    name  start existing instance   ovirt      instance name  testansible     state  started     user  admin internal     password  secret     url  https   ovirt example com    name  start instance cloud init information   ovirt      instance name  testansible     state  started     user  admin internal     password  secret     url  https   ovirt example com     hostname  testansible     domain  ansible local     ip  192 0 2 100     netmask  255 255 255 0     gateway  192 0 2 1     rootpw  bigsecret         usr bin python    copyright  (c) 2013  vincent van der kussen  vincent vanderkussen org     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)                                                                             create connection api                                                                                create vm scratch    define vm params    define disk params    define network parameters    define vm params    define disk params    define network parameters    create instance template    start instance    stop instance    restart instance    remove instance                                                                             vm statuses       get vms status    get vm object return name object exists                                                                             hypervisor operations       available yet                                                                             main    name image deploy    template scratch    ovirt cluster    disksize    number cpu    network interface    logical network    mem size    thin  preallocated    disk interface virtio ide    operating system    server  desktop high performance    number cores    storage domain store disk    ovirt datacenter    initialize connection    fixme  refactor  use keyword args     vm start(c  vmname) ", "content": "#!/usr/bin/python\n\n# Copyright: (c) 2013, Vincent Van der Kussen <vincent at vanderkussen.org>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: ovirt\nauthor:\n- Vincent Van der Kussen (@vincentvdk)\nshort_description: oVirt/RHEV platform management\ndescription:\n    - This module only supports oVirt/RHEV version 3. A newer module M(ovirt_vms) supports oVirt/RHV version 4.\n    - Allows you to create new instances, either from scratch or an image, in addition to deleting or stopping instances on the oVirt/RHEV platform.\nversion_added: \"1.4\"\noptions:\n  user:\n    description:\n     - The user to authenticate with.\n    required: true\n  url:\n    description:\n     - The url of the oVirt instance.\n    required: true\n  instance_name:\n    description:\n     - The name of the instance to use.\n    required: true\n    aliases: [ vmname ]\n  password:\n    description:\n     - Password of the user to authenticate with.\n    required: true\n  image:\n    description:\n     - The template to use for the instance.\n  resource_type:\n    description:\n     - Whether you want to deploy an image or create an instance from scratch.\n    choices: [ new, template ]\n  zone:\n    description:\n     - Deploy the image to this oVirt cluster.\n  instance_disksize:\n    description:\n     - Size of the instance's disk in GB.\n    aliases: [ vm_disksize]\n  instance_cpus:\n    description:\n     - The instance's number of CPUs.\n    default: 1\n    aliases: [ vmcpus ]\n  instance_nic:\n    description:\n     - The name of the network interface in oVirt/RHEV.\n    aliases: [ vmnic  ]\n  instance_network:\n    description:\n     - The logical network the machine should belong to.\n    default: rhevm\n    aliases: [ vmnetwork ]\n  instance_mem:\n    description:\n     - The instance's amount of memory in MB.\n    aliases: [ vmmem ]\n  instance_type:\n    description:\n     - Define whether the instance is a server, desktop or high_performance.\n     - I(high_performance) is supported since Ansible 2.5 and oVirt/RHV 4.2.\n    choices: [ desktop, server, high_performance ]\n    default: server\n    aliases: [ vmtype ]\n  disk_alloc:\n    description:\n     - Define whether disk is thin or preallocated.\n    choices: [ preallocated, thin ]\n    default: thin\n  disk_int:\n    description:\n     - Interface type of the disk.\n    choices: [ ide, virtio ]\n    default: virtio\n  instance_os:\n    description:\n     - Type of Operating System.\n    aliases: [ vmos ]\n  instance_cores:\n    description:\n     - Define the instance's number of cores.\n    default: 1\n    aliases: [ vmcores ]\n  sdomain:\n    description:\n     - The Storage Domain where you want to create the instance's disk on.\n  region:\n    description:\n     - The oVirt/RHEV datacenter where you want to deploy to.\n  instance_dns:\n    description:\n     - Define the instance's Primary DNS server.\n    aliases: [ dns ]\n    version_added: \"2.1\"\n  instance_domain:\n    description:\n     - Define the instance's Domain.\n    aliases: [ domain ]\n    version_added: \"2.1\"\n  instance_hostname:\n    description:\n     - Define the instance's Hostname.\n    aliases: [ hostname ]\n    version_added: \"2.1\"\n  instance_ip:\n    description:\n     - Define the instance's IP.\n    aliases: [ ip ]\n    version_added: \"2.1\"\n  instance_netmask:\n    description:\n     - Define the instance's Netmask.\n    aliases: [ netmask ]\n    version_added: \"2.1\"\n  instance_rootpw:\n    description:\n     - Define the instance's Root password.\n    aliases: [ rootpw ]\n    version_added: \"2.1\"\n  instance_key:\n    description:\n     - Define the instance's Authorized key.\n    aliases: [ key ]\n    version_added: \"2.1\"\n  state:\n    description:\n     - Create, terminate or remove instances.\n    choices: [ absent, present, restarted, shutdown, started ]\n    default: present\nrequirements:\n  - ovirt-engine-sdk-python\n'''\n\nEXAMPLES = '''\n- name: Basic example to provision from image\n  ovirt:\n    user: admin@internal\n    url: https://ovirt.example.com\n    instance_name: ansiblevm04\n    password: secret\n    image: centos_64\n    zone: cluster01\n    resource_type: template\n\n- name: Full example to create new instance from scratch\n  ovirt:\n    instance_name: testansible\n    resource_type: new\n    instance_type: server\n    user: admin@internal\n    password: secret\n    url: https://ovirt.example.com\n    instance_disksize: 10\n    zone: cluster01\n    region: datacenter1\n    instance_cpus: 1\n    instance_nic: nic1\n    instance_network: rhevm\n    instance_mem: 1000\n    disk_alloc: thin\n    sdomain: FIBER01\n    instance_cores: 1\n    instance_os: rhel_6x64\n    disk_int: virtio\n\n- name: Stopping an existing instance\n  ovirt:\n    instance_name: testansible\n    state: stopped\n    user: admin@internal\n    password: secret\n    url: https://ovirt.example.com\n\n- name: Start an existing instance\n  ovirt:\n    instance_name: testansible\n    state: started\n    user: admin@internal\n    password: secret\n    url: https://ovirt.example.com\n\n- name: Start an instance with cloud init information\n  ovirt:\n    instance_name: testansible\n    state: started\n    user: admin@internal\n    password: secret\n    url: https://ovirt.example.com\n    hostname: testansible\n    domain: ansible.local\n    ip: 192.0.2.100\n    netmask: 255.255.255.0\n    gateway: 192.0.2.1\n    rootpw: bigsecret\n'''\n\nimport time\n\ntry:\n    from ovirtsdk.api import API\n    from ovirtsdk.xml import params\n    HAS_OVIRTSDK = True\nexcept ImportError:\n    HAS_OVIRTSDK = False\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\n# ------------------------------------------------------------------- #\n# create connection with API\n#\ndef conn(url, user, password):\n    api = API(url=url, username=user, password=password, insecure=True)\n    try:\n        value = api.test()\n    except:\n        raise Exception(\"error connecting to the oVirt API\")\n    return api\n\n\n# ------------------------------------------------------------------- #\n# Create VM from scratch\ndef create_vm(conn, vmtype, vmname, zone, vmdisk_size, vmcpus, vmnic, vmnetwork, vmmem, vmdisk_alloc, sdomain, vmcores, vmos, vmdisk_int):\n    if vmdisk_alloc == 'thin':\n        # define VM params\n        vmparams = params.VM(name=vmname, cluster=conn.clusters.get(name=zone), os=params.OperatingSystem(type_=vmos),\n                             template=conn.templates.get(name=\"Blank\"), memory=1024 * 1024 * int(vmmem),\n                             cpu=params.CPU(topology=params.CpuTopology(cores=int(vmcores))), type_=vmtype)\n        # define disk params\n        vmdisk = params.Disk(size=1024 * 1024 * 1024 * int(vmdisk_size), wipe_after_delete=True, sparse=True, interface=vmdisk_int, type_=\"System\",\n                             format='cow',\n                             storage_domains=params.StorageDomains(storage_domain=[conn.storagedomains.get(name=sdomain)]))\n        # define network parameters\n        network_net = params.Network(name=vmnetwork)\n        nic_net1 = params.NIC(name='nic1', network=network_net, interface='virtio')\n    elif vmdisk_alloc == 'preallocated':\n        # define VM params\n        vmparams = params.VM(name=vmname, cluster=conn.clusters.get(name=zone), os=params.OperatingSystem(type_=vmos),\n                             template=conn.templates.get(name=\"Blank\"), memory=1024 * 1024 * int(vmmem),\n                             cpu=params.CPU(topology=params.CpuTopology(cores=int(vmcores))), type_=vmtype)\n        # define disk params\n        vmdisk = params.Disk(size=1024 * 1024 * 1024 * int(vmdisk_size), wipe_after_delete=True, sparse=False, interface=vmdisk_int, type_=\"System\",\n                             format='raw', storage_domains=params.StorageDomains(storage_domain=[conn.storagedomains.get(name=sdomain)]))\n        # define network parameters\n        network_net = params.Network(name=vmnetwork)\n        nic_net1 = params.NIC(name=vmnic, network=network_net, interface='virtio')\n\n    try:\n        conn.vms.add(vmparams)\n    except:\n        raise Exception(\"Error creating VM with specified parameters\")\n    vm = conn.vms.get(name=vmname)\n    try:\n        vm.disks.add(vmdisk)\n    except:\n        raise Exception(\"Error attaching disk\")\n    try:\n        vm.nics.add(nic_net1)\n    except:\n        raise Exception(\"Error adding nic\")\n\n\n# create an instance from a template\ndef create_vm_template(conn, vmname, image, zone):\n    vmparams = params.VM(name=vmname, cluster=conn.clusters.get(name=zone), template=conn.templates.get(name=image), disks=params.Disks(clone=True))\n    try:\n        conn.vms.add(vmparams)\n    except:\n        raise Exception('error adding template %s' % image)\n\n\n# start instance\ndef vm_start(conn, vmname, hostname=None, ip=None, netmask=None, gateway=None,\n             domain=None, dns=None, rootpw=None, key=None):\n    vm = conn.vms.get(name=vmname)\n    use_cloud_init = False\n    nics = None\n    nic = None\n    if hostname or ip or netmask or gateway or domain or dns or rootpw or key:\n        use_cloud_init = True\n    if ip and netmask and gateway:\n        ipinfo = params.IP(address=ip, netmask=netmask, gateway=gateway)\n        nic = params.GuestNicConfiguration(name='eth0', boot_protocol='STATIC', ip=ipinfo, on_boot=True)\n        nics = params.Nics()\n    nics = params.GuestNicsConfiguration(nic_configuration=[nic])\n    initialization = params.Initialization(regenerate_ssh_keys=True, host_name=hostname, domain=domain, user_name='root',\n                                           root_password=rootpw, nic_configurations=nics, dns_servers=dns,\n                                           authorized_ssh_keys=key)\n    action = params.Action(use_cloud_init=use_cloud_init, vm=params.VM(initialization=initialization))\n    vm.start(action=action)\n\n\n# Stop instance\ndef vm_stop(conn, vmname):\n    vm = conn.vms.get(name=vmname)\n    vm.stop()\n\n\n# restart instance\ndef vm_restart(conn, vmname):\n    state = vm_status(conn, vmname)\n    vm = conn.vms.get(name=vmname)\n    vm.stop()\n    while conn.vms.get(vmname).get_status().get_state() != 'down':\n        time.sleep(5)\n    vm.start()\n\n\n# remove an instance\ndef vm_remove(conn, vmname):\n    vm = conn.vms.get(name=vmname)\n    vm.delete()\n\n\n# ------------------------------------------------------------------- #\n# VM statuses\n#\n# Get the VMs status\ndef vm_status(conn, vmname):\n    status = conn.vms.get(name=vmname).status.state\n    return status\n\n\n# Get VM object and return it's name if object exists\ndef get_vm(conn, vmname):\n    vm = conn.vms.get(name=vmname)\n    if vm is None:\n        name = \"empty\"\n    else:\n        name = vm.get_name()\n    return name\n\n# ------------------------------------------------------------------- #\n# Hypervisor operations\n#\n# not available yet\n# ------------------------------------------------------------------- #\n# Main\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            state=dict(type='str', default='present', choices=['absent', 'present', 'restart', 'shutdown', 'started']),\n            user=dict(type='str', required=True),\n            url=dict(type='str', required=True),\n            instance_name=dict(type='str', required=True, aliases=['vmname']),\n            password=dict(type='str', required=True, no_log=True),\n            image=dict(type='str'),\n            resource_type=dict(type='str', choices=['new', 'template']),\n            zone=dict(type='str'),\n            instance_disksize=dict(type='str', aliases=['vm_disksize']),\n            instance_cpus=dict(type='str', default=1, aliases=['vmcpus']),\n            instance_nic=dict(type='str', aliases=['vmnic']),\n            instance_network=dict(type='str', default='rhevm', aliases=['vmnetwork']),\n            instance_mem=dict(type='str', aliases=['vmmem']),\n            instance_type=dict(type='str', default='server', aliases=['vmtype'], choices=['desktop', 'server', 'high_performance']),\n            disk_alloc=dict(type='str', default='thin', choices=['preallocated', 'thin']),\n            disk_int=dict(type='str', default='virtio', choices=['ide', 'virtio']),\n            instance_os=dict(type='str', aliases=['vmos']),\n            instance_cores=dict(type='str', default=1, aliases=['vmcores']),\n            instance_hostname=dict(type='str', aliases=['hostname']),\n            instance_ip=dict(type='str', aliases=['ip']),\n            instance_netmask=dict(type='str', aliases=['netmask']),\n            instance_gateway=dict(type='str', aliases=['gateway']),\n            instance_domain=dict(type='str', aliases=['domain']),\n            instance_dns=dict(type='str', aliases=['dns']),\n            instance_rootpw=dict(type='str', aliases=['rootpw']),\n            instance_key=dict(type='str', aliases=['key']),\n            sdomain=dict(type='str'),\n            region=dict(type='str'),\n        ),\n    )\n\n    if not HAS_OVIRTSDK:\n        module.fail_json(msg='ovirtsdk required for this module')\n\n    state = module.params['state']\n    user = module.params['user']\n    url = module.params['url']\n    vmname = module.params['instance_name']\n    password = module.params['password']\n    image = module.params['image']  # name of the image to deploy\n    resource_type = module.params['resource_type']  # template or from scratch\n    zone = module.params['zone']  # oVirt cluster\n    vmdisk_size = module.params['instance_disksize']  # disksize\n    vmcpus = module.params['instance_cpus']  # number of cpu\n    vmnic = module.params['instance_nic']  # network interface\n    vmnetwork = module.params['instance_network']  # logical network\n    vmmem = module.params['instance_mem']  # mem size\n    vmdisk_alloc = module.params['disk_alloc']  # thin, preallocated\n    vmdisk_int = module.params['disk_int']  # disk interface virtio or ide\n    vmos = module.params['instance_os']  # Operating System\n    vmtype = module.params['instance_type']  # server, desktop or high_performance\n    vmcores = module.params['instance_cores']  # number of cores\n    sdomain = module.params['sdomain']  # storage domain to store disk on\n    region = module.params['region']  # oVirt Datacenter\n    hostname = module.params['instance_hostname']\n    ip = module.params['instance_ip']\n    netmask = module.params['instance_netmask']\n    gateway = module.params['instance_gateway']\n    domain = module.params['instance_domain']\n    dns = module.params['instance_dns']\n    rootpw = module.params['instance_rootpw']\n    key = module.params['instance_key']\n    # initialize connection\n    try:\n        c = conn(url + \"/api\", user, password)\n    except Exception as e:\n        module.fail_json(msg='%s' % e)\n\n    if state == 'present':\n        if get_vm(c, vmname) == \"empty\":\n            if resource_type == 'template':\n                try:\n                    create_vm_template(c, vmname, image, zone)\n                except Exception as e:\n                    module.fail_json(msg='%s' % e)\n                module.exit_json(changed=True, msg=\"deployed VM %s from template %s\" % (vmname, image))\n            elif resource_type == 'new':\n                # FIXME: refactor, use keyword args.\n                try:\n                    create_vm(c, vmtype, vmname, zone, vmdisk_size, vmcpus, vmnic, vmnetwork, vmmem, vmdisk_alloc, sdomain, vmcores, vmos, vmdisk_int)\n                except Exception as e:\n                    module.fail_json(msg='%s' % e)\n                module.exit_json(changed=True, msg=\"deployed VM %s from scratch\" % vmname)\n            else:\n                module.exit_json(changed=False, msg=\"You did not specify a resource type\")\n        else:\n            module.exit_json(changed=False, msg=\"VM %s already exists\" % vmname)\n\n    if state == 'started':\n        if vm_status(c, vmname) == 'up':\n            module.exit_json(changed=False, msg=\"VM %s is already running\" % vmname)\n        else:\n            # vm_start(c, vmname)\n            vm_start(c, vmname, hostname, ip, netmask, gateway, domain, dns, rootpw, key)\n            module.exit_json(changed=True, msg=\"VM %s started\" % vmname)\n\n    if state == 'shutdown':\n        if vm_status(c, vmname) == 'down':\n            module.exit_json(changed=False, msg=\"VM %s is already shutdown\" % vmname)\n        else:\n            vm_stop(c, vmname)\n            module.exit_json(changed=True, msg=\"VM %s is shutting down\" % vmname)\n\n    if state == 'restart':\n        if vm_status(c, vmname) == 'up':\n            vm_restart(c, vmname)\n            module.exit_json(changed=True, msg=\"VM %s is restarted\" % vmname)\n        else:\n            module.exit_json(changed=False, msg=\"VM %s is not running\" % vmname)\n\n    if state == 'absent':\n        if get_vm(c, vmname) == \"empty\":\n            module.exit_json(changed=False, msg=\"VM %s does not exist\" % vmname)\n        else:\n            vm_remove(c, vmname)\n            module.exit_json(changed=True, msg=\"VM %s removed\" % vmname)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "ovirt.py", "id": "3a6b13d07e569b33d0b5cffe9686cf09", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/misc/ovirt.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}