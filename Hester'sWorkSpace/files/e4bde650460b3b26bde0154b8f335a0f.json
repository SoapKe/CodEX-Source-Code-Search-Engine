{"author": "ansible", "code": "\n\"\"\" PN-CLI vrouter-bgp-add/vrouter-bgp-remove/vrouter-bgp-modify \"\"\"\n\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_vrouterbgp\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to add/remove/modify vrouter-bgp.\ndescription:\n  - Execute vrouter-bgp-add, vrouter-bgp-remove, vrouter-bgp-modify command.\n  - Each fabric, cluster, standalone switch, or virtual network (VNET) can\n    provide its tenants with a vRouter service that forwards traffic between\n    networks and implements Layer 4 protocols.\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch(es) to run the cli on.\n    required: False\n  state:\n    description:\n      - State the action to perform. Use 'present' to add bgp,\n        'absent' to remove bgp and 'update' to modify bgp.\n    required: True\n    choices: ['present', 'absent', 'update']\n  pn_vrouter_name:\n    description:\n      - Specify a name for the vRouter service.\n    required: True\n  pn_neighbor:\n    description:\n      - Specify a neighbor IP address to use for BGP.\n      - Required for vrouter-bgp-add.\n  pn_remote_as:\n    description:\n      - Specify the remote Autonomous System(AS) number. This value is between\n        1 and 4294967295.\n      - Required for vrouter-bgp-add.\n  pn_next_hop_self:\n    description:\n      - Specify if the next-hop is the same router or not.\n  pn_password:\n    description:\n      - Specify a password, if desired.\n  pn_ebgp:\n    description:\n      - Specify a value for external BGP to accept or attempt BGP connections\n        to external peers, not directly connected, on the network. This is a\n        value between 1 and 255.\n  pn_prefix_listin:\n    description:\n      - Specify the prefix list to filter traffic inbound.\n  pn_prefix_listout:\n    description:\n      - Specify the prefix list to filter traffic outbound.\n  pn_route_reflector:\n    description:\n      - Specify if a route reflector client is used.\n  pn_override_capability:\n    description:\n      - Specify if you want to override capability.\n  pn_soft_reconfig:\n    description:\n      - Specify if you want a soft reconfiguration of inbound traffic.\n  pn_max_prefix:\n    description:\n      - Specify the maximum number of prefixes.\n  pn_max_prefix_warn:\n    description:\n      - Specify if you want a warning message when the maximum number of\n        prefixes is exceeded.\n  pn_bfd:\n    description:\n      - Specify if you want BFD protocol support for fault detection.\n  pn_multiprotocol:\n    description:\n      - Specify a multi-protocol for BGP.\n    choices: ['ipv4-unicast', 'ipv6-unicast']\n  pn_weight:\n    description:\n      - Specify a default weight value between 0 and 65535 for the neighbor\n        routes.\n  pn_default_originate:\n    description:\n      - Specify if you want announce default routes to the neighbor or not.\n  pn_keepalive:\n    description:\n      - Specify BGP neighbor keepalive interval in seconds.\n  pn_holdtime:\n    description:\n      - Specify BGP neighbor holdtime in seconds.\n  pn_route_mapin:\n    description:\n      - Specify inbound route map for neighbor.\n  pn_route_mapout:\n    description:\n      - Specify outbound route map for neighbor.\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: add vrouter-bgp\n  pn_vrouterbgp:\n    state: 'present'\n    pn_vrouter_name: 'ansible-vrouter'\n    pn_neighbor: 104.104.104.1\n    pn_remote_as: 1800\n\n- name: remove vrouter-bgp\n  pn_vrouterbgp:\n    state: 'absent'\n    pn_name: 'ansible-vrouter'\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the vrouterbpg command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the vrouterbgp command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\nVROUTER_EXISTS = None\nNEIGHBOR_EXISTS = None\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch == 'local':\n        cli += ' switch-local '\n    else:\n        cli += ' switch ' + cliswitch\n    return cli\n\n\ndef check_cli(module, cli):\n    \"\"\"\n    This method checks if vRouter exists on the target node.\n    This method also checks for idempotency using the vrouter-bgp-show command.\n    If the given vRouter exists, return VROUTER_EXISTS as True else False.\n    If a BGP neighbor with the given ip exists on the given vRouter,\n    return NEIGHBOR_EXISTS as True else False.\n\n    :param module: The Ansible module to fetch input parameters\n    :param cli: The CLI string\n    :return Global Booleans: VROUTER_EXISTS, NEIGHBOR_EXISTS\n    \"\"\"\n    vrouter_name = module.params['pn_vrouter_name']\n    neighbor = module.params['pn_neighbor']\n     Global flags\n    global VROUTER_EXISTS, NEIGHBOR_EXISTS\n\n     Check for vRouter\n    check_vrouter = cli + ' vrouter-show format name no-show-headers '\n    check_vrouter = shlex.split(check_vrouter)\n    out = module.run_command(check_vrouter)[1]\n    out = out.split()\n\n    if vrouter_name in out:\n        VROUTER_EXISTS = True\n    else:\n        VROUTER_EXISTS = False\n\n     Check for BGP neighbors\n    show = cli + ' vrouter-bgp-show vrouter-name %s ' % vrouter_name\n    show += 'format neighbor no-show-headers'\n    show = shlex.split(show)\n    out = module.run_command(show)[1]\n    out = out.split()\n\n    if neighbor in out:\n        NEIGHBOR_EXISTS = True\n    else:\n        NEIGHBOR_EXISTS = False\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    command = get_command_from_state(state)\n\n    cmd = shlex.split(cli)\n\n     'out' contains the output\n     'err' contains the error messages\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n     Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            stderr=err.strip(),\n            msg=\"%s operation failed\" % command,\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            stdout=out.strip(),\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n    else:\n        module.exit_json(\n            command=print_cli,\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'vrouter-bgp-add'\n    if state == 'absent':\n        command = 'vrouter-bgp-remove'\n    if state == 'update':\n        command = 'vrouter-bgp-modify'\n    return command\n\n\ndef main():\n    \"\"\" This portion is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=False, type='str'),\n            pn_clipassword=dict(required=False, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str', default='local'),\n            state=dict(required=True, type='str',\n                       choices=['present', 'absent', 'update']),\n            pn_vrouter_name=dict(required=True, type='str'),\n            pn_neighbor=dict(type='str'),\n            pn_remote_as=dict(type='str'),\n            pn_next_hop_self=dict(type='bool'),\n            pn_password=dict(type='str', no_log=True),\n            pn_ebgp=dict(type='int'),\n            pn_prefix_listin=dict(type='str'),\n            pn_prefix_listout=dict(type='str'),\n            pn_route_reflector=dict(type='bool'),\n            pn_override_capability=dict(type='bool'),\n            pn_soft_reconfig=dict(type='bool'),\n            pn_max_prefix=dict(type='int'),\n            pn_max_prefix_warn=dict(type='bool'),\n            pn_bfd=dict(type='bool'),\n            pn_multiprotocol=dict(type='str',\n                                  choices=['ipv4-unicast', 'ipv6-unicast']),\n            pn_weight=dict(type='int'),\n            pn_default_originate=dict(type='bool'),\n            pn_keepalive=dict(type='str'),\n            pn_holdtime=dict(type='str'),\n            pn_route_mapin=dict(type='str'),\n            pn_route_mapout=dict(type='str')\n        ),\n        required_if=(\n            [\"state\", \"present\",\n             [\"pn_vrouter_name\", \"pn_neighbor\", \"pn_remote_as\"]],\n            [\"state\", \"absent\",\n             [\"pn_vrouter_name\", \"pn_neighbor\"]],\n            [\"state\", \"update\",\n             [\"pn_vrouter_name\", \"pn_neighbor\"]]\n        )\n    )\n\n     Accessing the arguments\n    state = module.params['state']\n    vrouter_name = module.params['pn_vrouter_name']\n    neighbor = module.params['pn_neighbor']\n    remote_as = module.params['pn_remote_as']\n    next_hop_self = module.params['pn_next_hop_self']\n    password = module.params['pn_password']\n    ebgp = module.params['pn_ebgp']\n    prefix_listin = module.params['pn_prefix_listin']\n    prefix_listout = module.params['pn_prefix_listout']\n    route_reflector = module.params['pn_route_reflector']\n    override_capability = module.params['pn_override_capability']\n    soft_reconfig = module.params['pn_soft_reconfig']\n    max_prefix = module.params['pn_max_prefix']\n    max_prefix_warn = module.params['pn_max_prefix_warn']\n    bfd = module.params['pn_bfd']\n    multiprotocol = module.params['pn_multiprotocol']\n    weight = module.params['pn_weight']\n    default_originate = module.params['pn_default_originate']\n    keepalive = module.params['pn_keepalive']\n    holdtime = module.params['pn_holdtime']\n    route_mapin = module.params['pn_route_mapin']\n    route_mapout = module.params['pn_route_mapout']\n\n     Building the CLI command string\n    cli = pn_cli(module)\n\n    command = get_command_from_state(state)\n    if command == 'vrouter-bgp-remove':\n        check_cli(module, cli)\n        if VROUTER_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='vRouter %s does not exist' % vrouter_name\n            )\n        if NEIGHBOR_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg=('BGP neighbor with IP %s does not exist on %s'\n                     % (neighbor, vrouter_name))\n            )\n        cli += (' %s vrouter-name %s neighbor %s '\n                % (command, vrouter_name, neighbor))\n\n    else:\n\n        if command == 'vrouter-bgp-add':\n            check_cli(module, cli)\n            if VROUTER_EXISTS is False:\n                module.exit_json(\n                    skipped=True,\n                    msg='vRouter %s does not exist' % vrouter_name\n                )\n            if NEIGHBOR_EXISTS is True:\n                module.exit_json(\n                    skipped=True,\n                    msg=('BGP neighbor with IP %s already exists on %s'\n                         % (neighbor, vrouter_name))\n                )\n\n        cli += (' %s vrouter-name %s neighbor %s '\n                % (command, vrouter_name, neighbor))\n\n        if remote_as:\n            cli += ' remote-as ' + str(remote_as)\n\n        if next_hop_self is True:\n            cli += ' next-hop-self '\n        if next_hop_self is False:\n            cli += ' no-next-hop-self '\n\n        if password:\n            cli += ' password ' + password\n\n        if ebgp:\n            cli += ' ebgp-multihop ' + str(ebgp)\n\n        if prefix_listin:\n            cli += ' prefix-list-in ' + prefix_listin\n\n        if prefix_listout:\n            cli += ' prefix-list-out ' + prefix_listout\n\n        if route_reflector is True:\n            cli += ' route-reflector-client '\n        if route_reflector is False:\n            cli += ' no-route-reflector-client '\n\n        if override_capability is True:\n            cli += ' override-capability '\n        if override_capability is False:\n            cli += ' no-override-capability '\n\n        if soft_reconfig is True:\n            cli += ' soft-reconfig-inbound '\n        if soft_reconfig is False:\n            cli += ' no-soft-reconfig-inbound '\n\n        if max_prefix:\n            cli += ' max-prefix ' + str(max_prefix)\n\n        if max_prefix_warn is True:\n            cli += ' max-prefix-warn-only '\n        if max_prefix_warn is False:\n            cli += ' no-max-prefix-warn-only '\n\n        if bfd is True:\n            cli += ' bfd '\n        if bfd is False:\n            cli += ' no-bfd '\n\n        if multiprotocol:\n            cli += ' multi-protocol ' + multiprotocol\n\n        if weight:\n            cli += ' weight ' + str(weight)\n\n        if default_originate is True:\n            cli += ' default-originate '\n        if default_originate is False:\n            cli += ' no-default-originate '\n\n        if keepalive:\n            cli += ' neighbor-keepalive-interval ' + keepalive\n\n        if holdtime:\n            cli += ' neighbor-holdtime ' + holdtime\n\n        if route_mapin:\n            cli += ' route-map-in ' + route_mapin\n\n        if route_mapout:\n            cli += ' route-map-out ' + route_mapout\n\n    run_cli(module, cli)\n Ansible boiler-plate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "comments": "    pn cli vrouter bgp add vrouter bgp remove vrouter bgp modify          this file part ansible     ansible free software  redistribute modify   terms gnu general public license published   free software foundation  either version 3 license    (at option) later version      ansible distributed hope useful    without any warranty  without even implied warranty   merchantability fitness for a particular purpose   see   gnu general public license details      you received copy gnu general public license   along ansible   if  see  http   www gnu org licenses       ansible metadata     metadata version    1 1                        status     preview                         supported    community     documentation           module  pn vrouterbgp author   pluribus networks ( amitsi)  version added   2 2  short description  cli command add remove modify vrouter bgp  description      execute vrouter bgp add  vrouter bgp remove  vrouter bgp modify command      each fabric  cluster  standalone switch  virtual network (vnet)     provide tenants vrouter service forwards traffic     networks implements layer 4 protocols  options    pn cliusername      description          provide login username user root      required  false   pn clipassword      description          provide login password user root      required  false   pn cliswitch      description          target switch(es) run cli      required  false   state      description          state action perform  use  present  add bgp           absent  remove bgp  update  modify bgp      required  true     choices    present    absent    update     pn vrouter name      description          specify name vrouter service      required  true   pn neighbor      description          specify neighbor ip address use bgp          required vrouter bgp add    pn remote      description          specify remote autonomous system(as) number  this value         1 4294967295          required vrouter bgp add    pn next hop self      description          specify next hop router    pn password      description          specify password  desired    pn ebgp      description          specify value external bgp accept attempt bgp connections         external peers  directly connected  network  this         value 1 255    pn prefix listin      description          specify prefix list filter traffic inbound    pn prefix listout      description          specify prefix list filter traffic outbound    pn route reflector      description          specify route reflector client used    pn override capability      description          specify want override capability    pn soft reconfig      description          specify want soft reconfiguration inbound traffic    pn max prefix      description          specify maximum number prefixes    pn max prefix warn      description          specify want warning message maximum number         prefixes exceeded    pn bfd      description          specify want bfd protocol support fault detection    pn multiprotocol      description          specify multi protocol bgp      choices    ipv4 unicast    ipv6 unicast     pn weight      description          specify default weight value 0 65535 neighbor         routes    pn default originate      description          specify want announce default routes neighbor    pn keepalive      description          specify bgp neighbor keepalive interval seconds    pn holdtime      description          specify bgp neighbor holdtime seconds    pn route mapin      description          specify inbound route map neighbor    pn route mapout      description          specify outbound route map neighbor       examples         name  add vrouter bgp   pn vrouterbgp      state   present      pn vrouter name   ansible vrouter      pn neighbor  104 104 104 1     pn remote  1800    name  remove vrouter bgp   pn vrouterbgp      state   absent      pn name   ansible vrouter       return       command    description  the cli command run target node(s)    returned  always   type  str stdout    description  the set responses vrouterbpg command    returned  always   type  list stderr    description  the set error responses vrouterbgp command    returned  error   type  list changed    description  indicates whether cli caused changes target    returned  always   type  bool      import shlex  vrouter exists   none neighbor exists   none   def pn cli(module)              this method generate cli portion launch netvisor cli      it parses username  password  switch parameters module       param module  the ansible module fetch username  password switch      return  returns cli string processing             username   module params  pn cliusername       password   module params  pn clipassword       cliswitch   module params  pn cliswitch        username password          cli     usr bin cli   quiet   user       (username  password)     else          cli     usr bin cli   quiet        cliswitch     local           cli      switch local       else          cli      switch     cliswitch     return cli   def check cli(module  cli)              this method checks vrouter exists target node      this method also checks idempotency using vrouter bgp show command      if given vrouter exists  return vrouter exists true else false      if bgp neighbor given ip exists given vrouter      return neighbor exists true else false        param module  the ansible module fetch input parameters      param cli  the cli string      return global booleans  vrouter exists  neighbor exists             vrouter name   module params  pn vrouter name       neighbor   module params  pn neighbor         global flags     global vrouter exists  neighbor exists        check vrouter     check vrouter   cli     vrouter show format name show headers       check vrouter   shlex split(check vrouter)       module run command(check vrouter) 1        split()      vrouter name          vrouter exists   true     else          vrouter exists   false        check bgp neighbors     show   cli     vrouter bgp show vrouter name      vrouter name     show     format neighbor show headers      show   shlex split(show)       module run command(show) 1        split()      neighbor          neighbor exists   true     else          neighbor exists   false   def run cli(module  cli)              this method executes cli command target node(s) returns     output  the module exits based output       param cli  complete cli string executed target node(s)       param module  the ansible module fetch command             cliswitch   module params  pn cliswitch       state   module params  state       command   get command state(state)      cmd   shlex split(cli)          contains output        err  contains error messages     result   err   module run command(cmd)      print cli   cli split(cliswitch) 1         response json format     result    0          module exit json(             command print cli              stderr err strip()              msg   operation failed    command              changed false         )               module exit json(             command print cli              stdout strip()              msg   operation completed    command              changed true         )      else          module exit json(             command print cli              msg   operation completed    command              changed true         )   def get command state(state)              this method gets appropriate command name state specified  it     returns command name specified state       param state  the state respective command name required              command   none     state     present           command    vrouter bgp add      state     absent           command    vrouter bgp remove      state     update           command    vrouter bgp modify      return command   def main()          this portion arguments parsing         usr bin python       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          global flags    check vrouter    check bgp neighbors      contains output     err  contains error messages    response json format    accessing arguments    building cli command string    ansible boiler plate ", "content": "#!/usr/bin/python\n\"\"\" PN-CLI vrouter-bgp-add/vrouter-bgp-remove/vrouter-bgp-modify \"\"\"\n\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_vrouterbgp\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to add/remove/modify vrouter-bgp.\ndescription:\n  - Execute vrouter-bgp-add, vrouter-bgp-remove, vrouter-bgp-modify command.\n  - Each fabric, cluster, standalone switch, or virtual network (VNET) can\n    provide its tenants with a vRouter service that forwards traffic between\n    networks and implements Layer 4 protocols.\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch(es) to run the cli on.\n    required: False\n  state:\n    description:\n      - State the action to perform. Use 'present' to add bgp,\n        'absent' to remove bgp and 'update' to modify bgp.\n    required: True\n    choices: ['present', 'absent', 'update']\n  pn_vrouter_name:\n    description:\n      - Specify a name for the vRouter service.\n    required: True\n  pn_neighbor:\n    description:\n      - Specify a neighbor IP address to use for BGP.\n      - Required for vrouter-bgp-add.\n  pn_remote_as:\n    description:\n      - Specify the remote Autonomous System(AS) number. This value is between\n        1 and 4294967295.\n      - Required for vrouter-bgp-add.\n  pn_next_hop_self:\n    description:\n      - Specify if the next-hop is the same router or not.\n  pn_password:\n    description:\n      - Specify a password, if desired.\n  pn_ebgp:\n    description:\n      - Specify a value for external BGP to accept or attempt BGP connections\n        to external peers, not directly connected, on the network. This is a\n        value between 1 and 255.\n  pn_prefix_listin:\n    description:\n      - Specify the prefix list to filter traffic inbound.\n  pn_prefix_listout:\n    description:\n      - Specify the prefix list to filter traffic outbound.\n  pn_route_reflector:\n    description:\n      - Specify if a route reflector client is used.\n  pn_override_capability:\n    description:\n      - Specify if you want to override capability.\n  pn_soft_reconfig:\n    description:\n      - Specify if you want a soft reconfiguration of inbound traffic.\n  pn_max_prefix:\n    description:\n      - Specify the maximum number of prefixes.\n  pn_max_prefix_warn:\n    description:\n      - Specify if you want a warning message when the maximum number of\n        prefixes is exceeded.\n  pn_bfd:\n    description:\n      - Specify if you want BFD protocol support for fault detection.\n  pn_multiprotocol:\n    description:\n      - Specify a multi-protocol for BGP.\n    choices: ['ipv4-unicast', 'ipv6-unicast']\n  pn_weight:\n    description:\n      - Specify a default weight value between 0 and 65535 for the neighbor\n        routes.\n  pn_default_originate:\n    description:\n      - Specify if you want announce default routes to the neighbor or not.\n  pn_keepalive:\n    description:\n      - Specify BGP neighbor keepalive interval in seconds.\n  pn_holdtime:\n    description:\n      - Specify BGP neighbor holdtime in seconds.\n  pn_route_mapin:\n    description:\n      - Specify inbound route map for neighbor.\n  pn_route_mapout:\n    description:\n      - Specify outbound route map for neighbor.\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: add vrouter-bgp\n  pn_vrouterbgp:\n    state: 'present'\n    pn_vrouter_name: 'ansible-vrouter'\n    pn_neighbor: 104.104.104.1\n    pn_remote_as: 1800\n\n- name: remove vrouter-bgp\n  pn_vrouterbgp:\n    state: 'absent'\n    pn_name: 'ansible-vrouter'\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the vrouterbpg command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the vrouterbgp command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\nVROUTER_EXISTS = None\nNEIGHBOR_EXISTS = None\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch == 'local':\n        cli += ' switch-local '\n    else:\n        cli += ' switch ' + cliswitch\n    return cli\n\n\ndef check_cli(module, cli):\n    \"\"\"\n    This method checks if vRouter exists on the target node.\n    This method also checks for idempotency using the vrouter-bgp-show command.\n    If the given vRouter exists, return VROUTER_EXISTS as True else False.\n    If a BGP neighbor with the given ip exists on the given vRouter,\n    return NEIGHBOR_EXISTS as True else False.\n\n    :param module: The Ansible module to fetch input parameters\n    :param cli: The CLI string\n    :return Global Booleans: VROUTER_EXISTS, NEIGHBOR_EXISTS\n    \"\"\"\n    vrouter_name = module.params['pn_vrouter_name']\n    neighbor = module.params['pn_neighbor']\n    # Global flags\n    global VROUTER_EXISTS, NEIGHBOR_EXISTS\n\n    # Check for vRouter\n    check_vrouter = cli + ' vrouter-show format name no-show-headers '\n    check_vrouter = shlex.split(check_vrouter)\n    out = module.run_command(check_vrouter)[1]\n    out = out.split()\n\n    if vrouter_name in out:\n        VROUTER_EXISTS = True\n    else:\n        VROUTER_EXISTS = False\n\n    # Check for BGP neighbors\n    show = cli + ' vrouter-bgp-show vrouter-name %s ' % vrouter_name\n    show += 'format neighbor no-show-headers'\n    show = shlex.split(show)\n    out = module.run_command(show)[1]\n    out = out.split()\n\n    if neighbor in out:\n        NEIGHBOR_EXISTS = True\n    else:\n        NEIGHBOR_EXISTS = False\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    command = get_command_from_state(state)\n\n    cmd = shlex.split(cli)\n\n    # 'out' contains the output\n    # 'err' contains the error messages\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n    # Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            stderr=err.strip(),\n            msg=\"%s operation failed\" % command,\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            stdout=out.strip(),\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n    else:\n        module.exit_json(\n            command=print_cli,\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'vrouter-bgp-add'\n    if state == 'absent':\n        command = 'vrouter-bgp-remove'\n    if state == 'update':\n        command = 'vrouter-bgp-modify'\n    return command\n\n\ndef main():\n    \"\"\" This portion is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=False, type='str'),\n            pn_clipassword=dict(required=False, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str', default='local'),\n            state=dict(required=True, type='str',\n                       choices=['present', 'absent', 'update']),\n            pn_vrouter_name=dict(required=True, type='str'),\n            pn_neighbor=dict(type='str'),\n            pn_remote_as=dict(type='str'),\n            pn_next_hop_self=dict(type='bool'),\n            pn_password=dict(type='str', no_log=True),\n            pn_ebgp=dict(type='int'),\n            pn_prefix_listin=dict(type='str'),\n            pn_prefix_listout=dict(type='str'),\n            pn_route_reflector=dict(type='bool'),\n            pn_override_capability=dict(type='bool'),\n            pn_soft_reconfig=dict(type='bool'),\n            pn_max_prefix=dict(type='int'),\n            pn_max_prefix_warn=dict(type='bool'),\n            pn_bfd=dict(type='bool'),\n            pn_multiprotocol=dict(type='str',\n                                  choices=['ipv4-unicast', 'ipv6-unicast']),\n            pn_weight=dict(type='int'),\n            pn_default_originate=dict(type='bool'),\n            pn_keepalive=dict(type='str'),\n            pn_holdtime=dict(type='str'),\n            pn_route_mapin=dict(type='str'),\n            pn_route_mapout=dict(type='str')\n        ),\n        required_if=(\n            [\"state\", \"present\",\n             [\"pn_vrouter_name\", \"pn_neighbor\", \"pn_remote_as\"]],\n            [\"state\", \"absent\",\n             [\"pn_vrouter_name\", \"pn_neighbor\"]],\n            [\"state\", \"update\",\n             [\"pn_vrouter_name\", \"pn_neighbor\"]]\n        )\n    )\n\n    # Accessing the arguments\n    state = module.params['state']\n    vrouter_name = module.params['pn_vrouter_name']\n    neighbor = module.params['pn_neighbor']\n    remote_as = module.params['pn_remote_as']\n    next_hop_self = module.params['pn_next_hop_self']\n    password = module.params['pn_password']\n    ebgp = module.params['pn_ebgp']\n    prefix_listin = module.params['pn_prefix_listin']\n    prefix_listout = module.params['pn_prefix_listout']\n    route_reflector = module.params['pn_route_reflector']\n    override_capability = module.params['pn_override_capability']\n    soft_reconfig = module.params['pn_soft_reconfig']\n    max_prefix = module.params['pn_max_prefix']\n    max_prefix_warn = module.params['pn_max_prefix_warn']\n    bfd = module.params['pn_bfd']\n    multiprotocol = module.params['pn_multiprotocol']\n    weight = module.params['pn_weight']\n    default_originate = module.params['pn_default_originate']\n    keepalive = module.params['pn_keepalive']\n    holdtime = module.params['pn_holdtime']\n    route_mapin = module.params['pn_route_mapin']\n    route_mapout = module.params['pn_route_mapout']\n\n    # Building the CLI command string\n    cli = pn_cli(module)\n\n    command = get_command_from_state(state)\n    if command == 'vrouter-bgp-remove':\n        check_cli(module, cli)\n        if VROUTER_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='vRouter %s does not exist' % vrouter_name\n            )\n        if NEIGHBOR_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg=('BGP neighbor with IP %s does not exist on %s'\n                     % (neighbor, vrouter_name))\n            )\n        cli += (' %s vrouter-name %s neighbor %s '\n                % (command, vrouter_name, neighbor))\n\n    else:\n\n        if command == 'vrouter-bgp-add':\n            check_cli(module, cli)\n            if VROUTER_EXISTS is False:\n                module.exit_json(\n                    skipped=True,\n                    msg='vRouter %s does not exist' % vrouter_name\n                )\n            if NEIGHBOR_EXISTS is True:\n                module.exit_json(\n                    skipped=True,\n                    msg=('BGP neighbor with IP %s already exists on %s'\n                         % (neighbor, vrouter_name))\n                )\n\n        cli += (' %s vrouter-name %s neighbor %s '\n                % (command, vrouter_name, neighbor))\n\n        if remote_as:\n            cli += ' remote-as ' + str(remote_as)\n\n        if next_hop_self is True:\n            cli += ' next-hop-self '\n        if next_hop_self is False:\n            cli += ' no-next-hop-self '\n\n        if password:\n            cli += ' password ' + password\n\n        if ebgp:\n            cli += ' ebgp-multihop ' + str(ebgp)\n\n        if prefix_listin:\n            cli += ' prefix-list-in ' + prefix_listin\n\n        if prefix_listout:\n            cli += ' prefix-list-out ' + prefix_listout\n\n        if route_reflector is True:\n            cli += ' route-reflector-client '\n        if route_reflector is False:\n            cli += ' no-route-reflector-client '\n\n        if override_capability is True:\n            cli += ' override-capability '\n        if override_capability is False:\n            cli += ' no-override-capability '\n\n        if soft_reconfig is True:\n            cli += ' soft-reconfig-inbound '\n        if soft_reconfig is False:\n            cli += ' no-soft-reconfig-inbound '\n\n        if max_prefix:\n            cli += ' max-prefix ' + str(max_prefix)\n\n        if max_prefix_warn is True:\n            cli += ' max-prefix-warn-only '\n        if max_prefix_warn is False:\n            cli += ' no-max-prefix-warn-only '\n\n        if bfd is True:\n            cli += ' bfd '\n        if bfd is False:\n            cli += ' no-bfd '\n\n        if multiprotocol:\n            cli += ' multi-protocol ' + multiprotocol\n\n        if weight:\n            cli += ' weight ' + str(weight)\n\n        if default_originate is True:\n            cli += ' default-originate '\n        if default_originate is False:\n            cli += ' no-default-originate '\n\n        if keepalive:\n            cli += ' neighbor-keepalive-interval ' + keepalive\n\n        if holdtime:\n            cli += ' neighbor-holdtime ' + holdtime\n\n        if route_mapin:\n            cli += ' route-map-in ' + route_mapin\n\n        if route_mapout:\n            cli += ' route-map-out ' + route_mapout\n\n    run_cli(module, cli)\n# Ansible boiler-plate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "pn_vrouterbgp.py", "id": "e4bde650460b3b26bde0154b8f335a0f", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/netvisor/pn_vrouterbgp.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}