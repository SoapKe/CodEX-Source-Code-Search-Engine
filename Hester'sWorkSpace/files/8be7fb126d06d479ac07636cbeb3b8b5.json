{"author": "ansible", "code": "\n\n# (c) 2017, NetApp, Inc\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n\nmodule: sf_volume_access_group_manager\n\nshort_description: Manage SolidFire Volume Access Groups\nextends_documentation_fragment:\n    - netapp.solidfire\nversion_added: '2.3'\nauthor: Sumit Kumar (sumit4@netapp.com)\ndescription:\n- Create, destroy, or update volume access groups on SolidFire\n\noptions:\n\n    state:\n        description:\n        - Whether the specified volume access group should exist or not.\n        required: true\n        choices: ['present', 'absent']\n\n    name:\n        description:\n        - Name of the volume access group. It is not required to be unique, but recommended.\n        required: true\n\n    initiators:\n        description:\n        - List of initiators to include in the volume access group. If unspecified, the access group will start out without configured initiators.\n\n    volumes:\n        description:\n        - List of volumes to initially include in the volume access group. If unspecified, the access group will start without any volumes.\n\n    virtual_network_id:\n        description:\n        - The ID of the SolidFire Virtual Network ID to associate the volume access group with.\n\n    virtual_network_tags:\n        description:\n        - The ID of the VLAN Virtual Network Tag to associate the volume access group with.\n\n    attributes:\n        description: List of Name/Value pairs in JSON object format.\n\n    volume_access_group_id:\n        description:\n        - The ID of the volume access group to modify or delete.\n\n'''\n\nEXAMPLES = \"\"\"\n   - name: Create Volume Access Group\n     sf_volume_access_group_manager:\n       hostname: \"{{ solidfire_hostname }}\"\n       username: \"{{ solidfire_username }}\"\n       password: \"{{ solidfire_password }}\"\n       state: present\n       name: AnsibleVolumeAccessGroup\n       volumes: [7,8]\n\n   - name: Modify Volume Access Group\n     sf_volume_access_group_manager:\n       hostname: \"{{ solidfire_hostname }}\"\n       username: \"{{ solidfire_username }}\"\n       password: \"{{ solidfire_password }}\"\n       state: present\n       volume_access_group_id: 1\n       name: AnsibleVolumeAccessGroup-Renamed\n       attributes: {\"volumes\": [1,2,3], \"virtual_network_id\": 12345}\n\n   - name: Delete Volume Access Group\n     sf_volume_access_group_manager:\n       hostname: \"{{ solidfire_hostname }}\"\n       username: \"{{ solidfire_username }}\"\n       password: \"{{ solidfire_password }}\"\n       state: absent\n       volume_access_group_id: 1\n\"\"\"\n\nRETURN = \"\"\"\n\n\n\"\"\"\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\nimport ansible.module_utils.netapp as netapp_utils\n\nHAS_SF_SDK = netapp_utils.has_sf_sdk()\n\n\nclass SolidFireVolumeAccessGroup(object):\n\n    def __init__(self):\n\n        self.argument_spec = netapp_utils.ontap_sf_host_argument_spec()\n        self.argument_spec.update(dict(\n            state=dict(required=True, choices=['present', 'absent']),\n            name=dict(required=True, type='str'),\n            volume_access_group_id=dict(required=False, type='int', default=None),\n\n            initiators=dict(required=False, type='list', default=None),\n            volumes=dict(required=False, type='list', default=None),\n            virtual_network_id=dict(required=False, type='list', default=None),\n            virtual_network_tags=dict(required=False, type='list', default=None),\n            attributes=dict(required=False, type='dict', default=None),\n        ))\n\n        self.module = AnsibleModule(\n            argument_spec=self.argument_spec,\n            supports_check_mode=True\n        )\n\n        p = self.module.params\n\n        \n        self.state = p['state']\n        self.name = p['name']\n        self.volume_access_group_id = p['volume_access_group_id']\n\n        self.initiators = p['initiators']\n        self.volumes = p['volumes']\n        self.virtual_network_id = p['virtual_network_id']\n        self.virtual_network_tags = p['virtual_network_tags']\n        self.attributes = p['attributes']\n\n        if HAS_SF_SDK is False:\n            self.module.fail_json(msg=\"Unable to import the SolidFire Python SDK\")\n        else:\n            self.sfe = netapp_utils.create_sf_connection(module=self.module)\n\n    def get_volume_access_group(self):\n        access_groups_list = self.sfe.list_volume_access_groups()\n\n        for group in access_groups_list.volume_access_groups:\n            if group.name == self.name:\n                \n                if self.volume_access_group_id is not None:\n                    if group.volume_access_group_id == self.volume_access_group_id:\n                        return group\n                else:\n                    self.volume_access_group_id = group.volume_access_group_id\n                    return group\n        return None\n\n    def create_volume_access_group(self):\n        try:\n            self.sfe.create_volume_access_group(name=self.name,\n                                                initiators=self.initiators,\n                                                volumes=self.volumes,\n                                                virtual_network_id=self.virtual_network_id,\n                                                virtual_network_tags=self.virtual_network_tags,\n                                                attributes=self.attributes)\n        except Exception as e:\n            self.module.fail_json(msg=\"Error creating volume access group %s: %s\" %\n                                  (self.name, to_native(e)), exception=traceback.format_exc())\n\n    def delete_volume_access_group(self):\n        try:\n            self.sfe.delete_volume_access_group(volume_access_group_id=self.volume_access_group_id)\n\n        except Exception as e:\n            self.module.fail_json(msg=\"Error deleting volume access group %s: %s\" %\n                                  (self.volume_access_group_id, to_native(e)),\n                                  exception=traceback.format_exc())\n\n    def update_volume_access_group(self):\n        try:\n            self.sfe.modify_volume_access_group(volume_access_group_id=self.volume_access_group_id,\n                                                virtual_network_id=self.virtual_network_id,\n                                                virtual_network_tags=self.virtual_network_tags,\n                                                name=self.name,\n                                                initiators=self.initiators,\n                                                volumes=self.volumes,\n                                                attributes=self.attributes)\n        except Exception as e:\n            self.module.fail_json(msg=\"Error updating volume access group %s: %s\" %\n                                  (self.volume_access_group_id, to_native(e)), exception=traceback.format_exc())\n\n    def apply(self):\n        changed = False\n        group_exists = False\n        update_group = False\n        group_detail = self.get_volume_access_group()\n\n        if group_detail:\n            group_exists = True\n\n            if self.state == 'absent':\n                changed = True\n\n            elif self.state == 'present':\n                \n                if self.volumes is not None and group_detail.volumes != self.volumes:\n                    update_group = True\n                    changed = True\n                elif self.initiators is not None and group_detail.initiators != self.initiators:\n                    update_group = True\n                    changed = True\n                elif self.virtual_network_id is not None or self.virtual_network_tags is not None or \\\n                        self.attributes is not None:\n                    update_group = True\n                    changed = True\n\n        else:\n            if self.state == 'present':\n                changed = True\n\n        if changed:\n            if self.module.check_mode:\n                pass\n            else:\n                if self.state == 'present':\n                    if not group_exists:\n                        self.create_volume_access_group()\n                    elif update_group:\n                        self.update_volume_access_group()\n\n                elif self.state == 'absent':\n                    self.delete_volume_access_group()\n\n        self.module.exit_json(changed=changed)\n\n\ndef main():\n    v = SolidFireVolumeAccessGroup()\n    v.apply()\n\nif __name__ == '__main__':\n    main()\n", "comments": "         name  create volume access group      sf volume access group manager         hostname      solidfire hostname            username      solidfire username            password      solidfire password            state  present        name  ansiblevolumeaccessgroup        volumes   7 8        name  modify volume access group      sf volume access group manager         hostname      solidfire hostname            username      solidfire username            password      solidfire password            state  present        volume access group id  1        name  ansiblevolumeaccessgroup renamed        attributes    volumes    1 2 3    virtual network id   12345        name  delete volume access group      sf volume access group manager         hostname      solidfire hostname            username      solidfire username            password      solidfire password            state  absent        volume access group id  1      return                   module  sf volume access group manager  short description  manage solidfire volume access groups extends documentation fragment        netapp solidfire version added   2 3  author  sumit kumar (sumit4 netapp com) description    create  destroy  update volume access groups solidfire  options       state          description            whether specified volume access group exist          required  true         choices    present    absent        name          description            name volume access group  it required unique  recommended          required  true      initiators          description            list initiators include volume access group  if unspecified  access group start without configured initiators       volumes          description            list volumes initially include volume access group  if unspecified  access group start without volumes       virtual network id          description            the id solidfire virtual network id associate volume access group       virtual network tags          description            the id vlan virtual network tag associate volume access group       attributes          description  list name value pairs json object format       volume access group id          description            the id volume access group modify delete           usr bin python    (c) 2017  netapp  inc    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    set state variables    update self volume access group id     check need update group ", "content": "#!/usr/bin/python\n\n# (c) 2017, NetApp, Inc\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n\nmodule: sf_volume_access_group_manager\n\nshort_description: Manage SolidFire Volume Access Groups\nextends_documentation_fragment:\n    - netapp.solidfire\nversion_added: '2.3'\nauthor: Sumit Kumar (sumit4@netapp.com)\ndescription:\n- Create, destroy, or update volume access groups on SolidFire\n\noptions:\n\n    state:\n        description:\n        - Whether the specified volume access group should exist or not.\n        required: true\n        choices: ['present', 'absent']\n\n    name:\n        description:\n        - Name of the volume access group. It is not required to be unique, but recommended.\n        required: true\n\n    initiators:\n        description:\n        - List of initiators to include in the volume access group. If unspecified, the access group will start out without configured initiators.\n\n    volumes:\n        description:\n        - List of volumes to initially include in the volume access group. If unspecified, the access group will start without any volumes.\n\n    virtual_network_id:\n        description:\n        - The ID of the SolidFire Virtual Network ID to associate the volume access group with.\n\n    virtual_network_tags:\n        description:\n        - The ID of the VLAN Virtual Network Tag to associate the volume access group with.\n\n    attributes:\n        description: List of Name/Value pairs in JSON object format.\n\n    volume_access_group_id:\n        description:\n        - The ID of the volume access group to modify or delete.\n\n'''\n\nEXAMPLES = \"\"\"\n   - name: Create Volume Access Group\n     sf_volume_access_group_manager:\n       hostname: \"{{ solidfire_hostname }}\"\n       username: \"{{ solidfire_username }}\"\n       password: \"{{ solidfire_password }}\"\n       state: present\n       name: AnsibleVolumeAccessGroup\n       volumes: [7,8]\n\n   - name: Modify Volume Access Group\n     sf_volume_access_group_manager:\n       hostname: \"{{ solidfire_hostname }}\"\n       username: \"{{ solidfire_username }}\"\n       password: \"{{ solidfire_password }}\"\n       state: present\n       volume_access_group_id: 1\n       name: AnsibleVolumeAccessGroup-Renamed\n       attributes: {\"volumes\": [1,2,3], \"virtual_network_id\": 12345}\n\n   - name: Delete Volume Access Group\n     sf_volume_access_group_manager:\n       hostname: \"{{ solidfire_hostname }}\"\n       username: \"{{ solidfire_username }}\"\n       password: \"{{ solidfire_password }}\"\n       state: absent\n       volume_access_group_id: 1\n\"\"\"\n\nRETURN = \"\"\"\n\n\n\"\"\"\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\nimport ansible.module_utils.netapp as netapp_utils\n\nHAS_SF_SDK = netapp_utils.has_sf_sdk()\n\n\nclass SolidFireVolumeAccessGroup(object):\n\n    def __init__(self):\n\n        self.argument_spec = netapp_utils.ontap_sf_host_argument_spec()\n        self.argument_spec.update(dict(\n            state=dict(required=True, choices=['present', 'absent']),\n            name=dict(required=True, type='str'),\n            volume_access_group_id=dict(required=False, type='int', default=None),\n\n            initiators=dict(required=False, type='list', default=None),\n            volumes=dict(required=False, type='list', default=None),\n            virtual_network_id=dict(required=False, type='list', default=None),\n            virtual_network_tags=dict(required=False, type='list', default=None),\n            attributes=dict(required=False, type='dict', default=None),\n        ))\n\n        self.module = AnsibleModule(\n            argument_spec=self.argument_spec,\n            supports_check_mode=True\n        )\n\n        p = self.module.params\n\n        # set up state variables\n        self.state = p['state']\n        self.name = p['name']\n        self.volume_access_group_id = p['volume_access_group_id']\n\n        self.initiators = p['initiators']\n        self.volumes = p['volumes']\n        self.virtual_network_id = p['virtual_network_id']\n        self.virtual_network_tags = p['virtual_network_tags']\n        self.attributes = p['attributes']\n\n        if HAS_SF_SDK is False:\n            self.module.fail_json(msg=\"Unable to import the SolidFire Python SDK\")\n        else:\n            self.sfe = netapp_utils.create_sf_connection(module=self.module)\n\n    def get_volume_access_group(self):\n        access_groups_list = self.sfe.list_volume_access_groups()\n\n        for group in access_groups_list.volume_access_groups:\n            if group.name == self.name:\n                # Update self.volume_access_group_id:\n                if self.volume_access_group_id is not None:\n                    if group.volume_access_group_id == self.volume_access_group_id:\n                        return group\n                else:\n                    self.volume_access_group_id = group.volume_access_group_id\n                    return group\n        return None\n\n    def create_volume_access_group(self):\n        try:\n            self.sfe.create_volume_access_group(name=self.name,\n                                                initiators=self.initiators,\n                                                volumes=self.volumes,\n                                                virtual_network_id=self.virtual_network_id,\n                                                virtual_network_tags=self.virtual_network_tags,\n                                                attributes=self.attributes)\n        except Exception as e:\n            self.module.fail_json(msg=\"Error creating volume access group %s: %s\" %\n                                  (self.name, to_native(e)), exception=traceback.format_exc())\n\n    def delete_volume_access_group(self):\n        try:\n            self.sfe.delete_volume_access_group(volume_access_group_id=self.volume_access_group_id)\n\n        except Exception as e:\n            self.module.fail_json(msg=\"Error deleting volume access group %s: %s\" %\n                                  (self.volume_access_group_id, to_native(e)),\n                                  exception=traceback.format_exc())\n\n    def update_volume_access_group(self):\n        try:\n            self.sfe.modify_volume_access_group(volume_access_group_id=self.volume_access_group_id,\n                                                virtual_network_id=self.virtual_network_id,\n                                                virtual_network_tags=self.virtual_network_tags,\n                                                name=self.name,\n                                                initiators=self.initiators,\n                                                volumes=self.volumes,\n                                                attributes=self.attributes)\n        except Exception as e:\n            self.module.fail_json(msg=\"Error updating volume access group %s: %s\" %\n                                  (self.volume_access_group_id, to_native(e)), exception=traceback.format_exc())\n\n    def apply(self):\n        changed = False\n        group_exists = False\n        update_group = False\n        group_detail = self.get_volume_access_group()\n\n        if group_detail:\n            group_exists = True\n\n            if self.state == 'absent':\n                changed = True\n\n            elif self.state == 'present':\n                # Check if we need to update the group\n                if self.volumes is not None and group_detail.volumes != self.volumes:\n                    update_group = True\n                    changed = True\n                elif self.initiators is not None and group_detail.initiators != self.initiators:\n                    update_group = True\n                    changed = True\n                elif self.virtual_network_id is not None or self.virtual_network_tags is not None or \\\n                        self.attributes is not None:\n                    update_group = True\n                    changed = True\n\n        else:\n            if self.state == 'present':\n                changed = True\n\n        if changed:\n            if self.module.check_mode:\n                pass\n            else:\n                if self.state == 'present':\n                    if not group_exists:\n                        self.create_volume_access_group()\n                    elif update_group:\n                        self.update_volume_access_group()\n\n                elif self.state == 'absent':\n                    self.delete_volume_access_group()\n\n        self.module.exit_json(changed=changed)\n\n\ndef main():\n    v = SolidFireVolumeAccessGroup()\n    v.apply()\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "sf_volume_access_group_manager.py", "id": "8be7fb126d06d479ac07636cbeb3b8b5", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/storage/netapp/sf_volume_access_group_manager.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}