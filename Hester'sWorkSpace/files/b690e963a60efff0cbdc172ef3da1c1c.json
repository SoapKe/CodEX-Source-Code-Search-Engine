{"author": "sympy", "code": "from sympy.unify.rewrite import rewriterule\nfrom sympy import sin, Basic, Symbol, S\nfrom sympy.abc import x, y\nfrom sympy.strategies.rl import rebuild\nfrom sympy.assumptions import Q\n\np, q = Symbol('p'), Symbol('q')\n\ndef test_simple():\n    rl = rewriterule(Basic(p, 1), Basic(p, 2), variables=(p,))\n    assert list(rl(Basic(3, 1))) == [Basic(3, 2)]\n\n    p1 = p**2\n    p2 = p**3\n    rl = rewriterule(p1, p2, variables=(p,))\n\n    expr = x**2\n    assert list(rl(expr)) == [x**3]\n\ndef test_simple_variables():\n    rl = rewriterule(Basic(x, 1), Basic(x, 2), variables=(x,))\n    assert list(rl(Basic(3, 1))) == [Basic(3, 2)]\n\n    rl = rewriterule(x**2, x**3, variables=(x,))\n    assert list(rl(y**2)) == [y**3]\n\ndef test_moderate():\n    p1 = p**2 + q**3\n    p2 = (p*q)**4\n    rl = rewriterule(p1, p2, (p, q))\n\n    expr = x**2 + y**3\n    assert list(rl(expr)) == [(x*y)**4]\n\ndef test_sincos():\n    p1 = sin(p)**2 + sin(p)**2\n    p2 = 1\n    rl = rewriterule(p1, p2, (p, q))\n\n    assert list(rl(sin(x)**2 + sin(x)**2)) == [1]\n    assert list(rl(sin(y)**2 + sin(y)**2)) == [1]\n\ndef test_Exprs_ok():\n    rl = rewriterule(p+q, q+p, (p, q))\n    next(rl(x+y)).is_commutative\n    str(next(rl(x+y)))\n\ndef test_condition_simple():\n    rl = rewriterule(x, x+1, [x], lambda x: x < 10)\n    assert not list(rl(S(15)))\n    assert rebuild(next(rl(S(5)))) == 6\n\n\ndef test_condition_multiple():\n    rl = rewriterule(x + y, x**y, [x,y], lambda x, y: x.is_integer)\n\n    a = Symbol('a')\n    b = Symbol('b', integer=True)\n    expr = a + b\n    assert list(rl(expr)) == [b**a]\n\n    c = Symbol('c', integer=True)\n    d = Symbol('d', integer=True)\n    assert set(rl(c + d)) == {c**d, d**c}\n\ndef test_assumptions():\n    rl = rewriterule(x + y, x**y, [x, y], assume=Q.integer(x))\n\n    a, b = map(Symbol, 'ab')\n    expr = a + b\n    assert list(rl(expr, Q.integer(b))) == [b**a]\n", "comments": "", "content": "from sympy.unify.rewrite import rewriterule\nfrom sympy import sin, Basic, Symbol, S\nfrom sympy.abc import x, y\nfrom sympy.strategies.rl import rebuild\nfrom sympy.assumptions import Q\n\np, q = Symbol('p'), Symbol('q')\n\ndef test_simple():\n    rl = rewriterule(Basic(p, 1), Basic(p, 2), variables=(p,))\n    assert list(rl(Basic(3, 1))) == [Basic(3, 2)]\n\n    p1 = p**2\n    p2 = p**3\n    rl = rewriterule(p1, p2, variables=(p,))\n\n    expr = x**2\n    assert list(rl(expr)) == [x**3]\n\ndef test_simple_variables():\n    rl = rewriterule(Basic(x, 1), Basic(x, 2), variables=(x,))\n    assert list(rl(Basic(3, 1))) == [Basic(3, 2)]\n\n    rl = rewriterule(x**2, x**3, variables=(x,))\n    assert list(rl(y**2)) == [y**3]\n\ndef test_moderate():\n    p1 = p**2 + q**3\n    p2 = (p*q)**4\n    rl = rewriterule(p1, p2, (p, q))\n\n    expr = x**2 + y**3\n    assert list(rl(expr)) == [(x*y)**4]\n\ndef test_sincos():\n    p1 = sin(p)**2 + sin(p)**2\n    p2 = 1\n    rl = rewriterule(p1, p2, (p, q))\n\n    assert list(rl(sin(x)**2 + sin(x)**2)) == [1]\n    assert list(rl(sin(y)**2 + sin(y)**2)) == [1]\n\ndef test_Exprs_ok():\n    rl = rewriterule(p+q, q+p, (p, q))\n    next(rl(x+y)).is_commutative\n    str(next(rl(x+y)))\n\ndef test_condition_simple():\n    rl = rewriterule(x, x+1, [x], lambda x: x < 10)\n    assert not list(rl(S(15)))\n    assert rebuild(next(rl(S(5)))) == 6\n\n\ndef test_condition_multiple():\n    rl = rewriterule(x + y, x**y, [x,y], lambda x, y: x.is_integer)\n\n    a = Symbol('a')\n    b = Symbol('b', integer=True)\n    expr = a + b\n    assert list(rl(expr)) == [b**a]\n\n    c = Symbol('c', integer=True)\n    d = Symbol('d', integer=True)\n    assert set(rl(c + d)) == {c**d, d**c}\n\ndef test_assumptions():\n    rl = rewriterule(x + y, x**y, [x, y], assume=Q.integer(x))\n\n    a, b = map(Symbol, 'ab')\n    expr = a + b\n    assert list(rl(expr, Q.integer(b))) == [b**a]\n", "description": "A computer algebra system written in pure Python", "file_name": "test_rewrite.py", "id": "b690e963a60efff0cbdc172ef3da1c1c", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/unify/tests/test_rewrite.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}