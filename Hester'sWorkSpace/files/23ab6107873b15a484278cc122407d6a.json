{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import http, _\nfrom odoo.http import request\n\n\nclass WebsitePayment(http.Controller):\n    @http.route(['/my/payment_method'], type='http', auth=\"user\", website=True)\n    def payment_method(self, **kwargs):\n        acquirers = list(request.env['payment.acquirer'].search([('website_published', '=', True), ('registration_view_template_id', '!=', False), ('payment_flow', '=', 's2s')]))\n        partner = request.env.user.partner_id\n        payment_tokens = partner.payment_token_ids\n        payment_tokens |= partner.commercial_partner_id.sudo().payment_token_ids\n        return_url = request.params.get('redirect', '/my/payment_method')\n        values = {\n            'pms': payment_tokens,\n            'acquirers': acquirers,\n            'error_message': [kwargs['error']] if kwargs.get('error') else False,\n            'return_url': return_url,\n            'bootstrap_formatting': True,\n            'partner_id': partner.id\n        }\n        return request.render(\"payment.pay_methods\", values)\n\n    @http.route(['/website_payment/pay'], type='http', auth='public', website=True)\n    def pay(self, reference='', amount=False, currency_id=None, acquirer_id=None, **kw):\n        env = request.env\n        user = env.user.sudo()\n\n        currency_id = currency_id and int(currency_id) or user.company_id.currency_id.id\n        currency = env['res.currency'].browse(currency_id)\n\n        acquirers = None\n        if acquirer_id:\n            acquirers = env['payment.acquirer'].browse(int(acquirer_id))\n        if not acquirers:\n            acquirers = env['payment.acquirer'].search([('website_published', '=', True), ('company_id', '=', user.company_id.id)])\n        \n        reference = request.env['payment.transaction'].get_next_reference(reference)\n\n        partner_id = user.partner_id.id if not user._is_public() else False\n\n        values = {\n            'reference': reference,\n            'currency': currency,\n            'amount': float(amount),\n            'return_url': '/website_payment/confirm',\n            'partner_id': partner_id,\n            'bootstrap_formatting': True,\n            'error_msg': kw.get('error_msg')\n        }\n\n        values['s2s_acquirers'] = [acq for acq in acquirers if acq.payment_flow == 's2s']\n        values['form_acquirers'] = [acq for acq in acquirers if acq.payment_flow == 'form']\n        values['pms'] = request.env['payment.token'].search([('acquirer_id', 'in', [acq.id for acq in values['s2s_acquirers']])])\n\n        return request.render('payment.pay', values)\n\n    def _get_existing_transaction(self, reference, amount, partner_id, currency_id, acquirer_id, tx_id):\n        PaymentTransaction = request.env['payment.transaction']\n        tx = None\n        if tx_id:\n            tx = PaymentTransaction.sudo().browse(tx_id)\n            if not tx.exists() or tx.reference != reference or tx.acquirer_id.id != acquirer_id:\n                tx = None\n\n        if not tx:\n            tx = PaymentTransaction.sudo().search([('reference', '=', reference), ('acquirer_id', '=', acquirer_id)])\n\n        if tx and (tx.state != 'draft' or tx.partner_id.id != partner_id or tx.amount != amount or tx.currency_id.id != currency_id):\n            tx = None\n\n        return tx\n\n    @http.route(['/website_payment/transaction/<string:reference>/<string:amount>/<string:currency_id>',\n                '/website_payment/transaction/v2/<string:amount>/<string:currency_id>/<path:reference>',], type='json', auth='public')\n    def transaction(self, acquirer_id, reference, amount, currency_id, **kwargs):\n        partner_id = request.env.user.partner_id.id if not request.env.user._is_public() else False\n        acquirer = request.env['payment.acquirer'].browse(acquirer_id)\n\n        tx = self._get_existing_transaction(reference, float(amount), partner_id,\n                int(currency_id), int(acquirer_id), request.session.get('website_payment_tx_id'))\n\n        if not tx:\n            values = {\n                'acquirer_id': int(acquirer_id),\n                'reference': reference,\n                'amount': float(amount),\n                'currency_id': currency_id,\n                'partner_id': partner_id,\n            }\n\n            tx = request.env['payment.transaction'].sudo().create(values)\n            request.session['website_payment_tx_id'] = tx.id\n\n        render_values = {\n            'return_url': '/website_payment/confirm?tx_id=%d' % tx.id,\n            'partner_id': partner_id,\n        }\n\n        return acquirer.sudo().render(reference, float(amount), int(currency_id), values=render_values)\n\n    @http.route(['/website_payment/token/<string:reference>/<string:amount>/<string:currency_id>',\n                '/website_payment/token/v2/<string:amount>/<string:currency_id>/<path:reference>'], type='http', auth='public', website=True)\n    def payment_token(self, pm_id, reference, amount, currency_id, return_url=None, **kwargs):\n        token = request.env['payment.token'].browse(int(pm_id))\n\n        if not token:\n            return request.redirect('/website_payment/pay?error_msg=%s' % _('Cannot setup the payment.'))\n\n        partner_id = request.env.user.partner_id.id if not request.env.user._is_public() else False\n\n        values = {\n            'acquirer_id': token.acquirer_id.id,\n            'reference': reference,\n            'amount': float(amount),\n            'currency_id': int(currency_id),\n            'partner_id': partner_id,\n            'payment_token_id': pm_id\n        }\n\n        tx = request.env['payment.transaction'].sudo().create(values)\n        request.session['website_payment_tx_id'] = tx.id\n\n        try:\n            res = tx.s2s_do_transaction()\n        except Exception as e:\n            return request.redirect('/website_payment/pay?error_msg=%s' % _('Payment transaction failed.'))\n\n        valid_state = 'authorized' if tx.acquirer_id.capture_manually else 'done'\n        if not res or tx.state != valid_state:\n            return request.redirect('/website_payment/pay?error_msg=%s' % _('Payment transaction failed.'))\n\n        return request.redirect(return_url if return_url else '/website_payment/confirm?tx_id=%d' % tx.id)\n\n    @http.route(['/website_payment/confirm'], type='http', auth='public', website=True)\n    def confirm(self, **kw):\n        tx_id = int(kw.get('tx_id', 0)) or request.session.pop('website_payment_tx_id', 0)\n        if tx_id:\n            tx = request.env['payment.transaction'].browse(tx_id)\n            if tx.state == 'done':\n                status = 'success'\n                message = tx.acquirer_id.done_msg\n            elif tx.state == 'pending':\n                status = 'warning'\n                message = tx.acquirer_id.pending_msg\n            else:\n                status = 'danger'\n                message = tx.acquirer_id.error_msg\n            return request.render('payment.confirm', {'tx': tx, 'status': status, 'message': message})\n        else:\n            return request.redirect('/my/home')\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     auto increment reference number suffix reference already exists ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import http, _\nfrom odoo.http import request\n\n\nclass WebsitePayment(http.Controller):\n    @http.route(['/my/payment_method'], type='http', auth=\"user\", website=True)\n    def payment_method(self, **kwargs):\n        acquirers = list(request.env['payment.acquirer'].search([('website_published', '=', True), ('registration_view_template_id', '!=', False), ('payment_flow', '=', 's2s')]))\n        partner = request.env.user.partner_id\n        payment_tokens = partner.payment_token_ids\n        payment_tokens |= partner.commercial_partner_id.sudo().payment_token_ids\n        return_url = request.params.get('redirect', '/my/payment_method')\n        values = {\n            'pms': payment_tokens,\n            'acquirers': acquirers,\n            'error_message': [kwargs['error']] if kwargs.get('error') else False,\n            'return_url': return_url,\n            'bootstrap_formatting': True,\n            'partner_id': partner.id\n        }\n        return request.render(\"payment.pay_methods\", values)\n\n    @http.route(['/website_payment/pay'], type='http', auth='public', website=True)\n    def pay(self, reference='', amount=False, currency_id=None, acquirer_id=None, **kw):\n        env = request.env\n        user = env.user.sudo()\n\n        currency_id = currency_id and int(currency_id) or user.company_id.currency_id.id\n        currency = env['res.currency'].browse(currency_id)\n\n        acquirers = None\n        if acquirer_id:\n            acquirers = env['payment.acquirer'].browse(int(acquirer_id))\n        if not acquirers:\n            acquirers = env['payment.acquirer'].search([('website_published', '=', True), ('company_id', '=', user.company_id.id)])\n        # auto-increment reference with a number suffix if the reference already exists\n        reference = request.env['payment.transaction'].get_next_reference(reference)\n\n        partner_id = user.partner_id.id if not user._is_public() else False\n\n        values = {\n            'reference': reference,\n            'currency': currency,\n            'amount': float(amount),\n            'return_url': '/website_payment/confirm',\n            'partner_id': partner_id,\n            'bootstrap_formatting': True,\n            'error_msg': kw.get('error_msg')\n        }\n\n        values['s2s_acquirers'] = [acq for acq in acquirers if acq.payment_flow == 's2s']\n        values['form_acquirers'] = [acq for acq in acquirers if acq.payment_flow == 'form']\n        values['pms'] = request.env['payment.token'].search([('acquirer_id', 'in', [acq.id for acq in values['s2s_acquirers']])])\n\n        return request.render('payment.pay', values)\n\n    def _get_existing_transaction(self, reference, amount, partner_id, currency_id, acquirer_id, tx_id):\n        PaymentTransaction = request.env['payment.transaction']\n        tx = None\n        if tx_id:\n            tx = PaymentTransaction.sudo().browse(tx_id)\n            if not tx.exists() or tx.reference != reference or tx.acquirer_id.id != acquirer_id:\n                tx = None\n\n        if not tx:\n            tx = PaymentTransaction.sudo().search([('reference', '=', reference), ('acquirer_id', '=', acquirer_id)])\n\n        if tx and (tx.state != 'draft' or tx.partner_id.id != partner_id or tx.amount != amount or tx.currency_id.id != currency_id):\n            tx = None\n\n        return tx\n\n    @http.route(['/website_payment/transaction/<string:reference>/<string:amount>/<string:currency_id>',\n                '/website_payment/transaction/v2/<string:amount>/<string:currency_id>/<path:reference>',], type='json', auth='public')\n    def transaction(self, acquirer_id, reference, amount, currency_id, **kwargs):\n        partner_id = request.env.user.partner_id.id if not request.env.user._is_public() else False\n        acquirer = request.env['payment.acquirer'].browse(acquirer_id)\n\n        tx = self._get_existing_transaction(reference, float(amount), partner_id,\n                int(currency_id), int(acquirer_id), request.session.get('website_payment_tx_id'))\n\n        if not tx:\n            values = {\n                'acquirer_id': int(acquirer_id),\n                'reference': reference,\n                'amount': float(amount),\n                'currency_id': currency_id,\n                'partner_id': partner_id,\n            }\n\n            tx = request.env['payment.transaction'].sudo().create(values)\n            request.session['website_payment_tx_id'] = tx.id\n\n        render_values = {\n            'return_url': '/website_payment/confirm?tx_id=%d' % tx.id,\n            'partner_id': partner_id,\n        }\n\n        return acquirer.sudo().render(reference, float(amount), int(currency_id), values=render_values)\n\n    @http.route(['/website_payment/token/<string:reference>/<string:amount>/<string:currency_id>',\n                '/website_payment/token/v2/<string:amount>/<string:currency_id>/<path:reference>'], type='http', auth='public', website=True)\n    def payment_token(self, pm_id, reference, amount, currency_id, return_url=None, **kwargs):\n        token = request.env['payment.token'].browse(int(pm_id))\n\n        if not token:\n            return request.redirect('/website_payment/pay?error_msg=%s' % _('Cannot setup the payment.'))\n\n        partner_id = request.env.user.partner_id.id if not request.env.user._is_public() else False\n\n        values = {\n            'acquirer_id': token.acquirer_id.id,\n            'reference': reference,\n            'amount': float(amount),\n            'currency_id': int(currency_id),\n            'partner_id': partner_id,\n            'payment_token_id': pm_id\n        }\n\n        tx = request.env['payment.transaction'].sudo().create(values)\n        request.session['website_payment_tx_id'] = tx.id\n\n        try:\n            res = tx.s2s_do_transaction()\n        except Exception as e:\n            return request.redirect('/website_payment/pay?error_msg=%s' % _('Payment transaction failed.'))\n\n        valid_state = 'authorized' if tx.acquirer_id.capture_manually else 'done'\n        if not res or tx.state != valid_state:\n            return request.redirect('/website_payment/pay?error_msg=%s' % _('Payment transaction failed.'))\n\n        return request.redirect(return_url if return_url else '/website_payment/confirm?tx_id=%d' % tx.id)\n\n    @http.route(['/website_payment/confirm'], type='http', auth='public', website=True)\n    def confirm(self, **kw):\n        tx_id = int(kw.get('tx_id', 0)) or request.session.pop('website_payment_tx_id', 0)\n        if tx_id:\n            tx = request.env['payment.transaction'].browse(tx_id)\n            if tx.state == 'done':\n                status = 'success'\n                message = tx.acquirer_id.done_msg\n            elif tx.state == 'pending':\n                status = 'warning'\n                message = tx.acquirer_id.pending_msg\n            else:\n                status = 'danger'\n                message = tx.acquirer_id.error_msg\n            return request.render('payment.confirm', {'tx': tx, 'status': status, 'message': message})\n        else:\n            return request.redirect('/my/home')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "portal.py", "id": "23ab6107873b15a484278cc122407d6a", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/payment/controllers/portal.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}