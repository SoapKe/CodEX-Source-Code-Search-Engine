{"author": "thumbor", "code": "\n# -*- coding: utf-8 -*-\n\nimport logging\nfrom os.path import join\nfrom itertools import product\n\nfrom colorama import Fore\n\n\ndebugs = [\n    '',\n    'debug'\n]\n\nmetas = [\n    'meta'\n]\n\ntrims = [\n    'trim',\n    'trim:top-left',\n    'trim:bottom-right',\n    'trim:top-left:10',\n    'trim:bottom-right:20',\n]\n\ncrops = [\n    '10x10:100x100'\n]\n\nfitins = [\n    'fit-in',\n    'adaptive-fit-in',\n    'full-fit-in',\n    'adaptive-full-fit-in'\n]\n\nsizes = [\n    '200x200',\n    '-300x100',\n    '100x-300',\n    '-100x-300',\n    'origx300',\n    '200xorig',\n    'origxorig',\n]\n\nhaligns = [\n    'left',\n    'right',\n    'center',\n]\n\nvaligns = [\n    'top',\n    'bottom',\n    'middle',\n]\n\nsmarts = [\n    'smart',\n]\n\nfilters = [\n    'filters:brightness(10)',\n    'filters:contrast(10)',\n    'filters:equalize()',\n    'filters:grayscale()',\n    'filters:rotate(90)',\n    'filters:noise(10)',\n    'filters:quality(5)',\n    'filters:redeye()',\n    'filters:rgb(10,-10,20)',\n    'filters:round_corner(20,255,255,100)',\n    'filters:sharpen(6,2.5,false)',\n    'filters:sharpen(6,2.5,true)',\n    'filters:strip_exif()',\n    'filters:strip_icc()',\n    'filters:watermark(rgba-interlaced.png,10,10,50)',\n    'filters:watermark(rgba-interlaced.png,center,center,50)',\n    'filters:watermark(rgba-interlaced.png,repeat,repeat,50)',\n    'filters:frame(rgba.png)',\n    'filters:fill(ff0000)',\n    'filters:fill(auto)',\n    'filters:fill(ff0000,true)',\n    'filters:fill(transparent)',\n    'filters:fill(transparent,true)',\n    'filters:blur(2)',\n    'filters:extract_focal()',\n    'filters:focal()',\n    'filters:focal(0x0:1x1)',\n    'filters:no_upscale()',\n    'filters:gifv()',\n    'filters:gifv(webm)',\n    'filters:gifv(mp4)',\n    'filters:max_age(600)',\n    'filters:upscale()',\n\n    \n    'filters:curve([(0,0),(255,255)],[(0,50),(16,51),(32,69),(58,85),(92,120),(128,170),(140,186),(167,225),'\n    '(192,245),(225,255),(244,255),(255,254)],[(0,0),(16,2),(32,18),(64,59),(92,116),(128,182),(167,211),(192,227)'\n    ',(224,240),(244,247),(255,252)],[(0,48),(16,50),(62,77),(92,110),(128,144),(140,153),(167,180),(192,192),'\n    '(224,217),(244,225),(255,225)])',\n]\n\noriginal_images_base = [\n    'gradient.jpg',\n    'cmyk.jpg',\n    'rgba.png',\n    'grayscale.jpg',\n    '16bit.png',\n]\n\noriginal_images_gif_webp = [\n    'gradient.webp',\n    'gradient.gif',\n    'animated.gif',\n]\n\n\nclass UrlsTester(object):\n\n    def __init__(self, fetcher, group):\n        self.failed_items = []\n        self.test_group(fetcher, group)\n\n    def report(self):\n        assert len(self.failed_items) == 0, \"Failed urls:\\n%s\" % '\\n'.join(self.failed_items)\n\n    def try_url(self, fetcher, url):\n        result = None\n        failed = False\n\n        try:\n            result = fetcher(\"/%s\" % url)\n        except Exception:\n            logging.exception('Error in %s' % url)\n            failed = True\n\n        if result is not None and result.code == 200 and not failed:\n            print(\"{0.GREEN} SUCCESS ({1}){0.RESET}\".format(Fore, url))\n            return\n\n        self.failed_items.append(url)\n        print(\"{0.RED} FAILED ({1}) - ERR({2}) {0.RESET}\".format(Fore, url, result and result.code))\n\n    def test_group(self, fetcher, group):\n        group = list(group)\n        count = len(group)\n\n        print(\"Requests count: %d\" % count)\n        for options in group:\n            joined_parts = join(*options)\n            url = \"unsafe/%s\" % joined_parts\n            self.try_url(fetcher, url)\n\n        self.report()\n\n\ndef single_dataset(fetcher, with_gif=True):\n    images = original_images_base[:]\n    if with_gif:\n        images += original_images_gif_webp\n    all_options = metas + trims + crops + fitins + sizes + haligns + valigns + smarts + filters\n    UrlsTester(fetcher, product(all_options, images))\n\n\ndef combined_dataset(fetcher, with_gif=True):\n    images = original_images_base[:]\n    if with_gif:\n        images += original_images_gif_webp\n    combined_options = product(\n        trims[:2], crops[:2], fitins[:2], sizes[:2], haligns[:2], valigns[:2], smarts[:2], filters[:2], images\n    )\n    UrlsTester(fetcher, combined_options)\n", "comments": "   usr bin python        coding  utf 8        one big filter 4 line string ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport logging\nfrom os.path import join\nfrom itertools import product\n\nfrom colorama import Fore\n\n\ndebugs = [\n    '',\n    'debug'\n]\n\nmetas = [\n    'meta'\n]\n\ntrims = [\n    'trim',\n    'trim:top-left',\n    'trim:bottom-right',\n    'trim:top-left:10',\n    'trim:bottom-right:20',\n]\n\ncrops = [\n    '10x10:100x100'\n]\n\nfitins = [\n    'fit-in',\n    'adaptive-fit-in',\n    'full-fit-in',\n    'adaptive-full-fit-in'\n]\n\nsizes = [\n    '200x200',\n    '-300x100',\n    '100x-300',\n    '-100x-300',\n    'origx300',\n    '200xorig',\n    'origxorig',\n]\n\nhaligns = [\n    'left',\n    'right',\n    'center',\n]\n\nvaligns = [\n    'top',\n    'bottom',\n    'middle',\n]\n\nsmarts = [\n    'smart',\n]\n\nfilters = [\n    'filters:brightness(10)',\n    'filters:contrast(10)',\n    'filters:equalize()',\n    'filters:grayscale()',\n    'filters:rotate(90)',\n    'filters:noise(10)',\n    'filters:quality(5)',\n    'filters:redeye()',\n    'filters:rgb(10,-10,20)',\n    'filters:round_corner(20,255,255,100)',\n    'filters:sharpen(6,2.5,false)',\n    'filters:sharpen(6,2.5,true)',\n    'filters:strip_exif()',\n    'filters:strip_icc()',\n    'filters:watermark(rgba-interlaced.png,10,10,50)',\n    'filters:watermark(rgba-interlaced.png,center,center,50)',\n    'filters:watermark(rgba-interlaced.png,repeat,repeat,50)',\n    'filters:frame(rgba.png)',\n    'filters:fill(ff0000)',\n    'filters:fill(auto)',\n    'filters:fill(ff0000,true)',\n    'filters:fill(transparent)',\n    'filters:fill(transparent,true)',\n    'filters:blur(2)',\n    'filters:extract_focal()',\n    'filters:focal()',\n    'filters:focal(0x0:1x1)',\n    'filters:no_upscale()',\n    'filters:gifv()',\n    'filters:gifv(webm)',\n    'filters:gifv(mp4)',\n    'filters:max_age(600)',\n    'filters:upscale()',\n\n    # one big filter 4-line string\n    'filters:curve([(0,0),(255,255)],[(0,50),(16,51),(32,69),(58,85),(92,120),(128,170),(140,186),(167,225),'\n    '(192,245),(225,255),(244,255),(255,254)],[(0,0),(16,2),(32,18),(64,59),(92,116),(128,182),(167,211),(192,227)'\n    ',(224,240),(244,247),(255,252)],[(0,48),(16,50),(62,77),(92,110),(128,144),(140,153),(167,180),(192,192),'\n    '(224,217),(244,225),(255,225)])',\n]\n\noriginal_images_base = [\n    'gradient.jpg',\n    'cmyk.jpg',\n    'rgba.png',\n    'grayscale.jpg',\n    '16bit.png',\n]\n\noriginal_images_gif_webp = [\n    'gradient.webp',\n    'gradient.gif',\n    'animated.gif',\n]\n\n\nclass UrlsTester(object):\n\n    def __init__(self, fetcher, group):\n        self.failed_items = []\n        self.test_group(fetcher, group)\n\n    def report(self):\n        assert len(self.failed_items) == 0, \"Failed urls:\\n%s\" % '\\n'.join(self.failed_items)\n\n    def try_url(self, fetcher, url):\n        result = None\n        failed = False\n\n        try:\n            result = fetcher(\"/%s\" % url)\n        except Exception:\n            logging.exception('Error in %s' % url)\n            failed = True\n\n        if result is not None and result.code == 200 and not failed:\n            print(\"{0.GREEN} SUCCESS ({1}){0.RESET}\".format(Fore, url))\n            return\n\n        self.failed_items.append(url)\n        print(\"{0.RED} FAILED ({1}) - ERR({2}) {0.RESET}\".format(Fore, url, result and result.code))\n\n    def test_group(self, fetcher, group):\n        group = list(group)\n        count = len(group)\n\n        print(\"Requests count: %d\" % count)\n        for options in group:\n            joined_parts = join(*options)\n            url = \"unsafe/%s\" % joined_parts\n            self.try_url(fetcher, url)\n\n        self.report()\n\n\ndef single_dataset(fetcher, with_gif=True):\n    images = original_images_base[:]\n    if with_gif:\n        images += original_images_gif_webp\n    all_options = metas + trims + crops + fitins + sizes + haligns + valigns + smarts + filters\n    UrlsTester(fetcher, product(all_options, images))\n\n\ndef combined_dataset(fetcher, with_gif=True):\n    images = original_images_base[:]\n    if with_gif:\n        images += original_images_gif_webp\n    combined_options = product(\n        trims[:2], crops[:2], fitins[:2], sizes[:2], haligns[:2], valigns[:2], smarts[:2], filters[:2], images\n    )\n    UrlsTester(fetcher, combined_options)\n", "description": "thumbor is an open-source photo thumbnail service by globo.com", "file_name": "urls_helpers.py", "id": "d8ffe9ce1567b80bd653bf35768c12ca", "language": "Python", "project_name": "thumbor", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/thumbor-thumbor/thumbor-thumbor-991f13c/integration_tests/urls_helpers.py", "save_time": "", "source": "", "update_at": "2018-03-18T09:16:11Z", "url": "https://github.com/thumbor/thumbor", "wiki": true}