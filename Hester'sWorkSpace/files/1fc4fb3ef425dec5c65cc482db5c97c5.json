{"author": "django", "code": "from django.contrib.contenttypes.fields import (\n    GenericForeignKey, GenericRelation,\n)\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\n\n\nclass Relation(models.Model):\n    pass\n\n\nclass InstanceOnlyDescriptor:\n    def __get__(self, instance, cls=None):\n        if instance is None:\n            raise AttributeError('Instance only')\n        return 1\n\n\nclass AbstractPerson(models.Model):\n    \n    data_abstract = models.CharField(max_length=10)\n    fk_abstract = models.ForeignKey(Relation, models.CASCADE, related_name='fk_abstract_rel')\n\n    \n    m2m_abstract = models.ManyToManyField(Relation, related_name='m2m_abstract_rel')\n    friends_abstract = models.ManyToManyField('self', related_name='friends_abstract', symmetrical=True)\n    following_abstract = models.ManyToManyField('self', related_name='followers_abstract', symmetrical=False)\n\n    \n    data_not_concrete_abstract = models.ForeignObject(\n        Relation,\n        on_delete=models.CASCADE,\n        from_fields=['abstract_non_concrete_id'],\n        to_fields=['id'],\n        related_name='fo_abstract_rel',\n    )\n\n    \n    content_type_abstract = models.ForeignKey(ContentType, models.CASCADE, related_name='+')\n    object_id_abstract = models.PositiveIntegerField()\n    content_object_abstract = GenericForeignKey('content_type_abstract', 'object_id_abstract')\n\n    \n    generic_relation_abstract = GenericRelation(Relation)\n\n    class Meta:\n        abstract = True\n\n    @property\n    def test_property(self):\n        return 1\n\n    test_instance_only_descriptor = InstanceOnlyDescriptor()\n\n\nclass BasePerson(AbstractPerson):\n    \n    data_base = models.CharField(max_length=10)\n    fk_base = models.ForeignKey(Relation, models.CASCADE, related_name='fk_base_rel')\n\n    \n    m2m_base = models.ManyToManyField(Relation, related_name='m2m_base_rel')\n    friends_base = models.ManyToManyField('self', related_name='friends_base', symmetrical=True)\n    following_base = models.ManyToManyField('self', related_name='followers_base', symmetrical=False)\n\n    \n    data_not_concrete_base = models.ForeignObject(\n        Relation,\n        on_delete=models.CASCADE,\n        from_fields=['base_non_concrete_id'],\n        to_fields=['id'],\n        related_name='fo_base_rel',\n    )\n\n    \n    content_type_base = models.ForeignKey(ContentType, models.CASCADE, related_name='+')\n    object_id_base = models.PositiveIntegerField()\n    content_object_base = GenericForeignKey('content_type_base', 'object_id_base')\n\n    \n    generic_relation_base = GenericRelation(Relation)\n\n\nclass Person(BasePerson):\n    \n    data_inherited = models.CharField(max_length=10)\n    fk_inherited = models.ForeignKey(Relation, models.CASCADE, related_name='fk_concrete_rel')\n\n    \n    m2m_inherited = models.ManyToManyField(Relation, related_name='m2m_concrete_rel')\n    friends_inherited = models.ManyToManyField('self', related_name='friends_concrete', symmetrical=True)\n    following_inherited = models.ManyToManyField('self', related_name='followers_concrete', symmetrical=False)\n\n    \n    data_not_concrete_inherited = models.ForeignObject(\n        Relation,\n        on_delete=models.CASCADE,\n        from_fields=['model_non_concrete_id'],\n        to_fields=['id'],\n        related_name='fo_concrete_rel',\n    )\n\n    \n    content_type_concrete = models.ForeignKey(ContentType, models.CASCADE, related_name='+')\n    object_id_concrete = models.PositiveIntegerField()\n    content_object_concrete = GenericForeignKey('content_type_concrete', 'object_id_concrete')\n\n    \n    generic_relation_concrete = GenericRelation(Relation)\n\n\nclass ProxyPerson(Person):\n    class Meta:\n        proxy = True\n\n\nclass PersonThroughProxySubclass(ProxyPerson):\n    pass\n\n\nclass Relating(models.Model):\n\n    \n    baseperson = models.ForeignKey(BasePerson, models.CASCADE, related_name='relating_baseperson')\n    baseperson_hidden = models.ForeignKey(BasePerson, models.CASCADE, related_name='+')\n\n    \n    person = models.ForeignKey(Person, models.CASCADE, related_name='relating_person')\n    person_hidden = models.ForeignKey(Person, models.CASCADE, related_name='+')\n\n    \n    proxyperson = models.ForeignKey(ProxyPerson, models.CASCADE, related_name='relating_proxyperson')\n    proxyperson_hidden = models.ForeignKey(ProxyPerson, models.CASCADE, related_name='relating_proxyperson_hidden+')\n\n    \n    basepeople = models.ManyToManyField(BasePerson, related_name='relating_basepeople')\n    basepeople_hidden = models.ManyToManyField(BasePerson, related_name='+')\n\n    \n    people = models.ManyToManyField(Person, related_name='relating_people')\n    people_hidden = models.ManyToManyField(Person, related_name='+')\n\n\n\nclass CommonAncestor(models.Model):\n    pass\n\n\nclass FirstParent(CommonAncestor):\n    first_ancestor = models.OneToOneField(CommonAncestor, models.CASCADE, primary_key=True, parent_link=True)\n\n\nclass SecondParent(CommonAncestor):\n    second_ancestor = models.OneToOneField(CommonAncestor, models.CASCADE, primary_key=True, parent_link=True)\n\n\nclass Child(FirstParent, SecondParent):\n    pass\n", "comments": "  data fields    m2m fields    virtual fields    gfk fields    gr fields    data fields    m2m fields    virtual fields    gfk fields    gr fields    data fields    m2m fields    virtual fields    gfk fields    gr fields    foreignkey baseperson    foreignkey person    foreignkey proxyperson    manytomanyfield baseperson    manytomanyfield person    parentlisttests models ", "content": "from django.contrib.contenttypes.fields import (\n    GenericForeignKey, GenericRelation,\n)\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\n\n\nclass Relation(models.Model):\n    pass\n\n\nclass InstanceOnlyDescriptor:\n    def __get__(self, instance, cls=None):\n        if instance is None:\n            raise AttributeError('Instance only')\n        return 1\n\n\nclass AbstractPerson(models.Model):\n    # DATA fields\n    data_abstract = models.CharField(max_length=10)\n    fk_abstract = models.ForeignKey(Relation, models.CASCADE, related_name='fk_abstract_rel')\n\n    # M2M fields\n    m2m_abstract = models.ManyToManyField(Relation, related_name='m2m_abstract_rel')\n    friends_abstract = models.ManyToManyField('self', related_name='friends_abstract', symmetrical=True)\n    following_abstract = models.ManyToManyField('self', related_name='followers_abstract', symmetrical=False)\n\n    # VIRTUAL fields\n    data_not_concrete_abstract = models.ForeignObject(\n        Relation,\n        on_delete=models.CASCADE,\n        from_fields=['abstract_non_concrete_id'],\n        to_fields=['id'],\n        related_name='fo_abstract_rel',\n    )\n\n    # GFK fields\n    content_type_abstract = models.ForeignKey(ContentType, models.CASCADE, related_name='+')\n    object_id_abstract = models.PositiveIntegerField()\n    content_object_abstract = GenericForeignKey('content_type_abstract', 'object_id_abstract')\n\n    # GR fields\n    generic_relation_abstract = GenericRelation(Relation)\n\n    class Meta:\n        abstract = True\n\n    @property\n    def test_property(self):\n        return 1\n\n    test_instance_only_descriptor = InstanceOnlyDescriptor()\n\n\nclass BasePerson(AbstractPerson):\n    # DATA fields\n    data_base = models.CharField(max_length=10)\n    fk_base = models.ForeignKey(Relation, models.CASCADE, related_name='fk_base_rel')\n\n    # M2M fields\n    m2m_base = models.ManyToManyField(Relation, related_name='m2m_base_rel')\n    friends_base = models.ManyToManyField('self', related_name='friends_base', symmetrical=True)\n    following_base = models.ManyToManyField('self', related_name='followers_base', symmetrical=False)\n\n    # VIRTUAL fields\n    data_not_concrete_base = models.ForeignObject(\n        Relation,\n        on_delete=models.CASCADE,\n        from_fields=['base_non_concrete_id'],\n        to_fields=['id'],\n        related_name='fo_base_rel',\n    )\n\n    # GFK fields\n    content_type_base = models.ForeignKey(ContentType, models.CASCADE, related_name='+')\n    object_id_base = models.PositiveIntegerField()\n    content_object_base = GenericForeignKey('content_type_base', 'object_id_base')\n\n    # GR fields\n    generic_relation_base = GenericRelation(Relation)\n\n\nclass Person(BasePerson):\n    # DATA fields\n    data_inherited = models.CharField(max_length=10)\n    fk_inherited = models.ForeignKey(Relation, models.CASCADE, related_name='fk_concrete_rel')\n\n    # M2M Fields\n    m2m_inherited = models.ManyToManyField(Relation, related_name='m2m_concrete_rel')\n    friends_inherited = models.ManyToManyField('self', related_name='friends_concrete', symmetrical=True)\n    following_inherited = models.ManyToManyField('self', related_name='followers_concrete', symmetrical=False)\n\n    # VIRTUAL fields\n    data_not_concrete_inherited = models.ForeignObject(\n        Relation,\n        on_delete=models.CASCADE,\n        from_fields=['model_non_concrete_id'],\n        to_fields=['id'],\n        related_name='fo_concrete_rel',\n    )\n\n    # GFK fields\n    content_type_concrete = models.ForeignKey(ContentType, models.CASCADE, related_name='+')\n    object_id_concrete = models.PositiveIntegerField()\n    content_object_concrete = GenericForeignKey('content_type_concrete', 'object_id_concrete')\n\n    # GR fields\n    generic_relation_concrete = GenericRelation(Relation)\n\n\nclass ProxyPerson(Person):\n    class Meta:\n        proxy = True\n\n\nclass PersonThroughProxySubclass(ProxyPerson):\n    pass\n\n\nclass Relating(models.Model):\n\n    # ForeignKey to BasePerson\n    baseperson = models.ForeignKey(BasePerson, models.CASCADE, related_name='relating_baseperson')\n    baseperson_hidden = models.ForeignKey(BasePerson, models.CASCADE, related_name='+')\n\n    # ForeignKey to Person\n    person = models.ForeignKey(Person, models.CASCADE, related_name='relating_person')\n    person_hidden = models.ForeignKey(Person, models.CASCADE, related_name='+')\n\n    # ForeignKey to ProxyPerson\n    proxyperson = models.ForeignKey(ProxyPerson, models.CASCADE, related_name='relating_proxyperson')\n    proxyperson_hidden = models.ForeignKey(ProxyPerson, models.CASCADE, related_name='relating_proxyperson_hidden+')\n\n    # ManyToManyField to BasePerson\n    basepeople = models.ManyToManyField(BasePerson, related_name='relating_basepeople')\n    basepeople_hidden = models.ManyToManyField(BasePerson, related_name='+')\n\n    # ManyToManyField to Person\n    people = models.ManyToManyField(Person, related_name='relating_people')\n    people_hidden = models.ManyToManyField(Person, related_name='+')\n\n\n# ParentListTests models\nclass CommonAncestor(models.Model):\n    pass\n\n\nclass FirstParent(CommonAncestor):\n    first_ancestor = models.OneToOneField(CommonAncestor, models.CASCADE, primary_key=True, parent_link=True)\n\n\nclass SecondParent(CommonAncestor):\n    second_ancestor = models.OneToOneField(CommonAncestor, models.CASCADE, primary_key=True, parent_link=True)\n\n\nclass Child(FirstParent, SecondParent):\n    pass\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "1fc4fb3ef425dec5c65cc482db5c97c5", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/model_meta/models.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}