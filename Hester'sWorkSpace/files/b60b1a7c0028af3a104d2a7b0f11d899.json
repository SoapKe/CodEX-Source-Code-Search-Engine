{"author": "donnemartin", "code": "\n\n\nimport csv as csv\nimport numpy as np\n\ncsv_file_object = csv.reader(open('train.csv', 'rb')) \t\nheader = csv_file_object.next() \t\t\t\t\t\t\ndata=[] \t\t\t\t\t\t\t\t\t\t\t\t\n\nfor row in csv_file_object: \t\t\t\t\t\t\t\n    data.append(row[0:]) \t\t\t\t\t\t\t\t\ndata = np.array(data) \t\t\t\t\t\t\t\t\t\n\n\n\n# be data[0::,0].astype(np.float) -- This means all of the rows (from start to end), in column 0\n# I have to add the .astype() command, because\n\n\n\nnumber_passengers = np.size(data[0::,1].astype(np.float))\nnumber_survived = np.sum(data[0::,1].astype(np.float))\nproportion_survivors = number_survived / number_passengers \n\n\n\nwomen_only_stats = data[0::,4] == \"female\" \t\nmen_only_stats = data[0::,4] != \"female\" \t# This finds where all the men are (note != means 'not equal')\n\n\n\n# You can test it by placing it there, and requesting column index [4], and the output should all read 'female'\n# e.g. try typing this:   data[women_only_stats,4]\nwomen_onboard = data[women_only_stats,1].astype(np.float)\nmen_onboard = data[men_only_stats,1].astype(np.float)\n\n\nproportion_women_survived = np.sum(women_onboard) / np.size(women_onboard)\nproportion_men_survived = np.sum(men_onboard) / np.size(men_onboard)\n\nprint 'Proportion of women who survived is %s' % proportion_women_survived\nprint 'Proportion of men who survived is %s' % proportion_men_survived\n\n\n\n\n# if female, then model that she survived (1) \n# if male, then model that he did not survive (0)\n\n\ntest_file = open('test.csv', 'rb')\ntest_file_object = csv.reader(test_file)\nheader = test_file_object.next()\n\n\n# Finally, loop through each row in the train file, and look in column index [3] (which is 'Sex')\n\n\npredictions_file = open(\"gendermodel.csv\", \"wb\")\npredictions_file_object = csv.writer(predictions_file)\npredictions_file_object.writerow([\"PassengerId\", \"Survived\"])\t\nfor row in test_file_object:\t\t\t\t\t\t\t\t\t\n    if row[3] == 'female':\t\t\t\t\t\t\t\t\t\t\n        predictions_file_object.writerow([row[0], \"1\"])\t\t\t\n    else:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n        predictions_file_object.writerow([row[0], \"0\"])\t\t\t\ntest_file.close()\t\t\t\t\t\t\t\t\t\t\t\t\npredictions_file.close()\n\n", "comments": "    this simple code desinged teach basic user read files python  simply find proportion males females survived make predictive model based author   astrodave date   18 september 2012 revised  28 march 2014         load csv file    skip fist line header    create variable hold data    skip row csv file     adding row data variable    then convert list array     now i array 12 columns 891 rows    i access element i want  entire first column would    data 0   0  astype(np float)    this means rows (from start end)  column 0    i add  astype() command     appending rows  python thought string   needed convert    set variables    i find stats women board     making array lists true false whether row female    this finds women    this finds men (note    means  equal )    i filter whole data  find statistics women  placing    women stats  mask  full data    use place  0    part array index      you test placing  requesting column index  4   output read  female     e g  try typing    data women stats 4     derive statistics    now i indicator women much likely survive     i done training set     now i read test file write simplistic prediction     female  model survived (1)     male  model survive (0)    first  read test csv    also open new file i write  call something descriptive    finally  loop row train file  look column index  3  (which  sex )    write passengerid  prediction     write column headers    for row test file     female  yes    write passengerid  predict 1    else male     write passengerid  predict 0     close files  ", "content": "\"\"\" This simple code is desinged to teach a basic user to read in the files in python, simply find what proportion of males and females survived and make a predictive model based on this\nAuthor : AstroDave\nDate : 18 September 2012\nRevised: 28 March 2014\n\n\"\"\"\n\n\nimport csv as csv\nimport numpy as np\n\ncsv_file_object = csv.reader(open('train.csv', 'rb')) \t# Load in the csv file\nheader = csv_file_object.next() \t\t\t\t\t\t# Skip the fist line as it is a header\ndata=[] \t\t\t\t\t\t\t\t\t\t\t\t# Create a variable to hold the data\n\nfor row in csv_file_object: \t\t\t\t\t\t\t# Skip through each row in the csv file,\n    data.append(row[0:]) \t\t\t\t\t\t\t\t# adding each row to the data variable\ndata = np.array(data) \t\t\t\t\t\t\t\t\t# Then convert from a list to an array.\n\n# Now I have an array of 12 columns and 891 rows\n# I can access any element I want, so the entire first column would\n# be data[0::,0].astype(np.float) -- This means all of the rows (from start to end), in column 0\n# I have to add the .astype() command, because\n# when appending the rows, python thought it was a string - so needed to convert\n\n# Set some variables\nnumber_passengers = np.size(data[0::,1].astype(np.float))\nnumber_survived = np.sum(data[0::,1].astype(np.float))\nproportion_survivors = number_survived / number_passengers \n\n# I can now find the stats of all the women on board,\n# by making an array that lists True/False whether each row is female\nwomen_only_stats = data[0::,4] == \"female\" \t# This finds where all the women are\nmen_only_stats = data[0::,4] != \"female\" \t# This finds where all the men are (note != means 'not equal')\n\n# I can now filter the whole data, to find statistics for just women, by just placing\n# women_only_stats as a \"mask\" on my full data -- Use it in place of the '0::' part of the array index. \n# You can test it by placing it there, and requesting column index [4], and the output should all read 'female'\n# e.g. try typing this:   data[women_only_stats,4]\nwomen_onboard = data[women_only_stats,1].astype(np.float)\nmen_onboard = data[men_only_stats,1].astype(np.float)\n\n# and derive some statistics about them\nproportion_women_survived = np.sum(women_onboard) / np.size(women_onboard)\nproportion_men_survived = np.sum(men_onboard) / np.size(men_onboard)\n\nprint 'Proportion of women who survived is %s' % proportion_women_survived\nprint 'Proportion of men who survived is %s' % proportion_men_survived\n\n# Now that I have my indicator that women were much more likely to survive,\n# I am done with the training set.\n# Now I will read in the test file and write out my simplistic prediction:\n# if female, then model that she survived (1) \n# if male, then model that he did not survive (0)\n\n# First, read in test.csv\ntest_file = open('test.csv', 'rb')\ntest_file_object = csv.reader(test_file)\nheader = test_file_object.next()\n\n# Also open the a new file so I can write to it. Call it something descriptive\n# Finally, loop through each row in the train file, and look in column index [3] (which is 'Sex')\n# Write out the PassengerId, and my prediction.\n\npredictions_file = open(\"gendermodel.csv\", \"wb\")\npredictions_file_object = csv.writer(predictions_file)\npredictions_file_object.writerow([\"PassengerId\", \"Survived\"])\t# write the column headers\nfor row in test_file_object:\t\t\t\t\t\t\t\t\t# For each row in test file,\n    if row[3] == 'female':\t\t\t\t\t\t\t\t\t\t# is it a female, if yes then\n        predictions_file_object.writerow([row[0], \"1\"])\t\t\t# write the PassengerId, and predict 1\n    else:\t\t\t\t\t\t\t\t\t\t\t\t\t\t# or else if male,\n        predictions_file_object.writerow([row[0], \"0\"])\t\t\t# write the PassengerId, and predict 0.\ntest_file.close()\t\t\t\t\t\t\t\t\t\t\t\t# Close out the files.\npredictions_file.close()\n\n", "description": "Data science Python notebooks: Deep learning (TensorFlow, Theano, Caffe, Keras), scikit-learn, Kaggle, big data (Spark, Hadoop MapReduce, HDFS), matplotlib, pandas, NumPy, SciPy, Python essentials, AWS, and various command lines.", "file_name": "gendermodel.py", "id": "b60b1a7c0028af3a104d2a7b0f11d899", "language": "Python", "project_name": "data-science-ipython-notebooks", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-data-science-ipython-notebooks/donnemartin-data-science-ipython-notebooks-a876e34/data/titanic/gendermodel.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:16:56Z", "url": "https://github.com/donnemartin/data-science-ipython-notebooks", "wiki": true}