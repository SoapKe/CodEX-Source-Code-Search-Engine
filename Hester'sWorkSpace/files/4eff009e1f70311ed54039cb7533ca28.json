{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_unquote\nfrom ..utils import int_or_none\n\n\nclass XiamiBaseIE(InfoExtractor):\n    _API_BASE_URL = 'http://www.xiami.com/song/playlist/cat/json/id'\n\n    def _download_webpage(self, *args, **kwargs):\n        webpage = super(XiamiBaseIE, self)._download_webpage(*args, **kwargs)\n        if '>Xiami is currently not available in your country.<' in webpage:\n            self.raise_geo_restricted('Xiami is currently not available in your country')\n        return webpage\n\n    def _extract_track(self, track, track_id=None):\n        track_name = track.get('songName') or track.get('name') or track['subName']\n        artist = track.get('artist') or track.get('artist_name') or track.get('singers')\n        title = '%s - %s' % (artist, track_name) if artist else track_name\n        track_url = self._decrypt(track['location'])\n\n        subtitles = {}\n        lyrics_url = track.get('lyric_url') or track.get('lyric')\n        if lyrics_url and lyrics_url.startswith('http'):\n            subtitles['origin'] = [{'url': lyrics_url}]\n\n        return {\n            'id': track.get('song_id') or track_id,\n            'url': track_url,\n            'title': title,\n            'thumbnail': track.get('pic') or track.get('album_pic'),\n            'duration': int_or_none(track.get('length')),\n            'creator': track.get('artist', '').split(';')[0],\n            'track': track_name,\n            'track_number': int_or_none(track.get('track')),\n            'album': track.get('album_name') or track.get('title'),\n            'artist': artist,\n            'subtitles': subtitles,\n        }\n\n    def _extract_tracks(self, item_id, referer, typ=None):\n        playlist = self._download_json(\n            '%s/%s%s' % (self._API_BASE_URL, item_id, '/type/%s' % typ if typ else ''),\n            item_id, headers={\n                'Referer': referer,\n            })\n        return [\n            self._extract_track(track, item_id)\n            for track in playlist['data']['trackList']]\n\n    @staticmethod\n    def _decrypt(origin):\n        n = int(origin[0])\n        origin = origin[1:]\n        short_lenth = len(origin) // n\n        long_num = len(origin) - short_lenth * n\n        l = tuple()\n        for i in range(0, n):\n            length = short_lenth\n            if i < long_num:\n                length += 1\n            l += (origin[0:length], )\n            origin = origin[length:]\n        ans = ''\n        for i in range(0, short_lenth + 1):\n            for j in range(0, n):\n                if len(l[j]) > i:\n                    ans += l[j][i]\n        return compat_urllib_parse_unquote(ans).replace('^', '0')\n\n\nclass XiamiSongIE(XiamiBaseIE):\n    IE_NAME = 'xiami:song'\n    IE_DESC = '\u867e\u7c73\u97f3\u4e50'\n    _VALID_URL = r'https?://(?:www\\.)?xiami\\.com/song/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'http://www.xiami.com/song/1775610518',\n        'md5': '521dd6bea40fd5c9c69f913c232cb57e',\n        'info_dict': {\n            'id': '1775610518',\n            'ext': 'mp3',\n            'title': 'HONNE - Woman',\n            'thumbnail': r're:http://img\\.xiami\\.net/images/album/.*\\.jpg',\n            'duration': 265,\n            'creator': 'HONNE',\n            'track': 'Woman',\n            'album': 'Woman',\n            'artist': 'HONNE',\n            'subtitles': {\n                'origin': [{\n                    'ext': 'lrc',\n                }],\n            },\n        },\n        'skip': 'Georestricted',\n    }, {\n        'url': 'http://www.xiami.com/song/1775256504',\n        'md5': '932a3abd45c6aa2b1fdbe028fcb4c4fc',\n        'info_dict': {\n            'id': '1775256504',\n            'ext': 'mp3',\n            'title': '\u6234\u8343 - \u609f\u7a7a',\n            'thumbnail': r're:http://img\\.xiami\\.net/images/album/.*\\.jpg',\n            'duration': 200,\n            'creator': '\u6234\u8343',\n            'track': '\u609f\u7a7a',\n            'album': '\u609f\u7a7a',\n            'artist': '\u6234\u8343',\n            'subtitles': {\n                'origin': [{\n                    'ext': 'lrc',\n                }],\n            },\n        },\n        'skip': 'Georestricted',\n    }, {\n        'url': 'http://www.xiami.com/song/1775953850',\n        'info_dict': {\n            'id': '1775953850',\n            'ext': 'mp3',\n            'title': '\u0414\u043e \u0421\u043a\u043e\u043d\u0443 - \u0427\u0443\u043c\u0430 \u041f\u043e\u0436\u0438\u0440\u0430\u0435\u0442 \u0417\u0435\u043c\u043b\u044e',\n            'thumbnail': r're:http://img\\.xiami\\.net/images/album/.*\\.jpg',\n            'duration': 683,\n            'creator': '\u0414\u043e \u0421\u043a\u043e\u043d\u0443',\n            'track': '\u0427\u0443\u043c\u0430 \u041f\u043e\u0436\u0438\u0440\u0430\u0435\u0442 \u0417\u0435\u043c\u043b\u044e',\n            'track_number': 7,\n            'album': '\u0410\u0434',\n            'artist': '\u0414\u043e \u0421\u043a\u043e\u043d\u0443',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.xiami.com/song/xLHGwgd07a1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        return self._extract_tracks(self._match_id(url), url)[0]\n\n\nclass XiamiPlaylistBaseIE(XiamiBaseIE):\n    def _real_extract(self, url):\n        item_id = self._match_id(url)\n        return self.playlist_result(self._extract_tracks(item_id, url, self._TYPE), item_id)\n\n\nclass XiamiAlbumIE(XiamiPlaylistBaseIE):\n    IE_NAME = 'xiami:album'\n    IE_DESC = '\u867e\u7c73\u97f3\u4e50 - \u4e13\u8f91'\n    _VALID_URL = r'https?://(?:www\\.)?xiami\\.com/album/(?P<id>[^/?\n    _TYPE = '1'\n    _TESTS = [{\n        'url': 'http://www.xiami.com/album/2100300444',\n        'info_dict': {\n            'id': '2100300444',\n        },\n        'playlist_count': 10,\n        'skip': 'Georestricted',\n    }, {\n        'url': 'http://www.xiami.com/album/512288?spm=a1z1s.6843761.1110925389.6.hhE9p9',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.xiami.com/album/URVDji2a506',\n        'only_matching': True,\n    }]\n\n\nclass XiamiArtistIE(XiamiPlaylistBaseIE):\n    IE_NAME = 'xiami:artist'\n    IE_DESC = '\u867e\u7c73\u97f3\u4e50 - \u6b4c\u624b'\n    _VALID_URL = r'https?://(?:www\\.)?xiami\\.com/artist/(?P<id>[^/?\n    _TYPE = '2'\n    _TESTS = [{\n        'url': 'http://www.xiami.com/artist/2132?spm=0.0.0.0.dKaScp',\n        'info_dict': {\n            'id': '2132',\n        },\n        'playlist_count': 20,\n        'skip': 'Georestricted',\n    }, {\n        'url': 'http://www.xiami.com/artist/bC5Tk2K6eb99',\n        'only_matching': True,\n    }]\n\n\nclass XiamiCollectionIE(XiamiPlaylistBaseIE):\n    IE_NAME = 'xiami:collection'\n    IE_DESC = '\u867e\u7c73\u97f3\u4e50 - \u7cbe\u9009\u96c6'\n    _VALID_URL = r'https?://(?:www\\.)?xiami\\.com/collect/(?P<id>[^/?\n    _TYPE = '3'\n    _TEST = {\n        'url': 'http://www.xiami.com/collect/156527391?spm=a1z1s.2943601.6856193.12.4jpBnr',\n        'info_dict': {\n            'id': '156527391',\n        },\n        'playlist_mincount': 29,\n        'skip': 'Georestricted',\n    }\n", "comments": "# coding: utf-8\n#&]+)'\n#&]+)'\n#&]+)'\n#&]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_unquote\nfrom ..utils import int_or_none\n\n\nclass XiamiBaseIE(InfoExtractor):\n    _API_BASE_URL = 'http://www.xiami.com/song/playlist/cat/json/id'\n\n    def _download_webpage(self, *args, **kwargs):\n        webpage = super(XiamiBaseIE, self)._download_webpage(*args, **kwargs)\n        if '>Xiami is currently not available in your country.<' in webpage:\n            self.raise_geo_restricted('Xiami is currently not available in your country')\n        return webpage\n\n    def _extract_track(self, track, track_id=None):\n        track_name = track.get('songName') or track.get('name') or track['subName']\n        artist = track.get('artist') or track.get('artist_name') or track.get('singers')\n        title = '%s - %s' % (artist, track_name) if artist else track_name\n        track_url = self._decrypt(track['location'])\n\n        subtitles = {}\n        lyrics_url = track.get('lyric_url') or track.get('lyric')\n        if lyrics_url and lyrics_url.startswith('http'):\n            subtitles['origin'] = [{'url': lyrics_url}]\n\n        return {\n            'id': track.get('song_id') or track_id,\n            'url': track_url,\n            'title': title,\n            'thumbnail': track.get('pic') or track.get('album_pic'),\n            'duration': int_or_none(track.get('length')),\n            'creator': track.get('artist', '').split(';')[0],\n            'track': track_name,\n            'track_number': int_or_none(track.get('track')),\n            'album': track.get('album_name') or track.get('title'),\n            'artist': artist,\n            'subtitles': subtitles,\n        }\n\n    def _extract_tracks(self, item_id, referer, typ=None):\n        playlist = self._download_json(\n            '%s/%s%s' % (self._API_BASE_URL, item_id, '/type/%s' % typ if typ else ''),\n            item_id, headers={\n                'Referer': referer,\n            })\n        return [\n            self._extract_track(track, item_id)\n            for track in playlist['data']['trackList']]\n\n    @staticmethod\n    def _decrypt(origin):\n        n = int(origin[0])\n        origin = origin[1:]\n        short_lenth = len(origin) // n\n        long_num = len(origin) - short_lenth * n\n        l = tuple()\n        for i in range(0, n):\n            length = short_lenth\n            if i < long_num:\n                length += 1\n            l += (origin[0:length], )\n            origin = origin[length:]\n        ans = ''\n        for i in range(0, short_lenth + 1):\n            for j in range(0, n):\n                if len(l[j]) > i:\n                    ans += l[j][i]\n        return compat_urllib_parse_unquote(ans).replace('^', '0')\n\n\nclass XiamiSongIE(XiamiBaseIE):\n    IE_NAME = 'xiami:song'\n    IE_DESC = '\u867e\u7c73\u97f3\u4e50'\n    _VALID_URL = r'https?://(?:www\\.)?xiami\\.com/song/(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'http://www.xiami.com/song/1775610518',\n        'md5': '521dd6bea40fd5c9c69f913c232cb57e',\n        'info_dict': {\n            'id': '1775610518',\n            'ext': 'mp3',\n            'title': 'HONNE - Woman',\n            'thumbnail': r're:http://img\\.xiami\\.net/images/album/.*\\.jpg',\n            'duration': 265,\n            'creator': 'HONNE',\n            'track': 'Woman',\n            'album': 'Woman',\n            'artist': 'HONNE',\n            'subtitles': {\n                'origin': [{\n                    'ext': 'lrc',\n                }],\n            },\n        },\n        'skip': 'Georestricted',\n    }, {\n        'url': 'http://www.xiami.com/song/1775256504',\n        'md5': '932a3abd45c6aa2b1fdbe028fcb4c4fc',\n        'info_dict': {\n            'id': '1775256504',\n            'ext': 'mp3',\n            'title': '\u6234\u8343 - \u609f\u7a7a',\n            'thumbnail': r're:http://img\\.xiami\\.net/images/album/.*\\.jpg',\n            'duration': 200,\n            'creator': '\u6234\u8343',\n            'track': '\u609f\u7a7a',\n            'album': '\u609f\u7a7a',\n            'artist': '\u6234\u8343',\n            'subtitles': {\n                'origin': [{\n                    'ext': 'lrc',\n                }],\n            },\n        },\n        'skip': 'Georestricted',\n    }, {\n        'url': 'http://www.xiami.com/song/1775953850',\n        'info_dict': {\n            'id': '1775953850',\n            'ext': 'mp3',\n            'title': '\u0414\u043e \u0421\u043a\u043e\u043d\u0443 - \u0427\u0443\u043c\u0430 \u041f\u043e\u0436\u0438\u0440\u0430\u0435\u0442 \u0417\u0435\u043c\u043b\u044e',\n            'thumbnail': r're:http://img\\.xiami\\.net/images/album/.*\\.jpg',\n            'duration': 683,\n            'creator': '\u0414\u043e \u0421\u043a\u043e\u043d\u0443',\n            'track': '\u0427\u0443\u043c\u0430 \u041f\u043e\u0436\u0438\u0440\u0430\u0435\u0442 \u0417\u0435\u043c\u043b\u044e',\n            'track_number': 7,\n            'album': '\u0410\u0434',\n            'artist': '\u0414\u043e \u0421\u043a\u043e\u043d\u0443',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.xiami.com/song/xLHGwgd07a1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        return self._extract_tracks(self._match_id(url), url)[0]\n\n\nclass XiamiPlaylistBaseIE(XiamiBaseIE):\n    def _real_extract(self, url):\n        item_id = self._match_id(url)\n        return self.playlist_result(self._extract_tracks(item_id, url, self._TYPE), item_id)\n\n\nclass XiamiAlbumIE(XiamiPlaylistBaseIE):\n    IE_NAME = 'xiami:album'\n    IE_DESC = '\u867e\u7c73\u97f3\u4e50 - \u4e13\u8f91'\n    _VALID_URL = r'https?://(?:www\\.)?xiami\\.com/album/(?P<id>[^/?#&]+)'\n    _TYPE = '1'\n    _TESTS = [{\n        'url': 'http://www.xiami.com/album/2100300444',\n        'info_dict': {\n            'id': '2100300444',\n        },\n        'playlist_count': 10,\n        'skip': 'Georestricted',\n    }, {\n        'url': 'http://www.xiami.com/album/512288?spm=a1z1s.6843761.1110925389.6.hhE9p9',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.xiami.com/album/URVDji2a506',\n        'only_matching': True,\n    }]\n\n\nclass XiamiArtistIE(XiamiPlaylistBaseIE):\n    IE_NAME = 'xiami:artist'\n    IE_DESC = '\u867e\u7c73\u97f3\u4e50 - \u6b4c\u624b'\n    _VALID_URL = r'https?://(?:www\\.)?xiami\\.com/artist/(?P<id>[^/?#&]+)'\n    _TYPE = '2'\n    _TESTS = [{\n        'url': 'http://www.xiami.com/artist/2132?spm=0.0.0.0.dKaScp',\n        'info_dict': {\n            'id': '2132',\n        },\n        'playlist_count': 20,\n        'skip': 'Georestricted',\n    }, {\n        'url': 'http://www.xiami.com/artist/bC5Tk2K6eb99',\n        'only_matching': True,\n    }]\n\n\nclass XiamiCollectionIE(XiamiPlaylistBaseIE):\n    IE_NAME = 'xiami:collection'\n    IE_DESC = '\u867e\u7c73\u97f3\u4e50 - \u7cbe\u9009\u96c6'\n    _VALID_URL = r'https?://(?:www\\.)?xiami\\.com/collect/(?P<id>[^/?#&]+)'\n    _TYPE = '3'\n    _TEST = {\n        'url': 'http://www.xiami.com/collect/156527391?spm=a1z1s.2943601.6856193.12.4jpBnr',\n        'info_dict': {\n            'id': '156527391',\n        },\n        'playlist_mincount': 29,\n        'skip': 'Georestricted',\n    }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "xiami.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/xiami.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}