{"author": "localstack", "code": "import json\nimport uuid\nimport hashlib\nfrom flask import Flask, jsonify, request, make_response\nfrom localstack.services import generic_proxy\nfrom localstack.utils.aws import aws_stack\nfrom localstack.utils.common import to_str\n\nAPP_NAME = 'ddb_streams_api'\n\napp = Flask(APP_NAME)\n\nDDB_STREAMS = {}\n\nDDB_KINESIS_STREAM_NAME_PREFIX = '__ddb_stream_'\n\nACTION_HEADER_PREFIX = 'DynamoDBStreams_20120810'\n\nSEQUENCE_NUMBER_COUNTER = 1\n\n\ndef add_dynamodb_stream(table_name, view_type='NEW_AND_OLD_IMAGES', enabled=True):\n    if enabled:\n        \n        stream_name = get_kinesis_stream_name(table_name)\n        aws_stack.create_kinesis_stream(stream_name)\n        stream = {\n            'StreamArn': aws_stack.dynamodb_stream_arn(table_name=table_name),\n            'TableName': table_name,\n            'StreamLabel': 'TODO',\n            'StreamStatus': 'ENABLED',\n            'KeySchema': [],\n            'Shards': []\n        }\n        table_arn = aws_stack.dynamodb_table_arn(table_name)\n        DDB_STREAMS[table_arn] = stream\n\n\ndef forward_events(records):\n    global SEQUENCE_NUMBER_COUNTER\n    kinesis = aws_stack.connect_to_service('kinesis')\n    for record in records:\n        if 'SequenceNumber' not in record['dynamodb']:\n            record['dynamodb']['SequenceNumber'] = str(SEQUENCE_NUMBER_COUNTER)\n            SEQUENCE_NUMBER_COUNTER += 1\n        table_arn = record['eventSourceARN']\n        stream = DDB_STREAMS.get(table_arn)\n        if stream:\n            table_name = table_name_from_stream_arn(stream['StreamArn'])\n            stream_name = get_kinesis_stream_name(table_name)\n            kinesis.put_record(StreamName=stream_name, Data=json.dumps(record), PartitionKey='TODO')\n\n\n@app.route('/', methods=['POST'])\ndef post_request():\n    action = request.headers.get('x-amz-target')\n    data = json.loads(to_str(request.data))\n    result = {}\n    kinesis = aws_stack.connect_to_service('kinesis')\n    if action == '%s.ListStreams' % ACTION_HEADER_PREFIX:\n        result = {\n            'Streams': list(DDB_STREAMS.values()),\n            'LastEvaluatedStreamArn': 'TODO'\n        }\n    elif action == '%s.DescribeStream' % ACTION_HEADER_PREFIX:\n        for stream in DDB_STREAMS.values():\n            if stream['StreamArn'] == data['StreamArn']:\n                result = {\n                    'StreamDescription': stream\n                }\n                \n                dynamodb = aws_stack.connect_to_service('dynamodb')\n                table_name = table_name_from_stream_arn(stream['StreamArn'])\n                stream_name = get_kinesis_stream_name(table_name)\n                stream_details = kinesis.describe_stream(StreamName=stream_name)\n                table_details = dynamodb.describe_table(TableName=table_name)\n                stream['KeySchema'] = table_details['Table']['KeySchema']\n\n                \n                \n                stream_shards = stream_details['StreamDescription']['Shards']\n                for shard in stream_shards:\n                    shard['ShardId'] = shard_id(stream_name, shard['ShardId'])\n                stream['Shards'] = stream_shards\n                break\n        if not result:\n            return error_response('Requested resource not found', error_type='ResourceNotFoundException')\n    elif action == '%s.GetShardIterator' % ACTION_HEADER_PREFIX:\n        \n        stream_name = stream_name_from_stream_arn(data['StreamArn'])\n        stream_shard_id = kinesis_shard_id(data['ShardId'])\n        result = kinesis.get_shard_iterator(StreamName=stream_name,\n            ShardId=stream_shard_id, ShardIteratorType=data['ShardIteratorType'])\n    elif action == '%s.GetRecords' % ACTION_HEADER_PREFIX:\n        kinesis_records = kinesis.get_records(**data)\n        result = {'Records': []}\n        for record in kinesis_records['Records']:\n            result['Records'].append(json.loads(to_str(record['Data'])))\n    else:\n        print('WARNING: Unknown operation \"%s\"' % action)\n    return jsonify(result)\n\n\n\n\n\n\ndef error_response(message=None, error_type=None, code=400):\n    if not message:\n        message = 'Unknown error'\n    if not error_type:\n        error_type = 'UnknownError'\n    if 'com.amazonaws.dynamodb' not in error_type:\n        error_type = 'com.amazonaws.dynamodb.v20120810\n    content = {\n        'message': message,\n        '__type': error_type\n    }\n    return make_response(jsonify(content), code)\n\n\ndef get_kinesis_stream_name(table_name):\n    return DDB_KINESIS_STREAM_NAME_PREFIX + table_name\n\n\ndef table_name_from_stream_arn(stream_arn):\n    return stream_arn.split(':table/')[1].split('/')[0]\n\n\ndef stream_name_from_stream_arn(stream_arn):\n    table_name = table_name_from_stream_arn(stream_arn)\n    return get_kinesis_stream_name(table_name)\n\n\ndef random_id(stream_arn, kinesis_shard_id):\n    namespace = uuid.UUID(bytes=hashlib.sha1(stream_arn.encode('utf-8')).digest()[:16])\n    return uuid.uuid5(namespace, kinesis_shard_id.encode('utf-8')).hex\n\n\ndef shard_id(stream_arn, kinesis_shard_id):\n    return '-'.join([kinesis_shard_id, random_id(stream_arn, kinesis_shard_id)])\n\n\ndef kinesis_shard_id(dynamodbstream_shard_id):\n    return dynamodbstream_shard_id.rsplit('-', 1)[0]\n\n\ndef serve(port, quiet=True):\n    generic_proxy.serve_flask_app(app=app, port=port, quiet=quiet)\n", "comments": "  create kinesis stream backend    get stream details    replace kinesis shardids ones mimic actual    dynamodbstream shardids     forward request kinesis api                         helper functions                            error type ", "content": "import json\nimport uuid\nimport hashlib\nfrom flask import Flask, jsonify, request, make_response\nfrom localstack.services import generic_proxy\nfrom localstack.utils.aws import aws_stack\nfrom localstack.utils.common import to_str\n\nAPP_NAME = 'ddb_streams_api'\n\napp = Flask(APP_NAME)\n\nDDB_STREAMS = {}\n\nDDB_KINESIS_STREAM_NAME_PREFIX = '__ddb_stream_'\n\nACTION_HEADER_PREFIX = 'DynamoDBStreams_20120810'\n\nSEQUENCE_NUMBER_COUNTER = 1\n\n\ndef add_dynamodb_stream(table_name, view_type='NEW_AND_OLD_IMAGES', enabled=True):\n    if enabled:\n        # create kinesis stream as a backend\n        stream_name = get_kinesis_stream_name(table_name)\n        aws_stack.create_kinesis_stream(stream_name)\n        stream = {\n            'StreamArn': aws_stack.dynamodb_stream_arn(table_name=table_name),\n            'TableName': table_name,\n            'StreamLabel': 'TODO',\n            'StreamStatus': 'ENABLED',\n            'KeySchema': [],\n            'Shards': []\n        }\n        table_arn = aws_stack.dynamodb_table_arn(table_name)\n        DDB_STREAMS[table_arn] = stream\n\n\ndef forward_events(records):\n    global SEQUENCE_NUMBER_COUNTER\n    kinesis = aws_stack.connect_to_service('kinesis')\n    for record in records:\n        if 'SequenceNumber' not in record['dynamodb']:\n            record['dynamodb']['SequenceNumber'] = str(SEQUENCE_NUMBER_COUNTER)\n            SEQUENCE_NUMBER_COUNTER += 1\n        table_arn = record['eventSourceARN']\n        stream = DDB_STREAMS.get(table_arn)\n        if stream:\n            table_name = table_name_from_stream_arn(stream['StreamArn'])\n            stream_name = get_kinesis_stream_name(table_name)\n            kinesis.put_record(StreamName=stream_name, Data=json.dumps(record), PartitionKey='TODO')\n\n\n@app.route('/', methods=['POST'])\ndef post_request():\n    action = request.headers.get('x-amz-target')\n    data = json.loads(to_str(request.data))\n    result = {}\n    kinesis = aws_stack.connect_to_service('kinesis')\n    if action == '%s.ListStreams' % ACTION_HEADER_PREFIX:\n        result = {\n            'Streams': list(DDB_STREAMS.values()),\n            'LastEvaluatedStreamArn': 'TODO'\n        }\n    elif action == '%s.DescribeStream' % ACTION_HEADER_PREFIX:\n        for stream in DDB_STREAMS.values():\n            if stream['StreamArn'] == data['StreamArn']:\n                result = {\n                    'StreamDescription': stream\n                }\n                # get stream details\n                dynamodb = aws_stack.connect_to_service('dynamodb')\n                table_name = table_name_from_stream_arn(stream['StreamArn'])\n                stream_name = get_kinesis_stream_name(table_name)\n                stream_details = kinesis.describe_stream(StreamName=stream_name)\n                table_details = dynamodb.describe_table(TableName=table_name)\n                stream['KeySchema'] = table_details['Table']['KeySchema']\n\n                # Replace Kinesis ShardIDs with ones that mimic actual\n                # DynamoDBStream ShardIDs.\n                stream_shards = stream_details['StreamDescription']['Shards']\n                for shard in stream_shards:\n                    shard['ShardId'] = shard_id(stream_name, shard['ShardId'])\n                stream['Shards'] = stream_shards\n                break\n        if not result:\n            return error_response('Requested resource not found', error_type='ResourceNotFoundException')\n    elif action == '%s.GetShardIterator' % ACTION_HEADER_PREFIX:\n        # forward request to Kinesis API\n        stream_name = stream_name_from_stream_arn(data['StreamArn'])\n        stream_shard_id = kinesis_shard_id(data['ShardId'])\n        result = kinesis.get_shard_iterator(StreamName=stream_name,\n            ShardId=stream_shard_id, ShardIteratorType=data['ShardIteratorType'])\n    elif action == '%s.GetRecords' % ACTION_HEADER_PREFIX:\n        kinesis_records = kinesis.get_records(**data)\n        result = {'Records': []}\n        for record in kinesis_records['Records']:\n            result['Records'].append(json.loads(to_str(record['Data'])))\n    else:\n        print('WARNING: Unknown operation \"%s\"' % action)\n    return jsonify(result)\n\n\n# -----------------\n# HELPER FUNCTIONS\n# -----------------\n\ndef error_response(message=None, error_type=None, code=400):\n    if not message:\n        message = 'Unknown error'\n    if not error_type:\n        error_type = 'UnknownError'\n    if 'com.amazonaws.dynamodb' not in error_type:\n        error_type = 'com.amazonaws.dynamodb.v20120810#%s' % error_type\n    content = {\n        'message': message,\n        '__type': error_type\n    }\n    return make_response(jsonify(content), code)\n\n\ndef get_kinesis_stream_name(table_name):\n    return DDB_KINESIS_STREAM_NAME_PREFIX + table_name\n\n\ndef table_name_from_stream_arn(stream_arn):\n    return stream_arn.split(':table/')[1].split('/')[0]\n\n\ndef stream_name_from_stream_arn(stream_arn):\n    table_name = table_name_from_stream_arn(stream_arn)\n    return get_kinesis_stream_name(table_name)\n\n\ndef random_id(stream_arn, kinesis_shard_id):\n    namespace = uuid.UUID(bytes=hashlib.sha1(stream_arn.encode('utf-8')).digest()[:16])\n    return uuid.uuid5(namespace, kinesis_shard_id.encode('utf-8')).hex\n\n\ndef shard_id(stream_arn, kinesis_shard_id):\n    return '-'.join([kinesis_shard_id, random_id(stream_arn, kinesis_shard_id)])\n\n\ndef kinesis_shard_id(dynamodbstream_shard_id):\n    return dynamodbstream_shard_id.rsplit('-', 1)[0]\n\n\ndef serve(port, quiet=True):\n    generic_proxy.serve_flask_app(app=app, port=port, quiet=quiet)\n", "description": "\ud83d\udcbb  A fully functional local AWS cloud stack. Develop and test your cloud apps offline!", "file_name": "dynamodbstreams_api.py", "id": "7cd01c8a11f6f5b773c66a364056b03d", "language": "Python", "project_name": "localstack", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/localstack-localstack/localstack-localstack-fcc848e/localstack/services/dynamodbstreams/dynamodbstreams_api.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:04:08Z", "url": "https://github.com/localstack/localstack", "wiki": true}