{"author": "pallets", "code": "\n\n    flash('You were logged out')\n    session.pop('user_id', None)\n    return redirect(url_for('public_timeline'))\n\n\n\napp.jinja_env.filters['datetimeformat'] = format_datetime\napp.jinja_env.filters['gravatar'] = gravatar_url\n", "comments": "\n    MiniTwit\n    ~~~~~~~~\n\n    A microblogging application written with Flask and sqlite3.\n\n    :copyright: \u00a9 2010 by the Pallets team.\n    :license: BSD, see LICENSE for more details.\n\"\"\"\n\nimport time\nfrom sqlite3 import dbapi2 as sqlite3\nfrom hashlib import md5\nfrom datetime import datetime\nfrom flask import Flask, request, session, url_for, redirect, \\\n     render_template, abort, g, flash, _app_ctx_stack\nfrom werkzeug import check_password_hash, generate_password_hash\n\n\n# configuration\nDATABASE = '/tmp/minitwit.db'\nPER_PAGE = 30\nDEBUG = True\nSECRET_KEY = b'_5#y2L\"F4Q8z\\n\\xec]/'\n\n# create our little application :)\napp = Flask('minitwit')\napp.config.from_object(__name__)\napp.config.from_envvar('MINITWIT_SETTINGS', silent=True)\n\n\ndef get_db():\n    \"\"\"Opens a new database connection if there is none yet for the\n    current application context.\n    \"\"\"\n    top = _app_ctx_stack.top\n    if not hasattr(top, 'sqlite_db'):\n        top.sqlite_db = sqlite3.connect(app.config['DATABASE'])\n        top.sqlite_db.row_factory = sqlite3.Row\n    return top.sqlite_db\n\n\n@app.teardown_appcontext\ndef close_database(exception):\n    \"\"\"Closes the database again at the end of the request.\"\"\"\n    top = _app_ctx_stack.top\n    if hasattr(top, 'sqlite_db'):\n        top.sqlite_db.close()\n\n\ndef init_db():\n    \"\"\"Initializes the database.\"\"\"\n    db = get_db()\n    with app.open_resource('schema.sql', mode='r') as f:\n        db.cursor().executescript(f.read())\n    db.commit()\n\n\n@app.cli.command('initdb')\ndef initdb_command():\n    \"\"\"Creates the database tables.\"\"\"\n    init_db()\n    print('Initialized the database.')\n\n\ndef query_db(query, args=(), one=False):\n    \"\"\"Queries the database and returns a list of dictionaries.\"\"\"\n    cur = get_db().execute(query, args)\n    rv = cur.fetchall()\n    return (rv[0] if rv else None) if one else rv\n\n\ndef get_user_id(username):\n    \"\"\"Convenience method to look up the id for a username.\"\"\"\n    rv = query_db('select user_id from user where username = ?',\n                  [username], one=True)\n    return rv[0] if rv else None\n\n\ndef format_datetime(timestamp):\n    \"\"\"Format a timestamp for display.\"\"\"\n    return datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d @ %H:%M')\n\n\ndef gravatar_url(email, size=80):\n    \"\"\"Return the gravatar image for the given email address.\"\"\"\n    return 'https://www.gravatar.com/avatar/%s?d=identicon&s=%d' % \\\n        (md5(email.strip().lower().encode('utf-8')).hexdigest(), size)\n\n\n@app.before_request\ndef before_request():\n    g.user = None\n    if 'user_id' in session:\n        g.user = query_db('select * from user where user_id = ?',\n                          [session['user_id']], one=True)\n\n\n@app.route('/')\ndef timeline():\n    \"\"\"Shows a users timeline or if no user is logged in it will\n    redirect to the public timeline.  This timeline shows the user's\n    messages as well as all the messages of followed users.\n    \"\"\"\n    if not g.user:\n        return redirect(url_for('public_timeline'))\n    return render_template('timeline.html', messages=query_db('''\n        select message.*, user.* from message, user\n        where message.author_id = user.user_id and (\n            user.user_id = ? or\n            user.user_id in (select whom_id from follower\n                                    where who_id = ?))\n        order by message.pub_date desc limit ?''',\n        [session['user_id'], session['user_id'], PER_PAGE]))\n\n\n@app.route('/public')\ndef public_timeline():\n    \"\"\"Displays the latest messages of all users.\"\"\"\n    return render_template('timeline.html', messages=query_db('''\n        select message.*, user.* from message, user\n        where message.author_id = user.user_id\n        order by message.pub_date desc limit ?''', [PER_PAGE]))\n\n\n@app.route('/<username>')\ndef user_timeline(username):\n    \"\"\"Display's a users tweets.\"\"\"\n    profile_user = query_db('select * from user where username = ?',\n                            [username], one=True)\n    if profile_user is None:\n        abort(404)\n    followed = False\n    if g.user:\n        followed = query_db('''select 1 from follower where\n            follower.who_id = ? and follower.whom_id = ?''',\n            [session['user_id'], profile_user['user_id']],\n            one=True) is not None\n    return render_template('timeline.html', messages=query_db('''\n            select message.*, user.* from message, user where\n            user.user_id = message.author_id and user.user_id = ?\n            order by message.pub_date desc limit ?''',\n            [profile_user['user_id'], PER_PAGE]), followed=followed,\n            profile_user=profile_user)\n\n\n@app.route('/<username>/follow')\ndef follow_user(username):\n    \"\"\"Adds the current user as follower of the given user.\"\"\"\n    if not g.user:\n        abort(401)\n    whom_id = get_user_id(username)\n    if whom_id is None:\n        abort(404)\n    db = get_db()\n    db.execute('insert into follower (who_id, whom_id) values (?, ?)',\n              [session['user_id'], whom_id])\n    db.commit()\n    flash('You are now following \"%s\"' % username)\n    return redirect(url_for('user_timeline', username=username))\n\n\n@app.route('/<username>/unfollow')\ndef unfollow_user(username):\n    \"\"\"Removes the current user as follower of the given user.\"\"\"\n    if not g.user:\n        abort(401)\n    whom_id = get_user_id(username)\n    if whom_id is None:\n        abort(404)\n    db = get_db()\n    db.execute('delete from follower where who_id=? and whom_id=?',\n              [session['user_id'], whom_id])\n    db.commit()\n    flash('You are no longer following \"%s\"' % username)\n    return redirect(url_for('user_timeline', username=username))\n\n\n@app.route('/add_message', methods=['POST'])\ndef add_message():\n    \"\"\"Registers a new message for the user.\"\"\"\n    if 'user_id' not in session:\n        abort(401)\n    if request.form['text']:\n        db = get_db()\n        db.execute('''insert into message (author_id, text, pub_date)\n          values (?, ?, ?)''', (session['user_id'], request.form['text'],\n                                int(time.time())))\n        db.commit()\n        flash('Your message was recorded')\n    return redirect(url_for('timeline'))\n\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    \"\"\"Logs the user in.\"\"\"\n    if g.user:\n        return redirect(url_for('timeline'))\n    error = None\n    if request.method == 'POST':\n        user = query_db('''select * from user where\n            username = ?''', [request.form['username']], one=True)\n        if user is None:\n            error = 'Invalid username'\n        elif not check_password_hash(user['pw_hash'],\n                                     request.form['password']):\n            error = 'Invalid password'\n        else:\n            flash('You were logged in')\n            session['user_id'] = user['user_id']\n            return redirect(url_for('timeline'))\n    return render_template('login.html', error=error)\n\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    \"\"\"Registers the user.\"\"\"\n    if g.user:\n        return redirect(url_for('timeline'))\n    error = None\n    if request.method == 'POST':\n        if not request.form['username']:\n            error = 'You have to enter a username'\n        elif not request.form['email'] or \\\n                '@' not in request.form['email']:\n            error = 'You have to enter a valid email address'\n        elif not request.form['password']:\n            error = 'You have to enter a password'\n        elif request.form['password'] != request.form['password2']:\n            error = 'The two passwords do not match'\n        elif get_user_id(request.form['username']) is not None:\n            error = 'The username is already taken'\n        else:\n            db = get_db()\n            db.execute('''insert into user (\n              username, email, pw_hash) values (?, ?, ?)''',\n              [request.form['username'], request.form['email'],\n               generate_password_hash(request.form['password'])])\n            db.commit()\n            flash('You were successfully registered and can login now')\n            return redirect(url_for('login'))\n    return render_template('register.html', error=error)\n\n\n@app.route('/logout')\ndef logout():\n    \"\"\"Logs the user out.\n.\n# -*- coding: utf-8 -*-\n# add some filters to jinja\n", "content": "# -*- coding: utf-8 -*-\n\"\"\"\n    MiniTwit\n    ~~~~~~~~\n\n    A microblogging application written with Flask and sqlite3.\n\n    :copyright: \u00a9 2010 by the Pallets team.\n    :license: BSD, see LICENSE for more details.\n\"\"\"\n\nimport time\nfrom sqlite3 import dbapi2 as sqlite3\nfrom hashlib import md5\nfrom datetime import datetime\nfrom flask import Flask, request, session, url_for, redirect, \\\n     render_template, abort, g, flash, _app_ctx_stack\nfrom werkzeug import check_password_hash, generate_password_hash\n\n\n# configuration\nDATABASE = '/tmp/minitwit.db'\nPER_PAGE = 30\nDEBUG = True\nSECRET_KEY = b'_5#y2L\"F4Q8z\\n\\xec]/'\n\n# create our little application :)\napp = Flask('minitwit')\napp.config.from_object(__name__)\napp.config.from_envvar('MINITWIT_SETTINGS', silent=True)\n\n\ndef get_db():\n    \"\"\"Opens a new database connection if there is none yet for the\n    current application context.\n    \"\"\"\n    top = _app_ctx_stack.top\n    if not hasattr(top, 'sqlite_db'):\n        top.sqlite_db = sqlite3.connect(app.config['DATABASE'])\n        top.sqlite_db.row_factory = sqlite3.Row\n    return top.sqlite_db\n\n\n@app.teardown_appcontext\ndef close_database(exception):\n    \"\"\"Closes the database again at the end of the request.\"\"\"\n    top = _app_ctx_stack.top\n    if hasattr(top, 'sqlite_db'):\n        top.sqlite_db.close()\n\n\ndef init_db():\n    \"\"\"Initializes the database.\"\"\"\n    db = get_db()\n    with app.open_resource('schema.sql', mode='r') as f:\n        db.cursor().executescript(f.read())\n    db.commit()\n\n\n@app.cli.command('initdb')\ndef initdb_command():\n    \"\"\"Creates the database tables.\"\"\"\n    init_db()\n    print('Initialized the database.')\n\n\ndef query_db(query, args=(), one=False):\n    \"\"\"Queries the database and returns a list of dictionaries.\"\"\"\n    cur = get_db().execute(query, args)\n    rv = cur.fetchall()\n    return (rv[0] if rv else None) if one else rv\n\n\ndef get_user_id(username):\n    \"\"\"Convenience method to look up the id for a username.\"\"\"\n    rv = query_db('select user_id from user where username = ?',\n                  [username], one=True)\n    return rv[0] if rv else None\n\n\ndef format_datetime(timestamp):\n    \"\"\"Format a timestamp for display.\"\"\"\n    return datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d @ %H:%M')\n\n\ndef gravatar_url(email, size=80):\n    \"\"\"Return the gravatar image for the given email address.\"\"\"\n    return 'https://www.gravatar.com/avatar/%s?d=identicon&s=%d' % \\\n        (md5(email.strip().lower().encode('utf-8')).hexdigest(), size)\n\n\n@app.before_request\ndef before_request():\n    g.user = None\n    if 'user_id' in session:\n        g.user = query_db('select * from user where user_id = ?',\n                          [session['user_id']], one=True)\n\n\n@app.route('/')\ndef timeline():\n    \"\"\"Shows a users timeline or if no user is logged in it will\n    redirect to the public timeline.  This timeline shows the user's\n    messages as well as all the messages of followed users.\n    \"\"\"\n    if not g.user:\n        return redirect(url_for('public_timeline'))\n    return render_template('timeline.html', messages=query_db('''\n        select message.*, user.* from message, user\n        where message.author_id = user.user_id and (\n            user.user_id = ? or\n            user.user_id in (select whom_id from follower\n                                    where who_id = ?))\n        order by message.pub_date desc limit ?''',\n        [session['user_id'], session['user_id'], PER_PAGE]))\n\n\n@app.route('/public')\ndef public_timeline():\n    \"\"\"Displays the latest messages of all users.\"\"\"\n    return render_template('timeline.html', messages=query_db('''\n        select message.*, user.* from message, user\n        where message.author_id = user.user_id\n        order by message.pub_date desc limit ?''', [PER_PAGE]))\n\n\n@app.route('/<username>')\ndef user_timeline(username):\n    \"\"\"Display's a users tweets.\"\"\"\n    profile_user = query_db('select * from user where username = ?',\n                            [username], one=True)\n    if profile_user is None:\n        abort(404)\n    followed = False\n    if g.user:\n        followed = query_db('''select 1 from follower where\n            follower.who_id = ? and follower.whom_id = ?''',\n            [session['user_id'], profile_user['user_id']],\n            one=True) is not None\n    return render_template('timeline.html', messages=query_db('''\n            select message.*, user.* from message, user where\n            user.user_id = message.author_id and user.user_id = ?\n            order by message.pub_date desc limit ?''',\n            [profile_user['user_id'], PER_PAGE]), followed=followed,\n            profile_user=profile_user)\n\n\n@app.route('/<username>/follow')\ndef follow_user(username):\n    \"\"\"Adds the current user as follower of the given user.\"\"\"\n    if not g.user:\n        abort(401)\n    whom_id = get_user_id(username)\n    if whom_id is None:\n        abort(404)\n    db = get_db()\n    db.execute('insert into follower (who_id, whom_id) values (?, ?)',\n              [session['user_id'], whom_id])\n    db.commit()\n    flash('You are now following \"%s\"' % username)\n    return redirect(url_for('user_timeline', username=username))\n\n\n@app.route('/<username>/unfollow')\ndef unfollow_user(username):\n    \"\"\"Removes the current user as follower of the given user.\"\"\"\n    if not g.user:\n        abort(401)\n    whom_id = get_user_id(username)\n    if whom_id is None:\n        abort(404)\n    db = get_db()\n    db.execute('delete from follower where who_id=? and whom_id=?',\n              [session['user_id'], whom_id])\n    db.commit()\n    flash('You are no longer following \"%s\"' % username)\n    return redirect(url_for('user_timeline', username=username))\n\n\n@app.route('/add_message', methods=['POST'])\ndef add_message():\n    \"\"\"Registers a new message for the user.\"\"\"\n    if 'user_id' not in session:\n        abort(401)\n    if request.form['text']:\n        db = get_db()\n        db.execute('''insert into message (author_id, text, pub_date)\n          values (?, ?, ?)''', (session['user_id'], request.form['text'],\n                                int(time.time())))\n        db.commit()\n        flash('Your message was recorded')\n    return redirect(url_for('timeline'))\n\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    \"\"\"Logs the user in.\"\"\"\n    if g.user:\n        return redirect(url_for('timeline'))\n    error = None\n    if request.method == 'POST':\n        user = query_db('''select * from user where\n            username = ?''', [request.form['username']], one=True)\n        if user is None:\n            error = 'Invalid username'\n        elif not check_password_hash(user['pw_hash'],\n                                     request.form['password']):\n            error = 'Invalid password'\n        else:\n            flash('You were logged in')\n            session['user_id'] = user['user_id']\n            return redirect(url_for('timeline'))\n    return render_template('login.html', error=error)\n\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    \"\"\"Registers the user.\"\"\"\n    if g.user:\n        return redirect(url_for('timeline'))\n    error = None\n    if request.method == 'POST':\n        if not request.form['username']:\n            error = 'You have to enter a username'\n        elif not request.form['email'] or \\\n                '@' not in request.form['email']:\n            error = 'You have to enter a valid email address'\n        elif not request.form['password']:\n            error = 'You have to enter a password'\n        elif request.form['password'] != request.form['password2']:\n            error = 'The two passwords do not match'\n        elif get_user_id(request.form['username']) is not None:\n            error = 'The username is already taken'\n        else:\n            db = get_db()\n            db.execute('''insert into user (\n              username, email, pw_hash) values (?, ?, ?)''',\n              [request.form['username'], request.form['email'],\n               generate_password_hash(request.form['password'])])\n            db.commit()\n            flash('You were successfully registered and can login now')\n            return redirect(url_for('login'))\n    return render_template('register.html', error=error)\n\n\n@app.route('/logout')\ndef logout():\n    \"\"\"Logs the user out.\"\"\"\n    flash('You were logged out')\n    session.pop('user_id', None)\n    return redirect(url_for('public_timeline'))\n\n\n# add some filters to jinja\napp.jinja_env.filters['datetimeformat'] = format_datetime\napp.jinja_env.filters['gravatar'] = gravatar_url\n", "description": "The Python micro framework for building web applications.", "file_name": "minitwit.py", "language": "Python", "project_name": "flask", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/pallets_flask/pallets-flask-a2ea186/examples/minitwit/minitwit/minitwit.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:52:03Z", "url": "https://github.com/pallets/flask", "wiki": false}