{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    qualities,\n    unified_strdate,\n)\n\n\nclass FirstTVIE(InfoExtractor):\n    IE_NAME = '1tv'\n    IE_DESC = '\u041f\u0435\u0440\u0432\u044b\u0439 \u043a\u0430\u043d\u0430\u043b'\n    _VALID_URL = r'https?://(?:www\\.)?1tv\\.ru/(?:[^/]+/)+(?P<id>[^/?\n\n    _TESTS = [{\n        \n        'url': 'http://www.1tv.ru/shows/naedine-so-vsemi/vypuski/gost-lyudmila-senchina-naedine-so-vsemi-vypusk-ot-12-02-2015',\n        'md5': 'a1b6b60d530ebcf8daacf4565762bbaf',\n        'info_dict': {\n            'id': '40049',\n            'ext': 'mp4',\n            'title': '\u0413\u043e\u0441\u0442\u044c \u041b\u044e\u0434\u043c\u0438\u043b\u0430 \u0421\u0435\u043d\u0447\u0438\u043d\u0430. \u041d\u0430\u0435\u0434\u0438\u043d\u0435 \u0441\u043e\u00a0\u0432\u0441\u0435\u043c\u0438. \u0412\u044b\u043f\u0443\u0441\u043a \u043e\u0442\u00a012.02.2015',\n            'thumbnail': r're:^https?://.*\\.(?:jpg|JPG)$',\n            'upload_date': '20150212',\n            'duration': 2694,\n        },\n    }, {\n        \n        'url': 'http://www.1tv.ru/shows/dobroe-utro/pro-zdorove/vesennyaya-allergiya-dobroe-utro-fragment-vypuska-ot-07042016',\n        'info_dict': {\n            'id': '364746',\n            'ext': 'mp4',\n            'title': '\u0412\u0435\u0441\u0435\u043d\u043d\u044f\u044f \u0430\u043b\u043b\u0435\u0440\u0433\u0438\u044f. \u0414\u043e\u0431\u0440\u043e\u0435 \u0443\u0442\u0440\u043e. \u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043e\u0442\u00a007.04.2016',\n            'thumbnail': r're:^https?://.*\\.(?:jpg|JPG)$',\n            'upload_date': '20160407',\n            'duration': 179,\n            'formats': 'mincount:3',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.1tv.ru/news/issue/2016-12-01/14:00',\n        'info_dict': {\n            'id': '14:00',\n            'title': '\u0412\u044b\u043f\u0443\u0441\u043a \u043d\u043e\u0432\u043e\u0441\u0442\u0435\u0439 \u0432 14:00   1 \u0434\u0435\u043a\u0430\u0431\u0440\u044f 2016 \u0433\u043e\u0434\u0430. \u041d\u043e\u0432\u043e\u0441\u0442\u0438. \u041f\u0435\u0440\u0432\u044b\u0439 \u043a\u0430\u043d\u0430\u043b',\n            'description': 'md5:2e921b948f8c1ff93901da78ebdb1dfd',\n        },\n        'playlist_count': 13,\n    }, {\n        'url': 'http://www.1tv.ru/shows/tochvtoch-supersezon/vystupleniya/evgeniy-dyatlov-vladimir-vysockiy-koni-priveredlivye-toch-v-toch-supersezon-fragment-vypuska-ot-06-11-2016',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n        playlist_url = compat_urlparse.urljoin(url, self._search_regex(\n            r'data-playlist-url=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1',\n            webpage, 'playlist url', group='url'))\n\n        parsed_url = compat_urlparse.urlparse(playlist_url)\n        qs = compat_urlparse.parse_qs(parsed_url.query)\n        item_ids = qs.get('videos_ids[]') or qs.get('news_ids[]')\n\n        items = self._download_json(playlist_url, display_id)\n\n        if item_ids:\n            items = [\n                item for item in items\n                if item.get('uid') and compat_str(item['uid']) in item_ids]\n        else:\n            items = [items[0]]\n\n        entries = []\n        QUALITIES = ('ld', 'sd', 'hd', )\n\n        for item in items:\n            title = item['title']\n            quality = qualities(QUALITIES)\n            formats = []\n            path = None\n            for f in item.get('mbr', []):\n                src = f.get('src')\n                if not src or not isinstance(src, compat_str):\n                    continue\n                tbr = int_or_none(self._search_regex(\n                    r'_(\\d{3,})\\.mp4', src, 'tbr', default=None))\n                if not path:\n                    path = self._search_regex(\n                        r'//[^/]+/(.+?)_\\d+\\.mp4', src,\n                        'm3u8 path', default=None)\n                formats.append({\n                    'url': src,\n                    'format_id': f.get('name'),\n                    'tbr': tbr,\n                    'source_preference': quality(f.get('name')),\n                    \n                    'preference': -1,\n                })\n            \n            \n            \n            \n            \n            if not path and len(formats) == 1:\n                path = self._search_regex(\n                    r'//[^/]+/(.+?$)', formats[0]['url'],\n                    'm3u8 path', default=None)\n            if path:\n                if len(formats) == 1:\n                    m3u8_path = ','\n                else:\n                    tbrs = [compat_str(t) for t in sorted(f['tbr'] for f in formats)]\n                    m3u8_path = '_,%s,%s' % (','.join(tbrs), '.mp4')\n                formats.extend(self._extract_m3u8_formats(\n                    'http://balancer-vod.1tv.ru/%s%s.urlset/master.m3u8'\n                    % (path, m3u8_path),\n                    display_id, 'mp4',\n                    entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n            self._sort_formats(formats)\n\n            thumbnail = item.get('poster') or self._og_search_thumbnail(webpage)\n            duration = int_or_none(item.get('duration') or self._html_search_meta(\n                'video:duration', webpage, 'video duration', fatal=False))\n            upload_date = unified_strdate(self._html_search_meta(\n                'ya:ovs:upload_date', webpage, 'upload date', default=None))\n\n            entries.append({\n                'id': compat_str(item.get('id') or item['uid']),\n                'thumbnail': thumbnail,\n                'title': title,\n                'upload_date': upload_date,\n                'duration': int_or_none(duration),\n                'formats': formats\n            })\n\n        title = self._html_search_regex(\n            (r'<div class=\"tv_translation\">\\s*<h1><a href=\"[^\"]+\">([^<]*)</a>',\n             r\"'title'\\s*:\\s*'([^']+)'\"),\n            webpage, 'title', default=None) or self._og_search_title(\n            webpage, default=None)\n        description = self._html_search_regex(\n            r'<div class=\"descr\">\\s*<div>&nbsp;</div>\\s*<p>([^<]*)</p></div>',\n            webpage, 'description', default=None) or self._html_search_meta(\n            'description', webpage, 'description', default=None)\n\n        return self.playlist_result(entries, display_id, title, description)\n", "comments": "# coding: utf-8\n#]+)'\n# single format\n# multiple formats\n# quality metadata of http formats may be incorrect\n# m3u8 URL format is reverse engineered from [1] (search for\n# master.m3u8). dashEdges (that is currently balancer-vod.1tv.ru)\n# is taken from [2].\n# 1. http://static.1tv.ru/player/eump1tv-current/eump-1tv.all.min.js?rnd=9097422834:formatted\n# 2. http://static.1tv.ru/player/eump1tv-config/config-main.js?rnd=9097422834\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    qualities,\n    unified_strdate,\n)\n\n\nclass FirstTVIE(InfoExtractor):\n    IE_NAME = '1tv'\n    IE_DESC = '\u041f\u0435\u0440\u0432\u044b\u0439 \u043a\u0430\u043d\u0430\u043b'\n    _VALID_URL = r'https?://(?:www\\.)?1tv\\.ru/(?:[^/]+/)+(?P<id>[^/?#]+)'\n\n    _TESTS = [{\n        # single format\n        'url': 'http://www.1tv.ru/shows/naedine-so-vsemi/vypuski/gost-lyudmila-senchina-naedine-so-vsemi-vypusk-ot-12-02-2015',\n        'md5': 'a1b6b60d530ebcf8daacf4565762bbaf',\n        'info_dict': {\n            'id': '40049',\n            'ext': 'mp4',\n            'title': '\u0413\u043e\u0441\u0442\u044c \u041b\u044e\u0434\u043c\u0438\u043b\u0430 \u0421\u0435\u043d\u0447\u0438\u043d\u0430. \u041d\u0430\u0435\u0434\u0438\u043d\u0435 \u0441\u043e\u00a0\u0432\u0441\u0435\u043c\u0438. \u0412\u044b\u043f\u0443\u0441\u043a \u043e\u0442\u00a012.02.2015',\n            'thumbnail': r're:^https?://.*\\.(?:jpg|JPG)$',\n            'upload_date': '20150212',\n            'duration': 2694,\n        },\n    }, {\n        # multiple formats\n        'url': 'http://www.1tv.ru/shows/dobroe-utro/pro-zdorove/vesennyaya-allergiya-dobroe-utro-fragment-vypuska-ot-07042016',\n        'info_dict': {\n            'id': '364746',\n            'ext': 'mp4',\n            'title': '\u0412\u0435\u0441\u0435\u043d\u043d\u044f\u044f \u0430\u043b\u043b\u0435\u0440\u0433\u0438\u044f. \u0414\u043e\u0431\u0440\u043e\u0435 \u0443\u0442\u0440\u043e. \u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043e\u0442\u00a007.04.2016',\n            'thumbnail': r're:^https?://.*\\.(?:jpg|JPG)$',\n            'upload_date': '20160407',\n            'duration': 179,\n            'formats': 'mincount:3',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.1tv.ru/news/issue/2016-12-01/14:00',\n        'info_dict': {\n            'id': '14:00',\n            'title': '\u0412\u044b\u043f\u0443\u0441\u043a \u043d\u043e\u0432\u043e\u0441\u0442\u0435\u0439 \u0432 14:00   1 \u0434\u0435\u043a\u0430\u0431\u0440\u044f 2016 \u0433\u043e\u0434\u0430. \u041d\u043e\u0432\u043e\u0441\u0442\u0438. \u041f\u0435\u0440\u0432\u044b\u0439 \u043a\u0430\u043d\u0430\u043b',\n            'description': 'md5:2e921b948f8c1ff93901da78ebdb1dfd',\n        },\n        'playlist_count': 13,\n    }, {\n        'url': 'http://www.1tv.ru/shows/tochvtoch-supersezon/vystupleniya/evgeniy-dyatlov-vladimir-vysockiy-koni-priveredlivye-toch-v-toch-supersezon-fragment-vypuska-ot-06-11-2016',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n        playlist_url = compat_urlparse.urljoin(url, self._search_regex(\n            r'data-playlist-url=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1',\n            webpage, 'playlist url', group='url'))\n\n        parsed_url = compat_urlparse.urlparse(playlist_url)\n        qs = compat_urlparse.parse_qs(parsed_url.query)\n        item_ids = qs.get('videos_ids[]') or qs.get('news_ids[]')\n\n        items = self._download_json(playlist_url, display_id)\n\n        if item_ids:\n            items = [\n                item for item in items\n                if item.get('uid') and compat_str(item['uid']) in item_ids]\n        else:\n            items = [items[0]]\n\n        entries = []\n        QUALITIES = ('ld', 'sd', 'hd', )\n\n        for item in items:\n            title = item['title']\n            quality = qualities(QUALITIES)\n            formats = []\n            path = None\n            for f in item.get('mbr', []):\n                src = f.get('src')\n                if not src or not isinstance(src, compat_str):\n                    continue\n                tbr = int_or_none(self._search_regex(\n                    r'_(\\d{3,})\\.mp4', src, 'tbr', default=None))\n                if not path:\n                    path = self._search_regex(\n                        r'//[^/]+/(.+?)_\\d+\\.mp4', src,\n                        'm3u8 path', default=None)\n                formats.append({\n                    'url': src,\n                    'format_id': f.get('name'),\n                    'tbr': tbr,\n                    'source_preference': quality(f.get('name')),\n                    # quality metadata of http formats may be incorrect\n                    'preference': -1,\n                })\n            # m3u8 URL format is reverse engineered from [1] (search for\n            # master.m3u8). dashEdges (that is currently balancer-vod.1tv.ru)\n            # is taken from [2].\n            # 1. http://static.1tv.ru/player/eump1tv-current/eump-1tv.all.min.js?rnd=9097422834:formatted\n            # 2. http://static.1tv.ru/player/eump1tv-config/config-main.js?rnd=9097422834\n            if not path and len(formats) == 1:\n                path = self._search_regex(\n                    r'//[^/]+/(.+?$)', formats[0]['url'],\n                    'm3u8 path', default=None)\n            if path:\n                if len(formats) == 1:\n                    m3u8_path = ','\n                else:\n                    tbrs = [compat_str(t) for t in sorted(f['tbr'] for f in formats)]\n                    m3u8_path = '_,%s,%s' % (','.join(tbrs), '.mp4')\n                formats.extend(self._extract_m3u8_formats(\n                    'http://balancer-vod.1tv.ru/%s%s.urlset/master.m3u8'\n                    % (path, m3u8_path),\n                    display_id, 'mp4',\n                    entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n            self._sort_formats(formats)\n\n            thumbnail = item.get('poster') or self._og_search_thumbnail(webpage)\n            duration = int_or_none(item.get('duration') or self._html_search_meta(\n                'video:duration', webpage, 'video duration', fatal=False))\n            upload_date = unified_strdate(self._html_search_meta(\n                'ya:ovs:upload_date', webpage, 'upload date', default=None))\n\n            entries.append({\n                'id': compat_str(item.get('id') or item['uid']),\n                'thumbnail': thumbnail,\n                'title': title,\n                'upload_date': upload_date,\n                'duration': int_or_none(duration),\n                'formats': formats\n            })\n\n        title = self._html_search_regex(\n            (r'<div class=\"tv_translation\">\\s*<h1><a href=\"[^\"]+\">([^<]*)</a>',\n             r\"'title'\\s*:\\s*'([^']+)'\"),\n            webpage, 'title', default=None) or self._og_search_title(\n            webpage, default=None)\n        description = self._html_search_regex(\n            r'<div class=\"descr\">\\s*<div>&nbsp;</div>\\s*<p>([^<]*)</p></div>',\n            webpage, 'description', default=None) or self._html_search_meta(\n            'description', webpage, 'description', default=None)\n\n        return self.playlist_result(entries, display_id, title, description)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "firsttv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/firsttv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}