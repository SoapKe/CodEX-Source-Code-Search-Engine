{"author": "tgalal", "code": "from .protocoltreenode import ProtocolTreeNode\nimport unittest, time\nclass ProtocolEntity(object):\n    __ID_GEN = 0\n\n    def __init__(self, tag):\n        self.tag = tag\n\n    def getTag(self):\n        return self.tag\n\n    def isType(self,  typ):\n        return self.tag == typ\n\n    def _createProtocolTreeNode(self, attributes, children = None, data = None):\n        return ProtocolTreeNode(self.getTag(), attributes, children, data)\n\n\n    def _getCurrentTimestamp(self):\n        return int(time.time())\n\n    def _generateId(self, short = False):\n        ProtocolEntity.__ID_GEN += 1\n        return str(ProtocolEntity.__ID_GEN) if short else str(int(time.time())) + \"-\" + str(ProtocolEntity.__ID_GEN)\n\n\n    def toProtocolTreeNode(self):\n        pass\n\n    @staticmethod\n    def fromProtocolTreeNode(self, protocolTreeNode):\n        pass\n\n\nclass ProtocolEntityTest(object):\n    def setUp(self):\n        self.ProtocolEntity = None\n        self.node = None\n\n    # def assertEqual(self, entity, node):\n    #     raise AssertionError(\"Should never execute that\")\n\n    def test_generation(self):\n        if self.ProtocolEntity is None:\n            raise ValueError(\"Test case not setup!\")\n        entity = self.ProtocolEntity.fromProtocolTreeNode(self.node)\n        try:\n            self.assertEqual(entity.toProtocolTreeNode(), self.node)\n        except:\n            print(entity.toProtocolTreeNode())\n            print(\"\\nNOTEQ\\n\")\n            print(self.node)\n            raise\n\n", "comments": "  def assertequal(self  entity  node)         raise assertionerror( should never execute ) ", "content": "from .protocoltreenode import ProtocolTreeNode\nimport unittest, time\nclass ProtocolEntity(object):\n    __ID_GEN = 0\n\n    def __init__(self, tag):\n        self.tag = tag\n\n    def getTag(self):\n        return self.tag\n\n    def isType(self,  typ):\n        return self.tag == typ\n\n    def _createProtocolTreeNode(self, attributes, children = None, data = None):\n        return ProtocolTreeNode(self.getTag(), attributes, children, data)\n\n\n    def _getCurrentTimestamp(self):\n        return int(time.time())\n\n    def _generateId(self, short = False):\n        ProtocolEntity.__ID_GEN += 1\n        return str(ProtocolEntity.__ID_GEN) if short else str(int(time.time())) + \"-\" + str(ProtocolEntity.__ID_GEN)\n\n\n    def toProtocolTreeNode(self):\n        pass\n\n    @staticmethod\n    def fromProtocolTreeNode(self, protocolTreeNode):\n        pass\n\n\nclass ProtocolEntityTest(object):\n    def setUp(self):\n        self.ProtocolEntity = None\n        self.node = None\n\n    # def assertEqual(self, entity, node):\n    #     raise AssertionError(\"Should never execute that\")\n\n    def test_generation(self):\n        if self.ProtocolEntity is None:\n            raise ValueError(\"Test case not setup!\")\n        entity = self.ProtocolEntity.fromProtocolTreeNode(self.node)\n        try:\n            self.assertEqual(entity.toProtocolTreeNode(), self.node)\n        except:\n            print(entity.toProtocolTreeNode())\n            print(\"\\nNOTEQ\\n\")\n            print(self.node)\n            raise\n\n", "description": "The python WhatsApp library", "file_name": "protocolentity.py", "id": "223b8d16047683b08ca62c8c6573559f", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/structs/protocolentity.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}