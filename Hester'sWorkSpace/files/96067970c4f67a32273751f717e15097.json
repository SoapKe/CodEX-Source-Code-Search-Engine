{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, models\nfrom odoo.tools import pycompat\n\n\nclass Board(models.AbstractModel):\n    _name = 'board.board'\n    _description = \"Board\"\n    _auto = False\n\n    @api.model\n    def create(self, vals):\n        return self\n\n    @api.model\n    def fields_view_get(self, view_id=None, view_type='form', toolbar=False, submenu=False):\n        \n\n        res = super(Board, self).fields_view_get(view_id=view_id, view_type=view_type, toolbar=toolbar, submenu=submenu)\n\n        custom_view = self.env['ir.ui.view.custom'].search([('user_id', '=', self.env.uid), ('ref_id', '=', view_id)], limit=1)\n        if custom_view:\n            res.update({'custom_view_id': custom_view.id,\n                        'arch': custom_view.arch})\n        res.update({\n            'arch': self._arch_preprocessing(res['arch']),\n            'toolbar': {'print': [], 'action': [], 'relate': []}\n        })\n        return res\n\n    @api.model\n    def _arch_preprocessing(self, arch):\n        from lxml import etree\n\n        def remove_unauthorized_children(node):\n            for child in node.iterchildren():\n                if child.tag == 'action' and child.get('invisible'):\n                    node.remove(child)\n                else:\n                    remove_unauthorized_children(child)\n            return node\n\n        archnode = etree.fromstring(arch)\n        return etree.tostring(remove_unauthorized_children(archnode), pretty_print=True, encoding='unicode')\n", "comments": "            overrides orm field view get           return  dictionary fields  arch toolbar                     coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, models\nfrom odoo.tools import pycompat\n\n\nclass Board(models.AbstractModel):\n    _name = 'board.board'\n    _description = \"Board\"\n    _auto = False\n\n    @api.model\n    def create(self, vals):\n        return self\n\n    @api.model\n    def fields_view_get(self, view_id=None, view_type='form', toolbar=False, submenu=False):\n        \"\"\"\n        Overrides orm field_view_get.\n        @return: Dictionary of Fields, arch and toolbar.\n        \"\"\"\n\n        res = super(Board, self).fields_view_get(view_id=view_id, view_type=view_type, toolbar=toolbar, submenu=submenu)\n\n        custom_view = self.env['ir.ui.view.custom'].search([('user_id', '=', self.env.uid), ('ref_id', '=', view_id)], limit=1)\n        if custom_view:\n            res.update({'custom_view_id': custom_view.id,\n                        'arch': custom_view.arch})\n        res.update({\n            'arch': self._arch_preprocessing(res['arch']),\n            'toolbar': {'print': [], 'action': [], 'relate': []}\n        })\n        return res\n\n    @api.model\n    def _arch_preprocessing(self, arch):\n        from lxml import etree\n\n        def remove_unauthorized_children(node):\n            for child in node.iterchildren():\n                if child.tag == 'action' and child.get('invisible'):\n                    node.remove(child)\n                else:\n                    remove_unauthorized_children(child)\n            return node\n\n        archnode = etree.fromstring(arch)\n        return etree.tostring(remove_unauthorized_children(archnode), pretty_print=True, encoding='unicode')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "board.py", "id": "96067970c4f67a32273751f717e15097", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/board/models/board.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}