{"author": "thumbor", "code": "\n# -*- coding: utf-8 -*-\n\n\n\n\n\n\n# Copyright (c) 2011 globo.com thumbor@googlegroups.com\n\nfrom os.path import abspath, join, dirname, exists\nfrom shutil import rmtree\n\nfrom preggy import expect\n\nfrom thumbor.config import Config\nfrom thumbor.context import Context\nfrom thumbor.importer import Importer\nfrom tests.base import TestCase\n\n\nclass BlacklistHandlerTestCase(TestCase):\n    def get_context(self):\n        file_storage_root_path = '/tmp/thumbor/storage'\n        if exists(file_storage_root_path):\n            rmtree(file_storage_root_path)\n\n        cfg = Config()\n        cfg.USE_BLACKLIST = True\n        cfg.LOADER = \"thumbor.loaders.file_loader\"\n        cfg.FILE_LOADER_ROOT_PATH = abspath(join(dirname(__file__), '../fixtures/images/'))\n        cfg.STORAGE = 'thumbor.storages.file_storage'\n        cfg.FILE_STORAGE_ROOT_PATH = file_storage_root_path\n        importer = Importer(cfg)\n        importer.import_modules()\n        return Context(None, cfg, importer)\n\n    def test_can_get_blacklist(self):\n        response = self.fetch('/blacklist')\n        expect(response.code).to_equal(200)\n        expect(response.body).to_equal(\"\")\n\n    def test_can_put_object_to_blacklist(self):\n        response = self.fetch('/blacklist?blocked.jpg', method='PUT', body='')\n        expect(response.code).to_equal(200)\n        expect(response.body).to_equal(\"\")\n\n    def test_can_read_updated_blacklist(self):\n        self.fetch('/blacklist?blocked.jpg', method='PUT', body='')\n        response = self.fetch('/blacklist')\n        expect(response.code).to_equal(200)\n        expect(\"blocked.jpg\\n\" in response.body).to_equal(True)\n\n    def test_cant_get_blacklisted_image(self):\n        response = self.fetch('/unsafe/image.jpg')\n        expect(response.code).to_equal(200)\n        self.fetch('/blacklist?image.jpg', method='PUT', body='')\n        response = self.fetch('/unsafe/image.jpg')\n        expect(response.code).to_equal(400)\n", "comments": "   usr bin python        coding  utf 8        thumbor imaging service    https   github com thumbor thumbor wiki    licensed mit license     http   www opensource org licenses mit license    copyright (c) 2011 globo com thumbor googlegroups com ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# thumbor imaging service\n# https://github.com/thumbor/thumbor/wiki\n\n# Licensed under the MIT license:\n# http://www.opensource.org/licenses/mit-license\n# Copyright (c) 2011 globo.com thumbor@googlegroups.com\n\nfrom os.path import abspath, join, dirname, exists\nfrom shutil import rmtree\n\nfrom preggy import expect\n\nfrom thumbor.config import Config\nfrom thumbor.context import Context\nfrom thumbor.importer import Importer\nfrom tests.base import TestCase\n\n\nclass BlacklistHandlerTestCase(TestCase):\n    def get_context(self):\n        file_storage_root_path = '/tmp/thumbor/storage'\n        if exists(file_storage_root_path):\n            rmtree(file_storage_root_path)\n\n        cfg = Config()\n        cfg.USE_BLACKLIST = True\n        cfg.LOADER = \"thumbor.loaders.file_loader\"\n        cfg.FILE_LOADER_ROOT_PATH = abspath(join(dirname(__file__), '../fixtures/images/'))\n        cfg.STORAGE = 'thumbor.storages.file_storage'\n        cfg.FILE_STORAGE_ROOT_PATH = file_storage_root_path\n        importer = Importer(cfg)\n        importer.import_modules()\n        return Context(None, cfg, importer)\n\n    def test_can_get_blacklist(self):\n        response = self.fetch('/blacklist')\n        expect(response.code).to_equal(200)\n        expect(response.body).to_equal(\"\")\n\n    def test_can_put_object_to_blacklist(self):\n        response = self.fetch('/blacklist?blocked.jpg', method='PUT', body='')\n        expect(response.code).to_equal(200)\n        expect(response.body).to_equal(\"\")\n\n    def test_can_read_updated_blacklist(self):\n        self.fetch('/blacklist?blocked.jpg', method='PUT', body='')\n        response = self.fetch('/blacklist')\n        expect(response.code).to_equal(200)\n        expect(\"blocked.jpg\\n\" in response.body).to_equal(True)\n\n    def test_cant_get_blacklisted_image(self):\n        response = self.fetch('/unsafe/image.jpg')\n        expect(response.code).to_equal(200)\n        self.fetch('/blacklist?image.jpg', method='PUT', body='')\n        response = self.fetch('/unsafe/image.jpg')\n        expect(response.code).to_equal(400)\n", "description": "thumbor is an open-source photo thumbnail service by globo.com", "file_name": "test_blacklist.py", "id": "2116c42c980e699ebb35d6501c78e315", "language": "Python", "project_name": "thumbor", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/thumbor-thumbor/thumbor-thumbor-991f13c/tests/handlers/test_blacklist.py", "save_time": "", "source": "", "update_at": "2018-03-18T09:16:11Z", "url": "https://github.com/thumbor/thumbor", "wiki": true}