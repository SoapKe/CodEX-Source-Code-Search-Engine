{"author": "jazzband", "code": "from __future__ import absolute_import, unicode_literals\n\nimport inspect\n\nfrom django.apps import AppConfig\nfrom django.conf import settings\nfrom django.core.checks import Error, register\nfrom django.middleware.gzip import GZipMiddleware\nfrom django.utils.module_loading import import_string\nfrom django.utils.translation import ugettext_lazy as _\n\n\nclass DebugToolbarConfig(AppConfig):\n    name = 'debug_toolbar'\n    verbose_name = _(\"Debug Toolbar\")\n\n\n@register\ndef check_middleware(app_configs, **kwargs):\n    from debug_toolbar.middleware import DebugToolbarMiddleware\n\n    errors = []\n    gzip_index = None\n    debug_toolbar_index = None\n\n    setting = getattr(settings, 'MIDDLEWARE', None)\n    setting_name = 'MIDDLEWARE'\n    if setting is None:\n        setting = settings.MIDDLEWARE_CLASSES\n        setting_name = 'MIDDLEWARE_CLASSES'\n\n    \n    for i, middleware in enumerate(setting):\n        if is_middleware_class(GZipMiddleware, middleware):\n            gzip_index = i\n        elif is_middleware_class(DebugToolbarMiddleware, middleware):\n            debug_toolbar_index = i\n\n    if debug_toolbar_index is None:\n        \n        errors.append(\n            Error(\n                \"debug_toolbar.middleware.DebugToolbarMiddleware is missing \"\n                \"from %s.\" % setting_name,\n                hint=\"Add debug_toolbar.middleware.DebugToolbarMiddleware to \"\n                \"%s.\" % setting_name,\n            )\n        )\n    elif gzip_index is not None and debug_toolbar_index < gzip_index:\n        \n        errors.append(\n            Error(\n                \"debug_toolbar.middleware.DebugToolbarMiddleware occurs before \"\n                \"django.middleware.gzip.GZipMiddleware in %s.\" % setting_name,\n                hint=\"Move debug_toolbar.middleware.DebugToolbarMiddleware to \"\n                \"after django.middleware.gzip.GZipMiddleware in %s.\" % setting_name,\n            )\n        )\n\n    return errors\n\n\ndef is_middleware_class(middleware_class, middleware_path):\n    try:\n        middleware_cls = import_string(middleware_path)\n    except ImportError:\n        return\n    return (\n        inspect.isclass(middleware_cls) and\n        issubclass(middleware_cls, middleware_class)\n    )\n", "comments": "  determine indexes gzip toolbar installed    if toolbar appear  report error     if toolbar appears gzip index  report error  ", "content": "from __future__ import absolute_import, unicode_literals\n\nimport inspect\n\nfrom django.apps import AppConfig\nfrom django.conf import settings\nfrom django.core.checks import Error, register\nfrom django.middleware.gzip import GZipMiddleware\nfrom django.utils.module_loading import import_string\nfrom django.utils.translation import ugettext_lazy as _\n\n\nclass DebugToolbarConfig(AppConfig):\n    name = 'debug_toolbar'\n    verbose_name = _(\"Debug Toolbar\")\n\n\n@register\ndef check_middleware(app_configs, **kwargs):\n    from debug_toolbar.middleware import DebugToolbarMiddleware\n\n    errors = []\n    gzip_index = None\n    debug_toolbar_index = None\n\n    setting = getattr(settings, 'MIDDLEWARE', None)\n    setting_name = 'MIDDLEWARE'\n    if setting is None:\n        setting = settings.MIDDLEWARE_CLASSES\n        setting_name = 'MIDDLEWARE_CLASSES'\n\n    # Determine the indexes which gzip and/or the toolbar are installed at\n    for i, middleware in enumerate(setting):\n        if is_middleware_class(GZipMiddleware, middleware):\n            gzip_index = i\n        elif is_middleware_class(DebugToolbarMiddleware, middleware):\n            debug_toolbar_index = i\n\n    if debug_toolbar_index is None:\n        # If the toolbar does not appear, report an error.\n        errors.append(\n            Error(\n                \"debug_toolbar.middleware.DebugToolbarMiddleware is missing \"\n                \"from %s.\" % setting_name,\n                hint=\"Add debug_toolbar.middleware.DebugToolbarMiddleware to \"\n                \"%s.\" % setting_name,\n            )\n        )\n    elif gzip_index is not None and debug_toolbar_index < gzip_index:\n        # If the toolbar appears before the gzip index, report an error.\n        errors.append(\n            Error(\n                \"debug_toolbar.middleware.DebugToolbarMiddleware occurs before \"\n                \"django.middleware.gzip.GZipMiddleware in %s.\" % setting_name,\n                hint=\"Move debug_toolbar.middleware.DebugToolbarMiddleware to \"\n                \"after django.middleware.gzip.GZipMiddleware in %s.\" % setting_name,\n            )\n        )\n\n    return errors\n\n\ndef is_middleware_class(middleware_class, middleware_path):\n    try:\n        middleware_cls = import_string(middleware_path)\n    except ImportError:\n        return\n    return (\n        inspect.isclass(middleware_cls) and\n        issubclass(middleware_cls, middleware_class)\n    )\n", "description": "A configurable set of panels that display various debug information about the current request/response.", "file_name": "apps.py", "id": "d549b39fbb1c989a7fafc94b6568aadd", "language": "Python", "project_name": "django-debug-toolbar", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jazzband-django-debug-toolbar/jazzband-django-debug-toolbar-459e978/debug_toolbar/apps.py", "save_time": "", "source": "", "update_at": "2018-03-18T09:15:08Z", "url": "https://github.com/jazzband/django-debug-toolbar", "wiki": true}