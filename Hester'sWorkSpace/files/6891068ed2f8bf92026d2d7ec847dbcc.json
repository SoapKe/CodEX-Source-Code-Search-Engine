{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models\nfrom odoo.addons import decimal_precision as dp\n\n\nclass SaleOrderLine(models.Model):\n    _inherit = \"sale.order.line\"\n\n    margin = fields.Float(compute='_product_margin', digits=dp.get_precision('Product Price'), store=True)\n    purchase_price = fields.Float(string='Cost', digits=dp.get_precision('Product Price'))\n\n    def _compute_margin(self, order_id, product_id, product_uom_id):\n        frm_cur = self.env.user.company_id.currency_id\n        to_cur = order_id.pricelist_id.currency_id\n        purchase_price = product_id.standard_price\n        if product_uom_id != product_id.uom_id:\n            purchase_price = product_id.uom_id._compute_price(purchase_price, product_uom_id)\n        ctx = self.env.context.copy()\n        ctx['date'] = order_id.date_order\n        price = frm_cur.with_context(ctx).compute(purchase_price, to_cur, round=False)\n        return price\n\n    @api.model\n    def _get_purchase_price(self, pricelist, product, product_uom, date):\n        frm_cur = self.env.user.company_id.currency_id\n        to_cur = pricelist.currency_id\n        purchase_price = product.standard_price\n        if product_uom != product.uom_id:\n            purchase_price = product.uom_id._compute_price(purchase_price, product_uom)\n        ctx = self.env.context.copy()\n        ctx['date'] = date\n        price = frm_cur.with_context(ctx).compute(purchase_price, to_cur, round=False)\n        return {'purchase_price': price}\n\n    @api.onchange('product_id', 'product_uom')\n    def product_id_change_margin(self):\n        if not self.order_id.pricelist_id or not self.product_id or not self.product_uom:\n            return\n        self.purchase_price = self._compute_margin(self.order_id, self.product_id, self.product_uom)\n\n    @api.model\n    def create(self, vals):\n        vals.update(self._prepare_add_missing_fields(vals))\n\n        \n        \n        if 'purchase_price' not in vals:\n            order_id = self.env['sale.order'].browse(vals['order_id'])\n            product_id = self.env['product.product'].browse(vals['product_id'])\n            product_uom_id = self.env['product.uom'].browse(vals['product_uom'])\n\n            vals['purchase_price'] = self._compute_margin(order_id, product_id, product_uom_id)\n\n        return super(SaleOrderLine, self).create(vals)\n\n    @api.depends('product_id', 'purchase_price', 'product_uom_qty', 'price_unit', 'price_subtotal')\n    def _product_margin(self):\n        for line in self:\n            currency = line.order_id.pricelist_id.currency_id\n            price = line.purchase_price\n            if not price:\n                from_cur = line.env.user.company_id.currency_id.with_context(date=line.order_id.date_order)\n                price = from_cur.compute(line.product_id.standard_price, currency, round=False)\n \n            line.margin = currency.round(line.price_subtotal - (price * line.product_uom_qty))\n\n\nclass SaleOrder(models.Model):\n    _inherit = \"sale.order\"\n\n    margin = fields.Monetary(compute='_product_margin', help=\"It gives profitability by calculating the difference between the Unit Price and the cost.\", currency_field='currency_id', digits=dp.get_precision('Product Price'), store=True)\n\n    @api.depends('order_line.margin')\n    def _product_margin(self):\n        for order in self:\n            order.margin = sum(order.order_line.filtered(lambda r: r.state != 'cancel').mapped('margin'))\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     calculation margin programmatic creation so line  it therefore    necessary call product id change margin manually ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models\nfrom odoo.addons import decimal_precision as dp\n\n\nclass SaleOrderLine(models.Model):\n    _inherit = \"sale.order.line\"\n\n    margin = fields.Float(compute='_product_margin', digits=dp.get_precision('Product Price'), store=True)\n    purchase_price = fields.Float(string='Cost', digits=dp.get_precision('Product Price'))\n\n    def _compute_margin(self, order_id, product_id, product_uom_id):\n        frm_cur = self.env.user.company_id.currency_id\n        to_cur = order_id.pricelist_id.currency_id\n        purchase_price = product_id.standard_price\n        if product_uom_id != product_id.uom_id:\n            purchase_price = product_id.uom_id._compute_price(purchase_price, product_uom_id)\n        ctx = self.env.context.copy()\n        ctx['date'] = order_id.date_order\n        price = frm_cur.with_context(ctx).compute(purchase_price, to_cur, round=False)\n        return price\n\n    @api.model\n    def _get_purchase_price(self, pricelist, product, product_uom, date):\n        frm_cur = self.env.user.company_id.currency_id\n        to_cur = pricelist.currency_id\n        purchase_price = product.standard_price\n        if product_uom != product.uom_id:\n            purchase_price = product.uom_id._compute_price(purchase_price, product_uom)\n        ctx = self.env.context.copy()\n        ctx['date'] = date\n        price = frm_cur.with_context(ctx).compute(purchase_price, to_cur, round=False)\n        return {'purchase_price': price}\n\n    @api.onchange('product_id', 'product_uom')\n    def product_id_change_margin(self):\n        if not self.order_id.pricelist_id or not self.product_id or not self.product_uom:\n            return\n        self.purchase_price = self._compute_margin(self.order_id, self.product_id, self.product_uom)\n\n    @api.model\n    def create(self, vals):\n        vals.update(self._prepare_add_missing_fields(vals))\n\n        # Calculation of the margin for programmatic creation of a SO line. It is therefore not\n        # necessary to call product_id_change_margin manually\n        if 'purchase_price' not in vals:\n            order_id = self.env['sale.order'].browse(vals['order_id'])\n            product_id = self.env['product.product'].browse(vals['product_id'])\n            product_uom_id = self.env['product.uom'].browse(vals['product_uom'])\n\n            vals['purchase_price'] = self._compute_margin(order_id, product_id, product_uom_id)\n\n        return super(SaleOrderLine, self).create(vals)\n\n    @api.depends('product_id', 'purchase_price', 'product_uom_qty', 'price_unit', 'price_subtotal')\n    def _product_margin(self):\n        for line in self:\n            currency = line.order_id.pricelist_id.currency_id\n            price = line.purchase_price\n            if not price:\n                from_cur = line.env.user.company_id.currency_id.with_context(date=line.order_id.date_order)\n                price = from_cur.compute(line.product_id.standard_price, currency, round=False)\n \n            line.margin = currency.round(line.price_subtotal - (price * line.product_uom_qty))\n\n\nclass SaleOrder(models.Model):\n    _inherit = \"sale.order\"\n\n    margin = fields.Monetary(compute='_product_margin', help=\"It gives profitability by calculating the difference between the Unit Price and the cost.\", currency_field='currency_id', digits=dp.get_precision('Product Price'), store=True)\n\n    @api.depends('order_line.margin')\n    def _product_margin(self):\n        for order in self:\n            order.margin = sum(order.order_line.filtered(lambda r: r.state != 'cancel').mapped('margin'))\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "sale_order.py", "id": "6891068ed2f8bf92026d2d7ec847dbcc", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/sale_margin/models/sale_order.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}