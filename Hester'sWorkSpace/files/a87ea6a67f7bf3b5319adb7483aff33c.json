{"author": "jakubroztocil", "code": "import re\n\nfrom httpie.plugins import plugin_manager\nfrom httpie.context import Environment\n\n\nMIME_RE = re.compile(r'^[^/]+/[^/]+$')\n\n\ndef is_valid_mime(mime):\n    return mime and MIME_RE.match(mime)\n\n\nclass Conversion(object):\n\n    def get_converter(self, mime):\n        if is_valid_mime(mime):\n            for converter_class in plugin_manager.get_converters():\n                if converter_class.supports(mime):\n                    return converter_class(mime)\n\n\nclass Formatting(object):\n    \n        available_plugins = plugin_manager.get_formatters_grouped()\n        self.enabled_plugins = []\n        for group in groups:\n            for cls in available_plugins[group]:\n                p = cls(env=env, **kwargs)\n                if p.enabled:\n                    self.enabled_plugins.append(p)\n\n    def format_headers(self, headers):\n        for p in self.enabled_plugins:\n            headers = p.format_headers(headers)\n        return headers\n\n    def format_body(self, content, mime):\n        if is_valid_mime(mime):\n            for p in self.enabled_plugins:\n                content = p.format_body(content, mime)\n        return content\n", "comments": "A delegate class that invokes the actual processors.\"\"\"\n\n    def __init__(self, groups, env=Environment(), **kwargs):\n        \"\"\"\n        :param groups: names of processor groups to be applied\n        :param env: Environment\n        :param kwargs: additional keyword arguments for processors\n\n        \n \n", "content": "import re\n\nfrom httpie.plugins import plugin_manager\nfrom httpie.context import Environment\n\n\nMIME_RE = re.compile(r'^[^/]+/[^/]+$')\n\n\ndef is_valid_mime(mime):\n    return mime and MIME_RE.match(mime)\n\n\nclass Conversion(object):\n\n    def get_converter(self, mime):\n        if is_valid_mime(mime):\n            for converter_class in plugin_manager.get_converters():\n                if converter_class.supports(mime):\n                    return converter_class(mime)\n\n\nclass Formatting(object):\n    \"\"\"A delegate class that invokes the actual processors.\"\"\"\n\n    def __init__(self, groups, env=Environment(), **kwargs):\n        \"\"\"\n        :param groups: names of processor groups to be applied\n        :param env: Environment\n        :param kwargs: additional keyword arguments for processors\n\n        \"\"\"\n        available_plugins = plugin_manager.get_formatters_grouped()\n        self.enabled_plugins = []\n        for group in groups:\n            for cls in available_plugins[group]:\n                p = cls(env=env, **kwargs)\n                if p.enabled:\n                    self.enabled_plugins.append(p)\n\n    def format_headers(self, headers):\n        for p in self.enabled_plugins:\n            headers = p.format_headers(headers)\n        return headers\n\n    def format_body(self, content, mime):\n        if is_valid_mime(mime):\n            for p in self.enabled_plugins:\n                content = p.format_body(content, mime)\n        return content\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "processing.py", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil_httpie/jakubroztocil-httpie-0f4dce9/httpie/output/processing.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:20:06Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}