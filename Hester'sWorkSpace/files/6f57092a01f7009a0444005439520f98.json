{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n    int_or_none,\n    parse_iso8601,\n    qualities,\n    unescapeHTML,\n)\n\n\nclass Channel9IE(InfoExtractor):\n    IE_DESC = 'Channel 9'\n    IE_NAME = 'channel9'\n    _VALID_URL = r'https?://(?:www\\.)?(?:channel9\\.msdn\\.com|s\\.ch9\\.ms)/(?P<contentpath>.+?)(?P<rss>/RSS)?/?(?:[?\n\n    _TESTS = [{\n        'url': 'http://channel9.msdn.com/Events/TechEd/Australia/2013/KOS002',\n        'md5': '32083d4eaf1946db6d454313f44510ca',\n        'info_dict': {\n            'id': '6c413323-383a-49dc-88f9-a22800cab024',\n            'ext': 'wmv',\n            'title': 'Developer Kick-Off Session: Stuff We Love',\n            'description': 'md5:b80bf9355a503c193aff7ec6cd5a7731',\n            'duration': 4576,\n            'thumbnail': r're:https?://.*\\.jpg',\n            'timestamp': 1377717420,\n            'upload_date': '20130828',\n            'session_code': 'KOS002',\n            'session_room': 'Arena 1A',\n            'session_speakers': ['Andrew Coates', 'Brady Gaster', 'Mads Kristensen', 'Ed Blankenship', 'Patrick Klug'],\n        },\n    }, {\n        'url': 'http://channel9.msdn.com/posts/Self-service-BI-with-Power-BI-nuclear-testing',\n        'md5': 'dcf983ee6acd2088e7188c3cf79b46bc',\n        'info_dict': {\n            'id': 'fe8e435f-bb93-4e01-8e97-a28c01887024',\n            'ext': 'wmv',\n            'title': 'Self-service BI with Power BI - nuclear testing',\n            'description': 'md5:2d17fec927fc91e9e17783b3ecc88f54',\n            'duration': 1540,\n            'thumbnail': r're:https?://.*\\.jpg',\n            'timestamp': 1386381991,\n            'upload_date': '20131207',\n            'authors': ['Mike Wilmot'],\n        },\n    }, {\n        \n        'url': 'https://channel9.msdn.com/Events/CPP/CppCon-2015/Ranges-for-the-Standard-Library',\n        'info_dict': {\n            'id': '33ad69d2-6a4e-4172-83a1-a523013dec76',\n            'ext': 'mp4',\n            'title': 'Ranges for the Standard Library',\n            'description': 'md5:9895e0a9fd80822d2f01c454b8f4a372',\n            'duration': 5646,\n            'thumbnail': r're:https?://.*\\.jpg',\n            'upload_date': '20150930',\n            'timestamp': 1443640735,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://channel9.msdn.com/Niners/Splendid22/Queue/76acff796e8f411184b008028e0d492b/RSS',\n        'info_dict': {\n            'id': 'Niners/Splendid22/Queue/76acff796e8f411184b008028e0d492b',\n            'title': 'Channel 9',\n        },\n        'playlist_mincount': 100,\n    }, {\n        'url': 'https://channel9.msdn.com/Events/DEVintersection/DEVintersection-2016/RSS',\n        'only_matching': True,\n    }, {\n        'url': 'https://channel9.msdn.com/Events/Speakers/scott-hanselman/RSS?UrlSafeName=scott-hanselman',\n        'only_matching': True,\n    }]\n\n    _RSS_URL = 'http://channel9.msdn.com/%s/RSS'\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+src=[\"\\'](https?://channel9\\.msdn\\.com/(?:[^/]+/)+)player\\b',\n            webpage)\n\n    def _extract_list(self, video_id, rss_url=None):\n        if not rss_url:\n            rss_url = self._RSS_URL % video_id\n        rss = self._download_xml(rss_url, video_id, 'Downloading RSS')\n        entries = [self.url_result(session_url.text, 'Channel9')\n                   for session_url in rss.findall('./channel/item/link')]\n        title_text = rss.find('./channel/title').text\n        return self.playlist_result(entries, video_id, title_text)\n\n    def _real_extract(self, url):\n        content_path, rss = re.match(self._VALID_URL, url).groups()\n\n        if rss:\n            return self._extract_list(content_path, url)\n\n        webpage = self._download_webpage(\n            url, content_path, 'Downloading web page')\n\n        episode_data = self._search_regex(\n            r\"data-episode='([^']+)'\", webpage, 'episode data', default=None)\n        if episode_data:\n            episode_data = self._parse_json(unescapeHTML(\n                episode_data), content_path)\n            content_id = episode_data['contentId']\n            is_session = '/Sessions(' in episode_data['api']\n            content_url = 'https://channel9.msdn.com/odata' + episode_data['api']\n            if is_session:\n                content_url += '?$expand=Speakers'\n            else:\n                content_url += '?$expand=Authors'\n            content_data = self._download_json(content_url, content_id)\n            title = content_data['Title']\n\n            QUALITIES = (\n                'mp3',\n                'wmv', 'mp4',\n                'wmv-low', 'mp4-low',\n                'wmv-mid', 'mp4-mid',\n                'wmv-high', 'mp4-high',\n            )\n\n            quality_key = qualities(QUALITIES)\n\n            def quality(quality_id, format_url):\n                return (len(QUALITIES) if '_Source.' in format_url\n                        else quality_key(quality_id))\n\n            formats = []\n            urls = set()\n\n            SITE_QUALITIES = {\n                'MP3': 'mp3',\n                'MP4': 'mp4',\n                'Low Quality WMV': 'wmv-low',\n                'Low Quality MP4': 'mp4-low',\n                'Mid Quality WMV': 'wmv-mid',\n                'Mid Quality MP4': 'mp4-mid',\n                'High Quality WMV': 'wmv-high',\n                'High Quality MP4': 'mp4-high',\n            }\n\n            formats_select = self._search_regex(\n                r'(?s)<select[^>]+name=[\"\\']format[^>]+>(.+?)</select', webpage,\n                'formats select', default=None)\n            if formats_select:\n                for mobj in re.finditer(\n                        r'<option\\b[^>]+\\bvalue=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1[^>]*>\\s*(?P<format>[^<]+?)\\s*<',\n                        formats_select):\n                    format_url = mobj.group('url')\n                    if format_url in urls:\n                        continue\n                    urls.add(format_url)\n                    format_id = mobj.group('format')\n                    quality_id = SITE_QUALITIES.get(format_id, format_id)\n                    formats.append({\n                        'url': format_url,\n                        'format_id': quality_id,\n                        'quality': quality(quality_id, format_url),\n                        'vcodec': 'none' if quality_id == 'mp3' else None,\n                    })\n\n            API_QUALITIES = {\n                'VideoMP4Low': 'mp4-low',\n                'VideoWMV': 'wmv-mid',\n                'VideoMP4Medium': 'mp4-mid',\n                'VideoMP4High': 'mp4-high',\n                'VideoWMVHQ': 'wmv-hq',\n            }\n\n            for format_id, q in API_QUALITIES.items():\n                q_url = content_data.get(format_id)\n                if not q_url or q_url in urls:\n                    continue\n                urls.add(q_url)\n                formats.append({\n                    'url': q_url,\n                    'format_id': q,\n                    'quality': quality(q, q_url),\n                })\n\n            self._sort_formats(formats)\n\n            slides = content_data.get('Slides')\n            zip_file = content_data.get('ZipFile')\n\n            if not formats and not slides and not zip_file:\n                raise ExtractorError(\n                    'None of recording, slides or zip are available for %s' % content_path)\n\n            subtitles = {}\n            for caption in content_data.get('Captions', []):\n                caption_url = caption.get('Url')\n                if not caption_url:\n                    continue\n                subtitles.setdefault(caption.get('Language', 'en'), []).append({\n                    'url': caption_url,\n                    'ext': 'vtt',\n                })\n\n            common = {\n                'id': content_id,\n                'title': title,\n                'description': clean_html(content_data.get('Description') or content_data.get('Body')),\n                'thumbnail': content_data.get('Thumbnail') or content_data.get('VideoPlayerPreviewImage'),\n                'duration': int_or_none(content_data.get('MediaLengthInSeconds')),\n                'timestamp': parse_iso8601(content_data.get('PublishedDate')),\n                'avg_rating': int_or_none(content_data.get('Rating')),\n                'rating_count': int_or_none(content_data.get('RatingCount')),\n                'view_count': int_or_none(content_data.get('Views')),\n                'comment_count': int_or_none(content_data.get('CommentCount')),\n                'subtitles': subtitles,\n            }\n            if is_session:\n                speakers = []\n                for s in content_data.get('Speakers', []):\n                    speaker_name = s.get('FullName')\n                    if not speaker_name:\n                        continue\n                    speakers.append(speaker_name)\n\n                common.update({\n                    'session_code': content_data.get('Code'),\n                    'session_room': content_data.get('Room'),\n                    'session_speakers': speakers,\n                })\n            else:\n                authors = []\n                for a in content_data.get('Authors', []):\n                    author_name = a.get('DisplayName')\n                    if not author_name:\n                        continue\n                    authors.append(author_name)\n                common['authors'] = authors\n\n            contents = []\n\n            if slides:\n                d = common.copy()\n                d.update({'title': title + '-Slides', 'url': slides})\n                contents.append(d)\n\n            if zip_file:\n                d = common.copy()\n                d.update({'title': title + '-Zip', 'url': zip_file})\n                contents.append(d)\n\n            if formats:\n                d = common.copy()\n                d.update({'title': title, 'formats': formats})\n                contents.append(d)\n            return self.playlist_result(contents)\n        else:\n            return self._extract_list(content_path)\n", "comments": "#&]|$)'\n# low quality mp4 is best\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n    int_or_none,\n    parse_iso8601,\n    qualities,\n    unescapeHTML,\n)\n\n\nclass Channel9IE(InfoExtractor):\n    IE_DESC = 'Channel 9'\n    IE_NAME = 'channel9'\n    _VALID_URL = r'https?://(?:www\\.)?(?:channel9\\.msdn\\.com|s\\.ch9\\.ms)/(?P<contentpath>.+?)(?P<rss>/RSS)?/?(?:[?#&]|$)'\n\n    _TESTS = [{\n        'url': 'http://channel9.msdn.com/Events/TechEd/Australia/2013/KOS002',\n        'md5': '32083d4eaf1946db6d454313f44510ca',\n        'info_dict': {\n            'id': '6c413323-383a-49dc-88f9-a22800cab024',\n            'ext': 'wmv',\n            'title': 'Developer Kick-Off Session: Stuff We Love',\n            'description': 'md5:b80bf9355a503c193aff7ec6cd5a7731',\n            'duration': 4576,\n            'thumbnail': r're:https?://.*\\.jpg',\n            'timestamp': 1377717420,\n            'upload_date': '20130828',\n            'session_code': 'KOS002',\n            'session_room': 'Arena 1A',\n            'session_speakers': ['Andrew Coates', 'Brady Gaster', 'Mads Kristensen', 'Ed Blankenship', 'Patrick Klug'],\n        },\n    }, {\n        'url': 'http://channel9.msdn.com/posts/Self-service-BI-with-Power-BI-nuclear-testing',\n        'md5': 'dcf983ee6acd2088e7188c3cf79b46bc',\n        'info_dict': {\n            'id': 'fe8e435f-bb93-4e01-8e97-a28c01887024',\n            'ext': 'wmv',\n            'title': 'Self-service BI with Power BI - nuclear testing',\n            'description': 'md5:2d17fec927fc91e9e17783b3ecc88f54',\n            'duration': 1540,\n            'thumbnail': r're:https?://.*\\.jpg',\n            'timestamp': 1386381991,\n            'upload_date': '20131207',\n            'authors': ['Mike Wilmot'],\n        },\n    }, {\n        # low quality mp4 is best\n        'url': 'https://channel9.msdn.com/Events/CPP/CppCon-2015/Ranges-for-the-Standard-Library',\n        'info_dict': {\n            'id': '33ad69d2-6a4e-4172-83a1-a523013dec76',\n            'ext': 'mp4',\n            'title': 'Ranges for the Standard Library',\n            'description': 'md5:9895e0a9fd80822d2f01c454b8f4a372',\n            'duration': 5646,\n            'thumbnail': r're:https?://.*\\.jpg',\n            'upload_date': '20150930',\n            'timestamp': 1443640735,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://channel9.msdn.com/Niners/Splendid22/Queue/76acff796e8f411184b008028e0d492b/RSS',\n        'info_dict': {\n            'id': 'Niners/Splendid22/Queue/76acff796e8f411184b008028e0d492b',\n            'title': 'Channel 9',\n        },\n        'playlist_mincount': 100,\n    }, {\n        'url': 'https://channel9.msdn.com/Events/DEVintersection/DEVintersection-2016/RSS',\n        'only_matching': True,\n    }, {\n        'url': 'https://channel9.msdn.com/Events/Speakers/scott-hanselman/RSS?UrlSafeName=scott-hanselman',\n        'only_matching': True,\n    }]\n\n    _RSS_URL = 'http://channel9.msdn.com/%s/RSS'\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+src=[\"\\'](https?://channel9\\.msdn\\.com/(?:[^/]+/)+)player\\b',\n            webpage)\n\n    def _extract_list(self, video_id, rss_url=None):\n        if not rss_url:\n            rss_url = self._RSS_URL % video_id\n        rss = self._download_xml(rss_url, video_id, 'Downloading RSS')\n        entries = [self.url_result(session_url.text, 'Channel9')\n                   for session_url in rss.findall('./channel/item/link')]\n        title_text = rss.find('./channel/title').text\n        return self.playlist_result(entries, video_id, title_text)\n\n    def _real_extract(self, url):\n        content_path, rss = re.match(self._VALID_URL, url).groups()\n\n        if rss:\n            return self._extract_list(content_path, url)\n\n        webpage = self._download_webpage(\n            url, content_path, 'Downloading web page')\n\n        episode_data = self._search_regex(\n            r\"data-episode='([^']+)'\", webpage, 'episode data', default=None)\n        if episode_data:\n            episode_data = self._parse_json(unescapeHTML(\n                episode_data), content_path)\n            content_id = episode_data['contentId']\n            is_session = '/Sessions(' in episode_data['api']\n            content_url = 'https://channel9.msdn.com/odata' + episode_data['api']\n            if is_session:\n                content_url += '?$expand=Speakers'\n            else:\n                content_url += '?$expand=Authors'\n            content_data = self._download_json(content_url, content_id)\n            title = content_data['Title']\n\n            QUALITIES = (\n                'mp3',\n                'wmv', 'mp4',\n                'wmv-low', 'mp4-low',\n                'wmv-mid', 'mp4-mid',\n                'wmv-high', 'mp4-high',\n            )\n\n            quality_key = qualities(QUALITIES)\n\n            def quality(quality_id, format_url):\n                return (len(QUALITIES) if '_Source.' in format_url\n                        else quality_key(quality_id))\n\n            formats = []\n            urls = set()\n\n            SITE_QUALITIES = {\n                'MP3': 'mp3',\n                'MP4': 'mp4',\n                'Low Quality WMV': 'wmv-low',\n                'Low Quality MP4': 'mp4-low',\n                'Mid Quality WMV': 'wmv-mid',\n                'Mid Quality MP4': 'mp4-mid',\n                'High Quality WMV': 'wmv-high',\n                'High Quality MP4': 'mp4-high',\n            }\n\n            formats_select = self._search_regex(\n                r'(?s)<select[^>]+name=[\"\\']format[^>]+>(.+?)</select', webpage,\n                'formats select', default=None)\n            if formats_select:\n                for mobj in re.finditer(\n                        r'<option\\b[^>]+\\bvalue=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1[^>]*>\\s*(?P<format>[^<]+?)\\s*<',\n                        formats_select):\n                    format_url = mobj.group('url')\n                    if format_url in urls:\n                        continue\n                    urls.add(format_url)\n                    format_id = mobj.group('format')\n                    quality_id = SITE_QUALITIES.get(format_id, format_id)\n                    formats.append({\n                        'url': format_url,\n                        'format_id': quality_id,\n                        'quality': quality(quality_id, format_url),\n                        'vcodec': 'none' if quality_id == 'mp3' else None,\n                    })\n\n            API_QUALITIES = {\n                'VideoMP4Low': 'mp4-low',\n                'VideoWMV': 'wmv-mid',\n                'VideoMP4Medium': 'mp4-mid',\n                'VideoMP4High': 'mp4-high',\n                'VideoWMVHQ': 'wmv-hq',\n            }\n\n            for format_id, q in API_QUALITIES.items():\n                q_url = content_data.get(format_id)\n                if not q_url or q_url in urls:\n                    continue\n                urls.add(q_url)\n                formats.append({\n                    'url': q_url,\n                    'format_id': q,\n                    'quality': quality(q, q_url),\n                })\n\n            self._sort_formats(formats)\n\n            slides = content_data.get('Slides')\n            zip_file = content_data.get('ZipFile')\n\n            if not formats and not slides and not zip_file:\n                raise ExtractorError(\n                    'None of recording, slides or zip are available for %s' % content_path)\n\n            subtitles = {}\n            for caption in content_data.get('Captions', []):\n                caption_url = caption.get('Url')\n                if not caption_url:\n                    continue\n                subtitles.setdefault(caption.get('Language', 'en'), []).append({\n                    'url': caption_url,\n                    'ext': 'vtt',\n                })\n\n            common = {\n                'id': content_id,\n                'title': title,\n                'description': clean_html(content_data.get('Description') or content_data.get('Body')),\n                'thumbnail': content_data.get('Thumbnail') or content_data.get('VideoPlayerPreviewImage'),\n                'duration': int_or_none(content_data.get('MediaLengthInSeconds')),\n                'timestamp': parse_iso8601(content_data.get('PublishedDate')),\n                'avg_rating': int_or_none(content_data.get('Rating')),\n                'rating_count': int_or_none(content_data.get('RatingCount')),\n                'view_count': int_or_none(content_data.get('Views')),\n                'comment_count': int_or_none(content_data.get('CommentCount')),\n                'subtitles': subtitles,\n            }\n            if is_session:\n                speakers = []\n                for s in content_data.get('Speakers', []):\n                    speaker_name = s.get('FullName')\n                    if not speaker_name:\n                        continue\n                    speakers.append(speaker_name)\n\n                common.update({\n                    'session_code': content_data.get('Code'),\n                    'session_room': content_data.get('Room'),\n                    'session_speakers': speakers,\n                })\n            else:\n                authors = []\n                for a in content_data.get('Authors', []):\n                    author_name = a.get('DisplayName')\n                    if not author_name:\n                        continue\n                    authors.append(author_name)\n                common['authors'] = authors\n\n            contents = []\n\n            if slides:\n                d = common.copy()\n                d.update({'title': title + '-Slides', 'url': slides})\n                contents.append(d)\n\n            if zip_file:\n                d = common.copy()\n                d.update({'title': title + '-Zip', 'url': zip_file})\n                contents.append(d)\n\n            if formats:\n                d = common.copy()\n                d.update({'title': title, 'formats': formats})\n                contents.append(d)\n            return self.playlist_result(contents)\n        else:\n            return self._extract_list(content_path)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "channel9.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/channel9.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}