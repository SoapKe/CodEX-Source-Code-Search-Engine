{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2016, Werner Dijkerman (ikben@werner-dijkerman.nl)\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nclass BackendProp(object):\n\n    def __init__(self, module):\n        self._module = module\n\n    def get_property(self, opendj_bindir, hostname, port, username, password_method, backend_name):\n        my_command = [\n            opendj_bindir + '/dsconfig',\n            'get-backend-prop',\n            '-h', hostname,\n            '--port', str(port),\n            '--bindDN', username,\n            '--backend-name', backend_name,\n            '-n', '-X', '-s'\n        ] + password_method\n        rc, stdout, stderr = self._module.run_command(my_command)\n        if rc == 0:\n            return stdout\n        else:\n            self._module.fail_json(msg=\"Error message: \" + str(stderr))\n\n    def set_property(self, opendj_bindir, hostname, port, username, password_method, backend_name, name, value):\n        my_command = [\n            opendj_bindir + '/dsconfig',\n            'set-backend-prop',\n            '-h', hostname,\n            '--port', str(port),\n            '--bindDN', username,\n            '--backend-name', backend_name,\n            '--set', name + \":\" + value,\n            '-n', '-X'\n        ] + password_method\n        rc, stdout, stderr = self._module.run_command(my_command)\n        if rc == 0:\n            return True\n        else:\n            self._module.fail_json(msg=\"Error message: \" + stderr)\n\n    def validate_data(self, data=None, name=None, value=None):\n        for config_line in data.split('\\n'):\n            if config_line:\n                split_line = config_line.split()\n                if split_line[0] == name:\n                    if split_line[1] == value:\n                        return True\n        return False\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            opendj_bindir=dict(default=\"/opt/opendj/bin\", type=\"path\"),\n            hostname=dict(required=True),\n            port=dict(required=True),\n            username=dict(default=\"cn=Directory Manager\", required=False),\n            password=dict(required=False, no_log=True),\n            passwordfile=dict(required=False, type=\"path\"),\n            backend=dict(required=True),\n            name=dict(required=True),\n            value=dict(required=True),\n            state=dict(default=\"present\"),\n        ),\n        supports_check_mode=True,\n        mutually_exclusive=[['password', 'passwordfile']],\n        required_one_of=[['password', 'passwordfile']]\n    )\n\n    opendj_bindir = module.params['opendj_bindir']\n    hostname = module.params['hostname']\n    port = module.params['port']\n    username = module.params['username']\n    password = module.params['password']\n    passwordfile = module.params['passwordfile']\n    backend_name = module.params['backend']\n    name = module.params['name']\n    value = module.params['value']\n    state = module.params['state']\n\n    if module.params[\"password\"] is not None:\n        password_method = ['-w', password]\n    elif module.params[\"passwordfile\"] is not None:\n        password_method = ['-j', passwordfile]\n\n    opendj = BackendProp(module)\n    validate = opendj.get_property(opendj_bindir=opendj_bindir,\n                                   hostname=hostname,\n                                   port=port,\n                                   username=username,\n                                   password_method=password_method,\n                                   backend_name=backend_name)\n\n    if validate:\n        if not opendj.validate_data(data=validate, name=name, value=value):\n            if module.check_mode:\n                module.exit_json(changed=True)\n            if opendj.set_property(opendj_bindir=opendj_bindir,\n                                   hostname=hostname,\n                                   port=port,\n                                   username=username,\n                                   password_method=password_method,\n                                   backend_name=backend_name,\n                                   name=name,\n                                   value=value):\n                module.exit_json(changed=True)\n            else:\n                module.exit_json(changed=False)\n        else:\n            module.exit_json(changed=False)\n    else:\n        module.exit_json(changed=False)\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  opendj backendprop short description  will update backend configuration opendj via dsconfig set backend prop command  description       this module update settings opendj command set backend prop       it check first via de get backend prop configuration needs applied  version added   2 2  author        werner dijkerman options      opendj bindir          description                the path bin directory opendj          required  false         default   opt opendj bin     hostname          description                the hostname opendj server          required  true     port          description                the admin port opendj instance available          required  true     username          description                the username connect          required  false         default  cn directory manager     password          description                the password cn directory manager user                either password passwordfile needed          required  false     passwordfile          description                location password file holds password cn directory manager user                either password passwordfile needed          required  false     backend          description                the name backend property needs updated          required  true     name          description                the configuration setting update          required  true     value          description                the value configuration item          required  true     state          description                if configuration needs added updated         required  false         default   present       examples           name   add update opendj backend properties      action  opendj backendprop             hostname localhost             port 4444             username  cn directory manager              password password             backend userroot             name index entry limit             value 5000      return               usr bin python        coding  utf 8        copyright  (c) 2016  werner dijkerman (ikben werner dijkerman nl)    copyright  (c) 2017  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2016, Werner Dijkerman (ikben@werner-dijkerman.nl)\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: opendj_backendprop\nshort_description: Will update the backend configuration of OpenDJ via the dsconfig set-backend-prop command.\ndescription:\n   - This module will update settings for OpenDJ with the command set-backend-prop.\n   - It will check first via de get-backend-prop if configuration needs to be applied.\nversion_added: \"2.2\"\nauthor:\n    - Werner Dijkerman\noptions:\n    opendj_bindir:\n        description:\n            - The path to the bin directory of OpenDJ.\n        required: false\n        default: /opt/opendj/bin\n    hostname:\n        description:\n            - The hostname of the OpenDJ server.\n        required: true\n    port:\n        description:\n            - The Admin port on which the OpenDJ instance is available.\n        required: true\n    username:\n        description:\n            - The username to connect to.\n        required: false\n        default: cn=Directory Manager\n    password:\n        description:\n            - The password for the cn=Directory Manager user.\n            - Either password or passwordfile is needed.\n        required: false\n    passwordfile:\n        description:\n            - Location to the password file which holds the password for the cn=Directory Manager user.\n            - Either password or passwordfile is needed.\n        required: false\n    backend:\n        description:\n            - The name of the backend on which the property needs to be updated.\n        required: true\n    name:\n        description:\n            - The configuration setting to update.\n        required: true\n    value:\n        description:\n            - The value for the configuration item.\n        required: true\n    state:\n        description:\n            - If configuration needs to be added/updated\n        required: false\n        default: \"present\"\n'''\n\nEXAMPLES = '''\n  - name: \"Add or update OpenDJ backend properties\"\n    action: opendj_backendprop\n            hostname=localhost\n            port=4444\n            username=\"cn=Directory Manager\"\n            password=password\n            backend=userRoot\n            name=index-entry-limit\n            value=5000\n'''\n\nRETURN = '''\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nclass BackendProp(object):\n\n    def __init__(self, module):\n        self._module = module\n\n    def get_property(self, opendj_bindir, hostname, port, username, password_method, backend_name):\n        my_command = [\n            opendj_bindir + '/dsconfig',\n            'get-backend-prop',\n            '-h', hostname,\n            '--port', str(port),\n            '--bindDN', username,\n            '--backend-name', backend_name,\n            '-n', '-X', '-s'\n        ] + password_method\n        rc, stdout, stderr = self._module.run_command(my_command)\n        if rc == 0:\n            return stdout\n        else:\n            self._module.fail_json(msg=\"Error message: \" + str(stderr))\n\n    def set_property(self, opendj_bindir, hostname, port, username, password_method, backend_name, name, value):\n        my_command = [\n            opendj_bindir + '/dsconfig',\n            'set-backend-prop',\n            '-h', hostname,\n            '--port', str(port),\n            '--bindDN', username,\n            '--backend-name', backend_name,\n            '--set', name + \":\" + value,\n            '-n', '-X'\n        ] + password_method\n        rc, stdout, stderr = self._module.run_command(my_command)\n        if rc == 0:\n            return True\n        else:\n            self._module.fail_json(msg=\"Error message: \" + stderr)\n\n    def validate_data(self, data=None, name=None, value=None):\n        for config_line in data.split('\\n'):\n            if config_line:\n                split_line = config_line.split()\n                if split_line[0] == name:\n                    if split_line[1] == value:\n                        return True\n        return False\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            opendj_bindir=dict(default=\"/opt/opendj/bin\", type=\"path\"),\n            hostname=dict(required=True),\n            port=dict(required=True),\n            username=dict(default=\"cn=Directory Manager\", required=False),\n            password=dict(required=False, no_log=True),\n            passwordfile=dict(required=False, type=\"path\"),\n            backend=dict(required=True),\n            name=dict(required=True),\n            value=dict(required=True),\n            state=dict(default=\"present\"),\n        ),\n        supports_check_mode=True,\n        mutually_exclusive=[['password', 'passwordfile']],\n        required_one_of=[['password', 'passwordfile']]\n    )\n\n    opendj_bindir = module.params['opendj_bindir']\n    hostname = module.params['hostname']\n    port = module.params['port']\n    username = module.params['username']\n    password = module.params['password']\n    passwordfile = module.params['passwordfile']\n    backend_name = module.params['backend']\n    name = module.params['name']\n    value = module.params['value']\n    state = module.params['state']\n\n    if module.params[\"password\"] is not None:\n        password_method = ['-w', password]\n    elif module.params[\"passwordfile\"] is not None:\n        password_method = ['-j', passwordfile]\n\n    opendj = BackendProp(module)\n    validate = opendj.get_property(opendj_bindir=opendj_bindir,\n                                   hostname=hostname,\n                                   port=port,\n                                   username=username,\n                                   password_method=password_method,\n                                   backend_name=backend_name)\n\n    if validate:\n        if not opendj.validate_data(data=validate, name=name, value=value):\n            if module.check_mode:\n                module.exit_json(changed=True)\n            if opendj.set_property(opendj_bindir=opendj_bindir,\n                                   hostname=hostname,\n                                   port=port,\n                                   username=username,\n                                   password_method=password_method,\n                                   backend_name=backend_name,\n                                   name=name,\n                                   value=value):\n                module.exit_json(changed=True)\n            else:\n                module.exit_json(changed=False)\n        else:\n            module.exit_json(changed=False)\n    else:\n        module.exit_json(changed=False)\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "opendj_backendprop.py", "id": "f3cc4fcc239d84a275fe9c966ebd3a8f", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/identity/opendj/opendj_backendprop.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}