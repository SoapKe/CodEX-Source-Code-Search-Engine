{"author": "aws", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You\n may not use this file except in compliance with the License. A copy of\n the License is located at\n\n     http://aws.amazon.com/apache2.0/\n\n or in the \"license\" file accompanying this file. This file is\n distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implied. See the License for the specific\n language governing permissions and limitations under the License.\nimport mock\n\nfrom awscli.testutils import BaseAWSCommandParamsTest\nfrom awscli.customizations.configservice.subscribe import S3BucketHelper\n\n\nclass TestSubscribe(BaseAWSCommandParamsTest):\n    prefix = 'configservice subscribe'\n\n    def setUp(self):\n        super(TestSubscribe, self).setUp()\n        self.parsed_responses = [\n            {},   S3 HeadBucket\n            {'TopicArn': 'my-topic-arn'},   SNS CreateTopic\n            {},   PutConfigurationRecorder\n            {},   PutDeliveryChannel\n            {},   StartConfigurationRecorder\n            {'ConfigurationRecorders': {}},   DescribeConfigurationRecorders\n            {'DeliveryChannels': {}}   DescribeDeliveryChannels\n        ]\n\n    def test_subscribe_when_bucket_exists_and_new_sns_topic(self):\n        self.prefix += ' --s3-bucket mybucket --sns-topic mytopic'\n        self.prefix += ' --iam-role myrole'\n        self.run_cmd(self.prefix)\n\n        self.assertEqual(len(self.operations_called), 7)\n        list_of_operation_names_called = []\n        list_of_parameters_called = []\n        for operation_called in self.operations_called:\n            list_of_operation_names_called.append(operation_called[0].name)\n            list_of_parameters_called.append(operation_called[1])\n\n        self.assertEqual(\n            list_of_operation_names_called, [\n                'HeadBucket',\n                'CreateTopic',\n                'PutConfigurationRecorder',\n                'PutDeliveryChannel',\n                'StartConfigurationRecorder',\n                'DescribeConfigurationRecorders',\n                'DescribeDeliveryChannels'\n            ]\n        )\n        self.assertEqual(\n            list_of_parameters_called, [\n                {'Bucket': 'mybucket'},   S3 HeadBucket\n                {'Name': 'mytopic'},   SNS CreateTopic\n                {'ConfigurationRecorder': {   PutConfigurationRecorder\n                    'name': 'default', 'roleARN': 'myrole'}},\n                {'DeliveryChannel': {   PutDeliveryChannel\n                    'name': 'default',\n                    's3BucketName': 'mybucket',\n                    'snsTopicARN': 'my-topic-arn'}},\n                 StartConfigurationRecorder\n                {'ConfigurationRecorderName': 'default'},\n                {},   DescribeConfigurationRecorders\n                {}   DescribeDeliveryChannels\n            ]\n        )\n\n    def test_subscribe_when_bucket_exists_and_sns_topic_arn_provided(self):\n        self.parsed_responses.pop(1)\n        self.prefix += ' --s3-bucket mybucket --sns-topic arn:mytopic'\n        self.prefix += ' --iam-role myrole'\n        self.run_cmd(self.prefix)\n\n        self.assertEqual(len(self.operations_called), 6)\n        list_of_operation_names_called = []\n        list_of_parameters_called = []\n        for operation_called in self.operations_called:\n            list_of_operation_names_called.append(operation_called[0].name)\n            list_of_parameters_called.append(operation_called[1])\n\n        self.assertEqual(\n            list_of_operation_names_called, [\n                'HeadBucket',\n                'PutConfigurationRecorder',\n                'PutDeliveryChannel',\n                'StartConfigurationRecorder',\n                'DescribeConfigurationRecorders',\n                'DescribeDeliveryChannels'\n            ]\n        )\n        self.assertEqual(\n            list_of_parameters_called, [\n                {'Bucket': 'mybucket'},   S3 HeadBucket\n                {'ConfigurationRecorder': {   PutConfigurationRecorder\n                    'name': 'default', 'roleARN': 'myrole'}},\n                {'DeliveryChannel': {   PutDeliveryChannel\n                    'name': 'default',\n                    's3BucketName': 'mybucket',\n                    'snsTopicARN': 'arn:mytopic'}},\n                 StartConfigurationRecorder\n                {'ConfigurationRecorderName': 'default'},\n                {},   DescribeConfigurationRecorders\n                {}   DescribeDeliveryChannels\n            ]\n        )\n\n    def test_subscribe_when_bucket_needs_to_be_created(self):\n        with mock.patch('botocore.endpoint.Session.send') as \\\n                http_session_send_patch:\n             Mock for HeadBucket request\n            head_bucket_response = mock.Mock()\n            head_bucket_response.status_code = 404\n            head_bucket_response.content = b''\n            head_bucket_response.headers = {}\n\n             Mock for CreateBucket request\n            create_bucket_response = mock.Mock()\n            create_bucket_response.status_code = 200\n            create_bucket_response.content = b''\n            create_bucket_response.headers = {}\n\n            http_session_send_patch.side_effect = [\n                head_bucket_response, create_bucket_response\n            ]\n\n            s3_client = self.driver.session.create_client('s3')\n            bucket_helper = S3BucketHelper(s3_client)\n            bucket_helper.prepare_bucket('mybucket')\n            send_call_list = http_session_send_patch.call_args_list\n            self.assertEqual(send_call_list[0][0][0].method, 'HEAD')\n             Since the HeadObject fails with 404, the CreateBucket which is\n             is a PUT request should be made.\n            self.assertEqual(send_call_list[1][0][0].method, 'PUT')\n", "comments": "  copyright 2015 amazon com  inc  affiliates  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   aws amazon com apache2 0         license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license     s3 headbucket    sns createtopic    putconfigurationrecorder    putdeliverychannel    startconfigurationrecorder    describeconfigurationrecorders    describedeliverychannels    s3 headbucket    sns createtopic    putconfigurationrecorder    putdeliverychannel    startconfigurationrecorder    describeconfigurationrecorders    describedeliverychannels    s3 headbucket    putconfigurationrecorder    putdeliverychannel    startconfigurationrecorder    describeconfigurationrecorders    describedeliverychannels    mock headbucket request    mock createbucket request    since headobject fails 404  createbucket    put request made  ", "content": "# Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://aws.amazon.com/apache2.0/\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\nimport mock\n\nfrom awscli.testutils import BaseAWSCommandParamsTest\nfrom awscli.customizations.configservice.subscribe import S3BucketHelper\n\n\nclass TestSubscribe(BaseAWSCommandParamsTest):\n    prefix = 'configservice subscribe'\n\n    def setUp(self):\n        super(TestSubscribe, self).setUp()\n        self.parsed_responses = [\n            {},  # S3 HeadBucket\n            {'TopicArn': 'my-topic-arn'},  # SNS CreateTopic\n            {},  # PutConfigurationRecorder\n            {},  # PutDeliveryChannel\n            {},  # StartConfigurationRecorder\n            {'ConfigurationRecorders': {}},  # DescribeConfigurationRecorders\n            {'DeliveryChannels': {}}  # DescribeDeliveryChannels\n        ]\n\n    def test_subscribe_when_bucket_exists_and_new_sns_topic(self):\n        self.prefix += ' --s3-bucket mybucket --sns-topic mytopic'\n        self.prefix += ' --iam-role myrole'\n        self.run_cmd(self.prefix)\n\n        self.assertEqual(len(self.operations_called), 7)\n        list_of_operation_names_called = []\n        list_of_parameters_called = []\n        for operation_called in self.operations_called:\n            list_of_operation_names_called.append(operation_called[0].name)\n            list_of_parameters_called.append(operation_called[1])\n\n        self.assertEqual(\n            list_of_operation_names_called, [\n                'HeadBucket',\n                'CreateTopic',\n                'PutConfigurationRecorder',\n                'PutDeliveryChannel',\n                'StartConfigurationRecorder',\n                'DescribeConfigurationRecorders',\n                'DescribeDeliveryChannels'\n            ]\n        )\n        self.assertEqual(\n            list_of_parameters_called, [\n                {'Bucket': 'mybucket'},  # S3 HeadBucket\n                {'Name': 'mytopic'},  # SNS CreateTopic\n                {'ConfigurationRecorder': {  # PutConfigurationRecorder\n                    'name': 'default', 'roleARN': 'myrole'}},\n                {'DeliveryChannel': {  # PutDeliveryChannel\n                    'name': 'default',\n                    's3BucketName': 'mybucket',\n                    'snsTopicARN': 'my-topic-arn'}},\n                # StartConfigurationRecorder\n                {'ConfigurationRecorderName': 'default'},\n                {},  # DescribeConfigurationRecorders\n                {}  # DescribeDeliveryChannels\n            ]\n        )\n\n    def test_subscribe_when_bucket_exists_and_sns_topic_arn_provided(self):\n        self.parsed_responses.pop(1)\n        self.prefix += ' --s3-bucket mybucket --sns-topic arn:mytopic'\n        self.prefix += ' --iam-role myrole'\n        self.run_cmd(self.prefix)\n\n        self.assertEqual(len(self.operations_called), 6)\n        list_of_operation_names_called = []\n        list_of_parameters_called = []\n        for operation_called in self.operations_called:\n            list_of_operation_names_called.append(operation_called[0].name)\n            list_of_parameters_called.append(operation_called[1])\n\n        self.assertEqual(\n            list_of_operation_names_called, [\n                'HeadBucket',\n                'PutConfigurationRecorder',\n                'PutDeliveryChannel',\n                'StartConfigurationRecorder',\n                'DescribeConfigurationRecorders',\n                'DescribeDeliveryChannels'\n            ]\n        )\n        self.assertEqual(\n            list_of_parameters_called, [\n                {'Bucket': 'mybucket'},  # S3 HeadBucket\n                {'ConfigurationRecorder': {  # PutConfigurationRecorder\n                    'name': 'default', 'roleARN': 'myrole'}},\n                {'DeliveryChannel': {  # PutDeliveryChannel\n                    'name': 'default',\n                    's3BucketName': 'mybucket',\n                    'snsTopicARN': 'arn:mytopic'}},\n                # StartConfigurationRecorder\n                {'ConfigurationRecorderName': 'default'},\n                {},  # DescribeConfigurationRecorders\n                {}  # DescribeDeliveryChannels\n            ]\n        )\n\n    def test_subscribe_when_bucket_needs_to_be_created(self):\n        with mock.patch('botocore.endpoint.Session.send') as \\\n                http_session_send_patch:\n            # Mock for HeadBucket request\n            head_bucket_response = mock.Mock()\n            head_bucket_response.status_code = 404\n            head_bucket_response.content = b''\n            head_bucket_response.headers = {}\n\n            # Mock for CreateBucket request\n            create_bucket_response = mock.Mock()\n            create_bucket_response.status_code = 200\n            create_bucket_response.content = b''\n            create_bucket_response.headers = {}\n\n            http_session_send_patch.side_effect = [\n                head_bucket_response, create_bucket_response\n            ]\n\n            s3_client = self.driver.session.create_client('s3')\n            bucket_helper = S3BucketHelper(s3_client)\n            bucket_helper.prepare_bucket('mybucket')\n            send_call_list = http_session_send_patch.call_args_list\n            self.assertEqual(send_call_list[0][0][0].method, 'HEAD')\n            # Since the HeadObject fails with 404, the CreateBucket which is\n            # is a PUT request should be made.\n            self.assertEqual(send_call_list[1][0][0].method, 'PUT')\n", "description": "Universal Command Line Interface for Amazon Web Services", "file_name": "test_subscribe.py", "id": "78fab091f4961d14154c72da31d8a874", "language": "Python", "project_name": "aws-cli", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/aws-aws-cli/aws-aws-cli-d705c60/tests/functional/configservice/test_subscribe.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:33:26Z", "url": "https://github.com/aws/aws-cli", "wiki": false}