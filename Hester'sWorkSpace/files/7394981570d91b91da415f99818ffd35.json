{"author": "donnemartin", "code": " -*- coding: utf-8 -*-\n\n\n\n Creative Commons Attribution 4.0 International License (CC BY 4.0)\n http://creativecommons.org/licenses/by/4.0/\n\nimport mock\nimport os\nimport unittest\n\nfrom awesome.awesome import Awesome\nfrom tests.data.readme_expected import readme_expected\nfrom tests.mock_github import MockGitHub, MockRepo\n\n\nclass AwesomeTest(unittest.TestCase):\n\n    def setUp(self):\n        self.repos = self.create_repos()\n        self.github = MockGitHub(self.repos)\n        self.awesome = Awesome(self.github)\n\n    def create_repos(self):\n        return [\n            MockRepo('foo', 10),\n            MockRepo('bar', 150),\n            MockRepo('baz', 270),\n            MockRepo('qux', 550),\n            MockRepo('foobar', 1200),\n            MockRepo('bazqux', 9000),\n            MockRepo('awesome-aws', 9000),\n        ]\n\n    @mock.patch('awesome.awesome.click')\n    def test_rock_it(self, mock_click):\n        README = os.path.join(os.path.dirname(__file__),\n                              'data/README.md')\n        README_RESULT = os.path.join(os.path.dirname(__file__),\n                                     'data/README_RESULT.md')\n        self.awesome.rock_it(README, README_RESULT)\n        result = []\n        with open(README_RESULT, 'r') as f:\n            for line in f:\n                result.append(line)\n        assert result == readme_expected\n        assert mock.call.secho('Broken repos:', fg='red') \\\n            in mock_click.mock_calls\n        assert mock.call.secho('  https://github.com/user/broken', fg='red') \\\n            in mock_click.mock_calls\n        assert mock.call.secho('Rate limit: 9000', fg='blue') \\\n            in mock_click.mock_calls\n        assert mock.call.secho('Updated ' + README_RESULT, fg='blue') \\\n            in mock_click.mock_calls\n", "comments": "      coding  utf 8        copyright 2015 donne martin  all rights reserved        creative commons attribution 4 0 international license (cc by 4 0)    http   creativecommons org licenses 4 0  ", "content": "# -*- coding: utf-8 -*-\n\n# Copyright 2015 Donne Martin. All Rights Reserved.\n#\n# Creative Commons Attribution 4.0 International License (CC BY 4.0)\n# http://creativecommons.org/licenses/by/4.0/\n\nimport mock\nimport os\nimport unittest\n\nfrom awesome.awesome import Awesome\nfrom tests.data.readme_expected import readme_expected\nfrom tests.mock_github import MockGitHub, MockRepo\n\n\nclass AwesomeTest(unittest.TestCase):\n\n    def setUp(self):\n        self.repos = self.create_repos()\n        self.github = MockGitHub(self.repos)\n        self.awesome = Awesome(self.github)\n\n    def create_repos(self):\n        return [\n            MockRepo('foo', 10),\n            MockRepo('bar', 150),\n            MockRepo('baz', 270),\n            MockRepo('qux', 550),\n            MockRepo('foobar', 1200),\n            MockRepo('bazqux', 9000),\n            MockRepo('awesome-aws', 9000),\n        ]\n\n    @mock.patch('awesome.awesome.click')\n    def test_rock_it(self, mock_click):\n        README = os.path.join(os.path.dirname(__file__),\n                              'data/README.md')\n        README_RESULT = os.path.join(os.path.dirname(__file__),\n                                     'data/README_RESULT.md')\n        self.awesome.rock_it(README, README_RESULT)\n        result = []\n        with open(README_RESULT, 'r') as f:\n            for line in f:\n                result.append(line)\n        assert result == readme_expected\n        assert mock.call.secho('Broken repos:', fg='red') \\\n            in mock_click.mock_calls\n        assert mock.call.secho('  https://github.com/user/broken', fg='red') \\\n            in mock_click.mock_calls\n        assert mock.call.secho('Rate limit: 9000', fg='blue') \\\n            in mock_click.mock_calls\n        assert mock.call.secho('Updated ' + README_RESULT, fg='blue') \\\n            in mock_click.mock_calls\n", "description": "A curated list of awesome Amazon Web Services (AWS) libraries, open source repos, guides, blogs, and other resources.  Featuring the Fiery Meter of AWSome.", "file_name": "test_awesome.py", "id": "7394981570d91b91da415f99818ffd35", "language": "Python", "project_name": "awesome-aws", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-awesome-aws/donnemartin-awesome-aws-91d6a78/tests/test_awesome.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:00:27Z", "url": "https://github.com/donnemartin/awesome-aws", "wiki": true}