{"author": "kivy", "code": "\n\nprint('testing!')\nimport ctypes\nprint('imported ctypes')\nprint(ctypes.__dict__)\nprint('dict done')\nimport ctypes.util\nprint('imported util')\nprint(ctypes.util.find_library)\n\nimport vispy\n# vispy.set_log_level('debug')\n\nimport sys\nfrom vispy import scene\nfrom vispy.geometry.torusknot import TorusKnot\n\nfrom colorsys import hsv_to_rgb\nimport numpy as np\n\ncanvas = scene.SceneCanvas(keys='interactive', bgcolor='white')\ncanvas.unfreeze()\ncanvas.view = canvas.central_widget.add_view()\n\npoints1 = TorusKnot(5, 3).first_component[:-1]\npoints1[:, 0] -= 20.\npoints1[:, 2] -= 15.\n\npoints2 = points1.copy()\npoints2[:, 2] += 30.\n\npoints3 = points1.copy()\npoints3[:, 0] += 41.\npoints3[:, 2] += 30\n\npoints4 = points1.copy()\npoints4[:, 0] += 41.\n\ncolors = np.linspace(0, 1, len(points1))\ncolors = np.array([hsv_to_rgb(c, 1, 1) for c in colors])\n\nvertex_colors = np.random.random(8 * len(points1))\nvertex_colors = np.array([hsv_to_rgb(c, 1, 1) for c in vertex_colors])\n\nl1 = scene.visuals.Tube(points1,\n                        shading='flat',\n                        color=colors,  \n                                       \n                        vertex_colors=vertex_colors,\n                        tube_points=8)\n\nl2 = scene.visuals.Tube(points2,\n                        color=['red', 'green', 'blue'],\n                        shading='smooth',\n                        tube_points=8)\n\nl3 = scene.visuals.Tube(points3,\n                        color=colors,\n                        shading='flat',\n                        tube_points=8,\n                        closed=True)\n\nl4 = scene.visuals.Tube(points4,\n                        color=colors,\n                        shading='flat',\n                        tube_points=8,\n                        mode='lines')\n\ncanvas.view.add(l1)\ncanvas.view.add(l2)\ncanvas.view.add(l3)\ncanvas.view.add(l4)\ncanvas.view.camera = scene.TurntableCamera()\n\ncanvas.view.camera.set_range((-20, 20), (-20, 20), (-20, 20))\ncanvas.show()\n\nif __name__ == '__main__':\n    if sys.flags.interactive != 1:\n        canvas.app.run()\n", "comments": "    demonstration tube        vispy set log level( debug )    overridden    vertex colors argument    tube expose limits yet ", "content": "\"\"\"\nDemonstration of Tube\n\"\"\"\n\nprint('testing!')\nimport ctypes\nprint('imported ctypes')\nprint(ctypes.__dict__)\nprint('dict done')\nimport ctypes.util\nprint('imported util')\nprint(ctypes.util.find_library)\n\nimport vispy\n# vispy.set_log_level('debug')\n\nimport sys\nfrom vispy import scene\nfrom vispy.geometry.torusknot import TorusKnot\n\nfrom colorsys import hsv_to_rgb\nimport numpy as np\n\ncanvas = scene.SceneCanvas(keys='interactive', bgcolor='white')\ncanvas.unfreeze()\ncanvas.view = canvas.central_widget.add_view()\n\npoints1 = TorusKnot(5, 3).first_component[:-1]\npoints1[:, 0] -= 20.\npoints1[:, 2] -= 15.\n\npoints2 = points1.copy()\npoints2[:, 2] += 30.\n\npoints3 = points1.copy()\npoints3[:, 0] += 41.\npoints3[:, 2] += 30\n\npoints4 = points1.copy()\npoints4[:, 0] += 41.\n\ncolors = np.linspace(0, 1, len(points1))\ncolors = np.array([hsv_to_rgb(c, 1, 1) for c in colors])\n\nvertex_colors = np.random.random(8 * len(points1))\nvertex_colors = np.array([hsv_to_rgb(c, 1, 1) for c in vertex_colors])\n\nl1 = scene.visuals.Tube(points1,\n                        shading='flat',\n                        color=colors,  # this is overridden by\n                                       # the vertex_colors argument\n                        vertex_colors=vertex_colors,\n                        tube_points=8)\n\nl2 = scene.visuals.Tube(points2,\n                        color=['red', 'green', 'blue'],\n                        shading='smooth',\n                        tube_points=8)\n\nl3 = scene.visuals.Tube(points3,\n                        color=colors,\n                        shading='flat',\n                        tube_points=8,\n                        closed=True)\n\nl4 = scene.visuals.Tube(points4,\n                        color=colors,\n                        shading='flat',\n                        tube_points=8,\n                        mode='lines')\n\ncanvas.view.add(l1)\ncanvas.view.add(l2)\ncanvas.view.add(l3)\ncanvas.view.add(l4)\ncanvas.view.camera = scene.TurntableCamera()\n# tube does not expose its limits yet\ncanvas.view.camera.set_range((-20, 20), (-20, 20), (-20, 20))\ncanvas.show()\n\nif __name__ == '__main__':\n    if sys.flags.interactive != 1:\n        canvas.app.run()\n", "description": "Turn your Python application into an Android APK", "file_name": "main.py", "id": "cf2da0c8d94e33bf75f723090f0685a5", "language": "Python", "project_name": "python-for-android", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/kivy-python-for-android/kivy-python-for-android-a036f44/testapps/testapp_vispy/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:42:42Z", "url": "https://github.com/kivy/python-for-android", "wiki": false}