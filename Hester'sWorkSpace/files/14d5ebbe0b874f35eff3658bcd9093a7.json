{"author": "ansible", "code": "\n\n (c) 2017 Apstra Inc, <community@apstra.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['deprecated'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: aos_external_router\nauthor: Damien Garros (@dgarros)\nversion_added: \"2.3\"\nshort_description: Manage AOS External Router\ndeprecated:\n    removed_in: \"2.9\"\n    why: This module does not support AOS 2.1 or later\n    alternative: See new modules at U(https://www.ansible.com/ansible-apstra).\ndescription:\n  - Apstra AOS External Router module let you manage your External Router easily. You can create\n    create and delete External Router by Name, ID or by using a JSON File. This module\n    is idempotent and support the I(check) mode. It's using the AOS REST API.\nrequirements:\n  - \"aos-pyez >= 0.6.0\"\noptions:\n  session:\n    description:\n      - An existing AOS session as obtained by M(aos_login) module.\n    required: true\n  name:\n    description:\n      - Name of the External Router to manage.\n        Only one of I(name), I(id) or I(content) can be set.\n  id:\n    description:\n      - AOS Id of the External Router to manage (can't be used to create a new External Router),\n        Only one of I(name), I(id) or I(content) can be set.\n  content:\n    description:\n      - Datastructure of the External Router to create. The format is defined by the\n        I(content_format) parameter. It's the same datastructure that is returned\n        on success in I(value).\n  state:\n    description:\n      - Indicate what is the expected state of the External Router (present or not).\n    default: present\n    choices: ['present', 'absent']\n  loopback:\n    description:\n      - IP address of the Loopback interface of the external_router.\n  asn:\n    description:\n      - ASN id of the external_router.\n'''\n\nEXAMPLES = '''\n\n- name: \"Create an External Router\"\n  aos_external_router:\n    session: \"{{ aos_session }}\"\n    name: \"my-external-router\"\n    loopback: 10.0.0.1\n    asn: 65000\n    state: present\n\n- name: \"Check if an External Router exist by ID\"\n  aos_external_router:\n    session: \"{{ aos_session }}\"\n    name: \"45ab26fc-c2ed-4307-b330-0870488fa13e\"\n    state: present\n\n- name: \"Delete an External Router by name\"\n  aos_external_router:\n    session: \"{{ aos_session }}\"\n    name: \"my-external-router\"\n    state: absent\n\n- name: \"Delete an External Router by id\"\n  aos_external_router:\n    session: \"{{ aos_session }}\"\n    id: \"45ab26fc-c2ed-4307-b330-0870488fa13e\"\n    state: absent\n\n Save an External Router to a file\n- name: \"Access External Router 1/3\"\n  aos_external_router:\n    session: \"{{ aos_session }}\"\n    name: \"my-external-router\"\n    state: present\n  register: external_router\n\n- name: \"Save External Router into a file in JSON 2/3\"\n  copy:\n    content: \"{{ external_router.value || to_nice_yaml }}\"\n    dest: external_router_saved.yaml\n\n- name: \"Load External Router from a JSON file\"\n  aos_external_router:\n    session: \"{{ aos_session }}\"\n    content: \"{{ lookup('file', 'resources/external_router_saved.json') }}\"\n    state: present\n\n- name: \"Load External Router from a YAML file\"\n  aos_external_router:\n    session: \"{{ aos_session }}\"\n    content: \"{{ lookup('file', 'resources/external_router_saved.yaml') }}\"\n    state: present\n'''\n\nRETURNS = '''\nname:\n  description: Name of the External Router\n  returned: always\n  type: str\n  sample: Server-IpAddrs\n\nid:\n  description: AOS unique ID assigned to the External Router\n  returned: always\n  type: str\n  sample: fcc4ac1c-e249-4fe7-b458-2138bfb44c06\n\nvalue:\n  description: Value of the object as returned by the AOS Server\n  returned: always\n  type: dict\n  sample: {'...'}\n'''\n\nimport json\nimport time\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.aos.aos import get_aos_session, find_collection_item, do_load_resource, check_aos_version, content_to_dict\n\n\ndef create_new_ext_router(module, my_ext_router, name, loopback, asn):\n\n     Create value\n    datum = dict(display_name=name, address=loopback, asn=asn)\n\n    my_ext_router.datum = datum\n\n     Write to AOS\n    return my_ext_router.write()\n\n\n State Processing\n\n\n\ndef ext_router_absent(module, aos, my_ext_router):\n\n    margs = module.params\n\n     If the module do not exist, return directly\n    if my_ext_router.exists is False:\n        module.exit_json(changed=False,\n                         name=margs['name'],\n                         id=margs['id'],\n                         value={})\n\n     If not in check mode, delete External Router\n    if not module.check_mode:\n        try:\n             Add Sleep before delete to workaround a bug in AOS\n            time.sleep(2)\n            my_ext_router.delete()\n        except:\n            module.fail_json(msg=\"An error occurred, while trying to delete the External Router\")\n\n    module.exit_json(changed=True,\n                     name=my_ext_router.name,\n                     id=my_ext_router.id,\n                     value={})\n\n\ndef ext_router_present(module, aos, my_ext_router):\n\n    margs = module.params\n\n     if content is defined, create object from Content\n    if my_ext_router.exists is False and margs['content'] is not None:\n        do_load_resource(module, aos.ExternalRouters, module.params['content']['display_name'])\n\n     if my_ext_router doesn't exist already, create a new one\n    if my_ext_router.exists is False and margs['name'] is None:\n        module.fail_json(msg=\"Name is mandatory for module that don't exist currently\")\n\n    elif my_ext_router.exists is False:\n\n        if not module.check_mode:\n            try:\n                my_new_ext_router = create_new_ext_router(module,\n                                                          my_ext_router,\n                                                          margs['name'],\n                                                          margs['loopback'],\n                                                          margs['asn'])\n                my_ext_router = my_new_ext_router\n            except:\n                module.fail_json(msg=\"An error occurred while trying to create a new External Router\")\n\n        module.exit_json(changed=True,\n                         name=my_ext_router.name,\n                         id=my_ext_router.id,\n                         value=my_ext_router.value)\n\n     if external Router already exist, check if loopback and ASN are the same\n     if same just return the object and report change false\n    loopback = None\n    asn = None\n\n     Identify the Loopback, parameter 'loopback' has priority over 'content'\n    if margs['loopback'] is not None:\n        loopback = margs['loopback']\n    elif margs['content'] is not None:\n        if 'address' in margs['content'].keys():\n            loopback = margs['content']['address']\n\n     Identify the ASN, parameter 'asn' has priority over 'content'\n    if margs['asn'] is not None:\n        asn = margs['asn']\n    elif margs['content'] is not None:\n        if 'asn' in margs['content'].keys():\n            asn = margs['content']['asn']\n\n     Compare Loopback and ASN if defined\n    if loopback is not None:\n        if loopback != my_ext_router.value['address']:\n            module.fail_json(msg=\"my_ext_router already exist but Loopback is different, currently not supported to update a module\")\n\n    if asn is not None:\n        if int(asn) != int(my_ext_router.value['asn']):\n            module.fail_json(msg=\"my_ext_router already exist but ASN is different, currently not supported to update a module\")\n\n    module.exit_json(changed=False,\n                     name=my_ext_router.name,\n                     id=my_ext_router.id,\n                     value=my_ext_router.value)\n\n\n Main Function\n\n\n\ndef ext_router(module):\n\n    margs = module.params\n\n    try:\n        aos = get_aos_session(module, margs['session'])\n    except:\n        module.fail_json(msg=\"Unable to login to the AOS server\")\n\n    item_name = False\n    item_id = False\n\n    if margs['content'] is not None:\n\n        content = content_to_dict(module, margs['content'])\n\n        if 'display_name' in content.keys():\n            item_name = content['display_name']\n        else:\n            module.fail_json(msg=\"Unable to extract 'display_name' from 'content'\")\n\n    elif margs['name'] is not None:\n        item_name = margs['name']\n\n    elif margs['id'] is not None:\n        item_id = margs['id']\n\n     ----------------------------------------------------\n     Find Object if available based on ID or Name\n     ----------------------------------------------------\n    try:\n        my_ext_router = find_collection_item(aos.ExternalRouters,\n                                             item_name=item_name,\n                                             item_id=item_id)\n    except:\n        module.fail_json(msg=\"Unable to find the IP Pool based on name or ID, something went wrong\")\n\n     ----------------------------------------------------\n     Proceed based on State value\n     ----------------------------------------------------\n    if margs['state'] == 'absent':\n\n        ext_router_absent(module, aos, my_ext_router)\n\n    elif margs['state'] == 'present':\n\n        ext_router_present(module, aos, my_ext_router)\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            session=dict(required=True, type=\"dict\"),\n            name=dict(required=False),\n            id=dict(required=False),\n            content=dict(required=False, type=\"json\"),\n            state=dict(required=False,\n                       choices=['present', 'absent'],\n                       default=\"present\"),\n            loopback=dict(required=False),\n            asn=dict(required=False)\n        ),\n        mutually_exclusive=[('name', 'id', 'content')],\n        required_one_of=[('name', 'id', 'content')],\n        supports_check_mode=True\n    )\n\n     Check if aos-pyez is present and match the minimum version\n    check_aos_version(module, '0.6.0')\n\n    ext_router(module)\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  aos external router author  damien garros ( dgarros) version added   2 3  short description  manage aos external router deprecated      removed   2 9       this module support aos 2 1 later     alternative  see new modules u(https   www ansible com ansible apstra)  description      apstra aos external router module let manage external router easily  you create     create delete external router name  id using json file  this module     idempotent support i(check) mode  it using aos rest api  requirements       aos pyez    0 6 0  options    session      description          an existing aos session obtained m(aos login) module      required  true   name      description          name external router manage          only one i(name)  i(id) i(content) set    id      description          aos id external router manage (can used create new external router)          only one i(name)  i(id) i(content) set    content      description          datastructure external router create  the format defined         i(content format) parameter  it datastructure returned         success i(value)    state      description          indicate expected state external router (present not)      default  present     choices    present    absent     loopback      description          ip address loopback interface external router    asn      description          asn id external router       examples          name   create external router    aos external router      session      aos session         name   external router      loopback  10 0 0 1     asn  65000     state  present    name   check external router exist id    aos external router      session      aos session         name   45ab26fc c2ed 4307 b330 0870488fa13e      state  present    name   delete external router name    aos external router      session      aos session         name   external router      state  absent    name   delete external router id    aos external router      session      aos session         id   45ab26fc c2ed 4307 b330 0870488fa13e      state  absent    save external router file   name   access external router 1 3    aos external router      session      aos session         name   external router      state  present   register  external router    name   save external router file json 2 3    copy      content      external router value   nice json         dest  external router saved json    name   save external router file yaml 3 3    copy      content      external router value   nice yaml         dest  external router saved yaml    name   load external router json file    aos external router      session      aos session         content      lookup( file    resources external router saved json )         state  present    name   load external router yaml file    aos external router      session      aos session         content      lookup( file    resources external router saved yaml )         state  present      returns       name    description  name external router   returned  always   type  str   sample  server ipaddrs  id    description  aos unique id assigned external router   returned  always   type  str   sample  fcc4ac1c e249 4fe7 b458 2138bfb44c06  value    description  value object returned aos server   returned  always   type  dict   sample                  usr bin python       (c) 2017 apstra inc   community apstra com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          save external router file    create value    write aos                                                               state processing                                                               if module exist  return directly    if check mode  delete external router    add sleep delete workaround bug aos    content defined  create object content    ext router exist already  create new one    external router already exist  check loopback asn    return object report change false    identify loopback  parameter  loopback  priority  content     identify asn  parameter  asn  priority  content     compare loopback asn defined                                                               main function                                                                                                                       find object available based id name                                                                                                                    proceed based state value                                                            check aos pyez present match minimum version ", "content": "#!/usr/bin/python\n#\n# (c) 2017 Apstra Inc, <community@apstra.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['deprecated'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: aos_external_router\nauthor: Damien Garros (@dgarros)\nversion_added: \"2.3\"\nshort_description: Manage AOS External Router\ndeprecated:\n    removed_in: \"2.9\"\n    why: This module does not support AOS 2.1 or later\n    alternative: See new modules at U(https://www.ansible.com/ansible-apstra).\ndescription:\n  - Apstra AOS External Router module let you manage your External Router easily. You can create\n    create and delete External Router by Name, ID or by using a JSON File. This module\n    is idempotent and support the I(check) mode. It's using the AOS REST API.\nrequirements:\n  - \"aos-pyez >= 0.6.0\"\noptions:\n  session:\n    description:\n      - An existing AOS session as obtained by M(aos_login) module.\n    required: true\n  name:\n    description:\n      - Name of the External Router to manage.\n        Only one of I(name), I(id) or I(content) can be set.\n  id:\n    description:\n      - AOS Id of the External Router to manage (can't be used to create a new External Router),\n        Only one of I(name), I(id) or I(content) can be set.\n  content:\n    description:\n      - Datastructure of the External Router to create. The format is defined by the\n        I(content_format) parameter. It's the same datastructure that is returned\n        on success in I(value).\n  state:\n    description:\n      - Indicate what is the expected state of the External Router (present or not).\n    default: present\n    choices: ['present', 'absent']\n  loopback:\n    description:\n      - IP address of the Loopback interface of the external_router.\n  asn:\n    description:\n      - ASN id of the external_router.\n'''\n\nEXAMPLES = '''\n\n- name: \"Create an External Router\"\n  aos_external_router:\n    session: \"{{ aos_session }}\"\n    name: \"my-external-router\"\n    loopback: 10.0.0.1\n    asn: 65000\n    state: present\n\n- name: \"Check if an External Router exist by ID\"\n  aos_external_router:\n    session: \"{{ aos_session }}\"\n    name: \"45ab26fc-c2ed-4307-b330-0870488fa13e\"\n    state: present\n\n- name: \"Delete an External Router by name\"\n  aos_external_router:\n    session: \"{{ aos_session }}\"\n    name: \"my-external-router\"\n    state: absent\n\n- name: \"Delete an External Router by id\"\n  aos_external_router:\n    session: \"{{ aos_session }}\"\n    id: \"45ab26fc-c2ed-4307-b330-0870488fa13e\"\n    state: absent\n\n# Save an External Router to a file\n- name: \"Access External Router 1/3\"\n  aos_external_router:\n    session: \"{{ aos_session }}\"\n    name: \"my-external-router\"\n    state: present\n  register: external_router\n\n- name: \"Save External Router into a file in JSON 2/3\"\n  copy:\n    content: \"{{ external_router.value | to_nice_json }}\"\n    dest: external_router_saved.json\n\n- name: \"Save External Router into a file in YAML 3/3\"\n  copy:\n    content: \"{{ external_router.value | to_nice_yaml }}\"\n    dest: external_router_saved.yaml\n\n- name: \"Load External Router from a JSON file\"\n  aos_external_router:\n    session: \"{{ aos_session }}\"\n    content: \"{{ lookup('file', 'resources/external_router_saved.json') }}\"\n    state: present\n\n- name: \"Load External Router from a YAML file\"\n  aos_external_router:\n    session: \"{{ aos_session }}\"\n    content: \"{{ lookup('file', 'resources/external_router_saved.yaml') }}\"\n    state: present\n'''\n\nRETURNS = '''\nname:\n  description: Name of the External Router\n  returned: always\n  type: str\n  sample: Server-IpAddrs\n\nid:\n  description: AOS unique ID assigned to the External Router\n  returned: always\n  type: str\n  sample: fcc4ac1c-e249-4fe7-b458-2138bfb44c06\n\nvalue:\n  description: Value of the object as returned by the AOS Server\n  returned: always\n  type: dict\n  sample: {'...'}\n'''\n\nimport json\nimport time\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.aos.aos import get_aos_session, find_collection_item, do_load_resource, check_aos_version, content_to_dict\n\n\ndef create_new_ext_router(module, my_ext_router, name, loopback, asn):\n\n    # Create value\n    datum = dict(display_name=name, address=loopback, asn=asn)\n\n    my_ext_router.datum = datum\n\n    # Write to AOS\n    return my_ext_router.write()\n\n#########################################################\n# State Processing\n#########################################################\n\n\ndef ext_router_absent(module, aos, my_ext_router):\n\n    margs = module.params\n\n    # If the module do not exist, return directly\n    if my_ext_router.exists is False:\n        module.exit_json(changed=False,\n                         name=margs['name'],\n                         id=margs['id'],\n                         value={})\n\n    # If not in check mode, delete External Router\n    if not module.check_mode:\n        try:\n            # Add Sleep before delete to workaround a bug in AOS\n            time.sleep(2)\n            my_ext_router.delete()\n        except:\n            module.fail_json(msg=\"An error occurred, while trying to delete the External Router\")\n\n    module.exit_json(changed=True,\n                     name=my_ext_router.name,\n                     id=my_ext_router.id,\n                     value={})\n\n\ndef ext_router_present(module, aos, my_ext_router):\n\n    margs = module.params\n\n    # if content is defined, create object from Content\n    if my_ext_router.exists is False and margs['content'] is not None:\n        do_load_resource(module, aos.ExternalRouters, module.params['content']['display_name'])\n\n    # if my_ext_router doesn't exist already, create a new one\n    if my_ext_router.exists is False and margs['name'] is None:\n        module.fail_json(msg=\"Name is mandatory for module that don't exist currently\")\n\n    elif my_ext_router.exists is False:\n\n        if not module.check_mode:\n            try:\n                my_new_ext_router = create_new_ext_router(module,\n                                                          my_ext_router,\n                                                          margs['name'],\n                                                          margs['loopback'],\n                                                          margs['asn'])\n                my_ext_router = my_new_ext_router\n            except:\n                module.fail_json(msg=\"An error occurred while trying to create a new External Router\")\n\n        module.exit_json(changed=True,\n                         name=my_ext_router.name,\n                         id=my_ext_router.id,\n                         value=my_ext_router.value)\n\n    # if external Router already exist, check if loopback and ASN are the same\n    # if same just return the object and report change false\n    loopback = None\n    asn = None\n\n    # Identify the Loopback, parameter 'loopback' has priority over 'content'\n    if margs['loopback'] is not None:\n        loopback = margs['loopback']\n    elif margs['content'] is not None:\n        if 'address' in margs['content'].keys():\n            loopback = margs['content']['address']\n\n    # Identify the ASN, parameter 'asn' has priority over 'content'\n    if margs['asn'] is not None:\n        asn = margs['asn']\n    elif margs['content'] is not None:\n        if 'asn' in margs['content'].keys():\n            asn = margs['content']['asn']\n\n    # Compare Loopback and ASN if defined\n    if loopback is not None:\n        if loopback != my_ext_router.value['address']:\n            module.fail_json(msg=\"my_ext_router already exist but Loopback is different, currently not supported to update a module\")\n\n    if asn is not None:\n        if int(asn) != int(my_ext_router.value['asn']):\n            module.fail_json(msg=\"my_ext_router already exist but ASN is different, currently not supported to update a module\")\n\n    module.exit_json(changed=False,\n                     name=my_ext_router.name,\n                     id=my_ext_router.id,\n                     value=my_ext_router.value)\n\n#########################################################\n# Main Function\n#########################################################\n\n\ndef ext_router(module):\n\n    margs = module.params\n\n    try:\n        aos = get_aos_session(module, margs['session'])\n    except:\n        module.fail_json(msg=\"Unable to login to the AOS server\")\n\n    item_name = False\n    item_id = False\n\n    if margs['content'] is not None:\n\n        content = content_to_dict(module, margs['content'])\n\n        if 'display_name' in content.keys():\n            item_name = content['display_name']\n        else:\n            module.fail_json(msg=\"Unable to extract 'display_name' from 'content'\")\n\n    elif margs['name'] is not None:\n        item_name = margs['name']\n\n    elif margs['id'] is not None:\n        item_id = margs['id']\n\n    # ----------------------------------------------------\n    # Find Object if available based on ID or Name\n    # ----------------------------------------------------\n    try:\n        my_ext_router = find_collection_item(aos.ExternalRouters,\n                                             item_name=item_name,\n                                             item_id=item_id)\n    except:\n        module.fail_json(msg=\"Unable to find the IP Pool based on name or ID, something went wrong\")\n\n    # ----------------------------------------------------\n    # Proceed based on State value\n    # ----------------------------------------------------\n    if margs['state'] == 'absent':\n\n        ext_router_absent(module, aos, my_ext_router)\n\n    elif margs['state'] == 'present':\n\n        ext_router_present(module, aos, my_ext_router)\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            session=dict(required=True, type=\"dict\"),\n            name=dict(required=False),\n            id=dict(required=False),\n            content=dict(required=False, type=\"json\"),\n            state=dict(required=False,\n                       choices=['present', 'absent'],\n                       default=\"present\"),\n            loopback=dict(required=False),\n            asn=dict(required=False)\n        ),\n        mutually_exclusive=[('name', 'id', 'content')],\n        required_one_of=[('name', 'id', 'content')],\n        supports_check_mode=True\n    )\n\n    # Check if aos-pyez is present and match the minimum version\n    check_aos_version(module, '0.6.0')\n\n    ext_router(module)\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "_aos_external_router.py", "id": "14d5ebbe0b874f35eff3658bcd9093a7", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aos/_aos_external_router.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}