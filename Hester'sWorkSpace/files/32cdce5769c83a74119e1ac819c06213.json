{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport pytest\n\nfrom exam import fixture\n\nfrom sentry.testutils import TestCase\nfrom sentry.utils.locking.backends.redis import RedisLockBackend\nfrom sentry.utils.redis import clusters\n\n\nclass RedisLockBackendTestCase(TestCase):\n    @fixture\n    def cluster(self):\n        return clusters.get('default')\n\n    @fixture\n    def backend(self):\n        return RedisLockBackend(self.cluster)\n\n    def test_success(self):\n        key = u\"\\U0001F4A9\"\n        duration = 60\n        full_key = self.backend.prefix_key(key)\n        client = self.backend.get_client(key)\n\n        self.backend.acquire(key, duration)\n        assert client.get(full_key) == self.backend.uuid.encode('utf-8')\n        assert duration - 2 < float(client.ttl(full_key)) <= duration\n\n        self.backend.release(key)\n        assert client.exists(full_key) is False\n\n    def test_acquire_fail_on_conflict(self):\n        key = 'lock'\n        duration = 60\n\n        other_cluster = RedisLockBackend(self.cluster)\n        other_cluster.acquire(key, duration)\n        with pytest.raises(Exception):\n            self.backend.acquire(key, duration)\n\n    def test_release_fail_on_missing(self):\n        with pytest.raises(Exception):\n            self.backend.release('missing-key')\n\n    def test_release_fail_on_conflict(self):\n        key = 'lock'\n        duration = 60\n        self.backend.get_client(key).set(self.backend.prefix_key(key), 'someone-elses-uuid')\n\n        with pytest.raises(Exception):\n            self.backend.acquire(key, duration)\n", "comments": "", "content": "from __future__ import absolute_import\n\nimport pytest\n\nfrom exam import fixture\n\nfrom sentry.testutils import TestCase\nfrom sentry.utils.locking.backends.redis import RedisLockBackend\nfrom sentry.utils.redis import clusters\n\n\nclass RedisLockBackendTestCase(TestCase):\n    @fixture\n    def cluster(self):\n        return clusters.get('default')\n\n    @fixture\n    def backend(self):\n        return RedisLockBackend(self.cluster)\n\n    def test_success(self):\n        key = u\"\\U0001F4A9\"\n        duration = 60\n        full_key = self.backend.prefix_key(key)\n        client = self.backend.get_client(key)\n\n        self.backend.acquire(key, duration)\n        assert client.get(full_key) == self.backend.uuid.encode('utf-8')\n        assert duration - 2 < float(client.ttl(full_key)) <= duration\n\n        self.backend.release(key)\n        assert client.exists(full_key) is False\n\n    def test_acquire_fail_on_conflict(self):\n        key = 'lock'\n        duration = 60\n\n        other_cluster = RedisLockBackend(self.cluster)\n        other_cluster.acquire(key, duration)\n        with pytest.raises(Exception):\n            self.backend.acquire(key, duration)\n\n    def test_release_fail_on_missing(self):\n        with pytest.raises(Exception):\n            self.backend.release('missing-key')\n\n    def test_release_fail_on_conflict(self):\n        key = 'lock'\n        duration = 60\n        self.backend.get_client(key).set(self.backend.prefix_key(key), 'someone-elses-uuid')\n\n        with pytest.raises(Exception):\n            self.backend.acquire(key, duration)\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_redis.py", "id": "32cdce5769c83a74119e1ac819c06213", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/locking/backends/test_redis.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}