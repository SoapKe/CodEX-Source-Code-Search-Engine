{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    parse_duration,\n    try_get,\n    unified_strdate,\n)\n\n\nclass MediasetIE(InfoExtractor):\n    _VALID_URL = r\n    _TESTS = [{\n        \n        'url': 'http://www.video.mediaset.it/video/hello_goodbye/full/quarta-puntata_661824.html',\n        'md5': '9b75534d42c44ecef7bf1ffeacb7f85d',\n        'info_dict': {\n            'id': '661824',\n            'ext': 'mp4',\n            'title': 'Quarta puntata',\n            'description': 'md5:7183696d6df570e3412a5ef74b27c5e2',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1414,\n            'creator': 'mediaset',\n            'upload_date': '20161107',\n            'series': 'Hello Goodbye',\n            'categories': ['reality'],\n        },\n        'expected_warnings': ['is not a supported codec'],\n    }, {\n        \n        'url': 'http://www.video.mediaset.it/video/gogglebox/clip/un-grande-classico-della-commedia-sexy_661680.html',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://www.video.mediaset.it/player/playerIFrame.shtml?id=665924&autoplay=true',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://www.video.mediaset.it/player/playerIFrameTwitter.shtml?id=665104&playrelated=false&autoplay=false&related=true&hidesocial=true',\n        'only_matching': True,\n    }, {\n        'url': 'mediaset:661824',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [\n            mobj.group('url')\n            for mobj in re.finditer(\n                r'<iframe\\b[^>]+\\bsrc=([\"\\'])(?P<url>https?://(?:www\\.)?video\\.mediaset\\.it/player/playerIFrame(?:Twitter)?\\.shtml\\?.*?\\bid=\\d+.*?)\\1',\n                webpage)]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video_list = self._download_json(\n            'http://cdnsel01.mediaset.net/GetCdn.aspx',\n            video_id, 'Downloading video CDN JSON', query={\n                'streamid': video_id,\n                'format': 'json',\n            })['videoList']\n\n        formats = []\n        for format_url in video_list:\n            if '.ism' in format_url:\n                formats.extend(self._extract_ism_formats(\n                    format_url, video_id, ism_id='mss', fatal=False))\n            else:\n                formats.append({\n                    'url': format_url,\n                    'format_id': determine_ext(format_url),\n                })\n        self._sort_formats(formats)\n\n        mediainfo = self._download_json(\n            'http://plr.video.mediaset.it/html/metainfo.sjson',\n            video_id, 'Downloading video info JSON', query={\n                'id': video_id,\n            })['video']\n\n        title = mediainfo['title']\n\n        creator = try_get(\n            mediainfo, lambda x: x['brand-info']['publisher'], compat_str)\n        category = try_get(\n            mediainfo, lambda x: x['brand-info']['category'], compat_str)\n        categories = [category] if category else None\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': mediainfo.get('short-description'),\n            'thumbnail': mediainfo.get('thumbnail'),\n            'duration': parse_duration(mediainfo.get('duration')),\n            'creator': creator,\n            'upload_date': unified_strdate(mediainfo.get('production-date')),\n            'webpage_url': mediainfo.get('url'),\n            'series': mediainfo.get('brand-value'),\n            'categories': categories,\n            'formats': formats,\n        }\n", "comments": "(?x)\n                    (?:\n                        mediaset:|\n                        https?://\n                            (?:www\\.)?video\\.mediaset\\.it/\n                            (?:\n                                (?:video|on-demand)/(?:[^/]+/)+[^/]+_|\n                                player/playerIFrame(?:Twitter)?\\.shtml\\?.*?\\bid=\n                            )\n                    )(?P<id>[0-9]+)\n                    \n \n# coding: utf-8\n# full episode\n# clip\n# iframe simple\n# iframe twitter (from http://www.wittytv.it/se-prima-mi-fidavo-zero/)\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    parse_duration,\n    try_get,\n    unified_strdate,\n)\n\n\nclass MediasetIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mediaset:|\n                        https?://\n                            (?:www\\.)?video\\.mediaset\\.it/\n                            (?:\n                                (?:video|on-demand)/(?:[^/]+/)+[^/]+_|\n                                player/playerIFrame(?:Twitter)?\\.shtml\\?.*?\\bid=\n                            )\n                    )(?P<id>[0-9]+)\n                    '''\n    _TESTS = [{\n        # full episode\n        'url': 'http://www.video.mediaset.it/video/hello_goodbye/full/quarta-puntata_661824.html',\n        'md5': '9b75534d42c44ecef7bf1ffeacb7f85d',\n        'info_dict': {\n            'id': '661824',\n            'ext': 'mp4',\n            'title': 'Quarta puntata',\n            'description': 'md5:7183696d6df570e3412a5ef74b27c5e2',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1414,\n            'creator': 'mediaset',\n            'upload_date': '20161107',\n            'series': 'Hello Goodbye',\n            'categories': ['reality'],\n        },\n        'expected_warnings': ['is not a supported codec'],\n    }, {\n        # clip\n        'url': 'http://www.video.mediaset.it/video/gogglebox/clip/un-grande-classico-della-commedia-sexy_661680.html',\n        'only_matching': True,\n    }, {\n        # iframe simple\n        'url': 'http://www.video.mediaset.it/player/playerIFrame.shtml?id=665924&autoplay=true',\n        'only_matching': True,\n    }, {\n        # iframe twitter (from http://www.wittytv.it/se-prima-mi-fidavo-zero/)\n        'url': 'https://www.video.mediaset.it/player/playerIFrameTwitter.shtml?id=665104&playrelated=false&autoplay=false&related=true&hidesocial=true',\n        'only_matching': True,\n    }, {\n        'url': 'mediaset:661824',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [\n            mobj.group('url')\n            for mobj in re.finditer(\n                r'<iframe\\b[^>]+\\bsrc=([\"\\'])(?P<url>https?://(?:www\\.)?video\\.mediaset\\.it/player/playerIFrame(?:Twitter)?\\.shtml\\?.*?\\bid=\\d+.*?)\\1',\n                webpage)]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video_list = self._download_json(\n            'http://cdnsel01.mediaset.net/GetCdn.aspx',\n            video_id, 'Downloading video CDN JSON', query={\n                'streamid': video_id,\n                'format': 'json',\n            })['videoList']\n\n        formats = []\n        for format_url in video_list:\n            if '.ism' in format_url:\n                formats.extend(self._extract_ism_formats(\n                    format_url, video_id, ism_id='mss', fatal=False))\n            else:\n                formats.append({\n                    'url': format_url,\n                    'format_id': determine_ext(format_url),\n                })\n        self._sort_formats(formats)\n\n        mediainfo = self._download_json(\n            'http://plr.video.mediaset.it/html/metainfo.sjson',\n            video_id, 'Downloading video info JSON', query={\n                'id': video_id,\n            })['video']\n\n        title = mediainfo['title']\n\n        creator = try_get(\n            mediainfo, lambda x: x['brand-info']['publisher'], compat_str)\n        category = try_get(\n            mediainfo, lambda x: x['brand-info']['category'], compat_str)\n        categories = [category] if category else None\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': mediainfo.get('short-description'),\n            'thumbnail': mediainfo.get('thumbnail'),\n            'duration': parse_duration(mediainfo.get('duration')),\n            'creator': creator,\n            'upload_date': unified_strdate(mediainfo.get('production-date')),\n            'webpage_url': mediainfo.get('url'),\n            'series': mediainfo.get('brand-value'),\n            'categories': categories,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "mediaset.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/mediaset.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}