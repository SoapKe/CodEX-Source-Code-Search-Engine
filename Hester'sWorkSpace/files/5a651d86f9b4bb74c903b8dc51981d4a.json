{"author": "Miserlou", "code": "# -*- coding: utf8 -*-\nimport boto3\nimport mock\nimport os\nimport unittest\n\ntry:\n    from mock import patch\nexcept ImportError:\n    from unittest.mock import patch\n\nfrom zappa.async import AsyncException, LambdaAsyncResponse, SnsAsyncResponse\nfrom zappa.async import import_and_get_task, \\\n                        get_func_task_path\n\n\nclass TestZappa(unittest.TestCase):\n    def setUp(self):\n        self.sleep_patch = mock.patch('time.sleep', return_value=None)\n        \n        \n        self.users_current_region_name = os.environ.get('AWS_DEFAULT_REGION', None)\n        os.environ['AWS_DEFAULT_REGION'] = 'us-east-1'\n        if not os.environ.get('PLACEBO_MODE') == 'record':\n            self.sleep_patch.start()\n\n    def tearDown(self):\n        if not os.environ.get('PLACEBO_MODE') == 'record':\n            self.sleep_patch.stop()\n        del os.environ['AWS_DEFAULT_REGION']\n        if self.users_current_region_name is not None:\n            \n            os.environ['AWS_DEFAULT_REGION'] = self.users_current_region_name\n\n    \n    \n    \n\n    def test_test(self):\n        self.assertTrue(True)\n        self.assertFalse(False)\n\n    def test_nofails_classes(self):\n\n        boto_session = boto3.Session(region_name=os.environ['AWS_DEFAULT_REGION'])\n\n        a = AsyncException()\n        l = LambdaAsyncResponse(boto_session=boto_session)\n        ()\n        s = SnsAsyncResponse(arn=\"arn:abc:def\", boto_session=boto_session)\n\n    def test_nofails_funcs(self):\n        funk = import_and_get_task(\"tests.test_app.async_me\")\n        get_func_task_path(funk)\n        self.assertEqual(funk.__name__, 'async_me')\n\n    \n    \n    \n    def test_sync_call(self):\n        funk = import_and_get_task(\"tests.test_app.async_me\")\n        self.assertEqual(funk.sync('123'), \"run async when on lambda 123\")\n", "comments": "      coding  utf8        tests expect us east 1     if user set different region env variables  set aside use us east 1    give user aws region back  done testing us east 1         sanity tests          snsasyncresponse()        functional tests     ", "content": "# -*- coding: utf8 -*-\nimport boto3\nimport mock\nimport os\nimport unittest\n\ntry:\n    from mock import patch\nexcept ImportError:\n    from unittest.mock import patch\n\nfrom zappa.async import AsyncException, LambdaAsyncResponse, SnsAsyncResponse\nfrom zappa.async import import_and_get_task, \\\n                        get_func_task_path\n\n\nclass TestZappa(unittest.TestCase):\n    def setUp(self):\n        self.sleep_patch = mock.patch('time.sleep', return_value=None)\n        # Tests expect us-east-1.\n        # If the user has set a different region in env variables, we set it aside for now and use us-east-1\n        self.users_current_region_name = os.environ.get('AWS_DEFAULT_REGION', None)\n        os.environ['AWS_DEFAULT_REGION'] = 'us-east-1'\n        if not os.environ.get('PLACEBO_MODE') == 'record':\n            self.sleep_patch.start()\n\n    def tearDown(self):\n        if not os.environ.get('PLACEBO_MODE') == 'record':\n            self.sleep_patch.stop()\n        del os.environ['AWS_DEFAULT_REGION']\n        if self.users_current_region_name is not None:\n            # Give the user their AWS region back, we're done testing with us-east-1.\n            os.environ['AWS_DEFAULT_REGION'] = self.users_current_region_name\n\n    ##\n    # Sanity Tests\n    ##\n\n    def test_test(self):\n        self.assertTrue(True)\n        self.assertFalse(False)\n\n    def test_nofails_classes(self):\n\n        boto_session = boto3.Session(region_name=os.environ['AWS_DEFAULT_REGION'])\n\n        a = AsyncException()\n        l = LambdaAsyncResponse(boto_session=boto_session)\n        # s = SnsAsyncResponse()\n        s = SnsAsyncResponse(arn=\"arn:abc:def\", boto_session=boto_session)\n\n    def test_nofails_funcs(self):\n        funk = import_and_get_task(\"tests.test_app.async_me\")\n        get_func_task_path(funk)\n        self.assertEqual(funk.__name__, 'async_me')\n\n    ##\n    # Functional tests\n    ##\n    def test_sync_call(self):\n        funk = import_and_get_task(\"tests.test_app.async_me\")\n        self.assertEqual(funk.sync('123'), \"run async when on lambda 123\")\n", "description": "Serverless Python", "file_name": "tests_async.py", "id": "5a651d86f9b4bb74c903b8dc51981d4a", "language": "Python", "project_name": "Zappa", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/Miserlou-Zappa/Miserlou-Zappa-2a31b61/tests/tests_async.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:49:18Z", "url": "https://github.com/Miserlou/Zappa", "wiki": true}