{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom .kaltura import KalturaIE\nfrom .youtube import YoutubeIE\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    parse_iso8601,\n    smuggle_url,\n    xpath_text,\n)\n\n\nclass HeiseIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?heise\\.de/(?:[^/]+/)+[^/]+-(?P<id>[0-9]+)\\.html'\n    _TESTS = [{\n        'url': 'http://www.heise.de/video/artikel/Podcast-c-t-uplink-3-3-Owncloud-Tastaturen-Peilsender-Smartphone-2404147.html',\n        'md5': 'ffed432483e922e88545ad9f2f15d30e',\n        'info_dict': {\n            'id': '2404147',\n            'ext': 'mp4',\n            'title': \"Podcast: c't uplink 3.3 \u2013 Owncloud / Tastaturen / Peilsender Smartphone\",\n            'format_id': 'mp4_720p',\n            'timestamp': 1411812600,\n            'upload_date': '20140927',\n            'description': 'md5:c934cbfb326c669c2bcabcbe3d3fcd20',\n            'thumbnail': r're:^https?://.*/gallery/$',\n        }\n    }, {\n        \n        'url': 'http://www.heise.de/newsticker/meldung/Netflix-In-20-Jahren-vom-Videoverleih-zum-TV-Revolutionaer-3814130.html',\n        'md5': 'e403d2b43fea8e405e88e3f8623909f1',\n        'info_dict': {\n            'id': '6kmWbXleKW4',\n            'ext': 'mp4',\n            'title': 'NEU IM SEPTEMBER | Netflix',\n            'description': 'md5:2131f3c7525e540d5fd841de938bd452',\n            'upload_date': '20170830',\n            'uploader': 'Netflix Deutschland, \u00d6sterreich und Schweiz',\n            'uploader_id': 'netflixdach',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.heise.de/video/artikel/nachgehakt-Wie-sichert-das-c-t-Tool-Restric-tor-Windows-10-ab-3700244.html',\n        'md5': '4b58058b46625bdbd841fc2804df95fc',\n        'info_dict': {\n            'id': '1_ntrmio2s',\n            'timestamp': 1512470717,\n            'upload_date': '20171205',\n            'ext': 'mp4',\n            'title': 'ct10 nachgehakt hos restrictor',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.heise.de/ct/artikel/c-t-uplink-3-3-Owncloud-Tastaturen-Peilsender-Smartphone-2403911.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.heise.de/newsticker/meldung/c-t-uplink-Owncloud-Tastaturen-Peilsender-Smartphone-2404251.html?wt_mc=rss.ho.beitrag.atom',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.heise.de/ct/ausgabe/2016-12-Spiele-3214137.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('fulltitle', webpage, default=None)\n        if not title or title == \"c't\":\n            title = self._search_regex(\n                r'<div[^>]+class=\"videoplayerjw\"[^>]+data-title=\"([^\"]+)\"',\n                webpage, 'title')\n\n        yt_urls = YoutubeIE._extract_urls(webpage)\n        if yt_urls:\n            return self.playlist_from_matches(yt_urls, video_id, title, ie=YoutubeIE.ie_key())\n\n        kaltura_url = KalturaIE._extract_url(webpage)\n        if kaltura_url:\n            return self.url_result(smuggle_url(kaltura_url, {'source_url': url}), KalturaIE.ie_key())\n\n        container_id = self._search_regex(\n            r'<div class=\"videoplayerjw\"[^>]+data-container=\"([0-9]+)\"',\n            webpage, 'container ID')\n\n        sequenz_id = self._search_regex(\n            r'<div class=\"videoplayerjw\"[^>]+data-sequenz=\"([0-9]+)\"',\n            webpage, 'sequenz ID')\n\n        doc = self._download_xml(\n            'http://www.heise.de/videout/feed', video_id, query={\n                'container': container_id,\n                'sequenz': sequenz_id,\n            })\n\n        formats = []\n        for source_node in doc.findall('.//{http://rss.jwpcdn.com/}source'):\n            label = source_node.attrib['label']\n            height = int_or_none(self._search_regex(\n                r'^(.*?_)?([0-9]+)p$', label, 'height', default=None))\n            video_url = source_node.attrib['file']\n            ext = determine_ext(video_url, '')\n            formats.append({\n                'url': video_url,\n                'format_note': label,\n                'format_id': '%s_%s' % (ext, label),\n                'height': height,\n            })\n        self._sort_formats(formats)\n\n        description = self._og_search_description(\n            webpage, default=None) or self._html_search_meta(\n            'description', webpage)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': (xpath_text(doc, './/{http://rss.jwpcdn.com/}image') or\n                          self._og_search_thumbnail(webpage)),\n            'timestamp': parse_iso8601(\n                self._html_search_meta('date', webpage)),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# YouTube embed\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom .kaltura import KalturaIE\nfrom .youtube import YoutubeIE\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    parse_iso8601,\n    smuggle_url,\n    xpath_text,\n)\n\n\nclass HeiseIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?heise\\.de/(?:[^/]+/)+[^/]+-(?P<id>[0-9]+)\\.html'\n    _TESTS = [{\n        'url': 'http://www.heise.de/video/artikel/Podcast-c-t-uplink-3-3-Owncloud-Tastaturen-Peilsender-Smartphone-2404147.html',\n        'md5': 'ffed432483e922e88545ad9f2f15d30e',\n        'info_dict': {\n            'id': '2404147',\n            'ext': 'mp4',\n            'title': \"Podcast: c't uplink 3.3 \u2013 Owncloud / Tastaturen / Peilsender Smartphone\",\n            'format_id': 'mp4_720p',\n            'timestamp': 1411812600,\n            'upload_date': '20140927',\n            'description': 'md5:c934cbfb326c669c2bcabcbe3d3fcd20',\n            'thumbnail': r're:^https?://.*/gallery/$',\n        }\n    }, {\n        # YouTube embed\n        'url': 'http://www.heise.de/newsticker/meldung/Netflix-In-20-Jahren-vom-Videoverleih-zum-TV-Revolutionaer-3814130.html',\n        'md5': 'e403d2b43fea8e405e88e3f8623909f1',\n        'info_dict': {\n            'id': '6kmWbXleKW4',\n            'ext': 'mp4',\n            'title': 'NEU IM SEPTEMBER | Netflix',\n            'description': 'md5:2131f3c7525e540d5fd841de938bd452',\n            'upload_date': '20170830',\n            'uploader': 'Netflix Deutschland, \u00d6sterreich und Schweiz',\n            'uploader_id': 'netflixdach',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.heise.de/video/artikel/nachgehakt-Wie-sichert-das-c-t-Tool-Restric-tor-Windows-10-ab-3700244.html',\n        'md5': '4b58058b46625bdbd841fc2804df95fc',\n        'info_dict': {\n            'id': '1_ntrmio2s',\n            'timestamp': 1512470717,\n            'upload_date': '20171205',\n            'ext': 'mp4',\n            'title': 'ct10 nachgehakt hos restrictor',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.heise.de/ct/artikel/c-t-uplink-3-3-Owncloud-Tastaturen-Peilsender-Smartphone-2403911.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.heise.de/newsticker/meldung/c-t-uplink-Owncloud-Tastaturen-Peilsender-Smartphone-2404251.html?wt_mc=rss.ho.beitrag.atom',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.heise.de/ct/ausgabe/2016-12-Spiele-3214137.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('fulltitle', webpage, default=None)\n        if not title or title == \"c't\":\n            title = self._search_regex(\n                r'<div[^>]+class=\"videoplayerjw\"[^>]+data-title=\"([^\"]+)\"',\n                webpage, 'title')\n\n        yt_urls = YoutubeIE._extract_urls(webpage)\n        if yt_urls:\n            return self.playlist_from_matches(yt_urls, video_id, title, ie=YoutubeIE.ie_key())\n\n        kaltura_url = KalturaIE._extract_url(webpage)\n        if kaltura_url:\n            return self.url_result(smuggle_url(kaltura_url, {'source_url': url}), KalturaIE.ie_key())\n\n        container_id = self._search_regex(\n            r'<div class=\"videoplayerjw\"[^>]+data-container=\"([0-9]+)\"',\n            webpage, 'container ID')\n\n        sequenz_id = self._search_regex(\n            r'<div class=\"videoplayerjw\"[^>]+data-sequenz=\"([0-9]+)\"',\n            webpage, 'sequenz ID')\n\n        doc = self._download_xml(\n            'http://www.heise.de/videout/feed', video_id, query={\n                'container': container_id,\n                'sequenz': sequenz_id,\n            })\n\n        formats = []\n        for source_node in doc.findall('.//{http://rss.jwpcdn.com/}source'):\n            label = source_node.attrib['label']\n            height = int_or_none(self._search_regex(\n                r'^(.*?_)?([0-9]+)p$', label, 'height', default=None))\n            video_url = source_node.attrib['file']\n            ext = determine_ext(video_url, '')\n            formats.append({\n                'url': video_url,\n                'format_note': label,\n                'format_id': '%s_%s' % (ext, label),\n                'height': height,\n            })\n        self._sort_formats(formats)\n\n        description = self._og_search_description(\n            webpage, default=None) or self._html_search_meta(\n            'description', webpage)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': (xpath_text(doc, './/{http://rss.jwpcdn.com/}image') or\n                          self._og_search_thumbnail(webpage)),\n            'timestamp': parse_iso8601(\n                self._html_search_meta('date', webpage)),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "heise.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/heise.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}