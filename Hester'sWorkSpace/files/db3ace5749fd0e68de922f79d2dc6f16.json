{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom werkzeug import urls\n\nfrom odoo import api, models, fields\n\n\nclass Planner(models.Model):\n    \"\"\"Planner Model.\n    Each Planner has link to an ir.ui.view record that is a template used\n    to display the planner pages.\n    Each Planner has link to ir.ui.menu record that is a top menu used to display the\n    planner launcher(progressbar)\n\n    Method _prepare_<planner_application>_data(self) (model method) that\n    generates the values used to display in specific planner pages\n    \"\"\"\n\n    _name = 'web.planner'\n    _description = 'Planner'\n\n    @api.model\n    def _get_planner_application(self):\n        return []\n\n    name = fields.Char(string='Name', required=True)\n    menu_id = fields.Many2one('ir.ui.menu', string='Menu', required=True)\n    view_id = fields.Many2one('ir.ui.view', string='Template', required=True)\n    progress = fields.Integer(string=\"Progress Percentage\", company_dependent=True)\n    # data field is used to store the data filled by user in planner(JSON Data)\n    data = fields.Text(string=\"Data\", company_dependent=True)\n    tooltip_planner = fields.Html(string='Planner Tooltips', translate=True)\n    planner_application = fields.Selection('_get_planner_application', string='Planner Application', required=True)\n    active = fields.Boolean(string=\"Active\", default=True, help=\"If the active field is set to False, it will allow you to hide the planner. This change requires a refresh of your page.\")\n\n    @api.model\n    def render(self, template_id, planner_app):\n        \n        values = {\n            'prepare_backend_url': self.prepare_backend_url,\n            'is_module_installed': self.is_module_installed,\n        }\n        planner_find_method_name = '_prepare_%s_data' % planner_app\n        if hasattr(self, planner_find_method_name):\n            values.update(getattr(self, planner_find_method_name)()) \n        return self.env['ir.ui.view'].browse(template_id).render(values=values)\n\n    @api.model\n    def prepare_backend_url(self, action_xml_id, view_type='list', module_name=None):\n        \"\"\" prepare the backend url to the given action, or to the given module view.\n            :param action_xml_id : the xml id of the action to redirect to\n            :param view_type : the view type to display when redirecting (form, kanban, list, ...)\n            :param module_name : the name of the module to display (if action_xml_id is 'open_module_tree'), or\n                                 to redirect to if the action is not found.\n            :returns url : the url to the correct page\n        \"\"\"\n        params = dict(view_type=view_type)\n        \n        action = self.env.ref(action_xml_id, False)\n        if action:\n            params['action'] = action.id\n            params['view_type'] = action.view_type or view_type\n        else:\n            params['model'] = 'ir.module.module'\n        \n        if module_name:\n            module = self.env['ir.module.module'].sudo().search([('name', '=', module_name)], limit=1)\n            if module:\n                params['id'] = module.id\n            else:\n                return \"#show_enterprise\"\n        return \"/web#%s\" % (urls.url_encode(params),)\n\n    @api.model\n    def is_module_installed(self, module_name=None):\n        return module_name in self.env['ir.module.module']._installed()\n\n    @api.model\n    def get_planner_progress(self, planner_application):\n        return self.search([('planner_application', '=', planner_application)]).progress\n", "comments": "   planner model      each planner link ir ui view record template used     display planner pages      each planner link ir ui menu record top menu used display     planner launcher(progressbar)      method  prepare  planner application  data(self) (model method)     generates values used display specific planner pages               name    web planner       description    planner        api model     def  get planner application(self)          return         name   fields char(string  name   required true)     menu id   fields many2one( ir ui menu   string  menu   required true)     view id   fields many2one( ir ui view   string  template   required true)     progress   fields integer(string  progress percentage   company dependent true)       data field used store data filled user planner(json data)     data   fields text(string  data   company dependent true)     tooltip planner   fields html(string  planner tooltips   translate true)     planner application   fields selection(  get planner application   string  planner application   required true)     active   fields boolean(string  active   default true  help  if active field set false  allow hide planner  this change requires refresh page  )       api model     def render(self  template id  planner app)            prepare planner data per planner application         values                  prepare backend url   self prepare backend url               module installed   self module installed                    planner find method name     prepare  data    planner app         hasattr(self  planner find method name)              values update(getattr(self  planner find method name)())   update default value         return self env  ir ui view   browse(template id) render(values values)       api model     def prepare backend url(self  action xml id  view type  list   module name none)              prepare backend url given action  given module view               param action xml id   xml id action redirect              param view type   view type display redirecting (form  kanban  list     )              param module name   name module display (if action xml id  open module tree )                                   redirect action found               returns url   url correct page                    coding  utf 8        part odoo  see license file full copyright licensing details     data field used store data filled user planner(json data)    prepare planner data per planner application    update default value    setting action    setting module       (urls url encode(params) ) ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\nfrom werkzeug import urls\n\nfrom odoo import api, models, fields\n\n\nclass Planner(models.Model):\n    \"\"\"Planner Model.\n    Each Planner has link to an ir.ui.view record that is a template used\n    to display the planner pages.\n    Each Planner has link to ir.ui.menu record that is a top menu used to display the\n    planner launcher(progressbar)\n\n    Method _prepare_<planner_application>_data(self) (model method) that\n    generates the values used to display in specific planner pages\n    \"\"\"\n\n    _name = 'web.planner'\n    _description = 'Planner'\n\n    @api.model\n    def _get_planner_application(self):\n        return []\n\n    name = fields.Char(string='Name', required=True)\n    menu_id = fields.Many2one('ir.ui.menu', string='Menu', required=True)\n    view_id = fields.Many2one('ir.ui.view', string='Template', required=True)\n    progress = fields.Integer(string=\"Progress Percentage\", company_dependent=True)\n    # data field is used to store the data filled by user in planner(JSON Data)\n    data = fields.Text(string=\"Data\", company_dependent=True)\n    tooltip_planner = fields.Html(string='Planner Tooltips', translate=True)\n    planner_application = fields.Selection('_get_planner_application', string='Planner Application', required=True)\n    active = fields.Boolean(string=\"Active\", default=True, help=\"If the active field is set to False, it will allow you to hide the planner. This change requires a refresh of your page.\")\n\n    @api.model\n    def render(self, template_id, planner_app):\n        # prepare the planner data as per the planner application\n        values = {\n            'prepare_backend_url': self.prepare_backend_url,\n            'is_module_installed': self.is_module_installed,\n        }\n        planner_find_method_name = '_prepare_%s_data' % planner_app\n        if hasattr(self, planner_find_method_name):\n            values.update(getattr(self, planner_find_method_name)()) # update the default value\n        return self.env['ir.ui.view'].browse(template_id).render(values=values)\n\n    @api.model\n    def prepare_backend_url(self, action_xml_id, view_type='list', module_name=None):\n        \"\"\" prepare the backend url to the given action, or to the given module view.\n            :param action_xml_id : the xml id of the action to redirect to\n            :param view_type : the view type to display when redirecting (form, kanban, list, ...)\n            :param module_name : the name of the module to display (if action_xml_id is 'open_module_tree'), or\n                                 to redirect to if the action is not found.\n            :returns url : the url to the correct page\n        \"\"\"\n        params = dict(view_type=view_type)\n        # setting the action\n        action = self.env.ref(action_xml_id, False)\n        if action:\n            params['action'] = action.id\n            params['view_type'] = action.view_type or view_type\n        else:\n            params['model'] = 'ir.module.module'\n        # setting the module\n        if module_name:\n            module = self.env['ir.module.module'].sudo().search([('name', '=', module_name)], limit=1)\n            if module:\n                params['id'] = module.id\n            else:\n                return \"#show_enterprise\"\n        return \"/web#%s\" % (urls.url_encode(params),)\n\n    @api.model\n    def is_module_installed(self, module_name=None):\n        return module_name in self.env['ir.module.module']._installed()\n\n    @api.model\n    def get_planner_progress(self, planner_application):\n        return self.search([('planner_application', '=', planner_application)]).progress\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "web_planner.py", "id": "db3ace5749fd0e68de922f79d2dc6f16", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/web_planner/models/web_planner.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}