{"author": "django", "code": "from unittest import mock\n\nfrom django.db import connections, models\nfrom django.test import TestCase\nfrom django.test.utils import isolate_apps, override_settings\n\n\nclass TestRouter:\n    \n    def allow_migrate(self, db, app_label, model_name=None, **hints):\n        return db == ('other' if model_name.startswith('other') else 'default')\n\n\n@override_settings(DATABASE_ROUTERS=[TestRouter()])\n@isolate_apps('check_framework')\nclass TestMultiDBChecks(TestCase):\n    multi_db = True\n\n    def _patch_check_field_on(self, db):\n        return mock.patch.object(connections[db].validation, 'check_field')\n\n    def test_checks_called_on_the_default_database(self):\n        class Model(models.Model):\n            field = models.CharField(max_length=100)\n\n        model = Model()\n        with self._patch_check_field_on('default') as mock_check_field_default:\n            with self._patch_check_field_on('other') as mock_check_field_other:\n                model.check()\n                self.assertTrue(mock_check_field_default.called)\n                self.assertFalse(mock_check_field_other.called)\n\n    def test_checks_called_on_the_other_database(self):\n        class OtherModel(models.Model):\n            field = models.CharField(max_length=100)\n\n        model = OtherModel()\n        with self._patch_check_field_on('other') as mock_check_field_other:\n            with self._patch_check_field_on('default') as mock_check_field_default:\n                model.check()\n                self.assertTrue(mock_check_field_other.called)\n                self.assertFalse(mock_check_field_default.called)\n", "comments": "        routes   database model name starts  other           ", "content": "from unittest import mock\n\nfrom django.db import connections, models\nfrom django.test import TestCase\nfrom django.test.utils import isolate_apps, override_settings\n\n\nclass TestRouter:\n    \"\"\"\n    Routes to the 'other' database if the model name starts with 'Other'.\n    \"\"\"\n    def allow_migrate(self, db, app_label, model_name=None, **hints):\n        return db == ('other' if model_name.startswith('other') else 'default')\n\n\n@override_settings(DATABASE_ROUTERS=[TestRouter()])\n@isolate_apps('check_framework')\nclass TestMultiDBChecks(TestCase):\n    multi_db = True\n\n    def _patch_check_field_on(self, db):\n        return mock.patch.object(connections[db].validation, 'check_field')\n\n    def test_checks_called_on_the_default_database(self):\n        class Model(models.Model):\n            field = models.CharField(max_length=100)\n\n        model = Model()\n        with self._patch_check_field_on('default') as mock_check_field_default:\n            with self._patch_check_field_on('other') as mock_check_field_other:\n                model.check()\n                self.assertTrue(mock_check_field_default.called)\n                self.assertFalse(mock_check_field_other.called)\n\n    def test_checks_called_on_the_other_database(self):\n        class OtherModel(models.Model):\n            field = models.CharField(max_length=100)\n\n        model = OtherModel()\n        with self._patch_check_field_on('other') as mock_check_field_other:\n            with self._patch_check_field_on('default') as mock_check_field_default:\n                model.check()\n                self.assertTrue(mock_check_field_other.called)\n                self.assertFalse(mock_check_field_default.called)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_multi_db.py", "id": "a4868a5ab701b27931c9e611d7255de5", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/check_framework/test_multi_db.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}