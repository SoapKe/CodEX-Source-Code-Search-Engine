{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport mock\nimport pytest\n\nfrom sentry.utils.metrics import timer\n\n\ndef test_timer_success():\n    with mock.patch('sentry.utils.metrics.timing') as timing:\n        with timer('key', tags={'foo': True}) as tags:\n            tags['bar'] = False\n\n        assert timing.call_count is 1\n        args, kwargs = timing.call_args\n        assert args[0] is 'key'\n        assert args[3] == {\n            'foo': True,\n            'bar': False,\n            'result': 'success',\n        }\n\n\nclass ExpectedError(Exception):\n    pass\n\n\ndef test_timer_failure():\n    with mock.patch('sentry.utils.metrics.timing') as timing:\n        with pytest.raises(ExpectedError):\n            with timer('key', tags={'foo': True}):\n                raise ExpectedError\n\n        assert timing.call_count is 1\n        args, kwargs = timing.call_args\n        assert args[0] is 'key'\n        assert args[3] == {\n            'foo': True,\n            'result': 'failure',\n        }\n", "comments": "", "content": "from __future__ import absolute_import\n\nimport mock\nimport pytest\n\nfrom sentry.utils.metrics import timer\n\n\ndef test_timer_success():\n    with mock.patch('sentry.utils.metrics.timing') as timing:\n        with timer('key', tags={'foo': True}) as tags:\n            tags['bar'] = False\n\n        assert timing.call_count is 1\n        args, kwargs = timing.call_args\n        assert args[0] is 'key'\n        assert args[3] == {\n            'foo': True,\n            'bar': False,\n            'result': 'success',\n        }\n\n\nclass ExpectedError(Exception):\n    pass\n\n\ndef test_timer_failure():\n    with mock.patch('sentry.utils.metrics.timing') as timing:\n        with pytest.raises(ExpectedError):\n            with timer('key', tags={'foo': True}):\n                raise ExpectedError\n\n        assert timing.call_count is 1\n        args, kwargs = timing.call_args\n        assert args[0] is 'key'\n        assert args[3] == {\n            'foo': True,\n            'result': 'failure',\n        }\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_metrics.py", "id": "98cd52c6f6c1a597a41a350a58570e22", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/test_metrics.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}