{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    smuggle_url,\n    ExtractorError,\n)\n\n\nclass SBSIE(InfoExtractor):\n    IE_DESC = 'sbs.com.au'\n    _VALID_URL = r'https?://(?:www\\.)?sbs\\.com\\.au/(?:ondemand|news)/video/(?:single/)?(?P<id>[0-9]+)'\n\n    _TESTS = [{\n        \n        \n        'url': 'http://www.sbs.com.au/ondemand/video/single/320403011771/?source=drupal&vertical=thefeed',\n        'md5': '3150cf278965eeabb5b4cea1c963fe0a',\n        'info_dict': {\n            'id': '320403011771',\n            'ext': 'mp4',\n            'title': 'Dingo Conservation (The Feed)',\n            'description': 'md5:f250a9856fca50d22dec0b5b8015f8a5',\n            'thumbnail': r're:http://.*\\.jpg',\n            'duration': 308,\n            'timestamp': 1408613220,\n            'upload_date': '20140821',\n            'uploader': 'SBSC',\n        },\n    }, {\n        'url': 'http://www.sbs.com.au/ondemand/video/320403011771/Dingo-Conservation-The-Feed',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.sbs.com.au/news/video/471395907773/The-Feed-July-9',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        player_params = self._download_json(\n            'http://www.sbs.com.au/api/video_pdkvars/id/%s?form=json' % video_id, video_id)\n\n        error = player_params.get('error')\n        if error:\n            error_message = 'Sorry, The video you are looking for does not exist.'\n            video_data = error.get('results') or {}\n            error_code = error.get('errorCode')\n            if error_code == 'ComingSoon':\n                error_message = '%s is not yet available.' % video_data.get('title', '')\n            elif error_code in ('Forbidden', 'intranetAccessOnly'):\n                error_message = 'Sorry, This video cannot be accessed via this website'\n            elif error_code == 'Expired':\n                error_message = 'Sorry, %s is no longer available.' % video_data.get('title', '')\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error_message), expected=True)\n\n        urls = player_params['releaseUrls']\n        theplatform_url = (urls.get('progressive') or urls.get('html') or\n                           urls.get('standard') or player_params['relatedItemsURL'])\n\n        return {\n            '_type': 'url_transparent',\n            'ie_key': 'ThePlatform',\n            'id': video_id,\n            'url': smuggle_url(self._proto_relative_url(theplatform_url), {'force_smil_url': True}),\n        }\n", "comments": "# coding: utf-8\n# Original URL is handled by the generic IE which finds the iframe:\n# http://www.sbs.com.au/thefeed/blog/2014/08/21/dingo-conservation\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    smuggle_url,\n    ExtractorError,\n)\n\n\nclass SBSIE(InfoExtractor):\n    IE_DESC = 'sbs.com.au'\n    _VALID_URL = r'https?://(?:www\\.)?sbs\\.com\\.au/(?:ondemand|news)/video/(?:single/)?(?P<id>[0-9]+)'\n\n    _TESTS = [{\n        # Original URL is handled by the generic IE which finds the iframe:\n        # http://www.sbs.com.au/thefeed/blog/2014/08/21/dingo-conservation\n        'url': 'http://www.sbs.com.au/ondemand/video/single/320403011771/?source=drupal&vertical=thefeed',\n        'md5': '3150cf278965eeabb5b4cea1c963fe0a',\n        'info_dict': {\n            'id': '320403011771',\n            'ext': 'mp4',\n            'title': 'Dingo Conservation (The Feed)',\n            'description': 'md5:f250a9856fca50d22dec0b5b8015f8a5',\n            'thumbnail': r're:http://.*\\.jpg',\n            'duration': 308,\n            'timestamp': 1408613220,\n            'upload_date': '20140821',\n            'uploader': 'SBSC',\n        },\n    }, {\n        'url': 'http://www.sbs.com.au/ondemand/video/320403011771/Dingo-Conservation-The-Feed',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.sbs.com.au/news/video/471395907773/The-Feed-July-9',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        player_params = self._download_json(\n            'http://www.sbs.com.au/api/video_pdkvars/id/%s?form=json' % video_id, video_id)\n\n        error = player_params.get('error')\n        if error:\n            error_message = 'Sorry, The video you are looking for does not exist.'\n            video_data = error.get('results') or {}\n            error_code = error.get('errorCode')\n            if error_code == 'ComingSoon':\n                error_message = '%s is not yet available.' % video_data.get('title', '')\n            elif error_code in ('Forbidden', 'intranetAccessOnly'):\n                error_message = 'Sorry, This video cannot be accessed via this website'\n            elif error_code == 'Expired':\n                error_message = 'Sorry, %s is no longer available.' % video_data.get('title', '')\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error_message), expected=True)\n\n        urls = player_params['releaseUrls']\n        theplatform_url = (urls.get('progressive') or urls.get('html') or\n                           urls.get('standard') or player_params['relatedItemsURL'])\n\n        return {\n            '_type': 'url_transparent',\n            'ie_key': 'ThePlatform',\n            'id': video_id,\n            'url': smuggle_url(self._proto_relative_url(theplatform_url), {'force_smil_url': True}),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "sbs.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/sbs.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}