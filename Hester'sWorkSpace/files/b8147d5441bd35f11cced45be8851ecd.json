{"author": "getredash", "code": "from collections import namedtuple\nfrom unittest import TestCase\nfrom redash.permissions import has_access\n\n\nMockUser = namedtuple('MockUser', ['permissions', 'group_ids'])\nview_only = True\n\n\nclass TestHasAccess(TestCase):\n    def test_allows_admin_regardless_of_groups(self):\n        user = MockUser(['admin'], [])\n\n        self.assertTrue(has_access({}, user, view_only))\n        self.assertTrue(has_access({}, user, not view_only))\n\n    def test_allows_if_user_member_in_group_with_view_access(self):\n        user = MockUser([], [1])\n\n        self.assertTrue(has_access({1: view_only}, user, view_only))\n\n    def test_allows_if_user_member_in_group_with_full_access(self):\n        user = MockUser([], [1])\n\n        self.assertTrue(has_access({1: not view_only}, user, not view_only))\n\n    def test_allows_if_user_member_in_multiple_groups(self):\n        user = MockUser([], [1, 2, 3])\n\n        self.assertTrue(has_access({1: not view_only, 2: view_only}, user, not view_only))\n        self.assertFalse(has_access({1: view_only, 2: view_only}, user, not view_only))\n        self.assertTrue(has_access({1: view_only, 2: view_only}, user, view_only))\n        self.assertTrue(has_access({1: not view_only, 2: not view_only}, user, view_only))\n\n    def test_not_allows_if_not_enough_permission(self):\n        user = MockUser([], [1])\n\n        self.assertFalse(has_access({1: view_only}, user, not view_only))\n        self.assertFalse(has_access({2: view_only}, user, not view_only))\n        self.assertFalse(has_access({2: view_only}, user, view_only))\n        self.assertFalse(has_access({2: not view_only, 1: view_only}, user, not view_only))\n", "comments": "", "content": "from collections import namedtuple\nfrom unittest import TestCase\nfrom redash.permissions import has_access\n\n\nMockUser = namedtuple('MockUser', ['permissions', 'group_ids'])\nview_only = True\n\n\nclass TestHasAccess(TestCase):\n    def test_allows_admin_regardless_of_groups(self):\n        user = MockUser(['admin'], [])\n\n        self.assertTrue(has_access({}, user, view_only))\n        self.assertTrue(has_access({}, user, not view_only))\n\n    def test_allows_if_user_member_in_group_with_view_access(self):\n        user = MockUser([], [1])\n\n        self.assertTrue(has_access({1: view_only}, user, view_only))\n\n    def test_allows_if_user_member_in_group_with_full_access(self):\n        user = MockUser([], [1])\n\n        self.assertTrue(has_access({1: not view_only}, user, not view_only))\n\n    def test_allows_if_user_member_in_multiple_groups(self):\n        user = MockUser([], [1, 2, 3])\n\n        self.assertTrue(has_access({1: not view_only, 2: view_only}, user, not view_only))\n        self.assertFalse(has_access({1: view_only, 2: view_only}, user, not view_only))\n        self.assertTrue(has_access({1: view_only, 2: view_only}, user, view_only))\n        self.assertTrue(has_access({1: not view_only, 2: not view_only}, user, view_only))\n\n    def test_not_allows_if_not_enough_permission(self):\n        user = MockUser([], [1])\n\n        self.assertFalse(has_access({1: view_only}, user, not view_only))\n        self.assertFalse(has_access({2: view_only}, user, not view_only))\n        self.assertFalse(has_access({2: view_only}, user, view_only))\n        self.assertFalse(has_access({2: not view_only, 1: view_only}, user, not view_only))\n", "description": "Make Your Company Data Driven. Connect to any data source, easily visualize and share your data.", "file_name": "test_permissions.py", "id": "b8147d5441bd35f11cced45be8851ecd", "language": "Python", "project_name": "redash", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/getredash-redash/getredash-redash-0410d83/tests/test_permissions.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:54:55Z", "url": "https://github.com/getredash/redash", "wiki": false}