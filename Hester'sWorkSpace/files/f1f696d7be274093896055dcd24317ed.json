{"author": "jazzband", "code": "from __future__ import absolute_import, unicode_literals\n\nimport weakref\n\nfrom django.core.signals import (\n    got_request_exception, request_finished, request_started,\n)\nfrom django.db.backends.signals import connection_created\nfrom django.db.models.signals import (\n    class_prepared, post_delete, post_init, post_migrate, post_save,\n    pre_delete, pre_init, pre_save,\n)\nfrom django.utils.module_loading import import_string\nfrom django.utils.translation import ugettext_lazy as _, ungettext\n\nfrom debug_toolbar.panels import Panel\n\n\nclass SignalsPanel(Panel):\n    template = 'debug_toolbar/panels/signals.html'\n\n    SIGNALS = {\n        'request_started': request_started,\n        'request_finished': request_finished,\n        'got_request_exception': got_request_exception,\n        'connection_created': connection_created,\n        'class_prepared': class_prepared,\n        'pre_init': pre_init,\n        'post_init': post_init,\n        'pre_save': pre_save,\n        'post_save': post_save,\n        'pre_delete': pre_delete,\n        'post_delete': post_delete,\n        'post_migrate': post_migrate,\n    }\n\n    def nav_subtitle(self):\n        signals = self.get_stats()['signals']\n        num_receivers = sum(len(s[2]) for s in signals)\n        num_signals = len(signals)\n        \n        \n        if num_signals == 1:\n            return ungettext(\"%(num_receivers)d receiver of 1 signal\",\n                             \"%(num_receivers)d receivers of 1 signal\",\n                             num_receivers) % {'num_receivers': num_receivers}\n        return ungettext(\"%(num_receivers)d receiver of %(num_signals)d signals\",\n                         \"%(num_receivers)d receivers of %(num_signals)d signals\",\n                         num_receivers) % {'num_receivers': num_receivers,\n                                           'num_signals': num_signals}\n\n    title = _(\"Signals\")\n\n    @property\n    def signals(self):\n        signals = self.SIGNALS.copy()\n        for signal in self.toolbar.config['EXTRA_SIGNALS']:\n            signal_name = signal.rsplit('.', 1)[-1]\n            signals[signal_name] = import_string(signal)\n        return signals\n\n    def generate_stats(self, request, response):\n        signals = []\n        for name, signal in sorted(self.signals.items(), key=lambda x: x[0]):\n            receivers = []\n            for receiver in signal.receivers:\n                receiver = receiver[1]\n                if isinstance(receiver, weakref.ReferenceType):\n                    receiver = receiver()\n                if receiver is None:\n                    continue\n\n                receiver = getattr(receiver, '__wraps__', receiver)\n                receiver_name = getattr(receiver, '__name__', str(receiver))\n                if getattr(receiver, '__self__', None) is not None:\n                    receiver_class_name = getattr(receiver.__self__, '__class__', type).__name__\n                    text = \"%s.%s\" % (receiver_class_name, receiver_name)\n                elif getattr(receiver, 'im_class', None) is not None:   \n                    receiver_class_name = receiver.im_class.__name__\n                    text = \"%s.%s\" % (receiver_class_name, receiver_name)\n                else:\n                    text = \"%s\" % receiver_name\n                receivers.append(text)\n            signals.append((name, signal, receivers))\n\n        self.record_stats({'signals': signals})\n", "comments": "  handle double count translation  hence    hard coding one signal    python 2 ", "content": "from __future__ import absolute_import, unicode_literals\n\nimport weakref\n\nfrom django.core.signals import (\n    got_request_exception, request_finished, request_started,\n)\nfrom django.db.backends.signals import connection_created\nfrom django.db.models.signals import (\n    class_prepared, post_delete, post_init, post_migrate, post_save,\n    pre_delete, pre_init, pre_save,\n)\nfrom django.utils.module_loading import import_string\nfrom django.utils.translation import ugettext_lazy as _, ungettext\n\nfrom debug_toolbar.panels import Panel\n\n\nclass SignalsPanel(Panel):\n    template = 'debug_toolbar/panels/signals.html'\n\n    SIGNALS = {\n        'request_started': request_started,\n        'request_finished': request_finished,\n        'got_request_exception': got_request_exception,\n        'connection_created': connection_created,\n        'class_prepared': class_prepared,\n        'pre_init': pre_init,\n        'post_init': post_init,\n        'pre_save': pre_save,\n        'post_save': post_save,\n        'pre_delete': pre_delete,\n        'post_delete': post_delete,\n        'post_migrate': post_migrate,\n    }\n\n    def nav_subtitle(self):\n        signals = self.get_stats()['signals']\n        num_receivers = sum(len(s[2]) for s in signals)\n        num_signals = len(signals)\n        # here we have to handle a double count translation, hence the\n        # hard coding of one signal\n        if num_signals == 1:\n            return ungettext(\"%(num_receivers)d receiver of 1 signal\",\n                             \"%(num_receivers)d receivers of 1 signal\",\n                             num_receivers) % {'num_receivers': num_receivers}\n        return ungettext(\"%(num_receivers)d receiver of %(num_signals)d signals\",\n                         \"%(num_receivers)d receivers of %(num_signals)d signals\",\n                         num_receivers) % {'num_receivers': num_receivers,\n                                           'num_signals': num_signals}\n\n    title = _(\"Signals\")\n\n    @property\n    def signals(self):\n        signals = self.SIGNALS.copy()\n        for signal in self.toolbar.config['EXTRA_SIGNALS']:\n            signal_name = signal.rsplit('.', 1)[-1]\n            signals[signal_name] = import_string(signal)\n        return signals\n\n    def generate_stats(self, request, response):\n        signals = []\n        for name, signal in sorted(self.signals.items(), key=lambda x: x[0]):\n            receivers = []\n            for receiver in signal.receivers:\n                receiver = receiver[1]\n                if isinstance(receiver, weakref.ReferenceType):\n                    receiver = receiver()\n                if receiver is None:\n                    continue\n\n                receiver = getattr(receiver, '__wraps__', receiver)\n                receiver_name = getattr(receiver, '__name__', str(receiver))\n                if getattr(receiver, '__self__', None) is not None:\n                    receiver_class_name = getattr(receiver.__self__, '__class__', type).__name__\n                    text = \"%s.%s\" % (receiver_class_name, receiver_name)\n                elif getattr(receiver, 'im_class', None) is not None:   # Python 2 only\n                    receiver_class_name = receiver.im_class.__name__\n                    text = \"%s.%s\" % (receiver_class_name, receiver_name)\n                else:\n                    text = \"%s\" % receiver_name\n                receivers.append(text)\n            signals.append((name, signal, receivers))\n\n        self.record_stats({'signals': signals})\n", "description": "A configurable set of panels that display various debug information about the current request/response.", "file_name": "signals.py", "id": "f1f696d7be274093896055dcd24317ed", "language": "Python", "project_name": "django-debug-toolbar", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jazzband-django-debug-toolbar/jazzband-django-debug-toolbar-459e978/debug_toolbar/panels/signals.py", "save_time": "", "source": "", "update_at": "2018-03-18T09:15:08Z", "url": "https://github.com/jazzband/django-debug-toolbar", "wiki": true}