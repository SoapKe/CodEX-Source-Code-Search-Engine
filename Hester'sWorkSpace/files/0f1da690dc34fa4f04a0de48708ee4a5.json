{"author": "keras-team", "code": "from __future__ import absolute_import\nfrom __future__ import print_function\nimport pytest\n\nfrom keras.utils.test_utils import keras_test\nfrom keras.models import Model, Sequential\nfrom keras.layers import Dense, Input\n\n\n@keras_test\ndef test_layer_trainability_switch():\n    \n    model = Sequential()\n    model.add(Dense(2, trainable=False, input_dim=1))\n    assert model.trainable_weights == []\n\n    \n    model = Sequential()\n    layer = Dense(2, input_dim=1)\n    model.add(layer)\n    assert model.trainable_weights == layer.trainable_weights\n    layer.trainable = False\n    assert model.trainable_weights == []\n\n    \n    x = Input(shape=(1,))\n    y = Dense(2, trainable=False)(x)\n    model = Model(x, y)\n    assert model.trainable_weights == []\n\n    \n    x = Input(shape=(1,))\n    layer = Dense(2)\n    y = layer(x)\n    model = Model(x, y)\n    assert model.trainable_weights == layer.trainable_weights\n    layer.trainable = False\n    assert model.trainable_weights == []\n\n\n@keras_test\ndef test_model_trainability_switch():\n    \n    x = Input(shape=(1,))\n    y = Dense(2)(x)\n    model = Model(x, y)\n    model.trainable = False\n    assert model.trainable_weights == []\n\n    \n    model = Sequential()\n    model.add(Dense(2, input_dim=1))\n    model.trainable = False\n    assert model.trainable_weights == []\n\n\n@keras_test\ndef test_nested_model_trainability():\n    \n    inner_model = Sequential()\n    inner_model.add(Dense(2, input_dim=1))\n\n    x = Input(shape=(1,))\n    y = inner_model(x)\n    outer_model = Model(x, y)\n    assert outer_model.trainable_weights == inner_model.trainable_weights\n    inner_model.trainable = False\n    assert outer_model.trainable_weights == []\n    inner_model.trainable = True\n    inner_model.layers[-1].trainable = False\n    assert outer_model.trainable_weights == []\n\n    \n    inner_model = Sequential()\n    inner_model.add(Dense(2, input_dim=1))\n    outer_model = Sequential()\n    outer_model.add(inner_model)\n    assert outer_model.trainable_weights == inner_model.trainable_weights\n    inner_model.trainable = False\n    assert outer_model.trainable_weights == []\n    inner_model.trainable = True\n    inner_model.layers[-1].trainable = False\n    assert outer_model.trainable_weights == []\n\n    \n    x = Input(shape=(1,))\n    y = Dense(2)(x)\n    inner_model = Model(x, y)\n    x = Input(shape=(1,))\n    y = inner_model(x)\n    outer_model = Model(x, y)\n    assert outer_model.trainable_weights == inner_model.trainable_weights\n    inner_model.trainable = False\n    assert outer_model.trainable_weights == []\n    inner_model.trainable = True\n    inner_model.layers[-1].trainable = False\n    assert outer_model.trainable_weights == []\n\n    \n    x = Input(shape=(1,))\n    y = Dense(2)(x)\n    inner_model = Model(x, y)\n    outer_model = Sequential()\n    outer_model.add(inner_model)\n    assert outer_model.trainable_weights == inner_model.trainable_weights\n    inner_model.trainable = False\n    assert outer_model.trainable_weights == []\n    inner_model.trainable = True\n    inner_model.layers[-1].trainable = False\n    assert outer_model.trainable_weights == []\n\n\nif __name__ == '__main__':\n    pytest.main([__file__])\n", "comments": "constructor argument sequential setting `trainable` argument sequential constructor argument model setting `trainable` argument model non-trainable model trainable weights sequential sequential inside model sequential inside sequential model inside model model inside sequential", "content": "from __future__ import absolute_import\nfrom __future__ import print_function\nimport pytest\n\nfrom keras.utils.test_utils import keras_test\nfrom keras.models import Model, Sequential\nfrom keras.layers import Dense, Input\n\n\n@keras_test\ndef test_layer_trainability_switch():\n    # with constructor argument, in Sequential\n    model = Sequential()\n    model.add(Dense(2, trainable=False, input_dim=1))\n    assert model.trainable_weights == []\n\n    # by setting the `trainable` argument, in Sequential\n    model = Sequential()\n    layer = Dense(2, input_dim=1)\n    model.add(layer)\n    assert model.trainable_weights == layer.trainable_weights\n    layer.trainable = False\n    assert model.trainable_weights == []\n\n    # with constructor argument, in Model\n    x = Input(shape=(1,))\n    y = Dense(2, trainable=False)(x)\n    model = Model(x, y)\n    assert model.trainable_weights == []\n\n    # by setting the `trainable` argument, in Model\n    x = Input(shape=(1,))\n    layer = Dense(2)\n    y = layer(x)\n    model = Model(x, y)\n    assert model.trainable_weights == layer.trainable_weights\n    layer.trainable = False\n    assert model.trainable_weights == []\n\n\n@keras_test\ndef test_model_trainability_switch():\n    # a non-trainable model has no trainable weights\n    x = Input(shape=(1,))\n    y = Dense(2)(x)\n    model = Model(x, y)\n    model.trainable = False\n    assert model.trainable_weights == []\n\n    # same for Sequential\n    model = Sequential()\n    model.add(Dense(2, input_dim=1))\n    model.trainable = False\n    assert model.trainable_weights == []\n\n\n@keras_test\ndef test_nested_model_trainability():\n    # a Sequential inside a Model\n    inner_model = Sequential()\n    inner_model.add(Dense(2, input_dim=1))\n\n    x = Input(shape=(1,))\n    y = inner_model(x)\n    outer_model = Model(x, y)\n    assert outer_model.trainable_weights == inner_model.trainable_weights\n    inner_model.trainable = False\n    assert outer_model.trainable_weights == []\n    inner_model.trainable = True\n    inner_model.layers[-1].trainable = False\n    assert outer_model.trainable_weights == []\n\n    # a Sequential inside a Sequential\n    inner_model = Sequential()\n    inner_model.add(Dense(2, input_dim=1))\n    outer_model = Sequential()\n    outer_model.add(inner_model)\n    assert outer_model.trainable_weights == inner_model.trainable_weights\n    inner_model.trainable = False\n    assert outer_model.trainable_weights == []\n    inner_model.trainable = True\n    inner_model.layers[-1].trainable = False\n    assert outer_model.trainable_weights == []\n\n    # a Model inside a Model\n    x = Input(shape=(1,))\n    y = Dense(2)(x)\n    inner_model = Model(x, y)\n    x = Input(shape=(1,))\n    y = inner_model(x)\n    outer_model = Model(x, y)\n    assert outer_model.trainable_weights == inner_model.trainable_weights\n    inner_model.trainable = False\n    assert outer_model.trainable_weights == []\n    inner_model.trainable = True\n    inner_model.layers[-1].trainable = False\n    assert outer_model.trainable_weights == []\n\n    # a Model inside a Sequential\n    x = Input(shape=(1,))\n    y = Dense(2)(x)\n    inner_model = Model(x, y)\n    outer_model = Sequential()\n    outer_model.add(inner_model)\n    assert outer_model.trainable_weights == inner_model.trainable_weights\n    inner_model.trainable = False\n    assert outer_model.trainable_weights == []\n    inner_model.trainable = True\n    inner_model.layers[-1].trainable = False\n    assert outer_model.trainable_weights == []\n\n\nif __name__ == '__main__':\n    pytest.main([__file__])\n", "description": "Deep Learning for humans", "file_name": "test_dynamic_trainability.py", "id": "0f1da690dc34fa4f04a0de48708ee4a5", "language": "Python", "project_name": "keras", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/keras-team-keras/keras-team-keras-500fab7/tests/test_dynamic_trainability.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:56:11Z", "url": "https://github.com/keras-team/keras", "wiki": true}