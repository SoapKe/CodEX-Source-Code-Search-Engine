{"author": "powerline", "code": "\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\n\nimport ctypes\n\nfrom collections import namedtuple\n\nfrom powerline.lib.unicode import unicode, unichr, tointiter\n\n\nDimensions = namedtuple('Dimensions', ('rows', 'cols'))\n\n\nclass CTypesFunction(object):\n\tdef __init__(self, library, name, rettype, args):\n\t\tself.name = name\n\t\tself.prototype = ctypes.CFUNCTYPE(rettype, *[\n\t\t\targ[1] for arg in args\n\t\t])\n\t\tself.args = args\n\t\tself.func = self.prototype((name, library), tuple((\n\t\t\t(1, arg[0]) for arg in args\n\t\t)))\n\n\tdef __call__(self, *args, **kwargs):\n\t\treturn self.func(*args, **kwargs)\n\n\tdef __repr__(self):\n\t\treturn '{cls}(<library>, {name!r}, {rettype!r}, {args!r})'.format(\n\t\t\tcls=self.__class__.__name__,\n\t\t\t**self.__dict__\n\t\t)\n\n\nclass CTypesLibraryFuncsCollection(object):\n\tdef __init__(self, lib, **kwargs):\n\t\tself.lib = lib\n\t\tlibrary_loader = ctypes.LibraryLoader(ctypes.CDLL)\n\t\tlibrary = library_loader.LoadLibrary(lib)\n\t\tself.library = library\n\t\tfor name, args in kwargs.items():\n\t\t\tself.__dict__[name] = CTypesFunction(library, name, *args)\n\n\nclass VTermPos_s(ctypes.Structure):\n\t_fields_ = (\n\t\t('row', ctypes.c_int),\n\t\t('col', ctypes.c_int),\n\t)\n\n\nclass VTermColor_s(ctypes.Structure):\n\t_fields_ = (\n\t\t('red', ctypes.c_uint8),\n\t\t('green', ctypes.c_uint8),\n\t\t('blue', ctypes.c_uint8),\n\t)\n\n\nclass VTermScreenCellAttrs_s(ctypes.Structure):\n\t_fields_ = (\n\t\t('bold', ctypes.c_uint, 1),\n\t\t('underline', ctypes.c_uint, 2),\n\t\t('italic', ctypes.c_uint, 1),\n\t\t('blink', ctypes.c_uint, 1),\n\t\t('reverse', ctypes.c_uint, 1),\n\t\t('strike', ctypes.c_uint, 1),\n\t\t('font', ctypes.c_uint, 4),\n\t\t('dwl', ctypes.c_uint, 1),\n\t\t('dhl', ctypes.c_uint, 2),\n\t)\n\n\nVTERM_MAX_CHARS_PER_CELL = 6\n\n\nclass VTermScreenCell_s(ctypes.Structure):\n\t_fields_ = (\n\t\t('chars', ctypes.ARRAY(ctypes.c_uint32, VTERM_MAX_CHARS_PER_CELL)),\n\t\t('width', ctypes.c_char),\n\t\t('attrs', VTermScreenCellAttrs_s),\n\t\t('fg', VTermColor_s),\n\t\t('bg', VTermColor_s),\n\t)\n\n\nVTerm_p = ctypes.c_void_p\nVTermScreen_p = ctypes.c_void_p\n\n\ndef get_functions(lib):\n\treturn CTypesLibraryFuncsCollection(\n\t\tlib,\n\t\tvterm_new=(VTerm_p, (\n\t\t\t('rows', ctypes.c_int),\n\t\t\t('cols', ctypes.c_int)\n\t\t)),\n\t\tvterm_obtain_screen=(VTermScreen_p, (('vt', VTerm_p),)),\n\t\tvterm_set_size=(None, (\n\t\t\t('vt', VTerm_p),\n\t\t\t('rows', ctypes.c_int),\n\t\t\t('cols', ctypes.c_int)\n\t\t)),\n\t\tvterm_screen_reset=(None, (\n\t\t\t('screen', VTermScreen_p),\n\t\t\t('hard', ctypes.c_int)\n\t\t)),\n\t\tvterm_input_write=(ctypes.c_size_t, (\n\t\t\t('vt', VTerm_p),\n\t\t\t('bytes', ctypes.POINTER(ctypes.c_char)),\n\t\t\t('size', ctypes.c_size_t),\n\t\t)),\n\t\tvterm_screen_get_cell=(ctypes.c_int, (\n\t\t\t('screen', VTermScreen_p),\n\t\t\t('pos', VTermPos_s),\n\t\t\t('cell', ctypes.POINTER(VTermScreenCell_s))\n\t\t)),\n\t\tvterm_free=(None, (('vt', VTerm_p),)),\n\t)\n\n\nclass VTermColor(object):\n\t__slots__ = ('red', 'green', 'blue')\n\n\tdef __init__(self, color):\n\t\tself.red = color.red\n\t\tself.green = color.green\n\t\tself.blue = color.blue\n\n\t@property\n\tdef color_key(self):\n\t\treturn (self.red, self.green, self.blue)\n\n\nclass VTermScreenCell(object):\n\tdef __init__(self, vtsc):\n\t\tfor field in VTermScreenCellAttrs_s._fields_:\n\t\t\tfield_name = field[0]\n\t\t\tsetattr(self, field_name, getattr(vtsc.attrs, field_name))\n\t\tself.text = ''.join((\n\t\t\tunichr(vtsc.chars[i]) for i in range(VTERM_MAX_CHARS_PER_CELL)\n\t\t)).rstrip('\\x00')\n\t\tself.width = next(tointiter(vtsc.width))\n\t\tself.fg = VTermColor(vtsc.fg)\n\t\tself.bg = VTermColor(vtsc.bg)\n\t\tself.cell_properties_key = (\n\t\t\tself.fg.color_key,\n\t\t\tself.bg.color_key,\n\t\t\tself.bold,\n\t\t\tself.underline,\n\t\t\tself.italic,\n\t\t)\n\n\nclass VTermScreen(object):\n\tdef __init__(self, functions, screen):\n\t\tself.functions = functions\n\t\tself.screen = screen\n\n\tdef __getitem__(self, position):\n\t\tpos = VTermPos_s(*position)\n\t\tcell = VTermScreenCell_s()\n\t\tret = self.functions.vterm_screen_get_cell(self.screen, pos, cell)\n\t\tif ret != 1:\n\t\t\traise ValueError('vterm_screen_get_cell returned {0}'.format(ret))\n\t\treturn VTermScreenCell(cell)\n\n\tdef reset(self, hard):\n\t\tself.functions.vterm_screen_reset(self.screen, int(bool(hard)))\n\n\nclass VTerm(object):\n\tdef __init__(self, lib, dim):\n\t\tself.functions = get_functions(lib)\n\t\tself.vt = self.functions.vterm_new(dim.rows, dim.cols)\n\t\tself.vtscreen = VTermScreen(self.functions, self.functions.vterm_obtain_screen(self.vt))\n\t\tself.vtscreen.reset(True)\n\n\tdef push(self, data):\n\t\tif isinstance(data, unicode):\n\t\t\tdata = data.encode('utf-8')\n\t\treturn self.functions.vterm_input_write(self.vt, data, len(data))\n\n\tdef resize(self, dim):\n\t\tself.functions.vterm_set_size(self.vt, dim.rows, dim.cols)\n\n\tdef __del__(self):\n\t\ttry:\n\t\t\tself.functions.vterm_free(self.vt)\n\t\texcept AttributeError:\n\t\t\tpass\n", "comments": "  vim fileencoding utf 8 noet ", "content": "# vim:fileencoding=utf-8:noet\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\n\nimport ctypes\n\nfrom collections import namedtuple\n\nfrom powerline.lib.unicode import unicode, unichr, tointiter\n\n\nDimensions = namedtuple('Dimensions', ('rows', 'cols'))\n\n\nclass CTypesFunction(object):\n\tdef __init__(self, library, name, rettype, args):\n\t\tself.name = name\n\t\tself.prototype = ctypes.CFUNCTYPE(rettype, *[\n\t\t\targ[1] for arg in args\n\t\t])\n\t\tself.args = args\n\t\tself.func = self.prototype((name, library), tuple((\n\t\t\t(1, arg[0]) for arg in args\n\t\t)))\n\n\tdef __call__(self, *args, **kwargs):\n\t\treturn self.func(*args, **kwargs)\n\n\tdef __repr__(self):\n\t\treturn '{cls}(<library>, {name!r}, {rettype!r}, {args!r})'.format(\n\t\t\tcls=self.__class__.__name__,\n\t\t\t**self.__dict__\n\t\t)\n\n\nclass CTypesLibraryFuncsCollection(object):\n\tdef __init__(self, lib, **kwargs):\n\t\tself.lib = lib\n\t\tlibrary_loader = ctypes.LibraryLoader(ctypes.CDLL)\n\t\tlibrary = library_loader.LoadLibrary(lib)\n\t\tself.library = library\n\t\tfor name, args in kwargs.items():\n\t\t\tself.__dict__[name] = CTypesFunction(library, name, *args)\n\n\nclass VTermPos_s(ctypes.Structure):\n\t_fields_ = (\n\t\t('row', ctypes.c_int),\n\t\t('col', ctypes.c_int),\n\t)\n\n\nclass VTermColor_s(ctypes.Structure):\n\t_fields_ = (\n\t\t('red', ctypes.c_uint8),\n\t\t('green', ctypes.c_uint8),\n\t\t('blue', ctypes.c_uint8),\n\t)\n\n\nclass VTermScreenCellAttrs_s(ctypes.Structure):\n\t_fields_ = (\n\t\t('bold', ctypes.c_uint, 1),\n\t\t('underline', ctypes.c_uint, 2),\n\t\t('italic', ctypes.c_uint, 1),\n\t\t('blink', ctypes.c_uint, 1),\n\t\t('reverse', ctypes.c_uint, 1),\n\t\t('strike', ctypes.c_uint, 1),\n\t\t('font', ctypes.c_uint, 4),\n\t\t('dwl', ctypes.c_uint, 1),\n\t\t('dhl', ctypes.c_uint, 2),\n\t)\n\n\nVTERM_MAX_CHARS_PER_CELL = 6\n\n\nclass VTermScreenCell_s(ctypes.Structure):\n\t_fields_ = (\n\t\t('chars', ctypes.ARRAY(ctypes.c_uint32, VTERM_MAX_CHARS_PER_CELL)),\n\t\t('width', ctypes.c_char),\n\t\t('attrs', VTermScreenCellAttrs_s),\n\t\t('fg', VTermColor_s),\n\t\t('bg', VTermColor_s),\n\t)\n\n\nVTerm_p = ctypes.c_void_p\nVTermScreen_p = ctypes.c_void_p\n\n\ndef get_functions(lib):\n\treturn CTypesLibraryFuncsCollection(\n\t\tlib,\n\t\tvterm_new=(VTerm_p, (\n\t\t\t('rows', ctypes.c_int),\n\t\t\t('cols', ctypes.c_int)\n\t\t)),\n\t\tvterm_obtain_screen=(VTermScreen_p, (('vt', VTerm_p),)),\n\t\tvterm_set_size=(None, (\n\t\t\t('vt', VTerm_p),\n\t\t\t('rows', ctypes.c_int),\n\t\t\t('cols', ctypes.c_int)\n\t\t)),\n\t\tvterm_screen_reset=(None, (\n\t\t\t('screen', VTermScreen_p),\n\t\t\t('hard', ctypes.c_int)\n\t\t)),\n\t\tvterm_input_write=(ctypes.c_size_t, (\n\t\t\t('vt', VTerm_p),\n\t\t\t('bytes', ctypes.POINTER(ctypes.c_char)),\n\t\t\t('size', ctypes.c_size_t),\n\t\t)),\n\t\tvterm_screen_get_cell=(ctypes.c_int, (\n\t\t\t('screen', VTermScreen_p),\n\t\t\t('pos', VTermPos_s),\n\t\t\t('cell', ctypes.POINTER(VTermScreenCell_s))\n\t\t)),\n\t\tvterm_free=(None, (('vt', VTerm_p),)),\n\t)\n\n\nclass VTermColor(object):\n\t__slots__ = ('red', 'green', 'blue')\n\n\tdef __init__(self, color):\n\t\tself.red = color.red\n\t\tself.green = color.green\n\t\tself.blue = color.blue\n\n\t@property\n\tdef color_key(self):\n\t\treturn (self.red, self.green, self.blue)\n\n\nclass VTermScreenCell(object):\n\tdef __init__(self, vtsc):\n\t\tfor field in VTermScreenCellAttrs_s._fields_:\n\t\t\tfield_name = field[0]\n\t\t\tsetattr(self, field_name, getattr(vtsc.attrs, field_name))\n\t\tself.text = ''.join((\n\t\t\tunichr(vtsc.chars[i]) for i in range(VTERM_MAX_CHARS_PER_CELL)\n\t\t)).rstrip('\\x00')\n\t\tself.width = next(tointiter(vtsc.width))\n\t\tself.fg = VTermColor(vtsc.fg)\n\t\tself.bg = VTermColor(vtsc.bg)\n\t\tself.cell_properties_key = (\n\t\t\tself.fg.color_key,\n\t\t\tself.bg.color_key,\n\t\t\tself.bold,\n\t\t\tself.underline,\n\t\t\tself.italic,\n\t\t)\n\n\nclass VTermScreen(object):\n\tdef __init__(self, functions, screen):\n\t\tself.functions = functions\n\t\tself.screen = screen\n\n\tdef __getitem__(self, position):\n\t\tpos = VTermPos_s(*position)\n\t\tcell = VTermScreenCell_s()\n\t\tret = self.functions.vterm_screen_get_cell(self.screen, pos, cell)\n\t\tif ret != 1:\n\t\t\traise ValueError('vterm_screen_get_cell returned {0}'.format(ret))\n\t\treturn VTermScreenCell(cell)\n\n\tdef reset(self, hard):\n\t\tself.functions.vterm_screen_reset(self.screen, int(bool(hard)))\n\n\nclass VTerm(object):\n\tdef __init__(self, lib, dim):\n\t\tself.functions = get_functions(lib)\n\t\tself.vt = self.functions.vterm_new(dim.rows, dim.cols)\n\t\tself.vtscreen = VTermScreen(self.functions, self.functions.vterm_obtain_screen(self.vt))\n\t\tself.vtscreen.reset(True)\n\n\tdef push(self, data):\n\t\tif isinstance(data, unicode):\n\t\t\tdata = data.encode('utf-8')\n\t\treturn self.functions.vterm_input_write(self.vt, data, len(data))\n\n\tdef resize(self, dim):\n\t\tself.functions.vterm_set_size(self.vt, dim.rows, dim.cols)\n\n\tdef __del__(self):\n\t\ttry:\n\t\t\tself.functions.vterm_free(self.vt)\n\t\texcept AttributeError:\n\t\t\tpass\n", "description": "Powerline is a statusline plugin for vim, and provides statuslines and prompts for several other applications, including zsh, bash, tmux, IPython, Awesome and Qtile.", "file_name": "vterm.py", "id": "3901652dcf482ebfcf4ee2c0f7098dc0", "language": "Python", "project_name": "powerline", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/powerline-powerline/powerline-powerline-d36850f/tests/modules/lib/vterm.py", "save_time": "", "source": "", "update_at": "2018-03-18T09:00:33Z", "url": "https://github.com/powerline/powerline", "wiki": false}