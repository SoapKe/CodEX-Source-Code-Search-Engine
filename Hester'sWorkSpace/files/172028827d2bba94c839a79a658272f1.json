{"author": "ansible", "code": "import io\nimport yaml\n\nfrom ansible.module_utils.six import PY3\nfrom ansible.parsing.yaml.loader import AnsibleLoader\nfrom ansible.parsing.yaml.dumper import AnsibleDumper\n\n\nclass YamlTestUtils(object):\n    \"\"\"Mixin class to combine with a unittest.TestCase subclass.\"\"\"\n    def _loader(self, stream):\n        \"\"\"Vault related tests will want to override this.\n\n        Vault cases should setup a AnsibleLoader that has the vault password.\"\"\"\n        return AnsibleLoader(stream)\n\n    def _dump_stream(self, obj, stream, dumper=None):\n        \"\"\"Dump to a py2-unicode or py3-string stream.\"\"\"\n        if PY3:\n            return yaml.dump(obj, stream, Dumper=dumper)\n        else:\n            return yaml.dump(obj, stream, Dumper=dumper, encoding=None)\n\n    def _dump_string(self, obj, dumper=None):\n        \"\"\"Dump to a py2-unicode or py3-string\"\"\"\n        if PY3:\n            return yaml.dump(obj, Dumper=dumper)\n        else:\n            return yaml.dump(obj, Dumper=dumper, encoding=None)\n\n    def _dump_load_cycle(self, obj):\n        \n        \n        string_from_object_dump = self._dump_string(obj, dumper=AnsibleDumper)\n\n        \n        stream_from_object_dump = io.StringIO(string_from_object_dump)\n        loader = self._loader(stream_from_object_dump)\n        # load the yaml stream to create a new instance of the object (gen 2)\n        obj_2 = loader.get_data()\n\n        \n        string_from_object_dump_2 = self._dump_string(obj_2,\n                                                      dumper=AnsibleDumper)\n\n        \n        self.assertEquals(string_from_object_dump, string_from_object_dump_2)\n        # the gen 1 (orig) and gen 2 py object\n        self.assertEquals(obj, obj_2)\n\n        \n        stream_3 = io.StringIO(string_from_object_dump_2)\n        loader_3 = self._loader(stream_3)\n        obj_3 = loader_3.get_data()\n\n        string_from_object_dump_3 = self._dump_string(obj_3, dumper=AnsibleDumper)\n\n        self.assertEquals(obj, obj_3)\n        \n        self.assertEquals(obj_2, obj_3)\n        self.assertEquals(string_from_object_dump, string_from_object_dump_3)\n\n    def _old_dump_load_cycle(self, obj):\n        \n        stream = io.StringIO()\n\n        yaml_string = self._dump_string(obj, dumper=AnsibleDumper)\n        self._dump_stream(obj, stream, dumper=AnsibleDumper)\n\n        yaml_string_from_stream = stream.getvalue()\n\n        \n        stream.seek(0)\n\n        loader = self._loader(stream)\n        # loader = AnsibleLoader(stream, vault_password=self.vault_password)\n        obj_from_stream = loader.get_data()\n\n        stream_from_string = io.StringIO(yaml_string)\n        loader2 = self._loader(stream_from_string)\n        # loader2 = AnsibleLoader(stream_from_string, vault_password=self.vault_password)\n        obj_from_string = loader2.get_data()\n\n        stream_obj_from_stream = io.StringIO()\n        stream_obj_from_string = io.StringIO()\n\n        if PY3:\n            yaml.dump(obj_from_stream, stream_obj_from_stream, Dumper=AnsibleDumper)\n            yaml.dump(obj_from_stream, stream_obj_from_string, Dumper=AnsibleDumper)\n        else:\n            yaml.dump(obj_from_stream, stream_obj_from_stream, Dumper=AnsibleDumper, encoding=None)\n            yaml.dump(obj_from_stream, stream_obj_from_string, Dumper=AnsibleDumper, encoding=None)\n\n        yaml_string_stream_obj_from_stream = stream_obj_from_stream.getvalue()\n        yaml_string_stream_obj_from_string = stream_obj_from_string.getvalue()\n\n        stream_obj_from_stream.seek(0)\n        stream_obj_from_string.seek(0)\n\n        if PY3:\n            yaml_string_obj_from_stream = yaml.dump(obj_from_stream, Dumper=AnsibleDumper)\n            yaml_string_obj_from_string = yaml.dump(obj_from_string, Dumper=AnsibleDumper)\n        else:\n            yaml_string_obj_from_stream = yaml.dump(obj_from_stream, Dumper=AnsibleDumper, encoding=None)\n            yaml_string_obj_from_string = yaml.dump(obj_from_string, Dumper=AnsibleDumper, encoding=None)\n\n        assert yaml_string == yaml_string_obj_from_stream\n        assert yaml_string == yaml_string_obj_from_stream == yaml_string_obj_from_string\n        assert (yaml_string == yaml_string_obj_from_stream == yaml_string_obj_from_string == yaml_string_stream_obj_from_stream ==\n                yaml_string_stream_obj_from_string)\n        assert obj == obj_from_stream\n        assert obj == obj_from_string\n        assert obj == yaml_string_obj_from_stream\n        assert obj == yaml_string_obj_from_string\n        assert obj == obj_from_stream == obj_from_string == yaml_string_obj_from_stream == yaml_string_obj_from_string\n        return {'obj': obj,\n                'yaml_string': yaml_string,\n                'yaml_string_from_stream': yaml_string_from_stream,\n                'obj_from_stream': obj_from_stream,\n                'obj_from_string': obj_from_string,\n                'yaml_string_obj_from_string': yaml_string_obj_from_string}\n", "comments": "   mixin class combine unittest testcase subclass         def  loader(self  stream)             vault related tests want override           vault cases setup ansibleloader vault password             return ansibleloader(stream)      def  dump stream(self  obj  stream  dumper none)             dump py2 unicode py3 string stream             py3              return yaml dump(obj  stream  dumper dumper)         else              return yaml dump(obj  stream  dumper dumper  encoding none)      def  dump string(self  obj  dumper none)             dump py2 unicode py3 string        dump passed object yaml  load back  dump  compare        each pass though dump load revs  generation     obj yaml string    wrap stream file like stringio around yaml    load yaml stream create new instance object (gen 2)    dump gen 2 objects directory strings    the gen 1 gen 2 yaml strings    gen 1 (orig) gen 2 py object     gen 3    load strings py objects    transitive        reset stream    loader   ansibleloader(stream  vault password self vault password)    loader2   ansibleloader(stream string  vault password self vault password) ", "content": "import io\nimport yaml\n\nfrom ansible.module_utils.six import PY3\nfrom ansible.parsing.yaml.loader import AnsibleLoader\nfrom ansible.parsing.yaml.dumper import AnsibleDumper\n\n\nclass YamlTestUtils(object):\n    \"\"\"Mixin class to combine with a unittest.TestCase subclass.\"\"\"\n    def _loader(self, stream):\n        \"\"\"Vault related tests will want to override this.\n\n        Vault cases should setup a AnsibleLoader that has the vault password.\"\"\"\n        return AnsibleLoader(stream)\n\n    def _dump_stream(self, obj, stream, dumper=None):\n        \"\"\"Dump to a py2-unicode or py3-string stream.\"\"\"\n        if PY3:\n            return yaml.dump(obj, stream, Dumper=dumper)\n        else:\n            return yaml.dump(obj, stream, Dumper=dumper, encoding=None)\n\n    def _dump_string(self, obj, dumper=None):\n        \"\"\"Dump to a py2-unicode or py3-string\"\"\"\n        if PY3:\n            return yaml.dump(obj, Dumper=dumper)\n        else:\n            return yaml.dump(obj, Dumper=dumper, encoding=None)\n\n    def _dump_load_cycle(self, obj):\n        # Each pass though a dump or load revs the 'generation'\n        # obj to yaml string\n        string_from_object_dump = self._dump_string(obj, dumper=AnsibleDumper)\n\n        # wrap a stream/file like StringIO around that yaml\n        stream_from_object_dump = io.StringIO(string_from_object_dump)\n        loader = self._loader(stream_from_object_dump)\n        # load the yaml stream to create a new instance of the object (gen 2)\n        obj_2 = loader.get_data()\n\n        # dump the gen 2 objects directory to strings\n        string_from_object_dump_2 = self._dump_string(obj_2,\n                                                      dumper=AnsibleDumper)\n\n        # The gen 1 and gen 2 yaml strings\n        self.assertEquals(string_from_object_dump, string_from_object_dump_2)\n        # the gen 1 (orig) and gen 2 py object\n        self.assertEquals(obj, obj_2)\n\n        # again! gen 3... load strings into py objects\n        stream_3 = io.StringIO(string_from_object_dump_2)\n        loader_3 = self._loader(stream_3)\n        obj_3 = loader_3.get_data()\n\n        string_from_object_dump_3 = self._dump_string(obj_3, dumper=AnsibleDumper)\n\n        self.assertEquals(obj, obj_3)\n        # should be transitive, but...\n        self.assertEquals(obj_2, obj_3)\n        self.assertEquals(string_from_object_dump, string_from_object_dump_3)\n\n    def _old_dump_load_cycle(self, obj):\n        '''Dump the passed in object to yaml, load it back up, dump again, compare.'''\n        stream = io.StringIO()\n\n        yaml_string = self._dump_string(obj, dumper=AnsibleDumper)\n        self._dump_stream(obj, stream, dumper=AnsibleDumper)\n\n        yaml_string_from_stream = stream.getvalue()\n\n        # reset stream\n        stream.seek(0)\n\n        loader = self._loader(stream)\n        # loader = AnsibleLoader(stream, vault_password=self.vault_password)\n        obj_from_stream = loader.get_data()\n\n        stream_from_string = io.StringIO(yaml_string)\n        loader2 = self._loader(stream_from_string)\n        # loader2 = AnsibleLoader(stream_from_string, vault_password=self.vault_password)\n        obj_from_string = loader2.get_data()\n\n        stream_obj_from_stream = io.StringIO()\n        stream_obj_from_string = io.StringIO()\n\n        if PY3:\n            yaml.dump(obj_from_stream, stream_obj_from_stream, Dumper=AnsibleDumper)\n            yaml.dump(obj_from_stream, stream_obj_from_string, Dumper=AnsibleDumper)\n        else:\n            yaml.dump(obj_from_stream, stream_obj_from_stream, Dumper=AnsibleDumper, encoding=None)\n            yaml.dump(obj_from_stream, stream_obj_from_string, Dumper=AnsibleDumper, encoding=None)\n\n        yaml_string_stream_obj_from_stream = stream_obj_from_stream.getvalue()\n        yaml_string_stream_obj_from_string = stream_obj_from_string.getvalue()\n\n        stream_obj_from_stream.seek(0)\n        stream_obj_from_string.seek(0)\n\n        if PY3:\n            yaml_string_obj_from_stream = yaml.dump(obj_from_stream, Dumper=AnsibleDumper)\n            yaml_string_obj_from_string = yaml.dump(obj_from_string, Dumper=AnsibleDumper)\n        else:\n            yaml_string_obj_from_stream = yaml.dump(obj_from_stream, Dumper=AnsibleDumper, encoding=None)\n            yaml_string_obj_from_string = yaml.dump(obj_from_string, Dumper=AnsibleDumper, encoding=None)\n\n        assert yaml_string == yaml_string_obj_from_stream\n        assert yaml_string == yaml_string_obj_from_stream == yaml_string_obj_from_string\n        assert (yaml_string == yaml_string_obj_from_stream == yaml_string_obj_from_string == yaml_string_stream_obj_from_stream ==\n                yaml_string_stream_obj_from_string)\n        assert obj == obj_from_stream\n        assert obj == obj_from_string\n        assert obj == yaml_string_obj_from_stream\n        assert obj == yaml_string_obj_from_string\n        assert obj == obj_from_stream == obj_from_string == yaml_string_obj_from_stream == yaml_string_obj_from_string\n        return {'obj': obj,\n                'yaml_string': yaml_string,\n                'yaml_string_from_stream': yaml_string_from_stream,\n                'obj_from_stream': obj_from_stream,\n                'obj_from_string': obj_from_string,\n                'yaml_string_obj_from_string': yaml_string_obj_from_string}\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "yaml_helper.py", "id": "172028827d2bba94c839a79a658272f1", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/mock/yaml_helper.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}