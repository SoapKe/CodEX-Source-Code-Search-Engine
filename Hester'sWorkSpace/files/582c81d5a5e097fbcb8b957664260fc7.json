{"author": "tflearn", "code": "'''\n    This file contains test cases for tflearn\n'''\n\nimport tensorflow as tf\nimport tflearn\nimport unittest\n\nclass TestInputs(unittest.TestCase):\n    '''\n        This class contains test cases for serval input types\n    '''\n    INPUT_DATA_1 = [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ] ]\n    INPUT_DATA_2 = [ [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ] ]\n    TARGET = [ [ 14 ], [ 18 ], [ 22 ], [ 26 ], [ 30 ] ]   # (input1 + input2) * 2\n\n    def test_list_inputs(self):\n        \"\"\"Test input a list\n        \"\"\"\n        with tf.Graph().as_default():\n            model, inputs, target = self.build_simple_model()\n            model.fit([ inpData for _, _, inpData in inputs ], target, batch_size = 1)\n\n    def test_dict_inputs(self):\n        \"\"\"Test input a dict with layer name\n        \"\"\"\n        with tf.Graph().as_default():\n            model, inputs, target = self.build_simple_model()\n            model.fit({ name: inpData for name, _, inpData in inputs }, target, batch_size = 1)\n\n    def test_dict_withtensor_inputs(self):\n        \"\"\"Test input a dict with placeholder\n        \"\"\"\n        with tf.Graph().as_default():\n            model, inputs, target = self.build_simple_model()\n            model.fit({ placeholder: inpData for _, placeholder, inpData in inputs }, target, batch_size = 1)\n\n    def build_simple_model(self):\n        \"\"\"Build a simple model for test\n        Returns:\n            DNN, [ (input layer name, input placeholder, input data) ], Target data\n        \"\"\"\n        inputPlaceholder1, inputPlaceholder2 = \\\n            tf.placeholder(tf.float32, (1, 1), name = \"input1\"), tf.placeholder(tf.float32, (1, 1), name = \"input2\")\n        input1 = tflearn.input_data(placeholder = inputPlaceholder1)\n        input2 = tflearn.input_data(placeholder = inputPlaceholder2)\n        network = tflearn.merge([ input1, input2 ], \"sum\")\n        network = tflearn.reshape(network, (1, 1))\n        network = tflearn.fully_connected(network, 1)\n        network = tflearn.regression(network)\n        return (\n            tflearn.DNN(network),\n            [ (\"input1:0\", inputPlaceholder1, self.INPUT_DATA_1), (\"input2:0\", inputPlaceholder2, self.INPUT_DATA_2) ],\n            self.TARGET,\n        )\n\nif __name__ == \"__main__\":\n    unittest.main()\n", "comments": "   test input list                     tf graph() default()              model  inputs  target   self build simple model()             model fit(  inpdata       inpdata inputs    target  batch size   1)      def test dict inputs(self)             test input dict layer name                     tf graph() default()              model  inputs  target   self build simple model()             model fit(  name  inpdata name     inpdata inputs    target  batch size   1)      def test dict withtensor inputs(self)             test input dict placeholder                     tf graph() default()              model  inputs  target   self build simple model()             model fit(  placeholder  inpdata    placeholder  inpdata inputs    target  batch size   1)      def build simple model(self)             build simple model test         returns              dnn    (input layer name  input placeholder  input data)    target data                      this file contains test cases tflearn      import tensorflow tf import tflearn import unittest  class testinputs(unittest testcase)                  this class contains test cases serval input types            (input1   input2)   2 ", "content": "'''\n    This file contains test cases for tflearn\n'''\n\nimport tensorflow as tf\nimport tflearn\nimport unittest\n\nclass TestInputs(unittest.TestCase):\n    '''\n        This class contains test cases for serval input types\n    '''\n    INPUT_DATA_1 = [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ] ]\n    INPUT_DATA_2 = [ [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ] ]\n    TARGET = [ [ 14 ], [ 18 ], [ 22 ], [ 26 ], [ 30 ] ]   # (input1 + input2) * 2\n\n    def test_list_inputs(self):\n        \"\"\"Test input a list\n        \"\"\"\n        with tf.Graph().as_default():\n            model, inputs, target = self.build_simple_model()\n            model.fit([ inpData for _, _, inpData in inputs ], target, batch_size = 1)\n\n    def test_dict_inputs(self):\n        \"\"\"Test input a dict with layer name\n        \"\"\"\n        with tf.Graph().as_default():\n            model, inputs, target = self.build_simple_model()\n            model.fit({ name: inpData for name, _, inpData in inputs }, target, batch_size = 1)\n\n    def test_dict_withtensor_inputs(self):\n        \"\"\"Test input a dict with placeholder\n        \"\"\"\n        with tf.Graph().as_default():\n            model, inputs, target = self.build_simple_model()\n            model.fit({ placeholder: inpData for _, placeholder, inpData in inputs }, target, batch_size = 1)\n\n    def build_simple_model(self):\n        \"\"\"Build a simple model for test\n        Returns:\n            DNN, [ (input layer name, input placeholder, input data) ], Target data\n        \"\"\"\n        inputPlaceholder1, inputPlaceholder2 = \\\n            tf.placeholder(tf.float32, (1, 1), name = \"input1\"), tf.placeholder(tf.float32, (1, 1), name = \"input2\")\n        input1 = tflearn.input_data(placeholder = inputPlaceholder1)\n        input2 = tflearn.input_data(placeholder = inputPlaceholder2)\n        network = tflearn.merge([ input1, input2 ], \"sum\")\n        network = tflearn.reshape(network, (1, 1))\n        network = tflearn.fully_connected(network, 1)\n        network = tflearn.regression(network)\n        return (\n            tflearn.DNN(network),\n            [ (\"input1:0\", inputPlaceholder1, self.INPUT_DATA_1), (\"input2:0\", inputPlaceholder2, self.INPUT_DATA_2) ],\n            self.TARGET,\n        )\n\nif __name__ == \"__main__\":\n    unittest.main()\n", "description": "Deep learning library featuring a higher-level API for TensorFlow.", "file_name": "test_inputs.py", "id": "582c81d5a5e097fbcb8b957664260fc7", "language": "Python", "project_name": "tflearn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tflearn-tflearn/tflearn-tflearn-70fb38a/tests/test_inputs.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:15:41Z", "url": "https://github.com/tflearn/tflearn", "wiki": true}