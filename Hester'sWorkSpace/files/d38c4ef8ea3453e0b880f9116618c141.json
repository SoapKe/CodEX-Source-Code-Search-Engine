{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import unified_strdate\n\n\nclass ATTTechChannelIE(InfoExtractor):\n    _VALID_URL = r'https?://techchannel\\.att\\.com/play-video\\.cfm/([^/]+/)*(?P<id>.+)'\n    _TEST = {\n        'url': 'http://techchannel.att.com/play-video.cfm/2014/1/27/ATT-Archives-The-UNIX-System-Making-Computers-Easier-to-Use',\n        'info_dict': {\n            'id': '11316',\n            'display_id': 'ATT-Archives-The-UNIX-System-Making-Computers-Easier-to-Use',\n            'ext': 'flv',\n            'title': 'AT&T Archives : The UNIX System: Making Computers Easier to Use',\n            'description': 'A 1982 film about UNIX is the foundation for software in use around Bell Labs and AT&T.',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20140127',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        video_url = self._search_regex(\n            r\"url\\s*:\\s*'(rtmp://[^']+)'\",\n            webpage, 'video URL')\n\n        video_id = self._search_regex(\n            r'mediaid\\s*=\\s*(\\d+)',\n            webpage, 'video id', fatal=False)\n\n        title = self._og_search_title(webpage)\n        description = self._og_search_description(webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n        upload_date = unified_strdate(self._search_regex(\n            r'[Rr]elease\\s+date:\\s*(\\d{1,2}/\\d{1,2}/\\d{4})',\n            webpage, 'upload date', fatal=False), False)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'url': video_url,\n            'ext': 'flv',\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'upload_date': upload_date,\n        }\n", "comments": "# rtmp download\n", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import unified_strdate\n\n\nclass ATTTechChannelIE(InfoExtractor):\n    _VALID_URL = r'https?://techchannel\\.att\\.com/play-video\\.cfm/([^/]+/)*(?P<id>.+)'\n    _TEST = {\n        'url': 'http://techchannel.att.com/play-video.cfm/2014/1/27/ATT-Archives-The-UNIX-System-Making-Computers-Easier-to-Use',\n        'info_dict': {\n            'id': '11316',\n            'display_id': 'ATT-Archives-The-UNIX-System-Making-Computers-Easier-to-Use',\n            'ext': 'flv',\n            'title': 'AT&T Archives : The UNIX System: Making Computers Easier to Use',\n            'description': 'A 1982 film about UNIX is the foundation for software in use around Bell Labs and AT&T.',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20140127',\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        video_url = self._search_regex(\n            r\"url\\s*:\\s*'(rtmp://[^']+)'\",\n            webpage, 'video URL')\n\n        video_id = self._search_regex(\n            r'mediaid\\s*=\\s*(\\d+)',\n            webpage, 'video id', fatal=False)\n\n        title = self._og_search_title(webpage)\n        description = self._og_search_description(webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n        upload_date = unified_strdate(self._search_regex(\n            r'[Rr]elease\\s+date:\\s*(\\d{1,2}/\\d{1,2}/\\d{4})',\n            webpage, 'upload date', fatal=False), False)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'url': video_url,\n            'ext': 'flv',\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'upload_date': upload_date,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "atttechchannel.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/atttechchannel.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}