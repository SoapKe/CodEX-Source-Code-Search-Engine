{"author": "donnemartin", "code": "from random import randint\nfrom nose.tools import assert_equal\n\n\nclass TestSortStack(object):\n\n    def get_sorted_stack(self, stack, numbers):\n        for x in numbers:\n            stack.push(x)\n        sorted_stack = stack.sort()\n        return sorted_stack\n\n    def test_sort_stack(self, stack):\n        print('Test: Empty stack')\n        sorted_stack = self.get_sorted_stack(stack, [])\n        assert_equal(sorted_stack.pop(), None)\n\n        print('Test: One element stack')\n        sorted_stack = self.get_sorted_stack(stack, [1])\n        assert_equal(sorted_stack.pop(), 1)\n\n        print('Test: Two or more element stack (general case)')\n        num_items = 10\n        numbers = [randint(0, 10) for x in range(num_items)]\n        sorted_stack = self.get_sorted_stack(stack, numbers)\n        sorted_numbers = []\n        for _ in range(num_items):\n            sorted_numbers.append(sorted_stack.pop())\n        assert_equal(sorted_numbers, sorted(numbers, reverse=True))\n\n        print('Success: test_sort_stack')\n\n\ndef main():\n    test = TestSortStack()\n    test.test_sort_stack(MyStack())\n    test.test_sort_stack(MyStackSimplified())\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from random import randint\nfrom nose.tools import assert_equal\n\n\nclass TestSortStack(object):\n\n    def get_sorted_stack(self, stack, numbers):\n        for x in numbers:\n            stack.push(x)\n        sorted_stack = stack.sort()\n        return sorted_stack\n\n    def test_sort_stack(self, stack):\n        print('Test: Empty stack')\n        sorted_stack = self.get_sorted_stack(stack, [])\n        assert_equal(sorted_stack.pop(), None)\n\n        print('Test: One element stack')\n        sorted_stack = self.get_sorted_stack(stack, [1])\n        assert_equal(sorted_stack.pop(), 1)\n\n        print('Test: Two or more element stack (general case)')\n        num_items = 10\n        numbers = [randint(0, 10) for x in range(num_items)]\n        sorted_stack = self.get_sorted_stack(stack, numbers)\n        sorted_numbers = []\n        for _ in range(num_items):\n            sorted_numbers.append(sorted_stack.pop())\n        assert_equal(sorted_numbers, sorted(numbers, reverse=True))\n\n        print('Success: test_sort_stack')\n\n\ndef main():\n    test = TestSortStack()\n    test.test_sort_stack(MyStack())\n    test.test_sort_stack(MyStackSimplified())\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_sort_stack.py", "id": "8c44ae3bf8950cff79dc1baaaab013d0", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/stacks_queues/sort_stack/test_sort_stack.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}