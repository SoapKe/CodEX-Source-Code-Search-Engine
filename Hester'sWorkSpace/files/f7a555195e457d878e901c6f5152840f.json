{"author": "facebookresearch", "code": "\n\n Copyright (c) 2017-present, Facebook, Inc.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\n\"\"\"Perform inference on a single image or all images with a certain extension\n(e.g., .jpg) in a folder.\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nfrom collections import defaultdict\nimport argparse\nimport cv2   NOQA (Must import before importing caffe2 due to bug in cv2)\nimport glob\nimport logging\nimport os\nimport sys\nimport time\n\nfrom caffe2.python import workspace\n\nfrom core.config import assert_and_infer_cfg\nfrom core.config import cfg\nfrom core.config import merge_cfg_from_file\nfrom utils.timer import Timer\nimport core.test_engine as infer_engine\nimport datasets.dummy_datasets as dummy_datasets\nimport utils.c2 as c2_utils\nimport utils.logging\nimport utils.vis as vis_utils\n\nc2_utils.import_detectron_ops()\n OpenCL may be enabled by default in OpenCV3; disable it because it's not\n thread safe and causes unwanted GPU memory allocations.\ncv2.ocl.setUseOpenCL(False)\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description='End-to-end inference')\n    parser.add_argument(\n        '--cfg',\n        dest='cfg',\n        help='cfg model file (/path/to/model_config.yaml)',\n        default=None,\n        type=str\n    )\n    parser.add_argument(\n        '--wts',\n        dest='weights',\n        help='weights model file (/path/to/model_weights.pkl)',\n        default=None,\n        type=str\n    )\n    parser.add_argument(\n        '--output-dir',\n        dest='output_dir',\n        help='directory for visualization pdfs (default: /tmp/infer_simple)',\n        default='/tmp/infer_simple',\n        type=str\n    )\n    parser.add_argument(\n        '--image-ext',\n        dest='image_ext',\n        help='image file name extension (default: jpg)',\n        default='jpg',\n        type=str\n    )\n    parser.add_argument(\n        'im_or_folder', help='image or folder of images', default=None\n    )\n    if len(sys.argv) == 1:\n        parser.print_help()\n        sys.exit(1)\n    return parser.parse_args()\n\n\ndef main(args):\n    logger = logging.getLogger(__name__)\n    merge_cfg_from_file(args.cfg)\n    cfg.TEST.WEIGHTS = args.weights\n    cfg.NUM_GPUS = 1\n    assert_and_infer_cfg()\n    model = infer_engine.initialize_model_from_cfg()\n    dummy_coco_dataset = dummy_datasets.get_coco_dataset()\n\n    if os.path.isdir(args.im_or_folder):\n        im_list = glob.iglob(args.im_or_folder + '/*.' + args.image_ext)\n    else:\n        im_list = [args.im_or_folder]\n\n    for i, im_name in enumerate(im_list):\n        out_name = os.path.join(\n            args.output_dir, '{}'.format(os.path.basename(im_name) + '.pdf')\n        )\n        logger.info('Processing {} -> {}'.format(im_name, out_name))\n        im = cv2.imread(im_name)\n        timers = defaultdict(Timer)\n        t = time.time()\n        with c2_utils.NamedCudaScope(0):\n            cls_boxes, cls_segms, cls_keyps = infer_engine.im_detect_all(\n                model, im, None, timers=timers\n            )\n        logger.info('Inference time: {:.3f}s'.format(time.time() - t))\n        for k, v in timers.items():\n            logger.info(' | {}: {:.3f}s'.format(k, v.average_time))\n        if i == 0:\n            logger.info(\n                ' \\ Note: inference on the first image will be slower than the '\n                'rest (caches and auto-tuning need to warm up)'\n            )\n\n        vis_utils.vis_one_image(\n            im[:, :, ::-1],   BGR -> RGB for visualization\n            im_name,\n            args.output_dir,\n            cls_boxes,\n            cls_segms,\n            cls_keyps,\n            dataset=dummy_coco_dataset,\n            box_alpha=0.3,\n            show_class=True,\n            thresh=0.7,\n            kp_thresh=2\n        )\n\n\nif __name__ == '__main__':\n    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0'])\n    utils.logging.setup_logging(__name__)\n    args = parse_args()\n    main(args)\n", "comments": "   perform inference single image images certain extension (e g    jpg) folder          usr bin env python2    copyright (c) 2017 present  facebook  inc        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                     noqa (must import importing caffe2 due bug cv2)    opencl may enabled default opencv3  disable    thread safe causes unwanted gpu memory allocations     bgr    rgb visualization ", "content": "#!/usr/bin/env python2\n\n# Copyright (c) 2017-present, Facebook, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n##############################################################################\n\n\"\"\"Perform inference on a single image or all images with a certain extension\n(e.g., .jpg) in a folder.\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nfrom collections import defaultdict\nimport argparse\nimport cv2  # NOQA (Must import before importing caffe2 due to bug in cv2)\nimport glob\nimport logging\nimport os\nimport sys\nimport time\n\nfrom caffe2.python import workspace\n\nfrom core.config import assert_and_infer_cfg\nfrom core.config import cfg\nfrom core.config import merge_cfg_from_file\nfrom utils.timer import Timer\nimport core.test_engine as infer_engine\nimport datasets.dummy_datasets as dummy_datasets\nimport utils.c2 as c2_utils\nimport utils.logging\nimport utils.vis as vis_utils\n\nc2_utils.import_detectron_ops()\n# OpenCL may be enabled by default in OpenCV3; disable it because it's not\n# thread safe and causes unwanted GPU memory allocations.\ncv2.ocl.setUseOpenCL(False)\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description='End-to-end inference')\n    parser.add_argument(\n        '--cfg',\n        dest='cfg',\n        help='cfg model file (/path/to/model_config.yaml)',\n        default=None,\n        type=str\n    )\n    parser.add_argument(\n        '--wts',\n        dest='weights',\n        help='weights model file (/path/to/model_weights.pkl)',\n        default=None,\n        type=str\n    )\n    parser.add_argument(\n        '--output-dir',\n        dest='output_dir',\n        help='directory for visualization pdfs (default: /tmp/infer_simple)',\n        default='/tmp/infer_simple',\n        type=str\n    )\n    parser.add_argument(\n        '--image-ext',\n        dest='image_ext',\n        help='image file name extension (default: jpg)',\n        default='jpg',\n        type=str\n    )\n    parser.add_argument(\n        'im_or_folder', help='image or folder of images', default=None\n    )\n    if len(sys.argv) == 1:\n        parser.print_help()\n        sys.exit(1)\n    return parser.parse_args()\n\n\ndef main(args):\n    logger = logging.getLogger(__name__)\n    merge_cfg_from_file(args.cfg)\n    cfg.TEST.WEIGHTS = args.weights\n    cfg.NUM_GPUS = 1\n    assert_and_infer_cfg()\n    model = infer_engine.initialize_model_from_cfg()\n    dummy_coco_dataset = dummy_datasets.get_coco_dataset()\n\n    if os.path.isdir(args.im_or_folder):\n        im_list = glob.iglob(args.im_or_folder + '/*.' + args.image_ext)\n    else:\n        im_list = [args.im_or_folder]\n\n    for i, im_name in enumerate(im_list):\n        out_name = os.path.join(\n            args.output_dir, '{}'.format(os.path.basename(im_name) + '.pdf')\n        )\n        logger.info('Processing {} -> {}'.format(im_name, out_name))\n        im = cv2.imread(im_name)\n        timers = defaultdict(Timer)\n        t = time.time()\n        with c2_utils.NamedCudaScope(0):\n            cls_boxes, cls_segms, cls_keyps = infer_engine.im_detect_all(\n                model, im, None, timers=timers\n            )\n        logger.info('Inference time: {:.3f}s'.format(time.time() - t))\n        for k, v in timers.items():\n            logger.info(' | {}: {:.3f}s'.format(k, v.average_time))\n        if i == 0:\n            logger.info(\n                ' \\ Note: inference on the first image will be slower than the '\n                'rest (caches and auto-tuning need to warm up)'\n            )\n\n        vis_utils.vis_one_image(\n            im[:, :, ::-1],  # BGR -> RGB for visualization\n            im_name,\n            args.output_dir,\n            cls_boxes,\n            cls_segms,\n            cls_keyps,\n            dataset=dummy_coco_dataset,\n            box_alpha=0.3,\n            show_class=True,\n            thresh=0.7,\n            kp_thresh=2\n        )\n\n\nif __name__ == '__main__':\n    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0'])\n    utils.logging.setup_logging(__name__)\n    args = parse_args()\n    main(args)\n", "description": "FAIR's research platform for object detection research, implementing popular algorithms like Mask R-CNN and RetinaNet.", "file_name": "infer_simple.py", "id": "f7a555195e457d878e901c6f5152840f", "language": "Python", "project_name": "Detectron", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/facebookresearch-Detectron/facebookresearch-Detectron-958b0ad/tools/infer_simple.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:01:25Z", "url": "https://github.com/facebookresearch/Detectron", "wiki": false}