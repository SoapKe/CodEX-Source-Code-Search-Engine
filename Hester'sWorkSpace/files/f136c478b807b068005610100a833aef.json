{"author": "XX-net", "code": "\n\n\n\nimport os\nimport time\nimport urlparse\n\nimport simple_http_server\nfrom front import front\n\n\ncurrent_path = os.path.dirname(os.path.abspath(__file__))\nroot_path = os.path.abspath(os.path.join(current_path, os.pardir, os.pardir))\ntop_path = os.path.abspath(os.path.join(root_path, os.pardir, os.pardir, os.pardir))\nweb_ui_path = os.path.join(current_path, os.path.pardir, \"web_ui\")\n\n\nclass ControlHandler(simple_http_server.HttpServerHandler):\n    def __init__(self, client_address, headers, command, path, rfile, wfile):\n        self.client_address = client_address\n        self.headers = headers\n        self.command = command\n        self.path = path\n        self.rfile = rfile\n        self.wfile = wfile\n\n    def do_GET(self):\n        path = urlparse.urlparse(self.path).path\n        if path == \"/log\":\n            return self.req_log_handler()\n        elif path == \"/ip_list\":\n            return self.req_ip_list_handler()\n        elif path == \"/debug\":\n            return self.req_debug_handler()\n        else:\n            front.logger.warn('Control Req %s %s %s ', self.address_string(), self.command, self.path)\n\n        self.wfile.write(b'HTTP/1.1 404\\r\\nContent-Type: text/plain\\r\\nConnection: close\\r\\n\\r\\n404 Not Found')\n        front.logger.info('%s \"%s %s HTTP/1.1\" 404 -', self.address_string(), self.command, self.path)\n\n    def req_log_handler(self):\n        req = urlparse.urlparse(self.path).query\n        reqs = urlparse.parse_qs(req, keep_blank_values=True)\n        data = ''\n\n        cmd = \"get_last\"\n        if reqs[\"cmd\"]:\n            cmd = reqs[\"cmd\"][0]\n\n        if cmd == \"get_last\":\n            max_line = int(reqs[\"max_line\"][0])\n            data = front.logger.get_last_lines(max_line)\n        elif cmd == \"get_new\":\n            last_no = int(reqs[\"last_no\"][0])\n            data = front.logger.get_new_lines(last_no)\n        else:\n            front.logger.error('PAC %s %s %s ', self.address_string(), self.command, self.path)\n\n        mimetype = 'text/plain'\n        self.send_response_nc(mimetype, data)\n\n    def req_ip_list_handler(self):\n        time_now = time.time()\n        data = \"<html><body><div  style='float: left; white-space:nowrap;font-family: monospace;'>\"\n        data += \"time:%d  pointer:%d<br>\\r\\n\" % (time_now, front.ip_manager.gws_ip_pointer)\n        data += \"<table><tr><th>N</th><th>IP</th><th>HS</th><th>Fails</th>\"\n        data += \"<th>down_fail</th><th>links</th>\"\n        data += \"<th>get_time</th><th>success_time</th><th>fail_time</th><th>down_fail_time</th>\"\n        data += \"<th>data_active</th><th>transfered_data</th><th>Trans</th>\"\n        data += \"<th>history</th></tr>\\n\"\n        i = 1\n        for ip in front.ip_manager.gws_ip_list:\n            handshake_time = front.ip_manager.ip_dict[ip][\"handshake_time\"]\n\n            fail_times = front.ip_manager.ip_dict[ip][\"fail_times\"]\n            down_fail = front.ip_manager.ip_dict[ip][\"down_fail\"]\n            links = front.ip_manager.ip_dict[ip][\"links\"]\n\n            get_time = front.ip_manager.ip_dict[ip][\"get_time\"]\n            if get_time:\n                get_time = time_now - get_time\n\n            success_time = front.ip_manager.ip_dict[ip][\"success_time\"]\n            if success_time:\n                success_time = time_now - success_time\n\n            fail_time = front.ip_manager.ip_dict[ip][\"fail_time\"]\n            if fail_time:\n                fail_time = time_now - fail_time\n\n            down_fail_time = front.ip_manager.ip_dict[ip][\"down_fail_time\"]\n            if down_fail_time:\n                down_fail_time = time_now - down_fail_time\n\n            data_active = front.ip_manager.ip_dict[ip][\"data_active\"]\n            if data_active:\n                active_time = time_now - data_active\n            else:\n                active_time = 0\n\n            history = front.ip_manager.ip_dict[ip][\"history\"]\n            t0 = 0\n            str_out = ''\n            for item in history:\n                t = item[0]\n                v = item[1]\n                if t0 == 0:\n                    t0 = t\n                time_per = int((t - t0) * 1000)\n                t0 = t\n                str_out += \"%d(%s) \" % (time_per, v)\n            data += \"<tr><td>%d</td><td>%s</td><td>%d</td><td>%d</td><td>%d</td><td>%d</td><td>%d</td><td>%d</td><td>%d</td>\" \\\n                    \"<td>%d</td><td>%d</td><td>%s</td></tr>\\n\" % \\\n                    (i, ip, handshake_time, fail_times, down_fail, links, get_time, success_time, fail_time, down_fail_time, \\\n                    active_time, str_out)\n            i += 1\n\n        data += \"</table></div></body></html>\"\n        mimetype = 'text/html'\n        self.send_response_nc(mimetype, data)\n\n    def req_debug_handler(self):\n        data = \"\"\n        for obj in [front.connect_manager, front.http_dispatcher]:\n            data += \"%s\\r\\n\" % obj.__class__\n            for attr in dir(obj):\n                if attr.startswith(\"__\"):\n                    continue\n                sub_obj = getattr(obj, attr)\n                if callable(sub_obj):\n                    continue\n                data += \"    %s = %s\\r\\n\" % (attr, sub_obj)\n            if hasattr(obj, \"to_string\"):\n                data += obj.to_string()\n\n        mimetype = 'text/plain'\n        self.send_response_nc(mimetype, data)", "comments": "   usr bin env python    coding utf 8 ", "content": "#!/usr/bin/env python\n# coding:utf-8\n\n\nimport os\nimport time\nimport urlparse\n\nimport simple_http_server\nfrom front import front\n\n\ncurrent_path = os.path.dirname(os.path.abspath(__file__))\nroot_path = os.path.abspath(os.path.join(current_path, os.pardir, os.pardir))\ntop_path = os.path.abspath(os.path.join(root_path, os.pardir, os.pardir, os.pardir))\nweb_ui_path = os.path.join(current_path, os.path.pardir, \"web_ui\")\n\n\nclass ControlHandler(simple_http_server.HttpServerHandler):\n    def __init__(self, client_address, headers, command, path, rfile, wfile):\n        self.client_address = client_address\n        self.headers = headers\n        self.command = command\n        self.path = path\n        self.rfile = rfile\n        self.wfile = wfile\n\n    def do_GET(self):\n        path = urlparse.urlparse(self.path).path\n        if path == \"/log\":\n            return self.req_log_handler()\n        elif path == \"/ip_list\":\n            return self.req_ip_list_handler()\n        elif path == \"/debug\":\n            return self.req_debug_handler()\n        else:\n            front.logger.warn('Control Req %s %s %s ', self.address_string(), self.command, self.path)\n\n        self.wfile.write(b'HTTP/1.1 404\\r\\nContent-Type: text/plain\\r\\nConnection: close\\r\\n\\r\\n404 Not Found')\n        front.logger.info('%s \"%s %s HTTP/1.1\" 404 -', self.address_string(), self.command, self.path)\n\n    def req_log_handler(self):\n        req = urlparse.urlparse(self.path).query\n        reqs = urlparse.parse_qs(req, keep_blank_values=True)\n        data = ''\n\n        cmd = \"get_last\"\n        if reqs[\"cmd\"]:\n            cmd = reqs[\"cmd\"][0]\n\n        if cmd == \"get_last\":\n            max_line = int(reqs[\"max_line\"][0])\n            data = front.logger.get_last_lines(max_line)\n        elif cmd == \"get_new\":\n            last_no = int(reqs[\"last_no\"][0])\n            data = front.logger.get_new_lines(last_no)\n        else:\n            front.logger.error('PAC %s %s %s ', self.address_string(), self.command, self.path)\n\n        mimetype = 'text/plain'\n        self.send_response_nc(mimetype, data)\n\n    def req_ip_list_handler(self):\n        time_now = time.time()\n        data = \"<html><body><div  style='float: left; white-space:nowrap;font-family: monospace;'>\"\n        data += \"time:%d  pointer:%d<br>\\r\\n\" % (time_now, front.ip_manager.gws_ip_pointer)\n        data += \"<table><tr><th>N</th><th>IP</th><th>HS</th><th>Fails</th>\"\n        data += \"<th>down_fail</th><th>links</th>\"\n        data += \"<th>get_time</th><th>success_time</th><th>fail_time</th><th>down_fail_time</th>\"\n        data += \"<th>data_active</th><th>transfered_data</th><th>Trans</th>\"\n        data += \"<th>history</th></tr>\\n\"\n        i = 1\n        for ip in front.ip_manager.gws_ip_list:\n            handshake_time = front.ip_manager.ip_dict[ip][\"handshake_time\"]\n\n            fail_times = front.ip_manager.ip_dict[ip][\"fail_times\"]\n            down_fail = front.ip_manager.ip_dict[ip][\"down_fail\"]\n            links = front.ip_manager.ip_dict[ip][\"links\"]\n\n            get_time = front.ip_manager.ip_dict[ip][\"get_time\"]\n            if get_time:\n                get_time = time_now - get_time\n\n            success_time = front.ip_manager.ip_dict[ip][\"success_time\"]\n            if success_time:\n                success_time = time_now - success_time\n\n            fail_time = front.ip_manager.ip_dict[ip][\"fail_time\"]\n            if fail_time:\n                fail_time = time_now - fail_time\n\n            down_fail_time = front.ip_manager.ip_dict[ip][\"down_fail_time\"]\n            if down_fail_time:\n                down_fail_time = time_now - down_fail_time\n\n            data_active = front.ip_manager.ip_dict[ip][\"data_active\"]\n            if data_active:\n                active_time = time_now - data_active\n            else:\n                active_time = 0\n\n            history = front.ip_manager.ip_dict[ip][\"history\"]\n            t0 = 0\n            str_out = ''\n            for item in history:\n                t = item[0]\n                v = item[1]\n                if t0 == 0:\n                    t0 = t\n                time_per = int((t - t0) * 1000)\n                t0 = t\n                str_out += \"%d(%s) \" % (time_per, v)\n            data += \"<tr><td>%d</td><td>%s</td><td>%d</td><td>%d</td><td>%d</td><td>%d</td><td>%d</td><td>%d</td><td>%d</td>\" \\\n                    \"<td>%d</td><td>%d</td><td>%s</td></tr>\\n\" % \\\n                    (i, ip, handshake_time, fail_times, down_fail, links, get_time, success_time, fail_time, down_fail_time, \\\n                    active_time, str_out)\n            i += 1\n\n        data += \"</table></div></body></html>\"\n        mimetype = 'text/html'\n        self.send_response_nc(mimetype, data)\n\n    def req_debug_handler(self):\n        data = \"\"\n        for obj in [front.connect_manager, front.http_dispatcher]:\n            data += \"%s\\r\\n\" % obj.__class__\n            for attr in dir(obj):\n                if attr.startswith(\"__\"):\n                    continue\n                sub_obj = getattr(obj, attr)\n                if callable(sub_obj):\n                    continue\n                data += \"    %s = %s\\r\\n\" % (attr, sub_obj)\n            if hasattr(obj, \"to_string\"):\n                data += obj.to_string()\n\n        mimetype = 'text/plain'\n        self.send_response_nc(mimetype, data)", "description": "a web proxy tool", "file_name": "web_control.py", "id": "f136c478b807b068005610100a833aef", "language": "Python", "project_name": "XX-Net", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/XX-net-XX-Net/XX-net-XX-Net-673a005/code/default/x_tunnel/local/tls_relay_front/web_control.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:03Z", "url": "https://github.com/XX-net/XX-Net", "wiki": true}