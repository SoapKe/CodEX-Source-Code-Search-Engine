{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import fields, models, _\n\n\nclass AccountInvoice(models.Model):\n    _inherit = 'account.invoice'\n\n    payment_tx_ids = fields.One2many('payment.transaction', 'account_invoice_id', string='Transactions')\n    payment_tx_id = fields.Many2one('payment.transaction', string='Last Transaction', copy=False)\n    payment_acquirer_id = fields.Many2one(\n        'payment.acquirer', string='Payment Acquirer',\n        related='payment_tx_id.acquirer_id', store=True)\n    payment_tx_count = fields.Integer(string=\"Number of payment transactions\", compute='_compute_payment_tx_count')\n\n    def _compute_payment_tx_count(self):\n        tx_data = self.env['payment.transaction'].read_group(\n            [('account_invoice_id', 'in', self.ids)],\n            ['account_invoice_id'], ['account_invoice_id']\n        )\n        mapped_data = dict([(m['account_invoice_id'][0], m['account_invoice_id_count']) for m in tx_data])\n        for invoice in self:\n            invoice.payment_tx_count = mapped_data.get(invoice.id, 0)\n\n    def action_view_transactions(self):\n        action = {\n            'name': _('Payment Transactions'),\n            'type': 'ir.actions.act_window',\n            'res_model': 'payment.transaction',\n            'target': 'current',\n        }\n        tx = self.env['payment.transaction'].search([('account_invoice_id', 'in', self.ids)])\n        if len(tx) == 1:\n            action['res_id'] = tx.ids[0]\n            action['view_mode'] = 'form'\n        else:\n            action['view_mode'] = 'tree,form'\n            action['domain'] = [('account_invoice_id', 'in', self.ids)]\n        return action\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import fields, models, _\n\n\nclass AccountInvoice(models.Model):\n    _inherit = 'account.invoice'\n\n    payment_tx_ids = fields.One2many('payment.transaction', 'account_invoice_id', string='Transactions')\n    payment_tx_id = fields.Many2one('payment.transaction', string='Last Transaction', copy=False)\n    payment_acquirer_id = fields.Many2one(\n        'payment.acquirer', string='Payment Acquirer',\n        related='payment_tx_id.acquirer_id', store=True)\n    payment_tx_count = fields.Integer(string=\"Number of payment transactions\", compute='_compute_payment_tx_count')\n\n    def _compute_payment_tx_count(self):\n        tx_data = self.env['payment.transaction'].read_group(\n            [('account_invoice_id', 'in', self.ids)],\n            ['account_invoice_id'], ['account_invoice_id']\n        )\n        mapped_data = dict([(m['account_invoice_id'][0], m['account_invoice_id_count']) for m in tx_data])\n        for invoice in self:\n            invoice.payment_tx_count = mapped_data.get(invoice.id, 0)\n\n    def action_view_transactions(self):\n        action = {\n            'name': _('Payment Transactions'),\n            'type': 'ir.actions.act_window',\n            'res_model': 'payment.transaction',\n            'target': 'current',\n        }\n        tx = self.env['payment.transaction'].search([('account_invoice_id', 'in', self.ids)])\n        if len(tx) == 1:\n            action['res_id'] = tx.ids[0]\n            action['view_mode'] = 'form'\n        else:\n            action['view_mode'] = 'tree,form'\n            action['domain'] = [('account_invoice_id', 'in', self.ids)]\n        return action\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "account_invoice.py", "id": "ba37a189ecbe5d66bff8f45c5c6ccd0b", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account_payment/models/account_invoice.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}