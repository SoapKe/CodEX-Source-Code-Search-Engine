{"author": "nvbn", "code": "from thefuck.specific.npm import npm_available\nfrom thefuck.utils import replace_argument, for_app, eager, get_closest\nfrom thefuck.specific.sudo import sudo_support\n\nenabled_by_default = npm_available\n\n\ndef _get_wrong_command(script_parts):\n    commands = [part for part in script_parts[1:] if not part.startswith('-')]\n    if commands:\n        return commands[0]\n\n\n@sudo_support\n@for_app('npm')\ndef match(command):\n    return (command.script_parts[0] == 'npm' and\n            'where <command> is one of:' in command.output and\n            _get_wrong_command(command.script_parts))\n\n\n@eager\ndef _get_available_commands(stdout):\n    commands_listing = False\n    for line in stdout.split('\\n'):\n        if line.startswith('where <command> is one of:'):\n            commands_listing = True\n        elif commands_listing:\n            if not line:\n                break\n\n            for command in line.split(', '):\n                stripped = command.strip()\n                if stripped:\n                    yield stripped\n\n\ndef get_new_command(command):\n    npm_commands = _get_available_commands(command.output)\n    wrong_command = _get_wrong_command(command.script_parts)\n    fixed = get_closest(wrong_command, npm_commands)\n    return replace_argument(command.script, wrong_command, fixed)\n", "comments": "", "content": "from thefuck.specific.npm import npm_available\nfrom thefuck.utils import replace_argument, for_app, eager, get_closest\nfrom thefuck.specific.sudo import sudo_support\n\nenabled_by_default = npm_available\n\n\ndef _get_wrong_command(script_parts):\n    commands = [part for part in script_parts[1:] if not part.startswith('-')]\n    if commands:\n        return commands[0]\n\n\n@sudo_support\n@for_app('npm')\ndef match(command):\n    return (command.script_parts[0] == 'npm' and\n            'where <command> is one of:' in command.output and\n            _get_wrong_command(command.script_parts))\n\n\n@eager\ndef _get_available_commands(stdout):\n    commands_listing = False\n    for line in stdout.split('\\n'):\n        if line.startswith('where <command> is one of:'):\n            commands_listing = True\n        elif commands_listing:\n            if not line:\n                break\n\n            for command in line.split(', '):\n                stripped = command.strip()\n                if stripped:\n                    yield stripped\n\n\ndef get_new_command(command):\n    npm_commands = _get_available_commands(command.output)\n    wrong_command = _get_wrong_command(command.script_parts)\n    fixed = get_closest(wrong_command, npm_commands)\n    return replace_argument(command.script, wrong_command, fixed)\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "npm_wrong_command.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/rules/npm_wrong_command.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}