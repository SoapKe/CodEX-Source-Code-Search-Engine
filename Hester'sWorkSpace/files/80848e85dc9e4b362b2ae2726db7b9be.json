{"author": "django", "code": "from django.conf import settings\nfrom django.contrib.redirects.middleware import RedirectFallbackMiddleware\nfrom django.contrib.redirects.models import Redirect\nfrom django.contrib.sites.models import Site\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.http import HttpResponseForbidden, HttpResponseRedirect\nfrom django.test import TestCase, modify_settings, override_settings\n\n\n@modify_settings(MIDDLEWARE={'append': 'django.contrib.redirects.middleware.RedirectFallbackMiddleware'})\n@override_settings(APPEND_SLASH=False, ROOT_URLCONF='redirects_tests.urls', SITE_ID=1)\nclass RedirectTests(TestCase):\n\n    def setUp(self):\n        self.site = Site.objects.get(pk=settings.SITE_ID)\n\n    def test_model(self):\n        r1 = Redirect.objects.create(site=self.site, old_path='/initial', new_path='/new_target')\n        self.assertEqual(str(r1), \"/initial ---> /new_target\")\n\n    def test_redirect(self):\n        Redirect.objects.create(site=self.site, old_path='/initial', new_path='/new_target')\n        response = self.client.get('/initial')\n        self.assertRedirects(response, '/new_target', status_code=301, target_status_code=404)\n\n    @override_settings(APPEND_SLASH=True)\n    def test_redirect_with_append_slash(self):\n        Redirect.objects.create(site=self.site, old_path='/initial/', new_path='/new_target/')\n        response = self.client.get('/initial')\n        self.assertRedirects(response, '/new_target/', status_code=301, target_status_code=404)\n\n    @override_settings(APPEND_SLASH=True)\n    def test_redirect_with_append_slash_and_query_string(self):\n        Redirect.objects.create(site=self.site, old_path='/initial/?foo', new_path='/new_target/')\n        response = self.client.get('/initial?foo')\n        self.assertRedirects(response, '/new_target/', status_code=301, target_status_code=404)\n\n    @override_settings(APPEND_SLASH=True)\n    def test_redirect_not_found_with_append_slash(self):\n        \"\"\"\n        Exercise the second Redirect.DoesNotExist branch in\n        RedirectFallbackMiddleware.\n        \"\"\"\n        response = self.client.get('/test')\n        self.assertEqual(response.status_code, 404)\n\n    def test_redirect_shortcircuits_non_404_response(self):\n        \"\"\"RedirectFallbackMiddleware short-circuits on non-404 requests.\"\"\"\n        response = self.client.get('/')\n        self.assertEqual(response.status_code, 200)\n\n    def test_response_gone(self):\n        \"\"\"When the redirect target is '', return a 410\"\"\"\n        Redirect.objects.create(site=self.site, old_path='/initial', new_path='')\n        response = self.client.get('/initial')\n        self.assertEqual(response.status_code, 410)\n\n    @modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'})\n    def test_sites_not_installed(self):\n        msg = (\n            'You cannot use RedirectFallbackMiddleware when '\n            'django.contrib.sites is not installed.'\n        )\n        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n            RedirectFallbackMiddleware()\n\n\nclass OverriddenRedirectFallbackMiddleware(RedirectFallbackMiddleware):\n    \n    response_gone_class = HttpResponseForbidden\n    response_redirect_class = HttpResponseRedirect\n\n\n@modify_settings(MIDDLEWARE={'append': 'redirects_tests.tests.OverriddenRedirectFallbackMiddleware'})\n@override_settings(SITE_ID=1)\nclass OverriddenRedirectMiddlewareTests(TestCase):\n\n    def setUp(self):\n        self.site = Site.objects.get(pk=settings.SITE_ID)\n\n    def test_response_gone_class(self):\n        Redirect.objects.create(site=self.site, old_path='/initial/', new_path='')\n        response = self.client.get('/initial/')\n        self.assertEqual(response.status_code, 403)\n\n    def test_response_redirect_class(self):\n        Redirect.objects.create(site=self.site, old_path='/initial/', new_path='/new_target/')\n        response = self.client.get('/initial/')\n        self.assertEqual(response.status_code, 302)\n", "comments": "            exercise second redirect doesnotexist branch         redirectfallbackmiddleware                      response   self client get(  test )         self assertequal(response status code  404)      def test redirect shortcircuits non 404 response(self)             redirectfallbackmiddleware short circuits non 404 requests             response   self client get(   )         self assertequal(response status code  200)      def test response gone(self)             when redirect target     return 410       use http responses different defaults ", "content": "from django.conf import settings\nfrom django.contrib.redirects.middleware import RedirectFallbackMiddleware\nfrom django.contrib.redirects.models import Redirect\nfrom django.contrib.sites.models import Site\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.http import HttpResponseForbidden, HttpResponseRedirect\nfrom django.test import TestCase, modify_settings, override_settings\n\n\n@modify_settings(MIDDLEWARE={'append': 'django.contrib.redirects.middleware.RedirectFallbackMiddleware'})\n@override_settings(APPEND_SLASH=False, ROOT_URLCONF='redirects_tests.urls', SITE_ID=1)\nclass RedirectTests(TestCase):\n\n    def setUp(self):\n        self.site = Site.objects.get(pk=settings.SITE_ID)\n\n    def test_model(self):\n        r1 = Redirect.objects.create(site=self.site, old_path='/initial', new_path='/new_target')\n        self.assertEqual(str(r1), \"/initial ---> /new_target\")\n\n    def test_redirect(self):\n        Redirect.objects.create(site=self.site, old_path='/initial', new_path='/new_target')\n        response = self.client.get('/initial')\n        self.assertRedirects(response, '/new_target', status_code=301, target_status_code=404)\n\n    @override_settings(APPEND_SLASH=True)\n    def test_redirect_with_append_slash(self):\n        Redirect.objects.create(site=self.site, old_path='/initial/', new_path='/new_target/')\n        response = self.client.get('/initial')\n        self.assertRedirects(response, '/new_target/', status_code=301, target_status_code=404)\n\n    @override_settings(APPEND_SLASH=True)\n    def test_redirect_with_append_slash_and_query_string(self):\n        Redirect.objects.create(site=self.site, old_path='/initial/?foo', new_path='/new_target/')\n        response = self.client.get('/initial?foo')\n        self.assertRedirects(response, '/new_target/', status_code=301, target_status_code=404)\n\n    @override_settings(APPEND_SLASH=True)\n    def test_redirect_not_found_with_append_slash(self):\n        \"\"\"\n        Exercise the second Redirect.DoesNotExist branch in\n        RedirectFallbackMiddleware.\n        \"\"\"\n        response = self.client.get('/test')\n        self.assertEqual(response.status_code, 404)\n\n    def test_redirect_shortcircuits_non_404_response(self):\n        \"\"\"RedirectFallbackMiddleware short-circuits on non-404 requests.\"\"\"\n        response = self.client.get('/')\n        self.assertEqual(response.status_code, 200)\n\n    def test_response_gone(self):\n        \"\"\"When the redirect target is '', return a 410\"\"\"\n        Redirect.objects.create(site=self.site, old_path='/initial', new_path='')\n        response = self.client.get('/initial')\n        self.assertEqual(response.status_code, 410)\n\n    @modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'})\n    def test_sites_not_installed(self):\n        msg = (\n            'You cannot use RedirectFallbackMiddleware when '\n            'django.contrib.sites is not installed.'\n        )\n        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n            RedirectFallbackMiddleware()\n\n\nclass OverriddenRedirectFallbackMiddleware(RedirectFallbackMiddleware):\n    # Use HTTP responses different from the defaults\n    response_gone_class = HttpResponseForbidden\n    response_redirect_class = HttpResponseRedirect\n\n\n@modify_settings(MIDDLEWARE={'append': 'redirects_tests.tests.OverriddenRedirectFallbackMiddleware'})\n@override_settings(SITE_ID=1)\nclass OverriddenRedirectMiddlewareTests(TestCase):\n\n    def setUp(self):\n        self.site = Site.objects.get(pk=settings.SITE_ID)\n\n    def test_response_gone_class(self):\n        Redirect.objects.create(site=self.site, old_path='/initial/', new_path='')\n        response = self.client.get('/initial/')\n        self.assertEqual(response.status_code, 403)\n\n    def test_response_redirect_class(self):\n        Redirect.objects.create(site=self.site, old_path='/initial/', new_path='/new_target/')\n        response = self.client.get('/initial/')\n        self.assertEqual(response.status_code, 302)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "80848e85dc9e4b362b2ae2726db7b9be", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/redirects_tests/tests.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}