{"author": "ajenti", "code": "# -*- coding: utf-8 -*-\nimport sys\nimport os\nimport datetime\n\nsys.path.insert(0, os.path.abspath('../..'))\n\nextensions = ['sphinx.ext.autodoc', 'sphinx.ext.ifconfig', 'sphinx.ext.viewcode']  \n\ntemplates_path = ['_templates']\n\nsource_suffix = '.rst'\n\nmaster_doc = 'index'\n\nproject = u'Ajenti'\ncopyright = u'%i, Eugene Pankov' % datetime.datetime.now().year\n\nimport ajenti\nversion = ajenti.__version__\nrelease = ajenti.__version__\n\nexclude_patterns = []\nadd_function_parentheses = True\n\npygments_style = 'sphinx'\n\n\n\nimport os\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\n\nif not on_rtd:  \n    import sphinx_rtd_theme\n    html_theme = 'sphinx_rtd_theme'\n    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n\nhtml_static_path = ['_static']\nhtmlhelp_basename = 'Ajentidoc'\n\n\nhtml_context = {\n    \"disqus_shortname\": 'ajenti',\n    \"github_base_account\": 'ajenti',\n    \"github_project\": 'ajenti',\n}\n\n\nimport gettext\ntranslation = gettext.NullTranslations()\ntranslation.install(unicode=True)\n\n\nintersphinx_mapping = {'http://docs.python.org/': None}\n\n\ndef skip(app, what, name, obj, skip, options):\n    if hasattr(obj, '_plugin'):\n        for x in ['get', 'new', 'classname']:\n            if hasattr(obj, x):\n                try:\n                    delattr(obj, x)\n                except:\n                    pass\n    if hasattr(obj, '_interface'):\n        for x in ['get', 'get_all', 'get_instances', 'get_class', 'get_classes']:\n            if hasattr(obj, x):\n                try:\n                    delattr(obj, x)\n                except:\n                    pass\n    return skip\n\n\ndef setup(app):\n    app.connect(\"autodoc-skip-member\", skip)\n\n\n\n\nUSE_PIP_INSTALL = True\n\nclass Mock(object):\n    __all__ = []\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __call__(self, *args, **kwargs):\n        return Mock()\n\n    @classmethod\n    def __getattr__(cls, name):\n        if name in ('__file__', '__path__'):\n            return '/dev/null'\n        elif name[0] == name[0].upper():\n            mockType = type(name, (), {})\n            mockType.__module__ = __name__\n            return mockType\n        else:\n            return Mock()\n\nMOCK_MODULES = ['python-ldap', 'gevent', 'gevent.pywsgi', 'gevent.queue', 'gevent-socketio', 'lxml', 'lxml.etree', 'pyOpenSSL', 'Pillow', 'psutil']\nfor mod_name in MOCK_MODULES:\n    sys.modules[mod_name] = Mock()\n", "comments": "      coding  utf 8         sphinx ext intersphinx      readthedocs    import set theme building docs locally    gettext ", "content": "# -*- coding: utf-8 -*-\nimport sys\nimport os\nimport datetime\n\nsys.path.insert(0, os.path.abspath('../..'))\n\nextensions = ['sphinx.ext.autodoc', 'sphinx.ext.ifconfig', 'sphinx.ext.viewcode']  # 'sphinx.ext.intersphinx']\n\ntemplates_path = ['_templates']\n\nsource_suffix = '.rst'\n\nmaster_doc = 'index'\n\nproject = u'Ajenti'\ncopyright = u'%i, Eugene Pankov' % datetime.datetime.now().year\n\nimport ajenti\nversion = ajenti.__version__\nrelease = ajenti.__version__\n\nexclude_patterns = []\nadd_function_parentheses = True\n\npygments_style = 'sphinx'\n\n\n# ReadTheDocs\nimport os\non_rtd = os.environ.get('READTHEDOCS', None) == 'True'\n\nif not on_rtd:  # only import and set the theme if we're building docs locally\n    import sphinx_rtd_theme\n    html_theme = 'sphinx_rtd_theme'\n    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n\nhtml_static_path = ['_static']\nhtmlhelp_basename = 'Ajentidoc'\n\n\nhtml_context = {\n    \"disqus_shortname\": 'ajenti',\n    \"github_base_account\": 'ajenti',\n    \"github_project\": 'ajenti',\n}\n\n# Gettext\nimport gettext\ntranslation = gettext.NullTranslations()\ntranslation.install(unicode=True)\n\n\nintersphinx_mapping = {'http://docs.python.org/': None}\n\n\ndef skip(app, what, name, obj, skip, options):\n    if hasattr(obj, '_plugin'):\n        for x in ['get', 'new', 'classname']:\n            if hasattr(obj, x):\n                try:\n                    delattr(obj, x)\n                except:\n                    pass\n    if hasattr(obj, '_interface'):\n        for x in ['get', 'get_all', 'get_instances', 'get_class', 'get_classes']:\n            if hasattr(obj, x):\n                try:\n                    delattr(obj, x)\n                except:\n                    pass\n    return skip\n\n\ndef setup(app):\n    app.connect(\"autodoc-skip-member\", skip)\n\n\n\n\nUSE_PIP_INSTALL = True\n\nclass Mock(object):\n    __all__ = []\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __call__(self, *args, **kwargs):\n        return Mock()\n\n    @classmethod\n    def __getattr__(cls, name):\n        if name in ('__file__', '__path__'):\n            return '/dev/null'\n        elif name[0] == name[0].upper():\n            mockType = type(name, (), {})\n            mockType.__module__ = __name__\n            return mockType\n        else:\n            return Mock()\n\nMOCK_MODULES = ['python-ldap', 'gevent', 'gevent.pywsgi', 'gevent.queue', 'gevent-socketio', 'lxml', 'lxml.etree', 'pyOpenSSL', 'Pillow', 'psutil']\nfor mod_name in MOCK_MODULES:\n    sys.modules[mod_name] = Mock()\n", "description": "Ajenti Core and stock plugins", "file_name": "conf.py", "id": "dff102c20b1c6d6d7431c1751dc52bd6", "language": "Python", "project_name": "ajenti", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ajenti-ajenti/ajenti-ajenti-dd36ab4/docs/source/conf.py", "save_time": "", "source": "", "update_at": "2018-03-16T02:10:44Z", "url": "https://github.com/ajenti/ajenti", "wiki": false}