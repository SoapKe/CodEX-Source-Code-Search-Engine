{"author": "localstack", "code": "import os\nimport json\nimport time\nfrom io import BytesIO\nfrom localstack.constants import LOCALSTACK_ROOT_FOLDER, LOCALSTACK_MAVEN_VERSION\nfrom localstack.utils import testutil\nfrom localstack.utils.aws import aws_stack\nfrom localstack.utils.common import short_uid, load_file, to_str, mkdir, download\nfrom localstack.services.awslambda import lambda_api, lambda_executors\nfrom localstack.services.awslambda.lambda_api import (LAMBDA_RUNTIME_NODEJS,\n    LAMBDA_RUNTIME_PYTHON27, LAMBDA_RUNTIME_PYTHON36, LAMBDA_RUNTIME_JAVA8, use_docker)\n\nTHIS_FOLDER = os.path.dirname(os.path.realpath(__file__))\nTEST_LAMBDA_PYTHON = os.path.join(THIS_FOLDER, 'lambdas', 'lambda_integration.py')\nTEST_LAMBDA_PYTHON3 = os.path.join(THIS_FOLDER, 'lambdas', 'lambda_python3.py')\nTEST_LAMBDA_NODEJS = os.path.join(THIS_FOLDER, 'lambdas', 'lambda_integration.js')\nTEST_LAMBDA_JAVA = os.path.join(LOCALSTACK_ROOT_FOLDER, 'localstack', 'infra', 'localstack-utils-tests.jar')\nTEST_LAMBDA_ENV = os.path.join(THIS_FOLDER, 'lambdas', 'lambda_environment.py')\n\nTEST_LAMBDA_NAME_PY = 'test_lambda_py'\nTEST_LAMBDA_NAME_PY3 = 'test_lambda_py3'\nTEST_LAMBDA_NAME_JS = 'test_lambda_js'\nTEST_LAMBDA_NAME_JAVA = 'test_lambda_java'\nTEST_LAMBDA_NAME_JAVA_STREAM = 'test_lambda_java_stream'\nTEST_LAMBDA_NAME_JAVA_SERIALIZABLE = 'test_lambda_java_serializable'\nTEST_LAMBDA_NAME_ENV = 'test_lambda_env'\n\nTEST_LAMBDA_JAR_URL = ('https://repo.maven.apache.org/maven2/cloud/localstack/' +\n    'localstack-utils/{version}/localstack-utils-{version}-tests.jar').format(version=LOCALSTACK_MAVEN_VERSION)\n\nTEST_LAMBDA_LIBS = ['localstack', 'localstack_client', 'requests', 'psutil', 'urllib3', 'chardet', 'certifi', 'idna']\n\n\ndef test_upload_lambda_from_s3():\n\n    s3_client = aws_stack.connect_to_service('s3')\n    lambda_client = aws_stack.connect_to_service('lambda')\n\n    lambda_name = 'test_lambda_%s' % short_uid()\n    bucket_name = 'test_bucket_lambda'\n    bucket_key = 'test_lambda.zip'\n\n    \n    zip_file = testutil.create_lambda_archive(load_file(TEST_LAMBDA_PYTHON), get_content=True,\n        libs=TEST_LAMBDA_LIBS, runtime=LAMBDA_RUNTIME_PYTHON27)\n    s3_client.create_bucket(Bucket=bucket_name)\n    s3_client.upload_fileobj(BytesIO(zip_file), bucket_name, bucket_key)\n\n    \n    lambda_client.create_function(\n        FunctionName=lambda_name, Handler='handler.handler',\n        Runtime=lambda_api.LAMBDA_RUNTIME_PYTHON27, Role='r1',\n        Code={\n            'S3Bucket': bucket_name,\n            'S3Key': bucket_key\n        }\n    )\n\n    \n    data_before = b'{\"foo\": \"bar\"}'\n    result = lambda_client.invoke(FunctionName=lambda_name, Payload=data_before)\n    data_after = result['Payload'].read()\n    assert json.loads(to_str(data_before)) == json.loads(to_str(data_after))\n\n\ndef test_lambda_runtimes():\n\n    lambda_client = aws_stack.connect_to_service('lambda')\n\n    \n    zip_file = testutil.create_lambda_archive(load_file(TEST_LAMBDA_PYTHON), get_content=True,\n        libs=TEST_LAMBDA_LIBS, runtime=LAMBDA_RUNTIME_PYTHON27)\n    testutil.create_lambda_function(func_name=TEST_LAMBDA_NAME_PY,\n        zip_file=zip_file, runtime=LAMBDA_RUNTIME_PYTHON27)\n    result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_PY, Payload=b'{}')\n    assert result['StatusCode'] == 200\n    result_data = result['Payload'].read()\n    assert to_str(result_data).strip() == '{}'\n\n    if use_docker():\n        \n        zip_file = testutil.create_lambda_archive(load_file(TEST_LAMBDA_PYTHON3), get_content=True,\n            libs=TEST_LAMBDA_LIBS, runtime=LAMBDA_RUNTIME_PYTHON36)\n        testutil.create_lambda_function(func_name=TEST_LAMBDA_NAME_PY3,\n            zip_file=zip_file, runtime=LAMBDA_RUNTIME_PYTHON36)\n        result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_PY3, Payload=b'{}')\n        assert result['StatusCode'] == 200\n        result_data = result['Payload'].read()\n        assert to_str(result_data).strip() == '{}'\n\n    \n    if not os.path.exists(TEST_LAMBDA_JAVA):\n        mkdir(os.path.dirname(TEST_LAMBDA_JAVA))\n        download(TEST_LAMBDA_JAR_URL, TEST_LAMBDA_JAVA)\n    zip_file = testutil.create_zip_file(TEST_LAMBDA_JAVA, get_content=True)\n    testutil.create_lambda_function(func_name=TEST_LAMBDA_NAME_JAVA, zip_file=zip_file,\n        runtime=LAMBDA_RUNTIME_JAVA8, handler='cloud.localstack.sample.LambdaHandler')\n    result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_JAVA, Payload=b'{}')\n    assert result['StatusCode'] == 200\n    result_data = result['Payload'].read()\n    assert 'LinkedHashMap' in to_str(result_data)\n\n    \n    result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_JAVA, InvocationType='Event',\n                                  Payload=b'{\"Records\": [{\"Sns\": {\"Message\": \"{}\"}}]}')\n    assert result['StatusCode'] == 200\n    result_data = result['Payload'].read()\n    assert json.loads(to_str(result_data)) == {'async': 'True'}\n\n    \n    result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_JAVA, InvocationType='Event',\n                                  Payload=b'{\"Records\": [{\"dynamodb\": {\"Message\": \"{}\"}}]}')\n    assert result['StatusCode'] == 200\n    result_data = result['Payload'].read()\n    assert json.loads(to_str(result_data)) == {'async': 'True'}\n\n    \n    result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_JAVA,\n                                  Payload=b'{\"Records\": [{\"Kinesis\": {\"Data\": \"data\", \"PartitionKey\": \"partition\"}}]}')\n    assert result['StatusCode'] == 200\n    result_data = result['Payload'].read()\n    assert 'KinesisEvent' in to_str(result_data)\n\n     with stream handler\n    testutil.create_lambda_function(func_name=TEST_LAMBDA_NAME_JAVA_STREAM, zip_file=zip_file,\n        runtime=LAMBDA_RUNTIME_JAVA8, handler='cloud.localstack.sample.LambdaStreamHandler')\n    result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_JAVA_STREAM, Payload=b'{}')\n    assert result['StatusCode'] == 200\n    result_data = result['Payload'].read()\n    assert to_str(result_data).strip() == '{}'\n\n     with serializable input object\n    testutil.create_lambda_function(func_name=TEST_LAMBDA_NAME_JAVA_SERIALIZABLE, zip_file=zip_file,\n        runtime=LAMBDA_RUNTIME_JAVA8, handler='cloud.localstack.sample.SerializedInputLambdaHandler')\n    result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_JAVA_SERIALIZABLE,\n                                  Payload=b'{\"bucket\": \"test_bucket\", \"key\": \"test_key\"}')\n    assert result['StatusCode'] == 200\n    result_data = result['Payload'].read()\n    assert json.loads(to_str(result_data)) == {'validated': True, 'bucket': 'test_bucket', 'key': 'test_key'}\n\n    if use_docker():\n        \n        zip_file = testutil.create_zip_file(TEST_LAMBDA_NODEJS, get_content=True)\n        testutil.create_lambda_function(func_name=TEST_LAMBDA_NAME_JS,\n            zip_file=zip_file, handler='lambda_integration.handler', runtime=LAMBDA_RUNTIME_NODEJS)\n        result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_JS, Payload=b'{}')\n        assert result['StatusCode'] == 200\n        result_data = result['Payload'].read()\n        assert to_str(result_data).strip() == '{}'\n\n\ndef test_lambda_environment():\n\n    lambda_client = aws_stack.connect_to_service('lambda')\n\n    \n    zip_file = testutil.create_lambda_archive(load_file(TEST_LAMBDA_ENV), get_content=True,\n        libs=TEST_LAMBDA_LIBS, runtime=LAMBDA_RUNTIME_PYTHON27)\n    testutil.create_lambda_function(func_name=TEST_LAMBDA_NAME_ENV,\n        zip_file=zip_file, runtime=LAMBDA_RUNTIME_PYTHON27, envvars={'Hello': 'World'})\n    result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_ENV, Payload=b'{}')\n    assert result['StatusCode'] == 200\n    result_data = result['Payload']\n    assert json.load(result_data) == {'Hello': 'World'}\n\n\ndef test_prime_and_destroy_containers():\n\n    \n    if not isinstance(lambda_api.LAMBDA_EXECUTOR, lambda_executors.LambdaExecutorReuseContainers):\n        return\n\n    executor = lambda_api.LAMBDA_EXECUTOR\n    func_name = 'test_prime_and_destroy_containers'\n\n    \n    lambda_client = aws_stack.connect_to_service('lambda')\n\n    func_arn = lambda_api.func_arn(func_name)\n\n    \n    executor.cleanup()\n    assert len(executor.get_all_container_names()) == 0\n\n    \n    zip_file = testutil.create_lambda_archive(load_file(TEST_LAMBDA_ENV), get_content=True,\n                                              libs=TEST_LAMBDA_LIBS, runtime=LAMBDA_RUNTIME_PYTHON27)\n    testutil.create_lambda_function(func_name=func_name, zip_file=zip_file,\n                                    runtime=LAMBDA_RUNTIME_PYTHON27, envvars={'Hello': 'World'})\n\n    assert len(executor.get_all_container_names()) == 0\n\n    assert executor.function_invoke_times == {}\n\n    \n    durations = []\n    num_iterations = 3\n\n    for i in range(0, num_iterations + 1):\n        prev_invoke_time = None\n        if i > 0:\n            prev_invoke_time = executor.function_invoke_times[func_arn]\n\n        start_time = time.time()\n        lambda_client.invoke(FunctionName=func_name, Payload=b'{}')\n        duration = time.time() - start_time\n\n        assert len(executor.get_all_container_names()) == 1\n\n        \n        if i > 0:\n            assert executor.function_invoke_times[func_arn] > prev_invoke_time\n        else:\n            assert executor.function_invoke_times[func_arn] > 0\n\n        durations.append(duration)\n\n    \n    for i in range(1, num_iterations + 1):\n        assert durations[i] < durations[0]\n\n    status = executor.get_docker_container_status(func_arn)\n    assert status == 1\n\n    executor.cleanup()\n    status = executor.get_docker_container_status(func_arn)\n    assert status == 0\n\n    assert len(executor.get_all_container_names()) == 0\n\n\ndef test_destroy_idle_containers():\n\n    \n    if not isinstance(lambda_api.LAMBDA_EXECUTOR, lambda_executors.LambdaExecutorReuseContainers):\n        return\n\n    executor = lambda_api.LAMBDA_EXECUTOR\n    func_name = 'test_destroy_idle_containers'\n\n    \n    lambda_client = aws_stack.connect_to_service('lambda')\n\n    func_arn = lambda_api.func_arn(func_name)\n\n    \n    executor.destroy_existing_docker_containers()\n    assert len(executor.get_all_container_names()) == 0\n\n    \n    zip_file = testutil.create_lambda_archive(load_file(TEST_LAMBDA_ENV), get_content=True,\n                                              libs=TEST_LAMBDA_LIBS, runtime=LAMBDA_RUNTIME_PYTHON27)\n    testutil.create_lambda_function(func_name=func_name,\n                                    zip_file=zip_file, runtime=LAMBDA_RUNTIME_PYTHON27, envvars={'Hello': 'World'})\n\n    assert len(executor.get_all_container_names()) == 0\n\n    lambda_client.invoke(FunctionName=func_name, Payload=b'{}')\n    assert len(executor.get_all_container_names()) == 1\n\n    \n    executor.idle_container_destroyer()\n    assert len(executor.get_all_container_names()) == 1\n\n    \n    executor.function_invoke_times[func_arn] = time.time() - 610\n    executor.idle_container_destroyer()\n    assert len(executor.get_all_container_names()) == 0\n", "comments": "  upload zip file s3    create lambda function    invoke lambda function    deploy invoke lambda   python 2 7    deploy invoke lambda   python 3 6    deploy invoke lambda   java    test snsevent    test ddbevent    test kinesisevent    deploy invoke lambda   java stream handler    deploy invoke lambda   java serializable input object    deploy invoke lambda   node js    deploy invoke lambda without docker    run tests  reuse containers  lambda executor    create new lambda    make sure existing containers gone    deploy invoke lambda without docker    invoke times     ensure last invoke time updated properly     first call would created container  subsequent calls would reuse faster     run tests  reuse containers  lambda executor    create new lambda    make sure existing containers gone    deploy invoke lambda without docker    try destroy idle containers     simulate idle container ", "content": "import os\nimport json\nimport time\nfrom io import BytesIO\nfrom localstack.constants import LOCALSTACK_ROOT_FOLDER, LOCALSTACK_MAVEN_VERSION\nfrom localstack.utils import testutil\nfrom localstack.utils.aws import aws_stack\nfrom localstack.utils.common import short_uid, load_file, to_str, mkdir, download\nfrom localstack.services.awslambda import lambda_api, lambda_executors\nfrom localstack.services.awslambda.lambda_api import (LAMBDA_RUNTIME_NODEJS,\n    LAMBDA_RUNTIME_PYTHON27, LAMBDA_RUNTIME_PYTHON36, LAMBDA_RUNTIME_JAVA8, use_docker)\n\nTHIS_FOLDER = os.path.dirname(os.path.realpath(__file__))\nTEST_LAMBDA_PYTHON = os.path.join(THIS_FOLDER, 'lambdas', 'lambda_integration.py')\nTEST_LAMBDA_PYTHON3 = os.path.join(THIS_FOLDER, 'lambdas', 'lambda_python3.py')\nTEST_LAMBDA_NODEJS = os.path.join(THIS_FOLDER, 'lambdas', 'lambda_integration.js')\nTEST_LAMBDA_JAVA = os.path.join(LOCALSTACK_ROOT_FOLDER, 'localstack', 'infra', 'localstack-utils-tests.jar')\nTEST_LAMBDA_ENV = os.path.join(THIS_FOLDER, 'lambdas', 'lambda_environment.py')\n\nTEST_LAMBDA_NAME_PY = 'test_lambda_py'\nTEST_LAMBDA_NAME_PY3 = 'test_lambda_py3'\nTEST_LAMBDA_NAME_JS = 'test_lambda_js'\nTEST_LAMBDA_NAME_JAVA = 'test_lambda_java'\nTEST_LAMBDA_NAME_JAVA_STREAM = 'test_lambda_java_stream'\nTEST_LAMBDA_NAME_JAVA_SERIALIZABLE = 'test_lambda_java_serializable'\nTEST_LAMBDA_NAME_ENV = 'test_lambda_env'\n\nTEST_LAMBDA_JAR_URL = ('https://repo.maven.apache.org/maven2/cloud/localstack/' +\n    'localstack-utils/{version}/localstack-utils-{version}-tests.jar').format(version=LOCALSTACK_MAVEN_VERSION)\n\nTEST_LAMBDA_LIBS = ['localstack', 'localstack_client', 'requests', 'psutil', 'urllib3', 'chardet', 'certifi', 'idna']\n\n\ndef test_upload_lambda_from_s3():\n\n    s3_client = aws_stack.connect_to_service('s3')\n    lambda_client = aws_stack.connect_to_service('lambda')\n\n    lambda_name = 'test_lambda_%s' % short_uid()\n    bucket_name = 'test_bucket_lambda'\n    bucket_key = 'test_lambda.zip'\n\n    # upload zip file to S3\n    zip_file = testutil.create_lambda_archive(load_file(TEST_LAMBDA_PYTHON), get_content=True,\n        libs=TEST_LAMBDA_LIBS, runtime=LAMBDA_RUNTIME_PYTHON27)\n    s3_client.create_bucket(Bucket=bucket_name)\n    s3_client.upload_fileobj(BytesIO(zip_file), bucket_name, bucket_key)\n\n    # create lambda function\n    lambda_client.create_function(\n        FunctionName=lambda_name, Handler='handler.handler',\n        Runtime=lambda_api.LAMBDA_RUNTIME_PYTHON27, Role='r1',\n        Code={\n            'S3Bucket': bucket_name,\n            'S3Key': bucket_key\n        }\n    )\n\n    # invoke lambda function\n    data_before = b'{\"foo\": \"bar\"}'\n    result = lambda_client.invoke(FunctionName=lambda_name, Payload=data_before)\n    data_after = result['Payload'].read()\n    assert json.loads(to_str(data_before)) == json.loads(to_str(data_after))\n\n\ndef test_lambda_runtimes():\n\n    lambda_client = aws_stack.connect_to_service('lambda')\n\n    # deploy and invoke lambda - Python 2.7\n    zip_file = testutil.create_lambda_archive(load_file(TEST_LAMBDA_PYTHON), get_content=True,\n        libs=TEST_LAMBDA_LIBS, runtime=LAMBDA_RUNTIME_PYTHON27)\n    testutil.create_lambda_function(func_name=TEST_LAMBDA_NAME_PY,\n        zip_file=zip_file, runtime=LAMBDA_RUNTIME_PYTHON27)\n    result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_PY, Payload=b'{}')\n    assert result['StatusCode'] == 200\n    result_data = result['Payload'].read()\n    assert to_str(result_data).strip() == '{}'\n\n    if use_docker():\n        # deploy and invoke lambda - Python 3.6\n        zip_file = testutil.create_lambda_archive(load_file(TEST_LAMBDA_PYTHON3), get_content=True,\n            libs=TEST_LAMBDA_LIBS, runtime=LAMBDA_RUNTIME_PYTHON36)\n        testutil.create_lambda_function(func_name=TEST_LAMBDA_NAME_PY3,\n            zip_file=zip_file, runtime=LAMBDA_RUNTIME_PYTHON36)\n        result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_PY3, Payload=b'{}')\n        assert result['StatusCode'] == 200\n        result_data = result['Payload'].read()\n        assert to_str(result_data).strip() == '{}'\n\n    # deploy and invoke lambda - Java\n    if not os.path.exists(TEST_LAMBDA_JAVA):\n        mkdir(os.path.dirname(TEST_LAMBDA_JAVA))\n        download(TEST_LAMBDA_JAR_URL, TEST_LAMBDA_JAVA)\n    zip_file = testutil.create_zip_file(TEST_LAMBDA_JAVA, get_content=True)\n    testutil.create_lambda_function(func_name=TEST_LAMBDA_NAME_JAVA, zip_file=zip_file,\n        runtime=LAMBDA_RUNTIME_JAVA8, handler='cloud.localstack.sample.LambdaHandler')\n    result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_JAVA, Payload=b'{}')\n    assert result['StatusCode'] == 200\n    result_data = result['Payload'].read()\n    assert 'LinkedHashMap' in to_str(result_data)\n\n    # test SNSEvent\n    result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_JAVA, InvocationType='Event',\n                                  Payload=b'{\"Records\": [{\"Sns\": {\"Message\": \"{}\"}}]}')\n    assert result['StatusCode'] == 200\n    result_data = result['Payload'].read()\n    assert json.loads(to_str(result_data)) == {'async': 'True'}\n\n    # test DDBEvent\n    result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_JAVA, InvocationType='Event',\n                                  Payload=b'{\"Records\": [{\"dynamodb\": {\"Message\": \"{}\"}}]}')\n    assert result['StatusCode'] == 200\n    result_data = result['Payload'].read()\n    assert json.loads(to_str(result_data)) == {'async': 'True'}\n\n    # test KinesisEvent\n    result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_JAVA,\n                                  Payload=b'{\"Records\": [{\"Kinesis\": {\"Data\": \"data\", \"PartitionKey\": \"partition\"}}]}')\n    assert result['StatusCode'] == 200\n    result_data = result['Payload'].read()\n    assert 'KinesisEvent' in to_str(result_data)\n\n    # deploy and invoke lambda - Java with stream handler\n    testutil.create_lambda_function(func_name=TEST_LAMBDA_NAME_JAVA_STREAM, zip_file=zip_file,\n        runtime=LAMBDA_RUNTIME_JAVA8, handler='cloud.localstack.sample.LambdaStreamHandler')\n    result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_JAVA_STREAM, Payload=b'{}')\n    assert result['StatusCode'] == 200\n    result_data = result['Payload'].read()\n    assert to_str(result_data).strip() == '{}'\n\n    # deploy and invoke lambda - Java with serializable input object\n    testutil.create_lambda_function(func_name=TEST_LAMBDA_NAME_JAVA_SERIALIZABLE, zip_file=zip_file,\n        runtime=LAMBDA_RUNTIME_JAVA8, handler='cloud.localstack.sample.SerializedInputLambdaHandler')\n    result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_JAVA_SERIALIZABLE,\n                                  Payload=b'{\"bucket\": \"test_bucket\", \"key\": \"test_key\"}')\n    assert result['StatusCode'] == 200\n    result_data = result['Payload'].read()\n    assert json.loads(to_str(result_data)) == {'validated': True, 'bucket': 'test_bucket', 'key': 'test_key'}\n\n    if use_docker():\n        # deploy and invoke lambda - Node.js\n        zip_file = testutil.create_zip_file(TEST_LAMBDA_NODEJS, get_content=True)\n        testutil.create_lambda_function(func_name=TEST_LAMBDA_NAME_JS,\n            zip_file=zip_file, handler='lambda_integration.handler', runtime=LAMBDA_RUNTIME_NODEJS)\n        result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_JS, Payload=b'{}')\n        assert result['StatusCode'] == 200\n        result_data = result['Payload'].read()\n        assert to_str(result_data).strip() == '{}'\n\n\ndef test_lambda_environment():\n\n    lambda_client = aws_stack.connect_to_service('lambda')\n\n    # deploy and invoke lambda without Docker\n    zip_file = testutil.create_lambda_archive(load_file(TEST_LAMBDA_ENV), get_content=True,\n        libs=TEST_LAMBDA_LIBS, runtime=LAMBDA_RUNTIME_PYTHON27)\n    testutil.create_lambda_function(func_name=TEST_LAMBDA_NAME_ENV,\n        zip_file=zip_file, runtime=LAMBDA_RUNTIME_PYTHON27, envvars={'Hello': 'World'})\n    result = lambda_client.invoke(FunctionName=TEST_LAMBDA_NAME_ENV, Payload=b'{}')\n    assert result['StatusCode'] == 200\n    result_data = result['Payload']\n    assert json.load(result_data) == {'Hello': 'World'}\n\n\ndef test_prime_and_destroy_containers():\n\n    # run these tests only for the \"reuse containers\" Lambda executor\n    if not isinstance(lambda_api.LAMBDA_EXECUTOR, lambda_executors.LambdaExecutorReuseContainers):\n        return\n\n    executor = lambda_api.LAMBDA_EXECUTOR\n    func_name = 'test_prime_and_destroy_containers'\n\n    # create a new lambda\n    lambda_client = aws_stack.connect_to_service('lambda')\n\n    func_arn = lambda_api.func_arn(func_name)\n\n    # make sure existing containers are gone\n    executor.cleanup()\n    assert len(executor.get_all_container_names()) == 0\n\n    # deploy and invoke lambda without Docker\n    zip_file = testutil.create_lambda_archive(load_file(TEST_LAMBDA_ENV), get_content=True,\n                                              libs=TEST_LAMBDA_LIBS, runtime=LAMBDA_RUNTIME_PYTHON27)\n    testutil.create_lambda_function(func_name=func_name, zip_file=zip_file,\n                                    runtime=LAMBDA_RUNTIME_PYTHON27, envvars={'Hello': 'World'})\n\n    assert len(executor.get_all_container_names()) == 0\n\n    assert executor.function_invoke_times == {}\n\n    # invoke a few times.\n    durations = []\n    num_iterations = 3\n\n    for i in range(0, num_iterations + 1):\n        prev_invoke_time = None\n        if i > 0:\n            prev_invoke_time = executor.function_invoke_times[func_arn]\n\n        start_time = time.time()\n        lambda_client.invoke(FunctionName=func_name, Payload=b'{}')\n        duration = time.time() - start_time\n\n        assert len(executor.get_all_container_names()) == 1\n\n        # ensure the last invoke time is being updated properly.\n        if i > 0:\n            assert executor.function_invoke_times[func_arn] > prev_invoke_time\n        else:\n            assert executor.function_invoke_times[func_arn] > 0\n\n        durations.append(duration)\n\n    # the first call would have created the container. subsequent calls would reuse and be faster.\n    for i in range(1, num_iterations + 1):\n        assert durations[i] < durations[0]\n\n    status = executor.get_docker_container_status(func_arn)\n    assert status == 1\n\n    executor.cleanup()\n    status = executor.get_docker_container_status(func_arn)\n    assert status == 0\n\n    assert len(executor.get_all_container_names()) == 0\n\n\ndef test_destroy_idle_containers():\n\n    # run these tests only for the \"reuse containers\" Lambda executor\n    if not isinstance(lambda_api.LAMBDA_EXECUTOR, lambda_executors.LambdaExecutorReuseContainers):\n        return\n\n    executor = lambda_api.LAMBDA_EXECUTOR\n    func_name = 'test_destroy_idle_containers'\n\n    # create a new lambda\n    lambda_client = aws_stack.connect_to_service('lambda')\n\n    func_arn = lambda_api.func_arn(func_name)\n\n    # make sure existing containers are gone\n    executor.destroy_existing_docker_containers()\n    assert len(executor.get_all_container_names()) == 0\n\n    # deploy and invoke lambda without Docker\n    zip_file = testutil.create_lambda_archive(load_file(TEST_LAMBDA_ENV), get_content=True,\n                                              libs=TEST_LAMBDA_LIBS, runtime=LAMBDA_RUNTIME_PYTHON27)\n    testutil.create_lambda_function(func_name=func_name,\n                                    zip_file=zip_file, runtime=LAMBDA_RUNTIME_PYTHON27, envvars={'Hello': 'World'})\n\n    assert len(executor.get_all_container_names()) == 0\n\n    lambda_client.invoke(FunctionName=func_name, Payload=b'{}')\n    assert len(executor.get_all_container_names()) == 1\n\n    # try to destroy idle containers.\n    executor.idle_container_destroyer()\n    assert len(executor.get_all_container_names()) == 1\n\n    # simulate an idle container\n    executor.function_invoke_times[func_arn] = time.time() - 610\n    executor.idle_container_destroyer()\n    assert len(executor.get_all_container_names()) == 0\n", "description": "\ud83d\udcbb  A fully functional local AWS cloud stack. Develop and test your cloud apps offline!", "file_name": "test_lambda.py", "id": "d056e0712dc4cfd1d5813646c72c0947", "language": "Python", "project_name": "localstack", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/localstack-localstack/localstack-localstack-865ec3a/tests/integration/test_lambda.py", "save_time": "", "source": "", "update_at": "2018-03-14T00:04:55Z", "url": "https://github.com/localstack/localstack", "wiki": true}