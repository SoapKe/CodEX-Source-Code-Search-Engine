{"author": "nvbn", "code": "import os\nimport re\nfrom thefuck.utils import get_closest, replace_command\nfrom thefuck.specific.brew import get_brew_path_prefix, brew_available\n\nBREW_CMD_PATH = '/Library/Homebrew/cmd'\nTAP_PATH = '/Library/Taps'\nTAP_CMD_PATH = '/%s/%s/cmd'\n\nenabled_by_default = brew_available\n\n\ndef _get_brew_commands(brew_path_prefix):\n    \n    commands = []\n    brew_taps_path = brew_path_prefix + TAP_PATH\n\n    for user in _get_directory_names_only(brew_taps_path):\n        taps = _get_directory_names_only(brew_taps_path + '/%s' % user)\n\n        \n        \n        taps = (tap for tap in taps if tap.startswith('homebrew-'))\n        for tap in taps:\n            tap_cmd_path = brew_taps_path + TAP_CMD_PATH % (user, tap)\n\n            if os.path.isdir(tap_cmd_path):\n                commands += (name.replace('brew-', '').replace('.rb', '')\n                             for name in os.listdir(tap_cmd_path)\n                             if _is_brew_tap_cmd_naming(name))\n\n    return commands\n\n\ndef _is_brew_tap_cmd_naming(name):\n    return name.startswith('brew-') and name.endswith('.rb')\n\n\ndef _get_directory_names_only(path):\n    return [d for d in os.listdir(path)\n            if os.path.isdir(os.path.join(path, d))]\n\n\ndef _brew_commands():\n    brew_path_prefix = get_brew_path_prefix()\n    if brew_path_prefix:\n        try:\n            return (_get_brew_commands(brew_path_prefix)\n                    + _get_brew_tap_specific_commands(brew_path_prefix))\n        except OSError:\n            pass\n\n    \n    return ['info', 'home', 'options', 'install', 'uninstall',\n            'search', 'list', 'update', 'upgrade', 'pin', 'unpin',\n            'doctor', 'create', 'edit']\n\n\ndef match(command):\n    is_proper_command = ('brew' in command.script and\n                         'Unknown command' in command.output)\n\n    if is_proper_command:\n        broken_cmd = re.findall(r'Error: Unknown command: ([a-z]+)',\n                                command.output)[0]\n        return bool(get_closest(broken_cmd, _brew_commands()))\n    return False\n\n\ndef get_new_command(command):\n    broken_cmd = re.findall(r'Error: Unknown command: ([a-z]+)',\n                            command.output)[0]\n    return replace_command(command, broken_cmd, _brew_commands())\n", "comments": "To get brew default commands on local environment\"\"\"\n    brew_cmd_path = brew_path_prefix + BREW_CMD_PATH\n\n    return [name[:-3] for name in os.listdir(brew_cmd_path)\n            if name.endswith(('.rb', '.sh'))]\n\n\ndef _get_brew_tap_specific_commands(brew_path_prefix):\n    \"\"\"To get tap's specific commands\n    https://github.com/Homebrew/homebrew/blob/master/Library/brew.rb#L115\n5\n# Brew Taps's naming rule\n# https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/brew-tap.md#naming-conventions-and-limitations\n# Failback commands for testing (Based on Homebrew 0.9.5)\n", "content": "import os\nimport re\nfrom thefuck.utils import get_closest, replace_command\nfrom thefuck.specific.brew import get_brew_path_prefix, brew_available\n\nBREW_CMD_PATH = '/Library/Homebrew/cmd'\nTAP_PATH = '/Library/Taps'\nTAP_CMD_PATH = '/%s/%s/cmd'\n\nenabled_by_default = brew_available\n\n\ndef _get_brew_commands(brew_path_prefix):\n    \"\"\"To get brew default commands on local environment\"\"\"\n    brew_cmd_path = brew_path_prefix + BREW_CMD_PATH\n\n    return [name[:-3] for name in os.listdir(brew_cmd_path)\n            if name.endswith(('.rb', '.sh'))]\n\n\ndef _get_brew_tap_specific_commands(brew_path_prefix):\n    \"\"\"To get tap's specific commands\n    https://github.com/Homebrew/homebrew/blob/master/Library/brew.rb#L115\"\"\"\n    commands = []\n    brew_taps_path = brew_path_prefix + TAP_PATH\n\n    for user in _get_directory_names_only(brew_taps_path):\n        taps = _get_directory_names_only(brew_taps_path + '/%s' % user)\n\n        # Brew Taps's naming rule\n        # https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/brew-tap.md#naming-conventions-and-limitations\n        taps = (tap for tap in taps if tap.startswith('homebrew-'))\n        for tap in taps:\n            tap_cmd_path = brew_taps_path + TAP_CMD_PATH % (user, tap)\n\n            if os.path.isdir(tap_cmd_path):\n                commands += (name.replace('brew-', '').replace('.rb', '')\n                             for name in os.listdir(tap_cmd_path)\n                             if _is_brew_tap_cmd_naming(name))\n\n    return commands\n\n\ndef _is_brew_tap_cmd_naming(name):\n    return name.startswith('brew-') and name.endswith('.rb')\n\n\ndef _get_directory_names_only(path):\n    return [d for d in os.listdir(path)\n            if os.path.isdir(os.path.join(path, d))]\n\n\ndef _brew_commands():\n    brew_path_prefix = get_brew_path_prefix()\n    if brew_path_prefix:\n        try:\n            return (_get_brew_commands(brew_path_prefix)\n                    + _get_brew_tap_specific_commands(brew_path_prefix))\n        except OSError:\n            pass\n\n    # Failback commands for testing (Based on Homebrew 0.9.5)\n    return ['info', 'home', 'options', 'install', 'uninstall',\n            'search', 'list', 'update', 'upgrade', 'pin', 'unpin',\n            'doctor', 'create', 'edit']\n\n\ndef match(command):\n    is_proper_command = ('brew' in command.script and\n                         'Unknown command' in command.output)\n\n    if is_proper_command:\n        broken_cmd = re.findall(r'Error: Unknown command: ([a-z]+)',\n                                command.output)[0]\n        return bool(get_closest(broken_cmd, _brew_commands()))\n    return False\n\n\ndef get_new_command(command):\n    broken_cmd = re.findall(r'Error: Unknown command: ([a-z]+)',\n                            command.output)[0]\n    return replace_command(command, broken_cmd, _brew_commands())\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "brew_unknown_command.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/rules/brew_unknown_command.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}