{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestDfs(object):\n\n    def __init__(self):\n        self.results = Results()\n\n    def test_dfs(self):\n        bst = BstDfs(Node(5))\n        bst.insert(2)\n        bst.insert(8)\n        bst.insert(1)\n        bst.insert(3)\n\n        bst.in_order_traversal(bst.root, self.results.add_result)\n        assert_equal(str(self.results), \"[1, 2, 3, 5, 8]\")\n        self.results.clear_results()\n\n        bst.pre_order_traversal(bst.root, self.results.add_result)\n        assert_equal(str(self.results), \"[5, 2, 1, 3, 8]\")\n        self.results.clear_results()\n\n        bst.post_order_traversal(bst.root, self.results.add_result)\n        assert_equal(str(self.results), \"[1, 3, 2, 8, 5]\")\n        self.results.clear_results()\n\n        bst = BstDfs(Node(1))\n        bst.insert(2)\n        bst.insert(3)\n        bst.insert(4)\n        bst.insert(5)\n\n        bst.in_order_traversal(bst.root, self.results.add_result)\n        assert_equal(str(self.results), \"[1, 2, 3, 4, 5]\")\n        self.results.clear_results()\n\n        bst.pre_order_traversal(bst.root, self.results.add_result)\n        assert_equal(str(self.results), \"[1, 2, 3, 4, 5]\")\n        self.results.clear_results()\n\n        bst.post_order_traversal(bst.root, self.results.add_result)\n        assert_equal(str(self.results), \"[5, 4, 3, 2, 1]\")\n\n        print('Success: test_dfs')\n\n\ndef main():\n    test = TestDfs()\n    test.test_dfs()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\n\nclass TestDfs(object):\n\n    def __init__(self):\n        self.results = Results()\n\n    def test_dfs(self):\n        bst = BstDfs(Node(5))\n        bst.insert(2)\n        bst.insert(8)\n        bst.insert(1)\n        bst.insert(3)\n\n        bst.in_order_traversal(bst.root, self.results.add_result)\n        assert_equal(str(self.results), \"[1, 2, 3, 5, 8]\")\n        self.results.clear_results()\n\n        bst.pre_order_traversal(bst.root, self.results.add_result)\n        assert_equal(str(self.results), \"[5, 2, 1, 3, 8]\")\n        self.results.clear_results()\n\n        bst.post_order_traversal(bst.root, self.results.add_result)\n        assert_equal(str(self.results), \"[1, 3, 2, 8, 5]\")\n        self.results.clear_results()\n\n        bst = BstDfs(Node(1))\n        bst.insert(2)\n        bst.insert(3)\n        bst.insert(4)\n        bst.insert(5)\n\n        bst.in_order_traversal(bst.root, self.results.add_result)\n        assert_equal(str(self.results), \"[1, 2, 3, 4, 5]\")\n        self.results.clear_results()\n\n        bst.pre_order_traversal(bst.root, self.results.add_result)\n        assert_equal(str(self.results), \"[1, 2, 3, 4, 5]\")\n        self.results.clear_results()\n\n        bst.post_order_traversal(bst.root, self.results.add_result)\n        assert_equal(str(self.results), \"[5, 4, 3, 2, 1]\")\n\n        print('Success: test_dfs')\n\n\ndef main():\n    test = TestDfs()\n    test.test_dfs()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_dfs.py", "id": "3f9d45442271352f0f33c31a245d41df", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/graphs_trees/tree_dfs/test_dfs.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}