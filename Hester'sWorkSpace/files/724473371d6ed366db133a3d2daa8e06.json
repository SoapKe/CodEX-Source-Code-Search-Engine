{"author": "ansible", "code": "\n  Copyright (c) 2017 Citrix Systems\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nfrom ansible.compat.tests.mock import patch, Mock, MagicMock, call\n\nimport sys\n\nif sys.version_info[:2] != (2, 6):\n    import requests\n\n\nfrom units.modules.utils import set_module_args\nfrom .netscaler_module import TestModule, nitro_base_patcher\n\n\nclass TestNetscalerServiceModule(TestModule):\n\n    @classmethod\n    def setUpClass(cls):\n        m = MagicMock()\n        cls.service_mock = MagicMock()\n        cls.service_mock.__class__ = MagicMock()\n        cls.service_lbmonitor_binding_mock = MagicMock()\n        cls.lbmonitor_service_binding_mock = MagicMock()\n        nssrc_modules_mock = {\n            'nssrc.com.citrix.netscaler.nitro.resource.config.basic': m,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.basic.service': m,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.basic.service.service': cls.service_mock,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.basic.service_lbmonitor_binding': cls.service_lbmonitor_binding_mock,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.basic.service_lbmonitor_binding.service_lbmonitor_binding': m,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.lb': m,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.lb.lbmonitor_service_binding': m,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.lb.lbmonitor_service_binding.lbmonitor_service_binding': cls.lbmonitor_service_binding_mock,\n        }\n\n        cls.nitro_specific_patcher = patch.dict(sys.modules, nssrc_modules_mock)\n        cls.nitro_base_patcher = nitro_base_patcher\n\n    @classmethod\n    def tearDownClass(cls):\n        cls.nitro_base_patcher.stop()\n        cls.nitro_specific_patcher.stop()\n\n    def set_module_state(self, state):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state=state,\n        ))\n\n    def setUp(self):\n        super(TestNetscalerServiceModule, self).setUp()\n        self.nitro_base_patcher.start()\n        self.nitro_specific_patcher.start()\n\n         Setup minimal required arguments to pass AnsibleModule argument parsing\n\n    def tearDown(self):\n        super(TestNetscalerServiceModule, self).tearDown()\n        self.nitro_base_patcher.stop()\n        self.nitro_specific_patcher.stop()\n\n    def test_graceful_nitro_api_import_error(self):\n         Stop nitro api patching to cause ImportError\n        self.set_module_state('present')\n        self.nitro_base_patcher.stop()\n        self.nitro_specific_patcher.stop()\n        from ansible.modules.network.netscaler import netscaler_service\n        self.module = netscaler_service\n        result = self.failed()\n        self.assertEqual(result['msg'], 'Could not load nitro python sdk')\n\n    def test_graceful_nitro_error_on_login(self):\n        self.set_module_state('present')\n        from ansible.modules.network.netscaler import netscaler_service\n\n        class MockException(Exception):\n            def __init__(self, *args, **kwargs):\n                self.errorcode = 0\n                self.message = ''\n\n        client_mock = Mock()\n        client_mock.login = Mock(side_effect=MockException)\n        m = Mock(return_value=client_mock)\n        with patch('ansible.modules.network.netscaler.netscaler_service.get_nitro_client', m):\n            with patch('ansible.modules.network.netscaler.netscaler_service.nitro_exception', MockException):\n                self.module = netscaler_service\n                result = self.failed()\n                self.assertTrue(result['msg'].startswith('nitro exception'), msg='nitro exception during login not handled properly')\n\n    def test_graceful_no_connection_error(self):\n\n        if sys.version_info[:2] == (2, 6):\n            self.skipTest('requests library not available under python2.6')\n        self.set_module_state('present')\n        from ansible.modules.network.netscaler import netscaler_service\n\n        class MockException(Exception):\n            pass\n        client_mock = Mock()\n        attrs = {'login.side_effect': requests.exceptions.ConnectionError}\n        client_mock.configure_mock(**attrs)\n        m = Mock(return_value=client_mock)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            get_nitro_client=m,\n            nitro_exception=MockException,\n        ):\n            self.module = netscaler_service\n            result = self.failed()\n            self.assertTrue(result['msg'].startswith('Connection error'), msg='Connection error was not handled gracefully')\n\n    def test_graceful_login_error(self):\n        self.set_module_state('present')\n        from ansible.modules.network.netscaler import netscaler_service\n\n        if sys.version_info[:2] == (2, 6):\n            self.skipTest('requests library not available under python2.6')\n\n        class MockException(Exception):\n            pass\n        client_mock = Mock()\n        attrs = {'login.side_effect': requests.exceptions.SSLError}\n        client_mock.configure_mock(**attrs)\n        m = Mock(return_value=client_mock)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            get_nitro_client=m,\n            nitro_exception=MockException,\n        ):\n            self.module = netscaler_service\n            result = self.failed()\n            self.assertTrue(result['msg'].startswith('SSL Error'), msg='SSL Error was not handled gracefully')\n\n    def test_create_non_existing_service(self):\n        self.set_module_state('present')\n        from ansible.modules.network.netscaler import netscaler_service\n        service_proxy_mock = MagicMock()\n        attrs = {\n            'diff_object.return_value': {},\n        }\n        service_proxy_mock.configure_mock(**attrs)\n\n        m = MagicMock(return_value=service_proxy_mock)\n        service_exists_mock = Mock(side_effect=[False, True])\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            ConfigProxy=m,\n            service_exists=service_exists_mock,\n            do_state_change=Mock(return_value=Mock(errorcode=0)),\n        ):\n            self.module = netscaler_service\n            result = self.exited()\n            service_proxy_mock.assert_has_calls([call.add()])\n            self.assertTrue(result['changed'], msg='Change not recorded')\n\n    def test_update_service_when_service_differs(self):\n        self.set_module_state('present')\n        from ansible.modules.network.netscaler import netscaler_service\n        service_proxy_mock = MagicMock()\n        attrs = {\n            'diff_object.return_value': {},\n        }\n        service_proxy_mock.configure_mock(**attrs)\n\n        m = MagicMock(return_value=service_proxy_mock)\n        service_exists_mock = Mock(side_effect=[True, True])\n        service_identical_mock = Mock(side_effect=[False, True])\n        monitor_bindings_identical_mock = Mock(side_effect=[True, True])\n        all_identical_mock = Mock(side_effect=[False])\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            ConfigProxy=m,\n            service_exists=service_exists_mock,\n            service_identical=service_identical_mock,\n            monitor_bindings_identical=monitor_bindings_identical_mock,\n            all_identical=all_identical_mock,\n            do_state_change=Mock(return_value=Mock(errorcode=0)),\n        ):\n            self.module = netscaler_service\n            result = self.exited()\n            service_proxy_mock.assert_has_calls([call.update()])\n            self.assertTrue(result['changed'], msg='Change not recorded')\n\n    def test_update_service_when_monitor_bindings_differ(self):\n        self.set_module_state('present')\n        from ansible.modules.network.netscaler import netscaler_service\n        service_proxy_mock = MagicMock()\n        attrs = {\n            'diff_object.return_value': {},\n        }\n        service_proxy_mock.configure_mock(**attrs)\n\n        m = MagicMock(return_value=service_proxy_mock)\n        service_exists_mock = Mock(side_effect=[True, True])\n        service_identical_mock = Mock(side_effect=[True, True])\n        monitor_bindings_identical_mock = Mock(side_effect=[False, True])\n        all_identical_mock = Mock(side_effect=[False])\n        sync_monitor_bindings_mock = Mock()\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            ConfigProxy=m,\n            service_exists=service_exists_mock,\n            service_identical=service_identical_mock,\n            monitor_bindings_identical=monitor_bindings_identical_mock,\n            all_identical=all_identical_mock,\n            sync_monitor_bindings=sync_monitor_bindings_mock,\n            do_state_change=Mock(return_value=Mock(errorcode=0)),\n        ):\n            self.module = netscaler_service\n            result = self.exited()\n         poor man's assert_called_once since python3.5 does not implement that mock method\n        self.assertEqual(len(sync_monitor_bindings_mock.mock_calls), 1, msg='sync monitor bindings not called once')\n        self.assertTrue(result['changed'], msg='Change not recorded')\n\n    def test_no_change_to_module_when_all_identical(self):\n        self.set_module_state('present')\n        from ansible.modules.network.netscaler import netscaler_service\n        service_proxy_mock = MagicMock()\n        attrs = {\n            'diff_object.return_value': {},\n        }\n        service_proxy_mock.configure_mock(**attrs)\n\n        m = MagicMock(return_value=service_proxy_mock)\n        service_exists_mock = Mock(side_effect=[True, True])\n        service_identical_mock = Mock(side_effect=[True, True])\n        monitor_bindings_identical_mock = Mock(side_effect=[True, True])\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            ConfigProxy=m,\n            service_exists=service_exists_mock,\n            service_identical=service_identical_mock,\n            monitor_bindings_identical=monitor_bindings_identical_mock,\n            do_state_change=Mock(return_value=Mock(errorcode=0)),\n        ):\n            self.module = netscaler_service\n            result = self.exited()\n            self.assertFalse(result['changed'], msg='Erroneous changed status update')\n\n    def test_absent_operation(self):\n        self.set_module_state('absent')\n        from ansible.modules.network.netscaler import netscaler_service\n        service_proxy_mock = MagicMock()\n        attrs = {\n            'diff_object.return_value': {},\n        }\n        service_proxy_mock.configure_mock(**attrs)\n\n        m = MagicMock(return_value=service_proxy_mock)\n        service_exists_mock = Mock(side_effect=[True, False])\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            ConfigProxy=m,\n            service_exists=service_exists_mock,\n\n        ):\n            self.module = netscaler_service\n            result = self.exited()\n            service_proxy_mock.assert_has_calls([call.delete()])\n            self.assertTrue(result['changed'], msg='Changed status not set correctly')\n\n    def test_absent_operation_no_change(self):\n        self.set_module_state('absent')\n        from ansible.modules.network.netscaler import netscaler_service\n        service_proxy_mock = MagicMock()\n        attrs = {\n            'diff_object.return_value': {},\n        }\n        service_proxy_mock.configure_mock(**attrs)\n\n        m = MagicMock(return_value=service_proxy_mock)\n        service_exists_mock = Mock(side_effect=[False, False])\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            ConfigProxy=m,\n            service_exists=service_exists_mock,\n\n        ):\n            self.module = netscaler_service\n            result = self.exited()\n            service_proxy_mock.assert_not_called()\n            self.assertFalse(result['changed'], msg='Changed status not set correctly')\n\n    def test_graceful_nitro_exception_operation_present(self):\n        self.set_module_state('present')\n        from ansible.modules.network.netscaler import netscaler_service\n\n        class MockException(Exception):\n            def __init__(self, *args, **kwargs):\n                self.errorcode = 0\n                self.message = ''\n\n        m = Mock(side_effect=MockException)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            service_exists=m,\n            nitro_exception=MockException\n        ):\n            self.module = netscaler_service\n            result = self.failed()\n            self.assertTrue(\n                result['msg'].startswith('nitro exception'),\n                msg='Nitro exception not caught on operation present'\n            )\n\n    def test_graceful_nitro_exception_operation_absent(self):\n        self.set_module_state('absent')\n        from ansible.modules.network.netscaler import netscaler_service\n\n        class MockException(Exception):\n            def __init__(self, *args, **kwargs):\n                self.errorcode = 0\n                self.message = ''\n\n        m = Mock(side_effect=MockException)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            service_exists=m,\n            nitro_exception=MockException\n        ):\n            self.module = netscaler_service\n            result = self.failed()\n            self.assertTrue(\n                result['msg'].startswith('nitro exception'),\n                msg='Nitro exception not caught on operation absent'\n            )\n", "comments": "   copyright (c) 2017 citrix systems       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          setup minimal required arguments pass ansiblemodule argument parsing    stop nitro api patching cause importerror    poor man assert called since python3 5 implement mock method ", "content": "\n#  Copyright (c) 2017 Citrix Systems\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nfrom ansible.compat.tests.mock import patch, Mock, MagicMock, call\n\nimport sys\n\nif sys.version_info[:2] != (2, 6):\n    import requests\n\n\nfrom units.modules.utils import set_module_args\nfrom .netscaler_module import TestModule, nitro_base_patcher\n\n\nclass TestNetscalerServiceModule(TestModule):\n\n    @classmethod\n    def setUpClass(cls):\n        m = MagicMock()\n        cls.service_mock = MagicMock()\n        cls.service_mock.__class__ = MagicMock()\n        cls.service_lbmonitor_binding_mock = MagicMock()\n        cls.lbmonitor_service_binding_mock = MagicMock()\n        nssrc_modules_mock = {\n            'nssrc.com.citrix.netscaler.nitro.resource.config.basic': m,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.basic.service': m,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.basic.service.service': cls.service_mock,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.basic.service_lbmonitor_binding': cls.service_lbmonitor_binding_mock,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.basic.service_lbmonitor_binding.service_lbmonitor_binding': m,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.lb': m,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.lb.lbmonitor_service_binding': m,\n            'nssrc.com.citrix.netscaler.nitro.resource.config.lb.lbmonitor_service_binding.lbmonitor_service_binding': cls.lbmonitor_service_binding_mock,\n        }\n\n        cls.nitro_specific_patcher = patch.dict(sys.modules, nssrc_modules_mock)\n        cls.nitro_base_patcher = nitro_base_patcher\n\n    @classmethod\n    def tearDownClass(cls):\n        cls.nitro_base_patcher.stop()\n        cls.nitro_specific_patcher.stop()\n\n    def set_module_state(self, state):\n        set_module_args(dict(\n            nitro_user='user',\n            nitro_pass='pass',\n            nsip='1.1.1.1',\n            state=state,\n        ))\n\n    def setUp(self):\n        super(TestNetscalerServiceModule, self).setUp()\n        self.nitro_base_patcher.start()\n        self.nitro_specific_patcher.start()\n\n        # Setup minimal required arguments to pass AnsibleModule argument parsing\n\n    def tearDown(self):\n        super(TestNetscalerServiceModule, self).tearDown()\n        self.nitro_base_patcher.stop()\n        self.nitro_specific_patcher.stop()\n\n    def test_graceful_nitro_api_import_error(self):\n        # Stop nitro api patching to cause ImportError\n        self.set_module_state('present')\n        self.nitro_base_patcher.stop()\n        self.nitro_specific_patcher.stop()\n        from ansible.modules.network.netscaler import netscaler_service\n        self.module = netscaler_service\n        result = self.failed()\n        self.assertEqual(result['msg'], 'Could not load nitro python sdk')\n\n    def test_graceful_nitro_error_on_login(self):\n        self.set_module_state('present')\n        from ansible.modules.network.netscaler import netscaler_service\n\n        class MockException(Exception):\n            def __init__(self, *args, **kwargs):\n                self.errorcode = 0\n                self.message = ''\n\n        client_mock = Mock()\n        client_mock.login = Mock(side_effect=MockException)\n        m = Mock(return_value=client_mock)\n        with patch('ansible.modules.network.netscaler.netscaler_service.get_nitro_client', m):\n            with patch('ansible.modules.network.netscaler.netscaler_service.nitro_exception', MockException):\n                self.module = netscaler_service\n                result = self.failed()\n                self.assertTrue(result['msg'].startswith('nitro exception'), msg='nitro exception during login not handled properly')\n\n    def test_graceful_no_connection_error(self):\n\n        if sys.version_info[:2] == (2, 6):\n            self.skipTest('requests library not available under python2.6')\n        self.set_module_state('present')\n        from ansible.modules.network.netscaler import netscaler_service\n\n        class MockException(Exception):\n            pass\n        client_mock = Mock()\n        attrs = {'login.side_effect': requests.exceptions.ConnectionError}\n        client_mock.configure_mock(**attrs)\n        m = Mock(return_value=client_mock)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            get_nitro_client=m,\n            nitro_exception=MockException,\n        ):\n            self.module = netscaler_service\n            result = self.failed()\n            self.assertTrue(result['msg'].startswith('Connection error'), msg='Connection error was not handled gracefully')\n\n    def test_graceful_login_error(self):\n        self.set_module_state('present')\n        from ansible.modules.network.netscaler import netscaler_service\n\n        if sys.version_info[:2] == (2, 6):\n            self.skipTest('requests library not available under python2.6')\n\n        class MockException(Exception):\n            pass\n        client_mock = Mock()\n        attrs = {'login.side_effect': requests.exceptions.SSLError}\n        client_mock.configure_mock(**attrs)\n        m = Mock(return_value=client_mock)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            get_nitro_client=m,\n            nitro_exception=MockException,\n        ):\n            self.module = netscaler_service\n            result = self.failed()\n            self.assertTrue(result['msg'].startswith('SSL Error'), msg='SSL Error was not handled gracefully')\n\n    def test_create_non_existing_service(self):\n        self.set_module_state('present')\n        from ansible.modules.network.netscaler import netscaler_service\n        service_proxy_mock = MagicMock()\n        attrs = {\n            'diff_object.return_value': {},\n        }\n        service_proxy_mock.configure_mock(**attrs)\n\n        m = MagicMock(return_value=service_proxy_mock)\n        service_exists_mock = Mock(side_effect=[False, True])\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            ConfigProxy=m,\n            service_exists=service_exists_mock,\n            do_state_change=Mock(return_value=Mock(errorcode=0)),\n        ):\n            self.module = netscaler_service\n            result = self.exited()\n            service_proxy_mock.assert_has_calls([call.add()])\n            self.assertTrue(result['changed'], msg='Change not recorded')\n\n    def test_update_service_when_service_differs(self):\n        self.set_module_state('present')\n        from ansible.modules.network.netscaler import netscaler_service\n        service_proxy_mock = MagicMock()\n        attrs = {\n            'diff_object.return_value': {},\n        }\n        service_proxy_mock.configure_mock(**attrs)\n\n        m = MagicMock(return_value=service_proxy_mock)\n        service_exists_mock = Mock(side_effect=[True, True])\n        service_identical_mock = Mock(side_effect=[False, True])\n        monitor_bindings_identical_mock = Mock(side_effect=[True, True])\n        all_identical_mock = Mock(side_effect=[False])\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            ConfigProxy=m,\n            service_exists=service_exists_mock,\n            service_identical=service_identical_mock,\n            monitor_bindings_identical=monitor_bindings_identical_mock,\n            all_identical=all_identical_mock,\n            do_state_change=Mock(return_value=Mock(errorcode=0)),\n        ):\n            self.module = netscaler_service\n            result = self.exited()\n            service_proxy_mock.assert_has_calls([call.update()])\n            self.assertTrue(result['changed'], msg='Change not recorded')\n\n    def test_update_service_when_monitor_bindings_differ(self):\n        self.set_module_state('present')\n        from ansible.modules.network.netscaler import netscaler_service\n        service_proxy_mock = MagicMock()\n        attrs = {\n            'diff_object.return_value': {},\n        }\n        service_proxy_mock.configure_mock(**attrs)\n\n        m = MagicMock(return_value=service_proxy_mock)\n        service_exists_mock = Mock(side_effect=[True, True])\n        service_identical_mock = Mock(side_effect=[True, True])\n        monitor_bindings_identical_mock = Mock(side_effect=[False, True])\n        all_identical_mock = Mock(side_effect=[False])\n        sync_monitor_bindings_mock = Mock()\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            ConfigProxy=m,\n            service_exists=service_exists_mock,\n            service_identical=service_identical_mock,\n            monitor_bindings_identical=monitor_bindings_identical_mock,\n            all_identical=all_identical_mock,\n            sync_monitor_bindings=sync_monitor_bindings_mock,\n            do_state_change=Mock(return_value=Mock(errorcode=0)),\n        ):\n            self.module = netscaler_service\n            result = self.exited()\n        # poor man's assert_called_once since python3.5 does not implement that mock method\n        self.assertEqual(len(sync_monitor_bindings_mock.mock_calls), 1, msg='sync monitor bindings not called once')\n        self.assertTrue(result['changed'], msg='Change not recorded')\n\n    def test_no_change_to_module_when_all_identical(self):\n        self.set_module_state('present')\n        from ansible.modules.network.netscaler import netscaler_service\n        service_proxy_mock = MagicMock()\n        attrs = {\n            'diff_object.return_value': {},\n        }\n        service_proxy_mock.configure_mock(**attrs)\n\n        m = MagicMock(return_value=service_proxy_mock)\n        service_exists_mock = Mock(side_effect=[True, True])\n        service_identical_mock = Mock(side_effect=[True, True])\n        monitor_bindings_identical_mock = Mock(side_effect=[True, True])\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            ConfigProxy=m,\n            service_exists=service_exists_mock,\n            service_identical=service_identical_mock,\n            monitor_bindings_identical=monitor_bindings_identical_mock,\n            do_state_change=Mock(return_value=Mock(errorcode=0)),\n        ):\n            self.module = netscaler_service\n            result = self.exited()\n            self.assertFalse(result['changed'], msg='Erroneous changed status update')\n\n    def test_absent_operation(self):\n        self.set_module_state('absent')\n        from ansible.modules.network.netscaler import netscaler_service\n        service_proxy_mock = MagicMock()\n        attrs = {\n            'diff_object.return_value': {},\n        }\n        service_proxy_mock.configure_mock(**attrs)\n\n        m = MagicMock(return_value=service_proxy_mock)\n        service_exists_mock = Mock(side_effect=[True, False])\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            ConfigProxy=m,\n            service_exists=service_exists_mock,\n\n        ):\n            self.module = netscaler_service\n            result = self.exited()\n            service_proxy_mock.assert_has_calls([call.delete()])\n            self.assertTrue(result['changed'], msg='Changed status not set correctly')\n\n    def test_absent_operation_no_change(self):\n        self.set_module_state('absent')\n        from ansible.modules.network.netscaler import netscaler_service\n        service_proxy_mock = MagicMock()\n        attrs = {\n            'diff_object.return_value': {},\n        }\n        service_proxy_mock.configure_mock(**attrs)\n\n        m = MagicMock(return_value=service_proxy_mock)\n        service_exists_mock = Mock(side_effect=[False, False])\n\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            ConfigProxy=m,\n            service_exists=service_exists_mock,\n\n        ):\n            self.module = netscaler_service\n            result = self.exited()\n            service_proxy_mock.assert_not_called()\n            self.assertFalse(result['changed'], msg='Changed status not set correctly')\n\n    def test_graceful_nitro_exception_operation_present(self):\n        self.set_module_state('present')\n        from ansible.modules.network.netscaler import netscaler_service\n\n        class MockException(Exception):\n            def __init__(self, *args, **kwargs):\n                self.errorcode = 0\n                self.message = ''\n\n        m = Mock(side_effect=MockException)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            service_exists=m,\n            nitro_exception=MockException\n        ):\n            self.module = netscaler_service\n            result = self.failed()\n            self.assertTrue(\n                result['msg'].startswith('nitro exception'),\n                msg='Nitro exception not caught on operation present'\n            )\n\n    def test_graceful_nitro_exception_operation_absent(self):\n        self.set_module_state('absent')\n        from ansible.modules.network.netscaler import netscaler_service\n\n        class MockException(Exception):\n            def __init__(self, *args, **kwargs):\n                self.errorcode = 0\n                self.message = ''\n\n        m = Mock(side_effect=MockException)\n        with patch.multiple(\n            'ansible.modules.network.netscaler.netscaler_service',\n            service_exists=m,\n            nitro_exception=MockException\n        ):\n            self.module = netscaler_service\n            result = self.failed()\n            self.assertTrue(\n                result['msg'].startswith('nitro exception'),\n                msg='Nitro exception not caught on operation absent'\n            )\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_netscaler_service.py", "id": "724473371d6ed366db133a3d2daa8e06", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/netscaler/test_netscaler_service.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}