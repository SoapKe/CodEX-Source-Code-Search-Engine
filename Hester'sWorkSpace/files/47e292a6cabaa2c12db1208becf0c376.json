{"author": "python", "code": "import hashlib\nimport os\nimport sys\n\ndef main():\n    filenames, hashes, sizes = [], [], []\n\n    for file in sys.argv[1:]:\n        if not os.path.isfile(file):\n            continue\n\n        with open(file, 'rb') as f:\n            data = f.read()\n            md5 = hashlib.md5()\n            md5.update(data)\n            filenames.append(os.path.split(file)[1])\n            hashes.append(md5.hexdigest())\n            sizes.append(str(len(data)))\n\n    print('{:40s}  {:<32s}  {:<9s}'.format('File', 'MD5', 'Size'))\n    for f, h, s in zip(filenames, hashes, sizes):\n        print('{:40s}  {:>32s}  {:>9s}'.format(f, h, s))\n\n\n\nif __name__ == \"__main__\":\n    sys.exit(int(main() or 0))\n", "comments": "", "content": "import hashlib\nimport os\nimport sys\n\ndef main():\n    filenames, hashes, sizes = [], [], []\n\n    for file in sys.argv[1:]:\n        if not os.path.isfile(file):\n            continue\n\n        with open(file, 'rb') as f:\n            data = f.read()\n            md5 = hashlib.md5()\n            md5.update(data)\n            filenames.append(os.path.split(file)[1])\n            hashes.append(md5.hexdigest())\n            sizes.append(str(len(data)))\n\n    print('{:40s}  {:<32s}  {:<9s}'.format('File', 'MD5', 'Size'))\n    for f, h, s in zip(filenames, hashes, sizes):\n        print('{:40s}  {:>32s}  {:>9s}'.format(f, h, s))\n\n\n\nif __name__ == \"__main__\":\n    sys.exit(int(main() or 0))\n", "description": "The Python programming language", "file_name": "generate_md5.py", "id": "47e292a6cabaa2c12db1208becf0c376", "language": "Python", "project_name": "cpython", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/python-cpython/python-cpython-fe2bbb1/Tools/msi/generate_md5.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:51:39Z", "url": "https://github.com/python/cpython", "wiki": false}