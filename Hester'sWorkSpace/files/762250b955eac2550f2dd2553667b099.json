{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport mock\n\nfrom exam import fixture\nfrom django.http import HttpRequest\n\nfrom sentry import options\nfrom sentry.models import Project\nfrom sentry.testutils import TestCase\nfrom sentry.utils.http import (\n    is_same_domain,\n    is_valid_origin,\n    get_origins,\n    absolute_uri,\n    origin_from_request,\n    heuristic_decode,\n)\nfrom sentry.utils.data_filters import (\n    is_valid_ip,\n    is_valid_release,\n    is_valid_error_message,\n    FilterTypes,\n)\n\n\nclass AbsoluteUriTest(TestCase):\n    def test_without_path(self):\n        assert absolute_uri() == options.get('system.url-prefix')\n\n    def test_with_path(self):\n        assert absolute_uri('/foo/bar') == '%s/foo/bar' % (options.get('system.url-prefix'), )\n\n\nclass SameDomainTestCase(TestCase):\n    def test_is_same_domain(self):\n        url1 = 'http://example.com/foo/bar'\n        url2 = 'http://example.com/biz/baz'\n\n        self.assertTrue(is_same_domain(url1, url2))\n\n    def test_is_same_domain_diff_scheme(self):\n        url1 = 'https://example.com/foo/bar'\n        url2 = 'http://example.com/biz/baz'\n\n        self.assertTrue(is_same_domain(url1, url2))\n\n    def test_is_same_domain_diff_port(self):\n        url1 = 'http://example.com:80/foo/bar'\n        url2 = 'http://example.com:13/biz/baz'\n\n        self.assertFalse(is_same_domain(url1, url2))\n\n\nclass GetOriginsTestCase(TestCase):\n    def test_project_default(self):\n        project = Project.objects.get()\n\n        with self.settings(SENTRY_ALLOW_ORIGIN=None):\n            result = get_origins(project)\n            self.assertEquals(result, frozenset(['*']))\n\n    def test_project(self):\n        project = Project.objects.get()\n        project.update_option('sentry:origins', [u'http://foo.example'])\n\n        with self.settings(SENTRY_ALLOW_ORIGIN=None):\n            result = get_origins(project)\n            self.assertEquals(result, frozenset(['http://foo.example']))\n\n    def test_project_and_setting(self):\n        project = Project.objects.get()\n        project.update_option('sentry:origins', [u'http://foo.example'])\n\n        with self.settings(SENTRY_ALLOW_ORIGIN='http://example.com'):\n            result = get_origins(project)\n            self.assertEquals(result, frozenset(['http://foo.example', 'http://example.com']))\n\n    def test_setting_empty(self):\n        with self.settings(SENTRY_ALLOW_ORIGIN=None):\n            result = get_origins(None)\n            self.assertEquals(result, frozenset([]))\n\n    def test_setting_all(self):\n        with self.settings(SENTRY_ALLOW_ORIGIN='*'):\n            result = get_origins(None)\n            self.assertEquals(result, frozenset(['*']))\n\n    def test_setting_uri(self):\n        with self.settings(SENTRY_ALLOW_ORIGIN='http://example.com'):\n            result = get_origins(None)\n            self.assertEquals(result, frozenset(['http://example.com']))\n\n    def test_empty_origin_values(self):\n        project = Project.objects.get()\n        project.update_option('sentry:origins', [u'*', None, ''])\n\n        with self.settings(SENTRY_ALLOW_ORIGIN=None):\n            result = get_origins(project)\n            self.assertEquals(result, frozenset([u'*']))\n\n\nclass IsValidOriginTestCase(TestCase):\n    @fixture\n    def project(self):\n        return mock.Mock()\n\n    def isValidOrigin(self, origin, inputs):\n        with mock.patch('sentry.utils.http.get_origins') as get_origins:\n            get_origins.return_value = inputs\n            result = is_valid_origin(origin, self.project)\n            get_origins.assert_called_once_with(self.project)\n        return result\n\n    def test_global_wildcard_matches_domain(self):\n        result = self.isValidOrigin('http://example.com', ['*'])\n        self.assertEquals(result, True)\n\n    def test_domain_wildcard_matches_domain(self):\n        result = self.isValidOrigin('http://example.com', ['*.example.com'])\n        self.assertEquals(result, True)\n\n    def test_domain_wildcard_matches_domain_with_port(self):\n        result = self.isValidOrigin('http://example.com:80', ['*.example.com'])\n        self.assertEquals(result, True)\n\n    def test_domain_wildcard_matches_subdomain(self):\n        result = self.isValidOrigin('http://foo.example.com', ['*.example.com'])\n        self.assertEquals(result, True)\n\n    def test_domain_wildcard_matches_subdomain_with_port(self):\n        result = self.isValidOrigin('http://foo.example.com:80', ['*.example.com'])\n        self.assertEquals(result, True)\n\n    def test_domain_wildcard_does_not_match_others(self):\n        result = self.isValidOrigin('http://foo.com', ['*.example.com'])\n        self.assertEquals(result, False)\n\n    def test_domain_wildcard_matches_domain_with_path(self):\n        result = self.isValidOrigin('http://foo.example.com/foo/bar', ['*.example.com'])\n        self.assertEquals(result, True)\n\n    def test_base_domain_matches_domain(self):\n        result = self.isValidOrigin('http://example.com', ['example.com'])\n        self.assertEquals(result, True)\n\n    def test_base_domain_matches_domain_with_path(self):\n        result = self.isValidOrigin('http://example.com/foo/bar', ['example.com'])\n        self.assertEquals(result, True)\n\n    def test_base_domain_matches_domain_with_port(self):\n        result = self.isValidOrigin('http://example.com:80', ['example.com'])\n        self.assertEquals(result, True)\n\n    def test_base_domain_matches_domain_with_explicit_port(self):\n        result = self.isValidOrigin('http://example.com:80', ['example.com:80'])\n        assert result is True\n\n    def test_base_domain_does_not_match_domain_with_invalid_port(self):\n        result = self.isValidOrigin('http://example.com:80', ['example.com:443'])\n        assert result is False\n\n    def test_base_domain_does_not_match_subdomain(self):\n        result = self.isValidOrigin('http://example.com', ['foo.example.com'])\n        self.assertEquals(result, False)\n\n    def test_full_uri_match(self):\n        result = self.isValidOrigin('http://example.com', ['http://example.com'])\n        self.assertEquals(result, True)\n\n    def test_full_uri_match_requires_scheme(self):\n        result = self.isValidOrigin('https://example.com', ['http://example.com'])\n        self.assertEquals(result, False)\n\n    def test_full_uri_match_does_not_require_port(self):\n        result = self.isValidOrigin('http://example.com:80', ['http://example.com'])\n        self.assertEquals(result, True)\n\n    def test_partial_uri_match(self):\n        result = self.isValidOrigin('http://example.com/foo/bar', ['http://example.com'])\n        self.assertEquals(result, True)\n\n    def test_null_valid_with_global(self):\n        result = self.isValidOrigin('null', ['*'])\n        self.assertEquals(result, True)\n\n    def test_null_invalid_graceful_with_domains(self):\n        result = self.isValidOrigin('null', ['http://example.com'])\n        self.assertEquals(result, False)\n\n    def test_custom_protocol_with_location(self):\n        result = self.isValidOrigin('sp://custom-thing/foo/bar', ['sp://custom-thing'])\n        assert result is True\n\n        result = self.isValidOrigin('sp://custom-thing-two/foo/bar', ['sp://custom-thing'])\n        assert result is False\n\n    def test_custom_protocol_without_location(self):\n        result = self.isValidOrigin('sp://custom-thing/foo/bar', ['sp://*'])\n        assert result is True\n\n        result = self.isValidOrigin('dp://custom-thing/foo/bar', ['sp://'])\n        assert result is False\n\n    def test_custom_protocol_with_domainish_match(self):\n        result = self.isValidOrigin('sp://custom-thing.foobar/foo/bar', ['sp://*.foobar'])\n        assert result is True\n\n        result = self.isValidOrigin('sp://custom-thing.bizbaz/foo/bar', ['sp://*.foobar'])\n        assert result is False\n\n    def test_unicode(self):\n        result = self.isValidOrigin(u'http://l\\xf8calhost', [u'*.l\\xf8calhost'])\n        assert result is True\n\n    def test_punycode(self):\n        result = self.isValidOrigin('http://xn--lcalhost-54a', [u'*.l\\xf8calhost'])\n        assert result is True\n        result = self.isValidOrigin('http://xn--lcalhost-54a', [u'*.xn--lcalhost-54a'])\n        assert result is True\n        result = self.isValidOrigin(u'http://l\\xf8calhost', [u'*.xn--lcalhost-54a'])\n        assert result is True\n        result = self.isValidOrigin('http://l\\xc3\\xb8calhost', [u'*.xn--lcalhost-54a'])\n        assert result is True\n        result = self.isValidOrigin('http://xn--lcalhost-54a', [u'l\\xf8calhost'])\n        assert result is True\n        result = self.isValidOrigin('http://xn--lcalhost-54a:80', [u'l\\xf8calhost:80'])\n        assert result is True\n\n    def test_unparseable_uri(self):\n        result = self.isValidOrigin('http://example.com', ['.'])\n        assert result is False\n\n    def test_wildcard_hostname_with_port(self):\n        result = self.isValidOrigin('http://example.com:1234', ['*:1234'])\n        assert result is True\n\n    def test_without_hostname(self):\n        result = self.isValidOrigin('foo://', ['foo://*'])\n        assert result is True\n        result = self.isValidOrigin('foo://', ['foo://'])\n        assert result is True\n        result = self.isValidOrigin('foo://', ['example.com'])\n        assert result is False\n        result = self.isValidOrigin('foo://a', ['foo://'])\n        assert result is False\n        result = self.isValidOrigin('foo://a', ['foo://*'])\n        assert result is True\n\n\nclass IsValidIPTestCase(TestCase):\n    def is_valid_ip(self, ip, inputs):\n        self.project.update_option('sentry:blacklisted_ips', inputs)\n        return is_valid_ip(self.project, ip)\n\n    def test_not_in_blacklist(self):\n        assert self.is_valid_ip('127.0.0.1', [])\n        assert self.is_valid_ip('127.0.0.1', ['0.0.0.0', '192.168.1.1', '10.0.0.0/8'])\n\n    def test_match_blacklist(self):\n        assert not self.is_valid_ip('127.0.0.1', ['127.0.0.1'])\n        assert not self.is_valid_ip('127.0.0.1', ['0.0.0.0', '127.0.0.1', '192.168.1.1'])\n\n    def test_match_blacklist_range(self):\n        assert not self.is_valid_ip('127.0.0.1', ['127.0.0.0/8'])\n        assert not self.is_valid_ip('127.0.0.1', ['0.0.0.0', '127.0.0.0/8', '192.168.1.0/8'])\n\n    def test_garbage_input(self):\n        assert self.is_valid_ip('127.0.0.1', ['lol/bar'])\n\n\nclass IsValidReleaseTestCase(TestCase):\n    def is_valid_release(self, value, inputs):\n        self.project.update_option('sentry:{}'.format(FilterTypes.RELEASES), inputs)\n        return is_valid_release(self.project, value)\n\n    def test_release_not_in_list(self):\n        assert self.is_valid_release('1.2.3', None)\n        assert self.is_valid_release('1.2.3', [])\n        assert self.is_valid_release('1.2.3', ['1.1.1', '1.1.2', '1.2.1'])\n\n    def test_release_match_list(self):\n        assert not self.is_valid_release('1.2.3', ['1.2.3'])\n        assert not self.is_valid_release('1.2.3', ['1.2.*', '1.3.0', '1.3.1'])\n        assert not self.is_valid_release('1.2.3', ['1.3.0', '1.*', '1.3.1'])\n\n    def test_garbage_data(self):\n        assert self.is_valid_release(1, ['1.2.3'])\n\n\nclass IsValidErrorMessageTestCase(TestCase):\n    def is_valid_error_message(self, value, inputs):\n        self.project.update_option('sentry:{}'.format(FilterTypes.ERROR_MESSAGES), inputs)\n        return is_valid_error_message(self.project, value)\n\n    def test_error_class_not_in_list(self):\n        assert self.is_valid_error_message(\n            'ZeroDivisionError: integer division or modulo by zero', None\n        )\n        assert self.is_valid_error_message(\n            'ZeroDivisionError: integer division or modulo by zero', []\n        )\n        assert self.is_valid_error_message(\n            'ZeroDivisionError: integer division or modulo by zero',\n            ['TypeError*', '*: cannot import name*']\n        )\n\n    def test_error_class_match_list(self):\n        assert not self.is_valid_error_message(\n            'ImportError: cannot import name is_valid', ['*: cannot import name*']\n        )\n        assert not self.is_valid_error_message(\n            'ZeroDivisionError: divided by 0', ['ImportError*', 'TypeError*', '*: divided by 0']\n        )\n\n    def test_garbage_data(self):\n        assert self.is_valid_error_message(1, ['ImportError*'])\n        assert self.is_valid_error_message(None, ['ImportError*'])\n        assert self.is_valid_error_message({}, ['ImportError*'])\n\n\nclass OriginFromRequestTestCase(TestCase):\n    def test_nothing(self):\n        request = HttpRequest()\n        assert origin_from_request(request) is None\n\n    def test_origin(self):\n        request = HttpRequest()\n        request.META['HTTP_ORIGIN'] = 'http://example.com'\n        request.META['HTTP_REFERER'] = 'nope'\n        assert origin_from_request(request) == 'http://example.com'\n\n    def test_referer(self):\n        request = HttpRequest()\n        request.META['HTTP_REFERER'] = 'http://example.com/foo/bar'\n        assert origin_from_request(request) == 'http://example.com'\n\n    def test_null_origin(self):\n        request = HttpRequest()\n        request.META['HTTP_ORIGIN'] = 'null'\n        assert origin_from_request(request) is None\n\n        request.META['HTTP_REFERER'] = 'http://example.com'\n        assert origin_from_request(request) == 'http://example.com'\n\n\nclass HeuristicDecodeTestCase(TestCase):\n    json_body = '{\"key\": \"value\", \"key2\": \"value2\"}'\n    url_body = 'key=value&key2=value2'\n\n    def test_json(self):\n        data, content_type = heuristic_decode(self.json_body, 'application/json')\n        assert data == {'key': 'value', 'key2': 'value2'}\n        assert content_type == 'application/json'\n\n    def test_url_encoded(self):\n        data, content_type = heuristic_decode(self.url_body, 'application/x-www-form-urlencoded')\n        assert data == {'key': ['value'], 'key2': ['value2']}\n        assert content_type == 'application/x-www-form-urlencoded'\n\n    def test_possible_type_mismatch(self):\n        data, content_type = heuristic_decode(self.json_body, 'application/x-www-form-urlencoded')\n        assert data == {'key': 'value', 'key2': 'value2'}\n        assert content_type == 'application/json'\n\n        data, content_type = heuristic_decode(self.url_body, 'application/json')\n        assert data == {'key': ['value'], 'key2': ['value2']}\n        assert content_type == 'application/x-www-form-urlencoded'\n\n    def test_no_possible_type(self):\n        data, content_type = heuristic_decode(self.json_body)\n        assert data == {'key': 'value', 'key2': 'value2'}\n        assert content_type == 'application/json'\n\n    def test_unable_to_decode(self):\n        data, content_type = heuristic_decode('string body', 'text/plain')\n        assert data == 'string body'\n        assert content_type == 'text/plain'\n", "comments": "      coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport mock\n\nfrom exam import fixture\nfrom django.http import HttpRequest\n\nfrom sentry import options\nfrom sentry.models import Project\nfrom sentry.testutils import TestCase\nfrom sentry.utils.http import (\n    is_same_domain,\n    is_valid_origin,\n    get_origins,\n    absolute_uri,\n    origin_from_request,\n    heuristic_decode,\n)\nfrom sentry.utils.data_filters import (\n    is_valid_ip,\n    is_valid_release,\n    is_valid_error_message,\n    FilterTypes,\n)\n\n\nclass AbsoluteUriTest(TestCase):\n    def test_without_path(self):\n        assert absolute_uri() == options.get('system.url-prefix')\n\n    def test_with_path(self):\n        assert absolute_uri('/foo/bar') == '%s/foo/bar' % (options.get('system.url-prefix'), )\n\n\nclass SameDomainTestCase(TestCase):\n    def test_is_same_domain(self):\n        url1 = 'http://example.com/foo/bar'\n        url2 = 'http://example.com/biz/baz'\n\n        self.assertTrue(is_same_domain(url1, url2))\n\n    def test_is_same_domain_diff_scheme(self):\n        url1 = 'https://example.com/foo/bar'\n        url2 = 'http://example.com/biz/baz'\n\n        self.assertTrue(is_same_domain(url1, url2))\n\n    def test_is_same_domain_diff_port(self):\n        url1 = 'http://example.com:80/foo/bar'\n        url2 = 'http://example.com:13/biz/baz'\n\n        self.assertFalse(is_same_domain(url1, url2))\n\n\nclass GetOriginsTestCase(TestCase):\n    def test_project_default(self):\n        project = Project.objects.get()\n\n        with self.settings(SENTRY_ALLOW_ORIGIN=None):\n            result = get_origins(project)\n            self.assertEquals(result, frozenset(['*']))\n\n    def test_project(self):\n        project = Project.objects.get()\n        project.update_option('sentry:origins', [u'http://foo.example'])\n\n        with self.settings(SENTRY_ALLOW_ORIGIN=None):\n            result = get_origins(project)\n            self.assertEquals(result, frozenset(['http://foo.example']))\n\n    def test_project_and_setting(self):\n        project = Project.objects.get()\n        project.update_option('sentry:origins', [u'http://foo.example'])\n\n        with self.settings(SENTRY_ALLOW_ORIGIN='http://example.com'):\n            result = get_origins(project)\n            self.assertEquals(result, frozenset(['http://foo.example', 'http://example.com']))\n\n    def test_setting_empty(self):\n        with self.settings(SENTRY_ALLOW_ORIGIN=None):\n            result = get_origins(None)\n            self.assertEquals(result, frozenset([]))\n\n    def test_setting_all(self):\n        with self.settings(SENTRY_ALLOW_ORIGIN='*'):\n            result = get_origins(None)\n            self.assertEquals(result, frozenset(['*']))\n\n    def test_setting_uri(self):\n        with self.settings(SENTRY_ALLOW_ORIGIN='http://example.com'):\n            result = get_origins(None)\n            self.assertEquals(result, frozenset(['http://example.com']))\n\n    def test_empty_origin_values(self):\n        project = Project.objects.get()\n        project.update_option('sentry:origins', [u'*', None, ''])\n\n        with self.settings(SENTRY_ALLOW_ORIGIN=None):\n            result = get_origins(project)\n            self.assertEquals(result, frozenset([u'*']))\n\n\nclass IsValidOriginTestCase(TestCase):\n    @fixture\n    def project(self):\n        return mock.Mock()\n\n    def isValidOrigin(self, origin, inputs):\n        with mock.patch('sentry.utils.http.get_origins') as get_origins:\n            get_origins.return_value = inputs\n            result = is_valid_origin(origin, self.project)\n            get_origins.assert_called_once_with(self.project)\n        return result\n\n    def test_global_wildcard_matches_domain(self):\n        result = self.isValidOrigin('http://example.com', ['*'])\n        self.assertEquals(result, True)\n\n    def test_domain_wildcard_matches_domain(self):\n        result = self.isValidOrigin('http://example.com', ['*.example.com'])\n        self.assertEquals(result, True)\n\n    def test_domain_wildcard_matches_domain_with_port(self):\n        result = self.isValidOrigin('http://example.com:80', ['*.example.com'])\n        self.assertEquals(result, True)\n\n    def test_domain_wildcard_matches_subdomain(self):\n        result = self.isValidOrigin('http://foo.example.com', ['*.example.com'])\n        self.assertEquals(result, True)\n\n    def test_domain_wildcard_matches_subdomain_with_port(self):\n        result = self.isValidOrigin('http://foo.example.com:80', ['*.example.com'])\n        self.assertEquals(result, True)\n\n    def test_domain_wildcard_does_not_match_others(self):\n        result = self.isValidOrigin('http://foo.com', ['*.example.com'])\n        self.assertEquals(result, False)\n\n    def test_domain_wildcard_matches_domain_with_path(self):\n        result = self.isValidOrigin('http://foo.example.com/foo/bar', ['*.example.com'])\n        self.assertEquals(result, True)\n\n    def test_base_domain_matches_domain(self):\n        result = self.isValidOrigin('http://example.com', ['example.com'])\n        self.assertEquals(result, True)\n\n    def test_base_domain_matches_domain_with_path(self):\n        result = self.isValidOrigin('http://example.com/foo/bar', ['example.com'])\n        self.assertEquals(result, True)\n\n    def test_base_domain_matches_domain_with_port(self):\n        result = self.isValidOrigin('http://example.com:80', ['example.com'])\n        self.assertEquals(result, True)\n\n    def test_base_domain_matches_domain_with_explicit_port(self):\n        result = self.isValidOrigin('http://example.com:80', ['example.com:80'])\n        assert result is True\n\n    def test_base_domain_does_not_match_domain_with_invalid_port(self):\n        result = self.isValidOrigin('http://example.com:80', ['example.com:443'])\n        assert result is False\n\n    def test_base_domain_does_not_match_subdomain(self):\n        result = self.isValidOrigin('http://example.com', ['foo.example.com'])\n        self.assertEquals(result, False)\n\n    def test_full_uri_match(self):\n        result = self.isValidOrigin('http://example.com', ['http://example.com'])\n        self.assertEquals(result, True)\n\n    def test_full_uri_match_requires_scheme(self):\n        result = self.isValidOrigin('https://example.com', ['http://example.com'])\n        self.assertEquals(result, False)\n\n    def test_full_uri_match_does_not_require_port(self):\n        result = self.isValidOrigin('http://example.com:80', ['http://example.com'])\n        self.assertEquals(result, True)\n\n    def test_partial_uri_match(self):\n        result = self.isValidOrigin('http://example.com/foo/bar', ['http://example.com'])\n        self.assertEquals(result, True)\n\n    def test_null_valid_with_global(self):\n        result = self.isValidOrigin('null', ['*'])\n        self.assertEquals(result, True)\n\n    def test_null_invalid_graceful_with_domains(self):\n        result = self.isValidOrigin('null', ['http://example.com'])\n        self.assertEquals(result, False)\n\n    def test_custom_protocol_with_location(self):\n        result = self.isValidOrigin('sp://custom-thing/foo/bar', ['sp://custom-thing'])\n        assert result is True\n\n        result = self.isValidOrigin('sp://custom-thing-two/foo/bar', ['sp://custom-thing'])\n        assert result is False\n\n    def test_custom_protocol_without_location(self):\n        result = self.isValidOrigin('sp://custom-thing/foo/bar', ['sp://*'])\n        assert result is True\n\n        result = self.isValidOrigin('dp://custom-thing/foo/bar', ['sp://'])\n        assert result is False\n\n    def test_custom_protocol_with_domainish_match(self):\n        result = self.isValidOrigin('sp://custom-thing.foobar/foo/bar', ['sp://*.foobar'])\n        assert result is True\n\n        result = self.isValidOrigin('sp://custom-thing.bizbaz/foo/bar', ['sp://*.foobar'])\n        assert result is False\n\n    def test_unicode(self):\n        result = self.isValidOrigin(u'http://l\\xf8calhost', [u'*.l\\xf8calhost'])\n        assert result is True\n\n    def test_punycode(self):\n        result = self.isValidOrigin('http://xn--lcalhost-54a', [u'*.l\\xf8calhost'])\n        assert result is True\n        result = self.isValidOrigin('http://xn--lcalhost-54a', [u'*.xn--lcalhost-54a'])\n        assert result is True\n        result = self.isValidOrigin(u'http://l\\xf8calhost', [u'*.xn--lcalhost-54a'])\n        assert result is True\n        result = self.isValidOrigin('http://l\\xc3\\xb8calhost', [u'*.xn--lcalhost-54a'])\n        assert result is True\n        result = self.isValidOrigin('http://xn--lcalhost-54a', [u'l\\xf8calhost'])\n        assert result is True\n        result = self.isValidOrigin('http://xn--lcalhost-54a:80', [u'l\\xf8calhost:80'])\n        assert result is True\n\n    def test_unparseable_uri(self):\n        result = self.isValidOrigin('http://example.com', ['.'])\n        assert result is False\n\n    def test_wildcard_hostname_with_port(self):\n        result = self.isValidOrigin('http://example.com:1234', ['*:1234'])\n        assert result is True\n\n    def test_without_hostname(self):\n        result = self.isValidOrigin('foo://', ['foo://*'])\n        assert result is True\n        result = self.isValidOrigin('foo://', ['foo://'])\n        assert result is True\n        result = self.isValidOrigin('foo://', ['example.com'])\n        assert result is False\n        result = self.isValidOrigin('foo://a', ['foo://'])\n        assert result is False\n        result = self.isValidOrigin('foo://a', ['foo://*'])\n        assert result is True\n\n\nclass IsValidIPTestCase(TestCase):\n    def is_valid_ip(self, ip, inputs):\n        self.project.update_option('sentry:blacklisted_ips', inputs)\n        return is_valid_ip(self.project, ip)\n\n    def test_not_in_blacklist(self):\n        assert self.is_valid_ip('127.0.0.1', [])\n        assert self.is_valid_ip('127.0.0.1', ['0.0.0.0', '192.168.1.1', '10.0.0.0/8'])\n\n    def test_match_blacklist(self):\n        assert not self.is_valid_ip('127.0.0.1', ['127.0.0.1'])\n        assert not self.is_valid_ip('127.0.0.1', ['0.0.0.0', '127.0.0.1', '192.168.1.1'])\n\n    def test_match_blacklist_range(self):\n        assert not self.is_valid_ip('127.0.0.1', ['127.0.0.0/8'])\n        assert not self.is_valid_ip('127.0.0.1', ['0.0.0.0', '127.0.0.0/8', '192.168.1.0/8'])\n\n    def test_garbage_input(self):\n        assert self.is_valid_ip('127.0.0.1', ['lol/bar'])\n\n\nclass IsValidReleaseTestCase(TestCase):\n    def is_valid_release(self, value, inputs):\n        self.project.update_option('sentry:{}'.format(FilterTypes.RELEASES), inputs)\n        return is_valid_release(self.project, value)\n\n    def test_release_not_in_list(self):\n        assert self.is_valid_release('1.2.3', None)\n        assert self.is_valid_release('1.2.3', [])\n        assert self.is_valid_release('1.2.3', ['1.1.1', '1.1.2', '1.2.1'])\n\n    def test_release_match_list(self):\n        assert not self.is_valid_release('1.2.3', ['1.2.3'])\n        assert not self.is_valid_release('1.2.3', ['1.2.*', '1.3.0', '1.3.1'])\n        assert not self.is_valid_release('1.2.3', ['1.3.0', '1.*', '1.3.1'])\n\n    def test_garbage_data(self):\n        assert self.is_valid_release(1, ['1.2.3'])\n\n\nclass IsValidErrorMessageTestCase(TestCase):\n    def is_valid_error_message(self, value, inputs):\n        self.project.update_option('sentry:{}'.format(FilterTypes.ERROR_MESSAGES), inputs)\n        return is_valid_error_message(self.project, value)\n\n    def test_error_class_not_in_list(self):\n        assert self.is_valid_error_message(\n            'ZeroDivisionError: integer division or modulo by zero', None\n        )\n        assert self.is_valid_error_message(\n            'ZeroDivisionError: integer division or modulo by zero', []\n        )\n        assert self.is_valid_error_message(\n            'ZeroDivisionError: integer division or modulo by zero',\n            ['TypeError*', '*: cannot import name*']\n        )\n\n    def test_error_class_match_list(self):\n        assert not self.is_valid_error_message(\n            'ImportError: cannot import name is_valid', ['*: cannot import name*']\n        )\n        assert not self.is_valid_error_message(\n            'ZeroDivisionError: divided by 0', ['ImportError*', 'TypeError*', '*: divided by 0']\n        )\n\n    def test_garbage_data(self):\n        assert self.is_valid_error_message(1, ['ImportError*'])\n        assert self.is_valid_error_message(None, ['ImportError*'])\n        assert self.is_valid_error_message({}, ['ImportError*'])\n\n\nclass OriginFromRequestTestCase(TestCase):\n    def test_nothing(self):\n        request = HttpRequest()\n        assert origin_from_request(request) is None\n\n    def test_origin(self):\n        request = HttpRequest()\n        request.META['HTTP_ORIGIN'] = 'http://example.com'\n        request.META['HTTP_REFERER'] = 'nope'\n        assert origin_from_request(request) == 'http://example.com'\n\n    def test_referer(self):\n        request = HttpRequest()\n        request.META['HTTP_REFERER'] = 'http://example.com/foo/bar'\n        assert origin_from_request(request) == 'http://example.com'\n\n    def test_null_origin(self):\n        request = HttpRequest()\n        request.META['HTTP_ORIGIN'] = 'null'\n        assert origin_from_request(request) is None\n\n        request.META['HTTP_REFERER'] = 'http://example.com'\n        assert origin_from_request(request) == 'http://example.com'\n\n\nclass HeuristicDecodeTestCase(TestCase):\n    json_body = '{\"key\": \"value\", \"key2\": \"value2\"}'\n    url_body = 'key=value&key2=value2'\n\n    def test_json(self):\n        data, content_type = heuristic_decode(self.json_body, 'application/json')\n        assert data == {'key': 'value', 'key2': 'value2'}\n        assert content_type == 'application/json'\n\n    def test_url_encoded(self):\n        data, content_type = heuristic_decode(self.url_body, 'application/x-www-form-urlencoded')\n        assert data == {'key': ['value'], 'key2': ['value2']}\n        assert content_type == 'application/x-www-form-urlencoded'\n\n    def test_possible_type_mismatch(self):\n        data, content_type = heuristic_decode(self.json_body, 'application/x-www-form-urlencoded')\n        assert data == {'key': 'value', 'key2': 'value2'}\n        assert content_type == 'application/json'\n\n        data, content_type = heuristic_decode(self.url_body, 'application/json')\n        assert data == {'key': ['value'], 'key2': ['value2']}\n        assert content_type == 'application/x-www-form-urlencoded'\n\n    def test_no_possible_type(self):\n        data, content_type = heuristic_decode(self.json_body)\n        assert data == {'key': 'value', 'key2': 'value2'}\n        assert content_type == 'application/json'\n\n    def test_unable_to_decode(self):\n        data, content_type = heuristic_decode('string body', 'text/plain')\n        assert data == 'string body'\n        assert content_type == 'text/plain'\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "tests.py", "id": "762250b955eac2550f2dd2553667b099", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/http/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}