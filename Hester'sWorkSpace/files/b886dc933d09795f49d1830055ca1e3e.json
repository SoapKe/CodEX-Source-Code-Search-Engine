{"author": "ansible", "code": "\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rax_dns\nshort_description: Manage domains on Rackspace Cloud DNS\ndescription:\n     - Manage domains on Rackspace Cloud DNS\nversion_added: 1.5\noptions:\n  comment:\n    description:\n      - Brief description of the domain. Maximum length of 160 characters\n  email:\n    description:\n      - Email address of the domain administrator\n  name:\n    description:\n      - Domain name to create\n  state:\n    description:\n      - Indicate desired state of the resource\n    choices:\n      - present\n      - absent\n    default: present\n  ttl:\n    description:\n      - Time to live of domain in seconds\n    default: 3600\nnotes:\n  - \"It is recommended that plays utilizing this module be run with\n    C(serial: 1) to avoid exceeding the API request limit imposed by\n    the Rackspace CloudDNS API\"\nauthor: \"Matt Martz (@sivel)\"\nextends_documentation_fragment:\n  - rackspace\n  - rackspace.openstack\n'''\n\nEXAMPLES = '''\n- name: Create domain\n  hosts: all\n  gather_facts: False\n  tasks:\n    - name: Domain create request\n      local_action:\n        module: rax_dns\n        credentials: ~/.raxpub\n        name: example.org\n        email: admin@example.org\n      register: rax_dns\n'''\n\ntry:\n    import pyrax\n    HAS_PYRAX = True\nexcept ImportError:\n    HAS_PYRAX = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.rax import (rax_argument_spec,\n                                      rax_required_together,\n                                      rax_to_dict,\n                                      setup_rax_module,\n                                      )\n\n\ndef rax_dns(module, comment, email, name, state, ttl):\n    changed = False\n\n    dns = pyrax.cloud_dns\n    if not dns:\n        module.fail_json(msg='Failed to instantiate client. This '\n                             'typically indicates an invalid region or an '\n                             'incorrectly capitalized region name.')\n\n    if state == 'present':\n        if not email:\n            module.fail_json(msg='An \"email\" attribute is required for '\n                                 'creating a domain')\n\n        try:\n            domain = dns.find(name=name)\n        except pyrax.exceptions.NoUniqueMatch as e:\n            module.fail_json(msg='%s' % e.message)\n        except pyrax.exceptions.NotFound:\n            try:\n                domain = dns.create(name=name, emailAddress=email, ttl=ttl,\n                                    comment=comment)\n                changed = True\n            except Exception as e:\n                module.fail_json(msg='%s' % e.message)\n\n        update = {}\n        if comment != getattr(domain, 'comment', None):\n            update['comment'] = comment\n        if ttl != getattr(domain, 'ttl', None):\n            update['ttl'] = ttl\n        if email != getattr(domain, 'emailAddress', None):\n            update['emailAddress'] = email\n\n        if update:\n            try:\n                domain.update(**update)\n                changed = True\n                domain.get()\n            except Exception as e:\n                module.fail_json(msg='%s' % e.message)\n\n    elif state == 'absent':\n        try:\n            domain = dns.find(name=name)\n        except pyrax.exceptions.NotFound:\n            domain = {}\n        except Exception as e:\n            module.fail_json(msg='%s' % e.message)\n\n        if domain:\n            try:\n                domain.delete()\n                changed = True\n            except Exception as e:\n                module.fail_json(msg='%s' % e.message)\n\n    module.exit_json(changed=changed, domain=rax_to_dict(domain))\n\n\ndef main():\n    argument_spec = rax_argument_spec()\n    argument_spec.update(\n        dict(\n            comment=dict(),\n            email=dict(),\n            name=dict(),\n            state=dict(default='present', choices=['present', 'absent']),\n            ttl=dict(type='int', default=3600),\n        )\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        required_together=rax_required_together(),\n    )\n\n    if not HAS_PYRAX:\n        module.fail_json(msg='pyrax is required for this module')\n\n    comment = module.params.get('comment')\n    email = module.params.get('email')\n    name = module.params.get('name')\n    state = module.params.get('state')\n    ttl = module.params.get('ttl')\n\n    setup_rax_module(module, pyrax, False)\n\n    rax_dns(module, comment, email, name, state, ttl)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  rax dns short description  manage domains rackspace cloud dns description         manage domains rackspace cloud dns version added  1 5 options    comment      description          brief description domain  maximum length 160 characters   email      description          email address domain administrator   name      description          domain name create   state      description          indicate desired state resource     choices          present         absent     default  present   ttl      description          time live domain seconds     default  3600 notes       it recommended plays utilizing module run     c(serial  1) avoid exceeding api request limit imposed     rackspace clouddns api  author   matt martz ( sivel)  extends documentation fragment      rackspace     rackspace openstack      examples         name  create domain   hosts    gather facts  false   tasks        name  domain create request       local action          module  rax dns         credentials     raxpub         name  example org         email  admin example org       register  rax dns         usr bin python    copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "#!/usr/bin/python\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rax_dns\nshort_description: Manage domains on Rackspace Cloud DNS\ndescription:\n     - Manage domains on Rackspace Cloud DNS\nversion_added: 1.5\noptions:\n  comment:\n    description:\n      - Brief description of the domain. Maximum length of 160 characters\n  email:\n    description:\n      - Email address of the domain administrator\n  name:\n    description:\n      - Domain name to create\n  state:\n    description:\n      - Indicate desired state of the resource\n    choices:\n      - present\n      - absent\n    default: present\n  ttl:\n    description:\n      - Time to live of domain in seconds\n    default: 3600\nnotes:\n  - \"It is recommended that plays utilizing this module be run with\n    C(serial: 1) to avoid exceeding the API request limit imposed by\n    the Rackspace CloudDNS API\"\nauthor: \"Matt Martz (@sivel)\"\nextends_documentation_fragment:\n  - rackspace\n  - rackspace.openstack\n'''\n\nEXAMPLES = '''\n- name: Create domain\n  hosts: all\n  gather_facts: False\n  tasks:\n    - name: Domain create request\n      local_action:\n        module: rax_dns\n        credentials: ~/.raxpub\n        name: example.org\n        email: admin@example.org\n      register: rax_dns\n'''\n\ntry:\n    import pyrax\n    HAS_PYRAX = True\nexcept ImportError:\n    HAS_PYRAX = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.rax import (rax_argument_spec,\n                                      rax_required_together,\n                                      rax_to_dict,\n                                      setup_rax_module,\n                                      )\n\n\ndef rax_dns(module, comment, email, name, state, ttl):\n    changed = False\n\n    dns = pyrax.cloud_dns\n    if not dns:\n        module.fail_json(msg='Failed to instantiate client. This '\n                             'typically indicates an invalid region or an '\n                             'incorrectly capitalized region name.')\n\n    if state == 'present':\n        if not email:\n            module.fail_json(msg='An \"email\" attribute is required for '\n                                 'creating a domain')\n\n        try:\n            domain = dns.find(name=name)\n        except pyrax.exceptions.NoUniqueMatch as e:\n            module.fail_json(msg='%s' % e.message)\n        except pyrax.exceptions.NotFound:\n            try:\n                domain = dns.create(name=name, emailAddress=email, ttl=ttl,\n                                    comment=comment)\n                changed = True\n            except Exception as e:\n                module.fail_json(msg='%s' % e.message)\n\n        update = {}\n        if comment != getattr(domain, 'comment', None):\n            update['comment'] = comment\n        if ttl != getattr(domain, 'ttl', None):\n            update['ttl'] = ttl\n        if email != getattr(domain, 'emailAddress', None):\n            update['emailAddress'] = email\n\n        if update:\n            try:\n                domain.update(**update)\n                changed = True\n                domain.get()\n            except Exception as e:\n                module.fail_json(msg='%s' % e.message)\n\n    elif state == 'absent':\n        try:\n            domain = dns.find(name=name)\n        except pyrax.exceptions.NotFound:\n            domain = {}\n        except Exception as e:\n            module.fail_json(msg='%s' % e.message)\n\n        if domain:\n            try:\n                domain.delete()\n                changed = True\n            except Exception as e:\n                module.fail_json(msg='%s' % e.message)\n\n    module.exit_json(changed=changed, domain=rax_to_dict(domain))\n\n\ndef main():\n    argument_spec = rax_argument_spec()\n    argument_spec.update(\n        dict(\n            comment=dict(),\n            email=dict(),\n            name=dict(),\n            state=dict(default='present', choices=['present', 'absent']),\n            ttl=dict(type='int', default=3600),\n        )\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        required_together=rax_required_together(),\n    )\n\n    if not HAS_PYRAX:\n        module.fail_json(msg='pyrax is required for this module')\n\n    comment = module.params.get('comment')\n    email = module.params.get('email')\n    name = module.params.get('name')\n    state = module.params.get('state')\n    ttl = module.params.get('ttl')\n\n    setup_rax_module(module, pyrax, False)\n\n    rax_dns(module, comment, email, name, state, ttl)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "rax_dns.py", "id": "b886dc933d09795f49d1830055ca1e3e", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/rackspace/rax_dns.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}