{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_duration,\n    parse_filesize,\n    str_to_int,\n)\n\n\nclass SnotrIE(InfoExtractor):\n    _VALID_URL = r'http?://(?:www\\.)?snotr\\.com/video/(?P<id>\\d+)/([\\w]+)'\n    _TESTS = [{\n        'url': 'http://www.snotr.com/video/13708/Drone_flying_through_fireworks',\n        'info_dict': {\n            'id': '13708',\n            'ext': 'mp4',\n            'title': 'Drone flying through fireworks!',\n            'duration': 248,\n            'filesize_approx': 40700000,\n            'description': 'A drone flying through Fourth of July Fireworks',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n        'expected_warnings': ['description'],\n    }, {\n        'url': 'http://www.snotr.com/video/530/David_Letteman_-_George_W_Bush_Top_10',\n        'info_dict': {\n            'id': '530',\n            'ext': 'mp4',\n            'title': 'David Letteman - George W. Bush Top 10',\n            'duration': 126,\n            'filesize_approx': 8500000,\n            'description': 'The top 10 George W. Bush moments, brought to you by David Letterman!',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, video_id)\n        title = self._og_search_title(webpage)\n\n        description = self._og_search_description(webpage)\n        info_dict = self._parse_html5_media_entries(\n            url, webpage, video_id, m3u8_entry_protocol='m3u8_native')[0]\n\n        view_count = str_to_int(self._html_search_regex(\n            r'<p[^>]*>\\s*<strong[^>]*>Views:</strong>\\s*<span[^>]*>([\\d,\\.]+)',\n            webpage, 'view count', fatal=False))\n\n        duration = parse_duration(self._html_search_regex(\n            r'<p[^>]*>\\s*<strong[^>]*>Length:</strong>\\s*<span[^>]*>([\\d:]+)',\n            webpage, 'duration', fatal=False))\n\n        filesize_approx = parse_filesize(self._html_search_regex(\n            r'<p[^>]*>\\s*<strong[^>]*>Filesize:</strong>\\s*<span[^>]*>([^<]+)',\n            webpage, 'filesize', fatal=False))\n\n        info_dict.update({\n            'id': video_id,\n            'description': description,\n            'title': title,\n            'view_count': view_count,\n            'duration': duration,\n            'filesize_approx': filesize_approx,\n        })\n\n        return info_dict\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_duration,\n    parse_filesize,\n    str_to_int,\n)\n\n\nclass SnotrIE(InfoExtractor):\n    _VALID_URL = r'http?://(?:www\\.)?snotr\\.com/video/(?P<id>\\d+)/([\\w]+)'\n    _TESTS = [{\n        'url': 'http://www.snotr.com/video/13708/Drone_flying_through_fireworks',\n        'info_dict': {\n            'id': '13708',\n            'ext': 'mp4',\n            'title': 'Drone flying through fireworks!',\n            'duration': 248,\n            'filesize_approx': 40700000,\n            'description': 'A drone flying through Fourth of July Fireworks',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n        'expected_warnings': ['description'],\n    }, {\n        'url': 'http://www.snotr.com/video/530/David_Letteman_-_George_W_Bush_Top_10',\n        'info_dict': {\n            'id': '530',\n            'ext': 'mp4',\n            'title': 'David Letteman - George W. Bush Top 10',\n            'duration': 126,\n            'filesize_approx': 8500000,\n            'description': 'The top 10 George W. Bush moments, brought to you by David Letterman!',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, video_id)\n        title = self._og_search_title(webpage)\n\n        description = self._og_search_description(webpage)\n        info_dict = self._parse_html5_media_entries(\n            url, webpage, video_id, m3u8_entry_protocol='m3u8_native')[0]\n\n        view_count = str_to_int(self._html_search_regex(\n            r'<p[^>]*>\\s*<strong[^>]*>Views:</strong>\\s*<span[^>]*>([\\d,\\.]+)',\n            webpage, 'view count', fatal=False))\n\n        duration = parse_duration(self._html_search_regex(\n            r'<p[^>]*>\\s*<strong[^>]*>Length:</strong>\\s*<span[^>]*>([\\d:]+)',\n            webpage, 'duration', fatal=False))\n\n        filesize_approx = parse_filesize(self._html_search_regex(\n            r'<p[^>]*>\\s*<strong[^>]*>Filesize:</strong>\\s*<span[^>]*>([^<]+)',\n            webpage, 'filesize', fatal=False))\n\n        info_dict.update({\n            'id': video_id,\n            'description': description,\n            'title': title,\n            'view_count': view_count,\n            'duration': duration,\n            'filesize_approx': filesize_approx,\n        })\n\n        return info_dict\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "snotr.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/snotr.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}