{"author": "tgalal", "code": "from yowsup.common import YowConstants\nfrom yowsup.structs import ProtocolEntity, ProtocolTreeNode\nfrom yowsup.layers.protocol_iq.protocolentities import ResultIqProtocolEntity\nfrom ..structs import Group\nclass ListGroupsResultIqProtocolEntity(ResultIqProtocolEntity):\n    \n\n    def __init__(self, groupsList):\n        super(ListGroupsResultIqProtocolEntity, self).__init__(_from = YowConstants.WHATSAPP_GROUP_SERVER)\n        self.setProps(groupsList)\n\n    def __str__(self):\n        out = super(ListGroupsResultIqProtocolEntity, self).__str__()\n        out += \"Groups:\\n\"\n        for g in self.groupsList:\n            out += \"%s\\n\" % g\n        return out\n\n    def getGroups(self):\n        return self.groupsList\n\n    def setProps(self, groupsList):\n        assert type(groupsList) is list and (len(groupsList) == 0 or groupsList[0].__class__ is Group),\\\n            \"groupList must be a list of Group instances\"\n        self.groupsList = groupsList\n\n\n    def toProtocolTreeNode(self):\n        node = super(ListGroupsResultIqProtocolEntity, self).toProtocolTreeNode()\n\n        groupsNodes = []\n        for group in self.groupsList:\n            groupNode = ProtocolTreeNode(\"group\", {\n                \"id\":       group.getId(),\n                \"creator\":    group.getCreator(),\n                \"subject\":  group.getSubject(),\n                \"s_o\":      group.getSubjectOwner(),\n                \"s_t\":      str(group.getSubjectTime()),\n                \"creation\": str(group.getCreationTime())\n                },\n            )\n            participants = []\n            for jid, _type in group.getParticipants().items():\n                pnode = ProtocolTreeNode(\"participant\", {\"jid\": jid})\n                if _type:\n                    pnode[\"type\"] = _type\n                participants.append(pnode)\n            groupNode.addChildren(participants)\n            groupsNodes.append(groupNode)\n\n        node.addChild(ProtocolTreeNode(\"groups\", children = groupsNodes))\n        return node\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        entity = super(ListGroupsResultIqProtocolEntity, ListGroupsResultIqProtocolEntity).fromProtocolTreeNode(node)\n        entity.__class__ = ListGroupsResultIqProtocolEntity\n        groups = []\n        for groupNode in node.getChild(\"groups\").getAllChildren():\n            participants = {}\n            for p in groupNode.getAllChildren(\"participant\"):\n                participants[p[\"jid\"]] = p[\"type\"]\n            groups.append(\n                Group(groupNode[\"id\"], groupNode[\"creator\"], groupNode[\"subject\"], groupNode[\"s_o\"], groupNode[\"s_t\"], groupNode[\"creation\"], participants)\n            )\n\n        entity.setProps(groups)\n        return entity\n", "comments": "         iq type  result   g us  id    iq id            groups             group    subject time    creation    creating time    creator    owner jid    id    group id       subject owner jid    subject    subject                  participant jid    jid    type  admin                 participant               participant jid    jid                   participant              group             group    subject time    creation    creating time    creator    owner jid    id    group id       subject owner jid    subject    subject                  participant jid    jid    type  admin                 participant              group         groups        iq          ", "content": "from yowsup.common import YowConstants\nfrom yowsup.structs import ProtocolEntity, ProtocolTreeNode\nfrom yowsup.layers.protocol_iq.protocolentities import ResultIqProtocolEntity\nfrom ..structs import Group\nclass ListGroupsResultIqProtocolEntity(ResultIqProtocolEntity):\n    '''\n    <iq type=\"result\" from=\"g.us\" id=\"{{IQ_ID}}\">\n      <groups>\n          <group s_t=\"{{SUBJECT_TIME}}\" creation=\"{{CREATING_TIME}}\" creator=\"{{OWNER_JID}}\" id=\"{{GROUP_ID}}\" s_o=\"{{SUBJECT_OWNER_JID}}\" subject=\"{{SUBJECT}}\">\n            <participant jid=\"{{JID}}\" type=\"admin\">\n            </participant>\n            <participant jid=\"{{JID}}\">\n            </participant>\n          </group>\n          <group s_t=\"{{SUBJECT_TIME}}\" creation=\"{{CREATING_TIME}}\" creator=\"{{OWNER_JID}}\" id=\"{{GROUP_ID}}\" s_o=\"{{SUBJECT_OWNER_JID}}\" subject=\"{{SUBJECT}}\">\n            <participant jid=\"{{JID}}\" type=\"admin\">\n            </participant>\n          </group>\n      <groups>\n    </iq>\n    '''\n\n    def __init__(self, groupsList):\n        super(ListGroupsResultIqProtocolEntity, self).__init__(_from = YowConstants.WHATSAPP_GROUP_SERVER)\n        self.setProps(groupsList)\n\n    def __str__(self):\n        out = super(ListGroupsResultIqProtocolEntity, self).__str__()\n        out += \"Groups:\\n\"\n        for g in self.groupsList:\n            out += \"%s\\n\" % g\n        return out\n\n    def getGroups(self):\n        return self.groupsList\n\n    def setProps(self, groupsList):\n        assert type(groupsList) is list and (len(groupsList) == 0 or groupsList[0].__class__ is Group),\\\n            \"groupList must be a list of Group instances\"\n        self.groupsList = groupsList\n\n\n    def toProtocolTreeNode(self):\n        node = super(ListGroupsResultIqProtocolEntity, self).toProtocolTreeNode()\n\n        groupsNodes = []\n        for group in self.groupsList:\n            groupNode = ProtocolTreeNode(\"group\", {\n                \"id\":       group.getId(),\n                \"creator\":    group.getCreator(),\n                \"subject\":  group.getSubject(),\n                \"s_o\":      group.getSubjectOwner(),\n                \"s_t\":      str(group.getSubjectTime()),\n                \"creation\": str(group.getCreationTime())\n                },\n            )\n            participants = []\n            for jid, _type in group.getParticipants().items():\n                pnode = ProtocolTreeNode(\"participant\", {\"jid\": jid})\n                if _type:\n                    pnode[\"type\"] = _type\n                participants.append(pnode)\n            groupNode.addChildren(participants)\n            groupsNodes.append(groupNode)\n\n        node.addChild(ProtocolTreeNode(\"groups\", children = groupsNodes))\n        return node\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        entity = super(ListGroupsResultIqProtocolEntity, ListGroupsResultIqProtocolEntity).fromProtocolTreeNode(node)\n        entity.__class__ = ListGroupsResultIqProtocolEntity\n        groups = []\n        for groupNode in node.getChild(\"groups\").getAllChildren():\n            participants = {}\n            for p in groupNode.getAllChildren(\"participant\"):\n                participants[p[\"jid\"]] = p[\"type\"]\n            groups.append(\n                Group(groupNode[\"id\"], groupNode[\"creator\"], groupNode[\"subject\"], groupNode[\"s_o\"], groupNode[\"s_t\"], groupNode[\"creation\"], participants)\n            )\n\n        entity.setProps(groups)\n        return entity\n", "description": "The python WhatsApp library", "file_name": "iq_result_groups_list.py", "id": "2832883aa8326be088d202e81d241461", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_groups/protocolentities/iq_result_groups_list.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}