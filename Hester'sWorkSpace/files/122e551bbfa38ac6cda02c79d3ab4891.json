{"author": "tgalal", "code": "import binascii\nimport sys\nclass ProtocolTreeNode(object):\n    def __init__(self, tag, attributes = None, children = None, data = None):\n\n        self.tag = tag\n        self.attributes = attributes or {}\n        self.children = children or []\n        self.data = data\n\n        assert type(self.children) is list, \"Children must be a list, got %s\" % type(self.children)\n\n    def __eq__(self, protocolTreeNode):\n        \n        \n        if protocolTreeNode.__class__ == ProtocolTreeNode\\\n            and self.tag == protocolTreeNode.tag\\\n            and self.data == protocolTreeNode.data\\\n            and self.attributes == protocolTreeNode.attributes\\\n            and len(self.getAllChildren()) == len(protocolTreeNode.getAllChildren()):\n                found = False\n                for c in self.getAllChildren():\n                    for c2 in protocolTreeNode.getAllChildren():\n                        if c == c2:\n                            found = True\n                            break\n                    if not found:\n                        return False\n\n                found = False\n                for c in protocolTreeNode.getAllChildren():\n                    for c2 in self.getAllChildren():\n                        if c == c2:\n                            found = True\n                            break\n                    if not found:\n                        return False\n\n                return True\n\n        return False\n\n    def __hash__(self):\n        return hash(self.tag) ^ hash(tuple(self.attributes.items())) ^ hash(self.data)\n\n    def toString(self):\n        out = \"<\"+self.tag\n        if self.attributes is not None:\n            for key,val in self.attributes.items():\n                if val is None:\n                    raise ValueError(\"value is none for attr %s\" % key)\n                out+= \" \"+key+'=\"'+val+'\"'\n        out+= \">\\n\"\n\n        if self.data is not None:\n            if type(self.data) is bytearray:\n                try:\n                    out += \"%s\" % self.data.decode()\n                except UnicodeDecodeError:\n                    out += binascii.hexlify(self.data)\n            else:\n                try:\n                    out += \"%s\" % self.data\n                except UnicodeDecodeError:\n                    try:\n                        out += \"%s\" % self.data.decode()\n                    except UnicodeDecodeError:\n                        out += binascii.hexlify(self.data)\n\n            if type(self.data) is str and sys.version_info >= (3,0):\n                out += \"\\nHEX3:%s\\n\" % binascii.hexlify(self.data.encode('latin-1'))\n            else:\n                out += \"\\nHEX:%s\\n\" % binascii.hexlify(self.data)\n\n        for c in self.children:\n            try:\n                out += c.toString()\n            except UnicodeDecodeError:\n                out += \"[ENCODED DATA]\\n\"\n        out+= \"</\"+self.tag+\">\\n\"\n        return out\n\n\n    def __str__(self):\n        return self.toString()\n\n    def getData(self):\n        return self.data\n\n    def setData(self, data):\n        self.data = data\n\n\n    @staticmethod\n    def tagEquals(node,string):\n        return node is not None and node.tag is not None and node.tag == string\n\n\n    @staticmethod\n    def require(node,string):\n        if not ProtocolTreeNode.tagEquals(node,string):\n            raise Exception(\"failed require. string: \"+string);\n\n\n    def __getitem__(self, key):\n        return self.getAttributeValue(key)\n\n    def __setitem__(self, key, val):\n        self.setAttribute(key, val)\n\n    def __delitem__(self, key):\n        self.removeAttribute(key)\n\n\n    def getChild(self,identifier):\n\n        if type(identifier) == int:\n            if len(self.children) > identifier:\n                return self.children[identifier]\n            else:\n                return None\n\n        for c in self.children:\n            if identifier == c.tag:\n                return c\n\n        return None\n\n    def hasChildren(self):\n        return len(self.children) > 0\n\n    def addChild(self, childNode):\n        self.children.append(childNode)\n\n    def addChildren(self, children):\n        for c in children:\n            self.addChild(c)\n\n    def getAttributeValue(self,string):\n        try:\n            return self.attributes[string]\n        except KeyError:\n            return None\n\n    def removeAttribute(self, key):\n        if key in self.attributes:\n            del self.attributes[key]\n\n    def setAttribute(self, key, value):\n        self.attributes[key] = value\n\n    def getAllChildren(self,tag = None):\n        ret = []\n        if tag is None:\n            return self.children\n\n        for c in self.children:\n            if tag == c.tag:\n                ret.append(c)\n\n        return ret\n", "comments": "             param protocoltreenode  protocoltreenode          return  bool                ", "content": "import binascii\nimport sys\nclass ProtocolTreeNode(object):\n    def __init__(self, tag, attributes = None, children = None, data = None):\n\n        self.tag = tag\n        self.attributes = attributes or {}\n        self.children = children or []\n        self.data = data\n\n        assert type(self.children) is list, \"Children must be a list, got %s\" % type(self.children)\n\n    def __eq__(self, protocolTreeNode):\n        \"\"\"\n        :param protocolTreeNode: ProtocolTreeNode\n        :return: bool\n        \"\"\"\n        #\n        if protocolTreeNode.__class__ == ProtocolTreeNode\\\n            and self.tag == protocolTreeNode.tag\\\n            and self.data == protocolTreeNode.data\\\n            and self.attributes == protocolTreeNode.attributes\\\n            and len(self.getAllChildren()) == len(protocolTreeNode.getAllChildren()):\n                found = False\n                for c in self.getAllChildren():\n                    for c2 in protocolTreeNode.getAllChildren():\n                        if c == c2:\n                            found = True\n                            break\n                    if not found:\n                        return False\n\n                found = False\n                for c in protocolTreeNode.getAllChildren():\n                    for c2 in self.getAllChildren():\n                        if c == c2:\n                            found = True\n                            break\n                    if not found:\n                        return False\n\n                return True\n\n        return False\n\n    def __hash__(self):\n        return hash(self.tag) ^ hash(tuple(self.attributes.items())) ^ hash(self.data)\n\n    def toString(self):\n        out = \"<\"+self.tag\n        if self.attributes is not None:\n            for key,val in self.attributes.items():\n                if val is None:\n                    raise ValueError(\"value is none for attr %s\" % key)\n                out+= \" \"+key+'=\"'+val+'\"'\n        out+= \">\\n\"\n\n        if self.data is not None:\n            if type(self.data) is bytearray:\n                try:\n                    out += \"%s\" % self.data.decode()\n                except UnicodeDecodeError:\n                    out += binascii.hexlify(self.data)\n            else:\n                try:\n                    out += \"%s\" % self.data\n                except UnicodeDecodeError:\n                    try:\n                        out += \"%s\" % self.data.decode()\n                    except UnicodeDecodeError:\n                        out += binascii.hexlify(self.data)\n\n            if type(self.data) is str and sys.version_info >= (3,0):\n                out += \"\\nHEX3:%s\\n\" % binascii.hexlify(self.data.encode('latin-1'))\n            else:\n                out += \"\\nHEX:%s\\n\" % binascii.hexlify(self.data)\n\n        for c in self.children:\n            try:\n                out += c.toString()\n            except UnicodeDecodeError:\n                out += \"[ENCODED DATA]\\n\"\n        out+= \"</\"+self.tag+\">\\n\"\n        return out\n\n\n    def __str__(self):\n        return self.toString()\n\n    def getData(self):\n        return self.data\n\n    def setData(self, data):\n        self.data = data\n\n\n    @staticmethod\n    def tagEquals(node,string):\n        return node is not None and node.tag is not None and node.tag == string\n\n\n    @staticmethod\n    def require(node,string):\n        if not ProtocolTreeNode.tagEquals(node,string):\n            raise Exception(\"failed require. string: \"+string);\n\n\n    def __getitem__(self, key):\n        return self.getAttributeValue(key)\n\n    def __setitem__(self, key, val):\n        self.setAttribute(key, val)\n\n    def __delitem__(self, key):\n        self.removeAttribute(key)\n\n\n    def getChild(self,identifier):\n\n        if type(identifier) == int:\n            if len(self.children) > identifier:\n                return self.children[identifier]\n            else:\n                return None\n\n        for c in self.children:\n            if identifier == c.tag:\n                return c\n\n        return None\n\n    def hasChildren(self):\n        return len(self.children) > 0\n\n    def addChild(self, childNode):\n        self.children.append(childNode)\n\n    def addChildren(self, children):\n        for c in children:\n            self.addChild(c)\n\n    def getAttributeValue(self,string):\n        try:\n            return self.attributes[string]\n        except KeyError:\n            return None\n\n    def removeAttribute(self, key):\n        if key in self.attributes:\n            del self.attributes[key]\n\n    def setAttribute(self, key, value):\n        self.attributes[key] = value\n\n    def getAllChildren(self,tag = None):\n        ret = []\n        if tag is None:\n            return self.children\n\n        for c in self.children:\n            if tag == c.tag:\n                ret.append(c)\n\n        return ret\n", "description": "The python WhatsApp library", "file_name": "protocoltreenode.py", "id": "122e551bbfa38ac6cda02c79d3ab4891", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/structs/protocoltreenode.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}