{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom sentry.testutils import AcceptanceTestCase\n\n\nclass OrganizationSettingsTest(AcceptanceTestCase):\n    def setUp(self):\n        super(OrganizationSettingsTest, self).setUp()\n        self.user = self.create_user('foo@example.com')\n        self.org = self.create_organization(\n            name='Rowdy Tiger',\n            owner=None,\n        )\n        self.team = self.create_team(organization=self.org, name='Mariachi Band')\n        self.project = self.create_project(\n            organization=self.org,\n            teams=[self.team],\n            name='Bengal',\n        )\n        self.create_member(\n            user=self.user,\n            organization=self.org,\n            role='owner',\n            teams=[self.team],\n        )\n        self.login_as(self.user)\n        self.path = '/organizations/{}/settings/'.format(self.org.slug)\n\n    def load_organization_helper(self, snapshot_name):\n        self.browser.wait_until('.organization-home')\n        self.browser.wait_until_not('.loading-indicator')\n        self.browser.snapshot('organization settings -- ' + snapshot_name)\n        assert self.browser.element_exists('.ref-organization-settings')\n\n    def renders_2fa_setting(self):\n        return self.browser.element_exists('#require2FA')\n\n    def test_simple(self):\n        self.browser.get(self.path)\n        self.load_organization_helper(\"Simple\")\n\n    def test_disabled_2fa_feature(self):\n        user_owner = self.create_user('owner@example.com')\n        organization = self.create_organization(name=\"Example\", owner=user_owner)\n        self.login_as(user_owner)\n        path = '/organizations/%s/settings/' % organization.slug\n\n        self.browser.get(path)\n        self.load_organization_helper(\"disabled 2fa feature\")\n        assert not self.renders_2fa_setting()\n\n    def test_renders_2fa_setting_for_owner(self):\n        user_owner = self.create_user('owner@example.com')\n        organization = self.create_organization(name=\"Example\", owner=user_owner)\n        self.login_as(user_owner)\n        path = '/organizations/%s/settings/' % organization.slug\n\n        with self.feature('organizations:require-2fa'):\n            self.browser.get(path)\n            self.load_organization_helper(\"renders 2fa setting for organization owner\")\n            assert self.renders_2fa_setting()\n\n    def test_renders_2fa_setting_for_manager(self):\n        user_manager = self.create_user('manager@gexample.com')\n        organization = self.create_organization(\n            name=\"Example\", owner=self.create_user('owner@example.com'))\n        self.create_member(organization=organization, user=user_manager, role='manager')\n        self.login_as(user_manager)\n        path = '/organizations/%s/settings/' % organization.slug\n\n        with self.feature('organizations:require-2fa'):\n            self.browser.get(path)\n            self.load_organization_helper(\"renders 2fa setting for organization manager\")\n            assert self.renders_2fa_setting()\n\n    def test_setting_2fa_without_2fa_enabled(self):\n        user_owner = self.create_user('owner@example.com')\n        organization = self.create_organization(name=\"Example\", owner=user_owner)\n        self.login_as(user_owner)\n        path = '/organizations/%s/settings/' % organization.slug\n\n        with self.feature('organizations:require-2fa'):\n            self.browser.get(path)\n            self.browser.wait_until_not('.loading-indicator')\n            assert not self.browser.element_exists('.ref-organization-settings .error')\n            self.browser.click('#require2FA')\n            self.browser.wait_until('.modal')\n            self.browser.click('.modal .button-primary')\n            self.browser.wait_until_not('.modal')\n            self.load_organization_helper(\"setting 2fa without 2fa enabled\")\n            self.browser.wait_until('.ref-toast.ref-error')\n", "comments": "", "content": "from __future__ import absolute_import\n\nfrom sentry.testutils import AcceptanceTestCase\n\n\nclass OrganizationSettingsTest(AcceptanceTestCase):\n    def setUp(self):\n        super(OrganizationSettingsTest, self).setUp()\n        self.user = self.create_user('foo@example.com')\n        self.org = self.create_organization(\n            name='Rowdy Tiger',\n            owner=None,\n        )\n        self.team = self.create_team(organization=self.org, name='Mariachi Band')\n        self.project = self.create_project(\n            organization=self.org,\n            teams=[self.team],\n            name='Bengal',\n        )\n        self.create_member(\n            user=self.user,\n            organization=self.org,\n            role='owner',\n            teams=[self.team],\n        )\n        self.login_as(self.user)\n        self.path = '/organizations/{}/settings/'.format(self.org.slug)\n\n    def load_organization_helper(self, snapshot_name):\n        self.browser.wait_until('.organization-home')\n        self.browser.wait_until_not('.loading-indicator')\n        self.browser.snapshot('organization settings -- ' + snapshot_name)\n        assert self.browser.element_exists('.ref-organization-settings')\n\n    def renders_2fa_setting(self):\n        return self.browser.element_exists('#require2FA')\n\n    def test_simple(self):\n        self.browser.get(self.path)\n        self.load_organization_helper(\"Simple\")\n\n    def test_disabled_2fa_feature(self):\n        user_owner = self.create_user('owner@example.com')\n        organization = self.create_organization(name=\"Example\", owner=user_owner)\n        self.login_as(user_owner)\n        path = '/organizations/%s/settings/' % organization.slug\n\n        self.browser.get(path)\n        self.load_organization_helper(\"disabled 2fa feature\")\n        assert not self.renders_2fa_setting()\n\n    def test_renders_2fa_setting_for_owner(self):\n        user_owner = self.create_user('owner@example.com')\n        organization = self.create_organization(name=\"Example\", owner=user_owner)\n        self.login_as(user_owner)\n        path = '/organizations/%s/settings/' % organization.slug\n\n        with self.feature('organizations:require-2fa'):\n            self.browser.get(path)\n            self.load_organization_helper(\"renders 2fa setting for organization owner\")\n            assert self.renders_2fa_setting()\n\n    def test_renders_2fa_setting_for_manager(self):\n        user_manager = self.create_user('manager@gexample.com')\n        organization = self.create_organization(\n            name=\"Example\", owner=self.create_user('owner@example.com'))\n        self.create_member(organization=organization, user=user_manager, role='manager')\n        self.login_as(user_manager)\n        path = '/organizations/%s/settings/' % organization.slug\n\n        with self.feature('organizations:require-2fa'):\n            self.browser.get(path)\n            self.load_organization_helper(\"renders 2fa setting for organization manager\")\n            assert self.renders_2fa_setting()\n\n    def test_setting_2fa_without_2fa_enabled(self):\n        user_owner = self.create_user('owner@example.com')\n        organization = self.create_organization(name=\"Example\", owner=user_owner)\n        self.login_as(user_owner)\n        path = '/organizations/%s/settings/' % organization.slug\n\n        with self.feature('organizations:require-2fa'):\n            self.browser.get(path)\n            self.browser.wait_until_not('.loading-indicator')\n            assert not self.browser.element_exists('.ref-organization-settings .error')\n            self.browser.click('#require2FA')\n            self.browser.wait_until('.modal')\n            self.browser.click('.modal .button-primary')\n            self.browser.wait_until_not('.modal')\n            self.load_organization_helper(\"setting 2fa without 2fa enabled\")\n            self.browser.wait_until('.ref-toast.ref-error')\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_organization_settings.py", "id": "6a970521278da897aa2dc031332b4ed7", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/acceptance/test_organization_settings.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}