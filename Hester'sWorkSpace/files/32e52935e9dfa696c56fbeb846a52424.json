{"author": "sympy", "code": "from sympy import symbols, Mul, sin, Integral, oo, Eq, Sum\nfrom sympy.stats import Normal, Poisson, variance\nfrom sympy.stats.rv import probability, expectation\nfrom sympy.stats import Covariance, Variance, Probability, Expectation\n\n\ndef test_literal_probability():\n    X = Normal('X', 2, 3)\n    Y = Normal('Y', 3, 4)\n    Z = Poisson('Z', 4)\n    W = Poisson('W', 3)\n    x = symbols('x', real=True)\n    y, w, z = symbols('y, w, z')\n\n    assert Probability(X > 0).evaluate_integral() == probability(X > 0)\n    assert Probability(X > x).evaluate_integral() == probability(X > x)\n    assert Probability(X > 0).rewrite(Integral).doit() == probability(X > 0)\n    assert Probability(X > x).rewrite(Integral).doit() == probability(X > x)\n\n    assert Expectation(X).evaluate_integral() == expectation(X)\n    assert Expectation(X).rewrite(Integral).doit() == expectation(X)\n    assert Expectation(X**2).evaluate_integral() == expectation(X**2)\n    assert Expectation(x*X).args == (x*X,)\n    assert Expectation(x*X).doit() == x*Expectation(X)\n    assert Expectation(2*X + 3*Y + z*X*Y).doit() == 2*Expectation(X) + 3*Expectation(Y) + z*Expectation(X*Y)\n    assert Expectation(2*X + 3*Y + z*X*Y).args == (2*X + 3*Y + z*X*Y,)\n    assert Expectation(sin(X)) == Expectation(sin(X)).doit()\n    assert Expectation(2*x*sin(X)*Y + y*X**2 + z*X*Y).doit() == 2*x*Expectation(sin(X)*Y) + y*Expectation(X**2) + z*Expectation(X*Y)\n\n    assert Variance(w).args == (w,)\n    assert Variance(w).doit() == 0\n    assert Variance(X).evaluate_integral() == Variance(X).rewrite(Integral).doit() == variance(X)\n    assert Variance(X + z).args == (X + z,)\n    assert Variance(X + z).doit() == Variance(X)\n    assert Variance(X*Y).args == (Mul(X, Y),)\n    assert type(Variance(X*Y)) == Variance\n    assert Variance(z*X).doit() == z**2*Variance(X)\n    assert Variance(X + Y).doit() == Variance(X) + Variance(Y) + 2*Covariance(X, Y)\n    assert Variance(X + Y + Z + W).doit() == (Variance(X) + Variance(Y) + Variance(Z) + Variance(W) +\n                                       2 * Covariance(X, Y) + 2 * Covariance(X, Z) + 2 * Covariance(X, W) +\n                                       2 * Covariance(Y, Z) + 2 * Covariance(Y, W) + 2 * Covariance(W, Z))\n    assert Variance(X**2).evaluate_integral() == variance(X**2)\n    assert Variance(X**2) == Variance(X**2)\n    assert Variance(x*X**2).doit() == x**2*Variance(X**2)\n    assert Variance(sin(X)).args == (sin(X),)\n    assert Variance(sin(X)).doit() == Variance(sin(X))\n    assert Variance(x*sin(X)).doit() == x**2*Variance(sin(X))\n\n    assert Covariance(w, z).args == (w, z)\n    assert Covariance(w, z).doit() == 0\n    assert Covariance(X, w).doit() == 0\n    assert Covariance(w, X).doit() == 0\n    assert Covariance(X, Y).args == (X, Y)\n    assert type(Covariance(X, Y)) == Covariance\n    assert Covariance(z*X + 3, Y).doit() == z*Covariance(X, Y)\n    assert Covariance(X, X).args == (X, X)\n    assert Covariance(X, X).doit() == Variance(X)\n    assert Covariance(z*X + 3, w*Y + 4).doit() == w*z*Covariance(X,Y)\n    assert Covariance(X, Y) == Covariance(Y, X)\n    assert Covariance(X + Y, Z + W).doit() == Covariance(W, X) + Covariance(W, Y) + Covariance(X, Z) + Covariance(Y, Z)\n    assert Covariance(x*X + y*Y, z*Z + w*W).doit() == (x*w*Covariance(W, X) + w*y*Covariance(W, Y) +\n                                                x*z*Covariance(X, Z) + y*z*Covariance(Y, Z))\n    assert Covariance(x*X**2 + y*sin(Y), z*Y*Z**2 + w*W).doit() == (w*x*Covariance(W, X**2) + w*y*Covariance(sin(Y), W) +\n                                                        x*z*Covariance(Y*Z**2, X**2) + y*z*Covariance(Y*Z**2, sin(Y)))\n    assert Covariance(X, X**2).doit() == Covariance(X, X**2)\n    assert Covariance(X, sin(X)).doit() == Covariance(sin(X), X)\n    assert Covariance(X**2, sin(X)*Y).doit() == Covariance(sin(X)*Y, X**2)\n\n\ndef test_probability_rewrite():\n    X = Normal('X', 2, 3)\n    Y = Normal('Y', 3, 4)\n    Z = Poisson('Z', 4)\n    W = Poisson('W', 3)\n    x, y, w, z = symbols('x, y, w, z')\n\n    assert Variance(w).rewrite(Expectation) == 0\n    assert Variance(X).rewrite(Expectation) == Expectation(X ** 2) - Expectation(X) ** 2\n    assert Variance(X, condition=Y).rewrite(Expectation) == Expectation(X ** 2, Y) - Expectation(X, Y) ** 2\n    assert Variance(X, Y) != Expectation(X**2) - Expectation(X)**2\n    assert Variance(X + z).rewrite(Expectation) == Expectation((X + z) ** 2) - Expectation(X + z) ** 2\n    assert Variance(X * Y).rewrite(Expectation) == Expectation(X ** 2 * Y ** 2) - Expectation(X * Y) ** 2\n\n    assert Covariance(w, X).rewrite(Expectation) == -w*Expectation(X) + Expectation(w*X)\n    assert Covariance(X, Y).rewrite(Expectation) == Expectation(X*Y) - Expectation(X)*Expectation(Y)\n    assert Covariance(X, Y, condition=W).rewrite(Expectation) == Expectation(X * Y, W) - Expectation(X, W) * Expectation(Y, W)\n\n    w, x, z = symbols(\"W, x, z\")\n    px = Probability(Eq(X, x))\n    pz = Probability(Eq(Z, z))\n\n    assert Expectation(X).rewrite(Probability) == Integral(x*px, (x, -oo, oo))\n    assert Expectation(Z).rewrite(Probability) == Sum(z*pz, (z, 0, oo))\n    assert Variance(X).rewrite(Probability) == Integral(x**2*px, (x, -oo, oo)) - Integral(x*px, (x, -oo, oo))**2\n    assert Variance(Z).rewrite(Probability) == Sum(z**2*pz, (z, 0, oo)) - Sum(z*pz, (z, 0, oo))**2\n\n    assert Variance(X, condition=Y).rewrite(Probability) == Integral(x**2*Probability(Eq(X, x), Y), (x, -oo, oo)) - \\\n                                                            Integral(x*Probability(Eq(X, x), Y), (x, -oo, oo))**2\n", "comments": "", "content": "from sympy import symbols, Mul, sin, Integral, oo, Eq, Sum\nfrom sympy.stats import Normal, Poisson, variance\nfrom sympy.stats.rv import probability, expectation\nfrom sympy.stats import Covariance, Variance, Probability, Expectation\n\n\ndef test_literal_probability():\n    X = Normal('X', 2, 3)\n    Y = Normal('Y', 3, 4)\n    Z = Poisson('Z', 4)\n    W = Poisson('W', 3)\n    x = symbols('x', real=True)\n    y, w, z = symbols('y, w, z')\n\n    assert Probability(X > 0).evaluate_integral() == probability(X > 0)\n    assert Probability(X > x).evaluate_integral() == probability(X > x)\n    assert Probability(X > 0).rewrite(Integral).doit() == probability(X > 0)\n    assert Probability(X > x).rewrite(Integral).doit() == probability(X > x)\n\n    assert Expectation(X).evaluate_integral() == expectation(X)\n    assert Expectation(X).rewrite(Integral).doit() == expectation(X)\n    assert Expectation(X**2).evaluate_integral() == expectation(X**2)\n    assert Expectation(x*X).args == (x*X,)\n    assert Expectation(x*X).doit() == x*Expectation(X)\n    assert Expectation(2*X + 3*Y + z*X*Y).doit() == 2*Expectation(X) + 3*Expectation(Y) + z*Expectation(X*Y)\n    assert Expectation(2*X + 3*Y + z*X*Y).args == (2*X + 3*Y + z*X*Y,)\n    assert Expectation(sin(X)) == Expectation(sin(X)).doit()\n    assert Expectation(2*x*sin(X)*Y + y*X**2 + z*X*Y).doit() == 2*x*Expectation(sin(X)*Y) + y*Expectation(X**2) + z*Expectation(X*Y)\n\n    assert Variance(w).args == (w,)\n    assert Variance(w).doit() == 0\n    assert Variance(X).evaluate_integral() == Variance(X).rewrite(Integral).doit() == variance(X)\n    assert Variance(X + z).args == (X + z,)\n    assert Variance(X + z).doit() == Variance(X)\n    assert Variance(X*Y).args == (Mul(X, Y),)\n    assert type(Variance(X*Y)) == Variance\n    assert Variance(z*X).doit() == z**2*Variance(X)\n    assert Variance(X + Y).doit() == Variance(X) + Variance(Y) + 2*Covariance(X, Y)\n    assert Variance(X + Y + Z + W).doit() == (Variance(X) + Variance(Y) + Variance(Z) + Variance(W) +\n                                       2 * Covariance(X, Y) + 2 * Covariance(X, Z) + 2 * Covariance(X, W) +\n                                       2 * Covariance(Y, Z) + 2 * Covariance(Y, W) + 2 * Covariance(W, Z))\n    assert Variance(X**2).evaluate_integral() == variance(X**2)\n    assert Variance(X**2) == Variance(X**2)\n    assert Variance(x*X**2).doit() == x**2*Variance(X**2)\n    assert Variance(sin(X)).args == (sin(X),)\n    assert Variance(sin(X)).doit() == Variance(sin(X))\n    assert Variance(x*sin(X)).doit() == x**2*Variance(sin(X))\n\n    assert Covariance(w, z).args == (w, z)\n    assert Covariance(w, z).doit() == 0\n    assert Covariance(X, w).doit() == 0\n    assert Covariance(w, X).doit() == 0\n    assert Covariance(X, Y).args == (X, Y)\n    assert type(Covariance(X, Y)) == Covariance\n    assert Covariance(z*X + 3, Y).doit() == z*Covariance(X, Y)\n    assert Covariance(X, X).args == (X, X)\n    assert Covariance(X, X).doit() == Variance(X)\n    assert Covariance(z*X + 3, w*Y + 4).doit() == w*z*Covariance(X,Y)\n    assert Covariance(X, Y) == Covariance(Y, X)\n    assert Covariance(X + Y, Z + W).doit() == Covariance(W, X) + Covariance(W, Y) + Covariance(X, Z) + Covariance(Y, Z)\n    assert Covariance(x*X + y*Y, z*Z + w*W).doit() == (x*w*Covariance(W, X) + w*y*Covariance(W, Y) +\n                                                x*z*Covariance(X, Z) + y*z*Covariance(Y, Z))\n    assert Covariance(x*X**2 + y*sin(Y), z*Y*Z**2 + w*W).doit() == (w*x*Covariance(W, X**2) + w*y*Covariance(sin(Y), W) +\n                                                        x*z*Covariance(Y*Z**2, X**2) + y*z*Covariance(Y*Z**2, sin(Y)))\n    assert Covariance(X, X**2).doit() == Covariance(X, X**2)\n    assert Covariance(X, sin(X)).doit() == Covariance(sin(X), X)\n    assert Covariance(X**2, sin(X)*Y).doit() == Covariance(sin(X)*Y, X**2)\n\n\ndef test_probability_rewrite():\n    X = Normal('X', 2, 3)\n    Y = Normal('Y', 3, 4)\n    Z = Poisson('Z', 4)\n    W = Poisson('W', 3)\n    x, y, w, z = symbols('x, y, w, z')\n\n    assert Variance(w).rewrite(Expectation) == 0\n    assert Variance(X).rewrite(Expectation) == Expectation(X ** 2) - Expectation(X) ** 2\n    assert Variance(X, condition=Y).rewrite(Expectation) == Expectation(X ** 2, Y) - Expectation(X, Y) ** 2\n    assert Variance(X, Y) != Expectation(X**2) - Expectation(X)**2\n    assert Variance(X + z).rewrite(Expectation) == Expectation((X + z) ** 2) - Expectation(X + z) ** 2\n    assert Variance(X * Y).rewrite(Expectation) == Expectation(X ** 2 * Y ** 2) - Expectation(X * Y) ** 2\n\n    assert Covariance(w, X).rewrite(Expectation) == -w*Expectation(X) + Expectation(w*X)\n    assert Covariance(X, Y).rewrite(Expectation) == Expectation(X*Y) - Expectation(X)*Expectation(Y)\n    assert Covariance(X, Y, condition=W).rewrite(Expectation) == Expectation(X * Y, W) - Expectation(X, W) * Expectation(Y, W)\n\n    w, x, z = symbols(\"W, x, z\")\n    px = Probability(Eq(X, x))\n    pz = Probability(Eq(Z, z))\n\n    assert Expectation(X).rewrite(Probability) == Integral(x*px, (x, -oo, oo))\n    assert Expectation(Z).rewrite(Probability) == Sum(z*pz, (z, 0, oo))\n    assert Variance(X).rewrite(Probability) == Integral(x**2*px, (x, -oo, oo)) - Integral(x*px, (x, -oo, oo))**2\n    assert Variance(Z).rewrite(Probability) == Sum(z**2*pz, (z, 0, oo)) - Sum(z*pz, (z, 0, oo))**2\n\n    assert Variance(X, condition=Y).rewrite(Probability) == Integral(x**2*Probability(Eq(X, x), Y), (x, -oo, oo)) - \\\n                                                            Integral(x*Probability(Eq(X, x), Y), (x, -oo, oo))**2\n", "description": "A computer algebra system written in pure Python", "file_name": "test_symbolic_probability.py", "id": "32e52935e9dfa696c56fbeb846a52424", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/stats/tests/test_symbolic_probability.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}