{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (2016-2017) Hewlett Packard Enterprise Development LP\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nimport pytest\nimport re\nimport yaml\n\nfrom mock import Mock, patch\nfrom oneview_module_loader import ONEVIEW_MODULE_UTILS_PATH\nfrom hpOneView.oneview_client import OneViewClient\n\n\nclass OneViewBaseTest(object):\n    @pytest.fixture(autouse=True)\n    def setUp(self, mock_ansible_module, mock_ov_client, request):\n        marker = request.node.get_marker('resource')\n        self.resource = getattr(mock_ov_client, \"%s\" % (marker.args))\n        self.mock_ov_client = mock_ov_client\n        self.mock_ansible_module = mock_ansible_module\n\n    @pytest.fixture\n    def testing_module(self):\n        resource_name = type(self).__name__.replace('Test', '')\n        resource_module_path_name = resource_name.replace('Module', '')\n        resource_module_path_name = re.findall('[A-Z][^A-Z]*', resource_module_path_name)\n        resource_module_path_name = 'oneview_' + str.join('_', resource_module_path_name).lower()\n\n        ansible = __import__('ansible')\n        oneview_module = ansible.modules.remote_management.oneview\n        resource_module = getattr(oneview_module, resource_module_path_name)\n        self.testing_class = getattr(resource_module, resource_name)\n        testing_module = self.testing_class.__module__.split('.')[-1]\n        testing_module = getattr(oneview_module, testing_module)\n        try:\n             Load scenarios from module examples (Also checks if it is a valid yaml)\n            EXAMPLES = yaml.load(testing_module.EXAMPLES, yaml.SafeLoader)\n\n        except yaml.scanner.ScannerError:\n            message = \"Something went wrong while parsing yaml from {0}.EXAMPLES\".format(self.testing_class.__module__)\n            raise Exception(message)\n        return testing_module\n\n    def test_main_function_should_call_run_method(self, testing_module, mock_ansible_module):\n        mock_ansible_module.params = {'config': 'config.json'}\n\n        main_func = getattr(testing_module, 'main')\n\n        with patch.object(self.testing_class, \"run\") as mock_run:\n            main_func()\n            mock_run.assert_called_once()\n\n\nclass FactsParamsTest(OneViewBaseTest):\n    def test_should_get_all_using_filters(self, testing_module):\n        self.resource.get_all.return_value = []\n\n        params_get_all_with_filters = dict(\n            config='config.json',\n            name=None,\n            params={\n                'start': 1,\n                'count': 3,\n                'sort': 'name:descending',\n                'filter': 'purpose=General',\n                'query': 'imported eq true'\n            })\n        self.mock_ansible_module.params = params_get_all_with_filters\n\n        self.testing_class().run()\n\n        self.resource.get_all.assert_called_once_with(start=1, count=3, sort='name:descending', filter='purpose=General', query='imported eq true')\n\n    def test_should_get_all_without_params(self, testing_module):\n        self.resource.get_all.return_value = []\n\n        params_get_all_with_filters = dict(\n            config='config.json',\n            name=None\n        )\n        self.mock_ansible_module.params = params_get_all_with_filters\n\n        self.testing_class().run()\n\n        self.resource.get_all.assert_called_once_with()\n\n\nclass OneViewBaseTestCase(object):\n    mock_ov_client_from_json_file = None\n    testing_class = None\n    mock_ansible_module = None\n    mock_ov_client = None\n    testing_module = None\n    EXAMPLES = None\n\n    def configure_mocks(self, test_case, testing_class):\n        \"\"\"\n        Preload mocked OneViewClient instance and AnsibleModule\n        Args:\n            test_case (object): class instance (self) that are inheriting from OneViewBaseTestCase\n            testing_class (object): class being tested\n        \"\"\"\n        self.testing_class = testing_class\n\n         Define OneView Client Mock (FILE)\n        patcher_json_file = patch.object(OneViewClient, 'from_json_file')\n        test_case.addCleanup(patcher_json_file.stop)\n        self.mock_ov_client_from_json_file = patcher_json_file.start()\n\n         Define OneView Client Mock\n        self.mock_ov_client = self.mock_ov_client_from_json_file.return_value\n\n         Define Ansible Module Mock\n        patcher_ansible = patch(ONEVIEW_MODULE_UTILS_PATH + '.AnsibleModule')\n        test_case.addCleanup(patcher_ansible.stop)\n        mock_ansible_module = patcher_ansible.start()\n        self.mock_ansible_module = Mock()\n        mock_ansible_module.return_value = self.mock_ansible_module\n\n        self.__set_module_examples()\n\n    def test_main_function_should_call_run_method(self):\n        self.mock_ansible_module.params = {'config': 'config.json'}\n\n        main_func = getattr(self.testing_module, 'main')\n\n        with patch.object(self.testing_class, \"run\") as mock_run:\n            main_func()\n            mock_run.assert_called_once()\n\n    def __set_module_examples(self):\n         Load scenarios from module examples (Also checks if it is a valid yaml)\n        ansible = __import__('ansible')\n        testing_module = self.testing_class.__module__.split('.')[-1]\n        self.testing_module = getattr(ansible.modules.remote_management.oneview, testing_module)\n\n        try:\n             Load scenarios from module examples (Also checks if it is a valid yaml)\n            self.EXAMPLES = yaml.load(self.testing_module.EXAMPLES, yaml.SafeLoader)\n\n        except yaml.scanner.ScannerError:\n            message = \"Something went wrong while parsing yaml from {0}.EXAMPLES\".format(self.testing_class.__module__)\n            raise Exception(message)\n\n\nclass FactsParamsTestCase(OneViewBaseTestCase):\n    \"\"\"\n    FactsParamsTestCase has common test for classes that support pass additional\n        parameters when retrieving all resources.\n    \"\"\"\n\n    def configure_client_mock(self, resorce_client):\n        \"\"\"\n        Args:\n             resorce_client: Resource client that is being called\n        \"\"\"\n        self.resource_client = resorce_client\n\n    def __validations(self):\n        if not self.testing_class:\n            raise Exception(\"Mocks are not configured, you must call 'configure_mocks' before running this test.\")\n\n        if not self.resource_client:\n            raise Exception(\n                \"Mock for the client not configured, you must call 'configure_client_mock' before running this test.\")\n\n    def test_should_get_all_using_filters(self):\n        self.__validations()\n        self.resource_client.get_all.return_value = []\n\n        params_get_all_with_filters = dict(\n            config='config.json',\n            name=None,\n            params={\n                'start': 1,\n                'count': 3,\n                'sort': 'name:descending',\n                'filter': 'purpose=General',\n                'query': 'imported eq true'\n            })\n        self.mock_ansible_module.params = params_get_all_with_filters\n\n        self.testing_class().run()\n\n        self.resource_client.get_all.assert_called_once_with(start=1, count=3, sort='name:descending',\n                                                             filter='purpose=General',\n                                                             query='imported eq true')\n\n    def test_should_get_all_without_params(self):\n        self.__validations()\n        self.resource_client.get_all.return_value = []\n\n        params_get_all_with_filters = dict(\n            config='config.json',\n            name=None\n        )\n        self.mock_ansible_module.params = params_get_all_with_filters\n\n        self.testing_class().run()\n\n        self.resource_client.get_all.assert_called_once_with()\n", "comments": "            preload mocked oneviewclient instance ansiblemodule         args              test case (object)  class instance (self) inheriting oneviewbasetestcase             testing class (object)  class tested                     self testing class   testing class            define oneview client mock (file)         patcher json file   patch object(oneviewclient   json file )         test case addcleanup(patcher json file stop)         self mock ov client json file   patcher json file start()            define oneview client mock         self mock ov client   self mock ov client json file return value            define ansible module mock         patcher ansible   patch(oneview module utils path     ansiblemodule )         test case addcleanup(patcher ansible stop)         mock ansible module   patcher ansible start()         self mock ansible module   mock()         mock ansible module return value   self mock ansible module          self   set module examples()      def test main function call run method(self)          self mock ansible module params     config    config json            main func   getattr(self testing module   main )          patch object(self testing class   run ) mock run              main func()             mock run assert called once()      def   set module examples(self)            load scenarios module examples (also checks valid yaml)         ansible     import  ( ansible )         testing module   self testing class   module   split(   )  1          self testing module   getattr(ansible modules remote management oneview  testing module)          try                load scenarios module examples (also checks valid yaml)             self examples   yaml load(self testing module examples  yaml safeloader)          except yaml scanner scannererror              message    something went wrong parsing yaml  0  examples  format(self testing class   module  )             raise exception(message)   class factsparamstestcase(oneviewbasetestcase)              factsparamstestcase common test classes support pass additional         parameters retrieving resources               def configure client mock(self  resorce client)                      args               resorce client  resource client called                    coding  utf 8           copyright (2016 2017) hewlett packard enterprise development lp       this program free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        this program distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose  see    gnu general public license details        you received copy gnu general public license    along program  if  see  http   www gnu org licenses       load scenarios module examples (also checks valid yaml)    define oneview client mock (file)    define oneview client mock    define ansible module mock    load scenarios module examples (also checks valid yaml)    load scenarios module examples (also checks valid yaml) ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (2016-2017) Hewlett Packard Enterprise Development LP\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nimport pytest\nimport re\nimport yaml\n\nfrom mock import Mock, patch\nfrom oneview_module_loader import ONEVIEW_MODULE_UTILS_PATH\nfrom hpOneView.oneview_client import OneViewClient\n\n\nclass OneViewBaseTest(object):\n    @pytest.fixture(autouse=True)\n    def setUp(self, mock_ansible_module, mock_ov_client, request):\n        marker = request.node.get_marker('resource')\n        self.resource = getattr(mock_ov_client, \"%s\" % (marker.args))\n        self.mock_ov_client = mock_ov_client\n        self.mock_ansible_module = mock_ansible_module\n\n    @pytest.fixture\n    def testing_module(self):\n        resource_name = type(self).__name__.replace('Test', '')\n        resource_module_path_name = resource_name.replace('Module', '')\n        resource_module_path_name = re.findall('[A-Z][^A-Z]*', resource_module_path_name)\n        resource_module_path_name = 'oneview_' + str.join('_', resource_module_path_name).lower()\n\n        ansible = __import__('ansible')\n        oneview_module = ansible.modules.remote_management.oneview\n        resource_module = getattr(oneview_module, resource_module_path_name)\n        self.testing_class = getattr(resource_module, resource_name)\n        testing_module = self.testing_class.__module__.split('.')[-1]\n        testing_module = getattr(oneview_module, testing_module)\n        try:\n            # Load scenarios from module examples (Also checks if it is a valid yaml)\n            EXAMPLES = yaml.load(testing_module.EXAMPLES, yaml.SafeLoader)\n\n        except yaml.scanner.ScannerError:\n            message = \"Something went wrong while parsing yaml from {0}.EXAMPLES\".format(self.testing_class.__module__)\n            raise Exception(message)\n        return testing_module\n\n    def test_main_function_should_call_run_method(self, testing_module, mock_ansible_module):\n        mock_ansible_module.params = {'config': 'config.json'}\n\n        main_func = getattr(testing_module, 'main')\n\n        with patch.object(self.testing_class, \"run\") as mock_run:\n            main_func()\n            mock_run.assert_called_once()\n\n\nclass FactsParamsTest(OneViewBaseTest):\n    def test_should_get_all_using_filters(self, testing_module):\n        self.resource.get_all.return_value = []\n\n        params_get_all_with_filters = dict(\n            config='config.json',\n            name=None,\n            params={\n                'start': 1,\n                'count': 3,\n                'sort': 'name:descending',\n                'filter': 'purpose=General',\n                'query': 'imported eq true'\n            })\n        self.mock_ansible_module.params = params_get_all_with_filters\n\n        self.testing_class().run()\n\n        self.resource.get_all.assert_called_once_with(start=1, count=3, sort='name:descending', filter='purpose=General', query='imported eq true')\n\n    def test_should_get_all_without_params(self, testing_module):\n        self.resource.get_all.return_value = []\n\n        params_get_all_with_filters = dict(\n            config='config.json',\n            name=None\n        )\n        self.mock_ansible_module.params = params_get_all_with_filters\n\n        self.testing_class().run()\n\n        self.resource.get_all.assert_called_once_with()\n\n\nclass OneViewBaseTestCase(object):\n    mock_ov_client_from_json_file = None\n    testing_class = None\n    mock_ansible_module = None\n    mock_ov_client = None\n    testing_module = None\n    EXAMPLES = None\n\n    def configure_mocks(self, test_case, testing_class):\n        \"\"\"\n        Preload mocked OneViewClient instance and AnsibleModule\n        Args:\n            test_case (object): class instance (self) that are inheriting from OneViewBaseTestCase\n            testing_class (object): class being tested\n        \"\"\"\n        self.testing_class = testing_class\n\n        # Define OneView Client Mock (FILE)\n        patcher_json_file = patch.object(OneViewClient, 'from_json_file')\n        test_case.addCleanup(patcher_json_file.stop)\n        self.mock_ov_client_from_json_file = patcher_json_file.start()\n\n        # Define OneView Client Mock\n        self.mock_ov_client = self.mock_ov_client_from_json_file.return_value\n\n        # Define Ansible Module Mock\n        patcher_ansible = patch(ONEVIEW_MODULE_UTILS_PATH + '.AnsibleModule')\n        test_case.addCleanup(patcher_ansible.stop)\n        mock_ansible_module = patcher_ansible.start()\n        self.mock_ansible_module = Mock()\n        mock_ansible_module.return_value = self.mock_ansible_module\n\n        self.__set_module_examples()\n\n    def test_main_function_should_call_run_method(self):\n        self.mock_ansible_module.params = {'config': 'config.json'}\n\n        main_func = getattr(self.testing_module, 'main')\n\n        with patch.object(self.testing_class, \"run\") as mock_run:\n            main_func()\n            mock_run.assert_called_once()\n\n    def __set_module_examples(self):\n        # Load scenarios from module examples (Also checks if it is a valid yaml)\n        ansible = __import__('ansible')\n        testing_module = self.testing_class.__module__.split('.')[-1]\n        self.testing_module = getattr(ansible.modules.remote_management.oneview, testing_module)\n\n        try:\n            # Load scenarios from module examples (Also checks if it is a valid yaml)\n            self.EXAMPLES = yaml.load(self.testing_module.EXAMPLES, yaml.SafeLoader)\n\n        except yaml.scanner.ScannerError:\n            message = \"Something went wrong while parsing yaml from {0}.EXAMPLES\".format(self.testing_class.__module__)\n            raise Exception(message)\n\n\nclass FactsParamsTestCase(OneViewBaseTestCase):\n    \"\"\"\n    FactsParamsTestCase has common test for classes that support pass additional\n        parameters when retrieving all resources.\n    \"\"\"\n\n    def configure_client_mock(self, resorce_client):\n        \"\"\"\n        Args:\n             resorce_client: Resource client that is being called\n        \"\"\"\n        self.resource_client = resorce_client\n\n    def __validations(self):\n        if not self.testing_class:\n            raise Exception(\"Mocks are not configured, you must call 'configure_mocks' before running this test.\")\n\n        if not self.resource_client:\n            raise Exception(\n                \"Mock for the client not configured, you must call 'configure_client_mock' before running this test.\")\n\n    def test_should_get_all_using_filters(self):\n        self.__validations()\n        self.resource_client.get_all.return_value = []\n\n        params_get_all_with_filters = dict(\n            config='config.json',\n            name=None,\n            params={\n                'start': 1,\n                'count': 3,\n                'sort': 'name:descending',\n                'filter': 'purpose=General',\n                'query': 'imported eq true'\n            })\n        self.mock_ansible_module.params = params_get_all_with_filters\n\n        self.testing_class().run()\n\n        self.resource_client.get_all.assert_called_once_with(start=1, count=3, sort='name:descending',\n                                                             filter='purpose=General',\n                                                             query='imported eq true')\n\n    def test_should_get_all_without_params(self):\n        self.__validations()\n        self.resource_client.get_all.return_value = []\n\n        params_get_all_with_filters = dict(\n            config='config.json',\n            name=None\n        )\n        self.mock_ansible_module.params = params_get_all_with_filters\n\n        self.testing_class().run()\n\n        self.resource_client.get_all.assert_called_once_with()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "hpe_test_utils.py", "id": "75dbe907514a146b6dbcd2f9e96ca888", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/remote_management/oneview/hpe_test_utils.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}