{"author": "tflearn", "code": "\n\nfrom __future__ import absolute_import, division, print_function\n\nimport tflearn\n\n\nX = [3.3,4.4,5.5,6.71,6.93,4.168,9.779,6.182,7.59,2.167,7.042,10.791,5.313,7.997,5.654,9.27,3.1]\nY = [1.7,2.76,2.09,3.19,1.694,1.573,3.366,2.596,2.53,1.221,2.827,3.465,1.65,2.904,2.42,2.94,1.3]\n\n\ninput_ = tflearn.input_data(shape=[None])\nlinear = tflearn.single_unit(input_)\nregression = tflearn.regression(linear, optimizer='sgd', loss='mean_square',\n                                metric='R2', learning_rate=0.01)\nm = tflearn.DNN(regression)\nm.fit(X, Y, n_epoch=1000, show_metric=True, snapshot_epoch=False)\n\nprint(\"\\nRegression result:\")\nprint(\"Y = \" + str(m.get_weights(linear.W)) +\n      \"*X + \" + str(m.get_weights(linear.b)))\n\nprint(\"\\nTest prediction for x = 3.2, 3.3, 3.4:\")\nprint(m.predict([3.2, 3.3, 3.4]))\n# should output (close, not exact) y = [1.5315033197402954, 1.5585315227508545, 1.5855598449707031]\n", "comments": "    linear regression example        regression data    linear regression graph    output (close  exact)    1 5315033197402954  1 5585315227508545  1 5855598449707031  ", "content": "\"\"\" Linear Regression Example \"\"\"\n\nfrom __future__ import absolute_import, division, print_function\n\nimport tflearn\n\n# Regression data\nX = [3.3,4.4,5.5,6.71,6.93,4.168,9.779,6.182,7.59,2.167,7.042,10.791,5.313,7.997,5.654,9.27,3.1]\nY = [1.7,2.76,2.09,3.19,1.694,1.573,3.366,2.596,2.53,1.221,2.827,3.465,1.65,2.904,2.42,2.94,1.3]\n\n# Linear Regression graph\ninput_ = tflearn.input_data(shape=[None])\nlinear = tflearn.single_unit(input_)\nregression = tflearn.regression(linear, optimizer='sgd', loss='mean_square',\n                                metric='R2', learning_rate=0.01)\nm = tflearn.DNN(regression)\nm.fit(X, Y, n_epoch=1000, show_metric=True, snapshot_epoch=False)\n\nprint(\"\\nRegression result:\")\nprint(\"Y = \" + str(m.get_weights(linear.W)) +\n      \"*X + \" + str(m.get_weights(linear.b)))\n\nprint(\"\\nTest prediction for x = 3.2, 3.3, 3.4:\")\nprint(m.predict([3.2, 3.3, 3.4]))\n# should output (close, not exact) y = [1.5315033197402954, 1.5585315227508545, 1.5855598449707031]\n", "description": "Deep learning library featuring a higher-level API for TensorFlow.", "file_name": "linear_regression.py", "id": "c49a79c0a75954a220d89c5a2f8fa629", "language": "Python", "project_name": "tflearn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tflearn-tflearn/tflearn-tflearn-70fb38a/examples/basics/linear_regression.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:15:41Z", "url": "https://github.com/tflearn/tflearn", "wiki": true}