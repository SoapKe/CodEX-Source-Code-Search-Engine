{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    mimetype2ext,\n    unescapeHTML,\n    unsmuggle_url,\n    urljoin,\n)\n\n\nclass MediasiteIE(InfoExtractor):\n    _VALID_URL = r'(?xi)https?://[^/]+/Mediasite/Play/(?P<id>[0-9a-f]{32,34})(?P<query>\\?[^\n    _TESTS = [\n        {\n            'url': 'https://hitsmediaweb.h-its.org/mediasite/Play/2db6c271681e4f199af3c60d1f82869b1d',\n            'info_dict': {\n                'id': '2db6c271681e4f199af3c60d1f82869b1d',\n                'ext': 'mp4',\n                'title': 'Lecture: Tuesday, September 20, 2016 - Sir Andrew Wiles',\n                'description': 'Sir Andrew Wiles: \u201cEquations in arithmetic\u201d\\\\n\\\\nI will describe some of the interactions between modern number theory and the problem of solving equations in rational numbers or integers\\\\u0027.',\n                'timestamp': 1474268400.0,\n                'upload_date': '20160919',\n            },\n        },\n        {\n            'url': 'http://mediasite.uib.no/Mediasite/Play/90bb363295d945d6b548c867d01181361d?catalog=a452b7df-9ae1-46b7-a3ba-aceeb285f3eb',\n            'info_dict': {\n                'id': '90bb363295d945d6b548c867d01181361d',\n                'ext': 'mp4',\n                'upload_date': '20150429',\n                'title': '5) IT-forum 2015-Dag 1  - Dungbeetle -  How and why Rain created a tiny bug tracker for Unity',\n                'timestamp': 1430311380.0,\n            },\n        },\n        {\n            'url': 'https://collegerama.tudelft.nl/Mediasite/Play/585a43626e544bdd97aeb71a0ec907a01d',\n            'md5': '481fda1c11f67588c0d9d8fbdced4e39',\n            'info_dict': {\n                'id': '585a43626e544bdd97aeb71a0ec907a01d',\n                'ext': 'mp4',\n                'title': 'Een nieuwe wereld: waarden, bewustzijn en techniek van de mensheid 2.0.',\n                'description': '',\n                'thumbnail': r're:^https?://.*\\.jpg(?:\\?.*)?$',\n                'duration': 7713.088,\n                'timestamp': 1413309600,\n                'upload_date': '20141014',\n            },\n        },\n        {\n            'url': 'https://collegerama.tudelft.nl/Mediasite/Play/86a9ea9f53e149079fbdb4202b521ed21d?catalog=fd32fd35-6c99-466c-89d4-cd3c431bc8a4',\n            'md5': 'ef1fdded95bdf19b12c5999949419c92',\n            'info_dict': {\n                'id': '86a9ea9f53e149079fbdb4202b521ed21d',\n                'ext': 'wmv',\n                'title': '64ste Vakantiecursus: Afvalwater',\n                'description': 'md5:7fd774865cc69d972f542b157c328305',\n                'thumbnail': r're:^https?://.*\\.jpg(?:\\?.*?)?$',\n                'duration': 10853,\n                'timestamp': 1326446400,\n                'upload_date': '20120113',\n            },\n        },\n        {\n            'url': 'http://digitalops.sandia.gov/Mediasite/Play/24aace4429fc450fb5b38cdbf424a66e1d',\n            'md5': '9422edc9b9a60151727e4b6d8bef393d',\n            'info_dict': {\n                'id': '24aace4429fc450fb5b38cdbf424a66e1d',\n                'ext': 'mp4',\n                'title': 'Xyce Software Training - Section 1',\n                'description': r're:(?s)SAND Number: SAND 2013-7800.{200,}',\n                'upload_date': '20120409',\n                'timestamp': 1333983600,\n                'duration': 7794,\n            }\n        }\n    ]\n\n    \n    _STREAM_TYPES = {\n        0: 'video1',  \n        2: 'slide',\n        3: 'presentation',\n        4: 'video2',  \n        5: 'video3',\n    }\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [\n            unescapeHTML(mobj.group('url'))\n            for mobj in re.finditer(\n                r'(?xi)<iframe\\b[^>]+\\bsrc=([\"\\'])(?P<url>(?:(?:https?:)?//[^/]+)?/Mediasite/Play/[0-9a-f]{32,34}(?:\\?.*?)?)\\1',\n                webpage)]\n\n    def _real_extract(self, url):\n        url, data = unsmuggle_url(url, {})\n        mobj = re.match(self._VALID_URL, url)\n        resource_id = mobj.group('id')\n        query = mobj.group('query')\n\n        webpage, urlh = self._download_webpage_handle(url, resource_id)  \n        redirect_url = compat_str(urlh.geturl())\n\n        \n        service_path = compat_urlparse.urljoin(redirect_url, self._html_search_regex(\n            r'<div[^>]+\\bid=[\"\\']ServicePath[^>]+>(.+?)</div>', webpage, resource_id,\n            default='/Mediasite/PlayerService/PlayerService.svc/json'))\n\n        player_options = self._download_json(\n            '%s/GetPlayerOptions' % service_path, resource_id,\n            headers={\n                'Content-type': 'application/json; charset=utf-8',\n                'X-Requested-With': 'XMLHttpRequest',\n            },\n            data=json.dumps({\n                'getPlayerOptionsRequest': {\n                    'ResourceId': resource_id,\n                    'QueryString': query,\n                    'UrlReferrer': data.get('UrlReferrer', ''),\n                    'UseScreenReader': False,\n                }\n            }).encode('utf-8'))['d']\n\n        presentation = player_options['Presentation']\n        title = presentation['Title']\n\n        if presentation is None:\n            raise ExtractorError(\n                'Mediasite says: %s' % player_options['PlayerPresentationStatusMessage'],\n                expected=True)\n\n        thumbnails = []\n        formats = []\n        for snum, Stream in enumerate(presentation['Streams']):\n            stream_type = Stream.get('StreamType')\n            if stream_type is None:\n                continue\n\n            video_urls = Stream.get('VideoUrls')\n            if not isinstance(video_urls, list):\n                video_urls = []\n\n            stream_id = self._STREAM_TYPES.get(\n                stream_type, 'type%u' % stream_type)\n\n            stream_formats = []\n            for unum, VideoUrl in enumerate(video_urls):\n                video_url = VideoUrl.get('Location')\n                if not video_url or not isinstance(video_url, compat_str):\n                    continue\n                \n\n                media_type = VideoUrl.get('MediaType')\n                if media_type == 'SS':\n                    stream_formats.extend(self._extract_ism_formats(\n                        video_url, resource_id,\n                        ism_id='%s-%u.%u' % (stream_id, snum, unum),\n                        fatal=False))\n                elif media_type == 'Dash':\n                    stream_formats.extend(self._extract_mpd_formats(\n                        video_url, resource_id,\n                        mpd_id='%s-%u.%u' % (stream_id, snum, unum),\n                        fatal=False))\n                else:\n                    stream_formats.append({\n                        'format_id': '%s-%u.%u' % (stream_id, snum, unum),\n                        'url': video_url,\n                        'ext': mimetype2ext(VideoUrl.get('MimeType')),\n                    })\n\n            \n            \n            \n            \n\n            \n            if stream_type != 0:\n                for fmt in stream_formats:\n                    fmt['preference'] = -1\n\n            thumbnail_url = Stream.get('ThumbnailUrl')\n            if thumbnail_url:\n                thumbnails.append({\n                    'id': '%s-%u' % (stream_id, snum),\n                    'url': urljoin(redirect_url, thumbnail_url),\n                    'preference': -1 if stream_type != 0 else 0,\n                })\n            formats.extend(stream_formats)\n\n        self._sort_formats(formats)\n\n        \n        \n\n        return {\n            'id': resource_id,\n            'title': title,\n            'description': presentation.get('Description'),\n            'duration': float_or_none(presentation.get('Duration'), 1000),\n            'timestamp': float_or_none(presentation.get('UnixTime'), 1000),\n            'formats': formats,\n            'thumbnails': thumbnails,\n        }\n", "comments": "# coding: utf-8\n#]+|)'\n# look in Mediasite.Core.js (Mediasite.ContentStreamType[*])\n# the main video\n# screencast?\n# XXX: add UrlReferrer?\n# XXX: might have also extracted UrlReferrer and QueryString from the html\n# XXX: if Stream.get('CanChangeScheme', False), switch scheme to HTTP/HTTPS\n# TODO: if Stream['HasSlideContent']:\n# synthesise an MJPEG video stream '%s-%u.slides' % (stream_type, snum)\n# from Stream['Slides']\n# this will require writing a custom downloader...\n# disprefer 'secondary' streams\n# XXX: Presentation['Presenters']\n# XXX: Presentation['Transcript']\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    mimetype2ext,\n    unescapeHTML,\n    unsmuggle_url,\n    urljoin,\n)\n\n\nclass MediasiteIE(InfoExtractor):\n    _VALID_URL = r'(?xi)https?://[^/]+/Mediasite/Play/(?P<id>[0-9a-f]{32,34})(?P<query>\\?[^#]+|)'\n    _TESTS = [\n        {\n            'url': 'https://hitsmediaweb.h-its.org/mediasite/Play/2db6c271681e4f199af3c60d1f82869b1d',\n            'info_dict': {\n                'id': '2db6c271681e4f199af3c60d1f82869b1d',\n                'ext': 'mp4',\n                'title': 'Lecture: Tuesday, September 20, 2016 - Sir Andrew Wiles',\n                'description': 'Sir Andrew Wiles: \u201cEquations in arithmetic\u201d\\\\n\\\\nI will describe some of the interactions between modern number theory and the problem of solving equations in rational numbers or integers\\\\u0027.',\n                'timestamp': 1474268400.0,\n                'upload_date': '20160919',\n            },\n        },\n        {\n            'url': 'http://mediasite.uib.no/Mediasite/Play/90bb363295d945d6b548c867d01181361d?catalog=a452b7df-9ae1-46b7-a3ba-aceeb285f3eb',\n            'info_dict': {\n                'id': '90bb363295d945d6b548c867d01181361d',\n                'ext': 'mp4',\n                'upload_date': '20150429',\n                'title': '5) IT-forum 2015-Dag 1  - Dungbeetle -  How and why Rain created a tiny bug tracker for Unity',\n                'timestamp': 1430311380.0,\n            },\n        },\n        {\n            'url': 'https://collegerama.tudelft.nl/Mediasite/Play/585a43626e544bdd97aeb71a0ec907a01d',\n            'md5': '481fda1c11f67588c0d9d8fbdced4e39',\n            'info_dict': {\n                'id': '585a43626e544bdd97aeb71a0ec907a01d',\n                'ext': 'mp4',\n                'title': 'Een nieuwe wereld: waarden, bewustzijn en techniek van de mensheid 2.0.',\n                'description': '',\n                'thumbnail': r're:^https?://.*\\.jpg(?:\\?.*)?$',\n                'duration': 7713.088,\n                'timestamp': 1413309600,\n                'upload_date': '20141014',\n            },\n        },\n        {\n            'url': 'https://collegerama.tudelft.nl/Mediasite/Play/86a9ea9f53e149079fbdb4202b521ed21d?catalog=fd32fd35-6c99-466c-89d4-cd3c431bc8a4',\n            'md5': 'ef1fdded95bdf19b12c5999949419c92',\n            'info_dict': {\n                'id': '86a9ea9f53e149079fbdb4202b521ed21d',\n                'ext': 'wmv',\n                'title': '64ste Vakantiecursus: Afvalwater',\n                'description': 'md5:7fd774865cc69d972f542b157c328305',\n                'thumbnail': r're:^https?://.*\\.jpg(?:\\?.*?)?$',\n                'duration': 10853,\n                'timestamp': 1326446400,\n                'upload_date': '20120113',\n            },\n        },\n        {\n            'url': 'http://digitalops.sandia.gov/Mediasite/Play/24aace4429fc450fb5b38cdbf424a66e1d',\n            'md5': '9422edc9b9a60151727e4b6d8bef393d',\n            'info_dict': {\n                'id': '24aace4429fc450fb5b38cdbf424a66e1d',\n                'ext': 'mp4',\n                'title': 'Xyce Software Training - Section 1',\n                'description': r're:(?s)SAND Number: SAND 2013-7800.{200,}',\n                'upload_date': '20120409',\n                'timestamp': 1333983600,\n                'duration': 7794,\n            }\n        }\n    ]\n\n    # look in Mediasite.Core.js (Mediasite.ContentStreamType[*])\n    _STREAM_TYPES = {\n        0: 'video1',  # the main video\n        2: 'slide',\n        3: 'presentation',\n        4: 'video2',  # screencast?\n        5: 'video3',\n    }\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [\n            unescapeHTML(mobj.group('url'))\n            for mobj in re.finditer(\n                r'(?xi)<iframe\\b[^>]+\\bsrc=([\"\\'])(?P<url>(?:(?:https?:)?//[^/]+)?/Mediasite/Play/[0-9a-f]{32,34}(?:\\?.*?)?)\\1',\n                webpage)]\n\n    def _real_extract(self, url):\n        url, data = unsmuggle_url(url, {})\n        mobj = re.match(self._VALID_URL, url)\n        resource_id = mobj.group('id')\n        query = mobj.group('query')\n\n        webpage, urlh = self._download_webpage_handle(url, resource_id)  # XXX: add UrlReferrer?\n        redirect_url = compat_str(urlh.geturl())\n\n        # XXX: might have also extracted UrlReferrer and QueryString from the html\n        service_path = compat_urlparse.urljoin(redirect_url, self._html_search_regex(\n            r'<div[^>]+\\bid=[\"\\']ServicePath[^>]+>(.+?)</div>', webpage, resource_id,\n            default='/Mediasite/PlayerService/PlayerService.svc/json'))\n\n        player_options = self._download_json(\n            '%s/GetPlayerOptions' % service_path, resource_id,\n            headers={\n                'Content-type': 'application/json; charset=utf-8',\n                'X-Requested-With': 'XMLHttpRequest',\n            },\n            data=json.dumps({\n                'getPlayerOptionsRequest': {\n                    'ResourceId': resource_id,\n                    'QueryString': query,\n                    'UrlReferrer': data.get('UrlReferrer', ''),\n                    'UseScreenReader': False,\n                }\n            }).encode('utf-8'))['d']\n\n        presentation = player_options['Presentation']\n        title = presentation['Title']\n\n        if presentation is None:\n            raise ExtractorError(\n                'Mediasite says: %s' % player_options['PlayerPresentationStatusMessage'],\n                expected=True)\n\n        thumbnails = []\n        formats = []\n        for snum, Stream in enumerate(presentation['Streams']):\n            stream_type = Stream.get('StreamType')\n            if stream_type is None:\n                continue\n\n            video_urls = Stream.get('VideoUrls')\n            if not isinstance(video_urls, list):\n                video_urls = []\n\n            stream_id = self._STREAM_TYPES.get(\n                stream_type, 'type%u' % stream_type)\n\n            stream_formats = []\n            for unum, VideoUrl in enumerate(video_urls):\n                video_url = VideoUrl.get('Location')\n                if not video_url or not isinstance(video_url, compat_str):\n                    continue\n                # XXX: if Stream.get('CanChangeScheme', False), switch scheme to HTTP/HTTPS\n\n                media_type = VideoUrl.get('MediaType')\n                if media_type == 'SS':\n                    stream_formats.extend(self._extract_ism_formats(\n                        video_url, resource_id,\n                        ism_id='%s-%u.%u' % (stream_id, snum, unum),\n                        fatal=False))\n                elif media_type == 'Dash':\n                    stream_formats.extend(self._extract_mpd_formats(\n                        video_url, resource_id,\n                        mpd_id='%s-%u.%u' % (stream_id, snum, unum),\n                        fatal=False))\n                else:\n                    stream_formats.append({\n                        'format_id': '%s-%u.%u' % (stream_id, snum, unum),\n                        'url': video_url,\n                        'ext': mimetype2ext(VideoUrl.get('MimeType')),\n                    })\n\n            # TODO: if Stream['HasSlideContent']:\n            # synthesise an MJPEG video stream '%s-%u.slides' % (stream_type, snum)\n            # from Stream['Slides']\n            # this will require writing a custom downloader...\n\n            # disprefer 'secondary' streams\n            if stream_type != 0:\n                for fmt in stream_formats:\n                    fmt['preference'] = -1\n\n            thumbnail_url = Stream.get('ThumbnailUrl')\n            if thumbnail_url:\n                thumbnails.append({\n                    'id': '%s-%u' % (stream_id, snum),\n                    'url': urljoin(redirect_url, thumbnail_url),\n                    'preference': -1 if stream_type != 0 else 0,\n                })\n            formats.extend(stream_formats)\n\n        self._sort_formats(formats)\n\n        # XXX: Presentation['Presenters']\n        # XXX: Presentation['Transcript']\n\n        return {\n            'id': resource_id,\n            'title': title,\n            'description': presentation.get('Description'),\n            'duration': float_or_none(presentation.get('Duration'), 1000),\n            'timestamp': float_or_none(presentation.get('UnixTime'), 1000),\n            'formats': formats,\n            'thumbnails': thumbnails,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "mediasite.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/mediasite.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}