{"author": "yandex", "code": "from nose.tools import assert_true, assert_false, assert_equals, with_setup\nfrom gixy.core.context import get_context, push_context, purge_context\nfrom gixy.directives.block import Root\nfrom gixy.core.regexp import Regexp\nfrom gixy.core.variable import Variable\n\ndef setup():\n    push_context(Root())\n\n\ndef tear_down():\n    purge_context()\n\n\n@with_setup(setup, tear_down)\ndef test_literal():\n    var = Variable(name='simple', value='$uri', have_script=False)\n    assert_false(var.depends)\n    assert_false(var.regexp)\n    assert_equals(var.value, '$uri')\n\n    assert_false(var.can_startswith('$'))\n    assert_false(var.can_contain('i'))\n    assert_true(var.must_contain('$'))\n    assert_true(var.must_contain('u'))\n    assert_false(var.must_contain('a'))\n    assert_true(var.must_startswith('$'))\n    assert_false(var.must_startswith('u'))\n\n\n@with_setup(setup, tear_down)\ndef test_regexp():\n    var = Variable(name='simple', value=Regexp('^/.*'))\n    assert_false(var.depends)\n    assert_true(var.regexp)\n\n    assert_true(var.can_startswith('/'))\n    assert_false(var.can_startswith('a'))\n    assert_true(var.can_contain('a'))\n    assert_false(var.can_contain('\\n'))\n    assert_true(var.must_contain('/'))\n    assert_false(var.must_contain('a'))\n    assert_true(var.must_startswith('/'))\n    assert_false(var.must_startswith('a'))\n\n\n@with_setup(setup, tear_down)\ndef test_script():\n    get_context().add_var('foo', Variable(name='foo', value=Regexp('.*')))\n    var = Variable(name='simple', value='/$foo')\n    assert_true(var.depends)\n    assert_false(var.regexp)\n\n    assert_false(var.can_startswith('/'))\n    assert_false(var.can_startswith('a'))\n    assert_true(var.can_contain('/'))\n    assert_true(var.can_contain('a'))\n    assert_false(var.can_contain('\\n'))\n    assert_true(var.must_contain('/'))\n    assert_false(var.must_contain('a'))\n    assert_true(var.must_startswith('/'))\n    assert_false(var.must_startswith('a'))\n\n\n@with_setup(setup, tear_down)\ndef test_regexp_boundary():\n    var = Variable(name='simple', value=Regexp('.*'), boundary=Regexp('/[a-z]', strict=True))\n    assert_false(var.depends)\n    assert_true(var.regexp)\n\n    assert_true(var.can_startswith('/'))\n    assert_false(var.can_startswith('a'))\n    assert_false(var.can_contain('/'))\n    assert_true(var.can_contain('a'))\n    assert_false(var.can_contain('0'))\n    assert_false(var.can_contain('\\n'))\n    assert_true(var.must_contain('/'))\n    assert_false(var.must_contain('a'))\n    assert_true(var.must_startswith('/'))\n    assert_false(var.must_startswith('a'))\n\n\n@with_setup(setup, tear_down)\ndef test_script_boundary():\n    get_context().add_var('foo', Variable(name='foo', value=Regexp('.*'), boundary=Regexp('[a-z]', strict=True)))\n    var = Variable(name='simple', value='/$foo', boundary=Regexp('[/a-z0-9]', strict=True))\n    assert_true(var.depends)\n    assert_false(var.regexp)\n\n    assert_false(var.can_startswith('/'))\n    assert_false(var.can_startswith('a'))\n    assert_false(var.can_contain('/'))\n    assert_true(var.can_contain('a'))\n    assert_false(var.can_contain('\\n'))\n    assert_false(var.can_contain('0'))\n    assert_true(var.must_contain('/'))\n    assert_false(var.must_contain('a'))\n    assert_true(var.must_startswith('/'))\n    assert_false(var.must_startswith('a'))\n", "comments": "", "content": "from nose.tools import assert_true, assert_false, assert_equals, with_setup\nfrom gixy.core.context import get_context, push_context, purge_context\nfrom gixy.directives.block import Root\nfrom gixy.core.regexp import Regexp\nfrom gixy.core.variable import Variable\n\ndef setup():\n    push_context(Root())\n\n\ndef tear_down():\n    purge_context()\n\n\n@with_setup(setup, tear_down)\ndef test_literal():\n    var = Variable(name='simple', value='$uri', have_script=False)\n    assert_false(var.depends)\n    assert_false(var.regexp)\n    assert_equals(var.value, '$uri')\n\n    assert_false(var.can_startswith('$'))\n    assert_false(var.can_contain('i'))\n    assert_true(var.must_contain('$'))\n    assert_true(var.must_contain('u'))\n    assert_false(var.must_contain('a'))\n    assert_true(var.must_startswith('$'))\n    assert_false(var.must_startswith('u'))\n\n\n@with_setup(setup, tear_down)\ndef test_regexp():\n    var = Variable(name='simple', value=Regexp('^/.*'))\n    assert_false(var.depends)\n    assert_true(var.regexp)\n\n    assert_true(var.can_startswith('/'))\n    assert_false(var.can_startswith('a'))\n    assert_true(var.can_contain('a'))\n    assert_false(var.can_contain('\\n'))\n    assert_true(var.must_contain('/'))\n    assert_false(var.must_contain('a'))\n    assert_true(var.must_startswith('/'))\n    assert_false(var.must_startswith('a'))\n\n\n@with_setup(setup, tear_down)\ndef test_script():\n    get_context().add_var('foo', Variable(name='foo', value=Regexp('.*')))\n    var = Variable(name='simple', value='/$foo')\n    assert_true(var.depends)\n    assert_false(var.regexp)\n\n    assert_false(var.can_startswith('/'))\n    assert_false(var.can_startswith('a'))\n    assert_true(var.can_contain('/'))\n    assert_true(var.can_contain('a'))\n    assert_false(var.can_contain('\\n'))\n    assert_true(var.must_contain('/'))\n    assert_false(var.must_contain('a'))\n    assert_true(var.must_startswith('/'))\n    assert_false(var.must_startswith('a'))\n\n\n@with_setup(setup, tear_down)\ndef test_regexp_boundary():\n    var = Variable(name='simple', value=Regexp('.*'), boundary=Regexp('/[a-z]', strict=True))\n    assert_false(var.depends)\n    assert_true(var.regexp)\n\n    assert_true(var.can_startswith('/'))\n    assert_false(var.can_startswith('a'))\n    assert_false(var.can_contain('/'))\n    assert_true(var.can_contain('a'))\n    assert_false(var.can_contain('0'))\n    assert_false(var.can_contain('\\n'))\n    assert_true(var.must_contain('/'))\n    assert_false(var.must_contain('a'))\n    assert_true(var.must_startswith('/'))\n    assert_false(var.must_startswith('a'))\n\n\n@with_setup(setup, tear_down)\ndef test_script_boundary():\n    get_context().add_var('foo', Variable(name='foo', value=Regexp('.*'), boundary=Regexp('[a-z]', strict=True)))\n    var = Variable(name='simple', value='/$foo', boundary=Regexp('[/a-z0-9]', strict=True))\n    assert_true(var.depends)\n    assert_false(var.regexp)\n\n    assert_false(var.can_startswith('/'))\n    assert_false(var.can_startswith('a'))\n    assert_false(var.can_contain('/'))\n    assert_true(var.can_contain('a'))\n    assert_false(var.can_contain('\\n'))\n    assert_false(var.can_contain('0'))\n    assert_true(var.must_contain('/'))\n    assert_false(var.must_contain('a'))\n    assert_true(var.must_startswith('/'))\n    assert_false(var.must_startswith('a'))\n", "description": "Nginx configuration static analyzer", "file_name": "test_variable.py", "id": "e87fc14608bfb259fb24505f9b013220", "language": "Python", "project_name": "gixy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/yandex-gixy/yandex-gixy-86b5e60/tests/core/test_variable.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:01:42Z", "url": "https://github.com/yandex/gixy", "wiki": true}