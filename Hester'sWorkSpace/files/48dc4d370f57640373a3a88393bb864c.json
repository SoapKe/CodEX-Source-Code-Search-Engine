{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass SportDeutschlandIE(InfoExtractor):\n    _VALID_URL = r'https?://sportdeutschland\\.tv/(?P<sport>[^/?\n    _TESTS = [{\n        'url': 'http://sportdeutschland.tv/badminton/live-li-ning-badminton-weltmeisterschaft-2014-kopenhagen',\n        'info_dict': {\n            'id': 'live-li-ning-badminton-weltmeisterschaft-2014-kopenhagen',\n            'ext': 'mp4',\n            'title': 're:Li-Ning Badminton Weltmeisterschaft 2014 Kopenhagen',\n            'categories': ['Badminton'],\n            'view_count': int,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'description': r're:Die Badminton-WM 2014 aus Kopenhagen bei Sportdeutschland\\.TV',\n            'timestamp': int,\n            'upload_date': 're:^201408[23][0-9]$',\n        },\n        'params': {\n            'skip_download': 'Live stream',\n        },\n    }, {\n        'url': 'http://sportdeutschland.tv/li-ning-badminton-wm-2014/lee-li-ning-badminton-weltmeisterschaft-2014-kopenhagen-herren-einzel-wei-vs',\n        'info_dict': {\n            'id': 'lee-li-ning-badminton-weltmeisterschaft-2014-kopenhagen-herren-einzel-wei-vs',\n            'ext': 'mp4',\n            'upload_date': '20140825',\n            'description': 'md5:60a20536b57cee7d9a4ec005e8687504',\n            'timestamp': 1408976060,\n            'duration': 2732,\n            'title': 'Li-Ning Badminton Weltmeisterschaft 2014 Kopenhagen: Herren Einzel, Wei Lee vs. Keun Lee',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'view_count': int,\n            'categories': ['Li-Ning Badminton WM 2014'],\n\n        }\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        sport_id = mobj.group('sport')\n\n        api_url = 'http://proxy.vidibusdynamic.net/sportdeutschland.tv/api/permalinks/%s/%s?access_token=true' % (\n            sport_id, video_id)\n        req = sanitized_Request(api_url, headers={\n            'Accept': 'application/vnd.vidibus.v2.html+json',\n            'Referer': url,\n        })\n        data = self._download_json(req, video_id)\n\n        asset = data['asset']\n        categories = [data['section']['title']]\n\n        formats = []\n        smil_url = asset['video']\n        if '.smil' in smil_url:\n            m3u8_url = smil_url.replace('.smil', '.m3u8')\n            formats.extend(\n                self._extract_m3u8_formats(m3u8_url, video_id, ext='mp4'))\n\n            smil_doc = self._download_xml(\n                smil_url, video_id, note='Downloading SMIL metadata')\n            base_url_el = smil_doc.find('./head/meta')\n            if base_url_el:\n                base_url = base_url_el.attrib['base']\n            formats.extend([{\n                'format_id': 'rmtp',\n                'url': base_url if base_url_el else n.attrib['src'],\n                'play_path': n.attrib['src'],\n                'ext': 'flv',\n                'preference': -100,\n                'format_note': 'Seems to fail at example stream',\n            } for n in smil_doc.findall('./body/video')])\n        else:\n            formats.append({'url': smil_url})\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': asset['title'],\n            'thumbnail': asset.get('image'),\n            'description': asset.get('teaser'),\n            'duration': asset.get('duration'),\n            'categories': categories,\n            'view_count': asset.get('views'),\n            'rtmp_live': asset.get('live'),\n            'timestamp': parse_iso8601(asset.get('date')),\n        }\n", "comments": "# coding: utf-8\n#]+)/(?P<id>[^?#/]+)(?:$|[?#])'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass SportDeutschlandIE(InfoExtractor):\n    _VALID_URL = r'https?://sportdeutschland\\.tv/(?P<sport>[^/?#]+)/(?P<id>[^?#/]+)(?:$|[?#])'\n    _TESTS = [{\n        'url': 'http://sportdeutschland.tv/badminton/live-li-ning-badminton-weltmeisterschaft-2014-kopenhagen',\n        'info_dict': {\n            'id': 'live-li-ning-badminton-weltmeisterschaft-2014-kopenhagen',\n            'ext': 'mp4',\n            'title': 're:Li-Ning Badminton Weltmeisterschaft 2014 Kopenhagen',\n            'categories': ['Badminton'],\n            'view_count': int,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'description': r're:Die Badminton-WM 2014 aus Kopenhagen bei Sportdeutschland\\.TV',\n            'timestamp': int,\n            'upload_date': 're:^201408[23][0-9]$',\n        },\n        'params': {\n            'skip_download': 'Live stream',\n        },\n    }, {\n        'url': 'http://sportdeutschland.tv/li-ning-badminton-wm-2014/lee-li-ning-badminton-weltmeisterschaft-2014-kopenhagen-herren-einzel-wei-vs',\n        'info_dict': {\n            'id': 'lee-li-ning-badminton-weltmeisterschaft-2014-kopenhagen-herren-einzel-wei-vs',\n            'ext': 'mp4',\n            'upload_date': '20140825',\n            'description': 'md5:60a20536b57cee7d9a4ec005e8687504',\n            'timestamp': 1408976060,\n            'duration': 2732,\n            'title': 'Li-Ning Badminton Weltmeisterschaft 2014 Kopenhagen: Herren Einzel, Wei Lee vs. Keun Lee',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'view_count': int,\n            'categories': ['Li-Ning Badminton WM 2014'],\n\n        }\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        sport_id = mobj.group('sport')\n\n        api_url = 'http://proxy.vidibusdynamic.net/sportdeutschland.tv/api/permalinks/%s/%s?access_token=true' % (\n            sport_id, video_id)\n        req = sanitized_Request(api_url, headers={\n            'Accept': 'application/vnd.vidibus.v2.html+json',\n            'Referer': url,\n        })\n        data = self._download_json(req, video_id)\n\n        asset = data['asset']\n        categories = [data['section']['title']]\n\n        formats = []\n        smil_url = asset['video']\n        if '.smil' in smil_url:\n            m3u8_url = smil_url.replace('.smil', '.m3u8')\n            formats.extend(\n                self._extract_m3u8_formats(m3u8_url, video_id, ext='mp4'))\n\n            smil_doc = self._download_xml(\n                smil_url, video_id, note='Downloading SMIL metadata')\n            base_url_el = smil_doc.find('./head/meta')\n            if base_url_el:\n                base_url = base_url_el.attrib['base']\n            formats.extend([{\n                'format_id': 'rmtp',\n                'url': base_url if base_url_el else n.attrib['src'],\n                'play_path': n.attrib['src'],\n                'ext': 'flv',\n                'preference': -100,\n                'format_note': 'Seems to fail at example stream',\n            } for n in smil_doc.findall('./body/video')])\n        else:\n            formats.append({'url': smil_url})\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': asset['title'],\n            'thumbnail': asset.get('image'),\n            'description': asset.get('teaser'),\n            'duration': asset.get('duration'),\n            'categories': categories,\n            'view_count': asset.get('views'),\n            'rtmp_live': asset.get('live'),\n            'timestamp': parse_iso8601(asset.get('date')),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "sportdeutschland.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/sportdeutschland.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}