{"author": "HelloZeroNet", "code": "import base64\nimport hashlib\n\ndef sign(data, privatekey):\n    from lib import rsa\n    from lib.rsa import pkcs1\n\n    if \"BEGIN RSA PRIVATE KEY\" not in privatekey:\n        privatekey = \"-----BEGIN RSA PRIVATE KEY-----\\n%s\\n-----END RSA PRIVATE KEY-----\" % privatekey\n\n    priv = rsa.PrivateKey.load_pkcs1(privatekey)\n    sign = rsa.pkcs1.sign(data, priv, 'SHA-256')\n    return sign\n\ndef verify(data, publickey, sign):\n    from lib import rsa\n    from lib.rsa import pkcs1\n\n    pub = rsa.PublicKey.load_pkcs1(publickey, format=\"DER\")\n    try:\n        valid = rsa.pkcs1.verify(data, sign, pub)\n    except pkcs1.VerificationError:\n        valid = False\n    return valid\n\ndef privatekeyToPublickey(privatekey):\n    from lib import rsa\n    from lib.rsa import pkcs1\n\n    if \"BEGIN RSA PRIVATE KEY\" not in privatekey:\n        privatekey = \"-----BEGIN RSA PRIVATE KEY-----\\n%s\\n-----END RSA PRIVATE KEY-----\" % privatekey\n\n    priv = rsa.PrivateKey.load_pkcs1(privatekey)\n    pub = rsa.PublicKey(priv.n, priv.e)\n    return pub.save_pkcs1(\"DER\")\n\ndef publickeyToOnion(publickey):\n    return base64.b32encode(hashlib.sha1(publickey).digest()[:10]).lower()\n", "comments": "", "content": "import base64\nimport hashlib\n\ndef sign(data, privatekey):\n    from lib import rsa\n    from lib.rsa import pkcs1\n\n    if \"BEGIN RSA PRIVATE KEY\" not in privatekey:\n        privatekey = \"-----BEGIN RSA PRIVATE KEY-----\\n%s\\n-----END RSA PRIVATE KEY-----\" % privatekey\n\n    priv = rsa.PrivateKey.load_pkcs1(privatekey)\n    sign = rsa.pkcs1.sign(data, priv, 'SHA-256')\n    return sign\n\ndef verify(data, publickey, sign):\n    from lib import rsa\n    from lib.rsa import pkcs1\n\n    pub = rsa.PublicKey.load_pkcs1(publickey, format=\"DER\")\n    try:\n        valid = rsa.pkcs1.verify(data, sign, pub)\n    except pkcs1.VerificationError:\n        valid = False\n    return valid\n\ndef privatekeyToPublickey(privatekey):\n    from lib import rsa\n    from lib.rsa import pkcs1\n\n    if \"BEGIN RSA PRIVATE KEY\" not in privatekey:\n        privatekey = \"-----BEGIN RSA PRIVATE KEY-----\\n%s\\n-----END RSA PRIVATE KEY-----\" % privatekey\n\n    priv = rsa.PrivateKey.load_pkcs1(privatekey)\n    pub = rsa.PublicKey(priv.n, priv.e)\n    return pub.save_pkcs1(\"DER\")\n\ndef publickeyToOnion(publickey):\n    return base64.b32encode(hashlib.sha1(publickey).digest()[:10]).lower()\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "CryptRsa.py", "id": "31c96f07b01858b4aa97a917f34064d0", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/Crypt/CryptRsa.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}