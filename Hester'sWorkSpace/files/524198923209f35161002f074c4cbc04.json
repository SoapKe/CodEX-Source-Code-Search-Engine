{"author": "jakubroztocil", "code": "from itertools import groupby\nfrom pkg_resources import iter_entry_points\nfrom httpie.plugins import AuthPlugin, FormatterPlugin, ConverterPlugin\nfrom httpie.plugins.base import TransportPlugin\n\n\nENTRY_POINT_NAMES = [\n    'httpie.plugins.auth.v1',\n    'httpie.plugins.formatter.v1',\n    'httpie.plugins.converter.v1',\n    'httpie.plugins.transport.v1',\n]\n\n\nclass PluginManager(object):\n\n    def __init__(self):\n        self._plugins = []\n\n    def __iter__(self):\n        return iter(self._plugins)\n\n    def register(self, *plugins):\n        for plugin in plugins:\n            self._plugins.append(plugin)\n\n    def unregister(self, plugin):\n        self._plugins.remove(plugin)\n\n    def load_installed_plugins(self):\n        for entry_point_name in ENTRY_POINT_NAMES:\n            for entry_point in iter_entry_points(entry_point_name):\n                plugin = entry_point.load()\n                plugin.package_name = entry_point.dist.key\n                self.register(entry_point.load())\n\n    \n    def get_auth_plugins(self):\n        return [plugin for plugin in self if issubclass(plugin, AuthPlugin)]\n\n    def get_auth_plugin_mapping(self):\n        return {plugin.auth_type: plugin for plugin in self.get_auth_plugins()}\n\n    def get_auth_plugin(self, auth_type):\n        return self.get_auth_plugin_mapping()[auth_type]\n\n    \n    def get_formatters(self):\n        return [plugin for plugin in self\n                if issubclass(plugin, FormatterPlugin)]\n\n    def get_formatters_grouped(self):\n        groups = {}\n        for group_name, group in groupby(\n                self.get_formatters(),\n                key=lambda p: getattr(p, 'group_name', 'format')):\n            groups[group_name] = list(group)\n        return groups\n\n    def get_converters(self):\n        return [plugin for plugin in self\n                if issubclass(plugin, ConverterPlugin)]\n\n    \n    def get_transport_plugins(self):\n        return [plugin for plugin in self\n                if issubclass(plugin, TransportPlugin)]\n", "comments": "# Auth\n# Output processing\n# Adapters\n", "content": "from itertools import groupby\nfrom pkg_resources import iter_entry_points\nfrom httpie.plugins import AuthPlugin, FormatterPlugin, ConverterPlugin\nfrom httpie.plugins.base import TransportPlugin\n\n\nENTRY_POINT_NAMES = [\n    'httpie.plugins.auth.v1',\n    'httpie.plugins.formatter.v1',\n    'httpie.plugins.converter.v1',\n    'httpie.plugins.transport.v1',\n]\n\n\nclass PluginManager(object):\n\n    def __init__(self):\n        self._plugins = []\n\n    def __iter__(self):\n        return iter(self._plugins)\n\n    def register(self, *plugins):\n        for plugin in plugins:\n            self._plugins.append(plugin)\n\n    def unregister(self, plugin):\n        self._plugins.remove(plugin)\n\n    def load_installed_plugins(self):\n        for entry_point_name in ENTRY_POINT_NAMES:\n            for entry_point in iter_entry_points(entry_point_name):\n                plugin = entry_point.load()\n                plugin.package_name = entry_point.dist.key\n                self.register(entry_point.load())\n\n    # Auth\n    def get_auth_plugins(self):\n        return [plugin for plugin in self if issubclass(plugin, AuthPlugin)]\n\n    def get_auth_plugin_mapping(self):\n        return {plugin.auth_type: plugin for plugin in self.get_auth_plugins()}\n\n    def get_auth_plugin(self, auth_type):\n        return self.get_auth_plugin_mapping()[auth_type]\n\n    # Output processing\n    def get_formatters(self):\n        return [plugin for plugin in self\n                if issubclass(plugin, FormatterPlugin)]\n\n    def get_formatters_grouped(self):\n        groups = {}\n        for group_name, group in groupby(\n                self.get_formatters(),\n                key=lambda p: getattr(p, 'group_name', 'format')):\n            groups[group_name] = list(group)\n        return groups\n\n    def get_converters(self):\n        return [plugin for plugin in self\n                if issubclass(plugin, ConverterPlugin)]\n\n    # Adapters\n    def get_transport_plugins(self):\n        return [plugin for plugin in self\n                if issubclass(plugin, TransportPlugin)]\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "manager.py", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil_httpie/jakubroztocil-httpie-0f4dce9/httpie/plugins/manager.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:20:06Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}