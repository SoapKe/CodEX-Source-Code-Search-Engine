{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    smuggle_url,\n    unsmuggle_url,\n)\n\n\nclass LiTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?litv\\.tv/(?:vod|promo)/[^/]+/(?:content\\.do)?\\?.*?\\b(?:content_)?id=(?P<id>[^&]+)'\n\n    _URL_TEMPLATE = 'https://www.litv.tv/vod/%s/content.do?id=%s'\n\n    _TESTS = [{\n        'url': 'https://www.litv.tv/vod/drama/content.do?brc_id=root&id=VOD00041610&isUHEnabled=true&autoPlay=1',\n        'info_dict': {\n            'id': 'VOD00041606',\n            'title': '\u82b1\u5343\u9aa8',\n        },\n        'playlist_count': 50,\n    }, {\n        'url': 'https://www.litv.tv/vod/drama/content.do?brc_id=root&id=VOD00041610&isUHEnabled=true&autoPlay=1',\n        'md5': '969e343d9244778cb29acec608e53640',\n        'info_dict': {\n            'id': 'VOD00041610',\n            'ext': 'mp4',\n            'title': '\u82b1\u5343\u9aa8\u7b2c1\u96c6',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'description': 'md5:c7017aa144c87467c4fb2909c4b05d6f',\n            'episode_number': 1,\n        },\n        'params': {\n            'noplaylist': True,\n        },\n        'skip': 'Georestricted to Taiwan',\n    }, {\n        'url': 'https://www.litv.tv/promo/miyuezhuan/?content_id=VOD00044841&',\n        'md5': '88322ea132f848d6e3e18b32a832b918',\n        'info_dict': {\n            'id': 'VOD00044841',\n            'ext': 'mp4',\n            'title': '\u8288\u6708\u50b3\u7b2c1\u96c6\u3000\u9738\u661f\u8288\u6708\u964d\u4e16\u695a\u570b',\n            'description': '\u695a\u5a01\u738b\u4e8c\u5e74\uff0c\u592a\u53f2\u4ee4\u5510\u6627\u591c\u89c0\u661f\u8c61\uff0c\u767c\u73fe\u9738\u661f\u5373\u5c07\u73fe\u4e16\u3002\u738b\u540e\u5f97\u77e5\u9738\u661f\u7684\u9810\u8a00\u5f8c\uff0c\u60f3\u76e1\u8fa6\u6cd5\u4e0d\u8b93\u5b69\u5b50\u9806\u5229\u51fa\u751f\uff0c\u5e78\u5f97\u8392\u59ec\u76f8\u8b77\u5316\u89e3\u5371\u6a5f\u3002\u6c92\u60f3\u5230\u773e\u4eba\u671f\u5f85\u4e0b\u51fa\u751f\u7684\u9738\u661f\u537b\u662f\u4f4d\u516c\u4e3b\uff0c\u695a\u5a01\u738b\u5c0d\u6b64\u5931\u671b\u81f3\u6975\u3002\u695a\u738b\u540e\u547d\u4eba\u5c07\u5973\u5b30\u4e1f\u68c4\u6cb3\u4e2d\uff0c\u5c45\u7136\u5947\u8e5f\u4f3c\u7684\u88ab\u5c11\u53f8\u547d\u50cf\u6514\u4e0b\uff0c\u695a\u5a01\u738b\u8a8d\u70ba\u6b64\u5973\u975e\u540c\u51e1\u97ff\uff0c\u70ba\u5979\u53d6\u540d\u8288\u6708\u3002',\n        },\n        'skip': 'Georestricted to Taiwan',\n    }]\n\n    def _extract_playlist(self, season_list, video_id, program_info, prompt=True):\n        episode_title = program_info['title']\n        content_id = season_list['contentId']\n\n        if prompt:\n            self.to_screen('Downloading playlist %s - add --no-playlist to just download video %s' % (content_id, video_id))\n\n        all_episodes = [\n            self.url_result(smuggle_url(\n                self._URL_TEMPLATE % (program_info['contentType'], episode['contentId']),\n                {'force_noplaylist': True}))  \n            for episode in season_list['episode']]\n\n        return self.playlist_result(all_episodes, content_id, episode_title)\n\n    def _real_extract(self, url):\n        url, data = unsmuggle_url(url, {})\n\n        video_id = self._match_id(url)\n\n        noplaylist = self._downloader.params.get('noplaylist')\n        noplaylist_prompt = True\n        if 'force_noplaylist' in data:\n            noplaylist = data['force_noplaylist']\n            noplaylist_prompt = False\n\n        webpage = self._download_webpage(url, video_id)\n\n        program_info = self._parse_json(self._search_regex(\n            r'var\\s+programInfo\\s*=\\s*([^;]+)', webpage, 'VOD data', default='{}'),\n            video_id)\n\n        season_list = list(program_info.get('seasonList', {}).values())\n        if season_list:\n            if not noplaylist:\n                return self._extract_playlist(\n                    season_list[0], video_id, program_info,\n                    prompt=noplaylist_prompt)\n\n            if noplaylist_prompt:\n                self.to_screen('Downloading just video %s because of --no-playlist' % video_id)\n\n        \n        \n        \n        \n        if 'assetId' not in program_info:\n            program_info = self._download_json(\n                'https://www.litv.tv/vod/ajax/getProgramInfo', video_id,\n                query={'contentId': video_id},\n                headers={'Accept': 'application/json'})\n        video_data = self._parse_json(self._search_regex(\n            r'uiHlsUrl\\s*=\\s*testBackendData\\(([^;]+)\\);',\n            webpage, 'video data', default='{}'), video_id)\n        if not video_data:\n            payload = {\n                'assetId': program_info['assetId'],\n                'watchDevices': program_info['watchDevices'],\n                'contentType': program_info['contentType'],\n            }\n            video_data = self._download_json(\n                'https://www.litv.tv/vod/getMainUrl', video_id,\n                data=json.dumps(payload).encode('utf-8'),\n                headers={'Content-Type': 'application/json'})\n\n        if not video_data.get('fullpath'):\n            error_msg = video_data.get('errorMessage')\n            if error_msg == 'vod.error.outsideregionerror':\n                self.raise_geo_restricted('This video is available in Taiwan only')\n            if error_msg:\n                raise ExtractorError('%s said: %s' % (self.IE_NAME, error_msg), expected=True)\n            raise ExtractorError('Unexpected result from %s' % self.IE_NAME)\n\n        formats = self._extract_m3u8_formats(\n            video_data['fullpath'], video_id, ext='mp4',\n            entry_protocol='m3u8_native', m3u8_id='hls')\n        for a_format in formats:\n            \n            a_format.setdefault('http_headers', {})['Youtubedl-no-compression'] = True\n\n        title = program_info['title'] + program_info.get('secondaryMark', '')\n        description = program_info.get('description')\n        thumbnail = program_info.get('imageFile')\n        categories = [item['name'] for item in program_info.get('category', [])]\n        episode = int_or_none(program_info.get('episode'))\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'categories': categories,\n            'episode_number': episode,\n        }\n", "comments": "# coding: utf-8\n# To prevent infinite recursion\n# In browsers `getMainUrl` request is always issued. Usually this\n# endpoint gives the same result as the data embedded in the webpage.\n# If georestricted, there are no embedded data, so an extra request is\n# necessary to get the error code\n# LiTV HLS segments doesn't like compressions\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    smuggle_url,\n    unsmuggle_url,\n)\n\n\nclass LiTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?litv\\.tv/(?:vod|promo)/[^/]+/(?:content\\.do)?\\?.*?\\b(?:content_)?id=(?P<id>[^&]+)'\n\n    _URL_TEMPLATE = 'https://www.litv.tv/vod/%s/content.do?id=%s'\n\n    _TESTS = [{\n        'url': 'https://www.litv.tv/vod/drama/content.do?brc_id=root&id=VOD00041610&isUHEnabled=true&autoPlay=1',\n        'info_dict': {\n            'id': 'VOD00041606',\n            'title': '\u82b1\u5343\u9aa8',\n        },\n        'playlist_count': 50,\n    }, {\n        'url': 'https://www.litv.tv/vod/drama/content.do?brc_id=root&id=VOD00041610&isUHEnabled=true&autoPlay=1',\n        'md5': '969e343d9244778cb29acec608e53640',\n        'info_dict': {\n            'id': 'VOD00041610',\n            'ext': 'mp4',\n            'title': '\u82b1\u5343\u9aa8\u7b2c1\u96c6',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'description': 'md5:c7017aa144c87467c4fb2909c4b05d6f',\n            'episode_number': 1,\n        },\n        'params': {\n            'noplaylist': True,\n        },\n        'skip': 'Georestricted to Taiwan',\n    }, {\n        'url': 'https://www.litv.tv/promo/miyuezhuan/?content_id=VOD00044841&',\n        'md5': '88322ea132f848d6e3e18b32a832b918',\n        'info_dict': {\n            'id': 'VOD00044841',\n            'ext': 'mp4',\n            'title': '\u8288\u6708\u50b3\u7b2c1\u96c6\u3000\u9738\u661f\u8288\u6708\u964d\u4e16\u695a\u570b',\n            'description': '\u695a\u5a01\u738b\u4e8c\u5e74\uff0c\u592a\u53f2\u4ee4\u5510\u6627\u591c\u89c0\u661f\u8c61\uff0c\u767c\u73fe\u9738\u661f\u5373\u5c07\u73fe\u4e16\u3002\u738b\u540e\u5f97\u77e5\u9738\u661f\u7684\u9810\u8a00\u5f8c\uff0c\u60f3\u76e1\u8fa6\u6cd5\u4e0d\u8b93\u5b69\u5b50\u9806\u5229\u51fa\u751f\uff0c\u5e78\u5f97\u8392\u59ec\u76f8\u8b77\u5316\u89e3\u5371\u6a5f\u3002\u6c92\u60f3\u5230\u773e\u4eba\u671f\u5f85\u4e0b\u51fa\u751f\u7684\u9738\u661f\u537b\u662f\u4f4d\u516c\u4e3b\uff0c\u695a\u5a01\u738b\u5c0d\u6b64\u5931\u671b\u81f3\u6975\u3002\u695a\u738b\u540e\u547d\u4eba\u5c07\u5973\u5b30\u4e1f\u68c4\u6cb3\u4e2d\uff0c\u5c45\u7136\u5947\u8e5f\u4f3c\u7684\u88ab\u5c11\u53f8\u547d\u50cf\u6514\u4e0b\uff0c\u695a\u5a01\u738b\u8a8d\u70ba\u6b64\u5973\u975e\u540c\u51e1\u97ff\uff0c\u70ba\u5979\u53d6\u540d\u8288\u6708\u3002',\n        },\n        'skip': 'Georestricted to Taiwan',\n    }]\n\n    def _extract_playlist(self, season_list, video_id, program_info, prompt=True):\n        episode_title = program_info['title']\n        content_id = season_list['contentId']\n\n        if prompt:\n            self.to_screen('Downloading playlist %s - add --no-playlist to just download video %s' % (content_id, video_id))\n\n        all_episodes = [\n            self.url_result(smuggle_url(\n                self._URL_TEMPLATE % (program_info['contentType'], episode['contentId']),\n                {'force_noplaylist': True}))  # To prevent infinite recursion\n            for episode in season_list['episode']]\n\n        return self.playlist_result(all_episodes, content_id, episode_title)\n\n    def _real_extract(self, url):\n        url, data = unsmuggle_url(url, {})\n\n        video_id = self._match_id(url)\n\n        noplaylist = self._downloader.params.get('noplaylist')\n        noplaylist_prompt = True\n        if 'force_noplaylist' in data:\n            noplaylist = data['force_noplaylist']\n            noplaylist_prompt = False\n\n        webpage = self._download_webpage(url, video_id)\n\n        program_info = self._parse_json(self._search_regex(\n            r'var\\s+programInfo\\s*=\\s*([^;]+)', webpage, 'VOD data', default='{}'),\n            video_id)\n\n        season_list = list(program_info.get('seasonList', {}).values())\n        if season_list:\n            if not noplaylist:\n                return self._extract_playlist(\n                    season_list[0], video_id, program_info,\n                    prompt=noplaylist_prompt)\n\n            if noplaylist_prompt:\n                self.to_screen('Downloading just video %s because of --no-playlist' % video_id)\n\n        # In browsers `getMainUrl` request is always issued. Usually this\n        # endpoint gives the same result as the data embedded in the webpage.\n        # If georestricted, there are no embedded data, so an extra request is\n        # necessary to get the error code\n        if 'assetId' not in program_info:\n            program_info = self._download_json(\n                'https://www.litv.tv/vod/ajax/getProgramInfo', video_id,\n                query={'contentId': video_id},\n                headers={'Accept': 'application/json'})\n        video_data = self._parse_json(self._search_regex(\n            r'uiHlsUrl\\s*=\\s*testBackendData\\(([^;]+)\\);',\n            webpage, 'video data', default='{}'), video_id)\n        if not video_data:\n            payload = {\n                'assetId': program_info['assetId'],\n                'watchDevices': program_info['watchDevices'],\n                'contentType': program_info['contentType'],\n            }\n            video_data = self._download_json(\n                'https://www.litv.tv/vod/getMainUrl', video_id,\n                data=json.dumps(payload).encode('utf-8'),\n                headers={'Content-Type': 'application/json'})\n\n        if not video_data.get('fullpath'):\n            error_msg = video_data.get('errorMessage')\n            if error_msg == 'vod.error.outsideregionerror':\n                self.raise_geo_restricted('This video is available in Taiwan only')\n            if error_msg:\n                raise ExtractorError('%s said: %s' % (self.IE_NAME, error_msg), expected=True)\n            raise ExtractorError('Unexpected result from %s' % self.IE_NAME)\n\n        formats = self._extract_m3u8_formats(\n            video_data['fullpath'], video_id, ext='mp4',\n            entry_protocol='m3u8_native', m3u8_id='hls')\n        for a_format in formats:\n            # LiTV HLS segments doesn't like compressions\n            a_format.setdefault('http_headers', {})['Youtubedl-no-compression'] = True\n\n        title = program_info['title'] + program_info.get('secondaryMark', '')\n        description = program_info.get('description')\n        thumbnail = program_info.get('imageFile')\n        categories = [item['name'] for item in program_info.get('category', [])]\n        episode = int_or_none(program_info.get('episode'))\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'categories': categories,\n            'episode_number': episode,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "litv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/litv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}