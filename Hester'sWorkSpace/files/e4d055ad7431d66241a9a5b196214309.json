{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2016, Ansible, a Red Hat company\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'core'}\n\n\nDOCUMENTATION = '''\nmodule: meta\nshort_description: Execute Ansible 'actions'\nversion_added: \"1.2\"\ndescription:\n    - Meta tasks are a special kind of task which can influence Ansible internal execution or state. Prior to Ansible 2.0,\n      the only meta option available was `flush_handlers`. As of 2.2, there are five meta tasks which can be used.\n      Meta tasks can be used anywhere within your playbook.\n    - This module is also supported for Windows targets.\noptions:\n  free_form:\n    description:\n        - This module takes a free form command, as a string. There's not an actual option named \"free form\".  See the examples!\n        - >\n          C(flush_handlers) makes Ansible run any handler tasks which have thus far been notified. Ansible inserts these tasks internally at certain\n          points to implicitly trigger handler runs (after pre/post tasks, the final role execution, and the main tasks section of your plays).\n        - >\n          C(refresh_inventory) (added in 2.0) forces the reload of the inventory, which in the case of dynamic inventory scripts means they will be\n          re-executed. This is mainly useful when additional hosts are created and users wish to use them instead of using the `add_host` module.\"\n        - \"C(noop) (added in 2.0) This literally does 'nothing'. It is mainly used internally and not recommended for general use.\"\n        - \"C(clear_facts) (added in 2.1) causes the gathered facts for the hosts specified in the play's list of hosts to be cleared, including the fact cache.\"\n        - \"C(clear_host_errors) (added in 2.1) clears the failed state (if any) from hosts specified in the play's list of hosts.\"\n        - \"C(end_play) (added in 2.2) causes the play to end without failing the host.\"\n        - \"C(reset_connection) (added in 2.3) interrupts a persistent connection (i.e. ssh + control persist)\"\n    choices: ['noop', 'flush_handlers', 'refresh_inventory', 'clear_facts', 'clear_host_errors', 'end_play', 'reset_connection']\n    required: true\nnotes:\n    - C(meta) is not really a module nor action_plugin as such it cannot be overwritten.\n    - This module is also supported for Windows targets.\nauthor:\n    - \"Ansible Core Team\"\n'''\n\nEXAMPLES = '''\n- template:\n    src: new.j2\n    dest: /etc/config.txt\n  notify: myhandler\n- name: force all notified handlers to run at this point, not waiting for normal sync points\n  meta: flush_handlers\n\n- name: reload inventory, useful with dynamic inventories when play makes changes to the existing hosts\n  cloud_guest:            \n    name: newhost\n    state: present\n- name: Refresh inventory to ensure new instaces exist in inventory\n  meta: refresh_inventory\n\n- name: Clear gathered facts from all currently targeted hosts\n  meta: clear_facts\n\n- name: bring host back to play after failure\n  copy:\n    src: file\n    dest: /etc/file\n  remote_user: imightnothavepermission\n\n- meta: clear_host_errors\n\n- user: name={{ansible_user}} groups=input\n- name: reset ssh connection to allow user changes to affect 'current login user'\n  meta: reset_connection\n'''\n", "comments": "    module  meta short description  execute ansible  actions  version added   1 2  description        meta tasks special kind task influence ansible internal execution state  prior ansible 2 0        meta option available  flush handlers   as 2 2  five meta tasks used        meta tasks used anywhere within playbook        this module also supported windows targets  options    free form      description            this module takes free form command  string  there actual option named  free form    see examples                        c(flush handlers) makes ansible run handler tasks thus far notified  ansible inserts tasks internally certain           points implicitly trigger handler runs (after pre post tasks  final role execution  main tasks section plays)                        c(refresh inventory) (added 2 0) forces reload inventory  case dynamic inventory scripts means           executed  this mainly useful additional hosts created users wish use instead using  add host  module              c(noop) (added 2 0) this literally  nothing   it mainly used internally recommended general use              c(clear facts) (added 2 1) causes gathered facts hosts specified play list hosts cleared  including fact cache              c(clear host errors) (added 2 1) clears failed state (if any) hosts specified play list hosts              c(end play) (added 2 2) causes play end without failing host              c(reset connection) (added 2 3) interrupts persistent connection (i e  ssh   control persist)      choices    noop    flush handlers    refresh inventory    clear facts    clear host errors    end play    reset connection       required  true notes        c(meta) really module action plugin cannot overwritten        this module also supported windows targets  author         ansible core team       examples         template      src  new j2     dest   etc config txt   notify  myhandler   name  force notified handlers run point  waiting normal sync points   meta  flush handlers    name  reload inventory  useful dynamic inventories play makes changes existing hosts   cloud guest               fake module     name  newhost     state  present   name  refresh inventory ensure new instaces exist inventory   meta  refresh inventory    name  clear gathered facts currently targeted hosts   meta  clear facts    name  bring host back play failure   copy      src  file     dest   etc file   remote user  imightnothavepermission    meta  clear host errors    user  name   ansible user   groups input   name  reset ssh connection allow user changes affect  current login user    meta  reset connection         usr bin python        coding  utf 8        (c) 2016  ansible  red hat company    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    fake module ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2016, Ansible, a Red Hat company\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'core'}\n\n\nDOCUMENTATION = '''\nmodule: meta\nshort_description: Execute Ansible 'actions'\nversion_added: \"1.2\"\ndescription:\n    - Meta tasks are a special kind of task which can influence Ansible internal execution or state. Prior to Ansible 2.0,\n      the only meta option available was `flush_handlers`. As of 2.2, there are five meta tasks which can be used.\n      Meta tasks can be used anywhere within your playbook.\n    - This module is also supported for Windows targets.\noptions:\n  free_form:\n    description:\n        - This module takes a free form command, as a string. There's not an actual option named \"free form\".  See the examples!\n        - >\n          C(flush_handlers) makes Ansible run any handler tasks which have thus far been notified. Ansible inserts these tasks internally at certain\n          points to implicitly trigger handler runs (after pre/post tasks, the final role execution, and the main tasks section of your plays).\n        - >\n          C(refresh_inventory) (added in 2.0) forces the reload of the inventory, which in the case of dynamic inventory scripts means they will be\n          re-executed. This is mainly useful when additional hosts are created and users wish to use them instead of using the `add_host` module.\"\n        - \"C(noop) (added in 2.0) This literally does 'nothing'. It is mainly used internally and not recommended for general use.\"\n        - \"C(clear_facts) (added in 2.1) causes the gathered facts for the hosts specified in the play's list of hosts to be cleared, including the fact cache.\"\n        - \"C(clear_host_errors) (added in 2.1) clears the failed state (if any) from hosts specified in the play's list of hosts.\"\n        - \"C(end_play) (added in 2.2) causes the play to end without failing the host.\"\n        - \"C(reset_connection) (added in 2.3) interrupts a persistent connection (i.e. ssh + control persist)\"\n    choices: ['noop', 'flush_handlers', 'refresh_inventory', 'clear_facts', 'clear_host_errors', 'end_play', 'reset_connection']\n    required: true\nnotes:\n    - C(meta) is not really a module nor action_plugin as such it cannot be overwritten.\n    - This module is also supported for Windows targets.\nauthor:\n    - \"Ansible Core Team\"\n'''\n\nEXAMPLES = '''\n- template:\n    src: new.j2\n    dest: /etc/config.txt\n  notify: myhandler\n- name: force all notified handlers to run at this point, not waiting for normal sync points\n  meta: flush_handlers\n\n- name: reload inventory, useful with dynamic inventories when play makes changes to the existing hosts\n  cloud_guest:            # this is fake module\n    name: newhost\n    state: present\n- name: Refresh inventory to ensure new instaces exist in inventory\n  meta: refresh_inventory\n\n- name: Clear gathered facts from all currently targeted hosts\n  meta: clear_facts\n\n- name: bring host back to play after failure\n  copy:\n    src: file\n    dest: /etc/file\n  remote_user: imightnothavepermission\n\n- meta: clear_host_errors\n\n- user: name={{ansible_user}} groups=input\n- name: reset ssh connection to allow user changes to affect 'current login user'\n  meta: reset_connection\n'''\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "meta.py", "id": "e4d055ad7431d66241a9a5b196214309", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/utilities/helper/meta.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}