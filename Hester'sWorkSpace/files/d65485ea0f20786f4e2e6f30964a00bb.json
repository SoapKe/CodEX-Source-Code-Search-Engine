{"author": "mitmproxy", "code": "\nimport random\nimport sys\nfrom mitmproxy import io, http\nimport typing  \n\n\nclass Writer:\n    def __init__(self, path: str) -> None:\n        self.f = open(path, \"wb\")  # type: typing.IO[bytes]\n        self.w = io.FlowWriter(self.f)\n\n    def response(self, flow: http.HTTPFlow) -> None:\n        if random.choice([True, False]):\n            self.w.add(flow)\n\n    def done(self):\n        self.f.close()\n\n\naddons = [Writer(sys.argv[1])]\n", "comments": "    this script generate mitmproxy dump file  would also generated passing   w  mitmproxy  in contrast   w   gives full control flows saved also allows rotate files log multiple files parallel         noqa    type  typing io bytes  ", "content": "\"\"\"\nThis script how to generate a mitmproxy dump file,\nas it would also be generated by passing `-w` to mitmproxy.\nIn contrast to `-w`, this gives you full control over which\nflows should be saved and also allows you to rotate files or log\nto multiple files in parallel.\n\"\"\"\nimport random\nimport sys\nfrom mitmproxy import io, http\nimport typing  # noqa\n\n\nclass Writer:\n    def __init__(self, path: str) -> None:\n        self.f = open(path, \"wb\")  # type: typing.IO[bytes]\n        self.w = io.FlowWriter(self.f)\n\n    def response(self, flow: http.HTTPFlow) -> None:\n        if random.choice([True, False]):\n            self.w.add(flow)\n\n    def done(self):\n        self.f.close()\n\n\naddons = [Writer(sys.argv[1])]\n", "description": "An interactive TLS-capable intercepting HTTP proxy for penetration testers and software developers.", "file_name": "io_write_dumpfile.py", "id": "d65485ea0f20786f4e2e6f30964a00bb", "language": "Python", "project_name": "mitmproxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mitmproxy-mitmproxy/mitmproxy-mitmproxy-3c7725a/examples/simple/io_write_dumpfile.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:30:56Z", "url": "https://github.com/mitmproxy/mitmproxy", "wiki": false}