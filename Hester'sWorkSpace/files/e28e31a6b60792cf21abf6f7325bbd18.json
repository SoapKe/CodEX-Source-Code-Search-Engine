{"author": "ansible", "code": " (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport jinja2\n\n__all__ = ['AnsibleJ2Template']\n\n\nclass AnsibleJ2Template(jinja2.environment.Template):\n    '''\n    A helper class, which prevents Jinja2 from running _jinja2_vars through dict().\n    Without this, {% include %} and similar will create new contexts unlike the special\n    one created in template_from_file. This ensures they are all alike, except for\n    potential locals.\n    '''\n\n    def new_context(self, vars=None, shared=False, locals=None):\n        if vars is not None:\n            if isinstance(vars, dict):\n                vars = vars.copy()\n                if locals is not None:\n                    vars.update(locals)\n            else:\n                vars = vars.add_locals(locals)\n        return self.environment.context_class(self.environment, vars, self.name, self.blocks)\n", "comments": "        a helper class  prevents jinja2 running  jinja2 vars dict()      without     include    similar create new contexts unlike special     one created template file  this ensures alike  except     potential locals             (c) 2012  michael dehaan  michael dehaan gmail com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish ", "content": "# (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport jinja2\n\n__all__ = ['AnsibleJ2Template']\n\n\nclass AnsibleJ2Template(jinja2.environment.Template):\n    '''\n    A helper class, which prevents Jinja2 from running _jinja2_vars through dict().\n    Without this, {% include %} and similar will create new contexts unlike the special\n    one created in template_from_file. This ensures they are all alike, except for\n    potential locals.\n    '''\n\n    def new_context(self, vars=None, shared=False, locals=None):\n        if vars is not None:\n            if isinstance(vars, dict):\n                vars = vars.copy()\n                if locals is not None:\n                    vars.update(locals)\n            else:\n                vars = vars.add_locals(locals)\n        return self.environment.context_class(self.environment, vars, self.name, self.blocks)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "template.py", "id": "e28e31a6b60792cf21abf6f7325bbd18", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/template/template.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}