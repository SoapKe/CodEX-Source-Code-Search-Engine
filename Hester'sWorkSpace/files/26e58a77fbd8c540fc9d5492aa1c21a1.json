{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    extract_attributes,\n)\n\n\nclass NZZIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?nzz\\.ch/(?:[^/]+/)*[^/?\n    _TEST = {\n        'url': 'http://www.nzz.ch/zuerich/gymizyte/gymizyte-schreiben-schueler-heute-noch-diktate-ld.9153',\n        'info_dict': {\n            'id': '9153',\n        },\n        'playlist_mincount': 6,\n    }\n\n    def _real_extract(self, url):\n        page_id = self._match_id(url)\n        webpage = self._download_webpage(url, page_id)\n\n        entries = []\n        for player_element in re.findall(r'(<[^>]+class=\"kalturaPlayer\"[^>]*>)', webpage):\n            player_params = extract_attributes(player_element)\n            if player_params.get('data-type') not in ('kaltura_singleArticle',):\n                self.report_warning('Unsupported player type')\n                continue\n            entry_id = player_params['data-id']\n            entries.append(self.url_result(\n                'kaltura:1750922:' + entry_id, 'Kaltura', entry_id))\n\n        return self.playlist_result(entries, page_id)\n", "comments": "# coding: utf-8\n#]+-ld\\.(?P<id>\\d+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    extract_attributes,\n)\n\n\nclass NZZIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?nzz\\.ch/(?:[^/]+/)*[^/?#]+-ld\\.(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.nzz.ch/zuerich/gymizyte/gymizyte-schreiben-schueler-heute-noch-diktate-ld.9153',\n        'info_dict': {\n            'id': '9153',\n        },\n        'playlist_mincount': 6,\n    }\n\n    def _real_extract(self, url):\n        page_id = self._match_id(url)\n        webpage = self._download_webpage(url, page_id)\n\n        entries = []\n        for player_element in re.findall(r'(<[^>]+class=\"kalturaPlayer\"[^>]*>)', webpage):\n            player_params = extract_attributes(player_element)\n            if player_params.get('data-type') not in ('kaltura_singleArticle',):\n                self.report_warning('Unsupported player type')\n                continue\n            entry_id = player_params['data-id']\n            entries.append(self.url_result(\n                'kaltura:1750922:' + entry_id, 'Kaltura', entry_id))\n\n        return self.playlist_result(entries, page_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "nzz.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/nzz.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}