{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport six\n\nfrom sentry.models import AuthIdentity, AuthProvider\nfrom sentry.testutils import AuthProviderTestCase\nfrom sentry.utils.auth import SSO_SESSION_KEY\n\n\nclass OrganizationAuthLoginTest(AuthProviderTestCase):\n    def test_sso_auth_required(self):\n        user = self.create_user('foo@example.com', is_superuser=False)\n        organization = self.create_organization(name='foo')\n        member = self.create_member(user=user, organization=organization)\n        setattr(member.flags, 'sso:linked', True)\n        member.save()\n\n        auth_provider = AuthProvider.objects.create(\n            organization=organization,\n            provider='dummy',\n            flags=0,\n        )\n\n        AuthIdentity.objects.create(\n            auth_provider=auth_provider,\n            user=user,\n        )\n\n        self.login_as(user)\n\n        path = '/{}/'.format(organization.slug)\n        redirect_uri = 'http://testserver/auth/login/{}/'.format(organization.slug)\n\n        \n        \n        resp = self.client.get(path)\n        assert resp.status_code == 302\n        assert resp['Location'] == redirect_uri\n\n        \n        user.update(is_superuser=True)\n        resp = self.client.get(path)\n        assert resp.status_code == 302\n        assert resp['Location'] == redirect_uri\n\n        # XXX(dcramer): using internal API as exposing a request object is hard\n        self.session[SSO_SESSION_KEY] = six.text_type(organization.id)\n        self.save_session()\n\n        \n        resp = self.client.get(path)\n        assert resp.status_code == 200\n", "comments": "  redirecting user authentication form    verified specific organization    superuser still require sso member org    xxx(dcramer)  using internal api exposing request object hard    sso marked complete  able access dash ", "content": "from __future__ import absolute_import\n\nimport six\n\nfrom sentry.models import AuthIdentity, AuthProvider\nfrom sentry.testutils import AuthProviderTestCase\nfrom sentry.utils.auth import SSO_SESSION_KEY\n\n\nclass OrganizationAuthLoginTest(AuthProviderTestCase):\n    def test_sso_auth_required(self):\n        user = self.create_user('foo@example.com', is_superuser=False)\n        organization = self.create_organization(name='foo')\n        member = self.create_member(user=user, organization=organization)\n        setattr(member.flags, 'sso:linked', True)\n        member.save()\n\n        auth_provider = AuthProvider.objects.create(\n            organization=organization,\n            provider='dummy',\n            flags=0,\n        )\n\n        AuthIdentity.objects.create(\n            auth_provider=auth_provider,\n            user=user,\n        )\n\n        self.login_as(user)\n\n        path = '/{}/'.format(organization.slug)\n        redirect_uri = 'http://testserver/auth/login/{}/'.format(organization.slug)\n\n        # we should be redirecting the user to the authentication form as they\n        # haven't verified this specific organization\n        resp = self.client.get(path)\n        assert resp.status_code == 302\n        assert resp['Location'] == redirect_uri\n\n        # superuser should still require SSO as they're a member of the org\n        user.update(is_superuser=True)\n        resp = self.client.get(path)\n        assert resp.status_code == 302\n        assert resp['Location'] == redirect_uri\n\n        # XXX(dcramer): using internal API as exposing a request object is hard\n        self.session[SSO_SESSION_KEY] = six.text_type(organization.id)\n        self.save_session()\n\n        # now that SSO is marked as complete, we should be able to access dash\n        resp = self.client.get(path)\n        assert resp.status_code == 200\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_sso.py", "id": "611915c9f5c32ad28aacf3b6ddb3af75", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/integration/test_sso.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}