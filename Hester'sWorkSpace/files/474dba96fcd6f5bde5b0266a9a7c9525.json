{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo import api, fields, models, tools\n\n\nclass MaintenanceEquipment(models.Model):\n    _inherit = 'maintenance.equipment'\n\n    employee_id = fields.Many2one('hr.employee', string='Assigned to Employee', track_visibility='onchange')\n    department_id = fields.Many2one('hr.department', string='Assigned to Department', track_visibility='onchange')\n    equipment_assign_to = fields.Selection(\n        [('department', 'Department'), ('employee', 'Employee') ,('other', 'Other')],\n        string='Used By',\n        required=True,\n        default='employee')\n    owner_user_id = fields.Many2one(compute='_compute_owner', store=True)\n\n    @api.one\n    @api.depends('employee_id', 'department_id', 'equipment_assign_to')\n    def _compute_owner(self):\n        self.owner_user_id = self.env.user.id\n        if self.equipment_assign_to == 'employee':\n            self.owner_user_id = self.employee_id.user_id.id\n        elif self.equipment_assign_to == 'department':\n            self.owner_user_id = self.department_id.manager_id.user_id.id\n\n    @api.onchange('equipment_assign_to')\n    def _onchange_equipment_assign_to(self):\n        if self.equipment_assign_to == 'employee':\n            self.department_id = False\n        if self.equipment_assign_to == 'department':\n            self.employee_id = False\n        self.assign_date = fields.Date.context_today(self)\n\n    @api.model\n    def create(self, vals):\n        equipment = super(MaintenanceEquipment, self).create(vals)\n        \n        user_ids = []\n        if equipment.employee_id and equipment.employee_id.user_id:\n            user_ids.append(equipment.employee_id.user_id.id)\n        if equipment.department_id and equipment.department_id.manager_id and equipment.department_id.manager_id.user_id:\n            user_ids.append(equipment.department_id.manager_id.user_id.id)\n        if user_ids:\n            equipment.message_subscribe_users(user_ids=user_ids)\n        return equipment\n\n    @api.multi\n    def write(self, vals):\n        user_ids = []\n        \n        if vals.get('employee_id'):\n            user_id = self.env['hr.employee'].browse(vals['employee_id'])['user_id']\n            if user_id:\n                user_ids.append(user_id.id)\n        if vals.get('department_id'):\n            department = self.env['hr.department'].browse(vals['department_id'])\n            if department and department.manager_id and department.manager_id.user_id:\n                user_ids.append(department.manager_id.user_id.id)\n        if user_ids:\n            self.message_subscribe_users(user_ids=user_ids)\n        return super(MaintenanceEquipment, self).write(vals)\n\n    @api.multi\n    def _track_subtype(self, init_values):\n        self.ensure_one()\n        if ('employee_id' in init_values and self.employee_id) or ('department_id' in init_values and self.department_id):\n            return 'maintenance.mt_mat_assign'\n        return super(MaintenanceEquipment, self)._track_subtype(init_values)\n\n\nclass MaintenanceRequest(models.Model):\n    _inherit = 'maintenance.request'\n\n    @api.returns('self')\n    def _default_employee_get(self):\n        return self.env['hr.employee'].search([('user_id', '=', self.env.uid)], limit=1)\n\n    employee_id = fields.Many2one('hr.employee', string='Employee', default=_default_employee_get)\n    department_id = fields.Many2one('hr.department', string='Department')\n    owner_user_id = fields.Many2one(compute='_compute_owner', store=True)\n\n    @api.depends('employee_id', 'department_id')\n    def _compute_owner(self):\n        if self.equipment_id.equipment_assign_to == 'employee':\n            self.owner_user_id = self.employee_id.user_id.id\n        elif self.equipment_id.equipment_assign_to == 'department':\n            self.owner_user_id = self.department_id.manager_id.user_id.id\n\n    @api.onchange('employee_id', 'department_id')\n    def onchange_department_or_employee_id(self):\n        domain = []\n        if self.department_id:\n            domain = [('department_id', '=', self.department_id.id)]\n        if self.employee_id and self.department_id:\n            domain = ['|'] + domain\n        if self.employee_id:\n            domain = domain + ['|', ('employee_id', '=', self.employee_id.id), ('employee_id', '=', None)]\n        equipment = self.env['maintenance.equipment'].search(domain, limit=2)\n        if len(equipment) == 1:\n            self.equipment_id = equipment\n        return {'domain': {'equipment_id': domain}}\n\n    @api.model\n    def create(self, vals):\n        result = super(MaintenanceRequest, self).create(vals)\n        if result.employee_id.user_id:\n            result.message_subscribe_users(user_ids=[result.employee_id.user_id.id])\n        return result\n\n    @api.multi\n    def write(self, vals):\n        if vals.get('employee_id'):\n            employee = self.env['hr.employee'].browse(vals['employee_id'])\n            if employee and employee.user_id:\n                self.message_subscribe_users(user_ids=[employee.user_id.id])\n        return super(MaintenanceRequest, self).write(vals)\n\n    @api.model\n    def message_new(self, msg, custom_values=None):\n        \n        if custom_values is None:\n            custom_values = {}\n        email = tools.email_split(msg.get('from')) and tools.email_split(msg.get('from'))[0] or False\n        user = self.env['res.users'].search([('login', '=', email)], limit=1)\n        if user:\n            employee = self.env['hr.employee'].search([('user_id', '=', user.id)], limit=1)\n            if employee:\n                custom_values['employee_id'] = employee and employee[0].id\n        return super(MaintenanceRequest, self).message_new(msg, custom_values=custom_values)\n", "comments": "    overrides mail thread message new called mailgateway             message process              this override updates document according email                     coding  utf 8        subscribe employee department manager equipment assign     subscribe employee department manager equipment assign employee department  ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo import api, fields, models, tools\n\n\nclass MaintenanceEquipment(models.Model):\n    _inherit = 'maintenance.equipment'\n\n    employee_id = fields.Many2one('hr.employee', string='Assigned to Employee', track_visibility='onchange')\n    department_id = fields.Many2one('hr.department', string='Assigned to Department', track_visibility='onchange')\n    equipment_assign_to = fields.Selection(\n        [('department', 'Department'), ('employee', 'Employee') ,('other', 'Other')],\n        string='Used By',\n        required=True,\n        default='employee')\n    owner_user_id = fields.Many2one(compute='_compute_owner', store=True)\n\n    @api.one\n    @api.depends('employee_id', 'department_id', 'equipment_assign_to')\n    def _compute_owner(self):\n        self.owner_user_id = self.env.user.id\n        if self.equipment_assign_to == 'employee':\n            self.owner_user_id = self.employee_id.user_id.id\n        elif self.equipment_assign_to == 'department':\n            self.owner_user_id = self.department_id.manager_id.user_id.id\n\n    @api.onchange('equipment_assign_to')\n    def _onchange_equipment_assign_to(self):\n        if self.equipment_assign_to == 'employee':\n            self.department_id = False\n        if self.equipment_assign_to == 'department':\n            self.employee_id = False\n        self.assign_date = fields.Date.context_today(self)\n\n    @api.model\n    def create(self, vals):\n        equipment = super(MaintenanceEquipment, self).create(vals)\n        # subscribe employee or department manager when equipment assign to him.\n        user_ids = []\n        if equipment.employee_id and equipment.employee_id.user_id:\n            user_ids.append(equipment.employee_id.user_id.id)\n        if equipment.department_id and equipment.department_id.manager_id and equipment.department_id.manager_id.user_id:\n            user_ids.append(equipment.department_id.manager_id.user_id.id)\n        if user_ids:\n            equipment.message_subscribe_users(user_ids=user_ids)\n        return equipment\n\n    @api.multi\n    def write(self, vals):\n        user_ids = []\n        # subscribe employee or department manager when equipment assign to employee or department.\n        if vals.get('employee_id'):\n            user_id = self.env['hr.employee'].browse(vals['employee_id'])['user_id']\n            if user_id:\n                user_ids.append(user_id.id)\n        if vals.get('department_id'):\n            department = self.env['hr.department'].browse(vals['department_id'])\n            if department and department.manager_id and department.manager_id.user_id:\n                user_ids.append(department.manager_id.user_id.id)\n        if user_ids:\n            self.message_subscribe_users(user_ids=user_ids)\n        return super(MaintenanceEquipment, self).write(vals)\n\n    @api.multi\n    def _track_subtype(self, init_values):\n        self.ensure_one()\n        if ('employee_id' in init_values and self.employee_id) or ('department_id' in init_values and self.department_id):\n            return 'maintenance.mt_mat_assign'\n        return super(MaintenanceEquipment, self)._track_subtype(init_values)\n\n\nclass MaintenanceRequest(models.Model):\n    _inherit = 'maintenance.request'\n\n    @api.returns('self')\n    def _default_employee_get(self):\n        return self.env['hr.employee'].search([('user_id', '=', self.env.uid)], limit=1)\n\n    employee_id = fields.Many2one('hr.employee', string='Employee', default=_default_employee_get)\n    department_id = fields.Many2one('hr.department', string='Department')\n    owner_user_id = fields.Many2one(compute='_compute_owner', store=True)\n\n    @api.depends('employee_id', 'department_id')\n    def _compute_owner(self):\n        if self.equipment_id.equipment_assign_to == 'employee':\n            self.owner_user_id = self.employee_id.user_id.id\n        elif self.equipment_id.equipment_assign_to == 'department':\n            self.owner_user_id = self.department_id.manager_id.user_id.id\n\n    @api.onchange('employee_id', 'department_id')\n    def onchange_department_or_employee_id(self):\n        domain = []\n        if self.department_id:\n            domain = [('department_id', '=', self.department_id.id)]\n        if self.employee_id and self.department_id:\n            domain = ['|'] + domain\n        if self.employee_id:\n            domain = domain + ['|', ('employee_id', '=', self.employee_id.id), ('employee_id', '=', None)]\n        equipment = self.env['maintenance.equipment'].search(domain, limit=2)\n        if len(equipment) == 1:\n            self.equipment_id = equipment\n        return {'domain': {'equipment_id': domain}}\n\n    @api.model\n    def create(self, vals):\n        result = super(MaintenanceRequest, self).create(vals)\n        if result.employee_id.user_id:\n            result.message_subscribe_users(user_ids=[result.employee_id.user_id.id])\n        return result\n\n    @api.multi\n    def write(self, vals):\n        if vals.get('employee_id'):\n            employee = self.env['hr.employee'].browse(vals['employee_id'])\n            if employee and employee.user_id:\n                self.message_subscribe_users(user_ids=[employee.user_id.id])\n        return super(MaintenanceRequest, self).write(vals)\n\n    @api.model\n    def message_new(self, msg, custom_values=None):\n        \"\"\" Overrides mail_thread message_new that is called by the mailgateway\n            through message_process.\n            This override updates the document according to the email.\n        \"\"\"\n        if custom_values is None:\n            custom_values = {}\n        email = tools.email_split(msg.get('from')) and tools.email_split(msg.get('from'))[0] or False\n        user = self.env['res.users'].search([('login', '=', email)], limit=1)\n        if user:\n            employee = self.env['hr.employee'].search([('user_id', '=', user.id)], limit=1)\n            if employee:\n                custom_values['employee_id'] = employee and employee[0].id\n        return super(MaintenanceRequest, self).message_new(msg, custom_values=custom_values)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "equipment.py", "id": "474dba96fcd6f5bde5b0266a9a7c9525", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_maintenance/models/equipment.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}