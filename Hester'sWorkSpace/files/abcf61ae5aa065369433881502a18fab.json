{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    js_to_json,\n    int_or_none,\n    unescapeHTML,\n)\n\n\nclass ReutersIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?reuters\\.com/.*?\\?.*?videoId=(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.reuters.com/video/2016/05/20/san-francisco-police-chief-resigns?videoId=368575562',\n        'md5': '8015113643a0b12838f160b0b81cc2ee',\n        'info_dict': {\n            'id': '368575562',\n            'ext': 'mp4',\n            'title': 'San Francisco police chief resigns',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(\n            'http://www.reuters.com/assets/iframe/yovideo?videoId=%s' % video_id, video_id)\n        video_data = js_to_json(self._search_regex(\n            r'(?s)Reuters\\.yovideo\\.drawPlayer\\(({.*?})\\);',\n            webpage, 'video data'))\n\n        def get_json_value(key, fatal=False):\n            return self._search_regex(r'\"%s\"\\s*:\\s*\"([^\"]+)\"' % key, video_data, key, fatal=fatal)\n\n        title = unescapeHTML(get_json_value('title', fatal=True))\n        mmid, fid = re.search(r',/(\\d+)\\?f=(\\d+)', get_json_value('flv', fatal=True)).groups()\n\n        mas_data = self._download_json(\n            'http://mas-e.cds1.yospace.com/mas/%s/%s?trans=json' % (mmid, fid),\n            video_id, transform_source=js_to_json)\n        formats = []\n        for f in mas_data:\n            f_url = f.get('url')\n            if not f_url:\n                continue\n            method = f.get('method')\n            if method == 'hls':\n                formats.extend(self._extract_m3u8_formats(\n                    f_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n            else:\n                container = f.get('container')\n                ext = '3gp' if method == 'mobile' else container\n                formats.append({\n                    'format_id': ext,\n                    'url': f_url,\n                    'ext': ext,\n                    'container': container if method != 'mobile' else None,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': get_json_value('thumb'),\n            'duration': int_or_none(get_json_value('seconds')),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    js_to_json,\n    int_or_none,\n    unescapeHTML,\n)\n\n\nclass ReutersIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?reuters\\.com/.*?\\?.*?videoId=(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.reuters.com/video/2016/05/20/san-francisco-police-chief-resigns?videoId=368575562',\n        'md5': '8015113643a0b12838f160b0b81cc2ee',\n        'info_dict': {\n            'id': '368575562',\n            'ext': 'mp4',\n            'title': 'San Francisco police chief resigns',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(\n            'http://www.reuters.com/assets/iframe/yovideo?videoId=%s' % video_id, video_id)\n        video_data = js_to_json(self._search_regex(\n            r'(?s)Reuters\\.yovideo\\.drawPlayer\\(({.*?})\\);',\n            webpage, 'video data'))\n\n        def get_json_value(key, fatal=False):\n            return self._search_regex(r'\"%s\"\\s*:\\s*\"([^\"]+)\"' % key, video_data, key, fatal=fatal)\n\n        title = unescapeHTML(get_json_value('title', fatal=True))\n        mmid, fid = re.search(r',/(\\d+)\\?f=(\\d+)', get_json_value('flv', fatal=True)).groups()\n\n        mas_data = self._download_json(\n            'http://mas-e.cds1.yospace.com/mas/%s/%s?trans=json' % (mmid, fid),\n            video_id, transform_source=js_to_json)\n        formats = []\n        for f in mas_data:\n            f_url = f.get('url')\n            if not f_url:\n                continue\n            method = f.get('method')\n            if method == 'hls':\n                formats.extend(self._extract_m3u8_formats(\n                    f_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n            else:\n                container = f.get('container')\n                ext = '3gp' if method == 'mobile' else container\n                formats.append({\n                    'format_id': ext,\n                    'url': f_url,\n                    'ext': ext,\n                    'container': container if method != 'mobile' else None,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': get_json_value('thumb'),\n            'duration': int_or_none(get_json_value('seconds')),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "reuters.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/reuters.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}