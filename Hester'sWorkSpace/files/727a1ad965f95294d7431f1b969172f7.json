{"author": "ansible", "code": "\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['stableinterface'],\n                    'supported_by': 'core'}\n\n\nDOCUMENTATION = '''\n---\nmodule: raw\nshort_description: Executes a low-down and dirty SSH command\nversion_added: historical\noptions:\n  free_form:\n    description:\n      - the raw module takes a free form command to run. There is no parameter actually named 'free form'; see the examples!\n    required: true\n  executable:\n    description:\n      - change the shell used to execute the command. Should be an absolute path to the executable.\n      - when using privilege escalation (C(become)), a default shell will be assigned if one is not provided\n        as privilege escalation requires a shell.\n    required: false\n    version_added: \"1.0\"\ndescription:\n     - Executes a low-down and dirty SSH command, not going through the module\n       subsystem. This is useful and should only be done in two cases. The\n       first case is installing C(python-simplejson) on older (Python 2.4 and\n       before) hosts that need it as a dependency to run modules, since nearly\n       all core modules require it. Another is speaking to any devices such as\n       routers that do not have any Python installed. In any other case, using\n       the M(shell) or M(command) module is much more appropriate. Arguments\n       given to C(raw) are run directly through the configured remote shell.\n       Standard output, error output and return code are returned when\n       available. There is no change handler support for this module.\n     - This module does not require python on the remote system, much like\n       the M(script) module.\n     - This module is also supported for Windows targets.\nnotes:\n    - \"If using raw from a playbook, you may need to disable fact gathering\n      using C(gather_facts: no) if you're using C(raw) to bootstrap python\n      onto the machine.\"\n    - If you want to execute a command securely and predictably, it may be\n      better to use the M(command) or M(shell) modules instead.\n    - the C(environment) keyword does not work with raw normally, it requires a shell\n      which means it only works if C(executable) is set or using the module\n      with privilege escalation (C(become)).\n    - This module is also supported for Windows targets.\nauthor:\n    - Ansible Core Team\n    - Michael DeHaan\n'''\n\nEXAMPLES = '''\n- name: Bootstrap a legacy python 2.4 host\n  raw: yum -y install python-simplejson\n\n- name: Bootstrap a host without python2 installed\n  raw: dnf install -y python2 python2-dnf libselinux-python\n\n- name: Run a command that uses non-posix shell-isms (in this example /bin/sh doesn't handle redirection and wildcards together but bash does)\n  raw: cat < /tmp/*txt\n  args:\n    executable: /bin/bash\n\n- name: safely use templated variables. Always use quote filter to avoid injection issues.\n  raw: \"{{package_mgr|||\n", "comments": "        module  raw short description  executes low dirty ssh command version added  historical options    free form      description          raw module takes free form command run  there parameter actually named  free form   see examples      required  true   executable      description          change shell used execute command  should absolute path executable          using privilege escalation (c(become))  default shell assigned one provided         privilege escalation requires shell      required  false     version added   1 0  description         executes low dirty ssh command  going module        subsystem  this useful done two cases  the        first case installing c(python simplejson) older (python 2 4        before) hosts need dependency run modules  since nearly        core modules require  another speaking devices        routers python installed  in case  using        m(shell) m(command) module much appropriate  arguments        given c(raw) run directly configured remote shell         standard output  error output return code returned        available  there change handler support module         this module require python remote system  much like        m(script) module         this module also supported windows targets  notes         if using raw playbook  may need disable fact gathering       using c(gather facts  no) using c(raw) bootstrap python       onto machine         if want execute command securely predictably  may       better use m(command) m(shell) modules instead        c(environment) keyword work raw normally  requires shell       means works c(executable) set using module       privilege escalation (c(become))        this module also supported windows targets  author        ansible core team       michael dehaan      examples         name  bootstrap legacy python 2 4 host   raw  yum  install python simplejson    name  bootstrap host without python2 installed   raw  dnf install  python2 python2 dnf libselinux python    name  run command uses non posix shell isms (in example  bin sh handle redirection wildcards together bash does)   raw  cat    tmp  txt   args      executable   bin bash    name  safely use templated variables  always use quote filter avoid injection issues    raw     package mgr quote     pkg flags quote   install   python simplejson quote           virtual module entirely implemented server side    copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "# this is a virtual module that is entirely implemented server side\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['stableinterface'],\n                    'supported_by': 'core'}\n\n\nDOCUMENTATION = '''\n---\nmodule: raw\nshort_description: Executes a low-down and dirty SSH command\nversion_added: historical\noptions:\n  free_form:\n    description:\n      - the raw module takes a free form command to run. There is no parameter actually named 'free form'; see the examples!\n    required: true\n  executable:\n    description:\n      - change the shell used to execute the command. Should be an absolute path to the executable.\n      - when using privilege escalation (C(become)), a default shell will be assigned if one is not provided\n        as privilege escalation requires a shell.\n    required: false\n    version_added: \"1.0\"\ndescription:\n     - Executes a low-down and dirty SSH command, not going through the module\n       subsystem. This is useful and should only be done in two cases. The\n       first case is installing C(python-simplejson) on older (Python 2.4 and\n       before) hosts that need it as a dependency to run modules, since nearly\n       all core modules require it. Another is speaking to any devices such as\n       routers that do not have any Python installed. In any other case, using\n       the M(shell) or M(command) module is much more appropriate. Arguments\n       given to C(raw) are run directly through the configured remote shell.\n       Standard output, error output and return code are returned when\n       available. There is no change handler support for this module.\n     - This module does not require python on the remote system, much like\n       the M(script) module.\n     - This module is also supported for Windows targets.\nnotes:\n    - \"If using raw from a playbook, you may need to disable fact gathering\n      using C(gather_facts: no) if you're using C(raw) to bootstrap python\n      onto the machine.\"\n    - If you want to execute a command securely and predictably, it may be\n      better to use the M(command) or M(shell) modules instead.\n    - the C(environment) keyword does not work with raw normally, it requires a shell\n      which means it only works if C(executable) is set or using the module\n      with privilege escalation (C(become)).\n    - This module is also supported for Windows targets.\nauthor:\n    - Ansible Core Team\n    - Michael DeHaan\n'''\n\nEXAMPLES = '''\n- name: Bootstrap a legacy python 2.4 host\n  raw: yum -y install python-simplejson\n\n- name: Bootstrap a host without python2 installed\n  raw: dnf install -y python2 python2-dnf libselinux-python\n\n- name: Run a command that uses non-posix shell-isms (in this example /bin/sh doesn't handle redirection and wildcards together but bash does)\n  raw: cat < /tmp/*txt\n  args:\n    executable: /bin/bash\n\n- name: safely use templated variables. Always use quote filter to avoid injection issues.\n  raw: \"{{package_mgr|quote}} {{pkg_flags|quote}} install {{python_simplejson|quote}}\"\n'''\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "raw.py", "id": "727a1ad965f95294d7431f1b969172f7", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/commands/raw.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}