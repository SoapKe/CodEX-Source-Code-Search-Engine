{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport functools\nimport logging\nimport mock\nimport pytest\n\nfrom sentry.exceptions import InvalidConfiguration\nfrom sentry.testutils.cases import TestCase\nfrom sentry.utils.redis import (\n    ClusterManager, _shared_pool, get_cluster_from_options, _RedisCluster, logger\n)\n\n\nlogger.setLevel(logging.ERROR)\n\nmake_manager = functools.partial(\n    ClusterManager,\n    {\n        'redis.clusters': {\n            'foo': {\n                'hosts': {\n                    0: {\n                        'db': 0\n                    },\n                },\n            },\n            'bar': {\n                'hosts': {\n                    0: {\n                        'db': 0\n                    },\n                    1: {\n                        'db': 1\n                    },\n                }\n            },\n            'baz': {\n                'is_redis_cluster': True,\n                'hosts': {\n                    0: {},\n                },\n            },\n        },\n    },\n)\n\n\nclass ClusterManagerTestCase(TestCase):\n    def test_get(self):\n        manager = make_manager()\n        assert manager.get('foo') is manager.get('foo')\n        assert manager.get('foo') is not manager.get('bar')\n        assert manager.get('foo').pool_cls is _shared_pool\n        with pytest.raises(KeyError):\n            manager.get('invalid')\n\n    @mock.patch('sentry.utils.redis.RetryingStrictRedisCluster')\n    def test_specific_cluster(self, cluster):\n        manager = make_manager(cluster_type=_RedisCluster)\n        slo = manager.get('baz')\n\n        \n        \n        assert slo._setupfunc() is cluster.return_value\n\n        with pytest.raises(KeyError):\n            manager.get('foo')\n\n\ndef test_get_cluster_from_options():\n    backend = object()\n    manager = make_manager()\n\n    cluster, options = get_cluster_from_options(\n        backend,\n        {\n            'cluster': 'foo',\n            'foo': 'bar',\n        },\n        cluster_manager=manager,\n    )\n\n    assert cluster is manager.get('foo')\n    assert cluster.pool_cls is _shared_pool\n    assert options == {'foo': 'bar'}\n\n    cluster, options = get_cluster_from_options(\n        backend,\n        {\n            'hosts': {\n                0: {\n                    'db': 0\n                },\n            },\n            'foo': 'bar',\n        },\n        cluster_manager=manager,\n    )\n\n    assert cluster is not manager.get('foo')  \n    assert cluster.pool_cls is _shared_pool\n    assert options == {'foo': 'bar'}\n\n    with pytest.raises(InvalidConfiguration):\n        cluster, options = get_cluster_from_options(\n            backend,\n            {\n                'hosts': {\n                    0: {\n                        'db': 0\n                    },\n                },\n                'cluster': 'foo',\n                'foo': 'bar',\n            },\n            cluster_manager=manager,\n        )\n", "comments": "  silence connection warnings    we wrap cluster simple lazy object  force creation    object verify correct     kind silly assertion ", "content": "from __future__ import absolute_import\n\nimport functools\nimport logging\nimport mock\nimport pytest\n\nfrom sentry.exceptions import InvalidConfiguration\nfrom sentry.testutils.cases import TestCase\nfrom sentry.utils.redis import (\n    ClusterManager, _shared_pool, get_cluster_from_options, _RedisCluster, logger\n)\n\n# Silence connection warnings\nlogger.setLevel(logging.ERROR)\n\nmake_manager = functools.partial(\n    ClusterManager,\n    {\n        'redis.clusters': {\n            'foo': {\n                'hosts': {\n                    0: {\n                        'db': 0\n                    },\n                },\n            },\n            'bar': {\n                'hosts': {\n                    0: {\n                        'db': 0\n                    },\n                    1: {\n                        'db': 1\n                    },\n                }\n            },\n            'baz': {\n                'is_redis_cluster': True,\n                'hosts': {\n                    0: {},\n                },\n            },\n        },\n    },\n)\n\n\nclass ClusterManagerTestCase(TestCase):\n    def test_get(self):\n        manager = make_manager()\n        assert manager.get('foo') is manager.get('foo')\n        assert manager.get('foo') is not manager.get('bar')\n        assert manager.get('foo').pool_cls is _shared_pool\n        with pytest.raises(KeyError):\n            manager.get('invalid')\n\n    @mock.patch('sentry.utils.redis.RetryingStrictRedisCluster')\n    def test_specific_cluster(self, cluster):\n        manager = make_manager(cluster_type=_RedisCluster)\n        slo = manager.get('baz')\n\n        # We wrap the cluster in a Simple Lazy Object, force creation of the\n        # object to verify it's correct.\n        assert slo._setupfunc() is cluster.return_value\n\n        with pytest.raises(KeyError):\n            manager.get('foo')\n\n\ndef test_get_cluster_from_options():\n    backend = object()\n    manager = make_manager()\n\n    cluster, options = get_cluster_from_options(\n        backend,\n        {\n            'cluster': 'foo',\n            'foo': 'bar',\n        },\n        cluster_manager=manager,\n    )\n\n    assert cluster is manager.get('foo')\n    assert cluster.pool_cls is _shared_pool\n    assert options == {'foo': 'bar'}\n\n    cluster, options = get_cluster_from_options(\n        backend,\n        {\n            'hosts': {\n                0: {\n                    'db': 0\n                },\n            },\n            'foo': 'bar',\n        },\n        cluster_manager=manager,\n    )\n\n    assert cluster is not manager.get('foo')  # kind of a silly assertion\n    assert cluster.pool_cls is _shared_pool\n    assert options == {'foo': 'bar'}\n\n    with pytest.raises(InvalidConfiguration):\n        cluster, options = get_cluster_from_options(\n            backend,\n            {\n                'hosts': {\n                    0: {\n                        'db': 0\n                    },\n                },\n                'cluster': 'foo',\n                'foo': 'bar',\n            },\n            cluster_manager=manager,\n        )\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_redis.py", "id": "716f6d3069457ab9d1e6c887960791cf", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/test_redis.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}