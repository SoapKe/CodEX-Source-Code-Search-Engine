{"author": "docker", "code": "\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport codecs\nimport os\nimport re\nimport sys\n\nimport pkg_resources\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef read(*parts):\n    path = os.path.join(os.path.dirname(__file__), *parts)\n    with codecs.open(path, encoding='utf-8') as fobj:\n        return fobj.read()\n\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n\ninstall_requires = [\n    'cached-property >= 1.2.0, < 2',\n    'docopt >= 0.6.1, < 0.7',\n    'PyYAML >= 3.10, < 4',\n    'requests >= 2.6.1, != 2.11.0, != 2.12.2, != 2.18.0, < 2.19',\n    'texttable >= 0.9.0, < 0.10',\n    'websocket-client >= 0.32.0, < 1.0',\n    'docker >= 3.1.1, < 4.0',\n    'dockerpty >= 0.4.1, < 0.5',\n    'six >= 1.3.0, < 2',\n    'jsonschema >= 2.5.1, < 3',\n]\n\n\ntests_require = [\n    'pytest',\n]\n\n\nif sys.version_info[:2] < (3, 4):\n    tests_require.append('mock >= 1.0.1')\n\nextras_require = {\n    ':python_version < \"3.4\"': ['enum34 >= 1.0.4, < 2'],\n    ':python_version < \"3.5\"': ['backports.ssl_match_hostname >= 3.5'],\n    ':python_version < \"3.3\"': ['ipaddress >= 1.0.16'],\n    ':sys_platform == \"win32\"': ['colorama >= 0.3.9, < 0.4'],\n    'socks': ['PySocks >= 1.5.6, != 1.5.7, < 2'],\n}\n\n\ntry:\n    if 'bdist_wheel' not in sys.argv:\n        for key, value in extras_require.items():\n            if key.startswith(':') and pkg_resources.evaluate_marker(key[1:]):\n                install_requires.extend(value)\nexcept Exception as e:\n    print(\"Failed to compute platform dependencies: {}. \".format(e) +\n          \"All dependencies will be installed as a result.\", file=sys.stderr)\n    for key, value in extras_require.items():\n        if key.startswith(':'):\n            install_requires.extend(value)\n\n\nsetup(\n    name='docker-compose',\n    version=find_version(\"compose\", \"__init__.py\"),\n    description='Multi-container orchestration for Docker',\n    url='https://www.docker.com/',\n    author='Docker, Inc.',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=['tests.*', 'tests']),\n    include_package_data=True,\n    test_suite='nose.collector',\n    install_requires=install_requires,\n    extras_require=extras_require,\n    tests_require=tests_require,\n    entry_points=\"\"\"\n    [console_scripts]\n    docker-compose=compose.cli.main:main\n    \"\"\",\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.6',\n    ],\n)\n", "comments": "         console scripts      docker compose compose cli main main             usr bin env python        coding  utf 8     ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport codecs\nimport os\nimport re\nimport sys\n\nimport pkg_resources\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef read(*parts):\n    path = os.path.join(os.path.dirname(__file__), *parts)\n    with codecs.open(path, encoding='utf-8') as fobj:\n        return fobj.read()\n\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n\ninstall_requires = [\n    'cached-property >= 1.2.0, < 2',\n    'docopt >= 0.6.1, < 0.7',\n    'PyYAML >= 3.10, < 4',\n    'requests >= 2.6.1, != 2.11.0, != 2.12.2, != 2.18.0, < 2.19',\n    'texttable >= 0.9.0, < 0.10',\n    'websocket-client >= 0.32.0, < 1.0',\n    'docker >= 3.1.1, < 4.0',\n    'dockerpty >= 0.4.1, < 0.5',\n    'six >= 1.3.0, < 2',\n    'jsonschema >= 2.5.1, < 3',\n]\n\n\ntests_require = [\n    'pytest',\n]\n\n\nif sys.version_info[:2] < (3, 4):\n    tests_require.append('mock >= 1.0.1')\n\nextras_require = {\n    ':python_version < \"3.4\"': ['enum34 >= 1.0.4, < 2'],\n    ':python_version < \"3.5\"': ['backports.ssl_match_hostname >= 3.5'],\n    ':python_version < \"3.3\"': ['ipaddress >= 1.0.16'],\n    ':sys_platform == \"win32\"': ['colorama >= 0.3.9, < 0.4'],\n    'socks': ['PySocks >= 1.5.6, != 1.5.7, < 2'],\n}\n\n\ntry:\n    if 'bdist_wheel' not in sys.argv:\n        for key, value in extras_require.items():\n            if key.startswith(':') and pkg_resources.evaluate_marker(key[1:]):\n                install_requires.extend(value)\nexcept Exception as e:\n    print(\"Failed to compute platform dependencies: {}. \".format(e) +\n          \"All dependencies will be installed as a result.\", file=sys.stderr)\n    for key, value in extras_require.items():\n        if key.startswith(':'):\n            install_requires.extend(value)\n\n\nsetup(\n    name='docker-compose',\n    version=find_version(\"compose\", \"__init__.py\"),\n    description='Multi-container orchestration for Docker',\n    url='https://www.docker.com/',\n    author='Docker, Inc.',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=['tests.*', 'tests']),\n    include_package_data=True,\n    test_suite='nose.collector',\n    install_requires=install_requires,\n    extras_require=extras_require,\n    tests_require=tests_require,\n    entry_points=\"\"\"\n    [console_scripts]\n    docker-compose=compose.cli.main:main\n    \"\"\",\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.6',\n    ],\n)\n", "description": "Define and run multi-container applications with Docker", "file_name": "setup.py", "id": "fca577a713a2639fe04113d92171e619", "language": "Python", "project_name": "compose", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/docker-compose/docker-compose-867ad15/setup.py", "save_time": "", "source": "", "update_at": "2018-03-13T22:03:14Z", "url": "https://github.com/docker/compose", "wiki": false}