{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    qualities,\n)\n\n\nclass CoubIE(InfoExtractor):\n    _VALID_URL = r'(?:coub:|https?://(?:coub\\.com/(?:view|embed|coubs)/|c-cdn\\.coub\\.com/fb-player\\.swf\\?.*\\bcoub(?:ID|id)=))(?P<id>[\\da-z]+)'\n\n    _TESTS = [{\n        'url': 'http://coub.com/view/5u5n1',\n        'info_dict': {\n            'id': '5u5n1',\n            'ext': 'mp4',\n            'title': 'The Matrix Moonwalk',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 4.6,\n            'timestamp': 1428527772,\n            'upload_date': '20150408',\n            'uploader': 'Artyom Loskutnikov',\n            'uploader_id': 'artyom.loskutnikov',\n            'view_count': int,\n            'like_count': int,\n            'repost_count': int,\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'http://c-cdn.coub.com/fb-player.swf?bot_type=vk&coubID=7w5a4',\n        'only_matching': True,\n    }, {\n        'url': 'coub:5u5n1',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://coub.com/view/237d5l5h',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        coub = self._download_json(\n            'http://coub.com/api/v2/coubs/%s.json' % video_id, video_id)\n\n        if coub.get('error'):\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, coub['error']), expected=True)\n\n        title = coub['title']\n\n        file_versions = coub['file_versions']\n\n        QUALITIES = ('low', 'med', 'high')\n\n        MOBILE = 'mobile'\n        IPHONE = 'iphone'\n        HTML5 = 'html5'\n\n        SOURCE_PREFERENCE = (MOBILE, IPHONE, HTML5)\n\n        quality_key = qualities(QUALITIES)\n        preference_key = qualities(SOURCE_PREFERENCE)\n\n        formats = []\n\n        for kind, items in file_versions.get(HTML5, {}).items():\n            if kind not in ('video', 'audio'):\n                continue\n            if not isinstance(items, dict):\n                continue\n            for quality, item in items.items():\n                if not isinstance(item, dict):\n                    continue\n                item_url = item.get('url')\n                if not item_url:\n                    continue\n                formats.append({\n                    'url': item_url,\n                    'format_id': '%s-%s-%s' % (HTML5, kind, quality),\n                    'filesize': int_or_none(item.get('size')),\n                    'vcodec': 'none' if kind == 'audio' else None,\n                    'quality': quality_key(quality),\n                    'preference': preference_key(HTML5),\n                })\n\n        iphone_url = file_versions.get(IPHONE, {}).get('url')\n        if iphone_url:\n            formats.append({\n                'url': iphone_url,\n                'format_id': IPHONE,\n                'preference': preference_key(IPHONE),\n            })\n\n        mobile_url = file_versions.get(MOBILE, {}).get('audio_url')\n        if mobile_url:\n            formats.append({\n                'url': mobile_url,\n                'format_id': '%s-audio' % MOBILE,\n                'preference': preference_key(MOBILE),\n            })\n\n        self._sort_formats(formats)\n\n        thumbnail = coub.get('picture')\n        duration = float_or_none(coub.get('duration'))\n        timestamp = parse_iso8601(coub.get('published_at') or coub.get('created_at'))\n        uploader = coub.get('channel', {}).get('title')\n        uploader_id = coub.get('channel', {}).get('permalink')\n\n        view_count = int_or_none(coub.get('views_count') or coub.get('views_increase_count'))\n        like_count = int_or_none(coub.get('likes_count'))\n        repost_count = int_or_none(coub.get('recoubs_count'))\n\n        age_restricted = coub.get('age_restricted', coub.get('age_restricted_by_admin'))\n        if age_restricted is not None:\n            age_limit = 18 if age_restricted is True else 0\n        else:\n            age_limit = None\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'view_count': view_count,\n            'like_count': like_count,\n            'repost_count': repost_count,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# longer video id\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    qualities,\n)\n\n\nclass CoubIE(InfoExtractor):\n    _VALID_URL = r'(?:coub:|https?://(?:coub\\.com/(?:view|embed|coubs)/|c-cdn\\.coub\\.com/fb-player\\.swf\\?.*\\bcoub(?:ID|id)=))(?P<id>[\\da-z]+)'\n\n    _TESTS = [{\n        'url': 'http://coub.com/view/5u5n1',\n        'info_dict': {\n            'id': '5u5n1',\n            'ext': 'mp4',\n            'title': 'The Matrix Moonwalk',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 4.6,\n            'timestamp': 1428527772,\n            'upload_date': '20150408',\n            'uploader': 'Artyom Loskutnikov',\n            'uploader_id': 'artyom.loskutnikov',\n            'view_count': int,\n            'like_count': int,\n            'repost_count': int,\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'http://c-cdn.coub.com/fb-player.swf?bot_type=vk&coubID=7w5a4',\n        'only_matching': True,\n    }, {\n        'url': 'coub:5u5n1',\n        'only_matching': True,\n    }, {\n        # longer video id\n        'url': 'http://coub.com/view/237d5l5h',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        coub = self._download_json(\n            'http://coub.com/api/v2/coubs/%s.json' % video_id, video_id)\n\n        if coub.get('error'):\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, coub['error']), expected=True)\n\n        title = coub['title']\n\n        file_versions = coub['file_versions']\n\n        QUALITIES = ('low', 'med', 'high')\n\n        MOBILE = 'mobile'\n        IPHONE = 'iphone'\n        HTML5 = 'html5'\n\n        SOURCE_PREFERENCE = (MOBILE, IPHONE, HTML5)\n\n        quality_key = qualities(QUALITIES)\n        preference_key = qualities(SOURCE_PREFERENCE)\n\n        formats = []\n\n        for kind, items in file_versions.get(HTML5, {}).items():\n            if kind not in ('video', 'audio'):\n                continue\n            if not isinstance(items, dict):\n                continue\n            for quality, item in items.items():\n                if not isinstance(item, dict):\n                    continue\n                item_url = item.get('url')\n                if not item_url:\n                    continue\n                formats.append({\n                    'url': item_url,\n                    'format_id': '%s-%s-%s' % (HTML5, kind, quality),\n                    'filesize': int_or_none(item.get('size')),\n                    'vcodec': 'none' if kind == 'audio' else None,\n                    'quality': quality_key(quality),\n                    'preference': preference_key(HTML5),\n                })\n\n        iphone_url = file_versions.get(IPHONE, {}).get('url')\n        if iphone_url:\n            formats.append({\n                'url': iphone_url,\n                'format_id': IPHONE,\n                'preference': preference_key(IPHONE),\n            })\n\n        mobile_url = file_versions.get(MOBILE, {}).get('audio_url')\n        if mobile_url:\n            formats.append({\n                'url': mobile_url,\n                'format_id': '%s-audio' % MOBILE,\n                'preference': preference_key(MOBILE),\n            })\n\n        self._sort_formats(formats)\n\n        thumbnail = coub.get('picture')\n        duration = float_or_none(coub.get('duration'))\n        timestamp = parse_iso8601(coub.get('published_at') or coub.get('created_at'))\n        uploader = coub.get('channel', {}).get('title')\n        uploader_id = coub.get('channel', {}).get('permalink')\n\n        view_count = int_or_none(coub.get('views_count') or coub.get('views_increase_count'))\n        like_count = int_or_none(coub.get('likes_count'))\n        repost_count = int_or_none(coub.get('recoubs_count'))\n\n        age_restricted = coub.get('age_restricted', coub.get('age_restricted_by_admin'))\n        if age_restricted is not None:\n            age_limit = 18 if age_restricted is True else 0\n        else:\n            age_limit = None\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'view_count': view_count,\n            'like_count': like_count,\n            'repost_count': repost_count,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "coub.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/coub.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}