{"author": "nvbn", "code": "import pytest\nfrom thefuck.rules.git_commit_amend import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.mark.parametrize('script, output', [\n    ('git commit -m \"test\"', 'test output'),\n    ('git commit', '')])\ndef test_match(output, script):\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script', [\n    'git branch foo',\n    'git checkout feature/test_commit',\n    'git push'])\ndef test_not_match(script):\n    assert not match(Command(script, ''))\n\n\n@pytest.mark.parametrize('script', [\n    ('git commit -m \"test commit\"'),\n    ('git commit')])\ndef test_get_new_command(script):\n    assert get_new_command(Command(script, '')) == 'git commit --amend'\n", "comments": "", "content": "import pytest\nfrom thefuck.rules.git_commit_amend import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.mark.parametrize('script, output', [\n    ('git commit -m \"test\"', 'test output'),\n    ('git commit', '')])\ndef test_match(output, script):\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script', [\n    'git branch foo',\n    'git checkout feature/test_commit',\n    'git push'])\ndef test_not_match(script):\n    assert not match(Command(script, ''))\n\n\n@pytest.mark.parametrize('script', [\n    ('git commit -m \"test commit\"'),\n    ('git commit')])\ndef test_get_new_command(script):\n    assert get_new_command(Command(script, '')) == 'git commit --amend'\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_git_commit_amend.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_git_commit_amend.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}