{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport logging\nimport re\n\nfrom odoo import api, models\n\nfrom suds.client import Client\n\n_logger = logging.getLogger(__name__)\n\ntry:\n    import stdnum.eu.vat as stdnum_vat\nexcept ImportError:\n    _logger.warning('Python `stdnum` library not found, unable to call VIES service to detect address based on VAT number.')\n    stdnum_vat = None\n\n\nclass ResPartner(models.Model):\n    _inherit = 'res.partner'\n\n    @api.onchange('vat')\n    def vies_vat_change(self):\n        def _check_city(lines, country='BE'):\n            if country == 'GB':\n                ukzip = '[A-Z]{1,2}[0-9][0-9A-Z]?\\s?[0-9][A-Z]{2}'\n                if re.match(ukzip, lines[-1]):\n                    cp = lines.pop()\n                    city = lines.pop()\n                    return (cp, city)\n            else:\n                result = re.match('((?:L-|AT-)?[0-9\\-]+[A-Z]{,2}) (.+)', lines[-1])\n                if result:\n                    lines.pop()\n                    return (result.group(1), result.group(2))\n            return False\n\n        def _set_address_field(partner, field, value):\n            partner[field] = value\n            non_set_address_fields.remove(field)\n\n        if stdnum_vat is None:\n            return {}\n\n        for partner in self:\n            \n            \n            non_set_address_fields = set(['street', 'street2', 'city', 'zip', 'state_id', 'country_id'])\n            if not partner.vat:\n                return {}\n            if len(partner.vat) > 5 and partner.vat[:2].lower() in stdnum_vat.country_codes:\n                # Equivalent to stdnum_vat.check_vies(partner.vat).\n                \n                \n                try:\n                    client = Client(stdnum_vat.vies_wsdl, timeout=5)\n                    partner_vat = stdnum_vat.compact(partner.vat)\n                    result = client.service.checkVat(partner_vat[:2], partner_vat[2:])\n                except:\n                    \n                    return {}\n\n                if not result['valid']:\n                    return {}\n\n                if (not partner.name) and (result['name'] != '---'):\n                    partner.name = result['name']\n\n                \n                if result['address'] == '---': return {}\n\n                lines = [x for x in result['address'].split(\"\\n\") if x]\n                if len(lines) == 1:\n                    lines = [x.strip() for x in lines[0].split(',') if x]\n                if len(lines) == 1:\n                    lines = [x.strip() for x in lines[0].split('   ') if x]\n\n                _set_address_field(partner, 'street', lines.pop(0))\n\n                if len(lines) > 0:\n                    res = _check_city(lines, result['countryCode'])\n                    if res:\n                        _set_address_field(partner, 'zip', res[0])\n                        _set_address_field(partner, 'city', res[1])\n                if len(lines) > 0:\n                    _set_address_field(partner, 'street2', lines.pop(0))\n\n                country = self.env['res.country'].search([('code', '=', result['countryCode'])], limit=1)\n                _set_address_field(partner, 'country_id', country and country.id or False)\n\n                for field in non_set_address_fields:\n                    if partner[field]:\n                        partner[field] = False\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     if field non set algorithm    wipe anyway    equivalent stdnum vat check vies(partner vat)     however  want add custom timeout suds client    default  120 seconds long     avoid blocking client service unreachable unavailable   parse address vies fill partner data ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport logging\nimport re\n\nfrom odoo import api, models\n\nfrom suds.client import Client\n\n_logger = logging.getLogger(__name__)\n\ntry:\n    import stdnum.eu.vat as stdnum_vat\nexcept ImportError:\n    _logger.warning('Python `stdnum` library not found, unable to call VIES service to detect address based on VAT number.')\n    stdnum_vat = None\n\n\nclass ResPartner(models.Model):\n    _inherit = 'res.partner'\n\n    @api.onchange('vat')\n    def vies_vat_change(self):\n        def _check_city(lines, country='BE'):\n            if country == 'GB':\n                ukzip = '[A-Z]{1,2}[0-9][0-9A-Z]?\\s?[0-9][A-Z]{2}'\n                if re.match(ukzip, lines[-1]):\n                    cp = lines.pop()\n                    city = lines.pop()\n                    return (cp, city)\n            else:\n                result = re.match('((?:L-|AT-)?[0-9\\-]+[A-Z]{,2}) (.+)', lines[-1])\n                if result:\n                    lines.pop()\n                    return (result.group(1), result.group(2))\n            return False\n\n        def _set_address_field(partner, field, value):\n            partner[field] = value\n            non_set_address_fields.remove(field)\n\n        if stdnum_vat is None:\n            return {}\n\n        for partner in self:\n            # If a field is non set in this algorithm\n            # wipe it anyway\n            non_set_address_fields = set(['street', 'street2', 'city', 'zip', 'state_id', 'country_id'])\n            if not partner.vat:\n                return {}\n            if len(partner.vat) > 5 and partner.vat[:2].lower() in stdnum_vat.country_codes:\n                # Equivalent to stdnum_vat.check_vies(partner.vat).\n                # However, we want to add a custom timeout to the suds.client\n                # because by default, it's 120 seconds and this is to long.\n                try:\n                    client = Client(stdnum_vat.vies_wsdl, timeout=5)\n                    partner_vat = stdnum_vat.compact(partner.vat)\n                    result = client.service.checkVat(partner_vat[:2], partner_vat[2:])\n                except:\n                    # Avoid blocking the client when the service is unreachable/unavailable\n                    return {}\n\n                if not result['valid']:\n                    return {}\n\n                if (not partner.name) and (result['name'] != '---'):\n                    partner.name = result['name']\n\n                #parse the address from VIES and fill the partner's data\n                if result['address'] == '---': return {}\n\n                lines = [x for x in result['address'].split(\"\\n\") if x]\n                if len(lines) == 1:\n                    lines = [x.strip() for x in lines[0].split(',') if x]\n                if len(lines) == 1:\n                    lines = [x.strip() for x in lines[0].split('   ') if x]\n\n                _set_address_field(partner, 'street', lines.pop(0))\n\n                if len(lines) > 0:\n                    res = _check_city(lines, result['countryCode'])\n                    if res:\n                        _set_address_field(partner, 'zip', res[0])\n                        _set_address_field(partner, 'city', res[1])\n                if len(lines) > 0:\n                    _set_address_field(partner, 'street2', lines.pop(0))\n\n                country = self.env['res.country'].search([('code', '=', result['countryCode'])], limit=1)\n                _set_address_field(partner, 'country_id', country and country.id or False)\n\n                for field in non_set_address_fields:\n                    if partner[field]:\n                        partner[field] = False\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "res_partner.py", "id": "1f5114834eafb5ab938612407bc19833", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/base_vat_autocomplete/models/res_partner.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}