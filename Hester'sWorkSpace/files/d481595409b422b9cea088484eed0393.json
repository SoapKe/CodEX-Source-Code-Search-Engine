{"author": "bitcoinbook", "code": "\n\nfrom __future__ import print_function\n\nfrom pycoin.key import Key\n\nfrom pycoin.key.validate import is_address_valid, is_wif_valid\nfrom pycoin.services import spendables_for_address\nfrom pycoin.tx.tx_utils import create_signed_tx\n\n\ndef get_address(which):\n    while 1:\n        print(\"enter the %s address=> \" % which, end='')\n        address = input()\n        is_valid = is_address_valid(address)\n        if is_valid:\n            return address\n        print(\"invalid address, please try again\")\n\n\nsrc_address = get_address(\"source\")\nspendables = spendables_for_address(src_address)\nprint(spendables)\n\nwhile 1:\n    print(\"enter the WIF for %s=> \" % src_address, end='')\n    wif = input()\n    is_valid = is_wif_valid(wif)\n    if is_valid:\n        break\n    print(\"invalid wif, please try again\")\n\nkey = Key.from_text(wif)\nif src_address not in (key.address(use_uncompressed=False), key.address(use_uncompressed=True)):\n    print(\"** WIF doesn't correspond to %s\" % src_address)\nprint(\"The secret exponent is %d\" % key.secret_exponent())\n\ndst_address = get_address(\"destination\")\n\ntx = create_signed_tx(spendables, payables=[dst_address], wifs=[wif])\n\nprint(\"here is the signed output transaction\")\nprint(tx.as_hex())\n", "comments": "   usr bin env python ", "content": "#!/usr/bin/env python\n\nfrom __future__ import print_function\n\nfrom pycoin.key import Key\n\nfrom pycoin.key.validate import is_address_valid, is_wif_valid\nfrom pycoin.services import spendables_for_address\nfrom pycoin.tx.tx_utils import create_signed_tx\n\n\ndef get_address(which):\n    while 1:\n        print(\"enter the %s address=> \" % which, end='')\n        address = input()\n        is_valid = is_address_valid(address)\n        if is_valid:\n            return address\n        print(\"invalid address, please try again\")\n\n\nsrc_address = get_address(\"source\")\nspendables = spendables_for_address(src_address)\nprint(spendables)\n\nwhile 1:\n    print(\"enter the WIF for %s=> \" % src_address, end='')\n    wif = input()\n    is_valid = is_wif_valid(wif)\n    if is_valid:\n        break\n    print(\"invalid wif, please try again\")\n\nkey = Key.from_text(wif)\nif src_address not in (key.address(use_uncompressed=False), key.address(use_uncompressed=True)):\n    print(\"** WIF doesn't correspond to %s\" % src_address)\nprint(\"The secret exponent is %d\" % key.secret_exponent())\n\ndst_address = get_address(\"destination\")\n\ntx = create_signed_tx(spendables, payables=[dst_address], wifs=[wif])\n\nprint(\"here is the signed output transaction\")\nprint(tx.as_hex())\n", "description": "Mastering Bitcoin 2nd Edition - Programming the Open Blockchain", "file_name": "pycoin_example.py", "id": "d481595409b422b9cea088484eed0393", "language": "Python", "project_name": "bitcoinbook", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/bitcoinbook-bitcoinbook/bitcoinbook-bitcoinbook-f8b883d/code/pycoin_example.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:38:06Z", "url": "https://github.com/bitcoinbook/bitcoinbook", "wiki": false}