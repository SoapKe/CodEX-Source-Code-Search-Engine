{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    extract_attributes,\n    int_or_none,\n    unified_timestamp,\n)\n\n\nclass PopcornTVIE(InfoExtractor):\n    _VALID_URL = r'https?://[^/]+\\.popcorntv\\.it/guarda/(?P<display_id>[^/]+)/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://animemanga.popcorntv.it/guarda/food-wars-battaglie-culinarie-episodio-01/9183',\n        'md5': '47d65a48d147caf692ab8562fe630b45',\n        'info_dict': {\n            'id': '9183',\n            'display_id': 'food-wars-battaglie-culinarie-episodio-01',\n            'ext': 'mp4',\n            'title': 'Food Wars, Battaglie Culinarie | Episodio 01',\n            'description': 'md5:b8bea378faae4651d3b34c6e112463d0',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'timestamp': 1497610857,\n            'upload_date': '20170616',\n            'duration': 1440,\n            'view_count': int,\n        },\n    }, {\n        'url': 'https://cinema.popcorntv.it/guarda/smash-cut/10433',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        display_id, video_id = mobj.group('display_id', 'id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        m3u8_url = extract_attributes(\n            self._search_regex(\n                r'(<link[^>]+itemprop=[\"\\'](?:content|embed)Url[^>]*>)',\n                webpage, 'content'\n            ))['href']\n\n        formats = self._extract_m3u8_formats(\n            m3u8_url, display_id, 'mp4', entry_protocol='m3u8_native',\n            m3u8_id='hls')\n\n        title = self._search_regex(\n            r'<h1[^>]+itemprop=[\"\\']name[^>]*>([^<]+)', webpage,\n            'title', default=None) or self._og_search_title(webpage)\n\n        description = self._html_search_regex(\n            r'(?s)<article[^>]+itemprop=[\"\\']description[^>]*>(.+?)</article>',\n            webpage, 'description', fatal=False)\n        thumbnail = self._og_search_thumbnail(webpage)\n        timestamp = unified_timestamp(self._html_search_meta(\n            'uploadDate', webpage, 'timestamp'))\n        print(self._html_search_meta(\n            'duration', webpage))\n        duration = int_or_none(self._html_search_meta(\n            'duration', webpage), invscale=60)\n        view_count = int_or_none(self._html_search_meta(\n            'interactionCount', webpage, 'view count'))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats,\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    extract_attributes,\n    int_or_none,\n    unified_timestamp,\n)\n\n\nclass PopcornTVIE(InfoExtractor):\n    _VALID_URL = r'https?://[^/]+\\.popcorntv\\.it/guarda/(?P<display_id>[^/]+)/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://animemanga.popcorntv.it/guarda/food-wars-battaglie-culinarie-episodio-01/9183',\n        'md5': '47d65a48d147caf692ab8562fe630b45',\n        'info_dict': {\n            'id': '9183',\n            'display_id': 'food-wars-battaglie-culinarie-episodio-01',\n            'ext': 'mp4',\n            'title': 'Food Wars, Battaglie Culinarie | Episodio 01',\n            'description': 'md5:b8bea378faae4651d3b34c6e112463d0',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'timestamp': 1497610857,\n            'upload_date': '20170616',\n            'duration': 1440,\n            'view_count': int,\n        },\n    }, {\n        'url': 'https://cinema.popcorntv.it/guarda/smash-cut/10433',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        display_id, video_id = mobj.group('display_id', 'id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        m3u8_url = extract_attributes(\n            self._search_regex(\n                r'(<link[^>]+itemprop=[\"\\'](?:content|embed)Url[^>]*>)',\n                webpage, 'content'\n            ))['href']\n\n        formats = self._extract_m3u8_formats(\n            m3u8_url, display_id, 'mp4', entry_protocol='m3u8_native',\n            m3u8_id='hls')\n\n        title = self._search_regex(\n            r'<h1[^>]+itemprop=[\"\\']name[^>]*>([^<]+)', webpage,\n            'title', default=None) or self._og_search_title(webpage)\n\n        description = self._html_search_regex(\n            r'(?s)<article[^>]+itemprop=[\"\\']description[^>]*>(.+?)</article>',\n            webpage, 'description', fatal=False)\n        thumbnail = self._og_search_thumbnail(webpage)\n        timestamp = unified_timestamp(self._html_search_meta(\n            'uploadDate', webpage, 'timestamp'))\n        print(self._html_search_meta(\n            'duration', webpage))\n        duration = int_or_none(self._html_search_meta(\n            'duration', webpage), invscale=60)\n        view_count = int_or_none(self._html_search_meta(\n            'interactionCount', webpage, 'view count'))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "popcorntv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/popcorntv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}