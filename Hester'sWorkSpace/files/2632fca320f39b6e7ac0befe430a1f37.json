{"author": "django", "code": "import unittest\n\nfrom django.template.smartif import IfParser\n\n\nclass SmartIfTests(unittest.TestCase):\n\n    def assertCalcEqual(self, expected, tokens):\n        self.assertEqual(expected, IfParser(tokens).parse().eval({}))\n\n    \n    \n    \n    def test_not(self):\n        var = IfParser([\"not\", False]).parse()\n        self.assertEqual(\"(not (literal False))\", repr(var))\n        self.assertTrue(var.eval({}))\n\n        self.assertFalse(IfParser([\"not\", True]).parse().eval({}))\n\n    def test_or(self):\n        var = IfParser([True, \"or\", False]).parse()\n        self.assertEqual(\"(or (literal True) (literal False))\", repr(var))\n        self.assertTrue(var.eval({}))\n\n    def test_in(self):\n        list_ = [1, 2, 3]\n        self.assertCalcEqual(True, [1, 'in', list_])\n        self.assertCalcEqual(False, [1, 'in', None])\n        self.assertCalcEqual(False, [None, 'in', list_])\n\n    def test_not_in(self):\n        list_ = [1, 2, 3]\n        self.assertCalcEqual(False, [1, 'not', 'in', list_])\n        self.assertCalcEqual(True, [4, 'not', 'in', list_])\n        self.assertCalcEqual(False, [1, 'not', 'in', None])\n        self.assertCalcEqual(True, [None, 'not', 'in', list_])\n\n    def test_precedence(self):\n        # (False and False) or True == True   <- we want this one, like Python\n        # False and (False or True) == False\n        self.assertCalcEqual(True, [False, 'and', False, 'or', True])\n\n        # True or (False and False) == True   <- we want this one, like Python\n        # (True or False) and False == False\n        self.assertCalcEqual(True, [True, 'or', False, 'and', False])\n\n        # (1 or 1) == 2  -> False\n        # 1 or (1 == 2)  -> True   <- we want this one\n        self.assertCalcEqual(True, [1, 'or', 1, '==', 2])\n\n        self.assertCalcEqual(True, [True, '==', True, 'or', True, '==', False])\n\n        self.assertEqual(\"(or (and (== (literal 1) (literal 2)) (literal 3)) (literal 4))\",\n                         repr(IfParser([1, '==', 2, 'and', 3, 'or', 4]).parse()))\n", "comments": "  we test things difficult test elsewhere    many tests found main tests builtin template tags    test parsing via printed parse tree    (false false) true    true      want one  like python    false (false true)    false    true (false false)    true      want one  like python    (true false) false    false    (1 1)    2     false    1 (1    2)     true      want one ", "content": "import unittest\n\nfrom django.template.smartif import IfParser\n\n\nclass SmartIfTests(unittest.TestCase):\n\n    def assertCalcEqual(self, expected, tokens):\n        self.assertEqual(expected, IfParser(tokens).parse().eval({}))\n\n    # We only test things here that are difficult to test elsewhere\n    # Many other tests are found in the main tests for builtin template tags\n    # Test parsing via the printed parse tree\n    def test_not(self):\n        var = IfParser([\"not\", False]).parse()\n        self.assertEqual(\"(not (literal False))\", repr(var))\n        self.assertTrue(var.eval({}))\n\n        self.assertFalse(IfParser([\"not\", True]).parse().eval({}))\n\n    def test_or(self):\n        var = IfParser([True, \"or\", False]).parse()\n        self.assertEqual(\"(or (literal True) (literal False))\", repr(var))\n        self.assertTrue(var.eval({}))\n\n    def test_in(self):\n        list_ = [1, 2, 3]\n        self.assertCalcEqual(True, [1, 'in', list_])\n        self.assertCalcEqual(False, [1, 'in', None])\n        self.assertCalcEqual(False, [None, 'in', list_])\n\n    def test_not_in(self):\n        list_ = [1, 2, 3]\n        self.assertCalcEqual(False, [1, 'not', 'in', list_])\n        self.assertCalcEqual(True, [4, 'not', 'in', list_])\n        self.assertCalcEqual(False, [1, 'not', 'in', None])\n        self.assertCalcEqual(True, [None, 'not', 'in', list_])\n\n    def test_precedence(self):\n        # (False and False) or True == True   <- we want this one, like Python\n        # False and (False or True) == False\n        self.assertCalcEqual(True, [False, 'and', False, 'or', True])\n\n        # True or (False and False) == True   <- we want this one, like Python\n        # (True or False) and False == False\n        self.assertCalcEqual(True, [True, 'or', False, 'and', False])\n\n        # (1 or 1) == 2  -> False\n        # 1 or (1 == 2)  -> True   <- we want this one\n        self.assertCalcEqual(True, [1, 'or', 1, '==', 2])\n\n        self.assertCalcEqual(True, [True, '==', True, 'or', True, '==', False])\n\n        self.assertEqual(\"(or (and (== (literal 1) (literal 2)) (literal 3)) (literal 4))\",\n                         repr(IfParser([1, '==', 2, 'and', 3, 'or', 4]).parse()))\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_smartif.py", "id": "2632fca320f39b6e7ac0befe430a1f37", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/template_tests/test_smartif.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}