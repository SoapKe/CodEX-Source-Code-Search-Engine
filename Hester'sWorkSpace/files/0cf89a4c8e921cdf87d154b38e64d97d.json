{"author": "donnemartin", "code": " -*- coding: utf-8 -*-\n\n\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You\n may not use this file except in compliance with the License. A copy of\n the License is located at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n or in the \"license\" file accompanying this file. This file is\n distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implied. See the License for the specific\n language governing permissions and limitations under the License.\n\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\n\nimport mock\nfrom compat import unittest\n\nfrom click.testing import CliRunner\n\nfrom gitsome.githubcli import GitHubCli\n\n\nclass GitHubCliTest(unittest.TestCase):\n\n    def setUp(self):\n        self.runner = CliRunner()\n        self.github_cli = GitHubCli()\n        self.limit = 1000\n\n    def test_cli(self):\n        result = self.runner.invoke(self.github_cli.cli)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.configure')\n    def test_configure(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli, ['configure'])\n        mock_gh_call.assert_called_with(False)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.create_comment')\n    def test_create_comment(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['create-comment', 'u/r/n',\n                                     '--text', 'foo'])\n        mock_gh_call.assert_called_with('u/r/n', 'foo')\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.create_issue')\n    def test_create_issue(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['create-issue', 'u/r',\n                                     '--issue_title', 'foo',\n                                     '--issue_desc', 'bar'])\n        mock_gh_call.assert_called_with('u/r', 'foo', 'bar')\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.create_repo')\n    def test_create_repo(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['create-repo', 'r',\n                                     '--repo_desc', 'foo',\n                                     '--private'])\n        mock_gh_call.assert_called_with('r', 'foo', True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.emails')\n    def test_emails(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['emails'])\n        mock_gh_call.assert_called_with()\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.emojis')\n    def test_emojis(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['emojis',\n                                     '--pager'])\n        mock_gh_call.assert_called_with(True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.feed')\n    def test_feed(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['feed', 'u',\n                                     '--private', '--pager'])\n        mock_gh_call.assert_called_with('u', True, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.followers')\n    def test_followers(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['followers', 'u',\n                                     '--pager'])\n        mock_gh_call.assert_called_with('u', True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.following')\n    def test_following(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['following', 'u',\n                                     '--pager'])\n        mock_gh_call.assert_called_with('u', True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.gitignore_template')\n    def test_gitignore_template(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['gitignore-template', 'l'])\n        mock_gh_call.assert_called_with('l')\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.gitignore_templates')\n    def test_gitignore_templates(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['gitignore-templates',\n                                     '--pager'])\n        mock_gh_call.assert_called_with(True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.issue')\n    def test_issue(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['issue', 'u/r/n'])\n        mock_gh_call.assert_called_with('u/r/n')\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.issues_setup')\n    def test_issues(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['issues',\n                                     '--issue_filter', 'mentioned',\n                                     '--issue_state', 'closed',\n                                     '--limit', '10',\n                                     '--pager'])\n        mock_gh_call.assert_called_with('mentioned', 'closed', 10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.license')\n    def test_license(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['license', 'l'])\n        mock_gh_call.assert_called_with('l')\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.licenses')\n    def test_licenses(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['licenses'])\n        mock_gh_call.assert_called_with()\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.user_me')\n    def test_me(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['me',\n                                     '--browser', '--text_avatar',\n                                     '--limit', 10,\n                                     '--pager'])\n        mock_gh_call.assert_called_with(True, True, 10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.notifications')\n    def test_notifications(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['notifications',\n                                     '--limit', 10,\n                                     '--pager'])\n        mock_gh_call.assert_called_with(10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.octocat')\n    def test_octocat(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['octo', 'foo'])\n        mock_gh_call.assert_called_with('foo')\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.issue')\n    def test_pull_request(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['pull-request', 'u/r/n'])\n        mock_gh_call.assert_called_with('u/r/n')\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.pull_requests')\n    def test_pull_requests(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['pull-requests',\n                                     '--limit', 10,\n                                     '--pager'])\n        mock_gh_call.assert_called_with(10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.rate_limit')\n    def test_rate_limit(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['rate-limit'])\n        mock_gh_call.assert_called_with()\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.repository')\n    def test_repository(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['repo', 'u/r'])\n        mock_gh_call.assert_called_with('u/r')\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.repositories_setup')\n    def test_repositories(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['repos', 'foo',\n                                     '--limit', 10,\n                                     '--pager'])\n        mock_gh_call.assert_called_with('foo', 10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.search_issues')\n    def test_search_issues(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['search-issues', 'foo',\n                                     '--limit', 10,\n                                     '--pager'])\n        mock_gh_call.assert_called_with('foo', 10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.search_repositories')\n    def test_search_repositories(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['search-repos', 'foo',\n                                     '--sort', 'stars',\n                                     '--limit', 10,\n                                     '--pager'])\n        mock_gh_call.assert_called_with('foo', 'stars', 10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.starred')\n    def test_starred(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['starred', 'foo',\n                                     '--limit', 10,\n                                     '--pager'])\n        mock_gh_call.assert_called_with('foo', 10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.trending')\n    def test_trending(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['trending', 'l',\n                                     '--pager'])\n        mock_gh_call.assert_called_with('l', False, False, False, False, True)\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['trending', 'l',\n                                     '--weekly',\n                                     '--pager'])\n        mock_gh_call.assert_called_with('l', True, False, False, False, True)\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['trending', 'l',\n                                     '--monthly',\n                                     '--devs',\n                                     '--browser',\n                                     '--pager'])\n        mock_gh_call.assert_called_with('l', False, True, True, True, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.user')\n    def test_user(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['user', 'foo',\n                                     '--browser', '--text_avatar',\n                                     '--limit', 10,\n                                     '--pager'])\n        mock_gh_call.assert_called_with('foo', True, True, 10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.view')\n    def test_view(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['view', '1',\n                                     '--browser'])\n        mock_gh_call.assert_called_with(1, True)\n        assert result.exit_code == 0\n", "comments": "      coding  utf 8        copyright 2015 donne martin  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   www apache org licenses license 2 0        license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license  ", "content": "# -*- coding: utf-8 -*-\n\n# Copyright 2015 Donne Martin. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\n\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\n\nimport mock\nfrom compat import unittest\n\nfrom click.testing import CliRunner\n\nfrom gitsome.githubcli import GitHubCli\n\n\nclass GitHubCliTest(unittest.TestCase):\n\n    def setUp(self):\n        self.runner = CliRunner()\n        self.github_cli = GitHubCli()\n        self.limit = 1000\n\n    def test_cli(self):\n        result = self.runner.invoke(self.github_cli.cli)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.configure')\n    def test_configure(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli, ['configure'])\n        mock_gh_call.assert_called_with(False)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.create_comment')\n    def test_create_comment(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['create-comment', 'u/r/n',\n                                     '--text', 'foo'])\n        mock_gh_call.assert_called_with('u/r/n', 'foo')\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.create_issue')\n    def test_create_issue(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['create-issue', 'u/r',\n                                     '--issue_title', 'foo',\n                                     '--issue_desc', 'bar'])\n        mock_gh_call.assert_called_with('u/r', 'foo', 'bar')\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.create_repo')\n    def test_create_repo(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['create-repo', 'r',\n                                     '--repo_desc', 'foo',\n                                     '--private'])\n        mock_gh_call.assert_called_with('r', 'foo', True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.emails')\n    def test_emails(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['emails'])\n        mock_gh_call.assert_called_with()\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.emojis')\n    def test_emojis(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['emojis',\n                                     '--pager'])\n        mock_gh_call.assert_called_with(True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.feed')\n    def test_feed(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['feed', 'u',\n                                     '--private', '--pager'])\n        mock_gh_call.assert_called_with('u', True, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.followers')\n    def test_followers(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['followers', 'u',\n                                     '--pager'])\n        mock_gh_call.assert_called_with('u', True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.following')\n    def test_following(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['following', 'u',\n                                     '--pager'])\n        mock_gh_call.assert_called_with('u', True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.gitignore_template')\n    def test_gitignore_template(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['gitignore-template', 'l'])\n        mock_gh_call.assert_called_with('l')\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.gitignore_templates')\n    def test_gitignore_templates(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['gitignore-templates',\n                                     '--pager'])\n        mock_gh_call.assert_called_with(True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.issue')\n    def test_issue(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['issue', 'u/r/n'])\n        mock_gh_call.assert_called_with('u/r/n')\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.issues_setup')\n    def test_issues(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['issues',\n                                     '--issue_filter', 'mentioned',\n                                     '--issue_state', 'closed',\n                                     '--limit', '10',\n                                     '--pager'])\n        mock_gh_call.assert_called_with('mentioned', 'closed', 10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.license')\n    def test_license(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['license', 'l'])\n        mock_gh_call.assert_called_with('l')\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.licenses')\n    def test_licenses(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['licenses'])\n        mock_gh_call.assert_called_with()\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.user_me')\n    def test_me(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['me',\n                                     '--browser', '--text_avatar',\n                                     '--limit', 10,\n                                     '--pager'])\n        mock_gh_call.assert_called_with(True, True, 10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.notifications')\n    def test_notifications(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['notifications',\n                                     '--limit', 10,\n                                     '--pager'])\n        mock_gh_call.assert_called_with(10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.octocat')\n    def test_octocat(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['octo', 'foo'])\n        mock_gh_call.assert_called_with('foo')\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.issue')\n    def test_pull_request(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['pull-request', 'u/r/n'])\n        mock_gh_call.assert_called_with('u/r/n')\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.pull_requests')\n    def test_pull_requests(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['pull-requests',\n                                     '--limit', 10,\n                                     '--pager'])\n        mock_gh_call.assert_called_with(10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.rate_limit')\n    def test_rate_limit(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['rate-limit'])\n        mock_gh_call.assert_called_with()\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.repository')\n    def test_repository(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['repo', 'u/r'])\n        mock_gh_call.assert_called_with('u/r')\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.repositories_setup')\n    def test_repositories(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['repos', 'foo',\n                                     '--limit', 10,\n                                     '--pager'])\n        mock_gh_call.assert_called_with('foo', 10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.search_issues')\n    def test_search_issues(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['search-issues', 'foo',\n                                     '--limit', 10,\n                                     '--pager'])\n        mock_gh_call.assert_called_with('foo', 10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.search_repositories')\n    def test_search_repositories(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['search-repos', 'foo',\n                                     '--sort', 'stars',\n                                     '--limit', 10,\n                                     '--pager'])\n        mock_gh_call.assert_called_with('foo', 'stars', 10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.starred')\n    def test_starred(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['starred', 'foo',\n                                     '--limit', 10,\n                                     '--pager'])\n        mock_gh_call.assert_called_with('foo', 10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.trending')\n    def test_trending(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['trending', 'l',\n                                     '--pager'])\n        mock_gh_call.assert_called_with('l', False, False, False, False, True)\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['trending', 'l',\n                                     '--weekly',\n                                     '--pager'])\n        mock_gh_call.assert_called_with('l', True, False, False, False, True)\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['trending', 'l',\n                                     '--monthly',\n                                     '--devs',\n                                     '--browser',\n                                     '--pager'])\n        mock_gh_call.assert_called_with('l', False, True, True, True, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.user')\n    def test_user(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['user', 'foo',\n                                     '--browser', '--text_avatar',\n                                     '--limit', 10,\n                                     '--pager'])\n        mock_gh_call.assert_called_with('foo', True, True, 10, True)\n        assert result.exit_code == 0\n\n    @mock.patch('gitsome.githubcli.GitHub.view')\n    def test_view(self, mock_gh_call):\n        result = self.runner.invoke(self.github_cli.cli,\n                                    ['view', '1',\n                                     '--browser'])\n        mock_gh_call.assert_called_with(1, True)\n        assert result.exit_code == 0\n", "description": "A supercharged Git/GitHub command line interface (CLI).  An official integration for GitHub and GitHub Enterprise: https://github.com/works-with/category/desktop-tools", "file_name": "test_github_cli.py", "id": "0cf89a4c8e921cdf87d154b38e64d97d", "language": "Python", "project_name": "gitsome", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-gitsome/donnemartin-gitsome-5751a31/tests/test_github_cli.py", "save_time": "", "source": "", "update_at": "2018-03-18T02:47:11Z", "url": "https://github.com/donnemartin/gitsome", "wiki": true}