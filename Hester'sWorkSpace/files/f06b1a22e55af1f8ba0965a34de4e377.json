{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipa_user\nauthor: Thomas Krahn (@Nosmoht)\nshort_description: Manage FreeIPA users\ndescription:\n- Add, modify and delete user within IPA server\noptions:\n  displayname:\n    description: Display name\n  givenname:\n    description: First name\n  krbpasswordexpiration:\n    description:\n    - Date at which the user password will expire\n    - In the format YYYYMMddHHmmss\n    - e.g. 20180121182022 will expire on 21 January 2018 at 18:20:22\n    version_added: 2.5\n  loginshell:\n    description: Login shell\n  mail:\n    description:\n    - List of mail addresses assigned to the user.\n    - If an empty list is passed all assigned email addresses will be deleted.\n    - If None is passed email addresses will not be checked or changed.\n  password:\n    description:\n    - Password for new user\n  sn:\n    description: Surname\n  sshpubkey:\n    description:\n    - List of public SSH key.\n    - If an empty list is passed all assigned public keys will be deleted.\n    - If None is passed SSH public keys will not be checked or changed.\n  state:\n    description: State to ensure\n    default: \"present\"\n    choices: [\"present\", \"absent\", \"enabled\", \"disabled\"]\n  telephonenumber:\n    description:\n    - List of telephone numbers assigned to the user.\n    - If an empty list is passed all assigned telephone numbers will be deleted.\n    - If None is passed telephone numbers will not be checked or changed.\n  title:\n    description: Title\n  uid:\n    description: uid of the user\n    required: true\n    aliases: [\"name\"]\n  uidnumber:\n    description:\n    - Account Settings UID/Posix User ID number\n    version_added: 2.5\n  gidnumber:\n    description:\n    - Posix Group ID\n    version_added: 2.5\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.3\"\nrequirements:\n- base64\n- hashlib\n'''\n\nEXAMPLES = '''\n\n- ipa_user:\n    name: pinky\n    state: present\n    krbpasswordexpiration: 20200119235959\n    givenname: Pinky\n    sn: Acme\n    mail:\n    - pinky@acme.com\n    telephonenumber:\n    - '+555123456'\n    sshpubkey:\n    - ssh-rsa ....\n    - ssh-dsa ....\n    uidnumber: 1001\n    gidnumber: 100\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n\n- ipa_user:\n    name: brain\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n'''\n\nRETURN = '''\nuser:\n  description: User as returned by IPA API\n  returned: always\n  type: dict\n'''\n\nimport base64\nimport hashlib\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass UserIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(UserIPAClient, self).__init__(module, host, port, protocol)\n\n    def user_find(self, name):\n        return self._post_json(method='user_find', name=None, item={'all': True, 'uid': name})\n\n    def user_add(self, name, item):\n        return self._post_json(method='user_add', name=name, item=item)\n\n    def user_mod(self, name, item):\n        return self._post_json(method='user_mod', name=name, item=item)\n\n    def user_del(self, name):\n        return self._post_json(method='user_del', name=name)\n\n    def user_disable(self, name):\n        return self._post_json(method='user_disable', name=name)\n\n    def user_enable(self, name):\n        return self._post_json(method='user_enable', name=name)\n\n\ndef get_user_dict(displayname=None, givenname=None, krbpasswordexpiration=None, loginshell=None,\n                  mail=None, nsaccountlock=False, sn=None, sshpubkey=None, telephonenumber=None,\n                  title=None, userpassword=None, gidnumber=None, uidnumber=None):\n    user = {}\n    if displayname is not None:\n        user['displayname'] = displayname\n    if krbpasswordexpiration is not None:\n        user['krbpasswordexpiration'] = krbpasswordexpiration + \"Z\"\n    if givenname is not None:\n        user['givenname'] = givenname\n    if loginshell is not None:\n        user['loginshell'] = loginshell\n    if mail is not None:\n        user['mail'] = mail\n    user['nsaccountlock'] = nsaccountlock\n    if sn is not None:\n        user['sn'] = sn\n    if sshpubkey is not None:\n        user['ipasshpubkey'] = sshpubkey\n    if telephonenumber is not None:\n        user['telephonenumber'] = telephonenumber\n    if title is not None:\n        user['title'] = title\n    if userpassword is not None:\n        user['userpassword'] = userpassword\n    if gidnumber is not None:\n        user['gidnumber'] = gidnumber\n    if uidnumber is not None:\n        user['uidnumber'] = uidnumber\n\n    return user\n\n\ndef get_user_diff(client, ipa_user, module_user):\n    \"\"\"\n        Return the keys of each dict whereas values are different. Unfortunately the IPA\n        API returns everything as a list even if only a single value is possible.\n        Therefore some more complexity is needed.\n        The method will check if the value type of module_user.attr is not a list and\n        create a list with that element if the same attribute in ipa_user is list. In this way I hope that the method\n        must not be changed if the returned API dict is changed.\n    :param ipa_user:\n    :param module_user:\n    :return:\n    \"\"\"\n    \n    \n    sshpubkey = None\n    if 'ipasshpubkey' in module_user:\n        module_user['sshpubkeyfp'] = [get_ssh_key_fingerprint(pubkey) for pubkey in module_user['ipasshpubkey']]\n        \n        sshpubkey = module_user['ipasshpubkey']\n        del module_user['ipasshpubkey']\n\n    result = client.get_diff(ipa_data=ipa_user, module_data=module_user)\n\n    \n    if sshpubkey is not None:\n        del module_user['sshpubkeyfp']\n        module_user['ipasshpubkey'] = sshpubkey\n    return result\n\n\ndef get_ssh_key_fingerprint(ssh_key):\n    \"\"\"\n    Return the public key fingerprint of a given public SSH key\n    in format \"FB:0C:AC:0A:07:94:5B:CE:75:6E:63:32:13:AD:AD:D7 [user@host] (ssh-rsa)\"\n    :param ssh_key:\n    :return:\n    \"\"\"\n    parts = ssh_key.strip().split()\n    if len(parts) == 0:\n        return None\n    key_type = parts[0]\n    key = base64.b64decode(parts[1].encode('ascii'))\n\n    fp_plain = hashlib.md5(key).hexdigest()\n    key_fp = ':'.join(a + b for a, b in zip(fp_plain[::2], fp_plain[1::2])).upper()\n    if len(parts) < 3:\n        return \"%s (%s)\" % (key_fp, key_type)\n    else:\n        user_host = parts[2]\n        return \"%s %s (%s)\" % (key_fp, user_host, key_type)\n\n\ndef ensure(module, client):\n    state = module.params['state']\n    name = module.params['uid']\n    nsaccountlock = state == 'disabled'\n\n    module_user = get_user_dict(displayname=module.params.get('displayname'),\n                                krbpasswordexpiration=module.params.get('krbpasswordexpiration'),\n                                givenname=module.params.get('givenname'),\n                                loginshell=module.params['loginshell'],\n                                mail=module.params['mail'], sn=module.params['sn'],\n                                sshpubkey=module.params['sshpubkey'], nsaccountlock=nsaccountlock,\n                                telephonenumber=module.params['telephonenumber'], title=module.params['title'],\n                                userpassword=module.params['password'],\n                                gidnumber=module.params.get('gidnumber'), uidnumber=module.params.get('uidnumber'))\n\n    ipa_user = client.user_find(name=name)\n\n    changed = False\n    if state in ['present', 'enabled', 'disabled']:\n        if not ipa_user:\n            changed = True\n            if not module.check_mode:\n                ipa_user = client.user_add(name=name, item=module_user)\n        else:\n            diff = get_user_diff(client, ipa_user, module_user)\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    ipa_user = client.user_mod(name=name, item=module_user)\n    else:\n        if ipa_user:\n            changed = True\n            if not module.check_mode:\n                client.user_del(name)\n\n    return changed, ipa_user\n\n\ndef main():\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(displayname=dict(type='str'),\n                         givenname=dict(type='str'),\n                         krbpasswordexpiration=dict(type='str'),\n                         loginshell=dict(type='str'),\n                         mail=dict(type='list'),\n                         sn=dict(type='str'),\n                         uid=dict(type='str', required=True, aliases=['name']),\n                         gidnumber=dict(type='str'),\n                         uidnumber=dict(type='str'),\n                         password=dict(type='str', no_log=True),\n                         sshpubkey=dict(type='list'),\n                         state=dict(type='str', default='present',\n                                    choices=['present', 'absent', 'enabled', 'disabled']),\n                         telephonenumber=dict(type='list'),\n                         title=dict(type='str'))\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True)\n\n    client = UserIPAClient(module=module,\n                           host=module.params['ipa_host'],\n                           port=module.params['ipa_port'],\n                           protocol=module.params['ipa_prot'])\n\n    # If sshpubkey is defined as None than module.params['sshpubkey'] is [None]. IPA itself returns None (not a list).\n    # Therefore a small check here to replace list(None) by None. Otherwise get_user_diff() would return sshpubkey\n    \n    if module.params['sshpubkey'] is not None:\n        if len(module.params['sshpubkey']) == 1 and module.params['sshpubkey'][0] is \"\":\n            module.params['sshpubkey'] = None\n\n    try:\n        client.login(username=module.params['ipa_user'],\n                     password=module.params['ipa_pass'])\n        changed, user = ensure(module, client)\n        module.exit_json(changed=changed, user=user)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "            return keys dict whereas values different  unfortunately ipa         api returns everything list even single value possible          therefore complexity needed          the method check value type module user attr list         create list element attribute ipa user list  in way i hope method         must changed returned api dict changed       param ipa user       param module user       return                sshpubkeyfp list ssh key fingerprints  ipa return keys instead fingerprints        these used comparison      sshpubkey   none      ipasshpubkey  module user          module user  sshpubkeyfp      get ssh key fingerprint(pubkey) pubkey module user  ipasshpubkey              remove ipasshpubkey element returned ipa save value used later         sshpubkey   module user  ipasshpubkey           del module user  ipasshpubkey        result   client get diff(ipa data ipa user  module data module user)        if public keys  remove fingerprints add back dict     sshpubkey none          del module user  sshpubkeyfp           module user  ipasshpubkey     sshpubkey     return result   def get ssh key fingerprint(ssh key)              return public key fingerprint given public ssh key     format  fb 0c ac 0a 07 94 5b ce 75 6e 63 32 13 ad ad d7  user host  (ssh rsa)       param ssh key       return                   module  ipa user author  thomas krahn ( nosmoht) short description  manage freeipa users description    add  modify delete user within ipa server options    displayname      description  display name   givenname      description  first name   krbpasswordexpiration      description        date user password expire       in format yyyymmddhhmmss       e g  20180121182022 expire 21 january 2018 18 20 22     version added  2 5   loginshell      description  login shell   mail      description        list mail addresses assigned user        if empty list passed assigned email addresses deleted        if none passed email addresses checked changed    password      description        password new user   sn      description  surname   sshpubkey      description        list public ssh key        if empty list passed assigned public keys deleted        if none passed ssh public keys checked changed    state      description  state ensure     default   present      choices    present    absent    enabled    disabled     telephonenumber      description        list telephone numbers assigned user        if empty list passed assigned telephone numbers deleted        if none passed telephone numbers checked changed    title      description  title   uid      description  uid user     required  true     aliases    name     uidnumber      description        account settings uid posix user id number     version added  2 5   gidnumber      description        posix group id     version added  2 5 extends documentation fragment  ipa documentation version added   2 3  requirements    base64   hashlib      examples         ensure pinky present   ipa user      name  pinky     state  present     krbpasswordexpiration  20200119235959     givenname  pinky     sn  acme     mail        pinky acme com     telephonenumber          555123456      sshpubkey        ssh rsa            ssh dsa          uidnumber  1001     gidnumber  100     ipa host  ipa example com     ipa user  admin     ipa pass  topsecret    ensure brain absent   ipa user      name  brain     state  absent     ipa host  ipa example com     ipa user  admin     ipa pass  topsecret      return       user    description  user returned ipa api   returned  always   type  dict         usr bin python        coding  utf 8        copyright  (c) 2017  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    ensure pinky present    ensure brain absent    sshpubkeyfp list ssh key fingerprints  ipa return keys instead fingerprints     these used comparison     remove ipasshpubkey element returned ipa save value used later    if public keys  remove fingerprints add back dict    if sshpubkey defined none module params  sshpubkey    none   ipa returns none (not list)     therefore small check replace list(none) none  otherwise get user diff() would return sshpubkey    different avoided  ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipa_user\nauthor: Thomas Krahn (@Nosmoht)\nshort_description: Manage FreeIPA users\ndescription:\n- Add, modify and delete user within IPA server\noptions:\n  displayname:\n    description: Display name\n  givenname:\n    description: First name\n  krbpasswordexpiration:\n    description:\n    - Date at which the user password will expire\n    - In the format YYYYMMddHHmmss\n    - e.g. 20180121182022 will expire on 21 January 2018 at 18:20:22\n    version_added: 2.5\n  loginshell:\n    description: Login shell\n  mail:\n    description:\n    - List of mail addresses assigned to the user.\n    - If an empty list is passed all assigned email addresses will be deleted.\n    - If None is passed email addresses will not be checked or changed.\n  password:\n    description:\n    - Password for new user\n  sn:\n    description: Surname\n  sshpubkey:\n    description:\n    - List of public SSH key.\n    - If an empty list is passed all assigned public keys will be deleted.\n    - If None is passed SSH public keys will not be checked or changed.\n  state:\n    description: State to ensure\n    default: \"present\"\n    choices: [\"present\", \"absent\", \"enabled\", \"disabled\"]\n  telephonenumber:\n    description:\n    - List of telephone numbers assigned to the user.\n    - If an empty list is passed all assigned telephone numbers will be deleted.\n    - If None is passed telephone numbers will not be checked or changed.\n  title:\n    description: Title\n  uid:\n    description: uid of the user\n    required: true\n    aliases: [\"name\"]\n  uidnumber:\n    description:\n    - Account Settings UID/Posix User ID number\n    version_added: 2.5\n  gidnumber:\n    description:\n    - Posix Group ID\n    version_added: 2.5\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.3\"\nrequirements:\n- base64\n- hashlib\n'''\n\nEXAMPLES = '''\n# Ensure pinky is present\n- ipa_user:\n    name: pinky\n    state: present\n    krbpasswordexpiration: 20200119235959\n    givenname: Pinky\n    sn: Acme\n    mail:\n    - pinky@acme.com\n    telephonenumber:\n    - '+555123456'\n    sshpubkey:\n    - ssh-rsa ....\n    - ssh-dsa ....\n    uidnumber: 1001\n    gidnumber: 100\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n# Ensure brain is absent\n- ipa_user:\n    name: brain\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n'''\n\nRETURN = '''\nuser:\n  description: User as returned by IPA API\n  returned: always\n  type: dict\n'''\n\nimport base64\nimport hashlib\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass UserIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(UserIPAClient, self).__init__(module, host, port, protocol)\n\n    def user_find(self, name):\n        return self._post_json(method='user_find', name=None, item={'all': True, 'uid': name})\n\n    def user_add(self, name, item):\n        return self._post_json(method='user_add', name=name, item=item)\n\n    def user_mod(self, name, item):\n        return self._post_json(method='user_mod', name=name, item=item)\n\n    def user_del(self, name):\n        return self._post_json(method='user_del', name=name)\n\n    def user_disable(self, name):\n        return self._post_json(method='user_disable', name=name)\n\n    def user_enable(self, name):\n        return self._post_json(method='user_enable', name=name)\n\n\ndef get_user_dict(displayname=None, givenname=None, krbpasswordexpiration=None, loginshell=None,\n                  mail=None, nsaccountlock=False, sn=None, sshpubkey=None, telephonenumber=None,\n                  title=None, userpassword=None, gidnumber=None, uidnumber=None):\n    user = {}\n    if displayname is not None:\n        user['displayname'] = displayname\n    if krbpasswordexpiration is not None:\n        user['krbpasswordexpiration'] = krbpasswordexpiration + \"Z\"\n    if givenname is not None:\n        user['givenname'] = givenname\n    if loginshell is not None:\n        user['loginshell'] = loginshell\n    if mail is not None:\n        user['mail'] = mail\n    user['nsaccountlock'] = nsaccountlock\n    if sn is not None:\n        user['sn'] = sn\n    if sshpubkey is not None:\n        user['ipasshpubkey'] = sshpubkey\n    if telephonenumber is not None:\n        user['telephonenumber'] = telephonenumber\n    if title is not None:\n        user['title'] = title\n    if userpassword is not None:\n        user['userpassword'] = userpassword\n    if gidnumber is not None:\n        user['gidnumber'] = gidnumber\n    if uidnumber is not None:\n        user['uidnumber'] = uidnumber\n\n    return user\n\n\ndef get_user_diff(client, ipa_user, module_user):\n    \"\"\"\n        Return the keys of each dict whereas values are different. Unfortunately the IPA\n        API returns everything as a list even if only a single value is possible.\n        Therefore some more complexity is needed.\n        The method will check if the value type of module_user.attr is not a list and\n        create a list with that element if the same attribute in ipa_user is list. In this way I hope that the method\n        must not be changed if the returned API dict is changed.\n    :param ipa_user:\n    :param module_user:\n    :return:\n    \"\"\"\n    # sshpubkeyfp is the list of ssh key fingerprints. IPA doesn't return the keys itself but instead the fingerprints.\n    # These are used for comparison.\n    sshpubkey = None\n    if 'ipasshpubkey' in module_user:\n        module_user['sshpubkeyfp'] = [get_ssh_key_fingerprint(pubkey) for pubkey in module_user['ipasshpubkey']]\n        # Remove the ipasshpubkey element as it is not returned from IPA but save it's value to be used later on\n        sshpubkey = module_user['ipasshpubkey']\n        del module_user['ipasshpubkey']\n\n    result = client.get_diff(ipa_data=ipa_user, module_data=module_user)\n\n    # If there are public keys, remove the fingerprints and add them back to the dict\n    if sshpubkey is not None:\n        del module_user['sshpubkeyfp']\n        module_user['ipasshpubkey'] = sshpubkey\n    return result\n\n\ndef get_ssh_key_fingerprint(ssh_key):\n    \"\"\"\n    Return the public key fingerprint of a given public SSH key\n    in format \"FB:0C:AC:0A:07:94:5B:CE:75:6E:63:32:13:AD:AD:D7 [user@host] (ssh-rsa)\"\n    :param ssh_key:\n    :return:\n    \"\"\"\n    parts = ssh_key.strip().split()\n    if len(parts) == 0:\n        return None\n    key_type = parts[0]\n    key = base64.b64decode(parts[1].encode('ascii'))\n\n    fp_plain = hashlib.md5(key).hexdigest()\n    key_fp = ':'.join(a + b for a, b in zip(fp_plain[::2], fp_plain[1::2])).upper()\n    if len(parts) < 3:\n        return \"%s (%s)\" % (key_fp, key_type)\n    else:\n        user_host = parts[2]\n        return \"%s %s (%s)\" % (key_fp, user_host, key_type)\n\n\ndef ensure(module, client):\n    state = module.params['state']\n    name = module.params['uid']\n    nsaccountlock = state == 'disabled'\n\n    module_user = get_user_dict(displayname=module.params.get('displayname'),\n                                krbpasswordexpiration=module.params.get('krbpasswordexpiration'),\n                                givenname=module.params.get('givenname'),\n                                loginshell=module.params['loginshell'],\n                                mail=module.params['mail'], sn=module.params['sn'],\n                                sshpubkey=module.params['sshpubkey'], nsaccountlock=nsaccountlock,\n                                telephonenumber=module.params['telephonenumber'], title=module.params['title'],\n                                userpassword=module.params['password'],\n                                gidnumber=module.params.get('gidnumber'), uidnumber=module.params.get('uidnumber'))\n\n    ipa_user = client.user_find(name=name)\n\n    changed = False\n    if state in ['present', 'enabled', 'disabled']:\n        if not ipa_user:\n            changed = True\n            if not module.check_mode:\n                ipa_user = client.user_add(name=name, item=module_user)\n        else:\n            diff = get_user_diff(client, ipa_user, module_user)\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    ipa_user = client.user_mod(name=name, item=module_user)\n    else:\n        if ipa_user:\n            changed = True\n            if not module.check_mode:\n                client.user_del(name)\n\n    return changed, ipa_user\n\n\ndef main():\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(displayname=dict(type='str'),\n                         givenname=dict(type='str'),\n                         krbpasswordexpiration=dict(type='str'),\n                         loginshell=dict(type='str'),\n                         mail=dict(type='list'),\n                         sn=dict(type='str'),\n                         uid=dict(type='str', required=True, aliases=['name']),\n                         gidnumber=dict(type='str'),\n                         uidnumber=dict(type='str'),\n                         password=dict(type='str', no_log=True),\n                         sshpubkey=dict(type='list'),\n                         state=dict(type='str', default='present',\n                                    choices=['present', 'absent', 'enabled', 'disabled']),\n                         telephonenumber=dict(type='list'),\n                         title=dict(type='str'))\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True)\n\n    client = UserIPAClient(module=module,\n                           host=module.params['ipa_host'],\n                           port=module.params['ipa_port'],\n                           protocol=module.params['ipa_prot'])\n\n    # If sshpubkey is defined as None than module.params['sshpubkey'] is [None]. IPA itself returns None (not a list).\n    # Therefore a small check here to replace list(None) by None. Otherwise get_user_diff() would return sshpubkey\n    # as different which should be avoided.\n    if module.params['sshpubkey'] is not None:\n        if len(module.params['sshpubkey']) == 1 and module.params['sshpubkey'][0] is \"\":\n            module.params['sshpubkey'] = None\n\n    try:\n        client.login(username=module.params['ipa_user'],\n                     password=module.params['ipa_pass'])\n        changed, user = ensure(module, client)\n        module.exit_json(changed=changed, user=user)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "ipa_user.py", "id": "f06b1a22e55af1f8ba0965a34de4e377", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/identity/ipa/ipa_user.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}