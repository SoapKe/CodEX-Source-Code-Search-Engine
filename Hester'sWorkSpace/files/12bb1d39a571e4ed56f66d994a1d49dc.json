{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass MoeVideoIE(InfoExtractor):\n    IE_DESC = 'LetitBit video services: moevideo.net, playreplay.net and videochart.net'\n    _VALID_URL = r\n    _API_URL = 'http://api.letitbit.net/'\n    _API_KEY = 'tVL0gjqo5'\n    _TESTS = [\n        {\n            'url': 'http://moevideo.net/video/00297.0036103fe3d513ef27915216fd29',\n            'md5': '129f5ae1f6585d0e9bb4f38e774ffb3a',\n            'info_dict': {\n                'id': '00297.0036103fe3d513ef27915216fd29',\n                'ext': 'flv',\n                'title': 'Sink cut out machine',\n                'description': 'md5:f29ff97b663aefa760bf7ca63c8ca8a8',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'width': 540,\n                'height': 360,\n                'duration': 179,\n                'filesize': 17822500,\n            },\n            'skip': 'Video has been removed',\n        },\n        {\n            'url': 'http://playreplay.net/video/77107.7f325710a627383d40540d8e991a',\n            'md5': '74f0a014d5b661f0f0e2361300d1620e',\n            'info_dict': {\n                'id': '77107.7f325710a627383d40540d8e991a',\n                'ext': 'flv',\n                'title': 'Operacion Condor.',\n                'description': 'md5:7e68cb2fcda66833d5081c542491a9a3',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'width': 480,\n                'height': 296,\n                'duration': 6027,\n                'filesize': 588257923,\n            },\n            'skip': 'Video has been removed',\n        },\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        webpage = self._download_webpage(\n            'http://%s/video/%s' % (mobj.group('host'), video_id),\n            video_id, 'Downloading webpage')\n\n        title = self._og_search_title(webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n        description = self._og_search_description(webpage)\n\n        r = [\n            self._API_KEY,\n            [\n                'preview/flv_link',\n                {\n                    'uid': video_id,\n                },\n            ],\n        ]\n        r_json = json.dumps(r)\n        post = urlencode_postdata({'r': r_json})\n        req = sanitized_Request(self._API_URL, post)\n        req.add_header('Content-type', 'application/x-www-form-urlencoded')\n\n        response = self._download_json(req, video_id)\n        if response['status'] != 'OK':\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, response['data']),\n                expected=True\n            )\n        item = response['data'][0]\n        video_url = item['link']\n        duration = int_or_none(item['length'])\n        width = int_or_none(item['width'])\n        height = int_or_none(item['height'])\n        filesize = int_or_none(item['convert_size'])\n\n        formats = [{\n            'format_id': 'sd',\n            'http_headers': {'Range': 'bytes=0-'},  \n            'url': video_url,\n            'width': width,\n            'height': height,\n            'filesize': filesize,\n        }]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'description': description,\n            'duration': duration,\n            'formats': formats,\n        }\n", "comments": "(?x)\n        https?://(?P<host>(?:www\\.)?\n        (?:(?:moevideo|playreplay|videochart)\\.net))/\n        (?:video|framevideo)/(?P<id>[0-9]+\\.[0-9A-Za-z]+)\n)\n# coding: utf-8\n# Required to download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass MoeVideoIE(InfoExtractor):\n    IE_DESC = 'LetitBit video services: moevideo.net, playreplay.net and videochart.net'\n    _VALID_URL = r'''(?x)\n        https?://(?P<host>(?:www\\.)?\n        (?:(?:moevideo|playreplay|videochart)\\.net))/\n        (?:video|framevideo)/(?P<id>[0-9]+\\.[0-9A-Za-z]+)'''\n    _API_URL = 'http://api.letitbit.net/'\n    _API_KEY = 'tVL0gjqo5'\n    _TESTS = [\n        {\n            'url': 'http://moevideo.net/video/00297.0036103fe3d513ef27915216fd29',\n            'md5': '129f5ae1f6585d0e9bb4f38e774ffb3a',\n            'info_dict': {\n                'id': '00297.0036103fe3d513ef27915216fd29',\n                'ext': 'flv',\n                'title': 'Sink cut out machine',\n                'description': 'md5:f29ff97b663aefa760bf7ca63c8ca8a8',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'width': 540,\n                'height': 360,\n                'duration': 179,\n                'filesize': 17822500,\n            },\n            'skip': 'Video has been removed',\n        },\n        {\n            'url': 'http://playreplay.net/video/77107.7f325710a627383d40540d8e991a',\n            'md5': '74f0a014d5b661f0f0e2361300d1620e',\n            'info_dict': {\n                'id': '77107.7f325710a627383d40540d8e991a',\n                'ext': 'flv',\n                'title': 'Operacion Condor.',\n                'description': 'md5:7e68cb2fcda66833d5081c542491a9a3',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'width': 480,\n                'height': 296,\n                'duration': 6027,\n                'filesize': 588257923,\n            },\n            'skip': 'Video has been removed',\n        },\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        webpage = self._download_webpage(\n            'http://%s/video/%s' % (mobj.group('host'), video_id),\n            video_id, 'Downloading webpage')\n\n        title = self._og_search_title(webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n        description = self._og_search_description(webpage)\n\n        r = [\n            self._API_KEY,\n            [\n                'preview/flv_link',\n                {\n                    'uid': video_id,\n                },\n            ],\n        ]\n        r_json = json.dumps(r)\n        post = urlencode_postdata({'r': r_json})\n        req = sanitized_Request(self._API_URL, post)\n        req.add_header('Content-type', 'application/x-www-form-urlencoded')\n\n        response = self._download_json(req, video_id)\n        if response['status'] != 'OK':\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, response['data']),\n                expected=True\n            )\n        item = response['data'][0]\n        video_url = item['link']\n        duration = int_or_none(item['length'])\n        width = int_or_none(item['width'])\n        height = int_or_none(item['height'])\n        filesize = int_or_none(item['convert_size'])\n\n        formats = [{\n            'format_id': 'sd',\n            'http_headers': {'Range': 'bytes=0-'},  # Required to download\n            'url': video_url,\n            'width': width,\n            'height': height,\n            'filesize': filesize,\n        }]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'description': description,\n            'duration': duration,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "moevideo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/moevideo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}