{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_duration,\n)\n\n\nclass NuvidIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www|m)\\.nuvid\\.com/video/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://m.nuvid.com/video/1310741/',\n        'md5': 'eab207b7ac4fccfb4e23c86201f11277',\n        'info_dict': {\n            'id': '1310741',\n            'ext': 'mp4',\n            'title': 'Horny babes show their awesome bodeis and',\n            'duration': 129,\n            'age_limit': 18,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        page_url = 'http://m.nuvid.com/video/%s' % video_id\n        webpage = self._download_webpage(\n            page_url, video_id, 'Downloading video page')\n        \n        \n        \n        self._set_cookie('nuvid.com', 'dwnld_speed', '10.0')\n        mp4_webpage = self._download_webpage(\n            page_url, video_id, 'Downloading video page for MP4 format')\n\n        html5_video_re = r'(?s)<(?:video|audio)[^<]*(?:>.*?<source[^>]*)?\\s+src=[\"\\'](.*?)[\"\\']',\n        video_url = self._html_search_regex(html5_video_re, webpage, video_id)\n        mp4_video_url = self._html_search_regex(html5_video_re, mp4_webpage, video_id)\n        formats = [{\n            'url': video_url,\n        }]\n        if mp4_video_url != video_url:\n            formats.append({\n                'url': mp4_video_url,\n            })\n\n        title = self._html_search_regex(\n            [r'<span title=\"([^\"]+)\">',\n             r'<div class=\"thumb-holder video\">\\s*<h5[^>]*>([^<]+)</h5>',\n             r'<span[^>]+class=\"title_thumb\">([^<]+)</span>'], webpage, 'title').strip()\n        thumbnails = [\n            {\n                'url': thumb_url,\n            } for thumb_url in re.findall(r'<img src=\"([^\"]+)\" alt=\"\" />', webpage)\n        ]\n        thumbnail = thumbnails[0]['url'] if thumbnails else None\n        duration = parse_duration(self._html_search_regex(\n            [r'<i class=\"fa fa-clock-o\"></i>\\s*(\\d{2}:\\d{2})',\n             r'<span[^>]+class=\"view_time\">([^<]+)</span>'], webpage, 'duration', fatal=False))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnails': thumbnails,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'age_limit': 18,\n            'formats': formats,\n        }\n", "comments": "# When dwnld_speed exists and has a value larger than the MP4 file's\n# bitrate, Nuvid returns the MP4 URL\n# It's unit is 100bytes/millisecond, see mobile-nuvid-min.js for the algorithm\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_duration,\n)\n\n\nclass NuvidIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www|m)\\.nuvid\\.com/video/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://m.nuvid.com/video/1310741/',\n        'md5': 'eab207b7ac4fccfb4e23c86201f11277',\n        'info_dict': {\n            'id': '1310741',\n            'ext': 'mp4',\n            'title': 'Horny babes show their awesome bodeis and',\n            'duration': 129,\n            'age_limit': 18,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        page_url = 'http://m.nuvid.com/video/%s' % video_id\n        webpage = self._download_webpage(\n            page_url, video_id, 'Downloading video page')\n        # When dwnld_speed exists and has a value larger than the MP4 file's\n        # bitrate, Nuvid returns the MP4 URL\n        # It's unit is 100bytes/millisecond, see mobile-nuvid-min.js for the algorithm\n        self._set_cookie('nuvid.com', 'dwnld_speed', '10.0')\n        mp4_webpage = self._download_webpage(\n            page_url, video_id, 'Downloading video page for MP4 format')\n\n        html5_video_re = r'(?s)<(?:video|audio)[^<]*(?:>.*?<source[^>]*)?\\s+src=[\"\\'](.*?)[\"\\']',\n        video_url = self._html_search_regex(html5_video_re, webpage, video_id)\n        mp4_video_url = self._html_search_regex(html5_video_re, mp4_webpage, video_id)\n        formats = [{\n            'url': video_url,\n        }]\n        if mp4_video_url != video_url:\n            formats.append({\n                'url': mp4_video_url,\n            })\n\n        title = self._html_search_regex(\n            [r'<span title=\"([^\"]+)\">',\n             r'<div class=\"thumb-holder video\">\\s*<h5[^>]*>([^<]+)</h5>',\n             r'<span[^>]+class=\"title_thumb\">([^<]+)</span>'], webpage, 'title').strip()\n        thumbnails = [\n            {\n                'url': thumb_url,\n            } for thumb_url in re.findall(r'<img src=\"([^\"]+)\" alt=\"\" />', webpage)\n        ]\n        thumbnail = thumbnails[0]['url'] if thumbnails else None\n        duration = parse_duration(self._html_search_regex(\n            [r'<i class=\"fa fa-clock-o\"></i>\\s*(\\d{2}:\\d{2})',\n             r'<span[^>]+class=\"view_time\">([^<]+)</span>'], webpage, 'duration', fatal=False))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnails': thumbnails,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'age_limit': 18,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "nuvid.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/nuvid.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}