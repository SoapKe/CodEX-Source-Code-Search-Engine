{"author": "spotify", "code": " -*- coding: utf-8 -*-\n\n Copyright 2012-2015 Spotify AB\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\nimport datetime\nimport json\n\nimport luigi\nfrom luigi.contrib.esindex import CopyToIndex\n\n\nclass FakeDocuments(luigi.Task):\n    \"\"\"\n    Generates a local file containing 5 elements of data in JSON format.\n    \"\"\"\n\n    : the date parameter.\n    date = luigi.DateParameter(default=datetime.date.today())\n\n    def run(self):\n        \"\"\"\n        Writes data in JSON format into the task's output target.\n\n        The data objects have the following attributes:\n\n        * `_id` is the default Elasticsearch id field,\n        * `text`: the text,\n        * `date`: the day when the data was created.\n\n        \"\"\"\n        today = datetime.date.today()\n        with self.output().open('w') as output:\n            for i in range(5):\n                output.write(json.dumps({'_id': i, 'text': 'Hi %s' % i,\n                                         'date': str(today)}))\n                output.write('\\n')\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, a successful execution of this task will create a file on the local filesystem.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.LocalTarget(path='/tmp/_docs-%s.ldj' % self.date)\n\n\nclass IndexDocuments(CopyToIndex):\n    \"\"\"\n    This task loads JSON data contained in a :py:class:`luigi.target.Target` into an ElasticSearch index.\n\n    This task's input will the target returned by :py:meth:`~.FakeDocuments.output`.\n\n    This class uses :py:meth:`luigi.contrib.esindex.CopyToIndex.run`.\n\n    After running this task you can run:\n\n    .. code-block:: console\n\n        $ curl \"localhost:9200/example_index/_search?pretty\"\n\n    to see the indexed documents.\n\n    To see the update log, run\n\n    .. code-block:: console\n\n        $ curl \"localhost:9200/update_log/_search?q=target_index:example_index&pretty\"\n\n    To cleanup both indexes run:\n\n    .. code-block:: console\n\n        $ curl -XDELETE \"localhost:9200/example_index\"\n        $ curl -XDELETE \"localhost:9200/update_log/_query?q=target_index:example_index\"\n\n    \"\"\"\n    : date task parameter (default = today)\n    date = luigi.DateParameter(default=datetime.date.today())\n\n    : the name of the index in ElasticSearch to be updated.\n    index = 'example_index'\n    : the name of the document type.\n    doc_type = 'greetings'\n    : the host running the ElasticSearch service.\n    host = 'localhost'\n    : the port used by the ElasticSearch service.\n    port = 9200\n\n    def requires(self):\n        \"\"\"\n        This task's dependencies:\n\n        * :py:class:`~.FakeDocuments`\n\n        :return: object (:py:class:`luigi.task.Task`)\n        \"\"\"\n        return FakeDocuments()\n\n\nif __name__ == \"__main__\":\n    luigi.run(['IndexDocuments', '--local-scheduler'])\n", "comments": "        generates local file containing 5 elements data json format                  date parameter      date   luigi dateparameter(default datetime date today())      def run(self)                      writes data json format task output target           the data objects following attributes               id  default elasticsearch id field             text   text             date   day data created                       today   datetime date today()         self output() open( w ) output              range(5)                  output write(json dumps(   id     text    hi                                                date   str(today) ))                 output write(  n )      def output(self)                      returns target output task          in case  successful execution task create file local filesystem            return  target output task           rtype  object ( py class  luigi target target )                     return luigi localtarget(path   tmp  docs  ldj    self date)   class indexdocuments(copytoindex)              this task loads json data contained  py class  luigi target target  elasticsearch index       this task input target returned  py meth    fakedocuments output        this class uses  py meth  luigi contrib esindex copytoindex run        after running task run          code block   console            curl  localhost 9200 example index  search pretty       see indexed documents       to see update log  run         code block   console            curl  localhost 9200 update log  search q target index example index pretty       to cleanup indexes run          code block   console            curl  xdelete  localhost 9200 example index            curl  xdelete  localhost 9200 update log  query q target index example index                  date task parameter (default   today)     date   luigi dateparameter(default datetime date today())         name index elasticsearch updated      index    example index         name document type      doc type    greetings         host running elasticsearch service      host    localhost         port used elasticsearch service      port   9200      def requires(self)                      this task dependencies              py class    fakedocuments            return  object ( py class  luigi task task )                    coding  utf 8           copyright 2012 2015 spotify ab       licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license       http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license         date parameter      date task parameter (default   today)     name index elasticsearch updated      name document type      host running elasticsearch service      port used elasticsearch service  ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright 2012-2015 Spotify AB\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nimport datetime\nimport json\n\nimport luigi\nfrom luigi.contrib.esindex import CopyToIndex\n\n\nclass FakeDocuments(luigi.Task):\n    \"\"\"\n    Generates a local file containing 5 elements of data in JSON format.\n    \"\"\"\n\n    #: the date parameter.\n    date = luigi.DateParameter(default=datetime.date.today())\n\n    def run(self):\n        \"\"\"\n        Writes data in JSON format into the task's output target.\n\n        The data objects have the following attributes:\n\n        * `_id` is the default Elasticsearch id field,\n        * `text`: the text,\n        * `date`: the day when the data was created.\n\n        \"\"\"\n        today = datetime.date.today()\n        with self.output().open('w') as output:\n            for i in range(5):\n                output.write(json.dumps({'_id': i, 'text': 'Hi %s' % i,\n                                         'date': str(today)}))\n                output.write('\\n')\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, a successful execution of this task will create a file on the local filesystem.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.LocalTarget(path='/tmp/_docs-%s.ldj' % self.date)\n\n\nclass IndexDocuments(CopyToIndex):\n    \"\"\"\n    This task loads JSON data contained in a :py:class:`luigi.target.Target` into an ElasticSearch index.\n\n    This task's input will the target returned by :py:meth:`~.FakeDocuments.output`.\n\n    This class uses :py:meth:`luigi.contrib.esindex.CopyToIndex.run`.\n\n    After running this task you can run:\n\n    .. code-block:: console\n\n        $ curl \"localhost:9200/example_index/_search?pretty\"\n\n    to see the indexed documents.\n\n    To see the update log, run\n\n    .. code-block:: console\n\n        $ curl \"localhost:9200/update_log/_search?q=target_index:example_index&pretty\"\n\n    To cleanup both indexes run:\n\n    .. code-block:: console\n\n        $ curl -XDELETE \"localhost:9200/example_index\"\n        $ curl -XDELETE \"localhost:9200/update_log/_query?q=target_index:example_index\"\n\n    \"\"\"\n    #: date task parameter (default = today)\n    date = luigi.DateParameter(default=datetime.date.today())\n\n    #: the name of the index in ElasticSearch to be updated.\n    index = 'example_index'\n    #: the name of the document type.\n    doc_type = 'greetings'\n    #: the host running the ElasticSearch service.\n    host = 'localhost'\n    #: the port used by the ElasticSearch service.\n    port = 9200\n\n    def requires(self):\n        \"\"\"\n        This task's dependencies:\n\n        * :py:class:`~.FakeDocuments`\n\n        :return: object (:py:class:`luigi.task.Task`)\n        \"\"\"\n        return FakeDocuments()\n\n\nif __name__ == \"__main__\":\n    luigi.run(['IndexDocuments', '--local-scheduler'])\n", "description": "Luigi is a Python module that helps you build complex pipelines of batch jobs. It handles dependency resolution, workflow management, visualization etc. It also comes with Hadoop support built in. ", "file_name": "elasticsearch_index.py", "id": "0d83aaef424d16a519a39b9f5c27dcc3", "language": "Python", "project_name": "luigi", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/spotify-luigi/spotify-luigi-3cf763d/examples/elasticsearch_index.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:09:25Z", "url": "https://github.com/spotify/luigi", "wiki": false}