{"author": "p-e-w", "code": "\n\n Copyright (c) 2016-2017 Philipp Emanuel Weidmann <pew@worldwidemann.com>\n\n Nemo vir est qui mundum non reddat meliorem.\n\n Released under the terms of the GNU General Public License, version 3\n (https://gnu.org/licenses/gpl.html)\n\n\nfrom os import readlink\nfrom os.path import normpath, join\n\nfrom ptrace.syscall.posix_arg import AT_FDCWD\n\n\nclass Process(object):\n    def __init__(self, ptrace_process):\n        self._process = ptrace_process\n         Start with a large number to avoid collisions with other FDs\n        self._next_file_descriptor = 1000000\n        self._file_descriptors = {}\n\n    def register_path(self, path, file_descriptor=None):\n        if file_descriptor is None:\n            file_descriptor = self._next_file_descriptor\n            self._next_file_descriptor += 1\n        self._file_descriptors[file_descriptor] = path\n        return file_descriptor\n\n    def is_tracked_descriptor(self, file_descriptor):\n        return file_descriptor in self._file_descriptors\n\n    def descriptor_path(self, file_descriptor):\n        if file_descriptor in self._file_descriptors:\n            path = self._file_descriptors[file_descriptor]\n        else:\n            path = readlink(\"/proc/%d/fd/%d\" % (self._process.pid, file_descriptor))\n        return normpath(path)\n\n     Implements the path resolution logic of the \"*at\" syscalls\n    def full_path(self, path, directory_descriptor=AT_FDCWD):\n        if directory_descriptor == AT_FDCWD:\n             Current working directory\n            directory = readlink(\"/proc/%d/cwd\" % self._process.pid)\n        else:\n             Directory referred to by directory_descriptor\n            directory = self.descriptor_path(directory_descriptor)\n         Note that join will discard directory if path is absolute, as desired\n        return normpath(join(directory, path))\n", "comments": "  maybe   see program deciding whether really want happen       copyright (c) 2016 2017 philipp emanuel weidmann  pew worldwidemann com        nemo vir est qui mundum non reddat meliorem        released terms gnu general public license  version 3    (https   gnu org licenses gpl html)    start large number avoid collisions fds    implements path resolution logic    syscalls    current working directory    directory referred directory descriptor    note join discard directory path absolute  desired ", "content": "# maybe - see what a program does before deciding whether you really want it to happen\n#\n# Copyright (c) 2016-2017 Philipp Emanuel Weidmann <pew@worldwidemann.com>\n#\n# Nemo vir est qui mundum non reddat meliorem.\n#\n# Released under the terms of the GNU General Public License, version 3\n# (https://gnu.org/licenses/gpl.html)\n\n\nfrom os import readlink\nfrom os.path import normpath, join\n\nfrom ptrace.syscall.posix_arg import AT_FDCWD\n\n\nclass Process(object):\n    def __init__(self, ptrace_process):\n        self._process = ptrace_process\n        # Start with a large number to avoid collisions with other FDs\n        self._next_file_descriptor = 1000000\n        self._file_descriptors = {}\n\n    def register_path(self, path, file_descriptor=None):\n        if file_descriptor is None:\n            file_descriptor = self._next_file_descriptor\n            self._next_file_descriptor += 1\n        self._file_descriptors[file_descriptor] = path\n        return file_descriptor\n\n    def is_tracked_descriptor(self, file_descriptor):\n        return file_descriptor in self._file_descriptors\n\n    def descriptor_path(self, file_descriptor):\n        if file_descriptor in self._file_descriptors:\n            path = self._file_descriptors[file_descriptor]\n        else:\n            path = readlink(\"/proc/%d/fd/%d\" % (self._process.pid, file_descriptor))\n        return normpath(path)\n\n    # Implements the path resolution logic of the \"*at\" syscalls\n    def full_path(self, path, directory_descriptor=AT_FDCWD):\n        if directory_descriptor == AT_FDCWD:\n            # Current working directory\n            directory = readlink(\"/proc/%d/cwd\" % self._process.pid)\n        else:\n            # Directory referred to by directory_descriptor\n            directory = self.descriptor_path(directory_descriptor)\n        # Note that join will discard directory if path is absolute, as desired\n        return normpath(join(directory, path))\n", "description": " :open_file_folder: :rabbit2: :tophat: See what a program does before deciding whether you really want it to happen.", "file_name": "process.py", "id": "e41a7de4645f28bfc952b2efeb131a83", "language": "Python", "project_name": "maybe", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/p-e-w-maybe/p-e-w-maybe-ec58230/maybe/process.py", "save_time": "", "source": "", "update_at": "2018-03-16T19:18:43Z", "url": "https://github.com/p-e-w/maybe", "wiki": true}