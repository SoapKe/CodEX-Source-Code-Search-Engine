{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n (c) 2017, Nokia\n\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif not(sys.version_info[0] == 2 and sys.version_info[1] >= 7):\n    raise SkipTest('Nuage Ansible modules requires Python 2.7')\n\ntry:\n    from vspk import v5_0 as vsdk\n    from bambou.exceptions import BambouHTTPError\n    from ansible.modules.network.nuage import nuage_vspk\nexcept ImportError:\n    raise SkipTest('Nuage Ansible modules requires the vspk and bambou python libraries')\n\nfrom ansible.compat.tests.mock import patch\nfrom units.modules.utils import set_module_args, AnsibleExitJson, AnsibleFailJson\nfrom .nuage_module import MockNuageConnection, TestNuageModule\n\n_LOOP_COUNTER = 0\n\n\nclass TestNuageVSPKModule(TestNuageModule):\n\n    def setUp(self):\n        super(TestNuageVSPKModule, self).setUp()\n\n        self.patches = []\n\n        def enterprises_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                            callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            if 'unknown' in filter:\n                return []\n\n            result = [vsdk.NUEnterprise(id='enterprise-id', name='test-enterprise')]\n            if filter == '' or filter == 'name == \"test%\"':\n                result.append(vsdk.NUEnterprise(id='enterprise-id-2', name='test-enterprise-2'))\n            return result\n\n        self.enterprises_get_mock = patch('vspk.v5_0.fetchers.NUEnterprisesFetcher.get', new=enterprises_get)\n        self.enterprises_get_mock.start()\n        self.patches.append(self.enterprises_get_mock)\n\n        def enterprises_get_first(self, filter=None, order_by=None, group_by=None, query_parameters=None, commit=False, callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            if filter == 'name == \"test-enterprise-create\"' or 'unknown' in filter:\n                return None\n            return vsdk.NUEnterprise(id='enterprise-id', name='test-enterprise')\n\n        self.enterprises_get_first_mock = patch('vspk.v5_0.fetchers.NUEnterprisesFetcher.get_first', new=enterprises_get_first)\n        self.enterprises_get_first_mock.start()\n        self.patches.append(self.enterprises_get_first_mock)\n\n        def enterprise_delete(self, response_choice=1, callback=None, **kwargs):\n            pass\n\n        self.enterprise_delete_mock = patch('vspk.v5_0.NUEnterprise.delete', new=enterprise_delete)\n        self.enterprise_delete_mock.start()\n        self.patches.append(self.enterprise_delete_mock)\n\n        def enterprise_fetch(self, callback=None, **kwargs):\n            self.id = 'enterprise-id'\n            self.name = 'test-enterprise'\n\n        self.enterprise_fetch_mock = patch('vspk.v5_0.NUEnterprise.fetch', new=enterprise_fetch)\n        self.enterprise_fetch_mock.start()\n        self.patches.append(self.enterprise_fetch_mock)\n\n        def enterprise_save(self, response_choice=None, callback=None, **kwargs):\n            self.id = 'enterprise-id'\n            self.name = 'test-enterprise-update'\n\n        self.enterprise_save_mock = patch('vspk.v5_0.NUEnterprise.save', new=enterprise_save)\n        self.enterprise_save_mock.start()\n        self.patches.append(self.enterprise_save_mock)\n\n        def enterprise_create_child(self, nurest_object, response_choice=None, callback=None, commit=True, **kwargs):\n            nurest_object.id = 'user-id-create'\n            return nurest_object\n\n        self.enterprise_create_child_mock = patch('vspk.v5_0.NUEnterprise.create_child', new=enterprise_create_child)\n        self.enterprise_create_child_mock.start()\n        self.patches.append(self.enterprise_create_child_mock)\n\n        def me_create_child(self, nurest_object, response_choice=None, callback=None, commit=True, **kwargs):\n            nurest_object.id = 'enterprise-id-create'\n            return nurest_object\n\n        self.me_create_child_mock = patch('vspk.v5_0.NUMe.create_child', new=me_create_child)\n        self.me_create_child_mock.start()\n        self.patches.append(self.me_create_child_mock)\n\n        def user_fetch(self, callback=None, **kwargs):\n            self.id = 'user-id'\n            self.first_name = 'John'\n            self.last_name = 'Doe'\n            self.email = 'john.doe@localhost'\n            self.user_name = 'johndoe'\n            self.password = ''\n\n        self.user_fetch_mock = patch('vspk.v5_0.NUUser.fetch', new=user_fetch)\n        self.user_fetch_mock.start()\n        self.patches.append(self.user_fetch_mock)\n\n        def user_save(self, response_choice=None, callback=None, **kwargs):\n            self.id = 'user-id'\n            self.first_name = 'John'\n            self.last_name = 'Doe'\n            self.email = 'john.doe@localhost'\n            self.user_name = 'johndoe'\n            self.password = ''\n\n        self.user_save_mock = patch('vspk.v5_0.NUUser.save', new=user_save)\n        self.user_save_mock.start()\n        self.patches.append(self.user_save_mock)\n\n        def groups_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                       callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return []\n\n        self.groups_get_mock = patch('vspk.v5_0.fetchers.NUGroupsFetcher.get', new=groups_get)\n        self.groups_get_mock.start()\n        self.patches.append(self.groups_get_mock)\n\n        def group_fetch(self, callback=None, **kwargs):\n            self.id = 'group-id'\n            self.name = 'group'\n\n        self.group_fetch_mock = patch('vspk.v5_0.NUGroup.fetch', new=group_fetch)\n        self.group_fetch_mock.start()\n        self.patches.append(self.group_fetch_mock)\n\n        def group_assign(self, objects, nurest_object_type, callback=None, commit=True, **kwargs):\n            self.id = 'group-id'\n            self.name = 'group'\n\n        self.group_assign_mock = patch('vspk.v5_0.NUGroup.assign', new=group_assign)\n        self.group_assign_mock.start()\n        self.patches.append(self.group_assign_mock)\n\n        def job_fetch(self, callback=None, **kwargs):\n            global _LOOP_COUNTER\n            self.id = 'job-id'\n            self.command = 'EXPORT'\n            self.status = 'RUNNING'\n            if _LOOP_COUNTER > 1:\n                self.status = 'SUCCESS'\n            _LOOP_COUNTER += 1\n\n        self.job_fetch_mock = patch('vspk.v5_0.NUJob.fetch', new=job_fetch)\n        self.job_fetch_mock.start()\n        self.patches.append(self.job_fetch_mock)\n\n    def tearDown(self):\n        super(TestNuageVSPKModule, self).tearDown()\n        for mock in self.patches:\n            mock.stop()\n\n    def test_certificate_auth(self):\n        set_module_args(\n            args={\n                'type': 'Enterprise',\n                'state': 'present',\n                'properties': {\n                    'name': 'test-enterprise'\n                },\n                'auth': {\n                    'api_username': 'csproot',\n                    'api_certificate': '/dummy/location/certificate.pem',\n                    'api_key': '/dummy/location/key.pem',\n                    'api_enterprise': 'csp',\n                    'api_url': 'https://localhost:8443',\n                    'api_version': 'v5_0'\n                }\n            }\n        )\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'enterprise-id')\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise')\n\n    def test_command_find_by_property(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'command': 'find',\n            'properties': {\n                'name': 'test-enterprise'\n            }\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'enterprise-id')\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise')\n\n    def test_command_find_by_filter(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'command': 'find',\n            'match_filter': 'name == \"test%\"'\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n        self.assertEqual(len(result['entities']), 2)\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise')\n        self.assertEqual(result['entities'][1]['name'], 'test-enterprise-2')\n\n    def test_command_find_by_id(self):\n        set_module_args(args={\n            'id': 'enterprise-id',\n            'type': 'Enterprise',\n            'command': 'find'\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'enterprise-id')\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise')\n\n    def test_command_find_all(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'command': 'find'\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n        self.assertEqual(len(result['entities']), 2)\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise')\n        self.assertEqual(result['entities'][1]['name'], 'test-enterprise-2')\n\n    def test_command_change_password(self):\n        set_module_args(args={\n            'id': 'user-id',\n            'type': 'User',\n            'parent_id': 'enterprise-id',\n            'parent_type': 'Enterprise',\n            'command': 'change_password',\n            'properties': {\n                'password': 'test'\n            }\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertEqual(result['changed'], True)\n        self.assertEqual(result['id'], 'user-id')\n        self.assertEqual(result['entities'][0]['firstName'], 'John')\n        self.assertEqual(result['entities'][0]['lastName'], 'Doe')\n        self.assertEqual(result['entities'][0]['email'], 'john.doe@localhost')\n        self.assertEqual(result['entities'][0]['userName'], 'johndoe')\n        self.assertEqual(result['entities'][0]['password'], '')\n\n    def test_command_wait_for_job(self):\n        set_module_args(args={\n            'id': 'job-id',\n            'type': 'Job',\n            'command': 'wait_for_job',\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertEqual(result['changed'], True)\n        self.assertEqual(result['id'], 'job-id')\n        self.assertEqual(result['entities'][0]['command'], 'EXPORT')\n        self.assertEqual(result['entities'][0]['status'], 'SUCCESS')\n\n    def test_command_get_csp_enterprise(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'command': 'get_csp_enterprise'\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'enterprise-id')\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise')\n\n    def test_state_present_existing(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'id': 'enterprise-id',\n                'name': 'test-enterprise'\n            }\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'enterprise-id')\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise')\n\n    def test_state_present_existing_filter(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'match_filter': 'name == \"test-enterprise\"'\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'enterprise-id')\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise')\n\n    def test_state_present_create(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'test-enterprise-create'\n            }\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertEqual(result['changed'], True)\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'enterprise-id-create')\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise-create')\n\n    def test_state_present_update(self):\n        set_module_args(args={\n            'id': 'enterprise-id',\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'test-enterprise-update'\n            }\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertEqual(result['changed'], True)\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'enterprise-id')\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise-update')\n\n    def test_state_present_member_existing(self):\n        set_module_args(args={\n            'id': 'user-id',\n            'type': 'User',\n            'parent_id': 'group-id',\n            'parent_type': 'Group',\n            'state': 'present'\n        })\n\n        def users_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                      callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return [vsdk.NUUser(id='user-id'), vsdk.NUUser(id='user-id-2')]\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get', users_get):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n\n    def test_state_present_member_missing(self):\n        set_module_args(args={\n            'id': 'user-id',\n            'type': 'User',\n            'parent_id': 'group-id',\n            'parent_type': 'Group',\n            'state': 'present'\n        })\n\n        def users_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                      callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return []\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get', users_get):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertEqual(result['changed'], True)\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'user-id')\n\n    def test_state_present_children_update(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'test-enterprise'\n            },\n            'children': [\n                {\n                    'id': 'user-id',\n                    'type': 'User',\n                    'match_filter': 'userName == \"johndoe\"',\n                    'properties': {\n                        'user_name': 'johndoe-changed'\n                    }\n                }\n            ]\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertEqual(result['changed'], True)\n        self.assertEqual(len(result['entities']), 2)\n\n    def test_state_present_children_create(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'test-enterprise-create'\n            },\n            'children': [\n                {\n                    'type': 'User',\n                    'properties': {\n                        'user_name': 'johndoe-new'\n                    }\n                }\n            ]\n        })\n\n        def users_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                      callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return []\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get', users_get):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['changed'])\n        self.assertEqual(len(result['entities']), 2)\n\n    def test_state_present_children_member_missing(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'unkown-test-enterprise'\n            },\n            'children': [\n                {\n                    'type': 'Group',\n                    'properties': {\n                        'name': 'unknown-group'\n                    },\n                    'children': [\n                        {\n                            'id': 'user-id',\n                            'type': 'User'\n                        }\n                    ]\n                }\n            ]\n        })\n\n        def users_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                      callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return []\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get', users_get):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['changed'])\n        self.assertEqual(len(result['entities']), 3)\n\n    def test_state_absent(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'absent',\n            'properties': {\n                'name': 'test-enterprise'\n            }\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['changed'])\n\n    def test_state_absent_member(self):\n        set_module_args(args={\n            'id': 'user-id',\n            'type': 'User',\n            'parent_id': 'group-id',\n            'parent_type': 'Group',\n            'state': 'absent'\n        })\n\n        def users_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                      callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return [vsdk.NUUser(id='user-id')]\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get', users_get):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['changed'])\n\n    def test_exception_session(self):\n        set_module_args(args={\n            'id': 'enterprise-id',\n            'type': 'Enterprise',\n            'command': 'find'\n        })\n\n        def failed_session_start(self):\n            raise BambouHTTPError(MockNuageConnection(status_code='401', reason='Unauthorized', errors={}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUVSDSession.start', new=failed_session_start):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Unable to connect to the API URL with given username, password and enterprise: [HTTP 401(Unauthorized)] {}')\n\n    def test_exception_find_parent(self):\n        set_module_args(args={\n            'type': 'User',\n            'parent_id': 'group-id',\n            'parent_type': 'Group',\n            'command': 'find'\n        })\n\n        def group_failed_fetch(self, callback=None, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='404', reason='Not Found', errors={'description': 'Entity not found'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUGroup.fetch', group_failed_fetch):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Failed to fetch the specified parent: [HTTP 404(Not Found)] {'description': 'Entity not found'}\")\n\n    def test_exception_find_entities_id(self):\n        set_module_args(args={\n            'id': 'enterprise-id',\n            'type': 'Enterprise',\n            'command': 'find'\n        })\n\n        def enterprise_failed_fetch(self, callback=None, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='404', reason='Not Found', errors={'description': 'Entity not found'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUEnterprise.fetch', enterprise_failed_fetch):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Failed to fetch the specified entity by ID: [HTTP 404(Not Found)] {'description': 'Entity not found'}\")\n\n    def test_excption_find_entities_property(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'match_filter': 'name == \"enterprise-id\"',\n            'command': 'find'\n        })\n\n        def enterprises_failed_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                                   callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            raise BambouHTTPError(MockNuageConnection(status_code='404', reason='Not Found', errors={'description': 'Entity not found'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUEnterprisesFetcher.get', enterprises_failed_get):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Unable to find matching entries')\n\n    def test_exception_find_entity_id(self):\n        set_module_args(args={\n            'id': 'enterprise-id',\n            'type': 'Enterprise',\n            'state': 'present'\n        })\n\n        def enterprise_failed_fetch(self, callback=None, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='404', reason='Not Found', errors={'description': 'Entity not found'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUEnterprise.fetch', enterprise_failed_fetch):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Failed to fetch the specified entity by ID: [HTTP 404(Not Found)] {'description': 'Entity not found'}\")\n\n    def test_exception_find_entity_property(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'match_filter': 'name == \"enterprise-id\"',\n            'state': 'absent'\n        })\n\n        def enterprises_failed_get_first(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                                         callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            raise BambouHTTPError(MockNuageConnection(status_code='404', reason='Not Found', errors={'description': 'Entity not found'}))\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUEnterprisesFetcher.get_first', enterprises_failed_get_first):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n\n    def test_exception_get_csp_enterprise(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'command': 'get_csp_enterprise'\n        })\n\n        def enterprise_failed_fetch(self, callback=None, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='404', reason='Not Found', errors={'description': 'Entity not found'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUEnterprise.fetch', enterprise_failed_fetch):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Unable to fetch CSP enterprise: [HTTP 404(Not Found)] {'description': 'Entity not found'}\")\n\n    def test_exception_assign_member(self):\n        set_module_args(args={\n            'id': 'user-id',\n            'type': 'User',\n            'parent_id': 'group-id',\n            'parent_type': 'Group',\n            'state': 'present'\n        })\n\n        def users_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                      callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return []\n\n        def group_assign(self, objects, nurest_object_type, callback=None, commit=True, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='500', reason='Server exception', errors={'description': 'Unable to assign member'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get', users_get):\n                with patch('vspk.v5_0.NUGroup.assign', new=group_assign):\n                    nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Unable to assign entity as a member: [HTTP 500(Server exception)] {'description': 'Unable to assign member'}\")\n\n    def test_exception_unassign_member(self):\n        set_module_args(args={\n            'id': 'user-id',\n            'type': 'User',\n            'parent_id': 'group-id',\n            'parent_type': 'Group',\n            'state': 'absent'\n        })\n\n        def users_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                      callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return [vsdk.NUUser(id='user-id'), vsdk.NUUser(id='user-id-2')]\n\n        def group_assign(self, objects, nurest_object_type, callback=None, commit=True, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='500', reason='Server exception', errors={'description': 'Unable to remove member'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get', users_get):\n                with patch('vspk.v5_0.NUGroup.assign', new=group_assign):\n                    nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Unable to remove entity as a member: [HTTP 500(Server exception)] {'description': 'Unable to remove member'}\")\n\n    def test_exception_create_entity(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'test-enterprise-create'\n            }\n        })\n\n        def me_create_child(self, nurest_object, response_choice=None, callback=None, commit=True, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='500', reason='Server exception', errors={'description': 'Unable to create entity'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUMe.create_child', me_create_child):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Unable to create entity: [HTTP 500(Server exception)] {'description': 'Unable to create entity'}\")\n\n    def test_exception_save_entity(self):\n        set_module_args(args={\n            'id': 'enterprise-id',\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'new-enterprise-name'\n            }\n        })\n\n        def enterprise_save(self, response_choice=None, callback=None, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='500', reason='Server exception', errors={'description': 'Unable to save entity'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUEnterprise.save', enterprise_save):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Unable to update entity: [HTTP 500(Server exception)] {'description': 'Unable to save entity'}\")\n\n    def test_exception_delete_entity(self):\n        set_module_args(args={\n            'id': 'enterprise-id',\n            'type': 'Enterprise',\n            'state': 'absent'\n        })\n\n        def enterprise_delete(self, response_choice=1, callback=None, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='500', reason='Server exception', errors={'description': 'Unable to delete entity'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUEnterprise.delete', enterprise_delete):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Unable to delete entity: [HTTP 500(Server exception)] {'description': 'Unable to delete entity'}\")\n\n    def test_exception_wait_for_job(self):\n        set_module_args(args={\n            'id': 'job-id',\n            'type': 'Job',\n            'command': 'wait_for_job'\n        })\n\n        def job_fetch(self, callback=None, **kwargs):\n            global _LOOP_COUNTER\n            self.id = 'job-id'\n            self.command = 'EXPORT'\n            self.status = 'RUNNING'\n            if _LOOP_COUNTER > 1:\n                self.status = 'ERROR'\n            _LOOP_COUNTER += 1\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUJob.fetch', new=job_fetch):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Job ended in an error\")\n\n    def test_fail_auth(self):\n        set_module_args(\n            args={\n                'type': 'Enterprise',\n                'command': 'find',\n                'auth': {\n                    'api_username': 'csproot',\n                    'api_enterprise': 'csp',\n                    'api_url': 'https://localhost:8443',\n                    'api_version': 'v5_0'\n                }\n            }\n        )\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Missing api_password or api_certificate and api_key parameter in auth')\n\n    def test_fail_version(self):\n        set_module_args(\n            args={\n                'type': 'Enterprise',\n                'command': 'find',\n                'auth': {\n                    'api_username': 'csproot',\n                    'api_password': 'csproot',\n                    'api_enterprise': 'csp',\n                    'api_url': 'https://localhost:8443',\n                    'api_version': 'v1_0'\n                }\n            }\n        )\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'vspk is required for this module, or the API version specified does not exist.')\n\n    def test_fail_type(self):\n        set_module_args(args={\n            'type': 'Unknown',\n            'command': 'find'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Unrecognised type specified')\n\n    def test_fail_parent_type(self):\n        set_module_args(args={\n            'type': 'User',\n            'parent_id': 'unkown-id',\n            'parent_type': 'Unknown',\n            'command': 'find'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Unrecognised parent type specified')\n\n    def test_fail_parent_child(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'parent_id': 'user-id',\n            'parent_type': 'User',\n            'command': 'find'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Specified parent is not a valid parent for the specified type')\n\n    def test_fail_no_parent(self):\n        set_module_args(args={\n            'type': 'Group',\n            'command': 'find'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'No parent specified and root object is not a parent for the type')\n\n    def test_fail_present_member(self):\n        set_module_args(args={\n            'type': 'User',\n            'match_filter': 'name == \"test-user\"',\n            'parent_id': 'group-id',\n            'parent_type': 'Group',\n            'state': 'present'\n        })\n\n        def users_get_first(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                            callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return None\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get_first', users_get_first):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Trying to assign an entity that does not exist', result)\n\n    def test_fail_change_password(self):\n        set_module_args(args={\n            'id': 'user-id',\n            'type': 'User',\n            'command': 'change_password',\n            'properties': {}\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'command is change_password but the following are missing: password property')\n\n    def test_fail_change_password_non_user(self):\n        set_module_args(args={\n            'id': 'group-id',\n            'type': 'Group',\n            'command': 'change_password',\n            'properties': {\n                'password': 'new-password'\n            }\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Entity does not have a password property')\n\n    def test_fail_command_find(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'command': 'find',\n            'properties': {\n                'id': 'unknown-enterprise-id',\n                'name': 'unkown-enterprise'\n            }\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Unable to find matching entries')\n\n    def test_fail_children_type(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'test-enterprise-create'\n            },\n            'children': [\n                {\n                    'properties': {\n                        'user_name': 'johndoe-new'\n                    }\n                }\n            ]\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Child type unspecified')\n\n    def test_fail_children_mandatory(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'test-enterprise-create'\n            },\n            'children': [\n                {\n                    'type': 'User'\n                }\n            ]\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Child ID or properties unspecified')\n\n    def test_fail_children_unknown(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'test-enterprise-create'\n            },\n            'children': [\n                {\n                    'id': 'unkown-id',\n                    'type': 'Unkown'\n                }\n            ]\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Unrecognised child type specified')\n\n    def test_fail_children_parent(self):\n        set_module_args(args={\n            'id': 'group-id',\n            'type': 'Group',\n            'state': 'present',\n            'children': [\n                {\n                    'type': 'User',\n                    'properties': {\n                        'name': 'test-user'\n                    }\n                }\n            ]\n        })\n\n        def users_get_first(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                            callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return None\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get_first', users_get_first):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Trying to assign a child that does not exist')\n\n    def test_fail_children_fetcher(self):\n        set_module_args(args={\n            'id': 'group-id',\n            'type': 'Group',\n            'state': 'present',\n            'children': [\n                {\n                    'type': 'Enterprise',\n                    'properties': {\n                        'name': 'test-enterprise'\n                    }\n                }\n            ]\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Unable to find a fetcher for child, and no ID specified.')\n\n    def test_fail_has_changed(self):\n        set_module_args(args={\n            'id': 'user-id',\n            'type': 'User',\n            'state': 'present',\n            'properties': {\n                'user_name': 'changed-user',\n                'fake': 'invalid-property',\n                'password': 'hidden-property'\n            }\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Property fake is not valid for this type of entity')\n\n    def test_input_auth_username(self):\n        set_module_args(\n            args={\n                'type': 'Enterprise',\n                'command': 'find',\n                'auth': {\n                    'api_password': 'csproot',\n                    'api_enterprise': 'csp',\n                    'api_url': 'https://localhost:8443',\n                    'api_version': 'v5_0'\n                }\n            }\n        )\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'missing required arguments: api_username')\n\n    def test_input_auth_enterprise(self):\n        set_module_args(\n            args={\n                'type': 'Enterprise',\n                'command': 'find',\n                'auth': {\n                    'api_username': 'csproot',\n                    'api_password': 'csproot',\n                    'api_url': 'https://localhost:8443',\n                    'api_version': 'v5_0'\n                }\n            }\n        )\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'missing required arguments: api_enterprise')\n\n    def test_input_auth_url(self):\n        set_module_args(\n            args={\n                'type': 'Enterprise',\n                'command': 'find',\n                'auth': {\n                    'api_username': 'csproot',\n                    'api_password': 'csproot',\n                    'api_enterprise': 'csp',\n                    'api_version': 'v5_0'\n                }\n            }\n        )\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'missing required arguments: api_url')\n\n    def test_input_auth_version(self):\n        set_module_args(\n            args={\n                'type': 'Enterprise',\n                'command': 'find',\n                'auth': {\n                    'api_username': 'csproot',\n                    'api_password': 'csproot',\n                    'api_enterprise': 'csp',\n                    'api_url': 'https://localhost:8443',\n                }\n            }\n        )\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'missing required arguments: api_version')\n\n    def test_input_exclusive(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'command': 'find'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"parameters are mutually exclusive: ['command', 'state']\")\n\n    def test_input_require_both_parent_id(self):\n        set_module_args(args={\n            'type': 'User',\n            'command': 'find',\n            'parent_type': 'Enterprise'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"parameters are required together: ['parent_id', 'parent_type']\")\n\n    def test_input_require_both_parent_type(self):\n        set_module_args(args={\n            'type': 'User',\n            'command': 'find',\n            'parent_id': 'enterprise-id'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"parameters are required together: ['parent_id', 'parent_type']\")\n\n    def test_input_require_on_off(self):\n        set_module_args(args={\n            'type': 'Enterprise'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"one of the following is required: command,state\")\n\n    def test_input_require_if_present(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"state is present but the following are missing: id,properties,match_filter\")\n\n    def test_input_require_if_absent(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'absent',\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"state is absent but the following are missing: id,properties,match_filter\")\n\n    def test_input_require_if_change_password_id(self):\n        set_module_args(args={\n            'type': 'User',\n            'command': 'change_password',\n            'properties': {\n                'password': 'dummy-password'\n            }\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"command is change_password but the following are missing: id\")\n\n    def test_input_require_if_change_password_properties(self):\n        set_module_args(args={\n            'type': 'User',\n            'command': 'change_password',\n            'id': 'user-id'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"command is change_password but the following are missing: properties\")\n\n    def test_input_require_if_wait_for_job_id(self):\n        set_module_args(args={\n            'type': 'Job',\n            'command': 'wait_for_job'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"command is wait_for_job but the following are missing: id\")\n", "comments": "      coding  utf 8        (c) 2017  nokia    this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses    ", "content": "# -*- coding: utf-8 -*-\n\n# (c) 2017, Nokia\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif not(sys.version_info[0] == 2 and sys.version_info[1] >= 7):\n    raise SkipTest('Nuage Ansible modules requires Python 2.7')\n\ntry:\n    from vspk import v5_0 as vsdk\n    from bambou.exceptions import BambouHTTPError\n    from ansible.modules.network.nuage import nuage_vspk\nexcept ImportError:\n    raise SkipTest('Nuage Ansible modules requires the vspk and bambou python libraries')\n\nfrom ansible.compat.tests.mock import patch\nfrom units.modules.utils import set_module_args, AnsibleExitJson, AnsibleFailJson\nfrom .nuage_module import MockNuageConnection, TestNuageModule\n\n_LOOP_COUNTER = 0\n\n\nclass TestNuageVSPKModule(TestNuageModule):\n\n    def setUp(self):\n        super(TestNuageVSPKModule, self).setUp()\n\n        self.patches = []\n\n        def enterprises_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                            callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            if 'unknown' in filter:\n                return []\n\n            result = [vsdk.NUEnterprise(id='enterprise-id', name='test-enterprise')]\n            if filter == '' or filter == 'name == \"test%\"':\n                result.append(vsdk.NUEnterprise(id='enterprise-id-2', name='test-enterprise-2'))\n            return result\n\n        self.enterprises_get_mock = patch('vspk.v5_0.fetchers.NUEnterprisesFetcher.get', new=enterprises_get)\n        self.enterprises_get_mock.start()\n        self.patches.append(self.enterprises_get_mock)\n\n        def enterprises_get_first(self, filter=None, order_by=None, group_by=None, query_parameters=None, commit=False, callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            if filter == 'name == \"test-enterprise-create\"' or 'unknown' in filter:\n                return None\n            return vsdk.NUEnterprise(id='enterprise-id', name='test-enterprise')\n\n        self.enterprises_get_first_mock = patch('vspk.v5_0.fetchers.NUEnterprisesFetcher.get_first', new=enterprises_get_first)\n        self.enterprises_get_first_mock.start()\n        self.patches.append(self.enterprises_get_first_mock)\n\n        def enterprise_delete(self, response_choice=1, callback=None, **kwargs):\n            pass\n\n        self.enterprise_delete_mock = patch('vspk.v5_0.NUEnterprise.delete', new=enterprise_delete)\n        self.enterprise_delete_mock.start()\n        self.patches.append(self.enterprise_delete_mock)\n\n        def enterprise_fetch(self, callback=None, **kwargs):\n            self.id = 'enterprise-id'\n            self.name = 'test-enterprise'\n\n        self.enterprise_fetch_mock = patch('vspk.v5_0.NUEnterprise.fetch', new=enterprise_fetch)\n        self.enterprise_fetch_mock.start()\n        self.patches.append(self.enterprise_fetch_mock)\n\n        def enterprise_save(self, response_choice=None, callback=None, **kwargs):\n            self.id = 'enterprise-id'\n            self.name = 'test-enterprise-update'\n\n        self.enterprise_save_mock = patch('vspk.v5_0.NUEnterprise.save', new=enterprise_save)\n        self.enterprise_save_mock.start()\n        self.patches.append(self.enterprise_save_mock)\n\n        def enterprise_create_child(self, nurest_object, response_choice=None, callback=None, commit=True, **kwargs):\n            nurest_object.id = 'user-id-create'\n            return nurest_object\n\n        self.enterprise_create_child_mock = patch('vspk.v5_0.NUEnterprise.create_child', new=enterprise_create_child)\n        self.enterprise_create_child_mock.start()\n        self.patches.append(self.enterprise_create_child_mock)\n\n        def me_create_child(self, nurest_object, response_choice=None, callback=None, commit=True, **kwargs):\n            nurest_object.id = 'enterprise-id-create'\n            return nurest_object\n\n        self.me_create_child_mock = patch('vspk.v5_0.NUMe.create_child', new=me_create_child)\n        self.me_create_child_mock.start()\n        self.patches.append(self.me_create_child_mock)\n\n        def user_fetch(self, callback=None, **kwargs):\n            self.id = 'user-id'\n            self.first_name = 'John'\n            self.last_name = 'Doe'\n            self.email = 'john.doe@localhost'\n            self.user_name = 'johndoe'\n            self.password = ''\n\n        self.user_fetch_mock = patch('vspk.v5_0.NUUser.fetch', new=user_fetch)\n        self.user_fetch_mock.start()\n        self.patches.append(self.user_fetch_mock)\n\n        def user_save(self, response_choice=None, callback=None, **kwargs):\n            self.id = 'user-id'\n            self.first_name = 'John'\n            self.last_name = 'Doe'\n            self.email = 'john.doe@localhost'\n            self.user_name = 'johndoe'\n            self.password = ''\n\n        self.user_save_mock = patch('vspk.v5_0.NUUser.save', new=user_save)\n        self.user_save_mock.start()\n        self.patches.append(self.user_save_mock)\n\n        def groups_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                       callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return []\n\n        self.groups_get_mock = patch('vspk.v5_0.fetchers.NUGroupsFetcher.get', new=groups_get)\n        self.groups_get_mock.start()\n        self.patches.append(self.groups_get_mock)\n\n        def group_fetch(self, callback=None, **kwargs):\n            self.id = 'group-id'\n            self.name = 'group'\n\n        self.group_fetch_mock = patch('vspk.v5_0.NUGroup.fetch', new=group_fetch)\n        self.group_fetch_mock.start()\n        self.patches.append(self.group_fetch_mock)\n\n        def group_assign(self, objects, nurest_object_type, callback=None, commit=True, **kwargs):\n            self.id = 'group-id'\n            self.name = 'group'\n\n        self.group_assign_mock = patch('vspk.v5_0.NUGroup.assign', new=group_assign)\n        self.group_assign_mock.start()\n        self.patches.append(self.group_assign_mock)\n\n        def job_fetch(self, callback=None, **kwargs):\n            global _LOOP_COUNTER\n            self.id = 'job-id'\n            self.command = 'EXPORT'\n            self.status = 'RUNNING'\n            if _LOOP_COUNTER > 1:\n                self.status = 'SUCCESS'\n            _LOOP_COUNTER += 1\n\n        self.job_fetch_mock = patch('vspk.v5_0.NUJob.fetch', new=job_fetch)\n        self.job_fetch_mock.start()\n        self.patches.append(self.job_fetch_mock)\n\n    def tearDown(self):\n        super(TestNuageVSPKModule, self).tearDown()\n        for mock in self.patches:\n            mock.stop()\n\n    def test_certificate_auth(self):\n        set_module_args(\n            args={\n                'type': 'Enterprise',\n                'state': 'present',\n                'properties': {\n                    'name': 'test-enterprise'\n                },\n                'auth': {\n                    'api_username': 'csproot',\n                    'api_certificate': '/dummy/location/certificate.pem',\n                    'api_key': '/dummy/location/key.pem',\n                    'api_enterprise': 'csp',\n                    'api_url': 'https://localhost:8443',\n                    'api_version': 'v5_0'\n                }\n            }\n        )\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'enterprise-id')\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise')\n\n    def test_command_find_by_property(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'command': 'find',\n            'properties': {\n                'name': 'test-enterprise'\n            }\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'enterprise-id')\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise')\n\n    def test_command_find_by_filter(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'command': 'find',\n            'match_filter': 'name == \"test%\"'\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n        self.assertEqual(len(result['entities']), 2)\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise')\n        self.assertEqual(result['entities'][1]['name'], 'test-enterprise-2')\n\n    def test_command_find_by_id(self):\n        set_module_args(args={\n            'id': 'enterprise-id',\n            'type': 'Enterprise',\n            'command': 'find'\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'enterprise-id')\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise')\n\n    def test_command_find_all(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'command': 'find'\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n        self.assertEqual(len(result['entities']), 2)\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise')\n        self.assertEqual(result['entities'][1]['name'], 'test-enterprise-2')\n\n    def test_command_change_password(self):\n        set_module_args(args={\n            'id': 'user-id',\n            'type': 'User',\n            'parent_id': 'enterprise-id',\n            'parent_type': 'Enterprise',\n            'command': 'change_password',\n            'properties': {\n                'password': 'test'\n            }\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertEqual(result['changed'], True)\n        self.assertEqual(result['id'], 'user-id')\n        self.assertEqual(result['entities'][0]['firstName'], 'John')\n        self.assertEqual(result['entities'][0]['lastName'], 'Doe')\n        self.assertEqual(result['entities'][0]['email'], 'john.doe@localhost')\n        self.assertEqual(result['entities'][0]['userName'], 'johndoe')\n        self.assertEqual(result['entities'][0]['password'], '')\n\n    def test_command_wait_for_job(self):\n        set_module_args(args={\n            'id': 'job-id',\n            'type': 'Job',\n            'command': 'wait_for_job',\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertEqual(result['changed'], True)\n        self.assertEqual(result['id'], 'job-id')\n        self.assertEqual(result['entities'][0]['command'], 'EXPORT')\n        self.assertEqual(result['entities'][0]['status'], 'SUCCESS')\n\n    def test_command_get_csp_enterprise(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'command': 'get_csp_enterprise'\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'enterprise-id')\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise')\n\n    def test_state_present_existing(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'id': 'enterprise-id',\n                'name': 'test-enterprise'\n            }\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'enterprise-id')\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise')\n\n    def test_state_present_existing_filter(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'match_filter': 'name == \"test-enterprise\"'\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'enterprise-id')\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise')\n\n    def test_state_present_create(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'test-enterprise-create'\n            }\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertEqual(result['changed'], True)\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'enterprise-id-create')\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise-create')\n\n    def test_state_present_update(self):\n        set_module_args(args={\n            'id': 'enterprise-id',\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'test-enterprise-update'\n            }\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertEqual(result['changed'], True)\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'enterprise-id')\n        self.assertEqual(result['entities'][0]['name'], 'test-enterprise-update')\n\n    def test_state_present_member_existing(self):\n        set_module_args(args={\n            'id': 'user-id',\n            'type': 'User',\n            'parent_id': 'group-id',\n            'parent_type': 'Group',\n            'state': 'present'\n        })\n\n        def users_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                      callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return [vsdk.NUUser(id='user-id'), vsdk.NUUser(id='user-id-2')]\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get', users_get):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n\n    def test_state_present_member_missing(self):\n        set_module_args(args={\n            'id': 'user-id',\n            'type': 'User',\n            'parent_id': 'group-id',\n            'parent_type': 'Group',\n            'state': 'present'\n        })\n\n        def users_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                      callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return []\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get', users_get):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertEqual(result['changed'], True)\n        self.assertEqual(len(result['entities']), 1)\n        self.assertEqual(result['id'], 'user-id')\n\n    def test_state_present_children_update(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'test-enterprise'\n            },\n            'children': [\n                {\n                    'id': 'user-id',\n                    'type': 'User',\n                    'match_filter': 'userName == \"johndoe\"',\n                    'properties': {\n                        'user_name': 'johndoe-changed'\n                    }\n                }\n            ]\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertEqual(result['changed'], True)\n        self.assertEqual(len(result['entities']), 2)\n\n    def test_state_present_children_create(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'test-enterprise-create'\n            },\n            'children': [\n                {\n                    'type': 'User',\n                    'properties': {\n                        'user_name': 'johndoe-new'\n                    }\n                }\n            ]\n        })\n\n        def users_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                      callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return []\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get', users_get):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['changed'])\n        self.assertEqual(len(result['entities']), 2)\n\n    def test_state_present_children_member_missing(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'unkown-test-enterprise'\n            },\n            'children': [\n                {\n                    'type': 'Group',\n                    'properties': {\n                        'name': 'unknown-group'\n                    },\n                    'children': [\n                        {\n                            'id': 'user-id',\n                            'type': 'User'\n                        }\n                    ]\n                }\n            ]\n        })\n\n        def users_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                      callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return []\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get', users_get):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['changed'])\n        self.assertEqual(len(result['entities']), 3)\n\n    def test_state_absent(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'absent',\n            'properties': {\n                'name': 'test-enterprise'\n            }\n        })\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['changed'])\n\n    def test_state_absent_member(self):\n        set_module_args(args={\n            'id': 'user-id',\n            'type': 'User',\n            'parent_id': 'group-id',\n            'parent_type': 'Group',\n            'state': 'absent'\n        })\n\n        def users_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                      callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return [vsdk.NUUser(id='user-id')]\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get', users_get):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['changed'])\n\n    def test_exception_session(self):\n        set_module_args(args={\n            'id': 'enterprise-id',\n            'type': 'Enterprise',\n            'command': 'find'\n        })\n\n        def failed_session_start(self):\n            raise BambouHTTPError(MockNuageConnection(status_code='401', reason='Unauthorized', errors={}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUVSDSession.start', new=failed_session_start):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Unable to connect to the API URL with given username, password and enterprise: [HTTP 401(Unauthorized)] {}')\n\n    def test_exception_find_parent(self):\n        set_module_args(args={\n            'type': 'User',\n            'parent_id': 'group-id',\n            'parent_type': 'Group',\n            'command': 'find'\n        })\n\n        def group_failed_fetch(self, callback=None, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='404', reason='Not Found', errors={'description': 'Entity not found'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUGroup.fetch', group_failed_fetch):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Failed to fetch the specified parent: [HTTP 404(Not Found)] {'description': 'Entity not found'}\")\n\n    def test_exception_find_entities_id(self):\n        set_module_args(args={\n            'id': 'enterprise-id',\n            'type': 'Enterprise',\n            'command': 'find'\n        })\n\n        def enterprise_failed_fetch(self, callback=None, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='404', reason='Not Found', errors={'description': 'Entity not found'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUEnterprise.fetch', enterprise_failed_fetch):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Failed to fetch the specified entity by ID: [HTTP 404(Not Found)] {'description': 'Entity not found'}\")\n\n    def test_excption_find_entities_property(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'match_filter': 'name == \"enterprise-id\"',\n            'command': 'find'\n        })\n\n        def enterprises_failed_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                                   callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            raise BambouHTTPError(MockNuageConnection(status_code='404', reason='Not Found', errors={'description': 'Entity not found'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUEnterprisesFetcher.get', enterprises_failed_get):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Unable to find matching entries')\n\n    def test_exception_find_entity_id(self):\n        set_module_args(args={\n            'id': 'enterprise-id',\n            'type': 'Enterprise',\n            'state': 'present'\n        })\n\n        def enterprise_failed_fetch(self, callback=None, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='404', reason='Not Found', errors={'description': 'Entity not found'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUEnterprise.fetch', enterprise_failed_fetch):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Failed to fetch the specified entity by ID: [HTTP 404(Not Found)] {'description': 'Entity not found'}\")\n\n    def test_exception_find_entity_property(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'match_filter': 'name == \"enterprise-id\"',\n            'state': 'absent'\n        })\n\n        def enterprises_failed_get_first(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                                         callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            raise BambouHTTPError(MockNuageConnection(status_code='404', reason='Not Found', errors={'description': 'Entity not found'}))\n\n        with self.assertRaises(AnsibleExitJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUEnterprisesFetcher.get_first', enterprises_failed_get_first):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertFalse(result['changed'])\n\n    def test_exception_get_csp_enterprise(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'command': 'get_csp_enterprise'\n        })\n\n        def enterprise_failed_fetch(self, callback=None, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='404', reason='Not Found', errors={'description': 'Entity not found'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUEnterprise.fetch', enterprise_failed_fetch):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Unable to fetch CSP enterprise: [HTTP 404(Not Found)] {'description': 'Entity not found'}\")\n\n    def test_exception_assign_member(self):\n        set_module_args(args={\n            'id': 'user-id',\n            'type': 'User',\n            'parent_id': 'group-id',\n            'parent_type': 'Group',\n            'state': 'present'\n        })\n\n        def users_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                      callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return []\n\n        def group_assign(self, objects, nurest_object_type, callback=None, commit=True, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='500', reason='Server exception', errors={'description': 'Unable to assign member'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get', users_get):\n                with patch('vspk.v5_0.NUGroup.assign', new=group_assign):\n                    nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Unable to assign entity as a member: [HTTP 500(Server exception)] {'description': 'Unable to assign member'}\")\n\n    def test_exception_unassign_member(self):\n        set_module_args(args={\n            'id': 'user-id',\n            'type': 'User',\n            'parent_id': 'group-id',\n            'parent_type': 'Group',\n            'state': 'absent'\n        })\n\n        def users_get(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                      callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return [vsdk.NUUser(id='user-id'), vsdk.NUUser(id='user-id-2')]\n\n        def group_assign(self, objects, nurest_object_type, callback=None, commit=True, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='500', reason='Server exception', errors={'description': 'Unable to remove member'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get', users_get):\n                with patch('vspk.v5_0.NUGroup.assign', new=group_assign):\n                    nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Unable to remove entity as a member: [HTTP 500(Server exception)] {'description': 'Unable to remove member'}\")\n\n    def test_exception_create_entity(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'test-enterprise-create'\n            }\n        })\n\n        def me_create_child(self, nurest_object, response_choice=None, callback=None, commit=True, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='500', reason='Server exception', errors={'description': 'Unable to create entity'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUMe.create_child', me_create_child):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Unable to create entity: [HTTP 500(Server exception)] {'description': 'Unable to create entity'}\")\n\n    def test_exception_save_entity(self):\n        set_module_args(args={\n            'id': 'enterprise-id',\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'new-enterprise-name'\n            }\n        })\n\n        def enterprise_save(self, response_choice=None, callback=None, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='500', reason='Server exception', errors={'description': 'Unable to save entity'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUEnterprise.save', enterprise_save):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Unable to update entity: [HTTP 500(Server exception)] {'description': 'Unable to save entity'}\")\n\n    def test_exception_delete_entity(self):\n        set_module_args(args={\n            'id': 'enterprise-id',\n            'type': 'Enterprise',\n            'state': 'absent'\n        })\n\n        def enterprise_delete(self, response_choice=1, callback=None, **kwargs):\n            raise BambouHTTPError(MockNuageConnection(status_code='500', reason='Server exception', errors={'description': 'Unable to delete entity'}))\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUEnterprise.delete', enterprise_delete):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Unable to delete entity: [HTTP 500(Server exception)] {'description': 'Unable to delete entity'}\")\n\n    def test_exception_wait_for_job(self):\n        set_module_args(args={\n            'id': 'job-id',\n            'type': 'Job',\n            'command': 'wait_for_job'\n        })\n\n        def job_fetch(self, callback=None, **kwargs):\n            global _LOOP_COUNTER\n            self.id = 'job-id'\n            self.command = 'EXPORT'\n            self.status = 'RUNNING'\n            if _LOOP_COUNTER > 1:\n                self.status = 'ERROR'\n            _LOOP_COUNTER += 1\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.NUJob.fetch', new=job_fetch):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"Job ended in an error\")\n\n    def test_fail_auth(self):\n        set_module_args(\n            args={\n                'type': 'Enterprise',\n                'command': 'find',\n                'auth': {\n                    'api_username': 'csproot',\n                    'api_enterprise': 'csp',\n                    'api_url': 'https://localhost:8443',\n                    'api_version': 'v5_0'\n                }\n            }\n        )\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Missing api_password or api_certificate and api_key parameter in auth')\n\n    def test_fail_version(self):\n        set_module_args(\n            args={\n                'type': 'Enterprise',\n                'command': 'find',\n                'auth': {\n                    'api_username': 'csproot',\n                    'api_password': 'csproot',\n                    'api_enterprise': 'csp',\n                    'api_url': 'https://localhost:8443',\n                    'api_version': 'v1_0'\n                }\n            }\n        )\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'vspk is required for this module, or the API version specified does not exist.')\n\n    def test_fail_type(self):\n        set_module_args(args={\n            'type': 'Unknown',\n            'command': 'find'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Unrecognised type specified')\n\n    def test_fail_parent_type(self):\n        set_module_args(args={\n            'type': 'User',\n            'parent_id': 'unkown-id',\n            'parent_type': 'Unknown',\n            'command': 'find'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Unrecognised parent type specified')\n\n    def test_fail_parent_child(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'parent_id': 'user-id',\n            'parent_type': 'User',\n            'command': 'find'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Specified parent is not a valid parent for the specified type')\n\n    def test_fail_no_parent(self):\n        set_module_args(args={\n            'type': 'Group',\n            'command': 'find'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'No parent specified and root object is not a parent for the type')\n\n    def test_fail_present_member(self):\n        set_module_args(args={\n            'type': 'User',\n            'match_filter': 'name == \"test-user\"',\n            'parent_id': 'group-id',\n            'parent_type': 'Group',\n            'state': 'present'\n        })\n\n        def users_get_first(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                            callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return None\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get_first', users_get_first):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Trying to assign an entity that does not exist', result)\n\n    def test_fail_change_password(self):\n        set_module_args(args={\n            'id': 'user-id',\n            'type': 'User',\n            'command': 'change_password',\n            'properties': {}\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'command is change_password but the following are missing: password property')\n\n    def test_fail_change_password_non_user(self):\n        set_module_args(args={\n            'id': 'group-id',\n            'type': 'Group',\n            'command': 'change_password',\n            'properties': {\n                'password': 'new-password'\n            }\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Entity does not have a password property')\n\n    def test_fail_command_find(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'command': 'find',\n            'properties': {\n                'id': 'unknown-enterprise-id',\n                'name': 'unkown-enterprise'\n            }\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Unable to find matching entries')\n\n    def test_fail_children_type(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'test-enterprise-create'\n            },\n            'children': [\n                {\n                    'properties': {\n                        'user_name': 'johndoe-new'\n                    }\n                }\n            ]\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Child type unspecified')\n\n    def test_fail_children_mandatory(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'test-enterprise-create'\n            },\n            'children': [\n                {\n                    'type': 'User'\n                }\n            ]\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Child ID or properties unspecified')\n\n    def test_fail_children_unknown(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'properties': {\n                'name': 'test-enterprise-create'\n            },\n            'children': [\n                {\n                    'id': 'unkown-id',\n                    'type': 'Unkown'\n                }\n            ]\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Unrecognised child type specified')\n\n    def test_fail_children_parent(self):\n        set_module_args(args={\n            'id': 'group-id',\n            'type': 'Group',\n            'state': 'present',\n            'children': [\n                {\n                    'type': 'User',\n                    'properties': {\n                        'name': 'test-user'\n                    }\n                }\n            ]\n        })\n\n        def users_get_first(self, filter=None, order_by=None, group_by=None, page=None, page_size=None, query_parameters=None, commit=True,\n                            callback=None, **kwargs):\n            group_by = [] if group_by is None else group_by\n\n            return None\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            with patch('vspk.v5_0.fetchers.NUUsersFetcher.get_first', users_get_first):\n                nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Trying to assign a child that does not exist')\n\n    def test_fail_children_fetcher(self):\n        set_module_args(args={\n            'id': 'group-id',\n            'type': 'Group',\n            'state': 'present',\n            'children': [\n                {\n                    'type': 'Enterprise',\n                    'properties': {\n                        'name': 'test-enterprise'\n                    }\n                }\n            ]\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Unable to find a fetcher for child, and no ID specified.')\n\n    def test_fail_has_changed(self):\n        set_module_args(args={\n            'id': 'user-id',\n            'type': 'User',\n            'state': 'present',\n            'properties': {\n                'user_name': 'changed-user',\n                'fake': 'invalid-property',\n                'password': 'hidden-property'\n            }\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'Property fake is not valid for this type of entity')\n\n    def test_input_auth_username(self):\n        set_module_args(\n            args={\n                'type': 'Enterprise',\n                'command': 'find',\n                'auth': {\n                    'api_password': 'csproot',\n                    'api_enterprise': 'csp',\n                    'api_url': 'https://localhost:8443',\n                    'api_version': 'v5_0'\n                }\n            }\n        )\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'missing required arguments: api_username')\n\n    def test_input_auth_enterprise(self):\n        set_module_args(\n            args={\n                'type': 'Enterprise',\n                'command': 'find',\n                'auth': {\n                    'api_username': 'csproot',\n                    'api_password': 'csproot',\n                    'api_url': 'https://localhost:8443',\n                    'api_version': 'v5_0'\n                }\n            }\n        )\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'missing required arguments: api_enterprise')\n\n    def test_input_auth_url(self):\n        set_module_args(\n            args={\n                'type': 'Enterprise',\n                'command': 'find',\n                'auth': {\n                    'api_username': 'csproot',\n                    'api_password': 'csproot',\n                    'api_enterprise': 'csp',\n                    'api_version': 'v5_0'\n                }\n            }\n        )\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'missing required arguments: api_url')\n\n    def test_input_auth_version(self):\n        set_module_args(\n            args={\n                'type': 'Enterprise',\n                'command': 'find',\n                'auth': {\n                    'api_username': 'csproot',\n                    'api_password': 'csproot',\n                    'api_enterprise': 'csp',\n                    'api_url': 'https://localhost:8443',\n                }\n            }\n        )\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], 'missing required arguments: api_version')\n\n    def test_input_exclusive(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n            'command': 'find'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"parameters are mutually exclusive: ['command', 'state']\")\n\n    def test_input_require_both_parent_id(self):\n        set_module_args(args={\n            'type': 'User',\n            'command': 'find',\n            'parent_type': 'Enterprise'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"parameters are required together: ['parent_id', 'parent_type']\")\n\n    def test_input_require_both_parent_type(self):\n        set_module_args(args={\n            'type': 'User',\n            'command': 'find',\n            'parent_id': 'enterprise-id'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"parameters are required together: ['parent_id', 'parent_type']\")\n\n    def test_input_require_on_off(self):\n        set_module_args(args={\n            'type': 'Enterprise'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"one of the following is required: command,state\")\n\n    def test_input_require_if_present(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'present',\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"state is present but the following are missing: id,properties,match_filter\")\n\n    def test_input_require_if_absent(self):\n        set_module_args(args={\n            'type': 'Enterprise',\n            'state': 'absent',\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"state is absent but the following are missing: id,properties,match_filter\")\n\n    def test_input_require_if_change_password_id(self):\n        set_module_args(args={\n            'type': 'User',\n            'command': 'change_password',\n            'properties': {\n                'password': 'dummy-password'\n            }\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"command is change_password but the following are missing: id\")\n\n    def test_input_require_if_change_password_properties(self):\n        set_module_args(args={\n            'type': 'User',\n            'command': 'change_password',\n            'id': 'user-id'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"command is change_password but the following are missing: properties\")\n\n    def test_input_require_if_wait_for_job_id(self):\n        set_module_args(args={\n            'type': 'Job',\n            'command': 'wait_for_job'\n        })\n\n        with self.assertRaises(AnsibleFailJson) as exc:\n            nuage_vspk.main()\n\n        result = exc.exception.args[0]\n\n        self.assertTrue(result['failed'])\n        self.assertEqual(result['msg'], \"command is wait_for_job but the following are missing: id\")\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_nuage_vspk.py", "id": "a2978d65914a89ea8423cfd046dfb702", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/nuage/test_nuage_vspk.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}