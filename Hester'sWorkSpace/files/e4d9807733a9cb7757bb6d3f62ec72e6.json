{"author": "HelloZeroNet", "code": "import os\nimport sys\nimport atexit\n\nfrom Plugin import PluginManager\nfrom Config import config\nfrom Translate import Translate\n\nallow_reload = False  \n\nif \"_\" not in locals():\n    _ = Translate(\"plugins/Trayicon/languages/\")\n\n\n@PluginManager.registerTo(\"Actions\")\nclass ActionsPlugin(object):\n\n    def main(self):\n        global notificationicon, winfolders\n        from lib import notificationicon, winfolders\n        import gevent.threadpool\n\n        self.main = sys.modules[\"main\"]\n\n        fs_encoding = sys.getfilesystemencoding()\n\n        icon = notificationicon.NotificationIcon(\n            os.path.join(os.path.dirname(os.path.abspath(__file__).decode(fs_encoding)), 'trayicon.ico'),\n            \"ZeroNet %s\" % config.version\n        )\n        self.icon = icon\n\n        if not config.debug:  \n            notificationicon.hideConsole()\n            self.console = False\n        else:\n            self.console = True\n\n        @atexit.register\n        def hideIcon():\n            icon.die()\n\n        ui_ip = config.ui_ip if config.ui_ip != \"*\" else \"127.0.0.1\"\n\n        icon.items = [\n            (self.titleIp, False),\n            (self.titleConnections, False),\n            (self.titleTransfer, False),\n            (self.titleConsole, self.toggleConsole),\n            (self.titleAutorun, self.toggleAutorun),\n            \"--\",\n            (_[\"ZeroNet Twitter\"], lambda: self.opensite(\"https://twitter.com/HelloZeroNet\")),\n            (_[\"ZeroNet Reddit\"], lambda: self.opensite(\"http://www.reddit.com/r/zeronet/\")),\n            (_[\"ZeroNet Github\"], lambda: self.opensite(\"https://github.com/HelloZeroNet/ZeroNet\")),\n            (_[\"Report bug/request feature\"], lambda: self.opensite(\"https://github.com/HelloZeroNet/ZeroNet/issues\")),\n            \"--\",\n            (_[\"!Open ZeroNet\"], lambda: self.opensite(\"http://%s:%s/%s\" % (ui_ip, config.ui_port, config.homepage))),\n            \"--\",\n            (_[\"Quit\"], self.quit),\n        ]\n\n        if not notificationicon.hasConsole():\n            del icon.items[3]\n\n        icon.clicked = lambda: self.opensite(\"http://%s:%s/%s\" % (ui_ip, config.ui_port, config.homepage))\n        self.quit_servers_event = gevent.threadpool.ThreadResult(\n            lambda res: gevent.spawn_later(0.1, self.quitServers)\n        )  \n        gevent.threadpool.start_new_thread(icon._run, ())  # Start in real thread (not gevent compatible)\n        super(ActionsPlugin, self).main()\n        icon._die = True\n\n    def quit(self):\n        self.icon.die()\n        self.quit_servers_event.set(True)\n\n    def quitServers(self):\n        self.main.ui_server.stop()\n        self.main.file_server.stop()\n\n    def opensite(self, url):\n        import webbrowser\n        webbrowser.open(url, new=0)\n\n    def titleIp(self):\n        title = \"!IP: %s \" % config.ip_external\n        if self.main.file_server.port_opened:\n            title += _[\"(active)\"]\n        else:\n            title += _[\"(passive)\"]\n        return title\n\n    def titleConnections(self):\n        title = _[\"Connections: %s\"] % len(self.main.file_server.connections)\n        return title\n\n    def titleTransfer(self):\n        title = _[\"Received: %.2f MB | Sent: %.2f MB\"] % (\n            float(self.main.file_server.bytes_recv) / 1024 / 1024,\n            float(self.main.file_server.bytes_sent) / 1024 / 1024\n        )\n        return title\n\n    def titleConsole(self):\n        translate = _[\"Show console window\"]\n        if self.console:\n            return \"+\" + translate\n        else:\n            return translate\n\n    def toggleConsole(self):\n        if self.console:\n            notificationicon.hideConsole()\n            self.console = False\n        else:\n            notificationicon.showConsole()\n            self.console = True\n\n    def getAutorunPath(self):\n        return \"%s\\\\zeronet.cmd\" % winfolders.get(winfolders.STARTUP)\n\n    def formatAutorun(self):\n        args = sys.argv[:]\n\n        if not getattr(sys, 'frozen', False):  \n            args.insert(0, sys.executable)\n            cwd = os.getcwd().decode(sys.getfilesystemencoding())\n        else:\n            cwd = os.path.dirname(sys.executable).decode(sys.getfilesystemencoding())\n\n        if sys.platform == 'win32':\n            args = ['\"%s\"' % arg for arg in args if arg]\n        cmd = \" \".join(args)\n\n        \n        cmd = cmd.replace(\"start.py\", \"zeronet.py\").replace('\"--open_browser\"', \"\").replace('\"default_browser\"', \"\").strip()\n        cmd += ' --open_browser \"\"'\n        cmd = cmd.decode(sys.getfilesystemencoding())\n\n        return u\"\"\"\n            @echo off\n            chcp 65001 > nul\n            set PYTHONIOENCODING=utf-8\n            cd /D \\\"%s\\\"\n            start \"\" %s\n        \"\"\" % (cwd, cmd)\n\n    def isAutorunEnabled(self):\n        path = self.getAutorunPath()\n        return os.path.isfile(path) and open(path).read().decode(\"utf8\") == self.formatAutorun()\n\n    def titleAutorun(self):\n        translate = _[\"Start ZeroNet when Windows starts\"]\n        if self.isAutorunEnabled():\n            return \"+\" + translate\n        else:\n            return translate\n\n    def toggleAutorun(self):\n        if self.isAutorunEnabled():\n            os.unlink(self.getAutorunPath())\n        else:\n            open(self.getAutorunPath(), \"w\").write(self.formatAutorun().encode(\"utf8\"))\n", "comments": "                 echo             chcp 65001   nul             set pythonioencoding utf 8             cd  d                  start                    no source reload supported plugin    hide console debug mode    fix gevent thread switch error    start real thread (not gevent compatible)    not frozen    dont open browser autorun ", "content": "import os\nimport sys\nimport atexit\n\nfrom Plugin import PluginManager\nfrom Config import config\nfrom Translate import Translate\n\nallow_reload = False  # No source reload supported in this plugin\n\nif \"_\" not in locals():\n    _ = Translate(\"plugins/Trayicon/languages/\")\n\n\n@PluginManager.registerTo(\"Actions\")\nclass ActionsPlugin(object):\n\n    def main(self):\n        global notificationicon, winfolders\n        from lib import notificationicon, winfolders\n        import gevent.threadpool\n\n        self.main = sys.modules[\"main\"]\n\n        fs_encoding = sys.getfilesystemencoding()\n\n        icon = notificationicon.NotificationIcon(\n            os.path.join(os.path.dirname(os.path.abspath(__file__).decode(fs_encoding)), 'trayicon.ico'),\n            \"ZeroNet %s\" % config.version\n        )\n        self.icon = icon\n\n        if not config.debug:  # Hide console if not in debug mode\n            notificationicon.hideConsole()\n            self.console = False\n        else:\n            self.console = True\n\n        @atexit.register\n        def hideIcon():\n            icon.die()\n\n        ui_ip = config.ui_ip if config.ui_ip != \"*\" else \"127.0.0.1\"\n\n        icon.items = [\n            (self.titleIp, False),\n            (self.titleConnections, False),\n            (self.titleTransfer, False),\n            (self.titleConsole, self.toggleConsole),\n            (self.titleAutorun, self.toggleAutorun),\n            \"--\",\n            (_[\"ZeroNet Twitter\"], lambda: self.opensite(\"https://twitter.com/HelloZeroNet\")),\n            (_[\"ZeroNet Reddit\"], lambda: self.opensite(\"http://www.reddit.com/r/zeronet/\")),\n            (_[\"ZeroNet Github\"], lambda: self.opensite(\"https://github.com/HelloZeroNet/ZeroNet\")),\n            (_[\"Report bug/request feature\"], lambda: self.opensite(\"https://github.com/HelloZeroNet/ZeroNet/issues\")),\n            \"--\",\n            (_[\"!Open ZeroNet\"], lambda: self.opensite(\"http://%s:%s/%s\" % (ui_ip, config.ui_port, config.homepage))),\n            \"--\",\n            (_[\"Quit\"], self.quit),\n        ]\n\n        if not notificationicon.hasConsole():\n            del icon.items[3]\n\n        icon.clicked = lambda: self.opensite(\"http://%s:%s/%s\" % (ui_ip, config.ui_port, config.homepage))\n        self.quit_servers_event = gevent.threadpool.ThreadResult(\n            lambda res: gevent.spawn_later(0.1, self.quitServers)\n        )  # Fix gevent thread switch error\n        gevent.threadpool.start_new_thread(icon._run, ())  # Start in real thread (not gevent compatible)\n        super(ActionsPlugin, self).main()\n        icon._die = True\n\n    def quit(self):\n        self.icon.die()\n        self.quit_servers_event.set(True)\n\n    def quitServers(self):\n        self.main.ui_server.stop()\n        self.main.file_server.stop()\n\n    def opensite(self, url):\n        import webbrowser\n        webbrowser.open(url, new=0)\n\n    def titleIp(self):\n        title = \"!IP: %s \" % config.ip_external\n        if self.main.file_server.port_opened:\n            title += _[\"(active)\"]\n        else:\n            title += _[\"(passive)\"]\n        return title\n\n    def titleConnections(self):\n        title = _[\"Connections: %s\"] % len(self.main.file_server.connections)\n        return title\n\n    def titleTransfer(self):\n        title = _[\"Received: %.2f MB | Sent: %.2f MB\"] % (\n            float(self.main.file_server.bytes_recv) / 1024 / 1024,\n            float(self.main.file_server.bytes_sent) / 1024 / 1024\n        )\n        return title\n\n    def titleConsole(self):\n        translate = _[\"Show console window\"]\n        if self.console:\n            return \"+\" + translate\n        else:\n            return translate\n\n    def toggleConsole(self):\n        if self.console:\n            notificationicon.hideConsole()\n            self.console = False\n        else:\n            notificationicon.showConsole()\n            self.console = True\n\n    def getAutorunPath(self):\n        return \"%s\\\\zeronet.cmd\" % winfolders.get(winfolders.STARTUP)\n\n    def formatAutorun(self):\n        args = sys.argv[:]\n\n        if not getattr(sys, 'frozen', False):  # Not frozen\n            args.insert(0, sys.executable)\n            cwd = os.getcwd().decode(sys.getfilesystemencoding())\n        else:\n            cwd = os.path.dirname(sys.executable).decode(sys.getfilesystemencoding())\n\n        if sys.platform == 'win32':\n            args = ['\"%s\"' % arg for arg in args if arg]\n        cmd = \" \".join(args)\n\n        # Dont open browser on autorun\n        cmd = cmd.replace(\"start.py\", \"zeronet.py\").replace('\"--open_browser\"', \"\").replace('\"default_browser\"', \"\").strip()\n        cmd += ' --open_browser \"\"'\n        cmd = cmd.decode(sys.getfilesystemencoding())\n\n        return u\"\"\"\n            @echo off\n            chcp 65001 > nul\n            set PYTHONIOENCODING=utf-8\n            cd /D \\\"%s\\\"\n            start \"\" %s\n        \"\"\" % (cwd, cmd)\n\n    def isAutorunEnabled(self):\n        path = self.getAutorunPath()\n        return os.path.isfile(path) and open(path).read().decode(\"utf8\") == self.formatAutorun()\n\n    def titleAutorun(self):\n        translate = _[\"Start ZeroNet when Windows starts\"]\n        if self.isAutorunEnabled():\n            return \"+\" + translate\n        else:\n            return translate\n\n    def toggleAutorun(self):\n        if self.isAutorunEnabled():\n            os.unlink(self.getAutorunPath())\n        else:\n            open(self.getAutorunPath(), \"w\").write(self.formatAutorun().encode(\"utf8\"))\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "TrayiconPlugin.py", "id": "e4d9807733a9cb7757bb6d3f62ec72e6", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/Trayicon/TrayiconPlugin.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}