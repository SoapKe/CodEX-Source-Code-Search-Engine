{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .theplatform import ThePlatformFeedIE\nfrom ..utils import int_or_none\n\n\nclass CorusIE(ThePlatformFeedIE):\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'http://www.hgtv.ca/shows/bryan-inc/videos/movie-night-popcorn-with-bryan-870923331648/',\n        'md5': '05dcbca777bf1e58c2acbb57168ad3a6',\n        'info_dict': {\n            'id': '870923331648',\n            'ext': 'mp4',\n            'title': 'Movie Night Popcorn with Bryan',\n            'description': 'Bryan whips up homemade popcorn, the old fashion way for Jojo and Lincoln.',\n            'uploader': 'SHWM-NEW',\n            'upload_date': '20170206',\n            'timestamp': 1486392197,\n        },\n    }, {\n        'url': 'http://www.foodnetwork.ca/shows/chopped/video/episode/chocolate-obsession/video.html?v=872683587753',\n        'only_matching': True,\n    }, {\n        'url': 'http://etcanada.com/video/873675331955/meet-the-survivor-game-changers-castaways-part-2/',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.history.ca/the-world-without-canada/video/full-episodes/natural-resources/video.html?v=955054659646\n        'only_matching': True,\n    }, {\n        'url': 'http://www.showcase.ca/eyewitness/video/eyewitness++106/video.html?v=955070531919&p=1&s=da\n        'only_matching': True,\n    }]\n\n    _TP_FEEDS = {\n        'globaltv': {\n            'feed_id': 'ChQqrem0lNUp',\n            'account_id': 2269680845,\n        },\n        'etcanada': {\n            'feed_id': 'ChQqrem0lNUp',\n            'account_id': 2269680845,\n        },\n        'hgtv': {\n            'feed_id': 'L0BMHXi2no43',\n            'account_id': 2414428465,\n        },\n        'foodnetwork': {\n            'feed_id': 'ukK8o58zbRmJ',\n            'account_id': 2414429569,\n        },\n        'slice': {\n            'feed_id': '5tUJLgV2YNJ5',\n            'account_id': 2414427935,\n        },\n        'history': {\n            'feed_id': 'tQFx_TyyEq4J',\n            'account_id': 2369613659,\n        },\n        'showcase': {\n            'feed_id': '9H6qyshBZU3E',\n            'account_id': 2414426607,\n        },\n    }\n\n    def _real_extract(self, url):\n        domain, video_id = re.match(self._VALID_URL, url).groups()\n        feed_info = self._TP_FEEDS[domain.split('.')[0]]\n        return self._extract_feed_info('dtjsEC', feed_info['feed_id'], 'byId=' + video_id, video_id, lambda e: {\n            'episode_number': int_or_none(e.get('pl1$episode')),\n            'season_number': int_or_none(e.get('pl1$season')),\n            'series': e.get('pl1$show'),\n        }, {\n            'HLS': {\n                'manifest': 'm3u',\n            },\n            'DesktopHLS Default': {\n                'manifest': 'm3u',\n            },\n            'MP4 MBR': {\n                'manifest': 'm3u',\n            },\n        }, feed_info['account_id'])\n", "comments": "(?x)\n                    https?://\n                        (?:www\\.)?\n                        (?P<domain>\n                            (?:globaltv|etcanada)\\.com|\n                            (?:hgtv|foodnetwork|slice|history|showcase)\\.ca\n                        )\n                        /(?:video/|(?:[^/]+/)+(?:videos/[a-z0-9-]+-|video\\.html\\?.*?\\bv=))\n                        (?P<id>\\d+)\n                    \n \n# coding: utf-8\n#video',\n#video',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .theplatform import ThePlatformFeedIE\nfrom ..utils import int_or_none\n\n\nclass CorusIE(ThePlatformFeedIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        (?P<domain>\n                            (?:globaltv|etcanada)\\.com|\n                            (?:hgtv|foodnetwork|slice|history|showcase)\\.ca\n                        )\n                        /(?:video/|(?:[^/]+/)+(?:videos/[a-z0-9-]+-|video\\.html\\?.*?\\bv=))\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.hgtv.ca/shows/bryan-inc/videos/movie-night-popcorn-with-bryan-870923331648/',\n        'md5': '05dcbca777bf1e58c2acbb57168ad3a6',\n        'info_dict': {\n            'id': '870923331648',\n            'ext': 'mp4',\n            'title': 'Movie Night Popcorn with Bryan',\n            'description': 'Bryan whips up homemade popcorn, the old fashion way for Jojo and Lincoln.',\n            'uploader': 'SHWM-NEW',\n            'upload_date': '20170206',\n            'timestamp': 1486392197,\n        },\n    }, {\n        'url': 'http://www.foodnetwork.ca/shows/chopped/video/episode/chocolate-obsession/video.html?v=872683587753',\n        'only_matching': True,\n    }, {\n        'url': 'http://etcanada.com/video/873675331955/meet-the-survivor-game-changers-castaways-part-2/',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.history.ca/the-world-without-canada/video/full-episodes/natural-resources/video.html?v=955054659646#video',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.showcase.ca/eyewitness/video/eyewitness++106/video.html?v=955070531919&p=1&s=da#video',\n        'only_matching': True,\n    }]\n\n    _TP_FEEDS = {\n        'globaltv': {\n            'feed_id': 'ChQqrem0lNUp',\n            'account_id': 2269680845,\n        },\n        'etcanada': {\n            'feed_id': 'ChQqrem0lNUp',\n            'account_id': 2269680845,\n        },\n        'hgtv': {\n            'feed_id': 'L0BMHXi2no43',\n            'account_id': 2414428465,\n        },\n        'foodnetwork': {\n            'feed_id': 'ukK8o58zbRmJ',\n            'account_id': 2414429569,\n        },\n        'slice': {\n            'feed_id': '5tUJLgV2YNJ5',\n            'account_id': 2414427935,\n        },\n        'history': {\n            'feed_id': 'tQFx_TyyEq4J',\n            'account_id': 2369613659,\n        },\n        'showcase': {\n            'feed_id': '9H6qyshBZU3E',\n            'account_id': 2414426607,\n        },\n    }\n\n    def _real_extract(self, url):\n        domain, video_id = re.match(self._VALID_URL, url).groups()\n        feed_info = self._TP_FEEDS[domain.split('.')[0]]\n        return self._extract_feed_info('dtjsEC', feed_info['feed_id'], 'byId=' + video_id, video_id, lambda e: {\n            'episode_number': int_or_none(e.get('pl1$episode')),\n            'season_number': int_or_none(e.get('pl1$season')),\n            'series': e.get('pl1$show'),\n        }, {\n            'HLS': {\n                'manifest': 'm3u',\n            },\n            'DesktopHLS Default': {\n                'manifest': 'm3u',\n            },\n            'MP4 MBR': {\n                'manifest': 'm3u',\n            },\n        }, feed_info['account_id'])\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "corus.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/corus.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}