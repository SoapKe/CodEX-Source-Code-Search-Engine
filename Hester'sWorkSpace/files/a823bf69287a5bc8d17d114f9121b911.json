{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom django.http import HttpRequest\n\nfrom sentry.testutils import TestCase\nfrom sentry.utils.session_store import RedisSessionStore\n\n\nclass RedisSessionStoreTestCase(TestCase):\n    def test_store_values(self):\n        request = HttpRequest()\n        request.session = {}\n\n        store = RedisSessionStore(request, 'test-store')\n        store.regenerate()\n\n        assert 'store:test-store' in request.session\n\n        store.some_value = 'test_value'\n        store2 = RedisSessionStore(request, 'test-store')\n\n        assert store2.is_valid()\n        assert store2.some_value == 'test_value'\n\n        with self.assertRaises(AttributeError):\n            store.missing_key\n\n        store.clear()\n\n    def test_store_complex_object(self):\n        request = HttpRequest()\n        request.session = {}\n\n        store = RedisSessionStore(request, 'test-store')\n        store.regenerate({\n            'some_value': {'deep_object': 'value'},\n        })\n\n        store2 = RedisSessionStore(request, 'test-store')\n\n        assert store2.some_value['deep_object'] == 'value'\n\n        store.clear()\n\n    def test_uninitialized_store(self):\n        request = HttpRequest()\n        request.session = {}\n\n        store = RedisSessionStore(request, 'test-store')\n\n        assert not store.is_valid()\n        assert store.get_state() is None\n        assert store.some_key is None\n\n        store.setting_but_no_state = 'anything'\n        assert store.setting_but_no_state is None\n\n        store.clear()\n", "comments": "", "content": "from __future__ import absolute_import\n\nfrom django.http import HttpRequest\n\nfrom sentry.testutils import TestCase\nfrom sentry.utils.session_store import RedisSessionStore\n\n\nclass RedisSessionStoreTestCase(TestCase):\n    def test_store_values(self):\n        request = HttpRequest()\n        request.session = {}\n\n        store = RedisSessionStore(request, 'test-store')\n        store.regenerate()\n\n        assert 'store:test-store' in request.session\n\n        store.some_value = 'test_value'\n        store2 = RedisSessionStore(request, 'test-store')\n\n        assert store2.is_valid()\n        assert store2.some_value == 'test_value'\n\n        with self.assertRaises(AttributeError):\n            store.missing_key\n\n        store.clear()\n\n    def test_store_complex_object(self):\n        request = HttpRequest()\n        request.session = {}\n\n        store = RedisSessionStore(request, 'test-store')\n        store.regenerate({\n            'some_value': {'deep_object': 'value'},\n        })\n\n        store2 = RedisSessionStore(request, 'test-store')\n\n        assert store2.some_value['deep_object'] == 'value'\n\n        store.clear()\n\n    def test_uninitialized_store(self):\n        request = HttpRequest()\n        request.session = {}\n\n        store = RedisSessionStore(request, 'test-store')\n\n        assert not store.is_valid()\n        assert store.get_state() is None\n        assert store.some_key is None\n\n        store.setting_but_no_state = 'anything'\n        assert store.setting_but_no_state is None\n\n        store.clear()\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_session_store.py", "id": "a823bf69287a5bc8d17d114f9121b911", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/test_session_store.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}