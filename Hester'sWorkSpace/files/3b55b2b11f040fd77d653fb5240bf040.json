{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n    try_get,\n    determine_ext,\n)\n\n\nclass TV4IE(InfoExtractor):\n    IE_DESC = 'tv4.se and tv4play.se'\n    _VALID_URL = r\n    _GEO_COUNTRIES = ['SE']\n    _TESTS = [\n        {\n            'url': 'http://www.tv4.se/kalla-fakta/klipp/kalla-fakta-5-english-subtitles-2491650',\n            'md5': 'cb837212f342d77cec06e6dad190e96d',\n            'info_dict': {\n                'id': '2491650',\n                'ext': 'mp4',\n                'title': 'Kalla Fakta 5 (english subtitles)',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'timestamp': int,\n                'upload_date': '20131125',\n            },\n        },\n        {\n            'url': 'http://www.tv4play.se/iframe/video/3054113',\n            'md5': 'cb837212f342d77cec06e6dad190e96d',\n            'info_dict': {\n                'id': '3054113',\n                'ext': 'mp4',\n                'title': 'S\u00e5 h\u00e4r jobbar ficktjuvarna - se avsl\u00f6jande bilder',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'description': 'Unika bilder avsl\u00f6jar hur turisternas fickor vittjas mitt p\u00e5 Stockholms central. Tv\u00e5 experter p\u00e5 ficktjuvarna avsl\u00f6jar knepen du ska se upp f\u00f6r.',\n                'timestamp': int,\n                'upload_date': '20150130',\n            },\n        },\n        {\n            'url': 'http://www.tv4play.se/sport/3060959',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.tv4play.se/film/2378136',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.tv4play.se/barn/looney-tunes?video_id=3062412',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.tv4play.se/program/farang/3922081',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        info = self._download_json(\n            'http://www.tv4play.se/player/assets/%s.json' % video_id,\n            video_id, 'Downloading video info JSON')\n\n        title = info['title']\n\n        subtitles = {}\n        formats = []\n        \n        for kind in ('hls3', ''):\n            data = self._download_json(\n                'https://prima.tv4play.se/api/web/asset/%s/play.json' % video_id,\n                video_id, 'Downloading sources JSON', query={\n                    'protocol': kind,\n                    'videoFormat': 'MP4+WEBVTT',\n                })\n            items = try_get(data, lambda x: x['playback']['items']['item'])\n            if not items:\n                continue\n            if isinstance(items, dict):\n                items = [items]\n            for item in items:\n                manifest_url = item.get('url')\n                if not isinstance(manifest_url, compat_str):\n                    continue\n                ext = determine_ext(manifest_url)\n                if ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        manifest_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                        m3u8_id=kind, fatal=False))\n                elif ext == 'f4m':\n                    formats.extend(self._extract_akamai_formats(\n                        manifest_url, video_id, {\n                            'hls': 'tv4play-i.akamaihd.net',\n                        }))\n                elif ext == 'webvtt':\n                    subtitles = self._merge_subtitles(\n                        subtitles, {\n                            'sv': [{\n                                'url': manifest_url,\n                                'ext': 'vtt',\n                            }]})\n\n        if not formats and info.get('is_geo_restricted'):\n            self.raise_geo_restricted(countries=self._GEO_COUNTRIES)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'subtitles': subtitles,\n            'description': info.get('description'),\n            'timestamp': parse_iso8601(info.get('broadcast_date_time')),\n            'duration': int_or_none(info.get('duration')),\n            'thumbnail': info.get('image'),\n            'is_live': info.get('is_live') is True,\n        }\n", "comments": "(?x)https?://(?:www\\.)?\n        (?:\n            tv4\\.se/(?:[^/]+)/klipp/(?:.*)-|\n            tv4play\\.se/\n            (?:\n                (?:program|barn)/(?:[^/]+/|(?:[^\\?]+)\\?video_id=)|\n                iframe/video/|\n                film/|\n                sport/|\n            )\n        )(?P<id>[0-9]+)\n)\n# coding: utf-8\n# http formats are linked with unresolvable host\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n    try_get,\n    determine_ext,\n)\n\n\nclass TV4IE(InfoExtractor):\n    IE_DESC = 'tv4.se and tv4play.se'\n    _VALID_URL = r'''(?x)https?://(?:www\\.)?\n        (?:\n            tv4\\.se/(?:[^/]+)/klipp/(?:.*)-|\n            tv4play\\.se/\n            (?:\n                (?:program|barn)/(?:[^/]+/|(?:[^\\?]+)\\?video_id=)|\n                iframe/video/|\n                film/|\n                sport/|\n            )\n        )(?P<id>[0-9]+)'''\n    _GEO_COUNTRIES = ['SE']\n    _TESTS = [\n        {\n            'url': 'http://www.tv4.se/kalla-fakta/klipp/kalla-fakta-5-english-subtitles-2491650',\n            'md5': 'cb837212f342d77cec06e6dad190e96d',\n            'info_dict': {\n                'id': '2491650',\n                'ext': 'mp4',\n                'title': 'Kalla Fakta 5 (english subtitles)',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'timestamp': int,\n                'upload_date': '20131125',\n            },\n        },\n        {\n            'url': 'http://www.tv4play.se/iframe/video/3054113',\n            'md5': 'cb837212f342d77cec06e6dad190e96d',\n            'info_dict': {\n                'id': '3054113',\n                'ext': 'mp4',\n                'title': 'S\u00e5 h\u00e4r jobbar ficktjuvarna - se avsl\u00f6jande bilder',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'description': 'Unika bilder avsl\u00f6jar hur turisternas fickor vittjas mitt p\u00e5 Stockholms central. Tv\u00e5 experter p\u00e5 ficktjuvarna avsl\u00f6jar knepen du ska se upp f\u00f6r.',\n                'timestamp': int,\n                'upload_date': '20150130',\n            },\n        },\n        {\n            'url': 'http://www.tv4play.se/sport/3060959',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.tv4play.se/film/2378136',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.tv4play.se/barn/looney-tunes?video_id=3062412',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.tv4play.se/program/farang/3922081',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        info = self._download_json(\n            'http://www.tv4play.se/player/assets/%s.json' % video_id,\n            video_id, 'Downloading video info JSON')\n\n        title = info['title']\n\n        subtitles = {}\n        formats = []\n        # http formats are linked with unresolvable host\n        for kind in ('hls3', ''):\n            data = self._download_json(\n                'https://prima.tv4play.se/api/web/asset/%s/play.json' % video_id,\n                video_id, 'Downloading sources JSON', query={\n                    'protocol': kind,\n                    'videoFormat': 'MP4+WEBVTT',\n                })\n            items = try_get(data, lambda x: x['playback']['items']['item'])\n            if not items:\n                continue\n            if isinstance(items, dict):\n                items = [items]\n            for item in items:\n                manifest_url = item.get('url')\n                if not isinstance(manifest_url, compat_str):\n                    continue\n                ext = determine_ext(manifest_url)\n                if ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        manifest_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                        m3u8_id=kind, fatal=False))\n                elif ext == 'f4m':\n                    formats.extend(self._extract_akamai_formats(\n                        manifest_url, video_id, {\n                            'hls': 'tv4play-i.akamaihd.net',\n                        }))\n                elif ext == 'webvtt':\n                    subtitles = self._merge_subtitles(\n                        subtitles, {\n                            'sv': [{\n                                'url': manifest_url,\n                                'ext': 'vtt',\n                            }]})\n\n        if not formats and info.get('is_geo_restricted'):\n            self.raise_geo_restricted(countries=self._GEO_COUNTRIES)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'subtitles': subtitles,\n            'description': info.get('description'),\n            'timestamp': parse_iso8601(info.get('broadcast_date_time')),\n            'duration': int_or_none(info.get('duration')),\n            'thumbnail': info.get('image'),\n            'is_live': info.get('is_live') is True,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tv4.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tv4.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}