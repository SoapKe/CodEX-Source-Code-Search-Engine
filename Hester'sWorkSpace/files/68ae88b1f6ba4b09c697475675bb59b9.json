{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2017, Simon Dodsley (simon@purestorage.com)\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: purefa_pgsnap\nversion_added: '2.6'\nshort_description: Manage protection group snapshots on Pure Storage FlashArrays\ndescription:\n- Create or delete protection group snapshots on Pure Storage FlashArray.\nauthor:\n- Simon Dodsley (@sdodsley)\noptions:\n  name:\n    description:\n    - The name of the source protection group.\n    required: true\n  suffix:\n    description:\n    - Suffix of snapshot name.\n  state:\n    description:\n    - Define whether the protection group snapshot should exist or not.\n    choices: [ absent, present ]\n    default: present\n  eradicate:\n    description:\n    - Define whether to eradicate the snapshot on delete or leave in trash.\n    type: bool\n    default: 'no'\nextends_documentation_fragment:\n- purestorage.fa\n'''\n\nEXAMPLES = r'''\n- name: Create protection group snapshot foo.ansible\n  purefa_pgsnap:\n    name: foo\n    suffix: ansible\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n    state: present\n\n- name: Delete and eradicate protection group snapshot named foo.snap\n  purefa_pgsnap:\n    name: foo\n    suffix: snap\n    eradicate: true\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n    state: absent\n'''\n\nRETURN = r'''\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.pure import get_system, purefa_argument_spec\n\nfrom datetime import datetime\n\ntry:\n    from purestorage import purestorage\n    HAS_PURESTORAGE = True\nexcept ImportError:\n    HAS_PURESTORAGE = False\n\n\ndef get_pgroup(module, array):\n    \"\"\"Return Protection Group or None\"\"\"\n    try:\n        return array.get_pgroup(module.params['name'])\n    except:\n        return None\n\n\ndef get_pgsnapshot(module, array):\n    \"\"\"Return Snapshot or None\"\"\"\n    try:\n        snapname = module.params['name'] + \".\" + module.params['suffix']\n        for s in array.get_pgroup(module.params['name'], snap='true'):\n            if s['name'] == snapname:\n                return snapname\n    except:\n        return None\n\n\ndef create_pgsnapshot(module, array):\n    \"\"\"Create Protection Group Snapshot\"\"\"\n    if not module.check_mode:\n        try:\n            array.create_pgroup_snapshot(source=module.params['name'],\n                                         suffix=module.params['suffix'],\n                                         snap=True,\n                                         apply_retention=True)\n            changed = False\n        except:\n            changed = False\n    module.exit_json(changed=changed)\n\n\ndef update_pgsnapshot(module, array):\n    \"\"\"Update Protection Group Snapshot\"\"\"\n    changed = False\n    module.exit_json(changed=changed)\n\n\ndef delete_pgsnapshot(module, array):\n    \"\"\" Delete Protection Group Snapshot\"\"\"\n    if not module.check_mode:\n        snapname = module.params['name'] + \".\" + module.params['suffix']\n        try:\n            array.destroy_pgroup(snapname)\n            chaned = True\n            if module.params['eradicate']:\n                try:\n                    array.eradicate_pgroup(snapname)\n                    changed = True\n                except:\n                    changed = False\n        except:\n            changed = False\n    module.exit_json(changed=changed)\n\n\ndef main():\n    argument_spec = purefa_argument_spec()\n    argument_spec.update(dict(\n        name=dict(type='str', required=True),\n        suffix=dict(type='str'),\n        eradicate=dict(type='bool', default=False),\n        state=dict(type='str', default='present', choices=['absent', 'present']),\n    ))\n\n    module = AnsibleModule(argument_spec,\n                           supports_check_mode=True)\n\n    if not HAS_PURESTORAGE:\n        module.fail_json(msg='purestorage sdk is required for this module in volume')\n\n    if module.params['suffix'] is None:\n        suffix = \"snap-\" + str((datetime.utcnow() - datetime(1970, 1, 1, 0, 0, 0, 0)).total_seconds())\n        module.params['suffix'] = suffix.replace(\".\", \"\")\n\n    state = module.params['state']\n    array = get_system(module)\n    pgroup = get_pgroup(module, array)\n    pgsnap = get_pgsnapshot(module, array)\n\n    if state == 'present' and pgroup and not pgsnap:\n        create_pgsnapshot(module, array)\n    elif state == 'present' and pgroup and pgsnap:\n        update_pgsnapshot(module, array)\n    elif state == 'present' and not pgroup:\n        update_pgsnapshot(module, array)\n    elif state == 'absent' and pgsnap:\n        delete_pgsnapshot(module, array)\n    elif state == 'absent' and not pgsnap:\n        module.exit_json(changed=False)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "   return protection group none        try          return array get pgroup(module params  name  )     except          return none   def get pgsnapshot(module  array)         return snapshot none        try          snapname   module params  name           module params  suffix           array get pgroup(module params  name    snap  true )               name      snapname                  return snapname     except          return none   def create pgsnapshot(module  array)         create protection group snapshot        module check mode          try              array create pgroup snapshot(source module params  name                                             suffix module params  suffix                                             snap true                                           apply retention true)             changed   false         except              changed   false     module exit json(changed changed)   def update pgsnapshot(module  array)         update protection group snapshot        changed   false     module exit json(changed changed)   def delete pgsnapshot(module  array)          delete protection group snapshot             module  purefa pgsnap version added   2 6  short description  manage protection group snapshots pure storage flasharrays description    create delete protection group snapshots pure storage flasharray  author    simon dodsley ( sdodsley) options    name      description        the name source protection group      required  true   suffix      description        suffix snapshot name    state      description        define whether protection group snapshot exist      choices    absent  present       default  present   eradicate      description        define whether eradicate snapshot delete leave trash      type  bool     default    extends documentation fragment    purestorage fa      examples   r      name  create protection group snapshot foo ansible   purefa pgsnap      name  foo     suffix  ansible     fa url  10 10 10 2     api token  e31060a7 21fc e277 6240 25983c6c4592     state  present    name  delete eradicate protection group snapshot named foo snap   purefa pgsnap      name  foo     suffix  snap     eradicate  true     fa url  10 10 10 2     api token  e31060a7 21fc e277 6240 25983c6c4592     state  absent      return   r            usr bin python        coding  utf 8        (c) 2017  simon dodsley (simon purestorage com)    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2017, Simon Dodsley (simon@purestorage.com)\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: purefa_pgsnap\nversion_added: '2.6'\nshort_description: Manage protection group snapshots on Pure Storage FlashArrays\ndescription:\n- Create or delete protection group snapshots on Pure Storage FlashArray.\nauthor:\n- Simon Dodsley (@sdodsley)\noptions:\n  name:\n    description:\n    - The name of the source protection group.\n    required: true\n  suffix:\n    description:\n    - Suffix of snapshot name.\n  state:\n    description:\n    - Define whether the protection group snapshot should exist or not.\n    choices: [ absent, present ]\n    default: present\n  eradicate:\n    description:\n    - Define whether to eradicate the snapshot on delete or leave in trash.\n    type: bool\n    default: 'no'\nextends_documentation_fragment:\n- purestorage.fa\n'''\n\nEXAMPLES = r'''\n- name: Create protection group snapshot foo.ansible\n  purefa_pgsnap:\n    name: foo\n    suffix: ansible\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n    state: present\n\n- name: Delete and eradicate protection group snapshot named foo.snap\n  purefa_pgsnap:\n    name: foo\n    suffix: snap\n    eradicate: true\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n    state: absent\n'''\n\nRETURN = r'''\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.pure import get_system, purefa_argument_spec\n\nfrom datetime import datetime\n\ntry:\n    from purestorage import purestorage\n    HAS_PURESTORAGE = True\nexcept ImportError:\n    HAS_PURESTORAGE = False\n\n\ndef get_pgroup(module, array):\n    \"\"\"Return Protection Group or None\"\"\"\n    try:\n        return array.get_pgroup(module.params['name'])\n    except:\n        return None\n\n\ndef get_pgsnapshot(module, array):\n    \"\"\"Return Snapshot or None\"\"\"\n    try:\n        snapname = module.params['name'] + \".\" + module.params['suffix']\n        for s in array.get_pgroup(module.params['name'], snap='true'):\n            if s['name'] == snapname:\n                return snapname\n    except:\n        return None\n\n\ndef create_pgsnapshot(module, array):\n    \"\"\"Create Protection Group Snapshot\"\"\"\n    if not module.check_mode:\n        try:\n            array.create_pgroup_snapshot(source=module.params['name'],\n                                         suffix=module.params['suffix'],\n                                         snap=True,\n                                         apply_retention=True)\n            changed = False\n        except:\n            changed = False\n    module.exit_json(changed=changed)\n\n\ndef update_pgsnapshot(module, array):\n    \"\"\"Update Protection Group Snapshot\"\"\"\n    changed = False\n    module.exit_json(changed=changed)\n\n\ndef delete_pgsnapshot(module, array):\n    \"\"\" Delete Protection Group Snapshot\"\"\"\n    if not module.check_mode:\n        snapname = module.params['name'] + \".\" + module.params['suffix']\n        try:\n            array.destroy_pgroup(snapname)\n            chaned = True\n            if module.params['eradicate']:\n                try:\n                    array.eradicate_pgroup(snapname)\n                    changed = True\n                except:\n                    changed = False\n        except:\n            changed = False\n    module.exit_json(changed=changed)\n\n\ndef main():\n    argument_spec = purefa_argument_spec()\n    argument_spec.update(dict(\n        name=dict(type='str', required=True),\n        suffix=dict(type='str'),\n        eradicate=dict(type='bool', default=False),\n        state=dict(type='str', default='present', choices=['absent', 'present']),\n    ))\n\n    module = AnsibleModule(argument_spec,\n                           supports_check_mode=True)\n\n    if not HAS_PURESTORAGE:\n        module.fail_json(msg='purestorage sdk is required for this module in volume')\n\n    if module.params['suffix'] is None:\n        suffix = \"snap-\" + str((datetime.utcnow() - datetime(1970, 1, 1, 0, 0, 0, 0)).total_seconds())\n        module.params['suffix'] = suffix.replace(\".\", \"\")\n\n    state = module.params['state']\n    array = get_system(module)\n    pgroup = get_pgroup(module, array)\n    pgsnap = get_pgsnapshot(module, array)\n\n    if state == 'present' and pgroup and not pgsnap:\n        create_pgsnapshot(module, array)\n    elif state == 'present' and pgroup and pgsnap:\n        update_pgsnapshot(module, array)\n    elif state == 'present' and not pgroup:\n        update_pgsnapshot(module, array)\n    elif state == 'absent' and pgsnap:\n        delete_pgsnapshot(module, array)\n    elif state == 'absent' and not pgsnap:\n        module.exit_json(changed=False)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "purefa_pgsnap.py", "id": "68ae88b1f6ba4b09c697475675bb59b9", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/storage/purestorage/purefa_pgsnap.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}