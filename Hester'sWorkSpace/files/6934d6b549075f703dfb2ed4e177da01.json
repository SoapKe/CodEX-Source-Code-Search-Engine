{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport os\n\nfrom ..utils import (\n    PostProcessingError,\n    cli_configuration_args,\n    encodeFilename,\n)\n\n\nclass PostProcessor(object):\n    \n        return [], information  \n\n    def try_utime(self, path, atime, mtime, errnote='Cannot update utime of file'):\n        try:\n            os.utime(encodeFilename(path), (atime, mtime))\n        except Exception:\n            self._downloader.report_warning(errnote)\n\n    def _configuration_args(self, default=[]):\n        return cli_configuration_args(self._downloader.params, 'postprocessor_args', default)\n\n\nclass AudioConversionError(PostProcessingError):\n    pass\n", "comments": "Post Processor class.\n\n    PostProcessor objects can be added to downloaders with their\n    add_post_processor() method. When the downloader has finished a\n    successful download, it will take its internal chain of PostProcessors\n    and start calling the run() method on each one of them, first with\n    an initial argument and then with the returned value of the previous\n    PostProcessor.\n\n    The chain will be stopped if one of them ever returns None or the end\n    of the chain is reached.\n\n    PostProcessor objects follow a \"mutual registration\" process similar\n    to InfoExtractor objects.\n\n    Optionally PostProcessor can use a list of additional command-line arguments\n    with self._configuration_args.\n    \"\"\"\n\n    _downloader = None\n\n    def __init__(self, downloader=None):\n        self._downloader = downloader\n\n    def set_downloader(self, downloader):\n        \"\"\"Sets the downloader for this PP.\"\"\"\n        self._downloader = downloader\n\n    def run(self, information):\n        \"\"\"Run the PostProcessor.\n\n        The \"information\" argument is a dictionary like the ones\n        composed by InfoExtractors. The only difference is that this\n        one has an extra field called \"filepath\" that points to the\n        downloaded file.\n\n        This method returns a tuple, the first element is a list of the files\n        that can be deleted, and the second of which is the updated\n        information.\n\n        In addition, this method may raise a PostProcessingError\n        exception if post processing fails.\n        \n \n# by default, keep file and do nothing\n", "content": "from __future__ import unicode_literals\n\nimport os\n\nfrom ..utils import (\n    PostProcessingError,\n    cli_configuration_args,\n    encodeFilename,\n)\n\n\nclass PostProcessor(object):\n    \"\"\"Post Processor class.\n\n    PostProcessor objects can be added to downloaders with their\n    add_post_processor() method. When the downloader has finished a\n    successful download, it will take its internal chain of PostProcessors\n    and start calling the run() method on each one of them, first with\n    an initial argument and then with the returned value of the previous\n    PostProcessor.\n\n    The chain will be stopped if one of them ever returns None or the end\n    of the chain is reached.\n\n    PostProcessor objects follow a \"mutual registration\" process similar\n    to InfoExtractor objects.\n\n    Optionally PostProcessor can use a list of additional command-line arguments\n    with self._configuration_args.\n    \"\"\"\n\n    _downloader = None\n\n    def __init__(self, downloader=None):\n        self._downloader = downloader\n\n    def set_downloader(self, downloader):\n        \"\"\"Sets the downloader for this PP.\"\"\"\n        self._downloader = downloader\n\n    def run(self, information):\n        \"\"\"Run the PostProcessor.\n\n        The \"information\" argument is a dictionary like the ones\n        composed by InfoExtractors. The only difference is that this\n        one has an extra field called \"filepath\" that points to the\n        downloaded file.\n\n        This method returns a tuple, the first element is a list of the files\n        that can be deleted, and the second of which is the updated\n        information.\n\n        In addition, this method may raise a PostProcessingError\n        exception if post processing fails.\n        \"\"\"\n        return [], information  # by default, keep file and do nothing\n\n    def try_utime(self, path, atime, mtime, errnote='Cannot update utime of file'):\n        try:\n            os.utime(encodeFilename(path), (atime, mtime))\n        except Exception:\n            self._downloader.report_warning(errnote)\n\n    def _configuration_args(self, default=[]):\n        return cli_configuration_args(self._downloader.params, 'postprocessor_args', default)\n\n\nclass AudioConversionError(PostProcessingError):\n    pass\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "common.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/postprocessor/common.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}