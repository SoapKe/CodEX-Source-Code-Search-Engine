{"author": "jakubroztocil", "code": "from mock import mock\n\nfrom httpie.input import SEP_CREDENTIALS\nfrom httpie.plugins import AuthPlugin, plugin_manager\nfrom utils import http, HTTP_OK\n\n\n\nUSERNAME = 'user'\nPASSWORD = 'password'\n\n\nBASIC_AUTH_HEADER_VALUE = 'Basic dXNlcjpwYXNzd29yZA=='\nBASIC_AUTH_URL = '/basic-auth/{0}/{1}'.format(USERNAME, PASSWORD)\nAUTH_OK = {'authenticated': True, 'user': USERNAME}\n\n\ndef basic_auth(header=BASIC_AUTH_HEADER_VALUE):\n\n    def inner(r):\n        r.headers['Authorization'] = header\n        return r\n\n    return inner\n\n\ndef test_auth_plugin_parse_auth_false(httpbin):\n\n    class Plugin(AuthPlugin):\n        auth_type = 'test-parse-false'\n        auth_parse = False\n\n        def get_auth(self, username=None, password=None):\n            assert username is None\n            assert password is None\n            assert self.raw_auth == BASIC_AUTH_HEADER_VALUE\n            return basic_auth(self.raw_auth)\n\n    plugin_manager.register(Plugin)\n    try:\n        r = http(\n            httpbin + BASIC_AUTH_URL,\n            '--auth-type',\n            Plugin.auth_type,\n            '--auth',\n            BASIC_AUTH_HEADER_VALUE,\n        )\n        assert HTTP_OK in r\n        assert r.json == AUTH_OK\n    finally:\n        plugin_manager.unregister(Plugin)\n\n\ndef test_auth_plugin_require_auth_false(httpbin):\n\n    class Plugin(AuthPlugin):\n        auth_type = 'test-require-false'\n        auth_require = False\n\n        def get_auth(self, username=None, password=None):\n            assert self.raw_auth is None\n            assert username is None\n            assert password is None\n            return basic_auth()\n\n    plugin_manager.register(Plugin)\n    try:\n        r = http(\n            httpbin + BASIC_AUTH_URL,\n            '--auth-type',\n            Plugin.auth_type,\n        )\n        assert HTTP_OK in r\n        assert r.json == AUTH_OK\n    finally:\n        plugin_manager.unregister(Plugin)\n\n\ndef test_auth_plugin_require_auth_false_and_auth_provided(httpbin):\n\n    class Plugin(AuthPlugin):\n        auth_type = 'test-require-false-yet-provided'\n        auth_require = False\n\n        def get_auth(self, username=None, password=None):\n            assert self.raw_auth == USERNAME + SEP_CREDENTIALS + PASSWORD\n            assert username == USERNAME\n            assert password == PASSWORD\n            return basic_auth()\n\n    plugin_manager.register(Plugin)\n    try:\n        r = http(\n            httpbin + BASIC_AUTH_URL,\n            '--auth-type',\n            Plugin.auth_type,\n            '--auth',\n            USERNAME + SEP_CREDENTIALS + PASSWORD,\n        )\n        assert HTTP_OK in r\n        assert r.json == AUTH_OK\n    finally:\n        plugin_manager.unregister(Plugin)\n\n\n@mock.patch('httpie.input.AuthCredentials._getpass',\n            new=lambda self, prompt: 'UNEXPECTED_PROMPT_RESPONSE')\ndef test_auth_plugin_prompt_password_false(httpbin):\n\n    class Plugin(AuthPlugin):\n        auth_type = 'test-prompt-false'\n        prompt_password = False\n\n        def get_auth(self, username=None, password=None):\n            assert self.raw_auth == USERNAME\n            assert username == USERNAME\n            assert password is None\n            return basic_auth()\n\n    plugin_manager.register(Plugin)\n\n    try:\n        r = http(\n            httpbin + BASIC_AUTH_URL,\n            '--auth-type',\n            Plugin.auth_type,\n            '--auth',\n            USERNAME,\n        )\n        assert HTTP_OK in r\n        assert r.json == AUTH_OK\n    finally:\n        plugin_manager.unregister(Plugin)\n", "comments": "# TODO: run all these tests in session mode as well\n# Basic auth encoded `USERNAME` and `PASSWORD`\n# noinspection SpellCheckingInspection\n", "content": "from mock import mock\n\nfrom httpie.input import SEP_CREDENTIALS\nfrom httpie.plugins import AuthPlugin, plugin_manager\nfrom utils import http, HTTP_OK\n\n# TODO: run all these tests in session mode as well\n\nUSERNAME = 'user'\nPASSWORD = 'password'\n# Basic auth encoded `USERNAME` and `PASSWORD`\n# noinspection SpellCheckingInspection\nBASIC_AUTH_HEADER_VALUE = 'Basic dXNlcjpwYXNzd29yZA=='\nBASIC_AUTH_URL = '/basic-auth/{0}/{1}'.format(USERNAME, PASSWORD)\nAUTH_OK = {'authenticated': True, 'user': USERNAME}\n\n\ndef basic_auth(header=BASIC_AUTH_HEADER_VALUE):\n\n    def inner(r):\n        r.headers['Authorization'] = header\n        return r\n\n    return inner\n\n\ndef test_auth_plugin_parse_auth_false(httpbin):\n\n    class Plugin(AuthPlugin):\n        auth_type = 'test-parse-false'\n        auth_parse = False\n\n        def get_auth(self, username=None, password=None):\n            assert username is None\n            assert password is None\n            assert self.raw_auth == BASIC_AUTH_HEADER_VALUE\n            return basic_auth(self.raw_auth)\n\n    plugin_manager.register(Plugin)\n    try:\n        r = http(\n            httpbin + BASIC_AUTH_URL,\n            '--auth-type',\n            Plugin.auth_type,\n            '--auth',\n            BASIC_AUTH_HEADER_VALUE,\n        )\n        assert HTTP_OK in r\n        assert r.json == AUTH_OK\n    finally:\n        plugin_manager.unregister(Plugin)\n\n\ndef test_auth_plugin_require_auth_false(httpbin):\n\n    class Plugin(AuthPlugin):\n        auth_type = 'test-require-false'\n        auth_require = False\n\n        def get_auth(self, username=None, password=None):\n            assert self.raw_auth is None\n            assert username is None\n            assert password is None\n            return basic_auth()\n\n    plugin_manager.register(Plugin)\n    try:\n        r = http(\n            httpbin + BASIC_AUTH_URL,\n            '--auth-type',\n            Plugin.auth_type,\n        )\n        assert HTTP_OK in r\n        assert r.json == AUTH_OK\n    finally:\n        plugin_manager.unregister(Plugin)\n\n\ndef test_auth_plugin_require_auth_false_and_auth_provided(httpbin):\n\n    class Plugin(AuthPlugin):\n        auth_type = 'test-require-false-yet-provided'\n        auth_require = False\n\n        def get_auth(self, username=None, password=None):\n            assert self.raw_auth == USERNAME + SEP_CREDENTIALS + PASSWORD\n            assert username == USERNAME\n            assert password == PASSWORD\n            return basic_auth()\n\n    plugin_manager.register(Plugin)\n    try:\n        r = http(\n            httpbin + BASIC_AUTH_URL,\n            '--auth-type',\n            Plugin.auth_type,\n            '--auth',\n            USERNAME + SEP_CREDENTIALS + PASSWORD,\n        )\n        assert HTTP_OK in r\n        assert r.json == AUTH_OK\n    finally:\n        plugin_manager.unregister(Plugin)\n\n\n@mock.patch('httpie.input.AuthCredentials._getpass',\n            new=lambda self, prompt: 'UNEXPECTED_PROMPT_RESPONSE')\ndef test_auth_plugin_prompt_password_false(httpbin):\n\n    class Plugin(AuthPlugin):\n        auth_type = 'test-prompt-false'\n        prompt_password = False\n\n        def get_auth(self, username=None, password=None):\n            assert self.raw_auth == USERNAME\n            assert username == USERNAME\n            assert password is None\n            return basic_auth()\n\n    plugin_manager.register(Plugin)\n\n    try:\n        r = http(\n            httpbin + BASIC_AUTH_URL,\n            '--auth-type',\n            Plugin.auth_type,\n            '--auth',\n            USERNAME,\n        )\n        assert HTTP_OK in r\n        assert r.json == AUTH_OK\n    finally:\n        plugin_manager.unregister(Plugin)\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "test_auth_plugins.py", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil_httpie/jakubroztocil-httpie-0f4dce9/tests/test_auth_plugins.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:20:06Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}