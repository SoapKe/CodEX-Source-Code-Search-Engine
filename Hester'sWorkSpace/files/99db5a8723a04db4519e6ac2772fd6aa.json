{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\"\"\"A binary to train CIFAR-10 using a single GPU.\n\nAccuracy:\ncifar10_train.py achieves ~86% accuracy after 100K steps (256 epochs of\ndata) as judged by cifar10_eval.py.\n\nSpeed: With batch_size 128.\n\nSystem        | Step Time (sec/batch)  ||| ~86% at 60K steps  (5 hours)\n1 Tesla K40m  || ~86% at 100K steps (4 hours)\n\nUsage:\nPlease see the tutorial and website for how to download the CIFAR-10\ndata set, compile the program and train the model.\n\nhttp://tensorflow.org/tutorials/deep_cnn/\n\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom datetime import datetime\nimport time\n\nimport tensorflow as tf\n\nimport cifar10\n\nFLAGS = tf.app.flags.FLAGS\n\ntf.app.flags.DEFINE_string('train_dir', '/tmp/cifar10_train',\n                           \"\"\"Directory where to write event logs \"\"\"\n                           \"\"\"and checkpoint.\"\"\")\ntf.app.flags.DEFINE_integer('max_steps', 1000000,\n                            \"\"\"Number of batches to run.\"\"\")\ntf.app.flags.DEFINE_boolean('log_device_placement', False,\n                            \"\"\"Whether to log device placement.\"\"\")\ntf.app.flags.DEFINE_integer('log_frequency', 10,\n                            \"\"\"How often to log results to the console.\"\"\")\n\n\ndef train():\n  \"\"\"Train CIFAR-10 for a number of steps.\"\"\"\n  with tf.Graph().as_default():\n    global_step = tf.train.get_or_create_global_step()\n\n     Get images and labels for CIFAR-10.\n     Force input pipeline to CPU:0 to avoid operations sometimes ending up on\n     GPU and resulting in a slow down.\n    with tf.device('/cpu:0'):\n      images, labels = cifar10.distorted_inputs()\n\n     Build a Graph that computes the logits predictions from the\n     inference model.\n    logits = cifar10.inference(images)\n\n     Calculate loss.\n    loss = cifar10.loss(logits, labels)\n\n     Build a Graph that trains the model with one batch of examples and\n     updates the model parameters.\n    train_op = cifar10.train(loss, global_step)\n\n    class _LoggerHook(tf.train.SessionRunHook):\n      \"\"\"Logs loss and runtime.\"\"\"\n\n      def begin(self):\n        self._step = -1\n        self._start_time = time.time()\n\n      def before_run(self, run_context):\n        self._step += 1\n        return tf.train.SessionRunArgs(loss)   Asks for loss value.\n\n      def after_run(self, run_context, run_values):\n        if self._step % FLAGS.log_frequency == 0:\n          current_time = time.time()\n          duration = current_time - self._start_time\n          self._start_time = current_time\n\n          loss_value = run_values.results\n          examples_per_sec = FLAGS.log_frequency * FLAGS.batch_size / duration\n          sec_per_batch = float(duration / FLAGS.log_frequency)\n\n          format_str = ('%s: step %d, loss = %.2f (%.1f examples/sec; %.3f '\n                        'sec/batch)')\n          print (format_str % (datetime.now(), self._step, loss_value,\n                               examples_per_sec, sec_per_batch))\n\n    with tf.train.MonitoredTrainingSession(\n        checkpoint_dir=FLAGS.train_dir,\n        hooks=[tf.train.StopAtStepHook(last_step=FLAGS.max_steps),\n               tf.train.NanTensorHook(loss),\n               _LoggerHook()],\n        config=tf.ConfigProto(\n            log_device_placement=FLAGS.log_device_placement)) as mon_sess:\n      while not mon_sess.should_stop():\n        mon_sess.run(train_op)\n\n\ndef main(argv=None):   pylint: disable=unused-argument\n  cifar10.maybe_download_and_extract()\n  if tf.gfile.Exists(FLAGS.train_dir):\n    tf.gfile.DeleteRecursively(FLAGS.train_dir)\n  tf.gfile.MakeDirs(FLAGS.train_dir)\n  train()\n\n\nif __name__ == '__main__':\n  tf.app.run()\n", "comments": "   a binary train cifar 10 using single gpu   accuracy  cifar10 train py achieves  86  accuracy 100k steps (256 epochs data) judged cifar10 eval py   speed  with batch size 128   system          step time (sec batch)        accuracy                                                                    1 tesla k20m    0 35 0 60                 86  60k steps  (5 hours) 1 tesla k40m    0 25 0 35                 86  100k steps (4 hours)  usage  please see tutorial website download cifar 10 data set  compile program train model   http   tensorflow org tutorials deep cnn        future   import absolute import   future   import division   future   import print function  datetime import datetime import time  import tensorflow tf  import cifar10  flags   tf app flags flags  tf app flags define string( train dir     tmp cifar10 train                                 directory write event logs                                   checkpoint    ) tf app flags define integer( max steps   1000000                                 number batches run    ) tf app flags define boolean( log device placement   false                                 whether log device placement    ) tf app flags define integer( log frequency   10                                 how often log results console    )   def train()       train cifar 10 number steps       tf graph() default()      global step   tf train get create global step()        get images labels cifar 10        force input pipeline cpu 0 avoid operations sometimes ending       gpu resulting slow      tf device(  cpu 0 )        images  labels   cifar10 distorted inputs()        build graph computes logits predictions       inference model      logits   cifar10 inference(images)        calculate loss      loss   cifar10 loss(logits  labels)        build graph trains model one batch examples       updates model parameters      train op   cifar10 train(loss  global step)      class  loggerhook(tf train sessionrunhook)           logs loss runtime        copyright 2015 the tensorflow authors  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       get images labels cifar 10     force input pipeline cpu 0 avoid operations sometimes ending    gpu resulting slow     build graph computes logits predictions    inference model     calculate loss     build graph trains model one batch examples    updates model parameters     asks loss value     pylint  disable unused argument ", "content": "# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"A binary to train CIFAR-10 using a single GPU.\n\nAccuracy:\ncifar10_train.py achieves ~86% accuracy after 100K steps (256 epochs of\ndata) as judged by cifar10_eval.py.\n\nSpeed: With batch_size 128.\n\nSystem        | Step Time (sec/batch)  |     Accuracy\n------------------------------------------------------------------\n1 Tesla K20m  | 0.35-0.60              | ~86% at 60K steps  (5 hours)\n1 Tesla K40m  | 0.25-0.35              | ~86% at 100K steps (4 hours)\n\nUsage:\nPlease see the tutorial and website for how to download the CIFAR-10\ndata set, compile the program and train the model.\n\nhttp://tensorflow.org/tutorials/deep_cnn/\n\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom datetime import datetime\nimport time\n\nimport tensorflow as tf\n\nimport cifar10\n\nFLAGS = tf.app.flags.FLAGS\n\ntf.app.flags.DEFINE_string('train_dir', '/tmp/cifar10_train',\n                           \"\"\"Directory where to write event logs \"\"\"\n                           \"\"\"and checkpoint.\"\"\")\ntf.app.flags.DEFINE_integer('max_steps', 1000000,\n                            \"\"\"Number of batches to run.\"\"\")\ntf.app.flags.DEFINE_boolean('log_device_placement', False,\n                            \"\"\"Whether to log device placement.\"\"\")\ntf.app.flags.DEFINE_integer('log_frequency', 10,\n                            \"\"\"How often to log results to the console.\"\"\")\n\n\ndef train():\n  \"\"\"Train CIFAR-10 for a number of steps.\"\"\"\n  with tf.Graph().as_default():\n    global_step = tf.train.get_or_create_global_step()\n\n    # Get images and labels for CIFAR-10.\n    # Force input pipeline to CPU:0 to avoid operations sometimes ending up on\n    # GPU and resulting in a slow down.\n    with tf.device('/cpu:0'):\n      images, labels = cifar10.distorted_inputs()\n\n    # Build a Graph that computes the logits predictions from the\n    # inference model.\n    logits = cifar10.inference(images)\n\n    # Calculate loss.\n    loss = cifar10.loss(logits, labels)\n\n    # Build a Graph that trains the model with one batch of examples and\n    # updates the model parameters.\n    train_op = cifar10.train(loss, global_step)\n\n    class _LoggerHook(tf.train.SessionRunHook):\n      \"\"\"Logs loss and runtime.\"\"\"\n\n      def begin(self):\n        self._step = -1\n        self._start_time = time.time()\n\n      def before_run(self, run_context):\n        self._step += 1\n        return tf.train.SessionRunArgs(loss)  # Asks for loss value.\n\n      def after_run(self, run_context, run_values):\n        if self._step % FLAGS.log_frequency == 0:\n          current_time = time.time()\n          duration = current_time - self._start_time\n          self._start_time = current_time\n\n          loss_value = run_values.results\n          examples_per_sec = FLAGS.log_frequency * FLAGS.batch_size / duration\n          sec_per_batch = float(duration / FLAGS.log_frequency)\n\n          format_str = ('%s: step %d, loss = %.2f (%.1f examples/sec; %.3f '\n                        'sec/batch)')\n          print (format_str % (datetime.now(), self._step, loss_value,\n                               examples_per_sec, sec_per_batch))\n\n    with tf.train.MonitoredTrainingSession(\n        checkpoint_dir=FLAGS.train_dir,\n        hooks=[tf.train.StopAtStepHook(last_step=FLAGS.max_steps),\n               tf.train.NanTensorHook(loss),\n               _LoggerHook()],\n        config=tf.ConfigProto(\n            log_device_placement=FLAGS.log_device_placement)) as mon_sess:\n      while not mon_sess.should_stop():\n        mon_sess.run(train_op)\n\n\ndef main(argv=None):  # pylint: disable=unused-argument\n  cifar10.maybe_download_and_extract()\n  if tf.gfile.Exists(FLAGS.train_dir):\n    tf.gfile.DeleteRecursively(FLAGS.train_dir)\n  tf.gfile.MakeDirs(FLAGS.train_dir)\n  train()\n\n\nif __name__ == '__main__':\n  tf.app.run()\n", "description": "Models and examples built with TensorFlow", "file_name": "cifar10_train.py", "id": "99db5a8723a04db4519e6ac2772fd6aa", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/tutorials/image/cifar10/cifar10_train.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}