{"author": "tgalal", "code": "from yowsup.structs import ProtocolEntity, ProtocolTreeNode\nfrom .receipt import ReceiptProtocolEntity\nfrom yowsup.layers.protocol_acks.protocolentities  import OutgoingAckProtocolEntity\n\nclass IncomingReceiptProtocolEntity(ReceiptProtocolEntity):\n\n    \n\n    def __init__(self, _id, _from, timestamp, offline = None, type = None, participant = None, items = None):\n        super(IncomingReceiptProtocolEntity, self).__init__(_id)\n        self.setIncomingData(_from, timestamp, offline, type, participant, items)\n\n    def getType(self):\n        return self.type\n\n    def getParticipant(self, full=True):\n        if self.participant:\n            return self.participant if full else self.participant.split('@')[0]\n\n    def getFrom(self, full = True):\n        return self._from if full else self._from.split('@')[0]\n\n    def setIncomingData(self, _from, timestamp, offline, type = None, participant = None, items = None):\n        self._from = _from\n        self.timestamp = timestamp\n        self.type = type\n        self.participant = participant\n        if offline is not None:\n            self.offline = True if offline == \"1\" else False\n        else:\n            self.offline = None\n        self.items = items\n\n    def toProtocolTreeNode(self):\n        node = super(IncomingReceiptProtocolEntity, self).toProtocolTreeNode()\n        node.setAttribute(\"from\", self._from)\n        node.setAttribute(\"t\", str(self.timestamp))\n        if self.offline is not None:\n            node.setAttribute(\"offline\", \"1\" if self.offline else \"0\")\n        if self.type is not None:\n            node.setAttribute(\"type\", self.type)\n        if self.participant is not None:\n            node.setAttribute(\"participant\", self.participant)\n\n        if self.items is not None:\n            inodes = []\n            for item in self.items:\n                inode = ProtocolTreeNode(\"item\", {\"id\": item})\n                inodes.append(inode)\n\n            lnode = ProtocolTreeNode(\"list\")\n            lnode.addChildren(inodes)\n            node.addChild(lnode)\n        return node\n\n    def __str__(self):\n        out = super(IncomingReceiptProtocolEntity, self).__str__()\n        out += \"From: %s\\n\" % self._from\n        out += \"Timestamp: %s\\n\" % self.timestamp\n        if self.offline is not None:\n            out += \"Offline: %s\\n\" % (\"1\" if self.offline else \"0\")\n        if self.type is not None:\n            out += \"Type: %s\\n\" % (self.type)\n        if self.participant is not None:\n            out += \"Participant: %s\\n\" % (self.participant)\n        if self.items is not None:\n            out += \"Items: %s\\n\" % \" \".join(self.items)\n        return out\n\n    def ack(self):\n        return OutgoingAckProtocolEntity(self.getId(), \"receipt\", self.getType(), self.getFrom(), participant = self.participant)\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        items = None\n        listNode = node.getChild(\"list\")\n        if listNode is not None:\n            items = []\n            for inode in listNode.getAllChildren(\"item\"):\n               items.append(inode[\"id\"])\n        return IncomingReceiptProtocolEntity(\n            node.getAttributeValue(\"id\"),\n            node.getAttributeValue(\"from\"),\n            node.getAttributeValue(\"t\"),\n            node.getAttributeValue(\"offline\"),\n            node.getAttributeValue(\"type\"),\n            node.getAttributeValue(\"participant\"),\n            items\n            )\n", "comments": "        delivered       receipt  xxxxxxxxxxx whatsapp net  id  1415389947 15    receipt       read      receipt  xxxxxxxxxxx whatsapp net  id  1415389947 15  type  read    receipt       delivered participant group       receipt participant  xxxxxxxxxx whatsapp net   yyyyyyyyyyyyy g us  id  1431204051 9   1431204094    receipt       read participant group       receipt participant  xxxxxxxxxx whatsapp net   1431204235   yyyyyyyyyyyyy g us  id  1431204051 9  type  read    receipt       multiple items       receipt type  read   xxxxxxxxxxxx whatsapp net  id  1431364583 191   1431365553            list               item id  1431364572 189    item               item id  1431364575 190    item            list        receipt       multiple items group       receipt participant  xxxxxxxxxxxx whatsapp net   1431330533   yyyyyyyyyyyyyy g us  id  1431330385 323  type  read            list               item id  1431330096 317    item               item id  1431330373 320    item               item id  1431330373 321    item               item id  1431330385 322    item            list        receipt       incoming      receipt offline  0   xxxxxxxxxx whatsapp net  id  1415577964 1   1415578027    receipt          ", "content": "from yowsup.structs import ProtocolEntity, ProtocolTreeNode\nfrom .receipt import ReceiptProtocolEntity\nfrom yowsup.layers.protocol_acks.protocolentities  import OutgoingAckProtocolEntity\n\nclass IncomingReceiptProtocolEntity(ReceiptProtocolEntity):\n\n    '''\n    delivered:\n    <receipt to=\"xxxxxxxxxxx@s.whatsapp.net\" id=\"1415389947-15\"></receipt>\n\n    read\n    <receipt to=\"xxxxxxxxxxx@s.whatsapp.net\" id=\"1415389947-15\" type=\"read\"></receipt>\n\n    delivered to participant in group:\n    <receipt participant=\"xxxxxxxxxx@s.whatsapp.net\" from=\"yyyyyyyyyyyyy@g.us\" id=\"1431204051-9\" t=\"1431204094\"></receipt>\n\n    read by participant in group:\n    <receipt participant=\"xxxxxxxxxx@s.whatsapp.net\" t=\"1431204235\" from=\"yyyyyyyyyyyyy@g.us\" id=\"1431204051-9\" type=\"read\"></receipt>\n\n    multiple items:\n    <receipt type=\"read\" from=\"xxxxxxxxxxxx@s.whatsapp.net\" id=\"1431364583-191\" t=\"1431365553\">\n        <list>\n            <item id=\"1431364572-189\"></item>\n            <item id=\"1431364575-190\"></item>\n        </list>\n    </receipt>\n\n    multiple items to group:\n    <receipt participant=\"xxxxxxxxxxxx@s.whatsapp.net\" t=\"1431330533\" from=\"yyyyyyyyyyyyyy@g.us\" id=\"1431330385-323\" type=\"read\">\n        <list>\n            <item id=\"1431330096-317\"></item>\n            <item id=\"1431330373-320\"></item>\n            <item id=\"1431330373-321\"></item>\n            <item id=\"1431330385-322\"></item>\n        </list>\n    </receipt>\n\n    INCOMING\n    <receipt offline=\"0\" from=\"xxxxxxxxxx@s.whatsapp.net\" id=\"1415577964-1\" t=\"1415578027\"></receipt>\n    '''\n\n    def __init__(self, _id, _from, timestamp, offline = None, type = None, participant = None, items = None):\n        super(IncomingReceiptProtocolEntity, self).__init__(_id)\n        self.setIncomingData(_from, timestamp, offline, type, participant, items)\n\n    def getType(self):\n        return self.type\n\n    def getParticipant(self, full=True):\n        if self.participant:\n            return self.participant if full else self.participant.split('@')[0]\n\n    def getFrom(self, full = True):\n        return self._from if full else self._from.split('@')[0]\n\n    def setIncomingData(self, _from, timestamp, offline, type = None, participant = None, items = None):\n        self._from = _from\n        self.timestamp = timestamp\n        self.type = type\n        self.participant = participant\n        if offline is not None:\n            self.offline = True if offline == \"1\" else False\n        else:\n            self.offline = None\n        self.items = items\n\n    def toProtocolTreeNode(self):\n        node = super(IncomingReceiptProtocolEntity, self).toProtocolTreeNode()\n        node.setAttribute(\"from\", self._from)\n        node.setAttribute(\"t\", str(self.timestamp))\n        if self.offline is not None:\n            node.setAttribute(\"offline\", \"1\" if self.offline else \"0\")\n        if self.type is not None:\n            node.setAttribute(\"type\", self.type)\n        if self.participant is not None:\n            node.setAttribute(\"participant\", self.participant)\n\n        if self.items is not None:\n            inodes = []\n            for item in self.items:\n                inode = ProtocolTreeNode(\"item\", {\"id\": item})\n                inodes.append(inode)\n\n            lnode = ProtocolTreeNode(\"list\")\n            lnode.addChildren(inodes)\n            node.addChild(lnode)\n        return node\n\n    def __str__(self):\n        out = super(IncomingReceiptProtocolEntity, self).__str__()\n        out += \"From: %s\\n\" % self._from\n        out += \"Timestamp: %s\\n\" % self.timestamp\n        if self.offline is not None:\n            out += \"Offline: %s\\n\" % (\"1\" if self.offline else \"0\")\n        if self.type is not None:\n            out += \"Type: %s\\n\" % (self.type)\n        if self.participant is not None:\n            out += \"Participant: %s\\n\" % (self.participant)\n        if self.items is not None:\n            out += \"Items: %s\\n\" % \" \".join(self.items)\n        return out\n\n    def ack(self):\n        return OutgoingAckProtocolEntity(self.getId(), \"receipt\", self.getType(), self.getFrom(), participant = self.participant)\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        items = None\n        listNode = node.getChild(\"list\")\n        if listNode is not None:\n            items = []\n            for inode in listNode.getAllChildren(\"item\"):\n               items.append(inode[\"id\"])\n        return IncomingReceiptProtocolEntity(\n            node.getAttributeValue(\"id\"),\n            node.getAttributeValue(\"from\"),\n            node.getAttributeValue(\"t\"),\n            node.getAttributeValue(\"offline\"),\n            node.getAttributeValue(\"type\"),\n            node.getAttributeValue(\"participant\"),\n            items\n            )\n", "description": "The python WhatsApp library", "file_name": "receipt_incoming.py", "id": "2b2e7a339e65e23be2bb217241a51f19", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_receipts/protocolentities/receipt_incoming.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}