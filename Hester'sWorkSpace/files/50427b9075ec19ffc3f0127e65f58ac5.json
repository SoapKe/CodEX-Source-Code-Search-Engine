{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport io\nimport optparse\nimport os.path\nimport re\n\nROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nREADME_FILE = os.path.join(ROOT_DIR, 'README.md')\n\nPREFIX = r\n\n\ndef main():\n    parser = optparse.OptionParser(usage='%prog OUTFILE.md')\n    options, args = parser.parse_args()\n    if len(args) != 1:\n        parser.error('Expected an output filename')\n\n    outfile, = args\n\n    with io.open(README_FILE, encoding='utf-8') as f:\n        readme = f.read()\n\n    readme = re.sub(r'(?s)^.*?(?=\n    readme = re.sub(r'\\s+youtube-dl \\[OPTIONS\\] URL \\[URL\\.\\.\\.\\]', '', readme)\n    readme = PREFIX + readme\n\n    readme = filter_options(readme)\n\n    with io.open(outfile, 'w', encoding='utf-8') as outf:\n        outf.write(readme)\n\n\ndef filter_options(readme):\n    ret = ''\n    in_options = False\n    for line in readme.split('\\n'):\n        if line.startswith('\n            if line[2:].startswith('OPTIONS'):\n                in_options = True\n            else:\n                in_options = False\n\n        if in_options:\n            if line.lstrip().startswith('-'):\n                split = re.split(r'\\s{2,}', line.lstrip())\n                \n                \n                if len(split) > 1:\n                    option, description = split\n                    split_option = option.split(' ')\n\n                    if not split_option[-1].startswith('-'):  \n                        option = ' '.join(split_option[:-1] + ['*%s*' % split_option[-1]])\n\n                    \n                    \n                    ret += '\\n%s\\n:   %s\\n' % (option, description)\n                    continue\n            ret += line.lstrip() + '\\n'\n        else:\n            ret += line + '\\n'\n\n    return ret\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "%YOUTUBE-DL(1)\n\n# NAME\n\nyoutube\\-dl \\- download videos from youtube.com or other video platforms\n\n# SYNOPSIS\n\n**youtube-dl** \\[OPTIONS\\] URL [URL...]\n\n\n\n\n# DESCRIPTION)', '', readme)\n# '):\n# Description string may start with `-` as well. If there is\n# only one piece then it's a description bit not an option.\n# metavar\n# Pandoc's definition_lists. See http://pandoc.org/README.html\n# for more information.\n", "content": "from __future__ import unicode_literals\n\nimport io\nimport optparse\nimport os.path\nimport re\n\nROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nREADME_FILE = os.path.join(ROOT_DIR, 'README.md')\n\nPREFIX = r'''%YOUTUBE-DL(1)\n\n# NAME\n\nyoutube\\-dl \\- download videos from youtube.com or other video platforms\n\n# SYNOPSIS\n\n**youtube-dl** \\[OPTIONS\\] URL [URL...]\n\n'''\n\n\ndef main():\n    parser = optparse.OptionParser(usage='%prog OUTFILE.md')\n    options, args = parser.parse_args()\n    if len(args) != 1:\n        parser.error('Expected an output filename')\n\n    outfile, = args\n\n    with io.open(README_FILE, encoding='utf-8') as f:\n        readme = f.read()\n\n    readme = re.sub(r'(?s)^.*?(?=# DESCRIPTION)', '', readme)\n    readme = re.sub(r'\\s+youtube-dl \\[OPTIONS\\] URL \\[URL\\.\\.\\.\\]', '', readme)\n    readme = PREFIX + readme\n\n    readme = filter_options(readme)\n\n    with io.open(outfile, 'w', encoding='utf-8') as outf:\n        outf.write(readme)\n\n\ndef filter_options(readme):\n    ret = ''\n    in_options = False\n    for line in readme.split('\\n'):\n        if line.startswith('# '):\n            if line[2:].startswith('OPTIONS'):\n                in_options = True\n            else:\n                in_options = False\n\n        if in_options:\n            if line.lstrip().startswith('-'):\n                split = re.split(r'\\s{2,}', line.lstrip())\n                # Description string may start with `-` as well. If there is\n                # only one piece then it's a description bit not an option.\n                if len(split) > 1:\n                    option, description = split\n                    split_option = option.split(' ')\n\n                    if not split_option[-1].startswith('-'):  # metavar\n                        option = ' '.join(split_option[:-1] + ['*%s*' % split_option[-1]])\n\n                    # Pandoc's definition_lists. See http://pandoc.org/README.html\n                    # for more information.\n                    ret += '\\n%s\\n:   %s\\n' % (option, description)\n                    continue\n            ret += line.lstrip() + '\\n'\n        else:\n            ret += line + '\\n'\n\n    return ret\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "prepare_manpage.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/devscripts/prepare_manpage.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}