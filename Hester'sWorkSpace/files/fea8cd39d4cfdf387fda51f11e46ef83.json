{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.compat.tests.mock import mock_open\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six import PY3\n\ntry:\n    from library.bigip_irule import Parameters\n    from library.bigip_irule import ModuleManager\n    from library.bigip_irule import ArgumentSpec\n    from library.bigip_irule import GtmManager\n    from library.bigip_irule import LtmManager\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_irule import Parameters\n        from ansible.modules.network.f5.bigip_irule import ModuleManager\n        from ansible.modules.network.f5.bigip_irule import ArgumentSpec\n        from ansible.modules.network.f5.bigip_irule import GtmManager\n        from ansible.modules.network.f5.bigip_irule import LtmManager\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass BigIpObj(object):\n    def __init__(self, **kwargs):\n        self.__dict__.update(kwargs)\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters_ltm(self):\n        content = load_fixture('create_ltm_irule.tcl')\n        args = dict(\n            content=content,\n            module='ltm',\n            name='foo',\n            state='present'\n        )\n        p = Parameters(params=args)\n        assert p.content == content.strip()\n\n    def test_module_parameters_gtm(self):\n        content = load_fixture('create_gtm_irule.tcl')\n        args = dict(\n            content=content,\n            module='gtm',\n            name='foo',\n            state='present'\n        )\n        p = Parameters(params=args)\n        assert p.content == content.strip()\n\n    def test_api_parameters_ltm(self):\n        content = load_fixture('create_ltm_irule.tcl')\n        args = dict(\n            apiAnonymous=content\n        )\n        p = Parameters(params=args)\n        assert p.content == content.strip()\n\n    def test_return_api_params(self):\n        content = load_fixture('create_ltm_irule.tcl')\n        args = dict(\n            content=content,\n            module='ltm',\n            name='foo',\n            state='present'\n        )\n        p = Parameters(params=args)\n        params = p.api_params()\n\n        assert 'apiAnonymous' in params\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n        self.ltm_irules = []\n        self.gtm_irules = []\n\n        members = load_fixture('load_ltm_irules.json')\n        for item in members:\n            self.ltm_irules.append(BigIpObj(**item))\n\n        members = load_fixture('load_gtm_irules.json')\n        for item in members:\n            self.gtm_irules.append(BigIpObj(**item))\n\n    def test_create_ltm_irule(self, *args):\n        set_module_args(dict(\n            name='foo',\n            module='ltm',\n            content='this is my content',\n            partition='Common',\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode,\n            mutually_exclusive=self.spec.mutually_exclusive,\n        )\n\n         Override methods in the specific type of manager\n        tm = LtmManager(module=module, params=module.params)\n        tm.exists = Mock(side_effect=[False, True])\n        tm.create_on_device = Mock(return_value=True)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['content'] == 'this is my content'\n\n    def test_create_gtm_irule(self, *args):\n        set_module_args(dict(\n            name='foo',\n            module='gtm',\n            content='this is my content',\n            partition='Common',\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode,\n            mutually_exclusive=self.spec.mutually_exclusive,\n        )\n\n         Override methods in the specific type of manager\n        tm = GtmManager(module=module, params=module.params)\n        tm.exists = Mock(side_effect=[False, True])\n        tm.create_on_device = Mock(return_value=True)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['content'] == 'this is my content'\n\n    def test_create_gtm_irule_src(self, *args):\n        set_module_args(dict(\n            name='foo',\n            module='gtm',\n            src='{0}/create_ltm_irule.tcl'.format(fixture_path),\n            partition='Common',\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode,\n            mutually_exclusive=self.spec.mutually_exclusive,\n        )\n\n        if PY3:\n            builtins_name = 'builtins'\n        else:\n            builtins_name = '__builtin__'\n\n        with patch(builtins_name + '.open', mock_open(read_data='this is my content'), create=True):\n             Override methods in the specific type of manager\n            tm = GtmManager(module=module, params=module.params)\n            tm.exists = Mock(side_effect=[False, True])\n            tm.create_on_device = Mock(return_value=True)\n\n             Override methods to force specific logic in the module to happen\n            mm = ModuleManager(module=module)\n            mm.get_manager = Mock(return_value=tm)\n\n            results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['content'] == 'this is my content'\n        assert results['module'] == 'gtm'\n        assert results['src'] == '{0}/create_ltm_irule.tcl'.format(fixture_path)\n        assert len(results.keys()) == 4\n\n    def test_module_mutual_exclusion(self, *args):\n        set_module_args(dict(\n            content='foo',\n            module='ltm',\n            name='foo',\n            state='present',\n            src='/path/to/irules/foo.tcl',\n            partition='Common',\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        with patch('ansible.module_utils.basic.AnsibleModule.fail_json', unsafe=True) as mo:\n            AnsibleModule(\n                argument_spec=self.spec.argument_spec,\n                supports_check_mode=self.spec.supports_check_mode,\n                mutually_exclusive=self.spec.mutually_exclusive,\n            )\n            mo.assert_called_once()\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    override methods specific type manager    override methods force specific logic module happen    override methods specific type manager    override methods force specific logic module happen    override methods specific type manager    override methods force specific logic module happen ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.compat.tests.mock import mock_open\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six import PY3\n\ntry:\n    from library.bigip_irule import Parameters\n    from library.bigip_irule import ModuleManager\n    from library.bigip_irule import ArgumentSpec\n    from library.bigip_irule import GtmManager\n    from library.bigip_irule import LtmManager\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_irule import Parameters\n        from ansible.modules.network.f5.bigip_irule import ModuleManager\n        from ansible.modules.network.f5.bigip_irule import ArgumentSpec\n        from ansible.modules.network.f5.bigip_irule import GtmManager\n        from ansible.modules.network.f5.bigip_irule import LtmManager\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass BigIpObj(object):\n    def __init__(self, **kwargs):\n        self.__dict__.update(kwargs)\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters_ltm(self):\n        content = load_fixture('create_ltm_irule.tcl')\n        args = dict(\n            content=content,\n            module='ltm',\n            name='foo',\n            state='present'\n        )\n        p = Parameters(params=args)\n        assert p.content == content.strip()\n\n    def test_module_parameters_gtm(self):\n        content = load_fixture('create_gtm_irule.tcl')\n        args = dict(\n            content=content,\n            module='gtm',\n            name='foo',\n            state='present'\n        )\n        p = Parameters(params=args)\n        assert p.content == content.strip()\n\n    def test_api_parameters_ltm(self):\n        content = load_fixture('create_ltm_irule.tcl')\n        args = dict(\n            apiAnonymous=content\n        )\n        p = Parameters(params=args)\n        assert p.content == content.strip()\n\n    def test_return_api_params(self):\n        content = load_fixture('create_ltm_irule.tcl')\n        args = dict(\n            content=content,\n            module='ltm',\n            name='foo',\n            state='present'\n        )\n        p = Parameters(params=args)\n        params = p.api_params()\n\n        assert 'apiAnonymous' in params\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n        self.ltm_irules = []\n        self.gtm_irules = []\n\n        members = load_fixture('load_ltm_irules.json')\n        for item in members:\n            self.ltm_irules.append(BigIpObj(**item))\n\n        members = load_fixture('load_gtm_irules.json')\n        for item in members:\n            self.gtm_irules.append(BigIpObj(**item))\n\n    def test_create_ltm_irule(self, *args):\n        set_module_args(dict(\n            name='foo',\n            module='ltm',\n            content='this is my content',\n            partition='Common',\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode,\n            mutually_exclusive=self.spec.mutually_exclusive,\n        )\n\n        # Override methods in the specific type of manager\n        tm = LtmManager(module=module, params=module.params)\n        tm.exists = Mock(side_effect=[False, True])\n        tm.create_on_device = Mock(return_value=True)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['content'] == 'this is my content'\n\n    def test_create_gtm_irule(self, *args):\n        set_module_args(dict(\n            name='foo',\n            module='gtm',\n            content='this is my content',\n            partition='Common',\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode,\n            mutually_exclusive=self.spec.mutually_exclusive,\n        )\n\n        # Override methods in the specific type of manager\n        tm = GtmManager(module=module, params=module.params)\n        tm.exists = Mock(side_effect=[False, True])\n        tm.create_on_device = Mock(return_value=True)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['content'] == 'this is my content'\n\n    def test_create_gtm_irule_src(self, *args):\n        set_module_args(dict(\n            name='foo',\n            module='gtm',\n            src='{0}/create_ltm_irule.tcl'.format(fixture_path),\n            partition='Common',\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode,\n            mutually_exclusive=self.spec.mutually_exclusive,\n        )\n\n        if PY3:\n            builtins_name = 'builtins'\n        else:\n            builtins_name = '__builtin__'\n\n        with patch(builtins_name + '.open', mock_open(read_data='this is my content'), create=True):\n            # Override methods in the specific type of manager\n            tm = GtmManager(module=module, params=module.params)\n            tm.exists = Mock(side_effect=[False, True])\n            tm.create_on_device = Mock(return_value=True)\n\n            # Override methods to force specific logic in the module to happen\n            mm = ModuleManager(module=module)\n            mm.get_manager = Mock(return_value=tm)\n\n            results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['content'] == 'this is my content'\n        assert results['module'] == 'gtm'\n        assert results['src'] == '{0}/create_ltm_irule.tcl'.format(fixture_path)\n        assert len(results.keys()) == 4\n\n    def test_module_mutual_exclusion(self, *args):\n        set_module_args(dict(\n            content='foo',\n            module='ltm',\n            name='foo',\n            state='present',\n            src='/path/to/irules/foo.tcl',\n            partition='Common',\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        with patch('ansible.module_utils.basic.AnsibleModule.fail_json', unsafe=True) as mo:\n            AnsibleModule(\n                argument_spec=self.spec.argument_spec,\n                supports_check_mode=self.spec.supports_check_mode,\n                mutually_exclusive=self.spec.mutually_exclusive,\n            )\n            mo.assert_called_once()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_irule.py", "id": "fea8cd39d4cfdf387fda51f11e46ef83", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_irule.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}