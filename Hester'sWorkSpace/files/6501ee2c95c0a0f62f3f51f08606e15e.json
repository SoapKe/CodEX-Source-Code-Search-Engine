{"author": "thumbor", "code": "import os.path\n\nfrom tornado.testing import AsyncHTTPTestCase\nfrom tornado.ioloop import IOLoop\n\nfrom thumbor.app import ThumborServiceApp\nfrom thumbor.importer import Importer\nfrom thumbor.config import Config\nfrom thumbor.context import Context, ServerParameters\nfrom .urls_helpers import single_dataset  \nfrom thumbor.utils import which\n\n\nclass EngineCase(AsyncHTTPTestCase):\n\n    def get_app(self):\n        cfg = Config(SECURITY_KEY='ACME-SEC')\n        server_params = ServerParameters(None, None, None, None, None, None)\n        server_params.gifsicle_path = which('gifsicle')\n\n        cfg.DETECTORS = [\n            'thumbor.detectors.face_detector',\n            'thumbor.detectors.profile_detector',\n            'thumbor.detectors.glasses_detector',\n            'thumbor.detectors.feature_detector',\n        ]\n        cfg.STORAGE = 'thumbor.storages.no_storage'\n        cfg.LOADER = 'thumbor.loaders.file_loader'\n        cfg.FILE_LOADER_ROOT_PATH = os.path.join(os.path.dirname(__file__), 'imgs')\n        cfg.ENGINE = getattr(self, 'engine', None)\n        cfg.USE_GIFSICLE_ENGINE = True\n        cfg.FFMPEG_PATH = which('ffmpeg')\n        cfg.ENGINE_THREADPOOL_SIZE = 10\n        cfg.OPTIMIZERS = [\n            'thumbor.optimizers.gifv',\n        ]\n        if not cfg.ENGINE:\n            return None\n\n        importer = Importer(cfg)\n        importer.import_modules()\n        ctx = Context(server_params, cfg, importer)\n        application = ThumborServiceApp(ctx)\n\n        return application\n\n    def get_new_ioloop(self):\n        return IOLoop.instance()\n\n    def retrieve(self, url):\n        self.http_client.fetch(self.get_url(url), self.stop)\n        return self.wait(timeout=30)\n\n    def exec_single_params(self):\n        if not self._app:\n            return True\n        single_dataset(self.retrieve)\n\n    # def test_combined_params__with_pil(self):\n    \n    \n    #     combined_dataset(self.retrieve)\n", "comments": "    combined dataset    def test combined params  pil(self)         self  app             return true        combined dataset(self retrieve) ", "content": "import os.path\n\nfrom tornado.testing import AsyncHTTPTestCase\nfrom tornado.ioloop import IOLoop\n\nfrom thumbor.app import ThumborServiceApp\nfrom thumbor.importer import Importer\nfrom thumbor.config import Config\nfrom thumbor.context import Context, ServerParameters\nfrom .urls_helpers import single_dataset  # , combined_dataset\nfrom thumbor.utils import which\n\n\nclass EngineCase(AsyncHTTPTestCase):\n\n    def get_app(self):\n        cfg = Config(SECURITY_KEY='ACME-SEC')\n        server_params = ServerParameters(None, None, None, None, None, None)\n        server_params.gifsicle_path = which('gifsicle')\n\n        cfg.DETECTORS = [\n            'thumbor.detectors.face_detector',\n            'thumbor.detectors.profile_detector',\n            'thumbor.detectors.glasses_detector',\n            'thumbor.detectors.feature_detector',\n        ]\n        cfg.STORAGE = 'thumbor.storages.no_storage'\n        cfg.LOADER = 'thumbor.loaders.file_loader'\n        cfg.FILE_LOADER_ROOT_PATH = os.path.join(os.path.dirname(__file__), 'imgs')\n        cfg.ENGINE = getattr(self, 'engine', None)\n        cfg.USE_GIFSICLE_ENGINE = True\n        cfg.FFMPEG_PATH = which('ffmpeg')\n        cfg.ENGINE_THREADPOOL_SIZE = 10\n        cfg.OPTIMIZERS = [\n            'thumbor.optimizers.gifv',\n        ]\n        if not cfg.ENGINE:\n            return None\n\n        importer = Importer(cfg)\n        importer.import_modules()\n        ctx = Context(server_params, cfg, importer)\n        application = ThumborServiceApp(ctx)\n\n        return application\n\n    def get_new_ioloop(self):\n        return IOLoop.instance()\n\n    def retrieve(self, url):\n        self.http_client.fetch(self.get_url(url), self.stop)\n        return self.wait(timeout=30)\n\n    def exec_single_params(self):\n        if not self._app:\n            return True\n        single_dataset(self.retrieve)\n\n    # def test_combined_params__with_pil(self):\n    #     if not self._app:\n    #         return True\n    #     combined_dataset(self.retrieve)\n", "description": "thumbor is an open-source photo thumbnail service by globo.com", "file_name": "__init__.py", "id": "6501ee2c95c0a0f62f3f51f08606e15e", "language": "Python", "project_name": "thumbor", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/thumbor-thumbor/thumbor-thumbor-991f13c/integration_tests/__init__.py", "save_time": "", "source": "", "update_at": "2018-03-18T09:16:11Z", "url": "https://github.com/thumbor/thumbor", "wiki": true}