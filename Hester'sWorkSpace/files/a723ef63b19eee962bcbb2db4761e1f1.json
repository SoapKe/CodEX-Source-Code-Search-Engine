{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    get_element_by_id,\n    clean_html,\n    ExtractorError,\n    InAdvancePagedList,\n    remove_start,\n)\n\n\nclass KuwoBaseIE(InfoExtractor):\n    _FORMATS = [\n        {'format': 'ape', 'ext': 'ape', 'preference': 100},\n        {'format': 'mp3-320', 'ext': 'mp3', 'br': '320kmp3', 'abr': 320, 'preference': 80},\n        {'format': 'mp3-192', 'ext': 'mp3', 'br': '192kmp3', 'abr': 192, 'preference': 70},\n        {'format': 'mp3-128', 'ext': 'mp3', 'br': '128kmp3', 'abr': 128, 'preference': 60},\n        {'format': 'wma', 'ext': 'wma', 'preference': 20},\n        {'format': 'aac', 'ext': 'aac', 'abr': 48, 'preference': 10}\n    ]\n\n    def _get_formats(self, song_id, tolerate_ip_deny=False):\n        formats = []\n        for file_format in self._FORMATS:\n            query = {\n                'format': file_format['ext'],\n                'br': file_format.get('br', ''),\n                'rid': 'MUSIC_%s' % song_id,\n                'type': 'convert_url',\n                'response': 'url'\n            }\n\n            song_url = self._download_webpage(\n                'http://antiserver.kuwo.cn/anti.s',\n                song_id, note='Download %s url info' % file_format['format'],\n                query=query, headers=self.geo_verification_headers(),\n            )\n\n            if song_url == 'IPDeny' and not tolerate_ip_deny:\n                raise ExtractorError('This song is blocked in this region', expected=True)\n\n            if song_url.startswith('http://') or song_url.startswith('https://'):\n                formats.append({\n                    'url': song_url,\n                    'format_id': file_format['format'],\n                    'format': file_format['format'],\n                    'preference': file_format['preference'],\n                    'abr': file_format.get('abr'),\n                })\n\n        return formats\n\n\nclass KuwoIE(KuwoBaseIE):\n    IE_NAME = 'kuwo:song'\n    IE_DESC = '\u9177\u6211\u97f3\u4e50'\n    _VALID_URL = r'https?://(?:www\\.)?kuwo\\.cn/yinyue/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.kuwo.cn/yinyue/635632/',\n        'info_dict': {\n            'id': '635632',\n            'ext': 'ape',\n            'title': '\u7231\u6211\u522b\u8d70',\n            'creator': '\u5f20\u9707\u5cb3',\n            'upload_date': '20080122',\n            'description': 'md5:ed13f58e3c3bf3f7fd9fbc4e5a7aa75c'\n        },\n        'skip': 'this song has been offline because of copyright issues',\n    }, {\n        'url': 'http://www.kuwo.cn/yinyue/6446136/',\n        'info_dict': {\n            'id': '6446136',\n            'ext': 'mp3',\n            'title': '\u5fc3',\n            'description': 'md5:5d0e947b242c35dc0eb1d2fce9fbf02c',\n            'creator': 'IU',\n            'upload_date': '20150518',\n        },\n        'params': {\n            'format': 'mp3-320',\n        },\n    }, {\n        'url': 'http://www.kuwo.cn/yinyue/3197154?catalog=yueku2016',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        song_id = self._match_id(url)\n        webpage, urlh = self._download_webpage_handle(\n            url, song_id, note='Download song detail info',\n            errnote='Unable to get song detail info')\n        if song_id not in urlh.geturl() or '\u5bf9\u4e0d\u8d77\uff0c\u8be5\u6b4c\u66f2\u7531\u4e8e\u7248\u6743\u95ee\u9898\u5df2\u88ab\u4e0b\u7ebf\uff0c\u5c06\u8fd4\u56de\u7f51\u7ad9\u9996\u9875' in webpage:\n            raise ExtractorError('this song has been offline because of copyright issues', expected=True)\n\n        song_name = self._html_search_regex(\n            r'<p[^>]+id=\"lrcName\">([^<]+)</p>', webpage, 'song name')\n        singer_name = remove_start(self._html_search_regex(\n            r'<a[^>]+href=\"http://www\\.kuwo\\.cn/artist/content\\?name=([^\"]+)\">',\n            webpage, 'singer name', fatal=False), '\u6b4c\u624b')\n        lrc_content = clean_html(get_element_by_id('lrcContent', webpage))\n        if lrc_content == '\u6682\u65e0':     \n            lrc_content = None\n\n        formats = self._get_formats(song_id)\n        self._sort_formats(formats)\n\n        album_id = self._html_search_regex(\n            r'<a[^>]+href=\"http://www\\.kuwo\\.cn/album/(\\d+)/\"',\n            webpage, 'album id', fatal=False)\n\n        publish_time = None\n        if album_id is not None:\n            album_info_page = self._download_webpage(\n                'http://www.kuwo.cn/album/%s/' % album_id, song_id,\n                note='Download album detail info',\n                errnote='Unable to get album detail info')\n\n            publish_time = self._html_search_regex(\n                r'\u53d1\u884c\u65f6\u95f4\uff1a(\\d{4}-\\d{2}-\\d{2})', album_info_page,\n                'publish time', fatal=False)\n            if publish_time:\n                publish_time = publish_time.replace('-', '')\n\n        return {\n            'id': song_id,\n            'title': song_name,\n            'creator': singer_name,\n            'upload_date': publish_time,\n            'description': lrc_content,\n            'formats': formats,\n        }\n\n\nclass KuwoAlbumIE(InfoExtractor):\n    IE_NAME = 'kuwo:album'\n    IE_DESC = '\u9177\u6211\u97f3\u4e50 - \u4e13\u8f91'\n    _VALID_URL = r'https?://(?:www\\.)?kuwo\\.cn/album/(?P<id>\\d+?)/'\n    _TEST = {\n        'url': 'http://www.kuwo.cn/album/502294/',\n        'info_dict': {\n            'id': '502294',\n            'title': 'Made\\xa0Series\\xa0\u300aM\u300b',\n            'description': 'md5:d463f0d8a0ff3c3ea3d6ed7452a9483f',\n        },\n        'playlist_count': 2,\n    }\n\n    def _real_extract(self, url):\n        album_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            url, album_id, note='Download album info',\n            errnote='Unable to get album info')\n\n        album_name = self._html_search_regex(\n            r'<div[^>]+class=\"comm\"[^<]+<h1[^>]+title=\"([^\"]+)\"', webpage,\n            'album name')\n        album_intro = remove_start(\n            clean_html(get_element_by_id('intro', webpage)),\n            '%s\u7b80\u4ecb\uff1a' % album_name)\n\n        entries = [\n            self.url_result(song_url, 'Kuwo') for song_url in re.findall(\n                r'<p[^>]+class=\"listen\"><a[^>]+href=\"(http://www\\.kuwo\\.cn/yinyue/\\d+/)\"',\n                webpage)\n        ]\n        return self.playlist_result(entries, album_id, album_name, album_intro)\n\n\nclass KuwoChartIE(InfoExtractor):\n    IE_NAME = 'kuwo:chart'\n    IE_DESC = '\u9177\u6211\u97f3\u4e50 - \u6392\u884c\u699c'\n    _VALID_URL = r'https?://yinyue\\.kuwo\\.cn/billboard_(?P<id>[^.]+).htm'\n    _TEST = {\n        'url': 'http://yinyue.kuwo.cn/billboard_\u9999\u6e2f\u4e2d\u6587\u9f99\u864e\u699c.htm',\n        'info_dict': {\n            'id': '\u9999\u6e2f\u4e2d\u6587\u9f99\u864e\u699c',\n        },\n        'playlist_mincount': 7,\n    }\n\n    def _real_extract(self, url):\n        chart_id = self._match_id(url)\n        webpage = self._download_webpage(\n            url, chart_id, note='Download chart info',\n            errnote='Unable to get chart info')\n\n        entries = [\n            self.url_result(song_url, 'Kuwo') for song_url in re.findall(\n                r'<a[^>]+href=\"(http://www\\.kuwo\\.cn/yinyue/\\d+)', webpage)\n        ]\n        return self.playlist_result(entries, chart_id)\n\n\nclass KuwoSingerIE(InfoExtractor):\n    IE_NAME = 'kuwo:singer'\n    IE_DESC = '\u9177\u6211\u97f3\u4e50 - \u6b4c\u624b'\n    _VALID_URL = r'https?://(?:www\\.)?kuwo\\.cn/mingxing/(?P<id>[^/]+)'\n    _TESTS = [{\n        'url': 'http://www.kuwo.cn/mingxing/bruno+mars/',\n        'info_dict': {\n            'id': 'bruno+mars',\n            'title': 'Bruno\\xa0Mars',\n        },\n        'playlist_mincount': 329,\n    }, {\n        'url': 'http://www.kuwo.cn/mingxing/Ali/music.htm',\n        'info_dict': {\n            'id': 'Ali',\n            'title': 'Ali',\n        },\n        'playlist_mincount': 95,\n        'skip': 'Regularly stalls travis build',  \n    }]\n\n    PAGE_SIZE = 15\n\n    def _real_extract(self, url):\n        singer_id = self._match_id(url)\n        webpage = self._download_webpage(\n            url, singer_id, note='Download singer info',\n            errnote='Unable to get singer info')\n\n        singer_name = self._html_search_regex(\n            r'<h1>([^<]+)</h1>', webpage, 'singer name')\n\n        artist_id = self._html_search_regex(\n            r'data-artistid=\"(\\d+)\"', webpage, 'artist id')\n\n        page_count = int(self._html_search_regex(\n            r'data-page=\"(\\d+)\"', webpage, 'page count'))\n\n        def page_func(page_num):\n            webpage = self._download_webpage(\n                'http://www.kuwo.cn/artist/contentMusicsAjax',\n                singer_id, note='Download song list page \n                errnote='Unable to get song list page \n                query={'artistId': artist_id, 'pn': page_num, 'rn': self.PAGE_SIZE})\n\n            return [\n                self.url_result(compat_urlparse.urljoin(url, song_url), 'Kuwo')\n                for song_url in re.findall(\n                    r'<div[^>]+class=\"name\"><a[^>]+href=\"(/yinyue/\\d+)',\n                    webpage)\n            ]\n\n        entries = InAdvancePagedList(page_func, page_count, self.PAGE_SIZE)\n\n        return self.playlist_result(entries, singer_id, singer_name)\n\n\nclass KuwoCategoryIE(InfoExtractor):\n    IE_NAME = 'kuwo:category'\n    IE_DESC = '\u9177\u6211\u97f3\u4e50 - \u5206\u7c7b'\n    _VALID_URL = r'https?://yinyue\\.kuwo\\.cn/yy/cinfo_(?P<id>\\d+?).htm'\n    _TEST = {\n        'url': 'http://yinyue.kuwo.cn/yy/cinfo_86375.htm',\n        'info_dict': {\n            'id': '86375',\n            'title': '\u516b\u5341\u5e74\u4ee3\u7cbe\u9009',\n            'description': '\u8fd9\u4e9b\u90fd\u662f\u5c5e\u4e8e\u516b\u5341\u5e74\u4ee3\u7684\u56de\u5fc6\uff01',\n        },\n        'playlist_mincount': 24,\n    }\n\n    def _real_extract(self, url):\n        category_id = self._match_id(url)\n        webpage = self._download_webpage(\n            url, category_id, note='Download category info',\n            errnote='Unable to get category info')\n\n        category_name = self._html_search_regex(\n            r'<h1[^>]+title=\"([^<>]+?)\">[^<>]+?</h1>', webpage, 'category name')\n\n        category_desc = remove_start(\n            get_element_by_id('intro', webpage).strip(),\n            '%s\u7b80\u4ecb\uff1a' % category_name)\n        if category_desc == '\u6682\u65e0':\n            category_desc = None\n\n        jsonm = self._parse_json(self._html_search_regex(\n            r'var\\s+jsonm\\s*=\\s*([^;]+);', webpage, 'category songs'), category_id)\n\n        entries = [\n            self.url_result('http://www.kuwo.cn/yinyue/%s/' % song['musicrid'], 'Kuwo')\n            for song in jsonm['musiclist']\n        ]\n        return self.playlist_result(entries, category_id, category_name, category_desc)\n\n\nclass KuwoMvIE(KuwoBaseIE):\n    IE_NAME = 'kuwo:mv'\n    IE_DESC = '\u9177\u6211\u97f3\u4e50 - MV'\n    _VALID_URL = r'https?://(?:www\\.)?kuwo\\.cn/mv/(?P<id>\\d+?)/'\n    _TEST = {\n        'url': 'http://www.kuwo.cn/mv/6480076/',\n        'info_dict': {\n            'id': '6480076',\n            'ext': 'mp4',\n            'title': 'My HouseMV',\n            'creator': '2PM',\n        },\n        \n        \n        \n        'params': {\n            'format': 'mv',\n        },\n    }\n    _FORMATS = KuwoBaseIE._FORMATS + [\n        {'format': 'mkv', 'ext': 'mkv', 'preference': 250},\n        {'format': 'mp4', 'ext': 'mp4', 'preference': 200},\n    ]\n\n    def _real_extract(self, url):\n        song_id = self._match_id(url)\n        webpage = self._download_webpage(\n            url, song_id, note='Download mv detail info: %s' % song_id,\n            errnote='Unable to get mv detail info: %s' % song_id)\n\n        mobj = re.search(\n            r'<h1[^>]+title=\"(?P<song>[^\"]+)\">[^<]+<span[^>]+title=\"(?P<singer>[^\"]+)\"',\n            webpage)\n        if mobj:\n            song_name = mobj.group('song')\n            singer_name = mobj.group('singer')\n        else:\n            raise ExtractorError('Unable to find song or singer names')\n\n        formats = self._get_formats(song_id, tolerate_ip_deny=True)\n\n        mv_url = self._download_webpage(\n            'http://www.kuwo.cn/yy/st/mvurl?rid=MUSIC_%s' % song_id,\n            song_id, note='Download %s MV URL' % song_id)\n        formats.append({\n            'url': mv_url,\n            'format_id': 'mv',\n        })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': song_id,\n            'title': song_name,\n            'creator': singer_name,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# indicates no lyrics\n# See https://travis-ci.org/rg3/youtube-dl/jobs/78878540\n#%d' % (page_num + 1),\n#%d' % (page_num + 1),\n# In this video, music URLs (anti.s) are blocked outside China and\n# USA, while the MV URL (mvurl) is available globally, so force the MV\n# URL for consistent results in different countries\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    get_element_by_id,\n    clean_html,\n    ExtractorError,\n    InAdvancePagedList,\n    remove_start,\n)\n\n\nclass KuwoBaseIE(InfoExtractor):\n    _FORMATS = [\n        {'format': 'ape', 'ext': 'ape', 'preference': 100},\n        {'format': 'mp3-320', 'ext': 'mp3', 'br': '320kmp3', 'abr': 320, 'preference': 80},\n        {'format': 'mp3-192', 'ext': 'mp3', 'br': '192kmp3', 'abr': 192, 'preference': 70},\n        {'format': 'mp3-128', 'ext': 'mp3', 'br': '128kmp3', 'abr': 128, 'preference': 60},\n        {'format': 'wma', 'ext': 'wma', 'preference': 20},\n        {'format': 'aac', 'ext': 'aac', 'abr': 48, 'preference': 10}\n    ]\n\n    def _get_formats(self, song_id, tolerate_ip_deny=False):\n        formats = []\n        for file_format in self._FORMATS:\n            query = {\n                'format': file_format['ext'],\n                'br': file_format.get('br', ''),\n                'rid': 'MUSIC_%s' % song_id,\n                'type': 'convert_url',\n                'response': 'url'\n            }\n\n            song_url = self._download_webpage(\n                'http://antiserver.kuwo.cn/anti.s',\n                song_id, note='Download %s url info' % file_format['format'],\n                query=query, headers=self.geo_verification_headers(),\n            )\n\n            if song_url == 'IPDeny' and not tolerate_ip_deny:\n                raise ExtractorError('This song is blocked in this region', expected=True)\n\n            if song_url.startswith('http://') or song_url.startswith('https://'):\n                formats.append({\n                    'url': song_url,\n                    'format_id': file_format['format'],\n                    'format': file_format['format'],\n                    'preference': file_format['preference'],\n                    'abr': file_format.get('abr'),\n                })\n\n        return formats\n\n\nclass KuwoIE(KuwoBaseIE):\n    IE_NAME = 'kuwo:song'\n    IE_DESC = '\u9177\u6211\u97f3\u4e50'\n    _VALID_URL = r'https?://(?:www\\.)?kuwo\\.cn/yinyue/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.kuwo.cn/yinyue/635632/',\n        'info_dict': {\n            'id': '635632',\n            'ext': 'ape',\n            'title': '\u7231\u6211\u522b\u8d70',\n            'creator': '\u5f20\u9707\u5cb3',\n            'upload_date': '20080122',\n            'description': 'md5:ed13f58e3c3bf3f7fd9fbc4e5a7aa75c'\n        },\n        'skip': 'this song has been offline because of copyright issues',\n    }, {\n        'url': 'http://www.kuwo.cn/yinyue/6446136/',\n        'info_dict': {\n            'id': '6446136',\n            'ext': 'mp3',\n            'title': '\u5fc3',\n            'description': 'md5:5d0e947b242c35dc0eb1d2fce9fbf02c',\n            'creator': 'IU',\n            'upload_date': '20150518',\n        },\n        'params': {\n            'format': 'mp3-320',\n        },\n    }, {\n        'url': 'http://www.kuwo.cn/yinyue/3197154?catalog=yueku2016',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        song_id = self._match_id(url)\n        webpage, urlh = self._download_webpage_handle(\n            url, song_id, note='Download song detail info',\n            errnote='Unable to get song detail info')\n        if song_id not in urlh.geturl() or '\u5bf9\u4e0d\u8d77\uff0c\u8be5\u6b4c\u66f2\u7531\u4e8e\u7248\u6743\u95ee\u9898\u5df2\u88ab\u4e0b\u7ebf\uff0c\u5c06\u8fd4\u56de\u7f51\u7ad9\u9996\u9875' in webpage:\n            raise ExtractorError('this song has been offline because of copyright issues', expected=True)\n\n        song_name = self._html_search_regex(\n            r'<p[^>]+id=\"lrcName\">([^<]+)</p>', webpage, 'song name')\n        singer_name = remove_start(self._html_search_regex(\n            r'<a[^>]+href=\"http://www\\.kuwo\\.cn/artist/content\\?name=([^\"]+)\">',\n            webpage, 'singer name', fatal=False), '\u6b4c\u624b')\n        lrc_content = clean_html(get_element_by_id('lrcContent', webpage))\n        if lrc_content == '\u6682\u65e0':     # indicates no lyrics\n            lrc_content = None\n\n        formats = self._get_formats(song_id)\n        self._sort_formats(formats)\n\n        album_id = self._html_search_regex(\n            r'<a[^>]+href=\"http://www\\.kuwo\\.cn/album/(\\d+)/\"',\n            webpage, 'album id', fatal=False)\n\n        publish_time = None\n        if album_id is not None:\n            album_info_page = self._download_webpage(\n                'http://www.kuwo.cn/album/%s/' % album_id, song_id,\n                note='Download album detail info',\n                errnote='Unable to get album detail info')\n\n            publish_time = self._html_search_regex(\n                r'\u53d1\u884c\u65f6\u95f4\uff1a(\\d{4}-\\d{2}-\\d{2})', album_info_page,\n                'publish time', fatal=False)\n            if publish_time:\n                publish_time = publish_time.replace('-', '')\n\n        return {\n            'id': song_id,\n            'title': song_name,\n            'creator': singer_name,\n            'upload_date': publish_time,\n            'description': lrc_content,\n            'formats': formats,\n        }\n\n\nclass KuwoAlbumIE(InfoExtractor):\n    IE_NAME = 'kuwo:album'\n    IE_DESC = '\u9177\u6211\u97f3\u4e50 - \u4e13\u8f91'\n    _VALID_URL = r'https?://(?:www\\.)?kuwo\\.cn/album/(?P<id>\\d+?)/'\n    _TEST = {\n        'url': 'http://www.kuwo.cn/album/502294/',\n        'info_dict': {\n            'id': '502294',\n            'title': 'Made\\xa0Series\\xa0\u300aM\u300b',\n            'description': 'md5:d463f0d8a0ff3c3ea3d6ed7452a9483f',\n        },\n        'playlist_count': 2,\n    }\n\n    def _real_extract(self, url):\n        album_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            url, album_id, note='Download album info',\n            errnote='Unable to get album info')\n\n        album_name = self._html_search_regex(\n            r'<div[^>]+class=\"comm\"[^<]+<h1[^>]+title=\"([^\"]+)\"', webpage,\n            'album name')\n        album_intro = remove_start(\n            clean_html(get_element_by_id('intro', webpage)),\n            '%s\u7b80\u4ecb\uff1a' % album_name)\n\n        entries = [\n            self.url_result(song_url, 'Kuwo') for song_url in re.findall(\n                r'<p[^>]+class=\"listen\"><a[^>]+href=\"(http://www\\.kuwo\\.cn/yinyue/\\d+/)\"',\n                webpage)\n        ]\n        return self.playlist_result(entries, album_id, album_name, album_intro)\n\n\nclass KuwoChartIE(InfoExtractor):\n    IE_NAME = 'kuwo:chart'\n    IE_DESC = '\u9177\u6211\u97f3\u4e50 - \u6392\u884c\u699c'\n    _VALID_URL = r'https?://yinyue\\.kuwo\\.cn/billboard_(?P<id>[^.]+).htm'\n    _TEST = {\n        'url': 'http://yinyue.kuwo.cn/billboard_\u9999\u6e2f\u4e2d\u6587\u9f99\u864e\u699c.htm',\n        'info_dict': {\n            'id': '\u9999\u6e2f\u4e2d\u6587\u9f99\u864e\u699c',\n        },\n        'playlist_mincount': 7,\n    }\n\n    def _real_extract(self, url):\n        chart_id = self._match_id(url)\n        webpage = self._download_webpage(\n            url, chart_id, note='Download chart info',\n            errnote='Unable to get chart info')\n\n        entries = [\n            self.url_result(song_url, 'Kuwo') for song_url in re.findall(\n                r'<a[^>]+href=\"(http://www\\.kuwo\\.cn/yinyue/\\d+)', webpage)\n        ]\n        return self.playlist_result(entries, chart_id)\n\n\nclass KuwoSingerIE(InfoExtractor):\n    IE_NAME = 'kuwo:singer'\n    IE_DESC = '\u9177\u6211\u97f3\u4e50 - \u6b4c\u624b'\n    _VALID_URL = r'https?://(?:www\\.)?kuwo\\.cn/mingxing/(?P<id>[^/]+)'\n    _TESTS = [{\n        'url': 'http://www.kuwo.cn/mingxing/bruno+mars/',\n        'info_dict': {\n            'id': 'bruno+mars',\n            'title': 'Bruno\\xa0Mars',\n        },\n        'playlist_mincount': 329,\n    }, {\n        'url': 'http://www.kuwo.cn/mingxing/Ali/music.htm',\n        'info_dict': {\n            'id': 'Ali',\n            'title': 'Ali',\n        },\n        'playlist_mincount': 95,\n        'skip': 'Regularly stalls travis build',  # See https://travis-ci.org/rg3/youtube-dl/jobs/78878540\n    }]\n\n    PAGE_SIZE = 15\n\n    def _real_extract(self, url):\n        singer_id = self._match_id(url)\n        webpage = self._download_webpage(\n            url, singer_id, note='Download singer info',\n            errnote='Unable to get singer info')\n\n        singer_name = self._html_search_regex(\n            r'<h1>([^<]+)</h1>', webpage, 'singer name')\n\n        artist_id = self._html_search_regex(\n            r'data-artistid=\"(\\d+)\"', webpage, 'artist id')\n\n        page_count = int(self._html_search_regex(\n            r'data-page=\"(\\d+)\"', webpage, 'page count'))\n\n        def page_func(page_num):\n            webpage = self._download_webpage(\n                'http://www.kuwo.cn/artist/contentMusicsAjax',\n                singer_id, note='Download song list page #%d' % (page_num + 1),\n                errnote='Unable to get song list page #%d' % (page_num + 1),\n                query={'artistId': artist_id, 'pn': page_num, 'rn': self.PAGE_SIZE})\n\n            return [\n                self.url_result(compat_urlparse.urljoin(url, song_url), 'Kuwo')\n                for song_url in re.findall(\n                    r'<div[^>]+class=\"name\"><a[^>]+href=\"(/yinyue/\\d+)',\n                    webpage)\n            ]\n\n        entries = InAdvancePagedList(page_func, page_count, self.PAGE_SIZE)\n\n        return self.playlist_result(entries, singer_id, singer_name)\n\n\nclass KuwoCategoryIE(InfoExtractor):\n    IE_NAME = 'kuwo:category'\n    IE_DESC = '\u9177\u6211\u97f3\u4e50 - \u5206\u7c7b'\n    _VALID_URL = r'https?://yinyue\\.kuwo\\.cn/yy/cinfo_(?P<id>\\d+?).htm'\n    _TEST = {\n        'url': 'http://yinyue.kuwo.cn/yy/cinfo_86375.htm',\n        'info_dict': {\n            'id': '86375',\n            'title': '\u516b\u5341\u5e74\u4ee3\u7cbe\u9009',\n            'description': '\u8fd9\u4e9b\u90fd\u662f\u5c5e\u4e8e\u516b\u5341\u5e74\u4ee3\u7684\u56de\u5fc6\uff01',\n        },\n        'playlist_mincount': 24,\n    }\n\n    def _real_extract(self, url):\n        category_id = self._match_id(url)\n        webpage = self._download_webpage(\n            url, category_id, note='Download category info',\n            errnote='Unable to get category info')\n\n        category_name = self._html_search_regex(\n            r'<h1[^>]+title=\"([^<>]+?)\">[^<>]+?</h1>', webpage, 'category name')\n\n        category_desc = remove_start(\n            get_element_by_id('intro', webpage).strip(),\n            '%s\u7b80\u4ecb\uff1a' % category_name)\n        if category_desc == '\u6682\u65e0':\n            category_desc = None\n\n        jsonm = self._parse_json(self._html_search_regex(\n            r'var\\s+jsonm\\s*=\\s*([^;]+);', webpage, 'category songs'), category_id)\n\n        entries = [\n            self.url_result('http://www.kuwo.cn/yinyue/%s/' % song['musicrid'], 'Kuwo')\n            for song in jsonm['musiclist']\n        ]\n        return self.playlist_result(entries, category_id, category_name, category_desc)\n\n\nclass KuwoMvIE(KuwoBaseIE):\n    IE_NAME = 'kuwo:mv'\n    IE_DESC = '\u9177\u6211\u97f3\u4e50 - MV'\n    _VALID_URL = r'https?://(?:www\\.)?kuwo\\.cn/mv/(?P<id>\\d+?)/'\n    _TEST = {\n        'url': 'http://www.kuwo.cn/mv/6480076/',\n        'info_dict': {\n            'id': '6480076',\n            'ext': 'mp4',\n            'title': 'My HouseMV',\n            'creator': '2PM',\n        },\n        # In this video, music URLs (anti.s) are blocked outside China and\n        # USA, while the MV URL (mvurl) is available globally, so force the MV\n        # URL for consistent results in different countries\n        'params': {\n            'format': 'mv',\n        },\n    }\n    _FORMATS = KuwoBaseIE._FORMATS + [\n        {'format': 'mkv', 'ext': 'mkv', 'preference': 250},\n        {'format': 'mp4', 'ext': 'mp4', 'preference': 200},\n    ]\n\n    def _real_extract(self, url):\n        song_id = self._match_id(url)\n        webpage = self._download_webpage(\n            url, song_id, note='Download mv detail info: %s' % song_id,\n            errnote='Unable to get mv detail info: %s' % song_id)\n\n        mobj = re.search(\n            r'<h1[^>]+title=\"(?P<song>[^\"]+)\">[^<]+<span[^>]+title=\"(?P<singer>[^\"]+)\"',\n            webpage)\n        if mobj:\n            song_name = mobj.group('song')\n            singer_name = mobj.group('singer')\n        else:\n            raise ExtractorError('Unable to find song or singer names')\n\n        formats = self._get_formats(song_id, tolerate_ip_deny=True)\n\n        mv_url = self._download_webpage(\n            'http://www.kuwo.cn/yy/st/mvurl?rid=MUSIC_%s' % song_id,\n            song_id, note='Download %s MV URL' % song_id)\n        formats.append({\n            'url': mv_url,\n            'format_id': 'mv',\n        })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': song_id,\n            'title': song_name,\n            'creator': singer_name,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "kuwo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/kuwo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}