{"author": "benoitc", "code": "\n|\n You will get a result.txt file, you can work with the file (update, remove, ...)\n\n Install\n =======\n pip install validate_email pyDNS\n\nfrom __future__ import print_function\nimport sys\n\nfrom validate_email import validate_email\nfrom email.utils import parseaddr\nimport DNS.Base\n\naddresses = set()\nbad_addresses = set()\ncollection = []\n\nlines = list(reversed(sys.stdin.readlines()))\n\nfor author in map(str.strip, lines):\n    realname, email_address = parseaddr(author)\n\n    if email_address not in addresses:\n        if email_address in bad_addresses:\n            continue\n        else:\n            try:\n                value = validate_email(email_address)\n                if value:\n                    addresses.add(email_address)\n                    collection.append(author)\n                else:\n                    bad_addresses.add(email_address)\n            except DNS.Base.TimeoutError:\n                bad_addresses.add(email_address)\n\n\nwith open('result.txt', 'w') as output:\n    output.write('\\n'.join(collection))\n", "comments": "   usr bin env python    usage  git log   format     ae     python update thanks py    you get result txt file  work file (update  remove     )       install               pip install validate email pydns    ", "content": "#!/usr/bin/env python\n# Usage: git log --format=\"%an <%ae>\" | python update_thanks.py\n# You will get a result.txt file, you can work with the file (update, remove, ...)\n#\n# Install\n# =======\n# pip install validate_email pyDNS\n#\nfrom __future__ import print_function\nimport sys\n\nfrom validate_email import validate_email\nfrom email.utils import parseaddr\nimport DNS.Base\n\naddresses = set()\nbad_addresses = set()\ncollection = []\n\nlines = list(reversed(sys.stdin.readlines()))\n\nfor author in map(str.strip, lines):\n    realname, email_address = parseaddr(author)\n\n    if email_address not in addresses:\n        if email_address in bad_addresses:\n            continue\n        else:\n            try:\n                value = validate_email(email_address)\n                if value:\n                    addresses.add(email_address)\n                    collection.append(author)\n                else:\n                    bad_addresses.add(email_address)\n            except DNS.Base.TimeoutError:\n                bad_addresses.add(email_address)\n\n\nwith open('result.txt', 'w') as output:\n    output.write('\\n'.join(collection))\n", "description": "gunicorn 'Green Unicorn' is a WSGI HTTP Server for UNIX, fast clients and sleepy applications.", "file_name": "update_thanks.py", "id": "f4c7e218c6f5df09bdac9f353c4e93bf", "language": "Python", "project_name": "gunicorn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/benoitc-gunicorn/benoitc-gunicorn-d1f5268/scripts/update_thanks.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:27:00Z", "url": "https://github.com/benoitc/gunicorn", "wiki": true}