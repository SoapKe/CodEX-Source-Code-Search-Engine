{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_parse_qs\nfrom ..utils import ExtractorError\n\n\nclass BokeCCBaseIE(InfoExtractor):\n    def _extract_bokecc_formats(self, webpage, video_id, format_id=None):\n        player_params_str = self._html_search_regex(\n            r'<(?:script|embed)[^>]+src=\"http://p\\.bokecc\\.com/player\\?([^\"]+)',\n            webpage, 'player params')\n\n        player_params = compat_parse_qs(player_params_str)\n\n        info_xml = self._download_xml(\n            'http://p.bokecc.com/servlet/playinfo?uid=%s&vid=%s&m=1' % (\n                player_params['siteid'][0], player_params['vid'][0]), video_id)\n\n        formats = [{\n            'format_id': format_id,\n            'url': quality.find('./copy').attrib['playurl'],\n            'preference': int(quality.attrib['value']),\n        } for quality in info_xml.findall('./video/quality')]\n\n        self._sort_formats(formats)\n\n        return formats\n\n\nclass BokeCCIE(BokeCCBaseIE):\n    _IE_DESC = 'CC\u89c6\u9891'\n    _VALID_URL = r'https?://union\\.bokecc\\.com/playvideo\\.bo\\?(?P<query>.*)'\n\n    _TESTS = [{\n        'url': 'http://union.bokecc.com/playvideo.bo?vid=E44D40C15E65EA30&uid=CD0C5D3C8614B28B',\n        'info_dict': {\n            'id': 'CD0C5D3C8614B28B_E44D40C15E65EA30',\n            'ext': 'flv',\n            'title': 'BokeCC Video',\n        },\n    }]\n\n    def _real_extract(self, url):\n        qs = compat_parse_qs(re.match(self._VALID_URL, url).group('query'))\n        if not qs.get('vid') or not qs.get('uid'):\n            raise ExtractorError('Invalid URL', expected=True)\n\n        video_id = '%s_%s' % (qs['uid'][0], qs['vid'][0])\n\n        webpage = self._download_webpage(url, video_id)\n\n        return {\n            'id': video_id,\n            'title': 'BokeCC Video',  \n            'formats': self._extract_bokecc_formats(webpage, video_id),\n        }\n", "comments": "# coding: utf-8\n# no title provided in the webpage\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_parse_qs\nfrom ..utils import ExtractorError\n\n\nclass BokeCCBaseIE(InfoExtractor):\n    def _extract_bokecc_formats(self, webpage, video_id, format_id=None):\n        player_params_str = self._html_search_regex(\n            r'<(?:script|embed)[^>]+src=\"http://p\\.bokecc\\.com/player\\?([^\"]+)',\n            webpage, 'player params')\n\n        player_params = compat_parse_qs(player_params_str)\n\n        info_xml = self._download_xml(\n            'http://p.bokecc.com/servlet/playinfo?uid=%s&vid=%s&m=1' % (\n                player_params['siteid'][0], player_params['vid'][0]), video_id)\n\n        formats = [{\n            'format_id': format_id,\n            'url': quality.find('./copy').attrib['playurl'],\n            'preference': int(quality.attrib['value']),\n        } for quality in info_xml.findall('./video/quality')]\n\n        self._sort_formats(formats)\n\n        return formats\n\n\nclass BokeCCIE(BokeCCBaseIE):\n    _IE_DESC = 'CC\u89c6\u9891'\n    _VALID_URL = r'https?://union\\.bokecc\\.com/playvideo\\.bo\\?(?P<query>.*)'\n\n    _TESTS = [{\n        'url': 'http://union.bokecc.com/playvideo.bo?vid=E44D40C15E65EA30&uid=CD0C5D3C8614B28B',\n        'info_dict': {\n            'id': 'CD0C5D3C8614B28B_E44D40C15E65EA30',\n            'ext': 'flv',\n            'title': 'BokeCC Video',\n        },\n    }]\n\n    def _real_extract(self, url):\n        qs = compat_parse_qs(re.match(self._VALID_URL, url).group('query'))\n        if not qs.get('vid') or not qs.get('uid'):\n            raise ExtractorError('Invalid URL', expected=True)\n\n        video_id = '%s_%s' % (qs['uid'][0], qs['vid'][0])\n\n        webpage = self._download_webpage(url, video_id)\n\n        return {\n            'id': video_id,\n            'title': 'BokeCC Video',  # no title provided in the webpage\n            'formats': self._extract_bokecc_formats(webpage, video_id),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "bokecc.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/bokecc.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}