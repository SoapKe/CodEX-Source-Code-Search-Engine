{"author": "tflearn", "code": "# -*- coding: utf-8 -*-\nfrom __future__ import print_function\n\nimport numpy as np\nimport tflearn\n\n\nfrom tflearn.datasets import titanic\ntitanic.download_dataset('titanic_dataset.csv')\n\n\nfrom tflearn.data_utils import load_csv\ndata, labels = load_csv('titanic_dataset.csv', target_column=0,\n                        categorical_labels=True, n_classes=2)\n\ndef preprocess(passengers, columns_to_delete):\n    \n    for column_to_delete in sorted(columns_to_delete, reverse=True):\n        [passenger.pop(column_to_delete) for passenger in passengers]\n    for i in range(len(passengers)):\n        # Converting 'sex' field to float (id is 1 after removing labels column)\n        passengers[i][1] = 1. if passengers[i][1] == 'female' else 0.\n    return np.array(passengers, dtype=np.float32)\n\n# Ignore 'name' and 'ticket' columns (id 1 & 6 of data array)\nto_ignore=[1, 6]\n\n\ndata = preprocess(data, to_ignore)\n\n\nnet = tflearn.input_data(shape=[None, 6])\nnet = tflearn.fully_connected(net, 32)\nnet = tflearn.fully_connected(net, 32)\nnet = tflearn.fully_connected(net, 2, activation='softmax')\nnet = tflearn.regression(net)\n\n\nmodel = tflearn.DNN(net)\n# Start training (apply gradient descent algorithm)\nmodel.fit(data, labels, n_epoch=10, batch_size=16, show_metric=True)\n\n\ndicaprio = [3, 'Jack Dawson', 'male', 19, 0, 0, 'N/A', 5.0000]\nwinslet = [1, 'Rose DeWitt Bukater', 'female', 17, 1, 2, 'N/A', 100.0000]\n\ndicaprio, winslet = preprocess([dicaprio, winslet], to_ignore)\n# Predict surviving chances (class 1 results)\npred = model.predict([dicaprio, winslet])\nprint(\"DiCaprio Surviving Rate:\", pred[0][1])\nprint(\"Winslet Surviving Rate:\", pred[1][1])\n", "comments": "      coding  utf 8        download titanic dataset    load csv file  indicate first column represents labels    sort descending id delete columns    converting  sex  field float (id 1 removing labels column)    ignore  name   ticket  columns (id 1   6 data array)    preprocess data    build neural network    define model    start training (apply gradient descent algorithm)    let create data dicaprio winslet    preprocess data    predict surviving chances (class 1 results) ", "content": "# -*- coding: utf-8 -*-\nfrom __future__ import print_function\n\nimport numpy as np\nimport tflearn\n\n# Download the Titanic dataset\nfrom tflearn.datasets import titanic\ntitanic.download_dataset('titanic_dataset.csv')\n\n# Load CSV file, indicate that the first column represents labels\nfrom tflearn.data_utils import load_csv\ndata, labels = load_csv('titanic_dataset.csv', target_column=0,\n                        categorical_labels=True, n_classes=2)\n\ndef preprocess(passengers, columns_to_delete):\n    # Sort by descending id and delete columns\n    for column_to_delete in sorted(columns_to_delete, reverse=True):\n        [passenger.pop(column_to_delete) for passenger in passengers]\n    for i in range(len(passengers)):\n        # Converting 'sex' field to float (id is 1 after removing labels column)\n        passengers[i][1] = 1. if passengers[i][1] == 'female' else 0.\n    return np.array(passengers, dtype=np.float32)\n\n# Ignore 'name' and 'ticket' columns (id 1 & 6 of data array)\nto_ignore=[1, 6]\n\n# Preprocess data\ndata = preprocess(data, to_ignore)\n\n# Build neural network\nnet = tflearn.input_data(shape=[None, 6])\nnet = tflearn.fully_connected(net, 32)\nnet = tflearn.fully_connected(net, 32)\nnet = tflearn.fully_connected(net, 2, activation='softmax')\nnet = tflearn.regression(net)\n\n# Define model\nmodel = tflearn.DNN(net)\n# Start training (apply gradient descent algorithm)\nmodel.fit(data, labels, n_epoch=10, batch_size=16, show_metric=True)\n\n# Let's create some data for DiCaprio and Winslet\ndicaprio = [3, 'Jack Dawson', 'male', 19, 0, 0, 'N/A', 5.0000]\nwinslet = [1, 'Rose DeWitt Bukater', 'female', 17, 1, 2, 'N/A', 100.0000]\n# Preprocess data\ndicaprio, winslet = preprocess([dicaprio, winslet], to_ignore)\n# Predict surviving chances (class 1 results)\npred = model.predict([dicaprio, winslet])\nprint(\"DiCaprio Surviving Rate:\", pred[0][1])\nprint(\"Winslet Surviving Rate:\", pred[1][1])\n", "description": "Deep learning library featuring a higher-level API for TensorFlow.", "file_name": "quickstart.py", "id": "427fc3eee1661c9a3271e74006202754", "language": "Python", "project_name": "tflearn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tflearn-tflearn/tflearn-tflearn-70fb38a/tutorials/intro/quickstart.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:15:41Z", "url": "https://github.com/tflearn/tflearn", "wiki": true}