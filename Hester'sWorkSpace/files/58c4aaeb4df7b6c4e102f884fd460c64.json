{"author": "odoo", "code": "# -*- coding: utf-8 -*-\nimport unittest\nimport odoo\nfrom odoo import fields\nfrom odoo.addons.payment.tests.common import PaymentAcquirerCommon\nfrom odoo.tools import mute_logger\n\n\n@odoo.tests.common.at_install(False)\n@odoo.tests.common.post_install(True)\nclass StripeCommon(PaymentAcquirerCommon):\n\n    def setUp(self):\n        super(StripeCommon, self).setUp()\n        self.stripe = self.env.ref('payment.payment_acquirer_stripe')\n\n\n@odoo.tests.common.at_install(False)\n@odoo.tests.common.post_install(True)\nclass StripeTest(StripeCommon):\n\n    @unittest.skip(\"Stripe test disabled: We do not want to overload Stripe with runbot's requests\")\n    def test_10_stripe_s2s(self):\n        self.assertEqual(self.stripe.environment, 'test', 'test without test environment')\n\n        \n        self.stripe.write({\n            'stripe_secret_key': 'sk_test_bldAlqh1U24L5HtRF9mBFpK7',\n            'stripe_publishable_key': 'pk_test_0TKSyYSZS9AcS4keZ2cxQQCW',\n        })\n\n        \n        payment_token = self.env['payment.token'].create({\n            'acquirer_id': self.stripe.id,\n            'partner_id': self.buyer_id,\n            'cc_number': '4242424242424242',\n            'cc_expiry': '02 / 26',\n            'cc_brand': 'visa',\n            'cvc': '111',\n            'cc_holder_name': 'Johndoe',\n        })\n\n        \n        tx = self.env['payment.transaction'].create({\n            'reference': 'test_ref_%s' % fields.date.today(),\n            'currency_id': self.currency_euro.id,\n            'acquirer_id': self.stripe.id,\n            'partner_id': self.buyer_id,\n            'payment_token_id': payment_token.id,\n            'type': 'server2server',\n            'amount': 115.0\n        })\n        tx.stripe_s2s_do_transaction()\n\n        \n        self.assertEqual(tx.state, 'done', 'Stripe: Transcation has been discarded.')\n\n    @unittest.skip(\"Stripe test disabled: We do not want to overload Stripe with runbot's requests\")\n    def test_20_stripe_form_render(self):\n        self.assertEqual(self.stripe.environment, 'test', 'test without test environment')\n\n        \n        \n        \n        form_values = {\n            'amount': 320.0,\n            'currency': 'EUR',\n            'address_line1': 'Huge Street 2/543',\n            'address_city': 'Sin City',\n            'address_country': 'Belgium',\n            'email': 'norbert.buyer@example.com',\n            'address_zip': '1000',\n            'name': 'Norbert Buyer',\n            'phone': '0032 12 34 56 78'\n        }\n\n        \n        res = self.stripe.render('SO404', 320.0, self.currency_euro.id, values=self.buyer_values)\n        post_url = \"https://checkout.stripe.com/checkout.js\"\n        email = \"norbert.buyer@example.com\"\n        \n        if \"https://checkout.stripe.com/checkout.js\" in res[0]:\n            self.assertEqual(post_url, 'https://checkout.stripe.com/checkout.js', 'Stripe: wrong form POST url')\n        \n        if email in res[0]:\n            self.assertEqual(\n                email, form_values.get('email'),\n                'Stripe: wrong value for input %s: received %s instead of %s' % (email, email, form_values.get('email'))\n            )\n\n    @unittest.skip(\"Stripe test disabled: We do not want to overload Stripe with runbot's requests\")\n    def test_30_stripe_form_management(self):\n        self.assertEqual(self.stripe.environment, 'test', 'test without test environment')\n\n        \n        stripe_post_data = {\n            u'amount': 4700,\n            u'amount_refunded': 0,\n            u'application_fee': None,\n            u'balance_transaction': u'txn_172xfnGMfVJxozLwssrsQZyT',\n            u'captured': True,\n            u'created': 1446529775,\n            u'currency': u'eur',\n            u'customer': None,\n            u'description': None,\n            u'destination': None,\n            u'dispute': None,\n            u'failure_code': None,\n            u'failure_message': None,\n            u'fraud_details': {},\n            u'id': u'ch_172xfnGMfVJxozLwEjSfpfxD',\n            u'invoice': None,\n            u'livemode': False,\n            u'metadata': {u'reference': u'SO100'},\n            u'object': u'charge',\n            u'paid': True,\n            u'receipt_email': None,\n            u'receipt_number': None,\n            u'refunded': False,\n            u'refunds': {u'data': [],\n                         u'has_more': False,\n                         u'object': u'list',\n                         u'total_count': 0,\n                         u'url': u'/v1/charges/ch_172xfnGMfVJxozLwEjSfpfxD/refunds'},\n            u'shipping': None,\n            u'source': {u'address_city': None,\n                        u'address_country': None,\n                        u'address_line1': None,\n                        u'address_line1_check': None,\n                        u'address_line2': None,\n                        u'address_state': None,\n                        u'address_zip': None,\n                        u'address_zip_check': None,\n                        u'brand': u'Visa',\n                        u'country': u'US',\n                        u'customer': None,\n                        u'cvc_check': u'pass',\n                        u'dynamic_last4': None,\n                        u'exp_month': 2,\n                        u'exp_year': 2022,\n                        u'fingerprint': u'9tJA9bUEuvEb3Ell',\n                        u'funding': u'credit',\n                        u'id': u'card_172xfjGMfVJxozLw1QO6gYNM',\n                        u'last4': u'4242',\n                        u'metadata': {},\n                        u'name': u'norbert.buyer@example.com',\n                        u'object': u'card',\n                        u'tokenization_method': None},\n            u'statement_descriptor': None,\n            u'status': u'succeeded'}\n\n        tx = self.env['payment.transaction'].create({\n            'amount': 4700,\n            'acquirer_id': self.stripe.id,\n            'currency_id': self.currency_euro.id,\n            'reference': 'SO100',\n            'partner_name': 'Norbert Buyer',\n            'partner_country_id': self.country_france.id})\n\n        \n        tx.form_feedback(stripe_post_data, 'stripe')\n        self.assertEqual(tx.state, 'done', 'Stripe: validation did not put tx into done state')\n        self.assertEqual(tx.acquirer_reference, stripe_post_data.get('id'), 'Stripe: validation did not update tx id')\n        \n        tx.write({'state': 'draft', 'date_validate': False, 'acquirer_reference': False})\n        \n        stripe_post_data['status'] = 'error'\n        stripe_post_data.update({u'error': {u'message': u\"Your card's expiration year is invalid.\", u'code': u'invalid_expiry_year', u'type': u'card_error', u'param': u'exp_year'}})\n        with mute_logger('odoo.addons.payment_stripe.models.payment'):\n            tx.form_feedback(stripe_post_data, 'stripe')\n        \n        self.assertEqual(tx.state, 'error', 'Stipe: erroneous validation did not put tx into error state')\n", "comments": "      coding  utf 8        add stripe credentials    create payment meethod stripe    create transaction    check state                                                test  button direct rendering                                                render button    check form result    generated received    typical data posted stripe client successfully paid    validate    reset tx    simulate error    check state ", "content": "# -*- coding: utf-8 -*-\nimport unittest\nimport odoo\nfrom odoo import fields\nfrom odoo.addons.payment.tests.common import PaymentAcquirerCommon\nfrom odoo.tools import mute_logger\n\n\n@odoo.tests.common.at_install(False)\n@odoo.tests.common.post_install(True)\nclass StripeCommon(PaymentAcquirerCommon):\n\n    def setUp(self):\n        super(StripeCommon, self).setUp()\n        self.stripe = self.env.ref('payment.payment_acquirer_stripe')\n\n\n@odoo.tests.common.at_install(False)\n@odoo.tests.common.post_install(True)\nclass StripeTest(StripeCommon):\n\n    @unittest.skip(\"Stripe test disabled: We do not want to overload Stripe with runbot's requests\")\n    def test_10_stripe_s2s(self):\n        self.assertEqual(self.stripe.environment, 'test', 'test without test environment')\n\n        # Add Stripe credentials\n        self.stripe.write({\n            'stripe_secret_key': 'sk_test_bldAlqh1U24L5HtRF9mBFpK7',\n            'stripe_publishable_key': 'pk_test_0TKSyYSZS9AcS4keZ2cxQQCW',\n        })\n\n        # Create payment meethod for Stripe\n        payment_token = self.env['payment.token'].create({\n            'acquirer_id': self.stripe.id,\n            'partner_id': self.buyer_id,\n            'cc_number': '4242424242424242',\n            'cc_expiry': '02 / 26',\n            'cc_brand': 'visa',\n            'cvc': '111',\n            'cc_holder_name': 'Johndoe',\n        })\n\n        # Create transaction\n        tx = self.env['payment.transaction'].create({\n            'reference': 'test_ref_%s' % fields.date.today(),\n            'currency_id': self.currency_euro.id,\n            'acquirer_id': self.stripe.id,\n            'partner_id': self.buyer_id,\n            'payment_token_id': payment_token.id,\n            'type': 'server2server',\n            'amount': 115.0\n        })\n        tx.stripe_s2s_do_transaction()\n\n        # Check state\n        self.assertEqual(tx.state, 'done', 'Stripe: Transcation has been discarded.')\n\n    @unittest.skip(\"Stripe test disabled: We do not want to overload Stripe with runbot's requests\")\n    def test_20_stripe_form_render(self):\n        self.assertEqual(self.stripe.environment, 'test', 'test without test environment')\n\n        # ----------------------------------------\n        # Test: button direct rendering\n        # ----------------------------------------\n        form_values = {\n            'amount': 320.0,\n            'currency': 'EUR',\n            'address_line1': 'Huge Street 2/543',\n            'address_city': 'Sin City',\n            'address_country': 'Belgium',\n            'email': 'norbert.buyer@example.com',\n            'address_zip': '1000',\n            'name': 'Norbert Buyer',\n            'phone': '0032 12 34 56 78'\n        }\n\n        # render the button\n        res = self.stripe.render('SO404', 320.0, self.currency_euro.id, values=self.buyer_values)\n        post_url = \"https://checkout.stripe.com/checkout.js\"\n        email = \"norbert.buyer@example.com\"\n        # check form result\n        if \"https://checkout.stripe.com/checkout.js\" in res[0]:\n            self.assertEqual(post_url, 'https://checkout.stripe.com/checkout.js', 'Stripe: wrong form POST url')\n        # Generated and received\n        if email in res[0]:\n            self.assertEqual(\n                email, form_values.get('email'),\n                'Stripe: wrong value for input %s: received %s instead of %s' % (email, email, form_values.get('email'))\n            )\n\n    @unittest.skip(\"Stripe test disabled: We do not want to overload Stripe with runbot's requests\")\n    def test_30_stripe_form_management(self):\n        self.assertEqual(self.stripe.environment, 'test', 'test without test environment')\n\n        # typical data posted by Stripe after client has successfully paid\n        stripe_post_data = {\n            u'amount': 4700,\n            u'amount_refunded': 0,\n            u'application_fee': None,\n            u'balance_transaction': u'txn_172xfnGMfVJxozLwssrsQZyT',\n            u'captured': True,\n            u'created': 1446529775,\n            u'currency': u'eur',\n            u'customer': None,\n            u'description': None,\n            u'destination': None,\n            u'dispute': None,\n            u'failure_code': None,\n            u'failure_message': None,\n            u'fraud_details': {},\n            u'id': u'ch_172xfnGMfVJxozLwEjSfpfxD',\n            u'invoice': None,\n            u'livemode': False,\n            u'metadata': {u'reference': u'SO100'},\n            u'object': u'charge',\n            u'paid': True,\n            u'receipt_email': None,\n            u'receipt_number': None,\n            u'refunded': False,\n            u'refunds': {u'data': [],\n                         u'has_more': False,\n                         u'object': u'list',\n                         u'total_count': 0,\n                         u'url': u'/v1/charges/ch_172xfnGMfVJxozLwEjSfpfxD/refunds'},\n            u'shipping': None,\n            u'source': {u'address_city': None,\n                        u'address_country': None,\n                        u'address_line1': None,\n                        u'address_line1_check': None,\n                        u'address_line2': None,\n                        u'address_state': None,\n                        u'address_zip': None,\n                        u'address_zip_check': None,\n                        u'brand': u'Visa',\n                        u'country': u'US',\n                        u'customer': None,\n                        u'cvc_check': u'pass',\n                        u'dynamic_last4': None,\n                        u'exp_month': 2,\n                        u'exp_year': 2022,\n                        u'fingerprint': u'9tJA9bUEuvEb3Ell',\n                        u'funding': u'credit',\n                        u'id': u'card_172xfjGMfVJxozLw1QO6gYNM',\n                        u'last4': u'4242',\n                        u'metadata': {},\n                        u'name': u'norbert.buyer@example.com',\n                        u'object': u'card',\n                        u'tokenization_method': None},\n            u'statement_descriptor': None,\n            u'status': u'succeeded'}\n\n        tx = self.env['payment.transaction'].create({\n            'amount': 4700,\n            'acquirer_id': self.stripe.id,\n            'currency_id': self.currency_euro.id,\n            'reference': 'SO100',\n            'partner_name': 'Norbert Buyer',\n            'partner_country_id': self.country_france.id})\n\n        # validate it\n        tx.form_feedback(stripe_post_data, 'stripe')\n        self.assertEqual(tx.state, 'done', 'Stripe: validation did not put tx into done state')\n        self.assertEqual(tx.acquirer_reference, stripe_post_data.get('id'), 'Stripe: validation did not update tx id')\n        # reset tx\n        tx.write({'state': 'draft', 'date_validate': False, 'acquirer_reference': False})\n        # simulate an error\n        stripe_post_data['status'] = 'error'\n        stripe_post_data.update({u'error': {u'message': u\"Your card's expiration year is invalid.\", u'code': u'invalid_expiry_year', u'type': u'card_error', u'param': u'exp_year'}})\n        with mute_logger('odoo.addons.payment_stripe.models.payment'):\n            tx.form_feedback(stripe_post_data, 'stripe')\n        # check state\n        self.assertEqual(tx.state, 'error', 'Stipe: erroneous validation did not put tx into error state')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_stripe.py", "id": "58c4aaeb4df7b6c4e102f884fd460c64", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/payment_stripe/tests/test_stripe.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}