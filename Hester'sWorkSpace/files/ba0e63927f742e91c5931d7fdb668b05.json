{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    xpath_text,\n)\n\n\nclass WebcasterIE(InfoExtractor):\n    _VALID_URL = r'https?://bl\\.webcaster\\.pro/(?:quote|media)/start/free_(?P<id>[^/]+)'\n    _TESTS = [{\n        \n        'url': 'http://bl.webcaster.pro/quote/start/free_c8cefd240aa593681c8d068cff59f407_hd/q393859/eb173f99dd5f558674dae55f4ba6806d/1480289104?sr%3D105%26fa%3D1%26type_id%3D18',\n        'md5': '0c162f67443f30916ff1c89425dcd4cd',\n        'info_dict': {\n            'id': 'c8cefd240aa593681c8d068cff59f407_hd',\n            'ext': 'mp4',\n            'title': '\u0421\u0438\u0431\u0438\u0440\u044c - \u041d\u0435\u0444\u0442\u0435\u0445\u0438\u043c\u0438\u043a. \u041b\u0443\u0447\u0448\u0438\u0435 \u043c\u043e\u043c\u0435\u043d\u0442\u044b \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n    }, {\n        'url': 'http://bl.webcaster.pro/media/start/free_6246c7a4453ac4c42b4398f840d13100_hd/2_2991109016/e8d0d82587ef435480118f9f9c41db41/4635726126',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_xml(url, video_id)\n\n        title = xpath_text(video, './/event_name', 'event name', fatal=True)\n\n        def make_id(parts, separator):\n            return separator.join(filter(None, parts))\n\n        formats = []\n        for format_id in (None, 'noise'):\n            track_tag = make_id(('track', format_id), '_')\n            for track in video.findall('.//iphone/%s' % track_tag):\n                track_url = track.text\n                if not track_url:\n                    continue\n                if determine_ext(track_url) == 'm3u8':\n                    m3u8_formats = self._extract_m3u8_formats(\n                        track_url, video_id, 'mp4',\n                        entry_protocol='m3u8_native',\n                        m3u8_id=make_id(('hls', format_id), '-'), fatal=False)\n                    for f in m3u8_formats:\n                        f.update({\n                            'source_preference': 0 if format_id == 'noise' else 1,\n                            'format_note': track.get('title'),\n                        })\n                    formats.extend(m3u8_formats)\n        self._sort_formats(formats)\n\n        thumbnail = xpath_text(video, './/image', 'thumbnail')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n\n\nclass WebcasterFeedIE(InfoExtractor):\n    _VALID_URL = r'https?://bl\\.webcaster\\.pro/feed/start/free_(?P<id>[^/]+)'\n    _TEST = {\n        'url': 'http://bl.webcaster.pro/feed/start/free_c8cefd240aa593681c8d068cff59f407_hd/q393859/eb173f99dd5f558674dae55f4ba6806d/1480289104',\n        'only_matching': True,\n    }\n\n    @staticmethod\n    def _extract_url(ie, webpage):\n        mobj = re.search(\n            r'<(?:object|a[^>]+class=[\"\\']webcaster-player[\"\\'])[^>]+data(?:-config)?=([\"\\']).*?config=(?P<url>https?://bl\\.webcaster\\.pro/feed/start/free_.*?)(?:[?&]|\\1)',\n            webpage)\n        if mobj:\n            return mobj.group('url')\n        for secure in (True, False):\n            video_url = ie._og_search_video_url(\n                webpage, secure=secure, default=None)\n            if video_url:\n                mobj = re.search(\n                    r'config=(?P<url>https?://bl\\.webcaster\\.pro/feed/start/free_[^?&=]+)',\n                    video_url)\n                if mobj:\n                    return mobj.group('url')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        feed = self._download_xml(url, video_id)\n\n        video_url = xpath_text(\n            feed, ('video_hd', 'video'), 'video url', fatal=True)\n\n        return self.url_result(video_url, WebcasterIE.ie_key())\n", "comments": "# coding: utf-8\n# http://video.khl.ru/quotes/393859\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    xpath_text,\n)\n\n\nclass WebcasterIE(InfoExtractor):\n    _VALID_URL = r'https?://bl\\.webcaster\\.pro/(?:quote|media)/start/free_(?P<id>[^/]+)'\n    _TESTS = [{\n        # http://video.khl.ru/quotes/393859\n        'url': 'http://bl.webcaster.pro/quote/start/free_c8cefd240aa593681c8d068cff59f407_hd/q393859/eb173f99dd5f558674dae55f4ba6806d/1480289104?sr%3D105%26fa%3D1%26type_id%3D18',\n        'md5': '0c162f67443f30916ff1c89425dcd4cd',\n        'info_dict': {\n            'id': 'c8cefd240aa593681c8d068cff59f407_hd',\n            'ext': 'mp4',\n            'title': '\u0421\u0438\u0431\u0438\u0440\u044c - \u041d\u0435\u0444\u0442\u0435\u0445\u0438\u043c\u0438\u043a. \u041b\u0443\u0447\u0448\u0438\u0435 \u043c\u043e\u043c\u0435\u043d\u0442\u044b \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n    }, {\n        'url': 'http://bl.webcaster.pro/media/start/free_6246c7a4453ac4c42b4398f840d13100_hd/2_2991109016/e8d0d82587ef435480118f9f9c41db41/4635726126',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_xml(url, video_id)\n\n        title = xpath_text(video, './/event_name', 'event name', fatal=True)\n\n        def make_id(parts, separator):\n            return separator.join(filter(None, parts))\n\n        formats = []\n        for format_id in (None, 'noise'):\n            track_tag = make_id(('track', format_id), '_')\n            for track in video.findall('.//iphone/%s' % track_tag):\n                track_url = track.text\n                if not track_url:\n                    continue\n                if determine_ext(track_url) == 'm3u8':\n                    m3u8_formats = self._extract_m3u8_formats(\n                        track_url, video_id, 'mp4',\n                        entry_protocol='m3u8_native',\n                        m3u8_id=make_id(('hls', format_id), '-'), fatal=False)\n                    for f in m3u8_formats:\n                        f.update({\n                            'source_preference': 0 if format_id == 'noise' else 1,\n                            'format_note': track.get('title'),\n                        })\n                    formats.extend(m3u8_formats)\n        self._sort_formats(formats)\n\n        thumbnail = xpath_text(video, './/image', 'thumbnail')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n\n\nclass WebcasterFeedIE(InfoExtractor):\n    _VALID_URL = r'https?://bl\\.webcaster\\.pro/feed/start/free_(?P<id>[^/]+)'\n    _TEST = {\n        'url': 'http://bl.webcaster.pro/feed/start/free_c8cefd240aa593681c8d068cff59f407_hd/q393859/eb173f99dd5f558674dae55f4ba6806d/1480289104',\n        'only_matching': True,\n    }\n\n    @staticmethod\n    def _extract_url(ie, webpage):\n        mobj = re.search(\n            r'<(?:object|a[^>]+class=[\"\\']webcaster-player[\"\\'])[^>]+data(?:-config)?=([\"\\']).*?config=(?P<url>https?://bl\\.webcaster\\.pro/feed/start/free_.*?)(?:[?&]|\\1)',\n            webpage)\n        if mobj:\n            return mobj.group('url')\n        for secure in (True, False):\n            video_url = ie._og_search_video_url(\n                webpage, secure=secure, default=None)\n            if video_url:\n                mobj = re.search(\n                    r'config=(?P<url>https?://bl\\.webcaster\\.pro/feed/start/free_[^?&=]+)',\n                    video_url)\n                if mobj:\n                    return mobj.group('url')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        feed = self._download_xml(url, video_id)\n\n        video_url = xpath_text(\n            feed, ('video_hd', 'video'), 'video url', fatal=True)\n\n        return self.url_result(video_url, WebcasterIE.ie_key())\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "webcaster.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/webcaster.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}