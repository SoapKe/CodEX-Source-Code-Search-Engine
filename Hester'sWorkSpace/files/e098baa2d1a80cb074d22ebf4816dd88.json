{"author": "odoo", "code": "#-*- coding:utf-8 -*-\n\n\n\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo import api, fields, models, _\nfrom odoo.exceptions import UserError\n\n\nclass ContributionRegisterReport(models.AbstractModel):\n    _name = 'report.hr_payroll.report_contributionregister'\n\n    def _get_payslip_lines(self, register_ids, date_from, date_to):\n        result = {}\n        self.env.cr.execute(\"\"\"\n            SELECT pl.id from hr_payslip_line as pl\n            LEFT JOIN hr_payslip AS hp on (pl.slip_id = hp.id)\n            WHERE (hp.date_from >= %s) AND (hp.date_to <= %s)\n            AND pl.register_id in %s\n            AND hp.state = 'done'\n            ORDER BY pl.slip_id, pl.sequence\"\"\",\n            (date_from, date_to, tuple(register_ids)))\n        line_ids = [x[0] for x in self.env.cr.fetchall()]\n        for line in self.env['hr.payslip.line'].browse(line_ids):\n            result.setdefault(line.register_id.id, self.env['hr.payslip.line'])\n            result[line.register_id.id] += line\n        return result\n\n    @api.model\n    def get_report_values(self, docids, data=None):\n        if not data.get('form'):\n            raise UserError(_(\"Form content is missing, this report cannot be printed.\"))\n\n        register_ids = self.env.context.get('active_ids', [])\n        contrib_registers = self.env['hr.contribution.register'].browse(register_ids)\n        date_from = data['form'].get('date_from', fields.Date.today())\n        date_to = data['form'].get('date_to', str(datetime.now() + relativedelta(months=+1, day=1, days=-1))[:10])\n        lines_data = self._get_payslip_lines(register_ids, date_from, date_to)\n        lines_total = {}\n        for register in contrib_registers:\n            lines = lines_data.get(register.id)\n            lines_total[register.id] = lines and sum(lines.mapped('total')) or 0.0\n        return {\n            'doc_ids': register_ids,\n            'doc_model': 'hr.contribution.register',\n            'docs': contrib_registers,\n            'data': data,\n            'lines_data': lines_data,\n            'lines_total': lines_total\n        }\n", "comments": "                select pl id hr payslip line pl             left join hr payslip as hp (pl slip id   hp id)             where (hp date     s) and (hp date     s)             and pl register id              and hp state    done              order by pl slip id  pl sequence          coding utf 8        part odoo  see license file full copyright licensing details  ", "content": "#-*- coding:utf-8 -*-\n\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo import api, fields, models, _\nfrom odoo.exceptions import UserError\n\n\nclass ContributionRegisterReport(models.AbstractModel):\n    _name = 'report.hr_payroll.report_contributionregister'\n\n    def _get_payslip_lines(self, register_ids, date_from, date_to):\n        result = {}\n        self.env.cr.execute(\"\"\"\n            SELECT pl.id from hr_payslip_line as pl\n            LEFT JOIN hr_payslip AS hp on (pl.slip_id = hp.id)\n            WHERE (hp.date_from >= %s) AND (hp.date_to <= %s)\n            AND pl.register_id in %s\n            AND hp.state = 'done'\n            ORDER BY pl.slip_id, pl.sequence\"\"\",\n            (date_from, date_to, tuple(register_ids)))\n        line_ids = [x[0] for x in self.env.cr.fetchall()]\n        for line in self.env['hr.payslip.line'].browse(line_ids):\n            result.setdefault(line.register_id.id, self.env['hr.payslip.line'])\n            result[line.register_id.id] += line\n        return result\n\n    @api.model\n    def get_report_values(self, docids, data=None):\n        if not data.get('form'):\n            raise UserError(_(\"Form content is missing, this report cannot be printed.\"))\n\n        register_ids = self.env.context.get('active_ids', [])\n        contrib_registers = self.env['hr.contribution.register'].browse(register_ids)\n        date_from = data['form'].get('date_from', fields.Date.today())\n        date_to = data['form'].get('date_to', str(datetime.now() + relativedelta(months=+1, day=1, days=-1))[:10])\n        lines_data = self._get_payslip_lines(register_ids, date_from, date_to)\n        lines_total = {}\n        for register in contrib_registers:\n            lines = lines_data.get(register.id)\n            lines_total[register.id] = lines and sum(lines.mapped('total')) or 0.0\n        return {\n            'doc_ids': register_ids,\n            'doc_model': 'hr.contribution.register',\n            'docs': contrib_registers,\n            'data': data,\n            'lines_data': lines_data,\n            'lines_total': lines_total\n        }\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "report_contribution_register.py", "id": "e098baa2d1a80cb074d22ebf4816dd88", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_payroll/report/report_contribution_register.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}