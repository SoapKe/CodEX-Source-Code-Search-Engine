{"author": "ansible", "code": "\n  Copyright (c) 2017 Citrix Systems\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nfrom ansible.compat.tests.mock import patch, Mock, call\nfrom .netscaler_module import TestModule\nimport copy\nimport tempfile\nimport json\nimport sys\nimport codecs\n\nfrom ansible.modules.network.netscaler import netscaler_nitro_request\n\nmodule_arguments = dict(\n    nsip=None,\n    nitro_user=None,\n    nitro_pass=None,\n    nitro_protocol=None,\n    validate_certs=None,\n    nitro_auth_token=None,\n    resource=None,\n    name=None,\n    attributes=None,\n    args=None,\n    filter=None,\n    operation=None,\n    expected_nitro_errorcode=None,\n    action=None,\n    instance_ip=None,\n    instance_name=None,\n    instance_id=None,\n)\n\n\nclass TestNetscalerNitroRequestModule(TestModule):\n\n    @classmethod\n    def setUpClass(cls):\n        class MockException(Exception):\n            pass\n\n        cls.MockException = MockException\n\n    @classmethod\n    def tearDownClass(cls):\n        pass\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def test_fail_on_conflicting_authentication_methods(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_user='nsroot',\n            nitro_pass='nsroot',\n            nitro_auth_token='DDASKLFDJ',\n        ))\n        mock_module_instance = Mock(params=args)\n        expected_calls = [\n            call.fail_json(\n                changed=False,\n                failed=True,\n                msg='Cannot define both authentication token and username/password'\n            )\n        ]\n        module_mock = Mock(return_value=mock_module_instance)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', module_mock):\n            netscaler_nitro_request.NitroAPICaller()\n            mock_module_instance.assert_has_calls(expected_calls)\n\n    def test_nitro_user_pass_credentials(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_user='nsroot',\n            nitro_pass='nsroot',\n        ))\n        mock_module_instance = Mock(params=args)\n        expected_headers = {\n            'Content-Type': 'application/json',\n            'X-NITRO-USER': 'nsroot',\n            'X-NITRO-PASS': 'nsroot',\n        }\n        module_mock = Mock(return_value=mock_module_instance)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', module_mock):\n            instance = netscaler_nitro_request.NitroAPICaller()\n            self.assertDictEqual(instance._headers, expected_headers)\n\n    def test_mas_login_headers(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_user='nsroot',\n            nitro_pass='nsroot',\n            operation='mas_login',\n        ))\n        mock_module_instance = Mock(params=args)\n        expected_headers = {\n            'Content-Type': 'application/json',\n        }\n        module_mock = Mock(return_value=mock_module_instance)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', module_mock):\n            instance = netscaler_nitro_request.NitroAPICaller()\n            self.assertDictEqual(instance._headers, expected_headers)\n\n    def test_mas_proxy_call_headers_instance_ip(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_auth_token='ABDB',\n            operation='add',\n            instance_ip='192.168.1.1',\n        ))\n        mock_module_instance = Mock(params=args)\n        expected_headers = {\n            'Content-Type': 'application/json',\n            '_MPS_API_PROXY_MANAGED_INSTANCE_IP': args['instance_ip'],\n            'Cookie': 'NITRO_AUTH_TOKEN=%s' % args['nitro_auth_token'],\n        }\n        module_mock = Mock(return_value=mock_module_instance)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', module_mock):\n            instance = netscaler_nitro_request.NitroAPICaller()\n            self.assertDictEqual(instance._headers, expected_headers)\n\n    def test_mas_proxy_call_headers_instance_id(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_auth_token='ABDB',\n            operation='add',\n            instance_id='myid',\n        ))\n        mock_module_instance = Mock(params=args)\n        expected_headers = {\n            'Content-Type': 'application/json',\n            '_MPS_API_PROXY_MANAGED_INSTANCE_ID': args['instance_id'],\n            'Cookie': 'NITRO_AUTH_TOKEN=%s' % args['nitro_auth_token'],\n        }\n        module_mock = Mock(return_value=mock_module_instance)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', module_mock):\n            instance = netscaler_nitro_request.NitroAPICaller()\n            self.assertDictEqual(instance._headers, expected_headers)\n\n    def test_mas_proxy_call_headers_instance_name(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_auth_token='ABDB',\n            operation='add',\n            instance_name='myname',\n        ))\n        mock_module_instance = Mock(params=args)\n        expected_headers = {\n            'Content-Type': 'application/json',\n            '_MPS_API_PROXY_MANAGED_INSTANCE_NAME': args['instance_name'],\n            'Cookie': 'NITRO_AUTH_TOKEN=%s' % args['nitro_auth_token'],\n        }\n        module_mock = Mock(return_value=mock_module_instance)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', module_mock):\n            instance = netscaler_nitro_request.NitroAPICaller()\n            self.assertDictEqual(instance._headers, expected_headers)\n\n    def test_edit_response_data_no_body_success_status(self):\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule'):\n            instance = netscaler_nitro_request.NitroAPICaller()\n            r = None\n            info = {\n                'status': 200,\n            }\n            result = {}\n            success_status = 200\n\n            expected_result = {\n                'nitro_errorcode': 0,\n                'nitro_message': 'Success',\n                'nitro_severity': 'NONE',\n                'http_response_body': '',\n                'http_response_data': info,\n            }\n            instance.edit_response_data(r, info, result, success_status)\n            self.assertDictEqual(result, expected_result)\n\n    def test_edit_response_data_no_body_fail_status(self):\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule'):\n            instance = netscaler_nitro_request.NitroAPICaller()\n            r = None\n            info = {\n                'status': 201,\n            }\n            result = {}\n            success_status = 200\n\n            expected_result = {\n                'nitro_errorcode': -1,\n                'nitro_message': 'HTTP status %s' % info['status'],\n                'nitro_severity': 'ERROR',\n                'http_response_body': '',\n                'http_response_data': info,\n            }\n            instance.edit_response_data(r, info, result, success_status)\n            self.assertDictEqual(result, expected_result)\n\n    def test_edit_response_data_actual_body_data(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_user='nsroot',\n            nitro_pass='nsroot',\n            nitro_auth_token='DDASKLFDJ',\n        ))\n        module_mock = Mock(params=args, from_json=json.loads)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', Mock(return_value=module_mock)):\n            with tempfile.TemporaryFile() as r:\n                actual_body = {\n                    'errorcode': 258,\n                    'message': 'Some error',\n                    'severity': 'ERROR',\n                }\n                r.write(codecs.encode(json.dumps(actual_body), 'utf-8'))\n                r.seek(0)\n\n                instance = netscaler_nitro_request.NitroAPICaller()\n                info = {\n                    'status': 200,\n                }\n                result = {}\n                success_status = 200\n\n                expected_result = {\n                    'http_response_body': json.dumps(actual_body),\n                    'http_response_data': info,\n                }\n                nitro_data = {}\n                for key, value in actual_body.items():\n                    nitro_data['nitro_%s' % key] = value\n                expected_result.update(nitro_data)\n\n                instance.edit_response_data(r, info, result, success_status)\n                self.assertDictEqual(result, expected_result)\n\n    def test_edit_response_data_actual_body_data_irrelevant(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_user='nsroot',\n            nitro_pass='nsroot',\n            nitro_auth_token='DDASKLFDJ',\n        ))\n        module_mock = Mock(params=args, from_json=json.loads)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', Mock(return_value=module_mock)):\n            with tempfile.TemporaryFile() as r:\n                actual_body = {}\n                r.write(codecs.encode(json.dumps(actual_body), 'utf-8'))\n                r.seek(0)\n\n                instance = netscaler_nitro_request.NitroAPICaller()\n                info = {\n                    'status': 200,\n                }\n                result = {}\n                success_status = 200\n\n                expected_result = {\n                    'http_response_body': json.dumps(actual_body),\n                    'http_response_data': info,\n                    'nitro_errorcode': 0,\n                    'nitro_message': 'Success',\n                    'nitro_severity': 'NONE',\n                }\n\n                instance.edit_response_data(r, info, result, success_status)\n                self.assertDictEqual(result, expected_result)\n\n    def test_edit_response_data_body_in_info(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_user='nsroot',\n            nitro_pass='nsroot',\n        ))\n        module_mock = Mock(params=args, from_json=json.loads)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', Mock(return_value=module_mock)):\n            body = {\n                'errorcode': 258,\n                'message': 'Numerical error 258',\n                'severity': 'ERROR'\n            }\n            instance = netscaler_nitro_request.NitroAPICaller()\n            r = None\n            info = {\n                'status': 200,\n                'body': codecs.encode(json.dumps(body), 'utf-8'),\n            }\n            result = {}\n            success_status = 200\n\n            expected_result = {\n                'http_response_body': json.dumps(body),\n                'http_response_data': info,\n            }\n\n            nitro_data = {}\n            for key, value in body.items():\n                nitro_data['nitro_%s' % key] = value\n\n            expected_result.update(nitro_data)\n            instance.edit_response_data(r, info, result, success_status)\n            self.assertDictEqual(result, expected_result)\n\n    def test_handle_get_return_object(self):\n        resource = 'lbvserver'\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_user='nsroot',\n            nitro_pass='nsroot',\n            resource=resource,\n        ))\n        resource_data = {\n            'property1': 'value1',\n            'property2': 'value2',\n        }\n        module_mock = Mock(params=args, from_json=json.loads)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', Mock(return_value=module_mock)):\n            instance = netscaler_nitro_request.NitroAPICaller()\n\n            data = {resource: resource_data}\n            result = {\n                'nitro_errorcode': 0,\n                'http_response_body': json.dumps(data),\n            }\n            expected_result = {\n                'nitro_object': resource_data\n            }\n            expected_result.update(result)\n            instance.handle_get_return_object(result)\n            self.assertDictEqual(result, expected_result)\n", "comments": "   copyright (c) 2017 citrix systems       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses         ddasklfdj     abdb     abdb     abdb     ddasklfdj     ddasklfdj   ", "content": "\n#  Copyright (c) 2017 Citrix Systems\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nfrom ansible.compat.tests.mock import patch, Mock, call\nfrom .netscaler_module import TestModule\nimport copy\nimport tempfile\nimport json\nimport sys\nimport codecs\n\nfrom ansible.modules.network.netscaler import netscaler_nitro_request\n\nmodule_arguments = dict(\n    nsip=None,\n    nitro_user=None,\n    nitro_pass=None,\n    nitro_protocol=None,\n    validate_certs=None,\n    nitro_auth_token=None,\n    resource=None,\n    name=None,\n    attributes=None,\n    args=None,\n    filter=None,\n    operation=None,\n    expected_nitro_errorcode=None,\n    action=None,\n    instance_ip=None,\n    instance_name=None,\n    instance_id=None,\n)\n\n\nclass TestNetscalerNitroRequestModule(TestModule):\n\n    @classmethod\n    def setUpClass(cls):\n        class MockException(Exception):\n            pass\n\n        cls.MockException = MockException\n\n    @classmethod\n    def tearDownClass(cls):\n        pass\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def test_fail_on_conflicting_authentication_methods(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_user='nsroot',\n            nitro_pass='nsroot',\n            nitro_auth_token='##DDASKLFDJ',\n        ))\n        mock_module_instance = Mock(params=args)\n        expected_calls = [\n            call.fail_json(\n                changed=False,\n                failed=True,\n                msg='Cannot define both authentication token and username/password'\n            )\n        ]\n        module_mock = Mock(return_value=mock_module_instance)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', module_mock):\n            netscaler_nitro_request.NitroAPICaller()\n            mock_module_instance.assert_has_calls(expected_calls)\n\n    def test_nitro_user_pass_credentials(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_user='nsroot',\n            nitro_pass='nsroot',\n        ))\n        mock_module_instance = Mock(params=args)\n        expected_headers = {\n            'Content-Type': 'application/json',\n            'X-NITRO-USER': 'nsroot',\n            'X-NITRO-PASS': 'nsroot',\n        }\n        module_mock = Mock(return_value=mock_module_instance)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', module_mock):\n            instance = netscaler_nitro_request.NitroAPICaller()\n            self.assertDictEqual(instance._headers, expected_headers)\n\n    def test_mas_login_headers(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_user='nsroot',\n            nitro_pass='nsroot',\n            operation='mas_login',\n        ))\n        mock_module_instance = Mock(params=args)\n        expected_headers = {\n            'Content-Type': 'application/json',\n        }\n        module_mock = Mock(return_value=mock_module_instance)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', module_mock):\n            instance = netscaler_nitro_request.NitroAPICaller()\n            self.assertDictEqual(instance._headers, expected_headers)\n\n    def test_mas_proxy_call_headers_instance_ip(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_auth_token='##ABDB',\n            operation='add',\n            instance_ip='192.168.1.1',\n        ))\n        mock_module_instance = Mock(params=args)\n        expected_headers = {\n            'Content-Type': 'application/json',\n            '_MPS_API_PROXY_MANAGED_INSTANCE_IP': args['instance_ip'],\n            'Cookie': 'NITRO_AUTH_TOKEN=%s' % args['nitro_auth_token'],\n        }\n        module_mock = Mock(return_value=mock_module_instance)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', module_mock):\n            instance = netscaler_nitro_request.NitroAPICaller()\n            self.assertDictEqual(instance._headers, expected_headers)\n\n    def test_mas_proxy_call_headers_instance_id(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_auth_token='##ABDB',\n            operation='add',\n            instance_id='myid',\n        ))\n        mock_module_instance = Mock(params=args)\n        expected_headers = {\n            'Content-Type': 'application/json',\n            '_MPS_API_PROXY_MANAGED_INSTANCE_ID': args['instance_id'],\n            'Cookie': 'NITRO_AUTH_TOKEN=%s' % args['nitro_auth_token'],\n        }\n        module_mock = Mock(return_value=mock_module_instance)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', module_mock):\n            instance = netscaler_nitro_request.NitroAPICaller()\n            self.assertDictEqual(instance._headers, expected_headers)\n\n    def test_mas_proxy_call_headers_instance_name(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_auth_token='##ABDB',\n            operation='add',\n            instance_name='myname',\n        ))\n        mock_module_instance = Mock(params=args)\n        expected_headers = {\n            'Content-Type': 'application/json',\n            '_MPS_API_PROXY_MANAGED_INSTANCE_NAME': args['instance_name'],\n            'Cookie': 'NITRO_AUTH_TOKEN=%s' % args['nitro_auth_token'],\n        }\n        module_mock = Mock(return_value=mock_module_instance)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', module_mock):\n            instance = netscaler_nitro_request.NitroAPICaller()\n            self.assertDictEqual(instance._headers, expected_headers)\n\n    def test_edit_response_data_no_body_success_status(self):\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule'):\n            instance = netscaler_nitro_request.NitroAPICaller()\n            r = None\n            info = {\n                'status': 200,\n            }\n            result = {}\n            success_status = 200\n\n            expected_result = {\n                'nitro_errorcode': 0,\n                'nitro_message': 'Success',\n                'nitro_severity': 'NONE',\n                'http_response_body': '',\n                'http_response_data': info,\n            }\n            instance.edit_response_data(r, info, result, success_status)\n            self.assertDictEqual(result, expected_result)\n\n    def test_edit_response_data_no_body_fail_status(self):\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule'):\n            instance = netscaler_nitro_request.NitroAPICaller()\n            r = None\n            info = {\n                'status': 201,\n            }\n            result = {}\n            success_status = 200\n\n            expected_result = {\n                'nitro_errorcode': -1,\n                'nitro_message': 'HTTP status %s' % info['status'],\n                'nitro_severity': 'ERROR',\n                'http_response_body': '',\n                'http_response_data': info,\n            }\n            instance.edit_response_data(r, info, result, success_status)\n            self.assertDictEqual(result, expected_result)\n\n    def test_edit_response_data_actual_body_data(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_user='nsroot',\n            nitro_pass='nsroot',\n            nitro_auth_token='##DDASKLFDJ',\n        ))\n        module_mock = Mock(params=args, from_json=json.loads)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', Mock(return_value=module_mock)):\n            with tempfile.TemporaryFile() as r:\n                actual_body = {\n                    'errorcode': 258,\n                    'message': 'Some error',\n                    'severity': 'ERROR',\n                }\n                r.write(codecs.encode(json.dumps(actual_body), 'utf-8'))\n                r.seek(0)\n\n                instance = netscaler_nitro_request.NitroAPICaller()\n                info = {\n                    'status': 200,\n                }\n                result = {}\n                success_status = 200\n\n                expected_result = {\n                    'http_response_body': json.dumps(actual_body),\n                    'http_response_data': info,\n                }\n                nitro_data = {}\n                for key, value in actual_body.items():\n                    nitro_data['nitro_%s' % key] = value\n                expected_result.update(nitro_data)\n\n                instance.edit_response_data(r, info, result, success_status)\n                self.assertDictEqual(result, expected_result)\n\n    def test_edit_response_data_actual_body_data_irrelevant(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_user='nsroot',\n            nitro_pass='nsroot',\n            nitro_auth_token='##DDASKLFDJ',\n        ))\n        module_mock = Mock(params=args, from_json=json.loads)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', Mock(return_value=module_mock)):\n            with tempfile.TemporaryFile() as r:\n                actual_body = {}\n                r.write(codecs.encode(json.dumps(actual_body), 'utf-8'))\n                r.seek(0)\n\n                instance = netscaler_nitro_request.NitroAPICaller()\n                info = {\n                    'status': 200,\n                }\n                result = {}\n                success_status = 200\n\n                expected_result = {\n                    'http_response_body': json.dumps(actual_body),\n                    'http_response_data': info,\n                    'nitro_errorcode': 0,\n                    'nitro_message': 'Success',\n                    'nitro_severity': 'NONE',\n                }\n\n                instance.edit_response_data(r, info, result, success_status)\n                self.assertDictEqual(result, expected_result)\n\n    def test_edit_response_data_body_in_info(self):\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_user='nsroot',\n            nitro_pass='nsroot',\n        ))\n        module_mock = Mock(params=args, from_json=json.loads)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', Mock(return_value=module_mock)):\n            body = {\n                'errorcode': 258,\n                'message': 'Numerical error 258',\n                'severity': 'ERROR'\n            }\n            instance = netscaler_nitro_request.NitroAPICaller()\n            r = None\n            info = {\n                'status': 200,\n                'body': codecs.encode(json.dumps(body), 'utf-8'),\n            }\n            result = {}\n            success_status = 200\n\n            expected_result = {\n                'http_response_body': json.dumps(body),\n                'http_response_data': info,\n            }\n\n            nitro_data = {}\n            for key, value in body.items():\n                nitro_data['nitro_%s' % key] = value\n\n            expected_result.update(nitro_data)\n            instance.edit_response_data(r, info, result, success_status)\n            self.assertDictEqual(result, expected_result)\n\n    def test_handle_get_return_object(self):\n        resource = 'lbvserver'\n        args = copy.deepcopy(module_arguments)\n        args.update(dict(\n            nitro_user='nsroot',\n            nitro_pass='nsroot',\n            resource=resource,\n        ))\n        resource_data = {\n            'property1': 'value1',\n            'property2': 'value2',\n        }\n        module_mock = Mock(params=args, from_json=json.loads)\n        with patch('ansible.modules.network.netscaler.netscaler_nitro_request.AnsibleModule', Mock(return_value=module_mock)):\n            instance = netscaler_nitro_request.NitroAPICaller()\n\n            data = {resource: resource_data}\n            result = {\n                'nitro_errorcode': 0,\n                'http_response_body': json.dumps(data),\n            }\n            expected_result = {\n                'nitro_object': resource_data\n            }\n            expected_result.update(result)\n            instance.handle_get_return_object(result)\n            self.assertDictEqual(result, expected_result)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_netscaler_nitro_request.py", "id": "d79750683c8deb19a2bc7a98b8650572", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/netscaler/test_netscaler_nitro_request.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}