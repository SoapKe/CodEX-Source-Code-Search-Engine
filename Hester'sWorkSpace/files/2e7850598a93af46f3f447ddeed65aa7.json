{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass WebOfStoriesIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?webofstories\\.com/play/(?:[^/]+/)?(?P<id>[0-9]+)'\n    _VIDEO_DOMAIN = 'http://eu-mobile.webofstories.com/'\n    _GREAT_LIFE_STREAMER = 'rtmp://eu-cdn1.webofstories.com/cfx/st/'\n    _USER_STREAMER = 'rtmp://eu-users.webofstories.com/cfx/st/'\n    _TESTS = [{\n        'url': 'http://www.webofstories.com/play/hans.bethe/71',\n        'md5': '373e4dd915f60cfe3116322642ddf364',\n        'info_dict': {\n            'id': '4536',\n            'ext': 'mp4',\n            'title': 'The temperature of the sun',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'description': 'Hans Bethe talks about calculating the temperature of the sun',\n            'duration': 238,\n        }\n    }, {\n        'url': 'http://www.webofstories.com/play/55908',\n        'md5': '2985a698e1fe3211022422c4b5ed962c',\n        'info_dict': {\n            'id': '55908',\n            'ext': 'mp4',\n            'title': 'The story of Gemmata obscuriglobus',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'description': 'Planctomycete talks about The story of Gemmata obscuriglobus',\n            'duration': 169,\n        },\n        'skip': 'notfound',\n    }, {\n        \n        'url': 'http://www.webofstories.com/play/54215?o=MS',\n        'info_dict': {\n            'id': '54215',\n            'ext': 'mp4',\n            'title': '\"A Leg to Stand On\"',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'description': 'Oliver Sacks talks about the death and resurrection of a limb',\n            'duration': 97,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n        \n        title = self._og_search_title(webpage, default=None) or self._html_search_regex(\n            r'(?s)<strong>Title:\\s*</strong>(.+?)<', webpage, 'title')\n        description = self._html_search_meta('description', webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        embed_params = [s.strip(\" \\r\\n\\t'\") for s in self._search_regex(\n            r'(?s)\\$\\(\"\n            webpage, 'embed params').split(',')]\n\n        (\n            _, speaker_id, story_id, story_duration,\n            speaker_type, great_life, _thumbnail, _has_subtitles,\n            story_filename, _story_order) = embed_params\n\n        is_great_life_series = great_life == 'true'\n        duration = int_or_none(story_duration)\n\n        \n        ms_prefix = ''\n        if speaker_type.lower() == 'ms':\n            ms_prefix = 'mini_sites/'\n\n        if is_great_life_series:\n            mp4_url = '{0:}lives/{1:}/{2:}.mp4'.format(\n                self._VIDEO_DOMAIN, speaker_id, story_filename)\n            rtmp_ext = 'flv'\n            streamer = self._GREAT_LIFE_STREAMER\n            play_path = 'stories/{0:}/{1:}'.format(\n                speaker_id, story_filename)\n        else:\n            mp4_url = '{0:}{1:}{2:}/{3:}.mp4'.format(\n                self._VIDEO_DOMAIN, ms_prefix, speaker_id, story_filename)\n            rtmp_ext = 'mp4'\n            streamer = self._USER_STREAMER\n            play_path = 'mp4:{0:}{1:}/{2}.mp4'.format(\n                ms_prefix, speaker_id, story_filename)\n\n        formats = [{\n            'format_id': 'mp4_sd',\n            'url': mp4_url,\n        }, {\n            'format_id': 'rtmp_sd',\n            'page_url': url,\n            'url': streamer,\n            'ext': rtmp_ext,\n            'play_path': play_path,\n        }]\n\n        self._sort_formats(formats)\n\n        return {\n            'id': story_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'description': description,\n            'duration': duration,\n        }\n\n\nclass WebOfStoriesPlaylistIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?webofstories\\.com/playAll/(?P<id>[^/]+)'\n    _TEST = {\n        'url': 'http://www.webofstories.com/playAll/donald.knuth',\n        'info_dict': {\n            'id': 'donald.knuth',\n            'title': 'Donald Knuth (Scientist)',\n        },\n        'playlist_mincount': 97,\n    }\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('http://www.webofstories.com/play/%s' % video_number, 'WebOfStories')\n            for video_number in set(re.findall(r'href=\"/playAll/%s\\?sId=(\\d+)\"' % playlist_id, webpage))\n        ]\n\n        title = self._search_regex(\n            r'<div id=\"speakerName\">\\s*<span>([^<]+)</span>',\n            webpage, 'speaker', default=None)\n        if title:\n            field = self._search_regex(\n                r'<span id=\"primaryField\">([^<]+)</span>',\n                webpage, 'field', default=None)\n            if field:\n                title += ' (%s)' % field\n\n        if not title:\n            title = self._search_regex(\n                r'<title>Play\\s+all\\s+stories\\s*-\\s*([^<]+)\\s*-\\s*Web\\s+of\\s+Stories</title>',\n                webpage, 'title')\n\n        return self.playlist_result(entries, playlist_id, title)\n", "comments": "# coding: utf-8\n# malformed og:title meta\n# Sometimes og:title meta is malformed\n#embedCode\"\\).html\\(getEmbedCode\\((.*?)\\)',\n# URL building, see: http://www.webofstories.com/scripts/player.js\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass WebOfStoriesIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?webofstories\\.com/play/(?:[^/]+/)?(?P<id>[0-9]+)'\n    _VIDEO_DOMAIN = 'http://eu-mobile.webofstories.com/'\n    _GREAT_LIFE_STREAMER = 'rtmp://eu-cdn1.webofstories.com/cfx/st/'\n    _USER_STREAMER = 'rtmp://eu-users.webofstories.com/cfx/st/'\n    _TESTS = [{\n        'url': 'http://www.webofstories.com/play/hans.bethe/71',\n        'md5': '373e4dd915f60cfe3116322642ddf364',\n        'info_dict': {\n            'id': '4536',\n            'ext': 'mp4',\n            'title': 'The temperature of the sun',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'description': 'Hans Bethe talks about calculating the temperature of the sun',\n            'duration': 238,\n        }\n    }, {\n        'url': 'http://www.webofstories.com/play/55908',\n        'md5': '2985a698e1fe3211022422c4b5ed962c',\n        'info_dict': {\n            'id': '55908',\n            'ext': 'mp4',\n            'title': 'The story of Gemmata obscuriglobus',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'description': 'Planctomycete talks about The story of Gemmata obscuriglobus',\n            'duration': 169,\n        },\n        'skip': 'notfound',\n    }, {\n        # malformed og:title meta\n        'url': 'http://www.webofstories.com/play/54215?o=MS',\n        'info_dict': {\n            'id': '54215',\n            'ext': 'mp4',\n            'title': '\"A Leg to Stand On\"',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'description': 'Oliver Sacks talks about the death and resurrection of a limb',\n            'duration': 97,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n        # Sometimes og:title meta is malformed\n        title = self._og_search_title(webpage, default=None) or self._html_search_regex(\n            r'(?s)<strong>Title:\\s*</strong>(.+?)<', webpage, 'title')\n        description = self._html_search_meta('description', webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        embed_params = [s.strip(\" \\r\\n\\t'\") for s in self._search_regex(\n            r'(?s)\\$\\(\"#embedCode\"\\).html\\(getEmbedCode\\((.*?)\\)',\n            webpage, 'embed params').split(',')]\n\n        (\n            _, speaker_id, story_id, story_duration,\n            speaker_type, great_life, _thumbnail, _has_subtitles,\n            story_filename, _story_order) = embed_params\n\n        is_great_life_series = great_life == 'true'\n        duration = int_or_none(story_duration)\n\n        # URL building, see: http://www.webofstories.com/scripts/player.js\n        ms_prefix = ''\n        if speaker_type.lower() == 'ms':\n            ms_prefix = 'mini_sites/'\n\n        if is_great_life_series:\n            mp4_url = '{0:}lives/{1:}/{2:}.mp4'.format(\n                self._VIDEO_DOMAIN, speaker_id, story_filename)\n            rtmp_ext = 'flv'\n            streamer = self._GREAT_LIFE_STREAMER\n            play_path = 'stories/{0:}/{1:}'.format(\n                speaker_id, story_filename)\n        else:\n            mp4_url = '{0:}{1:}{2:}/{3:}.mp4'.format(\n                self._VIDEO_DOMAIN, ms_prefix, speaker_id, story_filename)\n            rtmp_ext = 'mp4'\n            streamer = self._USER_STREAMER\n            play_path = 'mp4:{0:}{1:}/{2}.mp4'.format(\n                ms_prefix, speaker_id, story_filename)\n\n        formats = [{\n            'format_id': 'mp4_sd',\n            'url': mp4_url,\n        }, {\n            'format_id': 'rtmp_sd',\n            'page_url': url,\n            'url': streamer,\n            'ext': rtmp_ext,\n            'play_path': play_path,\n        }]\n\n        self._sort_formats(formats)\n\n        return {\n            'id': story_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'description': description,\n            'duration': duration,\n        }\n\n\nclass WebOfStoriesPlaylistIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?webofstories\\.com/playAll/(?P<id>[^/]+)'\n    _TEST = {\n        'url': 'http://www.webofstories.com/playAll/donald.knuth',\n        'info_dict': {\n            'id': 'donald.knuth',\n            'title': 'Donald Knuth (Scientist)',\n        },\n        'playlist_mincount': 97,\n    }\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('http://www.webofstories.com/play/%s' % video_number, 'WebOfStories')\n            for video_number in set(re.findall(r'href=\"/playAll/%s\\?sId=(\\d+)\"' % playlist_id, webpage))\n        ]\n\n        title = self._search_regex(\n            r'<div id=\"speakerName\">\\s*<span>([^<]+)</span>',\n            webpage, 'speaker', default=None)\n        if title:\n            field = self._search_regex(\n                r'<span id=\"primaryField\">([^<]+)</span>',\n                webpage, 'field', default=None)\n            if field:\n                title += ' (%s)' % field\n\n        if not title:\n            title = self._search_regex(\n                r'<title>Play\\s+all\\s+stories\\s*-\\s*([^<]+)\\s*-\\s*Web\\s+of\\s+Stories</title>',\n                webpage, 'title')\n\n        return self.playlist_result(entries, playlist_id, title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "webofstories.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/webofstories.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}