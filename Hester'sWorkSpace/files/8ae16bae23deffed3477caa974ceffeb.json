{"author": "django", "code": "import os\n\nfrom django.conf import settings\nfrom django.contrib.staticfiles import finders, storage\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.test import SimpleTestCase, override_settings\n\nfrom .cases import StaticFilesTestCase\nfrom .settings import TEST_ROOT\n\n\nclass TestFinders:\n    \"\"\"\n    Base finder test mixin.\n\n    On Windows, sometimes the case of the path we ask the finders for and the\n    path(s) they find can differ. Compare them using os.path.normcase() to\n    avoid false negatives.\n    \"\"\"\n    def test_find_first(self):\n        src, dst = self.find_first\n        found = self.finder.find(src)\n        self.assertEqual(os.path.normcase(found), os.path.normcase(dst))\n\n    def test_find_all(self):\n        src, dst = self.find_all\n        found = self.finder.find(src, all=True)\n        found = [os.path.normcase(f) for f in found]\n        dst = [os.path.normcase(d) for d in dst]\n        self.assertEqual(found, dst)\n\n\nclass TestFileSystemFinder(TestFinders, StaticFilesTestCase):\n    \"\"\"\n    Test FileSystemFinder.\n    \"\"\"\n    def setUp(self):\n        super().setUp()\n        self.finder = finders.FileSystemFinder()\n        test_file_path = os.path.join(TEST_ROOT, 'project', 'documents', 'test', 'file.txt')\n        self.find_first = (os.path.join('test', 'file.txt'), test_file_path)\n        self.find_all = (os.path.join('test', 'file.txt'), [test_file_path])\n\n\nclass TestAppDirectoriesFinder(TestFinders, StaticFilesTestCase):\n    \"\"\"\n    Test AppDirectoriesFinder.\n    \"\"\"\n    def setUp(self):\n        super().setUp()\n        self.finder = finders.AppDirectoriesFinder()\n        test_file_path = os.path.join(TEST_ROOT, 'apps', 'test', 'static', 'test', 'file1.txt')\n        self.find_first = (os.path.join('test', 'file1.txt'), test_file_path)\n        self.find_all = (os.path.join('test', 'file1.txt'), [test_file_path])\n\n\nclass TestDefaultStorageFinder(TestFinders, StaticFilesTestCase):\n    \"\"\"\n    Test DefaultStorageFinder.\n    \"\"\"\n    def setUp(self):\n        super().setUp()\n        self.finder = finders.DefaultStorageFinder(\n            storage=storage.StaticFilesStorage(location=settings.MEDIA_ROOT))\n        test_file_path = os.path.join(settings.MEDIA_ROOT, 'media-file.txt')\n        self.find_first = ('media-file.txt', test_file_path)\n        self.find_all = ('media-file.txt', [test_file_path])\n\n\n@override_settings(\n    STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n    STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'documents')],\n)\nclass TestMiscFinder(SimpleTestCase):\n    \"\"\"\n    A few misc finder tests.\n    \"\"\"\n    def test_get_finder(self):\n        self.assertIsInstance(finders.get_finder(\n            'django.contrib.staticfiles.finders.FileSystemFinder'),\n            finders.FileSystemFinder)\n\n    def test_get_finder_bad_classname(self):\n        with self.assertRaises(ImportError):\n            finders.get_finder('django.contrib.staticfiles.finders.FooBarFinder')\n\n    def test_get_finder_bad_module(self):\n        with self.assertRaises(ImportError):\n            finders.get_finder('foo.bar.FooBarFinder')\n\n    def test_cache(self):\n        finders.get_finder.cache_clear()\n        for n in range(10):\n            finders.get_finder('django.contrib.staticfiles.finders.FileSystemFinder')\n        cache_info = finders.get_finder.cache_info()\n        self.assertEqual(cache_info.hits, 9)\n        self.assertEqual(cache_info.currsize, 1)\n\n    def test_searched_locations(self):\n        finders.find('spam')\n        self.assertEqual(\n            finders.searched_locations,\n            [os.path.join(TEST_ROOT, 'project', 'documents')]\n        )\n\n    @override_settings(MEDIA_ROOT='')\n    def test_location_empty(self):\n        msg = (\n            \"The storage backend of the staticfiles finder \"\n            \"<class 'django.contrib.staticfiles.finders.DefaultStorageFinder'> \"\n            \"doesn't have a valid location.\"\n        )\n        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n            finders.DefaultStorageFinder()\n", "comments": "        base finder test mixin       on windows  sometimes case path ask finders     path(s) find differ  compare using os path normcase()     avoid false negatives              def test find first(self)          src  dst   self find first         found   self finder find(src)         self assertequal(os path normcase(found)  os path normcase(dst))      def test find all(self)          src  dst   self find         found   self finder find(src  true)         found    os path normcase(f) f found          dst    os path normcase(d) dst          self assertequal(found  dst)   class testfilesystemfinder(testfinders  staticfilestestcase)              test filesystemfinder              def setup(self)          super() setup()         self finder   finders filesystemfinder()         test file path   os path join(test root   project    documents    test    file txt )         self find first   (os path join( test    file txt )  test file path)         self find   (os path join( test    file txt )   test file path )   class testappdirectoriesfinder(testfinders  staticfilestestcase)              test appdirectoriesfinder              def setup(self)          super() setup()         self finder   finders appdirectoriesfinder()         test file path   os path join(test root   apps    test    static    test    file1 txt )         self find first   (os path join( test    file1 txt )  test file path)         self find   (os path join( test    file1 txt )   test file path )   class testdefaultstoragefinder(testfinders  staticfilestestcase)              test defaultstoragefinder              def setup(self)          super() setup()         self finder   finders defaultstoragefinder(             storage storage staticfilesstorage(location settings media root))         test file path   os path join(settings media root   media file txt )         self find first   ( media file txt   test file path)         self find   ( media file txt    test file path )    override settings(     staticfiles finders   django contrib staticfiles finders filesystemfinder        staticfiles dirs  os path join(test root   project    documents )   ) class testmiscfinder(simpletestcase)              a misc finder tests          ", "content": "import os\n\nfrom django.conf import settings\nfrom django.contrib.staticfiles import finders, storage\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.test import SimpleTestCase, override_settings\n\nfrom .cases import StaticFilesTestCase\nfrom .settings import TEST_ROOT\n\n\nclass TestFinders:\n    \"\"\"\n    Base finder test mixin.\n\n    On Windows, sometimes the case of the path we ask the finders for and the\n    path(s) they find can differ. Compare them using os.path.normcase() to\n    avoid false negatives.\n    \"\"\"\n    def test_find_first(self):\n        src, dst = self.find_first\n        found = self.finder.find(src)\n        self.assertEqual(os.path.normcase(found), os.path.normcase(dst))\n\n    def test_find_all(self):\n        src, dst = self.find_all\n        found = self.finder.find(src, all=True)\n        found = [os.path.normcase(f) for f in found]\n        dst = [os.path.normcase(d) for d in dst]\n        self.assertEqual(found, dst)\n\n\nclass TestFileSystemFinder(TestFinders, StaticFilesTestCase):\n    \"\"\"\n    Test FileSystemFinder.\n    \"\"\"\n    def setUp(self):\n        super().setUp()\n        self.finder = finders.FileSystemFinder()\n        test_file_path = os.path.join(TEST_ROOT, 'project', 'documents', 'test', 'file.txt')\n        self.find_first = (os.path.join('test', 'file.txt'), test_file_path)\n        self.find_all = (os.path.join('test', 'file.txt'), [test_file_path])\n\n\nclass TestAppDirectoriesFinder(TestFinders, StaticFilesTestCase):\n    \"\"\"\n    Test AppDirectoriesFinder.\n    \"\"\"\n    def setUp(self):\n        super().setUp()\n        self.finder = finders.AppDirectoriesFinder()\n        test_file_path = os.path.join(TEST_ROOT, 'apps', 'test', 'static', 'test', 'file1.txt')\n        self.find_first = (os.path.join('test', 'file1.txt'), test_file_path)\n        self.find_all = (os.path.join('test', 'file1.txt'), [test_file_path])\n\n\nclass TestDefaultStorageFinder(TestFinders, StaticFilesTestCase):\n    \"\"\"\n    Test DefaultStorageFinder.\n    \"\"\"\n    def setUp(self):\n        super().setUp()\n        self.finder = finders.DefaultStorageFinder(\n            storage=storage.StaticFilesStorage(location=settings.MEDIA_ROOT))\n        test_file_path = os.path.join(settings.MEDIA_ROOT, 'media-file.txt')\n        self.find_first = ('media-file.txt', test_file_path)\n        self.find_all = ('media-file.txt', [test_file_path])\n\n\n@override_settings(\n    STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n    STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'documents')],\n)\nclass TestMiscFinder(SimpleTestCase):\n    \"\"\"\n    A few misc finder tests.\n    \"\"\"\n    def test_get_finder(self):\n        self.assertIsInstance(finders.get_finder(\n            'django.contrib.staticfiles.finders.FileSystemFinder'),\n            finders.FileSystemFinder)\n\n    def test_get_finder_bad_classname(self):\n        with self.assertRaises(ImportError):\n            finders.get_finder('django.contrib.staticfiles.finders.FooBarFinder')\n\n    def test_get_finder_bad_module(self):\n        with self.assertRaises(ImportError):\n            finders.get_finder('foo.bar.FooBarFinder')\n\n    def test_cache(self):\n        finders.get_finder.cache_clear()\n        for n in range(10):\n            finders.get_finder('django.contrib.staticfiles.finders.FileSystemFinder')\n        cache_info = finders.get_finder.cache_info()\n        self.assertEqual(cache_info.hits, 9)\n        self.assertEqual(cache_info.currsize, 1)\n\n    def test_searched_locations(self):\n        finders.find('spam')\n        self.assertEqual(\n            finders.searched_locations,\n            [os.path.join(TEST_ROOT, 'project', 'documents')]\n        )\n\n    @override_settings(MEDIA_ROOT='')\n    def test_location_empty(self):\n        msg = (\n            \"The storage backend of the staticfiles finder \"\n            \"<class 'django.contrib.staticfiles.finders.DefaultStorageFinder'> \"\n            \"doesn't have a valid location.\"\n        )\n        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n            finders.DefaultStorageFinder()\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_finders.py", "id": "8ae16bae23deffed3477caa974ceffeb", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/staticfiles_tests/test_finders.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}