{"author": "ansible", "code": "\n\nimport optparse\nimport re\nfrom distutils.version import LooseVersion\n\nimport jinja2\nimport yaml\nfrom jinja2 import Environment, FileSystemLoader\n\nfrom ansible.playbook import Play\nfrom ansible.playbook.block import Block\nfrom ansible.playbook.role import Role\nfrom ansible.playbook.task import Task\n\ntemplate_file = 'playbooks_keywords.rst.j2'\noblist = {}\nclist = []\nclass_list = [Play, Role, Block, Task]\n\np = optparse.OptionParser(\n    version='%prog 1.0',\n    usage='usage: %prog [options]',\n    description='Generate playbook keyword documentation from code and descriptions',\n)\np.add_option(\"-T\", \"--template-dir\", action=\"store\", dest=\"template_dir\", default=\"../templates\", help=\"directory containing Jinja2 templates\")\np.add_option(\"-o\", \"--output-dir\", action=\"store\", dest=\"output_dir\", default='/tmp/', help=\"Output directory for rst files\")\np.add_option(\"-d\", \"--docs-source\", action=\"store\", dest=\"docs\", default=None, help=\"Source for attribute docs\")\n\n(options, args) = p.parse_args()\n\nfor aclass in class_list:\n    aobj = aclass()\n    name = type(aobj).__name__\n\n    if options.docs:\n        with open(options.docs) as f:\n            docs = yaml.safe_load(f)\n    else:\n        docs = {}\n\n    \n    clist.append(name)\n    oblist[name] = dict((x, aobj.__dict__['_attributes'][x]) for x in aobj.__dict__['_attributes'] if 'private' not in x or not x.private)\n\n    \n    for a in oblist[name]:\n        if a in docs:\n            oblist[name][a] = docs[a]\n        else:\n            oblist[name][a] = ' UNDOCUMENTED!! '\n\n    \n    if name == 'Task':\n        oblist[name]['with_<lookup_plugin>'] = 'DEPRECATED: use ``loop`` instead, ``with_`` used to be how loops were defined, '\n        'it can use any available lookup plugin to generate the item list'\n\n    \n    if 'action' in oblist[name]:\n        oblist[name]['local_action'] = 'Same as action but also implies ``delegate_to: localhost``'\n\n    # remove unusable (used to be private?)\n    for nouse in ('loop_args'):\n        if nouse in oblist[name]:\n            del oblist[name][nouse]\n\nenv = Environment(loader=FileSystemLoader(options.template_dir), trim_blocks=True,)\ntemplate = env.get_template(template_file)\noutputname = options.output_dir + template_file.replace('.j2', '')\ntempvars = {'oblist': oblist, 'clist': clist}\n\nkeyword_page = template.render(tempvars)\nif LooseVersion(jinja2.__version__) < LooseVersion('2.10'):\n    \n    keyword_page = re.sub(' +\\n', '\\n', keyword_page)\n\nwith open(outputname, 'w') as f:\n    f.write(keyword_page)\n", "comments": "   usr bin env python    build ordered list loop dict attributes    pick docs exist    loop really  users    local action implicit action    remove unusable (used private )    jinja2   2 10 indent filter indents blank lines   cleanup ", "content": "#!/usr/bin/env python\n\nimport optparse\nimport re\nfrom distutils.version import LooseVersion\n\nimport jinja2\nimport yaml\nfrom jinja2 import Environment, FileSystemLoader\n\nfrom ansible.playbook import Play\nfrom ansible.playbook.block import Block\nfrom ansible.playbook.role import Role\nfrom ansible.playbook.task import Task\n\ntemplate_file = 'playbooks_keywords.rst.j2'\noblist = {}\nclist = []\nclass_list = [Play, Role, Block, Task]\n\np = optparse.OptionParser(\n    version='%prog 1.0',\n    usage='usage: %prog [options]',\n    description='Generate playbook keyword documentation from code and descriptions',\n)\np.add_option(\"-T\", \"--template-dir\", action=\"store\", dest=\"template_dir\", default=\"../templates\", help=\"directory containing Jinja2 templates\")\np.add_option(\"-o\", \"--output-dir\", action=\"store\", dest=\"output_dir\", default='/tmp/', help=\"Output directory for rst files\")\np.add_option(\"-d\", \"--docs-source\", action=\"store\", dest=\"docs\", default=None, help=\"Source for attribute docs\")\n\n(options, args) = p.parse_args()\n\nfor aclass in class_list:\n    aobj = aclass()\n    name = type(aobj).__name__\n\n    if options.docs:\n        with open(options.docs) as f:\n            docs = yaml.safe_load(f)\n    else:\n        docs = {}\n\n    # build ordered list to loop over and dict with attributes\n    clist.append(name)\n    oblist[name] = dict((x, aobj.__dict__['_attributes'][x]) for x in aobj.__dict__['_attributes'] if 'private' not in x or not x.private)\n\n    # pick up docs if they exist\n    for a in oblist[name]:\n        if a in docs:\n            oblist[name][a] = docs[a]\n        else:\n            oblist[name][a] = ' UNDOCUMENTED!! '\n\n    # loop is really with_ for users\n    if name == 'Task':\n        oblist[name]['with_<lookup_plugin>'] = 'DEPRECATED: use ``loop`` instead, ``with_`` used to be how loops were defined, '\n        'it can use any available lookup plugin to generate the item list'\n\n    # local_action is implicit with action\n    if 'action' in oblist[name]:\n        oblist[name]['local_action'] = 'Same as action but also implies ``delegate_to: localhost``'\n\n    # remove unusable (used to be private?)\n    for nouse in ('loop_args'):\n        if nouse in oblist[name]:\n            del oblist[name][nouse]\n\nenv = Environment(loader=FileSystemLoader(options.template_dir), trim_blocks=True,)\ntemplate = env.get_template(template_file)\noutputname = options.output_dir + template_file.replace('.j2', '')\ntempvars = {'oblist': oblist, 'clist': clist}\n\nkeyword_page = template.render(tempvars)\nif LooseVersion(jinja2.__version__) < LooseVersion('2.10'):\n    # jinja2 < 2.10's indent filter indents blank lines.  Cleanup\n    keyword_page = re.sub(' +\\n', '\\n', keyword_page)\n\nwith open(outputname, 'w') as f:\n    f.write(keyword_page)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "dump_keywords.py", "id": "1cf4d3c7527878e6215e7b7bebbf5bd8", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/docs/bin/dump_keywords.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}