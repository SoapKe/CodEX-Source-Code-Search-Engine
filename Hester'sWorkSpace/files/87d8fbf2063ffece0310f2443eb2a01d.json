{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport numpy as np\nfrom six.moves import xrange\n\n\nclass spaces(object):\n  discrete = 0\n  box = 1\n\n\ndef get_space(space):\n  if hasattr(space, 'n'):\n    return space.n, spaces.discrete, None\n  elif hasattr(space, 'shape'):\n    return np.prod(space.shape), spaces.box, (space.low, space.high)\n\n\ndef get_spaces(spaces):\n  if hasattr(spaces, 'spaces'):\n    return zip(*[get_space(space) for space in spaces.spaces])\n  else:\n    return [(ret,) for ret in get_space(spaces)]\n\n\nclass EnvSpec(object):\n\n  def __init__(self, env, try_combining_actions=True,\n               discretize_actions=None):\n    self.discretize_actions = discretize_actions\n\n     figure out observation space\n    self.obs_space = env.observation_space\n    self.obs_dims, self.obs_types, self.obs_info = get_spaces(self.obs_space)\n\n     figure out action space\n    self.act_space = env.action_space\n    self.act_dims, self.act_types, self.act_info = get_spaces(self.act_space)\n\n    if self.discretize_actions:\n      self._act_dims = self.act_dims[:]\n      self._act_types = self.act_types[:]\n      self.act_dims = []\n      self.act_types = []\n      for i, (dim, typ) in enumerate(zip(self._act_dims, self._act_types)):\n        if typ == spaces.discrete:\n          self.act_dims.append(dim)\n          self.act_types.append(spaces.discrete)\n        elif typ == spaces.box:\n          for _ in xrange(dim):\n            self.act_dims.append(self.discretize_actions)\n            self.act_types.append(spaces.discrete)\n    else:\n      self._act_dims = None\n      self._act_types = None\n\n    if (try_combining_actions and\n        all(typ == spaces.discrete for typ in self.act_types)):\n      self.combine_actions = True\n      self.orig_act_dims = self.act_dims[:]\n      self.orig_act_types = self.act_types[:]\n      total_act_dim = 1\n      for dim in self.act_dims:\n        total_act_dim *= dim\n      self.act_dims = [total_act_dim]\n      self.act_types = [spaces.discrete]\n    else:\n      self.combine_actions = False\n\n    self.obs_dims_and_types = zip(self.obs_dims, self.obs_types)\n    self.act_dims_and_types = zip(self.act_dims, self.act_types)\n\n    self.total_obs_dim = sum(self.obs_dims)\n    self.total_sampling_act_dim = sum(self.sampling_dim(dim, typ)\n                                      for dim, typ in self.act_dims_and_types)\n    self.total_sampled_act_dim = sum(self.act_dims)\n\n  def sampling_dim(self, dim, typ):\n    if typ == spaces.discrete:\n      return dim\n    elif typ == spaces.box:\n      return 2 * dim   Gaussian mean and std\n    else:\n      assert False\n\n  def convert_actions_to_env(self, actions):\n    if self.combine_actions:\n      new_actions = []\n      actions = actions[0]\n      for dim in self.orig_act_dims:\n        new_actions.append(np.mod(actions, dim))\n        actions = (actions / dim).astype('int32')\n      actions = new_actions\n\n    if self.discretize_actions:\n      new_actions = []\n      idx = 0\n      for i, (dim, typ) in enumerate(zip(self._act_dims, self._act_types)):\n        if typ == spaces.discrete:\n          new_actions.append(actions[idx])\n          idx += 1\n        elif typ == spaces.box:\n          low, high = self.act_info[i]\n          cur_action = []\n          for j in xrange(dim):\n            cur_action.append(\n                low[j] + (high[j] - low[j]) * actions[idx] /\n                float(self.discretize_actions))\n            idx += 1\n          new_actions.append(np.hstack(cur_action))\n      actions = new_actions\n\n    return actions\n\n  def convert_env_actions_to_actions(self, actions):\n    if not self.combine_actions:\n      return actions\n\n    new_actions = 0\n    base = 1\n    for act, dim in zip(actions, self.orig_act_dims):\n      new_actions = new_actions + base * act\n      base *= dim\n\n    return [new_actions]\n\n  def convert_obs_to_list(self, obs):\n    if len(self.obs_dims) == 1:\n      return [obs]\n    else:\n      return list(obs)\n\n  def convert_action_to_gym(self, action):\n    if len(action) == 1:\n      return action[0]\n    else:\n      return list(action)\n    if ((not self.combine_actions or len(self.orig_act_dims) == 1) and\n        (len(self.act_dims) == 1 or\n         (self.discretize_actions and len(self._act_dims) == 1))):\n      return action[0]\n    else:\n      return list(action)\n\n  def initial_obs(self, batch_size):\n    batched = batch_size is not None\n    batch_size = batch_size or 1\n\n    obs = []\n    for dim, typ in self.obs_dims_and_types:\n      if typ == spaces.discrete:\n        obs.append(np.zeros(batch_size))\n      elif typ == spaces.box:\n        obs.append(np.zeros([batch_size, dim]))\n\n    if batched:\n      return obs\n    else:\n      return zip(*obs)[0]\n\n  def initial_act(self, batch_size=None):\n    batched = batch_size is not None\n    batch_size = batch_size or 1\n\n    act = []\n    for dim, typ in self.act_dims_and_types:\n      if typ == spaces.discrete:\n        act.append(-np.ones(batch_size))\n      elif typ == spaces.box:\n        act.append(-np.ones([batch_size, dim]))\n\n    if batched:\n      return act\n    else:\n      return zip(*act)[0]\n\n  def is_discrete(self, typ):\n    return typ == spaces.discrete\n\n  def is_box(self, typ):\n    return typ == spaces.box\n", "comments": "   utilities environment interface agent   tensorflow        copyright 2017 the tensorflow authors all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       figure observation space    figure action space    gaussian mean std ", "content": "# Copyright 2017 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"Utilities for environment interface with agent / tensorflow.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport numpy as np\nfrom six.moves import xrange\n\n\nclass spaces(object):\n  discrete = 0\n  box = 1\n\n\ndef get_space(space):\n  if hasattr(space, 'n'):\n    return space.n, spaces.discrete, None\n  elif hasattr(space, 'shape'):\n    return np.prod(space.shape), spaces.box, (space.low, space.high)\n\n\ndef get_spaces(spaces):\n  if hasattr(spaces, 'spaces'):\n    return zip(*[get_space(space) for space in spaces.spaces])\n  else:\n    return [(ret,) for ret in get_space(spaces)]\n\n\nclass EnvSpec(object):\n\n  def __init__(self, env, try_combining_actions=True,\n               discretize_actions=None):\n    self.discretize_actions = discretize_actions\n\n    # figure out observation space\n    self.obs_space = env.observation_space\n    self.obs_dims, self.obs_types, self.obs_info = get_spaces(self.obs_space)\n\n    # figure out action space\n    self.act_space = env.action_space\n    self.act_dims, self.act_types, self.act_info = get_spaces(self.act_space)\n\n    if self.discretize_actions:\n      self._act_dims = self.act_dims[:]\n      self._act_types = self.act_types[:]\n      self.act_dims = []\n      self.act_types = []\n      for i, (dim, typ) in enumerate(zip(self._act_dims, self._act_types)):\n        if typ == spaces.discrete:\n          self.act_dims.append(dim)\n          self.act_types.append(spaces.discrete)\n        elif typ == spaces.box:\n          for _ in xrange(dim):\n            self.act_dims.append(self.discretize_actions)\n            self.act_types.append(spaces.discrete)\n    else:\n      self._act_dims = None\n      self._act_types = None\n\n    if (try_combining_actions and\n        all(typ == spaces.discrete for typ in self.act_types)):\n      self.combine_actions = True\n      self.orig_act_dims = self.act_dims[:]\n      self.orig_act_types = self.act_types[:]\n      total_act_dim = 1\n      for dim in self.act_dims:\n        total_act_dim *= dim\n      self.act_dims = [total_act_dim]\n      self.act_types = [spaces.discrete]\n    else:\n      self.combine_actions = False\n\n    self.obs_dims_and_types = zip(self.obs_dims, self.obs_types)\n    self.act_dims_and_types = zip(self.act_dims, self.act_types)\n\n    self.total_obs_dim = sum(self.obs_dims)\n    self.total_sampling_act_dim = sum(self.sampling_dim(dim, typ)\n                                      for dim, typ in self.act_dims_and_types)\n    self.total_sampled_act_dim = sum(self.act_dims)\n\n  def sampling_dim(self, dim, typ):\n    if typ == spaces.discrete:\n      return dim\n    elif typ == spaces.box:\n      return 2 * dim  # Gaussian mean and std\n    else:\n      assert False\n\n  def convert_actions_to_env(self, actions):\n    if self.combine_actions:\n      new_actions = []\n      actions = actions[0]\n      for dim in self.orig_act_dims:\n        new_actions.append(np.mod(actions, dim))\n        actions = (actions / dim).astype('int32')\n      actions = new_actions\n\n    if self.discretize_actions:\n      new_actions = []\n      idx = 0\n      for i, (dim, typ) in enumerate(zip(self._act_dims, self._act_types)):\n        if typ == spaces.discrete:\n          new_actions.append(actions[idx])\n          idx += 1\n        elif typ == spaces.box:\n          low, high = self.act_info[i]\n          cur_action = []\n          for j in xrange(dim):\n            cur_action.append(\n                low[j] + (high[j] - low[j]) * actions[idx] /\n                float(self.discretize_actions))\n            idx += 1\n          new_actions.append(np.hstack(cur_action))\n      actions = new_actions\n\n    return actions\n\n  def convert_env_actions_to_actions(self, actions):\n    if not self.combine_actions:\n      return actions\n\n    new_actions = 0\n    base = 1\n    for act, dim in zip(actions, self.orig_act_dims):\n      new_actions = new_actions + base * act\n      base *= dim\n\n    return [new_actions]\n\n  def convert_obs_to_list(self, obs):\n    if len(self.obs_dims) == 1:\n      return [obs]\n    else:\n      return list(obs)\n\n  def convert_action_to_gym(self, action):\n    if len(action) == 1:\n      return action[0]\n    else:\n      return list(action)\n    if ((not self.combine_actions or len(self.orig_act_dims) == 1) and\n        (len(self.act_dims) == 1 or\n         (self.discretize_actions and len(self._act_dims) == 1))):\n      return action[0]\n    else:\n      return list(action)\n\n  def initial_obs(self, batch_size):\n    batched = batch_size is not None\n    batch_size = batch_size or 1\n\n    obs = []\n    for dim, typ in self.obs_dims_and_types:\n      if typ == spaces.discrete:\n        obs.append(np.zeros(batch_size))\n      elif typ == spaces.box:\n        obs.append(np.zeros([batch_size, dim]))\n\n    if batched:\n      return obs\n    else:\n      return zip(*obs)[0]\n\n  def initial_act(self, batch_size=None):\n    batched = batch_size is not None\n    batch_size = batch_size or 1\n\n    act = []\n    for dim, typ in self.act_dims_and_types:\n      if typ == spaces.discrete:\n        act.append(-np.ones(batch_size))\n      elif typ == spaces.box:\n        act.append(-np.ones([batch_size, dim]))\n\n    if batched:\n      return act\n    else:\n      return zip(*act)[0]\n\n  def is_discrete(self, typ):\n    return typ == spaces.discrete\n\n  def is_box(self, typ):\n    return typ == spaces.box\n", "description": "Models and examples built with TensorFlow", "file_name": "env_spec.py", "id": "87d8fbf2063ffece0310f2443eb2a01d", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/pcl_rl/env_spec.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}