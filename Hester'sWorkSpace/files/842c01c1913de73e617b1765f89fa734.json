{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    float_or_none,\n    mimetype2ext,\n)\n\n\nclass OnionStudiosIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?onionstudios\\.com/(?:video(?:s/[^/]+-|/)|embed\\?.*\\bid=)(?P<id>\\d+)(?!-)'\n\n    _TESTS = [{\n        'url': 'http://www.onionstudios.com/videos/hannibal-charges-forward-stops-for-a-cocktail-2937',\n        'md5': '719d1f8c32094b8c33902c17bcae5e34',\n        'info_dict': {\n            'id': '2937',\n            'ext': 'mp4',\n            'title': 'Hannibal charges forward, stops for a cocktail',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'The A.V. Club',\n            'uploader_id': 'the-av-club',\n        },\n    }, {\n        'url': 'http://www.onionstudios.com/embed?id=2855&autoplay=true',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.onionstudios.com/video/6139.json',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_url(webpage):\n        mobj = re.search(\n            r'(?s)<(?:iframe|bulbs-video)[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?onionstudios\\.com/(?:embed.+?|video/\\d+\\.json))\\1', webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video_data = self._download_json(\n            'http://www.onionstudios.com/video/%s.json' % video_id, video_id)\n\n        title = video_data['title']\n\n        formats = []\n        for source in video_data.get('sources', []):\n            source_url = source.get('url')\n            if not source_url:\n                continue\n            ext = mimetype2ext(source.get('content_type')) or determine_ext(source_url)\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    source_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n            else:\n                tbr = int_or_none(source.get('bitrate'))\n                formats.append({\n                    'format_id': ext + ('-%d' % tbr if tbr else ''),\n                    'url': source_url,\n                    'width': int_or_none(source.get('width')),\n                    'tbr': tbr,\n                    'ext': ext,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': video_data.get('poster_url'),\n            'uploader': video_data.get('channel_name'),\n            'uploader_id': video_data.get('channel_slug'),\n            'duration': float_or_none(video_data.get('duration', 1000)),\n            'tags': video_data.get('tags'),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    float_or_none,\n    mimetype2ext,\n)\n\n\nclass OnionStudiosIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?onionstudios\\.com/(?:video(?:s/[^/]+-|/)|embed\\?.*\\bid=)(?P<id>\\d+)(?!-)'\n\n    _TESTS = [{\n        'url': 'http://www.onionstudios.com/videos/hannibal-charges-forward-stops-for-a-cocktail-2937',\n        'md5': '719d1f8c32094b8c33902c17bcae5e34',\n        'info_dict': {\n            'id': '2937',\n            'ext': 'mp4',\n            'title': 'Hannibal charges forward, stops for a cocktail',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'The A.V. Club',\n            'uploader_id': 'the-av-club',\n        },\n    }, {\n        'url': 'http://www.onionstudios.com/embed?id=2855&autoplay=true',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.onionstudios.com/video/6139.json',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_url(webpage):\n        mobj = re.search(\n            r'(?s)<(?:iframe|bulbs-video)[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?onionstudios\\.com/(?:embed.+?|video/\\d+\\.json))\\1', webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video_data = self._download_json(\n            'http://www.onionstudios.com/video/%s.json' % video_id, video_id)\n\n        title = video_data['title']\n\n        formats = []\n        for source in video_data.get('sources', []):\n            source_url = source.get('url')\n            if not source_url:\n                continue\n            ext = mimetype2ext(source.get('content_type')) or determine_ext(source_url)\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    source_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n            else:\n                tbr = int_or_none(source.get('bitrate'))\n                formats.append({\n                    'format_id': ext + ('-%d' % tbr if tbr else ''),\n                    'url': source_url,\n                    'width': int_or_none(source.get('width')),\n                    'tbr': tbr,\n                    'ext': ext,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': video_data.get('poster_url'),\n            'uploader': video_data.get('channel_name'),\n            'uploader_id': video_data.get('channel_slug'),\n            'duration': float_or_none(video_data.get('duration', 1000)),\n            'tags': video_data.get('tags'),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "onionstudios.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/onionstudios.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}