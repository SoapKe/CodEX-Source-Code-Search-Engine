{"author": "sympy", "code": "\"\"\"\nThis module exports all latin and greek letters as Symbols, so you can\nconveniently do\n\n    >>> from sympy.abc import x, y\n\ninstead of the slightly more clunky-looking\n\n    >>> from sympy import symbols\n    >>> x, y = symbols('x y')\n\nCaveats\n=======\n\n1. As of the time of writing this, the names ``C``, ``O``, ``S``, ``I``, ``N``,\n``E``, and ``Q`` are colliding with names defined in SymPy. If you import them\nfrom both ``sympy.abc`` and ``sympy``, the second import will \"win\".\nThis is an issue only for * imports, which should only be used for short-lived\ncode such as interactive sessions and throwaway scripts that do not survive\nuntil the next SymPy upgrade, where ``sympy`` may contain a different set of\nnames.\n\n2. This module does not define symbol names on demand, i.e.\n```from sympy.abc import foo``` will be reported as an error because\n``sympy.abc`` does not contain the name ``foo``. To get a symbol named `'foo'`,\nyou still need to use ``Symbol('foo')`` or ``symbols('foo')``.\nYou can freely mix usage of ``sympy.abc`` and ``Symbol``/``symbols``, though\nsticking with one and only one way to get the symbols does tend to make the code\nmore readable.\n\"\"\"\n\nfrom __future__ import print_function, division\n\nimport string\n\nfrom .core import Symbol, symbols\nfrom .core.alphabets import greeks\nfrom .core.compatibility import exec_\n\n\n\n()\n\n\na, b, c, d, e, f, g, h, i, j = symbols('a, b, c, d, e, f, g, h, i, j')\nk, l, m, n, o, p, q, r, s, t = symbols('k, l, m, n, o, p, q, r, s, t')\nu, v, w, x, y, z = symbols('u, v, w, x, y, z')\n\nA, B, C, D, E, F, G, H, I, J = symbols('A, B, C, D, E, F, G, H, I, J')\nK, L, M, N, O, P, Q, R, S, T = symbols('K, L, M, N, O, P, Q, R, S, T')\nU, V, W, X, Y, Z = symbols('U, V, W, X, Y, Z')\n\nalpha, beta, gamma, delta = symbols('alpha, beta, gamma, delta')\nepsilon, zeta, eta, theta = symbols('epsilon, zeta, eta, theta')\niota, kappa, lamda, mu = symbols('iota, kappa, lamda, mu')\nnu, xi, omicron, pi = symbols('nu, xi, omicron, pi')\nrho, sigma, tau, upsilon = symbols('rho, sigma, tau, upsilon')\nphi, chi, psi, omega = symbols('phi, chi, psi, omega')\n\n\n\n\n\n\n\n_latin = list(string.ascii_letters)\n\n_greek = list(greeks) \n\n_greek.remove(\"lambda\")\n_greek.append(\"lamda\")\n\ndef clashing():\n    \"\"\"Return the clashing-symbols dictionaries.\n\n    ``clash1`` defines all the single letter variables that clash with\n    SymPy objects; ``clash2`` defines the multi-letter clashing symbols;\n    and ``clash`` is the union of both. These can be passed for ``locals``\n    during sympification if one desires Symbols rather than the non-Symbol\n    objects for those names.\n\n    Examples\n    ========\n\n    >>> from sympy import S\n    >>> from sympy.abc import _clash1, _clash2, _clash\n    >>> S(\"Q & C\", locals=_clash1)\n    And(C, Q)\n    >>> S('pi(x)', locals=_clash2)\n    pi(x)\n    >>> S('pi(C, Q)', locals=_clash)\n    pi(C, Q)\n\n    Note: if changes are made to the docstring examples they can only\n    be tested after removing \"clashing\" from the list of deleted items\n    at the bottom of this file which removes this function from the\n    namespace.\n    \"\"\"\n\n    ns = {}\n    exec_('from sympy import *', ns)\n    clash1 = {}\n    clash2 = {}\n    while ns:\n        k, _ = ns.popitem()\n        if k in _greek:\n            clash2[k] = Symbol(k)\n            _greek.remove(k)\n        elif k in _latin:\n            clash1[k] = Symbol(k)\n            _latin.remove(k)\n    clash = {}\n    clash.update(clash1)\n    clash.update(clash2)\n    return clash1, clash2, clash\n\n_clash1, _clash2, _clash = clashing()\n\ndel _latin, _greek, clashing, Symbol\n", "comments": "    this module exports latin greek letters symbols  conveniently          sympy abc import x   instead slightly clunky looking          sympy import symbols         x    symbols( x )  caveats          1  as time writing  names   c      o      s      i      n      e      q   colliding names defined sympy  if import   sympy abc     sympy    second import  win   this issue   imports  used short lived code interactive sessions throwaway scripts survive next sympy upgrade    sympy   may contain different set names   2  this module define symbol names demand  e     sympy abc import foo    reported error   sympy abc   contain name   foo    to get symbol named   foo    still need use   symbol( foo )     symbols( foo )    you freely mix usage   sympy abc     symbol     symbols    though sticking one one way get symbols tend make code readable         future   import print function  division  import string   core import symbol  symbols  core alphabets import greeks  core compatibility import exec         symbol definitions          implementation note  the easiest way avoid typos symbols()   parameter copy left hand side assignment    b  c   e  f  g  h   j   symbols(  b  c   e  f  g  h   j ) k  l   n   p  q  r     symbols( k  l   n   p  q  r   ) u  v  w  x   z   symbols( u  v  w  x   z )  a  b  c  d  e  f  g  h  i  j   symbols( a  b  c  d  e  f  g  h  i  j ) k  l  m  n  o  p  q  r  s  t   symbols( k  l  m  n  o  p  q  r  s  t ) u  v  w  x  y  z   symbols( u  v  w  x  y  z )  alpha  beta  gamma  delta   symbols( alpha  beta  gamma  delta ) epsilon  zeta  eta  theta   symbols( epsilon  zeta  eta  theta ) iota  kappa  lamda  mu   symbols( iota  kappa  lamda  mu ) nu  xi  omicron  pi   symbols( nu  xi  omicron  pi ) rho  sigma  tau  upsilon   symbols( rho  sigma  tau  upsilon ) phi  chi  psi  omega   symbols( phi  chi  psi  omega )         clashing symbols diagnostics          we want know names sympy collide    this mostly diagnosing sympy namespace sympy development    latin   list(string ascii letters)   osineq imported clash  gamma  pi zeta clash   greek   list(greeks)   make copy  mutate   note  we import lamda since lambda reserved keyword python  greek remove( lambda )  greek append( lamda )  def clashing()         return clashing symbols dictionaries         clash1   defines single letter variables clash     sympy objects    clash2   defines multi letter clashing symbols        clash   union  these passed   locals       sympification one desires symbols rather non symbol     objects names       examples                       sympy import s         sympy abc import  clash1   clash2   clash         s( q   c   locals  clash1)     and(c  q)         s( pi(x)   locals  clash2)     pi(x)         s( pi(c  q)   locals  clash)     pi(c  q)      note  changes made docstring examples     tested removing  clashing  list deleted items     bottom file removes function     namespace                 symbol definitions          implementation note  the easiest way avoid typos symbols()    parameter copy left hand side assignment         clashing symbols diagnostics          we want know names sympy collide     this mostly diagnosing sympy namespace sympy development     osineq imported clash  gamma  pi zeta clash     make copy  mutate    note  we import lamda since lambda reserved keyword python ", "content": "\"\"\"\nThis module exports all latin and greek letters as Symbols, so you can\nconveniently do\n\n    >>> from sympy.abc import x, y\n\ninstead of the slightly more clunky-looking\n\n    >>> from sympy import symbols\n    >>> x, y = symbols('x y')\n\nCaveats\n=======\n\n1. As of the time of writing this, the names ``C``, ``O``, ``S``, ``I``, ``N``,\n``E``, and ``Q`` are colliding with names defined in SymPy. If you import them\nfrom both ``sympy.abc`` and ``sympy``, the second import will \"win\".\nThis is an issue only for * imports, which should only be used for short-lived\ncode such as interactive sessions and throwaway scripts that do not survive\nuntil the next SymPy upgrade, where ``sympy`` may contain a different set of\nnames.\n\n2. This module does not define symbol names on demand, i.e.\n```from sympy.abc import foo``` will be reported as an error because\n``sympy.abc`` does not contain the name ``foo``. To get a symbol named `'foo'`,\nyou still need to use ``Symbol('foo')`` or ``symbols('foo')``.\nYou can freely mix usage of ``sympy.abc`` and ``Symbol``/``symbols``, though\nsticking with one and only one way to get the symbols does tend to make the code\nmore readable.\n\"\"\"\n\nfrom __future__ import print_function, division\n\nimport string\n\nfrom .core import Symbol, symbols\nfrom .core.alphabets import greeks\nfrom .core.compatibility import exec_\n\n##### Symbol definitions #####\n\n# Implementation note: The easiest way to avoid typos in the symbols()\n# parameter is to copy it from the left-hand side of the assignment.\n\na, b, c, d, e, f, g, h, i, j = symbols('a, b, c, d, e, f, g, h, i, j')\nk, l, m, n, o, p, q, r, s, t = symbols('k, l, m, n, o, p, q, r, s, t')\nu, v, w, x, y, z = symbols('u, v, w, x, y, z')\n\nA, B, C, D, E, F, G, H, I, J = symbols('A, B, C, D, E, F, G, H, I, J')\nK, L, M, N, O, P, Q, R, S, T = symbols('K, L, M, N, O, P, Q, R, S, T')\nU, V, W, X, Y, Z = symbols('U, V, W, X, Y, Z')\n\nalpha, beta, gamma, delta = symbols('alpha, beta, gamma, delta')\nepsilon, zeta, eta, theta = symbols('epsilon, zeta, eta, theta')\niota, kappa, lamda, mu = symbols('iota, kappa, lamda, mu')\nnu, xi, omicron, pi = symbols('nu, xi, omicron, pi')\nrho, sigma, tau, upsilon = symbols('rho, sigma, tau, upsilon')\nphi, chi, psi, omega = symbols('phi, chi, psi, omega')\n\n\n##### Clashing-symbols diagnostics #####\n\n# We want to know which names in SymPy collide with those in here.\n# This is mostly for diagnosing SymPy's namespace during SymPy development.\n\n_latin = list(string.ascii_letters)\n# OSINEQ should not be imported as they clash; gamma, pi and zeta clash, too\n_greek = list(greeks) # make a copy, so we can mutate it\n# Note: We import lamda since lambda is a reserved keyword in Python\n_greek.remove(\"lambda\")\n_greek.append(\"lamda\")\n\ndef clashing():\n    \"\"\"Return the clashing-symbols dictionaries.\n\n    ``clash1`` defines all the single letter variables that clash with\n    SymPy objects; ``clash2`` defines the multi-letter clashing symbols;\n    and ``clash`` is the union of both. These can be passed for ``locals``\n    during sympification if one desires Symbols rather than the non-Symbol\n    objects for those names.\n\n    Examples\n    ========\n\n    >>> from sympy import S\n    >>> from sympy.abc import _clash1, _clash2, _clash\n    >>> S(\"Q & C\", locals=_clash1)\n    And(C, Q)\n    >>> S('pi(x)', locals=_clash2)\n    pi(x)\n    >>> S('pi(C, Q)', locals=_clash)\n    pi(C, Q)\n\n    Note: if changes are made to the docstring examples they can only\n    be tested after removing \"clashing\" from the list of deleted items\n    at the bottom of this file which removes this function from the\n    namespace.\n    \"\"\"\n\n    ns = {}\n    exec_('from sympy import *', ns)\n    clash1 = {}\n    clash2 = {}\n    while ns:\n        k, _ = ns.popitem()\n        if k in _greek:\n            clash2[k] = Symbol(k)\n            _greek.remove(k)\n        elif k in _latin:\n            clash1[k] = Symbol(k)\n            _latin.remove(k)\n    clash = {}\n    clash.update(clash1)\n    clash.update(clash2)\n    return clash1, clash2, clash\n\n_clash1, _clash2, _clash = clashing()\n\ndel _latin, _greek, clashing, Symbol\n", "description": "A computer algebra system written in pure Python", "file_name": "abc.py", "id": "9527079091433ee8befb38c192476a2a", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/abc.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}