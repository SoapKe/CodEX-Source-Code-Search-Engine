{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport datetime\nimport hashlib\nimport hmac\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_urlencode\n\n\nclass AWSIE(InfoExtractor):\n    _AWS_ALGORITHM = 'AWS4-HMAC-SHA256'\n    _AWS_REGION = 'us-east-1'\n\n    def _aws_execute_api(self, aws_dict, video_id, query=None):\n        query = query or {}\n        amz_date = datetime.datetime.utcnow().strftime('%Y%m%dT%H%M%SZ')\n        date = amz_date[:8]\n        headers = {\n            'Accept': 'application/json',\n            'Host': self._AWS_PROXY_HOST,\n            'X-Amz-Date': amz_date,\n            'X-Api-Key': self._AWS_API_KEY\n        }\n        session_token = aws_dict.get('session_token')\n        if session_token:\n            headers['X-Amz-Security-Token'] = session_token\n\n        def aws_hash(s):\n            return hashlib.sha256(s.encode('utf-8')).hexdigest()\n\n        \n        canonical_querystring = compat_urllib_parse_urlencode(query)\n        canonical_headers = ''\n        for header_name, header_value in sorted(headers.items()):\n            canonical_headers += '%s:%s\\n' % (header_name.lower(), header_value)\n        signed_headers = ';'.join([header.lower() for header in sorted(headers.keys())])\n        canonical_request = '\\n'.join([\n            'GET',\n            aws_dict['uri'],\n            canonical_querystring,\n            canonical_headers,\n            signed_headers,\n            aws_hash('')\n        ])\n\n        \n        credential_scope_list = [date, self._AWS_REGION, 'execute-api', 'aws4_request']\n        credential_scope = '/'.join(credential_scope_list)\n        string_to_sign = '\\n'.join([self._AWS_ALGORITHM, amz_date, credential_scope, aws_hash(canonical_request)])\n\n        \n        def aws_hmac(key, msg):\n            return hmac.new(key, msg.encode('utf-8'), hashlib.sha256)\n\n        def aws_hmac_digest(key, msg):\n            return aws_hmac(key, msg).digest()\n\n        def aws_hmac_hexdigest(key, msg):\n            return aws_hmac(key, msg).hexdigest()\n\n        k_signing = ('AWS4' + aws_dict['secret_key']).encode('utf-8')\n        for value in credential_scope_list:\n            k_signing = aws_hmac_digest(k_signing, value)\n\n        signature = aws_hmac_hexdigest(k_signing, string_to_sign)\n\n        \n        headers['Authorization'] = ', '.join([\n            '%s Credential=%s/%s' % (self._AWS_ALGORITHM, aws_dict['access_key'], credential_scope),\n            'SignedHeaders=%s' % signed_headers,\n            'Signature=%s' % signature,\n        ])\n\n        return self._download_json(\n            'https://%s%s%s' % (self._AWS_PROXY_HOST, aws_dict['uri'], '?' + canonical_querystring if canonical_querystring else ''),\n            video_id, headers=headers)\n", "comments": "# coding: utf-8\n# Task 1: http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n# Task 2: http://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n# Task 3: http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n# Task 4: http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport datetime\nimport hashlib\nimport hmac\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_urlencode\n\n\nclass AWSIE(InfoExtractor):\n    _AWS_ALGORITHM = 'AWS4-HMAC-SHA256'\n    _AWS_REGION = 'us-east-1'\n\n    def _aws_execute_api(self, aws_dict, video_id, query=None):\n        query = query or {}\n        amz_date = datetime.datetime.utcnow().strftime('%Y%m%dT%H%M%SZ')\n        date = amz_date[:8]\n        headers = {\n            'Accept': 'application/json',\n            'Host': self._AWS_PROXY_HOST,\n            'X-Amz-Date': amz_date,\n            'X-Api-Key': self._AWS_API_KEY\n        }\n        session_token = aws_dict.get('session_token')\n        if session_token:\n            headers['X-Amz-Security-Token'] = session_token\n\n        def aws_hash(s):\n            return hashlib.sha256(s.encode('utf-8')).hexdigest()\n\n        # Task 1: http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n        canonical_querystring = compat_urllib_parse_urlencode(query)\n        canonical_headers = ''\n        for header_name, header_value in sorted(headers.items()):\n            canonical_headers += '%s:%s\\n' % (header_name.lower(), header_value)\n        signed_headers = ';'.join([header.lower() for header in sorted(headers.keys())])\n        canonical_request = '\\n'.join([\n            'GET',\n            aws_dict['uri'],\n            canonical_querystring,\n            canonical_headers,\n            signed_headers,\n            aws_hash('')\n        ])\n\n        # Task 2: http://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n        credential_scope_list = [date, self._AWS_REGION, 'execute-api', 'aws4_request']\n        credential_scope = '/'.join(credential_scope_list)\n        string_to_sign = '\\n'.join([self._AWS_ALGORITHM, amz_date, credential_scope, aws_hash(canonical_request)])\n\n        # Task 3: http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n        def aws_hmac(key, msg):\n            return hmac.new(key, msg.encode('utf-8'), hashlib.sha256)\n\n        def aws_hmac_digest(key, msg):\n            return aws_hmac(key, msg).digest()\n\n        def aws_hmac_hexdigest(key, msg):\n            return aws_hmac(key, msg).hexdigest()\n\n        k_signing = ('AWS4' + aws_dict['secret_key']).encode('utf-8')\n        for value in credential_scope_list:\n            k_signing = aws_hmac_digest(k_signing, value)\n\n        signature = aws_hmac_hexdigest(k_signing, string_to_sign)\n\n        # Task 4: http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        headers['Authorization'] = ', '.join([\n            '%s Credential=%s/%s' % (self._AWS_ALGORITHM, aws_dict['access_key'], credential_scope),\n            'SignedHeaders=%s' % signed_headers,\n            'Signature=%s' % signature,\n        ])\n\n        return self._download_json(\n            'https://%s%s%s' % (self._AWS_PROXY_HOST, aws_dict['uri'], '?' + canonical_querystring if canonical_querystring else ''),\n            video_id, headers=headers)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "aws.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/aws.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}