{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport time\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_ord,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n)\n\n\nclass XMinusIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?x-minus\\.org/track/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://x-minus.org/track/4542/%D0%BF%D0%B5%D1%81%D0%B5%D0%BD%D0%BA%D0%B0-%D1%88%D0%BE%D1%84%D0%B5%D1%80%D0%B0.html',\n        'md5': '401a15f2d2dcf6d592cb95528d72a2a8',\n        'info_dict': {\n            'id': '4542',\n            'ext': 'mp3',\n            'title': '\u041b\u0435\u043e\u043d\u0438\u0434 \u0410\u0433\u0443\u0442\u0438\u043d-\u041f\u0435\u0441\u0435\u043d\u043a\u0430 \u0448\u043e\u0444\u0451\u0440\u0430',\n            'duration': 156,\n            'tbr': 320,\n            'filesize_approx': 5900000,\n            'view_count': int,\n            'description': 'md5:03238c5b663810bc79cf42ef3c03e371',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        artist = self._html_search_regex(\n            r'<a[^>]+href=\"/artist/\\d+\">([^<]+)</a>', webpage, 'artist')\n        title = artist + '-' + self._html_search_regex(\n            r'<span[^>]+class=\"minustrack-full-title(?:\\s+[^\"]+)?\"[^>]*>([^<]+)', webpage, 'title')\n        duration = parse_duration(self._html_search_regex(\n            r'<span[^>]+class=\"player-duration(?:\\s+[^\"]+)?\"[^>]*>([^<]+)',\n            webpage, 'duration', fatal=False))\n        mobj = re.search(\n            r'<div[^>]+class=\"dw-info(?:\\s+[^\"]+)?\"[^>]*>(?P<tbr>\\d+)\\s*\u043a\u0431\u0438\u0442/c\\s+(?P<filesize>[0-9.]+)\\s*\u043c\u0431</div>',\n            webpage)\n        tbr = filesize_approx = None\n        if mobj:\n            filesize_approx = float(mobj.group('filesize')) * 1000000\n            tbr = float(mobj.group('tbr'))\n        view_count = int_or_none(self._html_search_regex(\n            r'<span><[^>]+class=\"icon-chart-bar\".*?>(\\d+)</span>',\n            webpage, 'view count', fatal=False))\n        description = self._html_search_regex(\n            r'(?s)<pre[^>]+id=\"lyrics-original\"[^>]*>(.*?)</pre>',\n            webpage, 'song lyrics', fatal=False)\n        if description:\n            description = re.sub(' *\\r *', '\\n', description)\n\n        k = self._search_regex(\n            r'<div[^>]+id=\"player-bottom\"[^>]+data-k=\"([^\"]+)\">', webpage,\n            'encoded data')\n        h = time.time() / 3600\n        a = sum(map(int, [compat_ord(c) for c in k])) + int(video_id) + h\n        video_url = 'http://x-minus.me/dl/minus?id=%s&tkn2=%df%d' % (video_id, a, h)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'url': video_url,\n            \n            'ext': 'mp3',\n            'duration': duration,\n            'filesize_approx': filesize_approx,\n            'tbr': tbr,\n            'view_count': view_count,\n            'description': description,\n        }\n", "comments": "# coding: utf-8\n# The extension is unknown until actual downloading\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport time\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_ord,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n)\n\n\nclass XMinusIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?x-minus\\.org/track/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://x-minus.org/track/4542/%D0%BF%D0%B5%D1%81%D0%B5%D0%BD%D0%BA%D0%B0-%D1%88%D0%BE%D1%84%D0%B5%D1%80%D0%B0.html',\n        'md5': '401a15f2d2dcf6d592cb95528d72a2a8',\n        'info_dict': {\n            'id': '4542',\n            'ext': 'mp3',\n            'title': '\u041b\u0435\u043e\u043d\u0438\u0434 \u0410\u0433\u0443\u0442\u0438\u043d-\u041f\u0435\u0441\u0435\u043d\u043a\u0430 \u0448\u043e\u0444\u0451\u0440\u0430',\n            'duration': 156,\n            'tbr': 320,\n            'filesize_approx': 5900000,\n            'view_count': int,\n            'description': 'md5:03238c5b663810bc79cf42ef3c03e371',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        artist = self._html_search_regex(\n            r'<a[^>]+href=\"/artist/\\d+\">([^<]+)</a>', webpage, 'artist')\n        title = artist + '-' + self._html_search_regex(\n            r'<span[^>]+class=\"minustrack-full-title(?:\\s+[^\"]+)?\"[^>]*>([^<]+)', webpage, 'title')\n        duration = parse_duration(self._html_search_regex(\n            r'<span[^>]+class=\"player-duration(?:\\s+[^\"]+)?\"[^>]*>([^<]+)',\n            webpage, 'duration', fatal=False))\n        mobj = re.search(\n            r'<div[^>]+class=\"dw-info(?:\\s+[^\"]+)?\"[^>]*>(?P<tbr>\\d+)\\s*\u043a\u0431\u0438\u0442/c\\s+(?P<filesize>[0-9.]+)\\s*\u043c\u0431</div>',\n            webpage)\n        tbr = filesize_approx = None\n        if mobj:\n            filesize_approx = float(mobj.group('filesize')) * 1000000\n            tbr = float(mobj.group('tbr'))\n        view_count = int_or_none(self._html_search_regex(\n            r'<span><[^>]+class=\"icon-chart-bar\".*?>(\\d+)</span>',\n            webpage, 'view count', fatal=False))\n        description = self._html_search_regex(\n            r'(?s)<pre[^>]+id=\"lyrics-original\"[^>]*>(.*?)</pre>',\n            webpage, 'song lyrics', fatal=False)\n        if description:\n            description = re.sub(' *\\r *', '\\n', description)\n\n        k = self._search_regex(\n            r'<div[^>]+id=\"player-bottom\"[^>]+data-k=\"([^\"]+)\">', webpage,\n            'encoded data')\n        h = time.time() / 3600\n        a = sum(map(int, [compat_ord(c) for c in k])) + int(video_id) + h\n        video_url = 'http://x-minus.me/dl/minus?id=%s&tkn2=%df%d' % (video_id, a, h)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'url': video_url,\n            # The extension is unknown until actual downloading\n            'ext': 'mp3',\n            'duration': duration,\n            'filesize_approx': filesize_approx,\n            'tbr': tbr,\n            'view_count': view_count,\n            'description': description,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "xminus.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/xminus.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}