{"author": "ansible", "code": "\n\n Copyright: Ansible Project\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: ordnance_config\nversion_added: \"2.3\"\nauthor: \"Alexander Turner (alex.turner@ordnance.io)\"\nshort_description: Manage Ordnance configuration sections\ndescription:\n  - Ordnance router configurations use a simple block indent file syntax\n    for segmenting configuration into sections.  This module provides\n    an implementation for working with these configuration sections in\n    a deterministic way.\noptions:\n  lines:\n    description:\n      - The ordered set of commands that should be configured in the\n        section.  The commands must be the exact same commands as found\n        in the device running-config.  Be sure to note the configuration\n        command syntax as some commands are automatically modified by the\n        device config parser.\n    aliases: ['commands']\n  parents:\n    description:\n      - The ordered set of parents that uniquely identify the section or hierarchy\n        the commands should be checked against.  If the parents argument\n        is omitted, the commands are checked against the set of top\n        level or global commands.\n  src:\n    description:\n      - Specifies the source path to the file that contains the configuration\n        or configuration template to load.  The path to the source file can\n        either be the full path on the Ansible control host or a relative\n        path from the playbook or role root directory.  This argument is mutually\n        exclusive with I(lines), I(parents).\n  before:\n    description:\n      - The ordered set of commands to push on to the command stack if\n        a change needs to be made.  This allows the playbook designer\n        the opportunity to perform configuration commands prior to pushing\n        any changes without affecting how the set of commands are matched\n        against the system.\n  after:\n    description:\n      - The ordered set of commands to append to the end of the command\n        stack if a change needs to be made.  Just like with I(before) this\n        allows the playbook designer to append a set of commands to be\n        executed after the command set.\n  match:\n    description:\n      - Instructs the module on the way to perform the matching of\n        the set of commands against the current device config.  If\n        match is set to I(line), commands are matched line by line.  If\n        match is set to I(strict), command lines are matched with respect\n        to position.  If match is set to I(exact), command lines\n        must be an equal match.  Finally, if match is set to I(none), the\n        module will not attempt to compare the source configuration with\n        the running configuration on the remote device.\n    default: line\n    choices: ['line', 'strict', 'exact', 'none']\n  replace:\n    description:\n      - Instructs the module on the way to perform the configuration\n        on the device.  If the replace argument is set to I(line) then\n        the modified lines are pushed to the device in configuration\n        mode.  If the replace argument is set to I(block) then the entire\n        command block is pushed to the device in configuration mode if any\n        line is not correct.\n    default: line\n    choices: ['line', 'block']\n  multiline_delimiter:\n    description:\n      - This argument is used when pushing a multiline configuration\n        element to the Ordnance router.  It specifies the character to use\n        as the delimiting character.  This only applies to the\n        configuration action\n    default: \"@\"\n  backup:\n    description:\n      - This argument will cause the module to create a full backup of\n        the current C(running-config) from the remote device before any\n        changes are made.  The backup file is written to the C(backup)\n        folder in the playbook root directory.  If the directory does not\n        exist, it is created.\n    type: bool\n    default: 'no'\n  config:\n    description:\n      - The C(config) argument allows the playbook designer to supply\n        the base configuration to be used to validate configuration\n        changes necessary.  If this argument is provided, the module\n        will not download the running-config from the remote node.\n  defaults:\n    description:\n      - This argument specifies whether or not to collect all defaults\n        when getting the remote device running config.  When enabled,\n        the module will get the current config by issuing the command\n        C(show running-config all).\n    type: bool\n    default: 'no'\n  save:\n    description:\n      - The C(save) argument instructs the module to save the running-\n        config to the startup-config at the conclusion of the module\n        running.  If check mode is specified, this argument is ignored.\n    type: bool\n    default: 'no'\n\"\"\"\n\nEXAMPLES = \"\"\"\n---\n Note: examples below use the following provider dict to handle\n       transport and authentication to the node.\nvars:\n  cli:\n    host: \"{{ inventory_hostname }}\"\n    username: RouterName\n    password: password\n    transport: cli\n\n---\n- name: configure top level configuration\n  ordnance_config:\n    lines: hostname {{ inventory_hostname }}\n    provider: \"{{ cli }}\"\n\n- name: configure interface settings\n  ordnance_config:\n    lines:\n      - description test interface\n      - ip address 172.31.1.1 255.255.255.0\n    parents: interface Ethernet1\n    provider: \"{{ cli }}\"\n\n- name: configure bgp router\n  ordnance_config:\n    lines:\n      - neighbor 1.1.1.1 remote-as 1234\n      - network 10.0.0.0/24\n    parents: router bgp 65001\n    provider: \"{{ cli }}\"\n\n\"\"\"\n\nRETURN = \"\"\"\nupdates:\n  description: The set of commands that will be pushed to the remote device\n  returned: Only when commands is specified.\n  type: list\n  sample: ['...', '...']\nbackup_path:\n  description: The full path to the backup file\n  returned: when backup is yes\n  type: string\n  sample: /playbooks/ansible/backup/ordnance_config.2016-07-16@22:28:34\n\"\"\"\nimport re\nimport time\nimport traceback\n\nfrom ansible.module_utils.network.common.network import NetworkModule, NetworkError\nfrom ansible.module_utils.network.common.config import NetworkConfig, dumps\nfrom ansible.module_utils.network.common.parsing import Command\nfrom ansible.module_utils.network.ordnance.ordnance import get_config\nfrom ansible.module_utils.six import iteritems\nfrom ansible.module_utils._text import to_native\n\n\ndef check_args(module, warnings):\n    if module.params['multiline_delimiter']:\n        if len(module.params['multiline_delimiter']) != 1:\n            module.fail_json(msg='multiline_delimiter value can only be a '\n                                 'single character')\n    if module.params['force']:\n        warnings.append('The force argument is deprecated, please use '\n                        'match=none instead.  This argument will be '\n                        'removed in the future')\n\n\ndef extract_banners(config):\n    banners = {}\n    banner_cmds = re.findall(r'^banner (\\w+)', config, re.M)\n    for cmd in banner_cmds:\n        regex = r'banner %s \\^C(.+?)(?=\\^C)' % cmd\n        match = re.search(regex, config, re.S)\n        if match:\n            key = 'banner %s' % cmd\n            banners[key] = match.group(1).strip()\n\n    for cmd in banner_cmds:\n        regex = r'banner %s \\^C(.+?)(?=\\^C)' % cmd\n        match = re.search(regex, config, re.S)\n        if match:\n            config = config.replace(str(match.group(1)), '')\n\n    config = re.sub(r'banner \\w+ \\^C\\^C', '!! banner removed', config)\n    return (config, banners)\n\n\ndef diff_banners(want, have):\n    candidate = {}\n    for key, value in iteritems(want):\n        if value != have.get(key):\n            candidate[key] = value\n    return candidate\n\n\ndef load_banners(module, banners):\n    delimiter = module.params['multiline_delimiter']\n    for key, value in iteritems(banners):\n        key += ' %s' % delimiter\n        for cmd in ['config terminal', key, value, delimiter, 'end']:\n            cmd += '\\r'\n            module.connection.shell.shell.sendall(cmd)\n        time.sleep(1)\n        module.connection.shell.receive()\n\n\ndef get_config(module, result):\n    contents = module.params['config']\n    if not contents:\n        defaults = module.params['defaults']\n        contents = module.config.get_config(include_defaults=defaults)\n\n    contents, banners = extract_banners(contents)\n    return NetworkConfig(indent=1, contents=contents), banners\n\n\ndef get_candidate(module):\n    candidate = NetworkConfig(indent=1)\n    banners = {}\n\n    if module.params['src']:\n        src, banners = extract_banners(module.params['src'])\n        candidate.load(src)\n\n    elif module.params['lines']:\n        parents = module.params['parents'] or list()\n        candidate.add(module.params['lines'], parents=parents)\n\n    return candidate, banners\n\n\ndef run(module, result):\n    match = module.params['match']\n    replace = module.params['replace']\n    path = module.params['parents']\n\n    candidate, want_banners = get_candidate(module)\n\n    if match != 'none':\n        config, have_banners = get_config(module, result)\n        path = module.params['parents']\n        configobjs = candidate.difference(config, path=path, match=match,\n                                          replace=replace)\n    else:\n        configobjs = candidate.items\n        have_banners = {}\n\n    banners = diff_banners(want_banners, have_banners)\n\n    if configobjs or banners:\n        commands = dumps(configobjs, 'commands').split('\\n')\n\n        if module.params['lines']:\n            if module.params['before']:\n                commands[:0] = module.params['before']\n\n            if module.params['after']:\n                commands.extend(module.params['after'])\n\n        result['updates'] = commands\n        result['banners'] = banners\n\n         send the configuration commands to the device and merge\n         them with the current running config\n        if not module.check_mode:\n            if commands:\n                module.config(commands)\n            if banners:\n                load_banners(module, banners)\n\n        result['changed'] = True\n\n    if module.params['save']:\n        if not module.check_mode:\n            module.config.save_config()\n        result['changed'] = True\n\n\ndef main():\n    \"\"\" main entry point for module execution\n    \"\"\"\n\n    argument_spec = dict(\n        src=dict(type='path'),\n\n        lines=dict(aliases=['commands'], type='list'),\n        parents=dict(type='list'),\n\n        before=dict(type='list'),\n        after=dict(type='list'),\n\n        match=dict(default='line', choices=['line', 'strict', 'exact', 'none']),\n        replace=dict(default='line', choices=['line', 'block']),\n        multiline_delimiter=dict(default='@'),\n\n        config=dict(),\n        defaults=dict(type='bool', default=False),\n\n        backup=dict(type='bool', default=False),\n        save=dict(default=False, type='bool'),\n    )\n\n    mutually_exclusive = [('lines', 'src'),\n                          ('parents', 'src')]\n\n    required_if = [('match', 'strict', ['lines']),\n                   ('match', 'exact', ['lines']),\n                   ('replace', 'block', ['lines'])]\n\n    module = NetworkModule(argument_spec=argument_spec,\n                           connect_on_load=False,\n                           mutually_exclusive=mutually_exclusive,\n                           required_if=required_if,\n                           supports_check_mode=True)\n\n    if module.params['force'] is True:\n        module.params['match'] = 'none'\n\n    warnings = list()\n    check_args(module, warnings)\n\n    result = dict(changed=False, warnings=warnings)\n\n    if module.params['backup']:\n        result['__backup__'] = module.config.get_config()\n\n    try:\n        run(module, result)\n    except NetworkError as e:\n        module.disconnect()\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n    module.disconnect()\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  ordnance config version added   2 3  author   alexander turner (alex turner ordnance io)  short description  manage ordnance configuration sections description      ordnance router configurations use simple block indent file syntax     segmenting configuration sections   this module provides     implementation working configuration sections     deterministic way  options    lines      description          the ordered set commands configured         section   the commands must exact commands found         device running config   be sure note configuration         command syntax commands automatically modified         device config parser      aliases    commands     parents      description          the ordered set parents uniquely identify section hierarchy         commands checked   if parents argument         omitted  commands checked set top         level global commands    src      description          specifies source path file contains configuration         configuration template load   the path source file         either full path ansible control host relative         path playbook role root directory   this argument mutually         exclusive i(lines)  i(parents)         description          the ordered set commands push command stack         change needs made   this allows playbook designer         opportunity perform configuration commands prior pushing         changes without affecting set commands matched         system         description          the ordered set commands append end command         stack change needs made   just like i(before)         allows playbook designer append set commands         executed command set    match      description          instructs module way perform matching         set commands current device config   if         match set i(line)  commands matched line line   if         match set i(strict)  command lines matched respect         position   if match set i(exact)  command lines         must equal match   finally  match set i(none)          module attempt compare source configuration         running configuration remote device      default  line     choices    line    strict    exact    none     replace      description          instructs module way perform configuration         device   if replace argument set i(line)         modified lines pushed device configuration         mode   if replace argument set i(block) entire         command block pushed device configuration mode         line correct      default  line     choices    line    block     multiline delimiter      description          this argument used pushing multiline configuration         element ordnance router   it specifies character use         delimiting character   this applies         configuration action     default        backup      description          this argument cause module create full backup         current c(running config) remote device         changes made   the backup file written c(backup)         folder playbook root directory   if directory         exist  created      type  bool     default      config      description          the c(config) argument allows playbook designer supply         base configuration used validate configuration         changes necessary   if argument provided  module         download running config remote node    defaults      description          this argument specifies whether collect defaults         getting remote device running config   when enabled          module get current config issuing command         c(show running config all)      type  bool     default      save      description          the c(save) argument instructs module save running          config startup config conclusion module         running   if check mode specified  argument ignored      type  bool     default         examples             note  examples use following provider dict handle         transport authentication node  vars    cli      host      inventory hostname         username  routername     password  password     transport  cli        name  configure top level configuration   ordnance config      lines  hostname    inventory hostname        provider      cli        name  configure interface settings   ordnance config      lines          description test interface         ip address 172 31 1 1 255 255 255 0     parents  interface ethernet1     provider      cli        name  configure bgp router   ordnance config      lines          neighbor 1 1 1 1 remote 1234         network 10 0 0 0 24     parents  router bgp 65001     provider      cli           return       updates    description  the set commands pushed remote device   returned  only commands specified    type  list   sample                 backup path    description  the full path backup file   returned  backup yes   type  string   sample   playbooks ansible backup ordnance config 2016 07 16 22 28 34     import import time import traceback  ansible module utils network common network import networkmodule  networkerror ansible module utils network common config import networkconfig  dumps ansible module utils network common parsing import command ansible module utils network ordnance ordnance import get config ansible module utils six import iteritems ansible module utils  text import native   def check args(module  warnings)      module params  multiline delimiter            len(module params  multiline delimiter  )    1              module fail json(msg  multiline delimiter value                                     single character )     module params  force            warnings append( the force argument deprecated  please use                            match none instead   this argument                            removed future )   def extract banners(config)      banners          banner cmds   findall(r  banner ( w )   config  m)     cmd banner cmds          regex   r banner    c(   )(    c)    cmd         match   search(regex  config  s)         match              key    banner     cmd             banners key    match group(1) strip()      cmd banner cmds          regex   r banner    c(   )(    c)    cmd         match   search(regex  config  s)         match              config   config replace(str(match group(1))    )      config   sub(r banner  w    c  c       banner removed   config)     return (config  banners)   def diff banners(want  have)      candidate          key  value iteritems(want)          value    get(key)              candidate key    value     return candidate   def load banners(module  banners)      delimiter   module params  multiline delimiter       key  value iteritems(banners)          key          delimiter         cmd   config terminal   key  value  delimiter   end                cmd      r              module connection shell shell sendall(cmd)         time sleep(1)         module connection shell receive()   def get config(module  result)      contents   module params  config       contents          defaults   module params  defaults           contents   module config get config(include defaults defaults)      contents  banners   extract banners(contents)     return networkconfig(indent 1  contents contents)  banners   def get candidate(module)      candidate   networkconfig(indent 1)     banners           module params  src            src  banners   extract banners(module params  src  )         candidate load(src)      elif module params  lines            parents   module params  parents   list()         candidate add(module params  lines    parents parents)      return candidate  banners   def run(module  result)      match   module params  match       replace   module params  replace       path   module params  parents        candidate  want banners   get candidate(module)      match     none           config  banners   get config(module  result)         path   module params  parents           configobjs   candidate difference(config  path path  match match                                            replace replace)     else          configobjs   candidate items         banners           banners   diff banners(want banners  banners)      configobjs banners          commands   dumps(configobjs   commands ) split(  n )          module params  lines                module params                     commands  0    module params                 module params                     commands extend(module params   )          result  updates     commands         result  banners     banners            send configuration commands device merge           current running config         module check mode              commands                  module config(commands)             banners                  load banners(module  banners)          result  changed     true      module params  save            module check mode              module config save config()         result  changed     true   def main()          main entry point module execution             usr bin python       copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    note  examples use following provider dict handle          transport authentication node     send configuration commands device merge    current running config ", "content": "#!/usr/bin/python\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: ordnance_config\nversion_added: \"2.3\"\nauthor: \"Alexander Turner (alex.turner@ordnance.io)\"\nshort_description: Manage Ordnance configuration sections\ndescription:\n  - Ordnance router configurations use a simple block indent file syntax\n    for segmenting configuration into sections.  This module provides\n    an implementation for working with these configuration sections in\n    a deterministic way.\noptions:\n  lines:\n    description:\n      - The ordered set of commands that should be configured in the\n        section.  The commands must be the exact same commands as found\n        in the device running-config.  Be sure to note the configuration\n        command syntax as some commands are automatically modified by the\n        device config parser.\n    aliases: ['commands']\n  parents:\n    description:\n      - The ordered set of parents that uniquely identify the section or hierarchy\n        the commands should be checked against.  If the parents argument\n        is omitted, the commands are checked against the set of top\n        level or global commands.\n  src:\n    description:\n      - Specifies the source path to the file that contains the configuration\n        or configuration template to load.  The path to the source file can\n        either be the full path on the Ansible control host or a relative\n        path from the playbook or role root directory.  This argument is mutually\n        exclusive with I(lines), I(parents).\n  before:\n    description:\n      - The ordered set of commands to push on to the command stack if\n        a change needs to be made.  This allows the playbook designer\n        the opportunity to perform configuration commands prior to pushing\n        any changes without affecting how the set of commands are matched\n        against the system.\n  after:\n    description:\n      - The ordered set of commands to append to the end of the command\n        stack if a change needs to be made.  Just like with I(before) this\n        allows the playbook designer to append a set of commands to be\n        executed after the command set.\n  match:\n    description:\n      - Instructs the module on the way to perform the matching of\n        the set of commands against the current device config.  If\n        match is set to I(line), commands are matched line by line.  If\n        match is set to I(strict), command lines are matched with respect\n        to position.  If match is set to I(exact), command lines\n        must be an equal match.  Finally, if match is set to I(none), the\n        module will not attempt to compare the source configuration with\n        the running configuration on the remote device.\n    default: line\n    choices: ['line', 'strict', 'exact', 'none']\n  replace:\n    description:\n      - Instructs the module on the way to perform the configuration\n        on the device.  If the replace argument is set to I(line) then\n        the modified lines are pushed to the device in configuration\n        mode.  If the replace argument is set to I(block) then the entire\n        command block is pushed to the device in configuration mode if any\n        line is not correct.\n    default: line\n    choices: ['line', 'block']\n  multiline_delimiter:\n    description:\n      - This argument is used when pushing a multiline configuration\n        element to the Ordnance router.  It specifies the character to use\n        as the delimiting character.  This only applies to the\n        configuration action\n    default: \"@\"\n  backup:\n    description:\n      - This argument will cause the module to create a full backup of\n        the current C(running-config) from the remote device before any\n        changes are made.  The backup file is written to the C(backup)\n        folder in the playbook root directory.  If the directory does not\n        exist, it is created.\n    type: bool\n    default: 'no'\n  config:\n    description:\n      - The C(config) argument allows the playbook designer to supply\n        the base configuration to be used to validate configuration\n        changes necessary.  If this argument is provided, the module\n        will not download the running-config from the remote node.\n  defaults:\n    description:\n      - This argument specifies whether or not to collect all defaults\n        when getting the remote device running config.  When enabled,\n        the module will get the current config by issuing the command\n        C(show running-config all).\n    type: bool\n    default: 'no'\n  save:\n    description:\n      - The C(save) argument instructs the module to save the running-\n        config to the startup-config at the conclusion of the module\n        running.  If check mode is specified, this argument is ignored.\n    type: bool\n    default: 'no'\n\"\"\"\n\nEXAMPLES = \"\"\"\n---\n# Note: examples below use the following provider dict to handle\n#       transport and authentication to the node.\nvars:\n  cli:\n    host: \"{{ inventory_hostname }}\"\n    username: RouterName\n    password: password\n    transport: cli\n\n---\n- name: configure top level configuration\n  ordnance_config:\n    lines: hostname {{ inventory_hostname }}\n    provider: \"{{ cli }}\"\n\n- name: configure interface settings\n  ordnance_config:\n    lines:\n      - description test interface\n      - ip address 172.31.1.1 255.255.255.0\n    parents: interface Ethernet1\n    provider: \"{{ cli }}\"\n\n- name: configure bgp router\n  ordnance_config:\n    lines:\n      - neighbor 1.1.1.1 remote-as 1234\n      - network 10.0.0.0/24\n    parents: router bgp 65001\n    provider: \"{{ cli }}\"\n\n\"\"\"\n\nRETURN = \"\"\"\nupdates:\n  description: The set of commands that will be pushed to the remote device\n  returned: Only when commands is specified.\n  type: list\n  sample: ['...', '...']\nbackup_path:\n  description: The full path to the backup file\n  returned: when backup is yes\n  type: string\n  sample: /playbooks/ansible/backup/ordnance_config.2016-07-16@22:28:34\n\"\"\"\nimport re\nimport time\nimport traceback\n\nfrom ansible.module_utils.network.common.network import NetworkModule, NetworkError\nfrom ansible.module_utils.network.common.config import NetworkConfig, dumps\nfrom ansible.module_utils.network.common.parsing import Command\nfrom ansible.module_utils.network.ordnance.ordnance import get_config\nfrom ansible.module_utils.six import iteritems\nfrom ansible.module_utils._text import to_native\n\n\ndef check_args(module, warnings):\n    if module.params['multiline_delimiter']:\n        if len(module.params['multiline_delimiter']) != 1:\n            module.fail_json(msg='multiline_delimiter value can only be a '\n                                 'single character')\n    if module.params['force']:\n        warnings.append('The force argument is deprecated, please use '\n                        'match=none instead.  This argument will be '\n                        'removed in the future')\n\n\ndef extract_banners(config):\n    banners = {}\n    banner_cmds = re.findall(r'^banner (\\w+)', config, re.M)\n    for cmd in banner_cmds:\n        regex = r'banner %s \\^C(.+?)(?=\\^C)' % cmd\n        match = re.search(regex, config, re.S)\n        if match:\n            key = 'banner %s' % cmd\n            banners[key] = match.group(1).strip()\n\n    for cmd in banner_cmds:\n        regex = r'banner %s \\^C(.+?)(?=\\^C)' % cmd\n        match = re.search(regex, config, re.S)\n        if match:\n            config = config.replace(str(match.group(1)), '')\n\n    config = re.sub(r'banner \\w+ \\^C\\^C', '!! banner removed', config)\n    return (config, banners)\n\n\ndef diff_banners(want, have):\n    candidate = {}\n    for key, value in iteritems(want):\n        if value != have.get(key):\n            candidate[key] = value\n    return candidate\n\n\ndef load_banners(module, banners):\n    delimiter = module.params['multiline_delimiter']\n    for key, value in iteritems(banners):\n        key += ' %s' % delimiter\n        for cmd in ['config terminal', key, value, delimiter, 'end']:\n            cmd += '\\r'\n            module.connection.shell.shell.sendall(cmd)\n        time.sleep(1)\n        module.connection.shell.receive()\n\n\ndef get_config(module, result):\n    contents = module.params['config']\n    if not contents:\n        defaults = module.params['defaults']\n        contents = module.config.get_config(include_defaults=defaults)\n\n    contents, banners = extract_banners(contents)\n    return NetworkConfig(indent=1, contents=contents), banners\n\n\ndef get_candidate(module):\n    candidate = NetworkConfig(indent=1)\n    banners = {}\n\n    if module.params['src']:\n        src, banners = extract_banners(module.params['src'])\n        candidate.load(src)\n\n    elif module.params['lines']:\n        parents = module.params['parents'] or list()\n        candidate.add(module.params['lines'], parents=parents)\n\n    return candidate, banners\n\n\ndef run(module, result):\n    match = module.params['match']\n    replace = module.params['replace']\n    path = module.params['parents']\n\n    candidate, want_banners = get_candidate(module)\n\n    if match != 'none':\n        config, have_banners = get_config(module, result)\n        path = module.params['parents']\n        configobjs = candidate.difference(config, path=path, match=match,\n                                          replace=replace)\n    else:\n        configobjs = candidate.items\n        have_banners = {}\n\n    banners = diff_banners(want_banners, have_banners)\n\n    if configobjs or banners:\n        commands = dumps(configobjs, 'commands').split('\\n')\n\n        if module.params['lines']:\n            if module.params['before']:\n                commands[:0] = module.params['before']\n\n            if module.params['after']:\n                commands.extend(module.params['after'])\n\n        result['updates'] = commands\n        result['banners'] = banners\n\n        # send the configuration commands to the device and merge\n        # them with the current running config\n        if not module.check_mode:\n            if commands:\n                module.config(commands)\n            if banners:\n                load_banners(module, banners)\n\n        result['changed'] = True\n\n    if module.params['save']:\n        if not module.check_mode:\n            module.config.save_config()\n        result['changed'] = True\n\n\ndef main():\n    \"\"\" main entry point for module execution\n    \"\"\"\n\n    argument_spec = dict(\n        src=dict(type='path'),\n\n        lines=dict(aliases=['commands'], type='list'),\n        parents=dict(type='list'),\n\n        before=dict(type='list'),\n        after=dict(type='list'),\n\n        match=dict(default='line', choices=['line', 'strict', 'exact', 'none']),\n        replace=dict(default='line', choices=['line', 'block']),\n        multiline_delimiter=dict(default='@'),\n\n        config=dict(),\n        defaults=dict(type='bool', default=False),\n\n        backup=dict(type='bool', default=False),\n        save=dict(default=False, type='bool'),\n    )\n\n    mutually_exclusive = [('lines', 'src'),\n                          ('parents', 'src')]\n\n    required_if = [('match', 'strict', ['lines']),\n                   ('match', 'exact', ['lines']),\n                   ('replace', 'block', ['lines'])]\n\n    module = NetworkModule(argument_spec=argument_spec,\n                           connect_on_load=False,\n                           mutually_exclusive=mutually_exclusive,\n                           required_if=required_if,\n                           supports_check_mode=True)\n\n    if module.params['force'] is True:\n        module.params['match'] = 'none'\n\n    warnings = list()\n    check_args(module, warnings)\n\n    result = dict(changed=False, warnings=warnings)\n\n    if module.params['backup']:\n        result['__backup__'] = module.config.get_config()\n\n    try:\n        run(module, result)\n    except NetworkError as e:\n        module.disconnect()\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n    module.disconnect()\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "ordnance_config.py", "id": "0b82ce114c6fdcec562237a567357f40", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/ordnance/ordnance_config.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}