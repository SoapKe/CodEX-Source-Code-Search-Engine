{"author": "nvbn", "code": "\n\nimport pytest\nfrom itertools import islice\nfrom thefuck import ui\nfrom thefuck.types import CorrectedCommand\nfrom thefuck import const\n\n\n@pytest.fixture\ndef patch_get_key(monkeypatch):\n    def patch(vals):\n        vals = iter(vals)\n        monkeypatch.setattr('thefuck.ui.get_key', lambda: next(vals))\n\n    return patch\n\n\ndef test_read_actions(patch_get_key):\n    patch_get_key([\n        \n        '\\n',\n        \n        '\\r',\n        \n        'x', 'y',\n        \n        const.KEY_UP, 'k',\n        \n        const.KEY_DOWN, 'j',\n        \n        const.KEY_CTRL_C, 'q'])\n    assert (list(islice(ui.read_actions(), 8))\n            == [const.ACTION_SELECT, const.ACTION_SELECT,\n                const.ACTION_PREVIOUS, const.ACTION_PREVIOUS,\n                const.ACTION_NEXT, const.ACTION_NEXT,\n                const.ACTION_ABORT, const.ACTION_ABORT])\n\n\ndef test_command_selector():\n    selector = ui.CommandSelector(iter([1, 2, 3]))\n    assert selector.value == 1\n    selector.next()\n    assert selector.value == 2\n    selector.next()\n    assert selector.value == 3\n    selector.next()\n    assert selector.value == 1\n    selector.previous()\n    assert selector.value == 3\n\n\n@pytest.mark.usefixtures('no_colors')\nclass TestSelectCommand(object):\n    @pytest.fixture\n    def commands_with_side_effect(self):\n        return [CorrectedCommand('ls', lambda *_: None, 100),\n                CorrectedCommand('cd', lambda *_: None, 100)]\n\n    @pytest.fixture\n    def commands(self):\n        return [CorrectedCommand('ls', None, 100),\n                CorrectedCommand('cd', None, 100)]\n\n    def test_without_commands(self, capsys):\n        assert ui.select_command(iter([])) is None\n        assert capsys.readouterr() == ('', 'No fucks given\\n')\n\n    def test_without_confirmation(self, capsys, commands, settings):\n        settings.require_confirmation = False\n        assert ui.select_command(iter(commands)) == commands[0]\n        assert capsys.readouterr() == ('', const.USER_COMMAND_MARK + 'ls\\n')\n\n    def test_without_confirmation_with_side_effects(\n            self, capsys, commands_with_side_effect, settings):\n        settings.require_confirmation = False\n        assert (ui.select_command(iter(commands_with_side_effect))\n                == commands_with_side_effect[0])\n        assert capsys.readouterr() == ('', const.USER_COMMAND_MARK + 'ls (+side effect)\\n')\n\n    def test_with_confirmation(self, capsys, patch_get_key, commands):\n        patch_get_key(['\\n'])\n        assert ui.select_command(iter(commands)) == commands[0]\n        assert capsys.readouterr() == (\n            '', const.USER_COMMAND_MARK + u'\\x1b[1K\\rls [enter/\u2191/\u2193/ctrl+c]\\n')\n\n    def test_with_confirmation_abort(self, capsys, patch_get_key, commands):\n        patch_get_key([const.KEY_CTRL_C])\n        assert ui.select_command(iter(commands)) is None\n        assert capsys.readouterr() == (\n            '', const.USER_COMMAND_MARK + u'\\x1b[1K\\rls [enter/\u2191/\u2193/ctrl+c]\\nAborted\\n')\n\n    def test_with_confirmation_with_side_effct(self, capsys, patch_get_key,\n                                               commands_with_side_effect):\n        patch_get_key(['\\n'])\n        assert (ui.select_command(iter(commands_with_side_effect))\n                == commands_with_side_effect[0])\n        assert capsys.readouterr() == (\n            '', const.USER_COMMAND_MARK + u'\\x1b[1K\\rls (+side effect) [enter/\u2191/\u2193/ctrl+c]\\n')\n\n    def test_with_confirmation_select_second(self, capsys, patch_get_key, commands):\n        patch_get_key([const.KEY_DOWN, '\\n'])\n        assert ui.select_command(iter(commands)) == commands[1]\n        stderr = (\n            u'{mark}\\x1b[1K\\rls [enter/\u2191/\u2193/ctrl+c]'\n            u'{mark}\\x1b[1K\\rcd [enter/\u2191/\u2193/ctrl+c]\\n'\n        ).format(mark=const.USER_COMMAND_MARK)\n        assert capsys.readouterr() == ('', stderr)\n", "comments": "# -*- encoding: utf-8 -*-\n# Enter:\n# Enter:\n# Ignored:\n# Up:\n# Down:\n# Ctrl+C:\n", "content": "# -*- encoding: utf-8 -*-\n\nimport pytest\nfrom itertools import islice\nfrom thefuck import ui\nfrom thefuck.types import CorrectedCommand\nfrom thefuck import const\n\n\n@pytest.fixture\ndef patch_get_key(monkeypatch):\n    def patch(vals):\n        vals = iter(vals)\n        monkeypatch.setattr('thefuck.ui.get_key', lambda: next(vals))\n\n    return patch\n\n\ndef test_read_actions(patch_get_key):\n    patch_get_key([\n        # Enter:\n        '\\n',\n        # Enter:\n        '\\r',\n        # Ignored:\n        'x', 'y',\n        # Up:\n        const.KEY_UP, 'k',\n        # Down:\n        const.KEY_DOWN, 'j',\n        # Ctrl+C:\n        const.KEY_CTRL_C, 'q'])\n    assert (list(islice(ui.read_actions(), 8))\n            == [const.ACTION_SELECT, const.ACTION_SELECT,\n                const.ACTION_PREVIOUS, const.ACTION_PREVIOUS,\n                const.ACTION_NEXT, const.ACTION_NEXT,\n                const.ACTION_ABORT, const.ACTION_ABORT])\n\n\ndef test_command_selector():\n    selector = ui.CommandSelector(iter([1, 2, 3]))\n    assert selector.value == 1\n    selector.next()\n    assert selector.value == 2\n    selector.next()\n    assert selector.value == 3\n    selector.next()\n    assert selector.value == 1\n    selector.previous()\n    assert selector.value == 3\n\n\n@pytest.mark.usefixtures('no_colors')\nclass TestSelectCommand(object):\n    @pytest.fixture\n    def commands_with_side_effect(self):\n        return [CorrectedCommand('ls', lambda *_: None, 100),\n                CorrectedCommand('cd', lambda *_: None, 100)]\n\n    @pytest.fixture\n    def commands(self):\n        return [CorrectedCommand('ls', None, 100),\n                CorrectedCommand('cd', None, 100)]\n\n    def test_without_commands(self, capsys):\n        assert ui.select_command(iter([])) is None\n        assert capsys.readouterr() == ('', 'No fucks given\\n')\n\n    def test_without_confirmation(self, capsys, commands, settings):\n        settings.require_confirmation = False\n        assert ui.select_command(iter(commands)) == commands[0]\n        assert capsys.readouterr() == ('', const.USER_COMMAND_MARK + 'ls\\n')\n\n    def test_without_confirmation_with_side_effects(\n            self, capsys, commands_with_side_effect, settings):\n        settings.require_confirmation = False\n        assert (ui.select_command(iter(commands_with_side_effect))\n                == commands_with_side_effect[0])\n        assert capsys.readouterr() == ('', const.USER_COMMAND_MARK + 'ls (+side effect)\\n')\n\n    def test_with_confirmation(self, capsys, patch_get_key, commands):\n        patch_get_key(['\\n'])\n        assert ui.select_command(iter(commands)) == commands[0]\n        assert capsys.readouterr() == (\n            '', const.USER_COMMAND_MARK + u'\\x1b[1K\\rls [enter/\u2191/\u2193/ctrl+c]\\n')\n\n    def test_with_confirmation_abort(self, capsys, patch_get_key, commands):\n        patch_get_key([const.KEY_CTRL_C])\n        assert ui.select_command(iter(commands)) is None\n        assert capsys.readouterr() == (\n            '', const.USER_COMMAND_MARK + u'\\x1b[1K\\rls [enter/\u2191/\u2193/ctrl+c]\\nAborted\\n')\n\n    def test_with_confirmation_with_side_effct(self, capsys, patch_get_key,\n                                               commands_with_side_effect):\n        patch_get_key(['\\n'])\n        assert (ui.select_command(iter(commands_with_side_effect))\n                == commands_with_side_effect[0])\n        assert capsys.readouterr() == (\n            '', const.USER_COMMAND_MARK + u'\\x1b[1K\\rls (+side effect) [enter/\u2191/\u2193/ctrl+c]\\n')\n\n    def test_with_confirmation_select_second(self, capsys, patch_get_key, commands):\n        patch_get_key([const.KEY_DOWN, '\\n'])\n        assert ui.select_command(iter(commands)) == commands[1]\n        stderr = (\n            u'{mark}\\x1b[1K\\rls [enter/\u2191/\u2193/ctrl+c]'\n            u'{mark}\\x1b[1K\\rcd [enter/\u2191/\u2193/ctrl+c]\\n'\n        ).format(mark=const.USER_COMMAND_MARK)\n        assert capsys.readouterr() == ('', stderr)\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_ui.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/test_ui.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}