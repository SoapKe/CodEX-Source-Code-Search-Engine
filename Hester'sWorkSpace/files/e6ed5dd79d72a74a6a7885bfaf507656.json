{"author": "mitmproxy", "code": "from mitmproxy import contentviews\nfrom mitmproxy.test import tflow\nfrom mitmproxy.test import tutils\nfrom mitmproxy.test import taddons\nfrom mitmproxy.net.http import Headers\n\nfrom ..mitmproxy import tservers\n\nexample_dir = tutils.test_data.push(\"../examples\")\n\n\nclass TestScripts(tservers.MasterTest):\n    def test_add_header(self):\n        with taddons.context() as tctx:\n            a = tctx.script(example_dir.path(\"simple/add_header.py\"))\n            f = tflow.tflow(resp=tutils.tresp())\n            a.response(f)\n            assert f.response.headers[\"newheader\"] == \"foo\"\n\n    def test_custom_contentviews(self):\n        with taddons.context() as tctx:\n            tctx.script(example_dir.path(\"simple/custom_contentview.py\"))\n            swapcase = contentviews.get(\"swapcase\")\n            _, fmt = swapcase(b\"<html>Test!</html>\")\n            assert any(b'tEST!' in val[0][1] for val in fmt)\n\n    def test_iframe_injector(self):\n        with taddons.context() as tctx:\n            sc = tctx.script(example_dir.path(\"simple/modify_body_inject_iframe.py\"))\n            tctx.configure(\n                sc,\n                iframe = \"http://example.org/evil_iframe\"\n            )\n            f = tflow.tflow(\n                resp=tutils.tresp(content=b\"<html><body>mitmproxy</body></html>\")\n            )\n            tctx.master.addons.invoke_addon(sc, \"response\", f)\n            content = f.response.content\n            assert b'iframe' in content and b'evil_iframe' in content\n\n    def test_modify_form(self):\n        with taddons.context() as tctx:\n            sc = tctx.script(example_dir.path(\"simple/modify_form.py\"))\n\n            form_header = Headers(content_type=\"application/x-www-form-urlencoded\")\n            f = tflow.tflow(req=tutils.treq(headers=form_header))\n            sc.request(f)\n\n            assert f.request.urlencoded_form[\"mitmproxy\"] == \"rocks\"\n\n            f.request.headers[\"content-type\"] = \"\"\n            sc.request(f)\n            assert list(f.request.urlencoded_form.items()) == [(\"foo\", \"bar\")]\n\n    def test_modify_querystring(self):\n        with taddons.context() as tctx:\n            sc = tctx.script(example_dir.path(\"simple/modify_querystring.py\"))\n            f = tflow.tflow(req=tutils.treq(path=\"/search?q=term\"))\n\n            sc.request(f)\n            assert f.request.query[\"mitmproxy\"] == \"rocks\"\n\n            f.request.path = \"/\"\n            sc.request(f)\n            assert f.request.query[\"mitmproxy\"] == \"rocks\"\n\n    def test_redirect_requests(self):\n        with taddons.context() as tctx:\n            sc = tctx.script(example_dir.path(\"simple/redirect_requests.py\"))\n            f = tflow.tflow(req=tutils.treq(host=\"example.org\"))\n            sc.request(f)\n            assert f.request.host == \"mitmproxy.org\"\n\n    def test_send_reply_from_proxy(self):\n        with taddons.context() as tctx:\n            sc = tctx.script(example_dir.path(\"simple/send_reply_from_proxy.py\"))\n            f = tflow.tflow(req=tutils.treq(host=\"example.com\", port=80))\n            sc.request(f)\n            assert f.response.content == b\"Hello World\"\n\n    def test_dns_spoofing(self):\n        with taddons.context() as tctx:\n            sc = tctx.script(example_dir.path(\"complex/dns_spoofing.py\"))\n\n            original_host = \"example.com\"\n\n            host_header = Headers(host=original_host)\n            f = tflow.tflow(req=tutils.treq(headers=host_header, port=80))\n\n            tctx.master.addons.invoke_addon(sc, \"requestheaders\", f)\n\n            \n            f.request.scheme = \"https\"\n            f.request.port = 443\n\n            tctx.master.addons.invoke_addon(sc, \"request\", f)\n\n            assert f.request.scheme == \"http\"\n            assert f.request.port == 80\n\n            assert f.request.headers[\"Host\"] == original_host\n", "comments": "  rewrite reverse proxy mode ", "content": "from mitmproxy import contentviews\nfrom mitmproxy.test import tflow\nfrom mitmproxy.test import tutils\nfrom mitmproxy.test import taddons\nfrom mitmproxy.net.http import Headers\n\nfrom ..mitmproxy import tservers\n\nexample_dir = tutils.test_data.push(\"../examples\")\n\n\nclass TestScripts(tservers.MasterTest):\n    def test_add_header(self):\n        with taddons.context() as tctx:\n            a = tctx.script(example_dir.path(\"simple/add_header.py\"))\n            f = tflow.tflow(resp=tutils.tresp())\n            a.response(f)\n            assert f.response.headers[\"newheader\"] == \"foo\"\n\n    def test_custom_contentviews(self):\n        with taddons.context() as tctx:\n            tctx.script(example_dir.path(\"simple/custom_contentview.py\"))\n            swapcase = contentviews.get(\"swapcase\")\n            _, fmt = swapcase(b\"<html>Test!</html>\")\n            assert any(b'tEST!' in val[0][1] for val in fmt)\n\n    def test_iframe_injector(self):\n        with taddons.context() as tctx:\n            sc = tctx.script(example_dir.path(\"simple/modify_body_inject_iframe.py\"))\n            tctx.configure(\n                sc,\n                iframe = \"http://example.org/evil_iframe\"\n            )\n            f = tflow.tflow(\n                resp=tutils.tresp(content=b\"<html><body>mitmproxy</body></html>\")\n            )\n            tctx.master.addons.invoke_addon(sc, \"response\", f)\n            content = f.response.content\n            assert b'iframe' in content and b'evil_iframe' in content\n\n    def test_modify_form(self):\n        with taddons.context() as tctx:\n            sc = tctx.script(example_dir.path(\"simple/modify_form.py\"))\n\n            form_header = Headers(content_type=\"application/x-www-form-urlencoded\")\n            f = tflow.tflow(req=tutils.treq(headers=form_header))\n            sc.request(f)\n\n            assert f.request.urlencoded_form[\"mitmproxy\"] == \"rocks\"\n\n            f.request.headers[\"content-type\"] = \"\"\n            sc.request(f)\n            assert list(f.request.urlencoded_form.items()) == [(\"foo\", \"bar\")]\n\n    def test_modify_querystring(self):\n        with taddons.context() as tctx:\n            sc = tctx.script(example_dir.path(\"simple/modify_querystring.py\"))\n            f = tflow.tflow(req=tutils.treq(path=\"/search?q=term\"))\n\n            sc.request(f)\n            assert f.request.query[\"mitmproxy\"] == \"rocks\"\n\n            f.request.path = \"/\"\n            sc.request(f)\n            assert f.request.query[\"mitmproxy\"] == \"rocks\"\n\n    def test_redirect_requests(self):\n        with taddons.context() as tctx:\n            sc = tctx.script(example_dir.path(\"simple/redirect_requests.py\"))\n            f = tflow.tflow(req=tutils.treq(host=\"example.org\"))\n            sc.request(f)\n            assert f.request.host == \"mitmproxy.org\"\n\n    def test_send_reply_from_proxy(self):\n        with taddons.context() as tctx:\n            sc = tctx.script(example_dir.path(\"simple/send_reply_from_proxy.py\"))\n            f = tflow.tflow(req=tutils.treq(host=\"example.com\", port=80))\n            sc.request(f)\n            assert f.response.content == b\"Hello World\"\n\n    def test_dns_spoofing(self):\n        with taddons.context() as tctx:\n            sc = tctx.script(example_dir.path(\"complex/dns_spoofing.py\"))\n\n            original_host = \"example.com\"\n\n            host_header = Headers(host=original_host)\n            f = tflow.tflow(req=tutils.treq(headers=host_header, port=80))\n\n            tctx.master.addons.invoke_addon(sc, \"requestheaders\", f)\n\n            # Rewrite by reverse proxy mode\n            f.request.scheme = \"https\"\n            f.request.port = 443\n\n            tctx.master.addons.invoke_addon(sc, \"request\", f)\n\n            assert f.request.scheme == \"http\"\n            assert f.request.port == 80\n\n            assert f.request.headers[\"Host\"] == original_host\n", "description": "An interactive TLS-capable intercepting HTTP proxy for penetration testers and software developers.", "file_name": "test_examples.py", "id": "e6ed5dd79d72a74a6a7885bfaf507656", "language": "Python", "project_name": "mitmproxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/mitmproxy-mitmproxy/mitmproxy-mitmproxy-0bc3f1f/test/examples/test_examples.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:46Z", "url": "https://github.com/mitmproxy/mitmproxy", "wiki": false}