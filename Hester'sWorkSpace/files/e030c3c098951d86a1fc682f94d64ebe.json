{"author": "ansible", "code": "\n Copyright: Ansible Project\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.onyx import onyx_ospf\nfrom units.modules.utils import set_module_args\nfrom .onyx_module import TestOnyxModule, load_fixture\n\n\nclass TestOnyxOspfModule(TestOnyxModule):\n\n    module = onyx_ospf\n\n    def setUp(self):\n        super(TestOnyxOspfModule, self).setUp()\n        self._ospf_exists = True\n        self.mock_get_config = patch.object(\n            onyx_ospf.OnyxOspfModule,\n            \"_get_ospf_config\")\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_get_interfaces_config = patch.object(\n            onyx_ospf.OnyxOspfModule,\n            \"_get_ospf_interfaces_config\")\n        self.get_interfaces_config = self.mock_get_interfaces_config.start()\n\n        self.mock_load_config = patch(\n            'ansible.module_utils.network.onyx.onyx.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestOnyxOspfModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def load_fixtures(self, commands=None, transport='cli'):\n        if self._ospf_exists:\n            config_file = 'onyx_ospf_show.cfg'\n            self.get_config.return_value = load_fixture(config_file)\n            config_file = 'onyx_ospf_interfaces_show.cfg'\n            self.get_interfaces_config.return_value = load_fixture(config_file)\n        else:\n            self.get_config.return_value = None\n            self.get_interfaces_config.return_value = None\n        self.load_config.return_value = None\n\n    def test_ospf_absent_no_change(self):\n        set_module_args(dict(ospf=3, state='absent'))\n        self.execute_module(changed=False)\n\n    def test_ospf_present_no_change(self):\n        interface = dict(name='Loopback 1', area='0.0.0.0')\n        set_module_args(dict(ospf=2, router_id='10.2.3.4',\n                             interfaces=[interface]))\n        self.execute_module(changed=False)\n\n    def test_ospf_present_remove(self):\n        set_module_args(dict(ospf=2, state='absent'))\n        commands = ['no router ospf 2']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_ospf_change_router(self):\n        interface = dict(name='Loopback 1', area='0.0.0.0')\n        set_module_args(dict(ospf=2, router_id='10.2.3.5',\n                             interfaces=[interface]))\n        commands = ['router ospf 2', 'router-id 10.2.3.5', 'exit']\n        self.execute_module(changed=True, commands=commands, sort=False)\n\n    def test_ospf_remove_router(self):\n        interface = dict(name='Loopback 1', area='0.0.0.0')\n        set_module_args(dict(ospf=2, interfaces=[interface]))\n        commands = ['router ospf 2', 'no router-id', 'exit']\n        self.execute_module(changed=True, commands=commands, sort=False)\n\n    def test_ospf_add_interface(self):\n        interfaces = [dict(name='Loopback 1', area='0.0.0.0'),\n                      dict(name='Loopback 2', area='0.0.0.0')]\n        set_module_args(dict(ospf=2, router_id='10.2.3.4',\n                             interfaces=interfaces))\n        commands = ['interface loopback 2 ip ospf area 0.0.0.0']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_ospf_remove_interface(self):\n        set_module_args(dict(ospf=2, router_id='10.2.3.4'))\n        commands = ['interface loopback 1 no ip ospf area']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_ospf_add(self):\n        self._ospf_exists = False\n        interfaces = [dict(name='Loopback 1', area='0.0.0.0'),\n                      dict(name='Vlan 210', area='0.0.0.0'),\n                      dict(name='Eth1/1', area='0.0.0.0'),\n                      dict(name='Po1', area='0.0.0.0')]\n        set_module_args(dict(ospf=2, router_id='10.2.3.4',\n                             interfaces=interfaces))\n        commands = ['router ospf 2', 'router-id 10.2.3.4', 'exit',\n                    'interface loopback 1 ip ospf area 0.0.0.0',\n                    'interface vlan 210 ip ospf area 0.0.0.0',\n                    'interface ethernet 1/1 ip ospf area 0.0.0.0',\n                    'interface port-channel 1 ip ospf area 0.0.0.0']\n        self.execute_module(changed=True, commands=commands)\n", "comments": "     copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    make coding python3 ish ", "content": "#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.onyx import onyx_ospf\nfrom units.modules.utils import set_module_args\nfrom .onyx_module import TestOnyxModule, load_fixture\n\n\nclass TestOnyxOspfModule(TestOnyxModule):\n\n    module = onyx_ospf\n\n    def setUp(self):\n        super(TestOnyxOspfModule, self).setUp()\n        self._ospf_exists = True\n        self.mock_get_config = patch.object(\n            onyx_ospf.OnyxOspfModule,\n            \"_get_ospf_config\")\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_get_interfaces_config = patch.object(\n            onyx_ospf.OnyxOspfModule,\n            \"_get_ospf_interfaces_config\")\n        self.get_interfaces_config = self.mock_get_interfaces_config.start()\n\n        self.mock_load_config = patch(\n            'ansible.module_utils.network.onyx.onyx.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestOnyxOspfModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def load_fixtures(self, commands=None, transport='cli'):\n        if self._ospf_exists:\n            config_file = 'onyx_ospf_show.cfg'\n            self.get_config.return_value = load_fixture(config_file)\n            config_file = 'onyx_ospf_interfaces_show.cfg'\n            self.get_interfaces_config.return_value = load_fixture(config_file)\n        else:\n            self.get_config.return_value = None\n            self.get_interfaces_config.return_value = None\n        self.load_config.return_value = None\n\n    def test_ospf_absent_no_change(self):\n        set_module_args(dict(ospf=3, state='absent'))\n        self.execute_module(changed=False)\n\n    def test_ospf_present_no_change(self):\n        interface = dict(name='Loopback 1', area='0.0.0.0')\n        set_module_args(dict(ospf=2, router_id='10.2.3.4',\n                             interfaces=[interface]))\n        self.execute_module(changed=False)\n\n    def test_ospf_present_remove(self):\n        set_module_args(dict(ospf=2, state='absent'))\n        commands = ['no router ospf 2']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_ospf_change_router(self):\n        interface = dict(name='Loopback 1', area='0.0.0.0')\n        set_module_args(dict(ospf=2, router_id='10.2.3.5',\n                             interfaces=[interface]))\n        commands = ['router ospf 2', 'router-id 10.2.3.5', 'exit']\n        self.execute_module(changed=True, commands=commands, sort=False)\n\n    def test_ospf_remove_router(self):\n        interface = dict(name='Loopback 1', area='0.0.0.0')\n        set_module_args(dict(ospf=2, interfaces=[interface]))\n        commands = ['router ospf 2', 'no router-id', 'exit']\n        self.execute_module(changed=True, commands=commands, sort=False)\n\n    def test_ospf_add_interface(self):\n        interfaces = [dict(name='Loopback 1', area='0.0.0.0'),\n                      dict(name='Loopback 2', area='0.0.0.0')]\n        set_module_args(dict(ospf=2, router_id='10.2.3.4',\n                             interfaces=interfaces))\n        commands = ['interface loopback 2 ip ospf area 0.0.0.0']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_ospf_remove_interface(self):\n        set_module_args(dict(ospf=2, router_id='10.2.3.4'))\n        commands = ['interface loopback 1 no ip ospf area']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_ospf_add(self):\n        self._ospf_exists = False\n        interfaces = [dict(name='Loopback 1', area='0.0.0.0'),\n                      dict(name='Vlan 210', area='0.0.0.0'),\n                      dict(name='Eth1/1', area='0.0.0.0'),\n                      dict(name='Po1', area='0.0.0.0')]\n        set_module_args(dict(ospf=2, router_id='10.2.3.4',\n                             interfaces=interfaces))\n        commands = ['router ospf 2', 'router-id 10.2.3.4', 'exit',\n                    'interface loopback 1 ip ospf area 0.0.0.0',\n                    'interface vlan 210 ip ospf area 0.0.0.0',\n                    'interface ethernet 1/1 ip ospf area 0.0.0.0',\n                    'interface port-channel 1 ip ospf area 0.0.0.0']\n        self.execute_module(changed=True, commands=commands)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_onyx_ospf.py", "id": "e030c3c098951d86a1fc682f94d64ebe", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/onyx/test_onyx_ospf.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}