{"author": "faif", "code": "\n# -*- coding: utf-8 -*-\n\n\"\"\n\nclass GraphSearch:\n\n    \n\n    def __init__(self, graph):\n        self.graph = graph\n\n    def find_path(self, start, end, path=None):\n        path = path or []\n\n        path.append(start)\n        if start == end:\n            return path\n        for node in self.graph.get(start, []):\n            if node not in path:\n                newpath = self.find_path(node, end, path)\n                if newpath:\n                    return newpath\n\n    def find_all_path(self, start, end, path=None):\n        path = path or []\n        path.append(start)\n        if start == end:\n            return [path]\n        paths = []\n        for node in self.graph.get(start, []):\n            if node not in path:\n                newpaths = self.find_all_path(node, end, path[:])\n                paths.extend(newpaths)\n        return paths\n\n    def find_shortest_path(self, start, end, path=None):\n        path = path or []\n        path.append(start)\n\n        if start == end:\n            return path\n        shortest = None\n        for node in self.graph.get(start, []):\n            if node not in path:\n                newpath = self.find_shortest_path(node, end, path[:])\n                if newpath:\n                    if not shortest or len(newpath) < len(shortest):\n                        shortest = newpath\n        return shortest\n\n\ngraph = {'A': ['B', 'C'],\n         'B': ['C', 'D'],\n         'C': ['D'],\n         'D': ['C'],\n         'E': ['F'],\n         'F': ['C']\n         }\n\n\ngraph1 = GraphSearch(graph)\n\n\nprint(graph1.find_path('A', 'D'))\nprint(graph1.find_all_path('A', 'D'))\nprint(graph1.find_shortest_path('A', 'D'))\n\n\n# ['A', 'B', 'C', 'D']\n# [['A', 'B', 'C', 'D'], ['A', 'B', 'D'], ['A', 'C', 'D']]\n# ['A', 'B', 'D']\n", "comments": "   graph search emulation python  source     http   www python org doc essays graphs         usr bin env python        coding  utf 8        example graph usage    initialization new graph search object      output          a    b    c    d         a    b    c    d      a    b    d      a    c    d         a    b    d   ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\n\nclass GraphSearch:\n\n    \"\"\"Graph search emulation in python, from source\n    http://www.python.org/doc/essays/graphs/\"\"\"\n\n    def __init__(self, graph):\n        self.graph = graph\n\n    def find_path(self, start, end, path=None):\n        path = path or []\n\n        path.append(start)\n        if start == end:\n            return path\n        for node in self.graph.get(start, []):\n            if node not in path:\n                newpath = self.find_path(node, end, path)\n                if newpath:\n                    return newpath\n\n    def find_all_path(self, start, end, path=None):\n        path = path or []\n        path.append(start)\n        if start == end:\n            return [path]\n        paths = []\n        for node in self.graph.get(start, []):\n            if node not in path:\n                newpaths = self.find_all_path(node, end, path[:])\n                paths.extend(newpaths)\n        return paths\n\n    def find_shortest_path(self, start, end, path=None):\n        path = path or []\n        path.append(start)\n\n        if start == end:\n            return path\n        shortest = None\n        for node in self.graph.get(start, []):\n            if node not in path:\n                newpath = self.find_shortest_path(node, end, path[:])\n                if newpath:\n                    if not shortest or len(newpath) < len(shortest):\n                        shortest = newpath\n        return shortest\n\n# example of graph usage\ngraph = {'A': ['B', 'C'],\n         'B': ['C', 'D'],\n         'C': ['D'],\n         'D': ['C'],\n         'E': ['F'],\n         'F': ['C']\n         }\n\n# initialization of new graph search object\ngraph1 = GraphSearch(graph)\n\n\nprint(graph1.find_path('A', 'D'))\nprint(graph1.find_all_path('A', 'D'))\nprint(graph1.find_shortest_path('A', 'D'))\n\n### OUTPUT ###\n# ['A', 'B', 'C', 'D']\n# [['A', 'B', 'C', 'D'], ['A', 'B', 'D'], ['A', 'C', 'D']]\n# ['A', 'B', 'D']\n", "description": "A collection of design patterns/idioms in Python", "file_name": "graph_search.py", "id": "73394b5ae9d9031261b417a3f5dc1e55", "language": "Python", "project_name": "python-patterns", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/faif-python-patterns/faif-python-patterns-20bd570/other/graph_search.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:52:50Z", "url": "https://github.com/faif/python-patterns", "wiki": true}