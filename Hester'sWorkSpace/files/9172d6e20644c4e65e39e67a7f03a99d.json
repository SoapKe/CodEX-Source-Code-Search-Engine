{"author": "nvbn", "code": "\n\nfrom contextlib import contextmanager\nfrom datetime import datetime\nimport sys\nfrom traceback import format_exception\nimport colorama\nfrom .conf import settings\nfrom . import const\n\n\ndef color(color_):\n    \n    if settings.no_colors:\n        return ''\n    else:\n        return color_\n\n\ndef warn(title):\n    sys.stderr.write(u'{warn}[WARN] {title}{reset}\\n'.format(\n        warn=color(colorama.Back.RED + colorama.Fore.WHITE\n                   + colorama.Style.BRIGHT),\n        reset=color(colorama.Style.RESET_ALL),\n        title=title))\n\n\ndef exception(title, exc_info):\n    sys.stderr.write(\n        u'{warn}[WARN] {title}:{reset}\\n{trace}'\n        u'{warn}----------------------------{reset}\\n\\n'.format(\n            warn=color(colorama.Back.RED + colorama.Fore.WHITE\n                       + colorama.Style.BRIGHT),\n            reset=color(colorama.Style.RESET_ALL),\n            title=title,\n            trace=''.join(format_exception(*exc_info))))\n\n\ndef rule_failed(rule, exc_info):\n    exception(u'Rule {}'.format(rule.name), exc_info)\n\n\ndef failed(msg):\n    sys.stderr.write(u'{red}{msg}{reset}\\n'.format(\n        msg=msg,\n        red=color(colorama.Fore.RED),\n        reset=color(colorama.Style.RESET_ALL)))\n\n\ndef show_corrected_command(corrected_command):\n    sys.stderr.write(u'{prefix}{bold}{script}{reset}{side_effect}\\n'.format(\n        prefix=const.USER_COMMAND_MARK,\n        script=corrected_command.script,\n        side_effect=u' (+side effect)' if corrected_command.side_effect else u'',\n        bold=color(colorama.Style.BRIGHT),\n        reset=color(colorama.Style.RESET_ALL)))\n\n\ndef confirm_text(corrected_command):\n    sys.stderr.write(\n        (u'{prefix}{clear}{bold}{script}{reset}{side_effect} '\n         u'[{green}enter{reset}/{blue}\u2191{reset}/{blue}\u2193{reset}'\n         u'/{red}ctrl+c{reset}]').format(\n            prefix=const.USER_COMMAND_MARK,\n            script=corrected_command.script,\n            side_effect=' (+side effect)' if corrected_command.side_effect else '',\n            clear='\\033[1K\\r',\n            bold=color(colorama.Style.BRIGHT),\n            green=color(colorama.Fore.GREEN),\n            red=color(colorama.Fore.RED),\n            reset=color(colorama.Style.RESET_ALL),\n            blue=color(colorama.Fore.BLUE)))\n\n\ndef debug(msg):\n    if settings.debug:\n        sys.stderr.write(u'{blue}{bold}DEBUG:{reset} {msg}\\n'.format(\n            msg=msg,\n            reset=color(colorama.Style.RESET_ALL),\n            blue=color(colorama.Fore.BLUE),\n            bold=color(colorama.Style.BRIGHT)))\n\n\n@contextmanager\ndef debug_time(msg):\n    started = datetime.now()\n    try:\n        yield\n    finally:\n        debug(u'{} took: {}'.format(msg, datetime.now() - started))\n\n\ndef how_to_configure_alias(configuration_details):\n    print(u\"Seems like {bold}fuck{reset} alias isn't configured!\".format(\n        bold=color(colorama.Style.BRIGHT),\n        reset=color(colorama.Style.RESET_ALL)))\n\n    if configuration_details:\n        print(\n            u\"Please put {bold}{content}{reset} in your \"\n            u\"{bold}{path}{reset} and apply \"\n            u\"changes with {bold}{reload}{reset} or restart your shell.\".format(\n                bold=color(colorama.Style.BRIGHT),\n                reset=color(colorama.Style.RESET_ALL),\n                **configuration_details._asdict()))\n\n        if configuration_details.can_configure_automatically:\n            print(\n                u\"Or run {bold}fuck{reset} second time for configuring\"\n                u\" it automatically.\".format(\n                    bold=color(colorama.Style.BRIGHT),\n                    reset=color(colorama.Style.RESET_ALL)))\n\n    print(u'More details - https://github.com/nvbn/thefuck\n\n\ndef already_configured(configuration_details):\n    print(\n        u\"Seems like {bold}fuck{reset} alias already configured!\\n\"\n        u\"For applying changes run {bold}{reload}{reset}\"\n        u\" or restart your shell.\".format(\n            bold=color(colorama.Style.BRIGHT),\n            reset=color(colorama.Style.RESET_ALL),\n            reload=configuration_details.reload))\n\n\ndef configured_successfully(configuration_details):\n    print(\n        u\"{bold}fuck{reset} alias configured successfully!\\n\"\n        u\"For applying changes run {bold}{reload}{reset}\"\n        u\" or restart your shell.\".format(\n            bold=color(colorama.Style.BRIGHT),\n            reset=color(colorama.Style.RESET_ALL),\n            reload=configuration_details.reload))\n\n\ndef version(thefuck_version, python_version):\n    sys.stderr.write(\n        u'The Fuck {} using Python {}\\n'.format(thefuck_version,\n                                                python_version))\n", "comments": "Utility for ability to disabling colored output.\n.\n# -*- encoding: utf-8 -*-\n#manual-installation')\n", "content": "# -*- encoding: utf-8 -*-\n\nfrom contextlib import contextmanager\nfrom datetime import datetime\nimport sys\nfrom traceback import format_exception\nimport colorama\nfrom .conf import settings\nfrom . import const\n\n\ndef color(color_):\n    \"\"\"Utility for ability to disabling colored output.\"\"\"\n    if settings.no_colors:\n        return ''\n    else:\n        return color_\n\n\ndef warn(title):\n    sys.stderr.write(u'{warn}[WARN] {title}{reset}\\n'.format(\n        warn=color(colorama.Back.RED + colorama.Fore.WHITE\n                   + colorama.Style.BRIGHT),\n        reset=color(colorama.Style.RESET_ALL),\n        title=title))\n\n\ndef exception(title, exc_info):\n    sys.stderr.write(\n        u'{warn}[WARN] {title}:{reset}\\n{trace}'\n        u'{warn}----------------------------{reset}\\n\\n'.format(\n            warn=color(colorama.Back.RED + colorama.Fore.WHITE\n                       + colorama.Style.BRIGHT),\n            reset=color(colorama.Style.RESET_ALL),\n            title=title,\n            trace=''.join(format_exception(*exc_info))))\n\n\ndef rule_failed(rule, exc_info):\n    exception(u'Rule {}'.format(rule.name), exc_info)\n\n\ndef failed(msg):\n    sys.stderr.write(u'{red}{msg}{reset}\\n'.format(\n        msg=msg,\n        red=color(colorama.Fore.RED),\n        reset=color(colorama.Style.RESET_ALL)))\n\n\ndef show_corrected_command(corrected_command):\n    sys.stderr.write(u'{prefix}{bold}{script}{reset}{side_effect}\\n'.format(\n        prefix=const.USER_COMMAND_MARK,\n        script=corrected_command.script,\n        side_effect=u' (+side effect)' if corrected_command.side_effect else u'',\n        bold=color(colorama.Style.BRIGHT),\n        reset=color(colorama.Style.RESET_ALL)))\n\n\ndef confirm_text(corrected_command):\n    sys.stderr.write(\n        (u'{prefix}{clear}{bold}{script}{reset}{side_effect} '\n         u'[{green}enter{reset}/{blue}\u2191{reset}/{blue}\u2193{reset}'\n         u'/{red}ctrl+c{reset}]').format(\n            prefix=const.USER_COMMAND_MARK,\n            script=corrected_command.script,\n            side_effect=' (+side effect)' if corrected_command.side_effect else '',\n            clear='\\033[1K\\r',\n            bold=color(colorama.Style.BRIGHT),\n            green=color(colorama.Fore.GREEN),\n            red=color(colorama.Fore.RED),\n            reset=color(colorama.Style.RESET_ALL),\n            blue=color(colorama.Fore.BLUE)))\n\n\ndef debug(msg):\n    if settings.debug:\n        sys.stderr.write(u'{blue}{bold}DEBUG:{reset} {msg}\\n'.format(\n            msg=msg,\n            reset=color(colorama.Style.RESET_ALL),\n            blue=color(colorama.Fore.BLUE),\n            bold=color(colorama.Style.BRIGHT)))\n\n\n@contextmanager\ndef debug_time(msg):\n    started = datetime.now()\n    try:\n        yield\n    finally:\n        debug(u'{} took: {}'.format(msg, datetime.now() - started))\n\n\ndef how_to_configure_alias(configuration_details):\n    print(u\"Seems like {bold}fuck{reset} alias isn't configured!\".format(\n        bold=color(colorama.Style.BRIGHT),\n        reset=color(colorama.Style.RESET_ALL)))\n\n    if configuration_details:\n        print(\n            u\"Please put {bold}{content}{reset} in your \"\n            u\"{bold}{path}{reset} and apply \"\n            u\"changes with {bold}{reload}{reset} or restart your shell.\".format(\n                bold=color(colorama.Style.BRIGHT),\n                reset=color(colorama.Style.RESET_ALL),\n                **configuration_details._asdict()))\n\n        if configuration_details.can_configure_automatically:\n            print(\n                u\"Or run {bold}fuck{reset} second time for configuring\"\n                u\" it automatically.\".format(\n                    bold=color(colorama.Style.BRIGHT),\n                    reset=color(colorama.Style.RESET_ALL)))\n\n    print(u'More details - https://github.com/nvbn/thefuck#manual-installation')\n\n\ndef already_configured(configuration_details):\n    print(\n        u\"Seems like {bold}fuck{reset} alias already configured!\\n\"\n        u\"For applying changes run {bold}{reload}{reset}\"\n        u\" or restart your shell.\".format(\n            bold=color(colorama.Style.BRIGHT),\n            reset=color(colorama.Style.RESET_ALL),\n            reload=configuration_details.reload))\n\n\ndef configured_successfully(configuration_details):\n    print(\n        u\"{bold}fuck{reset} alias configured successfully!\\n\"\n        u\"For applying changes run {bold}{reload}{reset}\"\n        u\" or restart your shell.\".format(\n            bold=color(colorama.Style.BRIGHT),\n            reset=color(colorama.Style.RESET_ALL),\n            reload=configuration_details.reload))\n\n\ndef version(thefuck_version, python_version):\n    sys.stderr.write(\n        u'The Fuck {} using Python {}\\n'.format(thefuck_version,\n                                                python_version))\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "logs.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/logs.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}