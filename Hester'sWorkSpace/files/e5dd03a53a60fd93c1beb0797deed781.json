{"author": "django", "code": "import datetime\n\nfrom django.core import signing\nfrom django.test import SimpleTestCase\nfrom django.test.utils import freeze_time\n\n\nclass TestSigner(SimpleTestCase):\n\n    def test_signature(self):\n        \"signature() method should generate a signature\"\n        signer = signing.Signer('predictable-secret')\n        signer2 = signing.Signer('predictable-secret2')\n        for s in (\n            b'hello',\n            b'3098247:529:087:',\n            '\\u2019'.encode(),\n        ):\n            self.assertEqual(\n                signer.signature(s),\n                signing.base64_hmac(signer.salt + 'signer', s, 'predictable-secret')\n            )\n            self.assertNotEqual(signer.signature(s), signer2.signature(s))\n\n    def test_signature_with_salt(self):\n        \"signature(value, salt=...) should work\"\n        signer = signing.Signer('predictable-secret', salt='extra-salt')\n        self.assertEqual(\n            signer.signature('hello'),\n            signing.base64_hmac('extra-salt' + 'signer', 'hello', 'predictable-secret')\n        )\n        self.assertNotEqual(\n            signing.Signer('predictable-secret', salt='one').signature('hello'),\n            signing.Signer('predictable-secret', salt='two').signature('hello'))\n\n    def test_sign_unsign(self):\n        \"sign/unsign should be reversible\"\n        signer = signing.Signer('predictable-secret')\n        examples = [\n            'q;wjmbk;wkmb',\n            '3098247529087',\n            '3098247:529:087:',\n            'jkw osanteuh ,rcuh nthu aou oauh ,ud du',\n            '\\u2019',\n        ]\n        for example in examples:\n            signed = signer.sign(example)\n            self.assertIsInstance(signed, str)\n            self.assertNotEqual(example, signed)\n            self.assertEqual(example, signer.unsign(signed))\n\n    def test_unsign_detects_tampering(self):\n        \"unsign should raise an exception if the value has been tampered with\"\n        signer = signing.Signer('predictable-secret')\n        value = 'Another string'\n        signed_value = signer.sign(value)\n        transforms = (\n            lambda s: s.upper(),\n            lambda s: s + 'a',\n            lambda s: 'a' + s[1:],\n            lambda s: s.replace(':', ''),\n        )\n        self.assertEqual(value, signer.unsign(signed_value))\n        for transform in transforms:\n            with self.assertRaises(signing.BadSignature):\n                signer.unsign(transform(signed_value))\n\n    def test_dumps_loads(self):\n        \"dumps and loads be reversible for any JSON serializable object\"\n        objects = [\n            ['a', 'list'],\n            'a string \\u2019',\n            {'a': 'dictionary'},\n        ]\n        for o in objects:\n            self.assertNotEqual(o, signing.dumps(o))\n            self.assertEqual(o, signing.loads(signing.dumps(o)))\n            self.assertNotEqual(o, signing.dumps(o, compress=True))\n            self.assertEqual(o, signing.loads(signing.dumps(o, compress=True)))\n\n    def test_decode_detects_tampering(self):\n        \"loads should raise exception for tampered objects\"\n        transforms = (\n            lambda s: s.upper(),\n            lambda s: s + 'a',\n            lambda s: 'a' + s[1:],\n            lambda s: s.replace(':', ''),\n        )\n        value = {\n            'foo': 'bar',\n            'baz': 1,\n        }\n        encoded = signing.dumps(value)\n        self.assertEqual(value, signing.loads(encoded))\n        for transform in transforms:\n            with self.assertRaises(signing.BadSignature):\n                signing.loads(transform(encoded))\n\n    def test_works_with_non_ascii_keys(self):\n        binary_key = b'\\xe7'  # Set some binary (non-ASCII key)\n\n        s = signing.Signer(binary_key)\n        self.assertEqual('foo:6NB0fssLW5RQvZ3Y-MTerq2rX7w', s.sign('foo'))\n\n    def test_valid_sep(self):\n        separators = ['/', '*sep*', ',']\n        for sep in separators:\n            signer = signing.Signer('predictable-secret', sep=sep)\n            self.assertEqual('foo%ssH9B01cZcJ9FoT_jEVkRkNULrl8' % sep, signer.sign('foo'))\n\n    def test_invalid_sep(self):\n        \n        msg = 'Unsafe Signer separator: %r (cannot be empty or consist of only A-z0-9-_=)'\n        separators = ['', '-', 'abc']\n        for sep in separators:\n            with self.assertRaisesMessage(ValueError, msg % sep):\n                signing.Signer(sep=sep)\n\n\nclass TestTimestampSigner(SimpleTestCase):\n\n    def test_timestamp_signer(self):\n        value = 'hello'\n        with freeze_time(123456789):\n            signer = signing.TimestampSigner('predictable-key')\n            ts = signer.sign(value)\n            self.assertNotEqual(ts, signing.Signer('predictable-key').sign(value))\n            self.assertEqual(signer.unsign(ts), value)\n\n        with freeze_time(123456800):\n            self.assertEqual(signer.unsign(ts, max_age=12), value)\n            \n            self.assertEqual(signer.unsign(ts, max_age=datetime.timedelta(seconds=11)), value)\n            with self.assertRaises(signing.SignatureExpired):\n                signer.unsign(ts, max_age=10)\n", "comments": "   warn invalid separator       set binary (non ascii key)    max age parameter also accept datetime timedelta object ", "content": "import datetime\n\nfrom django.core import signing\nfrom django.test import SimpleTestCase\nfrom django.test.utils import freeze_time\n\n\nclass TestSigner(SimpleTestCase):\n\n    def test_signature(self):\n        \"signature() method should generate a signature\"\n        signer = signing.Signer('predictable-secret')\n        signer2 = signing.Signer('predictable-secret2')\n        for s in (\n            b'hello',\n            b'3098247:529:087:',\n            '\\u2019'.encode(),\n        ):\n            self.assertEqual(\n                signer.signature(s),\n                signing.base64_hmac(signer.salt + 'signer', s, 'predictable-secret')\n            )\n            self.assertNotEqual(signer.signature(s), signer2.signature(s))\n\n    def test_signature_with_salt(self):\n        \"signature(value, salt=...) should work\"\n        signer = signing.Signer('predictable-secret', salt='extra-salt')\n        self.assertEqual(\n            signer.signature('hello'),\n            signing.base64_hmac('extra-salt' + 'signer', 'hello', 'predictable-secret')\n        )\n        self.assertNotEqual(\n            signing.Signer('predictable-secret', salt='one').signature('hello'),\n            signing.Signer('predictable-secret', salt='two').signature('hello'))\n\n    def test_sign_unsign(self):\n        \"sign/unsign should be reversible\"\n        signer = signing.Signer('predictable-secret')\n        examples = [\n            'q;wjmbk;wkmb',\n            '3098247529087',\n            '3098247:529:087:',\n            'jkw osanteuh ,rcuh nthu aou oauh ,ud du',\n            '\\u2019',\n        ]\n        for example in examples:\n            signed = signer.sign(example)\n            self.assertIsInstance(signed, str)\n            self.assertNotEqual(example, signed)\n            self.assertEqual(example, signer.unsign(signed))\n\n    def test_unsign_detects_tampering(self):\n        \"unsign should raise an exception if the value has been tampered with\"\n        signer = signing.Signer('predictable-secret')\n        value = 'Another string'\n        signed_value = signer.sign(value)\n        transforms = (\n            lambda s: s.upper(),\n            lambda s: s + 'a',\n            lambda s: 'a' + s[1:],\n            lambda s: s.replace(':', ''),\n        )\n        self.assertEqual(value, signer.unsign(signed_value))\n        for transform in transforms:\n            with self.assertRaises(signing.BadSignature):\n                signer.unsign(transform(signed_value))\n\n    def test_dumps_loads(self):\n        \"dumps and loads be reversible for any JSON serializable object\"\n        objects = [\n            ['a', 'list'],\n            'a string \\u2019',\n            {'a': 'dictionary'},\n        ]\n        for o in objects:\n            self.assertNotEqual(o, signing.dumps(o))\n            self.assertEqual(o, signing.loads(signing.dumps(o)))\n            self.assertNotEqual(o, signing.dumps(o, compress=True))\n            self.assertEqual(o, signing.loads(signing.dumps(o, compress=True)))\n\n    def test_decode_detects_tampering(self):\n        \"loads should raise exception for tampered objects\"\n        transforms = (\n            lambda s: s.upper(),\n            lambda s: s + 'a',\n            lambda s: 'a' + s[1:],\n            lambda s: s.replace(':', ''),\n        )\n        value = {\n            'foo': 'bar',\n            'baz': 1,\n        }\n        encoded = signing.dumps(value)\n        self.assertEqual(value, signing.loads(encoded))\n        for transform in transforms:\n            with self.assertRaises(signing.BadSignature):\n                signing.loads(transform(encoded))\n\n    def test_works_with_non_ascii_keys(self):\n        binary_key = b'\\xe7'  # Set some binary (non-ASCII key)\n\n        s = signing.Signer(binary_key)\n        self.assertEqual('foo:6NB0fssLW5RQvZ3Y-MTerq2rX7w', s.sign('foo'))\n\n    def test_valid_sep(self):\n        separators = ['/', '*sep*', ',']\n        for sep in separators:\n            signer = signing.Signer('predictable-secret', sep=sep)\n            self.assertEqual('foo%ssH9B01cZcJ9FoT_jEVkRkNULrl8' % sep, signer.sign('foo'))\n\n    def test_invalid_sep(self):\n        \"\"\"should warn on invalid separator\"\"\"\n        msg = 'Unsafe Signer separator: %r (cannot be empty or consist of only A-z0-9-_=)'\n        separators = ['', '-', 'abc']\n        for sep in separators:\n            with self.assertRaisesMessage(ValueError, msg % sep):\n                signing.Signer(sep=sep)\n\n\nclass TestTimestampSigner(SimpleTestCase):\n\n    def test_timestamp_signer(self):\n        value = 'hello'\n        with freeze_time(123456789):\n            signer = signing.TimestampSigner('predictable-key')\n            ts = signer.sign(value)\n            self.assertNotEqual(ts, signing.Signer('predictable-key').sign(value))\n            self.assertEqual(signer.unsign(ts), value)\n\n        with freeze_time(123456800):\n            self.assertEqual(signer.unsign(ts, max_age=12), value)\n            # max_age parameter can also accept a datetime.timedelta object\n            self.assertEqual(signer.unsign(ts, max_age=datetime.timedelta(seconds=11)), value)\n            with self.assertRaises(signing.SignatureExpired):\n                signer.unsign(ts, max_age=10)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "e5dd03a53a60fd93c1beb0797deed781", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/signing/tests.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}