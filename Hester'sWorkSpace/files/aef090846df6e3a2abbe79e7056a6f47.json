{"author": "donnemartin", "code": "from nose.tools import assert_equal\nfrom nose.tools import assert_raises\nfrom nose.tools import assert_true\n\n\nclass TestMaxProfit(object):\n\n    def test_max_profit(self):\n        stock_trader = StockTrader()\n        assert_raises(TypeError, stock_trader.find_max_profit, None, None)\n        assert_equal(stock_trader.find_max_profit(prices=[], k=0), [])\n        prices = [5, 4, 3, 2, 1]\n        k = 3\n        assert_equal(stock_trader.find_max_profit(prices, k), (0, []))\n        prices = [2, 5, 7, 1, 4, 3, 1, 3]\n        profit, transactions = stock_trader.find_max_profit(prices, k)\n        assert_equal(profit, 10)\n        assert_true(Transaction(Type.SELL,\n                                day=7,\n                                price=3) in transactions)\n        assert_true(Transaction(Type.BUY,\n                                day=6,\n                                price=1) in transactions)\n        assert_true(Transaction(Type.SELL,\n                                day=4,\n                                price=4) in transactions)\n        assert_true(Transaction(Type.BUY,\n                                day=3,\n                                price=1) in transactions)\n        assert_true(Transaction(Type.SELL,\n                                day=2,\n                                price=7) in transactions)\n        assert_true(Transaction(Type.BUY,\n                                day=0,\n                                price=2) in transactions)\n        print('Success: test_max_profit')\n\n\ndef main():\n    test = TestMaxProfit()\n    test.test_max_profit()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\nfrom nose.tools import assert_raises\nfrom nose.tools import assert_true\n\n\nclass TestMaxProfit(object):\n\n    def test_max_profit(self):\n        stock_trader = StockTrader()\n        assert_raises(TypeError, stock_trader.find_max_profit, None, None)\n        assert_equal(stock_trader.find_max_profit(prices=[], k=0), [])\n        prices = [5, 4, 3, 2, 1]\n        k = 3\n        assert_equal(stock_trader.find_max_profit(prices, k), (0, []))\n        prices = [2, 5, 7, 1, 4, 3, 1, 3]\n        profit, transactions = stock_trader.find_max_profit(prices, k)\n        assert_equal(profit, 10)\n        assert_true(Transaction(Type.SELL,\n                                day=7,\n                                price=3) in transactions)\n        assert_true(Transaction(Type.BUY,\n                                day=6,\n                                price=1) in transactions)\n        assert_true(Transaction(Type.SELL,\n                                day=4,\n                                price=4) in transactions)\n        assert_true(Transaction(Type.BUY,\n                                day=3,\n                                price=1) in transactions)\n        assert_true(Transaction(Type.SELL,\n                                day=2,\n                                price=7) in transactions)\n        assert_true(Transaction(Type.BUY,\n                                day=0,\n                                price=2) in transactions)\n        print('Success: test_max_profit')\n\n\ndef main():\n    test = TestMaxProfit()\n    test.test_max_profit()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_max_profit.py", "id": "aef090846df6e3a2abbe79e7056a6f47", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/recursion_dynamic/max_profit_k/test_max_profit.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}