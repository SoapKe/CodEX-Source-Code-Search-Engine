{"author": "ansible", "code": " (c) 2012-2015, Michael DeHaan <michael.dehaan@gmail.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests import unittest, mock\nfrom ansible.errors import AnsibleError\nfrom ansible.plugins.cache import FactCache\nfrom ansible.plugins.cache.base import BaseCacheModule\nfrom ansible.plugins.cache.memory import CacheModule as MemoryCache\n\nHAVE_MEMCACHED = True\ntry:\n    import memcache\nexcept ImportError:\n    HAVE_MEMCACHED = False\nelse:\n     Use an else so that the only reason we skip this is for lack of\n     memcached, not errors importing the plugin\n    from ansible.plugins.cache.memcached import CacheModule as MemcachedCache\n\nHAVE_REDIS = True\ntry:\n    import redis\nexcept ImportError:\n    HAVE_REDIS = False\nelse:\n    from ansible.plugins.cache.redis import CacheModule as RedisCache\n\n\nclass TestFactCache(unittest.TestCase):\n\n    def setUp(self):\n        with mock.patch('ansible.constants.CACHE_PLUGIN', 'memory'):\n            self.cache = FactCache()\n\n    def test_copy(self):\n        self.cache['avocado'] = 'fruit'\n        self.cache['daisy'] = 'flower'\n        a_copy = self.cache.copy()\n        self.assertEqual(type(a_copy), dict)\n        self.assertEqual(a_copy, dict(avocado='fruit', daisy='flower'))\n\n    def test_plugin_load_failure(self):\n         See https://github.com/ansible/ansible/issues/18751\n         Note no fact_connection config set, so this will fail\n        with mock.patch('ansible.constants.CACHE_PLUGIN', 'json'):\n            self.assertRaisesRegexp(AnsibleError,\n                                    \"Unable to load the facts cache plugin.*json.*\",\n                                    FactCache)\n\n\nclass TestAbstractClass(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def test_subclass_error(self):\n        class CacheModule1(BaseCacheModule):\n            pass\n        with self.assertRaises(TypeError):\n            CacheModule1()   pylint: disable=abstract-class-instantiated\n\n        class CacheModule2(BaseCacheModule):\n            def get(self, key):\n                super(CacheModule2, self).get(key)\n\n        with self.assertRaises(TypeError):\n            CacheModule2()   pylint: disable=abstract-class-instantiated\n\n    def test_subclass_success(self):\n        class CacheModule3(BaseCacheModule):\n            def get(self, key):\n                super(CacheModule3, self).get(key)\n\n            def set(self, key, value):\n                super(CacheModule3, self).set(key, value)\n\n            def keys(self):\n                super(CacheModule3, self).keys()\n\n            def contains(self, key):\n                super(CacheModule3, self).contains(key)\n\n            def delete(self, key):\n                super(CacheModule3, self).delete(key)\n\n            def flush(self):\n                super(CacheModule3, self).flush()\n\n            def copy(self):\n                super(CacheModule3, self).copy()\n\n        self.assertIsInstance(CacheModule3(), CacheModule3)\n\n    @unittest.skipUnless(HAVE_MEMCACHED, 'python-memcached module not installed')\n    def test_memcached_cachemodule(self):\n        self.assertIsInstance(MemcachedCache(), MemcachedCache)\n\n    def test_memory_cachemodule(self):\n        self.assertIsInstance(MemoryCache(), MemoryCache)\n\n    @unittest.skipUnless(HAVE_REDIS, 'Redis python module not installed')\n    def test_redis_cachemodule(self):\n        self.assertIsInstance(RedisCache(), RedisCache)\n", "comments": "  (c) 2012 2015  michael dehaan  michael dehaan gmail com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish    use else reason skip lack    memcached  errors importing plugin    see https   github com ansible ansible issues 18751    note fact connection config set  fail    pylint  disable abstract class instantiated    pylint  disable abstract class instantiated ", "content": "# (c) 2012-2015, Michael DeHaan <michael.dehaan@gmail.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests import unittest, mock\nfrom ansible.errors import AnsibleError\nfrom ansible.plugins.cache import FactCache\nfrom ansible.plugins.cache.base import BaseCacheModule\nfrom ansible.plugins.cache.memory import CacheModule as MemoryCache\n\nHAVE_MEMCACHED = True\ntry:\n    import memcache\nexcept ImportError:\n    HAVE_MEMCACHED = False\nelse:\n    # Use an else so that the only reason we skip this is for lack of\n    # memcached, not errors importing the plugin\n    from ansible.plugins.cache.memcached import CacheModule as MemcachedCache\n\nHAVE_REDIS = True\ntry:\n    import redis\nexcept ImportError:\n    HAVE_REDIS = False\nelse:\n    from ansible.plugins.cache.redis import CacheModule as RedisCache\n\n\nclass TestFactCache(unittest.TestCase):\n\n    def setUp(self):\n        with mock.patch('ansible.constants.CACHE_PLUGIN', 'memory'):\n            self.cache = FactCache()\n\n    def test_copy(self):\n        self.cache['avocado'] = 'fruit'\n        self.cache['daisy'] = 'flower'\n        a_copy = self.cache.copy()\n        self.assertEqual(type(a_copy), dict)\n        self.assertEqual(a_copy, dict(avocado='fruit', daisy='flower'))\n\n    def test_plugin_load_failure(self):\n        # See https://github.com/ansible/ansible/issues/18751\n        # Note no fact_connection config set, so this will fail\n        with mock.patch('ansible.constants.CACHE_PLUGIN', 'json'):\n            self.assertRaisesRegexp(AnsibleError,\n                                    \"Unable to load the facts cache plugin.*json.*\",\n                                    FactCache)\n\n\nclass TestAbstractClass(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def test_subclass_error(self):\n        class CacheModule1(BaseCacheModule):\n            pass\n        with self.assertRaises(TypeError):\n            CacheModule1()  # pylint: disable=abstract-class-instantiated\n\n        class CacheModule2(BaseCacheModule):\n            def get(self, key):\n                super(CacheModule2, self).get(key)\n\n        with self.assertRaises(TypeError):\n            CacheModule2()  # pylint: disable=abstract-class-instantiated\n\n    def test_subclass_success(self):\n        class CacheModule3(BaseCacheModule):\n            def get(self, key):\n                super(CacheModule3, self).get(key)\n\n            def set(self, key, value):\n                super(CacheModule3, self).set(key, value)\n\n            def keys(self):\n                super(CacheModule3, self).keys()\n\n            def contains(self, key):\n                super(CacheModule3, self).contains(key)\n\n            def delete(self, key):\n                super(CacheModule3, self).delete(key)\n\n            def flush(self):\n                super(CacheModule3, self).flush()\n\n            def copy(self):\n                super(CacheModule3, self).copy()\n\n        self.assertIsInstance(CacheModule3(), CacheModule3)\n\n    @unittest.skipUnless(HAVE_MEMCACHED, 'python-memcached module not installed')\n    def test_memcached_cachemodule(self):\n        self.assertIsInstance(MemcachedCache(), MemcachedCache)\n\n    def test_memory_cachemodule(self):\n        self.assertIsInstance(MemoryCache(), MemoryCache)\n\n    @unittest.skipUnless(HAVE_REDIS, 'Redis python module not installed')\n    def test_redis_cachemodule(self):\n        self.assertIsInstance(RedisCache(), RedisCache)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_cache.py", "id": "a926e3c365fa3d556b4c1046e4bd8211", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/plugins/cache/test_cache.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}