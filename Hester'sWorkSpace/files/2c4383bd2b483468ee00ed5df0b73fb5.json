{"author": "odoo", "code": " -*- coding: utf-8 -*-\n\n\nimport base64\n\nfrom odoo import http, _\nfrom odoo.exceptions import AccessError\nfrom odoo.http import request\nfrom odoo.tools import consteq\nfrom odoo.addons.portal.controllers.mail import _message_post_helper\nfrom odoo.addons.portal.controllers.portal import CustomerPortal, pager as portal_pager, get_records_pager\n\n\nclass CustomerPortal(CustomerPortal):\n\n    def _prepare_portal_layout_values(self):\n        values = super(CustomerPortal, self)._prepare_portal_layout_values()\n        partner = request.env.user.partner_id\n\n        SaleOrder = request.env['sale.order']\n        quotation_count = SaleOrder.search_count([\n            ('message_partner_ids', 'child_of', [partner.commercial_partner_id.id]),\n            ('state', 'in', ['sent', 'cancel'])\n        ])\n        order_count = SaleOrder.search_count([\n            ('message_partner_ids', 'child_of', [partner.commercial_partner_id.id]),\n            ('state', 'in', ['sale', 'done'])\n        ])\n\n        values.update({\n            'quotation_count': quotation_count,\n            'order_count': order_count,\n        })\n        return values\n\n    \n     Quotations and Sales Orders\n    \n\n    def _order_check_access(self, order_id, access_token=None):\n        order = request.env['sale.order'].browse([order_id])\n        order_sudo = order.sudo()\n        try:\n            order.check_access_rights('read')\n            order.check_access_rule('read')\n        except AccessError:\n            if not access_token or not consteq(order_sudo.access_token, access_token):\n                raise\n        return order_sudo\n\n    def _order_get_page_view_values(self, order, access_token, **kwargs):\n        order_invoice_lines = {il.product_id.id: il.invoice_id for il in order.invoice_ids.mapped('invoice_line_ids')}\n        values = {\n            'order': order,\n            'order_invoice_lines': order_invoice_lines,\n        }\n        if access_token:\n            values['no_breadcrumbs'] = True\n            values['access_token'] = access_token\n        values['portal_confirmation'] = order.get_portal_confirmation_action()\n\n        if kwargs.get('error'):\n            values['error'] = kwargs['error']\n        if kwargs.get('warning'):\n            values['warning'] = kwargs['warning']\n        if kwargs.get('success'):\n            values['success'] = kwargs['success']\n\n        history = request.session.get('my_orders_history', [])\n        values.update(get_records_pager(history, order))\n\n        return values\n\n    @http.route(['/my/quotes', '/my/quotes/page/<int:page>'], type='http', auth=\"user\", website=True)\n    def portal_my_quotes(self, page=1, date_begin=None, date_end=None, sortby=None, **kw):\n        values = self._prepare_portal_layout_values()\n        partner = request.env.user.partner_id\n        SaleOrder = request.env['sale.order']\n\n        domain = [\n            ('message_partner_ids', 'child_of', [partner.commercial_partner_id.id]),\n            ('state', 'in', ['sent', 'cancel'])\n        ]\n\n        searchbar_sortings = {\n            'date': {'label': _('Order Date'), 'order': 'date_order desc'},\n            'name': {'label': _('Reference'), 'order': 'name'},\n            'stage': {'label': _('Stage'), 'order': 'state'},\n        }\n\n         default sortby order\n        if not sortby:\n            sortby = 'date'\n        sort_order = searchbar_sortings[sortby]['order']\n\n        archive_groups = self._get_archive_groups('sale.order', domain)\n        if date_begin and date_end:\n            domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n\n         count for pager\n        quotation_count = SaleOrder.search_count(domain)\n         make pager\n        pager = portal_pager(\n            url=\"/my/quotes\",\n            url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby},\n            total=quotation_count,\n            page=page,\n            step=self._items_per_page\n        )\n         search the count to display, according to the pager data\n        quotations = SaleOrder.search(domain, order=sort_order, limit=self._items_per_page, offset=pager['offset'])\n        request.session['my_quotes_history'] = quotations.ids[:100]\n\n        values.update({\n            'date': date_begin,\n            'quotations': quotations.sudo(),\n            'page_name': 'quote',\n            'pager': pager,\n            'archive_groups': archive_groups,\n            'default_url': '/my/quotes',\n            'searchbar_sortings': searchbar_sortings,\n            'sortby': sortby,\n        })\n        return request.render(\"sale.portal_my_quotations\", values)\n\n    @http.route(['/my/orders', '/my/orders/page/<int:page>'], type='http', auth=\"user\", website=True)\n    def portal_my_orders(self, page=1, date_begin=None, date_end=None, sortby=None, **kw):\n        values = self._prepare_portal_layout_values()\n        partner = request.env.user.partner_id\n        SaleOrder = request.env['sale.order']\n\n        domain = [\n            ('message_partner_ids', 'child_of', [partner.commercial_partner_id.id]),\n            ('state', 'in', ['sale', 'done'])\n        ]\n\n        searchbar_sortings = {\n            'date': {'label': _('Order Date'), 'order': 'date_order desc'},\n            'name': {'label': _('Reference'), 'order': 'name'},\n            'stage': {'label': _('Stage'), 'order': 'state'},\n        }\n         default sortby order\n        if not sortby:\n            sortby = 'date'\n        sort_order = searchbar_sortings[sortby]['order']\n\n        archive_groups = self._get_archive_groups('sale.order', domain)\n        if date_begin and date_end:\n            domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n\n         count for pager\n        order_count = SaleOrder.search_count(domain)\n         pager\n        pager = portal_pager(\n            url=\"/my/orders\",\n            url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby},\n            total=order_count,\n            page=page,\n            step=self._items_per_page\n        )\n         content according to pager and archive selected\n        orders = SaleOrder.search(domain, order=sort_order, limit=self._items_per_page, offset=pager['offset'])\n        request.session['my_orders_history'] = orders.ids[:100]\n\n        values.update({\n            'date': date_begin,\n            'orders': orders.sudo(),\n            'page_name': 'order',\n            'pager': pager,\n            'archive_groups': archive_groups,\n            'default_url': '/my/orders',\n            'searchbar_sortings': searchbar_sortings,\n            'sortby': sortby,\n        })\n        return request.render(\"sale.portal_my_orders\", values)\n\n    @http.route(['/my/orders/<int:order>'], type='http', auth=\"public\", website=True)\n    def portal_order_page(self, order=None, access_token=None, **kw):\n        try:\n            order_sudo = self._order_check_access(order, access_token=access_token)\n        except AccessError:\n            return request.redirect('/my')\n\n        values = self._order_get_page_view_values(order_sudo, access_token, **kw)\n        return request.render(\"sale.portal_order_page\", values)\n\n    @http.route(['/my/orders/pdf/<int:order_id>'], type='http', auth=\"public\", website=True)\n    def portal_order_report(self, order_id, access_token=None, **kw):\n        try:\n            order_sudo = self._order_check_access(order_id, access_token)\n        except AccessError:\n            return request.redirect('/my')\n\n         print report as sudo, since it require access to taxes, payment term, ... and portal\n         does not have those access rights.\n        pdf = request.env.ref('sale.action_report_saleorder').sudo().render_qweb_pdf([order_sudo.id])[0]\n        pdfhttpheaders = [\n            ('Content-Type', 'application/pdf'),\n            ('Content-Length', len(pdf)),\n        ]\n        return request.make_response(pdf, headers=pdfhttpheaders)\n\n    def _portal_quote_user_can_accept(self, order_id):\n        return request.env['ir.config_parameter'].sudo().get_param('sale.sale_portal_confirmation_options', default='none') in ('pay', 'sign')\n\n    @http.route(['/my/quotes/accept'], type='json', auth=\"public\", website=True)\n    def portal_quote_accept(self, res_id, access_token=None, partner_name=None, signature=None):\n        if not self._portal_quote_user_can_accept(res_id):\n            return {'error': _('Operation not allowed')}\n        if not signature:\n            return {'error': _('Signature is missing.')}\n\n        try:\n            order_sudo = self._order_check_access(res_id, access_token=access_token)\n        except AccessError:\n            return {'error': _('Invalid order')}\n        if order_sudo.state != 'sent':\n            return {'error': _('Order is not in a state requiring customer validation.')}\n\n        order_sudo.action_confirm()\n\n        _message_post_helper(\n            res_model='sale.order',\n            res_id=order_sudo.id,\n            message=_('Order signed by %s') % (partner_name,),\n            attachments=[('signature.png', base64.b64decode(signature))] if signature else [],\n            **({'token': access_token} if access_token else {}))\n        return {\n            'success': _('Your Order has been confirmed.'),\n            'redirect_url': '/my/orders/%s?%s' % (order_sudo.id, access_token and 'access_token=%s' % order_sudo.access_token or ''),\n        }\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details        quotations sales orders       default sortby order    count pager    make pager    search count display  according pager data    default sortby order    count pager    pager    content according pager archive selected    print report sudo  since require access taxes  payment term      portal    access rights  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport base64\n\nfrom odoo import http, _\nfrom odoo.exceptions import AccessError\nfrom odoo.http import request\nfrom odoo.tools import consteq\nfrom odoo.addons.portal.controllers.mail import _message_post_helper\nfrom odoo.addons.portal.controllers.portal import CustomerPortal, pager as portal_pager, get_records_pager\n\n\nclass CustomerPortal(CustomerPortal):\n\n    def _prepare_portal_layout_values(self):\n        values = super(CustomerPortal, self)._prepare_portal_layout_values()\n        partner = request.env.user.partner_id\n\n        SaleOrder = request.env['sale.order']\n        quotation_count = SaleOrder.search_count([\n            ('message_partner_ids', 'child_of', [partner.commercial_partner_id.id]),\n            ('state', 'in', ['sent', 'cancel'])\n        ])\n        order_count = SaleOrder.search_count([\n            ('message_partner_ids', 'child_of', [partner.commercial_partner_id.id]),\n            ('state', 'in', ['sale', 'done'])\n        ])\n\n        values.update({\n            'quotation_count': quotation_count,\n            'order_count': order_count,\n        })\n        return values\n\n    #\n    # Quotations and Sales Orders\n    #\n\n    def _order_check_access(self, order_id, access_token=None):\n        order = request.env['sale.order'].browse([order_id])\n        order_sudo = order.sudo()\n        try:\n            order.check_access_rights('read')\n            order.check_access_rule('read')\n        except AccessError:\n            if not access_token or not consteq(order_sudo.access_token, access_token):\n                raise\n        return order_sudo\n\n    def _order_get_page_view_values(self, order, access_token, **kwargs):\n        order_invoice_lines = {il.product_id.id: il.invoice_id for il in order.invoice_ids.mapped('invoice_line_ids')}\n        values = {\n            'order': order,\n            'order_invoice_lines': order_invoice_lines,\n        }\n        if access_token:\n            values['no_breadcrumbs'] = True\n            values['access_token'] = access_token\n        values['portal_confirmation'] = order.get_portal_confirmation_action()\n\n        if kwargs.get('error'):\n            values['error'] = kwargs['error']\n        if kwargs.get('warning'):\n            values['warning'] = kwargs['warning']\n        if kwargs.get('success'):\n            values['success'] = kwargs['success']\n\n        history = request.session.get('my_orders_history', [])\n        values.update(get_records_pager(history, order))\n\n        return values\n\n    @http.route(['/my/quotes', '/my/quotes/page/<int:page>'], type='http', auth=\"user\", website=True)\n    def portal_my_quotes(self, page=1, date_begin=None, date_end=None, sortby=None, **kw):\n        values = self._prepare_portal_layout_values()\n        partner = request.env.user.partner_id\n        SaleOrder = request.env['sale.order']\n\n        domain = [\n            ('message_partner_ids', 'child_of', [partner.commercial_partner_id.id]),\n            ('state', 'in', ['sent', 'cancel'])\n        ]\n\n        searchbar_sortings = {\n            'date': {'label': _('Order Date'), 'order': 'date_order desc'},\n            'name': {'label': _('Reference'), 'order': 'name'},\n            'stage': {'label': _('Stage'), 'order': 'state'},\n        }\n\n        # default sortby order\n        if not sortby:\n            sortby = 'date'\n        sort_order = searchbar_sortings[sortby]['order']\n\n        archive_groups = self._get_archive_groups('sale.order', domain)\n        if date_begin and date_end:\n            domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n\n        # count for pager\n        quotation_count = SaleOrder.search_count(domain)\n        # make pager\n        pager = portal_pager(\n            url=\"/my/quotes\",\n            url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby},\n            total=quotation_count,\n            page=page,\n            step=self._items_per_page\n        )\n        # search the count to display, according to the pager data\n        quotations = SaleOrder.search(domain, order=sort_order, limit=self._items_per_page, offset=pager['offset'])\n        request.session['my_quotes_history'] = quotations.ids[:100]\n\n        values.update({\n            'date': date_begin,\n            'quotations': quotations.sudo(),\n            'page_name': 'quote',\n            'pager': pager,\n            'archive_groups': archive_groups,\n            'default_url': '/my/quotes',\n            'searchbar_sortings': searchbar_sortings,\n            'sortby': sortby,\n        })\n        return request.render(\"sale.portal_my_quotations\", values)\n\n    @http.route(['/my/orders', '/my/orders/page/<int:page>'], type='http', auth=\"user\", website=True)\n    def portal_my_orders(self, page=1, date_begin=None, date_end=None, sortby=None, **kw):\n        values = self._prepare_portal_layout_values()\n        partner = request.env.user.partner_id\n        SaleOrder = request.env['sale.order']\n\n        domain = [\n            ('message_partner_ids', 'child_of', [partner.commercial_partner_id.id]),\n            ('state', 'in', ['sale', 'done'])\n        ]\n\n        searchbar_sortings = {\n            'date': {'label': _('Order Date'), 'order': 'date_order desc'},\n            'name': {'label': _('Reference'), 'order': 'name'},\n            'stage': {'label': _('Stage'), 'order': 'state'},\n        }\n        # default sortby order\n        if not sortby:\n            sortby = 'date'\n        sort_order = searchbar_sortings[sortby]['order']\n\n        archive_groups = self._get_archive_groups('sale.order', domain)\n        if date_begin and date_end:\n            domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n\n        # count for pager\n        order_count = SaleOrder.search_count(domain)\n        # pager\n        pager = portal_pager(\n            url=\"/my/orders\",\n            url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby},\n            total=order_count,\n            page=page,\n            step=self._items_per_page\n        )\n        # content according to pager and archive selected\n        orders = SaleOrder.search(domain, order=sort_order, limit=self._items_per_page, offset=pager['offset'])\n        request.session['my_orders_history'] = orders.ids[:100]\n\n        values.update({\n            'date': date_begin,\n            'orders': orders.sudo(),\n            'page_name': 'order',\n            'pager': pager,\n            'archive_groups': archive_groups,\n            'default_url': '/my/orders',\n            'searchbar_sortings': searchbar_sortings,\n            'sortby': sortby,\n        })\n        return request.render(\"sale.portal_my_orders\", values)\n\n    @http.route(['/my/orders/<int:order>'], type='http', auth=\"public\", website=True)\n    def portal_order_page(self, order=None, access_token=None, **kw):\n        try:\n            order_sudo = self._order_check_access(order, access_token=access_token)\n        except AccessError:\n            return request.redirect('/my')\n\n        values = self._order_get_page_view_values(order_sudo, access_token, **kw)\n        return request.render(\"sale.portal_order_page\", values)\n\n    @http.route(['/my/orders/pdf/<int:order_id>'], type='http', auth=\"public\", website=True)\n    def portal_order_report(self, order_id, access_token=None, **kw):\n        try:\n            order_sudo = self._order_check_access(order_id, access_token)\n        except AccessError:\n            return request.redirect('/my')\n\n        # print report as sudo, since it require access to taxes, payment term, ... and portal\n        # does not have those access rights.\n        pdf = request.env.ref('sale.action_report_saleorder').sudo().render_qweb_pdf([order_sudo.id])[0]\n        pdfhttpheaders = [\n            ('Content-Type', 'application/pdf'),\n            ('Content-Length', len(pdf)),\n        ]\n        return request.make_response(pdf, headers=pdfhttpheaders)\n\n    def _portal_quote_user_can_accept(self, order_id):\n        return request.env['ir.config_parameter'].sudo().get_param('sale.sale_portal_confirmation_options', default='none') in ('pay', 'sign')\n\n    @http.route(['/my/quotes/accept'], type='json', auth=\"public\", website=True)\n    def portal_quote_accept(self, res_id, access_token=None, partner_name=None, signature=None):\n        if not self._portal_quote_user_can_accept(res_id):\n            return {'error': _('Operation not allowed')}\n        if not signature:\n            return {'error': _('Signature is missing.')}\n\n        try:\n            order_sudo = self._order_check_access(res_id, access_token=access_token)\n        except AccessError:\n            return {'error': _('Invalid order')}\n        if order_sudo.state != 'sent':\n            return {'error': _('Order is not in a state requiring customer validation.')}\n\n        order_sudo.action_confirm()\n\n        _message_post_helper(\n            res_model='sale.order',\n            res_id=order_sudo.id,\n            message=_('Order signed by %s') % (partner_name,),\n            attachments=[('signature.png', base64.b64decode(signature))] if signature else [],\n            **({'token': access_token} if access_token else {}))\n        return {\n            'success': _('Your Order has been confirmed.'),\n            'redirect_url': '/my/orders/%s?%s' % (order_sudo.id, access_token and 'access_token=%s' % order_sudo.access_token or ''),\n        }\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "portal.py", "id": "2c4383bd2b483468ee00ed5df0b73fb5", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/sale/controllers/portal.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}