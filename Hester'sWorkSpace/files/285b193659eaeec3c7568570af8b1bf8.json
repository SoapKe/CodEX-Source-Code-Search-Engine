{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import unescapeHTML\n\n\nclass VODPlatformIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vod-platform\\.net/[eE]mbed/(?P<id>[^/?\n    _TEST = {\n        \n        'url': 'http://vod-platform.net/embed/RufMcytHDolTH1MuKHY9Fw',\n        'md5': '1db2b7249ce383d6be96499006e951fc',\n        'info_dict': {\n            'id': 'RufMcytHDolTH1MuKHY9Fw',\n            'ext': 'mp4',\n            'title': 'LBCi News_ \u0627\u0644\u0646\u0635\u0631\u0629 \u0641\u064a \u0636\u064a\u0627\u0641\u0629 \u0627\u0644\u0640 \"\u0633\u064a.\u0623\u0646.\u0623\u0646\"',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = unescapeHTML(self._og_search_title(webpage))\n        hidden_inputs = self._hidden_inputs(webpage)\n\n        formats = self._extract_wowza_formats(\n            hidden_inputs.get('HiddenmyhHlsLink') or hidden_inputs['HiddenmyDashLink'], video_id, skip_protocols=['f4m', 'smil'])\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': hidden_inputs.get('HiddenThumbnail') or self._og_search_thumbnail(webpage),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#]+)'\n# from http://www.lbcgroup.tv/watch/chapter/29143/52844/%D8%A7%D9%84%D9%86%D8%B5%D8%B1%D8%A9-%D9%81%D9%8A-%D8%B6%D9%8A%D8%A7%D9%81%D8%A9-%D8%A7%D9%84%D9%80-cnn/ar\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import unescapeHTML\n\n\nclass VODPlatformIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vod-platform\\.net/[eE]mbed/(?P<id>[^/?#]+)'\n    _TEST = {\n        # from http://www.lbcgroup.tv/watch/chapter/29143/52844/%D8%A7%D9%84%D9%86%D8%B5%D8%B1%D8%A9-%D9%81%D9%8A-%D8%B6%D9%8A%D8%A7%D9%81%D8%A9-%D8%A7%D9%84%D9%80-cnn/ar\n        'url': 'http://vod-platform.net/embed/RufMcytHDolTH1MuKHY9Fw',\n        'md5': '1db2b7249ce383d6be96499006e951fc',\n        'info_dict': {\n            'id': 'RufMcytHDolTH1MuKHY9Fw',\n            'ext': 'mp4',\n            'title': 'LBCi News_ \u0627\u0644\u0646\u0635\u0631\u0629 \u0641\u064a \u0636\u064a\u0627\u0641\u0629 \u0627\u0644\u0640 \"\u0633\u064a.\u0623\u0646.\u0623\u0646\"',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = unescapeHTML(self._og_search_title(webpage))\n        hidden_inputs = self._hidden_inputs(webpage)\n\n        formats = self._extract_wowza_formats(\n            hidden_inputs.get('HiddenmyhHlsLink') or hidden_inputs['HiddenmyDashLink'], video_id, skip_protocols=['f4m', 'smil'])\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': hidden_inputs.get('HiddenThumbnail') or self._og_search_thumbnail(webpage),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vodplatform.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vodplatform.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}