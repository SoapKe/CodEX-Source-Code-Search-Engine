{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo.addons.hr_expense.tests.common import CommonTest\n\n\nclass TestReInvoice(CommonTest):\n\n    @classmethod\n    def setUpClass(cls):\n        super(TestReInvoice, cls).setUpClass()\n\n        cls.partner_customer = cls.env['res.partner'].create({\n            'name': 'Ze Client',\n            'email': 'client@agrolait.com',\n            'property_account_payable_id': cls.account_payable.id,\n        })\n\n        cls.sale_order = cls.env['sale.order'].with_context(mail_notrack=True, mail_create_nolog=True).create({\n            'partner_id': cls.partner_customer.id,\n            'partner_invoice_id': cls.partner_customer.id,\n            'partner_shipping_id': cls.partner_customer.id,\n        })\n\n    def test_at_cost(self):\n        \"\"\" Test invoicing expenses at cost for product based on delivered and ordered quantities. \"\"\"\n        # create SO line and confirm SO (with only one line)\n        sale_order_line = self.env['sale.order.line'].create({\n            'name': self.product_ordered_cost.name,\n            'product_id': self.product_ordered_cost.id,\n            'product_uom_qty': 2,\n            'product_uom': self.product_ordered_cost.uom_id.id,\n            'price_unit': self.product_ordered_cost.list_price,\n            'order_id': self.sale_order.id,\n        })\n        sale_order_line.product_id_change()\n        self.sale_order.onchange_partner_id()\n        self.sale_order._compute_tax_id()\n        self.sale_order.action_confirm()\n\n        self.assertTrue(self.sale_order.analytic_account_id, \"Confirming SO with an expense product should trigger the analytic account creation\")\n\n        \n        expense1 = self.env['hr.expense'].create({\n            'name': 'Expense for ordered product',\n            'employee_id': self.employee.id,\n            'product_id': self.product_ordered_cost.id,\n            'unit_amount': 12,\n            'quantity': 2,\n            'sheet_id': self.expense_sheet.id,\n            'sale_order_id': self.sale_order.id,\n            'analytic_account_id': self.sale_order.analytic_account_id.id,\n        })\n        expense1._onchange_product_id()\n        expense2 = self.env['hr.expense'].create({\n            'name': 'Expense for delivered product',\n            'employee_id': self.employee.id,\n            'product_id': self.product_deliver_cost.id,\n            'unit_amount': 15,\n            'quantity': 1,\n            'sheet_id': self.expense_sheet.id,\n            'sale_order_id': self.sale_order.id,\n            'analytic_account_id': self.sale_order.analytic_account_id.id,\n        })\n        expense2._onchange_product_id()\n\n        \n        self.expense_sheet.approve_expense_sheets()\n        self.expense_sheet.action_sheet_move_create()\n\n        self.assertEquals(len(self.sale_order.order_line), 3, \"There should be 3 lines on the SO\")\n        self.assertEquals(sale_order_line.qty_delivered, 0, \"Exising SO line should not be impacted by reinvoicing product at cost\")\n\n        sol_ordered = self.sale_order.order_line.filtered(lambda sol: sol.product_id == self.product_ordered_cost and sol != sale_order_line)\n        self.assertTrue(sol_ordered, \"A new line with ordered expense should have been created on expense report posting\")\n        self.assertEquals(sol_ordered.price_unit, expense1.unit_amount, \"The unit price of new SO line should be the one from the expense (at cost)\")\n        self.assertEquals(sol_ordered.product_uom_qty, 0, \"The ordered quantity of new SO line should be zero\")\n        self.assertEquals(sol_ordered.qty_delivered, expense1.quantity, \"The delivered quantity of new SO line should be the one from the expense\")\n\n        sol_deliver = self.sale_order.order_line.filtered(lambda sol: sol.product_id == self.product_deliver_cost and sol != sale_order_line)\n        self.assertTrue(sol_deliver, \"A new line with delivered expense should have been created on expense report posting\")\n        self.assertEquals(sol_deliver.price_unit, expense2.unit_amount, \"The unit price of new SO line should be the one from the expense (at cost)\")\n        self.assertEquals(sol_deliver.product_uom_qty, 0, \"The ordered quantity of new SO line should be zero\")\n        self.assertEquals(sol_deliver.qty_delivered, expense2.quantity, \"The delivered quantity of new SO line should be the one from the expense\")\n\n    def test_sales_price_ordered(self):\n        \"\"\" Test invoicing expenses at sales price for product based on ordered quantities. \"\"\"\n         (with no line)\n        self.sale_order._compute_tax_id()\n        self.sale_order.action_confirm()\n        self.assertFalse(self.sale_order.analytic_account_id, \"Confirming SO with no expense product should not trigger the analytic account creation\")\n\n        \n        expense1 = self.env['hr.expense'].create({\n            'name': 'Expense for ordered product at sales price',\n            'employee_id': self.employee.id,\n            'product_id': self.product_order_sales_price.id,\n            'unit_amount': 15,\n            'quantity': 2,\n            'sheet_id': self.expense_sheet.id,\n            'sale_order_id': self.sale_order.id,\n            'analytic_account_id': self.sale_order.analytic_account_id.id,\n        })\n        expense1._onchange_product_id()\n\n        \n        self.expense_sheet.approve_expense_sheets()\n        self.expense_sheet.action_sheet_move_create()\n\n        self.assertTrue(self.sale_order.analytic_account_id, \"Posting expense with an expense product should trigger the analytic account creation on SO\")\n        self.assertEquals(self.sale_order.analytic_account_id, expense1.analytic_account_id, \"SO analytic account should be the same for the expense\")\n        self.assertEquals(len(self.sale_order.order_line), 1, \"A new So line should have been created on expense report posting\")\n\n        sol_ordered = self.sale_order.order_line.filtered(lambda sol: sol.product_id == expense1.product_id)\n        self.assertTrue(sol_ordered, \"A new line with ordered expense should have been created on expense report posting\")\n        self.assertEquals(sol_ordered.price_unit, 10, \"The unit price of new SO line should be the one from the expense (at sales price)\")\n        self.assertEquals(sol_ordered.product_uom_qty, 0, \"The ordered quantity of new SO line should be zero\")\n        self.assertEquals(sol_ordered.qty_delivered, expense1.quantity, \"The delivered quantity of new SO line should be the one from the expense\")\n\n    def test_sales_price_delivered(self):\n        \"\"\" Test invoicing expenses at sales price for product based on delivered quantities. Check the existing SO line is incremented. \"\"\"\n        # create SO line and confirm SO (with only one line)\n        sale_order_line = self.env['sale.order.line'].create({\n            'name': self.product_deliver_sales_price.name,\n            'product_id': self.product_deliver_sales_price.id,\n            'product_uom_qty': 2,\n            'product_uom': self.product_deliver_sales_price.uom_id.id,\n            'price_unit': self.product_deliver_sales_price.list_price,\n            'order_id': self.sale_order.id,\n        })\n        sale_order_line.product_id_change()\n        self.sale_order._compute_tax_id()\n        self.sale_order.action_confirm()\n\n        self.assertTrue(self.sale_order.analytic_account_id, \"Confirming SO with an expense product should trigger the analytic account creation\")\n\n        \n        expense1 = self.env['hr.expense'].create({\n            'name': 'Expense for delivered product at sales price',\n            'employee_id': self.employee.id,\n            'product_id': self.product_deliver_sales_price.id,\n            'unit_amount': 15,\n            'quantity': 3,\n            'sheet_id': self.expense_sheet.id,\n            'sale_order_id': self.sale_order.id,\n            'analytic_account_id': self.sale_order.analytic_account_id.id,\n        })\n        expense1._onchange_product_id()\n\n        \n        self.expense_sheet.approve_expense_sheets()\n        self.expense_sheet.action_sheet_move_create()\n\n        self.assertEquals(len(self.sale_order.order_line), 1, \"No SO line should have been created (or removed) on expense report posting\")\n\n        self.assertEquals(sale_order_line.price_unit, 10, \"The unit price of SO line should be the same\")\n        self.assertEquals(sale_order_line.product_uom_qty, 2, \"The ordered quantity of new SO line should be zero\")\n        self.assertEquals(sale_order_line.qty_delivered, expense1.quantity, \"The delivered quantity of SO line should have been incremented\")\n\n    def test_no_expense(self):\n        \"\"\" Test invoicing expenses with no policy. Check nothing happen. \"\"\"\n        \n        sale_order_line = self.env['sale.order.line'].create({\n            'name': self.product_no_expense.name,\n            'product_id': self.product_no_expense.id,\n            'product_uom_qty': 2,\n            'product_uom': self.product_no_expense.uom_id.id,\n            'price_unit': self.product_no_expense.list_price,\n            'order_id': self.sale_order.id,\n        })\n        self.sale_order._compute_tax_id()\n        self.sale_order.action_confirm()\n\n        self.assertFalse(self.sale_order.analytic_account_id, \"Confirming SO with an no-expense product should not trigger the analytic account creation\")\n\n        \n        expense1 = self.env['hr.expense'].create({\n            'name': 'Expense for no expense product',\n            'employee_id': self.employee.id,\n            'product_id': self.product_no_expense.id,\n            'unit_amount': 15,\n            'quantity': 3,\n            'sheet_id': self.expense_sheet.id,\n            'sale_order_id': self.sale_order.id,\n            'analytic_account_id': self.sale_order.analytic_account_id.id,\n        })\n        expense1._onchange_product_id()\n\n        \n        self.expense_sheet.approve_expense_sheets()\n        self.expense_sheet.action_sheet_move_create()\n\n        self.assertTrue(self.sale_order.analytic_account_id, \"Posting expense with an expense product (even with no expense pilocy) should trigger the analytic account creation\")\n        self.assertEquals(self.sale_order.analytic_account_id, expense1.analytic_account_id, \"SO analytic account should be the same for the expense\")\n        self.assertEquals(len(self.sale_order.order_line), 1, \"No SO line should have been created (or removed) on expense report posting\")\n\n        self.assertEquals(sale_order_line.price_unit, self.product_no_expense.list_price, \"The unit price of SO line should be the same\")\n        self.assertEquals(sale_order_line.product_uom_qty, 2, \"The ordered quantity of SO line should be two\")\n        self.assertEquals(sale_order_line.qty_delivered, 0, \"The delivered quantity of SO line should have been incremented\")\n", "comments": "    test invoicing expenses cost product based delivered ordered quantities                create so line confirm so (with one line)         sale order line   self env  sale order line   create(               name   self product ordered cost name               product id   self product ordered cost id               product uom qty   2               product uom   self product ordered cost uom id id               price unit   self product ordered cost list price               order id   self sale order id           )         sale order line product id change()         self sale order onchange partner id()         self sale order  compute tax id()         self sale order action confirm()          self asserttrue(self sale order analytic account id   confirming so expense product trigger analytic account creation )            create expense lines         expense1   self env  hr expense   create(               name    expense ordered product                employee id   self employee id               product id   self product ordered cost id               unit amount   12               quantity   2               sheet id   self expense sheet id               sale order id   self sale order id               analytic account id   self sale order analytic account id id           )         expense1  onchange product id()         expense2   self env  hr expense   create(               name    expense delivered product                employee id   self employee id               product id   self product deliver cost id               unit amount   15               quantity   1               sheet id   self expense sheet id               sale order id   self sale order id               analytic account id   self sale order analytic account id id           )         expense2  onchange product id()            approve generate entries         self expense sheet approve expense sheets()         self expense sheet action sheet move create()          self assertequals(len(self sale order order line)  3   there 3 lines so )         self assertequals(sale order line qty delivered  0   exising so line impacted reinvoicing product cost )          sol ordered   self sale order order line filtered(lambda sol  sol product id    self product ordered cost sol    sale order line)         self asserttrue(sol ordered   a new line ordered expense created expense report posting )         self assertequals(sol ordered price unit  expense1 unit amount   the unit price new so line one expense (at cost) )         self assertequals(sol ordered product uom qty  0   the ordered quantity new so line zero )         self assertequals(sol ordered qty delivered  expense1 quantity   the delivered quantity new so line one expense )          sol deliver   self sale order order line filtered(lambda sol  sol product id    self product deliver cost sol    sale order line)         self asserttrue(sol deliver   a new line delivered expense created expense report posting )         self assertequals(sol deliver price unit  expense2 unit amount   the unit price new so line one expense (at cost) )         self assertequals(sol deliver product uom qty  0   the ordered quantity new so line zero )         self assertequals(sol deliver qty delivered  expense2 quantity   the delivered quantity new so line one expense )      def test sales price ordered(self)              test invoicing expenses sales price product based ordered quantities                confirm so (with line)         self sale order  compute tax id()         self sale order action confirm()         self assertfalse(self sale order analytic account id   confirming so expense product trigger analytic account creation )            create expense lines         expense1   self env  hr expense   create(               name    expense ordered product sales price                employee id   self employee id               product id   self product order sales price id               unit amount   15               quantity   2               sheet id   self expense sheet id               sale order id   self sale order id               analytic account id   self sale order analytic account id id           )         expense1  onchange product id()            approve generate entries         self expense sheet approve expense sheets()         self expense sheet action sheet move create()          self asserttrue(self sale order analytic account id   posting expense expense product trigger analytic account creation so )         self assertequals(self sale order analytic account id  expense1 analytic account id   so analytic account expense )         self assertequals(len(self sale order order line)  1   a new so line created expense report posting )          sol ordered   self sale order order line filtered(lambda sol  sol product id    expense1 product id)         self asserttrue(sol ordered   a new line ordered expense created expense report posting )         self assertequals(sol ordered price unit  10   the unit price new so line one expense (at sales price) )         self assertequals(sol ordered product uom qty  0   the ordered quantity new so line zero )         self assertequals(sol ordered qty delivered  expense1 quantity   the delivered quantity new so line one expense )      def test sales price delivered(self)              test invoicing expenses sales price product based delivered quantities  check existing so line incremented                create so line confirm so (with one line)         sale order line   self env  sale order line   create(               name   self product deliver sales price name               product id   self product deliver sales price id               product uom qty   2               product uom   self product deliver sales price uom id id               price unit   self product deliver sales price list price               order id   self sale order id           )         sale order line product id change()         self sale order  compute tax id()         self sale order action confirm()          self asserttrue(self sale order analytic account id   confirming so expense product trigger analytic account creation )            create expense lines         expense1   self env  hr expense   create(               name    expense delivered product sales price                employee id   self employee id               product id   self product deliver sales price id               unit amount   15               quantity   3               sheet id   self expense sheet id               sale order id   self sale order id               analytic account id   self sale order analytic account id id           )         expense1  onchange product id()            approve generate entries         self expense sheet approve expense sheets()         self expense sheet action sheet move create()          self assertequals(len(self sale order order line)  1   no so line created (or removed) expense report posting )          self assertequals(sale order line price unit  10   the unit price so line )         self assertequals(sale order line product uom qty  2   the ordered quantity new so line zero )         self assertequals(sale order line qty delivered  expense1 quantity   the delivered quantity so line incremented )      def test expense(self)              test invoicing expenses policy  check nothing happen             coding  utf 8        part odoo  see license file full copyright licensing details     create so line confirm so (with one line)    create expense lines    approve generate entries    confirm so (with line)    create expense lines    approve generate entries    create so line confirm so (with one line)    create expense lines    approve generate entries    confirm so    create expense lines    approve generate entries ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.addons.hr_expense.tests.common import CommonTest\n\n\nclass TestReInvoice(CommonTest):\n\n    @classmethod\n    def setUpClass(cls):\n        super(TestReInvoice, cls).setUpClass()\n\n        cls.partner_customer = cls.env['res.partner'].create({\n            'name': 'Ze Client',\n            'email': 'client@agrolait.com',\n            'property_account_payable_id': cls.account_payable.id,\n        })\n\n        cls.sale_order = cls.env['sale.order'].with_context(mail_notrack=True, mail_create_nolog=True).create({\n            'partner_id': cls.partner_customer.id,\n            'partner_invoice_id': cls.partner_customer.id,\n            'partner_shipping_id': cls.partner_customer.id,\n        })\n\n    def test_at_cost(self):\n        \"\"\" Test invoicing expenses at cost for product based on delivered and ordered quantities. \"\"\"\n        # create SO line and confirm SO (with only one line)\n        sale_order_line = self.env['sale.order.line'].create({\n            'name': self.product_ordered_cost.name,\n            'product_id': self.product_ordered_cost.id,\n            'product_uom_qty': 2,\n            'product_uom': self.product_ordered_cost.uom_id.id,\n            'price_unit': self.product_ordered_cost.list_price,\n            'order_id': self.sale_order.id,\n        })\n        sale_order_line.product_id_change()\n        self.sale_order.onchange_partner_id()\n        self.sale_order._compute_tax_id()\n        self.sale_order.action_confirm()\n\n        self.assertTrue(self.sale_order.analytic_account_id, \"Confirming SO with an expense product should trigger the analytic account creation\")\n\n        # create expense lines\n        expense1 = self.env['hr.expense'].create({\n            'name': 'Expense for ordered product',\n            'employee_id': self.employee.id,\n            'product_id': self.product_ordered_cost.id,\n            'unit_amount': 12,\n            'quantity': 2,\n            'sheet_id': self.expense_sheet.id,\n            'sale_order_id': self.sale_order.id,\n            'analytic_account_id': self.sale_order.analytic_account_id.id,\n        })\n        expense1._onchange_product_id()\n        expense2 = self.env['hr.expense'].create({\n            'name': 'Expense for delivered product',\n            'employee_id': self.employee.id,\n            'product_id': self.product_deliver_cost.id,\n            'unit_amount': 15,\n            'quantity': 1,\n            'sheet_id': self.expense_sheet.id,\n            'sale_order_id': self.sale_order.id,\n            'analytic_account_id': self.sale_order.analytic_account_id.id,\n        })\n        expense2._onchange_product_id()\n\n        # approve and generate entries\n        self.expense_sheet.approve_expense_sheets()\n        self.expense_sheet.action_sheet_move_create()\n\n        self.assertEquals(len(self.sale_order.order_line), 3, \"There should be 3 lines on the SO\")\n        self.assertEquals(sale_order_line.qty_delivered, 0, \"Exising SO line should not be impacted by reinvoicing product at cost\")\n\n        sol_ordered = self.sale_order.order_line.filtered(lambda sol: sol.product_id == self.product_ordered_cost and sol != sale_order_line)\n        self.assertTrue(sol_ordered, \"A new line with ordered expense should have been created on expense report posting\")\n        self.assertEquals(sol_ordered.price_unit, expense1.unit_amount, \"The unit price of new SO line should be the one from the expense (at cost)\")\n        self.assertEquals(sol_ordered.product_uom_qty, 0, \"The ordered quantity of new SO line should be zero\")\n        self.assertEquals(sol_ordered.qty_delivered, expense1.quantity, \"The delivered quantity of new SO line should be the one from the expense\")\n\n        sol_deliver = self.sale_order.order_line.filtered(lambda sol: sol.product_id == self.product_deliver_cost and sol != sale_order_line)\n        self.assertTrue(sol_deliver, \"A new line with delivered expense should have been created on expense report posting\")\n        self.assertEquals(sol_deliver.price_unit, expense2.unit_amount, \"The unit price of new SO line should be the one from the expense (at cost)\")\n        self.assertEquals(sol_deliver.product_uom_qty, 0, \"The ordered quantity of new SO line should be zero\")\n        self.assertEquals(sol_deliver.qty_delivered, expense2.quantity, \"The delivered quantity of new SO line should be the one from the expense\")\n\n    def test_sales_price_ordered(self):\n        \"\"\" Test invoicing expenses at sales price for product based on ordered quantities. \"\"\"\n        # confirm SO (with no line)\n        self.sale_order._compute_tax_id()\n        self.sale_order.action_confirm()\n        self.assertFalse(self.sale_order.analytic_account_id, \"Confirming SO with no expense product should not trigger the analytic account creation\")\n\n        # create expense lines\n        expense1 = self.env['hr.expense'].create({\n            'name': 'Expense for ordered product at sales price',\n            'employee_id': self.employee.id,\n            'product_id': self.product_order_sales_price.id,\n            'unit_amount': 15,\n            'quantity': 2,\n            'sheet_id': self.expense_sheet.id,\n            'sale_order_id': self.sale_order.id,\n            'analytic_account_id': self.sale_order.analytic_account_id.id,\n        })\n        expense1._onchange_product_id()\n\n        # approve and generate entries\n        self.expense_sheet.approve_expense_sheets()\n        self.expense_sheet.action_sheet_move_create()\n\n        self.assertTrue(self.sale_order.analytic_account_id, \"Posting expense with an expense product should trigger the analytic account creation on SO\")\n        self.assertEquals(self.sale_order.analytic_account_id, expense1.analytic_account_id, \"SO analytic account should be the same for the expense\")\n        self.assertEquals(len(self.sale_order.order_line), 1, \"A new So line should have been created on expense report posting\")\n\n        sol_ordered = self.sale_order.order_line.filtered(lambda sol: sol.product_id == expense1.product_id)\n        self.assertTrue(sol_ordered, \"A new line with ordered expense should have been created on expense report posting\")\n        self.assertEquals(sol_ordered.price_unit, 10, \"The unit price of new SO line should be the one from the expense (at sales price)\")\n        self.assertEquals(sol_ordered.product_uom_qty, 0, \"The ordered quantity of new SO line should be zero\")\n        self.assertEquals(sol_ordered.qty_delivered, expense1.quantity, \"The delivered quantity of new SO line should be the one from the expense\")\n\n    def test_sales_price_delivered(self):\n        \"\"\" Test invoicing expenses at sales price for product based on delivered quantities. Check the existing SO line is incremented. \"\"\"\n        # create SO line and confirm SO (with only one line)\n        sale_order_line = self.env['sale.order.line'].create({\n            'name': self.product_deliver_sales_price.name,\n            'product_id': self.product_deliver_sales_price.id,\n            'product_uom_qty': 2,\n            'product_uom': self.product_deliver_sales_price.uom_id.id,\n            'price_unit': self.product_deliver_sales_price.list_price,\n            'order_id': self.sale_order.id,\n        })\n        sale_order_line.product_id_change()\n        self.sale_order._compute_tax_id()\n        self.sale_order.action_confirm()\n\n        self.assertTrue(self.sale_order.analytic_account_id, \"Confirming SO with an expense product should trigger the analytic account creation\")\n\n        # create expense lines\n        expense1 = self.env['hr.expense'].create({\n            'name': 'Expense for delivered product at sales price',\n            'employee_id': self.employee.id,\n            'product_id': self.product_deliver_sales_price.id,\n            'unit_amount': 15,\n            'quantity': 3,\n            'sheet_id': self.expense_sheet.id,\n            'sale_order_id': self.sale_order.id,\n            'analytic_account_id': self.sale_order.analytic_account_id.id,\n        })\n        expense1._onchange_product_id()\n\n        # approve and generate entries\n        self.expense_sheet.approve_expense_sheets()\n        self.expense_sheet.action_sheet_move_create()\n\n        self.assertEquals(len(self.sale_order.order_line), 1, \"No SO line should have been created (or removed) on expense report posting\")\n\n        self.assertEquals(sale_order_line.price_unit, 10, \"The unit price of SO line should be the same\")\n        self.assertEquals(sale_order_line.product_uom_qty, 2, \"The ordered quantity of new SO line should be zero\")\n        self.assertEquals(sale_order_line.qty_delivered, expense1.quantity, \"The delivered quantity of SO line should have been incremented\")\n\n    def test_no_expense(self):\n        \"\"\" Test invoicing expenses with no policy. Check nothing happen. \"\"\"\n        # confirm SO\n        sale_order_line = self.env['sale.order.line'].create({\n            'name': self.product_no_expense.name,\n            'product_id': self.product_no_expense.id,\n            'product_uom_qty': 2,\n            'product_uom': self.product_no_expense.uom_id.id,\n            'price_unit': self.product_no_expense.list_price,\n            'order_id': self.sale_order.id,\n        })\n        self.sale_order._compute_tax_id()\n        self.sale_order.action_confirm()\n\n        self.assertFalse(self.sale_order.analytic_account_id, \"Confirming SO with an no-expense product should not trigger the analytic account creation\")\n\n        # create expense lines\n        expense1 = self.env['hr.expense'].create({\n            'name': 'Expense for no expense product',\n            'employee_id': self.employee.id,\n            'product_id': self.product_no_expense.id,\n            'unit_amount': 15,\n            'quantity': 3,\n            'sheet_id': self.expense_sheet.id,\n            'sale_order_id': self.sale_order.id,\n            'analytic_account_id': self.sale_order.analytic_account_id.id,\n        })\n        expense1._onchange_product_id()\n\n        # approve and generate entries\n        self.expense_sheet.approve_expense_sheets()\n        self.expense_sheet.action_sheet_move_create()\n\n        self.assertTrue(self.sale_order.analytic_account_id, \"Posting expense with an expense product (even with no expense pilocy) should trigger the analytic account creation\")\n        self.assertEquals(self.sale_order.analytic_account_id, expense1.analytic_account_id, \"SO analytic account should be the same for the expense\")\n        self.assertEquals(len(self.sale_order.order_line), 1, \"No SO line should have been created (or removed) on expense report posting\")\n\n        self.assertEquals(sale_order_line.price_unit, self.product_no_expense.list_price, \"The unit price of SO line should be the same\")\n        self.assertEquals(sale_order_line.product_uom_qty, 2, \"The ordered quantity of SO line should be two\")\n        self.assertEquals(sale_order_line.qty_delivered, 0, \"The delivered quantity of SO line should have been incremented\")\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_reinvoice.py", "id": "f539a5369a333f721c1bb5f95c040043", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/sale_expense/tests/test_reinvoice.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}