{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    try_get,\n)\n\nCDN_API_BASE = 'https://cdn.younow.com/php/api'\nMOMENT_URL_FORMAT = '%s/moment/fetch/id=%%s' % CDN_API_BASE\n\n\nclass YouNowLiveIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?younow\\.com/(?P<id>[^/?\n    _TEST = {\n        'url': 'https://www.younow.com/AmandaPadeezy',\n        'info_dict': {\n            'id': 'AmandaPadeezy',\n            'ext': 'mp4',\n            'is_live': True,\n            'title': 'March 26, 2017',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'tags': ['girls'],\n            'categories': ['girls'],\n            'uploader': 'AmandaPadeezy',\n            'uploader_id': '6716501',\n            'uploader_url': 'https://www.younow.com/AmandaPadeezy',\n            'creator': 'AmandaPadeezy',\n        },\n        'skip': True,\n    }\n\n    @classmethod\n    def suitable(cls, url):\n        return (False\n                if YouNowChannelIE.suitable(url) or YouNowMomentIE.suitable(url)\n                else super(YouNowLiveIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        username = self._match_id(url)\n\n        data = self._download_json(\n            'https://api.younow.com/php/api/broadcast/info/curId=0/user=%s'\n            % username, username)\n\n        if data.get('errorCode') != 0:\n            raise ExtractorError(data['errorMsg'], expected=True)\n\n        uploader = try_get(\n            data, lambda x: x['user']['profileUrlString'],\n            compat_str) or username\n\n        return {\n            'id': uploader,\n            'is_live': True,\n            'title': self._live_title(uploader),\n            'thumbnail': data.get('awsUrl'),\n            'tags': data.get('tags'),\n            'categories': data.get('tags'),\n            'uploader': uploader,\n            'uploader_id': data.get('userId'),\n            'uploader_url': 'https://www.younow.com/%s' % username,\n            'creator': uploader,\n            'view_count': int_or_none(data.get('viewers')),\n            'like_count': int_or_none(data.get('likes')),\n            'formats': [{\n                'url': '%s/broadcast/videoPath/hls=1/broadcastId=%s/channelId=%s'\n                       % (CDN_API_BASE, data['broadcastId'], data['userId']),\n                'ext': 'mp4',\n                'protocol': 'm3u8',\n            }],\n        }\n\n\ndef _extract_moment(item, fatal=True):\n    moment_id = item.get('momentId')\n    if not moment_id:\n        if not fatal:\n            return\n        raise ExtractorError('Unable to extract moment id')\n\n    moment_id = compat_str(moment_id)\n\n    title = item.get('text')\n    if not title:\n        title = 'YouNow %s' % (\n            item.get('momentType') or item.get('titleType') or 'moment')\n\n    uploader = try_get(item, lambda x: x['owner']['name'], compat_str)\n    uploader_id = try_get(item, lambda x: x['owner']['userId'])\n    uploader_url = 'https://www.younow.com/%s' % uploader if uploader else None\n\n    entry = {\n        'extractor_key': 'YouNowMoment',\n        'id': moment_id,\n        'title': title,\n        'view_count': int_or_none(item.get('views')),\n        'like_count': int_or_none(item.get('likes')),\n        'timestamp': int_or_none(item.get('created')),\n        'creator': uploader,\n        'uploader': uploader,\n        'uploader_id': uploader_id,\n        'uploader_url': uploader_url,\n        'formats': [{\n            'url': 'https://hls.younow.com/momentsplaylists/live/%s/%s.m3u8'\n                   % (moment_id, moment_id),\n            'ext': 'mp4',\n            'protocol': 'm3u8_native',\n        }],\n    }\n\n    return entry\n\n\nclass YouNowChannelIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?younow\\.com/(?P<id>[^/]+)/channel'\n    _TEST = {\n        'url': 'https://www.younow.com/its_Kateee_/channel',\n        'info_dict': {\n            'id': '14629760',\n            'title': 'its_Kateee_ moments'\n        },\n        'playlist_mincount': 8,\n    }\n\n    def _entries(self, username, channel_id):\n        created_before = 0\n        for page_num in itertools.count(1):\n            if created_before is None:\n                break\n            info = self._download_json(\n                '%s/moment/profile/channelId=%s/createdBefore=%d/records=20'\n                % (CDN_API_BASE, channel_id, created_before), username,\n                note='Downloading moments page %d' % page_num)\n            items = info.get('items')\n            if not items or not isinstance(items, list):\n                break\n            for item in items:\n                if not isinstance(item, dict):\n                    continue\n                item_type = item.get('type')\n                if item_type == 'moment':\n                    entry = _extract_moment(item, fatal=False)\n                    if entry:\n                        yield entry\n                elif item_type == 'collection':\n                    moments = item.get('momentsIds')\n                    if isinstance(moments, list):\n                        for moment_id in moments:\n                            m = self._download_json(\n                                MOMENT_URL_FORMAT % moment_id, username,\n                                note='Downloading %s moment JSON' % moment_id,\n                                fatal=False)\n                            if m and isinstance(m, dict) and m.get('item'):\n                                entry = _extract_moment(m['item'])\n                                if entry:\n                                    yield entry\n                created_before = int_or_none(item.get('created'))\n\n    def _real_extract(self, url):\n        username = self._match_id(url)\n        channel_id = compat_str(self._download_json(\n            'https://api.younow.com/php/api/broadcast/info/curId=0/user=%s'\n            % username, username, note='Downloading user information')['userId'])\n        return self.playlist_result(\n            self._entries(username, channel_id), channel_id,\n            '%s moments' % username)\n\n\nclass YouNowMomentIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?younow\\.com/[^/]+/(?P<id>[^/?\n    _TEST = {\n        'url': 'https://www.younow.com/GABO.../20712117/36319236/3b316doc/m',\n        'md5': 'a30c70eadb9fb39a1aa3c8c0d22a0807',\n        'info_dict': {\n            'id': '20712117',\n            'ext': 'mp4',\n            'title': 'YouNow capture',\n            'view_count': int,\n            'like_count': int,\n            'timestamp': 1490432040,\n            'upload_date': '20170325',\n            'uploader': 'GABO...',\n            'uploader_id': 35917228,\n        },\n    }\n\n    @classmethod\n    def suitable(cls, url):\n        return (False\n                if YouNowChannelIE.suitable(url)\n                else super(YouNowMomentIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        item = self._download_json(MOMENT_URL_FORMAT % video_id, video_id)\n        return _extract_moment(item['item'])\n", "comments": "# coding: utf-8\n#&]+)'\n#&]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    try_get,\n)\n\nCDN_API_BASE = 'https://cdn.younow.com/php/api'\nMOMENT_URL_FORMAT = '%s/moment/fetch/id=%%s' % CDN_API_BASE\n\n\nclass YouNowLiveIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?younow\\.com/(?P<id>[^/?#&]+)'\n    _TEST = {\n        'url': 'https://www.younow.com/AmandaPadeezy',\n        'info_dict': {\n            'id': 'AmandaPadeezy',\n            'ext': 'mp4',\n            'is_live': True,\n            'title': 'March 26, 2017',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'tags': ['girls'],\n            'categories': ['girls'],\n            'uploader': 'AmandaPadeezy',\n            'uploader_id': '6716501',\n            'uploader_url': 'https://www.younow.com/AmandaPadeezy',\n            'creator': 'AmandaPadeezy',\n        },\n        'skip': True,\n    }\n\n    @classmethod\n    def suitable(cls, url):\n        return (False\n                if YouNowChannelIE.suitable(url) or YouNowMomentIE.suitable(url)\n                else super(YouNowLiveIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        username = self._match_id(url)\n\n        data = self._download_json(\n            'https://api.younow.com/php/api/broadcast/info/curId=0/user=%s'\n            % username, username)\n\n        if data.get('errorCode') != 0:\n            raise ExtractorError(data['errorMsg'], expected=True)\n\n        uploader = try_get(\n            data, lambda x: x['user']['profileUrlString'],\n            compat_str) or username\n\n        return {\n            'id': uploader,\n            'is_live': True,\n            'title': self._live_title(uploader),\n            'thumbnail': data.get('awsUrl'),\n            'tags': data.get('tags'),\n            'categories': data.get('tags'),\n            'uploader': uploader,\n            'uploader_id': data.get('userId'),\n            'uploader_url': 'https://www.younow.com/%s' % username,\n            'creator': uploader,\n            'view_count': int_or_none(data.get('viewers')),\n            'like_count': int_or_none(data.get('likes')),\n            'formats': [{\n                'url': '%s/broadcast/videoPath/hls=1/broadcastId=%s/channelId=%s'\n                       % (CDN_API_BASE, data['broadcastId'], data['userId']),\n                'ext': 'mp4',\n                'protocol': 'm3u8',\n            }],\n        }\n\n\ndef _extract_moment(item, fatal=True):\n    moment_id = item.get('momentId')\n    if not moment_id:\n        if not fatal:\n            return\n        raise ExtractorError('Unable to extract moment id')\n\n    moment_id = compat_str(moment_id)\n\n    title = item.get('text')\n    if not title:\n        title = 'YouNow %s' % (\n            item.get('momentType') or item.get('titleType') or 'moment')\n\n    uploader = try_get(item, lambda x: x['owner']['name'], compat_str)\n    uploader_id = try_get(item, lambda x: x['owner']['userId'])\n    uploader_url = 'https://www.younow.com/%s' % uploader if uploader else None\n\n    entry = {\n        'extractor_key': 'YouNowMoment',\n        'id': moment_id,\n        'title': title,\n        'view_count': int_or_none(item.get('views')),\n        'like_count': int_or_none(item.get('likes')),\n        'timestamp': int_or_none(item.get('created')),\n        'creator': uploader,\n        'uploader': uploader,\n        'uploader_id': uploader_id,\n        'uploader_url': uploader_url,\n        'formats': [{\n            'url': 'https://hls.younow.com/momentsplaylists/live/%s/%s.m3u8'\n                   % (moment_id, moment_id),\n            'ext': 'mp4',\n            'protocol': 'm3u8_native',\n        }],\n    }\n\n    return entry\n\n\nclass YouNowChannelIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?younow\\.com/(?P<id>[^/]+)/channel'\n    _TEST = {\n        'url': 'https://www.younow.com/its_Kateee_/channel',\n        'info_dict': {\n            'id': '14629760',\n            'title': 'its_Kateee_ moments'\n        },\n        'playlist_mincount': 8,\n    }\n\n    def _entries(self, username, channel_id):\n        created_before = 0\n        for page_num in itertools.count(1):\n            if created_before is None:\n                break\n            info = self._download_json(\n                '%s/moment/profile/channelId=%s/createdBefore=%d/records=20'\n                % (CDN_API_BASE, channel_id, created_before), username,\n                note='Downloading moments page %d' % page_num)\n            items = info.get('items')\n            if not items or not isinstance(items, list):\n                break\n            for item in items:\n                if not isinstance(item, dict):\n                    continue\n                item_type = item.get('type')\n                if item_type == 'moment':\n                    entry = _extract_moment(item, fatal=False)\n                    if entry:\n                        yield entry\n                elif item_type == 'collection':\n                    moments = item.get('momentsIds')\n                    if isinstance(moments, list):\n                        for moment_id in moments:\n                            m = self._download_json(\n                                MOMENT_URL_FORMAT % moment_id, username,\n                                note='Downloading %s moment JSON' % moment_id,\n                                fatal=False)\n                            if m and isinstance(m, dict) and m.get('item'):\n                                entry = _extract_moment(m['item'])\n                                if entry:\n                                    yield entry\n                created_before = int_or_none(item.get('created'))\n\n    def _real_extract(self, url):\n        username = self._match_id(url)\n        channel_id = compat_str(self._download_json(\n            'https://api.younow.com/php/api/broadcast/info/curId=0/user=%s'\n            % username, username, note='Downloading user information')['userId'])\n        return self.playlist_result(\n            self._entries(username, channel_id), channel_id,\n            '%s moments' % username)\n\n\nclass YouNowMomentIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?younow\\.com/[^/]+/(?P<id>[^/?#&]+)'\n    _TEST = {\n        'url': 'https://www.younow.com/GABO.../20712117/36319236/3b316doc/m',\n        'md5': 'a30c70eadb9fb39a1aa3c8c0d22a0807',\n        'info_dict': {\n            'id': '20712117',\n            'ext': 'mp4',\n            'title': 'YouNow capture',\n            'view_count': int,\n            'like_count': int,\n            'timestamp': 1490432040,\n            'upload_date': '20170325',\n            'uploader': 'GABO...',\n            'uploader_id': 35917228,\n        },\n    }\n\n    @classmethod\n    def suitable(cls, url):\n        return (False\n                if YouNowChannelIE.suitable(url)\n                else super(YouNowMomentIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        item = self._download_json(MOMENT_URL_FORMAT % video_id, video_id)\n        return _extract_moment(item['item'])\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "younow.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/younow.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}