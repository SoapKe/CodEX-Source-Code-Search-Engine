{"author": "jwilder", "code": "import re\nimport subprocess\n\nimport backoff\nimport docker\nimport pytest\n\ndocker_client = docker.from_env()\n\n\n\n\n Tests helpers\n\n\n\n@backoff.on_exception(backoff.constant, AssertionError, interval=2, max_tries=15, jitter=None)\ndef assert_log_contains(expected_log_line):\n    \"\"\"\n    Check that the nginx-proxy container log contains a given string.\n    The backoff decorator will retry the check 15 times with a 2 seconds delay.\n\n    :param expected_log_line: string to search for\n    :return: None\n    :raises: AssertError if the expected string is not found in the log\n    \"\"\"\n    sut_container = docker_client.containers.get(\"nginxproxy\")\n    docker_logs = sut_container.logs(stdout=True, stderr=True, stream=False, follow=False)\n    assert expected_log_line in docker_logs\n\n\ndef require_openssl(required_version):\n    \"\"\"\n    This function checks that the required version of OpenSSL is present, and skips the test if not.\n    Use it as a test function decorator:\n\n        @require_openssl(\"2.3.4\")\n        def test_something():\n            ...\n\n    :param required_version: minimal required version as a string: \"1.2.3\"\n    \"\"\"\n\n    def versiontuple(v):\n        clean_v = re.sub(\"[^\\d\\.]\", \"\", v)\n        return tuple(map(int, (clean_v.split(\".\"))))\n\n    try:\n        command_output = subprocess.check_output([\"openssl\", \"version\"])\n    except OSError:\n        return pytest.mark.skip(\"openssl command is not available in test environment\")\n    else:\n        if not command_output:\n            raise Exception(\"Could not get openssl version\")\n        openssl_version = command_output.split()[1]\n        return pytest.mark.skipif(\n            versiontuple(openssl_version) < versiontuple(required_version),\n            reason=\"openssl v%s is less than required version %s\" % (openssl_version, required_version))\n\n\n\n\n Tests\n\n\n\ndef test_dhparam_is_not_generated_if_present(docker_compose):\n    sut_container = docker_client.containers.get(\"nginxproxy\")\n    assert sut_container.status == \"running\"\n\n    assert_log_contains(\"Custom dhparam.pem file found, generation skipped\")\n\n     Make sure the dhparam in use is not the default, pre-generated one\n    default_checksum = sut_container.exec_run(\"md5sum /app/dhparam.pem.default\").split()\n    current_checksum = sut_container.exec_run(\"md5sum /etc/nginx/dhparam/dhparam.pem\").split()\n    assert default_checksum[0] != current_checksum[0]\n\n\ndef test_web5_https_works(docker_compose, nginxproxy):\n    r = nginxproxy.get(\"https://web5.nginx-proxy.tld/port\", allow_redirects=False)\n    assert r.status_code == 200\n    assert \"answer from port 85\\n\" in r.text\n\n\n@require_openssl(\"1.0.2\")\ndef test_web5_dhparam_is_used(docker_compose):\n    sut_container = docker_client.containers.get(\"nginxproxy\")\n    assert sut_container.status == \"running\"\n\n    host = \"%s:443\" % sut_container.attrs[\"NetworkSettings\"][\"IPAddress\"]\n    r = subprocess.check_output(\n        \"echo '' | openssl s_client -connect %s -cipher 'EDH' | grep 'Server Temp Key'\" % host, shell=True)\n    assert \"Server Temp Key: DH, 2048 bits\\n\" == r\n", "comments": "        check nginx proxy container log contains given string      the backoff decorator retry check 15 times 2 seconds delay        param expected log line  string search      return  none      raises  asserterror expected string found log             sut container   docker client containers get( nginxproxy )     docker logs   sut container logs(stdout true  stderr true  stream false  follow false)     assert expected log line docker logs   def require openssl(required version)              this function checks required version openssl present  skips test      use test function decorator            require openssl( 2 3 4 )         def test something()                        param required version  minimal required version string   1 2 3                                                                                                 tests helpers                                                                                                                                                                            tests                                                                                        make sure dhparam use default  pre generated one ", "content": "import re\nimport subprocess\n\nimport backoff\nimport docker\nimport pytest\n\ndocker_client = docker.from_env()\n\n\n###############################################################################\n#\n# Tests helpers\n#\n###############################################################################\n\n@backoff.on_exception(backoff.constant, AssertionError, interval=2, max_tries=15, jitter=None)\ndef assert_log_contains(expected_log_line):\n    \"\"\"\n    Check that the nginx-proxy container log contains a given string.\n    The backoff decorator will retry the check 15 times with a 2 seconds delay.\n\n    :param expected_log_line: string to search for\n    :return: None\n    :raises: AssertError if the expected string is not found in the log\n    \"\"\"\n    sut_container = docker_client.containers.get(\"nginxproxy\")\n    docker_logs = sut_container.logs(stdout=True, stderr=True, stream=False, follow=False)\n    assert expected_log_line in docker_logs\n\n\ndef require_openssl(required_version):\n    \"\"\"\n    This function checks that the required version of OpenSSL is present, and skips the test if not.\n    Use it as a test function decorator:\n\n        @require_openssl(\"2.3.4\")\n        def test_something():\n            ...\n\n    :param required_version: minimal required version as a string: \"1.2.3\"\n    \"\"\"\n\n    def versiontuple(v):\n        clean_v = re.sub(\"[^\\d\\.]\", \"\", v)\n        return tuple(map(int, (clean_v.split(\".\"))))\n\n    try:\n        command_output = subprocess.check_output([\"openssl\", \"version\"])\n    except OSError:\n        return pytest.mark.skip(\"openssl command is not available in test environment\")\n    else:\n        if not command_output:\n            raise Exception(\"Could not get openssl version\")\n        openssl_version = command_output.split()[1]\n        return pytest.mark.skipif(\n            versiontuple(openssl_version) < versiontuple(required_version),\n            reason=\"openssl v%s is less than required version %s\" % (openssl_version, required_version))\n\n\n###############################################################################\n#\n# Tests\n#\n###############################################################################\n\ndef test_dhparam_is_not_generated_if_present(docker_compose):\n    sut_container = docker_client.containers.get(\"nginxproxy\")\n    assert sut_container.status == \"running\"\n\n    assert_log_contains(\"Custom dhparam.pem file found, generation skipped\")\n\n    # Make sure the dhparam in use is not the default, pre-generated one\n    default_checksum = sut_container.exec_run(\"md5sum /app/dhparam.pem.default\").split()\n    current_checksum = sut_container.exec_run(\"md5sum /etc/nginx/dhparam/dhparam.pem\").split()\n    assert default_checksum[0] != current_checksum[0]\n\n\ndef test_web5_https_works(docker_compose, nginxproxy):\n    r = nginxproxy.get(\"https://web5.nginx-proxy.tld/port\", allow_redirects=False)\n    assert r.status_code == 200\n    assert \"answer from port 85\\n\" in r.text\n\n\n@require_openssl(\"1.0.2\")\ndef test_web5_dhparam_is_used(docker_compose):\n    sut_container = docker_client.containers.get(\"nginxproxy\")\n    assert sut_container.status == \"running\"\n\n    host = \"%s:443\" % sut_container.attrs[\"NetworkSettings\"][\"IPAddress\"]\n    r = subprocess.check_output(\n        \"echo '' | openssl s_client -connect %s -cipher 'EDH' | grep 'Server Temp Key'\" % host, shell=True)\n    assert \"Server Temp Key: DH, 2048 bits\\n\" == r\n", "description": "Automated nginx proxy for Docker containers using docker-gen", "file_name": "test_dhparam.py", "id": "09cc42a645aa5105337ac5e4c5955297", "language": "Python", "project_name": "nginx-proxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jwilder-nginx-proxy/jwilder-nginx-proxy-000a447/test/test_ssl/test_dhparam.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:25:07Z", "url": "https://github.com/jwilder/nginx-proxy", "wiki": true}