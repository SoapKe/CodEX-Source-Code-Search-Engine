{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\"\"\"Provides a class, defaults, and utils for Melody RNN model configuration.\"\"\"\n\n internal imports\nimport tensorflow as tf\n\nimport magenta\nfrom magenta.models.melody_rnn import melody_rnn_model\n\nFLAGS = tf.app.flags.FLAGS\ntf.app.flags.DEFINE_string(\n    'config',\n    None,\n    \"Which config to use. Must be one of 'basic', 'lookback', or 'attention'. \"\n    \"Mutually exclusive with `--melody_encoder_decoder`.\")\ntf.app.flags.DEFINE_string(\n    'melody_encoder_decoder',\n    None,\n    \"Which encoder/decoder to use. Must be one of 'onehot', 'lookback', or \"\n    \"'key'. Mutually exclusive with `--config`.\")\ntf.app.flags.DEFINE_string(\n    'generator_id',\n    None,\n    'A unique ID for the generator. Overrides the default if `--config` is '\n    'also supplied.')\ntf.app.flags.DEFINE_string(\n    'generator_description',\n    None,\n    'A description of the generator. Overrides the default if `--config` is '\n    'also supplied.')\ntf.app.flags.DEFINE_string(\n    'hparams', '',\n    'Comma-separated list of `name=value` pairs. For each pair, the value of '\n    'the hyperparameter named `name` is set to `value`. This mapping is merged '\n    'with the default hyperparameters.')\n\n\nclass MelodyRnnConfigFlagsException(Exception):\n  pass\n\n\ndef one_hot_melody_encoder_decoder(min_note, max_note):\n  \"\"\"Return a OneHotEventSequenceEncoderDecoder for melodies.\n\n  Args:\n    min_note: The minimum midi pitch the encoded melodies can have.\n    max_note: The maximum midi pitch (exclusive) the encoded melodies can have.\n\n  Returns:\n    A melody OneHotEventSequenceEncoderDecoder.\n  \"\"\"\n  return magenta.music.OneHotEventSequenceEncoderDecoder(\n      magenta.music.MelodyOneHotEncoding(min_note, max_note))\n\n\ndef lookback_melody_encoder_decoder(min_note, max_note):\n  \"\"\"Return a LookbackEventSequenceEncoderDecoder for melodies.\n\n  Args:\n    min_note: The minimum midi pitch the encoded melodies can have.\n    max_note: The maximum midi pitch (exclusive) the encoded melodies can have.\n\n  Returns:\n    A melody LookbackEventSequenceEncoderDecoder.\n  \"\"\"\n  return magenta.music.LookbackEventSequenceEncoderDecoder(\n      magenta.music.MelodyOneHotEncoding(min_note, max_note))\n\n\n Dictionary of functions that take `min_note` and `max_note` and return the\n appropriate EventSequenceEncoderDecoder object.\nmelody_encoder_decoders = {\n    'onehot': one_hot_melody_encoder_decoder,\n    'lookback': lookback_melody_encoder_decoder,\n    'key': magenta.music.KeyMelodyEncoderDecoder\n}\n\n\ndef config_from_flags():\n  \"\"\"Parses flags and returns the appropriate MelodyRnnConfig.\n\n  If `--config` is supplied, returns the matching default MelodyRnnConfig after\n  updating the hyperparameters based on `--hparams`.\n\n  If `--melody_encoder_decoder` is supplied, returns a new MelodyRnnConfig using\n  the matching EventSequenceEncoderDecoder, generator details supplied by\n  `--generator_id` and `--generator_description`, and hyperparameters based on\n  `--hparams`.\n\n  Returns:\n    The appropriate MelodyRnnConfig based on the supplied flags.\n\n  Raises:\n     MelodyRnnConfigFlagsException: When not exactly one of `--config` or\n         `melody_encoder_decoder` is supplied.\n  \"\"\"\n  if (FLAGS.melody_encoder_decoder, FLAGS.config).count(None) != 1:\n    raise MelodyRnnConfigFlagsException(\n        'Exactly one of `--config` or `--melody_encoder_decoder` must be '\n        'supplied.')\n\n  if FLAGS.melody_encoder_decoder is not None:\n    if FLAGS.melody_encoder_decoder not in melody_encoder_decoders:\n      raise MelodyRnnConfigFlagsException(\n          '`--melody_encoder_decoder` must be one of %s. Got %s.' % (\n              melody_encoder_decoders.keys(), FLAGS.melody_encoder_decoder))\n    if FLAGS.generator_id is not None:\n      generator_details = magenta.protobuf.generator_pb2.GeneratorDetails(\n          id=FLAGS.generator_id)\n      if FLAGS.generator_description is not None:\n        generator_details.description = FLAGS.generator_description\n    else:\n      generator_details = None\n    encoder_decoder = melody_encoder_decoders[FLAGS.melody_encoder_decoder](\n        melody_rnn_model.DEFAULT_MIN_NOTE, melody_rnn_model.DEFAULT_MAX_NOTE)\n    hparams = tf.contrib.training.HParams()\n    hparams.parse(FLAGS.hparams)\n    return melody_rnn_model.MelodyRnnConfig(\n        generator_details, encoder_decoder, hparams)\n  else:\n    if FLAGS.config not in melody_rnn_model.default_configs:\n      raise MelodyRnnConfigFlagsException(\n          '`--config` must be one of %s. Got %s.' % (\n              melody_rnn_model.default_configs.keys(), FLAGS.config))\n    config = melody_rnn_model.default_configs[FLAGS.config]\n    config.hparams.parse(FLAGS.hparams)\n    if FLAGS.generator_id is not None:\n      config.details.id = FLAGS.generator_id\n    if FLAGS.generator_description is not None:\n      config.details.description = FLAGS.generator_description\n    return config\n", "comments": "   provides class  defaults  utils melody rnn model configuration        internal imports import tensorflow tf  import magenta magenta models melody rnn import melody rnn model  flags   tf app flags flags tf app flags define string(      config       none       which config use  must one  basic    lookback    attention          mutually exclusive    melody encoder decoder   ) tf app flags define string(      melody encoder decoder       none       which encoder decoder use  must one  onehot    lookback           key   mutually exclusive    config   ) tf app flags define string(      generator id       none       a unique id generator  overrides default    config         also supplied  ) tf app flags define string(      generator description       none       a description generator  overrides default    config         also supplied  ) tf app flags define string(      hparams            comma separated list  name value  pairs  for pair  value        hyperparameter named  name  set  value   this mapping merged        default hyperparameters  )   class melodyrnnconfigflagsexception(exception)    pass   def one hot melody encoder decoder(min note  max note)       return onehoteventsequenceencoderdecoder melodies     args      min note  the minimum midi pitch encoded melodies      max note  the maximum midi pitch (exclusive) encoded melodies     returns      a melody onehoteventsequenceencoderdecoder          return magenta music onehoteventsequenceencoderdecoder(       magenta music melodyonehotencoding(min note  max note))   def lookback melody encoder decoder(min note  max note)       return lookbackeventsequenceencoderdecoder melodies     args      min note  the minimum midi pitch encoded melodies      max note  the maximum midi pitch (exclusive) encoded melodies     returns      a melody lookbackeventsequenceencoderdecoder          return magenta music lookbackeventsequenceencoderdecoder(       magenta music melodyonehotencoding(min note  max note))     dictionary functions take  min note   max note  return   appropriate eventsequenceencoderdecoder object  melody encoder decoders          onehot   one hot melody encoder decoder       lookback   lookback melody encoder decoder       key   magenta music keymelodyencoderdecoder     def config flags()       parses flags returns appropriate melodyrnnconfig     if    config  supplied  returns matching default melodyrnnconfig   updating hyperparameters based    hparams      if    melody encoder decoder  supplied  returns new melodyrnnconfig using   matching eventsequenceencoderdecoder  generator details supplied      generator id     generator description   hyperparameters based      hparams      returns      the appropriate melodyrnnconfig based supplied flags     raises       melodyrnnconfigflagsexception  when exactly one    config            melody encoder decoder  supplied           copyright 2016 google inc  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license          http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license     internal imports    dictionary functions take  min note   max note  return    appropriate eventsequenceencoderdecoder object  ", "content": "# Copyright 2016 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Provides a class, defaults, and utils for Melody RNN model configuration.\"\"\"\n\n# internal imports\nimport tensorflow as tf\n\nimport magenta\nfrom magenta.models.melody_rnn import melody_rnn_model\n\nFLAGS = tf.app.flags.FLAGS\ntf.app.flags.DEFINE_string(\n    'config',\n    None,\n    \"Which config to use. Must be one of 'basic', 'lookback', or 'attention'. \"\n    \"Mutually exclusive with `--melody_encoder_decoder`.\")\ntf.app.flags.DEFINE_string(\n    'melody_encoder_decoder',\n    None,\n    \"Which encoder/decoder to use. Must be one of 'onehot', 'lookback', or \"\n    \"'key'. Mutually exclusive with `--config`.\")\ntf.app.flags.DEFINE_string(\n    'generator_id',\n    None,\n    'A unique ID for the generator. Overrides the default if `--config` is '\n    'also supplied.')\ntf.app.flags.DEFINE_string(\n    'generator_description',\n    None,\n    'A description of the generator. Overrides the default if `--config` is '\n    'also supplied.')\ntf.app.flags.DEFINE_string(\n    'hparams', '',\n    'Comma-separated list of `name=value` pairs. For each pair, the value of '\n    'the hyperparameter named `name` is set to `value`. This mapping is merged '\n    'with the default hyperparameters.')\n\n\nclass MelodyRnnConfigFlagsException(Exception):\n  pass\n\n\ndef one_hot_melody_encoder_decoder(min_note, max_note):\n  \"\"\"Return a OneHotEventSequenceEncoderDecoder for melodies.\n\n  Args:\n    min_note: The minimum midi pitch the encoded melodies can have.\n    max_note: The maximum midi pitch (exclusive) the encoded melodies can have.\n\n  Returns:\n    A melody OneHotEventSequenceEncoderDecoder.\n  \"\"\"\n  return magenta.music.OneHotEventSequenceEncoderDecoder(\n      magenta.music.MelodyOneHotEncoding(min_note, max_note))\n\n\ndef lookback_melody_encoder_decoder(min_note, max_note):\n  \"\"\"Return a LookbackEventSequenceEncoderDecoder for melodies.\n\n  Args:\n    min_note: The minimum midi pitch the encoded melodies can have.\n    max_note: The maximum midi pitch (exclusive) the encoded melodies can have.\n\n  Returns:\n    A melody LookbackEventSequenceEncoderDecoder.\n  \"\"\"\n  return magenta.music.LookbackEventSequenceEncoderDecoder(\n      magenta.music.MelodyOneHotEncoding(min_note, max_note))\n\n\n# Dictionary of functions that take `min_note` and `max_note` and return the\n# appropriate EventSequenceEncoderDecoder object.\nmelody_encoder_decoders = {\n    'onehot': one_hot_melody_encoder_decoder,\n    'lookback': lookback_melody_encoder_decoder,\n    'key': magenta.music.KeyMelodyEncoderDecoder\n}\n\n\ndef config_from_flags():\n  \"\"\"Parses flags and returns the appropriate MelodyRnnConfig.\n\n  If `--config` is supplied, returns the matching default MelodyRnnConfig after\n  updating the hyperparameters based on `--hparams`.\n\n  If `--melody_encoder_decoder` is supplied, returns a new MelodyRnnConfig using\n  the matching EventSequenceEncoderDecoder, generator details supplied by\n  `--generator_id` and `--generator_description`, and hyperparameters based on\n  `--hparams`.\n\n  Returns:\n    The appropriate MelodyRnnConfig based on the supplied flags.\n\n  Raises:\n     MelodyRnnConfigFlagsException: When not exactly one of `--config` or\n         `melody_encoder_decoder` is supplied.\n  \"\"\"\n  if (FLAGS.melody_encoder_decoder, FLAGS.config).count(None) != 1:\n    raise MelodyRnnConfigFlagsException(\n        'Exactly one of `--config` or `--melody_encoder_decoder` must be '\n        'supplied.')\n\n  if FLAGS.melody_encoder_decoder is not None:\n    if FLAGS.melody_encoder_decoder not in melody_encoder_decoders:\n      raise MelodyRnnConfigFlagsException(\n          '`--melody_encoder_decoder` must be one of %s. Got %s.' % (\n              melody_encoder_decoders.keys(), FLAGS.melody_encoder_decoder))\n    if FLAGS.generator_id is not None:\n      generator_details = magenta.protobuf.generator_pb2.GeneratorDetails(\n          id=FLAGS.generator_id)\n      if FLAGS.generator_description is not None:\n        generator_details.description = FLAGS.generator_description\n    else:\n      generator_details = None\n    encoder_decoder = melody_encoder_decoders[FLAGS.melody_encoder_decoder](\n        melody_rnn_model.DEFAULT_MIN_NOTE, melody_rnn_model.DEFAULT_MAX_NOTE)\n    hparams = tf.contrib.training.HParams()\n    hparams.parse(FLAGS.hparams)\n    return melody_rnn_model.MelodyRnnConfig(\n        generator_details, encoder_decoder, hparams)\n  else:\n    if FLAGS.config not in melody_rnn_model.default_configs:\n      raise MelodyRnnConfigFlagsException(\n          '`--config` must be one of %s. Got %s.' % (\n              melody_rnn_model.default_configs.keys(), FLAGS.config))\n    config = melody_rnn_model.default_configs[FLAGS.config]\n    config.hparams.parse(FLAGS.hparams)\n    if FLAGS.generator_id is not None:\n      config.details.id = FLAGS.generator_id\n    if FLAGS.generator_description is not None:\n      config.details.description = FLAGS.generator_description\n    return config\n", "description": "Magenta: Music and Art Generation with Machine Intelligence", "file_name": "melody_rnn_config_flags.py", "id": "aa84e650563967171941f201f5e8a854", "language": "Python", "project_name": "magenta", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-magenta/tensorflow-magenta-ca73164/magenta/models/melody_rnn/melody_rnn_config_flags.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:00:14Z", "url": "https://github.com/tensorflow/magenta", "wiki": false}