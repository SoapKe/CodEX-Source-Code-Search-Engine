{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass PornotubeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:\\w+\\.)?pornotube\\.com/(?:[^?\n    _TEST = {\n        'url': 'http://www.pornotube.com/orientation/straight/video/4964/title/weird-hot-and-wet-science',\n        'md5': '60fc5a4f0d93a97968fc7999d98260c9',\n        'info_dict': {\n            'id': '4964',\n            'ext': 'mp4',\n            'upload_date': '20141203',\n            'title': 'Weird Hot and Wet Science',\n            'description': 'md5:a8304bef7ef06cb4ab476ca6029b01b0',\n            'categories': ['Adult Humor', 'Blondes'],\n            'uploader': 'Alpha Blue Archives',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'timestamp': 1417582800,\n            'age_limit': 18,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        token = self._download_json(\n            'https://api.aebn.net/auth/v2/origins/authenticate',\n            video_id, note='Downloading token',\n            data=json.dumps({'credentials': 'Clip Application'}).encode('utf-8'),\n            headers={\n                'Content-Type': 'application/json',\n                'Origin': 'http://www.pornotube.com',\n            })['tokenKey']\n\n        video_url = self._download_json(\n            'https://api.aebn.net/delivery/v1/clips/%s/MP4' % video_id,\n            video_id, note='Downloading delivery information',\n            headers={'Authorization': token})['mediaUrl']\n\n        FIELDS = (\n            'title', 'description', 'startSecond', 'endSecond', 'publishDate',\n            'studios{name}', 'categories{name}', 'movieId', 'primaryImageNumber'\n        )\n\n        info = self._download_json(\n            'https://api.aebn.net/content/v2/clips/%s?fields=%s'\n            % (video_id, ','.join(FIELDS)), video_id,\n            note='Downloading metadata',\n            headers={'Authorization': token})\n\n        if isinstance(info, list):\n            info = info[0]\n\n        title = info['title']\n\n        timestamp = int_or_none(info.get('publishDate'), scale=1000)\n        uploader = info.get('studios', [{}])[0].get('name')\n        movie_id = info.get('movieId')\n        primary_image_number = info.get('primaryImageNumber')\n        thumbnail = None\n        if movie_id and primary_image_number:\n            thumbnail = 'http://pic.aebn.net/dis/t/%s/%s_%08d.jpg' % (\n                movie_id, movie_id, primary_image_number)\n        start = int_or_none(info.get('startSecond'))\n        end = int_or_none(info.get('endSecond'))\n        duration = end - start if start and end else None\n        categories = [c['name'] for c in info.get('categories', []) if c.get('name')]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': info.get('description'),\n            'duration': duration,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'thumbnail': thumbnail,\n            'categories': categories,\n            'age_limit': 18,\n        }\n", "comments": "#]*?)/video/(?P<id>[0-9]+)'\n", "content": "from __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass PornotubeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:\\w+\\.)?pornotube\\.com/(?:[^?#]*?)/video/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.pornotube.com/orientation/straight/video/4964/title/weird-hot-and-wet-science',\n        'md5': '60fc5a4f0d93a97968fc7999d98260c9',\n        'info_dict': {\n            'id': '4964',\n            'ext': 'mp4',\n            'upload_date': '20141203',\n            'title': 'Weird Hot and Wet Science',\n            'description': 'md5:a8304bef7ef06cb4ab476ca6029b01b0',\n            'categories': ['Adult Humor', 'Blondes'],\n            'uploader': 'Alpha Blue Archives',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'timestamp': 1417582800,\n            'age_limit': 18,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        token = self._download_json(\n            'https://api.aebn.net/auth/v2/origins/authenticate',\n            video_id, note='Downloading token',\n            data=json.dumps({'credentials': 'Clip Application'}).encode('utf-8'),\n            headers={\n                'Content-Type': 'application/json',\n                'Origin': 'http://www.pornotube.com',\n            })['tokenKey']\n\n        video_url = self._download_json(\n            'https://api.aebn.net/delivery/v1/clips/%s/MP4' % video_id,\n            video_id, note='Downloading delivery information',\n            headers={'Authorization': token})['mediaUrl']\n\n        FIELDS = (\n            'title', 'description', 'startSecond', 'endSecond', 'publishDate',\n            'studios{name}', 'categories{name}', 'movieId', 'primaryImageNumber'\n        )\n\n        info = self._download_json(\n            'https://api.aebn.net/content/v2/clips/%s?fields=%s'\n            % (video_id, ','.join(FIELDS)), video_id,\n            note='Downloading metadata',\n            headers={'Authorization': token})\n\n        if isinstance(info, list):\n            info = info[0]\n\n        title = info['title']\n\n        timestamp = int_or_none(info.get('publishDate'), scale=1000)\n        uploader = info.get('studios', [{}])[0].get('name')\n        movie_id = info.get('movieId')\n        primary_image_number = info.get('primaryImageNumber')\n        thumbnail = None\n        if movie_id and primary_image_number:\n            thumbnail = 'http://pic.aebn.net/dis/t/%s/%s_%08d.jpg' % (\n                movie_id, movie_id, primary_image_number)\n        start = int_or_none(info.get('startSecond'))\n        end = int_or_none(info.get('endSecond'))\n        duration = end - start if start and end else None\n        categories = [c['name'] for c in info.get('categories', []) if c.get('name')]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': info.get('description'),\n            'duration': duration,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'thumbnail': thumbnail,\n            'categories': categories,\n            'age_limit': 18,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "pornotube.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/pornotube.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}