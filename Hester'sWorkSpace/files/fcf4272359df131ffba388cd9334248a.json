{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    parse_iso8601,\n    float_or_none,\n    int_or_none,\n    compat_str,\n    determine_ext,\n)\n\n\nclass HitboxIE(InfoExtractor):\n    IE_NAME = 'hitbox'\n    _VALID_URL = r'https?://(?:www\\.)?(?:hitbox|smashcast)\\.tv/(?:[^/]+/)*videos?/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.hitbox.tv/video/203213',\n        'info_dict': {\n            'id': '203213',\n            'title': 'hitbox @ gamescom, Sub Button Hype extended, Giveaway - hitbox News Update with Oxy',\n            'alt_title': 'hitboxlive - Aug 9th \n            'description': '',\n            'ext': 'mp4',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 215.1666,\n            'resolution': 'HD 720p',\n            'uploader': 'hitboxlive',\n            'view_count': int,\n            'timestamp': 1407576133,\n            'upload_date': '20140809',\n            'categories': ['Live Show'],\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.smashcast.tv/hitboxlive/videos/203213',\n        'only_matching': True,\n    }]\n\n    def _extract_metadata(self, url, video_id):\n        thumb_base = 'https://edge.sf.hitbox.tv'\n        metadata = self._download_json(\n            '%s/%s' % (url, video_id), video_id, 'Downloading metadata JSON')\n\n        date = 'media_live_since'\n        media_type = 'livestream'\n        if metadata.get('media_type') == 'video':\n            media_type = 'video'\n            date = 'media_date_added'\n\n        video_meta = metadata.get(media_type, [])[0]\n        title = video_meta.get('media_status')\n        alt_title = video_meta.get('media_title')\n        description = clean_html(\n            video_meta.get('media_description') or\n            video_meta.get('media_description_md'))\n        duration = float_or_none(video_meta.get('media_duration'))\n        uploader = video_meta.get('media_user_name')\n        views = int_or_none(video_meta.get('media_views'))\n        timestamp = parse_iso8601(video_meta.get(date), ' ')\n        categories = [video_meta.get('category_name')]\n        thumbs = [{\n            'url': thumb_base + video_meta.get('media_thumbnail'),\n            'width': 320,\n            'height': 180\n        }, {\n            'url': thumb_base + video_meta.get('media_thumbnail_large'),\n            'width': 768,\n            'height': 432\n        }]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'alt_title': alt_title,\n            'description': description,\n            'ext': 'mp4',\n            'thumbnails': thumbs,\n            'duration': duration,\n            'uploader': uploader,\n            'view_count': views,\n            'timestamp': timestamp,\n            'categories': categories,\n        }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        player_config = self._download_json(\n            'https://www.smashcast.tv/api/player/config/video/%s' % video_id,\n            video_id, 'Downloading video JSON')\n\n        formats = []\n        for video in player_config['clip']['bitrates']:\n            label = video.get('label')\n            if label == 'Auto':\n                continue\n            video_url = video.get('url')\n            if not video_url:\n                continue\n            bitrate = int_or_none(video.get('bitrate'))\n            if determine_ext(video_url) == 'm3u8':\n                if not video_url.startswith('http'):\n                    continue\n                formats.append({\n                    'url': video_url,\n                    'ext': 'mp4',\n                    'tbr': bitrate,\n                    'format_note': label,\n                    'protocol': 'm3u8_native',\n                })\n            else:\n                formats.append({\n                    'url': video_url,\n                    'tbr': bitrate,\n                    'format_note': label,\n                })\n        self._sort_formats(formats)\n\n        metadata = self._extract_metadata(\n            'https://www.smashcast.tv/api/media/video', video_id)\n        metadata['formats'] = formats\n\n        return metadata\n\n\nclass HitboxLiveIE(HitboxIE):\n    IE_NAME = 'hitbox:live'\n    _VALID_URL = r'https?://(?:www\\.)?(?:hitbox|smashcast)\\.tv/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'http://www.hitbox.tv/dimak',\n        'info_dict': {\n            'id': 'dimak',\n            'ext': 'mp4',\n            'description': 'md5:c9f80fa4410bc588d7faa40003fc7d0e',\n            'timestamp': int,\n            'upload_date': compat_str,\n            'title': compat_str,\n            'uploader': 'Dimak',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.smashcast.tv/dimak',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if HitboxIE.suitable(url) else super(HitboxLiveIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        player_config = self._download_json(\n            'https://www.smashcast.tv/api/player/config/live/%s' % video_id,\n            video_id)\n\n        formats = []\n        cdns = player_config.get('cdns')\n        servers = []\n        for cdn in cdns:\n            \n            if cdn.get('rtmpSubscribe') is True:\n                continue\n            base_url = cdn.get('netConnectionUrl')\n            host = re.search(r'.+\\.([^\\.]+\\.[^\\./]+)/.+', base_url).group(1)\n            if base_url not in servers:\n                servers.append(base_url)\n                for stream in cdn.get('bitrates'):\n                    label = stream.get('label')\n                    if label == 'Auto':\n                        continue\n                    stream_url = stream.get('url')\n                    if not stream_url:\n                        continue\n                    bitrate = int_or_none(stream.get('bitrate'))\n                    if stream.get('provider') == 'hls' or determine_ext(stream_url) == 'm3u8':\n                        if not stream_url.startswith('http'):\n                            continue\n                        formats.append({\n                            'url': stream_url,\n                            'ext': 'mp4',\n                            'tbr': bitrate,\n                            'format_note': label,\n                            'rtmp_live': True,\n                        })\n                    else:\n                        formats.append({\n                            'url': '%s/%s' % (base_url, stream_url),\n                            'ext': 'mp4',\n                            'tbr': bitrate,\n                            'rtmp_live': True,\n                            'format_note': host,\n                            'page_url': url,\n                            'player_url': 'http://www.hitbox.tv/static/player/flowplayer/flowplayer.commercial-3.2.16.swf',\n                        })\n        self._sort_formats(formats)\n\n        metadata = self._extract_metadata(\n            'https://www.smashcast.tv/api/media/live', video_id)\n        metadata['formats'] = formats\n        metadata['is_live'] = True\n        metadata['title'] = self._live_title(metadata.get('title'))\n\n        return metadata\n", "comments": "# coding: utf-8\n#6',\n# m3u8 download\n#&]+)'\n# live\n# Subscribe URLs are not playable\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    parse_iso8601,\n    float_or_none,\n    int_or_none,\n    compat_str,\n    determine_ext,\n)\n\n\nclass HitboxIE(InfoExtractor):\n    IE_NAME = 'hitbox'\n    _VALID_URL = r'https?://(?:www\\.)?(?:hitbox|smashcast)\\.tv/(?:[^/]+/)*videos?/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.hitbox.tv/video/203213',\n        'info_dict': {\n            'id': '203213',\n            'title': 'hitbox @ gamescom, Sub Button Hype extended, Giveaway - hitbox News Update with Oxy',\n            'alt_title': 'hitboxlive - Aug 9th #6',\n            'description': '',\n            'ext': 'mp4',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 215.1666,\n            'resolution': 'HD 720p',\n            'uploader': 'hitboxlive',\n            'view_count': int,\n            'timestamp': 1407576133,\n            'upload_date': '20140809',\n            'categories': ['Live Show'],\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.smashcast.tv/hitboxlive/videos/203213',\n        'only_matching': True,\n    }]\n\n    def _extract_metadata(self, url, video_id):\n        thumb_base = 'https://edge.sf.hitbox.tv'\n        metadata = self._download_json(\n            '%s/%s' % (url, video_id), video_id, 'Downloading metadata JSON')\n\n        date = 'media_live_since'\n        media_type = 'livestream'\n        if metadata.get('media_type') == 'video':\n            media_type = 'video'\n            date = 'media_date_added'\n\n        video_meta = metadata.get(media_type, [])[0]\n        title = video_meta.get('media_status')\n        alt_title = video_meta.get('media_title')\n        description = clean_html(\n            video_meta.get('media_description') or\n            video_meta.get('media_description_md'))\n        duration = float_or_none(video_meta.get('media_duration'))\n        uploader = video_meta.get('media_user_name')\n        views = int_or_none(video_meta.get('media_views'))\n        timestamp = parse_iso8601(video_meta.get(date), ' ')\n        categories = [video_meta.get('category_name')]\n        thumbs = [{\n            'url': thumb_base + video_meta.get('media_thumbnail'),\n            'width': 320,\n            'height': 180\n        }, {\n            'url': thumb_base + video_meta.get('media_thumbnail_large'),\n            'width': 768,\n            'height': 432\n        }]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'alt_title': alt_title,\n            'description': description,\n            'ext': 'mp4',\n            'thumbnails': thumbs,\n            'duration': duration,\n            'uploader': uploader,\n            'view_count': views,\n            'timestamp': timestamp,\n            'categories': categories,\n        }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        player_config = self._download_json(\n            'https://www.smashcast.tv/api/player/config/video/%s' % video_id,\n            video_id, 'Downloading video JSON')\n\n        formats = []\n        for video in player_config['clip']['bitrates']:\n            label = video.get('label')\n            if label == 'Auto':\n                continue\n            video_url = video.get('url')\n            if not video_url:\n                continue\n            bitrate = int_or_none(video.get('bitrate'))\n            if determine_ext(video_url) == 'm3u8':\n                if not video_url.startswith('http'):\n                    continue\n                formats.append({\n                    'url': video_url,\n                    'ext': 'mp4',\n                    'tbr': bitrate,\n                    'format_note': label,\n                    'protocol': 'm3u8_native',\n                })\n            else:\n                formats.append({\n                    'url': video_url,\n                    'tbr': bitrate,\n                    'format_note': label,\n                })\n        self._sort_formats(formats)\n\n        metadata = self._extract_metadata(\n            'https://www.smashcast.tv/api/media/video', video_id)\n        metadata['formats'] = formats\n\n        return metadata\n\n\nclass HitboxLiveIE(HitboxIE):\n    IE_NAME = 'hitbox:live'\n    _VALID_URL = r'https?://(?:www\\.)?(?:hitbox|smashcast)\\.tv/(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'http://www.hitbox.tv/dimak',\n        'info_dict': {\n            'id': 'dimak',\n            'ext': 'mp4',\n            'description': 'md5:c9f80fa4410bc588d7faa40003fc7d0e',\n            'timestamp': int,\n            'upload_date': compat_str,\n            'title': compat_str,\n            'uploader': 'Dimak',\n        },\n        'params': {\n            # live\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.smashcast.tv/dimak',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if HitboxIE.suitable(url) else super(HitboxLiveIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        player_config = self._download_json(\n            'https://www.smashcast.tv/api/player/config/live/%s' % video_id,\n            video_id)\n\n        formats = []\n        cdns = player_config.get('cdns')\n        servers = []\n        for cdn in cdns:\n            # Subscribe URLs are not playable\n            if cdn.get('rtmpSubscribe') is True:\n                continue\n            base_url = cdn.get('netConnectionUrl')\n            host = re.search(r'.+\\.([^\\.]+\\.[^\\./]+)/.+', base_url).group(1)\n            if base_url not in servers:\n                servers.append(base_url)\n                for stream in cdn.get('bitrates'):\n                    label = stream.get('label')\n                    if label == 'Auto':\n                        continue\n                    stream_url = stream.get('url')\n                    if not stream_url:\n                        continue\n                    bitrate = int_or_none(stream.get('bitrate'))\n                    if stream.get('provider') == 'hls' or determine_ext(stream_url) == 'm3u8':\n                        if not stream_url.startswith('http'):\n                            continue\n                        formats.append({\n                            'url': stream_url,\n                            'ext': 'mp4',\n                            'tbr': bitrate,\n                            'format_note': label,\n                            'rtmp_live': True,\n                        })\n                    else:\n                        formats.append({\n                            'url': '%s/%s' % (base_url, stream_url),\n                            'ext': 'mp4',\n                            'tbr': bitrate,\n                            'rtmp_live': True,\n                            'format_note': host,\n                            'page_url': url,\n                            'player_url': 'http://www.hitbox.tv/static/player/flowplayer/flowplayer.commercial-3.2.16.swf',\n                        })\n        self._sort_formats(formats)\n\n        metadata = self._extract_metadata(\n            'https://www.smashcast.tv/api/media/live', video_id)\n        metadata['formats'] = formats\n        metadata['is_live'] = True\n        metadata['title'] = self._live_title(metadata.get('title'))\n\n        return metadata\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "hitbox.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/hitbox.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}