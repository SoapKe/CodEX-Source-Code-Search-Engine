{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    extract_attributes,\n    int_or_none,\n    parse_duration,\n    parse_filesize,\n    unified_timestamp,\n)\n\n\nclass NewgroundsIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?newgrounds\\.com/(?:audio/listen|portal/view)/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'https://www.newgrounds.com/audio/listen/549479',\n        'md5': 'fe6033d297591288fa1c1f780386f07a',\n        'info_dict': {\n            'id': '549479',\n            'ext': 'mp3',\n            'title': 'B7 - BusMode',\n            'uploader': 'Burn7',\n            'timestamp': 1378878540,\n            'upload_date': '20130911',\n            'duration': 143,\n        },\n    }, {\n        'url': 'https://www.newgrounds.com/portal/view/673111',\n        'md5': '3394735822aab2478c31b1004fe5e5bc',\n        'info_dict': {\n            'id': '673111',\n            'ext': 'mp4',\n            'title': 'Dancin',\n            'uploader': 'Squirrelman82',\n            'timestamp': 1460256780,\n            'upload_date': '20160410',\n        },\n    }, {\n        \n        'url': 'http://www.newgrounds.com/portal/view/689400',\n        'info_dict': {\n            'id': '689400',\n            'ext': 'mp4',\n            'title': 'ZTV News Episode 8',\n            'uploader': 'BennettTheSage',\n            'timestamp': 1487965140,\n            'upload_date': '20170224',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        media_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, media_id)\n\n        title = self._html_search_regex(\n            r'<title>([^>]+)</title>', webpage, 'title')\n\n        media_url = self._parse_json(self._search_regex(\n            r'\"url\"\\s*:\\s*(\"[^\"]+\"),', webpage, ''), media_id)\n\n        formats = [{\n            'url': media_url,\n            'format_id': 'source',\n            'quality': 1,\n        }]\n\n        max_resolution = int_or_none(self._search_regex(\n            r'max_resolution[\"\\']\\s*:\\s*(\\d+)', webpage, 'max resolution',\n            default=None))\n        if max_resolution:\n            url_base = media_url.rpartition('.')[0]\n            for resolution in (360, 720, 1080):\n                if resolution > max_resolution:\n                    break\n                formats.append({\n                    'url': '%s.%dp.mp4' % (url_base, resolution),\n                    'format_id': '%dp' % resolution,\n                    'height': resolution,\n                })\n\n        self._check_formats(formats, media_id)\n        self._sort_formats(formats)\n\n        uploader = self._html_search_regex(\n            (r'(?s)<h4[^>]*>(.+?)</h4>.*?<em>\\s*Author\\s*</em>',\n             r'(?:Author|Writer)\\s*<a[^>]+>([^<]+)'), webpage, 'uploader',\n            fatal=False)\n\n        timestamp = unified_timestamp(self._html_search_regex(\n            (r'<dt>\\s*Uploaded\\s*</dt>\\s*<dd>([^<]+</dd>\\s*<dd>[^<]+)',\n             r'<dt>\\s*Uploaded\\s*</dt>\\s*<dd>([^<]+)'), webpage, 'timestamp',\n            default=None))\n        duration = parse_duration(self._search_regex(\n            r'(?s)<dd>\\s*Song\\s*</dd>\\s*<dd>.+?</dd>\\s*<dd>([^<]+)', webpage,\n            'duration', default=None))\n\n        filesize_approx = parse_filesize(self._html_search_regex(\n            r'(?s)<dd>\\s*Song\\s*</dd>\\s*<dd>(.+?)</dd>', webpage, 'filesize',\n            default=None))\n        if len(formats) == 1:\n            formats[0]['filesize_approx'] = filesize_approx\n\n        if '<dd>Song' in webpage:\n            formats[0]['vcodec'] = 'none'\n\n        return {\n            'id': media_id,\n            'title': title,\n            'uploader': uploader,\n            'timestamp': timestamp,\n            'duration': duration,\n            'formats': formats,\n        }\n\n\nclass NewgroundsPlaylistIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?newgrounds\\.com/(?:collection|[^/]+/search/[^/]+)/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'https://www.newgrounds.com/collection/cats',\n        'info_dict': {\n            'id': 'cats',\n            'title': 'Cats',\n        },\n        'playlist_mincount': 46,\n    }, {\n        'url': 'http://www.newgrounds.com/portal/search/author/ZONE-SAMA',\n        'info_dict': {\n            'id': 'ZONE-SAMA',\n            'title': 'Portal Search: ZONE-SAMA',\n        },\n        'playlist_mincount': 47,\n    }, {\n        'url': 'http://www.newgrounds.com/audio/search/title/cats',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        title = self._search_regex(\n            r'<title>([^>]+)</title>', webpage, 'title', default=None)\n\n        \n        webpage = self._search_regex(\n            r'(?s)<div[^>]+\\bclass=[\"\\']column wide(.+)',\n            webpage, 'wide column', default=webpage)\n\n        entries = []\n        for a, path, media_id in re.findall(\n                r'(<a[^>]+\\bhref=[\"\\']/?((?:portal/view|audio/listen)/(\\d+))[^>]+>)',\n                webpage):\n            a_class = extract_attributes(a).get('class')\n            if a_class not in ('item-portalsubmission', 'item-audiosubmission'):\n                continue\n            entries.append(\n                self.url_result(\n                    'https://www.newgrounds.com/%s' % path,\n                    ie=NewgroundsIE.ie_key(), video_id=media_id))\n\n        return self.playlist_result(entries, playlist_id, title)\n", "comments": "# source format unavailable, additional mp4 formats\n#&]+)'\n# cut left menu\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    extract_attributes,\n    int_or_none,\n    parse_duration,\n    parse_filesize,\n    unified_timestamp,\n)\n\n\nclass NewgroundsIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?newgrounds\\.com/(?:audio/listen|portal/view)/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'https://www.newgrounds.com/audio/listen/549479',\n        'md5': 'fe6033d297591288fa1c1f780386f07a',\n        'info_dict': {\n            'id': '549479',\n            'ext': 'mp3',\n            'title': 'B7 - BusMode',\n            'uploader': 'Burn7',\n            'timestamp': 1378878540,\n            'upload_date': '20130911',\n            'duration': 143,\n        },\n    }, {\n        'url': 'https://www.newgrounds.com/portal/view/673111',\n        'md5': '3394735822aab2478c31b1004fe5e5bc',\n        'info_dict': {\n            'id': '673111',\n            'ext': 'mp4',\n            'title': 'Dancin',\n            'uploader': 'Squirrelman82',\n            'timestamp': 1460256780,\n            'upload_date': '20160410',\n        },\n    }, {\n        # source format unavailable, additional mp4 formats\n        'url': 'http://www.newgrounds.com/portal/view/689400',\n        'info_dict': {\n            'id': '689400',\n            'ext': 'mp4',\n            'title': 'ZTV News Episode 8',\n            'uploader': 'BennettTheSage',\n            'timestamp': 1487965140,\n            'upload_date': '20170224',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        media_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, media_id)\n\n        title = self._html_search_regex(\n            r'<title>([^>]+)</title>', webpage, 'title')\n\n        media_url = self._parse_json(self._search_regex(\n            r'\"url\"\\s*:\\s*(\"[^\"]+\"),', webpage, ''), media_id)\n\n        formats = [{\n            'url': media_url,\n            'format_id': 'source',\n            'quality': 1,\n        }]\n\n        max_resolution = int_or_none(self._search_regex(\n            r'max_resolution[\"\\']\\s*:\\s*(\\d+)', webpage, 'max resolution',\n            default=None))\n        if max_resolution:\n            url_base = media_url.rpartition('.')[0]\n            for resolution in (360, 720, 1080):\n                if resolution > max_resolution:\n                    break\n                formats.append({\n                    'url': '%s.%dp.mp4' % (url_base, resolution),\n                    'format_id': '%dp' % resolution,\n                    'height': resolution,\n                })\n\n        self._check_formats(formats, media_id)\n        self._sort_formats(formats)\n\n        uploader = self._html_search_regex(\n            (r'(?s)<h4[^>]*>(.+?)</h4>.*?<em>\\s*Author\\s*</em>',\n             r'(?:Author|Writer)\\s*<a[^>]+>([^<]+)'), webpage, 'uploader',\n            fatal=False)\n\n        timestamp = unified_timestamp(self._html_search_regex(\n            (r'<dt>\\s*Uploaded\\s*</dt>\\s*<dd>([^<]+</dd>\\s*<dd>[^<]+)',\n             r'<dt>\\s*Uploaded\\s*</dt>\\s*<dd>([^<]+)'), webpage, 'timestamp',\n            default=None))\n        duration = parse_duration(self._search_regex(\n            r'(?s)<dd>\\s*Song\\s*</dd>\\s*<dd>.+?</dd>\\s*<dd>([^<]+)', webpage,\n            'duration', default=None))\n\n        filesize_approx = parse_filesize(self._html_search_regex(\n            r'(?s)<dd>\\s*Song\\s*</dd>\\s*<dd>(.+?)</dd>', webpage, 'filesize',\n            default=None))\n        if len(formats) == 1:\n            formats[0]['filesize_approx'] = filesize_approx\n\n        if '<dd>Song' in webpage:\n            formats[0]['vcodec'] = 'none'\n\n        return {\n            'id': media_id,\n            'title': title,\n            'uploader': uploader,\n            'timestamp': timestamp,\n            'duration': duration,\n            'formats': formats,\n        }\n\n\nclass NewgroundsPlaylistIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?newgrounds\\.com/(?:collection|[^/]+/search/[^/]+)/(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'https://www.newgrounds.com/collection/cats',\n        'info_dict': {\n            'id': 'cats',\n            'title': 'Cats',\n        },\n        'playlist_mincount': 46,\n    }, {\n        'url': 'http://www.newgrounds.com/portal/search/author/ZONE-SAMA',\n        'info_dict': {\n            'id': 'ZONE-SAMA',\n            'title': 'Portal Search: ZONE-SAMA',\n        },\n        'playlist_mincount': 47,\n    }, {\n        'url': 'http://www.newgrounds.com/audio/search/title/cats',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        title = self._search_regex(\n            r'<title>([^>]+)</title>', webpage, 'title', default=None)\n\n        # cut left menu\n        webpage = self._search_regex(\n            r'(?s)<div[^>]+\\bclass=[\"\\']column wide(.+)',\n            webpage, 'wide column', default=webpage)\n\n        entries = []\n        for a, path, media_id in re.findall(\n                r'(<a[^>]+\\bhref=[\"\\']/?((?:portal/view|audio/listen)/(\\d+))[^>]+>)',\n                webpage):\n            a_class = extract_attributes(a).get('class')\n            if a_class not in ('item-portalsubmission', 'item-audiosubmission'):\n                continue\n            entries.append(\n                self.url_result(\n                    'https://www.newgrounds.com/%s' % path,\n                    ie=NewgroundsIE.ie_key(), video_id=media_id))\n\n        return self.playlist_result(entries, playlist_id, title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "newgrounds.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/newgrounds.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}