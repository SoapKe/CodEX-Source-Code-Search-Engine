{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom datetime import date\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo import api, fields, models, _\nfrom odoo.exceptions import ValidationError\n\n\nclass Employee(models.Model):\n\n    _inherit = \"hr.employee\"\n\n    manager = fields.Boolean(string='Is a Manager')\n    medic_exam = fields.Date(string='Medical Examination Date', groups=\"hr.group_hr_user\")\n    place_of_birth = fields.Char('Place of Birth', groups=\"hr.group_hr_user\")\n    children = fields.Integer(string='Number of Children', groups=\"hr.group_hr_user\")\n    vehicle = fields.Char(string='Company Vehicle', groups=\"hr.group_hr_user\")\n    vehicle_distance = fields.Integer(\n        string='Home-Work Dist.', help=\"In kilometers\", groups=\"hr.group_hr_user\")\n    contract_ids = fields.One2many('hr.contract', 'employee_id', string='Contracts')\n    contract_id = fields.Many2one('hr.contract', compute='_compute_contract_id', string='Current Contract', help='Latest contract of the employee')\n    contracts_count = fields.Integer(compute='_compute_contracts_count', string='Contracts')\n\n    def _compute_contract_id(self):\n        \n        Contract = self.env['hr.contract']\n        for employee in self:\n            employee.contract_id = Contract.search([('employee_id', '=', employee.id)], order='date_start desc', limit=1)\n\n    def _compute_contracts_count(self):\n        \n        contract_data = self.env['hr.contract'].sudo().read_group([('employee_id', 'in', self.ids)], ['employee_id'], ['employee_id'])\n        result = dict((data['employee_id'][0], data['employee_id_count']) for data in contract_data)\n        for employee in self:\n            employee.contracts_count = result.get(employee.id, 0)\n\n\nclass ContractType(models.Model):\n\n    _name = 'hr.contract.type'\n    _description = 'Contract Type'\n    _order = 'sequence, id'\n\n    name = fields.Char(string='Contract Type', required=True)\n    sequence = fields.Integer(help=\"Gives the sequence when displaying a list of Contract.\", default=10)\n\n\nclass Contract(models.Model):\n\n    _name = 'hr.contract'\n    _description = 'Contract'\n    _inherit = ['mail.thread']\n\n    name = fields.Char('Contract Reference', required=True)\n    employee_id = fields.Many2one('hr.employee', string='Employee')\n    department_id = fields.Many2one('hr.department', string=\"Department\")\n    type_id = fields.Many2one('hr.contract.type', string=\"Contract Type\", required=True, default=lambda self: self.env['hr.contract.type'].search([], limit=1))\n    job_id = fields.Many2one('hr.job', string='Job Position')\n    date_start = fields.Date('Start Date', required=True, default=fields.Date.today,\n        help=\"Start date of the contract.\")\n    date_end = fields.Date('End Date',\n        help=\"End date of the contract (if it's a fixed-term contract).\")\n    trial_date_end = fields.Date('End of Trial Period',\n        help=\"End date of the trial period (if there is one).\")\n    resource_calendar_id = fields.Many2one(\n        'resource.calendar', 'Working Schedule',\n        default=lambda self: self.env['res.company']._company_default_get().resource_calendar_id.id)\n    wage = fields.Monetary('Wage', digits=(16, 2), required=True, help=\"Employee's monthly gross wage.\")\n    advantages = fields.Text('Advantages')\n    notes = fields.Text('Notes')\n    state = fields.Selection([\n        ('draft', 'New'),\n        ('open', 'Running'),\n        ('pending', 'To Renew'),\n        ('close', 'Expired'),\n        ('cancel', 'Cancelled')\n    ], string='Status', group_expand='_expand_states',\n       track_visibility='onchange', help='Status of the contract', default='draft')\n    company_id = fields.Many2one('res.company', default=lambda self: self.env.user.company_id)\n    currency_id = fields.Many2one(string=\"Currency\", related='company_id.currency_id', readonly=True)\n    permit_no = fields.Char('Work Permit No', related=\"employee_id.permit_no\")\n    visa_no = fields.Char('Visa No', related=\"employee_id.visa_no\")\n    visa_expire = fields.Date('Visa Expire Date', related=\"employee_id.visa_expire\")\n\n    def _expand_states(self, states, domain, order):\n        return [key for key, val in type(self).state.selection]\n\n    @api.onchange('employee_id')\n    def _onchange_employee_id(self):\n        if self.employee_id:\n            self.job_id = self.employee_id.job_id\n            self.department_id = self.employee_id.department_id\n            self.resource_calendar_id = self.employee_id.resource_calendar_id\n\n    @api.constrains('date_start', 'date_end')\n    def _check_dates(self):\n        if self.filtered(lambda c: c.date_end and c.date_start > c.date_end):\n            raise ValidationError(_('Contract start date must be less than contract end date.'))\n\n    @api.model\n    def update_state(self):\n        self.search([\n            ('state', '=', 'open'),\n            '|',\n            '&',\n            ('date_end', '<=', fields.Date.to_string(date.today() + relativedelta(days=7))),\n            ('date_end', '>=', fields.Date.to_string(date.today() + relativedelta(days=1))),\n            '&',\n            ('visa_expire', '<=', fields.Date.to_string(date.today() + relativedelta(days=60))),\n            ('visa_expire', '>=', fields.Date.to_string(date.today() + relativedelta(days=1))),\n        ]).write({\n            'state': 'pending'\n        })\n\n        self.search([\n            ('state', 'in', ('open', 'pending')),\n            '|',\n            ('date_end', '<=', fields.Date.to_string(date.today() + relativedelta(days=1))),\n            ('visa_expire', '<=', fields.Date.to_string(date.today() + relativedelta(days=1))),\n        ]).write({\n            'state': 'close'\n        })\n\n        return True\n\n    @api.multi\n    def _track_subtype(self, init_values):\n        self.ensure_one()\n        if 'state' in init_values and self.state == 'pending':\n            return 'hr_contract.mt_contract_pending'\n        elif 'state' in init_values and self.state == 'close':\n            return 'hr_contract.mt_contract_close'\n        return super(Contract, self)._track_subtype(init_values)\n", "comments": "    get lastest contract            coding  utf 8        part odoo  see license file full copyright licensing details     read group sudo  since contract count displayed form view ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom datetime import date\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo import api, fields, models, _\nfrom odoo.exceptions import ValidationError\n\n\nclass Employee(models.Model):\n\n    _inherit = \"hr.employee\"\n\n    manager = fields.Boolean(string='Is a Manager')\n    medic_exam = fields.Date(string='Medical Examination Date', groups=\"hr.group_hr_user\")\n    place_of_birth = fields.Char('Place of Birth', groups=\"hr.group_hr_user\")\n    children = fields.Integer(string='Number of Children', groups=\"hr.group_hr_user\")\n    vehicle = fields.Char(string='Company Vehicle', groups=\"hr.group_hr_user\")\n    vehicle_distance = fields.Integer(\n        string='Home-Work Dist.', help=\"In kilometers\", groups=\"hr.group_hr_user\")\n    contract_ids = fields.One2many('hr.contract', 'employee_id', string='Contracts')\n    contract_id = fields.Many2one('hr.contract', compute='_compute_contract_id', string='Current Contract', help='Latest contract of the employee')\n    contracts_count = fields.Integer(compute='_compute_contracts_count', string='Contracts')\n\n    def _compute_contract_id(self):\n        \"\"\" get the lastest contract \"\"\"\n        Contract = self.env['hr.contract']\n        for employee in self:\n            employee.contract_id = Contract.search([('employee_id', '=', employee.id)], order='date_start desc', limit=1)\n\n    def _compute_contracts_count(self):\n        # read_group as sudo, since contract count is displayed on form view\n        contract_data = self.env['hr.contract'].sudo().read_group([('employee_id', 'in', self.ids)], ['employee_id'], ['employee_id'])\n        result = dict((data['employee_id'][0], data['employee_id_count']) for data in contract_data)\n        for employee in self:\n            employee.contracts_count = result.get(employee.id, 0)\n\n\nclass ContractType(models.Model):\n\n    _name = 'hr.contract.type'\n    _description = 'Contract Type'\n    _order = 'sequence, id'\n\n    name = fields.Char(string='Contract Type', required=True)\n    sequence = fields.Integer(help=\"Gives the sequence when displaying a list of Contract.\", default=10)\n\n\nclass Contract(models.Model):\n\n    _name = 'hr.contract'\n    _description = 'Contract'\n    _inherit = ['mail.thread']\n\n    name = fields.Char('Contract Reference', required=True)\n    employee_id = fields.Many2one('hr.employee', string='Employee')\n    department_id = fields.Many2one('hr.department', string=\"Department\")\n    type_id = fields.Many2one('hr.contract.type', string=\"Contract Type\", required=True, default=lambda self: self.env['hr.contract.type'].search([], limit=1))\n    job_id = fields.Many2one('hr.job', string='Job Position')\n    date_start = fields.Date('Start Date', required=True, default=fields.Date.today,\n        help=\"Start date of the contract.\")\n    date_end = fields.Date('End Date',\n        help=\"End date of the contract (if it's a fixed-term contract).\")\n    trial_date_end = fields.Date('End of Trial Period',\n        help=\"End date of the trial period (if there is one).\")\n    resource_calendar_id = fields.Many2one(\n        'resource.calendar', 'Working Schedule',\n        default=lambda self: self.env['res.company']._company_default_get().resource_calendar_id.id)\n    wage = fields.Monetary('Wage', digits=(16, 2), required=True, help=\"Employee's monthly gross wage.\")\n    advantages = fields.Text('Advantages')\n    notes = fields.Text('Notes')\n    state = fields.Selection([\n        ('draft', 'New'),\n        ('open', 'Running'),\n        ('pending', 'To Renew'),\n        ('close', 'Expired'),\n        ('cancel', 'Cancelled')\n    ], string='Status', group_expand='_expand_states',\n       track_visibility='onchange', help='Status of the contract', default='draft')\n    company_id = fields.Many2one('res.company', default=lambda self: self.env.user.company_id)\n    currency_id = fields.Many2one(string=\"Currency\", related='company_id.currency_id', readonly=True)\n    permit_no = fields.Char('Work Permit No', related=\"employee_id.permit_no\")\n    visa_no = fields.Char('Visa No', related=\"employee_id.visa_no\")\n    visa_expire = fields.Date('Visa Expire Date', related=\"employee_id.visa_expire\")\n\n    def _expand_states(self, states, domain, order):\n        return [key for key, val in type(self).state.selection]\n\n    @api.onchange('employee_id')\n    def _onchange_employee_id(self):\n        if self.employee_id:\n            self.job_id = self.employee_id.job_id\n            self.department_id = self.employee_id.department_id\n            self.resource_calendar_id = self.employee_id.resource_calendar_id\n\n    @api.constrains('date_start', 'date_end')\n    def _check_dates(self):\n        if self.filtered(lambda c: c.date_end and c.date_start > c.date_end):\n            raise ValidationError(_('Contract start date must be less than contract end date.'))\n\n    @api.model\n    def update_state(self):\n        self.search([\n            ('state', '=', 'open'),\n            '|',\n            '&',\n            ('date_end', '<=', fields.Date.to_string(date.today() + relativedelta(days=7))),\n            ('date_end', '>=', fields.Date.to_string(date.today() + relativedelta(days=1))),\n            '&',\n            ('visa_expire', '<=', fields.Date.to_string(date.today() + relativedelta(days=60))),\n            ('visa_expire', '>=', fields.Date.to_string(date.today() + relativedelta(days=1))),\n        ]).write({\n            'state': 'pending'\n        })\n\n        self.search([\n            ('state', 'in', ('open', 'pending')),\n            '|',\n            ('date_end', '<=', fields.Date.to_string(date.today() + relativedelta(days=1))),\n            ('visa_expire', '<=', fields.Date.to_string(date.today() + relativedelta(days=1))),\n        ]).write({\n            'state': 'close'\n        })\n\n        return True\n\n    @api.multi\n    def _track_subtype(self, init_values):\n        self.ensure_one()\n        if 'state' in init_values and self.state == 'pending':\n            return 'hr_contract.mt_contract_pending'\n        elif 'state' in init_values and self.state == 'close':\n            return 'hr_contract.mt_contract_close'\n        return super(Contract, self)._track_subtype(init_values)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "hr_contract.py", "id": "eba8991254b37e2b27cf6efc635061c9", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_contract/models/hr_contract.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}