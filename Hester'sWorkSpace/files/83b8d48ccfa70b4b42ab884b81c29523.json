{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    xpath_text,\n)\n\n\nclass InternetVideoArchiveIE(InfoExtractor):\n    _VALID_URL = r'https?://video\\.internetvideoarchive\\.net/(?:player|flash/players)/.*?\\?.*?publishedid.*?'\n\n    _TEST = {\n        'url': 'http://video.internetvideoarchive.net/player/6/configuration.ashx?customerid=69249&publishedid=194487&reporttag=vdbetatitle&playerid=641&autolist=0&domain=www.videodetective.com&maxrate=high&minrate=low&socialplayer=false',\n        'info_dict': {\n            'id': '194487',\n            'ext': 'mp4',\n            'title': 'KICK-ASS 2',\n            'description': 'md5:c189d5b7280400630a1d3dd17eaa8d8a',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }\n\n    @staticmethod\n    def _build_json_url(query):\n        return 'http://video.internetvideoarchive.net/player/6/configuration.ashx?' + query\n\n    @staticmethod\n    def _build_xml_url(query):\n        return 'http://video.internetvideoarchive.net/flash/players/flashconfiguration.aspx?' + query\n\n    def _real_extract(self, url):\n        query = compat_urlparse.urlparse(url).query\n        query_dic = compat_parse_qs(query)\n        video_id = query_dic['publishedid'][0]\n\n        if '/player/' in url:\n            configuration = self._download_json(url, video_id)\n\n            \n            \n            video_info = configuration['playlist'][0]\n            title = video_info['title']\n\n            formats = []\n            for source in video_info['sources']:\n                file_url = source['file']\n                if determine_ext(file_url) == 'm3u8':\n                    m3u8_formats = self._extract_m3u8_formats(\n                        file_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False)\n                    if m3u8_formats:\n                        formats.extend(m3u8_formats)\n                        file_url = m3u8_formats[0]['url']\n                        formats.extend(self._extract_f4m_formats(\n                            file_url.replace('.m3u8', '.f4m'),\n                            video_id, f4m_id='hds', fatal=False))\n                        formats.extend(self._extract_mpd_formats(\n                            file_url.replace('.m3u8', '.mpd'),\n                            video_id, mpd_id='dash', fatal=False))\n                else:\n                    a_format = {\n                        'url': file_url,\n                    }\n\n                    if source.get('label') and source['label'][-4:] == ' kbs':\n                        tbr = int_or_none(source['label'][:-4])\n                        a_format.update({\n                            'tbr': tbr,\n                            'format_id': 'http-%d' % tbr,\n                        })\n                        formats.append(a_format)\n\n            self._sort_formats(formats)\n\n            description = video_info.get('description')\n            thumbnail = video_info.get('image')\n        else:\n            configuration = self._download_xml(url, video_id)\n            formats = [{\n                'url': xpath_text(configuration, './file', 'file URL', fatal=True),\n            }]\n            thumbnail = xpath_text(configuration, './image', 'thumbnail')\n            title = 'InternetVideoArchive video %s' % video_id\n            description = None\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'description': description,\n        }\n", "comments": "# m3u8 download\n# There are multiple videos in the playlist whlie only the first one\n# matches the video played in browsers\n", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    xpath_text,\n)\n\n\nclass InternetVideoArchiveIE(InfoExtractor):\n    _VALID_URL = r'https?://video\\.internetvideoarchive\\.net/(?:player|flash/players)/.*?\\?.*?publishedid.*?'\n\n    _TEST = {\n        'url': 'http://video.internetvideoarchive.net/player/6/configuration.ashx?customerid=69249&publishedid=194487&reporttag=vdbetatitle&playerid=641&autolist=0&domain=www.videodetective.com&maxrate=high&minrate=low&socialplayer=false',\n        'info_dict': {\n            'id': '194487',\n            'ext': 'mp4',\n            'title': 'KICK-ASS 2',\n            'description': 'md5:c189d5b7280400630a1d3dd17eaa8d8a',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }\n\n    @staticmethod\n    def _build_json_url(query):\n        return 'http://video.internetvideoarchive.net/player/6/configuration.ashx?' + query\n\n    @staticmethod\n    def _build_xml_url(query):\n        return 'http://video.internetvideoarchive.net/flash/players/flashconfiguration.aspx?' + query\n\n    def _real_extract(self, url):\n        query = compat_urlparse.urlparse(url).query\n        query_dic = compat_parse_qs(query)\n        video_id = query_dic['publishedid'][0]\n\n        if '/player/' in url:\n            configuration = self._download_json(url, video_id)\n\n            # There are multiple videos in the playlist whlie only the first one\n            # matches the video played in browsers\n            video_info = configuration['playlist'][0]\n            title = video_info['title']\n\n            formats = []\n            for source in video_info['sources']:\n                file_url = source['file']\n                if determine_ext(file_url) == 'm3u8':\n                    m3u8_formats = self._extract_m3u8_formats(\n                        file_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False)\n                    if m3u8_formats:\n                        formats.extend(m3u8_formats)\n                        file_url = m3u8_formats[0]['url']\n                        formats.extend(self._extract_f4m_formats(\n                            file_url.replace('.m3u8', '.f4m'),\n                            video_id, f4m_id='hds', fatal=False))\n                        formats.extend(self._extract_mpd_formats(\n                            file_url.replace('.m3u8', '.mpd'),\n                            video_id, mpd_id='dash', fatal=False))\n                else:\n                    a_format = {\n                        'url': file_url,\n                    }\n\n                    if source.get('label') and source['label'][-4:] == ' kbs':\n                        tbr = int_or_none(source['label'][:-4])\n                        a_format.update({\n                            'tbr': tbr,\n                            'format_id': 'http-%d' % tbr,\n                        })\n                        formats.append(a_format)\n\n            self._sort_formats(formats)\n\n            description = video_info.get('description')\n            thumbnail = video_info.get('image')\n        else:\n            configuration = self._download_xml(url, video_id)\n            formats = [{\n                'url': xpath_text(configuration, './file', 'file URL', fatal=True),\n            }]\n            thumbnail = xpath_text(configuration, './image', 'thumbnail')\n            title = 'InternetVideoArchive video %s' % video_id\n            description = None\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'description': description,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "internetvideoarchive.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/internetvideoarchive.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}