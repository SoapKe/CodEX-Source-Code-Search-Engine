{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom sentry import tagstore\nfrom sentry.testutils import AcceptanceTestCase\n\n\nclass ProjectTagsSettingsTest(AcceptanceTestCase):\n    def setUp(self):\n        super(ProjectTagsSettingsTest, self).setUp()\n        self.user = self.create_user('foo@example.com')\n        self.org = self.create_organization(\n            name='Rowdy Tiger',\n            owner=None,\n        )\n        self.team = self.create_team(organization=self.org, name='Mariachi Band')\n        self.project = self.create_project(\n            organization=self.org,\n            teams=[self.team],\n            name='Bengal',\n        )\n        self.create_member(\n            user=self.user,\n            organization=self.org,\n            role='owner',\n            teams=[self.team],\n        )\n\n        tagstore.create_tag_key(project_id=self.project.id, environment_id=None, key=\"Foo\")\n\n        self.login_as(self.user)\n        self.path1 = '/{}/{}/settings/tags/'.format(self.org.slug, self.project.slug)\n\n    def test_tags_list(self):\n        self.browser.get(self.path1)\n        self.browser.wait_until_not('.loading-indicator')\n        self.browser.snapshot('project settings - tags')\n        self.browser.wait_until('.ref-tag-row')\n        self.browser.click('.ref-tag-row .btn')\n        self.browser.wait_until('.modal-footer .button-primary')\n        self.browser.click('.modal-footer .button-primary')\n        self.browser.wait_until_not('.ref-tag-row')\n        self.browser.snapshot('project settings - tags - after remove')\n", "comments": "", "content": "from __future__ import absolute_import\n\nfrom sentry import tagstore\nfrom sentry.testutils import AcceptanceTestCase\n\n\nclass ProjectTagsSettingsTest(AcceptanceTestCase):\n    def setUp(self):\n        super(ProjectTagsSettingsTest, self).setUp()\n        self.user = self.create_user('foo@example.com')\n        self.org = self.create_organization(\n            name='Rowdy Tiger',\n            owner=None,\n        )\n        self.team = self.create_team(organization=self.org, name='Mariachi Band')\n        self.project = self.create_project(\n            organization=self.org,\n            teams=[self.team],\n            name='Bengal',\n        )\n        self.create_member(\n            user=self.user,\n            organization=self.org,\n            role='owner',\n            teams=[self.team],\n        )\n\n        tagstore.create_tag_key(project_id=self.project.id, environment_id=None, key=\"Foo\")\n\n        self.login_as(self.user)\n        self.path1 = '/{}/{}/settings/tags/'.format(self.org.slug, self.project.slug)\n\n    def test_tags_list(self):\n        self.browser.get(self.path1)\n        self.browser.wait_until_not('.loading-indicator')\n        self.browser.snapshot('project settings - tags')\n        self.browser.wait_until('.ref-tag-row')\n        self.browser.click('.ref-tag-row .btn')\n        self.browser.wait_until('.modal-footer .button-primary')\n        self.browser.click('.modal-footer .button-primary')\n        self.browser.wait_until_not('.ref-tag-row')\n        self.browser.snapshot('project settings - tags - after remove')\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_project_tags_settings.py", "id": "18f68b37acc27740450f4088ff319aa1", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/acceptance/test_project_tags_settings.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}