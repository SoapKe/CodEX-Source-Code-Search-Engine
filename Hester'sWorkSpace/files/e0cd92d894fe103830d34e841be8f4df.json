{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport mock\n\nfrom django.core.urlresolvers import reverse\nfrom exam import fixture\nfrom mock import Mock\n\nfrom sentry.models import ProjectKey\nfrom sentry.signals import event_accepted, event_dropped, event_filtered\nfrom sentry.testutils import (assert_mock_called_once_with_partial, TestCase)\nfrom sentry.utils import json\nfrom sentry.utils.data_filters import FilterTypes\n\n\nclass SecurityReportCspTest(TestCase):\n    @fixture\n    def path(self):\n        path = reverse('sentry-api-security-report', kwargs={'project_id': self.project.id})\n        return path + '?sentry_key=%s' % self.projectkey.public_key\n\n    def test_get_response(self):\n        resp = self.client.get(self.path)\n        assert resp.status_code == 405, resp.content\n\n    def test_invalid_content_type(self):\n        resp = self.client.post(self.path, content_type='text/plain')\n        assert resp.status_code == 400, resp.content\n\n    def test_missing_csp_report(self):\n        resp = self.client.post(\n            self.path,\n            content_type='application/csp-report',\n            data='{\"lol\":1}',\n            HTTP_USER_AGENT='awesome',\n        )\n        assert resp.status_code == 400, resp.content\n\n    @mock.patch('sentry.utils.http.get_origins')\n    def test_bad_origin(self, get_origins):\n        get_origins.return_value = ['example.com']\n        resp = self.client.post(\n            self.path,\n            content_type='application/csp-report',\n            data='{\"csp-report\":{\"document-uri\":\"http://lolnope.com\",\"effective-directive\":\"img-src\",\"violated-directive\":\"img-src\",\"source-file\":\"test.html\"}}',\n            HTTP_USER_AGENT='awesome',\n        )\n        assert resp.status_code == 403, resp.content\n\n        get_origins.return_value = ['*']\n        resp = self.client.post(\n            self.path,\n            content_type='application/csp-report',\n            data='{\"csp-report\":{\"document-uri\":\"about:blank\"}}',\n            HTTP_USER_AGENT='awesome',\n        )\n        assert resp.status_code == 400, resp.content\n\n    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=True))\n    @mock.patch('sentry.web.api.SecurityReportView.process')\n    def test_post_success(self, process):\n        process.return_value = 'ok'\n        resp = self._postCspWithHeader(\n            {\n                'document-uri': 'http://example.com',\n                'source-file': 'http://example.com',\n                'effective-directive': 'style-src',\n                'violated-directive': 'style-src',\n                'disposition': 'enforce',\n            }\n        )\n        assert resp.status_code == 201, resp.content\n\n\nclass SecurityReportExpectCTTest(TestCase):\n    @fixture\n    def path(self):\n        path = reverse('sentry-api-security-report', kwargs={'project_id': self.project.id})\n        return path + '?sentry_key=%s' % self.projectkey.public_key\n\n    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=True))\n    @mock.patch('sentry.web.api.SecurityReportView.process')\n    def test_post_success(self, process):\n        process.return_value = 'ok'\n        resp = self.client.post(\n            self.path,\n            content_type='application/expect-ct-report+json',\n            data=json.dumps({\n                \"expect-ct-report\": {\n                    \"date-time\": \"2014-04-06T13:00:50Z\",\n                    \"hostname\": \"www.example.com\",\n                    \"port\": 443,\n                    \"effective-expiration-date\": \"2014-05-01T12:40:50Z\",\n                    \"served-certificate-chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n                    \"validated-certificate-chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n                    \"scts\": [\n                        {\n                            \"version\": 1,\n                            \"status\": \"invalid\",\n                            \"source\": \"embedded\",\n                            \"serialized_sct\": \"ABCD==\"\n                        },\n                    ],\n                }\n            }),\n            HTTP_USER_AGENT='awesome',\n        )\n        assert resp.status_code == 201, resp.content\n\n\nclass SecurityReportExpectStapleTest(TestCase):\n    @fixture\n    def path(self):\n        path = reverse('sentry-api-security-report', kwargs={'project_id': self.project.id})\n        return path + '?sentry_key=%s' % self.projectkey.public_key\n\n    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=True))\n    @mock.patch('sentry.web.api.SecurityReportView.process')\n    def test_post_success(self, process):\n        process.return_value = 'ok'\n        resp = self.client.post(\n            self.path,\n            content_type='application/expect-staple-report',\n            data=json.dumps({\n                \"expect-staple-report\": {\n                    \"date-time\": \"2014-04-06T13:00:50Z\",\n                    \"hostname\": \"www.example.com\",\n                    \"port\": 443,\n                    \"response-status\": \"ERROR_RESPONSE\",\n                    \"cert-status\": \"REVOKED\",\n                    \"effective-expiration-date\": \"2014-05-01T12:40:50Z\",\n                    \"served-certificate-chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n                    \"validated-certificate-chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n                }\n            }),\n            HTTP_USER_AGENT='awesome',\n        )\n        assert resp.status_code == 201, resp.content\n\n\nclass StoreViewTest(TestCase):\n    @fixture\n    def path(self):\n        return reverse('sentry-api-store', kwargs={'project_id': self.project.id})\n\n    @mock.patch('sentry.web.api.StoreView._parse_header')\n    def test_options_response(self, parse_header):\n        project = self.create_project()\n        pk = ProjectKey.objects.get_or_create(project=project)[0]\n        parse_header.return_value = {\n            'sentry_project': project.id,\n            'sentry_key': pk.public_key,\n            'sentry_version': '2.0',\n        }\n        resp = self.client.options(self.path)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n        self.assertIn('Allow', resp)\n        self.assertEquals(resp['Allow'], 'GET, POST, HEAD, OPTIONS')\n        self.assertIn('Content-Length', resp)\n        self.assertEquals(resp['Content-Length'], '0')\n\n    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=False))\n    def test_options_response_with_invalid_origin(self):\n        resp = self.client.options(self.path, HTTP_ORIGIN='http://foo.com')\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n        self.assertIn('Access-Control-Allow-Origin', resp)\n        self.assertEquals(resp['Access-Control-Allow-Origin'], '*')\n        self.assertIn('X-Sentry-Error', resp)\n        assert resp['X-Sentry-Error'] == \"Invalid origin: http://foo.com\"\n        assert json.loads(resp.content)['error'] == resp['X-Sentry-Error']\n\n    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=False))\n    def test_options_response_with_invalid_referrer(self):\n        resp = self.client.options(self.path, HTTP_REFERER='http://foo.com')\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n        self.assertIn('Access-Control-Allow-Origin', resp)\n        self.assertEquals(resp['Access-Control-Allow-Origin'], '*')\n        self.assertIn('X-Sentry-Error', resp)\n        assert resp['X-Sentry-Error'] == \"Invalid origin: http://foo.com\"\n        assert json.loads(resp.content)['error'] == resp['X-Sentry-Error']\n\n    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=True))\n    def test_options_response_with_valid_origin(self):\n        resp = self.client.options(self.path, HTTP_ORIGIN='http://foo.com')\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n        self.assertIn('Access-Control-Allow-Origin', resp)\n        self.assertEquals(resp['Access-Control-Allow-Origin'], 'http://foo.com')\n\n    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=True))\n    def test_options_response_with_valid_referrer(self):\n        resp = self.client.options(self.path, HTTP_REFERER='http://foo.com')\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n        self.assertIn('Access-Control-Allow-Origin', resp)\n        self.assertEquals(resp['Access-Control-Allow-Origin'], 'http://foo.com')\n\n    @mock.patch('sentry.coreapi.is_valid_ip', mock.Mock(return_value=False))\n    def test_request_with_blacklisted_ip(self):\n        resp = self._postWithHeader({})\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    @mock.patch('sentry.coreapi.is_valid_release', mock.Mock(return_value=False))\n    def test_request_with_filtered_release(self):\n        body = {\n            \"release\": \"abcdefg\",\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    @mock.patch('sentry.coreapi.is_valid_error_message', mock.Mock(return_value=False))\n    def test_request_with_filtered_error(self):\n        body = {\n            \"release\": \"abcdefg\",\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    def test_request_with_invalid_ip(self):\n        self.project.update_option('sentry:blacklisted_ips', ['127.0.0.1'])\n        body = {\n            \"release\": \"abcdefg\",\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    def test_request_with_invalid_release(self):\n        self.project.update_option('sentry:{}'.format(FilterTypes.RELEASES), ['1.3.2'])\n        body = {\n            \"release\": \"1.3.2\",\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    def test_request_with_short_release_globbing(self):\n        self.project.update_option('sentry:{}'.format(FilterTypes.RELEASES), ['1.*'])\n        body = {\n            \"release\": \"1.3.2\",\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    def test_request_with_longer_release_globbing(self):\n        self.project.update_option('sentry:{}'.format(FilterTypes.RELEASES), ['2.1.*'])\n        body = {\n            \"release\": \"2.1.3\",\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    def test_request_with_invalid_error_messages(self):\n        self.project.update_option(\n            'sentry:{}'.format(FilterTypes.ERROR_MESSAGES), ['ZeroDivisionError*']\n        )\n        body = {\n            \"release\": \"abcdefg\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n            \"sentry.interfaces.Message\": {\n                \"formatted\": \"ZeroDivisionError: integer division or modulo by zero\",\n                \"message\": \"%s: integer division or modulo by zero\",\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    def test_request_with_beggining_glob(self):\n        self.project.update_option(\n            'sentry:{}'.format(FilterTypes.ERROR_MESSAGES),\n            ['*: integer division or modulo by zero']\n        )\n        body = {\n            \"release\": \"abcdefg\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n            \"sentry.interfaces.Message\": {\n                \"message\": \"ZeroDivisionError: integer division or modulo by zero\",\n                \"formatted\": \"\",\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_scrubs_ip_address(self, mock_insert_data_to_database):\n        self.project.update_option('sentry:scrub_ip_address', True)\n        body = {\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert not call_data['sentry.interfaces.User'].get('ip_address')\n        assert not call_data['sentry.interfaces.Http']['env'].get('REMOTE_ADDR')\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_scrubs_org_ip_address_override(self, mock_insert_data_to_database):\n        self.organization.update_option('sentry:require_scrub_ip_address', True)\n        self.project.update_option('sentry:scrub_ip_address', False)\n        body = {\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert not call_data['sentry.interfaces.User'].get('ip_address')\n        assert not call_data['sentry.interfaces.Http']['env'].get('REMOTE_ADDR')\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_scrub_data_off(self, mock_insert_data_to_database):\n        self.project.update_option('sentry:scrub_data', False)\n        self.project.update_option('sentry:scrub_defaults', False)\n        body = {\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"data\": \"password=lol&foo=1&bar=2&baz=3\"\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert call_data['sentry.interfaces.Http']['data'] == {\n            'password': ['lol'],\n            'foo': ['1'],\n            'bar': ['2'],\n            'baz': ['3']\n        }\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_scrub_data_on(self, mock_insert_data_to_database):\n        self.project.update_option('sentry:scrub_data', True)\n        self.project.update_option('sentry:scrub_defaults', False)\n        body = {\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"data\": \"password=lol&foo=1&bar=2&baz=3\"\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert call_data['sentry.interfaces.Http']['data'] == {\n            'password': ['lol'],\n            'foo': ['1'],\n            'bar': ['2'],\n            'baz': ['3']\n        }\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_scrub_data_defaults(self, mock_insert_data_to_database):\n        self.project.update_option('sentry:scrub_data', True)\n        self.project.update_option('sentry:scrub_defaults', True)\n        body = {\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"data\": \"password=lol&foo=1&bar=2&baz=3\"\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert call_data['sentry.interfaces.Http']['data'] == {\n            'password': ['[Filtered]'],\n            'foo': ['1'],\n            'bar': ['2'],\n            'baz': ['3']\n        }\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_scrub_data_sensitive_fields(self, mock_insert_data_to_database):\n        self.project.update_option('sentry:scrub_data', True)\n        self.project.update_option('sentry:scrub_defaults', True)\n        self.project.update_option('sentry:sensitive_fields', ['foo', 'bar'])\n        body = {\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"data\": \"password=lol&foo=1&bar=2&baz=3\"\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert call_data['sentry.interfaces.Http']['data'] == {\n            'password': ['[Filtered]'],\n            'foo': ['[Filtered]'],\n            'bar': ['[Filtered]'],\n            'baz': ['3']\n        }\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_scrub_data_org_override(self, mock_insert_data_to_database):\n        self.organization.update_option('sentry:require_scrub_data', True)\n        self.project.update_option('sentry:scrub_data', False)\n        self.organization.update_option('sentry:require_scrub_defaults', True)\n        self.project.update_option('sentry:scrub_defaults', False)\n        body = {\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"data\": \"password=lol&foo=1&bar=2&baz=3\"\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert call_data['sentry.interfaces.Http']['data'] == {\n            'password': ['[Filtered]'],\n            'foo': ['1'],\n            'bar': ['2'],\n            'baz': ['3']\n        }\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_scrub_data_org_override_sensitive_fields(self, mock_insert_data_to_database):\n        self.organization.update_option('sentry:require_scrub_data', True)\n        self.organization.update_option('sentry:require_scrub_defaults', True)\n        self.organization.update_option('sentry:sensitive_fields', ['baz'])\n        self.project.update_option('sentry:sensitive_fields', ['foo', 'bar'])\n        body = {\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"data\": \"password=lol&foo=1&bar=2&baz=3\"\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert call_data['sentry.interfaces.Http']['data'] == {\n            'password': ['[Filtered]'],\n            'foo': ['[Filtered]'],\n            'bar': ['[Filtered]'],\n            'baz': ['[Filtered]']\n        }\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_uses_client_as_sdk(self, mock_insert_data_to_database):\n        body = {\n            \"message\": \"foo bar\",\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert call_data['sdk'] == {\n            'name': '_postWithHeader',\n            'version': '0.0.0',\n            'client_ip': '127.0.0.1',\n        }\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database', Mock())\n    def test_accepted_signal(self):\n        mock_event_accepted = Mock()\n\n        event_accepted.connect(mock_event_accepted)\n\n        resp = self._postWithHeader({'sentry.interfaces.Message': {'message': u'hello'}})\n\n        assert resp.status_code == 200, resp.content\n\n        assert_mock_called_once_with_partial(\n            mock_event_accepted,\n            ip='127.0.0.1',\n            project=self.project,\n            signal=event_accepted,\n        )\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database', Mock())\n    @mock.patch('sentry.app.quotas.is_rate_limited')\n    def test_dropped_signal(self, mock_is_rate_limited):\n        mock_is_rate_limited.is_limited = True\n\n        mock_event_dropped = Mock()\n\n        event_dropped.connect(mock_event_dropped)\n\n        resp = self._postWithHeader({'sentry.interfaces.Message': {'message': u'hello'}})\n\n        assert resp.status_code == 429, resp.content\n\n        assert_mock_called_once_with_partial(\n            mock_event_dropped,\n            ip='127.0.0.1',\n            project=self.project,\n            signal=event_dropped,\n        )\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database', Mock())\n    @mock.patch('sentry.coreapi.ClientApiHelper.should_filter')\n    def test_filtered_signal(self, mock_should_filter):\n        mock_should_filter.return_value = (True, 'ip-address')\n\n        mock_event_filtered = Mock()\n\n        event_filtered.connect(mock_event_filtered)\n\n        resp = self._postWithHeader({'sentry.interfaces.Message': {'message': u'hello'}})\n\n        assert resp.status_code == 403, resp.content\n\n        assert_mock_called_once_with_partial(\n            mock_event_filtered,\n            ip='127.0.0.1',\n            project=self.project,\n            signal=event_filtered,\n        )\n\n\nclass CrossDomainXmlTest(TestCase):\n    @fixture\n    def path(self):\n        return reverse('sentry-api-crossdomain-xml', kwargs={'project_id': self.project.id})\n\n    @mock.patch('sentry.web.api.get_origins')\n    def test_output_with_global(self, get_origins):\n        get_origins.return_value = '*'\n        resp = self.client.get(self.path)\n        get_origins.assert_called_once_with(self.project)\n        assert resp.status_code == 200, resp.content\n        self.assertEquals(resp['Content-Type'], 'application/xml')\n        self.assertTemplateUsed(resp, 'sentry/crossdomain.xml')\n        assert '<allow-access-from domain=\"*\" secure=\"false\" />' in resp.content.decode('utf-8')\n\n    @mock.patch('sentry.web.api.get_origins')\n    def test_output_with_whitelist(self, get_origins):\n        get_origins.return_value = ['disqus.com', 'www.disqus.com']\n        resp = self.client.get(self.path)\n        get_origins.assert_called_once_with(self.project)\n        self.assertEquals(resp.status_code, 200)\n        self.assertEquals(resp['Content-Type'], 'application/xml')\n        self.assertTemplateUsed(resp, 'sentry/crossdomain.xml')\n        assert '<allow-access-from domain=\"disqus.com\" secure=\"false\" />' in resp.content.decode(\n            'utf-8'\n        )\n        assert '<allow-access-from domain=\"www.disqus.com\" secure=\"false\" />' in resp.content.decode(\n            'utf-8'\n        )\n\n    @mock.patch('sentry.web.api.get_origins')\n    def test_output_with_no_origins(self, get_origins):\n        get_origins.return_value = []\n        resp = self.client.get(self.path)\n        get_origins.assert_called_once_with(self.project)\n        self.assertEquals(resp.status_code, 200)\n        self.assertEquals(resp['Content-Type'], 'application/xml')\n        self.assertTemplateUsed(resp, 'sentry/crossdomain.xml')\n        assert '<allow-access-from' not in resp.content.decode('utf-8')\n\n    def test_output_allows_x_sentry_auth(self):\n        resp = self.client.get(self.path)\n        self.assertEquals(resp.status_code, 200)\n        self.assertEquals(resp['Content-Type'], 'application/xml')\n        self.assertTemplateUsed(resp, 'sentry/crossdomain.xml')\n        assert '<allow-http-request-headers-from domain=\"*\" headers=\"*\" secure=\"false\" />' in resp.content.decode(\n            'utf-8'\n        )\n\n\nclass CrossDomainXmlIndexTest(TestCase):\n    @fixture\n    def path(self):\n        return reverse('sentry-api-crossdomain-xml-index')\n\n    def test_permits_policies(self):\n        resp = self.client.get(self.path)\n        self.assertEquals(resp.status_code, 200)\n        self.assertEquals(resp['Content-Type'], 'application/xml')\n        self.assertTemplateUsed(resp, 'sentry/crossdomain_index.xml')\n        assert '<site-control permitted-cross-domain-policies=\"all\" />' in resp.content.decode(\n            'utf-8'\n        )\n\n\nclass RobotsTxtTest(TestCase):\n    @fixture\n    def path(self):\n        return reverse('sentry-api-robots-txt')\n\n    def test_robots(self):\n        resp = self.client.get(self.path)\n        assert resp.status_code == 200\n        assert resp['Content-Type'] == 'text/plain'\n", "comments": "      coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport mock\n\nfrom django.core.urlresolvers import reverse\nfrom exam import fixture\nfrom mock import Mock\n\nfrom sentry.models import ProjectKey\nfrom sentry.signals import event_accepted, event_dropped, event_filtered\nfrom sentry.testutils import (assert_mock_called_once_with_partial, TestCase)\nfrom sentry.utils import json\nfrom sentry.utils.data_filters import FilterTypes\n\n\nclass SecurityReportCspTest(TestCase):\n    @fixture\n    def path(self):\n        path = reverse('sentry-api-security-report', kwargs={'project_id': self.project.id})\n        return path + '?sentry_key=%s' % self.projectkey.public_key\n\n    def test_get_response(self):\n        resp = self.client.get(self.path)\n        assert resp.status_code == 405, resp.content\n\n    def test_invalid_content_type(self):\n        resp = self.client.post(self.path, content_type='text/plain')\n        assert resp.status_code == 400, resp.content\n\n    def test_missing_csp_report(self):\n        resp = self.client.post(\n            self.path,\n            content_type='application/csp-report',\n            data='{\"lol\":1}',\n            HTTP_USER_AGENT='awesome',\n        )\n        assert resp.status_code == 400, resp.content\n\n    @mock.patch('sentry.utils.http.get_origins')\n    def test_bad_origin(self, get_origins):\n        get_origins.return_value = ['example.com']\n        resp = self.client.post(\n            self.path,\n            content_type='application/csp-report',\n            data='{\"csp-report\":{\"document-uri\":\"http://lolnope.com\",\"effective-directive\":\"img-src\",\"violated-directive\":\"img-src\",\"source-file\":\"test.html\"}}',\n            HTTP_USER_AGENT='awesome',\n        )\n        assert resp.status_code == 403, resp.content\n\n        get_origins.return_value = ['*']\n        resp = self.client.post(\n            self.path,\n            content_type='application/csp-report',\n            data='{\"csp-report\":{\"document-uri\":\"about:blank\"}}',\n            HTTP_USER_AGENT='awesome',\n        )\n        assert resp.status_code == 400, resp.content\n\n    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=True))\n    @mock.patch('sentry.web.api.SecurityReportView.process')\n    def test_post_success(self, process):\n        process.return_value = 'ok'\n        resp = self._postCspWithHeader(\n            {\n                'document-uri': 'http://example.com',\n                'source-file': 'http://example.com',\n                'effective-directive': 'style-src',\n                'violated-directive': 'style-src',\n                'disposition': 'enforce',\n            }\n        )\n        assert resp.status_code == 201, resp.content\n\n\nclass SecurityReportExpectCTTest(TestCase):\n    @fixture\n    def path(self):\n        path = reverse('sentry-api-security-report', kwargs={'project_id': self.project.id})\n        return path + '?sentry_key=%s' % self.projectkey.public_key\n\n    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=True))\n    @mock.patch('sentry.web.api.SecurityReportView.process')\n    def test_post_success(self, process):\n        process.return_value = 'ok'\n        resp = self.client.post(\n            self.path,\n            content_type='application/expect-ct-report+json',\n            data=json.dumps({\n                \"expect-ct-report\": {\n                    \"date-time\": \"2014-04-06T13:00:50Z\",\n                    \"hostname\": \"www.example.com\",\n                    \"port\": 443,\n                    \"effective-expiration-date\": \"2014-05-01T12:40:50Z\",\n                    \"served-certificate-chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n                    \"validated-certificate-chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n                    \"scts\": [\n                        {\n                            \"version\": 1,\n                            \"status\": \"invalid\",\n                            \"source\": \"embedded\",\n                            \"serialized_sct\": \"ABCD==\"\n                        },\n                    ],\n                }\n            }),\n            HTTP_USER_AGENT='awesome',\n        )\n        assert resp.status_code == 201, resp.content\n\n\nclass SecurityReportExpectStapleTest(TestCase):\n    @fixture\n    def path(self):\n        path = reverse('sentry-api-security-report', kwargs={'project_id': self.project.id})\n        return path + '?sentry_key=%s' % self.projectkey.public_key\n\n    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=True))\n    @mock.patch('sentry.web.api.SecurityReportView.process')\n    def test_post_success(self, process):\n        process.return_value = 'ok'\n        resp = self.client.post(\n            self.path,\n            content_type='application/expect-staple-report',\n            data=json.dumps({\n                \"expect-staple-report\": {\n                    \"date-time\": \"2014-04-06T13:00:50Z\",\n                    \"hostname\": \"www.example.com\",\n                    \"port\": 443,\n                    \"response-status\": \"ERROR_RESPONSE\",\n                    \"cert-status\": \"REVOKED\",\n                    \"effective-expiration-date\": \"2014-05-01T12:40:50Z\",\n                    \"served-certificate-chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n                    \"validated-certificate-chain\": [\"-----BEGIN CERTIFICATE-----\\n-----END CERTIFICATE-----\"],\n                }\n            }),\n            HTTP_USER_AGENT='awesome',\n        )\n        assert resp.status_code == 201, resp.content\n\n\nclass StoreViewTest(TestCase):\n    @fixture\n    def path(self):\n        return reverse('sentry-api-store', kwargs={'project_id': self.project.id})\n\n    @mock.patch('sentry.web.api.StoreView._parse_header')\n    def test_options_response(self, parse_header):\n        project = self.create_project()\n        pk = ProjectKey.objects.get_or_create(project=project)[0]\n        parse_header.return_value = {\n            'sentry_project': project.id,\n            'sentry_key': pk.public_key,\n            'sentry_version': '2.0',\n        }\n        resp = self.client.options(self.path)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n        self.assertIn('Allow', resp)\n        self.assertEquals(resp['Allow'], 'GET, POST, HEAD, OPTIONS')\n        self.assertIn('Content-Length', resp)\n        self.assertEquals(resp['Content-Length'], '0')\n\n    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=False))\n    def test_options_response_with_invalid_origin(self):\n        resp = self.client.options(self.path, HTTP_ORIGIN='http://foo.com')\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n        self.assertIn('Access-Control-Allow-Origin', resp)\n        self.assertEquals(resp['Access-Control-Allow-Origin'], '*')\n        self.assertIn('X-Sentry-Error', resp)\n        assert resp['X-Sentry-Error'] == \"Invalid origin: http://foo.com\"\n        assert json.loads(resp.content)['error'] == resp['X-Sentry-Error']\n\n    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=False))\n    def test_options_response_with_invalid_referrer(self):\n        resp = self.client.options(self.path, HTTP_REFERER='http://foo.com')\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n        self.assertIn('Access-Control-Allow-Origin', resp)\n        self.assertEquals(resp['Access-Control-Allow-Origin'], '*')\n        self.assertIn('X-Sentry-Error', resp)\n        assert resp['X-Sentry-Error'] == \"Invalid origin: http://foo.com\"\n        assert json.loads(resp.content)['error'] == resp['X-Sentry-Error']\n\n    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=True))\n    def test_options_response_with_valid_origin(self):\n        resp = self.client.options(self.path, HTTP_ORIGIN='http://foo.com')\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n        self.assertIn('Access-Control-Allow-Origin', resp)\n        self.assertEquals(resp['Access-Control-Allow-Origin'], 'http://foo.com')\n\n    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=True))\n    def test_options_response_with_valid_referrer(self):\n        resp = self.client.options(self.path, HTTP_REFERER='http://foo.com')\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n        self.assertIn('Access-Control-Allow-Origin', resp)\n        self.assertEquals(resp['Access-Control-Allow-Origin'], 'http://foo.com')\n\n    @mock.patch('sentry.coreapi.is_valid_ip', mock.Mock(return_value=False))\n    def test_request_with_blacklisted_ip(self):\n        resp = self._postWithHeader({})\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    @mock.patch('sentry.coreapi.is_valid_release', mock.Mock(return_value=False))\n    def test_request_with_filtered_release(self):\n        body = {\n            \"release\": \"abcdefg\",\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    @mock.patch('sentry.coreapi.is_valid_error_message', mock.Mock(return_value=False))\n    def test_request_with_filtered_error(self):\n        body = {\n            \"release\": \"abcdefg\",\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    def test_request_with_invalid_ip(self):\n        self.project.update_option('sentry:blacklisted_ips', ['127.0.0.1'])\n        body = {\n            \"release\": \"abcdefg\",\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    def test_request_with_invalid_release(self):\n        self.project.update_option('sentry:{}'.format(FilterTypes.RELEASES), ['1.3.2'])\n        body = {\n            \"release\": \"1.3.2\",\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    def test_request_with_short_release_globbing(self):\n        self.project.update_option('sentry:{}'.format(FilterTypes.RELEASES), ['1.*'])\n        body = {\n            \"release\": \"1.3.2\",\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    def test_request_with_longer_release_globbing(self):\n        self.project.update_option('sentry:{}'.format(FilterTypes.RELEASES), ['2.1.*'])\n        body = {\n            \"release\": \"2.1.3\",\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    def test_request_with_invalid_error_messages(self):\n        self.project.update_option(\n            'sentry:{}'.format(FilterTypes.ERROR_MESSAGES), ['ZeroDivisionError*']\n        )\n        body = {\n            \"release\": \"abcdefg\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n            \"sentry.interfaces.Message\": {\n                \"formatted\": \"ZeroDivisionError: integer division or modulo by zero\",\n                \"message\": \"%s: integer division or modulo by zero\",\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    def test_request_with_beggining_glob(self):\n        self.project.update_option(\n            'sentry:{}'.format(FilterTypes.ERROR_MESSAGES),\n            ['*: integer division or modulo by zero']\n        )\n        body = {\n            \"release\": \"abcdefg\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n            \"sentry.interfaces.Message\": {\n                \"message\": \"ZeroDivisionError: integer division or modulo by zero\",\n                \"formatted\": \"\",\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 403, (resp.status_code, resp.content)\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_scrubs_ip_address(self, mock_insert_data_to_database):\n        self.project.update_option('sentry:scrub_ip_address', True)\n        body = {\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert not call_data['sentry.interfaces.User'].get('ip_address')\n        assert not call_data['sentry.interfaces.Http']['env'].get('REMOTE_ADDR')\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_scrubs_org_ip_address_override(self, mock_insert_data_to_database):\n        self.organization.update_option('sentry:require_scrub_ip_address', True)\n        self.project.update_option('sentry:scrub_ip_address', False)\n        body = {\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"env\": {\n                    \"REMOTE_ADDR\": \"127.0.0.1\"\n                }\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert not call_data['sentry.interfaces.User'].get('ip_address')\n        assert not call_data['sentry.interfaces.Http']['env'].get('REMOTE_ADDR')\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_scrub_data_off(self, mock_insert_data_to_database):\n        self.project.update_option('sentry:scrub_data', False)\n        self.project.update_option('sentry:scrub_defaults', False)\n        body = {\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"data\": \"password=lol&foo=1&bar=2&baz=3\"\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert call_data['sentry.interfaces.Http']['data'] == {\n            'password': ['lol'],\n            'foo': ['1'],\n            'bar': ['2'],\n            'baz': ['3']\n        }\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_scrub_data_on(self, mock_insert_data_to_database):\n        self.project.update_option('sentry:scrub_data', True)\n        self.project.update_option('sentry:scrub_defaults', False)\n        body = {\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"data\": \"password=lol&foo=1&bar=2&baz=3\"\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert call_data['sentry.interfaces.Http']['data'] == {\n            'password': ['lol'],\n            'foo': ['1'],\n            'bar': ['2'],\n            'baz': ['3']\n        }\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_scrub_data_defaults(self, mock_insert_data_to_database):\n        self.project.update_option('sentry:scrub_data', True)\n        self.project.update_option('sentry:scrub_defaults', True)\n        body = {\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"data\": \"password=lol&foo=1&bar=2&baz=3\"\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert call_data['sentry.interfaces.Http']['data'] == {\n            'password': ['[Filtered]'],\n            'foo': ['1'],\n            'bar': ['2'],\n            'baz': ['3']\n        }\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_scrub_data_sensitive_fields(self, mock_insert_data_to_database):\n        self.project.update_option('sentry:scrub_data', True)\n        self.project.update_option('sentry:scrub_defaults', True)\n        self.project.update_option('sentry:sensitive_fields', ['foo', 'bar'])\n        body = {\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"data\": \"password=lol&foo=1&bar=2&baz=3\"\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert call_data['sentry.interfaces.Http']['data'] == {\n            'password': ['[Filtered]'],\n            'foo': ['[Filtered]'],\n            'bar': ['[Filtered]'],\n            'baz': ['3']\n        }\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_scrub_data_org_override(self, mock_insert_data_to_database):\n        self.organization.update_option('sentry:require_scrub_data', True)\n        self.project.update_option('sentry:scrub_data', False)\n        self.organization.update_option('sentry:require_scrub_defaults', True)\n        self.project.update_option('sentry:scrub_defaults', False)\n        body = {\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"data\": \"password=lol&foo=1&bar=2&baz=3\"\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert call_data['sentry.interfaces.Http']['data'] == {\n            'password': ['[Filtered]'],\n            'foo': ['1'],\n            'bar': ['2'],\n            'baz': ['3']\n        }\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_scrub_data_org_override_sensitive_fields(self, mock_insert_data_to_database):\n        self.organization.update_option('sentry:require_scrub_data', True)\n        self.organization.update_option('sentry:require_scrub_defaults', True)\n        self.organization.update_option('sentry:sensitive_fields', ['baz'])\n        self.project.update_option('sentry:sensitive_fields', ['foo', 'bar'])\n        body = {\n            \"message\": \"foo bar\",\n            \"sentry.interfaces.User\": {\n                \"ip_address\": \"127.0.0.1\"\n            },\n            \"sentry.interfaces.Http\": {\n                \"method\": \"GET\",\n                \"url\": \"http://example.com/\",\n                \"data\": \"password=lol&foo=1&bar=2&baz=3\"\n            },\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert call_data['sentry.interfaces.Http']['data'] == {\n            'password': ['[Filtered]'],\n            'foo': ['[Filtered]'],\n            'bar': ['[Filtered]'],\n            'baz': ['[Filtered]']\n        }\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')\n    def test_uses_client_as_sdk(self, mock_insert_data_to_database):\n        body = {\n            \"message\": \"foo bar\",\n        }\n        resp = self._postWithHeader(body)\n        assert resp.status_code == 200, (resp.status_code, resp.content)\n\n        call_data = mock_insert_data_to_database.call_args[0][0]\n        assert call_data['sdk'] == {\n            'name': '_postWithHeader',\n            'version': '0.0.0',\n            'client_ip': '127.0.0.1',\n        }\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database', Mock())\n    def test_accepted_signal(self):\n        mock_event_accepted = Mock()\n\n        event_accepted.connect(mock_event_accepted)\n\n        resp = self._postWithHeader({'sentry.interfaces.Message': {'message': u'hello'}})\n\n        assert resp.status_code == 200, resp.content\n\n        assert_mock_called_once_with_partial(\n            mock_event_accepted,\n            ip='127.0.0.1',\n            project=self.project,\n            signal=event_accepted,\n        )\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database', Mock())\n    @mock.patch('sentry.app.quotas.is_rate_limited')\n    def test_dropped_signal(self, mock_is_rate_limited):\n        mock_is_rate_limited.is_limited = True\n\n        mock_event_dropped = Mock()\n\n        event_dropped.connect(mock_event_dropped)\n\n        resp = self._postWithHeader({'sentry.interfaces.Message': {'message': u'hello'}})\n\n        assert resp.status_code == 429, resp.content\n\n        assert_mock_called_once_with_partial(\n            mock_event_dropped,\n            ip='127.0.0.1',\n            project=self.project,\n            signal=event_dropped,\n        )\n\n    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database', Mock())\n    @mock.patch('sentry.coreapi.ClientApiHelper.should_filter')\n    def test_filtered_signal(self, mock_should_filter):\n        mock_should_filter.return_value = (True, 'ip-address')\n\n        mock_event_filtered = Mock()\n\n        event_filtered.connect(mock_event_filtered)\n\n        resp = self._postWithHeader({'sentry.interfaces.Message': {'message': u'hello'}})\n\n        assert resp.status_code == 403, resp.content\n\n        assert_mock_called_once_with_partial(\n            mock_event_filtered,\n            ip='127.0.0.1',\n            project=self.project,\n            signal=event_filtered,\n        )\n\n\nclass CrossDomainXmlTest(TestCase):\n    @fixture\n    def path(self):\n        return reverse('sentry-api-crossdomain-xml', kwargs={'project_id': self.project.id})\n\n    @mock.patch('sentry.web.api.get_origins')\n    def test_output_with_global(self, get_origins):\n        get_origins.return_value = '*'\n        resp = self.client.get(self.path)\n        get_origins.assert_called_once_with(self.project)\n        assert resp.status_code == 200, resp.content\n        self.assertEquals(resp['Content-Type'], 'application/xml')\n        self.assertTemplateUsed(resp, 'sentry/crossdomain.xml')\n        assert '<allow-access-from domain=\"*\" secure=\"false\" />' in resp.content.decode('utf-8')\n\n    @mock.patch('sentry.web.api.get_origins')\n    def test_output_with_whitelist(self, get_origins):\n        get_origins.return_value = ['disqus.com', 'www.disqus.com']\n        resp = self.client.get(self.path)\n        get_origins.assert_called_once_with(self.project)\n        self.assertEquals(resp.status_code, 200)\n        self.assertEquals(resp['Content-Type'], 'application/xml')\n        self.assertTemplateUsed(resp, 'sentry/crossdomain.xml')\n        assert '<allow-access-from domain=\"disqus.com\" secure=\"false\" />' in resp.content.decode(\n            'utf-8'\n        )\n        assert '<allow-access-from domain=\"www.disqus.com\" secure=\"false\" />' in resp.content.decode(\n            'utf-8'\n        )\n\n    @mock.patch('sentry.web.api.get_origins')\n    def test_output_with_no_origins(self, get_origins):\n        get_origins.return_value = []\n        resp = self.client.get(self.path)\n        get_origins.assert_called_once_with(self.project)\n        self.assertEquals(resp.status_code, 200)\n        self.assertEquals(resp['Content-Type'], 'application/xml')\n        self.assertTemplateUsed(resp, 'sentry/crossdomain.xml')\n        assert '<allow-access-from' not in resp.content.decode('utf-8')\n\n    def test_output_allows_x_sentry_auth(self):\n        resp = self.client.get(self.path)\n        self.assertEquals(resp.status_code, 200)\n        self.assertEquals(resp['Content-Type'], 'application/xml')\n        self.assertTemplateUsed(resp, 'sentry/crossdomain.xml')\n        assert '<allow-http-request-headers-from domain=\"*\" headers=\"*\" secure=\"false\" />' in resp.content.decode(\n            'utf-8'\n        )\n\n\nclass CrossDomainXmlIndexTest(TestCase):\n    @fixture\n    def path(self):\n        return reverse('sentry-api-crossdomain-xml-index')\n\n    def test_permits_policies(self):\n        resp = self.client.get(self.path)\n        self.assertEquals(resp.status_code, 200)\n        self.assertEquals(resp['Content-Type'], 'application/xml')\n        self.assertTemplateUsed(resp, 'sentry/crossdomain_index.xml')\n        assert '<site-control permitted-cross-domain-policies=\"all\" />' in resp.content.decode(\n            'utf-8'\n        )\n\n\nclass RobotsTxtTest(TestCase):\n    @fixture\n    def path(self):\n        return reverse('sentry-api-robots-txt')\n\n    def test_robots(self):\n        resp = self.client.get(self.path)\n        assert resp.status_code == 200\n        assert resp['Content-Type'] == 'text/plain'\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "tests.py", "id": "e0cd92d894fe103830d34e841be8f4df", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/web/api/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}