{"author": "tgalal", "code": "import unittest\nfrom yowsup.layers.auth.keystream import KeyStream\nclass KeyStreamTest(unittest.TestCase):\n\n    def setUp(self):\n\n        self.password = bytearray(list(map(ord,\"password\")))\n        self.salt     = bytearray(list(map(ord,\"salt\")))\n\n        self.keysTarget = [\n            bytearray(b'>\\xd5\\x8a\\xecB\\xdb\\xc8\\xd4}\\x98\\x9aBa\\x89\\x9fC\\x08\\xdcp\\x8d'),\n            bytearray(b'\\xd3;\\xda:\\x8f\\x94CX\\xe4;\\xbb\\xcc\"W\\x83\\xe0m\\xba\\xe0\\xd1'),\n            bytearray(b'\\x92w{\\xc2\\x04~\\x08;\\x81w\\xb7h3\\xb8\\xc4t\\xbd\\xed\\xf7q'),\n            bytearray(b'.\\xc7\\xe4\\x15\\x1a\\xa0\\xfd\\x98\\xc0\\xea\\xefs{\\r7E\\xa6\\xec\\xd5\\xfb')\n        ]\n\n        self.pbkdbf2_res = bytearray(b'\\xeal\\x01M\\xc7-o\\x8c\\xcd\\x1e\\xd9*\\xce\\x1dA\\xf0\\xd8\\xde\\x89W')\n        self.inputMessage = bytearray([0,0,0,0, ord('t'), ord('a'), ord('r'), ord('e'), ord('k')])\n        self.inputMessageComputedMac = bytearray(b'\\xec\\x82q\\xab\\x9f\\x8d;\\xac\\x83\\xc5X\\xbb\\xb6u\\x1c\\xb0\\xd2\\x82=`')\n        self.inputMessageRC4Ciphered = bytearray(b'\\x00\\x00\\x00\\x00\\xf4&-\\x0c\\xbc')\n\n\n    def test_generateKeys(self):\n        keys = KeyStream.generateKeys(self.password, self.salt)\n        self.assertEqual(keys, self.keysTarget)\n\n    def test_pbkdf2(self):\n        result = KeyStream.pbkdf2(self.password, self.salt, 2, 20)\n        result = bytearray(result)\n        self.assertEqual(result, self.pbkdbf2_res)\n    \n    def test_computemac(self):\n        keys = self.keysTarget\n        kstream = KeyStream(keys[2], keys[3])\n        res = kstream.computeMac(self.inputMessage, 4, len(self.inputMessage) - 4)\n        self.assertEqual(res, self.inputMessageComputedMac)\n\n    def test_rc4(self):\n        keys = self.keysTarget\n        kstream = KeyStream(keys[2], keys[3])\n        kstream.rc4.cipher(self.inputMessage, 4, len(self.inputMessage) - 4)\n        self.assertEqual(self.inputMessage, self.inputMessageRC4Ciphered)\n\n    def test_encodeMessage(self):\n        keys = self.keysTarget\n        kstream = KeyStream(keys[2], keys[3])\n        encoded = kstream.encodeMessage(self.inputMessage, 0, 4, len(self.inputMessage) - 4)\n\n    def test_manyEncode(self):\n        keys = self.keysTarget\n        kstream = KeyStream(keys[2], keys[3])\n        for i in range(0, 300):\n            encoded = kstream.encodeMessage(self.inputMessage, 0, 4, len(self.inputMessage) - 4)", "comments": "", "content": "import unittest\nfrom yowsup.layers.auth.keystream import KeyStream\nclass KeyStreamTest(unittest.TestCase):\n\n    def setUp(self):\n\n        self.password = bytearray(list(map(ord,\"password\")))\n        self.salt     = bytearray(list(map(ord,\"salt\")))\n\n        self.keysTarget = [\n            bytearray(b'>\\xd5\\x8a\\xecB\\xdb\\xc8\\xd4}\\x98\\x9aBa\\x89\\x9fC\\x08\\xdcp\\x8d'),\n            bytearray(b'\\xd3;\\xda:\\x8f\\x94CX\\xe4;\\xbb\\xcc\"W\\x83\\xe0m\\xba\\xe0\\xd1'),\n            bytearray(b'\\x92w{\\xc2\\x04~\\x08;\\x81w\\xb7h3\\xb8\\xc4t\\xbd\\xed\\xf7q'),\n            bytearray(b'.\\xc7\\xe4\\x15\\x1a\\xa0\\xfd\\x98\\xc0\\xea\\xefs{\\r7E\\xa6\\xec\\xd5\\xfb')\n        ]\n\n        self.pbkdbf2_res = bytearray(b'\\xeal\\x01M\\xc7-o\\x8c\\xcd\\x1e\\xd9*\\xce\\x1dA\\xf0\\xd8\\xde\\x89W')\n        self.inputMessage = bytearray([0,0,0,0, ord('t'), ord('a'), ord('r'), ord('e'), ord('k')])\n        self.inputMessageComputedMac = bytearray(b'\\xec\\x82q\\xab\\x9f\\x8d;\\xac\\x83\\xc5X\\xbb\\xb6u\\x1c\\xb0\\xd2\\x82=`')\n        self.inputMessageRC4Ciphered = bytearray(b'\\x00\\x00\\x00\\x00\\xf4&-\\x0c\\xbc')\n\n\n    def test_generateKeys(self):\n        keys = KeyStream.generateKeys(self.password, self.salt)\n        self.assertEqual(keys, self.keysTarget)\n\n    def test_pbkdf2(self):\n        result = KeyStream.pbkdf2(self.password, self.salt, 2, 20)\n        result = bytearray(result)\n        self.assertEqual(result, self.pbkdbf2_res)\n    \n    def test_computemac(self):\n        keys = self.keysTarget\n        kstream = KeyStream(keys[2], keys[3])\n        res = kstream.computeMac(self.inputMessage, 4, len(self.inputMessage) - 4)\n        self.assertEqual(res, self.inputMessageComputedMac)\n\n    def test_rc4(self):\n        keys = self.keysTarget\n        kstream = KeyStream(keys[2], keys[3])\n        kstream.rc4.cipher(self.inputMessage, 4, len(self.inputMessage) - 4)\n        self.assertEqual(self.inputMessage, self.inputMessageRC4Ciphered)\n\n    def test_encodeMessage(self):\n        keys = self.keysTarget\n        kstream = KeyStream(keys[2], keys[3])\n        encoded = kstream.encodeMessage(self.inputMessage, 0, 4, len(self.inputMessage) - 4)\n\n    def test_manyEncode(self):\n        keys = self.keysTarget\n        kstream = KeyStream(keys[2], keys[3])\n        for i in range(0, 300):\n            encoded = kstream.encodeMessage(self.inputMessage, 0, 4, len(self.inputMessage) - 4)", "description": "The python WhatsApp library", "file_name": "test_keystream.py", "id": "78a3eee51bd61579e784bce8a93818c2", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/auth/test_keystream.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}