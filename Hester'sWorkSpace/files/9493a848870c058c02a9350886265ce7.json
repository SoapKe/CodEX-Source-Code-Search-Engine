{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\n\n\nclass URPlayIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?ur(?:play|skola)\\.se/(?:program|Produkter)/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://urplay.se/program/190031-tripp-trapp-trad-sovkudde',\n        'md5': 'ad5f0de86f16ca4c8062cd103959a9eb',\n        'info_dict': {\n            'id': '190031',\n            'ext': 'mp4',\n            'title': 'Tripp, Trapp, Tr\u00e4d : Sovkudde',\n            'description': 'md5:b86bffdae04a7e9379d1d7e5947df1d1',\n        },\n    }, {\n        'url': 'http://urskola.se/Produkter/155794-Smasagor-meankieli-Grodan-i-vida-varlden',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n        urplayer_data = self._parse_json(self._search_regex(\n            r'urPlayer\\.init\\(({.+?})\\);', webpage, 'urplayer data'), video_id)\n        host = self._download_json('http://streaming-loadbalancer.ur.se/loadbalancer.json', video_id)['redirect']\n\n        formats = []\n        for quality_attr, quality, preference in (('', 'sd', 0), ('_hd', 'hd', 1)):\n            file_http = urplayer_data.get('file_http' + quality_attr) or urplayer_data.get('file_http_sub' + quality_attr)\n            if file_http:\n                formats.extend(self._extract_wowza_formats(\n                    'http://%s/%splaylist.m3u8' % (host, file_http), video_id, skip_protocols=['rtmp', 'rtsp']))\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for subtitle in urplayer_data.get('subtitles', []):\n            subtitle_url = subtitle.get('file')\n            kind = subtitle.get('kind')\n            if not subtitle_url or (kind and kind != 'captions'):\n                continue\n            subtitles.setdefault(subtitle.get('label', 'Svenska'), []).append({\n                'url': subtitle_url,\n            })\n\n        return {\n            'id': video_id,\n            'title': urplayer_data['title'],\n            'description': self._og_search_description(webpage),\n            'thumbnail': urplayer_data.get('image'),\n            'series': urplayer_data.get('series_title'),\n            'subtitles': subtitles,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\n\n\nclass URPlayIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?ur(?:play|skola)\\.se/(?:program|Produkter)/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://urplay.se/program/190031-tripp-trapp-trad-sovkudde',\n        'md5': 'ad5f0de86f16ca4c8062cd103959a9eb',\n        'info_dict': {\n            'id': '190031',\n            'ext': 'mp4',\n            'title': 'Tripp, Trapp, Tr\u00e4d : Sovkudde',\n            'description': 'md5:b86bffdae04a7e9379d1d7e5947df1d1',\n        },\n    }, {\n        'url': 'http://urskola.se/Produkter/155794-Smasagor-meankieli-Grodan-i-vida-varlden',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n        urplayer_data = self._parse_json(self._search_regex(\n            r'urPlayer\\.init\\(({.+?})\\);', webpage, 'urplayer data'), video_id)\n        host = self._download_json('http://streaming-loadbalancer.ur.se/loadbalancer.json', video_id)['redirect']\n\n        formats = []\n        for quality_attr, quality, preference in (('', 'sd', 0), ('_hd', 'hd', 1)):\n            file_http = urplayer_data.get('file_http' + quality_attr) or urplayer_data.get('file_http_sub' + quality_attr)\n            if file_http:\n                formats.extend(self._extract_wowza_formats(\n                    'http://%s/%splaylist.m3u8' % (host, file_http), video_id, skip_protocols=['rtmp', 'rtsp']))\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for subtitle in urplayer_data.get('subtitles', []):\n            subtitle_url = subtitle.get('file')\n            kind = subtitle.get('kind')\n            if not subtitle_url or (kind and kind != 'captions'):\n                continue\n            subtitles.setdefault(subtitle.get('label', 'Svenska'), []).append({\n                'url': subtitle_url,\n            })\n\n        return {\n            'id': video_id,\n            'title': urplayer_data['title'],\n            'description': self._og_search_description(webpage),\n            'thumbnail': urplayer_data.get('image'),\n            'series': urplayer_data.get('series_title'),\n            'subtitles': subtitles,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "urplay.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/urplay.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}