{"author": "tensorflow", "code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport pprint\nimport copy\nimport os\nfrom tensorflow.python.platform import app\nfrom tensorflow.python.platform import flags\nimport logging\nimport src.utils as utils\nimport cfgs.config_common as cc\n\n\nimport tensorflow as tf\n\nrgb_resnet_v2_50_path = 'cache/resnet_v2_50_inception_preprocessed/model.ckpt-5136169'\n\ndef get_default_args():\n  robot = utils.Foo(radius=15, base=10, height=140, sensor_height=120,\n                    camera_elevation_degree=-15)\n\n  camera_param = utils.Foo(width=225, height=225, z_near=0.05, z_far=20.0,\n                           fov=60., modalities=['rgb', 'depth'])\n\n  env = utils.Foo(padding=10, resolution=5, num_point_threshold=2,\n                  valid_min=-10, valid_max=200, n_samples_per_face=200)\n\n  data_augment = utils.Foo(lr_flip=0, delta_angle=1, delta_xy=4, relight=False,\n                           relight_fast=False, structured=False)\n\n  task_params = utils.Foo(num_actions=4, step_size=4, num_steps=0,\n                          batch_size=32, room_seed=0, base_class='Building',\n                          task='mapping', n_ori=6, data_augment=data_augment,\n                          output_transform_to_global_map=False,\n                          output_canonical_map=False,\n                          output_incremental_transform=False,\n                          output_free_space=False, move_type='shortest_path',\n                          toy_problem=0)\n\n  buildinger_args = utils.Foo(building_names=['area1_gates_wingA_floor1_westpart'],\n                              env_class=None, robot=robot, \n                              task_params=task_params, env=env,\n                              camera_param=camera_param)\n\n  solver_args = utils.Foo(seed=0, learning_rate_decay=0.1,\n                          clip_gradient_norm=0, max_steps=120000,\n                          initial_learning_rate=0.001, momentum=0.99,\n                          steps_per_decay=40000, logdir=None, sync=False,\n                          adjust_lr_sync=True, wt_decay=0.0001,\n                          data_loss_wt=1.0, reg_loss_wt=1.0,\n                          num_workers=1, task=0, ps_tasks=0, master='local')\n\n  summary_args = utils.Foo(display_interval=1, test_iters=100)\n\n  control_args = utils.Foo(train=False, test=False,\n                           force_batchnorm_is_training_at_test=False)\n  \n  arch_args = utils.Foo(rgb_encoder='resnet_v2_50', d_encoder='resnet_v2_50')\n\n  return utils.Foo(solver=solver_args,\n                   summary=summary_args, control=control_args, arch=arch_args,\n                   buildinger=buildinger_args)\n\ndef get_vars(config_name):\n  vars = config_name.split('_')\n  if len(vars) == 1: \n    vars.append('noall')\n  if len(vars) == 2: \n    vars.append('4')\n  logging.error('vars: %s', vars)\n  return vars\n\ndef get_args_for_config(config_name):\n  args = get_default_args()\n  config_name, mode = config_name.split('+')\n  vars = get_vars(config_name)\n  \n  logging.info('config_name: %s, mode: %s', config_name, mode)\n  \n  args.buildinger.task_params.n_ori = int(vars[2])\n  args.solver.freeze_conv = True\n  args.solver.pretrained_path = rgb_resnet_v2_50_path\n  args.buildinger.task_params.img_channels = 5\n  args.solver.data_loss_wt = 0.00001\n \n  if vars[0] == 'v0':\n    None\n  else:\n    logging.error('config_name: %s undefined', config_name)\n\n  args.buildinger.task_params.height = args.buildinger.camera_param.height\n  args.buildinger.task_params.width = args.buildinger.camera_param.width\n  args.buildinger.task_params.modalities = args.buildinger.camera_param.modalities\n  \n  if vars[1] == 'all':\n    args = cc.get_args_for_mode_building_all(args, mode)\n  elif vars[1] == 'noall':\n    args = cc.get_args_for_mode_building(args, mode)\n  \n  \n  logging.error('%s', args)\n  return args\n", "comments": "copyright 2016 the tensorflow authors all rights reserved licensed apache license version 2.0 (the \"license\"); may use file except compliance license you may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing software distributed license distributed \"as is\" basis without warranties or conditions of any kind either express implied see license specific language governing permissions limitations license ============================================================================== all data n_ori log arguments", "content": "# Copyright 2016 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\nimport pprint\nimport copy\nimport os\nfrom tensorflow.python.platform import app\nfrom tensorflow.python.platform import flags\nimport logging\nimport src.utils as utils\nimport cfgs.config_common as cc\n\n\nimport tensorflow as tf\n\nrgb_resnet_v2_50_path = 'cache/resnet_v2_50_inception_preprocessed/model.ckpt-5136169'\n\ndef get_default_args():\n  robot = utils.Foo(radius=15, base=10, height=140, sensor_height=120,\n                    camera_elevation_degree=-15)\n\n  camera_param = utils.Foo(width=225, height=225, z_near=0.05, z_far=20.0,\n                           fov=60., modalities=['rgb', 'depth'])\n\n  env = utils.Foo(padding=10, resolution=5, num_point_threshold=2,\n                  valid_min=-10, valid_max=200, n_samples_per_face=200)\n\n  data_augment = utils.Foo(lr_flip=0, delta_angle=1, delta_xy=4, relight=False,\n                           relight_fast=False, structured=False)\n\n  task_params = utils.Foo(num_actions=4, step_size=4, num_steps=0,\n                          batch_size=32, room_seed=0, base_class='Building',\n                          task='mapping', n_ori=6, data_augment=data_augment,\n                          output_transform_to_global_map=False,\n                          output_canonical_map=False,\n                          output_incremental_transform=False,\n                          output_free_space=False, move_type='shortest_path',\n                          toy_problem=0)\n\n  buildinger_args = utils.Foo(building_names=['area1_gates_wingA_floor1_westpart'],\n                              env_class=None, robot=robot, \n                              task_params=task_params, env=env,\n                              camera_param=camera_param)\n\n  solver_args = utils.Foo(seed=0, learning_rate_decay=0.1,\n                          clip_gradient_norm=0, max_steps=120000,\n                          initial_learning_rate=0.001, momentum=0.99,\n                          steps_per_decay=40000, logdir=None, sync=False,\n                          adjust_lr_sync=True, wt_decay=0.0001,\n                          data_loss_wt=1.0, reg_loss_wt=1.0,\n                          num_workers=1, task=0, ps_tasks=0, master='local')\n\n  summary_args = utils.Foo(display_interval=1, test_iters=100)\n\n  control_args = utils.Foo(train=False, test=False,\n                           force_batchnorm_is_training_at_test=False)\n  \n  arch_args = utils.Foo(rgb_encoder='resnet_v2_50', d_encoder='resnet_v2_50')\n\n  return utils.Foo(solver=solver_args,\n                   summary=summary_args, control=control_args, arch=arch_args,\n                   buildinger=buildinger_args)\n\ndef get_vars(config_name):\n  vars = config_name.split('_')\n  if len(vars) == 1: # All data or not.\n    vars.append('noall')\n  if len(vars) == 2: # n_ori\n    vars.append('4')\n  logging.error('vars: %s', vars)\n  return vars\n\ndef get_args_for_config(config_name):\n  args = get_default_args()\n  config_name, mode = config_name.split('+')\n  vars = get_vars(config_name)\n  \n  logging.info('config_name: %s, mode: %s', config_name, mode)\n  \n  args.buildinger.task_params.n_ori = int(vars[2])\n  args.solver.freeze_conv = True\n  args.solver.pretrained_path = rgb_resnet_v2_50_path\n  args.buildinger.task_params.img_channels = 5\n  args.solver.data_loss_wt = 0.00001\n \n  if vars[0] == 'v0':\n    None\n  else:\n    logging.error('config_name: %s undefined', config_name)\n\n  args.buildinger.task_params.height = args.buildinger.camera_param.height\n  args.buildinger.task_params.width = args.buildinger.camera_param.width\n  args.buildinger.task_params.modalities = args.buildinger.camera_param.modalities\n  \n  if vars[1] == 'all':\n    args = cc.get_args_for_mode_building_all(args, mode)\n  elif vars[1] == 'noall':\n    args = cc.get_args_for_mode_building(args, mode)\n  \n  # Log the arguments\n  logging.error('%s', args)\n  return args\n", "description": "Models and examples built with TensorFlow", "file_name": "config_distill.py", "id": "0bd72d790e4dc30b76d47ff320fd948b", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/cognitive_mapping_and_planning/cfgs/config_distill.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}