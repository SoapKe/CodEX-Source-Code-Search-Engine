{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\nfrom .videomore import VideomoreIE\n\n\nclass CarambaTVIE(InfoExtractor):\n    _VALID_URL = r'(?:carambatv:|https?://video1\\.carambatv\\.ru/v/)(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://video1.carambatv.ru/v/191910501',\n        'md5': '2f4a81b7cfd5ab866ee2d7270cb34a2a',\n        'info_dict': {\n            'id': '191910501',\n            'ext': 'mp4',\n            'title': '[BadComedian] - \u0420\u0430\u0437\u0431\u043e\u0440\u043a\u0430 \u0432 \u041c\u0430\u043d\u0438\u043b\u0435 (\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0439 \u043e\u0431\u0437\u043e\u0440)',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 2678.31,\n        },\n    }, {\n        'url': 'carambatv:191910501',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://video1.carambatv.ru/v/%s/videoinfo.js' % video_id,\n            video_id)\n\n        title = video['title']\n\n        base_url = video.get('video') or 'http://video1.carambatv.ru/v/%s/' % video_id\n\n        formats = [{\n            'url': base_url + f['fn'],\n            'height': int_or_none(f.get('height')),\n            'format_id': '%sp' % f['height'] if f.get('height') else None,\n        } for f in video['qualities'] if f.get('fn')]\n        self._sort_formats(formats)\n\n        thumbnail = video.get('splash')\n        duration = float_or_none(try_get(\n            video, lambda x: x['annotations'][0]['end_time'], compat_str))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n        }\n\n\nclass CarambaTVPageIE(InfoExtractor):\n    _VALID_URL = r'https?://carambatv\\.ru/(?:[^/]+/)+(?P<id>[^/?\n    _TEST = {\n        'url': 'http://carambatv.ru/movie/bad-comedian/razborka-v-manile/',\n        'md5': 'a49fb0ec2ad66503eeb46aac237d3c86',\n        'info_dict': {\n            'id': '475222',\n            'ext': 'flv',\n            'title': '[BadComedian] - \u0420\u0430\u0437\u0431\u043e\u0440\u043a\u0430 \u0432 \u041c\u0430\u043d\u0438\u043b\u0435 (\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0439 \u043e\u0431\u0437\u043e\u0440)',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            \n            'duration': int,\n        },\n        'add_ie': [VideomoreIE.ie_key()],\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        videomore_url = VideomoreIE._extract_url(webpage)\n        if videomore_url:\n            title = self._og_search_title(webpage)\n            return {\n                '_type': 'url_transparent',\n                'url': videomore_url,\n                'ie_key': VideomoreIE.ie_key(),\n                'title': title,\n            }\n\n        video_url = self._og_search_property('video:iframe', webpage, default=None)\n\n        if not video_url:\n            video_id = self._search_regex(\n                r'(?:video_id|crmb_vuid)\\s*[:=]\\s*[\"\\']?(\\d+)',\n                webpage, 'video id')\n            video_url = 'carambatv:%s' % video_id\n\n        return self.url_result(video_url, CarambaTVIE.ie_key())\n", "comments": "# coding: utf-8\n#&]+)'\n# duration reported by videomore is incorrect\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\nfrom .videomore import VideomoreIE\n\n\nclass CarambaTVIE(InfoExtractor):\n    _VALID_URL = r'(?:carambatv:|https?://video1\\.carambatv\\.ru/v/)(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://video1.carambatv.ru/v/191910501',\n        'md5': '2f4a81b7cfd5ab866ee2d7270cb34a2a',\n        'info_dict': {\n            'id': '191910501',\n            'ext': 'mp4',\n            'title': '[BadComedian] - \u0420\u0430\u0437\u0431\u043e\u0440\u043a\u0430 \u0432 \u041c\u0430\u043d\u0438\u043b\u0435 (\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0439 \u043e\u0431\u0437\u043e\u0440)',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 2678.31,\n        },\n    }, {\n        'url': 'carambatv:191910501',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://video1.carambatv.ru/v/%s/videoinfo.js' % video_id,\n            video_id)\n\n        title = video['title']\n\n        base_url = video.get('video') or 'http://video1.carambatv.ru/v/%s/' % video_id\n\n        formats = [{\n            'url': base_url + f['fn'],\n            'height': int_or_none(f.get('height')),\n            'format_id': '%sp' % f['height'] if f.get('height') else None,\n        } for f in video['qualities'] if f.get('fn')]\n        self._sort_formats(formats)\n\n        thumbnail = video.get('splash')\n        duration = float_or_none(try_get(\n            video, lambda x: x['annotations'][0]['end_time'], compat_str))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n        }\n\n\nclass CarambaTVPageIE(InfoExtractor):\n    _VALID_URL = r'https?://carambatv\\.ru/(?:[^/]+/)+(?P<id>[^/?#&]+)'\n    _TEST = {\n        'url': 'http://carambatv.ru/movie/bad-comedian/razborka-v-manile/',\n        'md5': 'a49fb0ec2ad66503eeb46aac237d3c86',\n        'info_dict': {\n            'id': '475222',\n            'ext': 'flv',\n            'title': '[BadComedian] - \u0420\u0430\u0437\u0431\u043e\u0440\u043a\u0430 \u0432 \u041c\u0430\u043d\u0438\u043b\u0435 (\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0439 \u043e\u0431\u0437\u043e\u0440)',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            # duration reported by videomore is incorrect\n            'duration': int,\n        },\n        'add_ie': [VideomoreIE.ie_key()],\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        videomore_url = VideomoreIE._extract_url(webpage)\n        if videomore_url:\n            title = self._og_search_title(webpage)\n            return {\n                '_type': 'url_transparent',\n                'url': videomore_url,\n                'ie_key': VideomoreIE.ie_key(),\n                'title': title,\n            }\n\n        video_url = self._og_search_property('video:iframe', webpage, default=None)\n\n        if not video_url:\n            video_id = self._search_regex(\n                r'(?:video_id|crmb_vuid)\\s*[:=]\\s*[\"\\']?(\\d+)',\n                webpage, 'video id')\n            video_url = 'carambatv:%s' % video_id\n\n        return self.url_result(video_url, CarambaTVIE.ie_key())\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "carambatv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/carambatv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}