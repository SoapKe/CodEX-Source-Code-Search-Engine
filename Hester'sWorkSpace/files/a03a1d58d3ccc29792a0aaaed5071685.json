{"author": "ansible", "code": " (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\n\nfrom ansible.errors import AnsibleParserError\nfrom ansible.parsing.dataloader import DataLoader\nfrom ansible.module_utils._text import to_bytes\n\n\nclass DictDataLoader(DataLoader):\n\n    def __init__(self, file_mapping=None):\n        file_mapping = {} if file_mapping is None else file_mapping\n        assert type(file_mapping) == dict\n\n        super(DictDataLoader, self).__init__()\n\n        self._file_mapping = file_mapping\n        self._build_known_directories()\n        self._vault_secrets = None\n\n    def load_from_file(self, path, unsafe=False):\n        if path in self._file_mapping:\n            return self.load(self._file_mapping[path], path)\n        return None\n\n     TODO: the real _get_file_contents returns a bytestring, so we actually convert the\n           unicode/text it's created with to utf-8\n    def _get_file_contents(self, path):\n        if path in self._file_mapping:\n            return (to_bytes(self._file_mapping[path]), False)\n        else:\n            raise AnsibleParserError(\"file not found: %s\" % path)\n\n    def path_exists(self, path):\n        return path in self._file_mapping or path in self._known_directories\n\n    def is_file(self, path):\n        return path in self._file_mapping\n\n    def is_directory(self, path):\n        return path in self._known_directories\n\n    def list_directory(self, path):\n        return [x for x in self._known_directories]\n\n    def is_executable(self, path):\n         FIXME: figure out a way to make paths return true for this\n        return False\n\n    def _add_known_directory(self, directory):\n        if directory not in self._known_directories:\n            self._known_directories.append(directory)\n\n    def _build_known_directories(self):\n        self._known_directories = []\n        for path in self._file_mapping:\n            dirname = os.path.dirname(path)\n            while dirname not in ('/', ''):\n                self._add_known_directory(dirname)\n                dirname = os.path.dirname(dirname)\n\n    def push(self, path, content):\n        rebuild_dirs = False\n        if path not in self._file_mapping:\n            rebuild_dirs = True\n\n        self._file_mapping[path] = content\n\n        if rebuild_dirs:\n            self._build_known_directories()\n\n    def pop(self, path):\n        if path in self._file_mapping:\n            del self._file_mapping[path]\n            self._build_known_directories()\n\n    def clear(self):\n        self._file_mapping = dict()\n        self._known_directories = []\n\n    def get_basedir(self):\n        return os.getcwd()\n\n    def set_vault_secrets(self, vault_secrets):\n        self._vault_secrets = vault_secrets\n", "comments": "  (c) 2012 2014  michael dehaan  michael dehaan gmail com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish    todo  real  get file contents returns bytestring  actually convert          unicode text created utf 8    fixme  figure way make paths return true ", "content": "# (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\n\nfrom ansible.errors import AnsibleParserError\nfrom ansible.parsing.dataloader import DataLoader\nfrom ansible.module_utils._text import to_bytes\n\n\nclass DictDataLoader(DataLoader):\n\n    def __init__(self, file_mapping=None):\n        file_mapping = {} if file_mapping is None else file_mapping\n        assert type(file_mapping) == dict\n\n        super(DictDataLoader, self).__init__()\n\n        self._file_mapping = file_mapping\n        self._build_known_directories()\n        self._vault_secrets = None\n\n    def load_from_file(self, path, unsafe=False):\n        if path in self._file_mapping:\n            return self.load(self._file_mapping[path], path)\n        return None\n\n    # TODO: the real _get_file_contents returns a bytestring, so we actually convert the\n    #       unicode/text it's created with to utf-8\n    def _get_file_contents(self, path):\n        if path in self._file_mapping:\n            return (to_bytes(self._file_mapping[path]), False)\n        else:\n            raise AnsibleParserError(\"file not found: %s\" % path)\n\n    def path_exists(self, path):\n        return path in self._file_mapping or path in self._known_directories\n\n    def is_file(self, path):\n        return path in self._file_mapping\n\n    def is_directory(self, path):\n        return path in self._known_directories\n\n    def list_directory(self, path):\n        return [x for x in self._known_directories]\n\n    def is_executable(self, path):\n        # FIXME: figure out a way to make paths return true for this\n        return False\n\n    def _add_known_directory(self, directory):\n        if directory not in self._known_directories:\n            self._known_directories.append(directory)\n\n    def _build_known_directories(self):\n        self._known_directories = []\n        for path in self._file_mapping:\n            dirname = os.path.dirname(path)\n            while dirname not in ('/', ''):\n                self._add_known_directory(dirname)\n                dirname = os.path.dirname(dirname)\n\n    def push(self, path, content):\n        rebuild_dirs = False\n        if path not in self._file_mapping:\n            rebuild_dirs = True\n\n        self._file_mapping[path] = content\n\n        if rebuild_dirs:\n            self._build_known_directories()\n\n    def pop(self, path):\n        if path in self._file_mapping:\n            del self._file_mapping[path]\n            self._build_known_directories()\n\n    def clear(self):\n        self._file_mapping = dict()\n        self._known_directories = []\n\n    def get_basedir(self):\n        return os.getcwd()\n\n    def set_vault_secrets(self, vault_secrets):\n        self._vault_secrets = vault_secrets\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "loader.py", "id": "a03a1d58d3ccc29792a0aaaed5071685", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/mock/loader.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}