{"author": "getredash", "code": "from unittest import TestCase\n\nfrom jsonschema import ValidationError\n\nfrom redash.utils.configuration import ConfigurationContainer\n\n\nconfiguration_schema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"a\": {\n            \"type\": \"integer\"\n        },\n        \"e\": {\n            \"type\": \"integer\"\n        },\n        \"b\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\"a\"],\n    \"secret\": [\"b\"]\n}\n\n\nclass TestConfigurationToJson(TestCase):\n    def setUp(self):\n        self.config = {'a': 1, 'b': 'test'}\n        self.container = ConfigurationContainer(self.config, configuration_schema)\n\n    def test_returns_plain_dict(self):\n        self.assertDictEqual(self.config, self.container.to_dict())\n\n    def test_raises_exception_when_no_schema_set(self):\n        self.container.set_schema(None)\n        self.assertRaises(RuntimeError, lambda: self.container.to_dict(mask_secrets=True))\n\n    def test_returns_dict_with_masked_secrets(self):\n        d = self.container.to_dict(mask_secrets=True)\n\n        self.assertEqual(d['a'], self.config['a'])\n        self.assertNotEqual(d['b'], self.config['b'])\n\n        self.assertEqual(self.config['b'], self.container['b'])\n\n\nclass TestConfigurationUpdate(TestCase):\n    def setUp(self):\n        self.config = {'a': 1, 'b': 'test'}\n        self.container = ConfigurationContainer(self.config, configuration_schema)\n\n    def test_rejects_invalid_new_config(self):\n        self.assertRaises(ValidationError, lambda: self.container.update({'c': 3}))\n\n    def test_fails_if_no_schema_set(self):\n        self.container.set_schema(None)\n        self.assertRaises(RuntimeError, lambda: self.container.update({'c': 3}))\n\n    def test_ignores_secret_placehodler(self):\n        self.container.update(self.container.to_dict(mask_secrets=True))\n        self.assertEqual(self.container['b'], self.config['b'])\n\n    def test_updates_secret(self):\n        new_config = {'a': 2, 'b': 'new'}\n        self.container.update(new_config)\n        self.assertDictEqual(self.container._config, new_config)\n\n    def test_doesnt_leave_leftovers(self):\n        container = ConfigurationContainer({'a': 1, 'b': 'test', 'e': 3}, configuration_schema)\n        new_config = container.to_dict(mask_secrets=True)\n        new_config.pop('e')\n        container.update(new_config)\n\n        self.assertEqual(container['a'], 1)\n        self.assertEqual('test', container['b'])\n        self.assertNotIn('e', container)\n\n    def test_works_for_schema_without_secret(self):\n        secretless = configuration_schema.copy()\n        secretless.pop('secret')\n        container = ConfigurationContainer({'a': 1, 'b': 'test', 'e': 3}, secretless)\n        container.update({'a': 2})\n        self.assertEqual(container['a'], 2)\n", "comments": "", "content": "from unittest import TestCase\n\nfrom jsonschema import ValidationError\n\nfrom redash.utils.configuration import ConfigurationContainer\n\n\nconfiguration_schema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"a\": {\n            \"type\": \"integer\"\n        },\n        \"e\": {\n            \"type\": \"integer\"\n        },\n        \"b\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\"a\"],\n    \"secret\": [\"b\"]\n}\n\n\nclass TestConfigurationToJson(TestCase):\n    def setUp(self):\n        self.config = {'a': 1, 'b': 'test'}\n        self.container = ConfigurationContainer(self.config, configuration_schema)\n\n    def test_returns_plain_dict(self):\n        self.assertDictEqual(self.config, self.container.to_dict())\n\n    def test_raises_exception_when_no_schema_set(self):\n        self.container.set_schema(None)\n        self.assertRaises(RuntimeError, lambda: self.container.to_dict(mask_secrets=True))\n\n    def test_returns_dict_with_masked_secrets(self):\n        d = self.container.to_dict(mask_secrets=True)\n\n        self.assertEqual(d['a'], self.config['a'])\n        self.assertNotEqual(d['b'], self.config['b'])\n\n        self.assertEqual(self.config['b'], self.container['b'])\n\n\nclass TestConfigurationUpdate(TestCase):\n    def setUp(self):\n        self.config = {'a': 1, 'b': 'test'}\n        self.container = ConfigurationContainer(self.config, configuration_schema)\n\n    def test_rejects_invalid_new_config(self):\n        self.assertRaises(ValidationError, lambda: self.container.update({'c': 3}))\n\n    def test_fails_if_no_schema_set(self):\n        self.container.set_schema(None)\n        self.assertRaises(RuntimeError, lambda: self.container.update({'c': 3}))\n\n    def test_ignores_secret_placehodler(self):\n        self.container.update(self.container.to_dict(mask_secrets=True))\n        self.assertEqual(self.container['b'], self.config['b'])\n\n    def test_updates_secret(self):\n        new_config = {'a': 2, 'b': 'new'}\n        self.container.update(new_config)\n        self.assertDictEqual(self.container._config, new_config)\n\n    def test_doesnt_leave_leftovers(self):\n        container = ConfigurationContainer({'a': 1, 'b': 'test', 'e': 3}, configuration_schema)\n        new_config = container.to_dict(mask_secrets=True)\n        new_config.pop('e')\n        container.update(new_config)\n\n        self.assertEqual(container['a'], 1)\n        self.assertEqual('test', container['b'])\n        self.assertNotIn('e', container)\n\n    def test_works_for_schema_without_secret(self):\n        secretless = configuration_schema.copy()\n        secretless.pop('secret')\n        container = ConfigurationContainer({'a': 1, 'b': 'test', 'e': 3}, secretless)\n        container.update({'a': 2})\n        self.assertEqual(container['a'], 2)\n", "description": "Make Your Company Data Driven. Connect to any data source, easily visualize and share your data.", "file_name": "test_configuration.py", "id": "93324385d63336e239dd83469d9a24e8", "language": "Python", "project_name": "redash", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/getredash-redash/getredash-redash-0410d83/tests/test_configuration.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:54:55Z", "url": "https://github.com/getredash/redash", "wiki": false}