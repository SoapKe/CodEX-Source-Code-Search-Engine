{"author": "donnemartin", "code": "from nose.tools import assert_equal, assert_raises\n\n\nclass TestHashMap(object):\n\n    \n    \n    def test_end_to_end(self):\n        hash_table = HashTable(10)\n\n        print(\"Test: get on an empty hash table index\")\n        assert_raises(KeyError, hash_table.get, 0)\n\n        print(\"Test: set on an empty hash table index\")\n        hash_table.set(0, 'foo')\n        assert_equal(hash_table.get(0), 'foo')\n        hash_table.set(1, 'bar')\n        assert_equal(hash_table.get(1), 'bar')\n\n        print(\"Test: set on a non empty hash table index\")\n        hash_table.set(10, 'foo2')\n        assert_equal(hash_table.get(0), 'foo')\n        assert_equal(hash_table.get(10), 'foo2')\n\n        print(\"Test: set on a key that already exists\")\n        hash_table.set(10, 'foo3')\n        assert_equal(hash_table.get(0), 'foo')\n        assert_equal(hash_table.get(10), 'foo3')\n\n        print(\"Test: remove on a key that already exists\")\n        hash_table.remove(10)\n        assert_equal(hash_table.get(0), 'foo')\n        assert_raises(KeyError, hash_table.get, 10)\n\n        print(\"Test: remove on a key that doesn't exist\")\n        assert_raises(KeyError, hash_table.remove, -1)\n\n        print('Success: test_end_to_end')\n\n\ndef main():\n    test = TestHashMap()\n    test.test_end_to_end()\n\n\nif __name__ == '__main__':\n    main()", "comments": "  todo  it would better unit tests    method addition following end end test ", "content": "from nose.tools import assert_equal, assert_raises\n\n\nclass TestHashMap(object):\n\n    # TODO: It would be better if we had unit tests for each\n    # method in addition to the following end-to-end test\n    def test_end_to_end(self):\n        hash_table = HashTable(10)\n\n        print(\"Test: get on an empty hash table index\")\n        assert_raises(KeyError, hash_table.get, 0)\n\n        print(\"Test: set on an empty hash table index\")\n        hash_table.set(0, 'foo')\n        assert_equal(hash_table.get(0), 'foo')\n        hash_table.set(1, 'bar')\n        assert_equal(hash_table.get(1), 'bar')\n\n        print(\"Test: set on a non empty hash table index\")\n        hash_table.set(10, 'foo2')\n        assert_equal(hash_table.get(0), 'foo')\n        assert_equal(hash_table.get(10), 'foo2')\n\n        print(\"Test: set on a key that already exists\")\n        hash_table.set(10, 'foo3')\n        assert_equal(hash_table.get(0), 'foo')\n        assert_equal(hash_table.get(10), 'foo3')\n\n        print(\"Test: remove on a key that already exists\")\n        hash_table.remove(10)\n        assert_equal(hash_table.get(0), 'foo')\n        assert_raises(KeyError, hash_table.get, 10)\n\n        print(\"Test: remove on a key that doesn't exist\")\n        assert_raises(KeyError, hash_table.remove, -1)\n\n        print('Success: test_end_to_end')\n\n\ndef main():\n    test = TestHashMap()\n    test.test_end_to_end()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_hash_map.py", "id": "5a7ddb2f193fdc76ec10902cdee64483", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/arrays_strings/hash_map/test_hash_map.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}