{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import str_to_int\n\n\nclass NineGagIE(InfoExtractor):\n    IE_NAME = '9gag'\n    _VALID_URL = r'https?://(?:www\\.)?9gag(?:\\.com/tv|\\.tv)/(?:p|embed)/(?P<id>[a-zA-Z0-9]+)(?:/(?P<display_id>[^?\n\n    _TESTS = [{\n        'url': 'http://9gag.com/tv/p/Kk2X5/people-are-awesome-2013-is-absolutely-awesome',\n        'info_dict': {\n            'id': 'kXzwOKyGlSA',\n            'ext': 'mp4',\n            'description': 'This 3-minute video will make you smile and then make you feel untalented and insignificant. Anyway, you should share this awesomeness. (Thanks, Dino!)',\n            'title': '\\\"People Are Awesome 2013\\\" Is Absolutely Awesome',\n            'uploader_id': 'UCdEH6EjDKwtTe-sO2f0_1XA',\n            'uploader': 'CompilationChannel',\n            'upload_date': '20131110',\n            'view_count': int,\n        },\n        'add_ie': ['Youtube'],\n    }, {\n        'url': 'http://9gag.com/tv/p/aKolP3',\n        'info_dict': {\n            'id': 'aKolP3',\n            'ext': 'mp4',\n            'title': 'This Guy Travelled 11 countries In 44 days Just To Make This Amazing Video',\n            'description': \"I just saw more in 1 minute than I've seen in 1 year. This guy's video is epic!!\",\n            'uploader_id': 'rickmereki',\n            'uploader': 'Rick Mereki',\n            'upload_date': '20110803',\n            'view_count': int,\n        },\n        'add_ie': ['Vimeo'],\n    }, {\n        'url': 'http://9gag.com/tv/p/KklwM',\n        'only_matching': True,\n    }, {\n        'url': 'http://9gag.tv/p/Kk2X5',\n        'only_matching': True,\n    }, {\n        'url': 'http://9gag.com/tv/embed/a5Dmvl',\n        'only_matching': True,\n    }]\n\n    _EXTERNAL_VIDEO_PROVIDER = {\n        '1': {\n            'url': '%s',\n            'ie_key': 'Youtube',\n        },\n        '2': {\n            'url': 'http://player.vimeo.com/video/%s',\n            'ie_key': 'Vimeo',\n        },\n        '3': {\n            'url': 'http://instagram.com/p/%s',\n            'ie_key': 'Instagram',\n        },\n        '4': {\n            'url': 'http://vine.co/v/%s',\n            'ie_key': 'Vine',\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        webpage = self._download_webpage(url, display_id)\n\n        post_view = self._parse_json(\n            self._search_regex(\n                r'var\\s+postView\\s*=\\s*new\\s+app\\.PostView\\({\\s*post:\\s*({.+?})\\s*,\\s*posts:\\s*prefetchedCurrentPost',\n                webpage, 'post view'),\n            display_id)\n\n        ie_key = None\n        source_url = post_view.get('sourceUrl')\n        if not source_url:\n            external_video_id = post_view['videoExternalId']\n            external_video_provider = post_view['videoExternalProvider']\n            source_url = self._EXTERNAL_VIDEO_PROVIDER[external_video_provider]['url'] % external_video_id\n            ie_key = self._EXTERNAL_VIDEO_PROVIDER[external_video_provider]['ie_key']\n        title = post_view['title']\n        description = post_view.get('description')\n        view_count = str_to_int(post_view.get('externalView'))\n        thumbnail = post_view.get('thumbnail_700w') or post_view.get('ogImageUrl') or post_view.get('thumbnail_300w')\n\n        return {\n            '_type': 'url_transparent',\n            'url': source_url,\n            'ie_key': ie_key,\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'view_count': view_count,\n            'thumbnail': thumbnail,\n        }\n", "comments": "#/]+))?'\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import str_to_int\n\n\nclass NineGagIE(InfoExtractor):\n    IE_NAME = '9gag'\n    _VALID_URL = r'https?://(?:www\\.)?9gag(?:\\.com/tv|\\.tv)/(?:p|embed)/(?P<id>[a-zA-Z0-9]+)(?:/(?P<display_id>[^?#/]+))?'\n\n    _TESTS = [{\n        'url': 'http://9gag.com/tv/p/Kk2X5/people-are-awesome-2013-is-absolutely-awesome',\n        'info_dict': {\n            'id': 'kXzwOKyGlSA',\n            'ext': 'mp4',\n            'description': 'This 3-minute video will make you smile and then make you feel untalented and insignificant. Anyway, you should share this awesomeness. (Thanks, Dino!)',\n            'title': '\\\"People Are Awesome 2013\\\" Is Absolutely Awesome',\n            'uploader_id': 'UCdEH6EjDKwtTe-sO2f0_1XA',\n            'uploader': 'CompilationChannel',\n            'upload_date': '20131110',\n            'view_count': int,\n        },\n        'add_ie': ['Youtube'],\n    }, {\n        'url': 'http://9gag.com/tv/p/aKolP3',\n        'info_dict': {\n            'id': 'aKolP3',\n            'ext': 'mp4',\n            'title': 'This Guy Travelled 11 countries In 44 days Just To Make This Amazing Video',\n            'description': \"I just saw more in 1 minute than I've seen in 1 year. This guy's video is epic!!\",\n            'uploader_id': 'rickmereki',\n            'uploader': 'Rick Mereki',\n            'upload_date': '20110803',\n            'view_count': int,\n        },\n        'add_ie': ['Vimeo'],\n    }, {\n        'url': 'http://9gag.com/tv/p/KklwM',\n        'only_matching': True,\n    }, {\n        'url': 'http://9gag.tv/p/Kk2X5',\n        'only_matching': True,\n    }, {\n        'url': 'http://9gag.com/tv/embed/a5Dmvl',\n        'only_matching': True,\n    }]\n\n    _EXTERNAL_VIDEO_PROVIDER = {\n        '1': {\n            'url': '%s',\n            'ie_key': 'Youtube',\n        },\n        '2': {\n            'url': 'http://player.vimeo.com/video/%s',\n            'ie_key': 'Vimeo',\n        },\n        '3': {\n            'url': 'http://instagram.com/p/%s',\n            'ie_key': 'Instagram',\n        },\n        '4': {\n            'url': 'http://vine.co/v/%s',\n            'ie_key': 'Vine',\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        webpage = self._download_webpage(url, display_id)\n\n        post_view = self._parse_json(\n            self._search_regex(\n                r'var\\s+postView\\s*=\\s*new\\s+app\\.PostView\\({\\s*post:\\s*({.+?})\\s*,\\s*posts:\\s*prefetchedCurrentPost',\n                webpage, 'post view'),\n            display_id)\n\n        ie_key = None\n        source_url = post_view.get('sourceUrl')\n        if not source_url:\n            external_video_id = post_view['videoExternalId']\n            external_video_provider = post_view['videoExternalProvider']\n            source_url = self._EXTERNAL_VIDEO_PROVIDER[external_video_provider]['url'] % external_video_id\n            ie_key = self._EXTERNAL_VIDEO_PROVIDER[external_video_provider]['ie_key']\n        title = post_view['title']\n        description = post_view.get('description')\n        view_count = str_to_int(post_view.get('externalView'))\n        thumbnail = post_view.get('thumbnail_700w') or post_view.get('ogImageUrl') or post_view.get('thumbnail_300w')\n\n        return {\n            '_type': 'url_transparent',\n            'url': source_url,\n            'ie_key': ie_key,\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'view_count': view_count,\n            'thumbnail': thumbnail,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "ninegag.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/ninegag.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}