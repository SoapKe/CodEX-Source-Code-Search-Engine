{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    NO_DEFAULT,\n    remove_start\n)\n\n\nclass OdaTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?odatv\\.com/(?:mob|vid)_video\\.php\\?.*\\bid=(?P<id>[^&]+)'\n    _TESTS = [{\n        'url': 'http://odatv.com/vid_video.php?id=8E388',\n        'md5': 'dc61d052f205c9bf2da3545691485154',\n        'info_dict': {\n            'id': '8E388',\n            'ext': 'mp4',\n            'title': 'Art\u0131k Davuto\u011flu ile devam edemeyiz'\n        }\n    }, {\n        \n        'url': 'http://odatv.com/mob_video.php?id=8E388',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://odatv.com/mob_video.php?id=8E900',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        no_video = 'NO VIDEO!' in webpage\n\n        video_url = self._search_regex(\n            r'mp4\\s*:\\s*([\"\\'])(?P<url>http.+?)\\1', webpage, 'video url',\n            default=None if no_video else NO_DEFAULT, group='url')\n\n        if no_video:\n            raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': remove_start(self._og_search_title(webpage), 'Video: '),\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }\n", "comments": "# coding: utf-8\n# mobile URL\n# no video\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    NO_DEFAULT,\n    remove_start\n)\n\n\nclass OdaTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?odatv\\.com/(?:mob|vid)_video\\.php\\?.*\\bid=(?P<id>[^&]+)'\n    _TESTS = [{\n        'url': 'http://odatv.com/vid_video.php?id=8E388',\n        'md5': 'dc61d052f205c9bf2da3545691485154',\n        'info_dict': {\n            'id': '8E388',\n            'ext': 'mp4',\n            'title': 'Art\u0131k Davuto\u011flu ile devam edemeyiz'\n        }\n    }, {\n        # mobile URL\n        'url': 'http://odatv.com/mob_video.php?id=8E388',\n        'only_matching': True,\n    }, {\n        # no video\n        'url': 'http://odatv.com/mob_video.php?id=8E900',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        no_video = 'NO VIDEO!' in webpage\n\n        video_url = self._search_regex(\n            r'mp4\\s*:\\s*([\"\\'])(?P<url>http.+?)\\1', webpage, 'video url',\n            default=None if no_video else NO_DEFAULT, group='url')\n\n        if no_video:\n            raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': remove_start(self._og_search_title(webpage), 'Video: '),\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "odatv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/odatv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}