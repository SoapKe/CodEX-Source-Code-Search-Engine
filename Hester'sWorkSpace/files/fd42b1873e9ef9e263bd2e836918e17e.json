{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport random\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_unquote_plus\nfrom ..utils import (\n    int_or_none,\n    float_or_none,\n    timeconvert,\n    update_url_query,\n    xpath_text,\n)\n\n\nclass KUSIIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?kusi\\.com/(?P<path>story/.+|video\\?clipId=(?P<clipId>\\d+))'\n    _TESTS = [{\n        'url': 'http://www.kusi.com/story/32849881/turko-files-refused-to-help-it-aint-right',\n        'md5': '4e76ce8e53660ce9697d06c0ba6fc47d',\n        'info_dict': {\n            'id': '12689020',\n            'ext': 'mp4',\n            'title': \"Turko Files: Refused to Help, It Ain't Right!\",\n            'duration': 223.586,\n            'upload_date': '20160826',\n            'timestamp': 1472233118,\n            'thumbnail': r're:^https?://.*\\.jpg$'\n        },\n    }, {\n        'url': 'http://kusi.com/video?clipId=12203019',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        clip_id = mobj.group('clipId')\n        video_id = clip_id or mobj.group('path')\n\n        webpage = self._download_webpage(url, video_id)\n\n        if clip_id is None:\n            video_id = clip_id = self._html_search_regex(\n                r'\"clipId\"\\s*,\\s*\"(\\d+)\"', webpage, 'clip id')\n\n        affiliate_id = self._search_regex(\n            r'affiliateId\\s*:\\s*\\'([^\\']+)\\'', webpage, 'affiliate id')\n\n        \n        xml_url = update_url_query('http://www.kusi.com/build.asp', {\n            'buildtype': 'buildfeaturexmlrequest',\n            'featureType': 'Clip',\n            'featureid': clip_id,\n            'affiliateno': affiliate_id,\n            'clientgroupid': '1',\n            'rnd': int(round(random.random() * 1000000)),\n        })\n\n        doc = self._download_xml(xml_url, video_id)\n\n        video_title = xpath_text(doc, 'HEADLINE', fatal=True)\n        duration = float_or_none(xpath_text(doc, 'DURATION'), scale=1000)\n        description = xpath_text(doc, 'ABSTRACT')\n        thumbnail = xpath_text(doc, './THUMBNAILIMAGE/FILENAME')\n        createtion_time = timeconvert(xpath_text(doc, 'rfc822creationdate'))\n\n        quality_options = doc.find('{http://search.yahoo.com/mrss/}group').findall('{http://search.yahoo.com/mrss/}content')\n        formats = []\n        for quality in quality_options:\n            formats.append({\n                'url': compat_urllib_parse_unquote_plus(quality.attrib['url']),\n                'height': int_or_none(quality.attrib.get('height')),\n                'width': int_or_none(quality.attrib.get('width')),\n                'vbr': float_or_none(quality.attrib.get('bitratebits'), scale=1000),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video_title,\n            'description': description,\n            'duration': duration,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'timestamp': createtion_time,\n        }\n", "comments": "# coding: utf-8\n# See __Packages/worldnow/model/GalleryModel.as of WNGallery.swf\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport random\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_unquote_plus\nfrom ..utils import (\n    int_or_none,\n    float_or_none,\n    timeconvert,\n    update_url_query,\n    xpath_text,\n)\n\n\nclass KUSIIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?kusi\\.com/(?P<path>story/.+|video\\?clipId=(?P<clipId>\\d+))'\n    _TESTS = [{\n        'url': 'http://www.kusi.com/story/32849881/turko-files-refused-to-help-it-aint-right',\n        'md5': '4e76ce8e53660ce9697d06c0ba6fc47d',\n        'info_dict': {\n            'id': '12689020',\n            'ext': 'mp4',\n            'title': \"Turko Files: Refused to Help, It Ain't Right!\",\n            'duration': 223.586,\n            'upload_date': '20160826',\n            'timestamp': 1472233118,\n            'thumbnail': r're:^https?://.*\\.jpg$'\n        },\n    }, {\n        'url': 'http://kusi.com/video?clipId=12203019',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        clip_id = mobj.group('clipId')\n        video_id = clip_id or mobj.group('path')\n\n        webpage = self._download_webpage(url, video_id)\n\n        if clip_id is None:\n            video_id = clip_id = self._html_search_regex(\n                r'\"clipId\"\\s*,\\s*\"(\\d+)\"', webpage, 'clip id')\n\n        affiliate_id = self._search_regex(\n            r'affiliateId\\s*:\\s*\\'([^\\']+)\\'', webpage, 'affiliate id')\n\n        # See __Packages/worldnow/model/GalleryModel.as of WNGallery.swf\n        xml_url = update_url_query('http://www.kusi.com/build.asp', {\n            'buildtype': 'buildfeaturexmlrequest',\n            'featureType': 'Clip',\n            'featureid': clip_id,\n            'affiliateno': affiliate_id,\n            'clientgroupid': '1',\n            'rnd': int(round(random.random() * 1000000)),\n        })\n\n        doc = self._download_xml(xml_url, video_id)\n\n        video_title = xpath_text(doc, 'HEADLINE', fatal=True)\n        duration = float_or_none(xpath_text(doc, 'DURATION'), scale=1000)\n        description = xpath_text(doc, 'ABSTRACT')\n        thumbnail = xpath_text(doc, './THUMBNAILIMAGE/FILENAME')\n        createtion_time = timeconvert(xpath_text(doc, 'rfc822creationdate'))\n\n        quality_options = doc.find('{http://search.yahoo.com/mrss/}group').findall('{http://search.yahoo.com/mrss/}content')\n        formats = []\n        for quality in quality_options:\n            formats.append({\n                'url': compat_urllib_parse_unquote_plus(quality.attrib['url']),\n                'height': int_or_none(quality.attrib.get('height')),\n                'width': int_or_none(quality.attrib.get('width')),\n                'vbr': float_or_none(quality.attrib.get('bitratebits'), scale=1000),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video_title,\n            'description': description,\n            'duration': duration,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'timestamp': createtion_time,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "kusi.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/kusi.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}