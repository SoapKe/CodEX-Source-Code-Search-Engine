{"author": "tgalal", "code": "from yowsup.layers import YowLayer, YowLayerEvent, EventCallback\nfrom yowsup.layers.network import YowNetworkLayer\nfrom .encoder import WriteEncoder\nfrom .decoder import ReadDecoder\nfrom .tokendictionary import TokenDictionary\nclass YowCoderLayer(YowLayer):\n\n    PROP_DOMAIN =   \"org.openwhatsapp.yowsup.prop.domain\"\n    PROP_RESOURCE = \"org.openwhatsapp.yowsup.prop.resource\"\n\n    def __init__(self):\n        YowLayer.__init__(self)\n        tokenDictionary = TokenDictionary()\n        self.writer = WriteEncoder(tokenDictionary)\n        self.reader = ReadDecoder(tokenDictionary)\n    \n    @EventCallback(YowNetworkLayer.EVENT_STATE_CONNECTED)\n    def onConnected(self, event):\n        self.writer.reset()\n        self.reader.reset()\n        streamStartBytes = self.writer.getStreamStartBytes(\n            self.getProp(self.__class__.PROP_DOMAIN),\n            self.getProp(self.__class__.PROP_RESOURCE)\n        )\n        for i in range(0, 4):\n            self.write(streamStartBytes.pop(0))\n        self.write(streamStartBytes)        \n\n    def send(self, data):\n        self.write(self.writer.protocolTreeNodeToBytes(data))\n\n    def receive(self, data):\n        node = self.reader.getProtocolTreeNode(data)\n        if node:\n            self.toUpper(node)\n\n    def write(self, i):\n        if(type(i) in(list, tuple)):\n            self.toLower(bytearray(i))\n        else:\n            self.toLower(bytearray([i]))\n\n    def __str__(self):\n        return \"Coder Layer\"", "comments": "", "content": "from yowsup.layers import YowLayer, YowLayerEvent, EventCallback\nfrom yowsup.layers.network import YowNetworkLayer\nfrom .encoder import WriteEncoder\nfrom .decoder import ReadDecoder\nfrom .tokendictionary import TokenDictionary\nclass YowCoderLayer(YowLayer):\n\n    PROP_DOMAIN =   \"org.openwhatsapp.yowsup.prop.domain\"\n    PROP_RESOURCE = \"org.openwhatsapp.yowsup.prop.resource\"\n\n    def __init__(self):\n        YowLayer.__init__(self)\n        tokenDictionary = TokenDictionary()\n        self.writer = WriteEncoder(tokenDictionary)\n        self.reader = ReadDecoder(tokenDictionary)\n    \n    @EventCallback(YowNetworkLayer.EVENT_STATE_CONNECTED)\n    def onConnected(self, event):\n        self.writer.reset()\n        self.reader.reset()\n        streamStartBytes = self.writer.getStreamStartBytes(\n            self.getProp(self.__class__.PROP_DOMAIN),\n            self.getProp(self.__class__.PROP_RESOURCE)\n        )\n        for i in range(0, 4):\n            self.write(streamStartBytes.pop(0))\n        self.write(streamStartBytes)        \n\n    def send(self, data):\n        self.write(self.writer.protocolTreeNodeToBytes(data))\n\n    def receive(self, data):\n        node = self.reader.getProtocolTreeNode(data)\n        if node:\n            self.toUpper(node)\n\n    def write(self, i):\n        if(type(i) in(list, tuple)):\n            self.toLower(bytearray(i))\n        else:\n            self.toLower(bytearray([i]))\n\n    def __str__(self):\n        return \"Coder Layer\"", "description": "The python WhatsApp library", "file_name": "layer.py", "id": "a05fda95cfab817e9666491bbdc0b46b", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/coder/layer.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}