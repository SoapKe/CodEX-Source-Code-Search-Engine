{"author": "localstack", "code": "\n\nimport os\nimport sys\nimport glob\nimport shutil\nimport logging\nimport tempfile\nfrom localstack.constants import (DEFAULT_SERVICE_PORTS, ELASTICMQ_JAR_URL, STS_JAR_URL,\n    ELASTICSEARCH_JAR_URL, DYNAMODB_JAR_URL, LOCALSTACK_MAVEN_VERSION)\nfrom localstack.utils.common import download, parallelize, run, mkdir, save_file, unzip, rm_rf\n\nTHIS_PATH = os.path.dirname(os.path.realpath(__file__))\nROOT_PATH = os.path.realpath(os.path.join(THIS_PATH, '..'))\n\nINSTALL_DIR_INFRA = '%s/infra' % ROOT_PATH\nINSTALL_DIR_NPM = '%s/node_modules' % ROOT_PATH\nINSTALL_DIR_ES = '%s/elasticsearch' % INSTALL_DIR_INFRA\nINSTALL_DIR_DDB = '%s/dynamodb' % INSTALL_DIR_INFRA\nINSTALL_DIR_KCL = '%s/amazon-kinesis-client' % INSTALL_DIR_INFRA\nINSTALL_DIR_ELASTICMQ = '%s/elasticmq' % INSTALL_DIR_INFRA\nINSTALL_PATH_LOCALSTACK_FAT_JAR = '%s/localstack-utils-fat.jar' % INSTALL_DIR_INFRA\nTMP_ARCHIVE_ES = os.path.join(tempfile.gettempdir(), 'localstack.es.zip')\nTMP_ARCHIVE_DDB = os.path.join(tempfile.gettempdir(), 'localstack.ddb.zip')\nTMP_ARCHIVE_STS = os.path.join(tempfile.gettempdir(), 'aws-java-sdk-sts.jar')\nTMP_ARCHIVE_ELASTICMQ = os.path.join(tempfile.gettempdir(), 'elasticmq-server.jar')\nURL_LOCALSTACK_FAT_JAR = ('http://central.maven.org/maven2/' +\n    'cloud/localstack/localstack-utils/{v}/localstack-utils-{v}-fat.jar').format(v=LOCALSTACK_MAVEN_VERSION)\n\n\nLOGGER = logging.getLogger(__name__)\n\n\ndef install_elasticsearch():\n    if not os.path.exists(INSTALL_DIR_ES):\n        LOGGER.info('Downloading and installing local Elasticsearch server. This may take some time.')\n        run('mkdir -p %s' % INSTALL_DIR_INFRA)\n        \n        download_and_extract_with_retry(ELASTICSEARCH_JAR_URL, TMP_ARCHIVE_ES, INSTALL_DIR_INFRA)\n        run('cd %s && mv elasticsearch* elasticsearch' % (INSTALL_DIR_INFRA))\n\n        for dir_name in ('data', 'logs', 'modules', 'plugins', 'config/scripts'):\n            cmd = 'cd %s && mkdir -p %s && chmod -R 777 %s'\n            run(cmd % (INSTALL_DIR_ES, dir_name, dir_name))\n\n\ndef install_elasticmq():\n    if not os.path.exists(INSTALL_DIR_ELASTICMQ):\n        LOGGER.info('Downloading and installing local ElasticMQ server. This may take some time.')\n        run('mkdir -p %s' % INSTALL_DIR_ELASTICMQ)\n        \n        if not os.path.exists(TMP_ARCHIVE_ELASTICMQ):\n            download(ELASTICMQ_JAR_URL, TMP_ARCHIVE_ELASTICMQ)\n        shutil.copy(TMP_ARCHIVE_ELASTICMQ, INSTALL_DIR_ELASTICMQ)\n\n\ndef install_kinesalite():\n    target_dir = '%s/kinesalite' % INSTALL_DIR_NPM\n    if not os.path.exists(target_dir):\n        LOGGER.info('Downloading and installing local Kinesis server. This may take some time.')\n        run('cd \"%s\" && npm install' % ROOT_PATH)\n\n\ndef install_dynamodb_local():\n    if not os.path.exists(INSTALL_DIR_DDB):\n        LOGGER.info('Downloading and installing local DynamoDB server. This may take some time.')\n        mkdir(INSTALL_DIR_DDB)\n        \n        download_and_extract_with_retry(DYNAMODB_JAR_URL, TMP_ARCHIVE_DDB, INSTALL_DIR_DDB)\n\n    \n    \n    if is_alpine():\n        ddb_libs_dir = '%s/DynamoDBLocal_lib' % INSTALL_DIR_DDB\n        patched_marker = '%s/alpine_fix_applied' % ddb_libs_dir\n        if not os.path.exists(patched_marker):\n            patched_lib = ('https://rawgit.com/bhuisgen/docker-alpine/master/alpine-dynamodb/' +\n                'rootfs/usr/local/dynamodb/DynamoDBLocal_lib/libsqlite4java-linux-amd64.so')\n            patched_jar = ('https://rawgit.com/bhuisgen/docker-alpine/master/alpine-dynamodb/' +\n                'rootfs/usr/local/dynamodb/DynamoDBLocal_lib/sqlite4java.jar')\n            run(\"curl -L -o %s/libsqlite4java-linux-amd64.so '%s'\" % (ddb_libs_dir, patched_lib))\n            run(\"curl -L -o %s/sqlite4java.jar '%s'\" % (ddb_libs_dir, patched_jar))\n            save_file(patched_marker, '')\n\n    \n    log4j2_config = \"\"\"<Configuration status=\"WARN\">\n      <Appenders>\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n          <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\"/>\n        </Console>\n      </Appenders>\n      <Loggers>\n        <Root level=\"WARN\"><AppenderRef ref=\"Console\"/></Root>\n      </Loggers>\n    </Configuration>\"\"\"\n    log4j2_file = os.path.join(INSTALL_DIR_DDB, 'log4j2.xml')\n    save_file(log4j2_file, log4j2_config)\n    run('cd \"%s\" && zip -u DynamoDBLocal.jar log4j2.xml || true' % INSTALL_DIR_DDB)\n\n\ndef install_amazon_kinesis_client_libs():\n    \n    if not os.path.exists(INSTALL_DIR_KCL):\n        mkdir(INSTALL_DIR_KCL)\n        if not os.path.exists(TMP_ARCHIVE_STS):\n            download(STS_JAR_URL, TMP_ARCHIVE_STS)\n        shutil.copy(TMP_ARCHIVE_STS, INSTALL_DIR_KCL)\n    \n    from localstack.utils.kinesis import kclipy_helper\n    classpath = kclipy_helper.get_kcl_classpath()\n    java_files = '%s/utils/kinesis/java/com/atlassian/*.java' % ROOT_PATH\n    class_files = '%s/utils/kinesis/java/com/atlassian/*.class' % ROOT_PATH\n    if not glob.glob(class_files):\n        run('javac -cp \"%s\" %s' % (classpath, java_files))\n\n\ndef install_lambda_java_libs():\n    # install LocalStack \"fat\" JAR file (contains all dependencies)\n    if not os.path.exists(INSTALL_PATH_LOCALSTACK_FAT_JAR):\n        LOGGER.info('Downloading and installing LocalStack Java libraries. This may take some time.')\n        download(URL_LOCALSTACK_FAT_JAR, INSTALL_PATH_LOCALSTACK_FAT_JAR)\n\n\ndef install_component(name):\n    if name == 'kinesis':\n        install_kinesalite()\n    elif name == 'dynamodb':\n        install_dynamodb_local()\n    elif name == 'es':\n        install_elasticsearch()\n    elif name == 'sqs':\n        install_elasticmq()\n\n\ndef install_components(names):\n    parallelize(install_component, names)\n    install_lambda_java_libs()\n\n\ndef install_all_components():\n    install_components(DEFAULT_SERVICE_PORTS.keys())\n\n\n\n\n\n\n\ndef is_alpine():\n    try:\n        run('cat /etc/issue | grep Alpine', print_error=False)\n        return True\n    except Exception:\n        return False\n\n\ndef download_and_extract_with_retry(archive_url, tmp_archive, target_dir):\n\n    def download_and_extract():\n        if not os.path.exists(tmp_archive):\n            download(archive_url, tmp_archive)\n        unzip(tmp_archive, target_dir)\n\n    try:\n        download_and_extract()\n    except Exception:\n        \n        LOGGER.info('Unable to extract file, re-downloading ZIP archive: %s' % tmp_archive)\n        rm_rf(tmp_archive)\n        download_and_extract()\n\n\nif __name__ == '__main__':\n\n    if len(sys.argv) > 1:\n        if sys.argv[1] == 'libs':\n            print('Initializing installation.')\n            logging.basicConfig(level=logging.INFO)\n            logging.getLogger('requests').setLevel(logging.WARNING)\n            install_all_components()\n            print('Done.')\n        elif sys.argv[1] == 'testlibs':\n            \n            install_amazon_kinesis_client_libs()\n", "comments": "    configuration status  warn          appenders           console name  console  target  system out              patternlayout pattern   hh mm ss sss       5level  logger 36     msg n              console          appenders         loggers           root level  warn   appenderref ref  console     root          loggers        configuration         usr bin env python    set logger    download extract archive    download archive    download extract archive    fix alpine  otherwise dynamodblocal fails     dynamodblocal lib libsqlite4java linux amd64    memcpy chk  symbol found    fix logging configuration dynamodblocal    install kcl sts jar files    compile java files    install localstack  fat  jar file (contains dependencies)                         helper functions                         try deleting downloading zip file    install additional libraries testing ", "content": "#!/usr/bin/env python\n\nimport os\nimport sys\nimport glob\nimport shutil\nimport logging\nimport tempfile\nfrom localstack.constants import (DEFAULT_SERVICE_PORTS, ELASTICMQ_JAR_URL, STS_JAR_URL,\n    ELASTICSEARCH_JAR_URL, DYNAMODB_JAR_URL, LOCALSTACK_MAVEN_VERSION)\nfrom localstack.utils.common import download, parallelize, run, mkdir, save_file, unzip, rm_rf\n\nTHIS_PATH = os.path.dirname(os.path.realpath(__file__))\nROOT_PATH = os.path.realpath(os.path.join(THIS_PATH, '..'))\n\nINSTALL_DIR_INFRA = '%s/infra' % ROOT_PATH\nINSTALL_DIR_NPM = '%s/node_modules' % ROOT_PATH\nINSTALL_DIR_ES = '%s/elasticsearch' % INSTALL_DIR_INFRA\nINSTALL_DIR_DDB = '%s/dynamodb' % INSTALL_DIR_INFRA\nINSTALL_DIR_KCL = '%s/amazon-kinesis-client' % INSTALL_DIR_INFRA\nINSTALL_DIR_ELASTICMQ = '%s/elasticmq' % INSTALL_DIR_INFRA\nINSTALL_PATH_LOCALSTACK_FAT_JAR = '%s/localstack-utils-fat.jar' % INSTALL_DIR_INFRA\nTMP_ARCHIVE_ES = os.path.join(tempfile.gettempdir(), 'localstack.es.zip')\nTMP_ARCHIVE_DDB = os.path.join(tempfile.gettempdir(), 'localstack.ddb.zip')\nTMP_ARCHIVE_STS = os.path.join(tempfile.gettempdir(), 'aws-java-sdk-sts.jar')\nTMP_ARCHIVE_ELASTICMQ = os.path.join(tempfile.gettempdir(), 'elasticmq-server.jar')\nURL_LOCALSTACK_FAT_JAR = ('http://central.maven.org/maven2/' +\n    'cloud/localstack/localstack-utils/{v}/localstack-utils-{v}-fat.jar').format(v=LOCALSTACK_MAVEN_VERSION)\n\n# set up logger\nLOGGER = logging.getLogger(__name__)\n\n\ndef install_elasticsearch():\n    if not os.path.exists(INSTALL_DIR_ES):\n        LOGGER.info('Downloading and installing local Elasticsearch server. This may take some time.')\n        run('mkdir -p %s' % INSTALL_DIR_INFRA)\n        # download and extract archive\n        download_and_extract_with_retry(ELASTICSEARCH_JAR_URL, TMP_ARCHIVE_ES, INSTALL_DIR_INFRA)\n        run('cd %s && mv elasticsearch* elasticsearch' % (INSTALL_DIR_INFRA))\n\n        for dir_name in ('data', 'logs', 'modules', 'plugins', 'config/scripts'):\n            cmd = 'cd %s && mkdir -p %s && chmod -R 777 %s'\n            run(cmd % (INSTALL_DIR_ES, dir_name, dir_name))\n\n\ndef install_elasticmq():\n    if not os.path.exists(INSTALL_DIR_ELASTICMQ):\n        LOGGER.info('Downloading and installing local ElasticMQ server. This may take some time.')\n        run('mkdir -p %s' % INSTALL_DIR_ELASTICMQ)\n        # download archive\n        if not os.path.exists(TMP_ARCHIVE_ELASTICMQ):\n            download(ELASTICMQ_JAR_URL, TMP_ARCHIVE_ELASTICMQ)\n        shutil.copy(TMP_ARCHIVE_ELASTICMQ, INSTALL_DIR_ELASTICMQ)\n\n\ndef install_kinesalite():\n    target_dir = '%s/kinesalite' % INSTALL_DIR_NPM\n    if not os.path.exists(target_dir):\n        LOGGER.info('Downloading and installing local Kinesis server. This may take some time.')\n        run('cd \"%s\" && npm install' % ROOT_PATH)\n\n\ndef install_dynamodb_local():\n    if not os.path.exists(INSTALL_DIR_DDB):\n        LOGGER.info('Downloading and installing local DynamoDB server. This may take some time.')\n        mkdir(INSTALL_DIR_DDB)\n        # download and extract archive\n        download_and_extract_with_retry(DYNAMODB_JAR_URL, TMP_ARCHIVE_DDB, INSTALL_DIR_DDB)\n\n    # fix for Alpine, otherwise DynamoDBLocal fails with:\n    # DynamoDBLocal_lib/libsqlite4java-linux-amd64.so: __memcpy_chk: symbol not found\n    if is_alpine():\n        ddb_libs_dir = '%s/DynamoDBLocal_lib' % INSTALL_DIR_DDB\n        patched_marker = '%s/alpine_fix_applied' % ddb_libs_dir\n        if not os.path.exists(patched_marker):\n            patched_lib = ('https://rawgit.com/bhuisgen/docker-alpine/master/alpine-dynamodb/' +\n                'rootfs/usr/local/dynamodb/DynamoDBLocal_lib/libsqlite4java-linux-amd64.so')\n            patched_jar = ('https://rawgit.com/bhuisgen/docker-alpine/master/alpine-dynamodb/' +\n                'rootfs/usr/local/dynamodb/DynamoDBLocal_lib/sqlite4java.jar')\n            run(\"curl -L -o %s/libsqlite4java-linux-amd64.so '%s'\" % (ddb_libs_dir, patched_lib))\n            run(\"curl -L -o %s/sqlite4java.jar '%s'\" % (ddb_libs_dir, patched_jar))\n            save_file(patched_marker, '')\n\n    # fix logging configuration for DynamoDBLocal\n    log4j2_config = \"\"\"<Configuration status=\"WARN\">\n      <Appenders>\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n          <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\"/>\n        </Console>\n      </Appenders>\n      <Loggers>\n        <Root level=\"WARN\"><AppenderRef ref=\"Console\"/></Root>\n      </Loggers>\n    </Configuration>\"\"\"\n    log4j2_file = os.path.join(INSTALL_DIR_DDB, 'log4j2.xml')\n    save_file(log4j2_file, log4j2_config)\n    run('cd \"%s\" && zip -u DynamoDBLocal.jar log4j2.xml || true' % INSTALL_DIR_DDB)\n\n\ndef install_amazon_kinesis_client_libs():\n    # install KCL/STS JAR files\n    if not os.path.exists(INSTALL_DIR_KCL):\n        mkdir(INSTALL_DIR_KCL)\n        if not os.path.exists(TMP_ARCHIVE_STS):\n            download(STS_JAR_URL, TMP_ARCHIVE_STS)\n        shutil.copy(TMP_ARCHIVE_STS, INSTALL_DIR_KCL)\n    # Compile Java files\n    from localstack.utils.kinesis import kclipy_helper\n    classpath = kclipy_helper.get_kcl_classpath()\n    java_files = '%s/utils/kinesis/java/com/atlassian/*.java' % ROOT_PATH\n    class_files = '%s/utils/kinesis/java/com/atlassian/*.class' % ROOT_PATH\n    if not glob.glob(class_files):\n        run('javac -cp \"%s\" %s' % (classpath, java_files))\n\n\ndef install_lambda_java_libs():\n    # install LocalStack \"fat\" JAR file (contains all dependencies)\n    if not os.path.exists(INSTALL_PATH_LOCALSTACK_FAT_JAR):\n        LOGGER.info('Downloading and installing LocalStack Java libraries. This may take some time.')\n        download(URL_LOCALSTACK_FAT_JAR, INSTALL_PATH_LOCALSTACK_FAT_JAR)\n\n\ndef install_component(name):\n    if name == 'kinesis':\n        install_kinesalite()\n    elif name == 'dynamodb':\n        install_dynamodb_local()\n    elif name == 'es':\n        install_elasticsearch()\n    elif name == 'sqs':\n        install_elasticmq()\n\n\ndef install_components(names):\n    parallelize(install_component, names)\n    install_lambda_java_libs()\n\n\ndef install_all_components():\n    install_components(DEFAULT_SERVICE_PORTS.keys())\n\n\n# -----------------\n# HELPER FUNCTIONS\n# -----------------\n\n\ndef is_alpine():\n    try:\n        run('cat /etc/issue | grep Alpine', print_error=False)\n        return True\n    except Exception:\n        return False\n\n\ndef download_and_extract_with_retry(archive_url, tmp_archive, target_dir):\n\n    def download_and_extract():\n        if not os.path.exists(tmp_archive):\n            download(archive_url, tmp_archive)\n        unzip(tmp_archive, target_dir)\n\n    try:\n        download_and_extract()\n    except Exception:\n        # try deleting and re-downloading the zip file\n        LOGGER.info('Unable to extract file, re-downloading ZIP archive: %s' % tmp_archive)\n        rm_rf(tmp_archive)\n        download_and_extract()\n\n\nif __name__ == '__main__':\n\n    if len(sys.argv) > 1:\n        if sys.argv[1] == 'libs':\n            print('Initializing installation.')\n            logging.basicConfig(level=logging.INFO)\n            logging.getLogger('requests').setLevel(logging.WARNING)\n            install_all_components()\n            print('Done.')\n        elif sys.argv[1] == 'testlibs':\n            # Install additional libraries for testing\n            install_amazon_kinesis_client_libs()\n", "description": "\ud83d\udcbb  A fully functional local AWS cloud stack. Develop and test your cloud apps offline!", "file_name": "install.py", "id": "e02f4be2f640a4bb238ef158420d17fd", "language": "Python", "project_name": "localstack", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/localstack-localstack/localstack-localstack-fcc848e/localstack/services/install.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:04:08Z", "url": "https://github.com/localstack/localstack", "wiki": true}