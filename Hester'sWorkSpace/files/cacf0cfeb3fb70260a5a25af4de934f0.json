{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    qualities,\n    unified_timestamp,\n)\n\n\nclass PearVideoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?pearvideo\\.com/video_(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.pearvideo.com/video_1076290',\n        'info_dict': {\n            'id': '1076290',\n            'ext': 'mp4',\n            'title': '\u5c0f\u6d63\u718a\u5728\u4e3b\u4eba\u5bb6\u73bb\u7483\u4e0a\u6eda\u77f3\u5934\uff1a\u6ca1\u7838',\n            'description': 'md5:01d576b747de71be0ee85eb7cac25f9d',\n            'timestamp': 1494275280,\n            'upload_date': '20170508',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        quality = qualities(\n            ('ldflv', 'ld', 'sdflv', 'sd', 'hdflv', 'hd', 'src'))\n\n        formats = [{\n            'url': mobj.group('url'),\n            'format_id': mobj.group('id'),\n            'quality': quality(mobj.group('id')),\n        } for mobj in re.finditer(\n            r'(?P<id>[a-zA-Z]+)Url\\s*=\\s*([\"\\'])(?P<url>(?:https?:)?//.+?)\\2',\n            webpage)]\n        self._sort_formats(formats)\n\n        title = self._search_regex(\n            (r'<h1[^>]+\\bclass=([\"\\'])video-tt\\1[^>]*>(?P<value>[^<]+)',\n             r'<[^>]+\\bdata-title=([\"\\'])(?P<value>(?:(?!\\1).)+)\\1'),\n            webpage, 'title', group='value')\n        description = self._search_regex(\n            (r'<div[^>]+\\bclass=([\"\\'])summary\\1[^>]*>(?P<value>[^<]+)',\n             r'<[^>]+\\bdata-summary=([\"\\'])(?P<value>(?:(?!\\1).)+)\\1'),\n            webpage, 'description', default=None,\n            group='value') or self._html_search_meta('Description', webpage)\n        timestamp = unified_timestamp(self._search_regex(\n            r'<div[^>]+\\bclass=[\"\\']date[\"\\'][^>]*>([^<]+)',\n            webpage, 'timestamp', fatal=False))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    qualities,\n    unified_timestamp,\n)\n\n\nclass PearVideoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?pearvideo\\.com/video_(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.pearvideo.com/video_1076290',\n        'info_dict': {\n            'id': '1076290',\n            'ext': 'mp4',\n            'title': '\u5c0f\u6d63\u718a\u5728\u4e3b\u4eba\u5bb6\u73bb\u7483\u4e0a\u6eda\u77f3\u5934\uff1a\u6ca1\u7838',\n            'description': 'md5:01d576b747de71be0ee85eb7cac25f9d',\n            'timestamp': 1494275280,\n            'upload_date': '20170508',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        quality = qualities(\n            ('ldflv', 'ld', 'sdflv', 'sd', 'hdflv', 'hd', 'src'))\n\n        formats = [{\n            'url': mobj.group('url'),\n            'format_id': mobj.group('id'),\n            'quality': quality(mobj.group('id')),\n        } for mobj in re.finditer(\n            r'(?P<id>[a-zA-Z]+)Url\\s*=\\s*([\"\\'])(?P<url>(?:https?:)?//.+?)\\2',\n            webpage)]\n        self._sort_formats(formats)\n\n        title = self._search_regex(\n            (r'<h1[^>]+\\bclass=([\"\\'])video-tt\\1[^>]*>(?P<value>[^<]+)',\n             r'<[^>]+\\bdata-title=([\"\\'])(?P<value>(?:(?!\\1).)+)\\1'),\n            webpage, 'title', group='value')\n        description = self._search_regex(\n            (r'<div[^>]+\\bclass=([\"\\'])summary\\1[^>]*>(?P<value>[^<]+)',\n             r'<[^>]+\\bdata-summary=([\"\\'])(?P<value>(?:(?!\\1).)+)\\1'),\n            webpage, 'description', default=None,\n            group='value') or self._html_search_meta('Description', webpage)\n        timestamp = unified_timestamp(self._search_regex(\n            r'<div[^>]+\\bclass=[\"\\']date[\"\\'][^>]*>([^<]+)',\n            webpage, 'timestamp', fatal=False))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "pearvideo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/pearvideo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}