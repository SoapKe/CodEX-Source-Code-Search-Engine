{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    clean_html,\n    int_or_none,\n    float_or_none,\n    sanitized_Request,\n)\n\n\ndef _decrypt_config(key, string):\n    a = ''\n    i = ''\n    r = ''\n\n    while len(a) < (len(string) / 2):\n        a += key\n\n    a = a[0:int(len(string) / 2)]\n\n    t = 0\n    while t < len(string):\n        i += chr(int(string[t] + string[t + 1], 16))\n        t += 2\n\n    icko = [s for s in i]\n\n    for t, c in enumerate(a):\n        r += chr(ord(c) ^ ord(icko[t]))\n\n    return r\n\n\nclass EscapistIE(InfoExtractor):\n    _VALID_URL = r'https?://?(?:www\\.)?escapistmagazine\\.com/videos/view/[^/?\n    _TESTS = [{\n        'url': 'http://www.escapistmagazine.com/videos/view/the-escapist-presents/6618-Breaking-Down-Baldurs-Gate',\n        'md5': 'ab3a706c681efca53f0a35f1415cf0d1',\n        'info_dict': {\n            'id': '6618',\n            'ext': 'mp4',\n            'description': \"Baldur's Gate: Original, Modded or Enhanced Edition? I'll break down what you can expect from the new Baldur's Gate: Enhanced Edition.\",\n            'title': \"Breaking Down Baldur's Gate\",\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 264,\n            'uploader': 'The Escapist',\n        }\n    }, {\n        'url': 'http://www.escapistmagazine.com/videos/view/zero-punctuation/10044-Evolve-One-vs-Multiplayer',\n        'md5': '9e8c437b0dbb0387d3bd3255ca77f6bf',\n        'info_dict': {\n            'id': '10044',\n            'ext': 'mp4',\n            'description': 'This week, Zero Punctuation reviews Evolve.',\n            'title': 'Evolve - One vs Multiplayer',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 304,\n            'uploader': 'The Escapist',\n        }\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        ims_video = self._parse_json(\n            self._search_regex(\n                r'imsVideo\\.play\\(({.+?})\\);', webpage, 'imsVideo'),\n            video_id)\n        video_id = ims_video['videoID']\n        key = ims_video['hash']\n\n        config_req = sanitized_Request(\n            'http://www.escapistmagazine.com/videos/'\n            'vidconfig.php?videoID=%s&hash=%s' % (video_id, key))\n        config_req.add_header('Referer', url)\n        config = self._download_webpage(config_req, video_id, 'Downloading video config')\n\n        data = json.loads(_decrypt_config(key, config))\n\n        video_data = data['videoData']\n\n        title = clean_html(video_data['title'])\n        duration = float_or_none(video_data.get('duration'), 1000)\n        uploader = video_data.get('publisher')\n\n        formats = [{\n            'url': video['src'],\n            'format_id': '%s-%sp' % (determine_ext(video['src']), video['res']),\n            'height': int_or_none(video.get('res')),\n        } for video in data['files']['videos']]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'description': self._og_search_description(webpage),\n            'duration': duration,\n            'uploader': uploader,\n        }\n", "comments": "#]+/(?P<id>[0-9]+)-[^/?#]*(?:$|[?#])'\n", "content": "from __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    clean_html,\n    int_or_none,\n    float_or_none,\n    sanitized_Request,\n)\n\n\ndef _decrypt_config(key, string):\n    a = ''\n    i = ''\n    r = ''\n\n    while len(a) < (len(string) / 2):\n        a += key\n\n    a = a[0:int(len(string) / 2)]\n\n    t = 0\n    while t < len(string):\n        i += chr(int(string[t] + string[t + 1], 16))\n        t += 2\n\n    icko = [s for s in i]\n\n    for t, c in enumerate(a):\n        r += chr(ord(c) ^ ord(icko[t]))\n\n    return r\n\n\nclass EscapistIE(InfoExtractor):\n    _VALID_URL = r'https?://?(?:www\\.)?escapistmagazine\\.com/videos/view/[^/?#]+/(?P<id>[0-9]+)-[^/?#]*(?:$|[?#])'\n    _TESTS = [{\n        'url': 'http://www.escapistmagazine.com/videos/view/the-escapist-presents/6618-Breaking-Down-Baldurs-Gate',\n        'md5': 'ab3a706c681efca53f0a35f1415cf0d1',\n        'info_dict': {\n            'id': '6618',\n            'ext': 'mp4',\n            'description': \"Baldur's Gate: Original, Modded or Enhanced Edition? I'll break down what you can expect from the new Baldur's Gate: Enhanced Edition.\",\n            'title': \"Breaking Down Baldur's Gate\",\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 264,\n            'uploader': 'The Escapist',\n        }\n    }, {\n        'url': 'http://www.escapistmagazine.com/videos/view/zero-punctuation/10044-Evolve-One-vs-Multiplayer',\n        'md5': '9e8c437b0dbb0387d3bd3255ca77f6bf',\n        'info_dict': {\n            'id': '10044',\n            'ext': 'mp4',\n            'description': 'This week, Zero Punctuation reviews Evolve.',\n            'title': 'Evolve - One vs Multiplayer',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 304,\n            'uploader': 'The Escapist',\n        }\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        ims_video = self._parse_json(\n            self._search_regex(\n                r'imsVideo\\.play\\(({.+?})\\);', webpage, 'imsVideo'),\n            video_id)\n        video_id = ims_video['videoID']\n        key = ims_video['hash']\n\n        config_req = sanitized_Request(\n            'http://www.escapistmagazine.com/videos/'\n            'vidconfig.php?videoID=%s&hash=%s' % (video_id, key))\n        config_req.add_header('Referer', url)\n        config = self._download_webpage(config_req, video_id, 'Downloading video config')\n\n        data = json.loads(_decrypt_config(key, config))\n\n        video_data = data['videoData']\n\n        title = clean_html(video_data['title'])\n        duration = float_or_none(video_data.get('duration'), 1000)\n        uploader = video_data.get('publisher')\n\n        formats = [{\n            'url': video['src'],\n            'format_id': '%s-%sp' % (determine_ext(video['src']), video['res']),\n            'height': int_or_none(video.get('res')),\n        } for video in data['files']['videos']]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'description': self._og_search_description(webpage),\n            'duration': duration,\n            'uploader': uploader,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "escapist.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/escapist.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}