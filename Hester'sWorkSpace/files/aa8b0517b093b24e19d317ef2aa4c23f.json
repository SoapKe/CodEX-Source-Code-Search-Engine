{"author": "MagicStack", "code": "\n\n\nimport argparse\nimport os\nimport os.path\nimport sys\nimport urllib.request\n\nimport tinys3\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='S3 File Uploader')\n    parser.add_argument(\n        '--s3-bucket',\n        help=('S3 bucket name (defaults to $S3_UPLOAD_BUCKET)'),\n        default=os.environ.get('S3_UPLOAD_BUCKET'))\n    parser.add_argument(\n        '--s3-region',\n        help=('S3 region (defaults to $S3_UPLOAD_REGION)'),\n        default=os.environ.get('S3_UPLOAD_REGION'))\n    parser.add_argument(\n        '--s3-username',\n        help=('S3 username (defaults to $S3_UPLOAD_USERNAME)'),\n        default=os.environ.get('S3_UPLOAD_USERNAME'))\n    parser.add_argument(\n        '--s3-key',\n        help=('S3 access key (defaults to $S3_UPLOAD_ACCESSKEY)'),\n        default=os.environ.get('S3_UPLOAD_ACCESSKEY'))\n    parser.add_argument(\n        '--s3-secret',\n        help=('S3 secret (defaults to $S3_UPLOAD_SECRET)'),\n        default=os.environ.get('S3_UPLOAD_SECRET'))\n    parser.add_argument(\n        '--destdir',\n        help='Destination directory.')\n    parser.add_argument(\n        'package', metavar='PACKAGE',\n        help='Package name and version to download.')\n\n    args = parser.parse_args()\n\n    if args.s3_region:\n        endpoint = 's3-{}.amazonaws.com'.format(args.s3_region.lower())\n    else:\n        endpoint = 's3.amazonaws.com'\n\n    conn = tinys3.Connection(\n        access_key=args.s3_key,\n        secret_key=args.s3_secret,\n        default_bucket=args.s3_bucket,\n        tls=True,\n        endpoint=endpoint,\n    )\n\n    files = []\n\n    for entry in conn.list(args.package):\n        files.append(entry['key'])\n\n    destdir = args.destdir or os.getpwd()\n\n    for file in files:\n        print('Downloading {}...'.format(file))\n        url = 'https://{}/{}/{}'.format(endpoint, args.s3_bucket, file)\n        target = os.path.join(destdir, file)\n        urllib.request.urlretrieve(url, target)\n\n    return 0\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n", "comments": "   usr bin env python3 ", "content": "#!/usr/bin/env python3\n\n\nimport argparse\nimport os\nimport os.path\nimport sys\nimport urllib.request\n\nimport tinys3\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='S3 File Uploader')\n    parser.add_argument(\n        '--s3-bucket',\n        help=('S3 bucket name (defaults to $S3_UPLOAD_BUCKET)'),\n        default=os.environ.get('S3_UPLOAD_BUCKET'))\n    parser.add_argument(\n        '--s3-region',\n        help=('S3 region (defaults to $S3_UPLOAD_REGION)'),\n        default=os.environ.get('S3_UPLOAD_REGION'))\n    parser.add_argument(\n        '--s3-username',\n        help=('S3 username (defaults to $S3_UPLOAD_USERNAME)'),\n        default=os.environ.get('S3_UPLOAD_USERNAME'))\n    parser.add_argument(\n        '--s3-key',\n        help=('S3 access key (defaults to $S3_UPLOAD_ACCESSKEY)'),\n        default=os.environ.get('S3_UPLOAD_ACCESSKEY'))\n    parser.add_argument(\n        '--s3-secret',\n        help=('S3 secret (defaults to $S3_UPLOAD_SECRET)'),\n        default=os.environ.get('S3_UPLOAD_SECRET'))\n    parser.add_argument(\n        '--destdir',\n        help='Destination directory.')\n    parser.add_argument(\n        'package', metavar='PACKAGE',\n        help='Package name and version to download.')\n\n    args = parser.parse_args()\n\n    if args.s3_region:\n        endpoint = 's3-{}.amazonaws.com'.format(args.s3_region.lower())\n    else:\n        endpoint = 's3.amazonaws.com'\n\n    conn = tinys3.Connection(\n        access_key=args.s3_key,\n        secret_key=args.s3_secret,\n        default_bucket=args.s3_bucket,\n        tls=True,\n        endpoint=endpoint,\n    )\n\n    files = []\n\n    for entry in conn.list(args.package):\n        files.append(entry['key'])\n\n    destdir = args.destdir or os.getpwd()\n\n    for file in files:\n        print('Downloading {}...'.format(file))\n        url = 'https://{}/{}/{}'.format(endpoint, args.s3_bucket, file)\n        target = os.path.join(destdir, file)\n        urllib.request.urlretrieve(url, target)\n\n    return 0\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n", "description": "Ultra fast asyncio event loop.", "file_name": "s3-download-release.py", "id": "aa8b0517b093b24e19d317ef2aa4c23f", "language": "Python", "project_name": "uvloop", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/MagicStack-uvloop/MagicStack-uvloop-fbe6675/.ci/s3-download-release.py", "save_time": "", "source": "", "update_at": "2018-03-18T17:11:24Z", "url": "https://github.com/MagicStack/uvloop", "wiki": true}