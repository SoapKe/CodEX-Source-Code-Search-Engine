{"author": "pallets", "code": "\nfrom __future__ import print_function\n\nimport os\nimport re\nimport sys\nfrom datetime import date, datetime\nfrom subprocess import PIPE, Popen\n\n_date_strip_re = re.compile(r'(?<=\\d)(st|nd|rd|th)')\n\n\ndef parse_changelog():\n    with open('CHANGES.rst') as f:\n        lineiter = iter(f)\n        for line in lineiter:\n            match = re.search('^Version\\s+(.*)', line.strip())\n\n            if match is None:\n                continue\n\n            version = match.group(1).strip()\n\n            if next(lineiter).count('-') != len(match.group(0)):\n                continue\n\n            while 1:\n                change_info = next(lineiter).strip()\n\n                if change_info:\n                    break\n\n            match = re.search(\n                r'released on (\\w+\\s+\\d+\\w+\\s+\\d+)(?:, codename (.*))?',\n                change_info,\n                flags=re.IGNORECASE\n            )\n\n            if match is None:\n                continue\n\n            datestr, codename = match.groups()\n            return version, parse_date(datestr), codename\n\n\ndef bump_version(version):\n    try:\n        parts = [int(i) for i in version.split('.')]\n    except ValueError:\n        fail('Current version is not numeric')\n\n    parts[-1] += 1\n    return '.'.join(map(str, parts))\n\n\ndef parse_date(string):\n    string = _date_strip_re.sub('', string)\n    return datetime.strptime(string, '%B %d %Y')\n\n\ndef set_filename_version(filename, version_number, pattern):\n    changed = []\n\n    def inject_version(match):\n        before, old, after = match.groups()\n        changed.append(True)\n        return before + version_number + after\n\n    with open(filename) as f:\n        contents = re.sub(\n            r\"^(\\s*%s\\s*=\\s*')(.+?)(')\" % pattern,\n            inject_version, f.read(),\n            flags=re.DOTALL | re.MULTILINE\n        )\n\n    if not changed:\n        fail('Could not find %s in %s', pattern, filename)\n\n    with open(filename, 'w') as f:\n        f.write(contents)\n\n\ndef set_init_version(version):\n    info('Setting __init__.py version to %s', version)\n    set_filename_version('flask/__init__.py', version, '__version__')\n\n\ndef build():\n    cmd = [sys.executable, 'setup.py', 'sdist', 'bdist_wheel']\n    Popen(cmd).wait()\n\n\ndef fail(message, *args):\n    print('Error:', message % args, file=sys.stderr)\n    sys.exit(1)\n\n\ndef info(message, *args):\n    print(message % args, file=sys.stderr)\n\n\ndef get_git_tags():\n    return set(\n        Popen(['git', 'tag'], stdout=PIPE).communicate()[0].splitlines()\n    )\n\n\ndef git_is_clean():\n    return Popen(['git', 'diff', '--quiet']).wait() == 0\n\n\ndef make_git_commit(message, *args):\n    message = message % args\n    Popen(['git', 'commit', '-am', message]).wait()\n\n\ndef make_git_tag(tag):\n    info('Tagging \"%s\"', tag)\n    Popen(['git', 'tag', tag]).wait()\n\n\ndef main():\n    os.chdir(os.path.join(os.path.dirname(__file__), '..'))\n\n    rv = parse_changelog()\n\n    if rv is None:\n        fail('Could not parse changelog')\n\n    version, release_date, codename = rv\n    dev_version = bump_version(version) + '.dev'\n\n    info(\n        'Releasing %s (codename %s, release date %s)',\n        version, codename, release_date.strftime('%d/%m/%Y')\n    )\n    tags = get_git_tags()\n\n    if version in tags:\n        fail('Version \"%s\" is already tagged', version)\n\n    if release_date.date() != date.today():\n        fail(\n            'Release date is not today (%s != %s)',\n            release_date.date(), date.today()\n        )\n\n    if not git_is_clean():\n        fail('You have uncommitted changes in git')\n\n    try:\n        import wheel  \n    except ImportError:\n        fail('You need to install the wheel package.')\n\n    set_init_version(version)\n    make_git_commit('Bump version number to %s', version)\n    make_git_tag(version)\n    build()\n    set_init_version(dev_version)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "!/usr/bin/env python noqa: f401", "content": "#!/usr/bin/env python\nfrom __future__ import print_function\n\nimport os\nimport re\nimport sys\nfrom datetime import date, datetime\nfrom subprocess import PIPE, Popen\n\n_date_strip_re = re.compile(r'(?<=\\d)(st|nd|rd|th)')\n\n\ndef parse_changelog():\n    with open('CHANGES.rst') as f:\n        lineiter = iter(f)\n        for line in lineiter:\n            match = re.search('^Version\\s+(.*)', line.strip())\n\n            if match is None:\n                continue\n\n            version = match.group(1).strip()\n\n            if next(lineiter).count('-') != len(match.group(0)):\n                continue\n\n            while 1:\n                change_info = next(lineiter).strip()\n\n                if change_info:\n                    break\n\n            match = re.search(\n                r'released on (\\w+\\s+\\d+\\w+\\s+\\d+)(?:, codename (.*))?',\n                change_info,\n                flags=re.IGNORECASE\n            )\n\n            if match is None:\n                continue\n\n            datestr, codename = match.groups()\n            return version, parse_date(datestr), codename\n\n\ndef bump_version(version):\n    try:\n        parts = [int(i) for i in version.split('.')]\n    except ValueError:\n        fail('Current version is not numeric')\n\n    parts[-1] += 1\n    return '.'.join(map(str, parts))\n\n\ndef parse_date(string):\n    string = _date_strip_re.sub('', string)\n    return datetime.strptime(string, '%B %d %Y')\n\n\ndef set_filename_version(filename, version_number, pattern):\n    changed = []\n\n    def inject_version(match):\n        before, old, after = match.groups()\n        changed.append(True)\n        return before + version_number + after\n\n    with open(filename) as f:\n        contents = re.sub(\n            r\"^(\\s*%s\\s*=\\s*')(.+?)(')\" % pattern,\n            inject_version, f.read(),\n            flags=re.DOTALL | re.MULTILINE\n        )\n\n    if not changed:\n        fail('Could not find %s in %s', pattern, filename)\n\n    with open(filename, 'w') as f:\n        f.write(contents)\n\n\ndef set_init_version(version):\n    info('Setting __init__.py version to %s', version)\n    set_filename_version('flask/__init__.py', version, '__version__')\n\n\ndef build():\n    cmd = [sys.executable, 'setup.py', 'sdist', 'bdist_wheel']\n    Popen(cmd).wait()\n\n\ndef fail(message, *args):\n    print('Error:', message % args, file=sys.stderr)\n    sys.exit(1)\n\n\ndef info(message, *args):\n    print(message % args, file=sys.stderr)\n\n\ndef get_git_tags():\n    return set(\n        Popen(['git', 'tag'], stdout=PIPE).communicate()[0].splitlines()\n    )\n\n\ndef git_is_clean():\n    return Popen(['git', 'diff', '--quiet']).wait() == 0\n\n\ndef make_git_commit(message, *args):\n    message = message % args\n    Popen(['git', 'commit', '-am', message]).wait()\n\n\ndef make_git_tag(tag):\n    info('Tagging \"%s\"', tag)\n    Popen(['git', 'tag', tag]).wait()\n\n\ndef main():\n    os.chdir(os.path.join(os.path.dirname(__file__), '..'))\n\n    rv = parse_changelog()\n\n    if rv is None:\n        fail('Could not parse changelog')\n\n    version, release_date, codename = rv\n    dev_version = bump_version(version) + '.dev'\n\n    info(\n        'Releasing %s (codename %s, release date %s)',\n        version, codename, release_date.strftime('%d/%m/%Y')\n    )\n    tags = get_git_tags()\n\n    if version in tags:\n        fail('Version \"%s\" is already tagged', version)\n\n    if release_date.date() != date.today():\n        fail(\n            'Release date is not today (%s != %s)',\n            release_date.date(), date.today()\n        )\n\n    if not git_is_clean():\n        fail('You have uncommitted changes in git')\n\n    try:\n        import wheel  # noqa: F401\n    except ImportError:\n        fail('You need to install the wheel package.')\n\n    set_init_version(version)\n    make_git_commit('Bump version number to %s', version)\n    make_git_tag(version)\n    build()\n    set_init_version(dev_version)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "The Python micro framework for building web applications.", "file_name": "make-release.py", "id": "4556acca50e439c2487ecee935f269a9", "language": "Python", "project_name": "flask", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/pallets-flask/pallets-flask-a2ea186/scripts/make-release.py", "save_time": "", "source": "", "update_at": "2018-03-14T00:33:44Z", "url": "https://github.com/pallets/flask", "wiki": false}