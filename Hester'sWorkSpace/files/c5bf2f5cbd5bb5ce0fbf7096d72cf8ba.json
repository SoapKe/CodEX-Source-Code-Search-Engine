{"author": "tornadoweb", "code": "\n\n A simple benchmark of the tornado.gen module.\n Runs in two modes, testing new-style (@coroutine and Futures)\n and old-style (@engine and Tasks) coroutines.\n\nfrom timeit import Timer\n\nfrom tornado import gen\nfrom tornado.options import options, define, parse_command_line\n\ndefine('num', default=10000, help='number of iterations')\n\n These benchmarks are delicate.  They hit various fast-paths in the gen\n machinery in order to stay synchronous so we don't need an IOLoop.\n This removes noise from the results, but it's easy to change things\n in a way that completely invalidates the results.\n\n\n@gen.engine\ndef e2(callback):\n    callback()\n\n\n@gen.engine\ndef e1():\n    for i in range(10):\n        yield gen.Task(e2)\n\n\n@gen.coroutine\ndef c2():\n    pass\n\n\n@gen.coroutine\ndef c1():\n    for i in range(10):\n        yield c2()\n\n\ndef main():\n    parse_command_line()\n    t = Timer(e1)\n    results = t.timeit(options.num) / options.num\n    print('engine: %0.3f ms per iteration' % (results * 1000))\n    t = Timer(c1)\n    results = t.timeit(options.num) / options.num\n    print('coroutine: %0.3f ms per iteration' % (results * 1000))\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "   usr bin env python       a simple benchmark tornado gen module     runs two modes  testing new style ( coroutine futures)    old style ( engine tasks) coroutines     these benchmarks delicate   they hit various fast paths gen    machinery order stay synchronous need ioloop     this removes noise results  easy change things    way completely invalidates results  ", "content": "#!/usr/bin/env python\n#\n# A simple benchmark of the tornado.gen module.\n# Runs in two modes, testing new-style (@coroutine and Futures)\n# and old-style (@engine and Tasks) coroutines.\n\nfrom timeit import Timer\n\nfrom tornado import gen\nfrom tornado.options import options, define, parse_command_line\n\ndefine('num', default=10000, help='number of iterations')\n\n# These benchmarks are delicate.  They hit various fast-paths in the gen\n# machinery in order to stay synchronous so we don't need an IOLoop.\n# This removes noise from the results, but it's easy to change things\n# in a way that completely invalidates the results.\n\n\n@gen.engine\ndef e2(callback):\n    callback()\n\n\n@gen.engine\ndef e1():\n    for i in range(10):\n        yield gen.Task(e2)\n\n\n@gen.coroutine\ndef c2():\n    pass\n\n\n@gen.coroutine\ndef c1():\n    for i in range(10):\n        yield c2()\n\n\ndef main():\n    parse_command_line()\n    t = Timer(e1)\n    results = t.timeit(options.num) / options.num\n    print('engine: %0.3f ms per iteration' % (results * 1000))\n    t = Timer(c1)\n    results = t.timeit(options.num) / options.num\n    print('coroutine: %0.3f ms per iteration' % (results * 1000))\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Tornado is a Python web framework and asynchronous networking library, originally developed at FriendFeed.", "file_name": "gen_benchmark.py", "id": "c5bf2f5cbd5bb5ce0fbf7096d72cf8ba", "language": "Python", "project_name": "tornado", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tornadoweb-tornado/tornadoweb-tornado-62e43f6/demos/benchmark/gen_benchmark.py", "save_time": "", "source": "", "update_at": "2018-03-13T23:11:42Z", "url": "https://github.com/tornadoweb/tornado", "wiki": true}