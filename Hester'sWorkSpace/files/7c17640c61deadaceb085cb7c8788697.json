{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport pytest\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_asm_policy import V1Parameters\n    from library.bigip_asm_policy import V2Parameters\n    from library.bigip_asm_policy import ModuleManager\n    from library.bigip_asm_policy import V1Manager\n    from library.bigip_asm_policy import V2Manager\n    from library.bigip_asm_policy import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_asm_policy import V1Parameters\n        from ansible.modules.network.f5.bigip_asm_policy import V2Parameters\n        from ansible.modules.network.f5.bigip_asm_policy import ModuleManager\n        from ansible.modules.network.f5.bigip_asm_policy import V1Manager\n        from ansible.modules.network.f5.bigip_asm_policy import V2Manager\n        from ansible.modules.network.f5.bigip_asm_policy import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n    with open(path) as f:\n        data = f.read()\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            name='fake_policy',\n            state='present',\n            file='/var/fake/fake.xml'\n        )\n\n        p = V1Parameters(params=args)\n        assert p.name == 'fake_policy'\n        assert p.state == 'present'\n        assert p.file == '/var/fake/fake.xml'\n\n    def test_module_parameters_template(self):\n        args = dict(\n            name='fake_policy',\n            state='present',\n            template='LotusDomino 6.5 (http)'\n        )\n\n        p = V1Parameters(params=args)\n        assert p.name == 'fake_policy'\n        assert p.state == 'present'\n        assert p.template == 'POLICY_TEMPLATE_LOTUSDOMINO_6_5_HTTP'\n\n\nclass TestManager(unittest.TestCase):\n    def setUp(self):\n        self.spec = ArgumentSpec()\n        self.policy = os.path.join(fixture_path, 'fake_policy.xml')\n        self.patcher1 = patch('time.sleep')\n        self.patcher1.start()\n\n    def tearDown(self):\n        self.patcher1.stop()\n\n    def test_activate_import_from_file(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            file=self.policy,\n            state='present',\n            active='yes',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode,\n        )\n\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=False)\n        v1.import_to_device = Mock(return_value=True)\n        v1.wait_for_task = Mock(side_effect=[True, True])\n        v1.read_current_from_device = Mock(return_value=current)\n        v1.apply_on_device = Mock(return_value=True)\n        v1.remove_temp_policy_from_device = Mock(return_value=True)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_policy'\n        assert results['file'] == self.policy\n        assert results['active'] is True\n\n    def test_activate_import_from_template(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            template='OWA Exchange 2007 (https)',\n            state='present',\n            active='yes',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=False)\n        v1.import_to_device = Mock(return_value=True)\n        v1.wait_for_task = Mock(side_effect=[True, True])\n        v1.read_current_from_device = Mock(return_value=current)\n        v1.apply_on_device = Mock(return_value=True)\n        v1.create_from_template_on_device = Mock(return_value=True)\n        v1._file_is_missing = Mock(return_value=False)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_policy'\n        assert results['template'] == 'OWA Exchange 2007 (https)'\n        assert results['active'] is True\n\n    def test_activate_create_by_name(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='present',\n            active='yes',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=False)\n        v1.import_to_device = Mock(return_value=True)\n        v1.wait_for_task = Mock(side_effect=[True, True])\n        v1.create_on_device = Mock(return_value=True)\n        v1.create_blank = Mock(return_value=True)\n        v1.read_current_from_device = Mock(return_value=current)\n        v1.apply_on_device = Mock(return_value=True)\n        v1._file_is_missing = Mock(return_value=False)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_policy'\n        assert results['active'] is True\n\n    def test_activate_policy_exists_inactive(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='present',\n            active='yes',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=True)\n        v1.update_on_device = Mock(return_value=True)\n        v1.wait_for_task = Mock(side_effect=[True, True])\n        v1.read_current_from_device = Mock(return_value=current)\n        v1.apply_on_device = Mock(return_value=True)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['active'] is True\n\n    def test_activate_policy_exists_active(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='present',\n            active='yes',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_active.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=True)\n        v1.read_current_from_device = Mock(return_value=current)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n\n    def test_deactivate_policy_exists_active(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='present',\n            server='localhost',\n            password='password',\n            user='admin',\n            active='no'\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_active.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=True)\n        v1.read_current_from_device = Mock(return_value=current)\n        v1.update_on_device = Mock(return_value=True)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['active'] is False\n\n    def test_deactivate_policy_exists_inactive(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='present',\n            server='localhost',\n            password='password',\n            user='admin',\n            active='no'\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=True)\n        v1.read_current_from_device = Mock(return_value=current)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n\n    def test_import_from_file(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            file=self.policy,\n            state='present',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=False)\n        v1.import_to_device = Mock(return_value=True)\n        v1.wait_for_task = Mock(side_effect=[True, True])\n        v1.read_current_from_device = Mock(return_value=current)\n        v1.remove_temp_policy_from_device = Mock(return_value=True)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_policy'\n        assert results['file'] == self.policy\n        assert results['active'] is False\n\n    def test_import_from_template(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            template='LotusDomino 6.5 (http)',\n            state='present',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=False)\n        v1.create_from_template_on_device = Mock(return_value=True)\n        v1.wait_for_task = Mock(side_effect=[True, True])\n        v1.read_current_from_device = Mock(return_value=current)\n        v1._file_is_missing = Mock(return_value=False)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_policy'\n        assert results['template'] == 'LotusDomino 6.5 (http)'\n        assert results['active'] is False\n\n    def test_create_by_name(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='present',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=False)\n        v1.import_to_device = Mock(return_value=True)\n        v1.wait_for_task = Mock(side_effect=[True, True])\n        v1.create_on_device = Mock(return_value=True)\n        v1.create_blank = Mock(return_value=True)\n        v1.read_current_from_device = Mock(return_value=current)\n        v1.apply_on_device = Mock(return_value=True)\n        v1._file_is_missing = Mock(return_value=False)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_policy'\n        assert results['active'] is False\n\n    def test_delete_policy(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='absent',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(side_effect=[True, False])\n        v1.remove_from_device = Mock(return_value=True)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_policy_import_raises(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            file=self.policy,\n            state='present',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        msg = 'Import policy task failed.'\n         Override methods to force specific logic in the module to happen\n        v2 = V2Manager(module=module)\n        v2.exists = Mock(return_value=False)\n        v2.import_to_device = Mock(return_value=True)\n        v2.wait_for_task = Mock(return_value=False)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v2)\n\n        with pytest.raises(F5ModuleError) as err:\n            mm.exec_module()\n        assert str(err.value) == msg\n\n    def test_activate_policy_raises(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='present',\n            active='yes',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        msg = 'Apply policy task failed.'\n         Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=True)\n        v1.wait_for_task = Mock(return_value=False)\n        v1.update_on_device = Mock(return_value=True)\n        v1.read_current_from_device = Mock(return_value=current)\n        v1.apply_on_device = Mock(return_value=True)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        with pytest.raises(F5ModuleError) as err:\n            mm.exec_module()\n        assert str(err.value) == msg\n\n    def test_create_policy_raises(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='present',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        msg = 'Failed to create ASM policy: fake_policy'\n         Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=False)\n        v1.create_on_device = Mock(return_value=False)\n        v1._file_is_missing = Mock(return_value=False)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        with pytest.raises(F5ModuleError) as err:\n            mm.exec_module()\n        assert str(err.value) == msg\n\n    def test_delete_policy_raises(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='absent',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        msg = 'Failed to delete ASM policy: fake_policy'\n         Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(side_effect=[True, True])\n        v1.remove_from_device = Mock(return_value=True)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        with pytest.raises(F5ModuleError) as err:\n            mm.exec_module()\n        assert str(err.value) == msg\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport pytest\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_asm_policy import V1Parameters\n    from library.bigip_asm_policy import V2Parameters\n    from library.bigip_asm_policy import ModuleManager\n    from library.bigip_asm_policy import V1Manager\n    from library.bigip_asm_policy import V2Manager\n    from library.bigip_asm_policy import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_asm_policy import V1Parameters\n        from ansible.modules.network.f5.bigip_asm_policy import V2Parameters\n        from ansible.modules.network.f5.bigip_asm_policy import ModuleManager\n        from ansible.modules.network.f5.bigip_asm_policy import V1Manager\n        from ansible.modules.network.f5.bigip_asm_policy import V2Manager\n        from ansible.modules.network.f5.bigip_asm_policy import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n    with open(path) as f:\n        data = f.read()\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            name='fake_policy',\n            state='present',\n            file='/var/fake/fake.xml'\n        )\n\n        p = V1Parameters(params=args)\n        assert p.name == 'fake_policy'\n        assert p.state == 'present'\n        assert p.file == '/var/fake/fake.xml'\n\n    def test_module_parameters_template(self):\n        args = dict(\n            name='fake_policy',\n            state='present',\n            template='LotusDomino 6.5 (http)'\n        )\n\n        p = V1Parameters(params=args)\n        assert p.name == 'fake_policy'\n        assert p.state == 'present'\n        assert p.template == 'POLICY_TEMPLATE_LOTUSDOMINO_6_5_HTTP'\n\n\nclass TestManager(unittest.TestCase):\n    def setUp(self):\n        self.spec = ArgumentSpec()\n        self.policy = os.path.join(fixture_path, 'fake_policy.xml')\n        self.patcher1 = patch('time.sleep')\n        self.patcher1.start()\n\n    def tearDown(self):\n        self.patcher1.stop()\n\n    def test_activate_import_from_file(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            file=self.policy,\n            state='present',\n            active='yes',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode,\n        )\n\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=False)\n        v1.import_to_device = Mock(return_value=True)\n        v1.wait_for_task = Mock(side_effect=[True, True])\n        v1.read_current_from_device = Mock(return_value=current)\n        v1.apply_on_device = Mock(return_value=True)\n        v1.remove_temp_policy_from_device = Mock(return_value=True)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_policy'\n        assert results['file'] == self.policy\n        assert results['active'] is True\n\n    def test_activate_import_from_template(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            template='OWA Exchange 2007 (https)',\n            state='present',\n            active='yes',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=False)\n        v1.import_to_device = Mock(return_value=True)\n        v1.wait_for_task = Mock(side_effect=[True, True])\n        v1.read_current_from_device = Mock(return_value=current)\n        v1.apply_on_device = Mock(return_value=True)\n        v1.create_from_template_on_device = Mock(return_value=True)\n        v1._file_is_missing = Mock(return_value=False)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_policy'\n        assert results['template'] == 'OWA Exchange 2007 (https)'\n        assert results['active'] is True\n\n    def test_activate_create_by_name(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='present',\n            active='yes',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=False)\n        v1.import_to_device = Mock(return_value=True)\n        v1.wait_for_task = Mock(side_effect=[True, True])\n        v1.create_on_device = Mock(return_value=True)\n        v1.create_blank = Mock(return_value=True)\n        v1.read_current_from_device = Mock(return_value=current)\n        v1.apply_on_device = Mock(return_value=True)\n        v1._file_is_missing = Mock(return_value=False)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_policy'\n        assert results['active'] is True\n\n    def test_activate_policy_exists_inactive(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='present',\n            active='yes',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=True)\n        v1.update_on_device = Mock(return_value=True)\n        v1.wait_for_task = Mock(side_effect=[True, True])\n        v1.read_current_from_device = Mock(return_value=current)\n        v1.apply_on_device = Mock(return_value=True)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['active'] is True\n\n    def test_activate_policy_exists_active(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='present',\n            active='yes',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_active.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=True)\n        v1.read_current_from_device = Mock(return_value=current)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n\n    def test_deactivate_policy_exists_active(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='present',\n            server='localhost',\n            password='password',\n            user='admin',\n            active='no'\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_active.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=True)\n        v1.read_current_from_device = Mock(return_value=current)\n        v1.update_on_device = Mock(return_value=True)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['active'] is False\n\n    def test_deactivate_policy_exists_inactive(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='present',\n            server='localhost',\n            password='password',\n            user='admin',\n            active='no'\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=True)\n        v1.read_current_from_device = Mock(return_value=current)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n\n    def test_import_from_file(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            file=self.policy,\n            state='present',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=False)\n        v1.import_to_device = Mock(return_value=True)\n        v1.wait_for_task = Mock(side_effect=[True, True])\n        v1.read_current_from_device = Mock(return_value=current)\n        v1.remove_temp_policy_from_device = Mock(return_value=True)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_policy'\n        assert results['file'] == self.policy\n        assert results['active'] is False\n\n    def test_import_from_template(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            template='LotusDomino 6.5 (http)',\n            state='present',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=False)\n        v1.create_from_template_on_device = Mock(return_value=True)\n        v1.wait_for_task = Mock(side_effect=[True, True])\n        v1.read_current_from_device = Mock(return_value=current)\n        v1._file_is_missing = Mock(return_value=False)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_policy'\n        assert results['template'] == 'LotusDomino 6.5 (http)'\n        assert results['active'] is False\n\n    def test_create_by_name(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='present',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=False)\n        v1.import_to_device = Mock(return_value=True)\n        v1.wait_for_task = Mock(side_effect=[True, True])\n        v1.create_on_device = Mock(return_value=True)\n        v1.create_blank = Mock(return_value=True)\n        v1.read_current_from_device = Mock(return_value=current)\n        v1.apply_on_device = Mock(return_value=True)\n        v1._file_is_missing = Mock(return_value=False)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_policy'\n        assert results['active'] is False\n\n    def test_delete_policy(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='absent',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(side_effect=[True, False])\n        v1.remove_from_device = Mock(return_value=True)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_policy_import_raises(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            file=self.policy,\n            state='present',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        msg = 'Import policy task failed.'\n        # Override methods to force specific logic in the module to happen\n        v2 = V2Manager(module=module)\n        v2.exists = Mock(return_value=False)\n        v2.import_to_device = Mock(return_value=True)\n        v2.wait_for_task = Mock(return_value=False)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v2)\n\n        with pytest.raises(F5ModuleError) as err:\n            mm.exec_module()\n        assert str(err.value) == msg\n\n    def test_activate_policy_raises(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='present',\n            active='yes',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        current = V1Parameters(params=load_fixture('load_asm_policy_inactive.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        msg = 'Apply policy task failed.'\n        # Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=True)\n        v1.wait_for_task = Mock(return_value=False)\n        v1.update_on_device = Mock(return_value=True)\n        v1.read_current_from_device = Mock(return_value=current)\n        v1.apply_on_device = Mock(return_value=True)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        with pytest.raises(F5ModuleError) as err:\n            mm.exec_module()\n        assert str(err.value) == msg\n\n    def test_create_policy_raises(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='present',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        msg = 'Failed to create ASM policy: fake_policy'\n        # Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(return_value=False)\n        v1.create_on_device = Mock(return_value=False)\n        v1._file_is_missing = Mock(return_value=False)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        with pytest.raises(F5ModuleError) as err:\n            mm.exec_module()\n        assert str(err.value) == msg\n\n    def test_delete_policy_raises(self, *args):\n        set_module_args(dict(\n            name='fake_policy',\n            state='absent',\n            server='localhost',\n            password='password',\n            user='admin',\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        msg = 'Failed to delete ASM policy: fake_policy'\n        # Override methods to force specific logic in the module to happen\n        v1 = V1Manager(module=module)\n        v1.exists = Mock(side_effect=[True, True])\n        v1.remove_from_device = Mock(return_value=True)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=v1)\n\n        with pytest.raises(F5ModuleError) as err:\n            mm.exec_module()\n        assert str(err.value) == msg\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_asm_policy.py", "id": "7c17640c61deadaceb085cb7c8788697", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_asm_policy.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}