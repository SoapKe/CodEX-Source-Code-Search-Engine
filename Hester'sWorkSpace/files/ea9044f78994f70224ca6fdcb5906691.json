{"author": "XX-net", "code": "\n\n\nimport sys\nimport os\n\n\ncurrent_path = os.path.dirname(os.path.abspath(__file__))\nroot_path = os.path.abspath( os.path.join(current_path, os.pardir, os.pardir, os.pardir))\ndata_path = os.path.abspath(os.path.join(root_path, os.pardir, os.pardir, 'data'))\nmodule_data_path = os.path.join(data_path, 'x_tunnel')\npython_path = os.path.abspath( os.path.join(root_path, 'python27', '1.0'))\n\nsys.path.append(root_path)\n\nnoarch_lib = os.path.abspath( os.path.join(python_path, 'lib', 'noarch'))\nsys.path.append(noarch_lib)\n\nif sys.platform == \"win32\":\n    win32_lib = os.path.abspath( os.path.join(python_path, 'lib', 'win32'))\n    sys.path.append(win32_lib)\nelif sys.platform.startswith(\"linux\"):\n    linux_lib = os.path.abspath( os.path.join(python_path, 'lib', 'linux'))\n    sys.path.append(linux_lib)\nelif sys.platform == \"darwin\":\n    darwin_lib = os.path.abspath( os.path.join(python_path, 'lib', 'darwin'))\n    sys.path.append(darwin_lib)\n    extra_lib = \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python\"\n    sys.path.append(extra_lib)\n\n\n\nimport xlog\nlogger = xlog.getLogger(\"tls_relay\")\nlogger.set_buffer(500)\n\nfrom front_base.openssl_wrap import SSLContext\nfrom front_base.connect_creator import ConnectCreator\nfrom front_base.check_ip import CheckIp\n\n\nfrom config import Config\n\n\nif __name__ == \"__main__\":\n    \n    # case 2: ip + domain\n    \n\n    if len(sys.argv) > 1:\n        ip = sys.argv[1]\n    else:\n        ip = \"207.246.89.177\"\n        print(\"Usage: check_ip.py [ip] [top_domain] [wait_time=0]\")\n    print(\"test ip:%s\" % ip)\n\n    if len(sys.argv) > 2:\n        top_domain = sys.argv[2]\n    else:\n        top_domain = None\n\n    if len(sys.argv) > 3:\n        wait_time = int(sys.argv[3])\n    else:\n        wait_time = 0\n\n    config_path = os.path.join(module_data_path, \"tls_relay.json\")\n    config = Config(config_path)\n\n    openssl_context = SSLContext(logger)\n\n    connect_creator = ConnectCreator(logger, config, openssl_context)\n    check_ip = CheckIp(logger, config, connect_creator)\n\n    res = check_ip.check_ip(ip, top_domain=top_domain, wait_time=wait_time)\n    if not res:\n        print(\"connect fail\")\n    elif res.ok:\n        print(\"success, domain:%s handshake:%d\" % (res.top_domain, res.handshake_time))\n    else:\n        print(\"not support\")", "comments": "   usr bin env python2    coding utf 8    case 1  ip    case 2  ip   domain       connect use domain ", "content": "#!/usr/bin/env python2\n# coding:utf-8\n\nimport sys\nimport os\n\n\ncurrent_path = os.path.dirname(os.path.abspath(__file__))\nroot_path = os.path.abspath( os.path.join(current_path, os.pardir, os.pardir, os.pardir))\ndata_path = os.path.abspath(os.path.join(root_path, os.pardir, os.pardir, 'data'))\nmodule_data_path = os.path.join(data_path, 'x_tunnel')\npython_path = os.path.abspath( os.path.join(root_path, 'python27', '1.0'))\n\nsys.path.append(root_path)\n\nnoarch_lib = os.path.abspath( os.path.join(python_path, 'lib', 'noarch'))\nsys.path.append(noarch_lib)\n\nif sys.platform == \"win32\":\n    win32_lib = os.path.abspath( os.path.join(python_path, 'lib', 'win32'))\n    sys.path.append(win32_lib)\nelif sys.platform.startswith(\"linux\"):\n    linux_lib = os.path.abspath( os.path.join(python_path, 'lib', 'linux'))\n    sys.path.append(linux_lib)\nelif sys.platform == \"darwin\":\n    darwin_lib = os.path.abspath( os.path.join(python_path, 'lib', 'darwin'))\n    sys.path.append(darwin_lib)\n    extra_lib = \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python\"\n    sys.path.append(extra_lib)\n\n\n\nimport xlog\nlogger = xlog.getLogger(\"tls_relay\")\nlogger.set_buffer(500)\n\nfrom front_base.openssl_wrap import SSLContext\nfrom front_base.connect_creator import ConnectCreator\nfrom front_base.check_ip import CheckIp\n\n\nfrom config import Config\n\n\nif __name__ == \"__main__\":\n    # case 1: only ip\n    # case 2: ip + domain\n    #    connect use domain\n\n    if len(sys.argv) > 1:\n        ip = sys.argv[1]\n    else:\n        ip = \"207.246.89.177\"\n        print(\"Usage: check_ip.py [ip] [top_domain] [wait_time=0]\")\n    print(\"test ip:%s\" % ip)\n\n    if len(sys.argv) > 2:\n        top_domain = sys.argv[2]\n    else:\n        top_domain = None\n\n    if len(sys.argv) > 3:\n        wait_time = int(sys.argv[3])\n    else:\n        wait_time = 0\n\n    config_path = os.path.join(module_data_path, \"tls_relay.json\")\n    config = Config(config_path)\n\n    openssl_context = SSLContext(logger)\n\n    connect_creator = ConnectCreator(logger, config, openssl_context)\n    check_ip = CheckIp(logger, config, connect_creator)\n\n    res = check_ip.check_ip(ip, top_domain=top_domain, wait_time=wait_time)\n    if not res:\n        print(\"connect fail\")\n    elif res.ok:\n        print(\"success, domain:%s handshake:%d\" % (res.top_domain, res.handshake_time))\n    else:\n        print(\"not support\")", "description": "a web proxy tool", "file_name": "check_ip.py", "id": "ea9044f78994f70224ca6fdcb5906691", "language": "Python", "project_name": "XX-Net", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/XX-net-XX-Net/XX-net-XX-Net-673a005/code/default/x_tunnel/local/tls_relay_front/check_ip.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:03Z", "url": "https://github.com/XX-net/XX-Net", "wiki": true}