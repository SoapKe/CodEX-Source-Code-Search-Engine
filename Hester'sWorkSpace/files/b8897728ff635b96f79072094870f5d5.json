{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import int_or_none\n\n\nclass PyvideoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?pyvideo\\.org/(?P<category>[^/]+)/(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'http://pyvideo.org/pycon-us-2013/become-a-logging-expert-in-30-minutes.html',\n        'info_dict': {\n            'id': 'become-a-logging-expert-in-30-minutes',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://pyvideo.org/pygotham-2012/gloriajw-spotifywitherikbernhardsson182m4v.html',\n        'md5': '5fe1c7e0a8aa5570330784c847ff6d12',\n        'info_dict': {\n            'id': '2542',\n            'ext': 'm4v',\n            'title': 'Gloriajw-SpotifyWithErikBernhardsson182.m4v',\n        },\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        category = mobj.group('category')\n        video_id = mobj.group('id')\n\n        entries = []\n\n        data = self._download_json(\n            'https://raw.githubusercontent.com/pyvideo/data/master/%s/videos/%s.json'\n            % (category, video_id), video_id, fatal=False)\n\n        if data:\n            for video in data['videos']:\n                video_url = video.get('url')\n                if video_url:\n                    if video.get('type') == 'youtube':\n                        entries.append(self.url_result(video_url, 'Youtube'))\n                    else:\n                        entries.append({\n                            'id': compat_str(data.get('id') or video_id),\n                            'url': video_url,\n                            'title': data['title'],\n                            'description': data.get('description') or data.get('summary'),\n                            'thumbnail': data.get('thumbnail_url'),\n                            'duration': int_or_none(data.get('duration')),\n                        })\n        else:\n            webpage = self._download_webpage(url, video_id)\n            title = self._og_search_title(webpage)\n            media_urls = self._search_regex(\n                r'(?s)Media URL:(.+?)</li>', webpage, 'media urls')\n            for m in re.finditer(\n                    r'<a[^>]+href=([\"\\'])(?P<url>http.+?)\\1', media_urls):\n                media_url = m.group('url')\n                if re.match(r'https?://www\\.youtube\\.com/watch\\?v=.*', media_url):\n                    entries.append(self.url_result(media_url, 'Youtube'))\n                else:\n                    entries.append({\n                        'id': video_id,\n                        'url': media_url,\n                        'title': title,\n                    })\n\n        return self.playlist_result(entries, video_id)\n", "comments": "#&.]+)'\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import int_or_none\n\n\nclass PyvideoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?pyvideo\\.org/(?P<category>[^/]+)/(?P<id>[^/?#&.]+)'\n\n    _TESTS = [{\n        'url': 'http://pyvideo.org/pycon-us-2013/become-a-logging-expert-in-30-minutes.html',\n        'info_dict': {\n            'id': 'become-a-logging-expert-in-30-minutes',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://pyvideo.org/pygotham-2012/gloriajw-spotifywitherikbernhardsson182m4v.html',\n        'md5': '5fe1c7e0a8aa5570330784c847ff6d12',\n        'info_dict': {\n            'id': '2542',\n            'ext': 'm4v',\n            'title': 'Gloriajw-SpotifyWithErikBernhardsson182.m4v',\n        },\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        category = mobj.group('category')\n        video_id = mobj.group('id')\n\n        entries = []\n\n        data = self._download_json(\n            'https://raw.githubusercontent.com/pyvideo/data/master/%s/videos/%s.json'\n            % (category, video_id), video_id, fatal=False)\n\n        if data:\n            for video in data['videos']:\n                video_url = video.get('url')\n                if video_url:\n                    if video.get('type') == 'youtube':\n                        entries.append(self.url_result(video_url, 'Youtube'))\n                    else:\n                        entries.append({\n                            'id': compat_str(data.get('id') or video_id),\n                            'url': video_url,\n                            'title': data['title'],\n                            'description': data.get('description') or data.get('summary'),\n                            'thumbnail': data.get('thumbnail_url'),\n                            'duration': int_or_none(data.get('duration')),\n                        })\n        else:\n            webpage = self._download_webpage(url, video_id)\n            title = self._og_search_title(webpage)\n            media_urls = self._search_regex(\n                r'(?s)Media URL:(.+?)</li>', webpage, 'media urls')\n            for m in re.finditer(\n                    r'<a[^>]+href=([\"\\'])(?P<url>http.+?)\\1', media_urls):\n                media_url = m.group('url')\n                if re.match(r'https?://www\\.youtube\\.com/watch\\?v=.*', media_url):\n                    entries.append(self.url_result(media_url, 'Youtube'))\n                else:\n                    entries.append({\n                        'id': video_id,\n                        'url': media_url,\n                        'title': title,\n                    })\n\n        return self.playlist_result(entries, video_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "pyvideo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/pyvideo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}