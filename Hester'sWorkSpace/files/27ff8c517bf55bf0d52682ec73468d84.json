{"author": "pandas-dev", "code": "from datetime import datetime\n\nimport numpy as np\nimport pandas.util.testing as tm\nfrom pandas import Series, date_range, NaT\n\nfrom .pandas_vb_common import setup  \n\n\nclass SeriesConstructor(object):\n\n    goal_time = 0.2\n    params = [None, 'dict']\n    param_names = ['data']\n\n    def setup(self, data):\n        self.idx = date_range(start=datetime(2015, 10, 26),\n                              end=datetime(2016, 1, 1),\n                              freq='50s')\n        dict_data = dict(zip(self.idx, range(len(self.idx))))\n        self.data = None if data is None else dict_data\n\n    def time_constructor(self, data):\n        Series(data=self.data, index=self.idx)\n\n\nclass IsIn(object):\n\n    goal_time = 0.2\n    params = ['int64', 'object']\n    param_names = ['dtype']\n\n    def setup(self, dtype):\n        self.s = Series(np.random.randint(1, 10, 100000)).astype(dtype)\n        self.values = [1, 2]\n\n    def time_isin(self, dtypes):\n        self.s.isin(self.values)\n\n\nclass NSort(object):\n\n    goal_time = 0.2\n    params = ['last', 'first']\n    param_names = ['keep']\n\n    def setup(self, keep):\n        self.s = Series(np.random.randint(1, 10, 100000))\n\n    def time_nlargest(self, keep):\n        self.s.nlargest(3, keep=keep)\n\n    def time_nsmallest(self, keep):\n        self.s.nsmallest(3, keep=keep)\n\n\nclass Dropna(object):\n\n    goal_time = 0.2\n    params = ['int', 'datetime']\n    param_names = ['dtype']\n\n    def setup(self, dtype):\n        N = 10**6\n        data = {'int': np.random.randint(1, 10, N),\n                'datetime': date_range('2000-01-01', freq='S', periods=N)}\n        self.s = Series(data[dtype])\n        if dtype == 'datetime':\n            self.s[np.random.randint(1, N, 100)] = NaT\n\n    def time_dropna(self, dtype):\n        self.s.dropna()\n\n\nclass Map(object):\n\n    goal_time = 0.2\n    params = ['dict', 'Series']\n    param_names = 'mapper'\n\n    def setup(self, mapper):\n        map_size = 1000\n        map_data = Series(map_size - np.arange(map_size))\n        self.map_data = map_data if mapper == 'Series' else map_data.to_dict()\n        self.s = Series(np.random.randint(0, map_size, 10000))\n\n    def time_map(self, mapper):\n        self.s.map(self.map_data)\n\n\nclass Clip(object):\n\n    goal_time = 0.2\n\n    def setup(self):\n        self.s = Series(np.random.randn(50))\n\n    def time_clip(self):\n        self.s.clip(0, 1)\n\n\nclass ValueCounts(object):\n\n    goal_time = 0.2\n    params = ['int', 'float', 'object']\n    param_names = ['dtype']\n\n    def setup(self, dtype):\n        self.s = Series(np.random.randint(0, 1000, size=100000)).astype(dtype)\n\n    def time_value_counts(self, dtype):\n        self.s.value_counts()\n\n\nclass Dir(object):\n\n    goal_time = 0.2\n\n    def setup(self):\n        self.s = Series(index=tm.makeStringIndex(10000))\n\n    def time_dir_strings(self):\n        dir(self.s)\n", "comments": "noqa", "content": "from datetime import datetime\n\nimport numpy as np\nimport pandas.util.testing as tm\nfrom pandas import Series, date_range, NaT\n\nfrom .pandas_vb_common import setup  # noqa\n\n\nclass SeriesConstructor(object):\n\n    goal_time = 0.2\n    params = [None, 'dict']\n    param_names = ['data']\n\n    def setup(self, data):\n        self.idx = date_range(start=datetime(2015, 10, 26),\n                              end=datetime(2016, 1, 1),\n                              freq='50s')\n        dict_data = dict(zip(self.idx, range(len(self.idx))))\n        self.data = None if data is None else dict_data\n\n    def time_constructor(self, data):\n        Series(data=self.data, index=self.idx)\n\n\nclass IsIn(object):\n\n    goal_time = 0.2\n    params = ['int64', 'object']\n    param_names = ['dtype']\n\n    def setup(self, dtype):\n        self.s = Series(np.random.randint(1, 10, 100000)).astype(dtype)\n        self.values = [1, 2]\n\n    def time_isin(self, dtypes):\n        self.s.isin(self.values)\n\n\nclass NSort(object):\n\n    goal_time = 0.2\n    params = ['last', 'first']\n    param_names = ['keep']\n\n    def setup(self, keep):\n        self.s = Series(np.random.randint(1, 10, 100000))\n\n    def time_nlargest(self, keep):\n        self.s.nlargest(3, keep=keep)\n\n    def time_nsmallest(self, keep):\n        self.s.nsmallest(3, keep=keep)\n\n\nclass Dropna(object):\n\n    goal_time = 0.2\n    params = ['int', 'datetime']\n    param_names = ['dtype']\n\n    def setup(self, dtype):\n        N = 10**6\n        data = {'int': np.random.randint(1, 10, N),\n                'datetime': date_range('2000-01-01', freq='S', periods=N)}\n        self.s = Series(data[dtype])\n        if dtype == 'datetime':\n            self.s[np.random.randint(1, N, 100)] = NaT\n\n    def time_dropna(self, dtype):\n        self.s.dropna()\n\n\nclass Map(object):\n\n    goal_time = 0.2\n    params = ['dict', 'Series']\n    param_names = 'mapper'\n\n    def setup(self, mapper):\n        map_size = 1000\n        map_data = Series(map_size - np.arange(map_size))\n        self.map_data = map_data if mapper == 'Series' else map_data.to_dict()\n        self.s = Series(np.random.randint(0, map_size, 10000))\n\n    def time_map(self, mapper):\n        self.s.map(self.map_data)\n\n\nclass Clip(object):\n\n    goal_time = 0.2\n\n    def setup(self):\n        self.s = Series(np.random.randn(50))\n\n    def time_clip(self):\n        self.s.clip(0, 1)\n\n\nclass ValueCounts(object):\n\n    goal_time = 0.2\n    params = ['int', 'float', 'object']\n    param_names = ['dtype']\n\n    def setup(self, dtype):\n        self.s = Series(np.random.randint(0, 1000, size=100000)).astype(dtype)\n\n    def time_value_counts(self, dtype):\n        self.s.value_counts()\n\n\nclass Dir(object):\n\n    goal_time = 0.2\n\n    def setup(self):\n        self.s = Series(index=tm.makeStringIndex(10000))\n\n    def time_dir_strings(self):\n        dir(self.s)\n", "description": "Flexible and powerful data analysis / manipulation library for Python, providing labeled data structures similar to R data.frame objects, statistical functions, and much more", "file_name": "series_methods.py", "id": "27ff8c517bf55bf0d52682ec73468d84", "language": "Python", "project_name": "pandas", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/pandas-dev-pandas/pandas-dev-pandas-3783ccc/asv_bench/benchmarks/series_methods.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:47:21Z", "url": "https://github.com/pandas-dev/pandas", "wiki": true}