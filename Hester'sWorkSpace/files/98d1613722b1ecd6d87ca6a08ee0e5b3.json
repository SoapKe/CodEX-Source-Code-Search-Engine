{"author": "Urinx", "code": "\n\n\n\nfrom wechat import WeChat\nfrom wechat.utils import *\nfrom wx_handler import WeChatMsgProcessor\nfrom wx_handler import Bot\nfrom wx_handler import SGMail\nfrom db import SqliteDB\nfrom db import MysqlDB\nfrom config import ConfigManager\nfrom config import Constant\nfrom config import Log\n\nfrom flask import Flask, render_template, send_file, jsonify, request\nimport threading\nimport traceback\nimport os\nimport logging\nimport time\n\n\n\ncm = ConfigManager()\ndb = SqliteDB(cm.getpath('database'))\n# db = MysqlDB(cm.mysql())\nwechat_msg_processor = WeChatMsgProcessor(db)\nwechat = WeChat(cm.get('wechat', 'host'))\nwechat.db = db\nwechat.bot = Bot()\nwechat.msg_handler = wechat_msg_processor\nwechat_msg_processor.wechat = wechat\n\nPORT = int(cm.get('setting', 'server_port'))\napp = Flask(__name__, template_folder='flask_templates')\napp.config['UPLOAD_FOLDER'] = cm.getpath('uploaddir')\n\nlogger = logging.getLogger('werkzeug')\nlog_format_str = Constant.SERVER_LOG_FORMAT\nformatter = logging.Formatter(log_format_str)\nflask_log_handler = logging.FileHandler(cm.getpath('server_log_file'))\nflask_log_handler.setLevel(logging.INFO)\nflask_log_handler.setFormatter(formatter)\nlogger.addHandler(flask_log_handler)\napp.logger.addHandler(flask_log_handler)\n\n\nsg_apikey = cm.get('sendgrid', 'api_key')\nfrom_email = cm.get('sendgrid', 'from_email')\nto_email = cm.get('sendgrid', 'to_email')\nsg = SGMail(sg_apikey, from_email, to_email)\n\n@app.route('/')\ndef index():\n    return render_template(Constant.SERVER_PAGE_INDEX)\n\n\n@app.route('/qrcode')\ndef qrcode():\n    qdir = cm.getpath('qrcodedir')\n    if not os.path.exists(qdir):\n        os.makedirs(qdir)\n    image_path = '%s/%s_%d.png' % (qdir, wechat.uuid, int(time.time()*100))\n    s = wechat.wx_conf['API_qrcode'] + wechat.uuid\n    str2qr_image(s, image_path)\n    return send_file(image_path, mimetype='image/png')\n\n\n@app.route(\"/group_list\")\ndef group_list():\n    \"\"\"\n    @brief      list groups\n    \"\"\"\n    result = wechat.db.select(Constant.TABLE_GROUP_LIST())\n    return jsonify({'count': len(result), 'group': result})\n\n\n@app.route('/group_member_list/<g_id>')\ndef group_member_list(g_id):\n    \"\"\"\n    @brief      list group member\n    @param      g_id String\n    \"\"\"\n    result = wechat.db.select(Constant.TABLE_GROUP_USER_LIST(), 'RoomID', g_id)\n    return jsonify({'count': len(result), 'member': result})\n\n\n@app.route('/group_chat_log/<g_name>')\ndef group_chat_log(g_name):\n    \"\"\"\n    @brief      list group chat log\n    @param      g_name String\n    \"\"\"\n    result = wechat.db.select(Constant.TABLE_GROUP_MSG_LOG, 'RoomName', g_name)\n    return jsonify({'count': len(result), 'chats': result})\n\n\n@app.route('/upload', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        def allowed_file(filename):\n            return '.' in filename and \\\n                filename.rsplit('.', 1)[1] in Constant.SERVER_UPLOAD_ALLOWED_EXTENSIONS\n\n        j = {'ret': 1, 'msg': ''}\n\n        \n        if 'file' not in request.files:\n            j['msg'] = 'No file part'\n            return jsonify(j)\n\n        \n        \n        file = request.files['file']\n        if file.filename == '':\n            j['msg'] = 'No selected file'\n        elif file and allowed_file(file.filename):\n            filename = generate_file_name(file.filename)\n            file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n            file.save(file_path)\n            j['ret'] = 0\n            j['msg'] = filename\n        else:\n            j['msg'] = 'File type not support'\n        return jsonify(j)\n    else:\n        return render_template(Constant.SERVER_PAGE_UPLOAD)\n\n\n@app.route('/send_msg/<to>/<msg>')\ndef send_msg(to, msg):\n    \"\"\"\n    @brief      send message to user or gourp\n    @param      to: String, user id or group id\n    @param      msg: String, words\n    \"\"\"\n    return jsonify({'ret': 0 if wechat.send_text(to, msg) else 1})\n\n\n@app.route('/send_img/<to>/<img>')\ndef send_img(to, img):\n    \"\"\"\n    @brief      send image to user or gourp\n    @param      to: String, user id or group id\n    @param      img: String, image file name\n    \"\"\"\n    img_path = os.path.join(app.config['UPLOAD_FOLDER'], img)\n    return jsonify({'ret': 0 if wechat.send_img(to, img_path) else 1})\n\n\n@app.route('/send_emot/<to>/<emot>')\ndef send_emot(to, emot):\n    \"\"\"\n    @brief      send emotion to user or gourp\n    @param      to: String, user id or group id\n    @param      emot: String, emotion file name\n    \"\"\"\n    emot_path = os.path.join(app.config['UPLOAD_FOLDER'], emot)\n    return jsonify({'ret': 0 if wechat.send_emot(to, emot_path) else 1})\n\n\n@app.route('/send_file/<to>/<file>')\ndef send_file(to, file):\n    \"\"\"\n    @brief      send file to user or gourp\n    @param      to: String, user id or group id\n    @param      file: String, file name\n    \"\"\"\n    file_path = os.path.join(app.config['UPLOAD_FOLDER'], file)\n    return jsonify({'ret': 0 if wechat.send_file(to, file_path) else 1})\n\n\ndef mass_send(method, data, func):\n    j = {'ret': -1, 'unsend_list':[]}\n    if method == 'POST' and data:\n        to_list = data['to_list']\n        msg = data['msg']\n        media_type = data.get('media_type', '')\n\n        if media_type in ['img', 'emot']:\n            file_path = os.path.join(app.config['UPLOAD_FOLDER'], msg)\n            response = wechat.webwxuploadmedia(file_path)\n            if response is not None:\n                msg = response['MediaId']\n        elif media_type == 'file':\n            file_path = os.path.join(app.config['UPLOAD_FOLDER'], msg)\n            data = {\n                'appid': Constant.API_WXAPPID,\n                'title': msg,\n                'totallen': '',\n                'attachid': '',\n                'type': wechat.wx_conf['APPMSGTYPE_ATTACH'],\n                'fileext': msg.split('.')[-1],\n            }\n            response = wechat.webwxuploadmedia(file_path)\n            if response is not None:\n                data['totallen'] = response['StartPos']\n                data['attachid'] = response['MediaId']\n            else:\n                Log.error('File upload error')\n            msg = data\n\n        for groups in split_array(to_list, 20):\n            for g in groups:\n                r = func(g, msg)\n                if not r:\n                    j['unsend_list'].append(g)\n            time.sleep(1)\n\n        j['ret'] = len(j['unsend_list'])\n\n    return j\n\n\n@app.route('/mass_send_msg/', methods=[\"GET\", \"POST\"])\ndef mass_send_msg():\n    \"\"\"\n    @brief      send text to mass users or gourps\n    \"\"\"\n    j = mass_send(request.method, request.json, wechat.send_text)\n    return jsonify(j)\n\n\n@app.route('/mass_send_img', methods=[\"GET\", \"POST\"])\ndef mass_send_img():\n    \"\"\"\n    @brief      send iamge to mass users or gourps\n    \"\"\"\n    j = mass_send(request.method, request.json, wechat.webwxsendmsgimg)\n    return jsonify(j)\n\n\n@app.route('/mass_send_emot', methods=[\"GET\", \"POST\"])\ndef mass_send_emot():\n    \"\"\"\n    @brief      send emoticon to mass users or gourps\n    \"\"\"\n    j = mass_send(request.method, request.json, wechat.webwxsendemoticon)\n    return jsonify(j)\n\n\n@app.route('/mass_send_file', methods=[\"GET\", \"POST\"])\ndef mass_send_file():\n    \"\"\"\n    @brief      send file to mass users or gourps\n    \"\"\"\n    j = mass_send(request.method, request.json, wechat.webwxsendappmsg)\n    return jsonify(j)\n\n\ndef run_server():\n    app.run(port=PORT)\n\nif cm.get('setting', 'server_mode') == 'True':\n    serverProcess = threading.Thread(target=run_server)\n    serverProcess.start()\n\nwhile True:\n    try:\n        wechat.start()\n    except KeyboardInterrupt:\n        echo(Constant.LOG_MSG_QUIT)\n        wechat.exit_code = 1\n    else:\n        Log.error(traceback.format_exc())\n    finally:\n        wechat.stop()\n    \n    \n    subject = 'wxbot stop message'\n    log_file = open(eval(cm.get('handler_fileHandler', 'args'))[0], 'r')\n    mail_content = '<pre>' + str(wechat) + '\\n\\n-----\\nLogs:\\n-----\\n\\n' + ''.join(log_file.readlines()[-100:]) + '</pre>'\n    sg.send_mail(subject, mail_content, 'text/html')\n    log_file.close()\n\n    if wechat.exit_code == 0:\n        echo(Constant.MAIN_RESTART)\n    else:\n        \n        os.system(Constant.LOG_MSG_KILL_PROCESS % os.getpid())\n", "comments": "         brief      list groups             result   wechat db select(constant table group list())     return jsonify(  count   len(result)   group   result )    app route(  group member list  g id  ) def group member list(g id)               brief      list group member      param      g id string             result   wechat db select(constant table group user list()   roomid   g id)     return jsonify(  count   len(result)   member   result )    app route(  group chat log  g name  ) def group chat log(g name)               brief      list group chat log      param      g name string             result   wechat db select(constant table group msg log   roomname   g name)     return jsonify(  count   len(result)   chats   result )    app route(  upload   methods   get    post  ) def upload file()      request method     post           def allowed file(filename)              return     filename                   filename rsplit(     1) 1  constant server upload allowed extensions          j     ret   1   msg                  check post request file part          file  request files              j  msg      no file part              return jsonify(j)            user select file  browser also           submit empty part without filename         file   request files  file           file filename                    j  msg      no selected file          elif file allowed file(file filename)              filename   generate file name(file filename)             file path   os path join(app config  upload folder    filename)             file save(file path)             j  ret     0             j  msg     filename         else              j  msg      file type support          return jsonify(j)     else          return render template(constant server page upload)    app route(  send msg    msg  ) def send msg(to  msg)               brief      send message user gourp      param       string  user id group id      param      msg  string  words             return jsonify(  ret   0 wechat send text(to  msg) else 1 )    app route(  send img    img  ) def send img(to  img)               brief      send image user gourp      param       string  user id group id      param      img  string  image file name             img path   os path join(app config  upload folder    img)     return jsonify(  ret   0 wechat send img(to  img path) else 1 )    app route(  send emot    emot  ) def send emot(to  emot)               brief      send emotion user gourp      param       string  user id group id      param      emot  string  emotion file name             emot path   os path join(app config  upload folder    emot)     return jsonify(  ret   0 wechat send emot(to  emot path) else 1 )    app route(  send file    file  ) def send file(to  file)               brief      send file user gourp      param       string  user id group id      param      file  string  file name             file path   os path join(app config  upload folder    file)     return jsonify(  ret   0 wechat send file(to  file path) else 1 )   def mass send(method  data  func)      j     ret    1   unsend list          method     post  data          list   data  list           msg   data  msg           media type   data get( media type     )          media type   img    emot                file path   os path join(app config  upload folder    msg)             response   wechat webwxuploadmedia(file path)             response none                  msg   response  mediaid           elif media type     file               file path   os path join(app config  upload folder    msg)             data                      appid   constant api wxappid                   title   msg                   totallen                        attachid                        type   wechat wx conf  appmsgtype attach                     fileext   msg split(   )  1                             response   wechat webwxuploadmedia(file path)             response none                  data  totallen     response  startpos                   data  attachid     response  mediaid               else                  log error( file upload error )             msg   data          groups split array(to list  20)              g groups                  r   func(g  msg)                 r                      j  unsend list   append(g)             time sleep(1)          j  ret     len(j  unsend list  )      return j    app route(  mass send msg    methods   get    post  ) def mass send msg()               brief      send text mass users gourps             j   mass send(request method  request json  wechat send text)     return jsonify(j)    app route(  mass send img   methods   get    post  ) def mass send img()               brief      send iamge mass users gourps             j   mass send(request method  request json  wechat webwxsendmsgimg)     return jsonify(j)    app route(  mass send emot   methods   get    post  ) def mass send emot()               brief      send emoticon mass users gourps             j   mass send(request method  request json  wechat webwxsendemoticon)     return jsonify(j)    app route(  mass send file   methods   get    post  ) def mass send file()               brief      send file mass users gourps             usr bin env python    coding  utf 8                                                                                                                                                                      db   mysqldb(cm mysql())    sendgrid mail    check post request file part    user select file  browser also    submit empty part without filename    send mail tell wxbot failing    kill process ", "content": "#!/usr/bin/env python\n# coding: utf-8\n\n#===================================================\nfrom wechat import WeChat\nfrom wechat.utils import *\nfrom wx_handler import WeChatMsgProcessor\nfrom wx_handler import Bot\nfrom wx_handler import SGMail\nfrom db import SqliteDB\nfrom db import MysqlDB\nfrom config import ConfigManager\nfrom config import Constant\nfrom config import Log\n#---------------------------------------------------\nfrom flask import Flask, render_template, send_file, jsonify, request\nimport threading\nimport traceback\nimport os\nimport logging\nimport time\n#===================================================\n\n\ncm = ConfigManager()\ndb = SqliteDB(cm.getpath('database'))\n# db = MysqlDB(cm.mysql())\nwechat_msg_processor = WeChatMsgProcessor(db)\nwechat = WeChat(cm.get('wechat', 'host'))\nwechat.db = db\nwechat.bot = Bot()\nwechat.msg_handler = wechat_msg_processor\nwechat_msg_processor.wechat = wechat\n\nPORT = int(cm.get('setting', 'server_port'))\napp = Flask(__name__, template_folder='flask_templates')\napp.config['UPLOAD_FOLDER'] = cm.getpath('uploaddir')\n\nlogger = logging.getLogger('werkzeug')\nlog_format_str = Constant.SERVER_LOG_FORMAT\nformatter = logging.Formatter(log_format_str)\nflask_log_handler = logging.FileHandler(cm.getpath('server_log_file'))\nflask_log_handler.setLevel(logging.INFO)\nflask_log_handler.setFormatter(formatter)\nlogger.addHandler(flask_log_handler)\napp.logger.addHandler(flask_log_handler)\n\n# sendgrid mail\nsg_apikey = cm.get('sendgrid', 'api_key')\nfrom_email = cm.get('sendgrid', 'from_email')\nto_email = cm.get('sendgrid', 'to_email')\nsg = SGMail(sg_apikey, from_email, to_email)\n\n@app.route('/')\ndef index():\n    return render_template(Constant.SERVER_PAGE_INDEX)\n\n\n@app.route('/qrcode')\ndef qrcode():\n    qdir = cm.getpath('qrcodedir')\n    if not os.path.exists(qdir):\n        os.makedirs(qdir)\n    image_path = '%s/%s_%d.png' % (qdir, wechat.uuid, int(time.time()*100))\n    s = wechat.wx_conf['API_qrcode'] + wechat.uuid\n    str2qr_image(s, image_path)\n    return send_file(image_path, mimetype='image/png')\n\n\n@app.route(\"/group_list\")\ndef group_list():\n    \"\"\"\n    @brief      list groups\n    \"\"\"\n    result = wechat.db.select(Constant.TABLE_GROUP_LIST())\n    return jsonify({'count': len(result), 'group': result})\n\n\n@app.route('/group_member_list/<g_id>')\ndef group_member_list(g_id):\n    \"\"\"\n    @brief      list group member\n    @param      g_id String\n    \"\"\"\n    result = wechat.db.select(Constant.TABLE_GROUP_USER_LIST(), 'RoomID', g_id)\n    return jsonify({'count': len(result), 'member': result})\n\n\n@app.route('/group_chat_log/<g_name>')\ndef group_chat_log(g_name):\n    \"\"\"\n    @brief      list group chat log\n    @param      g_name String\n    \"\"\"\n    result = wechat.db.select(Constant.TABLE_GROUP_MSG_LOG, 'RoomName', g_name)\n    return jsonify({'count': len(result), 'chats': result})\n\n\n@app.route('/upload', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        def allowed_file(filename):\n            return '.' in filename and \\\n                filename.rsplit('.', 1)[1] in Constant.SERVER_UPLOAD_ALLOWED_EXTENSIONS\n\n        j = {'ret': 1, 'msg': ''}\n\n        # check if the post request has the file part\n        if 'file' not in request.files:\n            j['msg'] = 'No file part'\n            return jsonify(j)\n\n        # if user does not select file, browser also\n        # submit a empty part without filename\n        file = request.files['file']\n        if file.filename == '':\n            j['msg'] = 'No selected file'\n        elif file and allowed_file(file.filename):\n            filename = generate_file_name(file.filename)\n            file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n            file.save(file_path)\n            j['ret'] = 0\n            j['msg'] = filename\n        else:\n            j['msg'] = 'File type not support'\n        return jsonify(j)\n    else:\n        return render_template(Constant.SERVER_PAGE_UPLOAD)\n\n\n@app.route('/send_msg/<to>/<msg>')\ndef send_msg(to, msg):\n    \"\"\"\n    @brief      send message to user or gourp\n    @param      to: String, user id or group id\n    @param      msg: String, words\n    \"\"\"\n    return jsonify({'ret': 0 if wechat.send_text(to, msg) else 1})\n\n\n@app.route('/send_img/<to>/<img>')\ndef send_img(to, img):\n    \"\"\"\n    @brief      send image to user or gourp\n    @param      to: String, user id or group id\n    @param      img: String, image file name\n    \"\"\"\n    img_path = os.path.join(app.config['UPLOAD_FOLDER'], img)\n    return jsonify({'ret': 0 if wechat.send_img(to, img_path) else 1})\n\n\n@app.route('/send_emot/<to>/<emot>')\ndef send_emot(to, emot):\n    \"\"\"\n    @brief      send emotion to user or gourp\n    @param      to: String, user id or group id\n    @param      emot: String, emotion file name\n    \"\"\"\n    emot_path = os.path.join(app.config['UPLOAD_FOLDER'], emot)\n    return jsonify({'ret': 0 if wechat.send_emot(to, emot_path) else 1})\n\n\n@app.route('/send_file/<to>/<file>')\ndef send_file(to, file):\n    \"\"\"\n    @brief      send file to user or gourp\n    @param      to: String, user id or group id\n    @param      file: String, file name\n    \"\"\"\n    file_path = os.path.join(app.config['UPLOAD_FOLDER'], file)\n    return jsonify({'ret': 0 if wechat.send_file(to, file_path) else 1})\n\n\ndef mass_send(method, data, func):\n    j = {'ret': -1, 'unsend_list':[]}\n    if method == 'POST' and data:\n        to_list = data['to_list']\n        msg = data['msg']\n        media_type = data.get('media_type', '')\n\n        if media_type in ['img', 'emot']:\n            file_path = os.path.join(app.config['UPLOAD_FOLDER'], msg)\n            response = wechat.webwxuploadmedia(file_path)\n            if response is not None:\n                msg = response['MediaId']\n        elif media_type == 'file':\n            file_path = os.path.join(app.config['UPLOAD_FOLDER'], msg)\n            data = {\n                'appid': Constant.API_WXAPPID,\n                'title': msg,\n                'totallen': '',\n                'attachid': '',\n                'type': wechat.wx_conf['APPMSGTYPE_ATTACH'],\n                'fileext': msg.split('.')[-1],\n            }\n            response = wechat.webwxuploadmedia(file_path)\n            if response is not None:\n                data['totallen'] = response['StartPos']\n                data['attachid'] = response['MediaId']\n            else:\n                Log.error('File upload error')\n            msg = data\n\n        for groups in split_array(to_list, 20):\n            for g in groups:\n                r = func(g, msg)\n                if not r:\n                    j['unsend_list'].append(g)\n            time.sleep(1)\n\n        j['ret'] = len(j['unsend_list'])\n\n    return j\n\n\n@app.route('/mass_send_msg/', methods=[\"GET\", \"POST\"])\ndef mass_send_msg():\n    \"\"\"\n    @brief      send text to mass users or gourps\n    \"\"\"\n    j = mass_send(request.method, request.json, wechat.send_text)\n    return jsonify(j)\n\n\n@app.route('/mass_send_img', methods=[\"GET\", \"POST\"])\ndef mass_send_img():\n    \"\"\"\n    @brief      send iamge to mass users or gourps\n    \"\"\"\n    j = mass_send(request.method, request.json, wechat.webwxsendmsgimg)\n    return jsonify(j)\n\n\n@app.route('/mass_send_emot', methods=[\"GET\", \"POST\"])\ndef mass_send_emot():\n    \"\"\"\n    @brief      send emoticon to mass users or gourps\n    \"\"\"\n    j = mass_send(request.method, request.json, wechat.webwxsendemoticon)\n    return jsonify(j)\n\n\n@app.route('/mass_send_file', methods=[\"GET\", \"POST\"])\ndef mass_send_file():\n    \"\"\"\n    @brief      send file to mass users or gourps\n    \"\"\"\n    j = mass_send(request.method, request.json, wechat.webwxsendappmsg)\n    return jsonify(j)\n\n\ndef run_server():\n    app.run(port=PORT)\n\nif cm.get('setting', 'server_mode') == 'True':\n    serverProcess = threading.Thread(target=run_server)\n    serverProcess.start()\n\nwhile True:\n    try:\n        wechat.start()\n    except KeyboardInterrupt:\n        echo(Constant.LOG_MSG_QUIT)\n        wechat.exit_code = 1\n    else:\n        Log.error(traceback.format_exc())\n    finally:\n        wechat.stop()\n    \n    # send a mail to tell the wxbot is failing\n    subject = 'wxbot stop message'\n    log_file = open(eval(cm.get('handler_fileHandler', 'args'))[0], 'r')\n    mail_content = '<pre>' + str(wechat) + '\\n\\n-----\\nLogs:\\n-----\\n\\n' + ''.join(log_file.readlines()[-100:]) + '</pre>'\n    sg.send_mail(subject, mail_content, 'text/html')\n    log_file.close()\n\n    if wechat.exit_code == 0:\n        echo(Constant.MAIN_RESTART)\n    else:\n        # kill process\n        os.system(Constant.LOG_MSG_KILL_PROCESS % os.getpid())\n", "description": "\u7f51\u9875\u7248\u5fae\u4fe1API\uff0c\u5305\u542b\u7ec8\u7aef\u7248\u5fae\u4fe1\u53ca\u5fae\u4fe1\u673a\u5668\u4eba", "file_name": "weixin_bot.py", "id": "98d1613722b1ecd6d87ca6a08ee0e5b3", "language": "Python", "project_name": "WeixinBot", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/Urinx-WeixinBot/Urinx-WeixinBot-56928ab/wxbot_project_py2.7/weixin_bot.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:03:15Z", "url": "https://github.com/Urinx/WeixinBot", "wiki": true}