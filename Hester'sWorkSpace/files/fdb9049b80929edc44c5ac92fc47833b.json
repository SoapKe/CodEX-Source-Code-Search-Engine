{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n)\n\n\nclass ComCarCoffIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?comediansincarsgettingcoffee\\.com/(?P<id>[a-z0-9\\-]*)'\n    _TESTS = [{\n        'url': 'http://comediansincarsgettingcoffee.com/miranda-sings-happy-thanksgiving-miranda/',\n        'info_dict': {\n            'id': '2494164',\n            'ext': 'mp4',\n            'upload_date': '20141127',\n            'timestamp': 1417107600,\n            'duration': 1232,\n            'title': 'Happy Thanksgiving Miranda',\n            'description': 'Jerry Seinfeld and his special guest Miranda Sings cruise around town in search of coffee, complaining and apologizing along the way.',\n        },\n        'params': {\n            'skip_download': 'requires ffmpeg',\n        }\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        if not display_id:\n            display_id = 'comediansincarsgettingcoffee.com'\n        webpage = self._download_webpage(url, display_id)\n\n        full_data = self._parse_json(\n            self._search_regex(\n                r'window\\.app\\s*=\\s*({.+?});\\n', webpage, 'full data json'),\n            display_id)['videoData']\n\n        display_id = full_data['activeVideo']['video']\n        video_data = full_data.get('videos', {}).get(display_id) or full_data['singleshots'][display_id]\n\n        video_id = compat_str(video_data['mediaId'])\n        title = video_data['title']\n        formats = self._extract_m3u8_formats(\n            video_data['mediaUrl'], video_id, 'mp4')\n        self._sort_formats(formats)\n\n        thumbnails = [{\n            'url': video_data['images']['thumb'],\n        }, {\n            'url': video_data['images']['poster'],\n        }]\n\n        timestamp = int_or_none(video_data.get('pubDateTime')) or parse_iso8601(\n            video_data.get('pubDate'))\n        duration = int_or_none(video_data.get('durationSeconds')) or parse_duration(\n            video_data.get('duration'))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'timestamp': timestamp,\n            'duration': duration,\n            'thumbnails': thumbnails,\n            'formats': formats,\n            'season_number': int_or_none(video_data.get('season')),\n            'episode_number': int_or_none(video_data.get('episode')),\n            'webpage_url': 'http://comediansincarsgettingcoffee.com/%s' % (video_data.get('urlSlug', video_data.get('slug'))),\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n)\n\n\nclass ComCarCoffIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?comediansincarsgettingcoffee\\.com/(?P<id>[a-z0-9\\-]*)'\n    _TESTS = [{\n        'url': 'http://comediansincarsgettingcoffee.com/miranda-sings-happy-thanksgiving-miranda/',\n        'info_dict': {\n            'id': '2494164',\n            'ext': 'mp4',\n            'upload_date': '20141127',\n            'timestamp': 1417107600,\n            'duration': 1232,\n            'title': 'Happy Thanksgiving Miranda',\n            'description': 'Jerry Seinfeld and his special guest Miranda Sings cruise around town in search of coffee, complaining and apologizing along the way.',\n        },\n        'params': {\n            'skip_download': 'requires ffmpeg',\n        }\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        if not display_id:\n            display_id = 'comediansincarsgettingcoffee.com'\n        webpage = self._download_webpage(url, display_id)\n\n        full_data = self._parse_json(\n            self._search_regex(\n                r'window\\.app\\s*=\\s*({.+?});\\n', webpage, 'full data json'),\n            display_id)['videoData']\n\n        display_id = full_data['activeVideo']['video']\n        video_data = full_data.get('videos', {}).get(display_id) or full_data['singleshots'][display_id]\n\n        video_id = compat_str(video_data['mediaId'])\n        title = video_data['title']\n        formats = self._extract_m3u8_formats(\n            video_data['mediaUrl'], video_id, 'mp4')\n        self._sort_formats(formats)\n\n        thumbnails = [{\n            'url': video_data['images']['thumb'],\n        }, {\n            'url': video_data['images']['poster'],\n        }]\n\n        timestamp = int_or_none(video_data.get('pubDateTime')) or parse_iso8601(\n            video_data.get('pubDate'))\n        duration = int_or_none(video_data.get('durationSeconds')) or parse_duration(\n            video_data.get('duration'))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'timestamp': timestamp,\n            'duration': duration,\n            'thumbnails': thumbnails,\n            'formats': formats,\n            'season_number': int_or_none(video_data.get('season')),\n            'episode_number': int_or_none(video_data.get('episode')),\n            'webpage_url': 'http://comediansincarsgettingcoffee.com/%s' % (video_data.get('urlSlug', video_data.get('slug'))),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "comcarcoff.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/comcarcoff.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}