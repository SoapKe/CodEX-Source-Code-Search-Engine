{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright 2017 Radware LTD.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nimport os\nfrom ansible.compat.tests.mock import patch, MagicMock\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import patch\n\nBASE_PARAMS = {'vdirect_ip': None, 'vdirect_user': None, 'vdirect_password': None,\n               'vdirect_wait': None, 'vdirect_secondary_ip': None,\n               'vdirect_https_port': None, 'vdirect_http_port': None,\n               'vdirect_timeout': None, 'vdirect_use_ssl': None, 'vdirect_validate_certs': None}\n\nCOMMIT_PARAMS = {'devices': ['adc', 'defensepro', 'vx', 'appwall'], 'apply': True, 'save': True, 'sync': True}\n\nCOMMIT_GET_DEVICE_200_RESULT = [200, '', '', {'type': 'AlteonPartitioned'}]\nCOMMIT_GET_DEVICE_404_RESULT = [404, '', '', '']\n\nCOMMIT_RESULT_200 = [200, '', '', '']\nCOMMIT_RESULT_204 = [204, '', '', '']\n\nMODULE_RESULT = {\"msg\": \"Requested actions were successfully performed on all devices.\",\n                 \"details\": [{'device_name': 'adc', 'device_type': 'Adc',\n                              'apply': 'succeeded', 'save': 'succeeded', 'sync': 'succeeded'},\n                             {'device_name': 'defensepro', 'device_type': 'DefensePro',\n                              'commit': 'succeeded'},\n                             {'device_name': 'vx', 'device_type': 'Container',\n                              'apply': 'succeeded', 'save': 'succeeded'},\n                             {'device_name': 'appwall', 'device_type': 'AppWall',\n                              'commit': 'succeeded'}]}\n\n\n@patch('vdirect_client.rest_client.RestClient')\nclass RestClient ():\n    def __init__(self, vdirect_ip=None, vdirect_user=None, vdirect_password=None, wait=None,\n                 secondary_vdirect_ip=None, https_port=None, http_port=None,\n                 timeout=None, https=None, strict_http_results=None,\n                 verify=None):\n        pass\n\n\nclass DeviceMock ():\n\n    def __init__(self, name, client):\n        self.name = name\n        self.client = client\n        self.get_throw = False\n        self.control_throw = False\n        self.exception = Exception('exception message')\n        self.control_result = COMMIT_RESULT_200\n\n    def set_control_result(self, result):\n        self.control_result = result\n\n    def throw_exception(self, get_throw=False, control_throw=False):\n        self.get_throw = get_throw\n        self.control_throw = control_throw\n\n    def get(self, name):\n        if self.get_throw:\n            raise self.exception   pylint: disable=E0702\n        if name == self.name:\n            return COMMIT_GET_DEVICE_200_RESULT\n        else:\n            return COMMIT_GET_DEVICE_404_RESULT\n\n    def control_device(self, name, action):\n        if self.control_throw:\n            raise self.exception   pylint: disable=E0702\n        return self.control_result\n\n    def control(self, name, action):\n        return self.control_device(name, action)\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.module_mock = MagicMock()\n        self.module_mock.rest_client.RESP_STATUS = 0\n        self.module_mock.rest_client.RESP_REASON = 1\n        self.module_mock.rest_client.RESP_STR = 2\n        self.module_mock.rest_client.RESP_DATA = 3\n\n    def test_missing_parameter(self, *args):\n        with patch.dict('sys.modules', **{\n            'vdirect_client': self.module_mock,\n            'vdirect_client.rest_client.RestClient': self.module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_commit\n\n            try:\n                params = BASE_PARAMS.copy()\n                vdirect_commit.VdirectCommit(params)\n                self.fail(\"KeyError was not thrown for missing parameter\")\n            except KeyError:\n                assert True\n\n    def test_validate_devices(self, *args):\n        with patch.dict('sys.modules', **{\n            'vdirect_client': self.module_mock,\n            'vdirect_client.rest_client.RestClient': self.module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_commit\n\n            BASE_PARAMS.update(COMMIT_PARAMS)\n            vdirectcommit = vdirect_commit.VdirectCommit(BASE_PARAMS)\n            vdirectcommit.client.adc = DeviceMock('adc', vdirectcommit.client)\n            vdirectcommit.client.container = DeviceMock('vx', vdirectcommit.client)\n            vdirectcommit.client.appWall = DeviceMock('appwall', vdirectcommit.client)\n            vdirectcommit.client.defensePro = DeviceMock('defensepro', vdirectcommit.client)\n\n            vdirectcommit._validate_devices()\n            assert True\n\n            vdirectcommit.client.adc.throw_exception(True)\n            try:\n                vdirectcommit._validate_devices()\n                self.fail(\"CommitException was not thrown for device communication failure\")\n            except vdirect_commit.CommitException:\n                assert True\n\n            vdirectcommit.client.adc.throw_exception(False)\n            vdirectcommit.client.defensePro.throw_exception(True)\n            try:\n                vdirectcommit._validate_devices()\n                self.fail(\"CommitException was not thrown for device communication failure\")\n            except vdirect_commit.CommitException:\n                assert True\n\n            vdirectcommit.client.defensePro.throw_exception(False)\n\n            vdirectcommit.client.adc.name = 'wrong'\n            try:\n                vdirectcommit._validate_devices()\n                self.fail(\"MissingDeviceException was not thrown for missing device\")\n            except vdirect_commit.MissingDeviceException:\n                assert True\n\n    def test_commit(self, *args):\n        with patch.dict('sys.modules', **{\n            'vdirect_client': self.module_mock,\n            'vdirect_client.rest_client.RestClient': self.module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_commit\n\n            BASE_PARAMS.update(COMMIT_PARAMS)\n            vdirectcommit = vdirect_commit.VdirectCommit(BASE_PARAMS)\n            vdirectcommit.client.adc = DeviceMock('adc', vdirectcommit.client)\n            vdirectcommit.client.container = DeviceMock('vx', vdirectcommit.client)\n            vdirectcommit.client.appWall = DeviceMock('appwall', vdirectcommit.client)\n            vdirectcommit.client.defensePro = DeviceMock('defensepro', vdirectcommit.client)\n\n            res = vdirectcommit.commit()\n            assert res == MODULE_RESULT\n\n            vdirectcommit.sync = False\n            for detail in MODULE_RESULT['details']:\n                if 'sync' in detail:\n                    detail['sync'] = vdirect_commit.NOT_PERFORMED\n            res = vdirectcommit.commit()\n            assert res == MODULE_RESULT\n\n            vdirectcommit.client.adc.control_result = COMMIT_RESULT_204\n            vdirectcommit.client.adc.control_result[self.module_mock.rest_client.RESP_STATUS] = 500\n            vdirectcommit.client.adc.control_result[self.module_mock.rest_client.RESP_STR] = 'Some Failure'\n            MODULE_RESULT['msg'] = 'Failure occurred while performing requested actions on devices. See details'\n            for detail in MODULE_RESULT['details']:\n                if detail['device_name'] == 'adc':\n                    detail['apply'] = vdirect_commit.FAILED\n                    detail['failure_description'] = 'Some Failure'\n                    detail['save'] = vdirect_commit.NOT_PERFORMED\n                    detail['sync'] = vdirect_commit.NOT_PERFORMED\n            res = vdirectcommit.commit()\n            assert res == MODULE_RESULT\n\n            vdirectcommit.client.adc.throw_exception(control_throw=True)\n            for detail in MODULE_RESULT['details']:\n                if detail['device_name'] == 'adc':\n                    detail['failure_description'] = 'Exception occurred while performing apply action. ' \\\n                                                    'Exception: exception message'\n            res = vdirectcommit.commit()\n            assert res == MODULE_RESULT\n", "comments": "      coding  utf 8           copyright 2017 radware ltd        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       pylint  disable e0702    pylint  disable e0702 ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright 2017 Radware LTD.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nimport os\nfrom ansible.compat.tests.mock import patch, MagicMock\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import patch\n\nBASE_PARAMS = {'vdirect_ip': None, 'vdirect_user': None, 'vdirect_password': None,\n               'vdirect_wait': None, 'vdirect_secondary_ip': None,\n               'vdirect_https_port': None, 'vdirect_http_port': None,\n               'vdirect_timeout': None, 'vdirect_use_ssl': None, 'vdirect_validate_certs': None}\n\nCOMMIT_PARAMS = {'devices': ['adc', 'defensepro', 'vx', 'appwall'], 'apply': True, 'save': True, 'sync': True}\n\nCOMMIT_GET_DEVICE_200_RESULT = [200, '', '', {'type': 'AlteonPartitioned'}]\nCOMMIT_GET_DEVICE_404_RESULT = [404, '', '', '']\n\nCOMMIT_RESULT_200 = [200, '', '', '']\nCOMMIT_RESULT_204 = [204, '', '', '']\n\nMODULE_RESULT = {\"msg\": \"Requested actions were successfully performed on all devices.\",\n                 \"details\": [{'device_name': 'adc', 'device_type': 'Adc',\n                              'apply': 'succeeded', 'save': 'succeeded', 'sync': 'succeeded'},\n                             {'device_name': 'defensepro', 'device_type': 'DefensePro',\n                              'commit': 'succeeded'},\n                             {'device_name': 'vx', 'device_type': 'Container',\n                              'apply': 'succeeded', 'save': 'succeeded'},\n                             {'device_name': 'appwall', 'device_type': 'AppWall',\n                              'commit': 'succeeded'}]}\n\n\n@patch('vdirect_client.rest_client.RestClient')\nclass RestClient ():\n    def __init__(self, vdirect_ip=None, vdirect_user=None, vdirect_password=None, wait=None,\n                 secondary_vdirect_ip=None, https_port=None, http_port=None,\n                 timeout=None, https=None, strict_http_results=None,\n                 verify=None):\n        pass\n\n\nclass DeviceMock ():\n\n    def __init__(self, name, client):\n        self.name = name\n        self.client = client\n        self.get_throw = False\n        self.control_throw = False\n        self.exception = Exception('exception message')\n        self.control_result = COMMIT_RESULT_200\n\n    def set_control_result(self, result):\n        self.control_result = result\n\n    def throw_exception(self, get_throw=False, control_throw=False):\n        self.get_throw = get_throw\n        self.control_throw = control_throw\n\n    def get(self, name):\n        if self.get_throw:\n            raise self.exception  # pylint: disable=E0702\n        if name == self.name:\n            return COMMIT_GET_DEVICE_200_RESULT\n        else:\n            return COMMIT_GET_DEVICE_404_RESULT\n\n    def control_device(self, name, action):\n        if self.control_throw:\n            raise self.exception  # pylint: disable=E0702\n        return self.control_result\n\n    def control(self, name, action):\n        return self.control_device(name, action)\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.module_mock = MagicMock()\n        self.module_mock.rest_client.RESP_STATUS = 0\n        self.module_mock.rest_client.RESP_REASON = 1\n        self.module_mock.rest_client.RESP_STR = 2\n        self.module_mock.rest_client.RESP_DATA = 3\n\n    def test_missing_parameter(self, *args):\n        with patch.dict('sys.modules', **{\n            'vdirect_client': self.module_mock,\n            'vdirect_client.rest_client.RestClient': self.module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_commit\n\n            try:\n                params = BASE_PARAMS.copy()\n                vdirect_commit.VdirectCommit(params)\n                self.fail(\"KeyError was not thrown for missing parameter\")\n            except KeyError:\n                assert True\n\n    def test_validate_devices(self, *args):\n        with patch.dict('sys.modules', **{\n            'vdirect_client': self.module_mock,\n            'vdirect_client.rest_client.RestClient': self.module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_commit\n\n            BASE_PARAMS.update(COMMIT_PARAMS)\n            vdirectcommit = vdirect_commit.VdirectCommit(BASE_PARAMS)\n            vdirectcommit.client.adc = DeviceMock('adc', vdirectcommit.client)\n            vdirectcommit.client.container = DeviceMock('vx', vdirectcommit.client)\n            vdirectcommit.client.appWall = DeviceMock('appwall', vdirectcommit.client)\n            vdirectcommit.client.defensePro = DeviceMock('defensepro', vdirectcommit.client)\n\n            vdirectcommit._validate_devices()\n            assert True\n\n            vdirectcommit.client.adc.throw_exception(True)\n            try:\n                vdirectcommit._validate_devices()\n                self.fail(\"CommitException was not thrown for device communication failure\")\n            except vdirect_commit.CommitException:\n                assert True\n\n            vdirectcommit.client.adc.throw_exception(False)\n            vdirectcommit.client.defensePro.throw_exception(True)\n            try:\n                vdirectcommit._validate_devices()\n                self.fail(\"CommitException was not thrown for device communication failure\")\n            except vdirect_commit.CommitException:\n                assert True\n\n            vdirectcommit.client.defensePro.throw_exception(False)\n\n            vdirectcommit.client.adc.name = 'wrong'\n            try:\n                vdirectcommit._validate_devices()\n                self.fail(\"MissingDeviceException was not thrown for missing device\")\n            except vdirect_commit.MissingDeviceException:\n                assert True\n\n    def test_commit(self, *args):\n        with patch.dict('sys.modules', **{\n            'vdirect_client': self.module_mock,\n            'vdirect_client.rest_client.RestClient': self.module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_commit\n\n            BASE_PARAMS.update(COMMIT_PARAMS)\n            vdirectcommit = vdirect_commit.VdirectCommit(BASE_PARAMS)\n            vdirectcommit.client.adc = DeviceMock('adc', vdirectcommit.client)\n            vdirectcommit.client.container = DeviceMock('vx', vdirectcommit.client)\n            vdirectcommit.client.appWall = DeviceMock('appwall', vdirectcommit.client)\n            vdirectcommit.client.defensePro = DeviceMock('defensepro', vdirectcommit.client)\n\n            res = vdirectcommit.commit()\n            assert res == MODULE_RESULT\n\n            vdirectcommit.sync = False\n            for detail in MODULE_RESULT['details']:\n                if 'sync' in detail:\n                    detail['sync'] = vdirect_commit.NOT_PERFORMED\n            res = vdirectcommit.commit()\n            assert res == MODULE_RESULT\n\n            vdirectcommit.client.adc.control_result = COMMIT_RESULT_204\n            vdirectcommit.client.adc.control_result[self.module_mock.rest_client.RESP_STATUS] = 500\n            vdirectcommit.client.adc.control_result[self.module_mock.rest_client.RESP_STR] = 'Some Failure'\n            MODULE_RESULT['msg'] = 'Failure occurred while performing requested actions on devices. See details'\n            for detail in MODULE_RESULT['details']:\n                if detail['device_name'] == 'adc':\n                    detail['apply'] = vdirect_commit.FAILED\n                    detail['failure_description'] = 'Some Failure'\n                    detail['save'] = vdirect_commit.NOT_PERFORMED\n                    detail['sync'] = vdirect_commit.NOT_PERFORMED\n            res = vdirectcommit.commit()\n            assert res == MODULE_RESULT\n\n            vdirectcommit.client.adc.throw_exception(control_throw=True)\n            for detail in MODULE_RESULT['details']:\n                if detail['device_name'] == 'adc':\n                    detail['failure_description'] = 'Exception occurred while performing apply action. ' \\\n                                                    'Exception: exception message'\n            res = vdirectcommit.commit()\n            assert res == MODULE_RESULT\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_vdirect_commit.py", "id": "2508f84e759b6a65505e61359c26bff6", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/radware/test_vdirect_commit.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}