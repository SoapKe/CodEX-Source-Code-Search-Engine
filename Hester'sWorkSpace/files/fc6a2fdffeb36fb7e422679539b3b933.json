{"author": "odoo", "code": "from odoo.addons.account.tests.account_test_classes import AccountingTestCase\nimport time\n\nclass TestProductIdChange(AccountingTestCase):\n    \n\n    def setUp(self):\n        super(TestProductIdChange, self).setUp()\n        self.invoice_model = self.env['account.invoice']\n        self.fiscal_position_model = self.env['account.fiscal.position']\n        self.fiscal_position_tax_model = self.env['account.fiscal.position.tax']\n        self.tax_model = self.env['account.tax']\n        self.pricelist_model = self.env['product.pricelist']\n        self.res_partner_model = self.env['res.partner']\n        self.product_tmpl_model = self.env['product.template']\n        self.product_model = self.env['product.product']\n        self.invoice_line_model = self.env['account.invoice.line']\n        self.account_receivable = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_receivable').id)], limit=1)\n        self.account_revenue = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_revenue').id)], limit=1)\n\n    def test_product_id_change(self):\n        partner = self.res_partner_model.create(dict(name=\"George\"))\n        tax_include_sale = self.tax_model.create(dict(name=\"Include tax\",\n                                                      type_tax_use='sale',\n                                                      amount='21.00',\n                                                      price_include=True))\n        tax_include_purchase = self.tax_model.create(dict(name=\"Include tax\",\n                                                          type_tax_use='purchase',\n                                                          amount='21.00',\n                                                          price_include=True))\n        tax_exclude_sale = self.tax_model.create(dict(name=\"Exclude tax\",\n                                                 type_tax_use='sale',\n                                                 amount='0.00'))\n        tax_exclude_purchase = self.tax_model.create(dict(name=\"Exclude tax\",\n                                                          type_tax_use='purchase',\n                                                          amount='0.00'))\n        product_tmpl = self.product_tmpl_model.create(dict(name=\"Voiture\",\n                                                           list_price='121',\n                                                           taxes_id=[(6, 0, [tax_include_sale.id])],\n                                                           supplier_taxes_id=[(6, 0, [tax_include_purchase.id])]))\n        product = self.product_model.create(dict(product_tmpl_id=product_tmpl.id,\n                                                 standard_price='242'))\n        fp = self.fiscal_position_model.create(dict(name=\"fiscal position\", sequence=1))\n        fp_tax_sale = self.fiscal_position_tax_model.create(dict(position_id=fp.id,\n                                                            tax_src_id=tax_include_sale.id,\n                                                            tax_dest_id=tax_exclude_sale.id))\n        fp_tax_purchase = self.fiscal_position_tax_model.create(dict(position_id=fp.id,\n                                                                     tax_src_id=tax_include_purchase.id,\n                                                                     tax_dest_id=tax_exclude_purchase.id))\n\n        out_invoice = self.invoice_model.create({\n            'partner_id': partner.id,\n            'reference_type': 'none',\n            'name': 'invoice to client',\n            'account_id': self.account_receivable.id,\n            'type': 'out_invoice',\n            'date_invoice': time.strftime('%Y') + '-06-26',\n            'fiscal_position_id': fp.id,\n        })\n        out_line = self.invoice_line_model.create({\n            'product_id': product.id,\n            'quantity': 1,\n            'price_unit': 121.0,\n            'invoice_id': out_invoice.id,\n            'name': 'something out',\n            'account_id': self.account_revenue.id,\n        })\n\n        in_invoice = self.invoice_model.create({\n            'partner_id': partner.id,\n            'reference_type': 'none',\n            'name': 'invoice to supplier',\n            'account_id': self.account_receivable.id,\n            'type': 'in_invoice',\n            'date_invoice': time.strftime('%Y') + '-06-26',\n            'fiscal_position_id': fp.id,\n        })\n        in_line = self.invoice_line_model.create({\n            'product_id': product.id,\n            'quantity': 1,\n            'price_unit': 242.0,\n            'invoice_id': in_invoice.id,\n            'name': 'something in',\n            'account_id': self.account_revenue.id,\n        })\n        out_line._onchange_product_id()\n        self.assertEquals(100, out_line.price_unit, \"The included tax must be subtracted to the price\")\n        in_line._onchange_product_id()\n        self.assertEquals(200, in_line.price_unit, \"The included tax must be subtracted to the price\")\n", "comments": "   test included tax mapped fiscal position  included tax must     subtracted price product          ", "content": "from odoo.addons.account.tests.account_test_classes import AccountingTestCase\nimport time\n\nclass TestProductIdChange(AccountingTestCase):\n    \"\"\"Test that when an included tax is mapped by a fiscal position, the included tax must be\n    subtracted to the price of the product.\n    \"\"\"\n\n    def setUp(self):\n        super(TestProductIdChange, self).setUp()\n        self.invoice_model = self.env['account.invoice']\n        self.fiscal_position_model = self.env['account.fiscal.position']\n        self.fiscal_position_tax_model = self.env['account.fiscal.position.tax']\n        self.tax_model = self.env['account.tax']\n        self.pricelist_model = self.env['product.pricelist']\n        self.res_partner_model = self.env['res.partner']\n        self.product_tmpl_model = self.env['product.template']\n        self.product_model = self.env['product.product']\n        self.invoice_line_model = self.env['account.invoice.line']\n        self.account_receivable = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_receivable').id)], limit=1)\n        self.account_revenue = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_revenue').id)], limit=1)\n\n    def test_product_id_change(self):\n        partner = self.res_partner_model.create(dict(name=\"George\"))\n        tax_include_sale = self.tax_model.create(dict(name=\"Include tax\",\n                                                      type_tax_use='sale',\n                                                      amount='21.00',\n                                                      price_include=True))\n        tax_include_purchase = self.tax_model.create(dict(name=\"Include tax\",\n                                                          type_tax_use='purchase',\n                                                          amount='21.00',\n                                                          price_include=True))\n        tax_exclude_sale = self.tax_model.create(dict(name=\"Exclude tax\",\n                                                 type_tax_use='sale',\n                                                 amount='0.00'))\n        tax_exclude_purchase = self.tax_model.create(dict(name=\"Exclude tax\",\n                                                          type_tax_use='purchase',\n                                                          amount='0.00'))\n        product_tmpl = self.product_tmpl_model.create(dict(name=\"Voiture\",\n                                                           list_price='121',\n                                                           taxes_id=[(6, 0, [tax_include_sale.id])],\n                                                           supplier_taxes_id=[(6, 0, [tax_include_purchase.id])]))\n        product = self.product_model.create(dict(product_tmpl_id=product_tmpl.id,\n                                                 standard_price='242'))\n        fp = self.fiscal_position_model.create(dict(name=\"fiscal position\", sequence=1))\n        fp_tax_sale = self.fiscal_position_tax_model.create(dict(position_id=fp.id,\n                                                            tax_src_id=tax_include_sale.id,\n                                                            tax_dest_id=tax_exclude_sale.id))\n        fp_tax_purchase = self.fiscal_position_tax_model.create(dict(position_id=fp.id,\n                                                                     tax_src_id=tax_include_purchase.id,\n                                                                     tax_dest_id=tax_exclude_purchase.id))\n\n        out_invoice = self.invoice_model.create({\n            'partner_id': partner.id,\n            'reference_type': 'none',\n            'name': 'invoice to client',\n            'account_id': self.account_receivable.id,\n            'type': 'out_invoice',\n            'date_invoice': time.strftime('%Y') + '-06-26',\n            'fiscal_position_id': fp.id,\n        })\n        out_line = self.invoice_line_model.create({\n            'product_id': product.id,\n            'quantity': 1,\n            'price_unit': 121.0,\n            'invoice_id': out_invoice.id,\n            'name': 'something out',\n            'account_id': self.account_revenue.id,\n        })\n\n        in_invoice = self.invoice_model.create({\n            'partner_id': partner.id,\n            'reference_type': 'none',\n            'name': 'invoice to supplier',\n            'account_id': self.account_receivable.id,\n            'type': 'in_invoice',\n            'date_invoice': time.strftime('%Y') + '-06-26',\n            'fiscal_position_id': fp.id,\n        })\n        in_line = self.invoice_line_model.create({\n            'product_id': product.id,\n            'quantity': 1,\n            'price_unit': 242.0,\n            'invoice_id': in_invoice.id,\n            'name': 'something in',\n            'account_id': self.account_revenue.id,\n        })\n        out_line._onchange_product_id()\n        self.assertEquals(100, out_line.price_unit, \"The included tax must be subtracted to the price\")\n        in_line._onchange_product_id()\n        self.assertEquals(200, in_line.price_unit, \"The included tax must be subtracted to the price\")\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_product_id_change.py", "id": "fc6a2fdffeb36fb7e422679539b3b933", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account/tests/test_product_id_change.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}