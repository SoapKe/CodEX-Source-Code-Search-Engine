{"author": "django", "code": "from django.http import Http404, HttpResponse\nfrom django.template import engines\nfrom django.template.response import TemplateResponse\n\nlog = []\n\n\nclass BaseMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        return self.get_response(request)\n\n\nclass ProcessExceptionMiddleware(BaseMiddleware):\n    def process_exception(self, request, exception):\n        return HttpResponse('Exception caught')\n\n\nclass ProcessExceptionLogMiddleware(BaseMiddleware):\n    def process_exception(self, request, exception):\n        log.append('process-exception')\n\n\nclass ProcessExceptionExcMiddleware(BaseMiddleware):\n    def process_exception(self, request, exception):\n        raise Exception('from process-exception')\n\n\nclass ProcessViewMiddleware(BaseMiddleware):\n    def process_view(self, request, view_func, view_args, view_kwargs):\n        return HttpResponse('Processed view %s' % view_func.__name__)\n\n\nclass ProcessViewNoneMiddleware(BaseMiddleware):\n    def process_view(self, request, view_func, view_args, view_kwargs):\n        log.append('processed view %s' % view_func.__name__)\n        return None\n\n\nclass ProcessViewTemplateResponseMiddleware(BaseMiddleware):\n    def process_view(self, request, view_func, view_args, view_kwargs):\n        template = engines['django'].from_string('Processed view {{ view }}{% for m in mw %}\\n{{ m }}{% endfor %}')\n        return TemplateResponse(request, template, {'mw': [self.__class__.__name__], 'view': view_func.__name__})\n\n\nclass TemplateResponseMiddleware(BaseMiddleware):\n    def process_template_response(self, request, response):\n        response.context_data['mw'].append(self.__class__.__name__)\n        return response\n\n\nclass LogMiddleware(BaseMiddleware):\n    def __call__(self, request):\n        response = self.get_response(request)\n        log.append((response.status_code, response.content))\n        return response\n\n\nclass NotFoundMiddleware(BaseMiddleware):\n    def __call__(self, request):\n        raise Http404('not found')\n", "comments": "", "content": "from django.http import Http404, HttpResponse\nfrom django.template import engines\nfrom django.template.response import TemplateResponse\n\nlog = []\n\n\nclass BaseMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        return self.get_response(request)\n\n\nclass ProcessExceptionMiddleware(BaseMiddleware):\n    def process_exception(self, request, exception):\n        return HttpResponse('Exception caught')\n\n\nclass ProcessExceptionLogMiddleware(BaseMiddleware):\n    def process_exception(self, request, exception):\n        log.append('process-exception')\n\n\nclass ProcessExceptionExcMiddleware(BaseMiddleware):\n    def process_exception(self, request, exception):\n        raise Exception('from process-exception')\n\n\nclass ProcessViewMiddleware(BaseMiddleware):\n    def process_view(self, request, view_func, view_args, view_kwargs):\n        return HttpResponse('Processed view %s' % view_func.__name__)\n\n\nclass ProcessViewNoneMiddleware(BaseMiddleware):\n    def process_view(self, request, view_func, view_args, view_kwargs):\n        log.append('processed view %s' % view_func.__name__)\n        return None\n\n\nclass ProcessViewTemplateResponseMiddleware(BaseMiddleware):\n    def process_view(self, request, view_func, view_args, view_kwargs):\n        template = engines['django'].from_string('Processed view {{ view }}{% for m in mw %}\\n{{ m }}{% endfor %}')\n        return TemplateResponse(request, template, {'mw': [self.__class__.__name__], 'view': view_func.__name__})\n\n\nclass TemplateResponseMiddleware(BaseMiddleware):\n    def process_template_response(self, request, response):\n        response.context_data['mw'].append(self.__class__.__name__)\n        return response\n\n\nclass LogMiddleware(BaseMiddleware):\n    def __call__(self, request):\n        response = self.get_response(request)\n        log.append((response.status_code, response.content))\n        return response\n\n\nclass NotFoundMiddleware(BaseMiddleware):\n    def __call__(self, request):\n        raise Http404('not found')\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "middleware.py", "id": "ba34442f90daf74f0aba6b42441413f1", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/middleware_exceptions/middleware.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}