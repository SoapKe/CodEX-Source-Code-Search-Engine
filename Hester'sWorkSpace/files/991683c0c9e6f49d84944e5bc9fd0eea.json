{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestLowestCommonAncestor(object):\n\n    def test_lca(self):\n        node10 = Node(10)\n        node5 = Node(5)\n        node12 = Node(12)\n        node3 = Node(3)\n        node1 = Node(1)\n        node8 = Node(8)\n        node9 = Node(9)\n        node18 = Node(18)\n        node20 = Node(20)\n        node40 = Node(40)\n        node3.left = node1\n        node3.right = node8\n        node5.left = node12\n        node5.right = node3\n        node20.left = node40\n        node9.left = node18\n        node9.right = node20\n        node10.left = node5\n        node10.right = node9\n        root = node10\n        node0 = Node(0)\n        binary_tree = BinaryTree()\n        assert_equal(binary_tree.lca(root, node0, node5), None)\n        assert_equal(binary_tree.lca(root, node5, node0), None)\n        assert_equal(binary_tree.lca(root, node1, node8), node3)\n        assert_equal(binary_tree.lca(root, node12, node8), node5)\n        assert_equal(binary_tree.lca(root, node12, node40), node10)\n        assert_equal(binary_tree.lca(root, node9, node20), node9)\n        assert_equal(binary_tree.lca(root, node3, node5), node5)\n        print('Success: test_lca')\n\n\ndef main():\n    test = TestLowestCommonAncestor()\n    test.test_lca()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\n\nclass TestLowestCommonAncestor(object):\n\n    def test_lca(self):\n        node10 = Node(10)\n        node5 = Node(5)\n        node12 = Node(12)\n        node3 = Node(3)\n        node1 = Node(1)\n        node8 = Node(8)\n        node9 = Node(9)\n        node18 = Node(18)\n        node20 = Node(20)\n        node40 = Node(40)\n        node3.left = node1\n        node3.right = node8\n        node5.left = node12\n        node5.right = node3\n        node20.left = node40\n        node9.left = node18\n        node9.right = node20\n        node10.left = node5\n        node10.right = node9\n        root = node10\n        node0 = Node(0)\n        binary_tree = BinaryTree()\n        assert_equal(binary_tree.lca(root, node0, node5), None)\n        assert_equal(binary_tree.lca(root, node5, node0), None)\n        assert_equal(binary_tree.lca(root, node1, node8), node3)\n        assert_equal(binary_tree.lca(root, node12, node8), node5)\n        assert_equal(binary_tree.lca(root, node12, node40), node10)\n        assert_equal(binary_tree.lca(root, node9, node20), node9)\n        assert_equal(binary_tree.lca(root, node3, node5), node5)\n        print('Success: test_lca')\n\n\ndef main():\n    test = TestLowestCommonAncestor()\n    test.test_lca()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_lca.py", "id": "991683c0c9e6f49d84944e5bc9fd0eea", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/graphs_trees/tree_lca/test_lca.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}