{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipa_sudorule\nauthor: Thomas Krahn (@Nosmoht)\nshort_description: Manage FreeIPA sudo rule\ndescription:\n- Add, modify or delete sudo rule within IPA server using IPA API.\noptions:\n  cn:\n    description:\n    - Canonical name.\n    - Can not be changed as it is the unique identifier.\n    required: true\n    aliases: ['name']\n  cmdcategory:\n    description:\n    - Command category the rule applies to.\n    choices: ['all']\n  cmd:\n    description:\n    - List of commands assigned to the rule.\n    - If an empty list is passed all commands will be removed from the rule.\n    - If option is omitted commands will not be checked or changed.\n  host:\n    description:\n    - List of hosts assigned to the rule.\n    - If an empty list is passed all hosts will be removed from the rule.\n    - If option is omitted hosts will not be checked or changed.\n    - Option C(hostcategory) must be omitted to assign hosts.\n  hostcategory:\n    description:\n    - Host category the rule applies to.\n    - If 'all' is passed one must omit C(host) and C(hostgroup).\n    - Option C(host) and C(hostgroup) must be omitted to assign 'all'.\n    choices: ['all']\n  hostgroup:\n    description:\n    - List of host groups assigned to the rule.\n    - If an empty list is passed all host groups will be removed from the rule.\n    - If option is omitted host groups will not be checked or changed.\n    - Option C(hostcategory) must be omitted to assign host groups.\n  runasusercategory:\n    description:\n    - RunAs User category the rule applies to.\n    choices: ['all']\n    version_added: \"2.5\"\n  runasgroupcategory:\n    description:\n      - RunAs Group category the rule applies to.\n    choices: ['all']\n    version_added: \"2.5\"\n  user:\n    description:\n    - List of users assigned to the rule.\n    - If an empty list is passed all users will be removed from the rule.\n    - If option is omitted users will not be checked or changed.\n  usercategory:\n    description:\n    - User category the rule applies to.\n    choices: ['all']\n  usergroup:\n    description:\n    - List of user groups assigned to the rule.\n    - If an empty list is passed all user groups will be removed from the rule.\n    - If option is omitted user groups will not be checked or changed.\n  state:\n    description: State to ensure\n    default: present\n    choices: ['present', 'absent', 'enabled', 'disabled']\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.3\"\n'''\n\nEXAMPLES = '''\n\n- ipa_sudorule:\n    name: sudo_all_nopasswd\n    cmdcategory: all\n    description: Allow to run every command with sudo without password\n    hostcategory: all\n    sudoopt:\n    - '!authenticate'\n    usercategory: all\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- ipa_sudorule:\n    name: sudo_dev_dbserver\n    description: Allow developers to run every command with sudo on all database server\n    cmdcategory: all\n    host:\n    - db01.example.com\n    hostgroup:\n    - db-server\n    sudoopt:\n    - '!authenticate'\n    usergroup:\n    - developers\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n'''\n\nRETURN = '''\nsudorule:\n  description: Sudorule as returned by IPA\n  returned: always\n  type: dict\n'''\n\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass SudoRuleIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(SudoRuleIPAClient, self).__init__(module, host, port, protocol)\n\n    def sudorule_find(self, name):\n        return self._post_json(method='sudorule_find', name=None, item={'all': True, 'cn': name})\n\n    def sudorule_add(self, name, item):\n        return self._post_json(method='sudorule_add', name=name, item=item)\n\n    def sudorule_mod(self, name, item):\n        return self._post_json(method='sudorule_mod', name=name, item=item)\n\n    def sudorule_del(self, name):\n        return self._post_json(method='sudorule_del', name=name)\n\n    def sudorule_add_option(self, name, item):\n        return self._post_json(method='sudorule_add_option', name=name, item=item)\n\n    def sudorule_add_option_ipasudoopt(self, name, item):\n        return self.sudorule_add_option(name=name, item={'ipasudoopt': item})\n\n    def sudorule_remove_option(self, name, item):\n        return self._post_json(method='sudorule_remove_option', name=name, item=item)\n\n    def sudorule_remove_option_ipasudoopt(self, name, item):\n        return self.sudorule_remove_option(name=name, item={'ipasudoopt': item})\n\n    def sudorule_add_host(self, name, item):\n        return self._post_json(method='sudorule_add_host', name=name, item=item)\n\n    def sudorule_add_host_host(self, name, item):\n        return self.sudorule_add_host(name=name, item={'host': item})\n\n    def sudorule_add_host_hostgroup(self, name, item):\n        return self.sudorule_add_host(name=name, item={'hostgroup': item})\n\n    def sudorule_remove_host(self, name, item):\n        return self._post_json(method='sudorule_remove_host', name=name, item=item)\n\n    def sudorule_remove_host_host(self, name, item):\n        return self.sudorule_remove_host(name=name, item={'host': item})\n\n    def sudorule_remove_host_hostgroup(self, name, item):\n        return self.sudorule_remove_host(name=name, item={'hostgroup': item})\n\n    def sudorule_add_allow_command(self, name, item):\n        return self._post_json(method='sudorule_add_allow_command', name=name, item={'sudocmd': item})\n\n    def sudorule_remove_allow_command(self, name, item):\n        return self._post_json(method='sudorule_remove_allow_command', name=name, item=item)\n\n    def sudorule_add_user(self, name, item):\n        return self._post_json(method='sudorule_add_user', name=name, item=item)\n\n    def sudorule_add_user_user(self, name, item):\n        return self.sudorule_add_user(name=name, item={'user': item})\n\n    def sudorule_add_user_group(self, name, item):\n        return self.sudorule_add_user(name=name, item={'group': item})\n\n    def sudorule_remove_user(self, name, item):\n        return self._post_json(method='sudorule_remove_user', name=name, item=item)\n\n    def sudorule_remove_user_user(self, name, item):\n        return self.sudorule_remove_user(name=name, item={'user': item})\n\n    def sudorule_remove_user_group(self, name, item):\n        return self.sudorule_remove_user(name=name, item={'group': item})\n\n\ndef get_sudorule_dict(cmdcategory=None, description=None, hostcategory=None, ipaenabledflag=None, usercategory=None,\n                      runasgroupcategory=None, runasusercategory=None):\n    data = {}\n    if cmdcategory is not None:\n        data['cmdcategory'] = cmdcategory\n    if description is not None:\n        data['description'] = description\n    if hostcategory is not None:\n        data['hostcategory'] = hostcategory\n    if ipaenabledflag is not None:\n        data['ipaenabledflag'] = ipaenabledflag\n    if usercategory is not None:\n        data['usercategory'] = usercategory\n    if runasusercategory is not None:\n        data['ipasudorunasusercategory'] = runasusercategory\n    if runasgroupcategory is not None:\n        data['ipasudorunasgroupcategory'] = runasgroupcategory\n    return data\n\n\ndef category_changed(module, client, category_name, ipa_sudorule):\n    if ipa_sudorule.get(category_name, None) == ['all']:\n        if not module.check_mode:\n            \n            client.sudorule_mod(name=ipa_sudorule.get('cn')[0], item={category_name: None})\n        return True\n    return False\n\n\ndef ensure(module, client):\n    state = module.params['state']\n    name = module.params['cn']\n    cmd = module.params['cmd']\n    cmdcategory = module.params['cmdcategory']\n    host = module.params['host']\n    hostcategory = module.params['hostcategory']\n    hostgroup = module.params['hostgroup']\n    runasusercategory = module.params['runasusercategory']\n    runasgroupcategory = module.params['runasgroupcategory']\n\n    if state in ['present', 'enabled']:\n        ipaenabledflag = 'TRUE'\n    else:\n        ipaenabledflag = 'FALSE'\n\n    sudoopt = module.params['sudoopt']\n    user = module.params['user']\n    usercategory = module.params['usercategory']\n    usergroup = module.params['usergroup']\n\n    module_sudorule = get_sudorule_dict(cmdcategory=cmdcategory,\n                                        description=module.params['description'],\n                                        hostcategory=hostcategory,\n                                        ipaenabledflag=ipaenabledflag,\n                                        usercategory=usercategory,\n                                        runasusercategory=runasusercategory,\n                                        runasgroupcategory=runasgroupcategory)\n    ipa_sudorule = client.sudorule_find(name=name)\n\n    changed = False\n    if state in ['present', 'disabled', 'enabled']:\n        if not ipa_sudorule:\n            changed = True\n            if not module.check_mode:\n                ipa_sudorule = client.sudorule_add(name=name, item=module_sudorule)\n        else:\n            diff = client.get_diff(ipa_sudorule, module_sudorule)\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    if 'hostcategory' in diff:\n                        if ipa_sudorule.get('memberhost_host', None) is not None:\n                            client.sudorule_remove_host_host(name=name, item=ipa_sudorule.get('memberhost_host'))\n                        if ipa_sudorule.get('memberhost_hostgroup', None) is not None:\n                            client.sudorule_remove_host_hostgroup(name=name,\n                                                                  item=ipa_sudorule.get('memberhost_hostgroup'))\n\n                    client.sudorule_mod(name=name, item=module_sudorule)\n\n        if cmd is not None:\n            changed = category_changed(module, client, 'cmdcategory', ipa_sudorule) or changed\n            if not module.check_mode:\n                client.sudorule_add_allow_command(name=name, item=cmd)\n\n        if runasusercategory is not None:\n            changed = category_changed(module, client, 'iparunasusercategory', ipa_sudorule) or changed\n\n        if runasgroupcategory is not None:\n            changed = category_changed(module, client, 'iparunasgroupcategory', ipa_sudorule) or changed\n\n        if host is not None:\n            changed = category_changed(module, client, 'hostcategory', ipa_sudorule) or changed\n            changed = client.modify_if_diff(name, ipa_sudorule.get('memberhost_host', []), host,\n                                            client.sudorule_add_host_host,\n                                            client.sudorule_remove_host_host) or changed\n\n        if hostgroup is not None:\n            changed = category_changed(module, client, 'hostcategory', ipa_sudorule) or changed\n            changed = client.modify_if_diff(name, ipa_sudorule.get('memberhost_hostgroup', []), hostgroup,\n                                            client.sudorule_add_host_hostgroup,\n                                            client.sudorule_remove_host_hostgroup) or changed\n        if sudoopt is not None:\n            \n            ipa_list = ipa_sudorule.get('ipasudoopt', [])\n            module_list = sudoopt\n            diff = list(set(ipa_list) - set(module_list))\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    for item in diff:\n                        client.sudorule_remove_option_ipasudoopt(name, item)\n            diff = list(set(module_list) - set(ipa_list))\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    for item in diff:\n                        client.sudorule_add_option_ipasudoopt(name, item)\n\n        if user is not None:\n            changed = category_changed(module, client, 'usercategory', ipa_sudorule) or changed\n            changed = client.modify_if_diff(name, ipa_sudorule.get('memberuser_user', []), user,\n                                            client.sudorule_add_user_user,\n                                            client.sudorule_remove_user_user) or changed\n        if usergroup is not None:\n            changed = category_changed(module, client, 'usercategory', ipa_sudorule) or changed\n            changed = client.modify_if_diff(name, ipa_sudorule.get('memberuser_group', []), usergroup,\n                                            client.sudorule_add_user_group,\n                                            client.sudorule_remove_user_group) or changed\n    else:\n        if ipa_sudorule:\n            changed = True\n            if not module.check_mode:\n                client.sudorule_del(name)\n\n    return changed, client.sudorule_find(name)\n\n\ndef main():\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(cmd=dict(type='list'),\n                         cmdcategory=dict(type='str', choices=['all']),\n                         cn=dict(type='str', required=True, aliases=['name']),\n                         description=dict(type='str'),\n                         host=dict(type='list'),\n                         hostcategory=dict(type='str', choices=['all']),\n                         hostgroup=dict(type='list'),\n                         runasusercategory=dict(type='str', choices=['all']),\n                         runasgroupcategory=dict(type='str', choices=['all']),\n                         sudoopt=dict(type='list'),\n                         state=dict(type='str', default='present', choices=['present', 'absent', 'enabled', 'disabled']),\n                         user=dict(type='list'),\n                         usercategory=dict(type='str', choices=['all']),\n                         usergroup=dict(type='list'))\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           mutually_exclusive=[['cmdcategory', 'cmd'],\n                                               ['hostcategory', 'host'],\n                                               ['hostcategory', 'hostgroup'],\n                                               ['usercategory', 'user'],\n                                               ['usercategory', 'usergroup']],\n                           supports_check_mode=True)\n\n    client = SudoRuleIPAClient(module=module,\n                               host=module.params['ipa_host'],\n                               port=module.params['ipa_port'],\n                               protocol=module.params['ipa_prot'])\n    try:\n        client.login(username=module.params['ipa_user'],\n                     password=module.params['ipa_pass'])\n        changed, sudorule = ensure(module, client)\n        module.exit_json(changed=changed, sudorule=sudorule)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  ipa sudorule author  thomas krahn ( nosmoht) short description  manage freeipa sudo rule description    add  modify delete sudo rule within ipa server using ipa api  options    cn      description        canonical name        can changed unique identifier      required  true     aliases    name     cmdcategory      description        command category rule applies      choices        cmd      description        list commands assigned rule        if empty list passed commands removed rule        if option omitted commands checked changed    host      description        list hosts assigned rule        if empty list passed hosts removed rule        if option omitted hosts checked changed        option c(hostcategory) must omitted assign hosts    hostcategory      description        host category rule applies        if   passed one must omit c(host) c(hostgroup)        option c(host) c(hostgroup) must omitted assign        choices        hostgroup      description        list host groups assigned rule        if empty list passed host groups removed rule        if option omitted host groups checked changed        option c(hostcategory) must omitted assign host groups    runasusercategory      description        runas user category rule applies      choices          version added   2 5    runasgroupcategory      description          runas group category rule applies      choices          version added   2 5    user      description        list users assigned rule        if empty list passed users removed rule        if option omitted users checked changed    usercategory      description        user category rule applies      choices        usergroup      description        list user groups assigned rule        if empty list passed user groups removed rule        if option omitted user groups checked changed    state      description  state ensure     default  present     choices    present    absent    enabled    disabled   extends documentation fragment  ipa documentation version added   2 3       examples         ensure sudo rule present allows every body execute command host without asked password    ipa sudorule      name  sudo nopasswd     cmdcategory      description  allow run every command sudo without password     hostcategory      sudoopt          authenticate      usercategory      ipa host  ipa example com     ipa user  admin     ipa pass  topsecret   ensure user group developers run every command host group db server well host db01 example com    ipa sudorule      name  sudo dev dbserver     description  allow developers run every command sudo database server     cmdcategory      host        db01 example com     hostgroup        db server     sudoopt          authenticate      usergroup        developers     ipa host  ipa example com     ipa user  admin     ipa pass  topsecret      return       sudorule    description  sudorule returned ipa   returned  always   type  dict         usr bin python        coding  utf 8        copyright  (c) 2017  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    ensure sudo rule present allows every body execute command host without asked password     ensure user group developers run every command host group db server well host db01 example com     cn returned list even single value     client modify diff work option must removed added ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipa_sudorule\nauthor: Thomas Krahn (@Nosmoht)\nshort_description: Manage FreeIPA sudo rule\ndescription:\n- Add, modify or delete sudo rule within IPA server using IPA API.\noptions:\n  cn:\n    description:\n    - Canonical name.\n    - Can not be changed as it is the unique identifier.\n    required: true\n    aliases: ['name']\n  cmdcategory:\n    description:\n    - Command category the rule applies to.\n    choices: ['all']\n  cmd:\n    description:\n    - List of commands assigned to the rule.\n    - If an empty list is passed all commands will be removed from the rule.\n    - If option is omitted commands will not be checked or changed.\n  host:\n    description:\n    - List of hosts assigned to the rule.\n    - If an empty list is passed all hosts will be removed from the rule.\n    - If option is omitted hosts will not be checked or changed.\n    - Option C(hostcategory) must be omitted to assign hosts.\n  hostcategory:\n    description:\n    - Host category the rule applies to.\n    - If 'all' is passed one must omit C(host) and C(hostgroup).\n    - Option C(host) and C(hostgroup) must be omitted to assign 'all'.\n    choices: ['all']\n  hostgroup:\n    description:\n    - List of host groups assigned to the rule.\n    - If an empty list is passed all host groups will be removed from the rule.\n    - If option is omitted host groups will not be checked or changed.\n    - Option C(hostcategory) must be omitted to assign host groups.\n  runasusercategory:\n    description:\n    - RunAs User category the rule applies to.\n    choices: ['all']\n    version_added: \"2.5\"\n  runasgroupcategory:\n    description:\n      - RunAs Group category the rule applies to.\n    choices: ['all']\n    version_added: \"2.5\"\n  user:\n    description:\n    - List of users assigned to the rule.\n    - If an empty list is passed all users will be removed from the rule.\n    - If option is omitted users will not be checked or changed.\n  usercategory:\n    description:\n    - User category the rule applies to.\n    choices: ['all']\n  usergroup:\n    description:\n    - List of user groups assigned to the rule.\n    - If an empty list is passed all user groups will be removed from the rule.\n    - If option is omitted user groups will not be checked or changed.\n  state:\n    description: State to ensure\n    default: present\n    choices: ['present', 'absent', 'enabled', 'disabled']\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.3\"\n'''\n\nEXAMPLES = '''\n# Ensure sudo rule is present that's allows all every body to execute any command on any host without being asked for a password.\n- ipa_sudorule:\n    name: sudo_all_nopasswd\n    cmdcategory: all\n    description: Allow to run every command with sudo without password\n    hostcategory: all\n    sudoopt:\n    - '!authenticate'\n    usercategory: all\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n# Ensure user group developers can run every command on host group db-server as well as on host db01.example.com.\n- ipa_sudorule:\n    name: sudo_dev_dbserver\n    description: Allow developers to run every command with sudo on all database server\n    cmdcategory: all\n    host:\n    - db01.example.com\n    hostgroup:\n    - db-server\n    sudoopt:\n    - '!authenticate'\n    usergroup:\n    - developers\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n'''\n\nRETURN = '''\nsudorule:\n  description: Sudorule as returned by IPA\n  returned: always\n  type: dict\n'''\n\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass SudoRuleIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(SudoRuleIPAClient, self).__init__(module, host, port, protocol)\n\n    def sudorule_find(self, name):\n        return self._post_json(method='sudorule_find', name=None, item={'all': True, 'cn': name})\n\n    def sudorule_add(self, name, item):\n        return self._post_json(method='sudorule_add', name=name, item=item)\n\n    def sudorule_mod(self, name, item):\n        return self._post_json(method='sudorule_mod', name=name, item=item)\n\n    def sudorule_del(self, name):\n        return self._post_json(method='sudorule_del', name=name)\n\n    def sudorule_add_option(self, name, item):\n        return self._post_json(method='sudorule_add_option', name=name, item=item)\n\n    def sudorule_add_option_ipasudoopt(self, name, item):\n        return self.sudorule_add_option(name=name, item={'ipasudoopt': item})\n\n    def sudorule_remove_option(self, name, item):\n        return self._post_json(method='sudorule_remove_option', name=name, item=item)\n\n    def sudorule_remove_option_ipasudoopt(self, name, item):\n        return self.sudorule_remove_option(name=name, item={'ipasudoopt': item})\n\n    def sudorule_add_host(self, name, item):\n        return self._post_json(method='sudorule_add_host', name=name, item=item)\n\n    def sudorule_add_host_host(self, name, item):\n        return self.sudorule_add_host(name=name, item={'host': item})\n\n    def sudorule_add_host_hostgroup(self, name, item):\n        return self.sudorule_add_host(name=name, item={'hostgroup': item})\n\n    def sudorule_remove_host(self, name, item):\n        return self._post_json(method='sudorule_remove_host', name=name, item=item)\n\n    def sudorule_remove_host_host(self, name, item):\n        return self.sudorule_remove_host(name=name, item={'host': item})\n\n    def sudorule_remove_host_hostgroup(self, name, item):\n        return self.sudorule_remove_host(name=name, item={'hostgroup': item})\n\n    def sudorule_add_allow_command(self, name, item):\n        return self._post_json(method='sudorule_add_allow_command', name=name, item={'sudocmd': item})\n\n    def sudorule_remove_allow_command(self, name, item):\n        return self._post_json(method='sudorule_remove_allow_command', name=name, item=item)\n\n    def sudorule_add_user(self, name, item):\n        return self._post_json(method='sudorule_add_user', name=name, item=item)\n\n    def sudorule_add_user_user(self, name, item):\n        return self.sudorule_add_user(name=name, item={'user': item})\n\n    def sudorule_add_user_group(self, name, item):\n        return self.sudorule_add_user(name=name, item={'group': item})\n\n    def sudorule_remove_user(self, name, item):\n        return self._post_json(method='sudorule_remove_user', name=name, item=item)\n\n    def sudorule_remove_user_user(self, name, item):\n        return self.sudorule_remove_user(name=name, item={'user': item})\n\n    def sudorule_remove_user_group(self, name, item):\n        return self.sudorule_remove_user(name=name, item={'group': item})\n\n\ndef get_sudorule_dict(cmdcategory=None, description=None, hostcategory=None, ipaenabledflag=None, usercategory=None,\n                      runasgroupcategory=None, runasusercategory=None):\n    data = {}\n    if cmdcategory is not None:\n        data['cmdcategory'] = cmdcategory\n    if description is not None:\n        data['description'] = description\n    if hostcategory is not None:\n        data['hostcategory'] = hostcategory\n    if ipaenabledflag is not None:\n        data['ipaenabledflag'] = ipaenabledflag\n    if usercategory is not None:\n        data['usercategory'] = usercategory\n    if runasusercategory is not None:\n        data['ipasudorunasusercategory'] = runasusercategory\n    if runasgroupcategory is not None:\n        data['ipasudorunasgroupcategory'] = runasgroupcategory\n    return data\n\n\ndef category_changed(module, client, category_name, ipa_sudorule):\n    if ipa_sudorule.get(category_name, None) == ['all']:\n        if not module.check_mode:\n            # cn is returned as list even with only a single value.\n            client.sudorule_mod(name=ipa_sudorule.get('cn')[0], item={category_name: None})\n        return True\n    return False\n\n\ndef ensure(module, client):\n    state = module.params['state']\n    name = module.params['cn']\n    cmd = module.params['cmd']\n    cmdcategory = module.params['cmdcategory']\n    host = module.params['host']\n    hostcategory = module.params['hostcategory']\n    hostgroup = module.params['hostgroup']\n    runasusercategory = module.params['runasusercategory']\n    runasgroupcategory = module.params['runasgroupcategory']\n\n    if state in ['present', 'enabled']:\n        ipaenabledflag = 'TRUE'\n    else:\n        ipaenabledflag = 'FALSE'\n\n    sudoopt = module.params['sudoopt']\n    user = module.params['user']\n    usercategory = module.params['usercategory']\n    usergroup = module.params['usergroup']\n\n    module_sudorule = get_sudorule_dict(cmdcategory=cmdcategory,\n                                        description=module.params['description'],\n                                        hostcategory=hostcategory,\n                                        ipaenabledflag=ipaenabledflag,\n                                        usercategory=usercategory,\n                                        runasusercategory=runasusercategory,\n                                        runasgroupcategory=runasgroupcategory)\n    ipa_sudorule = client.sudorule_find(name=name)\n\n    changed = False\n    if state in ['present', 'disabled', 'enabled']:\n        if not ipa_sudorule:\n            changed = True\n            if not module.check_mode:\n                ipa_sudorule = client.sudorule_add(name=name, item=module_sudorule)\n        else:\n            diff = client.get_diff(ipa_sudorule, module_sudorule)\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    if 'hostcategory' in diff:\n                        if ipa_sudorule.get('memberhost_host', None) is not None:\n                            client.sudorule_remove_host_host(name=name, item=ipa_sudorule.get('memberhost_host'))\n                        if ipa_sudorule.get('memberhost_hostgroup', None) is not None:\n                            client.sudorule_remove_host_hostgroup(name=name,\n                                                                  item=ipa_sudorule.get('memberhost_hostgroup'))\n\n                    client.sudorule_mod(name=name, item=module_sudorule)\n\n        if cmd is not None:\n            changed = category_changed(module, client, 'cmdcategory', ipa_sudorule) or changed\n            if not module.check_mode:\n                client.sudorule_add_allow_command(name=name, item=cmd)\n\n        if runasusercategory is not None:\n            changed = category_changed(module, client, 'iparunasusercategory', ipa_sudorule) or changed\n\n        if runasgroupcategory is not None:\n            changed = category_changed(module, client, 'iparunasgroupcategory', ipa_sudorule) or changed\n\n        if host is not None:\n            changed = category_changed(module, client, 'hostcategory', ipa_sudorule) or changed\n            changed = client.modify_if_diff(name, ipa_sudorule.get('memberhost_host', []), host,\n                                            client.sudorule_add_host_host,\n                                            client.sudorule_remove_host_host) or changed\n\n        if hostgroup is not None:\n            changed = category_changed(module, client, 'hostcategory', ipa_sudorule) or changed\n            changed = client.modify_if_diff(name, ipa_sudorule.get('memberhost_hostgroup', []), hostgroup,\n                                            client.sudorule_add_host_hostgroup,\n                                            client.sudorule_remove_host_hostgroup) or changed\n        if sudoopt is not None:\n            # client.modify_if_diff does not work as each option must be removed/added by its own\n            ipa_list = ipa_sudorule.get('ipasudoopt', [])\n            module_list = sudoopt\n            diff = list(set(ipa_list) - set(module_list))\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    for item in diff:\n                        client.sudorule_remove_option_ipasudoopt(name, item)\n            diff = list(set(module_list) - set(ipa_list))\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    for item in diff:\n                        client.sudorule_add_option_ipasudoopt(name, item)\n\n        if user is not None:\n            changed = category_changed(module, client, 'usercategory', ipa_sudorule) or changed\n            changed = client.modify_if_diff(name, ipa_sudorule.get('memberuser_user', []), user,\n                                            client.sudorule_add_user_user,\n                                            client.sudorule_remove_user_user) or changed\n        if usergroup is not None:\n            changed = category_changed(module, client, 'usercategory', ipa_sudorule) or changed\n            changed = client.modify_if_diff(name, ipa_sudorule.get('memberuser_group', []), usergroup,\n                                            client.sudorule_add_user_group,\n                                            client.sudorule_remove_user_group) or changed\n    else:\n        if ipa_sudorule:\n            changed = True\n            if not module.check_mode:\n                client.sudorule_del(name)\n\n    return changed, client.sudorule_find(name)\n\n\ndef main():\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(cmd=dict(type='list'),\n                         cmdcategory=dict(type='str', choices=['all']),\n                         cn=dict(type='str', required=True, aliases=['name']),\n                         description=dict(type='str'),\n                         host=dict(type='list'),\n                         hostcategory=dict(type='str', choices=['all']),\n                         hostgroup=dict(type='list'),\n                         runasusercategory=dict(type='str', choices=['all']),\n                         runasgroupcategory=dict(type='str', choices=['all']),\n                         sudoopt=dict(type='list'),\n                         state=dict(type='str', default='present', choices=['present', 'absent', 'enabled', 'disabled']),\n                         user=dict(type='list'),\n                         usercategory=dict(type='str', choices=['all']),\n                         usergroup=dict(type='list'))\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           mutually_exclusive=[['cmdcategory', 'cmd'],\n                                               ['hostcategory', 'host'],\n                                               ['hostcategory', 'hostgroup'],\n                                               ['usercategory', 'user'],\n                                               ['usercategory', 'usergroup']],\n                           supports_check_mode=True)\n\n    client = SudoRuleIPAClient(module=module,\n                               host=module.params['ipa_host'],\n                               port=module.params['ipa_port'],\n                               protocol=module.params['ipa_prot'])\n    try:\n        client.login(username=module.params['ipa_user'],\n                     password=module.params['ipa_pass'])\n        changed, sudorule = ensure(module, client)\n        module.exit_json(changed=changed, sudorule=sudorule)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "ipa_sudorule.py", "id": "4f1f6528f45684d73edc8838fb62a430", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/identity/ipa/ipa_sudorule.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}