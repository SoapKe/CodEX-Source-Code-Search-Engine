{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    qualities,\n    unified_strdate,\n)\n\n\nclass MgoonIE(InfoExtractor):\n    _VALID_URL = r\n    _API_URL = 'http://mpos.mgoon.com/player/video?id={0:}'\n    _TESTS = [\n        {\n            'url': 'http://m.mgoon.com/ch/hi6618/v/5582148',\n            'md5': 'dd46bb66ab35cf6d51cc812fd82da79d',\n            'info_dict': {\n                'id': '5582148',\n                'uploader_id': 'hi6618',\n                'duration': 240.419,\n                'upload_date': '20131220',\n                'ext': 'mp4',\n                'title': 'md5:543aa4c27a4931d371c3f433e8cebebc',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            }\n        },\n        {\n            'url': 'http://www.mgoon.com/play/view/5582148',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://video.mgoon.com/5582148',\n            'only_matching': True,\n        },\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        data = self._download_json(self._API_URL.format(video_id), video_id)\n\n        if data.get('errorInfo', {}).get('code') != 'NONE':\n            raise ExtractorError('%s encountered an error: %s' % (\n                self.IE_NAME, data['errorInfo']['message']), expected=True)\n\n        v_info = data['videoInfo']\n        title = v_info.get('v_title')\n        thumbnail = v_info.get('v_thumbnail')\n        duration = v_info.get('v_duration')\n        upload_date = unified_strdate(v_info.get('v_reg_date'))\n        uploader_id = data.get('userInfo', {}).get('u_alias')\n        if duration:\n            duration /= 1000.0\n\n        age_limit = None\n        if data.get('accessInfo', {}).get('code') == 'VIDEO_STATUS_ADULT':\n            age_limit = 18\n\n        formats = []\n        get_quality = qualities(['360p', '480p', '720p', '1080p'])\n        for fmt in data['videoFiles']:\n            formats.append({\n                'format_id': fmt['label'],\n                'quality': get_quality(fmt['label']),\n                'url': fmt['url'],\n                'ext': fmt['format'],\n\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'upload_date': upload_date,\n            'uploader_id': uploader_id,\n            'age_limit': age_limit,\n        }\n", "comments": "(?x)https?://(?:www\\.)?\n    (?:(:?m\\.)?mgoon\\.com/(?:ch/(?:.+)/v|play/view)|\n        video\\.mgoon\\.com)/(?P<id>[0-9]+)\n)\n# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    qualities,\n    unified_strdate,\n)\n\n\nclass MgoonIE(InfoExtractor):\n    _VALID_URL = r'''(?x)https?://(?:www\\.)?\n    (?:(:?m\\.)?mgoon\\.com/(?:ch/(?:.+)/v|play/view)|\n        video\\.mgoon\\.com)/(?P<id>[0-9]+)'''\n    _API_URL = 'http://mpos.mgoon.com/player/video?id={0:}'\n    _TESTS = [\n        {\n            'url': 'http://m.mgoon.com/ch/hi6618/v/5582148',\n            'md5': 'dd46bb66ab35cf6d51cc812fd82da79d',\n            'info_dict': {\n                'id': '5582148',\n                'uploader_id': 'hi6618',\n                'duration': 240.419,\n                'upload_date': '20131220',\n                'ext': 'mp4',\n                'title': 'md5:543aa4c27a4931d371c3f433e8cebebc',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            }\n        },\n        {\n            'url': 'http://www.mgoon.com/play/view/5582148',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://video.mgoon.com/5582148',\n            'only_matching': True,\n        },\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        data = self._download_json(self._API_URL.format(video_id), video_id)\n\n        if data.get('errorInfo', {}).get('code') != 'NONE':\n            raise ExtractorError('%s encountered an error: %s' % (\n                self.IE_NAME, data['errorInfo']['message']), expected=True)\n\n        v_info = data['videoInfo']\n        title = v_info.get('v_title')\n        thumbnail = v_info.get('v_thumbnail')\n        duration = v_info.get('v_duration')\n        upload_date = unified_strdate(v_info.get('v_reg_date'))\n        uploader_id = data.get('userInfo', {}).get('u_alias')\n        if duration:\n            duration /= 1000.0\n\n        age_limit = None\n        if data.get('accessInfo', {}).get('code') == 'VIDEO_STATUS_ADULT':\n            age_limit = 18\n\n        formats = []\n        get_quality = qualities(['360p', '480p', '720p', '1080p'])\n        for fmt in data['videoFiles']:\n            formats.append({\n                'format_id': fmt['label'],\n                'quality': get_quality(fmt['label']),\n                'url': fmt['url'],\n                'ext': fmt['format'],\n\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'upload_date': upload_date,\n            'uploader_id': uploader_id,\n            'age_limit': age_limit,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "mgoon.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/mgoon.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}