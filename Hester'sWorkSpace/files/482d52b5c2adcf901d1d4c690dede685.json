{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass PerformGroupIE(InfoExtractor):\n    _VALID_URL = r'https?://player\\.performgroup\\.com/eplayer(?:/eplayer\\.html|\\.js)\n    _TESTS = [{\n        \n        'url': 'http://player.performgroup.com/eplayer/eplayer.html\n        'md5': '259cb03d142e2e52471e8837ecacb29f',\n        'info_dict': {\n            'id': 'xgrwobuzumes1lwjxtcdpwgxd',\n            'ext': 'mp4',\n            'title': 'Liga MX: Keine Einsicht nach Horrorfoul',\n            'description': 'md5:7cd3b459c82725b021e046ab10bf1c5b',\n            'timestamp': 1511533477,\n            'upload_date': '20171124',\n        }\n    }]\n\n    def _call_api(self, service, auth_token, content_id, referer_url):\n        return self._download_json(\n            'http://ep3.performfeeds.com/ep%s/%s/%s/' % (service, auth_token, content_id),\n            content_id, headers={\n                'Referer': referer_url,\n                'Origin': 'http://player.performgroup.com',\n            }, query={\n                '_fmt': 'json',\n            })\n\n    def _real_extract(self, url):\n        player_id, auth_token = re.search(self._VALID_URL, url).groups()\n        bootstrap = self._call_api('bootstrap', auth_token, player_id, url)\n        video = bootstrap['config']['dataSource']['sourceItems'][0]['videos'][0]\n        video_id = video['uuid']\n        vod = self._call_api('vod', auth_token, video_id, url)\n        media = vod['videos']['video'][0]['media']\n\n        formats = []\n        hls_url = media.get('hls', {}).get('url')\n        if hls_url:\n            formats.extend(self._extract_m3u8_formats(hls_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('hds', {}).get('url')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(hds_url + '?hdcore', video_id, f4m_id='hds', fatal=False))\n\n        for c in media.get('content', []):\n            c_url = c.get('url')\n            if not c_url:\n                continue\n            tbr = int_or_none(c.get('bitrate'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % tbr\n            formats.append({\n                'format_id': format_id,\n                'url': c_url,\n                'tbr': tbr,\n                'width': int_or_none(c.get('width')),\n                'height': int_or_none(c.get('height')),\n                'filesize': int_or_none(c.get('fileSize')),\n                'vcodec': c.get('type'),\n                'fps': int_or_none(c.get('videoFrameRate')),\n                'vbr': int_or_none(c.get('videoRate'), 1000),\n                'abr': int_or_none(c.get('audioRate'), 1000),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video['title'],\n            'description': video.get('description'),\n            'thumbnail': video.get('poster'),\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': int_or_none(video.get('publishedTime'), 1000),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#/?(?P<id>[0-9a-f]{26})\\.(?P<auth_token>[0-9a-z]{26})'\n# http://www.faz.net/aktuell/sport/fussball/wm-2018-playoffs-schweiz-besiegt-nordirland-1-0-15286104.html\n#d478c41c5d192f56b9aa859de8.1w4crrej5w14e1ed4s1ce4ykab',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass PerformGroupIE(InfoExtractor):\n    _VALID_URL = r'https?://player\\.performgroup\\.com/eplayer(?:/eplayer\\.html|\\.js)#/?(?P<id>[0-9a-f]{26})\\.(?P<auth_token>[0-9a-z]{26})'\n    _TESTS = [{\n        # http://www.faz.net/aktuell/sport/fussball/wm-2018-playoffs-schweiz-besiegt-nordirland-1-0-15286104.html\n        'url': 'http://player.performgroup.com/eplayer/eplayer.html#d478c41c5d192f56b9aa859de8.1w4crrej5w14e1ed4s1ce4ykab',\n        'md5': '259cb03d142e2e52471e8837ecacb29f',\n        'info_dict': {\n            'id': 'xgrwobuzumes1lwjxtcdpwgxd',\n            'ext': 'mp4',\n            'title': 'Liga MX: Keine Einsicht nach Horrorfoul',\n            'description': 'md5:7cd3b459c82725b021e046ab10bf1c5b',\n            'timestamp': 1511533477,\n            'upload_date': '20171124',\n        }\n    }]\n\n    def _call_api(self, service, auth_token, content_id, referer_url):\n        return self._download_json(\n            'http://ep3.performfeeds.com/ep%s/%s/%s/' % (service, auth_token, content_id),\n            content_id, headers={\n                'Referer': referer_url,\n                'Origin': 'http://player.performgroup.com',\n            }, query={\n                '_fmt': 'json',\n            })\n\n    def _real_extract(self, url):\n        player_id, auth_token = re.search(self._VALID_URL, url).groups()\n        bootstrap = self._call_api('bootstrap', auth_token, player_id, url)\n        video = bootstrap['config']['dataSource']['sourceItems'][0]['videos'][0]\n        video_id = video['uuid']\n        vod = self._call_api('vod', auth_token, video_id, url)\n        media = vod['videos']['video'][0]['media']\n\n        formats = []\n        hls_url = media.get('hls', {}).get('url')\n        if hls_url:\n            formats.extend(self._extract_m3u8_formats(hls_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('hds', {}).get('url')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(hds_url + '?hdcore', video_id, f4m_id='hds', fatal=False))\n\n        for c in media.get('content', []):\n            c_url = c.get('url')\n            if not c_url:\n                continue\n            tbr = int_or_none(c.get('bitrate'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % tbr\n            formats.append({\n                'format_id': format_id,\n                'url': c_url,\n                'tbr': tbr,\n                'width': int_or_none(c.get('width')),\n                'height': int_or_none(c.get('height')),\n                'filesize': int_or_none(c.get('fileSize')),\n                'vcodec': c.get('type'),\n                'fps': int_or_none(c.get('videoFrameRate')),\n                'vbr': int_or_none(c.get('videoRate'), 1000),\n                'abr': int_or_none(c.get('audioRate'), 1000),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video['title'],\n            'description': video.get('description'),\n            'thumbnail': video.get('poster'),\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': int_or_none(video.get('publishedTime'), 1000),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "performgroup.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/performgroup.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}