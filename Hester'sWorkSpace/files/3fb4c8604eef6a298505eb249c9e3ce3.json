{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\"\"\"Compare a directory of abc and midi files.\n\nAssumes a directory of abc files converted with something like:\n First, remove 'hornpipe' rhythm marker because abc2midi changes note durations\n when that is present.\nls *.abc | xargs -l1 sed -i '/R: hornpipe/d'\nls *.abc |\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\nimport pdb\nimport re\n\n internal imports\nimport tensorflow as tf\nfrom magenta.music import abc_parser\nfrom magenta.music import midi_io\nfrom magenta.music import sequences_lib\n\nFLAGS = tf.app.flags.FLAGS\n\ntf.app.flags.DEFINE_string('input_dir', None,\n                           'Directory containing files to convert.')\n\n\nclass CompareDirectory(tf.test.TestCase):\n\n  def runTest(self):\n    pass\n\n  def compare_directory(self, directory):\n    self.maxDiff = None   pylint: disable=invalid-name\n\n    files_in_dir = tf.gfile.ListDirectory(directory)\n    files_parsed = 0\n    for file_in_dir in files_in_dir:\n      if not file_in_dir.endswith('.abc'):\n        continue\n      abc = os.path.join(directory, file_in_dir)\n      midis = {}\n      ref_num = 1\n      while True:\n        midi = re.sub(r'\\.abc$', str(ref_num) + '.mid',\n                      os.path.join(directory, file_in_dir))\n        if not tf.gfile.Exists(midi):\n          break\n        midis[ref_num] = midi\n        ref_num += 1\n\n      print('parsing {}: {}'.format(files_parsed, abc))\n      tunes, exceptions = abc_parser.parse_abc_tunebook_file(abc)\n      files_parsed += 1\n      self.assertEqual(len(tunes), len(midis) - len(exceptions))\n\n      for tune in tunes.values():\n        expanded_tune = sequences_lib.expand_section_groups(tune)\n        midi_ns = midi_io.midi_file_to_sequence_proto(\n            midis[tune.reference_number])\n         abc2midi adds a 1-tick delay to the start of every note, but we don't.\n        tick_length = ((1 / (midi_ns.tempos[0].qpm / 60)) /\n                       midi_ns.ticks_per_quarter)\n        for note in midi_ns.notes:\n          note.start_time -= tick_length\n           For now, don't compare velocities.\n          note.velocity = 90\n        if len(midi_ns.notes) != len(expanded_tune.notes):\n          pdb.set_trace()\n          self.assertProtoEquals(midi_ns, expanded_tune)\n        for midi_note, test_note in zip(midi_ns.notes, expanded_tune.notes):\n          try:\n            self.assertProtoEquals(midi_note, test_note)\n          except Exception as e:   pylint: disable=broad-except\n            print(e)\n            pdb.set_trace()\n        self.assertEqual(midi_ns.total_time, expanded_tune.total_time)\n\n\ndef main(unused_argv):\n  if not FLAGS.input_dir:\n    tf.logging.fatal('--input_dir required')\n    return\n\n  input_dir = os.path.expanduser(FLAGS.input_dir)\n\n  CompareDirectory().compare_directory(input_dir)\n\n\ndef console_entry_point():\n  tf.app.run(main)\n\n\nif __name__ == '__main__':\n  console_entry_point()\n", "comments": "   compare directory abc midi files   assumes directory abc files converted something like    first  remove  hornpipe  rhythm marker abc2midi changes note durations   present  ls   abc   xargs  l1 sed    r  hornpipe  ls   abc   xargs  l1 abc2midi        copyright 2017 google inc  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license          http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license     first  remove  hornpipe  rhythm marker abc2midi changes note durations    present     internal imports    pylint  disable invalid name    abc2midi adds 1 tick delay start every note      for  compare velocities     pylint  disable broad except ", "content": "# Copyright 2017 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Compare a directory of abc and midi files.\n\nAssumes a directory of abc files converted with something like:\n# First, remove 'hornpipe' rhythm marker because abc2midi changes note durations\n# when that is present.\nls *.abc | xargs -l1 sed -i '/R: hornpipe/d'\nls *.abc | xargs -l1 abc2midi\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\nimport pdb\nimport re\n\n# internal imports\nimport tensorflow as tf\nfrom magenta.music import abc_parser\nfrom magenta.music import midi_io\nfrom magenta.music import sequences_lib\n\nFLAGS = tf.app.flags.FLAGS\n\ntf.app.flags.DEFINE_string('input_dir', None,\n                           'Directory containing files to convert.')\n\n\nclass CompareDirectory(tf.test.TestCase):\n\n  def runTest(self):\n    pass\n\n  def compare_directory(self, directory):\n    self.maxDiff = None  # pylint: disable=invalid-name\n\n    files_in_dir = tf.gfile.ListDirectory(directory)\n    files_parsed = 0\n    for file_in_dir in files_in_dir:\n      if not file_in_dir.endswith('.abc'):\n        continue\n      abc = os.path.join(directory, file_in_dir)\n      midis = {}\n      ref_num = 1\n      while True:\n        midi = re.sub(r'\\.abc$', str(ref_num) + '.mid',\n                      os.path.join(directory, file_in_dir))\n        if not tf.gfile.Exists(midi):\n          break\n        midis[ref_num] = midi\n        ref_num += 1\n\n      print('parsing {}: {}'.format(files_parsed, abc))\n      tunes, exceptions = abc_parser.parse_abc_tunebook_file(abc)\n      files_parsed += 1\n      self.assertEqual(len(tunes), len(midis) - len(exceptions))\n\n      for tune in tunes.values():\n        expanded_tune = sequences_lib.expand_section_groups(tune)\n        midi_ns = midi_io.midi_file_to_sequence_proto(\n            midis[tune.reference_number])\n        # abc2midi adds a 1-tick delay to the start of every note, but we don't.\n        tick_length = ((1 / (midi_ns.tempos[0].qpm / 60)) /\n                       midi_ns.ticks_per_quarter)\n        for note in midi_ns.notes:\n          note.start_time -= tick_length\n          # For now, don't compare velocities.\n          note.velocity = 90\n        if len(midi_ns.notes) != len(expanded_tune.notes):\n          pdb.set_trace()\n          self.assertProtoEquals(midi_ns, expanded_tune)\n        for midi_note, test_note in zip(midi_ns.notes, expanded_tune.notes):\n          try:\n            self.assertProtoEquals(midi_note, test_note)\n          except Exception as e:  # pylint: disable=broad-except\n            print(e)\n            pdb.set_trace()\n        self.assertEqual(midi_ns.total_time, expanded_tune.total_time)\n\n\ndef main(unused_argv):\n  if not FLAGS.input_dir:\n    tf.logging.fatal('--input_dir required')\n    return\n\n  input_dir = os.path.expanduser(FLAGS.input_dir)\n\n  CompareDirectory().compare_directory(input_dir)\n\n\ndef console_entry_point():\n  tf.app.run(main)\n\n\nif __name__ == '__main__':\n  console_entry_point()\n", "description": "Magenta: Music and Art Generation with Machine Intelligence", "file_name": "abc_compare.py", "id": "3fb4c8604eef6a298505eb249c9e3ce3", "language": "Python", "project_name": "magenta", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-magenta/tensorflow-magenta-c3eda3d/magenta/scripts/abc_compare.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:52:33Z", "url": "https://github.com/tensorflow/magenta", "wiki": false}