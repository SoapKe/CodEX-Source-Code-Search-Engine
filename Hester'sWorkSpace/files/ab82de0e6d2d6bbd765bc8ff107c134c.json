{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import js_to_json\n\n\nclass PatreonIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?patreon\\.com/creation\\?hid=(?P<id>[^&\n    _TESTS = [\n        {\n            'url': 'http://www.patreon.com/creation?hid=743933',\n            'md5': 'e25505eec1053a6e6813b8ed369875cc',\n            'info_dict': {\n                'id': '743933',\n                'ext': 'mp3',\n                'title': 'Episode 166: David Smalley of Dogma Debate',\n                'uploader': 'Cognitive Dissonance Podcast',\n                'thumbnail': 're:^https?://.*$',\n            },\n        },\n        {\n            'url': 'http://www.patreon.com/creation?hid=754133',\n            'md5': '3eb09345bf44bf60451b8b0b81759d0a',\n            'info_dict': {\n                'id': '754133',\n                'ext': 'mp3',\n                'title': 'CD 167 Extra',\n                'uploader': 'Cognitive Dissonance Podcast',\n                'thumbnail': 're:^https?://.*$',\n            },\n        },\n        {\n            'url': 'https://www.patreon.com/creation?hid=1682498',\n            'info_dict': {\n                'id': 'SU4fj_aEMVw',\n                'ext': 'mp4',\n                'title': 'I\\'m on Patreon!',\n                'uploader': 'TraciJHines',\n                'thumbnail': 're:^https?://.*$',\n                'upload_date': '20150211',\n                'description': 'md5:c5a706b1f687817a3de09db1eb93acd4',\n                'uploader_id': 'TraciJHines',\n            },\n            'params': {\n                'noplaylist': True,\n                'skip_download': True,\n            }\n        }\n    ]\n\n    \n    \n    \n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        title = self._og_search_title(webpage).strip()\n\n        attach_fn = self._html_search_regex(\n            r'<div class=\"attach\"><a target=\"_blank\" href=\"([^\"]+)\">',\n            webpage, 'attachment URL', default=None)\n        embed = self._html_search_regex(\n            r'<div[^>]+id=\"watchCreation\"[^>]*>\\s*<iframe[^>]+src=\"([^\"]+)\"',\n            webpage, 'embedded URL', default=None)\n\n        if attach_fn is not None:\n            video_url = 'http://www.patreon.com' + attach_fn\n            thumbnail = self._og_search_thumbnail(webpage)\n            uploader = self._html_search_regex(\n                r'<strong>(.*?)</strong> is creating', webpage, 'uploader')\n        elif embed is not None:\n            return self.url_result(embed)\n        else:\n            playlist = self._parse_json(self._search_regex(\n                r'(?s)new\\s+jPlayerPlaylist\\(\\s*\\{\\s*[^}]*},\\s*(\\[.*?,?\\s*\\])',\n                webpage, 'playlist JSON'),\n                video_id, transform_source=js_to_json)\n            data = playlist[0]\n            video_url = self._proto_relative_url(data['mp3'])\n            thumbnail = self._proto_relative_url(data.get('cover'))\n            uploader = data.get('artist')\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'ext': 'mp3',\n            'title': title,\n            'uploader': uploader,\n            'thumbnail': thumbnail,\n        }\n", "comments": "\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n\n        login_form = {\n            'redirectUrl': 'http://www.patreon.com/',\n            'email': username,\n            'password': password,\n        }\n\n        request = sanitized_Request(\n            'https://www.patreon.com/processLogin',\n            compat_urllib_parse_urlencode(login_form).encode('utf-8')\n        )\n        login_page = self._download_webpage(request, None, note='Logging in')\n\n        if re.search(r'onLoginFailed', login_page):\n            raise ExtractorError('Unable to login, incorrect username and/or password', expected=True)\n\n    def _real_initialize(self):\n        self._login()\n    \n \n# coding: utf-8\n#]+)'\n# Currently Patreon exposes download URL via hidden CSS, so login is not\n# needed. Keeping this commented for when this inevitably changes.\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import js_to_json\n\n\nclass PatreonIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?patreon\\.com/creation\\?hid=(?P<id>[^&#]+)'\n    _TESTS = [\n        {\n            'url': 'http://www.patreon.com/creation?hid=743933',\n            'md5': 'e25505eec1053a6e6813b8ed369875cc',\n            'info_dict': {\n                'id': '743933',\n                'ext': 'mp3',\n                'title': 'Episode 166: David Smalley of Dogma Debate',\n                'uploader': 'Cognitive Dissonance Podcast',\n                'thumbnail': 're:^https?://.*$',\n            },\n        },\n        {\n            'url': 'http://www.patreon.com/creation?hid=754133',\n            'md5': '3eb09345bf44bf60451b8b0b81759d0a',\n            'info_dict': {\n                'id': '754133',\n                'ext': 'mp3',\n                'title': 'CD 167 Extra',\n                'uploader': 'Cognitive Dissonance Podcast',\n                'thumbnail': 're:^https?://.*$',\n            },\n        },\n        {\n            'url': 'https://www.patreon.com/creation?hid=1682498',\n            'info_dict': {\n                'id': 'SU4fj_aEMVw',\n                'ext': 'mp4',\n                'title': 'I\\'m on Patreon!',\n                'uploader': 'TraciJHines',\n                'thumbnail': 're:^https?://.*$',\n                'upload_date': '20150211',\n                'description': 'md5:c5a706b1f687817a3de09db1eb93acd4',\n                'uploader_id': 'TraciJHines',\n            },\n            'params': {\n                'noplaylist': True,\n                'skip_download': True,\n            }\n        }\n    ]\n\n    # Currently Patreon exposes download URL via hidden CSS, so login is not\n    # needed. Keeping this commented for when this inevitably changes.\n    '''\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n\n        login_form = {\n            'redirectUrl': 'http://www.patreon.com/',\n            'email': username,\n            'password': password,\n        }\n\n        request = sanitized_Request(\n            'https://www.patreon.com/processLogin',\n            compat_urllib_parse_urlencode(login_form).encode('utf-8')\n        )\n        login_page = self._download_webpage(request, None, note='Logging in')\n\n        if re.search(r'onLoginFailed', login_page):\n            raise ExtractorError('Unable to login, incorrect username and/or password', expected=True)\n\n    def _real_initialize(self):\n        self._login()\n    '''\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        title = self._og_search_title(webpage).strip()\n\n        attach_fn = self._html_search_regex(\n            r'<div class=\"attach\"><a target=\"_blank\" href=\"([^\"]+)\">',\n            webpage, 'attachment URL', default=None)\n        embed = self._html_search_regex(\n            r'<div[^>]+id=\"watchCreation\"[^>]*>\\s*<iframe[^>]+src=\"([^\"]+)\"',\n            webpage, 'embedded URL', default=None)\n\n        if attach_fn is not None:\n            video_url = 'http://www.patreon.com' + attach_fn\n            thumbnail = self._og_search_thumbnail(webpage)\n            uploader = self._html_search_regex(\n                r'<strong>(.*?)</strong> is creating', webpage, 'uploader')\n        elif embed is not None:\n            return self.url_result(embed)\n        else:\n            playlist = self._parse_json(self._search_regex(\n                r'(?s)new\\s+jPlayerPlaylist\\(\\s*\\{\\s*[^}]*},\\s*(\\[.*?,?\\s*\\])',\n                webpage, 'playlist JSON'),\n                video_id, transform_source=js_to_json)\n            data = playlist[0]\n            video_url = self._proto_relative_url(data['mp3'])\n            thumbnail = self._proto_relative_url(data.get('cover'))\n            uploader = data.get('artist')\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'ext': 'mp3',\n            'title': title,\n            'uploader': uploader,\n            'thumbnail': thumbnail,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "patreon.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/patreon.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}