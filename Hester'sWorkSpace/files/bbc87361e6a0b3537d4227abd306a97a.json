{"author": "tgalal", "code": "import unittest\nimport inspect\nimport threading\n\ntry:\n    import Queue\nexcept ImportError:\n    import queue as Queue\n\nclass YowLayerEvent:\n    def __init__(self, name, **kwargs):\n        self.name = name\n        self.detached = False\n        if \"detached\" in kwargs:\n            del kwargs[\"detached\"]\n            self.detached = True\n        self.args = kwargs\n\n    def isDetached(self):\n        return self.detached\n\n    def getName(self):\n        return self.name\n\n    def getArg(self, name):\n        return self.args[name] if name in self.args else None\n    \nclass EventCallback(object):\n    def __init__(self, eventName):\n        self.eventName = eventName\n\n    def __call__(self, fn):\n        fn.event_callback = self.eventName\n        return fn\n\n\nclass YowLayer(object):\n    __upper = None\n    __lower = None\n    _props = {}\n    __detachedQueue = Queue.Queue()\n    # def __init__(self, upperLayer, lowerLayer):\n    #     self.setLayers(upperLayer, lowerLayer)\n\n    def __init__(self):\n        self.setLayers(None, None)\n        self.interface = None\n        self.event_callbacks = {}\n        self.__stack = None\n        self.lock = threading.Lock()\n        members = inspect.getmembers(self, predicate=inspect.ismethod)\n        for m in members:\n            if hasattr(m[1], \"event_callback\"):\n                fname = m[0]\n                fn = m[1]\n                self.event_callbacks[fn.event_callback] = getattr(self, fname)\n\n    def getLayerInterface(self, YowLayerClass = None):\n        return self.interface if YowLayerClass is None else self.__stack.getLayerInterface(YowLayerClass)\n\n    def setStack(self, stack):\n        self.__stack = stack\n\n    def getStack(self):\n        return self.__stack\n\n    def setLayers(self, upper, lower):\n        self.__upper = upper\n        self.__lower = lower\n\n    def send(self, data):\n        self.toLower(data)\n\n    def receive(self, data):\n        self.toUpper(data)\n\n    def toUpper(self, data):\n        if self.__upper:\n            self.__upper.receive(data)\n\n    def toLower(self, data):\n        self.lock.acquire()\n        if self.__lower:\n            self.__lower.send(data)\n        self.lock.release()\n\n    def emitEvent(self, yowLayerEvent):\n        if self.__upper and not self.__upper.onEvent(yowLayerEvent):\n            if yowLayerEvent.isDetached():\n                yowLayerEvent.detached = False\n                self.getStack().execDetached(lambda :  self.__upper.emitEvent(yowLayerEvent))\n\n            else:\n                self.__upper.emitEvent(yowLayerEvent)\n\n\n    def broadcastEvent(self, yowLayerEvent):\n        if self.__lower and not self.__lower.onEvent(yowLayerEvent):\n            if yowLayerEvent.isDetached():\n                yowLayerEvent.detached = False\n                self.getStack().execDetached(lambda:self.__lower.broadcastEvent(yowLayerEvent))\n            else:\n                self.__lower.broadcastEvent(yowLayerEvent)\n\n    \n    def onEvent(self, yowLayerEvent):\n        eventName = yowLayerEvent.getName()\n        if eventName in self.event_callbacks:\n            return self.event_callbacks[eventName](yowLayerEvent)\n        return False\n\n    def getProp(self, key, default = None):\n        return self.getStack().getProp(key, default)\n\n    def setProp(self, key, val):\n        return self.getStack().setProp(key, val)\n\n\nclass YowProtocolLayer(YowLayer):\n    def __init__(self, handleMap = None):\n        super(YowProtocolLayer, self).__init__()\n        self.handleMap = handleMap or {}\n        self.iqRegistry = {}\n\n    def receive(self, node):\n        if not self.processIqRegistry(node):\n            if node.tag in self.handleMap:\n                recv, _ = self.handleMap[node.tag]\n                if recv:\n                    recv(node)\n\n    def send(self, entity):\n        if entity.getTag() in self.handleMap:\n            _, send = self.handleMap[entity.getTag()]\n            if send:\n                send(entity)\n\n    def entityToLower(self, entity):\n        #super(YowProtocolLayer, self).toLower(entity.toProtocolTreeNode())\n        self.toLower(entity.toProtocolTreeNode())\n\n    def isGroupJid(self, jid):\n        return \"-\" in jid\n\n    def raiseErrorForNode(self, node):\n        raise ValueError(\"Unimplemented notification type %s \" % node)\n\n\n    def _sendIq(self, iqEntity, onSuccess = None, onError = None):\n        self.iqRegistry[iqEntity.getId()] = (iqEntity, onSuccess, onError)\n        self.toLower(iqEntity.toProtocolTreeNode())\n\n    def processIqRegistry(self, protocolTreeNode):\n        if protocolTreeNode.tag == \"iq\":\n            iq_id = protocolTreeNode[\"id\"]\n            if iq_id in self.iqRegistry:\n                originalIq, successClbk, errorClbk = self.iqRegistry[iq_id]\n                del self.iqRegistry[iq_id]\n\n                if protocolTreeNode[\"type\"] == \"result\" and successClbk:\n                    successClbk(protocolTreeNode, originalIq)\n                elif protocolTreeNode[\"type\"] == \"error\" and errorClbk:\n                    errorClbk(protocolTreeNode, originalIq)\n                return True\n\n        return False\n\nclass YowParallelLayer(YowLayer):\n    def __init__(self, sublayers = None):\n        super(YowParallelLayer, self).__init__()\n        self.sublayers = sublayers or []\n        self.sublayers = tuple([sublayer() for sublayer in sublayers])\n        for s in self.sublayers:\n            #s.setLayers(self, self)\n            s.toLower = self.toLower\n            s.toUpper = self.toUpper\n            s.broadcastEvent = self.subBroadcastEvent\n            s.emitEvent = self.subEmitEvent\n\n\n    def getLayerInterface(self, YowLayerClass):\n        for s in self.sublayers:\n            if s.__class__ == YowLayerClass:\n                return s.getLayerInterface()\n\n    def setStack(self, stack):\n        super(YowParallelLayer, self).setStack(stack)\n        for s in self.sublayers:\n            s.setStack(self.getStack())\n\n\n    def receive(self, data):\n        for s in self.sublayers:\n            s.receive(data)\n\n    def send(self, data):\n        for s in self.sublayers:\n            s.send(data)\n\n    def subBroadcastEvent(self, yowLayerEvent):\n        self.onEvent(yowLayerEvent)\n        self.broadcastEvent(yowLayerEvent)\n\n    def subEmitEvent(self, yowLayerEvent):\n        self.onEvent(yowLayerEvent)\n        self.emitEvent(yowLayerEvent)\n\n\n    def onEvent(self, yowLayerEvent):\n        stopEvent = False\n        for s in self.sublayers:\n            stopEvent = stopEvent or s.onEvent(yowLayerEvent)\n\n        return stopEvent\n\n    def __str__(self):\n        return \" - \".join([l.__str__() for l in self.sublayers])\n\nclass YowLayerInterface(object):\n    def __init__(self, layer):\n        self._layer = layer\n\n\nclass YowLayerTest(unittest.TestCase):\n    def __init__(self, *args):\n        super(YowLayerTest, self).__init__(*args)\n        self.upperSink = []\n        self.lowerSink = []\n        self.toUpper = self.receiveOverrider\n        self.toLower = self.sendOverrider\n        self.upperEventSink = []\n        self.lowerEventSink = []\n        self.emitEvent = self.emitEventOverrider\n        self.broadcastEvent = self.broadcastEventOverrider\n\n    def receiveOverrider(self, data):\n        self.upperSink.append(data)\n\n    def sendOverrider(self, data):\n        self.lowerSink.append(data)\n        \n    def emitEventOverrider(self, event):\n        self.upperEventSink.append(event)\n    \n    def broadcastEventOverrider(self, event):\n        self.lowerEventSink.append(event)\n        \n    def assert_emitEvent(self, event):\n        self.emitEvent(event)\n        try:\n            self.assertEqual(event, self.upperEventSink.pop())\n        except IndexError:\n            raise AssertionError(\"Event '%s' was not emited through this layer\" % (event.getName()))\n        \n    def assert_broadcastEvent(self, event):\n        self.broadcastEvent(event)\n        try:\n            self.assertEqual(event, self.lowerEventSink.pop())\n        except IndexError:\n            raise AssertionError(\"Event '%s' was not broadcasted through this layer\" % (event.getName()))\n\nclass YowProtocolLayerTest(YowLayerTest):\n    def assertSent(self, entity):\n        self.send(entity)\n        try:\n            self.assertEqual(entity.toProtocolTreeNode(), self.lowerSink.pop())\n        except IndexError:\n            raise AssertionError(\"Entity '%s' was not sent through this layer\" % (entity.getTag()))\n\n    def assertReceived(self, entity):\n        node = entity.toProtocolTreeNode()\n        self.receive(node)\n        try:\n            self.assertEqual(node, self.upperSink.pop().toProtocolTreeNode())\n        except IndexError:\n            raise AssertionError(\"'%s' was not received through this layer\" % (entity.getTag()))\n", "comments": "   return true stop propagating event       def   init  (self  upperlayer  lowerlayer)         self setlayers(upperlayer  lowerlayer)   super(yowprotocollayer  self) tolower(entity toprotocoltreenode())   setlayers(self  self) ", "content": "import unittest\nimport inspect\nimport threading\n\ntry:\n    import Queue\nexcept ImportError:\n    import queue as Queue\n\nclass YowLayerEvent:\n    def __init__(self, name, **kwargs):\n        self.name = name\n        self.detached = False\n        if \"detached\" in kwargs:\n            del kwargs[\"detached\"]\n            self.detached = True\n        self.args = kwargs\n\n    def isDetached(self):\n        return self.detached\n\n    def getName(self):\n        return self.name\n\n    def getArg(self, name):\n        return self.args[name] if name in self.args else None\n    \nclass EventCallback(object):\n    def __init__(self, eventName):\n        self.eventName = eventName\n\n    def __call__(self, fn):\n        fn.event_callback = self.eventName\n        return fn\n\n\nclass YowLayer(object):\n    __upper = None\n    __lower = None\n    _props = {}\n    __detachedQueue = Queue.Queue()\n    # def __init__(self, upperLayer, lowerLayer):\n    #     self.setLayers(upperLayer, lowerLayer)\n\n    def __init__(self):\n        self.setLayers(None, None)\n        self.interface = None\n        self.event_callbacks = {}\n        self.__stack = None\n        self.lock = threading.Lock()\n        members = inspect.getmembers(self, predicate=inspect.ismethod)\n        for m in members:\n            if hasattr(m[1], \"event_callback\"):\n                fname = m[0]\n                fn = m[1]\n                self.event_callbacks[fn.event_callback] = getattr(self, fname)\n\n    def getLayerInterface(self, YowLayerClass = None):\n        return self.interface if YowLayerClass is None else self.__stack.getLayerInterface(YowLayerClass)\n\n    def setStack(self, stack):\n        self.__stack = stack\n\n    def getStack(self):\n        return self.__stack\n\n    def setLayers(self, upper, lower):\n        self.__upper = upper\n        self.__lower = lower\n\n    def send(self, data):\n        self.toLower(data)\n\n    def receive(self, data):\n        self.toUpper(data)\n\n    def toUpper(self, data):\n        if self.__upper:\n            self.__upper.receive(data)\n\n    def toLower(self, data):\n        self.lock.acquire()\n        if self.__lower:\n            self.__lower.send(data)\n        self.lock.release()\n\n    def emitEvent(self, yowLayerEvent):\n        if self.__upper and not self.__upper.onEvent(yowLayerEvent):\n            if yowLayerEvent.isDetached():\n                yowLayerEvent.detached = False\n                self.getStack().execDetached(lambda :  self.__upper.emitEvent(yowLayerEvent))\n\n            else:\n                self.__upper.emitEvent(yowLayerEvent)\n\n\n    def broadcastEvent(self, yowLayerEvent):\n        if self.__lower and not self.__lower.onEvent(yowLayerEvent):\n            if yowLayerEvent.isDetached():\n                yowLayerEvent.detached = False\n                self.getStack().execDetached(lambda:self.__lower.broadcastEvent(yowLayerEvent))\n            else:\n                self.__lower.broadcastEvent(yowLayerEvent)\n\n    '''return true to stop propagating the event'''\n    def onEvent(self, yowLayerEvent):\n        eventName = yowLayerEvent.getName()\n        if eventName in self.event_callbacks:\n            return self.event_callbacks[eventName](yowLayerEvent)\n        return False\n\n    def getProp(self, key, default = None):\n        return self.getStack().getProp(key, default)\n\n    def setProp(self, key, val):\n        return self.getStack().setProp(key, val)\n\n\nclass YowProtocolLayer(YowLayer):\n    def __init__(self, handleMap = None):\n        super(YowProtocolLayer, self).__init__()\n        self.handleMap = handleMap or {}\n        self.iqRegistry = {}\n\n    def receive(self, node):\n        if not self.processIqRegistry(node):\n            if node.tag in self.handleMap:\n                recv, _ = self.handleMap[node.tag]\n                if recv:\n                    recv(node)\n\n    def send(self, entity):\n        if entity.getTag() in self.handleMap:\n            _, send = self.handleMap[entity.getTag()]\n            if send:\n                send(entity)\n\n    def entityToLower(self, entity):\n        #super(YowProtocolLayer, self).toLower(entity.toProtocolTreeNode())\n        self.toLower(entity.toProtocolTreeNode())\n\n    def isGroupJid(self, jid):\n        return \"-\" in jid\n\n    def raiseErrorForNode(self, node):\n        raise ValueError(\"Unimplemented notification type %s \" % node)\n\n\n    def _sendIq(self, iqEntity, onSuccess = None, onError = None):\n        self.iqRegistry[iqEntity.getId()] = (iqEntity, onSuccess, onError)\n        self.toLower(iqEntity.toProtocolTreeNode())\n\n    def processIqRegistry(self, protocolTreeNode):\n        if protocolTreeNode.tag == \"iq\":\n            iq_id = protocolTreeNode[\"id\"]\n            if iq_id in self.iqRegistry:\n                originalIq, successClbk, errorClbk = self.iqRegistry[iq_id]\n                del self.iqRegistry[iq_id]\n\n                if protocolTreeNode[\"type\"] == \"result\" and successClbk:\n                    successClbk(protocolTreeNode, originalIq)\n                elif protocolTreeNode[\"type\"] == \"error\" and errorClbk:\n                    errorClbk(protocolTreeNode, originalIq)\n                return True\n\n        return False\n\nclass YowParallelLayer(YowLayer):\n    def __init__(self, sublayers = None):\n        super(YowParallelLayer, self).__init__()\n        self.sublayers = sublayers or []\n        self.sublayers = tuple([sublayer() for sublayer in sublayers])\n        for s in self.sublayers:\n            #s.setLayers(self, self)\n            s.toLower = self.toLower\n            s.toUpper = self.toUpper\n            s.broadcastEvent = self.subBroadcastEvent\n            s.emitEvent = self.subEmitEvent\n\n\n    def getLayerInterface(self, YowLayerClass):\n        for s in self.sublayers:\n            if s.__class__ == YowLayerClass:\n                return s.getLayerInterface()\n\n    def setStack(self, stack):\n        super(YowParallelLayer, self).setStack(stack)\n        for s in self.sublayers:\n            s.setStack(self.getStack())\n\n\n    def receive(self, data):\n        for s in self.sublayers:\n            s.receive(data)\n\n    def send(self, data):\n        for s in self.sublayers:\n            s.send(data)\n\n    def subBroadcastEvent(self, yowLayerEvent):\n        self.onEvent(yowLayerEvent)\n        self.broadcastEvent(yowLayerEvent)\n\n    def subEmitEvent(self, yowLayerEvent):\n        self.onEvent(yowLayerEvent)\n        self.emitEvent(yowLayerEvent)\n\n\n    def onEvent(self, yowLayerEvent):\n        stopEvent = False\n        for s in self.sublayers:\n            stopEvent = stopEvent or s.onEvent(yowLayerEvent)\n\n        return stopEvent\n\n    def __str__(self):\n        return \" - \".join([l.__str__() for l in self.sublayers])\n\nclass YowLayerInterface(object):\n    def __init__(self, layer):\n        self._layer = layer\n\n\nclass YowLayerTest(unittest.TestCase):\n    def __init__(self, *args):\n        super(YowLayerTest, self).__init__(*args)\n        self.upperSink = []\n        self.lowerSink = []\n        self.toUpper = self.receiveOverrider\n        self.toLower = self.sendOverrider\n        self.upperEventSink = []\n        self.lowerEventSink = []\n        self.emitEvent = self.emitEventOverrider\n        self.broadcastEvent = self.broadcastEventOverrider\n\n    def receiveOverrider(self, data):\n        self.upperSink.append(data)\n\n    def sendOverrider(self, data):\n        self.lowerSink.append(data)\n        \n    def emitEventOverrider(self, event):\n        self.upperEventSink.append(event)\n    \n    def broadcastEventOverrider(self, event):\n        self.lowerEventSink.append(event)\n        \n    def assert_emitEvent(self, event):\n        self.emitEvent(event)\n        try:\n            self.assertEqual(event, self.upperEventSink.pop())\n        except IndexError:\n            raise AssertionError(\"Event '%s' was not emited through this layer\" % (event.getName()))\n        \n    def assert_broadcastEvent(self, event):\n        self.broadcastEvent(event)\n        try:\n            self.assertEqual(event, self.lowerEventSink.pop())\n        except IndexError:\n            raise AssertionError(\"Event '%s' was not broadcasted through this layer\" % (event.getName()))\n\nclass YowProtocolLayerTest(YowLayerTest):\n    def assertSent(self, entity):\n        self.send(entity)\n        try:\n            self.assertEqual(entity.toProtocolTreeNode(), self.lowerSink.pop())\n        except IndexError:\n            raise AssertionError(\"Entity '%s' was not sent through this layer\" % (entity.getTag()))\n\n    def assertReceived(self, entity):\n        node = entity.toProtocolTreeNode()\n        self.receive(node)\n        try:\n            self.assertEqual(node, self.upperSink.pop().toProtocolTreeNode())\n        except IndexError:\n            raise AssertionError(\"'%s' was not received through this layer\" % (entity.getTag()))\n", "description": "The python WhatsApp library", "file_name": "__init__.py", "id": "bbc87361e6a0b3537d4227abd306a97a", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/__init__.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}