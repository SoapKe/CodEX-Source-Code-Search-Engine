{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo.tests import common\nfrom odoo.modules.module import get_module_resource\n\n\nclass TestRecruitmentProcess(common.TransactionCase):\n\n    def test_00_recruitment_process(self):\n        \n\n        \n        self.res_users_hr_recruitment_officer = self.env['res.users'].create({\n            'company_id': self.env.ref('base.main_company').id,\n            'name': 'HR Recruitment Officer',\n            'login': \"hrro\",\n            'email': \"hrofcr@yourcompany.com\",\n            'groups_id': [(6, 0, [self.env.ref('hr_recruitment.group_hr_recruitment_user').id])]\n        })\n\n        \n        \n        with open(get_module_resource('hr_recruitment', 'tests', 'resume.eml'), 'rb') as request_file:\n            request_message = request_file.read()\n        self.env['mail.thread'].sudo(self.res_users_hr_recruitment_officer.id).message_process(\n            'hr.applicant', request_message, custom_values={\"job_id\": self.env.ref('hr.job_developer').id})\n\n        \n        applicant = self.env['hr.applicant'].search([('email_from', '=', 'Mr. Richard Anderson <Richard_Anderson@yahoo.com>')], limit=1)\n        self.assertTrue(applicant, \"Applicant is not created after getting the mail\")\n        resume_ids = self.env['ir.attachment'].search([\n            ('datas_fname', '=', 'resume.pdf'),\n            ('res_model', '=', self.env['hr.applicant']._name),\n            ('res_id', '=', applicant.id)])\n        self.assertEquals(applicant.name, 'Application for the post of Jr.application Programmer.', 'Applicant name does not match.')\n        self.assertEquals(applicant.stage_id, self.env.ref('hr_recruitment.stage_job1'),\n            \"Stage should be 'Initial qualification' and is '%s'.\" % (applicant.stage_id.name))\n        self.assertTrue(resume_ids, 'Resume is not attached.')\n        \n        applicant.write({'job_id': self.env.ref('hr.job_developer').id})\n        \n        applicant_meeting = applicant.action_makeMeeting()\n        self.assertEquals(applicant_meeting['context']['default_name'], 'Application for the post of Jr.application Programmer.',\n            'Applicant name does not match.')\n", "comments": "    test recruitment process            coding  utf 8        part odoo  see license file full copyright licensing details     create new hr recruitment officer    an applicant interested job position  so sends resume email     in order test process recruitment giving hr officer rights    after getting mail  i check details new applicant     i assign job position applicant    i schedule meeting applicant interview  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.tests import common\nfrom odoo.modules.module import get_module_resource\n\n\nclass TestRecruitmentProcess(common.TransactionCase):\n\n    def test_00_recruitment_process(self):\n        \"\"\" Test recruitment process \"\"\"\n\n        # Create a new HR Recruitment Officer\n        self.res_users_hr_recruitment_officer = self.env['res.users'].create({\n            'company_id': self.env.ref('base.main_company').id,\n            'name': 'HR Recruitment Officer',\n            'login': \"hrro\",\n            'email': \"hrofcr@yourcompany.com\",\n            'groups_id': [(6, 0, [self.env.ref('hr_recruitment.group_hr_recruitment_user').id])]\n        })\n\n        # An applicant is interested in the job position. So he sends a resume by email.\n        # In Order to test process of Recruitment so giving HR officer's rights\n        with open(get_module_resource('hr_recruitment', 'tests', 'resume.eml'), 'rb') as request_file:\n            request_message = request_file.read()\n        self.env['mail.thread'].sudo(self.res_users_hr_recruitment_officer.id).message_process(\n            'hr.applicant', request_message, custom_values={\"job_id\": self.env.ref('hr.job_developer').id})\n\n        # After getting the mail, I check the details of the new applicant.\n        applicant = self.env['hr.applicant'].search([('email_from', '=', 'Mr. Richard Anderson <Richard_Anderson@yahoo.com>')], limit=1)\n        self.assertTrue(applicant, \"Applicant is not created after getting the mail\")\n        resume_ids = self.env['ir.attachment'].search([\n            ('datas_fname', '=', 'resume.pdf'),\n            ('res_model', '=', self.env['hr.applicant']._name),\n            ('res_id', '=', applicant.id)])\n        self.assertEquals(applicant.name, 'Application for the post of Jr.application Programmer.', 'Applicant name does not match.')\n        self.assertEquals(applicant.stage_id, self.env.ref('hr_recruitment.stage_job1'),\n            \"Stage should be 'Initial qualification' and is '%s'.\" % (applicant.stage_id.name))\n        self.assertTrue(resume_ids, 'Resume is not attached.')\n        # I assign the Job position to the applicant\n        applicant.write({'job_id': self.env.ref('hr.job_developer').id})\n        # I schedule meeting with applicant for interview.\n        applicant_meeting = applicant.action_makeMeeting()\n        self.assertEquals(applicant_meeting['context']['default_name'], 'Application for the post of Jr.application Programmer.',\n            'Applicant name does not match.')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_recruitment_process.py", "id": "a5c760b288feb9fe6316a2f3ad3628a8", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_recruitment/tests/test_recruitment_process.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}