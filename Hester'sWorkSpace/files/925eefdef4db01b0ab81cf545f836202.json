{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    float_or_none,\n    ExtractorError,\n)\n\n\nclass NineNowIE(InfoExtractor):\n    IE_NAME = '9now.com.au'\n    _VALID_URL = r'https?://(?:www\\.)?9now\\.com\\.au/(?:[^/]+/){2}(?P<id>[^/?\n    _TESTS = [{\n        \n        'url': 'https://www.9now.com.au/afl-footy-show/2016/clip-ciql02091000g0hp5oktrnytc',\n        'md5': '17cf47d63ec9323e562c9957a968b565',\n        'info_dict': {\n            'id': '16801',\n            'ext': 'mp4',\n            'title': 'St. Kilda\\'s Joey Montagna on the potential for a player\\'s strike',\n            'description': 'Is a boycott of the NAB Cup \"on the table\"?',\n            'uploader_id': '4460760524001',\n            'upload_date': '20160713',\n            'timestamp': 1468421266,\n        },\n        'skip': 'Only available in Australia',\n    }, {\n        \n        'url': 'https://www.9now.com.au/afl-footy-show/2016/episode-19',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://www.9now.com.au/andrew-marrs-history-of-the-world/season-1/episode-1',\n        'only_matching': True,\n    }]\n    BRIGHTCOVE_URL_TEMPLATE = 'http://players.brightcove.net/4460760524001/default_default/index.html?videoId=%s'\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        page_data = self._parse_json(self._search_regex(\n            r'window\\.__data\\s*=\\s*({.*?});', webpage,\n            'page data'), display_id)\n\n        for kind in ('episode', 'clip'):\n            current_key = page_data.get(kind, {}).get(\n                'current%sKey' % kind.capitalize())\n            if not current_key:\n                continue\n            cache = page_data.get(kind, {}).get('%sCache' % kind, {})\n            if not cache:\n                continue\n            common_data = (cache.get(current_key) or list(cache.values())[0])[kind]\n            break\n        else:\n            raise ExtractorError('Unable to find video data')\n\n        video_data = common_data['video']\n\n        if video_data.get('drm'):\n            raise ExtractorError('This video is DRM protected.', expected=True)\n\n        brightcove_id = video_data.get('brightcoveId') or 'ref:' + video_data['referenceId']\n        video_id = compat_str(video_data.get('id') or brightcove_id)\n        title = common_data['name']\n\n        thumbnails = [{\n            'id': thumbnail_id,\n            'url': thumbnail_url,\n            'width': int_or_none(thumbnail_id[1:])\n        } for thumbnail_id, thumbnail_url in common_data.get('image', {}).get('sizes', {}).items()]\n\n        return {\n            '_type': 'url_transparent',\n            'url': self.BRIGHTCOVE_URL_TEMPLATE % brightcove_id,\n            'id': video_id,\n            'title': title,\n            'description': common_data.get('description'),\n            'duration': float_or_none(video_data.get('duration'), 1000),\n            'thumbnails': thumbnails,\n            'ie_key': 'BrightcoveNew',\n        }\n", "comments": "# coding: utf-8\n#]+)'\n# clip\n# episode\n# DRM protected\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    float_or_none,\n    ExtractorError,\n)\n\n\nclass NineNowIE(InfoExtractor):\n    IE_NAME = '9now.com.au'\n    _VALID_URL = r'https?://(?:www\\.)?9now\\.com\\.au/(?:[^/]+/){2}(?P<id>[^/?#]+)'\n    _TESTS = [{\n        # clip\n        'url': 'https://www.9now.com.au/afl-footy-show/2016/clip-ciql02091000g0hp5oktrnytc',\n        'md5': '17cf47d63ec9323e562c9957a968b565',\n        'info_dict': {\n            'id': '16801',\n            'ext': 'mp4',\n            'title': 'St. Kilda\\'s Joey Montagna on the potential for a player\\'s strike',\n            'description': 'Is a boycott of the NAB Cup \"on the table\"?',\n            'uploader_id': '4460760524001',\n            'upload_date': '20160713',\n            'timestamp': 1468421266,\n        },\n        'skip': 'Only available in Australia',\n    }, {\n        # episode\n        'url': 'https://www.9now.com.au/afl-footy-show/2016/episode-19',\n        'only_matching': True,\n    }, {\n        # DRM protected\n        'url': 'https://www.9now.com.au/andrew-marrs-history-of-the-world/season-1/episode-1',\n        'only_matching': True,\n    }]\n    BRIGHTCOVE_URL_TEMPLATE = 'http://players.brightcove.net/4460760524001/default_default/index.html?videoId=%s'\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        page_data = self._parse_json(self._search_regex(\n            r'window\\.__data\\s*=\\s*({.*?});', webpage,\n            'page data'), display_id)\n\n        for kind in ('episode', 'clip'):\n            current_key = page_data.get(kind, {}).get(\n                'current%sKey' % kind.capitalize())\n            if not current_key:\n                continue\n            cache = page_data.get(kind, {}).get('%sCache' % kind, {})\n            if not cache:\n                continue\n            common_data = (cache.get(current_key) or list(cache.values())[0])[kind]\n            break\n        else:\n            raise ExtractorError('Unable to find video data')\n\n        video_data = common_data['video']\n\n        if video_data.get('drm'):\n            raise ExtractorError('This video is DRM protected.', expected=True)\n\n        brightcove_id = video_data.get('brightcoveId') or 'ref:' + video_data['referenceId']\n        video_id = compat_str(video_data.get('id') or brightcove_id)\n        title = common_data['name']\n\n        thumbnails = [{\n            'id': thumbnail_id,\n            'url': thumbnail_url,\n            'width': int_or_none(thumbnail_id[1:])\n        } for thumbnail_id, thumbnail_url in common_data.get('image', {}).get('sizes', {}).items()]\n\n        return {\n            '_type': 'url_transparent',\n            'url': self.BRIGHTCOVE_URL_TEMPLATE % brightcove_id,\n            'id': video_id,\n            'title': title,\n            'description': common_data.get('description'),\n            'duration': float_or_none(video_data.get('duration'), 1000),\n            'thumbnails': thumbnails,\n            'ie_key': 'BrightcoveNew',\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "ninenow.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/ninenow.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}