{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n (c) 2013, Balazs Pocze <banyek@gawker.com>\n\n\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: mysql_variables\n\nshort_description: Manage MySQL global variables\ndescription:\n    - Query / Set MySQL variables\nversion_added: 1.3\nauthor: \"Balazs Pocze (@banyek)\"\noptions:\n    variable:\n        description:\n            - Variable name to operate\n        required: True\n    value:\n        description:\n            - If set, then sets variable value to this\n        required: False\nextends_documentation_fragment: mysql\n'''\nEXAMPLES = '''\n Check for sync_binlog setting\n- mysql_variables:\n    variable: sync_binlog\n\n Set read_only variable to 1\n- mysql_variables:\n    variable: read_only\n    value: 1\n'''\n\nimport os\nimport warnings\nfrom re import match\n\ntry:\n    import MySQLdb\nexcept ImportError:\n    mysqldb_found = False\nelse:\n    mysqldb_found = True\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.database import SQLParseError, mysql_quote_identifier\nfrom ansible.module_utils.mysql import mysql_connect, mysqldb_found\nfrom ansible.module_utils._text import to_native\n\n\ndef typedvalue(value):\n    \"\"\"\n    Convert value to number whenever possible, return same value\n    otherwise.\n\n    >>> typedvalue('3')\n    3\n    >>> typedvalue('3.0')\n    3.0\n    >>> typedvalue('foobar')\n    'foobar'\n\n    \"\"\"\n    try:\n        return int(value)\n    except ValueError:\n        pass\n\n    try:\n        return float(value)\n    except ValueError:\n        pass\n\n    return value\n\n\ndef getvariable(cursor, mysqlvar):\n    cursor.execute(\"SHOW VARIABLES WHERE Variable_name = %s\", (mysqlvar,))\n    mysqlvar_val = cursor.fetchall()\n    if len(mysqlvar_val) is 1:\n        return mysqlvar_val[0][1]\n    else:\n        return None\n\n\ndef setvariable(cursor, mysqlvar, value):\n    \"\"\" Set a global mysql variable to a given value\n\n    The DB driver will handle quoting of the given value based on its\n    type, thus numeric strings like '3.0' or '8' are illegal, they\n    should be passed as numeric literals.\n\n    \"\"\"\n    query = \"SET GLOBAL %s = \" % mysql_quote_identifier(mysqlvar, 'vars')\n    try:\n        cursor.execute(query + \"%s\", (value,))\n        cursor.fetchall()\n        result = True\n    except Exception as e:\n        result = to_native(e)\n    return result\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            login_user=dict(default=None),\n            login_password=dict(default=None, no_log=True),\n            login_host=dict(default=\"localhost\"),\n            login_port=dict(default=3306, type='int'),\n            login_unix_socket=dict(default=None),\n            variable=dict(default=None),\n            value=dict(default=None),\n            ssl_cert=dict(default=None),\n            ssl_key=dict(default=None),\n            ssl_ca=dict(default=None),\n            connect_timeout=dict(default=30, type='int'),\n            config_file=dict(default=\"~/.my.cnf\", type=\"path\")\n        )\n    )\n    user = module.params[\"login_user\"]\n    password = module.params[\"login_password\"]\n    ssl_cert = module.params[\"ssl_cert\"]\n    ssl_key = module.params[\"ssl_key\"]\n    ssl_ca = module.params[\"ssl_ca\"]\n    connect_timeout = module.params['connect_timeout']\n    config_file = module.params['config_file']\n    db = 'mysql'\n\n    mysqlvar = module.params[\"variable\"]\n    value = module.params[\"value\"]\n    if mysqlvar is None:\n        module.fail_json(msg=\"Cannot run without variable to operate with\")\n    if match('^[0-9a-z_]+$', mysqlvar) is None:\n        module.fail_json(msg=\"invalid variable name \\\"%s\\\"\" % mysqlvar)\n    if not mysqldb_found:\n        module.fail_json(msg=\"The MySQL-python module is required.\")\n    else:\n        warnings.filterwarnings('error', category=MySQLdb.Warning)\n\n    try:\n        cursor = mysql_connect(module, user, password, config_file, ssl_cert, ssl_key, ssl_ca, db,\n                               connect_timeout=connect_timeout)\n    except Exception as e:\n        if os.path.exists(config_file):\n            module.fail_json(msg=\"unable to connect to database, check login_user and login_password are correct or %s has the credentials. \"\n                                 \"Exception message: %s\" % (config_file, to_native(e)))\n        else:\n            module.fail_json(msg=\"unable to find %s. Exception message: %s\" % (config_file, to_native(e)))\n\n    mysqlvar_val = getvariable(cursor, mysqlvar)\n    if mysqlvar_val is None:\n        module.fail_json(msg=\"Variable not available \\\"%s\\\"\" % mysqlvar, changed=False)\n    if value is None:\n        module.exit_json(msg=mysqlvar_val)\n    else:\n         Type values before using them\n        value_wanted = typedvalue(value)\n        value_actual = typedvalue(mysqlvar_val)\n        if value_wanted == value_actual:\n            module.exit_json(msg=\"Variable already set to requested value\", changed=False)\n        try:\n            result = setvariable(cursor, mysqlvar, value_wanted)\n        except SQLParseError as e:\n            result = to_native(e)\n\n        if result is True:\n            module.exit_json(msg=\"Variable change succeeded prev_value=%s\" % value_actual, changed=True)\n        else:\n            module.fail_json(msg=result, changed=False)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        convert value number whenever possible  return value     otherwise           typedvalue( 3 )     3         typedvalue( 3 0 )     3 0         typedvalue( foobar )      foobar               try          return int(value)     except valueerror          pass      try          return float(value)     except valueerror          pass      return value   def getvariable(cursor  mysqlvar)      cursor execute( show variables where variable name      (mysqlvar ))     mysqlvar val   cursor fetchall()     len(mysqlvar val) 1          return mysqlvar val 0  1      else          return none   def setvariable(cursor  mysqlvar  value)          set global mysql variable given value      the db driver handle quoting given value based     type  thus numeric strings like  3 0   8  illegal      passed numeric literals                    module  mysql variables  short description  manage mysql global variables description        query   set mysql variables version added  1 3 author   balazs pocze ( banyek)  options      variable          description                variable name operate         required  true     value          description                if set  sets variable value         required  false extends documentation fragment  mysql     examples         check sync binlog setting   mysql variables      variable  sync binlog    set read variable 1   mysql variables      variable  read     value  1         usr bin python        coding  utf 8        (c) 2013  balazs pocze  banyek gawker com     certain parts taken mark theunissen mysqldb module       gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    check sync binlog setting    set read variable 1    type values using ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2013, Balazs Pocze <banyek@gawker.com>\n# Certain parts are taken from Mark Theunissen's mysqldb module\n#\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: mysql_variables\n\nshort_description: Manage MySQL global variables\ndescription:\n    - Query / Set MySQL variables\nversion_added: 1.3\nauthor: \"Balazs Pocze (@banyek)\"\noptions:\n    variable:\n        description:\n            - Variable name to operate\n        required: True\n    value:\n        description:\n            - If set, then sets variable value to this\n        required: False\nextends_documentation_fragment: mysql\n'''\nEXAMPLES = '''\n# Check for sync_binlog setting\n- mysql_variables:\n    variable: sync_binlog\n\n# Set read_only variable to 1\n- mysql_variables:\n    variable: read_only\n    value: 1\n'''\n\nimport os\nimport warnings\nfrom re import match\n\ntry:\n    import MySQLdb\nexcept ImportError:\n    mysqldb_found = False\nelse:\n    mysqldb_found = True\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.database import SQLParseError, mysql_quote_identifier\nfrom ansible.module_utils.mysql import mysql_connect, mysqldb_found\nfrom ansible.module_utils._text import to_native\n\n\ndef typedvalue(value):\n    \"\"\"\n    Convert value to number whenever possible, return same value\n    otherwise.\n\n    >>> typedvalue('3')\n    3\n    >>> typedvalue('3.0')\n    3.0\n    >>> typedvalue('foobar')\n    'foobar'\n\n    \"\"\"\n    try:\n        return int(value)\n    except ValueError:\n        pass\n\n    try:\n        return float(value)\n    except ValueError:\n        pass\n\n    return value\n\n\ndef getvariable(cursor, mysqlvar):\n    cursor.execute(\"SHOW VARIABLES WHERE Variable_name = %s\", (mysqlvar,))\n    mysqlvar_val = cursor.fetchall()\n    if len(mysqlvar_val) is 1:\n        return mysqlvar_val[0][1]\n    else:\n        return None\n\n\ndef setvariable(cursor, mysqlvar, value):\n    \"\"\" Set a global mysql variable to a given value\n\n    The DB driver will handle quoting of the given value based on its\n    type, thus numeric strings like '3.0' or '8' are illegal, they\n    should be passed as numeric literals.\n\n    \"\"\"\n    query = \"SET GLOBAL %s = \" % mysql_quote_identifier(mysqlvar, 'vars')\n    try:\n        cursor.execute(query + \"%s\", (value,))\n        cursor.fetchall()\n        result = True\n    except Exception as e:\n        result = to_native(e)\n    return result\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            login_user=dict(default=None),\n            login_password=dict(default=None, no_log=True),\n            login_host=dict(default=\"localhost\"),\n            login_port=dict(default=3306, type='int'),\n            login_unix_socket=dict(default=None),\n            variable=dict(default=None),\n            value=dict(default=None),\n            ssl_cert=dict(default=None),\n            ssl_key=dict(default=None),\n            ssl_ca=dict(default=None),\n            connect_timeout=dict(default=30, type='int'),\n            config_file=dict(default=\"~/.my.cnf\", type=\"path\")\n        )\n    )\n    user = module.params[\"login_user\"]\n    password = module.params[\"login_password\"]\n    ssl_cert = module.params[\"ssl_cert\"]\n    ssl_key = module.params[\"ssl_key\"]\n    ssl_ca = module.params[\"ssl_ca\"]\n    connect_timeout = module.params['connect_timeout']\n    config_file = module.params['config_file']\n    db = 'mysql'\n\n    mysqlvar = module.params[\"variable\"]\n    value = module.params[\"value\"]\n    if mysqlvar is None:\n        module.fail_json(msg=\"Cannot run without variable to operate with\")\n    if match('^[0-9a-z_]+$', mysqlvar) is None:\n        module.fail_json(msg=\"invalid variable name \\\"%s\\\"\" % mysqlvar)\n    if not mysqldb_found:\n        module.fail_json(msg=\"The MySQL-python module is required.\")\n    else:\n        warnings.filterwarnings('error', category=MySQLdb.Warning)\n\n    try:\n        cursor = mysql_connect(module, user, password, config_file, ssl_cert, ssl_key, ssl_ca, db,\n                               connect_timeout=connect_timeout)\n    except Exception as e:\n        if os.path.exists(config_file):\n            module.fail_json(msg=\"unable to connect to database, check login_user and login_password are correct or %s has the credentials. \"\n                                 \"Exception message: %s\" % (config_file, to_native(e)))\n        else:\n            module.fail_json(msg=\"unable to find %s. Exception message: %s\" % (config_file, to_native(e)))\n\n    mysqlvar_val = getvariable(cursor, mysqlvar)\n    if mysqlvar_val is None:\n        module.fail_json(msg=\"Variable not available \\\"%s\\\"\" % mysqlvar, changed=False)\n    if value is None:\n        module.exit_json(msg=mysqlvar_val)\n    else:\n        # Type values before using them\n        value_wanted = typedvalue(value)\n        value_actual = typedvalue(mysqlvar_val)\n        if value_wanted == value_actual:\n            module.exit_json(msg=\"Variable already set to requested value\", changed=False)\n        try:\n            result = setvariable(cursor, mysqlvar, value_wanted)\n        except SQLParseError as e:\n            result = to_native(e)\n\n        if result is True:\n            module.exit_json(msg=\"Variable change succeeded prev_value=%s\" % value_actual, changed=True)\n        else:\n            module.fail_json(msg=result, changed=False)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "mysql_variables.py", "id": "5da682f6fa12da7722ef994aeace4666", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/database/mysql/mysql_variables.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}