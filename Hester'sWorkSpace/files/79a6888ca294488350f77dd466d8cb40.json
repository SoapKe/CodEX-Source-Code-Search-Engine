{"author": "openai", "code": "import numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\n\nclass ThrowerEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        utils.EzPickle.__init__(self)\n        self._ball_hit_ground = False\n        self._ball_hit_location = None\n        mujoco_env.MujocoEnv.__init__(self, 'thrower.xml', 5)\n\n    def step(self, a):\n        ball_xy = self.get_body_com(\"ball\")[:2]\n        goal_xy = self.get_body_com(\"goal\")[:2]\n\n        if not self._ball_hit_ground and self.get_body_com(\"ball\")[2] < -0.25:\n            self._ball_hit_ground = True\n            self._ball_hit_location = self.get_body_com(\"ball\")\n\n        if self._ball_hit_ground:\n            ball_hit_xy = self._ball_hit_location[:2]\n            reward_dist = -np.linalg.norm(ball_hit_xy - goal_xy)\n        else:\n            reward_dist = -np.linalg.norm(ball_xy - goal_xy)\n        reward_ctrl = - np.square(a).sum()\n\n        reward = reward_dist + 0.002 * reward_ctrl\n        self.do_simulation(a, self.frame_skip)\n        ob = self._get_obs()\n        done = False\n        return ob, reward, done, dict(reward_dist=reward_dist,\n                reward_ctrl=reward_ctrl)\n\n    def viewer_setup(self):\n        self.viewer.cam.trackbodyid = 0\n        self.viewer.cam.distance = 4.0\n\n    def reset_model(self):\n        self._ball_hit_ground = False\n        self._ball_hit_location = None\n\n        qpos = self.init_qpos\n        self.goal = np.array([self.np_random.uniform(low=-0.3, high=0.3),\n                              self.np_random.uniform(low=-0.3, high=0.3)])\n\n        qpos[-9:-7] = self.goal\n        qvel = self.init_qvel + self.np_random.uniform(low=-0.005,\n                high=0.005, size=self.model.nv)\n        qvel[7:] = 0\n        self.set_state(qpos, qvel)\n        return self._get_obs()\n\n    def _get_obs(self):\n        return np.concatenate([\n            self.sim.data.qpos.flat[:7],\n            self.sim.data.qvel.flat[:7],\n            self.get_body_com(\"r_wrist_roll_link\"),\n            self.get_body_com(\"ball\"),\n            self.get_body_com(\"goal\"),\n        ])\n", "comments": "", "content": "import numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\n\nclass ThrowerEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        utils.EzPickle.__init__(self)\n        self._ball_hit_ground = False\n        self._ball_hit_location = None\n        mujoco_env.MujocoEnv.__init__(self, 'thrower.xml', 5)\n\n    def step(self, a):\n        ball_xy = self.get_body_com(\"ball\")[:2]\n        goal_xy = self.get_body_com(\"goal\")[:2]\n\n        if not self._ball_hit_ground and self.get_body_com(\"ball\")[2] < -0.25:\n            self._ball_hit_ground = True\n            self._ball_hit_location = self.get_body_com(\"ball\")\n\n        if self._ball_hit_ground:\n            ball_hit_xy = self._ball_hit_location[:2]\n            reward_dist = -np.linalg.norm(ball_hit_xy - goal_xy)\n        else:\n            reward_dist = -np.linalg.norm(ball_xy - goal_xy)\n        reward_ctrl = - np.square(a).sum()\n\n        reward = reward_dist + 0.002 * reward_ctrl\n        self.do_simulation(a, self.frame_skip)\n        ob = self._get_obs()\n        done = False\n        return ob, reward, done, dict(reward_dist=reward_dist,\n                reward_ctrl=reward_ctrl)\n\n    def viewer_setup(self):\n        self.viewer.cam.trackbodyid = 0\n        self.viewer.cam.distance = 4.0\n\n    def reset_model(self):\n        self._ball_hit_ground = False\n        self._ball_hit_location = None\n\n        qpos = self.init_qpos\n        self.goal = np.array([self.np_random.uniform(low=-0.3, high=0.3),\n                              self.np_random.uniform(low=-0.3, high=0.3)])\n\n        qpos[-9:-7] = self.goal\n        qvel = self.init_qvel + self.np_random.uniform(low=-0.005,\n                high=0.005, size=self.model.nv)\n        qvel[7:] = 0\n        self.set_state(qpos, qvel)\n        return self._get_obs()\n\n    def _get_obs(self):\n        return np.concatenate([\n            self.sim.data.qpos.flat[:7],\n            self.sim.data.qvel.flat[:7],\n            self.get_body_com(\"r_wrist_roll_link\"),\n            self.get_body_com(\"ball\"),\n            self.get_body_com(\"goal\"),\n        ])\n", "description": "A toolkit for developing and comparing reinforcement learning algorithms.", "file_name": "thrower.py", "id": "79a6888ca294488350f77dd466d8cb40", "language": "Python", "project_name": "gym", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/openai-gym/openai-gym-6160181/gym/envs/mujoco/thrower.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:30:35Z", "url": "https://github.com/openai/gym", "wiki": true}