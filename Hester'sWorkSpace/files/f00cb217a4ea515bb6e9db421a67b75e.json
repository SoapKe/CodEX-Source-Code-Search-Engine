{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport hmac\nimport hashlib\nimport base64\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    float_or_none,\n    int_or_none,\n    js_to_json,\n    mimetype2ext,\n    parse_iso8601,\n    remove_start,\n)\n\n\nclass NYTimesBaseIE(InfoExtractor):\n    _SECRET = b'pX(2MbU2);4N{7J8)>YwKRJ+/pQ3JkiU2Q^V>mFYv6g6gYvt6v'\n\n    def _extract_video_from_id(self, video_id):\n        \n        \n        path = '/svc/video/api/v3/video/' + video_id\n        hm = hmac.new(self._SECRET, (path + ':vhs').encode(), hashlib.sha512).hexdigest()\n        video_data = self._download_json('http://www.nytimes.com' + path, video_id, 'Downloading video JSON', headers={\n            'Authorization': 'NYTV ' + base64.b64encode(hm.encode()).decode(),\n            'X-NYTV': 'vhs',\n        }, fatal=False)\n        if not video_data:\n            video_data = self._download_json(\n                'http://www.nytimes.com/svc/video/api/v2/video/' + video_id,\n                video_id, 'Downloading video JSON')\n\n        title = video_data['headline']\n\n        def get_file_size(file_size):\n            if isinstance(file_size, int):\n                return file_size\n            elif isinstance(file_size, dict):\n                return int(file_size.get('value', 0))\n            else:\n                return None\n\n        urls = []\n        formats = []\n        for video in video_data.get('renditions', []):\n            video_url = video.get('url')\n            format_id = video.get('type')\n            if not video_url or format_id == 'thumbs' or video_url in urls:\n                continue\n            urls.append(video_url)\n            ext = mimetype2ext(video.get('mimetype')) or determine_ext(video_url)\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id=format_id or 'hls', fatal=False))\n            elif ext == 'mpd':\n                continue\n            \n            \n            else:\n                formats.append({\n                    'url': video_url,\n                    'format_id': format_id,\n                    'vcodec': video.get('videoencoding') or video.get('video_codec'),\n                    'width': int_or_none(video.get('width')),\n                    'height': int_or_none(video.get('height')),\n                    'filesize': get_file_size(video.get('file_size') or video.get('fileSize')),\n                    'tbr': int_or_none(video.get('bitrate'), 1000),\n                    'ext': ext,\n                })\n        self._sort_formats(formats)\n\n        thumbnails = []\n        for image in video_data.get('images', []):\n            image_url = image.get('url')\n            if not image_url:\n                continue\n            thumbnails.append({\n                'url': 'http://www.nytimes.com/' + image_url,\n                'width': int_or_none(image.get('width')),\n                'height': int_or_none(image.get('height')),\n            })\n\n        publication_date = video_data.get('publication_date')\n        timestamp = parse_iso8601(publication_date[:-8]) if publication_date else None\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('summary'),\n            'timestamp': timestamp,\n            'uploader': video_data.get('byline'),\n            'duration': float_or_none(video_data.get('duration'), 1000),\n            'formats': formats,\n            'thumbnails': thumbnails,\n        }\n\n\nclass NYTimesIE(NYTimesBaseIE):\n    _VALID_URL = r'https?://(?:(?:www\\.)?nytimes\\.com/video/(?:[^/]+/)+?|graphics8\\.nytimes\\.com/bcvideo/\\d+(?:\\.\\d+)?/iframe/embed\\.html\\?videoId=)(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://www.nytimes.com/video/opinion/100000002847155/verbatim-what-is-a-photocopier.html?playlistId=100000001150263',\n        'md5': 'd665342765db043f7e225cff19df0f2d',\n        'info_dict': {\n            'id': '100000002847155',\n            'ext': 'mov',\n            'title': 'Verbatim: What Is a Photocopier?',\n            'description': 'md5:93603dada88ddbda9395632fdc5da260',\n            'timestamp': 1398631707,\n            'upload_date': '20140427',\n            'uploader': 'Brett Weiner',\n            'duration': 419,\n        }\n    }, {\n        'url': 'http://www.nytimes.com/video/travel/100000003550828/36-hours-in-dubai.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        return self._extract_video_from_id(video_id)\n\n\nclass NYTimesArticleIE(NYTimesBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?nytimes\\.com/(.(?<!video))*?/(?:[^/]+/)*(?P<id>[^.]+)(?:\\.html)?'\n    _TESTS = [{\n        'url': 'http://www.nytimes.com/2015/04/14/business/owner-of-gravity-payments-a-credit-card-processor-is-setting-a-new-minimum-wage-70000-a-year.html?_r=0',\n        'md5': 'e2076d58b4da18e6a001d53fd56db3c9',\n        'info_dict': {\n            'id': '100000003628438',\n            'ext': 'mov',\n            'title': 'New Minimum Wage: $70,000 a Year',\n            'description': 'Dan Price, C.E.O. of Gravity Payments, surprised his 120-person staff by announcing that he planned over the next three years to raise the salary of every employee to $70,000 a year.',\n            'timestamp': 1429033037,\n            'upload_date': '20150414',\n            'uploader': 'Matthew Williams',\n        }\n    }, {\n        'url': 'http://www.nytimes.com/2016/10/14/podcasts/revelations-from-the-final-weeks.html',\n        'md5': 'e0d52040cafb07662acf3c9132db3575',\n        'info_dict': {\n            'id': '100000004709062',\n            'title': 'The Run-Up: \u2018He Was Like an Octopus\u2019',\n            'ext': 'mp3',\n            'description': 'md5:fb5c6b93b12efc51649b4847fe066ee4',\n            'series': 'The Run-Up',\n            'episode': '\u2018He Was Like an Octopus\u2019',\n            'episode_number': 20,\n            'duration': 2130,\n        }\n    }, {\n        'url': 'http://www.nytimes.com/2016/10/16/books/review/inside-the-new-york-times-book-review-the-rise-of-hitler.html',\n        'info_dict': {\n            'id': '100000004709479',\n            'title': 'The Rise of Hitler',\n            'ext': 'mp3',\n            'description': 'md5:bce877fd9e3444990cb141875fab0028',\n            'creator': 'Pamela Paul',\n            'duration': 3475,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.nytimes.com/news/minute/2014/03/17/times-minute-whats-next-in-crimea/?_php=true&_type=blogs&_php=true&_type=blogs&_r=1',\n        'only_matching': True,\n    }]\n\n    def _extract_podcast_from_json(self, json, page_id, webpage):\n        podcast_audio = self._parse_json(\n            json, page_id, transform_source=js_to_json)\n\n        audio_data = podcast_audio['data']\n        track = audio_data['track']\n\n        episode_title = track['title']\n        video_url = track['source']\n\n        description = track.get('description') or self._html_search_meta(\n            ['og:description', 'twitter:description'], webpage)\n\n        podcast_title = audio_data.get('podcast', {}).get('title')\n        title = ('%s: %s' % (podcast_title, episode_title)\n                 if podcast_title else episode_title)\n\n        episode = audio_data.get('podcast', {}).get('episode') or ''\n        episode_number = int_or_none(self._search_regex(\n            r'[Ee]pisode\\s+(\\d+)', episode, 'episode number', default=None))\n\n        return {\n            'id': remove_start(podcast_audio.get('target'), 'FT') or page_id,\n            'url': video_url,\n            'title': title,\n            'description': description,\n            'creator': track.get('credit'),\n            'series': podcast_title,\n            'episode': episode_title,\n            'episode_number': episode_number,\n            'duration': int_or_none(track.get('duration')),\n        }\n\n    def _real_extract(self, url):\n        page_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, page_id)\n\n        video_id = self._search_regex(\n            r'data-videoid=[\"\\'](\\d+)', webpage, 'video id',\n            default=None, fatal=False)\n        if video_id is not None:\n            return self._extract_video_from_id(video_id)\n\n        podcast_data = self._search_regex(\n            (r'NYTD\\.FlexTypes\\.push\\s*\\(\\s*({.+?})\\s*\\)\\s*;\\s*</script',\n             r'NYTD\\.FlexTypes\\.push\\s*\\(\\s*({.+})\\s*\\)\\s*;'),\n            webpage, 'podcast data')\n        return self._extract_podcast_from_json(podcast_data, page_id, webpage)\n", "comments": "# coding: utf-8\n# Authorization generation algorithm is reverse engineered from `signer` in\n# http://graphics8.nytimes.com/video/vhs/vhs-2.x.min.js\n#     formats.extend(self._extract_mpd_formats(\n#         video_url, video_id, format_id or 'dash', fatal=False))\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport hmac\nimport hashlib\nimport base64\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    float_or_none,\n    int_or_none,\n    js_to_json,\n    mimetype2ext,\n    parse_iso8601,\n    remove_start,\n)\n\n\nclass NYTimesBaseIE(InfoExtractor):\n    _SECRET = b'pX(2MbU2);4N{7J8)>YwKRJ+/pQ3JkiU2Q^V>mFYv6g6gYvt6v'\n\n    def _extract_video_from_id(self, video_id):\n        # Authorization generation algorithm is reverse engineered from `signer` in\n        # http://graphics8.nytimes.com/video/vhs/vhs-2.x.min.js\n        path = '/svc/video/api/v3/video/' + video_id\n        hm = hmac.new(self._SECRET, (path + ':vhs').encode(), hashlib.sha512).hexdigest()\n        video_data = self._download_json('http://www.nytimes.com' + path, video_id, 'Downloading video JSON', headers={\n            'Authorization': 'NYTV ' + base64.b64encode(hm.encode()).decode(),\n            'X-NYTV': 'vhs',\n        }, fatal=False)\n        if not video_data:\n            video_data = self._download_json(\n                'http://www.nytimes.com/svc/video/api/v2/video/' + video_id,\n                video_id, 'Downloading video JSON')\n\n        title = video_data['headline']\n\n        def get_file_size(file_size):\n            if isinstance(file_size, int):\n                return file_size\n            elif isinstance(file_size, dict):\n                return int(file_size.get('value', 0))\n            else:\n                return None\n\n        urls = []\n        formats = []\n        for video in video_data.get('renditions', []):\n            video_url = video.get('url')\n            format_id = video.get('type')\n            if not video_url or format_id == 'thumbs' or video_url in urls:\n                continue\n            urls.append(video_url)\n            ext = mimetype2ext(video.get('mimetype')) or determine_ext(video_url)\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id=format_id or 'hls', fatal=False))\n            elif ext == 'mpd':\n                continue\n            #     formats.extend(self._extract_mpd_formats(\n            #         video_url, video_id, format_id or 'dash', fatal=False))\n            else:\n                formats.append({\n                    'url': video_url,\n                    'format_id': format_id,\n                    'vcodec': video.get('videoencoding') or video.get('video_codec'),\n                    'width': int_or_none(video.get('width')),\n                    'height': int_or_none(video.get('height')),\n                    'filesize': get_file_size(video.get('file_size') or video.get('fileSize')),\n                    'tbr': int_or_none(video.get('bitrate'), 1000),\n                    'ext': ext,\n                })\n        self._sort_formats(formats)\n\n        thumbnails = []\n        for image in video_data.get('images', []):\n            image_url = image.get('url')\n            if not image_url:\n                continue\n            thumbnails.append({\n                'url': 'http://www.nytimes.com/' + image_url,\n                'width': int_or_none(image.get('width')),\n                'height': int_or_none(image.get('height')),\n            })\n\n        publication_date = video_data.get('publication_date')\n        timestamp = parse_iso8601(publication_date[:-8]) if publication_date else None\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('summary'),\n            'timestamp': timestamp,\n            'uploader': video_data.get('byline'),\n            'duration': float_or_none(video_data.get('duration'), 1000),\n            'formats': formats,\n            'thumbnails': thumbnails,\n        }\n\n\nclass NYTimesIE(NYTimesBaseIE):\n    _VALID_URL = r'https?://(?:(?:www\\.)?nytimes\\.com/video/(?:[^/]+/)+?|graphics8\\.nytimes\\.com/bcvideo/\\d+(?:\\.\\d+)?/iframe/embed\\.html\\?videoId=)(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://www.nytimes.com/video/opinion/100000002847155/verbatim-what-is-a-photocopier.html?playlistId=100000001150263',\n        'md5': 'd665342765db043f7e225cff19df0f2d',\n        'info_dict': {\n            'id': '100000002847155',\n            'ext': 'mov',\n            'title': 'Verbatim: What Is a Photocopier?',\n            'description': 'md5:93603dada88ddbda9395632fdc5da260',\n            'timestamp': 1398631707,\n            'upload_date': '20140427',\n            'uploader': 'Brett Weiner',\n            'duration': 419,\n        }\n    }, {\n        'url': 'http://www.nytimes.com/video/travel/100000003550828/36-hours-in-dubai.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        return self._extract_video_from_id(video_id)\n\n\nclass NYTimesArticleIE(NYTimesBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?nytimes\\.com/(.(?<!video))*?/(?:[^/]+/)*(?P<id>[^.]+)(?:\\.html)?'\n    _TESTS = [{\n        'url': 'http://www.nytimes.com/2015/04/14/business/owner-of-gravity-payments-a-credit-card-processor-is-setting-a-new-minimum-wage-70000-a-year.html?_r=0',\n        'md5': 'e2076d58b4da18e6a001d53fd56db3c9',\n        'info_dict': {\n            'id': '100000003628438',\n            'ext': 'mov',\n            'title': 'New Minimum Wage: $70,000 a Year',\n            'description': 'Dan Price, C.E.O. of Gravity Payments, surprised his 120-person staff by announcing that he planned over the next three years to raise the salary of every employee to $70,000 a year.',\n            'timestamp': 1429033037,\n            'upload_date': '20150414',\n            'uploader': 'Matthew Williams',\n        }\n    }, {\n        'url': 'http://www.nytimes.com/2016/10/14/podcasts/revelations-from-the-final-weeks.html',\n        'md5': 'e0d52040cafb07662acf3c9132db3575',\n        'info_dict': {\n            'id': '100000004709062',\n            'title': 'The Run-Up: \u2018He Was Like an Octopus\u2019',\n            'ext': 'mp3',\n            'description': 'md5:fb5c6b93b12efc51649b4847fe066ee4',\n            'series': 'The Run-Up',\n            'episode': '\u2018He Was Like an Octopus\u2019',\n            'episode_number': 20,\n            'duration': 2130,\n        }\n    }, {\n        'url': 'http://www.nytimes.com/2016/10/16/books/review/inside-the-new-york-times-book-review-the-rise-of-hitler.html',\n        'info_dict': {\n            'id': '100000004709479',\n            'title': 'The Rise of Hitler',\n            'ext': 'mp3',\n            'description': 'md5:bce877fd9e3444990cb141875fab0028',\n            'creator': 'Pamela Paul',\n            'duration': 3475,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.nytimes.com/news/minute/2014/03/17/times-minute-whats-next-in-crimea/?_php=true&_type=blogs&_php=true&_type=blogs&_r=1',\n        'only_matching': True,\n    }]\n\n    def _extract_podcast_from_json(self, json, page_id, webpage):\n        podcast_audio = self._parse_json(\n            json, page_id, transform_source=js_to_json)\n\n        audio_data = podcast_audio['data']\n        track = audio_data['track']\n\n        episode_title = track['title']\n        video_url = track['source']\n\n        description = track.get('description') or self._html_search_meta(\n            ['og:description', 'twitter:description'], webpage)\n\n        podcast_title = audio_data.get('podcast', {}).get('title')\n        title = ('%s: %s' % (podcast_title, episode_title)\n                 if podcast_title else episode_title)\n\n        episode = audio_data.get('podcast', {}).get('episode') or ''\n        episode_number = int_or_none(self._search_regex(\n            r'[Ee]pisode\\s+(\\d+)', episode, 'episode number', default=None))\n\n        return {\n            'id': remove_start(podcast_audio.get('target'), 'FT') or page_id,\n            'url': video_url,\n            'title': title,\n            'description': description,\n            'creator': track.get('credit'),\n            'series': podcast_title,\n            'episode': episode_title,\n            'episode_number': episode_number,\n            'duration': int_or_none(track.get('duration')),\n        }\n\n    def _real_extract(self, url):\n        page_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, page_id)\n\n        video_id = self._search_regex(\n            r'data-videoid=[\"\\'](\\d+)', webpage, 'video id',\n            default=None, fatal=False)\n        if video_id is not None:\n            return self._extract_video_from_id(video_id)\n\n        podcast_data = self._search_regex(\n            (r'NYTD\\.FlexTypes\\.push\\s*\\(\\s*({.+?})\\s*\\)\\s*;\\s*</script',\n             r'NYTD\\.FlexTypes\\.push\\s*\\(\\s*({.+})\\s*\\)\\s*;'),\n            webpage, 'podcast data')\n        return self._extract_podcast_from_json(podcast_data, page_id, webpage)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "nytimes.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/nytimes.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}