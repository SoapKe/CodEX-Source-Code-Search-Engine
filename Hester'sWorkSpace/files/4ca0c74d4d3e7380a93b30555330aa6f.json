{"author": "ansible", "code": "\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: cyberark_user\nshort_description: Module for CyberArk User Management using PAS Web Services SDK\nauthor: Edward Nunez @ CyberArk BizDev (@enunez-cyberark, @cyberark-bizdev, @erasmix)\nversion_added: 2.4\ndescription:\n    - CyberArk User Management using PAS Web Services SDK. It currently supports the following\n      actions Get User Details, Add User, Update User, Delete User.\n\n\noptions:\n    username:\n        required: True\n        description:\n            - The name of the user who will be queried (for details), added, updated or deleted.\n    state:\n        default: present\n        choices: [present, absent]\n        description:\n            - Specifies the state needed for the user\n              present for create user, absent for delete user.\n    cyberark_session:\n        required: True\n        description:\n            - Dictionary set by a CyberArk authentication containing the different values to perform actions on a logged-on CyberArk session,\n              please see M(cyberark_authentication) module for an example of cyberark_session.\n    initial_password:\n        description:\n            - The password that the new user will use to log on the first time. This password must meet the password policy requirements.\n              this parameter is required when state is present -- Add User.\n    new_password:\n        description:\n            - The user updated password. Make sure that this password meets the password policy requirements.\n    email:\n        description:\n            - The user email address.\n    first_name:\n        description:\n            - The user first name.\n    last_name:\n        description:\n            - The user last name.\n    change_password_on_the_next_logon:\n        type: bool\n        default: 'no'\n        description:\n            - Whether or not the user must change their password in their next logon.\n              Valid values = true/false.\n    expiry_date:\n        description:\n            - The date and time when the user account will expire and become disabled.\n    user_type_name:\n        default: EPVUser\n        description:\n            - The type of user.\n    disabled:\n        type: bool\n        default: 'no'\n        description:\n            - Whether or not the user will be disabled. Valid values = true/false.\n    location:\n        description:\n            - The Vault Location for the user.\n    group_name:\n        description:\n            - The name of the group the user will be added to.\n'''\n\nEXAMPLES = '''\n- name: Logon to CyberArk Vault using PAS Web Services SDK\n  cyberark_authentication:\n    api_base_url: \"https://components.cyberark.local\"\n    use_shared_logon_authentication: true\n\n- name: Create user & immediately add it to a group\n  cyberark_user:\n    username: \"username\"\n    initial_password: \"password\"\n    user_type_name: \"EPVUser\"\n    change_password_on_the_next_logon: false\n    group_name: \"GroupOfUsers\"\n    state: present\n    cyberark_session: \"{{ cyberark_session }}\"\n\n- name: Make sure user is present and reset user credential if present\n  cyberark_user:\n    username: \"Username\"\n    new_password: \"password\"\n    disabled: false\n    state: present\n    cyberark_session: \"{{ cyberark_session }}\"\n\n- name: Logoff from CyberArk Vault\n  cyberark_authentication:\n    state: absent\n    cyberark_session: \"{{ cyberark_session }}\"\n'''\n\nRETURN = '''\nchanged:\n    description: Whether there was a change done.\n    type: bool\n    returned: always\ncyberark_user:\n    description: Dictionary containing result properties.\n    returned: always\n    type: dict\n    sample:\n        result:\n            description: user properties when state is present\n            type: dict\n            returned: success\nstatus_code:\n    description: Result HTTP Status code\n    returned: success\n    type: int\n    sample: 200\n'''\n\nimport json\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_text\nfrom ansible.module_utils.six.moves import http_client as httplib\nfrom ansible.module_utils.six.moves.urllib.error import HTTPError\nfrom ansible.module_utils.urls import open_url\n\n\ndef user_details(module):\n\n    \n    \n    username = module.params[\"username\"]\n    cyberark_session = module.params[\"cyberark_session\"]\n    api_base_url = cyberark_session[\"api_base_url\"]\n    validate_certs = cyberark_session[\"validate_certs\"]\n\n    \n    result = {}\n    end_point = \"/PasswordVault/WebServices/PIMServices.svc/Users/{0}\".format(\n        username)\n    headers = {'Content-Type': 'application/json'}\n    headers[\"Authorization\"] = cyberark_session[\"token\"]\n\n    try:\n\n        response = open_url(\n            api_base_url + end_point,\n            method=\"GET\",\n            headers=headers,\n            validate_certs=validate_certs)\n        result = {\"result\": json.loads(response.read())}\n\n        return (False, result, response.getcode())\n\n    except (HTTPError, httplib.HTTPException) as http_exception:\n\n        if http_exception.code == 404:\n            return (False, None, http_exception.code)\n        else:\n            module.fail_json(\n                msg=(\"Error while performing user_details.\"\n                     \"Please validate parameters provided.\"\n                     \"\\n*** end_point=%s%s\\n ==> %s\" % (api_base_url, end_point, to_text(http_exception))),\n                headers=headers,\n                status_code=http_exception.code)\n\n    except Exception as unknown_exception:\n\n        module.fail_json(\n            msg=(\"Unknown error while performing user_details.\"\n                 \"\\n*** end_point=%s%s\\n%s\" % (api_base_url, end_point, to_text(unknown_exception))),\n            headers=headers,\n            exception=traceback.format_exc(),\n            status_code=-1)\n\n\ndef user_add_or_update(module, HTTPMethod):\n\n    \n    \n    username = module.params[\"username\"]\n    cyberark_session = module.params[\"cyberark_session\"]\n    api_base_url = cyberark_session[\"api_base_url\"]\n    validate_certs = cyberark_session[\"validate_certs\"]\n\n    \n    result = {}\n    payload = {}\n    headers = {'Content-Type': 'application/json',\n               \"Authorization\": cyberark_session[\"token\"]}\n\n    \n    \n    \n    if HTTPMethod == \"POST\":\n        end_point = \"/PasswordVault/WebServices/PIMServices.svc/Users\"\n        payload[\"UserName\"] = username\n    elif HTTPMethod == \"PUT\":\n        end_point = \"/PasswordVault/WebServices/PIMServices.svc/Users/{0}\"\n        end_point = end_point.format(username)\n\n    \n    if \"initial_password\" in module.params:\n        payload[\"InitialPassword\"] = module.params[\"initial_password\"]\n\n    if \"new_password\" in module.params:\n        payload[\"NewPassword\"] = module.params[\"new_password\"]\n\n    if \"email\" in module.params:\n        payload[\"Email\"] = module.params[\"email\"]\n\n    if \"first_name\" in module.params:\n        payload[\"FirstName\"] = module.params[\"first_name\"]\n\n    if \"last_name\" in module.params:\n        payload[\"LastName\"] = module.params[\"last_name\"]\n\n    if \"change_password_on_the_next_logon\" in module.params:\n        if module.params[\"change_password_on_the_next_logon\"]:\n            payload[\"ChangePasswordOnTheNextLogon\"] = \"true\"\n        else:\n            payload[\"ChangePasswordOnTheNextLogon\"] = \"false\"\n\n    if \"expiry_date\" in module.params:\n        payload[\"ExpiryDate\"] = module.params[\"expiry_date\"]\n\n    if \"user_type_name\" in module.params:\n        payload[\"UserTypeName\"] = module.params[\"user_type_name\"]\n\n    if \"disabled\" in module.params:\n        if module.params[\"disabled\"]:\n            payload[\"Disabled\"] = \"true\"\n        else:\n            payload[\"Disabled\"] = \"false\"\n\n    if \"location\" in module.params:\n        payload[\"Location\"] = module.params[\"location\"]\n    \n\n    try:\n\n        \n        response = open_url(\n            api_base_url + end_point,\n            method=HTTPMethod,\n            headers=headers,\n            data=json.dumps(payload),\n            validate_certs=validate_certs)\n\n        result = {\"result\": json.loads(response.read())}\n\n        return (True, result, response.getcode())\n\n    except (HTTPError, httplib.HTTPException) as http_exception:\n\n        module.fail_json(\n            msg=(\"Error while performing user_add_or_update.\"\n                 \"Please validate parameters provided.\"\n                 \"\\n*** end_point=%s%s\\n ==> %s\" % (api_base_url, end_point, to_text(http_exception))),\n            payload=payload,\n            headers=headers,\n            status_code=http_exception.code)\n\n    except Exception as unknown_exception:\n\n        module.fail_json(\n            msg=(\"Unknown error while performing user_add_or_update.\"\n                 \"\\n*** end_point=%s%s\\n%s\" % (api_base_url, end_point, to_text(unknown_exception))),\n            payload=payload,\n            headers=headers,\n            exception=traceback.format_exc(),\n            status_code=-1)\n\n\ndef user_delete(module):\n\n    \n    \n    username = module.params[\"username\"]\n    cyberark_session = module.params[\"cyberark_session\"]\n    api_base_url = cyberark_session[\"api_base_url\"]\n    validate_certs = cyberark_session[\"validate_certs\"]\n\n    \n    result = {}\n    end_point = \"/PasswordVault/WebServices/PIMServices.svc/Users/{0}\".format(\n        username)\n\n    headers = {'Content-Type': 'application/json'}\n    headers[\"Authorization\"] = cyberark_session[\"token\"]\n\n    try:\n\n        \n        response = open_url(\n            api_base_url + end_point,\n            method=\"DELETE\",\n            headers=headers,\n            validate_certs=validate_certs)\n\n        result = {\"result\": {}}\n\n        return (True, result, response.getcode())\n\n    except (HTTPError, httplib.HTTPException) as http_exception:\n\n        exception_text = to_text(http_exception)\n        if http_exception.code == 404 and \"ITATS003E\" in exception_text:\n            \n            result = {\"result\": {}}\n            return (False, result, http_exception.code)\n        else:\n            module.fail_json(\n                msg=(\"Error while performing user_delete.\"\n                     \"Please validate parameters provided.\"\n                     \"\\n*** end_point=%s%s\\n ==> %s\" % (api_base_url, end_point, exception_text)),\n                headers=headers,\n                status_code=http_exception.code)\n\n    except Exception as unknown_exception:\n\n        module.fail_json(\n            msg=(\"Unknown error while performing user_delete.\"\n                 \"\\n*** end_point=%s%s\\n%s\" % (api_base_url, end_point, to_text(unknown_exception))),\n            headers=headers,\n            exception=traceback.format_exc(),\n            status_code=-1)\n\n\ndef user_add_to_group(module):\n\n    \n    \n    username = module.params[\"username\"]\n    group_name = module.params[\"group_name\"]\n    cyberark_session = module.params[\"cyberark_session\"]\n    api_base_url = cyberark_session[\"api_base_url\"]\n    validate_certs = cyberark_session[\"validate_certs\"]\n\n    \n    result = {}\n    end_point = \"/PasswordVault/WebServices/PIMServices.svc//Groups/{0}/Users\".format(\n        group_name)\n\n    headers = {'Content-Type': 'application/json'}\n    headers[\"Authorization\"] = cyberark_session[\"token\"]\n    payload = {\"UserName\": username}\n\n    try:\n\n        \n        response = open_url(\n            api_base_url + end_point,\n            method=\"POST\",\n            headers=headers,\n            data=json.dumps(payload),\n            validate_certs=validate_certs)\n\n        result = {\"result\": {}}\n\n        return (True, result, response.getcode())\n\n    except (HTTPError, httplib.HTTPException) as http_exception:\n\n        exception_text = to_text(http_exception)\n        if http_exception.code == 409 and \"ITATS262E\" in exception_text:\n            \n            return (False, None, http_exception.code)\n        else:\n            module.fail_json(\n                msg=(\"Error while performing user_add_to_group.\"\n                     \"Please validate parameters provided.\"\n                     \"\\n*** end_point=%s%s\\n ==> %s\" % (api_base_url, end_point, exception_text)),\n                payload=payload,\n                headers=headers,\n                exception=traceback.format_exc(),\n                status_code=http_exception.code)\n\n    except Exception as unknown_exception:\n\n        module.fail_json(\n            msg=(\"Unknown error while performing user_add_to_group.\"\n                 \"\\n*** end_point=%s%s\\n%s\" % (api_base_url, end_point, to_text(unknown_exception))),\n            payload=payload,\n            headers=headers,\n            status_code=-1)\n\n\ndef main():\n\n    fields = {\n        \"username\": {\"required\": True, \"type\": \"str\"},\n        \"state\": {\"type\": \"str\",\n                  \"choices\": [\"present\", \"absent\"],\n                  \"default\": \"present\"},\n        \"cyberark_session\": {\"required\": True, \"type\": \"dict\"},\n        \"initial_password\": {\"type\": \"str\", \"no_log\": True},\n        \"new_password\": {\"type\": \"str\", \"no_log\": True},\n        \"email\": {\"type\": \"str\"},\n        \"first_name\": {\"type\": \"str\"},\n        \"last_name\": {\"type\": \"str\"},\n        \"change_password_on_the_next_logon\": {\"type\": \"bool\"},\n        \"expiry_date\": {\"type\": \"str\"},\n        \"user_type_name\": {\"type\": \"str\"},\n        \"disabled\": {\"type\": \"bool\"},\n        \"location\": {\"type\": \"str\"},\n        \"group_name\": {\"type\": \"str\"},\n    }\n\n    module = AnsibleModule(argument_spec=fields)\n\n    state = module.params[\"state\"]\n\n    changed = False\n    result = {}\n\n    if (state == \"present\"):\n        (changed, result, status_code) = user_details(module)\n        if (status_code == 200):  \n            if (\"new_password\" in module.params):\n                \n                (changed, result, status_code) = user_add_or_update(module, \"PUT\")\n            if (\"group_name\" in module.params and module.params[\"group_name\"] is not None):\n                \n                (changed, ignored_result, ignored_status_code) = user_add_to_group(module)\n        elif (status_code == 404):\n            \n            (changed, result, status_code) = user_add_or_update(module, \"POST\")\n            if (status_code == 201 and \"group_name\" in module.params and module.params[\"group_name\"] is not None):\n                \n                (changed, ignored_result, ignored_status_code) = user_add_to_group(module)\n    elif (state == \"absent\"):\n        (changed, result, status_code) = user_delete(module)\n\n    module.exit_json(\n        changed=changed,\n        cyberark_user=result,\n        status_code=status_code)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  cyberark user short description  module cyberark user management using pas web services sdk author  edward nunez   cyberark bizdev ( enunez cyberark   cyberark bizdev   erasmix) version added  2 4 description        cyberark user management using pas web services sdk  it currently supports following       actions get user details  add user  update user  delete user    options      username          required  true         description                the name user queried (for details)  added  updated deleted      state          default  present         choices   present  absent          description                specifies state needed user               present create user  absent delete user      cyberark session          required  true         description                dictionary set cyberark authentication containing different values perform actions logged cyberark session                please see m(cyberark authentication) module example cyberark session      initial password          description                the password new user use log first time  this password must meet password policy requirements                parameter required state present    add user      new password          description                the user updated password  make sure password meets password policy requirements      email          description                the user email address      first name          description                the user first name      last name          description                the user last name      change password next logon          type  bool         default            description                whether user must change password next logon                valid values   true false      expiry date          description                the date time user account expire become disabled      user type name          default  epvuser         description                the type user      disabled          type  bool         default            description                whether user disabled  valid values   true false      location          description                the vault location user      group name          description                the name group user added       examples         name  logon cyberark vault using pas web services sdk   cyberark authentication      api base url   https   components cyberark local      use shared logon authentication  true    name  create user   immediately add group   cyberark user      username   username      initial password   password      user type name   epvuser      change password next logon  false     group name   groupofusers      state  present     cyberark session      cyberark session        name  make sure user present reset user credential present   cyberark user      username   username      new password   password      disabled  false     state  present     cyberark session      cyberark session        name  logoff cyberark vault   cyberark authentication      state  absent     cyberark session      cyberark session          return       changed      description  whether change done      type  bool     returned  always cyberark user      description  dictionary containing result properties      returned  always     type  dict     sample          result              description  user properties state present             type  dict             returned  success status code      description  result http status code     returned  success     type  int     sample  200         usr bin python    copyright  (c) 2017  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    get username module parameters  api base url    along validate certs cyberark session established    prepare result  end point  headers    get username module parameters  api base url    along validate certs cyberark session established    prepare result  paylod  headers    end point payload sets different depending post put    post    create    payload contains username    put    update    username part endpoint        optionally populate payload based parameters passed                                                                          execute rest action    get username module parameters  api base url    along validate certs cyberark session established    prepare result  end point  headers    execute rest action    user exist    get username  groupname module parameters  api base url    along validate certs cyberark session established    prepare result  end point  headers payload    execute rest action    user already member group    user already exists    new password specified  proceed update user credential    user exists  add group needed    user exist  proceed create    user created  add group needed ", "content": "#!/usr/bin/python\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: cyberark_user\nshort_description: Module for CyberArk User Management using PAS Web Services SDK\nauthor: Edward Nunez @ CyberArk BizDev (@enunez-cyberark, @cyberark-bizdev, @erasmix)\nversion_added: 2.4\ndescription:\n    - CyberArk User Management using PAS Web Services SDK. It currently supports the following\n      actions Get User Details, Add User, Update User, Delete User.\n\n\noptions:\n    username:\n        required: True\n        description:\n            - The name of the user who will be queried (for details), added, updated or deleted.\n    state:\n        default: present\n        choices: [present, absent]\n        description:\n            - Specifies the state needed for the user\n              present for create user, absent for delete user.\n    cyberark_session:\n        required: True\n        description:\n            - Dictionary set by a CyberArk authentication containing the different values to perform actions on a logged-on CyberArk session,\n              please see M(cyberark_authentication) module for an example of cyberark_session.\n    initial_password:\n        description:\n            - The password that the new user will use to log on the first time. This password must meet the password policy requirements.\n              this parameter is required when state is present -- Add User.\n    new_password:\n        description:\n            - The user updated password. Make sure that this password meets the password policy requirements.\n    email:\n        description:\n            - The user email address.\n    first_name:\n        description:\n            - The user first name.\n    last_name:\n        description:\n            - The user last name.\n    change_password_on_the_next_logon:\n        type: bool\n        default: 'no'\n        description:\n            - Whether or not the user must change their password in their next logon.\n              Valid values = true/false.\n    expiry_date:\n        description:\n            - The date and time when the user account will expire and become disabled.\n    user_type_name:\n        default: EPVUser\n        description:\n            - The type of user.\n    disabled:\n        type: bool\n        default: 'no'\n        description:\n            - Whether or not the user will be disabled. Valid values = true/false.\n    location:\n        description:\n            - The Vault Location for the user.\n    group_name:\n        description:\n            - The name of the group the user will be added to.\n'''\n\nEXAMPLES = '''\n- name: Logon to CyberArk Vault using PAS Web Services SDK\n  cyberark_authentication:\n    api_base_url: \"https://components.cyberark.local\"\n    use_shared_logon_authentication: true\n\n- name: Create user & immediately add it to a group\n  cyberark_user:\n    username: \"username\"\n    initial_password: \"password\"\n    user_type_name: \"EPVUser\"\n    change_password_on_the_next_logon: false\n    group_name: \"GroupOfUsers\"\n    state: present\n    cyberark_session: \"{{ cyberark_session }}\"\n\n- name: Make sure user is present and reset user credential if present\n  cyberark_user:\n    username: \"Username\"\n    new_password: \"password\"\n    disabled: false\n    state: present\n    cyberark_session: \"{{ cyberark_session }}\"\n\n- name: Logoff from CyberArk Vault\n  cyberark_authentication:\n    state: absent\n    cyberark_session: \"{{ cyberark_session }}\"\n'''\n\nRETURN = '''\nchanged:\n    description: Whether there was a change done.\n    type: bool\n    returned: always\ncyberark_user:\n    description: Dictionary containing result properties.\n    returned: always\n    type: dict\n    sample:\n        result:\n            description: user properties when state is present\n            type: dict\n            returned: success\nstatus_code:\n    description: Result HTTP Status code\n    returned: success\n    type: int\n    sample: 200\n'''\n\nimport json\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_text\nfrom ansible.module_utils.six.moves import http_client as httplib\nfrom ansible.module_utils.six.moves.urllib.error import HTTPError\nfrom ansible.module_utils.urls import open_url\n\n\ndef user_details(module):\n\n    # Get username from module parameters, and api base url\n    # along with validate_certs from the cyberark_session established\n    username = module.params[\"username\"]\n    cyberark_session = module.params[\"cyberark_session\"]\n    api_base_url = cyberark_session[\"api_base_url\"]\n    validate_certs = cyberark_session[\"validate_certs\"]\n\n    # Prepare result, end_point, and headers\n    result = {}\n    end_point = \"/PasswordVault/WebServices/PIMServices.svc/Users/{0}\".format(\n        username)\n    headers = {'Content-Type': 'application/json'}\n    headers[\"Authorization\"] = cyberark_session[\"token\"]\n\n    try:\n\n        response = open_url(\n            api_base_url + end_point,\n            method=\"GET\",\n            headers=headers,\n            validate_certs=validate_certs)\n        result = {\"result\": json.loads(response.read())}\n\n        return (False, result, response.getcode())\n\n    except (HTTPError, httplib.HTTPException) as http_exception:\n\n        if http_exception.code == 404:\n            return (False, None, http_exception.code)\n        else:\n            module.fail_json(\n                msg=(\"Error while performing user_details.\"\n                     \"Please validate parameters provided.\"\n                     \"\\n*** end_point=%s%s\\n ==> %s\" % (api_base_url, end_point, to_text(http_exception))),\n                headers=headers,\n                status_code=http_exception.code)\n\n    except Exception as unknown_exception:\n\n        module.fail_json(\n            msg=(\"Unknown error while performing user_details.\"\n                 \"\\n*** end_point=%s%s\\n%s\" % (api_base_url, end_point, to_text(unknown_exception))),\n            headers=headers,\n            exception=traceback.format_exc(),\n            status_code=-1)\n\n\ndef user_add_or_update(module, HTTPMethod):\n\n    # Get username from module parameters, and api base url\n    # along with validate_certs from the cyberark_session established\n    username = module.params[\"username\"]\n    cyberark_session = module.params[\"cyberark_session\"]\n    api_base_url = cyberark_session[\"api_base_url\"]\n    validate_certs = cyberark_session[\"validate_certs\"]\n\n    # Prepare result, paylod, and headers\n    result = {}\n    payload = {}\n    headers = {'Content-Type': 'application/json',\n               \"Authorization\": cyberark_session[\"token\"]}\n\n    # end_point and payload sets different depending on POST/PUT\n    # for POST -- create -- payload contains username\n    # for PUT -- update -- username is part of the endpoint\n    if HTTPMethod == \"POST\":\n        end_point = \"/PasswordVault/WebServices/PIMServices.svc/Users\"\n        payload[\"UserName\"] = username\n    elif HTTPMethod == \"PUT\":\n        end_point = \"/PasswordVault/WebServices/PIMServices.svc/Users/{0}\"\n        end_point = end_point.format(username)\n\n    # --- Optionally populate payload based on parameters passed ---\n    if \"initial_password\" in module.params:\n        payload[\"InitialPassword\"] = module.params[\"initial_password\"]\n\n    if \"new_password\" in module.params:\n        payload[\"NewPassword\"] = module.params[\"new_password\"]\n\n    if \"email\" in module.params:\n        payload[\"Email\"] = module.params[\"email\"]\n\n    if \"first_name\" in module.params:\n        payload[\"FirstName\"] = module.params[\"first_name\"]\n\n    if \"last_name\" in module.params:\n        payload[\"LastName\"] = module.params[\"last_name\"]\n\n    if \"change_password_on_the_next_logon\" in module.params:\n        if module.params[\"change_password_on_the_next_logon\"]:\n            payload[\"ChangePasswordOnTheNextLogon\"] = \"true\"\n        else:\n            payload[\"ChangePasswordOnTheNextLogon\"] = \"false\"\n\n    if \"expiry_date\" in module.params:\n        payload[\"ExpiryDate\"] = module.params[\"expiry_date\"]\n\n    if \"user_type_name\" in module.params:\n        payload[\"UserTypeName\"] = module.params[\"user_type_name\"]\n\n    if \"disabled\" in module.params:\n        if module.params[\"disabled\"]:\n            payload[\"Disabled\"] = \"true\"\n        else:\n            payload[\"Disabled\"] = \"false\"\n\n    if \"location\" in module.params:\n        payload[\"Location\"] = module.params[\"location\"]\n    # --------------------------------------------------------------\n\n    try:\n\n        # execute REST action\n        response = open_url(\n            api_base_url + end_point,\n            method=HTTPMethod,\n            headers=headers,\n            data=json.dumps(payload),\n            validate_certs=validate_certs)\n\n        result = {\"result\": json.loads(response.read())}\n\n        return (True, result, response.getcode())\n\n    except (HTTPError, httplib.HTTPException) as http_exception:\n\n        module.fail_json(\n            msg=(\"Error while performing user_add_or_update.\"\n                 \"Please validate parameters provided.\"\n                 \"\\n*** end_point=%s%s\\n ==> %s\" % (api_base_url, end_point, to_text(http_exception))),\n            payload=payload,\n            headers=headers,\n            status_code=http_exception.code)\n\n    except Exception as unknown_exception:\n\n        module.fail_json(\n            msg=(\"Unknown error while performing user_add_or_update.\"\n                 \"\\n*** end_point=%s%s\\n%s\" % (api_base_url, end_point, to_text(unknown_exception))),\n            payload=payload,\n            headers=headers,\n            exception=traceback.format_exc(),\n            status_code=-1)\n\n\ndef user_delete(module):\n\n    # Get username from module parameters, and api base url\n    # along with validate_certs from the cyberark_session established\n    username = module.params[\"username\"]\n    cyberark_session = module.params[\"cyberark_session\"]\n    api_base_url = cyberark_session[\"api_base_url\"]\n    validate_certs = cyberark_session[\"validate_certs\"]\n\n    # Prepare result, end_point, and headers\n    result = {}\n    end_point = \"/PasswordVault/WebServices/PIMServices.svc/Users/{0}\".format(\n        username)\n\n    headers = {'Content-Type': 'application/json'}\n    headers[\"Authorization\"] = cyberark_session[\"token\"]\n\n    try:\n\n        # execute REST action\n        response = open_url(\n            api_base_url + end_point,\n            method=\"DELETE\",\n            headers=headers,\n            validate_certs=validate_certs)\n\n        result = {\"result\": {}}\n\n        return (True, result, response.getcode())\n\n    except (HTTPError, httplib.HTTPException) as http_exception:\n\n        exception_text = to_text(http_exception)\n        if http_exception.code == 404 and \"ITATS003E\" in exception_text:\n            # User does not exist\n            result = {\"result\": {}}\n            return (False, result, http_exception.code)\n        else:\n            module.fail_json(\n                msg=(\"Error while performing user_delete.\"\n                     \"Please validate parameters provided.\"\n                     \"\\n*** end_point=%s%s\\n ==> %s\" % (api_base_url, end_point, exception_text)),\n                headers=headers,\n                status_code=http_exception.code)\n\n    except Exception as unknown_exception:\n\n        module.fail_json(\n            msg=(\"Unknown error while performing user_delete.\"\n                 \"\\n*** end_point=%s%s\\n%s\" % (api_base_url, end_point, to_text(unknown_exception))),\n            headers=headers,\n            exception=traceback.format_exc(),\n            status_code=-1)\n\n\ndef user_add_to_group(module):\n\n    # Get username, and groupname from module parameters, and api base url\n    # along with validate_certs from the cyberark_session established\n    username = module.params[\"username\"]\n    group_name = module.params[\"group_name\"]\n    cyberark_session = module.params[\"cyberark_session\"]\n    api_base_url = cyberark_session[\"api_base_url\"]\n    validate_certs = cyberark_session[\"validate_certs\"]\n\n    # Prepare result, end_point, headers and payload\n    result = {}\n    end_point = \"/PasswordVault/WebServices/PIMServices.svc//Groups/{0}/Users\".format(\n        group_name)\n\n    headers = {'Content-Type': 'application/json'}\n    headers[\"Authorization\"] = cyberark_session[\"token\"]\n    payload = {\"UserName\": username}\n\n    try:\n\n        # execute REST action\n        response = open_url(\n            api_base_url + end_point,\n            method=\"POST\",\n            headers=headers,\n            data=json.dumps(payload),\n            validate_certs=validate_certs)\n\n        result = {\"result\": {}}\n\n        return (True, result, response.getcode())\n\n    except (HTTPError, httplib.HTTPException) as http_exception:\n\n        exception_text = to_text(http_exception)\n        if http_exception.code == 409 and \"ITATS262E\" in exception_text:\n            # User is already member of Group\n            return (False, None, http_exception.code)\n        else:\n            module.fail_json(\n                msg=(\"Error while performing user_add_to_group.\"\n                     \"Please validate parameters provided.\"\n                     \"\\n*** end_point=%s%s\\n ==> %s\" % (api_base_url, end_point, exception_text)),\n                payload=payload,\n                headers=headers,\n                exception=traceback.format_exc(),\n                status_code=http_exception.code)\n\n    except Exception as unknown_exception:\n\n        module.fail_json(\n            msg=(\"Unknown error while performing user_add_to_group.\"\n                 \"\\n*** end_point=%s%s\\n%s\" % (api_base_url, end_point, to_text(unknown_exception))),\n            payload=payload,\n            headers=headers,\n            status_code=-1)\n\n\ndef main():\n\n    fields = {\n        \"username\": {\"required\": True, \"type\": \"str\"},\n        \"state\": {\"type\": \"str\",\n                  \"choices\": [\"present\", \"absent\"],\n                  \"default\": \"present\"},\n        \"cyberark_session\": {\"required\": True, \"type\": \"dict\"},\n        \"initial_password\": {\"type\": \"str\", \"no_log\": True},\n        \"new_password\": {\"type\": \"str\", \"no_log\": True},\n        \"email\": {\"type\": \"str\"},\n        \"first_name\": {\"type\": \"str\"},\n        \"last_name\": {\"type\": \"str\"},\n        \"change_password_on_the_next_logon\": {\"type\": \"bool\"},\n        \"expiry_date\": {\"type\": \"str\"},\n        \"user_type_name\": {\"type\": \"str\"},\n        \"disabled\": {\"type\": \"bool\"},\n        \"location\": {\"type\": \"str\"},\n        \"group_name\": {\"type\": \"str\"},\n    }\n\n    module = AnsibleModule(argument_spec=fields)\n\n    state = module.params[\"state\"]\n\n    changed = False\n    result = {}\n\n    if (state == \"present\"):\n        (changed, result, status_code) = user_details(module)\n        if (status_code == 200):  # user already exists\n            if (\"new_password\" in module.params):\n                # if new_password specified, proceed to update user credential\n                (changed, result, status_code) = user_add_or_update(module, \"PUT\")\n            if (\"group_name\" in module.params and module.params[\"group_name\"] is not None):\n                # if user exists, add to group if needed\n                (changed, ignored_result, ignored_status_code) = user_add_to_group(module)\n        elif (status_code == 404):\n            # user does not exist, proceed to create it\n            (changed, result, status_code) = user_add_or_update(module, \"POST\")\n            if (status_code == 201 and \"group_name\" in module.params and module.params[\"group_name\"] is not None):\n                # if user was created, add to group if needed\n                (changed, ignored_result, ignored_status_code) = user_add_to_group(module)\n    elif (state == \"absent\"):\n        (changed, result, status_code) = user_delete(module)\n\n    module.exit_json(\n        changed=changed,\n        cyberark_user=result,\n        status_code=status_code)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "cyberark_user.py", "id": "4ca0c74d4d3e7380a93b30555330aa6f", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/identity/cyberark/cyberark_user.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}