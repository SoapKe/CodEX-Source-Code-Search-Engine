{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlencode,\n    compat_urlparse,\n)\nfrom ..utils import qualities\n\n\nclass IvideonIE(InfoExtractor):\n    IE_NAME = 'ivideon'\n    IE_DESC = 'Ivideon TV'\n    _VALID_URL = r'https?://(?:www\\.)?ivideon\\.com/tv/(?:[^/]+/)*camera/(?P<id>\\d+-[\\da-f]+)/(?P<camera_id>\\d+)'\n    _TESTS = [{\n        'url': 'https://www.ivideon.com/tv/camera/100-916ca13b5c4ad9f564266424a026386d/0/',\n        'info_dict': {\n            'id': '100-916ca13b5c4ad9f564266424a026386d',\n            'ext': 'flv',\n            'title': 're:^\u041a\u0430\u0441\u0441\u0430 [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'description': '\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u0437\u0430\u043f\u0438\u0441\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043a\u0430\u0441\u0441\u0438\u0440\u043e\u0432. \u041f\u043b\u044e\u0441 \u043e\u0431\u0449\u0438\u0439 \u0432\u0438\u0434.',\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        'url': 'https://www.ivideon.com/tv/camera/100-c4ee4cb9ede885cf62dfbe93d7b53783/589824/?lang=ru',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.ivideon.com/tv/map/22.917923/-31.816406/16/camera/100-e7bc16c7d4b5bbd633fd5350b66dfa9a/0',\n        'only_matching': True,\n    }]\n\n    _QUALITIES = ('low', 'mid', 'hi')\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        server_id, camera_id = mobj.group('id'), mobj.group('camera_id')\n        camera_name, description = None, None\n        camera_url = compat_urlparse.urljoin(\n            url, '/tv/camera/%s/%s/' % (server_id, camera_id))\n\n        webpage = self._download_webpage(camera_url, server_id, fatal=False)\n        if webpage:\n            config_string = self._search_regex(\n                r'var\\s+config\\s*=\\s*({.+?});', webpage, 'config', default=None)\n            if config_string:\n                config = self._parse_json(config_string, server_id, fatal=False)\n                camera_info = config.get('ivTvAppOptions', {}).get('currentCameraInfo')\n                if camera_info:\n                    camera_name = camera_info.get('camera_name')\n                    description = camera_info.get('misc', {}).get('description')\n            if not camera_name:\n                camera_name = self._html_search_meta(\n                    'name', webpage, 'camera name', default=None) or self._search_regex(\n                    r'<h1[^>]+class=\"b-video-title\"[^>]*>([^<]+)', webpage, 'camera name', default=None)\n\n        quality = qualities(self._QUALITIES)\n\n        formats = [{\n            'url': 'https://streaming.ivideon.com/flv/live?%s' % compat_urllib_parse_urlencode({\n                'server': server_id,\n                'camera': camera_id,\n                'sessionId': 'demo',\n                'q': quality(format_id),\n            }),\n            'format_id': format_id,\n            'ext': 'flv',\n            'quality': quality(format_id),\n        } for format_id in self._QUALITIES]\n        self._sort_formats(formats)\n\n        return {\n            'id': server_id,\n            'title': self._live_title(camera_name or server_id),\n            'description': description,\n            'is_live': True,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlencode,\n    compat_urlparse,\n)\nfrom ..utils import qualities\n\n\nclass IvideonIE(InfoExtractor):\n    IE_NAME = 'ivideon'\n    IE_DESC = 'Ivideon TV'\n    _VALID_URL = r'https?://(?:www\\.)?ivideon\\.com/tv/(?:[^/]+/)*camera/(?P<id>\\d+-[\\da-f]+)/(?P<camera_id>\\d+)'\n    _TESTS = [{\n        'url': 'https://www.ivideon.com/tv/camera/100-916ca13b5c4ad9f564266424a026386d/0/',\n        'info_dict': {\n            'id': '100-916ca13b5c4ad9f564266424a026386d',\n            'ext': 'flv',\n            'title': 're:^\u041a\u0430\u0441\u0441\u0430 [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'description': '\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u0437\u0430\u043f\u0438\u0441\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043a\u0430\u0441\u0441\u0438\u0440\u043e\u0432. \u041f\u043b\u044e\u0441 \u043e\u0431\u0449\u0438\u0439 \u0432\u0438\u0434.',\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        'url': 'https://www.ivideon.com/tv/camera/100-c4ee4cb9ede885cf62dfbe93d7b53783/589824/?lang=ru',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.ivideon.com/tv/map/22.917923/-31.816406/16/camera/100-e7bc16c7d4b5bbd633fd5350b66dfa9a/0',\n        'only_matching': True,\n    }]\n\n    _QUALITIES = ('low', 'mid', 'hi')\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        server_id, camera_id = mobj.group('id'), mobj.group('camera_id')\n        camera_name, description = None, None\n        camera_url = compat_urlparse.urljoin(\n            url, '/tv/camera/%s/%s/' % (server_id, camera_id))\n\n        webpage = self._download_webpage(camera_url, server_id, fatal=False)\n        if webpage:\n            config_string = self._search_regex(\n                r'var\\s+config\\s*=\\s*({.+?});', webpage, 'config', default=None)\n            if config_string:\n                config = self._parse_json(config_string, server_id, fatal=False)\n                camera_info = config.get('ivTvAppOptions', {}).get('currentCameraInfo')\n                if camera_info:\n                    camera_name = camera_info.get('camera_name')\n                    description = camera_info.get('misc', {}).get('description')\n            if not camera_name:\n                camera_name = self._html_search_meta(\n                    'name', webpage, 'camera name', default=None) or self._search_regex(\n                    r'<h1[^>]+class=\"b-video-title\"[^>]*>([^<]+)', webpage, 'camera name', default=None)\n\n        quality = qualities(self._QUALITIES)\n\n        formats = [{\n            'url': 'https://streaming.ivideon.com/flv/live?%s' % compat_urllib_parse_urlencode({\n                'server': server_id,\n                'camera': camera_id,\n                'sessionId': 'demo',\n                'q': quality(format_id),\n            }),\n            'format_id': format_id,\n            'ext': 'flv',\n            'quality': quality(format_id),\n        } for format_id in self._QUALITIES]\n        self._sort_formats(formats)\n\n        return {\n            'id': server_id,\n            'title': self._live_title(camera_name or server_id),\n            'description': description,\n            'is_live': True,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "ivideon.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/ivideon.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}