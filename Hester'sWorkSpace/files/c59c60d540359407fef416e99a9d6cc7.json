{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom hashlib import sha1\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    determine_ext,\n    float_or_none,\n    int_or_none,\n    unified_strdate,\n)\n\n\nclass ProSiebenSat1BaseIE(InfoExtractor):\n    def _extract_video_info(self, url, clip_id):\n        client_location = url\n\n        video = self._download_json(\n            'http://vas.sim-technik.de/vas/live/v2/videos',\n            clip_id, 'Downloading videos JSON', query={\n                'access_token': self._TOKEN,\n                'client_location': client_location,\n                'client_name': self._CLIENT_NAME,\n                'ids': clip_id,\n            })[0]\n\n        if video.get('is_protected') is True:\n            raise ExtractorError('This video is DRM protected.', expected=True)\n\n        duration = float_or_none(video.get('duration'))\n        source_ids = [compat_str(source['id']) for source in video['sources']]\n\n        client_id = self._SALT[:2] + sha1(''.join([clip_id, self._SALT, self._TOKEN, client_location, self._SALT, self._CLIENT_NAME]).encode('utf-8')).hexdigest()\n\n        sources = self._download_json(\n            'http://vas.sim-technik.de/vas/live/v2/videos/%s/sources' % clip_id,\n            clip_id, 'Downloading sources JSON', query={\n                'access_token': self._TOKEN,\n                'client_id': client_id,\n                'client_location': client_location,\n                'client_name': self._CLIENT_NAME,\n            })\n        server_id = sources['server_id']\n\n        def fix_bitrate(bitrate):\n            bitrate = int_or_none(bitrate)\n            if not bitrate:\n                return None\n            return (bitrate // 1000) if bitrate % 1000 == 0 else bitrate\n\n        formats = []\n        for source_id in source_ids:\n            client_id = self._SALT[:2] + sha1(''.join([self._SALT, clip_id, self._TOKEN, server_id, client_location, source_id, self._SALT, self._CLIENT_NAME]).encode('utf-8')).hexdigest()\n            urls = self._download_json(\n                'http://vas.sim-technik.de/vas/live/v2/videos/%s/sources/url' % clip_id,\n                clip_id, 'Downloading urls JSON', fatal=False, query={\n                    'access_token': self._TOKEN,\n                    'client_id': client_id,\n                    'client_location': client_location,\n                    'client_name': self._CLIENT_NAME,\n                    'server_id': server_id,\n                    'source_ids': source_id,\n                })\n            if not urls:\n                continue\n            if urls.get('status_code') != 0:\n                raise ExtractorError('This video is unavailable', expected=True)\n            urls_sources = urls['sources']\n            if isinstance(urls_sources, dict):\n                urls_sources = urls_sources.values()\n            for source in urls_sources:\n                source_url = source.get('url')\n                if not source_url:\n                    continue\n                protocol = source.get('protocol')\n                mimetype = source.get('mimetype')\n                if mimetype == 'application/f4m+xml' or 'f4mgenerator' in source_url or determine_ext(source_url) == 'f4m':\n                    formats.extend(self._extract_f4m_formats(\n                        source_url, clip_id, f4m_id='hds', fatal=False))\n                elif mimetype == 'application/x-mpegURL':\n                    formats.extend(self._extract_m3u8_formats(\n                        source_url, clip_id, 'mp4', 'm3u8_native',\n                        m3u8_id='hls', fatal=False))\n                elif mimetype == 'application/dash+xml':\n                    formats.extend(self._extract_mpd_formats(\n                        source_url, clip_id, mpd_id='dash', fatal=False))\n                else:\n                    tbr = fix_bitrate(source['bitrate'])\n                    if protocol in ('rtmp', 'rtmpe'):\n                        mobj = re.search(r'^(?P<url>rtmpe?://[^/]+)/(?P<path>.+)$', source_url)\n                        if not mobj:\n                            continue\n                        path = mobj.group('path')\n                        mp4colon_index = path.rfind('mp4:')\n                        app = path[:mp4colon_index]\n                        play_path = path[mp4colon_index:]\n                        formats.append({\n                            'url': '%s/%s' % (mobj.group('url'), app),\n                            'app': app,\n                            'play_path': play_path,\n                            'player_url': 'http://livepassdl.conviva.com/hf/ver/2.79.0.17083/LivePassModuleMain.swf',\n                            'page_url': 'http://www.prosieben.de',\n                            'tbr': tbr,\n                            'ext': 'flv',\n                            'format_id': 'rtmp%s' % ('-%d' % tbr if tbr else ''),\n                        })\n                    else:\n                        formats.append({\n                            'url': source_url,\n                            'tbr': tbr,\n                            'format_id': 'http%s' % ('-%d' % tbr if tbr else ''),\n                        })\n        self._sort_formats(formats)\n\n        return {\n            'duration': duration,\n            'formats': formats,\n        }\n\n\nclass ProSiebenSat1IE(ProSiebenSat1BaseIE):\n    IE_NAME = 'prosiebensat1'\n    IE_DESC = 'ProSiebenSat.1 Digital'\n    _VALID_URL = r\n\n    _TESTS = [\n        {\n            \n            \n            \n            \n            \n            'url': 'http://www.prosieben.de/tv/circus-halligalli/videos/218-staffel-2-episode-18-jahresrueckblick-ganze-folge',\n            'info_dict': {\n                'id': '2104602',\n                'ext': 'mp4',\n                'title': 'Episode 18 - Staffel 2',\n                'description': 'md5:8733c81b702ea472e069bc48bb658fc1',\n                'upload_date': '20131231',\n                'duration': 5845.04,\n            },\n        },\n        {\n            'url': 'http://www.prosieben.de/videokatalog/Gesellschaft/Leben/Trends/video-Lady-Umstyling-f%C3%BCr-Audrina-Rebekka-Audrina-Fergen-billig-aussehen-Battal-Modica-700544.html',\n            'info_dict': {\n                'id': '2570327',\n                'ext': 'mp4',\n                'title': 'Lady-Umstyling f\u00fcr Audrina',\n                'description': 'md5:4c16d0c17a3461a0d43ea4084e96319d',\n                'upload_date': '20131014',\n                'duration': 606.76,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n            'skip': 'Seems to be broken',\n        },\n        {\n            'url': 'http://www.prosiebenmaxx.de/tv/experience/video/144-countdown-fuer-die-autowerkstatt-ganze-folge',\n            'info_dict': {\n                'id': '2429369',\n                'ext': 'mp4',\n                'title': 'Countdown f\u00fcr die Autowerkstatt',\n                'description': 'md5:809fc051a457b5d8666013bc40698817',\n                'upload_date': '20140223',\n                'duration': 2595.04,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n            'skip': 'This video is unavailable',\n        },\n        {\n            'url': 'http://www.sixx.de/stars-style/video/sexy-laufen-in-ugg-boots-clip',\n            'info_dict': {\n                'id': '2904997',\n                'ext': 'mp4',\n                'title': 'Sexy laufen in Ugg Boots',\n                'description': 'md5:edf42b8bd5bc4e5da4db4222c5acb7d6',\n                'upload_date': '20140122',\n                'duration': 245.32,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n            'skip': 'This video is unavailable',\n        },\n        {\n            'url': 'http://www.sat1.de/film/der-ruecktritt/video/im-interview-kai-wiesinger-clip',\n            'info_dict': {\n                'id': '2906572',\n                'ext': 'mp4',\n                'title': 'Im Interview: Kai Wiesinger',\n                'description': 'md5:e4e5370652ec63b95023e914190b4eb9',\n                'upload_date': '20140203',\n                'duration': 522.56,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n            'skip': 'This video is unavailable',\n        },\n        {\n            'url': 'http://www.kabeleins.de/tv/rosins-restaurants/videos/jagd-auf-fertigkost-im-elsthal-teil-2-ganze-folge',\n            'info_dict': {\n                'id': '2992323',\n                'ext': 'mp4',\n                'title': 'Jagd auf Fertigkost im Elsthal - Teil 2',\n                'description': 'md5:2669cde3febe9bce13904f701e774eb6',\n                'upload_date': '20141014',\n                'duration': 2410.44,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n            'skip': 'This video is unavailable',\n        },\n        {\n            'url': 'http://www.ran.de/fussball/bundesliga/video/schalke-toennies-moechte-raul-zurueck-ganze-folge',\n            'info_dict': {\n                'id': '3004256',\n                'ext': 'mp4',\n                'title': 'Schalke: T\u00f6nnies m\u00f6chte Raul zur\u00fcck',\n                'description': 'md5:4b5b271d9bcde223b54390754c8ece3f',\n                'upload_date': '20140226',\n                'duration': 228.96,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n            'skip': 'This video is unavailable',\n        },\n        {\n            'url': 'http://www.the-voice-of-germany.de/video/31-andreas-kuemmert-rocket-man-clip',\n            'info_dict': {\n                'id': '2572814',\n                'ext': 'mp4',\n                'title': 'Andreas K\u00fcmmert: Rocket Man',\n                'description': 'md5:6ddb02b0781c6adf778afea606652e38',\n                'upload_date': '20131017',\n                'duration': 469.88,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.fem.com/wellness/videos/wellness-video-clip-kurztripps-zum-valentinstag.html',\n            'info_dict': {\n                'id': '2156342',\n                'ext': 'mp4',\n                'title': 'Kurztrips zum Valentinstag',\n                'description': 'Romantischer Kurztrip zum Valentinstag? Nina Heinemann verr\u00e4t, was sich hier wirklich lohnt.',\n                'duration': 307.24,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.prosieben.de/tv/joko-gegen-klaas/videos/playlists/episode-8-ganze-folge-playlist',\n            'info_dict': {\n                'id': '439664',\n                'title': 'Episode 8 - Ganze Folge - Playlist',\n                'description': 'md5:63b8963e71f481782aeea877658dec84',\n            },\n            'playlist_count': 2,\n            'skip': 'This video is unavailable',\n        },\n        {\n            'url': 'http://www.7tv.de/circus-halligalli/615-best-of-circus-halligalli-ganze-folge',\n            'info_dict': {\n                'id': '4187506',\n                'ext': 'mp4',\n                'title': 'Best of Circus HalliGalli',\n                'description': 'md5:8849752efd90b9772c9db6fdf87fb9e9',\n                'upload_date': '20151229',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            \n            'url': 'http://www.prosieben.de/stars/oscar-award/videos/jetzt-erst-enthuellt-das-geheimnis-von-emma-stones-oscar-robe-clip',\n            'info_dict': {\n                'id': '4895826',\n                'ext': 'mp4',\n                'title': 'Jetzt erst enth\u00fcllt: Das Geheimnis von Emma Stones Oscar-Robe',\n                'description': 'md5:e5ace2bc43fadf7b63adc6187e9450b9',\n                'upload_date': '20170302',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'skip': 'geo restricted to Germany',\n        },\n        {\n            \n            'url': 'http://www.kabeleinsdoku.de/tv/mayday-alarm-im-cockpit/video/102-notlandung-im-hudson-river-ganze-folge',\n            'only_matching': True,\n        },\n        {\n            \n            'url': 'http://www.sat1gold.de/tv/edel-starck/video/11-staffel-1-episode-1-partner-wider-willen-ganze-folge',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.sat1gold.de/tv/edel-starck/playlist/die-gesamte-1-staffel',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.advopedia.de/videos/lenssen-klaert-auf/lenssen-klaert-auf-folge-8-staffel-3-feiertage-und-freie-tage',\n            'only_matching': True,\n        },\n    ]\n\n    _TOKEN = 'prosieben'\n    _SALT = '01!8d8F_)r9]4s[qeuXfP%'\n    _CLIENT_NAME = 'kolibri-2.0.19-splec4'\n    _CLIPID_REGEXES = [\n        r'\"clip_id\"\\s*:\\s+\"(\\d+)\"',\n        r'clipid: \"(\\d+)\"',\n        r'clip[iI]d=(\\d+)',\n        r'clip[iI]d\\s*=\\s*[\"\\'](\\d+)',\n        r\"'itemImageUrl'\\s*:\\s*'/dynamic/thumbnails/full/\\d+/(\\d+)\",\n        r'proMamsId&quot;\\s*:\\s*&quot;(\\d+)',\n        r'proMamsId\"\\s*:\\s*\"(\\d+)',\n    ]\n    _TITLE_REGEXES = [\n        r'<h2 class=\"subtitle\" itemprop=\"name\">\\s*(.+?)</h2>',\n        r'<header class=\"clearfix\">\\s*<h3>(.+?)</h3>',\n        r'<!-- start video -->\\s*<h1>(.+?)</h1>',\n        r'<h1 class=\"att-name\">\\s*(.+?)</h1>',\n        r'<header class=\"module_header\">\\s*<h2>([^<]+)</h2>\\s*</header>',\n        r'<h2 class=\"video-title\" itemprop=\"name\">\\s*(.+?)</h2>',\n        r'<div[^>]+id=\"veeseoTitle\"[^>]*>(.+?)</div>',\n        r'<h2[^>]+class=\"subtitle\"[^>]*>([^<]+)</h2>',\n    ]\n    _DESCRIPTION_REGEXES = [\n        r'<p itemprop=\"description\">\\s*(.+?)</p>',\n        r'<div class=\"videoDecription\">\\s*<p><strong>Beschreibung</strong>: (.+?)</p>',\n        r'<div class=\"g-plusone\" data-size=\"medium\"></div>\\s*</div>\\s*</header>\\s*(.+?)\\s*<footer>',\n        r'<p class=\"att-description\">\\s*(.+?)\\s*</p>',\n        r'<p class=\"video-description\" itemprop=\"description\">\\s*(.+?)</p>',\n        r'<div[^>]+id=\"veeseoDescription\"[^>]*>(.+?)</div>',\n    ]\n    _UPLOAD_DATE_REGEXES = [\n        r'<meta property=\"og:published_time\" content=\"(.+?)\">',\n        r'<span>\\s*(\\d{2}\\.\\d{2}\\.\\d{4} \\d{2}:\\d{2}) \\|\\s*<span itemprop=\"duration\"',\n        r'<footer>\\s*(\\d{2}\\.\\d{2}\\.\\d{4}) \\d{2}:\\d{2} Uhr',\n        r'<span style=\"padding-left: 4px;line-height:20px; color:\n        r'(\\d{2}\\.\\d{2}\\.\\d{4}) \\| \\d{2}:\\d{2} Min<br/>',\n    ]\n    _PAGE_TYPE_REGEXES = [\n        r'<meta name=\"page_type\" content=\"([^\"]+)\">',\n        r\"'itemType'\\s*:\\s*'([^']*)'\",\n    ]\n    _PLAYLIST_ID_REGEXES = [\n        r'content[iI]d=(\\d+)',\n        r\"'itemId'\\s*:\\s*'([^']*)'\",\n    ]\n    _PLAYLIST_CLIP_REGEXES = [\n        r'(?s)data-qvt=.+?<a href=\"([^\"]+)\"',\n    ]\n\n    def _extract_clip(self, url, webpage):\n        clip_id = self._html_search_regex(\n            self._CLIPID_REGEXES, webpage, 'clip id')\n        title = self._html_search_regex(\n            self._TITLE_REGEXES, webpage, 'title',\n            default=None) or self._og_search_title(webpage)\n        info = self._extract_video_info(url, clip_id)\n        description = self._html_search_regex(\n            self._DESCRIPTION_REGEXES, webpage, 'description', default=None)\n        if description is None:\n            description = self._og_search_description(webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n        upload_date = unified_strdate(self._html_search_regex(\n            self._UPLOAD_DATE_REGEXES, webpage, 'upload date', default=None))\n\n        info.update({\n            'id': clip_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'upload_date': upload_date,\n        })\n        return info\n\n    def _extract_playlist(self, url, webpage):\n        playlist_id = self._html_search_regex(\n            self._PLAYLIST_ID_REGEXES, webpage, 'playlist id')\n        playlist = self._parse_json(\n            self._search_regex(\n                r'var\\s+contentResources\\s*=\\s*(\\[.+?\\]);\\s*</script',\n                webpage, 'playlist'),\n            playlist_id)\n        entries = []\n        for item in playlist:\n            clip_id = item.get('id') or item.get('upc')\n            if not clip_id:\n                continue\n            info = self._extract_video_info(url, clip_id)\n            info.update({\n                'id': clip_id,\n                'title': item.get('title') or item.get('teaser', {}).get('headline'),\n                'description': item.get('teaser', {}).get('description'),\n                'thumbnail': item.get('poster'),\n                'duration': float_or_none(item.get('duration')),\n                'series': item.get('tvShowTitle'),\n                'uploader': item.get('broadcastPublisher'),\n            })\n            entries.append(info)\n        return self.playlist_result(entries, playlist_id)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        page_type = self._search_regex(\n            self._PAGE_TYPE_REGEXES, webpage,\n            'page type', default='clip').lower()\n        if page_type == 'clip':\n            return self._extract_clip(url, webpage)\n        elif page_type == 'playlist':\n            return self._extract_playlist(url, webpage)\n        else:\n            raise ExtractorError(\n                'Unsupported page type %s' % page_type, expected=True)\n", "comments": "(?x)\n                    https?://\n                        (?:www\\.)?\n                        (?:\n                            (?:beta\\.)?\n                            (?:\n                                prosieben(?:maxx)?|sixx|sat1(?:gold)?|kabeleins(?:doku)?|the-voice-of-germany|7tv|advopedia\n                            )\\.(?:de|at|ch)|\n                            ran\\.de|fem\\.com|advopedia\\.de\n                        )\n                        /(?P<id>.+)\n                    \n \n# coding: utf-8\n# Tests changes introduced in https://github.com/rg3/youtube-dl/pull/6242\n# in response to fixing https://github.com/rg3/youtube-dl/issues/6215:\n# - malformed f4m manifest support\n# - proper handling of URLs starting with `https?://` in 2.0 manifests\n# - recursive child f4m manifests extraction\n# rtmp download\n# rtmp download\n# rtmp download\n# rtmp download\n# rtmp download\n# rtmp download\n# title in <h2 class=\"subtitle\">\n# geo restricted to Germany\n# geo restricted to Germany\n#404040\">(\\d{2}\\.\\d{2}\\.\\d{4})</span>',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom hashlib import sha1\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    determine_ext,\n    float_or_none,\n    int_or_none,\n    unified_strdate,\n)\n\n\nclass ProSiebenSat1BaseIE(InfoExtractor):\n    def _extract_video_info(self, url, clip_id):\n        client_location = url\n\n        video = self._download_json(\n            'http://vas.sim-technik.de/vas/live/v2/videos',\n            clip_id, 'Downloading videos JSON', query={\n                'access_token': self._TOKEN,\n                'client_location': client_location,\n                'client_name': self._CLIENT_NAME,\n                'ids': clip_id,\n            })[0]\n\n        if video.get('is_protected') is True:\n            raise ExtractorError('This video is DRM protected.', expected=True)\n\n        duration = float_or_none(video.get('duration'))\n        source_ids = [compat_str(source['id']) for source in video['sources']]\n\n        client_id = self._SALT[:2] + sha1(''.join([clip_id, self._SALT, self._TOKEN, client_location, self._SALT, self._CLIENT_NAME]).encode('utf-8')).hexdigest()\n\n        sources = self._download_json(\n            'http://vas.sim-technik.de/vas/live/v2/videos/%s/sources' % clip_id,\n            clip_id, 'Downloading sources JSON', query={\n                'access_token': self._TOKEN,\n                'client_id': client_id,\n                'client_location': client_location,\n                'client_name': self._CLIENT_NAME,\n            })\n        server_id = sources['server_id']\n\n        def fix_bitrate(bitrate):\n            bitrate = int_or_none(bitrate)\n            if not bitrate:\n                return None\n            return (bitrate // 1000) if bitrate % 1000 == 0 else bitrate\n\n        formats = []\n        for source_id in source_ids:\n            client_id = self._SALT[:2] + sha1(''.join([self._SALT, clip_id, self._TOKEN, server_id, client_location, source_id, self._SALT, self._CLIENT_NAME]).encode('utf-8')).hexdigest()\n            urls = self._download_json(\n                'http://vas.sim-technik.de/vas/live/v2/videos/%s/sources/url' % clip_id,\n                clip_id, 'Downloading urls JSON', fatal=False, query={\n                    'access_token': self._TOKEN,\n                    'client_id': client_id,\n                    'client_location': client_location,\n                    'client_name': self._CLIENT_NAME,\n                    'server_id': server_id,\n                    'source_ids': source_id,\n                })\n            if not urls:\n                continue\n            if urls.get('status_code') != 0:\n                raise ExtractorError('This video is unavailable', expected=True)\n            urls_sources = urls['sources']\n            if isinstance(urls_sources, dict):\n                urls_sources = urls_sources.values()\n            for source in urls_sources:\n                source_url = source.get('url')\n                if not source_url:\n                    continue\n                protocol = source.get('protocol')\n                mimetype = source.get('mimetype')\n                if mimetype == 'application/f4m+xml' or 'f4mgenerator' in source_url or determine_ext(source_url) == 'f4m':\n                    formats.extend(self._extract_f4m_formats(\n                        source_url, clip_id, f4m_id='hds', fatal=False))\n                elif mimetype == 'application/x-mpegURL':\n                    formats.extend(self._extract_m3u8_formats(\n                        source_url, clip_id, 'mp4', 'm3u8_native',\n                        m3u8_id='hls', fatal=False))\n                elif mimetype == 'application/dash+xml':\n                    formats.extend(self._extract_mpd_formats(\n                        source_url, clip_id, mpd_id='dash', fatal=False))\n                else:\n                    tbr = fix_bitrate(source['bitrate'])\n                    if protocol in ('rtmp', 'rtmpe'):\n                        mobj = re.search(r'^(?P<url>rtmpe?://[^/]+)/(?P<path>.+)$', source_url)\n                        if not mobj:\n                            continue\n                        path = mobj.group('path')\n                        mp4colon_index = path.rfind('mp4:')\n                        app = path[:mp4colon_index]\n                        play_path = path[mp4colon_index:]\n                        formats.append({\n                            'url': '%s/%s' % (mobj.group('url'), app),\n                            'app': app,\n                            'play_path': play_path,\n                            'player_url': 'http://livepassdl.conviva.com/hf/ver/2.79.0.17083/LivePassModuleMain.swf',\n                            'page_url': 'http://www.prosieben.de',\n                            'tbr': tbr,\n                            'ext': 'flv',\n                            'format_id': 'rtmp%s' % ('-%d' % tbr if tbr else ''),\n                        })\n                    else:\n                        formats.append({\n                            'url': source_url,\n                            'tbr': tbr,\n                            'format_id': 'http%s' % ('-%d' % tbr if tbr else ''),\n                        })\n        self._sort_formats(formats)\n\n        return {\n            'duration': duration,\n            'formats': formats,\n        }\n\n\nclass ProSiebenSat1IE(ProSiebenSat1BaseIE):\n    IE_NAME = 'prosiebensat1'\n    IE_DESC = 'ProSiebenSat.1 Digital'\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        (?:\n                            (?:beta\\.)?\n                            (?:\n                                prosieben(?:maxx)?|sixx|sat1(?:gold)?|kabeleins(?:doku)?|the-voice-of-germany|7tv|advopedia\n                            )\\.(?:de|at|ch)|\n                            ran\\.de|fem\\.com|advopedia\\.de\n                        )\n                        /(?P<id>.+)\n                    '''\n\n    _TESTS = [\n        {\n            # Tests changes introduced in https://github.com/rg3/youtube-dl/pull/6242\n            # in response to fixing https://github.com/rg3/youtube-dl/issues/6215:\n            # - malformed f4m manifest support\n            # - proper handling of URLs starting with `https?://` in 2.0 manifests\n            # - recursive child f4m manifests extraction\n            'url': 'http://www.prosieben.de/tv/circus-halligalli/videos/218-staffel-2-episode-18-jahresrueckblick-ganze-folge',\n            'info_dict': {\n                'id': '2104602',\n                'ext': 'mp4',\n                'title': 'Episode 18 - Staffel 2',\n                'description': 'md5:8733c81b702ea472e069bc48bb658fc1',\n                'upload_date': '20131231',\n                'duration': 5845.04,\n            },\n        },\n        {\n            'url': 'http://www.prosieben.de/videokatalog/Gesellschaft/Leben/Trends/video-Lady-Umstyling-f%C3%BCr-Audrina-Rebekka-Audrina-Fergen-billig-aussehen-Battal-Modica-700544.html',\n            'info_dict': {\n                'id': '2570327',\n                'ext': 'mp4',\n                'title': 'Lady-Umstyling f\u00fcr Audrina',\n                'description': 'md5:4c16d0c17a3461a0d43ea4084e96319d',\n                'upload_date': '20131014',\n                'duration': 606.76,\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n            'skip': 'Seems to be broken',\n        },\n        {\n            'url': 'http://www.prosiebenmaxx.de/tv/experience/video/144-countdown-fuer-die-autowerkstatt-ganze-folge',\n            'info_dict': {\n                'id': '2429369',\n                'ext': 'mp4',\n                'title': 'Countdown f\u00fcr die Autowerkstatt',\n                'description': 'md5:809fc051a457b5d8666013bc40698817',\n                'upload_date': '20140223',\n                'duration': 2595.04,\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n            'skip': 'This video is unavailable',\n        },\n        {\n            'url': 'http://www.sixx.de/stars-style/video/sexy-laufen-in-ugg-boots-clip',\n            'info_dict': {\n                'id': '2904997',\n                'ext': 'mp4',\n                'title': 'Sexy laufen in Ugg Boots',\n                'description': 'md5:edf42b8bd5bc4e5da4db4222c5acb7d6',\n                'upload_date': '20140122',\n                'duration': 245.32,\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n            'skip': 'This video is unavailable',\n        },\n        {\n            'url': 'http://www.sat1.de/film/der-ruecktritt/video/im-interview-kai-wiesinger-clip',\n            'info_dict': {\n                'id': '2906572',\n                'ext': 'mp4',\n                'title': 'Im Interview: Kai Wiesinger',\n                'description': 'md5:e4e5370652ec63b95023e914190b4eb9',\n                'upload_date': '20140203',\n                'duration': 522.56,\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n            'skip': 'This video is unavailable',\n        },\n        {\n            'url': 'http://www.kabeleins.de/tv/rosins-restaurants/videos/jagd-auf-fertigkost-im-elsthal-teil-2-ganze-folge',\n            'info_dict': {\n                'id': '2992323',\n                'ext': 'mp4',\n                'title': 'Jagd auf Fertigkost im Elsthal - Teil 2',\n                'description': 'md5:2669cde3febe9bce13904f701e774eb6',\n                'upload_date': '20141014',\n                'duration': 2410.44,\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n            'skip': 'This video is unavailable',\n        },\n        {\n            'url': 'http://www.ran.de/fussball/bundesliga/video/schalke-toennies-moechte-raul-zurueck-ganze-folge',\n            'info_dict': {\n                'id': '3004256',\n                'ext': 'mp4',\n                'title': 'Schalke: T\u00f6nnies m\u00f6chte Raul zur\u00fcck',\n                'description': 'md5:4b5b271d9bcde223b54390754c8ece3f',\n                'upload_date': '20140226',\n                'duration': 228.96,\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n            'skip': 'This video is unavailable',\n        },\n        {\n            'url': 'http://www.the-voice-of-germany.de/video/31-andreas-kuemmert-rocket-man-clip',\n            'info_dict': {\n                'id': '2572814',\n                'ext': 'mp4',\n                'title': 'Andreas K\u00fcmmert: Rocket Man',\n                'description': 'md5:6ddb02b0781c6adf778afea606652e38',\n                'upload_date': '20131017',\n                'duration': 469.88,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.fem.com/wellness/videos/wellness-video-clip-kurztripps-zum-valentinstag.html',\n            'info_dict': {\n                'id': '2156342',\n                'ext': 'mp4',\n                'title': 'Kurztrips zum Valentinstag',\n                'description': 'Romantischer Kurztrip zum Valentinstag? Nina Heinemann verr\u00e4t, was sich hier wirklich lohnt.',\n                'duration': 307.24,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.prosieben.de/tv/joko-gegen-klaas/videos/playlists/episode-8-ganze-folge-playlist',\n            'info_dict': {\n                'id': '439664',\n                'title': 'Episode 8 - Ganze Folge - Playlist',\n                'description': 'md5:63b8963e71f481782aeea877658dec84',\n            },\n            'playlist_count': 2,\n            'skip': 'This video is unavailable',\n        },\n        {\n            'url': 'http://www.7tv.de/circus-halligalli/615-best-of-circus-halligalli-ganze-folge',\n            'info_dict': {\n                'id': '4187506',\n                'ext': 'mp4',\n                'title': 'Best of Circus HalliGalli',\n                'description': 'md5:8849752efd90b9772c9db6fdf87fb9e9',\n                'upload_date': '20151229',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            # title in <h2 class=\"subtitle\">\n            'url': 'http://www.prosieben.de/stars/oscar-award/videos/jetzt-erst-enthuellt-das-geheimnis-von-emma-stones-oscar-robe-clip',\n            'info_dict': {\n                'id': '4895826',\n                'ext': 'mp4',\n                'title': 'Jetzt erst enth\u00fcllt: Das Geheimnis von Emma Stones Oscar-Robe',\n                'description': 'md5:e5ace2bc43fadf7b63adc6187e9450b9',\n                'upload_date': '20170302',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'skip': 'geo restricted to Germany',\n        },\n        {\n            # geo restricted to Germany\n            'url': 'http://www.kabeleinsdoku.de/tv/mayday-alarm-im-cockpit/video/102-notlandung-im-hudson-river-ganze-folge',\n            'only_matching': True,\n        },\n        {\n            # geo restricted to Germany\n            'url': 'http://www.sat1gold.de/tv/edel-starck/video/11-staffel-1-episode-1-partner-wider-willen-ganze-folge',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.sat1gold.de/tv/edel-starck/playlist/die-gesamte-1-staffel',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.advopedia.de/videos/lenssen-klaert-auf/lenssen-klaert-auf-folge-8-staffel-3-feiertage-und-freie-tage',\n            'only_matching': True,\n        },\n    ]\n\n    _TOKEN = 'prosieben'\n    _SALT = '01!8d8F_)r9]4s[qeuXfP%'\n    _CLIENT_NAME = 'kolibri-2.0.19-splec4'\n    _CLIPID_REGEXES = [\n        r'\"clip_id\"\\s*:\\s+\"(\\d+)\"',\n        r'clipid: \"(\\d+)\"',\n        r'clip[iI]d=(\\d+)',\n        r'clip[iI]d\\s*=\\s*[\"\\'](\\d+)',\n        r\"'itemImageUrl'\\s*:\\s*'/dynamic/thumbnails/full/\\d+/(\\d+)\",\n        r'proMamsId&quot;\\s*:\\s*&quot;(\\d+)',\n        r'proMamsId\"\\s*:\\s*\"(\\d+)',\n    ]\n    _TITLE_REGEXES = [\n        r'<h2 class=\"subtitle\" itemprop=\"name\">\\s*(.+?)</h2>',\n        r'<header class=\"clearfix\">\\s*<h3>(.+?)</h3>',\n        r'<!-- start video -->\\s*<h1>(.+?)</h1>',\n        r'<h1 class=\"att-name\">\\s*(.+?)</h1>',\n        r'<header class=\"module_header\">\\s*<h2>([^<]+)</h2>\\s*</header>',\n        r'<h2 class=\"video-title\" itemprop=\"name\">\\s*(.+?)</h2>',\n        r'<div[^>]+id=\"veeseoTitle\"[^>]*>(.+?)</div>',\n        r'<h2[^>]+class=\"subtitle\"[^>]*>([^<]+)</h2>',\n    ]\n    _DESCRIPTION_REGEXES = [\n        r'<p itemprop=\"description\">\\s*(.+?)</p>',\n        r'<div class=\"videoDecription\">\\s*<p><strong>Beschreibung</strong>: (.+?)</p>',\n        r'<div class=\"g-plusone\" data-size=\"medium\"></div>\\s*</div>\\s*</header>\\s*(.+?)\\s*<footer>',\n        r'<p class=\"att-description\">\\s*(.+?)\\s*</p>',\n        r'<p class=\"video-description\" itemprop=\"description\">\\s*(.+?)</p>',\n        r'<div[^>]+id=\"veeseoDescription\"[^>]*>(.+?)</div>',\n    ]\n    _UPLOAD_DATE_REGEXES = [\n        r'<meta property=\"og:published_time\" content=\"(.+?)\">',\n        r'<span>\\s*(\\d{2}\\.\\d{2}\\.\\d{4} \\d{2}:\\d{2}) \\|\\s*<span itemprop=\"duration\"',\n        r'<footer>\\s*(\\d{2}\\.\\d{2}\\.\\d{4}) \\d{2}:\\d{2} Uhr',\n        r'<span style=\"padding-left: 4px;line-height:20px; color:#404040\">(\\d{2}\\.\\d{2}\\.\\d{4})</span>',\n        r'(\\d{2}\\.\\d{2}\\.\\d{4}) \\| \\d{2}:\\d{2} Min<br/>',\n    ]\n    _PAGE_TYPE_REGEXES = [\n        r'<meta name=\"page_type\" content=\"([^\"]+)\">',\n        r\"'itemType'\\s*:\\s*'([^']*)'\",\n    ]\n    _PLAYLIST_ID_REGEXES = [\n        r'content[iI]d=(\\d+)',\n        r\"'itemId'\\s*:\\s*'([^']*)'\",\n    ]\n    _PLAYLIST_CLIP_REGEXES = [\n        r'(?s)data-qvt=.+?<a href=\"([^\"]+)\"',\n    ]\n\n    def _extract_clip(self, url, webpage):\n        clip_id = self._html_search_regex(\n            self._CLIPID_REGEXES, webpage, 'clip id')\n        title = self._html_search_regex(\n            self._TITLE_REGEXES, webpage, 'title',\n            default=None) or self._og_search_title(webpage)\n        info = self._extract_video_info(url, clip_id)\n        description = self._html_search_regex(\n            self._DESCRIPTION_REGEXES, webpage, 'description', default=None)\n        if description is None:\n            description = self._og_search_description(webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n        upload_date = unified_strdate(self._html_search_regex(\n            self._UPLOAD_DATE_REGEXES, webpage, 'upload date', default=None))\n\n        info.update({\n            'id': clip_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'upload_date': upload_date,\n        })\n        return info\n\n    def _extract_playlist(self, url, webpage):\n        playlist_id = self._html_search_regex(\n            self._PLAYLIST_ID_REGEXES, webpage, 'playlist id')\n        playlist = self._parse_json(\n            self._search_regex(\n                r'var\\s+contentResources\\s*=\\s*(\\[.+?\\]);\\s*</script',\n                webpage, 'playlist'),\n            playlist_id)\n        entries = []\n        for item in playlist:\n            clip_id = item.get('id') or item.get('upc')\n            if not clip_id:\n                continue\n            info = self._extract_video_info(url, clip_id)\n            info.update({\n                'id': clip_id,\n                'title': item.get('title') or item.get('teaser', {}).get('headline'),\n                'description': item.get('teaser', {}).get('description'),\n                'thumbnail': item.get('poster'),\n                'duration': float_or_none(item.get('duration')),\n                'series': item.get('tvShowTitle'),\n                'uploader': item.get('broadcastPublisher'),\n            })\n            entries.append(info)\n        return self.playlist_result(entries, playlist_id)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        page_type = self._search_regex(\n            self._PAGE_TYPE_REGEXES, webpage,\n            'page type', default='clip').lower()\n        if page_type == 'clip':\n            return self._extract_clip(url, webpage)\n        elif page_type == 'playlist':\n            return self._extract_playlist(url, webpage)\n        else:\n            raise ExtractorError(\n                'Unsupported page type %s' % page_type, expected=True)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "prosiebensat1.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/prosiebensat1.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}