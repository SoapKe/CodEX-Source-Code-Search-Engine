{"author": "ansible", "code": "import unittest\n\nfrom ansible.modules.cloud.google.gce_tag import _get_changed_items, _intersect_items, _union_items\n\n\nclass TestGCETag(unittest.TestCase):\n    \"\"\"Unit tests for gce_tag module.\"\"\"\n\n    def test_union_items(self):\n        \"\"\"\n        Combine items in both lists\n        removing duplicates.\n        \"\"\"\n        listA = [1, 2, 3, 4, 5, 8, 9]\n        listB = [1, 2, 3, 4, 5, 6, 7]\n        want = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        got = _union_items(listA, listB)\n        self.assertEqual(want, got)\n\n    def test_intersect_items(self):\n        \"\"\"\n        All unique items from either list.\n        \"\"\"\n        listA = [1, 2, 3, 4, 5, 8, 9]\n        listB = [1, 2, 3, 4, 5, 6, 7]\n        want = [1, 2, 3, 4, 5]\n        got = _intersect_items(listA, listB)\n        self.assertEqual(want, got)\n\n        \n        new_tags = ['one', 'two']\n        existing_tags = ['two']\n        want = ['two']  \n        got = _intersect_items(existing_tags, new_tags)\n        self.assertEqual(want, got)\n\n    def test_get_changed_items(self):\n        \"\"\"\n        All the items from left list that don't match\n        any item from the right list.\n        \"\"\"\n        listA = [1, 2, 3, 4, 5, 8, 9]\n        listB = [1, 2, 3, 4, 5, 6, 7]\n        want = [8, 9]\n        got = _get_changed_items(listA, listB)\n        self.assertEqual(want, got)\n\n        \n        tags_to_add = ['one', 'two']\n        existing_tags = ['two']\n        want = ['one']\n        got = _get_changed_items(tags_to_add, existing_tags)\n        self.assertEqual(want, got)\n\n        \n        \n        tags_to_remove = ['one', 'two']\n        existing_tags = ['two', 'three']\n        want = ['three']\n        got = _get_changed_items(existing_tags, tags_to_remove)\n        self.assertEqual(want, got)\n", "comments": "   unit tests gce tag module          def test union items(self)                      combine items lists         removing duplicates                      lista    1  2  3  4  5  8  9          listb    1  2  3  4  5  6  7          want    1  2  3  4  5  6  7  8  9          got    union items(lista  listb)         self assertequal(want  got)      def test intersect items(self)                      all unique items either list                      lista    1  2  3  4  5  8  9          listb    1  2  3  4  5  6  7          want    1  2  3  4  5          got    intersect items(lista  listb)         self assertequal(want  got)            tags removed         new tags     one    two           existing tags     two           want     two      remove tag present         got    intersect items(existing tags  new tags)         self assertequal(want  got)      def test get changed items(self)                      all items left list match         item right list                 tags removed    remove tag present    simulate new tags added    simulate removing tags    specifying one tag right exist ", "content": "import unittest\n\nfrom ansible.modules.cloud.google.gce_tag import _get_changed_items, _intersect_items, _union_items\n\n\nclass TestGCETag(unittest.TestCase):\n    \"\"\"Unit tests for gce_tag module.\"\"\"\n\n    def test_union_items(self):\n        \"\"\"\n        Combine items in both lists\n        removing duplicates.\n        \"\"\"\n        listA = [1, 2, 3, 4, 5, 8, 9]\n        listB = [1, 2, 3, 4, 5, 6, 7]\n        want = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        got = _union_items(listA, listB)\n        self.assertEqual(want, got)\n\n    def test_intersect_items(self):\n        \"\"\"\n        All unique items from either list.\n        \"\"\"\n        listA = [1, 2, 3, 4, 5, 8, 9]\n        listB = [1, 2, 3, 4, 5, 6, 7]\n        want = [1, 2, 3, 4, 5]\n        got = _intersect_items(listA, listB)\n        self.assertEqual(want, got)\n\n        # tags removed\n        new_tags = ['one', 'two']\n        existing_tags = ['two']\n        want = ['two']  # only remove the tag that was present\n        got = _intersect_items(existing_tags, new_tags)\n        self.assertEqual(want, got)\n\n    def test_get_changed_items(self):\n        \"\"\"\n        All the items from left list that don't match\n        any item from the right list.\n        \"\"\"\n        listA = [1, 2, 3, 4, 5, 8, 9]\n        listB = [1, 2, 3, 4, 5, 6, 7]\n        want = [8, 9]\n        got = _get_changed_items(listA, listB)\n        self.assertEqual(want, got)\n\n        # simulate new tags added\n        tags_to_add = ['one', 'two']\n        existing_tags = ['two']\n        want = ['one']\n        got = _get_changed_items(tags_to_add, existing_tags)\n        self.assertEqual(want, got)\n\n        # simulate removing tags\n        # specifying one tag on right that doesn't exist\n        tags_to_remove = ['one', 'two']\n        existing_tags = ['two', 'three']\n        want = ['three']\n        got = _get_changed_items(existing_tags, tags_to_remove)\n        self.assertEqual(want, got)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_gce_tag.py", "id": "29e1a59b0c72497c7c657b803ffb44e0", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/cloud/google/test_gce_tag.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}