{"author": "tgalal", "code": "import abc\nimport logging\nfrom six import with_metaclass\n\nlogger = logging.getLogger(__name__)\n\nDEFAULT = \"s40\"\n\nclass YowsupEnvType(abc.ABCMeta):\n    def __init__(cls, name, bases, dct):\n        if name != \"YowsupEnv\":\n            YowsupEnv.registerEnv(cls)\n        super(YowsupEnvType, cls).__init__(name, bases, dct)\n\nclass YowsupEnv(with_metaclass(YowsupEnvType, object)):\n    __metaclass__ = YowsupEnvType\n    __ENVS = {}\n    __CURR = None\n\n    _USERAGENT_STRING = \"WhatsApp/{WHATSAPP_VERSION} {OS_NAME}/{OS_VERSION} Device/{MANUFACTURER}-{DEVICE_NAME}\"\n\n    @classmethod\n    def registerEnv(cls, envCls):\n        envName = envCls.__name__.lower().replace(\"yowsupenv\", \"\")\n        cls.__ENVS[envName] = envCls\n        logger.debug(\"registered env %s => %s\" % (envName, envCls))\n\n    @classmethod\n    def setEnv(cls, envName):\n        if not envName in cls.__ENVS:\n            raise ValueError(\"%s env does not exist\" % envName)\n        logger.debug(\"Current env changed to %s \" % envName)\n        cls.__CURR = cls.__ENVS[envName]()\n\n    @classmethod\n    def getEnv(cls, envName):\n        if not envName in cls.__ENVS:\n            raise ValueError(\"%s env does not exist\" % envName)\n\n        return cls.__ENVS[envName]()\n\n    @classmethod\n    def getRegisteredEnvs(cls):\n        return list(cls.__ENVS.keys())\n\n    @classmethod\n    def getCurrent(cls):\n        if cls.__CURR is None:\n            env = DEFAULT\n            envs = cls.getRegisteredEnvs()\n            if env not in envs:\n                env = envs[0]\n            logger.debug(\"Env not set, setting it to %s\" % env)\n            cls.setEnv(env)\n        return cls.__CURR\n\n    @abc.abstractmethod\n    def getToken(self, phoneNumber):\n        pass\n\n    @abc.abstractmethod\n    def getVersion(self):\n        pass\n\n    @abc.abstractmethod\n    def getOSVersion(self):\n        pass\n\n    @abc.abstractmethod\n    def getOSName(self):\n        pass\n\n    @abc.abstractmethod\n    def getDeviceName(self):\n        pass\n\n    @abc.abstractmethod\n    def getManufacturer(self):\n        pass\n\n    @abc.abstractmethod\n    def isAxolotlEnabled(self):\n        pass\n\n    def getBuildVersion(self):\n        return \"\"\n\n    def getResource(self):\n        return self.getOSName() + \"-\" + self.getVersion()\n\n    def getUserAgent(self):\n        return self.__class__._USERAGENT_STRING.format(\n            WHATSAPP_VERSION = self.getVersion(),\n            OS_NAME = self.getOSName(),\n            OS_VERSION = self.getOSVersion(),\n            MANUFACTURER = self.getManufacturer(),\n            DEVICE_NAME = self.getDeviceName()\n        )\n", "comments": "", "content": "import abc\nimport logging\nfrom six import with_metaclass\n\nlogger = logging.getLogger(__name__)\n\nDEFAULT = \"s40\"\n\nclass YowsupEnvType(abc.ABCMeta):\n    def __init__(cls, name, bases, dct):\n        if name != \"YowsupEnv\":\n            YowsupEnv.registerEnv(cls)\n        super(YowsupEnvType, cls).__init__(name, bases, dct)\n\nclass YowsupEnv(with_metaclass(YowsupEnvType, object)):\n    __metaclass__ = YowsupEnvType\n    __ENVS = {}\n    __CURR = None\n\n    _USERAGENT_STRING = \"WhatsApp/{WHATSAPP_VERSION} {OS_NAME}/{OS_VERSION} Device/{MANUFACTURER}-{DEVICE_NAME}\"\n\n    @classmethod\n    def registerEnv(cls, envCls):\n        envName = envCls.__name__.lower().replace(\"yowsupenv\", \"\")\n        cls.__ENVS[envName] = envCls\n        logger.debug(\"registered env %s => %s\" % (envName, envCls))\n\n    @classmethod\n    def setEnv(cls, envName):\n        if not envName in cls.__ENVS:\n            raise ValueError(\"%s env does not exist\" % envName)\n        logger.debug(\"Current env changed to %s \" % envName)\n        cls.__CURR = cls.__ENVS[envName]()\n\n    @classmethod\n    def getEnv(cls, envName):\n        if not envName in cls.__ENVS:\n            raise ValueError(\"%s env does not exist\" % envName)\n\n        return cls.__ENVS[envName]()\n\n    @classmethod\n    def getRegisteredEnvs(cls):\n        return list(cls.__ENVS.keys())\n\n    @classmethod\n    def getCurrent(cls):\n        if cls.__CURR is None:\n            env = DEFAULT\n            envs = cls.getRegisteredEnvs()\n            if env not in envs:\n                env = envs[0]\n            logger.debug(\"Env not set, setting it to %s\" % env)\n            cls.setEnv(env)\n        return cls.__CURR\n\n    @abc.abstractmethod\n    def getToken(self, phoneNumber):\n        pass\n\n    @abc.abstractmethod\n    def getVersion(self):\n        pass\n\n    @abc.abstractmethod\n    def getOSVersion(self):\n        pass\n\n    @abc.abstractmethod\n    def getOSName(self):\n        pass\n\n    @abc.abstractmethod\n    def getDeviceName(self):\n        pass\n\n    @abc.abstractmethod\n    def getManufacturer(self):\n        pass\n\n    @abc.abstractmethod\n    def isAxolotlEnabled(self):\n        pass\n\n    def getBuildVersion(self):\n        return \"\"\n\n    def getResource(self):\n        return self.getOSName() + \"-\" + self.getVersion()\n\n    def getUserAgent(self):\n        return self.__class__._USERAGENT_STRING.format(\n            WHATSAPP_VERSION = self.getVersion(),\n            OS_NAME = self.getOSName(),\n            OS_VERSION = self.getOSVersion(),\n            MANUFACTURER = self.getManufacturer(),\n            DEVICE_NAME = self.getDeviceName()\n        )\n", "description": "The python WhatsApp library", "file_name": "env.py", "id": "3a48f9b898820a3f75df568ea956c23c", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/env/env.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}