{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass TwentyThreeVideoIE(InfoExtractor):\n    IE_NAME = '23video'\n    _VALID_URL = r'https?://video\\.(?P<domain>twentythree\\.net|23video\\.com|filmweb\\.no)/v\\.ihtml/player\\.html\\?(?P<query>.*?\\bphoto(?:_|%5f)id=(?P<id>\\d+).*)'\n    _TEST = {\n        'url': 'https://video.twentythree.net/v.ihtml/player.html?showDescriptions=0&source=site&photo%5fid=20448876&autoPlay=1',\n        'md5': '75fcf216303eb1dae9920d651f85ced4',\n        'info_dict': {\n            'id': '20448876',\n            'ext': 'mp4',\n            'title': 'Video Marketing Minute: Personalized Video',\n            'timestamp': 1513855354,\n            'upload_date': '20171221',\n            'uploader_id': '12258964',\n            'uploader': 'Rasmus Bysted',\n        }\n    }\n\n    def _real_extract(self, url):\n        domain, query, photo_id = re.match(self._VALID_URL, url).groups()\n        base_url = 'https://video.%s' % domain\n        photo_data = self._download_json(\n            base_url + '/api/photo/list?' + query, photo_id, query={\n                'format': 'json',\n            }, transform_source=lambda s: self._search_regex(r'(?s)({.+})', s, 'photo data'))['photo']\n        title = photo_data['title']\n\n        formats = []\n\n        audio_path = photo_data.get('audio_download')\n        if audio_path:\n            formats.append({\n                'format_id': 'audio',\n                'url': base_url + audio_path,\n                'filesize': int_or_none(photo_data.get('audio_size')),\n                'vcodec': 'none',\n            })\n\n        def add_common_info_to_list(l, template, id_field, id_value):\n            f_base = template % id_value\n            f_path = photo_data.get(f_base + 'download')\n            if not f_path:\n                return\n            l.append({\n                id_field: id_value,\n                'url': base_url + f_path,\n                'width': int_or_none(photo_data.get(f_base + 'width')),\n                'height': int_or_none(photo_data.get(f_base + 'height')),\n                'filesize': int_or_none(photo_data.get(f_base + 'size')),\n            })\n\n        for f in ('mobile_high', 'medium', 'hd', '1080p', '4k'):\n            add_common_info_to_list(formats, 'video_%s_', 'format_id', f)\n\n        thumbnails = []\n        for t in ('quad16', 'quad50', 'quad75', 'quad100', 'small', 'portrait', 'standard', 'medium', 'large', 'original'):\n            add_common_info_to_list(thumbnails, '%s_', 'id', t)\n\n        return {\n            'id': photo_id,\n            'title': title,\n            'timestamp': int_or_none(photo_data.get('creation_date_epoch')),\n            'duration': int_or_none(photo_data.get('video_length')),\n            'view_count': int_or_none(photo_data.get('view_count')),\n            'comment_count': int_or_none(photo_data.get('number_of_comments')),\n            'uploader_id': photo_data.get('user_id'),\n            'uploader': photo_data.get('display_name'),\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass TwentyThreeVideoIE(InfoExtractor):\n    IE_NAME = '23video'\n    _VALID_URL = r'https?://video\\.(?P<domain>twentythree\\.net|23video\\.com|filmweb\\.no)/v\\.ihtml/player\\.html\\?(?P<query>.*?\\bphoto(?:_|%5f)id=(?P<id>\\d+).*)'\n    _TEST = {\n        'url': 'https://video.twentythree.net/v.ihtml/player.html?showDescriptions=0&source=site&photo%5fid=20448876&autoPlay=1',\n        'md5': '75fcf216303eb1dae9920d651f85ced4',\n        'info_dict': {\n            'id': '20448876',\n            'ext': 'mp4',\n            'title': 'Video Marketing Minute: Personalized Video',\n            'timestamp': 1513855354,\n            'upload_date': '20171221',\n            'uploader_id': '12258964',\n            'uploader': 'Rasmus Bysted',\n        }\n    }\n\n    def _real_extract(self, url):\n        domain, query, photo_id = re.match(self._VALID_URL, url).groups()\n        base_url = 'https://video.%s' % domain\n        photo_data = self._download_json(\n            base_url + '/api/photo/list?' + query, photo_id, query={\n                'format': 'json',\n            }, transform_source=lambda s: self._search_regex(r'(?s)({.+})', s, 'photo data'))['photo']\n        title = photo_data['title']\n\n        formats = []\n\n        audio_path = photo_data.get('audio_download')\n        if audio_path:\n            formats.append({\n                'format_id': 'audio',\n                'url': base_url + audio_path,\n                'filesize': int_or_none(photo_data.get('audio_size')),\n                'vcodec': 'none',\n            })\n\n        def add_common_info_to_list(l, template, id_field, id_value):\n            f_base = template % id_value\n            f_path = photo_data.get(f_base + 'download')\n            if not f_path:\n                return\n            l.append({\n                id_field: id_value,\n                'url': base_url + f_path,\n                'width': int_or_none(photo_data.get(f_base + 'width')),\n                'height': int_or_none(photo_data.get(f_base + 'height')),\n                'filesize': int_or_none(photo_data.get(f_base + 'size')),\n            })\n\n        for f in ('mobile_high', 'medium', 'hd', '1080p', '4k'):\n            add_common_info_to_list(formats, 'video_%s_', 'format_id', f)\n\n        thumbnails = []\n        for t in ('quad16', 'quad50', 'quad75', 'quad100', 'small', 'portrait', 'standard', 'medium', 'large', 'original'):\n            add_common_info_to_list(thumbnails, '%s_', 'id', t)\n\n        return {\n            'id': photo_id,\n            'title': title,\n            'timestamp': int_or_none(photo_data.get('creation_date_epoch')),\n            'duration': int_or_none(photo_data.get('video_length')),\n            'view_count': int_or_none(photo_data.get('view_count')),\n            'comment_count': int_or_none(photo_data.get('number_of_comments')),\n            'uploader_id': photo_data.get('user_id'),\n            'uploader': photo_data.get('display_name'),\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "twentythreevideo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/twentythreevideo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}