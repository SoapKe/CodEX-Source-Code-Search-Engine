{"author": "openai", "code": "from __future__ import unicode_literals\nfrom gym import envs, spaces, logger\nimport json\nimport os\nimport sys\nimport argparse\n\nfrom gym.envs.tests.spec_list import should_skip_env_spec_for_tests\nfrom gym.envs.tests.test_envs_semantics import generate_rollout_hash, hash_object\n\nDATA_DIR = os.path.join(os.path.dirname(__file__), os.pardir, 'gym', 'envs', 'tests')\nROLLOUT_STEPS = 100\nepisodes = ROLLOUT_STEPS\nsteps = ROLLOUT_STEPS\n\nROLLOUT_FILE = os.path.join(DATA_DIR, 'rollout.json')\n\nif not os.path.isfile(ROLLOUT_FILE):\n    logger.info(\"No rollout file found. Writing empty json file to {}\".format(ROLLOUT_FILE))\n    with open(ROLLOUT_FILE, \"w\") as outfile:\n        json.dump({}, outfile, indent=2)\n\ndef update_rollout_dict(spec, rollout_dict):\n    \n    \n    if should_skip_env_spec_for_tests(spec):\n        logger.info(\"Skipping tests for {}\".format(spec.id))\n        return False\n\n    \n    if spec.nondeterministic:\n        logger.info(\"Skipping tests for nondeterministic env {}\".format(spec.id))\n        return False\n\n    logger.info(\"Generating rollout for {}\".format(spec.id))\n\n    try:\n        observations_hash, actions_hash, rewards_hash, dones_hash = generate_rollout_hash(spec)\n    except:\n        \n        logger.warn(\"Exception {} thrown while generating rollout for {}. Rollout not added.\".format(sys.exc_info()[0], spec.id))\n        return False\n\n    rollout = {}\n    rollout['observations'] = observations_hash\n    rollout['actions'] = actions_hash\n    rollout['rewards'] = rewards_hash\n    rollout['dones'] = dones_hash\n\n    existing = rollout_dict.get(spec.id)\n    if existing:\n        differs = False\n        for key, new_hash in rollout.items():\n            differs = differs or existing[key] != new_hash\n        if not differs:\n            logger.debug(\"Hashes match with existing for {}\".format(spec.id))\n            return False\n        else:\n            logger.warn(\"Got new hash for {}. Overwriting.\".format(spec.id))\n\n    rollout_dict[spec.id] = rollout\n    return True\n\ndef add_new_rollouts(spec_ids, overwrite):\n    environments = [spec for spec in envs.registry.all() if spec._entry_point is not None]\n    if spec_ids:\n        environments = [spec for spec in environments if spec.id in spec_ids]\n        assert len(environments) == len(spec_ids), \"Some specs not found\"\n    with open(ROLLOUT_FILE) as data_file:\n        rollout_dict = json.load(data_file)\n    modified = False\n    for spec in environments:\n        if not overwrite and spec.id in rollout_dict:\n            logger.debug(\"Rollout already exists for {}. Skipping.\".format(spec.id))\n        else:\n            modified = update_rollout_dict(spec, rollout_dict) or modified\n\n    if modified:\n        logger.info(\"Writing new rollout file to {}\".format(ROLLOUT_FILE))\n        with open(ROLLOUT_FILE, \"w\") as outfile:\n            json.dump(rollout_dict, outfile, indent=2, sort_keys=True)\n    else:\n        logger.info(\"No modifications needed.\")\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-f', '--force', action='store_true', help='Overwrite '+\n        'existing rollouts if hashes differ.')\n    parser.add_argument('-v', '--verbose', action='store_true')\n    parser.add_argument('specs', nargs='*', help='ids of env specs to check (default: all)')\n    args = parser.parse_args()\n    if args.verbose:\n        logger.set_level(logger.INFO)\n    add_new_rollouts(args.specs, args.force)\n", "comments": "        takes input environment spec rollout generated      existing dictionary rollouts  returns true iff dictionary     modified             skip platform dependent    skip environments nondeterministic    if running env generates exception  write rollout file ", "content": "from __future__ import unicode_literals\nfrom gym import envs, spaces, logger\nimport json\nimport os\nimport sys\nimport argparse\n\nfrom gym.envs.tests.spec_list import should_skip_env_spec_for_tests\nfrom gym.envs.tests.test_envs_semantics import generate_rollout_hash, hash_object\n\nDATA_DIR = os.path.join(os.path.dirname(__file__), os.pardir, 'gym', 'envs', 'tests')\nROLLOUT_STEPS = 100\nepisodes = ROLLOUT_STEPS\nsteps = ROLLOUT_STEPS\n\nROLLOUT_FILE = os.path.join(DATA_DIR, 'rollout.json')\n\nif not os.path.isfile(ROLLOUT_FILE):\n    logger.info(\"No rollout file found. Writing empty json file to {}\".format(ROLLOUT_FILE))\n    with open(ROLLOUT_FILE, \"w\") as outfile:\n        json.dump({}, outfile, indent=2)\n\ndef update_rollout_dict(spec, rollout_dict):\n    \"\"\"\n    Takes as input the environment spec for which the rollout is to be generated,\n    and the existing dictionary of rollouts. Returns True iff the dictionary was\n    modified.\n    \"\"\"\n    # Skip platform-dependent\n    if should_skip_env_spec_for_tests(spec):\n        logger.info(\"Skipping tests for {}\".format(spec.id))\n        return False\n\n    # Skip environments that are nondeterministic\n    if spec.nondeterministic:\n        logger.info(\"Skipping tests for nondeterministic env {}\".format(spec.id))\n        return False\n\n    logger.info(\"Generating rollout for {}\".format(spec.id))\n\n    try:\n        observations_hash, actions_hash, rewards_hash, dones_hash = generate_rollout_hash(spec)\n    except:\n        # If running the env generates an exception, don't write to the rollout file\n        logger.warn(\"Exception {} thrown while generating rollout for {}. Rollout not added.\".format(sys.exc_info()[0], spec.id))\n        return False\n\n    rollout = {}\n    rollout['observations'] = observations_hash\n    rollout['actions'] = actions_hash\n    rollout['rewards'] = rewards_hash\n    rollout['dones'] = dones_hash\n\n    existing = rollout_dict.get(spec.id)\n    if existing:\n        differs = False\n        for key, new_hash in rollout.items():\n            differs = differs or existing[key] != new_hash\n        if not differs:\n            logger.debug(\"Hashes match with existing for {}\".format(spec.id))\n            return False\n        else:\n            logger.warn(\"Got new hash for {}. Overwriting.\".format(spec.id))\n\n    rollout_dict[spec.id] = rollout\n    return True\n\ndef add_new_rollouts(spec_ids, overwrite):\n    environments = [spec for spec in envs.registry.all() if spec._entry_point is not None]\n    if spec_ids:\n        environments = [spec for spec in environments if spec.id in spec_ids]\n        assert len(environments) == len(spec_ids), \"Some specs not found\"\n    with open(ROLLOUT_FILE) as data_file:\n        rollout_dict = json.load(data_file)\n    modified = False\n    for spec in environments:\n        if not overwrite and spec.id in rollout_dict:\n            logger.debug(\"Rollout already exists for {}. Skipping.\".format(spec.id))\n        else:\n            modified = update_rollout_dict(spec, rollout_dict) or modified\n\n    if modified:\n        logger.info(\"Writing new rollout file to {}\".format(ROLLOUT_FILE))\n        with open(ROLLOUT_FILE, \"w\") as outfile:\n            json.dump(rollout_dict, outfile, indent=2, sort_keys=True)\n    else:\n        logger.info(\"No modifications needed.\")\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-f', '--force', action='store_true', help='Overwrite '+\n        'existing rollouts if hashes differ.')\n    parser.add_argument('-v', '--verbose', action='store_true')\n    parser.add_argument('specs', nargs='*', help='ids of env specs to check (default: all)')\n    args = parser.parse_args()\n    if args.verbose:\n        logger.set_level(logger.INFO)\n    add_new_rollouts(args.specs, args.force)\n", "description": "A toolkit for developing and comparing reinforcement learning algorithms.", "file_name": "generate_json.py", "id": "4c098816134d7a0ee8fc18a4586c8519", "language": "Python", "project_name": "gym", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/openai-gym/openai-gym-6160181/scripts/generate_json.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:30:35Z", "url": "https://github.com/openai/gym", "wiki": true}