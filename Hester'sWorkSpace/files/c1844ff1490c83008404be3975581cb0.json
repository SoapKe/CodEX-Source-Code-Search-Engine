{"author": "ansible", "code": "\n  -*- coding: utf-8 -*-\n\n Copyright 2017 Radware LTD.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'status': ['preview'],\n                    'supported_by': 'community',\n                    'metadata_version': '1.1'}\n\nDOCUMENTATION = '''\nmodule: vdirect_file\nauthor: Evgeny Fedoruk @ Radware LTD (@evgenyfedoruk)\nshort_description: Uploads a new or updates an existing runnable file into Radware vDirect server\ndescription:\n    - Uploads a new or updates an existing configuration template or workflow template into the Radware vDirect server.\n      All parameters may be set as environment variables.\nnotes:\n    - Requires the Radware vdirect-client Python package on the host. This is as easy as\n      C(pip install vdirect-client)\nversion_added: \"2.4\"\noptions:\n  vdirect_ip:\n    description:\n     - Primary vDirect server IP address, may be set as VDIRECT_IP environment variable.\n    required: true\n  vdirect_user:\n    description:\n     - vDirect server username, may be set as VDIRECT_USER environment variable.\n    required: true\n  vdirect_password:\n    description:\n     - vDirect server password, may be set as VDIRECT_PASSWORD environment variable.\n    required: true\n  vdirect_secondary_ip:\n    description:\n     - Secondary vDirect server IP address, may be set as VDIRECT_SECONDARY_IP environment variable.\n  vdirect_wait:\n    description:\n     - Wait for async operation to complete, may be set as VDIRECT_WAIT environment variable.\n    type: bool\n    default: 'yes'\n  vdirect_https_port:\n    description:\n     - vDirect server HTTPS port number, may be set as VDIRECT_HTTPS_PORT environment variable.\n    default: 2189\n  vdirect_http_port:\n    description:\n     - vDirect server HTTP port number, may be set as VDIRECT_HTTP_PORT environment variable.\n    default: 2188\n  vdirect_timeout:\n    description:\n     - Amount of time to wait for async operation completion [seconds],\n     - may be set as VDIRECT_TIMEOUT environment variable.\n    default: 60\n  vdirect_use_ssl:\n    description:\n     - If C(no), an HTTP connection will be used instead of the default HTTPS connection,\n     - may be set as VDIRECT_HTTPS or VDIRECT_USE_SSL environment variable.\n    type: bool\n    default: 'yes'\n  vdirect_validate_certs:\n    description:\n     - If C(no), SSL certificates will not be validated,\n     - may be set as VDIRECT_VALIDATE_CERTS or VDIRECT_VERIFY environment variable.\n     - This should only set to C(no) used on personally controlled sites using self-signed certificates.\n    type: bool\n    default: 'yes'\n  file_name:\n    description:\n     - vDirect runnable file name to be uploaded.\n     - May be velocity configuration template (.vm) or workflow template zip file (.zip).\n    required: true\n\nrequirements:\n  - \"vdirect-client >= 4.1.1\"\n'''\n\nEXAMPLES = '''\n- name: vdirect_file\n  vdirect_file:\n      vdirect_ip: 10.10.10.10\n      vdirect_user: vDirect\n      vdirect_password: radware\n      file_name: /tmp/get_vlans.vm\n'''\n\nRETURN = '''\nresult:\n    description: Message detailing upload result\n    returned: success\n    type: string\n    sample: \"Workflow template created\"\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.basic import env_fallback\nimport os\nimport os.path\n\ntry:\n    from vdirect_client import rest_client\n    HAS_REST_CLIENT = True\nexcept ImportError:\n    HAS_REST_CLIENT = False\n\nTEMPLATE_EXTENSION = '.vm'\nWORKFLOW_EXTENSION = '.zip'\nWRONG_EXTENSION_ERROR = 'The file_name parameter must have ' \\\n                        'velocity script (.vm) extension or ZIP archive (.zip) extension'\nCONFIGURATION_TEMPLATE_CREATED_SUCCESS = 'Configuration template created'\nCONFIGURATION_TEMPLATE_UPDATED_SUCCESS = 'Configuration template updated'\nWORKFLOW_TEMPLATE_CREATED_SUCCESS = 'Workflow template created'\nWORKFLOW_TEMPLATE_UPDATED_SUCCESS = 'Workflow template updated'\n\nmeta_args = dict(\n    vdirect_ip=dict(\n        required=True, fallback=(env_fallback, ['VDIRECT_IP']),\n        default=None),\n    vdirect_user=dict(\n        required=True, fallback=(env_fallback, ['VDIRECT_USER']),\n        default=None),\n    vdirect_password=dict(\n        required=True, fallback=(env_fallback, ['VDIRECT_PASSWORD']),\n        default=None, no_log=True, type='str'),\n    vdirect_secondary_ip=dict(\n        required=False, fallback=(env_fallback, ['VDIRECT_SECONDARY_IP']),\n        default=None),\n    vdirect_use_ssl=dict(\n        required=False, fallback=(env_fallback, ['VDIRECT_HTTPS', 'VDIRECT_USE_SSL']),\n        default=True, type='bool'),\n    vdirect_wait=dict(\n        required=False, fallback=(env_fallback, ['VDIRECT_WAIT']),\n        default=True, type='bool'),\n    vdirect_timeout=dict(\n        required=False, fallback=(env_fallback, ['VDIRECT_TIMEOUT']),\n        default=60, type='int'),\n    vdirect_validate_certs=dict(\n        required=False, fallback=(env_fallback, ['VDIRECT_VERIFY', 'VDIRECT_VALIDATE_CERTS']),\n        default=True, type='bool'),\n    vdirect_https_port=dict(\n        required=False, fallback=(env_fallback, ['VDIRECT_HTTPS_PORT']),\n        default=2189, type='int'),\n    vdirect_http_port=dict(\n        required=False, fallback=(env_fallback, ['VDIRECT_HTTP_PORT']),\n        default=2188, type='int'),\n    file_name=dict(required=True, default=None)\n)\n\n\nclass VdirectFile(object):\n    def __init__(self, params):\n        self.client = rest_client.RestClient(params['vdirect_ip'],\n                                             params['vdirect_user'],\n                                             params['vdirect_password'],\n                                             wait=params['vdirect_wait'],\n                                             secondary_vdirect_ip=params['vdirect_secondary_ip'],\n                                             https_port=params['vdirect_https_port'],\n                                             http_port=params['vdirect_http_port'],\n                                             timeout=params['vdirect_timeout'],\n                                             https=params['vdirect_use_ssl'],\n                                             verify=params['vdirect_validate_certs'])\n\n    def upload(self, fqn):\n        if fqn.endswith(TEMPLATE_EXTENSION):\n            template_name = os.path.basename(fqn)\n            template = rest_client.Template(self.client)\n            runnable_file = open(fqn, 'r')\n            file_content = runnable_file.read()\n\n            result = template.create_from_source(file_content, template_name, fail_if_invalid=True)\n            if result[rest_client.RESP_STATUS] == 409:\n                template.upload_source(file_content, template_name, fail_if_invalid=True)\n                result = CONFIGURATION_TEMPLATE_UPDATED_SUCCESS\n            else:\n                result = CONFIGURATION_TEMPLATE_CREATED_SUCCESS\n        elif fqn.endswith(WORKFLOW_EXTENSION):\n            workflow = rest_client.WorkflowTemplate(self.client)\n\n            runnable_file = open(fqn, 'rb')\n            file_content = runnable_file.read()\n            result = workflow.create_template_from_archive(file_content, fail_if_invalid=True)\n            if result[rest_client.RESP_STATUS] == 409:\n                workflow.update_archive(file_content, os.path.splitext(os.path.basename(fqn))[0])\n                result = WORKFLOW_TEMPLATE_UPDATED_SUCCESS\n            else:\n                result = WORKFLOW_TEMPLATE_CREATED_SUCCESS\n        else:\n            result = WRONG_EXTENSION_ERROR\n        return result\n\n\ndef main():\n\n    if not HAS_REST_CLIENT:\n        raise ImportError(\"The python vdirect-client module is required\")\n\n    module = AnsibleModule(argument_spec=meta_args)\n\n    try:\n        vdirect_file = VdirectFile(module.params)\n        result = vdirect_file.upload(module.params['file_name'])\n        result = dict(result=result)\n        module.exit_json(**result)\n    except Exception as e:\n        module.fail_json(msg=str(e))\n\nif __name__ == '__main__':\n    main()\n", "comments": "    module  vdirect file author  evgeny fedoruk   radware ltd ( evgenyfedoruk) short description  uploads new updates existing runnable file radware vdirect server description        uploads new updates existing configuration template workflow template radware vdirect server        all parameters may set environment variables  notes        requires radware vdirect client python package host  this easy       c(pip install vdirect client) version added   2 4  options    vdirect ip      description         primary vdirect server ip address  may set vdirect ip environment variable      required  true   vdirect user      description         vdirect server username  may set vdirect user environment variable      required  true   vdirect password      description         vdirect server password  may set vdirect password environment variable      required  true   vdirect secondary ip      description         secondary vdirect server ip address  may set vdirect secondary ip environment variable    vdirect wait      description         wait async operation complete  may set vdirect wait environment variable      type  bool     default   yes    vdirect https port      description         vdirect server https port number  may set vdirect https port environment variable      default  2189   vdirect http port      description         vdirect server http port number  may set vdirect http port environment variable      default  2188   vdirect timeout      description         amount time wait async operation completion  seconds          may set vdirect timeout environment variable      default  60   vdirect use ssl      description         if c(no)  http connection used instead default https connection         may set vdirect https vdirect use ssl environment variable      type  bool     default   yes    vdirect validate certs      description         if c(no)  ssl certificates validated         may set vdirect validate certs vdirect verify environment variable         this set c(no) used personally controlled sites using self signed certificates      type  bool     default   yes    file name      description         vdirect runnable file name uploaded         may velocity configuration template ( vm) workflow template zip file ( zip)      required  true  requirements       vdirect client    4 1 1       examples         name  vdirect file   vdirect file        vdirect ip  10 10 10 10       vdirect user  vdirect       vdirect password  radware       file name   tmp get vlans vm      return       result      description  message detailing upload result     returned  success     type  string     sample   workflow template created          usr bin python         coding  utf 8           copyright 2017 radware ltd        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses    ", "content": "#!/usr/bin/python\n#  -*- coding: utf-8 -*-\n#\n# Copyright 2017 Radware LTD.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'status': ['preview'],\n                    'supported_by': 'community',\n                    'metadata_version': '1.1'}\n\nDOCUMENTATION = '''\nmodule: vdirect_file\nauthor: Evgeny Fedoruk @ Radware LTD (@evgenyfedoruk)\nshort_description: Uploads a new or updates an existing runnable file into Radware vDirect server\ndescription:\n    - Uploads a new or updates an existing configuration template or workflow template into the Radware vDirect server.\n      All parameters may be set as environment variables.\nnotes:\n    - Requires the Radware vdirect-client Python package on the host. This is as easy as\n      C(pip install vdirect-client)\nversion_added: \"2.4\"\noptions:\n  vdirect_ip:\n    description:\n     - Primary vDirect server IP address, may be set as VDIRECT_IP environment variable.\n    required: true\n  vdirect_user:\n    description:\n     - vDirect server username, may be set as VDIRECT_USER environment variable.\n    required: true\n  vdirect_password:\n    description:\n     - vDirect server password, may be set as VDIRECT_PASSWORD environment variable.\n    required: true\n  vdirect_secondary_ip:\n    description:\n     - Secondary vDirect server IP address, may be set as VDIRECT_SECONDARY_IP environment variable.\n  vdirect_wait:\n    description:\n     - Wait for async operation to complete, may be set as VDIRECT_WAIT environment variable.\n    type: bool\n    default: 'yes'\n  vdirect_https_port:\n    description:\n     - vDirect server HTTPS port number, may be set as VDIRECT_HTTPS_PORT environment variable.\n    default: 2189\n  vdirect_http_port:\n    description:\n     - vDirect server HTTP port number, may be set as VDIRECT_HTTP_PORT environment variable.\n    default: 2188\n  vdirect_timeout:\n    description:\n     - Amount of time to wait for async operation completion [seconds],\n     - may be set as VDIRECT_TIMEOUT environment variable.\n    default: 60\n  vdirect_use_ssl:\n    description:\n     - If C(no), an HTTP connection will be used instead of the default HTTPS connection,\n     - may be set as VDIRECT_HTTPS or VDIRECT_USE_SSL environment variable.\n    type: bool\n    default: 'yes'\n  vdirect_validate_certs:\n    description:\n     - If C(no), SSL certificates will not be validated,\n     - may be set as VDIRECT_VALIDATE_CERTS or VDIRECT_VERIFY environment variable.\n     - This should only set to C(no) used on personally controlled sites using self-signed certificates.\n    type: bool\n    default: 'yes'\n  file_name:\n    description:\n     - vDirect runnable file name to be uploaded.\n     - May be velocity configuration template (.vm) or workflow template zip file (.zip).\n    required: true\n\nrequirements:\n  - \"vdirect-client >= 4.1.1\"\n'''\n\nEXAMPLES = '''\n- name: vdirect_file\n  vdirect_file:\n      vdirect_ip: 10.10.10.10\n      vdirect_user: vDirect\n      vdirect_password: radware\n      file_name: /tmp/get_vlans.vm\n'''\n\nRETURN = '''\nresult:\n    description: Message detailing upload result\n    returned: success\n    type: string\n    sample: \"Workflow template created\"\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.basic import env_fallback\nimport os\nimport os.path\n\ntry:\n    from vdirect_client import rest_client\n    HAS_REST_CLIENT = True\nexcept ImportError:\n    HAS_REST_CLIENT = False\n\nTEMPLATE_EXTENSION = '.vm'\nWORKFLOW_EXTENSION = '.zip'\nWRONG_EXTENSION_ERROR = 'The file_name parameter must have ' \\\n                        'velocity script (.vm) extension or ZIP archive (.zip) extension'\nCONFIGURATION_TEMPLATE_CREATED_SUCCESS = 'Configuration template created'\nCONFIGURATION_TEMPLATE_UPDATED_SUCCESS = 'Configuration template updated'\nWORKFLOW_TEMPLATE_CREATED_SUCCESS = 'Workflow template created'\nWORKFLOW_TEMPLATE_UPDATED_SUCCESS = 'Workflow template updated'\n\nmeta_args = dict(\n    vdirect_ip=dict(\n        required=True, fallback=(env_fallback, ['VDIRECT_IP']),\n        default=None),\n    vdirect_user=dict(\n        required=True, fallback=(env_fallback, ['VDIRECT_USER']),\n        default=None),\n    vdirect_password=dict(\n        required=True, fallback=(env_fallback, ['VDIRECT_PASSWORD']),\n        default=None, no_log=True, type='str'),\n    vdirect_secondary_ip=dict(\n        required=False, fallback=(env_fallback, ['VDIRECT_SECONDARY_IP']),\n        default=None),\n    vdirect_use_ssl=dict(\n        required=False, fallback=(env_fallback, ['VDIRECT_HTTPS', 'VDIRECT_USE_SSL']),\n        default=True, type='bool'),\n    vdirect_wait=dict(\n        required=False, fallback=(env_fallback, ['VDIRECT_WAIT']),\n        default=True, type='bool'),\n    vdirect_timeout=dict(\n        required=False, fallback=(env_fallback, ['VDIRECT_TIMEOUT']),\n        default=60, type='int'),\n    vdirect_validate_certs=dict(\n        required=False, fallback=(env_fallback, ['VDIRECT_VERIFY', 'VDIRECT_VALIDATE_CERTS']),\n        default=True, type='bool'),\n    vdirect_https_port=dict(\n        required=False, fallback=(env_fallback, ['VDIRECT_HTTPS_PORT']),\n        default=2189, type='int'),\n    vdirect_http_port=dict(\n        required=False, fallback=(env_fallback, ['VDIRECT_HTTP_PORT']),\n        default=2188, type='int'),\n    file_name=dict(required=True, default=None)\n)\n\n\nclass VdirectFile(object):\n    def __init__(self, params):\n        self.client = rest_client.RestClient(params['vdirect_ip'],\n                                             params['vdirect_user'],\n                                             params['vdirect_password'],\n                                             wait=params['vdirect_wait'],\n                                             secondary_vdirect_ip=params['vdirect_secondary_ip'],\n                                             https_port=params['vdirect_https_port'],\n                                             http_port=params['vdirect_http_port'],\n                                             timeout=params['vdirect_timeout'],\n                                             https=params['vdirect_use_ssl'],\n                                             verify=params['vdirect_validate_certs'])\n\n    def upload(self, fqn):\n        if fqn.endswith(TEMPLATE_EXTENSION):\n            template_name = os.path.basename(fqn)\n            template = rest_client.Template(self.client)\n            runnable_file = open(fqn, 'r')\n            file_content = runnable_file.read()\n\n            result = template.create_from_source(file_content, template_name, fail_if_invalid=True)\n            if result[rest_client.RESP_STATUS] == 409:\n                template.upload_source(file_content, template_name, fail_if_invalid=True)\n                result = CONFIGURATION_TEMPLATE_UPDATED_SUCCESS\n            else:\n                result = CONFIGURATION_TEMPLATE_CREATED_SUCCESS\n        elif fqn.endswith(WORKFLOW_EXTENSION):\n            workflow = rest_client.WorkflowTemplate(self.client)\n\n            runnable_file = open(fqn, 'rb')\n            file_content = runnable_file.read()\n            result = workflow.create_template_from_archive(file_content, fail_if_invalid=True)\n            if result[rest_client.RESP_STATUS] == 409:\n                workflow.update_archive(file_content, os.path.splitext(os.path.basename(fqn))[0])\n                result = WORKFLOW_TEMPLATE_UPDATED_SUCCESS\n            else:\n                result = WORKFLOW_TEMPLATE_CREATED_SUCCESS\n        else:\n            result = WRONG_EXTENSION_ERROR\n        return result\n\n\ndef main():\n\n    if not HAS_REST_CLIENT:\n        raise ImportError(\"The python vdirect-client module is required\")\n\n    module = AnsibleModule(argument_spec=meta_args)\n\n    try:\n        vdirect_file = VdirectFile(module.params)\n        result = vdirect_file.upload(module.params['file_name'])\n        result = dict(result=result)\n        module.exit_json(**result)\n    except Exception as e:\n        module.fail_json(msg=str(e))\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "vdirect_file.py", "id": "c1844ff1490c83008404be3975581cb0", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/radware/vdirect_file.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}