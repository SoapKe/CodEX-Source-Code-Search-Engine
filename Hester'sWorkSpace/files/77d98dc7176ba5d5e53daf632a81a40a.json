{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    get_element_by_id,\n    remove_end,\n)\n\n\nclass IconosquareIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?:iconosquare\\.com|statigr\\.am)/p/(?P<id>[^/]+)'\n    _TEST = {\n        'url': 'http://statigr.am/p/522207370455279102_24101272',\n        'md5': '6eb93b882a3ded7c378ee1d6884b1814',\n        'info_dict': {\n            'id': '522207370455279102_24101272',\n            'ext': 'mp4',\n            'title': 'Instagram photo by @aguynamedpatrick (Patrick Janelle)',\n            'description': 'md5:644406a9ec27457ed7aa7a9ebcd4ce3d',\n            'timestamp': 1376471991,\n            'upload_date': '20130814',\n            'uploader': 'aguynamedpatrick',\n            'uploader_id': '24101272',\n            'comment_count': int,\n            'like_count': int,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        media = self._parse_json(\n            get_element_by_id('mediaJson', webpage),\n            video_id)\n\n        formats = [{\n            'url': f['url'],\n            'format_id': format_id,\n            'width': int_or_none(f.get('width')),\n            'height': int_or_none(f.get('height'))\n        } for format_id, f in media['videos'].items()]\n        self._sort_formats(formats)\n\n        title = remove_end(self._og_search_title(webpage), ' - via Iconosquare')\n\n        timestamp = int_or_none(media.get('created_time') or media.get('caption', {}).get('created_time'))\n        description = media.get('caption', {}).get('text')\n\n        uploader = media.get('user', {}).get('username')\n        uploader_id = media.get('user', {}).get('id')\n\n        comment_count = int_or_none(media.get('comments', {}).get('count'))\n        like_count = int_or_none(media.get('likes', {}).get('count'))\n\n        thumbnails = [{\n            'url': t['url'],\n            'id': thumbnail_id,\n            'width': int_or_none(t.get('width')),\n            'height': int_or_none(t.get('height'))\n        } for thumbnail_id, t in media.get('images', {}).items()]\n\n        comments = [{\n            'id': comment.get('id'),\n            'text': comment['text'],\n            'timestamp': int_or_none(comment.get('created_time')),\n            'author': comment.get('from', {}).get('full_name'),\n            'author_id': comment.get('from', {}).get('username'),\n        } for comment in media.get('comments', {}).get('data', []) if 'text' in comment]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnails': thumbnails,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'comment_count': comment_count,\n            'like_count': like_count,\n            'formats': formats,\n            'comments': comments,\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    get_element_by_id,\n    remove_end,\n)\n\n\nclass IconosquareIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?:iconosquare\\.com|statigr\\.am)/p/(?P<id>[^/]+)'\n    _TEST = {\n        'url': 'http://statigr.am/p/522207370455279102_24101272',\n        'md5': '6eb93b882a3ded7c378ee1d6884b1814',\n        'info_dict': {\n            'id': '522207370455279102_24101272',\n            'ext': 'mp4',\n            'title': 'Instagram photo by @aguynamedpatrick (Patrick Janelle)',\n            'description': 'md5:644406a9ec27457ed7aa7a9ebcd4ce3d',\n            'timestamp': 1376471991,\n            'upload_date': '20130814',\n            'uploader': 'aguynamedpatrick',\n            'uploader_id': '24101272',\n            'comment_count': int,\n            'like_count': int,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        media = self._parse_json(\n            get_element_by_id('mediaJson', webpage),\n            video_id)\n\n        formats = [{\n            'url': f['url'],\n            'format_id': format_id,\n            'width': int_or_none(f.get('width')),\n            'height': int_or_none(f.get('height'))\n        } for format_id, f in media['videos'].items()]\n        self._sort_formats(formats)\n\n        title = remove_end(self._og_search_title(webpage), ' - via Iconosquare')\n\n        timestamp = int_or_none(media.get('created_time') or media.get('caption', {}).get('created_time'))\n        description = media.get('caption', {}).get('text')\n\n        uploader = media.get('user', {}).get('username')\n        uploader_id = media.get('user', {}).get('id')\n\n        comment_count = int_or_none(media.get('comments', {}).get('count'))\n        like_count = int_or_none(media.get('likes', {}).get('count'))\n\n        thumbnails = [{\n            'url': t['url'],\n            'id': thumbnail_id,\n            'width': int_or_none(t.get('width')),\n            'height': int_or_none(t.get('height'))\n        } for thumbnail_id, t in media.get('images', {}).items()]\n\n        comments = [{\n            'id': comment.get('id'),\n            'text': comment['text'],\n            'timestamp': int_or_none(comment.get('created_time')),\n            'author': comment.get('from', {}).get('full_name'),\n            'author_id': comment.get('from', {}).get('username'),\n        } for comment in media.get('comments', {}).get('data', []) if 'text' in comment]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnails': thumbnails,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'comment_count': comment_count,\n            'like_count': like_count,\n            'formats': formats,\n            'comments': comments,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "iconosquare.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/iconosquare.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}