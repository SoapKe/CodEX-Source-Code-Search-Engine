{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport optparse\nimport os\nfrom os.path import dirname as dirn\nimport sys\n\nsys.path.insert(0, dirn(dirn((os.path.abspath(__file__)))))\nimport youtube_dl\nfrom youtube_dl.utils import shell_quote\n\nFISH_COMPLETION_FILE = 'youtube-dl.fish'\nFISH_COMPLETION_TEMPLATE = 'devscripts/fish-completion.in'\n\nEXTRA_ARGS = {\n    'recode-video': ['--arguments', 'mp4 flv ogg webm mkv', '--exclusive'],\n\n    \n    'download-archive': ['--require-parameter'],\n    'cookies': ['--require-parameter'],\n    'load-info': ['--require-parameter'],\n    'batch-file': ['--require-parameter'],\n}\n\n\ndef build_completion(opt_parser):\n    commands = []\n\n    for group in opt_parser.option_groups:\n        for option in group.option_list:\n            long_option = option.get_opt_string().strip('-')\n            complete_cmd = ['complete', '--command', 'youtube-dl', '--long-option', long_option]\n            if option._short_opts:\n                complete_cmd += ['--short-option', option._short_opts[0].strip('-')]\n            if option.help != optparse.SUPPRESS_HELP:\n                complete_cmd += ['--description', option.help]\n            complete_cmd.extend(EXTRA_ARGS.get(long_option, []))\n            commands.append(shell_quote(complete_cmd))\n\n    with open(FISH_COMPLETION_TEMPLATE) as f:\n        template = f.read()\n    filled_template = template.replace('{{commands}}', '\\n'.join(commands))\n    with open(FISH_COMPLETION_FILE, 'w') as f:\n        f.write(filled_template)\n\n\nparser = youtube_dl.parseOpts()[0]\nbuild_completion(parser)\n", "comments": "#!/usr/bin/env python\n# Options that need a file parameter\n", "content": "#!/usr/bin/env python\nfrom __future__ import unicode_literals\n\nimport optparse\nimport os\nfrom os.path import dirname as dirn\nimport sys\n\nsys.path.insert(0, dirn(dirn((os.path.abspath(__file__)))))\nimport youtube_dl\nfrom youtube_dl.utils import shell_quote\n\nFISH_COMPLETION_FILE = 'youtube-dl.fish'\nFISH_COMPLETION_TEMPLATE = 'devscripts/fish-completion.in'\n\nEXTRA_ARGS = {\n    'recode-video': ['--arguments', 'mp4 flv ogg webm mkv', '--exclusive'],\n\n    # Options that need a file parameter\n    'download-archive': ['--require-parameter'],\n    'cookies': ['--require-parameter'],\n    'load-info': ['--require-parameter'],\n    'batch-file': ['--require-parameter'],\n}\n\n\ndef build_completion(opt_parser):\n    commands = []\n\n    for group in opt_parser.option_groups:\n        for option in group.option_list:\n            long_option = option.get_opt_string().strip('-')\n            complete_cmd = ['complete', '--command', 'youtube-dl', '--long-option', long_option]\n            if option._short_opts:\n                complete_cmd += ['--short-option', option._short_opts[0].strip('-')]\n            if option.help != optparse.SUPPRESS_HELP:\n                complete_cmd += ['--description', option.help]\n            complete_cmd.extend(EXTRA_ARGS.get(long_option, []))\n            commands.append(shell_quote(complete_cmd))\n\n    with open(FISH_COMPLETION_TEMPLATE) as f:\n        template = f.read()\n    filled_template = template.replace('{{commands}}', '\\n'.join(commands))\n    with open(FISH_COMPLETION_FILE, 'w') as f:\n        f.write(filled_template)\n\n\nparser = youtube_dl.parseOpts()[0]\nbuild_completion(parser)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "fish-completion.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/devscripts/fish-completion.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}