{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: atomic_image\nshort_description: Manage the container images on the atomic host platform\ndescription:\n    - Manage the container images on the atomic host platform.\n    - Allows to execute the commands specified by the RUN label in the container image when present.\nversion_added: \"2.2\"\nauthor:\n- Saravanan KR (@krsacme)\nnotes:\n    - Host should support C(atomic) command.\nrequirements:\n  - atomic\n  - python >= 2.6\noptions:\n    backend:\n        description:\n          - Define the backend where the image is pulled.\n        choices: [ docker, ostree ]\n        version_added: \"2.4\"\n    name:\n        description:\n          - Name of the container image.\n        required: True\n    state:\n        description:\n          - The state of the container image.\n          - The state C(latest) will ensure container image is upgraded to the latest version and forcefully restart container, if running.\n        choices: [ absent, latest, present ]\n        default: latest\n    started:\n        description:\n          - Start or Stop the container.\n        type: bool\n        default: 'yes'\n'''\n\nEXAMPLES = '''\n- name: Execute the run command on rsyslog container image (atomic run rhel7/rsyslog)\n  atomic_image:\n    name: rhel7/rsyslog\n    state: latest\n\n- name: Pull busybox to the OSTree backend\n  atomic_image:\n    name: busybox\n    state: latest\n    backend: ostree\n'''\n\nRETURN = '''\nmsg:\n    description: The command standard output\n    returned: always\n    type: string\n    sample: [u'Using default tag: latest ...']\n'''\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\n\n\ndef do_upgrade(module, image):\n    args = ['atomic', 'update', '--force', image]\n    rc, out, err = module.run_command(args, check_rc=False)\n    if rc != 0:  \n        module.fail_json(rc=rc, msg=err)\n    elif 'Image is up to date' in out:\n        return False\n\n    return True\n\n\ndef core(module):\n    image = module.params['name']\n    state = module.params['state']\n    started = module.params['started']\n    backend = module.params['backend']\n    is_upgraded = False\n\n    module.run_command_environ_update = dict(LANG='C', LC_ALL='C', LC_MESSAGES='C')\n    out = {}\n    err = {}\n    rc = 0\n\n    if backend:\n        if state == 'present' or state == 'latest':\n            args = ['atomic', 'pull', \"--storage=%s\" % backend, image]\n            rc, out, err = module.run_command(args, check_rc=False)\n            if rc < 0:\n                module.fail_json(rc=rc, msg=err)\n            else:\n                out_run = \"\"\n                if started:\n                    args = ['atomic', 'run', \"--storage=%s\" % backend, image]\n                    rc, out_run, err = module.run_command(args, check_rc=False)\n                    if rc < 0:\n                        module.fail_json(rc=rc, msg=err)\n\n                changed = \"Extracting\" in out or \"Copying blob\" in out\n                module.exit_json(msg=(out + out_run), changed=changed)\n        elif state == 'absent':\n            args = ['atomic', 'images', 'delete', \"--storage=%s\" % backend, image]\n            if rc < 0:\n                module.fail_json(rc=rc, msg=err)\n            else:\n                changed = \"Unable to find\" not in out\n                module.exit_json(msg=out, changed=changed)\n        return\n\n    if state == 'present' or state == 'latest':\n        if state == 'latest':\n            is_upgraded = do_upgrade(module, image)\n\n        if started:\n            args = ['atomic', 'run', image]\n        else:\n            args = ['atomic', 'install', image]\n    elif state == 'absent':\n        args = ['atomic', 'uninstall', image]\n\n    rc, out, err = module.run_command(args, check_rc=False)\n\n    if rc < 0:\n        module.fail_json(rc=rc, msg=err)\n    elif rc == 1 and 'already present' in err:\n        module.exit_json(restult=err, changed=is_upgraded)\n    elif started and 'Container is running' in out:\n        module.exit_json(result=out, changed=is_upgraded)\n    else:\n        module.exit_json(msg=out, changed=True)\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            backend=dict(type='str', choices=['docker', 'ostree']),\n            name=dict(type='str', required=True),\n            state=dict(type='str', default='latest', choices=['absent', 'latest', 'present']),\n            started=dict(type='bool', default=True),\n        ),\n    )\n\n    \n    rc, out, err = module.run_command('atomic -v', check_rc=False)\n    if rc != 0:\n        module.fail_json(msg=\"Error in running atomic command\", err=err)\n\n    try:\n        core(module)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  atomic image short description  manage container images atomic host platform description        manage container images atomic host platform        allows execute commands specified run label container image present  version added   2 2  author    saravanan kr ( krsacme) notes        host support c(atomic) command  requirements      atomic     python    2 6 options      backend          description              define backend image pulled          choices    docker  ostree           version added   2 4      name          description              name container image          required  true     state          description              the state container image              the state c(latest) ensure container image upgraded latest version forcefully restart container  running          choices    absent  latest  present           default  latest     started          description              start stop container          type  bool         default   yes       examples         name  execute run command rsyslog container image (atomic run rhel7 rsyslog)   atomic image      name  rhel7 rsyslog     state  latest    name  pull busybox ostree backend   atomic image      name  busybox     state  latest     backend  ostree      return       msg      description  the command standard output     returned  always     type  string     sample   u using default tag  latest               usr bin python        coding  utf 8        copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    something went wrong emit msg    verify platform supports atomic command ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: atomic_image\nshort_description: Manage the container images on the atomic host platform\ndescription:\n    - Manage the container images on the atomic host platform.\n    - Allows to execute the commands specified by the RUN label in the container image when present.\nversion_added: \"2.2\"\nauthor:\n- Saravanan KR (@krsacme)\nnotes:\n    - Host should support C(atomic) command.\nrequirements:\n  - atomic\n  - python >= 2.6\noptions:\n    backend:\n        description:\n          - Define the backend where the image is pulled.\n        choices: [ docker, ostree ]\n        version_added: \"2.4\"\n    name:\n        description:\n          - Name of the container image.\n        required: True\n    state:\n        description:\n          - The state of the container image.\n          - The state C(latest) will ensure container image is upgraded to the latest version and forcefully restart container, if running.\n        choices: [ absent, latest, present ]\n        default: latest\n    started:\n        description:\n          - Start or Stop the container.\n        type: bool\n        default: 'yes'\n'''\n\nEXAMPLES = '''\n- name: Execute the run command on rsyslog container image (atomic run rhel7/rsyslog)\n  atomic_image:\n    name: rhel7/rsyslog\n    state: latest\n\n- name: Pull busybox to the OSTree backend\n  atomic_image:\n    name: busybox\n    state: latest\n    backend: ostree\n'''\n\nRETURN = '''\nmsg:\n    description: The command standard output\n    returned: always\n    type: string\n    sample: [u'Using default tag: latest ...']\n'''\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\n\n\ndef do_upgrade(module, image):\n    args = ['atomic', 'update', '--force', image]\n    rc, out, err = module.run_command(args, check_rc=False)\n    if rc != 0:  # something went wrong emit the msg\n        module.fail_json(rc=rc, msg=err)\n    elif 'Image is up to date' in out:\n        return False\n\n    return True\n\n\ndef core(module):\n    image = module.params['name']\n    state = module.params['state']\n    started = module.params['started']\n    backend = module.params['backend']\n    is_upgraded = False\n\n    module.run_command_environ_update = dict(LANG='C', LC_ALL='C', LC_MESSAGES='C')\n    out = {}\n    err = {}\n    rc = 0\n\n    if backend:\n        if state == 'present' or state == 'latest':\n            args = ['atomic', 'pull', \"--storage=%s\" % backend, image]\n            rc, out, err = module.run_command(args, check_rc=False)\n            if rc < 0:\n                module.fail_json(rc=rc, msg=err)\n            else:\n                out_run = \"\"\n                if started:\n                    args = ['atomic', 'run', \"--storage=%s\" % backend, image]\n                    rc, out_run, err = module.run_command(args, check_rc=False)\n                    if rc < 0:\n                        module.fail_json(rc=rc, msg=err)\n\n                changed = \"Extracting\" in out or \"Copying blob\" in out\n                module.exit_json(msg=(out + out_run), changed=changed)\n        elif state == 'absent':\n            args = ['atomic', 'images', 'delete', \"--storage=%s\" % backend, image]\n            if rc < 0:\n                module.fail_json(rc=rc, msg=err)\n            else:\n                changed = \"Unable to find\" not in out\n                module.exit_json(msg=out, changed=changed)\n        return\n\n    if state == 'present' or state == 'latest':\n        if state == 'latest':\n            is_upgraded = do_upgrade(module, image)\n\n        if started:\n            args = ['atomic', 'run', image]\n        else:\n            args = ['atomic', 'install', image]\n    elif state == 'absent':\n        args = ['atomic', 'uninstall', image]\n\n    rc, out, err = module.run_command(args, check_rc=False)\n\n    if rc < 0:\n        module.fail_json(rc=rc, msg=err)\n    elif rc == 1 and 'already present' in err:\n        module.exit_json(restult=err, changed=is_upgraded)\n    elif started and 'Container is running' in out:\n        module.exit_json(result=out, changed=is_upgraded)\n    else:\n        module.exit_json(msg=out, changed=True)\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            backend=dict(type='str', choices=['docker', 'ostree']),\n            name=dict(type='str', required=True),\n            state=dict(type='str', default='latest', choices=['absent', 'latest', 'present']),\n            started=dict(type='bool', default=True),\n        ),\n    )\n\n    # Verify that the platform supports atomic command\n    rc, out, err = module.run_command('atomic -v', check_rc=False)\n    if rc != 0:\n        module.fail_json(msg=\"Error in running atomic command\", err=err)\n\n    try:\n        core(module)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "atomic_image.py", "id": "f690e71e46c04e5d47f25987cf30e6d5", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/atomic/atomic_image.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}