{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n)\n\n\nclass AolIE(InfoExtractor):\n    IE_NAME = 'on.aol.com'\n    _VALID_URL = r'(?:aol-video:|https?://(?:(?:www|on)\\.)?aol\\.com/(?:[^/]+/)*(?:[^/?\n\n    _TESTS = [{\n        \n        'url': 'http://on.aol.com/video/u-s--official-warns-of-largest-ever-irs-phone-scam-518167793?icid=OnHomepageC2Wide_MustSee_Img',\n        'md5': '18ef68f48740e86ae94b98da815eec42',\n        'info_dict': {\n            'id': '518167793',\n            'ext': 'mp4',\n            'title': 'U.S. Official Warns Of \\'Largest Ever\\' IRS Phone Scam',\n            'description': 'A major phone scam has cost thousands of taxpayers more than $1 million, with less than a month until income tax returns are due to the IRS.',\n            'timestamp': 1395405060,\n            'upload_date': '20140321',\n            'uploader': 'Newsy Studio',\n        },\n        'params': {\n            \n            'skip_download': True,\n        }\n    }, {\n        \n        'url': 'http://www.aol.com/video/view/netflix-is-raising-rates/5707d6b8e4b090497b04f706/',\n        'info_dict': {\n            'id': '5707d6b8e4b090497b04f706',\n            'ext': 'mp4',\n            'title': 'Netflix is Raising Rates',\n            'description': 'Netflix is rewarding millions of it\u2019s long-standing members with an increase in cost. Veuer\u2019s Carly Figueroa has more.',\n            'upload_date': '20160408',\n            'timestamp': 1460123280,\n            'uploader': 'Veuer',\n        },\n        'params': {\n            \n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://on.aol.com/partners/abc-551438d309eab105804dbfe8/sneak-peek-was-haley-really-framed-570eaebee4b0448640a5c944',\n        'only_matching': True,\n    }, {\n        'url': 'http://on.aol.com/shows/park-bench-shw518173474-559a1b9be4b0c3bfad3357a7?context=SH:SHW518173474:PL4327:1460619712763',\n        'only_matching': True,\n    }, {\n        'url': 'http://on.aol.com/video/519442220',\n        'only_matching': True,\n    }, {\n        'url': 'aol-video:5707d6b8e4b090497b04f706',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        response = self._download_json(\n            'https://feedapi.b2c.on.aol.com/v1.0/app/videos/aolon/%s/details' % video_id,\n            video_id)['response']\n        if response['statusText'] != 'Ok':\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, response['statusText']), expected=True)\n\n        video_data = response['data']\n        formats = []\n        m3u8_url = video_data.get('videoMasterPlaylist')\n        if m3u8_url:\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', m3u8_id='hls', fatal=False))\n        for rendition in video_data.get('renditions', []):\n            video_url = rendition.get('url')\n            if not video_url:\n                continue\n            ext = rendition.get('format')\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', m3u8_id='hls', fatal=False))\n            else:\n                f = {\n                    'url': video_url,\n                    'format_id': rendition.get('quality'),\n                }\n                mobj = re.search(r'(\\d+)x(\\d+)', video_url)\n                if mobj:\n                    f.update({\n                        'width': int(mobj.group(1)),\n                        'height': int(mobj.group(2)),\n                    })\n                formats.append(f)\n        self._sort_formats(formats, ('width', 'height', 'tbr', 'format_id'))\n\n        return {\n            'id': video_id,\n            'title': video_data['title'],\n            'duration': int_or_none(video_data.get('duration')),\n            'timestamp': int_or_none(video_data.get('publishDate')),\n            'view_count': int_or_none(video_data.get('views')),\n            'description': video_data.get('description'),\n            'uploader': video_data.get('videoOwner'),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#&]+-)?)(?P<id>[^/?#&]+)'\n# video with 5min ID\n# m3u8 download\n# video with vidible ID\n# m3u8 download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n)\n\n\nclass AolIE(InfoExtractor):\n    IE_NAME = 'on.aol.com'\n    _VALID_URL = r'(?:aol-video:|https?://(?:(?:www|on)\\.)?aol\\.com/(?:[^/]+/)*(?:[^/?#&]+-)?)(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        # video with 5min ID\n        'url': 'http://on.aol.com/video/u-s--official-warns-of-largest-ever-irs-phone-scam-518167793?icid=OnHomepageC2Wide_MustSee_Img',\n        'md5': '18ef68f48740e86ae94b98da815eec42',\n        'info_dict': {\n            'id': '518167793',\n            'ext': 'mp4',\n            'title': 'U.S. Official Warns Of \\'Largest Ever\\' IRS Phone Scam',\n            'description': 'A major phone scam has cost thousands of taxpayers more than $1 million, with less than a month until income tax returns are due to the IRS.',\n            'timestamp': 1395405060,\n            'upload_date': '20140321',\n            'uploader': 'Newsy Studio',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        }\n    }, {\n        # video with vidible ID\n        'url': 'http://www.aol.com/video/view/netflix-is-raising-rates/5707d6b8e4b090497b04f706/',\n        'info_dict': {\n            'id': '5707d6b8e4b090497b04f706',\n            'ext': 'mp4',\n            'title': 'Netflix is Raising Rates',\n            'description': 'Netflix is rewarding millions of it\u2019s long-standing members with an increase in cost. Veuer\u2019s Carly Figueroa has more.',\n            'upload_date': '20160408',\n            'timestamp': 1460123280,\n            'uploader': 'Veuer',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://on.aol.com/partners/abc-551438d309eab105804dbfe8/sneak-peek-was-haley-really-framed-570eaebee4b0448640a5c944',\n        'only_matching': True,\n    }, {\n        'url': 'http://on.aol.com/shows/park-bench-shw518173474-559a1b9be4b0c3bfad3357a7?context=SH:SHW518173474:PL4327:1460619712763',\n        'only_matching': True,\n    }, {\n        'url': 'http://on.aol.com/video/519442220',\n        'only_matching': True,\n    }, {\n        'url': 'aol-video:5707d6b8e4b090497b04f706',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        response = self._download_json(\n            'https://feedapi.b2c.on.aol.com/v1.0/app/videos/aolon/%s/details' % video_id,\n            video_id)['response']\n        if response['statusText'] != 'Ok':\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, response['statusText']), expected=True)\n\n        video_data = response['data']\n        formats = []\n        m3u8_url = video_data.get('videoMasterPlaylist')\n        if m3u8_url:\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', m3u8_id='hls', fatal=False))\n        for rendition in video_data.get('renditions', []):\n            video_url = rendition.get('url')\n            if not video_url:\n                continue\n            ext = rendition.get('format')\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', m3u8_id='hls', fatal=False))\n            else:\n                f = {\n                    'url': video_url,\n                    'format_id': rendition.get('quality'),\n                }\n                mobj = re.search(r'(\\d+)x(\\d+)', video_url)\n                if mobj:\n                    f.update({\n                        'width': int(mobj.group(1)),\n                        'height': int(mobj.group(2)),\n                    })\n                formats.append(f)\n        self._sort_formats(formats, ('width', 'height', 'tbr', 'format_id'))\n\n        return {\n            'id': video_id,\n            'title': video_data['title'],\n            'duration': int_or_none(video_data.get('duration')),\n            'timestamp': int_or_none(video_data.get('publishDate')),\n            'view_count': int_or_none(video_data.get('views')),\n            'description': video_data.get('description'),\n            'uploader': video_data.get('videoOwner'),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "aol.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/aol.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}