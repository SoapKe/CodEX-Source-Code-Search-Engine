{"author": "eliangcs", "code": "\"\"\"Functions that transform a Context object to a different representation.\"\"\"\n\nimport json\n\nimport six\n\nfrom http_prompt.utils import smart_quote\n\n\ndef _noop(s):\n    return s\n\n\ndef _extract_httpie_options(context, quote=False, join_key_value=False,\n                            excluded_keys=None):\n    if quote:\n        quote_func = smart_quote\n    else:\n        quote_func = _noop\n\n    if join_key_value:\n        def form_new_opts(k, v): return [k + '=' + v]\n    else:\n        def form_new_opts(k, v): return [k, v]\n\n    excluded_keys = excluded_keys or []\n\n    opts = []\n    for k, v in sorted(six.iteritems(context.options)):\n        if k not in excluded_keys:\n            if v is not None:\n                v = quote_func(v)\n                new_opts = form_new_opts(k, v)\n            else:\n                new_opts = [k]\n            opts += new_opts\n    return opts\n\n\ndef _extract_httpie_request_items(context, quote=False):\n    if quote:\n        quote_func = smart_quote\n    else:\n        quote_func = _noop\n\n    items = []\n    operators_and_items = [\n        # (separator, dict_of_request_items)\n        ('==', context.querystring_params),\n        (':=', context.body_json_params),\n        ('=', context.body_params),\n        (':', context.headers)\n    ]\n    for sep, item_dict in operators_and_items:\n        for k, value in sorted(six.iteritems(item_dict)):\n            if sep == ':=':\n                json_str = json.dumps(value,\n                                      sort_keys=True).replace(\"'\", \"\\\\'\")\n                if isinstance(value, six.string_types) and quote:\n                    json_str = \"'\" + json_str + \"'\"\n                item = quote_func('%s:=%s' % (k, json_str))\n                items.append(item)\n            elif isinstance(value, (list, tuple)):\n                for v in value:\n                    item = quote_func('%s%s%s' % (k, sep, v))\n                    items.append(item)\n            else:\n                item = quote_func('%s%s%s' % (k, sep, value))\n                items.append(item)\n    return items\n\n\ndef extract_args_for_httpie_main(context, method=None):\n    \"\"\"Transform a Context object to a list of arguments that can be passed to\n    HTTPie main function.\n    \"\"\"\n    args = _extract_httpie_options(context)\n\n    if method:\n        args.append(method.upper())\n\n    args.append(context.url)\n    args += _extract_httpie_request_items(context)\n    return args\n\n\ndef format_to_curl(context, method=None):\n    \"\"\"Format a Context object to a cURL command.\"\"\"\n    raise NotImplementedError(\"curl format is not supported yet\")\n\n\ndef format_to_raw(context, method=None):\n    \"\"\"Format a Context object to HTTP raw text.\"\"\"\n    raise NotImplementedError(\"raw format is not supported yet\")\n\n\ndef format_to_httpie(context, method=None):\n    \"\"\"Format a Context object to an HTTPie command.\"\"\"\n    cmd = ['http'] + _extract_httpie_options(context, quote=True,\n                                             join_key_value=True)\n    if method:\n        cmd.append(method.upper())\n    cmd.append(context.url)\n    cmd += _extract_httpie_request_items(context, quote=True)\n    return ' '.join(cmd) + '\\n'\n\n\ndef format_to_http_prompt(context, excluded_options=None):\n    \"\"\"Format a Context object to HTTP Prompt commands.\"\"\"\n    cmds = _extract_httpie_options(context, quote=True, join_key_value=True,\n                                   excluded_keys=excluded_options)\n    cmds.append('cd ' + smart_quote(context.url))\n    cmds += _extract_httpie_request_items(context, quote=True)\n    return '\\n'.join(cmds) + '\\n'\n", "comments": "   functions transform context object different representation      import json  import six  http prompt utils import smart quote   def  noop(s)      return   def  extract httpie options(context  quote false  join key value false                              excluded keys none)      quote          quote func   smart quote     else          quote func    noop      join key value          def form new opts(k  v)  return  k         v      else          def form new opts(k  v)  return  k  v       excluded keys   excluded keys         opts          k  v sorted(six iteritems(context options))          k excluded keys              v none                  v   quote func(v)                 new opts   form new opts(k  v)             else                  new opts    k              opts    new opts     return opts   def  extract httpie request items(context  quote false)      quote          quote func   smart quote     else          quote func    noop      items          operators items               (separator  dict request items)         (      context querystring params)          (      context body json params)          (     context body params)          (     context headers)           sep  item dict operators items          k  value sorted(six iteritems(item dict))              sep                          json str   json dumps(value                                        sort keys true) replace(          )                 isinstance(value  six string types) quote                      json str         json str                       item   quote func(       (k  json str))                 items append(item)             elif isinstance(value  (list  tuple))                  v value                      item   quote func(     (k  sep  v))                     items append(item)             else                  item   quote func(     (k  sep  value))                 items append(item)     return items   def extract args httpie main(context  method none)         transform context object list arguments passed     httpie main function              args    extract httpie options(context)      method          args append(method upper())      args append(context url)     args     extract httpie request items(context)     return args   def format curl(context  method none)         format context object curl command         raise notimplementederror( curl format supported yet )   def format raw(context  method none)         format context object http raw text         raise notimplementederror( raw format supported yet )   def format httpie(context  method none)         format context object httpie command         cmd     http      extract httpie options(context  quote true                                               join key value true)     method          cmd append(method upper())     cmd append(context url)     cmd     extract httpie request items(context  quote true)     return     join(cmd)     n    def format http prompt(context  excluded options none)         format context object http prompt commands        (separator  dict request items) ", "content": "\"\"\"Functions that transform a Context object to a different representation.\"\"\"\n\nimport json\n\nimport six\n\nfrom http_prompt.utils import smart_quote\n\n\ndef _noop(s):\n    return s\n\n\ndef _extract_httpie_options(context, quote=False, join_key_value=False,\n                            excluded_keys=None):\n    if quote:\n        quote_func = smart_quote\n    else:\n        quote_func = _noop\n\n    if join_key_value:\n        def form_new_opts(k, v): return [k + '=' + v]\n    else:\n        def form_new_opts(k, v): return [k, v]\n\n    excluded_keys = excluded_keys or []\n\n    opts = []\n    for k, v in sorted(six.iteritems(context.options)):\n        if k not in excluded_keys:\n            if v is not None:\n                v = quote_func(v)\n                new_opts = form_new_opts(k, v)\n            else:\n                new_opts = [k]\n            opts += new_opts\n    return opts\n\n\ndef _extract_httpie_request_items(context, quote=False):\n    if quote:\n        quote_func = smart_quote\n    else:\n        quote_func = _noop\n\n    items = []\n    operators_and_items = [\n        # (separator, dict_of_request_items)\n        ('==', context.querystring_params),\n        (':=', context.body_json_params),\n        ('=', context.body_params),\n        (':', context.headers)\n    ]\n    for sep, item_dict in operators_and_items:\n        for k, value in sorted(six.iteritems(item_dict)):\n            if sep == ':=':\n                json_str = json.dumps(value,\n                                      sort_keys=True).replace(\"'\", \"\\\\'\")\n                if isinstance(value, six.string_types) and quote:\n                    json_str = \"'\" + json_str + \"'\"\n                item = quote_func('%s:=%s' % (k, json_str))\n                items.append(item)\n            elif isinstance(value, (list, tuple)):\n                for v in value:\n                    item = quote_func('%s%s%s' % (k, sep, v))\n                    items.append(item)\n            else:\n                item = quote_func('%s%s%s' % (k, sep, value))\n                items.append(item)\n    return items\n\n\ndef extract_args_for_httpie_main(context, method=None):\n    \"\"\"Transform a Context object to a list of arguments that can be passed to\n    HTTPie main function.\n    \"\"\"\n    args = _extract_httpie_options(context)\n\n    if method:\n        args.append(method.upper())\n\n    args.append(context.url)\n    args += _extract_httpie_request_items(context)\n    return args\n\n\ndef format_to_curl(context, method=None):\n    \"\"\"Format a Context object to a cURL command.\"\"\"\n    raise NotImplementedError(\"curl format is not supported yet\")\n\n\ndef format_to_raw(context, method=None):\n    \"\"\"Format a Context object to HTTP raw text.\"\"\"\n    raise NotImplementedError(\"raw format is not supported yet\")\n\n\ndef format_to_httpie(context, method=None):\n    \"\"\"Format a Context object to an HTTPie command.\"\"\"\n    cmd = ['http'] + _extract_httpie_options(context, quote=True,\n                                             join_key_value=True)\n    if method:\n        cmd.append(method.upper())\n    cmd.append(context.url)\n    cmd += _extract_httpie_request_items(context, quote=True)\n    return ' '.join(cmd) + '\\n'\n\n\ndef format_to_http_prompt(context, excluded_options=None):\n    \"\"\"Format a Context object to HTTP Prompt commands.\"\"\"\n    cmds = _extract_httpie_options(context, quote=True, join_key_value=True,\n                                   excluded_keys=excluded_options)\n    cmds.append('cd ' + smart_quote(context.url))\n    cmds += _extract_httpie_request_items(context, quote=True)\n    return '\\n'.join(cmds) + '\\n'\n", "description": "HTTPie + prompt_toolkit = an interactive command-line HTTP client featuring autocomplete and syntax highlighting", "file_name": "transform.py", "id": "f8bf8475a951c93204b10ff383bac196", "language": "Python", "project_name": "http-prompt", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/eliangcs-http-prompt/eliangcs-http-prompt-87f1e9d/http_prompt/context/transform.py", "save_time": "", "source": "", "update_at": "2018-03-17T18:26:33Z", "url": "https://github.com/eliangcs/http-prompt", "wiki": true}