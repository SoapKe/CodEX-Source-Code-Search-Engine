{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none\n)\n\n\nclass RUTVIE(InfoExtractor):\n    IE_DESC = 'RUTV.RU'\n    _VALID_URL = r\n\n    _TESTS = [\n        {\n            'url': 'http://player.rutv.ru/flash2v/container.swf?id=774471&sid=kultura&fbv=true&isPlay=true&ssl=false&i=560&acc_video_id=episode_id/972347/video_id/978186/brand_id/31724',\n            'info_dict': {\n                'id': '774471',\n                'ext': 'mp4',\n                'title': '\u041c\u043e\u043d\u043e\u043b\u043e\u0433\u0438 \u043d\u0430 \u0432\u0441\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0430',\n                'description': 'md5:18d8b5e6a41fb1faa53819471852d5d5',\n                'duration': 2906,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://player.vgtrk.com/flash2v/container.swf?id=774016&sid=russiatv&fbv=true&isPlay=true&ssl=false&i=560&acc_video_id=episode_id/972098/video_id/977760/brand_id/57638',\n            'info_dict': {\n                'id': '774016',\n                'ext': 'mp4',\n                'title': '\u0427\u0443\u0436\u043e\u0439 \u0432 \u0441\u0435\u043c\u044c\u0435 \u0421\u0442\u0430\u043b\u0438\u043d\u0430',\n                'description': '',\n                'duration': 2539,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://player.rutv.ru/iframe/swf/id/766888/sid/hitech/?acc_video_id=4000',\n            'info_dict': {\n                'id': '766888',\n                'ext': 'mp4',\n                'title': '\u0412\u0435\u0441\u0442\u0438.net: \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u0433\u0438\u0433\u0430\u043d\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0438 \u043f\u0435\u0440\u0435\u0442\u044f\u0433\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0445 \"\u043e\u0434\u0435\u044f\u043b\"',\n                'description': 'md5:65ddd47f9830c4f42ed6475f8730c995',\n                'duration': 279,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://player.rutv.ru/iframe/video/id/771852/start_zoom/true/showZoomBtn/false/sid/russiatv/?acc_video_id=episode_id/970443/video_id/975648/brand_id/5169',\n            'info_dict': {\n                'id': '771852',\n                'ext': 'mp4',\n                'title': '\u041f\u0440\u044f\u043c\u043e\u0439 \u044d\u0444\u0438\u0440. \u0416\u0435\u0440\u0442\u0432\u044b \u0437\u0430\u0433\u0430\u0434\u043e\u0447\u043d\u043e\u0439 \u0431\u043e\u043b\u0435\u0437\u043d\u0438: \u0441\u043c\u0435\u0440\u0442\u044c \u043e\u0442 \u0441\u0442\u0430\u0440\u043e\u0441\u0442\u0438 \u0432 17 \u043b\u0435\u0442',\n                'description': 'md5:b81c8c55247a4bd996b43ce17395b2d8',\n                'duration': 3096,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://player.rutv.ru/iframe/live/id/51499/showZoomBtn/false/isPlay/true/sid/sochi2014',\n            'info_dict': {\n                'id': '51499',\n                'ext': 'flv',\n                'title': '\u0421\u043e\u0447\u0438-2014. \u0411\u0438\u0430\u0442\u043b\u043e\u043d. \u0418\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0433\u043e\u043d\u043a\u0430. \u041c\u0443\u0436\u0447\u0438\u043d\u044b ',\n                'description': 'md5:9e0ed5c9d2fa1efbfdfed90c9a6d179c',\n            },\n            'skip': 'Translation has finished',\n        },\n        {\n            'url': 'http://player.rutv.ru/iframe/live/id/21/showZoomBtn/false/isPlay/true/',\n            'info_dict': {\n                'id': '21',\n                'ext': 'mp4',\n                'title': 're:^\u0420\u043e\u0441\u0441\u0438\u044f 24. \u041f\u0440\u044f\u043c\u043e\u0439 \u044d\u0444\u0438\u0440 [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n                'is_live': True,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://testplayer.vgtrk.com/iframe/live/id/19201/showZoomBtn/false/isPlay/true/',\n            'only_matching': True,\n        },\n    ]\n\n    @classmethod\n    def _extract_url(cls, webpage):\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://(?:test)?player\\.(?:rutv\\.ru|vgtrk\\.com)/(?:iframe/(?:swf|video|live)/id|index/iframe/cast_id)/.+?)\\1', webpage)\n        if mobj:\n            return mobj.group('url')\n\n        mobj = re.search(\n            r'<meta[^>]+?property=([\"\\'])og:video\\1[^>]+?content=([\"\\'])(?P<url>https?://(?:test)?player\\.(?:rutv\\.ru|vgtrk\\.com)/flash\\d+v/container\\.swf\\?id=.+?\\2)',\n            webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        video_path = mobj.group('path')\n\n        if re.match(r'flash\\d+v', video_path):\n            video_type = 'video'\n        elif video_path.startswith('iframe'):\n            video_type = mobj.group('type')\n            if video_type == 'swf':\n                video_type = 'video'\n        elif video_path.startswith('index/iframe/cast_id'):\n            video_type = 'live'\n\n        is_live = video_type == 'live'\n\n        json_data = self._download_json(\n            'http://player.rutv.ru/iframe/data%s/id/%s' % ('live' if is_live else 'video', video_id),\n            video_id, 'Downloading JSON')\n\n        if json_data['errors']:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, json_data['errors']), expected=True)\n\n        playlist = json_data['data']['playlist']\n        medialist = playlist['medialist']\n        media = medialist[0]\n\n        if media['errors']:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, media['errors']), expected=True)\n\n        view_count = playlist.get('count_views')\n        priority_transport = playlist['priority_transport']\n\n        thumbnail = media['picture']\n        width = int_or_none(media['width'])\n        height = int_or_none(media['height'])\n        description = media['anons']\n        title = media['title']\n        duration = int_or_none(media.get('duration'))\n\n        formats = []\n\n        for transport, links in media['sources'].items():\n            for quality, url in links.items():\n                preference = -1 if priority_transport == transport else -2\n                if transport == 'rtmp':\n                    mobj = re.search(r'^(?P<url>rtmp://[^/]+/(?P<app>.+))/(?P<playpath>.+)$', url)\n                    if not mobj:\n                        continue\n                    fmt = {\n                        'url': mobj.group('url'),\n                        'play_path': mobj.group('playpath'),\n                        'app': mobj.group('app'),\n                        'page_url': 'http://player.rutv.ru',\n                        'player_url': 'http://player.rutv.ru/flash3v/osmf.swf?i=22',\n                        'rtmp_live': True,\n                        'ext': 'flv',\n                        'vbr': int(quality),\n                        'preference': preference,\n                    }\n                elif transport == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        url, video_id, 'mp4', preference=preference, m3u8_id='hls'))\n                    continue\n                else:\n                    fmt = {\n                        'url': url\n                    }\n                fmt.update({\n                    'width': width,\n                    'height': height,\n                    'format_id': '%s-%s' % (transport, quality),\n                })\n                formats.append(fmt)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._live_title(title) if is_live else title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'view_count': view_count,\n            'duration': duration,\n            'formats': formats,\n            'is_live': is_live,\n        }\n", "comments": "(?x)\n                    https?://\n                        (?:test)?player\\.(?:rutv\\.ru|vgtrk\\.com)/\n                        (?P<path>\n                            flash\\d+v/container\\.swf\\?id=|\n                            iframe/(?P<type>swf|video|live)/id/|\n                            index/iframe/cast_id/\n                        )\n                        (?P<id>\\d+)\n                    \n \n# coding: utf-8\n# m3u8 download\n# m3u8 download\n# m3u8 download\n# m3u8 download\n# m3u8 download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none\n)\n\n\nclass RUTVIE(InfoExtractor):\n    IE_DESC = 'RUTV.RU'\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:test)?player\\.(?:rutv\\.ru|vgtrk\\.com)/\n                        (?P<path>\n                            flash\\d+v/container\\.swf\\?id=|\n                            iframe/(?P<type>swf|video|live)/id/|\n                            index/iframe/cast_id/\n                        )\n                        (?P<id>\\d+)\n                    '''\n\n    _TESTS = [\n        {\n            'url': 'http://player.rutv.ru/flash2v/container.swf?id=774471&sid=kultura&fbv=true&isPlay=true&ssl=false&i=560&acc_video_id=episode_id/972347/video_id/978186/brand_id/31724',\n            'info_dict': {\n                'id': '774471',\n                'ext': 'mp4',\n                'title': '\u041c\u043e\u043d\u043e\u043b\u043e\u0433\u0438 \u043d\u0430 \u0432\u0441\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0430',\n                'description': 'md5:18d8b5e6a41fb1faa53819471852d5d5',\n                'duration': 2906,\n            },\n            'params': {\n                # m3u8 download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://player.vgtrk.com/flash2v/container.swf?id=774016&sid=russiatv&fbv=true&isPlay=true&ssl=false&i=560&acc_video_id=episode_id/972098/video_id/977760/brand_id/57638',\n            'info_dict': {\n                'id': '774016',\n                'ext': 'mp4',\n                'title': '\u0427\u0443\u0436\u043e\u0439 \u0432 \u0441\u0435\u043c\u044c\u0435 \u0421\u0442\u0430\u043b\u0438\u043d\u0430',\n                'description': '',\n                'duration': 2539,\n            },\n            'params': {\n                # m3u8 download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://player.rutv.ru/iframe/swf/id/766888/sid/hitech/?acc_video_id=4000',\n            'info_dict': {\n                'id': '766888',\n                'ext': 'mp4',\n                'title': '\u0412\u0435\u0441\u0442\u0438.net: \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u0433\u0438\u0433\u0430\u043d\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0438 \u043f\u0435\u0440\u0435\u0442\u044f\u0433\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0445 \"\u043e\u0434\u0435\u044f\u043b\"',\n                'description': 'md5:65ddd47f9830c4f42ed6475f8730c995',\n                'duration': 279,\n            },\n            'params': {\n                # m3u8 download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://player.rutv.ru/iframe/video/id/771852/start_zoom/true/showZoomBtn/false/sid/russiatv/?acc_video_id=episode_id/970443/video_id/975648/brand_id/5169',\n            'info_dict': {\n                'id': '771852',\n                'ext': 'mp4',\n                'title': '\u041f\u0440\u044f\u043c\u043e\u0439 \u044d\u0444\u0438\u0440. \u0416\u0435\u0440\u0442\u0432\u044b \u0437\u0430\u0433\u0430\u0434\u043e\u0447\u043d\u043e\u0439 \u0431\u043e\u043b\u0435\u0437\u043d\u0438: \u0441\u043c\u0435\u0440\u0442\u044c \u043e\u0442 \u0441\u0442\u0430\u0440\u043e\u0441\u0442\u0438 \u0432 17 \u043b\u0435\u0442',\n                'description': 'md5:b81c8c55247a4bd996b43ce17395b2d8',\n                'duration': 3096,\n            },\n            'params': {\n                # m3u8 download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://player.rutv.ru/iframe/live/id/51499/showZoomBtn/false/isPlay/true/sid/sochi2014',\n            'info_dict': {\n                'id': '51499',\n                'ext': 'flv',\n                'title': '\u0421\u043e\u0447\u0438-2014. \u0411\u0438\u0430\u0442\u043b\u043e\u043d. \u0418\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0433\u043e\u043d\u043a\u0430. \u041c\u0443\u0436\u0447\u0438\u043d\u044b ',\n                'description': 'md5:9e0ed5c9d2fa1efbfdfed90c9a6d179c',\n            },\n            'skip': 'Translation has finished',\n        },\n        {\n            'url': 'http://player.rutv.ru/iframe/live/id/21/showZoomBtn/false/isPlay/true/',\n            'info_dict': {\n                'id': '21',\n                'ext': 'mp4',\n                'title': 're:^\u0420\u043e\u0441\u0441\u0438\u044f 24. \u041f\u0440\u044f\u043c\u043e\u0439 \u044d\u0444\u0438\u0440 [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n                'is_live': True,\n            },\n            'params': {\n                # m3u8 download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://testplayer.vgtrk.com/iframe/live/id/19201/showZoomBtn/false/isPlay/true/',\n            'only_matching': True,\n        },\n    ]\n\n    @classmethod\n    def _extract_url(cls, webpage):\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://(?:test)?player\\.(?:rutv\\.ru|vgtrk\\.com)/(?:iframe/(?:swf|video|live)/id|index/iframe/cast_id)/.+?)\\1', webpage)\n        if mobj:\n            return mobj.group('url')\n\n        mobj = re.search(\n            r'<meta[^>]+?property=([\"\\'])og:video\\1[^>]+?content=([\"\\'])(?P<url>https?://(?:test)?player\\.(?:rutv\\.ru|vgtrk\\.com)/flash\\d+v/container\\.swf\\?id=.+?\\2)',\n            webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        video_path = mobj.group('path')\n\n        if re.match(r'flash\\d+v', video_path):\n            video_type = 'video'\n        elif video_path.startswith('iframe'):\n            video_type = mobj.group('type')\n            if video_type == 'swf':\n                video_type = 'video'\n        elif video_path.startswith('index/iframe/cast_id'):\n            video_type = 'live'\n\n        is_live = video_type == 'live'\n\n        json_data = self._download_json(\n            'http://player.rutv.ru/iframe/data%s/id/%s' % ('live' if is_live else 'video', video_id),\n            video_id, 'Downloading JSON')\n\n        if json_data['errors']:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, json_data['errors']), expected=True)\n\n        playlist = json_data['data']['playlist']\n        medialist = playlist['medialist']\n        media = medialist[0]\n\n        if media['errors']:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, media['errors']), expected=True)\n\n        view_count = playlist.get('count_views')\n        priority_transport = playlist['priority_transport']\n\n        thumbnail = media['picture']\n        width = int_or_none(media['width'])\n        height = int_or_none(media['height'])\n        description = media['anons']\n        title = media['title']\n        duration = int_or_none(media.get('duration'))\n\n        formats = []\n\n        for transport, links in media['sources'].items():\n            for quality, url in links.items():\n                preference = -1 if priority_transport == transport else -2\n                if transport == 'rtmp':\n                    mobj = re.search(r'^(?P<url>rtmp://[^/]+/(?P<app>.+))/(?P<playpath>.+)$', url)\n                    if not mobj:\n                        continue\n                    fmt = {\n                        'url': mobj.group('url'),\n                        'play_path': mobj.group('playpath'),\n                        'app': mobj.group('app'),\n                        'page_url': 'http://player.rutv.ru',\n                        'player_url': 'http://player.rutv.ru/flash3v/osmf.swf?i=22',\n                        'rtmp_live': True,\n                        'ext': 'flv',\n                        'vbr': int(quality),\n                        'preference': preference,\n                    }\n                elif transport == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        url, video_id, 'mp4', preference=preference, m3u8_id='hls'))\n                    continue\n                else:\n                    fmt = {\n                        'url': url\n                    }\n                fmt.update({\n                    'width': width,\n                    'height': height,\n                    'format_id': '%s-%s' % (transport, quality),\n                })\n                formats.append(fmt)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._live_title(title) if is_live else title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'view_count': view_count,\n            'duration': duration,\n            'formats': formats,\n            'is_live': is_live,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "rutv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/rutv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}