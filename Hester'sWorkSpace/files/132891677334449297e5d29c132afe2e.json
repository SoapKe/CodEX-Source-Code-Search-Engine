{"author": "ansible", "code": "# Copyright: (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\n\nfrom ast import literal_eval\nfrom jinja2 import Template\nfrom string import ascii_letters, digits\n\nfrom ansible.module_utils._text import to_text\nfrom ansible.module_utils.parsing.convert_bool import boolean, BOOLEANS_TRUE\nfrom ansible.module_utils.six import string_types\nfrom ansible.config.manager import ConfigManager, ensure_type, get_ini_config_value\n\n\ndef _deprecated(msg, version='2.8'):\n    ''' display is not guaranteed here, nor it being the full class, but try anyways, fallback to sys.stderr.write '''\n    try:\n        from __main__ import display\n        display.deprecated(msg, version=version)\n    except:\n        import sys\n        sys.stderr.write('[DEPRECATED] %s, to be removed in %s' % (msg, version))\n\n\ndef mk_boolean(value):\n    ''' moved to module_utils'''\n    _deprecated('ansible.constants.mk_boolean() is deprecated.  Use ansible.module_utils.parsing.convert_bool.boolean() instead')\n    return boolean(value, strict=False)\n\n\ndef get_config(parser, section, key, env_var, default_value, value_type=None, expand_relative_paths=False):\n    ''' kept for backwarsd compatibility, but deprecated '''\n    _deprecated('ansible.constants.get_config() is deprecated. There is new config API, see porting docs.')\n\n    value = None\n    \n    value = os.environ.get(env_var, None)\n    if value is None:\n        try:\n            value = get_ini_config_value(parser, {'key': key, 'section': section})\n        except:\n            pass\n    if value is None:\n        value = default_value\n\n    value = ensure_type(value, value_type)\n\n    return value\n\n\ndef set_constant(name, value, export=vars()):\n    ''' sets constants and returns resolved options dict '''\n    export[name] = value\n\n\n\nBECOME_METHODS = ['sudo', 'su', 'pbrun', 'pfexec', 'doas', 'dzdo', 'ksu', 'runas', 'pmrun', 'enable']\nBECOME_ERROR_STRINGS = {\n    'sudo': 'Sorry, try again.',\n    'su': 'Authentication failure',\n    'pbrun': '',\n    'pfexec': '',\n    'doas': 'Permission denied',\n    'dzdo': '',\n    'ksu': 'Password incorrect',\n    'pmrun': 'You are not permitted to run this command',\n    'enable': '',\n}  \nBECOME_MISSING_STRINGS = {\n    'sudo': 'sorry, a password is required to run sudo',\n    'su': '',\n    'pbrun': '',\n    'pfexec': '',\n    'doas': 'Authorization required',\n    'dzdo': '',\n    'ksu': 'No password given',\n    'pmrun': '',\n    'enable': '',\n}  \nBLACKLIST_EXTS = ('.pyc', '.pyo', '.swp', '.bak', '~', '.rpm', '.md', '.txt')\nBOOL_TRUE = BOOLEANS_TRUE\nCONTROLER_LANG = os.getenv('LANG', 'en_US.UTF-8')\nDEFAULT_BECOME_PASS = None\nDEFAULT_PASSWORD_CHARS = to_text(ascii_letters + digits + \".,:-_\", errors='strict')  \nDEFAULT_SUDO_PASS = None\nDEFAULT_REMOTE_PASS = None\nDEFAULT_SUBSET = None\nDEFAULT_SU_PASS = None\nIGNORE_FILES = (\"COPYING\", \"CONTRIBUTING\", \"LICENSE\", \"README\", \"VERSION\", \"GUIDELINES\")  \nINTERNAL_RESULT_KEYS = ('add_host', 'add_group')\nLOCALHOST = ('127.0.0.1', 'localhost', '::1')\nMODULE_REQUIRE_ARGS = ('command', 'win_command', 'shell', 'win_shell', 'raw', 'script')\nMODULE_NO_JSON = ('command', 'win_command', 'shell', 'win_shell', 'raw')\nRESTRICTED_RESULT_KEYS = ('ansible_rsync_path', 'ansible_playbook_python')\nTREE_DIR = None\nVAULT_VERSION_MIN = 1.0\nVAULT_VERSION_MAX = 1.0\n\n\n\n\n\n\n\nMAGIC_VARIABLE_MAPPING = dict(\n\n    \n    connection=('ansible_connection', ),\n    module_compression=('ansible_module_compression', ),\n    shell=('ansible_shell_type', ),\n    executable=('ansible_shell_executable', ),\n\n    \n    remote_addr=('ansible_ssh_host', 'ansible_host'),\n    remote_user=('ansible_ssh_user', 'ansible_user'),\n    password=('ansible_ssh_pass', 'ansible_password'),\n    port=('ansible_ssh_port', 'ansible_port'),\n    pipelining=('ansible_ssh_pipelining', 'ansible_pipelining'),\n    timeout=('ansible_ssh_timeout', 'ansible_timeout'),\n    private_key_file=('ansible_ssh_private_key_file', 'ansible_private_key_file'),\n\n    \n    network_os=('ansible_network_os', ),\n    connection_user=('ansible_connection_user',),\n\n    \n    ssh_executable=('ansible_ssh_executable', ),\n    ssh_common_args=('ansible_ssh_common_args', ),\n    sftp_extra_args=('ansible_sftp_extra_args', ),\n    scp_extra_args=('ansible_scp_extra_args', ),\n    ssh_extra_args=('ansible_ssh_extra_args', ),\n    ssh_transfer_method=('ansible_ssh_transfer_method', ),\n\n    \n    docker_extra_args=('ansible_docker_extra_args', ),\n\n    \n    become=('ansible_become', ),\n    become_method=('ansible_become_method', ),\n    become_user=('ansible_become_user', ),\n    become_pass=('ansible_become_password', 'ansible_become_pass'),\n    become_exe=('ansible_become_exe', ),\n    become_flags=('ansible_become_flags', ),\n\n    \n    sudo=('ansible_sudo', ),\n    sudo_user=('ansible_sudo_user', ),\n    sudo_pass=('ansible_sudo_password', 'ansible_sudo_pass'),\n    sudo_exe=('ansible_sudo_exe', ),\n    sudo_flags=('ansible_sudo_flags', ),\n    su=('ansible_su', ),\n    su_user=('ansible_su_user', ),\n    su_pass=('ansible_su_password', 'ansible_su_pass'),\n    su_exe=('ansible_su_exe', ),\n    su_flags=('ansible_su_flags', ),\n)\n\n\nconfig = ConfigManager()\n\n\nfor setting in config.data.get_settings():\n\n    value = setting.value\n    if setting.origin == 'default' and \\\n       isinstance(setting.value, string_types) and \\\n       (setting.value.startswith('{{') and setting.value.endswith('}}')):\n        try:\n            t = Template(setting.value)\n            value = t.render(vars())\n            try:\n                value = literal_eval(value)\n            except ValueError:\n                pass  \n        except:\n            pass  \n        value = ensure_type(value, setting.name)\n\n    set_constant(setting.name, value)\n", "comments": "    display guaranteed  full class  try anyways  fallback sys stderr write         try            main   import display         display deprecated(msg  version version)     except          import sys         sys stderr write(  deprecated    removed     (msg  version))   def mk boolean(value)          moved module utils         deprecated( ansible constants mk boolean() deprecated   use ansible module utils parsing convert bool boolean() instead )     return boolean(value  strict false)   def get config(parser  section  key  env var  default value  value type none  expand relative paths false)          kept backwarsd compatibility  deprecated          deprecated( ansible constants get config() deprecated  there new config api  see porting docs  )      value   none       small reconstruction old code env ini default     value   os environ get(env var  none)     value none          try              value   get ini config value(parser    key   key   section   section )         except              pass     value none          value   default value      value   ensure type(value  value type)      return value   def set constant(name  value  export vars())          sets constants returns resolved options dict        copyright  (c) 2012 2014  michael dehaan  michael dehaan gmail com     copyright  (c) 2017  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    small reconstruction old code env ini default    constants     yes  actual ones    fixme  deal i18n    fixme  deal i18n    characters included auto generated passwords    ignore module search    fixme  remove play context mangling removed    magic variable mapping dictionary used translate    host inventory variables fields playcontext    object  the dictionary values tuples  account aliases    variable names     base    connection common    networking modules    ssh todo  remove    docker todo  remove    become    deprecated    populate settings from config        generate constants config    python data structure    templatable ", "content": "# Copyright: (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\n\nfrom ast import literal_eval\nfrom jinja2 import Template\nfrom string import ascii_letters, digits\n\nfrom ansible.module_utils._text import to_text\nfrom ansible.module_utils.parsing.convert_bool import boolean, BOOLEANS_TRUE\nfrom ansible.module_utils.six import string_types\nfrom ansible.config.manager import ConfigManager, ensure_type, get_ini_config_value\n\n\ndef _deprecated(msg, version='2.8'):\n    ''' display is not guaranteed here, nor it being the full class, but try anyways, fallback to sys.stderr.write '''\n    try:\n        from __main__ import display\n        display.deprecated(msg, version=version)\n    except:\n        import sys\n        sys.stderr.write('[DEPRECATED] %s, to be removed in %s' % (msg, version))\n\n\ndef mk_boolean(value):\n    ''' moved to module_utils'''\n    _deprecated('ansible.constants.mk_boolean() is deprecated.  Use ansible.module_utils.parsing.convert_bool.boolean() instead')\n    return boolean(value, strict=False)\n\n\ndef get_config(parser, section, key, env_var, default_value, value_type=None, expand_relative_paths=False):\n    ''' kept for backwarsd compatibility, but deprecated '''\n    _deprecated('ansible.constants.get_config() is deprecated. There is new config API, see porting docs.')\n\n    value = None\n    # small reconstruction of the old code env/ini/default\n    value = os.environ.get(env_var, None)\n    if value is None:\n        try:\n            value = get_ini_config_value(parser, {'key': key, 'section': section})\n        except:\n            pass\n    if value is None:\n        value = default_value\n\n    value = ensure_type(value, value_type)\n\n    return value\n\n\ndef set_constant(name, value, export=vars()):\n    ''' sets constants and returns resolved options dict '''\n    export[name] = value\n\n\n# CONSTANTS ### yes, actual ones\nBECOME_METHODS = ['sudo', 'su', 'pbrun', 'pfexec', 'doas', 'dzdo', 'ksu', 'runas', 'pmrun', 'enable']\nBECOME_ERROR_STRINGS = {\n    'sudo': 'Sorry, try again.',\n    'su': 'Authentication failure',\n    'pbrun': '',\n    'pfexec': '',\n    'doas': 'Permission denied',\n    'dzdo': '',\n    'ksu': 'Password incorrect',\n    'pmrun': 'You are not permitted to run this command',\n    'enable': '',\n}  # FIXME: deal with i18n\nBECOME_MISSING_STRINGS = {\n    'sudo': 'sorry, a password is required to run sudo',\n    'su': '',\n    'pbrun': '',\n    'pfexec': '',\n    'doas': 'Authorization required',\n    'dzdo': '',\n    'ksu': 'No password given',\n    'pmrun': '',\n    'enable': '',\n}  # FIXME: deal with i18n\nBLACKLIST_EXTS = ('.pyc', '.pyo', '.swp', '.bak', '~', '.rpm', '.md', '.txt')\nBOOL_TRUE = BOOLEANS_TRUE\nCONTROLER_LANG = os.getenv('LANG', 'en_US.UTF-8')\nDEFAULT_BECOME_PASS = None\nDEFAULT_PASSWORD_CHARS = to_text(ascii_letters + digits + \".,:-_\", errors='strict')  # characters included in auto-generated passwords\nDEFAULT_SUDO_PASS = None\nDEFAULT_REMOTE_PASS = None\nDEFAULT_SUBSET = None\nDEFAULT_SU_PASS = None\nIGNORE_FILES = (\"COPYING\", \"CONTRIBUTING\", \"LICENSE\", \"README\", \"VERSION\", \"GUIDELINES\")  # ignore during module search\nINTERNAL_RESULT_KEYS = ('add_host', 'add_group')\nLOCALHOST = ('127.0.0.1', 'localhost', '::1')\nMODULE_REQUIRE_ARGS = ('command', 'win_command', 'shell', 'win_shell', 'raw', 'script')\nMODULE_NO_JSON = ('command', 'win_command', 'shell', 'win_shell', 'raw')\nRESTRICTED_RESULT_KEYS = ('ansible_rsync_path', 'ansible_playbook_python')\nTREE_DIR = None\nVAULT_VERSION_MIN = 1.0\nVAULT_VERSION_MAX = 1.0\n\n# FIXME: remove once play_context mangling is removed\n# the magic variable mapping dictionary below is used to translate\n# host/inventory variables to fields in the PlayContext\n# object. The dictionary values are tuples, to account for aliases\n# in variable names.\n\nMAGIC_VARIABLE_MAPPING = dict(\n\n    # base\n    connection=('ansible_connection', ),\n    module_compression=('ansible_module_compression', ),\n    shell=('ansible_shell_type', ),\n    executable=('ansible_shell_executable', ),\n\n    # connection common\n    remote_addr=('ansible_ssh_host', 'ansible_host'),\n    remote_user=('ansible_ssh_user', 'ansible_user'),\n    password=('ansible_ssh_pass', 'ansible_password'),\n    port=('ansible_ssh_port', 'ansible_port'),\n    pipelining=('ansible_ssh_pipelining', 'ansible_pipelining'),\n    timeout=('ansible_ssh_timeout', 'ansible_timeout'),\n    private_key_file=('ansible_ssh_private_key_file', 'ansible_private_key_file'),\n\n    # networking modules\n    network_os=('ansible_network_os', ),\n    connection_user=('ansible_connection_user',),\n\n    # ssh TODO: remove\n    ssh_executable=('ansible_ssh_executable', ),\n    ssh_common_args=('ansible_ssh_common_args', ),\n    sftp_extra_args=('ansible_sftp_extra_args', ),\n    scp_extra_args=('ansible_scp_extra_args', ),\n    ssh_extra_args=('ansible_ssh_extra_args', ),\n    ssh_transfer_method=('ansible_ssh_transfer_method', ),\n\n    # docker TODO: remove\n    docker_extra_args=('ansible_docker_extra_args', ),\n\n    # become\n    become=('ansible_become', ),\n    become_method=('ansible_become_method', ),\n    become_user=('ansible_become_user', ),\n    become_pass=('ansible_become_password', 'ansible_become_pass'),\n    become_exe=('ansible_become_exe', ),\n    become_flags=('ansible_become_flags', ),\n\n    # deprecated\n    sudo=('ansible_sudo', ),\n    sudo_user=('ansible_sudo_user', ),\n    sudo_pass=('ansible_sudo_password', 'ansible_sudo_pass'),\n    sudo_exe=('ansible_sudo_exe', ),\n    sudo_flags=('ansible_sudo_flags', ),\n    su=('ansible_su', ),\n    su_user=('ansible_su_user', ),\n    su_pass=('ansible_su_password', 'ansible_su_pass'),\n    su_exe=('ansible_su_exe', ),\n    su_flags=('ansible_su_flags', ),\n)\n\n# POPULATE SETTINGS FROM CONFIG ###\nconfig = ConfigManager()\n\n# Generate constants from config\nfor setting in config.data.get_settings():\n\n    value = setting.value\n    if setting.origin == 'default' and \\\n       isinstance(setting.value, string_types) and \\\n       (setting.value.startswith('{{') and setting.value.endswith('}}')):\n        try:\n            t = Template(setting.value)\n            value = t.render(vars())\n            try:\n                value = literal_eval(value)\n            except ValueError:\n                pass  # not a python data structure\n        except:\n            pass  # not templatable\n        value = ensure_type(value, setting.name)\n\n    set_constant(setting.name, value)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "constants.py", "id": "132891677334449297e5d29c132afe2e", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/constants.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}