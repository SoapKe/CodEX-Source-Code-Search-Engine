{"author": "tgalal", "code": "import time\n\nfrom yowsup.structs import ProtocolEntity, ProtocolTreeNode\nfrom .receipt import ReceiptProtocolEntity\nclass OutgoingReceiptProtocolEntity(ReceiptProtocolEntity):\n\n    \n\n\n    def __init__(self, messageIds, to, read = False, participant = None, callId = None):\n        if type(messageIds) in (list, tuple):\n            if len(messageIds) > 1:\n                receiptId = self._generateId()\n            else:\n                receiptId = messageIds[0]\n        else:\n            receiptId = messageIds\n            messageIds = [messageIds]\n\n        super(OutgoingReceiptProtocolEntity, self).__init__(receiptId)\n        self.setOutgoingData(messageIds, to, read, participant, callId)\n\n    def setOutgoingData(self, messageIds, to, read, participant, callId):\n        self.messageIds = messageIds\n        self.to = to\n        self.read = read\n        self.participant = participant\n        self.callId = callId\n\n    def getMessageIds(self):\n        return self.messageIds\n\n    def toProtocolTreeNode(self):\n        node = super(OutgoingReceiptProtocolEntity, self).toProtocolTreeNode()\n        if self.read:\n            node.setAttribute(\"type\", \"read\")\n        if self.participant:\n            node.setAttribute(\"participant\", self.participant)\n        if self.callId:\n            offer = ProtocolTreeNode(\"offer\", {\"call-id\": self.callId})\n            node.addChild(offer)\n\n        node.setAttribute(\"to\", self.to)\n\n        if len(self.messageIds) > 1:\n            listNode = ProtocolTreeNode(\"list\")\n            listNode.addChildren([ProtocolTreeNode(\"item\", {\"id\": mId}) for mId in self.messageIds])\n            node.addChild(listNode)\n\n        return node\n\n    def __str__(self):\n        out = super(OutgoingReceiptProtocolEntity, self).__str__()\n        out  += \"To: \\n%s\" % self.to\n        if self.read:\n            out += \"Type: \\n%s\" % \"read\"\n        out += \"For: \\n%s\" % self.messageIds\n        return out\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        listNode = node.getChild(\"list\")\n        messageIds = []\n        if listNode:\n            messageIds = [child[\"id\"] for child in listNode.getChildren()]\n        else:\n            messageIds = [node[\"id\"]]\n\n        return OutgoingReceiptProtocolEntity(\n            messageIds,\n            node[\"to\"],\n            node[\"type\"] == \"read\",\n            node[\"participant\"]\n            )\n", "comments": "        delivered      if send following without   specified  whatsapp consider message delivered      notify sender       receipt  xxxxxxxxxxx whatsapp net  id  1415389947 15    receipt       read      receipt  xxxxxxxxxxx whatsapp net  id  1415389947 15  type  read    receipt       multiple items       receipt type  read   xxxxxxxxxxxx whatsapp net  id  1431364583 191            list               item id  1431364572 189    item               item id  1431364575 190    item            list        receipt          ", "content": "import time\n\nfrom yowsup.structs import ProtocolEntity, ProtocolTreeNode\nfrom .receipt import ReceiptProtocolEntity\nclass OutgoingReceiptProtocolEntity(ReceiptProtocolEntity):\n\n    '''\n    delivered:\n    If we send the following without \"to\" specified, whatsapp will consider the message delivered,\n    but will not notify the sender.\n    <receipt to=\"xxxxxxxxxxx@s.whatsapp.net\" id=\"1415389947-15\"></receipt>\n\n    read\n    <receipt to=\"xxxxxxxxxxx@s.whatsapp.net\" id=\"1415389947-15\" type=\"read\"></receipt>\n\n    multiple items:\n    <receipt type=\"read\" to=\"xxxxxxxxxxxx@s.whatsapp.net\" id=\"1431364583-191\">\n        <list>\n            <item id=\"1431364572-189\"></item>\n            <item id=\"1431364575-190\"></item>\n        </list>\n    </receipt>\n    '''\n\n\n    def __init__(self, messageIds, to, read = False, participant = None, callId = None):\n        if type(messageIds) in (list, tuple):\n            if len(messageIds) > 1:\n                receiptId = self._generateId()\n            else:\n                receiptId = messageIds[0]\n        else:\n            receiptId = messageIds\n            messageIds = [messageIds]\n\n        super(OutgoingReceiptProtocolEntity, self).__init__(receiptId)\n        self.setOutgoingData(messageIds, to, read, participant, callId)\n\n    def setOutgoingData(self, messageIds, to, read, participant, callId):\n        self.messageIds = messageIds\n        self.to = to\n        self.read = read\n        self.participant = participant\n        self.callId = callId\n\n    def getMessageIds(self):\n        return self.messageIds\n\n    def toProtocolTreeNode(self):\n        node = super(OutgoingReceiptProtocolEntity, self).toProtocolTreeNode()\n        if self.read:\n            node.setAttribute(\"type\", \"read\")\n        if self.participant:\n            node.setAttribute(\"participant\", self.participant)\n        if self.callId:\n            offer = ProtocolTreeNode(\"offer\", {\"call-id\": self.callId})\n            node.addChild(offer)\n\n        node.setAttribute(\"to\", self.to)\n\n        if len(self.messageIds) > 1:\n            listNode = ProtocolTreeNode(\"list\")\n            listNode.addChildren([ProtocolTreeNode(\"item\", {\"id\": mId}) for mId in self.messageIds])\n            node.addChild(listNode)\n\n        return node\n\n    def __str__(self):\n        out = super(OutgoingReceiptProtocolEntity, self).__str__()\n        out  += \"To: \\n%s\" % self.to\n        if self.read:\n            out += \"Type: \\n%s\" % \"read\"\n        out += \"For: \\n%s\" % self.messageIds\n        return out\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        listNode = node.getChild(\"list\")\n        messageIds = []\n        if listNode:\n            messageIds = [child[\"id\"] for child in listNode.getChildren()]\n        else:\n            messageIds = [node[\"id\"]]\n\n        return OutgoingReceiptProtocolEntity(\n            messageIds,\n            node[\"to\"],\n            node[\"type\"] == \"read\",\n            node[\"participant\"]\n            )\n", "description": "The python WhatsApp library", "file_name": "receipt_outgoing.py", "id": "14784e733009d5597b5cdbb2f7ae1fb1", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_receipts/protocolentities/receipt_outgoing.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}