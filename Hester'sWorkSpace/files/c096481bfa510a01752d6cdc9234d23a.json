{"author": "keon", "code": "\n\n\n\n\n# Water can only flow in four directions (up, down, left, or right)\n\n\n\n\n\n\n\n\n\n\n\n\n  \n       # ~  1   2   2   3  (5) *\n       # ~  3   2   3  (4) (4) *\n       # ~  2   4  (5)  3   1  *\n       # ~ (6) (7)  1   4   5  *\n       # ~ (5)  1   1   2   4  *\n          # *   *   *   *   * Atlantic\n\n\n\n# [[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]]\n# (positions with parentheses in above matrix).\n\ndef pacific_atlantic(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    n = len(matrix)\n    if not n: return []\n    m = len(matrix[0])\n    if not m: return []\n    res = []\n    atlantic = [[False for _ in range (n)] for _ in range(m)]\n    pacific =  [[False for _ in range (n)] for _ in range(m)]\n    for i in range(n):\n        DFS(pacific, matrix, float(\"-inf\"), i, 0)\n        DFS(atlantic, matrix, float(\"-inf\"), i, m-1)\n    for i in range(m):\n        DFS(pacific, matrix, float(\"-inf\"), 0, i)\n        DFS(atlantic, matrix, float(\"-inf\"), n-1, i)\n    for i in range(n):\n        for j in range(m):\n            if pacific[i][j] and atlantic[i][j]:\n                res.append([i, j])\n    return res\n\ndef DFS(grid, matrix, height, i, j):\n    if i < 0 or i >= len(matrix) or j < 0 or  j >= len(matrix[0]):\n        return\n    if grid[i][j] or matrix[i][j] < height:\n        return\n    grid[i][j] = True\n    DFS(grid, matrix, matrix[i][j], i-1, j)\n    DFS(grid, matrix, matrix[i][j], i+1, j)\n    DFS(grid, matrix, matrix[i][j], i, j-1)\n    DFS(grid, matrix, matrix[i][j], i, j+1)\n", "comments": "         type matrix  list list int        rtype  list list int              given x n matrix non negative integers representing    height unit cell continent      pacific ocean  touches left top edges matrix     atlantic ocean  touches right bottom edges     water flow four directions (up   left  right)    cell another one height equal lower     find list grid coordinates water flow    pacific atlantic ocean     note     the order returned grid coordinates matter     both n less 150     example     given following 5x5 matrix     pacific                         1   2   2   3  (5)         3   2   3  (4) (4)         2   4  (5)  3   1         (6) (7)  1   4   5         (5)  1   1   2   4                         atlantic    return       0  4    1  3    1  4    2  2    3  0    3  1    4  0      (positions parentheses matrix)  ", "content": "# Given an m x n matrix of non-negative integers representing\n# the height of each unit cell in a continent,\n# the \"Pacific ocean\" touches the left and top edges of the matrix\n# and the \"Atlantic ocean\" touches the right and bottom edges.\n\n# Water can only flow in four directions (up, down, left, or right)\n# from a cell to another one with height equal or lower.\n\n# Find the list of grid coordinates where water can flow to both the\n# Pacific and Atlantic ocean.\n\n# Note:\n# The order of returned grid coordinates does not matter.\n# Both m and n are less than 150.\n# Example:\n\n# Given the following 5x5 matrix:\n\n  # Pacific ~   ~   ~   ~   ~\n       # ~  1   2   2   3  (5) *\n       # ~  3   2   3  (4) (4) *\n       # ~  2   4  (5)  3   1  *\n       # ~ (6) (7)  1   4   5  *\n       # ~ (5)  1   1   2   4  *\n          # *   *   *   *   * Atlantic\n\n# Return:\n\n# [[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]]\n# (positions with parentheses in above matrix).\n\ndef pacific_atlantic(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    n = len(matrix)\n    if not n: return []\n    m = len(matrix[0])\n    if not m: return []\n    res = []\n    atlantic = [[False for _ in range (n)] for _ in range(m)]\n    pacific =  [[False for _ in range (n)] for _ in range(m)]\n    for i in range(n):\n        DFS(pacific, matrix, float(\"-inf\"), i, 0)\n        DFS(atlantic, matrix, float(\"-inf\"), i, m-1)\n    for i in range(m):\n        DFS(pacific, matrix, float(\"-inf\"), 0, i)\n        DFS(atlantic, matrix, float(\"-inf\"), n-1, i)\n    for i in range(n):\n        for j in range(m):\n            if pacific[i][j] and atlantic[i][j]:\n                res.append([i, j])\n    return res\n\ndef DFS(grid, matrix, height, i, j):\n    if i < 0 or i >= len(matrix) or j < 0 or  j >= len(matrix[0]):\n        return\n    if grid[i][j] or matrix[i][j] < height:\n        return\n    grid[i][j] = True\n    DFS(grid, matrix, matrix[i][j], i-1, j)\n    DFS(grid, matrix, matrix[i][j], i+1, j)\n    DFS(grid, matrix, matrix[i][j], i, j-1)\n    DFS(grid, matrix, matrix[i][j], i, j+1)\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "pacific_atlantic.py", "id": "c096481bfa510a01752d6cdc9234d23a", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/keon-algorithms/keon-algorithms-ea43887/dfs/pacific_atlantic.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:53:29Z", "url": "https://github.com/keon/algorithms", "wiki": true}