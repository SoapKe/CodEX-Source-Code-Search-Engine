{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom .pladform import PladformIE\nfrom ..utils import (\n    unescapeHTML,\n    int_or_none,\n    ExtractorError,\n)\n\n\nclass METAIE(InfoExtractor):\n    _VALID_URL = r'https?://video\\.meta\\.ua/(?:iframe/)?(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://video.meta.ua/5502115.video',\n        'md5': '71b6f3ee274bef16f1ab410f7f56b476',\n        'info_dict': {\n            'id': '5502115',\n            'ext': 'mp4',\n            'title': 'Sony Xperia Z camera test [HQ]',\n            'description': 'Xperia Z shoots video in FullHD HDR.',\n            'uploader_id': 'nomobile',\n            'uploader': 'CH\u0401ZA.TV',\n            'upload_date': '20130211',\n        },\n        'add_ie': ['Youtube'],\n    }, {\n        'url': 'http://video.meta.ua/iframe/5502115',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://video.meta.ua/7121015.video',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        st_html5 = self._search_regex(\n            r\"st_html5\\s*=\\s*'\n\n        if st_html5:\n            \n            json_str = ''\n            for i in range(0, len(st_html5), 3):\n                json_str += '&\n            uppod_data = self._parse_json(unescapeHTML(json_str), video_id)\n            error = uppod_data.get('customnotfound')\n            if error:\n                raise ExtractorError('%s said: %s' % (self.IE_NAME, error), expected=True)\n\n            video_url = uppod_data['file']\n            info = {\n                'id': video_id,\n                'url': video_url,\n                'title': uppod_data.get('comment') or self._og_search_title(webpage),\n                'description': self._og_search_description(webpage, default=None),\n                'thumbnail': uppod_data.get('poster') or self._og_search_thumbnail(webpage),\n                'duration': int_or_none(self._og_search_property(\n                    'video:duration', webpage, default=None)),\n            }\n            if 'youtube.com/' in video_url:\n                info.update({\n                    '_type': 'url_transparent',\n                    'ie_key': 'Youtube',\n                })\n            return info\n\n        pladform_url = PladformIE._extract_url(webpage)\n        if pladform_url:\n            return self.url_result(pladform_url)\n", "comments": "# coding: utf-8\n# pladform embed\n#([^']+)'\", webpage, 'uppod html5 st', default=None)\n# uppod st decryption algorithm is reverse engineered from function un(s) at uppod.js\n#x0%s;' % st_html5[i:i + 3]\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom .pladform import PladformIE\nfrom ..utils import (\n    unescapeHTML,\n    int_or_none,\n    ExtractorError,\n)\n\n\nclass METAIE(InfoExtractor):\n    _VALID_URL = r'https?://video\\.meta\\.ua/(?:iframe/)?(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://video.meta.ua/5502115.video',\n        'md5': '71b6f3ee274bef16f1ab410f7f56b476',\n        'info_dict': {\n            'id': '5502115',\n            'ext': 'mp4',\n            'title': 'Sony Xperia Z camera test [HQ]',\n            'description': 'Xperia Z shoots video in FullHD HDR.',\n            'uploader_id': 'nomobile',\n            'uploader': 'CH\u0401ZA.TV',\n            'upload_date': '20130211',\n        },\n        'add_ie': ['Youtube'],\n    }, {\n        'url': 'http://video.meta.ua/iframe/5502115',\n        'only_matching': True,\n    }, {\n        # pladform embed\n        'url': 'http://video.meta.ua/7121015.video',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        st_html5 = self._search_regex(\n            r\"st_html5\\s*=\\s*'#([^']+)'\", webpage, 'uppod html5 st', default=None)\n\n        if st_html5:\n            # uppod st decryption algorithm is reverse engineered from function un(s) at uppod.js\n            json_str = ''\n            for i in range(0, len(st_html5), 3):\n                json_str += '&#x0%s;' % st_html5[i:i + 3]\n            uppod_data = self._parse_json(unescapeHTML(json_str), video_id)\n            error = uppod_data.get('customnotfound')\n            if error:\n                raise ExtractorError('%s said: %s' % (self.IE_NAME, error), expected=True)\n\n            video_url = uppod_data['file']\n            info = {\n                'id': video_id,\n                'url': video_url,\n                'title': uppod_data.get('comment') or self._og_search_title(webpage),\n                'description': self._og_search_description(webpage, default=None),\n                'thumbnail': uppod_data.get('poster') or self._og_search_thumbnail(webpage),\n                'duration': int_or_none(self._og_search_property(\n                    'video:duration', webpage, default=None)),\n            }\n            if 'youtube.com/' in video_url:\n                info.update({\n                    '_type': 'url_transparent',\n                    'ie_key': 'Youtube',\n                })\n            return info\n\n        pladform_url = PladformIE._extract_url(webpage)\n        if pladform_url:\n            return self.url_result(pladform_url)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "meta.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/meta.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}