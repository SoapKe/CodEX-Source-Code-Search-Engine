{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import tools\nfrom odoo.tests import common\nfrom odoo.modules.module import get_resource_path\n\n\nclass TestAccountAsset(common.TransactionCase):\n\n    def _load(self, module, *args):\n        tools.convert_file(self.cr, 'account_asset',\n                           get_resource_path(module, *args),\n                           {}, 'init', False, 'test', self.registry._assertion_report)\n\n    def test_00_account_asset_asset(self):\n        self._load('account', 'test', 'account_minimal_test.xml')\n        self._load('account_asset', 'test', 'account_asset_demo_test.xml')\n\n        \n        self.browse_ref(\"account_asset.account_asset_asset_vehicles_test0\").validate()\n\n        \n        self.assertEqual(self.browse_ref(\"account_asset.account_asset_asset_vehicles_test0\").state, 'open',\n            'Asset should be in Open state')\n\n        \n        self.browse_ref(\"account_asset.account_asset_asset_vehicles_test0\").compute_depreciation_board()\n        value = self.browse_ref(\"account_asset.account_asset_asset_vehicles_test0\")\n        self.assertEqual(value.method_number, len(value.depreciation_line_ids),\n            'Depreciation lines not created correctly')\n\n        \n        ids = self.env['account.asset.depreciation.line'].search([('asset_id', '=', self.ref('account_asset.account_asset_asset_vehicles_test0'))])\n        for line in ids:\n            line.create_move()\n\n        \n        asset = self.env['account.asset.asset'].browse([self.ref(\"account_asset.account_asset_asset_vehicles_test0\")])[0]\n        self.assertEqual(len(asset.depreciation_line_ids), asset.entry_count,\n            'Move lines not created correctly')\n\n        \n        self.assertEqual(self.browse_ref(\"account_asset.account_asset_asset_vehicles_test0\").state, 'close',\n            'State of asset should be close')\n\n        \n        \n        account_asset_asset_office0 = self.browse_ref('account_asset.account_asset_asset_office_test0')\n        asset_modify_number_0 = self.env['asset.modify'].create({\n            'name': 'Test reason',\n            'method_number': 10.0,\n        }).with_context({'active_id': account_asset_asset_office0.id})\n        \n        asset_modify_number_0.with_context({'active_id': account_asset_asset_office0.id}).modify()\n\n        \n        self.assertEqual(account_asset_asset_office0.method_number, len(account_asset_asset_office0.depreciation_line_ids))\n        \n        context = {\n            \"active_ids\": [self.ref(\"account_asset.menu_asset_depreciation_confirmation_wizard\")],\n            \"active_id\": self.ref('account_asset.menu_asset_depreciation_confirmation_wizard'),\n            'type': 'sale'\n        }\n        asset_compute_period_0 = self.env['asset.depreciation.confirmation.wizard'].create({})\n        asset_compute_period_0.with_context(context).asset_compute()\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     in order test process account asset  i perform action confirm account asset     i check asset open state     i compute depreciation lines asset ceos car     i create account move depreciation lines     i check move line created     i check after creating moves depreciation lines state  close      wizard    i create record change duration asset calculating depreciation     i change duration     i check proper depreciation lines created     i compute asset period  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import tools\nfrom odoo.tests import common\nfrom odoo.modules.module import get_resource_path\n\n\nclass TestAccountAsset(common.TransactionCase):\n\n    def _load(self, module, *args):\n        tools.convert_file(self.cr, 'account_asset',\n                           get_resource_path(module, *args),\n                           {}, 'init', False, 'test', self.registry._assertion_report)\n\n    def test_00_account_asset_asset(self):\n        self._load('account', 'test', 'account_minimal_test.xml')\n        self._load('account_asset', 'test', 'account_asset_demo_test.xml')\n\n        # In order to test the process of Account Asset, I perform a action to confirm Account Asset.\n        self.browse_ref(\"account_asset.account_asset_asset_vehicles_test0\").validate()\n\n        # I check Asset is now in Open state.\n        self.assertEqual(self.browse_ref(\"account_asset.account_asset_asset_vehicles_test0\").state, 'open',\n            'Asset should be in Open state')\n\n        # I compute depreciation lines for asset of CEOs Car.\n        self.browse_ref(\"account_asset.account_asset_asset_vehicles_test0\").compute_depreciation_board()\n        value = self.browse_ref(\"account_asset.account_asset_asset_vehicles_test0\")\n        self.assertEqual(value.method_number, len(value.depreciation_line_ids),\n            'Depreciation lines not created correctly')\n\n        # I create account move for all depreciation lines.\n        ids = self.env['account.asset.depreciation.line'].search([('asset_id', '=', self.ref('account_asset.account_asset_asset_vehicles_test0'))])\n        for line in ids:\n            line.create_move()\n\n        # I check the move line is created.\n        asset = self.env['account.asset.asset'].browse([self.ref(\"account_asset.account_asset_asset_vehicles_test0\")])[0]\n        self.assertEqual(len(asset.depreciation_line_ids), asset.entry_count,\n            'Move lines not created correctly')\n\n        # I Check that After creating all the moves of depreciation lines the state \"Close\".\n        self.assertEqual(self.browse_ref(\"account_asset.account_asset_asset_vehicles_test0\").state, 'close',\n            'State of asset should be close')\n\n        # WIZARD\n        # I create a record to change the duration of asset for calculating depreciation.\n        account_asset_asset_office0 = self.browse_ref('account_asset.account_asset_asset_office_test0')\n        asset_modify_number_0 = self.env['asset.modify'].create({\n            'name': 'Test reason',\n            'method_number': 10.0,\n        }).with_context({'active_id': account_asset_asset_office0.id})\n        # I change the duration.\n        asset_modify_number_0.with_context({'active_id': account_asset_asset_office0.id}).modify()\n\n        # I check the proper depreciation lines created.\n        self.assertEqual(account_asset_asset_office0.method_number, len(account_asset_asset_office0.depreciation_line_ids))\n        # I compute a asset on period.\n        context = {\n            \"active_ids\": [self.ref(\"account_asset.menu_asset_depreciation_confirmation_wizard\")],\n            \"active_id\": self.ref('account_asset.menu_asset_depreciation_confirmation_wizard'),\n            'type': 'sale'\n        }\n        asset_compute_period_0 = self.env['asset.depreciation.confirmation.wizard'].create({})\n        asset_compute_period_0.with_context(context).asset_compute()\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_account_asset.py", "id": "e5325634427fd7c0698102b7b0a4f9e1", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account_asset/tests/test_account_asset.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}