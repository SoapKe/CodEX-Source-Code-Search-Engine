{"author": "rushter", "code": "try:\n    from sklearn.model_selection import train_test_split\nexcept ImportError:\n    from sklearn.cross_validation import train_test_split\nfrom sklearn.datasets import make_regression\n\nfrom mla.knn import KNNRegressor\nfrom mla.linear_models import LinearRegression\nfrom mla.metrics.metrics import mean_squared_error\nfrom mla.neuralnet import NeuralNet\nfrom mla.neuralnet.layers import Activation, Dense\nfrom mla.neuralnet.optimizers import Adam\nfrom mla.neuralnet.parameters import Parameters\n\n\n\nX, y = make_regression(n_samples=1000, n_features=10,\n                       n_informative=10, n_targets=1, noise=0.05,\n                       random_state=1111, bias=0.5)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,\n                                                    random_state=1111)\n\n\ndef test_linear():\n    model = LinearRegression(lr=0.01, max_iters=2000, penalty='l2', C=0.03)\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    assert mean_squared_error(y_test, predictions) < 0.25\n\n\ndef test_mlp():\n    model = NeuralNet(\n        layers=[\n            Dense(16, Parameters(init='normal')),\n            Activation('linear'),\n            Dense(8, Parameters(init='normal')),\n            Activation('linear'),\n            Dense(1),\n        ],\n        loss='mse',\n        optimizer=Adam(),\n        metric='mse',\n        batch_size=64,\n        max_epochs=150,\n    )\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    assert mean_squared_error(y_test, predictions.flatten()) < 1.0\n\n\ndef test_knn():\n    model = KNNRegressor(k=5)\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    assert mean_squared_error(y_test, predictions) < 10000\n", "comments": "  generate random regression problem ", "content": "try:\n    from sklearn.model_selection import train_test_split\nexcept ImportError:\n    from sklearn.cross_validation import train_test_split\nfrom sklearn.datasets import make_regression\n\nfrom mla.knn import KNNRegressor\nfrom mla.linear_models import LinearRegression\nfrom mla.metrics.metrics import mean_squared_error\nfrom mla.neuralnet import NeuralNet\nfrom mla.neuralnet.layers import Activation, Dense\nfrom mla.neuralnet.optimizers import Adam\nfrom mla.neuralnet.parameters import Parameters\n\n\n# Generate a random regression problem\nX, y = make_regression(n_samples=1000, n_features=10,\n                       n_informative=10, n_targets=1, noise=0.05,\n                       random_state=1111, bias=0.5)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,\n                                                    random_state=1111)\n\n\ndef test_linear():\n    model = LinearRegression(lr=0.01, max_iters=2000, penalty='l2', C=0.03)\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    assert mean_squared_error(y_test, predictions) < 0.25\n\n\ndef test_mlp():\n    model = NeuralNet(\n        layers=[\n            Dense(16, Parameters(init='normal')),\n            Activation('linear'),\n            Dense(8, Parameters(init='normal')),\n            Activation('linear'),\n            Dense(1),\n        ],\n        loss='mse',\n        optimizer=Adam(),\n        metric='mse',\n        batch_size=64,\n        max_epochs=150,\n    )\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    assert mean_squared_error(y_test, predictions.flatten()) < 1.0\n\n\ndef test_knn():\n    model = KNNRegressor(k=5)\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    assert mean_squared_error(y_test, predictions) < 10000\n", "description": "Minimal and clean examples of machine learning algorithms", "file_name": "test_regression_accuracy.py", "id": "bea9e2dc6e8141521bb6c1e21dec8317", "language": "Python", "project_name": "MLAlgorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rushter-MLAlgorithms/rushter-MLAlgorithms-d398777/mla/tests/test_regression_accuracy.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:25:48Z", "url": "https://github.com/rushter/MLAlgorithms", "wiki": false}