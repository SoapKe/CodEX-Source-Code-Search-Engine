{"author": "localstack", "code": "import logging\nimport traceback\nfrom localstack.config import PORT_KINESIS, DATA_DIR\nfrom localstack.constants import DEFAULT_PORT_KINESIS_BACKEND\nfrom localstack.utils.aws import aws_stack\nfrom localstack.utils.common import mkdir\nfrom localstack.services import install\nfrom localstack.services.infra import get_service_protocol, start_proxy_for_service, do_run\nfrom localstack.services.install import ROOT_PATH\n\nLOGGER = logging.getLogger(__name__)\n\n\ndef start_kinesis(port=PORT_KINESIS, async=False, shard_limit=100, update_listener=None):\n    install.install_kinesalite()\n    backend_port = DEFAULT_PORT_KINESIS_BACKEND\n    kinesis_data_dir_param = ''\n    if DATA_DIR:\n        kinesis_data_dir = '%s/kinesis' % DATA_DIR\n        mkdir(kinesis_data_dir)\n        kinesis_data_dir_param = '--path %s' % kinesis_data_dir\n    cmd = ('%s/node_modules/kinesalite/cli.js --shardLimit %s --port %s %s' %\n        (ROOT_PATH, shard_limit, backend_port, kinesis_data_dir_param))\n    print('Starting mock Kinesis (%s port %s)...' % (get_service_protocol(), port))\n    start_proxy_for_service('kinesis', port, backend_port, update_listener)\n    return do_run(cmd, async)\n\n\ndef check_kinesis(expect_shutdown=False, print_error=False):\n    out = None\n    try:\n        \n        out = aws_stack.connect_to_service(service_name='kinesis').list_streams()\n    except Exception as e:\n        if print_error:\n            LOGGER.error('Kinesis health check failed: %s %s' % (e, traceback.format_exc()))\n    if expect_shutdown:\n        assert out is None\n    else:\n        assert isinstance(out['StreamNames'], list)\n", "comments": "  check kinesis ", "content": "import logging\nimport traceback\nfrom localstack.config import PORT_KINESIS, DATA_DIR\nfrom localstack.constants import DEFAULT_PORT_KINESIS_BACKEND\nfrom localstack.utils.aws import aws_stack\nfrom localstack.utils.common import mkdir\nfrom localstack.services import install\nfrom localstack.services.infra import get_service_protocol, start_proxy_for_service, do_run\nfrom localstack.services.install import ROOT_PATH\n\nLOGGER = logging.getLogger(__name__)\n\n\ndef start_kinesis(port=PORT_KINESIS, async=False, shard_limit=100, update_listener=None):\n    install.install_kinesalite()\n    backend_port = DEFAULT_PORT_KINESIS_BACKEND\n    kinesis_data_dir_param = ''\n    if DATA_DIR:\n        kinesis_data_dir = '%s/kinesis' % DATA_DIR\n        mkdir(kinesis_data_dir)\n        kinesis_data_dir_param = '--path %s' % kinesis_data_dir\n    cmd = ('%s/node_modules/kinesalite/cli.js --shardLimit %s --port %s %s' %\n        (ROOT_PATH, shard_limit, backend_port, kinesis_data_dir_param))\n    print('Starting mock Kinesis (%s port %s)...' % (get_service_protocol(), port))\n    start_proxy_for_service('kinesis', port, backend_port, update_listener)\n    return do_run(cmd, async)\n\n\ndef check_kinesis(expect_shutdown=False, print_error=False):\n    out = None\n    try:\n        # check Kinesis\n        out = aws_stack.connect_to_service(service_name='kinesis').list_streams()\n    except Exception as e:\n        if print_error:\n            LOGGER.error('Kinesis health check failed: %s %s' % (e, traceback.format_exc()))\n    if expect_shutdown:\n        assert out is None\n    else:\n        assert isinstance(out['StreamNames'], list)\n", "description": "\ud83d\udcbb  A fully functional local AWS cloud stack. Develop and test your cloud apps offline!", "file_name": "kinesis_starter.py", "id": "92e2f5c8d166850319c480c4f11186eb", "language": "Python", "project_name": "localstack", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/localstack-localstack/localstack-localstack-865ec3a/localstack/services/kinesis/kinesis_starter.py", "save_time": "", "source": "", "update_at": "2018-03-14T00:04:55Z", "url": "https://github.com/localstack/localstack", "wiki": true}