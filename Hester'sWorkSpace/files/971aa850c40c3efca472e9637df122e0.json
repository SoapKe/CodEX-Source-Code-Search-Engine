{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo.exceptions import AccessError, ValidationError, UserError\nfrom odoo.tools import mute_logger, test_reports\n\nfrom odoo.addons.hr_holidays.tests.common import TestHrHolidaysBase\n\n\nclass TestHolidaysFlow(TestHrHolidaysBase):\n\n    @mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\n    def test_00_leave_request_flow(self):\n        \n        Holidays = self.env['hr.holidays']\n        HolidaysStatus = self.env['hr.holidays.status']\n\n        def _check_holidays_status(holiday_status, ml, lt, rl, vrl):\n            self.assertEqual(holiday_status.max_leaves, ml,\n                             'hr_holidays: wrong type days computation')\n            self.assertEqual(holiday_status.leaves_taken, lt,\n                             'hr_holidays: wrong type days computation')\n            self.assertEqual(holiday_status.remaining_leaves, rl,\n                             'hr_holidays: wrong type days computation')\n            self.assertEqual(holiday_status.virtual_remaining_leaves, vrl,\n                             'hr_holidays: wrong type days computation')\n\n        \n        with self.assertRaises(AccessError):\n            HolidaysStatus.sudo(self.user_hruser_id).create({\n                'name': 'UserCheats',\n                'limit': True,\n            })\n\n        \n        HolidayStatusManagerGroup = HolidaysStatus.sudo(self.user_hrmanager_id)\n        HolidayStatusManagerGroup.create({\n            'name': 'WithMeetingType',\n            'limit': True,\n            'categ_id': self.env['calendar.event.type'].sudo(self.user_hrmanager_id).create({'name': 'NotLimitedMeetingType'}).id\n        })\n        self.holidays_status_1 = HolidayStatusManagerGroup.create({\n            'name': 'NotLimited',\n            'limit': True,\n        })\n        self.holidays_status_2 = HolidayStatusManagerGroup.create({\n            'name': 'Limited',\n            'limit': False,\n            'double_validation': True,\n        })\n\n        \n        \n        \n\n        \n        HolidaysEmployeeGroup = Holidays.sudo(self.user_employee_id)\n        with self.assertRaises(ValidationError):\n            HolidaysEmployeeGroup.create({\n                'name': 'Hol10',\n                'employee_id': self.employee_hruser_id,\n                'holiday_status_id': self.holidays_status_1.id,\n                'date_from': (datetime.today() - relativedelta(days=1)),\n                'date_to': datetime.today(),\n                'number_of_days_temp': 1,\n            })\n        Holidays.search([('name', '=', 'Hol10')]).unlink()\n\n        \n        hol1_employee_group = HolidaysEmployeeGroup.create({\n            'name': 'Hol11',\n            'employee_id': self.employee_emp_id,\n            'holiday_status_id': self.holidays_status_1.id,\n            'date_from': (datetime.today() - relativedelta(days=1)),\n            'date_to': datetime.today(),\n            'number_of_days_temp': 1,\n        })\n        hol1_user_group = hol1_employee_group.sudo(self.user_hruser_id)\n        self.assertEqual(hol1_user_group.state, 'confirm', 'hr_holidays: newly created leave request should be in confirm state')\n\n        \n        with self.assertRaises(UserError):\n            hol1_employee_group.action_approve()\n        self.assertEqual(hol1_user_group.state, 'confirm', 'hr_holidays: employee should not be able to validate its own leave request')\n\n        \n        hol1_user_group.action_approve()\n        self.assertEqual(hol1_user_group.state, 'validate', 'hr_holidays: validates leave request should be in validate state')\n\n        \n        \n        \n\n        \n        with self.assertRaises(ValidationError):\n            HolidaysEmployeeGroup.create({\n                'name': 'Hol21',\n                'employee_id': self.employee_emp_id,\n                'holiday_status_id': self.holidays_status_1.id,\n                'date_from': (datetime.today() - relativedelta(days=1)).strftime('%Y-%m-%d %H:%M'),\n                'date_to': datetime.today(),\n                'number_of_days_temp': 1,\n            })\n\n        \n        with self.assertRaises(ValidationError):\n            HolidaysEmployeeGroup.create({\n                'name': 'Hol22',\n                'employee_id': self.employee_emp_id,\n                'holiday_status_id': self.holidays_status_2.id,\n                'date_from': (datetime.today() + relativedelta(days=0)).strftime('%Y-%m-%d %H:%M'),\n                'date_to': (datetime.today() + relativedelta(days=1)),\n                'number_of_days_temp': 1,\n            })\n\n        \n        Holidays.search([('name', 'in', ['Hol21', 'Hol22'])]).unlink()\n\n        \n        aloc1_user_group = Holidays.sudo(self.user_hruser_id).create({\n            'name': 'Days for limited category',\n            'employee_id': self.employee_emp_id,\n            'holiday_status_id': self.holidays_status_2.id,\n            'type': 'add',\n            'number_of_days_temp': 2,\n        })\n        \n        aloc1_user_group.action_approve()\n        \n        aloc1_user_group.sudo(self.user_hrmanager_id).action_validate()\n        \n        hol_status_2_employee_group = self.holidays_status_2.sudo(self.user_employee_id)\n        _check_holidays_status(hol_status_2_employee_group, 2.0, 0.0, 2.0, 2.0)\n\n        \n        hol2 = HolidaysEmployeeGroup.create({\n            'name': 'Hol22',\n            'employee_id': self.employee_emp_id,\n            'holiday_status_id': self.holidays_status_2.id,\n            'date_from': (datetime.today() + relativedelta(days=2)).strftime('%Y-%m-%d %H:%M'),\n            'date_to': (datetime.today() + relativedelta(days=3)),\n            'number_of_days_temp': 1,\n        })\n        hol2_user_group = hol2.sudo(self.user_hruser_id)\n        \n        _check_holidays_status(hol_status_2_employee_group, 2.0, 0.0, 2.0, 1.0)\n\n        \n        hol2_user_group.action_approve()\n        self.assertEqual(hol2.state, 'validate1',\n                         'hr_holidays: first validation should lead to validate1 state')\n\n        \n        hol2_user_group.sudo(self.user_hrmanager_id).action_validate()\n        self.assertEqual(hol2.state, 'validate',\n                         'hr_holidays: second validation should lead to validate state')\n        \n        _check_holidays_status(hol_status_2_employee_group, 2.0, 1.0, 1.0, 1.0)\n\n        \n        hol2.sudo(self.user_hrmanager_id).action_refuse()\n        self.assertEqual(hol2.state, 'refuse',\n                         'hr_holidays: refuse should lead to refuse state')\n        \n        _check_holidays_status(hol_status_2_employee_group, 2.0, 0.0, 2.0, 2.0)\n\n        \n        with self.assertRaises(UserError):\n            hol2_user_group.action_draft()\n        self.assertEqual(hol2.state, 'refuse',\n                         'hr_holidays: hr_user should not be able to reset a refused leave request')\n\n        \n        hol2_manager_group = hol2.sudo(self.user_hrmanager_id)\n        hol2_manager_group.action_draft()\n        self.assertEqual(hol2.state, 'draft',\n                         'hr_holidays: resetting should lead to draft state')\n\n        \n        hol2_manager_group.write({\n            'date_from': (datetime.today() + relativedelta(days=4)).strftime('%Y-%m-%d %H:%M'),\n            'date_to': (datetime.today() + relativedelta(days=7)),\n            'number_of_days_temp': 4,\n        })\n        with self.assertRaises(ValidationError):\n            hol2_manager_group.action_confirm()\n\n        employee_id = self.ref('hr.employee_root')\n        \n        hol3_status = self.env.ref('hr_holidays.holiday_status_cl').with_context(employee_id=employee_id)\n        \n        hol3 = Holidays.create({\n            'name': 'Sick Leave',\n            'holiday_status_id': hol3_status.id,\n            'date_from': datetime.today().strftime('%Y-%m-10 10:00:00'),\n            'date_to': datetime.today().strftime('%Y-%m-11 19:00:00'),\n            'employee_id': employee_id,\n            'type': 'remove',\n            'number_of_days_temp': 1\n        })\n        \n        hol3.action_refuse()\n        self.assertEqual(hol3.state, 'refuse', 'hr_holidays: refuse should lead to refuse state')\n        \n        hol3.action_draft()\n        self.assertEqual(hol3.state, 'draft', 'hr_holidays: resetting should lead to draft state')\n        hol3.action_confirm()\n        self.assertEqual(hol3.state, 'confirm', 'hr_holidays: confirming should lead to confirm state')\n        \n        hol3.action_approve()\n        self.assertEqual(hol3.state, 'validate', 'hr_holidays: validation should lead to validate state')\n        \n        _check_holidays_status(hol3_status, 20.0, 1.0, 19.0, 19.0)\n\n    def test_10_leave_summary_reports(self):\n        # Print the HR Holidays(Summary Department) Report through the wizard\n        ctx = {\n            'model': 'hr.department',\n            'active_ids': [self.ref('hr.employee_root'), self.ref('hr.employee_qdp'), self.ref('hr.employee_al')]\n        }\n        data_dict = {\n            'date_from': datetime.today().strftime('%Y-%m-01'),\n            'depts': [(6, 0, [self.ref('hr.dep_sales')])],\n            'holiday_type': 'Approved'\n        }\n        test_reports.try_report_action(self.env.cr, self.env.uid, 'action_hr_holidays_summary_dept', wiz_data=data_dict, context=ctx, our_module='hr_holidays')\n\n        # Print the HR Holidays(Summary Employee) Report through the wizard\n        ctx = {\n            'model': 'hr.employee',\n            'active_ids': [self.ref('hr.employee_root'), self.ref('hr.employee_qdp'), self.ref('hr.employee_al')]\n        }\n        data_dict = {\n            'date_from': datetime.today().strftime('%Y-%m-01'),\n            'emp': [(6, 0, [self.ref('hr.employee_root'), self.ref('hr.employee_qdp'), self.ref('hr.employee_al')])],\n            'holiday_type': 'Approved'\n        }\n        test_reports.try_report_action(self.env.cr, self.env.uid, 'action_hr_holidays_summary_employee', wiz_data=data_dict, context=ctx, our_module='hr_holidays')\n", "comments": "    testing leave request flow            coding  utf 8        part odoo  see license file full copyright licensing details     hruser creates holiday statuses    crash hrmanagers    hrmanager creates holiday statuses                                                          case1  unlimited type leave request                                                          employee creates leave request another employee    crash    employee creates leave request limit category    employee validates leave request    work    hruser validates employee leave request                                                          case2  limited type leave request                                                          employee creates new leave request time    crash  avoid interlapping    employee creates leave request limited category    crash  enough days left    clean transaction    hruser allocates leaves employee    hruser validates first step    hrmanager validates second step    checks employee effectively days left    employee creates leave request limited category  days left    check left days    1 virtual remaining day    hruser validates first step    hrmanager validates second step    check left days    1 day taken    hrmanager finds error  refuses leave request    check left days  2 days left    annoyed  hruser tries fix error tries reset leave request    work  hrmanager    hrmanager resets request    hrmanager changes date put much days    crash confirming    cl maximum 20 days employee root    i assign dates holiday request 1 day    i find small mistake leave request i click  refuse  button correct mistake     i set draft confirm     i validate holiday request clicking  to approve  button     check left days casual leave  19 days left    print hr holidays(summary department) report wizard    print hr holidays(summary employee) report wizard ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo.exceptions import AccessError, ValidationError, UserError\nfrom odoo.tools import mute_logger, test_reports\n\nfrom odoo.addons.hr_holidays.tests.common import TestHrHolidaysBase\n\n\nclass TestHolidaysFlow(TestHrHolidaysBase):\n\n    @mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\n    def test_00_leave_request_flow(self):\n        \"\"\" Testing leave request flow \"\"\"\n        Holidays = self.env['hr.holidays']\n        HolidaysStatus = self.env['hr.holidays.status']\n\n        def _check_holidays_status(holiday_status, ml, lt, rl, vrl):\n            self.assertEqual(holiday_status.max_leaves, ml,\n                             'hr_holidays: wrong type days computation')\n            self.assertEqual(holiday_status.leaves_taken, lt,\n                             'hr_holidays: wrong type days computation')\n            self.assertEqual(holiday_status.remaining_leaves, rl,\n                             'hr_holidays: wrong type days computation')\n            self.assertEqual(holiday_status.virtual_remaining_leaves, vrl,\n                             'hr_holidays: wrong type days computation')\n\n        # HrUser creates some holiday statuses -> crash because only HrManagers should do this\n        with self.assertRaises(AccessError):\n            HolidaysStatus.sudo(self.user_hruser_id).create({\n                'name': 'UserCheats',\n                'limit': True,\n            })\n\n        # HrManager creates some holiday statuses\n        HolidayStatusManagerGroup = HolidaysStatus.sudo(self.user_hrmanager_id)\n        HolidayStatusManagerGroup.create({\n            'name': 'WithMeetingType',\n            'limit': True,\n            'categ_id': self.env['calendar.event.type'].sudo(self.user_hrmanager_id).create({'name': 'NotLimitedMeetingType'}).id\n        })\n        self.holidays_status_1 = HolidayStatusManagerGroup.create({\n            'name': 'NotLimited',\n            'limit': True,\n        })\n        self.holidays_status_2 = HolidayStatusManagerGroup.create({\n            'name': 'Limited',\n            'limit': False,\n            'double_validation': True,\n        })\n\n        # --------------------------------------------------\n        # Case1: unlimited type of leave request\n        # --------------------------------------------------\n\n        # Employee creates a leave request for another employee -> should crash\n        HolidaysEmployeeGroup = Holidays.sudo(self.user_employee_id)\n        with self.assertRaises(ValidationError):\n            HolidaysEmployeeGroup.create({\n                'name': 'Hol10',\n                'employee_id': self.employee_hruser_id,\n                'holiday_status_id': self.holidays_status_1.id,\n                'date_from': (datetime.today() - relativedelta(days=1)),\n                'date_to': datetime.today(),\n                'number_of_days_temp': 1,\n            })\n        Holidays.search([('name', '=', 'Hol10')]).unlink()\n\n        # Employee creates a leave request in a no-limit category\n        hol1_employee_group = HolidaysEmployeeGroup.create({\n            'name': 'Hol11',\n            'employee_id': self.employee_emp_id,\n            'holiday_status_id': self.holidays_status_1.id,\n            'date_from': (datetime.today() - relativedelta(days=1)),\n            'date_to': datetime.today(),\n            'number_of_days_temp': 1,\n        })\n        hol1_user_group = hol1_employee_group.sudo(self.user_hruser_id)\n        self.assertEqual(hol1_user_group.state, 'confirm', 'hr_holidays: newly created leave request should be in confirm state')\n\n        # Employee validates its leave request -> should not work\n        with self.assertRaises(UserError):\n            hol1_employee_group.action_approve()\n        self.assertEqual(hol1_user_group.state, 'confirm', 'hr_holidays: employee should not be able to validate its own leave request')\n\n        # HrUser validates the employee leave request\n        hol1_user_group.action_approve()\n        self.assertEqual(hol1_user_group.state, 'validate', 'hr_holidays: validates leave request should be in validate state')\n\n        # --------------------------------------------------\n        # Case2: limited type of leave request\n        # --------------------------------------------------\n\n        # Employee creates a new leave request at the same time -> crash, avoid interlapping\n        with self.assertRaises(ValidationError):\n            HolidaysEmployeeGroup.create({\n                'name': 'Hol21',\n                'employee_id': self.employee_emp_id,\n                'holiday_status_id': self.holidays_status_1.id,\n                'date_from': (datetime.today() - relativedelta(days=1)).strftime('%Y-%m-%d %H:%M'),\n                'date_to': datetime.today(),\n                'number_of_days_temp': 1,\n            })\n\n        # Employee creates a leave request in a limited category -> crash, not enough days left\n        with self.assertRaises(ValidationError):\n            HolidaysEmployeeGroup.create({\n                'name': 'Hol22',\n                'employee_id': self.employee_emp_id,\n                'holiday_status_id': self.holidays_status_2.id,\n                'date_from': (datetime.today() + relativedelta(days=0)).strftime('%Y-%m-%d %H:%M'),\n                'date_to': (datetime.today() + relativedelta(days=1)),\n                'number_of_days_temp': 1,\n            })\n\n        # Clean transaction\n        Holidays.search([('name', 'in', ['Hol21', 'Hol22'])]).unlink()\n\n        # HrUser allocates some leaves to the employee\n        aloc1_user_group = Holidays.sudo(self.user_hruser_id).create({\n            'name': 'Days for limited category',\n            'employee_id': self.employee_emp_id,\n            'holiday_status_id': self.holidays_status_2.id,\n            'type': 'add',\n            'number_of_days_temp': 2,\n        })\n        # HrUser validates the first step\n        aloc1_user_group.action_approve()\n        # HrManager validates the second step\n        aloc1_user_group.sudo(self.user_hrmanager_id).action_validate()\n        # Checks Employee has effectively some days left\n        hol_status_2_employee_group = self.holidays_status_2.sudo(self.user_employee_id)\n        _check_holidays_status(hol_status_2_employee_group, 2.0, 0.0, 2.0, 2.0)\n\n        # Employee creates a leave request in the limited category, now that he has some days left\n        hol2 = HolidaysEmployeeGroup.create({\n            'name': 'Hol22',\n            'employee_id': self.employee_emp_id,\n            'holiday_status_id': self.holidays_status_2.id,\n            'date_from': (datetime.today() + relativedelta(days=2)).strftime('%Y-%m-%d %H:%M'),\n            'date_to': (datetime.today() + relativedelta(days=3)),\n            'number_of_days_temp': 1,\n        })\n        hol2_user_group = hol2.sudo(self.user_hruser_id)\n        # Check left days: - 1 virtual remaining day\n        _check_holidays_status(hol_status_2_employee_group, 2.0, 0.0, 2.0, 1.0)\n\n        # HrUser validates the first step\n        hol2_user_group.action_approve()\n        self.assertEqual(hol2.state, 'validate1',\n                         'hr_holidays: first validation should lead to validate1 state')\n\n        # HrManager validates the second step\n        hol2_user_group.sudo(self.user_hrmanager_id).action_validate()\n        self.assertEqual(hol2.state, 'validate',\n                         'hr_holidays: second validation should lead to validate state')\n        # Check left days: - 1 day taken\n        _check_holidays_status(hol_status_2_employee_group, 2.0, 1.0, 1.0, 1.0)\n\n        # HrManager finds an error: he refuses the leave request\n        hol2.sudo(self.user_hrmanager_id).action_refuse()\n        self.assertEqual(hol2.state, 'refuse',\n                         'hr_holidays: refuse should lead to refuse state')\n        # Check left days: 2 days left again\n        _check_holidays_status(hol_status_2_employee_group, 2.0, 0.0, 2.0, 2.0)\n\n        # Annoyed, HrUser tries to fix its error and tries to reset the leave request -> does not work, only HrManager\n        with self.assertRaises(UserError):\n            hol2_user_group.action_draft()\n        self.assertEqual(hol2.state, 'refuse',\n                         'hr_holidays: hr_user should not be able to reset a refused leave request')\n\n        # HrManager resets the request\n        hol2_manager_group = hol2.sudo(self.user_hrmanager_id)\n        hol2_manager_group.action_draft()\n        self.assertEqual(hol2.state, 'draft',\n                         'hr_holidays: resetting should lead to draft state')\n\n        # HrManager changes the date and put too much days -> crash when confirming\n        hol2_manager_group.write({\n            'date_from': (datetime.today() + relativedelta(days=4)).strftime('%Y-%m-%d %H:%M'),\n            'date_to': (datetime.today() + relativedelta(days=7)),\n            'number_of_days_temp': 4,\n        })\n        with self.assertRaises(ValidationError):\n            hol2_manager_group.action_confirm()\n\n        employee_id = self.ref('hr.employee_root')\n        # cl can be of maximum 20 days for employee_root\n        hol3_status = self.env.ref('hr_holidays.holiday_status_cl').with_context(employee_id=employee_id)\n        # I assign the dates in the holiday request for 1 day\n        hol3 = Holidays.create({\n            'name': 'Sick Leave',\n            'holiday_status_id': hol3_status.id,\n            'date_from': datetime.today().strftime('%Y-%m-10 10:00:00'),\n            'date_to': datetime.today().strftime('%Y-%m-11 19:00:00'),\n            'employee_id': employee_id,\n            'type': 'remove',\n            'number_of_days_temp': 1\n        })\n        # I find a small mistake on my leave request to I click on \"Refuse\" button to correct a mistake.\n        hol3.action_refuse()\n        self.assertEqual(hol3.state, 'refuse', 'hr_holidays: refuse should lead to refuse state')\n        # I again set to draft and then confirm.\n        hol3.action_draft()\n        self.assertEqual(hol3.state, 'draft', 'hr_holidays: resetting should lead to draft state')\n        hol3.action_confirm()\n        self.assertEqual(hol3.state, 'confirm', 'hr_holidays: confirming should lead to confirm state')\n        # I validate the holiday request by clicking on \"To Approve\" button.\n        hol3.action_approve()\n        self.assertEqual(hol3.state, 'validate', 'hr_holidays: validation should lead to validate state')\n        # Check left days for casual leave: 19 days left\n        _check_holidays_status(hol3_status, 20.0, 1.0, 19.0, 19.0)\n\n    def test_10_leave_summary_reports(self):\n        # Print the HR Holidays(Summary Department) Report through the wizard\n        ctx = {\n            'model': 'hr.department',\n            'active_ids': [self.ref('hr.employee_root'), self.ref('hr.employee_qdp'), self.ref('hr.employee_al')]\n        }\n        data_dict = {\n            'date_from': datetime.today().strftime('%Y-%m-01'),\n            'depts': [(6, 0, [self.ref('hr.dep_sales')])],\n            'holiday_type': 'Approved'\n        }\n        test_reports.try_report_action(self.env.cr, self.env.uid, 'action_hr_holidays_summary_dept', wiz_data=data_dict, context=ctx, our_module='hr_holidays')\n\n        # Print the HR Holidays(Summary Employee) Report through the wizard\n        ctx = {\n            'model': 'hr.employee',\n            'active_ids': [self.ref('hr.employee_root'), self.ref('hr.employee_qdp'), self.ref('hr.employee_al')]\n        }\n        data_dict = {\n            'date_from': datetime.today().strftime('%Y-%m-01'),\n            'emp': [(6, 0, [self.ref('hr.employee_root'), self.ref('hr.employee_qdp'), self.ref('hr.employee_al')])],\n            'holiday_type': 'Approved'\n        }\n        test_reports.try_report_action(self.env.cr, self.env.uid, 'action_hr_holidays_summary_employee', wiz_data=data_dict, context=ctx, our_module='hr_holidays')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_holidays_flow.py", "id": "971aa850c40c3efca472e9637df122e0", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_holidays/tests/test_holidays_flow.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}