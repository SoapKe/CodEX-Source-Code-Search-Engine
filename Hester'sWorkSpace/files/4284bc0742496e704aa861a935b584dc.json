{"author": "ansible", "code": "# (c) 2012, Michael DeHaan, <michael.dehaan@gmail.com>\n# (c) 2017 Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nDOCUMENTATION = '''\n    callback: osx_say\n    type: notification\n    requirements:\n      - whitelising in configuration\n      - the '/usr/bin/say' command line program (standard on OS X)\n    short_description: oneline Ansible screen output\n    version_added: historical\n    description:\n      - This plugin will use the 'say' program to \"speak\" about play events.\n'''\n\nimport subprocess\nimport os\n\nfrom ansible.plugins.callback import CallbackBase\n\nFAILED_VOICE = \"Zarvox\"\nREGULAR_VOICE = \"Trinoids\"\nHAPPY_VOICE = \"Cellos\"\nLASER_VOICE = \"Princess\"\nSAY_CMD = \"/usr/bin/say\"\n\n\nclass CallbackModule(CallbackBase):\n    \n    CALLBACK_VERSION = 2.0\n    CALLBACK_TYPE = 'notification'\n    CALLBACK_NAME = 'osx_say'\n    CALLBACK_NEEDS_WHITELIST = True\n\n    def __init__(self):\n\n        super(CallbackModule, self).__init__()\n\n        \n        \n        if not os.path.exists(SAY_CMD):\n            self.disabled = True\n            self._display.warning(\"%s does not exist, plugin %s disabled\" % (SAY_CMD, os.path.basename(__file__)))\n\n    def say(self, msg, voice):\n        subprocess.call([SAY_CMD, msg, \"--voice=%s\" % (voice)])\n\n    def runner_on_failed(self, host, res, ignore_errors=False):\n        self.say(\"Failure on host %s\" % host, FAILED_VOICE)\n\n    def runner_on_ok(self, host, res):\n        self.say(\"pew\", LASER_VOICE)\n\n    def runner_on_skipped(self, host, item=None):\n        self.say(\"pew\", LASER_VOICE)\n\n    def runner_on_unreachable(self, host, res):\n        self.say(\"Failure on host %s\" % host, FAILED_VOICE)\n\n    def runner_on_async_ok(self, host, res, jid):\n        self.say(\"pew\", LASER_VOICE)\n\n    def runner_on_async_failed(self, host, res, jid):\n        self.say(\"Failure on host %s\" % host, FAILED_VOICE)\n\n    def playbook_on_start(self):\n        self.say(\"Running Playbook\", REGULAR_VOICE)\n\n    def playbook_on_notify(self, host, handler):\n        self.say(\"pew\", LASER_VOICE)\n\n    def playbook_on_task_start(self, name, is_conditional):\n        if not is_conditional:\n            self.say(\"Starting task: %s\" % name, REGULAR_VOICE)\n        else:\n            self.say(\"Notifying task: %s\" % name, REGULAR_VOICE)\n\n    def playbook_on_setup(self):\n        self.say(\"Gathering facts\", REGULAR_VOICE)\n\n    def playbook_on_play_start(self, name):\n        self.say(\"Starting play: %s\" % name, HAPPY_VOICE)\n\n    def playbook_on_stats(self, stats):\n        self.say(\"Play complete\", HAPPY_VOICE)\n", "comments": "        makes ansible much exciting os x                   callback  osx say     type  notification     requirements          whitelising configuration           usr bin say  command line program (standard os x)     short description  oneline ansible screen output     version added  historical     description          this plugin use  say  program  speak  play events         (c) 2012  michael dehaan   michael dehaan gmail com     (c) 2017 ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    make coding python3 ish    plugin disable say present    ansible call callback disabled set true ", "content": "# (c) 2012, Michael DeHaan, <michael.dehaan@gmail.com>\n# (c) 2017 Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nDOCUMENTATION = '''\n    callback: osx_say\n    type: notification\n    requirements:\n      - whitelising in configuration\n      - the '/usr/bin/say' command line program (standard on OS X)\n    short_description: oneline Ansible screen output\n    version_added: historical\n    description:\n      - This plugin will use the 'say' program to \"speak\" about play events.\n'''\n\nimport subprocess\nimport os\n\nfrom ansible.plugins.callback import CallbackBase\n\nFAILED_VOICE = \"Zarvox\"\nREGULAR_VOICE = \"Trinoids\"\nHAPPY_VOICE = \"Cellos\"\nLASER_VOICE = \"Princess\"\nSAY_CMD = \"/usr/bin/say\"\n\n\nclass CallbackModule(CallbackBase):\n    \"\"\"\n    makes Ansible much more exciting on OS X.\n    \"\"\"\n    CALLBACK_VERSION = 2.0\n    CALLBACK_TYPE = 'notification'\n    CALLBACK_NAME = 'osx_say'\n    CALLBACK_NEEDS_WHITELIST = True\n\n    def __init__(self):\n\n        super(CallbackModule, self).__init__()\n\n        # plugin disable itself if say is not present\n        # ansible will not call any callback if disabled is set to True\n        if not os.path.exists(SAY_CMD):\n            self.disabled = True\n            self._display.warning(\"%s does not exist, plugin %s disabled\" % (SAY_CMD, os.path.basename(__file__)))\n\n    def say(self, msg, voice):\n        subprocess.call([SAY_CMD, msg, \"--voice=%s\" % (voice)])\n\n    def runner_on_failed(self, host, res, ignore_errors=False):\n        self.say(\"Failure on host %s\" % host, FAILED_VOICE)\n\n    def runner_on_ok(self, host, res):\n        self.say(\"pew\", LASER_VOICE)\n\n    def runner_on_skipped(self, host, item=None):\n        self.say(\"pew\", LASER_VOICE)\n\n    def runner_on_unreachable(self, host, res):\n        self.say(\"Failure on host %s\" % host, FAILED_VOICE)\n\n    def runner_on_async_ok(self, host, res, jid):\n        self.say(\"pew\", LASER_VOICE)\n\n    def runner_on_async_failed(self, host, res, jid):\n        self.say(\"Failure on host %s\" % host, FAILED_VOICE)\n\n    def playbook_on_start(self):\n        self.say(\"Running Playbook\", REGULAR_VOICE)\n\n    def playbook_on_notify(self, host, handler):\n        self.say(\"pew\", LASER_VOICE)\n\n    def playbook_on_task_start(self, name, is_conditional):\n        if not is_conditional:\n            self.say(\"Starting task: %s\" % name, REGULAR_VOICE)\n        else:\n            self.say(\"Notifying task: %s\" % name, REGULAR_VOICE)\n\n    def playbook_on_setup(self):\n        self.say(\"Gathering facts\", REGULAR_VOICE)\n\n    def playbook_on_play_start(self, name):\n        self.say(\"Starting play: %s\" % name, HAPPY_VOICE)\n\n    def playbook_on_stats(self, stats):\n        self.say(\"Play complete\", HAPPY_VOICE)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "osx_say.py", "id": "4284bc0742496e704aa861a935b584dc", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/plugins/callback/osx_say.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}