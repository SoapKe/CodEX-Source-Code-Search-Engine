{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport odoo.http as http\n\nfrom odoo.tools.safe_eval import safe_eval\n\n\nclass DiagramView(http.Controller):\n\n    @http.route('/web_diagram/diagram/get_diagram_info', type='json', auth='user')\n    def get_diagram_info(self, id, model, node, connector,\n                         src_node, des_node, label, **kw):\n\n        visible_node_fields = kw.get('visible_node_fields', [])\n        invisible_node_fields = kw.get('invisible_node_fields', [])\n        node_fields_string = kw.get('node_fields_string', [])\n        connector_fields = kw.get('connector_fields', [])\n        connector_fields_string = kw.get('connector_fields_string', [])\n\n        bgcolors = {}\n        shapes = {}\n        bgcolor = kw.get('bgcolor', '')\n        shape = kw.get('shape', '')\n\n        if bgcolor:\n            for color_spec in bgcolor.split(';'):\n                if color_spec:\n                    colour, color_state = color_spec.split(':')\n                    bgcolors[colour] = color_state\n\n        if shape:\n            for shape_spec in shape.split(';'):\n                if shape_spec:\n                    shape_colour, shape_color_state = shape_spec.split(':')\n                    shapes[shape_colour] = shape_color_state\n\n        ir_view = http.request.env['ir.ui.view']\n        graphs = ir_view.graph_get(int(id), model, node, connector, src_node,\n                                   des_node, label, (140, 180))\n        nodes = graphs['nodes']\n        transitions = graphs['transitions']\n        isolate_nodes = {}\n        for blnk_node in graphs['blank_nodes']:\n            isolate_nodes[blnk_node['id']] = blnk_node\n        y = [\n            t['y']\n            for t in nodes.values()\n            if t['x'] == 20\n            if t['y']\n        ]\n        y_max = (y and max(y)) or 120\n\n        connectors = {}\n        list_tr = []\n\n        for tr in transitions:\n            list_tr.append(tr)\n            connectors.setdefault(tr, {\n                'id': int(tr),\n                's_id': transitions[tr][0],\n                'd_id': transitions[tr][1]\n            })\n\n        connector_model = http.request.env[connector]\n        data_connectors = connector_model.search([('id', 'in', list_tr)]).read(connector_fields)\n\n        for tr in data_connectors:\n            transition_id = str(tr['id'])\n            _sourceid, label = graphs['label'][transition_id]\n            t = connectors[transition_id]\n            t.update(\n                source=tr[src_node][1],\n                destination=tr[des_node][1],\n                options={},\n                signal=label\n            )\n\n            for i, fld in enumerate(connector_fields):\n                t['options'][connector_fields_string[i]] = tr[fld]\n\n        fields = http.request.env['ir.model.fields']\n        field = fields.search([('model', '=', model), ('relation', '=', node)])\n        node_act = http.request.env[node]\n        search_acts = node_act.search([(field.relation_field, '=', id)])\n        data_acts = search_acts.read(invisible_node_fields + visible_node_fields)\n\n        for act in data_acts:\n            n = nodes.get(str(act['id']))\n            if not n:\n                n = isolate_nodes.get(act['id'], {})\n                y_max += 140\n                n.update(x=20, y=y_max)\n                nodes[act['id']] = n\n\n            n.update(\n                id=act['id'],\n                color='white',\n                options={}\n            )\n            for color, expr in bgcolors.items():\n                if safe_eval(expr, act):\n                    n['color'] = color\n\n            for shape, expr in shapes.items():\n                if safe_eval(expr, act):\n                    n['shape'] = shape\n\n            for i, fld in enumerate(visible_node_fields):\n                n['options'][node_fields_string[i]] = act[fld]\n\n        _id, name = http.request.env[model].browse([id]).name_get()[0]\n        return dict(nodes=nodes,\n                    conn=connectors,\n                    display_name=name,\n                    parent_field=graphs['node_parent_field'])\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport odoo.http as http\n\nfrom odoo.tools.safe_eval import safe_eval\n\n\nclass DiagramView(http.Controller):\n\n    @http.route('/web_diagram/diagram/get_diagram_info', type='json', auth='user')\n    def get_diagram_info(self, id, model, node, connector,\n                         src_node, des_node, label, **kw):\n\n        visible_node_fields = kw.get('visible_node_fields', [])\n        invisible_node_fields = kw.get('invisible_node_fields', [])\n        node_fields_string = kw.get('node_fields_string', [])\n        connector_fields = kw.get('connector_fields', [])\n        connector_fields_string = kw.get('connector_fields_string', [])\n\n        bgcolors = {}\n        shapes = {}\n        bgcolor = kw.get('bgcolor', '')\n        shape = kw.get('shape', '')\n\n        if bgcolor:\n            for color_spec in bgcolor.split(';'):\n                if color_spec:\n                    colour, color_state = color_spec.split(':')\n                    bgcolors[colour] = color_state\n\n        if shape:\n            for shape_spec in shape.split(';'):\n                if shape_spec:\n                    shape_colour, shape_color_state = shape_spec.split(':')\n                    shapes[shape_colour] = shape_color_state\n\n        ir_view = http.request.env['ir.ui.view']\n        graphs = ir_view.graph_get(int(id), model, node, connector, src_node,\n                                   des_node, label, (140, 180))\n        nodes = graphs['nodes']\n        transitions = graphs['transitions']\n        isolate_nodes = {}\n        for blnk_node in graphs['blank_nodes']:\n            isolate_nodes[blnk_node['id']] = blnk_node\n        y = [\n            t['y']\n            for t in nodes.values()\n            if t['x'] == 20\n            if t['y']\n        ]\n        y_max = (y and max(y)) or 120\n\n        connectors = {}\n        list_tr = []\n\n        for tr in transitions:\n            list_tr.append(tr)\n            connectors.setdefault(tr, {\n                'id': int(tr),\n                's_id': transitions[tr][0],\n                'd_id': transitions[tr][1]\n            })\n\n        connector_model = http.request.env[connector]\n        data_connectors = connector_model.search([('id', 'in', list_tr)]).read(connector_fields)\n\n        for tr in data_connectors:\n            transition_id = str(tr['id'])\n            _sourceid, label = graphs['label'][transition_id]\n            t = connectors[transition_id]\n            t.update(\n                source=tr[src_node][1],\n                destination=tr[des_node][1],\n                options={},\n                signal=label\n            )\n\n            for i, fld in enumerate(connector_fields):\n                t['options'][connector_fields_string[i]] = tr[fld]\n\n        fields = http.request.env['ir.model.fields']\n        field = fields.search([('model', '=', model), ('relation', '=', node)])\n        node_act = http.request.env[node]\n        search_acts = node_act.search([(field.relation_field, '=', id)])\n        data_acts = search_acts.read(invisible_node_fields + visible_node_fields)\n\n        for act in data_acts:\n            n = nodes.get(str(act['id']))\n            if not n:\n                n = isolate_nodes.get(act['id'], {})\n                y_max += 140\n                n.update(x=20, y=y_max)\n                nodes[act['id']] = n\n\n            n.update(\n                id=act['id'],\n                color='white',\n                options={}\n            )\n            for color, expr in bgcolors.items():\n                if safe_eval(expr, act):\n                    n['color'] = color\n\n            for shape, expr in shapes.items():\n                if safe_eval(expr, act):\n                    n['shape'] = shape\n\n            for i, fld in enumerate(visible_node_fields):\n                n['options'][node_fields_string[i]] = act[fld]\n\n        _id, name = http.request.env[model].browse([id]).name_get()[0]\n        return dict(nodes=nodes,\n                    conn=connectors,\n                    display_name=name,\n                    parent_field=graphs['node_parent_field'])\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "19686f83295d8b5bb9bbe5a90ae24e90", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/web_diagram/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}