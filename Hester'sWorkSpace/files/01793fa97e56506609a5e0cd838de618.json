{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import ExtractorError\nfrom ..compat import compat_urlparse\n\n\nclass TuneInBaseIE(InfoExtractor):\n    _API_BASE_URL = 'http://tunein.com/tuner/tune/'\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+src=[\"\\'](?P<url>(?:https?://)?tunein\\.com/embed/player/[pst]\\d+)',\n            webpage)\n\n    def _real_extract(self, url):\n        content_id = self._match_id(url)\n\n        content_info = self._download_json(\n            self._API_BASE_URL + self._API_URL_QUERY % content_id,\n            content_id, note='Downloading JSON metadata')\n\n        title = content_info['Title']\n        thumbnail = content_info.get('Logo')\n        location = content_info.get('Location')\n        streams_url = content_info.get('StreamUrl')\n        if not streams_url:\n            raise ExtractorError('No downloadable streams found', expected=True)\n        if not streams_url.startswith('http://'):\n            streams_url = compat_urlparse.urljoin(url, streams_url)\n\n        streams = self._download_json(\n            streams_url, content_id, note='Downloading stream data',\n            transform_source=lambda s: re.sub(r'^\\s*\\((.*)\\);\\s*$', r'\\1', s))['Streams']\n\n        is_live = None\n        formats = []\n        for stream in streams:\n            if stream.get('Type') == 'Live':\n                is_live = True\n            reliability = stream.get('Reliability')\n            format_note = (\n                'Reliability: %d%%' % reliability\n                if reliability is not None else None)\n            formats.append({\n                'preference': (\n                    0 if reliability is None or reliability > 90\n                    else 1),\n                'abr': stream.get('Bandwidth'),\n                'ext': stream.get('MediaType').lower(),\n                'acodec': stream.get('MediaType'),\n                'vcodec': 'none',\n                'url': stream.get('Url'),\n                'source_preference': reliability,\n                'format_note': format_note,\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': content_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'location': location,\n            'is_live': is_live,\n        }\n\n\nclass TuneInClipIE(TuneInBaseIE):\n    IE_NAME = 'tunein:clip'\n    _VALID_URL = r'https?://(?:www\\.)?tunein\\.com/station/.*?audioClipId\\=(?P<id>\\d+)'\n    _API_URL_QUERY = '?tuneType=AudioClip&audioclipId=%s'\n\n    _TESTS = [{\n        'url': 'http://tunein.com/station/?stationId=246119&audioClipId=816',\n        'md5': '99f00d772db70efc804385c6b47f4e77',\n        'info_dict': {\n            'id': '816',\n            'title': '32m',\n            'ext': 'mp3',\n        },\n    }]\n\n\nclass TuneInStationIE(TuneInBaseIE):\n    IE_NAME = 'tunein:station'\n    _VALID_URL = r'https?://(?:www\\.)?tunein\\.com/(?:radio/.*?-s|station/.*?StationId=|embed/player/s)(?P<id>\\d+)'\n    _API_URL_QUERY = '?tuneType=Station&stationId=%s'\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TuneInClipIE.suitable(url) else super(TuneInStationIE, cls).suitable(url)\n\n    _TESTS = [{\n        'url': 'http://tunein.com/radio/Jazz24-885-s34682/',\n        'info_dict': {\n            'id': '34682',\n            'title': 'Jazz 24 on 88.5 Jazz24 - KPLU-HD2',\n            'ext': 'mp3',\n            'location': 'Tacoma, WA',\n        },\n        'params': {\n            'skip_download': True,  \n        },\n    }, {\n        'url': 'http://tunein.com/embed/player/s6404/',\n        'only_matching': True,\n    }]\n\n\nclass TuneInProgramIE(TuneInBaseIE):\n    IE_NAME = 'tunein:program'\n    _VALID_URL = r'https?://(?:www\\.)?tunein\\.com/(?:radio/.*?-p|program/.*?ProgramId=|embed/player/p)(?P<id>\\d+)'\n    _API_URL_QUERY = '?tuneType=Program&programId=%s'\n\n    _TESTS = [{\n        'url': 'http://tunein.com/radio/Jazz-24-p2506/',\n        'info_dict': {\n            'id': '2506',\n            'title': 'Jazz 24 on 91.3 WUKY-HD3',\n            'ext': 'mp3',\n            'location': 'Lexington, KY',\n        },\n        'params': {\n            'skip_download': True,  \n        },\n    }, {\n        'url': 'http://tunein.com/embed/player/p191660/',\n        'only_matching': True,\n    }]\n\n\nclass TuneInTopicIE(TuneInBaseIE):\n    IE_NAME = 'tunein:topic'\n    _VALID_URL = r'https?://(?:www\\.)?tunein\\.com/(?:topic/.*?TopicId=|embed/player/t)(?P<id>\\d+)'\n    _API_URL_QUERY = '?tuneType=Topic&topicId=%s'\n\n    _TESTS = [{\n        'url': 'http://tunein.com/topic/?TopicId=101830576',\n        'md5': 'c31a39e6f988d188252eae7af0ef09c9',\n        'info_dict': {\n            'id': '101830576',\n            'title': 'Votez pour moi du 29 octobre 2015 (29/10/15)',\n            'ext': 'mp3',\n            'location': 'Belgium',\n        },\n    }, {\n        'url': 'http://tunein.com/embed/player/t101830576/',\n        'only_matching': True,\n    }]\n\n\nclass TuneInShortenerIE(InfoExtractor):\n    IE_NAME = 'tunein:shortener'\n    IE_DESC = False  \n    _VALID_URL = r'https?://tun\\.in/(?P<id>[A-Za-z0-9]+)'\n\n    _TEST = {\n        \n        'url': 'http://tun.in/ser7s',\n        'info_dict': {\n            'id': '34682',\n            'title': 'Jazz 24 on 88.5 Jazz24 - KPLU-HD2',\n            'ext': 'mp3',\n            'location': 'Tacoma, WA',\n        },\n        'params': {\n            'skip_download': True,  \n        },\n    }\n\n    def _real_extract(self, url):\n        redirect_id = self._match_id(url)\n        \n        urlh = self._request_webpage(\n            url, redirect_id, note='Downloading redirect page')\n        url = urlh.geturl()\n        self.to_screen('Following redirect: %s' % url)\n        return self.url_result(url)\n", "comments": "# coding: utf-8\n# live stream\n# live stream\n# Do not list\n# test redirection\n# live stream\n# The server doesn't support HEAD requests\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import ExtractorError\nfrom ..compat import compat_urlparse\n\n\nclass TuneInBaseIE(InfoExtractor):\n    _API_BASE_URL = 'http://tunein.com/tuner/tune/'\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+src=[\"\\'](?P<url>(?:https?://)?tunein\\.com/embed/player/[pst]\\d+)',\n            webpage)\n\n    def _real_extract(self, url):\n        content_id = self._match_id(url)\n\n        content_info = self._download_json(\n            self._API_BASE_URL + self._API_URL_QUERY % content_id,\n            content_id, note='Downloading JSON metadata')\n\n        title = content_info['Title']\n        thumbnail = content_info.get('Logo')\n        location = content_info.get('Location')\n        streams_url = content_info.get('StreamUrl')\n        if not streams_url:\n            raise ExtractorError('No downloadable streams found', expected=True)\n        if not streams_url.startswith('http://'):\n            streams_url = compat_urlparse.urljoin(url, streams_url)\n\n        streams = self._download_json(\n            streams_url, content_id, note='Downloading stream data',\n            transform_source=lambda s: re.sub(r'^\\s*\\((.*)\\);\\s*$', r'\\1', s))['Streams']\n\n        is_live = None\n        formats = []\n        for stream in streams:\n            if stream.get('Type') == 'Live':\n                is_live = True\n            reliability = stream.get('Reliability')\n            format_note = (\n                'Reliability: %d%%' % reliability\n                if reliability is not None else None)\n            formats.append({\n                'preference': (\n                    0 if reliability is None or reliability > 90\n                    else 1),\n                'abr': stream.get('Bandwidth'),\n                'ext': stream.get('MediaType').lower(),\n                'acodec': stream.get('MediaType'),\n                'vcodec': 'none',\n                'url': stream.get('Url'),\n                'source_preference': reliability,\n                'format_note': format_note,\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': content_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'location': location,\n            'is_live': is_live,\n        }\n\n\nclass TuneInClipIE(TuneInBaseIE):\n    IE_NAME = 'tunein:clip'\n    _VALID_URL = r'https?://(?:www\\.)?tunein\\.com/station/.*?audioClipId\\=(?P<id>\\d+)'\n    _API_URL_QUERY = '?tuneType=AudioClip&audioclipId=%s'\n\n    _TESTS = [{\n        'url': 'http://tunein.com/station/?stationId=246119&audioClipId=816',\n        'md5': '99f00d772db70efc804385c6b47f4e77',\n        'info_dict': {\n            'id': '816',\n            'title': '32m',\n            'ext': 'mp3',\n        },\n    }]\n\n\nclass TuneInStationIE(TuneInBaseIE):\n    IE_NAME = 'tunein:station'\n    _VALID_URL = r'https?://(?:www\\.)?tunein\\.com/(?:radio/.*?-s|station/.*?StationId=|embed/player/s)(?P<id>\\d+)'\n    _API_URL_QUERY = '?tuneType=Station&stationId=%s'\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TuneInClipIE.suitable(url) else super(TuneInStationIE, cls).suitable(url)\n\n    _TESTS = [{\n        'url': 'http://tunein.com/radio/Jazz24-885-s34682/',\n        'info_dict': {\n            'id': '34682',\n            'title': 'Jazz 24 on 88.5 Jazz24 - KPLU-HD2',\n            'ext': 'mp3',\n            'location': 'Tacoma, WA',\n        },\n        'params': {\n            'skip_download': True,  # live stream\n        },\n    }, {\n        'url': 'http://tunein.com/embed/player/s6404/',\n        'only_matching': True,\n    }]\n\n\nclass TuneInProgramIE(TuneInBaseIE):\n    IE_NAME = 'tunein:program'\n    _VALID_URL = r'https?://(?:www\\.)?tunein\\.com/(?:radio/.*?-p|program/.*?ProgramId=|embed/player/p)(?P<id>\\d+)'\n    _API_URL_QUERY = '?tuneType=Program&programId=%s'\n\n    _TESTS = [{\n        'url': 'http://tunein.com/radio/Jazz-24-p2506/',\n        'info_dict': {\n            'id': '2506',\n            'title': 'Jazz 24 on 91.3 WUKY-HD3',\n            'ext': 'mp3',\n            'location': 'Lexington, KY',\n        },\n        'params': {\n            'skip_download': True,  # live stream\n        },\n    }, {\n        'url': 'http://tunein.com/embed/player/p191660/',\n        'only_matching': True,\n    }]\n\n\nclass TuneInTopicIE(TuneInBaseIE):\n    IE_NAME = 'tunein:topic'\n    _VALID_URL = r'https?://(?:www\\.)?tunein\\.com/(?:topic/.*?TopicId=|embed/player/t)(?P<id>\\d+)'\n    _API_URL_QUERY = '?tuneType=Topic&topicId=%s'\n\n    _TESTS = [{\n        'url': 'http://tunein.com/topic/?TopicId=101830576',\n        'md5': 'c31a39e6f988d188252eae7af0ef09c9',\n        'info_dict': {\n            'id': '101830576',\n            'title': 'Votez pour moi du 29 octobre 2015 (29/10/15)',\n            'ext': 'mp3',\n            'location': 'Belgium',\n        },\n    }, {\n        'url': 'http://tunein.com/embed/player/t101830576/',\n        'only_matching': True,\n    }]\n\n\nclass TuneInShortenerIE(InfoExtractor):\n    IE_NAME = 'tunein:shortener'\n    IE_DESC = False  # Do not list\n    _VALID_URL = r'https?://tun\\.in/(?P<id>[A-Za-z0-9]+)'\n\n    _TEST = {\n        # test redirection\n        'url': 'http://tun.in/ser7s',\n        'info_dict': {\n            'id': '34682',\n            'title': 'Jazz 24 on 88.5 Jazz24 - KPLU-HD2',\n            'ext': 'mp3',\n            'location': 'Tacoma, WA',\n        },\n        'params': {\n            'skip_download': True,  # live stream\n        },\n    }\n\n    def _real_extract(self, url):\n        redirect_id = self._match_id(url)\n        # The server doesn't support HEAD requests\n        urlh = self._request_webpage(\n            url, redirect_id, note='Downloading redirect page')\n        url = urlh.geturl()\n        self.to_screen('Following redirect: %s' % url)\n        return self.url_result(url)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tunein.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tunein.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}