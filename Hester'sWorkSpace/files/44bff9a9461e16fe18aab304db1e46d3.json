{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_epg_to_contract\nshort_description: Bind EPGs to Contracts (fv:RsCons, fv:RsProv)\ndescription:\n- Bind EPGs to Contracts on Cisco ACI fabrics.\nnotes:\n- The C(tenant), C(app_profile), C(EPG), and C(Contract) used must exist before using this module in your playbook.\n  The M(aci_tenant), M(aci_ap), M(aci_epg), and M(aci_contract) modules can be used for this.\n- More information about the internal APIC classes B(fv:RsCons) and B(fv:RsProv) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Jacob McGill (@jmcgill298)\nversion_added: '2.4'\noptions:\n  ap:\n    description:\n    - Name of an existing application network profile, that will contain the EPGs.\n    aliases: [ app_profile, app_profile_name ]\n  contract:\n    description:\n    - The name of the contract.\n    aliases: [ contract_name ]\n  contract_type:\n    description:\n    - Determines if the EPG should Provide or Consume the Contract.\n    required: yes\n    choices: [ consumer, proivder ]\n  epg:\n    description:\n    - The name of the end point group.\n    aliases: [ epg_name ]\n  priority:\n    description:\n    - QoS class.\n    - The APIC defaults new EPG to Contract bindings to C(unspecified).\n    choices: [ level1, level2, level3, unspecified ]\n    default: unspecified\n  provider_match:\n    description:\n    - The matching algorithm for Provided Contracts.\n    - The APIC defaults new EPG to Provided Contracts to C(at_least_one).\n    choices: [ all, at_least_one, at_most_one, none ]\n    default: at_least_one\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\n  tenant:\n    description:\n    - Name of an existing tenant.\n    aliases: [ tenant_name ]\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add a new contract to EPG binding\n  aci_epg_to_contract:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: anstest\n    ap: anstest\n    epg: anstest\n    contract: anstest_http\n    contract_type: provider\n    state: present\n\n- name: Remove an existing contract to EPG binding\n  aci_epg_to_contract:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: anstest\n    ap: anstest\n    epg: anstest\n    contract: anstest_http\n    contract_type: provider\n    state: absent\n\n- name: Query a specific contract to EPG binding\n  aci_epg_to_contract:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: anstest\n    ap: anstest\n    epg: anstest\n    contract: anstest_http\n    contract_type: provider\n    state: query\n\n- name: Query all provider contract to EPG bindings\n  aci_epg_to_contract:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    contract_type: provider\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\nACI_CLASS_MAPPING = {\"consumer\": {\"class\": \"fvRsCons\", \"rn\": \"rscons-\"}, \"provider\": {\"class\": \"fvRsProv\", \"rn\": \"rsprov-\"}}\nPROVIDER_MATCH_MAPPING = {\"all\": \"All\", \"at_least_one\": \"AtleastOne\", \"at_most_one\": \"AtmostOne\", \"none\": \"None\"}\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        ap=dict(type='str', aliases=['app_profile', 'app_profile_name']),  \n        epg=dict(type='str', aliases=['epg_name']),  \n        contract=dict(type='str', aliases=['contract_name']),  \n        contract_type=dict(type='str', required=True, choices=['consumer', 'provider']),\n        priority=dict(type='str', choices=['level1', 'level2', 'level3', 'unspecified']),\n        provider_match=dict(type='str', choices=['all', 'at_least_one', 'at_most_one', 'none']),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n        tenant=dict(type='str', aliases=['tenant_name']),  \n        method=dict(type='str', choices=['delete', 'get', 'post'], aliases=['action'], removed_in_version='2.6'),  \n        protocol=dict(type='str', removed_in_version='2.6'),  \n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['ap', 'contract', 'epg', 'tenant']],\n            ['state', 'present', ['ap', 'contract', 'epg', 'tenant']],\n        ],\n    )\n\n    ap = module.params['ap']\n    contract = module.params['contract']\n    contract_type = module.params['contract_type']\n    epg = module.params['epg']\n    priority = module.params['priority']\n    provider_match = module.params['provider_match']\n    if provider_match is not None:\n        provider_match = PROVIDER_MATCH_MAPPING[provider_match]\n    state = module.params['state']\n    tenant = module.params['tenant']\n\n    aci_class = ACI_CLASS_MAPPING[contract_type][\"class\"]\n    aci_rn = ACI_CLASS_MAPPING[contract_type][\"rn\"]\n\n    if contract_type == \"consumer\" and provider_match is not None:\n        module.fail_json(msg=\"the 'provider_match' is only configurable for Provided Contracts\")\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class='fvTenant',\n            aci_rn='tn-{0}'.format(tenant),\n            filter_target='eq(fvTenant.name, \"{0}\")'.format(tenant),\n            module_object=tenant,\n        ),\n        subclass_1=dict(\n            aci_class='fvAp',\n            aci_rn='ap-{0}'.format(ap),\n            filter_target='eq(fvAp.name, \"{0}\")'.format(ap),\n            module_object=ap,\n        ),\n        subclass_2=dict(\n            aci_class='fvAEPg',\n            aci_rn='epg-{0}'.format(epg),\n            filter_target='eq(fvAEPg.name, \"{0}\")'.format(epg),\n            module_object=epg,\n        ),\n        subclass_3=dict(\n            aci_class=aci_class,\n            aci_rn='{0}{1}'.format(aci_rn, contract),\n            filter_target='eq({0}.tnVzBrCPName, \"{1}'.format(aci_class, contract),\n            module_object=contract,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class=aci_class,\n            class_config=dict(\n                matchT=provider_match,\n                prio=priority,\n                tnVzBrCPName=contract,\n            ),\n        )\n\n        aci.get_diff(aci_class=aci_class)\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  aci epg contract short description  bind epgs contracts (fv rscons  fv rsprov) description    bind epgs contracts cisco aci fabrics  notes    the c(tenant)  c(app profile)  c(epg)  c(contract) used must exist using module playbook    the m(aci tenant)  m(aci ap)  m(aci epg)  m(aci contract) modules used    more information internal apic classes b(fv rscons) b(fv rsprov)   l(the apic management information model reference https   developer cisco com docs apic mim ref )  author    jacob mcgill ( jmcgill298) version added   2 4  options    ap      description        name existing application network profile  contain epgs      aliases    app profile  app profile name     contract      description        the name contract      aliases    contract name     contract type      description        determines epg provide consume contract      required  yes     choices    consumer  proivder     epg      description        the name end point group      aliases    epg name     priority      description        qos class        the apic defaults new epg contract bindings c(unspecified)      choices    level1  level2  level3  unspecified       default  unspecified   provider match      description        the matching algorithm provided contracts        the apic defaults new epg provided contracts c(at least one)      choices     least one  one  none       default  least one   state      description        use c(present) c(absent) adding removing        use c(query) listing object multiple objects      choices    absent  present  query       default  present   tenant      description        name existing tenant      aliases    tenant name   extends documentation fragment  aci      examples   r      name  add new contract epg binding   aci epg contract      host  apic     username  admin     password  somesecretpassword     tenant  anstest     ap  anstest     epg  anstest     contract  anstest http     contract type  provider     state  present    name  remove existing contract epg binding   aci epg contract      host  apic     username  admin     password  somesecretpassword     tenant  anstest     ap  anstest     epg  anstest     contract  anstest http     contract type  provider     state  absent    name  query specific contract epg binding   aci epg contract      host  apic     username  admin     password  somesecretpassword     tenant  anstest     ap  anstest     epg  anstest     contract  anstest http     contract type  provider     state  query    name  query provider contract epg bindings   aci epg contract      host  apic     username  admin     password  somesecretpassword     contract type  provider     state  query      return   r    current    description  the existing configuration apic module finished   returned  success   type  list   sample                               fvtenant                      attributes                          descr    production environment                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      error    description  the error information returned apic   returned  failure   type  dict   sample                 code    122            text    unknown managed object class foo        raw    description  the raw output returned apic rest api (xml json)   returned  parse error   type  string   sample     xml version  1 0  encoding  utf 8    imdata totalcount  1   error code  122  text  unknown managed object class foo     imdata   sent    description  the actual minimal configuration pushed apic   returned  info   type  list   sample                 fvtenant                  attributes                      descr    production environment                                previous    description  the original configuration apic module started   returned  info   type  list   sample                               fvtenant                      attributes                          descr    production                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      proposed    description  the assembled configuration user provided parameters   returned  info   type  dict   sample                 fvtenant                  attributes                      descr    production environment                    name    production                                filter string    description  the filter string used request   returned  failure debug   type  string   sample   rsp prop include config method    description  the http method used request apic   returned  failure debug   type  string   sample  post response    description  the http response apic   returned  failure debug   type  string   sample  ok (30 bytes) status    description  the http status apic   returned  failure debug   type  int   sample  200 url    description  the http url used request apic   returned  failure debug   type  string   sample  https   10 11 12 13 api mo uni tn production json         usr bin python        coding  utf 8        gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    not required querying objects    not required querying objects    not required querying objects    not required querying objects    deprecated starting v2 6    deprecated v2 6 ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_epg_to_contract\nshort_description: Bind EPGs to Contracts (fv:RsCons, fv:RsProv)\ndescription:\n- Bind EPGs to Contracts on Cisco ACI fabrics.\nnotes:\n- The C(tenant), C(app_profile), C(EPG), and C(Contract) used must exist before using this module in your playbook.\n  The M(aci_tenant), M(aci_ap), M(aci_epg), and M(aci_contract) modules can be used for this.\n- More information about the internal APIC classes B(fv:RsCons) and B(fv:RsProv) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Jacob McGill (@jmcgill298)\nversion_added: '2.4'\noptions:\n  ap:\n    description:\n    - Name of an existing application network profile, that will contain the EPGs.\n    aliases: [ app_profile, app_profile_name ]\n  contract:\n    description:\n    - The name of the contract.\n    aliases: [ contract_name ]\n  contract_type:\n    description:\n    - Determines if the EPG should Provide or Consume the Contract.\n    required: yes\n    choices: [ consumer, proivder ]\n  epg:\n    description:\n    - The name of the end point group.\n    aliases: [ epg_name ]\n  priority:\n    description:\n    - QoS class.\n    - The APIC defaults new EPG to Contract bindings to C(unspecified).\n    choices: [ level1, level2, level3, unspecified ]\n    default: unspecified\n  provider_match:\n    description:\n    - The matching algorithm for Provided Contracts.\n    - The APIC defaults new EPG to Provided Contracts to C(at_least_one).\n    choices: [ all, at_least_one, at_most_one, none ]\n    default: at_least_one\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\n  tenant:\n    description:\n    - Name of an existing tenant.\n    aliases: [ tenant_name ]\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add a new contract to EPG binding\n  aci_epg_to_contract:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: anstest\n    ap: anstest\n    epg: anstest\n    contract: anstest_http\n    contract_type: provider\n    state: present\n\n- name: Remove an existing contract to EPG binding\n  aci_epg_to_contract:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: anstest\n    ap: anstest\n    epg: anstest\n    contract: anstest_http\n    contract_type: provider\n    state: absent\n\n- name: Query a specific contract to EPG binding\n  aci_epg_to_contract:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: anstest\n    ap: anstest\n    epg: anstest\n    contract: anstest_http\n    contract_type: provider\n    state: query\n\n- name: Query all provider contract to EPG bindings\n  aci_epg_to_contract:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    contract_type: provider\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\nACI_CLASS_MAPPING = {\"consumer\": {\"class\": \"fvRsCons\", \"rn\": \"rscons-\"}, \"provider\": {\"class\": \"fvRsProv\", \"rn\": \"rsprov-\"}}\nPROVIDER_MATCH_MAPPING = {\"all\": \"All\", \"at_least_one\": \"AtleastOne\", \"at_most_one\": \"AtmostOne\", \"none\": \"None\"}\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        ap=dict(type='str', aliases=['app_profile', 'app_profile_name']),  # Not required for querying all objects\n        epg=dict(type='str', aliases=['epg_name']),  # Not required for querying all objects\n        contract=dict(type='str', aliases=['contract_name']),  # Not required for querying all objects\n        contract_type=dict(type='str', required=True, choices=['consumer', 'provider']),\n        priority=dict(type='str', choices=['level1', 'level2', 'level3', 'unspecified']),\n        provider_match=dict(type='str', choices=['all', 'at_least_one', 'at_most_one', 'none']),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n        tenant=dict(type='str', aliases=['tenant_name']),  # Not required for querying all objects\n        method=dict(type='str', choices=['delete', 'get', 'post'], aliases=['action'], removed_in_version='2.6'),  # Deprecated starting from v2.6\n        protocol=dict(type='str', removed_in_version='2.6'),  # Deprecated in v2.6\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['ap', 'contract', 'epg', 'tenant']],\n            ['state', 'present', ['ap', 'contract', 'epg', 'tenant']],\n        ],\n    )\n\n    ap = module.params['ap']\n    contract = module.params['contract']\n    contract_type = module.params['contract_type']\n    epg = module.params['epg']\n    priority = module.params['priority']\n    provider_match = module.params['provider_match']\n    if provider_match is not None:\n        provider_match = PROVIDER_MATCH_MAPPING[provider_match]\n    state = module.params['state']\n    tenant = module.params['tenant']\n\n    aci_class = ACI_CLASS_MAPPING[contract_type][\"class\"]\n    aci_rn = ACI_CLASS_MAPPING[contract_type][\"rn\"]\n\n    if contract_type == \"consumer\" and provider_match is not None:\n        module.fail_json(msg=\"the 'provider_match' is only configurable for Provided Contracts\")\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class='fvTenant',\n            aci_rn='tn-{0}'.format(tenant),\n            filter_target='eq(fvTenant.name, \"{0}\")'.format(tenant),\n            module_object=tenant,\n        ),\n        subclass_1=dict(\n            aci_class='fvAp',\n            aci_rn='ap-{0}'.format(ap),\n            filter_target='eq(fvAp.name, \"{0}\")'.format(ap),\n            module_object=ap,\n        ),\n        subclass_2=dict(\n            aci_class='fvAEPg',\n            aci_rn='epg-{0}'.format(epg),\n            filter_target='eq(fvAEPg.name, \"{0}\")'.format(epg),\n            module_object=epg,\n        ),\n        subclass_3=dict(\n            aci_class=aci_class,\n            aci_rn='{0}{1}'.format(aci_rn, contract),\n            filter_target='eq({0}.tnVzBrCPName, \"{1}'.format(aci_class, contract),\n            module_object=contract,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class=aci_class,\n            class_config=dict(\n                matchT=provider_match,\n                prio=priority,\n                tnVzBrCPName=contract,\n            ),\n        )\n\n        aci.get_diff(aci_class=aci_class)\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "aci_epg_to_contract.py", "id": "44bff9a9461e16fe18aab304db1e46d3", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aci/aci_epg_to_contract.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}