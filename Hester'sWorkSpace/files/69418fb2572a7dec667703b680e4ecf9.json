{"author": "keon", "code": "\"\"\"\nGiven a sorted integer array without duplicates,\nreturn the summary of its ranges.\n\nFor example, given [0,1,2,4,5,7], return [\"0->2\",\"4->5\",\"7\"].\n\"\"\"\n\n\ndef summary_ranges(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[str]\n    \"\"\"\n    res = []\n    if len(nums) == 1:\n        return [str(nums[0])]\n    i = 0\n    while i < len(nums):\n        num = nums[i]\n        while i+1 < len(nums) and nums[i+1] - nums[i] == 1:\n            i += 1\n        if nums[i] != num:\n            res.append(str(num) + \"->\" + str(nums[i]))\n        else:\n            res.append(str(num))\n        i += 1\n    return res\n", "comments": "    given sorted integer array without duplicates  return summary ranges   for example  given  0 1 2 4 5 7   return   0  2   4  5   7          def summary ranges(nums)               type nums  list int       rtype  list str          ", "content": "\"\"\"\nGiven a sorted integer array without duplicates,\nreturn the summary of its ranges.\n\nFor example, given [0,1,2,4,5,7], return [\"0->2\",\"4->5\",\"7\"].\n\"\"\"\n\n\ndef summary_ranges(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[str]\n    \"\"\"\n    res = []\n    if len(nums) == 1:\n        return [str(nums[0])]\n    i = 0\n    while i < len(nums):\n        num = nums[i]\n        while i+1 < len(nums) and nums[i+1] - nums[i] == 1:\n            i += 1\n        if nums[i] != num:\n            res.append(str(num) + \"->\" + str(nums[i]))\n        else:\n            res.append(str(num))\n        i += 1\n    return res\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "summary_ranges.py", "id": "69418fb2572a7dec667703b680e4ecf9", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/keon-algorithms/keon-algorithms-abe4cb1/array/summary_ranges.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:56:36Z", "url": "https://github.com/keon/algorithms", "wiki": true}