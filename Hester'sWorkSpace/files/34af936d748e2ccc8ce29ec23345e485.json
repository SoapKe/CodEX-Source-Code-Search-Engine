{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport pytest\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_ucs import Parameters\n    from library.bigip_ucs import ModuleManager\n    from library.bigip_ucs import ArgumentSpec\n    from library.bigip_ucs import V1Manager\n    from library.bigip_ucs import V2Manager\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_ucs import Parameters\n        from ansible.modules.network.f5.bigip_ucs import ModuleManager\n        from ansible.modules.network.f5.bigip_ucs import ArgumentSpec\n        from ansible.modules.network.f5.bigip_ucs import V1Manager\n        from ansible.modules.network.f5.bigip_ucs import V2Manager\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            force=True,\n            include_chassis_level_config=True,\n            no_license=True,\n            no_platform_check=True,\n            passphrase=\"foobar\",\n            reset_trust=True,\n            state='installed'\n        )\n\n        p = Parameters(params=args)\n        assert p.ucs == '/root/bigip.localhost.localdomain.ucs'\n        assert p.force is True\n        assert p.include_chassis_level_config is True\n        assert p.no_license is True\n        assert p.no_platform_check is True\n        assert p.passphrase == \"foobar\"\n        assert p.reset_trust is True\n        assert p.install_command == \\\n            \"tmsh load sys ucs /var/local/ucs/bigip.localhost.localdomain.ucs \" \\\n            \"include-chassis-level-config no-license no-platform-check \" \\\n            \"passphrase foobar reset-trust\"\n\n    def test_module_parameters_false_ucs_booleans(self):\n        args = dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            include_chassis_level_config=False,\n            no_license=False,\n            no_platform_check=False,\n            reset_trust=False\n        )\n\n        p = Parameters(params=args)\n        assert p.ucs == '/root/bigip.localhost.localdomain.ucs'\n        assert p.include_chassis_level_config is False\n        assert p.no_license is False\n        assert p.no_platform_check is False\n        assert p.reset_trust is False\n        assert p.install_command == \"tmsh load sys ucs /var/local/ucs/bigip.localhost.localdomain.ucs\"\n\n\nclass TestV1Manager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n        self.patcher1 = patch('time.sleep')\n        self.patcher1.start()\n\n    def tearDown(self):\n        self.patcher1.stop()\n\n    def test_ucs_default_present(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=True)\n\n        vm = V1Manager(module=module)\n        vm.create_on_device = Mock(return_value=True)\n        vm.exists = Mock(side_effect=[False, True])\n\n        results = vm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_ucs_explicit_present(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin',\n            state='present'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=True)\n\n        vm = V1Manager(module=module)\n        vm.create_on_device = Mock(return_value=True)\n        vm.exists = Mock(side_effect=[False, True])\n\n        results = vm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_ucs_installed(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin',\n            state='installed'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=True)\n\n        vm = V1Manager(module=module)\n        vm.create_on_device = Mock(return_value=True)\n        vm.exists = Mock(return_value=True)\n        vm.install_on_device = Mock(return_value=True)\n\n        results = vm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_ucs_absent_exists(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin',\n            state='absent'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=True)\n\n        vm = V1Manager(module=module)\n        vm.remove_from_device = Mock(return_value=True)\n        vm.exists = Mock(side_effect=[True, False])\n\n        results = vm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_ucs_absent_fails(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin',\n            state='absent'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=True)\n\n        vm = V1Manager(module=module)\n        vm.remove_from_device = Mock(return_value=True)\n        vm.exists = Mock(side_effect=[True, True])\n\n        with pytest.raises(F5ModuleError) as ex:\n            vm.exec_module()\n        assert 'Failed to delete' in str(ex.value)\n\n\nclass TestV2Manager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_ucs_default_present(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=False)\n\n        vm = V2Manager(module=module)\n        vm.create_on_device = Mock(return_value=True)\n        vm.exists = Mock(side_effect=[False, True])\n\n        results = vm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_ucs_explicit_present(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin',\n            state='present'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=False)\n\n        vm = V2Manager(module=module)\n        vm.create_on_device = Mock(return_value=True)\n        vm.exists = Mock(side_effect=[False, True])\n\n        results = vm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_ucs_installed(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin',\n            state='installed'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=False)\n\n        vm = V2Manager(module=module)\n        vm.create_on_device = Mock(return_value=True)\n        vm.exists = Mock(return_value=True)\n        vm.install_on_device = Mock(return_value=True)\n\n        results = vm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_ucs_absent_exists(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin',\n            state='absent'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=False)\n\n        vm = V1Manager(module=module)\n        vm.remove_from_device = Mock(return_value=True)\n        vm.exists = Mock(side_effect=[True, False])\n\n        results = vm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_ucs_absent_fails(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin',\n            state='absent'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=False)\n\n        vm = V1Manager(module=module)\n        vm.remove_from_device = Mock(return_value=True)\n        vm.exists = Mock(side_effect=[True, True])\n\n        with pytest.raises(F5ModuleError) as ex:\n            vm.exec_module()\n        assert 'Failed to delete' in str(ex.value)\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport pytest\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_ucs import Parameters\n    from library.bigip_ucs import ModuleManager\n    from library.bigip_ucs import ArgumentSpec\n    from library.bigip_ucs import V1Manager\n    from library.bigip_ucs import V2Manager\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_ucs import Parameters\n        from ansible.modules.network.f5.bigip_ucs import ModuleManager\n        from ansible.modules.network.f5.bigip_ucs import ArgumentSpec\n        from ansible.modules.network.f5.bigip_ucs import V1Manager\n        from ansible.modules.network.f5.bigip_ucs import V2Manager\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            force=True,\n            include_chassis_level_config=True,\n            no_license=True,\n            no_platform_check=True,\n            passphrase=\"foobar\",\n            reset_trust=True,\n            state='installed'\n        )\n\n        p = Parameters(params=args)\n        assert p.ucs == '/root/bigip.localhost.localdomain.ucs'\n        assert p.force is True\n        assert p.include_chassis_level_config is True\n        assert p.no_license is True\n        assert p.no_platform_check is True\n        assert p.passphrase == \"foobar\"\n        assert p.reset_trust is True\n        assert p.install_command == \\\n            \"tmsh load sys ucs /var/local/ucs/bigip.localhost.localdomain.ucs \" \\\n            \"include-chassis-level-config no-license no-platform-check \" \\\n            \"passphrase foobar reset-trust\"\n\n    def test_module_parameters_false_ucs_booleans(self):\n        args = dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            include_chassis_level_config=False,\n            no_license=False,\n            no_platform_check=False,\n            reset_trust=False\n        )\n\n        p = Parameters(params=args)\n        assert p.ucs == '/root/bigip.localhost.localdomain.ucs'\n        assert p.include_chassis_level_config is False\n        assert p.no_license is False\n        assert p.no_platform_check is False\n        assert p.reset_trust is False\n        assert p.install_command == \"tmsh load sys ucs /var/local/ucs/bigip.localhost.localdomain.ucs\"\n\n\nclass TestV1Manager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n        self.patcher1 = patch('time.sleep')\n        self.patcher1.start()\n\n    def tearDown(self):\n        self.patcher1.stop()\n\n    def test_ucs_default_present(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=True)\n\n        vm = V1Manager(module=module)\n        vm.create_on_device = Mock(return_value=True)\n        vm.exists = Mock(side_effect=[False, True])\n\n        results = vm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_ucs_explicit_present(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin',\n            state='present'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=True)\n\n        vm = V1Manager(module=module)\n        vm.create_on_device = Mock(return_value=True)\n        vm.exists = Mock(side_effect=[False, True])\n\n        results = vm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_ucs_installed(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin',\n            state='installed'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=True)\n\n        vm = V1Manager(module=module)\n        vm.create_on_device = Mock(return_value=True)\n        vm.exists = Mock(return_value=True)\n        vm.install_on_device = Mock(return_value=True)\n\n        results = vm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_ucs_absent_exists(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin',\n            state='absent'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=True)\n\n        vm = V1Manager(module=module)\n        vm.remove_from_device = Mock(return_value=True)\n        vm.exists = Mock(side_effect=[True, False])\n\n        results = vm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_ucs_absent_fails(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin',\n            state='absent'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=True)\n\n        vm = V1Manager(module=module)\n        vm.remove_from_device = Mock(return_value=True)\n        vm.exists = Mock(side_effect=[True, True])\n\n        with pytest.raises(F5ModuleError) as ex:\n            vm.exec_module()\n        assert 'Failed to delete' in str(ex.value)\n\n\nclass TestV2Manager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_ucs_default_present(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=False)\n\n        vm = V2Manager(module=module)\n        vm.create_on_device = Mock(return_value=True)\n        vm.exists = Mock(side_effect=[False, True])\n\n        results = vm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_ucs_explicit_present(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin',\n            state='present'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=False)\n\n        vm = V2Manager(module=module)\n        vm.create_on_device = Mock(return_value=True)\n        vm.exists = Mock(side_effect=[False, True])\n\n        results = vm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_ucs_installed(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin',\n            state='installed'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=False)\n\n        vm = V2Manager(module=module)\n        vm.create_on_device = Mock(return_value=True)\n        vm.exists = Mock(return_value=True)\n        vm.install_on_device = Mock(return_value=True)\n\n        results = vm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_ucs_absent_exists(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin',\n            state='absent'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=False)\n\n        vm = V1Manager(module=module)\n        vm.remove_from_device = Mock(return_value=True)\n        vm.exists = Mock(side_effect=[True, False])\n\n        results = vm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_ucs_absent_fails(self, *args):\n        set_module_args(dict(\n            ucs=\"/root/bigip.localhost.localdomain.ucs\",\n            server='localhost',\n            password='password',\n            user='admin',\n            state='absent'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.is_version_v1 = Mock(return_value=False)\n\n        vm = V1Manager(module=module)\n        vm.remove_from_device = Mock(return_value=True)\n        vm.exists = Mock(side_effect=[True, True])\n\n        with pytest.raises(F5ModuleError) as ex:\n            vm.exec_module()\n        assert 'Failed to delete' in str(ex.value)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_ucs.py", "id": "34af936d748e2ccc8ce29ec23345e485", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_ucs.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}