{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_unquote,\n    compat_xpath,\n)\nfrom ..utils import (\n    int_or_none,\n    find_xpath_attr,\n    xpath_text,\n    update_url_query,\n)\n\n\nclass NozIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?noz\\.de/video/(?P<id>[0-9]+)/'\n    _TESTS = [{\n        'url': 'http://www.noz.de/video/25151/32-Deutschland-gewinnt-Badminton-Lnderspiel-in-Melle',\n        'info_dict': {\n            'id': '25151',\n            'ext': 'mp4',\n            'duration': 215,\n            'title': '3:2 - Deutschland gewinnt Badminton-L\u00e4nderspiel in Melle',\n            'description': 'Vor rund 370 Zuschauern gewinnt die deutsche Badminton-Nationalmannschaft am Donnerstag ein EM-Vorbereitungsspiel gegen Frankreich in Melle. Video Moritz Frankenberg.',\n            'thumbnail': r're:^http://.*\\.jpg',\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        description = self._og_search_description(webpage)\n\n        edge_url = self._html_search_regex(\n            r'<script\\s+(?:type=\"text/javascript\"\\s+)?src=\"(.*?/videojs_.*?)\"',\n            webpage, 'edge URL')\n        edge_content = self._download_webpage(edge_url, 'meta configuration')\n\n        config_url_encoded = self._search_regex(\n            r'so\\.addVariable\\(\"config_url\",\"[^,]*,(.*?)\"',\n            edge_content, 'config URL'\n        )\n        config_url = compat_urllib_parse_unquote(config_url_encoded)\n\n        doc = self._download_xml(config_url, 'video configuration')\n        title = xpath_text(doc, './/title')\n        thumbnail = xpath_text(doc, './/article/thumbnail/url')\n        duration = int_or_none(xpath_text(\n            doc, './/article/movie/file/duration'))\n        formats = []\n        for qnode in doc.findall(compat_xpath('.//article/movie/file/qualities/qual')):\n            http_url_ele = find_xpath_attr(\n                qnode, './html_urls/video_url', 'format', 'video/mp4')\n            http_url = http_url_ele.text if http_url_ele is not None else None\n            if http_url:\n                formats.append({\n                    'url': http_url,\n                    'format_name': xpath_text(qnode, './name'),\n                    'format_id': '%s-%s' % ('http', xpath_text(qnode, './id')),\n                    'height': int_or_none(xpath_text(qnode, './height')),\n                    'width': int_or_none(xpath_text(qnode, './width')),\n                    'tbr': int_or_none(xpath_text(qnode, './bitrate'), scale=1000),\n                })\n            else:\n                f4m_url = xpath_text(qnode, 'url_hd2')\n                if f4m_url:\n                    formats.extend(self._extract_f4m_formats(\n                        update_url_query(f4m_url, {'hdcore': '3.4.0'}),\n                        video_id, f4m_id='hds', fatal=False))\n                m3u8_url_ele = find_xpath_attr(\n                    qnode, './html_urls/video_url',\n                    'format', 'application/vnd.apple.mpegurl')\n                m3u8_url = m3u8_url_ele.text if m3u8_url_ele is not None else None\n                if m3u8_url:\n                    formats.extend(self._extract_m3u8_formats(\n                        m3u8_url, video_id, 'mp4', 'm3u8_native',\n                        m3u8_id='hls', fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'duration': duration,\n            'description': description,\n            'thumbnail': thumbnail,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_unquote,\n    compat_xpath,\n)\nfrom ..utils import (\n    int_or_none,\n    find_xpath_attr,\n    xpath_text,\n    update_url_query,\n)\n\n\nclass NozIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?noz\\.de/video/(?P<id>[0-9]+)/'\n    _TESTS = [{\n        'url': 'http://www.noz.de/video/25151/32-Deutschland-gewinnt-Badminton-Lnderspiel-in-Melle',\n        'info_dict': {\n            'id': '25151',\n            'ext': 'mp4',\n            'duration': 215,\n            'title': '3:2 - Deutschland gewinnt Badminton-L\u00e4nderspiel in Melle',\n            'description': 'Vor rund 370 Zuschauern gewinnt die deutsche Badminton-Nationalmannschaft am Donnerstag ein EM-Vorbereitungsspiel gegen Frankreich in Melle. Video Moritz Frankenberg.',\n            'thumbnail': r're:^http://.*\\.jpg',\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        description = self._og_search_description(webpage)\n\n        edge_url = self._html_search_regex(\n            r'<script\\s+(?:type=\"text/javascript\"\\s+)?src=\"(.*?/videojs_.*?)\"',\n            webpage, 'edge URL')\n        edge_content = self._download_webpage(edge_url, 'meta configuration')\n\n        config_url_encoded = self._search_regex(\n            r'so\\.addVariable\\(\"config_url\",\"[^,]*,(.*?)\"',\n            edge_content, 'config URL'\n        )\n        config_url = compat_urllib_parse_unquote(config_url_encoded)\n\n        doc = self._download_xml(config_url, 'video configuration')\n        title = xpath_text(doc, './/title')\n        thumbnail = xpath_text(doc, './/article/thumbnail/url')\n        duration = int_or_none(xpath_text(\n            doc, './/article/movie/file/duration'))\n        formats = []\n        for qnode in doc.findall(compat_xpath('.//article/movie/file/qualities/qual')):\n            http_url_ele = find_xpath_attr(\n                qnode, './html_urls/video_url', 'format', 'video/mp4')\n            http_url = http_url_ele.text if http_url_ele is not None else None\n            if http_url:\n                formats.append({\n                    'url': http_url,\n                    'format_name': xpath_text(qnode, './name'),\n                    'format_id': '%s-%s' % ('http', xpath_text(qnode, './id')),\n                    'height': int_or_none(xpath_text(qnode, './height')),\n                    'width': int_or_none(xpath_text(qnode, './width')),\n                    'tbr': int_or_none(xpath_text(qnode, './bitrate'), scale=1000),\n                })\n            else:\n                f4m_url = xpath_text(qnode, 'url_hd2')\n                if f4m_url:\n                    formats.extend(self._extract_f4m_formats(\n                        update_url_query(f4m_url, {'hdcore': '3.4.0'}),\n                        video_id, f4m_id='hds', fatal=False))\n                m3u8_url_ele = find_xpath_attr(\n                    qnode, './html_urls/video_url',\n                    'format', 'application/vnd.apple.mpegurl')\n                m3u8_url = m3u8_url_ele.text if m3u8_url_ele is not None else None\n                if m3u8_url:\n                    formats.extend(self._extract_m3u8_formats(\n                        m3u8_url, video_id, 'mp4', 'm3u8_native',\n                        m3u8_id='hls', fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'duration': duration,\n            'description': description,\n            'thumbnail': thumbnail,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "noz.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/noz.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}