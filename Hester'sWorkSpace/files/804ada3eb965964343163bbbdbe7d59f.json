{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass MinotoIE(InfoExtractor):\n    _VALID_URL = r'(?:minoto:|https?://(?:play|iframe|embed)\\.minoto-video\\.com/(?P<player_id>[0-9]+)/)(?P<id>[a-zA-Z0-9]+)'\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        player_id = mobj.group('player_id') or '1'\n        video_id = mobj.group('id')\n        video_data = self._download_json('http://play.minoto-video.com/%s/%s.js' % (player_id, video_id), video_id)\n        video_metadata = video_data['video-metadata']\n        formats = []\n        for fmt in video_data['video-files']:\n            fmt_url = fmt.get('url')\n            if not fmt_url:\n                continue\n            container = fmt.get('container')\n            if container == 'hls':\n                formats.extend(fmt_url, video_id, 'mp4', m3u8_id='hls', fatal=False)\n            else:\n                fmt_profile = fmt.get('profile') or {}\n                f = {\n                    'format_id': fmt_profile.get('name-short'),\n                    'format_note': fmt_profile.get('name'),\n                    'url': fmt_url,\n                    'container': container,\n                    'tbr': int_or_none(fmt.get('bitrate')),\n                    'filesize': int_or_none(fmt.get('filesize')),\n                    'width': int_or_none(fmt.get('width')),\n                    'height': int_or_none(fmt.get('height')),\n                }\n                codecs = fmt.get('codecs')\n                if codecs:\n                    codecs = codecs.split(',')\n                    if len(codecs) == 2:\n                        f.update({\n                            'vcodec': codecs[0],\n                            'acodec': codecs[1],\n                        })\n                formats.append(f)\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video_metadata['title'],\n            'description': video_metadata.get('description'),\n            'thumbnail': video_metadata.get('video-poster', {}).get('url'),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass MinotoIE(InfoExtractor):\n    _VALID_URL = r'(?:minoto:|https?://(?:play|iframe|embed)\\.minoto-video\\.com/(?P<player_id>[0-9]+)/)(?P<id>[a-zA-Z0-9]+)'\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        player_id = mobj.group('player_id') or '1'\n        video_id = mobj.group('id')\n        video_data = self._download_json('http://play.minoto-video.com/%s/%s.js' % (player_id, video_id), video_id)\n        video_metadata = video_data['video-metadata']\n        formats = []\n        for fmt in video_data['video-files']:\n            fmt_url = fmt.get('url')\n            if not fmt_url:\n                continue\n            container = fmt.get('container')\n            if container == 'hls':\n                formats.extend(fmt_url, video_id, 'mp4', m3u8_id='hls', fatal=False)\n            else:\n                fmt_profile = fmt.get('profile') or {}\n                f = {\n                    'format_id': fmt_profile.get('name-short'),\n                    'format_note': fmt_profile.get('name'),\n                    'url': fmt_url,\n                    'container': container,\n                    'tbr': int_or_none(fmt.get('bitrate')),\n                    'filesize': int_or_none(fmt.get('filesize')),\n                    'width': int_or_none(fmt.get('width')),\n                    'height': int_or_none(fmt.get('height')),\n                }\n                codecs = fmt.get('codecs')\n                if codecs:\n                    codecs = codecs.split(',')\n                    if len(codecs) == 2:\n                        f.update({\n                            'vcodec': codecs[0],\n                            'acodec': codecs[1],\n                        })\n                formats.append(f)\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video_metadata['title'],\n            'description': video_metadata.get('description'),\n            'thumbnail': video_metadata.get('video-poster', {}).get('url'),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "minoto.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/minoto.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}