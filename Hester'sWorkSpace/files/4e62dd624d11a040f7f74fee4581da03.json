{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import http, _\nfrom odoo.addons.website_event.controllers.main import WebsiteEventController\nfrom odoo.http import request\n\n\nclass WebsiteEventSaleController(WebsiteEventController):\n\n    @http.route(['/event/<model(\"event.event\"):event>/register'], type='http', auth=\"public\", website=True)\n    def event_register(self, event, **post):\n        event = event.with_context(pricelist=request.website.get_current_pricelist().id)\n        return super(WebsiteEventSaleController, self).event_register(event, **post)\n\n    def _process_tickets_details(self, data):\n        ticket_post = {}\n        for key, value in data.items():\n            if not key.startswith('nb_register') or '-' not in key:\n                continue\n            items = key.split('-')\n            if len(items) < 2:\n                continue\n            ticket_post[int(items[1])] = int(value)\n        tickets = request.env['event.event.ticket'].browse(tuple(ticket_post))\n        return [{'id': ticket.id, 'name': ticket.name, 'quantity': ticket_post[ticket.id], 'price': ticket.price} for ticket in tickets if ticket_post[ticket.id]]\n\n    @http.route(['/event/<model(\"event.event\"):event>/registration/confirm'], type='http', auth=\"public\", methods=['POST'], website=True)\n    def registration_confirm(self, event, **post):\n        order = request.website.sale_get_order(force_create=1)\n        attendee_ids = set()\n\n        registrations = self._process_registration_details(post)\n        for registration in registrations:\n            ticket = request.env['event.event.ticket'].sudo().browse(int(registration['ticket_id']))\n            cart_values = order.with_context(event_ticket_id=ticket.id, fixed_price=True)._cart_update(product_id=ticket.product_id.id, add_qty=1, registration_data=[registration])\n            attendee_ids |= set(cart_values.get('attendee_ids', []))\n\n        \n        if not order.amount_total:\n            order.action_confirm()  ?\n            attendees = request.env['event.registration'].browse(list(attendee_ids))\n            \n            request.website.sale_reset()\n            return request.render(\"website_event.registration_complete\", {\n                'attendees': attendees,\n                'event': event,\n            })\n\n        return request.redirect(\"/shop/checkout\")\n\n    def _add_event(self, event_name=\"New Event\", context=None, **kwargs):\n        product = request.env.ref('event_sale.product_product_event', raise_if_not_found=False)\n        if product:\n            context = dict(context or {}, default_event_ticket_ids=[[0, 0, {\n                'name': _('Registration'),\n                'product_id': product.id,\n                'deadline': False,\n                'seats_max': 1000,\n                'price': 0,\n            }]])\n        return super(WebsiteEventSaleController, self)._add_event(event_name, context, **kwargs)\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     free tickets    order amount   0  auto confirm  checkout    tde notsure  email sending      clean context session  redirect confirmation page ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import http, _\nfrom odoo.addons.website_event.controllers.main import WebsiteEventController\nfrom odoo.http import request\n\n\nclass WebsiteEventSaleController(WebsiteEventController):\n\n    @http.route(['/event/<model(\"event.event\"):event>/register'], type='http', auth=\"public\", website=True)\n    def event_register(self, event, **post):\n        event = event.with_context(pricelist=request.website.get_current_pricelist().id)\n        return super(WebsiteEventSaleController, self).event_register(event, **post)\n\n    def _process_tickets_details(self, data):\n        ticket_post = {}\n        for key, value in data.items():\n            if not key.startswith('nb_register') or '-' not in key:\n                continue\n            items = key.split('-')\n            if len(items) < 2:\n                continue\n            ticket_post[int(items[1])] = int(value)\n        tickets = request.env['event.event.ticket'].browse(tuple(ticket_post))\n        return [{'id': ticket.id, 'name': ticket.name, 'quantity': ticket_post[ticket.id], 'price': ticket.price} for ticket in tickets if ticket_post[ticket.id]]\n\n    @http.route(['/event/<model(\"event.event\"):event>/registration/confirm'], type='http', auth=\"public\", methods=['POST'], website=True)\n    def registration_confirm(self, event, **post):\n        order = request.website.sale_get_order(force_create=1)\n        attendee_ids = set()\n\n        registrations = self._process_registration_details(post)\n        for registration in registrations:\n            ticket = request.env['event.event.ticket'].sudo().browse(int(registration['ticket_id']))\n            cart_values = order.with_context(event_ticket_id=ticket.id, fixed_price=True)._cart_update(product_id=ticket.product_id.id, add_qty=1, registration_data=[registration])\n            attendee_ids |= set(cart_values.get('attendee_ids', []))\n\n        # free tickets -> order with amount = 0: auto-confirm, no checkout\n        if not order.amount_total:\n            order.action_confirm()  # tde notsure: email sending ?\n            attendees = request.env['event.registration'].browse(list(attendee_ids))\n            # clean context and session, then redirect to the confirmation page\n            request.website.sale_reset()\n            return request.render(\"website_event.registration_complete\", {\n                'attendees': attendees,\n                'event': event,\n            })\n\n        return request.redirect(\"/shop/checkout\")\n\n    def _add_event(self, event_name=\"New Event\", context=None, **kwargs):\n        product = request.env.ref('event_sale.product_product_event', raise_if_not_found=False)\n        if product:\n            context = dict(context or {}, default_event_ticket_ids=[[0, 0, {\n                'name': _('Registration'),\n                'product_id': product.id,\n                'deadline': False,\n                'seats_max': 1000,\n                'price': 0,\n            }]])\n        return super(WebsiteEventSaleController, self)._add_event(event_name, context, **kwargs)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "4e62dd624d11a040f7f74fee4581da03", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_event_sale/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}