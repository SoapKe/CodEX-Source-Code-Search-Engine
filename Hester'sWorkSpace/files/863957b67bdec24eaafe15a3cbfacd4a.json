{"author": "ansible", "code": "\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rax_queue\nshort_description: create / delete a queue in Rackspace Public Cloud\ndescription:\n     - creates / deletes a Rackspace Public Cloud queue.\nversion_added: \"1.5\"\noptions:\n  name:\n    description:\n      - Name to give the queue\n  state:\n    description:\n      - Indicate desired state of the resource\n    choices:\n      - present\n      - absent\n    default: present\nauthor:\n    - \"Christopher H. Laco (@claco)\"\n    - \"Matt Martz (@sivel)\"\nextends_documentation_fragment:\n  - rackspace\n  - rackspace.openstack\n'''\n\nEXAMPLES = '''\n- name: Build a Queue\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n    - name: Queue create request\n      local_action:\n        module: rax_queue\n        credentials: ~/.raxpub\n        name: my-queue\n        region: DFW\n        state: present\n      register: my_queue\n'''\n\ntry:\n    import pyrax\n    HAS_PYRAX = True\nexcept ImportError:\n    HAS_PYRAX = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.rax import rax_argument_spec, rax_required_together, setup_rax_module\n\n\ndef cloud_queue(module, state, name):\n    for arg in (state, name):\n        if not arg:\n            module.fail_json(msg='%s is required for rax_queue' % arg)\n\n    changed = False\n    queues = []\n    instance = {}\n\n    cq = pyrax.queues\n    if not cq:\n        module.fail_json(msg='Failed to instantiate client. This '\n                             'typically indicates an invalid region or an '\n                             'incorrectly capitalized region name.')\n\n    for queue in cq.list():\n        if name != queue.name:\n            continue\n\n        queues.append(queue)\n\n    if len(queues) > 1:\n        module.fail_json(msg='Multiple Queues were matched by name')\n\n    if state == 'present':\n        if not queues:\n            try:\n                queue = cq.create(name)\n                changed = True\n            except Exception as e:\n                module.fail_json(msg='%s' % e.message)\n        else:\n            queue = queues[0]\n\n        instance = dict(name=queue.name)\n        result = dict(changed=changed, queue=instance)\n        module.exit_json(**result)\n\n    elif state == 'absent':\n        if queues:\n            queue = queues[0]\n            try:\n                queue.delete()\n                changed = True\n            except Exception as e:\n                module.fail_json(msg='%s' % e.message)\n\n    module.exit_json(changed=changed, queue=instance)\n\n\ndef main():\n    argument_spec = rax_argument_spec()\n    argument_spec.update(\n        dict(\n            name=dict(),\n            state=dict(default='present', choices=['present', 'absent']),\n        )\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        required_together=rax_required_together()\n    )\n\n    if not HAS_PYRAX:\n        module.fail_json(msg='pyrax is required for this module')\n\n    name = module.params.get('name')\n    state = module.params.get('state')\n\n    setup_rax_module(module, pyrax)\n\n    cloud_queue(module, state, name)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  rax queue short description  create   delete queue rackspace public cloud description         creates   deletes rackspace public cloud queue  version added   1 5  options    name      description          name give queue   state      description          indicate desired state resource     choices          present         absent     default  present author         christopher h  laco ( claco)         matt martz ( sivel)  extends documentation fragment      rackspace     rackspace openstack      examples         name  build queue   gather facts  false   hosts  local   connection  local   tasks        name  queue create request       local action          module  rax queue         credentials     raxpub         name  queue         region  dfw         state  present       register  queue         usr bin python    copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "#!/usr/bin/python\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rax_queue\nshort_description: create / delete a queue in Rackspace Public Cloud\ndescription:\n     - creates / deletes a Rackspace Public Cloud queue.\nversion_added: \"1.5\"\noptions:\n  name:\n    description:\n      - Name to give the queue\n  state:\n    description:\n      - Indicate desired state of the resource\n    choices:\n      - present\n      - absent\n    default: present\nauthor:\n    - \"Christopher H. Laco (@claco)\"\n    - \"Matt Martz (@sivel)\"\nextends_documentation_fragment:\n  - rackspace\n  - rackspace.openstack\n'''\n\nEXAMPLES = '''\n- name: Build a Queue\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n    - name: Queue create request\n      local_action:\n        module: rax_queue\n        credentials: ~/.raxpub\n        name: my-queue\n        region: DFW\n        state: present\n      register: my_queue\n'''\n\ntry:\n    import pyrax\n    HAS_PYRAX = True\nexcept ImportError:\n    HAS_PYRAX = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.rax import rax_argument_spec, rax_required_together, setup_rax_module\n\n\ndef cloud_queue(module, state, name):\n    for arg in (state, name):\n        if not arg:\n            module.fail_json(msg='%s is required for rax_queue' % arg)\n\n    changed = False\n    queues = []\n    instance = {}\n\n    cq = pyrax.queues\n    if not cq:\n        module.fail_json(msg='Failed to instantiate client. This '\n                             'typically indicates an invalid region or an '\n                             'incorrectly capitalized region name.')\n\n    for queue in cq.list():\n        if name != queue.name:\n            continue\n\n        queues.append(queue)\n\n    if len(queues) > 1:\n        module.fail_json(msg='Multiple Queues were matched by name')\n\n    if state == 'present':\n        if not queues:\n            try:\n                queue = cq.create(name)\n                changed = True\n            except Exception as e:\n                module.fail_json(msg='%s' % e.message)\n        else:\n            queue = queues[0]\n\n        instance = dict(name=queue.name)\n        result = dict(changed=changed, queue=instance)\n        module.exit_json(**result)\n\n    elif state == 'absent':\n        if queues:\n            queue = queues[0]\n            try:\n                queue.delete()\n                changed = True\n            except Exception as e:\n                module.fail_json(msg='%s' % e.message)\n\n    module.exit_json(changed=changed, queue=instance)\n\n\ndef main():\n    argument_spec = rax_argument_spec()\n    argument_spec.update(\n        dict(\n            name=dict(),\n            state=dict(default='present', choices=['present', 'absent']),\n        )\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        required_together=rax_required_together()\n    )\n\n    if not HAS_PYRAX:\n        module.fail_json(msg='pyrax is required for this module')\n\n    name = module.params.get('name')\n    state = module.params.get('state')\n\n    setup_rax_module(module, pyrax)\n\n    cloud_queue(module, state, name)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "rax_queue.py", "id": "863957b67bdec24eaafe15a3cbfacd4a", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/rackspace/rax_queue.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}