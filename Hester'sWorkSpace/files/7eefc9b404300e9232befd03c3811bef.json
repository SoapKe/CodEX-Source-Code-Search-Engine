{"author": "tgalal", "code": "import sys, tempfile, logging\nlogger = logging.getLogger(__name__)\n\nif sys.version_info >= (3, 0):\n    from urllib.request import urlopen\n    from urllib.parse import urlencode\nelse:\n    from urllib2 import urlopen\n    from urllib import urlencode\n\n\nclass MediaDownloader:\n    def __init__(self, successClbk = None, errorClbk = None, progressCallback = None):\n        self.successCallback = successClbk\n        self.errorCallback = errorClbk\n        self.progressCallback = progressCallback\n\n    def download(self, url = \"\"):\n        try:\n            \n            if not url:\n                if self.url:\n                    url = \"https://\" if self.port == 443 else \"http://\"\n                    url = url + self.url\n                    url = url + \"?\" + urlencode(self.params)\n                    logger.debug(\"URL is %s\" % url)\n                else:\n                    raise Exception(\"No url specified for fetching\")\n            \n            u = urlopen(url)\n            \n            path = tempfile.mkstemp()[1]\n            with open(path, \"wb\") as f:\n                meta = u.info()\n\n                if sys.version_info >= (3, 0):\n                    fileSize = int(u.getheader(\"Content-Length\"))\n                else:\n                    fileSize = int(meta.getheaders(\"Content-Length\")[0])\n\n                fileSizeDl = 0\n                blockSz = 8192\n                lastEmit = 0\n                while True:\n                    buf = u.read(blockSz)\n\n                    if not buf:\n                        break\n\n                    fileSizeDl += len(buf)\n                    f.write(buf)\n                    status = (fileSizeDl * 100 / fileSize)\n\n                    if self.progressCallback and lastEmit != status:\n                        self.progressCallback(int(status))\n                        lastEmit = status;\n\n            if self.successCallback:\n                self.successCallback(path)\n        except:\n            logger.exception(\"Error occured at transfer\")\n            if self.errorCallback:\n                self.errorCallback();", "comments": "", "content": "import sys, tempfile, logging\nlogger = logging.getLogger(__name__)\n\nif sys.version_info >= (3, 0):\n    from urllib.request import urlopen\n    from urllib.parse import urlencode\nelse:\n    from urllib2 import urlopen\n    from urllib import urlencode\n\n\nclass MediaDownloader:\n    def __init__(self, successClbk = None, errorClbk = None, progressCallback = None):\n        self.successCallback = successClbk\n        self.errorCallback = errorClbk\n        self.progressCallback = progressCallback\n\n    def download(self, url = \"\"):\n        try:\n            \n            if not url:\n                if self.url:\n                    url = \"https://\" if self.port == 443 else \"http://\"\n                    url = url + self.url\n                    url = url + \"?\" + urlencode(self.params)\n                    logger.debug(\"URL is %s\" % url)\n                else:\n                    raise Exception(\"No url specified for fetching\")\n            \n            u = urlopen(url)\n            \n            path = tempfile.mkstemp()[1]\n            with open(path, \"wb\") as f:\n                meta = u.info()\n\n                if sys.version_info >= (3, 0):\n                    fileSize = int(u.getheader(\"Content-Length\"))\n                else:\n                    fileSize = int(meta.getheaders(\"Content-Length\")[0])\n\n                fileSizeDl = 0\n                blockSz = 8192\n                lastEmit = 0\n                while True:\n                    buf = u.read(blockSz)\n\n                    if not buf:\n                        break\n\n                    fileSizeDl += len(buf)\n                    f.write(buf)\n                    status = (fileSizeDl * 100 / fileSize)\n\n                    if self.progressCallback and lastEmit != status:\n                        self.progressCallback(int(status))\n                        lastEmit = status;\n\n            if self.successCallback:\n                self.successCallback(path)\n        except:\n            logger.exception(\"Error occured at transfer\")\n            if self.errorCallback:\n                self.errorCallback();", "description": "The python WhatsApp library", "file_name": "mediadownloader.py", "id": "7eefc9b404300e9232befd03c3811bef", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_media/mediadownloader.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}