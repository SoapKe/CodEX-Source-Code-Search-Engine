{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    js_to_json,\n)\n\n\nclass OnDemandKoreaIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?ondemandkorea\\.com/(?P<id>[^/]+)\\.html'\n    _GEO_COUNTRIES = ['US', 'CA']\n    _TEST = {\n        'url': 'http://www.ondemandkorea.com/ask-us-anything-e43.html',\n        'info_dict': {\n            'id': 'ask-us-anything-e43',\n            'ext': 'mp4',\n            'title': 'Ask Us Anything : E43',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n        'params': {\n            'skip_download': 'm3u8 download'\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id, fatal=False)\n\n        if not webpage:\n            \n            raise ExtractorError(\n                'Unable to access page. You may have been blocked.',\n                expected=True)\n\n        if 'msg_block_01.png' in webpage:\n            self.raise_geo_restricted(\n                msg='This content is not available in your region',\n                countries=self._GEO_COUNTRIES)\n\n        if 'This video is only available to ODK PLUS members.' in webpage:\n            raise ExtractorError(\n                'This video is only available to ODK PLUS members.',\n                expected=True)\n\n        title = self._og_search_title(webpage)\n\n        jw_config = self._parse_json(\n            self._search_regex(\n                r'(?s)jwplayer\\(([\\'\"])(?:(?!\\1).)+\\1\\)\\.setup\\s*\\((?P<options>.+?)\\);',\n                webpage, 'jw config', group='options'),\n            video_id, transform_source=js_to_json)\n        info = self._parse_jwplayer_data(\n            jw_config, video_id, require_title=False, m3u8_id='hls',\n            base_url=url)\n\n        info.update({\n            'title': title,\n            'thumbnail': self._og_search_thumbnail(webpage),\n        })\n        return info\n", "comments": "# coding: utf-8\n# Page sometimes returns captcha page with HTTP 403\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    js_to_json,\n)\n\n\nclass OnDemandKoreaIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?ondemandkorea\\.com/(?P<id>[^/]+)\\.html'\n    _GEO_COUNTRIES = ['US', 'CA']\n    _TEST = {\n        'url': 'http://www.ondemandkorea.com/ask-us-anything-e43.html',\n        'info_dict': {\n            'id': 'ask-us-anything-e43',\n            'ext': 'mp4',\n            'title': 'Ask Us Anything : E43',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n        'params': {\n            'skip_download': 'm3u8 download'\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id, fatal=False)\n\n        if not webpage:\n            # Page sometimes returns captcha page with HTTP 403\n            raise ExtractorError(\n                'Unable to access page. You may have been blocked.',\n                expected=True)\n\n        if 'msg_block_01.png' in webpage:\n            self.raise_geo_restricted(\n                msg='This content is not available in your region',\n                countries=self._GEO_COUNTRIES)\n\n        if 'This video is only available to ODK PLUS members.' in webpage:\n            raise ExtractorError(\n                'This video is only available to ODK PLUS members.',\n                expected=True)\n\n        title = self._og_search_title(webpage)\n\n        jw_config = self._parse_json(\n            self._search_regex(\n                r'(?s)jwplayer\\(([\\'\"])(?:(?!\\1).)+\\1\\)\\.setup\\s*\\((?P<options>.+?)\\);',\n                webpage, 'jw config', group='options'),\n            video_id, transform_source=js_to_json)\n        info = self._parse_jwplayer_data(\n            jw_config, video_id, require_title=False, m3u8_id='hls',\n            base_url=url)\n\n        info.update({\n            'title': title,\n            'thumbnail': self._og_search_thumbnail(webpage),\n        })\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "ondemandkorea.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/ondemandkorea.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}