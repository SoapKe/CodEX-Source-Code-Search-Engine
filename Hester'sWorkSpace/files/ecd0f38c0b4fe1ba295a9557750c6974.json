{"author": "ansible", "code": "\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = | rax_mon_entity -> rax_mon_check ->\n  *rax_mon_notification* -> rax_mon_notification_plan -> rax_mon_alarm\nversion_added: \"2.0\"\noptions:\n  state:\n    description:\n    - Ensure that the notification with this C(label) exists or does not exist.\n    choices: ['present', 'absent']\n  label:\n    description:\n    - Defines a friendly name for this notification. String between 1 and 255\n      characters long.\n    required: true\n  notification_type:\n    description:\n    - A supported notification type.\n    choices: [\"webhook\", \"email\", \"pagerduty\"]\n    required: true\n  details:\n    description:\n    - Dictionary of key-value pairs used to initialize the notification.\n      Required keys and meanings vary with notification type. See\n      http://docs.rackspace.com/cm/api/v1.0/cm-devguide/content/\n      service-notification-types-crud.html for details.\n    required: true\nauthor: Ash Wilson\nextends_documentation_fragment: rackspace.openstack\n'''\n\nEXAMPLES = '''\n- name: Monitoring notification example\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n  - name: Email me when something goes wrong.\n    rax_mon_entity:\n      credentials: ~/.rax_pub\n      label: omg\n      type: email\n      details:\n        address: me@mailhost.com\n    register: the_notification\n'''\n\ntry:\n    import pyrax\n    HAS_PYRAX = True\nexcept ImportError:\n    HAS_PYRAX = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.rax import rax_argument_spec, rax_required_together, setup_rax_module\n\n\ndef notification(module, state, label, notification_type, details):\n\n    if len(label) < 1 or len(label) > 255:\n        module.fail_json(msg='label must be between 1 and 255 characters long')\n\n    changed = False\n    notification = None\n\n    cm = pyrax.cloud_monitoring\n    if not cm:\n        module.fail_json(msg='Failed to instantiate client. This typically '\n                             'indicates an invalid region or an incorrectly '\n                             'capitalized region name.')\n\n    existing = []\n    for n in cm.list_notifications():\n        if n.label == label:\n            existing.append(n)\n\n    if existing:\n        notification = existing[0]\n\n    if state == 'present':\n        should_update = False\n        should_delete = False\n        should_create = False\n\n        if len(existing) > 1:\n            module.fail_json(msg='%s existing notifications are labelled %s.' %\n                                 (len(existing), label))\n\n        if notification:\n            should_delete = (notification_type != notification.type)\n\n            should_update = (details != notification.details)\n\n            if should_update and not should_delete:\n                notification.update(details=notification.details)\n                changed = True\n\n            if should_delete:\n                notification.delete()\n        else:\n            should_create = True\n\n        if should_create:\n            notification = cm.create_notification(notification_type,\n                                                  label=label, details=details)\n            changed = True\n    else:\n        for n in existing:\n            n.delete()\n            changed = True\n\n    if notification:\n        notification_dict = {\n            \"id\": notification.id,\n            \"type\": notification.type,\n            \"label\": notification.label,\n            \"details\": notification.details\n        }\n        module.exit_json(changed=changed, notification=notification_dict)\n    else:\n        module.exit_json(changed=changed)\n\n\ndef main():\n    argument_spec = rax_argument_spec()\n    argument_spec.update(\n        dict(\n            state=dict(default='present', choices=['present', 'absent']),\n            label=dict(required=True),\n            notification_type=dict(required=True, choices=['webhook', 'email', 'pagerduty']),\n            details=dict(required=True, type='dict')\n        )\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        required_together=rax_required_together()\n    )\n\n    if not HAS_PYRAX:\n        module.fail_json(msg='pyrax is required for this module')\n\n    state = module.params.get('state')\n\n    label = module.params.get('label')\n    notification_type = module.params.get('notification_type')\n    details = module.params.get('details')\n\n    setup_rax_module(module, pyrax)\n\n    notification(module, state, label, notification_type, details)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  rax mon notification short description  create delete rackspace cloud monitoring notification  description    create delete rackspace cloud monitoring notification specifies   channel used communicate alarms  email  webhooks    pagerduty  rackspace monitoring module flow   rax mon entity    rax mon check       rax mon notification     rax mon notification plan    rax mon alarm version added   2 0  options    state      description        ensure notification c(label) exists exist      choices    present    absent     label      description        defines friendly name notification  string 1 255       characters long      required  true   notification type      description        a supported notification type      choices    webhook    email    pagerduty       required  true   details      description        dictionary key value pairs used initialize notification        required keys meanings vary notification type  see       http   docs rackspace com cm api v1 0 cm devguide content        service notification types crud html details      required  true author  ash wilson extends documentation fragment  rackspace openstack      examples         name  monitoring notification example   gather facts  false   hosts  local   connection  local   tasks      name  email something goes wrong      rax mon entity        credentials     rax pub       label  omg       type  email       details          address  mailhost com     register  notification         usr bin python    copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "#!/usr/bin/python\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rax_mon_notification\nshort_description: Create or delete a Rackspace Cloud Monitoring notification.\ndescription:\n- Create or delete a Rackspace Cloud Monitoring notification that specifies a\n  channel that can be used to communicate alarms, such as email, webhooks, or\n  PagerDuty. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check ->\n  *rax_mon_notification* -> rax_mon_notification_plan -> rax_mon_alarm\nversion_added: \"2.0\"\noptions:\n  state:\n    description:\n    - Ensure that the notification with this C(label) exists or does not exist.\n    choices: ['present', 'absent']\n  label:\n    description:\n    - Defines a friendly name for this notification. String between 1 and 255\n      characters long.\n    required: true\n  notification_type:\n    description:\n    - A supported notification type.\n    choices: [\"webhook\", \"email\", \"pagerduty\"]\n    required: true\n  details:\n    description:\n    - Dictionary of key-value pairs used to initialize the notification.\n      Required keys and meanings vary with notification type. See\n      http://docs.rackspace.com/cm/api/v1.0/cm-devguide/content/\n      service-notification-types-crud.html for details.\n    required: true\nauthor: Ash Wilson\nextends_documentation_fragment: rackspace.openstack\n'''\n\nEXAMPLES = '''\n- name: Monitoring notification example\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n  - name: Email me when something goes wrong.\n    rax_mon_entity:\n      credentials: ~/.rax_pub\n      label: omg\n      type: email\n      details:\n        address: me@mailhost.com\n    register: the_notification\n'''\n\ntry:\n    import pyrax\n    HAS_PYRAX = True\nexcept ImportError:\n    HAS_PYRAX = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.rax import rax_argument_spec, rax_required_together, setup_rax_module\n\n\ndef notification(module, state, label, notification_type, details):\n\n    if len(label) < 1 or len(label) > 255:\n        module.fail_json(msg='label must be between 1 and 255 characters long')\n\n    changed = False\n    notification = None\n\n    cm = pyrax.cloud_monitoring\n    if not cm:\n        module.fail_json(msg='Failed to instantiate client. This typically '\n                             'indicates an invalid region or an incorrectly '\n                             'capitalized region name.')\n\n    existing = []\n    for n in cm.list_notifications():\n        if n.label == label:\n            existing.append(n)\n\n    if existing:\n        notification = existing[0]\n\n    if state == 'present':\n        should_update = False\n        should_delete = False\n        should_create = False\n\n        if len(existing) > 1:\n            module.fail_json(msg='%s existing notifications are labelled %s.' %\n                                 (len(existing), label))\n\n        if notification:\n            should_delete = (notification_type != notification.type)\n\n            should_update = (details != notification.details)\n\n            if should_update and not should_delete:\n                notification.update(details=notification.details)\n                changed = True\n\n            if should_delete:\n                notification.delete()\n        else:\n            should_create = True\n\n        if should_create:\n            notification = cm.create_notification(notification_type,\n                                                  label=label, details=details)\n            changed = True\n    else:\n        for n in existing:\n            n.delete()\n            changed = True\n\n    if notification:\n        notification_dict = {\n            \"id\": notification.id,\n            \"type\": notification.type,\n            \"label\": notification.label,\n            \"details\": notification.details\n        }\n        module.exit_json(changed=changed, notification=notification_dict)\n    else:\n        module.exit_json(changed=changed)\n\n\ndef main():\n    argument_spec = rax_argument_spec()\n    argument_spec.update(\n        dict(\n            state=dict(default='present', choices=['present', 'absent']),\n            label=dict(required=True),\n            notification_type=dict(required=True, choices=['webhook', 'email', 'pagerduty']),\n            details=dict(required=True, type='dict')\n        )\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        required_together=rax_required_together()\n    )\n\n    if not HAS_PYRAX:\n        module.fail_json(msg='pyrax is required for this module')\n\n    state = module.params.get('state')\n\n    label = module.params.get('label')\n    notification_type = module.params.get('notification_type')\n    details = module.params.get('details')\n\n    setup_rax_module(module, pyrax)\n\n    notification(module, state, label, notification_type, details)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "rax_mon_notification.py", "id": "ecd0f38c0b4fe1ba295a9557750c6974", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/rackspace/rax_mon_notification.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}