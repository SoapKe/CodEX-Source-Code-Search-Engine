{"author": "HelloZeroNet", "code": "import logging\nimport json\nimport time\n\nimport util\nfrom Crypt import CryptBitcoin\nfrom Plugin import PluginManager\nfrom Config import config\nfrom util import helper\n\n\n@PluginManager.acceptPlugins\nclass User(object):\n    def __init__(self, master_address=None, master_seed=None, data={}):\n        if master_seed:\n            self.master_seed = master_seed\n            self.master_address = CryptBitcoin.privatekeyToAddress(self.master_seed)\n        elif master_address:\n            self.master_address = master_address\n            self.master_seed = data.get(\"master_seed\")\n        else:\n            self.master_seed = CryptBitcoin.newSeed()\n            self.master_address = CryptBitcoin.privatekeyToAddress(self.master_seed)\n        self.sites = data.get(\"sites\", {})\n        self.certs = data.get(\"certs\", {})\n\n        self.log = logging.getLogger(\"User:%s\" % self.master_address)\n\n    \n    @util.Noparallel(queue=True, ignore_class=True)\n    def save(self):\n        s = time.time()\n        users = json.load(open(\"%s/users.json\" % config.data_dir))\n        if self.master_address not in users:\n            users[self.master_address] = {}  \n        user_data = users[self.master_address]\n        if self.master_seed:\n            user_data[\"master_seed\"] = self.master_seed\n        user_data[\"sites\"] = self.sites\n        user_data[\"certs\"] = self.certs\n        helper.atomicWrite(\"%s/users.json\" % config.data_dir, json.dumps(users, indent=2, sort_keys=True))\n        self.log.debug(\"Saved in %.3fs\" % (time.time()-s))\n\n    def getAddressAuthIndex(self, address):\n        return int(address.encode(\"hex\"), 16)\n\n    \n    \n    def getSiteData(self, address, create=True):\n        if address not in self.sites:  \n            if not create:\n                return {\"auth_address\": None, \"auth_privatekey\": None}  \n            s = time.time()\n            address_id = self.getAddressAuthIndex(address)  \n            auth_privatekey = CryptBitcoin.hdPrivatekey(self.master_seed, address_id)\n            self.sites[address] = {\n                \"auth_address\": CryptBitcoin.privatekeyToAddress(auth_privatekey),\n                \"auth_privatekey\": auth_privatekey\n            }\n            self.save()\n            self.log.debug(\"Added new site: %s in %.3fs\" % (address, time.time() - s))\n        return self.sites[address]\n\n    def deleteSiteData(self, address):\n        if address in self.sites:\n            del(self.sites[address])\n            self.save()\n            self.log.debug(\"Deleted site: %s\" % address)\n\n    def setSettings(self, address, settings):\n        site_data = self.getSiteData(address)\n        site_data[\"settings\"] = settings\n        self.save()\n        return site_data\n\n    \n    # Return: [site_address, bip32_index, {\"auth_address\": \"xxx\", \"auth_privatekey\": \"xxx\", \"privatekey\": \"xxx\"}]\n    def getNewSiteData(self):\n        import random\n        bip32_index = random.randrange(2 ** 256) % 100000000\n        site_privatekey = CryptBitcoin.hdPrivatekey(self.master_seed, bip32_index)\n        site_address = CryptBitcoin.privatekeyToAddress(site_privatekey)\n        if site_address in self.sites:\n            raise Exception(\"Random error: site exist!\")\n        \n        self.getSiteData(site_address)\n        self.sites[site_address][\"privatekey\"] = site_privatekey\n        self.save()\n        return site_address, bip32_index, self.sites[site_address]\n\n    \n    \n    def getAuthAddress(self, address, create=True):\n        cert = self.getCert(address)\n        if cert:\n            return cert[\"auth_address\"]\n        else:\n            return self.getSiteData(address, create)[\"auth_address\"]\n\n    def getAuthPrivatekey(self, address, create=True):\n        cert = self.getCert(address)\n        if cert:\n            return cert[\"auth_privatekey\"]\n        else:\n            return self.getSiteData(address, create)[\"auth_privatekey\"]\n\n    \n    def addCert(self, auth_address, domain, auth_type, auth_user_name, cert_sign):\n        domain = domain.lower()\n        \n        auth_privatekey = [site[\"auth_privatekey\"] for site in self.sites.values() if site[\"auth_address\"] == auth_address][0]\n        cert_node = {\n            \"auth_address\": auth_address,\n            \"auth_privatekey\": auth_privatekey,\n            \"auth_type\": auth_type,\n            \"auth_user_name\": auth_user_name,\n            \"cert_sign\": cert_sign\n        }\n        \n        if self.certs.get(domain) and self.certs[domain] != cert_node:\n            return False\n        elif self.certs.get(domain) == cert_node:  \n            return None\n        else:  \n            self.certs[domain] = cert_node\n            self.save()\n            return True\n\n    \n    def deleteCert(self, domain):\n        del self.certs[domain]\n\n    \n    def setCert(self, address, domain):\n        site_data = self.getSiteData(address)\n        if domain:\n            site_data[\"cert\"] = domain\n        else:\n            if \"cert\" in site_data:\n                del site_data[\"cert\"]\n        self.save()\n        return site_data\n\n    \n     \"auth_address\":.., \"auth_privatekey\":.., \"auth_type\": \"web\", \"auth_user_name\": \"nofish\", \"cert_sign\":.. } or None\n    def getCert(self, address):\n        site_data = self.getSiteData(address, create=False)\n        if not site_data or \"cert\" not in site_data:\n            return None  \n        return self.certs.get(site_data[\"cert\"])\n\n    \n    ser@certprovider.bit or None\n    def getCertUserId(self, address):\n        site_data = self.getSiteData(address, create=False)\n        if not site_data or \"cert\" not in site_data:\n            return None  \n        cert = self.certs.get(site_data[\"cert\"])\n        if cert:\n            return cert[\"auth_user_name\"] + \"@\" + site_data[\"cert\"]\n", "comments": "  save data users json    create exist    get user site data    return    auth address    xxx    auth privatekey    xxx      generate new bip32 child key based site address    dont create user yet    convert site address int    get data new  unique site    return   site address  bip32 index    auth address    xxx    auth privatekey    xxx    privatekey    xxx       save sites    get bip32 address site address    return  bip32 auth address    add cert user    find privatekey auth address    check already cert domain    same  updated    not exist yet  add    remove cert user    set active cert site    get cert site address    return     auth address       auth privatekey       auth type    web    auth user name    nofish    cert sign       none    site dont cert    get cert user name site address    return  user certprovider bit none    site dont cert ", "content": "import logging\nimport json\nimport time\n\nimport util\nfrom Crypt import CryptBitcoin\nfrom Plugin import PluginManager\nfrom Config import config\nfrom util import helper\n\n\n@PluginManager.acceptPlugins\nclass User(object):\n    def __init__(self, master_address=None, master_seed=None, data={}):\n        if master_seed:\n            self.master_seed = master_seed\n            self.master_address = CryptBitcoin.privatekeyToAddress(self.master_seed)\n        elif master_address:\n            self.master_address = master_address\n            self.master_seed = data.get(\"master_seed\")\n        else:\n            self.master_seed = CryptBitcoin.newSeed()\n            self.master_address = CryptBitcoin.privatekeyToAddress(self.master_seed)\n        self.sites = data.get(\"sites\", {})\n        self.certs = data.get(\"certs\", {})\n\n        self.log = logging.getLogger(\"User:%s\" % self.master_address)\n\n    # Save to data/users.json\n    @util.Noparallel(queue=True, ignore_class=True)\n    def save(self):\n        s = time.time()\n        users = json.load(open(\"%s/users.json\" % config.data_dir))\n        if self.master_address not in users:\n            users[self.master_address] = {}  # Create if not exist\n        user_data = users[self.master_address]\n        if self.master_seed:\n            user_data[\"master_seed\"] = self.master_seed\n        user_data[\"sites\"] = self.sites\n        user_data[\"certs\"] = self.certs\n        helper.atomicWrite(\"%s/users.json\" % config.data_dir, json.dumps(users, indent=2, sort_keys=True))\n        self.log.debug(\"Saved in %.3fs\" % (time.time()-s))\n\n    def getAddressAuthIndex(self, address):\n        return int(address.encode(\"hex\"), 16)\n\n    # Get user site data\n    # Return: {\"auth_address\": \"xxx\", \"auth_privatekey\": \"xxx\"}\n    def getSiteData(self, address, create=True):\n        if address not in self.sites:  # Generate new BIP32 child key based on site address\n            if not create:\n                return {\"auth_address\": None, \"auth_privatekey\": None}  # Dont create user yet\n            s = time.time()\n            address_id = self.getAddressAuthIndex(address)  # Convert site address to int\n            auth_privatekey = CryptBitcoin.hdPrivatekey(self.master_seed, address_id)\n            self.sites[address] = {\n                \"auth_address\": CryptBitcoin.privatekeyToAddress(auth_privatekey),\n                \"auth_privatekey\": auth_privatekey\n            }\n            self.save()\n            self.log.debug(\"Added new site: %s in %.3fs\" % (address, time.time() - s))\n        return self.sites[address]\n\n    def deleteSiteData(self, address):\n        if address in self.sites:\n            del(self.sites[address])\n            self.save()\n            self.log.debug(\"Deleted site: %s\" % address)\n\n    def setSettings(self, address, settings):\n        site_data = self.getSiteData(address)\n        site_data[\"settings\"] = settings\n        self.save()\n        return site_data\n\n    # Get data for a new, unique site\n    # Return: [site_address, bip32_index, {\"auth_address\": \"xxx\", \"auth_privatekey\": \"xxx\", \"privatekey\": \"xxx\"}]\n    def getNewSiteData(self):\n        import random\n        bip32_index = random.randrange(2 ** 256) % 100000000\n        site_privatekey = CryptBitcoin.hdPrivatekey(self.master_seed, bip32_index)\n        site_address = CryptBitcoin.privatekeyToAddress(site_privatekey)\n        if site_address in self.sites:\n            raise Exception(\"Random error: site exist!\")\n        # Save to sites\n        self.getSiteData(site_address)\n        self.sites[site_address][\"privatekey\"] = site_privatekey\n        self.save()\n        return site_address, bip32_index, self.sites[site_address]\n\n    # Get BIP32 address from site address\n    # Return: BIP32 auth address\n    def getAuthAddress(self, address, create=True):\n        cert = self.getCert(address)\n        if cert:\n            return cert[\"auth_address\"]\n        else:\n            return self.getSiteData(address, create)[\"auth_address\"]\n\n    def getAuthPrivatekey(self, address, create=True):\n        cert = self.getCert(address)\n        if cert:\n            return cert[\"auth_privatekey\"]\n        else:\n            return self.getSiteData(address, create)[\"auth_privatekey\"]\n\n    # Add cert for the user\n    def addCert(self, auth_address, domain, auth_type, auth_user_name, cert_sign):\n        domain = domain.lower()\n        # Find privatekey by auth address\n        auth_privatekey = [site[\"auth_privatekey\"] for site in self.sites.values() if site[\"auth_address\"] == auth_address][0]\n        cert_node = {\n            \"auth_address\": auth_address,\n            \"auth_privatekey\": auth_privatekey,\n            \"auth_type\": auth_type,\n            \"auth_user_name\": auth_user_name,\n            \"cert_sign\": cert_sign\n        }\n        # Check if we have already cert for that domain and its not the same\n        if self.certs.get(domain) and self.certs[domain] != cert_node:\n            return False\n        elif self.certs.get(domain) == cert_node:  # Same, not updated\n            return None\n        else:  # Not exist yet, add\n            self.certs[domain] = cert_node\n            self.save()\n            return True\n\n    # Remove cert from user\n    def deleteCert(self, domain):\n        del self.certs[domain]\n\n    # Set active cert for a site\n    def setCert(self, address, domain):\n        site_data = self.getSiteData(address)\n        if domain:\n            site_data[\"cert\"] = domain\n        else:\n            if \"cert\" in site_data:\n                del site_data[\"cert\"]\n        self.save()\n        return site_data\n\n    # Get cert for the site address\n    # Return: { \"auth_address\":.., \"auth_privatekey\":.., \"auth_type\": \"web\", \"auth_user_name\": \"nofish\", \"cert_sign\":.. } or None\n    def getCert(self, address):\n        site_data = self.getSiteData(address, create=False)\n        if not site_data or \"cert\" not in site_data:\n            return None  # Site dont have cert\n        return self.certs.get(site_data[\"cert\"])\n\n    # Get cert user name for the site address\n    # Return: user@certprovider.bit or None\n    def getCertUserId(self, address):\n        site_data = self.getSiteData(address, create=False)\n        if not site_data or \"cert\" not in site_data:\n            return None  # Site dont have cert\n        cert = self.certs.get(site_data[\"cert\"])\n        if cert:\n            return cert[\"auth_user_name\"] + \"@\" + site_data[\"cert\"]\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "User.py", "id": "b867bbdce4dc87658730de69e9414304", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/User/User.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}