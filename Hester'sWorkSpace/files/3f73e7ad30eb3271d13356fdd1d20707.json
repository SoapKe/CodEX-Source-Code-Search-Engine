{"author": "tgalal", "code": "from yowsup.structs import ProtocolEntity, ProtocolTreeNode\nclass CallProtocolEntity(ProtocolEntity):\n    '''\n    <call offline=\"0\" from=\"{{CALLER_JID}}\" id=\"{{ID}}\" t=\"{{TIMESTAMP}}\" notify=\"{{CALLER_PUSHNAME}}\" retry=\"{{RETRY}}\" e=\"{{?}}\">\n    </call>\n    \n    '''\n    def __init__(self, _id, _type, timestamp, notify = None, offline = None, retry = None, e = None, callId = None, _from = None, _to = None):\n        super(CallProtocolEntity, self).__init__(\"call\")\n        self._id            = _id or self._generateId()\n        self._type       = _type\n        self._from      = _from\n        self._to           = _to\n        self.timestamp  = int(timestamp)\n        self.notify     = notify\n        self.offline    = offline == \"1\"\n        self.retry      = retry\n        self.e             = e\n        self.callId     = callId\n\n    def __str__(self):\n        out = \"Call\\n\"\n        if self.getFrom() is not None:\n            out += \"From: %s\\n\" % self.getFrom()\n        if self.getTo() is not None:\n            out += \"To: %s\\n\" % self.getTo()\n        if self.getType() is not None:\n            out += \"Type: %s\\n\" % self.getType()\n        if self.getCallId() is not None:\n            out += \"Call ID: %s\\n\" % self.getCallId()\n        return out\n\n    def getFrom(self, full = True):\n        return self._from if full else self._from.split('@')[0]\n        \n    def getTo(self):\n        return self._to\n\n    def getId(self):\n        return self._id\n        \n    def getType(self):\n        return self._type\n        \n    def getCallId(self):\n        return self.callId\n\n    def getTimestamp(self):\n        return self.timestamp\n\n    def toProtocolTreeNode(self):\n        children = []\n        attribs = {\n            \"t\"         : str(self.timestamp),\n            \"offline\"   : \"1\" if self.offline else \"0\",\n            \"id\"        : self._id,\n        }\n        if self._from is not None:\n            attribs[\"from\"] = self._from\n        if self._to is not None:\n            attribs[\"to\"] = self._to\n        if self.retry is not None:\n            attribs[\"retry\"] = self.retry\n        if self.e is not None:\n            attribs[\"e\"] = self.e\n        if self.notify is not None:\n            attribs[\"notify\"] = self.notify\n        if self._type in [\"offer\", \"transport\", \"relaylatency\", \"reject\", \"terminate\"]:\n            child = ProtocolTreeNode(self._type, {\"call-id\": self.callId})\n            children.append(child)\n        return self._createProtocolTreeNode(attribs, children = children, data = None)\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        (_type, callId) = [None] * 2\n        offer = node.getChild(\"offer\")\n        transport = node.getChild(\"transport\")\n        relaylatency = node.getChild(\"relaylatency\")\n        reject = node.getChild(\"reject\")\n        terminate = node.getChild(\"terminate\")\n        if offer:\n            _type = \"offer\"\n            callId = offer.getAttributeValue(\"call-id\")\n        elif transport:\n            _type = \"transport\"\n            callId = transport.getAttributeValue(\"call-id\")\n        elif relaylatency:\n            _type = \"relaylatency\"\n            callId = relaylatency.getAttributeValue(\"call-id\")\n        elif reject:\n            _type = \"reject\"\n            callId = reject.getAttributeValue(\"call-id\")\n        elif terminate:\n            _type = \"terminate\"\n            callId = terminate.getAttributeValue(\"call-id\")\n        return CallProtocolEntity(\n            node.getAttributeValue(\"id\"),\n            _type,\n            node.getAttributeValue(\"t\"),\n            node.getAttributeValue(\"notify\"),\n            node.getAttributeValue(\"offline\"),\n            node.getAttributeValue(\"retry\"),\n            node.getAttributeValue(\"e\"),\n            callId,\n            node.getAttributeValue(\"from\"),\n            node.getAttributeValue(\"to\")\n            )\n", "comments": "         call offline  0     caller jid    id    id       timestamp    notify    caller pushname    retry    retry    e                call               ", "content": "from yowsup.structs import ProtocolEntity, ProtocolTreeNode\nclass CallProtocolEntity(ProtocolEntity):\n    '''\n    <call offline=\"0\" from=\"{{CALLER_JID}}\" id=\"{{ID}}\" t=\"{{TIMESTAMP}}\" notify=\"{{CALLER_PUSHNAME}}\" retry=\"{{RETRY}}\" e=\"{{?}}\">\n    </call>\n    \n    '''\n    def __init__(self, _id, _type, timestamp, notify = None, offline = None, retry = None, e = None, callId = None, _from = None, _to = None):\n        super(CallProtocolEntity, self).__init__(\"call\")\n        self._id            = _id or self._generateId()\n        self._type       = _type\n        self._from      = _from\n        self._to           = _to\n        self.timestamp  = int(timestamp)\n        self.notify     = notify\n        self.offline    = offline == \"1\"\n        self.retry      = retry\n        self.e             = e\n        self.callId     = callId\n\n    def __str__(self):\n        out = \"Call\\n\"\n        if self.getFrom() is not None:\n            out += \"From: %s\\n\" % self.getFrom()\n        if self.getTo() is not None:\n            out += \"To: %s\\n\" % self.getTo()\n        if self.getType() is not None:\n            out += \"Type: %s\\n\" % self.getType()\n        if self.getCallId() is not None:\n            out += \"Call ID: %s\\n\" % self.getCallId()\n        return out\n\n    def getFrom(self, full = True):\n        return self._from if full else self._from.split('@')[0]\n        \n    def getTo(self):\n        return self._to\n\n    def getId(self):\n        return self._id\n        \n    def getType(self):\n        return self._type\n        \n    def getCallId(self):\n        return self.callId\n\n    def getTimestamp(self):\n        return self.timestamp\n\n    def toProtocolTreeNode(self):\n        children = []\n        attribs = {\n            \"t\"         : str(self.timestamp),\n            \"offline\"   : \"1\" if self.offline else \"0\",\n            \"id\"        : self._id,\n        }\n        if self._from is not None:\n            attribs[\"from\"] = self._from\n        if self._to is not None:\n            attribs[\"to\"] = self._to\n        if self.retry is not None:\n            attribs[\"retry\"] = self.retry\n        if self.e is not None:\n            attribs[\"e\"] = self.e\n        if self.notify is not None:\n            attribs[\"notify\"] = self.notify\n        if self._type in [\"offer\", \"transport\", \"relaylatency\", \"reject\", \"terminate\"]:\n            child = ProtocolTreeNode(self._type, {\"call-id\": self.callId})\n            children.append(child)\n        return self._createProtocolTreeNode(attribs, children = children, data = None)\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        (_type, callId) = [None] * 2\n        offer = node.getChild(\"offer\")\n        transport = node.getChild(\"transport\")\n        relaylatency = node.getChild(\"relaylatency\")\n        reject = node.getChild(\"reject\")\n        terminate = node.getChild(\"terminate\")\n        if offer:\n            _type = \"offer\"\n            callId = offer.getAttributeValue(\"call-id\")\n        elif transport:\n            _type = \"transport\"\n            callId = transport.getAttributeValue(\"call-id\")\n        elif relaylatency:\n            _type = \"relaylatency\"\n            callId = relaylatency.getAttributeValue(\"call-id\")\n        elif reject:\n            _type = \"reject\"\n            callId = reject.getAttributeValue(\"call-id\")\n        elif terminate:\n            _type = \"terminate\"\n            callId = terminate.getAttributeValue(\"call-id\")\n        return CallProtocolEntity(\n            node.getAttributeValue(\"id\"),\n            _type,\n            node.getAttributeValue(\"t\"),\n            node.getAttributeValue(\"notify\"),\n            node.getAttributeValue(\"offline\"),\n            node.getAttributeValue(\"retry\"),\n            node.getAttributeValue(\"e\"),\n            callId,\n            node.getAttributeValue(\"from\"),\n            node.getAttributeValue(\"to\")\n            )\n", "description": "The python WhatsApp library", "file_name": "call.py", "id": "3f73e7ad30eb3271d13356fdd1d20707", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_calls/protocolentities/call.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}