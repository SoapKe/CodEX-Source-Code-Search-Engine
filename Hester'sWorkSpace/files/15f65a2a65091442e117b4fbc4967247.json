{"author": "keon", "code": "\n\n\"\"\"\nDesign a data structure that supports all following operations\nin average O(1) time.\n\ninsert(val): Inserts an item val to the set if not already present.\nremove(val): Removes an item val from the set if present.\nrandom_element: Returns a random element from current set of elements.\n           Each element must have the same probability of being returned.\n\"\"\"\n\nimport random\n\n\nclass RandomizedSet():\n    \"\"\"\n    idea: shoot\n    \"\"\"\n\n    def __init__(self):\n        self.elements = []\n        self.index_map = {}  \n\n    def insert(self, new_one):\n        if new_one in self.index_map:\n            return\n        self.index_map[new_one] = len(self.elements)\n        self.elements.append(new_one)\n\n    def remove(self, old_one):\n        if not old_one in self.index_map:\n            return\n        index = self.index_map[old_one]\n        last = self.elements.pop()\n        self.index_map.pop(old_one)\n        if index == len(self.elements):\n            return\n        self.elements[index] = last\n        self.index_map[last] = index\n\n    def random_element(self):\n        return random.choice(self.elements)\n\n\ndef __test():\n    rset = RandomizedSet()\n    ground_truth = set()\n    n = 64\n\n    for i in range(n):\n        rset.insert(i)\n        ground_truth.add(i)\n\n    \n    for i in random.sample(range(n), n // 2):\n        rset.remove(i)\n        ground_truth.remove(i)\n\n    print(len(ground_truth), len(rset.elements), len(rset.index_map))\n    for i in ground_truth:\n        assert(i == rset.elements[rset.index_map[i]])\n\n    for i in range(n):\n        print(rset.random_element(), end=' ')\n    print()\n\n\nif __name__ == \"__main__\":\n    __test()\n", "comments": "    design data structure supports following operations average o(1) time   insert(val)  inserts item val set already present  remove(val)  removes item val set present  random element  returns random element current set elements             each element must probability returned       import random   class randomizedset()              idea  shoot              usr bin env python3    element    index    remove half ", "content": "#! /usr/bin/env python3\n\n\"\"\"\nDesign a data structure that supports all following operations\nin average O(1) time.\n\ninsert(val): Inserts an item val to the set if not already present.\nremove(val): Removes an item val from the set if present.\nrandom_element: Returns a random element from current set of elements.\n           Each element must have the same probability of being returned.\n\"\"\"\n\nimport random\n\n\nclass RandomizedSet():\n    \"\"\"\n    idea: shoot\n    \"\"\"\n\n    def __init__(self):\n        self.elements = []\n        self.index_map = {}  # element -> index\n\n    def insert(self, new_one):\n        if new_one in self.index_map:\n            return\n        self.index_map[new_one] = len(self.elements)\n        self.elements.append(new_one)\n\n    def remove(self, old_one):\n        if not old_one in self.index_map:\n            return\n        index = self.index_map[old_one]\n        last = self.elements.pop()\n        self.index_map.pop(old_one)\n        if index == len(self.elements):\n            return\n        self.elements[index] = last\n        self.index_map[last] = index\n\n    def random_element(self):\n        return random.choice(self.elements)\n\n\ndef __test():\n    rset = RandomizedSet()\n    ground_truth = set()\n    n = 64\n\n    for i in range(n):\n        rset.insert(i)\n        ground_truth.add(i)\n\n    # Remove a half\n    for i in random.sample(range(n), n // 2):\n        rset.remove(i)\n        ground_truth.remove(i)\n\n    print(len(ground_truth), len(rset.elements), len(rset.index_map))\n    for i in ground_truth:\n        assert(i == rset.elements[rset.index_map[i]])\n\n    for i in range(n):\n        print(rset.random_element(), end=' ')\n    print()\n\n\nif __name__ == \"__main__\":\n    __test()\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "randomized_set.py", "id": "15f65a2a65091442e117b4fbc4967247", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/keon-algorithms/keon-algorithms-ea43887/set/randomized_set.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:53:29Z", "url": "https://github.com/keon/algorithms", "wiki": true}