{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_xpath,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    smuggle_url,\n    unsmuggle_url,\n    xpath_text,\n)\n\n\nclass MicrosoftVirtualAcademyBaseIE(InfoExtractor):\n    def _extract_base_url(self, course_id, display_id):\n        return self._download_json(\n            'https://api-mlxprod.microsoft.com/services/products/anonymous/%s' % course_id,\n            display_id, 'Downloading course base URL')\n\n    def _extract_chapter_and_title(self, title):\n        if not title:\n            return None, None\n        m = re.search(r'(?P<chapter>\\d+)\\s*\\|\\s*(?P<title>.+)', title)\n        return (int(m.group('chapter')), m.group('title')) if m else (None, title)\n\n\nclass MicrosoftVirtualAcademyIE(MicrosoftVirtualAcademyBaseIE):\n    IE_NAME = 'mva'\n    IE_DESC = 'Microsoft Virtual Academy videos'\n    _VALID_URL = r'(?:%s:|https?://(?:mva\\.microsoft|(?:www\\.)?microsoftvirtualacademy)\\.com/[^/]+/training-courses/[^/?\n\n    _TESTS = [{\n        'url': 'https://mva.microsoft.com/en-US/training-courses/microsoft-azure-fundamentals-virtual-machines-11788?l=gfVXISmEB_6804984382',\n        'md5': '7826c44fc31678b12ad8db11f6b5abb9',\n        'info_dict': {\n            'id': 'gfVXISmEB_6804984382',\n            'ext': 'mp4',\n            'title': 'Course Introduction',\n            'formats': 'mincount:3',\n            'subtitles': {\n                'en': [{\n                    'ext': 'ttml',\n                }],\n            },\n        }\n    }, {\n        'url': 'mva:11788:gfVXISmEB_6804984382',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n\n        mobj = re.match(self._VALID_URL, url)\n        course_id = mobj.group('course_id')\n        video_id = mobj.group('id')\n\n        base_url = smuggled_data.get('base_url') or self._extract_base_url(course_id, video_id)\n\n        settings = self._download_xml(\n            '%s/content/content_%s/videosettings.xml?v=1' % (base_url, video_id),\n            video_id, 'Downloading video settings XML')\n\n        _, title = self._extract_chapter_and_title(xpath_text(\n            settings, './/Title', 'title', fatal=True))\n\n        formats = []\n\n        for sources in settings.findall(compat_xpath('.//MediaSources')):\n            sources_type = sources.get('videoType')\n            for source in sources.findall(compat_xpath('./MediaSource')):\n                video_url = source.text\n                if not video_url or not video_url.startswith('http'):\n                    continue\n                if sources_type == 'smoothstreaming':\n                    formats.extend(self._extract_ism_formats(\n                        video_url, video_id, 'mss', fatal=False))\n                    continue\n                video_mode = source.get('videoMode')\n                height = int_or_none(self._search_regex(\n                    r'^(\\d+)[pP]$', video_mode or '', 'height', default=None))\n                codec = source.get('codec')\n                acodec, vcodec = [None] * 2\n                if codec:\n                    codecs = codec.split(',')\n                    if len(codecs) == 2:\n                        acodec, vcodec = codecs\n                    elif len(codecs) == 1:\n                        vcodec = codecs[0]\n                formats.append({\n                    'url': video_url,\n                    'format_id': video_mode,\n                    'height': height,\n                    'acodec': acodec,\n                    'vcodec': vcodec,\n                })\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for source in settings.findall(compat_xpath('.//MarkerResourceSource')):\n            subtitle_url = source.text\n            if not subtitle_url:\n                continue\n            subtitles.setdefault('en', []).append({\n                'url': '%s/%s' % (base_url, subtitle_url),\n                'ext': source.get('type'),\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'subtitles': subtitles,\n            'formats': formats\n        }\n\n\nclass MicrosoftVirtualAcademyCourseIE(MicrosoftVirtualAcademyBaseIE):\n    IE_NAME = 'mva:course'\n    IE_DESC = 'Microsoft Virtual Academy courses'\n    _VALID_URL = r'(?:%s:|https?://(?:mva\\.microsoft|(?:www\\.)?microsoftvirtualacademy)\\.com/[^/]+/training-courses/(?P<display_id>[^/?\n\n    _TESTS = [{\n        'url': 'https://mva.microsoft.com/en-US/training-courses/microsoft-azure-fundamentals-virtual-machines-11788',\n        'info_dict': {\n            'id': '11788',\n            'title': 'Microsoft Azure Fundamentals: Virtual Machines',\n        },\n        'playlist_count': 36,\n    }, {\n        \n        'url': 'https://mva.microsoft.com/en-US/training-courses/developing-windows-10-games-with-construct-2-16335',\n        'info_dict': {\n            'id': '16335',\n            'title': 'Developing Windows 10 Games with Construct 2',\n        },\n        'playlist_count': 10,\n    }, {\n        'url': 'https://www.microsoftvirtualacademy.com/en-US/training-courses/microsoft-azure-fundamentals-virtual-machines-11788',\n        'only_matching': True,\n    }, {\n        'url': 'mva:course:11788',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if MicrosoftVirtualAcademyIE.suitable(url) else super(\n            MicrosoftVirtualAcademyCourseIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        course_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        base_url = self._extract_base_url(course_id, display_id)\n\n        manifest = self._download_json(\n            '%s/imsmanifestlite.json' % base_url,\n            display_id, 'Downloading course manifest JSON')['manifest']\n\n        organization = manifest['organizations']['organization'][0]\n\n        entries = []\n        for chapter in organization['item']:\n            chapter_number, chapter_title = self._extract_chapter_and_title(chapter.get('title'))\n            chapter_id = chapter.get('@identifier')\n            for item in chapter.get('item', []):\n                item_id = item.get('@identifier')\n                if not item_id:\n                    continue\n                metadata = item.get('resource', {}).get('metadata') or {}\n                if metadata.get('learningresourcetype') != 'Video':\n                    continue\n                _, title = self._extract_chapter_and_title(item.get('title'))\n                duration = parse_duration(metadata.get('duration'))\n                description = metadata.get('description')\n                entries.append({\n                    '_type': 'url_transparent',\n                    'url': smuggle_url(\n                        'mva:%s:%s' % (course_id, item_id), {'base_url': base_url}),\n                    'title': title,\n                    'description': description,\n                    'duration': duration,\n                    'chapter': chapter_title,\n                    'chapter_number': chapter_number,\n                    'chapter_id': chapter_id,\n                })\n\n        title = organization.get('title') or manifest.get('metadata', {}).get('title')\n\n        return self.playlist_result(entries, course_id, title)\n", "comments": "#&]+-)(?P<course_id>\\d+)(?::|\\?l=)(?P<id>[\\da-zA-Z]+_\\d+)' % IE_NAME\n#&]+)-)(?P<id>\\d+)' % IE_NAME\n# with emphasized chapters\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_xpath,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    smuggle_url,\n    unsmuggle_url,\n    xpath_text,\n)\n\n\nclass MicrosoftVirtualAcademyBaseIE(InfoExtractor):\n    def _extract_base_url(self, course_id, display_id):\n        return self._download_json(\n            'https://api-mlxprod.microsoft.com/services/products/anonymous/%s' % course_id,\n            display_id, 'Downloading course base URL')\n\n    def _extract_chapter_and_title(self, title):\n        if not title:\n            return None, None\n        m = re.search(r'(?P<chapter>\\d+)\\s*\\|\\s*(?P<title>.+)', title)\n        return (int(m.group('chapter')), m.group('title')) if m else (None, title)\n\n\nclass MicrosoftVirtualAcademyIE(MicrosoftVirtualAcademyBaseIE):\n    IE_NAME = 'mva'\n    IE_DESC = 'Microsoft Virtual Academy videos'\n    _VALID_URL = r'(?:%s:|https?://(?:mva\\.microsoft|(?:www\\.)?microsoftvirtualacademy)\\.com/[^/]+/training-courses/[^/?#&]+-)(?P<course_id>\\d+)(?::|\\?l=)(?P<id>[\\da-zA-Z]+_\\d+)' % IE_NAME\n\n    _TESTS = [{\n        'url': 'https://mva.microsoft.com/en-US/training-courses/microsoft-azure-fundamentals-virtual-machines-11788?l=gfVXISmEB_6804984382',\n        'md5': '7826c44fc31678b12ad8db11f6b5abb9',\n        'info_dict': {\n            'id': 'gfVXISmEB_6804984382',\n            'ext': 'mp4',\n            'title': 'Course Introduction',\n            'formats': 'mincount:3',\n            'subtitles': {\n                'en': [{\n                    'ext': 'ttml',\n                }],\n            },\n        }\n    }, {\n        'url': 'mva:11788:gfVXISmEB_6804984382',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n\n        mobj = re.match(self._VALID_URL, url)\n        course_id = mobj.group('course_id')\n        video_id = mobj.group('id')\n\n        base_url = smuggled_data.get('base_url') or self._extract_base_url(course_id, video_id)\n\n        settings = self._download_xml(\n            '%s/content/content_%s/videosettings.xml?v=1' % (base_url, video_id),\n            video_id, 'Downloading video settings XML')\n\n        _, title = self._extract_chapter_and_title(xpath_text(\n            settings, './/Title', 'title', fatal=True))\n\n        formats = []\n\n        for sources in settings.findall(compat_xpath('.//MediaSources')):\n            sources_type = sources.get('videoType')\n            for source in sources.findall(compat_xpath('./MediaSource')):\n                video_url = source.text\n                if not video_url or not video_url.startswith('http'):\n                    continue\n                if sources_type == 'smoothstreaming':\n                    formats.extend(self._extract_ism_formats(\n                        video_url, video_id, 'mss', fatal=False))\n                    continue\n                video_mode = source.get('videoMode')\n                height = int_or_none(self._search_regex(\n                    r'^(\\d+)[pP]$', video_mode or '', 'height', default=None))\n                codec = source.get('codec')\n                acodec, vcodec = [None] * 2\n                if codec:\n                    codecs = codec.split(',')\n                    if len(codecs) == 2:\n                        acodec, vcodec = codecs\n                    elif len(codecs) == 1:\n                        vcodec = codecs[0]\n                formats.append({\n                    'url': video_url,\n                    'format_id': video_mode,\n                    'height': height,\n                    'acodec': acodec,\n                    'vcodec': vcodec,\n                })\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for source in settings.findall(compat_xpath('.//MarkerResourceSource')):\n            subtitle_url = source.text\n            if not subtitle_url:\n                continue\n            subtitles.setdefault('en', []).append({\n                'url': '%s/%s' % (base_url, subtitle_url),\n                'ext': source.get('type'),\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'subtitles': subtitles,\n            'formats': formats\n        }\n\n\nclass MicrosoftVirtualAcademyCourseIE(MicrosoftVirtualAcademyBaseIE):\n    IE_NAME = 'mva:course'\n    IE_DESC = 'Microsoft Virtual Academy courses'\n    _VALID_URL = r'(?:%s:|https?://(?:mva\\.microsoft|(?:www\\.)?microsoftvirtualacademy)\\.com/[^/]+/training-courses/(?P<display_id>[^/?#&]+)-)(?P<id>\\d+)' % IE_NAME\n\n    _TESTS = [{\n        'url': 'https://mva.microsoft.com/en-US/training-courses/microsoft-azure-fundamentals-virtual-machines-11788',\n        'info_dict': {\n            'id': '11788',\n            'title': 'Microsoft Azure Fundamentals: Virtual Machines',\n        },\n        'playlist_count': 36,\n    }, {\n        # with emphasized chapters\n        'url': 'https://mva.microsoft.com/en-US/training-courses/developing-windows-10-games-with-construct-2-16335',\n        'info_dict': {\n            'id': '16335',\n            'title': 'Developing Windows 10 Games with Construct 2',\n        },\n        'playlist_count': 10,\n    }, {\n        'url': 'https://www.microsoftvirtualacademy.com/en-US/training-courses/microsoft-azure-fundamentals-virtual-machines-11788',\n        'only_matching': True,\n    }, {\n        'url': 'mva:course:11788',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if MicrosoftVirtualAcademyIE.suitable(url) else super(\n            MicrosoftVirtualAcademyCourseIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        course_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        base_url = self._extract_base_url(course_id, display_id)\n\n        manifest = self._download_json(\n            '%s/imsmanifestlite.json' % base_url,\n            display_id, 'Downloading course manifest JSON')['manifest']\n\n        organization = manifest['organizations']['organization'][0]\n\n        entries = []\n        for chapter in organization['item']:\n            chapter_number, chapter_title = self._extract_chapter_and_title(chapter.get('title'))\n            chapter_id = chapter.get('@identifier')\n            for item in chapter.get('item', []):\n                item_id = item.get('@identifier')\n                if not item_id:\n                    continue\n                metadata = item.get('resource', {}).get('metadata') or {}\n                if metadata.get('learningresourcetype') != 'Video':\n                    continue\n                _, title = self._extract_chapter_and_title(item.get('title'))\n                duration = parse_duration(metadata.get('duration'))\n                description = metadata.get('description')\n                entries.append({\n                    '_type': 'url_transparent',\n                    'url': smuggle_url(\n                        'mva:%s:%s' % (course_id, item_id), {'base_url': base_url}),\n                    'title': title,\n                    'description': description,\n                    'duration': duration,\n                    'chapter': chapter_title,\n                    'chapter_number': chapter_number,\n                    'chapter_id': chapter_id,\n                })\n\n        title = organization.get('title') or manifest.get('metadata', {}).get('title')\n\n        return self.playlist_result(entries, course_id, title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "microsoftvirtualacademy.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/microsoftvirtualacademy.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}