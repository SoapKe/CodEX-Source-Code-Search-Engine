{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass BloombergIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?bloomberg\\.com/(?:[^/]+/)*(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'http://www.bloomberg.com/news/videos/b/aaeae121-5949-481e-a1ce-4562db6f5df2',\n        \n        'info_dict': {\n            'id': 'qurhIVlJSB6hzkVi229d8g',\n            'ext': 'flv',\n            'title': 'Shah\\'s Presentation on Foreign-Exchange Strategies',\n            'description': 'md5:a8ba0302912d03d246979735c17d2761',\n        },\n        'params': {\n            'format': 'best[format_id^=hds]',\n        },\n    }, {\n        \n        'url': 'http://www.bloomberg.com/features/2016-hello-world-new-zealand/',\n        'info_dict': {\n            'id': '938c7e72-3f25-4ddb-8b85-a9be731baa74',\n            'ext': 'flv',\n            'title': 'Meet the Real-Life Tech Wizards of Middle Earth',\n            'description': 'Hello World, Episode 1: New Zealand\u2019s freaky AI babies, robot exoskeletons, and a virtual you.',\n        },\n        'params': {\n            'format': 'best[format_id^=hds]',\n        },\n    }, {\n        \n        'url': 'https://www.bloomberg.com/politics/articles/2017-02-08/le-pen-aide-briefed-french-central-banker-on-plan-to-print-money',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.bloomberg.com/news/articles/2015-11-12/five-strange-things-that-have-been-happening-in-financial-markets',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.bloomberg.com/politics/videos/2015-11-25/karl-rove-on-jeb-bush-s-struggles-stopping-trump',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        name = self._match_id(url)\n        webpage = self._download_webpage(url, name)\n        video_id = self._search_regex(\n            (r'[\"\\']bmmrId[\"\\']\\s*:\\s*([\"\\'])(?P<id>(?:(?!\\1).)+)\\1',\n             r'videoId\\s*:\\s*([\"\\'])(?P<id>(?:(?!\\1).)+)\\1',\n             r'data-bmmrid=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1'),\n            webpage, 'id', group='id', default=None)\n        if not video_id:\n            bplayer_data = self._parse_json(self._search_regex(\n                r'BPlayer\\(null,\\s*({[^;]+})\\);', webpage, 'id'), name)\n            video_id = bplayer_data['id']\n        title = re.sub(': Video$', '', self._og_search_title(webpage))\n\n        embed_info = self._download_json(\n            'http://www.bloomberg.com/api/embed?id=%s' % video_id, video_id)\n        formats = []\n        for stream in embed_info['streams']:\n            stream_url = stream.get('url')\n            if not stream_url:\n                continue\n            if stream['muxing_format'] == 'TS':\n                formats.extend(self._extract_m3u8_formats(\n                    stream_url, video_id, 'mp4', m3u8_id='hls', fatal=False))\n            else:\n                formats.extend(self._extract_f4m_formats(\n                    stream_url, video_id, f4m_id='hds', fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': self._og_search_description(webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }\n", "comments": "# coding: utf-8\n#]+)'\n# The md5 checksum changes\n# video ID in BPlayer(...)\n# data-bmmrid=\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass BloombergIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?bloomberg\\.com/(?:[^/]+/)*(?P<id>[^/?#]+)'\n\n    _TESTS = [{\n        'url': 'http://www.bloomberg.com/news/videos/b/aaeae121-5949-481e-a1ce-4562db6f5df2',\n        # The md5 checksum changes\n        'info_dict': {\n            'id': 'qurhIVlJSB6hzkVi229d8g',\n            'ext': 'flv',\n            'title': 'Shah\\'s Presentation on Foreign-Exchange Strategies',\n            'description': 'md5:a8ba0302912d03d246979735c17d2761',\n        },\n        'params': {\n            'format': 'best[format_id^=hds]',\n        },\n    }, {\n        # video ID in BPlayer(...)\n        'url': 'http://www.bloomberg.com/features/2016-hello-world-new-zealand/',\n        'info_dict': {\n            'id': '938c7e72-3f25-4ddb-8b85-a9be731baa74',\n            'ext': 'flv',\n            'title': 'Meet the Real-Life Tech Wizards of Middle Earth',\n            'description': 'Hello World, Episode 1: New Zealand\u2019s freaky AI babies, robot exoskeletons, and a virtual you.',\n        },\n        'params': {\n            'format': 'best[format_id^=hds]',\n        },\n    }, {\n        # data-bmmrid=\n        'url': 'https://www.bloomberg.com/politics/articles/2017-02-08/le-pen-aide-briefed-french-central-banker-on-plan-to-print-money',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.bloomberg.com/news/articles/2015-11-12/five-strange-things-that-have-been-happening-in-financial-markets',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.bloomberg.com/politics/videos/2015-11-25/karl-rove-on-jeb-bush-s-struggles-stopping-trump',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        name = self._match_id(url)\n        webpage = self._download_webpage(url, name)\n        video_id = self._search_regex(\n            (r'[\"\\']bmmrId[\"\\']\\s*:\\s*([\"\\'])(?P<id>(?:(?!\\1).)+)\\1',\n             r'videoId\\s*:\\s*([\"\\'])(?P<id>(?:(?!\\1).)+)\\1',\n             r'data-bmmrid=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1'),\n            webpage, 'id', group='id', default=None)\n        if not video_id:\n            bplayer_data = self._parse_json(self._search_regex(\n                r'BPlayer\\(null,\\s*({[^;]+})\\);', webpage, 'id'), name)\n            video_id = bplayer_data['id']\n        title = re.sub(': Video$', '', self._og_search_title(webpage))\n\n        embed_info = self._download_json(\n            'http://www.bloomberg.com/api/embed?id=%s' % video_id, video_id)\n        formats = []\n        for stream in embed_info['streams']:\n            stream_url = stream.get('url')\n            if not stream_url:\n                continue\n            if stream['muxing_format'] == 'TS':\n                formats.extend(self._extract_m3u8_formats(\n                    stream_url, video_id, 'mp4', m3u8_id='hls', fatal=False))\n            else:\n                formats.extend(self._extract_f4m_formats(\n                    stream_url, video_id, f4m_id='hds', fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': self._og_search_description(webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "bloomberg.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/bloomberg.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}