{"author": "deepfakes", "code": "import cv2\nimport numpy\nimport time\n\nfrom threading import Lock\nfrom lib.utils import get_image_paths, get_folder\nfrom lib.cli import FullPaths\nfrom plugins.PluginLoader import PluginLoader\n\nclass TrainingProcessor(object):\n    arguments = None\n\n    def __init__(self, subparser, command, description='default'):\n        self.parse_arguments(description, subparser, command)\n        self.lock = Lock()\n\n    def process_arguments(self, arguments):\n        self.arguments = arguments\n        print(\"Model A Directory: {}\".format(self.arguments.input_A))\n        print(\"Model B Directory: {}\".format(self.arguments.input_B))\n        print(\"Training data directory: {}\".format(self.arguments.model_dir))\n\n        self.process()\n\n    def parse_arguments(self, description, subparser, command):\n        parser = subparser.add_parser(\n            command,\n            help=\"This command trains the model for the two faces A and B.\",\n            description=description,\n            epilog=\"Questions and feedback: \\\n            https://github.com/deepfakes/faceswap-playground\"\n        )\n\n        parser.add_argument('-A', '--input-A',\n                            action=FullPaths,\n                            dest=\"input_A\",\n                            default=\"input_A\",\n                            help=\"Input directory. A directory containing training images for face A.\\\n                             Defaults to 'input'\")\n        parser.add_argument('-B', '--input-B',\n                            action=FullPaths,\n                            dest=\"input_B\",\n                            default=\"input_B\",\n                            help=\"Input directory. A directory containing training images for face B.\\\n                             Defaults to 'input'\")\n        parser.add_argument('-m', '--model-dir',\n                            action=FullPaths,\n                            dest=\"model_dir\",\n                            default=\"models\",\n                            help=\"Model directory. This is where the training data will \\\n                                be stored. Defaults to 'model'\")\n        parser.add_argument('-p', '--preview',\n                            action=\"store_true\",\n                            dest=\"preview\",\n                            default=False,\n                            help=\"Show preview output. If not specified, write progress \\\n                            to file.\")\n        parser.add_argument('-v', '--verbose',\n                            action=\"store_true\",\n                            dest=\"verbose\",\n                            default=False,\n                            help=\"Show verbose output\")\n        parser.add_argument('-s', '--save-interval',\n                            type=int,\n                            dest=\"save_interval\",\n                            default=100,\n                            help=\"Sets the number of iterations before saving the model.\")\n        parser.add_argument('-w', '--write-image',\n                            action=\"store_true\",\n                            dest=\"write_image\",\n                            default=False,\n                            help=\"Writes the training result to a file even on preview mode.\")\n        parser.add_argument('-t', '--trainer',\n                            type=str,\n                            choices=PluginLoader.get_available_models(),\n                            default=PluginLoader.get_default_model(),\n                            help=\"Select which trainer to use, LowMem for cards < 2gb.\")\n        parser.add_argument('-pl', '--use-perceptual-loss',\n                            action=\"store_true\",\n                            dest=\"perceptual_loss\",\n                            default=False,\n                            help=\"Use perceptual loss while training\")\n        parser.add_argument('-bs', '--batch-size',\n                            type=int,\n                            default=64,\n                            help=\"Batch size, as a power of 2 (64, 128, 256, etc)\")\n        parser.add_argument('-ag', '--allow-growth',\n                            action=\"store_true\",\n                            dest=\"allow_growth\",\n                            default=False,\n                            help=\"Sets allow_growth option of Tensorflow to spare memory on some configs\")\n        parser.add_argument('-ep', '--epochs',\n                            type=int,\n                            default=1000000,\n                            help=\"Length of training in epochs.\")\n        parser.add_argument('-g', '--gpus',\n                            type=int,\n                            default=1,\n                            help=\"Number of GPUs to use for training\")\n        parser = self.add_optional_arguments(parser)\n        parser.set_defaults(func=self.process_arguments)\n\n    def add_optional_arguments(self, parser):\n        \n        return parser\n\n    def process(self):\n        import threading\n        self.stop = False\n        self.save_now = False\n\n        thr = threading.Thread(target=self.processThread, args=(), kwargs={})\n        thr.start()\n\n        if self.arguments.preview:\n            print('Using live preview')\n            while True:\n                try:\n                    with self.lock:\n                        for name, image in self.preview_buffer.items():\n                            cv2.imshow(name, image)\n\n                    key = cv2.waitKey(1000)\n                    if key == ord('\\n') or key == ord('\\r'):\n                        break\n                    if key == ord('s'):\n                        self.save_now = True\n                except KeyboardInterrupt:\n                    break\n        else:\n            input() ?\n            \n\n        print(\"Exit requested! The trainer will complete its current cycle, save the models and quit (it can take up a couple of seconds depending on your training speed). If you want to kill it now, press Ctrl + c\")\n        self.stop = True\n        thr.join() \n\n    def processThread(self):\n        try:\n            if self.arguments.allow_growth:\n                self.set_tf_allow_growth()\n\n            print('Loading data, this may take a while...')\n            \n            trainer = self.arguments.trainer\n            trainer = \"LowMem\" if trainer.lower() == \"lowmem\" else trainer\n            model = PluginLoader.get_model(trainer)(get_folder(self.arguments.model_dir), self.arguments.gpus)\n            model.load(swapped=False)\n\n            images_A = get_image_paths(self.arguments.input_A)\n            images_B = get_image_paths(self.arguments.input_B)\n            trainer = PluginLoader.get_trainer(trainer)\n            trainer = trainer(model, images_A, images_B, self.arguments.batch_size, self.arguments.perceptual_loss)\n\n            print('Starting. Press \"Enter\" to stop training and save model')\n\n            for epoch in range(0, self.arguments.epochs):\n\n                save_iteration = epoch % self.arguments.save_interval == 0\n\n                trainer.train_one_step(epoch, self.show if (save_iteration or self.save_now) else None)\n\n                if save_iteration:\n                    model.save_weights()\n\n                if self.stop:\n                    model.save_weights()\n                    exit()\n\n                if self.save_now:\n                    model.save_weights()\n                    self.save_now = False\n\n        except KeyboardInterrupt:\n            try:\n                model.save_weights()\n            except KeyboardInterrupt:\n                print('Saving model weights has been cancelled!')\n            exit(0)\n        except Exception as e:\n            raise e\n            exit(1)\n\n    def set_tf_allow_growth(self):\n        import tensorflow as tf\n        from keras.backend.tensorflow_backend import set_session\n        config = tf.ConfigProto()\n        config.gpu_options.allow_growth = True\n        config.gpu_options.visible_device_list=\"0\"\n        set_session(tf.Session(config=config))\n\n    preview_buffer = {}\n\n    def show(self, image, name=''):\n        try:\n            if self.arguments.preview:\n                with self.lock:\n                    self.preview_buffer[name] = image\n            elif self.arguments.write_image:\n                cv2.imwrite('_sample_{}.jpg'.format(name), image)\n        except Exception as e:\n            print(\"could not preview sample\")\n            raise e\n", "comments": "  override custom arguments    todo catch specific key instead enter     isnt good multiplatform solution  https   stackoverflow com questions 3523174 raw input python without pressing enter    waits thread finishes    enter case insensitive values trainer ", "content": "import cv2\nimport numpy\nimport time\n\nfrom threading import Lock\nfrom lib.utils import get_image_paths, get_folder\nfrom lib.cli import FullPaths\nfrom plugins.PluginLoader import PluginLoader\n\nclass TrainingProcessor(object):\n    arguments = None\n\n    def __init__(self, subparser, command, description='default'):\n        self.parse_arguments(description, subparser, command)\n        self.lock = Lock()\n\n    def process_arguments(self, arguments):\n        self.arguments = arguments\n        print(\"Model A Directory: {}\".format(self.arguments.input_A))\n        print(\"Model B Directory: {}\".format(self.arguments.input_B))\n        print(\"Training data directory: {}\".format(self.arguments.model_dir))\n\n        self.process()\n\n    def parse_arguments(self, description, subparser, command):\n        parser = subparser.add_parser(\n            command,\n            help=\"This command trains the model for the two faces A and B.\",\n            description=description,\n            epilog=\"Questions and feedback: \\\n            https://github.com/deepfakes/faceswap-playground\"\n        )\n\n        parser.add_argument('-A', '--input-A',\n                            action=FullPaths,\n                            dest=\"input_A\",\n                            default=\"input_A\",\n                            help=\"Input directory. A directory containing training images for face A.\\\n                             Defaults to 'input'\")\n        parser.add_argument('-B', '--input-B',\n                            action=FullPaths,\n                            dest=\"input_B\",\n                            default=\"input_B\",\n                            help=\"Input directory. A directory containing training images for face B.\\\n                             Defaults to 'input'\")\n        parser.add_argument('-m', '--model-dir',\n                            action=FullPaths,\n                            dest=\"model_dir\",\n                            default=\"models\",\n                            help=\"Model directory. This is where the training data will \\\n                                be stored. Defaults to 'model'\")\n        parser.add_argument('-p', '--preview',\n                            action=\"store_true\",\n                            dest=\"preview\",\n                            default=False,\n                            help=\"Show preview output. If not specified, write progress \\\n                            to file.\")\n        parser.add_argument('-v', '--verbose',\n                            action=\"store_true\",\n                            dest=\"verbose\",\n                            default=False,\n                            help=\"Show verbose output\")\n        parser.add_argument('-s', '--save-interval',\n                            type=int,\n                            dest=\"save_interval\",\n                            default=100,\n                            help=\"Sets the number of iterations before saving the model.\")\n        parser.add_argument('-w', '--write-image',\n                            action=\"store_true\",\n                            dest=\"write_image\",\n                            default=False,\n                            help=\"Writes the training result to a file even on preview mode.\")\n        parser.add_argument('-t', '--trainer',\n                            type=str,\n                            choices=PluginLoader.get_available_models(),\n                            default=PluginLoader.get_default_model(),\n                            help=\"Select which trainer to use, LowMem for cards < 2gb.\")\n        parser.add_argument('-pl', '--use-perceptual-loss',\n                            action=\"store_true\",\n                            dest=\"perceptual_loss\",\n                            default=False,\n                            help=\"Use perceptual loss while training\")\n        parser.add_argument('-bs', '--batch-size',\n                            type=int,\n                            default=64,\n                            help=\"Batch size, as a power of 2 (64, 128, 256, etc)\")\n        parser.add_argument('-ag', '--allow-growth',\n                            action=\"store_true\",\n                            dest=\"allow_growth\",\n                            default=False,\n                            help=\"Sets allow_growth option of Tensorflow to spare memory on some configs\")\n        parser.add_argument('-ep', '--epochs',\n                            type=int,\n                            default=1000000,\n                            help=\"Length of training in epochs.\")\n        parser.add_argument('-g', '--gpus',\n                            type=int,\n                            default=1,\n                            help=\"Number of GPUs to use for training\")\n        parser = self.add_optional_arguments(parser)\n        parser.set_defaults(func=self.process_arguments)\n\n    def add_optional_arguments(self, parser):\n        # Override this for custom arguments\n        return parser\n\n    def process(self):\n        import threading\n        self.stop = False\n        self.save_now = False\n\n        thr = threading.Thread(target=self.processThread, args=(), kwargs={})\n        thr.start()\n\n        if self.arguments.preview:\n            print('Using live preview')\n            while True:\n                try:\n                    with self.lock:\n                        for name, image in self.preview_buffer.items():\n                            cv2.imshow(name, image)\n\n                    key = cv2.waitKey(1000)\n                    if key == ord('\\n') or key == ord('\\r'):\n                        break\n                    if key == ord('s'):\n                        self.save_now = True\n                except KeyboardInterrupt:\n                    break\n        else:\n            input() # TODO how to catch a specific key instead of Enter?\n            # there isnt a good multiplatform solution: https://stackoverflow.com/questions/3523174/raw-input-in-python-without-pressing-enter\n\n        print(\"Exit requested! The trainer will complete its current cycle, save the models and quit (it can take up a couple of seconds depending on your training speed). If you want to kill it now, press Ctrl + c\")\n        self.stop = True\n        thr.join() # waits until thread finishes\n\n    def processThread(self):\n        try:\n            if self.arguments.allow_growth:\n                self.set_tf_allow_growth()\n\n            print('Loading data, this may take a while...')\n            # this is so that you can enter case insensitive values for trainer\n            trainer = self.arguments.trainer\n            trainer = \"LowMem\" if trainer.lower() == \"lowmem\" else trainer\n            model = PluginLoader.get_model(trainer)(get_folder(self.arguments.model_dir), self.arguments.gpus)\n            model.load(swapped=False)\n\n            images_A = get_image_paths(self.arguments.input_A)\n            images_B = get_image_paths(self.arguments.input_B)\n            trainer = PluginLoader.get_trainer(trainer)\n            trainer = trainer(model, images_A, images_B, self.arguments.batch_size, self.arguments.perceptual_loss)\n\n            print('Starting. Press \"Enter\" to stop training and save model')\n\n            for epoch in range(0, self.arguments.epochs):\n\n                save_iteration = epoch % self.arguments.save_interval == 0\n\n                trainer.train_one_step(epoch, self.show if (save_iteration or self.save_now) else None)\n\n                if save_iteration:\n                    model.save_weights()\n\n                if self.stop:\n                    model.save_weights()\n                    exit()\n\n                if self.save_now:\n                    model.save_weights()\n                    self.save_now = False\n\n        except KeyboardInterrupt:\n            try:\n                model.save_weights()\n            except KeyboardInterrupt:\n                print('Saving model weights has been cancelled!')\n            exit(0)\n        except Exception as e:\n            raise e\n            exit(1)\n\n    def set_tf_allow_growth(self):\n        import tensorflow as tf\n        from keras.backend.tensorflow_backend import set_session\n        config = tf.ConfigProto()\n        config.gpu_options.allow_growth = True\n        config.gpu_options.visible_device_list=\"0\"\n        set_session(tf.Session(config=config))\n\n    preview_buffer = {}\n\n    def show(self, image, name=''):\n        try:\n            if self.arguments.preview:\n                with self.lock:\n                    self.preview_buffer[name] = image\n            elif self.arguments.write_image:\n                cv2.imwrite('_sample_{}.jpg'.format(name), image)\n        except Exception as e:\n            print(\"could not preview sample\")\n            raise e\n", "description": "Non official project based on original /r/Deepfakes thread. Many thanks to him!", "file_name": "train.py", "id": "417ff9ff5612c119766b61cabb18115e", "language": "Python", "project_name": "faceswap", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/deepfakes-faceswap/deepfakes-faceswap-6ff64ef/scripts/train.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:27:43Z", "url": "https://github.com/deepfakes/faceswap", "wiki": true}