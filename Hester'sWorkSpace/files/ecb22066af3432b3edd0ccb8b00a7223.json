{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport functools\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    unified_timestamp,\n    OnDemandPagedList,\n)\n\n\nclass ACastIE(InfoExtractor):\n    IE_NAME = 'acast'\n    _VALID_URL = r'https?://(?:www\\.)?acast\\.com/(?P<channel>[^/]+)/(?P<id>[^/\n    _TESTS = [{\n        \n        'url': 'https://www.acast.com/condenasttraveler/-where-are-you-taipei-101-taiwan',\n        'md5': 'ada3de5a1e3a2a381327d749854788bb',\n        'info_dict': {\n            'id': '57de3baa-4bb0-487e-9418-2692c1277a34',\n            'ext': 'mp3',\n            'title': '\"Where Are You?\": Taipei 101, Taiwan',\n            'timestamp': 1196172000,\n            'upload_date': '20071127',\n            'description': 'md5:a0b4ef3634e63866b542e5b1199a1a0e',\n            'duration': 211,\n        }\n    }, {\n        \n        'url': 'https://www.acast.com/sparpodcast/2.raggarmordet-rosterurdetforflutna',\n        'md5': 'e87d5b8516cd04c0d81b6ee1caca28d0',\n        'info_dict': {\n            'id': '2a92b283-1a75-4ad8-8396-499c641de0d9',\n            'ext': 'mp3',\n            'title': '2. Raggarmordet - R\u00f6ster ur det f\u00f6rflutna',\n            'timestamp': 1477346700,\n            'upload_date': '20161024',\n            'description': 'md5:4f81f6d8cf2e12ee21a321d8bca32db4',\n            'duration': 2766,\n        }\n    }]\n\n    def _real_extract(self, url):\n        channel, display_id = re.match(self._VALID_URL, url).groups()\n        cast_data = self._download_json(\n            'https://play-api.acast.com/splash/%s/%s' % (channel, display_id), display_id)\n        e = cast_data['result']['episode']\n        return {\n            'id': compat_str(e['id']),\n            'display_id': display_id,\n            'url': e['mediaUrl'],\n            'title': e['name'],\n            'description': e.get('description'),\n            'thumbnail': e.get('image'),\n            'timestamp': unified_timestamp(e.get('publishingDate')),\n            'duration': int_or_none(e.get('duration')),\n        }\n\n\nclass ACastChannelIE(InfoExtractor):\n    IE_NAME = 'acast:channel'\n    _VALID_URL = r'https?://(?:www\\.)?acast\\.com/(?P<id>[^/\n    _TEST = {\n        'url': 'https://www.acast.com/condenasttraveler',\n        'info_dict': {\n            'id': '50544219-29bb-499e-a083-6087f4cb7797',\n            'title': 'Cond\u00e9 Nast Traveler Podcast',\n            'description': 'md5:98646dee22a5b386626ae31866638fbd',\n        },\n        'playlist_mincount': 20,\n    }\n    _API_BASE_URL = 'https://www.acast.com/api/'\n    _PAGE_SIZE = 10\n\n    @classmethod\n    def suitable(cls, url):\n        return False if ACastIE.suitable(url) else super(ACastChannelIE, cls).suitable(url)\n\n    def _fetch_page(self, channel_slug, page):\n        casts = self._download_json(\n            self._API_BASE_URL + 'channels/%s/acasts?page=%s' % (channel_slug, page),\n            channel_slug, note='Download page %d of channel data' % page)\n        for cast in casts:\n            yield self.url_result(\n                'https://www.acast.com/%s/%s' % (channel_slug, cast['url']),\n                'ACast', cast['id'])\n\n    def _real_extract(self, url):\n        channel_slug = self._match_id(url)\n        channel_data = self._download_json(\n            self._API_BASE_URL + 'channels/%s' % channel_slug, channel_slug)\n        entries = OnDemandPagedList(functools.partial(\n            self._fetch_page, channel_slug), self._PAGE_SIZE)\n        return self.playlist_result(entries, compat_str(\n            channel_data['id']), channel_data['name'], channel_data.get('description'))\n", "comments": "# coding: utf-8\n#?]+)'\n# test with one bling\n# test with multiple blings\n#?]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport functools\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    unified_timestamp,\n    OnDemandPagedList,\n)\n\n\nclass ACastIE(InfoExtractor):\n    IE_NAME = 'acast'\n    _VALID_URL = r'https?://(?:www\\.)?acast\\.com/(?P<channel>[^/]+)/(?P<id>[^/#?]+)'\n    _TESTS = [{\n        # test with one bling\n        'url': 'https://www.acast.com/condenasttraveler/-where-are-you-taipei-101-taiwan',\n        'md5': 'ada3de5a1e3a2a381327d749854788bb',\n        'info_dict': {\n            'id': '57de3baa-4bb0-487e-9418-2692c1277a34',\n            'ext': 'mp3',\n            'title': '\"Where Are You?\": Taipei 101, Taiwan',\n            'timestamp': 1196172000,\n            'upload_date': '20071127',\n            'description': 'md5:a0b4ef3634e63866b542e5b1199a1a0e',\n            'duration': 211,\n        }\n    }, {\n        # test with multiple blings\n        'url': 'https://www.acast.com/sparpodcast/2.raggarmordet-rosterurdetforflutna',\n        'md5': 'e87d5b8516cd04c0d81b6ee1caca28d0',\n        'info_dict': {\n            'id': '2a92b283-1a75-4ad8-8396-499c641de0d9',\n            'ext': 'mp3',\n            'title': '2. Raggarmordet - R\u00f6ster ur det f\u00f6rflutna',\n            'timestamp': 1477346700,\n            'upload_date': '20161024',\n            'description': 'md5:4f81f6d8cf2e12ee21a321d8bca32db4',\n            'duration': 2766,\n        }\n    }]\n\n    def _real_extract(self, url):\n        channel, display_id = re.match(self._VALID_URL, url).groups()\n        cast_data = self._download_json(\n            'https://play-api.acast.com/splash/%s/%s' % (channel, display_id), display_id)\n        e = cast_data['result']['episode']\n        return {\n            'id': compat_str(e['id']),\n            'display_id': display_id,\n            'url': e['mediaUrl'],\n            'title': e['name'],\n            'description': e.get('description'),\n            'thumbnail': e.get('image'),\n            'timestamp': unified_timestamp(e.get('publishingDate')),\n            'duration': int_or_none(e.get('duration')),\n        }\n\n\nclass ACastChannelIE(InfoExtractor):\n    IE_NAME = 'acast:channel'\n    _VALID_URL = r'https?://(?:www\\.)?acast\\.com/(?P<id>[^/#?]+)'\n    _TEST = {\n        'url': 'https://www.acast.com/condenasttraveler',\n        'info_dict': {\n            'id': '50544219-29bb-499e-a083-6087f4cb7797',\n            'title': 'Cond\u00e9 Nast Traveler Podcast',\n            'description': 'md5:98646dee22a5b386626ae31866638fbd',\n        },\n        'playlist_mincount': 20,\n    }\n    _API_BASE_URL = 'https://www.acast.com/api/'\n    _PAGE_SIZE = 10\n\n    @classmethod\n    def suitable(cls, url):\n        return False if ACastIE.suitable(url) else super(ACastChannelIE, cls).suitable(url)\n\n    def _fetch_page(self, channel_slug, page):\n        casts = self._download_json(\n            self._API_BASE_URL + 'channels/%s/acasts?page=%s' % (channel_slug, page),\n            channel_slug, note='Download page %d of channel data' % page)\n        for cast in casts:\n            yield self.url_result(\n                'https://www.acast.com/%s/%s' % (channel_slug, cast['url']),\n                'ACast', cast['id'])\n\n    def _real_extract(self, url):\n        channel_slug = self._match_id(url)\n        channel_data = self._download_json(\n            self._API_BASE_URL + 'channels/%s' % channel_slug, channel_slug)\n        entries = OnDemandPagedList(functools.partial(\n            self._fetch_page, channel_slug), self._PAGE_SIZE)\n        return self.playlist_result(entries, compat_str(\n            channel_data['id']), channel_data['name'], channel_data.get('description'))\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "acast.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/acast.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}