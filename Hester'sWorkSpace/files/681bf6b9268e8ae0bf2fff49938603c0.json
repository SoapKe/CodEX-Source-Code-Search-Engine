{"author": "django", "code": "from django.contrib.auth.models import User\nfrom django.db import models\n\n\nclass Animal(models.Model):\n    name = models.CharField(max_length=150)\n    latin_name = models.CharField(max_length=150)\n    count = models.IntegerField()\n    weight = models.FloatField()\n\n    \n    specimens = models.Manager()\n\n    def __str__(self):\n        return self.name\n\n\nclass Plant(models.Model):\n    name = models.CharField(max_length=150)\n\n    class Meta:\n        \n        db_table = \"Fixtures_regress_plant\"\n\n\nclass Stuff(models.Model):\n    name = models.CharField(max_length=20, null=True)\n    owner = models.ForeignKey(User, models.SET_NULL, null=True)\n\n    def __str__(self):\n        return self.name + ' is owned by ' + str(self.owner)\n\n\nclass Absolute(models.Model):\n    name = models.CharField(max_length=40)\n\n\nclass Parent(models.Model):\n    name = models.CharField(max_length=10)\n\n    class Meta:\n        ordering = ('id',)\n\n\nclass Child(Parent):\n    data = models.CharField(max_length=10)\n\n\n\nclass Channel(models.Model):\n    name = models.CharField(max_length=255)\n\n\nclass Article(models.Model):\n    title = models.CharField(max_length=255)\n    channels = models.ManyToManyField(Channel)\n\n    class Meta:\n        ordering = ('id',)\n\n\n\nclass SpecialArticle(Article):\n    pass\n\n\n\nclass CommonFeature(Article):\n\n    class Meta:\n        abstract = True\n\n\nclass Feature(CommonFeature):\n    pass\n\n\n\nclass Widget(models.Model):\n    name = models.CharField(max_length=255)\n\n    class Meta:\n        ordering = ('name',)\n\n    def __str__(self):\n        return self.name\n\n\nclass WidgetProxy(Widget):\n    class Meta:\n        proxy = True\n\n\n\nclass TestManager(models.Manager):\n    def get_by_natural_key(self, key):\n        return self.get(name=key)\n\n\nclass Store(models.Model):\n    objects = TestManager()\n    name = models.CharField(max_length=255)\n    main = models.ForeignKey('self', models.SET_NULL, null=True)\n\n    class Meta:\n        ordering = ('name',)\n\n    def __str__(self):\n        return self.name\n\n    def natural_key(self):\n        return (self.name,)\n\n\nclass Person(models.Model):\n    objects = TestManager()\n    name = models.CharField(max_length=255)\n\n    class Meta:\n        ordering = ('name',)\n\n    def __str__(self):\n        return self.name\n\n    \n    \n    def natural_key(self):\n        return (self.name,)\n    natural_key.dependencies = ['fixtures_regress.store']\n\n\nclass Book(models.Model):\n    name = models.CharField(max_length=255)\n    author = models.ForeignKey(Person, models.CASCADE)\n    stores = models.ManyToManyField(Store)\n\n    class Meta:\n        ordering = ('name',)\n\n    def __str__(self):\n        return '%s by %s (available at %s)' % (\n            self.name,\n            self.author.name,\n            ', '.join(s.name for s in self.stores.all())\n        )\n\n\nclass NKManager(models.Manager):\n    def get_by_natural_key(self, data):\n        return self.get(data=data)\n\n\nclass NKChild(Parent):\n    data = models.CharField(max_length=10, unique=True)\n    objects = NKManager()\n\n    def natural_key(self):\n        return (self.data,)\n\n    def __str__(self):\n        return 'NKChild %s:%s' % (self.name, self.data)\n\n\nclass RefToNKChild(models.Model):\n    text = models.CharField(max_length=10)\n    nk_fk = models.ForeignKey(NKChild, models.CASCADE, related_name='ref_fks')\n    nk_m2m = models.ManyToManyField(NKChild, related_name='ref_m2ms')\n\n    def __str__(self):\n        return '%s: Reference to %s [%s]' % (\n            self.text,\n            self.nk_fk,\n            ', '.join(str(o) for o in self.nk_m2m.all())\n        )\n\n\n\nclass Circle1(models.Model):\n    name = models.CharField(max_length=255)\n\n    def natural_key(self):\n        return (self.name,)\n    natural_key.dependencies = ['fixtures_regress.circle2']\n\n\nclass Circle2(models.Model):\n    name = models.CharField(max_length=255)\n\n    def natural_key(self):\n        return (self.name,)\n    natural_key.dependencies = ['fixtures_regress.circle1']\n\n\nclass Circle3(models.Model):\n    name = models.CharField(max_length=255)\n\n    def natural_key(self):\n        return (self.name,)\n    natural_key.dependencies = ['fixtures_regress.circle3']\n\n\nclass Circle4(models.Model):\n    name = models.CharField(max_length=255)\n\n    def natural_key(self):\n        return (self.name,)\n    natural_key.dependencies = ['fixtures_regress.circle5']\n\n\nclass Circle5(models.Model):\n    name = models.CharField(max_length=255)\n\n    def natural_key(self):\n        return (self.name,)\n    natural_key.dependencies = ['fixtures_regress.circle6']\n\n\nclass Circle6(models.Model):\n    name = models.CharField(max_length=255)\n\n    def natural_key(self):\n        return (self.name,)\n    natural_key.dependencies = ['fixtures_regress.circle4']\n\n\nclass ExternalDependency(models.Model):\n    name = models.CharField(max_length=255)\n\n    def natural_key(self):\n        return (self.name,)\n    natural_key.dependencies = ['fixtures_regress.book']\n\n\n\nclass Thingy(models.Model):\n    name = models.CharField(max_length=255)\n\n\nclass M2MToSelf(models.Model):\n    parent = models.ManyToManyField(\"self\", blank=True)\n\n\nclass BaseNKModel(models.Model):\n    \n    data = models.CharField(max_length=20, unique=True)\n    objects = NKManager()\n\n    class Meta:\n        abstract = True\n\n    def __str__(self):\n        return self.data\n\n    def natural_key(self):\n        return (self.data,)\n\n\nclass M2MSimpleA(BaseNKModel):\n    b_set = models.ManyToManyField(\"M2MSimpleB\")\n\n\nclass M2MSimpleB(BaseNKModel):\n    pass\n\n\nclass M2MSimpleCircularA(BaseNKModel):\n    b_set = models.ManyToManyField(\"M2MSimpleCircularB\")\n\n\nclass M2MSimpleCircularB(BaseNKModel):\n    a_set = models.ManyToManyField(\"M2MSimpleCircularA\")\n\n\nclass M2MComplexA(BaseNKModel):\n    b_set = models.ManyToManyField(\"M2MComplexB\", through=\"M2MThroughAB\")\n\n\nclass M2MComplexB(BaseNKModel):\n    pass\n\n\nclass M2MThroughAB(BaseNKModel):\n    a = models.ForeignKey(M2MComplexA, models.CASCADE)\n    b = models.ForeignKey(M2MComplexB, models.CASCADE)\n\n\nclass M2MComplexCircular1A(BaseNKModel):\n    b_set = models.ManyToManyField(\"M2MComplexCircular1B\",\n                                   through=\"M2MCircular1ThroughAB\")\n\n\nclass M2MComplexCircular1B(BaseNKModel):\n    c_set = models.ManyToManyField(\"M2MComplexCircular1C\",\n                                   through=\"M2MCircular1ThroughBC\")\n\n\nclass M2MComplexCircular1C(BaseNKModel):\n    a_set = models.ManyToManyField(\"M2MComplexCircular1A\",\n                                   through=\"M2MCircular1ThroughCA\")\n\n\nclass M2MCircular1ThroughAB(BaseNKModel):\n    a = models.ForeignKey(M2MComplexCircular1A, models.CASCADE)\n    b = models.ForeignKey(M2MComplexCircular1B, models.CASCADE)\n\n\nclass M2MCircular1ThroughBC(BaseNKModel):\n    b = models.ForeignKey(M2MComplexCircular1B, models.CASCADE)\n    c = models.ForeignKey(M2MComplexCircular1C, models.CASCADE)\n\n\nclass M2MCircular1ThroughCA(BaseNKModel):\n    c = models.ForeignKey(M2MComplexCircular1C, models.CASCADE)\n    a = models.ForeignKey(M2MComplexCircular1A, models.CASCADE)\n\n\nclass M2MComplexCircular2A(BaseNKModel):\n    b_set = models.ManyToManyField(\"M2MComplexCircular2B\",\n                                   through=\"M2MCircular2ThroughAB\")\n\n\nclass M2MComplexCircular2B(BaseNKModel):\n    def natural_key(self):\n        return (self.data,)\n    \n    natural_key.dependencies = [\"fixtures_regress.M2MComplexCircular2A\"]\n\n\nclass M2MCircular2ThroughAB(BaseNKModel):\n    a = models.ForeignKey(M2MComplexCircular2A, models.CASCADE)\n    b = models.ForeignKey(M2MComplexCircular2B, models.CASCADE)\n", "comments": "        base model natural key manager  get natural key             use non default name default manager    for testing upper case letter app name  regression  4057    models regression test  7572   20820    subclass model manytomanyfield test ticket 20820    models regression test  22421    models regression test  11428    check forward references fks m2ms natural keys    person actually dependency store  need define    one test behavior dependency resolution algorithm     ome models pathological circular dependencies    model regression test  11101    fake dependency circularity ", "content": "from django.contrib.auth.models import User\nfrom django.db import models\n\n\nclass Animal(models.Model):\n    name = models.CharField(max_length=150)\n    latin_name = models.CharField(max_length=150)\n    count = models.IntegerField()\n    weight = models.FloatField()\n\n    # use a non-default name for the default manager\n    specimens = models.Manager()\n\n    def __str__(self):\n        return self.name\n\n\nclass Plant(models.Model):\n    name = models.CharField(max_length=150)\n\n    class Meta:\n        # For testing when upper case letter in app name; regression for #4057\n        db_table = \"Fixtures_regress_plant\"\n\n\nclass Stuff(models.Model):\n    name = models.CharField(max_length=20, null=True)\n    owner = models.ForeignKey(User, models.SET_NULL, null=True)\n\n    def __str__(self):\n        return self.name + ' is owned by ' + str(self.owner)\n\n\nclass Absolute(models.Model):\n    name = models.CharField(max_length=40)\n\n\nclass Parent(models.Model):\n    name = models.CharField(max_length=10)\n\n    class Meta:\n        ordering = ('id',)\n\n\nclass Child(Parent):\n    data = models.CharField(max_length=10)\n\n\n# Models to regression test #7572, #20820\nclass Channel(models.Model):\n    name = models.CharField(max_length=255)\n\n\nclass Article(models.Model):\n    title = models.CharField(max_length=255)\n    channels = models.ManyToManyField(Channel)\n\n    class Meta:\n        ordering = ('id',)\n\n\n# Subclass of a model with a ManyToManyField for test_ticket_20820\nclass SpecialArticle(Article):\n    pass\n\n\n# Models to regression test #22421\nclass CommonFeature(Article):\n\n    class Meta:\n        abstract = True\n\n\nclass Feature(CommonFeature):\n    pass\n\n\n# Models to regression test #11428\nclass Widget(models.Model):\n    name = models.CharField(max_length=255)\n\n    class Meta:\n        ordering = ('name',)\n\n    def __str__(self):\n        return self.name\n\n\nclass WidgetProxy(Widget):\n    class Meta:\n        proxy = True\n\n\n# Check for forward references in FKs and M2Ms with natural keys\nclass TestManager(models.Manager):\n    def get_by_natural_key(self, key):\n        return self.get(name=key)\n\n\nclass Store(models.Model):\n    objects = TestManager()\n    name = models.CharField(max_length=255)\n    main = models.ForeignKey('self', models.SET_NULL, null=True)\n\n    class Meta:\n        ordering = ('name',)\n\n    def __str__(self):\n        return self.name\n\n    def natural_key(self):\n        return (self.name,)\n\n\nclass Person(models.Model):\n    objects = TestManager()\n    name = models.CharField(max_length=255)\n\n    class Meta:\n        ordering = ('name',)\n\n    def __str__(self):\n        return self.name\n\n    # Person doesn't actually have a dependency on store, but we need to define\n    # one to test the behavior of the dependency resolution algorithm.\n    def natural_key(self):\n        return (self.name,)\n    natural_key.dependencies = ['fixtures_regress.store']\n\n\nclass Book(models.Model):\n    name = models.CharField(max_length=255)\n    author = models.ForeignKey(Person, models.CASCADE)\n    stores = models.ManyToManyField(Store)\n\n    class Meta:\n        ordering = ('name',)\n\n    def __str__(self):\n        return '%s by %s (available at %s)' % (\n            self.name,\n            self.author.name,\n            ', '.join(s.name for s in self.stores.all())\n        )\n\n\nclass NKManager(models.Manager):\n    def get_by_natural_key(self, data):\n        return self.get(data=data)\n\n\nclass NKChild(Parent):\n    data = models.CharField(max_length=10, unique=True)\n    objects = NKManager()\n\n    def natural_key(self):\n        return (self.data,)\n\n    def __str__(self):\n        return 'NKChild %s:%s' % (self.name, self.data)\n\n\nclass RefToNKChild(models.Model):\n    text = models.CharField(max_length=10)\n    nk_fk = models.ForeignKey(NKChild, models.CASCADE, related_name='ref_fks')\n    nk_m2m = models.ManyToManyField(NKChild, related_name='ref_m2ms')\n\n    def __str__(self):\n        return '%s: Reference to %s [%s]' % (\n            self.text,\n            self.nk_fk,\n            ', '.join(str(o) for o in self.nk_m2m.all())\n        )\n\n\n# ome models with pathological circular dependencies\nclass Circle1(models.Model):\n    name = models.CharField(max_length=255)\n\n    def natural_key(self):\n        return (self.name,)\n    natural_key.dependencies = ['fixtures_regress.circle2']\n\n\nclass Circle2(models.Model):\n    name = models.CharField(max_length=255)\n\n    def natural_key(self):\n        return (self.name,)\n    natural_key.dependencies = ['fixtures_regress.circle1']\n\n\nclass Circle3(models.Model):\n    name = models.CharField(max_length=255)\n\n    def natural_key(self):\n        return (self.name,)\n    natural_key.dependencies = ['fixtures_regress.circle3']\n\n\nclass Circle4(models.Model):\n    name = models.CharField(max_length=255)\n\n    def natural_key(self):\n        return (self.name,)\n    natural_key.dependencies = ['fixtures_regress.circle5']\n\n\nclass Circle5(models.Model):\n    name = models.CharField(max_length=255)\n\n    def natural_key(self):\n        return (self.name,)\n    natural_key.dependencies = ['fixtures_regress.circle6']\n\n\nclass Circle6(models.Model):\n    name = models.CharField(max_length=255)\n\n    def natural_key(self):\n        return (self.name,)\n    natural_key.dependencies = ['fixtures_regress.circle4']\n\n\nclass ExternalDependency(models.Model):\n    name = models.CharField(max_length=255)\n\n    def natural_key(self):\n        return (self.name,)\n    natural_key.dependencies = ['fixtures_regress.book']\n\n\n# Model for regression test of #11101\nclass Thingy(models.Model):\n    name = models.CharField(max_length=255)\n\n\nclass M2MToSelf(models.Model):\n    parent = models.ManyToManyField(\"self\", blank=True)\n\n\nclass BaseNKModel(models.Model):\n    \"\"\"\n    Base model with a natural_key and a manager with `get_by_natural_key`\n    \"\"\"\n    data = models.CharField(max_length=20, unique=True)\n    objects = NKManager()\n\n    class Meta:\n        abstract = True\n\n    def __str__(self):\n        return self.data\n\n    def natural_key(self):\n        return (self.data,)\n\n\nclass M2MSimpleA(BaseNKModel):\n    b_set = models.ManyToManyField(\"M2MSimpleB\")\n\n\nclass M2MSimpleB(BaseNKModel):\n    pass\n\n\nclass M2MSimpleCircularA(BaseNKModel):\n    b_set = models.ManyToManyField(\"M2MSimpleCircularB\")\n\n\nclass M2MSimpleCircularB(BaseNKModel):\n    a_set = models.ManyToManyField(\"M2MSimpleCircularA\")\n\n\nclass M2MComplexA(BaseNKModel):\n    b_set = models.ManyToManyField(\"M2MComplexB\", through=\"M2MThroughAB\")\n\n\nclass M2MComplexB(BaseNKModel):\n    pass\n\n\nclass M2MThroughAB(BaseNKModel):\n    a = models.ForeignKey(M2MComplexA, models.CASCADE)\n    b = models.ForeignKey(M2MComplexB, models.CASCADE)\n\n\nclass M2MComplexCircular1A(BaseNKModel):\n    b_set = models.ManyToManyField(\"M2MComplexCircular1B\",\n                                   through=\"M2MCircular1ThroughAB\")\n\n\nclass M2MComplexCircular1B(BaseNKModel):\n    c_set = models.ManyToManyField(\"M2MComplexCircular1C\",\n                                   through=\"M2MCircular1ThroughBC\")\n\n\nclass M2MComplexCircular1C(BaseNKModel):\n    a_set = models.ManyToManyField(\"M2MComplexCircular1A\",\n                                   through=\"M2MCircular1ThroughCA\")\n\n\nclass M2MCircular1ThroughAB(BaseNKModel):\n    a = models.ForeignKey(M2MComplexCircular1A, models.CASCADE)\n    b = models.ForeignKey(M2MComplexCircular1B, models.CASCADE)\n\n\nclass M2MCircular1ThroughBC(BaseNKModel):\n    b = models.ForeignKey(M2MComplexCircular1B, models.CASCADE)\n    c = models.ForeignKey(M2MComplexCircular1C, models.CASCADE)\n\n\nclass M2MCircular1ThroughCA(BaseNKModel):\n    c = models.ForeignKey(M2MComplexCircular1C, models.CASCADE)\n    a = models.ForeignKey(M2MComplexCircular1A, models.CASCADE)\n\n\nclass M2MComplexCircular2A(BaseNKModel):\n    b_set = models.ManyToManyField(\"M2MComplexCircular2B\",\n                                   through=\"M2MCircular2ThroughAB\")\n\n\nclass M2MComplexCircular2B(BaseNKModel):\n    def natural_key(self):\n        return (self.data,)\n    # Fake the dependency for a circularity\n    natural_key.dependencies = [\"fixtures_regress.M2MComplexCircular2A\"]\n\n\nclass M2MCircular2ThroughAB(BaseNKModel):\n    a = models.ForeignKey(M2MComplexCircular2A, models.CASCADE)\n    b = models.ForeignKey(M2MComplexCircular2B, models.CASCADE)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "681bf6b9268e8ae0bf2fff49938603c0", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/fixtures_regress/models.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}