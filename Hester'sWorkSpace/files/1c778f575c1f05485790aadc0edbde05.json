{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport os.path\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    url_basename,\n    remove_start,\n)\n\n\nclass DemocracynowIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?democracynow\\.org/(?P<id>[^\\?]*)'\n    IE_NAME = 'democracynow'\n    _TESTS = [{\n        'url': 'http://www.democracynow.org/shows/2015/7/3',\n        'md5': '3757c182d3d84da68f5c8f506c18c196',\n        'info_dict': {\n            'id': '2015-0703-001',\n            'ext': 'mp4',\n            'title': 'Daily Show for July 03, 2015',\n            'description': 'md5:80eb927244d6749900de6072c7cc2c86',\n        },\n    }, {\n        'url': 'http://www.democracynow.org/2015/7/3/this_flag_comes_down_today_bree',\n        'info_dict': {\n            'id': '2015-0703-001',\n            'ext': 'mp4',\n            'title': '\"This Flag Comes Down Today\": Bree Newsome Scales SC Capitol Flagpole, Takes Down Confederate Flag',\n            'description': 'md5:4d2bc4f0d29f5553c2210a4bc7761a21',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        json_data = self._parse_json(self._search_regex(\n            r'<script[^>]+type=\"text/json\"[^>]*>\\s*({[^>]+})', webpage, 'json'),\n            display_id)\n\n        title = json_data['title']\n        formats = []\n\n        video_id = None\n\n        for key in ('file', 'audio', 'video', 'high_res_video'):\n            media_url = json_data.get(key, '')\n            if not media_url:\n                continue\n            media_url = re.sub(r'\\?.*', '', compat_urlparse.urljoin(url, media_url))\n            video_id = video_id or remove_start(os.path.splitext(url_basename(media_url))[0], 'dn')\n            formats.append({\n                'url': media_url,\n                'vcodec': 'none' if key == 'audio' else None,\n            })\n\n        self._sort_formats(formats)\n\n        default_lang = 'en'\n        subtitles = {}\n\n        def add_subtitle_item(lang, info_dict):\n            if lang not in subtitles:\n                subtitles[lang] = []\n            subtitles[lang].append(info_dict)\n\n        \n        if 'caption_file' in json_data:\n            add_subtitle_item(default_lang, {\n                'url': compat_urlparse.urljoin(url, json_data['caption_file']),\n            })\n\n        for subtitle_item in json_data.get('captions', []):\n            lang = subtitle_item.get('language', '').lower() or default_lang\n            add_subtitle_item(lang, {\n                'url': compat_urlparse.urljoin(url, subtitle_item['url']),\n            })\n\n        description = self._og_search_description(webpage, default=None)\n\n        return {\n            'id': video_id or display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': json_data.get('image'),\n            'subtitles': subtitles,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# chapter_file are not subtitles\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport os.path\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    url_basename,\n    remove_start,\n)\n\n\nclass DemocracynowIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?democracynow\\.org/(?P<id>[^\\?]*)'\n    IE_NAME = 'democracynow'\n    _TESTS = [{\n        'url': 'http://www.democracynow.org/shows/2015/7/3',\n        'md5': '3757c182d3d84da68f5c8f506c18c196',\n        'info_dict': {\n            'id': '2015-0703-001',\n            'ext': 'mp4',\n            'title': 'Daily Show for July 03, 2015',\n            'description': 'md5:80eb927244d6749900de6072c7cc2c86',\n        },\n    }, {\n        'url': 'http://www.democracynow.org/2015/7/3/this_flag_comes_down_today_bree',\n        'info_dict': {\n            'id': '2015-0703-001',\n            'ext': 'mp4',\n            'title': '\"This Flag Comes Down Today\": Bree Newsome Scales SC Capitol Flagpole, Takes Down Confederate Flag',\n            'description': 'md5:4d2bc4f0d29f5553c2210a4bc7761a21',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        json_data = self._parse_json(self._search_regex(\n            r'<script[^>]+type=\"text/json\"[^>]*>\\s*({[^>]+})', webpage, 'json'),\n            display_id)\n\n        title = json_data['title']\n        formats = []\n\n        video_id = None\n\n        for key in ('file', 'audio', 'video', 'high_res_video'):\n            media_url = json_data.get(key, '')\n            if not media_url:\n                continue\n            media_url = re.sub(r'\\?.*', '', compat_urlparse.urljoin(url, media_url))\n            video_id = video_id or remove_start(os.path.splitext(url_basename(media_url))[0], 'dn')\n            formats.append({\n                'url': media_url,\n                'vcodec': 'none' if key == 'audio' else None,\n            })\n\n        self._sort_formats(formats)\n\n        default_lang = 'en'\n        subtitles = {}\n\n        def add_subtitle_item(lang, info_dict):\n            if lang not in subtitles:\n                subtitles[lang] = []\n            subtitles[lang].append(info_dict)\n\n        # chapter_file are not subtitles\n        if 'caption_file' in json_data:\n            add_subtitle_item(default_lang, {\n                'url': compat_urlparse.urljoin(url, json_data['caption_file']),\n            })\n\n        for subtitle_item in json_data.get('captions', []):\n            lang = subtitle_item.get('language', '').lower() or default_lang\n            add_subtitle_item(lang, {\n                'url': compat_urlparse.urljoin(url, subtitle_item['url']),\n            })\n\n        description = self._og_search_description(webpage, default=None)\n\n        return {\n            'id': video_id or display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': json_data.get('image'),\n            'subtitles': subtitles,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "democracynow.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/democracynow.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}