{"author": "powerline", "code": "\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\n\nimport sys\nimport os\n\nfrom colormath.color_objects import sRGBColor, LabColor\nfrom colormath.color_conversions import convert_color\nfrom colormath.color_diff import delta_e_cie2000\n\n\ndef get_lab(name, rgb):\n\trgb = sRGBColor(\n\t\tint(rgb[:2], 16), int(rgb[2:4], 16), int(rgb[4:6], 16),\n\t\tis_upscaled=True\n\t)\n\tlab = convert_color(rgb, LabColor)\n\treturn name, lab\n\n\nwith open(os.path.join(os.path.dirname(__file__), 'colors.map'), 'r') as f:\n\tcolors = [get_lab(*line.split('\\t')) for line in f]\n\n\nulab = get_lab(None, sys.argv[1])[1]\n\n\ndef find_color(urgb, colors):\n\tcur_distance = 3 * (255 ** 2 + 1)\n\tcur_color = None\n\tfor color, clab in colors:\n\t\tdist = delta_e_cie2000(ulab, clab)\n\t\tif dist < cur_distance:\n\t\t\tcur_distance = dist\n\t\t\tcur_color = (color, clab)\n\treturn cur_color\n\n\ncur_color = find_color(ulab, colors)\n\n\ndef lab_to_csi(lab):\n\trgb = convert_color(lab, sRGBColor)\n\tcolstr = ';2;' + ';'.join((str(i) for i in get_upscaled_values(rgb)))\n\treturn colstr + 'm'\n\n\ndef get_upscaled_values(rgb):\n\treturn [min(max(0, i), 255) for i in rgb.get_upscaled_value_tuple()]\n\n\ndef get_rgb(lab):\n\trgb = convert_color(lab, sRGBColor)\n\trgb = sRGBColor(*get_upscaled_values(rgb), is_upscaled=True)\n\treturn rgb.get_rgb_hex()[1:]\n\nprint(get_rgb(ulab), ':', cur_color[0], ':', get_rgb(cur_color[1]))\n\ncol_1 = lab_to_csi(ulab)\ncol_2 = lab_to_csi(cur_color[1])\nsys.stdout.write('\\033[48' + col_1 + '\\033[38' + col_2 + 'abc\\033[0m <-- bg:urgb, fg:crgb\\n')\nsys.stdout.write('\\033[48' + col_2 + '\\033[38' + col_1 + 'abc\\033[0m <-- bg:crgb, fg:urgb\\n')\n", "comments": "   usr bin env python    vim fileencoding utf 8 noet ", "content": "#!/usr/bin/env python\n# vim:fileencoding=utf-8:noet\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\n\nimport sys\nimport os\n\nfrom colormath.color_objects import sRGBColor, LabColor\nfrom colormath.color_conversions import convert_color\nfrom colormath.color_diff import delta_e_cie2000\n\n\ndef get_lab(name, rgb):\n\trgb = sRGBColor(\n\t\tint(rgb[:2], 16), int(rgb[2:4], 16), int(rgb[4:6], 16),\n\t\tis_upscaled=True\n\t)\n\tlab = convert_color(rgb, LabColor)\n\treturn name, lab\n\n\nwith open(os.path.join(os.path.dirname(__file__), 'colors.map'), 'r') as f:\n\tcolors = [get_lab(*line.split('\\t')) for line in f]\n\n\nulab = get_lab(None, sys.argv[1])[1]\n\n\ndef find_color(urgb, colors):\n\tcur_distance = 3 * (255 ** 2 + 1)\n\tcur_color = None\n\tfor color, clab in colors:\n\t\tdist = delta_e_cie2000(ulab, clab)\n\t\tif dist < cur_distance:\n\t\t\tcur_distance = dist\n\t\t\tcur_color = (color, clab)\n\treturn cur_color\n\n\ncur_color = find_color(ulab, colors)\n\n\ndef lab_to_csi(lab):\n\trgb = convert_color(lab, sRGBColor)\n\tcolstr = ';2;' + ';'.join((str(i) for i in get_upscaled_values(rgb)))\n\treturn colstr + 'm'\n\n\ndef get_upscaled_values(rgb):\n\treturn [min(max(0, i), 255) for i in rgb.get_upscaled_value_tuple()]\n\n\ndef get_rgb(lab):\n\trgb = convert_color(lab, sRGBColor)\n\trgb = sRGBColor(*get_upscaled_values(rgb), is_upscaled=True)\n\treturn rgb.get_rgb_hex()[1:]\n\nprint(get_rgb(ulab), ':', cur_color[0], ':', get_rgb(cur_color[1]))\n\ncol_1 = lab_to_csi(ulab)\ncol_2 = lab_to_csi(cur_color[1])\nsys.stdout.write('\\033[48' + col_1 + '\\033[38' + col_2 + 'abc\\033[0m <-- bg:urgb, fg:crgb\\n')\nsys.stdout.write('\\033[48' + col_2 + '\\033[38' + col_1 + 'abc\\033[0m <-- bg:crgb, fg:urgb\\n')\n", "description": "Powerline is a statusline plugin for vim, and provides statuslines and prompts for several other applications, including zsh, bash, tmux, IPython, Awesome and Qtile.", "file_name": "colors_find.py", "id": "ebb0cba7f98e6272b82d03a1b3c11a62", "language": "Python", "project_name": "powerline", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/powerline-powerline/powerline-powerline-d36850f/tools/colors_find.py", "save_time": "", "source": "", "update_at": "2018-03-18T09:00:33Z", "url": "https://github.com/powerline/powerline", "wiki": false}