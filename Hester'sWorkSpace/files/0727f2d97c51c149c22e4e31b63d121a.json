{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright 2017 Radware LTD.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nimport os\nfrom mock import patch, MagicMock\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import patch\n\nRESP_STATUS = 0\nRESP_REASON = 1\nRESP_STR = 2\nRESP_DATA = 3\n\nNONE_PARAMS = {'vdirect_ip': None, 'vdirect_user': None, 'vdirect_password': None,\n               'vdirect_wait': None, 'vdirect_secondary_ip': None,\n               'vdirect_https_port': None, 'vdirect_http_port': None,\n               'vdirect_timeout': None, 'vdirect_use_ssl': None, 'vdirect_validate_certs': None}\n\n\n@patch('vdirect_client.rest_client.RestClient')\nclass RestClient ():\n    def __init__(self, vdirect_ip=None, vdirect_user=None, vdirect_password=None, wait=None,\n                 secondary_vdirect_ip=None, https_port=None, http_port=None,\n                 timeout=None, https=None, strict_http_results=None,\n                 verify=None):\n        pass\n\n\n@patch('vdirect_client.rest_client.Template')\nclass Template ():\n    create_from_source_result = None\n    upload_source_result = None\n\n    def __init__(self, client):\n        self.client = client\n\n    @classmethod\n    def set_create_from_source_result(cls, result):\n        Template.create_from_source_result = result\n\n    @classmethod\n    def set_upload_source_result(cls, result):\n        Template.upload_source_result = result\n\n    def create_from_source(self, data, name=None, tenant=None, fail_if_invalid=False):\n        return Template.create_from_source_result\n\n    def upload_source(self, data, name=None, tenant=None, fail_if_invalid=False):\n        return Template.upload_source_result\n\n\n@patch('vdirect_client.rest_client.WorkflowTemplate')\nclass WorkflowTemplate ():\n    create_template_from_archive_result = None\n    update_archive_result = None\n\n    def __init__(self, client):\n        self.client = client\n\n    @classmethod\n    def set_create_template_from_archive_result(cls, result):\n        WorkflowTemplate.create_template_from_archive_result = result\n\n    @classmethod\n    def set_update_archive_result(cls, result):\n        WorkflowTemplate.update_archive_result = result\n\n    def create_template_from_archive(self, data, validate=False, fail_if_invalid=False, tenant=None):\n        return WorkflowTemplate.create_template_from_archive_result\n\n    def update_archive(self, data, workflow_template_name):\n        return WorkflowTemplate.update_archive_result\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    def test_missing_parameter(self, *args):\n        module_mock = MagicMock()\n        with patch.dict('sys.modules', **{\n            'vdirect_client': module_mock,\n            'vdirect_client.rest_client': module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_file\n\n            try:\n                params = NONE_PARAMS.copy()\n                del params['vdirect_ip']\n                vdirect_file.VdirectFile(params)\n                self.fail(\"KeyError was not thrown for missing parameter\")\n            except KeyError:\n                assert True\n\n    def test_wrong_file_extension(self, *args):\n        module_mock = MagicMock()\n        with patch.dict('sys.modules', **{\n            'vdirect_client': module_mock,\n            'vdirect_client.rest_client': module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_file\n\n            module_mock.RESP_STATUS = 0\n            file = vdirect_file.VdirectFile(NONE_PARAMS)\n            result = file.upload(\"file.??\")\n            assert result == vdirect_file.WRONG_EXTENSION_ERROR\n\n    def test_missing_file(self, *args):\n        module_mock = MagicMock()\n        with patch.dict('sys.modules', **{\n            'vdirect_client': module_mock,\n            'vdirect_client.rest_client': module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_file\n\n            file = vdirect_file.VdirectFile(NONE_PARAMS)\n            try:\n                file.upload(\"missing_file.vm\")\n                self.fail(\"IOException was not thrown for missing file\")\n            except IOError:\n                assert True\n\n    def test_template_upload_create_success(self, *args):\n        module_mock = MagicMock()\n        with patch.dict('sys.modules', **{\n            'vdirect_client': module_mock,\n            'vdirect_client.rest_client': module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_file\n            vdirect_file.rest_client.RESP_STATUS = 0\n            vdirect_file.rest_client.Template = Template\n\n            Template.set_create_from_source_result([400])\n            file = vdirect_file.VdirectFile(NONE_PARAMS)\n            path = os.path.dirname(os.path.abspath(__file__))\n            result = file.upload(os.path.join(path, \"ct.vm\"))\n            self.assertEqual(result, vdirect_file.CONFIGURATION_TEMPLATE_CREATED_SUCCESS,\n                             'Unexpected result received:' + repr(result))\n\n    def test_template_upload_update_success(self, *args):\n        module_mock = MagicMock()\n        with patch.dict('sys.modules', **{\n            'vdirect_client': module_mock,\n            'vdirect_client.rest_client': module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_file\n            vdirect_file.rest_client.RESP_STATUS = 0\n            vdirect_file.rest_client.Template = Template\n\n            Template.set_create_from_source_result([409])\n            Template.set_upload_source_result([400])\n            file = vdirect_file.VdirectFile(NONE_PARAMS)\n            path = os.path.dirname(os.path.abspath(__file__))\n            result = file.upload(os.path.join(path, \"ct.vm\"))\n            self.assertEqual(result, vdirect_file.CONFIGURATION_TEMPLATE_UPDATED_SUCCESS,\n                             'Unexpected result received:' + repr(result))\n\n    def test_workflow_upload_create_success(self, *args):\n        module_mock = MagicMock()\n        with patch.dict('sys.modules', **{\n            'vdirect_client': module_mock,\n            'vdirect_client.rest_client': module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_file\n            vdirect_file.rest_client.RESP_STATUS = 0\n            vdirect_file.rest_client.WorkflowTemplate = WorkflowTemplate\n\n            WorkflowTemplate.set_create_template_from_archive_result([400])\n            file = vdirect_file.VdirectFile(NONE_PARAMS)\n            path = os.path.dirname(os.path.abspath(__file__))\n            result = file.upload(os.path.join(path, \"wt.zip\"))\n            self.assertEqual(result, vdirect_file.WORKFLOW_TEMPLATE_CREATED_SUCCESS,\n                             'Unexpected result received:' + repr(result))\n\n    def test_workflow_upload_update_success(self, *args):\n        module_mock = MagicMock()\n        with patch.dict('sys.modules', **{\n            'vdirect_client': module_mock,\n            'vdirect_client.rest_client': module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_file\n            vdirect_file.rest_client.RESP_STATUS = 0\n            vdirect_file.rest_client.WorkflowTemplate = WorkflowTemplate\n\n            WorkflowTemplate.set_create_template_from_archive_result([409])\n            WorkflowTemplate.set_update_archive_result([400])\n            file = vdirect_file.VdirectFile(NONE_PARAMS)\n            path = os.path.dirname(os.path.abspath(__file__))\n            result = file.upload(os.path.join(path, \"wt.zip\"))\n            self.assertEqual(result, vdirect_file.WORKFLOW_TEMPLATE_UPDATED_SUCCESS,\n                             'Unexpected result received:' + repr(result))\n", "comments": "      coding  utf 8           copyright 2017 radware ltd        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses    ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright 2017 Radware LTD.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nimport os\nfrom mock import patch, MagicMock\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import patch\n\nRESP_STATUS = 0\nRESP_REASON = 1\nRESP_STR = 2\nRESP_DATA = 3\n\nNONE_PARAMS = {'vdirect_ip': None, 'vdirect_user': None, 'vdirect_password': None,\n               'vdirect_wait': None, 'vdirect_secondary_ip': None,\n               'vdirect_https_port': None, 'vdirect_http_port': None,\n               'vdirect_timeout': None, 'vdirect_use_ssl': None, 'vdirect_validate_certs': None}\n\n\n@patch('vdirect_client.rest_client.RestClient')\nclass RestClient ():\n    def __init__(self, vdirect_ip=None, vdirect_user=None, vdirect_password=None, wait=None,\n                 secondary_vdirect_ip=None, https_port=None, http_port=None,\n                 timeout=None, https=None, strict_http_results=None,\n                 verify=None):\n        pass\n\n\n@patch('vdirect_client.rest_client.Template')\nclass Template ():\n    create_from_source_result = None\n    upload_source_result = None\n\n    def __init__(self, client):\n        self.client = client\n\n    @classmethod\n    def set_create_from_source_result(cls, result):\n        Template.create_from_source_result = result\n\n    @classmethod\n    def set_upload_source_result(cls, result):\n        Template.upload_source_result = result\n\n    def create_from_source(self, data, name=None, tenant=None, fail_if_invalid=False):\n        return Template.create_from_source_result\n\n    def upload_source(self, data, name=None, tenant=None, fail_if_invalid=False):\n        return Template.upload_source_result\n\n\n@patch('vdirect_client.rest_client.WorkflowTemplate')\nclass WorkflowTemplate ():\n    create_template_from_archive_result = None\n    update_archive_result = None\n\n    def __init__(self, client):\n        self.client = client\n\n    @classmethod\n    def set_create_template_from_archive_result(cls, result):\n        WorkflowTemplate.create_template_from_archive_result = result\n\n    @classmethod\n    def set_update_archive_result(cls, result):\n        WorkflowTemplate.update_archive_result = result\n\n    def create_template_from_archive(self, data, validate=False, fail_if_invalid=False, tenant=None):\n        return WorkflowTemplate.create_template_from_archive_result\n\n    def update_archive(self, data, workflow_template_name):\n        return WorkflowTemplate.update_archive_result\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    def test_missing_parameter(self, *args):\n        module_mock = MagicMock()\n        with patch.dict('sys.modules', **{\n            'vdirect_client': module_mock,\n            'vdirect_client.rest_client': module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_file\n\n            try:\n                params = NONE_PARAMS.copy()\n                del params['vdirect_ip']\n                vdirect_file.VdirectFile(params)\n                self.fail(\"KeyError was not thrown for missing parameter\")\n            except KeyError:\n                assert True\n\n    def test_wrong_file_extension(self, *args):\n        module_mock = MagicMock()\n        with patch.dict('sys.modules', **{\n            'vdirect_client': module_mock,\n            'vdirect_client.rest_client': module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_file\n\n            module_mock.RESP_STATUS = 0\n            file = vdirect_file.VdirectFile(NONE_PARAMS)\n            result = file.upload(\"file.??\")\n            assert result == vdirect_file.WRONG_EXTENSION_ERROR\n\n    def test_missing_file(self, *args):\n        module_mock = MagicMock()\n        with patch.dict('sys.modules', **{\n            'vdirect_client': module_mock,\n            'vdirect_client.rest_client': module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_file\n\n            file = vdirect_file.VdirectFile(NONE_PARAMS)\n            try:\n                file.upload(\"missing_file.vm\")\n                self.fail(\"IOException was not thrown for missing file\")\n            except IOError:\n                assert True\n\n    def test_template_upload_create_success(self, *args):\n        module_mock = MagicMock()\n        with patch.dict('sys.modules', **{\n            'vdirect_client': module_mock,\n            'vdirect_client.rest_client': module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_file\n            vdirect_file.rest_client.RESP_STATUS = 0\n            vdirect_file.rest_client.Template = Template\n\n            Template.set_create_from_source_result([400])\n            file = vdirect_file.VdirectFile(NONE_PARAMS)\n            path = os.path.dirname(os.path.abspath(__file__))\n            result = file.upload(os.path.join(path, \"ct.vm\"))\n            self.assertEqual(result, vdirect_file.CONFIGURATION_TEMPLATE_CREATED_SUCCESS,\n                             'Unexpected result received:' + repr(result))\n\n    def test_template_upload_update_success(self, *args):\n        module_mock = MagicMock()\n        with patch.dict('sys.modules', **{\n            'vdirect_client': module_mock,\n            'vdirect_client.rest_client': module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_file\n            vdirect_file.rest_client.RESP_STATUS = 0\n            vdirect_file.rest_client.Template = Template\n\n            Template.set_create_from_source_result([409])\n            Template.set_upload_source_result([400])\n            file = vdirect_file.VdirectFile(NONE_PARAMS)\n            path = os.path.dirname(os.path.abspath(__file__))\n            result = file.upload(os.path.join(path, \"ct.vm\"))\n            self.assertEqual(result, vdirect_file.CONFIGURATION_TEMPLATE_UPDATED_SUCCESS,\n                             'Unexpected result received:' + repr(result))\n\n    def test_workflow_upload_create_success(self, *args):\n        module_mock = MagicMock()\n        with patch.dict('sys.modules', **{\n            'vdirect_client': module_mock,\n            'vdirect_client.rest_client': module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_file\n            vdirect_file.rest_client.RESP_STATUS = 0\n            vdirect_file.rest_client.WorkflowTemplate = WorkflowTemplate\n\n            WorkflowTemplate.set_create_template_from_archive_result([400])\n            file = vdirect_file.VdirectFile(NONE_PARAMS)\n            path = os.path.dirname(os.path.abspath(__file__))\n            result = file.upload(os.path.join(path, \"wt.zip\"))\n            self.assertEqual(result, vdirect_file.WORKFLOW_TEMPLATE_CREATED_SUCCESS,\n                             'Unexpected result received:' + repr(result))\n\n    def test_workflow_upload_update_success(self, *args):\n        module_mock = MagicMock()\n        with patch.dict('sys.modules', **{\n            'vdirect_client': module_mock,\n            'vdirect_client.rest_client': module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_file\n            vdirect_file.rest_client.RESP_STATUS = 0\n            vdirect_file.rest_client.WorkflowTemplate = WorkflowTemplate\n\n            WorkflowTemplate.set_create_template_from_archive_result([409])\n            WorkflowTemplate.set_update_archive_result([400])\n            file = vdirect_file.VdirectFile(NONE_PARAMS)\n            path = os.path.dirname(os.path.abspath(__file__))\n            result = file.upload(os.path.join(path, \"wt.zip\"))\n            self.assertEqual(result, vdirect_file.WORKFLOW_TEMPLATE_UPDATED_SUCCESS,\n                             'Unexpected result received:' + repr(result))\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_vdirect_file.py", "id": "0727f2d97c51c149c22e4e31b63d121a", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/radware/test_vdirect_file.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}