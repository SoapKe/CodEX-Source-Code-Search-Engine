{"author": "HelloZeroNet", "code": "import itertools\nimport collections\n\nfrom . import string_type\n\ntry:\n    range = xrange\nexcept NameError:\n    pass\n\ndef decode(data):\n    '''\n    Bdecodes data into Python built-in types.\n    '''\n\n    return consume(LookaheadIterator(data))\n\nclass LookaheadIterator(collections.Iterator):\n    '''\n    An iterator that lets you peek at the next item.\n    '''\n\n    def __init__(self, iterator):\n        self.iterator, self.next_iterator = itertools.tee(iter(iterator))\n\n        \n        self._advance()\n\n    def _advance(self):\n        self.next_item = next(self.next_iterator, None)\n\n    def __next__(self):\n        self._advance()\n\n        return next(self.iterator)\n\n    \n    next = __next__\n\ndef consume(stream):\n    item = stream.next_item\n\n    if item is None:\n        raise ValueError('Encoding empty data is undefined')\n    elif item == 'i':\n        return consume_int(stream)\n    elif item == 'l':\n        return consume_list(stream)\n    elif item == 'd':\n        return consume_dict(stream)\n    elif item is not None and item[0].isdigit():\n        return consume_str(stream)\n    else:\n        raise ValueError('Invalid bencode object type: ', item)\n\ndef consume_number(stream):\n    result = ''\n\n    while True:\n        chunk = stream.next_item\n\n        if not chunk.isdigit():\n            return result\n        elif result.startswith('0'):\n            raise ValueError('Invalid number')\n\n        next(stream)\n        result += chunk\n\ndef consume_int(stream):\n    if next(stream) != 'i':\n        raise ValueError()\n\n    negative = stream.next_item == '-'\n\n    if negative:\n        next(stream)\n\n    result = int(consume_number(stream))\n\n    if negative:\n        result *= -1\n\n        if result == 0:\n            raise ValueError('Negative zero is not allowed')\n\n    if next(stream) != 'e':\n        raise ValueError('Unterminated integer')\n\n    return result\n\ndef consume_str(stream):\n    length = int(consume_number(stream))\n\n    if next(stream) != ':':\n        raise ValueError('Malformed string')\n\n    result = ''\n\n    for i in range(length):\n        try:\n            result += next(stream)\n        except StopIteration:\n            raise ValueError('Invalid string length')\n\n    return result\n\ndef consume_list(stream):\n    if next(stream) != 'l':\n        raise ValueError()\n\n    l = []\n\n    while stream.next_item != 'e':\n        l.append(consume(stream))\n\n    if next(stream) != 'e':\n        raise ValueError('Unterminated list')\n\n    return l\n\ndef consume_dict(stream):\n    if next(stream) != 'd':\n        raise ValueError()\n\n    d = {}\n\n    while stream.next_item != 'e':\n        key = consume(stream)\n\n        if not isinstance(key, string_type):\n            raise ValueError('Dictionary keys must be strings')\n\n        value = consume(stream)\n\n        d[key] = value\n\n    if next(stream) != 'e':\n        raise ValueError('Unterminated dictionary')\n\n    return d\n", "comments": "        bdecodes data python built types               return consume(lookaheaditerator(data))  class lookaheaditerator(collections iterator)              an iterator lets peek next item             be one step ahead    python 2 compatibility ", "content": "import itertools\nimport collections\n\nfrom . import string_type\n\ntry:\n    range = xrange\nexcept NameError:\n    pass\n\ndef decode(data):\n    '''\n    Bdecodes data into Python built-in types.\n    '''\n\n    return consume(LookaheadIterator(data))\n\nclass LookaheadIterator(collections.Iterator):\n    '''\n    An iterator that lets you peek at the next item.\n    '''\n\n    def __init__(self, iterator):\n        self.iterator, self.next_iterator = itertools.tee(iter(iterator))\n\n        # Be one step ahead\n        self._advance()\n\n    def _advance(self):\n        self.next_item = next(self.next_iterator, None)\n\n    def __next__(self):\n        self._advance()\n\n        return next(self.iterator)\n\n    # Python 2 compatibility\n    next = __next__\n\ndef consume(stream):\n    item = stream.next_item\n\n    if item is None:\n        raise ValueError('Encoding empty data is undefined')\n    elif item == 'i':\n        return consume_int(stream)\n    elif item == 'l':\n        return consume_list(stream)\n    elif item == 'd':\n        return consume_dict(stream)\n    elif item is not None and item[0].isdigit():\n        return consume_str(stream)\n    else:\n        raise ValueError('Invalid bencode object type: ', item)\n\ndef consume_number(stream):\n    result = ''\n\n    while True:\n        chunk = stream.next_item\n\n        if not chunk.isdigit():\n            return result\n        elif result.startswith('0'):\n            raise ValueError('Invalid number')\n\n        next(stream)\n        result += chunk\n\ndef consume_int(stream):\n    if next(stream) != 'i':\n        raise ValueError()\n\n    negative = stream.next_item == '-'\n\n    if negative:\n        next(stream)\n\n    result = int(consume_number(stream))\n\n    if negative:\n        result *= -1\n\n        if result == 0:\n            raise ValueError('Negative zero is not allowed')\n\n    if next(stream) != 'e':\n        raise ValueError('Unterminated integer')\n\n    return result\n\ndef consume_str(stream):\n    length = int(consume_number(stream))\n\n    if next(stream) != ':':\n        raise ValueError('Malformed string')\n\n    result = ''\n\n    for i in range(length):\n        try:\n            result += next(stream)\n        except StopIteration:\n            raise ValueError('Invalid string length')\n\n    return result\n\ndef consume_list(stream):\n    if next(stream) != 'l':\n        raise ValueError()\n\n    l = []\n\n    while stream.next_item != 'e':\n        l.append(consume(stream))\n\n    if next(stream) != 'e':\n        raise ValueError('Unterminated list')\n\n    return l\n\ndef consume_dict(stream):\n    if next(stream) != 'd':\n        raise ValueError()\n\n    d = {}\n\n    while stream.next_item != 'e':\n        key = consume(stream)\n\n        if not isinstance(key, string_type):\n            raise ValueError('Dictionary keys must be strings')\n\n        value = consume(stream)\n\n        d[key] = value\n\n    if next(stream) != 'e':\n        raise ValueError('Unterminated dictionary')\n\n    return d\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "decode.py", "id": "313e4c23deb717578d2d582925b54e2f", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/lib/bencode/decode.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}