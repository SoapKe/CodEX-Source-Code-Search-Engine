{"author": "powerline", "code": "\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\n\nimport os\nimport sys\n\nfrom time import sleep\nfrom subprocess import check_call\nfrom glob import glob1\nfrom traceback import print_exc\n\nfrom powerline.lib.dict import updated\n\nfrom tests.modules.lib.terminal import (ExpectProcess, MutableDimensions,\n                                        do_terminal_tests, get_env)\n\n\nTEST_ROOT = os.path.abspath(os.environ['TEST_ROOT'])\n\n\ndef main(attempts=3):\n\tvterm_path = os.path.join(TEST_ROOT, 'path')\n\n\tvim_exe = os.path.join(vterm_path, 'vim')\n\n\tenv = get_env(vterm_path, TEST_ROOT)\n\tenv['ROOT'] = os.path.abspath('.')\n\n\tdim = MutableDimensions(rows=50, cols=200)\n\n\tvimrc = os.path.join(TEST_ROOT, 'init.vim')\n\tvimrc_contents = '''\n\t\tset laststatus=2\n\t\tset runtimepath=$ROOT/powerline/bindings/vim\n\t'''\n\twith open(vimrc, 'w') as vd:\n\t\tvd.write(vimrc_contents)\n\n\tbase_attrs = {\n\t\t(( 64,  64, 255), (0, 0, 0), 0, 0, 0): 'NT',  \n\t\t((240, 240, 240), (0, 0, 0), 0, 0, 0): 'N',   \n\t}\n\n\targs = [\n\t\t'-u', vimrc,\n\t\t'-i', 'NONE',\n\t]\n\n\tdef feed(p):\n\t\tp.send(':echo strtrans(eval(&statusline[2:]))\\n')\n\n\ttests = (\n\t)\n\n\treturn do_terminal_tests(\n\t\ttests=tests,\n\t\tcmd=vim_exe,\n\t\tdim=dim,\n\t\targs=args,\n\t\tenv=env,\n\t\tcwd=TEST_ROOT,\n\t)\n\n\nif __name__ == '__main__':\n\tif main():\n\t\traise SystemExit(0)\n\telse:\n\t\traise SystemExit(1)\n", "comments": "      set laststatus 2   set runtimepath  root powerline bindings vim          usr bin env python    vim fileencoding utf 8 noet    nontext    normal ", "content": "#!/usr/bin/env python\n# vim:fileencoding=utf-8:noet\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\n\nimport os\nimport sys\n\nfrom time import sleep\nfrom subprocess import check_call\nfrom glob import glob1\nfrom traceback import print_exc\n\nfrom powerline.lib.dict import updated\n\nfrom tests.modules.lib.terminal import (ExpectProcess, MutableDimensions,\n                                        do_terminal_tests, get_env)\n\n\nTEST_ROOT = os.path.abspath(os.environ['TEST_ROOT'])\n\n\ndef main(attempts=3):\n\tvterm_path = os.path.join(TEST_ROOT, 'path')\n\n\tvim_exe = os.path.join(vterm_path, 'vim')\n\n\tenv = get_env(vterm_path, TEST_ROOT)\n\tenv['ROOT'] = os.path.abspath('.')\n\n\tdim = MutableDimensions(rows=50, cols=200)\n\n\tvimrc = os.path.join(TEST_ROOT, 'init.vim')\n\tvimrc_contents = '''\n\t\tset laststatus=2\n\t\tset runtimepath=$ROOT/powerline/bindings/vim\n\t'''\n\twith open(vimrc, 'w') as vd:\n\t\tvd.write(vimrc_contents)\n\n\tbase_attrs = {\n\t\t(( 64,  64, 255), (0, 0, 0), 0, 0, 0): 'NT',  # NonText\n\t\t((240, 240, 240), (0, 0, 0), 0, 0, 0): 'N',   # Normal\n\t}\n\n\targs = [\n\t\t'-u', vimrc,\n\t\t'-i', 'NONE',\n\t]\n\n\tdef feed(p):\n\t\tp.send(':echo strtrans(eval(&statusline[2:]))\\n')\n\n\ttests = (\n\t)\n\n\treturn do_terminal_tests(\n\t\ttests=tests,\n\t\tcmd=vim_exe,\n\t\tdim=dim,\n\t\targs=args,\n\t\tenv=env,\n\t\tcwd=TEST_ROOT,\n\t)\n\n\nif __name__ == '__main__':\n\tif main():\n\t\traise SystemExit(0)\n\telse:\n\t\traise SystemExit(1)\n", "description": "Powerline is a statusline plugin for vim, and provides statuslines and prompts for several other applications, including zsh, bash, tmux, IPython, Awesome and Qtile.", "file_name": "test_vim.py", "id": "61edf6f88a9201a5e94998ccdc40f12f", "language": "Python", "project_name": "powerline", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/powerline-powerline/powerline-powerline-d36850f/tests/test_in_vterm/test_vim.py", "save_time": "", "source": "", "update_at": "2018-03-18T09:00:33Z", "url": "https://github.com/powerline/powerline", "wiki": false}