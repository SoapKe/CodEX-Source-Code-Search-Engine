{"author": "ansible", "code": "\n Copyright: Ansible Project\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.onyx import onyx_l3_interface\nfrom units.modules.utils import set_module_args\nfrom .onyx_module import TestOnyxModule, load_fixture\n\n\nclass TestOnyxL3InterfaceModule(TestOnyxModule):\n\n    module = onyx_l3_interface\n\n    def setUp(self):\n        super(TestOnyxL3InterfaceModule, self).setUp()\n        self.mock_get_config = patch.object(\n            onyx_l3_interface.OnyxL3InterfaceModule,\n            \"_get_interfaces_config\")\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch(\n            'ansible.module_utils.network.onyx.onyx.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestOnyxL3InterfaceModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def _execute_module(self, failed=False, changed=False, commands=None, sort=True):\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            commands_res = result.get('commands')\n            if sort:\n                self.assertEqual(sorted(commands), sorted(commands_res), commands_res)\n            else:\n                self.assertEqual(commands, commands_res, commands_res)\n\n        return result\n\n    def load_fixture(self, config_file):\n        self.get_config.return_value = load_fixture(config_file)\n        self.load_config.return_value = None\n\n    def load_eth_ifc_fixture(self):\n        config_file = 'onyx_l3_interface_show.cfg'\n        self.load_fixture(config_file)\n\n    def load_vlan_ifc_fixture(self):\n        config_file = 'onyx_l3_vlan_interface_show.cfg'\n        self.load_fixture(config_file)\n\n    def test_vlan_ifc_no_change(self):\n        set_module_args(dict(name='Vlan 1002', state='present',\n                             ipv4='172.3.12.4/24'))\n        self.load_vlan_ifc_fixture()\n        self._execute_module(changed=False)\n\n    def test_vlan_ifc_remove(self):\n        set_module_args(dict(name='Vlan 1002', state='absent'))\n        commands = ['interface vlan 1002 no ip address']\n        self.load_vlan_ifc_fixture()\n        self._execute_module(changed=True, commands=commands)\n\n    def test_vlan_ifc_update(self):\n        set_module_args(dict(name='Vlan 1002', state='present',\n                             ipv4='172.3.13.4/24'))\n        commands = ['interface vlan 1002 ip address 172.3.13.4/24']\n        self.load_vlan_ifc_fixture()\n        self._execute_module(changed=True, commands=commands)\n\n    def test_eth_ifc_no_change(self):\n        set_module_args(dict(name='Eth1/5', state='present',\n                             ipv4='172.3.12.4/24'))\n        self.load_eth_ifc_fixture()\n        self._execute_module(changed=False)\n\n    def test_eth_ifc_remove(self):\n        set_module_args(dict(name='Eth1/5', state='absent'))\n        commands = ['interface ethernet 1/5 no ip address']\n        self.load_eth_ifc_fixture()\n        self._execute_module(changed=True, commands=commands)\n\n    def test_eth_ifc_update(self):\n        set_module_args(dict(name='Eth1/5', state='present',\n                             ipv4='172.3.13.4/24'))\n        commands = ['interface ethernet 1/5 ip address 172.3.13.4/24']\n        self.load_eth_ifc_fixture()\n        self._execute_module(changed=True, commands=commands)\n\n    def test_eth_ifc_add_ip(self):\n        set_module_args(dict(name='Eth1/6', state='present',\n                             ipv4='172.3.14.4/24'))\n        commands = ['interface ethernet 1/6 no switchport force',\n                    'interface ethernet 1/6 ip address 172.3.14.4/24']\n        self.load_eth_ifc_fixture()\n        self._execute_module(changed=True, commands=commands)\n", "comments": "     copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    make coding python3 ish ", "content": "#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.onyx import onyx_l3_interface\nfrom units.modules.utils import set_module_args\nfrom .onyx_module import TestOnyxModule, load_fixture\n\n\nclass TestOnyxL3InterfaceModule(TestOnyxModule):\n\n    module = onyx_l3_interface\n\n    def setUp(self):\n        super(TestOnyxL3InterfaceModule, self).setUp()\n        self.mock_get_config = patch.object(\n            onyx_l3_interface.OnyxL3InterfaceModule,\n            \"_get_interfaces_config\")\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch(\n            'ansible.module_utils.network.onyx.onyx.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestOnyxL3InterfaceModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def _execute_module(self, failed=False, changed=False, commands=None, sort=True):\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            commands_res = result.get('commands')\n            if sort:\n                self.assertEqual(sorted(commands), sorted(commands_res), commands_res)\n            else:\n                self.assertEqual(commands, commands_res, commands_res)\n\n        return result\n\n    def load_fixture(self, config_file):\n        self.get_config.return_value = load_fixture(config_file)\n        self.load_config.return_value = None\n\n    def load_eth_ifc_fixture(self):\n        config_file = 'onyx_l3_interface_show.cfg'\n        self.load_fixture(config_file)\n\n    def load_vlan_ifc_fixture(self):\n        config_file = 'onyx_l3_vlan_interface_show.cfg'\n        self.load_fixture(config_file)\n\n    def test_vlan_ifc_no_change(self):\n        set_module_args(dict(name='Vlan 1002', state='present',\n                             ipv4='172.3.12.4/24'))\n        self.load_vlan_ifc_fixture()\n        self._execute_module(changed=False)\n\n    def test_vlan_ifc_remove(self):\n        set_module_args(dict(name='Vlan 1002', state='absent'))\n        commands = ['interface vlan 1002 no ip address']\n        self.load_vlan_ifc_fixture()\n        self._execute_module(changed=True, commands=commands)\n\n    def test_vlan_ifc_update(self):\n        set_module_args(dict(name='Vlan 1002', state='present',\n                             ipv4='172.3.13.4/24'))\n        commands = ['interface vlan 1002 ip address 172.3.13.4/24']\n        self.load_vlan_ifc_fixture()\n        self._execute_module(changed=True, commands=commands)\n\n    def test_eth_ifc_no_change(self):\n        set_module_args(dict(name='Eth1/5', state='present',\n                             ipv4='172.3.12.4/24'))\n        self.load_eth_ifc_fixture()\n        self._execute_module(changed=False)\n\n    def test_eth_ifc_remove(self):\n        set_module_args(dict(name='Eth1/5', state='absent'))\n        commands = ['interface ethernet 1/5 no ip address']\n        self.load_eth_ifc_fixture()\n        self._execute_module(changed=True, commands=commands)\n\n    def test_eth_ifc_update(self):\n        set_module_args(dict(name='Eth1/5', state='present',\n                             ipv4='172.3.13.4/24'))\n        commands = ['interface ethernet 1/5 ip address 172.3.13.4/24']\n        self.load_eth_ifc_fixture()\n        self._execute_module(changed=True, commands=commands)\n\n    def test_eth_ifc_add_ip(self):\n        set_module_args(dict(name='Eth1/6', state='present',\n                             ipv4='172.3.14.4/24'))\n        commands = ['interface ethernet 1/6 no switchport force',\n                    'interface ethernet 1/6 ip address 172.3.14.4/24']\n        self.load_eth_ifc_fixture()\n        self._execute_module(changed=True, commands=commands)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_onyx_l3_interface.py", "id": "f3d05cd4163b27d221c6a83509313766", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/onyx/test_onyx_l3_interface.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}