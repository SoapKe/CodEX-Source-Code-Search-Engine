{"author": "rg3", "code": "\n\nfrom __future__ import unicode_literals\n\n\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom youtube_dl.aes import aes_decrypt, aes_encrypt, aes_cbc_decrypt, aes_cbc_encrypt, aes_decrypt_text\nfrom youtube_dl.utils import bytes_to_intlist, intlist_to_bytes\nimport base64\n\n\n\n\nclass TestAES(unittest.TestCase):\n    def setUp(self):\n        self.key = self.iv = [0x20, 0x15] + 14 * [0]\n        self.secret_msg = b'Secret message goes here'\n\n    def test_encrypt(self):\n        msg = b'message'\n        key = list(range(16))\n        encrypted = aes_encrypt(bytes_to_intlist(msg), key)\n        decrypted = intlist_to_bytes(aes_decrypt(encrypted, key))\n        self.assertEqual(decrypted, msg)\n\n    def test_cbc_decrypt(self):\n        data = bytes_to_intlist(\n            b\"\\x97\\x92+\\xe5\\x0b\\xc3\\x18\\x91ky9m&\\xb3\\xb5@\\xe6'\\xc2\\x96.\\xc8u\\x88\\xab9-[\\x9e|\\xf1\\xcd\"\n        )\n        decrypted = intlist_to_bytes(aes_cbc_decrypt(data, self.key, self.iv))\n        self.assertEqual(decrypted.rstrip(b'\\x08'), self.secret_msg)\n\n    def test_cbc_encrypt(self):\n        data = bytes_to_intlist(self.secret_msg)\n        encrypted = intlist_to_bytes(aes_cbc_encrypt(data, self.key, self.iv))\n        self.assertEqual(\n            encrypted,\n            b\"\\x97\\x92+\\xe5\\x0b\\xc3\\x18\\x91ky9m&\\xb3\\xb5@\\xe6'\\xc2\\x96.\\xc8u\\x88\\xab9-[\\x9e|\\xf1\\xcd\")\n\n    def test_decrypt_text(self):\n        password = intlist_to_bytes(self.key).decode('utf-8')\n        encrypted = base64.b64encode(\n            intlist_to_bytes(self.iv[:8]) +\n            b'\\x17\\x15\\x93\\xab\\x8d\\x80V\\xcdV\\xe0\\t\\xcdo\\xc2\\xa5\\xd8ksM\\r\\xe27N\\xae'\n        ).decode('utf-8')\n        decrypted = (aes_decrypt_text(encrypted, password, 16))\n        self.assertEqual(decrypted, self.secret_msg)\n\n        password = intlist_to_bytes(self.key).decode('utf-8')\n        encrypted = base64.b64encode(\n            intlist_to_bytes(self.iv[:8]) +\n            b'\\x0b\\xe6\\xa4\\xd9z\\x0e\\xb8\\xb9\\xd0\\xd4i_\\x85\\x1d\\x99\\x98_\\xe5\\x80\\xe7.\\xbf\\xa5\\x83'\n        ).decode('utf-8')\n        decrypted = (aes_decrypt_text(encrypted, password, 32))\n        self.assertEqual(decrypted, self.secret_msg)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "#!/usr/bin/env python\n# Allow direct execution\n# the encrypted data can be generate with 'devscripts/generate_aes_testdata.py'\n", "content": "#!/usr/bin/env python\n\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom youtube_dl.aes import aes_decrypt, aes_encrypt, aes_cbc_decrypt, aes_cbc_encrypt, aes_decrypt_text\nfrom youtube_dl.utils import bytes_to_intlist, intlist_to_bytes\nimport base64\n\n# the encrypted data can be generate with 'devscripts/generate_aes_testdata.py'\n\n\nclass TestAES(unittest.TestCase):\n    def setUp(self):\n        self.key = self.iv = [0x20, 0x15] + 14 * [0]\n        self.secret_msg = b'Secret message goes here'\n\n    def test_encrypt(self):\n        msg = b'message'\n        key = list(range(16))\n        encrypted = aes_encrypt(bytes_to_intlist(msg), key)\n        decrypted = intlist_to_bytes(aes_decrypt(encrypted, key))\n        self.assertEqual(decrypted, msg)\n\n    def test_cbc_decrypt(self):\n        data = bytes_to_intlist(\n            b\"\\x97\\x92+\\xe5\\x0b\\xc3\\x18\\x91ky9m&\\xb3\\xb5@\\xe6'\\xc2\\x96.\\xc8u\\x88\\xab9-[\\x9e|\\xf1\\xcd\"\n        )\n        decrypted = intlist_to_bytes(aes_cbc_decrypt(data, self.key, self.iv))\n        self.assertEqual(decrypted.rstrip(b'\\x08'), self.secret_msg)\n\n    def test_cbc_encrypt(self):\n        data = bytes_to_intlist(self.secret_msg)\n        encrypted = intlist_to_bytes(aes_cbc_encrypt(data, self.key, self.iv))\n        self.assertEqual(\n            encrypted,\n            b\"\\x97\\x92+\\xe5\\x0b\\xc3\\x18\\x91ky9m&\\xb3\\xb5@\\xe6'\\xc2\\x96.\\xc8u\\x88\\xab9-[\\x9e|\\xf1\\xcd\")\n\n    def test_decrypt_text(self):\n        password = intlist_to_bytes(self.key).decode('utf-8')\n        encrypted = base64.b64encode(\n            intlist_to_bytes(self.iv[:8]) +\n            b'\\x17\\x15\\x93\\xab\\x8d\\x80V\\xcdV\\xe0\\t\\xcdo\\xc2\\xa5\\xd8ksM\\r\\xe27N\\xae'\n        ).decode('utf-8')\n        decrypted = (aes_decrypt_text(encrypted, password, 16))\n        self.assertEqual(decrypted, self.secret_msg)\n\n        password = intlist_to_bytes(self.key).decode('utf-8')\n        encrypted = base64.b64encode(\n            intlist_to_bytes(self.iv[:8]) +\n            b'\\x0b\\xe6\\xa4\\xd9z\\x0e\\xb8\\xb9\\xd0\\xd4i_\\x85\\x1d\\x99\\x98_\\xe5\\x80\\xe7.\\xbf\\xa5\\x83'\n        ).decode('utf-8')\n        decrypted = (aes_decrypt_text(encrypted, password, 32))\n        self.assertEqual(decrypted, self.secret_msg)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "test_aes.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/test/test_aes.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}