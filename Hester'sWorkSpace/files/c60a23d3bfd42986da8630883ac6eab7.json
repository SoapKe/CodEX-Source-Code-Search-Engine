{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n)\n\n\nclass GolemIE(InfoExtractor):\n    _VALID_URL = r'^https?://video\\.golem\\.de/.+?/(?P<id>.+?)/'\n    _TEST = {\n        'url': 'http://video.golem.de/handy/14095/iphone-6-und-6-plus-test.html',\n        'md5': 'c1a2c0a3c863319651c7c992c5ee29bf',\n        'info_dict': {\n            'id': '14095',\n            'format_id': 'high',\n            'ext': 'mp4',\n            'title': 'iPhone 6 und 6 Plus - Test',\n            'duration': 300.44,\n            'filesize': 65309548,\n        }\n    }\n\n    _PREFIX = 'http://video.golem.de'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        config = self._download_xml(\n            'https://video.golem.de/xml/{0}.xml'.format(video_id), video_id)\n\n        info = {\n            'id': video_id,\n            'title': config.findtext('./title', 'golem'),\n            'duration': self._float(config.findtext('./playtime'), 'duration'),\n        }\n\n        formats = []\n        for e in config:\n            url = e.findtext('./url')\n            if not url:\n                continue\n\n            formats.append({\n                'format_id': compat_str(e.tag),\n                'url': compat_urlparse.urljoin(self._PREFIX, url),\n                'height': self._int(e.get('height'), 'height'),\n                'width': self._int(e.get('width'), 'width'),\n                'filesize': self._int(e.findtext('filesize'), 'filesize'),\n                'ext': determine_ext(e.findtext('./filename')),\n            })\n        self._sort_formats(formats)\n        info['formats'] = formats\n\n        thumbnails = []\n        for e in config.findall('.//teaser'):\n            url = e.findtext('./url')\n            if not url:\n                continue\n            thumbnails.append({\n                'url': compat_urlparse.urljoin(self._PREFIX, url),\n                'width': self._int(e.get('width'), 'thumbnail width'),\n                'height': self._int(e.get('height'), 'thumbnail height'),\n            })\n        info['thumbnails'] = thumbnails\n\n        return info\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n)\n\n\nclass GolemIE(InfoExtractor):\n    _VALID_URL = r'^https?://video\\.golem\\.de/.+?/(?P<id>.+?)/'\n    _TEST = {\n        'url': 'http://video.golem.de/handy/14095/iphone-6-und-6-plus-test.html',\n        'md5': 'c1a2c0a3c863319651c7c992c5ee29bf',\n        'info_dict': {\n            'id': '14095',\n            'format_id': 'high',\n            'ext': 'mp4',\n            'title': 'iPhone 6 und 6 Plus - Test',\n            'duration': 300.44,\n            'filesize': 65309548,\n        }\n    }\n\n    _PREFIX = 'http://video.golem.de'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        config = self._download_xml(\n            'https://video.golem.de/xml/{0}.xml'.format(video_id), video_id)\n\n        info = {\n            'id': video_id,\n            'title': config.findtext('./title', 'golem'),\n            'duration': self._float(config.findtext('./playtime'), 'duration'),\n        }\n\n        formats = []\n        for e in config:\n            url = e.findtext('./url')\n            if not url:\n                continue\n\n            formats.append({\n                'format_id': compat_str(e.tag),\n                'url': compat_urlparse.urljoin(self._PREFIX, url),\n                'height': self._int(e.get('height'), 'height'),\n                'width': self._int(e.get('width'), 'width'),\n                'filesize': self._int(e.findtext('filesize'), 'filesize'),\n                'ext': determine_ext(e.findtext('./filename')),\n            })\n        self._sort_formats(formats)\n        info['formats'] = formats\n\n        thumbnails = []\n        for e in config.findall('.//teaser'):\n            url = e.findtext('./url')\n            if not url:\n                continue\n            thumbnails.append({\n                'url': compat_urlparse.urljoin(self._PREFIX, url),\n                'width': self._int(e.get('width'), 'thumbnail width'),\n                'height': self._int(e.get('height'), 'thumbnail height'),\n            })\n        info['thumbnails'] = thumbnails\n\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "golem.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/golem.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}