{"author": "ansible", "code": "\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: profitbricks_volume_attachments\nshort_description: Attach or detach a volume.\ndescription:\n     - Allows you to attach or detach a volume from a ProfitBricks server. This module has a dependency on profitbricks >= 1.0.0\nversion_added: \"2.0\"\noptions:\n  datacenter:\n    description:\n      - The datacenter in which to operate.\n    required: true\n  server:\n    description:\n      - The name of the server you wish to detach or attach the volume.\n    required: true\n  volume:\n    description:\n      - The volume name or ID.\n    required: true\n  subscription_user:\n    description:\n      - The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environment variable.\n    required: false\n  subscription_password:\n    description:\n      - THe ProfitBricks password. Overrides the PB_PASSWORD environment variable.\n    required: false\n  wait:\n    description:\n      - wait for the operation to complete before returning\n    required: false\n    default: \"yes\"\n    choices: [ \"yes\", \"no\" ]\n  wait_timeout:\n    description:\n      - how long before wait gives up, in seconds\n    default: 600\n  state:\n    description:\n      - Indicate desired state of the resource\n    required: false\n    default: 'present'\n    choices: [\"present\", \"absent\"]\n\nrequirements: [ \"profitbricks\" ]\nauthor: Matt Baldwin (baldwin@stackpointcloud.com)\n'''\n\nEXAMPLES = '''\n\n\n\n- profitbricks_volume_attachments:\n    datacenter: Tardis One\n    server: node002\n    volume: vol01\n    wait_timeout: 500\n    state: present\n\n\n\n- profitbricks_volume_attachments:\n    datacenter: Tardis One\n    server: node002\n    volume: vol01\n    wait_timeout: 500\n    state: absent\n\n'''\n\nimport re\nimport time\n\nHAS_PB_SDK = True\ntry:\n    from profitbricks.client import ProfitBricksService\nexcept ImportError:\n    HAS_PB_SDK = False\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nuuid_match = re.compile(\n    r'[\\w]{8}-[\\w]{4}-[\\w]{4}-[\\w]{4}-[\\w]{12}', re.I)\n\n\ndef _wait_for_completion(profitbricks, promise, wait_timeout, msg):\n    if not promise:\n        return\n    wait_timeout = time.time() + wait_timeout\n    while wait_timeout > time.time():\n        time.sleep(5)\n        operation_result = profitbricks.get_request(\n            request_id=promise['requestId'],\n            status=True)\n\n        if operation_result['metadata']['status'] == \"DONE\":\n            return\n        elif operation_result['metadata']['status'] == \"FAILED\":\n            raise Exception(\n                'Request failed to complete ' + msg + ' \"' + str(\n                    promise['requestId']) + '\" to complete.')\n\n    raise Exception(\n        'Timed out waiting for async operation ' + msg + ' \"' + str(\n            promise['requestId']\n        ) + '\" to complete.')\n\n\ndef attach_volume(module, profitbricks):\n    \"\"\"\n    Attaches a volume.\n\n    This will attach a volume to the server.\n\n    module : AnsibleModule object\n    profitbricks: authenticated profitbricks object.\n\n    Returns:\n        True if the volume was attached, false otherwise\n    \"\"\"\n    datacenter = module.params.get('datacenter')\n    server = module.params.get('server')\n    volume = module.params.get('volume')\n\n    \n    if not (uuid_match.match(datacenter)):\n        datacenter_list = profitbricks.list_datacenters()\n        for d in datacenter_list['items']:\n            dc = profitbricks.get_datacenter(d['id'])\n            if datacenter == dc['properties']['name']:\n                datacenter = d['id']\n                break\n\n    \n    if not (uuid_match.match(server)):\n        server_list = profitbricks.list_servers(datacenter)\n        for s in server_list['items']:\n            if server == s['properties']['name']:\n                server = s['id']\n                break\n\n    \n    if not (uuid_match.match(volume)):\n        volume_list = profitbricks.list_volumes(datacenter)\n        for v in volume_list['items']:\n            if volume == v['properties']['name']:\n                volume = v['id']\n                break\n\n    return profitbricks.attach_volume(datacenter, server, volume)\n\n\ndef detach_volume(module, profitbricks):\n    \"\"\"\n    Detaches a volume.\n\n    This will remove a volume from the server.\n\n    module : AnsibleModule object\n    profitbricks: authenticated profitbricks object.\n\n    Returns:\n        True if the volume was detached, false otherwise\n    \"\"\"\n    datacenter = module.params.get('datacenter')\n    server = module.params.get('server')\n    volume = module.params.get('volume')\n\n    \n    if not (uuid_match.match(datacenter)):\n        datacenter_list = profitbricks.list_datacenters()\n        for d in datacenter_list['items']:\n            dc = profitbricks.get_datacenter(d['id'])\n            if datacenter == dc['properties']['name']:\n                datacenter = d['id']\n                break\n\n    \n    if not (uuid_match.match(server)):\n        server_list = profitbricks.list_servers(datacenter)\n        for s in server_list['items']:\n            if server == s['properties']['name']:\n                server = s['id']\n                break\n\n    \n    if not (uuid_match.match(volume)):\n        volume_list = profitbricks.list_volumes(datacenter)\n        for v in volume_list['items']:\n            if volume == v['properties']['name']:\n                volume = v['id']\n                break\n\n    return profitbricks.detach_volume(datacenter, server, volume)\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            datacenter=dict(),\n            server=dict(),\n            volume=dict(),\n            subscription_user=dict(),\n            subscription_password=dict(no_log=True),\n            wait=dict(type='bool', default=True),\n            wait_timeout=dict(type='int', default=600),\n            state=dict(default='present'),\n        )\n    )\n\n    if not HAS_PB_SDK:\n        module.fail_json(msg='profitbricks required for this module')\n\n    if not module.params.get('subscription_user'):\n        module.fail_json(msg='subscription_user parameter is required')\n    if not module.params.get('subscription_password'):\n        module.fail_json(msg='subscription_password parameter is required')\n    if not module.params.get('datacenter'):\n        module.fail_json(msg='datacenter parameter is required')\n    if not module.params.get('server'):\n        module.fail_json(msg='server parameter is required')\n    if not module.params.get('volume'):\n        module.fail_json(msg='volume parameter is required')\n\n    subscription_user = module.params.get('subscription_user')\n    subscription_password = module.params.get('subscription_password')\n\n    profitbricks = ProfitBricksService(\n        username=subscription_user,\n        password=subscription_password)\n\n    state = module.params.get('state')\n\n    if state == 'absent':\n        try:\n            (changed) = detach_volume(module, profitbricks)\n            module.exit_json(changed=changed)\n        except Exception as e:\n            module.fail_json(msg='failed to set volume_attach state: %s' % str(e))\n    elif state == 'present':\n        try:\n            attach_volume(module, profitbricks)\n            module.exit_json()\n        except Exception as e:\n            module.fail_json(msg='failed to set volume_attach state: %s' % str(e))\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        attaches volume       this attach volume server       module   ansiblemodule object     profitbricks  authenticated profitbricks object       returns          true volume attached  false otherwise             datacenter   module params get( datacenter )     server   module params get( server )     volume   module params get( volume )        locate uuid datacenter     (uuid match match(datacenter))          datacenter list   profitbricks list datacenters()         datacenter list  items                dc   profitbricks get datacenter(d  id  )             datacenter    dc  properties    name                    datacenter    id                   break        locate uuid server     (uuid match match(server))          server list   profitbricks list servers(datacenter)         server list  items                server     properties    name                    server    id                   break        locate uuid volume     (uuid match match(volume))          volume list   profitbricks list volumes(datacenter)         v volume list  items                volume    v  properties    name                    volume   v  id                   break      return profitbricks attach volume(datacenter  server  volume)   def detach volume(module  profitbricks)              detaches volume       this remove volume server       module   ansiblemodule object     profitbricks  authenticated profitbricks object       returns          true volume detached  false otherwise                  module  profitbricks volume attachments short description  attach detach volume  description         allows attach detach volume profitbricks server  this module dependency profitbricks    1 0 0 version added   2 0  options    datacenter      description          the datacenter operate      required  true   server      description          the name server wish detach attach volume      required  true   volume      description          the volume name id      required  true   subscription user      description          the profitbricks username  overrides pb subscription id environment variable      required  false   subscription password      description          the profitbricks password  overrides pb password environment variable      required  false   wait      description          wait operation complete returning     required  false     default   yes      choices     yes         wait timeout      description          long wait gives  seconds     default  600   state      description          indicate desired state resource     required  false     default   present      choices    present    absent    requirements     profitbricks    author  matt baldwin (baldwin stackpointcloud com)      examples          attach volume    profitbricks volume attachments      datacenter  tardis one     server  node002     volume  vol01     wait timeout  500     state  present    detach volume    profitbricks volume attachments      datacenter  tardis one     server  node002     volume  vol01     wait timeout  500     state  absent          usr bin python    copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    attach volume    detach volume    locate uuid datacenter    locate uuid server    locate uuid volume    locate uuid datacenter    locate uuid server    locate uuid volume ", "content": "#!/usr/bin/python\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: profitbricks_volume_attachments\nshort_description: Attach or detach a volume.\ndescription:\n     - Allows you to attach or detach a volume from a ProfitBricks server. This module has a dependency on profitbricks >= 1.0.0\nversion_added: \"2.0\"\noptions:\n  datacenter:\n    description:\n      - The datacenter in which to operate.\n    required: true\n  server:\n    description:\n      - The name of the server you wish to detach or attach the volume.\n    required: true\n  volume:\n    description:\n      - The volume name or ID.\n    required: true\n  subscription_user:\n    description:\n      - The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environment variable.\n    required: false\n  subscription_password:\n    description:\n      - THe ProfitBricks password. Overrides the PB_PASSWORD environment variable.\n    required: false\n  wait:\n    description:\n      - wait for the operation to complete before returning\n    required: false\n    default: \"yes\"\n    choices: [ \"yes\", \"no\" ]\n  wait_timeout:\n    description:\n      - how long before wait gives up, in seconds\n    default: 600\n  state:\n    description:\n      - Indicate desired state of the resource\n    required: false\n    default: 'present'\n    choices: [\"present\", \"absent\"]\n\nrequirements: [ \"profitbricks\" ]\nauthor: Matt Baldwin (baldwin@stackpointcloud.com)\n'''\n\nEXAMPLES = '''\n\n# Attach a Volume\n\n- profitbricks_volume_attachments:\n    datacenter: Tardis One\n    server: node002\n    volume: vol01\n    wait_timeout: 500\n    state: present\n\n# Detach a Volume\n\n- profitbricks_volume_attachments:\n    datacenter: Tardis One\n    server: node002\n    volume: vol01\n    wait_timeout: 500\n    state: absent\n\n'''\n\nimport re\nimport time\n\nHAS_PB_SDK = True\ntry:\n    from profitbricks.client import ProfitBricksService\nexcept ImportError:\n    HAS_PB_SDK = False\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nuuid_match = re.compile(\n    r'[\\w]{8}-[\\w]{4}-[\\w]{4}-[\\w]{4}-[\\w]{12}', re.I)\n\n\ndef _wait_for_completion(profitbricks, promise, wait_timeout, msg):\n    if not promise:\n        return\n    wait_timeout = time.time() + wait_timeout\n    while wait_timeout > time.time():\n        time.sleep(5)\n        operation_result = profitbricks.get_request(\n            request_id=promise['requestId'],\n            status=True)\n\n        if operation_result['metadata']['status'] == \"DONE\":\n            return\n        elif operation_result['metadata']['status'] == \"FAILED\":\n            raise Exception(\n                'Request failed to complete ' + msg + ' \"' + str(\n                    promise['requestId']) + '\" to complete.')\n\n    raise Exception(\n        'Timed out waiting for async operation ' + msg + ' \"' + str(\n            promise['requestId']\n        ) + '\" to complete.')\n\n\ndef attach_volume(module, profitbricks):\n    \"\"\"\n    Attaches a volume.\n\n    This will attach a volume to the server.\n\n    module : AnsibleModule object\n    profitbricks: authenticated profitbricks object.\n\n    Returns:\n        True if the volume was attached, false otherwise\n    \"\"\"\n    datacenter = module.params.get('datacenter')\n    server = module.params.get('server')\n    volume = module.params.get('volume')\n\n    # Locate UUID for Datacenter\n    if not (uuid_match.match(datacenter)):\n        datacenter_list = profitbricks.list_datacenters()\n        for d in datacenter_list['items']:\n            dc = profitbricks.get_datacenter(d['id'])\n            if datacenter == dc['properties']['name']:\n                datacenter = d['id']\n                break\n\n    # Locate UUID for Server\n    if not (uuid_match.match(server)):\n        server_list = profitbricks.list_servers(datacenter)\n        for s in server_list['items']:\n            if server == s['properties']['name']:\n                server = s['id']\n                break\n\n    # Locate UUID for Volume\n    if not (uuid_match.match(volume)):\n        volume_list = profitbricks.list_volumes(datacenter)\n        for v in volume_list['items']:\n            if volume == v['properties']['name']:\n                volume = v['id']\n                break\n\n    return profitbricks.attach_volume(datacenter, server, volume)\n\n\ndef detach_volume(module, profitbricks):\n    \"\"\"\n    Detaches a volume.\n\n    This will remove a volume from the server.\n\n    module : AnsibleModule object\n    profitbricks: authenticated profitbricks object.\n\n    Returns:\n        True if the volume was detached, false otherwise\n    \"\"\"\n    datacenter = module.params.get('datacenter')\n    server = module.params.get('server')\n    volume = module.params.get('volume')\n\n    # Locate UUID for Datacenter\n    if not (uuid_match.match(datacenter)):\n        datacenter_list = profitbricks.list_datacenters()\n        for d in datacenter_list['items']:\n            dc = profitbricks.get_datacenter(d['id'])\n            if datacenter == dc['properties']['name']:\n                datacenter = d['id']\n                break\n\n    # Locate UUID for Server\n    if not (uuid_match.match(server)):\n        server_list = profitbricks.list_servers(datacenter)\n        for s in server_list['items']:\n            if server == s['properties']['name']:\n                server = s['id']\n                break\n\n    # Locate UUID for Volume\n    if not (uuid_match.match(volume)):\n        volume_list = profitbricks.list_volumes(datacenter)\n        for v in volume_list['items']:\n            if volume == v['properties']['name']:\n                volume = v['id']\n                break\n\n    return profitbricks.detach_volume(datacenter, server, volume)\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            datacenter=dict(),\n            server=dict(),\n            volume=dict(),\n            subscription_user=dict(),\n            subscription_password=dict(no_log=True),\n            wait=dict(type='bool', default=True),\n            wait_timeout=dict(type='int', default=600),\n            state=dict(default='present'),\n        )\n    )\n\n    if not HAS_PB_SDK:\n        module.fail_json(msg='profitbricks required for this module')\n\n    if not module.params.get('subscription_user'):\n        module.fail_json(msg='subscription_user parameter is required')\n    if not module.params.get('subscription_password'):\n        module.fail_json(msg='subscription_password parameter is required')\n    if not module.params.get('datacenter'):\n        module.fail_json(msg='datacenter parameter is required')\n    if not module.params.get('server'):\n        module.fail_json(msg='server parameter is required')\n    if not module.params.get('volume'):\n        module.fail_json(msg='volume parameter is required')\n\n    subscription_user = module.params.get('subscription_user')\n    subscription_password = module.params.get('subscription_password')\n\n    profitbricks = ProfitBricksService(\n        username=subscription_user,\n        password=subscription_password)\n\n    state = module.params.get('state')\n\n    if state == 'absent':\n        try:\n            (changed) = detach_volume(module, profitbricks)\n            module.exit_json(changed=changed)\n        except Exception as e:\n            module.fail_json(msg='failed to set volume_attach state: %s' % str(e))\n    elif state == 'present':\n        try:\n            attach_volume(module, profitbricks)\n            module.exit_json()\n        except Exception as e:\n            module.fail_json(msg='failed to set volume_attach state: %s' % str(e))\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "profitbricks_volume_attachments.py", "id": "a3356d2f2ec0661696b99375d56bd939", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/profitbricks/profitbricks_volume_attachments.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}