{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models, _\nfrom odoo.osv import expression\nfrom odoo.tools import html2plaintext\nfrom odoo.exceptions import AccessError\n\n\nclass MailMessage(models.Model):\n    _inherit = 'mail.message'\n\n    @api.model\n    def default_get(self, fields_list):\n        defaults = super(MailMessage, self).default_get(fields_list)\n\n        # Note: explicitly implemented in default_get() instead of field default,\n        \n        \n        ).\n        if 'website_published' in fields_list:\n            defaults.setdefault('website_published', True)\n\n        return defaults\n\n    description = fields.Char(compute=\"_compute_description\", help='Message description: either the subject, or the beginning of the body')\n    website_published = fields.Boolean(string='Published', help=\"Visible on the website as a comment\", copy=False)\n\n    @api.multi\n    def _compute_description(self):\n        for message in self:\n            if message.subject:\n                message.description = message.subject\n            else:\n                plaintext_ct = '' if not message.body else html2plaintext(message.body)\n                message.description = plaintext_ct[:30] + '%s' % (' [...]' if len(plaintext_ct) >= 30 else '')\n\n    @api.model\n    def _search(self, args, offset=0, limit=None, order=None, count=False, access_rights_uid=None):\n        \"\"\" Override that adds specific access rights of mail.message, to restrict\n        messages to published messages for public users. \"\"\"\n        if self.user_has_groups('base.group_public'):\n            args = expression.AND([[('website_published', '=', True)], list(args)])\n\n        return super(MailMessage, self)._search(args, offset=offset, limit=limit, order=order,\n                                                count=count, access_rights_uid=access_rights_uid)\n\n    @api.multi\n    def check_access_rule(self, operation):\n        \"\"\" Add Access rules of mail.message for non-employee user:\n            - read:\n                - raise if the type is comment and subtype NULL (internal note)\n        \"\"\"\n        if self.user_has_groups('base.group_public'):\n            self.env.cr.execute('SELECT id FROM \"%s\" WHERE website_published IS FALSE AND id = ANY (%%s)' % (self._table), (self.ids,))\n            if self.env.cr.fetchall():\n                raise AccessError(_('The requested operation cannot be completed due to security restrictions. Please contact your system administrator.\\n\\n(Document type: %s, Operation: %s)') % (self._description, operation))\n        return super(MailMessage, self).check_access_rule(operation=operation)\n\n    @api.multi\n    def _portal_message_format(self, fields_list):\n        fields_list += ['website_published']\n        return super(MailMessage, self)._portal_message_format(fields_list)\n", "comments": "    override adds specific access rights mail message  restrict         messages published messages public users              self user groups( base group public )              args   expression and(  ( website published        true)   list(args) )          return super(mailmessage  self)  search(args  offset offset  limit limit  order order                                                  count count  access rights uid access rights uid)       api multi     def check access rule(self  operation)              add access rules mail message non employee user                read                    raise type comment subtype null (internal note)                    coding  utf 8        part odoo  see license file full copyright licensing details     note  explicitly implemented default get() instead field default     avoid setting true existing messages upgrades     todo  default probably dynamic according model    messages attached  thus moved create()  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models, _\nfrom odoo.osv import expression\nfrom odoo.tools import html2plaintext\nfrom odoo.exceptions import AccessError\n\n\nclass MailMessage(models.Model):\n    _inherit = 'mail.message'\n\n    @api.model\n    def default_get(self, fields_list):\n        defaults = super(MailMessage, self).default_get(fields_list)\n\n        # Note: explicitly implemented in default_get() instead of field default,\n        # to avoid setting to True for all existing messages during upgrades.\n        # TODO: this default should probably be dynamic according to the model\n        # on which the messages are attached, thus moved to create().\n        if 'website_published' in fields_list:\n            defaults.setdefault('website_published', True)\n\n        return defaults\n\n    description = fields.Char(compute=\"_compute_description\", help='Message description: either the subject, or the beginning of the body')\n    website_published = fields.Boolean(string='Published', help=\"Visible on the website as a comment\", copy=False)\n\n    @api.multi\n    def _compute_description(self):\n        for message in self:\n            if message.subject:\n                message.description = message.subject\n            else:\n                plaintext_ct = '' if not message.body else html2plaintext(message.body)\n                message.description = plaintext_ct[:30] + '%s' % (' [...]' if len(plaintext_ct) >= 30 else '')\n\n    @api.model\n    def _search(self, args, offset=0, limit=None, order=None, count=False, access_rights_uid=None):\n        \"\"\" Override that adds specific access rights of mail.message, to restrict\n        messages to published messages for public users. \"\"\"\n        if self.user_has_groups('base.group_public'):\n            args = expression.AND([[('website_published', '=', True)], list(args)])\n\n        return super(MailMessage, self)._search(args, offset=offset, limit=limit, order=order,\n                                                count=count, access_rights_uid=access_rights_uid)\n\n    @api.multi\n    def check_access_rule(self, operation):\n        \"\"\" Add Access rules of mail.message for non-employee user:\n            - read:\n                - raise if the type is comment and subtype NULL (internal note)\n        \"\"\"\n        if self.user_has_groups('base.group_public'):\n            self.env.cr.execute('SELECT id FROM \"%s\" WHERE website_published IS FALSE AND id = ANY (%%s)' % (self._table), (self.ids,))\n            if self.env.cr.fetchall():\n                raise AccessError(_('The requested operation cannot be completed due to security restrictions. Please contact your system administrator.\\n\\n(Document type: %s, Operation: %s)') % (self._description, operation))\n        return super(MailMessage, self).check_access_rule(operation=operation)\n\n    @api.multi\n    def _portal_message_format(self, fields_list):\n        fields_list += ['website_published']\n        return super(MailMessage, self)._portal_message_format(fields_list)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "mail_message.py", "id": "5e3d505161027aa1fd5f8d09a5a53f13", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_mail/models/mail_message.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}