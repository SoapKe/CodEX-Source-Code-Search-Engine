{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\"\"\"Tests for tensorflow_models.im2txt.show_and_tell_model.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom im2txt import configuration\nfrom im2txt import show_and_tell_model\n\n\nclass ShowAndTellModel(show_and_tell_model.ShowAndTellModel):\n  \"\"\"Subclass of ShowAndTellModel without the disk I/O.\"\"\"\n\n  def build_inputs(self):\n    if self.mode == \"inference\":\n       Inference mode doesn't read from disk, so defer to parent.\n      return super(ShowAndTellModel, self).build_inputs()\n    else:\n       Replace disk I/O with random Tensors.\n      self.images = tf.random_uniform(\n          shape=[self.config.batch_size, self.config.image_height,\n                 self.config.image_width, 3],\n          minval=-1,\n          maxval=1)\n      self.input_seqs = tf.random_uniform(\n          [self.config.batch_size, 15],\n          minval=0,\n          maxval=self.config.vocab_size,\n          dtype=tf.int64)\n      self.target_seqs = tf.random_uniform(\n          [self.config.batch_size, 15],\n          minval=0,\n          maxval=self.config.vocab_size,\n          dtype=tf.int64)\n      self.input_mask = tf.ones_like(self.input_seqs)\n\n\nclass ShowAndTellModelTest(tf.test.TestCase):\n\n  def setUp(self):\n    super(ShowAndTellModelTest, self).setUp()\n    self._model_config = configuration.ModelConfig()\n\n  def _countModelParameters(self):\n    \"\"\"Counts the number of parameters in the model at top level scope.\"\"\"\n    counter = {}\n    for v in tf.global_variables():\n      name = v.op.name.split(\"/\")[0]\n      num_params = v.get_shape().num_elements()\n      assert num_params\n      counter[name] = counter.get(name, 0) + num_params\n    return counter\n\n  def _checkModelParameters(self):\n    \"\"\"Verifies the number of parameters in the model.\"\"\"\n    param_counts = self._countModelParameters()\n    expected_param_counts = {\n        \"InceptionV3\": 21802784,\n         inception_output_size * embedding_size\n        \"image_embedding\": 1048576,\n         vocab_size * embedding_size\n        \"seq_embedding\": 6144000,\n         (embedding_size + num_lstm_units + 1) * 4 * num_lstm_units\n        \"lstm\": 2099200,\n         (num_lstm_units + 1) * vocab_size\n        \"logits\": 6156000,\n        \"global_step\": 1,\n    }\n    self.assertDictEqual(expected_param_counts, param_counts)\n\n  def _checkOutputs(self, expected_shapes, feed_dict=None):\n    \"\"\"Verifies that the model produces expected outputs.\n\n    Args:\n      expected_shapes: A dict mapping Tensor or Tensor name to expected output\n        shape.\n      feed_dict: Values of Tensors to feed into Session.run().\n    \"\"\"\n    fetches = expected_shapes.keys()\n\n    with self.test_session() as sess:\n      sess.run(tf.global_variables_initializer())\n      outputs = sess.run(fetches, feed_dict)\n\n    for index, output in enumerate(outputs):\n      tensor = fetches[index]\n      expected = expected_shapes[tensor]\n      actual = output.shape\n      if expected != actual:\n        self.fail(\"Tensor %s has shape %s (expected %s).\" %\n                  (tensor, actual, expected))\n\n  def testBuildForTraining(self):\n    model = ShowAndTellModel(self._model_config, mode=\"train\")\n    model.build()\n\n    self._checkModelParameters()\n\n    expected_shapes = {\n         [batch_size, image_height, image_width, 3]\n        model.images: (32, 299, 299, 3),\n         [batch_size, sequence_length]\n        model.input_seqs: (32, 15),\n         [batch_size, sequence_length]\n        model.target_seqs: (32, 15),\n         [batch_size, sequence_length]\n        model.input_mask: (32, 15),\n         [batch_size, embedding_size]\n        model.image_embeddings: (32, 512),\n         [batch_size, sequence_length, embedding_size]\n        model.seq_embeddings: (32, 15, 512),\n         Scalar\n        model.total_loss: (),\n         [batch_size * sequence_length]\n        model.target_cross_entropy_losses: (480,),\n         [batch_size * sequence_length]\n        model.target_cross_entropy_loss_weights: (480,),\n    }\n    self._checkOutputs(expected_shapes)\n\n  def testBuildForEval(self):\n    model = ShowAndTellModel(self._model_config, mode=\"eval\")\n    model.build()\n\n    self._checkModelParameters()\n\n    expected_shapes = {\n         [batch_size, image_height, image_width, 3]\n        model.images: (32, 299, 299, 3),\n         [batch_size, sequence_length]\n        model.input_seqs: (32, 15),\n         [batch_size, sequence_length]\n        model.target_seqs: (32, 15),\n         [batch_size, sequence_length]\n        model.input_mask: (32, 15),\n         [batch_size, embedding_size]\n        model.image_embeddings: (32, 512),\n         [batch_size, sequence_length, embedding_size]\n        model.seq_embeddings: (32, 15, 512),\n         Scalar\n        model.total_loss: (),\n         [batch_size * sequence_length]\n        model.target_cross_entropy_losses: (480,),\n         [batch_size * sequence_length]\n        model.target_cross_entropy_loss_weights: (480,),\n    }\n    self._checkOutputs(expected_shapes)\n\n  def testBuildForInference(self):\n    model = ShowAndTellModel(self._model_config, mode=\"inference\")\n    model.build()\n\n    self._checkModelParameters()\n\n     Test feeding an image to get the initial LSTM state.\n    images_feed = np.random.rand(1, 299, 299, 3)\n    feed_dict = {model.images: images_feed}\n    expected_shapes = {\n         [batch_size, embedding_size]\n        model.image_embeddings: (1, 512),\n         [batch_size, 2 * num_lstm_units]\n        \"lstm/initial_state:0\": (1, 1024),\n    }\n    self._checkOutputs(expected_shapes, feed_dict)\n\n     Test feeding a batch of inputs and LSTM states to get softmax output and\n     LSTM states.\n    input_feed = np.random.randint(0, 10, size=3)\n    state_feed = np.random.rand(3, 1024)\n    feed_dict = {\"input_feed:0\": input_feed, \"lstm/state_feed:0\": state_feed}\n    expected_shapes = {\n         [batch_size, 2 * num_lstm_units]\n        \"lstm/state:0\": (3, 1024),\n         [batch_size, vocab_size]\n        \"softmax:0\": (3, 12000),\n    }\n    self._checkOutputs(expected_shapes, feed_dict)\n\n\nif __name__ == \"__main__\":\n  tf.test.main()\n", "comments": "   tests tensorflow models im2txt show tell model        future   import absolute import   future   import division   future   import print function   import numpy np import tensorflow tf  im2txt import configuration im2txt import show tell model   class showandtellmodel(show tell model showandtellmodel)       subclass showandtellmodel without disk i o        def build inputs(self)      self mode     inference           inference mode read disk  defer parent        return super(showandtellmodel  self) build inputs()     else          replace disk i o random tensors        self images   tf random uniform(           shape  self config batch size  self config image height                   self config image width  3             minval  1            maxval 1)       self input seqs   tf random uniform(            self config batch size  15             minval 0            maxval self config vocab size            dtype tf int64)       self target seqs   tf random uniform(            self config batch size  15             minval 0            maxval self config vocab size            dtype tf int64)       self input mask   tf ones like(self input seqs)   class showandtellmodeltest(tf test testcase)     def setup(self)      super(showandtellmodeltest  self) setup()     self  model config   configuration modelconfig()    def  countmodelparameters(self)         counts number parameters model top level scope         counter          v tf global variables()        name   v op name split(   ) 0        num params   v get shape() num elements()       assert num params       counter name    counter get(name  0)   num params     return counter    def  checkmodelparameters(self)         verifies number parameters model         param counts   self  countmodelparameters()     expected param counts              inceptionv3   21802784            inception output size   embedding size          image embedding   1048576            vocab size   embedding size          seq embedding   6144000            (embedding size   num lstm units   1)   4   num lstm units          lstm   2099200            (num lstm units   1)   vocab size          logits   6156000           global step   1            self assertdictequal(expected param counts  param counts)    def  checkoutputs(self  expected shapes  feed dict none)         verifies model produces expected outputs       args        expected shapes  a dict mapping tensor tensor name expected output         shape        feed dict  values tensors feed session run()             copyright 2016 the tensorflow authors  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       inference mode read disk  defer parent     replace disk i o random tensors     inception output size   embedding size    vocab size   embedding size    (embedding size   num lstm units   1)   4   num lstm units    (num lstm units   1)   vocab size     batch size  image height  image width  3      batch size  sequence length      batch size  sequence length      batch size  sequence length      batch size  embedding size      batch size  sequence length  embedding size     scalar     batch size   sequence length      batch size   sequence length      batch size  image height  image width  3      batch size  sequence length      batch size  sequence length      batch size  sequence length      batch size  embedding size      batch size  sequence length  embedding size     scalar     batch size   sequence length      batch size   sequence length     test feeding image get initial lstm state      batch size  embedding size      batch size  2   num lstm units     test feeding batch inputs lstm states get softmax output    lstm states      batch size  2   num lstm units      batch size  vocab size  ", "content": "# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"Tests for tensorflow_models.im2txt.show_and_tell_model.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom im2txt import configuration\nfrom im2txt import show_and_tell_model\n\n\nclass ShowAndTellModel(show_and_tell_model.ShowAndTellModel):\n  \"\"\"Subclass of ShowAndTellModel without the disk I/O.\"\"\"\n\n  def build_inputs(self):\n    if self.mode == \"inference\":\n      # Inference mode doesn't read from disk, so defer to parent.\n      return super(ShowAndTellModel, self).build_inputs()\n    else:\n      # Replace disk I/O with random Tensors.\n      self.images = tf.random_uniform(\n          shape=[self.config.batch_size, self.config.image_height,\n                 self.config.image_width, 3],\n          minval=-1,\n          maxval=1)\n      self.input_seqs = tf.random_uniform(\n          [self.config.batch_size, 15],\n          minval=0,\n          maxval=self.config.vocab_size,\n          dtype=tf.int64)\n      self.target_seqs = tf.random_uniform(\n          [self.config.batch_size, 15],\n          minval=0,\n          maxval=self.config.vocab_size,\n          dtype=tf.int64)\n      self.input_mask = tf.ones_like(self.input_seqs)\n\n\nclass ShowAndTellModelTest(tf.test.TestCase):\n\n  def setUp(self):\n    super(ShowAndTellModelTest, self).setUp()\n    self._model_config = configuration.ModelConfig()\n\n  def _countModelParameters(self):\n    \"\"\"Counts the number of parameters in the model at top level scope.\"\"\"\n    counter = {}\n    for v in tf.global_variables():\n      name = v.op.name.split(\"/\")[0]\n      num_params = v.get_shape().num_elements()\n      assert num_params\n      counter[name] = counter.get(name, 0) + num_params\n    return counter\n\n  def _checkModelParameters(self):\n    \"\"\"Verifies the number of parameters in the model.\"\"\"\n    param_counts = self._countModelParameters()\n    expected_param_counts = {\n        \"InceptionV3\": 21802784,\n        # inception_output_size * embedding_size\n        \"image_embedding\": 1048576,\n        # vocab_size * embedding_size\n        \"seq_embedding\": 6144000,\n        # (embedding_size + num_lstm_units + 1) * 4 * num_lstm_units\n        \"lstm\": 2099200,\n        # (num_lstm_units + 1) * vocab_size\n        \"logits\": 6156000,\n        \"global_step\": 1,\n    }\n    self.assertDictEqual(expected_param_counts, param_counts)\n\n  def _checkOutputs(self, expected_shapes, feed_dict=None):\n    \"\"\"Verifies that the model produces expected outputs.\n\n    Args:\n      expected_shapes: A dict mapping Tensor or Tensor name to expected output\n        shape.\n      feed_dict: Values of Tensors to feed into Session.run().\n    \"\"\"\n    fetches = expected_shapes.keys()\n\n    with self.test_session() as sess:\n      sess.run(tf.global_variables_initializer())\n      outputs = sess.run(fetches, feed_dict)\n\n    for index, output in enumerate(outputs):\n      tensor = fetches[index]\n      expected = expected_shapes[tensor]\n      actual = output.shape\n      if expected != actual:\n        self.fail(\"Tensor %s has shape %s (expected %s).\" %\n                  (tensor, actual, expected))\n\n  def testBuildForTraining(self):\n    model = ShowAndTellModel(self._model_config, mode=\"train\")\n    model.build()\n\n    self._checkModelParameters()\n\n    expected_shapes = {\n        # [batch_size, image_height, image_width, 3]\n        model.images: (32, 299, 299, 3),\n        # [batch_size, sequence_length]\n        model.input_seqs: (32, 15),\n        # [batch_size, sequence_length]\n        model.target_seqs: (32, 15),\n        # [batch_size, sequence_length]\n        model.input_mask: (32, 15),\n        # [batch_size, embedding_size]\n        model.image_embeddings: (32, 512),\n        # [batch_size, sequence_length, embedding_size]\n        model.seq_embeddings: (32, 15, 512),\n        # Scalar\n        model.total_loss: (),\n        # [batch_size * sequence_length]\n        model.target_cross_entropy_losses: (480,),\n        # [batch_size * sequence_length]\n        model.target_cross_entropy_loss_weights: (480,),\n    }\n    self._checkOutputs(expected_shapes)\n\n  def testBuildForEval(self):\n    model = ShowAndTellModel(self._model_config, mode=\"eval\")\n    model.build()\n\n    self._checkModelParameters()\n\n    expected_shapes = {\n        # [batch_size, image_height, image_width, 3]\n        model.images: (32, 299, 299, 3),\n        # [batch_size, sequence_length]\n        model.input_seqs: (32, 15),\n        # [batch_size, sequence_length]\n        model.target_seqs: (32, 15),\n        # [batch_size, sequence_length]\n        model.input_mask: (32, 15),\n        # [batch_size, embedding_size]\n        model.image_embeddings: (32, 512),\n        # [batch_size, sequence_length, embedding_size]\n        model.seq_embeddings: (32, 15, 512),\n        # Scalar\n        model.total_loss: (),\n        # [batch_size * sequence_length]\n        model.target_cross_entropy_losses: (480,),\n        # [batch_size * sequence_length]\n        model.target_cross_entropy_loss_weights: (480,),\n    }\n    self._checkOutputs(expected_shapes)\n\n  def testBuildForInference(self):\n    model = ShowAndTellModel(self._model_config, mode=\"inference\")\n    model.build()\n\n    self._checkModelParameters()\n\n    # Test feeding an image to get the initial LSTM state.\n    images_feed = np.random.rand(1, 299, 299, 3)\n    feed_dict = {model.images: images_feed}\n    expected_shapes = {\n        # [batch_size, embedding_size]\n        model.image_embeddings: (1, 512),\n        # [batch_size, 2 * num_lstm_units]\n        \"lstm/initial_state:0\": (1, 1024),\n    }\n    self._checkOutputs(expected_shapes, feed_dict)\n\n    # Test feeding a batch of inputs and LSTM states to get softmax output and\n    # LSTM states.\n    input_feed = np.random.randint(0, 10, size=3)\n    state_feed = np.random.rand(3, 1024)\n    feed_dict = {\"input_feed:0\": input_feed, \"lstm/state_feed:0\": state_feed}\n    expected_shapes = {\n        # [batch_size, 2 * num_lstm_units]\n        \"lstm/state:0\": (3, 1024),\n        # [batch_size, vocab_size]\n        \"softmax:0\": (3, 12000),\n    }\n    self._checkOutputs(expected_shapes, feed_dict)\n\n\nif __name__ == \"__main__\":\n  tf.test.main()\n", "description": "Models and examples built with TensorFlow", "file_name": "show_and_tell_model_test.py", "id": "f43182101ba587cbf6dca2efb8185553", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/im2txt/im2txt/show_and_tell_model_test.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}