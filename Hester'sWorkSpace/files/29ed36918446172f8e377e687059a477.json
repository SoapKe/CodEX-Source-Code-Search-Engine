{"author": "ansible", "code": "\n\n# Copyright: (c) 2018, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = \"\"\"\nmodule: edgeos_command\nversion_added: \"2.5\"\nauthor:\n  - Chad Norgan (@BeardyMcBeards)\n  - Sam Doran (@samdoran)\nshort_description: Run one or more commands on EdgeOS devices\ndescription:\n  - This command module allows running one or more commands on a remote\n    device running EdgeOS, such as the Ubiquiti EdgeRouter.\n  - This module does not support running commands in configuration mode.\n  - Certain C(show) commands in EdgeOS produce many lines of output and\n    use a custom pager that can cause this module to hang.  If the\n    value of the environment variable C(ANSIBLE_EDGEOS_TERMINAL_LENGTH)\n    is not set, the default number of 10000 is used.\noptions:\n  commands:\n    description:\n      - The commands or ordered set of commands that should be run against the\n        remote device. The output of the command is returned to the playbook.\n        If the C(wait_for) argument is provided, the module is not returned\n        until the condition is met or the number of retries is exceeded.\n    required: True\n  wait_for:\n    description:\n      - Causes the task to wait for a specific condition to be met before\n        moving forward. If the condition is not met before the specified\n        number of retries is exceeded, the task will fail.\n    required: False\n  match:\n    description:\n      - Used in conjunction with C(wait_for) to create match policy. If set to\n        C(all), then all conditions in C(wait_for) must be met. If set to\n        C(any), then only one condition must match.\n    required: False\n    default: 'all'\n    choices: ['any', 'all']\n  retries:\n    description:\n      - Number of times a command should be tried before it is considered failed.\n        The command is run on the target device and evaluated against the\n        C(wait_for) conditionals.\n    required: False\n    default: 10\n  interval:\n    description:\n      - The number of seconds to wait between C(retries) of the command.\n    required: False\n    default: 1\n\nnotes:\n  - Tested against EdgeOS 1.9.7\n  - Running C(show system boot-messages all) will cause the module to hang since\n    EdgeOS is using a custom pager setting to display the output of that command.\n\"\"\"\n\nEXAMPLES = \"\"\"\ntasks:\n  - name: Reboot the device\n    edgeos_command:\n      commands: reboot now\n\n  - name: Show the configuration for eth0 and eth1\n    edgeos_command:\n      commands: show interfaces ethernet {{ item }}\n    loop:\n      - eth0\n      - eth1\n\"\"\"\n\nRETURN = \"\"\"\nstdout:\n  description: The set of responses from the commands\n  returned: always apart from low level errors (such as action plugin)\n  type: list\n  sample: ['...', '...']\nstdout_lines:\n  description: The value of stdout split into a list\n  returned: always\n  type: list\n  sample: [['...', '...'], ['...'], ['...']]\n\"\"\"\n\nimport time\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.common.utils import ComplexList\nfrom ansible.module_utils.network.common.parsing import Conditional\nfrom ansible.module_utils.network.edgeos.edgeos import run_commands\nfrom ansible.module_utils.six import string_types\n\n\ndef to_lines(stdout):\n    for item in stdout:\n        if isinstance(item, string_types):\n            item = str(item).split('\\n')\n        yield item\n\n\ndef parse_commands(module, warnings):\n    spec = dict(\n        command=dict(key=True),\n        prompt=dict(),\n        answer=dict(),\n    )\n\n    transform = ComplexList(spec, module)\n    commands = transform(module.params['commands'])\n\n    if module.check_mode:\n        for item in list(commands):\n            if not item['command'].startswith('show'):\n                warnings.append(\n                    'Only show commands are supported when using check_mode, '\n                    'not executing %s' % item['command'])\n                commands.remove(item)\n\n    return commands\n\n\ndef main():\n    spec = dict(\n        commands=dict(type='list', required=True),\n        wait_for=dict(type='list'),\n        match=dict(default='all', choices=['all', 'any']),\n        retries=dict(default=10, type='int'),\n        interval=dict(default=1, type='int')\n    )\n\n    module = AnsibleModule(argument_spec=spec, supports_check_mode=True)\n\n    warnings = list()\n    result = {'changed': False}\n    commands = parse_commands(module, warnings)\n    wait_for = module.params['wait_for'] or list()\n\n    try:\n        conditionals = [Conditional(c) for c in wait_for]\n    except AttributeError as e:\n        module.fail_json(msg=str(e))\n\n    retries = module.params['retries']\n    interval = module.params['interval']\n    match = module.params['match']\n\n    while retries > 0:\n        responses = run_commands(module, commands)\n\n        for item in list(conditionals):\n            if item(responses):\n                if match == 'any':\n                    conditionals = list()\n                    break\n                conditionals.remove(item)\n\n        if not conditionals:\n            break\n\n        time.sleep(interval)\n        retries -= 1\n\n    if conditionals:\n        failed_conditions = [item.raw for item in conditionals]\n        msg = 'One or more conditional statements have not been satisfied'\n        module.fail_json(msg=msg, falied_conditions=failed_conditions)\n\n    result = {\n        'changed': False,\n        'stdout': responses,\n        'warnings': warnings,\n        'stdout_lines': list(to_lines(responses))\n    }\n\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "    module  edgeos command version added   2 5  author      chad norgan ( beardymcbeards)     sam doran ( samdoran) short description  run one commands edgeos devices description      this command module allows running one commands remote     device running edgeos  ubiquiti edgerouter      this module support running commands configuration mode      certain c(show) commands edgeos produce many lines output     use custom pager cause module hang   if     value environment variable c(ansible edgeos terminal length)     set  default number 10000 used  options    commands      description          the commands ordered set commands run         remote device  the output command returned playbook          if c(wait for) argument provided  module returned         condition met number retries exceeded      required  true   wait      description          causes task wait specific condition met         moving forward  if condition met specified         number retries exceeded  task fail      required  false   match      description          used conjunction c(wait for) create match policy  if set         c(all)  conditions c(wait for) must met  if set         c(any)  one condition must match      required  false     default        choices           retries      description          number times command tried considered failed          the command run target device evaluated         c(wait for) conditionals      required  false     default  10   interval      description          the number seconds wait c(retries) command      required  false     default  1  notes      tested edgeos 1 9 7     running c(show system boot messages all) cause module hang since     edgeos using custom pager setting display output command       examples       tasks      name  reboot device     edgeos command        commands  reboot      name  show configuration eth0 eth1     edgeos command        commands  show interfaces ethernet    item        loop          eth0         eth1      return       stdout    description  the set responses commands   returned  always apart low level errors (such action plugin)   type  list   sample                 stdout lines    description  the value stdout split list   returned  always   type  list   sample                                             usr bin python    copyright  (c) 2018  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "#!/usr/bin/python\n\n# Copyright: (c) 2018, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = \"\"\"\nmodule: edgeos_command\nversion_added: \"2.5\"\nauthor:\n  - Chad Norgan (@BeardyMcBeards)\n  - Sam Doran (@samdoran)\nshort_description: Run one or more commands on EdgeOS devices\ndescription:\n  - This command module allows running one or more commands on a remote\n    device running EdgeOS, such as the Ubiquiti EdgeRouter.\n  - This module does not support running commands in configuration mode.\n  - Certain C(show) commands in EdgeOS produce many lines of output and\n    use a custom pager that can cause this module to hang.  If the\n    value of the environment variable C(ANSIBLE_EDGEOS_TERMINAL_LENGTH)\n    is not set, the default number of 10000 is used.\noptions:\n  commands:\n    description:\n      - The commands or ordered set of commands that should be run against the\n        remote device. The output of the command is returned to the playbook.\n        If the C(wait_for) argument is provided, the module is not returned\n        until the condition is met or the number of retries is exceeded.\n    required: True\n  wait_for:\n    description:\n      - Causes the task to wait for a specific condition to be met before\n        moving forward. If the condition is not met before the specified\n        number of retries is exceeded, the task will fail.\n    required: False\n  match:\n    description:\n      - Used in conjunction with C(wait_for) to create match policy. If set to\n        C(all), then all conditions in C(wait_for) must be met. If set to\n        C(any), then only one condition must match.\n    required: False\n    default: 'all'\n    choices: ['any', 'all']\n  retries:\n    description:\n      - Number of times a command should be tried before it is considered failed.\n        The command is run on the target device and evaluated against the\n        C(wait_for) conditionals.\n    required: False\n    default: 10\n  interval:\n    description:\n      - The number of seconds to wait between C(retries) of the command.\n    required: False\n    default: 1\n\nnotes:\n  - Tested against EdgeOS 1.9.7\n  - Running C(show system boot-messages all) will cause the module to hang since\n    EdgeOS is using a custom pager setting to display the output of that command.\n\"\"\"\n\nEXAMPLES = \"\"\"\ntasks:\n  - name: Reboot the device\n    edgeos_command:\n      commands: reboot now\n\n  - name: Show the configuration for eth0 and eth1\n    edgeos_command:\n      commands: show interfaces ethernet {{ item }}\n    loop:\n      - eth0\n      - eth1\n\"\"\"\n\nRETURN = \"\"\"\nstdout:\n  description: The set of responses from the commands\n  returned: always apart from low level errors (such as action plugin)\n  type: list\n  sample: ['...', '...']\nstdout_lines:\n  description: The value of stdout split into a list\n  returned: always\n  type: list\n  sample: [['...', '...'], ['...'], ['...']]\n\"\"\"\n\nimport time\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.common.utils import ComplexList\nfrom ansible.module_utils.network.common.parsing import Conditional\nfrom ansible.module_utils.network.edgeos.edgeos import run_commands\nfrom ansible.module_utils.six import string_types\n\n\ndef to_lines(stdout):\n    for item in stdout:\n        if isinstance(item, string_types):\n            item = str(item).split('\\n')\n        yield item\n\n\ndef parse_commands(module, warnings):\n    spec = dict(\n        command=dict(key=True),\n        prompt=dict(),\n        answer=dict(),\n    )\n\n    transform = ComplexList(spec, module)\n    commands = transform(module.params['commands'])\n\n    if module.check_mode:\n        for item in list(commands):\n            if not item['command'].startswith('show'):\n                warnings.append(\n                    'Only show commands are supported when using check_mode, '\n                    'not executing %s' % item['command'])\n                commands.remove(item)\n\n    return commands\n\n\ndef main():\n    spec = dict(\n        commands=dict(type='list', required=True),\n        wait_for=dict(type='list'),\n        match=dict(default='all', choices=['all', 'any']),\n        retries=dict(default=10, type='int'),\n        interval=dict(default=1, type='int')\n    )\n\n    module = AnsibleModule(argument_spec=spec, supports_check_mode=True)\n\n    warnings = list()\n    result = {'changed': False}\n    commands = parse_commands(module, warnings)\n    wait_for = module.params['wait_for'] or list()\n\n    try:\n        conditionals = [Conditional(c) for c in wait_for]\n    except AttributeError as e:\n        module.fail_json(msg=str(e))\n\n    retries = module.params['retries']\n    interval = module.params['interval']\n    match = module.params['match']\n\n    while retries > 0:\n        responses = run_commands(module, commands)\n\n        for item in list(conditionals):\n            if item(responses):\n                if match == 'any':\n                    conditionals = list()\n                    break\n                conditionals.remove(item)\n\n        if not conditionals:\n            break\n\n        time.sleep(interval)\n        retries -= 1\n\n    if conditionals:\n        failed_conditions = [item.raw for item in conditionals]\n        msg = 'One or more conditional statements have not been satisfied'\n        module.fail_json(msg=msg, falied_conditions=failed_conditions)\n\n    result = {\n        'changed': False,\n        'stdout': responses,\n        'warnings': warnings,\n        'stdout_lines': list(to_lines(responses))\n    }\n\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "edgeos_command.py", "id": "29ed36918446172f8e377e687059a477", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/edgeos/edgeos_command.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}