{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport hashlib\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urllib_request,\n    compat_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass FC2IE(InfoExtractor):\n    _VALID_URL = r'^(?:https?://video\\.fc2\\.com/(?:[^/]+/)*content/|fc2:)(?P<id>[^/]+)'\n    IE_NAME = 'fc2'\n    _NETRC_MACHINE = 'fc2'\n    _TESTS = [{\n        'url': 'http://video.fc2.com/en/content/20121103kUan1KHs',\n        'md5': 'a6ebe8ebe0396518689d963774a54eb7',\n        'info_dict': {\n            'id': '20121103kUan1KHs',\n            'ext': 'flv',\n            'title': 'Boxing again with Puff',\n        },\n    }, {\n        'url': 'http://video.fc2.com/en/content/20150125cEva0hDn/',\n        'info_dict': {\n            'id': '20150125cEva0hDn',\n            'ext': 'mp4',\n        },\n        'params': {\n            'username': 'ytdl@yt-dl.org',\n            'password': '(snip)',\n        },\n        'skip': 'requires actual password',\n    }, {\n        'url': 'http://video.fc2.com/en/a/content/20130926eZpARwsF',\n        'only_matching': True,\n    }]\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None or password is None:\n            return False\n\n        \n        login_form_strs = {\n            'email': username,\n            'password': password,\n            'done': 'video',\n            'Submit': ' Login ',\n        }\n\n        login_data = urlencode_postdata(login_form_strs)\n        request = sanitized_Request(\n            'https://secure.id.fc2.com/index.php?mode=login&switch_language=en', login_data)\n\n        login_results = self._download_webpage(request, None, note='Logging in', errnote='Unable to log in')\n        if 'mode=redirect&login=done' not in login_results:\n            self.report_warning('unable to log in: bad username or password')\n            return False\n\n        \n        login_redir = sanitized_Request('http://id.fc2.com/?mode=redirect&login=done')\n        self._download_webpage(\n            login_redir, None, note='Login redirect', errnote='Login redirect failed')\n\n        return True\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        self._login()\n        webpage = None\n        if not url.startswith('fc2:'):\n            webpage = self._download_webpage(url, video_id)\n            self._downloader.cookiejar.clear_session_cookies()  \n            self._login()\n\n        title = 'FC2 video %s' % video_id\n        thumbnail = None\n        if webpage is not None:\n            title = self._og_search_title(webpage)\n            thumbnail = self._og_search_thumbnail(webpage)\n        refer = url.replace('/content/', '/a/content/') if '/a/content/' not in url else url\n\n        mimi = hashlib.md5((video_id + '_gGddgPfeaf_gzyr').encode('utf-8')).hexdigest()\n\n        info_url = (\n            'http://video.fc2.com/ginfo.php?mimi={1:s}&href={2:s}&v={0:s}&fversion=WIN%2011%2C6%2C602%2C180&from=2&otag=0&upid={0:s}&tk=null&'.\n            format(video_id, mimi, compat_urllib_request.quote(refer, safe=b'').replace('.', '%2E')))\n\n        info_webpage = self._download_webpage(\n            info_url, video_id, note='Downloading info page')\n        info = compat_urlparse.parse_qs(info_webpage)\n\n        if 'err_code' in info:\n            \n            self.report_warning(\n                'Error code was: %s... but still trying' % info['err_code'][0])\n\n        if 'filepath' not in info:\n            raise ExtractorError('Cannot download file. Are you logged in?')\n\n        video_url = info['filepath'][0] + '?mid=' + info['mid'][0]\n        title_info = info.get('title')\n        if title_info:\n            title = title_info[0]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'url': video_url,\n            'ext': 'flv',\n            'thumbnail': thumbnail,\n        }\n\n\nclass FC2EmbedIE(InfoExtractor):\n    _VALID_URL = r'https?://video\\.fc2\\.com/flv2\\.swf\\?(?P<query>.+)'\n    IE_NAME = 'fc2:embed'\n\n    _TEST = {\n        'url': 'http://video.fc2.com/flv2.swf?t=201404182936758512407645&i=20130316kwishtfitaknmcgd76kjd864hso93htfjcnaogz629mcgfs6rbfk0hsycma7shkf85937cbchfygd74&i=201403223kCqB3Ez&d=2625&sj=11&lang=ja&rel=1&from=11&cmt=1&tk=TlRBM09EQTNNekU9&tl=\u30d7\u30ea\u30ba\u30f3\uff65\u30d6\u30ec\u30a4\u30af%20S1-01%20\u30de\u30a4\u30b1\u30eb%20\u3010\u5439\u66ff\u3011',\n        'md5': 'b8aae5334cb691bdb1193a88a6ab5d5a',\n        'info_dict': {\n            'id': '201403223kCqB3Ez',\n            'ext': 'flv',\n            'title': '\u30d7\u30ea\u30ba\u30f3\uff65\u30d6\u30ec\u30a4\u30af S1-01 \u30de\u30a4\u30b1\u30eb \u3010\u5439\u66ff\u3011',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        query = compat_parse_qs(mobj.group('query'))\n\n        video_id = query['i'][-1]\n        title = query.get('tl', ['FC2 video %s' % video_id])[0]\n\n        sj = query.get('sj', [None])[0]\n        thumbnail = None\n        if sj:\n            \n            thumbnail = 'http://video%s-thumbnail.fc2.com/up/pic/%s.jpg' % (\n                sj, '/'.join((video_id[:6], video_id[6:8], video_id[-2], video_id[-1], video_id)))\n\n        return {\n            '_type': 'url_transparent',\n            'ie_key': FC2IE.ie_key(),\n            'url': 'fc2:%s' % video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n        }\n", "comments": "# coding: utf-8\n# Log in\n# this is also needed\n# must clear\n# most of the time we can still download wideo even if err_code is 403 or 602\n# See thumbnailImagePath() in ServerConst.as of flv2.swf\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport hashlib\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urllib_request,\n    compat_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass FC2IE(InfoExtractor):\n    _VALID_URL = r'^(?:https?://video\\.fc2\\.com/(?:[^/]+/)*content/|fc2:)(?P<id>[^/]+)'\n    IE_NAME = 'fc2'\n    _NETRC_MACHINE = 'fc2'\n    _TESTS = [{\n        'url': 'http://video.fc2.com/en/content/20121103kUan1KHs',\n        'md5': 'a6ebe8ebe0396518689d963774a54eb7',\n        'info_dict': {\n            'id': '20121103kUan1KHs',\n            'ext': 'flv',\n            'title': 'Boxing again with Puff',\n        },\n    }, {\n        'url': 'http://video.fc2.com/en/content/20150125cEva0hDn/',\n        'info_dict': {\n            'id': '20150125cEva0hDn',\n            'ext': 'mp4',\n        },\n        'params': {\n            'username': 'ytdl@yt-dl.org',\n            'password': '(snip)',\n        },\n        'skip': 'requires actual password',\n    }, {\n        'url': 'http://video.fc2.com/en/a/content/20130926eZpARwsF',\n        'only_matching': True,\n    }]\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None or password is None:\n            return False\n\n        # Log in\n        login_form_strs = {\n            'email': username,\n            'password': password,\n            'done': 'video',\n            'Submit': ' Login ',\n        }\n\n        login_data = urlencode_postdata(login_form_strs)\n        request = sanitized_Request(\n            'https://secure.id.fc2.com/index.php?mode=login&switch_language=en', login_data)\n\n        login_results = self._download_webpage(request, None, note='Logging in', errnote='Unable to log in')\n        if 'mode=redirect&login=done' not in login_results:\n            self.report_warning('unable to log in: bad username or password')\n            return False\n\n        # this is also needed\n        login_redir = sanitized_Request('http://id.fc2.com/?mode=redirect&login=done')\n        self._download_webpage(\n            login_redir, None, note='Login redirect', errnote='Login redirect failed')\n\n        return True\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        self._login()\n        webpage = None\n        if not url.startswith('fc2:'):\n            webpage = self._download_webpage(url, video_id)\n            self._downloader.cookiejar.clear_session_cookies()  # must clear\n            self._login()\n\n        title = 'FC2 video %s' % video_id\n        thumbnail = None\n        if webpage is not None:\n            title = self._og_search_title(webpage)\n            thumbnail = self._og_search_thumbnail(webpage)\n        refer = url.replace('/content/', '/a/content/') if '/a/content/' not in url else url\n\n        mimi = hashlib.md5((video_id + '_gGddgPfeaf_gzyr').encode('utf-8')).hexdigest()\n\n        info_url = (\n            'http://video.fc2.com/ginfo.php?mimi={1:s}&href={2:s}&v={0:s}&fversion=WIN%2011%2C6%2C602%2C180&from=2&otag=0&upid={0:s}&tk=null&'.\n            format(video_id, mimi, compat_urllib_request.quote(refer, safe=b'').replace('.', '%2E')))\n\n        info_webpage = self._download_webpage(\n            info_url, video_id, note='Downloading info page')\n        info = compat_urlparse.parse_qs(info_webpage)\n\n        if 'err_code' in info:\n            # most of the time we can still download wideo even if err_code is 403 or 602\n            self.report_warning(\n                'Error code was: %s... but still trying' % info['err_code'][0])\n\n        if 'filepath' not in info:\n            raise ExtractorError('Cannot download file. Are you logged in?')\n\n        video_url = info['filepath'][0] + '?mid=' + info['mid'][0]\n        title_info = info.get('title')\n        if title_info:\n            title = title_info[0]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'url': video_url,\n            'ext': 'flv',\n            'thumbnail': thumbnail,\n        }\n\n\nclass FC2EmbedIE(InfoExtractor):\n    _VALID_URL = r'https?://video\\.fc2\\.com/flv2\\.swf\\?(?P<query>.+)'\n    IE_NAME = 'fc2:embed'\n\n    _TEST = {\n        'url': 'http://video.fc2.com/flv2.swf?t=201404182936758512407645&i=20130316kwishtfitaknmcgd76kjd864hso93htfjcnaogz629mcgfs6rbfk0hsycma7shkf85937cbchfygd74&i=201403223kCqB3Ez&d=2625&sj=11&lang=ja&rel=1&from=11&cmt=1&tk=TlRBM09EQTNNekU9&tl=\u30d7\u30ea\u30ba\u30f3\uff65\u30d6\u30ec\u30a4\u30af%20S1-01%20\u30de\u30a4\u30b1\u30eb%20\u3010\u5439\u66ff\u3011',\n        'md5': 'b8aae5334cb691bdb1193a88a6ab5d5a',\n        'info_dict': {\n            'id': '201403223kCqB3Ez',\n            'ext': 'flv',\n            'title': '\u30d7\u30ea\u30ba\u30f3\uff65\u30d6\u30ec\u30a4\u30af S1-01 \u30de\u30a4\u30b1\u30eb \u3010\u5439\u66ff\u3011',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        query = compat_parse_qs(mobj.group('query'))\n\n        video_id = query['i'][-1]\n        title = query.get('tl', ['FC2 video %s' % video_id])[0]\n\n        sj = query.get('sj', [None])[0]\n        thumbnail = None\n        if sj:\n            # See thumbnailImagePath() in ServerConst.as of flv2.swf\n            thumbnail = 'http://video%s-thumbnail.fc2.com/up/pic/%s.jpg' % (\n                sj, '/'.join((video_id[:6], video_id[6:8], video_id[-2], video_id[-1], video_id)))\n\n        return {\n            '_type': 'url_transparent',\n            'ie_key': FC2IE.ie_key(),\n            'url': 'fc2:%s' % video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "fc2.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/fc2.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}