{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass PlaysTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?plays\\.tv/(?:video|embeds)/(?P<id>[0-9a-f]{18})'\n    _TESTS = [{\n        'url': 'https://plays.tv/video/56af17f56c95335490/when-you-outplay-the-azir-wall',\n        'md5': 'dfeac1198506652b5257a62762cec7bc',\n        'info_dict': {\n            'id': '56af17f56c95335490',\n            'ext': 'mp4',\n            'title': 'Bjergsen - When you outplay the Azir wall',\n            'description': 'Posted by Bjergsen',\n        }\n    }, {\n        'url': 'https://plays.tv/embeds/56af17f56c95335490',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(\n            'https://plays.tv/video/%s' % video_id, video_id)\n\n        info = self._search_json_ld(webpage, video_id,)\n\n        mpd_url, sources = re.search(\n            r'(?s)<video[^>]+data-mpd=\"([^\"]+)\"[^>]*>(.+?)</video>',\n            webpage).groups()\n        formats = self._extract_mpd_formats(\n            self._proto_relative_url(mpd_url), video_id, mpd_id='DASH')\n        for format_id, height, format_url in re.findall(r'<source\\s+res=\"((\\d+)h?)\"\\s+src=\"([^\"]+)\"', sources):\n            formats.append({\n                'url': self._proto_relative_url(format_url),\n                'format_id': 'http-' + format_id,\n                'height': int_or_none(height),\n            })\n        self._sort_formats(formats)\n\n        info.update({\n            'id': video_id,\n            'description': self._og_search_description(webpage),\n            'thumbnail': info.get('thumbnail') or self._og_search_thumbnail(webpage),\n            'formats': formats,\n        })\n\n        return info\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass PlaysTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?plays\\.tv/(?:video|embeds)/(?P<id>[0-9a-f]{18})'\n    _TESTS = [{\n        'url': 'https://plays.tv/video/56af17f56c95335490/when-you-outplay-the-azir-wall',\n        'md5': 'dfeac1198506652b5257a62762cec7bc',\n        'info_dict': {\n            'id': '56af17f56c95335490',\n            'ext': 'mp4',\n            'title': 'Bjergsen - When you outplay the Azir wall',\n            'description': 'Posted by Bjergsen',\n        }\n    }, {\n        'url': 'https://plays.tv/embeds/56af17f56c95335490',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(\n            'https://plays.tv/video/%s' % video_id, video_id)\n\n        info = self._search_json_ld(webpage, video_id,)\n\n        mpd_url, sources = re.search(\n            r'(?s)<video[^>]+data-mpd=\"([^\"]+)\"[^>]*>(.+?)</video>',\n            webpage).groups()\n        formats = self._extract_mpd_formats(\n            self._proto_relative_url(mpd_url), video_id, mpd_id='DASH')\n        for format_id, height, format_url in re.findall(r'<source\\s+res=\"((\\d+)h?)\"\\s+src=\"([^\"]+)\"', sources):\n            formats.append({\n                'url': self._proto_relative_url(format_url),\n                'format_id': 'http-' + format_id,\n                'height': int_or_none(height),\n            })\n        self._sort_formats(formats)\n\n        info.update({\n            'id': video_id,\n            'description': self._og_search_description(webpage),\n            'thumbnail': info.get('thumbnail') or self._og_search_thumbnail(webpage),\n            'formats': formats,\n        })\n\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "plays.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/plays.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}