{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    js_to_json,\n    strip_jsonp,\n    try_get,\n    unified_strdate,\n    update_url_query,\n    urlhandle_detect_ext,\n)\n\n\nclass WDRIE(InfoExtractor):\n    _VALID_URL = r'https?://deviceids-medp\\.wdr\\.de/ondemand/\\d+/(?P<id>\\d+)\\.js'\n    _GEO_COUNTRIES = ['DE']\n    _TEST = {\n        'url': 'http://deviceids-medp.wdr.de/ondemand/155/1557833.js',\n        'info_dict': {\n            'id': 'mdb-1557833',\n            'ext': 'mp4',\n            'title': 'Biathlon-Staffel verpasst Podest bei Olympia-Generalprobe',\n            'upload_date': '20180112',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        metadata = self._download_json(\n            url, video_id, transform_source=strip_jsonp)\n\n        is_live = metadata.get('mediaType') == 'live'\n\n        tracker_data = metadata['trackerData']\n        media_resource = metadata['mediaResource']\n\n        formats = []\n\n        \n        for kind, media_resource in media_resource.items():\n            if kind not in ('dflt', 'alt'):\n                continue\n\n            for tag_name, medium_url in media_resource.items():\n                if tag_name not in ('videoURL', 'audioURL'):\n                    continue\n\n                ext = determine_ext(medium_url)\n                if ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        medium_url, video_id, 'mp4', 'm3u8_native',\n                        m3u8_id='hls'))\n                elif ext == 'f4m':\n                    manifest_url = update_url_query(\n                        medium_url, {'hdcore': '3.2.0', 'plugin': 'aasp-3.2.0.77.18'})\n                    formats.extend(self._extract_f4m_formats(\n                        manifest_url, video_id, f4m_id='hds', fatal=False))\n                elif ext == 'smil':\n                    formats.extend(self._extract_smil_formats(\n                        medium_url, 'stream', fatal=False))\n                else:\n                    a_format = {\n                        'url': medium_url\n                    }\n                    if ext == 'unknown_video':\n                        urlh = self._request_webpage(\n                            medium_url, video_id, note='Determining extension')\n                        ext = urlhandle_detect_ext(urlh)\n                        a_format['ext'] = ext\n                    formats.append(a_format)\n\n        self._sort_formats(formats)\n\n        subtitles = {}\n        caption_url = media_resource.get('captionURL')\n        if caption_url:\n            subtitles['de'] = [{\n                'url': caption_url,\n                'ext': 'ttml',\n            }]\n\n        title = tracker_data['trackerClipTitle']\n\n        return {\n            'id': tracker_data.get('trackerClipId', video_id),\n            'title': self._live_title(title) if is_live else title,\n            'alt_title': tracker_data.get('trackerClipSubcategory'),\n            'formats': formats,\n            'subtitles': subtitles,\n            'upload_date': unified_strdate(tracker_data.get('trackerClipAirTime')),\n            'is_live': is_live,\n        }\n\n\nclass WDRPageIE(InfoExtractor):\n    _CURRENT_MAUS_URL = r'https?://(?:www\\.)wdrmaus.de/(?:[^/]+/){1,2}[^/?\n    _PAGE_REGEX = r'/(?:mediathek/)?(?:[^/]+/)*(?P<display_id>[^/]+)\\.html'\n    _VALID_URL = r'https?://(?:www\\d?\\.)?(?:wdr\\d?|sportschau)\\.de' + _PAGE_REGEX + '|' + _CURRENT_MAUS_URL\n\n    _TESTS = [\n        {\n            'url': 'http://www1.wdr.de/mediathek/video/sendungen/doku-am-freitag/video-geheimnis-aachener-dom-100.html',\n            \n            'info_dict': {\n                'id': 'mdb-1058683',\n                'ext': 'flv',\n                'display_id': 'doku-am-freitag/video-geheimnis-aachener-dom-100',\n                'title': 'Geheimnis Aachener Dom',\n                'alt_title': 'Doku am Freitag',\n                'upload_date': '20160304',\n                'description': 'md5:87be8ff14d8dfd7a7ee46f0299b52318',\n                'is_live': False,\n                'subtitles': {'de': [{\n                    'url': 'http://ondemand-ww.wdr.de/medp/fsk0/105/1058683/1058683_12220974.xml',\n                    'ext': 'ttml',\n                }]},\n            },\n            'skip': 'HTTP Error 404: Not Found',\n        },\n        {\n            'url': 'http://www1.wdr.de/mediathek/audio/wdr3/wdr3-gespraech-am-samstag/audio-schriftstellerin-juli-zeh-100.html',\n            'md5': 'f4c1f96d01cf285240f53ea4309663d8',\n            'info_dict': {\n                'id': 'mdb-1072000',\n                'ext': 'mp3',\n                'display_id': 'wdr3-gespraech-am-samstag/audio-schriftstellerin-juli-zeh-100',\n                'title': 'Schriftstellerin Juli Zeh',\n                'alt_title': 'WDR 3 Gespr\u00e4ch am Samstag',\n                'upload_date': '20160312',\n                'description': 'md5:e127d320bc2b1f149be697ce044a3dd7',\n                'is_live': False,\n                'subtitles': {}\n            },\n            'skip': 'HTTP Error 404: Not Found',\n        },\n        {\n            'url': 'http://www1.wdr.de/mediathek/video/live/index.html',\n            'info_dict': {\n                'id': 'mdb-1406149',\n                'ext': 'mp4',\n                'title': r're:^WDR Fernsehen im Livestream \\(nur in Deutschland erreichbar\\) [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n                'alt_title': 'WDR Fernsehen Live',\n                'upload_date': '20150101',\n                'is_live': True,\n            },\n            'params': {\n                'skip_download': True,  \n            },\n        },\n        {\n            'url': 'http://www1.wdr.de/mediathek/video/sendungen/aktuelle-stunde/aktuelle-stunde-120.html',\n            'playlist_mincount': 7,\n            'info_dict': {\n                'id': 'aktuelle-stunde-120',\n            },\n        },\n        {\n            'url': 'http://www.wdrmaus.de/aktuelle-sendung/index.php5',\n            'info_dict': {\n                'id': 'mdb-1552552',\n                'ext': 'mp4',\n                'upload_date': 're:^[0-9]{8}$',\n                'title': 're:^Die Sendung mit der Maus vom [0-9.]{10}$',\n            },\n            'skip': 'The id changes from week to week because of the new episode'\n        },\n        {\n            'url': 'http://www.wdrmaus.de/filme/sachgeschichten/achterbahn.php5',\n            'md5': '803138901f6368ee497b4d195bb164f2',\n            'info_dict': {\n                'id': 'mdb-186083',\n                'ext': 'mp4',\n                'upload_date': '20130919',\n                'title': 'Sachgeschichte - Achterbahn ',\n            },\n        },\n        {\n            'url': 'http://www1.wdr.de/radio/player/radioplayer116~_layout-popupVersion.html',\n            \n            'info_dict': {\n                'id': 'mdb-869971',\n                'ext': 'mp4',\n                'title': r're:^COSMO Livestream [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n                'upload_date': '20160101',\n            },\n            'params': {\n                'skip_download': True,  \n            }\n        },\n        {\n            'url': 'http://www.sportschau.de/handballem2018/handball-nationalmannschaft-em-stolperstein-vorrunde-100.html',\n            'info_dict': {\n                'id': 'mdb-1556012',\n                'ext': 'mp4',\n                'title': 'DHB-Vizepr\u00e4sident Bob Hanning - \"Die Weltspitze ist extrem breit\"',\n                'upload_date': '20180111',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.sportschau.de/handballem2018/audio-vorschau---die-handball-em-startet-mit-grossem-favoritenfeld-100.html',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        display_id = mobj.group('display_id')\n        webpage = self._download_webpage(url, display_id)\n\n        entries = []\n\n        \n\n        \n        \n        \n        \n        for mobj in re.finditer(\n            r\n    IE_NAME = 'wdr:mobile'\n    _TEST = {\n        'url': 'http://mobile-ondemand.wdr.de/CMS2010/mdb/ondemand/weltweit/fsk0/42/421735/421735_4283021.mp4',\n        'info_dict': {\n            'title': '4283021',\n            'id': '421735',\n            'ext': 'mp4',\n            'age_limit': 0,\n        },\n        'skip': 'Problems with loading data.'\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        return {\n            'id': mobj.group('id'),\n            'title': mobj.group('title'),\n            'age_limit': int(mobj.group('age_limit')),\n            'url': url,\n            'http_headers': {\n                'User-Agent': 'mobile',\n            },\n        }\n", "comments": "(?sx)class=\n                    (?:\n                        ([\"\\'])(?:mediaLink|wdrrPlayerPlayBtn|videoButton)\\b.*?\\1[^>]+|\n                        ([\"\\'])videoLink\\b.*?\\2[\\s]*>\\n[^\\n]*\n                    )data-extension=([\"\\'])(?P<data>(?:(?!\\3).)+)\\3\n                    ''', webpage):\n            media_link_obj = self._parse_json(\n                mobj.group('data'), display_id, transform_source=js_to_json,\n                fatal=False)\n            if not media_link_obj:\n                continue\n            jsonp_url = try_get(\n                media_link_obj, lambda x: x['mediaObj']['url'], compat_str)\n            if jsonp_url:\n                entries.append(self.url_result(jsonp_url, ie=WDRIE.ie_key()))\n\n        # Playlist (e.g. https://www1.wdr.de/mediathek/video/sendungen/aktuelle-stunde/aktuelle-stunde-120.html)\n        if not entries:\n            entries = [\n                self.url_result(\n                    compat_urlparse.urljoin(url, mobj.group('href')),\n                    ie=WDRPageIE.ie_key())\n                for mobj in re.finditer(\n                    r'<a[^>]+\\bhref=([\"\\'])(?P<href>(?:(?!\\1).)+)\\1[^>]+\\bdata-extension=',\n                    webpage) if re.match(self._PAGE_REGEX, mobj.group('href'))\n            ]\n\n        return self.playlist_result(entries, playlist_id=display_id)\n\n\nclass WDRElefantIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)wdrmaus\\.de/elefantenseite/#(?P<id>.+)'\n    _TEST = {\n        'url': 'http://www.wdrmaus.de/elefantenseite/#folge_ostern_2015',\n        'info_dict': {\n            'title': 'Folge Oster-Spezial 2015',\n            'id': 'mdb-1088195',\n            'ext': 'mp4',\n            'age_limit': None,\n            'upload_date': '20150406'\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        # Table of Contents seems to always be at this address, so fetch it directly.\n        # The website fetches configurationJS.php5, which links to tableOfContentsJS.php5.\n        table_of_contents = self._download_json(\n            'https://www.wdrmaus.de/elefantenseite/data/tableOfContentsJS.php5',\n            display_id)\n        if display_id not in table_of_contents:\n            raise ExtractorError(\n                'No entry in site\\'s table of contents for this URL. '\n                'Is the fragment part of the URL (after the #) correct?',\n                expected=True)\n        xml_metadata_path = table_of_contents[display_id]['xmlPath']\n        xml_metadata = self._download_xml(\n            'https://www.wdrmaus.de/elefantenseite/' + xml_metadata_path,\n            display_id)\n        zmdb_url_element = xml_metadata.find('./movie/zmdb_url')\n        if zmdb_url_element is None:\n            raise ExtractorError(\n                '%s is not a video' % display_id, expected=True)\n        return self.url_result(zmdb_url_element.text, ie=WDRIE.ie_key())\n\n\nclass WDRMobileIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n        https?://mobile-ondemand\\.wdr\\.de/\n        .*?/fsk(?P<age_limit>[0-9]+)\n        /[0-9]+/[0-9]+/\n        (?P<id>[0-9]+)_(?P<title>[0-9]+)\n)\n# coding: utf-8\n# check if the metadata contains a direct URL to a file\n#]+\\.php5'\n# HDS download, MD5 is unstable\n# m3u8 download\n# Live stream, MD5 unstable\n# m3u8 download\n# Article with several videos\n# for wdr.de the data-extension is in a tag with the class \"mediaLink\"\n# for wdr.de radio players, in a tag with the class \"wdrrPlayerPlayBtn\"\n# for wdrmaus, in a tag with the class \"videoButton\" (previously a link\n# to the page in a multiline \"videoLink\"-tag)\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    js_to_json,\n    strip_jsonp,\n    try_get,\n    unified_strdate,\n    update_url_query,\n    urlhandle_detect_ext,\n)\n\n\nclass WDRIE(InfoExtractor):\n    _VALID_URL = r'https?://deviceids-medp\\.wdr\\.de/ondemand/\\d+/(?P<id>\\d+)\\.js'\n    _GEO_COUNTRIES = ['DE']\n    _TEST = {\n        'url': 'http://deviceids-medp.wdr.de/ondemand/155/1557833.js',\n        'info_dict': {\n            'id': 'mdb-1557833',\n            'ext': 'mp4',\n            'title': 'Biathlon-Staffel verpasst Podest bei Olympia-Generalprobe',\n            'upload_date': '20180112',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        metadata = self._download_json(\n            url, video_id, transform_source=strip_jsonp)\n\n        is_live = metadata.get('mediaType') == 'live'\n\n        tracker_data = metadata['trackerData']\n        media_resource = metadata['mediaResource']\n\n        formats = []\n\n        # check if the metadata contains a direct URL to a file\n        for kind, media_resource in media_resource.items():\n            if kind not in ('dflt', 'alt'):\n                continue\n\n            for tag_name, medium_url in media_resource.items():\n                if tag_name not in ('videoURL', 'audioURL'):\n                    continue\n\n                ext = determine_ext(medium_url)\n                if ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        medium_url, video_id, 'mp4', 'm3u8_native',\n                        m3u8_id='hls'))\n                elif ext == 'f4m':\n                    manifest_url = update_url_query(\n                        medium_url, {'hdcore': '3.2.0', 'plugin': 'aasp-3.2.0.77.18'})\n                    formats.extend(self._extract_f4m_formats(\n                        manifest_url, video_id, f4m_id='hds', fatal=False))\n                elif ext == 'smil':\n                    formats.extend(self._extract_smil_formats(\n                        medium_url, 'stream', fatal=False))\n                else:\n                    a_format = {\n                        'url': medium_url\n                    }\n                    if ext == 'unknown_video':\n                        urlh = self._request_webpage(\n                            medium_url, video_id, note='Determining extension')\n                        ext = urlhandle_detect_ext(urlh)\n                        a_format['ext'] = ext\n                    formats.append(a_format)\n\n        self._sort_formats(formats)\n\n        subtitles = {}\n        caption_url = media_resource.get('captionURL')\n        if caption_url:\n            subtitles['de'] = [{\n                'url': caption_url,\n                'ext': 'ttml',\n            }]\n\n        title = tracker_data['trackerClipTitle']\n\n        return {\n            'id': tracker_data.get('trackerClipId', video_id),\n            'title': self._live_title(title) if is_live else title,\n            'alt_title': tracker_data.get('trackerClipSubcategory'),\n            'formats': formats,\n            'subtitles': subtitles,\n            'upload_date': unified_strdate(tracker_data.get('trackerClipAirTime')),\n            'is_live': is_live,\n        }\n\n\nclass WDRPageIE(InfoExtractor):\n    _CURRENT_MAUS_URL = r'https?://(?:www\\.)wdrmaus.de/(?:[^/]+/){1,2}[^/?#]+\\.php5'\n    _PAGE_REGEX = r'/(?:mediathek/)?(?:[^/]+/)*(?P<display_id>[^/]+)\\.html'\n    _VALID_URL = r'https?://(?:www\\d?\\.)?(?:wdr\\d?|sportschau)\\.de' + _PAGE_REGEX + '|' + _CURRENT_MAUS_URL\n\n    _TESTS = [\n        {\n            'url': 'http://www1.wdr.de/mediathek/video/sendungen/doku-am-freitag/video-geheimnis-aachener-dom-100.html',\n            # HDS download, MD5 is unstable\n            'info_dict': {\n                'id': 'mdb-1058683',\n                'ext': 'flv',\n                'display_id': 'doku-am-freitag/video-geheimnis-aachener-dom-100',\n                'title': 'Geheimnis Aachener Dom',\n                'alt_title': 'Doku am Freitag',\n                'upload_date': '20160304',\n                'description': 'md5:87be8ff14d8dfd7a7ee46f0299b52318',\n                'is_live': False,\n                'subtitles': {'de': [{\n                    'url': 'http://ondemand-ww.wdr.de/medp/fsk0/105/1058683/1058683_12220974.xml',\n                    'ext': 'ttml',\n                }]},\n            },\n            'skip': 'HTTP Error 404: Not Found',\n        },\n        {\n            'url': 'http://www1.wdr.de/mediathek/audio/wdr3/wdr3-gespraech-am-samstag/audio-schriftstellerin-juli-zeh-100.html',\n            'md5': 'f4c1f96d01cf285240f53ea4309663d8',\n            'info_dict': {\n                'id': 'mdb-1072000',\n                'ext': 'mp3',\n                'display_id': 'wdr3-gespraech-am-samstag/audio-schriftstellerin-juli-zeh-100',\n                'title': 'Schriftstellerin Juli Zeh',\n                'alt_title': 'WDR 3 Gespr\u00e4ch am Samstag',\n                'upload_date': '20160312',\n                'description': 'md5:e127d320bc2b1f149be697ce044a3dd7',\n                'is_live': False,\n                'subtitles': {}\n            },\n            'skip': 'HTTP Error 404: Not Found',\n        },\n        {\n            'url': 'http://www1.wdr.de/mediathek/video/live/index.html',\n            'info_dict': {\n                'id': 'mdb-1406149',\n                'ext': 'mp4',\n                'title': r're:^WDR Fernsehen im Livestream \\(nur in Deutschland erreichbar\\) [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n                'alt_title': 'WDR Fernsehen Live',\n                'upload_date': '20150101',\n                'is_live': True,\n            },\n            'params': {\n                'skip_download': True,  # m3u8 download\n            },\n        },\n        {\n            'url': 'http://www1.wdr.de/mediathek/video/sendungen/aktuelle-stunde/aktuelle-stunde-120.html',\n            'playlist_mincount': 7,\n            'info_dict': {\n                'id': 'aktuelle-stunde-120',\n            },\n        },\n        {\n            'url': 'http://www.wdrmaus.de/aktuelle-sendung/index.php5',\n            'info_dict': {\n                'id': 'mdb-1552552',\n                'ext': 'mp4',\n                'upload_date': 're:^[0-9]{8}$',\n                'title': 're:^Die Sendung mit der Maus vom [0-9.]{10}$',\n            },\n            'skip': 'The id changes from week to week because of the new episode'\n        },\n        {\n            'url': 'http://www.wdrmaus.de/filme/sachgeschichten/achterbahn.php5',\n            'md5': '803138901f6368ee497b4d195bb164f2',\n            'info_dict': {\n                'id': 'mdb-186083',\n                'ext': 'mp4',\n                'upload_date': '20130919',\n                'title': 'Sachgeschichte - Achterbahn ',\n            },\n        },\n        {\n            'url': 'http://www1.wdr.de/radio/player/radioplayer116~_layout-popupVersion.html',\n            # Live stream, MD5 unstable\n            'info_dict': {\n                'id': 'mdb-869971',\n                'ext': 'mp4',\n                'title': r're:^COSMO Livestream [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n                'upload_date': '20160101',\n            },\n            'params': {\n                'skip_download': True,  # m3u8 download\n            }\n        },\n        {\n            'url': 'http://www.sportschau.de/handballem2018/handball-nationalmannschaft-em-stolperstein-vorrunde-100.html',\n            'info_dict': {\n                'id': 'mdb-1556012',\n                'ext': 'mp4',\n                'title': 'DHB-Vizepr\u00e4sident Bob Hanning - \"Die Weltspitze ist extrem breit\"',\n                'upload_date': '20180111',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.sportschau.de/handballem2018/audio-vorschau---die-handball-em-startet-mit-grossem-favoritenfeld-100.html',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        display_id = mobj.group('display_id')\n        webpage = self._download_webpage(url, display_id)\n\n        entries = []\n\n        # Article with several videos\n\n        # for wdr.de the data-extension is in a tag with the class \"mediaLink\"\n        # for wdr.de radio players, in a tag with the class \"wdrrPlayerPlayBtn\"\n        # for wdrmaus, in a tag with the class \"videoButton\" (previously a link\n        # to the page in a multiline \"videoLink\"-tag)\n        for mobj in re.finditer(\n            r'''(?sx)class=\n                    (?:\n                        ([\"\\'])(?:mediaLink|wdrrPlayerPlayBtn|videoButton)\\b.*?\\1[^>]+|\n                        ([\"\\'])videoLink\\b.*?\\2[\\s]*>\\n[^\\n]*\n                    )data-extension=([\"\\'])(?P<data>(?:(?!\\3).)+)\\3\n                    ''', webpage):\n            media_link_obj = self._parse_json(\n                mobj.group('data'), display_id, transform_source=js_to_json,\n                fatal=False)\n            if not media_link_obj:\n                continue\n            jsonp_url = try_get(\n                media_link_obj, lambda x: x['mediaObj']['url'], compat_str)\n            if jsonp_url:\n                entries.append(self.url_result(jsonp_url, ie=WDRIE.ie_key()))\n\n        # Playlist (e.g. https://www1.wdr.de/mediathek/video/sendungen/aktuelle-stunde/aktuelle-stunde-120.html)\n        if not entries:\n            entries = [\n                self.url_result(\n                    compat_urlparse.urljoin(url, mobj.group('href')),\n                    ie=WDRPageIE.ie_key())\n                for mobj in re.finditer(\n                    r'<a[^>]+\\bhref=([\"\\'])(?P<href>(?:(?!\\1).)+)\\1[^>]+\\bdata-extension=',\n                    webpage) if re.match(self._PAGE_REGEX, mobj.group('href'))\n            ]\n\n        return self.playlist_result(entries, playlist_id=display_id)\n\n\nclass WDRElefantIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)wdrmaus\\.de/elefantenseite/#(?P<id>.+)'\n    _TEST = {\n        'url': 'http://www.wdrmaus.de/elefantenseite/#folge_ostern_2015',\n        'info_dict': {\n            'title': 'Folge Oster-Spezial 2015',\n            'id': 'mdb-1088195',\n            'ext': 'mp4',\n            'age_limit': None,\n            'upload_date': '20150406'\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        # Table of Contents seems to always be at this address, so fetch it directly.\n        # The website fetches configurationJS.php5, which links to tableOfContentsJS.php5.\n        table_of_contents = self._download_json(\n            'https://www.wdrmaus.de/elefantenseite/data/tableOfContentsJS.php5',\n            display_id)\n        if display_id not in table_of_contents:\n            raise ExtractorError(\n                'No entry in site\\'s table of contents for this URL. '\n                'Is the fragment part of the URL (after the #) correct?',\n                expected=True)\n        xml_metadata_path = table_of_contents[display_id]['xmlPath']\n        xml_metadata = self._download_xml(\n            'https://www.wdrmaus.de/elefantenseite/' + xml_metadata_path,\n            display_id)\n        zmdb_url_element = xml_metadata.find('./movie/zmdb_url')\n        if zmdb_url_element is None:\n            raise ExtractorError(\n                '%s is not a video' % display_id, expected=True)\n        return self.url_result(zmdb_url_element.text, ie=WDRIE.ie_key())\n\n\nclass WDRMobileIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n        https?://mobile-ondemand\\.wdr\\.de/\n        .*?/fsk(?P<age_limit>[0-9]+)\n        /[0-9]+/[0-9]+/\n        (?P<id>[0-9]+)_(?P<title>[0-9]+)'''\n    IE_NAME = 'wdr:mobile'\n    _TEST = {\n        'url': 'http://mobile-ondemand.wdr.de/CMS2010/mdb/ondemand/weltweit/fsk0/42/421735/421735_4283021.mp4',\n        'info_dict': {\n            'title': '4283021',\n            'id': '421735',\n            'ext': 'mp4',\n            'age_limit': 0,\n        },\n        'skip': 'Problems with loading data.'\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        return {\n            'id': mobj.group('id'),\n            'title': mobj.group('title'),\n            'age_limit': int(mobj.group('age_limit')),\n            'url': url,\n            'http_headers': {\n                'User-Agent': 'mobile',\n            },\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "wdr.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/wdr.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}