{"author": "keon", "code": "\"\"\" Design an algorithm to encode a list of strings to a string.\n The encoded mystring is then sent over the network and is decoded\n back to the original list of strings.\n\"\"\"\n\n\n\ndef encode(strs):\n    \"\"\"Encodes a list of strings to a single string.\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    res = ''\n    for string in strs.split():\n        res += str(len(string)) + \":\" + string\n    return res\n\ndef decode(s):\n    \"\"\"Decodes a single string to a list of strings.\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    strs = []\n    i = 0\n    while i < len(s):\n        index = s.find(\":\", i)\n        size = int(s[i:index])\n        strs.append(s[index+1: index+1+size])\n        i = index+1+size\n    return strs\n\nstrs = \"keon is awesome\"\nprint(strs)\nenc = encode(strs)\nprint(enc)\ndec = decode(enc)\nprint(dec)\n", "comments": "    design algorithm encode list strings string   the encoded mystring sent network decoded  back original list strings         implement encode decode methods   def encode(strs)         encodes list strings single string       type strs  list str       rtype  str             res          string strs split()          res    str(len(string))         string     return res  def decode(s)         decodes single string list strings       type  str      rtype  list str             implement encode decode methods  ", "content": "\"\"\" Design an algorithm to encode a list of strings to a string.\n The encoded mystring is then sent over the network and is decoded\n back to the original list of strings.\n\"\"\"\n\n# Implement the encode and decode methods.\n\ndef encode(strs):\n    \"\"\"Encodes a list of strings to a single string.\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    res = ''\n    for string in strs.split():\n        res += str(len(string)) + \":\" + string\n    return res\n\ndef decode(s):\n    \"\"\"Decodes a single string to a list of strings.\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    strs = []\n    i = 0\n    while i < len(s):\n        index = s.find(\":\", i)\n        size = int(s[i:index])\n        strs.append(s[index+1: index+1+size])\n        i = index+1+size\n    return strs\n\nstrs = \"keon is awesome\"\nprint(strs)\nenc = encode(strs)\nprint(enc)\ndec = decode(enc)\nprint(dec)\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "encode_decode.py", "id": "eefd0134402ef35ad34374a1de29fddf", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/keon-algorithms/keon-algorithms-ea43887/strings/encode_decode.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:53:29Z", "url": "https://github.com/keon/algorithms", "wiki": true}