{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    float_or_none,\n)\n\n\nclass FczenitIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?fc-zenit\\.ru/video/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://fc-zenit.ru/video/41044/',\n        'md5': '0e3fab421b455e970fa1aa3891e57df0',\n        'info_dict': {\n            'id': '41044',\n            'ext': 'mp4',\n            'title': '\u0422\u0430\u043a \u043f\u0438\u0448\u0435\u0442\u0441\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u044f: \u043a\u0430\u0437\u0430\u043d\u0441\u043a\u0438\u0439 \u0440\u0430\u0437\u0433\u0440\u043e\u043c \u0426\u0421\u041a\u0410 \u043d\u0430 \u00ab\u0417\u0435\u043d\u0438\u0442-\u0422\u0412\u00bb',\n            'timestamp': 1462283735,\n            'upload_date': '20160503',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        msi_id = self._search_regex(\n            r\"(?s)config\\s*=\\s*{.+?video_id\\s*:\\s*'([^']+)'\", webpage, 'msi id')\n\n        msi_data = self._download_json(\n            'http://player.fc-zenit.ru/msi/video', msi_id, query={\n                'video': msi_id,\n            })['data']\n        title = msi_data['name']\n\n        formats = [{\n            'format_id': q.get('label'),\n            'url': q['url'],\n            'height': int_or_none(q.get('label')),\n        } for q in msi_data['qualities'] if q.get('url')]\n\n        self._sort_formats(formats)\n\n        tags = [tag['label'] for tag in msi_data.get('tags', []) if tag.get('label')]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': msi_data.get('preview'),\n            'formats': formats,\n            'duration': float_or_none(msi_data.get('duration')),\n            'timestamp': int_or_none(msi_data.get('date')),\n            'tags': tags,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    float_or_none,\n)\n\n\nclass FczenitIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?fc-zenit\\.ru/video/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://fc-zenit.ru/video/41044/',\n        'md5': '0e3fab421b455e970fa1aa3891e57df0',\n        'info_dict': {\n            'id': '41044',\n            'ext': 'mp4',\n            'title': '\u0422\u0430\u043a \u043f\u0438\u0448\u0435\u0442\u0441\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u044f: \u043a\u0430\u0437\u0430\u043d\u0441\u043a\u0438\u0439 \u0440\u0430\u0437\u0433\u0440\u043e\u043c \u0426\u0421\u041a\u0410 \u043d\u0430 \u00ab\u0417\u0435\u043d\u0438\u0442-\u0422\u0412\u00bb',\n            'timestamp': 1462283735,\n            'upload_date': '20160503',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        msi_id = self._search_regex(\n            r\"(?s)config\\s*=\\s*{.+?video_id\\s*:\\s*'([^']+)'\", webpage, 'msi id')\n\n        msi_data = self._download_json(\n            'http://player.fc-zenit.ru/msi/video', msi_id, query={\n                'video': msi_id,\n            })['data']\n        title = msi_data['name']\n\n        formats = [{\n            'format_id': q.get('label'),\n            'url': q['url'],\n            'height': int_or_none(q.get('label')),\n        } for q in msi_data['qualities'] if q.get('url')]\n\n        self._sort_formats(formats)\n\n        tags = [tag['label'] for tag in msi_data.get('tags', []) if tag.get('label')]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': msi_data.get('preview'),\n            'formats': formats,\n            'duration': float_or_none(msi_data.get('duration')),\n            'timestamp': int_or_none(msi_data.get('date')),\n            'tags': tags,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "fczenit.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/fczenit.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}