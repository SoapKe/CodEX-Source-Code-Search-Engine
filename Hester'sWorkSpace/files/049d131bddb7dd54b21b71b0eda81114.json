{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestMinHeap(object):\n\n    def test_min_heap(self):\n        heap = MinHeap()\n        assert_equal(heap.peek_min(), None)\n        assert_equal(heap.extract_min(), None)\n        heap.insert(20)\n        assert_equal(heap.array[0], 20)\n        heap.insert(5)\n        assert_equal(heap.array[0], 5)\n        assert_equal(heap.array[1], 20)\n        heap.insert(15)\n        assert_equal(heap.array[0], 5)\n        assert_equal(heap.array[1], 20)\n        assert_equal(heap.array[2], 15)\n        heap.insert(22)\n        assert_equal(heap.array[0], 5)\n        assert_equal(heap.array[1], 20)\n        assert_equal(heap.array[2], 15)\n        assert_equal(heap.array[3], 22)\n        heap.insert(40)\n        assert_equal(heap.array[0], 5)\n        assert_equal(heap.array[1], 20)\n        assert_equal(heap.array[2], 15)\n        assert_equal(heap.array[3], 22)\n        assert_equal(heap.array[4], 40)\n        heap.insert(3)\n        assert_equal(heap.array[0], 3)\n        assert_equal(heap.array[1], 20)\n        assert_equal(heap.array[2], 5)\n        assert_equal(heap.array[3], 22)\n        assert_equal(heap.array[4], 40)\n        assert_equal(heap.array[5], 15)\n        mins = []\n        while heap:\n            mins.append(heap.extract_min())\n        assert_equal(mins, [3, 5, 15, 20, 22, 40])\n        print('Success: test_min_heap')\n\n        \ndef main():\n    test = TestMinHeap()\n    test.test_min_heap()\n\n    \nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\n\nclass TestMinHeap(object):\n\n    def test_min_heap(self):\n        heap = MinHeap()\n        assert_equal(heap.peek_min(), None)\n        assert_equal(heap.extract_min(), None)\n        heap.insert(20)\n        assert_equal(heap.array[0], 20)\n        heap.insert(5)\n        assert_equal(heap.array[0], 5)\n        assert_equal(heap.array[1], 20)\n        heap.insert(15)\n        assert_equal(heap.array[0], 5)\n        assert_equal(heap.array[1], 20)\n        assert_equal(heap.array[2], 15)\n        heap.insert(22)\n        assert_equal(heap.array[0], 5)\n        assert_equal(heap.array[1], 20)\n        assert_equal(heap.array[2], 15)\n        assert_equal(heap.array[3], 22)\n        heap.insert(40)\n        assert_equal(heap.array[0], 5)\n        assert_equal(heap.array[1], 20)\n        assert_equal(heap.array[2], 15)\n        assert_equal(heap.array[3], 22)\n        assert_equal(heap.array[4], 40)\n        heap.insert(3)\n        assert_equal(heap.array[0], 3)\n        assert_equal(heap.array[1], 20)\n        assert_equal(heap.array[2], 5)\n        assert_equal(heap.array[3], 22)\n        assert_equal(heap.array[4], 40)\n        assert_equal(heap.array[5], 15)\n        mins = []\n        while heap:\n            mins.append(heap.extract_min())\n        assert_equal(mins, [3, 5, 15, 20, 22, 40])\n        print('Success: test_min_heap')\n\n        \ndef main():\n    test = TestMinHeap()\n    test.test_min_heap()\n\n    \nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_min_heap.py", "id": "049d131bddb7dd54b21b71b0eda81114", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/graphs_trees/min_heap/test_min_heap.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}