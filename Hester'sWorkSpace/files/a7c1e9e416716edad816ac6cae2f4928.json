{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_urllib_parse_unquote,\n)\n\n\nclass BigflixIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?bigflix\\.com/.+/(?P<id>[0-9]+)'\n    _TESTS = [{\n        \n        'url': 'http://www.bigflix.com/Tamil-movies/Drama-movies/Madarasapatinam/16070',\n        'info_dict': {\n            'id': '16070',\n            'ext': 'mp4',\n            'title': 'Madarasapatinam',\n            'description': 'md5:9f0470b26a4ba8e824c823b5d95c2f6b',\n            'formats': 'mincount:2',\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        \n        'url': 'http://www.bigflix.com/Malayalam-movies/Drama-movies/Indian-Rupee/15967',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_regex(\n            r'<div[^>]+class=[\"\\']pagetitle[\"\\'][^>]*>(.+?)</div>',\n            webpage, 'title')\n\n        def decode_url(quoted_b64_url):\n            return compat_b64decode(compat_urllib_parse_unquote(\n                quoted_b64_url)).decode('utf-8')\n\n        formats = []\n        for height, encoded_url in re.findall(\n                r'ContentURL_(\\d{3,4})[pP][^=]+=([^&]+)', webpage):\n            video_url = decode_url(encoded_url)\n            f = {\n                'url': video_url,\n                'format_id': '%sp' % height,\n                'height': int(height),\n            }\n            if video_url.startswith('rtmp'):\n                f['ext'] = 'flv'\n            formats.append(f)\n\n        file_url = self._search_regex(\n            r'file=([^&]+)', webpage, 'video url', default=None)\n        if file_url:\n            video_url = decode_url(file_url)\n            if all(f['url'] != video_url for f in formats):\n                formats.append({\n                    'url': decode_url(file_url),\n                })\n\n        self._sort_formats(formats)\n\n        description = self._html_search_meta('description', webpage)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'formats': formats\n        }\n", "comments": "# coding: utf-8\n# 2 formats\n# multiple formats\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_urllib_parse_unquote,\n)\n\n\nclass BigflixIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?bigflix\\.com/.+/(?P<id>[0-9]+)'\n    _TESTS = [{\n        # 2 formats\n        'url': 'http://www.bigflix.com/Tamil-movies/Drama-movies/Madarasapatinam/16070',\n        'info_dict': {\n            'id': '16070',\n            'ext': 'mp4',\n            'title': 'Madarasapatinam',\n            'description': 'md5:9f0470b26a4ba8e824c823b5d95c2f6b',\n            'formats': 'mincount:2',\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        # multiple formats\n        'url': 'http://www.bigflix.com/Malayalam-movies/Drama-movies/Indian-Rupee/15967',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_regex(\n            r'<div[^>]+class=[\"\\']pagetitle[\"\\'][^>]*>(.+?)</div>',\n            webpage, 'title')\n\n        def decode_url(quoted_b64_url):\n            return compat_b64decode(compat_urllib_parse_unquote(\n                quoted_b64_url)).decode('utf-8')\n\n        formats = []\n        for height, encoded_url in re.findall(\n                r'ContentURL_(\\d{3,4})[pP][^=]+=([^&]+)', webpage):\n            video_url = decode_url(encoded_url)\n            f = {\n                'url': video_url,\n                'format_id': '%sp' % height,\n                'height': int(height),\n            }\n            if video_url.startswith('rtmp'):\n                f['ext'] = 'flv'\n            formats.append(f)\n\n        file_url = self._search_regex(\n            r'file=([^&]+)', webpage, 'video url', default=None)\n        if file_url:\n            video_url = decode_url(file_url)\n            if all(f['url'] != video_url for f in formats):\n                formats.append({\n                    'url': decode_url(file_url),\n                })\n\n        self._sort_formats(formats)\n\n        description = self._html_search_meta('description', webpage)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'formats': formats\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "bigflix.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/bigflix.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}