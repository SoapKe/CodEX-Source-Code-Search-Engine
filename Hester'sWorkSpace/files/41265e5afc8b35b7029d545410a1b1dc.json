{"author": "rg3", "code": "\n\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import js_to_json\n\n\nclass HelsinkiIE(InfoExtractor):\n    IE_DESC = 'helsinki.fi'\n    _VALID_URL = r'https?://video\\.helsinki\\.fi/Arkisto/flash\\.php\\?id=(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://video.helsinki.fi/Arkisto/flash.php?id=20258',\n        'info_dict': {\n            'id': '20258',\n            'ext': 'mp4',\n            'title': 'Tietotekniikkafoorumi-iltap\u00e4iv\u00e4',\n            'description': 'md5:f5c904224d43c133225130fe156a5ee0',\n        },\n        'params': {\n            'skip_download': True,  \n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        params = self._parse_json(self._html_search_regex(\n            r'(?s)jwplayer\\(\"player\"\\).setup\\((\\{.*?\\})\\);',\n            webpage, 'player code'), video_id, transform_source=js_to_json)\n        formats = [{\n            'url': s['file'],\n            'ext': 'mp4',\n        } for s in params['sources']]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage).replace('Video: ', ''),\n            'description': self._og_search_description(webpage),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# RTMP\n", "content": "# coding: utf-8\n\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import js_to_json\n\n\nclass HelsinkiIE(InfoExtractor):\n    IE_DESC = 'helsinki.fi'\n    _VALID_URL = r'https?://video\\.helsinki\\.fi/Arkisto/flash\\.php\\?id=(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://video.helsinki.fi/Arkisto/flash.php?id=20258',\n        'info_dict': {\n            'id': '20258',\n            'ext': 'mp4',\n            'title': 'Tietotekniikkafoorumi-iltap\u00e4iv\u00e4',\n            'description': 'md5:f5c904224d43c133225130fe156a5ee0',\n        },\n        'params': {\n            'skip_download': True,  # RTMP\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        params = self._parse_json(self._html_search_regex(\n            r'(?s)jwplayer\\(\"player\"\\).setup\\((\\{.*?\\})\\);',\n            webpage, 'player code'), video_id, transform_source=js_to_json)\n        formats = [{\n            'url': s['file'],\n            'ext': 'mp4',\n        } for s in params['sources']]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage).replace('Video: ', ''),\n            'description': self._og_search_description(webpage),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "helsinki.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/helsinki.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}