{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n)\n\n\nclass MnetIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?mnet\\.(?:com|interest\\.me)/tv/vod/(?:.*?\\bclip_id=)?(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.mnet.com/tv/vod/171008',\n        'info_dict': {\n            'id': '171008',\n            'title': 'SS_\uc774\ud574\uc778@\ud788\ub4e0\ubc15\uc2a4',\n            'description': 'md5:b9efa592c3918b615ba69fe9f8a05c55',\n            'duration': 88,\n            'upload_date': '20151231',\n            'timestamp': 1451564040,\n            'age_limit': 0,\n            'thumbnails': 'mincount:5',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'ext': 'flv',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://mnet.interest.me/tv/vod/172790',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.mnet.com/tv/vod/vod_view.asp?clip_id=172790&tabMenu=',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        \n        \n        \n        \n        info = self._download_json(\n            'http://content.api.mnet.com/player/vodConfig',\n            video_id, 'Downloading vod config JSON', query={\n                'id': video_id,\n                'ctype': 'CLIP',\n                'stype': 'H',\n            })['data']['info']\n\n        title = info['title']\n\n        cdn_data = self._download_json(\n            info['cdn'], video_id, 'Downloading vod cdn JSON')['data'][0]\n        m3u8_url = cdn_data['url']\n        token = cdn_data.get('token')\n        if token and token != '-':\n            m3u8_url += '?' + token\n        formats = self._extract_wowza_formats(\n            m3u8_url, video_id, skip_protocols=['rtmp', 'rtsp', 'f4m'])\n        self._sort_formats(formats)\n\n        description = info.get('ment')\n        duration = parse_duration(info.get('time'))\n        timestamp = parse_iso8601(info.get('date'), delimiter=' ')\n        age_limit = info.get('adult')\n        if age_limit is not None:\n            age_limit = 0 if age_limit == 'N' else 18\n        thumbnails = [{\n            'id': thumb_format,\n            'url': thumb['url'],\n            'width': int_or_none(thumb.get('width')),\n            'height': int_or_none(thumb.get('height')),\n        } for thumb_format, thumb in info.get('cover', {}).items() if thumb.get('url')]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'timestamp': timestamp,\n            'age_limit': age_limit,\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# rtmp download\n# TODO: extract rtmp formats\n# no stype -> rtmp url\n# stype=H -> m3u8 url\n# stype=M -> mpd url\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n)\n\n\nclass MnetIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?mnet\\.(?:com|interest\\.me)/tv/vod/(?:.*?\\bclip_id=)?(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.mnet.com/tv/vod/171008',\n        'info_dict': {\n            'id': '171008',\n            'title': 'SS_\uc774\ud574\uc778@\ud788\ub4e0\ubc15\uc2a4',\n            'description': 'md5:b9efa592c3918b615ba69fe9f8a05c55',\n            'duration': 88,\n            'upload_date': '20151231',\n            'timestamp': 1451564040,\n            'age_limit': 0,\n            'thumbnails': 'mincount:5',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'ext': 'flv',\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://mnet.interest.me/tv/vod/172790',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.mnet.com/tv/vod/vod_view.asp?clip_id=172790&tabMenu=',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        # TODO: extract rtmp formats\n        # no stype -> rtmp url\n        # stype=H -> m3u8 url\n        # stype=M -> mpd url\n        info = self._download_json(\n            'http://content.api.mnet.com/player/vodConfig',\n            video_id, 'Downloading vod config JSON', query={\n                'id': video_id,\n                'ctype': 'CLIP',\n                'stype': 'H',\n            })['data']['info']\n\n        title = info['title']\n\n        cdn_data = self._download_json(\n            info['cdn'], video_id, 'Downloading vod cdn JSON')['data'][0]\n        m3u8_url = cdn_data['url']\n        token = cdn_data.get('token')\n        if token and token != '-':\n            m3u8_url += '?' + token\n        formats = self._extract_wowza_formats(\n            m3u8_url, video_id, skip_protocols=['rtmp', 'rtsp', 'f4m'])\n        self._sort_formats(formats)\n\n        description = info.get('ment')\n        duration = parse_duration(info.get('time'))\n        timestamp = parse_iso8601(info.get('date'), delimiter=' ')\n        age_limit = info.get('adult')\n        if age_limit is not None:\n            age_limit = 0 if age_limit == 'N' else 18\n        thumbnails = [{\n            'id': thumb_format,\n            'url': thumb['url'],\n            'width': int_or_none(thumb.get('width')),\n            'height': int_or_none(thumb.get('height')),\n        } for thumb_format, thumb in info.get('cover', {}).items() if thumb.get('url')]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'timestamp': timestamp,\n            'age_limit': age_limit,\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "mnet.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/mnet.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}