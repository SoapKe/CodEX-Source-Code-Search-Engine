{"author": "rg3", "code": "\n\nfrom __future__ import unicode_literals\n\n\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nimport random\nimport subprocess\n\nfrom test.helper import (\n    FakeYDL,\n    get_params,\n)\nfrom youtube_dl.compat import (\n    compat_str,\n    compat_urllib_request,\n)\n\n\nclass TestMultipleSocks(unittest.TestCase):\n    @staticmethod\n    def _check_params(attrs):\n        params = get_params()\n        for attr in attrs:\n            if attr not in params:\n                print('Missing %s. Skipping.' % attr)\n                return\n        return params\n\n    def test_proxy_http(self):\n        params = self._check_params(['primary_proxy', 'primary_server_ip'])\n        if params is None:\n            return\n        ydl = FakeYDL({\n            'proxy': params['primary_proxy']\n        })\n        self.assertEqual(\n            ydl.urlopen('http://yt-dl.org/ip').read().decode('utf-8'),\n            params['primary_server_ip'])\n\n    def test_proxy_https(self):\n        params = self._check_params(['primary_proxy', 'primary_server_ip'])\n        if params is None:\n            return\n        ydl = FakeYDL({\n            'proxy': params['primary_proxy']\n        })\n        self.assertEqual(\n            ydl.urlopen('https://yt-dl.org/ip').read().decode('utf-8'),\n            params['primary_server_ip'])\n\n    def test_secondary_proxy_http(self):\n        params = self._check_params(['secondary_proxy', 'secondary_server_ip'])\n        if params is None:\n            return\n        ydl = FakeYDL()\n        req = compat_urllib_request.Request('http://yt-dl.org/ip')\n        req.add_header('Ytdl-request-proxy', params['secondary_proxy'])\n        self.assertEqual(\n            ydl.urlopen(req).read().decode('utf-8'),\n            params['secondary_server_ip'])\n\n    def test_secondary_proxy_https(self):\n        params = self._check_params(['secondary_proxy', 'secondary_server_ip'])\n        if params is None:\n            return\n        ydl = FakeYDL()\n        req = compat_urllib_request.Request('https://yt-dl.org/ip')\n        req.add_header('Ytdl-request-proxy', params['secondary_proxy'])\n        self.assertEqual(\n            ydl.urlopen(req).read().decode('utf-8'),\n            params['secondary_server_ip'])\n\n\nclass TestSocks(unittest.TestCase):\n    _SKIP_SOCKS_TEST = True\n\n    def setUp(self):\n        if self._SKIP_SOCKS_TEST:\n            return\n\n        self.port = random.randint(20000, 30000)\n        self.server_process = subprocess.Popen([\n            'srelay', '-f', '-i', '127.0.0.1:%d' % self.port],\n            stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n    def tearDown(self):\n        if self._SKIP_SOCKS_TEST:\n            return\n\n        self.server_process.terminate()\n        self.server_process.communicate()\n\n    def _get_ip(self, protocol):\n        if self._SKIP_SOCKS_TEST:\n            return '127.0.0.1'\n\n        ydl = FakeYDL({\n            'proxy': '%s://127.0.0.1:%d' % (protocol, self.port),\n        })\n        return ydl.urlopen('http://yt-dl.org/ip').read().decode('utf-8')\n\n    def test_socks4(self):\n        self.assertTrue(isinstance(self._get_ip('socks4'), compat_str))\n\n    def test_socks4a(self):\n        self.assertTrue(isinstance(self._get_ip('socks4a'), compat_str))\n\n    def test_socks5(self):\n        self.assertTrue(isinstance(self._get_ip('socks5'), compat_str))\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "#!/usr/bin/env python\n# coding: utf-8\n# Allow direct execution\n", "content": "#!/usr/bin/env python\n# coding: utf-8\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nimport random\nimport subprocess\n\nfrom test.helper import (\n    FakeYDL,\n    get_params,\n)\nfrom youtube_dl.compat import (\n    compat_str,\n    compat_urllib_request,\n)\n\n\nclass TestMultipleSocks(unittest.TestCase):\n    @staticmethod\n    def _check_params(attrs):\n        params = get_params()\n        for attr in attrs:\n            if attr not in params:\n                print('Missing %s. Skipping.' % attr)\n                return\n        return params\n\n    def test_proxy_http(self):\n        params = self._check_params(['primary_proxy', 'primary_server_ip'])\n        if params is None:\n            return\n        ydl = FakeYDL({\n            'proxy': params['primary_proxy']\n        })\n        self.assertEqual(\n            ydl.urlopen('http://yt-dl.org/ip').read().decode('utf-8'),\n            params['primary_server_ip'])\n\n    def test_proxy_https(self):\n        params = self._check_params(['primary_proxy', 'primary_server_ip'])\n        if params is None:\n            return\n        ydl = FakeYDL({\n            'proxy': params['primary_proxy']\n        })\n        self.assertEqual(\n            ydl.urlopen('https://yt-dl.org/ip').read().decode('utf-8'),\n            params['primary_server_ip'])\n\n    def test_secondary_proxy_http(self):\n        params = self._check_params(['secondary_proxy', 'secondary_server_ip'])\n        if params is None:\n            return\n        ydl = FakeYDL()\n        req = compat_urllib_request.Request('http://yt-dl.org/ip')\n        req.add_header('Ytdl-request-proxy', params['secondary_proxy'])\n        self.assertEqual(\n            ydl.urlopen(req).read().decode('utf-8'),\n            params['secondary_server_ip'])\n\n    def test_secondary_proxy_https(self):\n        params = self._check_params(['secondary_proxy', 'secondary_server_ip'])\n        if params is None:\n            return\n        ydl = FakeYDL()\n        req = compat_urllib_request.Request('https://yt-dl.org/ip')\n        req.add_header('Ytdl-request-proxy', params['secondary_proxy'])\n        self.assertEqual(\n            ydl.urlopen(req).read().decode('utf-8'),\n            params['secondary_server_ip'])\n\n\nclass TestSocks(unittest.TestCase):\n    _SKIP_SOCKS_TEST = True\n\n    def setUp(self):\n        if self._SKIP_SOCKS_TEST:\n            return\n\n        self.port = random.randint(20000, 30000)\n        self.server_process = subprocess.Popen([\n            'srelay', '-f', '-i', '127.0.0.1:%d' % self.port],\n            stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n    def tearDown(self):\n        if self._SKIP_SOCKS_TEST:\n            return\n\n        self.server_process.terminate()\n        self.server_process.communicate()\n\n    def _get_ip(self, protocol):\n        if self._SKIP_SOCKS_TEST:\n            return '127.0.0.1'\n\n        ydl = FakeYDL({\n            'proxy': '%s://127.0.0.1:%d' % (protocol, self.port),\n        })\n        return ydl.urlopen('http://yt-dl.org/ip').read().decode('utf-8')\n\n    def test_socks4(self):\n        self.assertTrue(isinstance(self._get_ip('socks4'), compat_str))\n\n    def test_socks4a(self):\n        self.assertTrue(isinstance(self._get_ip('socks4a'), compat_str))\n\n    def test_socks5(self):\n        self.assertTrue(isinstance(self._get_ip('socks5'), compat_str))\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "test_socks.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/test/test_socks.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}