{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\"\"\"Generate predictions for a Threshold Crossing Event using a trained model.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport argparse\nimport sys\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport tensorflow as tf\n\nfrom astronet import models\nfrom astronet.data import preprocess\nfrom astronet.util import config_util\nfrom astronet.util import configdict\nfrom astronet.util import estimator_util\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument(\n    \"--model\", type=str, required=True, help=\"Name of the model class.\")\n\nparser.add_argument(\n    \"--config_name\",\n    type=str,\n    help=\"Name of the model and training configuration. Exactly one of \"\n    \"--config_name or --config_json is required.\")\n\nparser.add_argument(\n    \"--config_json\",\n    type=str,\n    help=\"JSON string or JSON file containing the model and training \"\n    \"configuration. Exactly one of --config_name or --config_json is required.\")\n\nparser.add_argument(\n    \"--model_dir\",\n    type=str,\n    required=True,\n    help=\"Directory containing a model checkpoint.\")\n\nparser.add_argument(\n    \"--kepler_data_dir\",\n    type=str,\n    required=True,\n    help=\"Base folder containing Kepler data.\")\n\nparser.add_argument(\n    \"--kepler_id\",\n    type=int,\n    required=True,\n    help=\"Kepler ID of the target star.\")\n\nparser.add_argument(\n    \"--period\", type=float, required=True, help=\"Period of the TCE, in days.\")\n\nparser.add_argument(\"--t0\", type=float, required=True, help=\"Epoch of the TCE.\")\n\nparser.add_argument(\n    \"--duration\",\n    type=float,\n    required=True,\n    help=\"Duration of the TCE, in days.\")\n\nparser.add_argument(\n    \"--output_image_file\",\n    type=str,\n    help=\"If specified, path to an output image file containing feature plots. \"\n    \"Must end in a valid image extension, e.g. png.\")\n\n\ndef _process_tce(feature_config):\n  \"\"\"Reads and process the input features of a Threshold Crossing Event.\n\n  Args:\n    feature_config: ConfigDict containing the feature configurations.\n\n  Returns:\n    A dictionary of processed light curve features.\n\n  Raises:\n    ValueError: If feature_config contains features other than 'global_view'\n    and 'local_view'.\n  \"\"\"\n  if not {\"global_view\", \"local_view\"}.issuperset(feature_config.keys()):\n    raise ValueError(\n        \"Only 'global_view' and 'local_view' features are supported.\")\n\n   Read and process the light curve.\n  time, flux = preprocess.read_and_process_light_curve(FLAGS.kepler_id,\n                                                       FLAGS.kepler_data_dir)\n  time, flux = preprocess.phase_fold_and_sort_light_curve(\n      time, flux, FLAGS.period, FLAGS.t0)\n\n   Generate the local and global views.\n  features = {}\n\n  if \"global_view\" in feature_config:\n    global_view = preprocess.global_view(time, flux, FLAGS.period)\n     Add a batch dimension.\n    features[\"global_view\"] = np.expand_dims(global_view, 0)\n\n  if \"local_view\" in feature_config:\n    local_view = preprocess.local_view(time, flux, FLAGS.period, FLAGS.duration)\n     Add a batch dimension.\n    features[\"local_view\"] = np.expand_dims(local_view, 0)\n\n   Possibly save plots.\n  if FLAGS.output_image_file:\n    ncols = len(features)\n    fig, axes = plt.subplots(1, ncols, figsize=(10 * ncols, 5), squeeze=False)\n\n    for i, name in enumerate(sorted(features)):\n      ax = axes[0][i]\n      ax.plot(features[name][0], \".\")\n      ax.set_title(name)\n      ax.set_xlabel(\"Bucketized Time (days)\")\n      ax.set_ylabel(\"Normalized Flux\")\n\n    fig.tight_layout()\n    fig.savefig(FLAGS.output_image_file, bbox_inches=\"tight\")\n\n  return features\n\n\ndef main(_):\n  model_class = models.get_model_class(FLAGS.model)\n\n   Look up the model configuration.\n  assert (FLAGS.config_name is None) != (FLAGS.config_json is None), (\n      \"Exactly one of --config_name or --config_json is required.\")\n  config = (\n      models.get_model_config(FLAGS.model, FLAGS.config_name)\n      if FLAGS.config_name else config_util.parse_json(FLAGS.config_json))\n  config = configdict.ConfigDict(config)\n\n   Create the estimator.\n  estimator = estimator_util.create_estimator(\n      model_class, config.hparams, model_dir=FLAGS.model_dir)\n\n   Read and process the input features.\n  features = _process_tce(config.inputs.features)\n\n   Create an input function.\n  def input_fn():\n    return {\n        \"time_series_features\":\n            tf.estimator.inputs.numpy_input_fn(\n                features, batch_size=1, shuffle=False, queue_capacity=1)()\n    }\n\n   Generate the predictions.\n  for predictions in estimator.predict(input_fn):\n    assert len(predictions) == 1\n    print(\"Prediction:\", predictions[0])\n\n\nif __name__ == \"__main__\":\n  tf.logging.set_verbosity(tf.logging.INFO)\n  FLAGS, unparsed = parser.parse_known_args()\n  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)\n", "comments": "   generate predictions threshold crossing event using trained model        future   import absolute import   future   import division   future   import print function  import argparse import sys  import matplotlib pyplot plt import numpy np import tensorflow tf  astronet import models astronet data import preprocess astronet util import config util astronet util import configdict astronet util import estimator util  parser   argparse argumentparser()  parser add argument(        model   type str  required true  help  name model class  )  parser add argument(        config name       type str      help  name model training configuration  exactly one          config name   config json required  )  parser add argument(        config json       type str      help  json string json file containing model training        configuration  exactly one   config name   config json required  )  parser add argument(        model dir       type str      required true      help  directory containing model checkpoint  )  parser add argument(        kepler data dir       type str      required true      help  base folder containing kepler data  )  parser add argument(        kepler id       type int      required true      help  kepler id target star  )  parser add argument(        period   type float  required true  help  period tce  days  )  parser add argument(   t0   type float  required true  help  epoch tce  )  parser add argument(        duration       type float      required true      help  duration tce  days  )  parser add argument(        output image file       type str      help  if specified  path output image file containing feature plots         must end valid image extension  e g  png  )   def  process tce(feature config)       reads process input features threshold crossing event     args      feature config  configdict containing feature configurations     returns      a dictionary processed light curve features     raises      valueerror  if feature config contains features  global view       local view            copyright 2018 the tensorflow authors        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license     read process light curve     generate local global views     add batch dimension     add batch dimension     possibly save plots     look model configuration     create estimator     read process input features     create input function     generate predictions  ", "content": "# Copyright 2018 The TensorFlow Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Generate predictions for a Threshold Crossing Event using a trained model.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport argparse\nimport sys\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport tensorflow as tf\n\nfrom astronet import models\nfrom astronet.data import preprocess\nfrom astronet.util import config_util\nfrom astronet.util import configdict\nfrom astronet.util import estimator_util\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument(\n    \"--model\", type=str, required=True, help=\"Name of the model class.\")\n\nparser.add_argument(\n    \"--config_name\",\n    type=str,\n    help=\"Name of the model and training configuration. Exactly one of \"\n    \"--config_name or --config_json is required.\")\n\nparser.add_argument(\n    \"--config_json\",\n    type=str,\n    help=\"JSON string or JSON file containing the model and training \"\n    \"configuration. Exactly one of --config_name or --config_json is required.\")\n\nparser.add_argument(\n    \"--model_dir\",\n    type=str,\n    required=True,\n    help=\"Directory containing a model checkpoint.\")\n\nparser.add_argument(\n    \"--kepler_data_dir\",\n    type=str,\n    required=True,\n    help=\"Base folder containing Kepler data.\")\n\nparser.add_argument(\n    \"--kepler_id\",\n    type=int,\n    required=True,\n    help=\"Kepler ID of the target star.\")\n\nparser.add_argument(\n    \"--period\", type=float, required=True, help=\"Period of the TCE, in days.\")\n\nparser.add_argument(\"--t0\", type=float, required=True, help=\"Epoch of the TCE.\")\n\nparser.add_argument(\n    \"--duration\",\n    type=float,\n    required=True,\n    help=\"Duration of the TCE, in days.\")\n\nparser.add_argument(\n    \"--output_image_file\",\n    type=str,\n    help=\"If specified, path to an output image file containing feature plots. \"\n    \"Must end in a valid image extension, e.g. png.\")\n\n\ndef _process_tce(feature_config):\n  \"\"\"Reads and process the input features of a Threshold Crossing Event.\n\n  Args:\n    feature_config: ConfigDict containing the feature configurations.\n\n  Returns:\n    A dictionary of processed light curve features.\n\n  Raises:\n    ValueError: If feature_config contains features other than 'global_view'\n    and 'local_view'.\n  \"\"\"\n  if not {\"global_view\", \"local_view\"}.issuperset(feature_config.keys()):\n    raise ValueError(\n        \"Only 'global_view' and 'local_view' features are supported.\")\n\n  # Read and process the light curve.\n  time, flux = preprocess.read_and_process_light_curve(FLAGS.kepler_id,\n                                                       FLAGS.kepler_data_dir)\n  time, flux = preprocess.phase_fold_and_sort_light_curve(\n      time, flux, FLAGS.period, FLAGS.t0)\n\n  # Generate the local and global views.\n  features = {}\n\n  if \"global_view\" in feature_config:\n    global_view = preprocess.global_view(time, flux, FLAGS.period)\n    # Add a batch dimension.\n    features[\"global_view\"] = np.expand_dims(global_view, 0)\n\n  if \"local_view\" in feature_config:\n    local_view = preprocess.local_view(time, flux, FLAGS.period, FLAGS.duration)\n    # Add a batch dimension.\n    features[\"local_view\"] = np.expand_dims(local_view, 0)\n\n  # Possibly save plots.\n  if FLAGS.output_image_file:\n    ncols = len(features)\n    fig, axes = plt.subplots(1, ncols, figsize=(10 * ncols, 5), squeeze=False)\n\n    for i, name in enumerate(sorted(features)):\n      ax = axes[0][i]\n      ax.plot(features[name][0], \".\")\n      ax.set_title(name)\n      ax.set_xlabel(\"Bucketized Time (days)\")\n      ax.set_ylabel(\"Normalized Flux\")\n\n    fig.tight_layout()\n    fig.savefig(FLAGS.output_image_file, bbox_inches=\"tight\")\n\n  return features\n\n\ndef main(_):\n  model_class = models.get_model_class(FLAGS.model)\n\n  # Look up the model configuration.\n  assert (FLAGS.config_name is None) != (FLAGS.config_json is None), (\n      \"Exactly one of --config_name or --config_json is required.\")\n  config = (\n      models.get_model_config(FLAGS.model, FLAGS.config_name)\n      if FLAGS.config_name else config_util.parse_json(FLAGS.config_json))\n  config = configdict.ConfigDict(config)\n\n  # Create the estimator.\n  estimator = estimator_util.create_estimator(\n      model_class, config.hparams, model_dir=FLAGS.model_dir)\n\n  # Read and process the input features.\n  features = _process_tce(config.inputs.features)\n\n  # Create an input function.\n  def input_fn():\n    return {\n        \"time_series_features\":\n            tf.estimator.inputs.numpy_input_fn(\n                features, batch_size=1, shuffle=False, queue_capacity=1)()\n    }\n\n  # Generate the predictions.\n  for predictions in estimator.predict(input_fn):\n    assert len(predictions) == 1\n    print(\"Prediction:\", predictions[0])\n\n\nif __name__ == \"__main__\":\n  tf.logging.set_verbosity(tf.logging.INFO)\n  FLAGS, unparsed = parser.parse_known_args()\n  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)\n", "description": "Models and examples built with TensorFlow", "file_name": "predict.py", "id": "66a9472ab37e149888ffd1c870108651", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/astronet/astronet/predict.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}