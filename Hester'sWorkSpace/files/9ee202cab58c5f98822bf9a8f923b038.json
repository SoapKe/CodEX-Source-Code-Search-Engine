{"author": "keon", "code": "\"\"\"\nGiven an array of meeting time intervals consisting of\nstart and end times [[s1,e1],[s2,e2],...] (si < ei),\ndetermine if a person could attend all meetings.\n\nFor example,\nGiven [[0, 30],[5, 10],[15, 20]],\nreturn false.\n\"\"\"\n\n\ndef can_attend_meetings(intervals):\n    \"\"\"\n    :type intervals: List[Interval]\n    :rtype: bool\n    \"\"\"\n    intervals = sorted(intervals, key=lambda x: x.start)\n    for i in range(1, len(intervals)):\n        if intervals[i].start < intervals[i-1].end:\n            return False\n    return True\n", "comments": "    given array meeting time intervals consisting start end times   s1 e1   s2 e2       (si   ei)  determine person could attend meetings   for example  given   0  30   5  10   15  20    return false        def attend meetings(intervals)               type intervals  list interval       rtype  bool         ", "content": "\"\"\"\nGiven an array of meeting time intervals consisting of\nstart and end times [[s1,e1],[s2,e2],...] (si < ei),\ndetermine if a person could attend all meetings.\n\nFor example,\nGiven [[0, 30],[5, 10],[15, 20]],\nreturn false.\n\"\"\"\n\n\ndef can_attend_meetings(intervals):\n    \"\"\"\n    :type intervals: List[Interval]\n    :rtype: bool\n    \"\"\"\n    intervals = sorted(intervals, key=lambda x: x.start)\n    for i in range(1, len(intervals)):\n        if intervals[i].start < intervals[i-1].end:\n            return False\n    return True\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "meeting_rooms.py", "id": "9ee202cab58c5f98822bf9a8f923b038", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/keon-algorithms/keon-algorithms-abe4cb1/sort/meeting_rooms.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:56:36Z", "url": "https://github.com/keon/algorithms", "wiki": true}