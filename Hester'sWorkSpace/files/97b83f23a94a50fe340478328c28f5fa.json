{"author": "django", "code": "from django.db.models import CharField\nfrom django.db.models.functions import LTrim, RTrim, Trim\nfrom django.test import TestCase\n\nfrom .models import Author\n\n\nclass TrimTests(TestCase):\n    def test_trim(self):\n        Author.objects.create(name='  John ', alias='j')\n        Author.objects.create(name='Rhonda', alias='r')\n        authors = Author.objects.annotate(\n            ltrim=LTrim('name'),\n            rtrim=RTrim('name'),\n            trim=Trim('name'),\n        )\n        self.assertQuerysetEqual(\n            authors.order_by('alias'), [\n                ('John ', '  John', 'John'),\n                ('Rhonda', 'Rhonda', 'Rhonda'),\n            ],\n            lambda a: (a.ltrim, a.rtrim, a.trim)\n        )\n\n    def test_trim_transform(self):\n        Author.objects.create(name=' John  ')\n        Author.objects.create(name='Rhonda')\n        tests = (\n            (LTrim, 'John  '),\n            (RTrim, ' John'),\n            (Trim, 'John'),\n        )\n        for transform, trimmed_name in tests:\n            with self.subTest(transform=transform):\n                try:\n                    CharField.register_lookup(transform)\n                    authors = Author.objects.filter(**{'name__%s' % transform.lookup_name: trimmed_name})\n                    self.assertQuerysetEqual(authors, [' John  '], lambda a: a.name)\n                finally:\n                    CharField._unregister_lookup(transform)\n", "comments": "", "content": "from django.db.models import CharField\nfrom django.db.models.functions import LTrim, RTrim, Trim\nfrom django.test import TestCase\n\nfrom .models import Author\n\n\nclass TrimTests(TestCase):\n    def test_trim(self):\n        Author.objects.create(name='  John ', alias='j')\n        Author.objects.create(name='Rhonda', alias='r')\n        authors = Author.objects.annotate(\n            ltrim=LTrim('name'),\n            rtrim=RTrim('name'),\n            trim=Trim('name'),\n        )\n        self.assertQuerysetEqual(\n            authors.order_by('alias'), [\n                ('John ', '  John', 'John'),\n                ('Rhonda', 'Rhonda', 'Rhonda'),\n            ],\n            lambda a: (a.ltrim, a.rtrim, a.trim)\n        )\n\n    def test_trim_transform(self):\n        Author.objects.create(name=' John  ')\n        Author.objects.create(name='Rhonda')\n        tests = (\n            (LTrim, 'John  '),\n            (RTrim, ' John'),\n            (Trim, 'John'),\n        )\n        for transform, trimmed_name in tests:\n            with self.subTest(transform=transform):\n                try:\n                    CharField.register_lookup(transform)\n                    authors = Author.objects.filter(**{'name__%s' % transform.lookup_name: trimmed_name})\n                    self.assertQuerysetEqual(authors, [' John  '], lambda a: a.name)\n                finally:\n                    CharField._unregister_lookup(transform)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_trim.py", "id": "97b83f23a94a50fe340478328c28f5fa", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/db_functions/test_trim.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}