{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport logging\nimport random\nimport re\nimport string\n\nimport requests\n\nfrom odoo import api, models, _\nfrom odoo.exceptions import UserError\n\nfrom ..py_etherpad import EtherpadLiteClient\n\n_logger = logging.getLogger(__name__)\n\n\nclass PadCommon(models.AbstractModel):\n    _name = 'pad.common'\n\n    @api.model\n    def pad_is_configured(self):\n        return bool(self.env.user.company_id.pad_server)\n\n    @api.model\n    def pad_generate_url(self):\n        company = self.env.user.sudo().company_id\n\n        pad = {\n            \"server\": company.pad_server,\n            \"key\": company.pad_key,\n        }\n\n        \n        if not pad[\"server\"]:\n            return pad\n        if not pad[\"server\"].startswith('http'):\n            pad[\"server\"] = 'http://' + pad[\"server\"]\n        pad[\"server\"] = pad[\"server\"].rstrip('/')\n        \n        s = string.ascii_uppercase + string.digits\n        salt = ''.join([s[random.SystemRandom().randint(0, len(s) - 1)] for i in range(10)])\n        \n        \n        path = '-%s-%s' % (self._name, salt)\n        path = '%s%s' % (self.env.cr.dbname.replace('_', '-')[0:50 - len(path)], path)\n        \n        url = '%s/p/%s' % (pad[\"server\"], path)\n\n        \n        if self.env.context.get('field_name') and self.env.context.get('model') and self.env.context.get('object_id'):\n            myPad = EtherpadLiteClient(pad[\"key\"], pad[\"server\"] + '/api')\n            try:\n                myPad.createPad(path)\n            except IOError:\n                raise UserError(_(\"Pad creation failed, either there is a problem with your pad server URL or with your connection.\"))\n\n            \n            model = self.env[self.env.context[\"model\"]]\n            field = model._fields[self.env.context['field_name']]\n            real_field = field.pad_content_field\n\n            \n            for record in model.browse([self.env.context[\"object_id\"]]):\n                if record[real_field]:\n                    myPad.setHtmlFallbackText(path, record[real_field])\n\n        return {\n            \"server\": pad[\"server\"],\n            \"path\": path,\n            \"url\": url,\n        }\n\n    @api.model\n    def pad_get_content(self, url):\n        company = self.env.user.sudo().company_id\n        myPad = EtherpadLiteClient(company.pad_key, company.pad_server + '/api')\n        content = ''\n        if url:\n            split_url = url.split('/p/')\n            path = len(split_url) == 2 and split_url[1]\n            try:\n                content = myPad.getHtml(path).get('html', '')\n            except IOError:\n                _logger.warning('Http Error: the credentials might be absent for url: \"%s\". Falling back.' % url)\n                try:\n                    r = requests.get('%s/export/html' % url)\n                    r.raise_for_status()\n                except Exception:\n                    _logger.warning(\"No pad found with url '%s'.\", url)\n                else:\n                    mo = re.search('<body>(.*)</body>', r.content.decode(), re.DOTALL)\n                    if mo:\n                        content = mo.group(1)\n\n        return content\n\n    \n    \n\n    @api.multi\n    def write(self, vals):\n        self._set_field_to_pad(vals)\n        self._set_pad_to_field(vals)\n        return super(PadCommon, self).write(vals)\n\n    @api.model\n    def create(self, vals):\n        \n        \n        self._set_pad_to_field(vals)\n        pad = super(PadCommon, self).create(vals)\n\n        # Case of a programmatical creation (e.g. copy): we receive the field content, so we need\n        \n        if self.env.context.get('pad_no_create', False):\n            return pad\n        for k, field in self._fields.items():\n            if hasattr(field, 'pad_content_field') and k not in vals:\n                ctx = {\n                    'model': self._name,\n                    'field_name': k,\n                    'object_id': pad.id,\n                }\n                pad_info = self.with_context(**ctx).pad_generate_url()\n                pad[k] = pad_info.get('url')\n        return pad\n\n    def _set_field_to_pad(self, vals):\n        \n        for k, field in self._fields.items():\n            if hasattr(field, 'pad_content_field') and vals.get(field.pad_content_field) and self[k]:\n                company = self.env.user.sudo().company_id\n                myPad = EtherpadLiteClient(company.pad_key, company.pad_server + '/api')\n                path = self[k].split('/p/')[1]\n                myPad.setHtmlFallbackText(path, vals[field.pad_content_field])\n\n    def _set_pad_to_field(self, vals):\n        \n        for k, v in list(vals.items()):\n            field = self._fields.get(k)\n            if hasattr(field, 'pad_content_field'):\n                vals[field.pad_content_field] = self.pad_get_content(v)\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     make sure pad server form http   hostname    generate salt    path    etherpad hardcodes pad id length limit 50    contruct url    create content    get attr field model    get content real field    todo    reverse engineer protocol sethtml without using api key    case regular creation  receive pad url  need update    corresponding field    case programmatical creation (e g  copy)  receive field content  need    create corresponding pad    update pad  pad content field  modified    update  pad content field  pad modified ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport logging\nimport random\nimport re\nimport string\n\nimport requests\n\nfrom odoo import api, models, _\nfrom odoo.exceptions import UserError\n\nfrom ..py_etherpad import EtherpadLiteClient\n\n_logger = logging.getLogger(__name__)\n\n\nclass PadCommon(models.AbstractModel):\n    _name = 'pad.common'\n\n    @api.model\n    def pad_is_configured(self):\n        return bool(self.env.user.company_id.pad_server)\n\n    @api.model\n    def pad_generate_url(self):\n        company = self.env.user.sudo().company_id\n\n        pad = {\n            \"server\": company.pad_server,\n            \"key\": company.pad_key,\n        }\n\n        # make sure pad server in the form of http://hostname\n        if not pad[\"server\"]:\n            return pad\n        if not pad[\"server\"].startswith('http'):\n            pad[\"server\"] = 'http://' + pad[\"server\"]\n        pad[\"server\"] = pad[\"server\"].rstrip('/')\n        # generate a salt\n        s = string.ascii_uppercase + string.digits\n        salt = ''.join([s[random.SystemRandom().randint(0, len(s) - 1)] for i in range(10)])\n        # path\n        # etherpad hardcodes pad id length limit to 50\n        path = '-%s-%s' % (self._name, salt)\n        path = '%s%s' % (self.env.cr.dbname.replace('_', '-')[0:50 - len(path)], path)\n        # contruct the url\n        url = '%s/p/%s' % (pad[\"server\"], path)\n\n        # if create with content\n        if self.env.context.get('field_name') and self.env.context.get('model') and self.env.context.get('object_id'):\n            myPad = EtherpadLiteClient(pad[\"key\"], pad[\"server\"] + '/api')\n            try:\n                myPad.createPad(path)\n            except IOError:\n                raise UserError(_(\"Pad creation failed, either there is a problem with your pad server URL or with your connection.\"))\n\n            # get attr on the field model\n            model = self.env[self.env.context[\"model\"]]\n            field = model._fields[self.env.context['field_name']]\n            real_field = field.pad_content_field\n\n            # get content of the real field\n            for record in model.browse([self.env.context[\"object_id\"]]):\n                if record[real_field]:\n                    myPad.setHtmlFallbackText(path, record[real_field])\n\n        return {\n            \"server\": pad[\"server\"],\n            \"path\": path,\n            \"url\": url,\n        }\n\n    @api.model\n    def pad_get_content(self, url):\n        company = self.env.user.sudo().company_id\n        myPad = EtherpadLiteClient(company.pad_key, company.pad_server + '/api')\n        content = ''\n        if url:\n            split_url = url.split('/p/')\n            path = len(split_url) == 2 and split_url[1]\n            try:\n                content = myPad.getHtml(path).get('html', '')\n            except IOError:\n                _logger.warning('Http Error: the credentials might be absent for url: \"%s\". Falling back.' % url)\n                try:\n                    r = requests.get('%s/export/html' % url)\n                    r.raise_for_status()\n                except Exception:\n                    _logger.warning(\"No pad found with url '%s'.\", url)\n                else:\n                    mo = re.search('<body>(.*)</body>', r.content.decode(), re.DOTALL)\n                    if mo:\n                        content = mo.group(1)\n\n        return content\n\n    # TODO\n    # reverse engineer protocol to be setHtml without using the api key\n\n    @api.multi\n    def write(self, vals):\n        self._set_field_to_pad(vals)\n        self._set_pad_to_field(vals)\n        return super(PadCommon, self).write(vals)\n\n    @api.model\n    def create(self, vals):\n        # Case of a regular creation: we receive the pad url, so we need to update the\n        # corresponding field\n        self._set_pad_to_field(vals)\n        pad = super(PadCommon, self).create(vals)\n\n        # Case of a programmatical creation (e.g. copy): we receive the field content, so we need\n        # to create the corresponding pad\n        if self.env.context.get('pad_no_create', False):\n            return pad\n        for k, field in self._fields.items():\n            if hasattr(field, 'pad_content_field') and k not in vals:\n                ctx = {\n                    'model': self._name,\n                    'field_name': k,\n                    'object_id': pad.id,\n                }\n                pad_info = self.with_context(**ctx).pad_generate_url()\n                pad[k] = pad_info.get('url')\n        return pad\n\n    def _set_field_to_pad(self, vals):\n        # Update the pad if the `pad_content_field` is modified\n        for k, field in self._fields.items():\n            if hasattr(field, 'pad_content_field') and vals.get(field.pad_content_field) and self[k]:\n                company = self.env.user.sudo().company_id\n                myPad = EtherpadLiteClient(company.pad_key, company.pad_server + '/api')\n                path = self[k].split('/p/')[1]\n                myPad.setHtmlFallbackText(path, vals[field.pad_content_field])\n\n    def _set_pad_to_field(self, vals):\n        # Update the `pad_content_field` if the pad is modified\n        for k, v in list(vals.items()):\n            field = self._fields.get(k)\n            if hasattr(field, 'pad_content_field'):\n                vals[field.pad_content_field] = self.pad_get_content(v)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "pad.py", "id": "2a9c30557a55c6f83e8e31c7f0400654", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/pad/models/pad.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}