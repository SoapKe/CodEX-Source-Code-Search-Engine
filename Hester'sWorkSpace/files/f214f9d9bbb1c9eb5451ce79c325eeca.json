{"author": "rg3", "code": "from __future__ import unicode_literals\n\ntry:\n    from .lazy_extractors import *\n    from .lazy_extractors import _ALL_CLASSES\n    _LAZY_LOADER = True\nexcept ImportError:\n    _LAZY_LOADER = False\n    from .extractors import *\n\n    _ALL_CLASSES = [\n        klass\n        for name, klass in globals().items()\n        if name.endswith('IE') and name != 'GenericIE'\n    ]\n    _ALL_CLASSES.append(GenericIE)\n\n\ndef gen_extractor_classes():\n    \n    return globals()[ie_name + 'IE']\n", "comments": " Return a list of supported extractors.\n    The order does matter; the first extractor matched is the one handling the URL.\n    \"\"\"\n    return _ALL_CLASSES\n\n\ndef gen_extractors():\n    \"\"\" Return a list of an instance of every supported extractor.\n    The order does matter; the first extractor matched is the one handling the URL.\n    \"\"\"\n    return [klass() for klass in gen_extractor_classes()]\n\n\ndef list_extractors(age_limit):\n    \"\"\"\n    Return a list of extractors that are suitable for the given age,\n    sorted by extractor ID.\n    \"\"\"\n\n    return sorted(\n        filter(lambda ie: ie.is_suitable(age_limit), gen_extractors()),\n        key=lambda ie: ie.IE_NAME.lower())\n\n\ndef get_info_extractor(ie_name):\n    \"\"\"Returns the info extractor class with the given ie_name\ne\n", "content": "from __future__ import unicode_literals\n\ntry:\n    from .lazy_extractors import *\n    from .lazy_extractors import _ALL_CLASSES\n    _LAZY_LOADER = True\nexcept ImportError:\n    _LAZY_LOADER = False\n    from .extractors import *\n\n    _ALL_CLASSES = [\n        klass\n        for name, klass in globals().items()\n        if name.endswith('IE') and name != 'GenericIE'\n    ]\n    _ALL_CLASSES.append(GenericIE)\n\n\ndef gen_extractor_classes():\n    \"\"\" Return a list of supported extractors.\n    The order does matter; the first extractor matched is the one handling the URL.\n    \"\"\"\n    return _ALL_CLASSES\n\n\ndef gen_extractors():\n    \"\"\" Return a list of an instance of every supported extractor.\n    The order does matter; the first extractor matched is the one handling the URL.\n    \"\"\"\n    return [klass() for klass in gen_extractor_classes()]\n\n\ndef list_extractors(age_limit):\n    \"\"\"\n    Return a list of extractors that are suitable for the given age,\n    sorted by extractor ID.\n    \"\"\"\n\n    return sorted(\n        filter(lambda ie: ie.is_suitable(age_limit), gen_extractors()),\n        key=lambda ie: ie.IE_NAME.lower())\n\n\ndef get_info_extractor(ie_name):\n    \"\"\"Returns the info extractor class with the given ie_name\"\"\"\n    return globals()[ie_name + 'IE']\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "__init__.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/__init__.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}