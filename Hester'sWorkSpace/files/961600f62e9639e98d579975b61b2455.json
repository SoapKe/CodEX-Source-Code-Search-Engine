{"author": "tgalal", "code": "from yowsup.structs import ProtocolEntity, ProtocolTreeNode\nclass IqProtocolEntity(ProtocolEntity):\n\n    |\n\n    TYPE_SET = \"set\"\n    TYPE_GET = \"get\"\n    TYPE_ERROR = \"error\"\n    TYPE_RESULT = \"result\"\n\n    TYPES = (TYPE_SET, TYPE_GET, TYPE_RESULT, TYPE_ERROR)\n    def __init__(self, xmlns = None, _id = None, _type = None, to = None, _from = None):\n        super(IqProtocolEntity, self).__init__(\"iq\")\n\n        assert _type in self.__class__.TYPES, \"Iq of type %s is not implemented, can accept only (%s)\" % (_type,\" | \".join(self.__class__.TYPES))\n        assert not to or not _from, \"Can't set from and to at the same time\"\n        self._id = self._generateId(True) if _id is None else _id\n        self._from = _from\n        self._type = _type\n        self.xmlns = xmlns\n        self.to = to\n\n    def getId(self):\n        return self._id\n\n    def getType(self):\n        return self._type\n\n    def getXmlns(self):\n        return self.xmlns\n\n    def getFrom(self, full = True):\n        return self._from if full else self._from.split('@')[0]\n\n    def getTo(self):\n        return self.to\n    \n    def toProtocolTreeNode(self):\n        attribs = {\n            \"id\"          : self._id,\n            \"type\"        : self._type\n        }\n\n        if self.xmlns:\n            attribs[\"xmlns\"] = self.xmlns\n\n        if self.to:\n            attribs[\"to\"] = self.to\n        elif self._from:\n            attribs[\"from\"] = self._from\n\n        return self._createProtocolTreeNode(attribs, None, data = None)\n\n    def __str__(self):\n        out  = \"Iq:\\n\"\n        out += \"ID: %s\\n\" % self._id\n        out += \"Type: %s\\n\" % self._type\n        if self.xmlns:\n            out += \"xmlns: %s\\n\" % self.xmlns\n        if self.to:\n            out += \"to: %s\\n\" % self.to\n        elif self._from:\n            out += \"from: %s\\n\" % self._from\n        return out\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        return IqProtocolEntity(\n            node.getAttributeValue(\"xmlns\"),\n            node.getAttributeValue(\"id\"),\n            node.getAttributeValue(\"type\"),\n            node.getAttributeValue(\"to\"),\n            node.getAttributeValue(\"from\")\n            )\n", "comments": "         iq type    get   set    id    id    xmlns    xmlns       to       from           iq          ", "content": "from yowsup.structs import ProtocolEntity, ProtocolTreeNode\nclass IqProtocolEntity(ProtocolEntity):\n\n    '''\n    <iq type=\"{{get | set}}\" id=\"{{id}}\" xmlns=\"{{xmlns}}\" to=\"{{TO}}\" from=\"{{FROM}}\">\n    </iq>\n    '''\n\n    TYPE_SET = \"set\"\n    TYPE_GET = \"get\"\n    TYPE_ERROR = \"error\"\n    TYPE_RESULT = \"result\"\n\n    TYPES = (TYPE_SET, TYPE_GET, TYPE_RESULT, TYPE_ERROR)\n    def __init__(self, xmlns = None, _id = None, _type = None, to = None, _from = None):\n        super(IqProtocolEntity, self).__init__(\"iq\")\n\n        assert _type in self.__class__.TYPES, \"Iq of type %s is not implemented, can accept only (%s)\" % (_type,\" | \".join(self.__class__.TYPES))\n        assert not to or not _from, \"Can't set from and to at the same time\"\n        self._id = self._generateId(True) if _id is None else _id\n        self._from = _from\n        self._type = _type\n        self.xmlns = xmlns\n        self.to = to\n\n    def getId(self):\n        return self._id\n\n    def getType(self):\n        return self._type\n\n    def getXmlns(self):\n        return self.xmlns\n\n    def getFrom(self, full = True):\n        return self._from if full else self._from.split('@')[0]\n\n    def getTo(self):\n        return self.to\n    \n    def toProtocolTreeNode(self):\n        attribs = {\n            \"id\"          : self._id,\n            \"type\"        : self._type\n        }\n\n        if self.xmlns:\n            attribs[\"xmlns\"] = self.xmlns\n\n        if self.to:\n            attribs[\"to\"] = self.to\n        elif self._from:\n            attribs[\"from\"] = self._from\n\n        return self._createProtocolTreeNode(attribs, None, data = None)\n\n    def __str__(self):\n        out  = \"Iq:\\n\"\n        out += \"ID: %s\\n\" % self._id\n        out += \"Type: %s\\n\" % self._type\n        if self.xmlns:\n            out += \"xmlns: %s\\n\" % self.xmlns\n        if self.to:\n            out += \"to: %s\\n\" % self.to\n        elif self._from:\n            out += \"from: %s\\n\" % self._from\n        return out\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        return IqProtocolEntity(\n            node.getAttributeValue(\"xmlns\"),\n            node.getAttributeValue(\"id\"),\n            node.getAttributeValue(\"type\"),\n            node.getAttributeValue(\"to\"),\n            node.getAttributeValue(\"from\")\n            )\n", "description": "The python WhatsApp library", "file_name": "iq.py", "id": "961600f62e9639e98d579975b61b2455", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_iq/protocolentities/iq.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}