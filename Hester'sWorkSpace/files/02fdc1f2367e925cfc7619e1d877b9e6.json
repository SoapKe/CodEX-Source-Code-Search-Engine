{"author": "ansible", "code": "\n (c) 2016 Red Hat Inc.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.aruba import aruba_config\nfrom units.modules.utils import set_module_args\nfrom .aruba_module import TestArubaModule, load_fixture\n\n\nclass TestArubaConfigModule(TestArubaModule):\n\n    module = aruba_config\n\n    def setUp(self):\n        super(TestArubaConfigModule, self).setUp()\n\n        self.mock_get_config = patch('ansible.modules.network.aruba.aruba_config.get_config')\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch('ansible.modules.network.aruba.aruba_config.load_config')\n        self.load_config = self.mock_load_config.start()\n\n        self.mock_run_commands = patch('ansible.modules.network.aruba.aruba_config.run_commands')\n        self.run_commands = self.mock_run_commands.start()\n\n    def tearDown(self):\n        super(TestArubaConfigModule, self).tearDown()\n\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n        self.mock_run_commands.stop()\n\n    def load_fixtures(self, commands=None):\n        config_file = 'aruba_config_config.cfg'\n        self.get_config.return_value = load_fixture(config_file)\n        self.load_config.return_value = None\n\n    def test_aruba_config_unchanged(self):\n        src = load_fixture('aruba_config_config.cfg')\n        set_module_args(dict(src=src))\n        self.execute_module()\n\n    def test_aruba_config_unchanged_different_spacing(self):\n         Tab indented\n        set_module_args(dict(lines=['description test string'], parents=['interface GigabitEthernet0/0']))\n        self.execute_module(changed=False)\n         3 spaces indented\n        set_module_args(dict(lines=['essid \"blah\"'], parents=['wlan ssid-profile \"blah\"']))\n        self.execute_module(changed=False)\n\n    def test_aruba_config_src(self):\n        src = load_fixture('aruba_config_src.cfg')\n        set_module_args(dict(src=src))\n        commands = ['hostname foo', 'interface GigabitEthernet0/0',\n                    'no ip address']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_aruba_config_backup(self):\n        set_module_args(dict(backup=True))\n        result = self.execute_module()\n        self.assertIn('__backup__', result)\n\n    def test_aruba_config_save_always(self):\n        self.run_commands.return_value = \"Hostname foo\"\n        set_module_args(dict(save_when='always'))\n        self.execute_module(changed=True)\n        self.assertEqual(self.run_commands.call_count, 1)\n        self.assertEqual(self.get_config.call_count, 0)\n        self.assertEqual(self.load_config.call_count, 0)\n        args = self.run_commands.call_args[0][1]\n        self.assertIn('copy running-config startup-config', args)\n\n    def test_aruba_config_save_changed_true(self):\n        src = load_fixture('aruba_config_src.cfg')\n        set_module_args(dict(src=src, save_when='changed'))\n        commands = ['hostname foo', 'interface GigabitEthernet0/0',\n                    'no ip address']\n        self.execute_module(changed=True, commands=commands)\n         src = load_fixture('aruba_config_src.cfg')\n\n         set_module_args(dict(save_when='changed'))\n         commands = ['hostname changed']\n         self.execute_module(changed=False, commands=commands)\n        self.assertEqual(self.run_commands.call_count, 1)\n        self.assertEqual(self.get_config.call_count, 1)\n        self.assertEqual(self.load_config.call_count, 1)\n        args = self.run_commands.call_args[0][1]\n        self.assertIn('copy running-config startup-config', args)\n\n    def test_aruba_config_save_changed_false(self):\n        set_module_args(dict(save_when='changed'))\n        self.execute_module(changed=False)\n        self.assertEqual(self.run_commands.call_count, 0)\n        self.assertEqual(self.get_config.call_count, 0)\n        self.assertEqual(self.load_config.call_count, 0)\n\n    def test_aruba_config_lines_wo_parents(self):\n        set_module_args(dict(lines=['hostname foo']))\n        commands = ['hostname foo']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_aruba_config_lines_w_parents(self):\n        set_module_args(dict(lines=['shutdown'], parents=['interface GigabitEthernet0/0']))\n        commands = ['interface GigabitEthernet0/0', 'shutdown']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_aruba_config_before(self):\n        set_module_args(dict(lines=['hostname foo'], before=['test1', 'test2']))\n        commands = ['test1', 'test2', 'hostname foo']\n        self.execute_module(changed=True, commands=commands, sort=False)\n\n    def test_aruba_config_after(self):\n        set_module_args(dict(lines=['hostname foo'], after=['test1', 'test2']))\n        commands = ['hostname foo', 'test1', 'test2']\n        self.execute_module(changed=True, commands=commands, sort=False)\n\n    def test_aruba_config_before_after_no_change(self):\n        set_module_args(dict(lines=['hostname router'],\n                             before=['test1', 'test2'],\n                             after=['test3', 'test4']))\n        self.execute_module()\n\n    def test_aruba_config_config(self):\n        config = 'hostname localhost'\n        set_module_args(dict(lines=['hostname router'], config=config))\n        commands = ['hostname router']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_aruba_config_replace_block(self):\n        lines = ['description test string', 'test string']\n        parents = ['interface GigabitEthernet0/0']\n        set_module_args(dict(lines=lines, replace='block', parents=parents))\n        commands = parents + lines\n        self.execute_module(changed=True, commands=commands)\n\n    def test_aruba_config_force(self):\n        lines = ['hostname router']\n        set_module_args(dict(lines=lines, match='none'))\n        self.execute_module(changed=True, commands=lines)\n\n    def test_aruba_config_match_none(self):\n        lines = ['ip address 1.2.3.4 255.255.255.0', 'description test string']\n        parents = ['interface GigabitEthernet0/0']\n        set_module_args(dict(lines=lines, parents=parents, match='none'))\n        commands = parents + lines\n        self.execute_module(changed=True, commands=commands, sort=False)\n\n    def test_aruba_config_match_strict(self):\n        lines = ['ip address 1.2.3.4 255.255.255.0', 'description test string',\n                 'shutdown']\n        parents = ['interface GigabitEthernet0/0']\n        set_module_args(dict(lines=lines, parents=parents, match='strict'))\n        commands = parents + ['shutdown']\n        self.execute_module(changed=True, commands=commands, sort=False)\n\n    def test_aruba_config_match_exact(self):\n        lines = ['ip address 1.2.3.4 255.255.255.0', 'description test string',\n                 'shutdown']\n        parents = ['interface GigabitEthernet0/0']\n        set_module_args(dict(lines=lines, parents=parents, match='exact'))\n        commands = parents + lines\n        self.execute_module(changed=True, commands=commands, sort=False)\n\n    def test_aruba_encrypt_false(self):\n        set_module_args(dict(encrypt=False))\n        self.execute_module()\n        self.assertEqual(self.run_commands.call_count, 2)\n        args = self.run_commands.call_args_list\n        self.assertIn('encrypt disable', args[0][0])\n        self.assertIn('encrypt enable', args[1][0])\n", "comments": "     (c) 2016 red hat inc        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish    tab indented    3 spaces indented    src   load fixture( aruba config src cfg )    set module args(dict(save  changed ))    commands     hostname changed      self execute module(changed false  commands commands) ", "content": "#\n# (c) 2016 Red Hat Inc.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.aruba import aruba_config\nfrom units.modules.utils import set_module_args\nfrom .aruba_module import TestArubaModule, load_fixture\n\n\nclass TestArubaConfigModule(TestArubaModule):\n\n    module = aruba_config\n\n    def setUp(self):\n        super(TestArubaConfigModule, self).setUp()\n\n        self.mock_get_config = patch('ansible.modules.network.aruba.aruba_config.get_config')\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch('ansible.modules.network.aruba.aruba_config.load_config')\n        self.load_config = self.mock_load_config.start()\n\n        self.mock_run_commands = patch('ansible.modules.network.aruba.aruba_config.run_commands')\n        self.run_commands = self.mock_run_commands.start()\n\n    def tearDown(self):\n        super(TestArubaConfigModule, self).tearDown()\n\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n        self.mock_run_commands.stop()\n\n    def load_fixtures(self, commands=None):\n        config_file = 'aruba_config_config.cfg'\n        self.get_config.return_value = load_fixture(config_file)\n        self.load_config.return_value = None\n\n    def test_aruba_config_unchanged(self):\n        src = load_fixture('aruba_config_config.cfg')\n        set_module_args(dict(src=src))\n        self.execute_module()\n\n    def test_aruba_config_unchanged_different_spacing(self):\n        # Tab indented\n        set_module_args(dict(lines=['description test string'], parents=['interface GigabitEthernet0/0']))\n        self.execute_module(changed=False)\n        # 3 spaces indented\n        set_module_args(dict(lines=['essid \"blah\"'], parents=['wlan ssid-profile \"blah\"']))\n        self.execute_module(changed=False)\n\n    def test_aruba_config_src(self):\n        src = load_fixture('aruba_config_src.cfg')\n        set_module_args(dict(src=src))\n        commands = ['hostname foo', 'interface GigabitEthernet0/0',\n                    'no ip address']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_aruba_config_backup(self):\n        set_module_args(dict(backup=True))\n        result = self.execute_module()\n        self.assertIn('__backup__', result)\n\n    def test_aruba_config_save_always(self):\n        self.run_commands.return_value = \"Hostname foo\"\n        set_module_args(dict(save_when='always'))\n        self.execute_module(changed=True)\n        self.assertEqual(self.run_commands.call_count, 1)\n        self.assertEqual(self.get_config.call_count, 0)\n        self.assertEqual(self.load_config.call_count, 0)\n        args = self.run_commands.call_args[0][1]\n        self.assertIn('copy running-config startup-config', args)\n\n    def test_aruba_config_save_changed_true(self):\n        src = load_fixture('aruba_config_src.cfg')\n        set_module_args(dict(src=src, save_when='changed'))\n        commands = ['hostname foo', 'interface GigabitEthernet0/0',\n                    'no ip address']\n        self.execute_module(changed=True, commands=commands)\n        # src = load_fixture('aruba_config_src.cfg')\n\n        # set_module_args(dict(save_when='changed'))\n        # commands = ['hostname changed']\n        # self.execute_module(changed=False, commands=commands)\n        self.assertEqual(self.run_commands.call_count, 1)\n        self.assertEqual(self.get_config.call_count, 1)\n        self.assertEqual(self.load_config.call_count, 1)\n        args = self.run_commands.call_args[0][1]\n        self.assertIn('copy running-config startup-config', args)\n\n    def test_aruba_config_save_changed_false(self):\n        set_module_args(dict(save_when='changed'))\n        self.execute_module(changed=False)\n        self.assertEqual(self.run_commands.call_count, 0)\n        self.assertEqual(self.get_config.call_count, 0)\n        self.assertEqual(self.load_config.call_count, 0)\n\n    def test_aruba_config_lines_wo_parents(self):\n        set_module_args(dict(lines=['hostname foo']))\n        commands = ['hostname foo']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_aruba_config_lines_w_parents(self):\n        set_module_args(dict(lines=['shutdown'], parents=['interface GigabitEthernet0/0']))\n        commands = ['interface GigabitEthernet0/0', 'shutdown']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_aruba_config_before(self):\n        set_module_args(dict(lines=['hostname foo'], before=['test1', 'test2']))\n        commands = ['test1', 'test2', 'hostname foo']\n        self.execute_module(changed=True, commands=commands, sort=False)\n\n    def test_aruba_config_after(self):\n        set_module_args(dict(lines=['hostname foo'], after=['test1', 'test2']))\n        commands = ['hostname foo', 'test1', 'test2']\n        self.execute_module(changed=True, commands=commands, sort=False)\n\n    def test_aruba_config_before_after_no_change(self):\n        set_module_args(dict(lines=['hostname router'],\n                             before=['test1', 'test2'],\n                             after=['test3', 'test4']))\n        self.execute_module()\n\n    def test_aruba_config_config(self):\n        config = 'hostname localhost'\n        set_module_args(dict(lines=['hostname router'], config=config))\n        commands = ['hostname router']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_aruba_config_replace_block(self):\n        lines = ['description test string', 'test string']\n        parents = ['interface GigabitEthernet0/0']\n        set_module_args(dict(lines=lines, replace='block', parents=parents))\n        commands = parents + lines\n        self.execute_module(changed=True, commands=commands)\n\n    def test_aruba_config_force(self):\n        lines = ['hostname router']\n        set_module_args(dict(lines=lines, match='none'))\n        self.execute_module(changed=True, commands=lines)\n\n    def test_aruba_config_match_none(self):\n        lines = ['ip address 1.2.3.4 255.255.255.0', 'description test string']\n        parents = ['interface GigabitEthernet0/0']\n        set_module_args(dict(lines=lines, parents=parents, match='none'))\n        commands = parents + lines\n        self.execute_module(changed=True, commands=commands, sort=False)\n\n    def test_aruba_config_match_strict(self):\n        lines = ['ip address 1.2.3.4 255.255.255.0', 'description test string',\n                 'shutdown']\n        parents = ['interface GigabitEthernet0/0']\n        set_module_args(dict(lines=lines, parents=parents, match='strict'))\n        commands = parents + ['shutdown']\n        self.execute_module(changed=True, commands=commands, sort=False)\n\n    def test_aruba_config_match_exact(self):\n        lines = ['ip address 1.2.3.4 255.255.255.0', 'description test string',\n                 'shutdown']\n        parents = ['interface GigabitEthernet0/0']\n        set_module_args(dict(lines=lines, parents=parents, match='exact'))\n        commands = parents + lines\n        self.execute_module(changed=True, commands=commands, sort=False)\n\n    def test_aruba_encrypt_false(self):\n        set_module_args(dict(encrypt=False))\n        self.execute_module()\n        self.assertEqual(self.run_commands.call_count, 2)\n        args = self.run_commands.call_args_list\n        self.assertIn('encrypt disable', args[0][0])\n        self.assertIn('encrypt enable', args[1][0])\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_aruba_config.py", "id": "02fdc1f2367e925cfc7619e1d877b9e6", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/aruba/test_aruba_config.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}