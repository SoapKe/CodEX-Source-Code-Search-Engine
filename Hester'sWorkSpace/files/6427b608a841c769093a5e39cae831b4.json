{"author": "jakubroztocil", "code": "import os\n\nimport pytest\n\nfrom httpie.input import ParseError\nfrom utils import MockEnvironment, http, HTTP_OK\nfrom fixtures import FILE_PATH_ARG, FILE_PATH, FILE_CONTENT\n\n\nclass TestMultipartFormDataFileUpload:\n\n    def test_non_existent_file_raises_parse_error(self, httpbin):\n        with pytest.raises(ParseError):\n            http('--form',\n                 'POST', httpbin.url + '/post', 'foo@/__does_not_exist__')\n\n    def test_upload_ok(self, httpbin):\n        r = http('--form', '--verbose', 'POST', httpbin.url + '/post',\n                 'test-file@%s' % FILE_PATH_ARG, 'foo=bar')\n        assert HTTP_OK in r\n        assert 'Content-Disposition: form-data; name=\"foo\"' in r\n        assert 'Content-Disposition: form-data; name=\"test-file\";' \\\n               ' filename=\"%s\"' % os.path.basename(FILE_PATH) in r\n        assert FILE_CONTENT in r\n        assert '\"foo\": \"bar\"' in r\n        assert 'Content-Type: text/plain' in r\n\n    def test_upload_multiple_fields_with_the_same_name(self, httpbin):\n        r = http('--form', '--verbose', 'POST', httpbin.url + '/post',\n                 'test-file@%s' % FILE_PATH_ARG,\n                 'test-file@%s' % FILE_PATH_ARG)\n        assert HTTP_OK in r\n        assert r.count('Content-Disposition: form-data; name=\"test-file\";'\n                       ' filename=\"%s\"' % os.path.basename(FILE_PATH)) == 2\n        \n        \n        assert r.count(FILE_CONTENT) in [3, 4]\n        assert r.count('Content-Type: text/plain') == 2\n\n\nclass TestRequestBodyFromFilePath:\n    \n\n    def test_request_body_from_file_by_path(self, httpbin):\n        r = http('--verbose',\n                 'POST', httpbin.url + '/post', '@' + FILE_PATH_ARG)\n        assert HTTP_OK in r\n        assert FILE_CONTENT in r, r\n        assert '\"Content-Type\": \"text/plain\"' in r\n\n    def test_request_body_from_file_by_path_with_explicit_content_type(\n            self, httpbin):\n        r = http('--verbose',\n                 'POST', httpbin.url + '/post', '@' + FILE_PATH_ARG,\n                 'Content-Type:text/plain; charset=utf8')\n        assert HTTP_OK in r\n        assert FILE_CONTENT in r\n        assert 'Content-Type: text/plain; charset=utf8' in r\n\n    def test_request_body_from_file_by_path_no_field_name_allowed(\n            self, httpbin):\n        env = MockEnvironment(stdin_isatty=True)\n        r = http('POST', httpbin.url + '/post', 'field-name@' + FILE_PATH_ARG,\n                 env=env, error_exit_ok=True)\n        assert 'perhaps you meant --form?' in r.stderr\n\n    def test_request_body_from_file_by_path_no_data_items_allowed(\n            self, httpbin):\n        env = MockEnvironment(stdin_isatty=False)\n        r = http('POST', httpbin.url + '/post', '@' + FILE_PATH_ARG, 'foo=bar',\n                 env=env, error_exit_ok=True)\n        assert 'cannot be mixed' in r.stderr\n", "comments": "         http url  file              should 4  3 httpbin    seem support filed field lists ", "content": "import os\n\nimport pytest\n\nfrom httpie.input import ParseError\nfrom utils import MockEnvironment, http, HTTP_OK\nfrom fixtures import FILE_PATH_ARG, FILE_PATH, FILE_CONTENT\n\n\nclass TestMultipartFormDataFileUpload:\n\n    def test_non_existent_file_raises_parse_error(self, httpbin):\n        with pytest.raises(ParseError):\n            http('--form',\n                 'POST', httpbin.url + '/post', 'foo@/__does_not_exist__')\n\n    def test_upload_ok(self, httpbin):\n        r = http('--form', '--verbose', 'POST', httpbin.url + '/post',\n                 'test-file@%s' % FILE_PATH_ARG, 'foo=bar')\n        assert HTTP_OK in r\n        assert 'Content-Disposition: form-data; name=\"foo\"' in r\n        assert 'Content-Disposition: form-data; name=\"test-file\";' \\\n               ' filename=\"%s\"' % os.path.basename(FILE_PATH) in r\n        assert FILE_CONTENT in r\n        assert '\"foo\": \"bar\"' in r\n        assert 'Content-Type: text/plain' in r\n\n    def test_upload_multiple_fields_with_the_same_name(self, httpbin):\n        r = http('--form', '--verbose', 'POST', httpbin.url + '/post',\n                 'test-file@%s' % FILE_PATH_ARG,\n                 'test-file@%s' % FILE_PATH_ARG)\n        assert HTTP_OK in r\n        assert r.count('Content-Disposition: form-data; name=\"test-file\";'\n                       ' filename=\"%s\"' % os.path.basename(FILE_PATH)) == 2\n        # Should be 4, but is 3 because httpbin\n        # doesn't seem to support filed field lists\n        assert r.count(FILE_CONTENT) in [3, 4]\n        assert r.count('Content-Type: text/plain') == 2\n\n\nclass TestRequestBodyFromFilePath:\n    \"\"\"\n    `http URL @file'\n\n    \"\"\"\n\n    def test_request_body_from_file_by_path(self, httpbin):\n        r = http('--verbose',\n                 'POST', httpbin.url + '/post', '@' + FILE_PATH_ARG)\n        assert HTTP_OK in r\n        assert FILE_CONTENT in r, r\n        assert '\"Content-Type\": \"text/plain\"' in r\n\n    def test_request_body_from_file_by_path_with_explicit_content_type(\n            self, httpbin):\n        r = http('--verbose',\n                 'POST', httpbin.url + '/post', '@' + FILE_PATH_ARG,\n                 'Content-Type:text/plain; charset=utf8')\n        assert HTTP_OK in r\n        assert FILE_CONTENT in r\n        assert 'Content-Type: text/plain; charset=utf8' in r\n\n    def test_request_body_from_file_by_path_no_field_name_allowed(\n            self, httpbin):\n        env = MockEnvironment(stdin_isatty=True)\n        r = http('POST', httpbin.url + '/post', 'field-name@' + FILE_PATH_ARG,\n                 env=env, error_exit_ok=True)\n        assert 'perhaps you meant --form?' in r.stderr\n\n    def test_request_body_from_file_by_path_no_data_items_allowed(\n            self, httpbin):\n        env = MockEnvironment(stdin_isatty=False)\n        r = http('POST', httpbin.url + '/post', '@' + FILE_PATH_ARG, 'foo=bar',\n                 env=env, error_exit_ok=True)\n        assert 'cannot be mixed' in r.stderr\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "test_uploads.py", "id": "6427b608a841c769093a5e39cae831b4", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil-httpie/jakubroztocil-httpie-0f4dce9/tests/test_uploads.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:48:16Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}