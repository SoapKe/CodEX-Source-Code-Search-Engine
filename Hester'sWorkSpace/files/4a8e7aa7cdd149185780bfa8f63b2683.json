{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport pytest\n\nfrom sentry.interfaces.base import InterfaceValidationError\nfrom sentry.interfaces.repos import Repos\nfrom sentry.testutils import TestCase\n\n\nclass ReposTest(TestCase):\n    def test_minimal_valid(self):\n        assert Repos.to_python({\n            '/path/to/sentry': {\n                'name': 'sentry-unity',\n            },\n        }).to_json() == {\n            '/path/to/sentry': {\n                'name': 'sentry-unity',\n            },\n        }\n\n    def test_full_valid(self):\n        assert Repos.to_python(\n            {\n                '/path/to/sentry': {\n                    'name': 'sentry-unity',\n                    'prefix': 'src',\n                    'revision': 'a' * 40,\n                },\n            }\n        ).to_json() == {\n            '/path/to/sentry': {\n                'name': 'sentry-unity',\n                'prefix': 'src',\n                'revision': 'a' * 40,\n            },\n        }\n\n    def test_missing_name(self):\n        with pytest.raises(InterfaceValidationError):\n            assert Repos.to_python({\n                '/path/to/sentry': {},\n            })\n\n    def test_long_name(self):\n        with pytest.raises(InterfaceValidationError):\n            assert Repos.to_python({\n                '/path/to/sentry': {\n                    'name': 'a' * 300,\n                },\n            })\n\n    def test_long_prefix(self):\n        with pytest.raises(InterfaceValidationError):\n            assert Repos.to_python({\n                '/path/to/sentry': {\n                    'name': 'a',\n                    'prefix': 'a' * 300,\n                },\n            })\n\n    def test_long_revision(self):\n        with pytest.raises(InterfaceValidationError):\n            assert Repos.to_python({\n                '/path/to/sentry': {\n                    'name': 'a',\n                    'revision': 'a' * 300,\n                },\n            })\n\n    def test_long_path(self):\n        with pytest.raises(InterfaceValidationError):\n            assert Repos.to_python({\n                '/' * 300: {\n                    'name': 'a',\n                },\n            })\n\n    def test_path(self):\n        assert Repos().get_path() == 'repos'\n", "comments": "      coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport pytest\n\nfrom sentry.interfaces.base import InterfaceValidationError\nfrom sentry.interfaces.repos import Repos\nfrom sentry.testutils import TestCase\n\n\nclass ReposTest(TestCase):\n    def test_minimal_valid(self):\n        assert Repos.to_python({\n            '/path/to/sentry': {\n                'name': 'sentry-unity',\n            },\n        }).to_json() == {\n            '/path/to/sentry': {\n                'name': 'sentry-unity',\n            },\n        }\n\n    def test_full_valid(self):\n        assert Repos.to_python(\n            {\n                '/path/to/sentry': {\n                    'name': 'sentry-unity',\n                    'prefix': 'src',\n                    'revision': 'a' * 40,\n                },\n            }\n        ).to_json() == {\n            '/path/to/sentry': {\n                'name': 'sentry-unity',\n                'prefix': 'src',\n                'revision': 'a' * 40,\n            },\n        }\n\n    def test_missing_name(self):\n        with pytest.raises(InterfaceValidationError):\n            assert Repos.to_python({\n                '/path/to/sentry': {},\n            })\n\n    def test_long_name(self):\n        with pytest.raises(InterfaceValidationError):\n            assert Repos.to_python({\n                '/path/to/sentry': {\n                    'name': 'a' * 300,\n                },\n            })\n\n    def test_long_prefix(self):\n        with pytest.raises(InterfaceValidationError):\n            assert Repos.to_python({\n                '/path/to/sentry': {\n                    'name': 'a',\n                    'prefix': 'a' * 300,\n                },\n            })\n\n    def test_long_revision(self):\n        with pytest.raises(InterfaceValidationError):\n            assert Repos.to_python({\n                '/path/to/sentry': {\n                    'name': 'a',\n                    'revision': 'a' * 300,\n                },\n            })\n\n    def test_long_path(self):\n        with pytest.raises(InterfaceValidationError):\n            assert Repos.to_python({\n                '/' * 300: {\n                    'name': 'a',\n                },\n            })\n\n    def test_path(self):\n        assert Repos().get_path() == 'repos'\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_repos.py", "id": "4a8e7aa7cdd149185780bfa8f63b2683", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/interfaces/test_repos.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}