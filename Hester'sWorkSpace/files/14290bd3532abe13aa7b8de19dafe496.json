{"author": "django", "code": "\"\"\"\nTests for the update() queryset method that allows in-place, multi-object\nupdates.\n\"\"\"\n\nfrom django.db import models\n\n\nclass DataPoint(models.Model):\n    name = models.CharField(max_length=20)\n    value = models.CharField(max_length=20)\n    another_value = models.CharField(max_length=20, blank=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass RelatedPoint(models.Model):\n    name = models.CharField(max_length=20)\n    data = models.ForeignKey(DataPoint, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass A(models.Model):\n    x = models.IntegerField(default=10)\n\n\nclass B(models.Model):\n    a = models.ForeignKey(A, models.CASCADE)\n    y = models.IntegerField(default=10)\n\n\nclass C(models.Model):\n    y = models.IntegerField(default=10)\n\n\nclass D(C):\n    a = models.ForeignKey(A, models.CASCADE)\n\n\nclass Foo(models.Model):\n    target = models.CharField(max_length=10, unique=True)\n\n\nclass Bar(models.Model):\n    foo = models.ForeignKey(Foo, models.CASCADE, to_field='target')\n    m2m_foo = models.ManyToManyField(Foo, related_name='m2m_foo')\n", "comments": "    tests update() queryset method allows place  multi object updates      ", "content": "\"\"\"\nTests for the update() queryset method that allows in-place, multi-object\nupdates.\n\"\"\"\n\nfrom django.db import models\n\n\nclass DataPoint(models.Model):\n    name = models.CharField(max_length=20)\n    value = models.CharField(max_length=20)\n    another_value = models.CharField(max_length=20, blank=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass RelatedPoint(models.Model):\n    name = models.CharField(max_length=20)\n    data = models.ForeignKey(DataPoint, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass A(models.Model):\n    x = models.IntegerField(default=10)\n\n\nclass B(models.Model):\n    a = models.ForeignKey(A, models.CASCADE)\n    y = models.IntegerField(default=10)\n\n\nclass C(models.Model):\n    y = models.IntegerField(default=10)\n\n\nclass D(C):\n    a = models.ForeignKey(A, models.CASCADE)\n\n\nclass Foo(models.Model):\n    target = models.CharField(max_length=10, unique=True)\n\n\nclass Bar(models.Model):\n    foo = models.ForeignKey(Foo, models.CASCADE, to_field='target')\n    m2m_foo = models.ManyToManyField(Foo, related_name='m2m_foo')\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "14290bd3532abe13aa7b8de19dafe496", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/update/models.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}