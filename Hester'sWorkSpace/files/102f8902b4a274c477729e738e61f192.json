{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass SoundgasmIE(InfoExtractor):\n    IE_NAME = 'soundgasm'\n    _VALID_URL = r'https?://(?:www\\.)?soundgasm\\.net/u/(?P<user>[0-9a-zA-Z_-]+)/(?P<display_id>[0-9a-zA-Z_-]+)'\n    _TEST = {\n        'url': 'http://soundgasm.net/u/ytdl/Piano-sample',\n        'md5': '010082a2c802c5275bb00030743e75ad',\n        'info_dict': {\n            'id': '88abd86ea000cafe98f96321b23cc1206cbcbcc9',\n            'ext': 'm4a',\n            'title': 'Piano sample',\n            'description': 'Royalty Free Sample Music',\n            'uploader': 'ytdl',\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        display_id = mobj.group('display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        audio_url = self._html_search_regex(\n            r'(?s)m4a\\s*:\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', webpage,\n            'audio URL', group='url')\n\n        title = self._search_regex(\n            r'<div[^>]+\\bclass=[\"\\']jp-title[^>]+>([^<]+)',\n            webpage, 'title', default=display_id)\n\n        description = self._html_search_regex(\n            (r'(?s)<div[^>]+\\bclass=[\"\\']jp-description[^>]+>(.+?)</div>',\n             r'(?s)<li>Description:\\s(.*?)<\\/li>'),\n            webpage, 'description', fatal=False)\n\n        audio_id = self._search_regex(\n            r'/([^/]+)\\.m4a', audio_url, 'audio id', default=display_id)\n\n        return {\n            'id': audio_id,\n            'display_id': display_id,\n            'url': audio_url,\n            'vcodec': 'none',\n            'title': title,\n            'description': description,\n            'uploader': mobj.group('user'),\n        }\n\n\nclass SoundgasmProfileIE(InfoExtractor):\n    IE_NAME = 'soundgasm:profile'\n    _VALID_URL = r'https?://(?:www\\.)?soundgasm\\.net/u/(?P<id>[^/]+)/?(?:\\\n    _TEST = {\n        'url': 'http://soundgasm.net/u/ytdl',\n        'info_dict': {\n            'id': 'ytdl',\n        },\n        'playlist_count': 1,\n    }\n\n    def _real_extract(self, url):\n        profile_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, profile_id)\n\n        entries = [\n            self.url_result(audio_url, 'Soundgasm')\n            for audio_url in re.findall(r'href=\"([^\"]+/u/%s/[^\"]+)' % profile_id, webpage)]\n\n        return self.playlist_result(entries, profile_id)\n", "comments": "# coding: utf-8\n#.*)?$'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass SoundgasmIE(InfoExtractor):\n    IE_NAME = 'soundgasm'\n    _VALID_URL = r'https?://(?:www\\.)?soundgasm\\.net/u/(?P<user>[0-9a-zA-Z_-]+)/(?P<display_id>[0-9a-zA-Z_-]+)'\n    _TEST = {\n        'url': 'http://soundgasm.net/u/ytdl/Piano-sample',\n        'md5': '010082a2c802c5275bb00030743e75ad',\n        'info_dict': {\n            'id': '88abd86ea000cafe98f96321b23cc1206cbcbcc9',\n            'ext': 'm4a',\n            'title': 'Piano sample',\n            'description': 'Royalty Free Sample Music',\n            'uploader': 'ytdl',\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        display_id = mobj.group('display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        audio_url = self._html_search_regex(\n            r'(?s)m4a\\s*:\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', webpage,\n            'audio URL', group='url')\n\n        title = self._search_regex(\n            r'<div[^>]+\\bclass=[\"\\']jp-title[^>]+>([^<]+)',\n            webpage, 'title', default=display_id)\n\n        description = self._html_search_regex(\n            (r'(?s)<div[^>]+\\bclass=[\"\\']jp-description[^>]+>(.+?)</div>',\n             r'(?s)<li>Description:\\s(.*?)<\\/li>'),\n            webpage, 'description', fatal=False)\n\n        audio_id = self._search_regex(\n            r'/([^/]+)\\.m4a', audio_url, 'audio id', default=display_id)\n\n        return {\n            'id': audio_id,\n            'display_id': display_id,\n            'url': audio_url,\n            'vcodec': 'none',\n            'title': title,\n            'description': description,\n            'uploader': mobj.group('user'),\n        }\n\n\nclass SoundgasmProfileIE(InfoExtractor):\n    IE_NAME = 'soundgasm:profile'\n    _VALID_URL = r'https?://(?:www\\.)?soundgasm\\.net/u/(?P<id>[^/]+)/?(?:\\#.*)?$'\n    _TEST = {\n        'url': 'http://soundgasm.net/u/ytdl',\n        'info_dict': {\n            'id': 'ytdl',\n        },\n        'playlist_count': 1,\n    }\n\n    def _real_extract(self, url):\n        profile_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, profile_id)\n\n        entries = [\n            self.url_result(audio_url, 'Soundgasm')\n            for audio_url in re.findall(r'href=\"([^\"]+/u/%s/[^\"]+)' % profile_id, webpage)]\n\n        return self.playlist_result(entries, profile_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "soundgasm.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/soundgasm.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}