{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    remove_end,\n    unified_strdate,\n)\n\n\nclass VidbitIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vidbit\\.co/(?:watch|embed)\\?.*?\\bv=(?P<id>[\\da-zA-Z]+)'\n    _TESTS = [{\n        'url': 'http://www.vidbit.co/watch?v=jkL2yDOEq2',\n        'md5': '1a34b7f14defe3b8fafca9796892924d',\n        'info_dict': {\n            'id': 'jkL2yDOEq2',\n            'ext': 'mp4',\n            'title': 'Intro to VidBit',\n            'description': 'md5:5e0d6142eec00b766cbf114bfd3d16b7',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'upload_date': '20160618',\n            'view_count': int,\n            'comment_count': int,\n        }\n    }, {\n        'url': 'http://www.vidbit.co/embed?v=jkL2yDOEq2&auto=0&water=0',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            compat_urlparse.urljoin(url, '/watch?v=%s' % video_id), video_id)\n\n        video_url, title = [None] * 2\n\n        config = self._parse_json(self._search_regex(\n            r'(?s)\\.setup\\(({.+?})\\);', webpage, 'setup', default='{}'),\n            video_id, transform_source=js_to_json)\n        if config:\n            if config.get('file'):\n                video_url = compat_urlparse.urljoin(url, config['file'])\n            title = config.get('title')\n\n        if not video_url:\n            video_url = compat_urlparse.urljoin(url, self._search_regex(\n                r'file\\s*:\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1',\n                webpage, 'video URL', group='url'))\n\n        if not title:\n            title = remove_end(\n                self._html_search_regex(\n                    (r'<h1>(.+?)</h1>', r'<title>(.+?)</title>'),\n                    webpage, 'title', default=None) or self._og_search_title(webpage),\n                ' - VidBit')\n\n        description = self._html_search_meta(\n            ('description', 'og:description', 'twitter:description'),\n            webpage, 'description')\n\n        upload_date = unified_strdate(self._html_search_meta(\n            'datePublished', webpage, 'upload date'))\n\n        view_count = int_or_none(self._search_regex(\n            r'<strong>(\\d+)</strong> views',\n            webpage, 'view count', fatal=False))\n        comment_count = int_or_none(self._search_regex(\n            r'id=[\"\\']cmt_num[\"\\'][^>]*>\\((\\d+)\\)',\n            webpage, 'comment count', fatal=False))\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': description,\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'upload_date': upload_date,\n            'view_count': view_count,\n            'comment_count': comment_count,\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    remove_end,\n    unified_strdate,\n)\n\n\nclass VidbitIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vidbit\\.co/(?:watch|embed)\\?.*?\\bv=(?P<id>[\\da-zA-Z]+)'\n    _TESTS = [{\n        'url': 'http://www.vidbit.co/watch?v=jkL2yDOEq2',\n        'md5': '1a34b7f14defe3b8fafca9796892924d',\n        'info_dict': {\n            'id': 'jkL2yDOEq2',\n            'ext': 'mp4',\n            'title': 'Intro to VidBit',\n            'description': 'md5:5e0d6142eec00b766cbf114bfd3d16b7',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'upload_date': '20160618',\n            'view_count': int,\n            'comment_count': int,\n        }\n    }, {\n        'url': 'http://www.vidbit.co/embed?v=jkL2yDOEq2&auto=0&water=0',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            compat_urlparse.urljoin(url, '/watch?v=%s' % video_id), video_id)\n\n        video_url, title = [None] * 2\n\n        config = self._parse_json(self._search_regex(\n            r'(?s)\\.setup\\(({.+?})\\);', webpage, 'setup', default='{}'),\n            video_id, transform_source=js_to_json)\n        if config:\n            if config.get('file'):\n                video_url = compat_urlparse.urljoin(url, config['file'])\n            title = config.get('title')\n\n        if not video_url:\n            video_url = compat_urlparse.urljoin(url, self._search_regex(\n                r'file\\s*:\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1',\n                webpage, 'video URL', group='url'))\n\n        if not title:\n            title = remove_end(\n                self._html_search_regex(\n                    (r'<h1>(.+?)</h1>', r'<title>(.+?)</title>'),\n                    webpage, 'title', default=None) or self._og_search_title(webpage),\n                ' - VidBit')\n\n        description = self._html_search_meta(\n            ('description', 'og:description', 'twitter:description'),\n            webpage, 'description')\n\n        upload_date = unified_strdate(self._html_search_meta(\n            'datePublished', webpage, 'upload date'))\n\n        view_count = int_or_none(self._search_regex(\n            r'<strong>(\\d+)</strong> views',\n            webpage, 'view count', fatal=False))\n        comment_count = int_or_none(self._search_regex(\n            r'id=[\"\\']cmt_num[\"\\'][^>]*>\\((\\d+)\\)',\n            webpage, 'comment count', fatal=False))\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': description,\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'upload_date': upload_date,\n            'view_count': view_count,\n            'comment_count': comment_count,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vidbit.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vidbit.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}