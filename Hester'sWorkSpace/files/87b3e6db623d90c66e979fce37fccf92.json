{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport hashlib\n\nfrom odoo import api, models\nfrom odoo.tools import pycompat\nfrom odoo.tools import html_escape as escape\n\n\nclass Image(models.AbstractModel):\n    \n    _name = 'ir.qweb.field.image'\n    _inherit = 'ir.qweb.field.image'\n\n    @api.model\n    def record_to_html(self, record, field_name, options):\n        assert options['tagName'] != 'img',\\\n            \"Oddly enough, the root tag of an image field can not be img. \" \\\n            \"That is because the image goes into the tag, or it gets the \" \\\n            \"hose again.\"\n\n        if options.get('qweb_img_raw_data', False):\n            return super(Image, self).record_to_html(record, field_name, options)\n\n        aclasses = ['img', 'img-responsive'] if options.get('qweb_img_responsive', True) else ['img']\n        aclasses += options.get('class', '').split()\n        classes = ' '.join(pycompat.imap(escape, aclasses))\n\n        max_size = None\n        if options.get('resize'):\n            max_size = options.get('resize')\n        else:\n            max_width, max_height = options.get('max_width', 0), options.get('max_height', 0)\n            if max_width or max_height:\n                max_size = '%sx%s' % (max_width, max_height)\n\n        sha = hashlib.sha1(getattr(record, '__last_update').encode('utf-8')).hexdigest()[0:7]\n        max_size = '' if max_size is None else '/%s' % max_size\n        src = '/web/image/%s/%s/%s%s?unique=%s' % (record._name, record.id, field_name, max_size, sha)\n\n        alt = None\n        if options.get('alt-field') and getattr(record, options['alt-field'], None):\n            alt = escape(record[options['alt-field']])\n        elif options.get('alt'):\n            alt = options['alt']\n\n        src_zoom = None\n        if options.get('zoom') and getattr(record, options['zoom'], None):\n            src_zoom = '/web/image/%s/%s/%s%s?unique=%s' % (record._name, record.id, options['zoom'], max_size, sha)\n        elif options.get('zoom'):\n            src_zoom = options['zoom']\n\n        img = '<img class=\"%s\" src=\"%s\" style=\"%s\"%s%s/>' % \\\n            (classes, src, options.get('style', ''), ' alt=\"%s\"' % alt if alt else '', ' data-zoom=\"1\" data-zoom-image=\"%s\"' % src_zoom if src_zoom else '')\n        return pycompat.to_text(img)\n", "comments": "        widget options         class           set attribute generated  img  tag                coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport hashlib\n\nfrom odoo import api, models\nfrom odoo.tools import pycompat\nfrom odoo.tools import html_escape as escape\n\n\nclass Image(models.AbstractModel):\n    \"\"\"\n    Widget options:\n\n    ``class``\n        set as attribute on the generated <img> tag\n    \"\"\"\n    _name = 'ir.qweb.field.image'\n    _inherit = 'ir.qweb.field.image'\n\n    @api.model\n    def record_to_html(self, record, field_name, options):\n        assert options['tagName'] != 'img',\\\n            \"Oddly enough, the root tag of an image field can not be img. \" \\\n            \"That is because the image goes into the tag, or it gets the \" \\\n            \"hose again.\"\n\n        if options.get('qweb_img_raw_data', False):\n            return super(Image, self).record_to_html(record, field_name, options)\n\n        aclasses = ['img', 'img-responsive'] if options.get('qweb_img_responsive', True) else ['img']\n        aclasses += options.get('class', '').split()\n        classes = ' '.join(pycompat.imap(escape, aclasses))\n\n        max_size = None\n        if options.get('resize'):\n            max_size = options.get('resize')\n        else:\n            max_width, max_height = options.get('max_width', 0), options.get('max_height', 0)\n            if max_width or max_height:\n                max_size = '%sx%s' % (max_width, max_height)\n\n        sha = hashlib.sha1(getattr(record, '__last_update').encode('utf-8')).hexdigest()[0:7]\n        max_size = '' if max_size is None else '/%s' % max_size\n        src = '/web/image/%s/%s/%s%s?unique=%s' % (record._name, record.id, field_name, max_size, sha)\n\n        alt = None\n        if options.get('alt-field') and getattr(record, options['alt-field'], None):\n            alt = escape(record[options['alt-field']])\n        elif options.get('alt'):\n            alt = options['alt']\n\n        src_zoom = None\n        if options.get('zoom') and getattr(record, options['zoom'], None):\n            src_zoom = '/web/image/%s/%s/%s%s?unique=%s' % (record._name, record.id, options['zoom'], max_size, sha)\n        elif options.get('zoom'):\n            src_zoom = options['zoom']\n\n        img = '<img class=\"%s\" src=\"%s\" style=\"%s\"%s%s/>' % \\\n            (classes, src, options.get('style', ''), ' alt=\"%s\"' % alt if alt else '', ' data-zoom=\"1\" data-zoom-image=\"%s\"' % src_zoom if src_zoom else '')\n        return pycompat.to_text(img)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "ir_qweb.py", "id": "87b3e6db623d90c66e979fce37fccf92", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/web/models/ir_qweb.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}