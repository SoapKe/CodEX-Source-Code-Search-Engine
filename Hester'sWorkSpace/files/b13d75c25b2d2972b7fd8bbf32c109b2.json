{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    qualities,\n)\n\n\nclass PandaTVIE(InfoExtractor):\n    IE_DESC = '\u718a\u732bTV'\n    _VALID_URL = r'https?://(?:www\\.)?panda\\.tv/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.panda.tv/66666',\n        'info_dict': {\n            'id': '66666',\n            'title': 're:.+',\n            'uploader': '\u5218\u6740\u9e21',\n            'ext': 'flv',\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Live stream is offline',\n    }, {\n        'url': 'https://www.panda.tv/66666',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        config = self._download_json(\n            'https://www.panda.tv/api_room_v2?roomid=%s' % video_id, video_id)\n\n        error_code = config.get('errno', 0)\n        if error_code is not 0:\n            raise ExtractorError(\n                '%s returned error %s: %s'\n                % (self.IE_NAME, error_code, config['errmsg']),\n                expected=True)\n\n        data = config['data']\n        video_info = data['videoinfo']\n\n        \n        if video_info.get('status') != '2':\n            raise ExtractorError(\n                'Live stream is offline', expected=True)\n\n        title = data['roominfo']['name']\n        uploader = data.get('hostinfo', {}).get('name')\n        room_key = video_info['room_key']\n        stream_addr = video_info.get(\n            'stream_addr', {'OD': '1', 'HD': '1', 'SD': '1'})\n\n        \n        \n        \n        plflag0, plflag1 = video_info['plflag'].split('_')\n        plflag0 = int(plflag0) - 1\n        if plflag1 == '21':\n            plflag0 = 10\n            plflag1 = '4'\n        live_panda = 'live_panda' if plflag0 < 1 else ''\n\n        plflag_auth = self._parse_json(video_info['plflag_list'], video_id)\n        sign = plflag_auth['auth']['sign']\n        ts = plflag_auth['auth']['time']\n        rid = plflag_auth['auth']['rid']\n\n        quality_key = qualities(['OD', 'HD', 'SD'])\n        suffix = ['_small', '_mid', '']\n        formats = []\n        for k, v in stream_addr.items():\n            if v != '1':\n                continue\n            quality = quality_key(k)\n            if quality <= 0:\n                continue\n            for pref, (ext, pl) in enumerate((('m3u8', '-hls'), ('flv', ''))):\n                formats.append({\n                    'url': 'https://pl%s%s.live.panda.tv/live_panda/%s%s%s.%s?sign=%s&ts=%s&rid=%s'\n                    % (pl, plflag1, room_key, live_panda, suffix[quality], ext, sign, ts, rid),\n                    'format_id': '%s-%s' % (k, ext),\n                    'quality': quality,\n                    'source_preference': pref,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._live_title(title),\n            'uploader': uploader,\n            'formats': formats,\n            'is_live': True,\n        }\n", "comments": "# coding: utf-8\n# 2 = live, 3 = offline\n# Reverse engineered from web player swf\n# (http://s6.pdim.gs/static/07153e425f581151.swf at the moment of\n# writing).\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    qualities,\n)\n\n\nclass PandaTVIE(InfoExtractor):\n    IE_DESC = '\u718a\u732bTV'\n    _VALID_URL = r'https?://(?:www\\.)?panda\\.tv/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.panda.tv/66666',\n        'info_dict': {\n            'id': '66666',\n            'title': 're:.+',\n            'uploader': '\u5218\u6740\u9e21',\n            'ext': 'flv',\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Live stream is offline',\n    }, {\n        'url': 'https://www.panda.tv/66666',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        config = self._download_json(\n            'https://www.panda.tv/api_room_v2?roomid=%s' % video_id, video_id)\n\n        error_code = config.get('errno', 0)\n        if error_code is not 0:\n            raise ExtractorError(\n                '%s returned error %s: %s'\n                % (self.IE_NAME, error_code, config['errmsg']),\n                expected=True)\n\n        data = config['data']\n        video_info = data['videoinfo']\n\n        # 2 = live, 3 = offline\n        if video_info.get('status') != '2':\n            raise ExtractorError(\n                'Live stream is offline', expected=True)\n\n        title = data['roominfo']['name']\n        uploader = data.get('hostinfo', {}).get('name')\n        room_key = video_info['room_key']\n        stream_addr = video_info.get(\n            'stream_addr', {'OD': '1', 'HD': '1', 'SD': '1'})\n\n        # Reverse engineered from web player swf\n        # (http://s6.pdim.gs/static/07153e425f581151.swf at the moment of\n        # writing).\n        plflag0, plflag1 = video_info['plflag'].split('_')\n        plflag0 = int(plflag0) - 1\n        if plflag1 == '21':\n            plflag0 = 10\n            plflag1 = '4'\n        live_panda = 'live_panda' if plflag0 < 1 else ''\n\n        plflag_auth = self._parse_json(video_info['plflag_list'], video_id)\n        sign = plflag_auth['auth']['sign']\n        ts = plflag_auth['auth']['time']\n        rid = plflag_auth['auth']['rid']\n\n        quality_key = qualities(['OD', 'HD', 'SD'])\n        suffix = ['_small', '_mid', '']\n        formats = []\n        for k, v in stream_addr.items():\n            if v != '1':\n                continue\n            quality = quality_key(k)\n            if quality <= 0:\n                continue\n            for pref, (ext, pl) in enumerate((('m3u8', '-hls'), ('flv', ''))):\n                formats.append({\n                    'url': 'https://pl%s%s.live.panda.tv/live_panda/%s%s%s.%s?sign=%s&ts=%s&rid=%s'\n                    % (pl, plflag1, room_key, live_panda, suffix[quality], ext, sign, ts, rid),\n                    'format_id': '%s-%s' % (k, ext),\n                    'quality': quality,\n                    'source_preference': pref,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._live_title(title),\n            'uploader': uploader,\n            'formats': formats,\n            'is_live': True,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "pandatv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/pandatv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}