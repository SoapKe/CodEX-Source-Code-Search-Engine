{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport tensorflow as tf\n\nimport runners\n\n Shared flags.\ntf.app.flags.DEFINE_string(\"mode\", \"train\",\n                           \"The mode of the binary. Must be 'train' or 'test'.\")\ntf.app.flags.DEFINE_string(\"model\", \"vrnn\",\n                           \"Model choice. Currently only 'vrnn' is supported.\")\ntf.app.flags.DEFINE_integer(\"latent_size\", 64,\n                            \"The size of the latent state of the model.\")\ntf.app.flags.DEFINE_string(\"dataset_type\", \"pianoroll\",\n                           \"The type of dataset, either 'pianoroll' or 'speech'.\")\ntf.app.flags.DEFINE_string(\"dataset_path\", \"\",\n                           \"Path to load the dataset from.\")\ntf.app.flags.DEFINE_integer(\"data_dimension\", None,\n                            \"The dimension of each vector in the data sequence. \"\n                            \"Defaults to 88 for pianoroll datasets and 200 for speech \"\n                            \"datasets. Should not need to be changed except for \"\n                            \"testing.\")\ntf.app.flags.DEFINE_integer(\"batch_size\", 4,\n                            \"Batch size.\")\ntf.app.flags.DEFINE_integer(\"num_samples\", 4,\n                           \"The number of samples (or particles) for multisample \"\n                           \"algorithms.\")\ntf.app.flags.DEFINE_string(\"logdir\", \"/tmp/smc_vi\",\n                           \"The directory to keep checkpoints and summaries in.\")\ntf.app.flags.DEFINE_integer(\"random_seed\", None,\n                            \"A random seed for seeding the TensorFlow graph.\")\n\n Training flags.\ntf.app.flags.DEFINE_string(\"bound\", \"fivo\",\n                           \"The bound to optimize. Can be 'elbo', 'iwae', or 'fivo'.\")\ntf.app.flags.DEFINE_boolean(\"normalize_by_seq_len\", True,\n                            \"If true, normalize the loss by the number of timesteps \"\n                            \"per sequence.\")\ntf.app.flags.DEFINE_float(\"learning_rate\", 0.0002,\n                          \"The learning rate for ADAM.\")\ntf.app.flags.DEFINE_integer(\"max_steps\", int(1e9),\n                            \"The number of gradient update steps to train for.\")\ntf.app.flags.DEFINE_integer(\"summarize_every\", 50,\n                            \"The number of steps between summaries.\")\n\n Distributed training flags.\ntf.app.flags.DEFINE_string(\"master\", \"\",\n                           \"The BNS name of the TensorFlow master to use.\")\ntf.app.flags.DEFINE_integer(\"task\", 0,\n                            \"Task id of the replica running the training.\")\ntf.app.flags.DEFINE_integer(\"ps_tasks\", 0,\n                            \"Number of tasks in the ps job. If 0 no ps job is used.\")\ntf.app.flags.DEFINE_boolean(\"stagger_workers\", True,\n                            \"If true, bring one worker online every 1000 steps.\")\n\n Evaluation flags.\ntf.app.flags.DEFINE_string(\"split\", \"train\",\n                           \"Split to evaluate the model on. Can be 'train', 'valid', or 'test'.\")\n\nFLAGS = tf.app.flags.FLAGS\n\nPIANOROLL_DEFAULT_DATA_DIMENSION = 88\nSPEECH_DEFAULT_DATA_DIMENSION = 200\n\n\ndef main(unused_argv):\n  tf.logging.set_verbosity(tf.logging.INFO)\n  if FLAGS.data_dimension is None:\n    if FLAGS.dataset_type == \"pianoroll\":\n      FLAGS.data_dimension = PIANOROLL_DEFAULT_DATA_DIMENSION\n    elif FLAGS.dataset_type == \"speech\":\n      FLAGS.data_dimension = SPEECH_DEFAULT_DATA_DIMENSION\n  if FLAGS.mode == \"train\":\n    runners.run_train(FLAGS)\n  elif FLAGS.mode == \"eval\":\n    runners.run_eval(FLAGS)\n\nif __name__ == \"__main__\":\n  tf.app.run()\n", "comments": "   a script run training sequential latent variable models         copyright 2017 the tensorflow authors all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       shared flags     training flags     distributed training flags     evaluation flags  ", "content": "# Copyright 2017 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"A script to run training for sequential latent variable models.\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport tensorflow as tf\n\nimport runners\n\n# Shared flags.\ntf.app.flags.DEFINE_string(\"mode\", \"train\",\n                           \"The mode of the binary. Must be 'train' or 'test'.\")\ntf.app.flags.DEFINE_string(\"model\", \"vrnn\",\n                           \"Model choice. Currently only 'vrnn' is supported.\")\ntf.app.flags.DEFINE_integer(\"latent_size\", 64,\n                            \"The size of the latent state of the model.\")\ntf.app.flags.DEFINE_string(\"dataset_type\", \"pianoroll\",\n                           \"The type of dataset, either 'pianoroll' or 'speech'.\")\ntf.app.flags.DEFINE_string(\"dataset_path\", \"\",\n                           \"Path to load the dataset from.\")\ntf.app.flags.DEFINE_integer(\"data_dimension\", None,\n                            \"The dimension of each vector in the data sequence. \"\n                            \"Defaults to 88 for pianoroll datasets and 200 for speech \"\n                            \"datasets. Should not need to be changed except for \"\n                            \"testing.\")\ntf.app.flags.DEFINE_integer(\"batch_size\", 4,\n                            \"Batch size.\")\ntf.app.flags.DEFINE_integer(\"num_samples\", 4,\n                           \"The number of samples (or particles) for multisample \"\n                           \"algorithms.\")\ntf.app.flags.DEFINE_string(\"logdir\", \"/tmp/smc_vi\",\n                           \"The directory to keep checkpoints and summaries in.\")\ntf.app.flags.DEFINE_integer(\"random_seed\", None,\n                            \"A random seed for seeding the TensorFlow graph.\")\n\n# Training flags.\ntf.app.flags.DEFINE_string(\"bound\", \"fivo\",\n                           \"The bound to optimize. Can be 'elbo', 'iwae', or 'fivo'.\")\ntf.app.flags.DEFINE_boolean(\"normalize_by_seq_len\", True,\n                            \"If true, normalize the loss by the number of timesteps \"\n                            \"per sequence.\")\ntf.app.flags.DEFINE_float(\"learning_rate\", 0.0002,\n                          \"The learning rate for ADAM.\")\ntf.app.flags.DEFINE_integer(\"max_steps\", int(1e9),\n                            \"The number of gradient update steps to train for.\")\ntf.app.flags.DEFINE_integer(\"summarize_every\", 50,\n                            \"The number of steps between summaries.\")\n\n# Distributed training flags.\ntf.app.flags.DEFINE_string(\"master\", \"\",\n                           \"The BNS name of the TensorFlow master to use.\")\ntf.app.flags.DEFINE_integer(\"task\", 0,\n                            \"Task id of the replica running the training.\")\ntf.app.flags.DEFINE_integer(\"ps_tasks\", 0,\n                            \"Number of tasks in the ps job. If 0 no ps job is used.\")\ntf.app.flags.DEFINE_boolean(\"stagger_workers\", True,\n                            \"If true, bring one worker online every 1000 steps.\")\n\n# Evaluation flags.\ntf.app.flags.DEFINE_string(\"split\", \"train\",\n                           \"Split to evaluate the model on. Can be 'train', 'valid', or 'test'.\")\n\nFLAGS = tf.app.flags.FLAGS\n\nPIANOROLL_DEFAULT_DATA_DIMENSION = 88\nSPEECH_DEFAULT_DATA_DIMENSION = 200\n\n\ndef main(unused_argv):\n  tf.logging.set_verbosity(tf.logging.INFO)\n  if FLAGS.data_dimension is None:\n    if FLAGS.dataset_type == \"pianoroll\":\n      FLAGS.data_dimension = PIANOROLL_DEFAULT_DATA_DIMENSION\n    elif FLAGS.dataset_type == \"speech\":\n      FLAGS.data_dimension = SPEECH_DEFAULT_DATA_DIMENSION\n  if FLAGS.mode == \"train\":\n    runners.run_train(FLAGS)\n  elif FLAGS.mode == \"eval\":\n    runners.run_eval(FLAGS)\n\nif __name__ == \"__main__\":\n  tf.app.run()\n", "description": "Models and examples built with TensorFlow", "file_name": "fivo.py", "id": "fd1030bad29d9b4fc9c929ba5582913b", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/fivo/fivo.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}