{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    unescapeHTML,\n)\n\n\nclass MSNIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?msn\\.com/(?:[^/]+/)+(?P<display_id>[^/]+)/[a-z]{2}-(?P<id>[\\da-zA-Z]+)'\n    _TESTS = [{\n        'url': 'http://www.msn.com/en-ae/foodanddrink/joinourtable/criminal-minds-shemar-moore-shares-a-touching-goodbye-message/vp-BBqQYNE',\n        'md5': '8442f66c116cbab1ff7098f986983458',\n        'info_dict': {\n            'id': 'BBqQYNE',\n            'display_id': 'criminal-minds-shemar-moore-shares-a-touching-goodbye-message',\n            'ext': 'mp4',\n            'title': 'Criminal Minds - Shemar Moore Shares A Touching Goodbye Message',\n            'description': 'md5:e8e89b897b222eb33a6b5067a8f1bc25',\n            'duration': 104,\n            'uploader': 'CBS Entertainment',\n            'uploader_id': 'IT0X5aoJ6bJgYerJXSDCgFmYPB1__54v',\n        },\n    }, {\n        'url': 'http://www.msn.com/en-ae/news/offbeat/meet-the-nine-year-old-self-made-millionaire/ar-BBt6ZKf',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.msn.com/en-ae/video/watch/obama-a-lot-of-people-will-be-disappointed/vi-AAhxUMH',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://www.msn.com/en-ae/foodanddrink/joinourtable/the-first-fart-makes-you-laugh-the-last-fart-makes-you-cry/vp-AAhzIBU',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.msn.com/en-ae/entertainment/bollywood/watch-how-salman-khan-reacted-when-asked-if-he-would-apologize-for-his-\u2018raped-woman\u2019-comment/vi-AAhvzW6',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'data-metadata\\s*=\\s*([\"\\'])(?P<data>.+?)\\1',\n                webpage, 'video data', default='{}', group='data'),\n            display_id, transform_source=unescapeHTML)\n\n        if not video:\n            error = unescapeHTML(self._search_regex(\n                r'data-error=([\"\\'])(?P<error>.+?)\\1',\n                webpage, 'error', group='error'))\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error), expected=True)\n\n        title = video['title']\n\n        formats = []\n        for file_ in video.get('videoFiles', []):\n            format_url = file_.get('url')\n            if not format_url:\n                continue\n            if 'm3u8' in format_url:\n                \n                \n                m3u8_formats = self._extract_m3u8_formats(\n                    format_url, display_id, 'mp4',\n                    m3u8_id='hls', fatal=False)\n                formats.extend(m3u8_formats)\n            elif determine_ext(format_url) == 'ism':\n                formats.extend(self._extract_ism_formats(\n                    format_url + '/Manifest', display_id, 'mss', fatal=False))\n            else:\n                formats.append({\n                    'url': format_url,\n                    'ext': 'mp4',\n                    'format_id': 'http',\n                    'width': int_or_none(file_.get('width')),\n                    'height': int_or_none(file_.get('height')),\n                })\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for file_ in video.get('files', []):\n            format_url = file_.get('url')\n            format_code = file_.get('formatCode')\n            if not format_url or not format_code:\n                continue\n            if compat_str(format_code) == '3100':\n                subtitles.setdefault(file_.get('culture', 'en'), []).append({\n                    'ext': determine_ext(format_url, 'ttml'),\n                    'url': format_url,\n                })\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': video.get('description'),\n            'thumbnail': video.get('headlineImage', {}).get('url'),\n            'duration': int_or_none(video.get('durationSecs')),\n            'uploader': video.get('sourceFriendly'),\n            'uploader_id': video.get('providerId'),\n            'creator': video.get('creator'),\n            'subtitles': subtitles,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# geo restricted\n# m3u8_native should not be used here until\n# https://github.com/rg3/youtube-dl/issues/9913 is fixed\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    unescapeHTML,\n)\n\n\nclass MSNIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?msn\\.com/(?:[^/]+/)+(?P<display_id>[^/]+)/[a-z]{2}-(?P<id>[\\da-zA-Z]+)'\n    _TESTS = [{\n        'url': 'http://www.msn.com/en-ae/foodanddrink/joinourtable/criminal-minds-shemar-moore-shares-a-touching-goodbye-message/vp-BBqQYNE',\n        'md5': '8442f66c116cbab1ff7098f986983458',\n        'info_dict': {\n            'id': 'BBqQYNE',\n            'display_id': 'criminal-minds-shemar-moore-shares-a-touching-goodbye-message',\n            'ext': 'mp4',\n            'title': 'Criminal Minds - Shemar Moore Shares A Touching Goodbye Message',\n            'description': 'md5:e8e89b897b222eb33a6b5067a8f1bc25',\n            'duration': 104,\n            'uploader': 'CBS Entertainment',\n            'uploader_id': 'IT0X5aoJ6bJgYerJXSDCgFmYPB1__54v',\n        },\n    }, {\n        'url': 'http://www.msn.com/en-ae/news/offbeat/meet-the-nine-year-old-self-made-millionaire/ar-BBt6ZKf',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.msn.com/en-ae/video/watch/obama-a-lot-of-people-will-be-disappointed/vi-AAhxUMH',\n        'only_matching': True,\n    }, {\n        # geo restricted\n        'url': 'http://www.msn.com/en-ae/foodanddrink/joinourtable/the-first-fart-makes-you-laugh-the-last-fart-makes-you-cry/vp-AAhzIBU',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.msn.com/en-ae/entertainment/bollywood/watch-how-salman-khan-reacted-when-asked-if-he-would-apologize-for-his-\u2018raped-woman\u2019-comment/vi-AAhvzW6',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'data-metadata\\s*=\\s*([\"\\'])(?P<data>.+?)\\1',\n                webpage, 'video data', default='{}', group='data'),\n            display_id, transform_source=unescapeHTML)\n\n        if not video:\n            error = unescapeHTML(self._search_regex(\n                r'data-error=([\"\\'])(?P<error>.+?)\\1',\n                webpage, 'error', group='error'))\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error), expected=True)\n\n        title = video['title']\n\n        formats = []\n        for file_ in video.get('videoFiles', []):\n            format_url = file_.get('url')\n            if not format_url:\n                continue\n            if 'm3u8' in format_url:\n                # m3u8_native should not be used here until\n                # https://github.com/rg3/youtube-dl/issues/9913 is fixed\n                m3u8_formats = self._extract_m3u8_formats(\n                    format_url, display_id, 'mp4',\n                    m3u8_id='hls', fatal=False)\n                formats.extend(m3u8_formats)\n            elif determine_ext(format_url) == 'ism':\n                formats.extend(self._extract_ism_formats(\n                    format_url + '/Manifest', display_id, 'mss', fatal=False))\n            else:\n                formats.append({\n                    'url': format_url,\n                    'ext': 'mp4',\n                    'format_id': 'http',\n                    'width': int_or_none(file_.get('width')),\n                    'height': int_or_none(file_.get('height')),\n                })\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for file_ in video.get('files', []):\n            format_url = file_.get('url')\n            format_code = file_.get('formatCode')\n            if not format_url or not format_code:\n                continue\n            if compat_str(format_code) == '3100':\n                subtitles.setdefault(file_.get('culture', 'en'), []).append({\n                    'ext': determine_ext(format_url, 'ttml'),\n                    'url': format_url,\n                })\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': video.get('description'),\n            'thumbnail': video.get('headlineImage', {}).get('url'),\n            'duration': int_or_none(video.get('durationSecs')),\n            'uploader': video.get('sourceFriendly'),\n            'uploader_id': video.get('providerId'),\n            'creator': video.get('creator'),\n            'subtitles': subtitles,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "msn.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/msn.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}