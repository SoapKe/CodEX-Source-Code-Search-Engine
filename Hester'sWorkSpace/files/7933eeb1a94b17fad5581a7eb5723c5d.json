{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport ipaddress\nimport platform\nimport responses\nimport pytest\nimport tempfile\n\nfrom django.core.exceptions import SuspiciousOperation\nfrom mock import patch\n\nfrom sentry import http\nfrom sentry.testutils import TestCase\n\n\nclass HttpTest(TestCase):\n    @responses.activate\n    @patch('socket.getaddrinfo')\n    def test_simple(self, mock_getaddrinfo):\n        mock_getaddrinfo.return_value = [(2, 1, 6, '', ('81.0.0.1', 0))]\n        responses.add(responses.GET, 'http://example.com', body='foo bar')\n\n        resp = http.safe_urlopen('http://example.com')\n        data = http.safe_urlread(resp)\n        assert data.decode('utf-8') == 'foo bar'\n\n        request = responses.calls[0].request\n        assert 'User-Agent' in request.headers\n        assert 'gzip' in request.headers.get('Accept-Encoding', '')\n\n    # XXX(dcramer): we can't use responses here as it hooks Session.send\n    \n    def test_ip_blacklist(self):\n        http.DISALLOWED_IPS = set(\n            [\n                ipaddress.ip_network(u'127.0.0.1'),\n                ipaddress.ip_network(u'::1'),\n                ipaddress.ip_network(u'10.0.0.0/8'),\n            ]\n        )\n        with pytest.raises(SuspiciousOperation):\n            http.safe_urlopen('http://127.0.0.1')\n        with pytest.raises(SuspiciousOperation):\n            http.safe_urlopen('http://10.0.0.10')\n        with pytest.raises(SuspiciousOperation):\n            \n            http.safe_urlopen('http://2130706433')\n        with pytest.raises(SuspiciousOperation):\n            \n            http.safe_urlopen('http://[::1]')\n\n    @pytest.mark.skipif(\n        platform.system() == 'Darwin',\n        reason='macOS is always broken, see comment in sentry/http.py'\n    )\n    def test_garbage_ip(self):\n        http.DISALLOWED_IPS = set([ipaddress.ip_network(u'127.0.0.1')])\n        with pytest.raises(SuspiciousOperation):\n            \n            http.safe_urlopen('http://0177.0000.0000.0001')\n\n    @responses.activate\n    def test_fetch_file(self):\n        responses.add(\n            responses.GET, 'http://example.com', body='foo bar', content_type='application/json'\n        )\n\n        temp = tempfile.TemporaryFile()\n        result = http.fetch_file(url='http://example.com', domain_lock_enabled=False, outfile=temp)\n        temp.seek(0)\n        assert result.body is None\n        assert temp.read() == 'foo bar'\n        temp.close()\n", "comments": "  xxx(dcramer)  use responses hooks session send     responses activate     2130706433  dword  127 0 0 1     ipv6     0177 0000 0000 0001  octal  127 0 0 1  ", "content": "from __future__ import absolute_import\n\nimport ipaddress\nimport platform\nimport responses\nimport pytest\nimport tempfile\n\nfrom django.core.exceptions import SuspiciousOperation\nfrom mock import patch\n\nfrom sentry import http\nfrom sentry.testutils import TestCase\n\n\nclass HttpTest(TestCase):\n    @responses.activate\n    @patch('socket.getaddrinfo')\n    def test_simple(self, mock_getaddrinfo):\n        mock_getaddrinfo.return_value = [(2, 1, 6, '', ('81.0.0.1', 0))]\n        responses.add(responses.GET, 'http://example.com', body='foo bar')\n\n        resp = http.safe_urlopen('http://example.com')\n        data = http.safe_urlread(resp)\n        assert data.decode('utf-8') == 'foo bar'\n\n        request = responses.calls[0].request\n        assert 'User-Agent' in request.headers\n        assert 'gzip' in request.headers.get('Accept-Encoding', '')\n\n    # XXX(dcramer): we can't use responses here as it hooks Session.send\n    # @responses.activate\n    def test_ip_blacklist(self):\n        http.DISALLOWED_IPS = set(\n            [\n                ipaddress.ip_network(u'127.0.0.1'),\n                ipaddress.ip_network(u'::1'),\n                ipaddress.ip_network(u'10.0.0.0/8'),\n            ]\n        )\n        with pytest.raises(SuspiciousOperation):\n            http.safe_urlopen('http://127.0.0.1')\n        with pytest.raises(SuspiciousOperation):\n            http.safe_urlopen('http://10.0.0.10')\n        with pytest.raises(SuspiciousOperation):\n            # '2130706433' is dword for '127.0.0.1'\n            http.safe_urlopen('http://2130706433')\n        with pytest.raises(SuspiciousOperation):\n            # ipv6\n            http.safe_urlopen('http://[::1]')\n\n    @pytest.mark.skipif(\n        platform.system() == 'Darwin',\n        reason='macOS is always broken, see comment in sentry/http.py'\n    )\n    def test_garbage_ip(self):\n        http.DISALLOWED_IPS = set([ipaddress.ip_network(u'127.0.0.1')])\n        with pytest.raises(SuspiciousOperation):\n            # '0177.0000.0000.0001' is an octal for '127.0.0.1'\n            http.safe_urlopen('http://0177.0000.0000.0001')\n\n    @responses.activate\n    def test_fetch_file(self):\n        responses.add(\n            responses.GET, 'http://example.com', body='foo bar', content_type='application/json'\n        )\n\n        temp = tempfile.TemporaryFile()\n        result = http.fetch_file(url='http://example.com', domain_lock_enabled=False, outfile=temp)\n        temp.seek(0)\n        assert result.body is None\n        assert temp.read() == 'foo bar'\n        temp.close()\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_http.py", "id": "7933eeb1a94b17fad5581a7eb5723c5d", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/test_http.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}