{"author": "mitmproxy", "code": "from mitmproxy.tools.console import keymap\nfrom mitmproxy.test import taddons\nfrom unittest import mock\nimport pytest\n\n\ndef test_binding():\n    b = keymap.Binding(\"space\", \"cmd\", [\"options\"], \"\")\n    assert b.keyspec() == \" \"\n\n\ndef test_bind():\n    with taddons.context() as tctx:\n        km = keymap.Keymap(tctx.master)\n        km.executor = mock.Mock()\n\n        with pytest.raises(ValueError):\n            km.add(\"foo\", \"bar\", [\"unsupported\"])\n\n        km.add(\"key\", \"str\", [\"options\", \"commands\"])\n        assert km.get(\"options\", \"key\")\n        assert km.get(\"commands\", \"key\")\n        assert not km.get(\"flowlist\", \"key\")\n        assert len((km.list(\"commands\"))) == 1\n\n        km.handle(\"unknown\", \"unknown\")\n        assert not km.executor.called\n\n        km.handle(\"options\", \"key\")\n        assert km.executor.called\n\n        km.add(\"glob\", \"str\", [\"global\"])\n        km.executor = mock.Mock()\n        km.handle(\"options\", \"glob\")\n        assert km.executor.called\n\n        assert len((km.list(\"global\"))) == 1\n\n\ndef test_join():\n    with taddons.context() as tctx:\n        km = keymap.Keymap(tctx.master)\n        km.add(\"key\", \"str\", [\"options\"], \"help1\")\n        km.add(\"key\", \"str\", [\"commands\"])\n\n        assert len(km.bindings) == 1\n        assert len(km.bindings[0].contexts) == 2\n        assert km.bindings[0].help == \"help1\"\n        km.add(\"key\", \"str\", [\"commands\"], \"help2\")\n        assert len(km.bindings) == 1\n        assert len(km.bindings[0].contexts) == 2\n        assert km.bindings[0].help == \"help2\"\n\n        assert km.get(\"commands\", \"key\")\n        km.unbind(km.bindings[0])\n        assert len(km.bindings) == 0\n        assert not km.get(\"commands\", \"key\")\n\n\ndef test_remove():\n    with taddons.context() as tctx:\n        km = keymap.Keymap(tctx.master)\n        km.add(\"key\", \"str\", [\"options\", \"commands\"], \"help1\")\n        assert len(km.bindings) == 1\n        assert \"options\" in km.bindings[0].contexts\n\n        km.remove(\"key\", [\"options\"])\n        assert len(km.bindings) == 1\n        assert \"options\" not in km.bindings[0].contexts\n\n        km.remove(\"key\", [\"commands\"])\n        assert len(km.bindings) == 0\n", "comments": "", "content": "from mitmproxy.tools.console import keymap\nfrom mitmproxy.test import taddons\nfrom unittest import mock\nimport pytest\n\n\ndef test_binding():\n    b = keymap.Binding(\"space\", \"cmd\", [\"options\"], \"\")\n    assert b.keyspec() == \" \"\n\n\ndef test_bind():\n    with taddons.context() as tctx:\n        km = keymap.Keymap(tctx.master)\n        km.executor = mock.Mock()\n\n        with pytest.raises(ValueError):\n            km.add(\"foo\", \"bar\", [\"unsupported\"])\n\n        km.add(\"key\", \"str\", [\"options\", \"commands\"])\n        assert km.get(\"options\", \"key\")\n        assert km.get(\"commands\", \"key\")\n        assert not km.get(\"flowlist\", \"key\")\n        assert len((km.list(\"commands\"))) == 1\n\n        km.handle(\"unknown\", \"unknown\")\n        assert not km.executor.called\n\n        km.handle(\"options\", \"key\")\n        assert km.executor.called\n\n        km.add(\"glob\", \"str\", [\"global\"])\n        km.executor = mock.Mock()\n        km.handle(\"options\", \"glob\")\n        assert km.executor.called\n\n        assert len((km.list(\"global\"))) == 1\n\n\ndef test_join():\n    with taddons.context() as tctx:\n        km = keymap.Keymap(tctx.master)\n        km.add(\"key\", \"str\", [\"options\"], \"help1\")\n        km.add(\"key\", \"str\", [\"commands\"])\n\n        assert len(km.bindings) == 1\n        assert len(km.bindings[0].contexts) == 2\n        assert km.bindings[0].help == \"help1\"\n        km.add(\"key\", \"str\", [\"commands\"], \"help2\")\n        assert len(km.bindings) == 1\n        assert len(km.bindings[0].contexts) == 2\n        assert km.bindings[0].help == \"help2\"\n\n        assert km.get(\"commands\", \"key\")\n        km.unbind(km.bindings[0])\n        assert len(km.bindings) == 0\n        assert not km.get(\"commands\", \"key\")\n\n\ndef test_remove():\n    with taddons.context() as tctx:\n        km = keymap.Keymap(tctx.master)\n        km.add(\"key\", \"str\", [\"options\", \"commands\"], \"help1\")\n        assert len(km.bindings) == 1\n        assert \"options\" in km.bindings[0].contexts\n\n        km.remove(\"key\", [\"options\"])\n        assert len(km.bindings) == 1\n        assert \"options\" not in km.bindings[0].contexts\n\n        km.remove(\"key\", [\"commands\"])\n        assert len(km.bindings) == 0\n", "description": "An interactive TLS-capable intercepting HTTP proxy for penetration testers and software developers.", "file_name": "test_keymap.py", "id": "cd1add303ba1c335aa413f13e29fc771", "language": "Python", "project_name": "mitmproxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mitmproxy-mitmproxy/mitmproxy-mitmproxy-3c7725a/test/mitmproxy/tools/console/test_keymap.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:30:56Z", "url": "https://github.com/mitmproxy/mitmproxy", "wiki": false}