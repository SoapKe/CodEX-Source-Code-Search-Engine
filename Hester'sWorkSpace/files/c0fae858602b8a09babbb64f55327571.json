{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_filter_entry\nshort_description: Manage filter entries (vz:Entry)\ndescription:\n- Manage filter entries for a filter on Cisco ACI fabrics.\nnotes:\n- The C(tenant) and C(filter) used must exist before using this module in your playbook.\n  The M(aci_tenant) and M(aci_filter) modules can be used for this.\n- More information about the internal APIC class B(vz:Entry) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Jacob McGill (@jmcgill298)\nversion_added: '2.4'\noptions:\n  arp_flag:\n    description:\n    - The arp flag to use when the ether_type is arp.\n    - The APIC defaults new Filter Entries to C(unspecified).\n    choices: [ arp_reply, arp_request, unspecified ]\n    default: unspecified\n  description:\n    description:\n    - Description for the Filter Entry.\n    aliases: [ descr ]\n  dst_port:\n    description:\n    - Used to set both destination start and end ports to the same value when ip_protocol is tcp or udp.\n    - The APIC defaults new Filter Entries to C(unspecified).\n    choices: [ Valid TCP/UDP Port Ranges]\n    default: unspecified\n  dst_port_end:\n    description:\n    - Used to set the destination end port when ip_protocol is tcp or udp.\n    - The APIC defaults new Filter Entries to C(unspecified).\n    choices: [ Valid TCP/UDP Port Ranges]\n    default: unspecified\n  dst_port_start:\n    description:\n    - Used to set the destination start port when ip_protocol is tcp or udp.\n    - The APIC defaults new Filter Entries to C(unspecified).\n    choices: [ Valid TCP/UDP Port Ranges]\n    default: unspecified\n  entry:\n    description:\n    - Then name of the Filter Entry.\n    aliases: [ entry_name, filter_entry, name ]\n  ether_type:\n    description:\n    - The Ethernet type.\n    - The APIC defaults new Filter Entries to C(unspecified).\n    choices: [ arp, fcoe, ip, mac_security, mpls_ucast, trill, unspecified ]\n    default: unspecified\n  filter:\n    description:\n      The name of Filter that the entry should belong to.\n    aliases: [ filter_name ]\n  icmp_msg_type:\n    description:\n    - ICMPv4 message type; used when ip_protocol is icmp.\n    - The APIC defaults new Filter Entries to C(unspecified).\n    choices: [ dst_unreachable, echo, echo_reply, src_quench, time_exceeded, unspecified ]\n    default: unspecified\n  icmp6_msg_type:\n    description:\n    - ICMPv6 message type; used when ip_protocol is icmpv6.\n    - The APIC defaults new Filter Entries to C(unspecified).\n    choices: [ dst_unreachable, echo_request, echo_reply, neighbor_advertisement, neighbor_solicitation, redirect, time_exceeded, unspecified ]\n    default: unspecified\n  ip_protocol:\n    description:\n    - The IP Protocol type when ether_type is ip.\n    - The APIC defaults new Filter Entries to C(unspecified).\n    choices: [ eigrp, egp, icmp, icmpv6, igmp, igp, l2tp, ospfigp, pim, tcp, udp, unspecified ]\n    default: unspecified\n  state:\n    description:\n    - present, absent, query\n    default: present\n    choices: [ absent, present, query ]\n  stateful:\n    description:\n    - Determines the statefulness of the filter entry.\n  tenant:\n    description:\n    - The name of the tenant.\n    aliases: [ tenant_name ]\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- aci_filter_entry:\n    host: \"{{ inventory_hostname }}\"\n    username: \"{{ user }}\"\n    password: \"{{ pass }}\"\n    state: \"{{ state }}\"\n    entry: \"{{ entry }}\"\n    tenant: \"{{ tenant }}\"\n    ether_name: \"{{  ether_name }}\"\n    icmp_msg_type: \"{{ icmp_msg_type }}\"\n    filter: \"{{ filter }}\"\n    descr: \"{{ descr }}\"\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\nVALID_ARP_FLAGS = ['arp_reply', 'arp_request', 'unspecified']\nVALID_ETHER_TYPES = ['arp', 'fcoe', 'ip', 'mac_security', 'mpls_ucast', 'trill', 'unspecified']\nVALID_ICMP_TYPES = ['dst_unreachable', 'echo', 'echo_reply', 'src_quench', 'time_exceeded',\n                    'unspecified', 'echo-rep', 'dst-unreach']\nVALID_ICMP6_TYPES = ['dst_unreachable', 'echo_request', 'echo_reply', 'neighbor_advertisement',\n                     'neighbor_solicitation', 'redirect', 'time_exceeded', 'unspecified']\nVALID_IP_PROTOCOLS = ['eigrp', 'egp', 'icmp', 'icmpv6', 'igmp', 'igp', 'l2tp', 'ospfigp', 'pim', 'tcp', 'udp', 'unspecified']\n\n\nARP_FLAG_MAPPING = dict(arp_reply='reply', arp_request='req', unspecified=None)\nFILTER_PORT_MAPPING = {'443': 'https', '25': 'smtp', '80': 'http', '20': 'ftpData', '53': 'dns', '110': 'pop3', '554': 'rtsp'}\nICMP_MAPPING = {'dst_unreachable': 'dst-unreach', 'echo': 'echo', 'echo_reply': 'echo-rep', 'src_quench': 'src-quench',\n                'time_exceeded': 'time-exceeded', 'unspecified': 'unspecified', 'echo-rep': 'echo-rep', 'dst-unreach': 'dst-unreach'}\nICMP6_MAPPING = dict(dst_unreachable='dst-unreach', echo_request='echo-req', echo_reply='echo-rep', neighbor_advertisement='nbr-advert',\n                     neighbor_solicitation='nbr-solicit', redirect='redirect', time_exceeded='time-exceeded', unspecified='unspecified')\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        arp_flag=dict(type='str', choices=VALID_ARP_FLAGS),\n        description=dict(type='str', aliases=['descr']),\n        dst_port=dict(type='str'),\n        dst_port_end=dict(type='str'),\n        dst_port_start=dict(type='str'),\n        entry=dict(type='str', aliases=['entry_name', 'filter_entry', 'name']),  \n        ether_type=dict(choices=VALID_ETHER_TYPES, type='str'),\n        filter=dict(type='str', aliases=['filter_name']),  \n        icmp_msg_type=dict(type='str', choices=VALID_ICMP_TYPES),\n        icmp6_msg_type=dict(type='str', choices=VALID_ICMP6_TYPES),\n        ip_protocol=dict(choices=VALID_IP_PROTOCOLS, type='str'),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n        stateful=dict(type='bool'),\n        tenant=dict(type=\"str\", aliases=['tenant_name']),  \n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['entry', 'filter', 'tenant']],\n            ['state', 'present', ['entry', 'filter', 'tenant']],\n        ],\n    )\n\n    aci = ACIModule(module)\n\n    arp_flag = module.params['arp_flag']\n    if arp_flag is not None:\n        arp_flag = ARP_FLAG_MAPPING[arp_flag]\n    description = module.params['description']\n    dst_port = module.params['dst_port']\n    if dst_port in FILTER_PORT_MAPPING.keys():\n        dst_port = FILTER_PORT_MAPPING[dst_port]\n    dst_end = module.params['dst_port_end']\n    if dst_end in FILTER_PORT_MAPPING.keys():\n        dst_end = FILTER_PORT_MAPPING[dst_end]\n    dst_start = module.params['dst_port_start']\n    if dst_start in FILTER_PORT_MAPPING.keys():\n        dst_start = FILTER_PORT_MAPPING[dst_start]\n    entry = module.params['entry']\n    ether_type = module.params['ether_type']\n    filter_name = module.params['filter']\n    icmp_msg_type = module.params['icmp_msg_type']\n    if icmp_msg_type is not None:\n        icmp_msg_type = ICMP_MAPPING[icmp_msg_type]\n    icmp6_msg_type = module.params['icmp6_msg_type']\n    if icmp6_msg_type is not None:\n        icmp6_msg_type = ICMP6_MAPPING[icmp6_msg_type]\n    ip_protocol = module.params['ip_protocol']\n    state = module.params['state']\n    stateful = aci.boolean(module.params['stateful'])\n    tenant = module.params['tenant']\n\n    \n    if dst_port is not None and (dst_end is not None or dst_start is not None):\n        module.fail_json(msg=\"Parameter 'dst_port' cannot be used with 'dst_end' and 'dst_start'\")\n    elif dst_port is not None:\n        dst_end = dst_port\n        dst_start = dst_port\n\n    aci.construct_url(\n        root_class=dict(\n            aci_class='fvTenant',\n            aci_rn='tn-{0}'.format(tenant),\n            filter_target='eq(fvTenant.name, \"{0}\")'.format(tenant),\n            module_object=tenant,\n        ),\n        subclass_1=dict(\n            aci_class='vzFilter',\n            aci_rn='flt-{0}'.format(filter_name),\n            filter_target='eq(vzFilter.name, \"{0}\")'.format(filter_name),\n            module_object=filter_name,\n        ),\n        subclass_2=dict(\n            aci_class='vzEntry',\n            aci_rn='e-{0}'.format(entry),\n            filter_target='eq(vzEntry.name, \"{0}\")'.format(entry),\n            module_object=entry\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='vzEntry',\n            class_config=dict(\n                arpOpc=arp_flag,\n                descr=description,\n                dFromPort=dst_start,\n                dToPort=dst_end,\n                etherT=ether_type,\n                icmpv4T=icmp_msg_type,\n                icmpv6T=icmp6_msg_type,\n                name=entry,\n                prot=ip_protocol,\n                stateful=stateful,\n            ),\n        )\n\n        aci.get_diff(aci_class='vzEntry')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  aci filter entry short description  manage filter entries (vz entry) description    manage filter entries filter cisco aci fabrics  notes    the c(tenant) c(filter) used must exist using module playbook    the m(aci tenant) m(aci filter) modules used    more information internal apic class b(vz entry)   l(the apic management information model reference https   developer cisco com docs apic mim ref )  author    jacob mcgill ( jmcgill298) version added   2 4  options    arp flag      description        the arp flag use ether type arp        the apic defaults new filter entries c(unspecified)      choices    arp reply  arp request  unspecified       default  unspecified   description      description        description filter entry      aliases    descr     dst port      description        used set destination start end ports value ip protocol tcp udp        the apic defaults new filter entries c(unspecified)      choices    valid tcp udp port ranges      default  unspecified   dst port end      description        used set destination end port ip protocol tcp udp        the apic defaults new filter entries c(unspecified)      choices    valid tcp udp port ranges      default  unspecified   dst port start      description        used set destination start port ip protocol tcp udp        the apic defaults new filter entries c(unspecified)      choices    valid tcp udp port ranges      default  unspecified   entry      description        then name filter entry      aliases    entry name  filter entry  name     ether type      description        the ethernet type        the apic defaults new filter entries c(unspecified)      choices    arp  fcoe  ip  mac security  mpls ucast  trill  unspecified       default  unspecified   filter      description        the name filter entry belong      aliases    filter name     icmp msg type      description        icmpv4 message type  used ip protocol icmp        the apic defaults new filter entries c(unspecified)      choices    dst unreachable  echo  echo reply  src quench  time exceeded  unspecified       default  unspecified   icmp6 msg type      description        icmpv6 message type  used ip protocol icmpv6        the apic defaults new filter entries c(unspecified)      choices    dst unreachable  echo request  echo reply  neighbor advertisement  neighbor solicitation  redirect  time exceeded  unspecified       default  unspecified   ip protocol      description        the ip protocol type ether type ip        the apic defaults new filter entries c(unspecified)      choices    eigrp  egp  icmp  icmpv6  igmp  igp  l2tp  ospfigp  pim  tcp  udp  unspecified       default  unspecified   state      description        present  absent  query     default  present     choices    absent  present  query     stateful      description        determines statefulness filter entry    tenant      description        the name tenant      aliases    tenant name   extends documentation fragment  aci      examples   r      aci filter entry      host      inventory hostname         username      user         password      pass         state      state         entry      entry         tenant      tenant         ether name       ether name         icmp msg type      icmp msg type         filter      filter         descr      descr          return   r    current    description  the existing configuration apic module finished   returned  success   type  list   sample                               fvtenant                      attributes                          descr    production environment                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      error    description  the error information returned apic   returned  failure   type  dict   sample                 code    122            text    unknown managed object class foo        raw    description  the raw output returned apic rest api (xml json)   returned  parse error   type  string   sample     xml version  1 0  encoding  utf 8    imdata totalcount  1   error code  122  text  unknown managed object class foo     imdata   sent    description  the actual minimal configuration pushed apic   returned  info   type  list   sample                 fvtenant                  attributes                      descr    production environment                                previous    description  the original configuration apic module started   returned  info   type  list   sample                               fvtenant                      attributes                          descr    production                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      proposed    description  the assembled configuration user provided parameters   returned  info   type  dict   sample                 fvtenant                  attributes                      descr    production environment                    name    production                                filter string    description  the filter string used request   returned  failure debug   type  string   sample   rsp prop include config method    description  the http method used request apic   returned  failure debug   type  string   sample  post response    description  the http response apic   returned  failure debug   type  string   sample  ok (30 bytes) status    description  the http status apic   returned  failure debug   type  int   sample  200 url    description  the http url used request apic   returned  failure debug   type  string   sample  https   10 11 12 13 api mo uni tn production json         usr bin python        coding  utf 8        gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    mapping dicts used normalize proposed data apic expects  keep diffs accurate    not required querying objects    not required querying objects    not required querying objects    validate dst port passed dst start dst end ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_filter_entry\nshort_description: Manage filter entries (vz:Entry)\ndescription:\n- Manage filter entries for a filter on Cisco ACI fabrics.\nnotes:\n- The C(tenant) and C(filter) used must exist before using this module in your playbook.\n  The M(aci_tenant) and M(aci_filter) modules can be used for this.\n- More information about the internal APIC class B(vz:Entry) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Jacob McGill (@jmcgill298)\nversion_added: '2.4'\noptions:\n  arp_flag:\n    description:\n    - The arp flag to use when the ether_type is arp.\n    - The APIC defaults new Filter Entries to C(unspecified).\n    choices: [ arp_reply, arp_request, unspecified ]\n    default: unspecified\n  description:\n    description:\n    - Description for the Filter Entry.\n    aliases: [ descr ]\n  dst_port:\n    description:\n    - Used to set both destination start and end ports to the same value when ip_protocol is tcp or udp.\n    - The APIC defaults new Filter Entries to C(unspecified).\n    choices: [ Valid TCP/UDP Port Ranges]\n    default: unspecified\n  dst_port_end:\n    description:\n    - Used to set the destination end port when ip_protocol is tcp or udp.\n    - The APIC defaults new Filter Entries to C(unspecified).\n    choices: [ Valid TCP/UDP Port Ranges]\n    default: unspecified\n  dst_port_start:\n    description:\n    - Used to set the destination start port when ip_protocol is tcp or udp.\n    - The APIC defaults new Filter Entries to C(unspecified).\n    choices: [ Valid TCP/UDP Port Ranges]\n    default: unspecified\n  entry:\n    description:\n    - Then name of the Filter Entry.\n    aliases: [ entry_name, filter_entry, name ]\n  ether_type:\n    description:\n    - The Ethernet type.\n    - The APIC defaults new Filter Entries to C(unspecified).\n    choices: [ arp, fcoe, ip, mac_security, mpls_ucast, trill, unspecified ]\n    default: unspecified\n  filter:\n    description:\n      The name of Filter that the entry should belong to.\n    aliases: [ filter_name ]\n  icmp_msg_type:\n    description:\n    - ICMPv4 message type; used when ip_protocol is icmp.\n    - The APIC defaults new Filter Entries to C(unspecified).\n    choices: [ dst_unreachable, echo, echo_reply, src_quench, time_exceeded, unspecified ]\n    default: unspecified\n  icmp6_msg_type:\n    description:\n    - ICMPv6 message type; used when ip_protocol is icmpv6.\n    - The APIC defaults new Filter Entries to C(unspecified).\n    choices: [ dst_unreachable, echo_request, echo_reply, neighbor_advertisement, neighbor_solicitation, redirect, time_exceeded, unspecified ]\n    default: unspecified\n  ip_protocol:\n    description:\n    - The IP Protocol type when ether_type is ip.\n    - The APIC defaults new Filter Entries to C(unspecified).\n    choices: [ eigrp, egp, icmp, icmpv6, igmp, igp, l2tp, ospfigp, pim, tcp, udp, unspecified ]\n    default: unspecified\n  state:\n    description:\n    - present, absent, query\n    default: present\n    choices: [ absent, present, query ]\n  stateful:\n    description:\n    - Determines the statefulness of the filter entry.\n  tenant:\n    description:\n    - The name of the tenant.\n    aliases: [ tenant_name ]\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- aci_filter_entry:\n    host: \"{{ inventory_hostname }}\"\n    username: \"{{ user }}\"\n    password: \"{{ pass }}\"\n    state: \"{{ state }}\"\n    entry: \"{{ entry }}\"\n    tenant: \"{{ tenant }}\"\n    ether_name: \"{{  ether_name }}\"\n    icmp_msg_type: \"{{ icmp_msg_type }}\"\n    filter: \"{{ filter }}\"\n    descr: \"{{ descr }}\"\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\nVALID_ARP_FLAGS = ['arp_reply', 'arp_request', 'unspecified']\nVALID_ETHER_TYPES = ['arp', 'fcoe', 'ip', 'mac_security', 'mpls_ucast', 'trill', 'unspecified']\nVALID_ICMP_TYPES = ['dst_unreachable', 'echo', 'echo_reply', 'src_quench', 'time_exceeded',\n                    'unspecified', 'echo-rep', 'dst-unreach']\nVALID_ICMP6_TYPES = ['dst_unreachable', 'echo_request', 'echo_reply', 'neighbor_advertisement',\n                     'neighbor_solicitation', 'redirect', 'time_exceeded', 'unspecified']\nVALID_IP_PROTOCOLS = ['eigrp', 'egp', 'icmp', 'icmpv6', 'igmp', 'igp', 'l2tp', 'ospfigp', 'pim', 'tcp', 'udp', 'unspecified']\n\n# mapping dicts are used to normalize the proposed data to what the APIC expects, which will keep diffs accurate\nARP_FLAG_MAPPING = dict(arp_reply='reply', arp_request='req', unspecified=None)\nFILTER_PORT_MAPPING = {'443': 'https', '25': 'smtp', '80': 'http', '20': 'ftpData', '53': 'dns', '110': 'pop3', '554': 'rtsp'}\nICMP_MAPPING = {'dst_unreachable': 'dst-unreach', 'echo': 'echo', 'echo_reply': 'echo-rep', 'src_quench': 'src-quench',\n                'time_exceeded': 'time-exceeded', 'unspecified': 'unspecified', 'echo-rep': 'echo-rep', 'dst-unreach': 'dst-unreach'}\nICMP6_MAPPING = dict(dst_unreachable='dst-unreach', echo_request='echo-req', echo_reply='echo-rep', neighbor_advertisement='nbr-advert',\n                     neighbor_solicitation='nbr-solicit', redirect='redirect', time_exceeded='time-exceeded', unspecified='unspecified')\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        arp_flag=dict(type='str', choices=VALID_ARP_FLAGS),\n        description=dict(type='str', aliases=['descr']),\n        dst_port=dict(type='str'),\n        dst_port_end=dict(type='str'),\n        dst_port_start=dict(type='str'),\n        entry=dict(type='str', aliases=['entry_name', 'filter_entry', 'name']),  # Not required for querying all objects\n        ether_type=dict(choices=VALID_ETHER_TYPES, type='str'),\n        filter=dict(type='str', aliases=['filter_name']),  # Not required for querying all objects\n        icmp_msg_type=dict(type='str', choices=VALID_ICMP_TYPES),\n        icmp6_msg_type=dict(type='str', choices=VALID_ICMP6_TYPES),\n        ip_protocol=dict(choices=VALID_IP_PROTOCOLS, type='str'),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n        stateful=dict(type='bool'),\n        tenant=dict(type=\"str\", aliases=['tenant_name']),  # Not required for querying all objects\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['entry', 'filter', 'tenant']],\n            ['state', 'present', ['entry', 'filter', 'tenant']],\n        ],\n    )\n\n    aci = ACIModule(module)\n\n    arp_flag = module.params['arp_flag']\n    if arp_flag is not None:\n        arp_flag = ARP_FLAG_MAPPING[arp_flag]\n    description = module.params['description']\n    dst_port = module.params['dst_port']\n    if dst_port in FILTER_PORT_MAPPING.keys():\n        dst_port = FILTER_PORT_MAPPING[dst_port]\n    dst_end = module.params['dst_port_end']\n    if dst_end in FILTER_PORT_MAPPING.keys():\n        dst_end = FILTER_PORT_MAPPING[dst_end]\n    dst_start = module.params['dst_port_start']\n    if dst_start in FILTER_PORT_MAPPING.keys():\n        dst_start = FILTER_PORT_MAPPING[dst_start]\n    entry = module.params['entry']\n    ether_type = module.params['ether_type']\n    filter_name = module.params['filter']\n    icmp_msg_type = module.params['icmp_msg_type']\n    if icmp_msg_type is not None:\n        icmp_msg_type = ICMP_MAPPING[icmp_msg_type]\n    icmp6_msg_type = module.params['icmp6_msg_type']\n    if icmp6_msg_type is not None:\n        icmp6_msg_type = ICMP6_MAPPING[icmp6_msg_type]\n    ip_protocol = module.params['ip_protocol']\n    state = module.params['state']\n    stateful = aci.boolean(module.params['stateful'])\n    tenant = module.params['tenant']\n\n    # validate that dst_port is not passed with dst_start or dst_end\n    if dst_port is not None and (dst_end is not None or dst_start is not None):\n        module.fail_json(msg=\"Parameter 'dst_port' cannot be used with 'dst_end' and 'dst_start'\")\n    elif dst_port is not None:\n        dst_end = dst_port\n        dst_start = dst_port\n\n    aci.construct_url(\n        root_class=dict(\n            aci_class='fvTenant',\n            aci_rn='tn-{0}'.format(tenant),\n            filter_target='eq(fvTenant.name, \"{0}\")'.format(tenant),\n            module_object=tenant,\n        ),\n        subclass_1=dict(\n            aci_class='vzFilter',\n            aci_rn='flt-{0}'.format(filter_name),\n            filter_target='eq(vzFilter.name, \"{0}\")'.format(filter_name),\n            module_object=filter_name,\n        ),\n        subclass_2=dict(\n            aci_class='vzEntry',\n            aci_rn='e-{0}'.format(entry),\n            filter_target='eq(vzEntry.name, \"{0}\")'.format(entry),\n            module_object=entry\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='vzEntry',\n            class_config=dict(\n                arpOpc=arp_flag,\n                descr=description,\n                dFromPort=dst_start,\n                dToPort=dst_end,\n                etherT=ether_type,\n                icmpv4T=icmp_msg_type,\n                icmpv6T=icmp6_msg_type,\n                name=entry,\n                prot=ip_protocol,\n                stateful=stateful,\n            ),\n        )\n\n        aci.get_diff(aci_class='vzEntry')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "aci_filter_entry.py", "id": "c0fae858602b8a09babbb64f55327571", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aci/aci_filter_entry.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}