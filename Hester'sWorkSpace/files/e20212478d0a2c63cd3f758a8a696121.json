{"author": "ansible", "code": "\n\n# (c) 2016, Kamil Szczygiel <kamil.szczygiel () intel.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: influxdb_database\nshort_description: Manage InfluxDB databases\ndescription:\n    - Manage InfluxDB databases.\nversion_added: 2.1\nauthor: \"Kamil Szczygiel (@kamsz)\"\nrequirements:\n    - \"python >= 2.6\"\n    - \"influxdb >= 0.9\"\n    - requests\noptions:\n    database_name:\n        description:\n            - Name of the database.\n        required: true\n    state:\n        description:\n            - Determines if the database should be created or destroyed.\n        choices: [ present, absent ]\n        default: present\nextends_documentation_fragment: influxdb\n'''\n\nEXAMPLES = '''\n\n- name: Create database\n  influxdb_database:\n      hostname: \"{{influxdb_ip_address}}\"\n      database_name: \"{{influxdb_database_name}}\"\n\n- name: Destroy database\n  influxdb_database:\n      hostname: \"{{influxdb_ip_address}}\"\n      database_name: \"{{influxdb_database_name}}\"\n      state: absent\n\n- name: Create database using custom credentials\n  influxdb_database:\n      hostname: \"{{influxdb_ip_address}}\"\n      username: \"{{influxdb_username}}\"\n      password: \"{{influxdb_password}}\"\n      database_name: \"{{influxdb_database_name}}\"\n      ssl: yes\n      validate_certs: yes\n'''\n\nRETURN = '''\n\n'''\n\ntry:\n    import requests.exceptions\n    from influxdb import exceptions\nexcept ImportError:\n    pass\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.influxdb import InfluxDb\n\n\ndef find_database(module, client, database_name):\n    database = None\n\n    try:\n        databases = client.get_list_database()\n        for db in databases:\n            if db['name'] == database_name:\n                database = db\n                break\n    except requests.exceptions.ConnectionError as e:\n        module.fail_json(msg=str(e))\n    return database\n\n\ndef create_database(module, client, database_name):\n    if not module.check_mode:\n        try:\n            client.create_database(database_name)\n        except requests.exceptions.ConnectionError as e:\n            module.fail_json(msg=str(e))\n\n    module.exit_json(changed=True)\n\n\ndef drop_database(module, client, database_name):\n    if not module.check_mode:\n        try:\n            client.drop_database(database_name)\n        except exceptions.InfluxDBClientError as e:\n            module.fail_json(msg=e.content)\n\n    module.exit_json(changed=True)\n\n\ndef main():\n    argument_spec = InfluxDb.influxdb_argument_spec()\n    argument_spec.update(\n        database_name=dict(required=True, type='str'),\n        state=dict(default='present', type='str', choices=['present', 'absent'])\n    )\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True\n    )\n\n    state = module.params['state']\n\n    influxdb = InfluxDb(module)\n    client = influxdb.connect_to_influxdb()\n    database_name = influxdb.database_name\n    database = find_database(module, client, database_name)\n\n    if state == 'present':\n        if database:\n            module.exit_json(changed=False)\n        else:\n            create_database(module, client, database_name)\n\n    if state == 'absent':\n        if database:\n            drop_database(module, client, database_name)\n        else:\n            module.exit_json(changed=False)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  influxdb database short description  manage influxdb databases description        manage influxdb databases  version added  2 1 author   kamil szczygiel ( kamsz)  requirements         python    2 6         influxdb    0 9        requests options      database name          description                name database          required  true     state          description                determines database created destroyed          choices    present  absent           default  present extends documentation fragment  influxdb      examples         example influxdb database command ansible playbooks   name  create database   influxdb database        hostname     influxdb ip address          database name     influxdb database name       name  destroy database   influxdb database        hostname     influxdb ip address          database name     influxdb database name          state  absent    name  create database using custom credentials   influxdb database        hostname     influxdb ip address          username     influxdb username          password     influxdb password          database name     influxdb database name          ssl  yes       validate certs  yes      return         defaults         usr bin python    (c) 2016  kamil szczygiel  kamil szczygiel () intel com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    example influxdb database command ansible playbooks    defaults ", "content": "#!/usr/bin/python\n\n# (c) 2016, Kamil Szczygiel <kamil.szczygiel () intel.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: influxdb_database\nshort_description: Manage InfluxDB databases\ndescription:\n    - Manage InfluxDB databases.\nversion_added: 2.1\nauthor: \"Kamil Szczygiel (@kamsz)\"\nrequirements:\n    - \"python >= 2.6\"\n    - \"influxdb >= 0.9\"\n    - requests\noptions:\n    database_name:\n        description:\n            - Name of the database.\n        required: true\n    state:\n        description:\n            - Determines if the database should be created or destroyed.\n        choices: [ present, absent ]\n        default: present\nextends_documentation_fragment: influxdb\n'''\n\nEXAMPLES = '''\n# Example influxdb_database command from Ansible Playbooks\n- name: Create database\n  influxdb_database:\n      hostname: \"{{influxdb_ip_address}}\"\n      database_name: \"{{influxdb_database_name}}\"\n\n- name: Destroy database\n  influxdb_database:\n      hostname: \"{{influxdb_ip_address}}\"\n      database_name: \"{{influxdb_database_name}}\"\n      state: absent\n\n- name: Create database using custom credentials\n  influxdb_database:\n      hostname: \"{{influxdb_ip_address}}\"\n      username: \"{{influxdb_username}}\"\n      password: \"{{influxdb_password}}\"\n      database_name: \"{{influxdb_database_name}}\"\n      ssl: yes\n      validate_certs: yes\n'''\n\nRETURN = '''\n# only defaults\n'''\n\ntry:\n    import requests.exceptions\n    from influxdb import exceptions\nexcept ImportError:\n    pass\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.influxdb import InfluxDb\n\n\ndef find_database(module, client, database_name):\n    database = None\n\n    try:\n        databases = client.get_list_database()\n        for db in databases:\n            if db['name'] == database_name:\n                database = db\n                break\n    except requests.exceptions.ConnectionError as e:\n        module.fail_json(msg=str(e))\n    return database\n\n\ndef create_database(module, client, database_name):\n    if not module.check_mode:\n        try:\n            client.create_database(database_name)\n        except requests.exceptions.ConnectionError as e:\n            module.fail_json(msg=str(e))\n\n    module.exit_json(changed=True)\n\n\ndef drop_database(module, client, database_name):\n    if not module.check_mode:\n        try:\n            client.drop_database(database_name)\n        except exceptions.InfluxDBClientError as e:\n            module.fail_json(msg=e.content)\n\n    module.exit_json(changed=True)\n\n\ndef main():\n    argument_spec = InfluxDb.influxdb_argument_spec()\n    argument_spec.update(\n        database_name=dict(required=True, type='str'),\n        state=dict(default='present', type='str', choices=['present', 'absent'])\n    )\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True\n    )\n\n    state = module.params['state']\n\n    influxdb = InfluxDb(module)\n    client = influxdb.connect_to_influxdb()\n    database_name = influxdb.database_name\n    database = find_database(module, client, database_name)\n\n    if state == 'present':\n        if database:\n            module.exit_json(changed=False)\n        else:\n            create_database(module, client, database_name)\n\n    if state == 'absent':\n        if database:\n            drop_database(module, client, database_name)\n        else:\n            module.exit_json(changed=False)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "influxdb_database.py", "id": "e20212478d0a2c63cd3f758a8a696121", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/database/influxdb/influxdb_database.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}