{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    determine_ext,\n    extract_attributes,\n    get_element_by_class,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n)\n\n\nclass TV5MondePlusIE(InfoExtractor):\n    IE_DESC = 'TV5MONDE+'\n    _VALID_URL = r'https?://(?:www\\.)?tv5mondeplus\\.com/toutes-les-videos/[^/]+/(?P<id>[^/?\n    _TEST = {\n        'url': 'http://www.tv5mondeplus.com/toutes-les-videos/documentaire/tdah-mon-amour-tele-quebec-tdah-mon-amour-ep001-enfants',\n        'md5': '12130fc199f020673138a83466542ec6',\n        'info_dict': {\n            'id': 'tdah-mon-amour-tele-quebec-tdah-mon-amour-ep001-enfants',\n            'ext': 'mp4',\n            'title': 'Tdah, mon amour - Enfants',\n            'description': 'md5:230e3aca23115afcf8006d1bece6df74',\n            'upload_date': '20170401',\n            'timestamp': 1491022860,\n        }\n    }\n    _GEO_BYPASS = False\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n\n        if \">Ce programme n'est malheureusement pas disponible pour votre zone g\u00e9ographique.<\" in webpage:\n            self.raise_geo_restricted(countries=['FR'])\n\n        series = get_element_by_class('video-detail__title', webpage)\n        title = episode = get_element_by_class(\n            'video-detail__subtitle', webpage) or series\n        if series and series != title:\n            title = '%s - %s' % (series, title)\n        vpl_data = extract_attributes(self._search_regex(\n            r'(<[^>]+class=\"video_player_loader\"[^>]+>)',\n            webpage, 'video player loader'))\n\n        video_files = self._parse_json(\n            vpl_data['data-broadcast'], display_id).get('files', [])\n        formats = []\n        for video_file in video_files:\n            v_url = video_file.get('url')\n            if not v_url:\n                continue\n            video_format = video_file.get('format') or determine_ext(v_url)\n            if video_format == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    v_url, display_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                formats.append({\n                    'url': v_url,\n                    'format_id': video_format,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': display_id,\n            'display_id': display_id,\n            'title': title,\n            'description': clean_html(get_element_by_class('video-detail__description', webpage)),\n            'thumbnail': vpl_data.get('data-image'),\n            'duration': int_or_none(vpl_data.get('data-duration')) or parse_duration(self._html_search_meta('duration', webpage)),\n            'timestamp': parse_iso8601(self._html_search_meta('uploadDate', webpage)),\n            'formats': formats,\n            'episode': episode,\n            'series': series,\n        }\n", "comments": "# coding: utf-8\n#]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    determine_ext,\n    extract_attributes,\n    get_element_by_class,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n)\n\n\nclass TV5MondePlusIE(InfoExtractor):\n    IE_DESC = 'TV5MONDE+'\n    _VALID_URL = r'https?://(?:www\\.)?tv5mondeplus\\.com/toutes-les-videos/[^/]+/(?P<id>[^/?#]+)'\n    _TEST = {\n        'url': 'http://www.tv5mondeplus.com/toutes-les-videos/documentaire/tdah-mon-amour-tele-quebec-tdah-mon-amour-ep001-enfants',\n        'md5': '12130fc199f020673138a83466542ec6',\n        'info_dict': {\n            'id': 'tdah-mon-amour-tele-quebec-tdah-mon-amour-ep001-enfants',\n            'ext': 'mp4',\n            'title': 'Tdah, mon amour - Enfants',\n            'description': 'md5:230e3aca23115afcf8006d1bece6df74',\n            'upload_date': '20170401',\n            'timestamp': 1491022860,\n        }\n    }\n    _GEO_BYPASS = False\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n\n        if \">Ce programme n'est malheureusement pas disponible pour votre zone g\u00e9ographique.<\" in webpage:\n            self.raise_geo_restricted(countries=['FR'])\n\n        series = get_element_by_class('video-detail__title', webpage)\n        title = episode = get_element_by_class(\n            'video-detail__subtitle', webpage) or series\n        if series and series != title:\n            title = '%s - %s' % (series, title)\n        vpl_data = extract_attributes(self._search_regex(\n            r'(<[^>]+class=\"video_player_loader\"[^>]+>)',\n            webpage, 'video player loader'))\n\n        video_files = self._parse_json(\n            vpl_data['data-broadcast'], display_id).get('files', [])\n        formats = []\n        for video_file in video_files:\n            v_url = video_file.get('url')\n            if not v_url:\n                continue\n            video_format = video_file.get('format') or determine_ext(v_url)\n            if video_format == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    v_url, display_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                formats.append({\n                    'url': v_url,\n                    'format_id': video_format,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': display_id,\n            'display_id': display_id,\n            'title': title,\n            'description': clean_html(get_element_by_class('video-detail__description', webpage)),\n            'thumbnail': vpl_data.get('data-image'),\n            'duration': int_or_none(vpl_data.get('data-duration')) or parse_duration(self._html_search_meta('duration', webpage)),\n            'timestamp': parse_iso8601(self._html_search_meta('uploadDate', webpage)),\n            'formats': formats,\n            'episode': episode,\n            'series': series,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tv5mondeplus.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tv5mondeplus.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}