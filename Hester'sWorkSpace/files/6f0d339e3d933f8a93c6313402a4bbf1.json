{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom .common import TestAccountBudgetCommon\ntry:\n    from unittest.mock import patch\nexcept ImportError:\n    from mock import patch\n\nfrom odoo.fields import Datetime\n\n\n\n\nclass TestTheoreticalAmount(TestAccountBudgetCommon):\n    def setUp(self):\n        super(TestTheoreticalAmount, self).setUp()\n        crossovered_budget = self.env['crossovered.budget'].create({\n            'name': 'test budget name',\n            'date_from': '2014-01-01',\n            'date_to': '2014-12-31',\n        })\n        crossovered_budget_line_obj = self.env['crossovered.budget.lines']\n        user_type_id = self.ref('account.data_account_type_revenue')\n        tag_id = self.ref('account.account_tag_operating')\n        account_rev = self.env['account.account'].create({\n            'code': 'Y2020',\n            'name': 'Budget - Test Revenue Account',\n            'user_type_id': user_type_id,\n            'tag_ids': [(4, tag_id, 0)]\n        })\n        buget_post = self.env['account.budget.post'].create({\n            'name': 'Sales',\n            'account_ids': [(4, account_rev.id, 0)],\n        })\n        self.line = crossovered_budget_line_obj.create({\n            'crossovered_budget_id': crossovered_budget.id,\n            'general_budget_id': buget_post.id,\n            'date_from': '2014-01-01',\n            'date_to': '2014-12-31',\n            'planned_amount': -364,\n        })\n\n        self.patcher = patch('odoo.addons.account_budget.models.account_budget.fields.Datetime', wraps=Datetime)\n        self.mock_datetime = self.patcher.start()\n\n    def test_01(self):\n        \"\"\"Start\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-01-01 00:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, 0)\n\n    def test_02(self):\n        \"\"\"After 24 hours\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-01-02 00:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -1)\n\n    def test_03(self):\n        \"\"\"After 36 hours\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-01-02 12:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -1.5)\n\n    def test_04(self):\n        \"\"\"After 48 hours\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-01-03 00:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -2)\n\n    def test_05(self):\n        \"\"\"After 10 days\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-01-11 00:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -10)\n\n    def test_06(self):\n        \"\"\"After 50 days\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-02-20 00:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -50)\n\n    def test_07(self):\n        \"\"\"After 182 days, exactly half of the budget line\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-07-02 00:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -182)\n\n    def test_08(self):\n        \"\"\"After 308 days at noon\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-11-05 12:00:00'))  \n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -308.5)\n\n    def test_09(self):\n        \"\"\"One day before\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-12-30 00:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -363)\n\n    def test_10(self):\n        \"\"\"At last\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-12-31 00:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -364)\n\n    def tearDown(self):\n        self.patcher.stop()\n        super(TestTheoreticalAmount, self).tearDown()\n", "comments": "   start            date   datetime string(datetime string( 2014 01 01 00 00 00 ))         self mock datetime return value   date         self assertalmostequal(self line theoritical amount  0)      def test 02(self)             after 24 hours            date   datetime string(datetime string( 2014 01 02 00 00 00 ))         self mock datetime return value   date         self assertalmostequal(self line theoritical amount   1)      def test 03(self)             after 36 hours            date   datetime string(datetime string( 2014 01 02 12 00 00 ))         self mock datetime return value   date         self assertalmostequal(self line theoritical amount   1 5)      def test 04(self)             after 48 hours            date   datetime string(datetime string( 2014 01 03 00 00 00 ))         self mock datetime return value   date         self assertalmostequal(self line theoritical amount   2)      def test 05(self)             after 10 days            date   datetime string(datetime string( 2014 01 11 00 00 00 ))         self mock datetime return value   date         self assertalmostequal(self line theoritical amount   10)      def test 06(self)             after 50 days            date   datetime string(datetime string( 2014 02 20 00 00 00 ))         self mock datetime return value   date         self assertalmostequal(self line theoritical amount   50)      def test 07(self)             after 182 days  exactly half budget line            date   datetime string(datetime string( 2014 07 02 00 00 00 ))         self mock datetime return value   date         self assertalmostequal(self line theoritical amount   182)      def test 08(self)             after 308 days noon            date   datetime string(datetime string( 2014 11 05 12 00 00 ))    remember  remember         self mock datetime return value   date         self assertalmostequal(self line theoritical amount   308 5)      def test 09(self)             one day            date   datetime string(datetime string( 2014 12 30 00 00 00 ))         self mock datetime return value   date         self assertalmostequal(self line theoritical amount   363)      def test 10(self)             at last           coding  utf 8        part odoo  see license file full copyright licensing details                                                                  tests                                                                 remember  remember ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom .common import TestAccountBudgetCommon\ntry:\n    from unittest.mock import patch\nexcept ImportError:\n    from mock import patch\n\nfrom odoo.fields import Datetime\n\n# ---------------------------------------------------------\n# Tests\n# ---------------------------------------------------------\nclass TestTheoreticalAmount(TestAccountBudgetCommon):\n    def setUp(self):\n        super(TestTheoreticalAmount, self).setUp()\n        crossovered_budget = self.env['crossovered.budget'].create({\n            'name': 'test budget name',\n            'date_from': '2014-01-01',\n            'date_to': '2014-12-31',\n        })\n        crossovered_budget_line_obj = self.env['crossovered.budget.lines']\n        user_type_id = self.ref('account.data_account_type_revenue')\n        tag_id = self.ref('account.account_tag_operating')\n        account_rev = self.env['account.account'].create({\n            'code': 'Y2020',\n            'name': 'Budget - Test Revenue Account',\n            'user_type_id': user_type_id,\n            'tag_ids': [(4, tag_id, 0)]\n        })\n        buget_post = self.env['account.budget.post'].create({\n            'name': 'Sales',\n            'account_ids': [(4, account_rev.id, 0)],\n        })\n        self.line = crossovered_budget_line_obj.create({\n            'crossovered_budget_id': crossovered_budget.id,\n            'general_budget_id': buget_post.id,\n            'date_from': '2014-01-01',\n            'date_to': '2014-12-31',\n            'planned_amount': -364,\n        })\n\n        self.patcher = patch('odoo.addons.account_budget.models.account_budget.fields.Datetime', wraps=Datetime)\n        self.mock_datetime = self.patcher.start()\n\n    def test_01(self):\n        \"\"\"Start\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-01-01 00:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, 0)\n\n    def test_02(self):\n        \"\"\"After 24 hours\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-01-02 00:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -1)\n\n    def test_03(self):\n        \"\"\"After 36 hours\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-01-02 12:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -1.5)\n\n    def test_04(self):\n        \"\"\"After 48 hours\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-01-03 00:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -2)\n\n    def test_05(self):\n        \"\"\"After 10 days\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-01-11 00:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -10)\n\n    def test_06(self):\n        \"\"\"After 50 days\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-02-20 00:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -50)\n\n    def test_07(self):\n        \"\"\"After 182 days, exactly half of the budget line\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-07-02 00:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -182)\n\n    def test_08(self):\n        \"\"\"After 308 days at noon\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-11-05 12:00:00'))  # remember, remember\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -308.5)\n\n    def test_09(self):\n        \"\"\"One day before\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-12-30 00:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -363)\n\n    def test_10(self):\n        \"\"\"At last\"\"\"\n        date = Datetime.to_string(Datetime.from_string('2014-12-31 00:00:00'))\n        self.mock_datetime.now.return_value = date\n        self.assertAlmostEqual(self.line.theoritical_amount, -364)\n\n    def tearDown(self):\n        self.patcher.stop()\n        super(TestTheoreticalAmount, self).tearDown()\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_theoreticalamount.py", "id": "6f0d339e3d933f8a93c6313402a4bbf1", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account_budget/tests/test_theoreticalamount.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}