{"author": "Miserlou", "code": "# -*- coding: utf8 -*-\nimport mock\nimport os\nimport random\nimport string\nimport unittest\n\nfrom .utils import placebo_session\n\nfrom zappa.cli import ZappaCLI\nfrom zappa.handler import LambdaHandler\nfrom zappa.utilities import (add_event_source, remove_event_source)\nfrom zappa.core import Zappa\n\n\ndef random_string(length):\n    return ''.join(random.choice(string.printable) for _ in range(length))\n\n\nclass TestZappa(unittest.TestCase):\n    def setUp(self):\n        self.sleep_patch = mock.patch('time.sleep', return_value=None)\n        \n        \n        self.users_current_region_name = os.environ.get('AWS_DEFAULT_REGION', None)\n        os.environ['AWS_DEFAULT_REGION'] = 'us-east-1'\n        if not os.environ.get('PLACEBO_MODE') == 'record':\n            self.sleep_patch.start()\n\n    def tearDown(self):\n        if not os.environ.get('PLACEBO_MODE') == 'record':\n            self.sleep_patch.stop()\n        del os.environ['AWS_DEFAULT_REGION']\n        if self.users_current_region_name is not None:\n            \n            os.environ['AWS_DEFAULT_REGION'] = self.users_current_region_name\n\n    @placebo_session\n    def test_upload_remove_s3(self, session):\n        bucket_name = 'test_zappa_upload_s3'\n        z = Zappa(session)\n        zip_path = z.create_lambda_zip(minify=False)\n        res = z.upload_to_s3(zip_path, bucket_name)\n        self.assertTrue(res)\n        s3 = session.resource('s3')\n\n        \n        s3.meta.client.head_bucket(Bucket=bucket_name)\n\n        \n        s3.meta.client.head_object(\n            Bucket=bucket_name,\n            Key=zip_path,\n        )\n        res = z.remove_from_s3(zip_path, bucket_name)\n        self.assertTrue(res)\n\n        fail = z.upload_to_s3('/tmp/this_isnt_real', bucket_name)\n        self.assertFalse(fail)\n\n        \n        z.aws_region = 'us-east-1'\n        res = z.upload_to_s3(zip_path, bucket_name)\n        os.remove(zip_path)\n        self.assertTrue(res)\n\n    @placebo_session\n    def test_copy_on_s3(self, session):\n        bucket_name = 'test_zappa_upload_s3'\n        z = Zappa(session)\n        zip_path = z.create_lambda_zip(minify=False)\n        res = z.upload_to_s3(zip_path, bucket_name)\n        self.assertTrue(res)\n        s3 = session.resource('s3')\n\n        \n        s3.meta.client.head_bucket(Bucket=bucket_name)\n\n        \n        s3.meta.client.head_object(\n            Bucket=bucket_name,\n            Key=zip_path,\n        )\n        zp = 'copy_' + zip_path\n        res = z.copy_on_s3(zip_path, zp, bucket_name)\n        os.remove(zip_path)\n        self.assertTrue(res)\n\n    @placebo_session\n    def test_create_lambda_function_s3(self, session):\n        bucket_name = 'lmbda'\n        zip_path = 'Spheres-dev-1454694878.zip'\n\n        z = Zappa(session)\n        z.aws_region = 'us-east-1'\n        z.load_credentials(session)\n        z.credentials_arn = 'arn:aws:iam::12345:role/ZappaLambdaExecution'\n\n        arn = z.create_lambda_function(\n            bucket=bucket_name,\n            s3_key=zip_path,\n            function_name='test_lmbda_function55',\n            handler='runme.lambda_handler'\n        )\n\n        arn = z.update_lambda_function(\n            bucket=bucket_name,\n            s3_key=zip_path,\n            function_name='test_lmbda_function55',\n        )\n\n    @placebo_session\n    def test_create_lambda_function_local(self, session):\n        bucket_name = 'lmbda'\n        local_file = 'Spheres-dev-1454694878.zip'\n\n        z = Zappa(session)\n        z.aws_region = 'us-east-1'\n        z.load_credentials(session)\n        z.credentials_arn = 'arn:aws:iam::12345:role/ZappaLambdaExecution'\n\n        arn = z.create_lambda_function(\n            bucket=bucket_name,\n            local_zip=local_file,\n            function_name='test_lmbda_function55',\n            handler='runme.lambda_handler'\n        )\n\n        arn = z.update_lambda_function(\n            bucket=bucket_name,\n            local_zip=local_file,\n            function_name='test_lmbda_function55',\n        )\n\n    @placebo_session\n    def test_rollback_lambda_function_version(self, session):\n        z = Zappa(session)\n        z.credentials_arn = 'arn:aws:iam::724336686645:role/ZappaLambdaExecution'\n\n        function_name = 'django-helloworld-unicode'\n        too_many_versions = z.rollback_lambda_function_version(function_name, 99999)\n        self.assertFalse(too_many_versions)\n\n        function_arn = z.rollback_lambda_function_version(function_name, 1)\n\n    @placebo_session\n    def test_invoke_lambda_function(self, session):\n        z = Zappa(session)\n        z.credentials_arn = 'arn:aws:iam::724336686645:role/ZappaLambdaExecution'\n\n        function_name = 'django-helloworld-unicode'\n        payload = '{\"event\": \"hello\"}'\n        response = z.invoke_lambda_function(function_name, payload)\n\n    @placebo_session\n    def test_create_iam_roles(self, session):\n        z = Zappa(session)\n        arn, updated = z.create_iam_roles()\n        self.assertEqual(arn, \"arn:aws:iam::123:role/{}\".format(z.role_name))\n\n    @placebo_session\n    def test_get_api_url(self, session):\n        z = Zappa(session)\n        z.credentials_arn = 'arn:aws:iam::724336686645:role/ZappaLambdaExecution'\n        url = z.get_api_url('Spheres-demonstration', 'demonstration')\n\n    @placebo_session\n    def test_fetch_logs(self, session):\n        z = Zappa(session)\n        z.credentials_arn = 'arn:aws:iam::12345:role/ZappaLambdaExecution'\n        events = z.fetch_logs('Spheres-demonstration')\n        self.assertTrue(events is not None)\n\n    \n    \n    \n\n    @placebo_session\n    def test_handler(self, session):\n        \n        lh = LambdaHandler('test_settings', session=session)\n\n        \n        \n        \n        self.assertEqual(os.environ['hello'], 'world')\n\n        event = {\n            \"body\": {},\n            \"headers\": {},\n            \"params\": {\n                \"parameter_1\": \"asdf1\",\n                \"parameter_2\": \"asdf2\",\n            },\n            \"method\": \"GET\",\n            \"query\": {}\n        }\n        lh.handler(event, None)\n\n        \n        event = {\n                    u'account': u'72333333333',\n                    u'region': u'us-east-1',\n                    u'detail': {},\n                    u'detail-type': u'Scheduled Event',\n                    u'source': u'aws.events',\n                    u'version': u'0',\n                    u'time': u'2016-05-10T21:05:39Z',\n                    u'id': u'0d6a6db0-d5e7-4755-93a0-750a8bf49d55',\n                    u'resources': [u'arn:aws:events:us-east-1:72333333333:rule/tests.test_app.schedule_me']\n                }\n        lh.handler(event, None)\n\n        \n        event = {\n                    u'account': u'72333333333',\n                    u'region': u'us-east-1',\n                    u'detail': {},\n                    u'command': u'test_settings.command',\n                    u'source': u'aws.events',\n                    u'version': u'0',\n                    u'time': u'2016-05-10T21:05:39Z',\n                    u'id': u'0d6a6db0-d5e7-4755-93a0-750a8bf49d55',\n                    u'resources': [u'arn:aws:events:us-east-1:72333333333:rule/tests.test_app.schedule_me']\n                }\n        lh.handler(event, None)\n\n        \n        event = {\n                    u'account': u'72333333333',\n                    u'region': u'us-east-1',\n                    u'detail': {},\n                    u'command': u'zappa.async.route_lambda_task',\n                    u'task_path': u'tests.test_app.async_me',\n                    u'args': [u'xxx'],\n                    u'kwargs': {},\n                    u'source': u'aws.events',\n                    u'version': u'0',\n                    u'time': u'2016-05-10T21:05:39Z',\n                    u'id': u'0d6a6db0-d5e7-4755-93a0-750a8bf49d55',\n                }\n        self.assertEqual('run async when on lambda xxx', lh.handler(event, None))\n        event[u'kwargs'] = {'foo': 'bar'}\n        self.assertEqual('run async when on lambda xxxbar', lh.handler(event, None))\n\n        \n        event = {\n                    u'account': u'72333333333',\n                    u'region': u'us-east-1',\n                    u'detail': {},\n                    u'raw_command': u'print(\"check one two\")',\n                    u'source': u'aws.events',\n                    u'version': u'0',\n                    u'time': u'2016-05-10T21:05:39Z',\n                    u'id': u'0d6a6db0-d5e7-4755-93a0-750a8bf49d55',\n                    u'resources': [u'arn:aws:events:us-east-1:72333333333:rule/tests.test_app.schedule_me']\n                }\n        lh.handler(event, None)\n\n        \n        event = {\n                    u'account': u'72333333333',\n                    u'region': u'us-east-1',\n                    u'detail': {},\n                    u'Records': [{'s3': {'configurationId': 'test_project:test_settings.aws_s3_event'}}],\n                    u'source': u'aws.events',\n                    u'version': u'0',\n                    u'time': u'2016-05-10T21:05:39Z',\n                    u'id': u'0d6a6db0-d5e7-4755-93a0-750a8bf49d55',\n                    u'resources': [u'arn:aws:events:us-east-1:72333333333:rule/tests.test_app.schedule_me']\n                }\n        self.assertEqual(\"AWS S3 EVENT\", lh.handler(event, None))\n\n        \n        event = {\n            u'account': u'72333333333',\n            u'region': u'us-east-1',\n            u'detail': {},\n            u'Records': [\n                {\n                    u'EventVersion': u'1.0',\n                    u'EventSource': u'aws:sns',\n                    u'EventSubscriptionArn': u'arn:aws:sns:EXAMPLE',\n                    u'Sns': {\n                        u'SignatureVersion': u'1',\n                        u'Timestamp': u'1970-01-01T00:00:00.000Z',\n                        u'Signature': u'EXAMPLE',\n                        u'SigningCertUrl': u'EXAMPLE',\n                        u'MessageId': u'95df01b4-ee98-5cb9-9903-4c221d41eb5e',\n                        u'Message': u'Hello from SNS!',\n                        u'Subject': u'TestInvoke',\n                        u'Type': u'Notification',\n                        u'UnsubscribeUrl': u'EXAMPLE',\n                        u'TopicArn': u'arn:aws:sns:1',\n                        u'MessageAttributes': {\n                            u'Test': {u'Type': u'String', u'Value': u'TestString'},\n                            u'TestBinary': {u'Type': u'Binary', u'Value': u'TestBinary'}\n                        }\n                    }\n                }\n            ]\n        }\n        self.assertEqual(\"AWS SNS EVENT\", lh.handler(event, None))\n\n        \n        event = {\n            u'account': u'72333333333',\n            u'region': u'us-east-1',\n            u'detail': {},\n            u'Records': [\n                {\n                    u'EventVersion': u'1.0',\n                    u'EventSource': u'aws:sns',\n                    u'EventSubscriptionArn': u'arn:aws:sns:EXAMPLE',\n                    u'Sns': {\n                        u'SignatureVersion': u'1',\n                        u'Timestamp': u'1970-01-01T00:00:00.000Z',\n                        u'Signature': u'EXAMPLE',\n                        u'SigningCertUrl': u'EXAMPLE',\n                        u'MessageId': u'95df01b4-ee98-5cb9-9903-4c221d41eb5e',\n                        u'Message': u'{\"args\": [\"arg1\", \"arg2\"], \"command\": \"zappa.async.route_sns_task\", '\n                                    u'\"task_path\": \"test_settings.aws_async_sns_event\", \"kwargs\": {\"arg3\": \"varg3\"}}',\n                        u'Subject': u'TestInvoke',\n                        u'Type': u'Notification',\n                        u'UnsubscribeUrl': u'EXAMPLE',\n                        u'MessageAttributes': {\n                            u'Test': {u'Type': u'String', u'Value': u'TestString'},\n                            u'TestBinary': {u'Type': u'Binary', u'Value': u'TestBinary'}\n                        }\n                    }\n                }\n            ]\n        }\n        self.assertEqual(\"AWS ASYNC SNS EVENT\", lh.handler(event, None))\n\n        \n        event = {\n            u'Records': [\n                {\n                    u'eventID': u'1',\n                    u'eventVersion': u'1.0',\n                    u'dynamodb': {\n                        u'Keys': {u'Id': {u'N': u'101'}},\n                        u'NewImage': {u'Message': {u'S': u'New item!'}, u'Id': {u'N': u'101'}},\n                        u'StreamViewType': u'NEW_AND_OLD_IMAGES',\n                        u'SequenceNumber': u'111', u'SizeBytes': 26\n                    },\n                    u'awsRegion': u'us-west-2',\n                    u'eventName': u'INSERT',\n                    u'eventSourceARN': u'arn:aws:dynamodb:1',\n                    u'eventSource': u'aws:dynamodb'\n                }\n            ]\n        }\n        self.assertEqual(\"AWS DYNAMODB EVENT\", lh.handler(event, None))\n\n        \n        event = {\n            u'Records': [\n                {\n                    u'eventID': u'shardId-000000000000:49545115243490985018280067714973144582180062593244200961',\n                    u'eventVersion': u'1.0',\n                    u'kinesis': {\n                        u'partitionKey': u'partitionKey-3',\n                        u'data': u'SGVsbG8sIHRoaXMgaXMgYSB0ZXN0IDEyMy4=',\n                        u'kinesisSchemaVersion': u'1.0',\n                        u'sequenceNumber': u'49545115243490985018280067714973144582180062593244200961'\n                    },\n                    u'invokeIdentityArn': u'arn:aws:iam::EXAMPLE',\n                    u'eventName': u'aws:kinesis:record',\n                    u'eventSourceARN': u'arn:aws:kinesis:1',\n                    u'eventSource': u'aws:kinesis',\n                    u'awsRegion': u'us-east-1'\n                 }\n            ]\n        }\n        self.assertEqual(\"AWS KINESIS EVENT\", lh.handler(event, None))\n\n        \n        event = {u'authorizationToken': u'hubtoken1', u'methodArn': u'arn:aws:execute-api:us-west-2:1234:xxxxx/dev/GET/v1/endpoint/param', u'type': u'TOKEN'}\n        self.assertEqual(\"AUTHORIZER_EVENT\", lh.handler(event, None))\n\n        \n        lh.settings.AUTHORIZER_FUNCTION = None\n        with self.assertRaisesRegexp(Exception, 'Unauthorized'):\n            lh.handler(event, None)\n\n        \n        event = {\n            u'Records': [\n                {\n                    u'eventID': u'shardId-000000000000:49545115243490985018280067714973144582180062593244200961',\n                    u'eventVersion': u'1.0',\n                    u'kinesis': {\n                        u'partitionKey': u'partitionKey-3',\n                        u'data': u'SGVsbG8sIHRoaXMgaXMgYSB0ZXN0IDEyMy4=',\n                        u'kinesisSchemaVersion': u'1.0',\n                        u'sequenceNumber': u'49545115243490985018280067714973144582180062593244200961'\n                    },\n                    u'eventSourceARN': u'bad:arn:1',\n                }\n            ]\n        }\n        self.assertIsNone(lh.handler(event, None))\n\n    \n    \n    \n\n    @placebo_session\n    def test_cli_aws(self, session):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.api_key_required = True\n        zappa_cli.authorization_type = 'NONE'\n        zappa_cli.load_settings('test_settings.json', session)\n        zappa_cli.zappa.credentials_arn = 'arn:aws:iam::12345:role/ZappaLambdaExecution'\n        zappa_cli.deploy()\n        zappa_cli.update()\n        zappa_cli.rollback(1)\n        zappa_cli.tail(since=0, filter_pattern='', keep_open=False)\n        zappa_cli.schedule()\n        zappa_cli.unschedule()\n        zappa_cli.undeploy(no_confirm=True, remove_logs=True)\n\n    @placebo_session\n    def test_cli_aws_status(self, session):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('test_settings.json', session)\n        zappa_cli.api_stage = 'devor'\n        zappa_cli.lambda_name = 'baby-flask-devor'\n        zappa_cli.zappa.credentials_arn = 'arn:aws:iam::12345:role/ZappaLambdaExecution'\n        resp = zappa_cli.status()\n\n    \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    @placebo_session\n    def test_add_event_source(self, session):\n\n        event_source = {'arn': 'blah:blah:blah:blah', 'events': [\n                    \"s3:ObjectCreated:*\"\n                  ]}\n        \n        try:\n            es = add_event_source(event_source, 'blah:blah:blah:blah', 'test_settings.callback', session)\n            self.fail(\"Success should have failed.\")\n        except ValueError:\n            pass\n\n        event_source = {'arn': 's3:s3:s3:s3', 'events': [\n                    \"s3:ObjectCreated:*\"\n                  ]}\n        add_event_source(event_source, 'lambda:lambda:lambda:lambda', 'test_settings.callback', session, dry=True)\n        remove_event_source(event_source, 'lambda:lambda:lambda:lambda', 'test_settings.callback', session, dry=True)\n        # get_event_source_status(event_source, 'lambda:lambda:lambda:lambda', 'test_settings.callback', session, dry=True)\n\n    @placebo_session\n    def test_cognito_trigger(self, session):\n        z = Zappa(session)\n        z.update_cognito('Zappa-Trigger-Test', 'us-east-1_9jUv74DH8', {'PreSignUp': 'test.tasks.pre_signup'}, 'arn:aws:lambda:us-east-1:12345:function:Zappa-Trigger-Test')\n\n    @placebo_session\n    def test_cognito_trigger_existing(self, session):\n        z = Zappa(session)\n        z.update_cognito('Zappa-Trigger-Test', 'us-east-1_9jUv74DH8', {'PreSignUp': 'test.tasks.pre_signup'}, 'arn:aws:lambda:us-east-1:12345:function:Zappa-Trigger-Test')\n\n    @placebo_session\n    def test_cli_cognito_triggers(self, session):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.api_key_required = True\n        zappa_cli.load_settings('test_settings.json', session)\n        zappa_cli.lambda_arn = 'arn:aws:lambda:us-east-1:12345:function:Zappa-Trigger-Test'\n        zappa_cli.update_cognito_triggers()\n\n\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "      coding  utf8        tests expect us east 1     if user set different region env variables  set aside use us east 1    give user aws region back  done testing us east 1     throw clienterror 404 bucket exist    throw clienterror 404 object exist   will graciouly handle quirky s3 behavior  us east 1  region name     throw clienterror 404 bucket exist    throw clienterror 404 object exist        handler        init test load remote settings    annoyingly  fail record     result actually okay use playback     see  https   github com garnaat placebo issues 48    test scheduled event    test command event    test command async event    test raw command event    test aws s3 event    test aws sns event    test aws sns event    test aws dynamodb event    test aws kinesis event    test authorizer event    ensure zappa return 401 function defined     unhandled event        cli            let encrypt   acme            django            util   misc        sanity  this fail     get event source status(event source   lambda lambda lambda lambda    test settings callback   session  dry true) ", "content": "# -*- coding: utf8 -*-\nimport mock\nimport os\nimport random\nimport string\nimport unittest\n\nfrom .utils import placebo_session\n\nfrom zappa.cli import ZappaCLI\nfrom zappa.handler import LambdaHandler\nfrom zappa.utilities import (add_event_source, remove_event_source)\nfrom zappa.core import Zappa\n\n\ndef random_string(length):\n    return ''.join(random.choice(string.printable) for _ in range(length))\n\n\nclass TestZappa(unittest.TestCase):\n    def setUp(self):\n        self.sleep_patch = mock.patch('time.sleep', return_value=None)\n        # Tests expect us-east-1.\n        # If the user has set a different region in env variables, we set it aside for now and use us-east-1\n        self.users_current_region_name = os.environ.get('AWS_DEFAULT_REGION', None)\n        os.environ['AWS_DEFAULT_REGION'] = 'us-east-1'\n        if not os.environ.get('PLACEBO_MODE') == 'record':\n            self.sleep_patch.start()\n\n    def tearDown(self):\n        if not os.environ.get('PLACEBO_MODE') == 'record':\n            self.sleep_patch.stop()\n        del os.environ['AWS_DEFAULT_REGION']\n        if self.users_current_region_name is not None:\n            # Give the user their AWS region back, we're done testing with us-east-1.\n            os.environ['AWS_DEFAULT_REGION'] = self.users_current_region_name\n\n    @placebo_session\n    def test_upload_remove_s3(self, session):\n        bucket_name = 'test_zappa_upload_s3'\n        z = Zappa(session)\n        zip_path = z.create_lambda_zip(minify=False)\n        res = z.upload_to_s3(zip_path, bucket_name)\n        self.assertTrue(res)\n        s3 = session.resource('s3')\n\n        # will throw ClientError with 404 if bucket doesn't exist\n        s3.meta.client.head_bucket(Bucket=bucket_name)\n\n        # will throw ClientError with 404 if object doesn't exist\n        s3.meta.client.head_object(\n            Bucket=bucket_name,\n            Key=zip_path,\n        )\n        res = z.remove_from_s3(zip_path, bucket_name)\n        self.assertTrue(res)\n\n        fail = z.upload_to_s3('/tmp/this_isnt_real', bucket_name)\n        self.assertFalse(fail)\n\n        #Will graciouly handle quirky S3 behavior on 'us-east-1' region name'\n        z.aws_region = 'us-east-1'\n        res = z.upload_to_s3(zip_path, bucket_name)\n        os.remove(zip_path)\n        self.assertTrue(res)\n\n    @placebo_session\n    def test_copy_on_s3(self, session):\n        bucket_name = 'test_zappa_upload_s3'\n        z = Zappa(session)\n        zip_path = z.create_lambda_zip(minify=False)\n        res = z.upload_to_s3(zip_path, bucket_name)\n        self.assertTrue(res)\n        s3 = session.resource('s3')\n\n        # will throw ClientError with 404 if bucket doesn't exist\n        s3.meta.client.head_bucket(Bucket=bucket_name)\n\n        # will throw ClientError with 404 if object doesn't exist\n        s3.meta.client.head_object(\n            Bucket=bucket_name,\n            Key=zip_path,\n        )\n        zp = 'copy_' + zip_path\n        res = z.copy_on_s3(zip_path, zp, bucket_name)\n        os.remove(zip_path)\n        self.assertTrue(res)\n\n    @placebo_session\n    def test_create_lambda_function_s3(self, session):\n        bucket_name = 'lmbda'\n        zip_path = 'Spheres-dev-1454694878.zip'\n\n        z = Zappa(session)\n        z.aws_region = 'us-east-1'\n        z.load_credentials(session)\n        z.credentials_arn = 'arn:aws:iam::12345:role/ZappaLambdaExecution'\n\n        arn = z.create_lambda_function(\n            bucket=bucket_name,\n            s3_key=zip_path,\n            function_name='test_lmbda_function55',\n            handler='runme.lambda_handler'\n        )\n\n        arn = z.update_lambda_function(\n            bucket=bucket_name,\n            s3_key=zip_path,\n            function_name='test_lmbda_function55',\n        )\n\n    @placebo_session\n    def test_create_lambda_function_local(self, session):\n        bucket_name = 'lmbda'\n        local_file = 'Spheres-dev-1454694878.zip'\n\n        z = Zappa(session)\n        z.aws_region = 'us-east-1'\n        z.load_credentials(session)\n        z.credentials_arn = 'arn:aws:iam::12345:role/ZappaLambdaExecution'\n\n        arn = z.create_lambda_function(\n            bucket=bucket_name,\n            local_zip=local_file,\n            function_name='test_lmbda_function55',\n            handler='runme.lambda_handler'\n        )\n\n        arn = z.update_lambda_function(\n            bucket=bucket_name,\n            local_zip=local_file,\n            function_name='test_lmbda_function55',\n        )\n\n    @placebo_session\n    def test_rollback_lambda_function_version(self, session):\n        z = Zappa(session)\n        z.credentials_arn = 'arn:aws:iam::724336686645:role/ZappaLambdaExecution'\n\n        function_name = 'django-helloworld-unicode'\n        too_many_versions = z.rollback_lambda_function_version(function_name, 99999)\n        self.assertFalse(too_many_versions)\n\n        function_arn = z.rollback_lambda_function_version(function_name, 1)\n\n    @placebo_session\n    def test_invoke_lambda_function(self, session):\n        z = Zappa(session)\n        z.credentials_arn = 'arn:aws:iam::724336686645:role/ZappaLambdaExecution'\n\n        function_name = 'django-helloworld-unicode'\n        payload = '{\"event\": \"hello\"}'\n        response = z.invoke_lambda_function(function_name, payload)\n\n    @placebo_session\n    def test_create_iam_roles(self, session):\n        z = Zappa(session)\n        arn, updated = z.create_iam_roles()\n        self.assertEqual(arn, \"arn:aws:iam::123:role/{}\".format(z.role_name))\n\n    @placebo_session\n    def test_get_api_url(self, session):\n        z = Zappa(session)\n        z.credentials_arn = 'arn:aws:iam::724336686645:role/ZappaLambdaExecution'\n        url = z.get_api_url('Spheres-demonstration', 'demonstration')\n\n    @placebo_session\n    def test_fetch_logs(self, session):\n        z = Zappa(session)\n        z.credentials_arn = 'arn:aws:iam::12345:role/ZappaLambdaExecution'\n        events = z.fetch_logs('Spheres-demonstration')\n        self.assertTrue(events is not None)\n\n    ##\n    # Handler\n    ##\n\n    @placebo_session\n    def test_handler(self, session):\n        # Init will test load_remote_settings\n        lh = LambdaHandler('test_settings', session=session)\n\n        # Annoyingly, this will fail during record, but\n        # the result will actually be okay to use in playback.\n        # See: https://github.com/garnaat/placebo/issues/48\n        self.assertEqual(os.environ['hello'], 'world')\n\n        event = {\n            \"body\": {},\n            \"headers\": {},\n            \"params\": {\n                \"parameter_1\": \"asdf1\",\n                \"parameter_2\": \"asdf2\",\n            },\n            \"method\": \"GET\",\n            \"query\": {}\n        }\n        lh.handler(event, None)\n\n        # Test scheduled event\n        event = {\n                    u'account': u'72333333333',\n                    u'region': u'us-east-1',\n                    u'detail': {},\n                    u'detail-type': u'Scheduled Event',\n                    u'source': u'aws.events',\n                    u'version': u'0',\n                    u'time': u'2016-05-10T21:05:39Z',\n                    u'id': u'0d6a6db0-d5e7-4755-93a0-750a8bf49d55',\n                    u'resources': [u'arn:aws:events:us-east-1:72333333333:rule/tests.test_app.schedule_me']\n                }\n        lh.handler(event, None)\n\n        # Test command event\n        event = {\n                    u'account': u'72333333333',\n                    u'region': u'us-east-1',\n                    u'detail': {},\n                    u'command': u'test_settings.command',\n                    u'source': u'aws.events',\n                    u'version': u'0',\n                    u'time': u'2016-05-10T21:05:39Z',\n                    u'id': u'0d6a6db0-d5e7-4755-93a0-750a8bf49d55',\n                    u'resources': [u'arn:aws:events:us-east-1:72333333333:rule/tests.test_app.schedule_me']\n                }\n        lh.handler(event, None)\n\n        # Test command for async event\n        event = {\n                    u'account': u'72333333333',\n                    u'region': u'us-east-1',\n                    u'detail': {},\n                    u'command': u'zappa.async.route_lambda_task',\n                    u'task_path': u'tests.test_app.async_me',\n                    u'args': [u'xxx'],\n                    u'kwargs': {},\n                    u'source': u'aws.events',\n                    u'version': u'0',\n                    u'time': u'2016-05-10T21:05:39Z',\n                    u'id': u'0d6a6db0-d5e7-4755-93a0-750a8bf49d55',\n                }\n        self.assertEqual('run async when on lambda xxx', lh.handler(event, None))\n        event[u'kwargs'] = {'foo': 'bar'}\n        self.assertEqual('run async when on lambda xxxbar', lh.handler(event, None))\n\n        # Test raw_command event\n        event = {\n                    u'account': u'72333333333',\n                    u'region': u'us-east-1',\n                    u'detail': {},\n                    u'raw_command': u'print(\"check one two\")',\n                    u'source': u'aws.events',\n                    u'version': u'0',\n                    u'time': u'2016-05-10T21:05:39Z',\n                    u'id': u'0d6a6db0-d5e7-4755-93a0-750a8bf49d55',\n                    u'resources': [u'arn:aws:events:us-east-1:72333333333:rule/tests.test_app.schedule_me']\n                }\n        lh.handler(event, None)\n\n        # Test AWS S3 event\n        event = {\n                    u'account': u'72333333333',\n                    u'region': u'us-east-1',\n                    u'detail': {},\n                    u'Records': [{'s3': {'configurationId': 'test_project:test_settings.aws_s3_event'}}],\n                    u'source': u'aws.events',\n                    u'version': u'0',\n                    u'time': u'2016-05-10T21:05:39Z',\n                    u'id': u'0d6a6db0-d5e7-4755-93a0-750a8bf49d55',\n                    u'resources': [u'arn:aws:events:us-east-1:72333333333:rule/tests.test_app.schedule_me']\n                }\n        self.assertEqual(\"AWS S3 EVENT\", lh.handler(event, None))\n\n        # Test AWS SNS event\n        event = {\n            u'account': u'72333333333',\n            u'region': u'us-east-1',\n            u'detail': {},\n            u'Records': [\n                {\n                    u'EventVersion': u'1.0',\n                    u'EventSource': u'aws:sns',\n                    u'EventSubscriptionArn': u'arn:aws:sns:EXAMPLE',\n                    u'Sns': {\n                        u'SignatureVersion': u'1',\n                        u'Timestamp': u'1970-01-01T00:00:00.000Z',\n                        u'Signature': u'EXAMPLE',\n                        u'SigningCertUrl': u'EXAMPLE',\n                        u'MessageId': u'95df01b4-ee98-5cb9-9903-4c221d41eb5e',\n                        u'Message': u'Hello from SNS!',\n                        u'Subject': u'TestInvoke',\n                        u'Type': u'Notification',\n                        u'UnsubscribeUrl': u'EXAMPLE',\n                        u'TopicArn': u'arn:aws:sns:1',\n                        u'MessageAttributes': {\n                            u'Test': {u'Type': u'String', u'Value': u'TestString'},\n                            u'TestBinary': {u'Type': u'Binary', u'Value': u'TestBinary'}\n                        }\n                    }\n                }\n            ]\n        }\n        self.assertEqual(\"AWS SNS EVENT\", lh.handler(event, None))\n\n        # Test AWS SNS event\n        event = {\n            u'account': u'72333333333',\n            u'region': u'us-east-1',\n            u'detail': {},\n            u'Records': [\n                {\n                    u'EventVersion': u'1.0',\n                    u'EventSource': u'aws:sns',\n                    u'EventSubscriptionArn': u'arn:aws:sns:EXAMPLE',\n                    u'Sns': {\n                        u'SignatureVersion': u'1',\n                        u'Timestamp': u'1970-01-01T00:00:00.000Z',\n                        u'Signature': u'EXAMPLE',\n                        u'SigningCertUrl': u'EXAMPLE',\n                        u'MessageId': u'95df01b4-ee98-5cb9-9903-4c221d41eb5e',\n                        u'Message': u'{\"args\": [\"arg1\", \"arg2\"], \"command\": \"zappa.async.route_sns_task\", '\n                                    u'\"task_path\": \"test_settings.aws_async_sns_event\", \"kwargs\": {\"arg3\": \"varg3\"}}',\n                        u'Subject': u'TestInvoke',\n                        u'Type': u'Notification',\n                        u'UnsubscribeUrl': u'EXAMPLE',\n                        u'MessageAttributes': {\n                            u'Test': {u'Type': u'String', u'Value': u'TestString'},\n                            u'TestBinary': {u'Type': u'Binary', u'Value': u'TestBinary'}\n                        }\n                    }\n                }\n            ]\n        }\n        self.assertEqual(\"AWS ASYNC SNS EVENT\", lh.handler(event, None))\n\n        # Test AWS DynamoDB event\n        event = {\n            u'Records': [\n                {\n                    u'eventID': u'1',\n                    u'eventVersion': u'1.0',\n                    u'dynamodb': {\n                        u'Keys': {u'Id': {u'N': u'101'}},\n                        u'NewImage': {u'Message': {u'S': u'New item!'}, u'Id': {u'N': u'101'}},\n                        u'StreamViewType': u'NEW_AND_OLD_IMAGES',\n                        u'SequenceNumber': u'111', u'SizeBytes': 26\n                    },\n                    u'awsRegion': u'us-west-2',\n                    u'eventName': u'INSERT',\n                    u'eventSourceARN': u'arn:aws:dynamodb:1',\n                    u'eventSource': u'aws:dynamodb'\n                }\n            ]\n        }\n        self.assertEqual(\"AWS DYNAMODB EVENT\", lh.handler(event, None))\n\n        # Test AWS kinesis event\n        event = {\n            u'Records': [\n                {\n                    u'eventID': u'shardId-000000000000:49545115243490985018280067714973144582180062593244200961',\n                    u'eventVersion': u'1.0',\n                    u'kinesis': {\n                        u'partitionKey': u'partitionKey-3',\n                        u'data': u'SGVsbG8sIHRoaXMgaXMgYSB0ZXN0IDEyMy4=',\n                        u'kinesisSchemaVersion': u'1.0',\n                        u'sequenceNumber': u'49545115243490985018280067714973144582180062593244200961'\n                    },\n                    u'invokeIdentityArn': u'arn:aws:iam::EXAMPLE',\n                    u'eventName': u'aws:kinesis:record',\n                    u'eventSourceARN': u'arn:aws:kinesis:1',\n                    u'eventSource': u'aws:kinesis',\n                    u'awsRegion': u'us-east-1'\n                 }\n            ]\n        }\n        self.assertEqual(\"AWS KINESIS EVENT\", lh.handler(event, None))\n\n        # Test Authorizer event\n        event = {u'authorizationToken': u'hubtoken1', u'methodArn': u'arn:aws:execute-api:us-west-2:1234:xxxxx/dev/GET/v1/endpoint/param', u'type': u'TOKEN'}\n        self.assertEqual(\"AUTHORIZER_EVENT\", lh.handler(event, None))\n\n        # Ensure Zappa does return 401 if no function was defined.\n        lh.settings.AUTHORIZER_FUNCTION = None\n        with self.assertRaisesRegexp(Exception, 'Unauthorized'):\n            lh.handler(event, None)\n\n        # Unhandled event\n        event = {\n            u'Records': [\n                {\n                    u'eventID': u'shardId-000000000000:49545115243490985018280067714973144582180062593244200961',\n                    u'eventVersion': u'1.0',\n                    u'kinesis': {\n                        u'partitionKey': u'partitionKey-3',\n                        u'data': u'SGVsbG8sIHRoaXMgaXMgYSB0ZXN0IDEyMy4=',\n                        u'kinesisSchemaVersion': u'1.0',\n                        u'sequenceNumber': u'49545115243490985018280067714973144582180062593244200961'\n                    },\n                    u'eventSourceARN': u'bad:arn:1',\n                }\n            ]\n        }\n        self.assertIsNone(lh.handler(event, None))\n\n    ##\n    # CLI\n    ##\n\n    @placebo_session\n    def test_cli_aws(self, session):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.api_key_required = True\n        zappa_cli.authorization_type = 'NONE'\n        zappa_cli.load_settings('test_settings.json', session)\n        zappa_cli.zappa.credentials_arn = 'arn:aws:iam::12345:role/ZappaLambdaExecution'\n        zappa_cli.deploy()\n        zappa_cli.update()\n        zappa_cli.rollback(1)\n        zappa_cli.tail(since=0, filter_pattern='', keep_open=False)\n        zappa_cli.schedule()\n        zappa_cli.unschedule()\n        zappa_cli.undeploy(no_confirm=True, remove_logs=True)\n\n    @placebo_session\n    def test_cli_aws_status(self, session):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('test_settings.json', session)\n        zappa_cli.api_stage = 'devor'\n        zappa_cli.lambda_name = 'baby-flask-devor'\n        zappa_cli.zappa.credentials_arn = 'arn:aws:iam::12345:role/ZappaLambdaExecution'\n        resp = zappa_cli.status()\n\n    ##\n    # Let's Encrypt / ACME\n    ##\n\n    ##\n    # Django\n    ##\n\n    ##\n    # Util / Misc\n    ##\n\n    @placebo_session\n    def test_add_event_source(self, session):\n\n        event_source = {'arn': 'blah:blah:blah:blah', 'events': [\n                    \"s3:ObjectCreated:*\"\n                  ]}\n        # Sanity. This should fail.\n        try:\n            es = add_event_source(event_source, 'blah:blah:blah:blah', 'test_settings.callback', session)\n            self.fail(\"Success should have failed.\")\n        except ValueError:\n            pass\n\n        event_source = {'arn': 's3:s3:s3:s3', 'events': [\n                    \"s3:ObjectCreated:*\"\n                  ]}\n        add_event_source(event_source, 'lambda:lambda:lambda:lambda', 'test_settings.callback', session, dry=True)\n        remove_event_source(event_source, 'lambda:lambda:lambda:lambda', 'test_settings.callback', session, dry=True)\n        # get_event_source_status(event_source, 'lambda:lambda:lambda:lambda', 'test_settings.callback', session, dry=True)\n\n    @placebo_session\n    def test_cognito_trigger(self, session):\n        z = Zappa(session)\n        z.update_cognito('Zappa-Trigger-Test', 'us-east-1_9jUv74DH8', {'PreSignUp': 'test.tasks.pre_signup'}, 'arn:aws:lambda:us-east-1:12345:function:Zappa-Trigger-Test')\n\n    @placebo_session\n    def test_cognito_trigger_existing(self, session):\n        z = Zappa(session)\n        z.update_cognito('Zappa-Trigger-Test', 'us-east-1_9jUv74DH8', {'PreSignUp': 'test.tasks.pre_signup'}, 'arn:aws:lambda:us-east-1:12345:function:Zappa-Trigger-Test')\n\n    @placebo_session\n    def test_cli_cognito_triggers(self, session):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.api_key_required = True\n        zappa_cli.load_settings('test_settings.json', session)\n        zappa_cli.lambda_arn = 'arn:aws:lambda:us-east-1:12345:function:Zappa-Trigger-Test'\n        zappa_cli.update_cognito_triggers()\n\n\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Serverless Python", "file_name": "tests_placebo.py", "id": "5060e15c5d6c2bffc4ddf806cca29653", "language": "Python", "project_name": "Zappa", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/Miserlou-Zappa/Miserlou-Zappa-2a31b61/tests/tests_placebo.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:49:18Z", "url": "https://github.com/Miserlou/Zappa", "wiki": true}