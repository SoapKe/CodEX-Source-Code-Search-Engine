{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport time\n\nfrom odoo import api, fields, models, _\nfrom odoo.addons import decimal_precision as dp\nfrom odoo.exceptions import UserError\n\n\nclass SaleAdvancePaymentInv(models.TransientModel):\n    _name = \"sale.advance.payment.inv\"\n    _description = \"Sales Advance Payment Invoice\"\n\n    @api.model\n    def _count(self):\n        return len(self._context.get('active_ids', []))\n\n    @api.model\n    def _get_advance_payment_method(self):\n        if self._count() == 1:\n            sale_obj = self.env['sale.order']\n            order = sale_obj.browse(self._context.get('active_ids'))[0]\n            if all([line.product_id.invoice_policy == 'order' for line in order.order_line]) or order.invoice_count:\n                return 'all'\n        return 'delivered'\n\n    @api.model\n    def _default_product_id(self):\n        product_id = self.env['ir.config_parameter'].sudo().get_param('sale.default_deposit_product_id')\n        return self.env['product.product'].browse(int(product_id))\n\n    @api.model\n    def _default_deposit_account_id(self):\n        return self._default_product_id().property_account_income_id\n\n    @api.model\n    def _default_deposit_taxes_id(self):\n        return self._default_product_id().taxes_id\n\n    advance_payment_method = fields.Selection([\n        ('delivered', 'Invoiceable lines'),\n        ('all', 'Invoiceable lines (deduct down payments)'),\n        ('percentage', 'Down payment (percentage)'),\n        ('fixed', 'Down payment (fixed amount)')\n        ], string='What do you want to invoice?', default=_get_advance_payment_method, required=True)\n    product_id = fields.Many2one('product.product', string='Down Payment Product', domain=[('type', '=', 'service')],\n        default=_default_product_id)\n    count = fields.Integer(default=_count, string='# of Orders')\n    amount = fields.Float('Down Payment Amount', digits=dp.get_precision('Account'), help=\"The amount to be invoiced in advance, taxes excluded.\")\n    deposit_account_id = fields.Many2one(\"account.account\", string=\"Income Account\", domain=[('deprecated', '=', False)],\n        help=\"Account used for deposits\", default=_default_deposit_account_id)\n    deposit_taxes_id = fields.Many2many(\"account.tax\", string=\"Customer Taxes\", help=\"Taxes used for deposits\", default=_default_deposit_taxes_id)\n\n    @api.onchange('advance_payment_method')\n    def onchange_advance_payment_method(self):\n        if self.advance_payment_method == 'percentage':\n            return {'value': {'amount': 0}}\n        return {}\n\n    @api.multi\n    def _create_invoice(self, order, so_line, amount):\n        inv_obj = self.env['account.invoice']\n        ir_property_obj = self.env['ir.property']\n\n        account_id = False\n        if self.product_id.id:\n            account_id = self.product_id.property_account_income_id.id\n        if not account_id:\n            inc_acc = ir_property_obj.get('property_account_income_categ_id', 'product.category')\n            account_id = order.fiscal_position_id.map_account(inc_acc).id if inc_acc else False\n        if not account_id:\n            raise UserError(\n                _('There is no income account defined for this product: \"%s\". You may have to install a chart of account from Accounting app, settings menu.') %\n                (self.product_id.name,))\n\n        if self.amount <= 0.00:\n            raise UserError(_('The value of the down payment amount must be positive.'))\n        context = {'lang': order.partner_id.lang}\n        if self.advance_payment_method == 'percentage':\n            amount = order.amount_untaxed * self.amount / 100\n            name = _(\"Down payment of %s%%\") % (self.amount,)\n        else:\n            amount = self.amount\n            name = _('Down Payment')\n        del context\n        taxes = self.product_id.taxes_id.filtered(lambda r: not order.company_id or r.company_id == order.company_id)\n        if order.fiscal_position_id and taxes:\n            tax_ids = order.fiscal_position_id.map_tax(taxes).ids\n        else:\n            tax_ids = taxes.ids\n\n        invoice = inv_obj.create({\n            'name': order.client_order_ref or order.name,\n            'origin': order.name,\n            'type': 'out_invoice',\n            'reference': False,\n            'account_id': order.partner_id.property_account_receivable_id.id,\n            'partner_id': order.partner_invoice_id.id,\n            'partner_shipping_id': order.partner_shipping_id.id,\n            'invoice_line_ids': [(0, 0, {\n                'name': name,\n                'origin': order.name,\n                'account_id': account_id,\n                'price_unit': amount,\n                'quantity': 1.0,\n                'discount': 0.0,\n                'uom_id': self.product_id.uom_id.id,\n                'product_id': self.product_id.id,\n                'sale_line_ids': [(6, 0, [so_line.id])],\n                'invoice_line_tax_ids': [(6, 0, tax_ids)],\n                'account_analytic_id': order.analytic_account_id.id or False,\n            })],\n            'currency_id': order.pricelist_id.currency_id.id,\n            'payment_term_id': order.payment_term_id.id,\n            'fiscal_position_id': order.fiscal_position_id.id or order.partner_id.property_account_position_id.id,\n            'team_id': order.team_id.id,\n            'user_id': order.user_id.id,\n            'comment': order.note,\n        })\n        invoice.compute_taxes()\n        invoice.message_post_with_view('mail.message_origin_link',\n                    values={'self': invoice, 'origin': order},\n                    subtype_id=self.env.ref('mail.mt_note').id)\n        return invoice\n\n    @api.multi\n    def create_invoices(self):\n        sale_orders = self.env['sale.order'].browse(self._context.get('active_ids', []))\n\n        if self.advance_payment_method == 'delivered':\n            sale_orders.action_invoice_create()\n        elif self.advance_payment_method == 'all':\n            sale_orders.action_invoice_create(final=True)\n        else:\n            \n            if not self.product_id:\n                vals = self._prepare_deposit_product()\n                self.product_id = self.env['product.product'].create(vals)\n                self.env['ir.config_parameter'].sudo().set_param('sale.default_deposit_product_id', self.product_id.id)\n\n            sale_line_obj = self.env['sale.order.line']\n            for order in sale_orders:\n                if self.advance_payment_method == 'percentage':\n                    amount = order.amount_untaxed * self.amount / 100\n                else:\n                    amount = self.amount\n                if self.product_id.invoice_policy != 'order':\n                    raise UserError(_('The product used to invoice a down payment should have an invoice policy set to \"Ordered quantities\". Please update your deposit product to be able to create a deposit invoice.'))\n                if self.product_id.type != 'service':\n                    raise UserError(_(\"The product used to invoice a down payment should be of type 'Service'. Please use another product or update this product.\"))\n                taxes = self.product_id.taxes_id.filtered(lambda r: not order.company_id or r.company_id == order.company_id)\n                if order.fiscal_position_id and taxes:\n                    tax_ids = order.fiscal_position_id.map_tax(taxes).ids\n                else:\n                    tax_ids = taxes.ids\n                context = {'lang': order.partner_id.lang}\n                so_line = sale_line_obj.create({\n                    'name': _('Advance: %s') % (time.strftime('%m %Y'),),\n                    'price_unit': amount,\n                    'product_uom_qty': 0.0,\n                    'order_id': order.id,\n                    'discount': 0.0,\n                    'product_uom': self.product_id.uom_id.id,\n                    'product_id': self.product_id.id,\n                    'tax_id': [(6, 0, tax_ids)],\n                    'is_downpayment': True,\n                })\n                del context\n                self._create_invoice(order, so_line, amount)\n        if self._context.get('open_invoices', False):\n            return sale_orders.action_view_invoice()\n        return {'type': 'ir.actions.act_window_close'}\n\n    def _prepare_deposit_product(self):\n        return {\n            'name': 'Down payment',\n            'type': 'service',\n            'invoice_policy': 'order',\n            'property_account_income_id': self.deposit_account_id.id,\n            'taxes_id': [(6, 0, self.deposit_taxes_id.ids)],\n        }\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     create deposit product necessary ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport time\n\nfrom odoo import api, fields, models, _\nfrom odoo.addons import decimal_precision as dp\nfrom odoo.exceptions import UserError\n\n\nclass SaleAdvancePaymentInv(models.TransientModel):\n    _name = \"sale.advance.payment.inv\"\n    _description = \"Sales Advance Payment Invoice\"\n\n    @api.model\n    def _count(self):\n        return len(self._context.get('active_ids', []))\n\n    @api.model\n    def _get_advance_payment_method(self):\n        if self._count() == 1:\n            sale_obj = self.env['sale.order']\n            order = sale_obj.browse(self._context.get('active_ids'))[0]\n            if all([line.product_id.invoice_policy == 'order' for line in order.order_line]) or order.invoice_count:\n                return 'all'\n        return 'delivered'\n\n    @api.model\n    def _default_product_id(self):\n        product_id = self.env['ir.config_parameter'].sudo().get_param('sale.default_deposit_product_id')\n        return self.env['product.product'].browse(int(product_id))\n\n    @api.model\n    def _default_deposit_account_id(self):\n        return self._default_product_id().property_account_income_id\n\n    @api.model\n    def _default_deposit_taxes_id(self):\n        return self._default_product_id().taxes_id\n\n    advance_payment_method = fields.Selection([\n        ('delivered', 'Invoiceable lines'),\n        ('all', 'Invoiceable lines (deduct down payments)'),\n        ('percentage', 'Down payment (percentage)'),\n        ('fixed', 'Down payment (fixed amount)')\n        ], string='What do you want to invoice?', default=_get_advance_payment_method, required=True)\n    product_id = fields.Many2one('product.product', string='Down Payment Product', domain=[('type', '=', 'service')],\n        default=_default_product_id)\n    count = fields.Integer(default=_count, string='# of Orders')\n    amount = fields.Float('Down Payment Amount', digits=dp.get_precision('Account'), help=\"The amount to be invoiced in advance, taxes excluded.\")\n    deposit_account_id = fields.Many2one(\"account.account\", string=\"Income Account\", domain=[('deprecated', '=', False)],\n        help=\"Account used for deposits\", default=_default_deposit_account_id)\n    deposit_taxes_id = fields.Many2many(\"account.tax\", string=\"Customer Taxes\", help=\"Taxes used for deposits\", default=_default_deposit_taxes_id)\n\n    @api.onchange('advance_payment_method')\n    def onchange_advance_payment_method(self):\n        if self.advance_payment_method == 'percentage':\n            return {'value': {'amount': 0}}\n        return {}\n\n    @api.multi\n    def _create_invoice(self, order, so_line, amount):\n        inv_obj = self.env['account.invoice']\n        ir_property_obj = self.env['ir.property']\n\n        account_id = False\n        if self.product_id.id:\n            account_id = self.product_id.property_account_income_id.id\n        if not account_id:\n            inc_acc = ir_property_obj.get('property_account_income_categ_id', 'product.category')\n            account_id = order.fiscal_position_id.map_account(inc_acc).id if inc_acc else False\n        if not account_id:\n            raise UserError(\n                _('There is no income account defined for this product: \"%s\". You may have to install a chart of account from Accounting app, settings menu.') %\n                (self.product_id.name,))\n\n        if self.amount <= 0.00:\n            raise UserError(_('The value of the down payment amount must be positive.'))\n        context = {'lang': order.partner_id.lang}\n        if self.advance_payment_method == 'percentage':\n            amount = order.amount_untaxed * self.amount / 100\n            name = _(\"Down payment of %s%%\") % (self.amount,)\n        else:\n            amount = self.amount\n            name = _('Down Payment')\n        del context\n        taxes = self.product_id.taxes_id.filtered(lambda r: not order.company_id or r.company_id == order.company_id)\n        if order.fiscal_position_id and taxes:\n            tax_ids = order.fiscal_position_id.map_tax(taxes).ids\n        else:\n            tax_ids = taxes.ids\n\n        invoice = inv_obj.create({\n            'name': order.client_order_ref or order.name,\n            'origin': order.name,\n            'type': 'out_invoice',\n            'reference': False,\n            'account_id': order.partner_id.property_account_receivable_id.id,\n            'partner_id': order.partner_invoice_id.id,\n            'partner_shipping_id': order.partner_shipping_id.id,\n            'invoice_line_ids': [(0, 0, {\n                'name': name,\n                'origin': order.name,\n                'account_id': account_id,\n                'price_unit': amount,\n                'quantity': 1.0,\n                'discount': 0.0,\n                'uom_id': self.product_id.uom_id.id,\n                'product_id': self.product_id.id,\n                'sale_line_ids': [(6, 0, [so_line.id])],\n                'invoice_line_tax_ids': [(6, 0, tax_ids)],\n                'account_analytic_id': order.analytic_account_id.id or False,\n            })],\n            'currency_id': order.pricelist_id.currency_id.id,\n            'payment_term_id': order.payment_term_id.id,\n            'fiscal_position_id': order.fiscal_position_id.id or order.partner_id.property_account_position_id.id,\n            'team_id': order.team_id.id,\n            'user_id': order.user_id.id,\n            'comment': order.note,\n        })\n        invoice.compute_taxes()\n        invoice.message_post_with_view('mail.message_origin_link',\n                    values={'self': invoice, 'origin': order},\n                    subtype_id=self.env.ref('mail.mt_note').id)\n        return invoice\n\n    @api.multi\n    def create_invoices(self):\n        sale_orders = self.env['sale.order'].browse(self._context.get('active_ids', []))\n\n        if self.advance_payment_method == 'delivered':\n            sale_orders.action_invoice_create()\n        elif self.advance_payment_method == 'all':\n            sale_orders.action_invoice_create(final=True)\n        else:\n            # Create deposit product if necessary\n            if not self.product_id:\n                vals = self._prepare_deposit_product()\n                self.product_id = self.env['product.product'].create(vals)\n                self.env['ir.config_parameter'].sudo().set_param('sale.default_deposit_product_id', self.product_id.id)\n\n            sale_line_obj = self.env['sale.order.line']\n            for order in sale_orders:\n                if self.advance_payment_method == 'percentage':\n                    amount = order.amount_untaxed * self.amount / 100\n                else:\n                    amount = self.amount\n                if self.product_id.invoice_policy != 'order':\n                    raise UserError(_('The product used to invoice a down payment should have an invoice policy set to \"Ordered quantities\". Please update your deposit product to be able to create a deposit invoice.'))\n                if self.product_id.type != 'service':\n                    raise UserError(_(\"The product used to invoice a down payment should be of type 'Service'. Please use another product or update this product.\"))\n                taxes = self.product_id.taxes_id.filtered(lambda r: not order.company_id or r.company_id == order.company_id)\n                if order.fiscal_position_id and taxes:\n                    tax_ids = order.fiscal_position_id.map_tax(taxes).ids\n                else:\n                    tax_ids = taxes.ids\n                context = {'lang': order.partner_id.lang}\n                so_line = sale_line_obj.create({\n                    'name': _('Advance: %s') % (time.strftime('%m %Y'),),\n                    'price_unit': amount,\n                    'product_uom_qty': 0.0,\n                    'order_id': order.id,\n                    'discount': 0.0,\n                    'product_uom': self.product_id.uom_id.id,\n                    'product_id': self.product_id.id,\n                    'tax_id': [(6, 0, tax_ids)],\n                    'is_downpayment': True,\n                })\n                del context\n                self._create_invoice(order, so_line, amount)\n        if self._context.get('open_invoices', False):\n            return sale_orders.action_view_invoice()\n        return {'type': 'ir.actions.act_window_close'}\n\n    def _prepare_deposit_product(self):\n        return {\n            'name': 'Down payment',\n            'type': 'service',\n            'invoice_policy': 'order',\n            'property_account_income_id': self.deposit_account_id.id,\n            'taxes_id': [(6, 0, self.deposit_taxes_id.ids)],\n        }\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "sale_make_invoice_advance.py", "id": "f86e47867aed1c3a7e1d5ca4c397f883", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/sale/wizard/sale_make_invoice_advance.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}