{"author": "mitmproxy", "code": "import pytest\n\nfrom mitmproxy import options\nfrom mitmproxy.tools.console import statusbar, master\n\n\ndef test_statusbar(monkeypatch):\n    o = options.Options()\n    m = master.ConsoleMaster(o)\n    m.options.update(\n        setheaders=[\":~q:foo:bar\"],\n        replacements=[\":~q:foo:bar\"],\n        ignore_hosts=[\"example.com\", \"example.org\"],\n        tcp_hosts=[\"example.tcp\"],\n        intercept=\"~q\",\n        view_filter=\"~dst example.com\",\n        stickycookie=\"~dst example.com\",\n        stickyauth=\"~dst example.com\",\n        console_default_contentview=\"javascript\",\n        anticache=True,\n        anticomp=True,\n        showhost=True,\n        server_replay_refresh=False,\n        server_replay_kill_extra=True,\n        upstream_cert=False,\n        stream_large_bodies=\"3m\",\n        mode=\"transparent\",\n    )\n\n    m.options.update(view_order='url', console_focus_follow=True)\n    monkeypatch.setattr(m.addons.get(\"clientplayback\"), \"count\", lambda: 42)\n    monkeypatch.setattr(m.addons.get(\"serverplayback\"), \"count\", lambda: 42)\n\n    bar = statusbar.StatusBar(m)  \n    assert bar.ib._w\n\n\n@pytest.mark.parametrize(\"message,ready_message\", [\n    (\"\", [(None, \"\"), (\"warn\", \"\")]),\n    ((\"info\", \"Line fits into statusbar\"), [(\"info\", \"Line fits into statusbar\"),\n                                            (\"warn\", \"\")]),\n    (\"Line doesn't fit into statusbar\", [(None, \"Line doesn'\\u2026\"),\n                                         (\"warn\", \"(more in eventlog)\")]),\n    ((\"alert\", \"Two lines.\\nFirst fits\"), [(\"alert\", \"Two lines.\"),\n                                           (\"warn\", \"(more in eventlog)\")]),\n    (\"Two long lines\\nFirst doesn't fit\", [(None, \"Two long li\\u2026\"),\n                                           (\"warn\", \"(more in eventlog)\")])\n])\ndef test_shorten_message(message, ready_message):\n    o = options.Options()\n    m = master.ConsoleMaster(o)\n    ab = statusbar.ActionBar(m)\n    assert ab.shorten_message(message, max_width=30) == ready_message\n\n\ndef test_shorten_message_narrow():\n    o = options.Options()\n    m = master.ConsoleMaster(o)\n    ab = statusbar.ActionBar(m)\n    shorten_msg = ab.shorten_message(\"error\", max_width=4)\n    assert shorten_msg == [(None, \"\\u2026\"), (\"warn\", \"(more in eventlog)\")]\n", "comments": "  already causes redraw ", "content": "import pytest\n\nfrom mitmproxy import options\nfrom mitmproxy.tools.console import statusbar, master\n\n\ndef test_statusbar(monkeypatch):\n    o = options.Options()\n    m = master.ConsoleMaster(o)\n    m.options.update(\n        setheaders=[\":~q:foo:bar\"],\n        replacements=[\":~q:foo:bar\"],\n        ignore_hosts=[\"example.com\", \"example.org\"],\n        tcp_hosts=[\"example.tcp\"],\n        intercept=\"~q\",\n        view_filter=\"~dst example.com\",\n        stickycookie=\"~dst example.com\",\n        stickyauth=\"~dst example.com\",\n        console_default_contentview=\"javascript\",\n        anticache=True,\n        anticomp=True,\n        showhost=True,\n        server_replay_refresh=False,\n        server_replay_kill_extra=True,\n        upstream_cert=False,\n        stream_large_bodies=\"3m\",\n        mode=\"transparent\",\n    )\n\n    m.options.update(view_order='url', console_focus_follow=True)\n    monkeypatch.setattr(m.addons.get(\"clientplayback\"), \"count\", lambda: 42)\n    monkeypatch.setattr(m.addons.get(\"serverplayback\"), \"count\", lambda: 42)\n\n    bar = statusbar.StatusBar(m)  # this already causes a redraw\n    assert bar.ib._w\n\n\n@pytest.mark.parametrize(\"message,ready_message\", [\n    (\"\", [(None, \"\"), (\"warn\", \"\")]),\n    ((\"info\", \"Line fits into statusbar\"), [(\"info\", \"Line fits into statusbar\"),\n                                            (\"warn\", \"\")]),\n    (\"Line doesn't fit into statusbar\", [(None, \"Line doesn'\\u2026\"),\n                                         (\"warn\", \"(more in eventlog)\")]),\n    ((\"alert\", \"Two lines.\\nFirst fits\"), [(\"alert\", \"Two lines.\"),\n                                           (\"warn\", \"(more in eventlog)\")]),\n    (\"Two long lines\\nFirst doesn't fit\", [(None, \"Two long li\\u2026\"),\n                                           (\"warn\", \"(more in eventlog)\")])\n])\ndef test_shorten_message(message, ready_message):\n    o = options.Options()\n    m = master.ConsoleMaster(o)\n    ab = statusbar.ActionBar(m)\n    assert ab.shorten_message(message, max_width=30) == ready_message\n\n\ndef test_shorten_message_narrow():\n    o = options.Options()\n    m = master.ConsoleMaster(o)\n    ab = statusbar.ActionBar(m)\n    shorten_msg = ab.shorten_message(\"error\", max_width=4)\n    assert shorten_msg == [(None, \"\\u2026\"), (\"warn\", \"(more in eventlog)\")]\n", "description": "An interactive TLS-capable intercepting HTTP proxy for penetration testers and software developers.", "file_name": "test_statusbar.py", "id": "45d65c71376ef830e7bf92f87a7a58ab", "language": "Python", "project_name": "mitmproxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/mitmproxy-mitmproxy/mitmproxy-mitmproxy-0bc3f1f/test/mitmproxy/tools/console/test_statusbar.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:46Z", "url": "https://github.com/mitmproxy/mitmproxy", "wiki": false}