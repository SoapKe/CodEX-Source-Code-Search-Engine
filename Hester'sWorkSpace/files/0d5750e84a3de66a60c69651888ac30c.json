{"author": "ansible", "code": "\n\n\"\"\"Verify the current Shippable run has the required number of jobs.\"\"\"\n\nfrom __future__ import absolute_import, print_function\n\n\nimport argparse\nimport errno\nimport json\nimport os\nimport sys\n\nfrom lib.http import (\n    HttpClient,\n)\n\nfrom lib.util import (\n    display,\n    ApplicationError,\n    ApplicationWarning,\n    MissingEnvironmentVariable,\n)\n\n\ntry:\n    import argcomplete\nexcept ImportError:\n    argcomplete = None\n\n\ndef main():\n    \"\"\"Main program function.\"\"\"\n    try:\n        args = parse_args()\n        display.verbosity = args.verbosity\n        display.color = args.color\n\n        try:\n            run_id = os.environ['SHIPPABLE_BUILD_ID']\n        except KeyError as ex:\n            raise MissingEnvironmentVariable(ex.args[0])\n\n        client = HttpClient(args)\n        response = client.get('https://api.shippable.com/jobs?runIds=%s' % run_id)\n        jobs = response.json()\n\n        if not isinstance(jobs, list):\n            raise ApplicationError(json.dumps(jobs, indent=4, sort_keys=True))\n\n        if len(jobs) == 1:\n            raise ApplicationError('Shippable run %s has only one job. Did you use the \"Rebuild with SSH\" option?' % run_id)\n    except ApplicationWarning as ex:\n        display.warning(str(ex))\n        exit(0)\n    except ApplicationError as ex:\n        display.error(str(ex))\n        exit(1)\n    except KeyboardInterrupt:\n        exit(2)\n    except IOError as ex:\n        if ex.errno == errno.EPIPE:\n            exit(3)\n        raise\n\n\ndef parse_args():\n    \"\"\"Parse command line arguments.\"\"\"\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument('-e', '--explain',\n                        action='store_true',\n                        help='explain commands that would be executed')\n\n    parser.add_argument('-v', '--verbose',\n                        dest='verbosity',\n                        action='count',\n                        default=0,\n                        help='display more output')\n\n    parser.add_argument('--color',\n                        metavar='COLOR',\n                        nargs='?',\n                        help='generate color output: %(choices)s',\n                        choices=('yes', 'no', 'auto'),\n                        const='yes',\n                        default='auto')\n\n    if argcomplete:\n        argcomplete.autocomplete(parser)\n\n    args = parser.parse_args()\n\n    if args.color == 'yes':\n        args.color = True\n    elif args.color == 'no':\n        args.color = False\n    elif 'SHIPPABLE' in os.environ:\n        args.color = True\n    else:\n        args.color = sys.stdout.isatty()\n\n    return args\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "   verify current shippable run required number jobs        future   import absolute import  print function    noinspection pycompatibility import argparse import errno import json import os import sys  lib http import (     httpclient  )  lib util import (     display      applicationerror      applicationwarning      missingenvironmentvariable  )   try      import argcomplete except importerror      argcomplete   none   def main()         main program function         try          args   parse args()         display verbosity   args verbosity         display color   args color          try              run id   os environ  shippable build id           except keyerror ex              raise missingenvironmentvariable(ex args 0 )          client   httpclient(args)         response   client get( https   api shippable com jobs runids     run id)         jobs   response json()          isinstance(jobs  list)              raise applicationerror(json dumps(jobs  indent 4  sort keys true))          len(jobs)    1              raise applicationerror( shippable run  one job  did use  rebuild ssh  option     run id)     except applicationwarning ex          display warning(str(ex))         exit(0)     except applicationerror ex          display error(str(ex))         exit(1)     except keyboardinterrupt          exit(2)     except ioerror ex          ex errno    errno epipe              exit(3)         raise   def parse args()         parse command line arguments         usr bin env python    python argcomplete ok    noinspection pycompatibility ", "content": "#!/usr/bin/env python\n# PYTHON_ARGCOMPLETE_OK\n\"\"\"Verify the current Shippable run has the required number of jobs.\"\"\"\n\nfrom __future__ import absolute_import, print_function\n\n# noinspection PyCompatibility\nimport argparse\nimport errno\nimport json\nimport os\nimport sys\n\nfrom lib.http import (\n    HttpClient,\n)\n\nfrom lib.util import (\n    display,\n    ApplicationError,\n    ApplicationWarning,\n    MissingEnvironmentVariable,\n)\n\n\ntry:\n    import argcomplete\nexcept ImportError:\n    argcomplete = None\n\n\ndef main():\n    \"\"\"Main program function.\"\"\"\n    try:\n        args = parse_args()\n        display.verbosity = args.verbosity\n        display.color = args.color\n\n        try:\n            run_id = os.environ['SHIPPABLE_BUILD_ID']\n        except KeyError as ex:\n            raise MissingEnvironmentVariable(ex.args[0])\n\n        client = HttpClient(args)\n        response = client.get('https://api.shippable.com/jobs?runIds=%s' % run_id)\n        jobs = response.json()\n\n        if not isinstance(jobs, list):\n            raise ApplicationError(json.dumps(jobs, indent=4, sort_keys=True))\n\n        if len(jobs) == 1:\n            raise ApplicationError('Shippable run %s has only one job. Did you use the \"Rebuild with SSH\" option?' % run_id)\n    except ApplicationWarning as ex:\n        display.warning(str(ex))\n        exit(0)\n    except ApplicationError as ex:\n        display.error(str(ex))\n        exit(1)\n    except KeyboardInterrupt:\n        exit(2)\n    except IOError as ex:\n        if ex.errno == errno.EPIPE:\n            exit(3)\n        raise\n\n\ndef parse_args():\n    \"\"\"Parse command line arguments.\"\"\"\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument('-e', '--explain',\n                        action='store_true',\n                        help='explain commands that would be executed')\n\n    parser.add_argument('-v', '--verbose',\n                        dest='verbosity',\n                        action='count',\n                        default=0,\n                        help='display more output')\n\n    parser.add_argument('--color',\n                        metavar='COLOR',\n                        nargs='?',\n                        help='generate color output: %(choices)s',\n                        choices=('yes', 'no', 'auto'),\n                        const='yes',\n                        default='auto')\n\n    if argcomplete:\n        argcomplete.autocomplete(parser)\n\n    args = parser.parse_args()\n\n    if args.color == 'yes':\n        args.color = True\n    elif args.color == 'no':\n        args.color = False\n    elif 'SHIPPABLE' in os.environ:\n        args.color = True\n    else:\n        args.color = sys.stdout.isatty()\n\n    return args\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "shippable.py", "id": "0d5750e84a3de66a60c69651888ac30c", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/runner/shippable.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}