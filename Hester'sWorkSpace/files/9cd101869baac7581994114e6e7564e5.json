{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass LiveLeakIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:\\w+\\.)?liveleak\\.com/view\\?(?:.*?)i=(?P<id>[\\w_]+)(?:.*)'\n    _TESTS = [{\n        'url': 'http://www.liveleak.com/view?i=757_1364311680',\n        'md5': '0813c2430bea7a46bf13acf3406992f4',\n        'info_dict': {\n            'id': '757_1364311680',\n            'ext': 'mp4',\n            'description': 'extremely bad day for this guy..!',\n            'uploader': 'ljfriel2',\n            'title': 'Most unlucky car accident',\n            'thumbnail': r're:^https?://.*\\.jpg$'\n        }\n    }, {\n        'url': 'http://www.liveleak.com/view?i=f93_1390833151',\n        'md5': 'd3f1367d14cc3c15bf24fbfbe04b9abf',\n        'info_dict': {\n            'id': 'f93_1390833151',\n            'ext': 'mp4',\n            'description': 'German Television Channel NDR does an exclusive interview with Edward Snowden.\\r\\nUploaded on LiveLeak cause German Television thinks the rest of the world isn\\'t intereseted in Edward Snowden.',\n            'uploader': 'ARD_Stinkt',\n            'title': 'German Television does first Edward Snowden Interview (ENGLISH)',\n            'thumbnail': r're:^https?://.*\\.jpg$'\n        }\n    }, {\n        \n        'url': 'http://www.liveleak.com/view?i=4f7_1392687779',\n        'md5': '42c6d97d54f1db107958760788c5f48f',\n        'info_dict': {\n            'id': '4f7_1392687779',\n            'ext': 'mp4',\n            'description': \"The guy with the cigarette seems amazingly nonchalant about the whole thing...  I really hope my friends' reactions would be a bit stronger.\\r\\n\\r\\nAction-go to 0:55.\",\n            'uploader': 'CapObveus',\n            'title': 'Man is Fatally Struck by Reckless Car While Packing up a Moving Truck',\n            'age_limit': 18,\n        },\n        'skip': 'Video is dead',\n    }, {\n        \n        \n        'url': 'http://www.liveleak.com/view?i=801_1409392012',\n        'md5': 'c3a449dbaca5c0d1825caecd52a57d7b',\n        'info_dict': {\n            'id': '801_1409392012',\n            'ext': 'mp4',\n            'description': 'Happened on 27.7.2014. \\r\\nAt 0:53 you can see people still swimming at near beach.',\n            'uploader': 'bony333',\n            'title': 'Crazy Hungarian tourist films close call waterspout in Croatia',\n            'thumbnail': r're:^https?://.*\\.jpg$'\n        }\n    }, {\n        \n        'url': 'http://m.liveleak.com/view?i=763_1473349649',\n        'add_ie': ['Youtube'],\n        'info_dict': {\n            'id': '763_1473349649',\n            'ext': 'mp4',\n            'title': 'Reporters and public officials ignore epidemic of black on asian violence in Sacramento | Colin Flaherty',\n            'description': 'Colin being the warrior he is and showing the injustice Asians in Sacramento are being subjected to.',\n            'uploader': 'Ziz',\n            'upload_date': '20160908',\n            'uploader_id': 'UCEbta5E_jqlZmEJsriTEtnw'\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.liveleak.com/view?i=677_1439397581',\n        'info_dict': {\n            'id': '677_1439397581',\n            'title': 'Fuel Depot in China Explosion caught on video',\n        },\n        'playlist_count': 3,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+src=\"(https?://(?:\\w+\\.)?liveleak\\.com/ll_embed\\?[^\"]*[if]=[\\w_]+[^\"]+)\"',\n            webpage)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        video_title = self._og_search_title(webpage).replace('LiveLeak.com -', '').strip()\n        video_description = self._og_search_description(webpage)\n        video_uploader = self._html_search_regex(\n            r'By:.*?(\\w+)</a>', webpage, 'uploader', fatal=False)\n        age_limit = int_or_none(self._search_regex(\n            r'you confirm that you are ([0-9]+) years and over.',\n            webpage, 'age limit', default=None))\n        video_thumbnail = self._og_search_thumbnail(webpage)\n\n        entries = self._parse_html5_media_entries(url, webpage, video_id)\n        if not entries:\n            \n            embed_url = self._search_regex(\n                r'<iframe[^>]+src=\"((?:https?:)?//(?:www\\.)?(?:prochan|youtube)\\.com/embed[^\"]+)\"',\n                webpage, 'embed URL')\n            return {\n                '_type': 'url_transparent',\n                'url': embed_url,\n                'id': video_id,\n                'title': video_title,\n                'description': video_description,\n                'uploader': video_uploader,\n                'age_limit': age_limit,\n            }\n\n        for idx, info_dict in enumerate(entries):\n            for a_format in info_dict['formats']:\n                if not a_format.get('height'):\n                    a_format['height'] = int_or_none(self._search_regex(\n                        r'([0-9]+)p\\.mp4', a_format['url'], 'height label',\n                        default=None))\n\n            self._sort_formats(info_dict['formats'])\n\n            \n            if len(entries) > 1:\n                info_dict['id'] = '%s_%s' % (video_id, idx + 1)\n            else:\n                info_dict['id'] = video_id\n\n            info_dict.update({\n                'title': video_title,\n                'description': video_description,\n                'uploader': video_uploader,\n                'age_limit': age_limit,\n                'thumbnail': video_thumbnail,\n            })\n\n        return self.playlist_result(entries, video_id, video_title)\n\n\nclass LiveLeakEmbedIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?liveleak\\.com/ll_embed\\?.*?\\b(?P<kind>[if])=(?P<id>[\\w_]+)'\n\n    \n    _TESTS = [{\n        'url': 'https://www.liveleak.com/ll_embed?i=874_1459135191',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.liveleak.com/ll_embed?f=ab065df993c1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id = mobj.group('kind', 'id')\n\n        if kind == 'f':\n            webpage = self._download_webpage(url, video_id)\n            liveleak_url = self._search_regex(\n                r'logourl\\s*:\\s*(?P<q1>[\\'\"])(?P<url>%s)(?P=q1)' % LiveLeakIE._VALID_URL,\n                webpage, 'LiveLeak URL', group='url')\n        elif kind == 'i':\n            liveleak_url = 'http://www.liveleak.com/view?i=%s' % video_id\n\n        return self.url_result(liveleak_url, ie=LiveLeakIE.ie_key())\n", "comments": "# Prochan embed\n# Covers https://github.com/rg3/youtube-dl/pull/5983\n# Multiple resolutions\n# Covers https://github.com/rg3/youtube-dl/pull/10664#issuecomment-247439521\n# Maybe an embed?\n# Don't append entry ID for one-video pages to keep backward compatibility\n# See generic.py for actual test cases\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass LiveLeakIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:\\w+\\.)?liveleak\\.com/view\\?(?:.*?)i=(?P<id>[\\w_]+)(?:.*)'\n    _TESTS = [{\n        'url': 'http://www.liveleak.com/view?i=757_1364311680',\n        'md5': '0813c2430bea7a46bf13acf3406992f4',\n        'info_dict': {\n            'id': '757_1364311680',\n            'ext': 'mp4',\n            'description': 'extremely bad day for this guy..!',\n            'uploader': 'ljfriel2',\n            'title': 'Most unlucky car accident',\n            'thumbnail': r're:^https?://.*\\.jpg$'\n        }\n    }, {\n        'url': 'http://www.liveleak.com/view?i=f93_1390833151',\n        'md5': 'd3f1367d14cc3c15bf24fbfbe04b9abf',\n        'info_dict': {\n            'id': 'f93_1390833151',\n            'ext': 'mp4',\n            'description': 'German Television Channel NDR does an exclusive interview with Edward Snowden.\\r\\nUploaded on LiveLeak cause German Television thinks the rest of the world isn\\'t intereseted in Edward Snowden.',\n            'uploader': 'ARD_Stinkt',\n            'title': 'German Television does first Edward Snowden Interview (ENGLISH)',\n            'thumbnail': r're:^https?://.*\\.jpg$'\n        }\n    }, {\n        # Prochan embed\n        'url': 'http://www.liveleak.com/view?i=4f7_1392687779',\n        'md5': '42c6d97d54f1db107958760788c5f48f',\n        'info_dict': {\n            'id': '4f7_1392687779',\n            'ext': 'mp4',\n            'description': \"The guy with the cigarette seems amazingly nonchalant about the whole thing...  I really hope my friends' reactions would be a bit stronger.\\r\\n\\r\\nAction-go to 0:55.\",\n            'uploader': 'CapObveus',\n            'title': 'Man is Fatally Struck by Reckless Car While Packing up a Moving Truck',\n            'age_limit': 18,\n        },\n        'skip': 'Video is dead',\n    }, {\n        # Covers https://github.com/rg3/youtube-dl/pull/5983\n        # Multiple resolutions\n        'url': 'http://www.liveleak.com/view?i=801_1409392012',\n        'md5': 'c3a449dbaca5c0d1825caecd52a57d7b',\n        'info_dict': {\n            'id': '801_1409392012',\n            'ext': 'mp4',\n            'description': 'Happened on 27.7.2014. \\r\\nAt 0:53 you can see people still swimming at near beach.',\n            'uploader': 'bony333',\n            'title': 'Crazy Hungarian tourist films close call waterspout in Croatia',\n            'thumbnail': r're:^https?://.*\\.jpg$'\n        }\n    }, {\n        # Covers https://github.com/rg3/youtube-dl/pull/10664#issuecomment-247439521\n        'url': 'http://m.liveleak.com/view?i=763_1473349649',\n        'add_ie': ['Youtube'],\n        'info_dict': {\n            'id': '763_1473349649',\n            'ext': 'mp4',\n            'title': 'Reporters and public officials ignore epidemic of black on asian violence in Sacramento | Colin Flaherty',\n            'description': 'Colin being the warrior he is and showing the injustice Asians in Sacramento are being subjected to.',\n            'uploader': 'Ziz',\n            'upload_date': '20160908',\n            'uploader_id': 'UCEbta5E_jqlZmEJsriTEtnw'\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.liveleak.com/view?i=677_1439397581',\n        'info_dict': {\n            'id': '677_1439397581',\n            'title': 'Fuel Depot in China Explosion caught on video',\n        },\n        'playlist_count': 3,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+src=\"(https?://(?:\\w+\\.)?liveleak\\.com/ll_embed\\?[^\"]*[if]=[\\w_]+[^\"]+)\"',\n            webpage)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        video_title = self._og_search_title(webpage).replace('LiveLeak.com -', '').strip()\n        video_description = self._og_search_description(webpage)\n        video_uploader = self._html_search_regex(\n            r'By:.*?(\\w+)</a>', webpage, 'uploader', fatal=False)\n        age_limit = int_or_none(self._search_regex(\n            r'you confirm that you are ([0-9]+) years and over.',\n            webpage, 'age limit', default=None))\n        video_thumbnail = self._og_search_thumbnail(webpage)\n\n        entries = self._parse_html5_media_entries(url, webpage, video_id)\n        if not entries:\n            # Maybe an embed?\n            embed_url = self._search_regex(\n                r'<iframe[^>]+src=\"((?:https?:)?//(?:www\\.)?(?:prochan|youtube)\\.com/embed[^\"]+)\"',\n                webpage, 'embed URL')\n            return {\n                '_type': 'url_transparent',\n                'url': embed_url,\n                'id': video_id,\n                'title': video_title,\n                'description': video_description,\n                'uploader': video_uploader,\n                'age_limit': age_limit,\n            }\n\n        for idx, info_dict in enumerate(entries):\n            for a_format in info_dict['formats']:\n                if not a_format.get('height'):\n                    a_format['height'] = int_or_none(self._search_regex(\n                        r'([0-9]+)p\\.mp4', a_format['url'], 'height label',\n                        default=None))\n\n            self._sort_formats(info_dict['formats'])\n\n            # Don't append entry ID for one-video pages to keep backward compatibility\n            if len(entries) > 1:\n                info_dict['id'] = '%s_%s' % (video_id, idx + 1)\n            else:\n                info_dict['id'] = video_id\n\n            info_dict.update({\n                'title': video_title,\n                'description': video_description,\n                'uploader': video_uploader,\n                'age_limit': age_limit,\n                'thumbnail': video_thumbnail,\n            })\n\n        return self.playlist_result(entries, video_id, video_title)\n\n\nclass LiveLeakEmbedIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?liveleak\\.com/ll_embed\\?.*?\\b(?P<kind>[if])=(?P<id>[\\w_]+)'\n\n    # See generic.py for actual test cases\n    _TESTS = [{\n        'url': 'https://www.liveleak.com/ll_embed?i=874_1459135191',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.liveleak.com/ll_embed?f=ab065df993c1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id = mobj.group('kind', 'id')\n\n        if kind == 'f':\n            webpage = self._download_webpage(url, video_id)\n            liveleak_url = self._search_regex(\n                r'logourl\\s*:\\s*(?P<q1>[\\'\"])(?P<url>%s)(?P=q1)' % LiveLeakIE._VALID_URL,\n                webpage, 'LiveLeak URL', group='url')\n        elif kind == 'i':\n            liveleak_url = 'http://www.liveleak.com/view?i=%s' % video_id\n\n        return self.url_result(liveleak_url, ie=LiveLeakIE.ie_key())\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "liveleak.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/liveleak.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}