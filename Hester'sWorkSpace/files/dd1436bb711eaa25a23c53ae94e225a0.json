{"author": "openai", "code": "import sys\n\nclass Error(Exception):\n    pass\n\n\n\nclass Unregistered(Error):\n    \"\"\"Raised when the user requests an item from the registry that does\n    not actually exist.\n    \"\"\"\n    pass\n\nclass UnregisteredEnv(Unregistered):\n    \"\"\"Raised when the user requests an env from the registry that does\n    not actually exist.\n    \"\"\"\n    pass\n\nclass UnregisteredBenchmark(Unregistered):\n    \"\"\"Raised when the user requests an env from the registry that does\n    not actually exist.\n    \"\"\"\n    pass\n\nclass DeprecatedEnv(Error):\n    \"\"\"Raised when the user requests an env from the registry with an\n    older version number than the latest env with the same name.\n    \"\"\"\n    pass\n\nclass UnseedableEnv(Error):\n    \"\"\"Raised when the user tries to seed an env that does not support\n    seeding.\n    \"\"\"\n    pass\n\nclass DependencyNotInstalled(Error):\n    pass\n\nclass UnsupportedMode(Exception):\n    \"\"\"Raised when the user requests a rendering mode not supported by the\n    environment.\n    \"\"\"\n    pass\n\nclass ResetNeeded(Exception):\n    \"\"\"When the monitor is active, raised when the user tries to step an\n    environment that's already done.\n    \"\"\"\n    pass\n\nclass ResetNotAllowed(Exception):\n    \"\"\"When the monitor is active, raised when the user tries to step an\n    environment that's not yet done.\n    \"\"\"\n    pass\n\nclass InvalidAction(Exception):\n    \"\"\"Raised when the user performs an action not contained within the\n    action space\n    \"\"\"\n    pass\n\n\n\nclass APIError(Error):\n    def __init__(self, message=None, http_body=None, http_status=None,\n                 json_body=None, headers=None):\n        super(APIError, self).__init__(message)\n\n        if http_body and hasattr(http_body, 'decode'):\n            try:\n                http_body = http_body.decode('utf-8')\n            except:\n                http_body = ('<Could not decode body as utf-8. '\n                             'Please report to gym@openai.com>')\n\n        self._message = message\n        self.http_body = http_body\n        self.http_status = http_status\n        self.json_body = json_body\n        self.headers = headers or {}\n        self.request_id = self.headers.get('request-id', None)\n\n    def __unicode__(self):\n        if self.request_id is not None:\n            msg = self._message or \"<empty message>\"\n            return u\"Request {0}: {1}\".format(self.request_id, msg)\n        else:\n            return self._message\n\n    def __str__(self):\n        try:               \n            return unicode(self).encode('utf-8')\n        except NameError:  \n            return self.__unicode__()\n\n\nclass APIConnectionError(APIError):\n    pass\n\n\nclass InvalidRequestError(APIError):\n\n    def __init__(self, message, param, http_body=None,\n                 http_status=None, json_body=None, headers=None):\n        super(InvalidRequestError, self).__init__(\n            message, http_body, http_status, json_body,\n            headers)\n        self.param = param\n\n\nclass AuthenticationError(APIError):\n    pass\n\nclass RateLimitError(APIError):\n    pass\n\n\n\nclass VideoRecorderError(Error):\n    pass\n\nclass InvalidFrame(Error):\n    pass\n\n\n\nclass DoubleWrapperError(Error):\n    pass\n\n\nclass WrapAfterConfigureError(Error):\n    pass\n\n\nclass RetriesExceededError(Error):\n    pass\n", "comments": "   raised user requests item registry     actually exist              pass  class unregisteredenv(unregistered)         raised user requests env registry     actually exist              pass  class unregisteredbenchmark(unregistered)         raised user requests env registry     actually exist              pass  class deprecatedenv(error)         raised user requests env registry     older version number latest env name              pass  class unseedableenv(error)         raised user tries seed env support     seeding              pass  class dependencynotinstalled(error)      pass  class unsupportedmode(exception)         raised user requests rendering mode supported     environment              pass  class resetneeded(exception)         when monitor active  raised user tries step     environment already done              pass  class resetnotallowed(exception)         when monitor active  raised user tries step     environment yet done              pass  class invalidaction(exception)         raised user performs action contained within     action space            local errors    api errors    python 2    python 3    video errors    wrapper errors ", "content": "import sys\n\nclass Error(Exception):\n    pass\n\n# Local errors\n\nclass Unregistered(Error):\n    \"\"\"Raised when the user requests an item from the registry that does\n    not actually exist.\n    \"\"\"\n    pass\n\nclass UnregisteredEnv(Unregistered):\n    \"\"\"Raised when the user requests an env from the registry that does\n    not actually exist.\n    \"\"\"\n    pass\n\nclass UnregisteredBenchmark(Unregistered):\n    \"\"\"Raised when the user requests an env from the registry that does\n    not actually exist.\n    \"\"\"\n    pass\n\nclass DeprecatedEnv(Error):\n    \"\"\"Raised when the user requests an env from the registry with an\n    older version number than the latest env with the same name.\n    \"\"\"\n    pass\n\nclass UnseedableEnv(Error):\n    \"\"\"Raised when the user tries to seed an env that does not support\n    seeding.\n    \"\"\"\n    pass\n\nclass DependencyNotInstalled(Error):\n    pass\n\nclass UnsupportedMode(Exception):\n    \"\"\"Raised when the user requests a rendering mode not supported by the\n    environment.\n    \"\"\"\n    pass\n\nclass ResetNeeded(Exception):\n    \"\"\"When the monitor is active, raised when the user tries to step an\n    environment that's already done.\n    \"\"\"\n    pass\n\nclass ResetNotAllowed(Exception):\n    \"\"\"When the monitor is active, raised when the user tries to step an\n    environment that's not yet done.\n    \"\"\"\n    pass\n\nclass InvalidAction(Exception):\n    \"\"\"Raised when the user performs an action not contained within the\n    action space\n    \"\"\"\n    pass\n\n# API errors\n\nclass APIError(Error):\n    def __init__(self, message=None, http_body=None, http_status=None,\n                 json_body=None, headers=None):\n        super(APIError, self).__init__(message)\n\n        if http_body and hasattr(http_body, 'decode'):\n            try:\n                http_body = http_body.decode('utf-8')\n            except:\n                http_body = ('<Could not decode body as utf-8. '\n                             'Please report to gym@openai.com>')\n\n        self._message = message\n        self.http_body = http_body\n        self.http_status = http_status\n        self.json_body = json_body\n        self.headers = headers or {}\n        self.request_id = self.headers.get('request-id', None)\n\n    def __unicode__(self):\n        if self.request_id is not None:\n            msg = self._message or \"<empty message>\"\n            return u\"Request {0}: {1}\".format(self.request_id, msg)\n        else:\n            return self._message\n\n    def __str__(self):\n        try:               # Python 2\n            return unicode(self).encode('utf-8')\n        except NameError:  # Python 3\n            return self.__unicode__()\n\n\nclass APIConnectionError(APIError):\n    pass\n\n\nclass InvalidRequestError(APIError):\n\n    def __init__(self, message, param, http_body=None,\n                 http_status=None, json_body=None, headers=None):\n        super(InvalidRequestError, self).__init__(\n            message, http_body, http_status, json_body,\n            headers)\n        self.param = param\n\n\nclass AuthenticationError(APIError):\n    pass\n\nclass RateLimitError(APIError):\n    pass\n\n# Video errors\n\nclass VideoRecorderError(Error):\n    pass\n\nclass InvalidFrame(Error):\n    pass\n\n# Wrapper errors\n\nclass DoubleWrapperError(Error):\n    pass\n\n\nclass WrapAfterConfigureError(Error):\n    pass\n\n\nclass RetriesExceededError(Error):\n    pass\n", "description": "A toolkit for developing and comparing reinforcement learning algorithms.", "file_name": "error.py", "id": "dd1436bb711eaa25a23c53ae94e225a0", "language": "Python", "project_name": "gym", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/openai-gym/openai-gym-6160181/gym/error.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:30:35Z", "url": "https://github.com/openai/gym", "wiki": true}