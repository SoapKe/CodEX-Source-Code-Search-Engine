{"author": "audreyr", "code": "# -*- coding: utf-8 -*-\n\n\"\"\"\nMain entry point for the `cookiecutter` command.\n\nThe code in this module is also a good example of how to use Cookiecutter as a\nlibrary rather than a script.\n\"\"\"\n\nfrom __future__ import unicode_literals\nimport logging\nimport os\n\nfrom .config import get_user_config\nfrom .generate import generate_context, generate_files\nfrom .exceptions import InvalidModeException\nfrom .prompt import prompt_for_config\nfrom .replay import dump, load\nfrom .repository import determine_repo_dir\nfrom .utils import rmtree\n\nlogger = logging.getLogger(__name__)\n\n\ndef cookiecutter(\n        template, checkout=None, no_input=False, extra_context=None,\n        replay=False, overwrite_if_exists=False, output_dir='.',\n        config_file=None, default_config=False, password=None):\n    \"\"\"\n    Run Cookiecutter just as if using it from the command line.\n\n    :param template: A directory containing a project template directory,\n        or a URL to a git repository.\n    :param checkout: The branch, tag or commit ID to checkout after clone.\n    :param no_input: Prompt the user at command line for manual configuration?\n    :param extra_context: A dictionary of context that overrides default\n        and user configuration.\n    :param: overwrite_if_exists: Overwrite the contents of output directory\n        if it exists\n    :param output_dir: Where to output the generated project dir into.\n    :param config_file: User configuration file path.\n    :param default_config: Use default values rather than a config file.\n    :param password: The password to use when extracting the repository.\n    \"\"\"\n    if replay and ((no_input is not False) or (extra_context is not None)):\n        err_msg = (\n            \"You can not use both replay and no_input or extra_context \"\n            \"at the same time.\"\n        )\n        raise InvalidModeException(err_msg)\n\n    config_dict = get_user_config(\n        config_file=config_file,\n        default_config=default_config,\n    )\n\n    repo_dir, cleanup = determine_repo_dir(\n        template=template,\n        abbreviations=config_dict['abbreviations'],\n        clone_to_dir=config_dict['cookiecutters_dir'],\n        checkout=checkout,\n        no_input=no_input,\n        password=password\n    )\n\n    template_name = os.path.basename(os.path.abspath(repo_dir))\n\n    if replay:\n        context = load(config_dict['replay_dir'], template_name)\n    else:\n        context_file = os.path.join(repo_dir, 'cookiecutter.json')\n        logger.debug('context_file is {}'.format(context_file))\n\n        context = generate_context(\n            context_file=context_file,\n            default_context=config_dict['default_context'],\n            extra_context=extra_context,\n        )\n\n        \n        \n        context['cookiecutter'] = prompt_for_config(context, no_input)\n\n        \n        context['cookiecutter']['_template'] = template\n\n        dump(config_dict['replay_dir'], template_name, context)\n\n    \n    result = generate_files(\n        repo_dir=repo_dir,\n        context=context,\n        overwrite_if_exists=overwrite_if_exists,\n        output_dir=output_dir\n    )\n\n    # Cleanup (if required)\n    if cleanup:\n        rmtree(repo_dir)\n\n    return result\n", "comments": "    main entry point  cookiecutter  command   the code module also good example use cookiecutter library rather script         future   import unicode literals import logging import os   config import get user config  generate import generate context  generate files  exceptions import invalidmodeexception  prompt import prompt config  replay import dump  load  repository import determine repo dir  utils import rmtree  logger   logging getlogger(  name  )   def cookiecutter(         template  checkout none  input false  extra context none          replay false  overwrite exists false  output dir              config file none  default config false  password none)              run cookiecutter using command line        param template  a directory containing project template directory          url git repository       param checkout  the branch  tag commit id checkout clone       param input  prompt user command line manual configuration       param extra context  a dictionary context overrides default         user configuration       param  overwrite exists  overwrite contents output directory         exists      param output dir  where output generated project dir       param config file  user configuration file path       param default config  use default values rather config file       param password  the password use extracting repository                 coding  utf 8        prompt user manually configure command line     except  input  flag set    include template dir url context dict    create project local context project template     cleanup (if required) ", "content": "# -*- coding: utf-8 -*-\n\n\"\"\"\nMain entry point for the `cookiecutter` command.\n\nThe code in this module is also a good example of how to use Cookiecutter as a\nlibrary rather than a script.\n\"\"\"\n\nfrom __future__ import unicode_literals\nimport logging\nimport os\n\nfrom .config import get_user_config\nfrom .generate import generate_context, generate_files\nfrom .exceptions import InvalidModeException\nfrom .prompt import prompt_for_config\nfrom .replay import dump, load\nfrom .repository import determine_repo_dir\nfrom .utils import rmtree\n\nlogger = logging.getLogger(__name__)\n\n\ndef cookiecutter(\n        template, checkout=None, no_input=False, extra_context=None,\n        replay=False, overwrite_if_exists=False, output_dir='.',\n        config_file=None, default_config=False, password=None):\n    \"\"\"\n    Run Cookiecutter just as if using it from the command line.\n\n    :param template: A directory containing a project template directory,\n        or a URL to a git repository.\n    :param checkout: The branch, tag or commit ID to checkout after clone.\n    :param no_input: Prompt the user at command line for manual configuration?\n    :param extra_context: A dictionary of context that overrides default\n        and user configuration.\n    :param: overwrite_if_exists: Overwrite the contents of output directory\n        if it exists\n    :param output_dir: Where to output the generated project dir into.\n    :param config_file: User configuration file path.\n    :param default_config: Use default values rather than a config file.\n    :param password: The password to use when extracting the repository.\n    \"\"\"\n    if replay and ((no_input is not False) or (extra_context is not None)):\n        err_msg = (\n            \"You can not use both replay and no_input or extra_context \"\n            \"at the same time.\"\n        )\n        raise InvalidModeException(err_msg)\n\n    config_dict = get_user_config(\n        config_file=config_file,\n        default_config=default_config,\n    )\n\n    repo_dir, cleanup = determine_repo_dir(\n        template=template,\n        abbreviations=config_dict['abbreviations'],\n        clone_to_dir=config_dict['cookiecutters_dir'],\n        checkout=checkout,\n        no_input=no_input,\n        password=password\n    )\n\n    template_name = os.path.basename(os.path.abspath(repo_dir))\n\n    if replay:\n        context = load(config_dict['replay_dir'], template_name)\n    else:\n        context_file = os.path.join(repo_dir, 'cookiecutter.json')\n        logger.debug('context_file is {}'.format(context_file))\n\n        context = generate_context(\n            context_file=context_file,\n            default_context=config_dict['default_context'],\n            extra_context=extra_context,\n        )\n\n        # prompt the user to manually configure at the command line.\n        # except when 'no-input' flag is set\n        context['cookiecutter'] = prompt_for_config(context, no_input)\n\n        # include template dir or url in the context dict\n        context['cookiecutter']['_template'] = template\n\n        dump(config_dict['replay_dir'], template_name, context)\n\n    # Create project from local context and project template.\n    result = generate_files(\n        repo_dir=repo_dir,\n        context=context,\n        overwrite_if_exists=overwrite_if_exists,\n        output_dir=output_dir\n    )\n\n    # Cleanup (if required)\n    if cleanup:\n        rmtree(repo_dir)\n\n    return result\n", "description": "A command-line utility that creates projects from cookiecutters (project templates). E.g. Python package projects, jQuery plugin projects.", "file_name": "main.py", "id": "572ba109726524288a0c5ccfa482c28f", "language": "Python", "project_name": "cookiecutter", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/audreyr-cookiecutter/audreyr-cookiecutter-7154cf2/cookiecutter/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:52:22Z", "url": "https://github.com/audreyr/cookiecutter", "wiki": true}