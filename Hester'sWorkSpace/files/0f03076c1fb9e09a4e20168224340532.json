{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    find_xpath_attr,\n    int_or_none,\n    js_to_json,\n    unescapeHTML,\n    determine_ext,\n)\n\n\nclass HowStuffWorksIE(InfoExtractor):\n    _VALID_URL = r'https?://[\\da-z-]+\\.(?:howstuffworks|stuff(?:(?:youshould|theydontwantyouto)know|toblowyourmind|momnevertoldyou)|(?:brain|car)stuffshow|fwthinking|geniusstuff)\\.com/(?:[^/]+/)*(?:\\d+-)?(?P<id>.+?)-video\\.htm'\n    _TESTS = [\n        {\n            'url': 'http://www.stufftoblowyourmind.com/videos/optical-illusions-video.htm',\n            'md5': '76646a5acc0c92bf7cd66751ca5db94d',\n            'info_dict': {\n                'id': '855410',\n                'ext': 'mp4',\n                'title': 'Your Trickster Brain: Optical Illusions -- Science on the Web',\n                'description': 'md5:e374ff9561f6833ad076a8cc0a5ab2fb',\n            },\n        },\n        {\n            'url': 'http://shows.howstuffworks.com/more-shows/why-does-balloon-stick-to-hair-video.htm',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        clip_js = self._search_regex(\n            r'(?s)var clip = ({.*?});', webpage, 'clip info')\n        clip_info = self._parse_json(\n            clip_js, display_id, transform_source=js_to_json)\n\n        video_id = clip_info['content_id']\n        formats = []\n        m3u8_url = clip_info.get('m3u8')\n        if m3u8_url and determine_ext(m3u8_url) == 'm3u8':\n            formats.extend(self._extract_m3u8_formats(m3u8_url, video_id, 'mp4', format_id='hls', fatal=True))\n        flv_url = clip_info.get('flv_url')\n        if flv_url:\n            formats.append({\n                'url': flv_url,\n                'format_id': 'flv',\n            })\n        for video in clip_info.get('mp4', []):\n            formats.append({\n                'url': video['src'],\n                'format_id': 'mp4-%s' % video['bitrate'],\n                'vbr': int_or_none(video['bitrate'].rstrip('k')),\n            })\n\n        if not formats:\n            smil = self._download_xml(\n                'http://services.media.howstuffworks.com/videos/%s/smil-service.smil' % video_id,\n                video_id, 'Downloading video SMIL')\n\n            http_base = find_xpath_attr(\n                smil,\n                './{0}head/{0}meta'.format('{http://www.w3.org/2001/SMIL20/Language}'),\n                'name',\n                'httpBase').get('content')\n\n            URL_SUFFIX = '?v=2.11.3&fp=LNX 11,2,202,356&r=A&g=A'\n\n            for video in smil.findall(\n                    './{0}body/{0}switch/{0}video'.format('{http://www.w3.org/2001/SMIL20/Language}')):\n                vbr = int_or_none(video.attrib['system-bitrate'], scale=1000)\n                formats.append({\n                    'url': '%s/%s%s' % (http_base, video.attrib['src'], URL_SUFFIX),\n                    'format_id': '%dk' % vbr,\n                    'vbr': vbr,\n                })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': '%s' % video_id,\n            'display_id': display_id,\n            'title': unescapeHTML(clip_info['clip_title']),\n            'description': unescapeHTML(clip_info.get('caption')),\n            'thumbnail': clip_info.get('video_still_url'),\n            'duration': int_or_none(clip_info.get('duration')),\n            'formats': formats,\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    find_xpath_attr,\n    int_or_none,\n    js_to_json,\n    unescapeHTML,\n    determine_ext,\n)\n\n\nclass HowStuffWorksIE(InfoExtractor):\n    _VALID_URL = r'https?://[\\da-z-]+\\.(?:howstuffworks|stuff(?:(?:youshould|theydontwantyouto)know|toblowyourmind|momnevertoldyou)|(?:brain|car)stuffshow|fwthinking|geniusstuff)\\.com/(?:[^/]+/)*(?:\\d+-)?(?P<id>.+?)-video\\.htm'\n    _TESTS = [\n        {\n            'url': 'http://www.stufftoblowyourmind.com/videos/optical-illusions-video.htm',\n            'md5': '76646a5acc0c92bf7cd66751ca5db94d',\n            'info_dict': {\n                'id': '855410',\n                'ext': 'mp4',\n                'title': 'Your Trickster Brain: Optical Illusions -- Science on the Web',\n                'description': 'md5:e374ff9561f6833ad076a8cc0a5ab2fb',\n            },\n        },\n        {\n            'url': 'http://shows.howstuffworks.com/more-shows/why-does-balloon-stick-to-hair-video.htm',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        clip_js = self._search_regex(\n            r'(?s)var clip = ({.*?});', webpage, 'clip info')\n        clip_info = self._parse_json(\n            clip_js, display_id, transform_source=js_to_json)\n\n        video_id = clip_info['content_id']\n        formats = []\n        m3u8_url = clip_info.get('m3u8')\n        if m3u8_url and determine_ext(m3u8_url) == 'm3u8':\n            formats.extend(self._extract_m3u8_formats(m3u8_url, video_id, 'mp4', format_id='hls', fatal=True))\n        flv_url = clip_info.get('flv_url')\n        if flv_url:\n            formats.append({\n                'url': flv_url,\n                'format_id': 'flv',\n            })\n        for video in clip_info.get('mp4', []):\n            formats.append({\n                'url': video['src'],\n                'format_id': 'mp4-%s' % video['bitrate'],\n                'vbr': int_or_none(video['bitrate'].rstrip('k')),\n            })\n\n        if not formats:\n            smil = self._download_xml(\n                'http://services.media.howstuffworks.com/videos/%s/smil-service.smil' % video_id,\n                video_id, 'Downloading video SMIL')\n\n            http_base = find_xpath_attr(\n                smil,\n                './{0}head/{0}meta'.format('{http://www.w3.org/2001/SMIL20/Language}'),\n                'name',\n                'httpBase').get('content')\n\n            URL_SUFFIX = '?v=2.11.3&fp=LNX 11,2,202,356&r=A&g=A'\n\n            for video in smil.findall(\n                    './{0}body/{0}switch/{0}video'.format('{http://www.w3.org/2001/SMIL20/Language}')):\n                vbr = int_or_none(video.attrib['system-bitrate'], scale=1000)\n                formats.append({\n                    'url': '%s/%s%s' % (http_base, video.attrib['src'], URL_SUFFIX),\n                    'format_id': '%dk' % vbr,\n                    'vbr': vbr,\n                })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': '%s' % video_id,\n            'display_id': display_id,\n            'title': unescapeHTML(clip_info['clip_title']),\n            'description': unescapeHTML(clip_info.get('caption')),\n            'thumbnail': clip_info.get('video_still_url'),\n            'duration': int_or_none(clip_info.get('duration')),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "howstuffworks.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/howstuffworks.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}