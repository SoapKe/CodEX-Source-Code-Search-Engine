{"author": "pypa", "code": "import os\nimport sys\nfrom appdirs import user_cache_dir\n\n\n\nos.environ.pop('__PYVENV_LAUNCHER__', None)\n\n\n\nPIPENV_SHELL_FANCY = bool(os.environ.get('PIPENV_SHELL_FANCY'))\n\n\nPIPENV_PYTHON = os.environ.get('PIPENV_PYTHON')\n\n\nPIPENV_VENV_IN_PROJECT = bool(os.environ.get('PIPENV_VENV_IN_PROJECT')) or os.path.isdir('.venv')\n\n\nPIPENV_TEST_INDEX = os.environ.get('PIPENV_TEST_INDEX')\n\n\nPIPENV_COLORBLIND = bool(os.environ.get('PIPENV_COLORBLIND'))\n\n# Disable spinner for better test and deploy logs (for the unworthy).\nPIPENV_NOSPIN = bool(os.environ.get('PIPENV_NOSPIN'))\n\n\nPIPENV_MAX_ROUNDS = int(os.environ.get('PIPENV_MAX_ROUNDS', '16'))\n\n\nPIPENV_PIPFILE = os.environ.get('PIPENV_PIPFILE')\n\n\nPIPENV_DEFAULT_PYTHON_VERSION = os.environ.get('PIPENV_DEFAULT_PYTHON_VERSION')\n\n\nPIPENV_DONT_LOAD_ENV = bool(os.environ.get('PIPENV_DONT_LOAD_ENV'))\n\n\nPIPENV_YES = bool(os.environ.get('PIPENV_YES'))\n\n\nPIPENV_MAX_SUBPROCESS = int(os.environ.get('PIPENV_MAX_SUBPROCESS', '16'))\n\n\n# Note: +1 because of a temporary bug in Pipenv.\nPIPENV_MAX_DEPTH = int(os.environ.get('PIPENV_MAX_DEPTH', '3')) + 1\n\n# Tell Pipenv not to inherit parent directories (for development, mostly).\nPIPENV_NO_INHERIT = 'PIPENV_NO_INHERIT' in os.environ\n\nif PIPENV_NO_INHERIT:\n    PIPENV_MAX_DEPTH = 2\n\n\nPIPENV_VIRTUALENV = None\nPIPENV_USE_SYSTEM = False\nif 'PIPENV_ACTIVE' not in os.environ:\n    if 'PIPENV_IGNORE_VIRTUALENVS' not in os.environ:\n        PIPENV_VIRTUALENV = os.environ.get('VIRTUAL_ENV')\n        PIPENV_USE_SYSTEM = bool(os.environ.get('VIRTUAL_ENV'))\n\n\nPIPENV_USE_HASHES = True\n\n# Tells Pipenv to skip case-checking (slow internet connections).\nPIPENV_SKIP_VALIDATION = True\n\n\nPIPENV_DOTENV_LOCATION = os.environ.get('PIPENV_DOTENV_LOCATION')\n\n\nif PIPENV_VENV_IN_PROJECT:\n    PIPENV_SHELL_COMPAT = True\n\n\nif os.name == 'nt':\n    PIPENV_NOSPIN = True\n\n# Disable the spinner on Travis-Ci (and friends).\nif 'CI' in os.environ:\n    PIPENV_NOSPIN = True\n\nPIPENV_HIDE_EMOJIS = bool(os.environ.get('PIPENV_HIDE_EMOJIS'))\nif os.name == 'nt':\n    PIPENV_HIDE_EMOJIS = True\n\n\nPIPENV_TIMEOUT = int(os.environ.get('PIPENV_TIMEOUT', 120))\n\nPIPENV_INSTALL_TIMEOUT = 60 * 15\n\nPIPENV_DONT_USE_PYENV = os.environ.get('PIPENV_DONT_USE_PYENV')\n\nPYENV_ROOT = os.environ.get('PYENV_ROOT', os.path.expanduser('~/.pyenv'))\n\nPYENV_INSTALLED = (bool(os.environ.get('PYENV_SHELL')) or bool(os.environ.get('PYENV_ROOT')))\n\nSESSION_IS_INTERACTIVE = bool(os.isatty(sys.stdout.fileno()))\n\nPIPENV_SHELL = os.environ.get('SHELL') or os.environ.get('PYENV_SHELL')\n\nPIPENV_CACHE_DIR = os.environ.get('PIPENV_CACHE_DIR', user_cache_dir('pipenv'))\n", "comments": "  prevent invalid shebangs homebrew installed python     https   bugs python org issue22490    shell compatibility mode  mis configured shells     support python 2 python 3 time     create virtualenv project  instead pew     overwrite index funcitonality     no color mode  unfun people     disable spinner better test deploy logs (for unworthy)     tells pipenv many rounds resolving pip tools     specify custom pipfile location     tells pipenv python default  none provided     tells pipenv load  env files     tell pipenv default yes prompts     tells pipenv many subprocesses use installing     user configurable max depth pipfile searching     note   1 temporary bug pipenv     tell pipenv inherit parent directories (for development  mostly)     tells pipenv use virtualenv provided pip instead     tells pipenv use hashing mode     tells pipenv skip case checking (slow internet connections)     tells pipenv load  env     use shell compatibility mode using venv project mode     disable spinner windows     disable spinner travis ci (and friends)     tells pipenv long wait virtualenvs created seconds  ", "content": "import os\nimport sys\nfrom appdirs import user_cache_dir\n\n# Prevent invalid shebangs with Homebrew-installed Python:\n# https://bugs.python.org/issue22490\nos.environ.pop('__PYVENV_LAUNCHER__', None)\n\n\n# Shell compatibility mode, for mis-configured shells.\nPIPENV_SHELL_FANCY = bool(os.environ.get('PIPENV_SHELL_FANCY'))\n\n# Support for both Python 2 and Python 3 at the same time.\nPIPENV_PYTHON = os.environ.get('PIPENV_PYTHON')\n\n# Create the virtualenv in the project, instead of with pew.\nPIPENV_VENV_IN_PROJECT = bool(os.environ.get('PIPENV_VENV_IN_PROJECT')) or os.path.isdir('.venv')\n\n# Overwrite all index funcitonality.\nPIPENV_TEST_INDEX = os.environ.get('PIPENV_TEST_INDEX')\n\n# No color mode, for unfun people.\nPIPENV_COLORBLIND = bool(os.environ.get('PIPENV_COLORBLIND'))\n\n# Disable spinner for better test and deploy logs (for the unworthy).\nPIPENV_NOSPIN = bool(os.environ.get('PIPENV_NOSPIN'))\n\n# Tells Pipenv how many rounds of resolving to do for Pip-Tools.\nPIPENV_MAX_ROUNDS = int(os.environ.get('PIPENV_MAX_ROUNDS', '16'))\n\n# Specify a custom Pipfile location.\nPIPENV_PIPFILE = os.environ.get('PIPENV_PIPFILE')\n\n# Tells Pipenv which Python to default to, when none is provided.\nPIPENV_DEFAULT_PYTHON_VERSION = os.environ.get('PIPENV_DEFAULT_PYTHON_VERSION')\n\n# Tells Pipenv to not load .env files.\nPIPENV_DONT_LOAD_ENV = bool(os.environ.get('PIPENV_DONT_LOAD_ENV'))\n\n# Tell Pipenv to default to yes at all prompts.\nPIPENV_YES = bool(os.environ.get('PIPENV_YES'))\n\n# Tells Pipenv how many subprocesses to use when installing.\nPIPENV_MAX_SUBPROCESS = int(os.environ.get('PIPENV_MAX_SUBPROCESS', '16'))\n\n# User-configurable max-depth for Pipfile searching.\n# Note: +1 because of a temporary bug in Pipenv.\nPIPENV_MAX_DEPTH = int(os.environ.get('PIPENV_MAX_DEPTH', '3')) + 1\n\n# Tell Pipenv not to inherit parent directories (for development, mostly).\nPIPENV_NO_INHERIT = 'PIPENV_NO_INHERIT' in os.environ\n\nif PIPENV_NO_INHERIT:\n    PIPENV_MAX_DEPTH = 2\n\n# Tells Pipenv to use the virtualenv-provided pip instead.\nPIPENV_VIRTUALENV = None\nPIPENV_USE_SYSTEM = False\nif 'PIPENV_ACTIVE' not in os.environ:\n    if 'PIPENV_IGNORE_VIRTUALENVS' not in os.environ:\n        PIPENV_VIRTUALENV = os.environ.get('VIRTUAL_ENV')\n        PIPENV_USE_SYSTEM = bool(os.environ.get('VIRTUAL_ENV'))\n\n# Tells Pipenv to use hashing mode.\nPIPENV_USE_HASHES = True\n\n# Tells Pipenv to skip case-checking (slow internet connections).\nPIPENV_SKIP_VALIDATION = True\n\n# Tells Pipenv where to load .env from.\nPIPENV_DOTENV_LOCATION = os.environ.get('PIPENV_DOTENV_LOCATION')\n\n# Use shell compatibility mode when using venv in project mode.\nif PIPENV_VENV_IN_PROJECT:\n    PIPENV_SHELL_COMPAT = True\n\n# Disable spinner on Windows.\nif os.name == 'nt':\n    PIPENV_NOSPIN = True\n\n# Disable the spinner on Travis-Ci (and friends).\nif 'CI' in os.environ:\n    PIPENV_NOSPIN = True\n\nPIPENV_HIDE_EMOJIS = bool(os.environ.get('PIPENV_HIDE_EMOJIS'))\nif os.name == 'nt':\n    PIPENV_HIDE_EMOJIS = True\n\n# Tells Pipenv how long to wait for virtualenvs to be created in seconds.\nPIPENV_TIMEOUT = int(os.environ.get('PIPENV_TIMEOUT', 120))\n\nPIPENV_INSTALL_TIMEOUT = 60 * 15\n\nPIPENV_DONT_USE_PYENV = os.environ.get('PIPENV_DONT_USE_PYENV')\n\nPYENV_ROOT = os.environ.get('PYENV_ROOT', os.path.expanduser('~/.pyenv'))\n\nPYENV_INSTALLED = (bool(os.environ.get('PYENV_SHELL')) or bool(os.environ.get('PYENV_ROOT')))\n\nSESSION_IS_INTERACTIVE = bool(os.isatty(sys.stdout.fileno()))\n\nPIPENV_SHELL = os.environ.get('SHELL') or os.environ.get('PYENV_SHELL')\n\nPIPENV_CACHE_DIR = os.environ.get('PIPENV_CACHE_DIR', user_cache_dir('pipenv'))\n", "description": " Python Development Workflow for Humans.", "file_name": "environments.py", "id": "c647078ad36bf4a1f499b72de3670380", "language": "Python", "project_name": "pipenv", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/pypa-pipenv/pypa-pipenv-9a87a9a/pipenv/environments.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:53:13Z", "url": "https://github.com/pypa/pipenv", "wiki": true}