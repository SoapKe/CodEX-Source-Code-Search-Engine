{"author": "keon", "code": "def is_palindrome(head):\n    if not head:\n        return True\n    \n    fast, slow = head.next, head\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n    second = slow.next\n    slow.next = None \n    \n    node = None\n    while second:\n        nxt = second.next\n        second.next = node\n        node = second\n        second = nxt\n    \n    \n    while node:\n        if node.val != head.val:\n            return False\n        node = node.next\n        head = head.next\n    return True\n\ndef is_palindrome_stack(head):\n    if not head or not head.next:\n        return True\n\n    # 1. Get the midpoint (slow)\n    slow = fast = cur = head\n    while fast and fast.next:\n        fast, slow = fast.next.next, slow.next\n\n    \n    stack = [slow.val]\n    while slow.next:\n        slow = slow.next\n        stack.append(slow.val)\n\n    \n    while stack:\n        if stack.pop() != cur.val:\n            return False\n        cur = cur.next\n\n    return True\n", "comments": "  split list two parts    don forget  but forget still works     reverse second part    compare two parts    second part one less node    1  get midpoint (slow)    2  push second half stack    3  comparison ", "content": "def is_palindrome(head):\n    if not head:\n        return True\n    # split the list to two parts\n    fast, slow = head.next, head\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n    second = slow.next\n    slow.next = None # Don't forget here! But forget still works!\n    # reverse the second part\n    node = None\n    while second:\n        nxt = second.next\n        second.next = node\n        node = second\n        second = nxt\n    # compare two parts\n    # second part has the same or one less node\n    while node:\n        if node.val != head.val:\n            return False\n        node = node.next\n        head = head.next\n    return True\n\ndef is_palindrome_stack(head):\n    if not head or not head.next:\n        return True\n\n    # 1. Get the midpoint (slow)\n    slow = fast = cur = head\n    while fast and fast.next:\n        fast, slow = fast.next.next, slow.next\n\n    # 2. Push the second half into the stack\n    stack = [slow.val]\n    while slow.next:\n        slow = slow.next\n        stack.append(slow.val)\n\n    # 3. Comparison\n    while stack:\n        if stack.pop() != cur.val:\n            return False\n        cur = cur.next\n\n    return True\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "is_palindrome.py", "id": "972e7532521a60c784d62f3fea9a6db6", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/keon-algorithms/keon-algorithms-abe4cb1/linkedlist/is_palindrome.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:56:36Z", "url": "https://github.com/keon/algorithms", "wiki": true}