{"author": "tgalal", "code": "from yowsup.common import YowConstants\nfrom yowsup.layers.protocol_iq.protocolentities import IqProtocolEntity\nfrom yowsup.structs import ProtocolTreeNode\nimport hashlib\nimport base64\nimport os\nfrom yowsup.common.tools import WATools\nclass RequestUploadIqProtocolEntity(IqProtocolEntity):\n    '''\n    <iq to=\"s.whatsapp.net\" type=\"set\" xmlns=\"w:m\">\n        <media hash=\"{{b64_hash}}\" type=\"{{type}}\" size=\"{{size_bytes}}\" orighash={{b64_orighash?}}></media>\n    </iq>\n    '''\n\n    MEDIA_TYPE_IMAGE = \"image\"\n    MEDIA_TYPE_VIDEO = \"video\"\n    MEDIA_TYPE_AUDIO = \"audio\"\n    XMLNS = \"w:m\"\n\n    TYPES_MEDIA = (MEDIA_TYPE_AUDIO, MEDIA_TYPE_IMAGE, MEDIA_TYPE_VIDEO)\n\n    def __init__(self, mediaType, b64Hash = None, size = None, origHash = None, filePath = None ):\n        super(RequestUploadIqProtocolEntity, self).__init__(\"w:m\", _type = \"set\", to = YowConstants.WHATSAPP_SERVER)\n\n        assert (b64Hash and size) or filePath, \"Either specify hash and size, or specify filepath and let me generate the rest\"\n\n        if filePath:\n            assert os.path.exists(filePath), \"Either specified path does not exist, or yowsup doesn't have permission to read: %s\" % filePath\n            b64Hash = self.__class__.getFileHashForUpload(filePath)\n\n            size = os.path.getsize(filePath)\n\n\n        self.setRequestArguments(mediaType, b64Hash, size, origHash)\n\n    def setRequestArguments(self, mediaType, b64Hash, size, origHash = None):\n        assert mediaType in self.__class__.TYPES_MEDIA, \"Expected media type to be in %s, got %s\" % (self.__class__.TYPES_MEDIA, mediaType)\n        self.mediaType = mediaType\n        self.b64Hash = b64Hash\n        self.size = int(size)\n        self.origHash = origHash\n\n    @staticmethod\n    def getFileHashForUpload(filePath):\n        return WATools.getFileHashForUpload(filePath)\n\n    def __str__(self):\n        out = super(RequestUploadIqProtocolEntity, self).__str__()\n        out += \"Media Type: %s\\n\" % self.mediaType\n        out += \"B64Hash: %s\\n\" % self.b64Hash\n        out += \"Size: %s\\n\" % self.size\n        if self.origHash:\n            out += \"OrigHash: %s\\n\" % self.origHash\n        return out\n\n    def toProtocolTreeNode(self):\n        node = super(RequestUploadIqProtocolEntity, self).toProtocolTreeNode()\n        attribs = {\n            \"hash\": self.b64Hash,\n            \"type\": self.mediaType,\n            \"size\": str(self.size)\n        }\n        if self.origHash:\n            attribs[\"orighash\"] = self.origHash\n        mediaNode = ProtocolTreeNode(\"media\", attribs)\n        node.addChild(mediaNode)\n        return node\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        assert node.getAttributeValue(\"type\") == \"set\", \"Expected set as iq type in request upload, got %s\" % node.getAttributeValue(\"type\")\n        entity = IqProtocolEntity.fromProtocolTreeNode(node)\n        entity.__class__ = RequestUploadIqProtocolEntity\n        mediaNode = node.getChild(\"media\")\n        entity.setRequestArguments(\n            mediaNode.getAttributeValue(\"type\"),\n            mediaNode.getAttributeValue(\"hash\"),\n            mediaNode.getAttributeValue(\"size\"),\n            mediaNode.getAttributeValue(\"orighash\")\n        )\n        return entity\n", "comments": "         iq  whatsapp net  type  set  xmlns  w            media hash    b64 hash    type    type    size    size bytes    orighash   b64 orighash      media        iq          ", "content": "from yowsup.common import YowConstants\nfrom yowsup.layers.protocol_iq.protocolentities import IqProtocolEntity\nfrom yowsup.structs import ProtocolTreeNode\nimport hashlib\nimport base64\nimport os\nfrom yowsup.common.tools import WATools\nclass RequestUploadIqProtocolEntity(IqProtocolEntity):\n    '''\n    <iq to=\"s.whatsapp.net\" type=\"set\" xmlns=\"w:m\">\n        <media hash=\"{{b64_hash}}\" type=\"{{type}}\" size=\"{{size_bytes}}\" orighash={{b64_orighash?}}></media>\n    </iq>\n    '''\n\n    MEDIA_TYPE_IMAGE = \"image\"\n    MEDIA_TYPE_VIDEO = \"video\"\n    MEDIA_TYPE_AUDIO = \"audio\"\n    XMLNS = \"w:m\"\n\n    TYPES_MEDIA = (MEDIA_TYPE_AUDIO, MEDIA_TYPE_IMAGE, MEDIA_TYPE_VIDEO)\n\n    def __init__(self, mediaType, b64Hash = None, size = None, origHash = None, filePath = None ):\n        super(RequestUploadIqProtocolEntity, self).__init__(\"w:m\", _type = \"set\", to = YowConstants.WHATSAPP_SERVER)\n\n        assert (b64Hash and size) or filePath, \"Either specify hash and size, or specify filepath and let me generate the rest\"\n\n        if filePath:\n            assert os.path.exists(filePath), \"Either specified path does not exist, or yowsup doesn't have permission to read: %s\" % filePath\n            b64Hash = self.__class__.getFileHashForUpload(filePath)\n\n            size = os.path.getsize(filePath)\n\n\n        self.setRequestArguments(mediaType, b64Hash, size, origHash)\n\n    def setRequestArguments(self, mediaType, b64Hash, size, origHash = None):\n        assert mediaType in self.__class__.TYPES_MEDIA, \"Expected media type to be in %s, got %s\" % (self.__class__.TYPES_MEDIA, mediaType)\n        self.mediaType = mediaType\n        self.b64Hash = b64Hash\n        self.size = int(size)\n        self.origHash = origHash\n\n    @staticmethod\n    def getFileHashForUpload(filePath):\n        return WATools.getFileHashForUpload(filePath)\n\n    def __str__(self):\n        out = super(RequestUploadIqProtocolEntity, self).__str__()\n        out += \"Media Type: %s\\n\" % self.mediaType\n        out += \"B64Hash: %s\\n\" % self.b64Hash\n        out += \"Size: %s\\n\" % self.size\n        if self.origHash:\n            out += \"OrigHash: %s\\n\" % self.origHash\n        return out\n\n    def toProtocolTreeNode(self):\n        node = super(RequestUploadIqProtocolEntity, self).toProtocolTreeNode()\n        attribs = {\n            \"hash\": self.b64Hash,\n            \"type\": self.mediaType,\n            \"size\": str(self.size)\n        }\n        if self.origHash:\n            attribs[\"orighash\"] = self.origHash\n        mediaNode = ProtocolTreeNode(\"media\", attribs)\n        node.addChild(mediaNode)\n        return node\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        assert node.getAttributeValue(\"type\") == \"set\", \"Expected set as iq type in request upload, got %s\" % node.getAttributeValue(\"type\")\n        entity = IqProtocolEntity.fromProtocolTreeNode(node)\n        entity.__class__ = RequestUploadIqProtocolEntity\n        mediaNode = node.getChild(\"media\")\n        entity.setRequestArguments(\n            mediaNode.getAttributeValue(\"type\"),\n            mediaNode.getAttributeValue(\"hash\"),\n            mediaNode.getAttributeValue(\"size\"),\n            mediaNode.getAttributeValue(\"orighash\")\n        )\n        return entity\n", "description": "The python WhatsApp library", "file_name": "iq_requestupload.py", "id": "102836b8eac080edec55002d698bf32b", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_media/protocolentities/iq_requestupload.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}