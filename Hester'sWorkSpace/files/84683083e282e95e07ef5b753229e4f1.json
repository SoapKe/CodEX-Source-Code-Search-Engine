{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    xpath_attr,\n    xpath_text,\n    xpath_element,\n    unescapeHTML,\n    unified_timestamp,\n)\n\n\nclass SpringboardPlatformIE(InfoExtractor):\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'http://cms.springboardplatform.com/previews/159/video/981017/0/0/1',\n        'md5': '5c3cb7b5c55740d482561099e920f192',\n        'info_dict': {\n            'id': '981017',\n            'ext': 'mp4',\n            'title': 'Redman \"BUD like YOU\" \"Usher Good Kisser\" REMIX',\n            'description': 'Redman \"BUD like YOU\" \"Usher Good Kisser\" REMIX',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'timestamp': 1409132328,\n            'upload_date': '20140827',\n            'duration': 193,\n        },\n    }, {\n        'url': 'http://cms.springboardplatform.com/embed_iframe/159/video/981017/rab007/rapbasement.com/1/1',\n        'only_matching': True,\n    }, {\n        'url': 'http://cms.springboardplatform.com/embed_iframe/20/video/1731611/ki055/kidzworld.com/10',\n        'only_matching': True,\n    }, {\n        'url': 'http://cms.springboardplatform.com/xml_feeds_advanced/index/159/rss3/981017/0/0/1/',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [\n            mobj.group('url')\n            for mobj in re.finditer(\n                r'<iframe\\b[^>]+\\bsrc=([\"\\'])(?P<url>(?:https?:)?//cms\\.springboardplatform\\.com/embed_iframe/\\d+/video/\\d+.*?)\\1',\n                webpage)]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id') or mobj.group('id_2')\n        index = mobj.group('index') or mobj.group('index_2')\n\n        video = self._download_xml(\n            'http://cms.springboardplatform.com/xml_feeds_advanced/index/%s/rss3/%s'\n            % (index, video_id), video_id)\n\n        item = xpath_element(video, './/item', 'item', fatal=True)\n\n        content = xpath_element(\n            item, './{http://search.yahoo.com/mrss/}content', 'content',\n            fatal=True)\n        title = unescapeHTML(xpath_text(item, './title', 'title', fatal=True))\n\n        video_url = content.attrib['url']\n\n        if 'error_video.mp4' in video_url:\n            raise ExtractorError(\n                'Video %s no longer exists' % video_id, expected=True)\n\n        duration = int_or_none(content.get('duration'))\n        tbr = int_or_none(content.get('bitrate'))\n        filesize = int_or_none(content.get('fileSize'))\n        width = int_or_none(content.get('width'))\n        height = int_or_none(content.get('height'))\n\n        description = unescapeHTML(xpath_text(\n            item, './description', 'description'))\n        thumbnail = xpath_attr(\n            item, './{http://search.yahoo.com/mrss/}thumbnail', 'url',\n            'thumbnail')\n\n        timestamp = unified_timestamp(xpath_text(\n            item, './{http://cms.springboardplatform.com/namespaces.html}created',\n            'timestamp'))\n\n        formats = [{\n            'url': video_url,\n            'format_id': 'http',\n            'tbr': tbr,\n            'filesize': filesize,\n            'width': width,\n            'height': height,\n        }]\n\n        m3u8_format = formats[0].copy()\n        m3u8_format.update({\n            'url': re.sub(r'(https?://)cdn\\.', r'\\1hls.', video_url) + '.m3u8',\n            'ext': 'mp4',\n            'format_id': 'hls',\n            'protocol': 'm3u8_native',\n        })\n        formats.append(m3u8_format)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'duration': duration,\n            'formats': formats,\n        }\n", "comments": "(?x)\n                    https?://\n                        cms\\.springboardplatform\\.com/\n                        (?:\n                            (?:previews|embed_iframe)/(?P<index>\\d+)/video/(?P<id>\\d+)|\n                            xml_feeds_advanced/index/(?P<index_2>\\d+)/rss3/(?P<id_2>\\d+)\n                        )\n                    \n \n# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    xpath_attr,\n    xpath_text,\n    xpath_element,\n    unescapeHTML,\n    unified_timestamp,\n)\n\n\nclass SpringboardPlatformIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        cms\\.springboardplatform\\.com/\n                        (?:\n                            (?:previews|embed_iframe)/(?P<index>\\d+)/video/(?P<id>\\d+)|\n                            xml_feeds_advanced/index/(?P<index_2>\\d+)/rss3/(?P<id_2>\\d+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'http://cms.springboardplatform.com/previews/159/video/981017/0/0/1',\n        'md5': '5c3cb7b5c55740d482561099e920f192',\n        'info_dict': {\n            'id': '981017',\n            'ext': 'mp4',\n            'title': 'Redman \"BUD like YOU\" \"Usher Good Kisser\" REMIX',\n            'description': 'Redman \"BUD like YOU\" \"Usher Good Kisser\" REMIX',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'timestamp': 1409132328,\n            'upload_date': '20140827',\n            'duration': 193,\n        },\n    }, {\n        'url': 'http://cms.springboardplatform.com/embed_iframe/159/video/981017/rab007/rapbasement.com/1/1',\n        'only_matching': True,\n    }, {\n        'url': 'http://cms.springboardplatform.com/embed_iframe/20/video/1731611/ki055/kidzworld.com/10',\n        'only_matching': True,\n    }, {\n        'url': 'http://cms.springboardplatform.com/xml_feeds_advanced/index/159/rss3/981017/0/0/1/',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [\n            mobj.group('url')\n            for mobj in re.finditer(\n                r'<iframe\\b[^>]+\\bsrc=([\"\\'])(?P<url>(?:https?:)?//cms\\.springboardplatform\\.com/embed_iframe/\\d+/video/\\d+.*?)\\1',\n                webpage)]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id') or mobj.group('id_2')\n        index = mobj.group('index') or mobj.group('index_2')\n\n        video = self._download_xml(\n            'http://cms.springboardplatform.com/xml_feeds_advanced/index/%s/rss3/%s'\n            % (index, video_id), video_id)\n\n        item = xpath_element(video, './/item', 'item', fatal=True)\n\n        content = xpath_element(\n            item, './{http://search.yahoo.com/mrss/}content', 'content',\n            fatal=True)\n        title = unescapeHTML(xpath_text(item, './title', 'title', fatal=True))\n\n        video_url = content.attrib['url']\n\n        if 'error_video.mp4' in video_url:\n            raise ExtractorError(\n                'Video %s no longer exists' % video_id, expected=True)\n\n        duration = int_or_none(content.get('duration'))\n        tbr = int_or_none(content.get('bitrate'))\n        filesize = int_or_none(content.get('fileSize'))\n        width = int_or_none(content.get('width'))\n        height = int_or_none(content.get('height'))\n\n        description = unescapeHTML(xpath_text(\n            item, './description', 'description'))\n        thumbnail = xpath_attr(\n            item, './{http://search.yahoo.com/mrss/}thumbnail', 'url',\n            'thumbnail')\n\n        timestamp = unified_timestamp(xpath_text(\n            item, './{http://cms.springboardplatform.com/namespaces.html}created',\n            'timestamp'))\n\n        formats = [{\n            'url': video_url,\n            'format_id': 'http',\n            'tbr': tbr,\n            'filesize': filesize,\n            'width': width,\n            'height': height,\n        }]\n\n        m3u8_format = formats[0].copy()\n        m3u8_format.update({\n            'url': re.sub(r'(https?://)cdn\\.', r'\\1hls.', video_url) + '.m3u8',\n            'ext': 'mp4',\n            'format_id': 'hls',\n            'protocol': 'm3u8_native',\n        })\n        formats.append(m3u8_format)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'duration': duration,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "springboardplatform.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/springboardplatform.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}