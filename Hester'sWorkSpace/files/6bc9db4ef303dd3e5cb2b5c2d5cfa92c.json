{"author": "python-telegram-bot", "code": "\n -*- coding: utf-8 -*-\n\n\"\"\"Basic example for a bot that can receive payment from user.\n\nThis program is dedicated to the public domain under the CC0 license.\n\"\"\"\n\nfrom telegram import (LabeledPrice, ShippingOption)\nfrom telegram.ext import (Updater, CommandHandler, MessageHandler,\n                          Filters, PreCheckoutQueryHandler, ShippingQueryHandler)\nimport logging\n\n Enable logging\nlogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n                    level=logging.INFO)\n\nlogger = logging.getLogger(__name__)\n\n\ndef error(bot, update, error):\n    \"\"\"Log Errors caused by Updates.\"\"\"\n    logger.warning('Update \"%s\" caused error \"%s\"', update, error)\n\n\ndef start_callback(bot, update):\n    msg = \"Use /shipping to get an invoice for shipping-payment, \"\n    msg += \"or /noshipping for an invoice without shipping.\"\n    update.message.reply_text(msg)\n\n\ndef start_with_shipping_callback(bot, update):\n    chat_id = update.message.chat_id\n    title = \"Payment Example\"\n    description = \"Payment Example using python-telegram-bot\"\n     select a payload just for you to recognize its the donation from your bot\n    payload = \"Custom-Payload\"\n     In order to get a provider_token see https://core.telegram.org/bots/paymentsgetting-a-token\n    provider_token = \"PROVIDER_TOKEN\"\n    start_parameter = \"test-payment\"\n    currency = \"USD\"\n     price in dollars\n    price = 1\n     price * 100 so as to include 2 d.p.\n     check https://core.telegram.org/bots/paymentssupported-currencies for more details\n    prices = [LabeledPrice(\"Test\", price * 100)]\n\n     optionally pass need_name=True, need_phone_number=True,\n     need_email=True, need_shipping_address=True, is_flexible=True\n    bot.sendInvoice(chat_id, title, description, payload,\n                    provider_token, start_parameter, currency, prices,\n                    need_name=True, need_phone_number=True,\n                    need_email=True, need_shipping_address=True, is_flexible=True)\n\n\ndef start_without_shipping_callback(bot, update):\n    chat_id = update.message.chat_id\n    title = \"Payment Example\"\n    description = \"Payment Example using python-telegram-bot\"\n     select a payload just for you to recognize its the donation from your bot\n    payload = \"Custom-Payload\"\n     In order to get a provider_token see https://core.telegram.org/bots/paymentsgetting-a-token\n    provider_token = \"PROVIDER_TOKEN\"\n    start_parameter = \"test-payment\"\n    currency = \"USD\"\n     price in dollars\n    price = 1\n     price * 100 so as to include 2 d.p.\n    prices = [LabeledPrice(\"Test\", price * 100)]\n\n     optionally pass need_name=True, need_phone_number=True,\n     need_email=True, need_shipping_address=True, is_flexible=True\n    bot.sendInvoice(chat_id, title, description, payload,\n                    provider_token, start_parameter, currency, prices)\n\n\ndef shipping_callback(bot, update):\n    query = update.shipping_query\n     check the payload, is this from your bot?\n    if query.invoice_payload != 'Custom-Payload':\n         answer False pre_checkout_query\n        bot.answer_shipping_query(shipping_query_id=query.id, ok=False,\n                                  error_message=\"Something went wrong...\")\n        return\n    else:\n        options = list()\n         a single LabeledPrice\n        options.append(ShippingOption('1', 'Shipping Option A', [LabeledPrice('A', 100)]))\n         an array of LabeledPrice objects\n        price_list = [LabeledPrice('B1', 150), LabeledPrice('B2', 200)]\n        options.append(ShippingOption('2', 'Shipping Option B', price_list))\n        bot.answer_shipping_query(shipping_query_id=query.id, ok=True,\n                                  shipping_options=options)\n\n\n after (optional) shipping, it's the pre-checkout\ndef precheckout_callback(bot, update):\n    query = update.pre_checkout_query\n     check the payload, is this from your bot?\n    if query.invoice_payload != 'Custom-Payload':\n         answer False pre_checkout_query\n        bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=False,\n                                      error_message=\"Something went wrong...\")\n    else:\n        bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)\n\n\n finally, after contacting to the payment provider...\ndef successful_payment_callback(bot, update):\n     do something after successful receive of payment?\n    update.message.reply_text(\"Thank you for your payment!\")\n\n\ndef main():\n     Create the EventHandler and pass it your bot's token.\n    updater = Updater(token=\"BOT_TOKEN\")\n\n     Get the dispatcher to register handlers\n    dp = updater.dispatcher\n\n     simple start function\n    dp.add_handler(CommandHandler(\"start\", start_callback))\n\n     Add command handler to start the payment invoice\n    dp.add_handler(CommandHandler(\"shipping\", start_with_shipping_callback))\n    dp.add_handler(CommandHandler(\"noshipping\", start_without_shipping_callback))\n\n     Optional handler if your product requires shipping\n    dp.add_handler(ShippingQueryHandler(shipping_callback))\n\n     Pre-checkout handler to final check\n    dp.add_handler(PreCheckoutQueryHandler(precheckout_callback))\n\n     Success! Notify your user!\n    dp.add_handler(MessageHandler(Filters.successful_payment, successful_payment_callback))\n\n     log all errors\n    dp.add_error_handler(error)\n\n     Start the Bot\n    updater.start_polling()\n\n     Run the bot until you press Ctrl-C or the process receives SIGINT,\n     SIGTERM or SIGABRT. This should be used most of the time, since\n     start_polling() is non-blocking and will stop the bot gracefully.\n    updater.idle()\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "   basic example bot receive payment user   this program dedicated public domain cc0 license       telegram import (labeledprice  shippingoption) telegram ext import (updater  commandhandler  messagehandler                            filters  precheckoutqueryhandler  shippingqueryhandler) import logging    enable logging logging basicconfig(format   (asctime)s    (name)s    (levelname)s    (message)s                       level logging info)  logger   logging getlogger(  name  )   def error(bot  update  error)         log errors caused updates         usr bin env python        coding  utf 8           enable logging    select payload recognize donation bot    in order get provider token see https   core telegram org bots payments getting token    price dollars    price   100 include 2 p     check https   core telegram org bots payments supported currencies details    optionally pass need name true  need phone number true     need email true  need shipping address true  flexible true    select payload recognize donation bot    in order get provider token see https   core telegram org bots payments getting token    price dollars    price   100 include 2 p     optionally pass need name true  need phone number true     need email true  need shipping address true  flexible true    check payload  bot     answer false pre checkout query    single labeledprice    array labeledprice objects    (optional) shipping  pre checkout    check payload  bot     answer false pre checkout query    finally  contacting payment provider       something successful receive payment     create eventhandler pass bot token     get dispatcher register handlers    simple start function    add command handler start payment invoice    optional handler product requires shipping    pre checkout handler final check    success  notify user     log errors    start bot    run bot press ctrl c process receives sigint     sigterm sigabrt  this used time  since    start polling() non blocking stop bot gracefully  ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n\"\"\"Basic example for a bot that can receive payment from user.\n\nThis program is dedicated to the public domain under the CC0 license.\n\"\"\"\n\nfrom telegram import (LabeledPrice, ShippingOption)\nfrom telegram.ext import (Updater, CommandHandler, MessageHandler,\n                          Filters, PreCheckoutQueryHandler, ShippingQueryHandler)\nimport logging\n\n# Enable logging\nlogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n                    level=logging.INFO)\n\nlogger = logging.getLogger(__name__)\n\n\ndef error(bot, update, error):\n    \"\"\"Log Errors caused by Updates.\"\"\"\n    logger.warning('Update \"%s\" caused error \"%s\"', update, error)\n\n\ndef start_callback(bot, update):\n    msg = \"Use /shipping to get an invoice for shipping-payment, \"\n    msg += \"or /noshipping for an invoice without shipping.\"\n    update.message.reply_text(msg)\n\n\ndef start_with_shipping_callback(bot, update):\n    chat_id = update.message.chat_id\n    title = \"Payment Example\"\n    description = \"Payment Example using python-telegram-bot\"\n    # select a payload just for you to recognize its the donation from your bot\n    payload = \"Custom-Payload\"\n    # In order to get a provider_token see https://core.telegram.org/bots/payments#getting-a-token\n    provider_token = \"PROVIDER_TOKEN\"\n    start_parameter = \"test-payment\"\n    currency = \"USD\"\n    # price in dollars\n    price = 1\n    # price * 100 so as to include 2 d.p.\n    # check https://core.telegram.org/bots/payments#supported-currencies for more details\n    prices = [LabeledPrice(\"Test\", price * 100)]\n\n    # optionally pass need_name=True, need_phone_number=True,\n    # need_email=True, need_shipping_address=True, is_flexible=True\n    bot.sendInvoice(chat_id, title, description, payload,\n                    provider_token, start_parameter, currency, prices,\n                    need_name=True, need_phone_number=True,\n                    need_email=True, need_shipping_address=True, is_flexible=True)\n\n\ndef start_without_shipping_callback(bot, update):\n    chat_id = update.message.chat_id\n    title = \"Payment Example\"\n    description = \"Payment Example using python-telegram-bot\"\n    # select a payload just for you to recognize its the donation from your bot\n    payload = \"Custom-Payload\"\n    # In order to get a provider_token see https://core.telegram.org/bots/payments#getting-a-token\n    provider_token = \"PROVIDER_TOKEN\"\n    start_parameter = \"test-payment\"\n    currency = \"USD\"\n    # price in dollars\n    price = 1\n    # price * 100 so as to include 2 d.p.\n    prices = [LabeledPrice(\"Test\", price * 100)]\n\n    # optionally pass need_name=True, need_phone_number=True,\n    # need_email=True, need_shipping_address=True, is_flexible=True\n    bot.sendInvoice(chat_id, title, description, payload,\n                    provider_token, start_parameter, currency, prices)\n\n\ndef shipping_callback(bot, update):\n    query = update.shipping_query\n    # check the payload, is this from your bot?\n    if query.invoice_payload != 'Custom-Payload':\n        # answer False pre_checkout_query\n        bot.answer_shipping_query(shipping_query_id=query.id, ok=False,\n                                  error_message=\"Something went wrong...\")\n        return\n    else:\n        options = list()\n        # a single LabeledPrice\n        options.append(ShippingOption('1', 'Shipping Option A', [LabeledPrice('A', 100)]))\n        # an array of LabeledPrice objects\n        price_list = [LabeledPrice('B1', 150), LabeledPrice('B2', 200)]\n        options.append(ShippingOption('2', 'Shipping Option B', price_list))\n        bot.answer_shipping_query(shipping_query_id=query.id, ok=True,\n                                  shipping_options=options)\n\n\n# after (optional) shipping, it's the pre-checkout\ndef precheckout_callback(bot, update):\n    query = update.pre_checkout_query\n    # check the payload, is this from your bot?\n    if query.invoice_payload != 'Custom-Payload':\n        # answer False pre_checkout_query\n        bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=False,\n                                      error_message=\"Something went wrong...\")\n    else:\n        bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)\n\n\n# finally, after contacting to the payment provider...\ndef successful_payment_callback(bot, update):\n    # do something after successful receive of payment?\n    update.message.reply_text(\"Thank you for your payment!\")\n\n\ndef main():\n    # Create the EventHandler and pass it your bot's token.\n    updater = Updater(token=\"BOT_TOKEN\")\n\n    # Get the dispatcher to register handlers\n    dp = updater.dispatcher\n\n    # simple start function\n    dp.add_handler(CommandHandler(\"start\", start_callback))\n\n    # Add command handler to start the payment invoice\n    dp.add_handler(CommandHandler(\"shipping\", start_with_shipping_callback))\n    dp.add_handler(CommandHandler(\"noshipping\", start_without_shipping_callback))\n\n    # Optional handler if your product requires shipping\n    dp.add_handler(ShippingQueryHandler(shipping_callback))\n\n    # Pre-checkout handler to final check\n    dp.add_handler(PreCheckoutQueryHandler(precheckout_callback))\n\n    # Success! Notify your user!\n    dp.add_handler(MessageHandler(Filters.successful_payment, successful_payment_callback))\n\n    # log all errors\n    dp.add_error_handler(error)\n\n    # Start the Bot\n    updater.start_polling()\n\n    # Run the bot until you press Ctrl-C or the process receives SIGINT,\n    # SIGTERM or SIGABRT. This should be used most of the time, since\n    # start_polling() is non-blocking and will stop the bot gracefully.\n    updater.idle()\n\n\nif __name__ == '__main__':\n    main()\n", "description": "We have made you a wrapper you can't refuse", "file_name": "paymentbot.py", "id": "6bc9db4ef303dd3e5cb2b5c2d5cfa92c", "language": "Python", "project_name": "python-telegram-bot", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/python-telegram-bot-python-telegram-bot/python-telegram-bot-python-telegram-bot-3ccf40e/examples/paymentbot.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:32:55Z", "url": "https://github.com/python-telegram-bot/python-telegram-bot", "wiki": true}