{"author": "mwaskom", "code": "import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nfrom distutils.version import LooseVersion\nimport nose.tools as nt\nimport numpy.testing as npt\nfrom numpy.testing.decorators import skipif\n\nfrom .. import distributions as dist\n\ntry:\n    import statsmodels.nonparametric.api\n    assert statsmodels.nonparametric.api\n    _no_statsmodels = False\nexcept ImportError:\n    _no_statsmodels = True\n\n\n_old_matplotlib = LooseVersion(mpl.__version__) < \"1.5\"\n\n\nclass TestKDE(object):\n\n    rs = np.random.RandomState(0)\n    x = rs.randn(50)\n    y = rs.randn(50)\n    kernel = \"gau\"\n    bw = \"scott\"\n    gridsize = 128\n    clip = (-np.inf, np.inf)\n    cut = 3\n\n    def test_scipy_univariate_kde(self):\n        \"\"\"Test the univariate KDE estimation with scipy.\"\"\"\n        grid, y = dist._scipy_univariate_kde(self.x, self.bw, self.gridsize,\n                                             self.cut, self.clip)\n        nt.assert_equal(len(grid), self.gridsize)\n        nt.assert_equal(len(y), self.gridsize)\n        for bw in [\"silverman\", .2]:\n            dist._scipy_univariate_kde(self.x, bw, self.gridsize,\n                                       self.cut, self.clip)\n\n    @skipif(_no_statsmodels)\n    def test_statsmodels_univariate_kde(self):\n        \"\"\"Test the univariate KDE estimation with statsmodels.\"\"\"\n        grid, y = dist._statsmodels_univariate_kde(self.x, self.kernel,\n                                                   self.bw, self.gridsize,\n                                                   self.cut, self.clip)\n        nt.assert_equal(len(grid), self.gridsize)\n        nt.assert_equal(len(y), self.gridsize)\n        for bw in [\"silverman\", .2]:\n            dist._statsmodels_univariate_kde(self.x, self.kernel, bw,\n                                             self.gridsize, self.cut,\n                                             self.clip)\n\n    def test_scipy_bivariate_kde(self):\n        \"\"\"Test the bivariate KDE estimation with scipy.\"\"\"\n        clip = [self.clip, self.clip]\n        x, y, z = dist._scipy_bivariate_kde(self.x, self.y, self.bw,\n                                            self.gridsize, self.cut, clip)\n        nt.assert_equal(x.shape, (self.gridsize, self.gridsize))\n        nt.assert_equal(y.shape, (self.gridsize, self.gridsize))\n        nt.assert_equal(len(z), self.gridsize)\n\n        \n        clip = [self.clip, self.clip]\n        x, y, z = dist._scipy_bivariate_kde(self.x, self.y, 1,\n                                            self.gridsize, self.cut, clip)\n\n        \n        with nt.assert_raises(ValueError):\n            dist._scipy_bivariate_kde(self.x, self.y, (1, 2),\n                                      self.gridsize, self.cut, clip)\n\n    @skipif(_no_statsmodels)\n    def test_statsmodels_bivariate_kde(self):\n        \"\"\"Test the bivariate KDE estimation with statsmodels.\"\"\"\n        clip = [self.clip, self.clip]\n        x, y, z = dist._statsmodels_bivariate_kde(self.x, self.y, self.bw,\n                                                  self.gridsize,\n                                                  self.cut, clip)\n        nt.assert_equal(x.shape, (self.gridsize, self.gridsize))\n        nt.assert_equal(y.shape, (self.gridsize, self.gridsize))\n        nt.assert_equal(len(z), self.gridsize)\n\n    @skipif(_no_statsmodels)\n    def test_statsmodels_kde_cumulative(self):\n        \"\"\"Test computation of cumulative KDE.\"\"\"\n        grid, y = dist._statsmodels_univariate_kde(self.x, self.kernel,\n                                                   self.bw, self.gridsize,\n                                                   self.cut, self.clip,\n                                                   cumulative=True)\n        nt.assert_equal(len(grid), self.gridsize)\n        nt.assert_equal(len(y), self.gridsize)\n        \n        npt.assert_((np.diff(y) > 0).all())\n\n    def test_kde_cummulative_2d(self):\n        \"\"\"Check error if args indicate bivariate KDE and cumulative.\"\"\"\n        with npt.assert_raises(TypeError):\n            dist.kdeplot(self.x, data2=self.y, cumulative=True)\n\n    def test_bivariate_kde_series(self):\n        df = pd.DataFrame({'x': self.x, 'y': self.y})\n\n        ax_series = dist.kdeplot(df.x, df.y)\n        ax_values = dist.kdeplot(df.x.values, df.y.values)\n\n        nt.assert_equal(len(ax_series.collections),\n                        len(ax_values.collections))\n        nt.assert_equal(ax_series.collections[0].get_paths(),\n                        ax_values.collections[0].get_paths())\n\n    @skipif(_old_matplotlib)\n    def test_bivariate_kde_colorbar(self):\n\n        f, ax = plt.subplots()\n        dist.kdeplot(self.x, self.y,\n                     cbar=True, cbar_kws=dict(label=\"density\"),\n                     ax=ax)\n        nt.assert_equal(len(f.axes), 2)\n        nt.assert_equal(f.axes[1].get_ylabel(), \"density\")\n", "comments": "   test univariate kde estimation scipy             grid    dist  scipy univariate kde(self x  self bw  self gridsize                                               self cut  self clip)         nt assert equal(len(grid)  self gridsize)         nt assert equal(len(y)  self gridsize)         bw   silverman    2               dist  scipy univariate kde(self x  bw  self gridsize                                         self cut  self clip)       skipif( statsmodels)     def test statsmodels univariate kde(self)             test univariate kde estimation statsmodels             grid    dist  statsmodels univariate kde(self x  self kernel                                                     self bw  self gridsize                                                     self cut  self clip)         nt assert equal(len(grid)  self gridsize)         nt assert equal(len(y)  self gridsize)         bw   silverman    2               dist  statsmodels univariate kde(self x  self kernel  bw                                               self gridsize  self cut                                               self clip)      def test scipy bivariate kde(self)             test bivariate kde estimation scipy             clip    self clip  self clip          x   z   dist  scipy bivariate kde(self x  self  self bw                                              self gridsize  self cut  clip)         nt assert equal(x shape  (self gridsize  self gridsize))         nt assert equal(y shape  (self gridsize  self gridsize))         nt assert equal(len(z)  self gridsize)            test specific bandwidth         clip    self clip  self clip          x   z   dist  scipy bivariate kde(self x  self  1                                              self gridsize  self cut  clip)            test get error invalid bandwidth         nt assert raises(valueerror)              dist  scipy bivariate kde(self x  self  (1  2)                                        self gridsize  self cut  clip)       skipif( statsmodels)     def test statsmodels bivariate kde(self)             test bivariate kde estimation statsmodels             clip    self clip  self clip          x   z   dist  statsmodels bivariate kde(self x  self  self bw                                                    self gridsize                                                    self cut  clip)         nt assert equal(x shape  (self gridsize  self gridsize))         nt assert equal(y shape  (self gridsize  self gridsize))         nt assert equal(len(z)  self gridsize)       skipif( statsmodels)     def test statsmodels kde cumulative(self)             test computation cumulative kde             grid    dist  statsmodels univariate kde(self x  self kernel                                                     self bw  self gridsize                                                     self cut  self clip                                                     cumulative true)         nt assert equal(len(grid)  self gridsize)         nt assert equal(len(y)  self gridsize)           make sure monotonically increasing         npt assert ((np diff(y)   0) all())      def test kde cummulative 2d(self)             check error args indicate bivariate kde cumulative        test specific bandwidth    test get error invalid bandwidth    make sure monotonically increasing ", "content": "import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nfrom distutils.version import LooseVersion\nimport nose.tools as nt\nimport numpy.testing as npt\nfrom numpy.testing.decorators import skipif\n\nfrom .. import distributions as dist\n\ntry:\n    import statsmodels.nonparametric.api\n    assert statsmodels.nonparametric.api\n    _no_statsmodels = False\nexcept ImportError:\n    _no_statsmodels = True\n\n\n_old_matplotlib = LooseVersion(mpl.__version__) < \"1.5\"\n\n\nclass TestKDE(object):\n\n    rs = np.random.RandomState(0)\n    x = rs.randn(50)\n    y = rs.randn(50)\n    kernel = \"gau\"\n    bw = \"scott\"\n    gridsize = 128\n    clip = (-np.inf, np.inf)\n    cut = 3\n\n    def test_scipy_univariate_kde(self):\n        \"\"\"Test the univariate KDE estimation with scipy.\"\"\"\n        grid, y = dist._scipy_univariate_kde(self.x, self.bw, self.gridsize,\n                                             self.cut, self.clip)\n        nt.assert_equal(len(grid), self.gridsize)\n        nt.assert_equal(len(y), self.gridsize)\n        for bw in [\"silverman\", .2]:\n            dist._scipy_univariate_kde(self.x, bw, self.gridsize,\n                                       self.cut, self.clip)\n\n    @skipif(_no_statsmodels)\n    def test_statsmodels_univariate_kde(self):\n        \"\"\"Test the univariate KDE estimation with statsmodels.\"\"\"\n        grid, y = dist._statsmodels_univariate_kde(self.x, self.kernel,\n                                                   self.bw, self.gridsize,\n                                                   self.cut, self.clip)\n        nt.assert_equal(len(grid), self.gridsize)\n        nt.assert_equal(len(y), self.gridsize)\n        for bw in [\"silverman\", .2]:\n            dist._statsmodels_univariate_kde(self.x, self.kernel, bw,\n                                             self.gridsize, self.cut,\n                                             self.clip)\n\n    def test_scipy_bivariate_kde(self):\n        \"\"\"Test the bivariate KDE estimation with scipy.\"\"\"\n        clip = [self.clip, self.clip]\n        x, y, z = dist._scipy_bivariate_kde(self.x, self.y, self.bw,\n                                            self.gridsize, self.cut, clip)\n        nt.assert_equal(x.shape, (self.gridsize, self.gridsize))\n        nt.assert_equal(y.shape, (self.gridsize, self.gridsize))\n        nt.assert_equal(len(z), self.gridsize)\n\n        # Test a specific bandwidth\n        clip = [self.clip, self.clip]\n        x, y, z = dist._scipy_bivariate_kde(self.x, self.y, 1,\n                                            self.gridsize, self.cut, clip)\n\n        # Test that we get an error with an invalid bandwidth\n        with nt.assert_raises(ValueError):\n            dist._scipy_bivariate_kde(self.x, self.y, (1, 2),\n                                      self.gridsize, self.cut, clip)\n\n    @skipif(_no_statsmodels)\n    def test_statsmodels_bivariate_kde(self):\n        \"\"\"Test the bivariate KDE estimation with statsmodels.\"\"\"\n        clip = [self.clip, self.clip]\n        x, y, z = dist._statsmodels_bivariate_kde(self.x, self.y, self.bw,\n                                                  self.gridsize,\n                                                  self.cut, clip)\n        nt.assert_equal(x.shape, (self.gridsize, self.gridsize))\n        nt.assert_equal(y.shape, (self.gridsize, self.gridsize))\n        nt.assert_equal(len(z), self.gridsize)\n\n    @skipif(_no_statsmodels)\n    def test_statsmodels_kde_cumulative(self):\n        \"\"\"Test computation of cumulative KDE.\"\"\"\n        grid, y = dist._statsmodels_univariate_kde(self.x, self.kernel,\n                                                   self.bw, self.gridsize,\n                                                   self.cut, self.clip,\n                                                   cumulative=True)\n        nt.assert_equal(len(grid), self.gridsize)\n        nt.assert_equal(len(y), self.gridsize)\n        # make sure y is monotonically increasing\n        npt.assert_((np.diff(y) > 0).all())\n\n    def test_kde_cummulative_2d(self):\n        \"\"\"Check error if args indicate bivariate KDE and cumulative.\"\"\"\n        with npt.assert_raises(TypeError):\n            dist.kdeplot(self.x, data2=self.y, cumulative=True)\n\n    def test_bivariate_kde_series(self):\n        df = pd.DataFrame({'x': self.x, 'y': self.y})\n\n        ax_series = dist.kdeplot(df.x, df.y)\n        ax_values = dist.kdeplot(df.x.values, df.y.values)\n\n        nt.assert_equal(len(ax_series.collections),\n                        len(ax_values.collections))\n        nt.assert_equal(ax_series.collections[0].get_paths(),\n                        ax_values.collections[0].get_paths())\n\n    @skipif(_old_matplotlib)\n    def test_bivariate_kde_colorbar(self):\n\n        f, ax = plt.subplots()\n        dist.kdeplot(self.x, self.y,\n                     cbar=True, cbar_kws=dict(label=\"density\"),\n                     ax=ax)\n        nt.assert_equal(len(f.axes), 2)\n        nt.assert_equal(f.axes[1].get_ylabel(), \"density\")\n", "description": "Statistical data visualization using matplotlib", "file_name": "test_distributions.py", "id": "5507a6359735e8078db2ecff638781c5", "language": "Python", "project_name": "seaborn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mwaskom-seaborn/mwaskom-seaborn-71a807b/seaborn/tests/test_distributions.py", "save_time": "", "source": "", "update_at": "2018-03-18T02:14:24Z", "url": "https://github.com/mwaskom/seaborn", "wiki": false}