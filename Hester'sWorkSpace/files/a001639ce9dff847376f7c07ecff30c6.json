{"author": "ansible", "code": " (c) 2016 Red Hat Inc.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.eos import eos_config\nfrom units.modules.utils import set_module_args\nfrom .eos_module import TestEosModule, load_fixture\n\n\nclass TestEosConfigModule(TestEosModule):\n\n    module = eos_config\n\n    def setUp(self):\n        super(TestEosConfigModule, self).setUp()\n        self.mock_get_config = patch('ansible.modules.network.eos.eos_config.get_config')\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch('ansible.modules.network.eos.eos_config.load_config')\n        self.load_config = self.mock_load_config.start()\n        self.mock_run_commands = patch('ansible.modules.network.eos.eos_config.run_commands')\n        self.run_commands = self.mock_run_commands.start()\n\n    def tearDown(self):\n        super(TestEosConfigModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def load_fixtures(self, commands=None, transport='cli'):\n        self.get_config.return_value = load_fixture('eos_config_config.cfg')\n        self.load_config.return_value = dict(diff=None, session='session')\n\n    def test_eos_config_no_change(self):\n        args = dict(lines=['hostname localhost'])\n        set_module_args(args)\n        result = self.execute_module()\n\n    def test_eos_config_src(self):\n        args = dict(src=load_fixture('eos_config_candidate.cfg'))\n        set_module_args(args)\n\n        result = self.execute_module(changed=True)\n        config = ['hostname switch01', 'interface Ethernet1',\n                  'description test interface', 'no shutdown', 'ip routing']\n\n        self.assertEqual(sorted(config), sorted(result['commands']), result['commands'])\n\n    def test_eos_config_lines(self):\n        args = dict(lines=['hostname switch01', 'ip domain-name eng.ansible.com'])\n        set_module_args(args)\n\n        result = self.execute_module(changed=True)\n        config = ['hostname switch01']\n\n        self.assertEqual(sorted(config), sorted(result['commands']), result['commands'])\n\n    def test_eos_config_before(self):\n        args = dict(lines=['hostname switch01', 'ip domain-name eng.ansible.com'],\n                    before=['before command'])\n\n        set_module_args(args)\n\n        result = self.execute_module(changed=True)\n        config = ['before command', 'hostname switch01']\n\n        self.assertEqual(sorted(config), sorted(result['commands']), result['commands'])\n        self.assertEqual('before command', result['commands'][0])\n\n    def test_eos_config_after(self):\n        args = dict(lines=['hostname switch01', 'ip domain-name eng.ansible.com'],\n                    after=['after command'])\n\n        set_module_args(args)\n\n        result = self.execute_module(changed=True)\n        config = ['after command', 'hostname switch01']\n\n        self.assertEqual(sorted(config), sorted(result['commands']), result['commands'])\n        self.assertEqual('after command', result['commands'][-1])\n\n    def test_eos_config_parents(self):\n        args = dict(lines=['ip address 1.2.3.4/5', 'no shutdown'], parents=['interface Ethernet10'])\n        set_module_args(args)\n\n        result = self.execute_module(changed=True)\n        config = ['interface Ethernet10', 'ip address 1.2.3.4/5', 'no shutdown']\n\n        self.assertEqual(config, result['commands'], result['commands'])\n\n    def test_eos_config_src_and_lines_fails(self):\n        args = dict(src='foo', lines='foo')\n        set_module_args(args)\n        result = self.execute_module(failed=True)\n\n    def test_eos_config_match_exact_requires_lines(self):\n        args = dict(match='exact')\n        set_module_args(args)\n        result = self.execute_module(failed=True)\n\n    def test_eos_config_match_strict_requires_lines(self):\n        args = dict(match='strict')\n        set_module_args(args)\n        result = self.execute_module(failed=True)\n\n    def test_eos_config_replace_block_requires_lines(self):\n        args = dict(replace='block')\n        set_module_args(args)\n        result = self.execute_module(failed=True)\n\n    def test_eos_config_replace_config_requires_src(self):\n        args = dict(replace='config')\n        set_module_args(args)\n        result = self.execute_module(failed=True)\n\n    def test_eos_config_backup_returns__backup__(self):\n        args = dict(backup=True)\n        set_module_args(args)\n        result = self.execute_module()\n        self.assertIn('__backup__', result)\n\n    def test_eos_config_save_when(self):\n        mock_run_commands = patch('ansible.modules.network.eos.eos_config.run_commands')\n        run_commands = mock_run_commands.start()\n\n        run_commands.return_value = [load_fixture('eos_config_config.cfg'),\n                                     load_fixture('eos_config_config.cfg')]\n\n        args = dict(save_when='modified')\n        set_module_args(args)\n        result = self.execute_module()\n\n        run_commands.return_value = [load_fixture('eos_config_config.cfg'),\n                                     load_fixture('eos_config_config_updated.cfg')]\n\n        args = dict(save_when='modified')\n        set_module_args(args)\n        result = self.execute_module(changed=True)\n\n        mock_run_commands.stop()\n\n    def test_eos_config_save_changed_true(self):\n        commands = ['hostname foo', 'interface GigabitEthernet0/0', 'no ip address']\n        set_module_args(dict(save_when='changed', lines=commands))\n        self.execute_module(changed=True)\n        self.assertEqual(self.run_commands.call_count, 1)\n        self.assertEqual(self.get_config.call_count, 1)\n        self.assertEqual(self.load_config.call_count, 1)\n        args = self.run_commands.call_args[0][1][0]['command']\n        self.assertIn('copy running-config startup-config', args)\n\n    def test_eos_config_save_changed_false(self):\n        set_module_args(dict(save_when='changed'))\n        self.execute_module(changed=False)\n        self.assertEqual(self.run_commands.call_count, 0)\n        self.assertEqual(self.get_config.call_count, 0)\n        self.assertEqual(self.load_config.call_count, 0)\n\n    def test_eos_config_save(self):\n        self.run_commands.return_value = \"hostname foo\"\n        set_module_args(dict(save=True))\n        self.execute_module(changed=True)\n        self.assertEqual(self.run_commands.call_count, 1)\n        self.assertEqual(self.get_config.call_count, 0)\n        self.assertEqual(self.load_config.call_count, 0)\n        args = self.run_commands.call_args[0][1][0]['command']\n        self.assertIn('copy running-config startup-config', args)\n", "comments": "  (c) 2016 red hat inc        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish ", "content": "# (c) 2016 Red Hat Inc.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.eos import eos_config\nfrom units.modules.utils import set_module_args\nfrom .eos_module import TestEosModule, load_fixture\n\n\nclass TestEosConfigModule(TestEosModule):\n\n    module = eos_config\n\n    def setUp(self):\n        super(TestEosConfigModule, self).setUp()\n        self.mock_get_config = patch('ansible.modules.network.eos.eos_config.get_config')\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch('ansible.modules.network.eos.eos_config.load_config')\n        self.load_config = self.mock_load_config.start()\n        self.mock_run_commands = patch('ansible.modules.network.eos.eos_config.run_commands')\n        self.run_commands = self.mock_run_commands.start()\n\n    def tearDown(self):\n        super(TestEosConfigModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def load_fixtures(self, commands=None, transport='cli'):\n        self.get_config.return_value = load_fixture('eos_config_config.cfg')\n        self.load_config.return_value = dict(diff=None, session='session')\n\n    def test_eos_config_no_change(self):\n        args = dict(lines=['hostname localhost'])\n        set_module_args(args)\n        result = self.execute_module()\n\n    def test_eos_config_src(self):\n        args = dict(src=load_fixture('eos_config_candidate.cfg'))\n        set_module_args(args)\n\n        result = self.execute_module(changed=True)\n        config = ['hostname switch01', 'interface Ethernet1',\n                  'description test interface', 'no shutdown', 'ip routing']\n\n        self.assertEqual(sorted(config), sorted(result['commands']), result['commands'])\n\n    def test_eos_config_lines(self):\n        args = dict(lines=['hostname switch01', 'ip domain-name eng.ansible.com'])\n        set_module_args(args)\n\n        result = self.execute_module(changed=True)\n        config = ['hostname switch01']\n\n        self.assertEqual(sorted(config), sorted(result['commands']), result['commands'])\n\n    def test_eos_config_before(self):\n        args = dict(lines=['hostname switch01', 'ip domain-name eng.ansible.com'],\n                    before=['before command'])\n\n        set_module_args(args)\n\n        result = self.execute_module(changed=True)\n        config = ['before command', 'hostname switch01']\n\n        self.assertEqual(sorted(config), sorted(result['commands']), result['commands'])\n        self.assertEqual('before command', result['commands'][0])\n\n    def test_eos_config_after(self):\n        args = dict(lines=['hostname switch01', 'ip domain-name eng.ansible.com'],\n                    after=['after command'])\n\n        set_module_args(args)\n\n        result = self.execute_module(changed=True)\n        config = ['after command', 'hostname switch01']\n\n        self.assertEqual(sorted(config), sorted(result['commands']), result['commands'])\n        self.assertEqual('after command', result['commands'][-1])\n\n    def test_eos_config_parents(self):\n        args = dict(lines=['ip address 1.2.3.4/5', 'no shutdown'], parents=['interface Ethernet10'])\n        set_module_args(args)\n\n        result = self.execute_module(changed=True)\n        config = ['interface Ethernet10', 'ip address 1.2.3.4/5', 'no shutdown']\n\n        self.assertEqual(config, result['commands'], result['commands'])\n\n    def test_eos_config_src_and_lines_fails(self):\n        args = dict(src='foo', lines='foo')\n        set_module_args(args)\n        result = self.execute_module(failed=True)\n\n    def test_eos_config_match_exact_requires_lines(self):\n        args = dict(match='exact')\n        set_module_args(args)\n        result = self.execute_module(failed=True)\n\n    def test_eos_config_match_strict_requires_lines(self):\n        args = dict(match='strict')\n        set_module_args(args)\n        result = self.execute_module(failed=True)\n\n    def test_eos_config_replace_block_requires_lines(self):\n        args = dict(replace='block')\n        set_module_args(args)\n        result = self.execute_module(failed=True)\n\n    def test_eos_config_replace_config_requires_src(self):\n        args = dict(replace='config')\n        set_module_args(args)\n        result = self.execute_module(failed=True)\n\n    def test_eos_config_backup_returns__backup__(self):\n        args = dict(backup=True)\n        set_module_args(args)\n        result = self.execute_module()\n        self.assertIn('__backup__', result)\n\n    def test_eos_config_save_when(self):\n        mock_run_commands = patch('ansible.modules.network.eos.eos_config.run_commands')\n        run_commands = mock_run_commands.start()\n\n        run_commands.return_value = [load_fixture('eos_config_config.cfg'),\n                                     load_fixture('eos_config_config.cfg')]\n\n        args = dict(save_when='modified')\n        set_module_args(args)\n        result = self.execute_module()\n\n        run_commands.return_value = [load_fixture('eos_config_config.cfg'),\n                                     load_fixture('eos_config_config_updated.cfg')]\n\n        args = dict(save_when='modified')\n        set_module_args(args)\n        result = self.execute_module(changed=True)\n\n        mock_run_commands.stop()\n\n    def test_eos_config_save_changed_true(self):\n        commands = ['hostname foo', 'interface GigabitEthernet0/0', 'no ip address']\n        set_module_args(dict(save_when='changed', lines=commands))\n        self.execute_module(changed=True)\n        self.assertEqual(self.run_commands.call_count, 1)\n        self.assertEqual(self.get_config.call_count, 1)\n        self.assertEqual(self.load_config.call_count, 1)\n        args = self.run_commands.call_args[0][1][0]['command']\n        self.assertIn('copy running-config startup-config', args)\n\n    def test_eos_config_save_changed_false(self):\n        set_module_args(dict(save_when='changed'))\n        self.execute_module(changed=False)\n        self.assertEqual(self.run_commands.call_count, 0)\n        self.assertEqual(self.get_config.call_count, 0)\n        self.assertEqual(self.load_config.call_count, 0)\n\n    def test_eos_config_save(self):\n        self.run_commands.return_value = \"hostname foo\"\n        set_module_args(dict(save=True))\n        self.execute_module(changed=True)\n        self.assertEqual(self.run_commands.call_count, 1)\n        self.assertEqual(self.get_config.call_count, 0)\n        self.assertEqual(self.load_config.call_count, 0)\n        args = self.run_commands.call_args[0][1][0]['command']\n        self.assertIn('copy running-config startup-config', args)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_eos_config.py", "id": "a001639ce9dff847376f7c07ecff30c6", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/eos/test_eos_config.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}