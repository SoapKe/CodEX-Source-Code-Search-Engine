{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse,\n)\nfrom ..utils import (\n    unified_strdate,\n)\n\n\nclass UrortIE(InfoExtractor):\n    IE_DESC = 'NRK P3 Ur\u00f8rt'\n    _VALID_URL = r'https?://(?:www\\.)?urort\\.p3\\.no/\n\n    _TEST = {\n        'url': 'https://urort.p3.no/\n        'md5': '5ed31a924be8a05e47812678a86e127b',\n        'info_dict': {\n            'id': '33124-24',\n            'ext': 'mp3',\n            'title': 'The Bomb',\n            'thumbnail': r're:^https?://.+\\.jpg',\n            'uploader': 'Gerilja',\n            'uploader_id': 'Gerilja',\n            'upload_date': '20100323',\n        },\n        'params': {\n            'matchtitle': '^The Bomb$',  \n        }\n    }\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        fstr = compat_urllib_parse.quote(\"InternalBandUrl eq '%s'\" % playlist_id)\n        json_url = 'http://urort.p3.no/breeze/urort/TrackDTOViews?$filter=%s&$orderby=Released%%20desc&$expand=Tags%%2CFiles' % fstr\n        songs = self._download_json(json_url, playlist_id)\n        entries = []\n        for s in songs:\n            formats = [{\n                'tbr': f.get('Quality'),\n                'ext': f['FileType'],\n                'format_id': '%s-%s' % (f['FileType'], f.get('Quality', '')),\n                'url': 'http://p3urort.blob.core.windows.net/tracks/%s' % f['FileRef'],\n                'preference': 3 if f['FileType'] == 'mp3' else 2,\n            } for f in s['Files']]\n            self._sort_formats(formats)\n            e = {\n                'id': '%d-%s' % (s['BandId'], s['$id']),\n                'title': s['Title'],\n                'uploader_id': playlist_id,\n                'uploader': s.get('BandName', playlist_id),\n                'thumbnail': 'http://urort.p3.no/cloud/images/%s' % s['Image'],\n                'upload_date': unified_strdate(s.get('Released')),\n                'formats': formats,\n            }\n            entries.append(e)\n\n        return {\n            '_type': 'playlist',\n            'id': playlist_id,\n            'title': playlist_id,\n            'entries': entries,\n        }\n", "comments": "# coding: utf-8\n#!/Band/(?P<id>[^/]+)$'\n#!/Band/Gerilja',\n# To test, we want just one video\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse,\n)\nfrom ..utils import (\n    unified_strdate,\n)\n\n\nclass UrortIE(InfoExtractor):\n    IE_DESC = 'NRK P3 Ur\u00f8rt'\n    _VALID_URL = r'https?://(?:www\\.)?urort\\.p3\\.no/#!/Band/(?P<id>[^/]+)$'\n\n    _TEST = {\n        'url': 'https://urort.p3.no/#!/Band/Gerilja',\n        'md5': '5ed31a924be8a05e47812678a86e127b',\n        'info_dict': {\n            'id': '33124-24',\n            'ext': 'mp3',\n            'title': 'The Bomb',\n            'thumbnail': r're:^https?://.+\\.jpg',\n            'uploader': 'Gerilja',\n            'uploader_id': 'Gerilja',\n            'upload_date': '20100323',\n        },\n        'params': {\n            'matchtitle': '^The Bomb$',  # To test, we want just one video\n        }\n    }\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        fstr = compat_urllib_parse.quote(\"InternalBandUrl eq '%s'\" % playlist_id)\n        json_url = 'http://urort.p3.no/breeze/urort/TrackDTOViews?$filter=%s&$orderby=Released%%20desc&$expand=Tags%%2CFiles' % fstr\n        songs = self._download_json(json_url, playlist_id)\n        entries = []\n        for s in songs:\n            formats = [{\n                'tbr': f.get('Quality'),\n                'ext': f['FileType'],\n                'format_id': '%s-%s' % (f['FileType'], f.get('Quality', '')),\n                'url': 'http://p3urort.blob.core.windows.net/tracks/%s' % f['FileRef'],\n                'preference': 3 if f['FileType'] == 'mp3' else 2,\n            } for f in s['Files']]\n            self._sort_formats(formats)\n            e = {\n                'id': '%d-%s' % (s['BandId'], s['$id']),\n                'title': s['Title'],\n                'uploader_id': playlist_id,\n                'uploader': s.get('BandName', playlist_id),\n                'thumbnail': 'http://urort.p3.no/cloud/images/%s' % s['Image'],\n                'upload_date': unified_strdate(s.get('Released')),\n                'formats': formats,\n            }\n            entries.append(e)\n\n        return {\n            '_type': 'playlist',\n            'id': playlist_id,\n            'title': playlist_id,\n            'entries': entries,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "urort.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/urort.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}