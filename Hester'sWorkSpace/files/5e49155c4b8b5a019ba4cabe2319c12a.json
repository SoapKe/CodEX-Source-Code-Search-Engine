{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom django.http import HttpRequest\n\nfrom sentry.testutils import TestCase\nfrom sentry.utils.pipeline import PipelineProvider, PipelineView, Pipeline\n\n\nclass PipelineStep(PipelineView):\n    def dispatch(self, request, pipeline):\n        pipeline.dispatch_count += 1\n        pipeline.bind_state('some_state', 'value')\n\n\nclass DummyProvider(PipelineProvider):\n    key = 'dummy'\n    pipeline = [PipelineStep(), PipelineStep()]\n\n    def get_pipeline_views(self):\n        return self.pipeline\n\n\nclass DummyPipeline(Pipeline):\n    pipeline_name = 'test_pipeline'\n\n    \n    provider_manager = {'dummy': DummyProvider()}\n\n    def finish_pipeline(self):\n        self.finished = True\n\n\nclass PipelineTestCase(TestCase):\n    def test_simple_pipeline(self):\n        org = self.create_organization()\n        request = HttpRequest()\n        request.session = {}\n        request.user = self.user\n\n        pipeline = DummyPipeline(request, org, 'dummy', config={'some_config': True})\n        pipeline.initialize()\n\n        assert pipeline.is_valid()\n\n        assert 'some_config' in pipeline.provider.config\n\n        \n        pipeline.finished = False\n        pipeline.dispatch_count = 0\n\n        \n        \n        \n        pipeline.current_step()\n        assert pipeline.dispatch_count == 1\n        assert pipeline.fetch_state('some_state') == 'value'\n\n        pipeline.next_step()\n        assert pipeline.dispatch_count == 2\n\n        pipeline.next_step()\n        assert pipeline.dispatch_count == 2\n        assert pipeline.finished\n\n        pipeline.clear_session()\n        assert not pipeline.state.is_valid()\n\n    def test_invalidated_pipeline(self):\n        org = self.create_organization()\n        request = HttpRequest()\n        request.session = {}\n        request.user = self.user\n\n        pipeline = DummyPipeline(request, org, 'dummy')\n        pipeline.initialize()\n\n        assert pipeline.is_valid()\n\n        \n        \n        prev_pipeline = DummyProvider.pipeline\n        DummyProvider.pipeline = [PipelineStep()]\n\n        pipeline = DummyPipeline.get_for_request(request)\n\n        assert not pipeline.is_valid()\n\n        DummyProvider.pipeline = prev_pipeline\n", "comments": "  simplify tests  manager dict     test state    pipeline two steps  ensure steps compete  usually    dispatch would one calling current step    next step methods determines move forward step     mutate provider  remove item pipeline  thus    invalidating pipeline  ", "content": "from __future__ import absolute_import\n\nfrom django.http import HttpRequest\n\nfrom sentry.testutils import TestCase\nfrom sentry.utils.pipeline import PipelineProvider, PipelineView, Pipeline\n\n\nclass PipelineStep(PipelineView):\n    def dispatch(self, request, pipeline):\n        pipeline.dispatch_count += 1\n        pipeline.bind_state('some_state', 'value')\n\n\nclass DummyProvider(PipelineProvider):\n    key = 'dummy'\n    pipeline = [PipelineStep(), PipelineStep()]\n\n    def get_pipeline_views(self):\n        return self.pipeline\n\n\nclass DummyPipeline(Pipeline):\n    pipeline_name = 'test_pipeline'\n\n    # Simplify tests, the manager can just be a dict.\n    provider_manager = {'dummy': DummyProvider()}\n\n    def finish_pipeline(self):\n        self.finished = True\n\n\nclass PipelineTestCase(TestCase):\n    def test_simple_pipeline(self):\n        org = self.create_organization()\n        request = HttpRequest()\n        request.session = {}\n        request.user = self.user\n\n        pipeline = DummyPipeline(request, org, 'dummy', config={'some_config': True})\n        pipeline.initialize()\n\n        assert pipeline.is_valid()\n\n        assert 'some_config' in pipeline.provider.config\n\n        # Test state\n        pipeline.finished = False\n        pipeline.dispatch_count = 0\n\n        # Pipeline has two steps, ensure both steps compete. Usually the\n        # dispatch itself would be the one calling the current_step and\n        # next_step methods after it determines if it can move forward a step.\n        pipeline.current_step()\n        assert pipeline.dispatch_count == 1\n        assert pipeline.fetch_state('some_state') == 'value'\n\n        pipeline.next_step()\n        assert pipeline.dispatch_count == 2\n\n        pipeline.next_step()\n        assert pipeline.dispatch_count == 2\n        assert pipeline.finished\n\n        pipeline.clear_session()\n        assert not pipeline.state.is_valid()\n\n    def test_invalidated_pipeline(self):\n        org = self.create_organization()\n        request = HttpRequest()\n        request.session = {}\n        request.user = self.user\n\n        pipeline = DummyPipeline(request, org, 'dummy')\n        pipeline.initialize()\n\n        assert pipeline.is_valid()\n\n        # Mutate the provider, Remove an item from the pipeline, thus\n        # invalidating the pipeline.\n        prev_pipeline = DummyProvider.pipeline\n        DummyProvider.pipeline = [PipelineStep()]\n\n        pipeline = DummyPipeline.get_for_request(request)\n\n        assert not pipeline.is_valid()\n\n        DummyProvider.pipeline = prev_pipeline\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_pipeline.py", "id": "5e49155c4b8b5a019ba4cabe2319c12a", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/test_pipeline.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}