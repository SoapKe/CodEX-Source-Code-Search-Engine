{"author": "rg3", "code": "\n\nfrom __future__ import unicode_literals\n\n\nimport os\nimport re\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom test.helper import try_rm\nfrom youtube_dl import YoutubeDL\nfrom youtube_dl.compat import compat_http_server\nfrom youtube_dl.downloader.http import HttpFD\nfrom youtube_dl.utils import encodeFilename\nimport ssl\nimport threading\n\nTEST_DIR = os.path.dirname(os.path.abspath(__file__))\n\n\ndef http_server_port(httpd):\n    if os.name == 'java' and isinstance(httpd.socket, ssl.SSLSocket):\n        \n        sock = httpd.socket.sock\n    else:\n        sock = httpd.socket\n    return sock.getsockname()[1]\n\n\nTEST_SIZE = 10 * 1024\n\n\nclass HTTPTestRequestHandler(compat_http_server.BaseHTTPRequestHandler):\n    def log_message(self, format, *args):\n        pass\n\n    def send_content_range(self, total=None):\n        range_header = self.headers.get('Range')\n        start = end = None\n        if range_header:\n            mobj = re.search(r'^bytes=(\\d+)-(\\d+)', range_header)\n            if mobj:\n                start = int(mobj.group(1))\n                end = int(mobj.group(2))\n        valid_range = start is not None and end is not None\n        if valid_range:\n            content_range = 'bytes %d-%d' % (start, end)\n            if total:\n                content_range += '/%d' % total\n            self.send_header('Content-Range', content_range)\n        return (end - start + 1) if valid_range else total\n\n    def serve(self, range=True, content_length=True):\n        self.send_response(200)\n        self.send_header('Content-Type', 'video/mp4')\n        size = TEST_SIZE\n        if range:\n            size = self.send_content_range(TEST_SIZE)\n        if content_length:\n            self.send_header('Content-Length', size)\n        self.end_headers()\n        self.wfile.write(b'\n\n    def do_GET(self):\n        if self.path == '/regular':\n            self.serve()\n        elif self.path == '/no-content-length':\n            self.serve(content_length=False)\n        elif self.path == '/no-range':\n            self.serve(range=False)\n        elif self.path == '/no-range-no-content-length':\n            self.serve(range=False, content_length=False)\n        else:\n            assert False\n\n\nclass FakeLogger(object):\n    def debug(self, msg):\n        pass\n\n    def warning(self, msg):\n        pass\n\n    def error(self, msg):\n        pass\n\n\nclass TestHttpFD(unittest.TestCase):\n    def setUp(self):\n        self.httpd = compat_http_server.HTTPServer(\n            ('127.0.0.1', 0), HTTPTestRequestHandler)\n        self.port = http_server_port(self.httpd)\n        self.server_thread = threading.Thread(target=self.httpd.serve_forever)\n        self.server_thread.daemon = True\n        self.server_thread.start()\n\n    def download(self, params, ep):\n        params['logger'] = FakeLogger()\n        ydl = YoutubeDL(params)\n        downloader = HttpFD(ydl, params)\n        filename = 'testfile.mp4'\n        try_rm(encodeFilename(filename))\n        self.assertTrue(downloader.real_download(filename, {\n            'url': 'http://127.0.0.1:%d/%s' % (self.port, ep),\n        }))\n        self.assertEqual(os.path.getsize(encodeFilename(filename)), TEST_SIZE)\n        try_rm(encodeFilename(filename))\n\n    def download_all(self, params):\n        for ep in ('regular', 'no-content-length', 'no-range', 'no-range-no-content-length'):\n            self.download(params, ep)\n\n    def test_regular(self):\n        self.download_all({})\n\n    def test_chunked(self):\n        self.download_all({\n            'http_chunk_size': 1000,\n        })\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "#!/usr/bin/env python\n# coding: utf-8\n# Allow direct execution\n# In Jython SSLSocket is not a subclass of socket.socket\n#' * size)\n", "content": "#!/usr/bin/env python\n# coding: utf-8\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport re\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom test.helper import try_rm\nfrom youtube_dl import YoutubeDL\nfrom youtube_dl.compat import compat_http_server\nfrom youtube_dl.downloader.http import HttpFD\nfrom youtube_dl.utils import encodeFilename\nimport ssl\nimport threading\n\nTEST_DIR = os.path.dirname(os.path.abspath(__file__))\n\n\ndef http_server_port(httpd):\n    if os.name == 'java' and isinstance(httpd.socket, ssl.SSLSocket):\n        # In Jython SSLSocket is not a subclass of socket.socket\n        sock = httpd.socket.sock\n    else:\n        sock = httpd.socket\n    return sock.getsockname()[1]\n\n\nTEST_SIZE = 10 * 1024\n\n\nclass HTTPTestRequestHandler(compat_http_server.BaseHTTPRequestHandler):\n    def log_message(self, format, *args):\n        pass\n\n    def send_content_range(self, total=None):\n        range_header = self.headers.get('Range')\n        start = end = None\n        if range_header:\n            mobj = re.search(r'^bytes=(\\d+)-(\\d+)', range_header)\n            if mobj:\n                start = int(mobj.group(1))\n                end = int(mobj.group(2))\n        valid_range = start is not None and end is not None\n        if valid_range:\n            content_range = 'bytes %d-%d' % (start, end)\n            if total:\n                content_range += '/%d' % total\n            self.send_header('Content-Range', content_range)\n        return (end - start + 1) if valid_range else total\n\n    def serve(self, range=True, content_length=True):\n        self.send_response(200)\n        self.send_header('Content-Type', 'video/mp4')\n        size = TEST_SIZE\n        if range:\n            size = self.send_content_range(TEST_SIZE)\n        if content_length:\n            self.send_header('Content-Length', size)\n        self.end_headers()\n        self.wfile.write(b'#' * size)\n\n    def do_GET(self):\n        if self.path == '/regular':\n            self.serve()\n        elif self.path == '/no-content-length':\n            self.serve(content_length=False)\n        elif self.path == '/no-range':\n            self.serve(range=False)\n        elif self.path == '/no-range-no-content-length':\n            self.serve(range=False, content_length=False)\n        else:\n            assert False\n\n\nclass FakeLogger(object):\n    def debug(self, msg):\n        pass\n\n    def warning(self, msg):\n        pass\n\n    def error(self, msg):\n        pass\n\n\nclass TestHttpFD(unittest.TestCase):\n    def setUp(self):\n        self.httpd = compat_http_server.HTTPServer(\n            ('127.0.0.1', 0), HTTPTestRequestHandler)\n        self.port = http_server_port(self.httpd)\n        self.server_thread = threading.Thread(target=self.httpd.serve_forever)\n        self.server_thread.daemon = True\n        self.server_thread.start()\n\n    def download(self, params, ep):\n        params['logger'] = FakeLogger()\n        ydl = YoutubeDL(params)\n        downloader = HttpFD(ydl, params)\n        filename = 'testfile.mp4'\n        try_rm(encodeFilename(filename))\n        self.assertTrue(downloader.real_download(filename, {\n            'url': 'http://127.0.0.1:%d/%s' % (self.port, ep),\n        }))\n        self.assertEqual(os.path.getsize(encodeFilename(filename)), TEST_SIZE)\n        try_rm(encodeFilename(filename))\n\n    def download_all(self, params):\n        for ep in ('regular', 'no-content-length', 'no-range', 'no-range-no-content-length'):\n            self.download(params, ep)\n\n    def test_regular(self):\n        self.download_all({})\n\n    def test_chunked(self):\n        self.download_all({\n            'http_chunk_size': 1000,\n        })\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "test_downloader_http.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/test/test_downloader_http.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}