{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models, _\nfrom odoo.exceptions import UserError\n\n\nclass EventType(models.Model):\n    _inherit = 'event.type'\n\n    use_questions = fields.Boolean('Questions to Attendees')\n    question_ids = fields.One2many(\n        'event.question', 'event_type_id',\n        string='Questions', copy=True)\n\n\nclass EventEvent(models.Model):\n    \"\"\" Override Event model to add optional questions when buying tickets. \"\"\"\n    _inherit = 'event.event'\n\n    question_ids = fields.One2many('event.question', 'event_id', 'Questions', copy=True)\n    general_question_ids = fields.One2many('event.question', 'event_id', 'General Questions',\n                                           domain=[('is_individual', '=', False)])\n    specific_question_ids = fields.One2many('event.question', 'event_id', 'Specific Questions',\n                                            domain=[('is_individual', '=', True)])\n\n    @api.onchange('event_type_id')\n    def _onchange_type(self):\n        super(EventEvent, self)._onchange_type()\n        if self.event_type_id.use_questions and self.event_type_id.question_ids:\n            self.question_ids = [(5, 0, 0)] + [\n                (0, 0, {\n                    'title': question.title,\n                    'sequence': question.sequence,\n                    'is_individual': question.is_individual,\n                })\n                for question in self.event_type_id.question_ids\n            ]\n\n\nclass EventRegistrationAnswer(models.Model):\n    \n\n    _name = 'event.registration.answer'\n    _table = 'event_registration_answer'\n\n    event_answer_id = fields.Many2one('event.answer', required=True, ondelete='cascade')\n    event_registration_id = fields.Many2one('event.registration', required=True, ondelete='cascade')\n\n\nclass EventRegistration(models.Model):\n    \"\"\" Store answers on attendees. \"\"\"\n    _inherit = 'event.registration'\n\n    answer_ids = fields.Many2many('event.answer', 'event_registration_answer', string='Answers')\n\n\nclass EventQuestion(models.Model):\n    _name = 'event.question'\n    _rec_name = 'title'\n    _order = 'sequence,id'\n\n    title = fields.Char(required=True, translate=True)\n    event_type_id = fields.Many2one('event.type', 'Event Type', ondelete='cascade')\n    event_id = fields.Many2one('event.event', 'Event', ondelete='cascade')\n    answer_ids = fields.One2many('event.answer', 'question_id', \"Answers\", required=True, copy=True)\n    sequence = fields.Integer(default=10)\n    is_individual = fields.Boolean('Ask each attendee',\n                                   help=\"If True, this question will be asked for every attendee of a reservation. If \"\n                                        \"not it will be asked only once and its value propagated to every attendees.\")\n\n    @api.constrains('event_type_id', 'event_id')\n    def _constrains_event(self):\n        if any(question.event_type_id and question.event_id for question in self):\n            raise UserError(_('Question should belong to either event category or event but not both'))\n\n    @api.model\n    def create(self, vals):\n        event_id = vals.get('event_id', False)\n        if event_id:\n            event = self.env['event.event'].browse([event_id])\n            if event.event_type_id.use_questions and event.event_type_id.question_ids:\n                vals['answer_ids'] = vals.get('answer_ids', []) + [(0, 0, {\n                    'name': answer.name,\n                    'sequence': answer.sequence,\n                }) for answer in event.event_type_id.question_ids.filtered(lambda question: question.title == vals.get('title')).mapped('answer_ids')]\n        return super(EventQuestion, self).create(vals)\n\n\nclass EventAnswer(models.Model):\n    _name = 'event.answer'\n    _order = 'sequence,id'\n\n    name = fields.Char('Answer', required=True, translate=True)\n    question_id = fields.Many2one('event.question', required=True, ondelete='cascade')\n    sequence = fields.Integer(default=10)\n", "comments": "    override event model add optional questions buying tickets           inherit    event event       question ids   fields one2many( event question    event id    questions   copy true)     general question ids   fields one2many( event question    event id    general questions                                              domain  ( individual        false) )     specific question ids   fields one2many( event question    event id    specific questions                                               domain  ( individual        true) )       api onchange( event type id )     def  onchange type(self)          super(eventevent  self)  onchange type()         self event type id use questions self event type id question ids              self question ids    (5  0  0)                      (0  0                         title   question title                       sequence   question sequence                       individual   question individual                   )                 question self event type id question ids                 class eventregistrationanswer(models model)          this m2m table explicitly instanciated need unique ids     reporting view event question report       this model purely technical            name    event registration answer       table    event registration answer       event answer id   fields many2one( event answer   required true  ondelete  cascade )     event registration id   fields many2one( event registration   required true  ondelete  cascade )   class eventregistration(models model)          store answers attendees           this m2m table explicitly instanciated need unique ids     reporting view event question report       this model purely technical             coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models, _\nfrom odoo.exceptions import UserError\n\n\nclass EventType(models.Model):\n    _inherit = 'event.type'\n\n    use_questions = fields.Boolean('Questions to Attendees')\n    question_ids = fields.One2many(\n        'event.question', 'event_type_id',\n        string='Questions', copy=True)\n\n\nclass EventEvent(models.Model):\n    \"\"\" Override Event model to add optional questions when buying tickets. \"\"\"\n    _inherit = 'event.event'\n\n    question_ids = fields.One2many('event.question', 'event_id', 'Questions', copy=True)\n    general_question_ids = fields.One2many('event.question', 'event_id', 'General Questions',\n                                           domain=[('is_individual', '=', False)])\n    specific_question_ids = fields.One2many('event.question', 'event_id', 'Specific Questions',\n                                            domain=[('is_individual', '=', True)])\n\n    @api.onchange('event_type_id')\n    def _onchange_type(self):\n        super(EventEvent, self)._onchange_type()\n        if self.event_type_id.use_questions and self.event_type_id.question_ids:\n            self.question_ids = [(5, 0, 0)] + [\n                (0, 0, {\n                    'title': question.title,\n                    'sequence': question.sequence,\n                    'is_individual': question.is_individual,\n                })\n                for question in self.event_type_id.question_ids\n            ]\n\n\nclass EventRegistrationAnswer(models.Model):\n    ''' This m2m table has to be explicitly instanciated as we need unique ids\n    in the reporting view event.question.report.\n\n    This model is purely technical. '''\n\n    _name = 'event.registration.answer'\n    _table = 'event_registration_answer'\n\n    event_answer_id = fields.Many2one('event.answer', required=True, ondelete='cascade')\n    event_registration_id = fields.Many2one('event.registration', required=True, ondelete='cascade')\n\n\nclass EventRegistration(models.Model):\n    \"\"\" Store answers on attendees. \"\"\"\n    _inherit = 'event.registration'\n\n    answer_ids = fields.Many2many('event.answer', 'event_registration_answer', string='Answers')\n\n\nclass EventQuestion(models.Model):\n    _name = 'event.question'\n    _rec_name = 'title'\n    _order = 'sequence,id'\n\n    title = fields.Char(required=True, translate=True)\n    event_type_id = fields.Many2one('event.type', 'Event Type', ondelete='cascade')\n    event_id = fields.Many2one('event.event', 'Event', ondelete='cascade')\n    answer_ids = fields.One2many('event.answer', 'question_id', \"Answers\", required=True, copy=True)\n    sequence = fields.Integer(default=10)\n    is_individual = fields.Boolean('Ask each attendee',\n                                   help=\"If True, this question will be asked for every attendee of a reservation. If \"\n                                        \"not it will be asked only once and its value propagated to every attendees.\")\n\n    @api.constrains('event_type_id', 'event_id')\n    def _constrains_event(self):\n        if any(question.event_type_id and question.event_id for question in self):\n            raise UserError(_('Question should belong to either event category or event but not both'))\n\n    @api.model\n    def create(self, vals):\n        event_id = vals.get('event_id', False)\n        if event_id:\n            event = self.env['event.event'].browse([event_id])\n            if event.event_type_id.use_questions and event.event_type_id.question_ids:\n                vals['answer_ids'] = vals.get('answer_ids', []) + [(0, 0, {\n                    'name': answer.name,\n                    'sequence': answer.sequence,\n                }) for answer in event.event_type_id.question_ids.filtered(lambda question: question.title == vals.get('title')).mapped('answer_ids')]\n        return super(EventQuestion, self).create(vals)\n\n\nclass EventAnswer(models.Model):\n    _name = 'event.answer'\n    _order = 'sequence,id'\n\n    name = fields.Char('Answer', required=True, translate=True)\n    question_id = fields.Many2one('event.question', required=True, ondelete='cascade')\n    sequence = fields.Integer(default=10)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "event.py", "id": "49baf0fbccf30e9771973f58e30014fe", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_event_questions/models/event.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}