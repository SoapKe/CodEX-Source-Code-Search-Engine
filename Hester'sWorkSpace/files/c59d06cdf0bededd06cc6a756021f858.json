{"author": "HelloZeroNet", "code": "import time\nimport os\nfrom cStringIO import StringIO\n\nimport pytest\nimport msgpack\nimport mock\nfrom lib import merkletools\n\nfrom Connection import ConnectionServer\nfrom Content.ContentManager import VerifyError\nfrom File import FileServer\nfrom File import FileRequest\nfrom Worker import WorkerManager\nfrom Peer import Peer\nfrom Bigfile import BigfilePiecefield, BigfilePiecefieldPacked\nfrom Test import Spy\n\n\n@pytest.mark.usefixtures(\"resetSettings\")\n@pytest.mark.usefixtures(\"resetTempSettings\")\nclass TestBigfile:\n    privatekey = \"5KUh3PvNm5HUWoCfSUfcYvfQ2g3PrRNJWr6Q9eqdBGu23mtMntv\"\n\n    def createBigfile(self, site, inner_path=\"data/optional.any.iso\", pieces=10):\n        f = site.storage.open(inner_path, \"w\")\n        for i in range(pieces * 100):\n            f.write((\"Test%s\" % i).ljust(10, \"-\") * 1000)\n        f.close()\n        assert site.content_manager.sign(\"content.json\", self.privatekey)\n        return inner_path\n\n    def testPiecemapCreate(self, site):\n        inner_path = self.createBigfile(site)\n        content = site.storage.loadJson(\"content.json\")\n        assert \"data/optional.any.iso\" in content[\"files_optional\"]\n        file_node = content[\"files_optional\"][inner_path]\n        assert file_node[\"size\"] == 10 * 1000 * 1000\n        assert file_node[\"sha512\"] == \"47a72cde3be80b4a829e7674f72b7c6878cf6a70b0c58c6aa6c17d7e9948daf6\"\n        assert file_node[\"piecemap\"] == inner_path + \".piecemap.msgpack\"\n\n        piecemap = msgpack.unpack(site.storage.open(file_node[\"piecemap\"], \"rb\"))[\"optional.any.iso\"]\n        assert len(piecemap[\"sha512_pieces\"]) == 10\n        assert piecemap[\"sha512_pieces\"][0] != piecemap[\"sha512_pieces\"][1]\n        assert piecemap[\"sha512_pieces\"][0].encode(\"hex\") == \"a73abad9992b3d0b672d0c2a292046695d31bebdcb1e150c8410bbe7c972eff3\"\n\n    def testVerifyPiece(self, site):\n        inner_path = self.createBigfile(site)\n\n        \n        f = site.storage.open(inner_path, \"rb\")\n        for i in range(10):\n            piece = StringIO(f.read(1024 * 1024))\n            piece.seek(0)\n            site.content_manager.verifyPiece(inner_path, i * 1024 * 1024, piece)\n        f.close()\n\n        \n        with pytest.raises(VerifyError) as err:\n            i = 1\n            f = site.storage.open(inner_path, \"rb\")\n            piece = StringIO(f.read(1024 * 1024))\n            f.close()\n            site.content_manager.verifyPiece(inner_path, i * 1024 * 1024, piece)\n        assert \"Invalid hash\" in str(err)\n\n    def testSparseFile(self, site):\n        inner_path = \"sparsefile\"\n\n        \n        site.storage.createSparseFile(inner_path, 100 * 1024 * 1024)\n\n        \n        s = time.time()\n        f = site.storage.write(\"%s|%s-%s\" % (inner_path, 0, 1024 * 1024), \"hellostart\" * 1024)\n        time_write_start = time.time() - s\n\n        \n        s = time.time()\n        f = site.storage.write(\"%s|%s-%s\" % (inner_path, 99 * 1024 * 1024, 99 * 1024 * 1024 + 1024 * 1024), \"helloend\" * 1024)\n        time_write_end = time.time() - s\n\n        \n        f = site.storage.open(inner_path)\n        assert f.read(10) == \"hellostart\"\n        f.seek(99 * 1024 * 1024)\n        assert f.read(8) == \"helloend\"\n        f.close()\n\n        site.storage.delete(inner_path)\n\n        \n        assert time_write_end <= max(0.1, time_write_start * 1.1)\n\n    def testRangedFileRequest(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        file_server.sites[site.address] = site\n        client = FileServer(\"127.0.0.1\", 1545)\n        client.sites[site_temp.address] = site_temp\n        site_temp.connection_server = client\n        connection = client.getConnection(\"127.0.0.1\", 1544)\n\n        \n        peer_file_server = site_temp.addPeer(\"127.0.0.1\", 1544)\n\n        buff = peer_file_server.getFile(site_temp.address, \"%s|%s-%s\" % (inner_path, 5 * 1024 * 1024, 6 * 1024 * 1024))\n\n        assert len(buff.getvalue()) == 1 * 1024 * 1024  \n        assert buff.getvalue().startswith(\"Test524\")  \n        buff.seek(0)\n        assert site.content_manager.verifyPiece(inner_path, 5 * 1024 * 1024, buff)  \n\n        connection.close()\n        client.stop()\n\n    def testRangedFileDownload(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        \n        site.connection_server = file_server\n        file_server.sites[site.address] = site\n\n        \n        file_info = site.content_manager.getFileInfo(inner_path)\n        assert site.content_manager.hashfield.hasHash(file_info[\"sha512\"])\n\n        piecemap_hash = site.content_manager.getFileInfo(file_info[\"piecemap\"])[\"sha512\"]\n        assert site.content_manager.hashfield.hasHash(piecemap_hash)\n\n        \n        client = ConnectionServer(\"127.0.0.1\", 1545)\n        site_temp.connection_server = client\n        peer_client = site_temp.addPeer(\"127.0.0.1\", 1544)\n\n        \n        site_temp.download(blind_includes=True).join(timeout=5)\n\n        bad_files = site_temp.storage.verifyFiles(quick_check=True)\n        assert not bad_files\n\n        # client_piecefield = peer_client.piecefields[file_info[\"sha512\"]].tostring()\n        # assert client_piecefield == \"1\" * 10\n\n        \n\n        site_temp.needFile(\"%s|%s-%s\" % (inner_path, 5 * 1024 * 1024, 6 * 1024 * 1024))\n        site_temp.needFile(\"%s|%s-%s\" % (inner_path, 9 * 1024 * 1024, 10 * 1024 * 1024))\n\n        \n        f = site_temp.storage.open(inner_path)\n        assert f.read(10) == \"\\0\" * 10\n        \n        f.seek(5 * 1024 * 1024)\n        assert f.read(7) == \"Test524\"\n        f.seek(9 * 1024 * 1024)\n        assert f.read(7) == \"943---T\"\n\n        \n        assert set(site_temp.content_manager.hashfield) == set([18343, 30970])  \n\n    def testOpenBigfile(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        \n        site.connection_server = file_server\n        file_server.sites[site.address] = site\n\n        \n        client = ConnectionServer(\"127.0.0.1\", 1545)\n        site_temp.connection_server = client\n        site_temp.addPeer(\"127.0.0.1\", 1544)\n\n        \n        site_temp.download(blind_includes=True).join(timeout=5)\n\n        \n        assert not site_temp.storage.isFile(inner_path)\n\n        with site_temp.storage.openBigfile(inner_path) as f:\n            with Spy.Spy(FileRequest, \"route\") as requests:\n                f.seek(5 * 1024 * 1024)\n                assert f.read(7) == \"Test524\"\n\n                f.seek(9 * 1024 * 1024)\n                assert f.read(7) == \"943---T\"\n\n            assert len(requests) == 4  # 1x peicemap + 1x getpiecefield + 2x for pieces\n\n            assert set(site_temp.content_manager.hashfield) == set([18343, 30970])\n\n            assert site_temp.storage.piecefields[f.sha512].tostring() == \"0000010001\"\n            assert f.sha512 in site_temp.getSettingsCache()[\"piecefields\"]\n\n            \n            with Spy.Spy(FileRequest, \"route\") as requests:\n                f.seek(5 * 1024 * 1024)\n                assert f.read(7) == \"Test524\"\n\n            assert len(requests) == 0\n\n            \n            with Spy.Spy(FileRequest, \"route\") as requests:\n                f.seek(5 * 1024 * 1024)  \n                data = f.read(1024 * 1024 * 3)  \n                assert data.startswith(\"Test524\")\n                assert data.endswith(\"Test838-\")\n                assert \"\\0\" not in data  \n\n            assert len(requests) == 2  \n\n            \n            f.seek(5 * 1024 * 1024)\n            data = f.read(1024 * 1024 * 30)\n            assert len(data) == 10 * 1000 * 1000 - (5 * 1024 * 1024)\n\n            f.seek(30 * 1024 * 1024)\n            data = f.read(1024 * 1024 * 30)\n            assert len(data) == 0\n\n\n\n    @pytest.mark.parametrize(\"piecefield_obj\", [BigfilePiecefield, BigfilePiecefieldPacked])\n    def testPiecefield(self, piecefield_obj, site):\n        testdatas = [\n            \"1\" * 100 + \"0\" * 900 + \"1\" * 4000 + \"0\" * 4999 + \"1\",\n            \"010101\" * 10 + \"01\" * 90 + \"10\" * 400 + \"0\" * 4999,\n            \"1\" * 10000,\n            \"0\" * 10000\n        ]\n        for testdata in testdatas:\n            piecefield = piecefield_obj()\n\n            piecefield.fromstring(testdata)\n            assert piecefield.tostring() == testdata\n            assert piecefield[0] == int(testdata[0])\n            assert piecefield[100] == int(testdata[100])\n            assert piecefield[1000] == int(testdata[1000])\n            assert piecefield[len(testdata)-1] == int(testdata[len(testdata)-1])\n\n            packed = piecefield.pack()\n            piecefield_new = piecefield_obj()\n            piecefield_new.unpack(packed)\n            assert piecefield.tostring() == piecefield_new.tostring()\n            assert piecefield_new.tostring() == testdata\n\n\n    def testFileGet(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        \n        site.connection_server = file_server\n        file_server.sites[site.address] = site\n\n        \n        site_temp.connection_server = FileServer(\"127.0.0.1\", 1545)\n        site_temp.connection_server.sites[site_temp.address] = site_temp\n        site_temp.addPeer(\"127.0.0.1\", 1544)\n\n        \n        site_temp.download(blind_includes=True).join(timeout=5)\n\n        \n        with site_temp.storage.openBigfile(inner_path) as f:\n            f.seek(1024 * 1024)\n            assert f.read(1024)[0] != \"\\0\"\n\n        \n        with site_temp.storage.open(inner_path) as f:\n            assert f.read(1024)[0] == \"\\0\"\n\n        peer2 = site.addPeer(\"127.0.0.1\", 1545, return_peer=True)\n\n        \n        assert not peer2.getFile(site.address, \"%s|0-%s\" % (inner_path, 1024 * 1024 * 1))\n\n        \n        assert peer2.getFile(site.address, \"%s|%s-%s\" % (inner_path, 1024 * 1024 * 1, 1024 * 1024 * 2))\n\n\n    def benchmarkPeerMemory(self, site, file_server):\n        \n        site.connection_server = file_server\n        file_server.sites[site.address] = site\n\n        import psutil, os\n        meminfo = psutil.Process(os.getpid()).memory_info\n\n        mem_s = meminfo()[0]\n        s = time.time()\n        for i in range(25000):\n            site.addPeer(\"127.0.0.1\", i)\n        print \"%.3fs MEM: + %sKB\" % (time.time() - s, (meminfo()[0] - mem_s) / 1024)  # 0.082s MEM: + 6800KB\n        print site.peers.values()[0].piecefields\n\n\n    def testUpdatePiecefield(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        server1 = file_server\n        server1.sites[site.address] = site\n        server2 = FileServer(\"127.0.0.1\", 1545)\n        server2.sites[site_temp.address] = site_temp\n        site_temp.connection_server = server2\n\n        \n        server2_peer1 = site_temp.addPeer(\"127.0.0.1\", 1544)\n\n        \n        assert len(server2_peer1.piecefields) == 0\n        assert server2_peer1.updatePiecefields()  \n        assert len(server2_peer1.piecefields) > 0\n\n    def testWorkerManagerPiecefieldDeny(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        server1 = file_server\n        server1.sites[site.address] = site\n        server2 = FileServer(\"127.0.0.1\", 1545)\n        server2.sites[site_temp.address] = site_temp\n        site_temp.connection_server = server2\n\n        \n        server2_peer1 = site_temp.addPeer(\"127.0.0.1\", 1544)  \n\n        site_temp.downloadContent(\"content.json\", download_files=False)\n        site_temp.needFile(\"data/optional.any.iso.piecemap.msgpack\")\n\n        \n        for i in range(5):\n            fake_peer = site_temp.addPeer(\"127.0.1.%s\" % i, 1544)\n            fake_peer.hashfield = site.content_manager.hashfield\n            fake_peer.has_hashfield = True\n\n        with Spy.Spy(WorkerManager, \"addWorker\") as requests:\n            site_temp.needFile(\"%s|%s-%s\" % (inner_path, 5 * 1024 * 1024, 6 * 1024 * 1024))\n            site_temp.needFile(\"%s|%s-%s\" % (inner_path, 6 * 1024 * 1024, 7 * 1024 * 1024))\n\n        \n        assert len([request[1] for request in requests if request[1] != server2_peer1]) == 0\n\n\n    def testWorkerManagerPiecefieldDownload(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        server1 = file_server\n        server1.sites[site.address] = site\n        server2 = FileServer(\"127.0.0.1\", 1545)\n        server2.sites[site_temp.address] = site_temp\n        site_temp.connection_server = server2\n        sha512 = site.content_manager.getFileInfo(inner_path)[\"sha512\"]\n\n        \n        for i in range(10):\n            peer = Peer(\"127.0.0.1\", 1544, site_temp, server2)\n            peer.piecefields[sha512][i] = \"1\"\n            peer.updateHashfield = mock.MagicMock(return_value=False)\n            peer.updatePiecefields = mock.MagicMock(return_value=False)\n            peer.findHashIds = mock.MagicMock(return_value={\"nope\": []})\n            peer.hashfield = site.content_manager.hashfield\n            peer.has_hashfield = True\n            peer.key = \"Peer:%s\" % i\n            site_temp.peers[\"Peer:%s\" % i] = peer\n\n        site_temp.downloadContent(\"content.json\", download_files=False)\n        site_temp.needFile(\"data/optional.any.iso.piecemap.msgpack\")\n\n        with Spy.Spy(Peer, \"getFile\") as requests:\n            for i in range(10):\n                site_temp.needFile(\"%s|%s-%s\" % (inner_path, i * 1024 * 1024, (i + 1) * 1024 * 1024))\n\n        assert len(requests) == 10\n        for i in range(10):\n            assert requests[i][0] == site_temp.peers[\"Peer:%s\" % i]  \n\n    def testDownloadStats(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        \n        site.connection_server = file_server\n        file_server.sites[site.address] = site\n\n        \n        client = ConnectionServer(\"127.0.0.1\", 1545)\n        site_temp.connection_server = client\n        site_temp.addPeer(\"127.0.0.1\", 1544)\n\n        \n        site_temp.download(blind_includes=True).join(timeout=5)\n\n        \n        assert not site_temp.storage.isFile(inner_path)\n\n        \n        assert site_temp.settings[\"size\"] < 10 * 1024 * 1024\n        assert site_temp.settings[\"optional_downloaded\"] == 0\n        size_piecemap = site_temp.content_manager.getFileInfo(inner_path + \".piecemap.msgpack\")[\"size\"]\n        size_bigfile = site_temp.content_manager.getFileInfo(inner_path)[\"size\"]\n\n        with site_temp.storage.openBigfile(inner_path) as f:\n            assert not \"\\0\" in f.read(1024)\n            assert site_temp.settings[\"optional_downloaded\"] == size_piecemap + size_bigfile\n\n        with site_temp.storage.openBigfile(inner_path) as f:\n            \n            assert not \"\\0\" in f.read(1024)\n            assert site_temp.settings[\"optional_downloaded\"] == size_piecemap + size_bigfile\n\n            \n            assert not \"\\0\" in f.read(1024 * 1024)\n            assert site_temp.settings[\"optional_downloaded\"] == size_piecemap + size_bigfile\n\n\n    def testPrebuffer(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        \n        site.connection_server = file_server\n        file_server.sites[site.address] = site\n\n        \n        client = ConnectionServer(\"127.0.0.1\", 1545)\n        site_temp.connection_server = client\n        site_temp.addPeer(\"127.0.0.1\", 1544)\n\n        \n        site_temp.download(blind_includes=True).join(timeout=5)\n\n        \n        assert not site_temp.storage.isFile(inner_path)\n\n        with site_temp.storage.openBigfile(inner_path, prebuffer=1024 * 1024 * 2) as f:\n            with Spy.Spy(FileRequest, \"route\") as requests:\n                f.seek(5 * 1024 * 1024)\n                assert f.read(7) == \"Test524\"\n            # assert len(requests) == 3  # 1x piecemap + 1x getpiecefield + 1x for pieces\n            assert len([task for task in site_temp.worker_manager.tasks if task[\"inner_path\"].startswith(inner_path)]) == 2\n\n            time.sleep(0.5)  \n\n            sha512 = site.content_manager.getFileInfo(inner_path)[\"sha512\"]\n            assert site_temp.storage.piecefields[sha512].tostring() == \"0000011100\"\n\n            \n            f.seek(9 * 1024 * 1024)\n            assert \"\\0\" not in f.read(7)\n\n            assert len([task for task in site_temp.worker_manager.tasks if task[\"inner_path\"].startswith(inner_path)]) == 0\n\n    def testDownloadAllPieces(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        \n        site.connection_server = file_server\n        file_server.sites[site.address] = site\n\n        \n        client = ConnectionServer(\"127.0.0.1\", 1545)\n        site_temp.connection_server = client\n        site_temp.addPeer(\"127.0.0.1\", 1544)\n\n        \n        site_temp.download(blind_includes=True).join(timeout=5)\n\n        \n        assert not site_temp.storage.isFile(inner_path)\n\n        with Spy.Spy(FileRequest, \"route\") as requests:\n            site_temp.needFile(\"%s|all\" % inner_path)\n\n        assert len(requests) == 12  \n\n        \n        with Spy.Spy(FileRequest, \"route\") as requests:\n            site_temp.needFile(\"%s|all\" % inner_path)\n\n        assert len(requests) == 0\n", "comments": "  verify 10 piece    try verify piece 0 piece 1 hash    create 100mb sparse file    write file beginning    write file end    verify writes    writing end shold take much longer  writing start    add file server peer client    correct block size    correct data    correct hash    init source server    make sure file piecemap optional hashfield    init client server    download site    client piecefield   peer client piecefields file info  sha512    tostring()    assert client piecefield     1    10    download 5  10  block    verify 0  block downloaded    verify 5  10  block downloaded    verify hashfield    18343  data optional iso  30970  data optional iso hashmap msgpack    init source server    init client server    download site    open virtual file    1x peicemap   1x getpiecefield   2x pieces    test requesting already downloaded    test requesting multi block overflow reads    we already block    our read overflow 6  7  block    no null bytes allowed    two block download    test range request    init source server    init client server    download site    download second block    make sure first block download    should drop error first block request    should drop error second block request    init source server    0 082s mem    6800kb    add file server peer client    testing piecefield sync    query piecefields peer    add file server peer client    working    add fake peers optional files downloaded    it request parts peer1 peers requested parts piecefields    create 10 fake peer piece    every part requested piece owner peer    init source server    init client server    download site    open virtual file    check size downloads    don count twice    add second block    init source server    init client server    download site    open virtual file    assert len(requests)    3    1x piecemap   1x getpiecefield   1x pieces    wait prebuffer download    no prebuffer beyond end file    init source server    init client server    download site    open virtual file    piecemap msgpack  getpiecefields  10 x piece    don download already got pieces ", "content": "import time\nimport os\nfrom cStringIO import StringIO\n\nimport pytest\nimport msgpack\nimport mock\nfrom lib import merkletools\n\nfrom Connection import ConnectionServer\nfrom Content.ContentManager import VerifyError\nfrom File import FileServer\nfrom File import FileRequest\nfrom Worker import WorkerManager\nfrom Peer import Peer\nfrom Bigfile import BigfilePiecefield, BigfilePiecefieldPacked\nfrom Test import Spy\n\n\n@pytest.mark.usefixtures(\"resetSettings\")\n@pytest.mark.usefixtures(\"resetTempSettings\")\nclass TestBigfile:\n    privatekey = \"5KUh3PvNm5HUWoCfSUfcYvfQ2g3PrRNJWr6Q9eqdBGu23mtMntv\"\n\n    def createBigfile(self, site, inner_path=\"data/optional.any.iso\", pieces=10):\n        f = site.storage.open(inner_path, \"w\")\n        for i in range(pieces * 100):\n            f.write((\"Test%s\" % i).ljust(10, \"-\") * 1000)\n        f.close()\n        assert site.content_manager.sign(\"content.json\", self.privatekey)\n        return inner_path\n\n    def testPiecemapCreate(self, site):\n        inner_path = self.createBigfile(site)\n        content = site.storage.loadJson(\"content.json\")\n        assert \"data/optional.any.iso\" in content[\"files_optional\"]\n        file_node = content[\"files_optional\"][inner_path]\n        assert file_node[\"size\"] == 10 * 1000 * 1000\n        assert file_node[\"sha512\"] == \"47a72cde3be80b4a829e7674f72b7c6878cf6a70b0c58c6aa6c17d7e9948daf6\"\n        assert file_node[\"piecemap\"] == inner_path + \".piecemap.msgpack\"\n\n        piecemap = msgpack.unpack(site.storage.open(file_node[\"piecemap\"], \"rb\"))[\"optional.any.iso\"]\n        assert len(piecemap[\"sha512_pieces\"]) == 10\n        assert piecemap[\"sha512_pieces\"][0] != piecemap[\"sha512_pieces\"][1]\n        assert piecemap[\"sha512_pieces\"][0].encode(\"hex\") == \"a73abad9992b3d0b672d0c2a292046695d31bebdcb1e150c8410bbe7c972eff3\"\n\n    def testVerifyPiece(self, site):\n        inner_path = self.createBigfile(site)\n\n        # Verify all 10 piece\n        f = site.storage.open(inner_path, \"rb\")\n        for i in range(10):\n            piece = StringIO(f.read(1024 * 1024))\n            piece.seek(0)\n            site.content_manager.verifyPiece(inner_path, i * 1024 * 1024, piece)\n        f.close()\n\n        # Try to verify piece 0 with piece 1 hash\n        with pytest.raises(VerifyError) as err:\n            i = 1\n            f = site.storage.open(inner_path, \"rb\")\n            piece = StringIO(f.read(1024 * 1024))\n            f.close()\n            site.content_manager.verifyPiece(inner_path, i * 1024 * 1024, piece)\n        assert \"Invalid hash\" in str(err)\n\n    def testSparseFile(self, site):\n        inner_path = \"sparsefile\"\n\n        # Create a 100MB sparse file\n        site.storage.createSparseFile(inner_path, 100 * 1024 * 1024)\n\n        # Write to file beginning\n        s = time.time()\n        f = site.storage.write(\"%s|%s-%s\" % (inner_path, 0, 1024 * 1024), \"hellostart\" * 1024)\n        time_write_start = time.time() - s\n\n        # Write to file end\n        s = time.time()\n        f = site.storage.write(\"%s|%s-%s\" % (inner_path, 99 * 1024 * 1024, 99 * 1024 * 1024 + 1024 * 1024), \"helloend\" * 1024)\n        time_write_end = time.time() - s\n\n        # Verify writes\n        f = site.storage.open(inner_path)\n        assert f.read(10) == \"hellostart\"\n        f.seek(99 * 1024 * 1024)\n        assert f.read(8) == \"helloend\"\n        f.close()\n\n        site.storage.delete(inner_path)\n\n        # Writing to end shold not take much longer, than writing to start\n        assert time_write_end <= max(0.1, time_write_start * 1.1)\n\n    def testRangedFileRequest(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        file_server.sites[site.address] = site\n        client = FileServer(\"127.0.0.1\", 1545)\n        client.sites[site_temp.address] = site_temp\n        site_temp.connection_server = client\n        connection = client.getConnection(\"127.0.0.1\", 1544)\n\n        # Add file_server as peer to client\n        peer_file_server = site_temp.addPeer(\"127.0.0.1\", 1544)\n\n        buff = peer_file_server.getFile(site_temp.address, \"%s|%s-%s\" % (inner_path, 5 * 1024 * 1024, 6 * 1024 * 1024))\n\n        assert len(buff.getvalue()) == 1 * 1024 * 1024  # Correct block size\n        assert buff.getvalue().startswith(\"Test524\")  # Correct data\n        buff.seek(0)\n        assert site.content_manager.verifyPiece(inner_path, 5 * 1024 * 1024, buff)  # Correct hash\n\n        connection.close()\n        client.stop()\n\n    def testRangedFileDownload(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        # Init source server\n        site.connection_server = file_server\n        file_server.sites[site.address] = site\n\n        # Make sure the file and the piecemap in the optional hashfield\n        file_info = site.content_manager.getFileInfo(inner_path)\n        assert site.content_manager.hashfield.hasHash(file_info[\"sha512\"])\n\n        piecemap_hash = site.content_manager.getFileInfo(file_info[\"piecemap\"])[\"sha512\"]\n        assert site.content_manager.hashfield.hasHash(piecemap_hash)\n\n        # Init client server\n        client = ConnectionServer(\"127.0.0.1\", 1545)\n        site_temp.connection_server = client\n        peer_client = site_temp.addPeer(\"127.0.0.1\", 1544)\n\n        # Download site\n        site_temp.download(blind_includes=True).join(timeout=5)\n\n        bad_files = site_temp.storage.verifyFiles(quick_check=True)\n        assert not bad_files\n\n        # client_piecefield = peer_client.piecefields[file_info[\"sha512\"]].tostring()\n        # assert client_piecefield == \"1\" * 10\n\n        # Download 5. and 10. block\n\n        site_temp.needFile(\"%s|%s-%s\" % (inner_path, 5 * 1024 * 1024, 6 * 1024 * 1024))\n        site_temp.needFile(\"%s|%s-%s\" % (inner_path, 9 * 1024 * 1024, 10 * 1024 * 1024))\n\n        # Verify 0. block not downloaded\n        f = site_temp.storage.open(inner_path)\n        assert f.read(10) == \"\\0\" * 10\n        # Verify 5. and 10. block downloaded\n        f.seek(5 * 1024 * 1024)\n        assert f.read(7) == \"Test524\"\n        f.seek(9 * 1024 * 1024)\n        assert f.read(7) == \"943---T\"\n\n        # Verify hashfield\n        assert set(site_temp.content_manager.hashfield) == set([18343, 30970])  # 18343: data/optional.any.iso, 30970: data/optional.any.iso.hashmap.msgpack\n\n    def testOpenBigfile(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        # Init source server\n        site.connection_server = file_server\n        file_server.sites[site.address] = site\n\n        # Init client server\n        client = ConnectionServer(\"127.0.0.1\", 1545)\n        site_temp.connection_server = client\n        site_temp.addPeer(\"127.0.0.1\", 1544)\n\n        # Download site\n        site_temp.download(blind_includes=True).join(timeout=5)\n\n        # Open virtual file\n        assert not site_temp.storage.isFile(inner_path)\n\n        with site_temp.storage.openBigfile(inner_path) as f:\n            with Spy.Spy(FileRequest, \"route\") as requests:\n                f.seek(5 * 1024 * 1024)\n                assert f.read(7) == \"Test524\"\n\n                f.seek(9 * 1024 * 1024)\n                assert f.read(7) == \"943---T\"\n\n            assert len(requests) == 4  # 1x peicemap + 1x getpiecefield + 2x for pieces\n\n            assert set(site_temp.content_manager.hashfield) == set([18343, 30970])\n\n            assert site_temp.storage.piecefields[f.sha512].tostring() == \"0000010001\"\n            assert f.sha512 in site_temp.getSettingsCache()[\"piecefields\"]\n\n            # Test requesting already downloaded\n            with Spy.Spy(FileRequest, \"route\") as requests:\n                f.seek(5 * 1024 * 1024)\n                assert f.read(7) == \"Test524\"\n\n            assert len(requests) == 0\n\n            # Test requesting multi-block overflow reads\n            with Spy.Spy(FileRequest, \"route\") as requests:\n                f.seek(5 * 1024 * 1024)  # We already have this block\n                data = f.read(1024 * 1024 * 3)  # Our read overflow to 6. and 7. block\n                assert data.startswith(\"Test524\")\n                assert data.endswith(\"Test838-\")\n                assert \"\\0\" not in data  # No null bytes allowed\n\n            assert len(requests) == 2  # Two block download\n\n            # Test out of range request\n            f.seek(5 * 1024 * 1024)\n            data = f.read(1024 * 1024 * 30)\n            assert len(data) == 10 * 1000 * 1000 - (5 * 1024 * 1024)\n\n            f.seek(30 * 1024 * 1024)\n            data = f.read(1024 * 1024 * 30)\n            assert len(data) == 0\n\n\n\n    @pytest.mark.parametrize(\"piecefield_obj\", [BigfilePiecefield, BigfilePiecefieldPacked])\n    def testPiecefield(self, piecefield_obj, site):\n        testdatas = [\n            \"1\" * 100 + \"0\" * 900 + \"1\" * 4000 + \"0\" * 4999 + \"1\",\n            \"010101\" * 10 + \"01\" * 90 + \"10\" * 400 + \"0\" * 4999,\n            \"1\" * 10000,\n            \"0\" * 10000\n        ]\n        for testdata in testdatas:\n            piecefield = piecefield_obj()\n\n            piecefield.fromstring(testdata)\n            assert piecefield.tostring() == testdata\n            assert piecefield[0] == int(testdata[0])\n            assert piecefield[100] == int(testdata[100])\n            assert piecefield[1000] == int(testdata[1000])\n            assert piecefield[len(testdata)-1] == int(testdata[len(testdata)-1])\n\n            packed = piecefield.pack()\n            piecefield_new = piecefield_obj()\n            piecefield_new.unpack(packed)\n            assert piecefield.tostring() == piecefield_new.tostring()\n            assert piecefield_new.tostring() == testdata\n\n\n    def testFileGet(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        # Init source server\n        site.connection_server = file_server\n        file_server.sites[site.address] = site\n\n        # Init client server\n        site_temp.connection_server = FileServer(\"127.0.0.1\", 1545)\n        site_temp.connection_server.sites[site_temp.address] = site_temp\n        site_temp.addPeer(\"127.0.0.1\", 1544)\n\n        # Download site\n        site_temp.download(blind_includes=True).join(timeout=5)\n\n        # Download second block\n        with site_temp.storage.openBigfile(inner_path) as f:\n            f.seek(1024 * 1024)\n            assert f.read(1024)[0] != \"\\0\"\n\n        # Make sure first block not download\n        with site_temp.storage.open(inner_path) as f:\n            assert f.read(1024)[0] == \"\\0\"\n\n        peer2 = site.addPeer(\"127.0.0.1\", 1545, return_peer=True)\n\n        # Should drop error on first block request\n        assert not peer2.getFile(site.address, \"%s|0-%s\" % (inner_path, 1024 * 1024 * 1))\n\n        # Should not drop error for second block request\n        assert peer2.getFile(site.address, \"%s|%s-%s\" % (inner_path, 1024 * 1024 * 1, 1024 * 1024 * 2))\n\n\n    def benchmarkPeerMemory(self, site, file_server):\n        # Init source server\n        site.connection_server = file_server\n        file_server.sites[site.address] = site\n\n        import psutil, os\n        meminfo = psutil.Process(os.getpid()).memory_info\n\n        mem_s = meminfo()[0]\n        s = time.time()\n        for i in range(25000):\n            site.addPeer(\"127.0.0.1\", i)\n        print \"%.3fs MEM: + %sKB\" % (time.time() - s, (meminfo()[0] - mem_s) / 1024)  # 0.082s MEM: + 6800KB\n        print site.peers.values()[0].piecefields\n\n\n    def testUpdatePiecefield(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        server1 = file_server\n        server1.sites[site.address] = site\n        server2 = FileServer(\"127.0.0.1\", 1545)\n        server2.sites[site_temp.address] = site_temp\n        site_temp.connection_server = server2\n\n        # Add file_server as peer to client\n        server2_peer1 = site_temp.addPeer(\"127.0.0.1\", 1544)\n\n        # Testing piecefield sync\n        assert len(server2_peer1.piecefields) == 0\n        assert server2_peer1.updatePiecefields()  # Query piecefields from peer\n        assert len(server2_peer1.piecefields) > 0\n\n    def testWorkerManagerPiecefieldDeny(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        server1 = file_server\n        server1.sites[site.address] = site\n        server2 = FileServer(\"127.0.0.1\", 1545)\n        server2.sites[site_temp.address] = site_temp\n        site_temp.connection_server = server2\n\n        # Add file_server as peer to client\n        server2_peer1 = site_temp.addPeer(\"127.0.0.1\", 1544)  # Working\n\n        site_temp.downloadContent(\"content.json\", download_files=False)\n        site_temp.needFile(\"data/optional.any.iso.piecemap.msgpack\")\n\n        # Add fake peers with optional files downloaded\n        for i in range(5):\n            fake_peer = site_temp.addPeer(\"127.0.1.%s\" % i, 1544)\n            fake_peer.hashfield = site.content_manager.hashfield\n            fake_peer.has_hashfield = True\n\n        with Spy.Spy(WorkerManager, \"addWorker\") as requests:\n            site_temp.needFile(\"%s|%s-%s\" % (inner_path, 5 * 1024 * 1024, 6 * 1024 * 1024))\n            site_temp.needFile(\"%s|%s-%s\" % (inner_path, 6 * 1024 * 1024, 7 * 1024 * 1024))\n\n        # It should only request parts from peer1 as the other peers does not have the requested parts in piecefields\n        assert len([request[1] for request in requests if request[1] != server2_peer1]) == 0\n\n\n    def testWorkerManagerPiecefieldDownload(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        server1 = file_server\n        server1.sites[site.address] = site\n        server2 = FileServer(\"127.0.0.1\", 1545)\n        server2.sites[site_temp.address] = site_temp\n        site_temp.connection_server = server2\n        sha512 = site.content_manager.getFileInfo(inner_path)[\"sha512\"]\n\n        # Create 10 fake peer for each piece\n        for i in range(10):\n            peer = Peer(\"127.0.0.1\", 1544, site_temp, server2)\n            peer.piecefields[sha512][i] = \"1\"\n            peer.updateHashfield = mock.MagicMock(return_value=False)\n            peer.updatePiecefields = mock.MagicMock(return_value=False)\n            peer.findHashIds = mock.MagicMock(return_value={\"nope\": []})\n            peer.hashfield = site.content_manager.hashfield\n            peer.has_hashfield = True\n            peer.key = \"Peer:%s\" % i\n            site_temp.peers[\"Peer:%s\" % i] = peer\n\n        site_temp.downloadContent(\"content.json\", download_files=False)\n        site_temp.needFile(\"data/optional.any.iso.piecemap.msgpack\")\n\n        with Spy.Spy(Peer, \"getFile\") as requests:\n            for i in range(10):\n                site_temp.needFile(\"%s|%s-%s\" % (inner_path, i * 1024 * 1024, (i + 1) * 1024 * 1024))\n\n        assert len(requests) == 10\n        for i in range(10):\n            assert requests[i][0] == site_temp.peers[\"Peer:%s\" % i]  # Every part should be requested from piece owner peer\n\n    def testDownloadStats(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        # Init source server\n        site.connection_server = file_server\n        file_server.sites[site.address] = site\n\n        # Init client server\n        client = ConnectionServer(\"127.0.0.1\", 1545)\n        site_temp.connection_server = client\n        site_temp.addPeer(\"127.0.0.1\", 1544)\n\n        # Download site\n        site_temp.download(blind_includes=True).join(timeout=5)\n\n        # Open virtual file\n        assert not site_temp.storage.isFile(inner_path)\n\n        # Check size before downloads\n        assert site_temp.settings[\"size\"] < 10 * 1024 * 1024\n        assert site_temp.settings[\"optional_downloaded\"] == 0\n        size_piecemap = site_temp.content_manager.getFileInfo(inner_path + \".piecemap.msgpack\")[\"size\"]\n        size_bigfile = site_temp.content_manager.getFileInfo(inner_path)[\"size\"]\n\n        with site_temp.storage.openBigfile(inner_path) as f:\n            assert not \"\\0\" in f.read(1024)\n            assert site_temp.settings[\"optional_downloaded\"] == size_piecemap + size_bigfile\n\n        with site_temp.storage.openBigfile(inner_path) as f:\n            # Don't count twice\n            assert not \"\\0\" in f.read(1024)\n            assert site_temp.settings[\"optional_downloaded\"] == size_piecemap + size_bigfile\n\n            # Add second block\n            assert not \"\\0\" in f.read(1024 * 1024)\n            assert site_temp.settings[\"optional_downloaded\"] == size_piecemap + size_bigfile\n\n\n    def testPrebuffer(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        # Init source server\n        site.connection_server = file_server\n        file_server.sites[site.address] = site\n\n        # Init client server\n        client = ConnectionServer(\"127.0.0.1\", 1545)\n        site_temp.connection_server = client\n        site_temp.addPeer(\"127.0.0.1\", 1544)\n\n        # Download site\n        site_temp.download(blind_includes=True).join(timeout=5)\n\n        # Open virtual file\n        assert not site_temp.storage.isFile(inner_path)\n\n        with site_temp.storage.openBigfile(inner_path, prebuffer=1024 * 1024 * 2) as f:\n            with Spy.Spy(FileRequest, \"route\") as requests:\n                f.seek(5 * 1024 * 1024)\n                assert f.read(7) == \"Test524\"\n            # assert len(requests) == 3  # 1x piecemap + 1x getpiecefield + 1x for pieces\n            assert len([task for task in site_temp.worker_manager.tasks if task[\"inner_path\"].startswith(inner_path)]) == 2\n\n            time.sleep(0.5)  # Wait prebuffer download\n\n            sha512 = site.content_manager.getFileInfo(inner_path)[\"sha512\"]\n            assert site_temp.storage.piecefields[sha512].tostring() == \"0000011100\"\n\n            # No prebuffer beyond end of the file\n            f.seek(9 * 1024 * 1024)\n            assert \"\\0\" not in f.read(7)\n\n            assert len([task for task in site_temp.worker_manager.tasks if task[\"inner_path\"].startswith(inner_path)]) == 0\n\n    def testDownloadAllPieces(self, file_server, site, site_temp):\n        inner_path = self.createBigfile(site)\n\n        # Init source server\n        site.connection_server = file_server\n        file_server.sites[site.address] = site\n\n        # Init client server\n        client = ConnectionServer(\"127.0.0.1\", 1545)\n        site_temp.connection_server = client\n        site_temp.addPeer(\"127.0.0.1\", 1544)\n\n        # Download site\n        site_temp.download(blind_includes=True).join(timeout=5)\n\n        # Open virtual file\n        assert not site_temp.storage.isFile(inner_path)\n\n        with Spy.Spy(FileRequest, \"route\") as requests:\n            site_temp.needFile(\"%s|all\" % inner_path)\n\n        assert len(requests) == 12  # piecemap.msgpack, getPiecefields, 10 x piece\n\n        # Don't re-download already got pieces\n        with Spy.Spy(FileRequest, \"route\") as requests:\n            site_temp.needFile(\"%s|all\" % inner_path)\n\n        assert len(requests) == 0\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "TestBigfile.py", "id": "c59d06cdf0bededd06cc6a756021f858", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/Bigfile/Test/TestBigfile.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}