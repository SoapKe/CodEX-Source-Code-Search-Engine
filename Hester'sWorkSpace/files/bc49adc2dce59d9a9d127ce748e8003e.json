{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import float_or_none\n\n\nclass AudioBoomIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?audioboom\\.com/(?:boos|posts)/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'https://audioboom.com/boos/4279833-3-09-2016-czaban-hour-3?t=0',\n        'md5': '63a8d73a055c6ed0f1e51921a10a5a76',\n        'info_dict': {\n            'id': '4279833',\n            'ext': 'mp3',\n            'title': '3/09/2016 Czaban Hour 3',\n            'description': 'Guest:   Nate Davis - NFL free agency,   Guest:   Stan Gans',\n            'duration': 2245.72,\n            'uploader': 'SB Nation A.M.',\n            'uploader_url': r're:https?://(?:www\\.)?audioboom\\.com/channel/steveczabanyahoosportsradio',\n        }\n    }, {\n        'url': 'https://audioboom.com/posts/4279833-3-09-2016-czaban-hour-3?t=0',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        clip = None\n\n        clip_store = self._parse_json(\n            self._search_regex(\n                r'data-new-clip-store=([\"\\'])(?P<json>{.*?\"clipId\"\\s*:\\s*%s.*?})\\1' % video_id,\n                webpage, 'clip store', default='{}', group='json'),\n            video_id, fatal=False)\n        if clip_store:\n            clips = clip_store.get('clips')\n            if clips and isinstance(clips, list) and isinstance(clips[0], dict):\n                clip = clips[0]\n\n        def from_clip(field):\n            if clip:\n                return clip.get(field)\n\n        audio_url = from_clip('clipURLPriorToLoading') or self._og_search_property(\n            'audio', webpage, 'audio url')\n        title = from_clip('title') or self._og_search_title(webpage)\n        description = from_clip('description') or self._og_search_description(webpage)\n\n        duration = float_or_none(from_clip('duration') or self._html_search_meta(\n            'weibo:audio:duration', webpage))\n\n        uploader = from_clip('author') or self._og_search_property(\n            'audio:artist', webpage, 'uploader', fatal=False)\n        uploader_url = from_clip('author_url') or self._html_search_meta(\n            'audioboo:channel', webpage, 'uploader url')\n\n        return {\n            'id': video_id,\n            'url': audio_url,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'uploader': uploader,\n            'uploader_url': uploader_url,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import float_or_none\n\n\nclass AudioBoomIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?audioboom\\.com/(?:boos|posts)/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'https://audioboom.com/boos/4279833-3-09-2016-czaban-hour-3?t=0',\n        'md5': '63a8d73a055c6ed0f1e51921a10a5a76',\n        'info_dict': {\n            'id': '4279833',\n            'ext': 'mp3',\n            'title': '3/09/2016 Czaban Hour 3',\n            'description': 'Guest:   Nate Davis - NFL free agency,   Guest:   Stan Gans',\n            'duration': 2245.72,\n            'uploader': 'SB Nation A.M.',\n            'uploader_url': r're:https?://(?:www\\.)?audioboom\\.com/channel/steveczabanyahoosportsradio',\n        }\n    }, {\n        'url': 'https://audioboom.com/posts/4279833-3-09-2016-czaban-hour-3?t=0',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        clip = None\n\n        clip_store = self._parse_json(\n            self._search_regex(\n                r'data-new-clip-store=([\"\\'])(?P<json>{.*?\"clipId\"\\s*:\\s*%s.*?})\\1' % video_id,\n                webpage, 'clip store', default='{}', group='json'),\n            video_id, fatal=False)\n        if clip_store:\n            clips = clip_store.get('clips')\n            if clips and isinstance(clips, list) and isinstance(clips[0], dict):\n                clip = clips[0]\n\n        def from_clip(field):\n            if clip:\n                return clip.get(field)\n\n        audio_url = from_clip('clipURLPriorToLoading') or self._og_search_property(\n            'audio', webpage, 'audio url')\n        title = from_clip('title') or self._og_search_title(webpage)\n        description = from_clip('description') or self._og_search_description(webpage)\n\n        duration = float_or_none(from_clip('duration') or self._html_search_meta(\n            'weibo:audio:duration', webpage))\n\n        uploader = from_clip('author') or self._og_search_property(\n            'audio:artist', webpage, 'uploader', fatal=False)\n        uploader_url = from_clip('author_url') or self._html_search_meta(\n            'audioboo:channel', webpage, 'uploader url')\n\n        return {\n            'id': video_id,\n            'url': audio_url,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'uploader': uploader,\n            'uploader_url': uploader_url,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "audioboom.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/audioboom.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}