{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_iso8601,\n    unescapeHTML,\n)\n\n\nclass PeriscopeBaseIE(InfoExtractor):\n    def _call_api(self, method, query, item_id):\n        return self._download_json(\n            'https://api.periscope.tv/api/v2/%s' % method,\n            item_id, query=query)\n\n\nclass PeriscopeIE(PeriscopeBaseIE):\n    IE_DESC = 'Periscope'\n    IE_NAME = 'periscope'\n    _VALID_URL = r'https?://(?:www\\.)?(?:periscope|pscp)\\.tv/[^/]+/(?P<id>[^/?\n    \n    _TESTS = [{\n        'url': 'https://www.periscope.tv/w/aJUQnjY3MjA3ODF8NTYxMDIyMDl2zCg2pECBgwTqRpQuQD352EMPTKQjT4uqlM3cgWFA-g==',\n        'md5': '65b57957972e503fcbbaeed8f4fa04ca',\n        'info_dict': {\n            'id': '56102209',\n            'ext': 'mp4',\n            'title': 'Bec Boop - \ud83d\udea0\u2708\ufe0f\ud83c\uddec\ud83c\udde7 Fly above \n            'timestamp': 1438978559,\n            'upload_date': '20150807',\n            'uploader': 'Bec Boop',\n            'uploader_id': '1465763',\n        },\n        'skip': 'Expires in 24 hours',\n    }, {\n        'url': 'https://www.periscope.tv/w/1ZkKzPbMVggJv',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.periscope.tv/bastaakanoggano/1OdKrlkZZjOJX',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.periscope.tv/w/1ZkKzPbMVggJv',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_url(webpage):\n        mobj = re.search(\n            r'<iframe[^>]+src=([\\'\"])(?P<url>(?:https?:)?//(?:www\\.)?(?:periscope|pscp)\\.tv/(?:(?!\\1).)+)\\1', webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        token = self._match_id(url)\n\n        stream = self._call_api(\n            'accessVideoPublic', {'broadcast_id': token}, token)\n\n        broadcast = stream['broadcast']\n        title = broadcast['status']\n\n        uploader = broadcast.get('user_display_name') or broadcast.get('username')\n        uploader_id = (broadcast.get('user_id') or broadcast.get('username'))\n\n        title = '%s - %s' % (uploader, title) if uploader else title\n        state = broadcast.get('state').lower()\n        if state == 'running':\n            title = self._live_title(title)\n        timestamp = parse_iso8601(broadcast.get('created_at'))\n\n        thumbnails = [{\n            'url': broadcast[image],\n        } for image in ('image_url', 'image_url_small') if broadcast.get(image)]\n\n        video_urls = set()\n        formats = []\n        for format_id in ('replay', 'rtmp', 'hls', 'https_hls', 'lhls', 'lhlsweb'):\n            video_url = stream.get(format_id + '_url')\n            if not video_url or video_url in video_urls:\n                continue\n            video_urls.add(video_url)\n            if format_id != 'rtmp':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, token, 'mp4',\n                    entry_protocol='m3u8_native'\n                    if state in ('ended', 'timed_out') else 'm3u8',\n                    m3u8_id=format_id, fatal=False))\n                continue\n            formats.append({\n                'url': video_url,\n                'ext': 'flv' if format_id == 'rtmp' else 'mp4',\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': broadcast.get('id') or token,\n            'title': title,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n\n\nclass PeriscopeUserIE(PeriscopeBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?(?:periscope|pscp)\\.tv/(?P<id>[^/]+)/?$'\n    IE_DESC = 'Periscope user videos'\n    IE_NAME = 'periscope:user'\n\n    _TEST = {\n        'url': 'https://www.periscope.tv/LularoeHusbandMike/',\n        'info_dict': {\n            'id': 'LularoeHusbandMike',\n            'title': 'LULAROE HUSBAND MIKE',\n            'description': 'md5:6cf4ec8047768098da58e446e82c82f0',\n        },\n        \n        \n        'playlist_mincount': 0,\n    }\n\n    def _real_extract(self, url):\n        user_name = self._match_id(url)\n\n        webpage = self._download_webpage(url, user_name)\n\n        data_store = self._parse_json(\n            unescapeHTML(self._search_regex(\n                r'data-store=([\"\\'])(?P<data>.+?)\\1',\n                webpage, 'data store', default='{}', group='data')),\n            user_name)\n\n        user = list(data_store['UserCache']['users'].values())[0]['user']\n        user_id = user['id']\n        session_id = data_store['SessionToken']['public']['broadcastHistory']['token']['session_id']\n\n        broadcasts = self._call_api(\n            'getUserBroadcastsPublic',\n            {'user_id': user_id, 'session_id': session_id},\n            user_name)['broadcasts']\n\n        broadcast_ids = [\n            broadcast['id'] for broadcast in broadcasts if broadcast.get('id')]\n\n        title = user.get('display_name') or user.get('username') or user_name\n        description = user.get('description')\n\n        entries = [\n            self.url_result(\n                'https://www.periscope.tv/%s/%s' % (user_name, broadcast_id))\n            for broadcast_id in broadcast_ids]\n\n        return self.playlist_result(entries, user_id, title, description)\n", "comments": "# coding: utf-8\n#]+)'\n# Alive example URLs can be found here http://onperiscope.com/\n#London in Emirates Air Line cable car at night \ud83c\uddec\ud83c\udde7\u2708\ufe0f\ud83d\udea0 #BoopScope \ud83c\udf80\ud83d\udc97',\n# Periscope only shows videos in the last 24 hours, so it's possible to\n# get 0 videos\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_iso8601,\n    unescapeHTML,\n)\n\n\nclass PeriscopeBaseIE(InfoExtractor):\n    def _call_api(self, method, query, item_id):\n        return self._download_json(\n            'https://api.periscope.tv/api/v2/%s' % method,\n            item_id, query=query)\n\n\nclass PeriscopeIE(PeriscopeBaseIE):\n    IE_DESC = 'Periscope'\n    IE_NAME = 'periscope'\n    _VALID_URL = r'https?://(?:www\\.)?(?:periscope|pscp)\\.tv/[^/]+/(?P<id>[^/?#]+)'\n    # Alive example URLs can be found here http://onperiscope.com/\n    _TESTS = [{\n        'url': 'https://www.periscope.tv/w/aJUQnjY3MjA3ODF8NTYxMDIyMDl2zCg2pECBgwTqRpQuQD352EMPTKQjT4uqlM3cgWFA-g==',\n        'md5': '65b57957972e503fcbbaeed8f4fa04ca',\n        'info_dict': {\n            'id': '56102209',\n            'ext': 'mp4',\n            'title': 'Bec Boop - \ud83d\udea0\u2708\ufe0f\ud83c\uddec\ud83c\udde7 Fly above #London in Emirates Air Line cable car at night \ud83c\uddec\ud83c\udde7\u2708\ufe0f\ud83d\udea0 #BoopScope \ud83c\udf80\ud83d\udc97',\n            'timestamp': 1438978559,\n            'upload_date': '20150807',\n            'uploader': 'Bec Boop',\n            'uploader_id': '1465763',\n        },\n        'skip': 'Expires in 24 hours',\n    }, {\n        'url': 'https://www.periscope.tv/w/1ZkKzPbMVggJv',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.periscope.tv/bastaakanoggano/1OdKrlkZZjOJX',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.periscope.tv/w/1ZkKzPbMVggJv',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_url(webpage):\n        mobj = re.search(\n            r'<iframe[^>]+src=([\\'\"])(?P<url>(?:https?:)?//(?:www\\.)?(?:periscope|pscp)\\.tv/(?:(?!\\1).)+)\\1', webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        token = self._match_id(url)\n\n        stream = self._call_api(\n            'accessVideoPublic', {'broadcast_id': token}, token)\n\n        broadcast = stream['broadcast']\n        title = broadcast['status']\n\n        uploader = broadcast.get('user_display_name') or broadcast.get('username')\n        uploader_id = (broadcast.get('user_id') or broadcast.get('username'))\n\n        title = '%s - %s' % (uploader, title) if uploader else title\n        state = broadcast.get('state').lower()\n        if state == 'running':\n            title = self._live_title(title)\n        timestamp = parse_iso8601(broadcast.get('created_at'))\n\n        thumbnails = [{\n            'url': broadcast[image],\n        } for image in ('image_url', 'image_url_small') if broadcast.get(image)]\n\n        video_urls = set()\n        formats = []\n        for format_id in ('replay', 'rtmp', 'hls', 'https_hls', 'lhls', 'lhlsweb'):\n            video_url = stream.get(format_id + '_url')\n            if not video_url or video_url in video_urls:\n                continue\n            video_urls.add(video_url)\n            if format_id != 'rtmp':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, token, 'mp4',\n                    entry_protocol='m3u8_native'\n                    if state in ('ended', 'timed_out') else 'm3u8',\n                    m3u8_id=format_id, fatal=False))\n                continue\n            formats.append({\n                'url': video_url,\n                'ext': 'flv' if format_id == 'rtmp' else 'mp4',\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': broadcast.get('id') or token,\n            'title': title,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n\n\nclass PeriscopeUserIE(PeriscopeBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?(?:periscope|pscp)\\.tv/(?P<id>[^/]+)/?$'\n    IE_DESC = 'Periscope user videos'\n    IE_NAME = 'periscope:user'\n\n    _TEST = {\n        'url': 'https://www.periscope.tv/LularoeHusbandMike/',\n        'info_dict': {\n            'id': 'LularoeHusbandMike',\n            'title': 'LULAROE HUSBAND MIKE',\n            'description': 'md5:6cf4ec8047768098da58e446e82c82f0',\n        },\n        # Periscope only shows videos in the last 24 hours, so it's possible to\n        # get 0 videos\n        'playlist_mincount': 0,\n    }\n\n    def _real_extract(self, url):\n        user_name = self._match_id(url)\n\n        webpage = self._download_webpage(url, user_name)\n\n        data_store = self._parse_json(\n            unescapeHTML(self._search_regex(\n                r'data-store=([\"\\'])(?P<data>.+?)\\1',\n                webpage, 'data store', default='{}', group='data')),\n            user_name)\n\n        user = list(data_store['UserCache']['users'].values())[0]['user']\n        user_id = user['id']\n        session_id = data_store['SessionToken']['public']['broadcastHistory']['token']['session_id']\n\n        broadcasts = self._call_api(\n            'getUserBroadcastsPublic',\n            {'user_id': user_id, 'session_id': session_id},\n            user_name)['broadcasts']\n\n        broadcast_ids = [\n            broadcast['id'] for broadcast in broadcasts if broadcast.get('id')]\n\n        title = user.get('display_name') or user.get('username') or user_name\n        description = user.get('description')\n\n        entries = [\n            self.url_result(\n                'https://www.periscope.tv/%s/%s' % (user_name, broadcast_id))\n            for broadcast_id in broadcast_ids]\n\n        return self.playlist_result(entries, user_id, title, description)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "periscope.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/periscope.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}