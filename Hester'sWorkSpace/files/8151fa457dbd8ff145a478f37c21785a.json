{"author": "benoitc", "code": "import datetime\n\nfrom gunicorn.config import Config\nfrom gunicorn.glogging import Logger\n\nfrom support import SimpleNamespace\n\n\ndef test_atoms_defaults():\n    response = SimpleNamespace(\n        status='200', response_length=1024,\n        headers=(('Content-Type', 'application/json'),), sent=1024,\n    )\n    request = SimpleNamespace(headers=(('Accept', 'application/json'),))\n    environ = {\n        'REQUEST_METHOD': 'GET', 'RAW_URI': '/my/path?foo=bar',\n        'PATH_INFO': '/my/path', 'QUERY_STRING': 'foo=bar',\n        'SERVER_PROTOCOL': 'HTTP/1.1',\n    }\n    logger = Logger(Config())\n    atoms = logger.atoms(response, request, environ, datetime.timedelta(seconds=1))\n    assert isinstance(atoms, dict)\n    assert atoms['r'] == 'GET /my/path?foo=bar HTTP/1.1'\n    assert atoms['m'] == 'GET'\n    assert atoms['U'] == '/my/path'\n    assert atoms['q'] == 'foo=bar'\n    assert atoms['H'] == 'HTTP/1.1'\n    assert atoms['b'] == '1024'\n    assert atoms['B'] == 1024\n    assert atoms['{accept}i'] == 'application/json'\n    assert atoms['{content-type}o'] == 'application/json'\n\n\ndef test_get_username_from_basic_auth_header():\n    request = SimpleNamespace(headers=())\n    response = SimpleNamespace(\n        status='200', response_length=1024, sent=1024,\n        headers=(('Content-Type', 'text/plain'),),\n    )\n    environ = {\n        'REQUEST_METHOD': 'GET', 'RAW_URI': '/my/path?foo=bar',\n        'PATH_INFO': '/my/path', 'QUERY_STRING': 'foo=bar',\n        'SERVER_PROTOCOL': 'HTTP/1.1',\n        'HTTP_AUTHORIZATION': 'Basic YnJrMHY6',\n    }\n    logger = Logger(Config())\n    atoms = logger.atoms(response, request, environ, datetime.timedelta(seconds=1))\n    assert atoms['u'] == 'brk0v'\n\n\ndef test_get_username_handles_malformed_basic_auth_header():\n    \n    request = SimpleNamespace(headers=())\n    response = SimpleNamespace(\n        status='200', response_length=1024, sent=1024,\n        headers=(('Content-Type', 'text/plain'),),\n    )\n    environ = {\n        'REQUEST_METHOD': 'GET', 'RAW_URI': '/my/path?foo=bar',\n        'PATH_INFO': '/my/path', 'QUERY_STRING': 'foo=bar',\n        'SERVER_PROTOCOL': 'HTTP/1.1',\n        'HTTP_AUTHORIZATION': 'Basic ixsTtkKzIpVTncfQjbBcnoRNoDfbnaXG',\n    }\n    logger = Logger(Config())\n\n    atoms = logger.atoms(response, request, environ, datetime.timedelta(seconds=1))\n    assert atoms['u'] == '-'\n", "comments": "   should catch malformed auth header    ", "content": "import datetime\n\nfrom gunicorn.config import Config\nfrom gunicorn.glogging import Logger\n\nfrom support import SimpleNamespace\n\n\ndef test_atoms_defaults():\n    response = SimpleNamespace(\n        status='200', response_length=1024,\n        headers=(('Content-Type', 'application/json'),), sent=1024,\n    )\n    request = SimpleNamespace(headers=(('Accept', 'application/json'),))\n    environ = {\n        'REQUEST_METHOD': 'GET', 'RAW_URI': '/my/path?foo=bar',\n        'PATH_INFO': '/my/path', 'QUERY_STRING': 'foo=bar',\n        'SERVER_PROTOCOL': 'HTTP/1.1',\n    }\n    logger = Logger(Config())\n    atoms = logger.atoms(response, request, environ, datetime.timedelta(seconds=1))\n    assert isinstance(atoms, dict)\n    assert atoms['r'] == 'GET /my/path?foo=bar HTTP/1.1'\n    assert atoms['m'] == 'GET'\n    assert atoms['U'] == '/my/path'\n    assert atoms['q'] == 'foo=bar'\n    assert atoms['H'] == 'HTTP/1.1'\n    assert atoms['b'] == '1024'\n    assert atoms['B'] == 1024\n    assert atoms['{accept}i'] == 'application/json'\n    assert atoms['{content-type}o'] == 'application/json'\n\n\ndef test_get_username_from_basic_auth_header():\n    request = SimpleNamespace(headers=())\n    response = SimpleNamespace(\n        status='200', response_length=1024, sent=1024,\n        headers=(('Content-Type', 'text/plain'),),\n    )\n    environ = {\n        'REQUEST_METHOD': 'GET', 'RAW_URI': '/my/path?foo=bar',\n        'PATH_INFO': '/my/path', 'QUERY_STRING': 'foo=bar',\n        'SERVER_PROTOCOL': 'HTTP/1.1',\n        'HTTP_AUTHORIZATION': 'Basic YnJrMHY6',\n    }\n    logger = Logger(Config())\n    atoms = logger.atoms(response, request, environ, datetime.timedelta(seconds=1))\n    assert atoms['u'] == 'brk0v'\n\n\ndef test_get_username_handles_malformed_basic_auth_header():\n    \"\"\"Should catch a malformed auth header\"\"\"\n    request = SimpleNamespace(headers=())\n    response = SimpleNamespace(\n        status='200', response_length=1024, sent=1024,\n        headers=(('Content-Type', 'text/plain'),),\n    )\n    environ = {\n        'REQUEST_METHOD': 'GET', 'RAW_URI': '/my/path?foo=bar',\n        'PATH_INFO': '/my/path', 'QUERY_STRING': 'foo=bar',\n        'SERVER_PROTOCOL': 'HTTP/1.1',\n        'HTTP_AUTHORIZATION': 'Basic ixsTtkKzIpVTncfQjbBcnoRNoDfbnaXG',\n    }\n    logger = Logger(Config())\n\n    atoms = logger.atoms(response, request, environ, datetime.timedelta(seconds=1))\n    assert atoms['u'] == '-'\n", "description": "gunicorn 'Green Unicorn' is a WSGI HTTP Server for UNIX, fast clients and sleepy applications.", "file_name": "test_logger.py", "id": "8151fa457dbd8ff145a478f37c21785a", "language": "Python", "project_name": "gunicorn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/benoitc-gunicorn/benoitc-gunicorn-d1f5268/tests/test_logger.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:27:00Z", "url": "https://github.com/benoitc/gunicorn", "wiki": true}