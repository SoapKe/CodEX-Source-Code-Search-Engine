{"author": "sympy", "code": "from sympy import symbols, Symbol, exp, log, pi, Rational, S\nfrom sympy.codegen.cfunctions import (\n    expm1, log1p, exp2, log2, fma, log10, Sqrt, Cbrt, hypot\n)\nfrom sympy.core.function import expand_log\n\n\ndef test_expm1():\n    \n    assert expm1(0) == 0\n\n    x = Symbol('x', real=True, finite=True)\n\n    \n    assert expm1(x).expand(func=True) - exp(x) == -1\n    assert expm1(x).rewrite('tractable') - exp(x) == -1\n    assert expm1(x).rewrite('exp') - exp(x) == -1\n\n    \n    assert not ((exp(1e-10).evalf() - 1) - 1e-10 - 5e-21) < 1e-22  \n    assert abs(expm1(1e-10).evalf() - 1e-10 - 5e-21) < 1e-22\n\n    \n    assert expm1(x).is_real\n    assert expm1(x).is_finite\n\n    \n    assert expm1(42*x).diff(x) - 42*exp(42*x) == 0\n    assert expm1(42*x).diff(x) - expm1(42*x).expand(func=True).diff(x) == 0\n\n\ndef test_log1p():\n    \n    assert log1p(0) == 0\n    d = S(10)\n    assert expand_log(log1p(d**-1000) - log(d**1000 + 1) + log(d**1000)) == 0\n\n    x = Symbol('x', real=True, finite=True)\n\n    \n    assert log1p(x).expand(func=True) - log(x + 1) == 0\n    assert log1p(x).rewrite('tractable') - log(x + 1) == 0\n    assert log1p(x).rewrite('log') - log(x + 1) == 0\n\n    \n    assert not abs(log(1e-99 + 1).evalf() - 1e-99) < 1e-100  \n    assert abs(expand_log(log1p(1e-99)).evalf() - 1e-99) < 1e-100\n\n    \n    assert log1p(-2**(-S(1)/2)).is_real\n\n    assert not log1p(-1).is_finite\n    assert log1p(pi).is_finite\n\n    assert not log1p(x).is_positive\n    assert log1p(Symbol('y', positive=True)).is_positive\n\n    assert not log1p(x).is_zero\n    assert log1p(Symbol('z', zero=True)).is_zero\n\n    assert not log1p(x).is_nonnegative\n    assert log1p(Symbol('o', nonnegative=True)).is_nonnegative\n\n    \n    assert log1p(42*x).diff(x) - 42/(42*x + 1) == 0\n    assert log1p(42*x).diff(x) - log1p(42*x).expand(func=True).diff(x) == 0\n\n\ndef test_exp2():\n    \n    assert exp2(2) == 4\n\n    x = Symbol('x', real=True, finite=True)\n\n    \n    assert exp2(x).expand(func=True) - 2**x == 0\n\n    \n    assert exp2(42*x).diff(x) - 42*exp2(42*x)*log(2) == 0\n    assert exp2(42*x).diff(x) - exp2(42*x).diff(x) == 0\n\n\ndef test_log2():\n    \n    assert log2(8) == 3\n    assert log2(pi) != log(pi)/log(2)  # log2 should *save* (CPU) instructions\n\n    x = Symbol('x', real=True, finite=True)\n    assert log2(x) != log(x)/log(2)\n    assert log2(2**x) == x\n\n    \n    assert log2(x).expand(func=True) - log(x)/log(2) == 0\n\n    \n    assert log2(42*x).diff() - 1/(log(2)*x) == 0\n    assert log2(42*x).diff() - log2(42*x).expand(func=True).diff(x) == 0\n\n\ndef test_fma():\n    x, y, z = symbols('x y z')\n\n    \n    assert fma(x, y, z).expand(func=True) - x*y - z == 0\n\n    expr = fma(17*x, 42*y, 101*z)\n\n    \n    assert expr.diff(x) - expr.expand(func=True).diff(x) == 0\n    assert expr.diff(y) - expr.expand(func=True).diff(y) == 0\n    assert expr.diff(z) - expr.expand(func=True).diff(z) == 0\n\n    assert expr.diff(x) - 17*42*y == 0\n    assert expr.diff(y) - 17*42*x == 0\n    assert expr.diff(z) - 101 == 0\n\n\ndef test_log10():\n    x = Symbol('x')\n\n    \n    assert log10(x).expand(func=True) - log(x)/log(10) == 0\n\n    \n    assert log10(42*x).diff(x) - 1/(log(10)*x) == 0\n    assert log10(42*x).diff(x) - log10(42*x).expand(func=True).diff(x) == 0\n\n\ndef test_Cbrt():\n    x = Symbol('x')\n\n    \n    assert Cbrt(x).expand(func=True) - x**Rational(1, 3) == 0\n\n    \n    assert Cbrt(42*x).diff(x) - 42*(42*x)**(Rational(1, 3) - 1)/3 == 0\n    assert Cbrt(42*x).diff(x) - Cbrt(42*x).expand(func=True).diff(x) == 0\n\n\ndef test_Sqrt():\n    x = Symbol('x')\n\n    \n    assert Sqrt(x).expand(func=True) - x**Rational(1, 2) == 0\n\n    \n    assert Sqrt(42*x).diff(x) - 42*(42*x)**(Rational(1, 2) - 1)/2 == 0\n    assert Sqrt(42*x).diff(x) - Sqrt(42*x).expand(func=True).diff(x) == 0\n\n\ndef test_hypot():\n    x, y = symbols('x y')\n\n    \n    assert hypot(x, y).expand(func=True) - (x**2 + y**2)**Rational(1, 2) == 0\n\n    \n    assert hypot(17*x, 42*y).diff(x).expand(func=True) - hypot(17*x, 42*y).expand(func=True).diff(x) == 0\n    assert hypot(17*x, 42*y).diff(y).expand(func=True) - hypot(17*x, 42*y).expand(func=True).diff(y) == 0\n\n    assert hypot(17*x, 42*y).diff(x).expand(func=True) - 2*17*17*x*((17*x)**2 + (42*y)**2)**Rational(-1, 2)/2 == 0\n    assert hypot(17*x, 42*y).diff(y).expand(func=True) - 2*42*42*y*((17*x)**2 + (42*y)**2)**Rational(-1, 2)/2 == 0\n", "comments": "  eval    expand rewrite    precision    comparison    properties    diff    eval    expand rewrite    precision    comparison    properties    diff    eval    expand    diff    eval    log2  save  (cpu) instructions    expand    diff    expand    diff    expand    diff    expand    diff    expand    diff    expand    diff ", "content": "from sympy import symbols, Symbol, exp, log, pi, Rational, S\nfrom sympy.codegen.cfunctions import (\n    expm1, log1p, exp2, log2, fma, log10, Sqrt, Cbrt, hypot\n)\nfrom sympy.core.function import expand_log\n\n\ndef test_expm1():\n    # Eval\n    assert expm1(0) == 0\n\n    x = Symbol('x', real=True, finite=True)\n\n    # Expand and rewrite\n    assert expm1(x).expand(func=True) - exp(x) == -1\n    assert expm1(x).rewrite('tractable') - exp(x) == -1\n    assert expm1(x).rewrite('exp') - exp(x) == -1\n\n    # Precision\n    assert not ((exp(1e-10).evalf() - 1) - 1e-10 - 5e-21) < 1e-22  # for comparison\n    assert abs(expm1(1e-10).evalf() - 1e-10 - 5e-21) < 1e-22\n\n    # Properties\n    assert expm1(x).is_real\n    assert expm1(x).is_finite\n\n    # Diff\n    assert expm1(42*x).diff(x) - 42*exp(42*x) == 0\n    assert expm1(42*x).diff(x) - expm1(42*x).expand(func=True).diff(x) == 0\n\n\ndef test_log1p():\n    # Eval\n    assert log1p(0) == 0\n    d = S(10)\n    assert expand_log(log1p(d**-1000) - log(d**1000 + 1) + log(d**1000)) == 0\n\n    x = Symbol('x', real=True, finite=True)\n\n    # Expand and rewrite\n    assert log1p(x).expand(func=True) - log(x + 1) == 0\n    assert log1p(x).rewrite('tractable') - log(x + 1) == 0\n    assert log1p(x).rewrite('log') - log(x + 1) == 0\n\n    # Precision\n    assert not abs(log(1e-99 + 1).evalf() - 1e-99) < 1e-100  # for comparison\n    assert abs(expand_log(log1p(1e-99)).evalf() - 1e-99) < 1e-100\n\n    # Properties\n    assert log1p(-2**(-S(1)/2)).is_real\n\n    assert not log1p(-1).is_finite\n    assert log1p(pi).is_finite\n\n    assert not log1p(x).is_positive\n    assert log1p(Symbol('y', positive=True)).is_positive\n\n    assert not log1p(x).is_zero\n    assert log1p(Symbol('z', zero=True)).is_zero\n\n    assert not log1p(x).is_nonnegative\n    assert log1p(Symbol('o', nonnegative=True)).is_nonnegative\n\n    # Diff\n    assert log1p(42*x).diff(x) - 42/(42*x + 1) == 0\n    assert log1p(42*x).diff(x) - log1p(42*x).expand(func=True).diff(x) == 0\n\n\ndef test_exp2():\n    # Eval\n    assert exp2(2) == 4\n\n    x = Symbol('x', real=True, finite=True)\n\n    # Expand\n    assert exp2(x).expand(func=True) - 2**x == 0\n\n    # Diff\n    assert exp2(42*x).diff(x) - 42*exp2(42*x)*log(2) == 0\n    assert exp2(42*x).diff(x) - exp2(42*x).diff(x) == 0\n\n\ndef test_log2():\n    # Eval\n    assert log2(8) == 3\n    assert log2(pi) != log(pi)/log(2)  # log2 should *save* (CPU) instructions\n\n    x = Symbol('x', real=True, finite=True)\n    assert log2(x) != log(x)/log(2)\n    assert log2(2**x) == x\n\n    # Expand\n    assert log2(x).expand(func=True) - log(x)/log(2) == 0\n\n    # Diff\n    assert log2(42*x).diff() - 1/(log(2)*x) == 0\n    assert log2(42*x).diff() - log2(42*x).expand(func=True).diff(x) == 0\n\n\ndef test_fma():\n    x, y, z = symbols('x y z')\n\n    # Expand\n    assert fma(x, y, z).expand(func=True) - x*y - z == 0\n\n    expr = fma(17*x, 42*y, 101*z)\n\n    # Diff\n    assert expr.diff(x) - expr.expand(func=True).diff(x) == 0\n    assert expr.diff(y) - expr.expand(func=True).diff(y) == 0\n    assert expr.diff(z) - expr.expand(func=True).diff(z) == 0\n\n    assert expr.diff(x) - 17*42*y == 0\n    assert expr.diff(y) - 17*42*x == 0\n    assert expr.diff(z) - 101 == 0\n\n\ndef test_log10():\n    x = Symbol('x')\n\n    # Expand\n    assert log10(x).expand(func=True) - log(x)/log(10) == 0\n\n    # Diff\n    assert log10(42*x).diff(x) - 1/(log(10)*x) == 0\n    assert log10(42*x).diff(x) - log10(42*x).expand(func=True).diff(x) == 0\n\n\ndef test_Cbrt():\n    x = Symbol('x')\n\n    # Expand\n    assert Cbrt(x).expand(func=True) - x**Rational(1, 3) == 0\n\n    # Diff\n    assert Cbrt(42*x).diff(x) - 42*(42*x)**(Rational(1, 3) - 1)/3 == 0\n    assert Cbrt(42*x).diff(x) - Cbrt(42*x).expand(func=True).diff(x) == 0\n\n\ndef test_Sqrt():\n    x = Symbol('x')\n\n    # Expand\n    assert Sqrt(x).expand(func=True) - x**Rational(1, 2) == 0\n\n    # Diff\n    assert Sqrt(42*x).diff(x) - 42*(42*x)**(Rational(1, 2) - 1)/2 == 0\n    assert Sqrt(42*x).diff(x) - Sqrt(42*x).expand(func=True).diff(x) == 0\n\n\ndef test_hypot():\n    x, y = symbols('x y')\n\n    # Expand\n    assert hypot(x, y).expand(func=True) - (x**2 + y**2)**Rational(1, 2) == 0\n\n    # Diff\n    assert hypot(17*x, 42*y).diff(x).expand(func=True) - hypot(17*x, 42*y).expand(func=True).diff(x) == 0\n    assert hypot(17*x, 42*y).diff(y).expand(func=True) - hypot(17*x, 42*y).expand(func=True).diff(y) == 0\n\n    assert hypot(17*x, 42*y).diff(x).expand(func=True) - 2*17*17*x*((17*x)**2 + (42*y)**2)**Rational(-1, 2)/2 == 0\n    assert hypot(17*x, 42*y).diff(y).expand(func=True) - 2*42*42*y*((17*x)**2 + (42*y)**2)**Rational(-1, 2)/2 == 0\n", "description": "A computer algebra system written in pure Python", "file_name": "test_cfunctions.py", "id": "f7fd76b5c94bf9cd0d1ffc11d2458afb", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/codegen/tests/test_cfunctions.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}