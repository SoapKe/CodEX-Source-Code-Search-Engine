{"author": "ansible", "code": "\n\n Copyright: Ansible Project\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = \"\"\"\n---\nmodule: onyx_protocol\nversion_added: \"2.5\"\nauthor: \"Samer Deeb (@samerd)\"\nshort_description: Enables/Disables protocols on Mellanox ONYX network devices\ndescription:\n  - This module provides a mechanism for enabling and disabling protocols\n    Mellanox on ONYX network devices.\nnotes:\n  - Tested on ONYX 3.6.4000\noptions:\n  mlag:\n    description: MLAG protocol\n    choices: ['enabled', 'disabled']\n  magp:\n    description: MAGP protocol\n    choices: ['enabled', 'disabled']\n  spanning_tree:\n    description: Spanning Tree support\n    choices: ['enabled', 'disabled']\n  dcb_pfc:\n    description: DCB priority flow control\n    choices: ['enabled', 'disabled']\n  igmp_snooping:\n    description: IP IGMP snooping\n    choices: ['enabled', 'disabled']\n  lacp:\n    description: LACP protocol\n    choices: ['enabled', 'disabled']\n  ip_l3:\n    description: IP L3 support\n    choices: ['enabled', 'disabled']\n  ip_routing:\n    description: IP routing support\n    choices: ['enabled', 'disabled']\n  lldp:\n    description: LLDP protocol\n    choices: ['enabled', 'disabled']\n  bgp:\n    description: BGP protocol\n    choices: ['enabled', 'disabled']\n  ospf:\n    description: OSPF protocol\n    choices: ['enabled', 'disabled']\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: enable protocols for MLAG\n  onyx_protocol:\n    lacp: enabled\n    spanning_tree: disabled\n    ip_routing: enabled\n    mlag: enabled\n    dcb_pfc: enabled\n\"\"\"\n\nRETURN = \"\"\"\ncommands:\n  description: The list of configuration mode commands to send to the device.\n  returned: always\n  type: list\n  sample:\n    - no spanning-tree\n    - protocol mlag\n\"\"\"\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six import iteritems\n\nfrom ansible.module_utils.network.onyx.onyx import BaseOnyxModule\nfrom ansible.module_utils.network.onyx.onyx import show_cmd\n\n\nclass OnyxProtocolModule(BaseOnyxModule):\n\n    PROTOCOL_MAPPING = dict(\n        mlag=dict(name=\"mlag\", enable=\"protocol mlag\",\n                  disable=\"no protocol mlag\"),\n        magp=dict(name=\"magp\", enable=\"protocol magp\",\n                  disable=\"no protocol magp\"),\n        spanning_tree=dict(name=\"spanning-tree\", enable=\"spanning-tree\",\n                           disable=\"no spanning-tree\"),\n        dcb_pfc=dict(name=\"priority-flow-control\",\n                     enable=\"dcb priority-flow-control enable force\",\n                     disable=\"no dcb priority-flow-control enable force\"),\n        igmp_snooping=dict(name=\"igmp-snooping\", enable=\"ip igmp snooping\",\n                           disable=\"no ip igmp snooping\"),\n        lacp=dict(name=\"lacp\", enable=\"lacp\", disable=\"no lacp\"),\n        ip_l3=dict(name=\"IP L3\", enable=\"ip l3\",\n                        disable=\"no ip l3\"),\n        ip_routing=dict(name=\"IP routing\", enable=\"ip routing\",\n                        disable=\"no ip routing\"),\n        lldp=dict(name=\"lldp\", enable=\"lldp\", disable=\"no lldp\"),\n        bgp=dict(name=\"bgp\", enable=\"protocol bgp\", disable=\"no protocol bgp\"),\n        ospf=dict(name=\"ospf\", enable=\"protocol ospf\",\n                  disable=\"no protocol ospf\"),\n    )\n\n    @classmethod\n    def _get_element_spec(cls):\n        element_spec = dict()\n        for protocol in cls.PROTOCOL_MAPPING:\n            element_spec[protocol] = dict(choices=['enabled', 'disabled'])\n        return element_spec\n\n    def init_module(self):\n        \"\"\" Ansible module initialization\n        \"\"\"\n        element_spec = self._get_element_spec()\n        argument_spec = dict()\n        argument_spec.update(element_spec)\n        self._module = AnsibleModule(\n            argument_spec=argument_spec,\n            supports_check_mode=True\n        )\n\n    def get_required_config(self):\n        self._required_config = dict()\n        module_params = self._module.params\n        for key, val in iteritems(module_params):\n            if key in self.PROTOCOL_MAPPING and val is not None:\n                self._required_config[key] = val\n\n    def _get_protocols(self):\n        return show_cmd(self._module, \"show protocols\")\n\n    def _get_ip_routing(self):\n        return show_cmd(self._module, 'show ip routing | include \"IP routing\"',\n                        json_fmt=False)\n\n    def load_current_config(self):\n        self._current_config = dict()\n        protocols_config = self._get_protocols()\n        if not protocols_config:\n            protocols_config = dict()\n        ip_config = self._get_ip_routing()\n        if ip_config:\n            lines = ip_config.split('\\n')\n            for line in lines:\n                line = line.strip()\n                line_attr = line.split(':')\n                if len(line_attr) == 2:\n                    attr = line_attr[0].strip()\n                    val = line_attr[1].strip()\n                    protocols_config[attr] = val\n        for protocol, protocol_metadata in iteritems(self.PROTOCOL_MAPPING):\n            protocol_json_attr = protocol_metadata['name']\n            val = protocols_config.get(protocol_json_attr, 'disabled')\n            if val not in ('enabled', 'disabled'):\n                val = 'enabled'\n            self._current_config[protocol] = val\n\n    def generate_commands(self):\n        for protocol, req_val in iteritems(self._required_config):\n            protocol_metadata = self.PROTOCOL_MAPPING[protocol]\n            curr_val = self._current_config.get(protocol, 'disabled')\n            if curr_val != req_val:\n                if req_val == 'disabled':\n                    command = protocol_metadata['disable']\n                else:\n                    command = protocol_metadata['enable']\n                self._commands.append(command)\n\n\ndef main():\n    \"\"\" main entry point for module execution\n    \"\"\"\n    OnyxProtocolModule.main()\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  onyx protocol version added   2 5  author   samer deeb ( samerd)  short description  enables disables protocols mellanox onyx network devices description      this module provides mechanism enabling disabling protocols     mellanox onyx network devices  notes      tested onyx 3 6 4000 options    mlag      description  mlag protocol     choices    enabled    disabled     magp      description  magp protocol     choices    enabled    disabled     spanning tree      description  spanning tree support     choices    enabled    disabled     dcb pfc      description  dcb priority flow control     choices    enabled    disabled     igmp snooping      description  ip igmp snooping     choices    enabled    disabled     lacp      description  lacp protocol     choices    enabled    disabled     ip l3      description  ip l3 support     choices    enabled    disabled     ip routing      description  ip routing support     choices    enabled    disabled     lldp      description  lldp protocol     choices    enabled    disabled     bgp      description  bgp protocol     choices    enabled    disabled     ospf      description  ospf protocol     choices    enabled    disabled        examples         name  enable protocols mlag   onyx protocol      lacp  enabled     spanning tree  disabled     ip routing  enabled     mlag  enabled     dcb pfc  enabled      return       commands    description  the list configuration mode commands send device    returned  always   type  list   sample        spanning tree       protocol mlag      ansible module utils basic import ansiblemodule ansible module utils six import iteritems  ansible module utils network onyx onyx import baseonyxmodule ansible module utils network onyx onyx import show cmd   class onyxprotocolmodule(baseonyxmodule)       protocol mapping   dict(         mlag dict(name  mlag   enable  protocol mlag                     disable  protocol mlag )          magp dict(name  magp   enable  protocol magp                     disable  protocol magp )          spanning tree dict(name  spanning tree   enable  spanning tree                              disable  spanning tree )          dcb pfc dict(name  priority flow control                        enable  dcb priority flow control enable force                        disable  dcb priority flow control enable force )          igmp snooping dict(name  igmp snooping   enable  ip igmp snooping                              disable  ip igmp snooping )          lacp dict(name  lacp   enable  lacp   disable  lacp )          ip l3 dict(name  ip l3   enable  ip l3                           disable  ip l3 )          ip routing dict(name  ip routing   enable  ip routing                           disable  ip routing )          lldp dict(name  lldp   enable  lldp   disable  lldp )          bgp dict(name  bgp   enable  protocol bgp   disable  protocol bgp )          ospf dict(name  ospf   enable  protocol ospf                     disable  protocol ospf )      )       classmethod     def  get element spec(cls)          element spec   dict()         protocol cls protocol mapping              element spec protocol    dict(choices   enabled    disabled  )         return element spec      def init module(self)              ansible module initialization                     element spec   self  get element spec()         argument spec   dict()         argument spec update(element spec)         self  module   ansiblemodule(             argument spec argument spec              supports check mode true         )      def get required config(self)          self  required config   dict()         module params   self  module params         key  val iteritems(module params)              key self protocol mapping val none                  self  required config key    val      def  get protocols(self)          return show cmd(self  module   show protocols )      def  get ip routing(self)          return show cmd(self  module   show ip routing   include  ip routing                            json fmt false)      def load current config(self)          self  current config   dict()         protocols config   self  get protocols()         protocols config              protocols config   dict()         ip config   self  get ip routing()         ip config              lines   ip config split(  n )             line lines                  line   line strip()                 line attr   line split(   )                 len(line attr)    2                      attr   line attr 0  strip()                     val   line attr 1  strip()                     protocols config attr    val         protocol  protocol metadata iteritems(self protocol mapping)              protocol json attr   protocol metadata  name               val   protocols config get(protocol json attr   disabled )             val ( enabled    disabled )                  val    enabled              self  current config protocol    val      def generate commands(self)          protocol  req val iteritems(self  required config)              protocol metadata   self protocol mapping protocol              curr val   self  current config get(protocol   disabled )             curr val    req val                  req val     disabled                       command   protocol metadata  disable                   else                      command   protocol metadata  enable                   self  commands append(command)   def main()          main entry point module execution             usr bin python       copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "#!/usr/bin/python\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = \"\"\"\n---\nmodule: onyx_protocol\nversion_added: \"2.5\"\nauthor: \"Samer Deeb (@samerd)\"\nshort_description: Enables/Disables protocols on Mellanox ONYX network devices\ndescription:\n  - This module provides a mechanism for enabling and disabling protocols\n    Mellanox on ONYX network devices.\nnotes:\n  - Tested on ONYX 3.6.4000\noptions:\n  mlag:\n    description: MLAG protocol\n    choices: ['enabled', 'disabled']\n  magp:\n    description: MAGP protocol\n    choices: ['enabled', 'disabled']\n  spanning_tree:\n    description: Spanning Tree support\n    choices: ['enabled', 'disabled']\n  dcb_pfc:\n    description: DCB priority flow control\n    choices: ['enabled', 'disabled']\n  igmp_snooping:\n    description: IP IGMP snooping\n    choices: ['enabled', 'disabled']\n  lacp:\n    description: LACP protocol\n    choices: ['enabled', 'disabled']\n  ip_l3:\n    description: IP L3 support\n    choices: ['enabled', 'disabled']\n  ip_routing:\n    description: IP routing support\n    choices: ['enabled', 'disabled']\n  lldp:\n    description: LLDP protocol\n    choices: ['enabled', 'disabled']\n  bgp:\n    description: BGP protocol\n    choices: ['enabled', 'disabled']\n  ospf:\n    description: OSPF protocol\n    choices: ['enabled', 'disabled']\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: enable protocols for MLAG\n  onyx_protocol:\n    lacp: enabled\n    spanning_tree: disabled\n    ip_routing: enabled\n    mlag: enabled\n    dcb_pfc: enabled\n\"\"\"\n\nRETURN = \"\"\"\ncommands:\n  description: The list of configuration mode commands to send to the device.\n  returned: always\n  type: list\n  sample:\n    - no spanning-tree\n    - protocol mlag\n\"\"\"\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six import iteritems\n\nfrom ansible.module_utils.network.onyx.onyx import BaseOnyxModule\nfrom ansible.module_utils.network.onyx.onyx import show_cmd\n\n\nclass OnyxProtocolModule(BaseOnyxModule):\n\n    PROTOCOL_MAPPING = dict(\n        mlag=dict(name=\"mlag\", enable=\"protocol mlag\",\n                  disable=\"no protocol mlag\"),\n        magp=dict(name=\"magp\", enable=\"protocol magp\",\n                  disable=\"no protocol magp\"),\n        spanning_tree=dict(name=\"spanning-tree\", enable=\"spanning-tree\",\n                           disable=\"no spanning-tree\"),\n        dcb_pfc=dict(name=\"priority-flow-control\",\n                     enable=\"dcb priority-flow-control enable force\",\n                     disable=\"no dcb priority-flow-control enable force\"),\n        igmp_snooping=dict(name=\"igmp-snooping\", enable=\"ip igmp snooping\",\n                           disable=\"no ip igmp snooping\"),\n        lacp=dict(name=\"lacp\", enable=\"lacp\", disable=\"no lacp\"),\n        ip_l3=dict(name=\"IP L3\", enable=\"ip l3\",\n                        disable=\"no ip l3\"),\n        ip_routing=dict(name=\"IP routing\", enable=\"ip routing\",\n                        disable=\"no ip routing\"),\n        lldp=dict(name=\"lldp\", enable=\"lldp\", disable=\"no lldp\"),\n        bgp=dict(name=\"bgp\", enable=\"protocol bgp\", disable=\"no protocol bgp\"),\n        ospf=dict(name=\"ospf\", enable=\"protocol ospf\",\n                  disable=\"no protocol ospf\"),\n    )\n\n    @classmethod\n    def _get_element_spec(cls):\n        element_spec = dict()\n        for protocol in cls.PROTOCOL_MAPPING:\n            element_spec[protocol] = dict(choices=['enabled', 'disabled'])\n        return element_spec\n\n    def init_module(self):\n        \"\"\" Ansible module initialization\n        \"\"\"\n        element_spec = self._get_element_spec()\n        argument_spec = dict()\n        argument_spec.update(element_spec)\n        self._module = AnsibleModule(\n            argument_spec=argument_spec,\n            supports_check_mode=True\n        )\n\n    def get_required_config(self):\n        self._required_config = dict()\n        module_params = self._module.params\n        for key, val in iteritems(module_params):\n            if key in self.PROTOCOL_MAPPING and val is not None:\n                self._required_config[key] = val\n\n    def _get_protocols(self):\n        return show_cmd(self._module, \"show protocols\")\n\n    def _get_ip_routing(self):\n        return show_cmd(self._module, 'show ip routing | include \"IP routing\"',\n                        json_fmt=False)\n\n    def load_current_config(self):\n        self._current_config = dict()\n        protocols_config = self._get_protocols()\n        if not protocols_config:\n            protocols_config = dict()\n        ip_config = self._get_ip_routing()\n        if ip_config:\n            lines = ip_config.split('\\n')\n            for line in lines:\n                line = line.strip()\n                line_attr = line.split(':')\n                if len(line_attr) == 2:\n                    attr = line_attr[0].strip()\n                    val = line_attr[1].strip()\n                    protocols_config[attr] = val\n        for protocol, protocol_metadata in iteritems(self.PROTOCOL_MAPPING):\n            protocol_json_attr = protocol_metadata['name']\n            val = protocols_config.get(protocol_json_attr, 'disabled')\n            if val not in ('enabled', 'disabled'):\n                val = 'enabled'\n            self._current_config[protocol] = val\n\n    def generate_commands(self):\n        for protocol, req_val in iteritems(self._required_config):\n            protocol_metadata = self.PROTOCOL_MAPPING[protocol]\n            curr_val = self._current_config.get(protocol, 'disabled')\n            if curr_val != req_val:\n                if req_val == 'disabled':\n                    command = protocol_metadata['disable']\n                else:\n                    command = protocol_metadata['enable']\n                self._commands.append(command)\n\n\ndef main():\n    \"\"\" main entry point for module execution\n    \"\"\"\n    OnyxProtocolModule.main()\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "onyx_protocol.py", "id": "d93772e08c3783a24e04197ec12fedab", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/onyx/onyx_protocol.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}