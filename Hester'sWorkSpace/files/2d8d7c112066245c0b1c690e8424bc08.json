{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2013, Chatham Financial <oss@chathamfinancial.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rabbitmq_plugin\nshort_description: Manage RabbitMQ plugins\ndescription:\n  - Manage RabbitMQ plugins.\nversion_added: \"1.1\"\nauthor:\n  - Chris Hoffman (@chrishoffman)\noptions:\n  names:\n    description:\n      - Comma-separated list of plugin names.\n    required: true\n    aliases: [name]\n  new_only:\n    description:\n      - Only enable missing plugins.\n      - Does not disable plugins that are not in the names list.\n    type: bool\n    default: \"no\"\n  state:\n    description:\n      - Specify if plugins are to be enabled or disabled.\n    default: enabled\n    choices: [enabled, disabled]\n  prefix:\n    description:\n      - Specify a custom install prefix to a Rabbit.\n    version_added: \"1.3\"\n'''\n\nEXAMPLES = '''\n- name: Enables the rabbitmq_management plugin\n  rabbitmq_plugin:\n    names: rabbitmq_management\n    state: enabled\n'''\n\nRETURN = '''\nenabled:\n  description: list of plugins enabled during task run\n  returned: always\n  type: list\n  sample: [\"rabbitmq_management\"]\ndisabled:\n  description: list of plugins disabled during task run\n  returned: always\n  type: list\n  sample: [\"rabbitmq_management\"]\n'''\n\nimport os\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nclass RabbitMqPlugins(object):\n\n    def __init__(self, module):\n        self.module = module\n\n        if module.params['prefix']:\n            if os.path.isdir(os.path.join(module.params['prefix'], 'bin')):\n                bin_path = os.path.join(module.params['prefix'], 'bin')\n            elif os.path.isdir(os.path.join(module.params['prefix'], 'sbin')):\n                bin_path = os.path.join(module.params['prefix'], 'sbin')\n            else:\n                \n                raise Exception(\"No binary folder in prefix %s\" %\n                                module.params['prefix'])\n\n            self._rabbitmq_plugins = bin_path + \"/rabbitmq-plugins\"\n\n        else:\n            self._rabbitmq_plugins = module.get_bin_path('rabbitmq-plugins', True)\n\n    def _exec(self, args, run_in_check_mode=False):\n        if not self.module.check_mode or (self.module.check_mode and run_in_check_mode):\n            cmd = [self._rabbitmq_plugins]\n            rc, out, err = self.module.run_command(cmd + args, check_rc=True)\n            return out.splitlines()\n        return list()\n\n    def get_all(self):\n        list_output = self._exec(['list', '-E', '-m'], True)\n        plugins = []\n        for plugin in list_output:\n            if not plugin:\n                break\n            plugins.append(plugin)\n\n        return plugins\n\n    def enable(self, name):\n        self._exec(['enable', name])\n\n    def disable(self, name):\n        self._exec(['disable', name])\n\n\ndef main():\n    arg_spec = dict(\n        names=dict(required=True, aliases=['name']),\n        new_only=dict(default='no', type='bool'),\n        state=dict(default='enabled', choices=['enabled', 'disabled']),\n        prefix=dict(required=False, default=None)\n    )\n    module = AnsibleModule(\n        argument_spec=arg_spec,\n        supports_check_mode=True\n    )\n\n    result = dict()\n    names = module.params['names'].split(',')\n    new_only = module.params['new_only']\n    state = module.params['state']\n\n    rabbitmq_plugins = RabbitMqPlugins(module)\n    enabled_plugins = rabbitmq_plugins.get_all()\n\n    enabled = []\n    disabled = []\n    if state == 'enabled':\n        if not new_only:\n            for plugin in enabled_plugins:\n                if plugin not in names:\n                    rabbitmq_plugins.disable(plugin)\n                    disabled.append(plugin)\n\n        for name in names:\n            if name not in enabled_plugins:\n                rabbitmq_plugins.enable(name)\n                enabled.append(name)\n    else:\n        for plugin in enabled_plugins:\n            if plugin in names:\n                rabbitmq_plugins.disable(plugin)\n                disabled.append(plugin)\n\n    result['changed'] = len(enabled) > 0 or len(disabled) > 0\n    result['enabled'] = enabled\n    result['disabled'] = disabled\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  rabbitmq plugin short description  manage rabbitmq plugins description      manage rabbitmq plugins  version added   1 1  author      chris hoffman ( chrishoffman) options    names      description          comma separated list plugin names      required  true     aliases   name    new      description          only enable missing plugins          does disable plugins names list      type  bool     default      state      description          specify plugins enabled disabled      default  enabled     choices   enabled  disabled    prefix      description          specify custom install prefix rabbit      version added   1 3       examples         name  enables rabbitmq management plugin   rabbitmq plugin      names  rabbitmq management     state  enabled      return       enabled    description  list plugins enabled task run   returned  always   type  list   sample    rabbitmq management   disabled    description  list plugins disabled task run   returned  always   type  list   sample    rabbitmq management           usr bin python        coding  utf 8        (c) 2013  chatham financial  oss chathamfinancial com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    no path exists  ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2013, Chatham Financial <oss@chathamfinancial.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rabbitmq_plugin\nshort_description: Manage RabbitMQ plugins\ndescription:\n  - Manage RabbitMQ plugins.\nversion_added: \"1.1\"\nauthor:\n  - Chris Hoffman (@chrishoffman)\noptions:\n  names:\n    description:\n      - Comma-separated list of plugin names.\n    required: true\n    aliases: [name]\n  new_only:\n    description:\n      - Only enable missing plugins.\n      - Does not disable plugins that are not in the names list.\n    type: bool\n    default: \"no\"\n  state:\n    description:\n      - Specify if plugins are to be enabled or disabled.\n    default: enabled\n    choices: [enabled, disabled]\n  prefix:\n    description:\n      - Specify a custom install prefix to a Rabbit.\n    version_added: \"1.3\"\n'''\n\nEXAMPLES = '''\n- name: Enables the rabbitmq_management plugin\n  rabbitmq_plugin:\n    names: rabbitmq_management\n    state: enabled\n'''\n\nRETURN = '''\nenabled:\n  description: list of plugins enabled during task run\n  returned: always\n  type: list\n  sample: [\"rabbitmq_management\"]\ndisabled:\n  description: list of plugins disabled during task run\n  returned: always\n  type: list\n  sample: [\"rabbitmq_management\"]\n'''\n\nimport os\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nclass RabbitMqPlugins(object):\n\n    def __init__(self, module):\n        self.module = module\n\n        if module.params['prefix']:\n            if os.path.isdir(os.path.join(module.params['prefix'], 'bin')):\n                bin_path = os.path.join(module.params['prefix'], 'bin')\n            elif os.path.isdir(os.path.join(module.params['prefix'], 'sbin')):\n                bin_path = os.path.join(module.params['prefix'], 'sbin')\n            else:\n                # No such path exists.\n                raise Exception(\"No binary folder in prefix %s\" %\n                                module.params['prefix'])\n\n            self._rabbitmq_plugins = bin_path + \"/rabbitmq-plugins\"\n\n        else:\n            self._rabbitmq_plugins = module.get_bin_path('rabbitmq-plugins', True)\n\n    def _exec(self, args, run_in_check_mode=False):\n        if not self.module.check_mode or (self.module.check_mode and run_in_check_mode):\n            cmd = [self._rabbitmq_plugins]\n            rc, out, err = self.module.run_command(cmd + args, check_rc=True)\n            return out.splitlines()\n        return list()\n\n    def get_all(self):\n        list_output = self._exec(['list', '-E', '-m'], True)\n        plugins = []\n        for plugin in list_output:\n            if not plugin:\n                break\n            plugins.append(plugin)\n\n        return plugins\n\n    def enable(self, name):\n        self._exec(['enable', name])\n\n    def disable(self, name):\n        self._exec(['disable', name])\n\n\ndef main():\n    arg_spec = dict(\n        names=dict(required=True, aliases=['name']),\n        new_only=dict(default='no', type='bool'),\n        state=dict(default='enabled', choices=['enabled', 'disabled']),\n        prefix=dict(required=False, default=None)\n    )\n    module = AnsibleModule(\n        argument_spec=arg_spec,\n        supports_check_mode=True\n    )\n\n    result = dict()\n    names = module.params['names'].split(',')\n    new_only = module.params['new_only']\n    state = module.params['state']\n\n    rabbitmq_plugins = RabbitMqPlugins(module)\n    enabled_plugins = rabbitmq_plugins.get_all()\n\n    enabled = []\n    disabled = []\n    if state == 'enabled':\n        if not new_only:\n            for plugin in enabled_plugins:\n                if plugin not in names:\n                    rabbitmq_plugins.disable(plugin)\n                    disabled.append(plugin)\n\n        for name in names:\n            if name not in enabled_plugins:\n                rabbitmq_plugins.enable(name)\n                enabled.append(name)\n    else:\n        for plugin in enabled_plugins:\n            if plugin in names:\n                rabbitmq_plugins.disable(plugin)\n                disabled.append(plugin)\n\n    result['changed'] = len(enabled) > 0 or len(disabled) > 0\n    result['enabled'] = enabled\n    result['disabled'] = disabled\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "rabbitmq_plugin.py", "id": "2d8d7c112066245c0b1c690e8424bc08", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/messaging/rabbitmq_plugin.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}