{"author": "facebook", "code": "\n\n Copyright (c) 2014, Facebook, Inc.\n\n\n This source code is licensed under the BSD-style license found in the\n LICENSE file in the root directory of this source tree. An additional grant\n of patent rights can be found in the PATENTS file in the same directory.\n\nimport re\n\nimport lldb\nimport fblldbbase as fb\n\ndef objc_getClass(className):\n  command = '(void*)objc_getClass(\"{}\")'.format(className)\n  value = fb.evaluateExpression(command)\n  return value\n\ndef object_getClass(object):\n  command = '(void*)object_getClass((id){})'.format(object)\n  value = fb.evaluateExpression(command)\n  return value\n\ndef class_getName(klass):\n  command = '(const char*)class_getName((Class){})'.format(klass)\n  value = fb.evaluateExpressionValue(command).GetSummary().strip('\"')\n  return value\n\ndef class_getSuperclass(klass):\n  command = '(void*)class_getSuperclass((Class){})'.format(klass)\n  value = fb.evaluateExpression(command)\n  return value\n\ndef class_isMetaClass(klass):\n    command = 'class_isMetaClass((Class){})'.format(klass)\n    return fb.evaluateBooleanExpression(command)\n\ndef class_getInstanceMethod(klass, selector):\n  command = '(void*)class_getInstanceMethod((Class){}, @selector({}))'.format(klass, selector)\n  value = fb.evaluateExpression(command)\n  return value\n\ndef currentArch():\n  targetTriple = lldb.debugger.GetSelectedTarget().GetTriple()\n  arch = targetTriple.split('-')[0]\n  if arch == 'x86_64h':\n    arch = 'x86_64'\n  return arch\n\ndef functionPreambleExpressionForSelf():\n  import re\n\n  arch = currentArch()\n  expressionForSelf = None\n  if arch == 'i386':\n    expressionForSelf = '*(id*)($esp+4)'\n  elif arch == 'x86_64':\n    expressionForSelf = '(id)$rdi'\n  elif arch == 'arm64':\n    expressionForSelf = '(id)$x0'\n  elif re.match(r'^armv.*$', arch):\n    expressionForSelf = '(id)$r0'\n  return expressionForSelf\n\ndef functionPreambleExpressionForObjectParameterAtIndex(parameterIndex):\n  arch = currentArch()\n  expresssion = None\n  if arch == 'i386':\n    expresssion = '*(id*)($esp + ' + str(12 + parameterIndex * 4) + ')'\n  elif arch == 'x86_64':\n    if parameterIndex > 3:\n      raise Exception(\"Current implementation can not return object at index greater than 3 for x86_64\")\n    registersList = ['rdx', 'rcx', 'r8', 'r9']\n    expresssion = '(id)$' + registersList[parameterIndex]\n  elif arch == 'arm64':\n    if parameterIndex > 5:\n      raise Exception(\"Current implementation can not return object at index greater than 5 for arm64\")\n    expresssion = '(id)$x' + str(parameterIndex + 2)\n  elif re.match(r'^armv.*$', arch):\n    if parameterIndex > 1:\n      raise Exception(\"Current implementation can not return object at index greater than 1 for arm32\")\n    expresssion = '(id)$r' + str(parameterIndex + 2)\n  return expresssion\n\ndef isMacintoshArch():\n  arch = currentArch()\n  if not arch == 'x86_64':\n    return False\n\n  nsClassName = 'NSApplication'\n  command = '(void*)objc_getClass(\"{}\")'.format(nsClassName)\n\n  return (fb.evaluateBooleanExpression(command + '!= nil'))\n\ndef isIOSSimulator():\n  return fb.evaluateExpressionValue('(id)[[UIDevice currentDevice] model]').GetObjectDescription().lower().find('simulator') >= 0\n\ndef isIOSDevice():\n  return not isMacintoshArch() and not isIOSSimulator()\n", "comments": "   usr bin python    copyright (c) 2014  facebook  inc     all rights reserved        this source code licensed bsd style license found    license file root directory source tree  an additional grant    patent rights found patents file directory  ", "content": "#!/usr/bin/python\n\n# Copyright (c) 2014, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree. An additional grant\n# of patent rights can be found in the PATENTS file in the same directory.\n\nimport re\n\nimport lldb\nimport fblldbbase as fb\n\ndef objc_getClass(className):\n  command = '(void*)objc_getClass(\"{}\")'.format(className)\n  value = fb.evaluateExpression(command)\n  return value\n\ndef object_getClass(object):\n  command = '(void*)object_getClass((id){})'.format(object)\n  value = fb.evaluateExpression(command)\n  return value\n\ndef class_getName(klass):\n  command = '(const char*)class_getName((Class){})'.format(klass)\n  value = fb.evaluateExpressionValue(command).GetSummary().strip('\"')\n  return value\n\ndef class_getSuperclass(klass):\n  command = '(void*)class_getSuperclass((Class){})'.format(klass)\n  value = fb.evaluateExpression(command)\n  return value\n\ndef class_isMetaClass(klass):\n    command = 'class_isMetaClass((Class){})'.format(klass)\n    return fb.evaluateBooleanExpression(command)\n\ndef class_getInstanceMethod(klass, selector):\n  command = '(void*)class_getInstanceMethod((Class){}, @selector({}))'.format(klass, selector)\n  value = fb.evaluateExpression(command)\n  return value\n\ndef currentArch():\n  targetTriple = lldb.debugger.GetSelectedTarget().GetTriple()\n  arch = targetTriple.split('-')[0]\n  if arch == 'x86_64h':\n    arch = 'x86_64'\n  return arch\n\ndef functionPreambleExpressionForSelf():\n  import re\n\n  arch = currentArch()\n  expressionForSelf = None\n  if arch == 'i386':\n    expressionForSelf = '*(id*)($esp+4)'\n  elif arch == 'x86_64':\n    expressionForSelf = '(id)$rdi'\n  elif arch == 'arm64':\n    expressionForSelf = '(id)$x0'\n  elif re.match(r'^armv.*$', arch):\n    expressionForSelf = '(id)$r0'\n  return expressionForSelf\n\ndef functionPreambleExpressionForObjectParameterAtIndex(parameterIndex):\n  arch = currentArch()\n  expresssion = None\n  if arch == 'i386':\n    expresssion = '*(id*)($esp + ' + str(12 + parameterIndex * 4) + ')'\n  elif arch == 'x86_64':\n    if parameterIndex > 3:\n      raise Exception(\"Current implementation can not return object at index greater than 3 for x86_64\")\n    registersList = ['rdx', 'rcx', 'r8', 'r9']\n    expresssion = '(id)$' + registersList[parameterIndex]\n  elif arch == 'arm64':\n    if parameterIndex > 5:\n      raise Exception(\"Current implementation can not return object at index greater than 5 for arm64\")\n    expresssion = '(id)$x' + str(parameterIndex + 2)\n  elif re.match(r'^armv.*$', arch):\n    if parameterIndex > 1:\n      raise Exception(\"Current implementation can not return object at index greater than 1 for arm32\")\n    expresssion = '(id)$r' + str(parameterIndex + 2)\n  return expresssion\n\ndef isMacintoshArch():\n  arch = currentArch()\n  if not arch == 'x86_64':\n    return False\n\n  nsClassName = 'NSApplication'\n  command = '(void*)objc_getClass(\"{}\")'.format(nsClassName)\n\n  return (fb.evaluateBooleanExpression(command + '!= nil'))\n\ndef isIOSSimulator():\n  return fb.evaluateExpressionValue('(id)[[UIDevice currentDevice] model]').GetObjectDescription().lower().find('simulator') >= 0\n\ndef isIOSDevice():\n  return not isMacintoshArch() and not isIOSSimulator()\n", "description": "Chisel is a collection of LLDB commands to assist debugging iOS apps.", "file_name": "fblldbobjcruntimehelpers.py", "id": "89393b7d4901cca571527fd92721f0ba", "language": "Python", "project_name": "chisel", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/facebook-chisel/facebook-chisel-8312a63/fblldbobjcruntimehelpers.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:09:48Z", "url": "https://github.com/facebook/chisel", "wiki": true}