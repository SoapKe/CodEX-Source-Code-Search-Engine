{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport random\nimport re\nimport string\n\nfrom .discoverygo import DiscoveryGoBaseIE\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    try_get,\n)\nfrom ..compat import compat_HTTPError\n\n\nclass DiscoveryIE(DiscoveryGoBaseIE):\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'https://www.discovery.com/tv-shows/cash-cab/videos/dave-foley',\n        'info_dict': {\n            'id': '5a2d9b4d6b66d17a5026e1fd',\n            'ext': 'mp4',\n            'title': 'Dave Foley',\n            'description': 'md5:4b39bcafccf9167ca42810eb5f28b01f',\n            'duration': 608,\n        },\n        'params': {\n            'skip_download': True,  \n        }\n    }, {\n        'url': 'https://www.investigationdiscovery.com/tv-shows/final-vision/full-episodes/final-vision',\n        'only_matching': True,\n    }]\n    _GEO_COUNTRIES = ['US']\n    _GEO_BYPASS = False\n\n    def _real_extract(self, url):\n        site, path, display_id = re.match(self._VALID_URL, url).groups()\n        webpage = self._download_webpage(url, display_id)\n\n        react_data = self._parse_json(self._search_regex(\n            r'window\\.__reactTransmitPacket\\s*=\\s*({.+?});',\n            webpage, 'react data'), display_id)\n        content_blocks = react_data['layout'][path]['contentBlocks']\n        video = next(cb for cb in content_blocks if cb.get('type') == 'video')['content']['items'][0]\n        video_id = video['id']\n\n        access_token = self._download_json(\n            'https://www.%s.com/anonymous' % site, display_id, query={\n                'authRel': 'authorization',\n                'client_id': try_get(\n                    react_data, lambda x: x['application']['apiClientId'],\n                    compat_str) or '3020a40c2356a645b4b4',\n                'nonce': ''.join([random.choice(string.ascii_letters) for _ in range(32)]),\n                'redirectUri': 'https://fusion.ddmcdn.com/app/mercury-sdk/180/redirectHandler.html?https://www.%s.com' % site,\n            })['access_token']\n\n        try:\n            stream = self._download_json(\n                'https://api.discovery.com/v1/streaming/video/' + video_id,\n                display_id, headers={\n                    'Authorization': 'Bearer ' + access_token,\n                })\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                e_description = self._parse_json(\n                    e.cause.read().decode(), display_id)['description']\n                if 'resource not available for country' in e_description:\n                    self.raise_geo_restricted(countries=self._GEO_COUNTRIES)\n                if 'Authorized Networks' in e_description:\n                    raise ExtractorError(\n                        'This video is only available via cable service provider subscription that'\n                        ' is not currently supported. You may want to use --cookies.', expected=True)\n                raise ExtractorError(e_description)\n            raise\n\n        return self._extract_video_info(video, stream, display_id)\n", "comments": "(?x)https?://(?:www\\.)?(?P<site>\n            discovery|\n            investigationdiscovery|\n            discoverylife|\n            animalplanet|\n            ahctv|\n            destinationamerica|\n            sciencechannel|\n            tlc|\n            velocity\n        )\\.com(?P<path>/tv-shows/[^/]+/(?:video|full-episode)s/(?P<id>[^./?#]+))\n)\n# requires ffmpeg\n", "content": "from __future__ import unicode_literals\n\nimport random\nimport re\nimport string\n\nfrom .discoverygo import DiscoveryGoBaseIE\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    try_get,\n)\nfrom ..compat import compat_HTTPError\n\n\nclass DiscoveryIE(DiscoveryGoBaseIE):\n    _VALID_URL = r'''(?x)https?://(?:www\\.)?(?P<site>\n            discovery|\n            investigationdiscovery|\n            discoverylife|\n            animalplanet|\n            ahctv|\n            destinationamerica|\n            sciencechannel|\n            tlc|\n            velocity\n        )\\.com(?P<path>/tv-shows/[^/]+/(?:video|full-episode)s/(?P<id>[^./?#]+))'''\n    _TESTS = [{\n        'url': 'https://www.discovery.com/tv-shows/cash-cab/videos/dave-foley',\n        'info_dict': {\n            'id': '5a2d9b4d6b66d17a5026e1fd',\n            'ext': 'mp4',\n            'title': 'Dave Foley',\n            'description': 'md5:4b39bcafccf9167ca42810eb5f28b01f',\n            'duration': 608,\n        },\n        'params': {\n            'skip_download': True,  # requires ffmpeg\n        }\n    }, {\n        'url': 'https://www.investigationdiscovery.com/tv-shows/final-vision/full-episodes/final-vision',\n        'only_matching': True,\n    }]\n    _GEO_COUNTRIES = ['US']\n    _GEO_BYPASS = False\n\n    def _real_extract(self, url):\n        site, path, display_id = re.match(self._VALID_URL, url).groups()\n        webpage = self._download_webpage(url, display_id)\n\n        react_data = self._parse_json(self._search_regex(\n            r'window\\.__reactTransmitPacket\\s*=\\s*({.+?});',\n            webpage, 'react data'), display_id)\n        content_blocks = react_data['layout'][path]['contentBlocks']\n        video = next(cb for cb in content_blocks if cb.get('type') == 'video')['content']['items'][0]\n        video_id = video['id']\n\n        access_token = self._download_json(\n            'https://www.%s.com/anonymous' % site, display_id, query={\n                'authRel': 'authorization',\n                'client_id': try_get(\n                    react_data, lambda x: x['application']['apiClientId'],\n                    compat_str) or '3020a40c2356a645b4b4',\n                'nonce': ''.join([random.choice(string.ascii_letters) for _ in range(32)]),\n                'redirectUri': 'https://fusion.ddmcdn.com/app/mercury-sdk/180/redirectHandler.html?https://www.%s.com' % site,\n            })['access_token']\n\n        try:\n            stream = self._download_json(\n                'https://api.discovery.com/v1/streaming/video/' + video_id,\n                display_id, headers={\n                    'Authorization': 'Bearer ' + access_token,\n                })\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                e_description = self._parse_json(\n                    e.cause.read().decode(), display_id)['description']\n                if 'resource not available for country' in e_description:\n                    self.raise_geo_restricted(countries=self._GEO_COUNTRIES)\n                if 'Authorized Networks' in e_description:\n                    raise ExtractorError(\n                        'This video is only available via cable service provider subscription that'\n                        ' is not currently supported. You may want to use --cookies.', expected=True)\n                raise ExtractorError(e_description)\n            raise\n\n        return self._extract_video_info(video, stream, display_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "discovery.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/discovery.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}