{"author": "openai", "code": "import numpy as np\nfrom gym.envs.mujoco import mujoco_env\nfrom gym import utils\n\ndef mass_center(model, sim):\n    mass = np.expand_dims(model.body_mass, 1)\n    xpos = sim.data.xipos\n    return (np.sum(mass * xpos, 0) / np.sum(mass))[0]\n\nclass HumanoidEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, 'humanoid.xml', 5)\n        utils.EzPickle.__init__(self)\n\n    def _get_obs(self):\n        data = self.sim.data\n        return np.concatenate([data.qpos.flat[2:],\n                               data.qvel.flat,\n                               data.cinert.flat,\n                               data.cvel.flat,\n                               data.qfrc_actuator.flat,\n                               data.cfrc_ext.flat])\n\n    def step(self, a):\n        pos_before = mass_center(self.model, self.sim)\n        self.do_simulation(a, self.frame_skip)\n        pos_after = mass_center(self.model, self.sim)\n        alive_bonus = 5.0\n        data = self.sim.data\n        lin_vel_cost = 0.25 * (pos_after - pos_before) / self.model.opt.timestep\n        quad_ctrl_cost = 0.1 * np.square(data.ctrl).sum()\n        quad_impact_cost = .5e-6 * np.square(data.cfrc_ext).sum()\n        quad_impact_cost = min(quad_impact_cost, 10)\n        reward = lin_vel_cost - quad_ctrl_cost - quad_impact_cost + alive_bonus\n        qpos = self.sim.data.qpos\n        done = bool((qpos[2] < 1.0) or (qpos[2] > 2.0))\n        return self._get_obs(), reward, done, dict(reward_linvel=lin_vel_cost, reward_quadctrl=-quad_ctrl_cost, reward_alive=alive_bonus, reward_impact=-quad_impact_cost)\n\n    def reset_model(self):\n        c = 0.01\n        self.set_state(\n            self.init_qpos + self.np_random.uniform(low=-c, high=c, size=self.model.nq),\n            self.init_qvel + self.np_random.uniform(low=-c, high=c, size=self.model.nv,)\n        )\n        return self._get_obs()\n\n    def viewer_setup(self):\n        self.viewer.cam.trackbodyid = 1\n        self.viewer.cam.distance = self.model.stat.extent * 1.0\n        self.viewer.cam.lookat[2] += .8\n        self.viewer.cam.elevation = -20\n", "comments": "", "content": "import numpy as np\nfrom gym.envs.mujoco import mujoco_env\nfrom gym import utils\n\ndef mass_center(model, sim):\n    mass = np.expand_dims(model.body_mass, 1)\n    xpos = sim.data.xipos\n    return (np.sum(mass * xpos, 0) / np.sum(mass))[0]\n\nclass HumanoidEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, 'humanoid.xml', 5)\n        utils.EzPickle.__init__(self)\n\n    def _get_obs(self):\n        data = self.sim.data\n        return np.concatenate([data.qpos.flat[2:],\n                               data.qvel.flat,\n                               data.cinert.flat,\n                               data.cvel.flat,\n                               data.qfrc_actuator.flat,\n                               data.cfrc_ext.flat])\n\n    def step(self, a):\n        pos_before = mass_center(self.model, self.sim)\n        self.do_simulation(a, self.frame_skip)\n        pos_after = mass_center(self.model, self.sim)\n        alive_bonus = 5.0\n        data = self.sim.data\n        lin_vel_cost = 0.25 * (pos_after - pos_before) / self.model.opt.timestep\n        quad_ctrl_cost = 0.1 * np.square(data.ctrl).sum()\n        quad_impact_cost = .5e-6 * np.square(data.cfrc_ext).sum()\n        quad_impact_cost = min(quad_impact_cost, 10)\n        reward = lin_vel_cost - quad_ctrl_cost - quad_impact_cost + alive_bonus\n        qpos = self.sim.data.qpos\n        done = bool((qpos[2] < 1.0) or (qpos[2] > 2.0))\n        return self._get_obs(), reward, done, dict(reward_linvel=lin_vel_cost, reward_quadctrl=-quad_ctrl_cost, reward_alive=alive_bonus, reward_impact=-quad_impact_cost)\n\n    def reset_model(self):\n        c = 0.01\n        self.set_state(\n            self.init_qpos + self.np_random.uniform(low=-c, high=c, size=self.model.nq),\n            self.init_qvel + self.np_random.uniform(low=-c, high=c, size=self.model.nv,)\n        )\n        return self._get_obs()\n\n    def viewer_setup(self):\n        self.viewer.cam.trackbodyid = 1\n        self.viewer.cam.distance = self.model.stat.extent * 1.0\n        self.viewer.cam.lookat[2] += .8\n        self.viewer.cam.elevation = -20\n", "description": "A toolkit for developing and comparing reinforcement learning algorithms.", "file_name": "humanoid.py", "id": "a1a89015ce107e9e16a51cbcd448a89e", "language": "Python", "project_name": "gym", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/openai-gym/openai-gym-6160181/gym/envs/mujoco/humanoid.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:30:35Z", "url": "https://github.com/openai/gym", "wiki": true}