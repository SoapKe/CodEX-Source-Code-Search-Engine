{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models, _\nfrom odoo.addons.http_routing.models.ir_http import slug\n\n\nclass EventType(models.Model):\n    _inherit = 'event.type'\n\n    website_track = fields.Boolean('Tracks on Website')\n    website_track_proposal = fields.Boolean('Tracks Proposals on Website')\n\n    @api.onchange('website_menu')\n    def _onchange_website_menu(self):\n        if not self.website_menu:\n            self.website_track = False\n            self.website_track_proposal = False\n\n\nclass Event(models.Model):\n    _inherit = \"event.event\"\n\n    track_ids = fields.One2many('event.track', 'event_id', 'Tracks')\n    track_count = fields.Integer('Tracks', compute='_compute_track_count')\n\n    sponsor_ids = fields.One2many('event.sponsor', 'event_id', 'Sponsors')\n    sponsor_count = fields.Integer('Sponsors', compute='_compute_sponsor_count')\n\n    website_track = fields.Boolean('Tracks on Website', compute='_compute_website_track', inverse='_set_website_menu')\n    website_track_proposal = fields.Boolean('Proposals on Website', compute='_compute_website_track_proposal', inverse='_set_website_menu')\n\n    allowed_track_tag_ids = fields.Many2many('event.track.tag', relation='event_allowed_track_tags_rel', string='Available Track Tags')\n    tracks_tag_ids = fields.Many2many(\n        'event.track.tag', relation='event_track_tags_rel', string='Track Tags',\n        compute='_compute_tracks_tag_ids', store=True)\n\n    @api.multi\n    def _compute_track_count(self):\n        data = self.env['event.track'].read_group([('stage_id.is_cancel', '!=', True)], ['event_id'], ['event_id'])\n        result = dict((data['event_id'][0], data['event_id_count']) for data in data)\n        for event in self:\n            event.track_count = result.get(event.id, 0)\n\n    @api.multi\n    def _compute_sponsor_count(self):\n        data = self.env['event.sponsor'].read_group([], ['event_id'], ['event_id'])\n        result = dict((data['event_id'][0], data['event_id_count']) for data in data)\n        for event in self:\n            event.sponsor_count = result.get(event.id, 0)\n\n    @api.multi\n    def _compute_website_track(self):\n        for event in self:\n            existing_pages = event.menu_id.child_id.mapped('name')\n            event.website_track = _('Talks') in existing_pages\n\n    @api.multi\n    def _compute_website_track_proposal(self):\n        for event in self:\n            existing_pages = event.menu_id.child_id.mapped('name')\n            event.website_track_proposal = _('Talk Proposals') in existing_pages\n\n    @api.multi\n    @api.depends('track_ids.tag_ids')\n    def _compute_tracks_tag_ids(self):\n        for event in self:\n            event.tracks_tag_ids = event.track_ids.mapped('tag_ids').ids\n\n    @api.onchange('event_type_id')\n    def _onchange_type(self):\n        super(Event, self)._onchange_type()\n        if self.event_type_id and self.website_menu:\n            self.website_track = self.event_type_id.website_track\n            self.website_track_proposal = self.event_type_id.website_track_proposal\n\n    @api.onchange('website_menu')\n    def _onchange_website_menu(self):\n        if not self.website_menu:\n            self.website_track = False\n            self.website_track_proposal = False\n\n    @api.onchange('website_track')\n    def _onchange_website_track(self):\n        if not self.website_track:\n            self.website_track_proposal = False\n\n    @api.onchange('website_track_proposal')\n    def _onchange_website_track_proposal(self):\n        if self.website_track_proposal:\n            self.website_track = True\n\n    def _get_standard_menu_entries_names(self):\n        res = super(Event, self)._get_standard_menu_entries_names()\n        res += [_('Talks'), _('Agenda'), _('Talk Proposals')]\n        return res\n\n    def _get_menu_entries(self):\n        self.ensure_one()\n        res = super(Event, self)._get_menu_entries()\n        if self.website_track:\n            res += [\n                (_('Talks'), '/event/%s/track' % slug(self), False),\n                (_('Agenda'), '/event/%s/agenda' % slug(self), False)]\n        if self.website_track_proposal:\n            res += [(_('Talk Proposals'), '/event/%s/track_proposal' % slug(self), False)]\n        return res\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models, _\nfrom odoo.addons.http_routing.models.ir_http import slug\n\n\nclass EventType(models.Model):\n    _inherit = 'event.type'\n\n    website_track = fields.Boolean('Tracks on Website')\n    website_track_proposal = fields.Boolean('Tracks Proposals on Website')\n\n    @api.onchange('website_menu')\n    def _onchange_website_menu(self):\n        if not self.website_menu:\n            self.website_track = False\n            self.website_track_proposal = False\n\n\nclass Event(models.Model):\n    _inherit = \"event.event\"\n\n    track_ids = fields.One2many('event.track', 'event_id', 'Tracks')\n    track_count = fields.Integer('Tracks', compute='_compute_track_count')\n\n    sponsor_ids = fields.One2many('event.sponsor', 'event_id', 'Sponsors')\n    sponsor_count = fields.Integer('Sponsors', compute='_compute_sponsor_count')\n\n    website_track = fields.Boolean('Tracks on Website', compute='_compute_website_track', inverse='_set_website_menu')\n    website_track_proposal = fields.Boolean('Proposals on Website', compute='_compute_website_track_proposal', inverse='_set_website_menu')\n\n    allowed_track_tag_ids = fields.Many2many('event.track.tag', relation='event_allowed_track_tags_rel', string='Available Track Tags')\n    tracks_tag_ids = fields.Many2many(\n        'event.track.tag', relation='event_track_tags_rel', string='Track Tags',\n        compute='_compute_tracks_tag_ids', store=True)\n\n    @api.multi\n    def _compute_track_count(self):\n        data = self.env['event.track'].read_group([('stage_id.is_cancel', '!=', True)], ['event_id'], ['event_id'])\n        result = dict((data['event_id'][0], data['event_id_count']) for data in data)\n        for event in self:\n            event.track_count = result.get(event.id, 0)\n\n    @api.multi\n    def _compute_sponsor_count(self):\n        data = self.env['event.sponsor'].read_group([], ['event_id'], ['event_id'])\n        result = dict((data['event_id'][0], data['event_id_count']) for data in data)\n        for event in self:\n            event.sponsor_count = result.get(event.id, 0)\n\n    @api.multi\n    def _compute_website_track(self):\n        for event in self:\n            existing_pages = event.menu_id.child_id.mapped('name')\n            event.website_track = _('Talks') in existing_pages\n\n    @api.multi\n    def _compute_website_track_proposal(self):\n        for event in self:\n            existing_pages = event.menu_id.child_id.mapped('name')\n            event.website_track_proposal = _('Talk Proposals') in existing_pages\n\n    @api.multi\n    @api.depends('track_ids.tag_ids')\n    def _compute_tracks_tag_ids(self):\n        for event in self:\n            event.tracks_tag_ids = event.track_ids.mapped('tag_ids').ids\n\n    @api.onchange('event_type_id')\n    def _onchange_type(self):\n        super(Event, self)._onchange_type()\n        if self.event_type_id and self.website_menu:\n            self.website_track = self.event_type_id.website_track\n            self.website_track_proposal = self.event_type_id.website_track_proposal\n\n    @api.onchange('website_menu')\n    def _onchange_website_menu(self):\n        if not self.website_menu:\n            self.website_track = False\n            self.website_track_proposal = False\n\n    @api.onchange('website_track')\n    def _onchange_website_track(self):\n        if not self.website_track:\n            self.website_track_proposal = False\n\n    @api.onchange('website_track_proposal')\n    def _onchange_website_track_proposal(self):\n        if self.website_track_proposal:\n            self.website_track = True\n\n    def _get_standard_menu_entries_names(self):\n        res = super(Event, self)._get_standard_menu_entries_names()\n        res += [_('Talks'), _('Agenda'), _('Talk Proposals')]\n        return res\n\n    def _get_menu_entries(self):\n        self.ensure_one()\n        res = super(Event, self)._get_menu_entries()\n        if self.website_track:\n            res += [\n                (_('Talks'), '/event/%s/track' % slug(self), False),\n                (_('Agenda'), '/event/%s/agenda' % slug(self), False)]\n        if self.website_track_proposal:\n            res += [(_('Talk Proposals'), '/event/%s/track_proposal' % slug(self), False)]\n        return res\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "event.py", "id": "c64444d5517c7b367fd69746333eafc5", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_event_track/models/event.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}