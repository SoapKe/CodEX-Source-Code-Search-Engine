{"author": "littlecodersh", "code": "import os, time, copy\nfrom threading import Lock\n\nfrom .messagequeue import Queue\nfrom .templates import (\n    ContactList, AbstractUserDict, User,\n    MassivePlatform, Chatroom, ChatroomMember)\n\ndef contact_change(fn):\n    def _contact_change(core, *args, **kwargs):\n        with core.storageClass.updateLock:\n            return fn(core, *args, **kwargs)\n    return _contact_change\n\nclass Storage(object):\n    def __init__(self, core):\n        self.userName          = None\n        self.nickName          = None\n        self.updateLock        = Lock()\n        self.memberList        = ContactList()\n        self.mpList            = ContactList()\n        self.chatroomList      = ContactList()\n        self.msgList           = Queue(-1)\n        self.lastInputUserName = None\n        self.memberList.set_default_value(contactClass=User)\n        self.memberList.core = core\n        self.mpList.set_default_value(contactClass=MassivePlatform)\n        self.mpList.core = core\n        self.chatroomList.set_default_value(contactClass=Chatroom)\n        self.chatroomList.core = core\n    def dumps(self):\n        return {\n            'userName'          : self.userName,\n            'nickName'          : self.nickName,\n            'memberList'        : self.memberList,\n            'mpList'            : self.mpList,\n            'chatroomList'      : self.chatroomList,\n            'lastInputUserName' : self.lastInputUserName, }\n    def loads(self, j):\n        self.userName = j.get('userName', None)\n        self.nickName = j.get('nickName', None)\n        del self.memberList[:]\n        for i in j.get('memberList', []):\n            self.memberList.append(i)\n        del self.mpList[:]\n        for i in j.get('mpList', []):\n            self.mpList.append(i)\n        del self.chatroomList[:]\n        for i in j.get('chatroomList', []):\n            self.chatroomList.append(i)\n        \n        \n        for chatroom in self.chatroomList:\n            if 'MemberList' in chatroom:\n                for member in chatroom['MemberList']:\n                    member.core = chatroom.core\n                    member.chatroom = chatroom\n            if 'Self' in chatroom:\n                chatroom['Self'].core = chatroom.core\n                chatroom['Self'].chatroom = chatroom\n        self.lastInputUserName = j.get('lastInputUserName', None)\n    def search_friends(self, name=None, userName=None, remarkName=None, nickName=None,\n            wechatAccount=None):\n        with self.updateLock:\n            if (name or userName or remarkName or nickName or wechatAccount) is None:\n                return copy.deepcopy(self.memberList[0]) \n            elif userName: \n                for m in self.memberList:\n                    if m['UserName'] == userName:\n                        return copy.deepcopy(m)\n            else:\n                matchDict = {\n                    'RemarkName' : remarkName,\n                    'NickName'   : nickName,\n                    'Alias'      : wechatAccount, }\n                for k in ('RemarkName', 'NickName', 'Alias'):\n                    if matchDict[k] is None:\n                        del matchDict[k]\n                if name: \n                    contact = []\n                    for m in self.memberList:\n                        if any([m.get(k) == name for k in ('RemarkName', 'NickName', 'Alias')]):\n                            contact.append(m)\n                else:\n                    contact = self.memberList[:]\n                if matchDict: \n                    friendList = []\n                    for m in contact:\n                        if all([m.get(k) == v for k, v in matchDict.items()]):\n                            friendList.append(m)\n                    return copy.deepcopy(friendList)\n                else:\n                    return copy.deepcopy(contact)\n    def search_chatrooms(self, name=None, userName=None):\n        with self.updateLock:\n            if userName is not None:\n                for m in self.chatroomList:\n                    if m['UserName'] == userName:\n                        return copy.deepcopy(m)\n            elif name is not None:\n                matchList = []\n                for m in self.chatroomList:\n                    if name in m['NickName']:\n                        matchList.append(copy.deepcopy(m))\n                return matchList\n    def search_mps(self, name=None, userName=None):\n        with self.updateLock:\n            if userName is not None:\n                for m in self.mpList:\n                    if m['UserName'] == userName:\n                        return copy.deepcopy(m)\n            elif name is not None:\n                matchList = []\n                for m in self.mpList:\n                    if name in m['NickName']:\n                        matchList.append(copy.deepcopy(m))\n                return matchList\n", "comments": "  i tried solve everything pickle    way easier storage saving    account    return username match    select based name    select based matchdict ", "content": "import os, time, copy\nfrom threading import Lock\n\nfrom .messagequeue import Queue\nfrom .templates import (\n    ContactList, AbstractUserDict, User,\n    MassivePlatform, Chatroom, ChatroomMember)\n\ndef contact_change(fn):\n    def _contact_change(core, *args, **kwargs):\n        with core.storageClass.updateLock:\n            return fn(core, *args, **kwargs)\n    return _contact_change\n\nclass Storage(object):\n    def __init__(self, core):\n        self.userName          = None\n        self.nickName          = None\n        self.updateLock        = Lock()\n        self.memberList        = ContactList()\n        self.mpList            = ContactList()\n        self.chatroomList      = ContactList()\n        self.msgList           = Queue(-1)\n        self.lastInputUserName = None\n        self.memberList.set_default_value(contactClass=User)\n        self.memberList.core = core\n        self.mpList.set_default_value(contactClass=MassivePlatform)\n        self.mpList.core = core\n        self.chatroomList.set_default_value(contactClass=Chatroom)\n        self.chatroomList.core = core\n    def dumps(self):\n        return {\n            'userName'          : self.userName,\n            'nickName'          : self.nickName,\n            'memberList'        : self.memberList,\n            'mpList'            : self.mpList,\n            'chatroomList'      : self.chatroomList,\n            'lastInputUserName' : self.lastInputUserName, }\n    def loads(self, j):\n        self.userName = j.get('userName', None)\n        self.nickName = j.get('nickName', None)\n        del self.memberList[:]\n        for i in j.get('memberList', []):\n            self.memberList.append(i)\n        del self.mpList[:]\n        for i in j.get('mpList', []):\n            self.mpList.append(i)\n        del self.chatroomList[:]\n        for i in j.get('chatroomList', []):\n            self.chatroomList.append(i)\n        # I tried to solve everything in pickle\n        # but this way is easier and more storage-saving\n        for chatroom in self.chatroomList:\n            if 'MemberList' in chatroom:\n                for member in chatroom['MemberList']:\n                    member.core = chatroom.core\n                    member.chatroom = chatroom\n            if 'Self' in chatroom:\n                chatroom['Self'].core = chatroom.core\n                chatroom['Self'].chatroom = chatroom\n        self.lastInputUserName = j.get('lastInputUserName', None)\n    def search_friends(self, name=None, userName=None, remarkName=None, nickName=None,\n            wechatAccount=None):\n        with self.updateLock:\n            if (name or userName or remarkName or nickName or wechatAccount) is None:\n                return copy.deepcopy(self.memberList[0]) # my own account\n            elif userName: # return the only userName match\n                for m in self.memberList:\n                    if m['UserName'] == userName:\n                        return copy.deepcopy(m)\n            else:\n                matchDict = {\n                    'RemarkName' : remarkName,\n                    'NickName'   : nickName,\n                    'Alias'      : wechatAccount, }\n                for k in ('RemarkName', 'NickName', 'Alias'):\n                    if matchDict[k] is None:\n                        del matchDict[k]\n                if name: # select based on name\n                    contact = []\n                    for m in self.memberList:\n                        if any([m.get(k) == name for k in ('RemarkName', 'NickName', 'Alias')]):\n                            contact.append(m)\n                else:\n                    contact = self.memberList[:]\n                if matchDict: # select again based on matchDict\n                    friendList = []\n                    for m in contact:\n                        if all([m.get(k) == v for k, v in matchDict.items()]):\n                            friendList.append(m)\n                    return copy.deepcopy(friendList)\n                else:\n                    return copy.deepcopy(contact)\n    def search_chatrooms(self, name=None, userName=None):\n        with self.updateLock:\n            if userName is not None:\n                for m in self.chatroomList:\n                    if m['UserName'] == userName:\n                        return copy.deepcopy(m)\n            elif name is not None:\n                matchList = []\n                for m in self.chatroomList:\n                    if name in m['NickName']:\n                        matchList.append(copy.deepcopy(m))\n                return matchList\n    def search_mps(self, name=None, userName=None):\n        with self.updateLock:\n            if userName is not None:\n                for m in self.mpList:\n                    if m['UserName'] == userName:\n                        return copy.deepcopy(m)\n            elif name is not None:\n                matchList = []\n                for m in self.mpList:\n                    if name in m['NickName']:\n                        matchList.append(copy.deepcopy(m))\n                return matchList\n", "description": "A complete and graceful API for Wechat. \u5fae\u4fe1\u4e2a\u4eba\u53f7\u63a5\u53e3\u3001\u5fae\u4fe1\u673a\u5668\u4eba\u53ca\u547d\u4ee4\u884c\u5fae\u4fe1\uff0c\u4e09\u5341\u884c\u5373\u53ef\u81ea\u5b9a\u4e49\u4e2a\u4eba\u53f7\u673a\u5668\u4eba\u3002", "file_name": "__init__.py", "id": "46740e767aeb20b83b199e2f34db285a", "language": "Python", "project_name": "ItChat", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/littlecodersh-ItChat/littlecodersh-ItChat-8622c3c/itchat/storage/__init__.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:54:42Z", "url": "https://github.com/littlecodersh/ItChat", "wiki": true}