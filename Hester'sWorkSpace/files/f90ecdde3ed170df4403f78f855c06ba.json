{"author": "rg3", "code": "\n\nfrom __future__ import unicode_literals\n\n\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom youtube_dl import YoutubeDL\nfrom youtube_dl.compat import compat_http_server, compat_urllib_request\nimport ssl\nimport threading\n\nTEST_DIR = os.path.dirname(os.path.abspath(__file__))\n\n\ndef http_server_port(httpd):\n    if os.name == 'java' and isinstance(httpd.socket, ssl.SSLSocket):\n        \n        sock = httpd.socket.sock\n    else:\n        sock = httpd.socket\n    return sock.getsockname()[1]\n\n\nclass HTTPTestRequestHandler(compat_http_server.BaseHTTPRequestHandler):\n    def log_message(self, format, *args):\n        pass\n\n    def do_GET(self):\n        if self.path == '/video.html':\n            self.send_response(200)\n            self.send_header('Content-Type', 'text/html; charset=utf-8')\n            self.end_headers()\n            self.wfile.write(b'<html><video src=\"/vid.mp4\" /></html>')\n        elif self.path == '/vid.mp4':\n            self.send_response(200)\n            self.send_header('Content-Type', 'video/mp4')\n            self.end_headers()\n            self.wfile.write(b'\\x00\\x00\\x00\\x00\\x20\\x66\\x74[video]')\n        elif self.path == '/302':\n            if sys.version_info[0] == 3:\n                \n                self.send_response(404)\n                self.end_headers()\n                return\n\n            new_url = 'http://127.0.0.1:%d/\u4e2d\u6587.html' % http_server_port(self.server)\n            self.send_response(302)\n            self.send_header(b'Location', new_url.encode('utf-8'))\n            self.end_headers()\n        elif self.path == '/%E4%B8%AD%E6%96%87.html':\n            self.send_response(200)\n            self.send_header('Content-Type', 'text/html; charset=utf-8')\n            self.end_headers()\n            self.wfile.write(b'<html><video src=\"/vid.mp4\" /></html>')\n        else:\n            assert False\n\n\nclass FakeLogger(object):\n    def debug(self, msg):\n        pass\n\n    def warning(self, msg):\n        pass\n\n    def error(self, msg):\n        pass\n\n\nclass TestHTTP(unittest.TestCase):\n    def setUp(self):\n        self.httpd = compat_http_server.HTTPServer(\n            ('127.0.0.1', 0), HTTPTestRequestHandler)\n        self.port = http_server_port(self.httpd)\n        self.server_thread = threading.Thread(target=self.httpd.serve_forever)\n        self.server_thread.daemon = True\n        self.server_thread.start()\n\n    def test_unicode_path_redirection(self):\n        \n        if sys.version_info[0] == 3:\n            return\n\n        ydl = YoutubeDL({'logger': FakeLogger()})\n        r = ydl.extract_info('http://127.0.0.1:%d/302' % self.port)\n        self.assertEqual(r['entries'][0]['url'], 'http://127.0.0.1:%d/vid.mp4' % self.port)\n\n\nclass TestHTTPS(unittest.TestCase):\n    def setUp(self):\n        certfn = os.path.join(TEST_DIR, 'testcert.pem')\n        self.httpd = compat_http_server.HTTPServer(\n            ('127.0.0.1', 0), HTTPTestRequestHandler)\n        self.httpd.socket = ssl.wrap_socket(\n            self.httpd.socket, certfile=certfn, server_side=True)\n        self.port = http_server_port(self.httpd)\n        self.server_thread = threading.Thread(target=self.httpd.serve_forever)\n        self.server_thread.daemon = True\n        self.server_thread.start()\n\n    def test_nocheckcertificate(self):\n        if sys.version_info >= (2, 7, 9):  \n            ydl = YoutubeDL({'logger': FakeLogger()})\n            self.assertRaises(\n                Exception,\n                ydl.extract_info, 'https://127.0.0.1:%d/video.html' % self.port)\n\n        ydl = YoutubeDL({'logger': FakeLogger(), 'nocheckcertificate': True})\n        r = ydl.extract_info('https://127.0.0.1:%d/video.html' % self.port)\n        self.assertEqual(r['entries'][0]['url'], 'https://127.0.0.1:%d/vid.mp4' % self.port)\n\n\ndef _build_proxy_handler(name):\n    class HTTPTestRequestHandler(compat_http_server.BaseHTTPRequestHandler):\n        proxy_name = name\n\n        def log_message(self, format, *args):\n            pass\n\n        def do_GET(self):\n            self.send_response(200)\n            self.send_header('Content-Type', 'text/plain; charset=utf-8')\n            self.end_headers()\n            self.wfile.write('{self.proxy_name}: {self.path}'.format(self=self).encode('utf-8'))\n    return HTTPTestRequestHandler\n\n\nclass TestProxy(unittest.TestCase):\n    def setUp(self):\n        self.proxy = compat_http_server.HTTPServer(\n            ('127.0.0.1', 0), _build_proxy_handler('normal'))\n        self.port = http_server_port(self.proxy)\n        self.proxy_thread = threading.Thread(target=self.proxy.serve_forever)\n        self.proxy_thread.daemon = True\n        self.proxy_thread.start()\n\n        self.geo_proxy = compat_http_server.HTTPServer(\n            ('127.0.0.1', 0), _build_proxy_handler('geo'))\n        self.geo_port = http_server_port(self.geo_proxy)\n        self.geo_proxy_thread = threading.Thread(target=self.geo_proxy.serve_forever)\n        self.geo_proxy_thread.daemon = True\n        self.geo_proxy_thread.start()\n\n    def test_proxy(self):\n        geo_proxy = '127.0.0.1:{0}'.format(self.geo_port)\n        ydl = YoutubeDL({\n            'proxy': '127.0.0.1:{0}'.format(self.port),\n            'geo_verification_proxy': geo_proxy,\n        })\n        url = 'http://foo.com/bar'\n        response = ydl.urlopen(url).read().decode('utf-8')\n        self.assertEqual(response, 'normal: {0}'.format(url))\n\n        req = compat_urllib_request.Request(url)\n        req.add_header('Ytdl-request-proxy', geo_proxy)\n        response = ydl.urlopen(req).read().decode('utf-8')\n        self.assertEqual(response, 'geo: {0}'.format(url))\n\n    def test_proxy_with_idn(self):\n        ydl = YoutubeDL({\n            'proxy': '127.0.0.1:{0}'.format(self.port),\n        })\n        url = 'http://\u4e2d\u6587.tw/'\n        response = ydl.urlopen(url).read().decode('utf-8')\n        \n        self.assertEqual(response, 'normal: http://xn--fiq228c.tw/')\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "#!/usr/bin/env python\n# coding: utf-8\n# Allow direct execution\n# In Jython SSLSocket is not a subclass of socket.socket\n# XXX: Python 3 http server does not allow non-ASCII header values\n# XXX: Python 3 http server does not allow non-ASCII header values\n# No certificate checking anyways\n# b'xn--fiq228c' is '\u4e2d\u6587'.encode('idna')\n", "content": "#!/usr/bin/env python\n# coding: utf-8\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom youtube_dl import YoutubeDL\nfrom youtube_dl.compat import compat_http_server, compat_urllib_request\nimport ssl\nimport threading\n\nTEST_DIR = os.path.dirname(os.path.abspath(__file__))\n\n\ndef http_server_port(httpd):\n    if os.name == 'java' and isinstance(httpd.socket, ssl.SSLSocket):\n        # In Jython SSLSocket is not a subclass of socket.socket\n        sock = httpd.socket.sock\n    else:\n        sock = httpd.socket\n    return sock.getsockname()[1]\n\n\nclass HTTPTestRequestHandler(compat_http_server.BaseHTTPRequestHandler):\n    def log_message(self, format, *args):\n        pass\n\n    def do_GET(self):\n        if self.path == '/video.html':\n            self.send_response(200)\n            self.send_header('Content-Type', 'text/html; charset=utf-8')\n            self.end_headers()\n            self.wfile.write(b'<html><video src=\"/vid.mp4\" /></html>')\n        elif self.path == '/vid.mp4':\n            self.send_response(200)\n            self.send_header('Content-Type', 'video/mp4')\n            self.end_headers()\n            self.wfile.write(b'\\x00\\x00\\x00\\x00\\x20\\x66\\x74[video]')\n        elif self.path == '/302':\n            if sys.version_info[0] == 3:\n                # XXX: Python 3 http server does not allow non-ASCII header values\n                self.send_response(404)\n                self.end_headers()\n                return\n\n            new_url = 'http://127.0.0.1:%d/\u4e2d\u6587.html' % http_server_port(self.server)\n            self.send_response(302)\n            self.send_header(b'Location', new_url.encode('utf-8'))\n            self.end_headers()\n        elif self.path == '/%E4%B8%AD%E6%96%87.html':\n            self.send_response(200)\n            self.send_header('Content-Type', 'text/html; charset=utf-8')\n            self.end_headers()\n            self.wfile.write(b'<html><video src=\"/vid.mp4\" /></html>')\n        else:\n            assert False\n\n\nclass FakeLogger(object):\n    def debug(self, msg):\n        pass\n\n    def warning(self, msg):\n        pass\n\n    def error(self, msg):\n        pass\n\n\nclass TestHTTP(unittest.TestCase):\n    def setUp(self):\n        self.httpd = compat_http_server.HTTPServer(\n            ('127.0.0.1', 0), HTTPTestRequestHandler)\n        self.port = http_server_port(self.httpd)\n        self.server_thread = threading.Thread(target=self.httpd.serve_forever)\n        self.server_thread.daemon = True\n        self.server_thread.start()\n\n    def test_unicode_path_redirection(self):\n        # XXX: Python 3 http server does not allow non-ASCII header values\n        if sys.version_info[0] == 3:\n            return\n\n        ydl = YoutubeDL({'logger': FakeLogger()})\n        r = ydl.extract_info('http://127.0.0.1:%d/302' % self.port)\n        self.assertEqual(r['entries'][0]['url'], 'http://127.0.0.1:%d/vid.mp4' % self.port)\n\n\nclass TestHTTPS(unittest.TestCase):\n    def setUp(self):\n        certfn = os.path.join(TEST_DIR, 'testcert.pem')\n        self.httpd = compat_http_server.HTTPServer(\n            ('127.0.0.1', 0), HTTPTestRequestHandler)\n        self.httpd.socket = ssl.wrap_socket(\n            self.httpd.socket, certfile=certfn, server_side=True)\n        self.port = http_server_port(self.httpd)\n        self.server_thread = threading.Thread(target=self.httpd.serve_forever)\n        self.server_thread.daemon = True\n        self.server_thread.start()\n\n    def test_nocheckcertificate(self):\n        if sys.version_info >= (2, 7, 9):  # No certificate checking anyways\n            ydl = YoutubeDL({'logger': FakeLogger()})\n            self.assertRaises(\n                Exception,\n                ydl.extract_info, 'https://127.0.0.1:%d/video.html' % self.port)\n\n        ydl = YoutubeDL({'logger': FakeLogger(), 'nocheckcertificate': True})\n        r = ydl.extract_info('https://127.0.0.1:%d/video.html' % self.port)\n        self.assertEqual(r['entries'][0]['url'], 'https://127.0.0.1:%d/vid.mp4' % self.port)\n\n\ndef _build_proxy_handler(name):\n    class HTTPTestRequestHandler(compat_http_server.BaseHTTPRequestHandler):\n        proxy_name = name\n\n        def log_message(self, format, *args):\n            pass\n\n        def do_GET(self):\n            self.send_response(200)\n            self.send_header('Content-Type', 'text/plain; charset=utf-8')\n            self.end_headers()\n            self.wfile.write('{self.proxy_name}: {self.path}'.format(self=self).encode('utf-8'))\n    return HTTPTestRequestHandler\n\n\nclass TestProxy(unittest.TestCase):\n    def setUp(self):\n        self.proxy = compat_http_server.HTTPServer(\n            ('127.0.0.1', 0), _build_proxy_handler('normal'))\n        self.port = http_server_port(self.proxy)\n        self.proxy_thread = threading.Thread(target=self.proxy.serve_forever)\n        self.proxy_thread.daemon = True\n        self.proxy_thread.start()\n\n        self.geo_proxy = compat_http_server.HTTPServer(\n            ('127.0.0.1', 0), _build_proxy_handler('geo'))\n        self.geo_port = http_server_port(self.geo_proxy)\n        self.geo_proxy_thread = threading.Thread(target=self.geo_proxy.serve_forever)\n        self.geo_proxy_thread.daemon = True\n        self.geo_proxy_thread.start()\n\n    def test_proxy(self):\n        geo_proxy = '127.0.0.1:{0}'.format(self.geo_port)\n        ydl = YoutubeDL({\n            'proxy': '127.0.0.1:{0}'.format(self.port),\n            'geo_verification_proxy': geo_proxy,\n        })\n        url = 'http://foo.com/bar'\n        response = ydl.urlopen(url).read().decode('utf-8')\n        self.assertEqual(response, 'normal: {0}'.format(url))\n\n        req = compat_urllib_request.Request(url)\n        req.add_header('Ytdl-request-proxy', geo_proxy)\n        response = ydl.urlopen(req).read().decode('utf-8')\n        self.assertEqual(response, 'geo: {0}'.format(url))\n\n    def test_proxy_with_idn(self):\n        ydl = YoutubeDL({\n            'proxy': '127.0.0.1:{0}'.format(self.port),\n        })\n        url = 'http://\u4e2d\u6587.tw/'\n        response = ydl.urlopen(url).read().decode('utf-8')\n        # b'xn--fiq228c' is '\u4e2d\u6587'.encode('idna')\n        self.assertEqual(response, 'normal: http://xn--fiq228c.tw/')\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "test_http.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/test/test_http.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}