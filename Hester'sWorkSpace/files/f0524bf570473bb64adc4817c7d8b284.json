{"author": "drduh", "code": "\n\n This script reads system launch daemon and agent plists.\n\nimport glob\nimport hashlib\nimport os\nimport plistlib\nimport subprocess\nimport csv\n\nheader ='filename,label,program,sha256,runatload,comment'\nlocation = '/System/Library/Launch%s/*.plist'\ncomments = {}\n\ndef LoadPlist(filename):\n  \"\"\"Plists can be read with plistlib.\"\"\"\n   creating our own data\n  data = None\n  \n  try:\n    p = subprocess.Popen(\n        ['/usr/bin/plutil', '-convert', 'xml1', '-o', '-', filename],\n        stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out_data, err_data = p.communicate()\n  except IOError as e:\n     file could not be found\n    print e\n      \n  if(p.returncode == 0):\n      data = plistlib.readPlistFromString(out_data)\n  \n  return data\n\n\ndef GetStatus(plist):\n  \"\"\"Plists may have a RunAtLoad key.\"\"\"\n  try:\n    return plist['RunAtLoad']\n  except KeyError:\n    return 'False'\n\n\ndef GetLabel(plist):\n  \"\"\"Plists have a label.\"\"\"\n  try:\n    return plist['Label']\n  except KeyError:\n    return 'False'\n\n\ndef GetProgram(plist):\n  \"\"\"Plists have either a Program or ProgramArguments key,\n     if the executable requires command line options.\n  \"\"\"\n  try:\n    return \"['%s']\" % plist['Program'], HashFile(plist['Program'])\n  except KeyError:\n    return plist['ProgramArguments'], HashFile(plist['ProgramArguments'])\n\n\ndef HashFile(f):\n  \"\"\"Returns SHA-256 hash of a given file.\"\"\"\n  if type(f) is list:\n    f = f[0]\n  try:\n    return hashlib.sha256(open(f,'rb').read()).hexdigest()\n  except:\n    return 'UNKNOWN'\n\n\ndef GetComment(plist):\n  \"\"\"docstring for GetComment\"\"\"\n  global comments\n  label = plist['Label']\n  comment = None\n  if label in comments:\n    comment = comments[label]\n  return comment\n\n\ndef main():\n  \"\"\"Main function.\"\"\"\n  print(header)\n  \n  global comments\n\n  csvfile = os.path.join(os.path.dirname(\n      os.path.realpath(__file__)), 'comments.csv')\n\n  with open(csvfile, 'rb') as f:\n      reader = csv.reader(f)\n      comments = {rows[0]:rows[1] for rows in reader}\n  \n  for kind in ['Daemons', 'Agents']:\n    for filename in glob.glob(location % kind):\n      if not filename.endswith('com.apple.jetsamproperties.Mac.plist'):\n        p = LoadPlist(filename)\n        if p:\n          e = (filename, GetLabel(p), '\"%s\",%s' % GetProgram(p), GetStatus(p), '\"%s\"' % GetComment(p))\n          print('%s,%s,%s,%s,%s' % e)\n        else:\n          print('Could not load %s' % filename)\n\n\nif __name__ == '__main__':\n  main()\n", "comments": "   plists read plistlib         creating data   data   none      try      p   subprocess popen(            usr bin plutil     convert    xml1            filename           stdout subprocess pipe  stderr subprocess pipe)     data  err data   p communicate()   except ioerror e        file could found     print e          if(p returncode    0)        data   plistlib readplistfromstring(out data)      return data   def getstatus(plist)       plists may runatload key       try      return plist  runatload     except keyerror      return  false    def getlabel(plist)       plists label       try      return plist  label     except keyerror      return  false    def getprogram(plist)       plists either program programarguments key       executable requires command line options          try      return          plist  program    hashfile(plist  program  )   except keyerror      return plist  programarguments    hashfile(plist  programarguments  )   def hashfile(f)       returns sha 256 hash given file       type(f) list      f   f 0    try      return hashlib sha256(open(f  rb ) read()) hexdigest()   except      return  unknown    def getcomment(plist)       docstring getcomment      global comments   label   plist  label     comment   none   label comments      comment   comments label    return comment   def main()       main function         usr bin env python       this script reads system launch daemon agent plists     creating data    file could found ", "content": "#!/usr/bin/env python\n#\n# This script reads system launch daemon and agent plists.\n\nimport glob\nimport hashlib\nimport os\nimport plistlib\nimport subprocess\nimport csv\n\nheader ='filename,label,program,sha256,runatload,comment'\nlocation = '/System/Library/Launch%s/*.plist'\ncomments = {}\n\ndef LoadPlist(filename):\n  \"\"\"Plists can be read with plistlib.\"\"\"\n  # creating our own data\n  data = None\n  \n  try:\n    p = subprocess.Popen(\n        ['/usr/bin/plutil', '-convert', 'xml1', '-o', '-', filename],\n        stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out_data, err_data = p.communicate()\n  except IOError as e:\n    # file could not be found\n    print e\n      \n  if(p.returncode == 0):\n      data = plistlib.readPlistFromString(out_data)\n  \n  return data\n\n\ndef GetStatus(plist):\n  \"\"\"Plists may have a RunAtLoad key.\"\"\"\n  try:\n    return plist['RunAtLoad']\n  except KeyError:\n    return 'False'\n\n\ndef GetLabel(plist):\n  \"\"\"Plists have a label.\"\"\"\n  try:\n    return plist['Label']\n  except KeyError:\n    return 'False'\n\n\ndef GetProgram(plist):\n  \"\"\"Plists have either a Program or ProgramArguments key,\n     if the executable requires command line options.\n  \"\"\"\n  try:\n    return \"['%s']\" % plist['Program'], HashFile(plist['Program'])\n  except KeyError:\n    return plist['ProgramArguments'], HashFile(plist['ProgramArguments'])\n\n\ndef HashFile(f):\n  \"\"\"Returns SHA-256 hash of a given file.\"\"\"\n  if type(f) is list:\n    f = f[0]\n  try:\n    return hashlib.sha256(open(f,'rb').read()).hexdigest()\n  except:\n    return 'UNKNOWN'\n\n\ndef GetComment(plist):\n  \"\"\"docstring for GetComment\"\"\"\n  global comments\n  label = plist['Label']\n  comment = None\n  if label in comments:\n    comment = comments[label]\n  return comment\n\n\ndef main():\n  \"\"\"Main function.\"\"\"\n  print(header)\n  \n  global comments\n\n  csvfile = os.path.join(os.path.dirname(\n      os.path.realpath(__file__)), 'comments.csv')\n\n  with open(csvfile, 'rb') as f:\n      reader = csv.reader(f)\n      comments = {rows[0]:rows[1] for rows in reader}\n  \n  for kind in ['Daemons', 'Agents']:\n    for filename in glob.glob(location % kind):\n      if not filename.endswith('com.apple.jetsamproperties.Mac.plist'):\n        p = LoadPlist(filename)\n        if p:\n          e = (filename, GetLabel(p), '\"%s\",%s' % GetProgram(p), GetStatus(p), '\"%s\"' % GetComment(p))\n          print('%s,%s,%s,%s,%s' % e)\n        else:\n          print('Could not load %s' % filename)\n\n\nif __name__ == '__main__':\n  main()\n", "description": "A practical guide to securing macOS.", "file_name": "read_launch_plists.py", "id": "f0524bf570473bb64adc4817c7d8b284", "language": "Python", "project_name": "macOS-Security-and-Privacy-Guide", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/drduh-macOS-Security-and-Privacy-Guide/drduh-macOS-Security-and-Privacy-Guide-090d329/read_launch_plists.py", "save_time": "", "source": "", "update_at": "2018-03-13T23:33:36Z", "url": "https://github.com/drduh/macOS-Security-and-Privacy-Guide", "wiki": false}