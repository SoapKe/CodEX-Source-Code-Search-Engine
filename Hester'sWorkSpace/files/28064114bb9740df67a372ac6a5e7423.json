{"author": "django", "code": "from datetime import date\nfrom decimal import Decimal\n\nfrom django.db.models.query import RawQuerySet\nfrom django.db.models.query_utils import InvalidQuery\nfrom django.test import TestCase, skipUnlessDBFeature\n\nfrom .models import (\n    Author, Book, BookFkAsPk, Coffee, FriendlyAuthor, MixedCaseIDColumn,\n    Reviewer,\n)\n\n\nclass RawQueryTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.a1 = Author.objects.create(first_name='Joe', last_name='Smith', dob=date(1950, 9, 20))\n        cls.a2 = Author.objects.create(first_name='Jill', last_name='Doe', dob=date(1920, 4, 2))\n        cls.a3 = Author.objects.create(first_name='Bob', last_name='Smith', dob=date(1986, 1, 25))\n        cls.a4 = Author.objects.create(first_name='Bill', last_name='Jones', dob=date(1932, 5, 10))\n        cls.b1 = Book.objects.create(\n            title='The awesome book', author=cls.a1, paperback=False,\n            opening_line='It was a bright cold day in April and the clocks were striking thirteen.',\n        )\n        cls.b2 = Book.objects.create(\n            title='The horrible book', author=cls.a1, paperback=True,\n            opening_line=(\n                'On an evening in the latter part of May a middle-aged man '\n                'was walking homeward from Shaston to the village of Marlott, '\n                'in the adjoining Vale of Blakemore, or Blackmoor.'\n            ),\n        )\n        cls.b3 = Book.objects.create(\n            title='Another awesome book', author=cls.a1, paperback=False,\n            opening_line='A squat grey building of only thirty-four stories.',\n        )\n        cls.b4 = Book.objects.create(\n            title='Some other book', author=cls.a3, paperback=True,\n            opening_line='It was the day my grandmother exploded.',\n        )\n        cls.c1 = Coffee.objects.create(brand='dunkin doughnuts')\n        cls.c2 = Coffee.objects.create(brand='starbucks')\n        cls.r1 = Reviewer.objects.create()\n        cls.r2 = Reviewer.objects.create()\n        cls.r1.reviewed.add(cls.b2, cls.b3, cls.b4)\n\n    def assertSuccessfulRawQuery(self, model, query, expected_results,\n                                 expected_annotations=(), params=[], translations=None):\n        \"\"\"\n        Execute the passed query against the passed model and check the output\n        \"\"\"\n        results = list(model.objects.raw(query, params=params, translations=translations))\n        self.assertProcessed(model, results, expected_results, expected_annotations)\n        self.assertAnnotations(results, expected_annotations)\n\n    def assertProcessed(self, model, results, orig, expected_annotations=()):\n        \"\"\"\n        Compare the results of a raw query against expected results\n        \"\"\"\n        self.assertEqual(len(results), len(orig))\n        for index, item in enumerate(results):\n            orig_item = orig[index]\n            for annotation in expected_annotations:\n                setattr(orig_item, *annotation)\n\n            for field in model._meta.fields:\n                \n                self.assertEqual(\n                    getattr(item, field.attname),\n                    getattr(orig_item, field.attname)\n                )\n                \n                self.assertEqual(\n                    type(getattr(item, field.attname)),\n                    type(getattr(orig_item, field.attname))\n                )\n\n    def assertNoAnnotations(self, results):\n        \"\"\"\n        The results of a raw query contain no annotations\n        \"\"\"\n        self.assertAnnotations(results, ())\n\n    def assertAnnotations(self, results, expected_annotations):\n        \"\"\"\n        The passed raw query results contain the expected annotations\n        \"\"\"\n        if expected_annotations:\n            for index, result in enumerate(results):\n                annotation, value = expected_annotations[index]\n                self.assertTrue(hasattr(result, annotation))\n                self.assertEqual(getattr(result, annotation), value)\n\n    def test_rawqueryset_repr(self):\n        queryset = RawQuerySet(raw_query='SELECT * FROM raw_query_author')\n        self.assertEqual(repr(queryset), '<RawQuerySet: SELECT * FROM raw_query_author>')\n        self.assertEqual(repr(queryset.query), '<RawQuery: SELECT * FROM raw_query_author>')\n\n    def test_simple_raw_query(self):\n        \"\"\"\n        Basic test of raw query with a simple database query\n        \"\"\"\n        query = \"SELECT * FROM raw_query_author\"\n        authors = Author.objects.all()\n        self.assertSuccessfulRawQuery(Author, query, authors)\n\n    def test_raw_query_lazy(self):\n        \"\"\"\n        Raw queries are lazy: they aren't actually executed until they're\n        iterated over.\n        \"\"\"\n        q = Author.objects.raw('SELECT * FROM raw_query_author')\n        self.assertIsNone(q.query.cursor)\n        list(q)\n        self.assertIsNotNone(q.query.cursor)\n\n    def test_FK_raw_query(self):\n        \"\"\"\n        Test of a simple raw query against a model containing a foreign key\n        \"\"\"\n        query = \"SELECT * FROM raw_query_book\"\n        books = Book.objects.all()\n        self.assertSuccessfulRawQuery(Book, query, books)\n\n    def test_db_column_handler(self):\n        \"\"\"\n        Test of a simple raw query against a model containing a field with\n        db_column defined.\n        \"\"\"\n        query = \"SELECT * FROM raw_query_coffee\"\n        coffees = Coffee.objects.all()\n        self.assertSuccessfulRawQuery(Coffee, query, coffees)\n\n    def test_pk_with_mixed_case_db_column(self):\n        \"\"\"\n        A raw query with a model that has a pk db_column with mixed case.\n        \"\"\"\n        query = \"SELECT * FROM raw_query_mixedcaseidcolumn\"\n        queryset = MixedCaseIDColumn.objects.all()\n        self.assertSuccessfulRawQuery(MixedCaseIDColumn, query, queryset)\n\n    def test_order_handler(self):\n        \"\"\"\n        Test of raw raw query's tolerance for columns being returned in any\n        order\n        \"\"\"\n        selects = (\n            ('dob, last_name, first_name, id'),\n            ('last_name, dob, first_name, id'),\n            ('first_name, last_name, dob, id'),\n        )\n\n        for select in selects:\n            query = \"SELECT %s FROM raw_query_author\" % select\n            authors = Author.objects.all()\n            self.assertSuccessfulRawQuery(Author, query, authors)\n\n    def test_translations(self):\n        \"\"\"\n        Test of raw query's optional ability to translate unexpected result\n        column names to specific model fields\n        \"\"\"\n        query = \"SELECT first_name AS first, last_name AS last, dob, id FROM raw_query_author\"\n        translations = {'first': 'first_name', 'last': 'last_name'}\n        authors = Author.objects.all()\n        self.assertSuccessfulRawQuery(Author, query, authors, translations=translations)\n\n    def test_params(self):\n        \"\"\"\n        Test passing optional query parameters\n        \"\"\"\n        query = \"SELECT * FROM raw_query_author WHERE first_name = %s\"\n        author = Author.objects.all()[2]\n        params = [author.first_name]\n        qset = Author.objects.raw(query, params=params)\n        results = list(qset)\n        self.assertProcessed(Author, results, [author])\n        self.assertNoAnnotations(results)\n        self.assertEqual(len(results), 1)\n        self.assertIsInstance(repr(qset), str)\n\n    @skipUnlessDBFeature('supports_paramstyle_pyformat')\n    def test_pyformat_params(self):\n        \"\"\"\n        Test passing optional query parameters\n        \"\"\"\n        query = \"SELECT * FROM raw_query_author WHERE first_name = %(first)s\"\n        author = Author.objects.all()[2]\n        params = {'first': author.first_name}\n        qset = Author.objects.raw(query, params=params)\n        results = list(qset)\n        self.assertProcessed(Author, results, [author])\n        self.assertNoAnnotations(results)\n        self.assertEqual(len(results), 1)\n        self.assertIsInstance(repr(qset), str)\n\n    def test_query_representation(self):\n        \"\"\"\n        Test representation of raw query with parameters\n        \"\"\"\n        query = \"SELECT * FROM raw_query_author WHERE last_name = %(last)s\"\n        qset = Author.objects.raw(query, {'last': 'foo'})\n        self.assertEqual(repr(qset), \"<RawQuerySet: SELECT * FROM raw_query_author WHERE last_name = foo>\")\n        self.assertEqual(repr(qset.query), \"<RawQuery: SELECT * FROM raw_query_author WHERE last_name = foo>\")\n\n        query = \"SELECT * FROM raw_query_author WHERE last_name = %s\"\n        qset = Author.objects.raw(query, {'foo'})\n        self.assertEqual(repr(qset), \"<RawQuerySet: SELECT * FROM raw_query_author WHERE last_name = foo>\")\n        self.assertEqual(repr(qset.query), \"<RawQuery: SELECT * FROM raw_query_author WHERE last_name = foo>\")\n\n    def test_many_to_many(self):\n        \"\"\"\n        Test of a simple raw query against a model containing a m2m field\n        \"\"\"\n        query = \"SELECT * FROM raw_query_reviewer\"\n        reviewers = Reviewer.objects.all()\n        self.assertSuccessfulRawQuery(Reviewer, query, reviewers)\n\n    def test_extra_conversions(self):\n        \"\"\"\n        Test to insure that extra translations are ignored.\n        \"\"\"\n        query = \"SELECT * FROM raw_query_author\"\n        translations = {'something': 'else'}\n        authors = Author.objects.all()\n        self.assertSuccessfulRawQuery(Author, query, authors, translations=translations)\n\n    def test_missing_fields(self):\n        query = \"SELECT id, first_name, dob FROM raw_query_author\"\n        for author in Author.objects.raw(query):\n            self.assertIsNotNone(author.first_name)\n            \n            self.assertIsNotNone(author.last_name)\n\n    def test_missing_fields_without_PK(self):\n        query = \"SELECT first_name, dob FROM raw_query_author\"\n        with self.assertRaisesMessage(InvalidQuery, 'Raw query must include the primary key'):\n            list(Author.objects.raw(query))\n\n    def test_annotations(self):\n        query = (\n            \"SELECT a.*, count(b.id) as book_count \"\n            \"FROM raw_query_author a \"\n            \"LEFT JOIN raw_query_book b ON a.id = b.author_id \"\n            \"GROUP BY a.id, a.first_name, a.last_name, a.dob ORDER BY a.id\"\n        )\n        expected_annotations = (\n            ('book_count', 3),\n            ('book_count', 0),\n            ('book_count', 1),\n            ('book_count', 0),\n        )\n        authors = Author.objects.all()\n        self.assertSuccessfulRawQuery(Author, query, authors, expected_annotations)\n\n    def test_white_space_query(self):\n        query = \"    SELECT * FROM raw_query_author\"\n        authors = Author.objects.all()\n        self.assertSuccessfulRawQuery(Author, query, authors)\n\n    def test_multiple_iterations(self):\n        query = \"SELECT * FROM raw_query_author\"\n        normal_authors = Author.objects.all()\n        raw_authors = Author.objects.raw(query)\n\n        \n        first_iterations = 0\n        for index, raw_author in enumerate(raw_authors):\n            self.assertEqual(normal_authors[index], raw_author)\n            first_iterations += 1\n\n        \n        second_iterations = 0\n        for index, raw_author in enumerate(raw_authors):\n            self.assertEqual(normal_authors[index], raw_author)\n            second_iterations += 1\n\n        self.assertEqual(first_iterations, second_iterations)\n\n    def test_get_item(self):\n        \n        query = \"SELECT * FROM raw_query_author ORDER BY id ASC\"\n        third_author = Author.objects.raw(query)[2]\n        self.assertEqual(third_author.first_name, 'Bob')\n\n        first_two = Author.objects.raw(query)[0:2]\n        self.assertEqual(len(first_two), 2)\n\n        with self.assertRaises(TypeError):\n            Author.objects.raw(query)['test']\n\n    def test_inheritance(self):\n        f = FriendlyAuthor.objects.create(first_name=\"Wesley\", last_name=\"Chun\", dob=date(1962, 10, 28))\n        query = \"SELECT * FROM raw_query_friendlyauthor\"\n        self.assertEqual(\n            [o.pk for o in FriendlyAuthor.objects.raw(query)], [f.pk]\n        )\n\n    def test_query_count(self):\n        self.assertNumQueries(1, list, Author.objects.raw(\"SELECT * FROM raw_query_author\"))\n\n    def test_subquery_in_raw_sql(self):\n        list(Book.objects.raw('SELECT id FROM (SELECT * FROM raw_query_book WHERE paperback IS NOT NULL) sq'))\n\n    def test_db_column_name_is_used_in_raw_query(self):\n        \"\"\"\n        Regression test that ensures the `column` attribute on the field is\n        used to generate the list of fields included in the query, as opposed\n        to the `attname`. This is important when the primary key is a\n        ForeignKey field because `attname` and `column` are not necessarily the\n        same.\n        \"\"\"\n        b = BookFkAsPk.objects.create(book=self.b1)\n        self.assertEqual(list(BookFkAsPk.objects.raw('SELECT not_the_default FROM raw_query_bookfkaspk')), [b])\n\n    def test_decimal_parameter(self):\n        c = Coffee.objects.create(brand='starbucks', price=20.5)\n        qs = Coffee.objects.raw(\"SELECT * FROM raw_query_coffee WHERE price >= %s\", params=[Decimal(20)])\n        self.assertEqual(list(qs), [c])\n", "comments": "            execute passed query passed model check output                     results   list(model objects raw(query  params params  translations translations))         self assertprocessed(model  results  expected results  expected annotations)         self assertannotations(results  expected annotations)      def assertprocessed(self  model  results  orig  expected annotations ())                      compare results raw query expected results                     self assertequal(len(results)  len(orig))         index  item enumerate(results)              orig item   orig index              annotation expected annotations                  setattr(orig item   annotation)              field model  meta fields                    all values model equal                 self assertequal(                     getattr(item  field attname)                      getattr(orig item  field attname)                 )                   this includes checking type                 self assertequal(                     type(getattr(item  field attname))                      type(getattr(orig item  field attname))                 )      def assertnoannotations(self  results)                      the results raw query contain annotations                     self assertannotations(results  ())      def assertannotations(self  results  expected annotations)                      the passed raw query results contain expected annotations                     expected annotations              index  result enumerate(results)                  annotation  value   expected annotations index                  self asserttrue(hasattr(result  annotation))                 self assertequal(getattr(result  annotation)  value)      def test rawqueryset repr(self)          queryset   rawqueryset(raw query  select   from raw query author )         self assertequal(repr(queryset)    rawqueryset  select   from raw query author  )         self assertequal(repr(queryset query)    rawquery  select   from raw query author  )      def test simple raw query(self)                      basic test raw query simple database query                     query    select   from raw query author          authors   author objects all()         self assertsuccessfulrawquery(author  query  authors)      def test raw query lazy(self)                      raw queries lazy  actually executed         iterated                      q   author objects raw( select   from raw query author )         self assertisnone(q query cursor)         list(q)         self assertisnotnone(q query cursor)      def test fk raw query(self)                      test simple raw query model containing foreign key                     query    select   from raw query book          books   book objects all()         self assertsuccessfulrawquery(book  query  books)      def test db column handler(self)                      test simple raw query model containing field         db column defined                      query    select   from raw query coffee          coffees   coffee objects all()         self assertsuccessfulrawquery(coffee  query  coffees)      def test pk mixed case db column(self)                      a raw query model pk db column mixed case                      query    select   from raw query mixedcaseidcolumn          queryset   mixedcaseidcolumn objects all()         self assertsuccessfulrawquery(mixedcaseidcolumn  query  queryset)      def test order handler(self)                      test raw raw query tolerance columns returned         order                     selects   (             ( dob  last name  first name  id )              ( last name  dob  first name  id )              ( first name  last name  dob  id )          )          select selects              query    select  from raw query author    select             authors   author objects all()             self assertsuccessfulrawquery(author  query  authors)      def test translations(self)                      test raw query optional ability translate unexpected result         column names specific model fields                     query    select first name as first  last name as last  dob  id from raw query author          translations     first    first name    last    last name           authors   author objects all()         self assertsuccessfulrawquery(author  query  authors  translations translations)      def test params(self)                      test passing optional query parameters                     query    select   from raw query author where first name             author   author objects all() 2          params    author first name          qset   author objects raw(query  params params)         results   list(qset)         self assertprocessed(author  results   author )         self assertnoannotations(results)         self assertequal(len(results)  1)         self assertisinstance(repr(qset)  str)       skipunlessdbfeature( supports paramstyle pyformat )     def test pyformat params(self)                      test passing optional query parameters                     query    select   from raw query author where first name    (first)s          author   author objects all() 2          params     first   author first name          qset   author objects raw(query  params params)         results   list(qset)         self assertprocessed(author  results   author )         self assertnoannotations(results)         self assertequal(len(results)  1)         self assertisinstance(repr(qset)  str)      def test query representation(self)                      test representation raw query parameters                     query    select   from raw query author where last name    (last)s          qset   author objects raw(query    last    foo  )         self assertequal(repr(qset)    rawqueryset  select   from raw query author where last name   foo  )         self assertequal(repr(qset query)    rawquery  select   from raw query author where last name   foo  )          query    select   from raw query author where last name             qset   author objects raw(query    foo  )         self assertequal(repr(qset)    rawqueryset  select   from raw query author where last name   foo  )         self assertequal(repr(qset query)    rawquery  select   from raw query author where last name   foo  )      def test many many(self)                      test simple raw query model containing m2m field                     query    select   from raw query reviewer          reviewers   reviewer objects all()         self assertsuccessfulrawquery(reviewer  query  reviewers)      def test extra conversions(self)                      test insure extra translations ignored                      query    select   from raw query author          translations     something    else           authors   author objects all()         self assertsuccessfulrawquery(author  query  authors  translations translations)      def test missing fields(self)          query    select id  first name  dob from raw query author          author author objects raw(query)              self assertisnotnone(author first name)               last name given  retrieved demand             self assertisnotnone(author last name)      def test missing fields without pk(self)          query    select first name  dob from raw query author          self assertraisesmessage(invalidquery   raw query must include primary key )              list(author objects raw(query))      def test annotations(self)          query   (              select    count(b id) book count                from raw query author                left join raw query book b on id   b author id                group by id  first name  last name  dob order by id          )         expected annotations   (             ( book count   3)              ( book count   0)              ( book count   1)              ( book count   0)          )         authors   author objects all()         self assertsuccessfulrawquery(author  query  authors  expected annotations)      def test white space query(self)          query        select   from raw query author          authors   author objects all()         self assertsuccessfulrawquery(author  query  authors)      def test multiple iterations(self)          query    select   from raw query author          normal authors   author objects all()         raw authors   author objects raw(query)            first iteration         first iterations   0         index  raw author enumerate(raw authors)              self assertequal(normal authors index   raw author)             first iterations    1            second iteration         second iterations   0         index  raw author enumerate(raw authors)              self assertequal(normal authors index   raw author)             second iterations    1          self assertequal(first iterations  second iterations)      def test get item(self)            indexing rawquerysets         query    select   from raw query author order by id asc          third author   author objects raw(query) 2          self assertequal(third author first name   bob )          first two   author objects raw(query) 0 2          self assertequal(len(first two)  2)          self assertraises(typeerror)              author objects raw(query)  test        def test inheritance(self)          f   friendlyauthor objects create(first name  wesley   last name  chun   dob date(1962  10  28))         query    select   from raw query friendlyauthor          self assertequal(              pk friendlyauthor objects raw(query)    f pk          )      def test query count(self)          self assertnumqueries(1  list  author objects raw( select   from raw query author ))      def test subquery raw sql(self)          list(book objects raw( select id from (select   from raw query book where paperback is not null) sq ))      def test db column name used raw query(self)                      regression test ensures  column  attribute field         used generate list fields included query  opposed          attname   this important primary key         foreignkey field  attname   column  necessarily                         all values model equal    this includes checking type    last name given  retrieved demand    first iteration    second iteration    indexing rawquerysets ", "content": "from datetime import date\nfrom decimal import Decimal\n\nfrom django.db.models.query import RawQuerySet\nfrom django.db.models.query_utils import InvalidQuery\nfrom django.test import TestCase, skipUnlessDBFeature\n\nfrom .models import (\n    Author, Book, BookFkAsPk, Coffee, FriendlyAuthor, MixedCaseIDColumn,\n    Reviewer,\n)\n\n\nclass RawQueryTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.a1 = Author.objects.create(first_name='Joe', last_name='Smith', dob=date(1950, 9, 20))\n        cls.a2 = Author.objects.create(first_name='Jill', last_name='Doe', dob=date(1920, 4, 2))\n        cls.a3 = Author.objects.create(first_name='Bob', last_name='Smith', dob=date(1986, 1, 25))\n        cls.a4 = Author.objects.create(first_name='Bill', last_name='Jones', dob=date(1932, 5, 10))\n        cls.b1 = Book.objects.create(\n            title='The awesome book', author=cls.a1, paperback=False,\n            opening_line='It was a bright cold day in April and the clocks were striking thirteen.',\n        )\n        cls.b2 = Book.objects.create(\n            title='The horrible book', author=cls.a1, paperback=True,\n            opening_line=(\n                'On an evening in the latter part of May a middle-aged man '\n                'was walking homeward from Shaston to the village of Marlott, '\n                'in the adjoining Vale of Blakemore, or Blackmoor.'\n            ),\n        )\n        cls.b3 = Book.objects.create(\n            title='Another awesome book', author=cls.a1, paperback=False,\n            opening_line='A squat grey building of only thirty-four stories.',\n        )\n        cls.b4 = Book.objects.create(\n            title='Some other book', author=cls.a3, paperback=True,\n            opening_line='It was the day my grandmother exploded.',\n        )\n        cls.c1 = Coffee.objects.create(brand='dunkin doughnuts')\n        cls.c2 = Coffee.objects.create(brand='starbucks')\n        cls.r1 = Reviewer.objects.create()\n        cls.r2 = Reviewer.objects.create()\n        cls.r1.reviewed.add(cls.b2, cls.b3, cls.b4)\n\n    def assertSuccessfulRawQuery(self, model, query, expected_results,\n                                 expected_annotations=(), params=[], translations=None):\n        \"\"\"\n        Execute the passed query against the passed model and check the output\n        \"\"\"\n        results = list(model.objects.raw(query, params=params, translations=translations))\n        self.assertProcessed(model, results, expected_results, expected_annotations)\n        self.assertAnnotations(results, expected_annotations)\n\n    def assertProcessed(self, model, results, orig, expected_annotations=()):\n        \"\"\"\n        Compare the results of a raw query against expected results\n        \"\"\"\n        self.assertEqual(len(results), len(orig))\n        for index, item in enumerate(results):\n            orig_item = orig[index]\n            for annotation in expected_annotations:\n                setattr(orig_item, *annotation)\n\n            for field in model._meta.fields:\n                # All values on the model are equal\n                self.assertEqual(\n                    getattr(item, field.attname),\n                    getattr(orig_item, field.attname)\n                )\n                # This includes checking that they are the same type\n                self.assertEqual(\n                    type(getattr(item, field.attname)),\n                    type(getattr(orig_item, field.attname))\n                )\n\n    def assertNoAnnotations(self, results):\n        \"\"\"\n        The results of a raw query contain no annotations\n        \"\"\"\n        self.assertAnnotations(results, ())\n\n    def assertAnnotations(self, results, expected_annotations):\n        \"\"\"\n        The passed raw query results contain the expected annotations\n        \"\"\"\n        if expected_annotations:\n            for index, result in enumerate(results):\n                annotation, value = expected_annotations[index]\n                self.assertTrue(hasattr(result, annotation))\n                self.assertEqual(getattr(result, annotation), value)\n\n    def test_rawqueryset_repr(self):\n        queryset = RawQuerySet(raw_query='SELECT * FROM raw_query_author')\n        self.assertEqual(repr(queryset), '<RawQuerySet: SELECT * FROM raw_query_author>')\n        self.assertEqual(repr(queryset.query), '<RawQuery: SELECT * FROM raw_query_author>')\n\n    def test_simple_raw_query(self):\n        \"\"\"\n        Basic test of raw query with a simple database query\n        \"\"\"\n        query = \"SELECT * FROM raw_query_author\"\n        authors = Author.objects.all()\n        self.assertSuccessfulRawQuery(Author, query, authors)\n\n    def test_raw_query_lazy(self):\n        \"\"\"\n        Raw queries are lazy: they aren't actually executed until they're\n        iterated over.\n        \"\"\"\n        q = Author.objects.raw('SELECT * FROM raw_query_author')\n        self.assertIsNone(q.query.cursor)\n        list(q)\n        self.assertIsNotNone(q.query.cursor)\n\n    def test_FK_raw_query(self):\n        \"\"\"\n        Test of a simple raw query against a model containing a foreign key\n        \"\"\"\n        query = \"SELECT * FROM raw_query_book\"\n        books = Book.objects.all()\n        self.assertSuccessfulRawQuery(Book, query, books)\n\n    def test_db_column_handler(self):\n        \"\"\"\n        Test of a simple raw query against a model containing a field with\n        db_column defined.\n        \"\"\"\n        query = \"SELECT * FROM raw_query_coffee\"\n        coffees = Coffee.objects.all()\n        self.assertSuccessfulRawQuery(Coffee, query, coffees)\n\n    def test_pk_with_mixed_case_db_column(self):\n        \"\"\"\n        A raw query with a model that has a pk db_column with mixed case.\n        \"\"\"\n        query = \"SELECT * FROM raw_query_mixedcaseidcolumn\"\n        queryset = MixedCaseIDColumn.objects.all()\n        self.assertSuccessfulRawQuery(MixedCaseIDColumn, query, queryset)\n\n    def test_order_handler(self):\n        \"\"\"\n        Test of raw raw query's tolerance for columns being returned in any\n        order\n        \"\"\"\n        selects = (\n            ('dob, last_name, first_name, id'),\n            ('last_name, dob, first_name, id'),\n            ('first_name, last_name, dob, id'),\n        )\n\n        for select in selects:\n            query = \"SELECT %s FROM raw_query_author\" % select\n            authors = Author.objects.all()\n            self.assertSuccessfulRawQuery(Author, query, authors)\n\n    def test_translations(self):\n        \"\"\"\n        Test of raw query's optional ability to translate unexpected result\n        column names to specific model fields\n        \"\"\"\n        query = \"SELECT first_name AS first, last_name AS last, dob, id FROM raw_query_author\"\n        translations = {'first': 'first_name', 'last': 'last_name'}\n        authors = Author.objects.all()\n        self.assertSuccessfulRawQuery(Author, query, authors, translations=translations)\n\n    def test_params(self):\n        \"\"\"\n        Test passing optional query parameters\n        \"\"\"\n        query = \"SELECT * FROM raw_query_author WHERE first_name = %s\"\n        author = Author.objects.all()[2]\n        params = [author.first_name]\n        qset = Author.objects.raw(query, params=params)\n        results = list(qset)\n        self.assertProcessed(Author, results, [author])\n        self.assertNoAnnotations(results)\n        self.assertEqual(len(results), 1)\n        self.assertIsInstance(repr(qset), str)\n\n    @skipUnlessDBFeature('supports_paramstyle_pyformat')\n    def test_pyformat_params(self):\n        \"\"\"\n        Test passing optional query parameters\n        \"\"\"\n        query = \"SELECT * FROM raw_query_author WHERE first_name = %(first)s\"\n        author = Author.objects.all()[2]\n        params = {'first': author.first_name}\n        qset = Author.objects.raw(query, params=params)\n        results = list(qset)\n        self.assertProcessed(Author, results, [author])\n        self.assertNoAnnotations(results)\n        self.assertEqual(len(results), 1)\n        self.assertIsInstance(repr(qset), str)\n\n    def test_query_representation(self):\n        \"\"\"\n        Test representation of raw query with parameters\n        \"\"\"\n        query = \"SELECT * FROM raw_query_author WHERE last_name = %(last)s\"\n        qset = Author.objects.raw(query, {'last': 'foo'})\n        self.assertEqual(repr(qset), \"<RawQuerySet: SELECT * FROM raw_query_author WHERE last_name = foo>\")\n        self.assertEqual(repr(qset.query), \"<RawQuery: SELECT * FROM raw_query_author WHERE last_name = foo>\")\n\n        query = \"SELECT * FROM raw_query_author WHERE last_name = %s\"\n        qset = Author.objects.raw(query, {'foo'})\n        self.assertEqual(repr(qset), \"<RawQuerySet: SELECT * FROM raw_query_author WHERE last_name = foo>\")\n        self.assertEqual(repr(qset.query), \"<RawQuery: SELECT * FROM raw_query_author WHERE last_name = foo>\")\n\n    def test_many_to_many(self):\n        \"\"\"\n        Test of a simple raw query against a model containing a m2m field\n        \"\"\"\n        query = \"SELECT * FROM raw_query_reviewer\"\n        reviewers = Reviewer.objects.all()\n        self.assertSuccessfulRawQuery(Reviewer, query, reviewers)\n\n    def test_extra_conversions(self):\n        \"\"\"\n        Test to insure that extra translations are ignored.\n        \"\"\"\n        query = \"SELECT * FROM raw_query_author\"\n        translations = {'something': 'else'}\n        authors = Author.objects.all()\n        self.assertSuccessfulRawQuery(Author, query, authors, translations=translations)\n\n    def test_missing_fields(self):\n        query = \"SELECT id, first_name, dob FROM raw_query_author\"\n        for author in Author.objects.raw(query):\n            self.assertIsNotNone(author.first_name)\n            # last_name isn't given, but it will be retrieved on demand\n            self.assertIsNotNone(author.last_name)\n\n    def test_missing_fields_without_PK(self):\n        query = \"SELECT first_name, dob FROM raw_query_author\"\n        with self.assertRaisesMessage(InvalidQuery, 'Raw query must include the primary key'):\n            list(Author.objects.raw(query))\n\n    def test_annotations(self):\n        query = (\n            \"SELECT a.*, count(b.id) as book_count \"\n            \"FROM raw_query_author a \"\n            \"LEFT JOIN raw_query_book b ON a.id = b.author_id \"\n            \"GROUP BY a.id, a.first_name, a.last_name, a.dob ORDER BY a.id\"\n        )\n        expected_annotations = (\n            ('book_count', 3),\n            ('book_count', 0),\n            ('book_count', 1),\n            ('book_count', 0),\n        )\n        authors = Author.objects.all()\n        self.assertSuccessfulRawQuery(Author, query, authors, expected_annotations)\n\n    def test_white_space_query(self):\n        query = \"    SELECT * FROM raw_query_author\"\n        authors = Author.objects.all()\n        self.assertSuccessfulRawQuery(Author, query, authors)\n\n    def test_multiple_iterations(self):\n        query = \"SELECT * FROM raw_query_author\"\n        normal_authors = Author.objects.all()\n        raw_authors = Author.objects.raw(query)\n\n        # First Iteration\n        first_iterations = 0\n        for index, raw_author in enumerate(raw_authors):\n            self.assertEqual(normal_authors[index], raw_author)\n            first_iterations += 1\n\n        # Second Iteration\n        second_iterations = 0\n        for index, raw_author in enumerate(raw_authors):\n            self.assertEqual(normal_authors[index], raw_author)\n            second_iterations += 1\n\n        self.assertEqual(first_iterations, second_iterations)\n\n    def test_get_item(self):\n        # Indexing on RawQuerySets\n        query = \"SELECT * FROM raw_query_author ORDER BY id ASC\"\n        third_author = Author.objects.raw(query)[2]\n        self.assertEqual(third_author.first_name, 'Bob')\n\n        first_two = Author.objects.raw(query)[0:2]\n        self.assertEqual(len(first_two), 2)\n\n        with self.assertRaises(TypeError):\n            Author.objects.raw(query)['test']\n\n    def test_inheritance(self):\n        f = FriendlyAuthor.objects.create(first_name=\"Wesley\", last_name=\"Chun\", dob=date(1962, 10, 28))\n        query = \"SELECT * FROM raw_query_friendlyauthor\"\n        self.assertEqual(\n            [o.pk for o in FriendlyAuthor.objects.raw(query)], [f.pk]\n        )\n\n    def test_query_count(self):\n        self.assertNumQueries(1, list, Author.objects.raw(\"SELECT * FROM raw_query_author\"))\n\n    def test_subquery_in_raw_sql(self):\n        list(Book.objects.raw('SELECT id FROM (SELECT * FROM raw_query_book WHERE paperback IS NOT NULL) sq'))\n\n    def test_db_column_name_is_used_in_raw_query(self):\n        \"\"\"\n        Regression test that ensures the `column` attribute on the field is\n        used to generate the list of fields included in the query, as opposed\n        to the `attname`. This is important when the primary key is a\n        ForeignKey field because `attname` and `column` are not necessarily the\n        same.\n        \"\"\"\n        b = BookFkAsPk.objects.create(book=self.b1)\n        self.assertEqual(list(BookFkAsPk.objects.raw('SELECT not_the_default FROM raw_query_bookfkaspk')), [b])\n\n    def test_decimal_parameter(self):\n        c = Coffee.objects.create(brand='starbucks', price=20.5)\n        qs = Coffee.objects.raw(\"SELECT * FROM raw_query_coffee WHERE price >= %s\", params=[Decimal(20)])\n        self.assertEqual(list(qs), [c])\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "28064114bb9740df67a372ac6a5e7423", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/raw_query/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}