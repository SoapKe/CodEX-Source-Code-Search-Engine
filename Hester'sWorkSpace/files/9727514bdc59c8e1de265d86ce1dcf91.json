{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom django.contrib.auth.models import AnonymousUser\n\nfrom sentry.models import ApiKey, AuditLogEntryEvent, DeletedOrganization, DeletedTeam, DeletedProject\nfrom sentry.testutils import TestCase\nfrom sentry.utils.audit import create_audit_entry\n\n\nclass FakeHttpRequest(object):\n    def __init__(self, user):\n        self.user = user\n        self.META = {'REMOTE_ADDR': '127.0.0.1'}\n\n\nclass CreateAuditEntryTest(TestCase):\n\n    def setUp(self):\n        self.user = self.create_user()\n        self.req = FakeHttpRequest(self.user)\n        self.org = self.create_organization(owner=self.user)\n        self.team = self.create_team(organization=self.org)\n        self.project = self.create_project(teams=[self.team], platform='java')\n\n    def assert_no_delete_log_created(self):\n        assert not DeletedOrganization.objects.filter(slug=self.org.slug).exists()\n        assert not DeletedTeam.objects.filter(slug=self.team.slug).exists()\n        assert not DeletedProject.objects.filter(slug=self.project.slug).exists()\n\n    def test_audit_entry_api(self):\n        org = self.create_organization()\n        apikey = ApiKey.objects.create(\n            organization=org,\n            allowed_origins='*',\n        )\n\n        req = FakeHttpRequest(AnonymousUser())\n        req.auth = apikey\n\n        entry = create_audit_entry(req)\n        assert entry.actor_key == apikey\n        assert entry.actor is None\n        assert entry.ip_address == req.META['REMOTE_ADDR']\n\n        self.assert_no_delete_log_created()\n\n    def test_audit_entry_frontend(self):\n        req = FakeHttpRequest(self.create_user())\n        entry = create_audit_entry(req)\n\n        assert entry.actor == req.user\n        assert entry.actor_key is None\n        assert entry.ip_address == req.META['REMOTE_ADDR']\n\n        self.assert_no_delete_log_created()\n\n    def test_audit_entry_org_delete_log(self):\n        entry = create_audit_entry(\n            request=self.req,\n            organization=self.org,\n            target_object=self.org.id,\n            event=AuditLogEntryEvent.ORG_REMOVE,\n            data=self.org.get_audit_log_data(),\n        )\n\n        assert entry.actor == self.user\n        assert entry.target_object == self.org.id\n        assert entry.event == AuditLogEntryEvent.ORG_REMOVE\n\n        deleted_org = DeletedOrganization.objects.get(slug=self.org.slug)\n        self.assert_valid_deleted_log(deleted_org, self.org)\n\n    def test_audit_entry_team_delete_log(self):\n        entry = create_audit_entry(\n            request=self.req,\n            organization=self.org,\n            target_object=self.team.id,\n            event=AuditLogEntryEvent.TEAM_REMOVE,\n            data=self.team.get_audit_log_data(),\n        )\n\n        assert entry.actor == self.user\n        assert entry.target_object == self.team.id\n        assert entry.event == AuditLogEntryEvent.TEAM_REMOVE\n\n        deleted_team = DeletedTeam.objects.get(slug=self.team.slug)\n        self.assert_valid_deleted_log(deleted_team, self.team)\n\n    def test_audit_entry_project_delete_log(self):\n        entry = create_audit_entry(\n            request=self.req,\n            organization=self.org,\n            target_object=self.project.id,\n            event=AuditLogEntryEvent.PROJECT_REMOVE,\n            data=self.project.get_audit_log_data(),\n        )\n\n        assert entry.actor == self.user\n        assert entry.target_object == self.project.id\n        assert entry.event == AuditLogEntryEvent.PROJECT_REMOVE\n\n        deleted_project = DeletedProject.objects.get(slug=self.project.slug)\n        self.assert_valid_deleted_log(deleted_project, self.project)\n        assert deleted_project.platform == self.project.platform\n", "comments": "", "content": "from __future__ import absolute_import\n\nfrom django.contrib.auth.models import AnonymousUser\n\nfrom sentry.models import ApiKey, AuditLogEntryEvent, DeletedOrganization, DeletedTeam, DeletedProject\nfrom sentry.testutils import TestCase\nfrom sentry.utils.audit import create_audit_entry\n\n\nclass FakeHttpRequest(object):\n    def __init__(self, user):\n        self.user = user\n        self.META = {'REMOTE_ADDR': '127.0.0.1'}\n\n\nclass CreateAuditEntryTest(TestCase):\n\n    def setUp(self):\n        self.user = self.create_user()\n        self.req = FakeHttpRequest(self.user)\n        self.org = self.create_organization(owner=self.user)\n        self.team = self.create_team(organization=self.org)\n        self.project = self.create_project(teams=[self.team], platform='java')\n\n    def assert_no_delete_log_created(self):\n        assert not DeletedOrganization.objects.filter(slug=self.org.slug).exists()\n        assert not DeletedTeam.objects.filter(slug=self.team.slug).exists()\n        assert not DeletedProject.objects.filter(slug=self.project.slug).exists()\n\n    def test_audit_entry_api(self):\n        org = self.create_organization()\n        apikey = ApiKey.objects.create(\n            organization=org,\n            allowed_origins='*',\n        )\n\n        req = FakeHttpRequest(AnonymousUser())\n        req.auth = apikey\n\n        entry = create_audit_entry(req)\n        assert entry.actor_key == apikey\n        assert entry.actor is None\n        assert entry.ip_address == req.META['REMOTE_ADDR']\n\n        self.assert_no_delete_log_created()\n\n    def test_audit_entry_frontend(self):\n        req = FakeHttpRequest(self.create_user())\n        entry = create_audit_entry(req)\n\n        assert entry.actor == req.user\n        assert entry.actor_key is None\n        assert entry.ip_address == req.META['REMOTE_ADDR']\n\n        self.assert_no_delete_log_created()\n\n    def test_audit_entry_org_delete_log(self):\n        entry = create_audit_entry(\n            request=self.req,\n            organization=self.org,\n            target_object=self.org.id,\n            event=AuditLogEntryEvent.ORG_REMOVE,\n            data=self.org.get_audit_log_data(),\n        )\n\n        assert entry.actor == self.user\n        assert entry.target_object == self.org.id\n        assert entry.event == AuditLogEntryEvent.ORG_REMOVE\n\n        deleted_org = DeletedOrganization.objects.get(slug=self.org.slug)\n        self.assert_valid_deleted_log(deleted_org, self.org)\n\n    def test_audit_entry_team_delete_log(self):\n        entry = create_audit_entry(\n            request=self.req,\n            organization=self.org,\n            target_object=self.team.id,\n            event=AuditLogEntryEvent.TEAM_REMOVE,\n            data=self.team.get_audit_log_data(),\n        )\n\n        assert entry.actor == self.user\n        assert entry.target_object == self.team.id\n        assert entry.event == AuditLogEntryEvent.TEAM_REMOVE\n\n        deleted_team = DeletedTeam.objects.get(slug=self.team.slug)\n        self.assert_valid_deleted_log(deleted_team, self.team)\n\n    def test_audit_entry_project_delete_log(self):\n        entry = create_audit_entry(\n            request=self.req,\n            organization=self.org,\n            target_object=self.project.id,\n            event=AuditLogEntryEvent.PROJECT_REMOVE,\n            data=self.project.get_audit_log_data(),\n        )\n\n        assert entry.actor == self.user\n        assert entry.target_object == self.project.id\n        assert entry.event == AuditLogEntryEvent.PROJECT_REMOVE\n\n        deleted_project = DeletedProject.objects.get(slug=self.project.slug)\n        self.assert_valid_deleted_log(deleted_project, self.project)\n        assert deleted_project.platform == self.project.platform\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "tests.py", "id": "9727514bdc59c8e1de265d86ce1dcf91", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/audit/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}