{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    HEADRequest,\n    ExtractorError,\n    int_or_none,\n    update_url_query,\n    qualities,\n    get_element_by_attribute,\n    clean_html,\n)\n\n\nclass SinaIE(InfoExtractor):\n    _VALID_URL = r\n\n    _TESTS = [\n        {\n            'url': 'http://video.sina.com.cn/news/spj/topvideoes20160504/?opsubject_id=top1\n            'md5': 'd38433e2fc886007729735650ae4b3e9',\n            'info_dict': {\n                'id': '250576622',\n                'ext': 'mp4',\n                'title': '\u73b0\u573a:\u514b\u9c81\u5179\u5ba3\u5e03\u9000\u9009 \u7279\u6717\u666e\u5c06\u7a33\u83b7\u63d0\u540d',\n            }\n        },\n        {\n            'url': 'http://video.sina.com.cn/v/b/101314253-1290078633.html',\n            'info_dict': {\n                'id': '101314253',\n                'ext': 'flv',\n                'title': '\u519b\u65b9\u63d0\u9ad8\u5bf9\u671d\u60c5\u62a5\u76d1\u89c6\u7ea7\u522b',\n            },\n            'skip': 'the page does not exist or has been deleted',\n        },\n        {\n            'url': 'http://video.sina.com.cn/view/250587748.html',\n            'md5': '3d1807a25c775092aab3bc157fff49b4',\n            'info_dict': {\n                'id': '250587748',\n                'ext': 'mp4',\n                'title': '\u77ac\u95f4\u6cea\u76ee\uff1a8\u5e74\u524d\u6c76\u5ddd\u5730\u9707\u73cd\u8d35\u89c6\u9891\u9996\u66dd\u5149',\n            },\n        },\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        video_id = mobj.group('video_id')\n        if not video_id:\n            if mobj.group('token') is not None:\n                \n                self.to_screen('Getting video id')\n                request = HEADRequest(url)\n                (_, urlh) = self._download_webpage_handle(request, 'NA', False)\n                return self._real_extract(urlh.geturl())\n            else:\n                pseudo_id = mobj.group('pseudo_id')\n                webpage = self._download_webpage(url, pseudo_id)\n                error = get_element_by_attribute('class', 'errtitle', webpage)\n                if error:\n                    raise ExtractorError('%s said: %s' % (\n                        self.IE_NAME, clean_html(error)), expected=True)\n                video_id = self._search_regex(\n                    r\"video_id\\s*:\\s*'(\\d+)'\", webpage, 'video id')\n\n        video_data = self._download_json(\n            'http://s.video.sina.com.cn/video/h5play',\n            video_id, query={'video_id': video_id})\n        if video_data['code'] != 1:\n            raise ExtractorError('%s said: %s' % (\n                self.IE_NAME, video_data['message']), expected=True)\n        else:\n            video_data = video_data['data']\n            title = video_data['title']\n            description = video_data.get('description')\n            if description:\n                description = description.strip()\n\n            preference = qualities(['cif', 'sd', 'hd', 'fhd', 'ffd'])\n            formats = []\n            for quality_id, quality in video_data.get('videos', {}).get('mp4', {}).items():\n                file_api = quality.get('file_api')\n                file_id = quality.get('file_id')\n                if not file_api or not file_id:\n                    continue\n                formats.append({\n                    'format_id': quality_id,\n                    'url': update_url_query(file_api, {'vid': file_id}),\n                    'preference': preference(quality_id),\n                    'ext': 'mp4',\n                })\n            self._sort_formats(formats)\n\n            return {\n                'id': video_id,\n                'title': title,\n                'description': description,\n                'thumbnail': video_data.get('image'),\n                'duration': int_or_none(video_data.get('length')),\n                'timestamp': int_or_none(video_data.get('create_time')),\n                'formats': formats,\n            }\n", "comments": "(?x)https?://(?:.*?\\.)?video\\.sina\\.com\\.cn/\n                        (?:\n                            (?:view/|.*\\#)(?P<video_id>\\d+)|\n                            .+?/(?P<pseudo_id>[^/?#]+)(?:\\.s?html)|\n                            # This is used by external sites like Weibo\n                            api/sinawebApi/outplay.php/(?P<token>.+?)\\.swf\n                        )\n                  \n \n# coding: utf-8\n#250576622',\n# The video id is in the redirected url\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    HEADRequest,\n    ExtractorError,\n    int_or_none,\n    update_url_query,\n    qualities,\n    get_element_by_attribute,\n    clean_html,\n)\n\n\nclass SinaIE(InfoExtractor):\n    _VALID_URL = r'''(?x)https?://(?:.*?\\.)?video\\.sina\\.com\\.cn/\n                        (?:\n                            (?:view/|.*\\#)(?P<video_id>\\d+)|\n                            .+?/(?P<pseudo_id>[^/?#]+)(?:\\.s?html)|\n                            # This is used by external sites like Weibo\n                            api/sinawebApi/outplay.php/(?P<token>.+?)\\.swf\n                        )\n                  '''\n\n    _TESTS = [\n        {\n            'url': 'http://video.sina.com.cn/news/spj/topvideoes20160504/?opsubject_id=top1#250576622',\n            'md5': 'd38433e2fc886007729735650ae4b3e9',\n            'info_dict': {\n                'id': '250576622',\n                'ext': 'mp4',\n                'title': '\u73b0\u573a:\u514b\u9c81\u5179\u5ba3\u5e03\u9000\u9009 \u7279\u6717\u666e\u5c06\u7a33\u83b7\u63d0\u540d',\n            }\n        },\n        {\n            'url': 'http://video.sina.com.cn/v/b/101314253-1290078633.html',\n            'info_dict': {\n                'id': '101314253',\n                'ext': 'flv',\n                'title': '\u519b\u65b9\u63d0\u9ad8\u5bf9\u671d\u60c5\u62a5\u76d1\u89c6\u7ea7\u522b',\n            },\n            'skip': 'the page does not exist or has been deleted',\n        },\n        {\n            'url': 'http://video.sina.com.cn/view/250587748.html',\n            'md5': '3d1807a25c775092aab3bc157fff49b4',\n            'info_dict': {\n                'id': '250587748',\n                'ext': 'mp4',\n                'title': '\u77ac\u95f4\u6cea\u76ee\uff1a8\u5e74\u524d\u6c76\u5ddd\u5730\u9707\u73cd\u8d35\u89c6\u9891\u9996\u66dd\u5149',\n            },\n        },\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        video_id = mobj.group('video_id')\n        if not video_id:\n            if mobj.group('token') is not None:\n                # The video id is in the redirected url\n                self.to_screen('Getting video id')\n                request = HEADRequest(url)\n                (_, urlh) = self._download_webpage_handle(request, 'NA', False)\n                return self._real_extract(urlh.geturl())\n            else:\n                pseudo_id = mobj.group('pseudo_id')\n                webpage = self._download_webpage(url, pseudo_id)\n                error = get_element_by_attribute('class', 'errtitle', webpage)\n                if error:\n                    raise ExtractorError('%s said: %s' % (\n                        self.IE_NAME, clean_html(error)), expected=True)\n                video_id = self._search_regex(\n                    r\"video_id\\s*:\\s*'(\\d+)'\", webpage, 'video id')\n\n        video_data = self._download_json(\n            'http://s.video.sina.com.cn/video/h5play',\n            video_id, query={'video_id': video_id})\n        if video_data['code'] != 1:\n            raise ExtractorError('%s said: %s' % (\n                self.IE_NAME, video_data['message']), expected=True)\n        else:\n            video_data = video_data['data']\n            title = video_data['title']\n            description = video_data.get('description')\n            if description:\n                description = description.strip()\n\n            preference = qualities(['cif', 'sd', 'hd', 'fhd', 'ffd'])\n            formats = []\n            for quality_id, quality in video_data.get('videos', {}).get('mp4', {}).items():\n                file_api = quality.get('file_api')\n                file_id = quality.get('file_id')\n                if not file_api or not file_id:\n                    continue\n                formats.append({\n                    'format_id': quality_id,\n                    'url': update_url_query(file_api, {'vid': file_id}),\n                    'preference': preference(quality_id),\n                    'ext': 'mp4',\n                })\n            self._sort_formats(formats)\n\n            return {\n                'id': video_id,\n                'title': title,\n                'description': description,\n                'thumbnail': video_data.get('image'),\n                'duration': int_or_none(video_data.get('length')),\n                'timestamp': int_or_none(video_data.get('create_time')),\n                'formats': formats,\n            }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "sina.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/sina.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}