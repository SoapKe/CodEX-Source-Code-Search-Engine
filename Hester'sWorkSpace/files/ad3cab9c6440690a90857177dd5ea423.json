{"author": "python", "code": "import sys\nimport os\nimport struct\nfrom array import array\nfrom collections import namedtuple\nfrom datetime import datetime\n\nttinfo = namedtuple('ttinfo', ['tt_gmtoff', 'tt_isdst', 'tt_abbrind'])\n\nclass TZInfo:\n    def __init__(self, transitions, type_indices, ttis, abbrs):\n        self.transitions = transitions\n        self.type_indices = type_indices\n        self.ttis = ttis\n        self.abbrs = abbrs\n\n    @classmethod\n    def fromfile(cls, fileobj):\n        if fileobj.read(4).decode() != \"TZif\":\n            raise ValueError(\"not a zoneinfo file\")\n        fileobj.seek(20)\n        header = fileobj.read(24)\n        tzh = (tzh_ttisgmtcnt, tzh_ttisstdcnt, tzh_leapcnt,\n               tzh_timecnt, tzh_typecnt, tzh_charcnt) = struct.unpack(\">6l\", header)\n        transitions = array('i')\n        transitions.fromfile(fileobj, tzh_timecnt)\n        if sys.byteorder != 'big':\n            transitions.byteswap()\n\n        type_indices = array('B')\n        type_indices.fromfile(fileobj, tzh_timecnt)\n\n        ttis = []\n        for i in range(tzh_typecnt):\n            ttis.append(ttinfo._make(struct.unpack(\">lbb\", fileobj.read(6))))\n\n        abbrs = fileobj.read(tzh_charcnt)\n\n        self = cls(transitions, type_indices, ttis, abbrs)\n        self.tzh = tzh\n\n        return self\n\n    def dump(self, stream, start=None, end=None):\n        for j, (trans, i) in enumerate(zip(self.transitions, self.type_indices)):\n            utc = datetime.utcfromtimestamp(trans)\n            tti = self.ttis[i]\n            lmt = datetime.utcfromtimestamp(trans + tti.tt_gmtoff)\n            abbrind = tti.tt_abbrind\n            abbr = self.abbrs[abbrind:self.abbrs.find(0, abbrind)].decode()\n            if j > 0:\n                prev_tti = self.ttis[self.type_indices[j - 1]]\n                shift = \" %+g\" % ((tti.tt_gmtoff - prev_tti.tt_gmtoff) / 3600)\n            else:\n                shift = ''\n            print(\"%s UTC = %s %-5s isdst=%d\" % (utc, lmt, abbr, tti[1]) + shift, file=stream)\n\n    @classmethod\n    def zonelist(cls, zonedir='/usr/share/zoneinfo'):\n        zones = []\n        for root, _, files in os.walk(zonedir):\n            for f in files:\n                p = os.path.join(root, f)\n                with open(p, 'rb') as o:\n                    magic =  o.read(4)\n                if magic == b'TZif':\n                    zones.append(p[len(zonedir) + 1:])\n        return zones\n\nif __name__ == '__main__':\n    if len(sys.argv) < 2:\n        zones = TZInfo.zonelist()\n        for z in zones:\n            print(z)\n        sys.exit()\n    filepath = sys.argv[1]\n    if not filepath.startswith('/'):\n        filepath = os.path.join('/usr/share/zoneinfo', filepath)\n    with open(filepath, 'rb') as fileobj:\n        tzi = TZInfo.fromfile(fileobj)\n    tzi.dump(sys.stdout)\n", "comments": "", "content": "import sys\nimport os\nimport struct\nfrom array import array\nfrom collections import namedtuple\nfrom datetime import datetime\n\nttinfo = namedtuple('ttinfo', ['tt_gmtoff', 'tt_isdst', 'tt_abbrind'])\n\nclass TZInfo:\n    def __init__(self, transitions, type_indices, ttis, abbrs):\n        self.transitions = transitions\n        self.type_indices = type_indices\n        self.ttis = ttis\n        self.abbrs = abbrs\n\n    @classmethod\n    def fromfile(cls, fileobj):\n        if fileobj.read(4).decode() != \"TZif\":\n            raise ValueError(\"not a zoneinfo file\")\n        fileobj.seek(20)\n        header = fileobj.read(24)\n        tzh = (tzh_ttisgmtcnt, tzh_ttisstdcnt, tzh_leapcnt,\n               tzh_timecnt, tzh_typecnt, tzh_charcnt) = struct.unpack(\">6l\", header)\n        transitions = array('i')\n        transitions.fromfile(fileobj, tzh_timecnt)\n        if sys.byteorder != 'big':\n            transitions.byteswap()\n\n        type_indices = array('B')\n        type_indices.fromfile(fileobj, tzh_timecnt)\n\n        ttis = []\n        for i in range(tzh_typecnt):\n            ttis.append(ttinfo._make(struct.unpack(\">lbb\", fileobj.read(6))))\n\n        abbrs = fileobj.read(tzh_charcnt)\n\n        self = cls(transitions, type_indices, ttis, abbrs)\n        self.tzh = tzh\n\n        return self\n\n    def dump(self, stream, start=None, end=None):\n        for j, (trans, i) in enumerate(zip(self.transitions, self.type_indices)):\n            utc = datetime.utcfromtimestamp(trans)\n            tti = self.ttis[i]\n            lmt = datetime.utcfromtimestamp(trans + tti.tt_gmtoff)\n            abbrind = tti.tt_abbrind\n            abbr = self.abbrs[abbrind:self.abbrs.find(0, abbrind)].decode()\n            if j > 0:\n                prev_tti = self.ttis[self.type_indices[j - 1]]\n                shift = \" %+g\" % ((tti.tt_gmtoff - prev_tti.tt_gmtoff) / 3600)\n            else:\n                shift = ''\n            print(\"%s UTC = %s %-5s isdst=%d\" % (utc, lmt, abbr, tti[1]) + shift, file=stream)\n\n    @classmethod\n    def zonelist(cls, zonedir='/usr/share/zoneinfo'):\n        zones = []\n        for root, _, files in os.walk(zonedir):\n            for f in files:\n                p = os.path.join(root, f)\n                with open(p, 'rb') as o:\n                    magic =  o.read(4)\n                if magic == b'TZif':\n                    zones.append(p[len(zonedir) + 1:])\n        return zones\n\nif __name__ == '__main__':\n    if len(sys.argv) < 2:\n        zones = TZInfo.zonelist()\n        for z in zones:\n            print(z)\n        sys.exit()\n    filepath = sys.argv[1]\n    if not filepath.startswith('/'):\n        filepath = os.path.join('/usr/share/zoneinfo', filepath)\n    with open(filepath, 'rb') as fileobj:\n        tzi = TZInfo.fromfile(fileobj)\n    tzi.dump(sys.stdout)\n", "description": "The Python programming language", "file_name": "zdump.py", "id": "ad3cab9c6440690a90857177dd5ea423", "language": "Python", "project_name": "cpython", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/python-cpython/python-cpython-74f5687/Tools/tz/zdump.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:20:38Z", "url": "https://github.com/python/cpython", "wiki": false}