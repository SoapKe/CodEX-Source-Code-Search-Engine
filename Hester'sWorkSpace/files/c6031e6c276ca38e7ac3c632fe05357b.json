{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport base64\nimport io\nimport json\nimport mimetypes\nimport netrc\nimport optparse\nimport os\nimport re\nimport sys\n\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom youtube_dl.compat import (\n    compat_basestring,\n    compat_input,\n    compat_getpass,\n    compat_print,\n    compat_urllib_request,\n)\nfrom youtube_dl.utils import (\n    make_HTTPS_handler,\n    sanitized_Request,\n)\n\n\nclass GitHubReleaser(object):\n    _API_URL = 'https://api.github.com/repos/rg3/youtube-dl/releases'\n    _UPLOADS_URL = 'https://uploads.github.com/repos/rg3/youtube-dl/releases/%s/assets?name=%s'\n    _NETRC_MACHINE = 'github.com'\n\n    def __init__(self, debuglevel=0):\n        self._init_github_account()\n        https_handler = make_HTTPS_handler({}, debuglevel=debuglevel)\n        self._opener = compat_urllib_request.build_opener(https_handler)\n\n    def _init_github_account(self):\n        try:\n            info = netrc.netrc().authenticators(self._NETRC_MACHINE)\n            if info is not None:\n                self._username = info[0]\n                self._password = info[2]\n                compat_print('Using GitHub credentials found in .netrc...')\n                return\n            else:\n                compat_print('No GitHub credentials found in .netrc')\n        except (IOError, netrc.NetrcParseError):\n            compat_print('Unable to parse .netrc')\n        self._username = compat_input(\n            'Type your GitHub username or email address and press [Return]: ')\n        self._password = compat_getpass(\n            'Type your GitHub password and press [Return]: ')\n\n    def _call(self, req):\n        if isinstance(req, compat_basestring):\n            req = sanitized_Request(req)\n        \n        \n        \n        b64 = base64.b64encode(\n            ('%s:%s' % (self._username, self._password)).encode('utf-8')).decode('ascii')\n        req.add_header('Authorization', 'Basic %s' % b64)\n        response = self._opener.open(req).read().decode('utf-8')\n        return json.loads(response)\n\n    def list_releases(self):\n        return self._call(self._API_URL)\n\n    def create_release(self, tag_name, name=None, body='', draft=False, prerelease=False):\n        data = {\n            'tag_name': tag_name,\n            'target_commitish': 'master',\n            'name': name,\n            'body': body,\n            'draft': draft,\n            'prerelease': prerelease,\n        }\n        req = sanitized_Request(self._API_URL, json.dumps(data).encode('utf-8'))\n        return self._call(req)\n\n    def create_asset(self, release_id, asset):\n        asset_name = os.path.basename(asset)\n        url = self._UPLOADS_URL % (release_id, asset_name)\n        \n        data = open(asset, 'rb').read()\n        req = sanitized_Request(url, data)\n        mime_type, _ = mimetypes.guess_type(asset_name)\n        req.add_header('Content-Type', mime_type or 'application/octet-stream')\n        return self._call(req)\n\n\ndef main():\n    parser = optparse.OptionParser(usage='%prog CHANGELOG VERSION BUILDPATH')\n    options, args = parser.parse_args()\n    if len(args) != 3:\n        parser.error('Expected a version and a build directory')\n\n    changelog_file, version, build_path = args\n\n    with io.open(changelog_file, encoding='utf-8') as inf:\n        changelog = inf.read()\n\n    mobj = re.search(r'(?s)version %s\\n{2}(.+?)\\n{3}' % version, changelog)\n    body = mobj.group(1) if mobj else ''\n\n    releaser = GitHubReleaser()\n\n    new_release = releaser.create_release(\n        version, name='youtube-dl %s' % version, body=body)\n    release_id = new_release['id']\n\n    for asset in os.listdir(build_path):\n        compat_print('Uploading %s...' % asset)\n        releaser.create_asset(release_id, os.path.join(build_path, asset))\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "#!/usr/bin/env python\n# Authorizing manually since GitHub does not response with 401 with\n# WWW-Authenticate header set (see\n# https://developer.github.com/v3/#basic-authentication)\n# Our files are small enough to be loaded directly into memory.\n", "content": "#!/usr/bin/env python\nfrom __future__ import unicode_literals\n\nimport base64\nimport io\nimport json\nimport mimetypes\nimport netrc\nimport optparse\nimport os\nimport re\nimport sys\n\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom youtube_dl.compat import (\n    compat_basestring,\n    compat_input,\n    compat_getpass,\n    compat_print,\n    compat_urllib_request,\n)\nfrom youtube_dl.utils import (\n    make_HTTPS_handler,\n    sanitized_Request,\n)\n\n\nclass GitHubReleaser(object):\n    _API_URL = 'https://api.github.com/repos/rg3/youtube-dl/releases'\n    _UPLOADS_URL = 'https://uploads.github.com/repos/rg3/youtube-dl/releases/%s/assets?name=%s'\n    _NETRC_MACHINE = 'github.com'\n\n    def __init__(self, debuglevel=0):\n        self._init_github_account()\n        https_handler = make_HTTPS_handler({}, debuglevel=debuglevel)\n        self._opener = compat_urllib_request.build_opener(https_handler)\n\n    def _init_github_account(self):\n        try:\n            info = netrc.netrc().authenticators(self._NETRC_MACHINE)\n            if info is not None:\n                self._username = info[0]\n                self._password = info[2]\n                compat_print('Using GitHub credentials found in .netrc...')\n                return\n            else:\n                compat_print('No GitHub credentials found in .netrc')\n        except (IOError, netrc.NetrcParseError):\n            compat_print('Unable to parse .netrc')\n        self._username = compat_input(\n            'Type your GitHub username or email address and press [Return]: ')\n        self._password = compat_getpass(\n            'Type your GitHub password and press [Return]: ')\n\n    def _call(self, req):\n        if isinstance(req, compat_basestring):\n            req = sanitized_Request(req)\n        # Authorizing manually since GitHub does not response with 401 with\n        # WWW-Authenticate header set (see\n        # https://developer.github.com/v3/#basic-authentication)\n        b64 = base64.b64encode(\n            ('%s:%s' % (self._username, self._password)).encode('utf-8')).decode('ascii')\n        req.add_header('Authorization', 'Basic %s' % b64)\n        response = self._opener.open(req).read().decode('utf-8')\n        return json.loads(response)\n\n    def list_releases(self):\n        return self._call(self._API_URL)\n\n    def create_release(self, tag_name, name=None, body='', draft=False, prerelease=False):\n        data = {\n            'tag_name': tag_name,\n            'target_commitish': 'master',\n            'name': name,\n            'body': body,\n            'draft': draft,\n            'prerelease': prerelease,\n        }\n        req = sanitized_Request(self._API_URL, json.dumps(data).encode('utf-8'))\n        return self._call(req)\n\n    def create_asset(self, release_id, asset):\n        asset_name = os.path.basename(asset)\n        url = self._UPLOADS_URL % (release_id, asset_name)\n        # Our files are small enough to be loaded directly into memory.\n        data = open(asset, 'rb').read()\n        req = sanitized_Request(url, data)\n        mime_type, _ = mimetypes.guess_type(asset_name)\n        req.add_header('Content-Type', mime_type or 'application/octet-stream')\n        return self._call(req)\n\n\ndef main():\n    parser = optparse.OptionParser(usage='%prog CHANGELOG VERSION BUILDPATH')\n    options, args = parser.parse_args()\n    if len(args) != 3:\n        parser.error('Expected a version and a build directory')\n\n    changelog_file, version, build_path = args\n\n    with io.open(changelog_file, encoding='utf-8') as inf:\n        changelog = inf.read()\n\n    mobj = re.search(r'(?s)version %s\\n{2}(.+?)\\n{3}' % version, changelog)\n    body = mobj.group(1) if mobj else ''\n\n    releaser = GitHubReleaser()\n\n    new_release = releaser.create_release(\n        version, name='youtube-dl %s' % version, body=body)\n    release_id = new_release['id']\n\n    for asset in os.listdir(build_path):\n        compat_print('Uploading %s...' % asset)\n        releaser.create_asset(release_id, os.path.join(build_path, asset))\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "create-github-release.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/devscripts/create-github-release.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}