{"author": "rg3", "code": "\n\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_iso8601,\n    qualities,\n)\n\nimport re\n\n\nclass ClippitIE(InfoExtractor):\n\n    _VALID_URL = r'https?://(?:www\\.)?clippituser\\.tv/c/(?P<id>[a-z]+)'\n    _TEST = {\n        'url': 'https://www.clippituser.tv/c/evmgm',\n        'md5': '963ae7a59a2ec4572ab8bf2f2d2c5f09',\n        'info_dict': {\n            'id': 'evmgm',\n            'ext': 'mp4',\n            'title': 'Bye bye Brutus. \n            'uploader': 'lizllove',\n            'uploader_url': 'https://www.clippituser.tv/p/lizllove',\n            'timestamp': 1472183818,\n            'upload_date': '20160826',\n            'description': 'BattleBots | ABC',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_regex(r'<title.*>(.+?)</title>', webpage, 'title')\n\n        FORMATS = ('sd', 'hd')\n        quality = qualities(FORMATS)\n        formats = []\n        for format_id in FORMATS:\n            url = self._html_search_regex(r'data-%s-file=\"(.+?)\"' % format_id,\n                                          webpage, 'url', fatal=False)\n            if not url:\n                continue\n            match = re.search(r'/(?P<height>\\d+)\\.mp4', url)\n            formats.append({\n                'url': url,\n                'format_id': format_id,\n                'quality': quality(format_id),\n                'height': int(match.group('height')) if match else None,\n            })\n\n        uploader = self._html_search_regex(r'class=\"username\".*>\\s+(.+?)\\n',\n                                           webpage, 'uploader', fatal=False)\n        uploader_url = ('https://www.clippituser.tv/p/' + uploader\n                        if uploader else None)\n\n        timestamp = self._html_search_regex(r'datetime=\"(.+?)\"',\n                                            webpage, 'date', fatal=False)\n        thumbnail = self._html_search_regex(r'data-image=\"(.+?)\"',\n                                            webpage, 'thumbnail', fatal=False)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'uploader': uploader,\n            'uploader_url': uploader_url,\n            'timestamp': parse_iso8601(timestamp),\n            'description': self._og_search_description(webpage),\n            'thumbnail': thumbnail,\n        }\n", "comments": "# coding: utf-8\n#BattleBots  - Clippit',\n", "content": "# coding: utf-8\n\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_iso8601,\n    qualities,\n)\n\nimport re\n\n\nclass ClippitIE(InfoExtractor):\n\n    _VALID_URL = r'https?://(?:www\\.)?clippituser\\.tv/c/(?P<id>[a-z]+)'\n    _TEST = {\n        'url': 'https://www.clippituser.tv/c/evmgm',\n        'md5': '963ae7a59a2ec4572ab8bf2f2d2c5f09',\n        'info_dict': {\n            'id': 'evmgm',\n            'ext': 'mp4',\n            'title': 'Bye bye Brutus. #BattleBots  - Clippit',\n            'uploader': 'lizllove',\n            'uploader_url': 'https://www.clippituser.tv/p/lizllove',\n            'timestamp': 1472183818,\n            'upload_date': '20160826',\n            'description': 'BattleBots | ABC',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_regex(r'<title.*>(.+?)</title>', webpage, 'title')\n\n        FORMATS = ('sd', 'hd')\n        quality = qualities(FORMATS)\n        formats = []\n        for format_id in FORMATS:\n            url = self._html_search_regex(r'data-%s-file=\"(.+?)\"' % format_id,\n                                          webpage, 'url', fatal=False)\n            if not url:\n                continue\n            match = re.search(r'/(?P<height>\\d+)\\.mp4', url)\n            formats.append({\n                'url': url,\n                'format_id': format_id,\n                'quality': quality(format_id),\n                'height': int(match.group('height')) if match else None,\n            })\n\n        uploader = self._html_search_regex(r'class=\"username\".*>\\s+(.+?)\\n',\n                                           webpage, 'uploader', fatal=False)\n        uploader_url = ('https://www.clippituser.tv/p/' + uploader\n                        if uploader else None)\n\n        timestamp = self._html_search_regex(r'datetime=\"(.+?)\"',\n                                            webpage, 'date', fatal=False)\n        thumbnail = self._html_search_regex(r'data-image=\"(.+?)\"',\n                                            webpage, 'thumbnail', fatal=False)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'uploader': uploader,\n            'uploader_url': uploader_url,\n            'timestamp': parse_iso8601(timestamp),\n            'description': self._og_search_description(webpage),\n            'thumbnail': thumbnail,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "clippit.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/clippit.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}