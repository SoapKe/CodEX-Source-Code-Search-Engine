{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\nimport os\n\n internal imports\nimport tensorflow as tf\n\nimport magenta\nfrom magenta.models.melody_rnn import melody_rnn_config_flags\nfrom magenta.models.shared import events_rnn_graph\nfrom magenta.models.shared import events_rnn_train\n\nFLAGS = tf.app.flags.FLAGS\ntf.app.flags.DEFINE_string('run_dir', '/tmp/melody_rnn/logdir/run1',\n                           'Path to the directory where checkpoints and '\n                           'summary events will be saved during training and '\n                           'evaluation. Separate subdirectories for training '\n                           'events and eval events will be created within '\n                           '`run_dir`. Multiple runs can be stored within the '\n                           'parent directory of `run_dir`. Point TensorBoard '\n                           'to the parent directory of `run_dir` to see all '\n                           'your runs.')\ntf.app.flags.DEFINE_string('sequence_example_file', '',\n                           'Path to TFRecord file containing '\n                           'tf.SequenceExample records for training or '\n                           'evaluation. A filepattern may also be provided, '\n                           'which will be expanded to all matching files.')\ntf.app.flags.DEFINE_integer('num_training_steps', 0,\n                            'The the number of global training steps your '\n                            'model should take before exiting training. '\n                            'Leave as 0 to run until terminated manually.')\ntf.app.flags.DEFINE_integer('num_eval_examples', 0,\n                            'The number of evaluation examples your model '\n                            'should process for each evaluation step.'\n                            'Leave as 0 to use the entire evaluation set.')\ntf.app.flags.DEFINE_integer('summary_frequency', 10,\n                            'A summary statement will be logged every '\n                            '`summary_frequency` steps during training or '\n                            'every `summary_frequency` seconds during '\n                            'evaluation.')\ntf.app.flags.DEFINE_integer('num_checkpoints', 10,\n                            'The number of most recent checkpoints to keep in '\n                            'the training directory. Keeps all if 0.')\ntf.app.flags.DEFINE_boolean('eval', False,\n                            'If True, this process only evaluates the model '\n                            'and does not update weights.')\ntf.app.flags.DEFINE_string('log', 'INFO',\n                           'The threshold for what messages will be logged '\n                           'DEBUG, INFO, WARN, ERROR, or FATAL.')\n\n\ndef main(unused_argv):\n  tf.logging.set_verbosity(FLAGS.log)\n\n  if not FLAGS.run_dir:\n    tf.logging.fatal('--run_dir required')\n    return\n  if not FLAGS.sequence_example_file:\n    tf.logging.fatal('--sequence_example_file required')\n    return\n\n  sequence_example_file_paths = tf.gfile.Glob(\n      os.path.expanduser(FLAGS.sequence_example_file))\n  run_dir = os.path.expanduser(FLAGS.run_dir)\n\n  config = melody_rnn_config_flags.config_from_flags()\n\n  mode = 'eval' if FLAGS.eval else 'train'\n  build_graph_fn = events_rnn_graph.get_build_graph_fn(\n      mode, config, sequence_example_file_paths)\n\n  train_dir = os.path.join(run_dir, 'train')\n  if not os.path.exists(train_dir):\n    tf.gfile.MakeDirs(train_dir)\n  tf.logging.info('Train dir: %s', train_dir)\n\n  if FLAGS.eval:\n    eval_dir = os.path.join(run_dir, 'eval')\n    if not os.path.exists(eval_dir):\n      tf.gfile.MakeDirs(eval_dir)\n    tf.logging.info('Eval dir: %s', eval_dir)\n    num_batches = (\n        (FLAGS.num_eval_examples if FLAGS.num_eval_examples else\n         magenta.common.count_records(sequence_example_file_paths)) //\n        config.hparams.batch_size)\n    events_rnn_train.run_eval(build_graph_fn, train_dir, eval_dir, num_batches)\n\n  else:\n    events_rnn_train.run_training(build_graph_fn, train_dir,\n                                  FLAGS.num_training_steps,\n                                  FLAGS.summary_frequency,\n                                  checkpoints_to_keep=FLAGS.num_checkpoints)\n\n\ndef console_entry_point():\n  tf.app.run(main)\n\n\nif __name__ == '__main__':\n  console_entry_point()\n", "comments": "   train evaluate melody rnn model        copyright 2016 google inc  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license          http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license     internal imports ", "content": "# Copyright 2016 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Train and evaluate a melody RNN model.\"\"\"\n\nimport os\n\n# internal imports\nimport tensorflow as tf\n\nimport magenta\nfrom magenta.models.melody_rnn import melody_rnn_config_flags\nfrom magenta.models.shared import events_rnn_graph\nfrom magenta.models.shared import events_rnn_train\n\nFLAGS = tf.app.flags.FLAGS\ntf.app.flags.DEFINE_string('run_dir', '/tmp/melody_rnn/logdir/run1',\n                           'Path to the directory where checkpoints and '\n                           'summary events will be saved during training and '\n                           'evaluation. Separate subdirectories for training '\n                           'events and eval events will be created within '\n                           '`run_dir`. Multiple runs can be stored within the '\n                           'parent directory of `run_dir`. Point TensorBoard '\n                           'to the parent directory of `run_dir` to see all '\n                           'your runs.')\ntf.app.flags.DEFINE_string('sequence_example_file', '',\n                           'Path to TFRecord file containing '\n                           'tf.SequenceExample records for training or '\n                           'evaluation. A filepattern may also be provided, '\n                           'which will be expanded to all matching files.')\ntf.app.flags.DEFINE_integer('num_training_steps', 0,\n                            'The the number of global training steps your '\n                            'model should take before exiting training. '\n                            'Leave as 0 to run until terminated manually.')\ntf.app.flags.DEFINE_integer('num_eval_examples', 0,\n                            'The number of evaluation examples your model '\n                            'should process for each evaluation step.'\n                            'Leave as 0 to use the entire evaluation set.')\ntf.app.flags.DEFINE_integer('summary_frequency', 10,\n                            'A summary statement will be logged every '\n                            '`summary_frequency` steps during training or '\n                            'every `summary_frequency` seconds during '\n                            'evaluation.')\ntf.app.flags.DEFINE_integer('num_checkpoints', 10,\n                            'The number of most recent checkpoints to keep in '\n                            'the training directory. Keeps all if 0.')\ntf.app.flags.DEFINE_boolean('eval', False,\n                            'If True, this process only evaluates the model '\n                            'and does not update weights.')\ntf.app.flags.DEFINE_string('log', 'INFO',\n                           'The threshold for what messages will be logged '\n                           'DEBUG, INFO, WARN, ERROR, or FATAL.')\n\n\ndef main(unused_argv):\n  tf.logging.set_verbosity(FLAGS.log)\n\n  if not FLAGS.run_dir:\n    tf.logging.fatal('--run_dir required')\n    return\n  if not FLAGS.sequence_example_file:\n    tf.logging.fatal('--sequence_example_file required')\n    return\n\n  sequence_example_file_paths = tf.gfile.Glob(\n      os.path.expanduser(FLAGS.sequence_example_file))\n  run_dir = os.path.expanduser(FLAGS.run_dir)\n\n  config = melody_rnn_config_flags.config_from_flags()\n\n  mode = 'eval' if FLAGS.eval else 'train'\n  build_graph_fn = events_rnn_graph.get_build_graph_fn(\n      mode, config, sequence_example_file_paths)\n\n  train_dir = os.path.join(run_dir, 'train')\n  if not os.path.exists(train_dir):\n    tf.gfile.MakeDirs(train_dir)\n  tf.logging.info('Train dir: %s', train_dir)\n\n  if FLAGS.eval:\n    eval_dir = os.path.join(run_dir, 'eval')\n    if not os.path.exists(eval_dir):\n      tf.gfile.MakeDirs(eval_dir)\n    tf.logging.info('Eval dir: %s', eval_dir)\n    num_batches = (\n        (FLAGS.num_eval_examples if FLAGS.num_eval_examples else\n         magenta.common.count_records(sequence_example_file_paths)) //\n        config.hparams.batch_size)\n    events_rnn_train.run_eval(build_graph_fn, train_dir, eval_dir, num_batches)\n\n  else:\n    events_rnn_train.run_training(build_graph_fn, train_dir,\n                                  FLAGS.num_training_steps,\n                                  FLAGS.summary_frequency,\n                                  checkpoints_to_keep=FLAGS.num_checkpoints)\n\n\ndef console_entry_point():\n  tf.app.run(main)\n\n\nif __name__ == '__main__':\n  console_entry_point()\n", "description": "Magenta: Music and Art Generation with Machine Intelligence", "file_name": "melody_rnn_train.py", "id": "47f14dc7c0945cd33af8b9d9cefeeba5", "language": "Python", "project_name": "magenta", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-magenta/tensorflow-magenta-c3eda3d/magenta/models/melody_rnn/melody_rnn_train.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:52:33Z", "url": "https://github.com/tensorflow/magenta", "wiki": false}