{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2017, Jacob McGill (jmcgill298)\n# Copyright: (c) 2018, Dag Wieers (dagwieers) <dag@wieers.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_vlan_pool_encap_block\nshort_description: Manage encap blocks assigned to VLAN pools (fvns:EncapBlk)\ndescription:\n- Manage VLAN encap blocks that are assigned to VLAN pools on Cisco ACI fabrics.\nnotes:\n- The C(pool) must exist in order to add or delete a encap block.\n- More information about the internal APIC class B(fvns:EncapBlk) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Jacob McGill (@jmcgill298)\n- Dag Wieers (@dagwieers)\nversion_added: '2.5'\noptions:\n  allocation_mode:\n    description:\n    - The method used for allocating encaps to resources.\n    aliases: [ mode ]\n    choices: [ dynamic, inherit, static]\n  description:\n    description:\n    - Description for the pool encap block.\n    aliases: [ descr ]\n  pool:\n    description:\n    - The name of the pool that the encap block should be assigned to.\n    aliases: [ pool_name ]\n  pool_allocation_mode:\n    description:\n    - The method used for allocating encaps to resources.\n    choices: [ dynamic, static]\n    aliases: [ pool_mode ]\n  block_end:\n    description:\n    - The end of encap block.\n    aliases: [ end ]\n  block_name:\n    description:\n    - The name to give to the encap block.\n    aliases: [ name ]\n  block_start:\n    description:\n    - The start of the encap block.\n    aliases: [ start ]\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add a new VLAN encap block\n  aci_vlan_pool_encap_block:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    pool: production\n    block_start: 20\n    block_end: 50\n    state: present\n\n- name: Remove a VLAN encap block\n  aci_vlan_pool_encap_block:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    pool: production\n    block_start: 20\n    block_end: 50\n    state: absent\n\n- name: Query a VLAN encap block\n  aci_vlan_pool_encap_block:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    pool: production\n    block_start: 20\n    block_end: 50\n    state: query\n\n- name: Query a VLAN pool for encap blocks\n  aci_vlan_pool_encap_block:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    pool: production\n    state: query\n\n- name: Query all VLAN encap blocks\n  aci_vlan_pool_encap_block:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        allocation_mode=dict(type='str', aliases=['mode'], choices=['dynamic', 'inherit', 'static']),\n        description=dict(type='str', aliases=['descr']),\n        pool=dict(type='str', aliases=['pool_name']),  \n        pool_allocation_mode=dict(type='str', aliases=['pool_mode'], choices=['dynamic', 'static']),\n        block_name=dict(type='str', aliases=['name']),  \n        block_end=dict(type='int', aliases=['end']),  \n        block_start=dict(type='int', aliases=[\"start\"]),  \n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['pool', 'block_end', 'block_name', 'block_start']],\n            ['state', 'present', ['pool', 'block_end', 'block_name', 'block_start']],\n        ],\n    )\n\n    allocation_mode = module.params['allocation_mode']\n    description = module.params['description']\n    pool = module.params['pool']\n    pool_allocation_mode = module.params['pool_allocation_mode']\n    block_end = module.params['block_end']\n    block_name = module.params['block_name']\n    block_start = module.params['block_start']\n    state = module.params['state']\n\n    if block_end is not None:\n        encap_end = 'vlan-{0}'.format(block_end)\n    else:\n        encap_end = None\n\n    if block_start is not None:\n        encap_start = 'vlan-{0}'.format(block_start)\n    else:\n        encap_start = None\n\n    \n    aci_block_mo = 'from-[{0}]-to-[{1}]'.format(encap_start, encap_end)\n    pool_name = pool\n\n    \n    for encap_id in block_end, block_start:\n        if encap_id is not None:\n            if not 1 <= encap_id <= 4094:\n                module.fail_json(msg=\"vlan pools must have 'block_start' and 'block_end' values between 1 and 4094\")\n\n    \n    if block_end is not None and block_start is not None:\n        \n        if block_start > block_end:\n            module.fail_json(msg=\"The 'block_start' must be less than or equal to the 'block_end'\")\n\n        if block_name is None:\n            block_filter_target = 'and(eq({0}.from, \"{1}\"),eq({0}.to, \"{2}\"))'.format('fvnsEncapBlk', encap_start, encap_end)\n        else:\n            block_filter_target = 'and(eq({0}.from, \"{1}\"),eq({0}.to, \"{2}\"),eq({0}.name, \"{3}\"))'.format('fvnsEncapBlk', encap_start, encap_end, block_name)\n    elif block_end is None and block_start is None:\n        if block_name is None:\n            \n            aci_block_mo = None\n            block_filter_target = ''\n        else:\n            block_filter_target = 'eq({0}.name, \"{1}\")'.format('fvnsEncapBlk', block_name)\n    elif block_start is not None:\n        if block_name is None:\n            block_filter_target = 'eq({0}.from, \"{1}\")'.format('fvnsEncapBlk', encap_start)\n        else:\n            block_filter_target = 'and(eq({0}.from, \"{1}\"),eq({0}.name, \"{2}\"))'.format('fvnsEncapBlk', encap_start, block_name)\n    else:\n        if block_name is None:\n            block_filter_target = 'eq({0}.to, \"{1}\")'.format('fvnsEncapBlk', encap_end)\n        else:\n            block_filter_target = 'and(eq({0}.to, \"{1}\"),eq({0}.name, \"{2}\"))'.format('fvnsEncapBlk', encap_end, block_name)\n\n    # ACI Pool URL requires the allocation mode (ex: uni/infra/vlanns-[poolname]-static)\n    if pool is not None:\n        if pool_allocation_mode is not None:\n            pool_name = '[{0}]-{1}'.format(pool, pool_allocation_mode)\n        else:\n            module.fail_json(msg=\"ACI requires the 'pool_allocation_mode' when 'pool' is provided\")\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class='fvnsVlanInstP',\n            aci_rn='infra/vlanns-{0}'.format(pool_name),\n            filter_target='eq(fvnsVlanInstP.name, \"{0}\")'.format(pool),\n            module_object=pool,\n        ),\n        subclass_1=dict(\n            aci_class='fvnsEncapBlk',\n            aci_rn=aci_block_mo,\n            filter_target=block_filter_target,\n            module_object=aci_block_mo,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='fvnsEncapBlk',\n            class_config={\n                \"allocMode\": allocation_mode,\n                \"descr\": description,\n                \"from\": encap_start,\n                \"name\": block_name,\n                \"to\": encap_end,\n            },\n        )\n\n        aci.get_diff(aci_class='fvnsEncapBlk')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  aci vlan pool encap block short description  manage encap blocks assigned vlan pools (fvns encapblk) description    manage vlan encap blocks assigned vlan pools cisco aci fabrics  notes    the c(pool) must exist order add delete encap block    more information internal apic class b(fvns encapblk)   l(the apic management information model reference https   developer cisco com docs apic mim ref )  author    jacob mcgill ( jmcgill298)   dag wieers ( dagwieers) version added   2 5  options    allocation mode      description        the method used allocating encaps resources      aliases    mode       choices    dynamic  inherit  static    description      description        description pool encap block      aliases    descr     pool      description        the name pool encap block assigned      aliases    pool name     pool allocation mode      description        the method used allocating encaps resources      choices    dynamic  static      aliases    pool mode     block end      description        the end encap block      aliases    end     block name      description        the name give encap block      aliases    name     block start      description        the start encap block      aliases    start     state      description        use c(present) c(absent) adding removing        use c(query) listing object multiple objects      choices    absent  present  query       default  present extends documentation fragment  aci      examples   r      name  add new vlan encap block   aci vlan pool encap block      host  apic     username  admin     password  somesecretpassword     pool  production     block start  20     block end  50     state  present    name  remove vlan encap block   aci vlan pool encap block      host  apic     username  admin     password  somesecretpassword     pool  production     block start  20     block end  50     state  absent    name  query vlan encap block   aci vlan pool encap block      host  apic     username  admin     password  somesecretpassword     pool  production     block start  20     block end  50     state  query    name  query vlan pool encap blocks   aci vlan pool encap block      host  apic     username  admin     password  somesecretpassword     pool  production     state  query    name  query vlan encap blocks   aci vlan pool encap block      host  apic     username  admin     password  somesecretpassword     state  query      return   r    current    description  the existing configuration apic module finished   returned  success   type  list   sample                               fvtenant                      attributes                          descr    production environment                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      error    description  the error information returned apic   returned  failure   type  dict   sample                 code    122            text    unknown managed object class foo        raw    description  the raw output returned apic rest api (xml json)   returned  parse error   type  string   sample     xml version  1 0  encoding  utf 8    imdata totalcount  1   error code  122  text  unknown managed object class foo     imdata   sent    description  the actual minimal configuration pushed apic   returned  info   type  list   sample                 fvtenant                  attributes                      descr    production environment                                previous    description  the original configuration apic module started   returned  info   type  list   sample                               fvtenant                      attributes                          descr    production                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      proposed    description  the assembled configuration user provided parameters   returned  info   type  dict   sample                 fvtenant                  attributes                      descr    production environment                    name    production                                filter string    description  the filter string used request   returned  failure debug   type  string   sample   rsp prop include config method    description  the http method used request apic   returned  failure debug   type  string   sample  post response    description  the http response apic   returned  failure debug   type  string   sample  ok (30 bytes) status    description  the http status apic   returned  failure debug   type  int   sample  200 url    description  the http url used request apic   returned  failure debug   type  string   sample  https   10 11 12 13 api mo uni tn production json         usr bin python        coding  utf 8        copyright  (c) 2017  jacob mcgill (jmcgill298)    copyright  (c) 2018  dag wieers (dagwieers)  dag wieers com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    not required querying objects    not required querying objects    not required querying objects    not required querying objects    collect proper mo information    validate block end block start valid respective encap type    build proper proper filter target based block start  block end  block name    validate block start less block end    reset range managed object none aci util properly handle query    aci pool url requires allocation mode (ex  uni infra vlanns  poolname  static) ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2017, Jacob McGill (jmcgill298)\n# Copyright: (c) 2018, Dag Wieers (dagwieers) <dag@wieers.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_vlan_pool_encap_block\nshort_description: Manage encap blocks assigned to VLAN pools (fvns:EncapBlk)\ndescription:\n- Manage VLAN encap blocks that are assigned to VLAN pools on Cisco ACI fabrics.\nnotes:\n- The C(pool) must exist in order to add or delete a encap block.\n- More information about the internal APIC class B(fvns:EncapBlk) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Jacob McGill (@jmcgill298)\n- Dag Wieers (@dagwieers)\nversion_added: '2.5'\noptions:\n  allocation_mode:\n    description:\n    - The method used for allocating encaps to resources.\n    aliases: [ mode ]\n    choices: [ dynamic, inherit, static]\n  description:\n    description:\n    - Description for the pool encap block.\n    aliases: [ descr ]\n  pool:\n    description:\n    - The name of the pool that the encap block should be assigned to.\n    aliases: [ pool_name ]\n  pool_allocation_mode:\n    description:\n    - The method used for allocating encaps to resources.\n    choices: [ dynamic, static]\n    aliases: [ pool_mode ]\n  block_end:\n    description:\n    - The end of encap block.\n    aliases: [ end ]\n  block_name:\n    description:\n    - The name to give to the encap block.\n    aliases: [ name ]\n  block_start:\n    description:\n    - The start of the encap block.\n    aliases: [ start ]\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add a new VLAN encap block\n  aci_vlan_pool_encap_block:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    pool: production\n    block_start: 20\n    block_end: 50\n    state: present\n\n- name: Remove a VLAN encap block\n  aci_vlan_pool_encap_block:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    pool: production\n    block_start: 20\n    block_end: 50\n    state: absent\n\n- name: Query a VLAN encap block\n  aci_vlan_pool_encap_block:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    pool: production\n    block_start: 20\n    block_end: 50\n    state: query\n\n- name: Query a VLAN pool for encap blocks\n  aci_vlan_pool_encap_block:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    pool: production\n    state: query\n\n- name: Query all VLAN encap blocks\n  aci_vlan_pool_encap_block:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        allocation_mode=dict(type='str', aliases=['mode'], choices=['dynamic', 'inherit', 'static']),\n        description=dict(type='str', aliases=['descr']),\n        pool=dict(type='str', aliases=['pool_name']),  # Not required for querying all objects\n        pool_allocation_mode=dict(type='str', aliases=['pool_mode'], choices=['dynamic', 'static']),\n        block_name=dict(type='str', aliases=['name']),  # Not required for querying all objects\n        block_end=dict(type='int', aliases=['end']),  # Not required for querying all objects\n        block_start=dict(type='int', aliases=[\"start\"]),  # Not required for querying all objects\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['pool', 'block_end', 'block_name', 'block_start']],\n            ['state', 'present', ['pool', 'block_end', 'block_name', 'block_start']],\n        ],\n    )\n\n    allocation_mode = module.params['allocation_mode']\n    description = module.params['description']\n    pool = module.params['pool']\n    pool_allocation_mode = module.params['pool_allocation_mode']\n    block_end = module.params['block_end']\n    block_name = module.params['block_name']\n    block_start = module.params['block_start']\n    state = module.params['state']\n\n    if block_end is not None:\n        encap_end = 'vlan-{0}'.format(block_end)\n    else:\n        encap_end = None\n\n    if block_start is not None:\n        encap_start = 'vlan-{0}'.format(block_start)\n    else:\n        encap_start = None\n\n    # Collect proper mo information\n    aci_block_mo = 'from-[{0}]-to-[{1}]'.format(encap_start, encap_end)\n    pool_name = pool\n\n    # Validate block_end and block_start are valid for its respective encap type\n    for encap_id in block_end, block_start:\n        if encap_id is not None:\n            if not 1 <= encap_id <= 4094:\n                module.fail_json(msg=\"vlan pools must have 'block_start' and 'block_end' values between 1 and 4094\")\n\n    # Build proper proper filter_target based on block_start, block_end, and block_name\n    if block_end is not None and block_start is not None:\n        # Validate block_start is less than block_end\n        if block_start > block_end:\n            module.fail_json(msg=\"The 'block_start' must be less than or equal to the 'block_end'\")\n\n        if block_name is None:\n            block_filter_target = 'and(eq({0}.from, \"{1}\"),eq({0}.to, \"{2}\"))'.format('fvnsEncapBlk', encap_start, encap_end)\n        else:\n            block_filter_target = 'and(eq({0}.from, \"{1}\"),eq({0}.to, \"{2}\"),eq({0}.name, \"{3}\"))'.format('fvnsEncapBlk', encap_start, encap_end, block_name)\n    elif block_end is None and block_start is None:\n        if block_name is None:\n            # Reset range managed object to None for aci util to properly handle query\n            aci_block_mo = None\n            block_filter_target = ''\n        else:\n            block_filter_target = 'eq({0}.name, \"{1}\")'.format('fvnsEncapBlk', block_name)\n    elif block_start is not None:\n        if block_name is None:\n            block_filter_target = 'eq({0}.from, \"{1}\")'.format('fvnsEncapBlk', encap_start)\n        else:\n            block_filter_target = 'and(eq({0}.from, \"{1}\"),eq({0}.name, \"{2}\"))'.format('fvnsEncapBlk', encap_start, block_name)\n    else:\n        if block_name is None:\n            block_filter_target = 'eq({0}.to, \"{1}\")'.format('fvnsEncapBlk', encap_end)\n        else:\n            block_filter_target = 'and(eq({0}.to, \"{1}\"),eq({0}.name, \"{2}\"))'.format('fvnsEncapBlk', encap_end, block_name)\n\n    # ACI Pool URL requires the allocation mode (ex: uni/infra/vlanns-[poolname]-static)\n    if pool is not None:\n        if pool_allocation_mode is not None:\n            pool_name = '[{0}]-{1}'.format(pool, pool_allocation_mode)\n        else:\n            module.fail_json(msg=\"ACI requires the 'pool_allocation_mode' when 'pool' is provided\")\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class='fvnsVlanInstP',\n            aci_rn='infra/vlanns-{0}'.format(pool_name),\n            filter_target='eq(fvnsVlanInstP.name, \"{0}\")'.format(pool),\n            module_object=pool,\n        ),\n        subclass_1=dict(\n            aci_class='fvnsEncapBlk',\n            aci_rn=aci_block_mo,\n            filter_target=block_filter_target,\n            module_object=aci_block_mo,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='fvnsEncapBlk',\n            class_config={\n                \"allocMode\": allocation_mode,\n                \"descr\": description,\n                \"from\": encap_start,\n                \"name\": block_name,\n                \"to\": encap_end,\n            },\n        )\n\n        aci.get_diff(aci_class='fvnsEncapBlk')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "aci_vlan_pool_encap_block.py", "id": "0a09062db1fb8989758be2ff60ee7281", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aci/aci_vlan_pool_encap_block.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}