{"author": "HelloZeroNet", "code": "import time\nimport re\n\nfrom Plugin import PluginManager\nfrom Db import DbQuery\nfrom Debug import Debug\n\n\n@PluginManager.registerTo(\"UiWebsocket\")\nclass UiWebsocketPlugin(object):\n    def formatSiteInfo(self, site, create_user=True):\n        site_info = super(UiWebsocketPlugin, self).formatSiteInfo(site, create_user=True)\n        feed_following = self.user.sites[site.address].get(\"follow\", None)\n        if feed_following == None:\n            site_info[\"feed_follow_num\"] = None\n        else:\n            site_info[\"feed_follow_num\"] = len(feed_following)\n        return site_info\n\n    def actionFeedFollow(self, to, feeds):\n        self.user.setFeedFollow(self.site.address, feeds)\n        self.user.save()\n        self.response(to, \"ok\")\n\n    def actionFeedListFollow(self, to):\n        feeds = self.user.sites[self.site.address].get(\"follow\", {})\n        self.response(to, feeds)\n\n    def actionFeedQuery(self, to, limit=10, day_limit=3):\n        if \"ADMIN\" not in self.site.settings[\"permissions\"]:\n            return self.response(to, \"FeedQuery not allowed\")\n\n        from Site import SiteManager\n        rows = []\n        stats = []\n\n        total_s = time.time()\n        num_sites = 0\n\n        for address, site_data in self.user.sites.iteritems():\n            feeds = site_data.get(\"follow\")\n            if not feeds:\n                continue\n            if type(feeds) is not dict:\n                self.log.debug(\"Invalid feed for site %s\" % address)\n                continue\n            num_sites += 1\n            for name, query_set in feeds.iteritems():\n                site = SiteManager.site_manager.get(address)\n                if not site or not site.storage.has_db:\n                    continue\n\n                s = time.time()\n                try:\n                    query_raw, params = query_set\n                    query_parts = re.split(r\"UNION(?:\\s+ALL|)\", query_raw)\n                    for i, query_part in enumerate(query_parts):\n                        db_query = DbQuery(query_part)\n                        if day_limit:\n                            where = \" WHERE %s > strftime('%%s', 'now', '-%s day')\" % (db_query.fields.get(\"date_added\", \"date_added\"), day_limit)\n                            if \"WHERE\" in query_part:\n                                query_part = re.sub(\"WHERE (.*?)(?=$| GROUP BY)\", where+\" AND (\\\\1)\", query_part)\n                            else:\n                                query_part += where\n                        query_parts[i] = query_part\n                    query = \" UNION \".join(query_parts)\n\n                    if \":params\" in query:\n                        query = query.replace(\":params\", \",\".join([\"?\"] * len(params)))\n                        res = site.storage.query(query + \" ORDER BY date_added DESC LIMIT %s\" % limit, params * query_raw.count(\":params\"))\n                    else:\n                        res = site.storage.query(query + \" ORDER BY date_added DESC LIMIT %s\" % limit)\n\n                except Exception as err:  \n                    self.log.error(\"%s feed query %s error: %s\" % (address, name, Debug.formatException(err)))\n                    stats.append({\"site\": site.address, \"feed_name\": name, \"error\": str(err), \"query\": query})\n                    continue\n\n                for row in res:\n                    row = dict(row)\n                    if row[\"date_added\"] > 1000000000000:  \n                        row[\"date_added\"] = row[\"date_added\"] / 1000\n                    if \"date_added\" not in row or row[\"date_added\"] > time.time() + 120:\n                        self.log.debug(\"Newsfeed from the future from from site %s\" % address)\n                        continue  \n                    row[\"site\"] = address\n                    row[\"feed_name\"] = name\n                    rows.append(row)\n                stats.append({\"site\": site.address, \"feed_name\": name, \"taken\": round(time.time() - s, 3)})\n                time.sleep(0.0001)\n        return self.response(to, {\"rows\": rows, \"stats\": stats, \"num\": len(rows), \"sites\": num_sites, \"taken\": round(time.time() - total_s, 3)})\n\n    def parseSearch(self, search):\n        parts = re.split(\"(site|type):\", search)\n        if len(parts) > 1:  \n            search_text = parts[0]\n            parts = [part.strip() for part in parts]\n            filters = dict(zip(parts[1::2], parts[2::2]))\n        else:\n            search_text = search\n            filters = {}\n        return [search_text, filters]\n\n    def actionFeedSearch(self, to, search):\n        if \"ADMIN\" not in self.site.settings[\"permissions\"]:\n            return self.response(to, \"FeedSearch not allowed\")\n\n        from Site import SiteManager\n        rows = []\n        stats = []\n        num_sites = 0\n        total_s = time.time()\n\n        search_text, filters = self.parseSearch(search)\n\n        for address, site in SiteManager.site_manager.list().iteritems():\n            if not site.storage.has_db:\n                continue\n\n            if \"site\" in filters:\n                if filters[\"site\"].lower() not in [site.address, site.content_manager.contents[\"content.json\"].get(\"title\").lower()]:\n                    continue\n\n            if site.storage.db:  \n                feeds = site.storage.db.schema.get(\"feeds\")\n            else:\n                try:\n                    feeds = site.storage.loadJson(\"dbschema.json\").get(\"feeds\")\n                except:\n                    continue\n\n            if not feeds:\n                continue\n\n            num_sites += 1\n\n            for name, query in feeds.iteritems():\n                s = time.time()\n                try:\n                    db_query = DbQuery(query)\n\n                    params = []\n                    \n                    if search_text:\n                        db_query.wheres.append(\"(%s LIKE ? OR %s LIKE ?)\" % (db_query.fields[\"body\"], db_query.fields[\"title\"]))\n                        search_like = \"%\" + search_text.replace(\" \", \"%\") + \"%\"\n                        params.append(search_like)\n                        params.append(search_like)\n                    if filters.get(\"type\") and filters[\"type\"] not in query:\n                        continue\n\n                    \n                    db_query.parts[\"ORDER BY\"] = \"date_added DESC\"\n                    db_query.parts[\"LIMIT\"] = \"30\"\n\n                    res = site.storage.query(str(db_query), params)\n                except Exception, err:\n                    self.log.error(\"%s feed query %s error: %s\" % (address, name, Debug.formatException(err)))\n                    stats.append({\"site\": site.address, \"feed_name\": name, \"error\": str(err), \"query\": query})\n                    continue\n                for row in res:\n                    row = dict(row)\n                    if row[\"date_added\"] > time.time() + 120:\n                        continue  \n                    row[\"site\"] = address\n                    row[\"feed_name\"] = name\n                    rows.append(row)\n                stats.append({\"site\": site.address, \"feed_name\": name, \"taken\": round(time.time() - s, 3)})\n        return self.response(to, {\"rows\": rows, \"num\": len(rows), \"sites\": num_sites, \"taken\": round(time.time() - total_s, 3), \"stats\": stats})\n\n\n@PluginManager.registerTo(\"User\")\nclass UserPlugin(object):\n    \n    def setFeedFollow(self, address, feeds):\n        site_data = self.getSiteData(address)\n        site_data[\"follow\"] = feeds\n        self.save()\n        return site_data\n", "comments": "  log error    formatted millseconds    feed item future  skip    found filter    database loaded    filters    order    feed item future  skip    set queries user follows ", "content": "import time\nimport re\n\nfrom Plugin import PluginManager\nfrom Db import DbQuery\nfrom Debug import Debug\n\n\n@PluginManager.registerTo(\"UiWebsocket\")\nclass UiWebsocketPlugin(object):\n    def formatSiteInfo(self, site, create_user=True):\n        site_info = super(UiWebsocketPlugin, self).formatSiteInfo(site, create_user=True)\n        feed_following = self.user.sites[site.address].get(\"follow\", None)\n        if feed_following == None:\n            site_info[\"feed_follow_num\"] = None\n        else:\n            site_info[\"feed_follow_num\"] = len(feed_following)\n        return site_info\n\n    def actionFeedFollow(self, to, feeds):\n        self.user.setFeedFollow(self.site.address, feeds)\n        self.user.save()\n        self.response(to, \"ok\")\n\n    def actionFeedListFollow(self, to):\n        feeds = self.user.sites[self.site.address].get(\"follow\", {})\n        self.response(to, feeds)\n\n    def actionFeedQuery(self, to, limit=10, day_limit=3):\n        if \"ADMIN\" not in self.site.settings[\"permissions\"]:\n            return self.response(to, \"FeedQuery not allowed\")\n\n        from Site import SiteManager\n        rows = []\n        stats = []\n\n        total_s = time.time()\n        num_sites = 0\n\n        for address, site_data in self.user.sites.iteritems():\n            feeds = site_data.get(\"follow\")\n            if not feeds:\n                continue\n            if type(feeds) is not dict:\n                self.log.debug(\"Invalid feed for site %s\" % address)\n                continue\n            num_sites += 1\n            for name, query_set in feeds.iteritems():\n                site = SiteManager.site_manager.get(address)\n                if not site or not site.storage.has_db:\n                    continue\n\n                s = time.time()\n                try:\n                    query_raw, params = query_set\n                    query_parts = re.split(r\"UNION(?:\\s+ALL|)\", query_raw)\n                    for i, query_part in enumerate(query_parts):\n                        db_query = DbQuery(query_part)\n                        if day_limit:\n                            where = \" WHERE %s > strftime('%%s', 'now', '-%s day')\" % (db_query.fields.get(\"date_added\", \"date_added\"), day_limit)\n                            if \"WHERE\" in query_part:\n                                query_part = re.sub(\"WHERE (.*?)(?=$| GROUP BY)\", where+\" AND (\\\\1)\", query_part)\n                            else:\n                                query_part += where\n                        query_parts[i] = query_part\n                    query = \" UNION \".join(query_parts)\n\n                    if \":params\" in query:\n                        query = query.replace(\":params\", \",\".join([\"?\"] * len(params)))\n                        res = site.storage.query(query + \" ORDER BY date_added DESC LIMIT %s\" % limit, params * query_raw.count(\":params\"))\n                    else:\n                        res = site.storage.query(query + \" ORDER BY date_added DESC LIMIT %s\" % limit)\n\n                except Exception as err:  # Log error\n                    self.log.error(\"%s feed query %s error: %s\" % (address, name, Debug.formatException(err)))\n                    stats.append({\"site\": site.address, \"feed_name\": name, \"error\": str(err), \"query\": query})\n                    continue\n\n                for row in res:\n                    row = dict(row)\n                    if row[\"date_added\"] > 1000000000000:  # Formatted as millseconds\n                        row[\"date_added\"] = row[\"date_added\"] / 1000\n                    if \"date_added\" not in row or row[\"date_added\"] > time.time() + 120:\n                        self.log.debug(\"Newsfeed from the future from from site %s\" % address)\n                        continue  # Feed item is in the future, skip it\n                    row[\"site\"] = address\n                    row[\"feed_name\"] = name\n                    rows.append(row)\n                stats.append({\"site\": site.address, \"feed_name\": name, \"taken\": round(time.time() - s, 3)})\n                time.sleep(0.0001)\n        return self.response(to, {\"rows\": rows, \"stats\": stats, \"num\": len(rows), \"sites\": num_sites, \"taken\": round(time.time() - total_s, 3)})\n\n    def parseSearch(self, search):\n        parts = re.split(\"(site|type):\", search)\n        if len(parts) > 1:  # Found filter\n            search_text = parts[0]\n            parts = [part.strip() for part in parts]\n            filters = dict(zip(parts[1::2], parts[2::2]))\n        else:\n            search_text = search\n            filters = {}\n        return [search_text, filters]\n\n    def actionFeedSearch(self, to, search):\n        if \"ADMIN\" not in self.site.settings[\"permissions\"]:\n            return self.response(to, \"FeedSearch not allowed\")\n\n        from Site import SiteManager\n        rows = []\n        stats = []\n        num_sites = 0\n        total_s = time.time()\n\n        search_text, filters = self.parseSearch(search)\n\n        for address, site in SiteManager.site_manager.list().iteritems():\n            if not site.storage.has_db:\n                continue\n\n            if \"site\" in filters:\n                if filters[\"site\"].lower() not in [site.address, site.content_manager.contents[\"content.json\"].get(\"title\").lower()]:\n                    continue\n\n            if site.storage.db:  # Database loaded\n                feeds = site.storage.db.schema.get(\"feeds\")\n            else:\n                try:\n                    feeds = site.storage.loadJson(\"dbschema.json\").get(\"feeds\")\n                except:\n                    continue\n\n            if not feeds:\n                continue\n\n            num_sites += 1\n\n            for name, query in feeds.iteritems():\n                s = time.time()\n                try:\n                    db_query = DbQuery(query)\n\n                    params = []\n                    # Filters\n                    if search_text:\n                        db_query.wheres.append(\"(%s LIKE ? OR %s LIKE ?)\" % (db_query.fields[\"body\"], db_query.fields[\"title\"]))\n                        search_like = \"%\" + search_text.replace(\" \", \"%\") + \"%\"\n                        params.append(search_like)\n                        params.append(search_like)\n                    if filters.get(\"type\") and filters[\"type\"] not in query:\n                        continue\n\n                    # Order\n                    db_query.parts[\"ORDER BY\"] = \"date_added DESC\"\n                    db_query.parts[\"LIMIT\"] = \"30\"\n\n                    res = site.storage.query(str(db_query), params)\n                except Exception, err:\n                    self.log.error(\"%s feed query %s error: %s\" % (address, name, Debug.formatException(err)))\n                    stats.append({\"site\": site.address, \"feed_name\": name, \"error\": str(err), \"query\": query})\n                    continue\n                for row in res:\n                    row = dict(row)\n                    if row[\"date_added\"] > time.time() + 120:\n                        continue  # Feed item is in the future, skip it\n                    row[\"site\"] = address\n                    row[\"feed_name\"] = name\n                    rows.append(row)\n                stats.append({\"site\": site.address, \"feed_name\": name, \"taken\": round(time.time() - s, 3)})\n        return self.response(to, {\"rows\": rows, \"num\": len(rows), \"sites\": num_sites, \"taken\": round(time.time() - total_s, 3), \"stats\": stats})\n\n\n@PluginManager.registerTo(\"User\")\nclass UserPlugin(object):\n    # Set queries that user follows\n    def setFeedFollow(self, address, feeds):\n        site_data = self.getSiteData(address)\n        site_data[\"follow\"] = feeds\n        self.save()\n        return site_data\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "NewsfeedPlugin.py", "id": "f9c2ced0abce4aa9710326bd522951c9", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/Newsfeed/NewsfeedPlugin.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}