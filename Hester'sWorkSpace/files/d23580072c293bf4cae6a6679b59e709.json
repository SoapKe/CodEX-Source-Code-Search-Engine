{"author": "nvbn", "code": "import pytest\nfrom thefuck.rules.path_from_history import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture(autouse=True)\ndef history(mocker):\n    return mocker.patch(\n        'thefuck.rules.path_from_history.get_valid_history_without_current',\n        return_value=['cd /opt/java', 'ls ~/work/project/'])\n\n\n@pytest.fixture(autouse=True)\ndef path_exists(mocker):\n    path_mock = mocker.patch('thefuck.rules.path_from_history.Path')\n    exists_mock = path_mock.return_value.expanduser.return_value.exists\n    exists_mock.return_value = True\n    return exists_mock\n\n\n@pytest.mark.parametrize('script, output', [\n    ('ls project', 'no such file or directory: project'),\n    ('cd project', \"can't cd to project\"),\n])\ndef test_match(script, output):\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, output', [\n    ('myapp cats', 'no such file or directory: project'),\n    ('cd project', \"\"),\n])\ndef test_not_match(script, output):\n    assert not match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, output, result', [\n    ('ls project', 'no such file or directory: project', 'ls ~/work/project'),\n    ('cd java', \"can't cd to java\", 'cd /opt/java'),\n])\ndef test_get_new_command(script, output, result):\n    new_command = get_new_command(Command(script, output))\n    assert new_command[0] == result\n", "comments": "", "content": "import pytest\nfrom thefuck.rules.path_from_history import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture(autouse=True)\ndef history(mocker):\n    return mocker.patch(\n        'thefuck.rules.path_from_history.get_valid_history_without_current',\n        return_value=['cd /opt/java', 'ls ~/work/project/'])\n\n\n@pytest.fixture(autouse=True)\ndef path_exists(mocker):\n    path_mock = mocker.patch('thefuck.rules.path_from_history.Path')\n    exists_mock = path_mock.return_value.expanduser.return_value.exists\n    exists_mock.return_value = True\n    return exists_mock\n\n\n@pytest.mark.parametrize('script, output', [\n    ('ls project', 'no such file or directory: project'),\n    ('cd project', \"can't cd to project\"),\n])\ndef test_match(script, output):\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, output', [\n    ('myapp cats', 'no such file or directory: project'),\n    ('cd project', \"\"),\n])\ndef test_not_match(script, output):\n    assert not match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, output, result', [\n    ('ls project', 'no such file or directory: project', 'ls ~/work/project'),\n    ('cd java', \"can't cd to java\", 'cd /opt/java'),\n])\ndef test_get_new_command(script, output, result):\n    new_command = get_new_command(Command(script, output))\n    assert new_command[0] == result\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_path_from_history.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_path_from_history.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}