{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    decode_packed_codes,\n    js_to_json,\n    NO_DEFAULT,\n    PACKED_CODES_RE,\n)\n\n\nclass VidziIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vidzi\\.(?:tv|cc|si)/(?:embed-)?(?P<id>[0-9a-zA-Z]+)'\n    _TESTS = [{\n        'url': 'http://vidzi.tv/cghql9yq6emu.html',\n        'md5': '4f16c71ca0c8c8635ab6932b5f3f1660',\n        'info_dict': {\n            'id': 'cghql9yq6emu',\n            'ext': 'mp4',\n            'title': 'youtube-dl test video  1\\\\\\\\2\\'3/4<5\\\\\\\\6\u00e47\u21ad',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://vidzi.tv/embed-4z2yb0rzphe9-600x338.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://vidzi.cc/cghql9yq6emu.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://vidzi.si/rph9gztxj1et.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'http://vidzi.tv/%s' % video_id, video_id)\n        title = self._html_search_regex(\n            r'(?s)<h2 class=\"video-title\">(.*?)</h2>', webpage, 'title')\n\n        codes = [webpage]\n        codes.extend([\n            decode_packed_codes(mobj.group(0)).replace('\\\\\\'', '\\'')\n            for mobj in re.finditer(PACKED_CODES_RE, webpage)])\n        for num, code in enumerate(codes, 1):\n            jwplayer_data = self._parse_json(\n                self._search_regex(\n                    r'setup\\(([^)]+)\\)', code, 'jwplayer data',\n                    default=NO_DEFAULT if num == len(codes) else '{}'),\n                video_id, transform_source=js_to_json)\n            if jwplayer_data:\n                break\n\n        info_dict = self._parse_jwplayer_data(jwplayer_data, video_id, require_title=False)\n        info_dict['title'] = title\n\n        return info_dict\n", "comments": "# coding: utf-8\n# m3u8 download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    decode_packed_codes,\n    js_to_json,\n    NO_DEFAULT,\n    PACKED_CODES_RE,\n)\n\n\nclass VidziIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vidzi\\.(?:tv|cc|si)/(?:embed-)?(?P<id>[0-9a-zA-Z]+)'\n    _TESTS = [{\n        'url': 'http://vidzi.tv/cghql9yq6emu.html',\n        'md5': '4f16c71ca0c8c8635ab6932b5f3f1660',\n        'info_dict': {\n            'id': 'cghql9yq6emu',\n            'ext': 'mp4',\n            'title': 'youtube-dl test video  1\\\\\\\\2\\'3/4<5\\\\\\\\6\u00e47\u21ad',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://vidzi.tv/embed-4z2yb0rzphe9-600x338.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://vidzi.cc/cghql9yq6emu.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://vidzi.si/rph9gztxj1et.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'http://vidzi.tv/%s' % video_id, video_id)\n        title = self._html_search_regex(\n            r'(?s)<h2 class=\"video-title\">(.*?)</h2>', webpage, 'title')\n\n        codes = [webpage]\n        codes.extend([\n            decode_packed_codes(mobj.group(0)).replace('\\\\\\'', '\\'')\n            for mobj in re.finditer(PACKED_CODES_RE, webpage)])\n        for num, code in enumerate(codes, 1):\n            jwplayer_data = self._parse_json(\n                self._search_regex(\n                    r'setup\\(([^)]+)\\)', code, 'jwplayer data',\n                    default=NO_DEFAULT if num == len(codes) else '{}'),\n                video_id, transform_source=js_to_json)\n            if jwplayer_data:\n                break\n\n        info_dict = self._parse_jwplayer_data(jwplayer_data, video_id, require_title=False)\n        info_dict['title'] = title\n\n        return info_dict\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vidzi.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vidzi.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}