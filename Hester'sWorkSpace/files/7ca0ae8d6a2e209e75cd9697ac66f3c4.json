{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport mock\nimport uuid\nfrom time import time\n\nfrom sentry import quotas, tsdb\nfrom sentry.event_manager import EventManager, HashDiscarded\nfrom sentry.plugins import Plugin2\nfrom sentry.tasks.store import preprocess_event, process_event, save_event\nfrom sentry.testutils import PluginTestCase\nfrom sentry.utils.dates import to_datetime\n\n\nclass BasicPreprocessorPlugin(Plugin2):\n    def get_event_preprocessors(self, data):\n        def remove_extra(data):\n            del data['extra']\n            return data\n\n        def put_on_hold(data):\n            data['unprocessed'] = True\n            return data\n\n        if data.get('platform') == 'mattlang':\n            return [remove_extra, lambda x: None]\n\n        if data.get('platform') == 'noop':\n            return [lambda data: data]\n\n        if data.get('platform') == 'holdmeclose':\n            return [put_on_hold]\n\n        return []\n\n    def is_enabled(self, project=None):\n        return True\n\n\nclass StoreTasksTest(PluginTestCase):\n    plugin = BasicPreprocessorPlugin\n\n    @mock.patch('sentry.tasks.store.save_event')\n    @mock.patch('sentry.tasks.store.process_event')\n    def test_move_to_process_event(self, mock_process_event, mock_save_event):\n        project = self.create_project()\n\n        data = {\n            'project': project.id,\n            'platform': 'mattlang',\n            'message': 'test',\n            'extra': {\n                'foo': 'bar'\n            },\n        }\n\n        preprocess_event(data=data)\n\n        assert mock_process_event.delay.call_count == 1\n        assert mock_save_event.delay.call_count == 0\n\n    @mock.patch('sentry.tasks.store.save_event')\n    @mock.patch('sentry.tasks.store.process_event')\n    def test_move_to_save_event(self, mock_process_event, mock_save_event):\n        project = self.create_project()\n\n        data = {\n            'project': project.id,\n            'platform': 'NOTMATTLANG',\n            'message': 'test',\n            'extra': {\n                'foo': 'bar'\n            },\n        }\n\n        preprocess_event(data=data)\n\n        assert mock_process_event.delay.call_count == 0\n        assert mock_save_event.delay.call_count == 1\n\n    @mock.patch('sentry.tasks.store.save_event')\n    @mock.patch('sentry.tasks.store.default_cache')\n    def test_process_event_mutate_and_save(self, mock_default_cache, mock_save_event):\n        project = self.create_project()\n\n        data = {\n            'project': project.id,\n            'platform': 'mattlang',\n            'message': 'test',\n            'extra': {\n                'foo': 'bar'\n            },\n        }\n\n        mock_default_cache.get.return_value = data\n\n        process_event(cache_key='e:1', start_time=1)\n\n        \n        mock_default_cache.set.assert_called_once_with(\n            'e:1',\n            {\n                'project': project.id,\n                'platform': 'mattlang',\n                'message': 'test',\n            },\n            3600,\n        )\n\n        mock_save_event.delay.assert_called_once_with(\n            cache_key='e:1', data=None, start_time=1, event_id=None,\n            project_id=project.id\n        )\n\n    @mock.patch('sentry.tasks.store.save_event')\n    @mock.patch('sentry.tasks.store.default_cache')\n    def test_process_event_no_mutate_and_save(self, mock_default_cache, mock_save_event):\n        project = self.create_project()\n\n        data = {\n            'project': project.id,\n            'platform': 'noop',\n            'message': 'test',\n            'extra': {\n                'foo': 'bar'\n            },\n        }\n\n        mock_default_cache.get.return_value = data\n\n        process_event(cache_key='e:1', start_time=1)\n\n        \n        mock_default_cache.set.call_count == 0\n\n        mock_save_event.delay.assert_called_once_with(\n            cache_key='e:1', data=None, start_time=1, event_id=None,\n            project_id=project.id\n        )\n\n    @mock.patch('sentry.tasks.store.save_event')\n    @mock.patch('sentry.tasks.store.default_cache')\n    def test_process_event_unprocessed(self, mock_default_cache, mock_save_event):\n        project = self.create_project()\n\n        data = {\n            'project': project.id,\n            'platform': 'holdmeclose',\n            'message': 'test',\n            'extra': {\n                'foo': 'bar'\n            },\n        }\n\n        mock_default_cache.get.return_value = data\n\n        process_event(cache_key='e:1', start_time=1)\n\n        mock_default_cache.set.assert_called_once_with(\n            'e:1', {\n                'project': project.id,\n                'platform': 'holdmeclose',\n                'message': 'test',\n                'extra': {\n                    'foo': 'bar'\n                },\n                'unprocessed': True,\n            }, 3600\n        )\n\n        mock_save_event.delay.assert_called_once_with(\n            cache_key='e:1', data=None, start_time=1, event_id=None,\n            project_id=project.id\n        )\n\n    @mock.patch.object(tsdb, 'incr_multi')\n    @mock.patch.object(quotas, 'refund')\n    def test_hash_discarded_raised(self, mock_refund, mock_incr):\n        project = self.create_project()\n\n        data = {\n            'project': project.id,\n            'platform': 'NOTMATTLANG',\n            'message': 'test',\n            'event_id': uuid.uuid4().hex,\n            'extra': {\n                'foo': 'bar'\n            },\n        }\n\n        now = time()\n        mock_save = mock.Mock()\n        mock_save.side_effect = HashDiscarded\n        with mock.patch.object(EventManager, 'save', mock_save):\n            save_event(data=data, start_time=now)\n            mock_incr.assert_called_with([\n                (tsdb.models.project_total_received_discarded, project.id),\n                (tsdb.models.project_total_blacklisted, project.id),\n                (tsdb.models.organization_total_blacklisted, project.organization_id),\n            ],\n                timestamp=to_datetime(now),\n            )\n", "comments": "  the event mutated  make sure save back    the event mutate  reset cache ", "content": "from __future__ import absolute_import\n\nimport mock\nimport uuid\nfrom time import time\n\nfrom sentry import quotas, tsdb\nfrom sentry.event_manager import EventManager, HashDiscarded\nfrom sentry.plugins import Plugin2\nfrom sentry.tasks.store import preprocess_event, process_event, save_event\nfrom sentry.testutils import PluginTestCase\nfrom sentry.utils.dates import to_datetime\n\n\nclass BasicPreprocessorPlugin(Plugin2):\n    def get_event_preprocessors(self, data):\n        def remove_extra(data):\n            del data['extra']\n            return data\n\n        def put_on_hold(data):\n            data['unprocessed'] = True\n            return data\n\n        if data.get('platform') == 'mattlang':\n            return [remove_extra, lambda x: None]\n\n        if data.get('platform') == 'noop':\n            return [lambda data: data]\n\n        if data.get('platform') == 'holdmeclose':\n            return [put_on_hold]\n\n        return []\n\n    def is_enabled(self, project=None):\n        return True\n\n\nclass StoreTasksTest(PluginTestCase):\n    plugin = BasicPreprocessorPlugin\n\n    @mock.patch('sentry.tasks.store.save_event')\n    @mock.patch('sentry.tasks.store.process_event')\n    def test_move_to_process_event(self, mock_process_event, mock_save_event):\n        project = self.create_project()\n\n        data = {\n            'project': project.id,\n            'platform': 'mattlang',\n            'message': 'test',\n            'extra': {\n                'foo': 'bar'\n            },\n        }\n\n        preprocess_event(data=data)\n\n        assert mock_process_event.delay.call_count == 1\n        assert mock_save_event.delay.call_count == 0\n\n    @mock.patch('sentry.tasks.store.save_event')\n    @mock.patch('sentry.tasks.store.process_event')\n    def test_move_to_save_event(self, mock_process_event, mock_save_event):\n        project = self.create_project()\n\n        data = {\n            'project': project.id,\n            'platform': 'NOTMATTLANG',\n            'message': 'test',\n            'extra': {\n                'foo': 'bar'\n            },\n        }\n\n        preprocess_event(data=data)\n\n        assert mock_process_event.delay.call_count == 0\n        assert mock_save_event.delay.call_count == 1\n\n    @mock.patch('sentry.tasks.store.save_event')\n    @mock.patch('sentry.tasks.store.default_cache')\n    def test_process_event_mutate_and_save(self, mock_default_cache, mock_save_event):\n        project = self.create_project()\n\n        data = {\n            'project': project.id,\n            'platform': 'mattlang',\n            'message': 'test',\n            'extra': {\n                'foo': 'bar'\n            },\n        }\n\n        mock_default_cache.get.return_value = data\n\n        process_event(cache_key='e:1', start_time=1)\n\n        # The event mutated, so make sure we save it back\n        mock_default_cache.set.assert_called_once_with(\n            'e:1',\n            {\n                'project': project.id,\n                'platform': 'mattlang',\n                'message': 'test',\n            },\n            3600,\n        )\n\n        mock_save_event.delay.assert_called_once_with(\n            cache_key='e:1', data=None, start_time=1, event_id=None,\n            project_id=project.id\n        )\n\n    @mock.patch('sentry.tasks.store.save_event')\n    @mock.patch('sentry.tasks.store.default_cache')\n    def test_process_event_no_mutate_and_save(self, mock_default_cache, mock_save_event):\n        project = self.create_project()\n\n        data = {\n            'project': project.id,\n            'platform': 'noop',\n            'message': 'test',\n            'extra': {\n                'foo': 'bar'\n            },\n        }\n\n        mock_default_cache.get.return_value = data\n\n        process_event(cache_key='e:1', start_time=1)\n\n        # The event did not mutate, so we shouldn't reset it in cache\n        mock_default_cache.set.call_count == 0\n\n        mock_save_event.delay.assert_called_once_with(\n            cache_key='e:1', data=None, start_time=1, event_id=None,\n            project_id=project.id\n        )\n\n    @mock.patch('sentry.tasks.store.save_event')\n    @mock.patch('sentry.tasks.store.default_cache')\n    def test_process_event_unprocessed(self, mock_default_cache, mock_save_event):\n        project = self.create_project()\n\n        data = {\n            'project': project.id,\n            'platform': 'holdmeclose',\n            'message': 'test',\n            'extra': {\n                'foo': 'bar'\n            },\n        }\n\n        mock_default_cache.get.return_value = data\n\n        process_event(cache_key='e:1', start_time=1)\n\n        mock_default_cache.set.assert_called_once_with(\n            'e:1', {\n                'project': project.id,\n                'platform': 'holdmeclose',\n                'message': 'test',\n                'extra': {\n                    'foo': 'bar'\n                },\n                'unprocessed': True,\n            }, 3600\n        )\n\n        mock_save_event.delay.assert_called_once_with(\n            cache_key='e:1', data=None, start_time=1, event_id=None,\n            project_id=project.id\n        )\n\n    @mock.patch.object(tsdb, 'incr_multi')\n    @mock.patch.object(quotas, 'refund')\n    def test_hash_discarded_raised(self, mock_refund, mock_incr):\n        project = self.create_project()\n\n        data = {\n            'project': project.id,\n            'platform': 'NOTMATTLANG',\n            'message': 'test',\n            'event_id': uuid.uuid4().hex,\n            'extra': {\n                'foo': 'bar'\n            },\n        }\n\n        now = time()\n        mock_save = mock.Mock()\n        mock_save.side_effect = HashDiscarded\n        with mock.patch.object(EventManager, 'save', mock_save):\n            save_event(data=data, start_time=now)\n            mock_incr.assert_called_with([\n                (tsdb.models.project_total_received_discarded, project.id),\n                (tsdb.models.project_total_blacklisted, project.id),\n                (tsdb.models.organization_total_blacklisted, project.organization_id),\n            ],\n                timestamp=to_datetime(now),\n            )\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_store.py", "id": "7ca0ae8d6a2e209e75cd9697ac66f3c4", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/tasks/test_store.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}