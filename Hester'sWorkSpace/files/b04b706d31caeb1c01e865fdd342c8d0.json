{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nimport re\n\nfrom odoo import api, models, _\nfrom odoo.exceptions import UserError, ValidationError\n\n\ndef normalize_iban(iban):\n    return re.sub('[\\W_]', '', iban or '')\n\ndef pretty_iban(iban):\n    \"\"\" return iban in groups of four characters separated by a single space \"\"\"\n    return ' '.join([iban[i:i + 4] for i in range(0, len(iban), 4)])\n\ndef get_bban_from_iban(iban):\n    \"\"\" Returns the basic bank account number corresponding to an IBAN.\n        Note : the BBAN is not the same as the domestic bank account number !\n        The relation between IBAN, BBAN and domestic can be found here : http://www.ecbs.org/iban.htm\n    \"\"\"\n    return normalize_iban(iban)[4:]\n\ndef validate_iban(iban):\n    iban = normalize_iban(iban)\n    if not iban:\n        raise ValidationError(_(\"No IBAN !\"))\n\n    country_code = iban[:2].lower()\n    if country_code not in _map_iban_template:\n        raise ValidationError(_(\"The IBAN is invalid, it should begin with the country code\"))\n\n    iban_template = _map_iban_template[country_code]\n    if len(iban) != len(iban_template.replace(' ', '')):\n        raise ValidationError(_(\"The IBAN does not seem to be correct. You should have entered something like this %s\\n\"\n            \"Where B = National bank code, S = Branch code, C = Account No, k = Check digit\") % iban_template)\n\n    check_chars = iban[4:] + iban[:4]\n    digits = int(''.join(str(int(char, 36)) for char in check_chars))  \n    if digits % 97 != 1:\n        raise ValidationError(_(\"This IBAN does not pass the validation check, please verify it.\"))\n\n\nclass ResPartnerBank(models.Model):\n    _inherit = \"res.partner.bank\"\n\n    @api.one\n    @api.depends('acc_number')\n    def _compute_acc_type(self):\n        try:\n            validate_iban(self.acc_number)\n            self.acc_type = 'iban'\n        except ValidationError:\n            super(ResPartnerBank, self)._compute_acc_type()\n\n    def get_bban(self):\n        if self.acc_type != 'iban':\n            raise UserError(_(\"Cannot compute the BBAN because the account number is not an IBAN.\"))\n        return get_bban_from_iban(self.acc_number)\n\n    @api.model\n    def create(self, vals):\n        if (vals.get('acc_type') == 'iban') and vals.get('acc_number'):\n            vals['acc_number'] = pretty_iban(normalize_iban(vals['acc_number']))\n        return super(ResPartnerBank, self).create(vals)\n\n    @api.multi\n    def write(self, vals):\n        if (vals.get('acc_type') == 'iban') and vals.get('acc_number'):\n            vals['acc_number'] = pretty_iban(normalize_iban(vals['acc_number']))\n        return super(ResPartnerBank, self).write(vals)\n\n    @api.one\n    @api.constrains('acc_number')\n    def _check_iban(self):\n        if self.acc_type == 'iban':\n            validate_iban(self.acc_number)\n\n\n\n\n_map_iban_template = {\n    'ad': 'ADkk BBBB SSSS CCCC CCCC CCCC',  \n    'ae': 'AEkk BBBC CCCC CCCC CCCC CCC',  \n    'al': 'ALkk BBBS SSSK CCCC CCCC CCCC CCCC',  \n    'at': 'ATkk BBBB BCCC CCCC CCCC',  \n    'az': 'AZkk BBBB CCCC CCCC CCCC CCCC CCCC',  \n    'ba': 'BAkk BBBS SSCC CCCC CCKK',  \n    'be': 'BEkk BBBC CCCC CCXX',  \n    'bg': 'BGkk BBBB SSSS DDCC CCCC CC',  \n    'bh': 'BHkk BBBB CCCC CCCC CCCC CC',  \n    'br': 'BRkk BBBB BBBB SSSS SCCC CCCC CCCT N',  \n    'by': 'BYkk BBBB AAAA CCCC CCCC CCCC CCCC',  \n    'ch': 'CHkk BBBB BCCC CCCC CCCC C',  \n    'cr': 'CRkk BBBC CCCC CCCC CCCC C',  \n    'cy': 'CYkk BBBS SSSS CCCC CCCC CCCC CCCC',  \n    'cz': 'CZkk BBBB SSSS SSCC CCCC CCCC',  \n    'de': 'DEkk BBBB BBBB CCCC CCCC CC',  \n    'dk': 'DKkk BBBB CCCC CCCC CC',  \n    'do': 'DOkk BBBB CCCC CCCC CCCC CCCC CCCC',  \n    'ee': 'EEkk BBSS CCCC CCCC CCCK',  \n    'es': 'ESkk BBBB SSSS KKCC CCCC CCCC',  \n    'fi': 'FIkk BBBB BBCC CCCC CK',  \n    'fo': 'FOkk CCCC CCCC CCCC CC',  \n    'fr': 'FRkk BBBB BGGG GGCC CCCC CCCC CKK',  \n    'gb': 'GBkk BBBB SSSS SSCC CCCC CC',  \n    'ge': 'GEkk BBCC CCCC CCCC CCCC CC',  \n    'gi': 'GIkk BBBB CCCC CCCC CCCC CCC',  \n    'gl': 'GLkk BBBB CCCC CCCC CC',  \n    'gr': 'GRkk BBBS SSSC CCCC CCCC CCCC CCC',  \n    'gt': 'GTkk BBBB MMTT CCCC CCCC CCCC CCCC',  \n    'hr': 'HRkk BBBB BBBC CCCC CCCC C',  \n    'hu': 'HUkk BBBS SSSC CCCC CCCC CCCC CCCC',  \n    'ie': 'IEkk BBBB SSSS SSCC CCCC CC',  \n    'il': 'ILkk BBBS SSCC CCCC CCCC CCC',  \n    'is': 'ISkk BBBB SSCC CCCC XXXX XXXX XX',  \n    'it': 'ITkk KBBB BBSS SSSC CCCC CCCC CCC',  \n    'jo': 'JOkk BBBB NNNN CCCC CCCC CCCC CCCC CC',  \n    'kw': 'KWkk BBBB CCCC CCCC CCCC CCCC CCCC CC',  \n    'kz': 'KZkk BBBC CCCC CCCC CCCC',  \n    'lb': 'LBkk BBBB CCCC CCCC CCCC CCCC CCCC',  \n    'li': 'LIkk BBBB BCCC CCCC CCCC C',  \n    'lt': 'LTkk BBBB BCCC CCCC CCCC',  \n    'lu': 'LUkk BBBC CCCC CCCC CCCC',  \n    'lv': 'LVkk BBBB CCCC CCCC CCCC C',  \n    'mc': 'MCkk BBBB BGGG GGCC CCCC CCCC CKK',  \n    'md': 'MDkk BBCC CCCC CCCC CCCC CCCC',  \n    'me': 'MEkk BBBC CCCC CCCC CCCC KK',  \n    'mk': 'MKkk BBBC CCCC CCCC CKK',  \n    'mr': 'MRkk BBBB BSSS SSCC CCCC CCCC CKK',  \n    'mt': 'MTkk BBBB SSSS SCCC CCCC CCCC CCCC CCC',  \n    'mu': 'MUkk BBBB BBSS CCCC CCCC CCCC CCCC CC',  \n    'nl': 'NLkk BBBB CCCC CCCC CC',  \n    'no': 'NOkk BBBB CCCC CCK',  \n    'pk': 'PKkk BBBB CCCC CCCC CCCC CCCC',  \n    'pl': 'PLkk BBBS SSSK CCCC CCCC CCCC CCCC',  \n    'ps': 'PSkk BBBB XXXX XXXX XCCC CCCC CCCC C',  \n    'pt': 'PTkk BBBB SSSS CCCC CCCC CCCK K',  \n    'qa': 'QAkk BBBB CCCC CCCC CCCC CCCC CCCC C',  \n    'ro': 'ROkk BBBB CCCC CCCC CCCC CCCC',  \n    'rs': 'RSkk BBBC CCCC CCCC CCCC KK',  \n    'sa': 'SAkk BBCC CCCC CCCC CCCC CCCC',  \n    'se': 'SEkk BBBB CCCC CCCC CCCC CCCC',  \n    'si': 'SIkk BBSS SCCC CCCC CKK',  \n    'sk': 'SKkk BBBB SSSS SSCC CCCC CCCC',  \n    'sm': 'SMkk KBBB BBSS SSSC CCCC CCCC CCC',  \n    'tn': 'TNkk BBSS SCCC CCCC CCCC CCCC',  \n    'tr': 'TRkk BBBB BRCC CCCC CCCC CCCC CC',  \n    'vg': 'VGkk BBBB CCCC CCCC CCCC CCCC',  \n    'xk': 'XKkk BBBB CCCC CCCC CCCC',  \n}\n", "comments": "    return iban groups four characters separated single space         return     join( iban   4  range(0  len(iban)  4) )  def get bban iban(iban)          returns basic bank account number corresponding iban          note   bban domestic bank account number           the relation iban  bban domestic found   http   www ecbs org iban htm                coding  utf 8        base 36  0  9 a  z    0  35    map iso 3166 1    iban template  described      http   en wikipedia org wiki international bank account number iban formats country    andorra    united arab emirates    albania    austria    azerbaijan    bosnia herzegovina    belgium    bulgaria    bahrain    brazil    belarus    switzerland    costa rica    cyprus    czech republic    germany    denmark    dominican republic    estonia    spain    finland    faroe islands    france    united kingdom    georgia    gibraltar    greenland    greece    guatemala    croatia    hungary    ireland    israel    iceland    italy    jordan    kuwait    kazakhstan    lebanon    liechtenstein    lithuania    luxembourg    latvia    monaco    moldova    montenegro    macedonia    mauritania    malta    mauritius    netherlands    norway    pakistan    poland    palestinian    portugal    qatar    romania    serbia    saudi arabia    sweden    slovenia    slovakia    san marino    tunisia    turkey    virgin islands    kosovo ", "content": "# -*- coding: utf-8 -*-\n\nimport re\n\nfrom odoo import api, models, _\nfrom odoo.exceptions import UserError, ValidationError\n\n\ndef normalize_iban(iban):\n    return re.sub('[\\W_]', '', iban or '')\n\ndef pretty_iban(iban):\n    \"\"\" return iban in groups of four characters separated by a single space \"\"\"\n    return ' '.join([iban[i:i + 4] for i in range(0, len(iban), 4)])\n\ndef get_bban_from_iban(iban):\n    \"\"\" Returns the basic bank account number corresponding to an IBAN.\n        Note : the BBAN is not the same as the domestic bank account number !\n        The relation between IBAN, BBAN and domestic can be found here : http://www.ecbs.org/iban.htm\n    \"\"\"\n    return normalize_iban(iban)[4:]\n\ndef validate_iban(iban):\n    iban = normalize_iban(iban)\n    if not iban:\n        raise ValidationError(_(\"No IBAN !\"))\n\n    country_code = iban[:2].lower()\n    if country_code not in _map_iban_template:\n        raise ValidationError(_(\"The IBAN is invalid, it should begin with the country code\"))\n\n    iban_template = _map_iban_template[country_code]\n    if len(iban) != len(iban_template.replace(' ', '')):\n        raise ValidationError(_(\"The IBAN does not seem to be correct. You should have entered something like this %s\\n\"\n            \"Where B = National bank code, S = Branch code, C = Account No, k = Check digit\") % iban_template)\n\n    check_chars = iban[4:] + iban[:4]\n    digits = int(''.join(str(int(char, 36)) for char in check_chars))  # BASE 36: 0..9,A..Z -> 0..35\n    if digits % 97 != 1:\n        raise ValidationError(_(\"This IBAN does not pass the validation check, please verify it.\"))\n\n\nclass ResPartnerBank(models.Model):\n    _inherit = \"res.partner.bank\"\n\n    @api.one\n    @api.depends('acc_number')\n    def _compute_acc_type(self):\n        try:\n            validate_iban(self.acc_number)\n            self.acc_type = 'iban'\n        except ValidationError:\n            super(ResPartnerBank, self)._compute_acc_type()\n\n    def get_bban(self):\n        if self.acc_type != 'iban':\n            raise UserError(_(\"Cannot compute the BBAN because the account number is not an IBAN.\"))\n        return get_bban_from_iban(self.acc_number)\n\n    @api.model\n    def create(self, vals):\n        if (vals.get('acc_type') == 'iban') and vals.get('acc_number'):\n            vals['acc_number'] = pretty_iban(normalize_iban(vals['acc_number']))\n        return super(ResPartnerBank, self).create(vals)\n\n    @api.multi\n    def write(self, vals):\n        if (vals.get('acc_type') == 'iban') and vals.get('acc_number'):\n            vals['acc_number'] = pretty_iban(normalize_iban(vals['acc_number']))\n        return super(ResPartnerBank, self).write(vals)\n\n    @api.one\n    @api.constrains('acc_number')\n    def _check_iban(self):\n        if self.acc_type == 'iban':\n            validate_iban(self.acc_number)\n\n\n# Map ISO 3166-1 -> IBAN template, as described here :\n# http://en.wikipedia.org/wiki/International_Bank_Account_Number#IBAN_formats_by_country\n_map_iban_template = {\n    'ad': 'ADkk BBBB SSSS CCCC CCCC CCCC',  # Andorra\n    'ae': 'AEkk BBBC CCCC CCCC CCCC CCC',  # United Arab Emirates\n    'al': 'ALkk BBBS SSSK CCCC CCCC CCCC CCCC',  # Albania\n    'at': 'ATkk BBBB BCCC CCCC CCCC',  # Austria\n    'az': 'AZkk BBBB CCCC CCCC CCCC CCCC CCCC',  # Azerbaijan\n    'ba': 'BAkk BBBS SSCC CCCC CCKK',  # Bosnia and Herzegovina\n    'be': 'BEkk BBBC CCCC CCXX',  # Belgium\n    'bg': 'BGkk BBBB SSSS DDCC CCCC CC',  # Bulgaria\n    'bh': 'BHkk BBBB CCCC CCCC CCCC CC',  # Bahrain\n    'br': 'BRkk BBBB BBBB SSSS SCCC CCCC CCCT N',  # Brazil\n    'by': 'BYkk BBBB AAAA CCCC CCCC CCCC CCCC',  # Belarus\n    'ch': 'CHkk BBBB BCCC CCCC CCCC C',  # Switzerland\n    'cr': 'CRkk BBBC CCCC CCCC CCCC C',  # Costa Rica\n    'cy': 'CYkk BBBS SSSS CCCC CCCC CCCC CCCC',  # Cyprus\n    'cz': 'CZkk BBBB SSSS SSCC CCCC CCCC',  # Czech Republic\n    'de': 'DEkk BBBB BBBB CCCC CCCC CC',  # Germany\n    'dk': 'DKkk BBBB CCCC CCCC CC',  # Denmark\n    'do': 'DOkk BBBB CCCC CCCC CCCC CCCC CCCC',  # Dominican Republic\n    'ee': 'EEkk BBSS CCCC CCCC CCCK',  # Estonia\n    'es': 'ESkk BBBB SSSS KKCC CCCC CCCC',  # Spain\n    'fi': 'FIkk BBBB BBCC CCCC CK',  # Finland\n    'fo': 'FOkk CCCC CCCC CCCC CC',  # Faroe Islands\n    'fr': 'FRkk BBBB BGGG GGCC CCCC CCCC CKK',  # France\n    'gb': 'GBkk BBBB SSSS SSCC CCCC CC',  # United Kingdom\n    'ge': 'GEkk BBCC CCCC CCCC CCCC CC',  # Georgia\n    'gi': 'GIkk BBBB CCCC CCCC CCCC CCC',  # Gibraltar\n    'gl': 'GLkk BBBB CCCC CCCC CC',  # Greenland\n    'gr': 'GRkk BBBS SSSC CCCC CCCC CCCC CCC',  # Greece\n    'gt': 'GTkk BBBB MMTT CCCC CCCC CCCC CCCC',  # Guatemala\n    'hr': 'HRkk BBBB BBBC CCCC CCCC C',  # Croatia\n    'hu': 'HUkk BBBS SSSC CCCC CCCC CCCC CCCC',  # Hungary\n    'ie': 'IEkk BBBB SSSS SSCC CCCC CC',  # Ireland\n    'il': 'ILkk BBBS SSCC CCCC CCCC CCC',  # Israel\n    'is': 'ISkk BBBB SSCC CCCC XXXX XXXX XX',  # Iceland\n    'it': 'ITkk KBBB BBSS SSSC CCCC CCCC CCC',  # Italy\n    'jo': 'JOkk BBBB NNNN CCCC CCCC CCCC CCCC CC',  # Jordan\n    'kw': 'KWkk BBBB CCCC CCCC CCCC CCCC CCCC CC',  # Kuwait\n    'kz': 'KZkk BBBC CCCC CCCC CCCC',  # Kazakhstan\n    'lb': 'LBkk BBBB CCCC CCCC CCCC CCCC CCCC',  # Lebanon\n    'li': 'LIkk BBBB BCCC CCCC CCCC C',  # Liechtenstein\n    'lt': 'LTkk BBBB BCCC CCCC CCCC',  # Lithuania\n    'lu': 'LUkk BBBC CCCC CCCC CCCC',  # Luxembourg\n    'lv': 'LVkk BBBB CCCC CCCC CCCC C',  # Latvia\n    'mc': 'MCkk BBBB BGGG GGCC CCCC CCCC CKK',  # Monaco\n    'md': 'MDkk BBCC CCCC CCCC CCCC CCCC',  # Moldova\n    'me': 'MEkk BBBC CCCC CCCC CCCC KK',  # Montenegro\n    'mk': 'MKkk BBBC CCCC CCCC CKK',  # Macedonia\n    'mr': 'MRkk BBBB BSSS SSCC CCCC CCCC CKK',  # Mauritania\n    'mt': 'MTkk BBBB SSSS SCCC CCCC CCCC CCCC CCC',  # Malta\n    'mu': 'MUkk BBBB BBSS CCCC CCCC CCCC CCCC CC',  # Mauritius\n    'nl': 'NLkk BBBB CCCC CCCC CC',  # Netherlands\n    'no': 'NOkk BBBB CCCC CCK',  # Norway\n    'pk': 'PKkk BBBB CCCC CCCC CCCC CCCC',  # Pakistan\n    'pl': 'PLkk BBBS SSSK CCCC CCCC CCCC CCCC',  # Poland\n    'ps': 'PSkk BBBB XXXX XXXX XCCC CCCC CCCC C',  # Palestinian\n    'pt': 'PTkk BBBB SSSS CCCC CCCC CCCK K',  # Portugal\n    'qa': 'QAkk BBBB CCCC CCCC CCCC CCCC CCCC C',  # Qatar\n    'ro': 'ROkk BBBB CCCC CCCC CCCC CCCC',  # Romania\n    'rs': 'RSkk BBBC CCCC CCCC CCCC KK',  # Serbia\n    'sa': 'SAkk BBCC CCCC CCCC CCCC CCCC',  # Saudi Arabia\n    'se': 'SEkk BBBB CCCC CCCC CCCC CCCC',  # Sweden\n    'si': 'SIkk BBSS SCCC CCCC CKK',  # Slovenia\n    'sk': 'SKkk BBBB SSSS SSCC CCCC CCCC',  # Slovakia\n    'sm': 'SMkk KBBB BBSS SSSC CCCC CCCC CCC',  # San Marino\n    'tn': 'TNkk BBSS SCCC CCCC CCCC CCCC',  # Tunisia\n    'tr': 'TRkk BBBB BRCC CCCC CCCC CCCC CC',  # Turkey\n    'vg': 'VGkk BBBB CCCC CCCC CCCC CCCC',  # Virgin Islands\n    'xk': 'XKkk BBBB CCCC CCCC CCCC',  # Kosovo\n}\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "res_partner_bank.py", "id": "b04b706d31caeb1c01e865fdd342c8d0", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/base_iban/models/res_partner_bank.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}