{"author": "ajenti", "code": "\nimport os\nimport sys\nimport subprocess\nfrom lxml import etree\n\nimport logging\nimport ajenti.log\n\n\ndef check_call(*args):\n    try:\n        subprocess.call(*args)\n    except Exception as e:\n        logging.error('Call failed')\n        logging.error(' '.join(args[0]))\n        logging.error(str(e))\n\n\najenti.log.init()\n\nLOCALEDIR = 'ajenti/locales'\nLANGUAGES = [x for x in os.listdir(LOCALEDIR) if not '.' in x]\n\npot_path = os.path.join(LOCALEDIR, 'ajenti.po')\n\nif len(sys.argv) != 2:\n    logging.error('Usage: ./make_messages.py [extract|compile]')\n    sys.exit(1)\n\nif subprocess.call(['which', 'xgettext']) != 0:\n    logging.error('xgettext app not found')\n    sys.exit(0)\n\nif sys.argv[1] == 'extract':\n    os.unlink(pot_path)\n    for (dirpath, dirnames, filenames) in os.walk('ajenti', followlinks=True):\n        if '/custom_' in dirpath:\n            continue\n        if '/elements' in dirpath:\n            continue\n        for f in filenames:\n            path = os.path.join(dirpath, f)\n            if f.endswith('.py'):\n                logging.info('Extracting from %s' % path)\n                check_call([\n                    'xgettext',\n                    '-c',\n                    '--from-code=utf-8',\n                    '--omit-header',\n                    '-o', pot_path,\n                    '-j' if os.path.exists(pot_path) else '-dajenti',\n                    path,\n                ])\n            if f.endswith('.xml'):\n                logging.info('Extracting from %s' % path)\n                content = open(path).read()\n                xml = etree.fromstring('<xml xmlns:bind=\"bind\" xmlns:binder=\"binder\">' + content + '</xml>')\n                try:\n                    msgs = []\n\n                    def traverse(n):\n                        for k, v in n.items():\n                            if v.startswith('{') and v.endswith('}'):\n                                msgs.append(v[1:-1])\n                            try:\n                                if \"_('\" in v:\n                                    eval(v, {'_': msgs.append})\n                            except:\n                                pass\n                        for c in n:\n                            traverse(c)\n                    traverse(xml)\n\n                    fake_content = ''.join('gettext(\"%s\");\\n' % msg for msg in msgs)\n                    fake_content = 'void main() { ' + fake_content + ' }'\n\n                    open(path, 'w').write(fake_content)\n                    check_call([\n                        'xgettext',\n                        '-C',\n                        '--from-code=utf-8',\n                        '--omit-header',\n                        '-o', pot_path,\n                        '-j' if os.path.exists(pot_path) else '-dajenti',\n                        path,\n                    ])\n                finally:\n                    open(path, 'w').write(content)\n\nif sys.argv[1] == 'compile':\n    for lang in LANGUAGES:\n        po_dir = os.path.join(LOCALEDIR, lang, 'LC_MESSAGES')\n        po_path = os.path.join(po_dir, 'ajenti.po')\n        mo_path = os.path.join(po_dir, 'ajenti.mo')\n\n        if not os.path.exists(po_dir):\n            os.makedirs(po_dir)\n\n        logging.info('Compiling %s' % lang)\n        check_call([\n            'msgfmt',\n            po_path,\n            '-v',\n            '-o', mo_path\n        ])\n", "comments": "   usr bin env python ", "content": "#!/usr/bin/env python\nimport os\nimport sys\nimport subprocess\nfrom lxml import etree\n\nimport logging\nimport ajenti.log\n\n\ndef check_call(*args):\n    try:\n        subprocess.call(*args)\n    except Exception as e:\n        logging.error('Call failed')\n        logging.error(' '.join(args[0]))\n        logging.error(str(e))\n\n\najenti.log.init()\n\nLOCALEDIR = 'ajenti/locales'\nLANGUAGES = [x for x in os.listdir(LOCALEDIR) if not '.' in x]\n\npot_path = os.path.join(LOCALEDIR, 'ajenti.po')\n\nif len(sys.argv) != 2:\n    logging.error('Usage: ./make_messages.py [extract|compile]')\n    sys.exit(1)\n\nif subprocess.call(['which', 'xgettext']) != 0:\n    logging.error('xgettext app not found')\n    sys.exit(0)\n\nif sys.argv[1] == 'extract':\n    os.unlink(pot_path)\n    for (dirpath, dirnames, filenames) in os.walk('ajenti', followlinks=True):\n        if '/custom_' in dirpath:\n            continue\n        if '/elements' in dirpath:\n            continue\n        for f in filenames:\n            path = os.path.join(dirpath, f)\n            if f.endswith('.py'):\n                logging.info('Extracting from %s' % path)\n                check_call([\n                    'xgettext',\n                    '-c',\n                    '--from-code=utf-8',\n                    '--omit-header',\n                    '-o', pot_path,\n                    '-j' if os.path.exists(pot_path) else '-dajenti',\n                    path,\n                ])\n            if f.endswith('.xml'):\n                logging.info('Extracting from %s' % path)\n                content = open(path).read()\n                xml = etree.fromstring('<xml xmlns:bind=\"bind\" xmlns:binder=\"binder\">' + content + '</xml>')\n                try:\n                    msgs = []\n\n                    def traverse(n):\n                        for k, v in n.items():\n                            if v.startswith('{') and v.endswith('}'):\n                                msgs.append(v[1:-1])\n                            try:\n                                if \"_('\" in v:\n                                    eval(v, {'_': msgs.append})\n                            except:\n                                pass\n                        for c in n:\n                            traverse(c)\n                    traverse(xml)\n\n                    fake_content = ''.join('gettext(\"%s\");\\n' % msg for msg in msgs)\n                    fake_content = 'void main() { ' + fake_content + ' }'\n\n                    open(path, 'w').write(fake_content)\n                    check_call([\n                        'xgettext',\n                        '-C',\n                        '--from-code=utf-8',\n                        '--omit-header',\n                        '-o', pot_path,\n                        '-j' if os.path.exists(pot_path) else '-dajenti',\n                        path,\n                    ])\n                finally:\n                    open(path, 'w').write(content)\n\nif sys.argv[1] == 'compile':\n    for lang in LANGUAGES:\n        po_dir = os.path.join(LOCALEDIR, lang, 'LC_MESSAGES')\n        po_path = os.path.join(po_dir, 'ajenti.po')\n        mo_path = os.path.join(po_dir, 'ajenti.mo')\n\n        if not os.path.exists(po_dir):\n            os.makedirs(po_dir)\n\n        logging.info('Compiling %s' % lang)\n        check_call([\n            'msgfmt',\n            po_path,\n            '-v',\n            '-o', mo_path\n        ])\n", "description": "Ajenti Core and stock plugins", "file_name": "make_messages.py", "id": "219117887e6a737de888f68086620ae5", "language": "Python", "project_name": "ajenti", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ajenti-ajenti/ajenti-ajenti-dd36ab4/make_messages.py", "save_time": "", "source": "", "update_at": "2018-03-16T02:10:44Z", "url": "https://github.com/ajenti/ajenti", "wiki": false}