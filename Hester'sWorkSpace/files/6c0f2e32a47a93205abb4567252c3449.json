{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n (c) 2014, Mischa Peters <mpeters@a10networks.com>\n (c) 2016, Eric Chou <ericc@a10networks.com>\n\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: a10_server_axapi3\nversion_added: 2.3\nshort_description: Manage A10 Networks AX/SoftAX/Thunder/vThunder devices\ndescription:\n    - Manage SLB (Server Load Balancer) server objects on A10 Networks devices via aXAPIv3.\nauthor: \"Eric Chou (@ericchou) based on previous work by Mischa Peters (@mischapeters)\"\nextends_documentation_fragment:\n  - a10\n  - url\noptions:\n  server_name:\n    description:\n      - The SLB (Server Load Balancer) server name.\n    required: true\n    aliases: ['server']\n  server_ip:\n    description:\n      - The SLB (Server Load Balancer) server IPv4 address.\n    required: true\n    aliases: ['ip', 'address']\n  server_status:\n    description:\n      - The SLB (Server Load Balancer) virtual server status.\n    default: enable\n    aliases: ['action']\n    choices: ['enable', 'disable']\n  server_ports:\n    description:\n      - A list of ports to create for the server. Each list item should be a dictionary which specifies the C(port:)\n        and C(protocol:).\n    aliases: ['port']\n  operation:\n    description:\n      - Create, Update or Remove SLB server. For create and update operation, we use the IP address and server\n        name specified in the POST message. For delete operation, we use the server name in the request URI.\n    default: create\n    choices: ['create', 'update', 'remove']\n  validate_certs:\n    description:\n      - If C(no), SSL certificates will not be validated. This should only be used\n        on personally controlled devices using self-signed certificates.\n    type: bool\n    default: 'yes'\n\n'''\n\nRETURN = '''\n\n'''\n\nEXAMPLES = '''\n Create a new server\n- a10_server:\n    host: a10.mydomain.com\n    username: myadmin\n    password: mypassword\n    server: test\n    server_ip: 1.1.1.100\n    validate_certs: false\n    server_status: enable\n    write_config: yes\n    operation: create\n    server_ports:\n      - port-number: 8080\n        protocol: tcp\n        action: enable\n      - port-number: 8443\n        protocol: TCP\n\n'''\nimport json\n\nfrom ansible.module_utils.network.a10.a10 import axapi_call_v3, a10_argument_spec, axapi_authenticate_v3, axapi_failure\nfrom ansible.module_utils.network.a10.a10 import AXAPI_PORT_PROTOCOLS\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.urls import url_argument_spec\n\n\nVALID_PORT_FIELDS = ['port-number', 'protocol', 'action']\n\n\ndef validate_ports(module, ports):\n    for item in ports:\n        for key in item:\n            if key not in VALID_PORT_FIELDS:\n                module.fail_json(msg=\"invalid port field (%s), must be one of: %s\" % (key, ','.join(VALID_PORT_FIELDS)))\n\n         validate the port number is present and an integer\n        if 'port-number' in item:\n            try:\n                item['port-number'] = int(item['port-number'])\n            except:\n                module.fail_json(msg=\"port-number entries in the port definitions must be integers\")\n        else:\n            module.fail_json(msg=\"port definitions must define the port-number field\")\n\n         validate the port protocol is present, no need to convert to the internal API integer value in v3\n        if 'protocol' in item:\n            protocol = item['protocol']\n            if not protocol:\n                module.fail_json(msg=\"invalid port protocol, must be one of: %s\" % ','.join(AXAPI_PORT_PROTOCOLS))\n            else:\n                item['protocol'] = protocol\n        else:\n            module.fail_json(msg=\"port definitions must define the port protocol (%s)\" % ','.join(AXAPI_PORT_PROTOCOLS))\n\n         'status' is 'action' in AXAPIv3\n         no need to convert the status, a.k.a action, to the internal API integer value in v3\n         action is either enabled or disabled\n        if 'action' in item:\n            action = item['action']\n            if action not in ['enable', 'disable']:\n                module.fail_json(msg=\"server action must be enable or disable\")\n        else:\n            item['action'] = 'enable'\n\n\ndef main():\n    argument_spec = a10_argument_spec()\n    argument_spec.update(url_argument_spec())\n    argument_spec.update(\n        dict(\n            operation=dict(type='str', default='create', choices=['create', 'update', 'delete']),\n            server_name=dict(type='str', aliases=['server'], required=True),\n            server_ip=dict(type='str', aliases=['ip', 'address'], required=True),\n            server_status=dict(type='str', default='enable', aliases=['action'], choices=['enable', 'disable']),\n            server_ports=dict(type='list', aliases=['port'], default=[]),\n        )\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=False\n    )\n\n    host = module.params['host']\n    username = module.params['username']\n    password = module.params['password']\n    operation = module.params['operation']\n    write_config = module.params['write_config']\n    slb_server = module.params['server_name']\n    slb_server_ip = module.params['server_ip']\n    slb_server_status = module.params['server_status']\n    slb_server_ports = module.params['server_ports']\n\n    axapi_base_url = 'https://{}/axapi/v3/'.format(host)\n    axapi_auth_url = axapi_base_url + 'auth/'\n    signature = axapi_authenticate_v3(module, axapi_auth_url, username, password)\n\n     validate the ports data structure\n    validate_ports(module, slb_server_ports)\n\n    json_post = {\n        \"server-list\": [\n            {\n                \"name\": slb_server,\n                \"host\": slb_server_ip\n            }\n        ]\n    }\n\n     add optional module parameters\n    if slb_server_ports:\n        json_post['server-list'][0]['port-list'] = slb_server_ports\n\n    if slb_server_status:\n        json_post['server-list'][0]['action'] = slb_server_status\n\n    slb_server_data = axapi_call_v3(module, axapi_base_url + 'slb/server/', method='GET', body='', signature=signature)\n\n     for empty slb server list\n    if axapi_failure(slb_server_data):\n        slb_server_exists = False\n    else:\n        slb_server_list = [server['name'] for server in slb_server_data['server-list']]\n        if slb_server in slb_server_list:\n            slb_server_exists = True\n        else:\n            slb_server_exists = False\n\n    changed = False\n    if operation == 'create':\n        if slb_server_exists is False:\n            result = axapi_call_v3(module, axapi_base_url + 'slb/server/', method='POST', body=json.dumps(json_post), signature=signature)\n            if axapi_failure(result):\n                module.fail_json(msg=\"failed to create the server: %s\" % result['response']['err']['msg'])\n            changed = True\n        else:\n            module.fail_json(msg=\"server already exists, use state='update' instead\")\n            changed = False\n         if we changed things, get the full info regarding result\n        if changed:\n            result = axapi_call_v3(module, axapi_base_url + 'slb/server/' + slb_server, method='GET', body='', signature=signature)\n        else:\n            result = slb_server_data\n    elif operation == 'delete':\n        if slb_server_exists:\n            result = axapi_call_v3(module, axapi_base_url + 'slb/server/' + slb_server, method='DELETE', body='', signature=signature)\n            if axapi_failure(result):\n                module.fail_json(msg=\"failed to delete server: %s\" % result['response']['err']['msg'])\n            changed = True\n        else:\n            result = dict(msg=\"the server was not present\")\n    elif operation == 'update':\n        if slb_server_exists:\n            result = axapi_call_v3(module, axapi_base_url + 'slb/server/', method='PUT', body=json.dumps(json_post), signature=signature)\n            if axapi_failure(result):\n                module.fail_json(msg=\"failed to update server: %s\" % result['response']['err']['msg'])\n            changed = True\n        else:\n            result = dict(msg=\"the server was not present\")\n\n     if the config has changed, save the config unless otherwise requested\n    if changed and write_config:\n        write_result = axapi_call_v3(module, axapi_base_url + 'write/memory/', method='POST', body='', signature=signature)\n        if axapi_failure(write_result):\n            module.fail_json(msg=\"failed to save the configuration: %s\" % write_result['response']['err']['msg'])\n\n     log out gracefully and exit\n    axapi_call_v3(module, axapi_base_url + 'logoff/', method='POST', body='', signature=signature)\n    module.exit_json(changed=changed, content=result)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  a10 server axapi3 version added  2 3 short description  manage a10 networks ax softax thunder vthunder devices description        manage slb (server load balancer) server objects a10 networks devices via axapiv3  author   eric chou ( ericchou) based previous work mischa peters ( mischapeters)  extends documentation fragment      a10     url options    server name      description          the slb (server load balancer) server name      required  true     aliases    server     server ip      description          the slb (server load balancer) server ipv4 address      required  true     aliases    ip    address     server status      description          the slb (server load balancer) virtual server status      default  enable     aliases    action       choices    enable    disable     server ports      description          a list ports create server  each list item dictionary specifies c(port )         c(protocol )      aliases    port     operation      description          create  update remove slb server  for create update operation  use ip address server         name specified post message  for delete operation  use server name request uri      default  create     choices    create    update    remove     validate certs      description          if c(no)  ssl certificates validated  this used         personally controlled devices using self signed certificates      type  bool     default   yes        return              examples         create new server   a10 server      host  a10 mydomain com     username  myadmin     password  mypassword     server  test     server ip  1 1 1 100     validate certs  false     server status  enable     write config  yes     operation  create     server ports          port number  8080         protocol  tcp         action  enable         port number  8443         protocol  tcp          usr bin python        coding  utf 8        (c) 2014  mischa peters  mpeters a10networks com     (c) 2016  eric chou  ericc a10networks com        gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)       create new server    validate port number present integer    validate port protocol present  need convert internal api integer value v3     status   action  axapiv3    need convert status  k action  internal api integer value v3    action either enabled disabled    validate ports data structure    add optional module parameters    empty slb server list    changed things  get full info regarding result    config changed  save config unless otherwise requested    log gracefully exit ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2014, Mischa Peters <mpeters@a10networks.com>\n# (c) 2016, Eric Chou <ericc@a10networks.com>\n#\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: a10_server_axapi3\nversion_added: 2.3\nshort_description: Manage A10 Networks AX/SoftAX/Thunder/vThunder devices\ndescription:\n    - Manage SLB (Server Load Balancer) server objects on A10 Networks devices via aXAPIv3.\nauthor: \"Eric Chou (@ericchou) based on previous work by Mischa Peters (@mischapeters)\"\nextends_documentation_fragment:\n  - a10\n  - url\noptions:\n  server_name:\n    description:\n      - The SLB (Server Load Balancer) server name.\n    required: true\n    aliases: ['server']\n  server_ip:\n    description:\n      - The SLB (Server Load Balancer) server IPv4 address.\n    required: true\n    aliases: ['ip', 'address']\n  server_status:\n    description:\n      - The SLB (Server Load Balancer) virtual server status.\n    default: enable\n    aliases: ['action']\n    choices: ['enable', 'disable']\n  server_ports:\n    description:\n      - A list of ports to create for the server. Each list item should be a dictionary which specifies the C(port:)\n        and C(protocol:).\n    aliases: ['port']\n  operation:\n    description:\n      - Create, Update or Remove SLB server. For create and update operation, we use the IP address and server\n        name specified in the POST message. For delete operation, we use the server name in the request URI.\n    default: create\n    choices: ['create', 'update', 'remove']\n  validate_certs:\n    description:\n      - If C(no), SSL certificates will not be validated. This should only be used\n        on personally controlled devices using self-signed certificates.\n    type: bool\n    default: 'yes'\n\n'''\n\nRETURN = '''\n#\n'''\n\nEXAMPLES = '''\n# Create a new server\n- a10_server:\n    host: a10.mydomain.com\n    username: myadmin\n    password: mypassword\n    server: test\n    server_ip: 1.1.1.100\n    validate_certs: false\n    server_status: enable\n    write_config: yes\n    operation: create\n    server_ports:\n      - port-number: 8080\n        protocol: tcp\n        action: enable\n      - port-number: 8443\n        protocol: TCP\n\n'''\nimport json\n\nfrom ansible.module_utils.network.a10.a10 import axapi_call_v3, a10_argument_spec, axapi_authenticate_v3, axapi_failure\nfrom ansible.module_utils.network.a10.a10 import AXAPI_PORT_PROTOCOLS\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.urls import url_argument_spec\n\n\nVALID_PORT_FIELDS = ['port-number', 'protocol', 'action']\n\n\ndef validate_ports(module, ports):\n    for item in ports:\n        for key in item:\n            if key not in VALID_PORT_FIELDS:\n                module.fail_json(msg=\"invalid port field (%s), must be one of: %s\" % (key, ','.join(VALID_PORT_FIELDS)))\n\n        # validate the port number is present and an integer\n        if 'port-number' in item:\n            try:\n                item['port-number'] = int(item['port-number'])\n            except:\n                module.fail_json(msg=\"port-number entries in the port definitions must be integers\")\n        else:\n            module.fail_json(msg=\"port definitions must define the port-number field\")\n\n        # validate the port protocol is present, no need to convert to the internal API integer value in v3\n        if 'protocol' in item:\n            protocol = item['protocol']\n            if not protocol:\n                module.fail_json(msg=\"invalid port protocol, must be one of: %s\" % ','.join(AXAPI_PORT_PROTOCOLS))\n            else:\n                item['protocol'] = protocol\n        else:\n            module.fail_json(msg=\"port definitions must define the port protocol (%s)\" % ','.join(AXAPI_PORT_PROTOCOLS))\n\n        # 'status' is 'action' in AXAPIv3\n        # no need to convert the status, a.k.a action, to the internal API integer value in v3\n        # action is either enabled or disabled\n        if 'action' in item:\n            action = item['action']\n            if action not in ['enable', 'disable']:\n                module.fail_json(msg=\"server action must be enable or disable\")\n        else:\n            item['action'] = 'enable'\n\n\ndef main():\n    argument_spec = a10_argument_spec()\n    argument_spec.update(url_argument_spec())\n    argument_spec.update(\n        dict(\n            operation=dict(type='str', default='create', choices=['create', 'update', 'delete']),\n            server_name=dict(type='str', aliases=['server'], required=True),\n            server_ip=dict(type='str', aliases=['ip', 'address'], required=True),\n            server_status=dict(type='str', default='enable', aliases=['action'], choices=['enable', 'disable']),\n            server_ports=dict(type='list', aliases=['port'], default=[]),\n        )\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=False\n    )\n\n    host = module.params['host']\n    username = module.params['username']\n    password = module.params['password']\n    operation = module.params['operation']\n    write_config = module.params['write_config']\n    slb_server = module.params['server_name']\n    slb_server_ip = module.params['server_ip']\n    slb_server_status = module.params['server_status']\n    slb_server_ports = module.params['server_ports']\n\n    axapi_base_url = 'https://{}/axapi/v3/'.format(host)\n    axapi_auth_url = axapi_base_url + 'auth/'\n    signature = axapi_authenticate_v3(module, axapi_auth_url, username, password)\n\n    # validate the ports data structure\n    validate_ports(module, slb_server_ports)\n\n    json_post = {\n        \"server-list\": [\n            {\n                \"name\": slb_server,\n                \"host\": slb_server_ip\n            }\n        ]\n    }\n\n    # add optional module parameters\n    if slb_server_ports:\n        json_post['server-list'][0]['port-list'] = slb_server_ports\n\n    if slb_server_status:\n        json_post['server-list'][0]['action'] = slb_server_status\n\n    slb_server_data = axapi_call_v3(module, axapi_base_url + 'slb/server/', method='GET', body='', signature=signature)\n\n    # for empty slb server list\n    if axapi_failure(slb_server_data):\n        slb_server_exists = False\n    else:\n        slb_server_list = [server['name'] for server in slb_server_data['server-list']]\n        if slb_server in slb_server_list:\n            slb_server_exists = True\n        else:\n            slb_server_exists = False\n\n    changed = False\n    if operation == 'create':\n        if slb_server_exists is False:\n            result = axapi_call_v3(module, axapi_base_url + 'slb/server/', method='POST', body=json.dumps(json_post), signature=signature)\n            if axapi_failure(result):\n                module.fail_json(msg=\"failed to create the server: %s\" % result['response']['err']['msg'])\n            changed = True\n        else:\n            module.fail_json(msg=\"server already exists, use state='update' instead\")\n            changed = False\n        # if we changed things, get the full info regarding result\n        if changed:\n            result = axapi_call_v3(module, axapi_base_url + 'slb/server/' + slb_server, method='GET', body='', signature=signature)\n        else:\n            result = slb_server_data\n    elif operation == 'delete':\n        if slb_server_exists:\n            result = axapi_call_v3(module, axapi_base_url + 'slb/server/' + slb_server, method='DELETE', body='', signature=signature)\n            if axapi_failure(result):\n                module.fail_json(msg=\"failed to delete server: %s\" % result['response']['err']['msg'])\n            changed = True\n        else:\n            result = dict(msg=\"the server was not present\")\n    elif operation == 'update':\n        if slb_server_exists:\n            result = axapi_call_v3(module, axapi_base_url + 'slb/server/', method='PUT', body=json.dumps(json_post), signature=signature)\n            if axapi_failure(result):\n                module.fail_json(msg=\"failed to update server: %s\" % result['response']['err']['msg'])\n            changed = True\n        else:\n            result = dict(msg=\"the server was not present\")\n\n    # if the config has changed, save the config unless otherwise requested\n    if changed and write_config:\n        write_result = axapi_call_v3(module, axapi_base_url + 'write/memory/', method='POST', body='', signature=signature)\n        if axapi_failure(write_result):\n            module.fail_json(msg=\"failed to save the configuration: %s\" % write_result['response']['err']['msg'])\n\n    # log out gracefully and exit\n    axapi_call_v3(module, axapi_base_url + 'logoff/', method='POST', body='', signature=signature)\n    module.exit_json(changed=changed, content=result)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "a10_server_axapi3.py", "id": "6c0f2e32a47a93205abb4567252c3449", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/a10/a10_server_axapi3.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}