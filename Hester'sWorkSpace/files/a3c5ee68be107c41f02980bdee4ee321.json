{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\nimport argparse\nimport os\n\n\ndef str2bool(v):\n  return v.lower() in ('true', '1')\n\n\ndef add_argument_group(name):\n  arg = parser.add_argument_group(name)\n  arg_lists.append(arg)\n  return arg\n\n\ndef get_config():\n  config, unparsed = parser.parse_known_args()\n  return config, unparsed\n\n\narg_lists = []\nparser = argparse.ArgumentParser()\nwork_dir = os.path.abspath(os.path.join(__file__, '../../'))\n\nnet_arg = add_argument_group('Network')\nnet_arg.add_argument('--lstm_dim', type=int, default=128)\nnet_arg.add_argument('--num_layers', type=int, default=1)\nnet_arg.add_argument('--embed_dim_txt', type=int, default=128)\nnet_arg.add_argument('--embed_dim_nmn', type=int, default=128)\nnet_arg.add_argument(\n  '--T_encoder', type=int, default=0)   will be updated when reading data\nnet_arg.add_argument('--T_decoder', type=int, default=5)\n\ntrain_arg = add_argument_group('Training')\ntrain_arg.add_argument('--train_tag', type=str, default='n2nmn')\ntrain_arg.add_argument('--batch_size', type=int, default=128)\ntrain_arg.add_argument('--max_iter', type=int, default=1000000)\ntrain_arg.add_argument('--weight_decay', type=float, default=1e-5)\ntrain_arg.add_argument('--baseline_decay', type=float, default=0.99)\ntrain_arg.add_argument('--max_grad_norm', type=float, default=10)\ntrain_arg.add_argument('--random_seed', type=int, default=123)\n\ndata_arg = add_argument_group('Data')\ndata_path = work_dir + '/MetaQA/'\ndata_arg.add_argument('--KB_file', type=str, default=data_path + 'kb.txt')\ndata_arg.add_argument(\n  '--data_dir', type=str, default=data_path + '1-hop/vanilla/')\ndata_arg.add_argument('--train_data_file', type=str, default='qa_train.txt')\ndata_arg.add_argument('--dev_data_file', type=str, default='qa_dev.txt')\ndata_arg.add_argument('--test_data_file', type=str, default='qa_test.txt')\n\nexp_arg = add_argument_group('Experiment')\nexp_path = work_dir + '/exp_1_hop/'\nexp_arg.add_argument('--exp_dir', type=str, default=exp_path)\n\nlog_arg = add_argument_group('Log')\nlog_arg.add_argument('--log_dir', type=str, default='logs')\nlog_arg.add_argument('--log_interval', type=int, default=1000)\nlog_arg.add_argument('--num_log_samples', type=int, default=3)\nlog_arg.add_argument(\n  '--log_level', type=str, default='INFO', choices=['INFO', 'DEBUG', 'WARN'])\n\nio_arg = add_argument_group('IO')\nio_arg.add_argument('--model_dir', type=str, default='model')\nio_arg.add_argument('--snapshot_interval', type=int, default=1000)\nio_arg.add_argument('--output_dir', type=str, default='output')\n", "comments": "  copyright 2017 the tensorflow authors all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       updated reading data ", "content": "# Copyright 2017 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\nimport argparse\nimport os\n\n\ndef str2bool(v):\n  return v.lower() in ('true', '1')\n\n\ndef add_argument_group(name):\n  arg = parser.add_argument_group(name)\n  arg_lists.append(arg)\n  return arg\n\n\ndef get_config():\n  config, unparsed = parser.parse_known_args()\n  return config, unparsed\n\n\narg_lists = []\nparser = argparse.ArgumentParser()\nwork_dir = os.path.abspath(os.path.join(__file__, '../../'))\n\nnet_arg = add_argument_group('Network')\nnet_arg.add_argument('--lstm_dim', type=int, default=128)\nnet_arg.add_argument('--num_layers', type=int, default=1)\nnet_arg.add_argument('--embed_dim_txt', type=int, default=128)\nnet_arg.add_argument('--embed_dim_nmn', type=int, default=128)\nnet_arg.add_argument(\n  '--T_encoder', type=int, default=0)  # will be updated when reading data\nnet_arg.add_argument('--T_decoder', type=int, default=5)\n\ntrain_arg = add_argument_group('Training')\ntrain_arg.add_argument('--train_tag', type=str, default='n2nmn')\ntrain_arg.add_argument('--batch_size', type=int, default=128)\ntrain_arg.add_argument('--max_iter', type=int, default=1000000)\ntrain_arg.add_argument('--weight_decay', type=float, default=1e-5)\ntrain_arg.add_argument('--baseline_decay', type=float, default=0.99)\ntrain_arg.add_argument('--max_grad_norm', type=float, default=10)\ntrain_arg.add_argument('--random_seed', type=int, default=123)\n\ndata_arg = add_argument_group('Data')\ndata_path = work_dir + '/MetaQA/'\ndata_arg.add_argument('--KB_file', type=str, default=data_path + 'kb.txt')\ndata_arg.add_argument(\n  '--data_dir', type=str, default=data_path + '1-hop/vanilla/')\ndata_arg.add_argument('--train_data_file', type=str, default='qa_train.txt')\ndata_arg.add_argument('--dev_data_file', type=str, default='qa_dev.txt')\ndata_arg.add_argument('--test_data_file', type=str, default='qa_test.txt')\n\nexp_arg = add_argument_group('Experiment')\nexp_path = work_dir + '/exp_1_hop/'\nexp_arg.add_argument('--exp_dir', type=str, default=exp_path)\n\nlog_arg = add_argument_group('Log')\nlog_arg.add_argument('--log_dir', type=str, default='logs')\nlog_arg.add_argument('--log_interval', type=int, default=1000)\nlog_arg.add_argument('--num_log_samples', type=int, default=3)\nlog_arg.add_argument(\n  '--log_level', type=str, default='INFO', choices=['INFO', 'DEBUG', 'WARN'])\n\nio_arg = add_argument_group('IO')\nio_arg.add_argument('--model_dir', type=str, default='model')\nio_arg.add_argument('--snapshot_interval', type=int, default=1000)\nio_arg.add_argument('--output_dir', type=str, default='output')\n", "description": "Models and examples built with TensorFlow", "file_name": "config.py", "id": "a3c5ee68be107c41f02980bdee4ee321", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/qa_kg/exp_1_hop/config.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}