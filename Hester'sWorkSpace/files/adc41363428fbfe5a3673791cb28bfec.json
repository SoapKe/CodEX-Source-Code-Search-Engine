{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    strip_or_none,\n    try_get,\n    unified_timestamp,\n)\n\n\nclass WatchBoxIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?watchbox\\.de/(?P<kind>serien|filme)/(?:[^/]+/)*[^/]+-(?P<id>\\d+)'\n    _TESTS = [{\n        \n        'url': 'https://www.watchbox.de/filme/free-jimmy-12325.html',\n        'info_dict': {\n            'id': '341368',\n            'ext': 'mp4',\n            'title': 'Free Jimmy',\n            'description': 'md5:bcd8bafbbf9dc0ef98063d344d7cc5f6',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 4890,\n            'age_limit': 16,\n            'release_year': 2009,\n        },\n        'params': {\n            'format': 'bestvideo',\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n    }, {\n        \n        'url': 'https://www.watchbox.de/serien/ugly-americans-12231/staffel-1/date-in-der-hoelle-328286.html',\n        'info_dict': {\n            'id': '328286',\n            'ext': 'mp4',\n            'title': 'S01 E01 - Date in der H\u00f6lle',\n            'description': 'md5:2f31c74a8186899f33cb5114491dae2b',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1291,\n            'age_limit': 12,\n            'release_year': 2010,\n            'series': 'Ugly Americans',\n            'season_number': 1,\n            'episode': 'Date in der H\u00f6lle',\n            'episode_number': 1,\n        },\n        'params': {\n            'format': 'bestvideo',\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n    }, {\n        'url': 'https://www.watchbox.de/serien/ugly-americans-12231/staffel-2/der-ring-des-powers-328270',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id = mobj.group('kind', 'id')\n\n        webpage = self._download_webpage(url, video_id)\n\n        source = self._parse_json(\n            self._search_regex(\n                r'(?s)source\\s*:\\s*({.+?})\\s*,\\s*\\n', webpage, 'source',\n                default='{}'),\n            video_id, transform_source=js_to_json, fatal=False) or {}\n\n        video_id = compat_str(source.get('videoId') or video_id)\n\n        devapi = self._download_json(\n            'http://api.watchbox.de/devapi/id/%s' % video_id, video_id, query={\n                'format': 'json',\n                'apikey': 'hbbtv',\n            }, fatal=False)\n\n        item = try_get(devapi, lambda x: x['items'][0], dict) or {}\n\n        title = item.get('title') or try_get(\n            item, lambda x: x['movie']['headline_movie'],\n            compat_str) or source['title']\n\n        formats = []\n        hls_url = item.get('media_videourl_hls') or source.get('hls')\n        if hls_url:\n            formats.extend(self._extract_m3u8_formats(\n                hls_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                m3u8_id='hls', fatal=False))\n        dash_url = item.get('media_videourl_wv') or source.get('dash')\n        if dash_url:\n            formats.extend(self._extract_mpd_formats(\n                dash_url, video_id, mpd_id='dash', fatal=False))\n        mp4_url = item.get('media_videourl')\n        if mp4_url:\n            formats.append({\n                'url': mp4_url,\n                'format_id': 'mp4',\n                'width': int_or_none(item.get('width')),\n                'height': int_or_none(item.get('height')),\n                'tbr': int_or_none(item.get('bitrate')),\n            })\n        self._sort_formats(formats)\n\n        description = strip_or_none(item.get('descr'))\n        thumbnail = item.get('media_content_thumbnail_large') or source.get('poster') or item.get('media_thumbnail')\n        duration = int_or_none(item.get('media_length') or source.get('length'))\n        timestamp = unified_timestamp(item.get('pubDate'))\n        view_count = int_or_none(item.get('media_views'))\n        age_limit = int_or_none(try_get(item, lambda x: x['movie']['fsk']))\n        release_year = int_or_none(try_get(item, lambda x: x['movie']['rel_year']))\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'timestamp': timestamp,\n            'view_count': view_count,\n            'age_limit': age_limit,\n            'release_year': release_year,\n            'formats': formats,\n        }\n\n        if kind.lower() == 'serien':\n            series = try_get(\n                item, lambda x: x['special']['title'],\n                compat_str) or source.get('format')\n            season_number = int_or_none(self._search_regex(\n                r'^S(\\d{1,2})\\s*E\\d{1,2}', title, 'season number',\n                default=None) or self._search_regex(\n                    r'/staffel-(\\d+)/', url, 'season number', default=None))\n            episode = source.get('title')\n            episode_number = int_or_none(self._search_regex(\n                r'^S\\d{1,2}\\s*E(\\d{1,2})', title, 'episode number',\n                default=None))\n            info.update({\n                'series': series,\n                'season_number': season_number,\n                'episode': episode,\n                'episode_number': episode_number,\n            })\n\n        return info\n", "comments": "# coding: utf-8\n# film\n# episode\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    strip_or_none,\n    try_get,\n    unified_timestamp,\n)\n\n\nclass WatchBoxIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?watchbox\\.de/(?P<kind>serien|filme)/(?:[^/]+/)*[^/]+-(?P<id>\\d+)'\n    _TESTS = [{\n        # film\n        'url': 'https://www.watchbox.de/filme/free-jimmy-12325.html',\n        'info_dict': {\n            'id': '341368',\n            'ext': 'mp4',\n            'title': 'Free Jimmy',\n            'description': 'md5:bcd8bafbbf9dc0ef98063d344d7cc5f6',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 4890,\n            'age_limit': 16,\n            'release_year': 2009,\n        },\n        'params': {\n            'format': 'bestvideo',\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n    }, {\n        # episode\n        'url': 'https://www.watchbox.de/serien/ugly-americans-12231/staffel-1/date-in-der-hoelle-328286.html',\n        'info_dict': {\n            'id': '328286',\n            'ext': 'mp4',\n            'title': 'S01 E01 - Date in der H\u00f6lle',\n            'description': 'md5:2f31c74a8186899f33cb5114491dae2b',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1291,\n            'age_limit': 12,\n            'release_year': 2010,\n            'series': 'Ugly Americans',\n            'season_number': 1,\n            'episode': 'Date in der H\u00f6lle',\n            'episode_number': 1,\n        },\n        'params': {\n            'format': 'bestvideo',\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n    }, {\n        'url': 'https://www.watchbox.de/serien/ugly-americans-12231/staffel-2/der-ring-des-powers-328270',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id = mobj.group('kind', 'id')\n\n        webpage = self._download_webpage(url, video_id)\n\n        source = self._parse_json(\n            self._search_regex(\n                r'(?s)source\\s*:\\s*({.+?})\\s*,\\s*\\n', webpage, 'source',\n                default='{}'),\n            video_id, transform_source=js_to_json, fatal=False) or {}\n\n        video_id = compat_str(source.get('videoId') or video_id)\n\n        devapi = self._download_json(\n            'http://api.watchbox.de/devapi/id/%s' % video_id, video_id, query={\n                'format': 'json',\n                'apikey': 'hbbtv',\n            }, fatal=False)\n\n        item = try_get(devapi, lambda x: x['items'][0], dict) or {}\n\n        title = item.get('title') or try_get(\n            item, lambda x: x['movie']['headline_movie'],\n            compat_str) or source['title']\n\n        formats = []\n        hls_url = item.get('media_videourl_hls') or source.get('hls')\n        if hls_url:\n            formats.extend(self._extract_m3u8_formats(\n                hls_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                m3u8_id='hls', fatal=False))\n        dash_url = item.get('media_videourl_wv') or source.get('dash')\n        if dash_url:\n            formats.extend(self._extract_mpd_formats(\n                dash_url, video_id, mpd_id='dash', fatal=False))\n        mp4_url = item.get('media_videourl')\n        if mp4_url:\n            formats.append({\n                'url': mp4_url,\n                'format_id': 'mp4',\n                'width': int_or_none(item.get('width')),\n                'height': int_or_none(item.get('height')),\n                'tbr': int_or_none(item.get('bitrate')),\n            })\n        self._sort_formats(formats)\n\n        description = strip_or_none(item.get('descr'))\n        thumbnail = item.get('media_content_thumbnail_large') or source.get('poster') or item.get('media_thumbnail')\n        duration = int_or_none(item.get('media_length') or source.get('length'))\n        timestamp = unified_timestamp(item.get('pubDate'))\n        view_count = int_or_none(item.get('media_views'))\n        age_limit = int_or_none(try_get(item, lambda x: x['movie']['fsk']))\n        release_year = int_or_none(try_get(item, lambda x: x['movie']['rel_year']))\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'timestamp': timestamp,\n            'view_count': view_count,\n            'age_limit': age_limit,\n            'release_year': release_year,\n            'formats': formats,\n        }\n\n        if kind.lower() == 'serien':\n            series = try_get(\n                item, lambda x: x['special']['title'],\n                compat_str) or source.get('format')\n            season_number = int_or_none(self._search_regex(\n                r'^S(\\d{1,2})\\s*E\\d{1,2}', title, 'season number',\n                default=None) or self._search_regex(\n                    r'/staffel-(\\d+)/', url, 'season number', default=None))\n            episode = source.get('title')\n            episode_number = int_or_none(self._search_regex(\n                r'^S\\d{1,2}\\s*E(\\d{1,2})', title, 'episode number',\n                default=None))\n            info.update({\n                'series': series,\n                'season_number': season_number,\n                'episode': episode,\n                'episode_number': episode_number,\n            })\n\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "watchbox.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/watchbox.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}