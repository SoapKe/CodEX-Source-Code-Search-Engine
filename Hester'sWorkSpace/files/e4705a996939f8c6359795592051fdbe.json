{"author": "nvbn", "code": "from thefuck.utils import is_app, get_closest, replace_argument\n\n\n_ADB_COMMANDS = (\n    'backup',\n    'bugreport',\n    'connect',\n    'devices',\n    'disable-verity',\n    'disconnect',\n    'enable-verity',\n    'emu',\n    'forward',\n    'get-devpath',\n    'get-serialno',\n    'get-state',\n    'install',\n    'install-multiple',\n    'jdwp',\n    'keygen',\n    'kill-server',\n    'logcat',\n    'pull',\n    'push',\n    'reboot',\n    'reconnect',\n    'restore',\n    'reverse',\n    'root',\n    'run-as',\n    'shell',\n    'sideload',\n    'start-server',\n    'sync',\n    'tcpip',\n    'uninstall',\n    'unroot',\n    'usb',\n    'wait-for',\n)\n\n\ndef match(command):\n    return (is_app(command, 'adb')\n            and command.output.startswith('Android Debug Bridge version'))\n\n\ndef get_new_command(command):\n    for idx, arg in enumerate(command.script_parts[1:]):\n        \n        \n        if not arg[0] == '-' and not command.script_parts[idx] in ('-s', '-H', '-P', '-L'):\n            adb_cmd = get_closest(arg, _ADB_COMMANDS)\n            return replace_argument(command.script, arg, adb_cmd)\n", "comments": "# allowed params to ADB are a/d/e/s/H/P/L where s, H, P and L take additional args\n# for example 'adb -s 111 logcat' or 'adb -e logcat'\n", "content": "from thefuck.utils import is_app, get_closest, replace_argument\n\n\n_ADB_COMMANDS = (\n    'backup',\n    'bugreport',\n    'connect',\n    'devices',\n    'disable-verity',\n    'disconnect',\n    'enable-verity',\n    'emu',\n    'forward',\n    'get-devpath',\n    'get-serialno',\n    'get-state',\n    'install',\n    'install-multiple',\n    'jdwp',\n    'keygen',\n    'kill-server',\n    'logcat',\n    'pull',\n    'push',\n    'reboot',\n    'reconnect',\n    'restore',\n    'reverse',\n    'root',\n    'run-as',\n    'shell',\n    'sideload',\n    'start-server',\n    'sync',\n    'tcpip',\n    'uninstall',\n    'unroot',\n    'usb',\n    'wait-for',\n)\n\n\ndef match(command):\n    return (is_app(command, 'adb')\n            and command.output.startswith('Android Debug Bridge version'))\n\n\ndef get_new_command(command):\n    for idx, arg in enumerate(command.script_parts[1:]):\n        # allowed params to ADB are a/d/e/s/H/P/L where s, H, P and L take additional args\n        # for example 'adb -s 111 logcat' or 'adb -e logcat'\n        if not arg[0] == '-' and not command.script_parts[idx] in ('-s', '-H', '-P', '-L'):\n            adb_cmd = get_closest(arg, _ADB_COMMANDS)\n            return replace_argument(command.script, arg, adb_cmd)\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "adb_unknown_command.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/rules/adb_unknown_command.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}