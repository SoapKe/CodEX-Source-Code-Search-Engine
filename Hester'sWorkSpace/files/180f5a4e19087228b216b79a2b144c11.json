{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n Copyright: Ansible Project\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipmi_power\nshort_description: Power management for machine\ndescription:\n  - Use this module for power management\nversion_added: \"2.2\"\noptions:\n  name:\n    description:\n      - Hostname or ip address of the BMC.\n    required: true\n  port:\n    description:\n      - Remote RMCP port.\n    default: 623\n  user:\n    description:\n      - Username to use to connect to the BMC.\n    required: true\n  password:\n    description:\n      - Password to connect to the BMC.\n    required: true\n  state:\n    description:\n      - Whether to ensure that the machine in desired state.\n    required: true\n    choices:\n        - on -- Request system turn on\n        - off -- Request system turn off without waiting for OS to shutdown\n        - shutdown -- Have system request OS proper shutdown\n        - reset -- Request system reset without waiting for OS\n        - boot -- If system is off, then 'on', else 'reset'\n  timeout:\n    description:\n      - Maximum number of seconds before interrupt request.\n    default: 300\nrequirements:\n  - \"python >= 2.6\"\n  - pyghmi\nauthor: \"Bulat Gaifullin (gaifullinbf@gmail.com)\"\n'''\n\nRETURN = '''\npowerstate:\n    description: The current power state of the machine.\n    returned: success\n    type: string\n    sample: on\n'''\n\nEXAMPLES = '''\n Ensure machine is powered on.\n- ipmi_power:\n    name: test.testdomain.com\n    user: admin\n    password: password\n    state: on\n'''\n\ntry:\n    from pyghmi.ipmi import command\nexcept ImportError:\n    command = None\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            port=dict(default=623, type='int'),\n            state=dict(required=True, choices=['on', 'off', 'shutdown', 'reset', 'boot']),\n            user=dict(required=True, no_log=True),\n            password=dict(required=True, no_log=True),\n            timeout=dict(default=300, type='int'),\n        ),\n        supports_check_mode=True,\n    )\n\n    if command is None:\n        module.fail_json(msg='the python pyghmi module is required')\n\n    name = module.params['name']\n    port = module.params['port']\n    user = module.params['user']\n    password = module.params['password']\n    state = module.params['state']\n    timeout = module.params['timeout']\n\n     --- run command ---\n    try:\n        ipmi_cmd = command.Command(\n            bmc=name, userid=user, password=password, port=port\n        )\n        module.debug('ipmi instantiated - name: \"%s\"' % name)\n\n        current = ipmi_cmd.get_power()\n        if current['powerstate'] != state:\n            response = {'powerstate': state} if module.check_mode else ipmi_cmd.set_power(state, wait=timeout)\n            changed = True\n        else:\n            response = current\n            changed = False\n\n        if 'error' in response:\n            module.fail_json(msg=response['error'])\n\n        module.exit_json(changed=changed, **response)\n    except Exception as e:\n        module.fail_json(msg=str(e))\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  ipmi power short description  power management machine description      use module power management version added   2 2  options    name      description          hostname ip address bmc      required  true   port      description          remote rmcp port      default  623   user      description          username use connect bmc      required  true   password      description          password connect bmc      required  true   state      description          whether ensure machine desired state      required  true     choices               request system turn              request system turn without waiting os shutdown           shutdown    have system request os proper shutdown           reset    request system reset without waiting os           boot    if system     else  reset    timeout      description          maximum number seconds interrupt request      default  300 requirements       python    2 6      pyghmi author   bulat gaifullin (gaifullinbf gmail com)       return       powerstate      description  the current power state machine      returned  success     type  string     sample       examples         ensure machine powered    ipmi power      name  test testdomain com     user  admin     password  password     state          usr bin python        coding  utf 8           copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    ensure machine powered         run command     ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipmi_power\nshort_description: Power management for machine\ndescription:\n  - Use this module for power management\nversion_added: \"2.2\"\noptions:\n  name:\n    description:\n      - Hostname or ip address of the BMC.\n    required: true\n  port:\n    description:\n      - Remote RMCP port.\n    default: 623\n  user:\n    description:\n      - Username to use to connect to the BMC.\n    required: true\n  password:\n    description:\n      - Password to connect to the BMC.\n    required: true\n  state:\n    description:\n      - Whether to ensure that the machine in desired state.\n    required: true\n    choices:\n        - on -- Request system turn on\n        - off -- Request system turn off without waiting for OS to shutdown\n        - shutdown -- Have system request OS proper shutdown\n        - reset -- Request system reset without waiting for OS\n        - boot -- If system is off, then 'on', else 'reset'\n  timeout:\n    description:\n      - Maximum number of seconds before interrupt request.\n    default: 300\nrequirements:\n  - \"python >= 2.6\"\n  - pyghmi\nauthor: \"Bulat Gaifullin (gaifullinbf@gmail.com)\"\n'''\n\nRETURN = '''\npowerstate:\n    description: The current power state of the machine.\n    returned: success\n    type: string\n    sample: on\n'''\n\nEXAMPLES = '''\n# Ensure machine is powered on.\n- ipmi_power:\n    name: test.testdomain.com\n    user: admin\n    password: password\n    state: on\n'''\n\ntry:\n    from pyghmi.ipmi import command\nexcept ImportError:\n    command = None\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            port=dict(default=623, type='int'),\n            state=dict(required=True, choices=['on', 'off', 'shutdown', 'reset', 'boot']),\n            user=dict(required=True, no_log=True),\n            password=dict(required=True, no_log=True),\n            timeout=dict(default=300, type='int'),\n        ),\n        supports_check_mode=True,\n    )\n\n    if command is None:\n        module.fail_json(msg='the python pyghmi module is required')\n\n    name = module.params['name']\n    port = module.params['port']\n    user = module.params['user']\n    password = module.params['password']\n    state = module.params['state']\n    timeout = module.params['timeout']\n\n    # --- run command ---\n    try:\n        ipmi_cmd = command.Command(\n            bmc=name, userid=user, password=password, port=port\n        )\n        module.debug('ipmi instantiated - name: \"%s\"' % name)\n\n        current = ipmi_cmd.get_power()\n        if current['powerstate'] != state:\n            response = {'powerstate': state} if module.check_mode else ipmi_cmd.set_power(state, wait=timeout)\n            changed = True\n        else:\n            response = current\n            changed = False\n\n        if 'error' in response:\n            module.fail_json(msg=response['error'])\n\n        module.exit_json(changed=changed, **response)\n    except Exception as e:\n        module.fail_json(msg=str(e))\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "ipmi_power.py", "id": "180f5a4e19087228b216b79a2b144c11", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/remote_management/ipmi/ipmi_power.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}