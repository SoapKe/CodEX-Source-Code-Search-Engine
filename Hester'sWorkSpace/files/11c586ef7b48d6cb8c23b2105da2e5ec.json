{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .adobepass import AdobePassIE\nfrom .uplynk import UplynkPreplayIE\nfrom ..compat import compat_str\nfrom ..utils import (\n    HEADRequest,\n    int_or_none,\n    parse_age_limit,\n    parse_duration,\n    try_get,\n    unified_timestamp,\n    update_url_query,\n)\n\n\nclass FOXIE(AdobePassIE):\n    _VALID_URL = r'https?://(?:www\\.)?fox\\.com/watch/(?P<id>[\\da-fA-F]+)'\n    _TESTS = [{\n        \n        'url': 'https://www.fox.com/watch/4b765a60490325103ea69888fb2bd4e8/',\n        'md5': 'ebd296fcc41dd4b19f8115d8461a3165',\n        'info_dict': {\n            'id': '4b765a60490325103ea69888fb2bd4e8',\n            'ext': 'mp4',\n            'title': 'Aftermath: Bruce Wayne Develops Into The Dark Knight',\n            'description': 'md5:549cd9c70d413adb32ce2a779b53b486',\n            'duration': 102,\n            'timestamp': 1504291893,\n            'upload_date': '20170901',\n            'creator': 'FOX',\n            'series': 'Gotham',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        \n        'url': 'https://www.fox.com/watch/087036ca7f33c8eb79b08152b4dd75c1/',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://www.fox.com/watch/30056b295fb57f7452aeeb4920bc3024/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://api.fox.com/fbc-content/v1_4/video/%s' % video_id,\n            video_id, headers={\n                'apikey': 'abdcbed02c124d393b39e818a4312055',\n                'Content-Type': 'application/json',\n                'Referer': url,\n            })\n\n        title = video['name']\n        release_url = video['videoRelease']['url']\n\n        description = video.get('description')\n        duration = int_or_none(video.get('durationInSeconds')) or int_or_none(\n            video.get('duration')) or parse_duration(video.get('duration'))\n        timestamp = unified_timestamp(video.get('datePublished'))\n        rating = video.get('contentRating')\n        age_limit = parse_age_limit(rating)\n\n        data = try_get(\n            video, lambda x: x['trackingData']['properties'], dict) or {}\n\n        creator = data.get('brand') or data.get('network') or video.get('network')\n\n        series = video.get('seriesName') or data.get(\n            'seriesName') or data.get('show')\n        season_number = int_or_none(video.get('seasonNumber'))\n        episode = video.get('name')\n        episode_number = int_or_none(video.get('episodeNumber'))\n        release_year = int_or_none(video.get('releaseYear'))\n\n        if data.get('authRequired'):\n            resource = self._get_mvpd_resource(\n                'fbc-fox', title, video.get('guid'), rating)\n            release_url = update_url_query(\n                release_url, {\n                    'auth': self._extract_mvpd_auth(\n                        url, video_id, 'fbc-fox', resource)\n                })\n\n        subtitles = {}\n        for doc_rel in video.get('documentReleases', []):\n            rel_url = doc_rel.get('url')\n            if not url or doc_rel.get('format') != 'SCC':\n                continue\n            subtitles['en'] = [{\n                'url': rel_url,\n                'ext': 'scc',\n            }]\n            break\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'timestamp': timestamp,\n            'age_limit': age_limit,\n            'creator': creator,\n            'series': series,\n            'season_number': season_number,\n            'episode': episode,\n            'episode_number': episode_number,\n            'release_year': release_year,\n            'subtitles': subtitles,\n        }\n\n        urlh = self._request_webpage(HEADRequest(release_url), video_id)\n        video_url = compat_str(urlh.geturl())\n\n        if UplynkPreplayIE.suitable(video_url):\n            info.update({\n                '_type': 'url_transparent',\n                'url': video_url,\n                'ie_key': UplynkPreplayIE.ie_key(),\n            })\n        else:\n            m3u8_url = self._download_json(release_url, video_id)['playURL']\n            formats = self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4',\n                entry_protocol='m3u8_native', m3u8_id='hls')\n            self._sort_formats(formats)\n            info['formats'] = formats\n        return info\n", "comments": "# coding: utf-8\n# clip\n# episode, geo-restricted\n# episode, geo-restricted, tv provided required\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .adobepass import AdobePassIE\nfrom .uplynk import UplynkPreplayIE\nfrom ..compat import compat_str\nfrom ..utils import (\n    HEADRequest,\n    int_or_none,\n    parse_age_limit,\n    parse_duration,\n    try_get,\n    unified_timestamp,\n    update_url_query,\n)\n\n\nclass FOXIE(AdobePassIE):\n    _VALID_URL = r'https?://(?:www\\.)?fox\\.com/watch/(?P<id>[\\da-fA-F]+)'\n    _TESTS = [{\n        # clip\n        'url': 'https://www.fox.com/watch/4b765a60490325103ea69888fb2bd4e8/',\n        'md5': 'ebd296fcc41dd4b19f8115d8461a3165',\n        'info_dict': {\n            'id': '4b765a60490325103ea69888fb2bd4e8',\n            'ext': 'mp4',\n            'title': 'Aftermath: Bruce Wayne Develops Into The Dark Knight',\n            'description': 'md5:549cd9c70d413adb32ce2a779b53b486',\n            'duration': 102,\n            'timestamp': 1504291893,\n            'upload_date': '20170901',\n            'creator': 'FOX',\n            'series': 'Gotham',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # episode, geo-restricted\n        'url': 'https://www.fox.com/watch/087036ca7f33c8eb79b08152b4dd75c1/',\n        'only_matching': True,\n    }, {\n        # episode, geo-restricted, tv provided required\n        'url': 'https://www.fox.com/watch/30056b295fb57f7452aeeb4920bc3024/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://api.fox.com/fbc-content/v1_4/video/%s' % video_id,\n            video_id, headers={\n                'apikey': 'abdcbed02c124d393b39e818a4312055',\n                'Content-Type': 'application/json',\n                'Referer': url,\n            })\n\n        title = video['name']\n        release_url = video['videoRelease']['url']\n\n        description = video.get('description')\n        duration = int_or_none(video.get('durationInSeconds')) or int_or_none(\n            video.get('duration')) or parse_duration(video.get('duration'))\n        timestamp = unified_timestamp(video.get('datePublished'))\n        rating = video.get('contentRating')\n        age_limit = parse_age_limit(rating)\n\n        data = try_get(\n            video, lambda x: x['trackingData']['properties'], dict) or {}\n\n        creator = data.get('brand') or data.get('network') or video.get('network')\n\n        series = video.get('seriesName') or data.get(\n            'seriesName') or data.get('show')\n        season_number = int_or_none(video.get('seasonNumber'))\n        episode = video.get('name')\n        episode_number = int_or_none(video.get('episodeNumber'))\n        release_year = int_or_none(video.get('releaseYear'))\n\n        if data.get('authRequired'):\n            resource = self._get_mvpd_resource(\n                'fbc-fox', title, video.get('guid'), rating)\n            release_url = update_url_query(\n                release_url, {\n                    'auth': self._extract_mvpd_auth(\n                        url, video_id, 'fbc-fox', resource)\n                })\n\n        subtitles = {}\n        for doc_rel in video.get('documentReleases', []):\n            rel_url = doc_rel.get('url')\n            if not url or doc_rel.get('format') != 'SCC':\n                continue\n            subtitles['en'] = [{\n                'url': rel_url,\n                'ext': 'scc',\n            }]\n            break\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'timestamp': timestamp,\n            'age_limit': age_limit,\n            'creator': creator,\n            'series': series,\n            'season_number': season_number,\n            'episode': episode,\n            'episode_number': episode_number,\n            'release_year': release_year,\n            'subtitles': subtitles,\n        }\n\n        urlh = self._request_webpage(HEADRequest(release_url), video_id)\n        video_url = compat_str(urlh.geturl())\n\n        if UplynkPreplayIE.suitable(video_url):\n            info.update({\n                '_type': 'url_transparent',\n                'url': video_url,\n                'ie_key': UplynkPreplayIE.ie_key(),\n            })\n        else:\n            m3u8_url = self._download_json(release_url, video_id)['playURL']\n            formats = self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4',\n                entry_protocol='m3u8_native', m3u8_id='hls')\n            self._sort_formats(formats)\n            info['formats'] = formats\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "fox.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/fox.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}