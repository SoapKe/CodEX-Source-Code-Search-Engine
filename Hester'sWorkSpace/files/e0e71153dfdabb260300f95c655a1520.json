{"author": "mailpile", "code": "\nfrom datetime import date\nfrom setuptools import setup, find_packages\nfrom setuptools.command.build_py import build_py\nimport datetime\nimport os\nimport re\nimport subprocess\nfrom glob import glob\n\nfrom scripts.version import APPVER\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n\n\n## Issue: https://bugs.launchpad.net/pbr/+bug/1530867 ##\n\n\n\nimport pbr.git\n\ndef _get_submodules(git_dir):\n    submodules = pbr.git._run_git_command(['submodule', 'status'], git_dir)\n    submodules = [s.strip().split(' ')[1]\n                  for s in submodules.split('\\n')\n                  if s != '']\n    return submodules\n\ndef _find_git_files(dirname='', git_dir=None):\n    \n    file_list = []\n    if git_dir is None:\n        git_dir = pbr.git._run_git_functions()\n    if git_dir:\n        file_list = pbr.git._run_git_command(['ls-files', '-z'], git_dir)\n        file_list += pbr.git._run_git_command(\n            ['submodule', 'foreach', '--quiet', 'ls-files', '-z'],\n            git_dir\n        )\n        \n        \n        file_list = file_list.split(b'\\x00'.decode('utf-8'))\n        submodules = _get_submodules(git_dir)\n    return [f for f in file_list if f and f not in submodules]\n\npbr.git._find_git_files = _find_git_files\n\n\n\n\n## Cleanup ###########\ntry:\n    assert(0 == subprocess.call(['make', 'clean'], cwd=here))\nexcept:\n    print \"Faild to run 'make clean'. Bailing out.\"\n    exit(1)\n\n\n## Install ###########\n\nclass Builder(build_py):\n    def run(self):\n        try:\n            assert(0 == subprocess.call(['make', 'bdist-prep'], cwd=here))\n        except:\n            print \"Error building package. Try running 'make'.\"\n            exit(1)\n        else:\n            build_py.run(self)\n\n\n## \"Main\" ############\n\nsetup(\n    setup_requires=['pbr'],\n    version=APPVER,\n    pbr=True,\n    cmdclass={'build_py': Builder},\n)\n", "comments": "   behave like file finder entrypoint plugin       we actually use entrypoints system runs     absurd times  we want building sdist              usr bin env python2 7                                                                                  pbr fix                                issue  https   bugs launchpad net pbr  bug 1530867        pr  https   review openstack org   c 263297                                                                        users fix utf8 issues locally single commit     strict              end pbr fix            cleanup                                                                         install                                                                          main                                                                       ", "content": "#!/usr/bin/env python2.7\nfrom datetime import date\nfrom setuptools import setup, find_packages\nfrom setuptools.command.build_py import build_py\nimport datetime\nimport os\nimport re\nimport subprocess\nfrom glob import glob\n\nfrom scripts.version import APPVER\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n########################################################\n##################### PBR Fix ##########################\n## Issue: https://bugs.launchpad.net/pbr/+bug/1530867 ##\n## PR: https://review.openstack.org/#/c/263297/ ########\n########################################################\n\nimport pbr.git\n\ndef _get_submodules(git_dir):\n    submodules = pbr.git._run_git_command(['submodule', 'status'], git_dir)\n    submodules = [s.strip().split(' ')[1]\n                  for s in submodules.split('\\n')\n                  if s != '']\n    return submodules\n\ndef _find_git_files(dirname='', git_dir=None):\n    \"\"\"Behave like a file finder entrypoint plugin.\n\n    We don't actually use the entrypoints system for this because it runs\n    at absurd times. We only want to do this when we are building an sdist.\n    \"\"\"\n    file_list = []\n    if git_dir is None:\n        git_dir = pbr.git._run_git_functions()\n    if git_dir:\n        file_list = pbr.git._run_git_command(['ls-files', '-z'], git_dir)\n        file_list += pbr.git._run_git_command(\n            ['submodule', 'foreach', '--quiet', 'ls-files', '-z'],\n            git_dir\n        )\n        # Users can fix utf8 issues locally with a single commit, so we are\n        # strict here.\n        file_list = file_list.split(b'\\x00'.decode('utf-8'))\n        submodules = _get_submodules(git_dir)\n    return [f for f in file_list if f and f not in submodules]\n\npbr.git._find_git_files = _find_git_files\n\n########## end of pbr fix ######\n\n\n## Cleanup ###################################################################\ntry:\n    assert(0 == subprocess.call(['make', 'clean'], cwd=here))\nexcept:\n    print \"Faild to run 'make clean'. Bailing out.\"\n    exit(1)\n\n\n## Install ###################################################################\n\nclass Builder(build_py):\n    def run(self):\n        try:\n            assert(0 == subprocess.call(['make', 'bdist-prep'], cwd=here))\n        except:\n            print \"Error building package. Try running 'make'.\"\n            exit(1)\n        else:\n            build_py.run(self)\n\n\n## \"Main\" ####################################################################\n\nsetup(\n    setup_requires=['pbr'],\n    version=APPVER,\n    pbr=True,\n    cmdclass={'build_py': Builder},\n)\n", "description": "A free & open modern, fast email client with user-friendly encryption and privacy features", "file_name": "setup.py", "id": "e0e71153dfdabb260300f95c655a1520", "language": "Python", "project_name": "Mailpile", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mailpile-Mailpile/mailpile-Mailpile-8ebc5fe/setup.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:54:52Z", "url": "https://github.com/mailpile/Mailpile", "wiki": true}