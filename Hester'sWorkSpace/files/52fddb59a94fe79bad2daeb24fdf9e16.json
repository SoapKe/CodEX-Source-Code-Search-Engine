{"author": "eliangcs", "code": "import hashlib\nimport os\n\nfrom .base import TempAppDirTestCase\nfrom http_prompt import config\n\n\ndef _hash_file(path):\n    with open(path, 'rb') as f:\n        data = f.read()\n    return hashlib.sha1(data).hexdigest()\n\n\nclass TestConfig(TempAppDirTestCase):\n\n    def test_initialize(self):\n        \n        expected_path = config.get_user_config_path()\n        self.assertFalse(os.path.exists(expected_path))\n\n        \n        copied, actual_path = config.initialize()\n        self.assertTrue(copied)\n        self.assertEqual(actual_path, expected_path)\n        self.assertTrue(os.path.exists(expected_path))\n\n        \n        with open(expected_path, 'a') as f:\n            f.write('dont_care\\n')\n        orig_hash = _hash_file(expected_path)\n\n        # Make sure it's fine to call config.initialize() twice\n        copied, actual_path = config.initialize()\n        self.assertFalse(copied)\n        self.assertEqual(actual_path, expected_path)\n        self.assertTrue(os.path.exists(expected_path))\n\n        \n        new_hash = _hash_file(expected_path)\n        self.assertEqual(new_hash, orig_hash)\n\n    def test_load_default(self):\n        cfg = config.load_default()\n        self.assertEqual(cfg['command_style'], 'solarized')\n        self.assertFalse(cfg['output_style'])\n        self.assertEqual(cfg['pager'], 'less')\n\n    def test_load_user(self):\n        copied, path = config.initialize()\n        self.assertTrue(copied)\n\n        with open(path, 'w') as f:\n            f.write(\"\\ngreeting = 'hello!'\\n\")\n\n        cfg = config.load_user()\n        self.assertEqual(cfg, {'greeting': 'hello!'})\n\n    def test_load(self):\n        copied, path = config.initialize()\n        self.assertTrue(copied)\n\n        with open(path, 'w') as f:\n            f.write(\"pager = 'more'\\n\"\n                    \"greeting = 'hello!'\\n\")\n\n        cfg = config.load()\n        self.assertEqual(cfg['command_style'], 'solarized')\n        self.assertFalse(cfg['output_style'])\n        self.assertEqual(cfg['pager'], 'more')\n        self.assertEqual(cfg['greeting'], 'hello!')\n", "comments": "  config file exist first    config file exist initialization    change config file hash content see changed    make sure fine call config initialize() twice    make sure config file unchanged ", "content": "import hashlib\nimport os\n\nfrom .base import TempAppDirTestCase\nfrom http_prompt import config\n\n\ndef _hash_file(path):\n    with open(path, 'rb') as f:\n        data = f.read()\n    return hashlib.sha1(data).hexdigest()\n\n\nclass TestConfig(TempAppDirTestCase):\n\n    def test_initialize(self):\n        # Config file doesn't exist at first\n        expected_path = config.get_user_config_path()\n        self.assertFalse(os.path.exists(expected_path))\n\n        # Config file should exist after initialization\n        copied, actual_path = config.initialize()\n        self.assertTrue(copied)\n        self.assertEqual(actual_path, expected_path)\n        self.assertTrue(os.path.exists(expected_path))\n\n        # Change config file and hash the content to see if it's changed\n        with open(expected_path, 'a') as f:\n            f.write('dont_care\\n')\n        orig_hash = _hash_file(expected_path)\n\n        # Make sure it's fine to call config.initialize() twice\n        copied, actual_path = config.initialize()\n        self.assertFalse(copied)\n        self.assertEqual(actual_path, expected_path)\n        self.assertTrue(os.path.exists(expected_path))\n\n        # Make sure config file is unchanged\n        new_hash = _hash_file(expected_path)\n        self.assertEqual(new_hash, orig_hash)\n\n    def test_load_default(self):\n        cfg = config.load_default()\n        self.assertEqual(cfg['command_style'], 'solarized')\n        self.assertFalse(cfg['output_style'])\n        self.assertEqual(cfg['pager'], 'less')\n\n    def test_load_user(self):\n        copied, path = config.initialize()\n        self.assertTrue(copied)\n\n        with open(path, 'w') as f:\n            f.write(\"\\ngreeting = 'hello!'\\n\")\n\n        cfg = config.load_user()\n        self.assertEqual(cfg, {'greeting': 'hello!'})\n\n    def test_load(self):\n        copied, path = config.initialize()\n        self.assertTrue(copied)\n\n        with open(path, 'w') as f:\n            f.write(\"pager = 'more'\\n\"\n                    \"greeting = 'hello!'\\n\")\n\n        cfg = config.load()\n        self.assertEqual(cfg['command_style'], 'solarized')\n        self.assertFalse(cfg['output_style'])\n        self.assertEqual(cfg['pager'], 'more')\n        self.assertEqual(cfg['greeting'], 'hello!')\n", "description": "HTTPie + prompt_toolkit = an interactive command-line HTTP client featuring autocomplete and syntax highlighting", "file_name": "test_config.py", "id": "52fddb59a94fe79bad2daeb24fdf9e16", "language": "Python", "project_name": "http-prompt", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/eliangcs-http-prompt/eliangcs-http-prompt-87f1e9d/tests/test_config.py", "save_time": "", "source": "", "update_at": "2018-03-17T18:26:33Z", "url": "https://github.com/eliangcs/http-prompt", "wiki": true}