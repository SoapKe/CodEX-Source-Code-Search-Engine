{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n Ansible module to manage PaloAltoNetworks Firewall\n (c) 2016, techbizdev <techbizdev@paloaltonetworks.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nDOCUMENTATION = '''\n---\nmodule: panos_admpwd\nshort_description: change admin password of PAN-OS device using SSH with SSH key\ndescription:\n    - Change the admin password of PAN-OS via SSH using a SSH key for authentication.\n    - Useful for AWS instances where the first login should be done via SSH.\nauthor: \"Luigi Mori (@jtschichold), Ivan Bojer (@ivanbojer)\"\nversion_added: \"2.3\"\nrequirements:\n    - paramiko\noptions:\n    ip_address:\n        description:\n            - IP address (or hostname) of PAN-OS device\n        required: true\n    username:\n        description:\n            - username for initial authentication\n        required: false\n        default: \"admin\"\n    key_filename:\n        description:\n            - filename of the SSH Key to use for authentication\n        required: true\n    newpassword:\n        description:\n            - password to configure for admin on the PAN-OS device\n        required: true\n'''\n\nEXAMPLES = '''\n Tries for 10 times to set the admin password of 192.168.1.1 to \"badpassword\"\n via SSH, authenticating using key /tmp/ssh.key\n- name: set admin password\n  panos_admpwd:\n    ip_address: \"192.168.1.1\"\n    username: \"admin\"\n    key_filename: \"/tmp/ssh.key\"\n    newpassword: \"badpassword\"\n  register: result\n  until: result is not failed\n  retries: 10\n  delay: 30\n'''\n\nRETURN = '''\nstatus:\n    description: success status\n    returned: success\n    type: string\n    sample: \"Last login: Fri Sep 16 11:09:20 2016 from 10.35.34.56.....Configuration committed successfully\"\n'''\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nfrom ansible.module_utils.basic import AnsibleModule\nimport time\nimport sys\n\ntry:\n    import paramiko\n    HAS_LIB = True\nexcept ImportError:\n    HAS_LIB = False\n\n_PROMPTBUFF = 4096\n\n\ndef wait_with_timeout(module, shell, prompt, timeout=60):\n    now = time.time()\n    result = \"\"\n    while True:\n        if shell.recv_ready():\n            result += shell.recv(_PROMPTBUFF)\n            endresult = result.strip()\n            if len(endresult) != 0 and endresult[-1] == prompt:\n                break\n\n        if time.time() - now > timeout:\n            module.fail_json(msg=\"Timeout waiting for prompt\")\n\n    return result\n\n\ndef set_panwfw_password(module, ip_address, key_filename, newpassword, username):\n    stdout = \"\"\n\n    ssh = paramiko.SSHClient()\n\n     add policy to accept all host keys, I haven't found\n     a way to retrieve the instance SSH key fingerprint from AWS\n    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n\n    ssh.connect(ip_address, username=username, key_filename=key_filename)\n    shell = ssh.invoke_shell()\n\n     wait for the shell to start\n    buff = wait_with_timeout(module, shell, \">\")\n    stdout += buff\n\n     step into config mode\n    shell.send('configure\\n')\n     wait for the config prompt\n    buff = wait_with_timeout(module, shell, \"\")\n    stdout += buff\n\n    if module.check_mode:\n         exit and close connection\n        shell.send('exit\\n')\n        ssh.close()\n        return False, 'Connection test successful. Password left intact.'\n\n     set admin password\n    shell.send('set mgt-config users ' + username + ' password\\n')\n\n     wait for the password prompt\n    buff = wait_with_timeout(module, shell, \":\")\n    stdout += buff\n\n     enter password for the first time\n    shell.send(newpassword + '\\n')\n\n     wait for the password prompt\n    buff = wait_with_timeout(module, shell, \":\")\n    stdout += buff\n\n     enter password for the second time\n    shell.send(newpassword + '\\n')\n\n     wait for the config mode prompt\n    buff = wait_with_timeout(module, shell, \"\")\n    stdout += buff\n\n     commit !\n    shell.send('commit\\n')\n\n     wait for the prompt\n    buff = wait_with_timeout(module, shell, \"\", 120)\n    stdout += buff\n\n    if 'success' not in buff:\n        module.fail_json(msg=\"Error setting \" + username + \" password: \" + stdout)\n\n     exit\n    shell.send('exit\\n')\n\n    ssh.close()\n\n    return True, stdout\n\n\ndef main():\n    argument_spec = dict(\n        ip_address=dict(required=True),\n        username=dict(default='admin'),\n        key_filename=dict(required=True),\n        newpassword=dict(no_log=True, required=True)\n    )\n    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True)\n    if not HAS_LIB:\n        module.fail_json(msg='paramiko is required for this module')\n\n    ip_address = module.params[\"ip_address\"]\n    if not ip_address:\n        module.fail_json(msg=\"ip_address should be specified\")\n    key_filename = module.params[\"key_filename\"]\n    if not key_filename:\n        module.fail_json(msg=\"key_filename should be specified\")\n    newpassword = module.params[\"newpassword\"]\n    if not newpassword:\n        module.fail_json(msg=\"newpassword is required\")\n    username = module.params['username']\n\n    try:\n        changed, stdout = set_panwfw_password(module, ip_address, key_filename, newpassword, username)\n        module.exit_json(changed=changed, stdout=stdout)\n    except Exception:\n        x = sys.exc_info()[1]\n        module.fail_json(msg=x)\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  panos admpwd short description  change admin password pan os device using ssh ssh key description        change admin password pan os via ssh using ssh key authentication        useful aws instances first login done via ssh  author   luigi mori ( jtschichold)  ivan bojer ( ivanbojer)  version added   2 3  requirements        paramiko options      ip address          description                ip address (or hostname) pan os device         required  true     username          description                username initial authentication         required  false         default   admin      key filename          description                filename ssh key use authentication         required  true     newpassword          description                password configure admin pan os device         required  true      examples         tries 10 times set admin password 192 168 1 1  badpassword    via ssh  authenticating using key  tmp ssh key   name  set admin password   panos admpwd      ip address   192 168 1 1      username   admin      key filename    tmp ssh key      newpassword   badpassword    register  result    result failed   retries  10   delay  30      return       status      description  success status     returned  success     type  string     sample   last login  fri sep 16 11 09 20 2016 10 35 34 56     configuration committed successfully          usr bin python        coding  utf 8           ansible module manage paloaltonetworks firewall    (c) 2016  techbizdev  techbizdev paloaltonetworks com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       tries 10 times set admin password 192 168 1 1  badpassword     via ssh  authenticating using key  tmp ssh key    add policy accept host keys  i found    way retrieve instance ssh key fingerprint aws    wait shell start    step config mode    wait config prompt    exit close connection    set admin password    wait password prompt    enter password first time    wait password prompt    enter password second time    wait config mode prompt    commit      wait prompt    exit ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Ansible module to manage PaloAltoNetworks Firewall\n# (c) 2016, techbizdev <techbizdev@paloaltonetworks.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nDOCUMENTATION = '''\n---\nmodule: panos_admpwd\nshort_description: change admin password of PAN-OS device using SSH with SSH key\ndescription:\n    - Change the admin password of PAN-OS via SSH using a SSH key for authentication.\n    - Useful for AWS instances where the first login should be done via SSH.\nauthor: \"Luigi Mori (@jtschichold), Ivan Bojer (@ivanbojer)\"\nversion_added: \"2.3\"\nrequirements:\n    - paramiko\noptions:\n    ip_address:\n        description:\n            - IP address (or hostname) of PAN-OS device\n        required: true\n    username:\n        description:\n            - username for initial authentication\n        required: false\n        default: \"admin\"\n    key_filename:\n        description:\n            - filename of the SSH Key to use for authentication\n        required: true\n    newpassword:\n        description:\n            - password to configure for admin on the PAN-OS device\n        required: true\n'''\n\nEXAMPLES = '''\n# Tries for 10 times to set the admin password of 192.168.1.1 to \"badpassword\"\n# via SSH, authenticating using key /tmp/ssh.key\n- name: set admin password\n  panos_admpwd:\n    ip_address: \"192.168.1.1\"\n    username: \"admin\"\n    key_filename: \"/tmp/ssh.key\"\n    newpassword: \"badpassword\"\n  register: result\n  until: result is not failed\n  retries: 10\n  delay: 30\n'''\n\nRETURN = '''\nstatus:\n    description: success status\n    returned: success\n    type: string\n    sample: \"Last login: Fri Sep 16 11:09:20 2016 from 10.35.34.56.....Configuration committed successfully\"\n'''\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nfrom ansible.module_utils.basic import AnsibleModule\nimport time\nimport sys\n\ntry:\n    import paramiko\n    HAS_LIB = True\nexcept ImportError:\n    HAS_LIB = False\n\n_PROMPTBUFF = 4096\n\n\ndef wait_with_timeout(module, shell, prompt, timeout=60):\n    now = time.time()\n    result = \"\"\n    while True:\n        if shell.recv_ready():\n            result += shell.recv(_PROMPTBUFF)\n            endresult = result.strip()\n            if len(endresult) != 0 and endresult[-1] == prompt:\n                break\n\n        if time.time() - now > timeout:\n            module.fail_json(msg=\"Timeout waiting for prompt\")\n\n    return result\n\n\ndef set_panwfw_password(module, ip_address, key_filename, newpassword, username):\n    stdout = \"\"\n\n    ssh = paramiko.SSHClient()\n\n    # add policy to accept all host keys, I haven't found\n    # a way to retrieve the instance SSH key fingerprint from AWS\n    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n\n    ssh.connect(ip_address, username=username, key_filename=key_filename)\n    shell = ssh.invoke_shell()\n\n    # wait for the shell to start\n    buff = wait_with_timeout(module, shell, \">\")\n    stdout += buff\n\n    # step into config mode\n    shell.send('configure\\n')\n    # wait for the config prompt\n    buff = wait_with_timeout(module, shell, \"#\")\n    stdout += buff\n\n    if module.check_mode:\n        # exit and close connection\n        shell.send('exit\\n')\n        ssh.close()\n        return False, 'Connection test successful. Password left intact.'\n\n    # set admin password\n    shell.send('set mgt-config users ' + username + ' password\\n')\n\n    # wait for the password prompt\n    buff = wait_with_timeout(module, shell, \":\")\n    stdout += buff\n\n    # enter password for the first time\n    shell.send(newpassword + '\\n')\n\n    # wait for the password prompt\n    buff = wait_with_timeout(module, shell, \":\")\n    stdout += buff\n\n    # enter password for the second time\n    shell.send(newpassword + '\\n')\n\n    # wait for the config mode prompt\n    buff = wait_with_timeout(module, shell, \"#\")\n    stdout += buff\n\n    # commit !\n    shell.send('commit\\n')\n\n    # wait for the prompt\n    buff = wait_with_timeout(module, shell, \"#\", 120)\n    stdout += buff\n\n    if 'success' not in buff:\n        module.fail_json(msg=\"Error setting \" + username + \" password: \" + stdout)\n\n    # exit\n    shell.send('exit\\n')\n\n    ssh.close()\n\n    return True, stdout\n\n\ndef main():\n    argument_spec = dict(\n        ip_address=dict(required=True),\n        username=dict(default='admin'),\n        key_filename=dict(required=True),\n        newpassword=dict(no_log=True, required=True)\n    )\n    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True)\n    if not HAS_LIB:\n        module.fail_json(msg='paramiko is required for this module')\n\n    ip_address = module.params[\"ip_address\"]\n    if not ip_address:\n        module.fail_json(msg=\"ip_address should be specified\")\n    key_filename = module.params[\"key_filename\"]\n    if not key_filename:\n        module.fail_json(msg=\"key_filename should be specified\")\n    newpassword = module.params[\"newpassword\"]\n    if not newpassword:\n        module.fail_json(msg=\"newpassword is required\")\n    username = module.params['username']\n\n    try:\n        changed, stdout = set_panwfw_password(module, ip_address, key_filename, newpassword, username)\n        module.exit_json(changed=changed, stdout=stdout)\n    except Exception:\n        x = sys.exc_info()[1]\n        module.fail_json(msg=x)\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "panos_admpwd.py", "id": "1fa85b72d1a488850931292e2b2c4181", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/panos/panos_admpwd.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}