{"author": "ansible", "code": "\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\n\nfrom ansible.compat.tests import unittest\n\nfrom ansible.config.manager import ConfigManager, Setting, ensure_type, resolve_path, find_ini_config_file\n\ncurdir = os.path.dirname(__file__)\ncfg_file = os.path.join(curdir, 'test.cfg')\ncfg_file2 = os.path.join(curdir, 'test2.cfg')\n\nexpected_ini = {'CONFIG_FILE': Setting(name='CONFIG_FILE', value=cfg_file, origin='', type='string'),\n                'config_entry': Setting(name='config_entry', value=u'fromini', origin=cfg_file, type='string'),\n                'config_entry_bool': Setting(name='config_entry_bool', value=False, origin=cfg_file, type='bool'),\n                'config_entry_list': Setting(name='config_entry_list', value=['fromini'], origin=cfg_file, type='list'),\n                'config_entry_deprecated': Setting(name='config_entry_deprecated', value=u'fromini', origin=cfg_file, type='string'),\n                'config_entry_multi': Setting(name='config_entry_multi', value=u'morefromini', origin=cfg_file, type='string'),\n                'config_entry_multi_deprecated': Setting(name='config_entry_multi_deprecated', value=u'morefromini', origin=cfg_file, type='string'),\n                'config_entry_multi_deprecated_source': Setting(name='config_entry_multi_deprecated_source', value=u'morefromini',\n                                                                origin=cfg_file, type='string')}\n\n\nclass TestConfigData(unittest.TestCase):\n\n    def setUp(self):\n        self.manager = ConfigManager(cfg_file, os.path.join(curdir, 'test.yml'))\n\n    def tearDown(self):\n        self.manager = None\n\n    def test_initial_load(self):\n        self.assertEquals(self.manager.data._global_settings, expected_ini)\n\n    def test_ensure_type_list(self):\n        self.assertIsInstance(ensure_type('a,b', 'list'), list)\n        self.assertIsInstance(ensure_type(['a', 'b'], 'list'), list)\n\n    def test_ensure_type_bool(self):\n        self.assertIsInstance(ensure_type('yes', 'bool'), bool)\n        self.assertIsInstance(ensure_type(True, 'bool'), bool)\n\n    def test_ensure_type_int(self):\n        self.assertIsInstance(ensure_type('10', 'int'), int)\n        self.assertIsInstance(ensure_type(20, 'int'), int)\n\n    def test_ensure_type_float(self):\n        self.assertIsInstance(ensure_type('0.10', 'float'), float)\n        self.assertIsInstance(ensure_type(0.2, 'float'), float)\n\n    def test_find_ini_file(self):\n        cur_config = os.environ['ANSIBLE_CONFIG']\n        os.environ['ANSIBLE_CONFIG'] = cfg_file\n        self.assertEquals(cfg_file, find_ini_config_file())\n        os.environ['ANSIBLE_CONFIG'] = cur_config\n\n    def test_resolve_path(self):\n        self.assertEquals(os.path.join(curdir, 'test.yml'), resolve_path('./test.yml', cfg_file))\n\n    def test_resolve_path_cwd(self):\n        self.assertEquals(os.path.join(os.getcwd(), 'test.yml'), resolve_path('{{CWD}}/test.yml'))\n        self.assertEquals(os.path.join(os.getcwd(), 'test.yml'), resolve_path('./test.yml'))\n\n    def test_get_config_dest(self):\n        pass\n\n    def test_value_and_origin_from_ini(self):\n        self.assertEquals(self.manager.get_config_value_and_origin('config_entry'), ('fromini', cfg_file))\n\n    def test_value_from_ini(self):\n        self.assertEquals(self.manager.get_config_value('config_entry'), 'fromini')\n\n    def test_value_and_origin_from_alt_ini(self):\n        self.assertEquals(self.manager.get_config_value_and_origin('config_entry', cfile=cfg_file2), ('fromini2', cfg_file2))\n\n    def test_value_from_alt_ini(self):\n        self.assertEquals(self.manager.get_config_value('config_entry', cfile=cfg_file2), 'fromini2')\n\n    def test_value_and_origin_from_yaml(self):\n        pass\n\n    def test_value_from_yaml(self):\n        pass\n\n    def test_value_and_origin_from_alt_yaml(self):\n        pass\n\n    def test_value_from_alt_yaml(self):\n        pass\n\n    def test_config_type_bool(self):\n        pass\n\n    def test_config_type_list(self):\n        pass\n\n    def test_config_default(self):\n        pass\n\n    def test_deprecated_config(self):\n        pass\n\n    def test_deprecated_config_source(self):\n        pass\n\n    def test_multi_precedence(self):\n        pass\n\n    def test_initialize_plugin_config(self):\n        pass\n\n    def test_update_config_data(self):\n        pass\n", "comments": "  make coding python3 ish ", "content": "# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\n\nfrom ansible.compat.tests import unittest\n\nfrom ansible.config.manager import ConfigManager, Setting, ensure_type, resolve_path, find_ini_config_file\n\ncurdir = os.path.dirname(__file__)\ncfg_file = os.path.join(curdir, 'test.cfg')\ncfg_file2 = os.path.join(curdir, 'test2.cfg')\n\nexpected_ini = {'CONFIG_FILE': Setting(name='CONFIG_FILE', value=cfg_file, origin='', type='string'),\n                'config_entry': Setting(name='config_entry', value=u'fromini', origin=cfg_file, type='string'),\n                'config_entry_bool': Setting(name='config_entry_bool', value=False, origin=cfg_file, type='bool'),\n                'config_entry_list': Setting(name='config_entry_list', value=['fromini'], origin=cfg_file, type='list'),\n                'config_entry_deprecated': Setting(name='config_entry_deprecated', value=u'fromini', origin=cfg_file, type='string'),\n                'config_entry_multi': Setting(name='config_entry_multi', value=u'morefromini', origin=cfg_file, type='string'),\n                'config_entry_multi_deprecated': Setting(name='config_entry_multi_deprecated', value=u'morefromini', origin=cfg_file, type='string'),\n                'config_entry_multi_deprecated_source': Setting(name='config_entry_multi_deprecated_source', value=u'morefromini',\n                                                                origin=cfg_file, type='string')}\n\n\nclass TestConfigData(unittest.TestCase):\n\n    def setUp(self):\n        self.manager = ConfigManager(cfg_file, os.path.join(curdir, 'test.yml'))\n\n    def tearDown(self):\n        self.manager = None\n\n    def test_initial_load(self):\n        self.assertEquals(self.manager.data._global_settings, expected_ini)\n\n    def test_ensure_type_list(self):\n        self.assertIsInstance(ensure_type('a,b', 'list'), list)\n        self.assertIsInstance(ensure_type(['a', 'b'], 'list'), list)\n\n    def test_ensure_type_bool(self):\n        self.assertIsInstance(ensure_type('yes', 'bool'), bool)\n        self.assertIsInstance(ensure_type(True, 'bool'), bool)\n\n    def test_ensure_type_int(self):\n        self.assertIsInstance(ensure_type('10', 'int'), int)\n        self.assertIsInstance(ensure_type(20, 'int'), int)\n\n    def test_ensure_type_float(self):\n        self.assertIsInstance(ensure_type('0.10', 'float'), float)\n        self.assertIsInstance(ensure_type(0.2, 'float'), float)\n\n    def test_find_ini_file(self):\n        cur_config = os.environ['ANSIBLE_CONFIG']\n        os.environ['ANSIBLE_CONFIG'] = cfg_file\n        self.assertEquals(cfg_file, find_ini_config_file())\n        os.environ['ANSIBLE_CONFIG'] = cur_config\n\n    def test_resolve_path(self):\n        self.assertEquals(os.path.join(curdir, 'test.yml'), resolve_path('./test.yml', cfg_file))\n\n    def test_resolve_path_cwd(self):\n        self.assertEquals(os.path.join(os.getcwd(), 'test.yml'), resolve_path('{{CWD}}/test.yml'))\n        self.assertEquals(os.path.join(os.getcwd(), 'test.yml'), resolve_path('./test.yml'))\n\n    def test_get_config_dest(self):\n        pass\n\n    def test_value_and_origin_from_ini(self):\n        self.assertEquals(self.manager.get_config_value_and_origin('config_entry'), ('fromini', cfg_file))\n\n    def test_value_from_ini(self):\n        self.assertEquals(self.manager.get_config_value('config_entry'), 'fromini')\n\n    def test_value_and_origin_from_alt_ini(self):\n        self.assertEquals(self.manager.get_config_value_and_origin('config_entry', cfile=cfg_file2), ('fromini2', cfg_file2))\n\n    def test_value_from_alt_ini(self):\n        self.assertEquals(self.manager.get_config_value('config_entry', cfile=cfg_file2), 'fromini2')\n\n    def test_value_and_origin_from_yaml(self):\n        pass\n\n    def test_value_from_yaml(self):\n        pass\n\n    def test_value_and_origin_from_alt_yaml(self):\n        pass\n\n    def test_value_from_alt_yaml(self):\n        pass\n\n    def test_config_type_bool(self):\n        pass\n\n    def test_config_type_list(self):\n        pass\n\n    def test_config_default(self):\n        pass\n\n    def test_deprecated_config(self):\n        pass\n\n    def test_deprecated_config_source(self):\n        pass\n\n    def test_multi_precedence(self):\n        pass\n\n    def test_initialize_plugin_config(self):\n        pass\n\n    def test_update_config_data(self):\n        pass\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_manager.py", "id": "8017ade5fda0d913c6bd6065265b866f", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/config/test_manager.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}