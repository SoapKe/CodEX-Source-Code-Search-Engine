{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo.addons.account.tests.account_test_classes import AccountingTestCase\n\n\nclass TestMrpRepair(AccountingTestCase):\n\n    def setUp(self):\n        super(TestMrpRepair, self).setUp()\n\n        self.MrpRepair = self.env['mrp.repair']\n        self.ResUsers = self.env['res.users']\n        self.MrpRepairMakeInvoice = self.env['mrp.repair.make_invoice']\n        self.res_group_user = self.env.ref('stock.group_stock_user')\n        self.res_group_manager = self.env.ref('stock.group_stock_manager')\n        self.mrp_repair_rmrp0 = self.env.ref('mrp_repair.mrp_repair_rmrp0')\n        self.mrp_repair_rmrp1 = self.env.ref('mrp_repair.mrp_repair_rmrp1')\n        self.mrp_repair_rmrp2 = self.env.ref('mrp_repair.mrp_repair_rmrp2')\n\n        self.res_mrp_repair_user = self.ResUsers.create({\n            'name': 'MRP User',\n            'login': 'maru',\n            'password': 'maru',\n            'email': 'mrp_repair_user@yourcompany.com',\n            'groups_id': [(6, 0, [self.res_group_user.id])]})\n\n        self.res_mrp_repair_manager = self.ResUsers.create({\n            'name': 'MRP Manager',\n            'login': 'marm',\n            'password': 'marm',\n            'email': 'mrp_repair_manager@yourcompany.com',\n            'groups_id': [(6, 0, [self.res_group_manager.id])]})\n\n    def test_00_mrp_repair_afterinv(self):\n\n        \n        self.mrp_repair_rmrp0.sudo(self.res_mrp_repair_user.id).action_repair_confirm()\n\n        \n        self.assertEqual(self.mrp_repair_rmrp0.state, \"confirmed\", 'Mrp repair order should be in \"Confirmed\" state.')\n        self.mrp_repair_rmrp0.action_repair_start()\n\n        \n        self.assertEqual(self.mrp_repair_rmrp0.state, \"under_repair\", 'Mrp repair order should be in \"Under_repair\" state.')\n\n        \n        self.mrp_repair_rmrp0.action_repair_end()\n\n        \n        mrp_make_invoice = self.MrpRepairMakeInvoice.create({\n            'group': True})\n        \n        context = {\n            \"active_model\": 'mrp_repair',\n            \"active_ids\": [self.mrp_repair_rmrp0.id],\n            \"active_id\": self.mrp_repair_rmrp0.id\n        }\n        mrp_make_invoice.with_context(context).make_invoices()\n\n        \n        self.assertEqual(len(self.mrp_repair_rmrp0.invoice_id), 1, \"No invoice exists for this repair order\")\n        self.assertEqual(len(self.mrp_repair_rmrp0.move_id.move_line_ids[0].consume_line_ids), 1, \"Consume lines should be set\")\n\n    def test_01_mrp_repair_b4inv(self):\n\n        \n        self.mrp_repair_rmrp2.sudo(self.res_mrp_repair_user.id).action_repair_confirm()\n\n        \n        self.mrp_repair_rmrp2.action_repair_invoice_create()\n\n        \n        self.assertEqual(len(self.mrp_repair_rmrp2.invoice_id), 1, \"No invoice exists for this repair order\")\n\n        \n        self.mrp_repair_rmrp2.action_repair_start()\n\n        \n        self.mrp_repair_rmrp2.action_repair_end()\n\n    def test_02_mrp_repair_noneinv(self):\n\n        \n        self.mrp_repair_rmrp1.sudo(self.res_mrp_repair_user.id).action_repair_confirm()\n\n        \n        self.mrp_repair_rmrp1.action_repair_start()\n\n        \n        self.assertEqual(self.mrp_repair_rmrp1.state, \"under_repair\", 'Mrp repair order should be in \"Under_repair\" state.')\n\n        \n        self.mrp_repair_rmrp1.action_repair_end()\n\n        \n        \n        self.assertNotEqual(len(self.mrp_repair_rmrp1.invoice_id), 1, \"Invoice should not exist for this repair order\")\n\n    def test_03_mrp_repair_fee(self):\n        \n        self.assertEqual(self.mrp_repair_rmrp1.amount_total, 100, \"Amount_total should be 100\")\n\n        \n\n        product_assembly = self.env.ref('product.product_product_5')\n        product_uom_hour = self.env.ref('product.product_uom_hour')\n        self.MrpRepairFee = self.env['mrp.repair.fee']\n\n        self.MrpRepairFee.create({\n            'name': 'PC Assemble + Custom (PC on Demand)',\n            'product_id': product_assembly.id,\n            'product_uom_qty': 1.0,\n            'product_uom': product_uom_hour.id,\n            'price_unit': 12.0,\n            'repair_id': self.mrp_repair_rmrp1.id})\n        \n        self.assertEqual(self.mrp_repair_rmrp1.amount_total, 112, \"Amount_total should be 100\")\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     i confirm repair order taking invoice method  after repair      i check state  confirmed      i check state  under repair      repairing process product done state i end repair process clicking  end repair  button     i define invoice method  after repair  option repair order i create invoice clicking  make invoice  wizard     i click  create invoice  button wizard make invoice     i check invoice created repair order     i confirm repair order invoice method  before repair      i click  create invoice  button wizard make invoice     i check invoice created repair order     i start repairing process clicking  start repair  button     repairing process product done state i end process clicking  end repair  button invoice method  before repair      i confirm repair order invoice method  no invoice      i start repairing process clicking  start repair  button invoice method  no invoice      i check state  under repair      repairing process product done state i end process clicking  end repair  button     i define invoice method  no invoice  option repair order     so  i check invoice created repair order     i check total amount mrp repair rmrp1 100    i add new fee line    i check total amount mrp repair rmrp1 112 ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.addons.account.tests.account_test_classes import AccountingTestCase\n\n\nclass TestMrpRepair(AccountingTestCase):\n\n    def setUp(self):\n        super(TestMrpRepair, self).setUp()\n\n        self.MrpRepair = self.env['mrp.repair']\n        self.ResUsers = self.env['res.users']\n        self.MrpRepairMakeInvoice = self.env['mrp.repair.make_invoice']\n        self.res_group_user = self.env.ref('stock.group_stock_user')\n        self.res_group_manager = self.env.ref('stock.group_stock_manager')\n        self.mrp_repair_rmrp0 = self.env.ref('mrp_repair.mrp_repair_rmrp0')\n        self.mrp_repair_rmrp1 = self.env.ref('mrp_repair.mrp_repair_rmrp1')\n        self.mrp_repair_rmrp2 = self.env.ref('mrp_repair.mrp_repair_rmrp2')\n\n        self.res_mrp_repair_user = self.ResUsers.create({\n            'name': 'MRP User',\n            'login': 'maru',\n            'password': 'maru',\n            'email': 'mrp_repair_user@yourcompany.com',\n            'groups_id': [(6, 0, [self.res_group_user.id])]})\n\n        self.res_mrp_repair_manager = self.ResUsers.create({\n            'name': 'MRP Manager',\n            'login': 'marm',\n            'password': 'marm',\n            'email': 'mrp_repair_manager@yourcompany.com',\n            'groups_id': [(6, 0, [self.res_group_manager.id])]})\n\n    def test_00_mrp_repair_afterinv(self):\n\n        # I confirm Repair order taking Invoice Method 'After Repair'.\n        self.mrp_repair_rmrp0.sudo(self.res_mrp_repair_user.id).action_repair_confirm()\n\n        # I check the state is in \"Confirmed\".\n        self.assertEqual(self.mrp_repair_rmrp0.state, \"confirmed\", 'Mrp repair order should be in \"Confirmed\" state.')\n        self.mrp_repair_rmrp0.action_repair_start()\n\n        # I check the state is in \"Under Repair\".\n        self.assertEqual(self.mrp_repair_rmrp0.state, \"under_repair\", 'Mrp repair order should be in \"Under_repair\" state.')\n\n        # Repairing process for product is in Done state and I end Repair process by clicking on \"End Repair\" button.\n        self.mrp_repair_rmrp0.action_repair_end()\n\n        # I define Invoice Method 'After Repair' option in this Repair order.so I create invoice by clicking on \"Make Invoice\" wizard.\n        mrp_make_invoice = self.MrpRepairMakeInvoice.create({\n            'group': True})\n        # I click on \"Create Invoice\" button of this wizard to make invoice.\n        context = {\n            \"active_model\": 'mrp_repair',\n            \"active_ids\": [self.mrp_repair_rmrp0.id],\n            \"active_id\": self.mrp_repair_rmrp0.id\n        }\n        mrp_make_invoice.with_context(context).make_invoices()\n\n        # I check that invoice is created for this Repair order.\n        self.assertEqual(len(self.mrp_repair_rmrp0.invoice_id), 1, \"No invoice exists for this repair order\")\n        self.assertEqual(len(self.mrp_repair_rmrp0.move_id.move_line_ids[0].consume_line_ids), 1, \"Consume lines should be set\")\n\n    def test_01_mrp_repair_b4inv(self):\n\n        # I confirm Repair order for Invoice Method 'Before Repair'.\n        self.mrp_repair_rmrp2.sudo(self.res_mrp_repair_user.id).action_repair_confirm()\n\n        # I click on \"Create Invoice\" button of this wizard to make invoice.\n        self.mrp_repair_rmrp2.action_repair_invoice_create()\n\n        # I check that invoice is created for this Repair order.\n        self.assertEqual(len(self.mrp_repair_rmrp2.invoice_id), 1, \"No invoice exists for this repair order\")\n\n        # I start the Repairing process by clicking on \"Start Repair\" button.\n        self.mrp_repair_rmrp2.action_repair_start()\n\n        # Repairing process for this product is in Done state and I end this process by clicking on \"End Repair\" button for Invoice Method 'Before Repair'.\n        self.mrp_repair_rmrp2.action_repair_end()\n\n    def test_02_mrp_repair_noneinv(self):\n\n        # I confirm Repair order for Invoice Method 'No Invoice'.\n        self.mrp_repair_rmrp1.sudo(self.res_mrp_repair_user.id).action_repair_confirm()\n\n        # I start the repairing process by clicking on \"Start Repair\" button for Invoice Method 'No Invoice'.\n        self.mrp_repair_rmrp1.action_repair_start()\n\n        # I check its state which is in \"Under Repair\".\n        self.assertEqual(self.mrp_repair_rmrp1.state, \"under_repair\", 'Mrp repair order should be in \"Under_repair\" state.')\n\n        # Repairing process for product is in Done state and I end this process by clicking on \"End Repair\" button.\n        self.mrp_repair_rmrp1.action_repair_end()\n\n        # I define Invoice Method 'No Invoice' option in this repair order.\n        # So, I check that Invoice has not been created for this repair order.\n        self.assertNotEqual(len(self.mrp_repair_rmrp1.invoice_id), 1, \"Invoice should not exist for this repair order\")\n\n    def test_03_mrp_repair_fee(self):\n        # I check the total amount of mrp_repair_rmrp1 is 100\n        self.assertEqual(self.mrp_repair_rmrp1.amount_total, 100, \"Amount_total should be 100\")\n\n        # I add a new fee line\n\n        product_assembly = self.env.ref('product.product_product_5')\n        product_uom_hour = self.env.ref('product.product_uom_hour')\n        self.MrpRepairFee = self.env['mrp.repair.fee']\n\n        self.MrpRepairFee.create({\n            'name': 'PC Assemble + Custom (PC on Demand)',\n            'product_id': product_assembly.id,\n            'product_uom_qty': 1.0,\n            'product_uom': product_uom_hour.id,\n            'price_unit': 12.0,\n            'repair_id': self.mrp_repair_rmrp1.id})\n        # I check the total amount of mrp_repair_rmrp1 is now 112\n        self.assertEqual(self.mrp_repair_rmrp1.amount_total, 112, \"Amount_total should be 100\")\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_mrp_repair.py", "id": "2ada50e8c2e4262961411cbb66879eb7", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/mrp_repair/tests/test_mrp_repair.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}