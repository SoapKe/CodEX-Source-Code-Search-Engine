{"author": "jakubroztocil", "code": "\nimport pytest\n\nfrom httpie.input import ParseError\nfrom utils import MockEnvironment, http, HTTP_OK\nfrom fixtures import FILE_PATH, FILE_CONTENT\n\nimport httpie\n\n\ndef test_debug():\n    r = http('--debug')\n    assert r.exit_status == httpie.ExitStatus.OK\n    assert 'HTTPie %s' % httpie.__version__ in r.stderr\n\n\ndef test_help():\n    r = http('--help', error_exit_ok=True)\n    assert r.exit_status == httpie.ExitStatus.OK\n    assert 'https://github.com/jakubroztocil/httpie/issues' in r\n\n\ndef test_version():\n    r = http('--version', error_exit_ok=True)\n    assert r.exit_status == httpie.ExitStatus.OK\n    \n    assert httpie.__version__ == r.stderr.strip() + r.strip()\n\n\ndef test_GET(httpbin_both):\n    r = http('GET', httpbin_both + '/get')\n    assert HTTP_OK in r\n\n\ndef test_DELETE(httpbin_both):\n    r = http('DELETE', httpbin_both + '/delete')\n    assert HTTP_OK in r\n\n\ndef test_PUT(httpbin_both):\n    r = http('PUT', httpbin_both + '/put', 'foo=bar')\n    assert HTTP_OK in r\n    assert r.json['json']['foo'] == 'bar'\n\n\ndef test_POST_JSON_data(httpbin_both):\n    r = http('POST', httpbin_both + '/post', 'foo=bar')\n    assert HTTP_OK in r\n    assert r.json['json']['foo'] == 'bar'\n\n\ndef test_POST_form(httpbin_both):\n    r = http('--form', 'POST', httpbin_both + '/post', 'foo=bar')\n    assert HTTP_OK in r\n    assert '\"foo\": \"bar\"' in r\n\n\ndef test_POST_form_multiple_values(httpbin_both):\n    r = http('--form', 'POST', httpbin_both + '/post', 'foo=bar', 'foo=baz')\n    assert HTTP_OK in r\n    assert r.json['form'] == {'foo': ['bar', 'baz']}\n\n\ndef test_POST_stdin(httpbin_both):\n    with open(FILE_PATH) as f:\n        env = MockEnvironment(stdin=f, stdin_isatty=False)\n        r = http('--form', 'POST', httpbin_both + '/post', env=env)\n    assert HTTP_OK in r\n    assert FILE_CONTENT in r\n\n\ndef test_headers(httpbin_both):\n    r = http('GET', httpbin_both + '/headers', 'Foo:bar')\n    assert HTTP_OK in r\n    assert '\"User-Agent\": \"HTTPie' in r, r\n    assert '\"Foo\": \"bar\"' in r\n\n\ndef test_headers_unset(httpbin_both):\n    r = http('GET', httpbin_both + '/headers')\n    assert 'Accept' in r.json['headers']  \n\n    r = http('GET', httpbin_both + '/headers', 'Accept:')\n    assert 'Accept' not in r.json['headers']   \n\n\n@pytest.mark.skip('unimplemented')\ndef test_unset_host_header(httpbin_both):\n    r = http('GET', httpbin_both + '/headers')\n    assert 'Host' in r.json['headers']  \n\n    r = http('GET', httpbin_both + '/headers', 'Host:')\n    assert 'Host' not in r.json['headers']   \n\n\ndef test_headers_empty_value(httpbin_both):\n    r = http('GET', httpbin_both + '/headers')\n    assert r.json['headers']['Accept']  \n\n    r = http('GET', httpbin_both + '/headers', 'Accept;')\n    assert r.json['headers']['Accept'] == ''   \n\n\ndef test_headers_empty_value_with_value_gives_error(httpbin):\n    with pytest.raises(ParseError):\n        http('GET', httpbin + '/headers', 'Accept;SYNTAX_ERROR')\n\n\ndef test_json_input_preserve_order(httpbin_both):\n    r = http('PATCH', httpbin_both + '/patch',\n             'order:={\"map\":{\"1\":\"first\",\"2\":\"second\"}}')\n    assert HTTP_OK in r\n    assert r.json['data'] == \\\n        '{\"order\": {\"map\": {\"1\": \"first\", \"2\": \"second\"}}}'\n", "comments": "   high level tests        fixme  py3 version stdout  py2 stderr    default accept present    default accept unset    default host present    default host unset    default accept value    accept value ", "content": "\"\"\"High-level tests.\"\"\"\nimport pytest\n\nfrom httpie.input import ParseError\nfrom utils import MockEnvironment, http, HTTP_OK\nfrom fixtures import FILE_PATH, FILE_CONTENT\n\nimport httpie\n\n\ndef test_debug():\n    r = http('--debug')\n    assert r.exit_status == httpie.ExitStatus.OK\n    assert 'HTTPie %s' % httpie.__version__ in r.stderr\n\n\ndef test_help():\n    r = http('--help', error_exit_ok=True)\n    assert r.exit_status == httpie.ExitStatus.OK\n    assert 'https://github.com/jakubroztocil/httpie/issues' in r\n\n\ndef test_version():\n    r = http('--version', error_exit_ok=True)\n    assert r.exit_status == httpie.ExitStatus.OK\n    # FIXME: py3 has version in stdout, py2 in stderr\n    assert httpie.__version__ == r.stderr.strip() + r.strip()\n\n\ndef test_GET(httpbin_both):\n    r = http('GET', httpbin_both + '/get')\n    assert HTTP_OK in r\n\n\ndef test_DELETE(httpbin_both):\n    r = http('DELETE', httpbin_both + '/delete')\n    assert HTTP_OK in r\n\n\ndef test_PUT(httpbin_both):\n    r = http('PUT', httpbin_both + '/put', 'foo=bar')\n    assert HTTP_OK in r\n    assert r.json['json']['foo'] == 'bar'\n\n\ndef test_POST_JSON_data(httpbin_both):\n    r = http('POST', httpbin_both + '/post', 'foo=bar')\n    assert HTTP_OK in r\n    assert r.json['json']['foo'] == 'bar'\n\n\ndef test_POST_form(httpbin_both):\n    r = http('--form', 'POST', httpbin_both + '/post', 'foo=bar')\n    assert HTTP_OK in r\n    assert '\"foo\": \"bar\"' in r\n\n\ndef test_POST_form_multiple_values(httpbin_both):\n    r = http('--form', 'POST', httpbin_both + '/post', 'foo=bar', 'foo=baz')\n    assert HTTP_OK in r\n    assert r.json['form'] == {'foo': ['bar', 'baz']}\n\n\ndef test_POST_stdin(httpbin_both):\n    with open(FILE_PATH) as f:\n        env = MockEnvironment(stdin=f, stdin_isatty=False)\n        r = http('--form', 'POST', httpbin_both + '/post', env=env)\n    assert HTTP_OK in r\n    assert FILE_CONTENT in r\n\n\ndef test_headers(httpbin_both):\n    r = http('GET', httpbin_both + '/headers', 'Foo:bar')\n    assert HTTP_OK in r\n    assert '\"User-Agent\": \"HTTPie' in r, r\n    assert '\"Foo\": \"bar\"' in r\n\n\ndef test_headers_unset(httpbin_both):\n    r = http('GET', httpbin_both + '/headers')\n    assert 'Accept' in r.json['headers']  # default Accept present\n\n    r = http('GET', httpbin_both + '/headers', 'Accept:')\n    assert 'Accept' not in r.json['headers']   # default Accept unset\n\n\n@pytest.mark.skip('unimplemented')\ndef test_unset_host_header(httpbin_both):\n    r = http('GET', httpbin_both + '/headers')\n    assert 'Host' in r.json['headers']  # default Host present\n\n    r = http('GET', httpbin_both + '/headers', 'Host:')\n    assert 'Host' not in r.json['headers']   # default Host unset\n\n\ndef test_headers_empty_value(httpbin_both):\n    r = http('GET', httpbin_both + '/headers')\n    assert r.json['headers']['Accept']  # default Accept has value\n\n    r = http('GET', httpbin_both + '/headers', 'Accept;')\n    assert r.json['headers']['Accept'] == ''   # Accept has no value\n\n\ndef test_headers_empty_value_with_value_gives_error(httpbin):\n    with pytest.raises(ParseError):\n        http('GET', httpbin + '/headers', 'Accept;SYNTAX_ERROR')\n\n\ndef test_json_input_preserve_order(httpbin_both):\n    r = http('PATCH', httpbin_both + '/patch',\n             'order:={\"map\":{\"1\":\"first\",\"2\":\"second\"}}')\n    assert HTTP_OK in r\n    assert r.json['data'] == \\\n        '{\"order\": {\"map\": {\"1\": \"first\", \"2\": \"second\"}}}'\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "test_httpie.py", "id": "7eccd5b1c779042001acfdbe3601c18e", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/jakubroztocil-httpie/jakubroztocil-httpie-0f4dce9/tests/test_httpie.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:39:35Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}