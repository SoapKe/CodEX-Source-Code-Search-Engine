{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright 2017 Radware LTD.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nimport os\nfrom ansible.compat.tests.mock import patch, MagicMock\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import patch\n\nBASE_PARAMS = {'vdirect_ip': None, 'vdirect_user': None, 'vdirect_password': None,\n               'vdirect_wait': None, 'vdirect_secondary_ip': None,\n               'vdirect_https_port': None, 'vdirect_http_port': None,\n               'vdirect_timeout': None, 'vdirect_use_ssl': None, 'vdirect_validate_certs': None}\n\nRUNNABLE_PARAMS = {'runnable_type': 'ConfigurationTemplate', 'runnable_name': 'runnable',\n                   'action_name': None, 'parameters': None}\n\nRUNNABLE_OBJECTS_RESULT = [200, '', '', {'names': ['runnable']}]\nAVAILABLE_ACTIONS_RESULT = [200, '', '', {'names': ['a', 'b']}]\nACTIONS_PARAMS_RESULT = [200, '', '', {'parameters': [{'name': 'pin', 'type': 'in', 'direction': 'in'},\n                                                      {'name': 'pout', 'type': 'out', 'direction': 'out'},\n                                                      {'name': 'alteon', 'type': 'alteon'}]}]\n\nRUN_RESULT = [200, '', '', {\n    \"uri\": \"https://10.11.12.13:2189/api/status?token=Workflow%5Ca%5Capply%5Cc4b533a8-8764-4cbf-a19c-63b11b9ccc09\",\n    \"targetUri\": \"https://10.11.12.13:2189/api/workflow/a\",\n    \"complete\": True, \"status\": 200, \"success\": True, \"messages\": [], \"action\": \"apply\", \"parameters\": {},\n}]\n\nMODULE_RESULT = {\"msg\": \"Configuration template run completed.\", \"parameters\": {}}\n\n\n@patch('vdirect_client.rest_client.RestClient')\nclass RestClient ():\n    def __init__(self, vdirect_ip=None, vdirect_user=None, vdirect_password=None, wait=None,\n                 secondary_vdirect_ip=None, https_port=None, http_port=None,\n                 timeout=None, https=None, strict_http_results=None,\n                 verify=None):\n        pass\n\n\n@patch('vdirect_client.rest_client.Runnable')\nclass Runnable ():\n    available_actions_result = None\n    action_info_result = None\n    runnable_objects_result = None\n    run_result = None\n\n    def __init__(self, client):\n        self.client = client\n\n    @classmethod\n    def set_action_info_result(cls, result):\n        Runnable.action_info_result = result\n\n    @classmethod\n    def set_available_actions_result(cls, result):\n        Runnable.available_actions_result = result\n\n    @classmethod\n    def set_run_result(cls, result):\n        Runnable.run_result = result\n\n    @classmethod\n    def set_runnable_objects_result(cls, result):\n        Runnable.runnable_objects_result = result\n\n    def get_available_actions(self, type=None, name=None):\n        return Runnable.available_actions_result\n\n    def get_action_info(self, type, name, action_name):\n        return Runnable.action_info_result\n\n    def run(self, data, type, name, action_name):\n        return Runnable.run_result\n\n    def get_runnable_objects(self, type):\n        return Runnable.runnable_objects_result\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.module_mock = MagicMock()\n        self.module_mock.rest_client.RESP_STATUS = 0\n        self.module_mock.rest_client.RESP_REASON = 1\n        self.module_mock.rest_client.RESP_STR = 2\n        self.module_mock.rest_client.RESP_DATA = 3\n\n    def test_missing_parameter(self, *args):\n        with patch.dict('sys.modules', **{\n            'vdirect_client': self.module_mock,\n            'vdirect_client.rest_client': self.module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_runnable\n\n            try:\n                params = BASE_PARAMS.copy()\n                vdirect_runnable.VdirectRunnable(params)\n                self.fail(\"KeyError was not thrown for missing parameter\")\n            except KeyError:\n                assert True\n\n    def test_validate_runnable_exists(self, *args):\n        with patch.dict('sys.modules', **{\n            'vdirect_client': self.module_mock,\n            'vdirect_client.rest_client': self.module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_runnable\n\n            Runnable.set_runnable_objects_result(RUNNABLE_OBJECTS_RESULT)\n            BASE_PARAMS.update(RUNNABLE_PARAMS)\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable.client.runnable = Runnable(vdirectRunnable.client)\n            vdirectRunnable._validate_runnable_exists()\n            assert True\n\n            BASE_PARAMS.update(RUNNABLE_PARAMS)\n            BASE_PARAMS['runnable_name'] = \"missing\"\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable.client.runnable = Runnable(vdirectRunnable.client)\n            try:\n                vdirectRunnable._validate_runnable_exists()\n                self.fail(\"MissingRunnableException was not thrown for missing runnable name\")\n            except vdirect_runnable.MissingRunnableException:\n                assert True\n\n    def test_validate_action_name(self, *args):\n        with patch.dict('sys.modules', **{\n            'vdirect_client': self.module_mock,\n            'vdirect_client.rest_client': self.module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_runnable\n\n            Runnable.set_runnable_objects_result(RUNNABLE_OBJECTS_RESULT)\n            BASE_PARAMS.update(RUNNABLE_PARAMS)\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable._validate_action_name()\n            assert vdirectRunnable.action_name == vdirect_runnable.VdirectRunnable.RUN_ACTION\n\n            BASE_PARAMS['runnable_type'] = vdirect_runnable.WORKFLOW_TEMPLATE_RUNNABLE_TYPE\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable._validate_action_name()\n            assert vdirectRunnable.action_name == vdirect_runnable.VdirectRunnable.CREATE_WORKFLOW_ACTION\n\n            BASE_PARAMS['runnable_type'] = vdirect_runnable.WORKFLOW_RUNNABLE_TYPE\n            BASE_PARAMS['action_name'] = 'a'\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable.client.runnable = Runnable(vdirectRunnable.client)\n            Runnable.set_available_actions_result(AVAILABLE_ACTIONS_RESULT)\n            vdirectRunnable._validate_action_name()\n            assert vdirectRunnable.action_name == 'a'\n\n            BASE_PARAMS['action_name'] = 'c'\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable.client.runnable = Runnable(vdirectRunnable.client)\n            Runnable.set_available_actions_result(AVAILABLE_ACTIONS_RESULT)\n            try:\n                vdirectRunnable._validate_action_name()\n                self.fail(\"WrongActionNameException was not thrown for wrong action name\")\n            except vdirect_runnable.WrongActionNameException:\n                assert True\n\n    def test_validate_required_action_params(self, *args):\n        with patch.dict('sys.modules', **{\n            'vdirect_client': self.module_mock,\n            'vdirect_client.rest_client': self.module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_runnable\n\n            Runnable.set_runnable_objects_result(RUNNABLE_OBJECTS_RESULT)\n            BASE_PARAMS.update(RUNNABLE_PARAMS)\n            BASE_PARAMS['runnable_type'] = vdirect_runnable.WORKFLOW_RUNNABLE_TYPE\n            BASE_PARAMS['action_name'] = 'a'\n            BASE_PARAMS['parameters'] = {\"alteon\": \"x\"}\n\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable.client.runnable = Runnable(vdirectRunnable.client)\n            Runnable.set_available_actions_result(AVAILABLE_ACTIONS_RESULT)\n            Runnable.set_action_info_result(ACTIONS_PARAMS_RESULT)\n\n            vdirectRunnable._validate_action_name()\n            try:\n                vdirectRunnable._validate_required_action_params()\n                self.fail(\"MissingActionParametersException was not thrown for missing parameters\")\n            except vdirect_runnable.MissingActionParametersException:\n                assert True\n\n            BASE_PARAMS['parameters'] = {\"alteon\": \"x\"}\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable._validate_action_name()\n            try:\n                vdirectRunnable._validate_required_action_params()\n                self.fail(\"MissingActionParametersException was not thrown for missing parameters\")\n            except vdirect_runnable.MissingActionParametersException:\n                assert True\n\n            BASE_PARAMS['parameters'] = {\"pin\": \"x\", \"alteon\": \"x\"}\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable._validate_action_name()\n            vdirectRunnable._validate_required_action_params()\n            assert True\n\n    def test_run(self, *args):\n        with patch.dict('sys.modules', **{\n            'vdirect_client': self.module_mock,\n            'vdirect_client.rest_client': self.module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_runnable\n\n            Runnable.set_runnable_objects_result(RUNNABLE_OBJECTS_RESULT)\n\n            BASE_PARAMS.update(RUNNABLE_PARAMS)\n\n            BASE_PARAMS['runnable_type'] = vdirect_runnable.CONFIGURATION_TEMPLATE_RUNNABLE_TYPE\n            BASE_PARAMS['parameters'] = {\"pin\": \"x\", \"alteon\": \"x\"}\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable.client.runnable = Runnable(vdirectRunnable.client)\n            Runnable.set_available_actions_result(AVAILABLE_ACTIONS_RESULT)\n            Runnable.set_action_info_result(ACTIONS_PARAMS_RESULT)\n            Runnable.set_run_result(RUN_RESULT)\n            res = vdirectRunnable.run()\n            assert res == MODULE_RESULT\n\n            BASE_PARAMS['runnable_type'] = vdirect_runnable.WORKFLOW_TEMPLATE_RUNNABLE_TYPE\n            MODULE_RESULT['msg'] = \"Workflow created.\"\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable.client.runnable = Runnable(vdirectRunnable.client)\n            res = vdirectRunnable.run()\n            assert res == MODULE_RESULT\n\n            BASE_PARAMS['runnable_type'] = vdirect_runnable.WORKFLOW_RUNNABLE_TYPE\n            BASE_PARAMS['action_name'] = 'a'\n            MODULE_RESULT['msg'] = \"Workflow action run completed.\"\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable.client.runnable = Runnable(vdirectRunnable.client)\n            Runnable.set_available_actions_result(AVAILABLE_ACTIONS_RESULT)\n            Runnable.set_action_info_result(ACTIONS_PARAMS_RESULT)\n            res = vdirectRunnable.run()\n            assert res == MODULE_RESULT\n\n            result_parameters = {\"param1\": \"value1\", \"param2\": \"value2\"}\n            RUN_RESULT[self.module_mock.rest_client.RESP_DATA]['parameters'] = result_parameters\n            MODULE_RESULT['parameters'] = result_parameters\n            res = vdirectRunnable.run()\n            assert res == MODULE_RESULT\n\n            RUN_RESULT[self.module_mock.rest_client.RESP_DATA]['status'] = 404\n            vdirectRunnable.run()\n            assert res == MODULE_RESULT\n\n            RUN_RESULT[self.module_mock.rest_client.RESP_STATUS] = 400\n            RUN_RESULT[self.module_mock.rest_client.RESP_REASON] = \"Reason\"\n            RUN_RESULT[self.module_mock.rest_client.RESP_STR] = \"Details\"\n            try:\n                vdirectRunnable.run()\n                self.fail(\"RunnableException was not thrown for failed run.\")\n            except vdirect_runnable.RunnableException as e:\n                assert str(e) == \"Reason: Reason. Details:Details.\"\n\n            RUN_RESULT[self.module_mock.rest_client.RESP_STATUS] = 200\n            RUN_RESULT[self.module_mock.rest_client.RESP_DATA][\"status\"] = 400\n            RUN_RESULT[self.module_mock.rest_client.RESP_DATA][\"success\"] = False\n            RUN_RESULT[self.module_mock.rest_client.RESP_DATA][\"exception\"] = {\"message\": \"exception message\"}\n            try:\n                vdirectRunnable.run()\n                self.fail(\"RunnableException was not thrown for failed run.\")\n            except vdirect_runnable.RunnableException as e:\n                assert str(e) == \"Reason: exception message. Details:Details.\"\n", "comments": "      coding  utf 8           copyright 2017 radware ltd        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses    ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright 2017 Radware LTD.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nimport os\nfrom ansible.compat.tests.mock import patch, MagicMock\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import patch\n\nBASE_PARAMS = {'vdirect_ip': None, 'vdirect_user': None, 'vdirect_password': None,\n               'vdirect_wait': None, 'vdirect_secondary_ip': None,\n               'vdirect_https_port': None, 'vdirect_http_port': None,\n               'vdirect_timeout': None, 'vdirect_use_ssl': None, 'vdirect_validate_certs': None}\n\nRUNNABLE_PARAMS = {'runnable_type': 'ConfigurationTemplate', 'runnable_name': 'runnable',\n                   'action_name': None, 'parameters': None}\n\nRUNNABLE_OBJECTS_RESULT = [200, '', '', {'names': ['runnable']}]\nAVAILABLE_ACTIONS_RESULT = [200, '', '', {'names': ['a', 'b']}]\nACTIONS_PARAMS_RESULT = [200, '', '', {'parameters': [{'name': 'pin', 'type': 'in', 'direction': 'in'},\n                                                      {'name': 'pout', 'type': 'out', 'direction': 'out'},\n                                                      {'name': 'alteon', 'type': 'alteon'}]}]\n\nRUN_RESULT = [200, '', '', {\n    \"uri\": \"https://10.11.12.13:2189/api/status?token=Workflow%5Ca%5Capply%5Cc4b533a8-8764-4cbf-a19c-63b11b9ccc09\",\n    \"targetUri\": \"https://10.11.12.13:2189/api/workflow/a\",\n    \"complete\": True, \"status\": 200, \"success\": True, \"messages\": [], \"action\": \"apply\", \"parameters\": {},\n}]\n\nMODULE_RESULT = {\"msg\": \"Configuration template run completed.\", \"parameters\": {}}\n\n\n@patch('vdirect_client.rest_client.RestClient')\nclass RestClient ():\n    def __init__(self, vdirect_ip=None, vdirect_user=None, vdirect_password=None, wait=None,\n                 secondary_vdirect_ip=None, https_port=None, http_port=None,\n                 timeout=None, https=None, strict_http_results=None,\n                 verify=None):\n        pass\n\n\n@patch('vdirect_client.rest_client.Runnable')\nclass Runnable ():\n    available_actions_result = None\n    action_info_result = None\n    runnable_objects_result = None\n    run_result = None\n\n    def __init__(self, client):\n        self.client = client\n\n    @classmethod\n    def set_action_info_result(cls, result):\n        Runnable.action_info_result = result\n\n    @classmethod\n    def set_available_actions_result(cls, result):\n        Runnable.available_actions_result = result\n\n    @classmethod\n    def set_run_result(cls, result):\n        Runnable.run_result = result\n\n    @classmethod\n    def set_runnable_objects_result(cls, result):\n        Runnable.runnable_objects_result = result\n\n    def get_available_actions(self, type=None, name=None):\n        return Runnable.available_actions_result\n\n    def get_action_info(self, type, name, action_name):\n        return Runnable.action_info_result\n\n    def run(self, data, type, name, action_name):\n        return Runnable.run_result\n\n    def get_runnable_objects(self, type):\n        return Runnable.runnable_objects_result\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.module_mock = MagicMock()\n        self.module_mock.rest_client.RESP_STATUS = 0\n        self.module_mock.rest_client.RESP_REASON = 1\n        self.module_mock.rest_client.RESP_STR = 2\n        self.module_mock.rest_client.RESP_DATA = 3\n\n    def test_missing_parameter(self, *args):\n        with patch.dict('sys.modules', **{\n            'vdirect_client': self.module_mock,\n            'vdirect_client.rest_client': self.module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_runnable\n\n            try:\n                params = BASE_PARAMS.copy()\n                vdirect_runnable.VdirectRunnable(params)\n                self.fail(\"KeyError was not thrown for missing parameter\")\n            except KeyError:\n                assert True\n\n    def test_validate_runnable_exists(self, *args):\n        with patch.dict('sys.modules', **{\n            'vdirect_client': self.module_mock,\n            'vdirect_client.rest_client': self.module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_runnable\n\n            Runnable.set_runnable_objects_result(RUNNABLE_OBJECTS_RESULT)\n            BASE_PARAMS.update(RUNNABLE_PARAMS)\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable.client.runnable = Runnable(vdirectRunnable.client)\n            vdirectRunnable._validate_runnable_exists()\n            assert True\n\n            BASE_PARAMS.update(RUNNABLE_PARAMS)\n            BASE_PARAMS['runnable_name'] = \"missing\"\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable.client.runnable = Runnable(vdirectRunnable.client)\n            try:\n                vdirectRunnable._validate_runnable_exists()\n                self.fail(\"MissingRunnableException was not thrown for missing runnable name\")\n            except vdirect_runnable.MissingRunnableException:\n                assert True\n\n    def test_validate_action_name(self, *args):\n        with patch.dict('sys.modules', **{\n            'vdirect_client': self.module_mock,\n            'vdirect_client.rest_client': self.module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_runnable\n\n            Runnable.set_runnable_objects_result(RUNNABLE_OBJECTS_RESULT)\n            BASE_PARAMS.update(RUNNABLE_PARAMS)\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable._validate_action_name()\n            assert vdirectRunnable.action_name == vdirect_runnable.VdirectRunnable.RUN_ACTION\n\n            BASE_PARAMS['runnable_type'] = vdirect_runnable.WORKFLOW_TEMPLATE_RUNNABLE_TYPE\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable._validate_action_name()\n            assert vdirectRunnable.action_name == vdirect_runnable.VdirectRunnable.CREATE_WORKFLOW_ACTION\n\n            BASE_PARAMS['runnable_type'] = vdirect_runnable.WORKFLOW_RUNNABLE_TYPE\n            BASE_PARAMS['action_name'] = 'a'\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable.client.runnable = Runnable(vdirectRunnable.client)\n            Runnable.set_available_actions_result(AVAILABLE_ACTIONS_RESULT)\n            vdirectRunnable._validate_action_name()\n            assert vdirectRunnable.action_name == 'a'\n\n            BASE_PARAMS['action_name'] = 'c'\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable.client.runnable = Runnable(vdirectRunnable.client)\n            Runnable.set_available_actions_result(AVAILABLE_ACTIONS_RESULT)\n            try:\n                vdirectRunnable._validate_action_name()\n                self.fail(\"WrongActionNameException was not thrown for wrong action name\")\n            except vdirect_runnable.WrongActionNameException:\n                assert True\n\n    def test_validate_required_action_params(self, *args):\n        with patch.dict('sys.modules', **{\n            'vdirect_client': self.module_mock,\n            'vdirect_client.rest_client': self.module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_runnable\n\n            Runnable.set_runnable_objects_result(RUNNABLE_OBJECTS_RESULT)\n            BASE_PARAMS.update(RUNNABLE_PARAMS)\n            BASE_PARAMS['runnable_type'] = vdirect_runnable.WORKFLOW_RUNNABLE_TYPE\n            BASE_PARAMS['action_name'] = 'a'\n            BASE_PARAMS['parameters'] = {\"alteon\": \"x\"}\n\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable.client.runnable = Runnable(vdirectRunnable.client)\n            Runnable.set_available_actions_result(AVAILABLE_ACTIONS_RESULT)\n            Runnable.set_action_info_result(ACTIONS_PARAMS_RESULT)\n\n            vdirectRunnable._validate_action_name()\n            try:\n                vdirectRunnable._validate_required_action_params()\n                self.fail(\"MissingActionParametersException was not thrown for missing parameters\")\n            except vdirect_runnable.MissingActionParametersException:\n                assert True\n\n            BASE_PARAMS['parameters'] = {\"alteon\": \"x\"}\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable._validate_action_name()\n            try:\n                vdirectRunnable._validate_required_action_params()\n                self.fail(\"MissingActionParametersException was not thrown for missing parameters\")\n            except vdirect_runnable.MissingActionParametersException:\n                assert True\n\n            BASE_PARAMS['parameters'] = {\"pin\": \"x\", \"alteon\": \"x\"}\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable._validate_action_name()\n            vdirectRunnable._validate_required_action_params()\n            assert True\n\n    def test_run(self, *args):\n        with patch.dict('sys.modules', **{\n            'vdirect_client': self.module_mock,\n            'vdirect_client.rest_client': self.module_mock,\n        }):\n            from ansible.modules.network.radware import vdirect_runnable\n\n            Runnable.set_runnable_objects_result(RUNNABLE_OBJECTS_RESULT)\n\n            BASE_PARAMS.update(RUNNABLE_PARAMS)\n\n            BASE_PARAMS['runnable_type'] = vdirect_runnable.CONFIGURATION_TEMPLATE_RUNNABLE_TYPE\n            BASE_PARAMS['parameters'] = {\"pin\": \"x\", \"alteon\": \"x\"}\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable.client.runnable = Runnable(vdirectRunnable.client)\n            Runnable.set_available_actions_result(AVAILABLE_ACTIONS_RESULT)\n            Runnable.set_action_info_result(ACTIONS_PARAMS_RESULT)\n            Runnable.set_run_result(RUN_RESULT)\n            res = vdirectRunnable.run()\n            assert res == MODULE_RESULT\n\n            BASE_PARAMS['runnable_type'] = vdirect_runnable.WORKFLOW_TEMPLATE_RUNNABLE_TYPE\n            MODULE_RESULT['msg'] = \"Workflow created.\"\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable.client.runnable = Runnable(vdirectRunnable.client)\n            res = vdirectRunnable.run()\n            assert res == MODULE_RESULT\n\n            BASE_PARAMS['runnable_type'] = vdirect_runnable.WORKFLOW_RUNNABLE_TYPE\n            BASE_PARAMS['action_name'] = 'a'\n            MODULE_RESULT['msg'] = \"Workflow action run completed.\"\n            vdirectRunnable = vdirect_runnable.VdirectRunnable(BASE_PARAMS)\n            vdirectRunnable.client.runnable = Runnable(vdirectRunnable.client)\n            Runnable.set_available_actions_result(AVAILABLE_ACTIONS_RESULT)\n            Runnable.set_action_info_result(ACTIONS_PARAMS_RESULT)\n            res = vdirectRunnable.run()\n            assert res == MODULE_RESULT\n\n            result_parameters = {\"param1\": \"value1\", \"param2\": \"value2\"}\n            RUN_RESULT[self.module_mock.rest_client.RESP_DATA]['parameters'] = result_parameters\n            MODULE_RESULT['parameters'] = result_parameters\n            res = vdirectRunnable.run()\n            assert res == MODULE_RESULT\n\n            RUN_RESULT[self.module_mock.rest_client.RESP_DATA]['status'] = 404\n            vdirectRunnable.run()\n            assert res == MODULE_RESULT\n\n            RUN_RESULT[self.module_mock.rest_client.RESP_STATUS] = 400\n            RUN_RESULT[self.module_mock.rest_client.RESP_REASON] = \"Reason\"\n            RUN_RESULT[self.module_mock.rest_client.RESP_STR] = \"Details\"\n            try:\n                vdirectRunnable.run()\n                self.fail(\"RunnableException was not thrown for failed run.\")\n            except vdirect_runnable.RunnableException as e:\n                assert str(e) == \"Reason: Reason. Details:Details.\"\n\n            RUN_RESULT[self.module_mock.rest_client.RESP_STATUS] = 200\n            RUN_RESULT[self.module_mock.rest_client.RESP_DATA][\"status\"] = 400\n            RUN_RESULT[self.module_mock.rest_client.RESP_DATA][\"success\"] = False\n            RUN_RESULT[self.module_mock.rest_client.RESP_DATA][\"exception\"] = {\"message\": \"exception message\"}\n            try:\n                vdirectRunnable.run()\n                self.fail(\"RunnableException was not thrown for failed run.\")\n            except vdirect_runnable.RunnableException as e:\n                assert str(e) == \"Reason: exception message. Details:Details.\"\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_vdirect_runnable.py", "id": "fbb7d11b27824428308858f866bce7da", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/radware/test_vdirect_runnable.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}