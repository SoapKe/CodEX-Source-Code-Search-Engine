{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass TumblrIE(InfoExtractor):\n    _VALID_URL = r'https?://(?P<blog_name>[^/?\n    _TESTS = [{\n        'url': 'http://tatianamaslanydaily.tumblr.com/post/54196191430/orphan-black-dvd-extra-behind-the-scenes',\n        'md5': '479bb068e5b16462f5176a6828829767',\n        'info_dict': {\n            'id': '54196191430',\n            'ext': 'mp4',\n            'title': 'tatiana maslany news, Orphan Black || DVD extra - behind the scenes \u21b3...',\n            'description': 'md5:37db8211e40b50c7c44e95da14f630b7',\n            'thumbnail': r're:http://.*\\.jpg',\n        }\n    }, {\n        'url': 'http://5sostrum.tumblr.com/post/90208453769/yall-forgetting-the-greatest-keek-of-them-all',\n        'md5': 'bf348ef8c0ef84fbf1cbd6fa6e000359',\n        'info_dict': {\n            'id': '90208453769',\n            'ext': 'mp4',\n            'title': '5SOS STRUM ;]',\n            'description': 'md5:dba62ac8639482759c8eb10ce474586a',\n            'thumbnail': r're:http://.*\\.jpg',\n        }\n    }, {\n        'url': 'http://hdvideotest.tumblr.com/post/130323439814/test-description-for-my-hd-video',\n        'md5': '7ae503065ad150122dc3089f8cf1546c',\n        'info_dict': {\n            'id': '130323439814',\n            'ext': 'mp4',\n            'title': 'HD Video Testing \\u2014 Test description for my HD video',\n            'description': 'md5:97cc3ab5fcd27ee4af6356701541319c',\n            'thumbnail': r're:http://.*\\.jpg',\n        },\n        'params': {\n            'format': 'hd',\n        },\n    }, {\n        'url': 'http://naked-yogi.tumblr.com/post/118312946248/naked-smoking-stretching',\n        'md5': 'de07e5211d60d4f3a2c3df757ea9f6ab',\n        'info_dict': {\n            'id': 'Wmur',\n            'ext': 'mp4',\n            'title': 'naked smoking & stretching',\n            'upload_date': '20150506',\n            'timestamp': 1430931613,\n            'age_limit': 18,\n            'uploader_id': '1638622',\n            'uploader': 'naked-yogi',\n        },\n        'add_ie': ['Vidme'],\n    }, {\n        'url': 'http://camdamage.tumblr.com/post/98846056295/',\n        'md5': 'a9e0c8371ea1ca306d6554e3fecf50b6',\n        'info_dict': {\n            'id': '105463834',\n            'ext': 'mp4',\n            'title': 'Cam Damage-HD 720p',\n            'uploader': 'John Moyer',\n            'uploader_id': 'user32021558',\n        },\n        'add_ie': ['Vimeo'],\n    }, {\n        'url': 'http://sutiblr.tumblr.com/post/139638707273',\n        'md5': '2dd184b3669e049ba40563a7d423f95c',\n        'info_dict': {\n            'id': 'ir7qBEIKqvq',\n            'ext': 'mp4',\n            'title': 'Vine by sutiblr',\n            'alt_title': 'Vine by sutiblr',\n            'uploader': 'sutiblr',\n            'uploader_id': '1198993975374495744',\n            'upload_date': '20160220',\n            'like_count': int,\n            'comment_count': int,\n            'repost_count': int,\n        },\n        'add_ie': ['Vine'],\n    }, {\n        'url': 'http://vitasidorkina.tumblr.com/post/134652425014/joskriver-victoriassecret-invisibility-or',\n        'md5': '01c12ceb82cbf6b2fe0703aa56b3ad72',\n        'info_dict': {\n            'id': '-7LnUPGlSo',\n            'ext': 'mp4',\n            'title': 'Video by victoriassecret',\n            'description': 'Invisibility or flight\u2026which superpower would YOU choose? \n            'uploader_id': 'victoriassecret',\n            'thumbnail': r're:^https?://.*\\.jpg'\n        },\n        'add_ie': ['Instagram'],\n    }]\n\n    def _real_extract(self, url):\n        m_url = re.match(self._VALID_URL, url)\n        video_id = m_url.group('id')\n        blog = m_url.group('blog_name')\n\n        url = 'http://%s.tumblr.com/post/%s/' % (blog, video_id)\n        webpage, urlh = self._download_webpage_handle(url, video_id)\n\n        iframe_url = self._search_regex(\n            r'src=\\'(https?://www\\.tumblr\\.com/video/[^\\']+)\\'',\n            webpage, 'iframe url', default=None)\n        if iframe_url is None:\n            return self.url_result(urlh.geturl(), 'Generic')\n\n        iframe = self._download_webpage(iframe_url, video_id, 'Downloading iframe page')\n\n        duration = None\n        sources = []\n\n        sd_url = self._search_regex(\n            r'<source[^>]+src=([\"\\'])(?P<url>.+?)\\1', iframe,\n            'sd video url', default=None, group='url')\n        if sd_url:\n            sources.append((sd_url, 'sd'))\n\n        options = self._parse_json(\n            self._search_regex(\n                r'data-crt-options=([\"\\'])(?P<options>.+?)\\1', iframe,\n                'hd video url', default='', group='options'),\n            video_id, fatal=False)\n        if options:\n            duration = int_or_none(options.get('duration'))\n            hd_url = options.get('hdUrl')\n            if hd_url:\n                sources.append((hd_url, 'hd'))\n\n        formats = [{\n            'url': video_url,\n            'ext': 'mp4',\n            'format_id': format_id,\n            'height': int_or_none(self._search_regex(\n                r'/(\\d{3,4})$', video_url, 'height', default=None)),\n            'quality': quality,\n        } for quality, (video_url, format_id) in enumerate(sources)]\n\n        self._sort_formats(formats)\n\n        \n        \n        video_title = self._html_search_regex(\n            r'(?s)<title>(?P<title>.*?)(?: \\| Tumblr)?</title>',\n            webpage, 'title')\n\n        return {\n            'id': video_id,\n            'title': video_title,\n            'description': self._og_search_description(webpage, default=None),\n            'thumbnail': self._og_search_thumbnail(webpage, default=None),\n            'duration': duration,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#&]+)\\.tumblr\\.com/(?:post|video)/(?P<id>[0-9]+)(?:$|[/?#])'\n#VSFashionShow #ThisOrThat',\n# The only place where you can get a title, it's not complete,\n# but searching in other places doesn't work for all videos\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass TumblrIE(InfoExtractor):\n    _VALID_URL = r'https?://(?P<blog_name>[^/?#&]+)\\.tumblr\\.com/(?:post|video)/(?P<id>[0-9]+)(?:$|[/?#])'\n    _TESTS = [{\n        'url': 'http://tatianamaslanydaily.tumblr.com/post/54196191430/orphan-black-dvd-extra-behind-the-scenes',\n        'md5': '479bb068e5b16462f5176a6828829767',\n        'info_dict': {\n            'id': '54196191430',\n            'ext': 'mp4',\n            'title': 'tatiana maslany news, Orphan Black || DVD extra - behind the scenes \u21b3...',\n            'description': 'md5:37db8211e40b50c7c44e95da14f630b7',\n            'thumbnail': r're:http://.*\\.jpg',\n        }\n    }, {\n        'url': 'http://5sostrum.tumblr.com/post/90208453769/yall-forgetting-the-greatest-keek-of-them-all',\n        'md5': 'bf348ef8c0ef84fbf1cbd6fa6e000359',\n        'info_dict': {\n            'id': '90208453769',\n            'ext': 'mp4',\n            'title': '5SOS STRUM ;]',\n            'description': 'md5:dba62ac8639482759c8eb10ce474586a',\n            'thumbnail': r're:http://.*\\.jpg',\n        }\n    }, {\n        'url': 'http://hdvideotest.tumblr.com/post/130323439814/test-description-for-my-hd-video',\n        'md5': '7ae503065ad150122dc3089f8cf1546c',\n        'info_dict': {\n            'id': '130323439814',\n            'ext': 'mp4',\n            'title': 'HD Video Testing \\u2014 Test description for my HD video',\n            'description': 'md5:97cc3ab5fcd27ee4af6356701541319c',\n            'thumbnail': r're:http://.*\\.jpg',\n        },\n        'params': {\n            'format': 'hd',\n        },\n    }, {\n        'url': 'http://naked-yogi.tumblr.com/post/118312946248/naked-smoking-stretching',\n        'md5': 'de07e5211d60d4f3a2c3df757ea9f6ab',\n        'info_dict': {\n            'id': 'Wmur',\n            'ext': 'mp4',\n            'title': 'naked smoking & stretching',\n            'upload_date': '20150506',\n            'timestamp': 1430931613,\n            'age_limit': 18,\n            'uploader_id': '1638622',\n            'uploader': 'naked-yogi',\n        },\n        'add_ie': ['Vidme'],\n    }, {\n        'url': 'http://camdamage.tumblr.com/post/98846056295/',\n        'md5': 'a9e0c8371ea1ca306d6554e3fecf50b6',\n        'info_dict': {\n            'id': '105463834',\n            'ext': 'mp4',\n            'title': 'Cam Damage-HD 720p',\n            'uploader': 'John Moyer',\n            'uploader_id': 'user32021558',\n        },\n        'add_ie': ['Vimeo'],\n    }, {\n        'url': 'http://sutiblr.tumblr.com/post/139638707273',\n        'md5': '2dd184b3669e049ba40563a7d423f95c',\n        'info_dict': {\n            'id': 'ir7qBEIKqvq',\n            'ext': 'mp4',\n            'title': 'Vine by sutiblr',\n            'alt_title': 'Vine by sutiblr',\n            'uploader': 'sutiblr',\n            'uploader_id': '1198993975374495744',\n            'upload_date': '20160220',\n            'like_count': int,\n            'comment_count': int,\n            'repost_count': int,\n        },\n        'add_ie': ['Vine'],\n    }, {\n        'url': 'http://vitasidorkina.tumblr.com/post/134652425014/joskriver-victoriassecret-invisibility-or',\n        'md5': '01c12ceb82cbf6b2fe0703aa56b3ad72',\n        'info_dict': {\n            'id': '-7LnUPGlSo',\n            'ext': 'mp4',\n            'title': 'Video by victoriassecret',\n            'description': 'Invisibility or flight\u2026which superpower would YOU choose? #VSFashionShow #ThisOrThat',\n            'uploader_id': 'victoriassecret',\n            'thumbnail': r're:^https?://.*\\.jpg'\n        },\n        'add_ie': ['Instagram'],\n    }]\n\n    def _real_extract(self, url):\n        m_url = re.match(self._VALID_URL, url)\n        video_id = m_url.group('id')\n        blog = m_url.group('blog_name')\n\n        url = 'http://%s.tumblr.com/post/%s/' % (blog, video_id)\n        webpage, urlh = self._download_webpage_handle(url, video_id)\n\n        iframe_url = self._search_regex(\n            r'src=\\'(https?://www\\.tumblr\\.com/video/[^\\']+)\\'',\n            webpage, 'iframe url', default=None)\n        if iframe_url is None:\n            return self.url_result(urlh.geturl(), 'Generic')\n\n        iframe = self._download_webpage(iframe_url, video_id, 'Downloading iframe page')\n\n        duration = None\n        sources = []\n\n        sd_url = self._search_regex(\n            r'<source[^>]+src=([\"\\'])(?P<url>.+?)\\1', iframe,\n            'sd video url', default=None, group='url')\n        if sd_url:\n            sources.append((sd_url, 'sd'))\n\n        options = self._parse_json(\n            self._search_regex(\n                r'data-crt-options=([\"\\'])(?P<options>.+?)\\1', iframe,\n                'hd video url', default='', group='options'),\n            video_id, fatal=False)\n        if options:\n            duration = int_or_none(options.get('duration'))\n            hd_url = options.get('hdUrl')\n            if hd_url:\n                sources.append((hd_url, 'hd'))\n\n        formats = [{\n            'url': video_url,\n            'ext': 'mp4',\n            'format_id': format_id,\n            'height': int_or_none(self._search_regex(\n                r'/(\\d{3,4})$', video_url, 'height', default=None)),\n            'quality': quality,\n        } for quality, (video_url, format_id) in enumerate(sources)]\n\n        self._sort_formats(formats)\n\n        # The only place where you can get a title, it's not complete,\n        # but searching in other places doesn't work for all videos\n        video_title = self._html_search_regex(\n            r'(?s)<title>(?P<title>.*?)(?: \\| Tumblr)?</title>',\n            webpage, 'title')\n\n        return {\n            'id': video_id,\n            'title': video_title,\n            'description': self._og_search_description(webpage, default=None),\n            'thumbnail': self._og_search_thumbnail(webpage, default=None),\n            'duration': duration,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tumblr.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tumblr.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}