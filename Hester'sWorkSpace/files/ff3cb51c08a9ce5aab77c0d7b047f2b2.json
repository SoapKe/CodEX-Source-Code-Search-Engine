{"author": "django", "code": "\nimport threading\n\nfrom django.db import models\n\n\nclass DumbCategory(models.Model):\n    pass\n\n\nclass ProxyCategory(DumbCategory):\n    class Meta:\n        proxy = True\n\n\nclass NamedCategory(DumbCategory):\n    name = models.CharField(max_length=10)\n\n    def __str__(self):\n        return self.name\n\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=10)\n    parent = models.ForeignKey(\n        'self',\n        models.SET_NULL,\n        blank=True, null=True,\n        related_name='children',\n    )\n    category = models.ForeignKey(NamedCategory, models.SET_NULL, null=True, default=None)\n\n    class Meta:\n        ordering = ['name']\n\n    def __str__(self):\n        return self.name\n\n\nclass Note(models.Model):\n    note = models.CharField(max_length=100)\n    misc = models.CharField(max_length=10)\n    tag = models.ForeignKey(Tag, models.SET_NULL, blank=True, null=True)\n\n    class Meta:\n        ordering = ['note']\n\n    def __str__(self):\n        return self.note\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        \n        \n        \n        self.lock = threading.Lock()\n\n\nclass Annotation(models.Model):\n    name = models.CharField(max_length=10)\n    tag = models.ForeignKey(Tag, models.CASCADE)\n    notes = models.ManyToManyField(Note)\n\n    def __str__(self):\n        return self.name\n\n\nclass ExtraInfo(models.Model):\n    info = models.CharField(max_length=100)\n    note = models.ForeignKey(Note, models.CASCADE, null=True)\n    value = models.IntegerField(null=True)\n\n    class Meta:\n        ordering = ['info']\n\n    def __str__(self):\n        return self.info\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=10)\n    num = models.IntegerField(unique=True)\n    extra = models.ForeignKey(ExtraInfo, models.CASCADE)\n\n    class Meta:\n        ordering = ['name']\n\n    def __str__(self):\n        return self.name\n\n\nclass Item(models.Model):\n    name = models.CharField(max_length=10)\n    created = models.DateTimeField()\n    modified = models.DateTimeField(blank=True, null=True)\n    tags = models.ManyToManyField(Tag, blank=True)\n    creator = models.ForeignKey(Author, models.CASCADE)\n    note = models.ForeignKey(Note, models.CASCADE)\n\n    class Meta:\n        ordering = ['-note', 'name']\n\n    def __str__(self):\n        return self.name\n\n\nclass Report(models.Model):\n    name = models.CharField(max_length=10)\n    creator = models.ForeignKey(Author, models.SET_NULL, to_field='num', null=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass ReportComment(models.Model):\n    report = models.ForeignKey(Report, models.CASCADE)\n\n\nclass Ranking(models.Model):\n    rank = models.IntegerField()\n    author = models.ForeignKey(Author, models.CASCADE)\n\n    class Meta:\n        \n        ordering = ('author__extra__note', 'author__name', 'rank')\n\n    def __str__(self):\n        return '%d: %s' % (self.rank, self.author.name)\n\n\nclass Cover(models.Model):\n    title = models.CharField(max_length=50)\n    item = models.ForeignKey(Item, models.CASCADE)\n\n    class Meta:\n        ordering = ['item']\n\n    def __str__(self):\n        return self.title\n\n\nclass Number(models.Model):\n    num = models.IntegerField()\n\n    def __str__(self):\n        return str(self.num)\n\n\n# (\"valid\").\n\n\nclass Valid(models.Model):\n    valid = models.CharField(max_length=10)\n    parent = models.ManyToManyField('self')\n\n    class Meta:\n        ordering = ['valid']\n\n\n\n\n\nclass X(models.Model):\n    y = models.ForeignKey('Y', models.CASCADE)\n\n\nclass Y(models.Model):\n    x1 = models.ForeignKey(X, models.CASCADE, related_name='y1')\n\n\n\n\n\nclass LoopX(models.Model):\n    y = models.ForeignKey('LoopY', models.CASCADE)\n\n    class Meta:\n        ordering = ['y']\n\n\nclass LoopY(models.Model):\n    x = models.ForeignKey(LoopX, models.CASCADE)\n\n    class Meta:\n        ordering = ['x']\n\n\nclass LoopZ(models.Model):\n    z = models.ForeignKey('self', models.CASCADE)\n\n    class Meta:\n        ordering = ['z']\n\n\n\n\n\nclass CustomManager(models.Manager):\n    def get_queryset(self):\n        qs = super().get_queryset()\n        return qs.filter(public=True, tag__name='t1')\n\n\nclass ManagedModel(models.Model):\n    data = models.CharField(max_length=10)\n    tag = models.ForeignKey(Tag, models.CASCADE)\n    public = models.BooleanField(default=True)\n\n    objects = CustomManager()\n    normal_manager = models.Manager()\n\n    def __str__(self):\n        return self.data\n\n\n\n\nclass Detail(models.Model):\n    data = models.CharField(max_length=10)\n\n\nclass MemberManager(models.Manager):\n    def get_queryset(self):\n        return super().get_queryset().select_related(\"details\")\n\n\nclass Member(models.Model):\n    name = models.CharField(max_length=10)\n    details = models.OneToOneField(Detail, models.CASCADE, primary_key=True)\n\n    objects = MemberManager()\n\n\nclass Child(models.Model):\n    person = models.OneToOneField(Member, models.CASCADE, primary_key=True)\n    parent = models.ForeignKey(Member, models.CASCADE, related_name=\"children\")\n\n\n\n\nclass CustomPk(models.Model):\n    name = models.CharField(max_length=10, primary_key=True)\n    extra = models.CharField(max_length=10)\n\n    class Meta:\n        ordering = ['name', 'extra']\n\n\nclass Related(models.Model):\n    custom = models.ForeignKey(CustomPk, models.CASCADE, null=True)\n\n\nclass CustomPkTag(models.Model):\n    id = models.CharField(max_length=20, primary_key=True)\n    custom_pk = models.ManyToManyField(CustomPk)\n    tag = models.CharField(max_length=20)\n\n\n\n\n\nclass Celebrity(models.Model):\n    name = models.CharField(\"Name\", max_length=20)\n    greatest_fan = models.ForeignKey(\"Fan\", models.SET_NULL, null=True, unique=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass TvChef(Celebrity):\n    pass\n\n\nclass Fan(models.Model):\n    fan_of = models.ForeignKey(Celebrity, models.CASCADE)\n\n\n\n\nclass LeafA(models.Model):\n    data = models.CharField(max_length=10)\n\n    def __str__(self):\n        return self.data\n\n\nclass LeafB(models.Model):\n    data = models.CharField(max_length=10)\n\n\nclass Join(models.Model):\n    a = models.ForeignKey(LeafA, models.CASCADE)\n    b = models.ForeignKey(LeafB, models.CASCADE)\n\n\nclass ReservedName(models.Model):\n    name = models.CharField(max_length=20)\n    order = models.IntegerField()\n\n    def __str__(self):\n        return self.name\n\n\n\n\nclass SharedConnection(models.Model):\n    data = models.CharField(max_length=10)\n\n    def __str__(self):\n        return self.data\n\n\nclass PointerA(models.Model):\n    connection = models.ForeignKey(SharedConnection, models.CASCADE)\n\n\nclass PointerB(models.Model):\n    connection = models.ForeignKey(SharedConnection, models.CASCADE)\n\n\n\n\nclass SingleObject(models.Model):\n    name = models.CharField(max_length=10)\n\n    class Meta:\n        ordering = ['name']\n\n    def __str__(self):\n        return self.name\n\n\nclass RelatedObject(models.Model):\n    single = models.ForeignKey(SingleObject, models.SET_NULL, null=True)\n    f = models.IntegerField(null=True)\n\n    class Meta:\n        ordering = ['single']\n\n\nclass Plaything(models.Model):\n    name = models.CharField(max_length=10)\n    others = models.ForeignKey(RelatedObject, models.SET_NULL, null=True)\n\n    class Meta:\n        ordering = ['others']\n\n    def __str__(self):\n        return self.name\n\n\nclass Article(models.Model):\n    name = models.CharField(max_length=20)\n    created = models.DateTimeField()\n\n    def __str__(self):\n        return self.name\n\n\nclass Food(models.Model):\n    name = models.CharField(max_length=20, unique=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass Eaten(models.Model):\n    food = models.ForeignKey(Food, models.SET_NULL, to_field=\"name\", null=True)\n    meal = models.CharField(max_length=20)\n\n    def __str__(self):\n        return \"%s at %s\" % (self.food, self.meal)\n\n\nclass Node(models.Model):\n    num = models.IntegerField(unique=True)\n    parent = models.ForeignKey(\"self\", models.SET_NULL, to_field=\"num\", null=True)\n\n    def __str__(self):\n        return \"%s\" % self.num\n\n\n\n\nclass ObjectA(models.Model):\n    name = models.CharField(max_length=50)\n\n    def __str__(self):\n        return self.name\n\n    def __iter__(self):\n        \n        assert False, 'type checking should happen without calling model __iter__'\n\n\nclass ProxyObjectA(ObjectA):\n    class Meta:\n        proxy = True\n\n\nclass ChildObjectA(ObjectA):\n    pass\n\n\nclass ObjectB(models.Model):\n    name = models.CharField(max_length=50)\n    objecta = models.ForeignKey(ObjectA, models.CASCADE)\n    num = models.PositiveSmallIntegerField()\n\n    def __str__(self):\n        return self.name\n\n\nclass ProxyObjectB(ObjectB):\n    class Meta:\n        proxy = True\n\n\nclass ObjectC(models.Model):\n    name = models.CharField(max_length=50)\n    objecta = models.ForeignKey(ObjectA, models.SET_NULL, null=True)\n    objectb = models.ForeignKey(ObjectB, models.SET_NULL, null=True)\n    childobjecta = models.ForeignKey(ChildObjectA, models.SET_NULL, null=True, related_name='ca_pk')\n\n    def __str__(self):\n        return self.name\n\n\nclass SimpleCategory(models.Model):\n    name = models.CharField(max_length=15)\n\n    def __str__(self):\n        return self.name\n\n\nclass SpecialCategory(SimpleCategory):\n    special_name = models.CharField(max_length=15)\n\n    def __str__(self):\n        return self.name + \" \" + self.special_name\n\n\nclass CategoryItem(models.Model):\n    category = models.ForeignKey(SimpleCategory, models.CASCADE)\n\n    def __str__(self):\n        return \"category item: \" + str(self.category)\n\n\nclass MixedCaseFieldCategoryItem(models.Model):\n    CaTeGoRy = models.ForeignKey(SimpleCategory, models.CASCADE)\n\n\nclass MixedCaseDbColumnCategoryItem(models.Model):\n    category = models.ForeignKey(SimpleCategory, models.CASCADE, db_column='CaTeGoRy_Id')\n\n\nclass OneToOneCategory(models.Model):\n    new_name = models.CharField(max_length=15)\n    category = models.OneToOneField(SimpleCategory, models.CASCADE)\n\n    def __str__(self):\n        return \"one2one \" + self.new_name\n\n\nclass CategoryRelationship(models.Model):\n    first = models.ForeignKey(SimpleCategory, models.CASCADE, related_name='first_rel')\n    second = models.ForeignKey(SimpleCategory, models.CASCADE, related_name='second_rel')\n\n\nclass CommonMixedCaseForeignKeys(models.Model):\n    category = models.ForeignKey(CategoryItem, models.CASCADE)\n    mixed_case_field_category = models.ForeignKey(MixedCaseFieldCategoryItem, models.CASCADE)\n    mixed_case_db_column_category = models.ForeignKey(MixedCaseDbColumnCategoryItem, models.CASCADE)\n\n\nclass NullableName(models.Model):\n    name = models.CharField(max_length=20, null=True)\n\n    class Meta:\n        ordering = ['id']\n\n\nclass ModelD(models.Model):\n    name = models.TextField()\n\n\nclass ModelC(models.Model):\n    name = models.TextField()\n\n\nclass ModelB(models.Model):\n    name = models.TextField()\n    c = models.ForeignKey(ModelC, models.CASCADE)\n\n\nclass ModelA(models.Model):\n    name = models.TextField()\n    b = models.ForeignKey(ModelB, models.SET_NULL, null=True)\n    d = models.ForeignKey(ModelD, models.CASCADE)\n\n\nclass Job(models.Model):\n    name = models.CharField(max_length=20, unique=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass JobResponsibilities(models.Model):\n    job = models.ForeignKey(Job, models.CASCADE, to_field='name')\n    responsibility = models.ForeignKey('Responsibility', models.CASCADE, to_field='description')\n\n\nclass Responsibility(models.Model):\n    description = models.CharField(max_length=20, unique=True)\n    jobs = models.ManyToManyField(Job, through=JobResponsibilities,\n                                  related_name='responsibilities')\n\n    def __str__(self):\n        return self.description\n\n\n\n\nclass FK1(models.Model):\n    f1 = models.TextField()\n    f2 = models.TextField()\n\n\nclass FK2(models.Model):\n    f1 = models.TextField()\n    f2 = models.TextField()\n\n\nclass FK3(models.Model):\n    f1 = models.TextField()\n    f2 = models.TextField()\n\n\nclass BaseA(models.Model):\n    a = models.ForeignKey(FK1, models.SET_NULL, null=True)\n    b = models.ForeignKey(FK2, models.SET_NULL, null=True)\n    c = models.ForeignKey(FK3, models.SET_NULL, null=True)\n\n\nclass Identifier(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\n\nclass Program(models.Model):\n    identifier = models.OneToOneField(Identifier, models.CASCADE)\n\n\nclass Channel(models.Model):\n    programs = models.ManyToManyField(Program)\n    identifier = models.OneToOneField(Identifier, models.CASCADE)\n\n\nclass Book(models.Model):\n    title = models.TextField()\n    chapter = models.ForeignKey('Chapter', models.CASCADE)\n\n\nclass Chapter(models.Model):\n    title = models.TextField()\n    paragraph = models.ForeignKey('Paragraph', models.CASCADE)\n\n\nclass Paragraph(models.Model):\n    text = models.TextField()\n    page = models.ManyToManyField('Page')\n\n\nclass Page(models.Model):\n    text = models.TextField()\n\n\nclass MyObject(models.Model):\n    parent = models.ForeignKey('self', models.SET_NULL, null=True, blank=True, related_name='children')\n    data = models.CharField(max_length=100)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n\n\n\nclass Order(models.Model):\n    id = models.IntegerField(primary_key=True)\n\n    class Meta:\n        ordering = ('pk',)\n\n    def __str__(self):\n        return '%s' % self.pk\n\n\nclass OrderItem(models.Model):\n    order = models.ForeignKey(Order, models.CASCADE, related_name='items')\n    status = models.IntegerField()\n\n    class Meta:\n        ordering = ('pk',)\n\n    def __str__(self):\n        return '%s' % self.pk\n\n\nclass BaseUser(models.Model):\n    pass\n\n\nclass Task(models.Model):\n    title = models.CharField(max_length=10)\n    owner = models.ForeignKey(BaseUser, models.CASCADE, related_name='owner')\n    creator = models.ForeignKey(BaseUser, models.CASCADE, related_name='creator')\n\n    def __str__(self):\n        return self.title\n\n\nclass Staff(models.Model):\n    name = models.CharField(max_length=10)\n\n    def __str__(self):\n        return self.name\n\n\nclass StaffUser(BaseUser):\n    staff = models.OneToOneField(Staff, models.CASCADE, related_name='user')\n\n    def __str__(self):\n        return self.staff\n\n\nclass Ticket21203Parent(models.Model):\n    parentid = models.AutoField(primary_key=True)\n    parent_bool = models.BooleanField(default=True)\n    created = models.DateTimeField(auto_now=True)\n\n\nclass Ticket21203Child(models.Model):\n    childid = models.AutoField(primary_key=True)\n    parent = models.ForeignKey(Ticket21203Parent, models.CASCADE)\n\n\nclass Person(models.Model):\n    name = models.CharField(max_length=128)\n\n\nclass Company(models.Model):\n    name = models.CharField(max_length=128)\n    employees = models.ManyToManyField(Person, related_name='employers', through='Employment')\n\n    def __str__(self):\n        return self.name\n\n\nclass Employment(models.Model):\n    employer = models.ForeignKey(Company, models.CASCADE)\n    employee = models.ForeignKey(Person, models.CASCADE)\n    title = models.CharField(max_length=128)\n\n\nclass School(models.Model):\n    pass\n\n\nclass Student(models.Model):\n    school = models.ForeignKey(School, models.CASCADE)\n\n\nclass Classroom(models.Model):\n    name = models.CharField(max_length=20)\n    has_blackboard = models.NullBooleanField()\n    school = models.ForeignKey(School, models.CASCADE)\n    students = models.ManyToManyField(Student, related_name='classroom')\n\n\nclass Teacher(models.Model):\n    schools = models.ManyToManyField(School)\n    friends = models.ManyToManyField('self')\n\n\nclass Ticket23605AParent(models.Model):\n    pass\n\n\nclass Ticket23605A(Ticket23605AParent):\n    pass\n\n\nclass Ticket23605B(models.Model):\n    modela_fk = models.ForeignKey(Ticket23605A, models.CASCADE)\n    modelc_fk = models.ForeignKey(\"Ticket23605C\", models.CASCADE)\n    field_b0 = models.IntegerField(null=True)\n    field_b1 = models.BooleanField(default=False)\n\n\nclass Ticket23605C(models.Model):\n    field_c0 = models.FloatField()\n\n\n\nclass Individual(models.Model):\n    alive = models.BooleanField()\n\n    class Meta:\n        db_table = 'Individual'\n\n\nclass RelatedIndividual(models.Model):\n    related = models.ForeignKey(Individual, models.CASCADE, related_name='related_individual')\n\n    class Meta:\n        db_table = 'RelatedIndividual'\n", "comments": "    various complex queries problematic past         regression  13227    attribute    unpicklable stop cloning queries    use objects type argument     a complex ordering specification  should stress system bit     symmetrical m2m field normal field using reverse accessor name    ( valid )     some funky cross linked models testing couple infinite recursion    cases     some models cycle default ordering  this would bad    catch infinite loop     a model custom default manager combination     an inter related setup multiple paths child detail     custom primary keys interfered ordering past     an inter related setup model subclass nullable    path another model  return path model     multiple foreign keys    a simpler shared foreign key setup expose problems     multi layer ordering    bug  12252    ticket  23721    models disjunction join promotion low level testing     models  17600 regressions    db table names capital letters ensure quoted queries  ", "content": "\"\"\"\nVarious complex queries that have been problematic in the past.\n\"\"\"\nimport threading\n\nfrom django.db import models\n\n\nclass DumbCategory(models.Model):\n    pass\n\n\nclass ProxyCategory(DumbCategory):\n    class Meta:\n        proxy = True\n\n\nclass NamedCategory(DumbCategory):\n    name = models.CharField(max_length=10)\n\n    def __str__(self):\n        return self.name\n\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=10)\n    parent = models.ForeignKey(\n        'self',\n        models.SET_NULL,\n        blank=True, null=True,\n        related_name='children',\n    )\n    category = models.ForeignKey(NamedCategory, models.SET_NULL, null=True, default=None)\n\n    class Meta:\n        ordering = ['name']\n\n    def __str__(self):\n        return self.name\n\n\nclass Note(models.Model):\n    note = models.CharField(max_length=100)\n    misc = models.CharField(max_length=10)\n    tag = models.ForeignKey(Tag, models.SET_NULL, blank=True, null=True)\n\n    class Meta:\n        ordering = ['note']\n\n    def __str__(self):\n        return self.note\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # Regression for #13227 -- having an attribute that\n        # is unpicklable doesn't stop you from cloning queries\n        # that use objects of that type as an argument.\n        self.lock = threading.Lock()\n\n\nclass Annotation(models.Model):\n    name = models.CharField(max_length=10)\n    tag = models.ForeignKey(Tag, models.CASCADE)\n    notes = models.ManyToManyField(Note)\n\n    def __str__(self):\n        return self.name\n\n\nclass ExtraInfo(models.Model):\n    info = models.CharField(max_length=100)\n    note = models.ForeignKey(Note, models.CASCADE, null=True)\n    value = models.IntegerField(null=True)\n\n    class Meta:\n        ordering = ['info']\n\n    def __str__(self):\n        return self.info\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=10)\n    num = models.IntegerField(unique=True)\n    extra = models.ForeignKey(ExtraInfo, models.CASCADE)\n\n    class Meta:\n        ordering = ['name']\n\n    def __str__(self):\n        return self.name\n\n\nclass Item(models.Model):\n    name = models.CharField(max_length=10)\n    created = models.DateTimeField()\n    modified = models.DateTimeField(blank=True, null=True)\n    tags = models.ManyToManyField(Tag, blank=True)\n    creator = models.ForeignKey(Author, models.CASCADE)\n    note = models.ForeignKey(Note, models.CASCADE)\n\n    class Meta:\n        ordering = ['-note', 'name']\n\n    def __str__(self):\n        return self.name\n\n\nclass Report(models.Model):\n    name = models.CharField(max_length=10)\n    creator = models.ForeignKey(Author, models.SET_NULL, to_field='num', null=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass ReportComment(models.Model):\n    report = models.ForeignKey(Report, models.CASCADE)\n\n\nclass Ranking(models.Model):\n    rank = models.IntegerField()\n    author = models.ForeignKey(Author, models.CASCADE)\n\n    class Meta:\n        # A complex ordering specification. Should stress the system a bit.\n        ordering = ('author__extra__note', 'author__name', 'rank')\n\n    def __str__(self):\n        return '%d: %s' % (self.rank, self.author.name)\n\n\nclass Cover(models.Model):\n    title = models.CharField(max_length=50)\n    item = models.ForeignKey(Item, models.CASCADE)\n\n    class Meta:\n        ordering = ['item']\n\n    def __str__(self):\n        return self.title\n\n\nclass Number(models.Model):\n    num = models.IntegerField()\n\n    def __str__(self):\n        return str(self.num)\n\n# Symmetrical m2m field with a normal field using the reverse accessor name\n# (\"valid\").\n\n\nclass Valid(models.Model):\n    valid = models.CharField(max_length=10)\n    parent = models.ManyToManyField('self')\n\n    class Meta:\n        ordering = ['valid']\n\n# Some funky cross-linked models for testing a couple of infinite recursion\n# cases.\n\n\nclass X(models.Model):\n    y = models.ForeignKey('Y', models.CASCADE)\n\n\nclass Y(models.Model):\n    x1 = models.ForeignKey(X, models.CASCADE, related_name='y1')\n\n# Some models with a cycle in the default ordering. This would be bad if we\n# didn't catch the infinite loop.\n\n\nclass LoopX(models.Model):\n    y = models.ForeignKey('LoopY', models.CASCADE)\n\n    class Meta:\n        ordering = ['y']\n\n\nclass LoopY(models.Model):\n    x = models.ForeignKey(LoopX, models.CASCADE)\n\n    class Meta:\n        ordering = ['x']\n\n\nclass LoopZ(models.Model):\n    z = models.ForeignKey('self', models.CASCADE)\n\n    class Meta:\n        ordering = ['z']\n\n\n# A model and custom default manager combination.\n\n\nclass CustomManager(models.Manager):\n    def get_queryset(self):\n        qs = super().get_queryset()\n        return qs.filter(public=True, tag__name='t1')\n\n\nclass ManagedModel(models.Model):\n    data = models.CharField(max_length=10)\n    tag = models.ForeignKey(Tag, models.CASCADE)\n    public = models.BooleanField(default=True)\n\n    objects = CustomManager()\n    normal_manager = models.Manager()\n\n    def __str__(self):\n        return self.data\n\n# An inter-related setup with multiple paths from Child to Detail.\n\n\nclass Detail(models.Model):\n    data = models.CharField(max_length=10)\n\n\nclass MemberManager(models.Manager):\n    def get_queryset(self):\n        return super().get_queryset().select_related(\"details\")\n\n\nclass Member(models.Model):\n    name = models.CharField(max_length=10)\n    details = models.OneToOneField(Detail, models.CASCADE, primary_key=True)\n\n    objects = MemberManager()\n\n\nclass Child(models.Model):\n    person = models.OneToOneField(Member, models.CASCADE, primary_key=True)\n    parent = models.ForeignKey(Member, models.CASCADE, related_name=\"children\")\n\n# Custom primary keys interfered with ordering in the past.\n\n\nclass CustomPk(models.Model):\n    name = models.CharField(max_length=10, primary_key=True)\n    extra = models.CharField(max_length=10)\n\n    class Meta:\n        ordering = ['name', 'extra']\n\n\nclass Related(models.Model):\n    custom = models.ForeignKey(CustomPk, models.CASCADE, null=True)\n\n\nclass CustomPkTag(models.Model):\n    id = models.CharField(max_length=20, primary_key=True)\n    custom_pk = models.ManyToManyField(CustomPk)\n    tag = models.CharField(max_length=20)\n\n# An inter-related setup with a model subclass that has a nullable\n# path to another model, and a return path from that model.\n\n\nclass Celebrity(models.Model):\n    name = models.CharField(\"Name\", max_length=20)\n    greatest_fan = models.ForeignKey(\"Fan\", models.SET_NULL, null=True, unique=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass TvChef(Celebrity):\n    pass\n\n\nclass Fan(models.Model):\n    fan_of = models.ForeignKey(Celebrity, models.CASCADE)\n\n# Multiple foreign keys\n\n\nclass LeafA(models.Model):\n    data = models.CharField(max_length=10)\n\n    def __str__(self):\n        return self.data\n\n\nclass LeafB(models.Model):\n    data = models.CharField(max_length=10)\n\n\nclass Join(models.Model):\n    a = models.ForeignKey(LeafA, models.CASCADE)\n    b = models.ForeignKey(LeafB, models.CASCADE)\n\n\nclass ReservedName(models.Model):\n    name = models.CharField(max_length=20)\n    order = models.IntegerField()\n\n    def __str__(self):\n        return self.name\n\n# A simpler shared-foreign-key setup that can expose some problems.\n\n\nclass SharedConnection(models.Model):\n    data = models.CharField(max_length=10)\n\n    def __str__(self):\n        return self.data\n\n\nclass PointerA(models.Model):\n    connection = models.ForeignKey(SharedConnection, models.CASCADE)\n\n\nclass PointerB(models.Model):\n    connection = models.ForeignKey(SharedConnection, models.CASCADE)\n\n# Multi-layer ordering\n\n\nclass SingleObject(models.Model):\n    name = models.CharField(max_length=10)\n\n    class Meta:\n        ordering = ['name']\n\n    def __str__(self):\n        return self.name\n\n\nclass RelatedObject(models.Model):\n    single = models.ForeignKey(SingleObject, models.SET_NULL, null=True)\n    f = models.IntegerField(null=True)\n\n    class Meta:\n        ordering = ['single']\n\n\nclass Plaything(models.Model):\n    name = models.CharField(max_length=10)\n    others = models.ForeignKey(RelatedObject, models.SET_NULL, null=True)\n\n    class Meta:\n        ordering = ['others']\n\n    def __str__(self):\n        return self.name\n\n\nclass Article(models.Model):\n    name = models.CharField(max_length=20)\n    created = models.DateTimeField()\n\n    def __str__(self):\n        return self.name\n\n\nclass Food(models.Model):\n    name = models.CharField(max_length=20, unique=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass Eaten(models.Model):\n    food = models.ForeignKey(Food, models.SET_NULL, to_field=\"name\", null=True)\n    meal = models.CharField(max_length=20)\n\n    def __str__(self):\n        return \"%s at %s\" % (self.food, self.meal)\n\n\nclass Node(models.Model):\n    num = models.IntegerField(unique=True)\n    parent = models.ForeignKey(\"self\", models.SET_NULL, to_field=\"num\", null=True)\n\n    def __str__(self):\n        return \"%s\" % self.num\n\n# Bug #12252\n\n\nclass ObjectA(models.Model):\n    name = models.CharField(max_length=50)\n\n    def __str__(self):\n        return self.name\n\n    def __iter__(self):\n        # Ticket #23721\n        assert False, 'type checking should happen without calling model __iter__'\n\n\nclass ProxyObjectA(ObjectA):\n    class Meta:\n        proxy = True\n\n\nclass ChildObjectA(ObjectA):\n    pass\n\n\nclass ObjectB(models.Model):\n    name = models.CharField(max_length=50)\n    objecta = models.ForeignKey(ObjectA, models.CASCADE)\n    num = models.PositiveSmallIntegerField()\n\n    def __str__(self):\n        return self.name\n\n\nclass ProxyObjectB(ObjectB):\n    class Meta:\n        proxy = True\n\n\nclass ObjectC(models.Model):\n    name = models.CharField(max_length=50)\n    objecta = models.ForeignKey(ObjectA, models.SET_NULL, null=True)\n    objectb = models.ForeignKey(ObjectB, models.SET_NULL, null=True)\n    childobjecta = models.ForeignKey(ChildObjectA, models.SET_NULL, null=True, related_name='ca_pk')\n\n    def __str__(self):\n        return self.name\n\n\nclass SimpleCategory(models.Model):\n    name = models.CharField(max_length=15)\n\n    def __str__(self):\n        return self.name\n\n\nclass SpecialCategory(SimpleCategory):\n    special_name = models.CharField(max_length=15)\n\n    def __str__(self):\n        return self.name + \" \" + self.special_name\n\n\nclass CategoryItem(models.Model):\n    category = models.ForeignKey(SimpleCategory, models.CASCADE)\n\n    def __str__(self):\n        return \"category item: \" + str(self.category)\n\n\nclass MixedCaseFieldCategoryItem(models.Model):\n    CaTeGoRy = models.ForeignKey(SimpleCategory, models.CASCADE)\n\n\nclass MixedCaseDbColumnCategoryItem(models.Model):\n    category = models.ForeignKey(SimpleCategory, models.CASCADE, db_column='CaTeGoRy_Id')\n\n\nclass OneToOneCategory(models.Model):\n    new_name = models.CharField(max_length=15)\n    category = models.OneToOneField(SimpleCategory, models.CASCADE)\n\n    def __str__(self):\n        return \"one2one \" + self.new_name\n\n\nclass CategoryRelationship(models.Model):\n    first = models.ForeignKey(SimpleCategory, models.CASCADE, related_name='first_rel')\n    second = models.ForeignKey(SimpleCategory, models.CASCADE, related_name='second_rel')\n\n\nclass CommonMixedCaseForeignKeys(models.Model):\n    category = models.ForeignKey(CategoryItem, models.CASCADE)\n    mixed_case_field_category = models.ForeignKey(MixedCaseFieldCategoryItem, models.CASCADE)\n    mixed_case_db_column_category = models.ForeignKey(MixedCaseDbColumnCategoryItem, models.CASCADE)\n\n\nclass NullableName(models.Model):\n    name = models.CharField(max_length=20, null=True)\n\n    class Meta:\n        ordering = ['id']\n\n\nclass ModelD(models.Model):\n    name = models.TextField()\n\n\nclass ModelC(models.Model):\n    name = models.TextField()\n\n\nclass ModelB(models.Model):\n    name = models.TextField()\n    c = models.ForeignKey(ModelC, models.CASCADE)\n\n\nclass ModelA(models.Model):\n    name = models.TextField()\n    b = models.ForeignKey(ModelB, models.SET_NULL, null=True)\n    d = models.ForeignKey(ModelD, models.CASCADE)\n\n\nclass Job(models.Model):\n    name = models.CharField(max_length=20, unique=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass JobResponsibilities(models.Model):\n    job = models.ForeignKey(Job, models.CASCADE, to_field='name')\n    responsibility = models.ForeignKey('Responsibility', models.CASCADE, to_field='description')\n\n\nclass Responsibility(models.Model):\n    description = models.CharField(max_length=20, unique=True)\n    jobs = models.ManyToManyField(Job, through=JobResponsibilities,\n                                  related_name='responsibilities')\n\n    def __str__(self):\n        return self.description\n\n# Models for disjunction join promotion low level testing.\n\n\nclass FK1(models.Model):\n    f1 = models.TextField()\n    f2 = models.TextField()\n\n\nclass FK2(models.Model):\n    f1 = models.TextField()\n    f2 = models.TextField()\n\n\nclass FK3(models.Model):\n    f1 = models.TextField()\n    f2 = models.TextField()\n\n\nclass BaseA(models.Model):\n    a = models.ForeignKey(FK1, models.SET_NULL, null=True)\n    b = models.ForeignKey(FK2, models.SET_NULL, null=True)\n    c = models.ForeignKey(FK3, models.SET_NULL, null=True)\n\n\nclass Identifier(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\n\nclass Program(models.Model):\n    identifier = models.OneToOneField(Identifier, models.CASCADE)\n\n\nclass Channel(models.Model):\n    programs = models.ManyToManyField(Program)\n    identifier = models.OneToOneField(Identifier, models.CASCADE)\n\n\nclass Book(models.Model):\n    title = models.TextField()\n    chapter = models.ForeignKey('Chapter', models.CASCADE)\n\n\nclass Chapter(models.Model):\n    title = models.TextField()\n    paragraph = models.ForeignKey('Paragraph', models.CASCADE)\n\n\nclass Paragraph(models.Model):\n    text = models.TextField()\n    page = models.ManyToManyField('Page')\n\n\nclass Page(models.Model):\n    text = models.TextField()\n\n\nclass MyObject(models.Model):\n    parent = models.ForeignKey('self', models.SET_NULL, null=True, blank=True, related_name='children')\n    data = models.CharField(max_length=100)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n# Models for #17600 regressions\n\n\nclass Order(models.Model):\n    id = models.IntegerField(primary_key=True)\n\n    class Meta:\n        ordering = ('pk',)\n\n    def __str__(self):\n        return '%s' % self.pk\n\n\nclass OrderItem(models.Model):\n    order = models.ForeignKey(Order, models.CASCADE, related_name='items')\n    status = models.IntegerField()\n\n    class Meta:\n        ordering = ('pk',)\n\n    def __str__(self):\n        return '%s' % self.pk\n\n\nclass BaseUser(models.Model):\n    pass\n\n\nclass Task(models.Model):\n    title = models.CharField(max_length=10)\n    owner = models.ForeignKey(BaseUser, models.CASCADE, related_name='owner')\n    creator = models.ForeignKey(BaseUser, models.CASCADE, related_name='creator')\n\n    def __str__(self):\n        return self.title\n\n\nclass Staff(models.Model):\n    name = models.CharField(max_length=10)\n\n    def __str__(self):\n        return self.name\n\n\nclass StaffUser(BaseUser):\n    staff = models.OneToOneField(Staff, models.CASCADE, related_name='user')\n\n    def __str__(self):\n        return self.staff\n\n\nclass Ticket21203Parent(models.Model):\n    parentid = models.AutoField(primary_key=True)\n    parent_bool = models.BooleanField(default=True)\n    created = models.DateTimeField(auto_now=True)\n\n\nclass Ticket21203Child(models.Model):\n    childid = models.AutoField(primary_key=True)\n    parent = models.ForeignKey(Ticket21203Parent, models.CASCADE)\n\n\nclass Person(models.Model):\n    name = models.CharField(max_length=128)\n\n\nclass Company(models.Model):\n    name = models.CharField(max_length=128)\n    employees = models.ManyToManyField(Person, related_name='employers', through='Employment')\n\n    def __str__(self):\n        return self.name\n\n\nclass Employment(models.Model):\n    employer = models.ForeignKey(Company, models.CASCADE)\n    employee = models.ForeignKey(Person, models.CASCADE)\n    title = models.CharField(max_length=128)\n\n\nclass School(models.Model):\n    pass\n\n\nclass Student(models.Model):\n    school = models.ForeignKey(School, models.CASCADE)\n\n\nclass Classroom(models.Model):\n    name = models.CharField(max_length=20)\n    has_blackboard = models.NullBooleanField()\n    school = models.ForeignKey(School, models.CASCADE)\n    students = models.ManyToManyField(Student, related_name='classroom')\n\n\nclass Teacher(models.Model):\n    schools = models.ManyToManyField(School)\n    friends = models.ManyToManyField('self')\n\n\nclass Ticket23605AParent(models.Model):\n    pass\n\n\nclass Ticket23605A(Ticket23605AParent):\n    pass\n\n\nclass Ticket23605B(models.Model):\n    modela_fk = models.ForeignKey(Ticket23605A, models.CASCADE)\n    modelc_fk = models.ForeignKey(\"Ticket23605C\", models.CASCADE)\n    field_b0 = models.IntegerField(null=True)\n    field_b1 = models.BooleanField(default=False)\n\n\nclass Ticket23605C(models.Model):\n    field_c0 = models.FloatField()\n\n\n# db_table names have capital letters to ensure they are quoted in queries.\nclass Individual(models.Model):\n    alive = models.BooleanField()\n\n    class Meta:\n        db_table = 'Individual'\n\n\nclass RelatedIndividual(models.Model):\n    related = models.ForeignKey(Individual, models.CASCADE, related_name='related_individual')\n\n    class Meta:\n        db_table = 'RelatedIndividual'\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "ff3cb51c08a9ce5aab77c0d7b047f2b2", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/queries/models.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}