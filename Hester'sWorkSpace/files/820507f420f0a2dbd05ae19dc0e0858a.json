{"author": "django", "code": "from operator import attrgetter\n\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.test.utils import isolate_apps\n\nfrom .base_tests import BaseOrderWithRespectToTests\nfrom .models import Answer, Dimension, Entity, Post, Question\n\n\nclass OrderWithRespectToBaseTests(BaseOrderWithRespectToTests, TestCase):\n    Answer = Answer\n    Post = Post\n    Question = Question\n\n\nclass OrderWithRespectToTests(TestCase):\n\n    @isolate_apps('order_with_respect_to')\n    def test_duplicate_order_field(self):\n        class Bar(models.Model):\n            class Meta:\n                app_label = 'order_with_respect_to'\n\n        class Foo(models.Model):\n            bar = models.ForeignKey(Bar, models.CASCADE)\n            order = models.OrderWrt()\n\n            class Meta:\n                order_with_respect_to = 'bar'\n                app_label = 'order_with_respect_to'\n\n        count = 0\n        for field in Foo._meta.local_fields:\n            if isinstance(field, models.OrderWrt):\n                count += 1\n\n        self.assertEqual(count, 1)\n\n\nclass TestOrderWithRespectToOneToOnePK(TestCase):\n    def test_set_order(self):\n        e = Entity.objects.create()\n        d = Dimension.objects.create(entity=e)\n        c1 = d.component_set.create()\n        c2 = d.component_set.create()\n        d.set_component_order([c1.id, c2.id])\n        self.assertQuerysetEqual(d.component_set.all(), [c1.id, c2.id], attrgetter('pk'))\n", "comments": "", "content": "from operator import attrgetter\n\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.test.utils import isolate_apps\n\nfrom .base_tests import BaseOrderWithRespectToTests\nfrom .models import Answer, Dimension, Entity, Post, Question\n\n\nclass OrderWithRespectToBaseTests(BaseOrderWithRespectToTests, TestCase):\n    Answer = Answer\n    Post = Post\n    Question = Question\n\n\nclass OrderWithRespectToTests(TestCase):\n\n    @isolate_apps('order_with_respect_to')\n    def test_duplicate_order_field(self):\n        class Bar(models.Model):\n            class Meta:\n                app_label = 'order_with_respect_to'\n\n        class Foo(models.Model):\n            bar = models.ForeignKey(Bar, models.CASCADE)\n            order = models.OrderWrt()\n\n            class Meta:\n                order_with_respect_to = 'bar'\n                app_label = 'order_with_respect_to'\n\n        count = 0\n        for field in Foo._meta.local_fields:\n            if isinstance(field, models.OrderWrt):\n                count += 1\n\n        self.assertEqual(count, 1)\n\n\nclass TestOrderWithRespectToOneToOnePK(TestCase):\n    def test_set_order(self):\n        e = Entity.objects.create()\n        d = Dimension.objects.create(entity=e)\n        c1 = d.component_set.create()\n        c2 = d.component_set.create()\n        d.set_component_order([c1.id, c2.id])\n        self.assertQuerysetEqual(d.component_set.all(), [c1.id, c2.id], attrgetter('pk'))\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "820507f420f0a2dbd05ae19dc0e0858a", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/order_with_respect_to/tests.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}