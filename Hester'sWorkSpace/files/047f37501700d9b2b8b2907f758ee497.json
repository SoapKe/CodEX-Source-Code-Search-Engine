{"author": "apache", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nfrom flask_appbuilder.fieldwidgets import BS3TextFieldWidget\nfrom flask_appbuilder.forms import DynamicForm\nfrom flask_babel import lazy_gettext as _\nfrom flask_wtf.file import FileAllowed, FileField, FileRequired\nfrom wtforms import (\n    BooleanField, IntegerField, SelectField, StringField)\nfrom wtforms.ext.sqlalchemy.fields import QuerySelectField\nfrom wtforms.validators import DataRequired, NumberRange, Optional\n\nfrom superset import app, db\nfrom superset.models import core as models\n\nconfig = app.config\n\n\nclass CsvToDatabaseForm(DynamicForm):\n    \n    def all_db_items():\n        return db.session.query(models.Database)\n\n    name = StringField(\n        _('Table Name'),\n        description=_('Name of table to be created from csv data.'),\n        validators=[DataRequired()],\n        widget=BS3TextFieldWidget())\n    csv_file = FileField(\n        _('CSV File'),\n        description=_('Select a CSV file to be uploaded to a database.'),\n        validators=[\n            FileRequired(), FileAllowed(['csv'], _('CSV Files Only!'))])\n    con = QuerySelectField(\n        query_factory=all_db_items,\n        get_pk=lambda a: a.id, get_label=lambda a: a.database_name)\n    sep = StringField(\n        _('Delimiter'),\n        description=_('Delimiter used by CSV file (for whitespace use \\s+).'),\n        validators=[DataRequired()],\n        widget=BS3TextFieldWidget())\n    if_exists = SelectField(\n        _('Table Exists'),\n        description=_(\n            'If table exists do one of the following: '\n            'Fail (do nothing), Replace (drop and recreate table) '\n            'or Append (insert data).'),\n        choices=[\n            ('fail', _('Fail')), ('replace', _('Replace')),\n            ('append', _('Append'))],\n        validators=[DataRequired()])\n    schema = StringField(\n        _('Schema'),\n        description=_('Specify a schema (if database flavour supports this).'),\n        validators=[Optional()],\n        widget=BS3TextFieldWidget(),\n        filters=[lambda x: x or None])\n    header = IntegerField(\n        _('Header Row'),\n        description=_(\n            'Row containing the headers to use as '\n            'column names (0 is first line of data). '\n            'Leave empty if there is no header row.'),\n        validators=[Optional()],\n        widget=BS3TextFieldWidget(),\n        filters=[lambda x: x or None])\n    index_col = IntegerField(\n        _('Index Column'),\n        description=_(\n            'Column to use as the row labels of the '\n            'dataframe. Leave empty if no index column.'),\n        validators=[Optional(), NumberRange(0, 1E+20)],\n        widget=BS3TextFieldWidget(),\n        filters=[lambda x: x or None])\n    mangle_dupe_cols = BooleanField(\n        _('Mangle Duplicate Columns'),\n        description=_('Specify duplicate columns as \"X.0, X.1\".'))\n    skipinitialspace = BooleanField(\n        _('Skip Initial Space'),\n        description=_('Skip spaces after delimiter.'))\n    skiprows = IntegerField(\n        _('Skip Rows'),\n        description=_('Number of rows to skip at start of file.'),\n        validators=[Optional(), NumberRange(0, 1E+20)],\n        widget=BS3TextFieldWidget(),\n        filters=[lambda x: x or None])\n    nrows = IntegerField(\n        _('Rows to Read'),\n        description=_('Number of rows of file to read.'),\n        validators=[Optional(), NumberRange(0, 1E+20)],\n        widget=BS3TextFieldWidget(),\n        filters=[lambda x: x or None])\n    skip_blank_lines = BooleanField(\n        _('Skip Blank Lines'),\n        description=_(\n            'Skip blank lines rather than interpreting them '\n            'as NaN values.'))\n    parse_dates = BooleanField(\n        _('Parse Dates'),\n        description=_('Parse date values.'))\n    infer_datetime_format = BooleanField(\n        _('Infer Datetime Format'),\n        description=_(\n            'Use Pandas to interpret the datetime format '\n            'automatically.'))\n    decimal = StringField(\n        _('Decimal Character'),\n        description=_('Character to interpret as decimal point.'),\n        validators=[Optional()],\n        widget=BS3TextFieldWidget(),\n        filters=[lambda x: x or '.'])\n    index = BooleanField(\n        _('Dataframe Index'),\n        description=_('Write dataframe index as a column.'))\n    index_label = StringField(\n        _('Column Label(s)'),\n        description=_(\n            'Column label for index column(s). If None is given '\n            'and Dataframe Index is True, Index Names are used.'),\n        validators=[Optional()],\n        widget=BS3TextFieldWidget(),\n        filters=[lambda x: x or None])\n", "comments": "   contains logic create cohesive forms explore view           coding  utf 8        pylint  disable e0211 ", "content": "# -*- coding: utf-8 -*-\n\"\"\"Contains the logic to create cohesive forms on the explore view\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nfrom flask_appbuilder.fieldwidgets import BS3TextFieldWidget\nfrom flask_appbuilder.forms import DynamicForm\nfrom flask_babel import lazy_gettext as _\nfrom flask_wtf.file import FileAllowed, FileField, FileRequired\nfrom wtforms import (\n    BooleanField, IntegerField, SelectField, StringField)\nfrom wtforms.ext.sqlalchemy.fields import QuerySelectField\nfrom wtforms.validators import DataRequired, NumberRange, Optional\n\nfrom superset import app, db\nfrom superset.models import core as models\n\nconfig = app.config\n\n\nclass CsvToDatabaseForm(DynamicForm):\n    # pylint: disable=E0211\n    def all_db_items():\n        return db.session.query(models.Database)\n\n    name = StringField(\n        _('Table Name'),\n        description=_('Name of table to be created from csv data.'),\n        validators=[DataRequired()],\n        widget=BS3TextFieldWidget())\n    csv_file = FileField(\n        _('CSV File'),\n        description=_('Select a CSV file to be uploaded to a database.'),\n        validators=[\n            FileRequired(), FileAllowed(['csv'], _('CSV Files Only!'))])\n    con = QuerySelectField(\n        query_factory=all_db_items,\n        get_pk=lambda a: a.id, get_label=lambda a: a.database_name)\n    sep = StringField(\n        _('Delimiter'),\n        description=_('Delimiter used by CSV file (for whitespace use \\s+).'),\n        validators=[DataRequired()],\n        widget=BS3TextFieldWidget())\n    if_exists = SelectField(\n        _('Table Exists'),\n        description=_(\n            'If table exists do one of the following: '\n            'Fail (do nothing), Replace (drop and recreate table) '\n            'or Append (insert data).'),\n        choices=[\n            ('fail', _('Fail')), ('replace', _('Replace')),\n            ('append', _('Append'))],\n        validators=[DataRequired()])\n    schema = StringField(\n        _('Schema'),\n        description=_('Specify a schema (if database flavour supports this).'),\n        validators=[Optional()],\n        widget=BS3TextFieldWidget(),\n        filters=[lambda x: x or None])\n    header = IntegerField(\n        _('Header Row'),\n        description=_(\n            'Row containing the headers to use as '\n            'column names (0 is first line of data). '\n            'Leave empty if there is no header row.'),\n        validators=[Optional()],\n        widget=BS3TextFieldWidget(),\n        filters=[lambda x: x or None])\n    index_col = IntegerField(\n        _('Index Column'),\n        description=_(\n            'Column to use as the row labels of the '\n            'dataframe. Leave empty if no index column.'),\n        validators=[Optional(), NumberRange(0, 1E+20)],\n        widget=BS3TextFieldWidget(),\n        filters=[lambda x: x or None])\n    mangle_dupe_cols = BooleanField(\n        _('Mangle Duplicate Columns'),\n        description=_('Specify duplicate columns as \"X.0, X.1\".'))\n    skipinitialspace = BooleanField(\n        _('Skip Initial Space'),\n        description=_('Skip spaces after delimiter.'))\n    skiprows = IntegerField(\n        _('Skip Rows'),\n        description=_('Number of rows to skip at start of file.'),\n        validators=[Optional(), NumberRange(0, 1E+20)],\n        widget=BS3TextFieldWidget(),\n        filters=[lambda x: x or None])\n    nrows = IntegerField(\n        _('Rows to Read'),\n        description=_('Number of rows of file to read.'),\n        validators=[Optional(), NumberRange(0, 1E+20)],\n        widget=BS3TextFieldWidget(),\n        filters=[lambda x: x or None])\n    skip_blank_lines = BooleanField(\n        _('Skip Blank Lines'),\n        description=_(\n            'Skip blank lines rather than interpreting them '\n            'as NaN values.'))\n    parse_dates = BooleanField(\n        _('Parse Dates'),\n        description=_('Parse date values.'))\n    infer_datetime_format = BooleanField(\n        _('Infer Datetime Format'),\n        description=_(\n            'Use Pandas to interpret the datetime format '\n            'automatically.'))\n    decimal = StringField(\n        _('Decimal Character'),\n        description=_('Character to interpret as decimal point.'),\n        validators=[Optional()],\n        widget=BS3TextFieldWidget(),\n        filters=[lambda x: x or '.'])\n    index = BooleanField(\n        _('Dataframe Index'),\n        description=_('Write dataframe index as a column.'))\n    index_label = StringField(\n        _('Column Label(s)'),\n        description=_(\n            'Column label for index column(s). If None is given '\n            'and Dataframe Index is True, Index Names are used.'),\n        validators=[Optional()],\n        widget=BS3TextFieldWidget(),\n        filters=[lambda x: x or None])\n", "description": "Apache Superset (incubating) is a modern, enterprise-ready business intelligence web application", "file_name": "forms.py", "id": "047f37501700d9b2b8b2907f758ee497", "language": "Python", "project_name": "incubator-superset", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/apache-incubator-superset/apache-incubator-superset-95a9b04/superset/forms.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:41:03Z", "url": "https://github.com/apache/incubator-superset", "wiki": false}