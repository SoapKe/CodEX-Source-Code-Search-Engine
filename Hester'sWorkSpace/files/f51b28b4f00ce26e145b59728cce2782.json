{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_static_route import ApiParameters\n    from library.bigip_static_route import ModuleParameters\n    from library.bigip_static_route import ModuleManager\n    from library.bigip_static_route import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_static_route import ApiParameters\n        from ansible.modules.network.f5.bigip_static_route import ModuleParameters\n        from ansible.modules.network.f5.bigip_static_route import ModuleManager\n        from ansible.modules.network.f5.bigip_static_route import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            vlan=\"foo\",\n            gateway_address=\"10.10.10.10\"\n        )\n        p = ModuleParameters(params=args)\n        assert p.vlan == '/Common/foo'\n        assert p.gateway_address == '10.10.10.10'\n\n    def test_api_parameters(self):\n        args = dict(\n            tmInterface=\"foo\",\n            gw=\"10.10.10.10\"\n        )\n        p = ApiParameters(params=args)\n        assert p.vlan == 'foo'\n        assert p.gateway_address == '10.10.10.10'\n\n    def test_reject_parameter_types(self):\n         boolean true\n        args = dict(reject=True)\n        p = ModuleParameters(params=args)\n        assert p.reject is True\n\n         boolean false\n        args = dict(reject=False)\n        p = ModuleParameters(params=args)\n        assert p.reject is None\n\n         string\n        args = dict(reject=\"yes\")\n        p = ModuleParameters(params=args)\n        assert p.reject is True\n\n         integer\n        args = dict(reject=1)\n        p = ModuleParameters(params=args)\n        assert p.reject is True\n\n         none\n        args = dict(reject=None)\n        p = ModuleParameters(params=args)\n        assert p.reject is None\n\n    def test_destination_parameter_types(self):\n         cidr address\n        args = dict(\n            destination=\"10.10.10.10\",\n            netmask='32'\n        )\n        p = ModuleParameters(params=args)\n        assert p.destination == '10.10.10.10/32'\n\n         netmask\n        args = dict(\n            destination=\"10.10.10.10\",\n            netmask=\"255.255.255.255\"\n        )\n        p = ModuleParameters(params=args)\n        assert p.destination == '10.10.10.10/32'\n\n    def test_vlan_with_partition(self):\n        args = dict(\n            vlan=\"/Common/foo\",\n            gateway_address=\"10.10.10.10\"\n        )\n        p = ModuleParameters(params=args)\n        assert p.vlan == '/Common/foo'\n        assert p.gateway_address == '10.10.10.10'\n\n    def test_api_route_domain(self):\n        args = dict(\n            destination=\"1.1.1.1/32%2\"\n        )\n        p = ApiParameters(params=args)\n        assert p.route_domain == 2\n\n        args = dict(\n            destination=\"2700:bc00:1f10:101::6/64%2\"\n        )\n        p = ApiParameters(params=args)\n        assert p.route_domain == 2\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_blackhole(self, *args):\n        set_module_args(dict(\n            name='test-route',\n            password='admin',\n            server='localhost',\n            user='admin',\n            state='present',\n            destination='10.10.10.10',\n            netmask='255.255.255.255',\n            reject='yes'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            mutually_exclusive=self.spec.mutually_exclusive,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.exists = Mock(return_value=False)\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n\n    def test_create_route_to_pool(self, *args):\n        set_module_args(dict(\n            name='test-route',\n            password='admin',\n            server='localhost',\n            user='admin',\n            state='present',\n            destination='10.10.10.10',\n            netmask='255.255.255.255',\n            pool=\"test-pool\"\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            mutually_exclusive=self.spec.mutually_exclusive,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.exists = Mock(return_value=False)\n        mm.create_on_device = Mock(return_value=True)\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['pool'] == 'test-pool'\n\n    def test_create_route_to_vlan(self, *args):\n        set_module_args(dict(\n            name='test-route',\n            password='admin',\n            server='localhost',\n            user='admin',\n            state='present',\n            destination='10.10.10.10',\n            netmask='255.255.255.255',\n            vlan=\"test-vlan\"\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            mutually_exclusive=self.spec.mutually_exclusive,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.exists = Mock(return_value=False)\n        mm.create_on_device = Mock(return_value=True)\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['vlan'] == '/Common/test-vlan'\n\n    def test_update_description(self, *args):\n        set_module_args(dict(\n            name='test-route',\n            password='admin',\n            server='localhost',\n            user='admin',\n            state='present',\n            description='foo description'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            mutually_exclusive=self.spec.mutually_exclusive,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        current = ApiParameters(params=load_fixture('load_net_route_description.json'))\n        mm.exists = Mock(return_value=True)\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['description'] == 'foo description'\n\n    def test_update_description_idempotent(self, *args):\n        set_module_args(dict(\n            name='test-route',\n            password='admin',\n            server='localhost',\n            user='admin',\n            state='present',\n            description='asdasd'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            mutually_exclusive=self.spec.mutually_exclusive,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        current = ApiParameters(params=load_fixture('load_net_route_description.json'))\n        mm.exists = Mock(return_value=True)\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        results = mm.exec_module()\n\n         There is no assert for the description, because it should\n         not have changed\n        assert results['changed'] is False\n\n    def test_delete(self, *args):\n        set_module_args(dict(\n            name='test-route',\n            password='admin',\n            server='localhost',\n            user='admin',\n            state='absent'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            mutually_exclusive=self.spec.mutually_exclusive,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.exists = Mock(side_effect=[True, False])\n        mm.remove_from_device = Mock(return_value=True)\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert 'description' not in results\n\n    def test_invalid_unknown_params(self, *args):\n        set_module_args(dict(\n            name='test-route',\n            password='admin',\n            server='localhost',\n            user='admin',\n            state='present',\n            foo=\"bar\"\n        ))\n        with patch('ansible.module_utils.f5_utils.AnsibleModule.fail_json') as mo:\n            mo.return_value = True\n            AnsibleModule(\n                argument_spec=self.spec.argument_spec,\n                mutually_exclusive=self.spec.mutually_exclusive,\n                supports_check_mode=self.spec.supports_check_mode\n            )\n            assert mo.call_count == 1\n\n    def test_create_with_route_domain(self, *args):\n        set_module_args(dict(\n            name='test-route',\n            password='admin',\n            server='localhost',\n            user='admin',\n            state='present',\n            destination='10.10.10.10',\n            netmask='255.255.255.255',\n            route_domain=1,\n            reject='yes'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            mutually_exclusive=self.spec.mutually_exclusive,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.exists = Mock(return_value=False)\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n        assert results['route_domain'] == 1\n        assert results['destination'] == '10.10.10.10%1/32'\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    boolean true    boolean false    string    integer    none    cidr address    netmask    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    there assert description     changed    override methods force specific logic module happen    override methods force specific logic module happen ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_static_route import ApiParameters\n    from library.bigip_static_route import ModuleParameters\n    from library.bigip_static_route import ModuleManager\n    from library.bigip_static_route import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_static_route import ApiParameters\n        from ansible.modules.network.f5.bigip_static_route import ModuleParameters\n        from ansible.modules.network.f5.bigip_static_route import ModuleManager\n        from ansible.modules.network.f5.bigip_static_route import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            vlan=\"foo\",\n            gateway_address=\"10.10.10.10\"\n        )\n        p = ModuleParameters(params=args)\n        assert p.vlan == '/Common/foo'\n        assert p.gateway_address == '10.10.10.10'\n\n    def test_api_parameters(self):\n        args = dict(\n            tmInterface=\"foo\",\n            gw=\"10.10.10.10\"\n        )\n        p = ApiParameters(params=args)\n        assert p.vlan == 'foo'\n        assert p.gateway_address == '10.10.10.10'\n\n    def test_reject_parameter_types(self):\n        # boolean true\n        args = dict(reject=True)\n        p = ModuleParameters(params=args)\n        assert p.reject is True\n\n        # boolean false\n        args = dict(reject=False)\n        p = ModuleParameters(params=args)\n        assert p.reject is None\n\n        # string\n        args = dict(reject=\"yes\")\n        p = ModuleParameters(params=args)\n        assert p.reject is True\n\n        # integer\n        args = dict(reject=1)\n        p = ModuleParameters(params=args)\n        assert p.reject is True\n\n        # none\n        args = dict(reject=None)\n        p = ModuleParameters(params=args)\n        assert p.reject is None\n\n    def test_destination_parameter_types(self):\n        # cidr address\n        args = dict(\n            destination=\"10.10.10.10\",\n            netmask='32'\n        )\n        p = ModuleParameters(params=args)\n        assert p.destination == '10.10.10.10/32'\n\n        # netmask\n        args = dict(\n            destination=\"10.10.10.10\",\n            netmask=\"255.255.255.255\"\n        )\n        p = ModuleParameters(params=args)\n        assert p.destination == '10.10.10.10/32'\n\n    def test_vlan_with_partition(self):\n        args = dict(\n            vlan=\"/Common/foo\",\n            gateway_address=\"10.10.10.10\"\n        )\n        p = ModuleParameters(params=args)\n        assert p.vlan == '/Common/foo'\n        assert p.gateway_address == '10.10.10.10'\n\n    def test_api_route_domain(self):\n        args = dict(\n            destination=\"1.1.1.1/32%2\"\n        )\n        p = ApiParameters(params=args)\n        assert p.route_domain == 2\n\n        args = dict(\n            destination=\"2700:bc00:1f10:101::6/64%2\"\n        )\n        p = ApiParameters(params=args)\n        assert p.route_domain == 2\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_blackhole(self, *args):\n        set_module_args(dict(\n            name='test-route',\n            password='admin',\n            server='localhost',\n            user='admin',\n            state='present',\n            destination='10.10.10.10',\n            netmask='255.255.255.255',\n            reject='yes'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            mutually_exclusive=self.spec.mutually_exclusive,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.exists = Mock(return_value=False)\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n\n    def test_create_route_to_pool(self, *args):\n        set_module_args(dict(\n            name='test-route',\n            password='admin',\n            server='localhost',\n            user='admin',\n            state='present',\n            destination='10.10.10.10',\n            netmask='255.255.255.255',\n            pool=\"test-pool\"\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            mutually_exclusive=self.spec.mutually_exclusive,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.exists = Mock(return_value=False)\n        mm.create_on_device = Mock(return_value=True)\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['pool'] == 'test-pool'\n\n    def test_create_route_to_vlan(self, *args):\n        set_module_args(dict(\n            name='test-route',\n            password='admin',\n            server='localhost',\n            user='admin',\n            state='present',\n            destination='10.10.10.10',\n            netmask='255.255.255.255',\n            vlan=\"test-vlan\"\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            mutually_exclusive=self.spec.mutually_exclusive,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.exists = Mock(return_value=False)\n        mm.create_on_device = Mock(return_value=True)\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['vlan'] == '/Common/test-vlan'\n\n    def test_update_description(self, *args):\n        set_module_args(dict(\n            name='test-route',\n            password='admin',\n            server='localhost',\n            user='admin',\n            state='present',\n            description='foo description'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            mutually_exclusive=self.spec.mutually_exclusive,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        current = ApiParameters(params=load_fixture('load_net_route_description.json'))\n        mm.exists = Mock(return_value=True)\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['description'] == 'foo description'\n\n    def test_update_description_idempotent(self, *args):\n        set_module_args(dict(\n            name='test-route',\n            password='admin',\n            server='localhost',\n            user='admin',\n            state='present',\n            description='asdasd'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            mutually_exclusive=self.spec.mutually_exclusive,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        current = ApiParameters(params=load_fixture('load_net_route_description.json'))\n        mm.exists = Mock(return_value=True)\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        results = mm.exec_module()\n\n        # There is no assert for the description, because it should\n        # not have changed\n        assert results['changed'] is False\n\n    def test_delete(self, *args):\n        set_module_args(dict(\n            name='test-route',\n            password='admin',\n            server='localhost',\n            user='admin',\n            state='absent'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            mutually_exclusive=self.spec.mutually_exclusive,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.exists = Mock(side_effect=[True, False])\n        mm.remove_from_device = Mock(return_value=True)\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert 'description' not in results\n\n    def test_invalid_unknown_params(self, *args):\n        set_module_args(dict(\n            name='test-route',\n            password='admin',\n            server='localhost',\n            user='admin',\n            state='present',\n            foo=\"bar\"\n        ))\n        with patch('ansible.module_utils.f5_utils.AnsibleModule.fail_json') as mo:\n            mo.return_value = True\n            AnsibleModule(\n                argument_spec=self.spec.argument_spec,\n                mutually_exclusive=self.spec.mutually_exclusive,\n                supports_check_mode=self.spec.supports_check_mode\n            )\n            assert mo.call_count == 1\n\n    def test_create_with_route_domain(self, *args):\n        set_module_args(dict(\n            name='test-route',\n            password='admin',\n            server='localhost',\n            user='admin',\n            state='present',\n            destination='10.10.10.10',\n            netmask='255.255.255.255',\n            route_domain=1,\n            reject='yes'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            mutually_exclusive=self.spec.mutually_exclusive,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.exists = Mock(return_value=False)\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n        assert results['route_domain'] == 1\n        assert results['destination'] == '10.10.10.10%1/32'\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_static_route.py", "id": "f51b28b4f00ce26e145b59728cce2782", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_static_route.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}