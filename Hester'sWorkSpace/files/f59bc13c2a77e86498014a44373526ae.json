{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\n\nimport os\nimport subprocess\n\nfrom .ffmpeg import FFmpegPostProcessor\n\nfrom ..utils import (\n    check_executable,\n    encodeArgument,\n    encodeFilename,\n    PostProcessingError,\n    prepend_extension,\n    shell_quote\n)\n\n\nclass EmbedThumbnailPPError(PostProcessingError):\n    pass\n\n\nclass EmbedThumbnailPP(FFmpegPostProcessor):\n    def __init__(self, downloader=None, already_have_thumbnail=False):\n        super(EmbedThumbnailPP, self).__init__(downloader)\n        self._already_have_thumbnail = already_have_thumbnail\n\n    def run(self, info):\n        filename = info['filepath']\n        temp_filename = prepend_extension(filename, 'temp')\n\n        if not info.get('thumbnails'):\n            self._downloader.to_screen('[embedthumbnail] There aren\\'t any thumbnails to embed')\n            return [], info\n\n        thumbnail_filename = info['thumbnails'][-1]['filename']\n\n        if not os.path.exists(encodeFilename(thumbnail_filename)):\n            self._downloader.report_warning(\n                'Skipping embedding the thumbnail because the file is missing.')\n            return [], info\n\n        if info['ext'] == 'mp3':\n            options = [\n                '-c', 'copy', '-map', '0', '-map', '1',\n                '-metadata:s:v', 'title=\"Album cover\"', '-metadata:s:v', 'comment=\"Cover (Front)\"']\n\n            self._downloader.to_screen('[ffmpeg] Adding thumbnail to \"%s\"' % filename)\n\n            self.run_ffmpeg_multiple_files([filename, thumbnail_filename], temp_filename, options)\n\n            if not self._already_have_thumbnail:\n                os.remove(encodeFilename(thumbnail_filename))\n            os.remove(encodeFilename(filename))\n            os.rename(encodeFilename(temp_filename), encodeFilename(filename))\n\n        elif info['ext'] in ['m4a', 'mp4']:\n            if not check_executable('AtomicParsley', ['-v']):\n                raise EmbedThumbnailPPError('AtomicParsley was not found. Please install.')\n\n            cmd = [encodeFilename('AtomicParsley', True),\n                   encodeFilename(filename, True),\n                   encodeArgument('--artwork'),\n                   encodeFilename(thumbnail_filename, True),\n                   encodeArgument('-o'),\n                   encodeFilename(temp_filename, True)]\n\n            self._downloader.to_screen('[atomicparsley] Adding thumbnail to \"%s\"' % filename)\n\n            if self._downloader.params.get('verbose', False):\n                self._downloader.to_screen('[debug] AtomicParsley command line: %s' % shell_quote(cmd))\n\n            p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            stdout, stderr = p.communicate()\n\n            if p.returncode != 0:\n                msg = stderr.decode('utf-8', 'replace').strip()\n                raise EmbedThumbnailPPError(msg)\n\n            if not self._already_have_thumbnail:\n                os.remove(encodeFilename(thumbnail_filename))\n            \n            \n            if b'No changes' in stdout:\n                self._downloader.report_warning('The file format doesn\\'t support embedding a thumbnail')\n            else:\n                os.remove(encodeFilename(filename))\n                os.rename(encodeFilename(temp_filename), encodeFilename(filename))\n        else:\n            raise EmbedThumbnailPPError('Only mp3 and m4a/mp4 are supported for thumbnail embedding for now.')\n\n        return [], info\n", "comments": "# coding: utf-8\n# for formats that don't support thumbnails (like 3gp) AtomicParsley\n# won't create to the temporary file\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\n\nimport os\nimport subprocess\n\nfrom .ffmpeg import FFmpegPostProcessor\n\nfrom ..utils import (\n    check_executable,\n    encodeArgument,\n    encodeFilename,\n    PostProcessingError,\n    prepend_extension,\n    shell_quote\n)\n\n\nclass EmbedThumbnailPPError(PostProcessingError):\n    pass\n\n\nclass EmbedThumbnailPP(FFmpegPostProcessor):\n    def __init__(self, downloader=None, already_have_thumbnail=False):\n        super(EmbedThumbnailPP, self).__init__(downloader)\n        self._already_have_thumbnail = already_have_thumbnail\n\n    def run(self, info):\n        filename = info['filepath']\n        temp_filename = prepend_extension(filename, 'temp')\n\n        if not info.get('thumbnails'):\n            self._downloader.to_screen('[embedthumbnail] There aren\\'t any thumbnails to embed')\n            return [], info\n\n        thumbnail_filename = info['thumbnails'][-1]['filename']\n\n        if not os.path.exists(encodeFilename(thumbnail_filename)):\n            self._downloader.report_warning(\n                'Skipping embedding the thumbnail because the file is missing.')\n            return [], info\n\n        if info['ext'] == 'mp3':\n            options = [\n                '-c', 'copy', '-map', '0', '-map', '1',\n                '-metadata:s:v', 'title=\"Album cover\"', '-metadata:s:v', 'comment=\"Cover (Front)\"']\n\n            self._downloader.to_screen('[ffmpeg] Adding thumbnail to \"%s\"' % filename)\n\n            self.run_ffmpeg_multiple_files([filename, thumbnail_filename], temp_filename, options)\n\n            if not self._already_have_thumbnail:\n                os.remove(encodeFilename(thumbnail_filename))\n            os.remove(encodeFilename(filename))\n            os.rename(encodeFilename(temp_filename), encodeFilename(filename))\n\n        elif info['ext'] in ['m4a', 'mp4']:\n            if not check_executable('AtomicParsley', ['-v']):\n                raise EmbedThumbnailPPError('AtomicParsley was not found. Please install.')\n\n            cmd = [encodeFilename('AtomicParsley', True),\n                   encodeFilename(filename, True),\n                   encodeArgument('--artwork'),\n                   encodeFilename(thumbnail_filename, True),\n                   encodeArgument('-o'),\n                   encodeFilename(temp_filename, True)]\n\n            self._downloader.to_screen('[atomicparsley] Adding thumbnail to \"%s\"' % filename)\n\n            if self._downloader.params.get('verbose', False):\n                self._downloader.to_screen('[debug] AtomicParsley command line: %s' % shell_quote(cmd))\n\n            p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            stdout, stderr = p.communicate()\n\n            if p.returncode != 0:\n                msg = stderr.decode('utf-8', 'replace').strip()\n                raise EmbedThumbnailPPError(msg)\n\n            if not self._already_have_thumbnail:\n                os.remove(encodeFilename(thumbnail_filename))\n            # for formats that don't support thumbnails (like 3gp) AtomicParsley\n            # won't create to the temporary file\n            if b'No changes' in stdout:\n                self._downloader.report_warning('The file format doesn\\'t support embedding a thumbnail')\n            else:\n                os.remove(encodeFilename(filename))\n                os.rename(encodeFilename(temp_filename), encodeFilename(filename))\n        else:\n            raise EmbedThumbnailPPError('Only mp3 and m4a/mp4 are supported for thumbnail embedding for now.')\n\n        return [], info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "embedthumbnail.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/postprocessor/embedthumbnail.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}