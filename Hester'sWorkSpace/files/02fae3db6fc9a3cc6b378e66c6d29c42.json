{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport itertools\nimport re\n\nfrom .common import SearchInfoExtractor\n\n\nclass GoogleSearchIE(SearchInfoExtractor):\n    IE_DESC = 'Google Video search'\n    _MAX_RESULTS = 1000\n    IE_NAME = 'video.google:search'\n    _SEARCH_KEY = 'gvsearch'\n    _TEST = {\n        'url': 'gvsearch15:python language',\n        'info_dict': {\n            'id': 'python language',\n            'title': 'python language',\n        },\n        'playlist_count': 15,\n    }\n\n    def _get_n_results(self, query, n):\n        \n\n        entries = []\n        res = {\n            '_type': 'playlist',\n            'id': query,\n            'title': query,\n        }\n\n        for pagenum in itertools.count():\n            webpage = self._download_webpage(\n                'http://www.google.com/search',\n                'gvsearch:' + query,\n                note='Downloading result page %s' % (pagenum + 1),\n                query={\n                    'tbm': 'vid',\n                    'q': query,\n                    'start': pagenum * 10,\n                    'hl': 'en',\n                })\n\n            for hit_idx, mobj in enumerate(re.finditer(\n                    r'<h3 class=\"r\"><a href=\"([^\"]+)\"', webpage)):\n\n                \n                if not re.search(r'id=\"vidthumb%d\"' % (hit_idx + 1), webpage):\n                    continue\n\n                entries.append({\n                    '_type': 'url',\n                    'url': mobj.group(1)\n                })\n\n            if (len(entries) >= n) or not re.search(r'id=\"pnnext\"', webpage):\n                res['entries'] = entries[:n]\n                return res\n", "comments": "Get a specified number of results for a query\ny\n# Skip playlists\n", "content": "from __future__ import unicode_literals\n\nimport itertools\nimport re\n\nfrom .common import SearchInfoExtractor\n\n\nclass GoogleSearchIE(SearchInfoExtractor):\n    IE_DESC = 'Google Video search'\n    _MAX_RESULTS = 1000\n    IE_NAME = 'video.google:search'\n    _SEARCH_KEY = 'gvsearch'\n    _TEST = {\n        'url': 'gvsearch15:python language',\n        'info_dict': {\n            'id': 'python language',\n            'title': 'python language',\n        },\n        'playlist_count': 15,\n    }\n\n    def _get_n_results(self, query, n):\n        \"\"\"Get a specified number of results for a query\"\"\"\n\n        entries = []\n        res = {\n            '_type': 'playlist',\n            'id': query,\n            'title': query,\n        }\n\n        for pagenum in itertools.count():\n            webpage = self._download_webpage(\n                'http://www.google.com/search',\n                'gvsearch:' + query,\n                note='Downloading result page %s' % (pagenum + 1),\n                query={\n                    'tbm': 'vid',\n                    'q': query,\n                    'start': pagenum * 10,\n                    'hl': 'en',\n                })\n\n            for hit_idx, mobj in enumerate(re.finditer(\n                    r'<h3 class=\"r\"><a href=\"([^\"]+)\"', webpage)):\n\n                # Skip playlists\n                if not re.search(r'id=\"vidthumb%d\"' % (hit_idx + 1), webpage):\n                    continue\n\n                entries.append({\n                    '_type': 'url',\n                    'url': mobj.group(1)\n                })\n\n            if (len(entries) >= n) or not re.search(r'id=\"pnnext\"', webpage):\n                res['entries'] = entries[:n]\n                return res\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "googlesearch.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/googlesearch.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}