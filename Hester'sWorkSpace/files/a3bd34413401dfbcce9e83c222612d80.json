{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2017, Simon Dodsley (simon@purestorage.com)\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: purefa_pg\nversion_added: '2.4'\nshort_description: Manage protection groups on Pure Storage FlashArrays\ndescription:\n- Create, delete or modify protection groups on Pure Storage FlashArrays.\nauthor:\n- Simon Dodsley (@sdodsley)\noptions:\n  pgroup:\n    description:\n    - The name of the protection group.\n    required: true\n  state:\n    description:\n    - Define whether the protection group should exist or not.\n    default: present\n    choices: [ absent, present ]\n  volume:\n    description:\n    - List of existing volumes to add to protection group.\n  host:\n    description:\n    - List of existing hosts to add to protection group.\n  hostgroup:\n    description:\n    - List of existing hostgroups to add to protection group.\n  eradicate:\n    description:\n    - Define whether to eradicate the protection group on delete and leave in trash.\n    type : bool\n    default: 'no'\n  enabled:\n    description:\n    - Define whether to enabled snapshots for the protection group.\n    type : bool\n    default: 'yes'\nextends_documentation_fragment:\n- purestorage.fa\n'''\n\nEXAMPLES = r'''\n- name: Create new protection group\n  purefa_pg:\n    pgroup: foo\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n\n- name: Create new protection group with snapshots disabled\n  purefa_pg:\n    pgroup: foo\n    enabled: false\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n\n- name: Delete protection group\n  purefa_pg:\n    pgroup: foo\n    eradicate: true\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n    state: absent\n\n- name: Create protection group for hostgroups\n  purefa_pg:\n    pgroup: bar\n    hostgroup:\n      - hg1\n      - hg2\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n\n- name: Create protection group for hosts\n  purefa_pg:\n    pgroup: bar\n    host:\n      - host1\n      - host2\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n\n- name: Create protection group for volumes\n  purefa_pg:\n    pgroup: bar\n    volume:\n      - vol1\n      - vol2\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n'''\n\nRETURN = r'''\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.pure import get_system, purefa_argument_spec\n\n\ntry:\n    from purestorage import purestorage\n    HAS_PURESTORAGE = True\nexcept ImportError:\n    HAS_PURESTORAGE = False\n\n\ndef get_pgroup(module, array):\n\n    pgroup = None\n\n    for h in array.list_pgroups():\n        if h[\"name\"] == module.params['pgroup']:\n            pgroup = h\n            break\n\n    return pgroup\n\n\ndef make_pgroup(module, array):\n\n    changed = True\n\n    if not module.check_mode:\n        host = array.create_pgroup(module.params['pgroup'])\n        array.set_pgroup(module.params['pgroup'], snap_enabled=module.params['enabled'])\n        if module.params['volume']:\n            array.set_pgroup(module.params['pgroup'], vollist=module.params['volume'])\n        if module.params['host']:\n            array.set_pgroup(module.params['pgroup'], hostlist=module.params['host'])\n        if module.params['hostgroup']:\n            array.set_pgroup(module.params['pgroup'], hgrouplist=module.params['hostgroup'])\n    module.exit_json(changed=changed)\n\n\ndef update_pgroup(module, array):\n    changed = False\n    pgroup = module.params['pgroup']\n    module.exit_json(changed=changed)\n\n\ndef delete_pgroup(module, array):\n    changed = True\n    if not module.check_mode:\n        array.destroy_pgroup(module.params['pgroup'])\n        if module.params['eradicate']:\n            array.eradicate_pgroup(module.params['pgroup'])\n    module.exit_json(changed=changed)\n\n\ndef main():\n    argument_spec = purefa_argument_spec()\n    argument_spec.update(dict(\n        pgroup=dict(type='str', required=True),\n        state=dict(type='str', default='present', choices=['absent', 'present']),\n        volume=dict(type='list'),\n        host=dict(type='list'),\n        hostgroup=dict(type='list'),\n        eradicate=dict(type='bool', default=False),\n        enabled=dict(type='bool', default=True),\n    ))\n\n    module = AnsibleModule(argument_spec, supports_check_mode=True)\n\n    if not HAS_PURESTORAGE:\n        module.fail_json(msg='purestorage sdk is required for this module in host')\n\n    state = module.params['state']\n    array = get_system(module)\n    pgroup = get_pgroup(module, array)\n\n    if module.params['host']:\n        try:\n            for h in module.params['host']:\n                array.get_host(h)\n        except:\n            module.fail_json(msg='Host {} not found'.format(h))\n\n    if module.params['hostgroup']:\n        try:\n            for hg in module.params['hostgroup']:\n                array.get_hgroup(hg)\n        except:\n            module.fail_json(msg='Hostgroup {} not found'.format(hg))\n\n    if pgroup and state == 'present':\n        update_pgroup(module, array)\n    elif pgroup and state == 'absent':\n        delete_pgroup(module, array)\n    elif pgroup is None and state == 'absent':\n        module.exit_json(changed=False)\n    else:\n        make_pgroup(module, array)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  purefa pg version added   2 4  short description  manage protection groups pure storage flasharrays description    create  delete modify protection groups pure storage flasharrays  author    simon dodsley ( sdodsley) options    pgroup      description        the name protection group      required  true   state      description        define whether protection group exist      default  present     choices    absent  present     volume      description        list existing volumes add protection group    host      description        list existing hosts add protection group    hostgroup      description        list existing hostgroups add protection group    eradicate      description        define whether eradicate protection group delete leave trash      type   bool     default      enabled      description        define whether enabled snapshots protection group      type   bool     default   yes  extends documentation fragment    purestorage fa      examples   r      name  create new protection group   purefa pg      pgroup  foo     fa url  10 10 10 2     api token  e31060a7 21fc e277 6240 25983c6c4592    name  create new protection group snapshots disabled   purefa pg      pgroup  foo     enabled  false     fa url  10 10 10 2     api token  e31060a7 21fc e277 6240 25983c6c4592    name  delete protection group   purefa pg      pgroup  foo     eradicate  true     fa url  10 10 10 2     api token  e31060a7 21fc e277 6240 25983c6c4592     state  absent    name  create protection group hostgroups   purefa pg      pgroup  bar     hostgroup          hg1         hg2     fa url  10 10 10 2     api token  e31060a7 21fc e277 6240 25983c6c4592    name  create protection group hosts   purefa pg      pgroup  bar     host          host1         host2     fa url  10 10 10 2     api token  e31060a7 21fc e277 6240 25983c6c4592    name  create protection group volumes   purefa pg      pgroup  bar     volume          vol1         vol2     fa url  10 10 10 2     api token  e31060a7 21fc e277 6240 25983c6c4592      return   r            usr bin python        coding  utf 8        (c) 2017  simon dodsley (simon purestorage com)    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2017, Simon Dodsley (simon@purestorage.com)\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: purefa_pg\nversion_added: '2.4'\nshort_description: Manage protection groups on Pure Storage FlashArrays\ndescription:\n- Create, delete or modify protection groups on Pure Storage FlashArrays.\nauthor:\n- Simon Dodsley (@sdodsley)\noptions:\n  pgroup:\n    description:\n    - The name of the protection group.\n    required: true\n  state:\n    description:\n    - Define whether the protection group should exist or not.\n    default: present\n    choices: [ absent, present ]\n  volume:\n    description:\n    - List of existing volumes to add to protection group.\n  host:\n    description:\n    - List of existing hosts to add to protection group.\n  hostgroup:\n    description:\n    - List of existing hostgroups to add to protection group.\n  eradicate:\n    description:\n    - Define whether to eradicate the protection group on delete and leave in trash.\n    type : bool\n    default: 'no'\n  enabled:\n    description:\n    - Define whether to enabled snapshots for the protection group.\n    type : bool\n    default: 'yes'\nextends_documentation_fragment:\n- purestorage.fa\n'''\n\nEXAMPLES = r'''\n- name: Create new protection group\n  purefa_pg:\n    pgroup: foo\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n\n- name: Create new protection group with snapshots disabled\n  purefa_pg:\n    pgroup: foo\n    enabled: false\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n\n- name: Delete protection group\n  purefa_pg:\n    pgroup: foo\n    eradicate: true\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n    state: absent\n\n- name: Create protection group for hostgroups\n  purefa_pg:\n    pgroup: bar\n    hostgroup:\n      - hg1\n      - hg2\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n\n- name: Create protection group for hosts\n  purefa_pg:\n    pgroup: bar\n    host:\n      - host1\n      - host2\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n\n- name: Create protection group for volumes\n  purefa_pg:\n    pgroup: bar\n    volume:\n      - vol1\n      - vol2\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n'''\n\nRETURN = r'''\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.pure import get_system, purefa_argument_spec\n\n\ntry:\n    from purestorage import purestorage\n    HAS_PURESTORAGE = True\nexcept ImportError:\n    HAS_PURESTORAGE = False\n\n\ndef get_pgroup(module, array):\n\n    pgroup = None\n\n    for h in array.list_pgroups():\n        if h[\"name\"] == module.params['pgroup']:\n            pgroup = h\n            break\n\n    return pgroup\n\n\ndef make_pgroup(module, array):\n\n    changed = True\n\n    if not module.check_mode:\n        host = array.create_pgroup(module.params['pgroup'])\n        array.set_pgroup(module.params['pgroup'], snap_enabled=module.params['enabled'])\n        if module.params['volume']:\n            array.set_pgroup(module.params['pgroup'], vollist=module.params['volume'])\n        if module.params['host']:\n            array.set_pgroup(module.params['pgroup'], hostlist=module.params['host'])\n        if module.params['hostgroup']:\n            array.set_pgroup(module.params['pgroup'], hgrouplist=module.params['hostgroup'])\n    module.exit_json(changed=changed)\n\n\ndef update_pgroup(module, array):\n    changed = False\n    pgroup = module.params['pgroup']\n    module.exit_json(changed=changed)\n\n\ndef delete_pgroup(module, array):\n    changed = True\n    if not module.check_mode:\n        array.destroy_pgroup(module.params['pgroup'])\n        if module.params['eradicate']:\n            array.eradicate_pgroup(module.params['pgroup'])\n    module.exit_json(changed=changed)\n\n\ndef main():\n    argument_spec = purefa_argument_spec()\n    argument_spec.update(dict(\n        pgroup=dict(type='str', required=True),\n        state=dict(type='str', default='present', choices=['absent', 'present']),\n        volume=dict(type='list'),\n        host=dict(type='list'),\n        hostgroup=dict(type='list'),\n        eradicate=dict(type='bool', default=False),\n        enabled=dict(type='bool', default=True),\n    ))\n\n    module = AnsibleModule(argument_spec, supports_check_mode=True)\n\n    if not HAS_PURESTORAGE:\n        module.fail_json(msg='purestorage sdk is required for this module in host')\n\n    state = module.params['state']\n    array = get_system(module)\n    pgroup = get_pgroup(module, array)\n\n    if module.params['host']:\n        try:\n            for h in module.params['host']:\n                array.get_host(h)\n        except:\n            module.fail_json(msg='Host {} not found'.format(h))\n\n    if module.params['hostgroup']:\n        try:\n            for hg in module.params['hostgroup']:\n                array.get_hgroup(hg)\n        except:\n            module.fail_json(msg='Hostgroup {} not found'.format(hg))\n\n    if pgroup and state == 'present':\n        update_pgroup(module, array)\n    elif pgroup and state == 'absent':\n        delete_pgroup(module, array)\n    elif pgroup is None and state == 'absent':\n        module.exit_json(changed=False)\n    else:\n        make_pgroup(module, array)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "purefa_pg.py", "id": "a3bd34413401dfbcce9e83c222612d80", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/storage/purestorage/purefa_pg.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}