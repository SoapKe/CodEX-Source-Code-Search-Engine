{"author": "django", "code": "\"\"\"\nFixtures.\n\nFixtures are a way of loading data into the database in bulk. Fixure data\ncan be stored in any serializable format (including JSON and XML). Fixtures\nare identified by name, and are stored in either a directory named 'fixtures'\nin the application directory, or in one of the directories named in the\n``FIXTURE_DIRS`` setting.\n\"\"\"\n\nimport uuid\n\nfrom django.contrib.auth.models import Permission\nfrom django.contrib.contenttypes.fields import GenericForeignKey\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\n\n\nclass Category(models.Model):\n    title = models.CharField(max_length=100)\n    description = models.TextField()\n\n    def __str__(self):\n        return self.title\n\n    class Meta:\n        ordering = ('title',)\n\n\nclass Article(models.Model):\n    headline = models.CharField(max_length=100, default='Default headline')\n    pub_date = models.DateTimeField()\n\n    def __str__(self):\n        return self.headline\n\n    class Meta:\n        ordering = ('-pub_date', 'headline')\n\n\nclass Blog(models.Model):\n    name = models.CharField(max_length=100)\n    featured = models.ForeignKey(Article, models.CASCADE, related_name='fixtures_featured_set')\n    articles = models.ManyToManyField(Article, blank=True,\n                                      related_name='fixtures_articles_set')\n\n    def __str__(self):\n        return self.name\n\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=100)\n    tagged_type = models.ForeignKey(ContentType, models.CASCADE, related_name=\"fixtures_tag_set\")\n    tagged_id = models.PositiveIntegerField(default=0)\n    tagged = GenericForeignKey(ct_field='tagged_type', fk_field='tagged_id')\n\n    def __str__(self):\n        return '<%s: %s> tagged \"%s\"' % (self.tagged.__class__.__name__,\n                                         self.tagged, self.name)\n\n\nclass PersonManager(models.Manager):\n    def get_by_natural_key(self, name):\n        return self.get(name=name)\n\n\nclass Person(models.Model):\n    objects = PersonManager()\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        ordering = ('name',)\n\n    def natural_key(self):\n        return (self.name,)\n\n\nclass SpyManager(PersonManager):\n    def get_queryset(self):\n        return super().get_queryset().filter(cover_blown=False)\n\n\nclass Spy(Person):\n    objects = SpyManager()\n    cover_blown = models.BooleanField(default=False)\n\n\nclass ProxySpy(Spy):\n    class Meta:\n        proxy = True\n\n\nclass Visa(models.Model):\n    person = models.ForeignKey(Person, models.CASCADE)\n    permissions = models.ManyToManyField(Permission, blank=True)\n\n    def __str__(self):\n        return '%s %s' % (self.person.name,\n                          ', '.join(p.name for p in self.permissions.all()))\n\n\nclass Book(models.Model):\n    name = models.CharField(max_length=100)\n    authors = models.ManyToManyField(Person)\n\n    def __str__(self):\n        authors = ' and '.join(a.name for a in self.authors.all())\n        return '%s by %s' % (self.name, authors) if authors else self.name\n\n    class Meta:\n        ordering = ('name',)\n\n\nclass PrimaryKeyUUIDModel(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4)\n", "comments": "    fixtures   fixtures way loading data database bulk  fixure data stored serializable format (including json xml)  fixtures identified name  stored either directory named  fixtures  application directory  one directories named   fixture dirs   setting      ", "content": "\"\"\"\nFixtures.\n\nFixtures are a way of loading data into the database in bulk. Fixure data\ncan be stored in any serializable format (including JSON and XML). Fixtures\nare identified by name, and are stored in either a directory named 'fixtures'\nin the application directory, or in one of the directories named in the\n``FIXTURE_DIRS`` setting.\n\"\"\"\n\nimport uuid\n\nfrom django.contrib.auth.models import Permission\nfrom django.contrib.contenttypes.fields import GenericForeignKey\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\n\n\nclass Category(models.Model):\n    title = models.CharField(max_length=100)\n    description = models.TextField()\n\n    def __str__(self):\n        return self.title\n\n    class Meta:\n        ordering = ('title',)\n\n\nclass Article(models.Model):\n    headline = models.CharField(max_length=100, default='Default headline')\n    pub_date = models.DateTimeField()\n\n    def __str__(self):\n        return self.headline\n\n    class Meta:\n        ordering = ('-pub_date', 'headline')\n\n\nclass Blog(models.Model):\n    name = models.CharField(max_length=100)\n    featured = models.ForeignKey(Article, models.CASCADE, related_name='fixtures_featured_set')\n    articles = models.ManyToManyField(Article, blank=True,\n                                      related_name='fixtures_articles_set')\n\n    def __str__(self):\n        return self.name\n\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=100)\n    tagged_type = models.ForeignKey(ContentType, models.CASCADE, related_name=\"fixtures_tag_set\")\n    tagged_id = models.PositiveIntegerField(default=0)\n    tagged = GenericForeignKey(ct_field='tagged_type', fk_field='tagged_id')\n\n    def __str__(self):\n        return '<%s: %s> tagged \"%s\"' % (self.tagged.__class__.__name__,\n                                         self.tagged, self.name)\n\n\nclass PersonManager(models.Manager):\n    def get_by_natural_key(self, name):\n        return self.get(name=name)\n\n\nclass Person(models.Model):\n    objects = PersonManager()\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        ordering = ('name',)\n\n    def natural_key(self):\n        return (self.name,)\n\n\nclass SpyManager(PersonManager):\n    def get_queryset(self):\n        return super().get_queryset().filter(cover_blown=False)\n\n\nclass Spy(Person):\n    objects = SpyManager()\n    cover_blown = models.BooleanField(default=False)\n\n\nclass ProxySpy(Spy):\n    class Meta:\n        proxy = True\n\n\nclass Visa(models.Model):\n    person = models.ForeignKey(Person, models.CASCADE)\n    permissions = models.ManyToManyField(Permission, blank=True)\n\n    def __str__(self):\n        return '%s %s' % (self.person.name,\n                          ', '.join(p.name for p in self.permissions.all()))\n\n\nclass Book(models.Model):\n    name = models.CharField(max_length=100)\n    authors = models.ManyToManyField(Person)\n\n    def __str__(self):\n        authors = ' and '.join(a.name for a in self.authors.all())\n        return '%s by %s' % (self.name, authors) if authors else self.name\n\n    class Meta:\n        ordering = ('name',)\n\n\nclass PrimaryKeyUUIDModel(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "428810a60934d96c8a737725559e5502", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/fixtures/models.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}