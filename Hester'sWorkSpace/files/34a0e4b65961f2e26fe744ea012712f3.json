{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    float_or_none,\n    qualities,\n    ExtractorError,\n)\n\n\nclass GfycatIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?gfycat\\.com/(?:ifr/|gifs/detail/)?(?P<id>[^/?\n    _TESTS = [{\n        'url': 'http://gfycat.com/DeadlyDecisiveGermanpinscher',\n        'info_dict': {\n            'id': 'DeadlyDecisiveGermanpinscher',\n            'ext': 'mp4',\n            'title': 'Ghost in the Shell',\n            'timestamp': 1410656006,\n            'upload_date': '20140914',\n            'uploader': 'anonymous',\n            'duration': 10.4,\n            'view_count': int,\n            'like_count': int,\n            'dislike_count': int,\n            'categories': list,\n            'age_limit': 0,\n        }\n    }, {\n        'url': 'http://gfycat.com/ifr/JauntyTimelyAmazontreeboa',\n        'info_dict': {\n            'id': 'JauntyTimelyAmazontreeboa',\n            'ext': 'mp4',\n            'title': 'JauntyTimelyAmazontreeboa',\n            'timestamp': 1411720126,\n            'upload_date': '20140926',\n            'uploader': 'anonymous',\n            'duration': 3.52,\n            'view_count': int,\n            'like_count': int,\n            'dislike_count': int,\n            'categories': list,\n            'age_limit': 0,\n        }\n    }, {\n        'url': 'https://gfycat.com/gifs/detail/UnconsciousLankyIvorygull',\n        'only_matching': True\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        gfy = self._download_json(\n            'http://gfycat.com/cajax/get/%s' % video_id,\n            video_id, 'Downloading video info')\n        if 'error' in gfy:\n            raise ExtractorError('Gfycat said: ' + gfy['error'], expected=True)\n        gfy = gfy['gfyItem']\n\n        title = gfy.get('title') or gfy['gfyName']\n        description = gfy.get('description')\n        timestamp = int_or_none(gfy.get('createDate'))\n        uploader = gfy.get('userName')\n        view_count = int_or_none(gfy.get('views'))\n        like_count = int_or_none(gfy.get('likes'))\n        dislike_count = int_or_none(gfy.get('dislikes'))\n        age_limit = 18 if gfy.get('nsfw') == '1' else 0\n\n        width = int_or_none(gfy.get('width'))\n        height = int_or_none(gfy.get('height'))\n        fps = int_or_none(gfy.get('frameRate'))\n        num_frames = int_or_none(gfy.get('numFrames'))\n\n        duration = float_or_none(num_frames, fps) if num_frames and fps else None\n\n        categories = gfy.get('tags') or gfy.get('extraLemmas') or []\n\n        FORMATS = ('gif', 'webm', 'mp4')\n        quality = qualities(FORMATS)\n\n        formats = []\n        for format_id in FORMATS:\n            video_url = gfy.get('%sUrl' % format_id)\n            if not video_url:\n                continue\n            filesize = int_or_none(gfy.get('%sSize' % format_id))\n            formats.append({\n                'url': video_url,\n                'format_id': format_id,\n                'width': width,\n                'height': height,\n                'fps': fps,\n                'filesize': filesize,\n                'quality': quality(format_id),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'duration': duration,\n            'view_count': view_count,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'categories': categories,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    float_or_none,\n    qualities,\n    ExtractorError,\n)\n\n\nclass GfycatIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?gfycat\\.com/(?:ifr/|gifs/detail/)?(?P<id>[^/?#]+)'\n    _TESTS = [{\n        'url': 'http://gfycat.com/DeadlyDecisiveGermanpinscher',\n        'info_dict': {\n            'id': 'DeadlyDecisiveGermanpinscher',\n            'ext': 'mp4',\n            'title': 'Ghost in the Shell',\n            'timestamp': 1410656006,\n            'upload_date': '20140914',\n            'uploader': 'anonymous',\n            'duration': 10.4,\n            'view_count': int,\n            'like_count': int,\n            'dislike_count': int,\n            'categories': list,\n            'age_limit': 0,\n        }\n    }, {\n        'url': 'http://gfycat.com/ifr/JauntyTimelyAmazontreeboa',\n        'info_dict': {\n            'id': 'JauntyTimelyAmazontreeboa',\n            'ext': 'mp4',\n            'title': 'JauntyTimelyAmazontreeboa',\n            'timestamp': 1411720126,\n            'upload_date': '20140926',\n            'uploader': 'anonymous',\n            'duration': 3.52,\n            'view_count': int,\n            'like_count': int,\n            'dislike_count': int,\n            'categories': list,\n            'age_limit': 0,\n        }\n    }, {\n        'url': 'https://gfycat.com/gifs/detail/UnconsciousLankyIvorygull',\n        'only_matching': True\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        gfy = self._download_json(\n            'http://gfycat.com/cajax/get/%s' % video_id,\n            video_id, 'Downloading video info')\n        if 'error' in gfy:\n            raise ExtractorError('Gfycat said: ' + gfy['error'], expected=True)\n        gfy = gfy['gfyItem']\n\n        title = gfy.get('title') or gfy['gfyName']\n        description = gfy.get('description')\n        timestamp = int_or_none(gfy.get('createDate'))\n        uploader = gfy.get('userName')\n        view_count = int_or_none(gfy.get('views'))\n        like_count = int_or_none(gfy.get('likes'))\n        dislike_count = int_or_none(gfy.get('dislikes'))\n        age_limit = 18 if gfy.get('nsfw') == '1' else 0\n\n        width = int_or_none(gfy.get('width'))\n        height = int_or_none(gfy.get('height'))\n        fps = int_or_none(gfy.get('frameRate'))\n        num_frames = int_or_none(gfy.get('numFrames'))\n\n        duration = float_or_none(num_frames, fps) if num_frames and fps else None\n\n        categories = gfy.get('tags') or gfy.get('extraLemmas') or []\n\n        FORMATS = ('gif', 'webm', 'mp4')\n        quality = qualities(FORMATS)\n\n        formats = []\n        for format_id in FORMATS:\n            video_url = gfy.get('%sUrl' % format_id)\n            if not video_url:\n                continue\n            filesize = int_or_none(gfy.get('%sSize' % format_id))\n            formats.append({\n                'url': video_url,\n                'format_id': format_id,\n                'width': width,\n                'height': height,\n                'fps': fps,\n                'filesize': filesize,\n                'quality': quality(format_id),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'duration': duration,\n            'view_count': view_count,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'categories': categories,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "gfycat.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/gfycat.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}