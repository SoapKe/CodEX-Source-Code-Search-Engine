{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestBit(object):\n\n    def test_bit(self):\n        number = int('10001110', base=2)\n        bit = Bit(number)\n        assert_equal(bit.get_bit(index=3), True)\n        expected = int('10011110', base=2)\n        assert_equal(bit.set_bit(index=4), expected)\n        bit = Bit(number)\n        expected = int('10000110', base=2)\n        assert_equal(bit.clear_bit(index=3), expected)\n        bit = Bit(number)\n        expected = int('00000110', base=2)\n        assert_equal(bit.clear_bits_msb_to_index(index=3), expected)\n        bit = Bit(number)\n        expected = int('10000000', base=2)\n        assert_equal(bit.clear_bits_index_to_lsb(index=3), expected)\n        bit = Bit(number)\n        assert_equal(bit.update_bit(index=3, value=1), number)\n        bit = Bit(number)\n        expected = int('10000110', base=2)\n        assert_equal(bit.update_bit(index=3, value=0), expected)\n        bit = Bit(number)\n        expected = int('10001111', base=2)\n        assert_equal(bit.update_bit(index=0, value=1), expected)\n        print('Success: test_bit')\n\n\ndef main():\n    test = TestBit()\n    test.test_bit()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\n\nclass TestBit(object):\n\n    def test_bit(self):\n        number = int('10001110', base=2)\n        bit = Bit(number)\n        assert_equal(bit.get_bit(index=3), True)\n        expected = int('10011110', base=2)\n        assert_equal(bit.set_bit(index=4), expected)\n        bit = Bit(number)\n        expected = int('10000110', base=2)\n        assert_equal(bit.clear_bit(index=3), expected)\n        bit = Bit(number)\n        expected = int('00000110', base=2)\n        assert_equal(bit.clear_bits_msb_to_index(index=3), expected)\n        bit = Bit(number)\n        expected = int('10000000', base=2)\n        assert_equal(bit.clear_bits_index_to_lsb(index=3), expected)\n        bit = Bit(number)\n        assert_equal(bit.update_bit(index=3, value=1), number)\n        bit = Bit(number)\n        expected = int('10000110', base=2)\n        assert_equal(bit.update_bit(index=3, value=0), expected)\n        bit = Bit(number)\n        expected = int('10001111', base=2)\n        assert_equal(bit.update_bit(index=0, value=1), expected)\n        print('Success: test_bit')\n\n\ndef main():\n    test = TestBit()\n    test.test_bit()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_bit.py", "id": "39e7cc8e28238f831d1e5cbf6abc6b71", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/bit_manipulation/bit/test_bit.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}