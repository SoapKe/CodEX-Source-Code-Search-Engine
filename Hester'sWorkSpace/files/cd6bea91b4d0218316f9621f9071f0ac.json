{"author": "donnemartin", "code": " -*- coding: utf-8 -*-\n\n\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You\n may not use this file except in compliance with the License. A copy of\n the License is located at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n or in the \"license\" file accompanying this file. This file is\n distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implied. See the License for the specific\n language governing permissions and limitations under the License.\n\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\n\nimport mock\n\nfrom compat import unittest\n\nfrom gitsome.github import GitHub\nfrom tests.mock_feed_parser import MockFeedParser\nfrom tests.mock_github_api import MockGitHubApi\nfrom tests.mock_pretty_date_time import pretty_date_time\nfrom tests.data.email import formatted_emails\nfrom tests.data.emoji import formatted_emojis\nfrom tests.data.events import formatted_events\nfrom tests.data.user import formatted_org, formatted_user, formatted_users\nfrom tests.data.gitignores import formatted_gitignores, formatted_gitignores_tip\nfrom tests.data.issue import formatted_issues, formatted_pull_requests\nfrom tests.data.license import formatted_licenses, formatted_licenses_tip\nfrom tests.data.thread import formatted_threads\nfrom tests.data.trends import formatted_trends\nfrom tests.data.user_feed import formatted_user_feed\n\n\nclass GitHubTest(unittest.TestCase):\n\n    def setUp(self):\n        self.github = GitHub()\n        self.github.config.api = MockGitHubApi()\n        self.github.formatter.pretty_dt = pretty_date_time\n        self.github.trend_parser = MockFeedParser()\n\n    def test_avatar_no_pil(self):\n        avatar_text = self.github.avatar(\n            'https://avatars.githubusercontent.com/u/583231?v=3', False)\n        assert avatar_text == 'PIL not found.\\n'\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_create_comment(self, mock_click_secho):\n        self.github.create_comment('user1/repo1/1', 'text')\n        mock_click_secho.assert_called_with(\n            'Created comment: text',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_create_comment_invalid_args(self, mock_click_secho):\n        self.github.create_comment('invalid/repo1/1', 'text')\n        mock_click_secho.assert_called_with(\n            'Error creating comment',\n            fg=self.github.config.clr_error)\n        self.github.create_comment('user1/repo1/foo', 'text')\n        mock_click_secho.assert_called_with(\n            'Expected argument: user/repo/ and option -t \"comment\".',\n            fg=self.github.config.clr_error)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_create_issue(self, mock_click_secho):\n        self.github.create_issue('user1/repo1', 'title', 'desc')\n        mock_click_secho.assert_called_with(\n            'Created issue: title\\ndesc',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_create_issue_no_desc(self, mock_click_secho):\n        self.github.create_issue('user1/repo1', 'title', issue_desc=None)\n        mock_click_secho.assert_called_with(\n            'Created issue: title\\n',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_create_issue_invalid_args(self, mock_click_secho):\n        self.github.create_issue('invalid/repo1', 'title', 'desc')\n        mock_click_secho.assert_called_with(\n            'Error creating issue.',\n            fg=self.github.config.clr_error)\n        self.github.create_issue('u', 'title', 'desc')\n        mock_click_secho.assert_called_with(\n            'Expected argument: user/repo and option -t \"title\".',\n            fg=self.github.config.clr_error)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_create_repo(self, mock_click_secho):\n        self.github.create_repo('name', 'desc', True)\n        mock_click_secho.assert_called_with(\n            'Created repo: name\\ndesc',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_create_repo_no_desc(self, mock_click_secho):\n        self.github.create_repo('name', repo_desc=None)\n        mock_click_secho.assert_called_with(\n            'Created repo: name\\n',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_create_repo_invalid_args(self, mock_click_secho):\n        self.github.create_repo('repo1', 'desc', True)\n        mock_click_secho.assert_called_with(\n            'Error creating repo: foobar',\n            fg=self.github.config.clr_error)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_emails(self, mock_click_secho):\n        self.github.emails()\n        mock_click_secho.assert_called_with(formatted_emails)\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.config.Config.prompt_news_feed')\n    def test_feed_config(self, mock_config_prompt_news_feed, mock_click_secho):\n        self.github.feed()\n        mock_config_prompt_news_feed.assert_called_with()\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_feed(self, mock_click_secho):\n        self.github.config.user_feed = 'user_feed'\n        self.github.feed()\n        mock_click_secho.assert_called_with(formatted_user_feed)\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.config.Config')\n    def test_feed_user(self, mock_config, mock_click_secho):\n        self.github.feed('user1')\n        mock_click_secho.assert_called_with(formatted_events)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_emojis(self, mock_click_secho):\n        self.github.emojis()\n        mock_click_secho.assert_called_with(formatted_emojis)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_followers(self, mock_click_secho):\n        self.github.followers('foo')\n        mock_click_secho.assert_called_with(formatted_users)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_following(self, mock_click_secho):\n        self.github.following('foo')\n        mock_click_secho.assert_called_with(formatted_users)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_gitignore_template(self, mock_click_secho):\n        self.github.gitignore_template('valid_language')\n        mock_click_secho.assert_called_with(\n            'template',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_gitignore_template_invalid(self, mock_click_secho):\n        self.github.gitignore_template('invalid_language')\n        mock_click_secho.assert_called_with(\n            ('Invalid case-sensitive template requested, run the '\n             'following command to see available templates:\\n'\n             '    gh gitignore-templates'),\n            fg=self.github.config.clr_error)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_gitignore_templates(self, mock_click_secho):\n        self.github.gitignore_templates()\n        mock_click_secho.assert_any_call(formatted_gitignores)\n        mock_click_secho.assert_any_call(formatted_gitignores_tip,\n                                         fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.web_viewer.WebViewer.view_url')\n    def test_issue(self, mock_view_url):\n        self.github.issue('user1/repo1/1')\n        mock_view_url.assert_called_with(\n            'https://github.com/user1/repo1/issues/1')\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_issue_invalid_args(self, mock_click_secho):\n        self.github.issue('user1/repo1/foo')\n        mock_click_secho.assert_called_with(\n            'Expected argument: user/repo/.',\n            fg=self.github.config.clr_error)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_issues_setup(self, mock_click_secho):\n        self.github.issues_setup()\n        mock_click_secho.assert_called_with(formatted_issues)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_license(self, mock_click_secho):\n        self.github.license('valid_license')\n        mock_click_secho.assert_called_with(\n            'template',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_license_invalid(self, mock_click_secho):\n        self.github.license('invalid_license')\n        mock_click_secho.assert_called_with(\n            ('  Invalid case-sensitive license requested, run the '\n             'following command to see available licenses:\\n'\n             '    gh licenses'),\n            fg=self.github.config.clr_error)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_licenses(self, mock_click_secho):\n        self.github.licenses()\n        mock_click_secho.assert_any_call(formatted_licenses)\n        mock_click_secho.assert_any_call(formatted_licenses_tip,\n                                         fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_notifications(self, mock_click_secho):\n        self.github.notifications()\n        mock_click_secho.assert_called_with(formatted_threads)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_octocat(self, mock_click_secho):\n        self.github.octocat('foo\\\\nbar')\n        mock_click_secho.assert_called_with(\n            'foo\\nbar',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_pull_requests(self, mock_click_secho):\n        self.github.pull_requests()\n        mock_click_secho.assert_called_with(formatted_pull_requests)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_rate_limit(self, mock_click_secho):\n        self.github.rate_limit()\n        mock_click_secho.assert_called_with(\n            'Rate limit: 5000',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.web_viewer.WebViewer.view_url')\n    def test_repository(self, mock_view_url):\n        self.github.repository('user1/repo1')\n        mock_view_url.assert_called_with(\n            'https://github.com/user1/repo1')\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_repository_invalid(self, mock_click_secho):\n        self.github.repository('user1/repo1/1')\n        mock_click_secho.assert_called_with(\n            'Expected argument: user/repo.',\n            fg=self.github.config.clr_error)\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.github.GitHub.issues')\n    def test_search_issues(self, mock_github_issues, mock_click_secho):\n        self.github.search_issues('foo')\n        mock_github_issues.assert_called_with(\n            ['foobar', 'foobar', 'foobar'], 1000, False, sort=False)\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.github.GitHub.repositories')\n    def test_search_repos(self, mock_github_repositories, mock_click_secho):\n        self.github.search_repositories('foo', 'stars')\n        mock_github_repositories.assert_called_with(\n            ['foobar'], 1000, False, sort=False)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_trending(self, mock_click_secho):\n        self.github.trending('Python', False, False, False)\n        mock_click_secho.assert_called_with(formatted_trends)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_user(self, mock_click_secho):\n        self.github.user('user1')\n        mock_click_secho.assert_called_with(formatted_user)\n        self.github.user('user2')\n        mock_click_secho.assert_called_with(formatted_org)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_user_invalid(self, mock_click_secho):\n        self.github.user('invalid_user')\n        mock_click_secho.assert_called_with(\n            'Invalid user.',\n            fg=self.github.config.clr_error)\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.github.webbrowser.open')\n    def test_user_browser(self, mock_webbrowser_open, mock_click_secho):\n        self.github.user('invalid_user', browser=True)\n        mock_webbrowser_open.assert_called_with(\n            'https://github.com/invalid_user')\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.github.webbrowser.open')\n    def test_view_browser(self, mock_webbrowser_open, mock_click_secho):\n        self.github.config.load_urls = lambda x: ['user1/foo']\n        self.github.view(1, view_in_browser=True)\n        mock_webbrowser_open.assert_called_with(\n            'https://github.com/user1/foo')\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.github.GitHub.issue')\n    def test_view_issue(self, mock_github_issue, mock_click_secho):\n        self.github.config.load_urls = lambda x: ['user1/foo/issues/1']\n        self.github.view(0)\n        mock_github_issue.assert_called_with('user1/foo/1')\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.github.GitHub.repository')\n    def test_view_repo(self, mock_github_repository, mock_click_secho):\n        self.github.config.load_urls = lambda x: ['user1/foo']\n        self.github.view(0)\n        mock_github_repository.assert_called_with('user1/foo')\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.web_viewer.WebViewer.view_url')\n    def test_view_user(self, mock_view_url, mock_click_secho):\n        self.github.config.load_urls = lambda x: ['user1']\n        self.github.view(0)\n        mock_view_url.assert_called_with('https://github.com/user1')\n\n    def test_base_url(self):\n        self.github.config.enterprise_url = 'https://github.intra.example.com'\n        assert self.github.base_url == 'https://github.intra.example.com'\n        self.github.config.enterprise_url = None\n        assert self.github.base_url == self.github._base_url\n\n    def test_add_base_url(self):\n        expected = self.github.base_url + 'foo.html'\n        assert self.github.add_base_url('foo.html') == expected\n        assert self.github.add_base_url(expected) == expected\n", "comments": "      coding  utf 8        copyright 2015 donne martin  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   www apache org licenses license 2 0        license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license     option   comment           ", "content": "# -*- coding: utf-8 -*-\n\n# Copyright 2015 Donne Martin. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\n\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\n\nimport mock\n\nfrom compat import unittest\n\nfrom gitsome.github import GitHub\nfrom tests.mock_feed_parser import MockFeedParser\nfrom tests.mock_github_api import MockGitHubApi\nfrom tests.mock_pretty_date_time import pretty_date_time\nfrom tests.data.email import formatted_emails\nfrom tests.data.emoji import formatted_emojis\nfrom tests.data.events import formatted_events\nfrom tests.data.user import formatted_org, formatted_user, formatted_users\nfrom tests.data.gitignores import formatted_gitignores, formatted_gitignores_tip\nfrom tests.data.issue import formatted_issues, formatted_pull_requests\nfrom tests.data.license import formatted_licenses, formatted_licenses_tip\nfrom tests.data.thread import formatted_threads\nfrom tests.data.trends import formatted_trends\nfrom tests.data.user_feed import formatted_user_feed\n\n\nclass GitHubTest(unittest.TestCase):\n\n    def setUp(self):\n        self.github = GitHub()\n        self.github.config.api = MockGitHubApi()\n        self.github.formatter.pretty_dt = pretty_date_time\n        self.github.trend_parser = MockFeedParser()\n\n    def test_avatar_no_pil(self):\n        avatar_text = self.github.avatar(\n            'https://avatars.githubusercontent.com/u/583231?v=3', False)\n        assert avatar_text == 'PIL not found.\\n'\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_create_comment(self, mock_click_secho):\n        self.github.create_comment('user1/repo1/1', 'text')\n        mock_click_secho.assert_called_with(\n            'Created comment: text',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_create_comment_invalid_args(self, mock_click_secho):\n        self.github.create_comment('invalid/repo1/1', 'text')\n        mock_click_secho.assert_called_with(\n            'Error creating comment',\n            fg=self.github.config.clr_error)\n        self.github.create_comment('user1/repo1/foo', 'text')\n        mock_click_secho.assert_called_with(\n            'Expected argument: user/repo/# and option -t \"comment\".',\n            fg=self.github.config.clr_error)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_create_issue(self, mock_click_secho):\n        self.github.create_issue('user1/repo1', 'title', 'desc')\n        mock_click_secho.assert_called_with(\n            'Created issue: title\\ndesc',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_create_issue_no_desc(self, mock_click_secho):\n        self.github.create_issue('user1/repo1', 'title', issue_desc=None)\n        mock_click_secho.assert_called_with(\n            'Created issue: title\\n',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_create_issue_invalid_args(self, mock_click_secho):\n        self.github.create_issue('invalid/repo1', 'title', 'desc')\n        mock_click_secho.assert_called_with(\n            'Error creating issue.',\n            fg=self.github.config.clr_error)\n        self.github.create_issue('u', 'title', 'desc')\n        mock_click_secho.assert_called_with(\n            'Expected argument: user/repo and option -t \"title\".',\n            fg=self.github.config.clr_error)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_create_repo(self, mock_click_secho):\n        self.github.create_repo('name', 'desc', True)\n        mock_click_secho.assert_called_with(\n            'Created repo: name\\ndesc',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_create_repo_no_desc(self, mock_click_secho):\n        self.github.create_repo('name', repo_desc=None)\n        mock_click_secho.assert_called_with(\n            'Created repo: name\\n',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_create_repo_invalid_args(self, mock_click_secho):\n        self.github.create_repo('repo1', 'desc', True)\n        mock_click_secho.assert_called_with(\n            'Error creating repo: foobar',\n            fg=self.github.config.clr_error)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_emails(self, mock_click_secho):\n        self.github.emails()\n        mock_click_secho.assert_called_with(formatted_emails)\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.config.Config.prompt_news_feed')\n    def test_feed_config(self, mock_config_prompt_news_feed, mock_click_secho):\n        self.github.feed()\n        mock_config_prompt_news_feed.assert_called_with()\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_feed(self, mock_click_secho):\n        self.github.config.user_feed = 'user_feed'\n        self.github.feed()\n        mock_click_secho.assert_called_with(formatted_user_feed)\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.config.Config')\n    def test_feed_user(self, mock_config, mock_click_secho):\n        self.github.feed('user1')\n        mock_click_secho.assert_called_with(formatted_events)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_emojis(self, mock_click_secho):\n        self.github.emojis()\n        mock_click_secho.assert_called_with(formatted_emojis)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_followers(self, mock_click_secho):\n        self.github.followers('foo')\n        mock_click_secho.assert_called_with(formatted_users)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_following(self, mock_click_secho):\n        self.github.following('foo')\n        mock_click_secho.assert_called_with(formatted_users)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_gitignore_template(self, mock_click_secho):\n        self.github.gitignore_template('valid_language')\n        mock_click_secho.assert_called_with(\n            'template',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_gitignore_template_invalid(self, mock_click_secho):\n        self.github.gitignore_template('invalid_language')\n        mock_click_secho.assert_called_with(\n            ('Invalid case-sensitive template requested, run the '\n             'following command to see available templates:\\n'\n             '    gh gitignore-templates'),\n            fg=self.github.config.clr_error)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_gitignore_templates(self, mock_click_secho):\n        self.github.gitignore_templates()\n        mock_click_secho.assert_any_call(formatted_gitignores)\n        mock_click_secho.assert_any_call(formatted_gitignores_tip,\n                                         fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.web_viewer.WebViewer.view_url')\n    def test_issue(self, mock_view_url):\n        self.github.issue('user1/repo1/1')\n        mock_view_url.assert_called_with(\n            'https://github.com/user1/repo1/issues/1')\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_issue_invalid_args(self, mock_click_secho):\n        self.github.issue('user1/repo1/foo')\n        mock_click_secho.assert_called_with(\n            'Expected argument: user/repo/#.',\n            fg=self.github.config.clr_error)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_issues_setup(self, mock_click_secho):\n        self.github.issues_setup()\n        mock_click_secho.assert_called_with(formatted_issues)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_license(self, mock_click_secho):\n        self.github.license('valid_license')\n        mock_click_secho.assert_called_with(\n            'template',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_license_invalid(self, mock_click_secho):\n        self.github.license('invalid_license')\n        mock_click_secho.assert_called_with(\n            ('  Invalid case-sensitive license requested, run the '\n             'following command to see available licenses:\\n'\n             '    gh licenses'),\n            fg=self.github.config.clr_error)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_licenses(self, mock_click_secho):\n        self.github.licenses()\n        mock_click_secho.assert_any_call(formatted_licenses)\n        mock_click_secho.assert_any_call(formatted_licenses_tip,\n                                         fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_notifications(self, mock_click_secho):\n        self.github.notifications()\n        mock_click_secho.assert_called_with(formatted_threads)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_octocat(self, mock_click_secho):\n        self.github.octocat('foo\\\\nbar')\n        mock_click_secho.assert_called_with(\n            'foo\\nbar',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_pull_requests(self, mock_click_secho):\n        self.github.pull_requests()\n        mock_click_secho.assert_called_with(formatted_pull_requests)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_rate_limit(self, mock_click_secho):\n        self.github.rate_limit()\n        mock_click_secho.assert_called_with(\n            'Rate limit: 5000',\n            fg=self.github.config.clr_message)\n\n    @mock.patch('gitsome.web_viewer.WebViewer.view_url')\n    def test_repository(self, mock_view_url):\n        self.github.repository('user1/repo1')\n        mock_view_url.assert_called_with(\n            'https://github.com/user1/repo1')\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_repository_invalid(self, mock_click_secho):\n        self.github.repository('user1/repo1/1')\n        mock_click_secho.assert_called_with(\n            'Expected argument: user/repo.',\n            fg=self.github.config.clr_error)\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.github.GitHub.issues')\n    def test_search_issues(self, mock_github_issues, mock_click_secho):\n        self.github.search_issues('foo')\n        mock_github_issues.assert_called_with(\n            ['foobar', 'foobar', 'foobar'], 1000, False, sort=False)\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.github.GitHub.repositories')\n    def test_search_repos(self, mock_github_repositories, mock_click_secho):\n        self.github.search_repositories('foo', 'stars')\n        mock_github_repositories.assert_called_with(\n            ['foobar'], 1000, False, sort=False)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_trending(self, mock_click_secho):\n        self.github.trending('Python', False, False, False)\n        mock_click_secho.assert_called_with(formatted_trends)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_user(self, mock_click_secho):\n        self.github.user('user1')\n        mock_click_secho.assert_called_with(formatted_user)\n        self.github.user('user2')\n        mock_click_secho.assert_called_with(formatted_org)\n\n    @mock.patch('gitsome.github.click.secho')\n    def test_user_invalid(self, mock_click_secho):\n        self.github.user('invalid_user')\n        mock_click_secho.assert_called_with(\n            'Invalid user.',\n            fg=self.github.config.clr_error)\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.github.webbrowser.open')\n    def test_user_browser(self, mock_webbrowser_open, mock_click_secho):\n        self.github.user('invalid_user', browser=True)\n        mock_webbrowser_open.assert_called_with(\n            'https://github.com/invalid_user')\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.github.webbrowser.open')\n    def test_view_browser(self, mock_webbrowser_open, mock_click_secho):\n        self.github.config.load_urls = lambda x: ['user1/foo']\n        self.github.view(1, view_in_browser=True)\n        mock_webbrowser_open.assert_called_with(\n            'https://github.com/user1/foo')\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.github.GitHub.issue')\n    def test_view_issue(self, mock_github_issue, mock_click_secho):\n        self.github.config.load_urls = lambda x: ['user1/foo/issues/1']\n        self.github.view(0)\n        mock_github_issue.assert_called_with('user1/foo/1')\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.github.GitHub.repository')\n    def test_view_repo(self, mock_github_repository, mock_click_secho):\n        self.github.config.load_urls = lambda x: ['user1/foo']\n        self.github.view(0)\n        mock_github_repository.assert_called_with('user1/foo')\n\n    @mock.patch('gitsome.github.click.secho')\n    @mock.patch('gitsome.web_viewer.WebViewer.view_url')\n    def test_view_user(self, mock_view_url, mock_click_secho):\n        self.github.config.load_urls = lambda x: ['user1']\n        self.github.view(0)\n        mock_view_url.assert_called_with('https://github.com/user1')\n\n    def test_base_url(self):\n        self.github.config.enterprise_url = 'https://github.intra.example.com'\n        assert self.github.base_url == 'https://github.intra.example.com'\n        self.github.config.enterprise_url = None\n        assert self.github.base_url == self.github._base_url\n\n    def test_add_base_url(self):\n        expected = self.github.base_url + 'foo.html'\n        assert self.github.add_base_url('foo.html') == expected\n        assert self.github.add_base_url(expected) == expected\n", "description": "A supercharged Git/GitHub command line interface (CLI).  An official integration for GitHub and GitHub Enterprise: https://github.com/works-with/category/desktop-tools", "file_name": "test_github.py", "id": "cd6bea91b4d0218316f9621f9071f0ac", "language": "Python", "project_name": "gitsome", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-gitsome/donnemartin-gitsome-5751a31/tests/test_github.py", "save_time": "", "source": "", "update_at": "2018-03-18T02:47:11Z", "url": "https://github.com/donnemartin/gitsome", "wiki": true}