{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport ast\n\nimport tensorflow as tf\n\nfrom magenta.models.arbitrary_image_stylization import arbitrary_image_stylization_build_model as build_model\nfrom magenta.models.image_stylization import image_utils\n\nslim = tf.contrib.slim\n\nDEFAULT_CONTENT_WEIGHTS = '{\"vgg_16/conv3\": 1.0}'\nDEFAULT_STYLE_WEIGHTS = ('{\"vgg_16/conv1\": 1e-3, \"vgg_16/conv2\": 1e-3,'\n                         ' \"vgg_16/conv3\": 1e-3, \"vgg_16/conv4\": 1e-3}')\n\nflags = tf.app.flags\nflags.DEFINE_float('total_variation_weight', 1e4, 'Total variation weight')\nflags.DEFINE_string('content_weights', DEFAULT_CONTENT_WEIGHTS,\n                    'Content weights')\nflags.DEFINE_string('style_weights', DEFAULT_STYLE_WEIGHTS, 'Style weights')\nflags.DEFINE_integer('batch_size', 16, 'Batch size')\nflags.DEFINE_integer('image_size', 256, 'Image size.')\nflags.DEFINE_integer('eval_interval_secs', 60,\n                     'Frequency, in seconds, at which evaluation is run.')\nflags.DEFINE_integer('num_evaluation_styles', 1024,\n                     'Total number of evaluation styles.')\nflags.DEFINE_string('eval_dir', None,\n                    'Directory where the results are saved to.')\nflags.DEFINE_string('checkpoint_dir', None,\n                    'Directory for checkpoints and summaries')\nflags.DEFINE_string('master', '', 'BNS name of the TensorFlow master to use.')\nflags.DEFINE_string('eval_name', 'eval', 'Name of evaluation.')\nflags.DEFINE_string('eval_style_dataset_file', None, 'path to the evaluation'\n                    'style dataset file.')\nFLAGS = flags.FLAGS\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  with tf.Graph().as_default():\n     Loads content images.\n    eval_content_inputs_, _ = image_utils.imagenet_inputs(\n        FLAGS.batch_size, FLAGS.image_size)\n\n     Process style and content weight flags.\n    content_weights = ast.literal_eval(FLAGS.content_weights)\n    style_weights = ast.literal_eval(FLAGS.style_weights)\n\n     Loads evaluation style images.\n    eval_style_inputs_, _, _ = image_utils.arbitrary_style_image_inputs(\n        FLAGS.eval_style_dataset_file,\n        batch_size=FLAGS.batch_size,\n        image_size=FLAGS.image_size,\n        center_crop=True,\n        shuffle=True,\n        augment_style_images=False,\n        random_style_image_size=False)\n\n     Computes stylized noise.\n    stylized_noise, _, _, _ = build_model.build_model(\n        tf.random_uniform(\n            [min(4, FLAGS.batch_size), FLAGS.image_size, FLAGS.image_size, 3]),\n        tf.slice(eval_style_inputs_, [0, 0, 0, 0],\n                 [min(4, FLAGS.batch_size), -1, -1, -1]),\n        trainable=False,\n        is_training=False,\n        reuse=None,\n        inception_end_point='Mixed_6e',\n        style_prediction_bottleneck=100,\n        adds_losses=False)\n\n     Computes stylized images.\n    stylized_images, _, loss_dict, _ = build_model.build_model(\n        eval_content_inputs_,\n        eval_style_inputs_,\n        trainable=False,\n        is_training=False,\n        reuse=True,\n        inception_end_point='Mixed_6e',\n        style_prediction_bottleneck=100,\n        adds_losses=True,\n        content_weights=content_weights,\n        style_weights=style_weights,\n        total_variation_weight=FLAGS.total_variation_weight)\n\n     Adds Image summaries to the tensorboard.\n    tf.summary.image('image/{}/0_eval_content_inputs'.format(FLAGS.eval_name),\n                     eval_content_inputs_, 3)\n    tf.summary.image('image/{}/1_eval_style_inputs'.format(FLAGS.eval_name),\n                     eval_style_inputs_, 3)\n    tf.summary.image('image/{}/2_eval_stylized_images'.format(FLAGS.eval_name),\n                     stylized_images, 3)\n    tf.summary.image('image/{}/3_stylized_noise'.format(FLAGS.eval_name),\n                     stylized_noise, 3)\n\n    metrics = {}\n    for key, value in loss_dict.iteritems():\n      metrics[key] = tf.metrics.mean(value)\n\n    names_values, names_updates = slim.metrics.aggregate_metric_map(metrics)\n    for name, value in names_values.iteritems():\n      slim.summaries.add_scalar_summary(value, name, print_summary=True)\n    eval_op = names_updates.values()\n    num_evals = FLAGS.num_evaluation_styles / FLAGS.batch_size\n\n    slim.evaluation.evaluation_loop(\n        master=FLAGS.master,\n        checkpoint_dir=FLAGS.checkpoint_dir,\n        logdir=FLAGS.eval_dir,\n        eval_op=eval_op,\n        num_evals=num_evals,\n        eval_interval_secs=FLAGS.eval_interval_secs)\n\n\nif __name__ == '__main__':\n  tf.app.run()\n\n", "comments": "   evaluates real time arbitrary image stylization model   for example usage see readme md         copyright 2017 google inc  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license          http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license     loads content images     process style content weight flags     loads evaluation style images     computes stylized noise     computes stylized images     adds image summaries tensorboard  ", "content": "# Copyright 2017 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Evaluates a real-time arbitrary image stylization model.\n\nFor example of usage see README.md.\n\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport ast\n\nimport tensorflow as tf\n\nfrom magenta.models.arbitrary_image_stylization import arbitrary_image_stylization_build_model as build_model\nfrom magenta.models.image_stylization import image_utils\n\nslim = tf.contrib.slim\n\nDEFAULT_CONTENT_WEIGHTS = '{\"vgg_16/conv3\": 1.0}'\nDEFAULT_STYLE_WEIGHTS = ('{\"vgg_16/conv1\": 1e-3, \"vgg_16/conv2\": 1e-3,'\n                         ' \"vgg_16/conv3\": 1e-3, \"vgg_16/conv4\": 1e-3}')\n\nflags = tf.app.flags\nflags.DEFINE_float('total_variation_weight', 1e4, 'Total variation weight')\nflags.DEFINE_string('content_weights', DEFAULT_CONTENT_WEIGHTS,\n                    'Content weights')\nflags.DEFINE_string('style_weights', DEFAULT_STYLE_WEIGHTS, 'Style weights')\nflags.DEFINE_integer('batch_size', 16, 'Batch size')\nflags.DEFINE_integer('image_size', 256, 'Image size.')\nflags.DEFINE_integer('eval_interval_secs', 60,\n                     'Frequency, in seconds, at which evaluation is run.')\nflags.DEFINE_integer('num_evaluation_styles', 1024,\n                     'Total number of evaluation styles.')\nflags.DEFINE_string('eval_dir', None,\n                    'Directory where the results are saved to.')\nflags.DEFINE_string('checkpoint_dir', None,\n                    'Directory for checkpoints and summaries')\nflags.DEFINE_string('master', '', 'BNS name of the TensorFlow master to use.')\nflags.DEFINE_string('eval_name', 'eval', 'Name of evaluation.')\nflags.DEFINE_string('eval_style_dataset_file', None, 'path to the evaluation'\n                    'style dataset file.')\nFLAGS = flags.FLAGS\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  with tf.Graph().as_default():\n    # Loads content images.\n    eval_content_inputs_, _ = image_utils.imagenet_inputs(\n        FLAGS.batch_size, FLAGS.image_size)\n\n    # Process style and content weight flags.\n    content_weights = ast.literal_eval(FLAGS.content_weights)\n    style_weights = ast.literal_eval(FLAGS.style_weights)\n\n    # Loads evaluation style images.\n    eval_style_inputs_, _, _ = image_utils.arbitrary_style_image_inputs(\n        FLAGS.eval_style_dataset_file,\n        batch_size=FLAGS.batch_size,\n        image_size=FLAGS.image_size,\n        center_crop=True,\n        shuffle=True,\n        augment_style_images=False,\n        random_style_image_size=False)\n\n    # Computes stylized noise.\n    stylized_noise, _, _, _ = build_model.build_model(\n        tf.random_uniform(\n            [min(4, FLAGS.batch_size), FLAGS.image_size, FLAGS.image_size, 3]),\n        tf.slice(eval_style_inputs_, [0, 0, 0, 0],\n                 [min(4, FLAGS.batch_size), -1, -1, -1]),\n        trainable=False,\n        is_training=False,\n        reuse=None,\n        inception_end_point='Mixed_6e',\n        style_prediction_bottleneck=100,\n        adds_losses=False)\n\n    # Computes stylized images.\n    stylized_images, _, loss_dict, _ = build_model.build_model(\n        eval_content_inputs_,\n        eval_style_inputs_,\n        trainable=False,\n        is_training=False,\n        reuse=True,\n        inception_end_point='Mixed_6e',\n        style_prediction_bottleneck=100,\n        adds_losses=True,\n        content_weights=content_weights,\n        style_weights=style_weights,\n        total_variation_weight=FLAGS.total_variation_weight)\n\n    # Adds Image summaries to the tensorboard.\n    tf.summary.image('image/{}/0_eval_content_inputs'.format(FLAGS.eval_name),\n                     eval_content_inputs_, 3)\n    tf.summary.image('image/{}/1_eval_style_inputs'.format(FLAGS.eval_name),\n                     eval_style_inputs_, 3)\n    tf.summary.image('image/{}/2_eval_stylized_images'.format(FLAGS.eval_name),\n                     stylized_images, 3)\n    tf.summary.image('image/{}/3_stylized_noise'.format(FLAGS.eval_name),\n                     stylized_noise, 3)\n\n    metrics = {}\n    for key, value in loss_dict.iteritems():\n      metrics[key] = tf.metrics.mean(value)\n\n    names_values, names_updates = slim.metrics.aggregate_metric_map(metrics)\n    for name, value in names_values.iteritems():\n      slim.summaries.add_scalar_summary(value, name, print_summary=True)\n    eval_op = names_updates.values()\n    num_evals = FLAGS.num_evaluation_styles / FLAGS.batch_size\n\n    slim.evaluation.evaluation_loop(\n        master=FLAGS.master,\n        checkpoint_dir=FLAGS.checkpoint_dir,\n        logdir=FLAGS.eval_dir,\n        eval_op=eval_op,\n        num_evals=num_evals,\n        eval_interval_secs=FLAGS.eval_interval_secs)\n\n\nif __name__ == '__main__':\n  tf.app.run()\n\n", "description": "Magenta: Music and Art Generation with Machine Intelligence", "file_name": "arbitrary_image_stylization_evaluate.py", "id": "eabb20e1914163a71a285d191c44a8ae", "language": "Python", "project_name": "magenta", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-magenta/tensorflow-magenta-ca73164/magenta/models/arbitrary_image_stylization/arbitrary_image_stylization_evaluate.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:00:14Z", "url": "https://github.com/tensorflow/magenta", "wiki": false}