{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    xpath_text,\n    parse_duration,\n    ExtractorError,\n)\n\n\nclass EyedoTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?eyedo\\.tv/[^/]+/(?:\n    _TEST = {\n        'url': 'https://www.eyedo.tv/en-US/\n        'md5': 'ba14f17995cdfc20c36ba40e21bf73f7',\n        'info_dict': {\n            'id': '16301',\n            'ext': 'mp4',\n            'title': 'Journ\u00e9e du conseil scientifique de l\\'Afnic 2015',\n            'description': 'md5:4abe07293b2f73efc6e1c37028d58c98',\n            'uploader': 'Afnic Live',\n            'uploader_id': '8023',\n        }\n    }\n    _ROOT_URL = 'http://live.eyedo.net:1935/'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._download_xml('http://eyedo.tv/api/live/GetLive/%s' % video_id, video_id)\n\n        def _add_ns(path):\n            return self._xpath_ns(path, 'http://schemas.datacontract.org/2004/07/EyeDo.Core.Implementation.Web.ViewModels.Api')\n\n        title = xpath_text(video_data, _add_ns('Titre'), 'title', True)\n        state_live_code = xpath_text(video_data, _add_ns('StateLiveCode'), 'title', True)\n        if state_live_code == 'avenir':\n            raise ExtractorError(\n                '%s said: We\\'re sorry, but this video is not yet available.' % self.IE_NAME,\n                expected=True)\n\n        is_live = state_live_code == 'live'\n        m3u8_url = None\n        \n        if is_live:\n            if xpath_text(video_data, 'Cdn') == 'true':\n                m3u8_url = 'http://rrr.sz.xlcdn.com/?account=eyedo&file=A%s&type=live&service=wowza&protocol=http&output=playlist.m3u8' % video_id\n            else:\n                m3u8_url = self._ROOT_URL + 'w/%s/eyedo_720p/playlist.m3u8' % video_id\n        else:\n            m3u8_url = self._ROOT_URL + 'replay-w/%s/mp4:%s.mp4/playlist.m3u8' % (video_id, video_id)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', 'm3u8_native'),\n            'description': xpath_text(video_data, _add_ns('Description')),\n            'duration': parse_duration(xpath_text(video_data, _add_ns('Duration'))),\n            'uploader': xpath_text(video_data, _add_ns('Createur')),\n            'uploader_id': xpath_text(video_data, _add_ns('CreateurId')),\n            'chapter': xpath_text(video_data, _add_ns('ChapitreTitre')),\n            'chapter_id': xpath_text(video_data, _add_ns('ChapitreId')),\n        }\n", "comments": "# coding: utf-8\n#!/)?Live/Detail/(?P<id>[0-9]+)'\n#!/Live/Detail/16301',\n# http://eyedo.tv/Content/Html5/Scripts/html5view.js\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    xpath_text,\n    parse_duration,\n    ExtractorError,\n)\n\n\nclass EyedoTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?eyedo\\.tv/[^/]+/(?:#!/)?Live/Detail/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'https://www.eyedo.tv/en-US/#!/Live/Detail/16301',\n        'md5': 'ba14f17995cdfc20c36ba40e21bf73f7',\n        'info_dict': {\n            'id': '16301',\n            'ext': 'mp4',\n            'title': 'Journ\u00e9e du conseil scientifique de l\\'Afnic 2015',\n            'description': 'md5:4abe07293b2f73efc6e1c37028d58c98',\n            'uploader': 'Afnic Live',\n            'uploader_id': '8023',\n        }\n    }\n    _ROOT_URL = 'http://live.eyedo.net:1935/'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._download_xml('http://eyedo.tv/api/live/GetLive/%s' % video_id, video_id)\n\n        def _add_ns(path):\n            return self._xpath_ns(path, 'http://schemas.datacontract.org/2004/07/EyeDo.Core.Implementation.Web.ViewModels.Api')\n\n        title = xpath_text(video_data, _add_ns('Titre'), 'title', True)\n        state_live_code = xpath_text(video_data, _add_ns('StateLiveCode'), 'title', True)\n        if state_live_code == 'avenir':\n            raise ExtractorError(\n                '%s said: We\\'re sorry, but this video is not yet available.' % self.IE_NAME,\n                expected=True)\n\n        is_live = state_live_code == 'live'\n        m3u8_url = None\n        # http://eyedo.tv/Content/Html5/Scripts/html5view.js\n        if is_live:\n            if xpath_text(video_data, 'Cdn') == 'true':\n                m3u8_url = 'http://rrr.sz.xlcdn.com/?account=eyedo&file=A%s&type=live&service=wowza&protocol=http&output=playlist.m3u8' % video_id\n            else:\n                m3u8_url = self._ROOT_URL + 'w/%s/eyedo_720p/playlist.m3u8' % video_id\n        else:\n            m3u8_url = self._ROOT_URL + 'replay-w/%s/mp4:%s.mp4/playlist.m3u8' % (video_id, video_id)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', 'm3u8_native'),\n            'description': xpath_text(video_data, _add_ns('Description')),\n            'duration': parse_duration(xpath_text(video_data, _add_ns('Duration'))),\n            'uploader': xpath_text(video_data, _add_ns('Createur')),\n            'uploader_id': xpath_text(video_data, _add_ns('CreateurId')),\n            'chapter': xpath_text(video_data, _add_ns('ChapitreTitre')),\n            'chapter_id': xpath_text(video_data, _add_ns('ChapitreId')),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "eyedotv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/eyedotv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}