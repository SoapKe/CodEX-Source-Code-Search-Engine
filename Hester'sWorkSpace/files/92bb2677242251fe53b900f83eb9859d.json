{"author": "ansible", "code": " Copyright (c) 2017 Cisco and/or its affiliates.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import (absolute_import, division, print_function)\n\nimport os\nimport json\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils import basic\nfrom ansible.module_utils._text import to_bytes\n\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef set_module_args(args):\n    args = json.dumps({'ANSIBLE_MODULE_ARGS': args})\n    basic._ANSIBLE_ARGS = to_bytes(args)\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n    if path not in fixture_data:\n        with open(path) as f:\n            data = json.load(f)\n        fixture_data[path] = data\n    return fixture_data[path]\n\n\nclass MockResponse(object):\n    def __init__(self, method, params, code, body, headers=None):\n        if headers is None:\n            headers = {}\n\n        self.method = method\n        self.params = params\n\n        self.code = code\n        self.body = body\n        self.headers = dict(headers)\n\n    def read(self):\n        return self.body\n\n\ndef mock_call(calls, url, data=None, headers=None, method=None):\n    result = calls[0]\n    del calls[0]\n\n    request = json.loads(data)\n    if result.method != request['method']:\n        raise ValueError('expected method {0}({1}), got {2}({3})'.format(\n            result.method, result.params,\n            request['method'], request['params']))\n\n    for key, value in result.params.items():\n        if key not in request['params']:\n            raise ValueError('{0} not in parameters'.format(key))\n        if value != request['params'][key]:\n            raise ValueError('expected {0} to be {1}, got {2}'.format(\n                key, value, request['params'][key]))\n\n    return result\n\n\nclass AnsibleExitJson(Exception):\n    pass\n\n\nclass AnsibleFailJson(Exception):\n    pass\n\n\nclass TestNsoModule(unittest.TestCase):\n\n    def execute_module(self, failed=False, changed=False, **kwargs):\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        for key, value in kwargs.items():\n            self.assertEqual(value, result[key])\n\n        return result\n\n    def failed(self):\n        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'fail_json', fail_json):\n            with self.assertRaises(AnsibleFailJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result\n\n    def changed(self, changed=False):\n        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'exit_json', exit_json):\n            with self.assertRaises(AnsibleExitJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result\n", "comments": "  copyright (c) 2017 cisco affiliates        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses    ", "content": "# Copyright (c) 2017 Cisco and/or its affiliates.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import (absolute_import, division, print_function)\n\nimport os\nimport json\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils import basic\nfrom ansible.module_utils._text import to_bytes\n\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef set_module_args(args):\n    args = json.dumps({'ANSIBLE_MODULE_ARGS': args})\n    basic._ANSIBLE_ARGS = to_bytes(args)\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n    if path not in fixture_data:\n        with open(path) as f:\n            data = json.load(f)\n        fixture_data[path] = data\n    return fixture_data[path]\n\n\nclass MockResponse(object):\n    def __init__(self, method, params, code, body, headers=None):\n        if headers is None:\n            headers = {}\n\n        self.method = method\n        self.params = params\n\n        self.code = code\n        self.body = body\n        self.headers = dict(headers)\n\n    def read(self):\n        return self.body\n\n\ndef mock_call(calls, url, data=None, headers=None, method=None):\n    result = calls[0]\n    del calls[0]\n\n    request = json.loads(data)\n    if result.method != request['method']:\n        raise ValueError('expected method {0}({1}), got {2}({3})'.format(\n            result.method, result.params,\n            request['method'], request['params']))\n\n    for key, value in result.params.items():\n        if key not in request['params']:\n            raise ValueError('{0} not in parameters'.format(key))\n        if value != request['params'][key]:\n            raise ValueError('expected {0} to be {1}, got {2}'.format(\n                key, value, request['params'][key]))\n\n    return result\n\n\nclass AnsibleExitJson(Exception):\n    pass\n\n\nclass AnsibleFailJson(Exception):\n    pass\n\n\nclass TestNsoModule(unittest.TestCase):\n\n    def execute_module(self, failed=False, changed=False, **kwargs):\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        for key, value in kwargs.items():\n            self.assertEqual(value, result[key])\n\n        return result\n\n    def failed(self):\n        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'fail_json', fail_json):\n            with self.assertRaises(AnsibleFailJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result\n\n    def changed(self, changed=False):\n        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'exit_json', exit_json):\n            with self.assertRaises(AnsibleExitJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "nso_module.py", "id": "92bb2677242251fe53b900f83eb9859d", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/nso/nso_module.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}