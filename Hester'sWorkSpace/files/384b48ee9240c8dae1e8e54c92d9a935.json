{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass RadioFranceIE(InfoExtractor):\n    _VALID_URL = r'^https?://maison\\.radiofrance\\.fr/radiovisions/(?P<id>[^?\n    IE_NAME = 'radiofrance'\n\n    _TEST = {\n        'url': 'http://maison.radiofrance.fr/radiovisions/one-one',\n        'md5': 'bdbb28ace95ed0e04faab32ba3160daf',\n        'info_dict': {\n            'id': 'one-one',\n            'ext': 'ogg',\n            'title': 'One to one',\n            'description': \"Plut\u00f4t que d'imaginer la radio de demain comme technologie ou comme cr\u00e9ation de contenu, je veux montrer que quelles que soient ses \u00e9volutions, j'ai l'intime conviction que la radio continuera d'\u00eatre un grand m\u00e9dia de proximit\u00e9 pour les auditeurs.\",\n            'uploader': 'Thomas Hercou\u00ebt',\n        },\n    }\n\n    def _real_extract(self, url):\n        m = re.match(self._VALID_URL, url)\n        video_id = m.group('id')\n\n        webpage = self._download_webpage(url, video_id)\n        title = self._html_search_regex(r'<h1>(.*?)</h1>', webpage, 'title')\n        description = self._html_search_regex(\n            r'<div class=\"bloc_page_wrapper\"><div class=\"text\">(.*?)</div>',\n            webpage, 'description', fatal=False)\n        uploader = self._html_search_regex(\n            r'<div class=\"credit\">&nbsp;&nbsp;&copy;&nbsp;(.*?)</div>',\n            webpage, 'uploader', fatal=False)\n\n        formats_str = self._html_search_regex(\n            r'class=\"jp-jplayer[^\"]*\" data-source=\"([^\"]+)\">',\n            webpage, 'audio URLs')\n        formats = [\n            {\n                'format_id': fm[0],\n                'url': fm[1],\n                'vcodec': 'none',\n                'preference': i,\n            }\n            for i, fm in\n            enumerate(re.findall(r\"([a-z0-9]+)\\s*:\\s*'([^']+)'\", formats_str))\n        ]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': description,\n            'uploader': uploader,\n        }\n", "comments": "# coding: utf-8\n#]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass RadioFranceIE(InfoExtractor):\n    _VALID_URL = r'^https?://maison\\.radiofrance\\.fr/radiovisions/(?P<id>[^?#]+)'\n    IE_NAME = 'radiofrance'\n\n    _TEST = {\n        'url': 'http://maison.radiofrance.fr/radiovisions/one-one',\n        'md5': 'bdbb28ace95ed0e04faab32ba3160daf',\n        'info_dict': {\n            'id': 'one-one',\n            'ext': 'ogg',\n            'title': 'One to one',\n            'description': \"Plut\u00f4t que d'imaginer la radio de demain comme technologie ou comme cr\u00e9ation de contenu, je veux montrer que quelles que soient ses \u00e9volutions, j'ai l'intime conviction que la radio continuera d'\u00eatre un grand m\u00e9dia de proximit\u00e9 pour les auditeurs.\",\n            'uploader': 'Thomas Hercou\u00ebt',\n        },\n    }\n\n    def _real_extract(self, url):\n        m = re.match(self._VALID_URL, url)\n        video_id = m.group('id')\n\n        webpage = self._download_webpage(url, video_id)\n        title = self._html_search_regex(r'<h1>(.*?)</h1>', webpage, 'title')\n        description = self._html_search_regex(\n            r'<div class=\"bloc_page_wrapper\"><div class=\"text\">(.*?)</div>',\n            webpage, 'description', fatal=False)\n        uploader = self._html_search_regex(\n            r'<div class=\"credit\">&nbsp;&nbsp;&copy;&nbsp;(.*?)</div>',\n            webpage, 'uploader', fatal=False)\n\n        formats_str = self._html_search_regex(\n            r'class=\"jp-jplayer[^\"]*\" data-source=\"([^\"]+)\">',\n            webpage, 'audio URLs')\n        formats = [\n            {\n                'format_id': fm[0],\n                'url': fm[1],\n                'vcodec': 'none',\n                'preference': i,\n            }\n            for i, fm in\n            enumerate(re.findall(r\"([a-z0-9]+)\\s*:\\s*'([^']+)'\", formats_str))\n        ]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': description,\n            'uploader': uploader,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "radiofrance.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/radiofrance.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}