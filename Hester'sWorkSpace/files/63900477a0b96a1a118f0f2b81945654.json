{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom django.core import mail\nfrom mock import patch\nfrom social_auth.models import UserSocialAuth\n\nfrom sentry.exceptions import InvalidIdentity, PluginError\nfrom sentry.models import Commit, Deploy, Release, ReleaseHeadCommit, Repository\nfrom sentry.tasks.commits import fetch_commits, handle_invalid_identity\nfrom sentry.testutils import TestCase\n\n\nclass FetchCommitsTest(TestCase):\n    def test_simple(self):\n        self.login_as(user=self.user)\n        org = self.create_organization(owner=self.user, name='baz')\n\n        repo = Repository.objects.create(\n            name='example',\n            provider='dummy',\n            organization_id=org.id,\n        )\n        release = Release.objects.create(\n            organization_id=org.id,\n            version='abcabcabc',\n        )\n\n        commit = Commit.objects.create(\n            organization_id=org.id,\n            repository_id=repo.id,\n            key='a' * 40,\n        )\n\n        ReleaseHeadCommit.objects.create(\n            organization_id=org.id,\n            repository_id=repo.id,\n            release=release,\n            commit=commit,\n        )\n\n        refs = [{\n            'repository': repo.name,\n            'commit': 'b' * 40,\n        }]\n\n        release2 = Release.objects.create(\n            organization_id=org.id,\n            version='12345678',\n        )\n\n        deploy = Deploy.objects.create(\n            organization_id=org.id,\n            release=release2,\n            environment_id=5,\n        )\n\n        with self.tasks():\n            with patch.object(Deploy, 'notify_if_ready') as mock_notify_if_ready:\n                fetch_commits(\n                    release_id=release2.id,\n                    user_id=self.user.id,\n                    refs=refs,\n                    previous_release_id=release.id,\n                )\n\n        commit_list = list(\n            Commit.objects.filter(\n                releasecommit__release=release2,\n            ).order_by('releasecommit__order')\n        )\n\n        \n        assert len(commit_list) == 3\n        assert commit_list[0].repository_id == repo.id\n        assert commit_list[0].organization_id == org.id\n        assert commit_list[0].key == '62de626b7c7cfb8e77efb4273b1a3df4123e6216'\n        assert commit_list[1].repository_id == repo.id\n        assert commit_list[1].organization_id == org.id\n        assert commit_list[1].key == '58de626b7c7cfb8e77efb4273b1a3df4123e6345'\n        assert commit_list[2].repository_id == repo.id\n        assert commit_list[2].organization_id == org.id\n        assert commit_list[2].key == 'b' * 40\n\n        mock_notify_if_ready.assert_called_with(deploy.id, fetch_complete=True)\n\n    @patch('sentry.tasks.commits.handle_invalid_identity')\n    @patch('sentry.plugins.providers.dummy.repository.DummyRepositoryProvider.compare_commits')\n    def test_fetch_error_invalid_identity(self, mock_compare_commits, mock_handle_invalid_identity):\n        self.login_as(user=self.user)\n        org = self.create_organization(owner=self.user, name='baz')\n\n        repo = Repository.objects.create(\n            name='example',\n            provider='dummy',\n            organization_id=org.id,\n        )\n        release = Release.objects.create(\n            organization_id=org.id,\n            version='abcabcabc',\n        )\n\n        commit = Commit.objects.create(\n            organization_id=org.id,\n            repository_id=repo.id,\n            key='a' * 40,\n        )\n\n        ReleaseHeadCommit.objects.create(\n            organization_id=org.id,\n            repository_id=repo.id,\n            release=release,\n            commit=commit,\n        )\n\n        refs = [{\n            'repository': repo.name,\n            'commit': 'b' * 40,\n        }]\n\n        release2 = Release.objects.create(\n            organization_id=org.id,\n            version='12345678',\n        )\n\n        usa = UserSocialAuth.objects.create(\n            user=self.user,\n            provider='dummy',\n        )\n\n        mock_compare_commits.side_effect = InvalidIdentity(identity=usa)\n\n        fetch_commits(\n            release_id=release2.id,\n            user_id=self.user.id,\n            refs=refs,\n            previous_release_id=release.id,\n        )\n\n        mock_handle_invalid_identity.assert_called_once_with(\n            identity=usa,\n            commit_failure=True,\n        )\n\n    @patch('sentry.plugins.providers.dummy.repository.DummyRepositoryProvider.compare_commits')\n    def test_fetch_error_plugin_error(self, mock_compare_commits):\n        self.login_as(user=self.user)\n        org = self.create_organization(owner=self.user, name='baz')\n\n        repo = Repository.objects.create(\n            name='example',\n            provider='dummy',\n            organization_id=org.id,\n        )\n        release = Release.objects.create(\n            organization_id=org.id,\n            version='abcabcabc',\n        )\n\n        commit = Commit.objects.create(\n            organization_id=org.id,\n            repository_id=repo.id,\n            key='a' * 40,\n        )\n\n        ReleaseHeadCommit.objects.create(\n            organization_id=org.id,\n            repository_id=repo.id,\n            release=release,\n            commit=commit,\n        )\n\n        refs = [{\n            'repository': repo.name,\n            'commit': 'b' * 40,\n        }]\n\n        release2 = Release.objects.create(\n            organization_id=org.id,\n            version='12345678',\n        )\n\n        UserSocialAuth.objects.create(\n            user=self.user,\n            provider='dummy',\n        )\n\n        mock_compare_commits.side_effect = Exception('secrets')\n\n        with self.tasks():\n            fetch_commits(\n                release_id=release2.id,\n                user_id=self.user.id,\n                refs=refs,\n                previous_release_id=release.id,\n            )\n\n        msg = mail.outbox[-1]\n        assert msg.subject == 'Unable to Fetch Commits'\n        assert msg.to == [self.user.email]\n        assert 'secrets' not in msg.body\n\n    @patch('sentry.plugins.providers.dummy.repository.DummyRepositoryProvider.compare_commits')\n    def test_fetch_error_random_exception(self, mock_compare_commits):\n        self.login_as(user=self.user)\n        org = self.create_organization(owner=self.user, name='baz')\n\n        repo = Repository.objects.create(\n            name='example',\n            provider='dummy',\n            organization_id=org.id,\n        )\n        release = Release.objects.create(\n            organization_id=org.id,\n            version='abcabcabc',\n        )\n\n        commit = Commit.objects.create(\n            organization_id=org.id,\n            repository_id=repo.id,\n            key='a' * 40,\n        )\n\n        ReleaseHeadCommit.objects.create(\n            organization_id=org.id,\n            repository_id=repo.id,\n            release=release,\n            commit=commit,\n        )\n\n        refs = [{\n            'repository': repo.name,\n            'commit': 'b' * 40,\n        }]\n\n        release2 = Release.objects.create(\n            organization_id=org.id,\n            version='12345678',\n        )\n\n        UserSocialAuth.objects.create(\n            user=self.user,\n            provider='dummy',\n        )\n\n        mock_compare_commits.side_effect = PluginError('You can read me')\n\n        with self.tasks():\n            fetch_commits(\n                release_id=release2.id,\n                user_id=self.user.id,\n                refs=refs,\n                previous_release_id=release.id,\n            )\n\n        msg = mail.outbox[-1]\n        assert msg.subject == 'Unable to Fetch Commits'\n        assert msg.to == [self.user.email]\n        assert 'You can read me' in msg.body\n\n\nclass HandleInvalidIdentityTest(TestCase):\n    def test_simple(self):\n        usa = UserSocialAuth.objects.create(\n            user=self.user,\n            provider='dummy',\n        )\n\n        with self.tasks():\n            handle_invalid_identity(usa)\n\n        assert not UserSocialAuth.objects.filter(id=usa.id).exists()\n\n        msg = mail.outbox[-1]\n        assert msg.subject == 'Action Required'\n        assert msg.to == [self.user.email]\n\n    def test_commit_failure(self):\n        usa = UserSocialAuth.objects.create(\n            user=self.user,\n            provider='dummy',\n        )\n\n        with self.tasks():\n            handle_invalid_identity(usa, commit_failure=True)\n\n        assert not UserSocialAuth.objects.filter(id=usa.id).exists()\n\n        msg = mail.outbox[-1]\n        assert msg.subject == 'Unable to Fetch Commits'\n        assert msg.to == [self.user.email]\n", "comments": "  see dummyrepositoryprovider compare commits ", "content": "from __future__ import absolute_import\n\nfrom django.core import mail\nfrom mock import patch\nfrom social_auth.models import UserSocialAuth\n\nfrom sentry.exceptions import InvalidIdentity, PluginError\nfrom sentry.models import Commit, Deploy, Release, ReleaseHeadCommit, Repository\nfrom sentry.tasks.commits import fetch_commits, handle_invalid_identity\nfrom sentry.testutils import TestCase\n\n\nclass FetchCommitsTest(TestCase):\n    def test_simple(self):\n        self.login_as(user=self.user)\n        org = self.create_organization(owner=self.user, name='baz')\n\n        repo = Repository.objects.create(\n            name='example',\n            provider='dummy',\n            organization_id=org.id,\n        )\n        release = Release.objects.create(\n            organization_id=org.id,\n            version='abcabcabc',\n        )\n\n        commit = Commit.objects.create(\n            organization_id=org.id,\n            repository_id=repo.id,\n            key='a' * 40,\n        )\n\n        ReleaseHeadCommit.objects.create(\n            organization_id=org.id,\n            repository_id=repo.id,\n            release=release,\n            commit=commit,\n        )\n\n        refs = [{\n            'repository': repo.name,\n            'commit': 'b' * 40,\n        }]\n\n        release2 = Release.objects.create(\n            organization_id=org.id,\n            version='12345678',\n        )\n\n        deploy = Deploy.objects.create(\n            organization_id=org.id,\n            release=release2,\n            environment_id=5,\n        )\n\n        with self.tasks():\n            with patch.object(Deploy, 'notify_if_ready') as mock_notify_if_ready:\n                fetch_commits(\n                    release_id=release2.id,\n                    user_id=self.user.id,\n                    refs=refs,\n                    previous_release_id=release.id,\n                )\n\n        commit_list = list(\n            Commit.objects.filter(\n                releasecommit__release=release2,\n            ).order_by('releasecommit__order')\n        )\n\n        # see DummyRepositoryProvider.compare_commits\n        assert len(commit_list) == 3\n        assert commit_list[0].repository_id == repo.id\n        assert commit_list[0].organization_id == org.id\n        assert commit_list[0].key == '62de626b7c7cfb8e77efb4273b1a3df4123e6216'\n        assert commit_list[1].repository_id == repo.id\n        assert commit_list[1].organization_id == org.id\n        assert commit_list[1].key == '58de626b7c7cfb8e77efb4273b1a3df4123e6345'\n        assert commit_list[2].repository_id == repo.id\n        assert commit_list[2].organization_id == org.id\n        assert commit_list[2].key == 'b' * 40\n\n        mock_notify_if_ready.assert_called_with(deploy.id, fetch_complete=True)\n\n    @patch('sentry.tasks.commits.handle_invalid_identity')\n    @patch('sentry.plugins.providers.dummy.repository.DummyRepositoryProvider.compare_commits')\n    def test_fetch_error_invalid_identity(self, mock_compare_commits, mock_handle_invalid_identity):\n        self.login_as(user=self.user)\n        org = self.create_organization(owner=self.user, name='baz')\n\n        repo = Repository.objects.create(\n            name='example',\n            provider='dummy',\n            organization_id=org.id,\n        )\n        release = Release.objects.create(\n            organization_id=org.id,\n            version='abcabcabc',\n        )\n\n        commit = Commit.objects.create(\n            organization_id=org.id,\n            repository_id=repo.id,\n            key='a' * 40,\n        )\n\n        ReleaseHeadCommit.objects.create(\n            organization_id=org.id,\n            repository_id=repo.id,\n            release=release,\n            commit=commit,\n        )\n\n        refs = [{\n            'repository': repo.name,\n            'commit': 'b' * 40,\n        }]\n\n        release2 = Release.objects.create(\n            organization_id=org.id,\n            version='12345678',\n        )\n\n        usa = UserSocialAuth.objects.create(\n            user=self.user,\n            provider='dummy',\n        )\n\n        mock_compare_commits.side_effect = InvalidIdentity(identity=usa)\n\n        fetch_commits(\n            release_id=release2.id,\n            user_id=self.user.id,\n            refs=refs,\n            previous_release_id=release.id,\n        )\n\n        mock_handle_invalid_identity.assert_called_once_with(\n            identity=usa,\n            commit_failure=True,\n        )\n\n    @patch('sentry.plugins.providers.dummy.repository.DummyRepositoryProvider.compare_commits')\n    def test_fetch_error_plugin_error(self, mock_compare_commits):\n        self.login_as(user=self.user)\n        org = self.create_organization(owner=self.user, name='baz')\n\n        repo = Repository.objects.create(\n            name='example',\n            provider='dummy',\n            organization_id=org.id,\n        )\n        release = Release.objects.create(\n            organization_id=org.id,\n            version='abcabcabc',\n        )\n\n        commit = Commit.objects.create(\n            organization_id=org.id,\n            repository_id=repo.id,\n            key='a' * 40,\n        )\n\n        ReleaseHeadCommit.objects.create(\n            organization_id=org.id,\n            repository_id=repo.id,\n            release=release,\n            commit=commit,\n        )\n\n        refs = [{\n            'repository': repo.name,\n            'commit': 'b' * 40,\n        }]\n\n        release2 = Release.objects.create(\n            organization_id=org.id,\n            version='12345678',\n        )\n\n        UserSocialAuth.objects.create(\n            user=self.user,\n            provider='dummy',\n        )\n\n        mock_compare_commits.side_effect = Exception('secrets')\n\n        with self.tasks():\n            fetch_commits(\n                release_id=release2.id,\n                user_id=self.user.id,\n                refs=refs,\n                previous_release_id=release.id,\n            )\n\n        msg = mail.outbox[-1]\n        assert msg.subject == 'Unable to Fetch Commits'\n        assert msg.to == [self.user.email]\n        assert 'secrets' not in msg.body\n\n    @patch('sentry.plugins.providers.dummy.repository.DummyRepositoryProvider.compare_commits')\n    def test_fetch_error_random_exception(self, mock_compare_commits):\n        self.login_as(user=self.user)\n        org = self.create_organization(owner=self.user, name='baz')\n\n        repo = Repository.objects.create(\n            name='example',\n            provider='dummy',\n            organization_id=org.id,\n        )\n        release = Release.objects.create(\n            organization_id=org.id,\n            version='abcabcabc',\n        )\n\n        commit = Commit.objects.create(\n            organization_id=org.id,\n            repository_id=repo.id,\n            key='a' * 40,\n        )\n\n        ReleaseHeadCommit.objects.create(\n            organization_id=org.id,\n            repository_id=repo.id,\n            release=release,\n            commit=commit,\n        )\n\n        refs = [{\n            'repository': repo.name,\n            'commit': 'b' * 40,\n        }]\n\n        release2 = Release.objects.create(\n            organization_id=org.id,\n            version='12345678',\n        )\n\n        UserSocialAuth.objects.create(\n            user=self.user,\n            provider='dummy',\n        )\n\n        mock_compare_commits.side_effect = PluginError('You can read me')\n\n        with self.tasks():\n            fetch_commits(\n                release_id=release2.id,\n                user_id=self.user.id,\n                refs=refs,\n                previous_release_id=release.id,\n            )\n\n        msg = mail.outbox[-1]\n        assert msg.subject == 'Unable to Fetch Commits'\n        assert msg.to == [self.user.email]\n        assert 'You can read me' in msg.body\n\n\nclass HandleInvalidIdentityTest(TestCase):\n    def test_simple(self):\n        usa = UserSocialAuth.objects.create(\n            user=self.user,\n            provider='dummy',\n        )\n\n        with self.tasks():\n            handle_invalid_identity(usa)\n\n        assert not UserSocialAuth.objects.filter(id=usa.id).exists()\n\n        msg = mail.outbox[-1]\n        assert msg.subject == 'Action Required'\n        assert msg.to == [self.user.email]\n\n    def test_commit_failure(self):\n        usa = UserSocialAuth.objects.create(\n            user=self.user,\n            provider='dummy',\n        )\n\n        with self.tasks():\n            handle_invalid_identity(usa, commit_failure=True)\n\n        assert not UserSocialAuth.objects.filter(id=usa.id).exists()\n\n        msg = mail.outbox[-1]\n        assert msg.subject == 'Unable to Fetch Commits'\n        assert msg.to == [self.user.email]\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_commits.py", "id": "63900477a0b96a1a118f0f2b81945654", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/tasks/test_commits.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}