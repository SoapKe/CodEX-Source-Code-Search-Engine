{"author": "faif", "code": "\n# -*- coding: utf-8 -*-\n\n\"\"\"\nhttp://code.activestate.com/recipes/131499-observer-pattern/\n\n*TL;DR80\nMaintains a list of dependents and notifies them of any state changes.\n\"\"\"\n\nfrom __future__ import print_function\n\n\nclass Subject(object):\n\n    def __init__(self):\n        self._observers = []\n\n    def attach(self, observer):\n        if observer not in self._observers:\n            self._observers.append(observer)\n\n    def detach(self, observer):\n        try:\n            self._observers.remove(observer)\n        except ValueError:\n            pass\n\n    def notify(self, modifier=None):\n        for observer in self._observers:\n            if modifier != observer:\n                observer.update(self)\n\n\n\nclass Data(Subject):\n\n    def __init__(self, name=''):\n        Subject.__init__(self)\n        self.name = name\n        self._data = 0\n\n    @property\n    def data(self):\n        return self._data\n\n    @data.setter\n    def data(self, value):\n        self._data = value\n        self.notify()\n\n\nclass HexViewer:\n\n    def update(self, subject):\n        print(u'HexViewer: Subject %s has data 0x%x' %\n              (subject.name, subject.data))\n\n\nclass DecimalViewer:\n\n    def update(self, subject):\n        print(u'DecimalViewer: Subject %s has data %d' %\n              (subject.name, subject.data))\n\n\n...\ndef main():\n    data1 = Data('Data 1')\n    data2 = Data('Data 2')\n    view1 = DecimalViewer()\n    view2 = HexViewer()\n    data1.attach(view1)\n    data1.attach(view2)\n    data2.attach(view2)\n    data2.attach(view1)\n\n    print(u\"Setting Data 1 = 10\")\n    data1.data = 10\n    print(u\"Setting Data 2 = 15\")\n    data2.data = 15\n    print(u\"Setting Data 1 = 3\")\n    data1.data = 3\n    print(u\"Setting Data 2 = 5\")\n    data2.data = 5\n    print(u\"Detach HexViewer from data1 and data2.\")\n    data1.detach(view2)\n    data2.detach(view2)\n    print(u\"Setting Data 1 = 10\")\n    data1.data = 10\n    print(u\"Setting Data 2 = 15\")\n    data2.data = 15\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "comments": "    http   code activestate com recipes 131499 observer pattern    tl dr80 maintains list dependents notifies state changes          usr bin env python        coding  utf 8        example usage    example usage         output        setting data 1   10    decimalviewer  subject data 1 data 10    hexviewer  subject data 1 data 0xa    setting data 2   15    hexviewer  subject data 2 data 0xf    decimalviewer  subject data 2 data 15    setting data 1   3    decimalviewer  subject data 1 data 3    hexviewer  subject data 1 data 0x3    setting data 2   5    hexviewer  subject data 2 data 0x5    decimalviewer  subject data 2 data 5    detach hexviewer data1 data2     setting data 1   10    decimalviewer  subject data 1 data 10    setting data 2   15    decimalviewer  subject data 2 data 15 ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nhttp://code.activestate.com/recipes/131499-observer-pattern/\n\n*TL;DR80\nMaintains a list of dependents and notifies them of any state changes.\n\"\"\"\n\nfrom __future__ import print_function\n\n\nclass Subject(object):\n\n    def __init__(self):\n        self._observers = []\n\n    def attach(self, observer):\n        if observer not in self._observers:\n            self._observers.append(observer)\n\n    def detach(self, observer):\n        try:\n            self._observers.remove(observer)\n        except ValueError:\n            pass\n\n    def notify(self, modifier=None):\n        for observer in self._observers:\n            if modifier != observer:\n                observer.update(self)\n\n\n# Example usage\nclass Data(Subject):\n\n    def __init__(self, name=''):\n        Subject.__init__(self)\n        self.name = name\n        self._data = 0\n\n    @property\n    def data(self):\n        return self._data\n\n    @data.setter\n    def data(self, value):\n        self._data = value\n        self.notify()\n\n\nclass HexViewer:\n\n    def update(self, subject):\n        print(u'HexViewer: Subject %s has data 0x%x' %\n              (subject.name, subject.data))\n\n\nclass DecimalViewer:\n\n    def update(self, subject):\n        print(u'DecimalViewer: Subject %s has data %d' %\n              (subject.name, subject.data))\n\n\n# Example usage...\ndef main():\n    data1 = Data('Data 1')\n    data2 = Data('Data 2')\n    view1 = DecimalViewer()\n    view2 = HexViewer()\n    data1.attach(view1)\n    data1.attach(view2)\n    data2.attach(view2)\n    data2.attach(view1)\n\n    print(u\"Setting Data 1 = 10\")\n    data1.data = 10\n    print(u\"Setting Data 2 = 15\")\n    data2.data = 15\n    print(u\"Setting Data 1 = 3\")\n    data1.data = 3\n    print(u\"Setting Data 2 = 5\")\n    data2.data = 5\n    print(u\"Detach HexViewer from data1 and data2.\")\n    data1.detach(view2)\n    data2.detach(view2)\n    print(u\"Setting Data 1 = 10\")\n    data1.data = 10\n    print(u\"Setting Data 2 = 15\")\n    data2.data = 15\n\n\nif __name__ == '__main__':\n    main()\n\n### OUTPUT ###\n# Setting Data 1 = 10\n# DecimalViewer: Subject Data 1 has data 10\n# HexViewer: Subject Data 1 has data 0xa\n# Setting Data 2 = 15\n# HexViewer: Subject Data 2 has data 0xf\n# DecimalViewer: Subject Data 2 has data 15\n# Setting Data 1 = 3\n# DecimalViewer: Subject Data 1 has data 3\n# HexViewer: Subject Data 1 has data 0x3\n# Setting Data 2 = 5\n# HexViewer: Subject Data 2 has data 0x5\n# DecimalViewer: Subject Data 2 has data 5\n# Detach HexViewer from data1 and data2.\n# Setting Data 1 = 10\n# DecimalViewer: Subject Data 1 has data 10\n# Setting Data 2 = 15\n# DecimalViewer: Subject Data 2 has data 15\n", "description": "A collection of design patterns/idioms in Python", "file_name": "observer.py", "id": "4bcbc2ca2feb6c7706655902517ee8d4", "language": "Python", "project_name": "python-patterns", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/faif-python-patterns/faif-python-patterns-20bd570/behavioral/observer.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:52:50Z", "url": "https://github.com/faif/python-patterns", "wiki": true}