{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport functools\nimport re\n\nfrom .turner import TurnerBaseIE\nfrom ..compat import (\n    compat_urllib_parse_urlencode,\n    compat_urlparse,\n)\nfrom ..utils import (\n    OnDemandPagedList,\n    remove_start,\n)\n\n\nclass NBAIE(TurnerBaseIE):\n    _VALID_URL = r'https?://(?:watch\\.|www\\.)?nba\\.com/(?P<path>(?:[^/]+/)+(?P<id>[^?]*?))/?(?:/index\\.html)?(?:\\?.*)?$'\n    _TESTS = [{\n        'url': 'http://www.nba.com/video/games/nets/2012/12/04/0021200253-okc-bkn-recap.nba/index.html',\n        'md5': '9e7729d3010a9c71506fd1248f74e4f4',\n        'info_dict': {\n            'id': '0021200253-okc-bkn-recap',\n            'ext': 'mp4',\n            'title': 'Thunder vs. Nets',\n            'description': 'Kevin Durant scores 32 points and dishes out six assists as the Thunder beat the Nets in Brooklyn.',\n            'duration': 181,\n            'timestamp': 1354638466,\n            'upload_date': '20121204',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.nba.com/video/games/hornets/2014/12/05/0021400276-nyk-cha-play5.nba/',\n        'only_matching': True,\n    }, {\n        'url': 'http://watch.nba.com/video/channels/playoffs/2015/05/20/0041400301-cle-atl-recap.nba',\n        'md5': 'b2b39b81cf28615ae0c3360a3f9668c4',\n        'info_dict': {\n            'id': 'channels/playoffs/2015/05/20/0041400301-cle-atl-recap.nba',\n            'ext': 'mp4',\n            'title': 'Hawks vs. Cavaliers Game 1',\n            'description': 'md5:8094c3498d35a9bd6b1a8c396a071b4d',\n            'duration': 228,\n            'timestamp': 1432134543,\n            'upload_date': '20150520',\n        },\n        'expected_warnings': ['Unable to download f4m manifest'],\n    }, {\n        'url': 'http://www.nba.com/clippers/news/doc-rivers-were-not-trading-blake',\n        'info_dict': {\n            'id': 'teams/clippers/2016/02/17/1455672027478-Doc_Feb16_720.mov-297324',\n            'ext': 'mp4',\n            'title': 'Practice: Doc Rivers - 2/16/16',\n            'description': 'Head Coach Doc Rivers addresses the media following practice.',\n            'upload_date': '20160216',\n            'timestamp': 1455672000,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n        'expected_warnings': ['Unable to download f4m manifest'],\n    }, {\n        'url': 'http://www.nba.com/timberwolves/wiggins-shootaround\n        'info_dict': {\n            'id': 'timberwolves',\n            'title': 'Shootaround Access - Dec. 12 | Andrew Wiggins',\n        },\n        'playlist_count': 30,\n        'params': {\n            \n            'playlist_items': '1-30',\n        },\n    }, {\n        'url': 'http://www.nba.com/timberwolves/wiggins-shootaround\n        'info_dict': {\n            'id': 'teams/timberwolves/2014/12/12/Wigginsmp4-3462601',\n            'ext': 'mp4',\n            'title': 'Shootaround Access - Dec. 12 | Andrew Wiggins',\n            'description': 'Wolves rookie Andrew Wiggins addresses the media after Friday\\'s shootaround.',\n            'upload_date': '20141212',\n            'timestamp': 1418418600,\n        },\n        'params': {\n            'noplaylist': True,\n            \n            'skip_download': True,\n        },\n        'expected_warnings': ['Unable to download f4m manifest'],\n    }]\n\n    _PAGE_SIZE = 30\n\n    def _fetch_page(self, team, video_id, page):\n        search_url = 'http://searchapp2.nba.com/nba-search/query.jsp?' + compat_urllib_parse_urlencode({\n            'type': 'teamvideo',\n            'start': page * self._PAGE_SIZE + 1,\n            'npp': (page + 1) * self._PAGE_SIZE + 1,\n            'sort': 'recent',\n            'output': 'json',\n            'site': team,\n        })\n        results = self._download_json(\n            search_url, video_id, note='Download page %d of playlist data' % page)['results'][0]\n        for item in results:\n            yield self.url_result(compat_urlparse.urljoin('http://www.nba.com/', item['url']))\n\n    def _extract_playlist(self, orig_path, video_id, webpage):\n        team = orig_path.split('/')[0]\n\n        if self._downloader.params.get('noplaylist'):\n            self.to_screen('Downloading just video because of --no-playlist')\n            video_path = self._search_regex(\n                r'nbaVideoCore\\.firstVideo\\s*=\\s*\\'([^\\']+)\\';', webpage, 'video path')\n            video_url = 'http://www.nba.com/%s/video/%s' % (team, video_path)\n            return self.url_result(video_url)\n\n        self.to_screen('Downloading playlist - add --no-playlist to just download video')\n        playlist_title = self._og_search_title(webpage, fatal=False)\n        entries = OnDemandPagedList(\n            functools.partial(self._fetch_page, team, video_id),\n            self._PAGE_SIZE)\n\n        return self.playlist_result(entries, team, playlist_title)\n\n    def _real_extract(self, url):\n        path, video_id = re.match(self._VALID_URL, url).groups()\n        orig_path = path\n        if path.startswith('nba/'):\n            path = path[3:]\n\n        if 'video/' not in path:\n            webpage = self._download_webpage(url, video_id)\n            path = remove_start(self._search_regex(r'data-videoid=\"([^\"]+)\"', webpage, 'video id'), '/')\n\n            if path == '{{id}}':\n                return self._extract_playlist(orig_path, video_id, webpage)\n\n            \n            if path.startswith('video/teams'):\n                path = 'video/channels/proxy/' + path[6:]\n\n        return self._extract_cvp_info(\n            'http://www.nba.com/%s.xml' % path, video_id, {\n                'default': {\n                    'media_src': 'http://nba.cdn.turner.com/nba/big',\n                },\n                'm3u8': {\n                    'media_src': 'http://nbavod-f.akamaihd.net',\n                },\n            })\n", "comments": "# m3u8 download\n# m3u8 download\n#',\n# Download the whole playlist takes too long time\n#',\n# m3u8 download\n# See prepareContentId() of pkgCvp.js\n", "content": "from __future__ import unicode_literals\n\nimport functools\nimport re\n\nfrom .turner import TurnerBaseIE\nfrom ..compat import (\n    compat_urllib_parse_urlencode,\n    compat_urlparse,\n)\nfrom ..utils import (\n    OnDemandPagedList,\n    remove_start,\n)\n\n\nclass NBAIE(TurnerBaseIE):\n    _VALID_URL = r'https?://(?:watch\\.|www\\.)?nba\\.com/(?P<path>(?:[^/]+/)+(?P<id>[^?]*?))/?(?:/index\\.html)?(?:\\?.*)?$'\n    _TESTS = [{\n        'url': 'http://www.nba.com/video/games/nets/2012/12/04/0021200253-okc-bkn-recap.nba/index.html',\n        'md5': '9e7729d3010a9c71506fd1248f74e4f4',\n        'info_dict': {\n            'id': '0021200253-okc-bkn-recap',\n            'ext': 'mp4',\n            'title': 'Thunder vs. Nets',\n            'description': 'Kevin Durant scores 32 points and dishes out six assists as the Thunder beat the Nets in Brooklyn.',\n            'duration': 181,\n            'timestamp': 1354638466,\n            'upload_date': '20121204',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.nba.com/video/games/hornets/2014/12/05/0021400276-nyk-cha-play5.nba/',\n        'only_matching': True,\n    }, {\n        'url': 'http://watch.nba.com/video/channels/playoffs/2015/05/20/0041400301-cle-atl-recap.nba',\n        'md5': 'b2b39b81cf28615ae0c3360a3f9668c4',\n        'info_dict': {\n            'id': 'channels/playoffs/2015/05/20/0041400301-cle-atl-recap.nba',\n            'ext': 'mp4',\n            'title': 'Hawks vs. Cavaliers Game 1',\n            'description': 'md5:8094c3498d35a9bd6b1a8c396a071b4d',\n            'duration': 228,\n            'timestamp': 1432134543,\n            'upload_date': '20150520',\n        },\n        'expected_warnings': ['Unable to download f4m manifest'],\n    }, {\n        'url': 'http://www.nba.com/clippers/news/doc-rivers-were-not-trading-blake',\n        'info_dict': {\n            'id': 'teams/clippers/2016/02/17/1455672027478-Doc_Feb16_720.mov-297324',\n            'ext': 'mp4',\n            'title': 'Practice: Doc Rivers - 2/16/16',\n            'description': 'Head Coach Doc Rivers addresses the media following practice.',\n            'upload_date': '20160216',\n            'timestamp': 1455672000,\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n        'expected_warnings': ['Unable to download f4m manifest'],\n    }, {\n        'url': 'http://www.nba.com/timberwolves/wiggins-shootaround#',\n        'info_dict': {\n            'id': 'timberwolves',\n            'title': 'Shootaround Access - Dec. 12 | Andrew Wiggins',\n        },\n        'playlist_count': 30,\n        'params': {\n            # Download the whole playlist takes too long time\n            'playlist_items': '1-30',\n        },\n    }, {\n        'url': 'http://www.nba.com/timberwolves/wiggins-shootaround#',\n        'info_dict': {\n            'id': 'teams/timberwolves/2014/12/12/Wigginsmp4-3462601',\n            'ext': 'mp4',\n            'title': 'Shootaround Access - Dec. 12 | Andrew Wiggins',\n            'description': 'Wolves rookie Andrew Wiggins addresses the media after Friday\\'s shootaround.',\n            'upload_date': '20141212',\n            'timestamp': 1418418600,\n        },\n        'params': {\n            'noplaylist': True,\n            # m3u8 download\n            'skip_download': True,\n        },\n        'expected_warnings': ['Unable to download f4m manifest'],\n    }]\n\n    _PAGE_SIZE = 30\n\n    def _fetch_page(self, team, video_id, page):\n        search_url = 'http://searchapp2.nba.com/nba-search/query.jsp?' + compat_urllib_parse_urlencode({\n            'type': 'teamvideo',\n            'start': page * self._PAGE_SIZE + 1,\n            'npp': (page + 1) * self._PAGE_SIZE + 1,\n            'sort': 'recent',\n            'output': 'json',\n            'site': team,\n        })\n        results = self._download_json(\n            search_url, video_id, note='Download page %d of playlist data' % page)['results'][0]\n        for item in results:\n            yield self.url_result(compat_urlparse.urljoin('http://www.nba.com/', item['url']))\n\n    def _extract_playlist(self, orig_path, video_id, webpage):\n        team = orig_path.split('/')[0]\n\n        if self._downloader.params.get('noplaylist'):\n            self.to_screen('Downloading just video because of --no-playlist')\n            video_path = self._search_regex(\n                r'nbaVideoCore\\.firstVideo\\s*=\\s*\\'([^\\']+)\\';', webpage, 'video path')\n            video_url = 'http://www.nba.com/%s/video/%s' % (team, video_path)\n            return self.url_result(video_url)\n\n        self.to_screen('Downloading playlist - add --no-playlist to just download video')\n        playlist_title = self._og_search_title(webpage, fatal=False)\n        entries = OnDemandPagedList(\n            functools.partial(self._fetch_page, team, video_id),\n            self._PAGE_SIZE)\n\n        return self.playlist_result(entries, team, playlist_title)\n\n    def _real_extract(self, url):\n        path, video_id = re.match(self._VALID_URL, url).groups()\n        orig_path = path\n        if path.startswith('nba/'):\n            path = path[3:]\n\n        if 'video/' not in path:\n            webpage = self._download_webpage(url, video_id)\n            path = remove_start(self._search_regex(r'data-videoid=\"([^\"]+)\"', webpage, 'video id'), '/')\n\n            if path == '{{id}}':\n                return self._extract_playlist(orig_path, video_id, webpage)\n\n            # See prepareContentId() of pkgCvp.js\n            if path.startswith('video/teams'):\n                path = 'video/channels/proxy/' + path[6:]\n\n        return self._extract_cvp_info(\n            'http://www.nba.com/%s.xml' % path, video_id, {\n                'default': {\n                    'media_src': 'http://nba.cdn.turner.com/nba/big',\n                },\n                'm3u8': {\n                    'media_src': 'http://nbavod-f.akamaihd.net',\n                },\n            })\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "nba.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/nba.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}