{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    remove_end,\n)\n\n\nclass NFLIE(InfoExtractor):\n    IE_NAME = 'nfl.com'\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'http://www.nfl.com/videos/nfl-game-highlights/0ap3000000398478/Week-3-Redskins-vs-Eagles-highlights',\n        'md5': '394ef771ddcd1354f665b471d78ec4c6',\n        'info_dict': {\n            'id': '0ap3000000398478',\n            'ext': 'mp4',\n            'title': 'Week 3: Redskins vs. Eagles highlights',\n            'description': 'md5:56323bfb0ac4ee5ab24bd05fdf3bf478',\n            'upload_date': '20140921',\n            'timestamp': 1411337580,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }, {\n        'url': 'http://prod.www.steelers.clubs.nfl.com/video-and-audio/videos/LIVE_Post_Game_vs_Browns/9d72f26a-9e2b-4718-84d3-09fb4046c266',\n        'md5': 'cf85bdb4bc49f6e9d3816d130c78279c',\n        'info_dict': {\n            'id': '9d72f26a-9e2b-4718-84d3-09fb4046c266',\n            'ext': 'mp4',\n            'title': 'LIVE: Post Game vs. Browns',\n            'description': 'md5:6a97f7e5ebeb4c0e69a418a89e0636e8',\n            'upload_date': '20131229',\n            'timestamp': 1388354455,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }, {\n        'url': 'http://www.nfl.com/news/story/0ap3000000467586/article/patriots-seahawks-involved-in-lategame-skirmish',\n        'info_dict': {\n            'id': '0ap3000000467607',\n            'ext': 'mp4',\n            'title': 'Frustrations flare on the field',\n            'description': 'Emotions ran high at the end of the Super Bowl on both sides of the ball after a dramatic finish.',\n            'timestamp': 1422850320,\n            'upload_date': '20150202',\n        },\n    }, {\n        'url': 'http://www.patriots.com/video/2015/09/18/10-days-gillette',\n        'md5': '4c319e2f625ffd0b481b4382c6fc124c',\n        'info_dict': {\n            'id': 'n-238346',\n            'ext': 'mp4',\n            'title': '10 Days at Gillette',\n            'description': 'md5:8cd9cd48fac16de596eadc0b24add951',\n            'timestamp': 1442618809,\n            'upload_date': '20150918',\n        },\n    }, {\n        \n        'url': 'http://www.steelers.com/news/article-1/Tomlin-on-Ben-getting-Vick-ready/56399c96-4160-48cf-a7ad-1d17d4a3aef7',\n        'info_dict': {\n            'id': '12693586-6ea9-4743-9c1c-02c59e4a5ef2',\n            'ext': 'mp4',\n            'title': 'Tomlin looks ahead to Ravens on a short week',\n            'description': 'md5:32f3f7b139f43913181d5cbb24ecad75',\n            'timestamp': 1443459651,\n            'upload_date': '20150928',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.nfl.com/videos/nfl-network-top-ten/09000d5d810a6bd4/Top-10-Gutsiest-Performances-Jack-Youngblood',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.buffalobills.com/video/videos/Rex_Ryan_Show_World_Wide_Rex/b1dcfab2-3190-4bb1-bfc0-d6e603d6601a',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def prepend_host(host, url):\n        if not url.startswith('http'):\n            if not url.startswith('/'):\n                url = '/%s' % url\n            url = 'http://{0:}{1:}'.format(host, url)\n        return url\n\n    @staticmethod\n    def format_from_stream(stream, protocol, host, path_prefix='',\n                           preference=0, note=None):\n        url = '{protocol:}://{host:}/{prefix:}{path:}'.format(\n            protocol=protocol,\n            host=host,\n            prefix=path_prefix,\n            path=stream.get('path'),\n        )\n        return {\n            'url': url,\n            'vbr': int_or_none(stream.get('rate', 0), 1000),\n            'preference': preference,\n            'format_note': note,\n        }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, host = mobj.group('id'), mobj.group('host')\n\n        webpage = self._download_webpage(url, video_id)\n\n        config_url = NFLIE.prepend_host(host, self._search_regex(\n            r'(?:(?:config|configURL)\\s*:\\s*|<nflcs:avplayer[^>]+data-config\\s*=\\s*)([\"\\'])(?P<config>.+?)\\1',\n            webpage, 'config URL', default='static/content/static/config/video/config.json',\n            group='config'))\n        \n        video_id = self._search_regex(\n            r'(?:<nflcs:avplayer[^>]+data-content[Ii]d\\s*=\\s*|content[Ii]d\\s*:\\s*)([\"\\'])(?P<id>(?:(?!\\1).)+)\\1',\n            webpage, 'video id', default=video_id, group='id')\n        config = self._download_json(config_url, video_id, 'Downloading player config')\n        url_template = NFLIE.prepend_host(\n            host, '{contentURLTemplate:}'.format(**config))\n        video_data = self._download_json(\n            url_template.format(id=video_id), video_id)\n\n        formats = []\n        cdn_data = video_data.get('cdnData', {})\n        streams = cdn_data.get('bitrateInfo', [])\n        if cdn_data.get('format') == 'EXTERNAL_HTTP_STREAM':\n            parts = compat_urllib_parse_urlparse(cdn_data.get('uri'))\n            protocol, host = parts.scheme, parts.netloc\n            for stream in streams:\n                formats.append(\n                    NFLIE.format_from_stream(stream, protocol, host))\n        else:\n            cdns = config.get('cdns')\n            if not cdns:\n                raise ExtractorError('Failed to get CDN data', expected=True)\n\n            for name, cdn in cdns.items():\n                \n                if cdn.get('name') == 'LIMELIGHT':\n                    continue\n\n                protocol = cdn.get('protocol')\n                host = remove_end(cdn.get('host', ''), '/')\n                if not (protocol and host):\n                    continue\n\n                prefix = cdn.get('pathprefix', '')\n                if prefix and not prefix.endswith('/'):\n                    prefix = '%s/' % prefix\n\n                preference = 0\n                if protocol == 'rtmp':\n                    preference = -2\n                elif 'prog' in name.lower():\n                    preference = 1\n\n                for stream in streams:\n                    formats.append(\n                        NFLIE.format_from_stream(stream, protocol, host,\n                                                 prefix, preference, name))\n\n        self._sort_formats(formats)\n\n        thumbnail = None\n        for q in ('xl', 'l', 'm', 's', 'xs'):\n            thumbnail = video_data.get('imagePaths', {}).get(q)\n            if thumbnail:\n                break\n\n        return {\n            'id': video_id,\n            'title': video_data.get('headline'),\n            'formats': formats,\n            'description': video_data.get('caption'),\n            'duration': video_data.get('duration'),\n            'thumbnail': thumbnail,\n            'timestamp': int_or_none(video_data.get('posted'), 1000),\n        }\n", "comments": "(?x)\n                    https?://\n                        (?P<host>\n                            (?:www\\.)?\n                            (?:\n                                (?:\n                                    nfl|\n                                    buffalobills|\n                                    miamidolphins|\n                                    patriots|\n                                    newyorkjets|\n                                    baltimoreravens|\n                                    bengals|\n                                    clevelandbrowns|\n                                    steelers|\n                                    houstontexans|\n                                    colts|\n                                    jaguars|\n                                    titansonline|\n                                    denverbroncos|\n                                    kcchiefs|\n                                    raiders|\n                                    chargers|\n                                    dallascowboys|\n                                    giants|\n                                    philadelphiaeagles|\n                                    redskins|\n                                    chicagobears|\n                                    detroitlions|\n                                    packers|\n                                    vikings|\n                                    atlantafalcons|\n                                    panthers|\n                                    neworleanssaints|\n                                    buccaneers|\n                                    azcardinals|\n                                    stlouisrams|\n                                    49ers|\n                                    seahawks\n                                )\\.com|\n                                .+?\\.clubs\\.nfl\\.com\n                            )\n                        )/\n                        (?:.+?/)*\n                        (?P<id>[^/#?&]+)\n                    \n \n# coding: utf-8\n# lowercase data-contentid\n# For articles, the id in the url is not the video id\n# LimeLight streams don't seem to work\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    remove_end,\n)\n\n\nclass NFLIE(InfoExtractor):\n    IE_NAME = 'nfl.com'\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<host>\n                            (?:www\\.)?\n                            (?:\n                                (?:\n                                    nfl|\n                                    buffalobills|\n                                    miamidolphins|\n                                    patriots|\n                                    newyorkjets|\n                                    baltimoreravens|\n                                    bengals|\n                                    clevelandbrowns|\n                                    steelers|\n                                    houstontexans|\n                                    colts|\n                                    jaguars|\n                                    titansonline|\n                                    denverbroncos|\n                                    kcchiefs|\n                                    raiders|\n                                    chargers|\n                                    dallascowboys|\n                                    giants|\n                                    philadelphiaeagles|\n                                    redskins|\n                                    chicagobears|\n                                    detroitlions|\n                                    packers|\n                                    vikings|\n                                    atlantafalcons|\n                                    panthers|\n                                    neworleanssaints|\n                                    buccaneers|\n                                    azcardinals|\n                                    stlouisrams|\n                                    49ers|\n                                    seahawks\n                                )\\.com|\n                                .+?\\.clubs\\.nfl\\.com\n                            )\n                        )/\n                        (?:.+?/)*\n                        (?P<id>[^/#?&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.nfl.com/videos/nfl-game-highlights/0ap3000000398478/Week-3-Redskins-vs-Eagles-highlights',\n        'md5': '394ef771ddcd1354f665b471d78ec4c6',\n        'info_dict': {\n            'id': '0ap3000000398478',\n            'ext': 'mp4',\n            'title': 'Week 3: Redskins vs. Eagles highlights',\n            'description': 'md5:56323bfb0ac4ee5ab24bd05fdf3bf478',\n            'upload_date': '20140921',\n            'timestamp': 1411337580,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }, {\n        'url': 'http://prod.www.steelers.clubs.nfl.com/video-and-audio/videos/LIVE_Post_Game_vs_Browns/9d72f26a-9e2b-4718-84d3-09fb4046c266',\n        'md5': 'cf85bdb4bc49f6e9d3816d130c78279c',\n        'info_dict': {\n            'id': '9d72f26a-9e2b-4718-84d3-09fb4046c266',\n            'ext': 'mp4',\n            'title': 'LIVE: Post Game vs. Browns',\n            'description': 'md5:6a97f7e5ebeb4c0e69a418a89e0636e8',\n            'upload_date': '20131229',\n            'timestamp': 1388354455,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }, {\n        'url': 'http://www.nfl.com/news/story/0ap3000000467586/article/patriots-seahawks-involved-in-lategame-skirmish',\n        'info_dict': {\n            'id': '0ap3000000467607',\n            'ext': 'mp4',\n            'title': 'Frustrations flare on the field',\n            'description': 'Emotions ran high at the end of the Super Bowl on both sides of the ball after a dramatic finish.',\n            'timestamp': 1422850320,\n            'upload_date': '20150202',\n        },\n    }, {\n        'url': 'http://www.patriots.com/video/2015/09/18/10-days-gillette',\n        'md5': '4c319e2f625ffd0b481b4382c6fc124c',\n        'info_dict': {\n            'id': 'n-238346',\n            'ext': 'mp4',\n            'title': '10 Days at Gillette',\n            'description': 'md5:8cd9cd48fac16de596eadc0b24add951',\n            'timestamp': 1442618809,\n            'upload_date': '20150918',\n        },\n    }, {\n        # lowercase data-contentid\n        'url': 'http://www.steelers.com/news/article-1/Tomlin-on-Ben-getting-Vick-ready/56399c96-4160-48cf-a7ad-1d17d4a3aef7',\n        'info_dict': {\n            'id': '12693586-6ea9-4743-9c1c-02c59e4a5ef2',\n            'ext': 'mp4',\n            'title': 'Tomlin looks ahead to Ravens on a short week',\n            'description': 'md5:32f3f7b139f43913181d5cbb24ecad75',\n            'timestamp': 1443459651,\n            'upload_date': '20150928',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.nfl.com/videos/nfl-network-top-ten/09000d5d810a6bd4/Top-10-Gutsiest-Performances-Jack-Youngblood',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.buffalobills.com/video/videos/Rex_Ryan_Show_World_Wide_Rex/b1dcfab2-3190-4bb1-bfc0-d6e603d6601a',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def prepend_host(host, url):\n        if not url.startswith('http'):\n            if not url.startswith('/'):\n                url = '/%s' % url\n            url = 'http://{0:}{1:}'.format(host, url)\n        return url\n\n    @staticmethod\n    def format_from_stream(stream, protocol, host, path_prefix='',\n                           preference=0, note=None):\n        url = '{protocol:}://{host:}/{prefix:}{path:}'.format(\n            protocol=protocol,\n            host=host,\n            prefix=path_prefix,\n            path=stream.get('path'),\n        )\n        return {\n            'url': url,\n            'vbr': int_or_none(stream.get('rate', 0), 1000),\n            'preference': preference,\n            'format_note': note,\n        }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, host = mobj.group('id'), mobj.group('host')\n\n        webpage = self._download_webpage(url, video_id)\n\n        config_url = NFLIE.prepend_host(host, self._search_regex(\n            r'(?:(?:config|configURL)\\s*:\\s*|<nflcs:avplayer[^>]+data-config\\s*=\\s*)([\"\\'])(?P<config>.+?)\\1',\n            webpage, 'config URL', default='static/content/static/config/video/config.json',\n            group='config'))\n        # For articles, the id in the url is not the video id\n        video_id = self._search_regex(\n            r'(?:<nflcs:avplayer[^>]+data-content[Ii]d\\s*=\\s*|content[Ii]d\\s*:\\s*)([\"\\'])(?P<id>(?:(?!\\1).)+)\\1',\n            webpage, 'video id', default=video_id, group='id')\n        config = self._download_json(config_url, video_id, 'Downloading player config')\n        url_template = NFLIE.prepend_host(\n            host, '{contentURLTemplate:}'.format(**config))\n        video_data = self._download_json(\n            url_template.format(id=video_id), video_id)\n\n        formats = []\n        cdn_data = video_data.get('cdnData', {})\n        streams = cdn_data.get('bitrateInfo', [])\n        if cdn_data.get('format') == 'EXTERNAL_HTTP_STREAM':\n            parts = compat_urllib_parse_urlparse(cdn_data.get('uri'))\n            protocol, host = parts.scheme, parts.netloc\n            for stream in streams:\n                formats.append(\n                    NFLIE.format_from_stream(stream, protocol, host))\n        else:\n            cdns = config.get('cdns')\n            if not cdns:\n                raise ExtractorError('Failed to get CDN data', expected=True)\n\n            for name, cdn in cdns.items():\n                # LimeLight streams don't seem to work\n                if cdn.get('name') == 'LIMELIGHT':\n                    continue\n\n                protocol = cdn.get('protocol')\n                host = remove_end(cdn.get('host', ''), '/')\n                if not (protocol and host):\n                    continue\n\n                prefix = cdn.get('pathprefix', '')\n                if prefix and not prefix.endswith('/'):\n                    prefix = '%s/' % prefix\n\n                preference = 0\n                if protocol == 'rtmp':\n                    preference = -2\n                elif 'prog' in name.lower():\n                    preference = 1\n\n                for stream in streams:\n                    formats.append(\n                        NFLIE.format_from_stream(stream, protocol, host,\n                                                 prefix, preference, name))\n\n        self._sort_formats(formats)\n\n        thumbnail = None\n        for q in ('xl', 'l', 'm', 's', 'xs'):\n            thumbnail = video_data.get('imagePaths', {}).get(q)\n            if thumbnail:\n                break\n\n        return {\n            'id': video_id,\n            'title': video_data.get('headline'),\n            'formats': formats,\n            'description': video_data.get('caption'),\n            'duration': video_data.get('duration'),\n            'thumbnail': thumbnail,\n            'timestamp': int_or_none(video_data.get('posted'), 1000),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "nfl.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/nfl.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}