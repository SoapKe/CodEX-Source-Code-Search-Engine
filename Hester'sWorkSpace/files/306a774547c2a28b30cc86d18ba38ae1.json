{"author": "HelloZeroNet", "code": "import logging\nimport traceback\n\nimport socket\nimport stem\nfrom stem import Signal\nfrom stem.control import Controller\nfrom stem.socket import ControlPort\n\nfrom Plugin import PluginManager\nfrom Config import config\nfrom Debug import Debug\n\nif config.tor != \"disable\":\n    from gevent import monkey\n    monkey.patch_time()\n    monkey.patch_socket(dns=False)\n    monkey.patch_thread()\n    print \"Stem Port Plugin: modules are patched.\"\nelse:\n    print \"Stem Port Plugin: Tor mode disabled. Module patching skipped.\"\n\n\nclass PatchedControlPort(ControlPort):\n    def _make_socket(self):\n        try:\n            if \"socket_noproxy\" in dir(socket):  \n                control_socket = socket.socket_noproxy(socket.AF_INET, socket.SOCK_STREAM)\n            else:\n                control_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n            \n\n            control_socket.connect((self._control_addr, self._control_port))\n            return control_socket\n        except socket.error as exc:\n            raise stem.SocketError(exc)\n\ndef from_port(address = '127.0.0.1', port = 'default'):\n    import stem.connection\n\n    if not stem.util.connection.is_valid_ipv4_address(address):\n        raise ValueError('Invalid IP address: %s' % address)\n    elif port != 'default' and not stem.util.connection.is_valid_port(port):\n        raise ValueError('Invalid port: %s' % port)\n\n    if port == 'default':\n        raise ValueError('Must specify a port')\n    else:\n        control_port = PatchedControlPort(address, port)\n\n    return Controller(control_port)\n\n\n@PluginManager.registerTo(\"TorManager\")\nclass TorManagerPlugin(object):\n\n    def connectController(self):\n        self.log.info(\"Authenticate using Stem... %s:%s\" % (self.ip, self.port))\n\n        try:\n            with self.lock:\n                if config.tor_password:\n                    controller = from_port(port=self.port, password=config.tor_password)\n                else:\n                    controller = from_port(port=self.port)\n                controller.authenticate()\n                self.controller = controller\n                self.status = u\"Connected (via Stem)\"\n        except Exception, err:\n            print(\"\\n\")\n            traceback.print_exc()\n            print(\"\\n\")\n\n            self.controller = None\n            self.status = u\"Error (%s)\" % err\n            self.log.error(\"Tor stem connect error: %s\" % Debug.formatException(err))\n\n        return self.controller\n\n\n    def disconnect(self):\n        self.controller.close()\n        self.controller = None\n\n\n    def resetCircuits(self):\n        try:\n            self.controller.signal(Signal.NEWNYM)\n        except Exception, err:\n            self.status = u\"Stem reset circuits error (%s)\" % err\n            self.log.error(\"Stem reset circuits error: %s\" % err)\n\n\n    def makeOnionAndKey(self):\n        try:\n            service = self.controller.create_ephemeral_hidden_service(\n                {self.fileserver_port: self.fileserver_port},\n                await_publication = False\n            )\n            if service.private_key_type != \"RSA1024\":\n                raise Exception(\"ZeroNet doesn't support crypto \" + service.private_key_type)\n\n            self.log.debug(\"Stem created %s.onion (async descriptor publication)\" % service.service_id)\n\n            return (service.service_id, service.private_key)\n\n        except Exception, err:\n            self.status = u\"AddOnion error (Stem: %s)\" % err\n            self.log.error(\"Failed to create hidden service with Stem: \" + err)\n            return False\n\n\n    def delOnion(self, address):\n        try:\n            self.controller.remove_ephemeral_hidden_service(address)\n            return True\n        except Exception, err:\n            self.status = u\"DelOnion error (Stem: %s)\" % err\n            self.log.error(\"Stem failed to delete %s.onion: %s\" % (address, err))\n            self.disconnect() ?\n            return False\n\n\n    def request(self, cmd):\n        with self.lock:\n            if not self.enabled:\n                return False\n            else:\n                self.log.error(\"[WARNING] StemPort self.request should not be called\")\n                return \"\"\n\n    def send(self, cmd, conn=None):\n        self.log.error(\"[WARNING] StemPort self.send should not be called\")\n        return \"\"\n", "comments": "  socket proxy patched  use non proxy one    todo  repeated code   consider making separate method    why  ", "content": "import logging\nimport traceback\n\nimport socket\nimport stem\nfrom stem import Signal\nfrom stem.control import Controller\nfrom stem.socket import ControlPort\n\nfrom Plugin import PluginManager\nfrom Config import config\nfrom Debug import Debug\n\nif config.tor != \"disable\":\n    from gevent import monkey\n    monkey.patch_time()\n    monkey.patch_socket(dns=False)\n    monkey.patch_thread()\n    print \"Stem Port Plugin: modules are patched.\"\nelse:\n    print \"Stem Port Plugin: Tor mode disabled. Module patching skipped.\"\n\n\nclass PatchedControlPort(ControlPort):\n    def _make_socket(self):\n        try:\n            if \"socket_noproxy\" in dir(socket):  # Socket proxy-patched, use non-proxy one\n                control_socket = socket.socket_noproxy(socket.AF_INET, socket.SOCK_STREAM)\n            else:\n                control_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n            # TODO: repeated code - consider making a separate method\n\n            control_socket.connect((self._control_addr, self._control_port))\n            return control_socket\n        except socket.error as exc:\n            raise stem.SocketError(exc)\n\ndef from_port(address = '127.0.0.1', port = 'default'):\n    import stem.connection\n\n    if not stem.util.connection.is_valid_ipv4_address(address):\n        raise ValueError('Invalid IP address: %s' % address)\n    elif port != 'default' and not stem.util.connection.is_valid_port(port):\n        raise ValueError('Invalid port: %s' % port)\n\n    if port == 'default':\n        raise ValueError('Must specify a port')\n    else:\n        control_port = PatchedControlPort(address, port)\n\n    return Controller(control_port)\n\n\n@PluginManager.registerTo(\"TorManager\")\nclass TorManagerPlugin(object):\n\n    def connectController(self):\n        self.log.info(\"Authenticate using Stem... %s:%s\" % (self.ip, self.port))\n\n        try:\n            with self.lock:\n                if config.tor_password:\n                    controller = from_port(port=self.port, password=config.tor_password)\n                else:\n                    controller = from_port(port=self.port)\n                controller.authenticate()\n                self.controller = controller\n                self.status = u\"Connected (via Stem)\"\n        except Exception, err:\n            print(\"\\n\")\n            traceback.print_exc()\n            print(\"\\n\")\n\n            self.controller = None\n            self.status = u\"Error (%s)\" % err\n            self.log.error(\"Tor stem connect error: %s\" % Debug.formatException(err))\n\n        return self.controller\n\n\n    def disconnect(self):\n        self.controller.close()\n        self.controller = None\n\n\n    def resetCircuits(self):\n        try:\n            self.controller.signal(Signal.NEWNYM)\n        except Exception, err:\n            self.status = u\"Stem reset circuits error (%s)\" % err\n            self.log.error(\"Stem reset circuits error: %s\" % err)\n\n\n    def makeOnionAndKey(self):\n        try:\n            service = self.controller.create_ephemeral_hidden_service(\n                {self.fileserver_port: self.fileserver_port},\n                await_publication = False\n            )\n            if service.private_key_type != \"RSA1024\":\n                raise Exception(\"ZeroNet doesn't support crypto \" + service.private_key_type)\n\n            self.log.debug(\"Stem created %s.onion (async descriptor publication)\" % service.service_id)\n\n            return (service.service_id, service.private_key)\n\n        except Exception, err:\n            self.status = u\"AddOnion error (Stem: %s)\" % err\n            self.log.error(\"Failed to create hidden service with Stem: \" + err)\n            return False\n\n\n    def delOnion(self, address):\n        try:\n            self.controller.remove_ephemeral_hidden_service(address)\n            return True\n        except Exception, err:\n            self.status = u\"DelOnion error (Stem: %s)\" % err\n            self.log.error(\"Stem failed to delete %s.onion: %s\" % (address, err))\n            self.disconnect() # Why?\n            return False\n\n\n    def request(self, cmd):\n        with self.lock:\n            if not self.enabled:\n                return False\n            else:\n                self.log.error(\"[WARNING] StemPort self.request should not be called\")\n                return \"\"\n\n    def send(self, cmd, conn=None):\n        self.log.error(\"[WARNING] StemPort self.send should not be called\")\n        return \"\"\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "StemPortPlugin.py", "id": "306a774547c2a28b30cc86d18ba38ae1", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/disabled-StemPort/StemPortPlugin.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}