{"author": "ajenti", "code": "import logging\nimport subprocess\nimport os\n\n\n\nif not hasattr(subprocess, 'check_output'):\n    def c_o(*args, **kwargs):\n        kwargs['stdout'] = subprocess.PIPE\n        popen = subprocess.Popen(*args, **kwargs)\n        stdout, stderr = popen.communicate()\n        return stdout\n    subprocess.check_output = c_o\n\n\nold_Popen = subprocess.Popen.__init__\n\n\ndef Popen(*args, **kwargs):\n    logging.debug('Popen: %s' % (args[1],))\n    __null = open(os.devnull, 'w')\n    return old_Popen(\n        stdin=kwargs.pop('stdin', subprocess.PIPE),\n        stdout=kwargs.pop('stdout', __null),\n        stderr=kwargs.pop('stderr', __null),\n        *args, **kwargs)\n\nsubprocess.Popen.__init__ = Popen\n\n\n\n\nimport threading\n\n\ndef tbget(self):\n    if hasattr(self, '__compat_lock'):\n        return self.__compat_lock\n    c = threading.Condition()\n    c.acquire()\n    return c\n\n\ndef tbset(self, l):\n    self.__compat_lock = l\n\n\ndef tbdel(self):\n    del self.__compat_lock\n\nthreading.Thread._Thread__block = property(tbget, tbset, tbdel)\n\n\n(\"'Event' object has no attribute '_reset_internal_locks'\",)\nimport threading\nif not hasattr(threading.Event, '_reset_internal_locks'):\n    def r_i_l(self):\n        pass\n    threading.Event._reset_internal_locks = r_i_l\n\n\n\nlogging.getLogger(\"requests\").setLevel(logging.WARNING)\n\n\ntry:\n    import simplejson\n    _loads = simplejson.loads\n\n    def wrap(fx):\n        def f(*args, **kwargs):\n            kwargs.pop('use_decimal', None)\n            return fx(*args, **kwargs)\n        return f\n\n    simplejson.dumps = wrap(simplejson.dumps)\n    simplejson.loads = wrap(simplejson.loads)\nexcept:\n    pass\n\n\n\nfrom socketio.transports import BaseTransport\n\nold_transport_init = BaseTransport.__init__\n\n\ndef new_transport_init(self, *args, **kwargs):\n    old_transport_init(self, *args, **kwargs)\n    self.headers = []\n\nBaseTransport.__init__ = new_transport_init\n\n\n\nimport inspect\nimport gevent.ssl\n__ssl__ = __import__('ssl')\n\ntry:\n    _ssl = __ssl__._ssl\nexcept AttributeError:\n    _ssl = __ssl__._ssl2\n\n\ndef new_sslwrap(sock, server_side=False, keyfile=None, certfile=None, cert_reqs=__ssl__.CERT_NONE, ssl_version=__ssl__.PROTOCOL_SSLv23, ca_certs=None, ciphers=None):\n    context = __ssl__.SSLContext(ssl_version)\n    context.verify_mode = cert_reqs or __ssl__.CERT_NONE\n    if ca_certs:\n        context.load_verify_locations(ca_certs)\n    if certfile:\n        context.load_cert_chain(certfile, keyfile)\n    if ciphers:\n        print ciphers\n        context.set_ciphers(ciphers)\n\n    caller_self = inspect.currentframe().f_back.f_locals['self']\n    return context._wrap_socket(sock, server_side=server_side, ssl_sock=caller_self)\n\nif hasattr(__ssl__, 'SSLContext') and not hasattr(gevent.ssl, 'SSLContext'):\n    _ssl.sslwrap = new_sslwrap\n\n\nimport psutil\n\nif not hasattr(psutil, 'net_io_counters'):\n    psutil.net_io_counters = psutil.network_io_counters\n", "comments": "  add subprocess check output python   2 6    fix attributeerror    super rude fix   dummythread   block provide acquired one    fix attributeerror(  event  object attribute   reset internal locks   )    suppress requests logging    suppress simplejson    suppress cors headers socket io    re add sslwrap python 2 7 9 ", "content": "import logging\nimport subprocess\nimport os\n\n\n# add subprocess.check_output to Python < 2.6\nif not hasattr(subprocess, 'check_output'):\n    def c_o(*args, **kwargs):\n        kwargs['stdout'] = subprocess.PIPE\n        popen = subprocess.Popen(*args, **kwargs)\n        stdout, stderr = popen.communicate()\n        return stdout\n    subprocess.check_output = c_o\n\n\nold_Popen = subprocess.Popen.__init__\n\n\ndef Popen(*args, **kwargs):\n    logging.debug('Popen: %s' % (args[1],))\n    __null = open(os.devnull, 'w')\n    return old_Popen(\n        stdin=kwargs.pop('stdin', subprocess.PIPE),\n        stdout=kwargs.pop('stdout', __null),\n        stderr=kwargs.pop('stderr', __null),\n        *args, **kwargs)\n\nsubprocess.Popen.__init__ = Popen\n\n\n# fix AttributeError\n# a super-rude fix - DummyThread doesn't have a __block so provide an acquired one\nimport threading\n\n\ndef tbget(self):\n    if hasattr(self, '__compat_lock'):\n        return self.__compat_lock\n    c = threading.Condition()\n    c.acquire()\n    return c\n\n\ndef tbset(self, l):\n    self.__compat_lock = l\n\n\ndef tbdel(self):\n    del self.__compat_lock\n\nthreading.Thread._Thread__block = property(tbget, tbset, tbdel)\n\n\n# fix AttributeError(\"'Event' object has no attribute '_reset_internal_locks'\",)\nimport threading\nif not hasattr(threading.Event, '_reset_internal_locks'):\n    def r_i_l(self):\n        pass\n    threading.Event._reset_internal_locks = r_i_l\n\n\n# suppress Requests logging\nlogging.getLogger(\"requests\").setLevel(logging.WARNING)\n\n# suppress simplejson\ntry:\n    import simplejson\n    _loads = simplejson.loads\n\n    def wrap(fx):\n        def f(*args, **kwargs):\n            kwargs.pop('use_decimal', None)\n            return fx(*args, **kwargs)\n        return f\n\n    simplejson.dumps = wrap(simplejson.dumps)\n    simplejson.loads = wrap(simplejson.loads)\nexcept:\n    pass\n\n\n# Suppress CORS headers in Socket.IO\nfrom socketio.transports import BaseTransport\n\nold_transport_init = BaseTransport.__init__\n\n\ndef new_transport_init(self, *args, **kwargs):\n    old_transport_init(self, *args, **kwargs)\n    self.headers = []\n\nBaseTransport.__init__ = new_transport_init\n\n\n# Re-add sslwrap to Python 2.7.9\nimport inspect\nimport gevent.ssl\n__ssl__ = __import__('ssl')\n\ntry:\n    _ssl = __ssl__._ssl\nexcept AttributeError:\n    _ssl = __ssl__._ssl2\n\n\ndef new_sslwrap(sock, server_side=False, keyfile=None, certfile=None, cert_reqs=__ssl__.CERT_NONE, ssl_version=__ssl__.PROTOCOL_SSLv23, ca_certs=None, ciphers=None):\n    context = __ssl__.SSLContext(ssl_version)\n    context.verify_mode = cert_reqs or __ssl__.CERT_NONE\n    if ca_certs:\n        context.load_verify_locations(ca_certs)\n    if certfile:\n        context.load_cert_chain(certfile, keyfile)\n    if ciphers:\n        print ciphers\n        context.set_ciphers(ciphers)\n\n    caller_self = inspect.currentframe().f_back.f_locals['self']\n    return context._wrap_socket(sock, server_side=server_side, ssl_sock=caller_self)\n\nif hasattr(__ssl__, 'SSLContext') and not hasattr(gevent.ssl, 'SSLContext'):\n    _ssl.sslwrap = new_sslwrap\n\n\nimport psutil\n\nif not hasattr(psutil, 'net_io_counters'):\n    psutil.net_io_counters = psutil.network_io_counters\n", "description": "Ajenti Core and stock plugins", "file_name": "compat.py", "id": "7f074a984f984f657b9447e5615da109", "language": "Python", "project_name": "ajenti", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ajenti-ajenti/ajenti-ajenti-dd36ab4/ajenti/compat.py", "save_time": "", "source": "", "update_at": "2018-03-16T02:10:44Z", "url": "https://github.com/ajenti/ajenti", "wiki": false}