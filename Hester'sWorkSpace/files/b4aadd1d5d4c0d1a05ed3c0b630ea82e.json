{"author": "tgalal", "code": "from yowsup.common.http.warequest import WARequest\nfrom yowsup.common.http.waresponseparser import JSONResponseParser\nimport socket, ssl, os, hashlib, sys\nfrom time import sleep\nimport threading\nimport logging\nfrom yowsup.common.tools import MimeTools\n\nlogger = logging.getLogger(__name__)\n\nclass MediaUploader(WARequest, threading.Thread):\n    def __init__(self, jid, accountJid, sourcePath, uploadUrl, resumeOffset = 0, successClbk = None, errorClbk = None, progressCallback = None, async = True):\n        WARequest.__init__(self)\n\n        self.async = async\n        self.jid = jid\n        self.accountJid = accountJid\n        self.sourcePath = sourcePath\n        self.uploadUrl = uploadUrl\n        self.resumeOffset = resumeOffset\n\n        self.successCallback = successClbk\n        self.errorCallback = errorClbk\n        self.progressCallback = progressCallback\n\n        self.pvars = [\"name\", \"type\", \"size\", \"url\", \"error\", \"mimetype\", \"filehash\", \"width\", \"height\"]\n\n        self.setParser(JSONResponseParser())\n\n        self.sock = socket.socket()\n\n    def start(self):\n        if self.async:\n            threading.Thread.__init__(self)\n            super(MediaUploader, self).start()\n        else:\n            self.run()\n\n    def run(self):\n\n        sourcePath = self.sourcePath\n        uploadUrl = self.uploadUrl\n        _host = uploadUrl.replace(\"https://\",\"\")\n\n        self.url = _host[:_host.index('/')]\n\n\n        try:\n            filename = os.path.basename(sourcePath)\n            filetype = MimeTools.getMIME(filename)\n            filesize = os.path.getsize(sourcePath)\n\n            self.sock.connect((self.url, self.port))\n            ssl_sock = ssl.wrap_socket(self.sock)\n\n            m = hashlib.md5()\n            m.update(filename.encode())\n            crypto = m.hexdigest() + os.path.splitext(filename)[1]\n\n            boundary = \"zzXXzzYYzzXXzzQQ\"#\"-------\" + m.hexdigest() \n            contentLength = 0\n\n            hBAOS = \"--\" + boundary + \"\\r\\n\"\n            hBAOS += \"Content-Disposition: form-data; name=\\\"to\\\"\\r\\n\\r\\n\"\n            hBAOS += self.jid + \"\\r\\n\"\n            hBAOS += \"--\" + boundary + \"\\r\\n\"\n            hBAOS += \"Content-Disposition: form-data; name=\\\"from\\\"\\r\\n\\r\\n\"\n            hBAOS += self.accountJid.replace(\"@whatsapp.net\",\"\") + \"\\r\\n\"\n\n            hBAOS += \"--\" + boundary + \"\\r\\n\"\n            hBAOS += \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"\" + crypto + \"\\\"\\r\\n\"\n            hBAOS  += \"Content-Type: \" + filetype + \"\\r\\n\\r\\n\"\n\n            fBAOS = \"\\r\\n--\" + boundary + \"--\\r\\n\"\n\n            contentLength += len(hBAOS)\n            contentLength += len(fBAOS)\n            contentLength += filesize\n\n            POST = \"POST %s\\r\\n\" % uploadUrl\n            POST += \"Content-Type: multipart/form-data; boundary=\" + boundary + \"\\r\\n\"\n            POST += \"Host: %s\\r\\n\" % self.url\n            POST += \"User-Agent: %s\\r\\n\" % self.getUserAgent()\n            POST += \"Content-Length: \" + str(contentLength) + \"\\r\\n\\r\\n\"\n\n            ssl_sock.write(bytearray(POST.encode()))\n            ssl_sock.write(bytearray(hBAOS.encode()))\n\n            totalsent = 0\n            buf = 1024\n            f = open(sourcePath, 'rb')\n            stream = f.read()\n            f.close()\n            status = 0\n            lastEmit = 0\n\n            while totalsent < int(filesize):\n                ssl_sock.write(stream[:buf])\n                status = totalsent * 100 / filesize\n                if lastEmit!=status and status!=100 and filesize>12288:\n                    if self.progressCallback:\n                        self.progressCallback(self.sourcePath, self.jid, uploadUrl, int(status))\n                lastEmit = status\n                stream = stream[buf:]\n                totalsent = totalsent + buf\n\n            ssl_sock.write(bytearray(fBAOS.encode()))\n\n            sleep(1)\n            data = ssl_sock.recv(8192)\n            data += ssl_sock.recv(8192)\n            data += ssl_sock.recv(8192)\n            data += ssl_sock.recv(8192)\n            data += ssl_sock.recv(8192)\n            data += ssl_sock.recv(8192)\n            data += ssl_sock.recv(8192)\n\n            if self.progressCallback:\n                self.progressCallback(self.sourcePath, self.jid, uploadUrl, 100)\n\n\n            lines = data.decode().splitlines()\n\n\n            result = None\n\n            for l in lines:\n                if l.startswith(\"{\"):\n                    result = self.parser.parse(l, self.pvars)\n                    break\n\n            if not result:\n                raise Exception(\"json data not found\")\n\n\n            if result[\"url\"] is not None:\n                if self.successCallback:\n                    self.successCallback(sourcePath, self.jid, result[\"url\"])\n            else:\n                logger.exception(\"uploadUrl: %s, result of uploading media has no url\" % uploadUrl)\n                if self.errorCallback:\n                    self.errorCallback(sourcePath, self.jid, uploadUrl)\n\n        except:\n            logger.exception(\"Error occured at transfer %s\"%sys.exc_info()[1])\n            if self.errorCallback:\n                self.errorCallback(sourcePath, self.jid, uploadUrl)\n", "comments": "  zzxxzzyyzzxxzzqq  ", "content": "from yowsup.common.http.warequest import WARequest\nfrom yowsup.common.http.waresponseparser import JSONResponseParser\nimport socket, ssl, os, hashlib, sys\nfrom time import sleep\nimport threading\nimport logging\nfrom yowsup.common.tools import MimeTools\n\nlogger = logging.getLogger(__name__)\n\nclass MediaUploader(WARequest, threading.Thread):\n    def __init__(self, jid, accountJid, sourcePath, uploadUrl, resumeOffset = 0, successClbk = None, errorClbk = None, progressCallback = None, async = True):\n        WARequest.__init__(self)\n\n        self.async = async\n        self.jid = jid\n        self.accountJid = accountJid\n        self.sourcePath = sourcePath\n        self.uploadUrl = uploadUrl\n        self.resumeOffset = resumeOffset\n\n        self.successCallback = successClbk\n        self.errorCallback = errorClbk\n        self.progressCallback = progressCallback\n\n        self.pvars = [\"name\", \"type\", \"size\", \"url\", \"error\", \"mimetype\", \"filehash\", \"width\", \"height\"]\n\n        self.setParser(JSONResponseParser())\n\n        self.sock = socket.socket()\n\n    def start(self):\n        if self.async:\n            threading.Thread.__init__(self)\n            super(MediaUploader, self).start()\n        else:\n            self.run()\n\n    def run(self):\n\n        sourcePath = self.sourcePath\n        uploadUrl = self.uploadUrl\n        _host = uploadUrl.replace(\"https://\",\"\")\n\n        self.url = _host[:_host.index('/')]\n\n\n        try:\n            filename = os.path.basename(sourcePath)\n            filetype = MimeTools.getMIME(filename)\n            filesize = os.path.getsize(sourcePath)\n\n            self.sock.connect((self.url, self.port))\n            ssl_sock = ssl.wrap_socket(self.sock)\n\n            m = hashlib.md5()\n            m.update(filename.encode())\n            crypto = m.hexdigest() + os.path.splitext(filename)[1]\n\n            boundary = \"zzXXzzYYzzXXzzQQ\"#\"-------\" + m.hexdigest() #\"zzXXzzYYzzXXzzQQ\"\n            contentLength = 0\n\n            hBAOS = \"--\" + boundary + \"\\r\\n\"\n            hBAOS += \"Content-Disposition: form-data; name=\\\"to\\\"\\r\\n\\r\\n\"\n            hBAOS += self.jid + \"\\r\\n\"\n            hBAOS += \"--\" + boundary + \"\\r\\n\"\n            hBAOS += \"Content-Disposition: form-data; name=\\\"from\\\"\\r\\n\\r\\n\"\n            hBAOS += self.accountJid.replace(\"@whatsapp.net\",\"\") + \"\\r\\n\"\n\n            hBAOS += \"--\" + boundary + \"\\r\\n\"\n            hBAOS += \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"\" + crypto + \"\\\"\\r\\n\"\n            hBAOS  += \"Content-Type: \" + filetype + \"\\r\\n\\r\\n\"\n\n            fBAOS = \"\\r\\n--\" + boundary + \"--\\r\\n\"\n\n            contentLength += len(hBAOS)\n            contentLength += len(fBAOS)\n            contentLength += filesize\n\n            POST = \"POST %s\\r\\n\" % uploadUrl\n            POST += \"Content-Type: multipart/form-data; boundary=\" + boundary + \"\\r\\n\"\n            POST += \"Host: %s\\r\\n\" % self.url\n            POST += \"User-Agent: %s\\r\\n\" % self.getUserAgent()\n            POST += \"Content-Length: \" + str(contentLength) + \"\\r\\n\\r\\n\"\n\n            ssl_sock.write(bytearray(POST.encode()))\n            ssl_sock.write(bytearray(hBAOS.encode()))\n\n            totalsent = 0\n            buf = 1024\n            f = open(sourcePath, 'rb')\n            stream = f.read()\n            f.close()\n            status = 0\n            lastEmit = 0\n\n            while totalsent < int(filesize):\n                ssl_sock.write(stream[:buf])\n                status = totalsent * 100 / filesize\n                if lastEmit!=status and status!=100 and filesize>12288:\n                    if self.progressCallback:\n                        self.progressCallback(self.sourcePath, self.jid, uploadUrl, int(status))\n                lastEmit = status\n                stream = stream[buf:]\n                totalsent = totalsent + buf\n\n            ssl_sock.write(bytearray(fBAOS.encode()))\n\n            sleep(1)\n            data = ssl_sock.recv(8192)\n            data += ssl_sock.recv(8192)\n            data += ssl_sock.recv(8192)\n            data += ssl_sock.recv(8192)\n            data += ssl_sock.recv(8192)\n            data += ssl_sock.recv(8192)\n            data += ssl_sock.recv(8192)\n\n            if self.progressCallback:\n                self.progressCallback(self.sourcePath, self.jid, uploadUrl, 100)\n\n\n            lines = data.decode().splitlines()\n\n\n            result = None\n\n            for l in lines:\n                if l.startswith(\"{\"):\n                    result = self.parser.parse(l, self.pvars)\n                    break\n\n            if not result:\n                raise Exception(\"json data not found\")\n\n\n            if result[\"url\"] is not None:\n                if self.successCallback:\n                    self.successCallback(sourcePath, self.jid, result[\"url\"])\n            else:\n                logger.exception(\"uploadUrl: %s, result of uploading media has no url\" % uploadUrl)\n                if self.errorCallback:\n                    self.errorCallback(sourcePath, self.jid, uploadUrl)\n\n        except:\n            logger.exception(\"Error occured at transfer %s\"%sys.exc_info()[1])\n            if self.errorCallback:\n                self.errorCallback(sourcePath, self.jid, uploadUrl)\n", "description": "The python WhatsApp library", "file_name": "mediauploader.py", "id": "b4aadd1d5d4c0d1a05ed3c0b630ea82e", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_media/mediauploader.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}