{"author": "localstack", "code": "import unittest\nfrom localstack.services.s3 import s3_listener, multipart_content\nfrom requests.models import CaseInsensitiveDict\n\n\nclass S3ListenerTest (unittest.TestCase):\n\n    def test_expand_redirect_url(self):\n        url1 = s3_listener.expand_redirect_url('http://example.org', 'K', 'B')\n        self.assertEqual(url1, 'http://example.org?key=K&bucket=B')\n\n        url2 = s3_listener.expand_redirect_url('http://example.org/?id=I', 'K', 'B')\n        self.assertEqual(url2, 'http://example.org/?id=I&key=K&bucket=B')\n\n    def test_find_multipart_redirect_url(self):\n        headers = {'Host': '10.0.1.19:4572', 'User-Agent': 'curl/7.51.0',\n            'Accept': '*/*', 'Content-Length': '992', 'Expect': '100-continue',\n            'Content-Type': 'multipart/form-data; boundary=------------------------3c48c744237517ac'}\n\n        data1 = (b'--------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"key\"\\r\\n\\r\\n'\n                 b'uploads/20170826T181315.679087009Z/upload/pixel.png\\r\\n--------------------------3c48c744237517ac'\n                 b'\\r\\nContent-Disposition: form-data; name=\"success_action_redirect\"\\r\\n\\r\\nhttp://127.0.0.1:5000/'\n                 b'?id=20170826T181315.679087009Z\\r\\n--------------------------3c48c744237517ac--\\r\\n')\n\n        data2 = (b'--------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"key\"\\r\\n\\r\\n'\n                 b'uploads/20170826T181315.679087009Z/upload/pixel.png\\r\\n--------------------------3c48c744237517ac'\n                 b'--\\r\\n')\n\n        data3 = (b'--------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"success_action_'\n                 b'redirect\"\\r\\n\\r\\nhttp://127.0.0.1:5000/?id=20170826T181315.679087009Z\\r\\n--------------------------'\n                 b'3c48c744237517ac--\\r\\n')\n\n        key1, url1 = multipart_content.find_multipart_redirect_url(data1, headers)\n\n        self.assertEqual(key1, 'uploads/20170826T181315.679087009Z/upload/pixel.png')\n        self.assertEqual(url1, 'http://127.0.0.1:5000/?id=20170826T181315.679087009Z')\n\n        key2, url2 = multipart_content.find_multipart_redirect_url(data2, headers)\n\n        self.assertEqual(key2, 'uploads/20170826T181315.679087009Z/upload/pixel.png')\n        self.assertIsNone(url2, 'Should not get a redirect URL without success_action_redirect')\n\n        key3, url3 = multipart_content.find_multipart_redirect_url(data3, headers)\n\n        self.assertIsNone(key3, 'Should not get a key without provided key')\n        self.assertIsNone(url3, 'Should not get a redirect URL without provided key')\n\n    def test_expand_multipart_filename(self):\n        headers = {'Host': '10.0.1.19:4572', 'User-Agent': 'curl/7.51.0',\n            'Accept': '*/*', 'Content-Length': '992', 'Expect': '100-continue',\n            'Content-Type': 'multipart/form-data; boundary=------------------------3c48c744237517ac'}\n\n        data1 = (b'--------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"key\"\\r\\n\\r\\n'\n                 b'uploads/20170826T181315.679087009Z/upload/${filename}\\r\\n--------------------------3c48c744237517ac'\n                 b'\\r\\nContent-Disposition: form-data; name=\"AWSAccessKeyId\"\\r\\n\\r\\nWHAT\\r\\n--------------------------'\n                 b'3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"policy\"\\r\\n\\r\\nNO\\r\\n--------------------'\n                 b'------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"signature\"\\r\\n\\r\\nYUP\\r\\n----------'\n                 b'----------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"acl\"\\r\\n\\r\\nprivate\\r\\n--'\n                 b'------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"success_action_re'\n                 b'direct\"\\r\\n\\r\\nhttp://127.0.0.1:5000/\\r\\n--------------------------3c48c744237517ac\\r\\nContent-Disp'\n                 b'osition: form-data; name=\"file\"; filename=\"pixel.png\"\\r\\nContent-Type: application/octet-stream\\r\\n'\n                 b'\\r\\n\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x08\\x06\\x00\\x00\\x00\\x1f\\x15'\n                 b'\\xc4\\x89\\x00\\x00\\x00\\x19tEXtSoftware\\x00Adobe ImageReadyq\\xc9e<\\x00\\x00\\x00\\x0eIDATx\\xdabb\\x00\\x02'\n                 b'\\x80\\x00\\x03\\x00\\x00\\x0f\\x00\\x03`|\\xce\\xe9\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82\\r\\n-----------------------'\n                 b'---3c48c744237517ac--\\r\\n')\n\n        data2 = (b'--------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"key\"\\r\\n\\r\\n'\n                 b'uploads/20170826T181315.679087009Z/upload/pixel.png\\r\\n--------------------------3c48c744237517ac'\n                 b'\\r\\nContent-Disposition: form-data; name=\"AWSAccessKeyId\"\\r\\n\\r\\nWHAT\\r\\n--------------------------'\n                 b'3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"policy\"\\r\\n\\r\\nNO\\r\\n--------------------'\n                 b'------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"signature\"\\r\\n\\r\\nYUP\\r\\n----------'\n                 b'----------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"acl\"\\r\\n\\r\\nprivate\\r\\n--'\n                 b'------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"success_action_re'\n                 b'direct\"\\r\\n\\r\\nhttp://127.0.0.1:5000/\\r\\n--------------------------3c48c744237517ac\\r\\nContent-Disp'\n                 b'osition: form-data; name=\"file\"; filename=\"pixel.png\"\\r\\nContent-Type: application/octet-stream\\r\\n'\n                 b'\\r\\n\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x08\\x06\\x00\\x00\\x00\\x1f\\x15'\n                 b'\\xc4\\x89\\x00\\x00\\x00\\x19tEXtSoftware\\x00Adobe ImageReadyq\\xc9e<\\x00\\x00\\x00\\x0eIDATx\\xdabb\\x00\\x02'\n                 b'\\x80\\x00\\x03\\x00\\x00\\x0f\\x00\\x03`|\\xce\\xe9\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82\\r\\n-----------------------'\n                 b'---3c48c744237517ac--\\r\\n')\n\n        data3 = (u'--------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"key\"\\r\\n\\r\\n'\n                 u'uploads/20170826T181315.679087009Z/upload/${filename}\\r\\n--------------------------3c48c744237517ac'\n                 u'\\r\\nContent-Disposition: form-data; name=\"AWSAccessKeyId\"\\r\\n\\r\\nWHAT\\r\\n--------------------------'\n                 u'3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"policy\"\\r\\n\\r\\nNO\\r\\n--------------------'\n                 u'------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"signature\"\\r\\n\\r\\nYUP\\r\\n----------'\n                 u'----------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"acl\"\\r\\n\\r\\nprivate\\r\\n--'\n                 u'------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"success_action_re'\n                 u'direct\"\\r\\n\\r\\nhttp://127.0.0.1:5000/\\r\\n--------------------------3c48c744237517ac\\r\\nContent-Disp'\n                 u'osition: form-data; name=\"file\"; filename=\"pixel.txt\"\\r\\nContent-Type: text/plain\\r\\n\\r\\nHello World'\n                 u'\\r\\n--------------------------3c48c744237517ac--\\r\\n')\n\n        expanded1 = multipart_content.expand_multipart_filename(data1, headers)\n        self.assertIsNot(expanded1, data1, 'Should have changed content of data with filename to interpolate')\n        self.assertIn(b'uploads/20170826T181315.679087009Z/upload/pixel.png', expanded1,\n            'Should see the interpolated filename')\n\n        expanded2 = multipart_content.expand_multipart_filename(data2, headers)\n        self.assertIs(expanded2, data2, 'Should not have changed content of data with no filename to interpolate')\n\n        expanded3 = multipart_content.expand_multipart_filename(data3, headers)\n        self.assertIsNot(expanded3, data3, 'Should have changed content of string data with filename to interpolate')\n        self.assertIn(b'uploads/20170826T181315.679087009Z/upload/pixel.txt', expanded3,\n            'Should see the interpolated filename')\n\n    def test_get_bucket_name(self):\n        bucket_name = 'test-bucket'\n        s3_key = '/some-folder/some-key.txt'\n\n        hosts = ['s3-ap-northeast-1.amazonaws.com',\n                 's3-ap-northeast-2.amazonaws.com',\n                 's3-ap-south-1.amazonaws.com',\n                 's3-ap-southeast-1.amazonaws.com',\n                 's3-ap-southeast-2.amazonaws.com',\n                 's3-ca-central-1.amazonaws.com',\n                 's3-eu-central-1.amazonaws.com',\n                 's3-eu-west-1.amazonaws.com',\n                 's3-eu-west-2.amazonaws.com',\n                 's3-eu-west-3.amazonaws.com',\n                 's3-external-1.amazonaws.com',\n                 's3-sa-east-1.amazonaws.com',\n                 's3-us-east-2.amazonaws.com',\n                 's3-us-west-1.amazonaws.com',\n                 's3-us-west-2.amazonaws.com',\n                 's3.amazonaws.com',\n                 's3.ap-northeast-1.amazonaws.com',\n                 's3.ap-northeast-2.amazonaws.com',\n                 's3.ap-south-1.amazonaws.com',\n                 's3.ap-southeast-1.amazonaws.com',\n                 's3.ap-southeast-2.amazonaws.com',\n                 's3.ca-central-1.amazonaws.com',\n                 's3.cn-north-1.amazonaws.com.cn',\n                 's3.cn-northwest-1.amazonaws.com.cn',\n                 's3.dualstack.ap-northeast-1.amazonaws.com',\n                 's3.dualstack.ap-northeast-2.amazonaws.com',\n                 's3.dualstack.ap-south-1.amazonaws.com',\n                 's3.dualstack.ap-southeast-1.amazonaws.com',\n                 's3.dualstack.ap-southeast-2.amazonaws.com',\n                 's3.dualstack.ca-central-1.amazonaws.com',\n                 's3.dualstack.eu-central-1.amazonaws.com',\n                 's3.dualstack.eu-west-1.amazonaws.com',\n                 's3.dualstack.eu-west-2.amazonaws.com',\n                 's3.dualstack.eu-west-3.amazonaws.com',\n                 's3.dualstack.sa-east-1.amazonaws.com',\n                 's3.dualstack.us-east-1.amazonaws.com',\n                 's3.dualstack.us-east-2.amazonaws.com',\n                 's3.dualstack.us-west-1.amazonaws.com',\n                 's3.dualstack.us-west-2.amazonaws.com',\n                 's3.eu-central-1.amazonaws.com',\n                 's3.eu-west-1.amazonaws.com',\n                 's3.eu-west-2.amazonaws.com',\n                 's3.eu-west-3.amazonaws.com',\n                 's3.sa-east-1.amazonaws.com',\n                 's3.us-east-1.amazonaws.com',\n                 's3.us-east-2.amazonaws.com',\n                 's3.us-west-1.amazonaws.com',\n                 's3.us-west-2.amazonaws.com']\n\n        \n        bucket_path = '/{}/{}'.format(bucket_name, s3_key)\n        for host in hosts:\n            headers = CaseInsensitiveDict({'Host': hosts[0]})\n            returned_bucket_name = s3_listener.get_bucket_name(bucket_path, headers)\n            self.assertEqual(returned_bucket_name, bucket_name, 'Should match when bucket_name is in path')\n\n        \n        for host in hosts:\n            headers = CaseInsensitiveDict({'Host': '{}.{}'.format(bucket_name, host)})\n            returned_bucket_name = s3_listener.get_bucket_name(s3_key, headers)\n            self.assertEqual(returned_bucket_name, bucket_name, 'Should match when bucket_name is in the host')\n\n    def test_event_type_matching(self):\n        match = s3_listener.event_type_matches\n        self.assertTrue(match(['s3:ObjectCreated:*'], 'ObjectCreated', 'Put'))\n        self.assertTrue(match(['s3:ObjectCreated:*'], 'ObjectCreated', 'Post'))\n        self.assertTrue(match(['s3:ObjectCreated:Post'], 'ObjectCreated', 'Post'))\n        self.assertTrue(match(['s3:ObjectDeleted:*'], 'ObjectDeleted', 'Delete'))\n        self.assertFalse(match(['s3:ObjectCreated:Post'], 'ObjectCreated', 'Put'))\n        self.assertFalse(match(['s3:ObjectCreated:Post'], 'ObjectDeleted', 'Put'))\n", "comments": "  test available hosts bucket name path    test available hosts bucket name host path s3 key ", "content": "import unittest\nfrom localstack.services.s3 import s3_listener, multipart_content\nfrom requests.models import CaseInsensitiveDict\n\n\nclass S3ListenerTest (unittest.TestCase):\n\n    def test_expand_redirect_url(self):\n        url1 = s3_listener.expand_redirect_url('http://example.org', 'K', 'B')\n        self.assertEqual(url1, 'http://example.org?key=K&bucket=B')\n\n        url2 = s3_listener.expand_redirect_url('http://example.org/?id=I', 'K', 'B')\n        self.assertEqual(url2, 'http://example.org/?id=I&key=K&bucket=B')\n\n    def test_find_multipart_redirect_url(self):\n        headers = {'Host': '10.0.1.19:4572', 'User-Agent': 'curl/7.51.0',\n            'Accept': '*/*', 'Content-Length': '992', 'Expect': '100-continue',\n            'Content-Type': 'multipart/form-data; boundary=------------------------3c48c744237517ac'}\n\n        data1 = (b'--------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"key\"\\r\\n\\r\\n'\n                 b'uploads/20170826T181315.679087009Z/upload/pixel.png\\r\\n--------------------------3c48c744237517ac'\n                 b'\\r\\nContent-Disposition: form-data; name=\"success_action_redirect\"\\r\\n\\r\\nhttp://127.0.0.1:5000/'\n                 b'?id=20170826T181315.679087009Z\\r\\n--------------------------3c48c744237517ac--\\r\\n')\n\n        data2 = (b'--------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"key\"\\r\\n\\r\\n'\n                 b'uploads/20170826T181315.679087009Z/upload/pixel.png\\r\\n--------------------------3c48c744237517ac'\n                 b'--\\r\\n')\n\n        data3 = (b'--------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"success_action_'\n                 b'redirect\"\\r\\n\\r\\nhttp://127.0.0.1:5000/?id=20170826T181315.679087009Z\\r\\n--------------------------'\n                 b'3c48c744237517ac--\\r\\n')\n\n        key1, url1 = multipart_content.find_multipart_redirect_url(data1, headers)\n\n        self.assertEqual(key1, 'uploads/20170826T181315.679087009Z/upload/pixel.png')\n        self.assertEqual(url1, 'http://127.0.0.1:5000/?id=20170826T181315.679087009Z')\n\n        key2, url2 = multipart_content.find_multipart_redirect_url(data2, headers)\n\n        self.assertEqual(key2, 'uploads/20170826T181315.679087009Z/upload/pixel.png')\n        self.assertIsNone(url2, 'Should not get a redirect URL without success_action_redirect')\n\n        key3, url3 = multipart_content.find_multipart_redirect_url(data3, headers)\n\n        self.assertIsNone(key3, 'Should not get a key without provided key')\n        self.assertIsNone(url3, 'Should not get a redirect URL without provided key')\n\n    def test_expand_multipart_filename(self):\n        headers = {'Host': '10.0.1.19:4572', 'User-Agent': 'curl/7.51.0',\n            'Accept': '*/*', 'Content-Length': '992', 'Expect': '100-continue',\n            'Content-Type': 'multipart/form-data; boundary=------------------------3c48c744237517ac'}\n\n        data1 = (b'--------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"key\"\\r\\n\\r\\n'\n                 b'uploads/20170826T181315.679087009Z/upload/${filename}\\r\\n--------------------------3c48c744237517ac'\n                 b'\\r\\nContent-Disposition: form-data; name=\"AWSAccessKeyId\"\\r\\n\\r\\nWHAT\\r\\n--------------------------'\n                 b'3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"policy\"\\r\\n\\r\\nNO\\r\\n--------------------'\n                 b'------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"signature\"\\r\\n\\r\\nYUP\\r\\n----------'\n                 b'----------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"acl\"\\r\\n\\r\\nprivate\\r\\n--'\n                 b'------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"success_action_re'\n                 b'direct\"\\r\\n\\r\\nhttp://127.0.0.1:5000/\\r\\n--------------------------3c48c744237517ac\\r\\nContent-Disp'\n                 b'osition: form-data; name=\"file\"; filename=\"pixel.png\"\\r\\nContent-Type: application/octet-stream\\r\\n'\n                 b'\\r\\n\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x08\\x06\\x00\\x00\\x00\\x1f\\x15'\n                 b'\\xc4\\x89\\x00\\x00\\x00\\x19tEXtSoftware\\x00Adobe ImageReadyq\\xc9e<\\x00\\x00\\x00\\x0eIDATx\\xdabb\\x00\\x02'\n                 b'\\x80\\x00\\x03\\x00\\x00\\x0f\\x00\\x03`|\\xce\\xe9\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82\\r\\n-----------------------'\n                 b'---3c48c744237517ac--\\r\\n')\n\n        data2 = (b'--------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"key\"\\r\\n\\r\\n'\n                 b'uploads/20170826T181315.679087009Z/upload/pixel.png\\r\\n--------------------------3c48c744237517ac'\n                 b'\\r\\nContent-Disposition: form-data; name=\"AWSAccessKeyId\"\\r\\n\\r\\nWHAT\\r\\n--------------------------'\n                 b'3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"policy\"\\r\\n\\r\\nNO\\r\\n--------------------'\n                 b'------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"signature\"\\r\\n\\r\\nYUP\\r\\n----------'\n                 b'----------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"acl\"\\r\\n\\r\\nprivate\\r\\n--'\n                 b'------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"success_action_re'\n                 b'direct\"\\r\\n\\r\\nhttp://127.0.0.1:5000/\\r\\n--------------------------3c48c744237517ac\\r\\nContent-Disp'\n                 b'osition: form-data; name=\"file\"; filename=\"pixel.png\"\\r\\nContent-Type: application/octet-stream\\r\\n'\n                 b'\\r\\n\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x08\\x06\\x00\\x00\\x00\\x1f\\x15'\n                 b'\\xc4\\x89\\x00\\x00\\x00\\x19tEXtSoftware\\x00Adobe ImageReadyq\\xc9e<\\x00\\x00\\x00\\x0eIDATx\\xdabb\\x00\\x02'\n                 b'\\x80\\x00\\x03\\x00\\x00\\x0f\\x00\\x03`|\\xce\\xe9\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82\\r\\n-----------------------'\n                 b'---3c48c744237517ac--\\r\\n')\n\n        data3 = (u'--------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"key\"\\r\\n\\r\\n'\n                 u'uploads/20170826T181315.679087009Z/upload/${filename}\\r\\n--------------------------3c48c744237517ac'\n                 u'\\r\\nContent-Disposition: form-data; name=\"AWSAccessKeyId\"\\r\\n\\r\\nWHAT\\r\\n--------------------------'\n                 u'3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"policy\"\\r\\n\\r\\nNO\\r\\n--------------------'\n                 u'------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"signature\"\\r\\n\\r\\nYUP\\r\\n----------'\n                 u'----------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"acl\"\\r\\n\\r\\nprivate\\r\\n--'\n                 u'------------------------3c48c744237517ac\\r\\nContent-Disposition: form-data; name=\"success_action_re'\n                 u'direct\"\\r\\n\\r\\nhttp://127.0.0.1:5000/\\r\\n--------------------------3c48c744237517ac\\r\\nContent-Disp'\n                 u'osition: form-data; name=\"file\"; filename=\"pixel.txt\"\\r\\nContent-Type: text/plain\\r\\n\\r\\nHello World'\n                 u'\\r\\n--------------------------3c48c744237517ac--\\r\\n')\n\n        expanded1 = multipart_content.expand_multipart_filename(data1, headers)\n        self.assertIsNot(expanded1, data1, 'Should have changed content of data with filename to interpolate')\n        self.assertIn(b'uploads/20170826T181315.679087009Z/upload/pixel.png', expanded1,\n            'Should see the interpolated filename')\n\n        expanded2 = multipart_content.expand_multipart_filename(data2, headers)\n        self.assertIs(expanded2, data2, 'Should not have changed content of data with no filename to interpolate')\n\n        expanded3 = multipart_content.expand_multipart_filename(data3, headers)\n        self.assertIsNot(expanded3, data3, 'Should have changed content of string data with filename to interpolate')\n        self.assertIn(b'uploads/20170826T181315.679087009Z/upload/pixel.txt', expanded3,\n            'Should see the interpolated filename')\n\n    def test_get_bucket_name(self):\n        bucket_name = 'test-bucket'\n        s3_key = '/some-folder/some-key.txt'\n\n        hosts = ['s3-ap-northeast-1.amazonaws.com',\n                 's3-ap-northeast-2.amazonaws.com',\n                 's3-ap-south-1.amazonaws.com',\n                 's3-ap-southeast-1.amazonaws.com',\n                 's3-ap-southeast-2.amazonaws.com',\n                 's3-ca-central-1.amazonaws.com',\n                 's3-eu-central-1.amazonaws.com',\n                 's3-eu-west-1.amazonaws.com',\n                 's3-eu-west-2.amazonaws.com',\n                 's3-eu-west-3.amazonaws.com',\n                 's3-external-1.amazonaws.com',\n                 's3-sa-east-1.amazonaws.com',\n                 's3-us-east-2.amazonaws.com',\n                 's3-us-west-1.amazonaws.com',\n                 's3-us-west-2.amazonaws.com',\n                 's3.amazonaws.com',\n                 's3.ap-northeast-1.amazonaws.com',\n                 's3.ap-northeast-2.amazonaws.com',\n                 's3.ap-south-1.amazonaws.com',\n                 's3.ap-southeast-1.amazonaws.com',\n                 's3.ap-southeast-2.amazonaws.com',\n                 's3.ca-central-1.amazonaws.com',\n                 's3.cn-north-1.amazonaws.com.cn',\n                 's3.cn-northwest-1.amazonaws.com.cn',\n                 's3.dualstack.ap-northeast-1.amazonaws.com',\n                 's3.dualstack.ap-northeast-2.amazonaws.com',\n                 's3.dualstack.ap-south-1.amazonaws.com',\n                 's3.dualstack.ap-southeast-1.amazonaws.com',\n                 's3.dualstack.ap-southeast-2.amazonaws.com',\n                 's3.dualstack.ca-central-1.amazonaws.com',\n                 's3.dualstack.eu-central-1.amazonaws.com',\n                 's3.dualstack.eu-west-1.amazonaws.com',\n                 's3.dualstack.eu-west-2.amazonaws.com',\n                 's3.dualstack.eu-west-3.amazonaws.com',\n                 's3.dualstack.sa-east-1.amazonaws.com',\n                 's3.dualstack.us-east-1.amazonaws.com',\n                 's3.dualstack.us-east-2.amazonaws.com',\n                 's3.dualstack.us-west-1.amazonaws.com',\n                 's3.dualstack.us-west-2.amazonaws.com',\n                 's3.eu-central-1.amazonaws.com',\n                 's3.eu-west-1.amazonaws.com',\n                 's3.eu-west-2.amazonaws.com',\n                 's3.eu-west-3.amazonaws.com',\n                 's3.sa-east-1.amazonaws.com',\n                 's3.us-east-1.amazonaws.com',\n                 's3.us-east-2.amazonaws.com',\n                 's3.us-west-1.amazonaws.com',\n                 's3.us-west-2.amazonaws.com']\n\n        # test all available hosts with the bucket_name in the path\n        bucket_path = '/{}/{}'.format(bucket_name, s3_key)\n        for host in hosts:\n            headers = CaseInsensitiveDict({'Host': hosts[0]})\n            returned_bucket_name = s3_listener.get_bucket_name(bucket_path, headers)\n            self.assertEqual(returned_bucket_name, bucket_name, 'Should match when bucket_name is in path')\n\n        # test all available hosts with the bucket_name in the host and the path is only the s3_key\n        for host in hosts:\n            headers = CaseInsensitiveDict({'Host': '{}.{}'.format(bucket_name, host)})\n            returned_bucket_name = s3_listener.get_bucket_name(s3_key, headers)\n            self.assertEqual(returned_bucket_name, bucket_name, 'Should match when bucket_name is in the host')\n\n    def test_event_type_matching(self):\n        match = s3_listener.event_type_matches\n        self.assertTrue(match(['s3:ObjectCreated:*'], 'ObjectCreated', 'Put'))\n        self.assertTrue(match(['s3:ObjectCreated:*'], 'ObjectCreated', 'Post'))\n        self.assertTrue(match(['s3:ObjectCreated:Post'], 'ObjectCreated', 'Post'))\n        self.assertTrue(match(['s3:ObjectDeleted:*'], 'ObjectDeleted', 'Delete'))\n        self.assertFalse(match(['s3:ObjectCreated:Post'], 'ObjectCreated', 'Put'))\n        self.assertFalse(match(['s3:ObjectCreated:Post'], 'ObjectDeleted', 'Put'))\n", "description": "\ud83d\udcbb  A fully functional local AWS cloud stack. Develop and test your cloud apps offline!", "file_name": "test_s3.py", "id": "d30c073e715a51a40a0495705ef183b2", "language": "Python", "project_name": "localstack", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/localstack-localstack/localstack-localstack-fcc848e/tests/unit/test_s3.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:04:08Z", "url": "https://github.com/localstack/localstack", "wiki": true}