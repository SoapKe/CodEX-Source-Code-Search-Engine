{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\"\"\"Provides data for the ImageNet ILSVRC 2012 Dataset plus some bounding boxes.\n\nSome images have one or more bounding boxes associated with the label of the\nimage. See details here: http://image-net.org/download-bboxes\n\nWARNING: Don't use for object detection, in this case all the bounding boxes\nof the image belong to just one class.\n\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\nimport tensorflow as tf\n\nslim = tf.contrib.slim\n\n_FILE_PATTERN = '%s-*'\n\n_SPLITS_TO_SIZES = {\n    'train': 1281167,\n    'validation': 50000,\n}\n\n_ITEMS_TO_DESCRIPTIONS = {\n    'image': 'A color image of varying height and width.',\n    'label': 'The label id of the image, integer between 0 and 999',\n    'label_text': 'The text of the label.',\n    'object/bbox': 'A list of bounding boxes.',\n    'object/label': 'A list of labels, one per each object.',\n}\n\n_NUM_CLASSES = 1001\n\n\ndef get_split(split_name, dataset_dir, file_pattern=None, reader=None):\n  \"\"\"Gets a dataset tuple with instructions for reading ImageNet.\n\n  Args:\n    split_name: A train/test split name.\n    dataset_dir: The base directory of the dataset sources.\n    file_pattern: The file pattern to use when matching the dataset sources.\n      It is assumed that the pattern contains a '%s' string so that the split\n      name can be inserted.\n    reader: The TensorFlow reader type.\n\n  Returns:\n    A `Dataset` namedtuple.\n\n  Raises:\n    ValueError: if `split_name` is not a valid train/test split.\n  \"\"\"\n  if split_name not in _SPLITS_TO_SIZES:\n    raise ValueError('split name %s was not recognized.' % split_name)\n\n  if not file_pattern:\n    file_pattern = _FILE_PATTERN\n  file_pattern = os.path.join(dataset_dir, file_pattern % split_name)\n\n   Allowing None in the signature so that dataset_factory can use the default.\n  if reader is None:\n    reader = tf.TFRecordReader\n\n  keys_to_features = {\n      'image/encoded': tf.FixedLenFeature(\n          (), tf.string, default_value=''),\n      'image/format': tf.FixedLenFeature(\n          (), tf.string, default_value='jpeg'),\n      'image/class/label': tf.FixedLenFeature(\n          [], dtype=tf.int64, default_value=-1),\n      'image/class/text': tf.FixedLenFeature(\n          [], dtype=tf.string, default_value=''),\n      'image/object/bbox/xmin': tf.VarLenFeature(\n          dtype=tf.float32),\n      'image/object/bbox/ymin': tf.VarLenFeature(\n          dtype=tf.float32),\n      'image/object/bbox/xmax': tf.VarLenFeature(\n          dtype=tf.float32),\n      'image/object/bbox/ymax': tf.VarLenFeature(\n          dtype=tf.float32),\n      'image/object/class/label': tf.VarLenFeature(\n          dtype=tf.int64),\n  }\n\n  items_to_handlers = {\n      'image': slim.tfexample_decoder.Image('image/encoded', 'image/format'),\n      'label': slim.tfexample_decoder.Tensor('image/class/label'),\n      'label_text': slim.tfexample_decoder.Tensor('image/class/text'),\n      'object/bbox': slim.tfexample_decoder.BoundingBox(\n          ['ymin', 'xmin', 'ymax', 'xmax'], 'image/object/bbox/'),\n      'object/label': slim.tfexample_decoder.Tensor('image/object/class/label'),\n  }\n\n  decoder = slim.tfexample_decoder.TFExampleDecoder(\n      keys_to_features, items_to_handlers)\n\n  return slim.dataset.Dataset(\n      data_sources=file_pattern,\n      reader=reader,\n      decoder=decoder,\n      num_samples=_SPLITS_TO_SIZES[split_name],\n      items_to_descriptions=_ITEMS_TO_DESCRIPTIONS,\n      num_classes=_NUM_CLASSES)\n", "comments": "   provides data imagenet ilsvrc 2012 dataset plus bounding boxes   some images one bounding boxes associated label image  see details  http   image net org download bboxes  warning  don use object detection  case bounding boxes image belong one class        future   import absolute import   future   import division   future   import print function  import os import tensorflow tf  slim   tf contrib slim   file pattern          splits to sizes          train   1281167       validation   50000      items to descriptions          image    a color image varying height width         label    the label id image  integer 0 999        label text    the text label         object bbox    a list bounding boxes         object label    a list labels  one per object        num classes   1001   def get split(split name  dataset dir  file pattern none  reader none)       gets dataset tuple instructions reading imagenet     args      split name  a train test split name      dataset dir  the base directory dataset sources      file pattern  the file pattern use matching dataset sources        it assumed pattern contains    string split       name inserted      reader  the tensorflow reader type     returns      a  dataset  namedtuple     raises      valueerror   split name  valid train test split           copyright 2017 the tensorflow authors all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       allowing none signature dataset factory use default  ", "content": "# Copyright 2017 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"Provides data for the ImageNet ILSVRC 2012 Dataset plus some bounding boxes.\n\nSome images have one or more bounding boxes associated with the label of the\nimage. See details here: http://image-net.org/download-bboxes\n\nWARNING: Don't use for object detection, in this case all the bounding boxes\nof the image belong to just one class.\n\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\nimport tensorflow as tf\n\nslim = tf.contrib.slim\n\n_FILE_PATTERN = '%s-*'\n\n_SPLITS_TO_SIZES = {\n    'train': 1281167,\n    'validation': 50000,\n}\n\n_ITEMS_TO_DESCRIPTIONS = {\n    'image': 'A color image of varying height and width.',\n    'label': 'The label id of the image, integer between 0 and 999',\n    'label_text': 'The text of the label.',\n    'object/bbox': 'A list of bounding boxes.',\n    'object/label': 'A list of labels, one per each object.',\n}\n\n_NUM_CLASSES = 1001\n\n\ndef get_split(split_name, dataset_dir, file_pattern=None, reader=None):\n  \"\"\"Gets a dataset tuple with instructions for reading ImageNet.\n\n  Args:\n    split_name: A train/test split name.\n    dataset_dir: The base directory of the dataset sources.\n    file_pattern: The file pattern to use when matching the dataset sources.\n      It is assumed that the pattern contains a '%s' string so that the split\n      name can be inserted.\n    reader: The TensorFlow reader type.\n\n  Returns:\n    A `Dataset` namedtuple.\n\n  Raises:\n    ValueError: if `split_name` is not a valid train/test split.\n  \"\"\"\n  if split_name not in _SPLITS_TO_SIZES:\n    raise ValueError('split name %s was not recognized.' % split_name)\n\n  if not file_pattern:\n    file_pattern = _FILE_PATTERN\n  file_pattern = os.path.join(dataset_dir, file_pattern % split_name)\n\n  # Allowing None in the signature so that dataset_factory can use the default.\n  if reader is None:\n    reader = tf.TFRecordReader\n\n  keys_to_features = {\n      'image/encoded': tf.FixedLenFeature(\n          (), tf.string, default_value=''),\n      'image/format': tf.FixedLenFeature(\n          (), tf.string, default_value='jpeg'),\n      'image/class/label': tf.FixedLenFeature(\n          [], dtype=tf.int64, default_value=-1),\n      'image/class/text': tf.FixedLenFeature(\n          [], dtype=tf.string, default_value=''),\n      'image/object/bbox/xmin': tf.VarLenFeature(\n          dtype=tf.float32),\n      'image/object/bbox/ymin': tf.VarLenFeature(\n          dtype=tf.float32),\n      'image/object/bbox/xmax': tf.VarLenFeature(\n          dtype=tf.float32),\n      'image/object/bbox/ymax': tf.VarLenFeature(\n          dtype=tf.float32),\n      'image/object/class/label': tf.VarLenFeature(\n          dtype=tf.int64),\n  }\n\n  items_to_handlers = {\n      'image': slim.tfexample_decoder.Image('image/encoded', 'image/format'),\n      'label': slim.tfexample_decoder.Tensor('image/class/label'),\n      'label_text': slim.tfexample_decoder.Tensor('image/class/text'),\n      'object/bbox': slim.tfexample_decoder.BoundingBox(\n          ['ymin', 'xmin', 'ymax', 'xmax'], 'image/object/bbox/'),\n      'object/label': slim.tfexample_decoder.Tensor('image/object/class/label'),\n  }\n\n  decoder = slim.tfexample_decoder.TFExampleDecoder(\n      keys_to_features, items_to_handlers)\n\n  return slim.dataset.Dataset(\n      data_sources=file_pattern,\n      reader=reader,\n      decoder=decoder,\n      num_samples=_SPLITS_TO_SIZES[split_name],\n      items_to_descriptions=_ITEMS_TO_DESCRIPTIONS,\n      num_classes=_NUM_CLASSES)\n", "description": "Models and examples built with TensorFlow", "file_name": "imagenet.py", "id": "356b3e4029296e31f51669cd121de29d", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/research/adv_imagenet_models/imagenet.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}