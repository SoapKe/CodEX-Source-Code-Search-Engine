{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom lxml import objectify\nimport time\n\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.addons.payment.tests.common import PaymentAcquirerCommon\nfrom odoo.addons.payment_ogone.controllers.main import OgoneController\nfrom werkzeug import urls\n\nfrom odoo.tools import mute_logger\n\n\nclass OgonePayment(PaymentAcquirerCommon):\n\n    def setUp(self):\n        super(OgonePayment, self).setUp()\n\n        self.ogone = self.env.ref('payment.payment_acquirer_ogone')\n\n    def test_10_ogone_form_render(self):\n        base_url = self.env['ir.config_parameter'].get_param('web.base.url')\n        \n        self.assertEqual(self.ogone.environment, 'test', 'test without test environment')\n\n        \n        # Test: button direct rendering + shasign\n        \n\n        form_values = {\n            'PSPID': 'dummy',\n            'ORDERID': 'test_ref0',\n            'AMOUNT': '1',\n            'CURRENCY': 'EUR',\n            'LANGUAGE': 'en_US',\n            'CN': 'Norbert Buyer',\n            'EMAIL': 'norbert.buyer@example.com',\n            'OWNERZIP': '1000',\n            'OWNERADDRESS': 'Huge Street 2/543',\n            'OWNERCTY': 'Belgium',\n            'OWNERTOWN': 'Sin City',\n            'OWNERTELNO': '0032 12 34 56 78',\n            'SHASIGN': '815f67b8ff70d234ffcf437c13a9fa7f807044cc',\n            'ACCEPTURL': urls.url_join(base_url, OgoneController._accept_url),\n            'DECLINEURL': urls.url_join(base_url, OgoneController._decline_url),\n            'EXCEPTIONURL': urls.url_join(base_url, OgoneController._exception_url),\n            'CANCELURL': urls.url_join(base_url, OgoneController._cancel_url),\n        }\n\n        \n        res = self.ogone.render(\n            'test_ref0', 0.01, self.currency_euro.id,\n            partner_id=None,\n            partner_values=self.buyer_values)\n\n        \n        tree = objectify.fromstring(res)\n        self.assertEqual(tree.get('action'), 'https://secure.ogone.com/ncol/test/orderstandard.asp', 'ogone: wrong form POST url')\n        for form_input in tree.input:\n            if form_input.get('name') in ['submit']:\n                continue\n            self.assertEqual(\n                form_input.get('value'),\n                form_values[form_input.get('name')],\n                'ogone: wrong value for input %s: received %s instead of %s' % (form_input.get('name'), form_input.get('value'), form_values[form_input.get('name')])\n            )\n\n        \n        # Test2: button using tx + validation\n        \n\n        \n        tx = self.env['payment.transaction'].create({\n            'amount': 0.01,\n            'acquirer_id': self.ogone.id,\n            'currency_id': self.currency_euro.id,\n            'reference': 'test_ref0',\n            'partner_id': self.buyer_id})\n        \n        res = self.ogone.render(\n            'should_be_erased', 0.01, self.currency_euro,\n            tx_id=tx.id,\n            partner_id=None,\n            partner_values=self.buyer_values)\n\n        \n        tree = objectify.fromstring(res)\n        self.assertEqual(tree.get('action'), 'https://secure.ogone.com/ncol/test/orderstandard.asp', 'ogone: wrong form POST url')\n        for form_input in tree.input:\n            if form_input.get('name') in ['submit']:\n                continue\n            self.assertEqual(\n                form_input.get('value'),\n                form_values[form_input.get('name')],\n                'ogone: wrong value for form input %s: received %s instead of %s' % (form_input.get('name'), form_input.get('value'), form_values[form_input.get('name')])\n            )\n\n    @mute_logger('odoo.addons.payment_ogone.models.payment', 'ValidationError')\n    def test_20_ogone_form_management(self):\n        \n        self.assertEqual(self.ogone.environment, 'test', 'test without test environment')\n\n        \n        ogone_post_data = {\n            'orderID': u'test_ref_2',\n            'STATUS': u'9',\n            'CARDNO': u'XXXXXXXXXXXX0002',\n            'PAYID': u'25381582',\n            'CN': u'Norbert Buyer',\n            'NCERROR': u'0',\n            'TRXDATE': u'11/15/13',\n            'IP': u'85.201.233.72',\n            'BRAND': u'VISA',\n            'ACCEPTANCE': u'test123',\n            'currency': u'EUR',\n            'amount': u'1.95',\n            'SHASIGN': u'7B7B0ED9CBC4A85543A9073374589033A62A05A5',\n            'ED': u'0315',\n            'PM': u'CreditCard'\n        }\n\n        \n        with self.assertRaises(ValidationError):\n            self.env['payment.transaction'].form_feedback(ogone_post_data)\n\n        \n        tx = self.env['payment.transaction'].create({\n            'amount': 1.95,\n            'acquirer_id': self.ogone.id,\n            'currency_id': self.currency_euro.id,\n            'reference': 'test_ref_2',\n            'partner_name': 'Norbert Buyer',\n            'partner_country_id': self.country_france.id})\n        \n        tx.form_feedback(ogone_post_data)\n        \n        self.assertEqual(tx.state, 'done', 'ogone: validation did not put tx into done state')\n        self.assertEqual(tx.ogone_payid, ogone_post_data.get('PAYID'), 'ogone: validation did not update tx payid')\n\n        \n        tx.write({'state': 'draft', 'date_validate': False, 'ogone_payid': False})\n\n        \n        ogone_post_data['SHASIGN'] = 'a4c16bae286317b82edb49188d3399249a784691'\n        with self.assertRaises(ValidationError):\n            tx.form_feedback(ogone_post_data)\n\n        \n        ogone_post_data['STATUS'] = 2\n        ogone_post_data['SHASIGN'] = 'a4c16bae286317b82edb49188d3399249a784691'\n        tx.form_feedback(ogone_post_data)\n        \n        self.assertEqual(tx.state, 'error', 'ogone: erroneous validation did not put tx into error state')\n\n    def test_30_ogone_s2s(self):\n        test_ref = 'test_ref_%.15f' % time.time()\n        \n        self.assertEqual(self.ogone.environment, 'test', 'test without test environment')\n\n        \n        tx = self.env['payment.transaction'].create({\n            'amount': 0.01,\n            'acquirer_id': self.ogone.id,\n            'currency_id': self.currency_euro.id,\n            'reference': test_ref,\n            'partner_id': self.buyer_id,\n            'type': 'server2server',\n        })\n\n        \n        res = tx.ogone_s2s_create_alias({\n            'expiry_date_mm': '01',\n            'expiry_date_yy': '2015',\n            'holder_name': 'Norbert Poilu',\n            'number': '4000000000000002',\n            'brand': 'VISA'})\n\n        res = tx.ogone_s2s_execute({})\n", "comments": "      coding  utf 8        sure stupid thing                                                test  button direct rendering   shasign                                                render button    check form result                                                test2  button using tx   validation                                                create new draft tx    render button    check form result    sure stupid thing    typical data posted ogone client successfully paid    raise error unknown tx    create tx    validate    check state    reset tx    ogone post ok  try modify shasign    simulate error    check state    sure stupid thing    create new draft tx    create alias ", "content": "# -*- coding: utf-8 -*-\n\nfrom lxml import objectify\nimport time\n\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.addons.payment.tests.common import PaymentAcquirerCommon\nfrom odoo.addons.payment_ogone.controllers.main import OgoneController\nfrom werkzeug import urls\n\nfrom odoo.tools import mute_logger\n\n\nclass OgonePayment(PaymentAcquirerCommon):\n\n    def setUp(self):\n        super(OgonePayment, self).setUp()\n\n        self.ogone = self.env.ref('payment.payment_acquirer_ogone')\n\n    def test_10_ogone_form_render(self):\n        base_url = self.env['ir.config_parameter'].get_param('web.base.url')\n        # be sure not to do stupid thing\n        self.assertEqual(self.ogone.environment, 'test', 'test without test environment')\n\n        # ----------------------------------------\n        # Test: button direct rendering + shasign\n        # ----------------------------------------\n\n        form_values = {\n            'PSPID': 'dummy',\n            'ORDERID': 'test_ref0',\n            'AMOUNT': '1',\n            'CURRENCY': 'EUR',\n            'LANGUAGE': 'en_US',\n            'CN': 'Norbert Buyer',\n            'EMAIL': 'norbert.buyer@example.com',\n            'OWNERZIP': '1000',\n            'OWNERADDRESS': 'Huge Street 2/543',\n            'OWNERCTY': 'Belgium',\n            'OWNERTOWN': 'Sin City',\n            'OWNERTELNO': '0032 12 34 56 78',\n            'SHASIGN': '815f67b8ff70d234ffcf437c13a9fa7f807044cc',\n            'ACCEPTURL': urls.url_join(base_url, OgoneController._accept_url),\n            'DECLINEURL': urls.url_join(base_url, OgoneController._decline_url),\n            'EXCEPTIONURL': urls.url_join(base_url, OgoneController._exception_url),\n            'CANCELURL': urls.url_join(base_url, OgoneController._cancel_url),\n        }\n\n        # render the button\n        res = self.ogone.render(\n            'test_ref0', 0.01, self.currency_euro.id,\n            partner_id=None,\n            partner_values=self.buyer_values)\n\n        # check form result\n        tree = objectify.fromstring(res)\n        self.assertEqual(tree.get('action'), 'https://secure.ogone.com/ncol/test/orderstandard.asp', 'ogone: wrong form POST url')\n        for form_input in tree.input:\n            if form_input.get('name') in ['submit']:\n                continue\n            self.assertEqual(\n                form_input.get('value'),\n                form_values[form_input.get('name')],\n                'ogone: wrong value for input %s: received %s instead of %s' % (form_input.get('name'), form_input.get('value'), form_values[form_input.get('name')])\n            )\n\n        # ----------------------------------------\n        # Test2: button using tx + validation\n        # ----------------------------------------\n\n        # create a new draft tx\n        tx = self.env['payment.transaction'].create({\n            'amount': 0.01,\n            'acquirer_id': self.ogone.id,\n            'currency_id': self.currency_euro.id,\n            'reference': 'test_ref0',\n            'partner_id': self.buyer_id})\n        # render the button\n        res = self.ogone.render(\n            'should_be_erased', 0.01, self.currency_euro,\n            tx_id=tx.id,\n            partner_id=None,\n            partner_values=self.buyer_values)\n\n        # check form result\n        tree = objectify.fromstring(res)\n        self.assertEqual(tree.get('action'), 'https://secure.ogone.com/ncol/test/orderstandard.asp', 'ogone: wrong form POST url')\n        for form_input in tree.input:\n            if form_input.get('name') in ['submit']:\n                continue\n            self.assertEqual(\n                form_input.get('value'),\n                form_values[form_input.get('name')],\n                'ogone: wrong value for form input %s: received %s instead of %s' % (form_input.get('name'), form_input.get('value'), form_values[form_input.get('name')])\n            )\n\n    @mute_logger('odoo.addons.payment_ogone.models.payment', 'ValidationError')\n    def test_20_ogone_form_management(self):\n        # be sure not to do stupid thing\n        self.assertEqual(self.ogone.environment, 'test', 'test without test environment')\n\n        # typical data posted by ogone after client has successfully paid\n        ogone_post_data = {\n            'orderID': u'test_ref_2',\n            'STATUS': u'9',\n            'CARDNO': u'XXXXXXXXXXXX0002',\n            'PAYID': u'25381582',\n            'CN': u'Norbert Buyer',\n            'NCERROR': u'0',\n            'TRXDATE': u'11/15/13',\n            'IP': u'85.201.233.72',\n            'BRAND': u'VISA',\n            'ACCEPTANCE': u'test123',\n            'currency': u'EUR',\n            'amount': u'1.95',\n            'SHASIGN': u'7B7B0ED9CBC4A85543A9073374589033A62A05A5',\n            'ED': u'0315',\n            'PM': u'CreditCard'\n        }\n\n        # should raise error about unknown tx\n        with self.assertRaises(ValidationError):\n            self.env['payment.transaction'].form_feedback(ogone_post_data)\n\n        # create tx\n        tx = self.env['payment.transaction'].create({\n            'amount': 1.95,\n            'acquirer_id': self.ogone.id,\n            'currency_id': self.currency_euro.id,\n            'reference': 'test_ref_2',\n            'partner_name': 'Norbert Buyer',\n            'partner_country_id': self.country_france.id})\n        # validate it\n        tx.form_feedback(ogone_post_data)\n        # check state\n        self.assertEqual(tx.state, 'done', 'ogone: validation did not put tx into done state')\n        self.assertEqual(tx.ogone_payid, ogone_post_data.get('PAYID'), 'ogone: validation did not update tx payid')\n\n        # reset tx\n        tx.write({'state': 'draft', 'date_validate': False, 'ogone_payid': False})\n\n        # now ogone post is ok: try to modify the SHASIGN\n        ogone_post_data['SHASIGN'] = 'a4c16bae286317b82edb49188d3399249a784691'\n        with self.assertRaises(ValidationError):\n            tx.form_feedback(ogone_post_data)\n\n        # simulate an error\n        ogone_post_data['STATUS'] = 2\n        ogone_post_data['SHASIGN'] = 'a4c16bae286317b82edb49188d3399249a784691'\n        tx.form_feedback(ogone_post_data)\n        # check state\n        self.assertEqual(tx.state, 'error', 'ogone: erroneous validation did not put tx into error state')\n\n    def test_30_ogone_s2s(self):\n        test_ref = 'test_ref_%.15f' % time.time()\n        # be sure not to do stupid thing\n        self.assertEqual(self.ogone.environment, 'test', 'test without test environment')\n\n        # create a new draft tx\n        tx = self.env['payment.transaction'].create({\n            'amount': 0.01,\n            'acquirer_id': self.ogone.id,\n            'currency_id': self.currency_euro.id,\n            'reference': test_ref,\n            'partner_id': self.buyer_id,\n            'type': 'server2server',\n        })\n\n        # create an alias\n        res = tx.ogone_s2s_create_alias({\n            'expiry_date_mm': '01',\n            'expiry_date_yy': '2015',\n            'holder_name': 'Norbert Poilu',\n            'number': '4000000000000002',\n            'brand': 'VISA'})\n\n        res = tx.ogone_s2s_execute({})\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_ogone.py", "id": "f4ce737821b57184e3de498b6357b696", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/payment_ogone/tests/test_ogone.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}