{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo.tests import common\n\n\nclass CommonTest(common.SavepointCase):\n\n    @classmethod\n    def setUpClass(cls):\n        super(CommonTest, cls).setUpClass()\n\n        \n        user_type = cls.env.ref('account.data_account_type_payable')\n        cls.account_payable = cls.env['account.account'].create({\n            'code': 'X1111',\n            'name': 'HR Expense - Test Payable Account',\n            'user_type_id': user_type.id,\n            'reconcile': True\n        })\n\n        \n        user_type = cls.env.ref('account.data_account_type_expenses')\n        cls.account_expense = cls.env['account.account'].create({\n            'code': 'X2120',\n            'name': 'HR Expense - Test Purchase Account',\n            'user_type_id': user_type.id\n        })\n\n        \n        user_group_employee = cls.env.ref('base.group_user')\n        user_group_manager = cls.env.ref('hr_expense.group_hr_expense_manager')\n\n        \n        Users = cls.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True, 'mail_create_nolog': True})\n        cls.user_employee = Users.create({\n            'name': 'Johnny Employee',\n            'login': 'john',\n            'email': 'john@example.com',\n            'notification_type': 'email',\n            'groups_id': [(6, 0, [user_group_employee.id])],\n        })\n        cls.user_manager = Users.create({\n            'name': 'Robert Manager',\n            'login': 'rob',\n            'email': 'rob@example.com',\n            'notification_type': 'email',\n            'groups_id': [(6, 0, [user_group_manager.id])],\n        })\n        cls.employee = cls.env['hr.employee'].create({\n            'name': 'Johnny Employee',\n            'address_home_id': cls.user_employee.partner_id.id,\n            'address_id': cls.user_employee.partner_id.id,\n        })\n        cls.user_manager.partner_id.write({'property_account_payable_id': cls.account_payable.id})\n        cls.user_employee.partner_id.write({'property_account_payable_id': cls.account_payable.id})\n\n        \n        cls.product_ordered_cost = cls.env['product.product'].create({\n            'name': \"Ordered at cost\",\n            'standard_price': 8,\n            'list_price': 10,\n            'type': 'consu',\n            'invoice_policy': 'order',\n            'expense_policy': 'cost',\n            'default_code': 'CONSU-ORDERED1',\n            'service_type': 'manual',\n            'taxes_id': False,\n            'property_account_expense_id': cls.account_expense.id,\n        })\n\n        cls.product_deliver_cost = cls.env['product.product'].create({\n            'name': \"Delivered at cost\",\n            'standard_price': 8,\n            'list_price': 10,\n            'type': 'consu',\n            'invoice_policy': 'delivery',\n            'expense_policy': 'cost',\n            'default_code': 'CONSU-DELI1',\n            'service_type': 'manual',\n            'taxes_id': False,\n            'property_account_expense_id': cls.account_expense.id,\n        })\n\n        cls.product_order_sales_price = cls.env['product.product'].create({\n            'name': \"Ordered at sales price\",\n            'standard_price': 8,\n            'list_price': 10,\n            'type': 'consu',\n            'invoice_policy': 'order',\n            'expense_policy': 'sales_price',\n            'default_code': 'CONSU-ORDERED2',\n            'service_type': 'manual',\n            'taxes_id': False,\n            'property_account_expense_id': cls.account_expense.id,\n        })\n\n        cls.product_deliver_sales_price = cls.env['product.product'].create({\n            'name': \"Delivered at sales price\",\n            'standard_price': 8,\n            'list_price': 10,\n            'type': 'consu',\n            'invoice_policy': 'delivery',\n            'expense_policy': 'sales_price',\n            'default_code': 'CONSU-DELI2',\n            'service_type': 'manual',\n            'taxes_id': False,\n            'property_account_expense_id': cls.account_expense.id,\n        })\n\n        cls.product_no_expense = cls.env['product.product'].create({\n            'name': \"No expense\",\n            'standard_price': 8,\n            'list_price': 10,\n            'type': 'consu',\n            'invoice_policy': 'delivery',\n            'expense_policy': 'no',\n            'default_code': 'CONSU-NO',\n            'service_type': 'manual',\n            'taxes_id': False,\n            'property_account_expense_id': cls.account_expense.id,\n        })\n\n        \n        cls.journal = cls.env['account.journal'].create({\n            'name': 'Purchase Journal - Test',\n            'code': 'HRTPJ',\n            'type': 'purchase',\n            'company_id': cls.env.user.company_id.id,\n        })\n        cls.expense_sheet = cls.env['hr.expense.sheet'].create({\n            'name': 'Expense for Johnny Employee',\n            'employee_id': cls.employee.id,\n            'journal_id': cls.journal.id,\n        })\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     create payable account expense    create expenses account expense    user groups    user employee data    expense products    expense report ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.tests import common\n\n\nclass CommonTest(common.SavepointCase):\n\n    @classmethod\n    def setUpClass(cls):\n        super(CommonTest, cls).setUpClass()\n\n        # Create payable account for the expense\n        user_type = cls.env.ref('account.data_account_type_payable')\n        cls.account_payable = cls.env['account.account'].create({\n            'code': 'X1111',\n            'name': 'HR Expense - Test Payable Account',\n            'user_type_id': user_type.id,\n            'reconcile': True\n        })\n\n        # Create expenses account for the expense\n        user_type = cls.env.ref('account.data_account_type_expenses')\n        cls.account_expense = cls.env['account.account'].create({\n            'code': 'X2120',\n            'name': 'HR Expense - Test Purchase Account',\n            'user_type_id': user_type.id\n        })\n\n        # User groups\n        user_group_employee = cls.env.ref('base.group_user')\n        user_group_manager = cls.env.ref('hr_expense.group_hr_expense_manager')\n\n        # User and Employee Data\n        Users = cls.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True, 'mail_create_nolog': True})\n        cls.user_employee = Users.create({\n            'name': 'Johnny Employee',\n            'login': 'john',\n            'email': 'john@example.com',\n            'notification_type': 'email',\n            'groups_id': [(6, 0, [user_group_employee.id])],\n        })\n        cls.user_manager = Users.create({\n            'name': 'Robert Manager',\n            'login': 'rob',\n            'email': 'rob@example.com',\n            'notification_type': 'email',\n            'groups_id': [(6, 0, [user_group_manager.id])],\n        })\n        cls.employee = cls.env['hr.employee'].create({\n            'name': 'Johnny Employee',\n            'address_home_id': cls.user_employee.partner_id.id,\n            'address_id': cls.user_employee.partner_id.id,\n        })\n        cls.user_manager.partner_id.write({'property_account_payable_id': cls.account_payable.id})\n        cls.user_employee.partner_id.write({'property_account_payable_id': cls.account_payable.id})\n\n        # Expense Products\n        cls.product_ordered_cost = cls.env['product.product'].create({\n            'name': \"Ordered at cost\",\n            'standard_price': 8,\n            'list_price': 10,\n            'type': 'consu',\n            'invoice_policy': 'order',\n            'expense_policy': 'cost',\n            'default_code': 'CONSU-ORDERED1',\n            'service_type': 'manual',\n            'taxes_id': False,\n            'property_account_expense_id': cls.account_expense.id,\n        })\n\n        cls.product_deliver_cost = cls.env['product.product'].create({\n            'name': \"Delivered at cost\",\n            'standard_price': 8,\n            'list_price': 10,\n            'type': 'consu',\n            'invoice_policy': 'delivery',\n            'expense_policy': 'cost',\n            'default_code': 'CONSU-DELI1',\n            'service_type': 'manual',\n            'taxes_id': False,\n            'property_account_expense_id': cls.account_expense.id,\n        })\n\n        cls.product_order_sales_price = cls.env['product.product'].create({\n            'name': \"Ordered at sales price\",\n            'standard_price': 8,\n            'list_price': 10,\n            'type': 'consu',\n            'invoice_policy': 'order',\n            'expense_policy': 'sales_price',\n            'default_code': 'CONSU-ORDERED2',\n            'service_type': 'manual',\n            'taxes_id': False,\n            'property_account_expense_id': cls.account_expense.id,\n        })\n\n        cls.product_deliver_sales_price = cls.env['product.product'].create({\n            'name': \"Delivered at sales price\",\n            'standard_price': 8,\n            'list_price': 10,\n            'type': 'consu',\n            'invoice_policy': 'delivery',\n            'expense_policy': 'sales_price',\n            'default_code': 'CONSU-DELI2',\n            'service_type': 'manual',\n            'taxes_id': False,\n            'property_account_expense_id': cls.account_expense.id,\n        })\n\n        cls.product_no_expense = cls.env['product.product'].create({\n            'name': \"No expense\",\n            'standard_price': 8,\n            'list_price': 10,\n            'type': 'consu',\n            'invoice_policy': 'delivery',\n            'expense_policy': 'no',\n            'default_code': 'CONSU-NO',\n            'service_type': 'manual',\n            'taxes_id': False,\n            'property_account_expense_id': cls.account_expense.id,\n        })\n\n        # Expense report\n        cls.journal = cls.env['account.journal'].create({\n            'name': 'Purchase Journal - Test',\n            'code': 'HRTPJ',\n            'type': 'purchase',\n            'company_id': cls.env.user.company_id.id,\n        })\n        cls.expense_sheet = cls.env['hr.expense.sheet'].create({\n            'name': 'Expense for Johnny Employee',\n            'employee_id': cls.employee.id,\n            'journal_id': cls.journal.id,\n        })\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "common.py", "id": "2ee15c0be9e8e0c96430ac2ecfc2876b", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_expense/tests/common.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}