{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import parse_duration\n\n\nclass DiscoveryVRIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?discoveryvr\\.com/watch/(?P<id>[^/?\n    _TEST = {\n        'url': 'http://www.discoveryvr.com/watch/discovery-vr-an-introduction',\n        'md5': '32b1929798c464a54356378b7912eca4',\n        'info_dict': {\n            'id': 'discovery-vr-an-introduction',\n            'ext': 'mp4',\n            'title': 'Discovery VR - An Introduction',\n            'description': 'md5:80d418a10efb8899d9403e61d8790f06',\n        }\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n\n        bootstrap_data = self._search_regex(\n            r'root\\.DVR\\.bootstrapData\\s+=\\s+\"({.+?})\";',\n            webpage, 'bootstrap data')\n        bootstrap_data = self._parse_json(\n            bootstrap_data.encode('utf-8').decode('unicode_escape'),\n            display_id)\n        videos = self._parse_json(bootstrap_data['videos'], display_id)['allVideos']\n        video_data = next(video for video in videos if video.get('slug') == display_id)\n\n        series = video_data.get('showTitle')\n        title = episode = video_data.get('title') or series\n        if series and series != title:\n            title = '%s - %s' % (series, title)\n\n        formats = []\n        for f, format_id in (('cdnUriM3U8', 'mobi'), ('webVideoUrlSd', 'sd'), ('webVideoUrlHd', 'hd')):\n            f_url = video_data.get(f)\n            if not f_url:\n                continue\n            formats.append({\n                'format_id': format_id,\n                'url': f_url,\n            })\n\n        return {\n            'id': display_id,\n            'display_id': display_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'thumbnail': video_data.get('thumbnail'),\n            'duration': parse_duration(video_data.get('runTime')),\n            'formats': formats,\n            'episode': episode,\n            'series': series,\n        }\n", "comments": "# coding: utf-8\n#]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import parse_duration\n\n\nclass DiscoveryVRIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?discoveryvr\\.com/watch/(?P<id>[^/?#]+)'\n    _TEST = {\n        'url': 'http://www.discoveryvr.com/watch/discovery-vr-an-introduction',\n        'md5': '32b1929798c464a54356378b7912eca4',\n        'info_dict': {\n            'id': 'discovery-vr-an-introduction',\n            'ext': 'mp4',\n            'title': 'Discovery VR - An Introduction',\n            'description': 'md5:80d418a10efb8899d9403e61d8790f06',\n        }\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n\n        bootstrap_data = self._search_regex(\n            r'root\\.DVR\\.bootstrapData\\s+=\\s+\"({.+?})\";',\n            webpage, 'bootstrap data')\n        bootstrap_data = self._parse_json(\n            bootstrap_data.encode('utf-8').decode('unicode_escape'),\n            display_id)\n        videos = self._parse_json(bootstrap_data['videos'], display_id)['allVideos']\n        video_data = next(video for video in videos if video.get('slug') == display_id)\n\n        series = video_data.get('showTitle')\n        title = episode = video_data.get('title') or series\n        if series and series != title:\n            title = '%s - %s' % (series, title)\n\n        formats = []\n        for f, format_id in (('cdnUriM3U8', 'mobi'), ('webVideoUrlSd', 'sd'), ('webVideoUrlHd', 'hd')):\n            f_url = video_data.get(f)\n            if not f_url:\n                continue\n            formats.append({\n                'format_id': format_id,\n                'url': f_url,\n            })\n\n        return {\n            'id': display_id,\n            'display_id': display_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'thumbnail': video_data.get('thumbnail'),\n            'duration': parse_duration(video_data.get('runTime')),\n            'formats': formats,\n            'episode': episode,\n            'series': series,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "discoveryvr.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/discoveryvr.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}