{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2013, Johan Wiren <johan.wiren.se@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: gem\nshort_description: Manage Ruby gems\ndescription:\n  - Manage installation and uninstallation of Ruby gems.\nversion_added: \"1.1\"\noptions:\n  name:\n    description:\n      - The name of the gem to be managed.\n    required: true\n  state:\n    description:\n      - The desired state of the gem. C(latest) ensures that the latest version is installed.\n    required: false\n    choices: [present, absent, latest]\n    default: present\n  gem_source:\n    description:\n      - The path to a local gem used as installation source.\n    required: false\n  include_dependencies:\n    description:\n      - Whether to include dependencies or not.\n    required: false\n    choices: [ \"yes\", \"no\" ]\n    default: \"yes\"\n  repository:\n    description:\n      - The repository from which the gem will be installed\n    required: false\n    aliases: [source]\n  user_install:\n    description:\n      - Install gem in user's local gems cache or for all users\n    required: false\n    choices: [\"yes\", \"no\"]\n    default: \"yes\"\n    version_added: \"1.3\"\n  executable:\n    description:\n    - Override the path to the gem executable\n    required: false\n    version_added: \"1.4\"\n  env_shebang:\n    description:\n      - Rewrite the shebang line on installed scripts to use /usr/bin/env.\n    required: false\n    default: \"no\"\n    version_added: \"2.2\"\n  version:\n    description:\n      - Version of the gem to be installed/removed.\n    required: false\n  pre_release:\n    description:\n      - Allow installation of pre-release versions of the gem.\n    required: false\n    default: \"no\"\n    version_added: \"1.6\"\n  include_doc:\n    description:\n      - Install with or without docs.\n    required: false\n    default: \"no\"\n    version_added: \"2.0\"\n  build_flags:\n    description:\n      - Allow adding build flags for gem compilation\n    required: false\n    version_added: \"2.0\"\nauthor:\n    - \"Ansible Core Team\"\n    - \"Johan Wiren\"\n'''\n\nEXAMPLES = '''\n\n- gem:\n    name: vagrant\n    version: 1.0\n    state: present\n\n\n- gem:\n    name: rake\n    state: latest\n\n\n- gem:\n    name: rake\n    gem_source: /path/to/gems/rake-1.0.gem\n    state: present\n'''\n\nimport re\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef get_rubygems_path(module):\n    if module.params['executable']:\n        result = module.params['executable'].split(' ')\n    else:\n        result = [module.get_bin_path('gem', True)]\n    return result\n\n\ndef get_rubygems_version(module):\n    cmd = get_rubygems_path(module) + ['--version']\n    (rc, out, err) = module.run_command(cmd, check_rc=True)\n\n    match = re.match(r'^(\\d+)\\.(\\d+)\\.(\\d+)', out)\n    if not match:\n        return None\n\n    return tuple(int(x) for x in match.groups())\n\n\ndef get_installed_versions(module, remote=False):\n\n    cmd = get_rubygems_path(module)\n    cmd.append('query')\n    if remote:\n        cmd.append('--remote')\n        if module.params['repository']:\n            cmd.extend(['--source', module.params['repository']])\n    cmd.append('-n')\n    cmd.append('^%s$' % module.params['name'])\n    (rc, out, err) = module.run_command(cmd, check_rc=True)\n    installed_versions = []\n    for line in out.splitlines():\n        match = re.match(r\"\\S+\\s+\\((.+)\\)\", line)\n        if match:\n            versions = match.group(1)\n            for version in versions.split(', '):\n                installed_versions.append(version.split()[0])\n    return installed_versions\n\n\ndef exists(module):\n\n    if module.params['state'] == 'latest':\n        remoteversions = get_installed_versions(module, remote=True)\n        if remoteversions:\n            module.params['version'] = remoteversions[0]\n    installed_versions = get_installed_versions(module)\n    if module.params['version']:\n        if module.params['version'] in installed_versions:\n            return True\n    else:\n        if installed_versions:\n            return True\n    return False\n\n\ndef uninstall(module):\n\n    if module.check_mode:\n        return\n    cmd = get_rubygems_path(module)\n    cmd.append('uninstall')\n    if module.params['version']:\n        cmd.extend(['--version', module.params['version']])\n    else:\n        cmd.append('--all')\n        cmd.append('--executable')\n    cmd.append(module.params['name'])\n    module.run_command(cmd, check_rc=True)\n\n\ndef install(module):\n\n    if module.check_mode:\n        return\n\n    ver = get_rubygems_version(module)\n    if ver:\n        major = ver[0]\n    else:\n        major = None\n\n    cmd = get_rubygems_path(module)\n    cmd.append('install')\n    if module.params['version']:\n        cmd.extend(['--version', module.params['version']])\n    if module.params['repository']:\n        cmd.extend(['--source', module.params['repository']])\n    if not module.params['include_dependencies']:\n        cmd.append('--ignore-dependencies')\n    else:\n        if major and major < 2:\n            cmd.append('--include-dependencies')\n    if module.params['user_install']:\n        cmd.append('--user-install')\n    else:\n        cmd.append('--no-user-install')\n    if module.params['pre_release']:\n        cmd.append('--pre')\n    if not module.params['include_doc']:\n        if major and major < 2:\n            cmd.append('--no-rdoc')\n            cmd.append('--no-ri')\n        else:\n            cmd.append('--no-document')\n    if module.params['env_shebang']:\n        cmd.append('--env-shebang')\n    cmd.append(module.params['gem_source'])\n    if module.params['build_flags']:\n        cmd.extend(['--', module.params['build_flags']])\n    module.run_command(cmd, check_rc=True)\n\n\ndef main():\n\n    module = AnsibleModule(\n        argument_spec=dict(\n            executable=dict(required=False, type='path'),\n            gem_source=dict(required=False, type='path'),\n            include_dependencies=dict(required=False, default=True, type='bool'),\n            name=dict(required=True, type='str'),\n            repository=dict(required=False, aliases=['source'], type='str'),\n            state=dict(required=False, default='present', choices=['present', 'absent', 'latest'], type='str'),\n            user_install=dict(required=False, default=True, type='bool'),\n            pre_release=dict(required=False, default=False, type='bool'),\n            include_doc=dict(required=False, default=False, type='bool'),\n            env_shebang=dict(required=False, default=False, type='bool'),\n            version=dict(required=False, type='str'),\n            build_flags=dict(required=False, type='str'),\n        ),\n        supports_check_mode=True,\n        mutually_exclusive=[['gem_source', 'repository'], ['gem_source', 'version']],\n    )\n\n    if module.params['version'] and module.params['state'] == 'latest':\n        module.fail_json(msg=\"Cannot specify version when state=latest\")\n    if module.params['gem_source'] and module.params['state'] == 'latest':\n        module.fail_json(msg=\"Cannot maintain state=latest when installing from local source\")\n\n    if not module.params['gem_source']:\n        module.params['gem_source'] = module.params['name']\n\n    changed = False\n\n    if module.params['state'] in ['present', 'latest']:\n        if not exists(module):\n            install(module)\n            changed = True\n    elif module.params['state'] == 'absent':\n        if exists(module):\n            uninstall(module)\n            changed = True\n\n    result = {}\n    result['name'] = module.params['name']\n    result['state'] = module.params['state']\n    if module.params['version']:\n        result['version'] = module.params['version']\n    result['changed'] = changed\n\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  gem short description  manage ruby gems description      manage installation uninstallation ruby gems  version added   1 1  options    name      description          the name gem managed      required  true   state      description          the desired state gem  c(latest) ensures latest version installed      required  false     choices   present  absent  latest      default  present   gem source      description          the path local gem used installation source      required  false   include dependencies      description          whether include dependencies      required  false     choices     yes           default   yes    repository      description          the repository gem installed     required  false     aliases   source    user install      description          install gem user local gems cache users     required  false     choices    yes          default   yes      version added   1 3    executable      description        override path gem executable     required  false     version added   1 4    env shebang      description          rewrite shebang line installed scripts use  usr bin env      required  false     default        version added   2 2    version      description          version gem installed removed      required  false   pre release      description          allow installation pre release versions gem      required  false     default        version added   1 6    include doc      description          install without docs      required  false     default        version added   2 0    build flags      description          allow adding build flags gem compilation     required  false     version added   2 0  author         ansible core team         johan wiren       examples         installs version 1 0 vagrant    gem      name  vagrant     version  1 0     state  present    installs latest available version rake    gem      name  rake     state  latest    installs rake version 1 0 local gem disk    gem      name  rake     gem source   path gems rake 1 0 gem     state  present         usr bin python        coding  utf 8        (c) 2013  johan wiren  johan wiren se gmail com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    installs version 1 0 vagrant     installs latest available version rake     installs rake version 1 0 local gem disk  ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2013, Johan Wiren <johan.wiren.se@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: gem\nshort_description: Manage Ruby gems\ndescription:\n  - Manage installation and uninstallation of Ruby gems.\nversion_added: \"1.1\"\noptions:\n  name:\n    description:\n      - The name of the gem to be managed.\n    required: true\n  state:\n    description:\n      - The desired state of the gem. C(latest) ensures that the latest version is installed.\n    required: false\n    choices: [present, absent, latest]\n    default: present\n  gem_source:\n    description:\n      - The path to a local gem used as installation source.\n    required: false\n  include_dependencies:\n    description:\n      - Whether to include dependencies or not.\n    required: false\n    choices: [ \"yes\", \"no\" ]\n    default: \"yes\"\n  repository:\n    description:\n      - The repository from which the gem will be installed\n    required: false\n    aliases: [source]\n  user_install:\n    description:\n      - Install gem in user's local gems cache or for all users\n    required: false\n    choices: [\"yes\", \"no\"]\n    default: \"yes\"\n    version_added: \"1.3\"\n  executable:\n    description:\n    - Override the path to the gem executable\n    required: false\n    version_added: \"1.4\"\n  env_shebang:\n    description:\n      - Rewrite the shebang line on installed scripts to use /usr/bin/env.\n    required: false\n    default: \"no\"\n    version_added: \"2.2\"\n  version:\n    description:\n      - Version of the gem to be installed/removed.\n    required: false\n  pre_release:\n    description:\n      - Allow installation of pre-release versions of the gem.\n    required: false\n    default: \"no\"\n    version_added: \"1.6\"\n  include_doc:\n    description:\n      - Install with or without docs.\n    required: false\n    default: \"no\"\n    version_added: \"2.0\"\n  build_flags:\n    description:\n      - Allow adding build flags for gem compilation\n    required: false\n    version_added: \"2.0\"\nauthor:\n    - \"Ansible Core Team\"\n    - \"Johan Wiren\"\n'''\n\nEXAMPLES = '''\n# Installs version 1.0 of vagrant.\n- gem:\n    name: vagrant\n    version: 1.0\n    state: present\n\n# Installs latest available version of rake.\n- gem:\n    name: rake\n    state: latest\n\n# Installs rake version 1.0 from a local gem on disk.\n- gem:\n    name: rake\n    gem_source: /path/to/gems/rake-1.0.gem\n    state: present\n'''\n\nimport re\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef get_rubygems_path(module):\n    if module.params['executable']:\n        result = module.params['executable'].split(' ')\n    else:\n        result = [module.get_bin_path('gem', True)]\n    return result\n\n\ndef get_rubygems_version(module):\n    cmd = get_rubygems_path(module) + ['--version']\n    (rc, out, err) = module.run_command(cmd, check_rc=True)\n\n    match = re.match(r'^(\\d+)\\.(\\d+)\\.(\\d+)', out)\n    if not match:\n        return None\n\n    return tuple(int(x) for x in match.groups())\n\n\ndef get_installed_versions(module, remote=False):\n\n    cmd = get_rubygems_path(module)\n    cmd.append('query')\n    if remote:\n        cmd.append('--remote')\n        if module.params['repository']:\n            cmd.extend(['--source', module.params['repository']])\n    cmd.append('-n')\n    cmd.append('^%s$' % module.params['name'])\n    (rc, out, err) = module.run_command(cmd, check_rc=True)\n    installed_versions = []\n    for line in out.splitlines():\n        match = re.match(r\"\\S+\\s+\\((.+)\\)\", line)\n        if match:\n            versions = match.group(1)\n            for version in versions.split(', '):\n                installed_versions.append(version.split()[0])\n    return installed_versions\n\n\ndef exists(module):\n\n    if module.params['state'] == 'latest':\n        remoteversions = get_installed_versions(module, remote=True)\n        if remoteversions:\n            module.params['version'] = remoteversions[0]\n    installed_versions = get_installed_versions(module)\n    if module.params['version']:\n        if module.params['version'] in installed_versions:\n            return True\n    else:\n        if installed_versions:\n            return True\n    return False\n\n\ndef uninstall(module):\n\n    if module.check_mode:\n        return\n    cmd = get_rubygems_path(module)\n    cmd.append('uninstall')\n    if module.params['version']:\n        cmd.extend(['--version', module.params['version']])\n    else:\n        cmd.append('--all')\n        cmd.append('--executable')\n    cmd.append(module.params['name'])\n    module.run_command(cmd, check_rc=True)\n\n\ndef install(module):\n\n    if module.check_mode:\n        return\n\n    ver = get_rubygems_version(module)\n    if ver:\n        major = ver[0]\n    else:\n        major = None\n\n    cmd = get_rubygems_path(module)\n    cmd.append('install')\n    if module.params['version']:\n        cmd.extend(['--version', module.params['version']])\n    if module.params['repository']:\n        cmd.extend(['--source', module.params['repository']])\n    if not module.params['include_dependencies']:\n        cmd.append('--ignore-dependencies')\n    else:\n        if major and major < 2:\n            cmd.append('--include-dependencies')\n    if module.params['user_install']:\n        cmd.append('--user-install')\n    else:\n        cmd.append('--no-user-install')\n    if module.params['pre_release']:\n        cmd.append('--pre')\n    if not module.params['include_doc']:\n        if major and major < 2:\n            cmd.append('--no-rdoc')\n            cmd.append('--no-ri')\n        else:\n            cmd.append('--no-document')\n    if module.params['env_shebang']:\n        cmd.append('--env-shebang')\n    cmd.append(module.params['gem_source'])\n    if module.params['build_flags']:\n        cmd.extend(['--', module.params['build_flags']])\n    module.run_command(cmd, check_rc=True)\n\n\ndef main():\n\n    module = AnsibleModule(\n        argument_spec=dict(\n            executable=dict(required=False, type='path'),\n            gem_source=dict(required=False, type='path'),\n            include_dependencies=dict(required=False, default=True, type='bool'),\n            name=dict(required=True, type='str'),\n            repository=dict(required=False, aliases=['source'], type='str'),\n            state=dict(required=False, default='present', choices=['present', 'absent', 'latest'], type='str'),\n            user_install=dict(required=False, default=True, type='bool'),\n            pre_release=dict(required=False, default=False, type='bool'),\n            include_doc=dict(required=False, default=False, type='bool'),\n            env_shebang=dict(required=False, default=False, type='bool'),\n            version=dict(required=False, type='str'),\n            build_flags=dict(required=False, type='str'),\n        ),\n        supports_check_mode=True,\n        mutually_exclusive=[['gem_source', 'repository'], ['gem_source', 'version']],\n    )\n\n    if module.params['version'] and module.params['state'] == 'latest':\n        module.fail_json(msg=\"Cannot specify version when state=latest\")\n    if module.params['gem_source'] and module.params['state'] == 'latest':\n        module.fail_json(msg=\"Cannot maintain state=latest when installing from local source\")\n\n    if not module.params['gem_source']:\n        module.params['gem_source'] = module.params['name']\n\n    changed = False\n\n    if module.params['state'] in ['present', 'latest']:\n        if not exists(module):\n            install(module)\n            changed = True\n    elif module.params['state'] == 'absent':\n        if exists(module):\n            uninstall(module)\n            changed = True\n\n    result = {}\n    result['name'] = module.params['name']\n    result['state'] = module.params['state']\n    if module.params['version']:\n        result['version'] = module.params['version']\n    result['changed'] = changed\n\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "gem.py", "id": "e35c0b7ca98e92cc64e839a57ac59a82", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/packaging/language/gem.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}