{"author": "donnemartin", "code": "# -*- coding: utf-8 -*-\n\nfrom mrjob.job import MRJob\n\n\nclass HitCounts(MRJob):\n\n    def extract_url(self, line):\n        \"\"\"Extract the generated url from the log line.\"\"\"\n        pass\n\n    def extract_year_month(self, line):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        pass\n\n    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, url0), 1\n        (2016-01, url0), 1\n        (2016-01, url1), 1\n        \"\"\"\n        url = self.extract_url(line)\n        period = self.extract_year_month(line)\n        yield (period, url), 1\n\n    def reducer(self, key, value):\n        \"\"\"Sum values for each key.\n\n        (2016-01, url0), 2\n        (2016-01, url1), 1\n        \"\"\"\n        yield key, sum(values)\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]\n\n\nif __name__ == '__main__':\n    HitCounts.run()\n", "comments": "   extract generated url log line             pass      def extract year month(self  line)             return year month portions timestamp             pass      def mapper(self     line)             parse log line  extract transform relevant lines           emit key value pairs form           (2016 01  url0)  1         (2016 01  url0)  1         (2016 01  url1)  1                     url   self extract url(line)         period   self extract year month(line)         yield (period  url)  1      def reducer(self  key  value)             sum values key           (2016 01  url0)  2         (2016 01  url1)  1                     yield key  sum(values)      def steps(self)             run map reduce steps            coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nfrom mrjob.job import MRJob\n\n\nclass HitCounts(MRJob):\n\n    def extract_url(self, line):\n        \"\"\"Extract the generated url from the log line.\"\"\"\n        pass\n\n    def extract_year_month(self, line):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        pass\n\n    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, url0), 1\n        (2016-01, url0), 1\n        (2016-01, url1), 1\n        \"\"\"\n        url = self.extract_url(line)\n        period = self.extract_year_month(line)\n        yield (period, url), 1\n\n    def reducer(self, key, value):\n        \"\"\"Sum values for each key.\n\n        (2016-01, url0), 2\n        (2016-01, url1), 1\n        \"\"\"\n        yield key, sum(values)\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]\n\n\nif __name__ == '__main__':\n    HitCounts.run()\n", "description": "Learn how to design large-scale systems. Prep for the system design interview.  Includes Anki flashcards.", "file_name": "pastebin.py", "id": "68da9eb94a1c4438455db69596dac7b9", "language": "Python", "project_name": "system-design-primer", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-system-design-primer/donnemartin-system-design-primer-b156e48/solutions/system_design/pastebin/pastebin.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:52:18Z", "url": "https://github.com/donnemartin/system-design-primer", "wiki": true}