{"author": "tensorflow", "code": "\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom absl.testing import absltest\nimport numpy as np\n\nfrom third_party.kepler_spline import kepler_spline\n\n\nclass KeplerSplineTest(absltest.TestCase):\n\n  def testKeplerSplineSine(self):\n    \n    time = np.arange(0, 10, 0.1)\n    flux = np.sin(time)\n\n    \n    spline, mask = kepler_spline.kepler_spline(time, flux, bkspace=0.5)\n    rmse = np.sqrt(np.mean((flux[mask] - spline[mask])**2))\n    self.assertLess(rmse, 1e-4)\n    self.assertTrue(np.all(mask))\n\n    \n    flux[35] = 10\n    flux[77] = -3\n    flux[95] = 2.9\n\n    \n    spline, mask = kepler_spline.kepler_spline(time, flux, bkspace=0.5)\n    rmse = np.sqrt(np.mean((flux[mask] - spline[mask])**2))\n    self.assertLess(rmse, 1e-4)\n    self.assertEqual(np.sum(mask), 97)\n    self.assertFalse(mask[35])\n    self.assertFalse(mask[77])\n    self.assertFalse(mask[95])\n\n    \n    spline, mask = kepler_spline.kepler_spline(time, flux, bkspace=1)\n    rmse = np.sqrt(np.mean((flux[mask] - spline[mask])**2))\n    self.assertLess(rmse, 2e-3)\n    self.assertEqual(np.sum(mask), 97)\n    self.assertFalse(mask[35])\n    self.assertFalse(mask[77])\n    self.assertFalse(mask[95])\n\n  def testKeplerSplineCubic(self):\n    \n    time = np.arange(0, 10, 0.1)\n    flux = (time - 5)**3 + 2 * (time - 5)**2 + 10\n\n     We choose maxiter=1,\n    \n    \n    \n    spline, mask = kepler_spline.kepler_spline(\n        time, flux, bkspace=0.5, maxiter=1)\n    rmse = np.sqrt(np.mean((flux[mask] - spline[mask])**2))\n    self.assertLess(rmse, 1e-12)\n    self.assertTrue(np.all(mask))\n\n  def testKeplerSplineError(self):\n    \n    time = np.concatenate([np.arange(0, 1, 0.1), [2]])\n    flux = np.sin(time)\n\n    with self.assertRaises(kepler_spline.SplineError):\n      kepler_spline.kepler_spline(time, flux, bkspace=0.5)\n\n  def testChooseKeplerSpline(self):\n    \n    time = [np.arange(0, 100, 0.1), np.arange(100, 200, 0.1)]\n    flux = [np.sin(t) for t in time]\n\n    \n    bkspaces = np.logspace(np.log10(0.5), np.log10(5), num=20)\n\n    def _rmse(all_flux, all_spline):\n      f = np.concatenate(all_flux)\n      s = np.concatenate(all_spline)\n      return np.sqrt(np.mean((f - s)**2))\n\n    \n    spline, mask, bkspace, bad_bkspaces = kepler_spline.choose_kepler_spline(\n        time, flux, bkspaces, penalty_coeff=1.0)\n    self.assertAlmostEqual(_rmse(flux, spline), 0.013013)\n    self.assertTrue(np.all(mask))\n    self.assertAlmostEqual(bkspace, 1.67990914314)\n    self.assertEmpty(bad_bkspaces)\n\n    \n    spline, mask, bkspace, bad_bkspaces = kepler_spline.choose_kepler_spline(\n        time, flux, bkspaces, penalty_coeff=0.1)\n    self.assertAlmostEqual(_rmse(flux, spline), 0.0066376)\n    self.assertTrue(np.all(mask))\n    self.assertAlmostEqual(bkspace, 1.48817572082)\n    self.assertEmpty(bad_bkspaces)\n\n    \n    \n    spline, mask, bkspace, bad_bkspaces = kepler_spline.choose_kepler_spline(\n        time, flux, bkspaces, penalty_coeff=2)\n    self.assertAlmostEqual(_rmse(flux, spline), 0.026215449)\n    self.assertTrue(np.all(mask))\n    self.assertAlmostEqual(bkspace, 1.89634509537)\n    self.assertEmpty(bad_bkspaces)\n\n\nif __name__ == \"__main__\":\n  absltest.main()\n", "comments": "   tests kepler spline py        fit sine wave     expect close fit outliers removed     add outliers     expect close fit outliers removed     increase breakpoint spacing  fit quite close     fit cubic polynomial     expect close fit outliers removed  we choose maxiter 1     cubic spline fit cubic polynomial  exactly     standard deviation residuals  0  cause closely    fit points rejected     big gap     high frequency sine wave     logarithmically sample candidate break point spacings     penalty coefficient 1 0     decrease penalty coefficient  allow smaller spacing closer fit     increase penalty coefficient  require larger spacing cost worse    fit  ", "content": "\"\"\"Tests for kepler_spline.py.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom absl.testing import absltest\nimport numpy as np\n\nfrom third_party.kepler_spline import kepler_spline\n\n\nclass KeplerSplineTest(absltest.TestCase):\n\n  def testKeplerSplineSine(self):\n    # Fit a sine wave.\n    time = np.arange(0, 10, 0.1)\n    flux = np.sin(time)\n\n    # Expect very close fit with no outliers removed.\n    spline, mask = kepler_spline.kepler_spline(time, flux, bkspace=0.5)\n    rmse = np.sqrt(np.mean((flux[mask] - spline[mask])**2))\n    self.assertLess(rmse, 1e-4)\n    self.assertTrue(np.all(mask))\n\n    # Add some outliers.\n    flux[35] = 10\n    flux[77] = -3\n    flux[95] = 2.9\n\n    # Expect a close fit with outliers removed.\n    spline, mask = kepler_spline.kepler_spline(time, flux, bkspace=0.5)\n    rmse = np.sqrt(np.mean((flux[mask] - spline[mask])**2))\n    self.assertLess(rmse, 1e-4)\n    self.assertEqual(np.sum(mask), 97)\n    self.assertFalse(mask[35])\n    self.assertFalse(mask[77])\n    self.assertFalse(mask[95])\n\n    # Increase breakpoint spacing. Fit is not quite as close.\n    spline, mask = kepler_spline.kepler_spline(time, flux, bkspace=1)\n    rmse = np.sqrt(np.mean((flux[mask] - spline[mask])**2))\n    self.assertLess(rmse, 2e-3)\n    self.assertEqual(np.sum(mask), 97)\n    self.assertFalse(mask[35])\n    self.assertFalse(mask[77])\n    self.assertFalse(mask[95])\n\n  def testKeplerSplineCubic(self):\n    # Fit a cubic polynomial.\n    time = np.arange(0, 10, 0.1)\n    flux = (time - 5)**3 + 2 * (time - 5)**2 + 10\n\n    # Expect very close fit with no outliers removed. We choose maxiter=1,\n    # because a cubic spline will fit a cubic polynomial ~exactly, so the\n    # standard deviation of residuals will be ~0, which will cause some closely\n    # fit points to be rejected.\n    spline, mask = kepler_spline.kepler_spline(\n        time, flux, bkspace=0.5, maxiter=1)\n    rmse = np.sqrt(np.mean((flux[mask] - spline[mask])**2))\n    self.assertLess(rmse, 1e-12)\n    self.assertTrue(np.all(mask))\n\n  def testKeplerSplineError(self):\n    # Big gap.\n    time = np.concatenate([np.arange(0, 1, 0.1), [2]])\n    flux = np.sin(time)\n\n    with self.assertRaises(kepler_spline.SplineError):\n      kepler_spline.kepler_spline(time, flux, bkspace=0.5)\n\n  def testChooseKeplerSpline(self):\n    # High frequency sine wave.\n    time = [np.arange(0, 100, 0.1), np.arange(100, 200, 0.1)]\n    flux = [np.sin(t) for t in time]\n\n    # Logarithmically sample candidate break point spacings.\n    bkspaces = np.logspace(np.log10(0.5), np.log10(5), num=20)\n\n    def _rmse(all_flux, all_spline):\n      f = np.concatenate(all_flux)\n      s = np.concatenate(all_spline)\n      return np.sqrt(np.mean((f - s)**2))\n\n    # Penalty coefficient 1.0.\n    spline, mask, bkspace, bad_bkspaces = kepler_spline.choose_kepler_spline(\n        time, flux, bkspaces, penalty_coeff=1.0)\n    self.assertAlmostEqual(_rmse(flux, spline), 0.013013)\n    self.assertTrue(np.all(mask))\n    self.assertAlmostEqual(bkspace, 1.67990914314)\n    self.assertEmpty(bad_bkspaces)\n\n    # Decrease penalty coefficient; allow smaller spacing for closer fit.\n    spline, mask, bkspace, bad_bkspaces = kepler_spline.choose_kepler_spline(\n        time, flux, bkspaces, penalty_coeff=0.1)\n    self.assertAlmostEqual(_rmse(flux, spline), 0.0066376)\n    self.assertTrue(np.all(mask))\n    self.assertAlmostEqual(bkspace, 1.48817572082)\n    self.assertEmpty(bad_bkspaces)\n\n    # Increase penalty coefficient; require larger spacing at the cost of worse\n    # fit.\n    spline, mask, bkspace, bad_bkspaces = kepler_spline.choose_kepler_spline(\n        time, flux, bkspaces, penalty_coeff=2)\n    self.assertAlmostEqual(_rmse(flux, spline), 0.026215449)\n    self.assertTrue(np.all(mask))\n    self.assertAlmostEqual(bkspace, 1.89634509537)\n    self.assertEmpty(bad_bkspaces)\n\n\nif __name__ == \"__main__\":\n  absltest.main()\n", "description": "Models and examples built with TensorFlow", "file_name": "kepler_spline_test.py", "id": "27173b2d29d9e4316ce6bc5ad51d8bf4", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/astronet/third_party/kepler_spline/kepler_spline_test.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}