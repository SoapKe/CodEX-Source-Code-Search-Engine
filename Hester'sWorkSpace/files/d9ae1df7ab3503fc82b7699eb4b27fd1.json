{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    js_to_json,\n    get_element_by_class,\n    unified_strdate,\n)\n\n\nclass RudoIE(InfoExtractor):\n    _VALID_URL = r'https?://rudo\\.video/vod/(?P<id>[0-9a-zA-Z]+)'\n\n    _TEST = {\n        'url': 'http://rudo.video/vod/oTzw0MGnyG',\n        'md5': '2a03a5b32dd90a04c83b6d391cf7b415',\n        'info_dict': {\n            'id': 'oTzw0MGnyG',\n            'ext': 'mp4',\n            'title': 'Comentario Tom\u00e1s Mosciatti',\n            'upload_date': '20160617',\n        },\n    }\n\n    @classmethod\n    def _extract_url(cls, webpage):\n        mobj = re.search(\n            r'<iframe[^>]+src=(?P<q1>[\\'\"])(?P<url>(?:https?:)?//rudo\\.video/vod/[0-9a-zA-Z]+)(?P=q1)',\n            webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id, encoding='iso-8859-1')\n\n        jwplayer_data = self._parse_json(self._search_regex(\n            r'(?s)playerInstance\\.setup\\(({.+?})\\)', webpage, 'jwplayer data'), video_id,\n            transform_source=lambda s: js_to_json(re.sub(r'encodeURI\\([^)]+\\)', '\"\"', s)))\n\n        info_dict = self._parse_jwplayer_data(\n            jwplayer_data, video_id, require_title=False, m3u8_id='hls', mpd_id='dash')\n\n        info_dict.update({\n            'title': self._og_search_title(webpage),\n            'upload_date': unified_strdate(get_element_by_class('date', webpage)),\n        })\n\n        return info_dict\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    js_to_json,\n    get_element_by_class,\n    unified_strdate,\n)\n\n\nclass RudoIE(InfoExtractor):\n    _VALID_URL = r'https?://rudo\\.video/vod/(?P<id>[0-9a-zA-Z]+)'\n\n    _TEST = {\n        'url': 'http://rudo.video/vod/oTzw0MGnyG',\n        'md5': '2a03a5b32dd90a04c83b6d391cf7b415',\n        'info_dict': {\n            'id': 'oTzw0MGnyG',\n            'ext': 'mp4',\n            'title': 'Comentario Tom\u00e1s Mosciatti',\n            'upload_date': '20160617',\n        },\n    }\n\n    @classmethod\n    def _extract_url(cls, webpage):\n        mobj = re.search(\n            r'<iframe[^>]+src=(?P<q1>[\\'\"])(?P<url>(?:https?:)?//rudo\\.video/vod/[0-9a-zA-Z]+)(?P=q1)',\n            webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id, encoding='iso-8859-1')\n\n        jwplayer_data = self._parse_json(self._search_regex(\n            r'(?s)playerInstance\\.setup\\(({.+?})\\)', webpage, 'jwplayer data'), video_id,\n            transform_source=lambda s: js_to_json(re.sub(r'encodeURI\\([^)]+\\)', '\"\"', s)))\n\n        info_dict = self._parse_jwplayer_data(\n            jwplayer_data, video_id, require_title=False, m3u8_id='hls', mpd_id='dash')\n\n        info_dict.update({\n            'title': self._og_search_title(webpage),\n            'upload_date': unified_strdate(get_element_by_class('date', webpage)),\n        })\n\n        return info_dict\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "rudo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/rudo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}