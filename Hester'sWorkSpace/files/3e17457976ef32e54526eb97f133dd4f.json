{"author": "getsentry", "code": "from __future__ import absolute_import, print_function\n\nfrom mock import Mock, patch\nfrom raven.contrib.django.models import client\nfrom raven.base import Client\n\nfrom sentry.models import Event\nfrom sentry.testutils import TestCase\nfrom sentry.utils.raven import SentryInternalClient\n\n\nclass SentryInternalClientTest(TestCase):\n    @patch.object(SentryInternalClient, 'is_enabled', Mock(return_value=True))\n    @patch.object(Client, 'send')\n    def test_simple(self, send):\n        assert client.__class__ is SentryInternalClient\n\n        with self.tasks():\n            client.captureMessage('internal client test')\n\n        event = Event.objects.get()\n        assert event.data['sentry.interfaces.Message']['message'] == \\\n            'internal client test'\n        assert send.call_count == 0\n\n    @patch.object(SentryInternalClient, 'is_enabled', Mock(return_value=True))\n    @patch.object(Client, 'send')\n    def test_upstream(self, send):\n        with self.dsn('http://foo:bar@example.com/1'):\n            with self.options({'sentry:install-id': 'abc123'}):\n                with self.tasks():\n                    client.captureMessage('internal client test')\n\n                event = Event.objects.get()\n                assert event.data['sentry.interfaces.Message']['message'] == \\\n                    'internal client test'\n\n                \n                assert send.call_count == 1\n                _, kwargs = send.call_args\n                \n                assert kwargs['tags']['install-id'] == 'abc123'\n\n    @patch.object(SentryInternalClient, 'is_enabled', Mock(return_value=True))\n    def test_encoding(self):\n\n        class NotJSONSerializable():\n            pass\n\n        sic = SentryInternalClient()\n        with self.tasks():\n            sic.send(**{\n                'sentry.interfaces.Message': {\n                    'message': 'check the req',\n                },\n                'extra': {\n                    'request': NotJSONSerializable()\n                },\n            })\n\n        event = Event.objects.get()\n        assert event.data['sentry.interfaces.Message']['message'] == 'check the req'\n        assert 'NotJSONSerializable' in event.data['extra']['request']\n", "comments": "  make sure event also got sent upstream    got tagged properly ", "content": "from __future__ import absolute_import, print_function\n\nfrom mock import Mock, patch\nfrom raven.contrib.django.models import client\nfrom raven.base import Client\n\nfrom sentry.models import Event\nfrom sentry.testutils import TestCase\nfrom sentry.utils.raven import SentryInternalClient\n\n\nclass SentryInternalClientTest(TestCase):\n    @patch.object(SentryInternalClient, 'is_enabled', Mock(return_value=True))\n    @patch.object(Client, 'send')\n    def test_simple(self, send):\n        assert client.__class__ is SentryInternalClient\n\n        with self.tasks():\n            client.captureMessage('internal client test')\n\n        event = Event.objects.get()\n        assert event.data['sentry.interfaces.Message']['message'] == \\\n            'internal client test'\n        assert send.call_count == 0\n\n    @patch.object(SentryInternalClient, 'is_enabled', Mock(return_value=True))\n    @patch.object(Client, 'send')\n    def test_upstream(self, send):\n        with self.dsn('http://foo:bar@example.com/1'):\n            with self.options({'sentry:install-id': 'abc123'}):\n                with self.tasks():\n                    client.captureMessage('internal client test')\n\n                event = Event.objects.get()\n                assert event.data['sentry.interfaces.Message']['message'] == \\\n                    'internal client test'\n\n                # Make sure that the event also got sent upstream\n                assert send.call_count == 1\n                _, kwargs = send.call_args\n                # and got tagged properly\n                assert kwargs['tags']['install-id'] == 'abc123'\n\n    @patch.object(SentryInternalClient, 'is_enabled', Mock(return_value=True))\n    def test_encoding(self):\n\n        class NotJSONSerializable():\n            pass\n\n        sic = SentryInternalClient()\n        with self.tasks():\n            sic.send(**{\n                'sentry.interfaces.Message': {\n                    'message': 'check the req',\n                },\n                'extra': {\n                    'request': NotJSONSerializable()\n                },\n            })\n\n        event = Event.objects.get()\n        assert event.data['sentry.interfaces.Message']['message'] == 'check the req'\n        assert 'NotJSONSerializable' in event.data['extra']['request']\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_raven.py", "id": "3e17457976ef32e54526eb97f133dd4f", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/test_raven.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}