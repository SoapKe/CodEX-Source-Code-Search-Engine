{"author": "yandex", "code": "import os\nimport sys\nimport logging\nimport copy\n\nimport gixy\nfrom gixy.core.manager import Manager as Gixy\nfrom gixy.formatters import get_all as formatters\nfrom gixy.core.plugins_manager import PluginsManager\nfrom gixy.core.config import Config\nfrom gixy.cli.argparser import create_parser\nfrom gixy.core.exceptions import InvalidConfiguration\n\n\nLOG = logging.getLogger()\n\n\ndef _init_logger(debug=False):\n    LOG.handlers = []\n    log_level = logging.DEBUG if debug else logging.INFO\n\n    LOG.setLevel(log_level)\n    handler = logging.StreamHandler(sys.stderr)\n    handler.setFormatter(logging.Formatter('[%(module)s]\\t%(levelname)s\\t%(message)s'))\n    LOG.addHandler(handler)\n    LOG.debug(\"logging initialized\")\n\n\ndef _create_plugin_help(option):\n    if isinstance(option, (tuple, list, set)):\n        default = ','.join(list(option))\n    else:\n        default = str(option)\n\n    return 'Default: {0}'.format(default)\n\n\ndef _get_cli_parser():\n    parser = create_parser()\n    parser.add_argument('nginx_files', nargs='*', type=str, default=['/etc/nginx/nginx.conf'], metavar='nginx.conf',\n                        help='Path to nginx.conf, e.g. /etc/nginx/nginx.conf')\n\n    parser.add_argument(\n        '-v', '--version', action='version',\n        version='Gixy v{0}'.format(gixy.version))\n\n    parser.add_argument(\n        '-l', '--level', dest='level', action='count', default=0,\n        help='Report issues of a given severity level or higher (-l for LOW, -ll for MEDIUM, -lll for HIGH)')\n\n    default_formatter = 'console' if sys.stdout.isatty() else 'text'\n    available_formatters = formatters().keys()\n    parser.add_argument(\n        '-f', '--format', dest='output_format', choices=available_formatters, default=default_formatter,\n        type=str, help='Specify output format')\n\n    parser.add_argument(\n        '-o', '--output', dest='output_file', type=str,\n        help='Write report to file')\n\n    parser.add_argument(\n        '-d', '--debug', dest='debug', action='store_true', default=False,\n        help='Turn on debug mode')\n\n    parser.add_argument(\n        '--tests', dest='tests', type=str,\n        help='Comma-separated list of tests to run')\n\n    parser.add_argument(\n        '--skips', dest='skips', type=str,\n        help='Comma-separated list of tests to skip')\n\n    parser.add_argument(\n        '--disable-includes', dest='disable_includes', action='store_true', default=False,\n        help='Disable \"include\" directive processing')\n\n    group = parser.add_argument_group('plugins options')\n    for plugin_cls in PluginsManager().plugins_classes:\n        name = plugin_cls.__name__\n        if not plugin_cls.options:\n            continue\n\n        options = copy.deepcopy(plugin_cls.options)\n        for opt_key, opt_val in options.items():\n            option_name = '--{plugin}-{key}'.format(plugin=name, key=opt_key).replace('_', '-')\n            dst_name = '{plugin}:{key}'.format(plugin=name, key=opt_key)\n            opt_type = str if isinstance(opt_val, (tuple, list, set)) else type(opt_val)\n            group.add_argument(\n                option_name, metavar=opt_key, dest=dst_name, type=opt_type,\n                help=_create_plugin_help(opt_val)\n            )\n\n    return parser\n\n\ndef main():\n    parser = _get_cli_parser()\n    args = parser.parse_args()\n    _init_logger(args.debug)\n\n    if len(args.nginx_files) == 1 and args.nginx_files[0] != '-':\n        path = os.path.expanduser(args.nginx_files[0])\n        if not os.path.exists(path):\n            sys.stderr.write('File {path!r} was not found.\\nPlease specify correct path to configuration.\\n'.format(\n                path=path))\n            sys.exit(1)\n\n    try:\n        severity = gixy.severity.ALL[args.level]\n    except IndexError:\n        sys.stderr.write('Too high level filtering. Maximum level: -{0}\\n'.format('l' * (len(gixy.severity.ALL) - 1)))\n        sys.exit(1)\n\n    if args.tests:\n        tests = [x.strip() for x in args.tests.split(',')]\n    else:\n        tests = None\n\n    if args.skips:\n        skips = [x.strip() for x in args.skips.split(',')]\n    else:\n        skips = None\n\n    config = Config(\n        severity=severity,\n        output_format=args.output_format,\n        output_file=args.output_file,\n        plugins=tests,\n        skips=skips,\n        allow_includes=not args.disable_includes\n    )\n\n    for plugin_cls in PluginsManager().plugins_classes:\n        name = plugin_cls.__name__\n        options = copy.deepcopy(plugin_cls.options)\n        for opt_key, opt_val in options.items():\n            option_name = '{name}:{key}'.format(name=name, key=opt_key)\n            if option_name not in args:\n                continue\n\n            val = getattr(args, option_name)\n            if val is None:\n                continue\n\n            if isinstance(opt_val, tuple):\n                val = tuple([x.strip() for x in val.split(',')])\n            elif isinstance(opt_val, set):\n                val = set([x.strip() for x in val.split(',')])\n            elif isinstance(opt_val, list):\n                val = [x.strip() for x in val.split(',')]\n            options[opt_key] = val\n        config.set_for(name, options)\n\n    formatter = formatters()[config.output_format]()\n    failed = False\n    for input_path in args.nginx_files:\n        path = os.path.abspath(os.path.expanduser(input_path))\n        if not os.path.exists(path):\n            LOG.error('File %s was not found', path)\n            continue\n\n        with Gixy(config=config) as yoda:\n            try:\n                if path == '-':\n                    with os.fdopen(sys.stdin.fileno(), 'rb') as fdata:\n                        yoda.audit('<stdin>', fdata, is_stdin=True)\n                else:\n                    with open(path, mode='rb') as fdata:\n                        yoda.audit(path, fdata, is_stdin=False)\n            except InvalidConfiguration:\n                failed = True\n            formatter.feed(path, yoda)\n            failed = failed or sum(yoda.stats.values()) > 0\n\n    if args.output_file:\n        with open(config.output_file, 'w') as f:\n            f.write(formatter.flush())\n    else:\n        print(formatter.flush())\n\n    if failed:\n        \n        sys.exit(1)\n    sys.exit(0)\n", "comments": "  if something found   exit code must 1  otherwise 0 ", "content": "import os\nimport sys\nimport logging\nimport copy\n\nimport gixy\nfrom gixy.core.manager import Manager as Gixy\nfrom gixy.formatters import get_all as formatters\nfrom gixy.core.plugins_manager import PluginsManager\nfrom gixy.core.config import Config\nfrom gixy.cli.argparser import create_parser\nfrom gixy.core.exceptions import InvalidConfiguration\n\n\nLOG = logging.getLogger()\n\n\ndef _init_logger(debug=False):\n    LOG.handlers = []\n    log_level = logging.DEBUG if debug else logging.INFO\n\n    LOG.setLevel(log_level)\n    handler = logging.StreamHandler(sys.stderr)\n    handler.setFormatter(logging.Formatter('[%(module)s]\\t%(levelname)s\\t%(message)s'))\n    LOG.addHandler(handler)\n    LOG.debug(\"logging initialized\")\n\n\ndef _create_plugin_help(option):\n    if isinstance(option, (tuple, list, set)):\n        default = ','.join(list(option))\n    else:\n        default = str(option)\n\n    return 'Default: {0}'.format(default)\n\n\ndef _get_cli_parser():\n    parser = create_parser()\n    parser.add_argument('nginx_files', nargs='*', type=str, default=['/etc/nginx/nginx.conf'], metavar='nginx.conf',\n                        help='Path to nginx.conf, e.g. /etc/nginx/nginx.conf')\n\n    parser.add_argument(\n        '-v', '--version', action='version',\n        version='Gixy v{0}'.format(gixy.version))\n\n    parser.add_argument(\n        '-l', '--level', dest='level', action='count', default=0,\n        help='Report issues of a given severity level or higher (-l for LOW, -ll for MEDIUM, -lll for HIGH)')\n\n    default_formatter = 'console' if sys.stdout.isatty() else 'text'\n    available_formatters = formatters().keys()\n    parser.add_argument(\n        '-f', '--format', dest='output_format', choices=available_formatters, default=default_formatter,\n        type=str, help='Specify output format')\n\n    parser.add_argument(\n        '-o', '--output', dest='output_file', type=str,\n        help='Write report to file')\n\n    parser.add_argument(\n        '-d', '--debug', dest='debug', action='store_true', default=False,\n        help='Turn on debug mode')\n\n    parser.add_argument(\n        '--tests', dest='tests', type=str,\n        help='Comma-separated list of tests to run')\n\n    parser.add_argument(\n        '--skips', dest='skips', type=str,\n        help='Comma-separated list of tests to skip')\n\n    parser.add_argument(\n        '--disable-includes', dest='disable_includes', action='store_true', default=False,\n        help='Disable \"include\" directive processing')\n\n    group = parser.add_argument_group('plugins options')\n    for plugin_cls in PluginsManager().plugins_classes:\n        name = plugin_cls.__name__\n        if not plugin_cls.options:\n            continue\n\n        options = copy.deepcopy(plugin_cls.options)\n        for opt_key, opt_val in options.items():\n            option_name = '--{plugin}-{key}'.format(plugin=name, key=opt_key).replace('_', '-')\n            dst_name = '{plugin}:{key}'.format(plugin=name, key=opt_key)\n            opt_type = str if isinstance(opt_val, (tuple, list, set)) else type(opt_val)\n            group.add_argument(\n                option_name, metavar=opt_key, dest=dst_name, type=opt_type,\n                help=_create_plugin_help(opt_val)\n            )\n\n    return parser\n\n\ndef main():\n    parser = _get_cli_parser()\n    args = parser.parse_args()\n    _init_logger(args.debug)\n\n    if len(args.nginx_files) == 1 and args.nginx_files[0] != '-':\n        path = os.path.expanduser(args.nginx_files[0])\n        if not os.path.exists(path):\n            sys.stderr.write('File {path!r} was not found.\\nPlease specify correct path to configuration.\\n'.format(\n                path=path))\n            sys.exit(1)\n\n    try:\n        severity = gixy.severity.ALL[args.level]\n    except IndexError:\n        sys.stderr.write('Too high level filtering. Maximum level: -{0}\\n'.format('l' * (len(gixy.severity.ALL) - 1)))\n        sys.exit(1)\n\n    if args.tests:\n        tests = [x.strip() for x in args.tests.split(',')]\n    else:\n        tests = None\n\n    if args.skips:\n        skips = [x.strip() for x in args.skips.split(',')]\n    else:\n        skips = None\n\n    config = Config(\n        severity=severity,\n        output_format=args.output_format,\n        output_file=args.output_file,\n        plugins=tests,\n        skips=skips,\n        allow_includes=not args.disable_includes\n    )\n\n    for plugin_cls in PluginsManager().plugins_classes:\n        name = plugin_cls.__name__\n        options = copy.deepcopy(plugin_cls.options)\n        for opt_key, opt_val in options.items():\n            option_name = '{name}:{key}'.format(name=name, key=opt_key)\n            if option_name not in args:\n                continue\n\n            val = getattr(args, option_name)\n            if val is None:\n                continue\n\n            if isinstance(opt_val, tuple):\n                val = tuple([x.strip() for x in val.split(',')])\n            elif isinstance(opt_val, set):\n                val = set([x.strip() for x in val.split(',')])\n            elif isinstance(opt_val, list):\n                val = [x.strip() for x in val.split(',')]\n            options[opt_key] = val\n        config.set_for(name, options)\n\n    formatter = formatters()[config.output_format]()\n    failed = False\n    for input_path in args.nginx_files:\n        path = os.path.abspath(os.path.expanduser(input_path))\n        if not os.path.exists(path):\n            LOG.error('File %s was not found', path)\n            continue\n\n        with Gixy(config=config) as yoda:\n            try:\n                if path == '-':\n                    with os.fdopen(sys.stdin.fileno(), 'rb') as fdata:\n                        yoda.audit('<stdin>', fdata, is_stdin=True)\n                else:\n                    with open(path, mode='rb') as fdata:\n                        yoda.audit(path, fdata, is_stdin=False)\n            except InvalidConfiguration:\n                failed = True\n            formatter.feed(path, yoda)\n            failed = failed or sum(yoda.stats.values()) > 0\n\n    if args.output_file:\n        with open(config.output_file, 'w') as f:\n            f.write(formatter.flush())\n    else:\n        print(formatter.flush())\n\n    if failed:\n        # If something found - exit code must be 1, otherwise 0\n        sys.exit(1)\n    sys.exit(0)\n", "description": "Nginx configuration static analyzer", "file_name": "main.py", "id": "ee670973a2f95116c30ea6f7a1d09b4a", "language": "Python", "project_name": "gixy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/yandex-gixy/yandex-gixy-86b5e60/gixy/cli/main.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:01:42Z", "url": "https://github.com/yandex/gixy", "wiki": true}