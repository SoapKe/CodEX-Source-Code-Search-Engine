{"author": "nvbn", "code": "from pprint import pformat\nimport os\nimport sys\nfrom difflib import SequenceMatcher\nfrom .. import logs, types, const\nfrom ..conf import settings\nfrom ..corrector import get_corrected_commands\nfrom ..exceptions import EmptyCommand\nfrom ..ui import select_command\nfrom ..utils import get_alias, get_all_executables\n\n\ndef _get_raw_command(known_args):\n    if known_args.force_command:\n        return known_args.force_command\n    elif not os.environ.get('TF_HISTORY'):\n        return known_args.command\n    else:\n        history = os.environ['TF_HISTORY'].split('\\n')[::-1]\n        alias = get_alias()\n        executables = get_all_executables()\n        for command in history:\n            diff = SequenceMatcher(a=alias, b=command).ratio()\n            if diff < const.DIFF_WITH_ALIAS or command in executables:\n                return [command]\n\n\ndef fix_command(known_args):\n    \n    settings.init(known_args)\n    with logs.debug_time('Total'):\n        logs.debug(u'Run with settings: {}'.format(pformat(settings)))\n        raw_command = _get_raw_command(known_args)\n\n        try:\n            command = types.Command.from_raw_script(raw_command)\n        except EmptyCommand:\n            logs.debug('Empty command, nothing to do')\n            return\n\n        corrected_commands = get_corrected_commands(command)\n        selected_command = select_command(corrected_commands)\n\n        if selected_command:\n            selected_command.run(command)\n        else:\n            sys.exit(1)\n", "comments": "Fixes previous command. Used when `thefuck` called without arguments.\n.\n", "content": "from pprint import pformat\nimport os\nimport sys\nfrom difflib import SequenceMatcher\nfrom .. import logs, types, const\nfrom ..conf import settings\nfrom ..corrector import get_corrected_commands\nfrom ..exceptions import EmptyCommand\nfrom ..ui import select_command\nfrom ..utils import get_alias, get_all_executables\n\n\ndef _get_raw_command(known_args):\n    if known_args.force_command:\n        return known_args.force_command\n    elif not os.environ.get('TF_HISTORY'):\n        return known_args.command\n    else:\n        history = os.environ['TF_HISTORY'].split('\\n')[::-1]\n        alias = get_alias()\n        executables = get_all_executables()\n        for command in history:\n            diff = SequenceMatcher(a=alias, b=command).ratio()\n            if diff < const.DIFF_WITH_ALIAS or command in executables:\n                return [command]\n\n\ndef fix_command(known_args):\n    \"\"\"Fixes previous command. Used when `thefuck` called without arguments.\"\"\"\n    settings.init(known_args)\n    with logs.debug_time('Total'):\n        logs.debug(u'Run with settings: {}'.format(pformat(settings)))\n        raw_command = _get_raw_command(known_args)\n\n        try:\n            command = types.Command.from_raw_script(raw_command)\n        except EmptyCommand:\n            logs.debug('Empty command, nothing to do')\n            return\n\n        corrected_commands = get_corrected_commands(command)\n        selected_command = select_command(corrected_commands)\n\n        if selected_command:\n            selected_command.run(command)\n        else:\n            sys.exit(1)\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "fix_command.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/entrypoints/fix_command.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}