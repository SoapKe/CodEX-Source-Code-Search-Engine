{"author": "XX-net", "code": "\n\n\nimport os\nimport urlparse\n\n\nimport simple_http_server\n\nimport global_var as g\nfrom xlog import getLogger\nxlog = getLogger(\"smart_router\")\n\n\ncurrent_path = os.path.dirname(os.path.abspath(__file__))\n\nroot_path = os.path.abspath(os.path.join(current_path, os.pardir, os.pardir))\ntop_path = os.path.abspath(os.path.join(root_path, os.pardir, os.pardir))\ndata_path = os.path.join(top_path, 'data', \"smart_router\")\n\ndefault_pacfile = os.path.join(current_path, \"proxy.pac\")\nuser_pacfile = os.path.join(data_path, \"proxy.pac\")\n\ngae_ca_file = os.path.join(top_path, 'data', \"gae_proxy\", \"CA.crt\")\n\n\nallow_policy = [\"black_GAE\", \"black_X-Tunnel\", \"smart-router\"]\n\n\ndef get_serving_pacfile():\n    if not os.path.isfile(user_pacfile):\n        serving_pacfile = default_pacfile\n    else:\n        serving_pacfile = user_pacfile\n\n    with open(serving_pacfile, 'rb') as fp:\n        content = fp.read()\n\n    return content\n\n\nclass PacHandler(simple_http_server.HttpServerHandler):\n    PROXY_LISTEN = \"PROXY_LISTEN\"\n\n    def policy_smart_router(self, host):\n        content = \"\"\"function FindProxyForURL(url, host) { return 'PROXY PROXY_LISTEN';}\"\"\"\n\n        proxy = host + \":\" + str(g.config.proxy_port)\n        content = content.replace(self.PROXY_LISTEN, proxy)\n        return content\n\n    def policy_black_port(self, host, port):\n        content = get_serving_pacfile()\n\n        proxy = host + \":\" + str(port)\n        content = content.replace(self.PROXY_LISTEN, proxy)\n\n        black, white = g.gfwlist.get_pac_string()\n        content = content.replace(\"BLACK_LIST\", black).replace(\"WHITE_LIST\", white)\n        return content\n\n    def do_GET(self):\n        path = urlparse.urlparse(self.path).path \n        filename = os.path.normpath('./' + path)\n        if filename != 'proxy.pac':\n            xlog.warn(\"pac_server GET %s fail\", self.path)\n            return self.send_not_found()\n\n        host = self.headers.getheader('Host')\n        host, _, port = host.rpartition(\":\")\n\n        if g.config.pac_policy == \"black_GAE\":\n            content = self.policy_black_port(host, \"8087\")\n        elif g.config.pac_policy == \"black_X-Tunnel\":\n            content = self.policy_black_port(host, \"1080\")\n        else:\n            content = self.policy_smart_router(host)\n\n        self.send_response('text/plain', content)\n", "comments": "   function findproxyforurl(url  host)   return  proxy proxy listen           usr bin env python    coding utf 8      proxy pac  ", "content": "#!/usr/bin/env python\n# coding:utf-8\n\nimport os\nimport urlparse\n\n\nimport simple_http_server\n\nimport global_var as g\nfrom xlog import getLogger\nxlog = getLogger(\"smart_router\")\n\n\ncurrent_path = os.path.dirname(os.path.abspath(__file__))\n\nroot_path = os.path.abspath(os.path.join(current_path, os.pardir, os.pardir))\ntop_path = os.path.abspath(os.path.join(root_path, os.pardir, os.pardir))\ndata_path = os.path.join(top_path, 'data', \"smart_router\")\n\ndefault_pacfile = os.path.join(current_path, \"proxy.pac\")\nuser_pacfile = os.path.join(data_path, \"proxy.pac\")\n\ngae_ca_file = os.path.join(top_path, 'data', \"gae_proxy\", \"CA.crt\")\n\n\nallow_policy = [\"black_GAE\", \"black_X-Tunnel\", \"smart-router\"]\n\n\ndef get_serving_pacfile():\n    if not os.path.isfile(user_pacfile):\n        serving_pacfile = default_pacfile\n    else:\n        serving_pacfile = user_pacfile\n\n    with open(serving_pacfile, 'rb') as fp:\n        content = fp.read()\n\n    return content\n\n\nclass PacHandler(simple_http_server.HttpServerHandler):\n    PROXY_LISTEN = \"PROXY_LISTEN\"\n\n    def policy_smart_router(self, host):\n        content = \"\"\"function FindProxyForURL(url, host) { return 'PROXY PROXY_LISTEN';}\"\"\"\n\n        proxy = host + \":\" + str(g.config.proxy_port)\n        content = content.replace(self.PROXY_LISTEN, proxy)\n        return content\n\n    def policy_black_port(self, host, port):\n        content = get_serving_pacfile()\n\n        proxy = host + \":\" + str(port)\n        content = content.replace(self.PROXY_LISTEN, proxy)\n\n        black, white = g.gfwlist.get_pac_string()\n        content = content.replace(\"BLACK_LIST\", black).replace(\"WHITE_LIST\", white)\n        return content\n\n    def do_GET(self):\n        path = urlparse.urlparse(self.path).path # '/proxy.pac'\n        filename = os.path.normpath('./' + path)\n        if filename != 'proxy.pac':\n            xlog.warn(\"pac_server GET %s fail\", self.path)\n            return self.send_not_found()\n\n        host = self.headers.getheader('Host')\n        host, _, port = host.rpartition(\":\")\n\n        if g.config.pac_policy == \"black_GAE\":\n            content = self.policy_black_port(host, \"8087\")\n        elif g.config.pac_policy == \"black_X-Tunnel\":\n            content = self.policy_black_port(host, \"1080\")\n        else:\n            content = self.policy_smart_router(host)\n\n        self.send_response('text/plain', content)\n", "description": "a web proxy tool", "file_name": "pac_server.py", "id": "280700ae71f9d99ffec911a282554e46", "language": "Python", "project_name": "XX-Net", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/XX-net-XX-Net/XX-net-XX-Net-673a005/code/default/smart_router/local/pac_server.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:03Z", "url": "https://github.com/XX-net/XX-Net", "wiki": true}