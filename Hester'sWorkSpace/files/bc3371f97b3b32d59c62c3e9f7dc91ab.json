{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nimport datetime\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo.addons.membership.tests.common import TestMembershipCommon\n\n\nclass TestMembership(TestMembershipCommon):\n\n    def test_old_membership(self):\n        self.membership_1.write({\n            'membership_date_from': datetime.date.today() + relativedelta(years=-2),\n            'membership_date_to': datetime.date.today() + relativedelta(years=-1),\n        })\n\n        self.partner_1.create_membership_invoice(product_id=self.membership_1.id, datas={'amount': 75.0})\n        self.assertEqual(\n            self.partner_1.membership_state, 'old',\n            'membership: outdated subscription should put member in old state')\n\n    def test_paid_membership(self):\n        self.assertEqual(\n            self.partner_1.membership_state, 'none',\n            'membership: default membership status of partners should be None')\n\n        \n        self.partner_1.create_membership_invoice(product_id=self.membership_1.id, datas={'amount': 75.0})\n\n        \n        invoice = self.env['account.invoice'].search([('partner_id', '=', self.partner_1.id)], limit=1)\n        self.assertEqual(\n            invoice.state, 'draft',\n            'membership: new subscription should create a draft invoice')\n        self.assertEqual(\n            invoice.invoice_line_ids[0].product_id, self.membership_1,\n            'membership: new subscription should create a line with the membership as product')\n        self.assertEqual(\n            invoice.invoice_line_ids[0].price_unit, 75.0,\n            'membership: new subscription should create a line with the given price instead of product price')\n\n        self.assertEqual(\n            self.partner_1.membership_state, 'waiting',\n            'membership: new membership should be in waiting state')\n\n        \n        invoice.action_invoice_open()\n        self.assertEqual(\n            self.partner_1.membership_state, 'invoiced',\n            'membership: after opening the invoice, customer should be in invoiced status')\n\n        \n        bank_journal = self.env['account.journal'].create({'name': 'Bank', 'type': 'bank', 'code': 'BNK67'})\n        invoice.pay_and_reconcile(bank_journal, invoice.amount_total)\n        self.assertEqual(\n            self.partner_1.membership_state, 'paid',\n            'membership: after paying the invoice, customer should be in paid status')\n\n        \n        self.assertEqual(\n            self.partner_2.membership_state, 'free',\n            'membership: free member customer should be in free state')\n        self.partner_2.write({'free_member': False, 'associate_member': self.partner_1.id})\n        self.assertEqual(\n            self.partner_2.membership_state, 'paid',\n            'membership: associated customer should be in paid state')\n\n    def test_cancel_membership(self):\n        self.assertEqual(\n            self.partner_1.membership_state, 'none',\n            'membership: default membership status of partners should be None')\n\n        \n        self.partner_1.create_membership_invoice(product_id=self.membership_1.id, datas={'amount': 75.0})\n\n        \n        invoice = self.env['account.invoice'].search([('partner_id', '=', self.partner_1.id)], limit=1)\n\n        \n        invoice.action_invoice_cancel()\n        self.assertEqual(invoice.state, 'cancel')\n        self.assertEqual(self.partner_1.membership_state, 'canceled')\n", "comments": "      coding  utf 8        subscribes membership    checks invoices    invoice open    customer goes invoiced status    invoice paid    customer goes paid status    check second partner associate    subscribes membership    checks invoices    invoice canceled    membership state customer goes canceled ", "content": "# -*- coding: utf-8 -*-\n\nimport datetime\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo.addons.membership.tests.common import TestMembershipCommon\n\n\nclass TestMembership(TestMembershipCommon):\n\n    def test_old_membership(self):\n        self.membership_1.write({\n            'membership_date_from': datetime.date.today() + relativedelta(years=-2),\n            'membership_date_to': datetime.date.today() + relativedelta(years=-1),\n        })\n\n        self.partner_1.create_membership_invoice(product_id=self.membership_1.id, datas={'amount': 75.0})\n        self.assertEqual(\n            self.partner_1.membership_state, 'old',\n            'membership: outdated subscription should put member in old state')\n\n    def test_paid_membership(self):\n        self.assertEqual(\n            self.partner_1.membership_state, 'none',\n            'membership: default membership status of partners should be None')\n\n        # subscribes to a membership\n        self.partner_1.create_membership_invoice(product_id=self.membership_1.id, datas={'amount': 75.0})\n\n        # checks for invoices\n        invoice = self.env['account.invoice'].search([('partner_id', '=', self.partner_1.id)], limit=1)\n        self.assertEqual(\n            invoice.state, 'draft',\n            'membership: new subscription should create a draft invoice')\n        self.assertEqual(\n            invoice.invoice_line_ids[0].product_id, self.membership_1,\n            'membership: new subscription should create a line with the membership as product')\n        self.assertEqual(\n            invoice.invoice_line_ids[0].price_unit, 75.0,\n            'membership: new subscription should create a line with the given price instead of product price')\n\n        self.assertEqual(\n            self.partner_1.membership_state, 'waiting',\n            'membership: new membership should be in waiting state')\n\n        # the invoice is open -> customer goes to invoiced status\n        invoice.action_invoice_open()\n        self.assertEqual(\n            self.partner_1.membership_state, 'invoiced',\n            'membership: after opening the invoice, customer should be in invoiced status')\n\n        # the invoice is paid -> customer goes to paid status\n        bank_journal = self.env['account.journal'].create({'name': 'Bank', 'type': 'bank', 'code': 'BNK67'})\n        invoice.pay_and_reconcile(bank_journal, invoice.amount_total)\n        self.assertEqual(\n            self.partner_1.membership_state, 'paid',\n            'membership: after paying the invoice, customer should be in paid status')\n\n        # check second partner then associate them\n        self.assertEqual(\n            self.partner_2.membership_state, 'free',\n            'membership: free member customer should be in free state')\n        self.partner_2.write({'free_member': False, 'associate_member': self.partner_1.id})\n        self.assertEqual(\n            self.partner_2.membership_state, 'paid',\n            'membership: associated customer should be in paid state')\n\n    def test_cancel_membership(self):\n        self.assertEqual(\n            self.partner_1.membership_state, 'none',\n            'membership: default membership status of partners should be None')\n\n        # subscribes to a membership\n        self.partner_1.create_membership_invoice(product_id=self.membership_1.id, datas={'amount': 75.0})\n\n        # checks for invoices\n        invoice = self.env['account.invoice'].search([('partner_id', '=', self.partner_1.id)], limit=1)\n\n        # the invoice is canceled -> membership state of the customer goes to canceled\n        invoice.action_invoice_cancel()\n        self.assertEqual(invoice.state, 'cancel')\n        self.assertEqual(self.partner_1.membership_state, 'canceled')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_membership.py", "id": "bc3371f97b3b32d59c62c3e9f7dc91ab", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/membership/tests/test_membership.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}