{"author": "deepfakes", "code": "\n\n\nimport cv2\nimport numpy\nimport os\n\nclass Convert(object):\n    def __init__(self, encoder, smooth_mask=True, avg_color_adjust=True, **kwargs):\n        self.encoder = encoder\n\n        self.use_smooth_mask = smooth_mask\n        self.use_avg_color_adjust = avg_color_adjust\n\n    def patch_image( self, original, face_detected, size ):\n        #assert image.shape == (256, 256, 3)\n        image = cv2.resize(face_detected.image, (256, 256))\n        crop = slice(48, 208)\n        face = image[crop, crop]\n        old_face = face.copy()\n\n        face = cv2.resize(face, (size, size))\n        face = numpy.expand_dims(face, 0)\n        new_face = self.encoder(face / 255.0)[0]\n        new_face = numpy.clip(new_face * 255, 0, 255).astype(image.dtype)\n        new_face = cv2.resize(new_face, (160, 160))\n\n        if self.use_avg_color_adjust:\n            self.adjust_avg_color(old_face,new_face)\n        if self.use_smooth_mask:\n            self.smooth_mask(old_face,new_face)\n\n        new_face = self.superpose(image, new_face, crop)\n        original[slice(face_detected.y, face_detected.y + face_detected.h), slice(face_detected.x, face_detected.x + face_detected.w)] = cv2.resize(new_face, (face_detected.w, face_detected.h))\n        return original\n\n    def adjust_avg_color(self,img_old,img_new):\n        w,h,c = img_new.shape\n        for i in range(img_new.shape[-1]):\n            old_avg = img_old[:, :, i].mean()\n            new_avg = img_new[:, :, i].mean()\n            diff_int = (int)(old_avg - new_avg)\n            for m in range(img_new.shape[0]):\n                for n in range(img_new.shape[1]):\n                    temp = (img_new[m,n,i] + diff_int)\n                    if temp < 0:\n                        img_new[m,n,i] = 0\n                    elif temp > 255:\n                        img_new[m,n,i] = 255\n                    else:\n                        img_new[m,n,i] = temp\n\n    def smooth_mask(self,img_old,img_new):\n        w,h,c = img_new.shape\n        crop = slice(0,w)\n        mask = numpy.zeros_like(img_new)\n        mask[h//15:-h//15,w//15:-w//15,:] = 255\n        mask = cv2.GaussianBlur(mask,(15,15),10)\n        img_new[crop,crop] = mask/255*img_new + (1-mask/255)*img_old\n\n    def superpose(self,image, new_face, crop):\n        new_image = image.copy()\n        new_image[crop, crop] = new_face\n        return new_image\n", "comments": "  based original https   www reddit com r deepfakes  code sample    adjust code made https   github com yangchen8710   assert image shape    (256  256  3) ", "content": "# Based on the original https://www.reddit.com/r/deepfakes/ code sample\n# Adjust code made by https://github.com/yangchen8710\n\nimport cv2\nimport numpy\nimport os\n\nclass Convert(object):\n    def __init__(self, encoder, smooth_mask=True, avg_color_adjust=True, **kwargs):\n        self.encoder = encoder\n\n        self.use_smooth_mask = smooth_mask\n        self.use_avg_color_adjust = avg_color_adjust\n\n    def patch_image( self, original, face_detected, size ):\n        #assert image.shape == (256, 256, 3)\n        image = cv2.resize(face_detected.image, (256, 256))\n        crop = slice(48, 208)\n        face = image[crop, crop]\n        old_face = face.copy()\n\n        face = cv2.resize(face, (size, size))\n        face = numpy.expand_dims(face, 0)\n        new_face = self.encoder(face / 255.0)[0]\n        new_face = numpy.clip(new_face * 255, 0, 255).astype(image.dtype)\n        new_face = cv2.resize(new_face, (160, 160))\n\n        if self.use_avg_color_adjust:\n            self.adjust_avg_color(old_face,new_face)\n        if self.use_smooth_mask:\n            self.smooth_mask(old_face,new_face)\n\n        new_face = self.superpose(image, new_face, crop)\n        original[slice(face_detected.y, face_detected.y + face_detected.h), slice(face_detected.x, face_detected.x + face_detected.w)] = cv2.resize(new_face, (face_detected.w, face_detected.h))\n        return original\n\n    def adjust_avg_color(self,img_old,img_new):\n        w,h,c = img_new.shape\n        for i in range(img_new.shape[-1]):\n            old_avg = img_old[:, :, i].mean()\n            new_avg = img_new[:, :, i].mean()\n            diff_int = (int)(old_avg - new_avg)\n            for m in range(img_new.shape[0]):\n                for n in range(img_new.shape[1]):\n                    temp = (img_new[m,n,i] + diff_int)\n                    if temp < 0:\n                        img_new[m,n,i] = 0\n                    elif temp > 255:\n                        img_new[m,n,i] = 255\n                    else:\n                        img_new[m,n,i] = temp\n\n    def smooth_mask(self,img_old,img_new):\n        w,h,c = img_new.shape\n        crop = slice(0,w)\n        mask = numpy.zeros_like(img_new)\n        mask[h//15:-h//15,w//15:-w//15,:] = 255\n        mask = cv2.GaussianBlur(mask,(15,15),10)\n        img_new[crop,crop] = mask/255*img_new + (1-mask/255)*img_old\n\n    def superpose(self,image, new_face, crop):\n        new_image = image.copy()\n        new_image[crop, crop] = new_face\n        return new_image\n", "description": "Non official project based on original /r/Deepfakes thread. Many thanks to him!", "file_name": "Convert_Adjust.py", "id": "8c0e1768748de5847887c0feb95af827", "language": "Python", "project_name": "faceswap", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/deepfakes-faceswap/deepfakes-faceswap-6ff64ef/plugins/Convert_Adjust.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:27:43Z", "url": "https://github.com/deepfakes/faceswap", "wiki": true}