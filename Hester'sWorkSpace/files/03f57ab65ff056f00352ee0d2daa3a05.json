{"author": "mopidy", "code": "from __future__ import unicode_literals\n\nimport re\n\nimport pytest\n\nfrom mopidy import httpclient\n\n\n@pytest.mark.parametrize(\"config,expected\", [\n    ({}, None),\n    ({'hostname': ''}, None),\n    ({'hostname': 'proxy.lan'}, 'http://proxy.lan:80'),\n    ({'scheme': None, 'hostname': 'proxy.lan'}, 'http://proxy.lan:80'),\n    ({'scheme': 'https', 'hostname': 'proxy.lan'}, 'https://proxy.lan:80'),\n    ({'username': 'user', 'hostname': 'proxy.lan'}, 'http://proxy.lan:80'),\n    ({'password': 'pass', 'hostname': 'proxy.lan'}, 'http://proxy.lan:80'),\n    ({'hostname': 'proxy.lan', 'port': 8080}, 'http://proxy.lan:8080'),\n    ({'hostname': 'proxy.lan', 'port': -1}, 'http://proxy.lan:80'),\n    ({'hostname': 'proxy.lan', 'port': None}, 'http://proxy.lan:80'),\n    ({'hostname': 'proxy.lan', 'port': ''}, 'http://proxy.lan:80'),\n    ({'username': 'user', 'password': 'pass', 'hostname': 'proxy.lan'},\n     'http://user:pass@proxy.lan:80'),\n])\ndef test_format_proxy(config, expected):\n    assert httpclient.format_proxy(config) == expected\n\n\ndef test_format_proxy_without_auth():\n    config = {'username': 'user', 'password': 'pass', 'hostname': 'proxy.lan'}\n    formated_proxy = httpclient.format_proxy(config, auth=False)\n    assert formated_proxy == 'http://proxy.lan:80'\n\n\n@pytest.mark.parametrize(\"name,expected\", [\n    (None, r'^Mopidy/[^ ]+ CPython|/[^ ]+$'),\n    ('Foo', r'^Foo Mopidy/[^ ]+ CPython|/[^ ]+$'),\n    ('Foo/1.2.3', r'^Foo/1.2.3 Mopidy/[^ ]+ CPython|/[^ ]+$'),\n])\ndef test_format_user_agent(name, expected):\n    assert re.match(expected, httpclient.format_user_agent(name))\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport re\n\nimport pytest\n\nfrom mopidy import httpclient\n\n\n@pytest.mark.parametrize(\"config,expected\", [\n    ({}, None),\n    ({'hostname': ''}, None),\n    ({'hostname': 'proxy.lan'}, 'http://proxy.lan:80'),\n    ({'scheme': None, 'hostname': 'proxy.lan'}, 'http://proxy.lan:80'),\n    ({'scheme': 'https', 'hostname': 'proxy.lan'}, 'https://proxy.lan:80'),\n    ({'username': 'user', 'hostname': 'proxy.lan'}, 'http://proxy.lan:80'),\n    ({'password': 'pass', 'hostname': 'proxy.lan'}, 'http://proxy.lan:80'),\n    ({'hostname': 'proxy.lan', 'port': 8080}, 'http://proxy.lan:8080'),\n    ({'hostname': 'proxy.lan', 'port': -1}, 'http://proxy.lan:80'),\n    ({'hostname': 'proxy.lan', 'port': None}, 'http://proxy.lan:80'),\n    ({'hostname': 'proxy.lan', 'port': ''}, 'http://proxy.lan:80'),\n    ({'username': 'user', 'password': 'pass', 'hostname': 'proxy.lan'},\n     'http://user:pass@proxy.lan:80'),\n])\ndef test_format_proxy(config, expected):\n    assert httpclient.format_proxy(config) == expected\n\n\ndef test_format_proxy_without_auth():\n    config = {'username': 'user', 'password': 'pass', 'hostname': 'proxy.lan'}\n    formated_proxy = httpclient.format_proxy(config, auth=False)\n    assert formated_proxy == 'http://proxy.lan:80'\n\n\n@pytest.mark.parametrize(\"name,expected\", [\n    (None, r'^Mopidy/[^ ]+ CPython|/[^ ]+$'),\n    ('Foo', r'^Foo Mopidy/[^ ]+ CPython|/[^ ]+$'),\n    ('Foo/1.2.3', r'^Foo/1.2.3 Mopidy/[^ ]+ CPython|/[^ ]+$'),\n])\ndef test_format_user_agent(name, expected):\n    assert re.match(expected, httpclient.format_user_agent(name))\n", "description": "Mopidy is an extensible music server that plays music from local disk, Spotify, SoundCloud, Google Play Music, and more. You edit the playlist from any phone, tablet, or computer using a range of MPD and web clients.", "file_name": "test_httpclient.py", "id": "03f57ab65ff056f00352ee0d2daa3a05", "language": "Python", "project_name": "mopidy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mopidy-mopidy/mopidy-mopidy-79d42c3/tests/test_httpclient.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:12:51Z", "url": "https://github.com/mopidy/mopidy", "wiki": false}