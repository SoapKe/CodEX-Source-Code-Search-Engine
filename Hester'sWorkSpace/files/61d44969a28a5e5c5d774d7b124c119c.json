{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models\n\n\nclass Meeting(models.Model):\n\n    _inherit = \"calendar.event\"\n\n    oe_update_date = fields.Datetime('Odoo Update Date')\n\n    @api.model\n    def get_fields_need_update_google(self):\n        recurrent_fields = self._get_recurrent_fields()\n        return recurrent_fields + ['name', 'description', 'allday', 'start', 'date_end', 'stop',\n                                   'attendee_ids', 'alarm_ids', 'location', 'privacy', 'active',\n                                   'start_date', 'start_datetime', 'stop_date', 'stop_datetime']\n\n    @api.multi\n    def write(self, values):\n        sync_fields = set(self.get_fields_need_update_google())\n        if (set(values) and sync_fields) and 'oe_update_date' not in values and 'NewMeeting' not in self._context:\n            values['oe_update_date'] = fields.Datetime.now()\n        return super(Meeting, self).write(values)\n\n    @api.multi\n    def copy(self, default=None):\n        default = default or {}\n        if default.get('write_type', False):\n            del default['write_type']\n        elif default.get('recurrent_id', False):\n            default['oe_update_date'] = fields.Datetime.now()\n        else:\n            default['oe_update_date'] = False\n        return super(Meeting, self).copy(default)\n\n    @api.multi\n    def unlink(self, can_be_deleted=False):\n        return super(Meeting, self).unlink(can_be_deleted=can_be_deleted)\n\n\nclass Attendee(models.Model):\n\n    _inherit = 'calendar.attendee'\n\n    google_internal_event_id = fields.Char('Google Calendar Event Id')\n    oe_synchro_date = fields.Datetime('Odoo Synchro Date')\n\n    _sql_constraints = [\n        ('google_id_uniq', 'unique(google_internal_event_id,partner_id,event_id)', 'Google ID should be unique!')\n    ]\n\n    @api.multi\n    def write(self, values):\n        for attendee in self:\n            meeting_id_to_update = values.get('event_id', attendee.event_id.id)\n\n            \n            \n            if not self._context.get('curr_attendee', False) and not self._context.get('NewMeeting', False):\n                self.env['calendar.event'].browse(meeting_id_to_update).write({'oe_update_date': fields.Datetime.now()})\n        return super(Attendee, self).write(values)\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     if attendees updated  need specify next synchro need action    except come update google ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models\n\n\nclass Meeting(models.Model):\n\n    _inherit = \"calendar.event\"\n\n    oe_update_date = fields.Datetime('Odoo Update Date')\n\n    @api.model\n    def get_fields_need_update_google(self):\n        recurrent_fields = self._get_recurrent_fields()\n        return recurrent_fields + ['name', 'description', 'allday', 'start', 'date_end', 'stop',\n                                   'attendee_ids', 'alarm_ids', 'location', 'privacy', 'active',\n                                   'start_date', 'start_datetime', 'stop_date', 'stop_datetime']\n\n    @api.multi\n    def write(self, values):\n        sync_fields = set(self.get_fields_need_update_google())\n        if (set(values) and sync_fields) and 'oe_update_date' not in values and 'NewMeeting' not in self._context:\n            values['oe_update_date'] = fields.Datetime.now()\n        return super(Meeting, self).write(values)\n\n    @api.multi\n    def copy(self, default=None):\n        default = default or {}\n        if default.get('write_type', False):\n            del default['write_type']\n        elif default.get('recurrent_id', False):\n            default['oe_update_date'] = fields.Datetime.now()\n        else:\n            default['oe_update_date'] = False\n        return super(Meeting, self).copy(default)\n\n    @api.multi\n    def unlink(self, can_be_deleted=False):\n        return super(Meeting, self).unlink(can_be_deleted=can_be_deleted)\n\n\nclass Attendee(models.Model):\n\n    _inherit = 'calendar.attendee'\n\n    google_internal_event_id = fields.Char('Google Calendar Event Id')\n    oe_synchro_date = fields.Datetime('Odoo Synchro Date')\n\n    _sql_constraints = [\n        ('google_id_uniq', 'unique(google_internal_event_id,partner_id,event_id)', 'Google ID should be unique!')\n    ]\n\n    @api.multi\n    def write(self, values):\n        for attendee in self:\n            meeting_id_to_update = values.get('event_id', attendee.event_id.id)\n\n            # If attendees are updated, we need to specify that next synchro need an action\n            # Except if it come from an update_from_google\n            if not self._context.get('curr_attendee', False) and not self._context.get('NewMeeting', False):\n                self.env['calendar.event'].browse(meeting_id_to_update).write({'oe_update_date': fields.Datetime.now()})\n        return super(Attendee, self).write(values)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "calendar.py", "id": "61d44969a28a5e5c5d774d7b124c119c", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/google_calendar/models/calendar.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}