{"author": "django", "code": "\"\"\"\nThis custom Session model adds an extra column to store an account ID. In\nreal-world applications, it gives you the option of querying the database for\nall active sessions for a particular account.\n\"\"\"\nfrom django.contrib.sessions.backends.db import SessionStore as DBStore\nfrom django.contrib.sessions.base_session import AbstractBaseSession\nfrom django.db import models\n\n\nclass CustomSession(AbstractBaseSession):\n    \"\"\"\n    A session model with a column for an account ID.\n    \"\"\"\n    account_id = models.IntegerField(null=True, db_index=True)\n\n    @classmethod\n    def get_session_store_class(cls):\n        return SessionStore\n\n\nclass SessionStore(DBStore):\n    \"\"\"\n    A database session store, that handles updating the account ID column\n    inside the custom session model.\n    \"\"\"\n    @classmethod\n    def get_model_class(cls):\n        return CustomSession\n\n    def create_model_instance(self, data):\n        obj = super().create_model_instance(data)\n\n        try:\n            account_id = int(data.get('_auth_user_id'))\n        except (ValueError, TypeError):\n            account_id = None\n        obj.account_id = account_id\n\n        return obj\n", "comments": "    this custom session model adds extra column store account id  in real world applications  gives option querying database active sessions particular account      django contrib sessions backends db import sessionstore dbstore django contrib sessions base session import abstractbasesession django db import models   class customsession(abstractbasesession)              a session model column account id              account id   models integerfield(null true  db index true)       classmethod     def get session store class(cls)          return sessionstore   class sessionstore(dbstore)              a database session store  handles updating account id column     inside custom session model          ", "content": "\"\"\"\nThis custom Session model adds an extra column to store an account ID. In\nreal-world applications, it gives you the option of querying the database for\nall active sessions for a particular account.\n\"\"\"\nfrom django.contrib.sessions.backends.db import SessionStore as DBStore\nfrom django.contrib.sessions.base_session import AbstractBaseSession\nfrom django.db import models\n\n\nclass CustomSession(AbstractBaseSession):\n    \"\"\"\n    A session model with a column for an account ID.\n    \"\"\"\n    account_id = models.IntegerField(null=True, db_index=True)\n\n    @classmethod\n    def get_session_store_class(cls):\n        return SessionStore\n\n\nclass SessionStore(DBStore):\n    \"\"\"\n    A database session store, that handles updating the account ID column\n    inside the custom session model.\n    \"\"\"\n    @classmethod\n    def get_model_class(cls):\n        return CustomSession\n\n    def create_model_instance(self, data):\n        obj = super().create_model_instance(data)\n\n        try:\n            account_id = int(data.get('_auth_user_id'))\n        except (ValueError, TypeError):\n            account_id = None\n        obj.account_id = account_id\n\n        return obj\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "ca4f5f9c0e02e6ecf00ecfc00b80a785", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/sessions_tests/models.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}