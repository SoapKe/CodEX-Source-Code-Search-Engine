{"author": "django", "code": "from django.db.models.signals import post_save, pre_save\nfrom django.test import TestCase\n\nfrom .models import Account, Employee, Person, Profile, ProxyEmployee\n\n\nclass UpdateOnlyFieldsTests(TestCase):\n    msg = 'The following fields do not exist in this model or are m2m fields: %s'\n\n    def test_update_fields_basic(self):\n        s = Person.objects.create(name='Sara', gender='F')\n        self.assertEqual(s.gender, 'F')\n\n        s.gender = 'M'\n        s.name = 'Ian'\n        s.save(update_fields=['name'])\n\n        s = Person.objects.get(pk=s.pk)\n        self.assertEqual(s.gender, 'F')\n        self.assertEqual(s.name, 'Ian')\n\n    def test_update_fields_deferred(self):\n        s = Person.objects.create(name='Sara', gender='F', pid=22)\n        self.assertEqual(s.gender, 'F')\n\n        s1 = Person.objects.defer(\"gender\", \"pid\").get(pk=s.pk)\n        s1.name = \"Emily\"\n        s1.gender = \"M\"\n\n        with self.assertNumQueries(1):\n            s1.save()\n\n        s2 = Person.objects.get(pk=s1.pk)\n        self.assertEqual(s2.name, \"Emily\")\n        self.assertEqual(s2.gender, \"M\")\n\n    def test_update_fields_only_1(self):\n        s = Person.objects.create(name='Sara', gender='F')\n        self.assertEqual(s.gender, 'F')\n\n        s1 = Person.objects.only('name').get(pk=s.pk)\n        s1.name = \"Emily\"\n        s1.gender = \"M\"\n\n        with self.assertNumQueries(1):\n            s1.save()\n\n        s2 = Person.objects.get(pk=s1.pk)\n        self.assertEqual(s2.name, \"Emily\")\n        self.assertEqual(s2.gender, \"M\")\n\n    def test_update_fields_only_2(self):\n        s = Person.objects.create(name='Sara', gender='F', pid=22)\n        self.assertEqual(s.gender, 'F')\n\n        s1 = Person.objects.only('name').get(pk=s.pk)\n        s1.name = \"Emily\"\n        s1.gender = \"M\"\n\n        with self.assertNumQueries(2):\n            s1.save(update_fields=['pid'])\n\n        s2 = Person.objects.get(pk=s1.pk)\n        self.assertEqual(s2.name, \"Sara\")\n        self.assertEqual(s2.gender, \"F\")\n\n    def test_update_fields_only_repeated(self):\n        s = Person.objects.create(name='Sara', gender='F')\n        self.assertEqual(s.gender, 'F')\n\n        s1 = Person.objects.only('name').get(pk=s.pk)\n        s1.gender = 'M'\n        with self.assertNumQueries(1):\n            s1.save()\n        # save() should not fetch deferred fields\n        s1 = Person.objects.only('name').get(pk=s.pk)\n        with self.assertNumQueries(1):\n            s1.save()\n\n    def test_update_fields_inheritance_defer(self):\n        profile_boss = Profile.objects.create(name='Boss', salary=3000)\n        e1 = Employee.objects.create(name='Sara', gender='F', employee_num=1, profile=profile_boss)\n        e1 = Employee.objects.only('name').get(pk=e1.pk)\n        e1.name = 'Linda'\n        with self.assertNumQueries(1):\n            e1.save()\n        self.assertEqual(Employee.objects.get(pk=e1.pk).name, 'Linda')\n\n    def test_update_fields_fk_defer(self):\n        profile_boss = Profile.objects.create(name='Boss', salary=3000)\n        profile_receptionist = Profile.objects.create(name='Receptionist', salary=1000)\n        e1 = Employee.objects.create(name='Sara', gender='F', employee_num=1, profile=profile_boss)\n        e1 = Employee.objects.only('profile').get(pk=e1.pk)\n        e1.profile = profile_receptionist\n        with self.assertNumQueries(1):\n            e1.save()\n        self.assertEqual(Employee.objects.get(pk=e1.pk).profile, profile_receptionist)\n        e1.profile_id = profile_boss.pk\n        with self.assertNumQueries(1):\n            e1.save()\n        self.assertEqual(Employee.objects.get(pk=e1.pk).profile, profile_boss)\n\n    def test_select_related_only_interaction(self):\n        profile_boss = Profile.objects.create(name='Boss', salary=3000)\n        e1 = Employee.objects.create(name='Sara', gender='F', employee_num=1, profile=profile_boss)\n        e1 = Employee.objects.only('profile__salary').select_related('profile').get(pk=e1.pk)\n        profile_boss.name = 'Clerk'\n        profile_boss.salary = 1000\n        profile_boss.save()\n        \n        \n        with self.assertNumQueries(1):\n            e1.profile.save()\n        reloaded_profile = Profile.objects.get(pk=profile_boss.pk)\n        self.assertEqual(reloaded_profile.name, profile_boss.name)\n        self.assertEqual(reloaded_profile.salary, 3000)\n\n    def test_update_fields_m2m(self):\n        profile_boss = Profile.objects.create(name='Boss', salary=3000)\n        e1 = Employee.objects.create(name='Sara', gender='F', employee_num=1, profile=profile_boss)\n        a1 = Account.objects.create(num=1)\n        a2 = Account.objects.create(num=2)\n        e1.accounts.set([a1, a2])\n\n        with self.assertRaisesMessage(ValueError, self.msg % 'accounts'):\n            e1.save(update_fields=['accounts'])\n\n    def test_update_fields_inheritance(self):\n        profile_boss = Profile.objects.create(name='Boss', salary=3000)\n        profile_receptionist = Profile.objects.create(name='Receptionist', salary=1000)\n        e1 = Employee.objects.create(name='Sara', gender='F', employee_num=1, profile=profile_boss)\n\n        e1.name = 'Ian'\n        e1.gender = 'M'\n        e1.save(update_fields=['name'])\n\n        e2 = Employee.objects.get(pk=e1.pk)\n        self.assertEqual(e2.name, 'Ian')\n        self.assertEqual(e2.gender, 'F')\n        self.assertEqual(e2.profile, profile_boss)\n\n        e2.profile = profile_receptionist\n        e2.name = 'Sara'\n        e2.save(update_fields=['profile'])\n\n        e3 = Employee.objects.get(pk=e1.pk)\n        self.assertEqual(e3.name, 'Ian')\n        self.assertEqual(e3.profile, profile_receptionist)\n\n        with self.assertNumQueries(1):\n            e3.profile = profile_boss\n            e3.save(update_fields=['profile_id'])\n\n        e4 = Employee.objects.get(pk=e3.pk)\n        self.assertEqual(e4.profile, profile_boss)\n        self.assertEqual(e4.profile_id, profile_boss.pk)\n\n    def test_update_fields_inheritance_with_proxy_model(self):\n        profile_boss = Profile.objects.create(name='Boss', salary=3000)\n        profile_receptionist = Profile.objects.create(name='Receptionist', salary=1000)\n        e1 = ProxyEmployee.objects.create(name='Sara', gender='F', employee_num=1, profile=profile_boss)\n\n        e1.name = 'Ian'\n        e1.gender = 'M'\n        e1.save(update_fields=['name'])\n\n        e2 = ProxyEmployee.objects.get(pk=e1.pk)\n        self.assertEqual(e2.name, 'Ian')\n        self.assertEqual(e2.gender, 'F')\n        self.assertEqual(e2.profile, profile_boss)\n\n        e2.profile = profile_receptionist\n        e2.name = 'Sara'\n        e2.save(update_fields=['profile'])\n\n        e3 = ProxyEmployee.objects.get(pk=e1.pk)\n        self.assertEqual(e3.name, 'Ian')\n        self.assertEqual(e3.profile, profile_receptionist)\n\n    def test_update_fields_signals(self):\n        p = Person.objects.create(name='Sara', gender='F')\n        pre_save_data = []\n\n        def pre_save_receiver(**kwargs):\n            pre_save_data.append(kwargs['update_fields'])\n        pre_save.connect(pre_save_receiver)\n        post_save_data = []\n\n        def post_save_receiver(**kwargs):\n            post_save_data.append(kwargs['update_fields'])\n        post_save.connect(post_save_receiver)\n        p.save(update_fields=['name'])\n        self.assertEqual(len(pre_save_data), 1)\n        self.assertEqual(len(pre_save_data[0]), 1)\n        self.assertIn('name', pre_save_data[0])\n        self.assertEqual(len(post_save_data), 1)\n        self.assertEqual(len(post_save_data[0]), 1)\n        self.assertIn('name', post_save_data[0])\n\n        pre_save.disconnect(pre_save_receiver)\n        post_save.disconnect(post_save_receiver)\n\n    def test_update_fields_incorrect_params(self):\n        s = Person.objects.create(name='Sara', gender='F')\n\n        with self.assertRaisesMessage(ValueError, self.msg % 'first_name'):\n            s.save(update_fields=['first_name'])\n\n        \n        \n        with self.assertRaisesMessage(ValueError, self.msg % ''):\n            s.save(update_fields=\"name\")\n\n    def test_empty_update_fields(self):\n        s = Person.objects.create(name='Sara', gender='F')\n        pre_save_data = []\n\n        def pre_save_receiver(**kwargs):\n            pre_save_data.append(kwargs['update_fields'])\n        pre_save.connect(pre_save_receiver)\n        post_save_data = []\n\n        def post_save_receiver(**kwargs):\n            post_save_data.append(kwargs['update_fields'])\n        post_save.connect(post_save_receiver)\n        \n        with self.assertNumQueries(0):\n            s.save(update_fields=[])\n        \n        self.assertEqual(len(pre_save_data), 0)\n        self.assertEqual(len(post_save_data), 0)\n\n        pre_save.disconnect(pre_save_receiver)\n        post_save.disconnect(post_save_receiver)\n\n    def test_num_queries_inheritance(self):\n        s = Employee.objects.create(name='Sara', gender='F')\n        s.employee_num = 1\n        s.name = 'Emily'\n        with self.assertNumQueries(1):\n            s.save(update_fields=['employee_num'])\n        s = Employee.objects.get(pk=s.pk)\n        self.assertEqual(s.employee_num, 1)\n        self.assertEqual(s.name, 'Sara')\n        s.employee_num = 2\n        s.name = 'Emily'\n        with self.assertNumQueries(1):\n            s.save(update_fields=['name'])\n        s = Employee.objects.get(pk=s.pk)\n        self.assertEqual(s.name, 'Emily')\n        self.assertEqual(s.employee_num, 1)\n        \n        self.assertEqual(Employee.objects.count(), 1)\n        self.assertEqual(Person.objects.count(), 1)\n        with self.assertNumQueries(2):\n            s.save(update_fields=['name', 'employee_num'])\n", "comments": "  save() fetch deferred fields    the loaded salary 3000 gets saved  name  clerk     overwritten      name  treated iterable output something like     n    e  order deterministic     save skipped     signals skipped        a little sanity check actually updates    ", "content": "from django.db.models.signals import post_save, pre_save\nfrom django.test import TestCase\n\nfrom .models import Account, Employee, Person, Profile, ProxyEmployee\n\n\nclass UpdateOnlyFieldsTests(TestCase):\n    msg = 'The following fields do not exist in this model or are m2m fields: %s'\n\n    def test_update_fields_basic(self):\n        s = Person.objects.create(name='Sara', gender='F')\n        self.assertEqual(s.gender, 'F')\n\n        s.gender = 'M'\n        s.name = 'Ian'\n        s.save(update_fields=['name'])\n\n        s = Person.objects.get(pk=s.pk)\n        self.assertEqual(s.gender, 'F')\n        self.assertEqual(s.name, 'Ian')\n\n    def test_update_fields_deferred(self):\n        s = Person.objects.create(name='Sara', gender='F', pid=22)\n        self.assertEqual(s.gender, 'F')\n\n        s1 = Person.objects.defer(\"gender\", \"pid\").get(pk=s.pk)\n        s1.name = \"Emily\"\n        s1.gender = \"M\"\n\n        with self.assertNumQueries(1):\n            s1.save()\n\n        s2 = Person.objects.get(pk=s1.pk)\n        self.assertEqual(s2.name, \"Emily\")\n        self.assertEqual(s2.gender, \"M\")\n\n    def test_update_fields_only_1(self):\n        s = Person.objects.create(name='Sara', gender='F')\n        self.assertEqual(s.gender, 'F')\n\n        s1 = Person.objects.only('name').get(pk=s.pk)\n        s1.name = \"Emily\"\n        s1.gender = \"M\"\n\n        with self.assertNumQueries(1):\n            s1.save()\n\n        s2 = Person.objects.get(pk=s1.pk)\n        self.assertEqual(s2.name, \"Emily\")\n        self.assertEqual(s2.gender, \"M\")\n\n    def test_update_fields_only_2(self):\n        s = Person.objects.create(name='Sara', gender='F', pid=22)\n        self.assertEqual(s.gender, 'F')\n\n        s1 = Person.objects.only('name').get(pk=s.pk)\n        s1.name = \"Emily\"\n        s1.gender = \"M\"\n\n        with self.assertNumQueries(2):\n            s1.save(update_fields=['pid'])\n\n        s2 = Person.objects.get(pk=s1.pk)\n        self.assertEqual(s2.name, \"Sara\")\n        self.assertEqual(s2.gender, \"F\")\n\n    def test_update_fields_only_repeated(self):\n        s = Person.objects.create(name='Sara', gender='F')\n        self.assertEqual(s.gender, 'F')\n\n        s1 = Person.objects.only('name').get(pk=s.pk)\n        s1.gender = 'M'\n        with self.assertNumQueries(1):\n            s1.save()\n        # save() should not fetch deferred fields\n        s1 = Person.objects.only('name').get(pk=s.pk)\n        with self.assertNumQueries(1):\n            s1.save()\n\n    def test_update_fields_inheritance_defer(self):\n        profile_boss = Profile.objects.create(name='Boss', salary=3000)\n        e1 = Employee.objects.create(name='Sara', gender='F', employee_num=1, profile=profile_boss)\n        e1 = Employee.objects.only('name').get(pk=e1.pk)\n        e1.name = 'Linda'\n        with self.assertNumQueries(1):\n            e1.save()\n        self.assertEqual(Employee.objects.get(pk=e1.pk).name, 'Linda')\n\n    def test_update_fields_fk_defer(self):\n        profile_boss = Profile.objects.create(name='Boss', salary=3000)\n        profile_receptionist = Profile.objects.create(name='Receptionist', salary=1000)\n        e1 = Employee.objects.create(name='Sara', gender='F', employee_num=1, profile=profile_boss)\n        e1 = Employee.objects.only('profile').get(pk=e1.pk)\n        e1.profile = profile_receptionist\n        with self.assertNumQueries(1):\n            e1.save()\n        self.assertEqual(Employee.objects.get(pk=e1.pk).profile, profile_receptionist)\n        e1.profile_id = profile_boss.pk\n        with self.assertNumQueries(1):\n            e1.save()\n        self.assertEqual(Employee.objects.get(pk=e1.pk).profile, profile_boss)\n\n    def test_select_related_only_interaction(self):\n        profile_boss = Profile.objects.create(name='Boss', salary=3000)\n        e1 = Employee.objects.create(name='Sara', gender='F', employee_num=1, profile=profile_boss)\n        e1 = Employee.objects.only('profile__salary').select_related('profile').get(pk=e1.pk)\n        profile_boss.name = 'Clerk'\n        profile_boss.salary = 1000\n        profile_boss.save()\n        # The loaded salary of 3000 gets saved, the name of 'Clerk' isn't\n        # overwritten.\n        with self.assertNumQueries(1):\n            e1.profile.save()\n        reloaded_profile = Profile.objects.get(pk=profile_boss.pk)\n        self.assertEqual(reloaded_profile.name, profile_boss.name)\n        self.assertEqual(reloaded_profile.salary, 3000)\n\n    def test_update_fields_m2m(self):\n        profile_boss = Profile.objects.create(name='Boss', salary=3000)\n        e1 = Employee.objects.create(name='Sara', gender='F', employee_num=1, profile=profile_boss)\n        a1 = Account.objects.create(num=1)\n        a2 = Account.objects.create(num=2)\n        e1.accounts.set([a1, a2])\n\n        with self.assertRaisesMessage(ValueError, self.msg % 'accounts'):\n            e1.save(update_fields=['accounts'])\n\n    def test_update_fields_inheritance(self):\n        profile_boss = Profile.objects.create(name='Boss', salary=3000)\n        profile_receptionist = Profile.objects.create(name='Receptionist', salary=1000)\n        e1 = Employee.objects.create(name='Sara', gender='F', employee_num=1, profile=profile_boss)\n\n        e1.name = 'Ian'\n        e1.gender = 'M'\n        e1.save(update_fields=['name'])\n\n        e2 = Employee.objects.get(pk=e1.pk)\n        self.assertEqual(e2.name, 'Ian')\n        self.assertEqual(e2.gender, 'F')\n        self.assertEqual(e2.profile, profile_boss)\n\n        e2.profile = profile_receptionist\n        e2.name = 'Sara'\n        e2.save(update_fields=['profile'])\n\n        e3 = Employee.objects.get(pk=e1.pk)\n        self.assertEqual(e3.name, 'Ian')\n        self.assertEqual(e3.profile, profile_receptionist)\n\n        with self.assertNumQueries(1):\n            e3.profile = profile_boss\n            e3.save(update_fields=['profile_id'])\n\n        e4 = Employee.objects.get(pk=e3.pk)\n        self.assertEqual(e4.profile, profile_boss)\n        self.assertEqual(e4.profile_id, profile_boss.pk)\n\n    def test_update_fields_inheritance_with_proxy_model(self):\n        profile_boss = Profile.objects.create(name='Boss', salary=3000)\n        profile_receptionist = Profile.objects.create(name='Receptionist', salary=1000)\n        e1 = ProxyEmployee.objects.create(name='Sara', gender='F', employee_num=1, profile=profile_boss)\n\n        e1.name = 'Ian'\n        e1.gender = 'M'\n        e1.save(update_fields=['name'])\n\n        e2 = ProxyEmployee.objects.get(pk=e1.pk)\n        self.assertEqual(e2.name, 'Ian')\n        self.assertEqual(e2.gender, 'F')\n        self.assertEqual(e2.profile, profile_boss)\n\n        e2.profile = profile_receptionist\n        e2.name = 'Sara'\n        e2.save(update_fields=['profile'])\n\n        e3 = ProxyEmployee.objects.get(pk=e1.pk)\n        self.assertEqual(e3.name, 'Ian')\n        self.assertEqual(e3.profile, profile_receptionist)\n\n    def test_update_fields_signals(self):\n        p = Person.objects.create(name='Sara', gender='F')\n        pre_save_data = []\n\n        def pre_save_receiver(**kwargs):\n            pre_save_data.append(kwargs['update_fields'])\n        pre_save.connect(pre_save_receiver)\n        post_save_data = []\n\n        def post_save_receiver(**kwargs):\n            post_save_data.append(kwargs['update_fields'])\n        post_save.connect(post_save_receiver)\n        p.save(update_fields=['name'])\n        self.assertEqual(len(pre_save_data), 1)\n        self.assertEqual(len(pre_save_data[0]), 1)\n        self.assertIn('name', pre_save_data[0])\n        self.assertEqual(len(post_save_data), 1)\n        self.assertEqual(len(post_save_data[0]), 1)\n        self.assertIn('name', post_save_data[0])\n\n        pre_save.disconnect(pre_save_receiver)\n        post_save.disconnect(post_save_receiver)\n\n    def test_update_fields_incorrect_params(self):\n        s = Person.objects.create(name='Sara', gender='F')\n\n        with self.assertRaisesMessage(ValueError, self.msg % 'first_name'):\n            s.save(update_fields=['first_name'])\n\n        # \"name\" is treated as an iterable so the output is something like\n        # \"n, a, m, e\" but the order isn't deterministic.\n        with self.assertRaisesMessage(ValueError, self.msg % ''):\n            s.save(update_fields=\"name\")\n\n    def test_empty_update_fields(self):\n        s = Person.objects.create(name='Sara', gender='F')\n        pre_save_data = []\n\n        def pre_save_receiver(**kwargs):\n            pre_save_data.append(kwargs['update_fields'])\n        pre_save.connect(pre_save_receiver)\n        post_save_data = []\n\n        def post_save_receiver(**kwargs):\n            post_save_data.append(kwargs['update_fields'])\n        post_save.connect(post_save_receiver)\n        # Save is skipped.\n        with self.assertNumQueries(0):\n            s.save(update_fields=[])\n        # Signals were skipped, too...\n        self.assertEqual(len(pre_save_data), 0)\n        self.assertEqual(len(post_save_data), 0)\n\n        pre_save.disconnect(pre_save_receiver)\n        post_save.disconnect(post_save_receiver)\n\n    def test_num_queries_inheritance(self):\n        s = Employee.objects.create(name='Sara', gender='F')\n        s.employee_num = 1\n        s.name = 'Emily'\n        with self.assertNumQueries(1):\n            s.save(update_fields=['employee_num'])\n        s = Employee.objects.get(pk=s.pk)\n        self.assertEqual(s.employee_num, 1)\n        self.assertEqual(s.name, 'Sara')\n        s.employee_num = 2\n        s.name = 'Emily'\n        with self.assertNumQueries(1):\n            s.save(update_fields=['name'])\n        s = Employee.objects.get(pk=s.pk)\n        self.assertEqual(s.name, 'Emily')\n        self.assertEqual(s.employee_num, 1)\n        # A little sanity check that we actually did updates...\n        self.assertEqual(Employee.objects.count(), 1)\n        self.assertEqual(Person.objects.count(), 1)\n        with self.assertNumQueries(2):\n            s.save(update_fields=['name', 'employee_num'])\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "1c5c33b32f476b10f2991e862ab0eff1", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/update_only_fields/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}