{"author": "sympy", "code": "from sympy import AccumBounds, Symbol, floor, nan, oo, zoo, E, symbols, \\\n        ceiling, pi, Rational, Float, I, sin, exp, log, factorial, frac\n\nfrom sympy.utilities.pytest import XFAIL\n\nx = Symbol('x')\ni = Symbol('i', imaginary=True)\ny = Symbol('y', real=True)\nk, n = symbols('k,n', integer=True)\n\ndef test_floor():\n\n    assert floor(nan) == nan\n\n    assert floor(oo) == oo\n    assert floor(-oo) == -oo\n    assert floor(zoo) == zoo\n\n    assert floor(0) == 0\n\n    assert floor(1) == 1\n    assert floor(-1) == -1\n\n    assert floor(E) == 2\n    assert floor(-E) == -3\n\n    assert floor(2*E) == 5\n    assert floor(-2*E) == -6\n\n    assert floor(pi) == 3\n    assert floor(-pi) == -4\n\n    assert floor(Rational(1, 2)) == 0\n    assert floor(-Rational(1, 2)) == -1\n\n    assert floor(Rational(7, 3)) == 2\n    assert floor(-Rational(7, 3)) == -3\n\n    assert floor(Float(17.0)) == 17\n    assert floor(-Float(17.0)) == -17\n\n    assert floor(Float(7.69)) == 7\n    assert floor(-Float(7.69)) == -8\n\n    assert floor(I) == I\n    assert floor(-I) == -I\n    e = floor(i)\n    assert e.func is floor and e.args[0] == i\n\n    assert floor(oo*I) == oo*I\n    assert floor(-oo*I) == -oo*I\n    assert floor(exp(I*pi/4)*oo) == exp(I*pi/4)*oo\n\n    assert floor(2*I) == 2*I\n    assert floor(-2*I) == -2*I\n\n    assert floor(I/2) == 0\n    assert floor(-I/2) == -I\n\n    assert floor(E + 17) == 19\n    assert floor(pi + 2) == 5\n\n    assert floor(E + pi) == floor(E + pi)\n    assert floor(I + pi) == floor(I + pi)\n\n    assert floor(floor(pi)) == 3\n    assert floor(floor(y)) == floor(y)\n    assert floor(floor(x)) == floor(floor(x))\n\n    assert floor(x) == floor(x)\n    assert floor(2*x) == floor(2*x)\n    assert floor(k*x) == floor(k*x)\n\n    assert floor(k) == k\n    assert floor(2*k) == 2*k\n    assert floor(k*n) == k*n\n\n    assert floor(k/2) == floor(k/2)\n\n    assert floor(x + y) == floor(x + y)\n\n    assert floor(x + 3) == floor(x + 3)\n    assert floor(x + k) == floor(x + k)\n\n    assert floor(y + 3) == floor(y) + 3\n    assert floor(y + k) == floor(y) + k\n\n    assert floor(3 + I*y + pi) == 6 + floor(y)*I\n\n    assert floor(k + n) == k + n\n\n    assert floor(x*I) == floor(x*I)\n    assert floor(k*I) == k*I\n\n    assert floor(Rational(23, 10) - E*I) == 2 - 3*I\n\n    assert floor(sin(1)) == 0\n    assert floor(sin(-1)) == -1\n\n    assert floor(exp(2)) == 7\n\n    assert floor(log(8)/log(2)) != 2\n    assert int(floor(log(8)/log(2)).evalf(chop=True)) == 3\n\n    assert floor(factorial(50)/exp(1)) == \\\n        11188719610782480504630258070757734324011354208865721592720336800\n\n    assert (floor(y) <= y) == True\n    assert (floor(y) > y) == False\n    assert (floor(x) <= x).is_Relational  \n    assert (floor(x) > x).is_Relational\n    assert (floor(x) <= y).is_Relational  \n    assert (floor(x) > y).is_Relational\n\n\ndef test_ceiling():\n\n    assert ceiling(nan) == nan\n\n    assert ceiling(oo) == oo\n    assert ceiling(-oo) == -oo\n    assert ceiling(zoo) == zoo\n\n    assert ceiling(0) == 0\n\n    assert ceiling(1) == 1\n    assert ceiling(-1) == -1\n\n    assert ceiling(E) == 3\n    assert ceiling(-E) == -2\n\n    assert ceiling(2*E) == 6\n    assert ceiling(-2*E) == -5\n\n    assert ceiling(pi) == 4\n    assert ceiling(-pi) == -3\n\n    assert ceiling(Rational(1, 2)) == 1\n    assert ceiling(-Rational(1, 2)) == 0\n\n    assert ceiling(Rational(7, 3)) == 3\n    assert ceiling(-Rational(7, 3)) == -2\n\n    assert ceiling(Float(17.0)) == 17\n    assert ceiling(-Float(17.0)) == -17\n\n    assert ceiling(Float(7.69)) == 8\n    assert ceiling(-Float(7.69)) == -7\n\n    assert ceiling(I) == I\n    assert ceiling(-I) == -I\n    e = ceiling(i)\n    assert e.func is ceiling and e.args[0] == i\n\n    assert ceiling(oo*I) == oo*I\n    assert ceiling(-oo*I) == -oo*I\n    assert ceiling(exp(I*pi/4)*oo) == exp(I*pi/4)*oo\n\n    assert ceiling(2*I) == 2*I\n    assert ceiling(-2*I) == -2*I\n\n    assert ceiling(I/2) == I\n    assert ceiling(-I/2) == 0\n\n    assert ceiling(E + 17) == 20\n    assert ceiling(pi + 2) == 6\n\n    assert ceiling(E + pi) == ceiling(E + pi)\n    assert ceiling(I + pi) == ceiling(I + pi)\n\n    assert ceiling(ceiling(pi)) == 4\n    assert ceiling(ceiling(y)) == ceiling(y)\n    assert ceiling(ceiling(x)) == ceiling(ceiling(x))\n\n    assert ceiling(x) == ceiling(x)\n    assert ceiling(2*x) == ceiling(2*x)\n    assert ceiling(k*x) == ceiling(k*x)\n\n    assert ceiling(k) == k\n    assert ceiling(2*k) == 2*k\n    assert ceiling(k*n) == k*n\n\n    assert ceiling(k/2) == ceiling(k/2)\n\n    assert ceiling(x + y) == ceiling(x + y)\n\n    assert ceiling(x + 3) == ceiling(x + 3)\n    assert ceiling(x + k) == ceiling(x + k)\n\n    assert ceiling(y + 3) == ceiling(y) + 3\n    assert ceiling(y + k) == ceiling(y) + k\n\n    assert ceiling(3 + pi + y*I) == 7 + ceiling(y)*I\n\n    assert ceiling(k + n) == k + n\n\n    assert ceiling(x*I) == ceiling(x*I)\n    assert ceiling(k*I) == k*I\n\n    assert ceiling(Rational(23, 10) - E*I) == 3 - 2*I\n\n    assert ceiling(sin(1)) == 1\n    assert ceiling(sin(-1)) == 0\n\n    assert ceiling(exp(2)) == 8\n\n    assert ceiling(-log(8)/log(2)) != -2\n    assert int(ceiling(-log(8)/log(2)).evalf(chop=True)) == -3\n\n    assert ceiling(factorial(50)/exp(1)) == \\\n        11188719610782480504630258070757734324011354208865721592720336801\n\n    assert (ceiling(y) >= y) == True\n    assert (ceiling(y) < y) == False\n    assert (ceiling(x) >= x).is_Relational  \n    assert (ceiling(x) < x).is_Relational\n    assert (ceiling(x) >= y).is_Relational  \n    assert (ceiling(x) < y).is_Relational\n\n\ndef test_frac():\n    assert isinstance(frac(x), frac)\n    assert frac(oo) == AccumBounds(0, 1)\n    assert frac(-oo) == AccumBounds(0, 1)\n\n    assert frac(n) == 0\n    assert frac(nan) == nan\n    assert frac(Rational(4, 3)) == Rational(1, 3)\n    assert frac(-Rational(4, 3)) == Rational(2, 3)\n\n    r = Symbol('r', real=True)\n    assert frac(I*r) == I*frac(r)\n    assert frac(1 + I*r) == I*frac(r)\n    assert frac(0.5 + I*r) == 0.5 + I*frac(r)\n    assert frac(n + I*r) == I*frac(r)\n    assert frac(n + I*k) == 0\n    assert frac(x + I*x) == frac(x + I*x)\n    assert frac(x + I*n) == frac(x)\n\n    assert frac(x).rewrite(floor) == x - floor(x)\n\n\ndef test_series():\n    x, y = symbols('x,y')\n    assert floor(x).nseries(x, y, 100) == floor(y)\n    assert ceiling(x).nseries(x, y, 100) == ceiling(y)\n    assert floor(x).nseries(x, pi, 100) == 3\n    assert ceiling(x).nseries(x, pi, 100) == 4\n    assert floor(x).nseries(x, 0, 100) == 0\n    assert ceiling(x).nseries(x, 0, 100) == 1\n    assert floor(-x).nseries(x, 0, 100) == -1\n    assert ceiling(-x).nseries(x, 0, 100) == 0\n\n\n@XFAIL\ndef test_issue_4149():\n    assert floor(3 + pi*I + y*I) == 3 + floor(pi + y)*I\n    assert floor(3*I + pi*I + y*I) == floor(3 + pi + y)*I\n    assert floor(3 + E + pi*I + y*I) == 5 + floor(pi + y)*I\n\ndef test_issue_11207():\n    assert floor(floor(x)) == floor(x)\n    assert floor(ceiling(x)) == ceiling(x)\n    assert ceiling(floor(x)) == floor(x)\n    assert ceiling(ceiling(x)) == ceiling(x)\n", "comments": "  x could non real    arg rhs    x could non real    arg rhs ", "content": "from sympy import AccumBounds, Symbol, floor, nan, oo, zoo, E, symbols, \\\n        ceiling, pi, Rational, Float, I, sin, exp, log, factorial, frac\n\nfrom sympy.utilities.pytest import XFAIL\n\nx = Symbol('x')\ni = Symbol('i', imaginary=True)\ny = Symbol('y', real=True)\nk, n = symbols('k,n', integer=True)\n\ndef test_floor():\n\n    assert floor(nan) == nan\n\n    assert floor(oo) == oo\n    assert floor(-oo) == -oo\n    assert floor(zoo) == zoo\n\n    assert floor(0) == 0\n\n    assert floor(1) == 1\n    assert floor(-1) == -1\n\n    assert floor(E) == 2\n    assert floor(-E) == -3\n\n    assert floor(2*E) == 5\n    assert floor(-2*E) == -6\n\n    assert floor(pi) == 3\n    assert floor(-pi) == -4\n\n    assert floor(Rational(1, 2)) == 0\n    assert floor(-Rational(1, 2)) == -1\n\n    assert floor(Rational(7, 3)) == 2\n    assert floor(-Rational(7, 3)) == -3\n\n    assert floor(Float(17.0)) == 17\n    assert floor(-Float(17.0)) == -17\n\n    assert floor(Float(7.69)) == 7\n    assert floor(-Float(7.69)) == -8\n\n    assert floor(I) == I\n    assert floor(-I) == -I\n    e = floor(i)\n    assert e.func is floor and e.args[0] == i\n\n    assert floor(oo*I) == oo*I\n    assert floor(-oo*I) == -oo*I\n    assert floor(exp(I*pi/4)*oo) == exp(I*pi/4)*oo\n\n    assert floor(2*I) == 2*I\n    assert floor(-2*I) == -2*I\n\n    assert floor(I/2) == 0\n    assert floor(-I/2) == -I\n\n    assert floor(E + 17) == 19\n    assert floor(pi + 2) == 5\n\n    assert floor(E + pi) == floor(E + pi)\n    assert floor(I + pi) == floor(I + pi)\n\n    assert floor(floor(pi)) == 3\n    assert floor(floor(y)) == floor(y)\n    assert floor(floor(x)) == floor(floor(x))\n\n    assert floor(x) == floor(x)\n    assert floor(2*x) == floor(2*x)\n    assert floor(k*x) == floor(k*x)\n\n    assert floor(k) == k\n    assert floor(2*k) == 2*k\n    assert floor(k*n) == k*n\n\n    assert floor(k/2) == floor(k/2)\n\n    assert floor(x + y) == floor(x + y)\n\n    assert floor(x + 3) == floor(x + 3)\n    assert floor(x + k) == floor(x + k)\n\n    assert floor(y + 3) == floor(y) + 3\n    assert floor(y + k) == floor(y) + k\n\n    assert floor(3 + I*y + pi) == 6 + floor(y)*I\n\n    assert floor(k + n) == k + n\n\n    assert floor(x*I) == floor(x*I)\n    assert floor(k*I) == k*I\n\n    assert floor(Rational(23, 10) - E*I) == 2 - 3*I\n\n    assert floor(sin(1)) == 0\n    assert floor(sin(-1)) == -1\n\n    assert floor(exp(2)) == 7\n\n    assert floor(log(8)/log(2)) != 2\n    assert int(floor(log(8)/log(2)).evalf(chop=True)) == 3\n\n    assert floor(factorial(50)/exp(1)) == \\\n        11188719610782480504630258070757734324011354208865721592720336800\n\n    assert (floor(y) <= y) == True\n    assert (floor(y) > y) == False\n    assert (floor(x) <= x).is_Relational  # x could be non-real\n    assert (floor(x) > x).is_Relational\n    assert (floor(x) <= y).is_Relational  # arg is not same as rhs\n    assert (floor(x) > y).is_Relational\n\n\ndef test_ceiling():\n\n    assert ceiling(nan) == nan\n\n    assert ceiling(oo) == oo\n    assert ceiling(-oo) == -oo\n    assert ceiling(zoo) == zoo\n\n    assert ceiling(0) == 0\n\n    assert ceiling(1) == 1\n    assert ceiling(-1) == -1\n\n    assert ceiling(E) == 3\n    assert ceiling(-E) == -2\n\n    assert ceiling(2*E) == 6\n    assert ceiling(-2*E) == -5\n\n    assert ceiling(pi) == 4\n    assert ceiling(-pi) == -3\n\n    assert ceiling(Rational(1, 2)) == 1\n    assert ceiling(-Rational(1, 2)) == 0\n\n    assert ceiling(Rational(7, 3)) == 3\n    assert ceiling(-Rational(7, 3)) == -2\n\n    assert ceiling(Float(17.0)) == 17\n    assert ceiling(-Float(17.0)) == -17\n\n    assert ceiling(Float(7.69)) == 8\n    assert ceiling(-Float(7.69)) == -7\n\n    assert ceiling(I) == I\n    assert ceiling(-I) == -I\n    e = ceiling(i)\n    assert e.func is ceiling and e.args[0] == i\n\n    assert ceiling(oo*I) == oo*I\n    assert ceiling(-oo*I) == -oo*I\n    assert ceiling(exp(I*pi/4)*oo) == exp(I*pi/4)*oo\n\n    assert ceiling(2*I) == 2*I\n    assert ceiling(-2*I) == -2*I\n\n    assert ceiling(I/2) == I\n    assert ceiling(-I/2) == 0\n\n    assert ceiling(E + 17) == 20\n    assert ceiling(pi + 2) == 6\n\n    assert ceiling(E + pi) == ceiling(E + pi)\n    assert ceiling(I + pi) == ceiling(I + pi)\n\n    assert ceiling(ceiling(pi)) == 4\n    assert ceiling(ceiling(y)) == ceiling(y)\n    assert ceiling(ceiling(x)) == ceiling(ceiling(x))\n\n    assert ceiling(x) == ceiling(x)\n    assert ceiling(2*x) == ceiling(2*x)\n    assert ceiling(k*x) == ceiling(k*x)\n\n    assert ceiling(k) == k\n    assert ceiling(2*k) == 2*k\n    assert ceiling(k*n) == k*n\n\n    assert ceiling(k/2) == ceiling(k/2)\n\n    assert ceiling(x + y) == ceiling(x + y)\n\n    assert ceiling(x + 3) == ceiling(x + 3)\n    assert ceiling(x + k) == ceiling(x + k)\n\n    assert ceiling(y + 3) == ceiling(y) + 3\n    assert ceiling(y + k) == ceiling(y) + k\n\n    assert ceiling(3 + pi + y*I) == 7 + ceiling(y)*I\n\n    assert ceiling(k + n) == k + n\n\n    assert ceiling(x*I) == ceiling(x*I)\n    assert ceiling(k*I) == k*I\n\n    assert ceiling(Rational(23, 10) - E*I) == 3 - 2*I\n\n    assert ceiling(sin(1)) == 1\n    assert ceiling(sin(-1)) == 0\n\n    assert ceiling(exp(2)) == 8\n\n    assert ceiling(-log(8)/log(2)) != -2\n    assert int(ceiling(-log(8)/log(2)).evalf(chop=True)) == -3\n\n    assert ceiling(factorial(50)/exp(1)) == \\\n        11188719610782480504630258070757734324011354208865721592720336801\n\n    assert (ceiling(y) >= y) == True\n    assert (ceiling(y) < y) == False\n    assert (ceiling(x) >= x).is_Relational  # x could be non-real\n    assert (ceiling(x) < x).is_Relational\n    assert (ceiling(x) >= y).is_Relational  # arg is not same as rhs\n    assert (ceiling(x) < y).is_Relational\n\n\ndef test_frac():\n    assert isinstance(frac(x), frac)\n    assert frac(oo) == AccumBounds(0, 1)\n    assert frac(-oo) == AccumBounds(0, 1)\n\n    assert frac(n) == 0\n    assert frac(nan) == nan\n    assert frac(Rational(4, 3)) == Rational(1, 3)\n    assert frac(-Rational(4, 3)) == Rational(2, 3)\n\n    r = Symbol('r', real=True)\n    assert frac(I*r) == I*frac(r)\n    assert frac(1 + I*r) == I*frac(r)\n    assert frac(0.5 + I*r) == 0.5 + I*frac(r)\n    assert frac(n + I*r) == I*frac(r)\n    assert frac(n + I*k) == 0\n    assert frac(x + I*x) == frac(x + I*x)\n    assert frac(x + I*n) == frac(x)\n\n    assert frac(x).rewrite(floor) == x - floor(x)\n\n\ndef test_series():\n    x, y = symbols('x,y')\n    assert floor(x).nseries(x, y, 100) == floor(y)\n    assert ceiling(x).nseries(x, y, 100) == ceiling(y)\n    assert floor(x).nseries(x, pi, 100) == 3\n    assert ceiling(x).nseries(x, pi, 100) == 4\n    assert floor(x).nseries(x, 0, 100) == 0\n    assert ceiling(x).nseries(x, 0, 100) == 1\n    assert floor(-x).nseries(x, 0, 100) == -1\n    assert ceiling(-x).nseries(x, 0, 100) == 0\n\n\n@XFAIL\ndef test_issue_4149():\n    assert floor(3 + pi*I + y*I) == 3 + floor(pi + y)*I\n    assert floor(3*I + pi*I + y*I) == floor(3 + pi + y)*I\n    assert floor(3 + E + pi*I + y*I) == 5 + floor(pi + y)*I\n\ndef test_issue_11207():\n    assert floor(floor(x)) == floor(x)\n    assert floor(ceiling(x)) == ceiling(x)\n    assert ceiling(floor(x)) == floor(x)\n    assert ceiling(ceiling(x)) == ceiling(x)\n", "description": "A computer algebra system written in pure Python", "file_name": "test_integers.py", "id": "1ed381235f8524b308fdaacdf12f7056", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/functions/elementary/tests/test_integers.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}