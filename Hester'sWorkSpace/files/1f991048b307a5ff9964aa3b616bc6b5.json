{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport pytest\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_monitor_snmp_dca import Parameters\n    from library.bigip_monitor_snmp_dca import ModuleManager\n    from library.bigip_monitor_snmp_dca import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_monitor_snmp_dca import Parameters\n        from ansible.modules.network.f5.bigip_monitor_snmp_dca import ModuleManager\n        from ansible.modules.network.f5.bigip_monitor_snmp_dca import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            agent_type='UCD',\n            community='public',\n            cpu_coefficient='1.5',\n            cpu_threshold='80',\n            parent='/Common/snmp_dca',\n            disk_coefficient='2.0',\n            disk_threshold='90',\n            interval=10,\n            memory_coefficient='1.0',\n            memory_threshold='70',\n            time_until_up=0,\n            timeout=30,\n            version='v1'\n        )\n\n        p = Parameters(params=args)\n        assert p.agent_type == 'UCD'\n        assert p.community == 'public'\n        assert p.cpu_coefficient == 1.5\n        assert p.cpu_threshold == 80\n        assert p.parent == '/Common/snmp_dca'\n        assert p.disk_coefficient == 2.0\n        assert p.disk_threshold == 90\n        assert p.interval == 10\n        assert p.memory_coefficient == 1.0\n        assert p.memory_threshold == 70\n        assert p.time_until_up == 0\n        assert p.timeout == 30\n        assert p.version == 'v1'\n\n    def test_api_parameters(self):\n        args = dict(\n            agentType='UCD',\n            community='public',\n            cpuCoefficient='1.5',\n            cpuThreshold='80',\n            defaultsFrom='/Common/snmp_dca',\n            diskCoefficient='2.0',\n            diskThreshold='90',\n            interval=10,\n            memoryCoefficient='1.0',\n            memoryThreshold='70',\n            timeUntilUp=0,\n            timeout=30,\n            apiRawValues={\n                \"userDefined asdasd\": \"{ foo }\",\n                \"userDefined bar\": \"tim rupp\",\n                \"user-defined baz-\": \"nia\",\n                \"userDefined userDefined\": \"23234\"\n            },\n            version='v1'\n        )\n\n        p = Parameters(params=args)\n        assert p.agent_type == 'UCD'\n        assert p.community == 'public'\n        assert p.cpu_coefficient == 1.5\n        assert p.cpu_threshold == 80\n        assert p.parent == '/Common/snmp_dca'\n        assert p.disk_coefficient == 2.0\n        assert p.disk_threshold == 90\n        assert p.interval == 10\n        assert p.memory_coefficient == 1.0\n        assert p.memory_threshold == 70\n        assert p.time_until_up == 0\n        assert p.timeout == 30\n        assert p.version == 'v1'\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create(self, *args):\n        set_module_args(dict(\n            name='foo',\n            agent_type='UCD',\n            community='public',\n            cpu_coefficient='1.5',\n            cpu_threshold='80',\n            parent='/Common/snmp_dca',\n            disk_coefficient='2.0',\n            disk_threshold='90',\n            memory_coefficient='1.0',\n            memory_threshold='70',\n            version='v1',\n            interval=20,\n            timeout=30,\n            time_until_up=60,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(side_effect=[False, True])\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    override methods specific type manager ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport pytest\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_monitor_snmp_dca import Parameters\n    from library.bigip_monitor_snmp_dca import ModuleManager\n    from library.bigip_monitor_snmp_dca import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_monitor_snmp_dca import Parameters\n        from ansible.modules.network.f5.bigip_monitor_snmp_dca import ModuleManager\n        from ansible.modules.network.f5.bigip_monitor_snmp_dca import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            agent_type='UCD',\n            community='public',\n            cpu_coefficient='1.5',\n            cpu_threshold='80',\n            parent='/Common/snmp_dca',\n            disk_coefficient='2.0',\n            disk_threshold='90',\n            interval=10,\n            memory_coefficient='1.0',\n            memory_threshold='70',\n            time_until_up=0,\n            timeout=30,\n            version='v1'\n        )\n\n        p = Parameters(params=args)\n        assert p.agent_type == 'UCD'\n        assert p.community == 'public'\n        assert p.cpu_coefficient == 1.5\n        assert p.cpu_threshold == 80\n        assert p.parent == '/Common/snmp_dca'\n        assert p.disk_coefficient == 2.0\n        assert p.disk_threshold == 90\n        assert p.interval == 10\n        assert p.memory_coefficient == 1.0\n        assert p.memory_threshold == 70\n        assert p.time_until_up == 0\n        assert p.timeout == 30\n        assert p.version == 'v1'\n\n    def test_api_parameters(self):\n        args = dict(\n            agentType='UCD',\n            community='public',\n            cpuCoefficient='1.5',\n            cpuThreshold='80',\n            defaultsFrom='/Common/snmp_dca',\n            diskCoefficient='2.0',\n            diskThreshold='90',\n            interval=10,\n            memoryCoefficient='1.0',\n            memoryThreshold='70',\n            timeUntilUp=0,\n            timeout=30,\n            apiRawValues={\n                \"userDefined asdasd\": \"{ foo }\",\n                \"userDefined bar\": \"tim rupp\",\n                \"user-defined baz-\": \"nia\",\n                \"userDefined userDefined\": \"23234\"\n            },\n            version='v1'\n        )\n\n        p = Parameters(params=args)\n        assert p.agent_type == 'UCD'\n        assert p.community == 'public'\n        assert p.cpu_coefficient == 1.5\n        assert p.cpu_threshold == 80\n        assert p.parent == '/Common/snmp_dca'\n        assert p.disk_coefficient == 2.0\n        assert p.disk_threshold == 90\n        assert p.interval == 10\n        assert p.memory_coefficient == 1.0\n        assert p.memory_threshold == 70\n        assert p.time_until_up == 0\n        assert p.timeout == 30\n        assert p.version == 'v1'\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create(self, *args):\n        set_module_args(dict(\n            name='foo',\n            agent_type='UCD',\n            community='public',\n            cpu_coefficient='1.5',\n            cpu_threshold='80',\n            parent='/Common/snmp_dca',\n            disk_coefficient='2.0',\n            disk_threshold='90',\n            memory_coefficient='1.0',\n            memory_threshold='70',\n            version='v1',\n            interval=20,\n            timeout=30,\n            time_until_up=60,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(side_effect=[False, True])\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_monitor_snmp_dca.py", "id": "1f991048b307a5ff9964aa3b616bc6b5", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_monitor_snmp_dca.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}