{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo.tests import common\nfrom odoo import fields\n\n\nclass TestPurchaseRequisition(common.TransactionCase):\n\n    def setUp(self):\n        super(TestPurchaseRequisition, self).setUp()\n\n        self.product_09_id = self.ref('product.product_product_9')\n        self.product_09_uom_id = self.ref('product.product_uom_unit')\n        self.product_13_id = self.ref('product.product_product_13')\n        self.res_partner_1_id = self.ref('base.res_partner_1')\n        self.res_company_id = self.ref('base.main_company')\n\n        self.ResUser = self.env['res.users']\n        \n        self.res_users_purchase_requisition_manager = self.ResUser.create({'company_id': self.res_company_id, 'name': 'Purchase requisition Manager', 'login': 'prm', 'email': 'requisition_manager@yourcompany.com'})\n        \n        self.res_users_purchase_requisition_manager.group_id = self.ref('purchase.group_purchase_manager')\n        \n        self.res_users_purchase_requisition_user = self.ResUser.create({'company_id': self.res_company_id, 'name': 'Purchase requisition User', 'login': 'pru', 'email': 'requisition_user@yourcompany.com'})\n        \n        self.res_users_purchase_requisition_user.group_id = self.ref('purchase.group_purchase_user')\n\n        \n        self.requisition1 = self.env['purchase.requisition'].create({'line_ids': [(0, 0, {'product_id': self.product_09_id, 'product_qty': 10.0, 'product_uom_id': self.product_09_uom_id})]})\n\n    def test_00_purchase_requisition_users(self):\n        self.assertTrue(self.res_users_purchase_requisition_manager, 'Manager Should be created')\n        self.assertTrue(self.res_users_purchase_requisition_user, 'User Should be created')\n\n    def test_01_cancel_purchase_requisition(self):\n        self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_cancel()\n        \n        self.assertEqual(self.requisition1.state, 'cancel', 'Requisition should be in cancelled state.')\n        \n        self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_draft()\n        \n        self.requisition1.sudo(self.res_users_purchase_requisition_user.id).copy()\n\n    def test_02_purchase_requisition(self):\n        date_planned = fields.Datetime.now()\n        warehouse = self.env['stock.warehouse'].browse(self.ref('stock.warehouse0'))\n        product = self.env['product.product'].browse(self.product_13_id)\n        product.write({'route_ids': [(4, self.ref('purchase.route_warehouse0_buy'))]})\n        self.env['procurement.group'].run(product, 14, self.env['product.uom'].browse(self.ref('product.product_uom_unit')), warehouse.lot_stock_id, '/', '/',\n                                          {\n                                            'warehouse_id': warehouse,\n                                            'date_planned': date_planned,\n                                          })\n\n        \n        line = self.env['purchase.requisition.line'].search([('product_id', '=', self.product_13_id), ('product_qty', '=', 14.0)])\n        requisition = line[0].requisition_id\n        self.assertEqual(requisition.date_end, date_planned, \"End date does not correspond.\")\n        self.assertEqual(len(requisition.line_ids), 1, \"Requisition Lines should be one.\")\n        self.assertEqual(line.product_uom_id.id, self.ref('product.product_uom_unit'), \"UOM is not correspond.\")\n\n        \n        \n        self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_in_progress()\n        self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_open()\n\n        \n        PurchaseOrder = self.env['purchase.order']\n        purchase_order = PurchaseOrder.new({'partner_id': self.res_partner_1_id, 'requisition_id': self.requisition1.id})\n        purchase_order._onchange_requisition_id()\n        po_dict = purchase_order._convert_to_write({name: purchase_order[name] for name in purchase_order._cache})\n        self.po_requisition = PurchaseOrder.create(po_dict)\n        self.assertEqual(len(self.po_requisition.order_line), 1, 'Purchase order should have one line')\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     create user  purchase requisition manager     added groups purchase requisition manager     create user  purchase requisition user     added groups purchase requisition user     in order test process purchase requisition  create requisition    check requisition cancelled     i reset requisition  new      i duplicate requisition     check requisition details created run procurement     give access rights purchase requisition user open requisition    set tender state choose tendering line     vendor send one rfq i create rfq agreement  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.tests import common\nfrom odoo import fields\n\n\nclass TestPurchaseRequisition(common.TransactionCase):\n\n    def setUp(self):\n        super(TestPurchaseRequisition, self).setUp()\n\n        self.product_09_id = self.ref('product.product_product_9')\n        self.product_09_uom_id = self.ref('product.product_uom_unit')\n        self.product_13_id = self.ref('product.product_product_13')\n        self.res_partner_1_id = self.ref('base.res_partner_1')\n        self.res_company_id = self.ref('base.main_company')\n\n        self.ResUser = self.env['res.users']\n        # Create a user as 'Purchase Requisition Manager'\n        self.res_users_purchase_requisition_manager = self.ResUser.create({'company_id': self.res_company_id, 'name': 'Purchase requisition Manager', 'login': 'prm', 'email': 'requisition_manager@yourcompany.com'})\n        # Added groups for Purchase Requisition Manager.\n        self.res_users_purchase_requisition_manager.group_id = self.ref('purchase.group_purchase_manager')\n        # Create a user as 'Purchase Requisition User'\n        self.res_users_purchase_requisition_user = self.ResUser.create({'company_id': self.res_company_id, 'name': 'Purchase requisition User', 'login': 'pru', 'email': 'requisition_user@yourcompany.com'})\n        # Added groups for Purchase Requisition User.\n        self.res_users_purchase_requisition_user.group_id = self.ref('purchase.group_purchase_user')\n\n        # In order to test process of the purchase requisition ,create requisition\n        self.requisition1 = self.env['purchase.requisition'].create({'line_ids': [(0, 0, {'product_id': self.product_09_id, 'product_qty': 10.0, 'product_uom_id': self.product_09_uom_id})]})\n\n    def test_00_purchase_requisition_users(self):\n        self.assertTrue(self.res_users_purchase_requisition_manager, 'Manager Should be created')\n        self.assertTrue(self.res_users_purchase_requisition_user, 'User Should be created')\n\n    def test_01_cancel_purchase_requisition(self):\n        self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_cancel()\n        # Check requisition after cancelled.\n        self.assertEqual(self.requisition1.state, 'cancel', 'Requisition should be in cancelled state.')\n        # I reset requisition as \"New\".\n        self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_draft()\n        # I duplicate requisition.\n        self.requisition1.sudo(self.res_users_purchase_requisition_user.id).copy()\n\n    def test_02_purchase_requisition(self):\n        date_planned = fields.Datetime.now()\n        warehouse = self.env['stock.warehouse'].browse(self.ref('stock.warehouse0'))\n        product = self.env['product.product'].browse(self.product_13_id)\n        product.write({'route_ids': [(4, self.ref('purchase.route_warehouse0_buy'))]})\n        self.env['procurement.group'].run(product, 14, self.env['product.uom'].browse(self.ref('product.product_uom_unit')), warehouse.lot_stock_id, '/', '/',\n                                          {\n                                            'warehouse_id': warehouse,\n                                            'date_planned': date_planned,\n                                          })\n\n        # Check requisition details which created after run procurement.\n        line = self.env['purchase.requisition.line'].search([('product_id', '=', self.product_13_id), ('product_qty', '=', 14.0)])\n        requisition = line[0].requisition_id\n        self.assertEqual(requisition.date_end, date_planned, \"End date does not correspond.\")\n        self.assertEqual(len(requisition.line_ids), 1, \"Requisition Lines should be one.\")\n        self.assertEqual(line.product_uom_id.id, self.ref('product.product_uom_unit'), \"UOM is not correspond.\")\n\n        # Give access rights of Purchase Requisition User to open requisition\n        # Set tender state to choose tendering line.\n        self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_in_progress()\n        self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_open()\n\n        # Vendor send one RFQ so I create a RfQ of that agreement.\n        PurchaseOrder = self.env['purchase.order']\n        purchase_order = PurchaseOrder.new({'partner_id': self.res_partner_1_id, 'requisition_id': self.requisition1.id})\n        purchase_order._onchange_requisition_id()\n        po_dict = purchase_order._convert_to_write({name: purchase_order[name] for name in purchase_order._cache})\n        self.po_requisition = PurchaseOrder.create(po_dict)\n        self.assertEqual(len(self.po_requisition.order_line), 1, 'Purchase order should have one line')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_purchase_requisition.py", "id": "272030c5daff9b5da745e2c14888e6d3", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/purchase_requisition/tests/test_purchase_requisition.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}