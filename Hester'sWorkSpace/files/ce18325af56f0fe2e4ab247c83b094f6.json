{"author": "tgalal", "code": "from yowsup.structs import ProtocolEntity, ProtocolTreeNode\nfrom .message_media_downloadable import DownloadableMediaMessageProtocolEntity\nfrom .builder_message_media_downloadable import DownloadableMediaMessageBuilder\nfrom yowsup.layers.protocol_messages.proto.wa_pb2 import ImageMessage\nfrom yowsup.common.tools import ImageTools\n\nclass ImageDownloadableMediaMessageProtocolEntity(DownloadableMediaMessageProtocolEntity):\n    '''\n    <message t=\"{{TIME_STAMP}}\" from=\"{{CONTACT_JID}}\"\n        offline=\"{{OFFLINE}}\" type=\"text\" id=\"{{MESSAGE_ID}}\" notify=\"{{NOTIFY_NAME}}\">\n        <media type=\"{{DOWNLOADABLE_MEDIA_TYPE: (image | audio | video)}}\"\n            mimetype=\"{{MIME_TYPE}}\"\n            filehash=\"{{FILE_HASH}}\"\n            url=\"{{DOWNLOAD_URL}}\"\n            ip=\"{{IP}}\"\n            size=\"{{MEDIA SIZE}}\"\n            file=\"{{FILENAME}}\"\n\n\n            encoding=\"{{ENCODING}}\"\n            height=\"{{IMAGE_HEIGHT}}\"\n            width=\"{{IMAGE_WIDTH}}\"\n\n            > {{THUMBNAIL_RAWDATA (JPEG?)}}\n        </media>\n    </message>\n    '''\n    def __init__(self,\n            mimeType, fileHash, url, ip, size, fileName,\n            encoding, width, height, caption = None, mediaKey = None,\n            _id = None, _from = None, to = None, notify = None, timestamp = None,\n            participant = None, preview = None, offline = None, retry = None):\n\n        super(ImageDownloadableMediaMessageProtocolEntity, self).__init__(\"image\",\n            mimeType, fileHash, url, ip, size, fileName, mediaKey,\n            _id, _from, to, notify, timestamp, participant, preview, offline, retry)\n        self.setImageProps(encoding, width, height, caption)\n\n    def __str__(self):\n        out  = super(ImageDownloadableMediaMessageProtocolEntity, self).__str__()\n        out += \"Encoding: %s\\n\" % self.encoding\n        out += \"Width: %s\\n\" % self.width\n        out += \"Height: %s\\n\" % self.height\n        if self.caption:\n            out += \"Caption: %s\\n\" % self.caption\n        return out\n\n    def setImageProps(self, encoding, width, height, caption):\n        self.encoding   = encoding\n        self.width      = int(width)\n        self.height     = int(height)\n        self.caption    = caption\n\n    def getCaption(self):\n        return self.caption\n\n    def toProtocolTreeNode(self):\n        node = super(ImageDownloadableMediaMessageProtocolEntity, self).toProtocolTreeNode()\n        mediaNode = node.getChild(\"media\")\n\n        mediaNode.setAttribute(\"encoding\",  self.encoding)\n        mediaNode.setAttribute(\"width\",     str(self.width))\n        mediaNode.setAttribute(\"height\",    str(self.height))\n        if self.caption:\n            mediaNode.setAttribute(\"caption\", self.caption)\n\n        return node\n\n    def toProtobufMessage(self):\n        image_message = ImageMessage()\n        image_message.url = self.url\n        image_message.width = self.width\n        image_message.height = self.height\n        image_message.mime_type = self.mimeType\n        image_message.file_sha256 = self.fileHash\n        image_message.file_length = self.size\n        image_message.caption = self.caption\n        image_message.jpeg_thumbnail = self.preview\n        image_message.media_key = self.mediaKey\n\n        return image_message\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        entity = DownloadableMediaMessageProtocolEntity.fromProtocolTreeNode(node)\n        entity.__class__ = ImageDownloadableMediaMessageProtocolEntity\n        mediaNode = node.getChild(\"media\")\n        entity.setImageProps(\n            mediaNode.getAttributeValue(\"encoding\"),\n            mediaNode.getAttributeValue(\"width\"),\n            mediaNode.getAttributeValue(\"height\"),\n            mediaNode.getAttributeValue(\"caption\"),\n        )\n        return entity\n\n\n    @staticmethod\n    def getBuilder(jid, filepath):\n        return DownloadableMediaMessageBuilder(ImageDownloadableMediaMessageProtocolEntity, jid, filepath)\n\n    @staticmethod\n    def fromBuilder(builder):\n        builder.getOrSet(\"preview\", lambda: ImageTools.generatePreviewFromImage(builder.getOriginalFilepath()))\n        filepath = builder.getFilepath()\n        caption = builder.get(\"caption\")\n        dimensions = builder.get(\"dimensions\",  ImageTools.getImageDimensions(builder.getOriginalFilepath()))\n        assert dimensions, \"Could not determine image dimensions\"\n        width, height = dimensions\n\n        entity = DownloadableMediaMessageProtocolEntity.fromBuilder(builder)\n        entity.__class__ = builder.cls\n        entity.setImageProps(\"raw\", width, height, caption)\n        return entity\n\n    @staticmethod\n    def fromFilePath(path, url, ip, to, mimeType = None, caption = None, dimensions = None):\n        builder = ImageDownloadableMediaMessageProtocolEntity.getBuilder(to, path)\n        builder.set(\"url\", url)\n        builder.set(\"ip\", ip)\n        builder.set(\"caption\", caption)\n        builder.set(\"mimetype\", mimeType)\n        builder.set(\"dimensions\", dimensions)\n        return ImageDownloadableMediaMessageProtocolEntity.fromBuilder(builder)\n", "comments": "         message    time stamp       contact jid            offline    offline    type  text  id    message id    notify    notify name              media type    downloadable media type  (image   audio   video)                mimetype    mime type                filehash    file hash                url    download url                ip    ip                size    media size                file    filename                  encoding    encoding                height    image height                width    image width                     thumbnail rawdata (jpeg )             media        message          ", "content": "from yowsup.structs import ProtocolEntity, ProtocolTreeNode\nfrom .message_media_downloadable import DownloadableMediaMessageProtocolEntity\nfrom .builder_message_media_downloadable import DownloadableMediaMessageBuilder\nfrom yowsup.layers.protocol_messages.proto.wa_pb2 import ImageMessage\nfrom yowsup.common.tools import ImageTools\n\nclass ImageDownloadableMediaMessageProtocolEntity(DownloadableMediaMessageProtocolEntity):\n    '''\n    <message t=\"{{TIME_STAMP}}\" from=\"{{CONTACT_JID}}\"\n        offline=\"{{OFFLINE}}\" type=\"text\" id=\"{{MESSAGE_ID}}\" notify=\"{{NOTIFY_NAME}}\">\n        <media type=\"{{DOWNLOADABLE_MEDIA_TYPE: (image | audio | video)}}\"\n            mimetype=\"{{MIME_TYPE}}\"\n            filehash=\"{{FILE_HASH}}\"\n            url=\"{{DOWNLOAD_URL}}\"\n            ip=\"{{IP}}\"\n            size=\"{{MEDIA SIZE}}\"\n            file=\"{{FILENAME}}\"\n\n\n            encoding=\"{{ENCODING}}\"\n            height=\"{{IMAGE_HEIGHT}}\"\n            width=\"{{IMAGE_WIDTH}}\"\n\n            > {{THUMBNAIL_RAWDATA (JPEG?)}}\n        </media>\n    </message>\n    '''\n    def __init__(self,\n            mimeType, fileHash, url, ip, size, fileName,\n            encoding, width, height, caption = None, mediaKey = None,\n            _id = None, _from = None, to = None, notify = None, timestamp = None,\n            participant = None, preview = None, offline = None, retry = None):\n\n        super(ImageDownloadableMediaMessageProtocolEntity, self).__init__(\"image\",\n            mimeType, fileHash, url, ip, size, fileName, mediaKey,\n            _id, _from, to, notify, timestamp, participant, preview, offline, retry)\n        self.setImageProps(encoding, width, height, caption)\n\n    def __str__(self):\n        out  = super(ImageDownloadableMediaMessageProtocolEntity, self).__str__()\n        out += \"Encoding: %s\\n\" % self.encoding\n        out += \"Width: %s\\n\" % self.width\n        out += \"Height: %s\\n\" % self.height\n        if self.caption:\n            out += \"Caption: %s\\n\" % self.caption\n        return out\n\n    def setImageProps(self, encoding, width, height, caption):\n        self.encoding   = encoding\n        self.width      = int(width)\n        self.height     = int(height)\n        self.caption    = caption\n\n    def getCaption(self):\n        return self.caption\n\n    def toProtocolTreeNode(self):\n        node = super(ImageDownloadableMediaMessageProtocolEntity, self).toProtocolTreeNode()\n        mediaNode = node.getChild(\"media\")\n\n        mediaNode.setAttribute(\"encoding\",  self.encoding)\n        mediaNode.setAttribute(\"width\",     str(self.width))\n        mediaNode.setAttribute(\"height\",    str(self.height))\n        if self.caption:\n            mediaNode.setAttribute(\"caption\", self.caption)\n\n        return node\n\n    def toProtobufMessage(self):\n        image_message = ImageMessage()\n        image_message.url = self.url\n        image_message.width = self.width\n        image_message.height = self.height\n        image_message.mime_type = self.mimeType\n        image_message.file_sha256 = self.fileHash\n        image_message.file_length = self.size\n        image_message.caption = self.caption\n        image_message.jpeg_thumbnail = self.preview\n        image_message.media_key = self.mediaKey\n\n        return image_message\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        entity = DownloadableMediaMessageProtocolEntity.fromProtocolTreeNode(node)\n        entity.__class__ = ImageDownloadableMediaMessageProtocolEntity\n        mediaNode = node.getChild(\"media\")\n        entity.setImageProps(\n            mediaNode.getAttributeValue(\"encoding\"),\n            mediaNode.getAttributeValue(\"width\"),\n            mediaNode.getAttributeValue(\"height\"),\n            mediaNode.getAttributeValue(\"caption\"),\n        )\n        return entity\n\n\n    @staticmethod\n    def getBuilder(jid, filepath):\n        return DownloadableMediaMessageBuilder(ImageDownloadableMediaMessageProtocolEntity, jid, filepath)\n\n    @staticmethod\n    def fromBuilder(builder):\n        builder.getOrSet(\"preview\", lambda: ImageTools.generatePreviewFromImage(builder.getOriginalFilepath()))\n        filepath = builder.getFilepath()\n        caption = builder.get(\"caption\")\n        dimensions = builder.get(\"dimensions\",  ImageTools.getImageDimensions(builder.getOriginalFilepath()))\n        assert dimensions, \"Could not determine image dimensions\"\n        width, height = dimensions\n\n        entity = DownloadableMediaMessageProtocolEntity.fromBuilder(builder)\n        entity.__class__ = builder.cls\n        entity.setImageProps(\"raw\", width, height, caption)\n        return entity\n\n    @staticmethod\n    def fromFilePath(path, url, ip, to, mimeType = None, caption = None, dimensions = None):\n        builder = ImageDownloadableMediaMessageProtocolEntity.getBuilder(to, path)\n        builder.set(\"url\", url)\n        builder.set(\"ip\", ip)\n        builder.set(\"caption\", caption)\n        builder.set(\"mimetype\", mimeType)\n        builder.set(\"dimensions\", dimensions)\n        return ImageDownloadableMediaMessageProtocolEntity.fromBuilder(builder)\n", "description": "The python WhatsApp library", "file_name": "message_media_downloadable_image.py", "id": "ce18325af56f0fe2e4ab247c83b094f6", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_media/protocolentities/message_media_downloadable_image.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}