{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    js_to_json,\n    parse_duration,\n    unescapeHTML,\n)\n\n\nclass DRBonanzaIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?dr\\.dk/bonanza/[^/]+/\\d+/[^/]+/(?P<id>\\d+)/(?P<display_id>[^/?\n    _TEST = {\n        'url': 'http://www.dr.dk/bonanza/serie/154/matador/40312/matador---0824-komme-fremmede-',\n        'info_dict': {\n            'id': '40312',\n            'display_id': 'matador---0824-komme-fremmede-',\n            'ext': 'mp4',\n            'title': 'MATADOR - 08:24. \"Komme fremmede\".',\n            'description': 'md5:77b4c1ac4d4c1b9d610ab4395212ff84',\n            'thumbnail': r're:^https?://.*\\.(?:gif|jpg)$',\n            'duration': 4613,\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._parse_html5_media_entries(\n            url, webpage, display_id, m3u8_id='hls',\n            m3u8_entry_protocol='m3u8_native')[0]\n        self._sort_formats(info['formats'])\n\n        asset = self._parse_json(\n            self._search_regex(\n                r'(?s)currentAsset\\s*=\\s*({.+?})\\s*</script', webpage, 'asset'),\n            display_id, transform_source=js_to_json)\n\n        title = unescapeHTML(asset['AssetTitle']).strip()\n\n        def extract(field):\n            return self._search_regex(\n                r'<div[^>]+>\\s*<p>%s:<p>\\s*</div>\\s*<div[^>]+>\\s*<p>([^<]+)</p>' % field,\n                webpage, field, default=None)\n\n        info.update({\n            'id': asset.get('AssetId') or video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': extract('Programinfo'),\n            'duration': parse_duration(extract('Tid')),\n            'thumbnail': asset.get('AssetImageUrl'),\n        })\n        return info\n", "comments": "#&]+)'\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    js_to_json,\n    parse_duration,\n    unescapeHTML,\n)\n\n\nclass DRBonanzaIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?dr\\.dk/bonanza/[^/]+/\\d+/[^/]+/(?P<id>\\d+)/(?P<display_id>[^/?#&]+)'\n    _TEST = {\n        'url': 'http://www.dr.dk/bonanza/serie/154/matador/40312/matador---0824-komme-fremmede-',\n        'info_dict': {\n            'id': '40312',\n            'display_id': 'matador---0824-komme-fremmede-',\n            'ext': 'mp4',\n            'title': 'MATADOR - 08:24. \"Komme fremmede\".',\n            'description': 'md5:77b4c1ac4d4c1b9d610ab4395212ff84',\n            'thumbnail': r're:^https?://.*\\.(?:gif|jpg)$',\n            'duration': 4613,\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._parse_html5_media_entries(\n            url, webpage, display_id, m3u8_id='hls',\n            m3u8_entry_protocol='m3u8_native')[0]\n        self._sort_formats(info['formats'])\n\n        asset = self._parse_json(\n            self._search_regex(\n                r'(?s)currentAsset\\s*=\\s*({.+?})\\s*</script', webpage, 'asset'),\n            display_id, transform_source=js_to_json)\n\n        title = unescapeHTML(asset['AssetTitle']).strip()\n\n        def extract(field):\n            return self._search_regex(\n                r'<div[^>]+>\\s*<p>%s:<p>\\s*</div>\\s*<div[^>]+>\\s*<p>([^<]+)</p>' % field,\n                webpage, field, default=None)\n\n        info.update({\n            'id': asset.get('AssetId') or video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': extract('Programinfo'),\n            'duration': parse_duration(extract('Tid')),\n            'thumbnail': asset.get('AssetImageUrl'),\n        })\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "drbonanza.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/drbonanza.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}