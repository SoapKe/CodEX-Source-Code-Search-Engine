{"author": "tgalal", "code": "from yowsup.structs import ProtocolTreeNode\nfrom .iq_sync import SyncIqProtocolEntity\n\nclass ResultSyncIqProtocolEntity(SyncIqProtocolEntity):\n    '''\n    <iq type=\"result\" from=\"491632092557@s.whatsapp.net\" id=\"1417046561-4\">\n    <sync index=\"0\" wait=\"166952\" last=\"true\" version=\"1417046548593182\" sid=\"1.30615237617e+17\">\n        <in>\n            <user jid=\"{{jid}}>{{number}}</user>\n        </in>\n        <out>\n            <user jid=\"{{jid}}\">\n            {{number}}\n        </user>\n        </out>\n        <invalid>\n            <user>\n                abcdefgh\n            </user>\n        </invalid>\n\n    </sync>\n    </iq>\n    '''\n\n    def __init__(self,_id, sid, index, last, version, inNumbers, outNumbers, invalidNumbers, wait = None):\n        super(ResultSyncIqProtocolEntity, self).__init__(\"result\", _id, sid, index, last)\n        self.setResultSyncProps(version, inNumbers, outNumbers, invalidNumbers, wait)\n\n    def setResultSyncProps(self, version, inNumbers, outNumbers, invalidNumbers, wait = None):\n        assert type(inNumbers) is dict, \"in numbers must be a dict {number -> jid}\"\n        assert type(outNumbers) is dict, \"out numbers must be a dict {number -> jid}\"\n        assert type(invalidNumbers) is list, \"invalid numbers must be a list\"\n\n        self.inNumbers = inNumbers\n        self.outNumbers = outNumbers\n        self.invalidNumbers = invalidNumbers\n        self.wait = int(wait) if wait is not None else None\n        self.version = version\n\n\n    def __str__(self):\n        out  = super(SyncIqProtocolEntity, self).__str__()\n        if self.wait is not None:\n            out += \"Wait: %s\\n\" % self.wait\n        out += \"Version: %s\\n\" % self.version\n        out += \"In Numbers: %s\\n\" % (\",\".join(self.inNumbers))\n        out += \"Out Numbers: %s\\n\" % (\",\".join(self.outNumbers))\n        out += \"Invalid Numbers: %s\\n\" % (\",\".join(self.invalidNumbers))\n\n        return out\n\n    def toProtocolTreeNode(self):\n        \n        outUsers = [ProtocolTreeNode(\"user\", {\"jid\": jid}, None, number) for number, jid in self.outNumbers.items()]\n        inUsers = [ProtocolTreeNode(\"user\", {\"jid\": jid}, None, number) for number, jid in self.inNumbers.items()]\n        invalidUsers = [ProtocolTreeNode(\"user\", {}, None, number) for number in self.invalidNumbers]\n\n        node = super(ResultSyncIqProtocolEntity, self).toProtocolTreeNode()\n        syncNode = node.getChild(\"sync\")\n        syncNode.setAttribute(\"version\", self.version)\n\n        if self.wait is not None:\n            syncNode.setAttribute(\"wait\", str(self.wait))\n\n        if len(outUsers):\n            syncNode.addChild(ProtocolTreeNode(\"out\", children = outUsers))\n\n        if len(inUsers):\n            syncNode.addChild(ProtocolTreeNode(\"in\", children = inUsers))\n\n        if len(invalidUsers):\n            syncNode.addChildren([ProtocolTreeNode(\"invalid\", children = invalidUsers)])\n\n        return node\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        syncNode         = node.getChild(\"sync\")\n        outNode          = syncNode.getChild(\"out\")\n        inNode           = syncNode.getChild(\"in\")\n        invalidNode      = syncNode.getChild(\"invalid\")\n        outUsers         = outNode.getAllChildren() if outNode else []\n        inUsers          = inNode.getAllChildren()  if inNode else []\n        invalidUsers     = [inode.data for inode in invalidNode.getAllChildren()] if invalidNode else []\n\n        outUsersDict = {}\n        for u in outUsers:\n            outUsersDict[u.data] = u.getAttributeValue(\"jid\")\n\n        inUsersDict = {}\n        for u in inUsers:\n            inUsersDict[u.data] = u.getAttributeValue(\"jid\")\n\n        entity           = SyncIqProtocolEntity.fromProtocolTreeNode(node)\n        entity.__class__ = ResultSyncIqProtocolEntity\n\n        entity.setResultSyncProps(syncNode.getAttributeValue(\"version\"),\n            inUsersDict,\n            outUsersDict,\n            invalidUsers,\n            syncNode.getAttributeValue(\"wait\")\n            )\n   \n        return entity\n", "comments": "         iq type  result   491632092557 whatsapp net  id  1417046561 4        sync index  0  wait  166952  last  true  version  1417046548593182  sid  1 30615237617e 17                          user jid    jid     number    user                                    user jid    jid                   number             user                      invalid               user                  abcdefgh               user            invalid         sync        iq          ", "content": "from yowsup.structs import ProtocolTreeNode\nfrom .iq_sync import SyncIqProtocolEntity\n\nclass ResultSyncIqProtocolEntity(SyncIqProtocolEntity):\n    '''\n    <iq type=\"result\" from=\"491632092557@s.whatsapp.net\" id=\"1417046561-4\">\n    <sync index=\"0\" wait=\"166952\" last=\"true\" version=\"1417046548593182\" sid=\"1.30615237617e+17\">\n        <in>\n            <user jid=\"{{jid}}>{{number}}</user>\n        </in>\n        <out>\n            <user jid=\"{{jid}}\">\n            {{number}}\n        </user>\n        </out>\n        <invalid>\n            <user>\n                abcdefgh\n            </user>\n        </invalid>\n\n    </sync>\n    </iq>\n    '''\n\n    def __init__(self,_id, sid, index, last, version, inNumbers, outNumbers, invalidNumbers, wait = None):\n        super(ResultSyncIqProtocolEntity, self).__init__(\"result\", _id, sid, index, last)\n        self.setResultSyncProps(version, inNumbers, outNumbers, invalidNumbers, wait)\n\n    def setResultSyncProps(self, version, inNumbers, outNumbers, invalidNumbers, wait = None):\n        assert type(inNumbers) is dict, \"in numbers must be a dict {number -> jid}\"\n        assert type(outNumbers) is dict, \"out numbers must be a dict {number -> jid}\"\n        assert type(invalidNumbers) is list, \"invalid numbers must be a list\"\n\n        self.inNumbers = inNumbers\n        self.outNumbers = outNumbers\n        self.invalidNumbers = invalidNumbers\n        self.wait = int(wait) if wait is not None else None\n        self.version = version\n\n\n    def __str__(self):\n        out  = super(SyncIqProtocolEntity, self).__str__()\n        if self.wait is not None:\n            out += \"Wait: %s\\n\" % self.wait\n        out += \"Version: %s\\n\" % self.version\n        out += \"In Numbers: %s\\n\" % (\",\".join(self.inNumbers))\n        out += \"Out Numbers: %s\\n\" % (\",\".join(self.outNumbers))\n        out += \"Invalid Numbers: %s\\n\" % (\",\".join(self.invalidNumbers))\n\n        return out\n\n    def toProtocolTreeNode(self):\n        \n        outUsers = [ProtocolTreeNode(\"user\", {\"jid\": jid}, None, number) for number, jid in self.outNumbers.items()]\n        inUsers = [ProtocolTreeNode(\"user\", {\"jid\": jid}, None, number) for number, jid in self.inNumbers.items()]\n        invalidUsers = [ProtocolTreeNode(\"user\", {}, None, number) for number in self.invalidNumbers]\n\n        node = super(ResultSyncIqProtocolEntity, self).toProtocolTreeNode()\n        syncNode = node.getChild(\"sync\")\n        syncNode.setAttribute(\"version\", self.version)\n\n        if self.wait is not None:\n            syncNode.setAttribute(\"wait\", str(self.wait))\n\n        if len(outUsers):\n            syncNode.addChild(ProtocolTreeNode(\"out\", children = outUsers))\n\n        if len(inUsers):\n            syncNode.addChild(ProtocolTreeNode(\"in\", children = inUsers))\n\n        if len(invalidUsers):\n            syncNode.addChildren([ProtocolTreeNode(\"invalid\", children = invalidUsers)])\n\n        return node\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        syncNode         = node.getChild(\"sync\")\n        outNode          = syncNode.getChild(\"out\")\n        inNode           = syncNode.getChild(\"in\")\n        invalidNode      = syncNode.getChild(\"invalid\")\n        outUsers         = outNode.getAllChildren() if outNode else []\n        inUsers          = inNode.getAllChildren()  if inNode else []\n        invalidUsers     = [inode.data for inode in invalidNode.getAllChildren()] if invalidNode else []\n\n        outUsersDict = {}\n        for u in outUsers:\n            outUsersDict[u.data] = u.getAttributeValue(\"jid\")\n\n        inUsersDict = {}\n        for u in inUsers:\n            inUsersDict[u.data] = u.getAttributeValue(\"jid\")\n\n        entity           = SyncIqProtocolEntity.fromProtocolTreeNode(node)\n        entity.__class__ = ResultSyncIqProtocolEntity\n\n        entity.setResultSyncProps(syncNode.getAttributeValue(\"version\"),\n            inUsersDict,\n            outUsersDict,\n            invalidUsers,\n            syncNode.getAttributeValue(\"wait\")\n            )\n   \n        return entity\n", "description": "The python WhatsApp library", "file_name": "iq_sync_result.py", "id": "65e15ad9c5fb15267712a8b3e9619663", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_contacts/protocolentities/iq_sync_result.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}