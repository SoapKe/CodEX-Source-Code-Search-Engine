{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2017, Bruno Calogero <brunocalogero@hotmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_access_port_to_interface_policy_leaf_profile\nshort_description: Manage Fabric interface policy leaf profile interface selectors (infra:HPortS, infra:RsAccBaseGrp, infra:PortBlk)\ndescription:\n- Manage Fabric interface policy leaf profile interface selectors on Cisco ACI fabrics.\nnotes:\n- More information about the internal APIC classes B(infra:HPortS), B(infra:RsAccBaseGrp) and B(infra:PortBlk) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/)\nauthor:\n- Bruno Calogero (@brunocalogero)\nversion_added: '2.5'\noptions:\n  leaf_interface_profile:\n    description:\n    - The name of the Fabric access policy leaf interface profile.\n    required: yes\n    aliases: [ leaf_interface_profile_name ]\n  access_port_selector:\n    description:\n    -  The name of the Fabric access policy leaf interface profile access port selector.\n    required: yes\n    aliases: [ name, access_port_selector_name ]\n  description:\n    description:\n    - The description to assign to the C(access_port_selector)\n  leaf_port_blk:\n    description:\n    - The name of the Fabric access policy leaf interface profile access port block.\n    required: yes\n    aliases: [ leaf_port_blk_name ]\n  leaf_port_blk_description:\n    description:\n    - The description to assign to the C(leaf_port_blk)\n    required: no\n  from:\n    description:\n    - The beggining (from range) of the port range block for the leaf access port block.\n    required: yes\n    aliases: [ fromPort, from_port_range ]\n  to:\n    description:\n    - The end (to range) of the port range block for the leaf access port block.\n    required: yes\n    aliases: [ toPort, to_port_range ]\n  policy_group:\n    description:\n    - The name of the fabric access policy group to be associated with the leaf interface profile interface selector.\n    aliases: [ policy_group_name ]\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Associate an Interface Access Port Selector to an Interface Policy Leaf Profile with a Policy Group\n  aci_access_port_to_interface_policy_leaf_profile:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    leaf_interface_profile: leafintprfname\n    access_port_selector: accessportselectorname\n    leaf_port_blk: leafportblkname\n    from: 13\n    to: 16\n    policy_group: policygroupname\n    state: present\n\n- name: Associate an interface access port selector to an Interface Policy Leaf Profile (w/o policy group) (check if this works)\n  aci_access_port_to_interface_policy_leaf_profile:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    leaf_interface_profile: leafintprfname\n    access_port_selector: accessportselectorname\n    leaf_port_blk: leafportblkname\n    from: 13\n    to: 16\n    state: present\n\n- name: Remove an interface access port selector associated with an Interface Policy Leaf Profile\n  aci_access_port_to_interface_policy_leaf_profile:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    leaf_interface_profile: leafintprfname\n    access_port_selector: accessportselectorname\n    state: absent\n\n- name: Query Specific access_port_selector under given leaf_interface_profile\n  aci_access_port_to_interface_policy_leaf_profile:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    leaf_interface_profile: leafintprfname\n    access_port_selector: accessportselectorname\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update({\n        'leaf_interface_profile': dict(type='str', aliases=['leaf_interface_profile_name']),  \n        'access_port_selector': dict(type='str', aliases=['name', 'access_port_selector_name']),  \n        'description': dict(typ='str'),\n        'leaf_port_blk': dict(type='str', aliases=['leaf_port_blk_name']),\n        'leaf_port_blk_description': dict(type='str'),\n        'from': dict(type='str', aliases=['fromPort', 'from_port_range']),\n        'to': dict(type='str', aliases=['toPort', 'to_port_range']),\n        'policy_group': dict(type='str', aliases=['policy_group_name']),\n        'state': dict(type='str', default='present', choices=['absent', 'present', 'query']),\n    })\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['leaf_interface_profile', 'access_port_selector']],\n            ['state', 'present', ['leaf_interface_profile', 'access_port_selector']],\n        ],\n    )\n\n    leaf_interface_profile = module.params['leaf_interface_profile']\n    access_port_selector = module.params['access_port_selector']\n    description = module.params['description']\n    leaf_port_blk = module.params['leaf_port_blk']\n    leaf_port_blk_description = module.params['leaf_port_blk_description']\n    from_ = module.params['from']\n    to_ = module.params['to']\n    policy_group = module.params['policy_group']\n    state = module.params['state']\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class='infraAccPortP',\n            aci_rn='infra/accportprof-{0}'.format(leaf_interface_profile),\n            filter_target='eq(infraAccPortP.name, \"{0}\")'.format(leaf_interface_profile),\n            module_object=leaf_interface_profile\n        ),\n        subclass_1=dict(\n            aci_class='infraHPortS',\n            \n            aci_rn='hports-{0}-typ-range'.format(access_port_selector),\n            filter_target='eq(infraHPortS.name, \"{0}\")'.format(access_port_selector),\n            module_object=access_port_selector,\n        ),\n        child_classes=['infraPortBlk', 'infraRsAccBaseGrp']\n    )\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='infraHPortS',\n            class_config=dict(\n                descr=description,\n                name=access_port_selector,\n            ),\n            child_configs=[\n                dict(\n                    infraPortBlk=dict(\n                        attributes=dict(\n                            descr=leaf_port_blk_description,\n                            name=leaf_port_blk,\n                            fromPort=from_,\n                            toPort=to_,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsAccBaseGrp=dict(\n                        attributes=dict(\n                            tDn='uni/infra/funcprof/accportgrp-{0}'.format(policy_group),\n                        ),\n                    ),\n                ),\n            ],\n        )\n\n        aci.get_diff(aci_class='infraHPortS')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  aci access port interface policy leaf profile short description  manage fabric interface policy leaf profile interface selectors (infra hports  infra rsaccbasegrp  infra portblk) description    manage fabric interface policy leaf profile interface selectors cisco aci fabrics  notes    more information internal apic classes b(infra hports)  b(infra rsaccbasegrp) b(infra portblk)   l(the apic management information model reference https   developer cisco com docs apic mim ref ) author    bruno calogero ( brunocalogero) version added   2 5  options    leaf interface profile      description        the name fabric access policy leaf interface profile      required  yes     aliases    leaf interface profile name     access port selector      description         the name fabric access policy leaf interface profile access port selector      required  yes     aliases    name  access port selector name     description      description        the description assign c(access port selector)   leaf port blk      description        the name fabric access policy leaf interface profile access port block      required  yes     aliases    leaf port blk name     leaf port blk description      description        the description assign c(leaf port blk)     required         description        the beggining (from range) port range block leaf access port block      required  yes     aliases    fromport  port range          description        the end (to range) port range block leaf access port block      required  yes     aliases    toport  port range     policy group      description        the name fabric access policy group associated leaf interface profile interface selector      aliases    policy group name     state      description        use c(present) c(absent) adding removing        use c(query) listing object multiple objects      choices    absent  present  query       default  present extends documentation fragment  aci      examples   r      name  associate interface access port selector interface policy leaf profile policy group   aci access port interface policy leaf profile      host  apic     username  admin     password  somesecretpassword     leaf interface profile  leafintprfname     access port selector  accessportselectorname     leaf port blk  leafportblkname      13      16     policy group  policygroupname     state  present    name  associate interface access port selector interface policy leaf profile (w policy group) (check works)   aci access port interface policy leaf profile      host  apic     username  admin     password  somesecretpassword     leaf interface profile  leafintprfname     access port selector  accessportselectorname     leaf port blk  leafportblkname      13      16     state  present    name  remove interface access port selector associated interface policy leaf profile   aci access port interface policy leaf profile      host  apic     username  admin     password  somesecretpassword     leaf interface profile  leafintprfname     access port selector  accessportselectorname     state  absent    name  query specific access port selector given leaf interface profile   aci access port interface policy leaf profile      host  apic     username  admin     password  somesecretpassword     leaf interface profile  leafintprfname     access port selector  accessportselectorname     state  query      return   r    current    description  the existing configuration apic module finished   returned  success   type  list   sample                               fvtenant                      attributes                          descr    production environment                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      error    description  the error information returned apic   returned  failure   type  dict   sample                 code    122            text    unknown managed object class foo        raw    description  the raw output returned apic rest api (xml json)   returned  parse error   type  string   sample     xml version  1 0  encoding  utf 8    imdata totalcount  1   error code  122  text  unknown managed object class foo     imdata   sent    description  the actual minimal configuration pushed apic   returned  info   type  list   sample                 fvtenant                  attributes                      descr    production environment                                previous    description  the original configuration apic module started   returned  info   type  list   sample                               fvtenant                      attributes                          descr    production                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      proposed    description  the assembled configuration user provided parameters   returned  info   type  dict   sample                 fvtenant                  attributes                      descr    production environment                    name    production                                filter string    description  the filter string used request   returned  failure debug   type  string   sample   rsp prop include config method    description  the http method used request apic   returned  failure debug   type  string   sample  post response    description  the http response apic   returned  failure debug   type  string   sample  ok (30 bytes) status    description  the http status apic   returned  failure debug   type  int   sample  200 url    description  the http url used request apic   returned  failure debug   type  string   sample  https   10 11 12 13 api mo uni tn production json         usr bin python        coding  utf 8        copyright  (c) 2017  bruno calogero  brunocalogero hotmail com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    not required querying objects    not required querying objects    note  normal rn  hports  name  typ  type   hence hardcoded range purposes module ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2017, Bruno Calogero <brunocalogero@hotmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_access_port_to_interface_policy_leaf_profile\nshort_description: Manage Fabric interface policy leaf profile interface selectors (infra:HPortS, infra:RsAccBaseGrp, infra:PortBlk)\ndescription:\n- Manage Fabric interface policy leaf profile interface selectors on Cisco ACI fabrics.\nnotes:\n- More information about the internal APIC classes B(infra:HPortS), B(infra:RsAccBaseGrp) and B(infra:PortBlk) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/)\nauthor:\n- Bruno Calogero (@brunocalogero)\nversion_added: '2.5'\noptions:\n  leaf_interface_profile:\n    description:\n    - The name of the Fabric access policy leaf interface profile.\n    required: yes\n    aliases: [ leaf_interface_profile_name ]\n  access_port_selector:\n    description:\n    -  The name of the Fabric access policy leaf interface profile access port selector.\n    required: yes\n    aliases: [ name, access_port_selector_name ]\n  description:\n    description:\n    - The description to assign to the C(access_port_selector)\n  leaf_port_blk:\n    description:\n    - The name of the Fabric access policy leaf interface profile access port block.\n    required: yes\n    aliases: [ leaf_port_blk_name ]\n  leaf_port_blk_description:\n    description:\n    - The description to assign to the C(leaf_port_blk)\n    required: no\n  from:\n    description:\n    - The beggining (from range) of the port range block for the leaf access port block.\n    required: yes\n    aliases: [ fromPort, from_port_range ]\n  to:\n    description:\n    - The end (to range) of the port range block for the leaf access port block.\n    required: yes\n    aliases: [ toPort, to_port_range ]\n  policy_group:\n    description:\n    - The name of the fabric access policy group to be associated with the leaf interface profile interface selector.\n    aliases: [ policy_group_name ]\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Associate an Interface Access Port Selector to an Interface Policy Leaf Profile with a Policy Group\n  aci_access_port_to_interface_policy_leaf_profile:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    leaf_interface_profile: leafintprfname\n    access_port_selector: accessportselectorname\n    leaf_port_blk: leafportblkname\n    from: 13\n    to: 16\n    policy_group: policygroupname\n    state: present\n\n- name: Associate an interface access port selector to an Interface Policy Leaf Profile (w/o policy group) (check if this works)\n  aci_access_port_to_interface_policy_leaf_profile:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    leaf_interface_profile: leafintprfname\n    access_port_selector: accessportselectorname\n    leaf_port_blk: leafportblkname\n    from: 13\n    to: 16\n    state: present\n\n- name: Remove an interface access port selector associated with an Interface Policy Leaf Profile\n  aci_access_port_to_interface_policy_leaf_profile:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    leaf_interface_profile: leafintprfname\n    access_port_selector: accessportselectorname\n    state: absent\n\n- name: Query Specific access_port_selector under given leaf_interface_profile\n  aci_access_port_to_interface_policy_leaf_profile:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    leaf_interface_profile: leafintprfname\n    access_port_selector: accessportselectorname\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update({\n        'leaf_interface_profile': dict(type='str', aliases=['leaf_interface_profile_name']),  # Not required for querying all objects\n        'access_port_selector': dict(type='str', aliases=['name', 'access_port_selector_name']),  # Not required for querying all objects\n        'description': dict(typ='str'),\n        'leaf_port_blk': dict(type='str', aliases=['leaf_port_blk_name']),\n        'leaf_port_blk_description': dict(type='str'),\n        'from': dict(type='str', aliases=['fromPort', 'from_port_range']),\n        'to': dict(type='str', aliases=['toPort', 'to_port_range']),\n        'policy_group': dict(type='str', aliases=['policy_group_name']),\n        'state': dict(type='str', default='present', choices=['absent', 'present', 'query']),\n    })\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['leaf_interface_profile', 'access_port_selector']],\n            ['state', 'present', ['leaf_interface_profile', 'access_port_selector']],\n        ],\n    )\n\n    leaf_interface_profile = module.params['leaf_interface_profile']\n    access_port_selector = module.params['access_port_selector']\n    description = module.params['description']\n    leaf_port_blk = module.params['leaf_port_blk']\n    leaf_port_blk_description = module.params['leaf_port_blk_description']\n    from_ = module.params['from']\n    to_ = module.params['to']\n    policy_group = module.params['policy_group']\n    state = module.params['state']\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class='infraAccPortP',\n            aci_rn='infra/accportprof-{0}'.format(leaf_interface_profile),\n            filter_target='eq(infraAccPortP.name, \"{0}\")'.format(leaf_interface_profile),\n            module_object=leaf_interface_profile\n        ),\n        subclass_1=dict(\n            aci_class='infraHPortS',\n            # NOTE: normal rn: hports-{name}-typ-{type}, hence here hardcoded to range for purposes of module\n            aci_rn='hports-{0}-typ-range'.format(access_port_selector),\n            filter_target='eq(infraHPortS.name, \"{0}\")'.format(access_port_selector),\n            module_object=access_port_selector,\n        ),\n        child_classes=['infraPortBlk', 'infraRsAccBaseGrp']\n    )\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='infraHPortS',\n            class_config=dict(\n                descr=description,\n                name=access_port_selector,\n            ),\n            child_configs=[\n                dict(\n                    infraPortBlk=dict(\n                        attributes=dict(\n                            descr=leaf_port_blk_description,\n                            name=leaf_port_blk,\n                            fromPort=from_,\n                            toPort=to_,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsAccBaseGrp=dict(\n                        attributes=dict(\n                            tDn='uni/infra/funcprof/accportgrp-{0}'.format(policy_group),\n                        ),\n                    ),\n                ),\n            ],\n        )\n\n        aci.get_diff(aci_class='infraHPortS')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "aci_access_port_to_interface_policy_leaf_profile.py", "id": "247400a3c45b0675aafb4f8d861e8f94", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aci/aci_access_port_to_interface_policy_leaf_profile.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}