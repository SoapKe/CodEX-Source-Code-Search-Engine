{"author": "kivy", "code": "print('main.py was successfully called')\n\nimport os\nprint('imported os')\n\n\nprint('this dir is', os.path.abspath(os.curdir))\n\nprint('contents of this dir', os.listdir('./'))\n\nimport sys\nprint('pythonpath is', sys.path)\n\nimport kivy\nprint('imported kivy')\nprint('file is', kivy.__file__)\n\nfrom kivy.app import App\n\nfrom kivy.lang import Builder\nfrom kivy.properties import StringProperty\n\nfrom kivy.uix.popup import Popup\nfrom kivy.clock import Clock\n\nprint('Imported kivy')\nfrom kivy.utils import platform\nprint('platform is', platform)\n\nimport peewee\nimport requests\nimport sqlite3\n\n\ntry:\n    inclemnet = requests.get('http://inclem.net/')\n    print('got inclem.net request')\nexcept:\n    inclemnet = 'failed inclemnet'\n\ntry:\n    kivy = requests.get('https://kivy.org/')\n    print('got kivy request (https)')\nexcept:\n    kivy = 'failed kivy'\n\nfrom peewee import *\ndb = SqliteDatabase('test.db')\n\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n\n    def __repr__(self):\n        return '<Person: {}, {}>'.format(self.name, self.birthday)\n\n    def __str__(self):\n        return repr(self)\n\ndb.connect()\ntry:\n    db.create_tables([Person])\nexcept:\n    import traceback\n    traceback.print_exc()\n\nimport random\nfrom datetime import date\ntest_person = Person(name='person{}'.format(random.randint(0, 1000)),\n                     birthday=date(random.randint(1900, 2000), random.randint(1, 9), random.randint(1, 20)),\n                     is_relative=False)\ntest_person.save()\n\n\nkv = '''\n\n\n\n<FixedSizeButton@Button>:\n    size_hint_y: None\n    height: dp(60)\n\n\nScrollView:\n    GridLayout:\n        cols: 1\n        size_hint_y: None\n        height: self.minimum_height\n        FixedSizeButton:\n            text: 'test pyjnius'\n            on_press: app.test_pyjnius()\n        Label:\n            height: self.texture_size[1]\n            size_hint_y: None\n            text_size: self.size[0], None\n            markup: True\n            text: 'kivy request: {}\\\\ninclemnet request: {}'.format(app.kivy_request, app.inclemnet_request)\n            halign: 'center'\n        Label:\n            height: self.texture_size[1]\n            size_hint_y: None\n            text_size: self.size[0], None\n            markup: True\n            text: 'people: {}'.format(app.people)\n            halign: 'center'\n        Image:\n            keep_ratio: False\n            allow_stretch: True\n            source: 'colours.png'\n            size_hint_y: None\n            height: dp(100)\n        Label:\n            height: self.texture_size[1]\n            size_hint_y: None\n            font_size: 100\n            text_size: self.size[0], None\n            markup: True\n            text: '[b]Kivy[/b] on [b]SDL2[/b] on [b]Android[/b]!'\n            halign: 'center'\n        Label:\n            height: self.texture_size[1]\n            size_hint_y: None\n            text_size: self.size[0], None\n            markup: True\n            text: sys.version\n            halign: 'center'\n            padding_y: dp(10)\n        Widget:\n            size_hint_y: None\n            height: 20\n        Label:\n            height: self.texture_size[1]\n            size_hint_y: None\n            font_size: 50\n            text_size: self.size[0], None\n            markup: True\n            text: 'dpi: {}\\\\ndensity: {}\\\\nfontscale: {}'.format(Metrics.dpi, Metrics.density, Metrics.fontscale)\n            halign: 'center'\n        FixedSizeButton:\n            text: 'test ctypes'\n            on_press: app.test_ctypes()\n        FixedSizeButton:\n            text: 'test numpy'\n            on_press: app.test_numpy()\n        Widget:\n            size_hint_y: None\n            height: 1000\n            on_touch_down: print('touched at', args[-1].pos)\n\n<ErrorPopup>:\n    title: 'Error' \n    size_hint: 0.75, 0.75\n    Label:\n        text: root.error_text\n'''\n\n\nclass ErrorPopup(Popup):\n    error_text = StringProperty('')\n\ndef raise_error(error):\n    print('ERROR:',  error)\n    ErrorPopup(error_text=error).open()\n\nclass TestApp(App):\n\n    kivy_request = kivy\n    inclemnet_request = inclemnet\n\n    people = ', '.join(map(str, list(Person.select())))\n\n    def build(self):\n        root = Builder.load_string(kv)\n        Clock.schedule_interval(self.print_something, 2)\n        # Clock.schedule_interval(self.test_pyjnius, 5)\n        print('testing metrics')\n        from kivy.metrics import Metrics\n        print('dpi is', Metrics.dpi)\n        print('density is', Metrics.density)\n        print('fontscale is', Metrics.fontscale)\n        return root\n\n    def print_something(self, *args):\n        print('App print tick', Clock.get_boottime())\n\n    def on_pause(self):\n        return True\n\n    def test_pyjnius(self, *args):\n        try:\n            from jnius import autoclass\n        except ImportError:\n            raise_error('Could not import pyjnius')\n            return\n        \n        print('Attempting to vibrate with pyjnius')\n        # PythonActivity = autoclass('org.renpy.android.PythonActivity')\n        \n        PythonActivity = autoclass('org.kivy.android.PythonActivity')\n        activity = PythonActivity.mActivity\n        Intent = autoclass('android.content.Intent')\n        Context = autoclass('android.content.Context')\n        vibrator = activity.getSystemService(Context.VIBRATOR_SERVICE)\n\n        vibrator.vibrate(1000)\n\n    def test_ctypes(self, *args):\n        import ctypes\n            \n    def test_numpy(self, *args):\n        import numpy\n\n        print(numpy.zeros(5))\n        print(numpy.arange(5))\n        print(numpy.random.random((3, 3)))\n                    \n\nTestApp().run()\n", "comments": "      import metrics kivy metrics metrics   import sys sys   fixedsizebutton button       size hint  none     height  dp(60)   scrollview      gridlayout          cols  1         size hint  none         height  self minimum height         fixedsizebutton              text   test pyjnius              press  app test pyjnius()         label              height  self texture size 1              size hint  none             text size  self size 0   none             markup  true             text   kivy request      ninclemnet request      format(app kivy request  app inclemnet request)             halign   center          label              height  self texture size 1              size hint  none             text size  self size 0   none             markup  true             text   people      format(app people)             halign   center          image              keep ratio  false             allow stretch  true             source   colours png              size hint  none             height  dp(100)         label              height  self texture size 1              size hint  none             font size  100             text size  self size 0   none             markup  true             text    b kivy  b   b sdl2  b   b android  b                halign   center          label              height  self texture size 1              size hint  none             text size  self size 0   none             markup  true             text  sys version             halign   center              padding  dp(10)         widget              size hint  none             height  20         label              height  self texture size 1              size hint  none             font size  50             text size  self size 0   none             markup  true             text   dpi      ndensity      nfontscale      format(metrics dpi  metrics density  metrics fontscale)             halign   center          fixedsizebutton              text   test ctypes              press  app test ctypes()         fixedsizebutton              text   test numpy              press  app test numpy()         widget              size hint  none             height  1000             touch  print( touched   args  1  pos)   errorpopup       title   error       size hint  0 75  0 75     label          text  root error text        import metrics kivy metrics metrics    import sys sys    clock schedule interval(self test pyjnius  5)    pythonactivity   autoclass( org renpy android pythonactivity )    activity   pythonactivity mactivity ", "content": "print('main.py was successfully called')\n\nimport os\nprint('imported os')\n\n\nprint('this dir is', os.path.abspath(os.curdir))\n\nprint('contents of this dir', os.listdir('./'))\n\nimport sys\nprint('pythonpath is', sys.path)\n\nimport kivy\nprint('imported kivy')\nprint('file is', kivy.__file__)\n\nfrom kivy.app import App\n\nfrom kivy.lang import Builder\nfrom kivy.properties import StringProperty\n\nfrom kivy.uix.popup import Popup\nfrom kivy.clock import Clock\n\nprint('Imported kivy')\nfrom kivy.utils import platform\nprint('platform is', platform)\n\nimport peewee\nimport requests\nimport sqlite3\n\n\ntry:\n    inclemnet = requests.get('http://inclem.net/')\n    print('got inclem.net request')\nexcept:\n    inclemnet = 'failed inclemnet'\n\ntry:\n    kivy = requests.get('https://kivy.org/')\n    print('got kivy request (https)')\nexcept:\n    kivy = 'failed kivy'\n\nfrom peewee import *\ndb = SqliteDatabase('test.db')\n\nclass Person(Model):\n    name = CharField()\n    birthday = DateField()\n    is_relative = BooleanField()\n\n    class Meta:\n        database = db\n\n    def __repr__(self):\n        return '<Person: {}, {}>'.format(self.name, self.birthday)\n\n    def __str__(self):\n        return repr(self)\n\ndb.connect()\ntry:\n    db.create_tables([Person])\nexcept:\n    import traceback\n    traceback.print_exc()\n\nimport random\nfrom datetime import date\ntest_person = Person(name='person{}'.format(random.randint(0, 1000)),\n                     birthday=date(random.randint(1900, 2000), random.randint(1, 9), random.randint(1, 20)),\n                     is_relative=False)\ntest_person.save()\n\n\nkv = '''\n#:import Metrics kivy.metrics.Metrics\n#:import sys sys\n\n<FixedSizeButton@Button>:\n    size_hint_y: None\n    height: dp(60)\n\n\nScrollView:\n    GridLayout:\n        cols: 1\n        size_hint_y: None\n        height: self.minimum_height\n        FixedSizeButton:\n            text: 'test pyjnius'\n            on_press: app.test_pyjnius()\n        Label:\n            height: self.texture_size[1]\n            size_hint_y: None\n            text_size: self.size[0], None\n            markup: True\n            text: 'kivy request: {}\\\\ninclemnet request: {}'.format(app.kivy_request, app.inclemnet_request)\n            halign: 'center'\n        Label:\n            height: self.texture_size[1]\n            size_hint_y: None\n            text_size: self.size[0], None\n            markup: True\n            text: 'people: {}'.format(app.people)\n            halign: 'center'\n        Image:\n            keep_ratio: False\n            allow_stretch: True\n            source: 'colours.png'\n            size_hint_y: None\n            height: dp(100)\n        Label:\n            height: self.texture_size[1]\n            size_hint_y: None\n            font_size: 100\n            text_size: self.size[0], None\n            markup: True\n            text: '[b]Kivy[/b] on [b]SDL2[/b] on [b]Android[/b]!'\n            halign: 'center'\n        Label:\n            height: self.texture_size[1]\n            size_hint_y: None\n            text_size: self.size[0], None\n            markup: True\n            text: sys.version\n            halign: 'center'\n            padding_y: dp(10)\n        Widget:\n            size_hint_y: None\n            height: 20\n        Label:\n            height: self.texture_size[1]\n            size_hint_y: None\n            font_size: 50\n            text_size: self.size[0], None\n            markup: True\n            text: 'dpi: {}\\\\ndensity: {}\\\\nfontscale: {}'.format(Metrics.dpi, Metrics.density, Metrics.fontscale)\n            halign: 'center'\n        FixedSizeButton:\n            text: 'test ctypes'\n            on_press: app.test_ctypes()\n        FixedSizeButton:\n            text: 'test numpy'\n            on_press: app.test_numpy()\n        Widget:\n            size_hint_y: None\n            height: 1000\n            on_touch_down: print('touched at', args[-1].pos)\n\n<ErrorPopup>:\n    title: 'Error' \n    size_hint: 0.75, 0.75\n    Label:\n        text: root.error_text\n'''\n\n\nclass ErrorPopup(Popup):\n    error_text = StringProperty('')\n\ndef raise_error(error):\n    print('ERROR:',  error)\n    ErrorPopup(error_text=error).open()\n\nclass TestApp(App):\n\n    kivy_request = kivy\n    inclemnet_request = inclemnet\n\n    people = ', '.join(map(str, list(Person.select())))\n\n    def build(self):\n        root = Builder.load_string(kv)\n        Clock.schedule_interval(self.print_something, 2)\n        # Clock.schedule_interval(self.test_pyjnius, 5)\n        print('testing metrics')\n        from kivy.metrics import Metrics\n        print('dpi is', Metrics.dpi)\n        print('density is', Metrics.density)\n        print('fontscale is', Metrics.fontscale)\n        return root\n\n    def print_something(self, *args):\n        print('App print tick', Clock.get_boottime())\n\n    def on_pause(self):\n        return True\n\n    def test_pyjnius(self, *args):\n        try:\n            from jnius import autoclass\n        except ImportError:\n            raise_error('Could not import pyjnius')\n            return\n        \n        print('Attempting to vibrate with pyjnius')\n        # PythonActivity = autoclass('org.renpy.android.PythonActivity')\n        # activity = PythonActivity.mActivity\n        PythonActivity = autoclass('org.kivy.android.PythonActivity')\n        activity = PythonActivity.mActivity\n        Intent = autoclass('android.content.Intent')\n        Context = autoclass('android.content.Context')\n        vibrator = activity.getSystemService(Context.VIBRATOR_SERVICE)\n\n        vibrator.vibrate(1000)\n\n    def test_ctypes(self, *args):\n        import ctypes\n            \n    def test_numpy(self, *args):\n        import numpy\n\n        print(numpy.zeros(5))\n        print(numpy.arange(5))\n        print(numpy.random.random((3, 3)))\n                    \n\nTestApp().run()\n", "description": "Turn your Python application into an Android APK", "file_name": "main.py", "id": "051e473534142147184f5bd5362a3155", "language": "Python", "project_name": "python-for-android", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/kivy-python-for-android/kivy-python-for-android-a036f44/testapps/testapp_sqlite_openssl/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:42:42Z", "url": "https://github.com/kivy/python-for-android", "wiki": false}