{"author": "p-e-w", "code": "\n\n Copyright (c) 2016-2017 Philipp Emanuel Weidmann <pew@worldwidemann.com>\n\n Nemo vir est qui mundum non reddat meliorem.\n\n Released under the terms of the GNU General Public License, version 3\n (https://gnu.org/licenses/gpl.html)\n\n\nfrom sys import _getframe\nfrom collections import OrderedDict\n\nfrom blessings import Terminal\n\n\nT = Terminal()\n\n\ndef initialize_terminal(style_output):\n     This hack works around two issues:\n     1. The global object T is imported into the context of other modules,\n        so (re)assigning T here has no effect.\n     2. Setting T._does_styling to True does not call setupterm, resulting in\n        an error unless styling was already enabled anyway.\n     Invoking the constructor manually keeps the imported references valid\n     and calls setupterm (again) if necessary.\n    T.__init__(force_styling={\n        \"yes\": True,\n        \"no\": None,\n        \"auto\": False,\n    }[style_output])\n\n\n Use of an ordered dictionary ensures that plugin-defined filters\n (which are registered after built-in filters) are processed last\n and thus override all built-in filters hooking the same syscall\nSYSCALL_FILTERS = OrderedDict()\n\n\ndef register_filter(syscall, filter_function, filter_scope=None):\n    if filter_scope is None:\n         Source: http://stackoverflow.com/a/5071539\n        caller_module = _getframe(1).f_globals[\"__name__\"]\n        filter_scope = caller_module.split(\".\")[-1]\n    if filter_scope not in SYSCALL_FILTERS:\n        SYSCALL_FILTERS[filter_scope] = {}\n    SYSCALL_FILTERS[filter_scope][syscall] = filter_function\n", "comments": "  maybe   see program deciding whether really want happen       copyright (c) 2016 2017 philipp emanuel weidmann  pew worldwidemann com        nemo vir est qui mundum non reddat meliorem        released terms gnu general public license  version 3    (https   gnu org licenses gpl html)    this hack works around two issues     1  the global object t imported context modules        (re)assigning t effect     2  setting t  styling true call setupterm  resulting       error unless styling already enabled anyway     invoking constructor manually keeps imported references valid    calls setupterm (again) necessary     use ordered dictionary ensures plugin defined filters    (which registered built filters) processed last    thus override built filters hooking syscall    source  http   stackoverflow com 5071539 ", "content": "# maybe - see what a program does before deciding whether you really want it to happen\n#\n# Copyright (c) 2016-2017 Philipp Emanuel Weidmann <pew@worldwidemann.com>\n#\n# Nemo vir est qui mundum non reddat meliorem.\n#\n# Released under the terms of the GNU General Public License, version 3\n# (https://gnu.org/licenses/gpl.html)\n\n\nfrom sys import _getframe\nfrom collections import OrderedDict\n\nfrom blessings import Terminal\n\n\nT = Terminal()\n\n\ndef initialize_terminal(style_output):\n    # This hack works around two issues:\n    # 1. The global object T is imported into the context of other modules,\n    #    so (re)assigning T here has no effect.\n    # 2. Setting T._does_styling to True does not call setupterm, resulting in\n    #    an error unless styling was already enabled anyway.\n    # Invoking the constructor manually keeps the imported references valid\n    # and calls setupterm (again) if necessary.\n    T.__init__(force_styling={\n        \"yes\": True,\n        \"no\": None,\n        \"auto\": False,\n    }[style_output])\n\n\n# Use of an ordered dictionary ensures that plugin-defined filters\n# (which are registered after built-in filters) are processed last\n# and thus override all built-in filters hooking the same syscall\nSYSCALL_FILTERS = OrderedDict()\n\n\ndef register_filter(syscall, filter_function, filter_scope=None):\n    if filter_scope is None:\n        # Source: http://stackoverflow.com/a/5071539\n        caller_module = _getframe(1).f_globals[\"__name__\"]\n        filter_scope = caller_module.split(\".\")[-1]\n    if filter_scope not in SYSCALL_FILTERS:\n        SYSCALL_FILTERS[filter_scope] = {}\n    SYSCALL_FILTERS[filter_scope][syscall] = filter_function\n", "description": " :open_file_folder: :rabbit2: :tophat: See what a program does before deciding whether you really want it to happen.", "file_name": "__init__.py", "id": "b617816503e55cb3f3ef486a53507e34", "language": "Python", "project_name": "maybe", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/p-e-w-maybe/p-e-w-maybe-ec58230/maybe/__init__.py", "save_time": "", "source": "", "update_at": "2018-03-16T19:18:43Z", "url": "https://github.com/p-e-w/maybe", "wiki": true}