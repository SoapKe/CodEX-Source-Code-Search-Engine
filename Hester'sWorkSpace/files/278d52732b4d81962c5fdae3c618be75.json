{"author": "keon", "code": "class Node:\n\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef inorder(root):\n    res = []\n    if not root:\n        return res\n    stack = []\n    while root or stack:\n        while root:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        res.append(root.val)\n        root = root.right\n    return res\n\n\ndef inorder_rec(root, res=None):\n    if root is None:\n        return []\n    if res is None: \n        res = []\n    inorder_rec(root.left, res)\n    res.append(root.val)\n    inorder_rec(root.right, res)\n    return res\n\nif __name__ == '__main__':\n    n1 = Node(100)\n    n2 = Node(50)\n    n3 = Node(150)\n    n4 = Node(25)\n    n5 = Node(75)\n    n6 = Node(125)\n    n7 = Node(175)\n    n1.left, n1.right = n2, n3\n    n2.left, n2.right = n4, n5\n    n3.left, n3.right = n6, n7\n    \n    assert inorder(n1)     == [25, 50, 75, 100, 125, 150, 175]\n    assert inorder_rec(n1) == [25, 50, 75, 100, 125, 150, 175]\n", "comments": "  recursive implementation ", "content": "class Node:\n\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef inorder(root):\n    res = []\n    if not root:\n        return res\n    stack = []\n    while root or stack:\n        while root:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        res.append(root.val)\n        root = root.right\n    return res\n\n# Recursive Implementation\ndef inorder_rec(root, res=None):\n    if root is None:\n        return []\n    if res is None: \n        res = []\n    inorder_rec(root.left, res)\n    res.append(root.val)\n    inorder_rec(root.right, res)\n    return res\n\nif __name__ == '__main__':\n    n1 = Node(100)\n    n2 = Node(50)\n    n3 = Node(150)\n    n4 = Node(25)\n    n5 = Node(75)\n    n6 = Node(125)\n    n7 = Node(175)\n    n1.left, n1.right = n2, n3\n    n2.left, n2.right = n4, n5\n    n3.left, n3.right = n6, n7\n    \n    assert inorder(n1)     == [25, 50, 75, 100, 125, 150, 175]\n    assert inorder_rec(n1) == [25, 50, 75, 100, 125, 150, 175]\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "inorder.py", "id": "278d52732b4d81962c5fdae3c618be75", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/keon-algorithms/keon-algorithms-ea43887/tree/traversal/inorder.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:53:29Z", "url": "https://github.com/keon/algorithms", "wiki": true}