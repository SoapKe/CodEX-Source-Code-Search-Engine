{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models\n\n\nclass Invoice(models.Model):\n    _inherit = 'account.invoice'\n\n    @api.multi\n    def action_cancel_draft(self):\n        self.env['membership.membership_line'].search([\n            ('account_invoice_line', 'in', self.mapped('invoice_line_ids').ids)\n        ]).write({'date_cancel': False})\n        return super(Invoice, self).action_cancel_draft()\n\n    @api.multi\n    def action_cancel(self):\n        \n        self.env['membership.membership_line'].search([\n            ('account_invoice_line', 'in', self.mapped('invoice_line_ids').ids)\n        ]).write({'date_cancel': fields.Date.today()})\n        return super(Invoice, self).action_cancel()\n\n\nclass AccountInvoiceLine(models.Model):\n    _inherit = 'account.invoice.line'\n\n    @api.multi\n    def write(self, vals):\n        MemberLine = self.env['membership.membership_line']\n        res = super(AccountInvoiceLine, self).write(vals)\n        for line in self.filtered(lambda line: line.invoice_id.type == 'out_invoice'):\n            member_lines = MemberLine.search([('account_invoice_line', '=', line.id)])\n            if line.product_id.membership and not member_lines:\n                \n                date_from = line.product_id.membership_date_from\n                date_to = line.product_id.membership_date_to\n                if line.invoice_id.date_invoice > (date_from or '0000-00-00') and line.invoice_id.date_invoice < (date_to or '0000-00-00'):\n                    date_from = line.invoice_id.date_invoice\n                MemberLine.create({\n                    'partner': line.invoice_id.partner_id.id,\n                    'membership_id': line.product_id.id,\n                    'member_price': line.price_unit,\n                    'date': fields.Date.today(),\n                    'date_from': date_from,\n                    'date_to': date_to,\n                    'account_invoice_line': line.id,\n                })\n            if line.product_id and not line.product_id.membership and member_lines:\n                \n                member_lines.unlink()\n        return res\n\n    @api.model\n    def create(self, vals):\n        MemberLine = self.env['membership.membership_line']\n        invoice_line = super(AccountInvoiceLine, self).create(vals)\n        if invoice_line.invoice_id.type == 'out_invoice' and \\\n                invoice_line.product_id.membership and \\\n                not MemberLine.search([('account_invoice_line', '=', invoice_line.id)]):\n            \n            date_from = invoice_line.product_id.membership_date_from\n            date_to = invoice_line.product_id.membership_date_to\n            if date_from and date_from < (invoice_line.invoice_id.date_invoice or '0000-00-00') < (date_to or '0000-00-00'):\n                date_from = invoice_line.invoice_id.date_invoice\n            MemberLine.create({\n                'partner': invoice_line.invoice_id.partner_id.id,\n                'membership_id': invoice_line.product_id.id,\n                'member_price': invoice_line.price_unit,\n                'date': fields.Date.today(),\n                'date_from': date_from,\n                'date_to': date_to,\n                'account_invoice_line': invoice_line.id,\n            })\n        return invoice_line\n", "comments": "   create  date cancel  membership line object           coding  utf 8        part odoo  see license file full copyright licensing details     product line changed membership product    product line changed non membership product    product line membership product ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models\n\n\nclass Invoice(models.Model):\n    _inherit = 'account.invoice'\n\n    @api.multi\n    def action_cancel_draft(self):\n        self.env['membership.membership_line'].search([\n            ('account_invoice_line', 'in', self.mapped('invoice_line_ids').ids)\n        ]).write({'date_cancel': False})\n        return super(Invoice, self).action_cancel_draft()\n\n    @api.multi\n    def action_cancel(self):\n        '''Create a 'date_cancel' on the membership_line object'''\n        self.env['membership.membership_line'].search([\n            ('account_invoice_line', 'in', self.mapped('invoice_line_ids').ids)\n        ]).write({'date_cancel': fields.Date.today()})\n        return super(Invoice, self).action_cancel()\n\n\nclass AccountInvoiceLine(models.Model):\n    _inherit = 'account.invoice.line'\n\n    @api.multi\n    def write(self, vals):\n        MemberLine = self.env['membership.membership_line']\n        res = super(AccountInvoiceLine, self).write(vals)\n        for line in self.filtered(lambda line: line.invoice_id.type == 'out_invoice'):\n            member_lines = MemberLine.search([('account_invoice_line', '=', line.id)])\n            if line.product_id.membership and not member_lines:\n                # Product line has changed to a membership product\n                date_from = line.product_id.membership_date_from\n                date_to = line.product_id.membership_date_to\n                if line.invoice_id.date_invoice > (date_from or '0000-00-00') and line.invoice_id.date_invoice < (date_to or '0000-00-00'):\n                    date_from = line.invoice_id.date_invoice\n                MemberLine.create({\n                    'partner': line.invoice_id.partner_id.id,\n                    'membership_id': line.product_id.id,\n                    'member_price': line.price_unit,\n                    'date': fields.Date.today(),\n                    'date_from': date_from,\n                    'date_to': date_to,\n                    'account_invoice_line': line.id,\n                })\n            if line.product_id and not line.product_id.membership and member_lines:\n                # Product line has changed to a non membership product\n                member_lines.unlink()\n        return res\n\n    @api.model\n    def create(self, vals):\n        MemberLine = self.env['membership.membership_line']\n        invoice_line = super(AccountInvoiceLine, self).create(vals)\n        if invoice_line.invoice_id.type == 'out_invoice' and \\\n                invoice_line.product_id.membership and \\\n                not MemberLine.search([('account_invoice_line', '=', invoice_line.id)]):\n            # Product line is a membership product\n            date_from = invoice_line.product_id.membership_date_from\n            date_to = invoice_line.product_id.membership_date_to\n            if date_from and date_from < (invoice_line.invoice_id.date_invoice or '0000-00-00') < (date_to or '0000-00-00'):\n                date_from = invoice_line.invoice_id.date_invoice\n            MemberLine.create({\n                'partner': invoice_line.invoice_id.partner_id.id,\n                'membership_id': invoice_line.product_id.id,\n                'member_price': invoice_line.price_unit,\n                'date': fields.Date.today(),\n                'date_from': date_from,\n                'date_to': date_to,\n                'account_invoice_line': invoice_line.id,\n            })\n        return invoice_line\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "account_invoice.py", "id": "fc443948e002ed074c69831ef0a15d44", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/membership/models/account_invoice.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}