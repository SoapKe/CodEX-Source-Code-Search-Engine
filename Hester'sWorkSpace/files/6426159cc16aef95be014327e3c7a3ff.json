{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n (c) 2014, Matt Martz <matt@sivel.net>\n (c) 2016, Justin Mayer <https://justinmayer.com/>\n\n This file is part of Ansible.\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n =============================================================================\n\n This script is to be used with vault_password_file or --vault-password-file\n to retrieve the vault password via your OS's native keyring application.\n\n This file *MUST* be saved with executable permissions. Otherwise, Ansible\n will try to parse as a password file and display: \"ERROR! Decryption failed\"\n\n The `keyring` Python module is required: https://pypi.python.org/pypi/keyring\n\n By default, this script will store the specified password in the keyring of\n the user that invokes the script. To specify a user keyring, add a [vault]\n section to your ansible.cfg file with a 'username' option. Example:\n\n [vault]\n username = 'ansible-vault'\n\n Another optional setting is for the key name, which allows you to use this\n script to handle multiple project vaults with different passwords:\n\n [vault]\n keyname = 'ansible-vault-yourproject'\n\n You can configure the `vault_password_file` option in ansible.cfg:\n\n [defaults]\n ...\n vault_password_file = /path/to/vault-keyring.py\n ...\n\n To set your password, `cd` to your project directory and run:\n\n python /path/to/vault-keyring.py set\n\n If you choose not to configure the path to `vault_password_file` in\n ansible.cfg, your `ansible-playbook` command might look like:\n\n ansible-playbook --vault-password-file=/path/to/vault-keyring.py site.yml\n\nANSIBLE_METADATA = {'status': ['preview'],\n                    'supported_by': 'community',\n                    'version': '1.0'}\n\nimport sys\nimport getpass\nimport keyring\n\nfrom ansible.config.manager import ConfigManager, get_ini_config_value\n\n\ndef main():\n    config = ConfigManager()\n    username = get_ini_config_value(\n        config._parser,\n        dict(section='vault', key='username')\n    ) or getpass.getuser()\n\n    keyname = get_ini_config_value(\n        config._parser,\n        dict(section='vault', key='keyname')\n    ) or 'ansible'\n\n    if len(sys.argv) == 2 and sys.argv[1] == 'set':\n        intro = 'Storing password in \"{}\" user keyring using key name: {}\\n'\n        sys.stdout.write(intro.format(username, keyname))\n        password = getpass.getpass()\n        confirm = getpass.getpass('Confirm password: ')\n        if password == confirm:\n            keyring.set_password(keyname, username, password)\n        else:\n            sys.stderr.write('Passwords do not match\\n')\n            sys.exit(1)\n    else:\n        sys.stdout.write('{0}\\n'.format(keyring.get_password(keyname,\n                                                             username)))\n\n    sys.exit(0)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "   usr bin env python        coding  utf 8        (c) 2014  matt martz  matt sivel net     (c) 2016  justin mayer  https   justinmayer com         this file part ansible        ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses                                                                                              this script used vault password file   vault password file    retrieve vault password via os native keyring application        this file  must  saved executable permissions  otherwise  ansible    try parse password file display   error  decryption failed        the  keyring  python module required  https   pypi python org pypi keyring       by default  script store specified password keyring    user invokes script  to specify user keyring  add  vault     section ansible cfg file  username  option  example         vault     username    ansible vault        another optional setting key name  allows use    script handle multiple project vaults different passwords         vault     keyname    ansible vault yourproject        you configure  vault password file  option ansible cfg         defaults            vault password file    path vault keyring py              to set password   cd  project directory run        python  path vault keyring py set       if choose configure path  vault password file     ansible cfg   ansible playbook  command might look like        ansible playbook   vault password file  path vault keyring py site yml ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# (c) 2014, Matt Martz <matt@sivel.net>\n# (c) 2016, Justin Mayer <https://justinmayer.com/>\n#\n# This file is part of Ansible.\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n# =============================================================================\n#\n# This script is to be used with vault_password_file or --vault-password-file\n# to retrieve the vault password via your OS's native keyring application.\n#\n# This file *MUST* be saved with executable permissions. Otherwise, Ansible\n# will try to parse as a password file and display: \"ERROR! Decryption failed\"\n#\n# The `keyring` Python module is required: https://pypi.python.org/pypi/keyring\n#\n# By default, this script will store the specified password in the keyring of\n# the user that invokes the script. To specify a user keyring, add a [vault]\n# section to your ansible.cfg file with a 'username' option. Example:\n#\n# [vault]\n# username = 'ansible-vault'\n#\n# Another optional setting is for the key name, which allows you to use this\n# script to handle multiple project vaults with different passwords:\n#\n# [vault]\n# keyname = 'ansible-vault-yourproject'\n#\n# You can configure the `vault_password_file` option in ansible.cfg:\n#\n# [defaults]\n# ...\n# vault_password_file = /path/to/vault-keyring.py\n# ...\n#\n# To set your password, `cd` to your project directory and run:\n#\n# python /path/to/vault-keyring.py set\n#\n# If you choose not to configure the path to `vault_password_file` in\n# ansible.cfg, your `ansible-playbook` command might look like:\n#\n# ansible-playbook --vault-password-file=/path/to/vault-keyring.py site.yml\n\nANSIBLE_METADATA = {'status': ['preview'],\n                    'supported_by': 'community',\n                    'version': '1.0'}\n\nimport sys\nimport getpass\nimport keyring\n\nfrom ansible.config.manager import ConfigManager, get_ini_config_value\n\n\ndef main():\n    config = ConfigManager()\n    username = get_ini_config_value(\n        config._parser,\n        dict(section='vault', key='username')\n    ) or getpass.getuser()\n\n    keyname = get_ini_config_value(\n        config._parser,\n        dict(section='vault', key='keyname')\n    ) or 'ansible'\n\n    if len(sys.argv) == 2 and sys.argv[1] == 'set':\n        intro = 'Storing password in \"{}\" user keyring using key name: {}\\n'\n        sys.stdout.write(intro.format(username, keyname))\n        password = getpass.getpass()\n        confirm = getpass.getpass('Confirm password: ')\n        if password == confirm:\n            keyring.set_password(keyname, username, password)\n        else:\n            sys.stderr.write('Passwords do not match\\n')\n            sys.exit(1)\n    else:\n        sys.stdout.write('{0}\\n'.format(keyring.get_password(keyname,\n                                                             username)))\n\n    sys.exit(0)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "vault-keyring.py", "id": "6426159cc16aef95be014327e3c7a3ff", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/contrib/vault/vault-keyring.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}