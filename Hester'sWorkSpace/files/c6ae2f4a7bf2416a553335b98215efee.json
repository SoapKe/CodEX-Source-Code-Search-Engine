{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_parse_qs\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    xpath_text,\n)\n\n\nclass FolketingetIE(InfoExtractor):\n    IE_DESC = 'Folketinget (ft.dk; Danish parliament)'\n    _VALID_URL = r'https?://(?:www\\.)?ft\\.dk/webtv/video/[^?\n    _TEST = {\n        'url': 'http://www.ft.dk/webtv/video/20141/eru/td.1165642.aspx?as=1\n        'md5': '6269e8626fa1a891bf5369b386ae996a',\n        'info_dict': {\n            'id': '1165642',\n            'ext': 'mp4',\n            'title': '\u00c5bent samr\u00e5d i Erhvervsudvalget',\n            'description': '\u00c5bent samr\u00e5d med erhvervs- og v\u00e6kstministeren om regeringens politik p\u00e5 teleomr\u00e5det',\n            'view_count': int,\n            'width': 768,\n            'height': 432,\n            'tbr': 928000,\n            'timestamp': 1416493800,\n            'upload_date': '20141120',\n            'duration': 3960,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._og_search_title(webpage)\n        description = self._html_search_regex(\n            r'(?s)<div class=\"video-item-agenda\"[^>]*>(.*?)<',\n            webpage, 'description', fatal=False)\n\n        player_params = compat_parse_qs(self._search_regex(\n            r'<embed src=\"http://ft\\.arkena\\.tv/flash/ftplayer\\.swf\\?([^\"]+)\"',\n            webpage, 'player params'))\n        xml_url = player_params['xml'][0]\n        doc = self._download_xml(xml_url, video_id)\n\n        timestamp = parse_iso8601(xpath_text(doc, './/date'))\n        duration = parse_duration(xpath_text(doc, './/duration'))\n        width = int_or_none(xpath_text(doc, './/width'))\n        height = int_or_none(xpath_text(doc, './/height'))\n        view_count = int_or_none(xpath_text(doc, './/views'))\n\n        formats = [{\n            'format_id': n.attrib['bitrate'],\n            'url': xpath_text(n, './url', fatal=True),\n            'tbr': int_or_none(n.attrib['bitrate']),\n        } for n in doc.findall('.//streams/stream')]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': description,\n            'timestamp': timestamp,\n            'width': width,\n            'height': height,\n            'duration': duration,\n            'view_count': view_count,\n        }\n", "comments": "# coding: utf-8\n#]*?\\.(?P<id>[0-9]+)\\.aspx'\n#player',\n# rtmp download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_parse_qs\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    xpath_text,\n)\n\n\nclass FolketingetIE(InfoExtractor):\n    IE_DESC = 'Folketinget (ft.dk; Danish parliament)'\n    _VALID_URL = r'https?://(?:www\\.)?ft\\.dk/webtv/video/[^?#]*?\\.(?P<id>[0-9]+)\\.aspx'\n    _TEST = {\n        'url': 'http://www.ft.dk/webtv/video/20141/eru/td.1165642.aspx?as=1#player',\n        'md5': '6269e8626fa1a891bf5369b386ae996a',\n        'info_dict': {\n            'id': '1165642',\n            'ext': 'mp4',\n            'title': '\u00c5bent samr\u00e5d i Erhvervsudvalget',\n            'description': '\u00c5bent samr\u00e5d med erhvervs- og v\u00e6kstministeren om regeringens politik p\u00e5 teleomr\u00e5det',\n            'view_count': int,\n            'width': 768,\n            'height': 432,\n            'tbr': 928000,\n            'timestamp': 1416493800,\n            'upload_date': '20141120',\n            'duration': 3960,\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._og_search_title(webpage)\n        description = self._html_search_regex(\n            r'(?s)<div class=\"video-item-agenda\"[^>]*>(.*?)<',\n            webpage, 'description', fatal=False)\n\n        player_params = compat_parse_qs(self._search_regex(\n            r'<embed src=\"http://ft\\.arkena\\.tv/flash/ftplayer\\.swf\\?([^\"]+)\"',\n            webpage, 'player params'))\n        xml_url = player_params['xml'][0]\n        doc = self._download_xml(xml_url, video_id)\n\n        timestamp = parse_iso8601(xpath_text(doc, './/date'))\n        duration = parse_duration(xpath_text(doc, './/duration'))\n        width = int_or_none(xpath_text(doc, './/width'))\n        height = int_or_none(xpath_text(doc, './/height'))\n        view_count = int_or_none(xpath_text(doc, './/views'))\n\n        formats = [{\n            'format_id': n.attrib['bitrate'],\n            'url': xpath_text(n, './url', fatal=True),\n            'tbr': int_or_none(n.attrib['bitrate']),\n        } for n in doc.findall('.//streams/stream')]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': description,\n            'timestamp': timestamp,\n            'width': width,\n            'height': height,\n            'duration': duration,\n            'view_count': view_count,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "folketinget.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/folketinget.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}