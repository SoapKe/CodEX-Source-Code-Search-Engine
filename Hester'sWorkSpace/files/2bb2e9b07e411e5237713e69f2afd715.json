{"author": "pandas-dev", "code": "\nimport warnings\nfrom datetime import datetime\n\nimport numpy as np\nimport pandas as pd\ntry:\n    import pandas.tseries.holiday  \nexcept ImportError:\n    pass\n\nhcal = pd.tseries.holiday.USFederalHolidayCalendar()\n\nnon_apply = [pd.offsets.Day(),\n             pd.offsets.BYearEnd(),\n             pd.offsets.BYearBegin(),\n             pd.offsets.BQuarterEnd(),\n             pd.offsets.BQuarterBegin(),\n             pd.offsets.BMonthEnd(),\n             pd.offsets.BMonthBegin(),\n             pd.offsets.CustomBusinessDay(),\n             pd.offsets.CustomBusinessDay(calendar=hcal),\n             pd.offsets.CustomBusinessMonthBegin(calendar=hcal),\n             pd.offsets.CustomBusinessMonthEnd(calendar=hcal),\n             pd.offsets.CustomBusinessMonthEnd(calendar=hcal)]\nother_offsets = [pd.offsets.YearEnd(), pd.offsets.YearBegin(),\n                 pd.offsets.QuarterEnd(), pd.offsets.QuarterBegin(),\n                 pd.offsets.MonthEnd(), pd.offsets.MonthBegin(),\n                 pd.offsets.DateOffset(months=2, days=2),\n                 pd.offsets.BusinessDay(), pd.offsets.SemiMonthEnd(),\n                 pd.offsets.SemiMonthBegin()]\noffsets = non_apply + other_offsets\n\n\nclass ApplyIndex(object):\n\n    goal_time = 0.2\n\n    params = other_offsets\n    param_names = ['offset']\n\n    def setup(self, offset):\n        N = 10000\n        self.rng = pd.date_range(start='1/1/2000', periods=N, freq='T')\n\n    def time_apply_index(self, offset):\n        offset.apply_index(self.rng)\n\n\nclass OnOffset(object):\n\n    goal_time = 0.2\n\n    params = offsets\n    param_names = ['offset']\n\n    def setup(self, offset):\n        self.dates = [datetime(2016, m, d)\n                      for m in [10, 11, 12]\n                      for d in [1, 2, 3, 28, 29, 30, 31]\n                      if not (m == 11 and d == 31)]\n\n    def time_on_offset(self, offset):\n        for date in self.dates:\n            offset.onOffset(date)\n\n\nclass OffsetSeriesArithmetic(object):\n\n    goal_time = 0.2\n    params = offsets\n    param_names = ['offset']\n\n    def setup(self, offset):\n        N = 1000\n        rng = pd.date_range(start='1/1/2000', periods=N, freq='T')\n        self.data = pd.Series(rng)\n\n    def time_add_offset(self, offset):\n        with warnings.catch_warnings(record=True):\n            self.data + offset\n\n\nclass OffsetDatetimeIndexArithmetic(object):\n\n    goal_time = 0.2\n    params = offsets\n    param_names = ['offset']\n\n    def setup(self, offset):\n        N = 1000\n        self.data = pd.date_range(start='1/1/2000', periods=N, freq='T')\n\n    def time_add_offset(self, offset):\n        with warnings.catch_warnings(record=True):\n            self.data + offset\n\n\nclass OffestDatetimeArithmetic(object):\n\n    goal_time = 0.2\n    params = offsets\n    param_names = ['offset']\n\n    def setup(self, offset):\n        self.date = datetime(2011, 1, 1)\n        self.dt64 = np.datetime64('2011-01-01 09:00Z')\n\n    def time_apply(self, offset):\n        offset.apply(self.date)\n\n    def time_apply_np_dt64(self, offset):\n        offset.apply(self.dt64)\n\n    def time_add(self, offset):\n        self.date + offset\n\n    def time_add_10(self, offset):\n        self.date + (10 * offset)\n\n    def time_subtract(self, offset):\n        self.date - offset\n\n    def time_subtract_10(self, offset):\n        self.date - (10 * offset)\n", "comments": "-*- coding: utf-8 -*- noqa these offests currently raise notimplimentederror .apply_index()", "content": "# -*- coding: utf-8 -*-\nimport warnings\nfrom datetime import datetime\n\nimport numpy as np\nimport pandas as pd\ntry:\n    import pandas.tseries.holiday  # noqa\nexcept ImportError:\n    pass\n\nhcal = pd.tseries.holiday.USFederalHolidayCalendar()\n# These offests currently raise a NotImplimentedError with .apply_index()\nnon_apply = [pd.offsets.Day(),\n             pd.offsets.BYearEnd(),\n             pd.offsets.BYearBegin(),\n             pd.offsets.BQuarterEnd(),\n             pd.offsets.BQuarterBegin(),\n             pd.offsets.BMonthEnd(),\n             pd.offsets.BMonthBegin(),\n             pd.offsets.CustomBusinessDay(),\n             pd.offsets.CustomBusinessDay(calendar=hcal),\n             pd.offsets.CustomBusinessMonthBegin(calendar=hcal),\n             pd.offsets.CustomBusinessMonthEnd(calendar=hcal),\n             pd.offsets.CustomBusinessMonthEnd(calendar=hcal)]\nother_offsets = [pd.offsets.YearEnd(), pd.offsets.YearBegin(),\n                 pd.offsets.QuarterEnd(), pd.offsets.QuarterBegin(),\n                 pd.offsets.MonthEnd(), pd.offsets.MonthBegin(),\n                 pd.offsets.DateOffset(months=2, days=2),\n                 pd.offsets.BusinessDay(), pd.offsets.SemiMonthEnd(),\n                 pd.offsets.SemiMonthBegin()]\noffsets = non_apply + other_offsets\n\n\nclass ApplyIndex(object):\n\n    goal_time = 0.2\n\n    params = other_offsets\n    param_names = ['offset']\n\n    def setup(self, offset):\n        N = 10000\n        self.rng = pd.date_range(start='1/1/2000', periods=N, freq='T')\n\n    def time_apply_index(self, offset):\n        offset.apply_index(self.rng)\n\n\nclass OnOffset(object):\n\n    goal_time = 0.2\n\n    params = offsets\n    param_names = ['offset']\n\n    def setup(self, offset):\n        self.dates = [datetime(2016, m, d)\n                      for m in [10, 11, 12]\n                      for d in [1, 2, 3, 28, 29, 30, 31]\n                      if not (m == 11 and d == 31)]\n\n    def time_on_offset(self, offset):\n        for date in self.dates:\n            offset.onOffset(date)\n\n\nclass OffsetSeriesArithmetic(object):\n\n    goal_time = 0.2\n    params = offsets\n    param_names = ['offset']\n\n    def setup(self, offset):\n        N = 1000\n        rng = pd.date_range(start='1/1/2000', periods=N, freq='T')\n        self.data = pd.Series(rng)\n\n    def time_add_offset(self, offset):\n        with warnings.catch_warnings(record=True):\n            self.data + offset\n\n\nclass OffsetDatetimeIndexArithmetic(object):\n\n    goal_time = 0.2\n    params = offsets\n    param_names = ['offset']\n\n    def setup(self, offset):\n        N = 1000\n        self.data = pd.date_range(start='1/1/2000', periods=N, freq='T')\n\n    def time_add_offset(self, offset):\n        with warnings.catch_warnings(record=True):\n            self.data + offset\n\n\nclass OffestDatetimeArithmetic(object):\n\n    goal_time = 0.2\n    params = offsets\n    param_names = ['offset']\n\n    def setup(self, offset):\n        self.date = datetime(2011, 1, 1)\n        self.dt64 = np.datetime64('2011-01-01 09:00Z')\n\n    def time_apply(self, offset):\n        offset.apply(self.date)\n\n    def time_apply_np_dt64(self, offset):\n        offset.apply(self.dt64)\n\n    def time_add(self, offset):\n        self.date + offset\n\n    def time_add_10(self, offset):\n        self.date + (10 * offset)\n\n    def time_subtract(self, offset):\n        self.date - offset\n\n    def time_subtract_10(self, offset):\n        self.date - (10 * offset)\n", "description": "Flexible and powerful data analysis / manipulation library for Python, providing labeled data structures similar to R data.frame objects, statistical functions, and much more", "file_name": "offset.py", "id": "2bb2e9b07e411e5237713e69f2afd715", "language": "Python", "project_name": "pandas", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/pandas-dev-pandas/pandas-dev-pandas-3783ccc/asv_bench/benchmarks/offset.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:47:21Z", "url": "https://github.com/pandas-dev/pandas", "wiki": true}