{"author": "odoo", "code": "# -*- coding:utf-8 -*-\n\n\nfrom datetime import date\n\nfrom odoo import api, models, _\nfrom odoo.exceptions import UserError\n\nclass EmployeesYearlySalaryReport(models.AbstractModel):\n    _name = 'report.l10n_in_hr_payroll.report_hryearlysalary'\n\n    def get_periods(self, form):\n        self.mnths = []\n\n        first_year = int(form['date_from'][0:4])\n        last_year = int(form['date_to'][0:4])\n\n        first_month = int(form['date_from'][5:7])\n        last_month = int(form['date_to'][5:7])\n        no_months = (last_year - first_year) * 12 + last_month - first_month + 1\n        current_month = first_month\n        current_year = first_year\n\n\n        mnth_name = []\n        for count in range(0, no_months):\n            m = date(current_year, current_month, 1).strftime('%b')\n            mnth_name.append(m)\n            self.mnths.append(str(current_month) + '-' + str(current_year))\n            if current_month == 12:\n                current_month = 0\n                current_year = last_year\n            current_month = current_month + 1\n        for c in range(0, (12 - no_months)):\n            mnth_name.append('')\n            self.mnths.append('')\n        return [mnth_name]\n\n    def get_employee(self, form):\n        return self.env['hr.employee'].browse(form.get('employee_ids', []))\n\n    def get_employee_detail(self, form, obj):\n        self.allow_list = []\n        self.deduct_list = []\n        self.total = 0.00\n        gross = False\n        net = False\n\n        payslip_lines = self.cal_monthly_amt(form, obj.id)\n        for line in payslip_lines:\n            for line[0] in line:\n                if line[0][0] == \"Gross\":\n                    gross = line[0]\n                elif line[0][0] == \"Net\":\n                    net = line[0]\n                elif line[0][13] > 0.0 and line[0][0] != \"Net\":\n                    self.total += line[0][len(line[0]) - 1]\n                    self.allow_list.append(line[0])\n                elif line[0][13] < 0.0:\n                    self.total += line[0][len(line[0]) - 1]\n                    self.deduct_list.append(line[0])\n        if gross:\n            self.allow_list.append(gross)\n        if net:\n            self.deduct_list.append(net)\n        return None\n\n    def cal_monthly_amt(self, form, emp_id):\n        result = []\n        res = []\n        salaries = {}\n        self.env.cr.execute('''SELECT rc.code, pl.name, sum(pl.total), \\\n                to_char(date_to,'mm-yyyy') as to_date  FROM hr_payslip_line as pl \\\n                LEFT JOIN hr_salary_rule_category AS rc on (pl.category_id = rc.id) \\\n                LEFT JOIN hr_payslip as p on pl.slip_id = p.id \\\n                LEFT JOIN hr_employee as emp on emp.id = p.employee_id \\\n                WHERE p.employee_id = %s \\\n                GROUP BY rc.parent_id, pl.sequence, pl.id, pl.category_id,pl.name,p.date_to,rc.code \\\n                ORDER BY pl.sequence, rc.parent_id''', (emp_id,))\n        salary = self.env.cr.fetchall()\n        for category in salary:\n            if category[0] not in salaries:\n                salaries.setdefault(category[0], {})\n                salaries[category[0]].update({category[1]: {category[3]: category[2]}})\n            elif category[1] not in salaries[category[0]]:\n                salaries[category[0]].setdefault(category[1], {})\n                salaries[category[0]][category[1]].update({category[3]: category[2]})\n            else:\n                salaries[category[0]][category[1]].update({category[3]: category[2]})\n\n        categories = self.env['hr.salary.rule.category'].search([]).mapped('code')\n        for code in categories:\n            if code in salaries:\n                res = self.salary_list(salaries[code])\n            result.append(res)\n        return result\n\n    def salary_list(self, salaries):\n        cat_salary_all = []\n        for category_name, amount in salaries.items():\n            cat_salary = []\n            total = 0.0\n            cat_salary.append(category_name)\n            for mnth in self.mnths:\n                if mnth != 'None':\n                    if len(mnth) != 7:\n                        mnth = '0' + str(mnth)\n                    if mnth in amount and amount[mnth]:\n                        cat_salary.append(amount[mnth])\n                        total += amount[mnth]\n                    else:\n                        cat_salary.append(0.00)\n                else:\n                    cat_salary.append('')\n            cat_salary.append(total)\n            cat_salary_all.append(cat_salary)\n        return cat_salary_all\n\n    def get_allow(self):\n        return self.allow_list\n\n    def get_deduct(self):\n        return self.deduct_list\n\n    def get_total(self):\n        return self.total\n\n    @api.model\n    def get_report_values(self, docids, data=None):\n        if not self.env.context.get('active_model') or not self.env.context.get('active_id'):\n            raise UserError(_(\"Form content is missing, this report cannot be printed.\"))\n\n        model = self.env.context.get('active_model')\n        docs = self.env[model].browse(self.env.context.get('active_id'))\n        return {\n            'doc_ids': docids,\n            'doc_model': model,\n            'data': data,\n            'docs': docs,\n            'get_employee': self.get_employee,\n            'get_employee_detail': self.get_employee_detail,\n            'cal_monthly_amt': self.cal_monthly_amt,\n            'get_periods': self.get_periods,\n            'get_total': self.get_total,\n            'get_allow': self.get_allow,\n            'get_deduct': self.get_deduct,\n        }\n", "comments": "   select rc code  pl name  sum(pl total)                    char(date  mm yyyy ) date  from hr payslip line pl                   left join hr salary rule category as rc (pl category id   rc id)                   left join hr payslip p pl slip id   p id                   left join hr employee emp emp id   p employee id                   where p employee id                      group by rc parent id  pl sequence  pl id  pl category id pl name p date rc code                   order by pl sequence  rc parent id           coding utf 8        part odoo  see license file full copyright licensing details           get start year month date end year month date          get name months integer ", "content": "# -*- coding:utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom datetime import date\n\nfrom odoo import api, models, _\nfrom odoo.exceptions import UserError\n\nclass EmployeesYearlySalaryReport(models.AbstractModel):\n    _name = 'report.l10n_in_hr_payroll.report_hryearlysalary'\n\n    def get_periods(self, form):\n        self.mnths = []\n#       Get start year-month-date and end year-month-date\n        first_year = int(form['date_from'][0:4])\n        last_year = int(form['date_to'][0:4])\n\n        first_month = int(form['date_from'][5:7])\n        last_month = int(form['date_to'][5:7])\n        no_months = (last_year - first_year) * 12 + last_month - first_month + 1\n        current_month = first_month\n        current_year = first_year\n\n#       Get name of the months from integer\n        mnth_name = []\n        for count in range(0, no_months):\n            m = date(current_year, current_month, 1).strftime('%b')\n            mnth_name.append(m)\n            self.mnths.append(str(current_month) + '-' + str(current_year))\n            if current_month == 12:\n                current_month = 0\n                current_year = last_year\n            current_month = current_month + 1\n        for c in range(0, (12 - no_months)):\n            mnth_name.append('')\n            self.mnths.append('')\n        return [mnth_name]\n\n    def get_employee(self, form):\n        return self.env['hr.employee'].browse(form.get('employee_ids', []))\n\n    def get_employee_detail(self, form, obj):\n        self.allow_list = []\n        self.deduct_list = []\n        self.total = 0.00\n        gross = False\n        net = False\n\n        payslip_lines = self.cal_monthly_amt(form, obj.id)\n        for line in payslip_lines:\n            for line[0] in line:\n                if line[0][0] == \"Gross\":\n                    gross = line[0]\n                elif line[0][0] == \"Net\":\n                    net = line[0]\n                elif line[0][13] > 0.0 and line[0][0] != \"Net\":\n                    self.total += line[0][len(line[0]) - 1]\n                    self.allow_list.append(line[0])\n                elif line[0][13] < 0.0:\n                    self.total += line[0][len(line[0]) - 1]\n                    self.deduct_list.append(line[0])\n        if gross:\n            self.allow_list.append(gross)\n        if net:\n            self.deduct_list.append(net)\n        return None\n\n    def cal_monthly_amt(self, form, emp_id):\n        result = []\n        res = []\n        salaries = {}\n        self.env.cr.execute('''SELECT rc.code, pl.name, sum(pl.total), \\\n                to_char(date_to,'mm-yyyy') as to_date  FROM hr_payslip_line as pl \\\n                LEFT JOIN hr_salary_rule_category AS rc on (pl.category_id = rc.id) \\\n                LEFT JOIN hr_payslip as p on pl.slip_id = p.id \\\n                LEFT JOIN hr_employee as emp on emp.id = p.employee_id \\\n                WHERE p.employee_id = %s \\\n                GROUP BY rc.parent_id, pl.sequence, pl.id, pl.category_id,pl.name,p.date_to,rc.code \\\n                ORDER BY pl.sequence, rc.parent_id''', (emp_id,))\n        salary = self.env.cr.fetchall()\n        for category in salary:\n            if category[0] not in salaries:\n                salaries.setdefault(category[0], {})\n                salaries[category[0]].update({category[1]: {category[3]: category[2]}})\n            elif category[1] not in salaries[category[0]]:\n                salaries[category[0]].setdefault(category[1], {})\n                salaries[category[0]][category[1]].update({category[3]: category[2]})\n            else:\n                salaries[category[0]][category[1]].update({category[3]: category[2]})\n\n        categories = self.env['hr.salary.rule.category'].search([]).mapped('code')\n        for code in categories:\n            if code in salaries:\n                res = self.salary_list(salaries[code])\n            result.append(res)\n        return result\n\n    def salary_list(self, salaries):\n        cat_salary_all = []\n        for category_name, amount in salaries.items():\n            cat_salary = []\n            total = 0.0\n            cat_salary.append(category_name)\n            for mnth in self.mnths:\n                if mnth != 'None':\n                    if len(mnth) != 7:\n                        mnth = '0' + str(mnth)\n                    if mnth in amount and amount[mnth]:\n                        cat_salary.append(amount[mnth])\n                        total += amount[mnth]\n                    else:\n                        cat_salary.append(0.00)\n                else:\n                    cat_salary.append('')\n            cat_salary.append(total)\n            cat_salary_all.append(cat_salary)\n        return cat_salary_all\n\n    def get_allow(self):\n        return self.allow_list\n\n    def get_deduct(self):\n        return self.deduct_list\n\n    def get_total(self):\n        return self.total\n\n    @api.model\n    def get_report_values(self, docids, data=None):\n        if not self.env.context.get('active_model') or not self.env.context.get('active_id'):\n            raise UserError(_(\"Form content is missing, this report cannot be printed.\"))\n\n        model = self.env.context.get('active_model')\n        docs = self.env[model].browse(self.env.context.get('active_id'))\n        return {\n            'doc_ids': docids,\n            'doc_model': model,\n            'data': data,\n            'docs': docs,\n            'get_employee': self.get_employee,\n            'get_employee_detail': self.get_employee_detail,\n            'cal_monthly_amt': self.cal_monthly_amt,\n            'get_periods': self.get_periods,\n            'get_total': self.get_total,\n            'get_allow': self.get_allow,\n            'get_deduct': self.get_deduct,\n        }\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "report_hr_yearly_salary_detail.py", "id": "f4f0f9cf1ac90853bd6584f428c3fdeb", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/l10n_in_hr_payroll/report/report_hr_yearly_salary_detail.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}