{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    parse_iso8601,\n    int_or_none,\n    ExtractorError,\n)\n\n\nclass TheInterceptIE(InfoExtractor):\n    _VALID_URL = r'https?://theintercept\\.com/fieldofvision/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'https://theintercept.com/fieldofvision/thisisacoup-episode-four-surrender-or-die/',\n        'md5': '145f28b41d44aab2f87c0a4ac8ec95bd',\n        'info_dict': {\n            'id': '46214',\n            'ext': 'mp4',\n            'title': '\n            'description': 'md5:74dd27f0e2fbd50817829f97eaa33140',\n            'timestamp': 1450429239,\n            'upload_date': '20151218',\n            'comment_count': int,\n        }\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n\n        json_data = self._parse_json(self._search_regex(\n            r'initialStoreTree\\s*=\\s*(?P<json_data>{.+})', webpage,\n            'initialStoreTree'), display_id)\n\n        for post in json_data['resources']['posts'].values():\n            if post['slug'] == display_id:\n                return {\n                    '_type': 'url_transparent',\n                    'url': 'jwplatform:%s' % post['fov_videoid'],\n                    'id': compat_str(post['ID']),\n                    'display_id': display_id,\n                    'title': post['title'],\n                    'description': post.get('excerpt'),\n                    'timestamp': parse_iso8601(post.get('date')),\n                    'comment_count': int_or_none(post.get('comments_number')),\n                }\n        raise ExtractorError('Unable to find the current post')\n", "comments": "# coding: utf-8\n#]+)'\n#ThisIsACoup \u2013 Episode Four: Surrender or Die',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    parse_iso8601,\n    int_or_none,\n    ExtractorError,\n)\n\n\nclass TheInterceptIE(InfoExtractor):\n    _VALID_URL = r'https?://theintercept\\.com/fieldofvision/(?P<id>[^/?#]+)'\n    _TESTS = [{\n        'url': 'https://theintercept.com/fieldofvision/thisisacoup-episode-four-surrender-or-die/',\n        'md5': '145f28b41d44aab2f87c0a4ac8ec95bd',\n        'info_dict': {\n            'id': '46214',\n            'ext': 'mp4',\n            'title': '#ThisIsACoup \u2013 Episode Four: Surrender or Die',\n            'description': 'md5:74dd27f0e2fbd50817829f97eaa33140',\n            'timestamp': 1450429239,\n            'upload_date': '20151218',\n            'comment_count': int,\n        }\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n\n        json_data = self._parse_json(self._search_regex(\n            r'initialStoreTree\\s*=\\s*(?P<json_data>{.+})', webpage,\n            'initialStoreTree'), display_id)\n\n        for post in json_data['resources']['posts'].values():\n            if post['slug'] == display_id:\n                return {\n                    '_type': 'url_transparent',\n                    'url': 'jwplatform:%s' % post['fov_videoid'],\n                    'id': compat_str(post['ID']),\n                    'display_id': display_id,\n                    'title': post['title'],\n                    'description': post.get('excerpt'),\n                    'timestamp': parse_iso8601(post.get('date')),\n                    'comment_count': int_or_none(post.get('comments_number')),\n                }\n        raise ExtractorError('Unable to find the current post')\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "theintercept.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/theintercept.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}