{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    dict_get,\n    int_or_none,\n    try_get,\n)\n\n\nclass SVTBaseIE(InfoExtractor):\n    _GEO_COUNTRIES = ['SE']\n\n    def _extract_video(self, video_info, video_id):\n        formats = []\n        for vr in video_info['videoReferences']:\n            player_type = vr.get('playerType') or vr.get('format')\n            vurl = vr['url']\n            ext = determine_ext(vurl)\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    vurl, video_id,\n                    ext='mp4', entry_protocol='m3u8_native',\n                    m3u8_id=player_type, fatal=False))\n            elif ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    vurl + '?hdcore=3.3.0', video_id,\n                    f4m_id=player_type, fatal=False))\n            elif ext == 'mpd':\n                if player_type == 'dashhbbtv':\n                    formats.extend(self._extract_mpd_formats(\n                        vurl, video_id, mpd_id=player_type, fatal=False))\n            else:\n                formats.append({\n                    'format_id': player_type,\n                    'url': vurl,\n                })\n        if not formats and video_info.get('rights', {}).get('geoBlockedSweden'):\n            self.raise_geo_restricted(\n                'This video is only available in Sweden',\n                countries=self._GEO_COUNTRIES)\n        self._sort_formats(formats)\n\n        subtitles = {}\n        subtitle_references = dict_get(video_info, ('subtitles', 'subtitleReferences'))\n        if isinstance(subtitle_references, list):\n            for sr in subtitle_references:\n                subtitle_url = sr.get('url')\n                subtitle_lang = sr.get('language', 'sv')\n                if subtitle_url:\n                    if determine_ext(subtitle_url) == 'm3u8':\n                        \n                        continue\n\n                    subtitles.setdefault(subtitle_lang, []).append({'url': subtitle_url})\n\n        title = video_info.get('title')\n\n        series = video_info.get('programTitle')\n        season_number = int_or_none(video_info.get('season'))\n        episode = video_info.get('episodeTitle')\n        episode_number = int_or_none(video_info.get('episodeNumber'))\n\n        duration = int_or_none(dict_get(video_info, ('materialLength', 'contentDuration')))\n        age_limit = None\n        adult = dict_get(\n            video_info, ('inappropriateForChildren', 'blockedForChildren'),\n            skip_false_values=False)\n        if adult is not None:\n            age_limit = 18 if adult else 0\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'subtitles': subtitles,\n            'duration': duration,\n            'age_limit': age_limit,\n            'series': series,\n            'season_number': season_number,\n            'episode': episode,\n            'episode_number': episode_number,\n        }\n\n\nclass SVTIE(SVTBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?svt\\.se/wd\\?(?:.*?&)?widgetId=(?P<widget_id>\\d+)&.*?\\barticleId=(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.svt.se/wd?widgetId=23991&sectionId=541&articleId=2900353&type=embed&contextSectionId=123&autostart=false',\n        'md5': '33e9a5d8f646523ce0868ecfb0eed77d',\n        'info_dict': {\n            'id': '2900353',\n            'ext': 'mp4',\n            'title': 'Stj\u00e4rnorna skojar till det - under SVT-intervjun',\n            'duration': 27,\n            'age_limit': 0,\n        },\n    }\n\n    @staticmethod\n    def _extract_url(webpage):\n        mobj = re.search(\n            r'(?:<iframe src|href)=\"(?P<url>%s[^\"]*)\"' % SVTIE._VALID_URL, webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        widget_id = mobj.group('widget_id')\n        article_id = mobj.group('id')\n\n        info = self._download_json(\n            'http://www.svt.se/wd?widgetId=%s&articleId=%s&format=json&type=embed&output=json' % (widget_id, article_id),\n            article_id)\n\n        info_dict = self._extract_video(info['video'], article_id)\n        info_dict['title'] = info['context']['title']\n        return info_dict\n\n\nclass SVTPlayIE(SVTBaseIE):\n    IE_DESC = 'SVT Play and \u00d6ppet arkiv'\n    _VALID_URL = r'https?://(?:www\\.)?(?:svtplay|oppetarkiv)\\.se/(?:video|klipp)/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.svtplay.se/video/5996901/flygplan-till-haile-selassie/flygplan-till-haile-selassie-2',\n        'md5': '2b6704fe4a28801e1a098bbf3c5ac611',\n        'info_dict': {\n            'id': '5996901',\n            'ext': 'mp4',\n            'title': 'Flygplan till Haile Selassie',\n            'duration': 3527,\n            'thumbnail': r're:^https?://.*[\\.-]jpg$',\n            'age_limit': 0,\n            'subtitles': {\n                'sv': [{\n                    'ext': 'wsrt',\n                }]\n            },\n        },\n    }, {\n        \n        'url': 'http://www.oppetarkiv.se/video/5219710/trollflojten',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.svtplay.se/klipp/9023742/stopptid-om-bjorn-borg',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        data = self._parse_json(\n            self._search_regex(\n                r'root\\[\"__svtplay\"\\]\\s*=\\s*([^;]+);',\n                webpage, 'embedded data', default='{}'),\n            video_id, fatal=False)\n\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        if data:\n            video_info = try_get(\n                data, lambda x: x['context']['dispatcher']['stores']['VideoTitlePageStore']['data']['video'],\n                dict)\n            if video_info:\n                info_dict = self._extract_video(video_info, video_id)\n                info_dict.update({\n                    'title': data['context']['dispatcher']['stores']['MetaStore']['title'],\n                    'thumbnail': thumbnail,\n                })\n                return info_dict\n\n        video_id = self._search_regex(\n            r'<video[^>]+data-video-id=[\"\\']([\\da-zA-Z-]+)',\n            webpage, 'video id', default=None)\n\n        if video_id:\n            data = self._download_json(\n                'https://api.svt.se/videoplayer-api/video/%s' % video_id,\n                video_id, headers=self.geo_verification_headers())\n            info_dict = self._extract_video(data, video_id)\n            if not info_dict.get('title'):\n                info_dict['title'] = re.sub(\n                    r'\\s*\\|\\s*.+?$', '',\n                    info_dict.get('episode') or self._og_search_title(webpage))\n            return info_dict\n", "comments": "# coding: utf-8\n# TODO(yan12125): handle WebVTT in m3u8 manifests\n# geo restricted to Sweden\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    dict_get,\n    int_or_none,\n    try_get,\n)\n\n\nclass SVTBaseIE(InfoExtractor):\n    _GEO_COUNTRIES = ['SE']\n\n    def _extract_video(self, video_info, video_id):\n        formats = []\n        for vr in video_info['videoReferences']:\n            player_type = vr.get('playerType') or vr.get('format')\n            vurl = vr['url']\n            ext = determine_ext(vurl)\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    vurl, video_id,\n                    ext='mp4', entry_protocol='m3u8_native',\n                    m3u8_id=player_type, fatal=False))\n            elif ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    vurl + '?hdcore=3.3.0', video_id,\n                    f4m_id=player_type, fatal=False))\n            elif ext == 'mpd':\n                if player_type == 'dashhbbtv':\n                    formats.extend(self._extract_mpd_formats(\n                        vurl, video_id, mpd_id=player_type, fatal=False))\n            else:\n                formats.append({\n                    'format_id': player_type,\n                    'url': vurl,\n                })\n        if not formats and video_info.get('rights', {}).get('geoBlockedSweden'):\n            self.raise_geo_restricted(\n                'This video is only available in Sweden',\n                countries=self._GEO_COUNTRIES)\n        self._sort_formats(formats)\n\n        subtitles = {}\n        subtitle_references = dict_get(video_info, ('subtitles', 'subtitleReferences'))\n        if isinstance(subtitle_references, list):\n            for sr in subtitle_references:\n                subtitle_url = sr.get('url')\n                subtitle_lang = sr.get('language', 'sv')\n                if subtitle_url:\n                    if determine_ext(subtitle_url) == 'm3u8':\n                        # TODO(yan12125): handle WebVTT in m3u8 manifests\n                        continue\n\n                    subtitles.setdefault(subtitle_lang, []).append({'url': subtitle_url})\n\n        title = video_info.get('title')\n\n        series = video_info.get('programTitle')\n        season_number = int_or_none(video_info.get('season'))\n        episode = video_info.get('episodeTitle')\n        episode_number = int_or_none(video_info.get('episodeNumber'))\n\n        duration = int_or_none(dict_get(video_info, ('materialLength', 'contentDuration')))\n        age_limit = None\n        adult = dict_get(\n            video_info, ('inappropriateForChildren', 'blockedForChildren'),\n            skip_false_values=False)\n        if adult is not None:\n            age_limit = 18 if adult else 0\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'subtitles': subtitles,\n            'duration': duration,\n            'age_limit': age_limit,\n            'series': series,\n            'season_number': season_number,\n            'episode': episode,\n            'episode_number': episode_number,\n        }\n\n\nclass SVTIE(SVTBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?svt\\.se/wd\\?(?:.*?&)?widgetId=(?P<widget_id>\\d+)&.*?\\barticleId=(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.svt.se/wd?widgetId=23991&sectionId=541&articleId=2900353&type=embed&contextSectionId=123&autostart=false',\n        'md5': '33e9a5d8f646523ce0868ecfb0eed77d',\n        'info_dict': {\n            'id': '2900353',\n            'ext': 'mp4',\n            'title': 'Stj\u00e4rnorna skojar till det - under SVT-intervjun',\n            'duration': 27,\n            'age_limit': 0,\n        },\n    }\n\n    @staticmethod\n    def _extract_url(webpage):\n        mobj = re.search(\n            r'(?:<iframe src|href)=\"(?P<url>%s[^\"]*)\"' % SVTIE._VALID_URL, webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        widget_id = mobj.group('widget_id')\n        article_id = mobj.group('id')\n\n        info = self._download_json(\n            'http://www.svt.se/wd?widgetId=%s&articleId=%s&format=json&type=embed&output=json' % (widget_id, article_id),\n            article_id)\n\n        info_dict = self._extract_video(info['video'], article_id)\n        info_dict['title'] = info['context']['title']\n        return info_dict\n\n\nclass SVTPlayIE(SVTBaseIE):\n    IE_DESC = 'SVT Play and \u00d6ppet arkiv'\n    _VALID_URL = r'https?://(?:www\\.)?(?:svtplay|oppetarkiv)\\.se/(?:video|klipp)/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.svtplay.se/video/5996901/flygplan-till-haile-selassie/flygplan-till-haile-selassie-2',\n        'md5': '2b6704fe4a28801e1a098bbf3c5ac611',\n        'info_dict': {\n            'id': '5996901',\n            'ext': 'mp4',\n            'title': 'Flygplan till Haile Selassie',\n            'duration': 3527,\n            'thumbnail': r're:^https?://.*[\\.-]jpg$',\n            'age_limit': 0,\n            'subtitles': {\n                'sv': [{\n                    'ext': 'wsrt',\n                }]\n            },\n        },\n    }, {\n        # geo restricted to Sweden\n        'url': 'http://www.oppetarkiv.se/video/5219710/trollflojten',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.svtplay.se/klipp/9023742/stopptid-om-bjorn-borg',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        data = self._parse_json(\n            self._search_regex(\n                r'root\\[\"__svtplay\"\\]\\s*=\\s*([^;]+);',\n                webpage, 'embedded data', default='{}'),\n            video_id, fatal=False)\n\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        if data:\n            video_info = try_get(\n                data, lambda x: x['context']['dispatcher']['stores']['VideoTitlePageStore']['data']['video'],\n                dict)\n            if video_info:\n                info_dict = self._extract_video(video_info, video_id)\n                info_dict.update({\n                    'title': data['context']['dispatcher']['stores']['MetaStore']['title'],\n                    'thumbnail': thumbnail,\n                })\n                return info_dict\n\n        video_id = self._search_regex(\n            r'<video[^>]+data-video-id=[\"\\']([\\da-zA-Z-]+)',\n            webpage, 'video id', default=None)\n\n        if video_id:\n            data = self._download_json(\n                'https://api.svt.se/videoplayer-api/video/%s' % video_id,\n                video_id, headers=self.geo_verification_headers())\n            info_dict = self._extract_video(data, video_id)\n            if not info_dict.get('title'):\n                info_dict['title'] = re.sub(\n                    r'\\s*\\|\\s*.+?$', '',\n                    info_dict.get('episode') or self._og_search_title(webpage))\n            return info_dict\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "svt.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/svt.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}