{"author": "ansible", "code": " (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\n\nfrom ansible.compat.tests import BUILTINS, unittest\nfrom ansible.compat.tests.mock import mock_open, patch\nfrom ansible.errors import AnsibleError\nfrom ansible.parsing.yaml.objects import AnsibleBaseYAMLObject\n\n\nclass TestErrors(unittest.TestCase):\n\n    def setUp(self):\n        self.message = 'This is the error message'\n        self.unicode_message = 'This is an error with \\xf0\\x9f\\x98\\xa8 in it'\n\n        self.obj = AnsibleBaseYAMLObject()\n\n    def tearDown(self):\n        pass\n\n    def test_basic_error(self):\n        e = AnsibleError(self.message)\n        self.assertEqual(e.message, self.message)\n        self.assertEqual(e.__repr__(), self.message)\n\n    def test_basic_unicode_error(self):\n        e = AnsibleError(self.unicode_message)\n        self.assertEqual(e.message, self.unicode_message)\n        self.assertEqual(e.__repr__(), self.unicode_message)\n\n    @patch.object(AnsibleError, '_get_error_lines_from_file')\n    def test_error_with_object(self, mock_method):\n        self.obj.ansible_pos = ('foo.yml', 1, 1)\n\n        mock_method.return_value = ('this is line 1\\n', '')\n        e = AnsibleError(self.message, self.obj)\n\n        self.assertEqual(\n            e.message,\n            (\"This is the error message\\n\\nThe error appears to have been in 'foo.yml': line 1, column 1, but may\\nbe elsewhere in the file depending on the \"\n             \"exact syntax problem.\\n\\nThe offending line appears to be:\\n\\n\\nthis is line 1\\n^ here\\n\")\n        )\n\n    def test_get_error_lines_from_file(self):\n        m = mock_open()\n        m.return_value.readlines.return_value = ['this is line 1\\n']\n\n        with patch('{0}.open'.format(BUILTINS), m):\n             this line will be found in the file\n            self.obj.ansible_pos = ('foo.yml', 1, 1)\n            e = AnsibleError(self.message, self.obj)\n            self.assertEqual(\n                e.message,\n                (\"This is the error message\\n\\nThe error appears to have been in 'foo.yml': line 1, column 1, but may\\nbe elsewhere in the file depending on \"\n                 \"the exact syntax problem.\\n\\nThe offending line appears to be:\\n\\n\\nthis is line 1\\n^ here\\n\")\n            )\n\n             this line will not be found, as it is out of the index range\n            self.obj.ansible_pos = ('foo.yml', 2, 1)\n            e = AnsibleError(self.message, self.obj)\n            self.assertEqual(\n                e.message,\n                (\"This is the error message\\n\\nThe error appears to have been in 'foo.yml': line 2, column 1, but may\\nbe elsewhere in the file depending on \"\n                 \"the exact syntax problem.\\n\\n(specified line no longer in file, maybe it changed?)\")\n            )\n\n        m = mock_open()\n        m.return_value.readlines.return_value = ['this line has unicode \\xf0\\x9f\\x98\\xa8 in it!\\n']\n\n        with patch('{0}.open'.format(BUILTINS), m):\n             this line will be found in the file\n            self.obj.ansible_pos = ('foo.yml', 1, 1)\n            e = AnsibleError(self.unicode_message, self.obj)\n            self.assertEqual(\n                e.message,\n                (\"This is an error with \\xf0\\x9f\\x98\\xa8 in it\\n\\nThe error appears to have been in 'foo.yml': line 1, column 1, but may\\nbe elsewhere in the \"\n                 \"file depending on the exact syntax problem.\\n\\nThe offending line appears to be:\\n\\n\\nthis line has unicode \\xf0\\x9f\\x98\\xa8 in it!\\n^ \"\n                 \"here\\n\")\n            )\n", "comments": "  (c) 2012 2014  michael dehaan  michael dehaan gmail com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish    line found file    line found  index range    line found file ", "content": "# (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\n\nfrom ansible.compat.tests import BUILTINS, unittest\nfrom ansible.compat.tests.mock import mock_open, patch\nfrom ansible.errors import AnsibleError\nfrom ansible.parsing.yaml.objects import AnsibleBaseYAMLObject\n\n\nclass TestErrors(unittest.TestCase):\n\n    def setUp(self):\n        self.message = 'This is the error message'\n        self.unicode_message = 'This is an error with \\xf0\\x9f\\x98\\xa8 in it'\n\n        self.obj = AnsibleBaseYAMLObject()\n\n    def tearDown(self):\n        pass\n\n    def test_basic_error(self):\n        e = AnsibleError(self.message)\n        self.assertEqual(e.message, self.message)\n        self.assertEqual(e.__repr__(), self.message)\n\n    def test_basic_unicode_error(self):\n        e = AnsibleError(self.unicode_message)\n        self.assertEqual(e.message, self.unicode_message)\n        self.assertEqual(e.__repr__(), self.unicode_message)\n\n    @patch.object(AnsibleError, '_get_error_lines_from_file')\n    def test_error_with_object(self, mock_method):\n        self.obj.ansible_pos = ('foo.yml', 1, 1)\n\n        mock_method.return_value = ('this is line 1\\n', '')\n        e = AnsibleError(self.message, self.obj)\n\n        self.assertEqual(\n            e.message,\n            (\"This is the error message\\n\\nThe error appears to have been in 'foo.yml': line 1, column 1, but may\\nbe elsewhere in the file depending on the \"\n             \"exact syntax problem.\\n\\nThe offending line appears to be:\\n\\n\\nthis is line 1\\n^ here\\n\")\n        )\n\n    def test_get_error_lines_from_file(self):\n        m = mock_open()\n        m.return_value.readlines.return_value = ['this is line 1\\n']\n\n        with patch('{0}.open'.format(BUILTINS), m):\n            # this line will be found in the file\n            self.obj.ansible_pos = ('foo.yml', 1, 1)\n            e = AnsibleError(self.message, self.obj)\n            self.assertEqual(\n                e.message,\n                (\"This is the error message\\n\\nThe error appears to have been in 'foo.yml': line 1, column 1, but may\\nbe elsewhere in the file depending on \"\n                 \"the exact syntax problem.\\n\\nThe offending line appears to be:\\n\\n\\nthis is line 1\\n^ here\\n\")\n            )\n\n            # this line will not be found, as it is out of the index range\n            self.obj.ansible_pos = ('foo.yml', 2, 1)\n            e = AnsibleError(self.message, self.obj)\n            self.assertEqual(\n                e.message,\n                (\"This is the error message\\n\\nThe error appears to have been in 'foo.yml': line 2, column 1, but may\\nbe elsewhere in the file depending on \"\n                 \"the exact syntax problem.\\n\\n(specified line no longer in file, maybe it changed?)\")\n            )\n\n        m = mock_open()\n        m.return_value.readlines.return_value = ['this line has unicode \\xf0\\x9f\\x98\\xa8 in it!\\n']\n\n        with patch('{0}.open'.format(BUILTINS), m):\n            # this line will be found in the file\n            self.obj.ansible_pos = ('foo.yml', 1, 1)\n            e = AnsibleError(self.unicode_message, self.obj)\n            self.assertEqual(\n                e.message,\n                (\"This is an error with \\xf0\\x9f\\x98\\xa8 in it\\n\\nThe error appears to have been in 'foo.yml': line 1, column 1, but may\\nbe elsewhere in the \"\n                 \"file depending on the exact syntax problem.\\n\\nThe offending line appears to be:\\n\\n\\nthis line has unicode \\xf0\\x9f\\x98\\xa8 in it!\\n^ \"\n                 \"here\\n\")\n            )\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_errors.py", "id": "23b699fd87f6113658ab7d1fd44780c8", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/errors/test_errors.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}