{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    float_or_none,\n    get_element_by_class,\n    int_or_none,\n    js_to_json,\n    NO_DEFAULT,\n    parse_iso8601,\n    remove_start,\n    strip_or_none,\n    url_basename,\n)\n\n\nclass OnetBaseIE(InfoExtractor):\n    def _search_mvp_id(self, webpage):\n        return self._search_regex(\n            r'id=([\"\\'])mvp:(?P<id>.+?)\\1', webpage, 'mvp id', group='id')\n\n    def _extract_from_id(self, video_id, webpage=None):\n        response = self._download_json(\n            'http://qi.ckm.onetapi.pl/', video_id,\n            query={\n                'body[id]': video_id,\n                'body[jsonrpc]': '2.0',\n                'body[method]': 'get_asset_detail',\n                'body[params][ID_Publikacji]': video_id,\n                'body[params][Service]': 'www.onet.pl',\n                'content-type': 'application/jsonp',\n                'x-onet-app': 'player.front.onetapi.pl',\n            })\n\n        error = response.get('error')\n        if error:\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, error['message']), expected=True)\n\n        video = response['result'].get('0')\n\n        formats = []\n        for _, formats_dict in video['formats'].items():\n            if not isinstance(formats_dict, dict):\n                continue\n            for format_id, format_list in formats_dict.items():\n                if not isinstance(format_list, list):\n                    continue\n                for f in format_list:\n                    video_url = f.get('url')\n                    if not video_url:\n                        continue\n                    ext = determine_ext(video_url)\n                    if format_id == 'ism':\n                        formats.extend(self._extract_ism_formats(\n                            video_url, video_id, 'mss', fatal=False))\n                    elif ext == 'mpd':\n                        formats.extend(self._extract_mpd_formats(\n                            video_url, video_id, mpd_id='dash', fatal=False))\n                    else:\n                        formats.append({\n                            'url': video_url,\n                            'format_id': format_id,\n                            'height': int_or_none(f.get('vertical_resolution')),\n                            'width': int_or_none(f.get('horizontal_resolution')),\n                            'abr': float_or_none(f.get('audio_bitrate')),\n                            'vbr': float_or_none(f.get('video_bitrate')),\n                        })\n        self._sort_formats(formats)\n\n        meta = video.get('meta', {})\n\n        title = (self._og_search_title(\n            webpage, default=None) if webpage else None) or meta['title']\n        description = (self._og_search_description(\n            webpage, default=None) if webpage else None) or meta.get('description')\n        duration = meta.get('length') or meta.get('lenght')\n        timestamp = parse_iso8601(meta.get('addDate'), ' ')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'timestamp': timestamp,\n            'formats': formats,\n        }\n\n\nclass OnetMVPIE(OnetBaseIE):\n    _VALID_URL = r'onetmvp:(?P<id>\\d+\\.\\d+)'\n\n    _TEST = {\n        'url': 'onetmvp:381027.1509591944',\n        'only_matching': True,\n    }\n\n    def _real_extract(self, url):\n        return self._extract_from_id(self._match_id(url))\n\n\nclass OnetIE(OnetBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?onet\\.tv/[a-z]/[a-z]+/(?P<display_id>[0-9a-z-]+)/(?P<id>[0-9a-z]+)'\n    IE_NAME = 'onet.tv'\n\n    _TEST = {\n        'url': 'http://onet.tv/k/openerfestival/open-er-festival-2016-najdziwniejsze-wymagania-gwiazd/qbpyqc',\n        'md5': 'e3ffbf47590032ac3f27249204173d50',\n        'info_dict': {\n            'id': 'qbpyqc',\n            'display_id': 'open-er-festival-2016-najdziwniejsze-wymagania-gwiazd',\n            'ext': 'mp4',\n            'title': 'Open\\'er Festival 2016: najdziwniejsze wymagania gwiazd',\n            'description': 'Trzy samochody, kt\u00f3rych nigdy nie u\u017cyto, prywatne spa, hotel dekorowany czarnym suknem czy nielegalne u\u017cywki. Organizatorzy koncert\u00f3w i festiwali musz\u0105 stawa\u0107 przed nie lada wyzwaniem zapraszaj\u0105c gwia...',\n            'upload_date': '20160705',\n            'timestamp': 1467721580,\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        display_id, video_id = mobj.group('display_id', 'id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        mvp_id = self._search_mvp_id(webpage)\n\n        info_dict = self._extract_from_id(mvp_id, webpage)\n        info_dict.update({\n            'id': video_id,\n            'display_id': display_id,\n        })\n\n        return info_dict\n\n\nclass OnetChannelIE(OnetBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?onet\\.tv/[a-z]/(?P<id>[a-z]+)(?:[?\n    IE_NAME = 'onet.tv:channel'\n\n    _TEST = {\n        'url': 'http://onet.tv/k/openerfestival',\n        'info_dict': {\n            'id': 'openerfestival',\n            'title': 'Open\\'er Festival Live',\n            'description': 'Dzi\u0119kujemy, \u017ce ogl\u0105dali\u015bcie transmisje. Zobaczcie nasze relacje i wywiady z artystami.',\n        },\n        'playlist_mincount': 46,\n    }\n\n    def _real_extract(self, url):\n        channel_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, channel_id)\n\n        current_clip_info = self._parse_json(self._search_regex(\n            r'var\\s+currentClip\\s*=\\s*({[^}]+})', webpage, 'video info'), channel_id,\n            transform_source=lambda s: js_to_json(re.sub(r'\\'\\s*\\+\\s*\\'', '', s)))\n        video_id = remove_start(current_clip_info['ckmId'], 'mvp:')\n        video_name = url_basename(current_clip_info['url'])\n\n        if self._downloader.params.get('noplaylist'):\n            self.to_screen(\n                'Downloading just video %s because of --no-playlist' % video_name)\n            return self._extract_from_id(video_id, webpage)\n\n        self.to_screen(\n            'Downloading channel %s - add --no-playlist to just download video %s' % (\n                channel_id, video_name))\n        matches = re.findall(\n            r'<a[^>]+href=[\\'\"](https?://(?:www\\.)?onet\\.tv/[a-z]/[a-z]+/[0-9a-z-]+/[0-9a-z]+)',\n            webpage)\n        entries = [\n            self.url_result(video_link, OnetIE.ie_key())\n            for video_link in matches]\n\n        channel_title = strip_or_none(get_element_by_class('o_channelName', webpage))\n        channel_description = strip_or_none(get_element_by_class('o_channelDesc', webpage))\n        return self.playlist_result(entries, channel_id, channel_title, channel_description)\n\n\nclass OnetPlIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:[^/]+\\.)?(?:onet|businessinsider\\.com|plejada)\\.pl/(?:[^/]+/)+(?P<id>[0-9a-z]+)'\n    IE_NAME = 'onet.pl'\n\n    _TESTS = [{\n        'url': 'http://eurosport.onet.pl/zimowe/skoki-narciarskie/ziobro-wygral-kwalifikacje-w-pjongczangu/9ckrly',\n        'md5': 'b94021eb56214c3969380388b6e73cb0',\n        'info_dict': {\n            'id': '1561707.1685479',\n            'ext': 'mp4',\n            'title': 'Ziobro wygra\u0142 kwalifikacje w Pjongczangu',\n            'description': 'md5:61fb0740084d2d702ea96512a03585b4',\n            'upload_date': '20170214',\n            'timestamp': 1487078046,\n        },\n    }, {\n        \n        'url': 'http://film.onet.pl/pensjonat-nad-rozlewiskiem-relacja-z-planu-serialu/y428n0',\n        'info_dict': {\n            'id': '501235.965429946',\n            'ext': 'mp4',\n            'title': '\"Pensjonat nad rozlewiskiem\": relacja z planu serialu',\n            'upload_date': '20170622',\n            'timestamp': 1498159955,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://film.onet.pl/zwiastuny/ghost-in-the-shell-drugi-zwiastun-pl/5q6yl3',\n        'only_matching': True,\n    }, {\n        'url': 'http://moto.onet.pl/jak-wybierane-sa-miejsca-na-fotoradary/6rs04e',\n        'only_matching': True,\n    }, {\n        'url': 'http://businessinsider.com.pl/wideo/scenariusz-na-koniec-swiata-wedlug-nasa/dwnqptk',\n        'only_matching': True,\n    }, {\n        'url': 'http://plejada.pl/weronika-rosati-o-swoim-domniemanym-slubie/n2bq89',\n        'only_matching': True,\n    }]\n\n    def _search_mvp_id(self, webpage, default=NO_DEFAULT):\n        return self._search_regex(\n            r'data-(?:params-)?mvp=[\"\\'](\\d+\\.\\d+)', webpage, 'mvp id',\n            default=default)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        mvp_id = self._search_mvp_id(webpage, default=None)\n\n        if not mvp_id:\n            pulsembed_url = self._search_regex(\n                r'data-src=([\"\\'])(?P<url>(?:https?:)?//pulsembed\\.eu/.+?)\\1',\n                webpage, 'pulsembed url', group='url')\n            webpage = self._download_webpage(\n                pulsembed_url, video_id, 'Downloading pulsembed webpage')\n            mvp_id = self._search_mvp_id(webpage)\n\n        return self.url_result(\n            'onetmvp:%s' % mvp_id, OnetMVPIE.ie_key(), video_id=mvp_id)\n", "comments": "# coding: utf-8\n#]|$)'\n# embedded via pulsembed\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    float_or_none,\n    get_element_by_class,\n    int_or_none,\n    js_to_json,\n    NO_DEFAULT,\n    parse_iso8601,\n    remove_start,\n    strip_or_none,\n    url_basename,\n)\n\n\nclass OnetBaseIE(InfoExtractor):\n    def _search_mvp_id(self, webpage):\n        return self._search_regex(\n            r'id=([\"\\'])mvp:(?P<id>.+?)\\1', webpage, 'mvp id', group='id')\n\n    def _extract_from_id(self, video_id, webpage=None):\n        response = self._download_json(\n            'http://qi.ckm.onetapi.pl/', video_id,\n            query={\n                'body[id]': video_id,\n                'body[jsonrpc]': '2.0',\n                'body[method]': 'get_asset_detail',\n                'body[params][ID_Publikacji]': video_id,\n                'body[params][Service]': 'www.onet.pl',\n                'content-type': 'application/jsonp',\n                'x-onet-app': 'player.front.onetapi.pl',\n            })\n\n        error = response.get('error')\n        if error:\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, error['message']), expected=True)\n\n        video = response['result'].get('0')\n\n        formats = []\n        for _, formats_dict in video['formats'].items():\n            if not isinstance(formats_dict, dict):\n                continue\n            for format_id, format_list in formats_dict.items():\n                if not isinstance(format_list, list):\n                    continue\n                for f in format_list:\n                    video_url = f.get('url')\n                    if not video_url:\n                        continue\n                    ext = determine_ext(video_url)\n                    if format_id == 'ism':\n                        formats.extend(self._extract_ism_formats(\n                            video_url, video_id, 'mss', fatal=False))\n                    elif ext == 'mpd':\n                        formats.extend(self._extract_mpd_formats(\n                            video_url, video_id, mpd_id='dash', fatal=False))\n                    else:\n                        formats.append({\n                            'url': video_url,\n                            'format_id': format_id,\n                            'height': int_or_none(f.get('vertical_resolution')),\n                            'width': int_or_none(f.get('horizontal_resolution')),\n                            'abr': float_or_none(f.get('audio_bitrate')),\n                            'vbr': float_or_none(f.get('video_bitrate')),\n                        })\n        self._sort_formats(formats)\n\n        meta = video.get('meta', {})\n\n        title = (self._og_search_title(\n            webpage, default=None) if webpage else None) or meta['title']\n        description = (self._og_search_description(\n            webpage, default=None) if webpage else None) or meta.get('description')\n        duration = meta.get('length') or meta.get('lenght')\n        timestamp = parse_iso8601(meta.get('addDate'), ' ')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'timestamp': timestamp,\n            'formats': formats,\n        }\n\n\nclass OnetMVPIE(OnetBaseIE):\n    _VALID_URL = r'onetmvp:(?P<id>\\d+\\.\\d+)'\n\n    _TEST = {\n        'url': 'onetmvp:381027.1509591944',\n        'only_matching': True,\n    }\n\n    def _real_extract(self, url):\n        return self._extract_from_id(self._match_id(url))\n\n\nclass OnetIE(OnetBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?onet\\.tv/[a-z]/[a-z]+/(?P<display_id>[0-9a-z-]+)/(?P<id>[0-9a-z]+)'\n    IE_NAME = 'onet.tv'\n\n    _TEST = {\n        'url': 'http://onet.tv/k/openerfestival/open-er-festival-2016-najdziwniejsze-wymagania-gwiazd/qbpyqc',\n        'md5': 'e3ffbf47590032ac3f27249204173d50',\n        'info_dict': {\n            'id': 'qbpyqc',\n            'display_id': 'open-er-festival-2016-najdziwniejsze-wymagania-gwiazd',\n            'ext': 'mp4',\n            'title': 'Open\\'er Festival 2016: najdziwniejsze wymagania gwiazd',\n            'description': 'Trzy samochody, kt\u00f3rych nigdy nie u\u017cyto, prywatne spa, hotel dekorowany czarnym suknem czy nielegalne u\u017cywki. Organizatorzy koncert\u00f3w i festiwali musz\u0105 stawa\u0107 przed nie lada wyzwaniem zapraszaj\u0105c gwia...',\n            'upload_date': '20160705',\n            'timestamp': 1467721580,\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        display_id, video_id = mobj.group('display_id', 'id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        mvp_id = self._search_mvp_id(webpage)\n\n        info_dict = self._extract_from_id(mvp_id, webpage)\n        info_dict.update({\n            'id': video_id,\n            'display_id': display_id,\n        })\n\n        return info_dict\n\n\nclass OnetChannelIE(OnetBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?onet\\.tv/[a-z]/(?P<id>[a-z]+)(?:[?#]|$)'\n    IE_NAME = 'onet.tv:channel'\n\n    _TEST = {\n        'url': 'http://onet.tv/k/openerfestival',\n        'info_dict': {\n            'id': 'openerfestival',\n            'title': 'Open\\'er Festival Live',\n            'description': 'Dzi\u0119kujemy, \u017ce ogl\u0105dali\u015bcie transmisje. Zobaczcie nasze relacje i wywiady z artystami.',\n        },\n        'playlist_mincount': 46,\n    }\n\n    def _real_extract(self, url):\n        channel_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, channel_id)\n\n        current_clip_info = self._parse_json(self._search_regex(\n            r'var\\s+currentClip\\s*=\\s*({[^}]+})', webpage, 'video info'), channel_id,\n            transform_source=lambda s: js_to_json(re.sub(r'\\'\\s*\\+\\s*\\'', '', s)))\n        video_id = remove_start(current_clip_info['ckmId'], 'mvp:')\n        video_name = url_basename(current_clip_info['url'])\n\n        if self._downloader.params.get('noplaylist'):\n            self.to_screen(\n                'Downloading just video %s because of --no-playlist' % video_name)\n            return self._extract_from_id(video_id, webpage)\n\n        self.to_screen(\n            'Downloading channel %s - add --no-playlist to just download video %s' % (\n                channel_id, video_name))\n        matches = re.findall(\n            r'<a[^>]+href=[\\'\"](https?://(?:www\\.)?onet\\.tv/[a-z]/[a-z]+/[0-9a-z-]+/[0-9a-z]+)',\n            webpage)\n        entries = [\n            self.url_result(video_link, OnetIE.ie_key())\n            for video_link in matches]\n\n        channel_title = strip_or_none(get_element_by_class('o_channelName', webpage))\n        channel_description = strip_or_none(get_element_by_class('o_channelDesc', webpage))\n        return self.playlist_result(entries, channel_id, channel_title, channel_description)\n\n\nclass OnetPlIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:[^/]+\\.)?(?:onet|businessinsider\\.com|plejada)\\.pl/(?:[^/]+/)+(?P<id>[0-9a-z]+)'\n    IE_NAME = 'onet.pl'\n\n    _TESTS = [{\n        'url': 'http://eurosport.onet.pl/zimowe/skoki-narciarskie/ziobro-wygral-kwalifikacje-w-pjongczangu/9ckrly',\n        'md5': 'b94021eb56214c3969380388b6e73cb0',\n        'info_dict': {\n            'id': '1561707.1685479',\n            'ext': 'mp4',\n            'title': 'Ziobro wygra\u0142 kwalifikacje w Pjongczangu',\n            'description': 'md5:61fb0740084d2d702ea96512a03585b4',\n            'upload_date': '20170214',\n            'timestamp': 1487078046,\n        },\n    }, {\n        # embedded via pulsembed\n        'url': 'http://film.onet.pl/pensjonat-nad-rozlewiskiem-relacja-z-planu-serialu/y428n0',\n        'info_dict': {\n            'id': '501235.965429946',\n            'ext': 'mp4',\n            'title': '\"Pensjonat nad rozlewiskiem\": relacja z planu serialu',\n            'upload_date': '20170622',\n            'timestamp': 1498159955,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://film.onet.pl/zwiastuny/ghost-in-the-shell-drugi-zwiastun-pl/5q6yl3',\n        'only_matching': True,\n    }, {\n        'url': 'http://moto.onet.pl/jak-wybierane-sa-miejsca-na-fotoradary/6rs04e',\n        'only_matching': True,\n    }, {\n        'url': 'http://businessinsider.com.pl/wideo/scenariusz-na-koniec-swiata-wedlug-nasa/dwnqptk',\n        'only_matching': True,\n    }, {\n        'url': 'http://plejada.pl/weronika-rosati-o-swoim-domniemanym-slubie/n2bq89',\n        'only_matching': True,\n    }]\n\n    def _search_mvp_id(self, webpage, default=NO_DEFAULT):\n        return self._search_regex(\n            r'data-(?:params-)?mvp=[\"\\'](\\d+\\.\\d+)', webpage, 'mvp id',\n            default=default)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        mvp_id = self._search_mvp_id(webpage, default=None)\n\n        if not mvp_id:\n            pulsembed_url = self._search_regex(\n                r'data-src=([\"\\'])(?P<url>(?:https?:)?//pulsembed\\.eu/.+?)\\1',\n                webpage, 'pulsembed url', group='url')\n            webpage = self._download_webpage(\n                pulsembed_url, video_id, 'Downloading pulsembed webpage')\n            mvp_id = self._search_mvp_id(webpage)\n\n        return self.url_result(\n            'onetmvp:%s' % mvp_id, OnetMVPIE.ie_key(), video_id=mvp_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "onet.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/onet.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}