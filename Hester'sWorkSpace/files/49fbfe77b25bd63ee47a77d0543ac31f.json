{"author": "django", "code": "\"\"\"\nTests for select_related()\n\n``select_related()`` follows all relationships and pre-caches any foreign key\nvalues so that complex trees can be fetched in a single query. However, this\nisn't always a good idea, so the ``depth`` argument control how many \"levels\"\nthe select-related behavior will traverse.\n\"\"\"\n\nfrom django.contrib.contenttypes.fields import (\n    GenericForeignKey, GenericRelation,\n)\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\n\n?\n\n\nclass Domain(models.Model):\n    name = models.CharField(max_length=50)\n\n    def __str__(self):\n        return self.name\n\n\nclass Kingdom(models.Model):\n    name = models.CharField(max_length=50)\n    domain = models.ForeignKey(Domain, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Phylum(models.Model):\n    name = models.CharField(max_length=50)\n    kingdom = models.ForeignKey(Kingdom, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Klass(models.Model):\n    name = models.CharField(max_length=50)\n    phylum = models.ForeignKey(Phylum, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Order(models.Model):\n    name = models.CharField(max_length=50)\n    klass = models.ForeignKey(Klass, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Family(models.Model):\n    name = models.CharField(max_length=50)\n    order = models.ForeignKey(Order, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Genus(models.Model):\n    name = models.CharField(max_length=50)\n    family = models.ForeignKey(Family, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Species(models.Model):\n    name = models.CharField(max_length=50)\n    genus = models.ForeignKey(Genus, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\n\n\nclass HybridSpecies(models.Model):\n    name = models.CharField(max_length=50)\n    parent_1 = models.ForeignKey(Species, models.CASCADE, related_name='child_1')\n    parent_2 = models.ForeignKey(Species, models.CASCADE, related_name='child_2')\n\n    def __str__(self):\n        return self.name\n\n\nclass Topping(models.Model):\n    name = models.CharField(max_length=30)\n\n    def __str__(self):\n        return self.name\n\n\nclass Pizza(models.Model):\n    name = models.CharField(max_length=100)\n    toppings = models.ManyToManyField(Topping)\n\n    def __str__(self):\n        return self.name\n\n\nclass TaggedItem(models.Model):\n    tag = models.CharField(max_length=30)\n\n    content_type = models.ForeignKey(ContentType, models.CASCADE, related_name='select_related_tagged_items')\n    object_id = models.PositiveIntegerField()\n    content_object = GenericForeignKey('content_type', 'object_id')\n\n    def __str__(self):\n        return self.tag\n\n\nclass Bookmark(models.Model):\n    url = models.URLField()\n    tags = GenericRelation(TaggedItem)\n\n    def __str__(self):\n        return self.url\n", "comments": "    tests select related()    select related()   follows relationships pre caches foreign key values complex trees fetched single query  however  always good idea    depth   argument control many  levels  select related behavior traverse         who remembers high school biology     invent new thing model two foreign keys ", "content": "\"\"\"\nTests for select_related()\n\n``select_related()`` follows all relationships and pre-caches any foreign key\nvalues so that complex trees can be fetched in a single query. However, this\nisn't always a good idea, so the ``depth`` argument control how many \"levels\"\nthe select-related behavior will traverse.\n\"\"\"\n\nfrom django.contrib.contenttypes.fields import (\n    GenericForeignKey, GenericRelation,\n)\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\n\n# Who remembers high school biology?\n\n\nclass Domain(models.Model):\n    name = models.CharField(max_length=50)\n\n    def __str__(self):\n        return self.name\n\n\nclass Kingdom(models.Model):\n    name = models.CharField(max_length=50)\n    domain = models.ForeignKey(Domain, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Phylum(models.Model):\n    name = models.CharField(max_length=50)\n    kingdom = models.ForeignKey(Kingdom, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Klass(models.Model):\n    name = models.CharField(max_length=50)\n    phylum = models.ForeignKey(Phylum, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Order(models.Model):\n    name = models.CharField(max_length=50)\n    klass = models.ForeignKey(Klass, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Family(models.Model):\n    name = models.CharField(max_length=50)\n    order = models.ForeignKey(Order, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Genus(models.Model):\n    name = models.CharField(max_length=50)\n    family = models.ForeignKey(Family, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Species(models.Model):\n    name = models.CharField(max_length=50)\n    genus = models.ForeignKey(Genus, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n# and we'll invent a new thing so we have a model with two foreign keys\n\n\nclass HybridSpecies(models.Model):\n    name = models.CharField(max_length=50)\n    parent_1 = models.ForeignKey(Species, models.CASCADE, related_name='child_1')\n    parent_2 = models.ForeignKey(Species, models.CASCADE, related_name='child_2')\n\n    def __str__(self):\n        return self.name\n\n\nclass Topping(models.Model):\n    name = models.CharField(max_length=30)\n\n    def __str__(self):\n        return self.name\n\n\nclass Pizza(models.Model):\n    name = models.CharField(max_length=100)\n    toppings = models.ManyToManyField(Topping)\n\n    def __str__(self):\n        return self.name\n\n\nclass TaggedItem(models.Model):\n    tag = models.CharField(max_length=30)\n\n    content_type = models.ForeignKey(ContentType, models.CASCADE, related_name='select_related_tagged_items')\n    object_id = models.PositiveIntegerField()\n    content_object = GenericForeignKey('content_type', 'object_id')\n\n    def __str__(self):\n        return self.tag\n\n\nclass Bookmark(models.Model):\n    url = models.URLField()\n    tags = GenericRelation(TaggedItem)\n\n    def __str__(self):\n        return self.url\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "49fbfe77b25bd63ee47a77d0543ac31f", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/select_related/models.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}