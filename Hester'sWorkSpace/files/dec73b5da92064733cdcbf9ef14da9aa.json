{"author": "ansible", "code": "\n\n Copyright: Ansible Project\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: sros_config\nversion_added: \"2.2\"\nauthor: \"Peter Sprygada (@privateip)\"\nshort_description: Manage Nokia SR OS device configuration\ndescription:\n  - Nokia SR OS configurations use a simple block indent file syntax\n    for segmenting configuration into sections.  This module provides\n    an implementation for working with SR OS configuration sections in\n    a deterministic way.\nextends_documentation_fragment: sros\noptions:\n  lines:\n    description:\n      - The ordered set of commands that should be configured in the\n        section.  The commands must be the exact same commands as found\n        in the device running-config.  Be sure to note the configuration\n        command syntax as some commands are automatically modified by the\n        device config parser.  The I(lines) argument only supports current\n        context lines.  See EXAMPLES\n    aliases: ['commands']\n  parents:\n    description:\n      - The ordered set of parents that uniquely identify the section or hierarchy\n        the commands should be checked against.  If the parents argument\n        is omitted, the commands are checked against the set of top\n        level or global commands.\n  src:\n    description:\n      - Specifies the source path to the file that contains the configuration\n        or configuration template to load.  The path to the source file can\n        either be the full path on the Ansible control host or a relative\n        path from the playbook or role root directory.  This argument is mutually\n        exclusive with I(lines), I(parents).\n    version_added: \"2.2\"\n  before:\n    description:\n      - The ordered set of commands to push on to the command stack if\n        a change needs to be made.  This allows the playbook designer\n        the opportunity to perform configuration commands prior to pushing\n        any changes without affecting how the set of commands are matched\n        against the system.\n  after:\n    description:\n      - The ordered set of commands to append to the end of the command\n        stack if a change needs to be made.  Just like with I(before) this\n        allows the playbook designer to append a set of commands to be\n        executed after the command set.\n  match:\n    description:\n      - Instructs the module on the way to perform the matching of\n        the set of commands against the current device config.  If\n        match is set to I(line), commands are matched line by line.  If\n        match is set to I(strict), command lines are matched with respect\n        to position.  If match is set to I(exact), command lines\n        must be an equal match.  Finally, if match is set to I(none), the\n        module will not attempt to compare the source configuration with\n        the running configuration on the remote device.\n    default: line\n    choices: ['line', 'strict', 'exact', 'none']\n  replace:\n    description:\n      - Instructs the module on the way to perform the configuration\n        on the device.  If the replace argument is set to I(line) then\n        the modified lines are pushed to the device in configuration\n        mode.  If the replace argument is set to I(block) then the entire\n        command block is pushed to the device in configuration mode if any\n        line is not correct.\n    default: line\n    choices: ['line', 'block']\n  force:\n    description:\n      - The force argument instructs the module to not consider the\n        current devices running-config.  When set to true, this will\n        cause the module to push the contents of I(src) into the device\n        without first checking if already configured.\n      - Note this argument should be considered deprecated.  To achieve\n        the equivalent, set the C(match=none) which is idempotent.  This argument\n        will be removed in a future release.\n    type: bool\n    version_added: \"2.2\"\n  backup:\n    description:\n      - This argument will cause the module to create a full backup of\n        the current C(running-config) from the remote device before any\n        changes are made.  The backup file is written to the C(backup)\n        folder in the playbook root directory.  If the directory does not\n        exist, it is created.\n    type: bool\n    default: 'no'\n    version_added: \"2.2\"\n  config:\n    description:\n      - The C(config) argument allows the playbook designer to supply\n        the base configuration to be used to validate configuration\n        changes necessary.  If this argument is provided, the module\n        will not download the running-config from the remote node.\n    version_added: \"2.2\"\n  defaults:\n    description:\n      - This argument specifies whether or not to collect all defaults\n        when getting the remote device running config.  When enabled,\n        the module will get the current config by issuing the command\n        C(show running-config all).\n    type: bool\n    default: 'no'\n    aliases: ['detail']\n    version_added: \"2.2\"\n  save:\n    description:\n      - The C(save) argument instructs the module to save the running-\n        config to the startup-config at the conclusion of the module\n        running.  If check mode is specified, this argument is ignored.\n    type: bool\n    default: 'no'\n    version_added: \"2.2\"\n\"\"\"\n\nEXAMPLES = \"\"\"\n Note: examples below use the following provider dict to handle\n       transport and authentication to the node.\n---\nvars:\n  cli:\n    host: \"{{ inventory_hostname }}\"\n    username: admin\n    password: admin\n    transport: cli\n\n---\n- name: enable rollback location\n  sros_config:\n    lines: configure system rollback rollback-location \"cf3:/ansible\"\n    provider: \"{{ cli }}\"\n\n- name: set system name to {{ inventory_hostname }} using one line\n  sros_config:\n    lines:\n        - configure system name \"{{ inventory_hostname }}\"\n    provider: \"{{ cli }}\"\n\n- name: set system name to {{ inventory_hostname }} using parents\n  sros_config:\n    lines:\n        - 'name \"{{ inventory_hostname }}\"'\n    parents:\n        - configure\n        - system\n    provider: \"{{ cli }}\"\n    backup: yes\n\n- name: load config from file\n  sros_config:\n      src: \"{{ inventory_hostname }}.cfg\"\n      provider: \"{{ cli }}\"\n      save: yes\n\n- name: invalid use of lines\n  sros_config:\n    lines:\n      - service\n      -     vpls 1000 customer foo 1 create\n      -         description \"invalid lines example\"\n    provider: \"{{ cli }}\"\n\n- name: valid use of lines\n  sros_config:\n    lines:\n      - description \"invalid lines example\"\n    parents:\n      - service\n      - vpls 1000 customer foo 1 create\n    provider: \"{{ cli }}\"\n\"\"\"\n\nRETURN = \"\"\"\nupdates:\n  description: The set of commands that will be pushed to the remote device\n  returned: always\n  type: list\n  sample: ['config system name \"sros01\"']\ncommands:\n  description: The set of commands that will be pushed to the remote device\n  returned: always\n  type: list\n  sample: ['config system name \"sros01\"']\nbackup_path:\n  description: The full path to the backup file\n  returned: when backup is yes\n  type: string\n  sample: /playbooks/ansible/backup/sros_config.2016-07-16@22:28:34\n\"\"\"\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.common.config import NetworkConfig, dumps\nfrom ansible.module_utils.network.sros.sros import sros_argument_spec, check_args\nfrom ansible.module_utils.network.sros.sros import load_config, run_commands, get_config\n\n\ndef get_active_config(module):\n    contents = module.params['config']\n    if not contents:\n        flags = []\n        if module.params['defaults']:\n            flags = ['detail']\n        return get_config(module, flags)\n    return contents\n\n\ndef get_candidate(module):\n    candidate = NetworkConfig(indent=4)\n    if module.params['src']:\n        candidate.load(module.params['src'])\n    elif module.params['lines']:\n        parents = module.params['parents'] or list()\n        candidate.add(module.params['lines'], parents=parents)\n    return candidate\n\n\ndef run(module, result):\n    match = module.params['match']\n\n    candidate = get_candidate(module)\n\n    if match != 'none':\n        config_text = get_active_config(module)\n        config = NetworkConfig(indent=4, contents=config_text)\n        configobjs = candidate.difference(config)\n    else:\n        configobjs = candidate.items\n\n    if configobjs:\n        commands = dumps(configobjs, 'commands')\n        commands = commands.split('\\n')\n\n        result['commands'] = commands\n        result['updates'] = commands\n\n         send the configuration commands to the device and merge\n         them with the current running config\n        if not module.check_mode:\n            load_config(module, commands)\n        result['changed'] = True\n\n\ndef main():\n    \"\"\" main entry point for module execution\n    \"\"\"\n    argument_spec = dict(\n        src=dict(type='path'),\n\n        lines=dict(aliases=['commands'], type='list'),\n        parents=dict(type='list'),\n\n        match=dict(default='line', choices=['line', 'none']),\n\n        config=dict(),\n        defaults=dict(type='bool', default=False, aliases=['detail']),\n\n        backup=dict(type='bool', default=False),\n        save=dict(type='bool', default=False),\n    )\n\n    argument_spec.update(sros_argument_spec)\n\n    mutually_exclusive = [('lines', 'src'),\n                          ('parents', 'src')]\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           mutually_exclusive=mutually_exclusive,\n                           supports_check_mode=True)\n\n    result = dict(changed=False, warnings=list())\n\n    warnings = list()\n    check_args(module, warnings)\n    if warnings:\n        result['warnings'] = warnings\n\n    if module.params['backup']:\n        result['__backup__'] = get_config(module)\n\n    run(module, result)\n\n    if module.params['save']:\n        if not module.check_mode:\n            run_commands(module, ['admin save'])\n        result['changed'] = True\n\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  sros config version added   2 2  author   peter sprygada ( privateip)  short description  manage nokia sr os device configuration description      nokia sr os configurations use simple block indent file syntax     segmenting configuration sections   this module provides     implementation working sr os configuration sections     deterministic way  extends documentation fragment  sros options    lines      description          the ordered set commands configured         section   the commands must exact commands found         device running config   be sure note configuration         command syntax commands automatically modified         device config parser   the i(lines) argument supports current         context lines   see examples     aliases    commands     parents      description          the ordered set parents uniquely identify section hierarchy         commands checked   if parents argument         omitted  commands checked set top         level global commands    src      description          specifies source path file contains configuration         configuration template load   the path source file         either full path ansible control host relative         path playbook role root directory   this argument mutually         exclusive i(lines)  i(parents)      version added   2 2         description          the ordered set commands push command stack         change needs made   this allows playbook designer         opportunity perform configuration commands prior pushing         changes without affecting set commands matched         system         description          the ordered set commands append end command         stack change needs made   just like i(before)         allows playbook designer append set commands         executed command set    match      description          instructs module way perform matching         set commands current device config   if         match set i(line)  commands matched line line   if         match set i(strict)  command lines matched respect         position   if match set i(exact)  command lines         must equal match   finally  match set i(none)          module attempt compare source configuration         running configuration remote device      default  line     choices    line    strict    exact    none     replace      description          instructs module way perform configuration         device   if replace argument set i(line)         modified lines pushed device configuration         mode   if replace argument set i(block) entire         command block pushed device configuration mode         line correct      default  line     choices    line    block     force      description          the force argument instructs module consider         current devices running config   when set true          cause module push contents i(src) device         without first checking already configured          note argument considered deprecated   to achieve         equivalent  set c(match none) idempotent   this argument         removed future release      type  bool     version added   2 2    backup      description          this argument cause module create full backup         current c(running config) remote device         changes made   the backup file written c(backup)         folder playbook root directory   if directory         exist  created      type  bool     default        version added   2 2    config      description          the c(config) argument allows playbook designer supply         base configuration used validate configuration         changes necessary   if argument provided  module         download running config remote node      version added   2 2    defaults      description          this argument specifies whether collect defaults         getting remote device running config   when enabled          module get current config issuing command         c(show running config all)      type  bool     default        aliases    detail       version added   2 2    save      description          the c(save) argument instructs module save running          config startup config conclusion module         running   if check mode specified  argument ignored      type  bool     default        version added   2 2       examples         note  examples use following provider dict handle         transport authentication node      vars    cli      host      inventory hostname         username  admin     password  admin     transport  cli        name  enable rollback location   sros config      lines  configure system rollback rollback location  cf3  ansible      provider      cli        name  set system name    inventory hostname    using one line   sros config      lines            configure system name     inventory hostname         provider      cli        name  set system name    inventory hostname    using parents   sros config      lines             name     inventory hostname          parents            configure           system     provider      cli         backup  yes    name  load config file   sros config        src      inventory hostname    cfg        provider      cli           save  yes    name  invalid use lines   sros config      lines          service             vpls 1000 customer foo 1 create                 description  invalid lines example      provider      cli        name  valid use lines   sros config      lines          description  invalid lines example      parents          service         vpls 1000 customer foo 1 create     provider      cli          return       updates    description  the set commands pushed remote device   returned  always   type  list   sample    config system name  sros01    commands    description  the set commands pushed remote device   returned  always   type  list   sample    config system name  sros01    backup path    description  the full path backup file   returned  backup yes   type  string   sample   playbooks ansible backup sros config 2016 07 16 22 28 34     ansible module utils basic import ansiblemodule ansible module utils network common config import networkconfig  dumps ansible module utils network sros sros import sros argument spec  check args ansible module utils network sros sros import load config  run commands  get config   def get active config(module)      contents   module params  config       contents          flags              module params  defaults                flags     detail           return get config(module  flags)     return contents   def get candidate(module)      candidate   networkconfig(indent 4)     module params  src            candidate load(module params  src  )     elif module params  lines            parents   module params  parents   list()         candidate add(module params  lines    parents parents)     return candidate   def run(module  result)      match   module params  match        candidate   get candidate(module)      match     none           config text   get active config(module)         config   networkconfig(indent 4  contents config text)         configobjs   candidate difference(config)     else          configobjs   candidate items      configobjs          commands   dumps(configobjs   commands )         commands   commands split(  n )          result  commands     commands         result  updates     commands            send configuration commands device merge           current running config         module check mode              load config(module  commands)         result  changed     true   def main()          main entry point module execution             usr bin python       copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    note  examples use following provider dict handle          transport authentication node     send configuration commands device merge    current running config ", "content": "#!/usr/bin/python\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: sros_config\nversion_added: \"2.2\"\nauthor: \"Peter Sprygada (@privateip)\"\nshort_description: Manage Nokia SR OS device configuration\ndescription:\n  - Nokia SR OS configurations use a simple block indent file syntax\n    for segmenting configuration into sections.  This module provides\n    an implementation for working with SR OS configuration sections in\n    a deterministic way.\nextends_documentation_fragment: sros\noptions:\n  lines:\n    description:\n      - The ordered set of commands that should be configured in the\n        section.  The commands must be the exact same commands as found\n        in the device running-config.  Be sure to note the configuration\n        command syntax as some commands are automatically modified by the\n        device config parser.  The I(lines) argument only supports current\n        context lines.  See EXAMPLES\n    aliases: ['commands']\n  parents:\n    description:\n      - The ordered set of parents that uniquely identify the section or hierarchy\n        the commands should be checked against.  If the parents argument\n        is omitted, the commands are checked against the set of top\n        level or global commands.\n  src:\n    description:\n      - Specifies the source path to the file that contains the configuration\n        or configuration template to load.  The path to the source file can\n        either be the full path on the Ansible control host or a relative\n        path from the playbook or role root directory.  This argument is mutually\n        exclusive with I(lines), I(parents).\n    version_added: \"2.2\"\n  before:\n    description:\n      - The ordered set of commands to push on to the command stack if\n        a change needs to be made.  This allows the playbook designer\n        the opportunity to perform configuration commands prior to pushing\n        any changes without affecting how the set of commands are matched\n        against the system.\n  after:\n    description:\n      - The ordered set of commands to append to the end of the command\n        stack if a change needs to be made.  Just like with I(before) this\n        allows the playbook designer to append a set of commands to be\n        executed after the command set.\n  match:\n    description:\n      - Instructs the module on the way to perform the matching of\n        the set of commands against the current device config.  If\n        match is set to I(line), commands are matched line by line.  If\n        match is set to I(strict), command lines are matched with respect\n        to position.  If match is set to I(exact), command lines\n        must be an equal match.  Finally, if match is set to I(none), the\n        module will not attempt to compare the source configuration with\n        the running configuration on the remote device.\n    default: line\n    choices: ['line', 'strict', 'exact', 'none']\n  replace:\n    description:\n      - Instructs the module on the way to perform the configuration\n        on the device.  If the replace argument is set to I(line) then\n        the modified lines are pushed to the device in configuration\n        mode.  If the replace argument is set to I(block) then the entire\n        command block is pushed to the device in configuration mode if any\n        line is not correct.\n    default: line\n    choices: ['line', 'block']\n  force:\n    description:\n      - The force argument instructs the module to not consider the\n        current devices running-config.  When set to true, this will\n        cause the module to push the contents of I(src) into the device\n        without first checking if already configured.\n      - Note this argument should be considered deprecated.  To achieve\n        the equivalent, set the C(match=none) which is idempotent.  This argument\n        will be removed in a future release.\n    type: bool\n    version_added: \"2.2\"\n  backup:\n    description:\n      - This argument will cause the module to create a full backup of\n        the current C(running-config) from the remote device before any\n        changes are made.  The backup file is written to the C(backup)\n        folder in the playbook root directory.  If the directory does not\n        exist, it is created.\n    type: bool\n    default: 'no'\n    version_added: \"2.2\"\n  config:\n    description:\n      - The C(config) argument allows the playbook designer to supply\n        the base configuration to be used to validate configuration\n        changes necessary.  If this argument is provided, the module\n        will not download the running-config from the remote node.\n    version_added: \"2.2\"\n  defaults:\n    description:\n      - This argument specifies whether or not to collect all defaults\n        when getting the remote device running config.  When enabled,\n        the module will get the current config by issuing the command\n        C(show running-config all).\n    type: bool\n    default: 'no'\n    aliases: ['detail']\n    version_added: \"2.2\"\n  save:\n    description:\n      - The C(save) argument instructs the module to save the running-\n        config to the startup-config at the conclusion of the module\n        running.  If check mode is specified, this argument is ignored.\n    type: bool\n    default: 'no'\n    version_added: \"2.2\"\n\"\"\"\n\nEXAMPLES = \"\"\"\n# Note: examples below use the following provider dict to handle\n#       transport and authentication to the node.\n---\nvars:\n  cli:\n    host: \"{{ inventory_hostname }}\"\n    username: admin\n    password: admin\n    transport: cli\n\n---\n- name: enable rollback location\n  sros_config:\n    lines: configure system rollback rollback-location \"cf3:/ansible\"\n    provider: \"{{ cli }}\"\n\n- name: set system name to {{ inventory_hostname }} using one line\n  sros_config:\n    lines:\n        - configure system name \"{{ inventory_hostname }}\"\n    provider: \"{{ cli }}\"\n\n- name: set system name to {{ inventory_hostname }} using parents\n  sros_config:\n    lines:\n        - 'name \"{{ inventory_hostname }}\"'\n    parents:\n        - configure\n        - system\n    provider: \"{{ cli }}\"\n    backup: yes\n\n- name: load config from file\n  sros_config:\n      src: \"{{ inventory_hostname }}.cfg\"\n      provider: \"{{ cli }}\"\n      save: yes\n\n- name: invalid use of lines\n  sros_config:\n    lines:\n      - service\n      -     vpls 1000 customer foo 1 create\n      -         description \"invalid lines example\"\n    provider: \"{{ cli }}\"\n\n- name: valid use of lines\n  sros_config:\n    lines:\n      - description \"invalid lines example\"\n    parents:\n      - service\n      - vpls 1000 customer foo 1 create\n    provider: \"{{ cli }}\"\n\"\"\"\n\nRETURN = \"\"\"\nupdates:\n  description: The set of commands that will be pushed to the remote device\n  returned: always\n  type: list\n  sample: ['config system name \"sros01\"']\ncommands:\n  description: The set of commands that will be pushed to the remote device\n  returned: always\n  type: list\n  sample: ['config system name \"sros01\"']\nbackup_path:\n  description: The full path to the backup file\n  returned: when backup is yes\n  type: string\n  sample: /playbooks/ansible/backup/sros_config.2016-07-16@22:28:34\n\"\"\"\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.common.config import NetworkConfig, dumps\nfrom ansible.module_utils.network.sros.sros import sros_argument_spec, check_args\nfrom ansible.module_utils.network.sros.sros import load_config, run_commands, get_config\n\n\ndef get_active_config(module):\n    contents = module.params['config']\n    if not contents:\n        flags = []\n        if module.params['defaults']:\n            flags = ['detail']\n        return get_config(module, flags)\n    return contents\n\n\ndef get_candidate(module):\n    candidate = NetworkConfig(indent=4)\n    if module.params['src']:\n        candidate.load(module.params['src'])\n    elif module.params['lines']:\n        parents = module.params['parents'] or list()\n        candidate.add(module.params['lines'], parents=parents)\n    return candidate\n\n\ndef run(module, result):\n    match = module.params['match']\n\n    candidate = get_candidate(module)\n\n    if match != 'none':\n        config_text = get_active_config(module)\n        config = NetworkConfig(indent=4, contents=config_text)\n        configobjs = candidate.difference(config)\n    else:\n        configobjs = candidate.items\n\n    if configobjs:\n        commands = dumps(configobjs, 'commands')\n        commands = commands.split('\\n')\n\n        result['commands'] = commands\n        result['updates'] = commands\n\n        # send the configuration commands to the device and merge\n        # them with the current running config\n        if not module.check_mode:\n            load_config(module, commands)\n        result['changed'] = True\n\n\ndef main():\n    \"\"\" main entry point for module execution\n    \"\"\"\n    argument_spec = dict(\n        src=dict(type='path'),\n\n        lines=dict(aliases=['commands'], type='list'),\n        parents=dict(type='list'),\n\n        match=dict(default='line', choices=['line', 'none']),\n\n        config=dict(),\n        defaults=dict(type='bool', default=False, aliases=['detail']),\n\n        backup=dict(type='bool', default=False),\n        save=dict(type='bool', default=False),\n    )\n\n    argument_spec.update(sros_argument_spec)\n\n    mutually_exclusive = [('lines', 'src'),\n                          ('parents', 'src')]\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           mutually_exclusive=mutually_exclusive,\n                           supports_check_mode=True)\n\n    result = dict(changed=False, warnings=list())\n\n    warnings = list()\n    check_args(module, warnings)\n    if warnings:\n        result['warnings'] = warnings\n\n    if module.params['backup']:\n        result['__backup__'] = get_config(module)\n\n    run(module, result)\n\n    if module.params['save']:\n        if not module.check_mode:\n            run_commands(module, ['admin save'])\n        result['changed'] = True\n\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "sros_config.py", "id": "dec73b5da92064733cdcbf9ef14da9aa", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/sros/sros_config.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}