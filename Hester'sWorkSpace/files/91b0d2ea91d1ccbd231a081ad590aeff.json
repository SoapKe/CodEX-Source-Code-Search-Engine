{"author": "mailpile", "code": "import copy\nimport re\n\nfrom mailpile.util import *\n\n\n##[ Keyword experiments ]#####################################################\n\nRE_QUOTES = re.compile(r'^(>\\s*)+')\nRE_CLEANPARA = re.compile(r'[>\"\\*\\'\\s]')\n\ndef paragraph_id_extractor(index, msg, ctype, textpart, **kwargs):\n    \n    kws = set([])\n    try:\n        if not ctype == 'text/plain':\n            return kws\n        if not index.config.prefs.get('experiment_para_kws'):\n            return kws\n\n        para = {'text': '', 'qlevel': 0}\n        def end_para():\n            txt = para.get('text', '')\n            if (len(txt) > 60 and\n                    not ('unsubscribe' in txt and 'http' in txt) and\n                    not ('@lists' in txt or '/mailman/' in txt) and\n                    not (txt.endswith(':'))):\n                txt = re.sub(RE_CLEANPARA, '', txt)[-120:]\n\n                kws.add('%s:p' % md5_hex(txt))\n            para.update({'text': '', 'qlevel': 0})\n\n        for line in textpart.splitlines():\n            if line in ('-- ', '- -- ', '- --'):\n                return kws\n\n            \n            markers = re.match(RE_QUOTES, line)\n            ql = len((markers.group(0) if markers else '').strip())\n\n            \n            if ((ql == 0 and line.endswith(':')) or  \n                    (ql != para['qlevel']) or        \n                    (ql == len(line)) or             \n                    (line[:2] == '--')):             \n                end_para()\n\n            para['qlevel'] = ql\n            if not line[:2] in ('--', ):\n                para['text'] += line\n        end_para()\n    except: \n        import traceback\n        traceback.print_exc()\n        pass\n    return kws\n", "comments": "   create search index terms identify paragraphs          keyword experiments                                                                         print  para      txt    find quote markers       paragraphs end       new quote starts    quote level changes    blank lines       dividers    attributeerror  ", "content": "import copy\nimport re\n\nfrom mailpile.util import *\n\n\n##[ Keyword experiments ]#####################################################\n\nRE_QUOTES = re.compile(r'^(>\\s*)+')\nRE_CLEANPARA = re.compile(r'[>\"\\*\\'\\s]')\n\ndef paragraph_id_extractor(index, msg, ctype, textpart, **kwargs):\n    \"\"\"Create search index terms to identify paragraphs.\"\"\"\n    kws = set([])\n    try:\n        if not ctype == 'text/plain':\n            return kws\n        if not index.config.prefs.get('experiment_para_kws'):\n            return kws\n\n        para = {'text': '', 'qlevel': 0}\n        def end_para():\n            txt = para.get('text', '')\n            if (len(txt) > 60 and\n                    not ('unsubscribe' in txt and 'http' in txt) and\n                    not ('@lists' in txt or '/mailman/' in txt) and\n                    not (txt.endswith(':'))):\n                txt = re.sub(RE_CLEANPARA, '', txt)[-120:]\n#               print 'PARA: %s' % txt\n                kws.add('%s:p' % md5_hex(txt))\n            para.update({'text': '', 'qlevel': 0})\n\n        for line in textpart.splitlines():\n            if line in ('-- ', '- -- ', '- --'):\n                return kws\n\n            # Find the quote markers...\n            markers = re.match(RE_QUOTES, line)\n            ql = len((markers.group(0) if markers else '').strip())\n\n            # Paragraphs end when...\n            if ((ql == 0 and line.endswith(':')) or  # new quote starts\n                    (ql != para['qlevel']) or        # quote level changes\n                    (ql == len(line)) or             # blank lines\n                    (line[:2] == '--')):             # on -- dividers\n                end_para()\n\n            para['qlevel'] = ql\n            if not line[:2] in ('--', ):\n                para['text'] += line\n        end_para()\n    except: # AttributeError:\n        import traceback\n        traceback.print_exc()\n        pass\n    return kws\n", "description": "A free & open modern, fast email client with user-friendly encryption and privacy features", "file_name": "experiments.py", "id": "91b0d2ea91d1ccbd231a081ad590aeff", "language": "Python", "project_name": "Mailpile", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mailpile-Mailpile/mailpile-Mailpile-8ebc5fe/external-plugins/experiments/experiments.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:54:52Z", "url": "https://github.com/mailpile/Mailpile", "wiki": true}