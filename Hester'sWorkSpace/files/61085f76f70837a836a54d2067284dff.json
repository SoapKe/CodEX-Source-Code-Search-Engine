{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    parse_filesize,\n    str_to_int,\n)\n\n\nclass PornComIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:[a-zA-Z]+\\.)?porn\\.com/videos/(?:(?P<display_id>[^/]+)-)?(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.porn.com/videos/teen-grabs-a-dildo-and-fucks-her-pussy-live-on-1hottie-i-rec-2603339',\n        'md5': '3f30ce76267533cd12ba999263156de7',\n        'info_dict': {\n            'id': '2603339',\n            'display_id': 'teen-grabs-a-dildo-and-fucks-her-pussy-live-on-1hottie-i-rec',\n            'ext': 'mp4',\n            'title': 'Teen grabs a dildo and fucks her pussy live on 1hottie, I rec',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 551,\n            'view_count': int,\n            'age_limit': 18,\n            'categories': list,\n            'tags': list,\n        },\n    }, {\n        'url': 'http://se.porn.com/videos/marsha-may-rides-seth-on-top-of-his-thick-cock-2658067',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        webpage = self._download_webpage(url, display_id)\n\n        config = self._parse_json(\n            self._search_regex(\n                r'=\\s*({.+?})\\s*,\\s*[\\da-zA-Z_]+\\s*=',\n                webpage, 'config', default='{}'),\n            display_id, transform_source=js_to_json, fatal=False)\n\n        if config:\n            title = config['title']\n            formats = [{\n                'url': stream['url'],\n                'format_id': stream.get('id'),\n                'height': int_or_none(self._search_regex(\n                    r'^(\\d+)[pP]', stream.get('id') or '', 'height', default=None))\n            } for stream in config['streams'] if stream.get('url')]\n            thumbnail = (compat_urlparse.urljoin(\n                config['thumbCDN'], config['poster'])\n                if config.get('thumbCDN') and config.get('poster') else None)\n            duration = int_or_none(config.get('length'))\n        else:\n            title = self._search_regex(\n                (r'<title>([^<]+)</title>', r'<h1[^>]*>([^<]+)</h1>'),\n                webpage, 'title')\n            formats = [{\n                'url': compat_urlparse.urljoin(url, format_url),\n                'format_id': '%sp' % height,\n                'height': int(height),\n                'filesize_approx': parse_filesize(filesize),\n            } for format_url, height, filesize in re.findall(\n                r'<a[^>]+href=\"(/download/[^\"]+)\">MPEG4 (\\d+)p<span[^>]*>(\\d+\\s+[a-zA-Z]+)<',\n                webpage)]\n            thumbnail = None\n            duration = None\n\n        self._sort_formats(formats)\n\n        view_count = str_to_int(self._search_regex(\n            (r'Views:\\s*</span>\\s*<span>\\s*([\\d,.]+)',\n             r'class=[\"\\']views[\"\\'][^>]*><p>([\\d,.]+)'), webpage,\n            'view count', fatal=False))\n\n        def extract_list(kind):\n            s = self._search_regex(\n                (r'(?s)%s:\\s*</span>\\s*<span>(.+?)</span>' % kind.capitalize(),\n                 r'(?s)<p[^>]*>%s:(.+?)</p>' % kind.capitalize()),\n                webpage, kind, fatal=False)\n            return re.findall(r'<a[^>]+>([^<]+)</a>', s or '')\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats,\n            'age_limit': 18,\n            'categories': extract_list('categories'),\n            'tags': extract_list('tags'),\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    parse_filesize,\n    str_to_int,\n)\n\n\nclass PornComIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:[a-zA-Z]+\\.)?porn\\.com/videos/(?:(?P<display_id>[^/]+)-)?(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.porn.com/videos/teen-grabs-a-dildo-and-fucks-her-pussy-live-on-1hottie-i-rec-2603339',\n        'md5': '3f30ce76267533cd12ba999263156de7',\n        'info_dict': {\n            'id': '2603339',\n            'display_id': 'teen-grabs-a-dildo-and-fucks-her-pussy-live-on-1hottie-i-rec',\n            'ext': 'mp4',\n            'title': 'Teen grabs a dildo and fucks her pussy live on 1hottie, I rec',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 551,\n            'view_count': int,\n            'age_limit': 18,\n            'categories': list,\n            'tags': list,\n        },\n    }, {\n        'url': 'http://se.porn.com/videos/marsha-may-rides-seth-on-top-of-his-thick-cock-2658067',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        webpage = self._download_webpage(url, display_id)\n\n        config = self._parse_json(\n            self._search_regex(\n                r'=\\s*({.+?})\\s*,\\s*[\\da-zA-Z_]+\\s*=',\n                webpage, 'config', default='{}'),\n            display_id, transform_source=js_to_json, fatal=False)\n\n        if config:\n            title = config['title']\n            formats = [{\n                'url': stream['url'],\n                'format_id': stream.get('id'),\n                'height': int_or_none(self._search_regex(\n                    r'^(\\d+)[pP]', stream.get('id') or '', 'height', default=None))\n            } for stream in config['streams'] if stream.get('url')]\n            thumbnail = (compat_urlparse.urljoin(\n                config['thumbCDN'], config['poster'])\n                if config.get('thumbCDN') and config.get('poster') else None)\n            duration = int_or_none(config.get('length'))\n        else:\n            title = self._search_regex(\n                (r'<title>([^<]+)</title>', r'<h1[^>]*>([^<]+)</h1>'),\n                webpage, 'title')\n            formats = [{\n                'url': compat_urlparse.urljoin(url, format_url),\n                'format_id': '%sp' % height,\n                'height': int(height),\n                'filesize_approx': parse_filesize(filesize),\n            } for format_url, height, filesize in re.findall(\n                r'<a[^>]+href=\"(/download/[^\"]+)\">MPEG4 (\\d+)p<span[^>]*>(\\d+\\s+[a-zA-Z]+)<',\n                webpage)]\n            thumbnail = None\n            duration = None\n\n        self._sort_formats(formats)\n\n        view_count = str_to_int(self._search_regex(\n            (r'Views:\\s*</span>\\s*<span>\\s*([\\d,.]+)',\n             r'class=[\"\\']views[\"\\'][^>]*><p>([\\d,.]+)'), webpage,\n            'view count', fatal=False))\n\n        def extract_list(kind):\n            s = self._search_regex(\n                (r'(?s)%s:\\s*</span>\\s*<span>(.+?)</span>' % kind.capitalize(),\n                 r'(?s)<p[^>]*>%s:(.+?)</p>' % kind.capitalize()),\n                webpage, kind, fatal=False)\n            return re.findall(r'<a[^>]+>([^<]+)</a>', s or '')\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats,\n            'age_limit': 18,\n            'categories': extract_list('categories'),\n            'tags': extract_list('tags'),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "porncom.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/porncom.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}