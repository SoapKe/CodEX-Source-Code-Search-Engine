{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models\n\n\nclass StockScrap(models.Model):\n    _inherit = 'stock.scrap'\n\n    production_id = fields.Many2one(\n        'mrp.production', 'Manufacturing Order',\n        states={'done': [('readonly', True)]})\n    workorder_id = fields.Many2one(\n        'mrp.workorder', 'Work Order',\n        states={'done': [('readonly', True)]},\n        help='Not to restrict or prefer quants, but informative.')\n\n    @api.onchange('workorder_id')\n    def _onchange_workorder_id(self):\n        if self.workorder_id:\n            self.location_id = self.workorder_id.production_id.location_src_id.id\n\n    @api.onchange('production_id')\n    def _onchange_production_id(self):\n        if self.production_id:\n            self.location_id = self.production_id.move_raw_ids.filtered(lambda x: x.state not in ('done', 'cancel')) and self.production_id.location_src_id.id or self.production_id.location_dest_id.id\n\n    def _prepare_move_values(self):\n        vals = super(StockScrap, self)._prepare_move_values()\n        if self.production_id:\n            vals['origin'] = vals['origin'] or self.production_id.name\n            if self.product_id in self.production_id.move_finished_ids.mapped('product_id'):\n                vals.update({'production_id': self.production_id.id})\n            else:\n                vals.update({'raw_material_production_id': self.production_id.id})\n        return vals\n\n    def _get_origin_moves(self):\n        return super(StockScrap, self)._get_origin_moves() or self.production_id and self.production_id.move_raw_ids.filtered(lambda x: x.product_id == self.product_id)", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models\n\n\nclass StockScrap(models.Model):\n    _inherit = 'stock.scrap'\n\n    production_id = fields.Many2one(\n        'mrp.production', 'Manufacturing Order',\n        states={'done': [('readonly', True)]})\n    workorder_id = fields.Many2one(\n        'mrp.workorder', 'Work Order',\n        states={'done': [('readonly', True)]},\n        help='Not to restrict or prefer quants, but informative.')\n\n    @api.onchange('workorder_id')\n    def _onchange_workorder_id(self):\n        if self.workorder_id:\n            self.location_id = self.workorder_id.production_id.location_src_id.id\n\n    @api.onchange('production_id')\n    def _onchange_production_id(self):\n        if self.production_id:\n            self.location_id = self.production_id.move_raw_ids.filtered(lambda x: x.state not in ('done', 'cancel')) and self.production_id.location_src_id.id or self.production_id.location_dest_id.id\n\n    def _prepare_move_values(self):\n        vals = super(StockScrap, self)._prepare_move_values()\n        if self.production_id:\n            vals['origin'] = vals['origin'] or self.production_id.name\n            if self.product_id in self.production_id.move_finished_ids.mapped('product_id'):\n                vals.update({'production_id': self.production_id.id})\n            else:\n                vals.update({'raw_material_production_id': self.production_id.id})\n        return vals\n\n    def _get_origin_moves(self):\n        return super(StockScrap, self)._get_origin_moves() or self.production_id and self.production_id.move_raw_ids.filtered(lambda x: x.product_id == self.product_id)", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "stock_scrap.py", "id": "bf85ec796d9c5f010b6e6be6cb151601", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/mrp/models/stock_scrap.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}