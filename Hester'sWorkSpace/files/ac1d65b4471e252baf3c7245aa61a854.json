{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo.tests.common import TransactionCase\n\n\nclass TestUom(TransactionCase):\n\n    def setUp(self):\n        super(TestUom, self).setUp()\n        self.uom_gram = self.env.ref('product.product_uom_gram')\n        self.uom_kgm = self.env.ref('product.product_uom_kgm')\n        self.uom_ton = self.env.ref('product.product_uom_ton')\n        self.uom_unit = self.env.ref('product.product_uom_unit')\n        self.uom_dozen = self.env.ref('product.product_uom_dozen')\n        self.categ_unit_id = self.ref('product.product_uom_categ_unit')\n\n    def test_10_conversion(self):\n        qty = self.uom_gram._compute_quantity(1020000, self.uom_ton)\n        self.assertEquals(qty, 1.02, \"Converted quantity does not correspond.\")\n\n        price = self.uom_gram._compute_price(2, self.uom_ton)\n        self.assertEquals(price, 2000000.0, \"Converted price does not correspond.\")\n\n        # If the conversion factor for Dozens (1/12) is not stored with sufficient precision,\n        \n        \n        \n        \n        qty = self.uom_dozen._compute_quantity(1, self.uom_unit)\n        self.assertEquals(qty, 12.0, \"Converted quantity does not correspond.\")\n\n        \n        \n        self.uom_gram.write({'rounding': 1})\n        qty = self.uom_gram._compute_quantity(1234, self.uom_kgm)\n        self.assertEquals(qty, 1.234, \"Converted quantity does not correspond.\")\n\n    def test_20_rounding(self):\n        product_uom = self.env['product.uom'].create({\n            'name': 'Score',\n            'factor_inv': 20,\n            'uom_type': 'bigger',\n            'rounding': 1.0,\n            'category_id': self.categ_unit_id\n        })\n\n        qty = self.uom_unit._compute_quantity(2, product_uom)\n        self.assertEquals(qty, 1, \"Converted quantity should be rounded up.\")\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     if conversion factor dozens (1 12) stored sufficient precision     conversion 1 dozen units give e g  12 00000000000047 units    unit rounding round 13     this partial regression test rev  311c77bb  improved    rev  fa2f7b86     regression test side effect commit 311c77bb   converting 1234 grams    kilograms work even grams rounded 1  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.tests.common import TransactionCase\n\n\nclass TestUom(TransactionCase):\n\n    def setUp(self):\n        super(TestUom, self).setUp()\n        self.uom_gram = self.env.ref('product.product_uom_gram')\n        self.uom_kgm = self.env.ref('product.product_uom_kgm')\n        self.uom_ton = self.env.ref('product.product_uom_ton')\n        self.uom_unit = self.env.ref('product.product_uom_unit')\n        self.uom_dozen = self.env.ref('product.product_uom_dozen')\n        self.categ_unit_id = self.ref('product.product_uom_categ_unit')\n\n    def test_10_conversion(self):\n        qty = self.uom_gram._compute_quantity(1020000, self.uom_ton)\n        self.assertEquals(qty, 1.02, \"Converted quantity does not correspond.\")\n\n        price = self.uom_gram._compute_price(2, self.uom_ton)\n        self.assertEquals(price, 2000000.0, \"Converted price does not correspond.\")\n\n        # If the conversion factor for Dozens (1/12) is not stored with sufficient precision,\n        # the conversion of 1 Dozen into Units will give e.g. 12.00000000000047 Units\n        # and the Unit rounding will round that up to 13.\n        # This is a partial regression test for rev. 311c77bb, which is further improved\n        # by rev. fa2f7b86.\n        qty = self.uom_dozen._compute_quantity(1, self.uom_unit)\n        self.assertEquals(qty, 12.0, \"Converted quantity does not correspond.\")\n\n        # Regression test for side-effect of commit 311c77bb - converting 1234 Grams\n        # into Kilograms should work even if grams are rounded to 1.\n        self.uom_gram.write({'rounding': 1})\n        qty = self.uom_gram._compute_quantity(1234, self.uom_kgm)\n        self.assertEquals(qty, 1.234, \"Converted quantity does not correspond.\")\n\n    def test_20_rounding(self):\n        product_uom = self.env['product.uom'].create({\n            'name': 'Score',\n            'factor_inv': 20,\n            'uom_type': 'bigger',\n            'rounding': 1.0,\n            'category_id': self.categ_unit_id\n        })\n\n        qty = self.uom_unit._compute_quantity(2, product_uom)\n        self.assertEquals(qty, 1, \"Converted quantity should be rounded up.\")\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_uom.py", "id": "ac1d65b4471e252baf3c7245aa61a854", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/product/tests/test_uom.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}