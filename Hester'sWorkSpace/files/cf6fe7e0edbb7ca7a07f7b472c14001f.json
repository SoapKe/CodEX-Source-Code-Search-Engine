{"author": "openai", "code": "\nfrom __future__ import print_function\n\nimport sys, gym, time\n\n\n Test yourself as a learning agent! Pass environment name as a command-line argument, for example:\n\n python keyboard_agent.py SpaceInvadersNoFrameskip-v4\n\n\nenv = gym.make('LunarLander-v2' if len(sys.argv)<2 else sys.argv[1])\n\nif not hasattr(env.action_space, 'n'):\n    raise Exception('Keyboard agent only supports discrete action spaces')\nACTIONS = env.action_space.n\nSKIP_CONTROL = 0     Use previous control decision SKIP_CONTROL times, that's how you\n                     can test what skip is still usable.\n\nhuman_agent_action = 0\nhuman_wants_restart = False\nhuman_sets_pause = False\n\ndef key_press(key, mod):\n    global human_agent_action, human_wants_restart, human_sets_pause\n    if key==0xff0d: human_wants_restart = True\n    if key==32: human_sets_pause = not human_sets_pause\n    a = int( key - ord('0') )\n    if a <= 0 or a >= ACTIONS: return\n    human_agent_action = a\n\ndef key_release(key, mod):\n    global human_agent_action\n    a = int( key - ord('0') )\n    if a <= 0 or a >= ACTIONS: return\n    if human_agent_action == a:\n        human_agent_action = 0\n\nenv.render()\nenv.unwrapped.viewer.window.on_key_press = key_press\nenv.unwrapped.viewer.window.on_key_release = key_release\n\ndef rollout(env):\n    global human_agent_action, human_wants_restart, human_sets_pause\n    human_wants_restart = False\n    obser = env.reset()\n    skip = 0\n    total_reward = 0\n    total_timesteps = 0\n    while 1:\n        if not skip:\n            print(\"taking action {}\".format(human_agent_action))\n            a = human_agent_action\n            total_timesteps += 1\n            skip = SKIP_CONTROL\n        else:\n            skip -= 1\n\n        obser, r, done, info = env.step(a)\n        if r != 0:\n            print(\"reward %0.3f\" % r)\n        total_reward += r\n        window_still_open = env.render()\n        if window_still_open==False: return False\n        if done: break\n        if human_wants_restart: break\n        while human_sets_pause:\n            env.render()\n            time.sleep(0.1)\n        time.sleep(0.1)\n    print(\"timesteps %i reward %0.2f\" % (total_timesteps, total_reward))\n\nprint(\"ACTIONS={}\".format(ACTIONS))\nprint(\"Press keys 1 2 3 ... to take actions 1 2 3 ...\")\nprint(\"No keys pressed is taking action 0\")\n\nwhile 1:\n    window_still_open = rollout(env)\n    if window_still_open==False: break\n\n", "comments": "   usr bin env python       test learning agent  pass environment name command line argument  example        python keyboard agent py spaceinvadersnoframeskip v4       use previous control decision skip control times     test skip still usable    print( taking action     format(human agent action)) ", "content": "#!/usr/bin/env python\nfrom __future__ import print_function\n\nimport sys, gym, time\n\n#\n# Test yourself as a learning agent! Pass environment name as a command-line argument, for example:\n#\n# python keyboard_agent.py SpaceInvadersNoFrameskip-v4\n#\n\nenv = gym.make('LunarLander-v2' if len(sys.argv)<2 else sys.argv[1])\n\nif not hasattr(env.action_space, 'n'):\n    raise Exception('Keyboard agent only supports discrete action spaces')\nACTIONS = env.action_space.n\nSKIP_CONTROL = 0    # Use previous control decision SKIP_CONTROL times, that's how you\n                    # can test what skip is still usable.\n\nhuman_agent_action = 0\nhuman_wants_restart = False\nhuman_sets_pause = False\n\ndef key_press(key, mod):\n    global human_agent_action, human_wants_restart, human_sets_pause\n    if key==0xff0d: human_wants_restart = True\n    if key==32: human_sets_pause = not human_sets_pause\n    a = int( key - ord('0') )\n    if a <= 0 or a >= ACTIONS: return\n    human_agent_action = a\n\ndef key_release(key, mod):\n    global human_agent_action\n    a = int( key - ord('0') )\n    if a <= 0 or a >= ACTIONS: return\n    if human_agent_action == a:\n        human_agent_action = 0\n\nenv.render()\nenv.unwrapped.viewer.window.on_key_press = key_press\nenv.unwrapped.viewer.window.on_key_release = key_release\n\ndef rollout(env):\n    global human_agent_action, human_wants_restart, human_sets_pause\n    human_wants_restart = False\n    obser = env.reset()\n    skip = 0\n    total_reward = 0\n    total_timesteps = 0\n    while 1:\n        if not skip:\n            #print(\"taking action {}\".format(human_agent_action))\n            a = human_agent_action\n            total_timesteps += 1\n            skip = SKIP_CONTROL\n        else:\n            skip -= 1\n\n        obser, r, done, info = env.step(a)\n        if r != 0:\n            print(\"reward %0.3f\" % r)\n        total_reward += r\n        window_still_open = env.render()\n        if window_still_open==False: return False\n        if done: break\n        if human_wants_restart: break\n        while human_sets_pause:\n            env.render()\n            time.sleep(0.1)\n        time.sleep(0.1)\n    print(\"timesteps %i reward %0.2f\" % (total_timesteps, total_reward))\n\nprint(\"ACTIONS={}\".format(ACTIONS))\nprint(\"Press keys 1 2 3 ... to take actions 1 2 3 ...\")\nprint(\"No keys pressed is taking action 0\")\n\nwhile 1:\n    window_still_open = rollout(env)\n    if window_still_open==False: break\n\n", "description": "A toolkit for developing and comparing reinforcement learning algorithms.", "file_name": "keyboard_agent.py", "id": "cf6fe7e0edbb7ca7a07f7b472c14001f", "language": "Python", "project_name": "gym", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/openai-gym/openai-gym-6160181/examples/agents/keyboard_agent.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:30:35Z", "url": "https://github.com/openai/gym", "wiki": true}