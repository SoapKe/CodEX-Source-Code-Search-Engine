{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n Copyright (c) 2016 Red Hat, Inc.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ovirt_vmpools\nshort_description: Module to manage VM pools in oVirt/RHV\nversion_added: \"2.3\"\nauthor: \"Ondra Machacek (@machacekondra)\"\ndescription:\n    - \"Module to manage VM pools in oVirt/RHV.\"\noptions:\n    name:\n        description:\n            - \"Name of the VM pool to manage.\"\n        required: true\n    state:\n        description:\n            - \"Should the VM pool be present/absent.\"\n            - \"Note that when C(state) is I(absent) all VMs in VM pool are stopped and removed.\"\n        choices: ['present', 'absent']\n        default: present\n    template:\n        description:\n            - \"Name of the template, which will be used to create VM pool.\"\n    description:\n        description:\n            - \"Description of the VM pool.\"\n    cluster:\n        description:\n            - \"Name of the cluster, where VM pool should be created.\"\n    type:\n        description:\n            - \"Type of the VM pool. Either manual or automatic.\"\n            - \"C(manual) - The administrator is responsible for explicitly returning the virtual machine to the pool.\n               The virtual machine reverts to the original base image after the administrator returns it to the pool.\"\n            - \"C(Automatic) - When the virtual machine is shut down, it automatically reverts to its base image and\n               is returned to the virtual machine pool.\"\n            - \"Default value is set by engine.\"\n        choices: ['manual', 'automatic']\n    vm_per_user:\n        description:\n            - \"Maximum number of VMs a single user can attach to from this pool.\"\n            - \"Default value is set by engine.\"\n    prestarted:\n        description:\n            - \"Number of pre-started VMs defines the number of VMs in run state, that are waiting\n               to be attached to Users.\"\n            - \"Default value is set by engine.\"\n    vm_count:\n        description:\n            - \"Number of VMs in the pool.\"\n            - \"Default value is set by engine.\"\nextends_documentation_fragment: ovirt\n'''\n\nEXAMPLES = '''\n Examples don't contain auth parameter for simplicity,\n look at ovirt_auth module to see how to reuse authentication:\n\n Create VM pool from template\n- ovirt_vmpools:\n    cluster: mycluster\n    name: myvmpool\n    template: rhel7\n    vm_count: 2\n    prestarted: 2\n    vm_per_user: 1\n\n Remove vmpool, note that all VMs in pool will be stopped and removed:\n- ovirt_vmpools:\n    state: absent\n    name: myvmpool\n'''\n\nRETURN = '''\nid:\n    description: ID of the VM pool which is managed\n    returned: On success if VM pool is found.\n    type: str\n    sample: 7de90f31-222c-436c-a1ca-7e655bd5b60c\nvm_pool:\n    description: \"Dictionary of all the VM pool attributes. VM pool attributes can be found on your oVirt/RHV instance\n                  at following url: http://ovirt.github.io/ovirt-engine-api-model/master/types/vm_pool.\"\n    returned: On success if VM pool is found.\n    type: dict\n'''\n\ntry:\n    import ovirtsdk4.types as otypes\nexcept ImportError:\n    pass\n\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ovirt import (\n    BaseModule,\n    check_params,\n    check_sdk,\n    create_connection,\n    equal,\n    get_link_name,\n    ovirt_full_argument_spec,\n    wait,\n)\n\n\nclass VmPoolsModule(BaseModule):\n\n    def build_entity(self):\n        return otypes.VmPool(\n            name=self._module.params['name'],\n            description=self._module.params['description'],\n            comment=self._module.params['comment'],\n            cluster=otypes.Cluster(\n                name=self._module.params['cluster']\n            ) if self._module.params['cluster'] else None,\n            template=otypes.Template(\n                name=self._module.params['template']\n            ) if self._module.params['template'] else None,\n            max_user_vms=self._module.params['vm_per_user'],\n            prestarted_vms=self._module.params['prestarted'],\n            size=self._module.params['vm_count'],\n            type=otypes.VmPoolType(\n                self._module.params['type']\n            ) if self._module.params['type'] else None,\n        )\n\n    def update_check(self, entity):\n        return (\n            equal(self._module.params.get('cluster'), get_link_name(self._connection, entity.cluster)) and\n            equal(self._module.params.get('description'), entity.description) and\n            equal(self._module.params.get('comment'), entity.comment) and\n            equal(self._module.params.get('vm_per_user'), entity.max_user_vms) and\n            equal(self._module.params.get('prestarted'), entity.prestarted_vms) and\n            equal(self._module.params.get('vm_count'), entity.size)\n        )\n\n\ndef main():\n    argument_spec = ovirt_full_argument_spec(\n        state=dict(\n            choices=['present', 'absent'],\n            default='present',\n        ),\n        name=dict(default=None, required=True),\n        template=dict(default=None),\n        cluster=dict(default=None),\n        description=dict(default=None),\n        comment=dict(default=None),\n        vm_per_user=dict(default=None, type='int'),\n        prestarted=dict(default=None, type='int'),\n        vm_count=dict(default=None, type='int'),\n        type=dict(default=None, choices=['automatic', 'manual']),\n    )\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n    )\n    check_sdk(module)\n    check_params(module)\n\n    try:\n        auth = module.params.pop('auth')\n        connection = create_connection(auth)\n        vm_pools_service = connection.system_service().vm_pools_service()\n        vm_pools_module = VmPoolsModule(\n            connection=connection,\n            module=module,\n            service=vm_pools_service,\n        )\n\n        state = module.params['state']\n        if state == 'present':\n            ret = vm_pools_module.create()\n\n             Wait for all VM pool VMs to be created:\n            if module.params['wait']:\n                vms_service = connection.system_service().vms_service()\n                for vm in vms_service.list(search='pool=%s' % module.params['name']):\n                    wait(\n                        service=vms_service.service(vm.id),\n                        condition=lambda vm: vm.status in [otypes.VmStatus.DOWN, otypes.VmStatus.UP],\n                        timeout=module.params['timeout'],\n                    )\n\n        elif state == 'absent':\n            ret = vm_pools_module.remove()\n\n        module.exit_json(**ret)\n    except Exception as e:\n        module.fail_json(msg=str(e), exception=traceback.format_exc())\n    finally:\n        connection.close(logout=auth.get('token') is None)\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  ovirt vmpools short description  module manage vm pools ovirt rhv version added   2 3  author   ondra machacek ( machacekondra)  description         module manage vm pools ovirt rhv   options      name          description                 name vm pool manage           required  true     state          description                 should vm pool present absent                  note c(state) i(absent) vms vm pool stopped removed           choices    present    absent           default  present     template          description                 name template  used create vm pool       description          description                 description vm pool       cluster          description                 name cluster  vm pool created       type          description                 type vm pool  either manual automatic                  c(manual)   the administrator responsible explicitly returning virtual machine pool                 the virtual machine reverts original base image administrator returns pool                  c(automatic)   when virtual machine shut  automatically reverts base image                returned virtual machine pool                  default value set engine           choices    manual    automatic       vm per user          description                 maximum number vms single user attach pool                  default value set engine       prestarted          description                 number pre started vms defines number vms run state  waiting                attached users                  default value set engine       vm count          description                 number vms pool                  default value set engine   extends documentation fragment  ovirt      examples         examples contain auth parameter simplicity    look ovirt auth module see reuse authentication     create vm pool template   ovirt vmpools      cluster  mycluster     name  myvmpool     template  rhel7     vm count  2     prestarted  2     vm per user  1    remove vmpool  note vms pool stopped removed    ovirt vmpools      state  absent     name  myvmpool      return       id      description  id vm pool managed     returned  on success vm pool found      type  str     sample  7de90f31 222c 436c a1ca 7e655bd5b60c vm pool      description   dictionary vm pool attributes  vm pool attributes found ovirt rhv instance                   following url  http   ovirt github io ovirt engine api model master  types vm pool       returned  on success vm pool found      type  dict         usr bin python        coding  utf 8           copyright (c) 2016 red hat  inc        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          examples contain auth parameter simplicity     look ovirt auth module see reuse authentication     create vm pool template    remove vmpool  note vms pool stopped removed    types vm pool      wait vm pool vms created  ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2016 Red Hat, Inc.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ovirt_vmpools\nshort_description: Module to manage VM pools in oVirt/RHV\nversion_added: \"2.3\"\nauthor: \"Ondra Machacek (@machacekondra)\"\ndescription:\n    - \"Module to manage VM pools in oVirt/RHV.\"\noptions:\n    name:\n        description:\n            - \"Name of the VM pool to manage.\"\n        required: true\n    state:\n        description:\n            - \"Should the VM pool be present/absent.\"\n            - \"Note that when C(state) is I(absent) all VMs in VM pool are stopped and removed.\"\n        choices: ['present', 'absent']\n        default: present\n    template:\n        description:\n            - \"Name of the template, which will be used to create VM pool.\"\n    description:\n        description:\n            - \"Description of the VM pool.\"\n    cluster:\n        description:\n            - \"Name of the cluster, where VM pool should be created.\"\n    type:\n        description:\n            - \"Type of the VM pool. Either manual or automatic.\"\n            - \"C(manual) - The administrator is responsible for explicitly returning the virtual machine to the pool.\n               The virtual machine reverts to the original base image after the administrator returns it to the pool.\"\n            - \"C(Automatic) - When the virtual machine is shut down, it automatically reverts to its base image and\n               is returned to the virtual machine pool.\"\n            - \"Default value is set by engine.\"\n        choices: ['manual', 'automatic']\n    vm_per_user:\n        description:\n            - \"Maximum number of VMs a single user can attach to from this pool.\"\n            - \"Default value is set by engine.\"\n    prestarted:\n        description:\n            - \"Number of pre-started VMs defines the number of VMs in run state, that are waiting\n               to be attached to Users.\"\n            - \"Default value is set by engine.\"\n    vm_count:\n        description:\n            - \"Number of VMs in the pool.\"\n            - \"Default value is set by engine.\"\nextends_documentation_fragment: ovirt\n'''\n\nEXAMPLES = '''\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Create VM pool from template\n- ovirt_vmpools:\n    cluster: mycluster\n    name: myvmpool\n    template: rhel7\n    vm_count: 2\n    prestarted: 2\n    vm_per_user: 1\n\n# Remove vmpool, note that all VMs in pool will be stopped and removed:\n- ovirt_vmpools:\n    state: absent\n    name: myvmpool\n'''\n\nRETURN = '''\nid:\n    description: ID of the VM pool which is managed\n    returned: On success if VM pool is found.\n    type: str\n    sample: 7de90f31-222c-436c-a1ca-7e655bd5b60c\nvm_pool:\n    description: \"Dictionary of all the VM pool attributes. VM pool attributes can be found on your oVirt/RHV instance\n                  at following url: http://ovirt.github.io/ovirt-engine-api-model/master/#types/vm_pool.\"\n    returned: On success if VM pool is found.\n    type: dict\n'''\n\ntry:\n    import ovirtsdk4.types as otypes\nexcept ImportError:\n    pass\n\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ovirt import (\n    BaseModule,\n    check_params,\n    check_sdk,\n    create_connection,\n    equal,\n    get_link_name,\n    ovirt_full_argument_spec,\n    wait,\n)\n\n\nclass VmPoolsModule(BaseModule):\n\n    def build_entity(self):\n        return otypes.VmPool(\n            name=self._module.params['name'],\n            description=self._module.params['description'],\n            comment=self._module.params['comment'],\n            cluster=otypes.Cluster(\n                name=self._module.params['cluster']\n            ) if self._module.params['cluster'] else None,\n            template=otypes.Template(\n                name=self._module.params['template']\n            ) if self._module.params['template'] else None,\n            max_user_vms=self._module.params['vm_per_user'],\n            prestarted_vms=self._module.params['prestarted'],\n            size=self._module.params['vm_count'],\n            type=otypes.VmPoolType(\n                self._module.params['type']\n            ) if self._module.params['type'] else None,\n        )\n\n    def update_check(self, entity):\n        return (\n            equal(self._module.params.get('cluster'), get_link_name(self._connection, entity.cluster)) and\n            equal(self._module.params.get('description'), entity.description) and\n            equal(self._module.params.get('comment'), entity.comment) and\n            equal(self._module.params.get('vm_per_user'), entity.max_user_vms) and\n            equal(self._module.params.get('prestarted'), entity.prestarted_vms) and\n            equal(self._module.params.get('vm_count'), entity.size)\n        )\n\n\ndef main():\n    argument_spec = ovirt_full_argument_spec(\n        state=dict(\n            choices=['present', 'absent'],\n            default='present',\n        ),\n        name=dict(default=None, required=True),\n        template=dict(default=None),\n        cluster=dict(default=None),\n        description=dict(default=None),\n        comment=dict(default=None),\n        vm_per_user=dict(default=None, type='int'),\n        prestarted=dict(default=None, type='int'),\n        vm_count=dict(default=None, type='int'),\n        type=dict(default=None, choices=['automatic', 'manual']),\n    )\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n    )\n    check_sdk(module)\n    check_params(module)\n\n    try:\n        auth = module.params.pop('auth')\n        connection = create_connection(auth)\n        vm_pools_service = connection.system_service().vm_pools_service()\n        vm_pools_module = VmPoolsModule(\n            connection=connection,\n            module=module,\n            service=vm_pools_service,\n        )\n\n        state = module.params['state']\n        if state == 'present':\n            ret = vm_pools_module.create()\n\n            # Wait for all VM pool VMs to be created:\n            if module.params['wait']:\n                vms_service = connection.system_service().vms_service()\n                for vm in vms_service.list(search='pool=%s' % module.params['name']):\n                    wait(\n                        service=vms_service.service(vm.id),\n                        condition=lambda vm: vm.status in [otypes.VmStatus.DOWN, otypes.VmStatus.UP],\n                        timeout=module.params['timeout'],\n                    )\n\n        elif state == 'absent':\n            ret = vm_pools_module.remove()\n\n        module.exit_json(**ret)\n    except Exception as e:\n        module.fail_json(msg=str(e), exception=traceback.format_exc())\n    finally:\n        connection.close(logout=auth.get('token') is None)\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "ovirt_vmpools.py", "id": "349b4cf42a19c8713b07b293e002a91a", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/ovirt/ovirt_vmpools.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}