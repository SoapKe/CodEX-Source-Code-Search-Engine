{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    int_or_none,\n    unified_timestamp,\n    update_url_query,\n)\n\n\nclass RBMARadioIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?:rbmaradio|redbullradio)\\.com/shows/(?P<show_id>[^/]+)/episodes/(?P<id>[^/?\n    _TEST = {\n        'url': 'https://www.rbmaradio.com/shows/main-stage/episodes/ford-lopatin-live-at-primavera-sound-2011',\n        'md5': '6bc6f9bcb18994b4c983bc3bf4384d95',\n        'info_dict': {\n            'id': 'ford-lopatin-live-at-primavera-sound-2011',\n            'ext': 'mp3',\n            'title': 'Main Stage - Ford & Lopatin at Primavera Sound',\n            'description': 'md5:d41d8cd98f00b204e9800998ecf8427e',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 2452,\n            'timestamp': 1307103164,\n            'upload_date': '20110603',\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        show_id = mobj.group('show_id')\n        episode_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, episode_id)\n\n        episode = self._parse_json(\n            self._search_regex(\n                r'__INITIAL_STATE__\\s*=\\s*({.+?})\\s*</script>',\n                webpage, 'json data'),\n            episode_id)['episodes'][show_id][episode_id]\n\n        title = episode['title']\n\n        show_title = episode.get('showTitle')\n        if show_title:\n            title = '%s - %s' % (show_title, title)\n\n        formats = [{\n            'url': update_url_query(episode['audioURL'], query={'cbr': abr}),\n            'format_id': compat_str(abr),\n            'abr': abr,\n            'vcodec': 'none',\n        } for abr in (96, 128, 256)]\n\n        description = clean_html(episode.get('longTeaser'))\n        thumbnail = self._proto_relative_url(episode.get('imageURL', {}).get('landscape'))\n        duration = int_or_none(episode.get('duration'))\n        timestamp = unified_timestamp(episode.get('publishedAt'))\n\n        return {\n            'id': episode_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'timestamp': timestamp,\n            'formats': formats,\n        }\n", "comments": "#&]+)'\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    int_or_none,\n    unified_timestamp,\n    update_url_query,\n)\n\n\nclass RBMARadioIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?:rbmaradio|redbullradio)\\.com/shows/(?P<show_id>[^/]+)/episodes/(?P<id>[^/?#&]+)'\n    _TEST = {\n        'url': 'https://www.rbmaradio.com/shows/main-stage/episodes/ford-lopatin-live-at-primavera-sound-2011',\n        'md5': '6bc6f9bcb18994b4c983bc3bf4384d95',\n        'info_dict': {\n            'id': 'ford-lopatin-live-at-primavera-sound-2011',\n            'ext': 'mp3',\n            'title': 'Main Stage - Ford & Lopatin at Primavera Sound',\n            'description': 'md5:d41d8cd98f00b204e9800998ecf8427e',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 2452,\n            'timestamp': 1307103164,\n            'upload_date': '20110603',\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        show_id = mobj.group('show_id')\n        episode_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, episode_id)\n\n        episode = self._parse_json(\n            self._search_regex(\n                r'__INITIAL_STATE__\\s*=\\s*({.+?})\\s*</script>',\n                webpage, 'json data'),\n            episode_id)['episodes'][show_id][episode_id]\n\n        title = episode['title']\n\n        show_title = episode.get('showTitle')\n        if show_title:\n            title = '%s - %s' % (show_title, title)\n\n        formats = [{\n            'url': update_url_query(episode['audioURL'], query={'cbr': abr}),\n            'format_id': compat_str(abr),\n            'abr': abr,\n            'vcodec': 'none',\n        } for abr in (96, 128, 256)]\n\n        description = clean_html(episode.get('longTeaser'))\n        thumbnail = self._proto_relative_url(episode.get('imageURL', {}).get('landscape'))\n        duration = int_or_none(episode.get('duration'))\n        timestamp = unified_timestamp(episode.get('publishedAt'))\n\n        return {\n            'id': episode_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'timestamp': timestamp,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "rbmaradio.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/rbmaradio.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}