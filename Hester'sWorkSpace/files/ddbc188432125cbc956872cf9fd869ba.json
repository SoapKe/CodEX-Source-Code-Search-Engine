{"author": "django", "code": "from django.db import models\n\n\nclass Article(models.Model):\n    headline = models.CharField(max_length=100)\n    pub_date = models.DateField()\n    expire_date = models.DateField()\n\n    class Meta:\n        get_latest_by = 'pub_date'\n\n\nclass Person(models.Model):\n    name = models.CharField(max_length=30)\n    birthday = models.DateField()\n    \n\n\n\n\nclass IndexErrorQuerySet(models.QuerySet):\n    \n    def __iter__(self):\n        raise IndexError\n\n\nclass IndexErrorArticle(Article):\n    objects = IndexErrorQuerySet.as_manager()\n", "comments": "        emulates case internal code raises unexpected     indexerror             note model  get latest  set     ticket  23555   model intentionally broken queryset   iter   method  ", "content": "from django.db import models\n\n\nclass Article(models.Model):\n    headline = models.CharField(max_length=100)\n    pub_date = models.DateField()\n    expire_date = models.DateField()\n\n    class Meta:\n        get_latest_by = 'pub_date'\n\n\nclass Person(models.Model):\n    name = models.CharField(max_length=30)\n    birthday = models.DateField()\n    # Note that this model doesn't have \"get_latest_by\" set.\n\n\n# Ticket #23555 - model with an intentionally broken QuerySet.__iter__ method.\n\nclass IndexErrorQuerySet(models.QuerySet):\n    \"\"\"\n    Emulates the case when some internal code raises an unexpected\n    IndexError.\n    \"\"\"\n    def __iter__(self):\n        raise IndexError\n\n\nclass IndexErrorArticle(Article):\n    objects = IndexErrorQuerySet.as_manager()\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "ddbc188432125cbc956872cf9fd869ba", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/get_earliest_or_latest/models.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}