{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    unified_strdate,\n    compat_str,\n    determine_ext,\n    ExtractorError,\n    update_url_query,\n)\n\n\nclass DisneyIE(InfoExtractor):\n    _VALID_URL = r\n    _TESTS = [{\n        \n        'url': 'http://video.disney.com/watch/moana-trailer-545ed1857afee5a0ec239977',\n        'info_dict': {\n            'id': '545ed1857afee5a0ec239977',\n            'ext': 'mp4',\n            'title': 'Moana - Trailer',\n            'description': 'A fun adventure for the entire Family!  Bring home Moana on Digital HD Feb 21 & Blu-ray March 7',\n            'upload_date': '20170112',\n        },\n        'params': {\n            \n            'skip_download': True,\n        }\n    }, {\n        \n        'url': 'http://www.starwars.com/video/rogue-one-a-star-wars-story-intro-featurette',\n        'info_dict': {\n            'id': '5454e9f4e9804a552e3524c8',\n            'ext': 'mp4',\n            'title': '\"Intro\" Featurette: Rogue One: A Star Wars Story',\n            'upload_date': '20170104',\n            'description': 'Go behind-the-scenes of Rogue One: A Star Wars Story in this featurette with Director Gareth Edwards and the cast of the film.',\n        },\n        'params': {\n            \n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://videos.disneylatino.com/ver/spider-man-de-regreso-a-casa-primer-adelanto-543a33a1850bdcfcca13bae2',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.en.disneyme.com/watch/future-worm/robo-carp-2001-544b66002aa7353cdd3f5114',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.disneyturkiye.com.tr/izle/7c-7-cuceler/kimin-sesi-zaten-5456f3d015f6b36c8afdd0e2',\n        'only_matching': True,\n    }, {\n        'url': 'http://disneyjunior.disney.com/embed/546a4798ddba3d1612e4005d',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.starwars.com/embed/54690d1e6c42e5f09a0fb097',\n        'only_matching': True,\n    }, {\n        'url': 'http://spiderman.marvelkids.com/embed/522900d2ced3c565e4cc0677',\n        'only_matching': True,\n    }, {\n        'url': 'http://spiderman.marvelkids.com/videos/contest-of-champions-part-four-clip-1',\n        'only_matching': True,\n    }, {\n        'url': 'http://disneyjunior.en.disneyme.com/dj/watch-my-friends-tigger-and-pooh-promo',\n        'only_matching': True,\n    }, {\n        'url': 'http://disneychannel.de/sehen/soy-luna-folge-118-5518518987ba27f3cc729268',\n        'only_matching': True,\n    }, {\n        'url': 'http://disneyjunior.disney.com/galactech-the-galactech-grab-galactech-an-admiral-rescue',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        domain, video_id, display_id = re.match(self._VALID_URL, url).groups()\n        if not video_id:\n            webpage = self._download_webpage(url, display_id)\n            grill = re.sub(r'\"\\s*\\+\\s*\"', '', self._search_regex(\n                r'Grill\\.burger\\s*=\\s*({.+})\\s*:',\n                webpage, 'grill data'))\n            page_data = next(s for s in self._parse_json(grill, display_id)['stack'] if s.get('type') == 'video')\n            video_data = page_data['data'][0]\n        else:\n            webpage = self._download_webpage(\n                'http://%s/embed/%s' % (domain, video_id), video_id)\n            page_data = self._parse_json(self._search_regex(\n                r'Disney\\.EmbedVideo\\s*=\\s*({.+});',\n                webpage, 'embed data'), video_id)\n            video_data = page_data['video']\n\n        for external in video_data.get('externals', []):\n            if external.get('source') == 'vevo':\n                return self.url_result('vevo:' + external['data_id'], 'Vevo')\n\n        video_id = video_data['id']\n        title = video_data['title']\n\n        formats = []\n        for flavor in video_data.get('flavors', []):\n            flavor_format = flavor.get('format')\n            flavor_url = flavor.get('url')\n            if not flavor_url or not re.match(r'https?://', flavor_url) or flavor_format == 'mp4_access':\n                continue\n            tbr = int_or_none(flavor.get('bitrate'))\n            if tbr == 99999:\n                \n                flavor_url = update_url_query(flavor_url, {'ks': ''})\n                m3u8_formats = self._extract_m3u8_formats(\n                    flavor_url, video_id, 'mp4',\n                    m3u8_id=flavor_format, fatal=False)\n                for f in m3u8_formats:\n                    \n                    if '/fpshls/' in f['url']:\n                        continue\n                    formats.append(f)\n                continue\n            format_id = []\n            if flavor_format:\n                format_id.append(flavor_format)\n            if tbr:\n                format_id.append(compat_str(tbr))\n            ext = determine_ext(flavor_url)\n            if flavor_format == 'applehttp' or ext == 'm3u8':\n                ext = 'mp4'\n            width = int_or_none(flavor.get('width'))\n            height = int_or_none(flavor.get('height'))\n            formats.append({\n                'format_id': '-'.join(format_id),\n                'url': flavor_url,\n                'width': width,\n                'height': height,\n                'tbr': tbr,\n                'ext': ext,\n                'vcodec': 'none' if (width == 0 and height == 0) else None,\n            })\n        if not formats and video_data.get('expired'):\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, page_data['translations']['video_expired']),\n                expected=True)\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for caption in video_data.get('captions', []):\n            caption_url = caption.get('url')\n            caption_format = caption.get('format')\n            if not caption_url or caption_format.startswith('unknown'):\n                continue\n            subtitles.setdefault(caption.get('language', 'en'), []).append({\n                'url': caption_url,\n                'ext': {\n                    'webvtt': 'vtt',\n                }.get(caption_format, caption_format),\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description') or video_data.get('short_desc'),\n            'thumbnail': video_data.get('thumb') or video_data.get('thumb_secure'),\n            'duration': int_or_none(video_data.get('duration_sec')),\n            'upload_date': unified_strdate(video_data.get('publish_date')),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "comments": "(?x)\n        https?://(?P<domain>(?:[^/]+\\.)?(?:disney\\.[a-z]{2,3}(?:\\.[a-z]{2})?|disney(?:(?:me|latino)\\.com|turkiye\\.com\\.tr|channel\\.de)|(?:starwars|marvelkids)\\.com))/(?:(?:embed/|(?:[^/]+/)+[\\w-]+-)(?P<id>[a-z0-9]{24})|(?:[^/]+/)?(?P<display_id>[^/?#]+))\n)\n# coding: utf-8\n# Disney.EmbedVideo\n# m3u8 download\n# Grill.burger\n# m3u8 download\n# wrong ks(Kaltura Signature) causes 404 Error\n# Apple FairPlay\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    unified_strdate,\n    compat_str,\n    determine_ext,\n    ExtractorError,\n    update_url_query,\n)\n\n\nclass DisneyIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n        https?://(?P<domain>(?:[^/]+\\.)?(?:disney\\.[a-z]{2,3}(?:\\.[a-z]{2})?|disney(?:(?:me|latino)\\.com|turkiye\\.com\\.tr|channel\\.de)|(?:starwars|marvelkids)\\.com))/(?:(?:embed/|(?:[^/]+/)+[\\w-]+-)(?P<id>[a-z0-9]{24})|(?:[^/]+/)?(?P<display_id>[^/?#]+))'''\n    _TESTS = [{\n        # Disney.EmbedVideo\n        'url': 'http://video.disney.com/watch/moana-trailer-545ed1857afee5a0ec239977',\n        'info_dict': {\n            'id': '545ed1857afee5a0ec239977',\n            'ext': 'mp4',\n            'title': 'Moana - Trailer',\n            'description': 'A fun adventure for the entire Family!  Bring home Moana on Digital HD Feb 21 & Blu-ray March 7',\n            'upload_date': '20170112',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        }\n    }, {\n        # Grill.burger\n        'url': 'http://www.starwars.com/video/rogue-one-a-star-wars-story-intro-featurette',\n        'info_dict': {\n            'id': '5454e9f4e9804a552e3524c8',\n            'ext': 'mp4',\n            'title': '\"Intro\" Featurette: Rogue One: A Star Wars Story',\n            'upload_date': '20170104',\n            'description': 'Go behind-the-scenes of Rogue One: A Star Wars Story in this featurette with Director Gareth Edwards and the cast of the film.',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://videos.disneylatino.com/ver/spider-man-de-regreso-a-casa-primer-adelanto-543a33a1850bdcfcca13bae2',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.en.disneyme.com/watch/future-worm/robo-carp-2001-544b66002aa7353cdd3f5114',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.disneyturkiye.com.tr/izle/7c-7-cuceler/kimin-sesi-zaten-5456f3d015f6b36c8afdd0e2',\n        'only_matching': True,\n    }, {\n        'url': 'http://disneyjunior.disney.com/embed/546a4798ddba3d1612e4005d',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.starwars.com/embed/54690d1e6c42e5f09a0fb097',\n        'only_matching': True,\n    }, {\n        'url': 'http://spiderman.marvelkids.com/embed/522900d2ced3c565e4cc0677',\n        'only_matching': True,\n    }, {\n        'url': 'http://spiderman.marvelkids.com/videos/contest-of-champions-part-four-clip-1',\n        'only_matching': True,\n    }, {\n        'url': 'http://disneyjunior.en.disneyme.com/dj/watch-my-friends-tigger-and-pooh-promo',\n        'only_matching': True,\n    }, {\n        'url': 'http://disneychannel.de/sehen/soy-luna-folge-118-5518518987ba27f3cc729268',\n        'only_matching': True,\n    }, {\n        'url': 'http://disneyjunior.disney.com/galactech-the-galactech-grab-galactech-an-admiral-rescue',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        domain, video_id, display_id = re.match(self._VALID_URL, url).groups()\n        if not video_id:\n            webpage = self._download_webpage(url, display_id)\n            grill = re.sub(r'\"\\s*\\+\\s*\"', '', self._search_regex(\n                r'Grill\\.burger\\s*=\\s*({.+})\\s*:',\n                webpage, 'grill data'))\n            page_data = next(s for s in self._parse_json(grill, display_id)['stack'] if s.get('type') == 'video')\n            video_data = page_data['data'][0]\n        else:\n            webpage = self._download_webpage(\n                'http://%s/embed/%s' % (domain, video_id), video_id)\n            page_data = self._parse_json(self._search_regex(\n                r'Disney\\.EmbedVideo\\s*=\\s*({.+});',\n                webpage, 'embed data'), video_id)\n            video_data = page_data['video']\n\n        for external in video_data.get('externals', []):\n            if external.get('source') == 'vevo':\n                return self.url_result('vevo:' + external['data_id'], 'Vevo')\n\n        video_id = video_data['id']\n        title = video_data['title']\n\n        formats = []\n        for flavor in video_data.get('flavors', []):\n            flavor_format = flavor.get('format')\n            flavor_url = flavor.get('url')\n            if not flavor_url or not re.match(r'https?://', flavor_url) or flavor_format == 'mp4_access':\n                continue\n            tbr = int_or_none(flavor.get('bitrate'))\n            if tbr == 99999:\n                # wrong ks(Kaltura Signature) causes 404 Error\n                flavor_url = update_url_query(flavor_url, {'ks': ''})\n                m3u8_formats = self._extract_m3u8_formats(\n                    flavor_url, video_id, 'mp4',\n                    m3u8_id=flavor_format, fatal=False)\n                for f in m3u8_formats:\n                    # Apple FairPlay\n                    if '/fpshls/' in f['url']:\n                        continue\n                    formats.append(f)\n                continue\n            format_id = []\n            if flavor_format:\n                format_id.append(flavor_format)\n            if tbr:\n                format_id.append(compat_str(tbr))\n            ext = determine_ext(flavor_url)\n            if flavor_format == 'applehttp' or ext == 'm3u8':\n                ext = 'mp4'\n            width = int_or_none(flavor.get('width'))\n            height = int_or_none(flavor.get('height'))\n            formats.append({\n                'format_id': '-'.join(format_id),\n                'url': flavor_url,\n                'width': width,\n                'height': height,\n                'tbr': tbr,\n                'ext': ext,\n                'vcodec': 'none' if (width == 0 and height == 0) else None,\n            })\n        if not formats and video_data.get('expired'):\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, page_data['translations']['video_expired']),\n                expected=True)\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for caption in video_data.get('captions', []):\n            caption_url = caption.get('url')\n            caption_format = caption.get('format')\n            if not caption_url or caption_format.startswith('unknown'):\n                continue\n            subtitles.setdefault(caption.get('language', 'en'), []).append({\n                'url': caption_url,\n                'ext': {\n                    'webvtt': 'vtt',\n                }.get(caption_format, caption_format),\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description') or video_data.get('short_desc'),\n            'thumbnail': video_data.get('thumb') or video_data.get('thumb_secure'),\n            'duration': int_or_none(video_data.get('duration_sec')),\n            'upload_date': unified_strdate(video_data.get('publish_date')),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "disney.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/disney.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}