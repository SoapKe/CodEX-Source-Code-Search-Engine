{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2012, Dag Wieers <dag@wieers.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = r'''\n---\nmodule: hponcfg\nauthor: Dag Wieers (@dagwieers)\nversion_added: \"2.3\"\nshort_description: Configure HP iLO interface using hponcfg\ndescription:\n- This modules configures the HP iLO interface using hponcfg.\noptions:\n  path:\n    description:\n    - The XML file as accepted by hponcfg.\n    required: true\n    aliases: ['src']\n  minfw:\n    description:\n    - The minimum firmware level needed.\n    required: false\n  executable:\n    description:\n    - Path to the hponcfg executable (`hponcfg` which uses $PATH).\n    default: hponcfg\n    version_added: \"2.4\"\n  verbose:\n    description:\n    - Run hponcfg in verbose mode (-v).\n    default: no\n    type: bool\n    version_added: \"2.4\"\nrequirements:\n- hponcfg tool\nnotes:\n- You need a working hponcfg on the target system.\n'''\n\nEXAMPLES = r'''\n- name: Example hponcfg configuration XML\n  copy:\n    content: |\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n\n    module = AnsibleModule(\n        argument_spec=dict(\n            src=dict(type='path', required=True, aliases=['path']),\n            minfw=dict(type='str'),\n            executable=dict(default='hponcfg', type='str'),\n            verbose=dict(default=False, type='bool'),\n        )\n    )\n\n    # Consider every action a change (not idempotent yet!)\n    changed = True\n\n    src = module.params['src']\n    minfw = module.params['minfw']\n    executable = module.params['executable']\n    verbose = module.params['verbose']\n\n    options = ' -f %s' % src\n\n    if verbose:\n        options += ' -v'\n\n    if minfw:\n        options += ' -m %s' % minfw\n\n    rc, stdout, stderr = module.run_command('%s %s' % (executable, options))\n\n    if rc != 0:\n        module.fail_json(rc=rc, msg=\"Failed to run hponcfg\", stdout=stdout, stderr=stderr)\n\n    module.exit_json(changed=changed, stdout=stdout, stderr=stderr)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  hponcfg author  dag wieers ( dagwieers) version added   2 3  short description  configure hp ilo interface using hponcfg description    this modules configures hp ilo interface using hponcfg  options    path      description        the xml file accepted hponcfg      required  true     aliases    src     minfw      description        the minimum firmware level needed      required  false   executable      description        path hponcfg executable ( hponcfg  uses  path)      default  hponcfg     version added   2 4    verbose      description        run hponcfg verbose mode ( v)      default      type  bool     version added   2 4  requirements    hponcfg tool notes    you need working hponcfg target system       examples   r      name  example hponcfg configuration xml   copy      content           ribcl version  2 0            login user login  user  password  password              rib info mode  write                mod global settings                 session timeout value  0                   ssh status value  y                   ssh port value  22                   serial cli status value  3                   serial cli speed value  5                  mod global settings              rib info            login          ribcl      dest   tmp enable ssh xml    name  configure hp ilo using enable ssh xml   hponcfg      src   tmp enable ssh xml    name  configure hp ilo vmware esxi hypervisor   hponcfg      src   tmp enable ssh xml     executable   opt hp tools hponcfg         usr bin python        coding  utf 8        (c) 2012  dag wieers  dag wieers com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    consider every action change (not idempotent yet ) ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2012, Dag Wieers <dag@wieers.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = r'''\n---\nmodule: hponcfg\nauthor: Dag Wieers (@dagwieers)\nversion_added: \"2.3\"\nshort_description: Configure HP iLO interface using hponcfg\ndescription:\n- This modules configures the HP iLO interface using hponcfg.\noptions:\n  path:\n    description:\n    - The XML file as accepted by hponcfg.\n    required: true\n    aliases: ['src']\n  minfw:\n    description:\n    - The minimum firmware level needed.\n    required: false\n  executable:\n    description:\n    - Path to the hponcfg executable (`hponcfg` which uses $PATH).\n    default: hponcfg\n    version_added: \"2.4\"\n  verbose:\n    description:\n    - Run hponcfg in verbose mode (-v).\n    default: no\n    type: bool\n    version_added: \"2.4\"\nrequirements:\n- hponcfg tool\nnotes:\n- You need a working hponcfg on the target system.\n'''\n\nEXAMPLES = r'''\n- name: Example hponcfg configuration XML\n  copy:\n    content: |\n      <ribcl VERSION=\"2.0\">\n        <login USER_LOGIN=\"user\" PASSWORD=\"password\">\n          <rib_info MODE=\"WRITE\">\n            <mod_global_settings>\n              <session_timeout value=\"0\"/>\n              <ssh_status value=\"Y\"/>\n              <ssh_port value=\"22\"/>\n              <serial_cli_status value=\"3\"/>\n              <serial_cli_speed value=\"5\"/>\n            </mod_global_settings>\n          </rib_info>\n        </login>\n      </ribcl>\n    dest: /tmp/enable-ssh.xml\n\n- name: Configure HP iLO using enable-ssh.xml\n  hponcfg:\n    src: /tmp/enable-ssh.xml\n\n- name: Configure HP iLO on VMware ESXi hypervisor\n  hponcfg:\n    src: /tmp/enable-ssh.xml\n    executable: /opt/hp/tools/hponcfg\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n\n    module = AnsibleModule(\n        argument_spec=dict(\n            src=dict(type='path', required=True, aliases=['path']),\n            minfw=dict(type='str'),\n            executable=dict(default='hponcfg', type='str'),\n            verbose=dict(default=False, type='bool'),\n        )\n    )\n\n    # Consider every action a change (not idempotent yet!)\n    changed = True\n\n    src = module.params['src']\n    minfw = module.params['minfw']\n    executable = module.params['executable']\n    verbose = module.params['verbose']\n\n    options = ' -f %s' % src\n\n    if verbose:\n        options += ' -v'\n\n    if minfw:\n        options += ' -m %s' % minfw\n\n    rc, stdout, stderr = module.run_command('%s %s' % (executable, options))\n\n    if rc != 0:\n        module.fail_json(rc=rc, msg=\"Failed to run hponcfg\", stdout=stdout, stderr=stderr)\n\n    module.exit_json(changed=changed, stdout=stdout, stderr=stderr)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "hponcfg.py", "id": "a4f47588c35bb05cfc1f39a63fb64d39", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/remote_management/hpilo/hponcfg.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}