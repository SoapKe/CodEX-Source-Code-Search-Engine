{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestAddReverse(object):\n\n    def test_add_reverse(self):\n        print('Test: Empty list(s)')\n        assert_equal(MyLinkedList().add_reverse(None, None), None)\n        assert_equal(MyLinkedList().add_reverse(Node(5), None), None)\n        assert_equal(MyLinkedList().add_reverse(None, Node(10)), None)\n\n        print('Test: Add values of different lengths')\n        \n        \n        \n        first_list = MyLinkedList(Node(6))\n        first_list.append(5)\n        second_list = MyLinkedList(Node(9))\n        second_list.append(8)\n        second_list.append(7)\n        result = MyLinkedList().add_reverse(first_list, second_list)\n        assert_equal(result.get_all_data(), [5, 4, 8])\n\n        print('Test: Add values of same lengths')\n        \n        \n        \n        first_head = Node(6)\n        first_list = MyLinkedList(first_head)\n        first_list.append(5)\n        first_list.append(4)\n        second_head = Node(9)\n        second_list = MyLinkedList(second_head)\n        second_list.append(8)\n        second_list.append(7)\n        result = MyLinkedList().add_reverse(first_list, second_list)\n        assert_equal(result.get_all_data(), [5, 4, 2, 1])\n\n        print('Success: test_add_reverse')\n\n\ndef main():\n    test = TestAddReverse()\n    test.test_add_reverse()\n\n\nif __name__ == '__main__':\n    main()", "comments": "  input 1  6  5  none    input 2  9  8  7    result  5  4  8    input 1  6  5  4    input 2  9  8  7    result  5  4  2  1 ", "content": "from nose.tools import assert_equal\n\n\nclass TestAddReverse(object):\n\n    def test_add_reverse(self):\n        print('Test: Empty list(s)')\n        assert_equal(MyLinkedList().add_reverse(None, None), None)\n        assert_equal(MyLinkedList().add_reverse(Node(5), None), None)\n        assert_equal(MyLinkedList().add_reverse(None, Node(10)), None)\n\n        print('Test: Add values of different lengths')\n        # Input 1: 6->5->None\n        # Input 2: 9->8->7\n        # Result: 5->4->8\n        first_list = MyLinkedList(Node(6))\n        first_list.append(5)\n        second_list = MyLinkedList(Node(9))\n        second_list.append(8)\n        second_list.append(7)\n        result = MyLinkedList().add_reverse(first_list, second_list)\n        assert_equal(result.get_all_data(), [5, 4, 8])\n\n        print('Test: Add values of same lengths')\n        # Input 1: 6->5->4\n        # Input 2: 9->8->7\n        # Result: 5->4->2->1\n        first_head = Node(6)\n        first_list = MyLinkedList(first_head)\n        first_list.append(5)\n        first_list.append(4)\n        second_head = Node(9)\n        second_list = MyLinkedList(second_head)\n        second_list.append(8)\n        second_list.append(7)\n        result = MyLinkedList().add_reverse(first_list, second_list)\n        assert_equal(result.get_all_data(), [5, 4, 2, 1])\n\n        print('Success: test_add_reverse')\n\n\ndef main():\n    test = TestAddReverse()\n    test.test_add_reverse()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_add_reverse.py", "id": "0fb6ea4a50e710778aa245fa06ae6c94", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/linked_lists/add_reverse/test_add_reverse.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}