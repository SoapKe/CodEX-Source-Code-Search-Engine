{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, models\n\n\nclass ProductTemplate(models.Model):\n    _name = 'product.template'\n    _inherit = 'product.template'\n\n    @api.multi\n    def compute_price(self):\n        for template in self:\n            if template.product_variant_count == 1:\n                return template.product_variant_id.compute_price()\n\n\nclass ProductProduct(models.Model):\n    _name = 'product.product'\n    _inherit = 'product.product'\n\n    @api.multi\n    def compute_price(self):\n        bom_obj = self.env['mrp.bom']\n        action_rec = self.env.ref('stock_account.action_view_change_standard_price')\n        for product in self:\n            bom = bom_obj._bom_find(product=product)\n            if bom:\n                price = product._calc_price(bom)\n                if action_rec:\n                    action = action_rec.read([])[0]\n                    action['context'] = {'default_new_price': price}\n                    return action\n        return True\n\n    def _calc_price(self, bom):\n        price = 0.0\n        result, result2 = bom.explode(self, 1)\n        for sbom, sbom_data in result2:\n            price += sbom.product_id.uom_id._compute_price(sbom.product_id.standard_price, sbom.product_uom_id) * sbom_data['qty']\n        if bom.routing_id:\n            \n            if hasattr(self.env['mrp.workcenter'], 'costs_hour'):                \n                total_cost = 0.0\n                for order in bom.routing_id.operation_ids:\n                    total_cost += (order.time_cycle/60) * order.workcenter_id.costs_hour\n                price += bom.product_uom_id._compute_price(total_cost, bom.product_id.uom_id)\n        \n        if price > 0:\n            price = bom.product_uom_id._compute_price(price / bom.product_qty, self.uom_id)\n        return price\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     fixme master  remove    convert product uom quantities ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, models\n\n\nclass ProductTemplate(models.Model):\n    _name = 'product.template'\n    _inherit = 'product.template'\n\n    @api.multi\n    def compute_price(self):\n        for template in self:\n            if template.product_variant_count == 1:\n                return template.product_variant_id.compute_price()\n\n\nclass ProductProduct(models.Model):\n    _name = 'product.product'\n    _inherit = 'product.product'\n\n    @api.multi\n    def compute_price(self):\n        bom_obj = self.env['mrp.bom']\n        action_rec = self.env.ref('stock_account.action_view_change_standard_price')\n        for product in self:\n            bom = bom_obj._bom_find(product=product)\n            if bom:\n                price = product._calc_price(bom)\n                if action_rec:\n                    action = action_rec.read([])[0]\n                    action['context'] = {'default_new_price': price}\n                    return action\n        return True\n\n    def _calc_price(self, bom):\n        price = 0.0\n        result, result2 = bom.explode(self, 1)\n        for sbom, sbom_data in result2:\n            price += sbom.product_id.uom_id._compute_price(sbom.product_id.standard_price, sbom.product_uom_id) * sbom_data['qty']\n        if bom.routing_id:\n            # FIXME master: remove me\n            if hasattr(self.env['mrp.workcenter'], 'costs_hour'):                \n                total_cost = 0.0\n                for order in bom.routing_id.operation_ids:\n                    total_cost += (order.time_cycle/60) * order.workcenter_id.costs_hour\n                price += bom.product_uom_id._compute_price(total_cost, bom.product_id.uom_id)\n        # Convert on product UoM quantities\n        if price > 0:\n            price = bom.product_uom_id._compute_price(price / bom.product_qty, self.uom_id)\n        return price\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "product.py", "id": "40879731863b32c7f1d0fa3a2fd8608e", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/product_extended/models/product.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}