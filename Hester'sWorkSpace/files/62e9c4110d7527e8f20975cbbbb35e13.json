{"author": "nvbn", "code": "from collections import Counter\nimport re\nfrom thefuck.system import Path\nfrom thefuck.utils import (get_valid_history_without_current,\n                           memoize, replace_argument)\nfrom thefuck.shells import shell\n\n\npatterns = [r'no such file or directory: (.*)$',\n            r\"cannot access '(.*)': No such file or directory\",\n            r': (.*): No such file or directory',\n            r\"can't cd to (.*)$\"]\n\n\n@memoize\ndef _get_destination(command):\n    for pattern in patterns:\n        found = re.findall(pattern, command.output)\n        if found:\n            if found[0] in command.script_parts:\n                return found[0]\n\n\ndef match(command):\n    return bool(_get_destination(command))\n\n\ndef _get_all_absolute_paths_from_history(command):\n    counter = Counter()\n\n    for line in get_valid_history_without_current(command):\n        splitted = shell.split_command(line)\n\n        for param in splitted[1:]:\n            if param.startswith('/') or param.startswith('~'):\n                if param.endswith('/'):\n                    param = param[:-1]\n\n                counter[param] += 1\n\n    return (path for path, _ in counter.most_common(None))\n\n\ndef get_new_command(command):\n    destination = _get_destination(command)\n    paths = _get_all_absolute_paths_from_history(command)\n\n    return [replace_argument(command.script, destination, path)\n            for path in paths if path.endswith(destination)\n            and Path(path).expanduser().exists()]\n\n\npriority = 800\n", "comments": "", "content": "from collections import Counter\nimport re\nfrom thefuck.system import Path\nfrom thefuck.utils import (get_valid_history_without_current,\n                           memoize, replace_argument)\nfrom thefuck.shells import shell\n\n\npatterns = [r'no such file or directory: (.*)$',\n            r\"cannot access '(.*)': No such file or directory\",\n            r': (.*): No such file or directory',\n            r\"can't cd to (.*)$\"]\n\n\n@memoize\ndef _get_destination(command):\n    for pattern in patterns:\n        found = re.findall(pattern, command.output)\n        if found:\n            if found[0] in command.script_parts:\n                return found[0]\n\n\ndef match(command):\n    return bool(_get_destination(command))\n\n\ndef _get_all_absolute_paths_from_history(command):\n    counter = Counter()\n\n    for line in get_valid_history_without_current(command):\n        splitted = shell.split_command(line)\n\n        for param in splitted[1:]:\n            if param.startswith('/') or param.startswith('~'):\n                if param.endswith('/'):\n                    param = param[:-1]\n\n                counter[param] += 1\n\n    return (path for path, _ in counter.most_common(None))\n\n\ndef get_new_command(command):\n    destination = _get_destination(command)\n    paths = _get_all_absolute_paths_from_history(command)\n\n    return [replace_argument(command.script, destination, path)\n            for path in paths if path.endswith(destination)\n            and Path(path).expanduser().exists()]\n\n\npriority = 800\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "path_from_history.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/rules/path_from_history.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}