{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2017, Bruno Calogero <brunocalogero@hotmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_interface_policy_leaf_policy_group\nshort_description: Manage fabric interface policy leaf policy groups (infra:AccBndlGrp, infra:AccPortGrp)\ndescription:\n- Manage fabric interface policy leaf policy groups on Cisco ACI fabrics.\nnotes:\n- When using the module please select the appropriate link_aggregation_type (lag_type).\n  C(link) for Port Channel(PC), C(node) for Virtual Port Channel(VPC) and C(leaf) for Leaf Access Port Policy Group.\n- More information about the internal APIC classes B(infra:AccBndlGrp) and B(infra:AccPortGrp) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Bruno Calogero (@brunocalogero)\nversion_added: '2.5'\noptions:\n policy_group:\n   description:\n   - Name of the leaf policy group to be added/deleted.\n   aliases: [ name, policy_group_name ]\n description:\n   description:\n   - Description for the leaf policy group to be created.\n   aliases: [ descr ]\n lag_type:\n   description:\n   - Selector for the type of leaf policy group we want to create.\n   - C(leaf) for Leaf Access Port Policy Group\n   - C(link) for Port Channel (PC)\n   - C(node) for Virtual Port Channel (VPC)\n   aliases: [ lag_type_name ]\n   choices: [ leaf, link, node ]\n link_level_policy:\n   description:\n   - Choice of link_level_policy to be used as part of the leaf policy group to be created.\n   aliases: [ link_level_policy_name ]\n cdp_policy:\n   description:\n   - Choice of cdp_policy to be used as part of the leaf policy group to be created.\n   aliases: [ cdp_policy_name ]\n mcp_policy:\n   description:\n   - Choice of mcp_policy to be used as part of the leaf policy group to be created.\n   aliases: [ mcp_policy_name ]\n lldp_policy:\n   description:\n   - Choice of lldp_policy to be used as part of the leaf policy group to be created.\n   aliases: [ lldp_policy_name ]\n stp_interface_policy:\n   description:\n   - Choice of stp_interface_policy to be used as part of the leaf policy group to be created.\n   aliases: [ stp_interface_policy_name ]\n egress_data_plane_policing_policy:\n   description:\n   - Choice of egress_data_plane_policing_policy to be used as part of the leaf policy group to be created.\n   aliases: [ egress_data_plane_policing_policy_name ]\n ingress_data_plane_policing_policy:\n   description:\n   - Choice of ingress_data_plane_policing_policy to be used as part of the leaf policy group to be created.\n   aliases: [ ingress_data_plane_policing_policy_name ]\n priority_flow_control_policy:\n   description:\n   - Choice of priority_flow_control_policy to be used as part of the leaf policy group to be created.\n   aliases: [ priority_flow_control_policy_name ]\n fibre_channel_interface_policy:\n   description:\n   - Choice of fibre_channel_interface_policy to be used as part of the leaf policy group to be created.\n   aliases: [ fibre_channel_interface_policy_name ]\n slow_drain_policy:\n   description:\n   - Choice of slow_drain_policy to be used as part of the leaf policy group to be created.\n   aliases: [ slow_drain_policy_name ]\n port_channel_policy:\n   description:\n   - Choice of port_channel_policy to be used as part of the leaf policy group to be created.\n   aliases: [ port_channel_policy_name ]\n monitoring_policy:\n   description:\n   - Choice of monitoring_policy to be used as part of the leaf policy group to be created.\n   aliases: [ monitoring_policy_name ]\n storm_control_interface_policy:\n   description:\n   - Choice of storm_control_interface_policy to be used as part of the leaf policy group to be created.\n   aliases: [ storm_control_interface_policy_name ]\n l2_interface_policy:\n   description:\n   - Choice of l2_interface_policy to be used as part of the leaf policy group to be created.\n   aliases: [ l2_interface_policy_name ]\n port_security_policy:\n   description:\n   - Choice of port_security_policy to be used as part of the leaf policy group to be created.\n   aliases: [ port_security_policy_name ]\n aep:\n   description:\n   - Choice of attached_entity_profile (AEP) to be used as part of the leaf policy group to be created.\n   aliases: [ aep_name ]\n state:\n   description:\n   - Use C(present) or C(absent) for adding or removing.\n   - Use C(query) for listing an object or multiple objects.\n   choices: [ absent, present, query ]\n   default: present\nextends_documentation_fragment: aci\n'''\n\n\nEXAMPLES = r'''\n- name: Create a Port Channel (PC) Interface Policy Group\n  aci_interface_policy_leaf_policy_group:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    policy_group: policygroupname\n    description: policygroupname description\n    lag_type: link\n    link_level_policy: whateverlinklevelpolicy\n    fibre_channel_interface_policy: whateverfcpolicy\n    state: present\n\n- name: Create a Virtual Port Channel (VPC) Interface Policy Group (no description)\n  aci_interface_policy_leaf_policy_group:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    policy_group: policygroupname\n    lag_type: node\n    link_level_policy: whateverlinklevelpolicy\n    fibre_channel_interface_policy: whateverfcpolicy\n    state: present\n\n- name: Create a Leaf Access Port Policy Group (no description)\n  aci_interface_policy_leaf_policy_group:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    policy_group: policygroupname\n    lag_type: leaf\n    link_level_policy: whateverlinklevelpolicy\n    fibre_channel_interface_policy: whateverfcpolicy\n    state: present\n\n- name: Delete an Interface policy Leaf Policy Group\n  aci_interface_policy_leaf_policy_group:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    policy_group: policygroupname\n    lag_type: type_name\n    state: absent\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update({\n        'policy_group': dict(type='str', aliases=['name', 'policy_group_name']),  \n        'description': dict(type='str', aliases=['descr']),\n        # NOTE: Since this module needs to include both infra:AccBndlGrp (for PC and VPC) and infra:AccPortGrp (for leaf access port policy group):\n        # NOTE: I'll allow the user to make the choice here (link(PC), node(VPC), leaf(leaf-access port policy group))\n        'lag_type': dict(type='str', aliases=['lag_type_name'], choices=['leaf', 'link', 'node']),  \n        'link_level_policy': dict(type='str', aliases=['link_level_policy_name']),\n        'cdp_policy': dict(type='str', aliases=['cdp_policy_name']),\n        'mcp_policy': dict(type='str', aliases=['mcp_policy_name']),\n        'lldp_policy': dict(type='str', aliases=['lldp_policy_name']),\n        'stp_interface_policy': dict(type='str', aliases=['stp_interface_policy_name']),\n        'egress_data_plane_policing_policy': dict(type='str', aliases=['egress_data_plane_policing_policy_name']),\n        'ingress_data_plane_policing_policy': dict(type='str', aliases=['ingress_data_plane_policing_policy_name']),\n        'priority_flow_control_policy': dict(type='str', aliases=['priority_flow_control_policy_name']),\n        'fibre_channel_interface_policy': dict(type='str', aliases=['fibre_channel_interface_policy_name']),\n        'slow_drain_policy': dict(type='str', aliases=['slow_drain_policy_name']),\n        'port_channel_policy': dict(type='str', aliases=['port_channel_policy_name']),\n        'monitoring_policy': dict(type='str', aliases=['monitoring_policy_name']),\n        'storm_control_interface_policy': dict(type='str', aliases=['storm_control_interface_policy_name']),\n        'l2_interface_policy': dict(type='str', aliases=['l2_interface_policy_name']),\n        'port_security_policy': dict(type='str', aliases=['port_security_policy_name']),\n        'aep': dict(type='str', aliases=['aep_name']),\n        'state': dict(type='str', default='present', choices=['absent', 'present', 'query']),\n    })\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['lag_type', 'policy_group']],\n            ['state', 'present', ['lag_type', 'policy_group']],\n        ],\n    )\n\n    policy_group = module.params['policy_group']\n    description = module.params['description']\n    lag_type = module.params['lag_type']\n    link_level_policy = module.params['link_level_policy']\n    cdp_policy = module.params['cdp_policy']\n    mcp_policy = module.params['mcp_policy']\n    lldp_policy = module.params['lldp_policy']\n    stp_interface_policy = module.params['stp_interface_policy']\n    egress_data_plane_policing_policy = module.params['egress_data_plane_policing_policy']\n    ingress_data_plane_policing_policy = module.params['ingress_data_plane_policing_policy']\n    priority_flow_control_policy = module.params['priority_flow_control_policy']\n    fibre_channel_interface_policy = module.params['fibre_channel_interface_policy']\n    slow_drain_policy = module.params['slow_drain_policy']\n    port_channel_policy = module.params['port_channel_policy']\n    monitoring_policy = module.params['monitoring_policy']\n    storm_control_interface_policy = module.params['storm_control_interface_policy']\n    l2_interface_policy = module.params['l2_interface_policy']\n    port_security_policy = module.params['port_security_policy']\n    aep = module.params['aep']\n    state = module.params['state']\n\n    if lag_type == 'leaf':\n        aci_class_name = 'infraAccPortGrp'\n        dn_name = 'accportgrp'\n        class_config_dict = dict(\n            name=policy_group,\n            descr=description,\n        )\n    elif lag_type == 'link' or lag_type == 'node':\n        aci_class_name = 'infraAccBndlGrp'\n        dn_name = 'accbundle'\n        class_config_dict = dict(\n            name=policy_group,\n            descr=description,\n            lagT=lag_type,\n        )\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class=aci_class_name,\n            aci_rn='infra/funcprof/{0}-{1}'.format(dn_name, policy_group),\n            filter_target='eq({0}.name, \"{1}\")'.format(aci_class_name, policy_group),\n            module_object=policy_group,\n        ),\n        child_classes=[\n            'infraRsAttEntP',\n            'infraRsCdpIfPol',\n            'infraRsFcIfPol',\n            'infraRsHIfPol',\n            'infraRsL2IfPol',\n            'infraRsL2PortSecurityPol',\n            'infraRsLacpPol',\n            'infraRsLldpIfPol',\n            'infraRsMcpIfPol',\n            'infraRsMonIfInfraPol',\n            'infraRsQosEgressDppIfPol',\n            'infraRsQosIngressDppIfPol',\n            'infraRsQosPfcIfPol',\n            'infraRsQosSdIfPol',\n            'infraRsStormctrlIfPol',\n            'infraRsStpIfPol',\n        ],\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class=aci_class_name,\n            class_config=class_config_dict,\n            child_configs=[\n                dict(\n                    infraRsAttEntP=dict(\n                        attributes=dict(\n                            tDn='uni/infra/attentp-{0}'.format(aep),\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsCdpIfPol=dict(\n                        attributes=dict(\n                            tnCdpIfPolName=cdp_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsFcIfPol=dict(\n                        attributes=dict(\n                            tnFcIfPolName=fibre_channel_interface_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsHIfPol=dict(\n                        attributes=dict(\n                            tnFabricHIfPolName=link_level_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsL2IfPol=dict(\n                        attributes=dict(\n                            tnL2IfPolName=l2_interface_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsL2PortSecurityPol=dict(\n                        attributes=dict(\n                            tnL2PortSecurityPolName=port_security_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsLacpPol=dict(\n                        attributes=dict(\n                            tnLacpLagPolName=port_channel_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsLldpIfPol=dict(\n                        attributes=dict(\n                            tnLldpIfPolName=lldp_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsMcpIfPol=dict(\n                        attributes=dict(\n                            tnMcpIfPolName=mcp_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsMonIfInfraPol=dict(\n                        attributes=dict(\n                            tnMonInfraPolName=monitoring_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsQosEgressDppIfPol=dict(\n                        attributes=dict(\n                            tnQosDppPolName=egress_data_plane_policing_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsQosIngressDppIfPol=dict(\n                        attributes=dict(\n                            tnQosDppPolName=ingress_data_plane_policing_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsQosPfcIfPol=dict(\n                        attributes=dict(\n                            tnQosPfcIfPolName=priority_flow_control_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsQosSdIfPol=dict(\n                        attributes=dict(\n                            tnQosSdIfPolName=slow_drain_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsStormctrlIfPol=dict(\n                        attributes=dict(\n                            tnStormctrlIfPolName=storm_control_interface_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsStpIfPol=dict(\n                        attributes=dict(\n                            tnStpIfPolName=stp_interface_policy,\n                        ),\n                    ),\n                ),\n            ],\n        )\n\n        aci.get_diff(aci_class=aci_class_name)\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  aci interface policy leaf policy group short description  manage fabric interface policy leaf policy groups (infra accbndlgrp  infra accportgrp) description    manage fabric interface policy leaf policy groups cisco aci fabrics  notes    when using module please select appropriate link aggregation type (lag type)    c(link) port channel(pc)  c(node) virtual port channel(vpc) c(leaf) leaf access port policy group    more information internal apic classes b(infra accbndlgrp) b(infra accportgrp)   l(the apic management information model reference https   developer cisco com docs apic mim ref )  author    bruno calogero ( brunocalogero) version added   2 5  options   policy group     description       name leaf policy group added deleted     aliases    name  policy group name    description     description       description leaf policy group created     aliases    descr    lag type     description       selector type leaf policy group want create       c(leaf) leaf access port policy group      c(link) port channel (pc)      c(node) virtual port channel (vpc)    aliases    lag type name      choices    leaf  link  node    link level policy     description       choice link level policy used part leaf policy group created     aliases    link level policy name    cdp policy     description       choice cdp policy used part leaf policy group created     aliases    cdp policy name    mcp policy     description       choice mcp policy used part leaf policy group created     aliases    mcp policy name    lldp policy     description       choice lldp policy used part leaf policy group created     aliases    lldp policy name    stp interface policy     description       choice stp interface policy used part leaf policy group created     aliases    stp interface policy name    egress data plane policing policy     description       choice egress data plane policing policy used part leaf policy group created     aliases    egress data plane policing policy name    ingress data plane policing policy     description       choice ingress data plane policing policy used part leaf policy group created     aliases    ingress data plane policing policy name    priority flow control policy     description       choice priority flow control policy used part leaf policy group created     aliases    priority flow control policy name    fibre channel interface policy     description       choice fibre channel interface policy used part leaf policy group created     aliases    fibre channel interface policy name    slow drain policy     description       choice slow drain policy used part leaf policy group created     aliases    slow drain policy name    port channel policy     description       choice port channel policy used part leaf policy group created     aliases    port channel policy name    monitoring policy     description       choice monitoring policy used part leaf policy group created     aliases    monitoring policy name    storm control interface policy     description       choice storm control interface policy used part leaf policy group created     aliases    storm control interface policy name    l2 interface policy     description       choice l2 interface policy used part leaf policy group created     aliases    l2 interface policy name    port security policy     description       choice port security policy used part leaf policy group created     aliases    port security policy name    aep     description       choice attached entity profile (aep) used part leaf policy group created     aliases    aep name    state     description       use c(present) c(absent) adding removing       use c(query) listing object multiple objects     choices    absent  present  query      default  present extends documentation fragment  aci        fixme  add query examples examples   r      name  create port channel (pc) interface policy group   aci interface policy leaf policy group      host  apic     username  admin     password  somesecretpassword     policy group  policygroupname     description  policygroupname description     lag type  link     link level policy  whateverlinklevelpolicy     fibre channel interface policy  whateverfcpolicy     state  present    name  create virtual port channel (vpc) interface policy group (no description)   aci interface policy leaf policy group      host  apic     username  admin     password  somesecretpassword     policy group  policygroupname     lag type  node     link level policy  whateverlinklevelpolicy     fibre channel interface policy  whateverfcpolicy     state  present    name  create leaf access port policy group (no description)   aci interface policy leaf policy group      host  apic     username  admin     password  somesecretpassword     policy group  policygroupname     lag type  leaf     link level policy  whateverlinklevelpolicy     fibre channel interface policy  whateverfcpolicy     state  present    name  delete interface policy leaf policy group   aci interface policy leaf policy group      host  apic     username  admin     password  somesecretpassword     policy group  policygroupname     lag type  type name     state  absent      return   r    current    description  the existing configuration apic module finished   returned  success   type  list   sample                               fvtenant                      attributes                          descr    production environment                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      error    description  the error information returned apic   returned  failure   type  dict   sample                 code    122            text    unknown managed object class foo        raw    description  the raw output returned apic rest api (xml json)   returned  parse error   type  string   sample     xml version  1 0  encoding  utf 8    imdata totalcount  1   error code  122  text  unknown managed object class foo     imdata   sent    description  the actual minimal configuration pushed apic   returned  info   type  list   sample                 fvtenant                  attributes                      descr    production environment                                previous    description  the original configuration apic module started   returned  info   type  list   sample                               fvtenant                      attributes                          descr    production                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      proposed    description  the assembled configuration user provided parameters   returned  info   type  dict   sample                 fvtenant                  attributes                      descr    production environment                    name    production                                filter string    description  the filter string used request   returned  failure debug   type  string   sample   rsp prop include config method    description  the http method used request apic   returned  failure debug   type  string   sample  post response    description  the http response apic   returned  failure debug   type  string   sample  ok (30 bytes) status    description  the http status apic   returned  failure debug   type  int   sample  200 url    description  the http url used request apic   returned  failure debug   type  string   sample  https   10 11 12 13 api mo uni tn production json         usr bin python        coding  utf 8        copyright  (c) 2017  bruno calogero  brunocalogero hotmail com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    fixme  add query examples    not required querying objects    note  since module needs include infra accbndlgrp (for pc vpc) infra accportgrp (for leaf access port policy group)     note  i allow user make choice (link(pc)  node(vpc)  leaf(leaf access port policy group))    not required querying objects ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2017, Bruno Calogero <brunocalogero@hotmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_interface_policy_leaf_policy_group\nshort_description: Manage fabric interface policy leaf policy groups (infra:AccBndlGrp, infra:AccPortGrp)\ndescription:\n- Manage fabric interface policy leaf policy groups on Cisco ACI fabrics.\nnotes:\n- When using the module please select the appropriate link_aggregation_type (lag_type).\n  C(link) for Port Channel(PC), C(node) for Virtual Port Channel(VPC) and C(leaf) for Leaf Access Port Policy Group.\n- More information about the internal APIC classes B(infra:AccBndlGrp) and B(infra:AccPortGrp) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Bruno Calogero (@brunocalogero)\nversion_added: '2.5'\noptions:\n policy_group:\n   description:\n   - Name of the leaf policy group to be added/deleted.\n   aliases: [ name, policy_group_name ]\n description:\n   description:\n   - Description for the leaf policy group to be created.\n   aliases: [ descr ]\n lag_type:\n   description:\n   - Selector for the type of leaf policy group we want to create.\n   - C(leaf) for Leaf Access Port Policy Group\n   - C(link) for Port Channel (PC)\n   - C(node) for Virtual Port Channel (VPC)\n   aliases: [ lag_type_name ]\n   choices: [ leaf, link, node ]\n link_level_policy:\n   description:\n   - Choice of link_level_policy to be used as part of the leaf policy group to be created.\n   aliases: [ link_level_policy_name ]\n cdp_policy:\n   description:\n   - Choice of cdp_policy to be used as part of the leaf policy group to be created.\n   aliases: [ cdp_policy_name ]\n mcp_policy:\n   description:\n   - Choice of mcp_policy to be used as part of the leaf policy group to be created.\n   aliases: [ mcp_policy_name ]\n lldp_policy:\n   description:\n   - Choice of lldp_policy to be used as part of the leaf policy group to be created.\n   aliases: [ lldp_policy_name ]\n stp_interface_policy:\n   description:\n   - Choice of stp_interface_policy to be used as part of the leaf policy group to be created.\n   aliases: [ stp_interface_policy_name ]\n egress_data_plane_policing_policy:\n   description:\n   - Choice of egress_data_plane_policing_policy to be used as part of the leaf policy group to be created.\n   aliases: [ egress_data_plane_policing_policy_name ]\n ingress_data_plane_policing_policy:\n   description:\n   - Choice of ingress_data_plane_policing_policy to be used as part of the leaf policy group to be created.\n   aliases: [ ingress_data_plane_policing_policy_name ]\n priority_flow_control_policy:\n   description:\n   - Choice of priority_flow_control_policy to be used as part of the leaf policy group to be created.\n   aliases: [ priority_flow_control_policy_name ]\n fibre_channel_interface_policy:\n   description:\n   - Choice of fibre_channel_interface_policy to be used as part of the leaf policy group to be created.\n   aliases: [ fibre_channel_interface_policy_name ]\n slow_drain_policy:\n   description:\n   - Choice of slow_drain_policy to be used as part of the leaf policy group to be created.\n   aliases: [ slow_drain_policy_name ]\n port_channel_policy:\n   description:\n   - Choice of port_channel_policy to be used as part of the leaf policy group to be created.\n   aliases: [ port_channel_policy_name ]\n monitoring_policy:\n   description:\n   - Choice of monitoring_policy to be used as part of the leaf policy group to be created.\n   aliases: [ monitoring_policy_name ]\n storm_control_interface_policy:\n   description:\n   - Choice of storm_control_interface_policy to be used as part of the leaf policy group to be created.\n   aliases: [ storm_control_interface_policy_name ]\n l2_interface_policy:\n   description:\n   - Choice of l2_interface_policy to be used as part of the leaf policy group to be created.\n   aliases: [ l2_interface_policy_name ]\n port_security_policy:\n   description:\n   - Choice of port_security_policy to be used as part of the leaf policy group to be created.\n   aliases: [ port_security_policy_name ]\n aep:\n   description:\n   - Choice of attached_entity_profile (AEP) to be used as part of the leaf policy group to be created.\n   aliases: [ aep_name ]\n state:\n   description:\n   - Use C(present) or C(absent) for adding or removing.\n   - Use C(query) for listing an object or multiple objects.\n   choices: [ absent, present, query ]\n   default: present\nextends_documentation_fragment: aci\n'''\n\n# FIXME: Add query examples\nEXAMPLES = r'''\n- name: Create a Port Channel (PC) Interface Policy Group\n  aci_interface_policy_leaf_policy_group:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    policy_group: policygroupname\n    description: policygroupname description\n    lag_type: link\n    link_level_policy: whateverlinklevelpolicy\n    fibre_channel_interface_policy: whateverfcpolicy\n    state: present\n\n- name: Create a Virtual Port Channel (VPC) Interface Policy Group (no description)\n  aci_interface_policy_leaf_policy_group:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    policy_group: policygroupname\n    lag_type: node\n    link_level_policy: whateverlinklevelpolicy\n    fibre_channel_interface_policy: whateverfcpolicy\n    state: present\n\n- name: Create a Leaf Access Port Policy Group (no description)\n  aci_interface_policy_leaf_policy_group:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    policy_group: policygroupname\n    lag_type: leaf\n    link_level_policy: whateverlinklevelpolicy\n    fibre_channel_interface_policy: whateverfcpolicy\n    state: present\n\n- name: Delete an Interface policy Leaf Policy Group\n  aci_interface_policy_leaf_policy_group:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    policy_group: policygroupname\n    lag_type: type_name\n    state: absent\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update({\n        'policy_group': dict(type='str', aliases=['name', 'policy_group_name']),  # Not required for querying all objects\n        'description': dict(type='str', aliases=['descr']),\n        # NOTE: Since this module needs to include both infra:AccBndlGrp (for PC and VPC) and infra:AccPortGrp (for leaf access port policy group):\n        # NOTE: I'll allow the user to make the choice here (link(PC), node(VPC), leaf(leaf-access port policy group))\n        'lag_type': dict(type='str', aliases=['lag_type_name'], choices=['leaf', 'link', 'node']),  # Not required for querying all objects\n        'link_level_policy': dict(type='str', aliases=['link_level_policy_name']),\n        'cdp_policy': dict(type='str', aliases=['cdp_policy_name']),\n        'mcp_policy': dict(type='str', aliases=['mcp_policy_name']),\n        'lldp_policy': dict(type='str', aliases=['lldp_policy_name']),\n        'stp_interface_policy': dict(type='str', aliases=['stp_interface_policy_name']),\n        'egress_data_plane_policing_policy': dict(type='str', aliases=['egress_data_plane_policing_policy_name']),\n        'ingress_data_plane_policing_policy': dict(type='str', aliases=['ingress_data_plane_policing_policy_name']),\n        'priority_flow_control_policy': dict(type='str', aliases=['priority_flow_control_policy_name']),\n        'fibre_channel_interface_policy': dict(type='str', aliases=['fibre_channel_interface_policy_name']),\n        'slow_drain_policy': dict(type='str', aliases=['slow_drain_policy_name']),\n        'port_channel_policy': dict(type='str', aliases=['port_channel_policy_name']),\n        'monitoring_policy': dict(type='str', aliases=['monitoring_policy_name']),\n        'storm_control_interface_policy': dict(type='str', aliases=['storm_control_interface_policy_name']),\n        'l2_interface_policy': dict(type='str', aliases=['l2_interface_policy_name']),\n        'port_security_policy': dict(type='str', aliases=['port_security_policy_name']),\n        'aep': dict(type='str', aliases=['aep_name']),\n        'state': dict(type='str', default='present', choices=['absent', 'present', 'query']),\n    })\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['lag_type', 'policy_group']],\n            ['state', 'present', ['lag_type', 'policy_group']],\n        ],\n    )\n\n    policy_group = module.params['policy_group']\n    description = module.params['description']\n    lag_type = module.params['lag_type']\n    link_level_policy = module.params['link_level_policy']\n    cdp_policy = module.params['cdp_policy']\n    mcp_policy = module.params['mcp_policy']\n    lldp_policy = module.params['lldp_policy']\n    stp_interface_policy = module.params['stp_interface_policy']\n    egress_data_plane_policing_policy = module.params['egress_data_plane_policing_policy']\n    ingress_data_plane_policing_policy = module.params['ingress_data_plane_policing_policy']\n    priority_flow_control_policy = module.params['priority_flow_control_policy']\n    fibre_channel_interface_policy = module.params['fibre_channel_interface_policy']\n    slow_drain_policy = module.params['slow_drain_policy']\n    port_channel_policy = module.params['port_channel_policy']\n    monitoring_policy = module.params['monitoring_policy']\n    storm_control_interface_policy = module.params['storm_control_interface_policy']\n    l2_interface_policy = module.params['l2_interface_policy']\n    port_security_policy = module.params['port_security_policy']\n    aep = module.params['aep']\n    state = module.params['state']\n\n    if lag_type == 'leaf':\n        aci_class_name = 'infraAccPortGrp'\n        dn_name = 'accportgrp'\n        class_config_dict = dict(\n            name=policy_group,\n            descr=description,\n        )\n    elif lag_type == 'link' or lag_type == 'node':\n        aci_class_name = 'infraAccBndlGrp'\n        dn_name = 'accbundle'\n        class_config_dict = dict(\n            name=policy_group,\n            descr=description,\n            lagT=lag_type,\n        )\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class=aci_class_name,\n            aci_rn='infra/funcprof/{0}-{1}'.format(dn_name, policy_group),\n            filter_target='eq({0}.name, \"{1}\")'.format(aci_class_name, policy_group),\n            module_object=policy_group,\n        ),\n        child_classes=[\n            'infraRsAttEntP',\n            'infraRsCdpIfPol',\n            'infraRsFcIfPol',\n            'infraRsHIfPol',\n            'infraRsL2IfPol',\n            'infraRsL2PortSecurityPol',\n            'infraRsLacpPol',\n            'infraRsLldpIfPol',\n            'infraRsMcpIfPol',\n            'infraRsMonIfInfraPol',\n            'infraRsQosEgressDppIfPol',\n            'infraRsQosIngressDppIfPol',\n            'infraRsQosPfcIfPol',\n            'infraRsQosSdIfPol',\n            'infraRsStormctrlIfPol',\n            'infraRsStpIfPol',\n        ],\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class=aci_class_name,\n            class_config=class_config_dict,\n            child_configs=[\n                dict(\n                    infraRsAttEntP=dict(\n                        attributes=dict(\n                            tDn='uni/infra/attentp-{0}'.format(aep),\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsCdpIfPol=dict(\n                        attributes=dict(\n                            tnCdpIfPolName=cdp_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsFcIfPol=dict(\n                        attributes=dict(\n                            tnFcIfPolName=fibre_channel_interface_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsHIfPol=dict(\n                        attributes=dict(\n                            tnFabricHIfPolName=link_level_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsL2IfPol=dict(\n                        attributes=dict(\n                            tnL2IfPolName=l2_interface_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsL2PortSecurityPol=dict(\n                        attributes=dict(\n                            tnL2PortSecurityPolName=port_security_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsLacpPol=dict(\n                        attributes=dict(\n                            tnLacpLagPolName=port_channel_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsLldpIfPol=dict(\n                        attributes=dict(\n                            tnLldpIfPolName=lldp_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsMcpIfPol=dict(\n                        attributes=dict(\n                            tnMcpIfPolName=mcp_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsMonIfInfraPol=dict(\n                        attributes=dict(\n                            tnMonInfraPolName=monitoring_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsQosEgressDppIfPol=dict(\n                        attributes=dict(\n                            tnQosDppPolName=egress_data_plane_policing_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsQosIngressDppIfPol=dict(\n                        attributes=dict(\n                            tnQosDppPolName=ingress_data_plane_policing_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsQosPfcIfPol=dict(\n                        attributes=dict(\n                            tnQosPfcIfPolName=priority_flow_control_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsQosSdIfPol=dict(\n                        attributes=dict(\n                            tnQosSdIfPolName=slow_drain_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsStormctrlIfPol=dict(\n                        attributes=dict(\n                            tnStormctrlIfPolName=storm_control_interface_policy,\n                        ),\n                    ),\n                ),\n                dict(\n                    infraRsStpIfPol=dict(\n                        attributes=dict(\n                            tnStpIfPolName=stp_interface_policy,\n                        ),\n                    ),\n                ),\n            ],\n        )\n\n        aci.get_diff(aci_class=aci_class_name)\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "aci_interface_policy_leaf_policy_group.py", "id": "dc69addffae699bdeea8dadee38ecdee", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aci/aci_interface_policy_leaf_policy_group.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}