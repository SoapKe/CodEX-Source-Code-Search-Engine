{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport random\nimport re\nimport math\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_chr,\n    compat_ord,\n)\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    orderedSet,\n    str_or_none,\n)\n\n\nclass GloboIE(InfoExtractor):\n    _VALID_URL = r'(?:globo:|https?://.+?\\.globo\\.com/(?:[^/]+/)*(?:v/(?:[^/]+/)?|videos/))(?P<id>\\d{7,})'\n\n    _API_URL_TEMPLATE = 'http://api.globovideos.com/videos/%s/playlist'\n    _SECURITY_URL_TEMPLATE = 'http://security.video.globo.com/videos/%s/hash?player=flash&version=17.0.0.132&resource_id=%s'\n\n    _RESIGN_EXPIRATION = 86400\n\n    _TESTS = [{\n        'url': 'http://g1.globo.com/carros/autoesporte/videos/t/exclusivos-do-g1/v/mercedes-benz-gla-passa-por-teste-de-colisao-na-europa/3607726/',\n        'md5': 'b3ccc801f75cd04a914d51dadb83a78d',\n        'info_dict': {\n            'id': '3607726',\n            'ext': 'mp4',\n            'title': 'Mercedes-Benz GLA passa por teste de colis\u00e3o na Europa',\n            'duration': 103.204,\n            'uploader': 'Globo.com',\n            'uploader_id': '265',\n        },\n    }, {\n        'url': 'http://globoplay.globo.com/v/4581987/',\n        'md5': 'f36a1ecd6a50da1577eee6dd17f67eff',\n        'info_dict': {\n            'id': '4581987',\n            'ext': 'mp4',\n            'title': 'Acidentes de tr\u00e2nsito est\u00e3o entre as maiores causas de queda de energia em SP',\n            'duration': 137.973,\n            'uploader': 'Rede Globo',\n            'uploader_id': '196',\n        },\n    }, {\n        'url': 'http://canalbrasil.globo.com/programas/sangue-latino/videos/3928201.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://globosatplay.globo.com/globonews/v/4472924/',\n        'only_matching': True,\n    }, {\n        'url': 'http://globotv.globo.com/t/programa/v/clipe-sexo-e-as-negas-adeus/3836166/',\n        'only_matching': True,\n    }, {\n        'url': 'http://globotv.globo.com/canal-brasil/sangue-latino/t/todos-os-videos/v/ator-e-diretor-argentino-ricado-darin-fala-sobre-utopias-e-suas-perdas/3928201/',\n        'only_matching': True,\n    }, {\n        'url': 'http://canaloff.globo.com/programas/desejar-profundo/videos/4518560.html',\n        'only_matching': True,\n    }, {\n        'url': 'globo:3607726',\n        'only_matching': True,\n    }]\n\n    class MD5(object):\n        HEX_FORMAT_LOWERCASE = 0\n        HEX_FORMAT_UPPERCASE = 1\n        BASE64_PAD_CHARACTER_DEFAULT_COMPLIANCE = ''\n        BASE64_PAD_CHARACTER_RFC_COMPLIANCE = '='\n        PADDING = '=0xFF01DD'\n        hexcase = 0\n        b64pad = ''\n\n        def __init__(self):\n            pass\n\n        class JSArray(list):\n            def __getitem__(self, y):\n                try:\n                    return list.__getitem__(self, y)\n                except IndexError:\n                    return 0\n\n            def __setitem__(self, i, y):\n                try:\n                    return list.__setitem__(self, i, y)\n                except IndexError:\n                    self.extend([0] * (i - len(self) + 1))\n                    self[-1] = y\n\n        @classmethod\n        def hex_md5(cls, param1):\n            return cls.rstr2hex(cls.rstr_md5(cls.str2rstr_utf8(param1)))\n\n        @classmethod\n        def b64_md5(cls, param1, param2=None):\n            return cls.rstr2b64(cls.rstr_md5(cls.str2rstr_utf8(param1, param2)))\n\n        @classmethod\n        def any_md5(cls, param1, param2):\n            return cls.rstr2any(cls.rstr_md5(cls.str2rstr_utf8(param1)), param2)\n\n        @classmethod\n        def rstr_md5(cls, param1):\n            return cls.binl2rstr(cls.binl_md5(cls.rstr2binl(param1), len(param1) * 8))\n\n        @classmethod\n        def rstr2hex(cls, param1):\n            _loc_2 = '0123456789ABCDEF' if cls.hexcase else '0123456789abcdef'\n            _loc_3 = ''\n            for _loc_5 in range(0, len(param1)):\n                _loc_4 = compat_ord(param1[_loc_5])\n                _loc_3 += _loc_2[_loc_4 >> 4 & 15] + _loc_2[_loc_4 & 15]\n            return _loc_3\n\n        @classmethod\n        def rstr2b64(cls, param1):\n            _loc_2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'\n            _loc_3 = ''\n            _loc_4 = len(param1)\n            for _loc_5 in range(0, _loc_4, 3):\n                _loc_6_1 = compat_ord(param1[_loc_5]) << 16\n                _loc_6_2 = compat_ord(param1[_loc_5 + 1]) << 8 if _loc_5 + 1 < _loc_4 else 0\n                _loc_6_3 = compat_ord(param1[_loc_5 + 2]) if _loc_5 + 2 < _loc_4 else 0\n                _loc_6 = _loc_6_1 | _loc_6_2 | _loc_6_3\n                for _loc_7 in range(0, 4):\n                    if _loc_5 * 8 + _loc_7 * 6 > len(param1) * 8:\n                        _loc_3 += cls.b64pad\n                    else:\n                        _loc_3 += _loc_2[_loc_6 >> 6 * (3 - _loc_7) & 63]\n            return _loc_3\n\n        @staticmethod\n        def rstr2any(param1, param2):\n            _loc_3 = len(param2)\n            _loc_4 = []\n            _loc_9 = [0] * ((len(param1) >> 2) + 1)\n            for _loc_5 in range(0, len(_loc_9)):\n                _loc_9[_loc_5] = compat_ord(param1[_loc_5 * 2]) << 8 | compat_ord(param1[_loc_5 * 2 + 1])\n\n            while len(_loc_9) > 0:\n                _loc_8 = []\n                _loc_7 = 0\n                for _loc_5 in range(0, len(_loc_9)):\n                    _loc_7 = (_loc_7 << 16) + _loc_9[_loc_5]\n                    _loc_6 = math.floor(_loc_7 / _loc_3)\n                    _loc_7 -= _loc_6 * _loc_3\n                    if len(_loc_8) > 0 or _loc_6 > 0:\n                        _loc_8[len(_loc_8)] = _loc_6\n\n                _loc_4[len(_loc_4)] = _loc_7\n                _loc_9 = _loc_8\n\n            _loc_10 = ''\n            _loc_5 = len(_loc_4) - 1\n            while _loc_5 >= 0:\n                _loc_10 += param2[_loc_4[_loc_5]]\n                _loc_5 -= 1\n\n            return _loc_10\n\n        @classmethod\n        def str2rstr_utf8(cls, param1, param2=None):\n            _loc_3 = ''\n            _loc_4 = -1\n            if not param2:\n                param2 = cls.PADDING\n            param1 = param1 + param2[1:9]\n            while True:\n                _loc_4 += 1\n                if _loc_4 >= len(param1):\n                    break\n                _loc_5 = compat_ord(param1[_loc_4])\n                _loc_6 = compat_ord(param1[_loc_4 + 1]) if _loc_4 + 1 < len(param1) else 0\n                if 55296 <= _loc_5 <= 56319 and 56320 <= _loc_6 <= 57343:\n                    _loc_5 = 65536 + ((_loc_5 & 1023) << 10) + (_loc_6 & 1023)\n                    _loc_4 += 1\n                if _loc_5 <= 127:\n                    _loc_3 += compat_chr(_loc_5)\n                    continue\n                if _loc_5 <= 2047:\n                    _loc_3 += compat_chr(192 | _loc_5 >> 6 & 31) + compat_chr(128 | _loc_5 & 63)\n                    continue\n                if _loc_5 <= 65535:\n                    _loc_3 += compat_chr(224 | _loc_5 >> 12 & 15) + compat_chr(128 | _loc_5 >> 6 & 63) + compat_chr(\n                        128 | _loc_5 & 63)\n                    continue\n                if _loc_5 <= 2097151:\n                    _loc_3 += compat_chr(240 | _loc_5 >> 18 & 7) + compat_chr(128 | _loc_5 >> 12 & 63) + compat_chr(\n                        128 | _loc_5 >> 6 & 63) + compat_chr(128 | _loc_5 & 63)\n            return _loc_3\n\n        @staticmethod\n        def rstr2binl(param1):\n            _loc_2 = [0] * ((len(param1) >> 2) + 1)\n            for _loc_3 in range(0, len(_loc_2)):\n                _loc_2[_loc_3] = 0\n            for _loc_3 in range(0, len(param1) * 8, 8):\n                _loc_2[_loc_3 >> 5] |= (compat_ord(param1[_loc_3 // 8]) & 255) << _loc_3 % 32\n            return _loc_2\n\n        @staticmethod\n        def binl2rstr(param1):\n            _loc_2 = ''\n            for _loc_3 in range(0, len(param1) * 32, 8):\n                _loc_2 += compat_chr(param1[_loc_3 >> 5] >> _loc_3 % 32 & 255)\n            return _loc_2\n\n        @classmethod\n        def binl_md5(cls, param1, param2):\n            param1 = cls.JSArray(param1)\n            param1[param2 >> 5] |= 128 << param2 % 32\n            param1[(param2 + 64 >> 9 << 4) + 14] = param2\n            _loc_3 = 1732584193\n            _loc_4 = -271733879\n            _loc_5 = -1732584194\n            _loc_6 = 271733878\n            for _loc_7 in range(0, len(param1), 16):\n                _loc_8 = _loc_3\n                _loc_9 = _loc_4\n                _loc_10 = _loc_5\n                _loc_11 = _loc_6\n                _loc_3 = cls.md5_ff(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 0], 7, -680876936)\n                _loc_6 = cls.md5_ff(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 1], 12, -389564586)\n                _loc_5 = cls.md5_ff(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 2], 17, 606105819)\n                _loc_4 = cls.md5_ff(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 3], 22, -1044525330)\n                _loc_3 = cls.md5_ff(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 4], 7, -176418897)\n                _loc_6 = cls.md5_ff(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 5], 12, 1200080426)\n                _loc_5 = cls.md5_ff(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 6], 17, -1473231341)\n                _loc_4 = cls.md5_ff(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 7], 22, -45705983)\n                _loc_3 = cls.md5_ff(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 8], 7, 1770035416)\n                _loc_6 = cls.md5_ff(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 9], 12, -1958414417)\n                _loc_5 = cls.md5_ff(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 10], 17, -42063)\n                _loc_4 = cls.md5_ff(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 11], 22, -1990404162)\n                _loc_3 = cls.md5_ff(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 12], 7, 1804603682)\n                _loc_6 = cls.md5_ff(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 13], 12, -40341101)\n                _loc_5 = cls.md5_ff(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 14], 17, -1502002290)\n                _loc_4 = cls.md5_ff(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 15], 22, 1236535329)\n                _loc_3 = cls.md5_gg(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 1], 5, -165796510)\n                _loc_6 = cls.md5_gg(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 6], 9, -1069501632)\n                _loc_5 = cls.md5_gg(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 11], 14, 643717713)\n                _loc_4 = cls.md5_gg(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 0], 20, -373897302)\n                _loc_3 = cls.md5_gg(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 5], 5, -701558691)\n                _loc_6 = cls.md5_gg(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 10], 9, 38016083)\n                _loc_5 = cls.md5_gg(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 15], 14, -660478335)\n                _loc_4 = cls.md5_gg(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 4], 20, -405537848)\n                _loc_3 = cls.md5_gg(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 9], 5, 568446438)\n                _loc_6 = cls.md5_gg(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 14], 9, -1019803690)\n                _loc_5 = cls.md5_gg(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 3], 14, -187363961)\n                _loc_4 = cls.md5_gg(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 8], 20, 1163531501)\n                _loc_3 = cls.md5_gg(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 13], 5, -1444681467)\n                _loc_6 = cls.md5_gg(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 2], 9, -51403784)\n                _loc_5 = cls.md5_gg(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 7], 14, 1735328473)\n                _loc_4 = cls.md5_gg(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 12], 20, -1926607734)\n                _loc_3 = cls.md5_hh(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 5], 4, -378558)\n                _loc_6 = cls.md5_hh(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 8], 11, -2022574463)\n                _loc_5 = cls.md5_hh(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 11], 16, 1839030562)\n                _loc_4 = cls.md5_hh(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 14], 23, -35309556)\n                _loc_3 = cls.md5_hh(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 1], 4, -1530992060)\n                _loc_6 = cls.md5_hh(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 4], 11, 1272893353)\n                _loc_5 = cls.md5_hh(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 7], 16, -155497632)\n                _loc_4 = cls.md5_hh(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 10], 23, -1094730640)\n                _loc_3 = cls.md5_hh(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 13], 4, 681279174)\n                _loc_6 = cls.md5_hh(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 0], 11, -358537222)\n                _loc_5 = cls.md5_hh(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 3], 16, -722521979)\n                _loc_4 = cls.md5_hh(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 6], 23, 76029189)\n                _loc_3 = cls.md5_hh(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 9], 4, -640364487)\n                _loc_6 = cls.md5_hh(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 12], 11, -421815835)\n                _loc_5 = cls.md5_hh(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 15], 16, 530742520)\n                _loc_4 = cls.md5_hh(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 2], 23, -995338651)\n                _loc_3 = cls.md5_ii(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 0], 6, -198630844)\n                _loc_6 = cls.md5_ii(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 7], 10, 1126891415)\n                _loc_5 = cls.md5_ii(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 14], 15, -1416354905)\n                _loc_4 = cls.md5_ii(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 5], 21, -57434055)\n                _loc_3 = cls.md5_ii(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 12], 6, 1700485571)\n                _loc_6 = cls.md5_ii(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 3], 10, -1894986606)\n                _loc_5 = cls.md5_ii(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 10], 15, -1051523)\n                _loc_4 = cls.md5_ii(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 1], 21, -2054922799)\n                _loc_3 = cls.md5_ii(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 8], 6, 1873313359)\n                _loc_6 = cls.md5_ii(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 15], 10, -30611744)\n                _loc_5 = cls.md5_ii(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 6], 15, -1560198380)\n                _loc_4 = cls.md5_ii(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 13], 21, 1309151649)\n                _loc_3 = cls.md5_ii(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 4], 6, -145523070)\n                _loc_6 = cls.md5_ii(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 11], 10, -1120210379)\n                _loc_5 = cls.md5_ii(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 2], 15, 718787259)\n                _loc_4 = cls.md5_ii(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 9], 21, -343485551)\n                _loc_3 = cls.safe_add(_loc_3, _loc_8)\n                _loc_4 = cls.safe_add(_loc_4, _loc_9)\n                _loc_5 = cls.safe_add(_loc_5, _loc_10)\n                _loc_6 = cls.safe_add(_loc_6, _loc_11)\n            return [_loc_3, _loc_4, _loc_5, _loc_6]\n\n        @classmethod\n        def md5_cmn(cls, param1, param2, param3, param4, param5, param6):\n            return cls.safe_add(\n                cls.bit_rol(cls.safe_add(cls.safe_add(param2, param1), cls.safe_add(param4, param6)), param5), param3)\n\n        @classmethod\n        def md5_ff(cls, param1, param2, param3, param4, param5, param6, param7):\n            return cls.md5_cmn(param2 & param3 | ~param2 & param4, param1, param2, param5, param6, param7)\n\n        @classmethod\n        def md5_gg(cls, param1, param2, param3, param4, param5, param6, param7):\n            return cls.md5_cmn(param2 & param4 | param3 & ~param4, param1, param2, param5, param6, param7)\n\n        @classmethod\n        def md5_hh(cls, param1, param2, param3, param4, param5, param6, param7):\n            return cls.md5_cmn(param2 ^ param3 ^ param4, param1, param2, param5, param6, param7)\n\n        @classmethod\n        def md5_ii(cls, param1, param2, param3, param4, param5, param6, param7):\n            return cls.md5_cmn(param3 ^ (param2 | ~param4), param1, param2, param5, param6, param7)\n\n        @classmethod\n        def safe_add(cls, param1, param2):\n            _loc_3 = (param1 & 65535) + (param2 & 65535)\n            _loc_4 = (param1 >> 16) + (param2 >> 16) + (_loc_3 >> 16)\n            return cls.lshift(_loc_4, 16) | _loc_3 & 65535\n\n        @classmethod\n        def bit_rol(cls, param1, param2):\n            return cls.lshift(param1, param2) | (param1 & 0xFFFFFFFF) >> (32 - param2)\n\n        @staticmethod\n        def lshift(value, count):\n            r = (0xFFFFFFFF & value) << count\n            return -(~(r - 1) & 0xFFFFFFFF) if r > 0x7FFFFFFF else r\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            self._API_URL_TEMPLATE % video_id, video_id)['videos'][0]\n\n        title = video['title']\n\n        formats = []\n        for resource in video['resources']:\n            resource_id = resource.get('_id')\n            if not resource_id or resource_id.endswith('manifest'):\n                continue\n\n            security = self._download_json(\n                self._SECURITY_URL_TEMPLATE % (video_id, resource_id),\n                video_id, 'Downloading security hash for %s' % resource_id)\n\n            security_hash = security.get('hash')\n            if not security_hash:\n                message = security.get('message')\n                if message:\n                    raise ExtractorError(\n                        '%s returned error: %s' % (self.IE_NAME, message), expected=True)\n                continue\n\n            hash_code = security_hash[:2]\n            received_time = int(security_hash[2:12])\n            received_random = security_hash[12:22]\n            received_md5 = security_hash[22:]\n\n            sign_time = received_time + self._RESIGN_EXPIRATION\n            padding = '%010d' % random.randint(1, 10000000000)\n\n            signed_md5 = self.MD5.b64_md5(received_md5 + compat_str(sign_time) + padding)\n            signed_hash = hash_code + compat_str(received_time) + received_random + compat_str(sign_time) + padding + signed_md5\n\n            resource_url = resource['url']\n            signed_url = '%s?h=%s&k=%s' % (resource_url, signed_hash, 'flash')\n            if resource_id.endswith('m3u8') or resource_url.endswith('.m3u8'):\n                formats.extend(self._extract_m3u8_formats(\n                    signed_url, resource_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                formats.append({\n                    'url': signed_url,\n                    'format_id': 'http-%s' % resource_id,\n                    'height': int_or_none(resource.get('height')),\n                })\n\n        self._sort_formats(formats)\n\n        duration = float_or_none(video.get('duration'), 1000)\n        uploader = video.get('channel')\n        uploader_id = str_or_none(video.get('channel_id'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'duration': duration,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'formats': formats\n        }\n\n\nclass GloboArticleIE(InfoExtractor):\n    _VALID_URL = r'https?://.+?\\.globo\\.com/(?:[^/]+/)*(?P<id>[^/.]+)(?:\\.html)?'\n\n    _VIDEOID_REGEXES = [\n        r'\\bdata-video-id=[\"\\'](\\d{7,})',\n        r'\\bdata-player-videosids=[\"\\'](\\d{7,})',\n        r'\\bvideosIDs\\s*:\\s*[\"\\']?(\\d{7,})',\n        r'\\bdata-id=[\"\\'](\\d{7,})',\n        r'<div[^>]+\\bid=[\"\\'](\\d{7,})',\n    ]\n\n    _TESTS = [{\n        'url': 'http://g1.globo.com/jornal-nacional/noticia/2014/09/novidade-na-fiscalizacao-de-bagagem-pela-receita-provoca-discussoes.html',\n        'info_dict': {\n            'id': 'novidade-na-fiscalizacao-de-bagagem-pela-receita-provoca-discussoes',\n            'title': 'Novidade na fiscaliza\u00e7\u00e3o de bagagem pela Receita provoca discuss\u00f5es',\n            'description': 'md5:c3c4b4d4c30c32fce460040b1ac46b12',\n        },\n        'playlist_count': 1,\n    }, {\n        'url': 'http://g1.globo.com/pr/parana/noticia/2016/09/mpf-denuncia-lula-marisa-e-mais-seis-na-operacao-lava-jato.html',\n        'info_dict': {\n            'id': 'mpf-denuncia-lula-marisa-e-mais-seis-na-operacao-lava-jato',\n            'title': \"Lula era o 'comandante m\u00e1ximo' do esquema da Lava Jato, diz MPF\",\n            'description': 'md5:8aa7cc8beda4dc71cc8553e00b77c54c',\n        },\n        'playlist_count': 6,\n    }, {\n        'url': 'http://gq.globo.com/Prazeres/Poder/noticia/2015/10/all-o-desafio-assista-ao-segundo-capitulo-da-serie.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://gshow.globo.com/programas/tv-xuxa/O-Programa/noticia/2014/01/xuxa-e-junno-namoram-muuuito-em-luau-de-zeze-di-camargo-e-luciano.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://oglobo.globo.com/rio/a-amizade-entre-um-entregador-de-farmacia-um-piano-19946271',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if GloboIE.suitable(url) else super(GloboArticleIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        video_ids = []\n        for video_regex in self._VIDEOID_REGEXES:\n            video_ids.extend(re.findall(video_regex, webpage))\n        entries = [\n            self.url_result('globo:%s' % video_id, GloboIE.ie_key())\n            for video_id in orderedSet(video_ids)]\n        title = self._og_search_title(webpage, fatal=False)\n        description = self._html_search_meta('description', webpage)\n        return self.playlist_result(entries, display_id, title, description)\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport random\nimport re\nimport math\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_chr,\n    compat_ord,\n)\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    orderedSet,\n    str_or_none,\n)\n\n\nclass GloboIE(InfoExtractor):\n    _VALID_URL = r'(?:globo:|https?://.+?\\.globo\\.com/(?:[^/]+/)*(?:v/(?:[^/]+/)?|videos/))(?P<id>\\d{7,})'\n\n    _API_URL_TEMPLATE = 'http://api.globovideos.com/videos/%s/playlist'\n    _SECURITY_URL_TEMPLATE = 'http://security.video.globo.com/videos/%s/hash?player=flash&version=17.0.0.132&resource_id=%s'\n\n    _RESIGN_EXPIRATION = 86400\n\n    _TESTS = [{\n        'url': 'http://g1.globo.com/carros/autoesporte/videos/t/exclusivos-do-g1/v/mercedes-benz-gla-passa-por-teste-de-colisao-na-europa/3607726/',\n        'md5': 'b3ccc801f75cd04a914d51dadb83a78d',\n        'info_dict': {\n            'id': '3607726',\n            'ext': 'mp4',\n            'title': 'Mercedes-Benz GLA passa por teste de colis\u00e3o na Europa',\n            'duration': 103.204,\n            'uploader': 'Globo.com',\n            'uploader_id': '265',\n        },\n    }, {\n        'url': 'http://globoplay.globo.com/v/4581987/',\n        'md5': 'f36a1ecd6a50da1577eee6dd17f67eff',\n        'info_dict': {\n            'id': '4581987',\n            'ext': 'mp4',\n            'title': 'Acidentes de tr\u00e2nsito est\u00e3o entre as maiores causas de queda de energia em SP',\n            'duration': 137.973,\n            'uploader': 'Rede Globo',\n            'uploader_id': '196',\n        },\n    }, {\n        'url': 'http://canalbrasil.globo.com/programas/sangue-latino/videos/3928201.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://globosatplay.globo.com/globonews/v/4472924/',\n        'only_matching': True,\n    }, {\n        'url': 'http://globotv.globo.com/t/programa/v/clipe-sexo-e-as-negas-adeus/3836166/',\n        'only_matching': True,\n    }, {\n        'url': 'http://globotv.globo.com/canal-brasil/sangue-latino/t/todos-os-videos/v/ator-e-diretor-argentino-ricado-darin-fala-sobre-utopias-e-suas-perdas/3928201/',\n        'only_matching': True,\n    }, {\n        'url': 'http://canaloff.globo.com/programas/desejar-profundo/videos/4518560.html',\n        'only_matching': True,\n    }, {\n        'url': 'globo:3607726',\n        'only_matching': True,\n    }]\n\n    class MD5(object):\n        HEX_FORMAT_LOWERCASE = 0\n        HEX_FORMAT_UPPERCASE = 1\n        BASE64_PAD_CHARACTER_DEFAULT_COMPLIANCE = ''\n        BASE64_PAD_CHARACTER_RFC_COMPLIANCE = '='\n        PADDING = '=0xFF01DD'\n        hexcase = 0\n        b64pad = ''\n\n        def __init__(self):\n            pass\n\n        class JSArray(list):\n            def __getitem__(self, y):\n                try:\n                    return list.__getitem__(self, y)\n                except IndexError:\n                    return 0\n\n            def __setitem__(self, i, y):\n                try:\n                    return list.__setitem__(self, i, y)\n                except IndexError:\n                    self.extend([0] * (i - len(self) + 1))\n                    self[-1] = y\n\n        @classmethod\n        def hex_md5(cls, param1):\n            return cls.rstr2hex(cls.rstr_md5(cls.str2rstr_utf8(param1)))\n\n        @classmethod\n        def b64_md5(cls, param1, param2=None):\n            return cls.rstr2b64(cls.rstr_md5(cls.str2rstr_utf8(param1, param2)))\n\n        @classmethod\n        def any_md5(cls, param1, param2):\n            return cls.rstr2any(cls.rstr_md5(cls.str2rstr_utf8(param1)), param2)\n\n        @classmethod\n        def rstr_md5(cls, param1):\n            return cls.binl2rstr(cls.binl_md5(cls.rstr2binl(param1), len(param1) * 8))\n\n        @classmethod\n        def rstr2hex(cls, param1):\n            _loc_2 = '0123456789ABCDEF' if cls.hexcase else '0123456789abcdef'\n            _loc_3 = ''\n            for _loc_5 in range(0, len(param1)):\n                _loc_4 = compat_ord(param1[_loc_5])\n                _loc_3 += _loc_2[_loc_4 >> 4 & 15] + _loc_2[_loc_4 & 15]\n            return _loc_3\n\n        @classmethod\n        def rstr2b64(cls, param1):\n            _loc_2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'\n            _loc_3 = ''\n            _loc_4 = len(param1)\n            for _loc_5 in range(0, _loc_4, 3):\n                _loc_6_1 = compat_ord(param1[_loc_5]) << 16\n                _loc_6_2 = compat_ord(param1[_loc_5 + 1]) << 8 if _loc_5 + 1 < _loc_4 else 0\n                _loc_6_3 = compat_ord(param1[_loc_5 + 2]) if _loc_5 + 2 < _loc_4 else 0\n                _loc_6 = _loc_6_1 | _loc_6_2 | _loc_6_3\n                for _loc_7 in range(0, 4):\n                    if _loc_5 * 8 + _loc_7 * 6 > len(param1) * 8:\n                        _loc_3 += cls.b64pad\n                    else:\n                        _loc_3 += _loc_2[_loc_6 >> 6 * (3 - _loc_7) & 63]\n            return _loc_3\n\n        @staticmethod\n        def rstr2any(param1, param2):\n            _loc_3 = len(param2)\n            _loc_4 = []\n            _loc_9 = [0] * ((len(param1) >> 2) + 1)\n            for _loc_5 in range(0, len(_loc_9)):\n                _loc_9[_loc_5] = compat_ord(param1[_loc_5 * 2]) << 8 | compat_ord(param1[_loc_5 * 2 + 1])\n\n            while len(_loc_9) > 0:\n                _loc_8 = []\n                _loc_7 = 0\n                for _loc_5 in range(0, len(_loc_9)):\n                    _loc_7 = (_loc_7 << 16) + _loc_9[_loc_5]\n                    _loc_6 = math.floor(_loc_7 / _loc_3)\n                    _loc_7 -= _loc_6 * _loc_3\n                    if len(_loc_8) > 0 or _loc_6 > 0:\n                        _loc_8[len(_loc_8)] = _loc_6\n\n                _loc_4[len(_loc_4)] = _loc_7\n                _loc_9 = _loc_8\n\n            _loc_10 = ''\n            _loc_5 = len(_loc_4) - 1\n            while _loc_5 >= 0:\n                _loc_10 += param2[_loc_4[_loc_5]]\n                _loc_5 -= 1\n\n            return _loc_10\n\n        @classmethod\n        def str2rstr_utf8(cls, param1, param2=None):\n            _loc_3 = ''\n            _loc_4 = -1\n            if not param2:\n                param2 = cls.PADDING\n            param1 = param1 + param2[1:9]\n            while True:\n                _loc_4 += 1\n                if _loc_4 >= len(param1):\n                    break\n                _loc_5 = compat_ord(param1[_loc_4])\n                _loc_6 = compat_ord(param1[_loc_4 + 1]) if _loc_4 + 1 < len(param1) else 0\n                if 55296 <= _loc_5 <= 56319 and 56320 <= _loc_6 <= 57343:\n                    _loc_5 = 65536 + ((_loc_5 & 1023) << 10) + (_loc_6 & 1023)\n                    _loc_4 += 1\n                if _loc_5 <= 127:\n                    _loc_3 += compat_chr(_loc_5)\n                    continue\n                if _loc_5 <= 2047:\n                    _loc_3 += compat_chr(192 | _loc_5 >> 6 & 31) + compat_chr(128 | _loc_5 & 63)\n                    continue\n                if _loc_5 <= 65535:\n                    _loc_3 += compat_chr(224 | _loc_5 >> 12 & 15) + compat_chr(128 | _loc_5 >> 6 & 63) + compat_chr(\n                        128 | _loc_5 & 63)\n                    continue\n                if _loc_5 <= 2097151:\n                    _loc_3 += compat_chr(240 | _loc_5 >> 18 & 7) + compat_chr(128 | _loc_5 >> 12 & 63) + compat_chr(\n                        128 | _loc_5 >> 6 & 63) + compat_chr(128 | _loc_5 & 63)\n            return _loc_3\n\n        @staticmethod\n        def rstr2binl(param1):\n            _loc_2 = [0] * ((len(param1) >> 2) + 1)\n            for _loc_3 in range(0, len(_loc_2)):\n                _loc_2[_loc_3] = 0\n            for _loc_3 in range(0, len(param1) * 8, 8):\n                _loc_2[_loc_3 >> 5] |= (compat_ord(param1[_loc_3 // 8]) & 255) << _loc_3 % 32\n            return _loc_2\n\n        @staticmethod\n        def binl2rstr(param1):\n            _loc_2 = ''\n            for _loc_3 in range(0, len(param1) * 32, 8):\n                _loc_2 += compat_chr(param1[_loc_3 >> 5] >> _loc_3 % 32 & 255)\n            return _loc_2\n\n        @classmethod\n        def binl_md5(cls, param1, param2):\n            param1 = cls.JSArray(param1)\n            param1[param2 >> 5] |= 128 << param2 % 32\n            param1[(param2 + 64 >> 9 << 4) + 14] = param2\n            _loc_3 = 1732584193\n            _loc_4 = -271733879\n            _loc_5 = -1732584194\n            _loc_6 = 271733878\n            for _loc_7 in range(0, len(param1), 16):\n                _loc_8 = _loc_3\n                _loc_9 = _loc_4\n                _loc_10 = _loc_5\n                _loc_11 = _loc_6\n                _loc_3 = cls.md5_ff(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 0], 7, -680876936)\n                _loc_6 = cls.md5_ff(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 1], 12, -389564586)\n                _loc_5 = cls.md5_ff(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 2], 17, 606105819)\n                _loc_4 = cls.md5_ff(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 3], 22, -1044525330)\n                _loc_3 = cls.md5_ff(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 4], 7, -176418897)\n                _loc_6 = cls.md5_ff(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 5], 12, 1200080426)\n                _loc_5 = cls.md5_ff(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 6], 17, -1473231341)\n                _loc_4 = cls.md5_ff(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 7], 22, -45705983)\n                _loc_3 = cls.md5_ff(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 8], 7, 1770035416)\n                _loc_6 = cls.md5_ff(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 9], 12, -1958414417)\n                _loc_5 = cls.md5_ff(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 10], 17, -42063)\n                _loc_4 = cls.md5_ff(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 11], 22, -1990404162)\n                _loc_3 = cls.md5_ff(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 12], 7, 1804603682)\n                _loc_6 = cls.md5_ff(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 13], 12, -40341101)\n                _loc_5 = cls.md5_ff(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 14], 17, -1502002290)\n                _loc_4 = cls.md5_ff(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 15], 22, 1236535329)\n                _loc_3 = cls.md5_gg(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 1], 5, -165796510)\n                _loc_6 = cls.md5_gg(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 6], 9, -1069501632)\n                _loc_5 = cls.md5_gg(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 11], 14, 643717713)\n                _loc_4 = cls.md5_gg(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 0], 20, -373897302)\n                _loc_3 = cls.md5_gg(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 5], 5, -701558691)\n                _loc_6 = cls.md5_gg(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 10], 9, 38016083)\n                _loc_5 = cls.md5_gg(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 15], 14, -660478335)\n                _loc_4 = cls.md5_gg(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 4], 20, -405537848)\n                _loc_3 = cls.md5_gg(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 9], 5, 568446438)\n                _loc_6 = cls.md5_gg(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 14], 9, -1019803690)\n                _loc_5 = cls.md5_gg(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 3], 14, -187363961)\n                _loc_4 = cls.md5_gg(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 8], 20, 1163531501)\n                _loc_3 = cls.md5_gg(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 13], 5, -1444681467)\n                _loc_6 = cls.md5_gg(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 2], 9, -51403784)\n                _loc_5 = cls.md5_gg(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 7], 14, 1735328473)\n                _loc_4 = cls.md5_gg(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 12], 20, -1926607734)\n                _loc_3 = cls.md5_hh(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 5], 4, -378558)\n                _loc_6 = cls.md5_hh(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 8], 11, -2022574463)\n                _loc_5 = cls.md5_hh(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 11], 16, 1839030562)\n                _loc_4 = cls.md5_hh(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 14], 23, -35309556)\n                _loc_3 = cls.md5_hh(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 1], 4, -1530992060)\n                _loc_6 = cls.md5_hh(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 4], 11, 1272893353)\n                _loc_5 = cls.md5_hh(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 7], 16, -155497632)\n                _loc_4 = cls.md5_hh(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 10], 23, -1094730640)\n                _loc_3 = cls.md5_hh(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 13], 4, 681279174)\n                _loc_6 = cls.md5_hh(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 0], 11, -358537222)\n                _loc_5 = cls.md5_hh(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 3], 16, -722521979)\n                _loc_4 = cls.md5_hh(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 6], 23, 76029189)\n                _loc_3 = cls.md5_hh(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 9], 4, -640364487)\n                _loc_6 = cls.md5_hh(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 12], 11, -421815835)\n                _loc_5 = cls.md5_hh(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 15], 16, 530742520)\n                _loc_4 = cls.md5_hh(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 2], 23, -995338651)\n                _loc_3 = cls.md5_ii(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 0], 6, -198630844)\n                _loc_6 = cls.md5_ii(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 7], 10, 1126891415)\n                _loc_5 = cls.md5_ii(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 14], 15, -1416354905)\n                _loc_4 = cls.md5_ii(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 5], 21, -57434055)\n                _loc_3 = cls.md5_ii(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 12], 6, 1700485571)\n                _loc_6 = cls.md5_ii(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 3], 10, -1894986606)\n                _loc_5 = cls.md5_ii(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 10], 15, -1051523)\n                _loc_4 = cls.md5_ii(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 1], 21, -2054922799)\n                _loc_3 = cls.md5_ii(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 8], 6, 1873313359)\n                _loc_6 = cls.md5_ii(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 15], 10, -30611744)\n                _loc_5 = cls.md5_ii(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 6], 15, -1560198380)\n                _loc_4 = cls.md5_ii(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 13], 21, 1309151649)\n                _loc_3 = cls.md5_ii(_loc_3, _loc_4, _loc_5, _loc_6, param1[_loc_7 + 4], 6, -145523070)\n                _loc_6 = cls.md5_ii(_loc_6, _loc_3, _loc_4, _loc_5, param1[_loc_7 + 11], 10, -1120210379)\n                _loc_5 = cls.md5_ii(_loc_5, _loc_6, _loc_3, _loc_4, param1[_loc_7 + 2], 15, 718787259)\n                _loc_4 = cls.md5_ii(_loc_4, _loc_5, _loc_6, _loc_3, param1[_loc_7 + 9], 21, -343485551)\n                _loc_3 = cls.safe_add(_loc_3, _loc_8)\n                _loc_4 = cls.safe_add(_loc_4, _loc_9)\n                _loc_5 = cls.safe_add(_loc_5, _loc_10)\n                _loc_6 = cls.safe_add(_loc_6, _loc_11)\n            return [_loc_3, _loc_4, _loc_5, _loc_6]\n\n        @classmethod\n        def md5_cmn(cls, param1, param2, param3, param4, param5, param6):\n            return cls.safe_add(\n                cls.bit_rol(cls.safe_add(cls.safe_add(param2, param1), cls.safe_add(param4, param6)), param5), param3)\n\n        @classmethod\n        def md5_ff(cls, param1, param2, param3, param4, param5, param6, param7):\n            return cls.md5_cmn(param2 & param3 | ~param2 & param4, param1, param2, param5, param6, param7)\n\n        @classmethod\n        def md5_gg(cls, param1, param2, param3, param4, param5, param6, param7):\n            return cls.md5_cmn(param2 & param4 | param3 & ~param4, param1, param2, param5, param6, param7)\n\n        @classmethod\n        def md5_hh(cls, param1, param2, param3, param4, param5, param6, param7):\n            return cls.md5_cmn(param2 ^ param3 ^ param4, param1, param2, param5, param6, param7)\n\n        @classmethod\n        def md5_ii(cls, param1, param2, param3, param4, param5, param6, param7):\n            return cls.md5_cmn(param3 ^ (param2 | ~param4), param1, param2, param5, param6, param7)\n\n        @classmethod\n        def safe_add(cls, param1, param2):\n            _loc_3 = (param1 & 65535) + (param2 & 65535)\n            _loc_4 = (param1 >> 16) + (param2 >> 16) + (_loc_3 >> 16)\n            return cls.lshift(_loc_4, 16) | _loc_3 & 65535\n\n        @classmethod\n        def bit_rol(cls, param1, param2):\n            return cls.lshift(param1, param2) | (param1 & 0xFFFFFFFF) >> (32 - param2)\n\n        @staticmethod\n        def lshift(value, count):\n            r = (0xFFFFFFFF & value) << count\n            return -(~(r - 1) & 0xFFFFFFFF) if r > 0x7FFFFFFF else r\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            self._API_URL_TEMPLATE % video_id, video_id)['videos'][0]\n\n        title = video['title']\n\n        formats = []\n        for resource in video['resources']:\n            resource_id = resource.get('_id')\n            if not resource_id or resource_id.endswith('manifest'):\n                continue\n\n            security = self._download_json(\n                self._SECURITY_URL_TEMPLATE % (video_id, resource_id),\n                video_id, 'Downloading security hash for %s' % resource_id)\n\n            security_hash = security.get('hash')\n            if not security_hash:\n                message = security.get('message')\n                if message:\n                    raise ExtractorError(\n                        '%s returned error: %s' % (self.IE_NAME, message), expected=True)\n                continue\n\n            hash_code = security_hash[:2]\n            received_time = int(security_hash[2:12])\n            received_random = security_hash[12:22]\n            received_md5 = security_hash[22:]\n\n            sign_time = received_time + self._RESIGN_EXPIRATION\n            padding = '%010d' % random.randint(1, 10000000000)\n\n            signed_md5 = self.MD5.b64_md5(received_md5 + compat_str(sign_time) + padding)\n            signed_hash = hash_code + compat_str(received_time) + received_random + compat_str(sign_time) + padding + signed_md5\n\n            resource_url = resource['url']\n            signed_url = '%s?h=%s&k=%s' % (resource_url, signed_hash, 'flash')\n            if resource_id.endswith('m3u8') or resource_url.endswith('.m3u8'):\n                formats.extend(self._extract_m3u8_formats(\n                    signed_url, resource_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                formats.append({\n                    'url': signed_url,\n                    'format_id': 'http-%s' % resource_id,\n                    'height': int_or_none(resource.get('height')),\n                })\n\n        self._sort_formats(formats)\n\n        duration = float_or_none(video.get('duration'), 1000)\n        uploader = video.get('channel')\n        uploader_id = str_or_none(video.get('channel_id'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'duration': duration,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'formats': formats\n        }\n\n\nclass GloboArticleIE(InfoExtractor):\n    _VALID_URL = r'https?://.+?\\.globo\\.com/(?:[^/]+/)*(?P<id>[^/.]+)(?:\\.html)?'\n\n    _VIDEOID_REGEXES = [\n        r'\\bdata-video-id=[\"\\'](\\d{7,})',\n        r'\\bdata-player-videosids=[\"\\'](\\d{7,})',\n        r'\\bvideosIDs\\s*:\\s*[\"\\']?(\\d{7,})',\n        r'\\bdata-id=[\"\\'](\\d{7,})',\n        r'<div[^>]+\\bid=[\"\\'](\\d{7,})',\n    ]\n\n    _TESTS = [{\n        'url': 'http://g1.globo.com/jornal-nacional/noticia/2014/09/novidade-na-fiscalizacao-de-bagagem-pela-receita-provoca-discussoes.html',\n        'info_dict': {\n            'id': 'novidade-na-fiscalizacao-de-bagagem-pela-receita-provoca-discussoes',\n            'title': 'Novidade na fiscaliza\u00e7\u00e3o de bagagem pela Receita provoca discuss\u00f5es',\n            'description': 'md5:c3c4b4d4c30c32fce460040b1ac46b12',\n        },\n        'playlist_count': 1,\n    }, {\n        'url': 'http://g1.globo.com/pr/parana/noticia/2016/09/mpf-denuncia-lula-marisa-e-mais-seis-na-operacao-lava-jato.html',\n        'info_dict': {\n            'id': 'mpf-denuncia-lula-marisa-e-mais-seis-na-operacao-lava-jato',\n            'title': \"Lula era o 'comandante m\u00e1ximo' do esquema da Lava Jato, diz MPF\",\n            'description': 'md5:8aa7cc8beda4dc71cc8553e00b77c54c',\n        },\n        'playlist_count': 6,\n    }, {\n        'url': 'http://gq.globo.com/Prazeres/Poder/noticia/2015/10/all-o-desafio-assista-ao-segundo-capitulo-da-serie.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://gshow.globo.com/programas/tv-xuxa/O-Programa/noticia/2014/01/xuxa-e-junno-namoram-muuuito-em-luau-de-zeze-di-camargo-e-luciano.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://oglobo.globo.com/rio/a-amizade-entre-um-entregador-de-farmacia-um-piano-19946271',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if GloboIE.suitable(url) else super(GloboArticleIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        video_ids = []\n        for video_regex in self._VIDEOID_REGEXES:\n            video_ids.extend(re.findall(video_regex, webpage))\n        entries = [\n            self.url_result('globo:%s' % video_id, GloboIE.ie_key())\n            for video_id in orderedSet(video_ids)]\n        title = self._og_search_title(webpage, fatal=False)\n        description = self._html_search_meta('description', webpage)\n        return self.playlist_result(entries, display_id, title, description)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "globo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/globo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}