{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\"\"\"Networks for GAN Pix2Pix example using TFGAN.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport tensorflow as tf\n\nfrom slim.nets import cyclegan\nfrom slim.nets import pix2pix\n\n\ndef generator(input_images):\n  \"\"\"Thin wrapper around CycleGAN generator to conform to the TFGAN API.\n\n  Args:\n    input_images: A batch of images to translate. Images should be normalized\n      already. Shape is [batch, height, width, channels].\n\n  Returns:\n    Returns generated image batch.\n  \"\"\"\n  input_images.shape.assert_has_rank(4)\n  with tf.contrib.framework.arg_scope(cyclegan.cyclegan_arg_scope()):\n    output_images, _ = cyclegan.cyclegan_generator_resnet(input_images)\n  return output_images\n\n\ndef discriminator(image_batch, unused_conditioning=None):\n  \"\"\"A thin wrapper around the Pix2Pix discriminator to conform to TFGAN API.\"\"\"\n  with tf.contrib.framework.arg_scope(pix2pix.pix2pix_arg_scope()):\n    logits_4d, _ = pix2pix.pix2pix_discriminator(\n        image_batch, num_filters=[64, 128, 256, 512])\n    logits_4d.shape.assert_has_rank(4)\n   Output of logits is 4D. Reshape to 2D, for TFGAN.\n  logits_2d = tf.contrib.layers.flatten(logits_4d)\n\n  return logits_2d\n", "comments": "   networks gan pix2pix example using tfgan        future   import absolute import   future   import division   future   import print function  import tensorflow tf  slim nets import cyclegan slim nets import pix2pix   def generator(input images)       thin wrapper around cyclegan generator conform tfgan api     args      input images  a batch images translate  images normalized       already  shape  batch  height  width  channels      returns      returns generated image batch          input images shape assert rank(4)   tf contrib framework arg scope(cyclegan cyclegan arg scope())      output images      cyclegan cyclegan generator resnet(input images)   return output images   def discriminator(image batch  unused conditioning none)       a thin wrapper around pix2pix discriminator conform tfgan api        copyright 2017 the tensorflow authors  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       output logits 4d  reshape 2d  tfgan  ", "content": "# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Networks for GAN Pix2Pix example using TFGAN.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport tensorflow as tf\n\nfrom slim.nets import cyclegan\nfrom slim.nets import pix2pix\n\n\ndef generator(input_images):\n  \"\"\"Thin wrapper around CycleGAN generator to conform to the TFGAN API.\n\n  Args:\n    input_images: A batch of images to translate. Images should be normalized\n      already. Shape is [batch, height, width, channels].\n\n  Returns:\n    Returns generated image batch.\n  \"\"\"\n  input_images.shape.assert_has_rank(4)\n  with tf.contrib.framework.arg_scope(cyclegan.cyclegan_arg_scope()):\n    output_images, _ = cyclegan.cyclegan_generator_resnet(input_images)\n  return output_images\n\n\ndef discriminator(image_batch, unused_conditioning=None):\n  \"\"\"A thin wrapper around the Pix2Pix discriminator to conform to TFGAN API.\"\"\"\n  with tf.contrib.framework.arg_scope(pix2pix.pix2pix_arg_scope()):\n    logits_4d, _ = pix2pix.pix2pix_discriminator(\n        image_batch, num_filters=[64, 128, 256, 512])\n    logits_4d.shape.assert_has_rank(4)\n  # Output of logits is 4D. Reshape to 2D, for TFGAN.\n  logits_2d = tf.contrib.layers.flatten(logits_4d)\n\n  return logits_2d\n", "description": "Models and examples built with TensorFlow", "file_name": "networks.py", "id": "7ac75656c9985e0662a9e3903c2eeaef", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/gan/pix2pix/networks.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}